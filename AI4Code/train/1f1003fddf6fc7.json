{"cell_type":{"2e8a93e6":"code","e68c51c4":"code","0afaca54":"code","49e4dcdb":"code","8b065ed8":"code","e4a12fe2":"code","31e98191":"code","7dff56a3":"code","dec996d6":"code","570b65c0":"code","dff16bff":"code","884a6a94":"code","8c169dfb":"code","f0701fc5":"code","022042a0":"code","6ab47622":"code","a6f52c66":"code","4b48921c":"code","5cf7f8a1":"code","e5a417d4":"code","bea3bb76":"code","0f58ca30":"code","e86f714a":"code","efcbab4c":"code","220b83d7":"code","7dca330f":"code","91137632":"code","af0f0e5f":"code","751e950b":"code","2d7b24fc":"code","26f6f913":"code","2dbf7e55":"code","129af7fc":"code","6780421f":"code","26c382ff":"code","dc95eee1":"code","284a49c8":"code","da0993ff":"code","2cd9b93a":"code","b10f44d2":"code","25bd6881":"code","ee3f5be7":"code","2cfc79ad":"code","bf29a57e":"code","9d945fea":"code","4bbd1e0b":"code","7d27ca66":"code","f1d21c7f":"code","e749411c":"code","0156ff35":"code","9bea9638":"code","6f84dc8f":"code","7011c55f":"code","883717f4":"code","43f53ea1":"code","c7fb465a":"code","954462d8":"code","24a10265":"code","62991896":"code","ec976f7c":"code","dcbf5a25":"code","aa606050":"code","114d8299":"markdown","682ce6ff":"markdown","5dc30ecf":"markdown","dfe9cd22":"markdown","5601732c":"markdown","646010e0":"markdown","01730480":"markdown","5a1949f2":"markdown","e114c914":"markdown","41520421":"markdown","d7ac0bc1":"markdown","2f6afd5b":"markdown","fd520aa9":"markdown","5242fdc6":"markdown","4a885581":"markdown","dc1acdfd":"markdown","3fe36948":"markdown","0737f9ff":"markdown","5408b4ec":"markdown","8df29c26":"markdown","73cd3dc3":"markdown","e1346154":"markdown","2e90453d":"markdown","279def81":"markdown","c21e818d":"markdown","c9834076":"markdown","65e99e8f":"markdown","11fadede":"markdown","964891f1":"markdown","10b6cd93":"markdown","2614d00d":"markdown","e602dccb":"markdown","b27c4d2b":"markdown","27c408d4":"markdown","e18142d6":"markdown","7dc98bc4":"markdown","1890d53a":"markdown","ce3260e5":"markdown","88a44a19":"markdown","1a4a73cb":"markdown","f8e9e2e0":"markdown","d0e190f4":"markdown","b25ae0c6":"markdown","35ea8330":"markdown","0270e240":"markdown","2f914758":"markdown","fb753c69":"markdown","e8ed9f3e":"markdown","19555a4a":"markdown","cefb3d09":"markdown","06aef2f2":"markdown","31a7f696":"markdown","7c120571":"markdown","cd0ce040":"markdown","a69e5086":"markdown","cd8608e8":"markdown","24d9728d":"markdown","f87a8e75":"markdown","7e80ddc2":"markdown","ea0e2230":"markdown","34d02470":"markdown","8391731d":"markdown","d03ce30b":"markdown","8908ea68":"markdown","f43f77a9":"markdown"},"source":{"2e8a93e6":"# Data Manipulation \nimport numpy as np\nimport pandas as pd\n\n# Visualization \nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\n\n# Managing Warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Plot the Figures Inline\n%matplotlib inline\n","e68c51c4":"df_train=pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test=pd.read_csv('..\/input\/titanic\/test.csv')","0afaca54":"df_all = pd.concat([df_train, df_test]).reset_index(drop=True)\ndf_all.describe()","49e4dcdb":"# \u5c55\u793a\u6240\u6709\u79cd\u7c7b\u578b\u7279\u5f81\ndf_all.describe(include=['O'])","8b065ed8":"df_all.info()\ndf_all.head(5)","e4a12fe2":"# \u5355\u7279\u5f81\u5c55\u793aHave a glance at data\nimport math\ndef plot_distribution(dataset, cols=5, width=20, height=15, hspace=0.2, wspace=0.5):\n    plt.style.use('seaborn-whitegrid')\n    fig = plt.figure(figsize=(width,height))\n    fig.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=wspace, hspace=hspace)\n    rows = math.ceil(float(dataset.shape[1]) \/ cols)\n\n    for i, column in enumerate(dataset.columns):\n        ax = fig.add_subplot(rows, cols, i + 1)\n        #ax.set_title(column)\n        plt.xlabel(column, fontsize=20)\n        plt.ylabel('',fontsize=20)\n        plt.xticks(fontsize=15)\n        plt.yticks(fontsize=15)\n        if dataset.dtypes[column] == np.object:\n            g = sns.countplot(y=column, data=dataset,palette='plasma')\n            plt.xticks(rotation=25)\n        else:\n            #\u76f4\u65b9\u56fe\uff0c\u9891\u6570\n            \n            g = sns.distplot(dataset[column],kde_kws={'bw': 0.1})\n            plt.ylabel(ylabel='Density',fontsize=20)\n            plt.xticks(rotation=25)\n            \n    \nplot_distribution(df_all[['Age','Cabin','Embarked','Fare','Parch','Pclass','Sex','SibSp','Survived']], cols=3, width=20, height=20, hspace=0.45, wspace=0.5)","31e98191":"fig = plt.figure(figsize=(15,8))\nplt.subplot(2,2,1)\nsns.violinplot(data=df_all, x=\"Sex\", y=\"Age\", hue=\"Survived\",\n               split=True, inner=\"quart\", linewidth=1,\n               palette={1: \"#04A699\", 0: \".85\"})\nsns.despine(left=True)\nplt.subplot(2,2,2)\nsns.violinplot(data=df_all, x=\"Sex\", y=\"Pclass\", hue=\"Survived\",\n               split=True, inner=\"quart\", linewidth=1,\n               palette={1: \"#04A699\", 0: \".85\"})\nsns.despine(left=True)\nplt.subplot(2,2,3)\nsns.violinplot(data=df_all, x=\"Sex\", y=\"SibSp\", hue=\"Survived\",\n               split=True, inner=\"quart\", linewidth=1,\n               palette={1: \"#04A699\", 0: \".85\"})\nsns.despine(left=True)\nplt.subplot(2,2,4)\nsns.violinplot(data=df_all, x=\"Sex\", y=\"Parch\", hue=\"Survived\",\n               split=True, inner=\"quart\", linewidth=1,\n               palette={1: \"#04A699\", 0: \".85\"})\nsns.despine(left=True)","7dff56a3":"s_pclass= df_all['Survived'].groupby(df_all['Pclass'])\ns_pclass = s_pclass.value_counts().unstack()\ns_pclass= s_pclass[[1.0,0.0]]\ns_pclass.plot(kind='bar',stacked = True, colormap='tab20c')","dec996d6":"s_sex = df_all['Survived'].groupby(df_all['Sex'])\ns_sex = s_sex.value_counts().unstack()\ns_sex = s_sex[[1.0,0.0]]\nax = s_sex.plot(kind='bar',stacked=True,colormap='tab20c')","570b65c0":"sns.catplot(x=\"Pclass\",y='Survived', hue=\"Sex\", kind=\"point\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df_all)","dff16bff":"\nmissingno.matrix(df_all, figsize = (20,5))","884a6a94":"missingno.bar(df_all, sort='ascending', figsize = (20,5))","8c169dfb":"# \u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u552f\u4e8c\u7684\u4e24\u4e2a\u4e58\u5ba2\u540d\u5b57\uff0c\u53ef\u4ee5\u5f97\u77e5\u767b\u9646\u6e2f\u53e3\u4fe1\u606f\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6211\u662f\u5f15\u7528gunesevitan\u7684\u7ed3\u8bba\ndf_all['Embarked'] = df_all['Embarked'].fillna('S')\ndf_all['Embarked'].head()","f0701fc5":"#\u5bf9Cabin\u7f3a\u5931\u503c\u8fdb\u884c\u5904\u7406\uff0c\u5229\u7528U\uff08Unknown\uff09\u586b\u5145\u7f3a\u5931\u503c\ndf_all['Cabin']=df_all['Cabin'].fillna('U')\ndf_all['Cabin'].head()","022042a0":"#\u67e5\u770b\u7f3a\u5931\u503c\ndf_all[df_all['Fare'].isnull()]","6ab47622":"#\u5047\u8bbe\u8239\u7968\u4ef7\u548cCabin,Pclass\u4ee5\u53caEmbarked\u6709\u5173(\u6309\u7167\u5e38\u7406\u63a8\u65ad)\ndf_all['Fare']=df_all['Fare'].fillna(df_all[(df_all['Pclass']==3)&(df_all['Embarked']=='S')&(df_all['Cabin']=='U')]['Fare'].mean())","a6f52c66":"#\u5c06Age\u5b8c\u6574\u7684\u9879\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u3001\u5c06Age\u7f3a\u5931\u7684\u9879\u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u3002\nmissing_age_df = df_all.iloc[:,[1,2,4,5,6,7,8,9,10,11]]\nmissing_age_df['Sex']= missing_age_df['Sex'].factorize()[0]\nmissing_age_df['Embarked']= missing_age_df['Embarked'].factorize()[0]\nmissing_age_df['Cabin']= missing_age_df['Cabin'].factorize()[0]\nmissing_age_df.corr()['Age'].sort_values(0)","4b48921c":"missing_age_df = pd.DataFrame(missing_age_df[['Age', 'Parch','SibSp','Fare', 'Pclass','Cabin']])","5cf7f8a1":"#\u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nage_train=missing_age_df[missing_age_df['Age'].notnull()]\nage_test=missing_age_df[missing_age_df['Age'].isnull()]\n\n#\u751f\u6210\u8bad\u7ec3\u6570\u636e\u7684\u7279\u5f81\u548c\u6807\u7b7e\nage_train_X=age_train.drop(['Age'],axis=1)\nage_train_y=age_train['Age']\n#\u751f\u6210\u6d4b\u8bd5\u6570\u636e\u7684\u7279\u5f81\nage_test_X=age_test.drop(['Age'],axis=1)\n\n#\u5229\u7528\u968f\u673a\u68ee\u6797\u6784\u5efa\u6a21\u578b\nfrom sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)\nrfr.fit(age_train_X,age_train_y)\n\n#\u6a21\u578b\u5f97\u5206\nprint('\u6a21\u578b\u5f97\u5206\uff1a',rfr.score(age_train_X,age_train_y))","e5a417d4":"#\u9884\u6d4b\u5e74\u9f84\nage_test_y=rfr.predict(age_test_X)\n#\u586b\u5145\u9884\u6d4b\u6570\u636e\ndf_all.loc[df_all['Age'].isnull(),['Age']]=age_test_y\n# \u7f3a\u5931\u503c\u663e\u793a\nmissingno.matrix(df_all, figsize = (30,5))","bea3bb76":"df_all['Age'] = df_all['Age'].astype(int)\nplt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(30,5)) \nsns.barplot(x=\"Age\", y='Survived',data=df_all,palette='plasma');","0f58ca30":"df_all['Cabin'] = df_all['Cabin'].apply(lambda x:x[0])","e86f714a":"sns.catplot(x=\"Cabin\", kind=\"count\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df_all)","efcbab4c":"df_all.loc[ (df_all.Cabin !='U'), 'Cabin' ] = \"Yes\"\ndf_all.loc[ (df_all.Cabin =='U'), 'Cabin' ] = \"No\"","220b83d7":"plt.style.use('seaborn-whitegrid')\nfig = plt.figure(figsize=(15,6)) \nplt.subplot(1,2,1)\nsns.countplot(x=\"Cabin\",\n            palette=\"pastel\", edgecolor=\".6\",\n            data=df_all)\nplt.subplot(1,2,2)\nsns.countplot(x=\"Cabin\", hue=\"Survived\",palette=\"pastel\", edgecolor=\".6\",\n            data=df_all)","7dca330f":"df_base = df_all.iloc[:,1:]\ndf_base['Sex'] = df_base['Sex'].factorize()[0]\ndf_base = pd.get_dummies(df_base,columns={'Embarked','Pclass','Cabin'})\ndf_base.drop(['Name','Ticket'],axis=1,inplace=True)","91137632":"from sklearn.preprocessing import StandardScaler\nstd_scale = StandardScaler()\n\n## transforming \"age\"\ndf_base['Age'] = std_scale.fit_transform(df_base['Age'].values.reshape(-1,1))\n## transforming \"fare\"\ndf_base['Fare'] = std_scale.fit_transform(df_base['Fare'].values.reshape(-1,1))\ndf_base.head()","af0f0e5f":"#\u5206\u5272\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\ndf_base_train = df_base[df_base['Survived'].notnull()]\ndf_base_test = df_base[df_base['Survived'].isnull()]","751e950b":"# separating our independent and dependent variable\nX_train = df_base_train.drop(['Survived'], axis = 1).astype(float)\ny_train = df_base_train[\"Survived\"].astype(float)\n\nX_test = df_base_test.drop(['Survived'], axis = 1).astype(float)\n\n#train model\nfrom sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nclf.fit(X_train, y_train)","2d7b24fc":"base_pred = clf.predict(X_test)\nresult = pd.DataFrame({'PassengerId':df_test['PassengerId'].values, 'Survived':base_pred.astype(np.int32)})\nresult.to_csv(\"baseline.csv\", index=False)\nresult.head(10)","26f6f913":"from sklearn.model_selection import learning_curve\n\ntrain_sizes, train_scores, validation_scores = learning_curve(\n                                                   estimator = clf, X = X_train,\n                                                   y = y_train, train_sizes = np.linspace(.05, 1., 10))\ntrain_scores_mean = train_scores.mean(axis = 1)\nvalidation_scores_mean = validation_scores.mean(axis = 1)\ntrain_scores_std = train_scores.std(axis=1)\nvalidation_scores_std = validation_scores.std(axis=1)\n\nmidpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (validation_scores_mean[-1] - validation_scores_std[-1])) \/ 2\ndiff = (train_scores_mean[-1] + train_scores_std[-1]) - (validation_scores_mean[-1] - validation_scores_std[-1])\nprint(\"\u66f2\u7ebf\u4e2d\u70b9\uff1a\",midpoint,\"Gap\uff1a\",diff)\n\nplt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std,alpha=0.1)\nplt.fill_between(train_sizes, validation_scores_mean - validation_scores_std, validation_scores_mean + validation_scores_std, alpha=0.1)\n\nplt.plot(train_sizes, train_scores_mean,'o-', label = 'Training score')\nplt.plot(train_sizes, validation_scores_mean,'o-', label = 'Validation score')\n\nplt.ylabel('Score', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves', fontsize = 18, y = 1.03)\nplt.legend()","2dbf7e55":"pd.DataFrame({\"columns\":list(df_base.columns)[1:], \"coef\":list(clf.coef_.T)})","129af7fc":"df_improve = df_all.iloc[:,1:]\ndf_improve.head()","6780421f":"df_improve['Familysize'] = df_improve['Parch'] + df_improve['SibSp'] ","26c382ff":"fg = plt.figure(figsize=(10,5))\nsns.countplot(x='Familysize',hue='Survived',data=df_improve,palette=\"coolwarm\")","dc95eee1":"aloneDiction = {}\naloneDiction[0] = 1\ndf_improve['isAlone'] = df_improve['Familysize'].map(aloneDiction).fillna(0)","284a49c8":"fg = plt.figure(figsize=(8,5))\nsns.countplot(x='isAlone',hue='Survived',data=df_improve,palette=\"coolwarm\")","da0993ff":"df_improve['Title'] = df_improve['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\ndf_improve['Title'].value_counts()","2cd9b93a":"TitleDict={}\nTitleDict['Mr']='Man'\nTitleDict['Mlle']='Woman'\nTitleDict['Miss']='Woman'\nTitleDict['Mme']='Woman'\nTitleDict['Ms']='Woman'\nTitleDict['Mrs']='Woman'\nTitleDict['Master']='Boy'\nTitleDict['Jonkheer']='Man'\nTitleDict['Don']='Man'\nTitleDict['Sir']='Man'\nTitleDict['the Countess']='Woman'\nTitleDict['Dona']='Woman'\nTitleDict['Lady']='Woman'\nTitleDict['Capt']='Man'\nTitleDict['Col']='Man'\nTitleDict['Major']='Man'\nTitleDict['Dr']='Man'\nTitleDict['Rev']='Man'\n\ndf_improve['Title']=df_improve['Title'].map(TitleDict)\ndf_improve['Title'].value_counts()","b10f44d2":"fg = plt.figure(figsize=(10,5))\nsns.countplot(x='Title', hue='Survived',data=df_improve,palette=\"plasma\")","25bd6881":"plt.figure(figsize=(40,10))\nplt.xticks(rotation=90)\nplt.subplot(2,1,1)\nsns.countplot(data=df_improve,x='Age',palette='plasma')\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('Age', fontsize=20)\nplt.subplot(2,1,2)\nsns.barplot(data=df_improve,x='Age', y='Survived',palette='plasma')\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel('Age', fontsize=20)","ee3f5be7":"#\u63d0\u53d6child\u5e74\u9f84\u6bb5\nchildGroup = df_improve.loc[df_improve['Age'] <= 12]\nchildGroup.value_counts('Survived')","2cfc79ad":"sns.countplot(data=childGroup,x='Sex', hue='Survived',palette='plasma')","bf29a57e":"child_female = childGroup[(childGroup['Sex']=='male')& (childGroup['Survived']==1)].index\nchild_male = childGroup[(childGroup['Sex']=='female')& (childGroup['Survived']==0)].index","9d945fea":"df_improve['Sex'][child_female]='female'\ndf_improve['Sex'][child_male]='male'","4bbd1e0b":"df_improve.drop(['Name','Ticket','SibSp','Parch','Age','Fare'],axis=1,inplace=True)","7d27ca66":"df_improve['Sex'] = df_improve['Sex'].factorize()[0]\ndf_improve['Cabin'] = df_improve['Cabin'].factorize()[0]\n\ndf_improve = pd.get_dummies(df_improve,columns={'Title','Pclass','Embarked','Familysize'})","f1d21c7f":"plt.figure(figsize=(20,15))\nsns.heatmap(df_improve.corr(),annot=True)","e749411c":"imp_train = df_improve[df_improve.Survived.notnull()]\nfinal_test = df_improve[df_improve.Survived.isnull()].iloc[:,1:]","0156ff35":"X_train = imp_train.iloc[:,1:]\ny_train = imp_train.iloc[:,0]","9bea9638":"seed = 2020\nnp.random.seed(seed)","6f84dc8f":"# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(units = round((X_train.shape[1]+1)\/2), kernel_initializer = 'uniform', activation = 'relu', input_dim = X_train.shape[1]))\n\n# Adding the second hidden layer\nclassifier.add(Dense(units = round((X_train.shape[1]+1)\/2), kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nfit = classifier.fit(X_train, y_train, batch_size = 10, epochs = 300)","7011c55f":"plt.plot(range(len(fit.history.get('loss'))),fit.history.get('loss'),label='Loss')\nplt.plot(range(len(fit.history.get('accuracy'))),fit.history.get('accuracy'),label='Accuracy')\nplt.legend()","883717f4":"# Predicting the Test set results\ny_pred = classifier.predict(final_test)\ny_pred = [0 if y<0.5 else 1 for y in y_pred]\ny_pred = pd.DataFrame(y_pred)\n\nresult = pd.DataFrame({'PassengerId':df_test['PassengerId'].values, 'Survived':y_pred[0]})\nresult.to_csv(\"ANN-submission.csv\", index=False)\nresult.head(10)","43f53ea1":"# Machine learning \nimport sklearn.ensemble as ske\nfrom sklearn import datasets, model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier,ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, Ridge, Lasso, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom lightgbm import LGBMClassifier\n\n# Grid and Random Search\nfrom sklearn.model_selection import GridSearchCV,cross_val_score,StratifiedKFold\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Metrics\nfrom sklearn.metrics import precision_recall_fscore_support, roc_curve, auc\n#\u8bbe\u7f6ekfold\uff0c\u4ea4\u53c9\u91c7\u6837\u6cd5\u62c6\u5206\u6570\u636e\u96c6\nkfold=StratifiedKFold(n_splits=10)\n\n#\u6c47\u603b\u4e0d\u540c\u6a21\u578b\u7b97\u6cd5\nclassifiers=[]\nclassifiers.append(SVC())\nclassifiers.append(DecisionTreeClassifier())\nclassifiers.append(RandomForestClassifier())\nclassifiers.append(ExtraTreesClassifier())\nclassifiers.append(GradientBoostingClassifier())\nclassifiers.append(KNeighborsClassifier())\nclassifiers.append(LogisticRegression())\nclassifiers.append(LGBMClassifier())\n#\u4e0d\u540c\u673a\u5668\u5b66\u4e60\u4ea4\u53c9\u9a8c\u8bc1\u7ed3\u679c\u6c47\u603b\ncv_results=[]\nfor classifiers in classifiers:\n    cv_results.append(cross_val_score(classifiers,X_train,y_train,\n                                      scoring='accuracy',cv=kfold,n_jobs=-1))","c7fb465a":"#\u6c42\u51fa\u6a21\u578b\u5f97\u5206\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee\ncv_means=[]\ncv_std=[]\nfor cv_result in cv_results:\n    cv_means.append(cv_result.mean())\n    cv_std.append(cv_result.std())\n    \n#\u6c47\u603b\u6570\u636e\ncvDf=pd.DataFrame({'cv_mean':cv_means,\n                     'cv_std':cv_std,\n                     'algorithm':['SVC','DecisionTreeCla','RandomForestCla','ExtraTreesCla',\n                                  'GradientBoostingCla','KNN','LR','LGBMClassifier']})\n\ncvDf = cvDf.sort_values('cv_mean',ascending=False)\ncvDf","954462d8":"sns.barplot(data=cvDf,x='cv_mean',y='algorithm',**{'xerr':cv_std},palette='plasma')","24a10265":"#GradientBoostingClassifier\u6a21\u578b\nGBC = GradientBoostingClassifier(random_state=seed)\ngb_param_grid = {'loss' : [\"deviance\"],\n              'n_estimators' : [50,100,200],\n              'learning_rate': [0.5, 0.1, 0.05, 0.01],\n              'max_depth': [4,8,16],\n              'min_samples_leaf': [100,150,200],\n              'max_features': [0.3, 0.1] \n              }\nmodelgsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=kfold,\n                                     scoring=\"accuracy\", n_jobs= -1, verbose = 1)\nmodelgsGBC.fit(X_train,y_train)\nmodelgsGBC_accuracy = modelgsGBC.best_score_\nmodelgsGBC_parameters = modelgsGBC.best_params_\n\nprint(modelgsGBC_accuracy,modelgsGBC_parameters)\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(modelgsGBC, X_train, y_train,\n                                 cmap=plt.cm.Blues)","62991896":"#train model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(C=1.0,\n                   class_weight=None,\n                   dual=False, \n                   fit_intercept=True,\n                   intercept_scaling=1, \n                   max_iter=100, \n                   multi_class='ovr',\n                   n_jobs=-1,\n                   penalty='l2',\n                   random_state=seed, \n                   solver='liblinear',\n                   tol=0.0001,\n                   verbose=1, \n                   warm_start=False)\nlr.fit(X_train, y_train)\ndisp2 = plot_confusion_matrix(lr, X_train, y_train,\n                                 cmap=plt.cm.Blues)","ec976f7c":"from sklearn.metrics import roc_curve, auc\n#plt.style.use('seaborn-pastel')\ny_score1 = modelgsGBC.predict_proba(X_train)[:,1]\ny_score2 = lr.predict_proba(X_train)[:,1]\nFPR1, TPR1, _ = roc_curve(y_train, y_score1)\nFPR2, TPR2, _ = roc_curve(y_train, y_score2)\n\nROC_AUC1 = auc(FPR1, TPR1)\nROC_AUC2 = auc(FPR2, TPR2)\n\nplt.figure(figsize =[11,9])\nplt.plot(FPR1, TPR1, label= 'GBC ROC curve(area = %0.2f)'%ROC_AUC1, linewidth= 4)\nplt.plot(FPR2, TPR2, label= 'LR ROC curve(area = %0.2f)'%ROC_AUC2, linewidth= 4)\nplt.legend()\nplt.plot([0,1],[0,1], 'k--', linewidth = 4)\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.05])\nplt.xlabel('False Positive Rate', fontsize = 18)\nplt.ylabel('True Positive Rate', fontsize = 18)\nplt.title('ROC for Titanic survivors', fontsize= 18)","dcbf5a25":"y_pred=lr.predict(final_test)\ny_pred=y_pred.astype(int)","aa606050":"result = pd.DataFrame({'PassengerId':df_test['PassengerId'].values, 'Survived':y_pred})\nresult.to_csv(\"GBC-submission.csv\", index=False)\nprint(result['Survived'].value_counts())\nresult.head(10)","114d8299":"## 6.1 \u5e38\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5","682ce6ff":"# 3. \u7279\u5f81\u5de5\u7a0b","5dc30ecf":"### ROC\u66f2\u7ebf","dfe9cd22":"## 2.1 \u6570\u636e\u6e05\u6d17","5601732c":"## \u7c97\u7565\u89c2\u5bdf\u6570\u636e","646010e0":"## 3.5 Title","01730480":"\u6839\u636e\u903b\u8f91\u56de\u5f52\u7b97\u6cd5\u7684\u6587\u732e\u8bf4\u660e\uff1acoef_ corresponds to outcome 1 (True) and -coef_ corresponds to outcome 0 (False).","5a1949f2":"\u5c06\u5c0f\u4e8e12\u5c81\u7684\u513f\u7ae5\u6839\u636e\u662f\u5426\u5e78\u5b58\uff0c\u6765\u66f4\u6539\u4ed6\u7684\u6027\u683c\uff0c\u4f7f\u6574\u4f53\u6570\u636e\u66f4\u52a0\u7b26\u5408lady&child first\u539f\u5219","e114c914":"### \u56e0\u6b64\uff0c\u4e0b\u9762\u6211\u4eec\u7740\u91cd\u770b\u4e00\u4e0bPclass\u4e0e\u751f\u5b58\u7684\u5173\u7cfb","41520421":"*\u7537\u6027\u4e58\u5ba2\u5e78\u5b58\u7387\u8fdc\u5c0f\u4e8e\u5973\u6027\uff0c\u7aa5\u89c1lady-first\u539f\u5219*","d7ac0bc1":"### \u67e5\u770b\u5728\u4e0d\u540c\u83b7\u6551\u60c5\u51b5\u4e0b\uff0c\u6027\u522b\u4e0e\u5e74\u9f84\u4e4b\u95f4\u7684\u5173\u7cfb","2f6afd5b":"## \u7f3a\u5931\u503c\u663e\u793a","fd520aa9":"# 1. \u80cc\u666f\u4ecb\u7ecd","5242fdc6":"### \u7279\u5f81\u7f29\u653e","4a885581":"## 3.1 Cabin\n\u7531\u4e8e\u6709\u5927\u91cf\u7684\u7f3a\u5931\u503c\uff0c\u6211\u4eec\u91c7\u53d6\u4e8c\u5206\u7c7b\u7684\u65b9\u5f0f\u8fdb\u884c\u7279\u5f81\u8f6c\u6362","dc1acdfd":"## 3.2 \u7528\u6700\u7b80\u5355\u7684\u6a21\u578b\u83b7\u53d6Baseline\n\u7531\u4e8e\u6b64\u524d\uff0c\u518d\u6ca1\u6709baseline\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4e86\u5927\u91cf\u7279\u5f81\u8f6c\u5316\u548c\u751f\u6210\u65b0\u7279\u5f81\uff0c\u6700\u540e\u6211\u7528\u5b66\u4e60\u66f2\u7ebf\u9a8c\u8bc1\u53d1\u73b0\uff0c\u6a21\u578b\u51fa\u73b0\u8fc7\u62df\u5408\u60c5\u51b5\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e00\u6b21\u5148\u505a\u4e00\u4e2a\u57fa\u7840\u6a21\u578b\uff0c\u770bLB\u5f97\u5206\u540e\u5728\u8fdb\u884c\u6316\u6398\u3002","3fe36948":"![image.png](attachment:image.png)","0737f9ff":"## 3.4 Familysize","5408b4ec":"## Reference: \n1. https:\/\/zhuanlan.zhihu.com\/p\/50194676\n2. https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial\n3. https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python\n4. https:\/\/www.kaggle.com\/cdeotte\/titanic-using-name-only-0-818184.","8df29c26":"\u7ecf\u8fc7\u89c2\u5bdf\uff0c\u4ee5\u53ca\u4e4b\u524d\u7684\u5c1d\u8bd5\uff0c\u8fd9\u6b21\u51b3\u5b9a\u5c06familysize\u6539\u6210isAlone\u4e8c\u5206\u7c7b\uff0c\u800c\u4e0d\u662f\u50cf\u539f\u5148binning\u5904\u7406","73cd3dc3":"## 3.3 \u7ee7\u7eed\u65b0\u589e\u7279\u5f81","e1346154":"*LR\u8868\u73b0\u8f83\u597d\uff0c\u7136\u6211\u4eec\u518d\u9009\u4e00\u4e2a\u589e\u5f3a\u6a21\u578bGBC\u8fdb\u884c\u5bf9\u6bd4\u3002*","2e90453d":"## 6.1 \u6b64\u6587\u9884\u6d4b\u7ed3\u679c\u5f97\u5206","279def81":"## 3.6 Age","c21e818d":"\u53ef\u89c1\u4e00\u6591\u5440","c9834076":"### \u5c1d\u8bd5\uff1a\n1. \u7ed3\u5408\u4e4b\u524dage\u7684\u5206\u6790\uff0c\u76f4\u63a5\u7528age\u4f5c\u4e3a\u8fde\u7eed\u503c\u8fdb\u884c\u62df\u5408\u4e5f\u4e0d\u592a\u5408\u9002\uff0c\u53ef\u4ee5\u8fdb\u884c\u79bb\u6563\u5316\u5904\u7406\u5c1d\u8bd5\u4e00\u4e0b\u3002\n3. \u53ef\u4ee5\u5c06SibSp\u3001Parch\u7ed3\u5408\u751f\u6210\u65b0\u7684\u7279\u5f81familysize\n4. \u540d\u5b57\u4e2d\u7684title\u548cSurname\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u63d0\u53d6","65e99e8f":"### \u5b66\u4e60\u66f2\u7ebf\u9a8c\u8bc1\u6a21\u578b","11fadede":"# 2.\u6570\u636e\u9884\u5904\u7406","964891f1":"# 6. \u4e0e\u5176\u4ed6\u6a21\u578b\u5f97\u5206\u5bf9\u6bd4","10b6cd93":"# 5. \u9884\u6d4b\u7ed3\u679c","2614d00d":"### \u68c0\u67e5\u76f8\u5173\u6027","e602dccb":"Sex\u548c\u751f\u5b58\u7387","b27c4d2b":"#### \u63d0\u53d6Title","27c408d4":"### \u6cf0\u5766\u5c3c\u514b\u53f7\u4e8e1909\u5e743\u670831\u65e5\u5728\u7231\u5c14\u5170\u52a8\u5de5\u5efa\u9020\uff0c1911\u5e745\u670831\u65e5\u4e0b\u6c34\uff0c\u6b21\u5e744\u67082\u65e5\u5b8c\u5de5\u8bd5\u822a\u3002\u5979\u662f\u5f53\u65f6\u4e16\u754c\u4e0a\u4f53\u79ef\u6700\u5e9e\u5927\u3001\u5185\u90e8\u8bbe\u65bd\u6700\u8c6a\u534e\u7684\u5ba2\u8fd0\u8f6e\u8239\uff0c\u6709\u201c\u6c38\u4e0d\u6c89\u6ca1\u201d\u7684\u7f8e\u8a89\u3002\u7136\u800c\u8bbd\u523a\u7684\u662f\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u9996\u822a\u4fbf\u906d\u9047\u5384\u8fd0\uff1a1912\u5e744\u670810\u65e5, \u5979\u4ece\u82f1\u56fd\u5357\u5b89\u666e\u987f(**Southampton**)\u51fa\u53d1\uff0c\u9014\u5f84\u6cd5\u56fd\u745f\u5821(Cherbourg)\u548c\u7231\u5c14\u5170\u6606\u58eb\u6566(**Queenston**)\uff0c\u9a76\u5411\u7f8e\u56fd\u7ebd\u7ea6\u3002\u572814\u65e5\u665a23\u65f640\u5206\u5de6\u53f3\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0e\u4e00\u5ea7\u51b0\u5c71\u76f8\u649e\uff0c\u5bfc\u81f4\u8239\u4f53\u88c2\u7f1d\u8fdb\u6c34\u3002\u6b21\u65e5\u51cc\u66682\u65f620\u5206\u5de6\u53f3\uff0c\u6cf0\u5766\u5c3c\u514b\u53f7\u65ad\u4e3a\u4e24\u622a\u540e\u6c89\u5165\u5927\u897f\u6d0b\uff0c\u5176\u642d\u8f7d\u76842224\u540d\u8239\u5458\u53ca\u4e58\u5ba2\uff0c\u5728\u672c\u6b21\u6d77\u96be\u4e2d\u903e1500\u4eba\u4e27\u751f\u3002\n\n### \u5728\u5b66\u4e60\u673a\u5668\u5b66\u4e60\u76f8\u5173\u9879\u76ee\u65f6\uff0cTitanic\u751f\u5b58\u7387\u9884\u6d4b\u9879\u76ee\u4e5f\u901a\u5e38\u662f\u5165\u95e8\u7ec3\u4e60\u7684\u7ecf\u5178\u6848\u4f8b\u3002Kaggle\u5e73\u53f0\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7ade\u8d5b\u6848\u4f8b\u201cTitanic: Machine Learning from Disaster\u201d\uff0c\u5728\u8be5\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u7a76\u4ec0\u4e48\u6837\u7684\u4eba\u5728\u6b64\u6b21\u6d77\u96be\u4e2d\u5e78\u5b58\u7684\u51e0\u7387\u66f4\u9ad8\uff0c\u5e76\u901a\u8fc7\u6784\u5efa\u9884\u6d4b\u6a21\u578b\u6765\u9884\u6d4b\u4e58\u5ba2\u751f\u5b58\u7387\u3002\n\n### \u672c\u6587\u901a\u8fc7\u6570\u636e\u53ef\u89c6\u5316\u7406\u89e3\u6570\u636e\uff0c\u5e76\u5229\u7528\u7279\u5f81\u5de5\u7a0b\u7b49\u65b9\u6cd5\u6316\u6398\u66f4\u591a\u6709\u4ef7\u503c\u7684\u7279\u5f81\uff0c\u7136\u540e\u5229\u7528\u540c\u7ec4\u6548\u5e94\u627e\u51fa\u5171\u6027\u8f83\u5f3a\u7684\u7fa4\u4f53\u5e76\u5bf9\u5176\u6570\u636e\u8fdb\u884c\u4fee\u6b63\uff0c\u5728\u9009\u62e9\u6a21\u578b\u65f6\uff0c\u6211\u53d1\u73b0\u8bb8\u591akaggler\u90fd\u662f\u4f7f\u7528\u4e86\u591a\u79cd\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u4ea4\u53c9\u9a8c\u8bc1\u4ee5\u53ca\u7ed3\u5408\u6a21\u578b\u878d\u5408\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u672c\u6587\u5219\u53e6\u8f9f\u8e4a\u5f84\uff0c\u9009\u62e9\u795e\u7ecf\u7f51\u7edc\u6765\u5c1d\u8bd5\u6bd4\u8f83\u4e8e\u5927\u591a\u6570\u9ad8\u5206kaggler 0.83\u7684\u51c6\u786e\u7387\u3002","e18142d6":"*\u5f71\u54cd\u4e0d\u662f\u7279\u522b\u5927\uff0c\u6574\u4f53\u6765\u8bf4\uff0c\u513f\u7ae5\/\u9752\u5c11\u5e74\u751f\u5b58\u7387\u8f83\u5927*","7dc98bc4":"drop\u4e0d\u9700\u8981\u7684\u53d8\u91cf","1890d53a":"*Done with null values.*","ce3260e5":"### \u9884\u6d4b\u3001\u5bfc\u51fa\u7ed3\u679c","88a44a19":"## 2.1 \u5bfc\u5165\u6570\u636e","1a4a73cb":"\u7ecf\u8fc7\u4e4b\u524d\u7684\u591a\u6b21\u5c1d\u8bd5\uff0c\u4ee5\u53ca\u501f\u9274LR\u7684\u9a8c\u8bc1\uff0cage\u65e0\u8bba\u662f\u4f5c\u4e3a\u79bb\u6563\u8fd8\u662f\u8fde\u7eed\u90fd\u4e0d\u592a\u80fd\u63d0\u9ad8\u9884\u6d4b\u51c6\u5ea6\uff0c\u53cd\u800c\u6210\u4e3a\u566a\u97f3\uff0c\u4f46\u662f\u503c\u5f97\u5c1d\u8bd5\u7684\u662f\uff0cage<16\u7684\u6216\u8005<12\u8fd9\u90e8\u5206\u4eba\u7fa4\u53ef\u4f5c\u4e3achild\u5355\u72ec\u5217\u4e3a\u4e00\u7ec4\u6216\u8005\u4f7f\u7528\u66f4\u52a0\u53d6\u5de7\u7684\u529e\u6cd5\u2014\u2014\u5c06child\u548cwowen\u5f52\u4e3a\u4e00\u7c7b\u6839\u636e\u662f\u5426\u5e78\u5b58\u6765\u5206\u7ec4\u3002","f8e9e2e0":"### Pclass\u548c\u751f\u5b58\u7387","d0e190f4":"### 2.1.4 \u5904\u7406Age\u7f3a\u5931\u503c","b25ae0c6":"\u586b\u8865\u5b8cage\u6765\u770b\u4e00\u4e0bage\u5bf9\u751f\u5b58\u7684\u5f71\u54cd","35ea8330":"### 2.1.1 \u5904\u7406Emabarked\u7f3a\u5931\u503c","0270e240":"## 4.2 ANN","2f914758":"### \u8bad\u7ec3\u6a21\u578b\uff08\u903b\u8f91\u56de\u5f52\uff09","fb753c69":"## 4.\u5efa\u6a21","e8ed9f3e":"![image.png](attachment:image.png)","19555a4a":"*\u53ef\u89c1\uff0c\u6027\u522b\u548c\u8231\u4f4d\u5bf9\u751f\u5b58\u7684\u5f71\u54cd\u5f88\u5927\uff0c\u7279\u522b\u662f\u6027\u522b*","cefb3d09":"\u7efc\u5408\u6027\u522b\u548c\u8231\u4f4d\u4e24\u4e2a\u53d8\u91cf\u6765\u89c2\u5bdf\u5bf9\u751f\u5b58\u7387\u7684\u5f71\u54cd","06aef2f2":"### 2.1.2 \u5904\u7406Cabin\u7f3a\u5931\u503c","31a7f696":"### 6.2 \u7ed3\u8bba","7c120571":"*\u5f88\u663e\u7136\uff0clower class\u7684\u4e58\u5ba2\u6b7b\u4ea1\u7387\u8f83\u9ad8*","cd0ce040":"\u89c2\u5bdf\u5b66\u4e60\u66f2\u7ebf\u53d1\u73b0\u6a21\u578b\u6ca1\u6709\u8fc7\u62df\u5408\uff0c\u53ef\u4ee5\u65b0\u589e\u66f4\u591a\u7684\u7279\u5f81\u5230\u6a21\u578b\u5f53\u4e2d\u3002","a69e5086":"![image.png](attachment:image.png)","cd8608e8":"### \u5f52\u4e00\u5316\u5904\u7406","24d9728d":"### \u753b\u51faloss\u548caccuracy\u7684\u53d8\u5316","f87a8e75":"### \u6784\u5efa\u865a\u62df\u53d8\u91cf","7e80ddc2":"### 1. \u901a\u8fc7\u5b8c\u6210\u8fd9\u4e2a\u65b0\u624b\u7ade\u8d5b\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u65ad\u63a2\u7d22\u7279\u5f81\u5de5\u7a0b\uff0c\u4e0d\u65ad\u5bf9\u6bd4\u7279\u5f81\uff0c\u8fdb\u884c\u7279\u5f81\u9009\u53d6\uff0c\u8fd8\u6709\u6a21\u578b\u4e0a\u7684\u9009\u62e9\uff0c\u6162\u6162\u53d1\u73b0\uff0c\u7279\u5f81\u4e0d\u662f\u8d8a\u591a\u8d8a\u597d\uff0c\u6a21\u578b\u4e5f\u4e0d\u662f\u51c6\u786e\u5ea6\u8d8a\u9ad8\u8d8a\u597d\uff0c\u4e00\u5f00\u59cb\u4f5c\u4e3a\u65b0\u624b\u7684\u6211\uff0c\u5c31\u8fdb\u5165\u5f88\u5927\u7684\u4e00\u4e2a\u8bef\u533a\uff0c\u56e0\u4e3a\u5728\u5b66\u4e60ML\u7684\u65f6\u5019\u901a\u5e38\u662f\u8bad\u7ec3\u96c6\u6d4b\u8bd5\u96c6\u90fd\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\uff0c\u8fc7\u62df\u5408\u53ef\u4ee5\u5f88\u5bb9\u6613\u88ab\u53d1\u73b0\uff0c\u4f46\u662f\u7ade\u8d5b\u4e2d\uff0c\u6d4b\u8bd5\u96c6\u7684y\u662f\u672a\u77e5\u7684\uff0c\u53ea\u80fd\u901a\u8fc7\u4e00\u6b21\u4e00\u6b21\u7684\u5bf9\u6bd4LB\u5206\u6570\uff0c\u6765\u5bf9\u6bd4\u3002\u540e\u6765\uff0c\u770b\u4e86\u5404\u79cd\u5927\u795e\u7684notebook\uff0c\u51b3\u5b9a\u6212\u9a84\u6212\u8e81\uff0c\u4e00\u6b65\u4e00\u6b65\u7684\u5c06\u7279\u5f81\u5de5\u7a0b\u4e00\u6b65\u4e00\u6b65\u5806\u4e0a\u53bb\uff0c\u7528\u5b66\u4e60\u66f2\u7ebf\u548croc\u53bb\u8f85\u52a9\u6162\u6162\u505a\u8c03\u6574\u548c\u5bf9\u6bd4\uff0c\u624d\u6162\u6162\u6709\u63d0\u5347\uff0c\u4ee5\u81f3\u4e8e\u5230\u540e\u6765\uff0c\u5206\u6570\u5176\u5b9e\u5df2\u7ecf\u4e0d\u91cd\u8981\u4e86\uff0c\u8fd9\u4e2a\u5b66\u4e60\u7684\u8fc7\u7a0b\u662f\u6700\u6709\u610f\u4e49\u7684\u3002\n### 2. \u6700\u540e\uff0c\u7279\u5f81\u5de5\u7a0b\u771f\u7684\u662f\u592a\u91cd\u8981\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u8bf4\uff0c\u540c\u6837\u7684\u7279\u5f81\u5de5\u7a0b\u7528\u4e0d\u540c\u7684\u6a21\u578b\u6765\u9884\u6d4b\uff0c\u51fa\u6765\u7684\u7ed3\u679c\u4e0d\u4f1a\u6709\u7279\u522b\u5927\u7684\u51fa\u5165\uff0c\u8c03\u53c2\uff0c\u96c6\u6210\u662f\u4f1a\u6709\u4e00\u5b9a\u63d0\u5206\uff0c\u4f46\u662f\u592a\u5c40\u9650\u4e86\uff0c\u800c\u7279\u5f81\u63d0\u53d6\u7684\u597d\uff0c\u53ef\u80fd\u53ea\u9700\u8981\u51e0\u5217\u53d8\u91cf\u7528\u6700\u7b80\u5355\u7684LR\u6a21\u578b\u4e5f\u80fd\u5f97\u51fa\u4e0d\u9519\u7684\u6210\u7ee9\uff0c\u5178\u578b\u7684\u5c31\u662fcdeotte\u5927\u4f6c\u7684WCG\u6a21\u578b\uff0c\u5229\u7528\u4e86lady child first\u8fd9\u4e2a\u5f53\u65f6\u4e00\u5927\u9003\u751f\u539f\u5219\u8fdb\u884c\u5f00\u5c55\u6df1\u6316\u3002\n### 3. Titanic: Machine Learning from Disaster\u662fkaggle\u5f88\u9002\u5408\u65b0\u624b\u5b66\u4e60\u673a\u5668\u5b66\u4e60\/\u6df1\u5ea6\u5b66\u4e60\u7684\u4e00\u4e2a\u5165\u95e8\u6bd4\u8d5b\uff0c\u5728\u5b9e\u8df5\u8fd9\u4e2a\u9879\u76ee\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u901a\u8fc7notebook\u7814\u7a76\u5927\u795e\u7684\u7279\u5f81\u5de5\u7a0b\u3001\u6a21\u578b\u9009\u62e9\u3001\u63d0\u5347\u3001\u4f18\u5316\u7b49\u7684\u601d\u8def\uff0c\u4ee5\u53cadiscussion\u90e8\u5206\uff0c\u5173\u4e8e\u8fd9\u4e2a\u7ade\u8d5b\u7684\u5927\u90e8\u5206\u95ee\u9898\u8ba8\u8bba\uff0c\u53ef\u4ee5\u5e2e\u52a9\u65b0\u624b\u63d0\u5347\u81ea\u5df1\u7684\u6280\u80fd\u4ee5\u53ca\u9010\u6b65\u63d0\u9ad8\u4ed6\u4eec\u7684\u5f97\u5206","ea0e2230":"#### \u56e0\u4e3aAge\u9879\u7f3a\u5931\u8f83\u591a\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u5c06\u5176\u586b\u5145\u4e3a\u4f17\u6570\u6216\u8005\u5e73\u5747\u6570\u3002\u5e38\u89c1\u6709\u4e24\u79cd\u586b\u5145\u6cd5\uff0c\u4e00\u662f\u6839\u636eTitle\u9879\u4e2d\u7684Mr\u3001Master\u3001Miss\u7b49\u79f0\u547c\u7684\u5e73\u5747\u5e74\u9f84\u586b\u5145\uff0c\u6216\u8005\u7efc\u5408\u51e0\u9879\uff08Sex\u3001Title\u3001Pclass\uff09\u7684Age\u5747\u503c\u3002\u4e8c\u662f\u5229\u7528\u5176\u4ed6\u7ec4\u7279\u5f81\u91cf\uff0c\u91c7\u7528\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u9884\u6d4bAge\uff0c\u672c\u4f8b\u91c7\u7528\u7684\u662f\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002","34d02470":"### LB\u5f97\u5206\uff1a","8391731d":"### 2.1.3 \u5904\u7406Fare\u7f3a\u5931\u503c","d03ce30b":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a1. \u4e0d\u540c\u751f\u5b58\u60c5\u51b5\u4e0b\uff0c\u7537\u5973\u6027\u522b\u5728\u5e74\u9f84\u5206\u5e03\u4e2d\u76f8\u4f3c\u30022. \u4e0d\u540c\u8231\u4f4d\u751f\u5b58\u6bd4\u4f8b\u4e0d\u4e00\uff0c\u7537\u5973\u5404\u8231\u4f4d\u5206\u5e03\u76f8\u4f3c\u30023. \u5973\u6027\u83b7\u6551\u4e58\u5458\u4e2d\uff0c\u5144\u5f1f\u59d0\u59b9\u7684\u5f71\u54cd\u4f3c\u4e4e\u5f88\u5927\u3002","8908ea68":"*\u901a\u8fc7\u5bf9Cabin\u7684\u4e8c\u5206\u7c7b\uff0c\u53d1\u73b0\u6709\u6ca1\u6709Cabin\u7684\u4e58\u5ba2\u5e78\u5b58\u7387\u662f\u6709\u5dee\u5f02\u7684*","f43f77a9":"### \u672c\u6587\u6570\u636e\u96c6\u662f\u6765\u6e90\u4e8eKaggle\u5e73\u53f0\u4e2d\u201cTitanic: Machine Learning from Disaster\u201d\u7ade\u8d5b\u9879\u76ee\uff0c\u6570\u636e\u5b57\u6bb5\u91ca\u4e49\u5982\u4e0b\n![image.png](attachment:image.png)"}}