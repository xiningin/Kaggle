{"cell_type":{"14165290":"code","03237f15":"code","99350680":"code","0e3e40b7":"code","5a9cf24a":"code","7cba9463":"code","557f42cf":"code","8877cd2b":"code","854ad6fa":"code","e65d2b56":"code","0b9fa990":"code","8cdcd5da":"code","e646fc17":"code","a7339c9e":"code","3d71fa87":"code","ec740c8a":"code","3e14a7ab":"code","199181ac":"code","4719e093":"code","77305c35":"code","58a696f1":"code","f9b1d9ff":"code","cde61104":"code","b9da66dd":"code","00508343":"code","3c293512":"code","16865e4c":"code","5f4a4a3c":"code","44b89339":"code","dce7c2cb":"code","942364c5":"code","f65e59a2":"code","232464e5":"code","de26171d":"code","d10655ee":"code","b0792fce":"code","b77e9faf":"code","f40bdbd1":"code","50aad38c":"code","818bd0a8":"code","a45fe4d3":"code","efe71b79":"code","3c57e171":"code","cbe2ca07":"code","4d591610":"code","d86a8e17":"code","ccbfc6ad":"code","70475538":"code","6f41b7be":"code","6d0a672c":"code","3a66f743":"code","cca2b1ea":"code","2d171d00":"code","9c4df81e":"code","2bb4ddfb":"code","4ef192b9":"code","de8cb3db":"code","3f7aa869":"code","4e04eb10":"code","0e54f513":"markdown","8178d3d2":"markdown","17da170e":"markdown","71c5a2dc":"markdown","d16bb757":"markdown","f1a98c7d":"markdown","e9721b1c":"markdown","bd01cf0f":"markdown","8ea7f80c":"markdown","8d504fbc":"markdown","af17ba55":"markdown","dd88506a":"markdown","35a11038":"markdown","bf8cd14c":"markdown","cb8bca3e":"markdown","b8576665":"markdown","26c5a08b":"markdown","e01079b5":"markdown","08372139":"markdown","d3ba178b":"markdown","dbe5f346":"markdown","602d1a2f":"markdown","26473645":"markdown","dd789095":"markdown","a65b61d3":"markdown","233a8a67":"markdown","2284c00a":"markdown","5d0626a0":"markdown","0682f30f":"markdown","a446367e":"markdown","7d8107cd":"markdown","1f828960":"markdown","682f14c7":"markdown","b80d254b":"markdown"},"source":{"14165290":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom category_encoders import TargetEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","03237f15":"df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndf.shape","99350680":"df.head(10)","0e3e40b7":"df.dtypes","5a9cf24a":"fig = plt.figure(figsize=(10, 7))\nsns.heatmap(df.corr())\nplt.show()","7cba9463":"df.isnull().sum()","557f42cf":"df.describe()","8877cd2b":"def plot_violin(x_variable, y_variable):\n    fig = plt.figure(figsize=(10, 7))\n    sns.violinplot(x=x_variable, y=y_variable)\n    plt.show()\n    return 0","854ad6fa":"plot_violin(df[\"HeartDisease\"], df[\"Age\"])","e65d2b56":"df[df[\"Age\"] < 50][\"HeartDisease\"].value_counts()","0b9fa990":"df[df[\"Age\"] > 50][\"HeartDisease\"].value_counts()","8cdcd5da":"plot_violin(df[\"HeartDisease\"], df[\"RestingBP\"])","e646fc17":"df[df[\"RestingBP\"] > 140][\"HeartDisease\"].value_counts()","a7339c9e":"plot_violin(df[\"HeartDisease\"], df[\"Cholesterol\"])","3d71fa87":"df[df[\"Cholesterol\"] > 220][\"HeartDisease\"].value_counts()","ec740c8a":"def apprx_maxHR(age):\n    return (220 - age)\n\nmaxHR_apprx = df[\"Age\"].apply(apprx_maxHR)\n\ndf[\"MaxHR_limit\"] = maxHR_apprx - df[\"MaxHR\"]","3e14a7ab":"plot_violin(df[\"HeartDisease\"], df[\"MaxHR_limit\"])","199181ac":"df[df[\"MaxHR_limit\"] > 0][\"HeartDisease\"].value_counts()","4719e093":"df[df[\"MaxHR_limit\"] < 0][\"HeartDisease\"].value_counts()","77305c35":"plot_violin(df[\"HeartDisease\"], df[\"Oldpeak\"])","58a696f1":"df[(df[\"Oldpeak\"] < 0.5) & (df[\"Oldpeak\"] > -0.5)][\"HeartDisease\"].value_counts()","f9b1d9ff":"df[(df[\"Oldpeak\"] > 0.5) | (df[\"Oldpeak\"] < -0.5)][\"HeartDisease\"].value_counts()","cde61104":"def fill_wedge(value):\n    format_value = round(value, 2)\n    return str(format_value) + \"%\"\n\n\ndef plot_pie(data, labels):\n    fig = plt.figure(figsize=(10, 7))\n    plt.pie(x=data, labels=labels, autopct=fill_wedge)\n    plt.show()\n    return","b9da66dd":"df[\"Sex\"].value_counts()","00508343":"data = [df[df[\"Sex\"] == \"M\"].shape[0], df[df[\"Sex\"] == \"F\"].shape[0]]\nlabels = [\"Male\", \"Female\"]\nplot_pie(data, labels)","3c293512":"df[\"ChestPainType\"].value_counts()","16865e4c":"# Pie plot of patients with heart disease.\ncpt1 = df[df[\"HeartDisease\"] == 1][\"ChestPainType\"]\nasy1 = cpt1[cpt1 == \"ASY\"].shape[0]\nnap1 = cpt1[cpt1 == \"NAP\"].shape[0]\nata1 = cpt1[cpt1 == \"ATA\"].shape[0]\nta1 = cpt1[cpt1 == \"TA\"].shape[0]\n\ndata_cpt1 = [asy1, nap1, ata1, ta1]\nlabels_cpt = [\"ASY\", \"NAP\", \"ATA\", \"TA\"]\n\nplot_pie(data_cpt1, labels_cpt)","5f4a4a3c":"# Pie plot of patients without heart disease.\ncpt0 = df[df[\"HeartDisease\"] == 0][\"ChestPainType\"]\nasy0 = cpt0[cpt0 == \"ASY\"].shape[0]\nnap0 = cpt0[cpt0 == \"NAP\"].shape[0]\nata0 = cpt0[cpt0 == \"ATA\"].shape[0]\nta0 = cpt0[cpt0 == \"TA\"].shape[0]\n\ndata_cpt0 = [asy0, nap0, ata0, ta0]\nplot_pie(data_cpt0, labels_cpt)","44b89339":"df[\"FastingBS\"].value_counts()","dce7c2cb":"# pie plot of patients having heart disease\nfastbs1 = df[df[\"HeartDisease\"] == 1][\"FastingBS\"]\nfastbs_one1 = fastbs1[fastbs1 == 1].shape[0]\nfastbs_zero1 = fastbs1[fastbs1 == 0].shape[0]\n\ndata_fastbs1 = [fastbs_one1, fastbs_zero1]\nlabels_fastbs = [\"One\", \"Zero\"]\n\nplot_pie(data_fastbs1, labels_fastbs)","942364c5":"# pie plot of patients not having heart disease\nfastbs0 = df[df[\"HeartDisease\"] == 0][\"FastingBS\"]\nfastbs_one0 = fastbs0[fastbs0 == 1].shape[0]\nfastbs_zero0 = fastbs0[fastbs0 == 0].shape[0]\n\ndata_fastbs0 = [fastbs_one0, fastbs_zero0]\n\nplot_pie(data_fastbs0, labels_fastbs)","f65e59a2":"df[\"RestingECG\"].value_counts()","232464e5":"# pie plot of patients having heart disease\nrestecg1 = df[df[\"HeartDisease\"] == 1][\"RestingECG\"]\nnorm1 = restecg1[restecg1 == \"Normal\"].shape[0]\nlvh1 = restecg1[restecg1 == \"LVH\"].shape[0]\nst1 = restecg1[restecg1 == \"ST\"].shape[0]\n\ndata_restecg1 = [norm1, lvh1, st1]\nlabel_restecg = [\"Normal\", \"LVH\", \"ST\"]\n\nplot_pie(data_restecg1, label_restecg)","de26171d":"# pie plot of patients not having heart disease\nrestecg0 = df[df[\"HeartDisease\"] == 0][\"RestingECG\"]\nnorm0 = restecg0[restecg0 == \"Normal\"].shape[0]\nlvh0 = restecg0[restecg0 == \"LVH\"].shape[0]\nst0 = restecg0[restecg0 == \"ST\"].shape[0]\n\ndata_restecg0 = [norm0, lvh0, st0]\n\nplot_pie(data_restecg0, label_restecg)","d10655ee":"df[\"ExerciseAngina\"].value_counts()","b0792fce":"# pie plot of patients  having heart disease\nexeang1 = df[df[\"HeartDisease\"] == 1][\"ExerciseAngina\"]\nexeangY1 = exeang1[exeang1 == \"Y\"].shape[0]\nexeangN1 = exeang1[exeang1 == \"N\"].shape[0]\n\ndata_exeang1 = [exeangY1, exeangN1]\nlabels_exeang = [\"Yes\", \"No\"]\n\nplot_pie(data_exeang1, labels_exeang)","b77e9faf":"# pie plot of patients not having heart disease\nexeang0 = df[df[\"HeartDisease\"] == 0][\"ExerciseAngina\"]\nexeangY0 = exeang0[exeang0 == \"Y\"].shape[0]\nexeangN0 = exeang0[exeang0 == \"N\"].shape[0]\n\ndata_exeang0 = [exeangY0, exeangN0]\n\nplot_pie(data_exeang0, labels_exeang)","f40bdbd1":"df[\"ST_Slope\"].value_counts()","50aad38c":"# pie plot of patients having heart disease\nstslope1 = df[df[\"HeartDisease\"] == 1][\"ST_Slope\"]\nflat1 = stslope1[stslope1 == \"Flat\"].shape[0]\nup1 = stslope1[stslope1 == \"Up\"].shape[0]\ndown1 = stslope1[stslope1 == \"Down\"].shape[0]\n\ndata_stslope1 = [flat1, up1, down1]\nlabels_stslope = [\"Flat\", \"Up\", \"Down\"]\n\nplot_pie(data_stslope1, labels_stslope)","818bd0a8":"# pie plot of patients not having heart disease\nstslope0 = df[df[\"HeartDisease\"] == 0][\"ST_Slope\"]\nflat0 = stslope0[stslope0 == \"Flat\"].shape[0]\nup0 = stslope0[stslope0 == \"Up\"].shape[0]\ndown0 = stslope0[stslope0 == \"Down\"].shape[0]\n\ndata_stslope0 = [flat0, up0, down0]\n\nplot_pie(data_stslope0, labels_stslope)","a45fe4d3":"# Removing redundant features\nredundant_features = [\"Cholesterol\", \"MaxHR\", \"MaxHR_limit\", \"FastingBS\", \"RestingECG\"]\n\ndf.drop(redundant_features, axis=1, inplace=True)","efe71b79":"df.head()","3c57e171":"df_y = df.iloc[:, 7]\ndf_X = df.iloc[:, [0, 1, 2, 3, 4, 5, 6]]","cbe2ca07":"df_y.value_counts()","4d591610":"rus = RandomUnderSampler(sampling_strategy={1: 410})\ndf_X, df_y = rus.fit_resample(df_X, df_y)","d86a8e17":"df_y.value_counts()","ccbfc6ad":"fig = plt.figure(figsize=(16, 6))\n\nplot1 = plt.subplot2grid((1, 3), (0, 0))\nplot2 = plt.subplot2grid((1, 3), (0, 1))\nplot3 = plt.subplot2grid((1, 3), (0, 2))\n\nplot1.scatter(df_X[\"Age\"], df_y)\nplot1.set_title(\"Age vs Heart Disease(Y\/N)\")\n\nplot2.scatter(df_X[\"RestingBP\"], df_y)\nplot2.set_title(\"RestingBP vs Heart Disease(Y\/N)\")\n\nplot3.scatter(df_X[\"Oldpeak\"], df_y)\nplot3.set_title(\"Oldpeak vs Heart Disease(Y\/N)\")","70475538":"df_X[df_X[\"RestingBP\"] < 10]","6f41b7be":"# Removing the outlier\ndf_X.drop([791], axis=0, inplace=True)\ndf_y.drop([791], axis=0, inplace=True)","6d0a672c":"# Encoding categorical variable using target encoding\ntar_enc = TargetEncoder()\ndf_X = tar_enc.fit_transform(df_X, df_y)","3a66f743":"df_X.head()","cca2b1ea":"X_train, X_test, y_train, y_test = train_test_split(df_X, df_y, train_size=0.7, test_size=0.3)","2d171d00":"lambda_values = list(range(1, 100))\n\nlogloss_cv = []\nlogloss_train = []\n\nkf = KFold(n_splits=5)\n\nfor lam in lambda_values:\n    total_logloss_tr = []\n    total_logloss_cv = []\n    for train_index, cv_index in kf.split(X_train):\n        trset_X, cvset_X = X_train.iloc[train_index, :], X_train.iloc[cv_index, :]\n        trset_y, cvset_y = y_train.iloc[train_index], y_train.iloc[cv_index]\n        \n        model = LogisticRegression(C= (1\/lam), penalty=\"l2\", solver=\"liblinear\")\n        model.fit(trset_X, trset_y)\n        \n        trpred_y = model.predict(trset_X)\n        cvpred_y = model.predict(cvset_X)\n        \n        logloss_trset = metrics.log_loss(trset_y, trpred_y)\n        logloss_cvset = metrics.log_loss(cvset_y, cvpred_y)\n        \n        total_logloss_tr.append(logloss_trset)\n        total_logloss_cv.append(logloss_cvset)\n        \n    avg_logloss_tr = sum(total_logloss_tr) \/ (len(total_logloss_tr))    \n    avg_logloss_cv = sum(total_logloss_cv) \/ (len(total_logloss_cv))    \n    \n    logloss_train.append(avg_logloss_tr)\n    logloss_cv.append(avg_logloss_cv)","9c4df81e":"optimal_lam = logloss_cv.index(min(logloss_cv)) + 1\nprint(\"Optimal Value of hyperparameter Lambda(1\/C) is: \" + str(optimal_lam))","2bb4ddfb":"fig = plt.figure(figsize=(10, 7))\nplt.plot(lambda_values, logloss_cv, label=\"CV-set\")\nplt.plot(lambda_values, logloss_train, label= \"Train-set\")\nplt.xlabel(\"Hyperparameter Lambda\")\nplt.ylabel(\"Log-Loss\")\nplt.legend()\nplt.show()","4ef192b9":"model = LogisticRegression(C=optimal_lam, solver=\"liblinear\")\nmodel.fit(X_train, y_train)\n\ny_trpred = model.predict(X_train)","de8cb3db":"cf_matrix = metrics.confusion_matrix(y_train, y_trpred)\nfig = plt.figure(figsize = (10, 7))\nax = sns.heatmap(cf_matrix, annot = True)\nax.set_title('Confusion Matrix on Train Set');\nax.set_xlabel('Predicted Values')\nax.set_ylabel('Actual Values ');\nax.xaxis.set_ticklabels(['False','True'])\nax.yaxis.set_ticklabels(['False','True'])\nplt.show()","3f7aa869":"y_testpred = model.predict(X_test)\n\ncf_matrix = metrics.confusion_matrix(y_test, y_testpred)\nfig = plt.figure(figsize = (10, 7))\nax = sns.heatmap(cf_matrix, annot = True)\nax.set_title('Confusion Matrix on Test Set');\nax.set_xlabel('Predicted Values')\nax.set_ylabel('Actual Values ');\nax.xaxis.set_ticklabels(['False','True'])\nax.yaxis.set_ticklabels(['False','True'])\nplt.show()","4e04eb10":"print(metrics.classification_report(y_test, y_testpred))","0e54f513":"## Numerical Features","8178d3d2":"* From the plot it can be concluded, that the patient having neat zero OldPeak will have less chance of a heart disease.\n* And the patient having OldPeak not near zero will have more chance of a heart disease.\n* The probability that the patient will have heart disease given that his\/her Oldpeak value is in the range (0.5, -0.5) is 33%.\n* The probability that the patient will have heart disease given that his\/her Oldpeak value is not in range (0.5, -0.5) is 76%.","17da170e":"**RestingECG**","71c5a2dc":"**Cholesterol**","d16bb757":"**FastingBS**","f1a98c7d":"**Age**","e9721b1c":"* The features are not related to each other. No Multicollinearity!","bd01cf0f":"* From the violin plot, it can be concluded that the patient with age less than 50 is more likely to not have heart disease.\n* And patient with age more than 50 is likely to have heart disease.\n* The probability that the patient will have heart disease given that he\/she is younger than 50 years is 39%\n* The probability that the patient will have heart disease given that he\/she is older than 50 years is 63%","8ea7f80c":"**Sex**","8d504fbc":"# Handling Outliers","af17ba55":"* ExerciseAngina tells the induced angina during exercise\/physical exertion.\n* If ExerciseAngina is 'Yes', then the patient is likey to have heart disease.\n* If ExerciseAngina is 'No', then the patient is not likely to have heart disease.\n* The probability that the ExerciseAngina is Yes given that patient has heart disease is 62%.\n* The probability that the ExerciseAngina is No given that patient don't have heart disease is 86.5%.","dd88506a":"* ST_Slope tells the slope of the peak exercise ST segment.\n* Up: upsloping, Flat: flat, Down: downsloping.\n* Patient having Flat ST_Slope is more likely to have heart disease.\n* Patients having Up ST_Slope is more likely to not have heart disease.","35a11038":"**RestingBP**","bf8cd14c":"**ST_Slope**","cb8bca3e":"* There are no missing values in the dataset!","b8576665":"## Categorical Features","26c5a08b":"* In Age feature, there is not any outlier.\n* In RestingBP feature, there is an obeservation having near zero RestingBP, which is not possible, Hence an outlier.\n* In OldPeak feature, There is not any outlier.","e01079b5":"* FatingBS tells the fasting blood sugar, (1: if FastingBS > 120 mg\/dl, 0: otherwise)\n* This feature will not be used, because of severe imbalance of classes.\n* In both cases (with heart disease and without heart disease), '0' dominates.","08372139":"**Oldpeak**","d3ba178b":"* The majority class is 'Not Heart Disease'. \n* I will use undersampling technique to resolve this issue.\n* I will reduce obeservations in majority class to 410.","dbe5f346":"* Cholesterol is found is cells of human body. It helps produce VitaminD and Hormones.\n* Excess amount of Cholesterol can cause Heart Disease.\n* The normal range of cholesterol is below 200 mg\/dL.\n* The cholesterol range between 200 - 239 mg\/dl is considered borderline high.\n* Cholesterol level above 240 mg\/dl is considered high.\n* The patient will have heart disease given that the patient has cholestrol above 220 mg\/dl is 51%.\n* There are patients in the dataset, who despite having low cholesterol have heart disease. It can be because there are other features also which affect the patients heart condition.\n* This feature will not be used, Because of the last two points.","602d1a2f":"* ChestPainType tells the type of chest pain, it has  4 types given in the dataset.\n* TA(Typical Angina), ATA(Atypical Angina), NAP(Non-Anginal Pain), ASY(Asymptomatic) in increasing order of serverity.\n* The probability that the patient's chest pain type is ASY given that patient have heart disease is 77%.\n* The probability that the patient's chest pain type is NAP, ATA given that patient do not have heart disease is 32%, 36% respectively.","26473645":"# Handling Class Imbalance","dd789095":"* RestingBP is the blood pressure of a patient when at rest.\n* From the plot, it can be concluded that this BP is of type Systolic Blood Pressure.\n* The Normal range is between 120 - 130 mm Hg.\n* The patient have high chance of having heart disease when the RestingBP increases above 140 mm Hg.\n* In the dataset, the probability of a person will have heart disease given that his\/her RestingBP is above 140 mm Hg is 68%.","a65b61d3":"**ExerciseAngina**","233a8a67":"* Sex tells the gender of the patient.\n* This feature will not be used, because there is a severe imbalance of classes.\n* There are 725 patients of sex male, and 193 patients of sex female.","2284c00a":"# Heart Disease Classification","5d0626a0":"# Encoding Categorical Variables","0682f30f":"# Data Storytelling","a446367e":"* RestingECG tells resting electrocardiogram of the patient.\n* Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria.\n* This feature will not be used, because patients with normal RestingECG dominates both the pie plots of patients having heart disease and patients not having heart disease.\n* And percentage of LVH and ST barely vary in both the plots.","7d8107cd":"**ChestPainType**","1f828960":"* MaxHR (Maximum Heart Rate) is the heart rate achieved during exercise.\n* The Approx Maximum Heart Rate can be calculated by the expression = 220 - age_of_patient.\n* It is recommended to keep the heart rate below the Approx Maximum Heart Rate to avoid heart problems.\n* In the above cells, I created a new feature 'MaxHR_limit', which is difference between Approx MaxHR and Obeserved MaxHR\n* If the output is below zero, then it means the patient's Obeserved MaxHR is greater than Approx MaxHR, This can cause heart problems.\n* If the output is greater than zero, then it means the patient's Obeserved MaxHR is less than Approx MaxHR.\n* In the dataset, there are very few patients with less than zero 'MaxHR_limit' value.\n* The observations having 'MaxHR_limit' greater than zero have patients with Heart Disease and No Heart Disease.\n* This feature will not be used, because of the last two points","682f14c7":"**MaxHR**","b80d254b":"# Modeling"}}