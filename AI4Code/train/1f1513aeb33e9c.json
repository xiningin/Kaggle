{"cell_type":{"bc788316":"code","58e0473e":"code","0978eb0f":"code","9b5b2215":"code","7b9ac415":"code","4908c01d":"code","ad02cf56":"code","9996b54e":"code","d78e65eb":"code","c2e4c05a":"code","e65c03af":"code","3b44da18":"code","4aeaeacb":"code","4c7e8beb":"code","cce8ed91":"code","34ed39f0":"code","0ef14673":"code","1bff9e26":"code","a7dff9b8":"code","bbcb9d0c":"code","3dbbc89c":"code","07985a3e":"code","f7e209f6":"code","b10f7826":"code","9958ab73":"code","6f701153":"code","106a6820":"code","f1bad789":"code","fb5921c1":"code","3b75cf11":"code","62e301f7":"code","e10bb086":"code","4b47578b":"markdown","a8ed02b3":"markdown","a0b1e6ff":"markdown","9783c017":"markdown","1293ae9f":"markdown","70111aca":"markdown","058954e2":"markdown","07ad5ae1":"markdown","f72a06de":"markdown","cbbccf3a":"markdown","9a1c1121":"markdown","bc5d9661":"markdown","047b7bc7":"markdown","5a29b654":"markdown","4d33d677":"markdown","c2d4ea43":"markdown","e9cd13d0":"markdown"},"source":{"bc788316":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58e0473e":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","0978eb0f":"t0total = time.time()","9b5b2215":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","7b9ac415":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","4908c01d":"m.shape\nm = m.transpose()\nm.shape","ad02cf56":"pData.head(2)","9996b54e":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","d78e65eb":"df.describe()","c2e4c05a":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","e65c03af":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","3b44da18":"m2 = m.copy()\nm2.data = np.log(1+m2.data)\nm2 = m2.multiply( 1\/m2.sum(axis=1))\nm2 = m2.tocsr()\n\nprint(m2[:3,:3].toarray())\nprint(m2.sum(axis=1)[:10])","4aeaeacb":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=2, n_iter=7, random_state=42)\nr = svd.fit_transform(m2)\nprint(time.time() - t0, 'seconds passed')\n\nplt.figure(figsize = (20,6))\nsns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\nplt.title('count_made_zeros')#  +str( count_made_zeros ) )\nplt.show()\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","4c7e8beb":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\n\nt0 = time.time()\nsvd = TruncatedSVD( n_components=2, n_iter=7, random_state=42)\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\nfor count_made_zeros in [10,100]: # [0,3,5,8,10, 20,30,40,50,60,70,80,90,100]: # range(10,100,10):\n    m3 = m2.copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    \n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros' +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')   ","cce8ed91":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [0,10, 50]: # range(10,100,10):\n\n    m3 = m2.copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros' +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","34ed39f0":"!pip install ncvis\nimport ncvis\n\nvis = ncvis.NCVis()\n#Y = vis.fit_transform(X)","0ef14673":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10]:#  [0,10, 50]: # range(10,100,10):\n\n    m3 = m2.copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros' +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","1bff9e26":"!pip install trimap \nimport trimap","a7dff9b8":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\n#reducer = ncvis.NCVis()\nreducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    #m3 = m2.copy()\n    #if count_made_zeros != 0:\n    #    m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros')#  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","bbcb9d0c":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n    m3 = m2.copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","3dbbc89c":"df.columns","07985a3e":"t0 = time.time()\nfor color_by in ['drug','dose','dose 0 or No', \n                  'n.umi', 'Size_Factor',  'count genes expressed', 'ratio mt2non_mt']:\n    plt.figure(figsize = (20,6))\n    \n    if color_by == 'dose 0 or No':\n        vec4color = df['dose'] == 0\n    else:\n        vec4color = df[color_by]\n        \n    sns.scatterplot(x=r[:,0],y=r[:,1], hue = vec4color ) #  ,  style=df['dose'])\n    plt.title(color_by)# 'count_made_zeros' +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","f7e209f6":"plt.figure(figsize = (20,6))\n        \nv = df['dose']\nv = v.apply( lambda x: x if x != 'NAN' else np.nan )\n\nfor dose in [0.0, 1, 10, 100]: # 0.1, 0.5, 1, 5, 10, 50.0, 100.0]:\n    if dose == 0:\n        m = v == 0\n        color = 'green'\n        label = 'dose'+str(0)\n    elif (dose > 0 ) and (dose  <= 1):\n        m = ( v > 0 ) & (  v <= 1  )\n        color = 'blue'\n        label = 'dose in ] 0, 1] '\n    elif (dose > 1 ) and (dose  <= 10):\n        m = ( v > 1 ) & (  v <= 10  )\n        color = 'orange'\n        label = 'dose in ] 1, 10] '\n    elif (dose > 10 ) and (dose  <= 100000):\n        m = ( v > 10 ) & (  v <= 100  )\n        color = 'red'\n        label = 'dose 50 and 100'\n    else:\n        continue\n    \n    m = m.values\n    plt.scatter(x=r[:,0][m],y=r[:,1][m],  c = color, label = label, alpha=0.4 ) #  ,  style=df['dose'])\n    \nplt.title('Different doses') # color_by)# 'count_made_zeros' +str( count_made_zeros ) )\nplt.grid()\nplt.legend()\nplt.show()\n    ","b10f7826":"        \nv = df['dose']\nv = v.apply( lambda x: x if x != 'NAN' else np.nan )\n\nfor dose in [0.0, 1, 10, 100]: # 0.1, 0.5, 1, 5, 10, 50.0, 100.0]:\n    if dose == 0:\n        m = v == 0\n        color = 'green'\n        label = 'dose'+str(0)\n    elif (dose > 0 ) and (dose  <= 1):\n        m = ( v > 0 ) & (  v <= 1  )\n        color = 'blue'\n        label = 'dose in ] 0, 1] '\n    elif (dose > 1 ) and (dose  <= 10):\n        m = ( v > 1 ) & (  v <= 10  )\n        color = 'orange'\n        label = 'dose in ] 1, 10] '\n    elif (dose > 10 ) and (dose  <= 100000):\n        m = ( v > 10 ) & (  v <= 100  )\n        color = 'red'\n        label = 'dose 50 and 100'\n    else:\n        continue\n    \n    m = m.values\n    plt.figure(figsize = (20,6))\n    plt.scatter(x=r[:,0][m],y=r[:,1][m],  c = color, label = label, alpha=0.4 ) #  ,  style=df['dose'])\n    \n    plt.title(label) # color_by)# 'count_made_zeros' +str( count_made_zeros ) )\n    plt.grid()\n    plt.legend()\n    plt.show()\n    ","9958ab73":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\n#reducer = umap.UMAP()\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [0,10,100]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    #r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros'  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","6f701153":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [0,10,100]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros'  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","106a6820":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [0,10,100]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        m3[:,IX[-count_made_zeros:]] = 0\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros'  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","f1bad789":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [1000,10000, 20000,30000,40000]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    plt.figure(figsize = (20,12))\n    sns.scatterplot(x=r[:,0],y=r[:,1], hue=df['drug'] ,  style=df['dose'])\n    plt.title('count_made_zeros'  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    ","fb5921c1":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10, 100, 1000, 10000]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n\n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by)\n    plt.title('NCVis. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r\n                    [:,1],   hue= color_by)\n    plt.title('NCVis. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t0, 'seconds passed total ')    \n\n","3b75cf11":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10, 100, 1000, 10000]: # range(10,100,10):\n\n    m3 = m2 != 0 # .copy()\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title('NCVis. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title('NCVis. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n","62e301f7":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nreducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt0 = time.time()\nfor count_made_zeros in [10, 100, 1000, 10000]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    r = svd.fit_transform(m3)\n    r = reducer.fit_transform(r)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title('NCVis.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title('NCVis. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n","e10bb086":"print(time.time() - t0total , 'total seconds passed ' )","4b47578b":"# Analysising different doses \n\nConclusion - doses are quite mixed with each other \n","a8ed02b3":"# Trimap - yet another anlogue of tsne\/umap - similar results","a0b1e6ff":"# UMAP plots with droping out top expressed genes - even better ","9783c017":"# Simple PCA plot - can see nothing","1293ae9f":"# PCA plots with droping out top expressed genes - better, drop out 10 top genes seems to be the best\n\nConclusion - drop 10 top expressed seems to give good results - that means different drugs begin to be more or less  slighly separeated as clusters  \n","70111aca":"# Better visualization for dose dependency \n\n\nsince ncvis is random based images will be different each launch ","058954e2":"# Create columns with information on each cell (drug, dose, etc)","07ad5ae1":"# Visualizations for binarized (zero\/non-zero) expression matrix ","f72a06de":"# NCVis - similar to UMAP, bust faster (from Skolkovo team)","cbbccf3a":"## NCVIS","9a1c1121":"## NCvis with large(even extreme) number of dropped highly expressed genes ","bc5d9661":"# What is about \n\nHere we analyse sciPlex2 subdataset making basic visualizations.\n\nComparing to 2a we change order of normalization and taking log.\nFirst take log and then normlize to sum 1  by each row (sum over cells). \nThat seems to be more natural, otherwise log(1+x)=x for small x, and log did not have any effect. \n\n\nConclusions:\n\n0) Such order of log and norm is better - as we can see on PCA - just simple pca allows to \nbetter separate bad douplet cluster as well as other drugs are better separated. \n\n\n\nThe other conclusions seems to be the same as from previous notebook:\n\n\n1) it is better to drop out about 10 top expressed genes - and then used UMAP or similar (NCVis, trimap).\nThen the clusters by different drugs are better separated. \n\n2)\nJust doing direct PCA shows messy picture, dropping out top expressed genes - improves, but any way UMAP (NCVis, trimap)\ngives better picture. First dropping out top expressed genes and then using UMAP etc gives better results.\n\n3)\nGuess - the cluster with mixed colors is probably - duplets - technological mistake - where two cells were not splitted , but appeared to be processed as one cell.\n\n4)\nDose dependce is better seen on for SAHA (HDAC), it is quite low seen for DEX and somehow seen for BMS and nutulin. \n\n5)\nMaking visualization on binarized expression (just 0 or 1 , where 1 even expression is grearer 0)\nproduces quite non bad results (somewhat unexpectedly).\n\n6) \nEven droping out 1000 top expressed genes and then applying umap etc gives not bad picture,\nfor 10000 and especially 20000 and more picture quite corrupts. \n\n\n\n------------------\n\nDataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n-----------\n\n","047b7bc7":"# Color by different features","5a29b654":"# Load count matrix and convert it to sparse matrix csr_matrix","4d33d677":"# Load information files: genes annotations, cells info etc...","c2d4ea43":"# Normalization and log - second way - first log, than normalize by row ","e9cd13d0":"## UMAP"}}