{"cell_type":{"2fd96f66":"code","7fd8b3d6":"code","64c6b051":"code","ad2336ac":"code","9659dbec":"code","4910eaec":"code","a91ea380":"code","81d947a5":"code","8b1dd407":"code","2eec7fd7":"code","03f6a226":"code","b627d6e0":"code","80b0beb1":"code","b8027a5f":"code","46135fca":"code","f8643eb5":"code","344f5233":"code","b5ff46c0":"code","d05429d5":"code","5be01b10":"code","877ada35":"code","2433f3fa":"code","628cd669":"code","1042efd1":"code","0ec4dc28":"code","0cdbba3d":"code","c51e7b4f":"code","3f017cb7":"code","c76ba128":"code","be42ec91":"code","967de810":"code","20c9dcee":"code","a4de9df7":"code","82636aca":"code","8229a34c":"code","d701d434":"code","a9b1088c":"code","3f220185":"code","d57fa376":"code","d99da67e":"code","0739c4f9":"code","046faf7c":"code","3eabd172":"code","5e79eaa6":"code","ed807201":"code","0c082cde":"code","5b85d10b":"code","9b27b183":"code","1cf55335":"code","0a5086f0":"code","794075ca":"code","75cd7b8b":"code","a580bc64":"code","78c873a3":"code","e5296ab6":"code","4d7934f5":"code","7fdf0453":"code","65518fe5":"code","bed43671":"code","761d0b96":"code","f4ae9863":"code","ba1b1f9f":"code","8ee65048":"code","4bcac05b":"code","fc78843f":"code","a21c5667":"code","4ec9ce42":"code","9a234f28":"code","8c3cd1f8":"code","f14162a1":"code","c695b8b9":"code","56db70d8":"code","f7bcfd86":"code","332c9999":"code","2e35be17":"code","fe6320b6":"code","ca61856e":"code","a771c3df":"code","57017d9f":"code","fc641cb7":"code","55c44c56":"code","f1dc0567":"code","e9cc1e36":"code","df98cdbe":"code","09621aeb":"code","288fc0d7":"code","00ca0e6a":"code","5e8344b8":"code","4df75361":"code","31a2ae0a":"code","366de846":"code","f51a04f4":"markdown","4283c96b":"markdown","e6930c4c":"markdown","7f843192":"markdown","67861516":"markdown","f7da2a68":"markdown","5773d1a1":"markdown","3c9dab85":"markdown","cfdebff3":"markdown","74ffa0b6":"markdown","3088a056":"markdown","a5c9739f":"markdown","a966163e":"markdown","a2c8f592":"markdown","842e9cb2":"markdown","21c062a2":"markdown","dd057e1e":"markdown","8aaf3abd":"markdown","70413b0d":"markdown","20b09035":"markdown","914bfe8a":"markdown","516eeb50":"markdown","10407fe0":"markdown","6e7a5c13":"markdown","1270397d":"markdown","ab3888d6":"markdown","258c5387":"markdown","83cdbd9e":"markdown","e22e6c81":"markdown","2dbcdb32":"markdown","1efac7dd":"markdown","5594d4a2":"markdown","4b4e005f":"markdown","c32bf015":"markdown","68744ac5":"markdown","70cdfdaf":"markdown","1e5259d1":"markdown","7108d45c":"markdown","5e3560a8":"markdown","86e2a76c":"markdown","975ce47e":"markdown","7880b03f":"markdown","eb42a3d7":"markdown","752fb155":"markdown","719475bc":"markdown","fe70372a":"markdown","fa51210d":"markdown","4a576a48":"markdown","920a9274":"markdown","57d77fad":"markdown","7f32bc9a":"markdown","ed8ed236":"markdown","dc96eb1c":"markdown","070fecb2":"markdown","23726687":"markdown","f1cc30c0":"markdown","6298f5f8":"markdown","df44bcf9":"markdown","75f6f1f8":"markdown","21a8e461":"markdown","ce01ac18":"markdown","732ecfb9":"markdown","bb9bc373":"markdown","8c8028bc":"markdown","1aa7743f":"markdown","4930b1fb":"markdown","8dfc59ea":"markdown","56d9f69a":"markdown","3dd3da9e":"markdown","708ad986":"markdown","d0014055":"markdown","1b79bd57":"markdown","4d38c8af":"markdown","1bc5a801":"markdown","df185fec":"markdown","9f9ef9b1":"markdown","cf06f75e":"markdown","5a640ac8":"markdown"},"source":{"2fd96f66":"from torch import nn\nimport torch","7fd8b3d6":"import numpy as np\nfrom keras.datasets import cifar10\nfrom sklearn.model_selection import train_test_split\n(X_train, y_train), (X_test, y_test) = cifar10.load_data()\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=10**4, random_state=42)\n\nclass_names = np.array(['airplane','automobile ','bird ','cat ','deer ','dog ','frog ','horse ','ship ','truck'])\n\nprint(X_train.shape, y_train.shape)","64c6b051":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=[12,10])\nfor i in range(12):\n    plt.subplot(3, 4, i + 1)\n    plt.xlabel(class_names[y_train[i, 0]])\n    plt.imshow(X_train[i])","ad2336ac":"X_train = (X_train \/ 255).astype('float32')\nX_val =  (X_val \/ 255).astype('float32')\nX_test = (X_test \/ 255).astype('float32')","9659dbec":"assert np.shape(X_train) == (40000, 32, 32, 3), \"data shape should not change\"\nassert 0.9 <= max(map(np.max, (X_train, X_val, X_test))) <= 1.05\nassert 0.0 <= min(map(np.min, (X_train, X_val, X_test))) <= 0.1\nassert len(np.unique(X_test \/ 255.)) > 10, \"make sure you casted data to float type\"","4910eaec":"simple_dense_model = nn.Sequential(\n    nn.Flatten(),\n    nn.Linear(32*32*3, 2048),\n    nn.ReLU(),\n    nn.Linear(2048, 1024),\n    nn.ReLU(), \n    nn.Linear(1024, 10), \n    nn.Softmax(dim=1)\n    )","a91ea380":"dummy_pred = simple_dense_model(torch.from_numpy(X_train[:20])).detach().numpy()\nassert dummy_pred.shape == (20, 10)\nassert np.allclose(dummy_pred.sum(-1), 1)\n\nprint(\"\u0423\u0441\u043f\u0435\u0445!\")","81d947a5":"import torchvision\nfrom torchvision.transforms import ToTensor\n\n\ndataset = torchvision.datasets.CIFAR10('cifar10\/train\/', download=True, transform=ToTensor(), train=True)\ntest_data = torchvision.datasets.CIFAR10('cifar10\/test', download=True, transform=ToTensor(), train=False)\n\ntrain_data, val_data = train_test_split(dataset, test_size=5000, random_state=42)\n\ntrain_loader = torch.utils.data.DataLoader(train_data,\n                                          batch_size=64,\n                                          shuffle=True,\n                                          num_workers=2)\n\nval_loader = torch.utils.data.DataLoader(val_data,\n                                          batch_size=64,\n                                          shuffle=False,\n                                          num_workers=2)\n\ntest_loader = torch.utils.data.DataLoader(test_data,\n                                          batch_size=64,\n                                          shuffle=False,\n                                          num_workers=2)","8b1dd407":"X_test = torch.Tensor(10000, 3, 32, 32)\ny_test = []\nfor i, data in enumerate(test_data):\n    image, label = data\n    X_test[i,:,:,:] = image\n    y_test.append(label)\ny_test = torch.Tensor(y_test)","2eec7fd7":"from pytorch_lightning.core.lightning import LightningModule\nfrom sklearn.metrics import accuracy_score\nfrom pytorch_lightning import Trainer\nfrom pytorch_lightning.loggers import TensorBoardLogger\nfrom torch.optim import SGD, Adam\nfrom torch.utils.data import DataLoader\nfrom copy import deepcopy","03f6a226":"class CifarModel(LightningModule):\n    def __init__(self, model, get_optimizer = None):\n        super().__init__()\n        self.model = model\n        self.loss = nn.CrossEntropyLoss()\n        if get_optimizer:\n            self.optimizer = get_optimizer(self.parameters())\n        else:\n            self.optimizer = SGD(self.parameters(), lr=1e-2, momentum=0.9)\n\n\n    def forward(self, x):\n        return self.model.forward(x)\n      \n    def configure_optimizers(self):\n        return self.optimizer\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self.forward(x)\n        loss = self.loss(logits, y)\n        \n        preds = torch.argmax(logits, dim=1)\n        acc = accuracy_score(y.cpu(), preds.cpu())\n        \n        self.log('train_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        self.log('train_acc', acc, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        return loss\n      \n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self.forward(x)\n        loss = self.loss(logits, y)\n        \n        preds = torch.argmax(logits, dim=1)\n        acc = accuracy_score(y.cpu(), preds.cpu())\n        \n        self.log('val_acc', acc, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        self.log('val_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        return loss\n    \n    def test_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self.forward(x)\n        loss = self.loss(logits, y)\n        preds = torch.argmax(logits, dim=1)\n        acc = accuracy_score(y.cpu(), preds.cpu())\n        \n        self.log('test_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        self.log('test_acc', acc, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        return loss\n    \n    def predict_step(self, batch, batch_idx: int, dataloader_idx: int = None):\n        x,y = batch\n        return self(x).argmax(axis=1)","b627d6e0":"logger = TensorBoardLogger(\"logs\/task1\")\ndense_model = CifarModel(deepcopy(simple_dense_model))\ntrainer = Trainer(logger=logger, gpus=1, max_epochs=25)\ntrainer.fit(dense_model, train_loader, val_loader)","80b0beb1":"y_pred = torch.cat(trainer.predict(dense_model, test_loader, return_predictions=True), dim=0).cpu()\ntest_acc = accuracy_score(y_test, y_pred)\nprint(\"\\n Test_acc =\", test_acc)\nassert test_acc > 0.45, \"Not good enough. Back to the drawing board :)\"\nprint(\" Not bad!\")","b8027a5f":"# From Github Gist: https:\/\/gist.github.com\/hantoine\/4e7c5bc6748861968e61e60bab89e9b0\nfrom urllib.request import urlopen\nfrom io import BytesIO\nfrom zipfile import ZipFile\nfrom subprocess import Popen\nfrom os import chmod\nfrom os.path import isfile\nimport json\nimport time\nimport psutil\n\ndef launch_tensorboard():\n    tb_process, ngrok_process = None, None\n    \n    # Launch TensorBoard\n    if not is_process_running('tensorboard'):\n        tb_command = 'tensorboard --logdir .\/logs\/ --host 0.0.0.0 --port 6006'\n        tb_process = run_cmd_async_unsafe(tb_command)\n    \n    # Install ngrok\n    if not isfile('.\/ngrok'):\n        ngrok_url = 'https:\/\/bin.equinox.io\/c\/4VmDzA7iaHb\/ngrok-stable-linux-amd64.zip'\n        download_and_unzip(ngrok_url)\n        chmod('.\/ngrok', 0o755)\n\n    # Create ngrok tunnel and print its public URL\n    if not is_process_running('ngrok'):\n        ngrok_process = run_cmd_async_unsafe('.\/ngrok http 6006')\n        time.sleep(1) # Waiting for ngrok to start the tunnel\n    ngrok_api_res = urlopen('http:\/\/127.0.0.1:4040\/api\/tunnels', timeout=10)\n    ngrok_api_res = json.load(ngrok_api_res)\n    assert len(ngrok_api_res['tunnels']) > 0, 'ngrok tunnel not found'\n    tb_public_url = ngrok_api_res['tunnels'][0]['public_url']\n    print(f'TensorBoard URL: {tb_public_url}')\n\n    return tb_process, ngrok_process\n\n\ndef download_and_unzip(url, extract_to='.'):\n    http_response = urlopen(url)\n    zipfile = ZipFile(BytesIO(http_response.read()))\n    zipfile.extractall(path=extract_to)\n\n\ndef run_cmd_async_unsafe(cmd):\n    return Popen(cmd, shell=True)\n\n\ndef is_process_running(process_name):\n    running_process_names = (proc.name() for proc in psutil.process_iter())\n    return process_name in running_process_names\n\n\ntb_process, ngrok_process = launch_tensorboard()","46135fca":"# %load_ext tensorboard\n# %tensorboard --logdir logs","f8643eb5":"simple_convolutional_model = nn.Sequential(\n    nn.Conv2d(3, 10, 3),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Flatten(),\n    nn.Linear(2250, 100),\n    nn.ReLU(), \n    nn.Linear(100, 10), \n    nn.Softmax(dim=1)\n    )","344f5233":"logger = TensorBoardLogger(\"logs\/task2\")\nconv_model = CifarModel(deepcopy(simple_convolutional_model))\ntrainer = Trainer(logger=logger, gpus=1, max_epochs=20)\ntrainer.fit(conv_model, train_loader, val_loader)","b5ff46c0":"from sklearn.metrics import accuracy_score\ny_pred = conv_model(X_test).argmax(axis=1).cpu()\ntest_acc = accuracy_score(y_test, y_pred)\nprint(\"\\n Test_acc =\", test_acc)\nassert test_acc > 0.50, \"Not good enough. Back to the drawing board :)\"\nprint(\" Not bad!\")","d05429d5":"def train_model_experiment(model, task_name, train_loader, val_loader, test_loader, early_stopping = None, max_epoch=25):\n    logger = TensorBoardLogger(\"logs\/\" + task_name)\n    if early_stopping:\n        trainer = Trainer(logger=logger, gpus=1, max_epochs=max_epoch, callbacks=[early_stopping])\n    else:\n        trainer = Trainer(logger=logger, gpus=1, max_epochs=max_epoch)\n    trainer.fit(model, train_loader, val_loader)\n    \n    y_pred = torch.cat(trainer.predict(model, test_loader, return_predictions=True), dim=0).cpu()\n    test_acc = accuracy_score(y_test, y_pred)\n    return test_acc","5be01b10":"model_sgd = CifarModel(deepcopy(simple_convolutional_model), lambda model_params: SGD(model_params, lr=2e-3))\nsgd_acc = train_model_experiment(model_sgd, 'task3_sgd', train_loader, val_loader, test_loader)\nsgd_acc","877ada35":"model_momentum = CifarModel(deepcopy(simple_convolutional_model), lambda model_params: SGD(model_params, momentum=0.9, lr=2e-3))\nmomentum_acc = train_model_experiment(model_momentum, 'task3_momentum', train_loader, val_loader, test_loader)\nmomentum_acc","2433f3fa":"model_adam = CifarModel(deepcopy(simple_convolutional_model), lambda model_params: Adam(model_params, lr=2e-3))\nadam_acc = train_model_experiment(model_adam, 'task3_adam', train_loader, val_loader, test_loader)\nadam_acc","628cd669":"batch_norm_in_conv_model = nn.Sequential(\n    nn.Conv2d(3, 10, 3),\n    nn.BatchNorm2d(10),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Flatten(),\n    nn.Linear(2250, 100),\n    nn.ReLU(), \n    nn.Linear(100, 10), \n    nn.Softmax(dim=1)\n    )\nmodel_bn_conv = CifarModel(deepcopy(batch_norm_in_conv_model), lambda model_params: Adam(model_params, lr=2e-3))\nbn_conv_acc = train_model_experiment(model_bn_conv, 'task4_batch_norm_conv', train_loader, val_loader, test_loader)\nbn_conv_acc","1042efd1":"batch_norm_in_dense_model = nn.Sequential(\n    nn.Conv2d(3, 10, 3),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Flatten(),\n    nn.Linear(2250, 100),\n    nn.BatchNorm1d(100),\n    nn.ReLU(), \n    nn.Linear(100, 10), \n    nn.Softmax(dim=1)\n    )\nmodel_bn_dense = CifarModel(deepcopy(batch_norm_in_conv_model), lambda model_params: Adam(model_params, lr=2e-3))\nbn_dense_acc = train_model_experiment(model_bn_dense, 'task4_batch_norm_dense', train_loader, val_loader, test_loader)\nbn_dense_acc","0ec4dc28":"batch_norm_model = nn.Sequential(\n    nn.Conv2d(3, 10, 3),\n    nn.BatchNorm2d(10),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Flatten(),\n    nn.Linear(2250, 100),\n    nn.BatchNorm1d(100),\n    nn.ReLU(), \n    nn.Linear(100, 10), \n    nn.Softmax(dim=1)\n    )","0cdbba3d":"model_bn = CifarModel(deepcopy(batch_norm_model), lambda model_params: Adam(model_params, lr=2e-3))\nbn_acc = train_model_experiment(model_bn, 'task4_batch_norm', train_loader, val_loader, test_loader)\nbn_acc","c51e7b4f":"from pytorch_lightning.callbacks.early_stopping import EarlyStopping\n\nbatch_sizes_list = [4, 8, 16, 32, 64, 128]\nearly_stopping = EarlyStopping('val_acc', stopping_threshold=0.55, mode='max')\nfor batch_size in batch_sizes_list:\n    train_loader_batch_task = torch.utils.data.DataLoader(train_data,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          num_workers=2)\n\n    val_loader_batch_task = torch.utils.data.DataLoader(val_data,\n                                          batch_size=batch_size,\n                                          shuffle=False,\n                                          num_workers=2)\n    model = CifarModel(deepcopy(batch_norm_model), lambda model_params: Adam(model_params, lr=2e-3))\n    acc = train_model_experiment(model, 'task5_batch_size' + str(batch_size), train_loader_batch_task, val_loader_batch_task, test_loader, early_stopping)\n    print('Batch size: ' + str(batch_size))\n    print('Accuracy: ' + str(acc))","3f017cb7":"train_loader = torch.utils.data.DataLoader(train_data,\n                                          batch_size=32,\n                                          shuffle=True,\n                                          num_workers=2)\nval_loader = torch.utils.data.DataLoader(val_data,\n                                          batch_size=32,\n                                          shuffle=False,\n                                          num_workers=2)\nmodel = CifarModel(deepcopy(batch_norm_model), lambda model_params: Adam(model_params, lr=2e-3))\nacc = train_model_experiment(model, 'task6_best_comb', train_loader, val_loader, test_loader, max_epoch=20)\nacc","c76ba128":"big_conv_model = nn.Sequential(\n    nn.Conv2d(3, 128, 3),\n    nn.BatchNorm2d(128),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Dropout(0.2),\n     nn.Conv2d(128, 256, 3),\n    nn.BatchNorm2d(256),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Dropout(0.2),\n    nn.Conv2d(256, 256, 3),\n    nn.BatchNorm2d(256),\n    nn.ReLU(),\n    nn.MaxPool2d(2),\n    nn.Dropout(0.2),\n    nn.Flatten(),\n    nn.Linear(1024, 1024),\n    nn.BatchNorm1d(1024),\n    nn.ReLU(),\n    nn.Linear(1024, 10), \n    nn.Softmax(dim=1)\n    )","be42ec91":"import torchvision\nfrom torchvision import transforms as T \n\naug_transforms = T.Compose([\n    T.RandomHorizontalFlip(p=0.5),\n    T.RandomVerticalFlip(p=0.5),\n    T.ToTensor(),\n])\n\ntest_aug_transforms = T.Compose([\n    T.ToTensor()\n])\n\n\ndataset = torchvision.datasets.CIFAR10('cifar10\/train\/', download=True, transform=T.ToTensor(), train=True)\ntest_data = torchvision.datasets.CIFAR10('cifar10\/test', download=True, transform=T.ToTensor(), train=False)\ntrain_data, val_data = train_test_split(dataset, test_size=1000, random_state=42)\n\ntrain_loader = torch.utils.data.DataLoader(train_data,\n                                          batch_size=64,\n                                          shuffle=True,\n                                          num_workers=2)\nval_loader = torch.utils.data.DataLoader(val_data,\n                                          batch_size=64,\n                                          shuffle=False,\n                                          num_workers=2)\ntest_loader = torch.utils.data.DataLoader(test_data,\n                                          batch_size=64,\n                                          shuffle=False,\n                                          num_workers=2)","967de810":"model = CifarModel(deepcopy(big_conv_model), lambda model_params: Adam(model_params, lr=1e-3))\nacc = train_model_experiment(model, 'task7_custom_model', train_loader, val_loader, test_loader, max_epoch=35)\nacc","20c9dcee":"from sklearn.metrics import accuracy_score\ntrainer = Trainer(gpus=1)\ny_pred = torch.cat(trainer.predict(model, test_loader, return_predictions=True), dim=0).cpu()\nprint(np.array(y_pred))\ntest_acc = accuracy_score(y_test, y_pred)\nprint(\"\\n Test_acc =\", test_acc)\nif test_acc > 0.8:\n    print(\"\u042d\u0442\u043e \u043f\u043e\u0431\u0435\u0434\u0430!\")","a4de9df7":"del model","82636aca":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pickle\n\nclasses = pickle.load(open('..\/input\/ml2task1dataset\/classes.pkl','rb'))\nprint(classes[::100])","8229a34c":"model = torch.hub.load('pytorch\/vision:v0.10.0', 'inception_v3', pretrained=True, aux_logits=False).cuda()","d701d434":"# import tensorflow as tf\n# preprocess_input = tf.keras.applications.inception_v3.preprocess_input","a9b1088c":"import torchvision\nfrom torchvision.transforms import ToTensor, Normalize, Compose\npreprocess_input = Compose([ToTensor(), Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])","3f220185":"from skimage.transform import resize\n\n\ndef predict_top10(img, model, preprocess_input):\n    model.eval()\n    img = resize(img, (299, 299), mode='reflect')\n    assert img.min() >= 0.0 and img.max() <= 1.0\n    plt.imshow(img)\n    plt.show()\n    img_preprocessed = preprocess_input(img * 255)[None]\n    probs = torch.nn.functional.softmax(model(img_preprocessed.float().cuda()).detach().cpu()[0], dim=0)\n    labels = reversed(probs.argsort()[-10:])\n\n    print('top-10 classes:')\n    for l in labels:\n        print('%.4f\\t%s' % (probs.ravel()[l], classes[l].split(',')[0]))","d57fa376":"# predict_top10(plt.imread('albatross.jpg'))","d99da67e":"!wget http:\/\/cdn.com.do\/wp-content\/uploads\/2017\/02\/Donal-Trum-Derogar.jpeg -O img.jpg\npredict_top10(plt.imread('img.jpg'), model, preprocess_input)","0739c4f9":"# \u042d\u0442\u043e\u0442 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0441\u044f \u043d\u0430 \u043a\u0430\u0433\u043b\u0435, \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u043b\u0438\u0441\u044c \u0447\u0435\u0440\u0435\u0437 \u0430\u043f\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432.","046faf7c":"!rm -rf train\n!unzip ..\/input\/dogs-vs-cats\/train.zip -d train;","3eabd172":"import os\nimport pandas as pd\n\nfilenames = os.listdir(\".\/train\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n}) \ndf.head(10)","5e79eaa6":"import sklearn\nfrom sklearn.model_selection import train_test_split\nX_train_filenames, X_test_filenames, y_train, y_test = train_test_split(df['filename'], df['category'], test_size=0.2, random_state=42)","ed807201":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u0438 \u0434\u0440\u043e\u043f\u0430\u0443\u0442 \u043f\u0435\u0440\u0435\u0434 \u043d\u0438\u043c\nmodel.dropout = nn.Identity()\nmodel.fc = nn.Identity()","0c082cde":"import os\nfrom skimage import io\nfrom tqdm import tqdm\nimport gc\n    \ndef get_features(root_dir, X_filenames, preprocess_input, feature_extractor):\n    result = []\n    for filename in tqdm(X_filenames):\n        img_name = os.path.join(root_dir, filename)\n        img = io.imread(img_name)\n        img = resize(img, (299, 299), mode='reflect')\n        assert img.min() >= 0.0 and img.max() <= 1.0\n        img_preprocessed = preprocess_input(img * 255)[None].float()\n        features = feature_extractor(img_preprocessed.cuda()).detach().cpu().numpy()\n        result.append(features)\n        del img_preprocessed, img\n    gc.collect()\n    return np.array(result)\n","5b85d10b":"X_train_features = get_features('.\/train\/train', X_train_filenames, preprocess_input, model)","9b27b183":"X_test_features = get_features('.\/train\/train', X_test_filenames, preprocess_input, model)","1cf55335":"sklearn.__version__","0a5086f0":"import sklearn\nfrom sklearn.ensemble import RandomForestClassifier\n\n\nrdf =  RandomForestClassifier(n_estimators=500)\nrdf.fit(X_train_features.squeeze(), y_train.to_numpy())","794075ca":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test.to_numpy(), rdf.predict_proba(X_test_features.squeeze())[:, 1])","75cd7b8b":"class InceptionV3Model(nn.Module):\n    def __init__(self, feature_extractor):\n        super().__init__()\n        self.feature_extractor = feature_extractor\n        self.head = nn.Sequential(\n          nn.Dropout(p=0.2),\n          nn.Linear(2048, 1024),\n          nn.ReLU(),\n          nn.Linear(1024, 1)\n        )\n\n    def forward(self, x):\n        features = self.feature_extractor(x)\n        return self.head(features)","a580bc64":"from torch.utils.data import Dataset\n\nclass CatVSDogDataset(Dataset):\n    def __init__(self, filenames, labels, root_dir, preprocess_input, train, transform=None):\n        self.root_dir = root_dir\n        self.filenames = filenames\n        self.labels = labels\n        self.transform = transform\n        self.preprocess_input = preprocess_input\n        self.train = train\n    def __len__(self):\n        return len(self.filenames)\n\n    def __getitem__(self, idx):\n        if torch.is_tensor(idx):\n            idx = idx.tolist()\n\n        img_name = os.path.join(self.root_dir,\n                                self.filenames.iloc[idx])\n        image = io.imread(img_name)\n        image = resize(image, (299, 299), mode='reflect')\n        assert image.min() >= 0.0 and image.max() <= 1.0\n        image_preprocessed = preprocess_input(image * 255).float()\n        label = self.labels.iloc[idx]\n\n        if self.transform:\n            image_preprocessed = self.transform(image_preprocessed)\n        if self.train:\n            return (image_preprocessed, label)\n        else: \n            return image_preprocessed","78c873a3":"train_dataset = CatVSDogDataset(X_train_filenames, y_train, '.\/train\/train', preprocess_input, train=True)\ntest_dataset = CatVSDogDataset(X_test_filenames, y_test, '.\/train\/train', preprocess_input, train=False)\n\ntrain_loader = torch.utils.data.DataLoader(train_dataset,\n                                          batch_size=64,\n                                          shuffle=True,\n                                          num_workers=2)\n\ntest_loader = torch.utils.data.DataLoader(test_dataset,\n                                          batch_size=64,\n                                          shuffle=False,\n                                          num_workers=2)","e5296ab6":"class CatVsDogModel(LightningModule):\n    def __init__(self, model):\n        super().__init__()\n        self.model = model\n        self.loss = nn.BCEWithLogitsLoss()\n\n    def forward(self, x):\n        return self.model.forward(x)\n      \n    def configure_optimizers(self):\n        return Adam(filter(lambda p: p.requires_grad, self.model.parameters()), lr=2e-3)\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self.forward(x).squeeze()\n        loss = self.loss(logits, y.float())\n        \n        preds = (logits > 0).float()\n        acc = accuracy_score(y.cpu(), preds.cpu())\n        \n        self.log('train_loss', loss, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        self.log('train_acc', acc, on_step=True, on_epoch=True, prog_bar=True, logger=True)\n        return loss\n      \n    def predict_step(self, batch, batch_idx: int, dataloader_idx: int = None):\n        return (self(batch) > 0).float()","4d7934f5":"feature_extractor = deepcopy(model)\nfor param in feature_extractor.parameters():\n    param.requires_grad = False","7fdf0453":"logger = TensorBoardLogger(\"logs\/part2_freeze\")\nnet = InceptionV3Model(feature_extractor)\ncvd_model = CatVsDogModel(net)\ntrainer = Trainer(logger=logger, gpus=1, max_epochs=2)\ntrainer.fit(cvd_model, train_loader)","65518fe5":"from sklearn.metrics import roc_auc_score\ny_pred = torch.cat(trainer.predict(cvd_model, test_loader, return_predictions=True), dim=0).cpu()\nroc_auc_score(y_test, y_pred)","bed43671":"trainer.save_checkpoint(\"inceptionv3_model.ckpt\")","761d0b96":"feature_extractor = deepcopy(model)\nfor param in list(feature_extractor.parameters())[:-3]:\n    param.requires_grad = False\n\nfor param in list(feature_extractor.parameters())[-3:]:\n    param.requires_grad = True","f4ae9863":"logger = TensorBoardLogger(\"logs\/task2_unfreeze\")\nnet = InceptionV3Model(feature_extractor)\ncvd_model = CatVsDogModel(net)\ntrainer = Trainer(logger=logger, gpus=1, max_epochs=2)\ntrainer.fit(cvd_model, train_loader)","ba1b1f9f":"y_pred = torch.cat(trainer.predict(cvd_model, test_loader, return_predictions=True), dim=0).cpu()\nroc_auc_score(y_test, y_pred)","8ee65048":"import numpy as np\nimport matplotlib.pyplot as plt","4bcac05b":"import os\nstart_token = \" \"\n\n# YOUR CODE\nwith open('..\/input\/names-ml2task1\/names') as file:\n    lines = file.readlines()\n    lines = [' ' + line[:-1] for line in lines]","fc78843f":"assert all(line[0] == start_token for line in lines)\nassert all(line[-1] != '\\n' for line in lines)","a21c5667":"print ('n samples = ',len(lines))\nfor x in lines[::1000]:\n    print(x)","4ec9ce42":"MAX_LENGTH = max(map(len, lines))\nprint(\"max length =\", MAX_LENGTH)\nassert MAX_LENGTH == 16 , \"max length (for names) should be 16. remove assert if you work on different dataset\"","9a234f28":"import string\ntokens = string.ascii_letters + ' ' + '-' + '\\''\n\ntokens = sorted(list(tokens))\n\nn_tokens = len(tokens)\nprint ('n_tokens = ', n_tokens)\n\nassert 50 < n_tokens < 60","8c3cd1f8":"token_to_id = { tokens[idx]:idx for idx in range(len(tokens))}","f14162a1":"assert len(tokens) == len(token_to_id), \"\u0447\u0438\u0441\u043b\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c\"\n\nfor i in range(n_tokens):\n    assert token_to_id[tokens[i]] == i, \"\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u0438\u043d\u0434\u0435\u043a\u0441 \u0431\u0443\u043a\u0432\u044b \u0432 tokens\"\n\nprint(\"\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e...\")","c695b8b9":"def to_matrix(lines, max_len=None, pad=token_to_id[' '], dtype='int32'):\n    \"\"\"Casts a list of names into rnn-digestable matrix\"\"\"\n    max_len = max_len or max(map(len, lines))\n    lines_ix = np.zeros([len(lines), max_len], dtype) + pad\n\n    for i in range(len(lines)):\n        line_ix = list(map(token_to_id.get, lines[i]))\n        lines_ix[i, :len(line_ix)] = line_ix\n\n    return lines_ix","56db70d8":"print('\\n'.join(lines[::2000]))\nprint(to_matrix(lines[::2000]))","f7bcfd86":"import tensorflow.compat.v1 as tf\nimport keras, keras.layers as L # torch.nn as L\ntf.disable_v2_behavior()  \n\nemb_size, rnn_size = 16, 64","332c9999":"embed_x = L.Embedding(n_tokens, emb_size)","2e35be17":"get_h_next = L.Dense(rnn_size, activation=\"tanh\", name=\"layer1_rnn\")","fe6320b6":"get_probs = L.Dense(n_tokens, activation=\"softmax\", name=\"layer2_rnn\")","ca61856e":"def rnn_one_step(x_t, h_t):    \n    # YOUR CODE\n    embedding = embed_x(tf.reshape(x_t, (-1,1)))[:,0,:] \n    h_t_reshaped = tf.reshape(h_t, (-1, rnn_size))\n    hidden_x = tf.concat([embedding, h_t_reshaped], 1)\n    hidden_x_reshaped = tf.reshape(hidden_x, (-1, emb_size + rnn_size))\n    h_next = get_h_next(hidden_x_reshaped)\n    output_probs = get_probs(h_next)\n    return h_next, output_probs","a771c3df":"input_sequence = tf.placeholder('int32', (None, MAX_LENGTH))\nbatch_size = tf.shape(input_sequence)[0]\n\n# \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u0437 \u043d\u0443\u043b\u0435\u0439\nh0 = tf.zeros([batch_size, rnn_size])","57017d9f":"h1, p_y1 = rnn_one_step(input_sequence[:, 0], h0)\n\ndummy_data = np.arange(MAX_LENGTH * 2).reshape([2, -1])\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\ntest_h1, test_p_y1 = sess.run([h1, p_y1],  {input_sequence: dummy_data})\nassert test_h1.shape == (len(dummy_data), rnn_size)\nassert test_p_y1.shape == (len(dummy_data), n_tokens) and np.allclose(test_p_y1.sum(-1), 1)","fc641cb7":"h_prev = h0\npredicted_probs = []\n\nfor t in range(MAX_LENGTH):\n    x_t = input_sequence[:, t]\n    # YOUR CODE\n    h_next, probs_next = rnn_one_step(x_t, h_prev)\n    \n    # END OF YOUR CODE\n    predicted_probs.append(probs_next)\n    h_prev = h_next\n    \npredicted_probs = tf.stack(predicted_probs, axis=1) # torch.stack for PyTorch","55c44c56":"assert predicted_probs.shape.as_list() == [None, MAX_LENGTH, n_tokens]\nassert h_prev.shape.as_list() == h0.shape.as_list()","f1dc0567":"predictions_matrix = predicted_probs[:, :-1]\nanswers_matrix = tf.one_hot(input_sequence[:, 1:], n_tokens)  # torch.nn.functional.one_hot for PyTorch\n\nprint('predictions_matrix:', predictions_matrix.shape)\nprint('answers_matrix:', predictions_matrix.shape)","e9cc1e36":"import tensorflow\nloss = tensorflow.reduce_mean(tensorflow.losses.categorical_crossentropy(answers_matrix, predictions_matrix))\noptimize = tf.train.AdamOptimizer().minimize(loss)","df98cdbe":"batch_size = 32\nhistory = []\n\nsess.run(tf.global_variables_initializer()) # \u044d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u0438\u043b\u0438\u0442\u044c","09621aeb":"words_matrix = to_matrix(lines, max_len=16)","288fc0d7":"for i in range(1000):\n    batch = words_matrix[np.random.choice(words_matrix.shape[0], batch_size, replace=False), :]\n    _loss, _ = sess.run((loss, optimize), {input_sequence: batch})\n    history.append(_loss)","00ca0e6a":"plt.plot(history)\nplt.grid()","5e8344b8":"x_t = tf.placeholder('int32', (None, ))\nh_t = tf.Variable(np.zeros([1, rnn_size], 'float32'))\n\nnext_h, next_probs = rnn_one_step(x_t, h_t)","4df75361":"def generate_sample(seed_phrase=' ', max_length=MAX_LENGTH):\n    result = seed_phrase\n    words = to_matrix(seed_phrase)\n\n    sess.run(tf.assign(h_t, h_t.initial_value))\n\n    for word in words[:-1]:\n        sess.run(tf.assign(h_t, next_h), {x_t: word})\n\n    word = words[-1][0]\n    for _ in range(len(seed_phrase), max_length):\n        probs, _ = sess.run([next_probs, tf.assign(h_t, next_h)], {x_t: [word]})\n        word = np.random.choice(n_tokens, p=probs[0])\n        result += tokens[word]\n    return result","31a2ae0a":"for _ in range(10):\n    print(generate_sample())","366de846":"for _ in range(25):\n    print(generate_sample(' Putin'))","f51a04f4":"## \u041e\u0434\u0438\u043d \u0448\u0430\u0433 RNN\n\n\u0420\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c (RNN) \u2014 \u044d\u0442\u043e \u0442\u0430\u043a\u0430\u044f \u0441\u0435\u0442\u044c \u0441 <s>\u0431\u043b\u043e\u043a\u043d\u043e\u0442\u043e\u043c<\/s> \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c $h$, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043d\u0430 \u0443\u043c\u0435\u0435\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u043e, \u0447\u0442\u043e \u0432\u0438\u0434\u0435\u043b\u0430.\n\n\u0421\u0435\u0442\u044c \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441 \u043f\u0443\u0441\u0442\u043e\u0433\u043e $h_0 = \\vec 0$, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0442\u0435\u043a\u0441\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443:\n* $x_t$ \u2014 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, $h_t$ \u2014 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n* $h_{t+1} = \\text{get_h_next}(h_t, x_t)$ \u2014 \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n* $p(x_{t+1} | h_{t+1}) = \\text{get_probs}(h_{t+1})$ \u2014 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n\n\n\n<img src=\"https:\/\/i.imgur.com\/8l4qFF0.png\" width=480>\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 $x_t$ \u2014 \u044d\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 (\u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e), \u0442\u043e \u0435\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 (*embedding*).","4283c96b":"### \u0413\u0440\u0430\u0444\u0438\u043a **accuracy** \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:\n<img src=\"https:\/\/drive.google.com\/uc?export=view&id=1HbmnEKi4br1wodROP-ng7x5qUWbdpHoT\" width=\"600\">","e6930c4c":"## \u0414\u0430\u043d\u043d\u044b\u0435\n\nCIFAR10\n* 60000 RGB \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 32x32x3\n* 10 \u043a\u043b\u0430\u0441\u0441\u043e\u0432: \u0441\u0430\u043c\u043e\u043b\u0451\u0442\u044b, \u0441\u043e\u0431\u0430\u043a\u0438, \u0440\u044b\u0431\u044b \u0438 \u0442.\u043f.\n\n<img src=\"https:\/\/www.samyzaf.com\/ML\/cifar10\/cifar1.jpg\" style=\"width:60%\">","7f843192":"## \u041c\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u043e\u0432 RNN\n\n\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0448\u0430\u0433 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438, \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u0438\u0445 \u0448\u0430\u0433\u043e\u0432 \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435. \u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u2014 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0448\u0430\u0433\u043e\u0432 (`MAX_LENGTH`).\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.2 (1 \u0431\u0430\u043b\u043b)**. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u043e\u0432 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 RNN, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u044f \u043f\u0440\u043e *get_h_next* \u0438 *get_probs*.","67861516":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.3 (2 \u0431\u0430\u043b\u043b\u0430)**. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c (\u043a\u0440\u043e\u0441\u0441\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044f) \u0438 \u0448\u0430\u0433 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0441\u043f\u0443\u0441\u043a\u0430.","f7da2a68":"# \u0412\u0441\u0451 \u0441\u0434\u0435\u043b\u0430\u043b\u0438, \u043d\u043e \u0430\u0437\u0430\u0440\u0442 \u043d\u0435 \u043f\u0440\u043e\u0448\u0435\u043b?\n\n\u0412 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u043a\u0438:\n* \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439. Bagging? Stacking? Boosting? \u0412\u0441\u0451, \u0447\u0442\u043e \u043f\u043e\u0436\u0435\u043b\u0430\u0435\u0442\u0435.\n* \u0411\u043e\u043b\u0435\u0435 \u0447\u0435\u0441\u0442\u043d\u044b\u0439 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442: \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 train\/__dev__\/test, \u0432\u0441\u0435 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e dev, \u0430 test \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043a\u043e\u043d\u0446\u0435.\n* \u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0430\u043c\u0438 \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430. \u0423\u0436 \u0447\u0435\u0433\u043e, \u0430 \u043a\u043e\u0442\u0438\u043a\u043e\u0432 \u0438 \u0441\u043e\u0431\u0430\u0447\u0435\u043a \u0442\u0430\u043c \u0445\u0432\u0430\u0442\u0430\u0435\u0442.","5773d1a1":"\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043b\u043e\u0439, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f $[emb(x_t), h_t] \\to h_{t+1}$.","3c9dab85":"\u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 [\u041a\u0430\u0433\u0433\u043b\u0430](https:\/\/www.kaggle.com\/c\/dogs-vs-cats\/data)","cfdebff3":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0438\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0442\u043e\u043f10 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043f\u043e \u043c\u043d\u0435\u043d\u0438\u044e InceptionV3.","74ffa0b6":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u0443\u044e \u0441\u0435\u0442\u044c:","3088a056":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.5 (0.5 \u0431\u0430\u043b\u043b\u0430).** \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 batch_size (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 model.fit) - \u043f\u0440\u0438 \u0431\u043e\u043b\u044c\u0448\u0435\u043c \u0431\u0430\u0442\u0447\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c \u044d\u043f\u043e\u0445\u0438, \u043d\u043e \u0441 \u0441\u043e\u0432\u0441\u0435\u043c \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u043c \u0431\u0430\u0442\u0447\u0435\u043c \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u043f\u043e\u0445 \u0434\u043b\u044f \u0441\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 (\u0442.\u043a. \u0441\u0435\u0442\u044c \u0434\u0435\u043b\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0448\u0430\u0433\u043e\u0432 \u0437\u0430 \u043e\u0434\u043d\u0443 \u044d\u043f\u043e\u0445\u0443).\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u0430\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 55%.","a5c9739f":"# \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438.\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u0447\u0435\u0442. \u041c\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u043e\u0432 IPython (ipynb-\u0444\u0430\u0439\u043b). \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0430\u0448 \u043e\u0442\u0447\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u043c \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u043e\u043c, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u043c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u0439. \u041f\u043e\u043c\u0438\u043c\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043a\u043e\u0434, \u043e\u0434\u043d\u0430\u043a\u043e \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043a\u043e\u0434\u0430, \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u043c: \u043d\u0430\u043c \u2014 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0432\u0430\u043c \u2014 \u043f\u0440\u043e\u0449\u0435 \u043d\u0430\u0439\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442. \u041f\u0440\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0442\u043a\u043e\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0447\u0435\u0442\u0430 \u0438 \u043a\u043e\u0434\u0430.\n\n\u041c\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0447\u0435\u0440 \u043f\u0435\u0440\u0435\u0434 \u0441\u0434\u0430\u0447\u0435\u0439.\n\n\n**\u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415:** \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 PyTorch \u0432\u043c\u0435\u0441\u0442\u043e Keras","a966163e":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 [CIFAR-10](https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html). \u0412 PyTorch \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c [torchvision.datasets](https:\/\/pytorch.org\/docs\/stable\/torchvision\/datasets.html) \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n\n**\u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435:** \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 PyTorch \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0431\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e, \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f [torch.utils.data.sampler.SubsetRandomSampler](https:\/\/pytorch.org\/docs\/stable\/data.html#torch.utils.data.SubsetRandomSampler).","a2c8f592":"## Fine-tuning\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2 (3 \u0431\u0430\u043b\u043b\u0430).** \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0435\u0449\u0451 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0447\u0435\u0440\u0435\u0437 \u0434\u043e\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 (fine-tuning) \u043c\u043e\u0434\u0435\u043b\u0438. \u041d\u043e\u0432\u0430\u044f \u0446\u0435\u043b\u044c \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0443 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430 \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 `InceptionV3`. \u0426\u0435\u043b\u044c \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ROC-AUC __\u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 99.5%__.","842e9cb2":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.5 (1 \u0431\u0430\u043b\u043b).** \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0443\u0449\u044e \u043d\u043e\u0432\u044b\u0435 \u0438\u043c\u0435\u043d\u0430:","21c062a2":"### \u0426\u0438\u043a\u043b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.4 (1 \u0431\u0430\u043b\u043b)**. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0446\u0438\u043a\u043b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f:\n1. \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c `batch_size` \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u0447\u0435\u043a\n2. \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432\n3. \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0442\u0435\u0440\u044c \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u0448\u0430\u0433 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n4. \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0442\u0435\u0440\u044c \u0432 `history`\n\n\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0438\u043b\u0438 \u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0437 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439.","dd057e1e":"### \u0413\u0440\u0430\u0444\u0438\u043a **accuracy** \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:\n\n* \u041a\u043e\u0440\u0438\u0447\u043d\u044b\u0439 - SGD.\n* \u0413\u043e\u043b\u0443\u0431\u043e\u0439 - Momentum.\n* \u0420\u043e\u0437\u043e\u0432\u044b\u0439 - Adam.\n\n\n<img src=\"https:\/\/drive.google.com\/uc?export=view&id=1Se1Rll79TvXLxur55iNsz1E7iA98Pihl\" width=\"600\">","8aaf3abd":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 RNN\n\n\u041a\u0430\u043a \u0438 \u043b\u044e\u0431\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, RNN \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 log-\u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u0438\u044f \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 $D$:\n\n$$ \\theta = \\underset \\theta {argmax} \\log P(D) $$\n\n\u0433\u0434\u0435\n$$ \\log P(D) = \\underset {\\vec x \\in D} \\sum \\log P(\\vec x) = \\underset {\\vec x \\in D} \\sum \\underset {x_t \\in \\vec x} \\sum \\log P(x_t | x_0, ..., x_{t+1})$$\n\nC \u0442\u0435\u043c \u0436\u0435 \u0443\u0441\u043f\u0435\u0445\u043e\u043c \u043c\u044b \u043c\u043e\u0436\u0435\u043c __\u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c__ \u043a\u0440\u043e\u0441\u0441\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044e \u2014 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u0441 \u043c\u0438\u043d\u0443\u0441\u043e\u043c.","70413b0d":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c, \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0441\u0432\u043e\u0438 <s>\u043e\u0449\u0443\u0449\u0435\u043d\u0438\u044f<\/s> \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0442 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432. ","20b09035":"## \u0421\u043b\u043e\u0432\u0430\u0440\u0438\n\n\u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u043d\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \"\u0441\u043b\u043e\u0432\u0430\u0440\u044c\" \u2014 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0442\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0440\u043e\u0434\u0438\u0442\u044c. \u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0443\u043c\u0435\u0442\u044c \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0432\u043e\u0439 \u043d\u043e\u043c\u0435\u0440. \u041f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u0432 \u0441\u0435\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0431\u0443\u0434\u0443\u0442 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435.\n\n\u0422\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0430.","914bfe8a":"\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u0434 \u043d\u0438\u0436\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u0447\u0442\u043e \u0432\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e.","516eeb50":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.6 (0.5 \u0431\u0430\u043b\u043b\u0430).** \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e \u043c\u0435\u0442\u043e\u0434\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0435\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0443\u044e \u043a\u0440\u0438\u0432\u0443\u044e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041f\u043e\u044f\u0441\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u0432\u044b \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u043f\u043e\u0434 \"\u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0439\" \u043a\u0440\u0438\u0432\u043e\u0439 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","10407fe0":"### \u0413\u0440\u0430\u0444\u0438\u043a **accuracy** \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:\n\n<img src=\"https:\/\/drive.google.com\/uc?export=view&id=1a_T0b0ri_9lF77eerHLzTIXqE9aXygLo\" width=\"600\">","6e7a5c13":"\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 4:1.","1270397d":"\u0418, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0441\u043b\u043e\u0439 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 $h_{t+1} \\to P(x_{t+1}|h_{t+1})$.","ab3888d6":"\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e:","258c5387":"**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:** \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u043e\u044f\u0442\u044c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `tf.keras.applications.inception_v3.preprocess_input`: \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u0442\u043e \u043e\u0431\u0449\u0435\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 (\u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043a `InceptionV3`), \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0442\u0435\u043d\u0437\u043e\u0440 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442 \u0444\u0438\u0447\u0438 \u0432 \u043e\u0442\u0440\u0435\u0445\u043e\u0435 $[-1; 1]$.  \u0412 PyTorch \u0432\u0441\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0437\u0430\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u0434 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043f\u0440\u0438 \u043c\u043e\u043c\u043e\u0449\u0438 \u043c\u043e\u0434\u0443\u043b\u044f `torchvision.transform`, \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0442\u0435\u043d\u0437\u043e\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 `torchvision.transform.ToTensor`. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 Temsorflow, \u0440\u043e\u0434\u043d\u043e\u0439 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f PyTorch - \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 $[0; 1]$.\n\n`MobileNet`","83cdbd9e":"## \u0412\u044b\u0432\u043e\u0434\u044b:\n1. \u0410\u0434\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c SGD.\n2. \u0431\u0430\u0442\u0447-\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u0451\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435. \u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443 \u0431\u0430\u0442\u0447-\u043d\u043e\u0440\u043c\u0430 \u043d\u0430 \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u044f\u0445.\n3. \u041d\u0430\u0443\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0431\u0430\u0442\u0447\u0430 = 32.","e22e6c81":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u0430 RNN \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439:\n1. \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043d\u0430 \u0435\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440 (embedding) (*hint*: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f tf.reshape);\n2. \u0441\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0435\u043a\u0442\u043e\u0440 \u0432\u0445\u043e\u0434\u0430 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435;\n3. \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0435\u0442\u0438;\n4. \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 P(x_next | h_next).","2dbcdb32":"## \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0442\u0438\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c:\n1. \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 32 x 32 x 3;\n2. \u0432\u044b\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 (`keras.layers.Flatten`, `torch.nn.Flatten`);\n3. \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 1 \u0438\u043b\u0438 2 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u044f;\n4. \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439 \u043e\u0442\u0434\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 10 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.","1efac7dd":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 \u0431\u043b\u0438\u0437\u043a\u043e\u0439 \u043a \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0435:","5594d4a2":"# \u0427\u0430\u0441\u0442\u044c 2. Fine-tuning \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439\n\n\u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u043c\u043e\u043d\u0441\u0442\u0440\u0430\u043c\u0438: \u0441\u0435\u0442\u044f\u043c\u0438 \u0441 \u043f\u043e\u0447\u0442\u0438 \u0441\u043e\u0442\u043d\u0435\u0439 \u0441\u043b\u043e\u0451\u0432 \u0438 \u0434\u0435\u0441\u044f\u0442\u043a\u0430\u043c\u0438 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0430\u043a\u0438\u043c\u0438:\n\n![img](https:\/\/alexisbcook.github.io\/assets\/inception.png)\n<center>googlenet inception v3<\/center>\n\n\u0415\u0441\u043b\u0438 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0441\u0438\u043d\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u043b\u043e\u0438, \u043a\u0440\u0430\u0441\u043d\u044b\u043c \u2014 pooling, \u0437\u0435\u043b\u0451\u043d\u044b\u043c \u2014 \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0430\u0446\u0438\u044f \u0432\u0445\u043e\u0434\u043e\u0432 \u0438 \u0442.\u043f.\n\n__\u0427\u0435\u043c \u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0441\u0442\u0440\u0430?__\n\n\u041e\u0433\u0440\u043e\u043c\u043d\u044b\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u043e\u043c \u0437\u0440\u0435\u043d\u0438\u0438 \u0442\u0430\u043a\u0438\u0445 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u043d\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 [ImageNet](http:\/\/image-net.org\/). \u0412 \u044d\u0442\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439.\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u044d\u0442\u043e\u0439 \u0441\u0435\u0442\u0438 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 1000 \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u0412\u043e\u0442 \u043e\u043d\u0438:","4b4e005f":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 (\u0434\u043b\u044f PyTorch \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0439 \u043a\u043e\u0434 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c):","c32bf015":"\u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u043f\u043e\u0432\u0435\u0440\u0445 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 sklearn (\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0439). \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c ROC-AUC __\u0445\u043e\u0442\u044f \u0431\u044b 99%__.","68744ac5":"\u041f\u0440\u0435\u0436\u0434\u0435, \u0447\u0435\u043c \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435, \u0441\u0442\u043e\u0438\u0442 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c:","70cdfdaf":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0435\u0442\u0438\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.1 (1.5 \u0431\u0430\u043b\u043b\u0430).** \u0411\u0443\u0434\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043a\u043b\u0430\u0441\u0441\u043e\u0432\u0443\u044e \u043a\u0440\u043e\u0441\u0441\u044d\u043d\u0442\u0440\u043e\u043f\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e __sgd__. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0435\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 __\u043d\u0435 \u043c\u0435\u043d\u0435\u0435 45%__ __accuracy__ \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n__\u0412\u0430\u0436\u043d\u043e:__ \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 y_train \u043b\u0435\u0436\u0430\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u041a\u0435\u0440\u0430\u0441\u0443 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c sparse \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c \u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 (`sparse_categorical_crossentropy` \u0438 `sparse_categorical_accuracy`), \u043b\u0438\u0431\u043e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043a\u0438 \u0432 one-hot \u0444\u043e\u0440\u043c\u0430\u0442. PyTorch, \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432, \u0443\u043c\u0435\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043c\u0435\u0442\u043a\u0430\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (`torch.nn.CrossEntropyLoss`)\n\n### \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u043e\u0432\u0435\u0442\u044b (keras)\n* `model.compile` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c.\n* \u0412 `model.fit` \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 (`validation_data=[X_val, y_val]`), \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u043d\u0430 \u043d\u0435\u0439. \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 [tensorboard](https:\/\/keras.io\/callbacks\/#tensorboard).\n* \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441\u0435\u0442\u044c \u0443\u0447\u0438\u0442\u0441\u044f 1 \u044d\u043f\u043e\u0445\u0443. \u0421\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0432\u0430\u043c \u044d\u0442\u043e\u0433\u043e \u0445\u0432\u0430\u0442\u0438\u0442. \u0427\u0438\u0441\u043b\u043e \u044d\u043f\u043e\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 `fit` (`epochs`).\n* \u0415\u0449\u0451 \u0443 \u041a\u0435\u0440\u0430\u0441\u0430 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0433\u043e [\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 callback-\u043e\u0432](https:\/\/keras.io\/callbacks\/), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438\u043b\u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n\n### PyTorch\n\u0412 PyTorch \u0435\u0441\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c [tensorboard](https:\/\/pytorch.org\/docs\/stable\/tensorboard.html),  \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e \u0441\u0443\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0433\u043e\u0442\u043e\u044b\u0432\u0439 (\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u043c\u0438) TensorBoard, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u0432\u043e\u043f\u0440\u043e\u0441\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 PyTorch \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u0442 Tensorflow, \u043d\u043e, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043c\u043e\u0434\u0443\u043b\u044e \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Tensorboard \u0434\u043e\u0441\u0443\u0442\u043f\u043d\u044b \u0438 \u0432 PyTorch","1e5259d1":"__\u0428\u0430\u0433 4.__ \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e.","7108d45c":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0421\u0435\u0439\u0447\u0430\u0441 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u0440\u043e\u0439\u043a\u043e\u0439 \u0447\u0438\u0441\u0435\u043b (RGB) __\u043e\u0442 0 \u0434\u043e 255__. \u041e\u0434\u043d\u0430\u043a\u043e \u043b\u0443\u0447\u0448\u0435 \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434, \u0433\u0434\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u0445\u043e\u0434\u043e\u0432 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 0.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d __`[0, 1]`__ \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442:","5e3560a8":"# \u0427\u0430\u0441\u0442\u044c 1. \u0421\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u0435\u0442\u0438\n\n\u0417\u0434\u0435\u0441\u044c \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 CIFAR10. ","86e2a76c":"__\u0428\u0430\u0433 2.__ \u041e\u0431\u0443\u0447\u0438\u0442\u0435 \"\u0433\u043e\u043b\u043e\u0432\u0443\" \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u043d\u0435 \u043c\u0435\u043d\u044f\u044f \u0432\u0435\u0441\u043e\u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u042d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0441 \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u0435\u0441\u0430\u043c\u0438. \u041a\u0430\u043a \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 Keras, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c [\u0437\u0434\u0435\u0441\u044c](https:\/\/keras.io\/getting-started\/faq\/#how-can-i-freeze-keras-layers), \u0434\u043b\u044f PyTorch \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 [\u0441\u0442\u0430\u0442\u044c\u044e](https:\/\/pytorch.org\/tutorials\/beginner\/transfer_learning_tutorial.html), \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b \u043f\u0440\u043e Finetuning. \u0412 PyTorch \u0437\u0430\u043c\u043e\u0440\u043e\u0437\u043a\u0430 \u0432\u0435\u0441\u043e\u0432 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c `requires_grad = False`.","975ce47e":"## \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439\n\n\u0412 \u043f\u0443\u043f\u043e\u043b\u044f\u0440\u043d\u044b\u0445 \u0431\u0438\u0431\u0438\u043b\u043e\u0442\u0435\u043a\u0430\u0445 \u0434\u043b\u044f \u0441\u043e\u0434\u0430\u043d\u0438\u044f \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439, \u043a\u0440\u043e\u043c\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0447\u0435\u0433\u043e, \u0435\u0441\u0442\u044c \u0437\u043e\u043e\u043f\u0430\u0440\u043a \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0439: [__`keras.applications`__](https:\/\/keras.io\/applications\/) \u0434\u043b\u044f Keras \u0438 [torchvision.models](https:\/\/pytorch.org\/vision\/stable\/models.html) \u0434\u043b\u044f PyTorch. \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043c\u044b \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c \u043f\u043e\u0440\u0430\u0434\u043e\u0442\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e `InceptionV3`.\n\n**\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435!**\nInceptionV3 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b. \u0415\u0441\u043b\u0438 \u0432\u0430\u0448 \u041f\u041a \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0430\u0442\u044c:\n* \u0437\u0430\u043a\u0440\u043e\u0439\u0442\u0435 \u0432\u0441\u0451 \u043a\u0440\u043e\u043c\u0435 jupyter \u0438 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0432\u043a\u043b\u0430\u0434\u043a\u043e\u0439;\n* \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u043e, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u044d\u0442\u0443 \u0442\u0435\u0442\u0440\u0430\u0434\u043a\u0443 \u0432 [google colab](https:\/\/colab.research.google.com\/) \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0442\u0430\u043c;\n* \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u0435 `InceptionV3` \u043d\u0430 `MobileNet`. \u041e\u0434\u043d\u0430\u043a\u043e \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0430\u043c \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a.\n\n\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043b\u044f \u0432\u0430\u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c (\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 Keras \u0438 PyTorch \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c \u0432\u044b\u0448\u0435) \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443!","7880b03f":"__\u0428\u0430\u0433 1.__  \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0441\u0435\u0442\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 InceptionV3 \"\u0431\u0435\u0437 \u0433\u043e\u043b\u043e\u0432\u044b\" \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u044f. \u041f\u043e\u0432\u0435\u0440\u0445 \u043d\u0435\u0451 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0433\u043e\u043b\u043e\u0432\u0443 \u0438\u0437 `keras.layers`\/ `torch.nn`\u2014 \u043e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c \u043a\u043e\u0442\u043e\u0432 \u043e\u0442 \u0441\u043e\u0431\u0430\u043a. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e [\u043e\u0431\u0449\u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438](https:\/\/keras.io\/models\/model\/). \u0412 PyTorch \u043d\u0435\u0441\u0435\u043a\u0432\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 `torch.nn.Module`: [\u043e\u0431\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u043e\u0434\u0435\u043b\u0438 PyTorch](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Module.html#torch.nn.Module)","eb42a3d7":"## \u0421\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.7 (5 \u0431\u0430\u043b\u043b\u043e\u0432).** \u041d\u0430\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0432\u044b\u0448\u0435, \u043e\u0431\u0443\u0447\u0438\u043c \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u0430\u0441\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 __accuracy \u0431\u043e\u043b\u044c\u0448\u0435 80%__. \u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b, \u0441\u0440\u0430\u0432\u043d\u0438\u0432 \u0438\u0445 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0432 \u043a\u043e\u043d\u0446\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0449\u0435, \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0438\u043b\u0438 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b.\n\n\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043d\u0430\u0447\u0430\u0442\u044c \u0441 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0435\u0451 \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0451, \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e: \u043b\u044e\u0431\u044b\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438, \u0441\u043a\u043e\u043b\u044c \u0443\u0433\u043e\u0434\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 \u0438 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0441\u0435\u0442\u0438. \u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435: __\u043d\u0435\u043b\u044c\u0437\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435__.\n\n### \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u043e\u0432\u0435\u0442\u044b\n* \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0431\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 10 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 3x3.\n* __\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e: \u043e\u0434\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442__. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c 2 \u0438\u0434\u0435\u0438 \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0441\u0435\u0442\u0438, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e. \u041c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043e\u0434\u043d\u043e \u0438\u0437 \u043d\u0438\u0445 \u0434\u0430\u043b\u043e __+10%__ \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 __-7%__. \u0410 \u0432\u044b \u0442\u0430\u043a \u0438 \u0431\u0443\u0434\u0435\u0442\u0435 \u0434\u0443\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438 2 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0441\u0443\u043c\u043c\u0435 \u0434\u0430\u044e\u0442 __+3%__. \u0415\u0441\u043b\u0438 \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0438\u0434\u0435\u044f \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u2014 \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0432\u0430\u043c \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f - \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0435\u0435 \u0438 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0439\u0442\u0435 \u0438\u0437 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432.\n* __Be careful or you will dropout__. \u0414\u0440\u043e\u043f\u0430\u0443\u0442 (`keras.layers.Dropout`, `torch.nn.Dropout`) \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442\u044c \u0432\u0430\u043c \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0431\u041e\u043b\u044c\u0448\u0443\u044e \u0441\u0435\u0442\u044c \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0432\u044b\u0436\u0430\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u042d\u0442\u043e \u043a\u0440\u0443\u0442\u043e, \u043d\u043e \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0441\u0440\u0430\u0437\u0443 \u0441\u0442\u0430\u0432\u0438\u0442\u044c dropout 50%. \u0412\u043e-\u043f\u0435\u0440\u0432\u044b\u0445, \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u0434\u0440\u043e\u043f\u0430\u0443\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0445\u0443\u0434\u0448\u0438\u0442 \u0441\u0435\u0442\u044c (underfitting). \u0412\u043e-\u0432\u0442\u043e\u0440\u044b\u0445, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0434\u0440\u043e\u043f\u0430\u0443\u0442 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e, \u043e\u043d \u0437\u0430\u043c\u0435\u0434\u043b\u044f\u0435\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0440\u043e\u043f\u0430\u0443\u0442\u0430, \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b, \u0430 \u043f\u043e\u0442\u043e\u043c \u0436\u0430\u0445\u043d\u0443\u0442\u044c \u0432 2 \u0440\u0430\u0437\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 \u0438 \u0434\u0440\u043e\u043f\u0430\u0443\u0442\u0430 ~~\u043d\u0430 \u043d\u043e\u0447\u044c~~.\n* __\u0410\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445__. \u0415\u0441\u043b\u0438 \u043a\u043e\u0442\u0438\u043a\u0430 \u0441\u043b\u0435\u0433\u043a\u0430 \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0438 \u043f\u043e\u0434\u0440\u0435\u0437\u0430\u0442\u044c (\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u0435), \u043e\u043d \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043a\u043e\u0442\u0438\u043a\u043e\u043c. \u0412 \u041a\u0435\u0440\u0430\u0441\u0435 \u0435\u0441\u0442\u044c [\u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441](https:\/\/keras.io\/preprocessing\/image\/), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442 \u043f\u043e\u0434\u0440\u0435\u0437\u0430\u043d\u0438\u0435 \u043a\u043e\u0442\u0438\u043a\u043e\u0432 \u043d\u0430 \u043f\u043e\u0442\u043e\u043a. \u0415\u0449\u0451 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0442\u0440\u044e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435: \u0432\u0435\u0440\u0442\u0438\u043c \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 10 \u0440\u0430\u0437, \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0438 \u0443\u0441\u0440\u0435\u0434\u043d\u044f\u0435\u043c. \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0441\u043e\u0432\u0435\u0442: \u043f\u0440\u0435\u0436\u0434\u0435, \u0447\u0435\u043c \u0443\u0447\u0438\u0442\u044c, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0433\u043b\u0430\u0437\u0430\u043c\u0438 \u043d\u0430 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u0430\u043c\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0442\u044c, \u0442\u043e \u0438 \u0441\u0435\u0442\u044c \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442. [\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438](https:\/\/pytorch.org\/vision\/stable\/transforms.html) \u0432 Pytorch.\n* __Don't just stack more layers__. \u0415\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0438, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 Sequential. \u0412\u043e\u0442 \u043f\u0430\u0440\u0430 \u0438\u0434\u0435\u0439: [Inception family](https:\/\/hacktildawn.com\/2016\/09\/25\/inception-modules-explained-and-implemented\/), [ResNet family](https:\/\/towardsdatascience.com\/an-overview-of-resnet-and-its-variants-5281e2f56035?gi=9018057983ca), [Densely-connected convolutions](https:\/\/arxiv.org\/abs\/1608.06993). \u0422\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u043f\u043e\u0434\u0447\u0438\u0441\u0442\u0443\u044e \u2014 \u0432\u0430\u043c \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430.\n* __\u0414\u043e\u043b\u0433\u043e != \u043f\u043b\u043e\u0445\u043e__. \u0411\u043e\u043b\u0435\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0431\u041e\u043b\u044c\u0448\u0435 \u044d\u043f\u043e\u0445 \u0434\u043e \u0441\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0432 \u043f\u0435\u0440\u0432\u044b\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u043f\u043e\u0445 \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0445\u0443\u0436\u0435 \u043c\u0435\u043d\u0435\u0435 \u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0445 \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432. \u0414\u0430\u0439\u0442\u0435 \u0438\u043c \u0432\u0440\u0435\u043c\u044f, \u0437\u0430\u043f\u0430\u0441\u0438\u0442\u0435\u0441\u044c \u0447\u0430\u0435\u043c \u0438 \u043e\u0431\u043c\u0430\u0436\u044c\u0442\u0435\u0441\u044c batch-norm-\u043e\u043c.","752fb155":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.3 (1 \u0431\u0430\u043b\u043b).** \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 (sgd, momentum, adam) \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041a\u0430\u043a\u043e\u0439 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435?","719475bc":"# \u0427\u0430\u0441\u0442\u044c 3. \u0420\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n\n![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSj85jp-W-V-Bz8ZBjFJYIkV1TTxQxTMh4iqls_rRt8O-sraL08PA)\n\n\u0412 \u044d\u0442\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u044f\u0437\u044b\u043a\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044f\u0445 (RNN) \u0438 \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u043c \u0435\u0451 \u043f\u0440\u0438\u0434\u0443\u043c\u044b\u0432\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430.\n\n__\u042f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c__, \u0435\u0441\u043b\u0438 \u0432\u043a\u0440\u0430\u0442\u0446\u0435, \u2014 \u044d\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430. \u0415\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u043c\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0438\u043c\u0435\u043d\u0430, \u0441\u043a\u043e\u0440\u043c\u0438\u0432 \u0435\u0439 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e 8\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445.\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u044b \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 _\u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432_: $\\{x_0, x_1, x_2, ..., x_n\\}$. \n\n\u041d\u0430\u0448\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430:\n$$ p(x_0, x_1, x_2, ..., x_n) = \\prod_t p(x_t | x_0, ... x_{t - 1}) $$","fe70372a":"### \u0412\u044b\u0432\u043e\u0434:\n\u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0431\u0430\u0442\u0447\u0430=4 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0439 **accuracy** \u0437\u0430 9 \u044d\u043f\u043e\u0445. \u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0431\u0430\u0442\u0447\u0430 8 \u0441\u0434\u0435\u043b\u0430\u043b\u0430 \u044d\u0442\u043e \u0437\u0430 2 \u044d\u043f\u043e\u0445\u0438. \u041c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 16,32,64,128 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430 1 \u044d\u043f\u043e\u0445\u0443. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c, \u043b\u0443\u0447\u0448\u0435\u0435 accuracy \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0431\u0430\u0442\u0447\u0430 = 32.","fa51210d":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0435 \u043d\u0430 \u0447\u0435\u043c-\u0442\u043e \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e\u043c!","4a576a48":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0430\u0448\u0438 \u0432\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u044b\u043c \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043c: \u0447\u0442\u043e \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e, \u0447\u0442\u043e \u2014 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c. \u041f\u043e\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043a\u0440\u0438\u0432\u044b\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440.","920a9274":"__\u0428\u0430\u0433 3.__ \"\u0420\u0430\u0437\u043c\u043e\u0440\u043e\u0437\u044c\u0442\u0435\" \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0441\u043b\u043e\u0451\u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. \u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0432\u0430\u0436\u043d\u043e \u043d\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u0442\u044c\u0441\u044f: \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.\n\n\u0415\u0441\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442\u0441\u044f, \u0430 \u0441\u0440\u0430\u0437\u0443 \u0438\u0434\u0451\u0442 \u0432\u043d\u0438\u0437, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0451\u0432 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c [\u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445](https:\/\/keras.io\/preprocessing\/image\/) ([\u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f](https:\/\/pytorch.org\/vision\/stable\/transforms.html) \u0432 Pytorch). \u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u043e\u043c\u043d\u0438\u0442\u044c \u043f\u0440\u043e \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0438 \u0431\u0435\u0437 \u043d\u0435\u0451 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u2014 \u0438\u043d\u043e\u0433\u0434\u0430 \u043e\u043d\u0430 \u0442\u0432\u043e\u0440\u0438\u0442 [\u0447\u0443\u0434\u0435\u0441\u0430](https:\/\/medium.com\/nanonets\/how-to-use-deep-learning-when-you-have-limited-data-part-2-data-augmentation-c26971dc8ced).","57d77fad":"## Dogs Vs Cats\n\n\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u043a\u0438 \u043e\u0442 \u0441\u043e\u0431\u0430\u043a\u0438. \n\n![img](https:\/\/dingo.care2.com\/pictures\/greenliving\/1203\/1202163.large.jpg)","7f32bc9a":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c: \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0451 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432.","ed8ed236":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0435\u0439 \u0441\u0435\u0442\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u043a\u043e\u0434 \u043d\u0438\u0436\u0435:","dc96eb1c":"## \u0423\u0447\u0438\u043c\u0441\u044f \u0443\u0447\u0438\u0442\u044c\n\n\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u0440\u0438\u0432\u044b\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u2014 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f accuracy \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439. \n\n\u0412\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c _\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0435\u043d\u0434_ \u2014 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0438\u0445 \u043e\u0431\u0443\u0447\u0438\u043b \u0438 \u0432\u044b\u0432\u0435\u043b \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u043a\u0440\u0438\u0432\u044b\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `keras.callbacks` \u2014 `TensorBoard` \u0438\u043b\u0438 `History`.\n\n\u0411\u0443\u0434\u044c\u0442\u0435 \u043c\u043e\u0440\u0430\u043b\u044c\u043d\u043e \u0433\u043e\u0442\u043e\u0432\u044b, \u0447\u0442\u043e \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0439\u0434\u0451\u0442 _\u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438_. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u0435\u0441\u044c 10 \u044d\u043f\u043e\u0445\u0430\u043c\u0438. \u041f\u043e\u043a\u0430 \u0438\u0434\u0451\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u0437\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0447\u0435\u043c-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u0440\u0438\u044f\u0442\u043d\u044b\u043c: \u043f\u043e\u0441\u043f\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440.","070fecb2":"__Sanity check:__ \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0432\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0443\u0436\u0435 \u0431\u044b\u0442\u044c \u0441\u0440\u0430\u0432\u043d\u0438\u043c\u0430 \u043f\u043e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0438\u0437 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 1.\n\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0451 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c, \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f [\u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c Keras](https:\/\/keras.io\/getting-started\/faq\/#how-can-i-save-a-keras-model) \u0438\u043b\u0438 [\u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c PyTorch](https:\/\/pytorch.org\/tutorials\/beginner\/saving_loading_models.html).","23726687":"### \u0414\u0430\u043d\u043d\u044b\u0435\n\n\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u044f\u0437\u044b\u043a\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e ~8k \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u043c\u0451\u043d \u043d\u0430 \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u0435. \u0415\u0441\u043b\u0438 \u043a\u043e\u0433\u0434\u0430-\u043d\u0438\u0431\u0443\u0434\u044c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0430\u0442\u044c \u0438\u043c\u044f \u0441\u0432\u043e\u0435\u043c\u0443 \u0440\u0435\u0431\u0451\u043d\u043a\u0443, \u0443 \u0432\u0430\u0441 \u0431\u0443\u0434\u0435\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c.\n\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0438\u0445 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c:\n* \u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 `names` \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n* \u0412 \u043d\u0430\u0447\u0430\u043b\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043f\u0438\u0448\u0438\u0442\u0435 __\u043f\u0440\u043e\u0431\u0435\u043b__\n* \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0440\u043e\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 (`\\n`)","f1cc30c0":"\u041c\u043e\u043c\u0435\u043d\u0442 \u0438\u0441\u0442\u0438\u043d\u044b: \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u043a\u0430\u043a\u043e\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043e\u0441\u0442\u0438\u0433\u043b\u0430 \u0432\u0430\u0448\u0430 \u0441\u0435\u0442\u044c.","6298f5f8":"## \u041a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u0441\u0435\u0442\u044c\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.2 (1.5 \u0431\u0430\u043b\u043b\u0430).** \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u0443\u044e \u0441\u0435\u0442\u044c. \u0421\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e:\n1. \u0412\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u043b\u043e\u0439\n2. \u0421\u0432\u0451\u0440\u0442\u043a\u0430 3x3 \u0441 10 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438\n3. \u041d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0432\u0430\u0448 \u0432\u043a\u0443\u0441\n4. Max-pooling 2x2\n5. \u0412\u044b\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0435\u0435\u0441\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 (Flatten)\n6. \u041f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u043d\u0430 100 \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432\n7. \u041d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u0432\u0430\u0448 \u0432\u043a\u0443\u0441\n8. \u0412\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 \u0441 softmax\n\n\u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u0435\u0451 \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0441\u0435\u0442\u044c. \u0415\u0441\u043b\u0438 \u0432\u0441\u0451 \u0445\u043e\u0440\u043e\u0448\u043e, \u0443 \u0432\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f accuracy \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 __50%__.","df44bcf9":"## Sklearn way\n\n**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1 (1.5 \u0431\u0430\u043b\u043b\u0430).** \u0412 \u0432\u0430\u0448\u0435\u043c \u0440\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0435\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c InceptionV3. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 sklearn (\u043d\u0430 \u0432\u0430\u0448 \u0432\u044b\u0431\u043e\u0440), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c \u043a\u043e\u0442\u043e\u0432 \u043e\u0442 \u0441\u043e\u0431\u0430\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f __\u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432__.\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0432 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u0438 4:1. \n\n\u0412 \u0432\u0430\u0448\u0435\u043c \u0440\u0430\u0441\u043f\u043e\u0440\u044f\u0436\u0435\u043d\u0438\u0438 \u0432\u0441\u0435\u0433\u043e 25 000 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0432\u0441\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JPEG. \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043a \u0438\u043c\u0435\u044e\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 `.\/train\/cat.*.jpg`, \u0441\u043e\u0431\u0430\u043a \u2014 `.\/train\/dog.*.jpg`.\n\n\u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u043e\u044f \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043b\u043e\u0439 \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0451\u0432 \u0441\u0435\u0442\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044e \u0441\u043b\u043e\u0451\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e.\n\n[\u0417\u0434\u0435\u0441\u044c](https:\/\/keras.io\/getting-started\/faq\/#how-can-i-obtain-the-output-of-an-intermediate-layer) \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0451\u0432.","75f6f1f8":"\u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0435\u0432 \u0438 \u043f\u0443\u043b\u043b\u0438\u043d\u0433\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0434\u0440\u043e\u043f\u0430\u0443\u0442 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0431\u0438\u0442\u044c \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.","21a8e461":"\u0418\u043c\u0435\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0442\u0447 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 int32 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0442\u043e\u043a\u0435\u043d\u043e\u0432. \u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0431\u0430\u0442\u0447\u0435 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b, \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0431\u0430\u0442\u0447\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 (\u043f\u0430\u0434\u0434\u0438\u043d\u0433).","ce01ac18":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0436\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b\u0430 \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c:","732ecfb9":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0438\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438. \u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c 10^4.","bb9bc373":"### \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043f\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438:","8c8028bc":"\u0418 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0432\u0441\u0435 \u043b\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e:","1aa7743f":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1.4 (0.5 \u0431\u0430\u043b\u043b\u0430).** \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0431\u0430\u0442\u0447\u0443 (`BatchNormalization`) \u043c\u0435\u0436\u0434\u0443 \u0441\u0432\u0451\u0440\u0442\u043a\u043e\u0439 \u0438 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0435\u0439. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u2014 \u0432 \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0445 \u0441\u043b\u043e\u044f\u0445.","4930b1fb":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:","8dfc59ea":"**\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1 (1 \u0431\u0430\u043b\u043b)**. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f *get_h_next* \u0438 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 *get_probs*, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 *rnn_one_step*, \u043a\u0430\u043a \u043d\u0430 \u0441\u0445\u0435\u043c\u0435 \u0432\u044b\u0448\u0435.","56d9f69a":"### \u0413\u0440\u0430\u0444\u0438\u043a **accuracy** \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435:\n\n* \u041a\u043e\u0440\u0438\u0447\u043d\u044b\u0439 - \u0411\u0430\u0442\u0447-\u043d\u043e\u0440\u043c \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u043e\u043c \u0441\u043b\u043e\u0435.\n* \u0421\u0438\u043d\u0438\u0439 - \u0411\u0430\u0442\u0447-\u043d\u043e\u0440\u043c \u043f\u043e\u0441\u043b\u0435 \u0441\u0432\u0435\u0440\u0442\u043a\u0438.\n* \u0417\u0435\u043b\u0435\u043d\u044b\u0439 - \u0411\u0430\u0442\u0447-\u043d\u043e\u0440\u043c \u043f\u043e\u0441\u043b\u0435 \u0441\u0432\u0435\u0440\u0442\u043a\u0438 \u0438 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u043e\u043c \u0441\u043b\u043e\u0435.\n\n<img src=\"https:\/\/drive.google.com\/uc?export=view&id=14-_V0fd8qFigseAUubFw82BA-GhmsTWA\" width=\"600\">","3dd3da9e":"\u041e\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0430\u0448\u0438 \u0432\u044b\u0432\u043e\u0434\u044b \u043e \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435.","708ad986":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 RNN\n\n\u0422\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0431\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430.\n\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u0435\u0451 \u043a \u0441\u0442\u0440\u043e\u043a\u0435 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u0431\u0443\u043a\u0432\u044b \u0438\u043c\u0435\u043d\u0438. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e:\n* $x_t \\sim P(x_t | h_t)$ \u2014 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0431\u0443\u043a\u0432\u0443 \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044f\u043c.\n* $h_{t+1} = \\text{get_h_next}(h_t, x_t)$ \u2014 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0431\u0443\u043a\u0432\u0443 \u043a \u0438\u043c\u0435\u043d\u0438 \u0438 \u043f\u0440\u043e\u0433\u043e\u043d\u0438\u043c \u0447\u0435\u0440\u0435\u0437 RNN","d0014055":"\u0414\u043b\u044f PyTorch:","1b79bd57":"### \u0412\u044b\u0432\u043e\u0434:\nRandomForest, \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0444\u0438\u0447\u0430\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 **accuracy**~0.75. \u0412 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 \u0441 \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0432\u0435\u0440\u0442\u043a\u0430\u043c\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 **accuracy**~0.975. \u0420\u0430\u0437\u043c\u043e\u0440\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0441\u0432\u0435\u0440\u0442\u043e\u043a \u043d\u0435 \u0434\u0430\u0451\u0442 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043c\u043e\u0440\u043e\u0437\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043b\u043e\u0451\u0432.","4d38c8af":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043c\u043e\u0433\u043b\u0430 \u043b\u0438 \u043a\u0430\u0440\u043c\u0430\u043d\u043d\u0430\u044f \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u043f\u043e\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u043f\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443:","1bc5a801":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043e\u0442\u0447\u0451\u0442 \u0438 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0434\u0438\u0442\u0435 \u0441\u0435\u0431\u044f \u0437\u0430 \u0441\u0442\u0430\u0440\u0430\u043d\u0438\u044f \u0447\u0435\u043c-\u043d\u0438\u0431\u0443\u0434\u044c.","df185fec":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 n_tokens \u0432\u0445\u043e\u0434\u043e\u0432 \u0441\u0432\u043e\u0439 \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440:","9f9ef9b1":"**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:**\n\n\u042f\u0447\u0435\u0439\u043a\u0430 \u043d\u0438\u0436\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 Tensorboard \u043d\u0430 \u043a\u0430\u0433\u043b\u0435.","cf06f75e":"\u0414\u043b\u044f Keras:","5a640ac8":"### \u0427\u0442\u043e \u0442\u0435\u043f\u0435\u0440\u044c?\n\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0430\u0441\u043a\u0443\u0447\u0438\u0442 \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u043e\u0432\u0441\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438, \u0432\u044b \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f RNN, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u043e\u0432\u043e\u0435. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0434\u0430\u0447, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u0442\u044c\u0441\u044f:\n* \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0435\u0439 \u043f\u043e \u0433\u043b\u0443\u0431\u0438\u043d\u043d\u043e\u043c\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e;\n* \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0440\u0442 Magic The Gathering;\n* [\u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u043a\u0435\u043c\u043e\u043d\u043e\u0432](https:\/\/github.com\/cervoise\/pentest-scripts\/blob\/master\/password-cracking\/wordlists\/pokemon-list-en.txt);\n* clickbait \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438;\n* \u043c\u043e\u043b\u0435\u043a\u0443\u043b\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 [smiles](https:\/\/en.wikipedia.org\/wiki\/Simplified_molecular-input_line-entry_system);\n* \u0432\u0430\u0448\u0430 \u0444\u0430\u043d\u0442\u0430\u0437\u0438\u044f, \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u044b \u0443\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u043b\u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f.\n\n\u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u044c\u043c\u0451\u0442\u0435\u0441\u044c \u0437\u0430 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443, \u0442\u043e \u0432\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0441\u043e\u0432\u0435\u0442\u043e\u0432:\n* \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u0447\u043a\u0430\u0445. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0440\u043e\u043c\u0430\u043d, \u0435\u0433\u043e \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043f\u043e\u0440\u0435\u0437\u0430\u0442\u044c \u043d\u0430 \u043a\u0443\u0441\u043a\u043e\u0447\u043a\u0438.\n* \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u0430\u0440\u044c\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 MAX_LENGTH \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u043b 90%. \u042d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 2 \u0440\u0430\u0437\u0430.\n* \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0439\u0440\u043e\u043d\u043e\u0432 (rnn_size). \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043c\u043e\u0436\u043d\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0441\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u043c\u0438 \u0441\u0435\u0442\u0438 (\u0441\u043c. \u043d\u0438\u0436\u0435).\n\n### \u0415\u0449\u0451 \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c\n\n* [\u041f\u043e\u0434\u0431\u043e\u0440\u043a\u0430 \u0441\u043e\u0432\u0435\u0442\u043e\u0432](https:\/\/danijar.com\/tips-for-training-recurrent-neural-networks\/) \u043f\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e RNN. \u0427\u0443\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f, \u0447\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e.\n* \u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0431\u043b\u043e\u0433-\u043f\u043e\u0441\u0442 \u043e\u0442 Andrej Karpathy \u043f\u0440\u043e \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 rnn, \u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u2014 [Unreasonable Effectiveness of RNN](http:\/\/karpathy.github.io\/2015\/05\/21\/rnn-effectiveness\/).\n* \u0411\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0430\u0442\u0435\u0439, \u043f\u043e\u0441\u0442\u043e\u0432, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0438 \u043f\u0440\u043e\u0447\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u043e RNN - [awesome rnn](https:\/\/github.com\/kjw0612\/awesome-rnn).\n* \u0417\u043e\u043e\u043f\u0430\u0440\u043a \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0445 \u044f\u0447\u0435\u0435\u043a (LSTM, GRU) \u0432 [\u041a\u0435\u0440\u0430\u0441\u0435](https:\/\/keras.io\/layers\/recurrent\/) \u0438 [PyTorch](https:\/\/pytorch.org\/docs\/stable\/nn.html#recurrent-layers).\n* \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0437\u0430\u0440\u0430\u043d\u0435\u0435. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0438\u0445 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438, \u043c\u0438\u043b\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0441\u0438\u043c \u0432 [tf.while_loop](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/while_loop) \u0438\u043b\u0438 [tf.scan](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/scan).\n* \u0410 \u0435\u0449\u0451 \u0440\u0435\u043a\u0443\u0440\u0440\u0435\u043d\u0442\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u043c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043b\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e. \u0412\u043e\u0442 \u0442\u0443\u0442 \u0435\u0441\u0442\u044c [\u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f](https:\/\/distill.pub\/2016\/augmented-rnns\/)."}}