{"cell_type":{"451fb6f4":"code","40b8f9ad":"code","014d4614":"code","52d88e45":"code","25e83f5d":"code","2a37197f":"code","919dfb3d":"code","9d22b837":"code","7f2db487":"code","9bbd2ef6":"code","6654dca1":"code","1dcaf46e":"code","41b49555":"code","e5f4e2af":"code","82829e3a":"code","ca33f794":"code","a8b6ca29":"code","a2e1e90d":"code","d03815de":"code","75cfe5fc":"code","aeb75ec3":"code","a60364d6":"markdown","b2de2ee4":"markdown","127a7864":"markdown","515e0813":"markdown","8620d5fa":"markdown","e1718176":"markdown","7ce9ec1c":"markdown","d20b5067":"markdown","7131953d":"markdown","d738898d":"markdown","8cfb12d8":"markdown","11bbdab7":"markdown","3db004bf":"markdown"},"source":{"451fb6f4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40b8f9ad":"data = pd.read_csv('\/kaggle\/input\/avocado-prices\/avocado.csv')\ndata.head()","014d4614":"data.info()","52d88e45":"data['month'] = data['Date'].apply(lambda x: x.split('-')[1])\ndata['month'] = data.month.astype('int64')\ndata.head()","25e83f5d":"grouped_month = data.groupby('month').mean()\ngrouped_month.head(15)\n","2a37197f":"import matplotlib.pyplot as plt\n\nmonths= range(1,13)\nplt.bar(grouped_month.index,grouped_month['AveragePrice'])\nplt.xticks(months)\nplt.show()","919dfb3d":"grouped_month2 = data.groupby('month').sum()\n\nplt.bar(grouped_month2.index,grouped_month2['AveragePrice'])\nplt.xticks(months)\nplt.show()","9d22b837":"fig, ax1 = plt.subplots()\n\nax2=ax1.twinx()\nax1.bar(grouped_month2.index,grouped_month2['AveragePrice'],color='g')\nax2.plot(grouped_month.index,grouped_month['AveragePrice'],color='r')\n\nax1.set_xlabel('Month Number')\nax1.set_ylabel('Sum Average Price',color='g')\nax2.set_ylabel('Mean Average Price',color='r')\n\nplt.show()","7f2db487":"import seaborn as sns\nplt.figure(figsize=(10,6))\nsns.lineplot(x=\"month\", y=\"AveragePrice\", hue='type', data=data)\nplt.show()","9bbd2ef6":"grouped_month = data.groupby('year')\ngrouped_month.head()","6654dca1":"data.year.unique()","1dcaf46e":"grouped_year = data.groupby('year').mean()\ngrouped_year2 = data.groupby('year').sum()\n\nyears = ['2015',' 2016',' 2017', '2018']\n\nfig, ax1 = plt.subplots()\n\nax2=ax1.twinx()\nax1.bar(grouped_year2.index,grouped_year2['AveragePrice'],color='g')\nax2.plot(grouped_year.index,grouped_year['AveragePrice'],color='r')\n\nax1.set_xlabel('Year Number')\nax1.set_ylabel('Sum Average Price',color='g')\nax2.set_ylabel('Mean Average Price',color='r')\n\nplt.show()","41b49555":"grouped_type = data.groupby('type')\ngrouped_type.head()","e5f4e2af":"grouped_type.mean()['AveragePrice']","82829e3a":"grouped_type.mean()['Total Volume']","ca33f794":"plt.figure(figsize=(12,10))\nsns.barplot(x=\"AveragePrice\",y=\"region\",data= data)","a8b6ca29":"plt.figure(figsize=(12,10))\nsns.barplot(x=\"Total Volume\",y=\"region\",data= data)","a2e1e90d":"data2 = data[data.region!='TotalUS']","d03815de":"plt.figure(figsize=(12,10))\nsns.barplot(x=\"Total Volume\",y=\"region\",data= data2)","75cfe5fc":"import matplotlib\nimport squarify\n\nvolume_order = data.groupby('region')['Total Volume'].sum(\n                        ).sort_values(ascending = False).reset_index()\n\n\nvolume_values = [i for i in range(volume_order.shape[0])]\nnorm = matplotlib.colors.Normalize(vmin = min(volume_values), vmax = max(volume_values))\n\nplt.figure(figsize = (18, 10))\nsquarify.plot(sizes = volume_order['Total Volume'], alpha = 0.8,\n              label = volume_order.region)\nplt.title('Region Total Volume Map', fontsize = 20)\nplt.axis('off')\nplt.show()","aeb75ec3":"\nbag_order = data.groupby('region')['AveragePrice'].sum(\n                        ).sort_values(ascending = False).reset_index()\n\n\nbag_values = [i for i in range(bag_order.shape[0])]\nnorm = matplotlib.colors.Normalize(vmin = min(bag_values), vmax = max(bag_values))\n\n\nplt.figure(figsize = (20, 12))\nsquarify.plot(sizes = bag_order['AveragePrice'], alpha = 0.8,\n              label = bag_order.region)\nplt.title('Region - Average Price Map', fontsize = 20)\nplt.axis('off')\nplt.show()","a60364d6":"# Region - Total Volume","b2de2ee4":"# Which month has a best 'AveragePrice'?","127a7864":"# Which type is bigger than other?","515e0813":"# Which type is more expensive than other?\n(Data has got 2 type_value. 'conventional' and 'organic' )","8620d5fa":"# Add 'Month' Column","e1718176":"# Region - Total Volume","7ce9ec1c":"# # # #  Read and Check Data","d20b5067":"Let's drop region=='Total US' and check without that.","7131953d":"# Region - Average Price","d738898d":"'organic' smaller than 'conventional'","8cfb12d8":"# Which year has a best 'AveragePrice'","11bbdab7":"# Region - Average Price","3db004bf":"'organic' is expensive than 'conventional'."}}