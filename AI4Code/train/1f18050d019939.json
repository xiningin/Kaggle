{"cell_type":{"afe7a9cd":"code","0c74df66":"code","1edaf05c":"code","0fa07535":"code","d0ec259b":"markdown","b1c50e5d":"markdown"},"source":{"afe7a9cd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport cv2\nfrom PIL import Image\n\n","0c74df66":"images = []\nimages_shape = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if os.path.join(dirname, filename) == '\/kaggle\/input\/390-images-of-popular-graph-theory-graphs\/graph_info.csv':\n            continue\n        else:\n            image = Image.open(os.path.join(dirname, filename)).convert(\"L\")\n            images.append(np.asarray(image))\n            images_shape.append(np.array(np.asarray(image).shape))\nimages_shape = np.array(images_shape)\nmedian_image_height = np.int(np.median(images_shape[:,0]))\nmedian_image_width = np.int(np.median(images_shape[:,1]))\n\n\nimages = [cv2.resize(img,(median_image_height,median_image_width)) for img in images]","1edaf05c":"plt.figure(figsize=(18,15))\nfor i in range(0,6):\n    img = images[i]\n    img[img<180]=0\n    img[img>=180] = 255\n    img = cv2.dilate(img,np.ones((3,3)))\n    img = cv2.dilate(img,np.ones((3,3)))\n    img = cv2.erode(img,np.ones((3,3)))\n\n    circles = cv2.HoughCircles(img,method=cv2.HOUGH_GRADIENT,dp=2,minDist=15,\n                               param1=90,param2=3.1,minRadius=1,maxRadius=7)\n\n    circles = circles.astype(np.int)\n    rgb = cv2.cvtColor(images[i], cv2.COLOR_GRAY2RGB)\n    plt.subplot(2,3,i+1)\n    for (x,y,r) in circles[0]:\n        cv2.circle(rgb,(x,y),r,(255,0,0),2)\n    plt.title(f'Vertices Detected {len(circles[0])}')\n\n    plt.imshow(rgb)","0fa07535":"plt.figure(figsize=(18,15))\n\nfor i in range(0,6):\n    img = images[i]\n    img = cv2.dilate(img,np.ones((3,3)))\n    img = cv2.dilate(img,np.ones((3,3)))\n    img = cv2.erode(img,np.ones((3,3)))\n\n    circles = cv2.HoughCircles(img,method=cv2.HOUGH_GRADIENT,dp=2,minDist=15,\n                               param1=90,param2=3.1,minRadius=1,maxRadius=7)\n\n    circles = circles.astype(np.int)\n    circless = cv2.cvtColor(images[i], cv2.COLOR_GRAY2RGB)\n    plt.subplot(2,3,i+1)\n    for (x,y,r) in circles[0]:\n        cv2.circle(circless,(x,y),9,(255,255,255),-1)\n    \n    ####\n    img = circless.copy()\n    img = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)\n    img = 255-img\n    ctrs , _ = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    plt.subplot(2,3,i+1)\n\n    rgb = cv2.cvtColor(images[i],cv2.COLOR_GRAY2RGB)\n    cv2.drawContours(rgb,ctrs,-1,(255,0,0),2)\n    \n    plt.title(f'Edges Detected {len(ctrs)}')\n    plt.imshow(rgb)","d0ec259b":"<a id=\"1.1\"><\/a>\n<h1 style=\"background-color:orange;font-family:newtimeroman;font-size:300%;text-align:center;border-radius: 15px 50px;\">Edge Detection<\/h1>","b1c50e5d":"<a id=\"1.1\"><\/a>\n<h1 style=\"background-color:orange;font-family:newtimeroman;font-size:300%;text-align:center;border-radius: 15px 50px;\">Vertex Detection<\/h1>"}}