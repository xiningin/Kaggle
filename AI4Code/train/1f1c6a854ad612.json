{"cell_type":{"c1c7c628":"code","fdaaf5cc":"code","15db5528":"code","35584417":"code","24e2d95d":"code","78dbf86f":"code","56b01c67":"code","3fdb871d":"code","43df5193":"code","6360e4f8":"code","58c43671":"code","e314cc69":"code","638c77cb":"code","5be669cd":"code","a3e9d402":"code","5b30d04e":"code","ef2ad037":"code","1c716de9":"code","6f81ddc2":"code","8d990e2b":"code","5893af61":"code","fba370e4":"code","33b369c0":"code","2b3d2bf4":"code","94c68a40":"code","98b796fc":"code","b1bdefaa":"code","def976de":"code","0283b907":"code","947cff04":"code","e3ffade7":"code","b27f3844":"code","22ee3ebf":"code","35664d6c":"code","1ddbb551":"code","0fd58af7":"code","871353f2":"code","499e0699":"code","f44b0d89":"code","0b92a33f":"code","6fb9a177":"code","4b6ed1dc":"code","3573a085":"code","85dc5142":"code","2c26b9f3":"code","8666ce66":"code","655e5121":"code","a062cbf7":"code","f175ce11":"code","75754be8":"code","190b0df0":"code","29277b20":"code","49575060":"code","c22cc2c0":"code","59bab4c8":"code","4f256762":"code","d2a37b20":"code","46db7ac2":"code","793483b5":"code","494d8ada":"code","cc01c8d1":"code","801a22f8":"code","bb0a38d6":"code","fe1ddf94":"code","da674494":"code","a2989ded":"code","d50706ee":"code","a625edff":"code","d0aaec38":"code","5f869409":"code","faf1cd55":"code","5c84d4bb":"code","843efd8c":"code","7cd4cf95":"code","944c7132":"code","003ceec8":"code","3de9a07d":"code","0ffd1d9e":"code","785761eb":"code","17f58232":"code","e94239d6":"code","c0cace5c":"markdown","c1ad0b86":"markdown","7ef6b518":"markdown","df3f8adc":"markdown","e9e164d5":"markdown","339dc9f4":"markdown","1881c4b3":"markdown","76a18dba":"markdown","36ac2833":"markdown","8d0bc769":"markdown","2271430b":"markdown","1075bac2":"markdown","32fc676f":"markdown","4ed10313":"markdown","414d72fe":"markdown","ffcca0ef":"markdown","37db0481":"markdown","743be657":"markdown","634323d4":"markdown","2116c3ec":"markdown","24508a3c":"markdown","a3b97788":"markdown","7af08b93":"markdown","53ec19ef":"markdown","aff4116f":"markdown","0cb4ba45":"markdown"},"source":{"c1c7c628":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport fbprophet\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdaaf5cc":"## Single cell for data loading and pre-processing. Consolidating all relevant steps from the notebook below.\n\n# Step 1 - loading data sets\ndf_pgen1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_psense1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\n\n# Step 2 - correcting date_time format\ndf_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_psense1['DATE_TIME'] = pd.to_datetime(df_psense1['DATE_TIME'],format = '%Y-%m-%d %H:%M')\n\n# Step 3 - splitting date and time\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\n\ndf_psense1['DATE'] = df_psense1['DATE_TIME'].apply(lambda x:x.date())\ndf_psense1['TIME'] = df_psense1['DATE_TIME'].apply(lambda x:x.time())\n\n# Step 4 - correcting data_time format for the DATE column\ndf_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_psense1['DATE'] = pd.to_datetime(df_psense1['DATE'],format = '%Y-%m-%d')\n\n# Step 5 - splitting hour and minutes\ndf_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute\n\ndf_psense1['HOUR'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.hour\ndf_psense1['MINUTES'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.minute","15db5528":"df_pgen1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_psense1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')","35584417":"df_pgen1.head()","24e2d95d":"df_psense1.head(50)","78dbf86f":"df_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'],format = '%d-%m-%Y %H:%M')\ndf_psense1['DATE_TIME'] = pd.to_datetime(df_psense1['DATE_TIME'],format = '%Y-%m-%d %H:%M')","56b01c67":"df_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\n\ndf_psense1['DATE'] = df_psense1['DATE_TIME'].apply(lambda x:x.date())\ndf_psense1['TIME'] = df_psense1['DATE_TIME'].apply(lambda x:x.time())","3fdb871d":"df_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_psense1['DATE'] = pd.to_datetime(df_psense1['DATE'],format = '%Y-%m-%d')","43df5193":"df_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute\n\ndf_psense1['HOUR'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.hour\ndf_psense1['MINUTES'] = pd.to_datetime(df_psense1['TIME'],format='%H:%M:%S').dt.minute","6360e4f8":"import matplotlib.pyplot as plt","58c43671":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.AMBIENT_TEMPERATURE.rolling(window=20).mean(),\n        label='Ambient'\n       )\n\nax.plot(df_psense1.DATE_TIME,\n        df_psense1.MODULE_TEMPERATURE.rolling(window=20).mean(),\n        label='Module'\n       )\n\nax.plot(df_psense1.DATE_TIME,\n        (df_psense1.MODULE_TEMPERATURE-df_psense1.AMBIENT_TEMPERATURE).rolling(window=20).mean(),\n        label='Difference'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Ambient Tempreture and Module Tempreture over 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Tempreture')\nplt.show()","e314cc69":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1.AMBIENT_TEMPERATURE,\n        df_psense1.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='Module Temperature (centigrade)')\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Ambient Tempreture vs. Module Tempreture')\nplt.xlabel('Ambient Tempreture')\nplt.ylabel('Module Tempreture')\nplt.show()","638c77cb":"dates = df_psense1['DATE'].unique()","5be669cd":"dates","a3e9d402":"data = df_psense1[df_psense1['DATE']=='2020-05-15T00:00:00.000000000']","5b30d04e":"data","ef2ad037":"dates = df_psense1['DATE'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nfor date in dates:\n    df_data = df_psense1[df_psense1['DATE']==date]#[df_psense1['IRRADIATION']>0]\n\n    ax.plot(df_data.AMBIENT_TEMPERATURE,\n            df_data.MODULE_TEMPERATURE,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Module Tempreture vs. Ambient Tempreture')\nplt.xlabel('Ambient Tempreture')\nplt.ylabel('Module Tempreture')\nplt.show()","1c716de9":"df_data = df_psense1[df_psense1['DATE']=='2020-05-23T00:00:00.000000000']\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n#df_data = df_psense1[df_psense1['DATE']==date]#[df_psense1['IRRADIATION']>0]\n\ndf_data_irr_1 = df_data[(df_data['IRRADIATION']>0) & (df_data['IRRADIATION']<=0.5)]\ndf_data_irr_2 = df_data[(df_data['IRRADIATION']>0.5) & (df_data['IRRADIATION']<=1)]\ndf_data_irr_3 = df_data[df_data['IRRADIATION']>1]\ndf_data_noirr = df_data[df_data['IRRADIATION']==0]\n\nax.plot(df_data_irr_1.AMBIENT_TEMPERATURE,\n        df_data_irr_1.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='Irradiation_1'\n       )\n\nax.plot(df_data_irr_2.AMBIENT_TEMPERATURE,\n        df_data_irr_2.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='Irradiation_2'\n       )\n\nax.plot(df_data_irr_3.AMBIENT_TEMPERATURE,\n        df_data_irr_3.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='Irradiation_3'\n       )\n\nax.plot(df_data_noirr.AMBIENT_TEMPERATURE,\n        df_data_noirr.MODULE_TEMPERATURE,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='No Irradiation'\n       )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Module Tempreture vs. Ambient Tempreture')\nplt.xlabel('Ambient Tempreture')\nplt.ylabel('Module Tempreture')\nplt.show()","6f81ddc2":"df_data","8d990e2b":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1['IRRADIATION'],\n        df_psense1['MODULE_TEMPERATURE'],\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='module temperature')\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Irradiation vs. Module Tempreture')\nplt.xlabel('Irradiation')\nplt.ylabel('Module Tempreture')\nplt.show()","5893af61":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(df_psense1['IRRADIATION'],\n        df_psense1['MODULE_TEMPERATURE']-df_psense1['AMBIENT_TEMPERATURE'],\n        marker='o',\n        linestyle='',\n        alpha=.5, #transparency\n        ms=10, #size of the dot\n        label='temperature difference (Module - Ambient)')\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Irradiation vs. Tempreture Difference')\nplt.xlabel('Irradiation')\nplt.ylabel('Tempreture')\nplt.show()","fba370e4":"temp = df_pgen1.groupby(['SOURCE_KEY','DATE']).agg(DAILY_YIELD = ('DAILY_YIELD',max))","33b369c0":"temp.head(50)","2b3d2bf4":"inv_summary = df_pgen1.groupby(['SOURCE_KEY','DATE']).agg(DAILY_YIELD = ('DAILY_YIELD',max),INV = ('SOURCE_KEY', max))","94c68a40":"import seaborn as sns\nsns.set(style=\"ticks\")\n\nf, ax = plt.subplots(figsize=(10, 12))\n\nsns.boxplot(x=\"DAILY_YIELD\", y=\"INV\", data=inv_summary,\n            whis=[0, 100], palette=\"vlag\")\n\n\n# Tweak the visual presentation\n#ax.xaxis.grid(True)\nax.yaxis.grid(True)\nax.grid()\nax.margins(0.01)\nax.set(ylabel=\"Inverters\")\nsns.despine(trim=True, left=True)","98b796fc":"df_pgen1.head()","b1bdefaa":"df_pgen1.head()","def976de":"df_psense1.head()","0283b907":"## join the two dataframes - df_pgen1 and df_psense1\n\nresult_left = pd.merge(df_pgen1,df_psense1, on='DATE_TIME',how='left') #left, right, outer, inner","947cff04":"result_right = pd.merge(df_pgen1,df_psense1, on='DATE_TIME',how='right') #left, right, outer, inner","e3ffade7":"result_inner = pd.merge(df_pgen1,df_psense1, on='DATE_TIME',how='inner') #left, right, outer, inner","b27f3844":"result_inner.shape","22ee3ebf":"result_left['AMBIENT_TEMPERATURE'].isnull().value_counts()","35664d6c":"result_left['DC_POWER'].isnull().value_counts()","1ddbb551":"result_left.shape","0fd58af7":"df_pgen1.shape","871353f2":"df_psense1.shape","499e0699":"3182*22","f44b0d89":"result_left.head()","0b92a33f":"result_right.head()","6fb9a177":"result_right.shape","4b6ed1dc":"result_right['DC_POWER'].isnull().value_counts()","3573a085":"result_inner['DC_POWER'].isnull().value_counts()","85dc5142":"result_inner['AMBIENT_TEMPERATURE'].isnull().value_counts()","2c26b9f3":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_left.IRRADIATION,\n        result_left.DC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='DC POWER')\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Irradiation')\nplt.xlabel('Irradiation')\nplt.ylabel('DC Power')\nplt.show()","8666ce66":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nax.plot(result_left.MODULE_TEMPERATURE,\n        result_left.DC_POWER,\n        marker='o',\n        linestyle='',\n        alpha=.5,\n        ms=10,\n        label='DC POWER')\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Temperature')\nplt.xlabel('Temperature')\nplt.ylabel('DC Power')\nplt.show()","655e5121":"dates = result_left['DATE_x'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\n\nfor date in dates:\n    data = result_left[(result_left['DATE_x']==date)&(result_left['IRRADIATION']>0)]\n\n    ax.plot(data.MODULE_TEMPERATURE,\n            data.DC_POWER,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Module Tempreture')\nplt.xlabel('Module Tempreture')\nplt.ylabel('DC Power')\nplt.show()","a062cbf7":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\ndate = dates[4]\ninverters = result_left['SOURCE_KEY_x'].unique()\n\nfor inverter in inverters:\n\n    data = result_left[(result_left['DATE_x']==date)&(result_left['SOURCE_KEY_x']==inverter)&(result_left['IRRADIATION']>0.1)]\n\n    ax.plot(data.MODULE_TEMPERATURE,\n                data.DC_POWER,\n                marker='o',\n                linestyle='',\n                alpha=.5,\n                ms=10,\n                label=inverter\n               )\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('DC Power vs. Module Temperature')\nplt.xlabel('Module Temperature')\nplt.ylabel('DC Power')\nplt.show()","f175ce11":"result_left['IRRADIATION'] = result_left['IRRADIATION'].fillna(0)\nresult_left['AMBIENT_TEMPERATURE'] = result_left['AMBIENT_TEMPERATURE'].fillna(0)\nresult_left['MODULE_TEMPERATURE'] = result_left['MODULE_TEMPERATURE'].fillna(0)\n\nX = result_left.iloc[:, 15:16].values #Irradiation\ny = result_left.iloc[:, 3].values #DC_Power","75754be8":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","190b0df0":"# Fitting Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\n\nlin_reg.fit(X_train, y_train)","29277b20":"# Let's predict!\ny_pred = lin_reg.predict(X_test)","49575060":"lin_reg.coef_","c22cc2c0":"# Lets look at our prediction curve vs. our data\n\nplt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","59bab4c8":"# How close or far are we? Lets Compare.\n\ncompare_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ncompare_df.head(10)","4f256762":"from sklearn import metrics\nimport numpy as np\n\nprint(\"Train Set Accuracy\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_train, lin_reg.predict(X_train)))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, lin_reg.predict(X_train)))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, lin_reg.predict(X_train))))\nprint('---------------------------')\nprint(\"Test Set Accuracy\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","d2a37b20":"result_left['DC_POWER'].mean()","46db7ac2":"600\/3147*100","793483b5":"X = result_left[['IRRADIATION','MODULE_TEMPERATURE']]\ny = result_left['DC_POWER']","494d8ada":"# Test-train split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","cc01c8d1":"# Fitting the model\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)","801a22f8":"coeff_df = pd.DataFrame(lin_reg.coef_,X.columns,columns = ['Coefficients'])\ncoeff_df","bb0a38d6":"# Predict!\n\ny_pred = lin_reg.predict(X_test)","fe1ddf94":"# Compare\n\ncompare_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ncompare_df.head(10)","da674494":"# Validate\n\nprint(\"Train Set Accuracy\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_train, lin_reg.predict(X_train)))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_train, lin_reg.predict(X_train)))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, lin_reg.predict(X_train))))\nprint('---------------------------')\nprint(\"Test Set Accuracy\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","a2989ded":"# How would you predict one value?\n\nlin_reg.predict([[0.4,50]]) #0.4 irradiation and 50 degrees of module temperature","d50706ee":"## Create a day-wise summary - \n\nday_summary = df_psense1.groupby('DATE').agg(TOTAL_IRRADIANCE = ('IRRADIATION', sum),\n                                         DATE = ('DATE',max)\n                                        )","a625edff":"day_summary","d0aaec38":"import fbprophet","5f869409":"# Prophet requires columns ds (Date) and y (value)\nday_summary = day_summary.rename(columns={'DATE': 'ds', 'TOTAL_IRRADIANCE': 'y'})","faf1cd55":"day_summary","5c84d4bb":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.25) # the parameter defines how tightly you want to fit your model\n\ngm_prophet.fit(day_summary)","843efd8c":"# Make a future dataframe for 1 month\ngm_forecast = gm_prophet.make_future_dataframe(periods=90, freq='D')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)","7cd4cf95":"gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'Irradiation')\nplt.title('Irradiation Prediction')","944c7132":"sense1_renamed = df_psense1.rename(columns={'DATE_TIME':'ds', 'IRRADIATION':'y'})","003ceec8":"sense1_renamed","3de9a07d":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.25) # the parameter defines how tightly you want to fit your model\n\ngm_prophet.fit(sense1_renamed)","0ffd1d9e":"# Make a future dataframe for 4 days\ngm_forecast = gm_prophet.make_future_dataframe(periods=96, freq='H')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)","785761eb":"gm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'Irradiation')\nplt.title('Irradiation Prediction')","17f58232":"# Make the prophet model and fit on the data\ngm_prophet = fbprophet.Prophet(changepoint_prior_scale=0.5) # the parameter defines how tightly you want to fit your model\n\ngm_prophet.fit(sense1_renamed)","e94239d6":"# Make a future dataframe for 4 days\ngm_forecast = gm_prophet.make_future_dataframe(periods=96, freq='H')\n\n# Make predictions\ngm_forecast = gm_prophet.predict(gm_forecast)\n\ngm_prophet.plot(gm_forecast, xlabel = 'Date', ylabel = 'Irradiation')\nplt.title('Irradiation Prediction')","c0cace5c":"#### Scatter Plot","c1ad0b86":"### Data integration - `merge`\n\n### Why?\n* What is the impact of temperature on power generation?\n* How is irradiation related to power generation?\n\nLeft, right, inner, and full join\n\n![image.png](attachment:image.png)","7ef6b518":"What will we do today?\n\n1. Introduction to machine learning\n2. Start using ScikitLearn for linear regression - univariate and multivariate","df3f8adc":"## Visualizing Data","e9e164d5":"## What will we do today?\n\n* Visualization - line, scatter, bar, \n* Discovering corelation - dependent and independent variables\n* Grouping rows\n* Data integration - joining two dataframes","339dc9f4":"1. Overfitted\n2. Underfitted","1881c4b3":"### Lets see if we can find corelation between other variables.","76a18dba":"#### How does module temperature vary as the ambient temperature changes?","36ac2833":"#### Let's color the scatter by date","8d0bc769":"## Split the Hour and Minutes for easier analysis","2271430b":"### Let's start again. This time with two variables!","1075bac2":"----\n## Time Series Analysis\n\n### Predict the value of irradiation","32fc676f":"## Convert the DATE_TIME column to the datetime format","4ed10313":"Trends for change in irradiation - \n1. Time of the day\n2. Month of the year, season","414d72fe":"## What have we covered till now?\n\n* How to load data?\n* How to pre-process data?\n* How to select specific columns?\n* How to select specific rows? - based on row index, based on conditions\n* How to calculate summary statistics on selected rows\/columns? - max, min, mean, value_counts, unique, etc.\n* How to discover missing data?","ffcca0ef":"* left_set = {1,2,3,4,5}\n* right_set = {4,5,6,7,8}\n\n* inner_join = {4,5}\n* left_join = {1,2,3,4,5}\n* right_join = {4,5,6,7,8}\n* full_outer_join = {1,2,3,4,5,6,7,8}","37db0481":"### How about coloring it by the inverter?\n### How about splitting the data for a particular date?\n### We all know that module vs. ambient temperature is showing up in two trends (lines) - can you prove that the bottom trend is at night and the top trend is during day time.","743be657":"## Correct the format of the DATE column","634323d4":"## Split the Date and Time","2116c3ec":"## Load the data","24508a3c":"Plot \n* AC_POWER on the y axis\n* DC_POWER on the x axis\n\nColor of the scatter plot - by the inverter\n","a3b97788":"#### It's probably the difference in temperature that matters?","7af08b93":"Covariance vs. Causality!","53ec19ef":"### Example of covariance\nmean house price vs. average size of a mall (for a locality)","aff4116f":"What we covered today? (August 25th)\n\n1. How to integrate data or merge dataframes\n2. Different types of joins\/merges\n3. Answer questions that needed data across the dataframes\n4. How to tell a story - problem, possible solution, characters, setting, plot","0cb4ba45":"### Summarizing data by using `groupby`"}}