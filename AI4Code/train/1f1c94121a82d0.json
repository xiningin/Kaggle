{"cell_type":{"399a1d19":"code","bcf8d943":"code","ab7547f2":"code","350cc172":"code","d9e4f692":"code","f558f433":"markdown","29bcfa64":"markdown","b663a577":"markdown","1f653ab9":"markdown"},"source":{"399a1d19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcf8d943":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('\/kaggle\/input\/drugs-a-b-c-x-y-for-decision-trees\/drug200.csv')\nprint(df.info())\nprint(df.describe().T)\n\ncolumns = df.columns\n\ngrouped_df = df.groupby(['Drug']).agg('count')\nplt.bar(grouped_df.index, height = grouped_df['Age'])\nplt.xlabel('Drug')\nplt.ylabel('Count')\nplt.show()","ab7547f2":"from sklearn.preprocessing import LabelEncoder\n\nsex_enc = LabelEncoder()\nsex_enc.fit(['F','M'])\ndf['Sex'] = sex_enc.transform(df['Sex'])\n\nbp_enc = LabelEncoder()\nbp_enc.fit(['LOW','NORMAL','HIGH'])\ndf['BP'] = bp_enc.transform(df['BP'])\n\ncho_enc = LabelEncoder()\ncho_enc.fit(['LOW','NORMAL','HIGH'])\ndf['Cholesterol'] = cho_enc.transform(df['Cholesterol'])\n\ndrug_enc = LabelEncoder()\ndrug_enc.fit(['drugA','drugB','drugC','drugX','drugY'])\ndf['Drug'] = drug_enc.transform(df['Drug'])","350cc172":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\n\nx_train, x_test, y_train, y_test = train_test_split(df.drop(['Drug'], axis=1), df['Drug'], train_size = 0.7, random_state=42)\n\ndt_fit = DecisionTreeClassifier(criterion = 'gini', min_samples_leaf = 1,max_depth = 3, random_state=42, min_samples_split=2)\ndt_fit.fit(x_train, y_train)\ncrosstab_train = pd.crosstab(y_train, dt_fit.predict(x_train), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_train = round(accuracy_score(y_train, dt_fit.predict(x_train)),3)\nclassification_train = classification_report(y_train, dt_fit.predict(x_train))\n\ncrosstab_test = pd.crosstab(y_test, dt_fit.predict(x_test), rownames = ['Actual'], colnames = ['Predicted'])\naccuracy_test = round(accuracy_score(y_test, dt_fit.predict(x_test)),3)\nclassification_test = classification_report(y_test, dt_fit.predict(x_test))\n\nprint('Decision Tree - Training Crosstab \\n\\n', crosstab_train)\nprint('Decision Tree - Training Accuracy:', accuracy_train)\nprint('Decision Tree - Training Classification Report \\n\\n', classification_train)\n\nprint('\\n\\n Decision Tree - Test Crosstab \\n\\n', crosstab_test)\nprint('Decision Tree - Test Accuracy:', accuracy_test)\nprint('Decision Tree - test Classification \\n\\n', classification_test)","d9e4f692":"dummy_array = np.empty((6,10))\ndt_wttune = pd.DataFrame(dummy_array)\n\ndt_wttune.columns = ['zero_wght','one_wght','tr_accuracy','tst_accuracy','prec_zero','prec_one','prec_ovll','recl_zero','recl_one','recl_ovll']\nzero_clwghts = [0.01,0.1,0.2,0.3,0.4,0.5]\n\nfor i in range(len(zero_clwghts)):\n    clwght = {0:zero_clwghts[i],1:1.0-zero_clwghts[i]}\n    dt_fit = DecisionTreeClassifier(criterion = 'gini', max_depth=5, min_samples_split=2, min_samples_leaf=1, random_state=42, class_weight=clwght)\n    dt_fit.fit(x_train, y_train)\n    dt_wttune.loc[i,'zero_wght'] = clwght[0]\n    dt_wttune.loc[i,'one_wght'] = clwght[1]\n    dt_wttune.loc[i,'tr_accuracy'] = round(accuracy_score(y_train, dt_fit.predict(x_train)),3)\n    clf_sp = classification_report(y_test, dt_fit.predict(x_test)).split()\n    dt_wttune.loc[i,'prec_zero'] = float(clf_sp[5])\n    dt_wttune.loc[i,'prec_one'] = float(clf_sp[10])\n    dt_wttune.loc[i,'prec_ovll'] = float(clf_sp[17])\n    dt_wttune.loc[i,'recl_zero'] = float(clf_sp[6])\n    dt_wttune.loc[i,'recl_one'] = float(clf_sp[11])\n    dt_wttune.loc[i,'recl_ovll'] = float(clf_sp[18])\n    print('\\n Class Weights',clwght, 'Train Accuracy:',round(accuracy_score(y_train, dt_fit.predict(x_train),3)), 'Test Accuracy:',round(accuracy_score(y_test, dt_fit.predict(x_test))),3)\n    print('Test Confusion Matrix \\n\\n', pd.crosstab(y_test, dt_fit.predict(x_test), rownames = ['Actual'], colnames = ['Predicted']))\n\nmodel_ranks = pd.Series(dt_fit.feature_importances_, index=x_train.columns, name='Importance').sort_values(ascending=False, inplace=False)\nmodel_ranks.index.name = 'Variables'\ntop_features = model_ranks.iloc[:5].sort_values(ascending=True, inplace=False)\nprint('\\n\\n',top_features,'\\n\\n')\nplt.figure(figsize=(20,10))\nax = top_features.plot(kind='barh')\nax.set_title('Variable Importance Plot')\nax.set_xlabel('Mean Decrease in Variance')\nax.set_yticklabels(top_features.index, fontsize=13)","f558f433":"Initial Decision Tree Classifier train and test results.","29bcfa64":"Weight optimisation improves the results to 100% testing accuracy. The most important variable is Na_to_K - see Variable Importance Plot for full scores.","b663a577":"Encoding Categorical and Object variables as integers using LabelEncoder. ","1f653ab9":"Initial investigation into the data with a distribution plot of Drug administered."}}