{"cell_type":{"381dde3c":"code","ef7d619a":"code","62b6ea7f":"code","d10f1e17":"code","d36ad7cb":"code","5f03c8db":"code","bc60e801":"code","1e1520f7":"code","b97fc26a":"code","140c74ee":"code","1f744c12":"code","98284f78":"code","18a7c03f":"code","eb7e2ccb":"code","0c2cef33":"code","92122138":"code","a29d1d1c":"code","d0f02c24":"code","d693ffbe":"code","43acd6c1":"code","d8d98d5e":"code","477a8afb":"code","9946105e":"code","d911c03d":"code","cb85f6bf":"code","5c3efc76":"code","009b9c14":"code","494000b2":"code","b0e4063d":"code","636f4c3e":"code","a6c40d7e":"code","0667f15a":"code","dc13a1e4":"code","a3700baf":"code","b3f6b896":"code","2b12bc13":"code","e404cd03":"code","f5aa3147":"code","6ef3f97e":"code","7f6d832e":"code","12415395":"code","2832f6f3":"code","b8a382d2":"code","81856e4d":"code","b7b58654":"code","3747c6cc":"code","92a9c24d":"code","aeada2c6":"code","f50690eb":"code","83016198":"code","28a33826":"code","b41413d4":"code","89de6673":"code","426f75f6":"code","84bcc7c9":"code","cbd0e45b":"code","41390a8c":"code","8a495875":"code","35df2d5d":"code","1c105086":"code","3cf174aa":"code","0eb43ead":"code","a7f8f6ea":"code","af5b7640":"code","8363c5ba":"code","46043c7e":"code","183888b2":"code","d907455a":"code","90107f2b":"code","b0684053":"code","b6700c62":"code","3a160ebe":"code","1c8dc277":"code","936bfd85":"code","da46cb19":"code","e14cf755":"code","f4477e21":"code","9ac4686d":"code","4c71168c":"code","0988df56":"code","0c6d1f28":"code","b98aa20b":"code","743ec125":"code","e5735020":"code","918da24e":"markdown","17a4e4cb":"markdown","3551e85b":"markdown","63d7d8d3":"markdown","311e224f":"markdown","b72e26c9":"markdown","64153df8":"markdown","4ee06ab7":"markdown","44a51c96":"markdown","0fb324dd":"markdown","9ed7e9ab":"markdown","1fe735f8":"markdown","f073c002":"markdown","e23eda5a":"markdown","53e52611":"markdown","1c5052eb":"markdown","f919390e":"markdown","fbb0f332":"markdown","a71fca60":"markdown"},"source":{"381dde3c":"import math \nimport calendar\nimport pandas as pd\nimport datetime\n\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# plotly\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.express as px","ef7d619a":"##TRAFFIC DATASETS ###\n\nuk_traffic = pd.read_csv('..\/input\/uk-traffic-data\/dft_traffic_counts_aadf.csv')","62b6ea7f":"#size of the df\nuk_traffic.shape","d10f1e17":"#check for missing values\nuk_traffic.isnull().sum()","d36ad7cb":"##lets drop the two columns with the most missing values\nuk_traffic = uk_traffic.drop(['start_junction_road_name', 'end_junction_road_name'], axis=1)","5f03c8db":"uk_traffic.dropna(inplace = True)","bc60e801":"uk_traffic.head()","1e1520f7":"uk_traffic['AllVehicles'] = uk_traffic['all_hgvs'] + uk_traffic['all_motor_vehicles'] + uk_traffic['pedal_cycles']","b97fc26a":"###calculate miles driven, the miles driven per year by a vehicle == Volume of traffic for that particular vehicle on a road\n\nvehicles = ['pedal_cycles', 'two_wheeled_motor_vehicles', 'cars_and_taxis', 'buses_and_coaches', 'lgvs', \n            'hgvs_2_rigid_axle', 'hgvs_3_rigid_axle', \n            'hgvs_3_or_4_articulated_axle', 'hgvs_4_or_more_rigid_axle', \n            'hgvs_5_articulated_axle', 'hgvs_6_articulated_axle', 'all_hgvs', 'all_motor_vehicles', 'AllVehicles']","140c74ee":"for vehicle in vehicles:\n    uk_traffic[vehicle + 'miles_driven'] = uk_traffic[vehicle] * uk_traffic['link_length_miles'] * 365","1f744c12":"uk_traffic['road_category'].value_counts()","98284f78":"###Note\n\n##the AADF values for MB and MCU are Zero, this means they are NOT USEFUL for our traffic analyses\n\n## This means will drop the both of them","18a7c03f":"uk_traffic = uk_traffic[(uk_traffic['road_category'] != 'MCU') & (uk_traffic['road_category'] != 'MB')]","eb7e2ccb":"uk_traffic['road_type'].value_counts()","0c2cef33":"rd_category = uk_traffic.road_category.unique().tolist()\nprint(rd_category)","92122138":"road_category_description = ['Class A Principal Road', 'M or Class A Trunk Motorway', 'Class A Trunk Road', \n                             'M or Class A Principal Motorway']","a29d1d1c":"for road in range(len(rd_category)):\n    uk_traffic.loc[uk_traffic['road_category'] == rd_category[road], 'road_category'] = road_category_description[road]","d0f02c24":"uk_traffic['northing'].max()","d693ffbe":"uk_traffic.shape","43acd6c1":"uk_traffic = uk_traffic.loc[uk_traffic['northing']!=uk_traffic['northing'].max()]","d8d98d5e":"uk_gpd = uk_traffic.copy()","477a8afb":"#uk 2018 road network map\ngb_shape = gpd.read_file('..\/input\/shape-file\/2018-MRDB-minimal.shp')","9946105e":"sns.set_context('talk')\nax = gb_shape.plot(figsize=(25,15), color='crimson')\nax.set(title='Road Networks in UK, 2018')\nax.set_axis_off()","d911c03d":"#convert the uk_traffic (uk_gpd) df to GeopandasDf\npoints = uk_gpd.apply(lambda row: Point(row.easting, row.northing), axis=1)\nuk_gpd = gpd.GeoDataFrame(uk_gpd, geometry=points)","cb85f6bf":"#lets plot points where AADF were measured based on UK regions\nax = gb_shape.plot(figsize=(30,15), color='black', linewidth=0.75)\nuk_gpd.plot(column='region_name', ax=ax, markersize=60, legend = True, cmap='hsv_r', edgecolor='white')\nleg = ax.get_legend()\nleg.set_bbox_to_anchor((1.1,0.5))\nleg.set_title('Regions')\nleg.set_frame_on(False)\nax.set_axis_off()\nax.set_title('Road Networks (points) where AADF measurement were taken between 2000 - 2018 in UK', fontsize=16, pad=10)","5c3efc76":"####To start with let extract top 10 busiest roads\n##sort starting with the busiest road based on its average vehicle mile per year\n\nrd_agg = uk_traffic.groupby(['year', \n                             'road_name']).AllVehiclesmiles_driven.agg(['count', \n                                                                        'sum', 'mean']).sort_values(by = 'mean', ascending = False)\nrd_agg.reset_index(inplace = True)","009b9c14":"rd_agg_100 = rd_agg[:100].copy()","494000b2":"#take just the first 10 roads\nprint(rd_agg_100['road_name'].unique().tolist())","b0e4063d":"#extract top 10 busiest Highway authority based on average vehicle mile per year\n\nrd_agg = uk_traffic.groupby(['year', 'local_authority_name']).AllVehiclesmiles_driven.agg(['count', 'sum', 'mean']).sort_values(by = 'sum', ascending = False)\nrd_agg.reset_index(inplace = True)","636f4c3e":"rd_agg_100 = rd_agg[:140].copy()\n#take just the first 10 highway authority\nprint(rd_agg_100['local_authority_name'].unique().tolist())","a6c40d7e":"##### EXTRACT VEHICLE TRAFFIC FLOW  BASED ON DIFFERENT CRITERIAS WRITTEN ABOVE #####\n#### NOTE: The Traffic flow \/ trends are based on the volume of traffic i.e. miles driven by each vehicle per year ####\n\ndef vehicles_traffic_flow(df, vehicle, column):\n    \n    if column == 'road_name':\n        loc_agg = uk_traffic.groupby(['year', column])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n        loc_names = ['A1(M)', 'M25', 'A1(T)', 'M26', 'M5', 'M1', 'M40', 'M3', 'M6', 'M23']\n    elif column == 'local_authority_name':\n        loc_agg = uk_traffic.groupby(['year', column])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n        loc_names = ['Kent', 'Hampshire', 'Surrey', 'Essex', 'Hertfordshire', \n                     'Lancashire', 'Staffordshire', 'Warwickshire', 'Northamptonshire', 'Cheshire']\n    else:\n        loc_agg = df.groupby(['year', column])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n        loc_names = loc_agg[column].unique().tolist()\n        \n    list_traces = []\n    colors = ['lightslategray', 'crimson', 'darkcyan', 'darkgoldenrod', 'cornsilk', 'turquoise', 'limegreen', \\\n              'darkorchid', 'palevioletred', 'forestgreen', 'silver', 'lightsteelblue']\n    for name in range(len(loc_names)):\n        name_agg = loc_agg[loc_agg[column] == loc_names[name]]\n        data_agg = go.Scatter(x = name_agg['year'], y= name_agg['mean'], mode=\"lines+markers\", name= loc_names[name], \n                              line= dict(color = colors[name], width=2.5))\n        \n        list_traces.append(data_agg)\n    if column == 'road_category':\n        context = 'on Major Road Classes in UK'\n    elif column == 'region_name':\n        context = 'in UK Regions'\n    elif column == 'road_name':\n        context = 'on the 10 Busiest Roads in UK'\n    elif column == 'local_authority_name':\n        context = 'on the 10 Busiest Highway Authorities in UK'\n    \n    if vehicle == 'pedal_cyclesmiles_driven':\n        content = 'Pedal Cycles'\n    elif vehicle == 'all_motor_vehiclesmiles_driven':\n        content = 'Motor Vehicles'\n    elif vehicle == 'all_hgvsmiles_driven':\n        content = 'Heavy Goods Vehicles (Lorries)'\n    elif vehicle == 'cars_and_taxismiles_driven':\n        content = 'Cars and Taxis'\n    elif vehicle == 'two_wheeled_motor_vehiclesmiles_driven':\n        content = 'Motor Cycles'\n    elif vehicle == 'buses_and_coachesmiles_driven':\n        content = 'Buses and Coaches'\n    elif vehicle == 'AllVehiclesmiles_driven':\n        content = 'All vehicles'\n    elif vehicle == 'lgvsmiles_driven':\n        content = 'Vans'\n    \n        \n    layout = go.Layout(title='<b> '+ content +' traffic trends ' + context + ', 2000 - 2018 <b>', width=1000, \n                       height=600, xaxis=dict(title='<b> Year <b>',titlefont=dict(size=16, color='#7f7f7f'), tickfont=dict(size=15, color='darkslateblue')), \n                       yaxis=dict(title='<b> Miles Driven per Year <b>',titlefont=dict(size=16,color='#7f7f7f'), tickfont=dict(size=15, color='darkslateblue')))\n    fig = go.Figure(data=list_traces, layout = layout)\n    fig.update_xaxes(dtick=2)\n    iplot(fig)","0667f15a":"### All Vehicles --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'AllVehiclesmiles_driven', 'region_name')","dc13a1e4":"### All heavy good vehicles --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'all_hgvsmiles_driven', 'region_name')","a3700baf":"### All motor vehicles vehicles --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'all_motor_vehiclesmiles_driven', 'region_name')","b3f6b896":"### Cars and Taxis --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'cars_and_taxismiles_driven', 'region_name')","2b12bc13":"### Motor Cycles --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'two_wheeled_motor_vehiclesmiles_driven', 'region_name')","e404cd03":"### Pedal Cycles --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'pedal_cyclesmiles_driven', 'region_name')","f5aa3147":"### Vans --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'lgvsmiles_driven', 'region_name')","6ef3f97e":"### Buses and Coaches --- UK Regions###\nvehicles_traffic_flow(uk_traffic, 'buses_and_coachesmiles_driven', 'region_name')","7f6d832e":"### All Vehicles --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'AllVehiclesmiles_driven', 'road_category')","12415395":"### All Motor Vehicles --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'all_motor_vehiclesmiles_driven', 'road_category')","2832f6f3":"### Heavy Goods Vehicles --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'all_hgvsmiles_driven', 'road_category')","b8a382d2":"### Cars and Taxis --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'cars_and_taxismiles_driven', 'road_category')","81856e4d":"### Motor Cycles --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'two_wheeled_motor_vehiclesmiles_driven', 'road_category')","b7b58654":"### Pedal Cycles --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'pedal_cyclesmiles_driven', 'road_category')","3747c6cc":"### Vans --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'lgvsmiles_driven', 'road_category')","92a9c24d":"### Buses and Coaches --- Major Road Classes###\nvehicles_traffic_flow(uk_traffic, 'buses_and_coachesmiles_driven', 'road_category')","aeada2c6":"### All Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'AllVehiclesmiles_driven', 'road_name')","f50690eb":"### All Motor Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'all_motor_vehiclesmiles_driven', 'road_name')","83016198":"### Cars and Taxis --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'cars_and_taxismiles_driven', 'road_name')","28a33826":"### Vans --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'lgvsmiles_driven', 'road_name')","b41413d4":"### Motor Cycles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'two_wheeled_motor_vehiclesmiles_driven', 'road_name')","89de6673":"### Heavy Good Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'all_hgvsmiles_driven', 'road_name')","426f75f6":"### All Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'AllVehiclesmiles_driven', 'local_authority_name')","84bcc7c9":"### Heavy Goods Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'all_hgvsmiles_driven', 'local_authority_name')","cbd0e45b":"### Motor Vehicles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'all_motor_vehiclesmiles_driven', 'local_authority_name')","41390a8c":"### Cars and Taxis --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'cars_and_taxismiles_driven', 'local_authority_name')","8a495875":"### Vans --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'lgvsmiles_driven', 'local_authority_name')","35df2d5d":"### Pedal Cycles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'pedal_cyclesmiles_driven', 'local_authority_name')","1c105086":"### Motor Cycles --- 10 busiest roads###\nvehicles_traffic_flow(uk_traffic, 'two_wheeled_motor_vehiclesmiles_driven', 'local_authority_name')","3cf174aa":"#### CALCULATE AVERAGE VOLUME OF TRAFFIC FOR EACH MAJOR ROAD CATEGORY ####\n#### AND CALCULATE AADF FOR EACH REGION IN UK; FOR 10 BUSIEST ROADS AND HIGHWAYS ####\n\ndef average_volume_traffic_aadf(df, column, color_scale):\n    \n    if column == 'road_name':\n        vol_agg = df.groupby(['year', \\\n                              column])['AllVehicles'].agg(['count', 'sum', 'mean']).sort_values(by = 'mean', ascending = False).reset_index()\n        vol_agg = vol_agg[:130].copy()\n        vol_agg.sort_values(by = 'mean', ascending = True, inplace = True)\n    elif column == 'local_authority_name':\n        vol_agg = df.groupby(['year', \\\n                              column])['AllVehicles'].agg(['count', 'sum', 'mean']).sort_values(by = 'sum', ascending = False).reset_index()\n        vol_agg = vol_agg[:130].copy()\n        vol_agg.sort_values(by = 'mean', ascending = True, inplace = True)\n    elif column == 'road_category':\n        vol_agg = df.groupby(['year', \\\n                              column])['AllVehiclesmiles_driven'].agg(['count', 'sum', 'mean']).sort_values(by = 'mean').reset_index()\n    \n    elif column == 'region_name':\n        vol_agg = df.groupby(['year', \\\n                              column])['AllVehicles'].agg(['count', 'sum', 'mean']).sort_values(by = 'mean').reset_index()\n    \n    \n    #Data Visualization\n    \n    fig = px.bar(vol_agg, x= 'mean', y= column, color='year', barmode = 'group', orientation = 'h', \n                 labels={'year':'<b> Years <b>'}, width=1000, height=700, \n                 color_continuous_scale= color_scale)\n    \n    if column == 'road_category':\n        content = 'Average Volume of Traffic for each Road Category in UK'\n        context = 'Road Category'\n        x_value = 'Volume of Traffic (Vehicle Miles for each year are stacked on top of each other)'\n    elif column == 'region_name':\n        content = 'Average number of Vehicles that traverse (all roads in) UK Regions per day'\n        context = 'Regions'\n        x_value = 'Annual Average Daily Flow (AADF for each year are stacked on top of eachother)'\n    elif column == 'road_name':\n        content = 'Average number of Vehicles that traverse 10 busiest roads in UK per day'\n        context = 'Roads'\n        x_value = 'Annual Average Daily Flow (AADF for each year are stacked on top of eachother)'\n    elif column == 'local_authority_name':\n        content = 'Average number of Vehicles that traverse 10 busiest Highway Authorities in UK per day'\n        context = 'Highway Authority'\n        x_value = 'Annual Average Daily Flow (AADF for each year are stacked on top of eachother)'\n        \n        \n    fig.update_layout(title='<b> ' + content + ', 2000 - 2018 <b>', \n                      xaxis=dict(title='<b> ' + x_value + ' <b>',titlefont=dict(size=16, color='#7f7f7f'), tickfont=dict(size=15, color='darkslateblue')), \n                      yaxis=dict(title='<b> ' + context + ' <b>',titlefont=dict(size=16,color='#7f7f7f'), tickfont=dict(size=15, color='darkslateblue'))) \n    \n    \n    iplot(fig)","0eb43ead":"#plot average volume of traffic for each year --> Major Road Category\n\naverage_volume_traffic_aadf(uk_traffic, 'road_category', px.colors.sequential.Plasma)","a7f8f6ea":"#plot AADF yearly for each Region in UK\n\naverage_volume_traffic_aadf(uk_traffic, 'region_name', px.colors.diverging.Earth)","af5b7640":"#plot AADF yearly for 10 busiest roads in UK\n\naverage_volume_traffic_aadf(uk_traffic, 'road_name', px.colors.sequential.Agsunset)","8363c5ba":"#plot AADF yearly for 10 busiest highway authority in UK\n\naverage_volume_traffic_aadf(uk_traffic, 'local_authority_name', px.colors.cyclical.Twilight)","46043c7e":"### VEHICLE TRAFFIC TRENDS AND MILES COVERED BY EACH VEHICLES BETWEEN 2000 AND 2018 ###\n\ndef vehicle_trends(df, vehicle, column, color):\n    \n    veh_agg = df.groupby(['road_category'])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n    vehyr_agg = df.groupby(['year'])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n    ##average growth rate\n    average_growth_rate = np.power(((vehyr_agg.loc[vehyr_agg.shape[0]-1, 'sum']) \\\n                                    \/ vehyr_agg.loc[0, 'sum']), 1\/vehyr_agg.shape[0]) - 1\n    \n    avg_rate = round(average_growth_rate * 100, 2)\n    avg_value = vehyr_agg['mean'].min()\n    \n    def line_plot(df, column, avg_rate, avg_value):\n        \n        if (column == 'Heavy Goods Vehicle') or (column == 'Buses and Coaches') or (column == 'Motor Cycles'):\n            y_value = 1.1\n        else:\n            y_value = 0.8\n        \n        annotations = []\n        fig = go.Figure()\n        fig.add_trace(go.Scatter(x = df['year'], y= df['mean'], mode=\"lines\", name= column + ' trend', \n                                 line= dict(color = 'rgb(67,67,67)', width=2.5)))\n        \n        annotations.append(dict(xref='paper', yref='paper', x=0.35, y=y_value, \n                                              xanchor='center', yanchor='top', \n                                              text= '<b>' + column + ' traffic trend in UK from 2000 - 2018 <b>', \n                                              font=dict(family='Arial', \n                                                        size=16, color='darkslategray'), \n                                              showarrow=False))\n        annotations.append(dict(xref='paper', x=0.25, y=avg_value,\n                                  xanchor='left', yanchor='middle',\n                                  text='Average annual growth rate {}%'.format(avg_rate),\n                                  font=dict(family='Arial',\n                                            size=15),\n                                  showarrow=False))\n        \n        fig.update_layout(xaxis=dict(title='<b> Year <b>',titlefont=dict(size=14, color='#7f7f7f'), \n                                     showline=True, showgrid=False, showticklabels=True, linecolor='rgb(204, 204, 204)', linewidth=2, \n                                     ticks='outside', tickfont=dict(family='Arial', size=14, color='rgb(82, 82, 82)')), \n                          yaxis=dict(title='<b> Miles Driven per year <b>',titlefont=dict(size=14,color='#7f7f7f'), \n                                     showgrid=False, zeroline=False, showline=True, showticklabels=True, \n                                     tickfont=dict(family='Arial', size=14, color='rgb(82, 82, 82)')), \n                          autosize=False, margin=dict(autoexpand=False, l=100, r=20, t=110), plot_bgcolor='white', \n                         annotations = annotations)\n        \n        fig.show()\n        \n        \n    def pie_plot(df, column, color):\n        \n        vehicle_labels = df.road_category.unique().tolist()\n        vehicle_values = df['sum'].values.tolist()\n        vehicle_sum = int(sum(vehicle_values))\n        def roundup(x):\n            if len(str(x)) >= 13:\n                num = str(int(math.ceil(x \/ 1000000000000.0)))\n                num = num + ' Trillion'\n            else:\n                num = str(int(math.ceil(x \/ 1000000000.0)))\n                num = num + ' Billion'\n            return num\n        vehicle_sum = roundup(vehicle_sum)\n        \n        fig = go.Figure()\n        \n        fig.add_trace(go.Pie(labels= vehicle_labels, values= vehicle_values, name=\"\", \n                             hole=.7, textinfo='label+percent', insidetextorientation='radial', marker_colors= color))\n        \n        fig.update_layout(title_text=\"<b> \" + column + \" miles covered <b>\", \n                          annotations=[dict(text= vehicle_sum + ' miles covered', x=0.5, y=0.5, font_size=18, showarrow=False)])\n        \n        fig.show()\n        \n    line_plot(vehyr_agg, column, avg_rate, avg_value)\n    pie_plot(veh_agg, column, color)","183888b2":"# Define color sets of paintings -- Plotly selections\nnight_colors = ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)',\n                'rgb(36, 55, 57)', 'rgb(6, 4, 4)']\nsunflowers_colors = ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)',\n                     'rgb(129, 180, 179)', 'rgb(124, 103, 37)']\nirises_colors = ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)',\n                 'rgb(175, 49, 35)', 'rgb(36, 73, 147)']\ncafe_colors =  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)',\n                'rgb(175, 51, 21)', 'rgb(35, 36, 21)']\nrandom_colors = ['rgb(67,67,67)', 'rgb(115,115,115)', 'rgb(49,130,189)', 'rgb(189,189,189)']","d907455a":"# motor vehicle traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'all_motor_vehiclesmiles_driven', 'Motor Vehicles', irises_colors)","90107f2b":"# All vehicles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'AllVehiclesmiles_driven', 'All Vehicles', cafe_colors)","b0684053":"# heavy goods vehicles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'all_hgvsmiles_driven', 'Heavy Goods Vehicle', night_colors)","b6700c62":"# heavy goods vehicles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'cars_and_taxismiles_driven', 'Cars and Taxis', sunflowers_colors)","3a160ebe":"# pedal cycles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'pedal_cyclesmiles_driven', 'Pedal Cycles', irises_colors)","1c8dc277":"# Buses and Coaches vehicles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'buses_and_coachesmiles_driven', 'Buses and Coaches', random_colors)","936bfd85":"# Vans traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'lgvsmiles_driven', 'Vans', irises_colors)","da46cb19":"# Motor Cycles traffic trend and miles covered btw 2000 - 2018\n\nvehicle_trends(uk_traffic, 'two_wheeled_motor_vehicles', 'Motor Cycles', cafe_colors)","e14cf755":"uk_traffic.columns","f4477e21":"def growth_rate(df, vehicle):\n    \n    vehyr_agg = df.groupby(['year'])[vehicle].agg(['count', 'sum', 'mean']).reset_index()\n    \n    #growth rate at the end of 2018\n    growth_rate_18 = round(((vehyr_agg.loc[vehyr_agg.shape[0]-1, 'sum'] \\\n                             - vehyr_agg.loc[0, 'sum']) \/ vehyr_agg.loc[0, 'sum']) * 100, 2)\n    \n    #calculating growth rate over regular time period\n    #Average annual growth rate btw 2000 - 2018\n    average_growth_rate = np.power(((vehyr_agg.loc[vehyr_agg.shape[0]-1, 'sum']) \\\n                                    \/ vehyr_agg.loc[0, 'sum']), 1\/vehyr_agg.shape[0]) - 1\n    \n    avg_rate = round(average_growth_rate * 100, 2)\n    \n    #print\n    print('Growth rate at the end of 2018:', str(growth_rate_18) + '%')\n    print('Average annual growth rate between 2000 - 2018:', str(avg_rate) + '%')\n    \n    return growth_rate_18, avg_rate","9ac4686d":"##motor vehicle growth rate\nmotor_growth_rate, motor_avg_rate = growth_rate(uk_traffic, 'all_motor_vehiclesmiles_driven')","4c71168c":"##heavy goods vehicle growth rate\nhvg_growth_rate, hvg_avg_rate = growth_rate(uk_traffic, 'all_hgvsmiles_driven')","0988df56":"##pedal cycles growth rate\npc_growth_rate, pc_avg_rate = growth_rate(uk_traffic, 'pedal_cyclesmiles_driven')","0c6d1f28":"##motor cycles growth rate\nmc_growth_rate, mc_avg_rate = growth_rate(uk_traffic, 'two_wheeled_motor_vehiclesmiles_driven')","b98aa20b":"##buses and coaches growth rate\nbus_growth_rate, bus_avg_rate = growth_rate(uk_traffic, 'buses_and_coachesmiles_driven')","743ec125":"##Light vans growth rate\nvans_growth_rate, vans_avg_rate = growth_rate(uk_traffic, 'lgvsmiles_driven')","e5735020":"##cars and taxis growth rate\ncars_growth_rate, cars_avg_rate = growth_rate(uk_traffic, 'cars_and_taxismiles_driven')","918da24e":"**Observations**\n\n\n- Light vans is growing at a faster rate than any type of vehicle in UK, with a staggaering growth of 66.22% at the end of year 2018, and an annual average growth rate of 2.71% -- the highest among all the vehicles.\n\n- On the flip side, buses, coaches and motor cycles are declining their growth rate in UK, with them having a negative growth rate at the end of 2018 and also a negative annual growth rate.\n\n- pedal cycles, cars and taxis, motor vehicles and heavy goods vehicles all have increasing growth rate from 2000 - 2018.","17a4e4cb":"### c. Vehicles traffic flow \/ trend on the 10 busiest roads in UK, from 2000 - 2018","3551e85b":"**Observations:**\n\n- Annual Average Daily Flow for each year is stacked on top of each other for each Highway Authority.\n- Hertfordshire is the busiest highway authority in UK between 2000 - 2018.","63d7d8d3":"### First, Lets start with plotting the locations where the AADF measurement\n","311e224f":"### a. Vehicles traffic flow \/ trend based on different regions in UK, from 2000 - 2018","b72e26c9":"## United Kingdom (UK) Traffic Analysis (2000 - 2018)","64153df8":"### b. Vehicles traffic flow \/ trend on Major Road Classes in UK, from 2000 - 2018","4ee06ab7":"1. What is the evolution of traffic (in terms of miles driven per year) for different types of vehicles ***(i.e. Pedal Cycles, Motor cycles, Cars and Taxis, Buses and Coaches, Vans, All motor vehicles, Heavy Goods Vehicles and All Vehicles)*** in UK, based on:\n\n**a. Different Regions of UK**\n\n\n**b. Major Road classes in UK**\n\n\n**c. Top 10 busiest roads in UK**\n\n\n**d. Top 10 busiest highway authorties in UK**\n\n\n--","44a51c96":"**Major Observations:** \n\n- Miles driven by all vehicles in different UK Regions have been growing slightly since 2000 till 2018, \n- Heavy Goods and Motor Vehicles (Cars & Taxis) have also been growing slightly from 2000 -2018.\n- Miles driven by Motor Cycles, Buses and Coaches show some flunctuating trends; Motor cycles, Buses and Coaches are more driven in London than any other regions. \n- Buses and Coaches show steady decline from 2015 - 2018 in all regions except London, where it has been flunctuating but still a little bit stable.\n- Pedal Cycles is most common in London, and have been showing steady growth, even though some flunctuations can be observed.\n- Miles driven by Light Vans also have been steadily growing in all UK Regions.","0fb324dd":"**2a. What is the average volume of traffic (in terms of miles driven by all vehicles) on each Major Road Category per year (between 2000 - 2018)?**\n\n\n\n\n**2b. What is the Annual Average Daily Flow (AADF i.e.** ***Number of vehicles that traverse a particular point in a road per day***) **for each Region in UK, for the 10 busiest Roads and highway authorities in UK (between 2000 and 2018)?**","9ed7e9ab":"**Major Observations:**\n\n- A1(M) was the busiest road between 2002 - 2005 in UK, but dropped drastically from 2006 onwards \n- A1(T) existed in UK between 2006 - 2011.\n- Miles driven by all vehicles, motor vehicles, cars and taxis and heay goods vehicles on the busiest roads have been broadly stable except for A1(M) that showed an abrupt drop in 2005.\n- Light Vans have been showing steady increase across the busiest roads except for A1(M) that has been steady declining in terms of miles driven by vehicles.\n- Miles driven by Motor Cycles have been steadily declining across all the top 10 busiest roads.","1fe735f8":"**Observations:**\n\n- Annual Average Daily Flow (AADF) for each year is stacked on top of each other for each Region in UK.\n- London is the most busiest region in UK in terms of volume of traffic.\n- Scotland has the least volume of traffic in UK.","f073c002":"**Major Observations:**\n\n- Cheshire highway authority existed between 2000 - 2008.\n- Miles driven by all vehicles, motor vehicles, heavy goods vehicles, cars and taxis have been growing slightly and steadily with little flunctuations.\n- Light vans shows steady growth across all the top 10 highways authorities.\n- Miles driven by pedal cycles have been showing flunctuating growth with a major drop in years 2005 and 2008. \n- Miles driven by motor cycles shows steady decline across all highway authorities.","e23eda5a":"**Obsevations:**\n\n- Volume of traffics for each year are stacked on each other for each road category\n- M or Class A Trunk Motorway is the busiest major road category in UK, 2000 - 2018.\n- Class A Principal Road is the least busiest road category in UK, between 2000 - 2018.","53e52611":"### d. Vehicles traffic flow \/ trend based on 10 busiest Highway Authorities in UK, from 2000 - 2018","1c5052eb":"**Major Observations:**\n\n\n- Class M or A Trunk Motorway is the most busiest road class\/category in UK between 2000 - 2018.\n- Miles driven by all Vehicles, Motor Vehicles, Heavy Goods Vehicles, Cars and Taxis are broadly stable between 2000 - 2018.\n- Motor Cycles is most commonly driven on Class A or M Trunk Motorway and it shows a steady decline on this road class, while for other road classes is broadly stable with some flunctuations esp. on Class A trunk Road.\n- Pedal Cycle is commonly driven on Class A roads and it shows steady increase on Principal road since 2012, but has been considerably stable on Trunk Road with some flunctuations.\n- Miles driven by Light Vans shows steady growth on all Road Classes.\n- Buses and Coaches show steady decline on Class M or A Trunk Motorway, and for other road classes it has been broadly stable.","f919390e":"- This project gives detailed insights into United Kingdom (UK) long-term road traffic trends between 2000 - 2018 based on estimated **Annual average daily flows (AADFs) and volume of traffic (i.e. miles driven per year for each vehicle on a particular road)** for vehicle types, road networks, geographical regions, road types and highway authorities.\n\n\n- The afore-mentioned insights highlighted led to questions that were answered by interactive data visualization **(with the help of Plotly)**\n\n\n-- **What is Annual Average Daily Flow (AADF)?**\n\nThe average over a full year of the number of vehicles passing a point in the road network each day.\n\n\n-- **What is Volume of Traffic?**\n\nThe amount of miles or kilometre a vehicle cover a day for a whole year is the Vehicle kilometre\/mile, and this is referred to as the volume of traffic. For example, one vehicle travelling one kilometre or mile a day for a year would be 365 vehicle kilometres or miles. That is the volume of traffic.\n\n\nIt can be calculated by multiplying the AADF by the corresponding length of road and the number of days in a year.\n\n\n\n### Questions:\n\n\n1. \n\n   What is the evolution of traffic **(in terms of miles driven per year)** for different types of vehicles (i.e. Pedal Cycles, Motor cycles, Cars and Taxis, Buses and Coaches, Vans, All motor vehicles, Heavy Goods Vehicles and All Vehicles) in UK, based on:\n\n      a. Different Regions of UK\n\n      b. Major Road classes in UK\n\n      c. Top 10 busiest roads in UK\n\n      d. Top 10 busiest highway authorties in UK.\n   \n   \n   \n   \n   \n2. \n\n\n   a. What is the average volume of traffic (in terms of miles driven by all vehicles) on each Major Road Category per year (between 2000 - 2018)?\n   \n   b. What is the Annual Average Daily Flow (AADF i.e. Number of vehicles that traverse a particular point in a road per day) for each Region in UK, for the 10 busiest Roads and highway authorities in UK (between 2000 and 2018)?\n   \n   \n3. \n\n\n   a. What is the traffic trend for each type of vehicle (i.e. motor vehicles, pedal cycles, heavy goods vehicles etc.,) in United Kingdom (UK) between 2000 - 2018?\n\n   b. How many miles has each type of vehicle (i.e. motor vehicles, pedal cycles, heavy goods vehicles etc.,) in UK covered based on the major road categories between 2000 - 2018?\n   \n   \n   \n   \n[Dataset Download link](https:\/\/roadtraffic.dft.gov.uk\/downloads)","fbb0f332":"**Observations:**\n\n- Annual Average Daily Flow (AADF) for each year are stacked on top each other.\n- M25 is the busiest road in UK based on the Annual Average Daily Flow (AADF).","a71fca60":"**3a. What is the traffic trend for each type of vehicle (i.e. motor vehicles, pedal cycles, heavy goods vehicles etc.,) in United Kingdom (UK) between 2000 - 2018?**\n\n\n**3b. How many miles has each type of vehicle (i.e. motor vehicles, pedal cycles, heavy goods vehicles etc.,) in UK covered based on the major road categories between 2000 - 2018?**"}}