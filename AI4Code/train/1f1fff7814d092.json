{"cell_type":{"62eed64a":"code","75e0023d":"code","efb4f474":"code","098cc106":"code","20df25a1":"code","82a1b096":"code","5985c7be":"code","2a686580":"code","cf76f3a2":"code","d35c79c7":"code","040735ea":"code","965fec53":"code","49d265be":"code","7cdfb533":"code","1d2cbda1":"code","2ab72827":"code","380d4926":"code","ce5ccd15":"code","cfcc86e3":"code","cd6ff559":"code","63e2284f":"code","0c630941":"code","f9049b99":"code","00ebd9db":"code","00b167be":"code","4734e8b0":"code","aa3e4d14":"code","3318ef38":"code","a4bb747a":"code","0d73a0cf":"code","8b67ebde":"code","9d160c7c":"code","8321dfd0":"code","784c8c0a":"code","baedaf3e":"code","4e46b049":"code","ee95786e":"code","24e1fc6e":"code","109f0ed1":"code","77553c75":"code","e04acae0":"code","3976eb74":"code","00b2ac6e":"code","dfa4d810":"code","d4359d5b":"code","599a67c0":"code","18f1b794":"code","80235cd9":"code","2650f1f1":"code","7c5442d9":"code","737bf84f":"code","50f3216e":"code","fad2c802":"code","6e9f50f5":"code","dad00e72":"code","900f5c69":"code","b663f124":"code","52a2db5a":"code","08eb560d":"code","08250c56":"code","b51c182b":"code","c827d820":"code","54d949a0":"code","8f198727":"markdown","9e236320":"markdown","ed7f93b5":"markdown","8f9c2ccb":"markdown","e89c9162":"markdown","71c6b425":"markdown","d7da4a9c":"markdown","a616a903":"markdown","10810bf8":"markdown","95e9979c":"markdown","fc189412":"markdown","2cd5facc":"markdown","0e0686b4":"markdown","fed3f643":"markdown","c321984a":"markdown","d6a13ee6":"markdown","7b3046b7":"markdown","6c05a5f8":"markdown","85dbc965":"markdown","d3d195e0":"markdown","a47aca67":"markdown","f0511735":"markdown","c77fec01":"markdown","72466c57":"markdown","ccff9fdd":"markdown","892d0876":"markdown","b8a735fb":"markdown","4ee4802b":"markdown","735fb960":"markdown","9ccc5535":"markdown","79d0908a":"markdown","5d48f19f":"markdown","00ca67a1":"markdown","e0fb8042":"markdown","d84f02be":"markdown","e96f39e4":"markdown","e69ff8f1":"markdown","aa1ba7ea":"markdown","d8e15c84":"markdown","4b69c6b9":"markdown","76a41b08":"markdown","dcec92fb":"markdown","9968f8e8":"markdown","ba593183":"markdown","2cd46e01":"markdown","eb22198e":"markdown","e75dace3":"markdown","d809a43e":"markdown","6bca963f":"markdown","ff3f7e5a":"markdown","d2dc0bd5":"markdown","96367ee2":"markdown","63264026":"markdown","c027718d":"markdown","dfe8e328":"markdown","d3375361":"markdown","995c40af":"markdown","0c8310d4":"markdown","522e9a46":"markdown","7120f93b":"markdown","013ed724":"markdown","c001e994":"markdown","67ccfeb2":"markdown","1818c224":"markdown","3e2cec27":"markdown","9b06d801":"markdown","3548dec2":"markdown","42a093be":"markdown","86143ec7":"markdown","f3801f0f":"markdown","962ebfe0":"markdown","a708adbb":"markdown","71a81a72":"markdown","0cb1ba09":"markdown","d22a09eb":"markdown","2d1d6236":"markdown","fdcdd46d":"markdown","b460aa68":"markdown","ddf2b699":"markdown","68d23fe9":"markdown","d2da0993":"markdown","9d3497d3":"markdown","e97d2a69":"markdown","982ba19b":"markdown","4365a6f6":"markdown","7606c1a2":"markdown","c4362329":"markdown","58383ffe":"markdown","2049c61b":"markdown","65501803":"markdown","c65570ce":"markdown","f9eb1883":"markdown","b1567168":"markdown","6ff98816":"markdown","347e30fe":"markdown","1fed8e29":"markdown","9f2b728b":"markdown","76900318":"markdown","b7c66188":"markdown","7038d4b9":"markdown","b7eb9ee0":"markdown","42f0bfc1":"markdown","05484ead":"markdown","6453f372":"markdown","65e79d62":"markdown","cc15cd33":"markdown","d9498859":"markdown","3b562b00":"markdown","6554c470":"markdown","b4810795":"markdown","02110c13":"markdown","71e84133":"markdown"},"source":{"62eed64a":"import os\nimport gc\nimport time\nimport math\nimport tqdm\nimport numpy as np\nimport pandas as pd\nfrom keras.utils import to_categorical\nfrom tqdm import tqdm_notebook as tqdm\nfrom kaggle.competitions import nflrush\n\nenv = nflrush.make_env()\niter_test = env.iter_test()\n\nfrom sklearn.utils import shuffle\nfrom sklearn.preprocessing import MinMaxScaler\n\n!pip install -qqq hiddenlayer\nimport hiddenlayer as hl\n\nimport IPython\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\n\nimport torch\nimport torch.nn as nn\nfrom torch.optim import Adam\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\n\nimport warnings\nwarnings.filterwarnings('ignore')","75e0023d":"EPOCHS = 8\nBATCH_SIZE = 128\nDATA_PATH = '..\/input\/nfl-big-data-bowl-2020\/'","efb4f474":"train_df = pd.read_csv(DATA_PATH + 'train.csv')\ntrain_df.head()","098cc106":"fig = ff.create_distplot(hist_data=[train_df.sample(frac=0.025)[\"X\"]], group_labels=\"X\", colors=['rgb(26, 153, 0)'])\nfig.update_layout(title=\"X coordinate\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"X coordinate\"))\nfig.show()","20df25a1":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"X\"], y=data[\"Yards\"], kind='kde', color='forestgreen', height=7)\nplot.set_axis_labels('X coordinate', 'Yards', fontsize=16)\nplt.show(plot)","82a1b096":"fig = ff.create_distplot(hist_data=[train_df.sample(frac=0.025)[\"Y\"]], group_labels=\"Y\", colors=['rgb(179, 0, 30)'])\nfig.update_layout(title=\"Y coordinate\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Y coordinate\"))\nfig.show()","5985c7be":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"Y\"], y=data[\"Yards\"], kind='kde', color=(179\/255, 0, 30\/255), height=7)\nplot.set_axis_labels('Y coordinate', 'Yards', fontsize=16)\nplt.show(plot)","2a686580":"data = train_df.sample(frac=0.025)\nplot = sns.jointplot(x=data[\"X\"], y=data[\"Y\"], kind='kde', color='mediumvioletred', height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","cf76f3a2":"data = train_df","d35c79c7":"empty_data = data.query('OffenseFormation == \"EMPTY\"')\niform_data = data.query('OffenseFormation == \"I_FORM\"')\njumbo_data = data.query('OffenseFormation == \"JUMBO\"')\npistol_data = data.query('OffenseFormation == \"PISTOL\"')\nshotgun_data = data.query('OffenseFormation == \"SHOTGUN\"')\nsingleback_data = data.query('OffenseFormation == \"SINGLEBACK\"')\nwildcat_data = data.query('OffenseFormation == \"WILDCAT\"')","040735ea":"colors = ['red', 'orangered', 'orange', (179\/255, 149\/255, 0), 'forestgreen', 'blue', 'blueviolet', 'darkviolet']","965fec53":"plot = sns.jointplot(x=empty_data[\"X\"], y=empty_data[\"Y\"], kind='kde', color=colors[0], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","49d265be":"plot = sns.jointplot(x=iform_data[\"X\"], y=iform_data[\"Y\"], kind='kde', color=colors[1], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","7cdfb533":"plot = sns.jointplot(x=jumbo_data[\"X\"], y=jumbo_data[\"Y\"], kind='kde', color=colors[2], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","1d2cbda1":"plot = sns.jointplot(x=pistol_data[\"X\"], y=pistol_data[\"Y\"], kind='kde', color=colors[3], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","2ab72827":"plot = sns.jointplot(x=shotgun_data[\"X\"], y=shotgun_data[\"Y\"], kind='kde', color=colors[4], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","380d4926":"plot = sns.jointplot(x=singleback_data[\"X\"], y=singleback_data[\"Y\"], kind='kde', color=colors[5], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","ce5ccd15":"plot = sns.jointplot(x=wildcat_data[\"X\"], y=wildcat_data[\"Y\"], kind='kde', color=colors[6], height=7)\nplot.set_axis_labels('X coordinate', 'Y coordinate', fontsize=16)\nplt.show(plot)","cfcc86e3":"fig = ff.create_distplot(hist_data=[train_df.sample(frac=0.025).query('Dir == Dir')[\"Dir\"]], group_labels=[\"Dir\"], colors=['rgb(255, 102, 25)'])\nfig.update_layout(title=\"Dir\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Dir\"))\nfig.show()","cd6ff559":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"Dir\"], y=data[\"Yards\"], kind='kde', color=(255\/255, 102\/255, 25\/255), height=7)\nplot.set_axis_labels('Dir', 'Yards', fontsize=16)\nplt.show(plot)","63e2284f":"fig = ff.create_distplot(hist_data=[train_df.sample(frac=0.025)[\"A\"]], group_labels=\"A\", colors=['rgb(0, 0, 230)'])\nfig.update_layout(title=\"A\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"A\"))\nfig.show()","0c630941":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"A\"], y=data[\"Yards\"], kind='kde', color=(0, 0, 230\/255), height=7)\nplot.set_axis_labels('A', 'Yards', fontsize=16)\nplt.show(plot)","f9049b99":"fig = ff.create_distplot(hist_data=[train_df.sample(frac=0.025)[\"S\"]], group_labels=\"S\", colors=['rgb(230, 0, 191)'])\nfig.update_layout(title=\"S\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"S\"))\nfig.show()","00ebd9db":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"S\"], y=data[\"Yards\"], kind='kde', color=(230\/255, 0, 191\/255), height=7)\nplot.set_axis_labels('S', 'Yards', fontsize=16)\nplt.show(plot)","00b167be":"data = train_df.sample(frac=0.025)[\"Humidity\"]\nfig = ff.create_distplot(hist_data=[data.fillna(data.mean())], group_labels=[\"Humidity\"], colors=['rgb(0, 102, 102)'])\nfig.update_layout(title=\"Humidity\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Humidity\"))\nfig.show()","4734e8b0":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"Humidity\"], y=data[\"Yards\"], kind='kde', color=(0\/255, 77\/255, 77\/255), height=7)\nplot.set_axis_labels('Humidity', 'Yards', fontsize=16)\nplt.show(plot)","aa3e4d14":"data = train_df.sample(frac=0.025)[\"Temperature\"]\nfig = ff.create_distplot(hist_data=[data.fillna(data.mean())], group_labels=[\"Temperature\"], colors=['rgb(51, 34, 0)'])\nfig.update_layout(title=\"Temperature\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Temperature\"))","3318ef38":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nplot = sns.jointplot(x=data[\"Temperature\"], y=data[\"Yards\"], kind='kde', color=(51\/255, 34\/255, 0), height=7)\nplot.set_axis_labels('Temperature', 'Yards', fontsize=16)\nplt.show(plot)","a4bb747a":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\naway_data = data.query('Team == \"away\"')[\"Yards\"]\nhome_data = data.query('Team == \"home\"')[\"Yards\"]\n\nfig = ff.create_distplot(hist_data=[away_data, home_data],\n                         group_labels=[\"Away\", \"Home\"],\n                         show_hist=False)\n\nfig.update_layout(title=\"Team vs. Yards\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Yards\"))\nfig.show()","0d73a0cf":"fig = go.Figure()\ndata = [away_data, home_data]\ntags = [\"Away\", \"Home\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Box(y=category, name=tags[index]))\n\nfig.update_layout(title=\"Team vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"Team\"))\nfig.show()","8b67ebde":"fig = go.Figure()\ndata = [away_data, home_data]\ntags = [\"Away\", \"Home\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Violin(y=category, name=tags[index]))\n\nfig.update_layout(title=\"Team vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"Team\"))\nfig.show()","9d160c7c":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nnorth_data = data.query('WindDirection == \"N\"')[\"Yards\"]\neast_data = data.query('WindDirection == \"E\"')[\"Yards\"]\nwest_data = data.query('WindDirection == \"W\"')[\"Yards\"]\nsouth_data = data.query('WindDirection == \"S\"')[\"Yards\"]\n\nfig = ff.create_distplot(hist_data=[north_data, east_data, west_data, south_data],\n                         group_labels=[\"North\", \"East\", \"West\", \"South\"],\n                         show_hist=False)\n\nfig.update_layout(title=\"WindDirection vs. Yards\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Yards\"))\nfig.show()","8321dfd0":"fig = go.Figure()\ndata = [north_data, east_data, west_data, south_data]\ntags = [\"North\", \"East\", \"West\", \"South\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Box(y=category, name=tags[index]))\n    \nfig.update_layout(title=\"WindDirection vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"WindDirection\"))\nfig.show()","784c8c0a":"fig = go.Figure()\ndata = [north_data, east_data, west_data, south_data]\ntags = [\"North\", \"East\", \"West\", \"South\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Violin(y=category, name=tags[index]))\n\nfig.update_layout(title=\"WindDirection vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"WindDirection\"))\nfig.show()","baedaf3e":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nempty_data = data.query('OffenseFormation == \"EMPTY\"')[\"Yards\"]\niform_data = data.query('OffenseFormation == \"I_FORM\"')[\"Yards\"]\njumbo_data = data.query('OffenseFormation == \"JUMBO\"')[\"Yards\"]\npistol_data = data.query('OffenseFormation == \"PISTOL\"')[\"Yards\"]\nshotgun_data = data.query('OffenseFormation == \"SHOTGUN\"')[\"Yards\"]\nsingleback_data = data.query('OffenseFormation == \"SINGLEBACK\"')[\"Yards\"]\nwildcat_data = data.query('OffenseFormation == \"WILDCAT\"')[\"Yards\"]\n\nfig = ff.create_distplot(hist_data=[empty_data, iform_data, jumbo_data,\n                                    pistol_data, shotgun_data, singleback_data, wildcat_data],\n                         group_labels=[\"Empty\", \"I-Form\", \"Jumbo\", \"Pistol\",\n                                       \"Shotgun\", \"Singleback\", \"Wildcat\"],\n                         show_hist=False)\n\nfig.update_layout(title=\"OffenseFormation vs. Yards\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Yards\"))\nfig.show()","4e46b049":"fig = go.Figure()\ndata = [empty_data, iform_data, jumbo_data, pistol_data, shotgun_data, singleback_data, wildcat_data]\ntags = [\"Empty\", \"I-Form\", \"Jumbo\", \"Pistol\", \"Shotgun\", \"Singleback\", \"Wildcat\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Box(y=category, name=tags[index]))\n\nfig.update_layout(title=\"OffenseFormation vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"OffenseFormation\"))\nfig.show()","ee95786e":"fig = go.Figure()\ndata = [empty_data, iform_data, jumbo_data, pistol_data, shotgun_data, singleback_data, wildcat_data]\ntags = [\"Empty\", \"I-Form\", \"Jumbo\", \"Pistol\", \"Shotgun\", \"Singleback\", \"Wildcat\"]\n\nfor index, category in enumerate(data):\n    fig.add_trace(go.Violin(y=category, name=tags[index]))\n\nfig.update_layout(title=\"OffenseFormation vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"OffenseFormation\"))\nfig.show()","24e1fc6e":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nhist_data = [data.loc[data[\"HomeTeamAbbr\"] == home_team_abbr][\"Yards\"] for home_team_abbr in set(data['HomeTeamAbbr'])]\n\nfig = ff.create_distplot(hist_data=hist_data, group_labels=list(set(data['HomeTeamAbbr'])), show_hist=False)\nfig.update_layout(title=\"HomeTeamAbbr vs. Yards\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Yards\"))\nfig.show()","109f0ed1":"hist_data = [ele for ele in reversed(hist_data)] \ntags = [ele for ele in reversed(list(set(data['HomeTeamAbbr'])))]","77553c75":"fig = go.Figure()\n\nfor index, category in enumerate(hist_data):\n    fig.add_trace(go.Box(y=category, name=tags[index]))\n\nfig.update_layout(title=\"HomeTeamAbbr vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"HomeTeamAbbr\"))\nfig.show()","e04acae0":"fig = go.Figure()\n\nfor index, category in enumerate(hist_data):\n    fig.add_trace(go.Violin(y=category, name=tags[index]))\n\nfig.update_layout(title=\"HomeTeamAbbr vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"HomeTeamAbbr\"))\nfig.show()","3976eb74":"data = train_df.sample(frac=0.025)\nquantile = data[\"Yards\"].quantile(0.95)\ndata = data.loc[data[\"Yards\"] < quantile]\nhist_data = [data.loc[data[\"VisitorTeamAbbr\"] == visitor_team_abbr][\"Yards\"] for visitor_team_abbr in set(data['VisitorTeamAbbr'])]\n\nfig = ff.create_distplot(hist_data=hist_data, group_labels=list(set(data['VisitorTeamAbbr'])), show_hist=False)\nfig.update_layout(title=\"VisitorTeamAbbr vs. Yards\", yaxis=dict(title=\"Probability Density\"), xaxis=dict(title=\"Yards\"))\nfig.show()","00b2ac6e":"hist_data = [ele for ele in reversed(hist_data)]\ntags = [ele for ele in reversed(list(set(data['VisitorTeamAbbr'])))]","dfa4d810":"fig = go.Figure()\n\nfor index, category in enumerate(hist_data):\n    fig.add_trace(go.Box(y=category, name=tags[index]))\n\nfig.update_layout(title=\"VisitorTeamAbbr vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"VisitorTeamAbbr\"))\nfig.show()","d4359d5b":"fig = go.Figure()\n\nfor index, category in enumerate(hist_data):\n    fig.add_trace(go.Violin(y=category, name=tags[index]))\n\nfig.update_layout(title=\"VisitorTeamAbbr vs. Yards\", yaxis=dict(title=\"Yards\"), xaxis=dict(title=\"VisitorTeamAbbr\"))\nfig.show()","599a67c0":"cat_cols = ['Team', 'FieldPosition', 'OffenseFormation']\nvalue_dicts = []\n\nfor feature in cat_cols:\n    values = set(train_df[feature])\n    value_dicts.append(dict(zip(values, np.arange(len(values)))))","18f1b794":"def indices(data, feat_index):\n    value_dict = value_dicts[feat_index]\n    return data[cat_cols[feat_index]].apply(lambda x: value_dict[x])\n\ndef one_hot(indices, feat_index):\n    return to_categorical(indices, num_classes=len(value_dicts[feat_index]))","80235cd9":"def get_categorical_features(sample, data):\n    index_values = [indices(sample, index) for index in range(len(value_dicts))]\n    features = tuple([one_hot(value, index) for index, value in enumerate(index_values)])\n    features = np.concatenate(features, axis=1)\n    return features","2650f1f1":"num_cols = ['X', 'S', 'A', 'Dis', 'Orientation', 'Dir', 'YardLine',\n            'Quarter', 'Down', 'Distance', 'HomeScoreBeforePlay',\n            'VisitorScoreBeforePlay', 'DefendersInTheBox', 'PlayerWeight',\n            'Week', 'Temperature', 'Humidity']\n\ndef get_numerical_features(sample):\n    return sample[num_cols].values","7c5442d9":"class NFLCompetitionDataset(Dataset):\n    \n    def __init__(self, data, stage):\n        self.dataframe = data\n        self.stage = stage\n        self.play_ids = list(set(data['PlayId']))\n            \n    def __len__(self):\n        return len(self.play_ids)\n        \n    def __getitem__(self, index):\n        data_locations = self.dataframe['PlayId'] == self.play_ids[index]\n        data_sample = self.dataframe.loc[data_locations]\n        labels = np.array(data_sample['Yards'])\n        labels = np.pad(labels, (0, 25 - len(labels)),\n                        mode='constant',\n                        constant_values=0)\n\n        numerical_features = get_numerical_features(data_sample)\n        features = numerical_features\n\n        padding_length = 25 - features.shape[0]\n        inds = np.where(np.isnan(features))\n        features[inds] = np.take(np.nanmean(features, axis=0), inds[1])\n        inds = np.where(np.isnan(features))\n        features[inds] = 0\n    \n        if padding_length != 0:\n            padding_values = np.vstack([np.mean(features, axis=0).reshape(1, -1)]*padding_length)\n        \n        features = np.concatenate((features, padding_values), axis=0)\n        return features, labels","737bf84f":"train_df = train_df.sample(frac=1).reset_index(drop=True)\nsplit = np.int32(0.8 * len(train_df))\n\ntrain_set = NFLCompetitionDataset(data=train_df.iloc[:split], stage='train')\nval_set = NFLCompetitionDataset(data=train_df.iloc[split:], stage='val')","50f3216e":"class CNN1DNetwork(nn.Module):\n    \n    def __init__(self):\n        super(CNN1DNetwork, self).__init__()\n        \n        self.conv1d_1 = nn.Conv1d(in_channels=17, out_channels=100, kernel_size=2)\n        self.conv1d_2 = nn.Conv1d(in_channels=17, out_channels=100, kernel_size=3)\n        self.conv1d_3 = nn.Conv1d(in_channels=17, out_channels=100, kernel_size=4)\n        self.conv1d_4 = nn.Conv1d(in_channels=17, out_channels=100, kernel_size=5)\n        \n        self.dense_1 = nn.Linear(in_features=400, out_features=64)\n        self.dense_2 = nn.Linear(in_features=64, out_features=25)\n        self.relu = nn.ReLU()\n        \n    def forward(self, x):\n        x = x.float().permute(0, 2, 1)\n        conv_1 = self.conv1d_1(x)\n        conv_2 = self.conv1d_2(x)\n        conv_3 = self.conv1d_3(x)\n        conv_4 = self.conv1d_4(x)\n    \n        max_pool_1, _ = torch.max(conv_1, 2)\n        max_pool_2, _ = torch.max(conv_2, 2)\n        max_pool_3, _ = torch.max(conv_3, 2)\n        max_pool_4, _ = torch.max(conv_4, 2)\n        \n        features = torch.cat((max_pool_1, max_pool_2, max_pool_3, max_pool_4), 1)\n        conc = self.dense_1(features)\n        conc = self.relu(conc)\n        out = self.dense_2(conc)\n        return out","fad2c802":"hl_graph = hl.build_graph(CNN1DNetwork(), torch.zeros([1, 25, 17]))\nhl_graph.theme = hl.graph.THEMES[\"blue\"].copy()\nhl_graph","6e9f50f5":"train_loader = DataLoader(train_set, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = DataLoader(val_set, batch_size=BATCH_SIZE, shuffle=True)","dad00e72":"mean = 0.\nstd = 0.\nnb_samples = 0.\n\nfor data, _ in tqdm(train_loader):\n    batch_samples = data.size(0)\n    data = data.view(batch_samples, data.size(1), -1)\n    mean += data.mean((0, 1))\n    std += data.std((0, 1))\n    nb_samples += batch_samples\n\nmean \/= nb_samples\nstd \/= nb_samples","900f5c69":"start = time.time()\nnetwork = CNN1DNetwork()\noptimizer = Adam(network.parameters(), lr=0.01)\ntrain_losses = []\nval_losses = []\n\nfor epoch in range(EPOCHS):\n    print(\"EPOCH \" + str(epoch + 1))\n    print(\"\")\n    \n    for (train_batch, val_batch) in zip(train_loader, val_loader):\n        train_X, train_y = train_batch\n        val_X, val_y = val_batch\n        \n        train_len = train_X.shape[0]\n        val_len = val_X.shape[0]\n        \n        train_mean = torch.cat(train_len*[torch.cat(25*[mean.view(1, 17)], 0).view(1, 25, 17)], 0)*train_len\n        train_std = torch.cat(train_len*[torch.cat(25*[std.view(1, 17)], 0).view(1, 25, 17)], 0)*train_len\n        val_mean = torch.cat(val_len*[torch.cat(25*[mean.view(1, 17)], 0).view(1, 25, 17)], 0)*val_len\n        val_std = torch.cat(val_len*[torch.cat(25*[std.view(1, 17)], 0).view(1, 25, 17)], 0)*val_len\n\n        train_X = (train_X - train_mean)\/train_std\n        val_X = (val_X - val_mean)\/val_std\n\n        train_y = torch.tensor(train_y, dtype=torch.float)\n        val_y = torch.tensor(val_y, dtype=torch.float)\n        \n        train_preds = network.forward(train_X)\n        train_loss = nn.MSELoss()(train_preds, train_y)\n        optimizer.zero_grad()\n        train_loss.backward()\n        optimizer.step()\n        \n        val_preds = network.forward(val_X)\n        val_loss = nn.MSELoss()(val_preds, val_y)\n    \n    end = time.time()\n    \n    train_losses.append(train_loss.item())\n    val_losses.append(val_loss.item())\n\n    print(\"Train loss: \" + str(np.round(train_loss.item(), 3)) + \"   \" +\\\n          \"Val loss: \" + str(np.round(val_loss.item(), 3)) + \"   \" +\\\n          \"Total time: \" + str(np.round(end - start, 1)) + \" s\")\n    print(\"\")","b663f124":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8], y=train_losses,\n    name='train', mode='lines+markers',\n    marker_color='crimson'\n))\n\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4, 5, 6, 7, 8], y=val_losses,\n    name='val', mode='lines+markers',\n    marker_color=' indigo'\n))\n\nfig.update_traces(mode='lines+markers', marker_line_width=2, marker_size=10)\nfig.update_layout(title='Loss over the epochs', yaxis_zeroline=False, xaxis_zeroline=False)\nfig.update_layout(title=\"Loss over the epochs\", yaxis=dict(title=\"MSE Loss\"), xaxis=dict(title=\"Epochs\"))\nfig.show()","52a2db5a":"labels=['Epoch 1', 'Epoch 2', 'Epoch 3', 'Epoch 4',\n        'Epoch 5', 'Epoch 6', 'Epoch 7', 'Epoch 8']\n\nfig = go.Figure(data=[\n    go.Bar(name='train', x=labels, y=train_losses, marker={'color' : 'crimson'}),\n    go.Bar(name='val', x=labels, y=val_losses, marker={'color' : 'indigo'})\n])\n\nfig.update_layout(title=\"Loss over the epochs\", yaxis=dict(title=\"MSE Loss\"))\nfig.update_layout(barmode='group')\nfig.show()","08eb560d":"test_mean = torch.cat(25*[mean.view(1, 17)], 0).view(1, 25, 17)\ntest_std = torch.cat(25*[std.view(1, 17)], 0).view(1, 25, 17)","08250c56":"def generate_prediction(data_sample):\n    numerical_features = get_numerical_features(data_sample)\n    features = numerical_features\n\n    padding_length = 25 - features.shape[0]\n    length = features.shape[0]\n    inds = np.where(np.isnan(features))\n    features[inds] = np.take(np.nanmean(features, axis=0), inds[1])\n    inds = np.where(np.isnan(features))\n    features[inds] = 0\n    \n    if padding_length != 0:\n        padding_values = np.vstack([np.mean(features, axis=0).reshape(1, -1)]*padding_length)\n        \n    features = np.concatenate((features, padding_values), axis=0)\n    features = (features - test_mean.numpy())\/test_std.numpy()\n    prediction = network.forward(torch.FloatTensor(features).view(1, 25, 17)).detach().numpy().reshape((25, 1))\n    pred = np.zeros((length, 199))\n\n    for index, row in enumerate(prediction):\n        if np.int32(np.round(row[0])) < 100:\n            pred[index][np.int32(np.round(row[0])) + 99:] = 1\n        else:\n            pred[index][-1] = 1\n\n        if index == length - 1:\n            break\n\n    return pred","b51c182b":"for (test_df, sample_prediction_df) in tqdm(env.iter_test()):\n    predictions = generate_prediction(test_df)\n    env.predict(pd.DataFrame(data=predictions, columns=sample_prediction_df.columns))","c827d820":"env.write_submission_file()","54d949a0":"print(\"Thank you!\")","8f198727":"From the above plot, we can see that the distribution of **Dir** is roughly trimodal (three peaks). One peak occurs approximately at the center at around **Dir = 190**, and the other two peaks occur at the extreme ends of the distribution, at **Dir = 0** and **Dir = 350**. This probably represents two types of motion in players: almost straight motion (0 or 350 degrees) and diagonal motion (190 degrees).","9e236320":"### Calculate the data mean and standard deviation for normalization","ed7f93b5":"### Generate training and validation sets (80% split)","8f9c2ccb":"### Dsitribution plot","e89c9162":"### Initialize data loaders","71c6b425":"We can the same pattern in this plot.\n\n* **Highest Yards Gained**: Wahington Redskins, Oakland Raiders, and Green Bay Packers\n* **Lowest Yards Gained**: Chicago Bears and New York Jets","d7da4a9c":"In the KDE plot above, we can see that the *y*-coordinate does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at the center, at around **Y = 25** and **Yards = 3**. The probability density decreases rapidly as one moves away from this central region, where most of the data is concentrated.","a616a903":"### Write submission file","10810bf8":"### Define helper functions to generate categorical features","95e9979c":"## VisitorTeamAbbr vs. Yards","fc189412":"In the plot above (for the \"empty\" formation), we can see that the *x*-coordinates are concentrated heavily around the **X = 40** mark. Maybe this suggests that attacks of this form occur mainly from the left side of the field, because this value of **X** is closer to the left end of the field than the right end. But, there is also comparatively less dense region of probability density at around **X = 80**, suggesting that attacks can also take place from the other side of the field, but this is less likely.","2cd5facc":"### Distribution plot","0e0686b4":"## Dir\n\n**Dir** is the angle of the player's motion during the play","fed3f643":"### Distribution plot","c321984a":"### Visualize neural network architecture","d6a13ee6":"## Y coordinate vs. Yards","7b3046b7":"### Violin plot","6c05a5f8":"## Temperature\n\n**Temperature** is the temperature (in degrees Fahrenheit) during the game.","85dbc965":"<font size=3 color='red'>Please upvote if you find it useful or interesting :) It motivates me to produce more quality content.<\/font>","d3d195e0":"### Wilcat formation","a47aca67":"In the plot above, we can see that most of the *xy*-coordinate data is concentrated around a flat rectangular region in the dead center of the field. The probability density decreases as we move away from this central rectangle. The rectange extends from **X = 35 to 85** and **Y = 20 to 30**.","f0511735":"### Define a PyTorch Dataset for the problem","c77fec01":"### Shotgun formation","72466c57":"### Distribution plot","ccff9fdd":"In the plot above (for the \"jumbo\" formation), we can see that most of the *xy*-coordinate data is heavily concentrated at two regions on the field, at around **X = 10** and **X = 110**. The density in between these two regions is comparatively very low. This suggests that such attacks generally take place at the left and right extremes of the field, and not at the center.","892d0876":"### Define helper functions to generate numerical features","b8a735fb":"We can see a similar pattern to the \"pistol\" formation here. In the plot above (for the \"singleback\" formation), we can see that most of the *xy*-coordinate data is concentrated around a flat rectangular region in the dead center of the field. The probability density decreases as we move away from this central rectangle. The rectange extends from **X = 10 to 110** and **Y = 15 to 35**. This suggests that most attacks of this type occur from the center of the field. But, there are also minor regions of density at the top and bottom extremes of the field, suggesting that such attacks can also take place from the left and right flanks of the field.","4ee4802b":"In the distribution plot above, we can see that the *x*-coordinates of the players in the dataset has a somewhat bimodal distribution. There are two major peaks in the probability density, at around 35 and 85 yards. This is probably where most players are concentrated on average: in between the midway line and their end of the field. The two peaks probably represent the two teams playing the game.","735fb960":"# PyTorch Model \ud83d\udd25","9ccc5535":"### Train the model (with MSE loss)","79d0908a":"### Generate predictions","5d48f19f":"In the KDE plot above, we can see that the humidity does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at the right edge, at around **Humidity = 70** and **Yards = 3**. There is another high density region at **Humidity = 0**. The probability density decreases as one moves away from these regions, where most of the data is concentrated.","00ca67a1":"In this kernel, I will do some basic EDA. I will visualize features in the dataset, and in the process, try to gain some insights about the patterns in the data. After that, I will show how to a CNN model in PyTorch to solve this problem. So let's get right into it :)","e0fb8042":"## WindDirection vs. Yards","d84f02be":"### Box plot","e96f39e4":"In the plot above, we can see that the distribution of **S** is asymmetrical, unimodal, and heavily skewed to the right. The probability density of the speed peaks at around **S = 2** yard per second. ","e69ff8f1":"### Distribution plot","aa1ba7ea":"From the above plot, we can see that almost all the home teams have very similar distributions of yards gained.","d8e15c84":"In the KDE plot above, we can see that the humidity does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated towards the right side, at around **Temperature = 60** and **Yards = 3**. The probability density decreases as one moves away from this region, where most of the data is concentrated.","4b69c6b9":"## X coordinate vs. Yards","76a41b08":"### Line plot","dcec92fb":"### Violin plot","9968f8e8":"### Singleback formation","ba593183":"### Visualize training and validation losses","2cd46e01":"All the distributions above are unimodal and seem to have a slight rightward skew. The distributions are different from each other, but the difference in not very sizeable. The distribution for **East** wind direction has the highest mean yards gained, whereas the **West** wind direction has the lowest mean yards gained.","eb22198e":"### Define the 1D CNN architecture","e75dace3":"# EDA \ud83d\udcca\n\nNow, I am going to use **seaborn** and **plotly** to visualize and analyze the data.","d809a43e":"### Jumbo formation","6bca963f":"In the plot above (for the \"I\" formation), we can see that most of the *xy*-coordinate data is concentrated around a flat rectangular region in the dead center of the field. The probability density decreases as we move away from this central rectangle. The rectange extends from **X = 10 to 110** and **Y = 15 to 35**. This suggests that most attacks of this type occur from the center of the field. But, there are also minor regions of density at the top and bottom extremes of the field, suggesting that such attacks can also take place from the left and right flanks of the field.","ff3f7e5a":"### \"I\" formation","d2dc0bd5":"**S** is the speed of the player in yards per second.","96367ee2":"### Distribution plot","63264026":"### Declare the necessary constants","c027718d":"In the plot above, we can see that the distribution of humidity in the dataset has a slight leftward skew and is bimodal in nature. The distribution has two peaks at around **Humidity = 0 and 70**. The first peak, at **Humidity = 0** is very sudden and goes against the gentle leftward skew of the data.","dfe8e328":"<center><img src=\"https:\/\/i.imgur.com\/GOs1cLy.jpg\" width=\"500px\"><\/center>","d3375361":"### Box plot","995c40af":"### Load the training data","0c8310d4":"## Humidity\n\nHumidity is the percentage (from 0 to 100) of water vapour present in the air during the game.","522e9a46":"In the plot above, we can see that the distribution of yards gained is almost identical for home teams and away teams. Therefore, whether a player is from the home team or the away team does not affect the yards gained during a play.","7120f93b":"### Box plot","013ed724":"In the above plot, we can once again see that the distribution of yards gained are somewhat similar for different wind directions. But, the distribution for **East** wind direction has the highest mean yards gained, whereas the **West** wind direction has the lowest mean yards gained. ","c001e994":"### Violin plot","67ccfeb2":"In the KDE plot above, we can see that the **Dir** value does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at three symmetric  areas around the center, at **Dir = 0, 190 and 350**. The probability density decreases rapidly as one moves away from these three region, where most of the data is concentrated.","1818c224":"The above plot, once gain, reinforces the fact that the distributions are very similar.","3e2cec27":"Now, I will look at how the *xy*-coordinate distribution of players is different for different offense formations.","9b06d801":"## HomeTeamAbbr vs. Yards","3548dec2":"## Offense formation vs. Yards","42a093be":"## Team vs. Yards","86143ec7":"### Install and import the necessary libraries","f3801f0f":"The above plot, once gain, reinforces the fact that **Empty** formations generally result in higher-than-average yards gained, and **Jumbo** formations generally result in lower-than-average yards gained.","962ebfe0":"## Dir vs. Yards","a708adbb":"In the plot above (for the \"wildcat\" formation), we can see that the *x*-coordinates are concentrated heavily around the **X = 20** and **X = 70** marks. Maybe this suggests that attacks of this form occur from both sides of the field. But, every few attacks of this form at values of **X > 110**.","71a81a72":"## X coordinate vs. Y coordinate for different offense formations","0cb1ba09":"### Empty formation","d22a09eb":"In the above plot, we can see that most distributions are similar. But, the few teams that have the highest average yards gained are the **Oakland Raiders, New England Patriots, and Minnesota Vikings**. On the other hand, the teams that have the lowest average yards gained are the **Jacksonville Jaguars and Carolina Panthers**. ","2d1d6236":"In the KDE plot above, we can see that the *x*-coordinate does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at the center, at around **X = 50** and **Yards = 3**. The probability density decreases rapidly as one moves away from this central region, where most of the data is concentrated.","fdcdd46d":"The above plot, once gain, reinforces the fact that the distributions are very similar, but the **West** distribution has the highest mean and the **East** distribution has the lowest mean.","b460aa68":"## X coordinate vs. Y coordinate","ddf2b699":"Now, I am going to show how to build a CNN model to solve this problem using PyTorch.","68d23fe9":"### Box plot","d2da0993":"## 1D CNN Model","9d3497d3":"### Distribution plot","e97d2a69":"## Speed","982ba19b":"### Distribution plot","4365a6f6":"We can the same pattern in this plot.\n\n* **Highest Yards Gained**: Oakland Raiders, New England Patriots, and Minnesota Vikings\n* **Lowest Yards Gained**: Jacksonville Jaguars and Carolina Panthers","7606c1a2":"In the distribution plot above, we can see that the *y*-coordinates of the players in the dataset has a somewhat normal, unimodal distribution. There ais one major peaks in the probability density, at around **Y = 25** yards, which is near the center of the pitch. The two small peaks at the extreme ends of the distribution probably represent the players on the extreme left and right \"sides\" or \"flanks\" of the field.","c4362329":"Once again, in the plot above (for the \"shotgun\" formation), we can see that most of the *xy*-coordinate data is concentrated around a flat rectangular region in the dead center of the field. The probability density decreases as we move away from this central rectangle. The rectange extends from **X = 10 to 110** and **Y = 15 to 35**. This suggests that most attacks of this type occur from the center of the field. But, there are also minor regions of density at the top and bottom extremes of the field, suggesting that such attacks can also take place from the left and right flanks of the field.","58383ffe":"### Bar plot","2049c61b":"From the above plot, we can see that almost all the visitor teams have very similar distributions of yards gained.","65501803":"## X coordinate\n\nThese are the *x*-coordinates of the players on the field during the games.","c65570ce":"### Distribution plot","f9eb1883":"In the KDE plot above, we can see that the speed does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at the left edge, at around **S = 2** and **Yards = 3**. The probability density decreases as one moves away from this central region, where most of the data is concentrated.","b1567168":"### Pistol formation","6ff98816":"## Acceleration\n\n**A** is the acceleration of the player in yards per second per second.","347e30fe":"### Box plot","1fed8e29":"### Violin plot","9f2b728b":"In the plot above (for the \"pistol\" formation), we can see that most of the *xy*-coordinate data is concentrated around a flat rectangular region in the dead center of the field. The probability density decreases as we move away from this central rectangle. The rectange extends from **X = 10 to 110** and **Y = 15 to 35**. This suggests that most attacks of this type occur from the center of the field. But, there are also minor regions of density at the top and bottom extremes of the field, suggesting that such attacks can also take place from the left and right flanks of the field.","76900318":"The plot above also shows that **Empty** formations generally result in higher-than-average yards gained, and **Jumbo** formations generally result in lower-than-average yards gained. All the other formations are almost exactly identical to each other in terms of yards gained.","b7c66188":"In the KDE plot above, we can see that the acceleration does not have any clear correlation or relationship with the number of yards gained in the play. The density is concentrated at the left edge, at around **A = 1** and **Yards = 3**. The probability density decreases as one moves away from this central region, where most of the data is concentrated.","7038d4b9":"In the plot above, we can see that the distribution of humidity in the dataset has a slight leftward skew and is roughly unimodal in nature. The distribution has one peak at around **Temperature = 60** degrees Fahrenheit.","b7eb9ee0":"**What is happening here?**\n\nHere are the steps:\n\n* Group all the data by PlayId\n* Get the 2D data from each PlayId\n* Generate a 2D array with the numerical and categorical features for each PlayId\n* Get the labels for each play\n* Return the features and labels for each play","42f0bfc1":"### Get categorical value sets","05484ead":"# Introduction\n\n","6453f372":"<center><img src=\"https:\/\/i.imgur.com\/WoSvK1u.jpg\" width=\"500px\"><\/center>","65e79d62":"In the above plot, we can see that most distributions are similar. But, the few teams that have the highest average yards gained are the **Wahington Redskins, Oakland Raiders, and Green Bay Packers**. On the other hand, the teams that have the lowest average yards gained are the **Chicago Bears and New York Jets**. ","cc15cd33":"In the above plot, we can see that most of the distributions are very similar except the **Jumbo** and **Empty** distributions. Although all the distributions are unimodal and roughly normal, the distribution for **Jumbo** has a significantly lower mean than the other distributions, and the distributions for **Empty**, on the other hand, has a significantly higher mean than the other distributions. Therefore, **Empty** offense formations generally tend to have higher yards gained than average. And, **Jumbo** offense formations generally tend to have lower yards gained than average.","d9498859":"In the above plot, we can once again see that the distribution of yards gained is almost identical for home and away teams.","3b562b00":"### Distribution plot","6554c470":"<center><img src=\"https:\/\/i.imgur.com\/HrT6xFJ.png\" width=\"300px\"><\/center>","b4810795":"<font size=4 color='red'>That's it! Thanks for reading my kernel. Please upvote if you found it useful or interesting :) It motivates me to produce more quality content.<\/font>","02110c13":"## Y coordinate\n\nThese are the *y*-coordinates of the players on the field during the games.","71e84133":"In the plot above, we can see that the distribution of **A** is asymmetrical, unimodal, and heavily skewed to the right. The probability density of the acceleration peaks at around **A = 1** yard per second per second. "}}