{"cell_type":{"05bff12c":"code","86bedc7d":"code","f9d72732":"code","c0fa23a3":"code","eff562a2":"code","c8483b9d":"code","e9671743":"code","9d51a5bd":"code","de711b28":"code","371e3b98":"code","5b5b9f42":"code","673c1004":"code","b4643b1d":"code","173c4ff4":"code","a9adf172":"code","092bbd34":"code","e7b0aac8":"code","0590796a":"code","48b35711":"code","912d9c13":"code","67edd967":"code","fb830d9d":"code","0f42d509":"code","6dae1345":"code","8e5cb09a":"code","04ee4624":"markdown","e90a72e0":"markdown","71a3e8ba":"markdown","b878b327":"markdown","2dc5e0ff":"markdown","81c9342b":"markdown","f911a89c":"markdown","d4934b24":"markdown","9e39652f":"markdown","d2888593":"markdown","d70bdfe7":"markdown","4581c972":"markdown"},"source":{"05bff12c":"# tensorflow_docs library installation from github\n!pip install -q git+https:\/\/github.com\/tensorflow\/docs","86bedc7d":"# Generic Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport pathlib\n\n#SKLearn Library\nfrom sklearn import preprocessing\n\n#Plotting Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#TensorFlow\/Keras Libraries\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport tensorflow_docs as tfdocs\nimport tensorflow_docs.plots\nimport tensorflow_docs.modeling","f9d72732":"#Data\nurl =  '..\/input\/house-price\/Housing_Modified.csv'\ndata = pd.read_csv(url, header='infer')","c0fa23a3":"print(\"Total Records: \",data.shape[0])","eff562a2":"#Inspect\ndata.head()","c8483b9d":"#Check for missing value\ndata.isna().sum()","e9671743":"#Stat Summary of numeric columns\ndata[['price','lotsize','bedrooms','bathrms']].describe()","9d51a5bd":"# Function to plot histogram\ndef plot_sumry(dataframe,col1,col2):\n    #plt.figure(figsize=(10,5))\n    sns.set_palette('pastel')\n    sns.set_color_codes()\n    fig = plt.figure(figsize=(15, 15))\n    plt.subplots_adjust(hspace = 0.9)\n    \n    plt.subplot(221)\n    ax1 = sns.distplot(data[col1], color = 'midnightblue')\n    plt.title(f'{col1.capitalize()} Distribution', fontsize=15)\n    \n    plt.subplot(222)\n    ax1 = sns.distplot(data[col2], color = 'midnightblue')\n    plt.title(f'{col2.capitalize()} Distribution', fontsize=15)\n    \n   ","de711b28":"#Distribution Summary of House Price\nplot_sumry(data, 'price','lotsize')","371e3b98":"# Function to plot Count Plot\ndef count_plot(dataframe,col1,col2):\n    sns.set_palette('pastel')\n    sns.set_color_codes()\n    fig = plt.figure(figsize=(15, 15))\n    plt.subplots_adjust(hspace = 0.9)\n    \n    plt.subplot(221)\n    ax1 = sns.countplot(x=col1, color = 'cornflowerblue',data=dataframe)\n    plt.title(f'Number of Houses per {col1.capitalize()}', fontsize=15)\n    \n    plt.subplot(222)\n    ax1 = sns.countplot(x=col2, color = 'cornflowerblue',data=dataframe)\n    plt.title(f'Number of Houses per {col2.capitalize()}', fontsize=15)\n    \n   ","5b5b9f42":"#Plotting a count plot\ncount_plot(data,'bedrooms','bathrms')","673c1004":"#Creating a list of categorical columns\ncat_col = data.select_dtypes(include=['object']).columns\n\n#Instantiating LabelEncoder Object\nlb_encode = preprocessing.LabelEncoder()\n\n#Iterating over the above list & encoding the columns\nfor i in cat_col:\n    data[i] = lb_encode.fit_transform(data[i])\n","b4643b1d":"#Inspect\ndata.head()","173c4ff4":"train_ds = data.sample(frac=0.9,random_state=0)\ntest_ds = data.drop(train_ds.index)","a9adf172":"print(\"Records in Training: \",train_ds.shape[0], \" \", \"Records in Testing: \", test_ds.shape[0])","092bbd34":"#Split features from labels aka target\ntrain_label = train_ds.pop('price')\ntest_label = test_ds.pop('price')","e7b0aac8":"def build_model():\n    model = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=[len(train_ds.keys())]),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1)\n    ])\n    \n    optimizer = tf.keras.optimizers.RMSprop(0.05)\n    \n    model.compile(loss='mse',\n                optimizer=optimizer,\n                metrics=['mae', 'mse'])\n    \n    return model\n\n\n#Defining Model\nmodel = build_model()","0590796a":"#Inspect Model\nmodel.summary()","48b35711":"EPOCHS = 1 \n\nhistory = model.fit(train_ds, train_label,epochs=EPOCHS, validation_split = 0.1, verbose=0, callbacks=[tfdocs.modeling.EpochDots()])","912d9c13":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.head()","67edd967":"loss, mae, mse = model.evaluate(test_ds, test_label, verbose=0)\n\nprint(\"Testing Data Mean Abs Error: {:.2f}\".format(mae))","fb830d9d":"test_pred = model.predict(test_ds).flatten()","0f42d509":"error = test_pred - test_label\nplt.hist(error, bins = 25)\nplt.xlabel(\"Prediction Error [HousePrice]\")\n_ = plt.ylabel(\"Count\")","6dae1345":"#Add a new column to test dataset\ntest_ds['HousePrice_Pred'] = test_pred\n\n#Inspect\ntest_ds.head()","8e5cb09a":"#Saving the test dataset to Output\ntest_ds.to_csv('PredictedHousePrice.csv',index=False)","04ee4624":"## Visualizing Model's Training","e90a72e0":"## Making Predictions","71a3e8ba":"## Evaluating Model","b878b327":"## Loading Data & Performing EDA","2dc5e0ff":"## Training the Model","81c9342b":"# Basic Regression on House Price (using Keras)\n\nIn this regression problem, we're aiming to predict the output of a continuous value i.e. the house price. We are going to use the Housing Price Dataset Dataset and builds a model to predict the House Price. To do this, we'll provide the model with details that affects the housing price. \n\nThis notebook is intended to be a tutorial\/beginner's guide for Regression with Keras. I will try to keep everything organized & well commented for easy reading. Please do **UPVOTE** if you find it helpful :-)\n","f911a89c":"## Processing Data\n\nThere are a lot of categorical columns that needs our special attention.\n\nWe are going to perform \"Label Encoding\" inorder to convert these categorical data into numeric format so that our models understands it.\n\nTo perform Label Encoding we're going to use LabelEncoder function from SKLearn.","d4934b24":"## Splitting Data\n\nNow that all the data in our dataset is numerical it is time for us to split the dataset into training(90%) & testing(10%) set","9e39652f":"**Note: At this stage it is usually a good practice to normalize the feature data  if they are using different scales & ranges. It makes training more difficult if the data is not normalized & also makes the resulting model dependent on the choice of units used in the input.**\n\n**However, in our case we're avoiding normalization because majority of the columns in our training dataset (train_ds) is categorical.**\n","d2888593":"## Libraries","d70bdfe7":"## Building the Model","4581c972":"## Thank You"}}