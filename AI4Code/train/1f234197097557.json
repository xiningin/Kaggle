{"cell_type":{"9f975703":"code","64e26f2b":"code","51ad8f06":"code","e72b429d":"code","0611327c":"code","6fcc5850":"code","61be9457":"code","8fa97d94":"code","4ed6b9ac":"code","8c24b57d":"code","73010852":"code","5e446e9f":"code","50699932":"code","bebd2305":"code","d293dcd6":"code","6c56b742":"code","d0d1b2b6":"code","bbfecf66":"code","1f795638":"code","fc171f4c":"code","b8eae335":"code","be1c4660":"code","03922886":"code","37318e8f":"code","0c7cfb63":"code","1bd9e5f9":"code","542ce97b":"code","c0e552c3":"code","b6e9f1de":"code","2d006a7a":"code","0743b859":"code","126e2e23":"code","59af75a6":"code","565b0b4f":"code","788612c8":"code","8d3ea374":"code","aab2ddbe":"code","4bb1516c":"code","050d7e07":"code","71b03060":"code","d0be266b":"code","3642fdf7":"code","107b5d76":"code","c6f885ca":"code","dce38330":"code","bbf0bcea":"code","368d4b88":"code","a4de1b39":"code","60b778d5":"code","579c763c":"code","bb8b2342":"code","a32e8b5a":"code","e85aa809":"code","d5edc9c2":"code","ac1669f7":"code","60601c79":"code","4b500624":"code","80b4a62c":"code","6de0dba4":"code","9f73989e":"code","e8685268":"code","8374255b":"code","24fbf6d0":"code","f56f6b3e":"code","c8bcac6d":"code","8c628484":"code","15292293":"code","550c4c7f":"code","26cb01cf":"code","c8e6e62c":"code","9c21c929":"code","189a6bfd":"code","efffafb0":"code","eb5862d3":"code","1c99b011":"code","6ee37aaa":"code","23a4b422":"code","bb857fca":"code","371f1ba7":"code","cb3af518":"code","edbdb2f5":"code","1998df02":"code","e9ba9ba8":"code","aa4e4f8c":"code","353c6cdc":"code","84ab8d6a":"code","557f0118":"code","9116d98b":"code","14206aeb":"code","7c123e63":"code","3fc986ff":"code","2327cec2":"markdown","76e8a8b6":"markdown","13d97f4f":"markdown","5b9206ec":"markdown","d98b65d6":"markdown","b87b8fa7":"markdown","db6d67da":"markdown","6db090f2":"markdown","5c5c3354":"markdown","0ff6e4e3":"markdown","f2439657":"markdown","f6286cda":"markdown","6ae82b53":"markdown","ef0f387f":"markdown","8b6055b1":"markdown","e1c79eef":"markdown","0410df6d":"markdown","c8643699":"markdown","b1cf5208":"markdown","3e0b860d":"markdown","c0f32b53":"markdown","6532d974":"markdown","cca55b62":"markdown","3137a1cc":"markdown","8b10e39a":"markdown","505fd6e0":"markdown","331a948c":"markdown","9c907432":"markdown","e9df8fb2":"markdown","895f3f82":"markdown","c75e40b1":"markdown","ed7d4b94":"markdown"},"source":{"9f975703":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\ndef heatmap(x, y, **kwargs):\n    if 'color' in kwargs:\n        color = kwargs['color']\n    else:\n        color = [1]*len(x)\n\n    if 'palette' in kwargs:\n        palette = kwargs['palette']\n        n_colors = len(palette)\n    else:\n        n_colors = 256 # Use 256 colors for the diverging color palette\n        palette = sns.color_palette(\"Blues\", n_colors) \n\n    if 'color_range' in kwargs:\n        color_min, color_max = kwargs['color_range']\n    else:\n        color_min, color_max = min(color), max(color) # Range of values that will be mapped to the palette, i.e. min and max possible correlation\n\n    def value_to_color(val):\n        if color_min == color_max:\n            return palette[-1]\n        else:\n            val_position = float((val - color_min)) \/ (color_max - color_min) # position of value in the input range, relative to the length of the input range\n            val_position = min(max(val_position, 0), 1) # bound the position betwen 0 and 1\n            ind = int(val_position * (n_colors - 1)) # target index in the color palette\n            return palette[ind]\n\n    if 'size' in kwargs:\n        size = kwargs['size']\n    else:\n        size = [1]*len(x)\n\n    if 'size_range' in kwargs:\n        size_min, size_max = kwargs['size_range'][0], kwargs['size_range'][1]\n    else:\n        size_min, size_max = min(size), max(size)\n\n    size_scale = kwargs.get('size_scale', 500)\n\n    def value_to_size(val):\n        if size_min == size_max:\n            return 1 * size_scale\n        else:\n            val_position = (val - size_min) * 0.99 \/ (size_max - size_min) + 0.01 # position of value in the input range, relative to the length of the input range\n            val_position = min(max(val_position, 0), 1) # bound the position betwen 0 and 1\n            return val_position * size_scale\n    if 'x_order' in kwargs: \n        x_names = [t for t in kwargs['x_order']]\n    else:\n        x_names = [t for t in sorted(set([v for v in x]))]\n    x_to_num = {p[1]:p[0] for p in enumerate(x_names)}\n\n    if 'y_order' in kwargs: \n        y_names = [t for t in kwargs['y_order']]\n    else:\n        y_names = [t for t in sorted(set([v for v in y]))]\n    y_to_num = {p[1]:p[0] for p in enumerate(y_names)}\n\n    plot_grid = plt.GridSpec(1, 15, hspace=0.2, wspace=0.1) # Setup a 1x10 grid\n    ax = plt.subplot(plot_grid[:,:-1]) # Use the left 14\/15ths of the grid for the main plot\n\n    marker = kwargs.get('marker', 's')\n\n    kwargs_pass_on = {k:v for k,v in kwargs.items() if k not in [\n         'color', 'palette', 'color_range', 'size', 'size_range', 'size_scale', 'marker', 'x_order', 'y_order'\n    ]}\n\n    ax.scatter(\n        x=[x_to_num[v] for v in x],\n        y=[y_to_num[v] for v in y],\n        marker=marker,\n        s=[value_to_size(v) for v in size], \n        c=[value_to_color(v) for v in color],\n        **kwargs_pass_on\n    )\n    ax.set_xticks([v for k,v in x_to_num.items()])\n    ax.set_xticklabels([k for k in x_to_num], rotation=45, horizontalalignment='right')\n    ax.set_yticks([v for k,v in y_to_num.items()])\n    ax.set_yticklabels([k for k in y_to_num])\n\n    ax.grid(False, 'major')\n    ax.grid(True, 'minor')\n    ax.set_xticks([t + 0.5 for t in ax.get_xticks()], minor=True)\n    ax.set_yticks([t + 0.5 for t in ax.get_yticks()], minor=True)\n\n    ax.set_xlim([-0.5, max([v for v in x_to_num.values()]) + 0.5])\n    ax.set_ylim([-0.5, max([v for v in y_to_num.values()]) + 0.5])\n    ax.set_facecolor('#F1F1F1')\n\n    # Add color legend on the right side of the plot\n    if color_min < color_max:\n        ax = plt.subplot(plot_grid[:,-1]) # Use the rightmost column of the plot\n\n        col_x = [0]*len(palette) # Fixed x coordinate for the bars\n        bar_y=np.linspace(color_min, color_max, n_colors) # y coordinates for each of the n_colors bars\n\n        bar_height = bar_y[1] - bar_y[0]\n        ax.barh(\n            y=bar_y,\n            width=[5]*len(palette), # Make bars 5 units wide\n            left=col_x, # Make bars start at 0\n            height=bar_height,\n            color=palette,\n            linewidth=0\n        )\n        ax.set_xlim(1, 2) # Bars are going from 0 to 5, so lets crop the plot somewhere in the middle\n        ax.grid(False) # Hide grid\n        ax.set_facecolor('white') # Make background white\n        ax.set_xticks([]) # Remove horizontal ticks\n        ax.set_yticks(np.linspace(min(bar_y), max(bar_y), 3)) # Show vertical ticks for min, middle and max\n        ax.yaxis.tick_right() # Show vertical ticks on the right \n\ndef corrplot(data, size_scale=500, marker='s'):\n    corr = pd.melt(data.reset_index(), id_vars='index')\n    corr.columns = ['x', 'y', 'value']\n    heatmap(\n        corr['x'], corr['y'],\n        color=corr['value'], color_range=[-1, 1],\n        palette=sns.diverging_palette(20, 220, n=256),\n        size=corr['value'].abs(), size_range=[0,1],\n        marker=marker,\n        x_order=data.columns,\n        y_order=data.columns[::-1],\n        size_scale=size_scale\n    )\n\n    \ndef sorted_bar_plot(groupby_object,x,y):\n    res = groupby_object.aggregate(np.mean).reset_index().sort_values(y)\n    pl = sns.barplot(x=x,y=y,data=res,order=res[x])\n    for item in pl.get_xticklabels():\n        item.set_rotation(90)","64e26f2b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nimport sklearn\n\nimport os\nos.chdir(\"..\/input\/titanic\/\")","51ad8f06":"sklearn.__version__","e72b429d":"df_train = pd.read_csv(\".\/train.csv\")\ndf_test = pd.read_csv(\".\/test.csv\")\n\n# In case of something happening, to avoid running all cells from beginning.\ndf_train_raw = df_train.copy()\ndf_test_raw = df_test.copy()","0611327c":"df_train.dtypes","6fcc5850":"df_train.describe()","61be9457":"df_train.head()","8fa97d94":"df_train.isnull().sum()","4ed6b9ac":"corrplot(df_train.corr())","8c24b57d":"df_train.Survived.value_counts(normalize=True)","73010852":"df_train.PassengerId.head().append(df_train.PassengerId.tail())","5e446e9f":"sns.boxplot(df_train.Survived,df_train.PassengerId)","50699932":"df_train.drop(\"PassengerId\",axis=1,inplace=True)\ndf_test.drop(\"PassengerId\",axis=1,inplace=True)","bebd2305":"df_train.Pclass.head().append(df_train.Pclass.tail())","d293dcd6":"df_train.Pclass.value_counts()","6c56b742":"sns.boxplot(df_train.Survived,df_train.Pclass,df_train.Sex)","d0d1b2b6":"c = df_train.groupby([\"Pclass\",\"Survived\"])[\"Pclass\"].sum()\nc \/ c.groupby(level=[0]).transform(\"sum\")  * 100","bbfecf66":"sns.barplot(df_train.Pclass,df_train.Fare)","1f795638":"df_train.corr().Survived","fc171f4c":"df_train.drop(\"Fare\",axis=1,inplace=True)\ndf_test.drop(\"Fare\",axis=1,inplace=True)","b8eae335":"df_train.Name.head().append(df_train.Name.tail())","be1c4660":"df_train.Name.value_counts()[:10]","03922886":"df_train[\"Title\"] = df_train.Name.str.extract(r\"([A-Za-z]+[.])\")\ndf_test[\"Title\"] = df_test.Name.str.extract(r\"([A-Za-z]+[.])\")","37318e8f":"df_train.Title.value_counts()","0c7cfb63":"group = df_train.groupby(\"Title\")[\"Survived\"]\nsorted_bar_plot(group,\"Title\",\"Survived\")","1bd9e5f9":"title_low = [\"Capt\",\"Don\",\"Rev\",\"Mr\"]\ntitle_medium = [\"Dr\",\"Col\",\"Major\",\"Master\"]\ntitle_high = [\"Miss\",\"Mrs\",\"Mile\",\"Mme\",\"Countess\",\"Ms\",\"Lady\",\"Sir\"]\n\ntitle_group = {}\nfor tl in title_low:\n    title_group[tl+\".\"] = \"Low\"\nfor tm in title_medium:\n    title_group[tm+\".\"] = \"Medium\"\nfor th in title_high:\n    title_group[th+\".\"] = \"High\"\n    \n    \ndf_train[\"Title_Group_Impact\"] = df_train.Title.map(title_group)\ndf_test[\"Title_Group_Impact\"] = df_test.Title.map(title_group)","542ce97b":"df_train.Title_Group_Impact.head()","c0e552c3":"group = df_train.groupby(\"Title_Group_Impact\")[\"Survived\"]\nsorted_bar_plot(group,\"Title_Group_Impact\",\"Survived\")","b6e9f1de":"sns.boxplot(df_train.Title_Group_Impact,df_train.Survived)","2d006a7a":"sns.barplot(df_train.Survived,df_train.Sex)","0743b859":"df_train.Age.isnull().sum() \/ len(df_train.Age) * 100","126e2e23":"median_age = df_train.groupby(\"Title\").Age.aggregate(np.median).sort_values(ascending=False).to_dict()","59af75a6":"nan_ages_train = list(df_train.loc[df_train.Age.isnull()].index)\nnan_ages_test = list(df_test.loc[df_test.Age.isnull()].index)","565b0b4f":"for i in nan_ages_train:\n    df_train.ix[i,\"Age\"] = median_age[df_train.ix[i,\"Title\"]]\n\nfor i in nan_ages_test:\n    df_test.ix[i,\"Age\"] = median_age[df_test.ix[i,\"Title\"]]","788612c8":"sns.distplot(df_train.Age)","8d3ea374":"sns.boxplot(df_train.Survived,df_train.Age)","aab2ddbe":"sns.barplot(df_train.SibSp,df_train.Survived)","4bb1516c":"sns.barplot(df_train.Parch,df_train.Survived)","050d7e07":"df_train[\"Family_Size\"] = df_train.SibSp + df_train.Parch\ndf_test[\"Family_Size\"] = df_test.SibSp + df_test.Parch","71b03060":"group = df_train.groupby(\"Family_Size\")[\"Survived\"]\nsorted_bar_plot(group,\"Family_Size\",\"Survived\")","d0be266b":"def family_size_impact(x):\n    if x in [1,2,3]:\n        return \"High\"\n    return \"Low\"\n\ndf_train[\"Family_Size_Impact\"] = df_train.Family_Size.map(family_size_impact)\ndf_test[\"Family_Size_Impact\"] = df_test.Family_Size.map(family_size_impact)\n","3642fdf7":"sns.barplot(df_train.Survived,df_train.Family_Size_Impact)","107b5d76":"df_train.drop(\"Ticket\",axis=1,inplace=True)\ndf_test.drop(\"Ticket\",axis=1,inplace=True)","c6f885ca":"df_train.drop(\"Cabin\",axis=1,inplace=True)\ndf_test.drop(\"Cabin\",axis=1,inplace=True)","dce38330":"df_train.head(n=2)","bbf0bcea":"df_train.dtypes","368d4b88":"df_train.drop([\"Name\",\"SibSp\",\"Parch\",\"Embarked\",\"Title\",\"Family_Size\"],axis=1,inplace=True)\ndf_test.drop([\"Name\",\"SibSp\",\"Parch\",\"Embarked\",\"Title\",\"Family_Size\"],axis=1,inplace=True)","a4de1b39":"title_group_impact_ordinal_value = {\"High\":3,\"Medium\":2,\"Low\":1}\nfamily_size_impact_ordinal_value = {\"High\":2,\"Low\":1}\n\ndf_train.Family_Size_Impact = df_train.Family_Size_Impact.map(family_size_impact_ordinal_value)\ndf_test.Family_Size_Impact = df_test.Family_Size_Impact.map(family_size_impact_ordinal_value)\n\ndf_train.Title_Group_Impact = df_train.Title_Group_Impact.map(title_group_impact_ordinal_value)\ndf_test.Title_Group_Impact = df_test.Title_Group_Impact.map(title_group_impact_ordinal_value)\n","60b778d5":"min_max_scaler = MinMaxScaler()\ndf_train.Age = min_max_scaler.fit_transform(np.array(df_train.Age).reshape(-1,1))\ndf_test.Age = min_max_scaler.fit_transform(np.array(df_test.Age).reshape(-1,1))","579c763c":"print(df_train.Age.min(),df_train.Age.max())\nprint(df_test.Age.min(),df_test.Age.max())","bb8b2342":"df_train.Survived = pd.Categorical(df_train.Survived)","a32e8b5a":"df_train.dtypes","e85aa809":"df_train.Title_Group_Impact = pd.Series(np.array(df_train.Title_Group_Impact,dtype=\"int64\"))\ndf_test.Title_Group_Impact = pd.Series(np.array(df_test.Title_Group_Impact,dtype=\"int64\"))","d5edc9c2":"df_train.dtypes","ac1669f7":"df_train.head()","60601c79":"df_test.head()","4b500624":"def male(x):\n    if x == \"male\":\n        return 1\n    return 0\n\ndf_train[\"male\"] = df_train.Sex.map(male)\ndf_test[\"male\"] = df_test.Sex.map(male)\n\ndf_train.drop(\"Sex\",axis=1,inplace=True)\ndf_test.drop(\"Sex\",axis=1,inplace=True)","80b4a62c":"df_train.male = pd.Categorical(df_train.male)\ndf_test.male = pd.Categorical(df_test.male)","6de0dba4":"df_train.head()","9f73989e":"df_train.dtypes","e8685268":"df_test.dtypes","8374255b":"from sklearn.model_selection import train_test_split, cross_val_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import LinearSVC, SVC\n\nfrom sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier, AdaBoostClassifier\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfrom sklearn.metrics import accuracy_score\n\n","24fbf6d0":"X = df_train.drop(\"Survived\",axis=1)\ny = df_train.Survived","f56f6b3e":"X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.3, shuffle=True)","c8bcac6d":"X_train.shape, y_train.shape, X_val.shape, y_val.shape","8c628484":"log_reg = LogisticRegression(solver=\"lbfgs\")\nlog_reg.fit(X_train,y_train)\ny_pred = log_reg.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","15292293":"cross_val_score(log_reg,X_train,y_train,cv=20).mean()","550c4c7f":"gnb = GaussianNB()\ngnb.fit(X_train,y_train)\ny_pred = gnb.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","26cb01cf":"cross_val_score(gnb,X_train,y_train,cv=20).mean()","c8e6e62c":"svc = SVC(gamma=\"auto\")\nsvc.fit(X_train,y_train)\ny_pred = svc.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","9c21c929":"cross_val_score(svc,X_train,y_train,cv=20).mean()","189a6bfd":"l_svc = LinearSVC(max_iter=5000)\nl_svc.fit(X_train,y_train)\ny_pred = l_svc.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)\n","efffafb0":"cross_val_score(l_svc,X_train,y_train,cv=20).mean()","eb5862d3":"etc = ExtraTreesClassifier()\netc.fit(X_train,y_train)\ny_pred = etc.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","1c99b011":"cross_val_score(etc,X_train,y_train,cv=20).mean()","6ee37aaa":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","23a4b422":"cross_val_score(rf,X_train,y_train,cv=20).mean()","bb857fca":"ab = AdaBoostClassifier()\nab.fit(X_train,y_train)\ny_pred = ab.predict(X_val)\nprint(\"Accuracy Score: \", accuracy_score(y_val,y_pred)*100)","371f1ba7":"cross_val_score(ab,X_train,y_train,cv=20).mean()","cb3af518":"model = Sequential()\nmodel.add(Dense(16,activation=\"relu\",input_shape=(5,)))\nmodel.add(Dense(32,activation=\"relu\"))\nmodel.add(Dense(64,activation=\"relu\"))\nmodel.add(Dense(8,activation=\"tanh\"))\nmodel.add(Dense(1,activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","edbdb2f5":"fitted = model.fit(X_train,y_train,epochs=9,validation_data=(X_val,y_val))","1998df02":"model = Sequential()\nmodel.add(Dense(16,activation=\"relu\",input_shape=(5,)))\nmodel.add(Dense(32,activation=\"relu\"))\nmodel.add(Dense(64,activation=\"relu\"))\nmodel.add(Dense(8,activation=\"tanh\"))\nmodel.add(Dense(1,activation=\"sigmoid\"))\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","e9ba9ba8":"model.fit(X,y,epochs=9)","aa4e4f8c":"y_pred = model.predict(df_test)","353c6cdc":"final_ans = []\n\nfor i in y_pred:\n    if i >= 0.5:\n        final_ans.append(1)\n    else:\n        final_ans.append(0)","84ab8d6a":"test = pd.read_csv(\".\/test.csv\")","557f0118":"ans = pd.DataFrame({\"PassengerId\":test.PassengerId,\"Survived\":final_ans})\nans.set_index(\"PassengerId\",inplace=True)","9116d98b":"ans.head()","14206aeb":"#ans.to_csv(\"keras_submission.csv\")","7c123e63":"svc = SVC(gamma=\"auto\")\nsvc.fit(X,y)\ny_pred = etc.predict(df_test)\nfinal_ans = []\n\nfor i in y_pred:\n    if i >= 0.5:\n        final_ans.append(1)\n    else:\n        final_ans.append(0)\nans = pd.DataFrame({\"PassengerId\":test.PassengerId,\"Survived\":final_ans})\nans.set_index(\"PassengerId\",inplace=True)","3fc986ff":"#ans.to_csv(\"ETC_submission.csv\")","2327cec2":"## Name","76e8a8b6":"About 63% of people in Pclass 1 (Upper Class) survived whereas about only 25% of people in Pclass 2 Survived.","13d97f4f":"## Pclass and Fare","5b9206ec":"## Correlation Matrix","d98b65d6":"\n## HELPER FUNCTIONS\nCredits:\n1) https:\/\/towardsdatascience.com\/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec","b87b8fa7":"## Kaggle Hidden Test Data: 70.33% Accuracy","db6d67da":"### One Hot Encoding (Like Dummies)","6db090f2":"The People who did not survived belongining to Pclass 2 & 3 were mostly males.","5c5c3354":"Nothing to do","0ff6e4e3":"## Age","f2439657":"#### Normalization","f6286cda":"Again Groups..","6ae82b53":"The Title in the name of the person can be useful","ef0f387f":"# Let's Start MODEL BUILDING","8b6055b1":"## Pclass","e1c79eef":"## High > Medium > Low, Ordinal Values...","0410df6d":"### Extra Trees Classifier Submission","c8643699":"### KERAS SUBMISSION","b1cf5208":"## Kaggle Hidden Test Data: 77.51% Accuracy","3e0b860d":"### Target Analysis","c0f32b53":"## Preprocessing","6532d974":"Since Pclass is more correlated (0.33) than Fare (0.25) with Survived and Pclass and Fare are related, we will drop Fare","cca55b62":"We can create 3 groups (bins)","3137a1cc":"Disclaimer: Not the best approach, assigning numbers to Labels in some cases","8b10e39a":"The target variable Survived is negatively correlated with Pclass.  \nThe independent features Pclass and fare are also negatively correlated.  \nWe want independent features to be truly independent.","505fd6e0":"Importing Data","331a948c":"No relation with Survivabiltity","9c907432":"## Siblings, Spouse and Parent ,Children","e9df8fb2":"## Getting Familar with data","895f3f82":"Pclass 1 (Upper) pays a higher fare.","c75e40b1":"## Sex","ed7d4b94":"## Passenger ID"}}