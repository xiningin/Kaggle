{"cell_type":{"6abc87db":"code","5552dc7f":"code","355c21ae":"code","0aad2e0d":"code","81bebcdb":"code","d2442b1b":"code","d14f66bc":"code","effca1d1":"code","37be6dd6":"code","9b55da38":"code","a9ef6c6a":"code","ec4525f0":"code","77acabfd":"code","2eca5d38":"code","214d067a":"code","84a0218d":"code","c403e582":"code","0aaf4f73":"code","aa28f0d6":"code","e2ac135a":"code","d4200fa6":"code","47018d3e":"code","f3413d56":"code","e000b4d1":"code","2b659eca":"code","bde16cb6":"code","71104e71":"code","46ecf8ae":"code","b75b6e5d":"code","3c6eda64":"code","dd89625f":"code","f9db689b":"code","25cd8288":"code","f627de4e":"code","6718e782":"code","655b843e":"code","498c3ad2":"code","d39726ca":"code","4bba64ad":"code","6f6eef27":"code","1bc77c9e":"code","08b31ec2":"code","e36898cc":"code","c5fd35cb":"code","d47def84":"code","35d5c95d":"markdown","0a76963d":"markdown","3266f153":"markdown","68099392":"markdown","af9a482c":"markdown","8ee0241f":"markdown","3d5cf859":"markdown","31814230":"markdown","2a82537a":"markdown","e2d3619b":"markdown","a46f5925":"markdown","beeb5cbe":"markdown","272401b5":"markdown","cc91e0c6":"markdown"},"source":{"6abc87db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5552dc7f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nfrom pandas.plotting import lag_plot\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom datetime import datetime\n\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.seasonal import seasonal_decompose \n      \nfrom statsmodels.tools.eval_measures import rmse\nimport warnings\nwarnings.filterwarnings(\"ignore\")","355c21ae":"data=pd.read_csv(\"..\/input\/perrin-freres-monthly-champagne-sales\/Perrin Freres monthly champagne sales millions.csv\")","0aad2e0d":"data","81bebcdb":"data.info()","d2442b1b":"data.describe(include='all').T","d14f66bc":"#s\u00fctun ad\u0131 de\u011fi\u015ftirme \ndata=data.rename(columns={'Perrin Freres monthly champagne sales millions ?64-?72': 'Sales'})\ndata.head()","effca1d1":"data.isnull().sum()","37be6dd6":"data[data.isna().any(axis=1)]","9b55da38":"#etkisiz iki de\u011fi\u015fken kay\u0131p,veriden \u00e7\u0131karal\u0131m.\ndata=data.dropna()","a9ef6c6a":"data.isnull().sum()","ec4525f0":"len(data)","77acabfd":"data.describe()","2eca5d38":"data.Month = pd.to_datetime(data.Month)\ndata = data.set_index(\"Month\")\ndata.head()","214d067a":"#go.scatter ile detayl\u0131 g\u00f6rsell\u015ftime sa\u011flayabiliriz.Grafi\u011fin \u00fczerine geldi\u011fimizde ay ve y\u0131l baz\u0131nda sat\u0131\u015flar\u0131 g\u00f6rebiliriz.\nvis=go.Scatter(x=data.index, y=data.Sales)\npy.iplot([vis])","84a0218d":"decomp = seasonal_decompose(data['Sales'], model='multiplicative')\nfig=decomp.plot()\nfig.set_size_inches(15,10)\nfig.suptitle('Decomposition plot')\nplt.show()","c403e582":"#H0:Zaman serisinin bir birim k\u00f6k\u00fc var, yani seri dura\u011fan de\u011fil.\n#H1:Zaman serisinin bir birim k\u00f6k\u00fc yok, yani seri dura\u011fand\u0131r.\n\ndef adf_test(timeseries):\n    \n    print ('Dickey-Fuller Test Sonucu:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test \u0130statisti\u011fi','p-value','#Lags ','G\u00f6zlem say\u0131s\u0131'])\n    for key,value in dftest[4].items():\n       dfoutput['Kritik De\u011fer (%s)'%key] = value\n    print (dfoutput)\n\n\nadf_test(data['Sales'])","0aaf4f73":"pip install pmdarima","aa28f0d6":"from pmdarima.arima import auto_arima\n\nauto_arima(data['Sales'], seasonal=True, m=12,start_p=0, \n           start_q=0, max_P=5, max_D=5,max_Q=5).summary()","e2ac135a":"train = data[:len(data)-12]\ntest= data[len(data)-12:]","d4200fa6":"test","47018d3e":"arima_model = SARIMAX(train['Sales'], order = (0,0,1),\n                      seasonal_order = (1,1,[],12))\narima_result = arima_model.fit()\narima_result.summary()","f3413d56":"sarima_pred = arima_result.predict(start = len(train), end = len(data)-1, typ=\"levels\").rename(\"SARIMA Tahmini\")\n\ndata['Sales'].plot(figsize = (15,6), legend=True)\nsarima_pred.plot(legend = True);","e000b4d1":"test['Sales'].plot(figsize = (15,5), legend=True)\nsarima_pred.plot(legend = True);\nrmse_sarima = rmse(test['Sales'], sarima_pred)\nprint('RMSE: %.3f' % rmse_sarima)","2b659eca":"len(data)","bde16cb6":"yeni_sarima_tahmin = arima_result.predict(start =104 , end = 116, dynamic= True).rename(\"SARIMA Tahmini\")  \ndata['Sales'].plot(figsize = (15,6), legend=True)\nyeni_sarima_tahmin.plot(legend = True);","71104e71":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_train=scaler.fit_transform(np.array(train).reshape(-1,1))\nscaled_test = scaler.transform(np.array(test).reshape(-1,1))","46ecf8ae":"scaled_test.shape,scaled_train.shape","b75b6e5d":"n_input = 12\nn_features= 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input,\n                                batch_size=1)\nmodel = Sequential()\nmodel.add(LSTM(300, activation='relu', input_shape=(12, 1)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.summary()","3c6eda64":"model.fit_generator(generator, epochs=100)","dd89625f":"losses_lstm = model.history.history['loss']\nplt.figure(figsize=(12,4))\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(range(len(losses_lstm)),losses_lstm);","f9db689b":"rescaled_test =scaled_test.reshape(scaled_test.shape[0],scaled_test.shape[1] , 1)\n\nlstm_tahmin = model.predict(rescaled_test)","25cd8288":"lstm_tahmin_retrans = scaler.inverse_transform(lstm_tahmin)\n\nlstm_tahmin_testten=lstm_tahmin_retrans.reshape(lstm_tahmin_retrans.shape[0])\nlstm_tahmin_testten_ser = pd.Series(lstm_tahmin_testten, index=test.index)","f627de4e":"lstm_tahmin_testten_ser","6718e782":"lstm_tahmin_testten_ser.plot(figsize = (15,5), legend=True)\ntest['Sales'].plot(legend = True);\nrmse_lstm = rmse(test['Sales'], lstm_tahmin_testten_ser)\nprint('RMSE: %.3f' % rmse_lstm)","655b843e":"lstm_tahmin_scaled=list()\nbatch = scaled_train[-12:]\ncurrent_batch = batch.reshape((1, 12, 1))\nfor i in range(len(test)):   \n    lstm_tahmin = model.predict(current_batch)[0]\n    lstm_tahmin_scaled.append(lstm_tahmin) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_tahmin]],axis=1)","498c3ad2":"lstm_tahmin_ekst = scaler.inverse_transform(lstm_tahmin_scaled)\n\nlstm_tahmin_reshape=lstm_tahmin_ekst.reshape(lstm_tahmin_ekst.shape[0])\nlstm_tahmin_ekst_ser=pd.Series(lstm_tahmin_reshape,index=test.index)","d39726ca":"lstm_tahmin_ekst_ser.plot(figsize = (15,5), legend=True)\ntest['Sales'].plot(legend = True);\nrmse_lstm = rmse(test['Sales'], lstm_tahmin_ekst_ser)\nprint('RMSE: %.3f' % rmse_lstm)","4bba64ad":"data","6f6eef27":"df = data.copy()\ndf = df.reset_index()\ndf.columns = ['ds','y'] \n\ntrain_pr = df.iloc[:len(data)-12]\ntest_pr = df.iloc[len(data)-12:]\n\nfrom fbprophet import Prophet\n\nmodel_p = Prophet()\nmodel_p.fit(train_pr)\nfuture = model_p.make_future_dataframe(periods=12,freq='MS')\n\nprophet_pred = model_p.predict(future)\nprophet_pred.tail()","1bc77c9e":"prophet_pred = pd.DataFrame({\"Tarih\" : prophet_pred[-12:]['ds'], \n                             \"Prophet_Tahmin\" : prophet_pred[-12:][\"yhat\"]})\nprophet_pred = prophet_pred.set_index(\"Tarih\")\nprophet_pred.index.freq = \"MS\"\nprophet_pred","08b31ec2":"prophet_pred['Prophet_Tahmin'].plot(figsize = (15,5), legend=True)\ntest['Sales'].plot(legend = True);\nrmse_lstm = rmse(test['Sales'], prophet_pred['Prophet_Tahmin'])\nprint('RMSE: %.3f' % rmse_lstm)","e36898cc":"from pandas.tseries.offsets import DateOffset\n\ntahmin=[data.index[-1]+ DateOffset(months=x)for x in range(0,13)]\ntahmin_datas\u0131=pd.DataFrame(index=tahmin[1:])\n\ntahmin_datas\u0131","c5fd35cb":"tahmin_datas\u0131['SARIMA_Tahmin']=yeni_sarima_tahmin\ntahmin_datas\u0131['LSTM_Tahmin']=lstm_tahmin_ekst\ntahmin_datas\u0131['Prophet_Tahmin']=prophet_pred['Prophet_Tahmin'].values","d47def84":"tahmin_datas\u0131","35d5c95d":"# Kay\u0131p De\u011fi\u015fken Analizi","0a76963d":"# Prophet ile Tahmin","3266f153":"*Sonu\u00e7 olarak en az hata de\u011ferini SARIMAX modelinin sonucu vermektedir.LSTM ise Prophet modelinden daha iyi sonu\u00e7 vermi\u015ftir.*","68099392":"01-1964'ten 10-1972'ye kadar elimizde veri var.\n\n**Garifk Yorum** :Seride mevsimsellik var ve trend zamanla art\u0131yor gibi duruyor.Mevsimsellikten kaynakl\u0131 dura\u011fan bir seri de\u011fil.Dura\u011fanl\u0131\u011f\u0131 daha iyi anlamak i\u00e7in ADF testi yap\u0131lmal\u0131.","af9a482c":"# ADF Test #","8ee0241f":"# Train\/Test Ayr\u0131m\u0131\n**Son 12 ayl\u0131k veri test olarak kalan veri de train olarak ayr\u0131ld\u0131.Tahmin 12 ayl\u0131\u011f\u0131 kapsayacak yani Ekim 1972'den Eyl\u00fcl 1973'e kadar.**","3d5cf859":"Seride mevsimsellik var bu y\u00fczden ARIMA yerine SARIMA (Mevsimsel ARIMA) kullan\u0131lacak.Hem veride tek bir de\u011fi\u015fken var ve SARIMA tek de\u011fi\u015fkenli zaman serisi verilerini mevsimsel bir bile\u015fenle destekledi\u011finden uygun bir model olacakt\u0131r.","31814230":"# \u0130statiksel Analiz ve G\u00f6rselle\u015ftirme","2a82537a":"**Test Seti ile Tahmin Edelim**","e2d3619b":"# LSTM ile Tahmin","a46f5925":"# SARIMA modeli","beeb5cbe":"* Dura\u011fanl\u0131k Testi sonucuna g\u00f6re  p-de\u011feri> 0.05 oldu\u011fundan H0 reddedilemez (yani kabul),verinin bir birim k\u00f6k\u00fc vard\u0131r ve seri dura\u011fan de\u011fildir.(ayn\u0131 zamanada test istatisti\u011fi de kritik de\u011ferden b\u00fcy\u00fck)\n","272401b5":"# Sonu\u00e7lar\u0131 G\u00f6steren DataFrame Olu\u015fturma","cc91e0c6":"**Ekstrapolasyon (Tek de\u011fi\u015fkenli zaman serisi tahmini) ile Tahmin Edelim**"}}