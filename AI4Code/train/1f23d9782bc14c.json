{"cell_type":{"4c3363a7":"code","58120763":"code","971d581c":"code","10430162":"code","19d1d1e3":"code","744897b4":"code","3d8d741e":"code","1ee1039d":"code","f7eb116b":"code","3069964e":"code","11987f9d":"code","823f0ad7":"code","e98f4d96":"code","f4e04fd7":"code","c9d0d4e4":"code","50a11502":"code","fc2e5104":"code","5932d891":"code","61f64db1":"code","1706ceac":"code","7f92e5ee":"code","e06a7f49":"code","6eef83c1":"code","c95d772d":"code","f62b1768":"code","0ee416fd":"code","4ea8e954":"code","ca8f290d":"code","c98b93df":"code","5bf875b5":"markdown","46382f4e":"markdown","9cedcea0":"markdown","ed3a9846":"markdown","95360930":"markdown","ecd5046f":"markdown","a2cda8e6":"markdown","bcf720d5":"markdown","ba342ac2":"markdown","1a55acd1":"markdown","9e77d052":"markdown","719798aa":"markdown","ac903a5a":"markdown","3d792200":"markdown","38e43689":"markdown","992b995e":"markdown","99fc7464":"markdown","581057ae":"markdown","f7f54e63":"markdown","2c89a19e":"markdown","76975d61":"markdown","62d3e14d":"markdown","ecc0631f":"markdown","06955394":"markdown","d94deddf":"markdown","9c2d53ed":"markdown","9e4db801":"markdown","8c54ba54":"markdown","dfb661e0":"markdown","22ec122c":"markdown","4abd56b4":"markdown","aee37b94":"markdown","dc630d74":"markdown","ec94e9d9":"markdown","13d004ab":"markdown","5646dbde":"markdown","0b18a216":"markdown","7345092e":"markdown","41940bf5":"markdown","e8b6c878":"markdown","56ada13d":"markdown","52c9d4bc":"markdown","9b82fb0e":"markdown","9d712454":"markdown","a7561cc7":"markdown","c48245cc":"markdown","e3666b37":"markdown","56a88c0d":"markdown","f063be50":"markdown","1424e9a2":"markdown","d38683c3":"markdown","844ecad4":"markdown","20e355e7":"markdown","bec9f057":"markdown","182150f7":"markdown","0c403771":"markdown","5eb3ffcb":"markdown"},"source":{"4c3363a7":"# demo_mongodb_test.py:\nimport pymongo\n","58120763":"# Create a database called \"mydatabase\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\n\nmydb = myclient[\"mydatabase\"]\n","971d581c":"# Return a list of your system's databases:\nprint(myclient.list_database_names())","10430162":"# Or you can check a specific database by name:\n\n# Check if \"mydatabase\" exists:\n\ndblist = myclient.list_database_names()\nif \"mydatabase\" in dblist:\n    print(\"The database exists.\")","19d1d1e3":"# Create a collection called \"customers\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\n\nmycol = mydb[\"customers\"]","744897b4":"# Return a list of all collections in your database:\nprint(mydb.list_collection_names())","3d8d741e":"# Or you can check a specific collection by name:\n# Check if the \"customers\" collection exists:\ncollist = mydb.list_collection_names()\nif \"customers\" in collist:\n    print(\"The collection exists.\")\n\n","1ee1039d":"# Insert a record in the \"customers\" collection:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydict = { \"name\": \"John\", \"address\": \"Highway 37\" }\n\nx = mycol.insert_one(mydict)\n","f7eb116b":"mydict = { \"name\": \"Peter\", \"address\": \"Lowstreet 27\" }\n\nx = mycol.insert_one(mydict)\n\nprint(x.inserted_id)","3069964e":"import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmylist = [\n  { \"name\": \"Amy\", \"address\": \"Apple st 652\"},\n  { \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\n  { \"name\": \"Michael\", \"address\": \"Valley 345\"},\n  { \"name\": \"Sandy\", \"address\": \"Ocean blvd 2\"},\n  { \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\n  { \"name\": \"Richard\", \"address\": \"Sky st 331\"},\n  { \"name\": \"Susan\", \"address\": \"One way 98\"},\n  { \"name\": \"Vicky\", \"address\": \"Yellow Garden 2\"},\n  { \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\n  { \"name\": \"William\", \"address\": \"Central st 954\"},\n  { \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\n  { \"name\": \"Viola\", \"address\": \"Sideway 1633\"}\n]\n\nx = mycol.insert_many(mylist)\n\n#print list of the _id values of the inserted documents:\nprint(x.inserted_ids)","11987f9d":"import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmylist = [\n  { \"_id\": 1, \"name\": \"John\", \"address\": \"Highway 37\"},\n  { \"_id\": 2, \"name\": \"Peter\", \"address\": \"Lowstreet 27\"},\n  { \"_id\": 3, \"name\": \"Amy\", \"address\": \"Apple st 652\"},\n  { \"_id\": 4, \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\n  { \"_id\": 5, \"name\": \"Michael\", \"address\": \"Valley 345\"},\n  { \"_id\": 6, \"name\": \"Sandy\", \"address\": \"Ocean blvd 2\"},\n  { \"_id\": 7, \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\n  { \"_id\": 8, \"name\": \"Richard\", \"address\": \"Sky st 331\"},\n  { \"_id\": 9, \"name\": \"Susan\", \"address\": \"One way 98\"},\n  { \"_id\": 10, \"name\": \"Vicky\", \"address\": \"Yellow Garden 2\"},\n  { \"_id\": 11, \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\n  { \"_id\": 12, \"name\": \"William\", \"address\": \"Central st 954\"},\n  { \"_id\": 13, \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\n  { \"_id\": 14, \"name\": \"Viola\", \"address\": \"Sideway 1633\"}\n]\n\nx = mycol.insert_many(mylist)\n\n#print list of the _id values of the inserted documents:\nprint(x.inserted_ids)","823f0ad7":"import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmylist = [\n  { \"_id\": 1, \"name\": \"John\", \"address\": \"Highway 37\"},\n  { \"_id\": 2, \"name\": \"Peter\", \"address\": \"Lowstreet 27\"},\n  { \"_id\": 3, \"name\": \"Amy\", \"address\": \"Apple st 652\"},\n  { \"_id\": 4, \"name\": \"Hannah\", \"address\": \"Mountain 21\"},\n  { \"_id\": 5, \"name\": \"Michael\", \"address\": \"Valley 345\"},\n  { \"_id\": 6, \"name\": \"Sandy\", \"address\": \"Ocean blvd 2\"},\n  { \"_id\": 7, \"name\": \"Betty\", \"address\": \"Green Grass 1\"},\n  { \"_id\": 8, \"name\": \"Richard\", \"address\": \"Sky st 331\"},\n  { \"_id\": 9, \"name\": \"Susan\", \"address\": \"One way 98\"},\n  { \"_id\": 10, \"name\": \"Vicky\", \"address\": \"Yellow Garden 2\"},\n  { \"_id\": 11, \"name\": \"Ben\", \"address\": \"Park Lane 38\"},\n  { \"_id\": 12, \"name\": \"William\", \"address\": \"Central st 954\"},\n  { \"_id\": 13, \"name\": \"Chuck\", \"address\": \"Main Road 989\"},\n  { \"_id\": 14, \"name\": \"Viola\", \"address\": \"Sideway 1633\"}\n]\n\nx = mycol.insert_many(mylist)\n\n#print list of the _id values of the inserted documents:\nprint(x.inserted_ids)","e98f4d96":"# Find the first document in the customers collection:\n\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.find_one()\n\nprint(x)","f4e04fd7":"# Return all documents in the \"customers\" collection, and print each document:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find():\n    print(x)","c9d0d4e4":"# Return only the names and addresses, not the _ids:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"_id\": 0, \"name\": 1, \"address\": 1 }):\n    print(x)","50a11502":"# This example will exclude \"address\" from the result:\n\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"address\": 0 }):\n    print(x)","fc2e5104":"# You get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"name\": 1, \"address\": 0 }):\n    print(x)\n","5932d891":"# Find document(s) with the address \"Park Lane 38\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Park Lane 38\" }\n\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\n    print(x)","61f64db1":"# Find documents where the address starts with the letter \"S\" or higher:\n\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$gt\": \"S\" } }\n\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\n    print(x)","1706ceac":"# Find documents where the address starts with the letter \"S\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\n\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\n    print(x)","7f92e5ee":"# Sort the result alphabetically by name:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\")\n\nfor x in mydoc:\n    print(x)","e06a7f49":"# Sort the result reverse alphabetically by name:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\", -1)\n\nfor x in mydoc:\n    print(x)","6eef83c1":"# Delete the document with the address \"Mountain 21\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Mountain 21\" }\n\nmycol.delete_one(myquery)","c95d772d":"# Delete all documents were the address starts with the letter S:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": {\"$regex\": \"^S\"} }\n\nx = mycol.delete_many(myquery)\n\nprint(x.deleted_count, \" documents deleted.\")","f62b1768":"# Delete all documents in the \"customers\" collection:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.delete_many({})\n\nprint(x.deleted_count, \" documents deleted.\")","0ee416fd":"# Delete the \"customers\" collection:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmycol.drop()","4ea8e954":"# Change the address from \"Valley 345\" to \"Canyon 123\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \"address\": \"Canyon 123\" } }\n\nmycol.update_one(myquery, newvalues)\n\n#print \"customers\" after the update:\nfor x in mycol.find():\n    print(x)","ca8f290d":"# Update all documents where the address starts with the letter \"S\":\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \"name\": \"Minnie\" } }\n\nx = mycol.update_many(myquery, newvalues)\n\nprint(x.modified_count, \"documents updated.\")","c98b93df":"# Limit the result to only return 5 documents:\nimport pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb:\/\/localhost:27017\/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyresult = mycol.find().limit(5)\n\n#print the result:\nfor x in myresult:\n    print(x)","5bf875b5":"# 3. Create Collection","46382f4e":"# MongoDB\n\n+ MongoDB stores data in JSON-like documents, which makes the database very flexible and scalable.\n\n\n+ To be able to experiment with the code examples in this Notebook, you will need access to a MongoDB database.\n\n\n+ You can download a free MongoDB database at https:\/\/www.mongodb.com.\n\n\n+ Or get started right away with a MongoDB cloud service at https:\/\/www.mongodb.com\/cloud\/atlas.","9cedcea0":"# In This NoteBook:\n\n# 1.Create Database\n\n# 2.Create Collection\n\n# 3.Insert\n\n# 4.Find\n\n# 5.Query\n\n# 6. Sort\n\n# 7.Delete\n\n# 8.Drop Collection\n\n# 9.Update\n\n# 10.Limit","ed3a9846":"# Note: \n+ In MongoDB, a database is not created until it gets content!","95360930":"# 8.Find \n\n+ In MongoDB we use the find and findOne methods to find data in a collection.\n\n\n+  Just like the SELECT statement is used to find data in a table in a MySQL database","ecd5046f":"## 7.Insert Multiple Documents, with Specified IDs\n\n+ If you do not want MongoDB to assign unique ids for you document, you can specify the _id field when you insert the document(s).\n\n\n+  Remember that the values has to be unique. Two documents cannot have the same _id.\n\n","a2cda8e6":"+  You are not allowed to specify both 0 and 1 values in the same object (except if one of the fields is the _id field). If you specify a field with the value 0, all other fields get the value 1, and vice versa:","bcf720d5":"+ To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.\n\n\n+ MongoDB will create the database if it does not exist, and make a connection to it.","ba342ac2":"# 6.Insert Multiple Documents\n\n+ To insert multiple documents into a collection in MongoDB, we use the insert_many() method.\n\n+ The first parameter of the insert_many() method is a list containing dictionaries with the data you want to insert:","1a55acd1":"+ You can check if a collection exist in a database by listing all collections:","9e77d052":"# 12. Drop Collection\n\n","719798aa":"# 11.Delete Document\n\n","ac903a5a":"+  The second parameter is an object defining the new values of the document.\n","3d792200":"# 2. Check if Database Exists","38e43689":"+ Python can be used in database applications.\n\n+ One of the most popular NoSQL database is MongoDB.","992b995e":"+ To create a collection in MongoDB, use database object and specify the name of the collection you want to create.\n\n+ MongoDB will create the collection if it does not exist.","99fc7464":"# Download and install \"PyMongo\"","581057ae":"# Please Upvote This NoteBook","f7f54e63":"# Delete All Documents in a Collection\n\n\n+ To delete all documents in a collection, pass an empty query object to the delete_many() method:","2c89a19e":"# Remember: \n+ In MongoDB, a collection is not created until it gets content, so if this is your first time creating a collection, you should complete the next chapter (create document) before you check if the collection exists!","76975d61":"# Return Only Some Fields\n\n+ The second parameter of the find() method is an object describing which fields to include in the result.\n\n+ This parameter is optional, and if omitted, all fields will be included in the result.\n\n","62d3e14d":" + If you do not specify an _id field, then MongoDB will add one for you and assign a unique id for each document.\n\n+ In the example above no _id field was specified, so MongoDB assigned a unique _id for the record (document).","ecc0631f":"# Update Many\n\n+ To update all documents that meets the criteria of the query, use the update_many() method.\n","06955394":"# Limit the Result\n\n\n+ To limit the result in MongoDB, we use the limit() method.\n\n+ The limit() method takes one parameter, a number defining how many documents to return.\n\n+ Consider you have a \"customers\" collection:","d94deddf":"+ To delete one document, we use the delete_one() method.\n\n+ The first parameter of the delete_one() method is a query object defining which document to delete.\n\n+ Note: If the query finds more than one document, only the first occurrence is deleted.","9c2d53ed":"+ MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).","9e4db801":"+ Note: If the query finds more than one record, only the first occurrence is updated.","8c54ba54":"# Test PyMongo","dfb661e0":"# Sort the Result\n\n+ Use the sort() method to sort the result in ascending or descending order.\n\n+ The sort() method takes one parameter for \"fieldname\" and one parameter for \"direction\" (ascending is the default direction).\n","22ec122c":"+ The insert_many() method returns a InsertManyResult object, which has a property, inserted_ids, that holds the ids of the inserted documents.\n\n","4abd56b4":"# Filter With Regular Expressions\n\n+ You can also use regular expressions as a modifier.\n\n+ Regular expressions can only be used to query strings.\n\n+  To find only the documents where the \"address\" field starts with the letter \"S\", use the regular expression {\"$regex\": \"^S\"}:","aee37b94":"+ To test if the installation was successful, or if you already have \"pymongo\" installed, create a Python page with the following content:","dc630d74":"# Update Collection\n\n+ You can update a record, or document as it is called in MongoDB, by using the update_one() method.\n\n+ The first parameter of the update_one() method is a query object defining which document to update.","ec94e9d9":"+ If the above code was executed with no errors, \"pymongo\" is installed and ready to be used.","13d004ab":"# A collection in MongoDB is the same as a table in SQL databases.\n","5646dbde":"# Sort Descending\n\n+ Use the value -1 as the second parameter to sort descending.\n\n+ sort(\"name\", 1) #ascending\n\n+ sort(\"name\", -1) #descending","0b18a216":"# Find One\n\n+ To select data from a collection in MongoDB, we can use the find_one() method.\n\n+ The find_one() method returns the first occurrence in the selection.","7345092e":"+ The insert_many() method returns a InsertManyResult object, which has a property, inserted_ids, that holds the ids of the inserted documents.","41940bf5":"# Remember:\n\n\n+ In MongoDB, a database is not created until it gets content, so if this is your first time creating a database, you should complete the next two chapters (create collection and create document) before you check if the database exists!","e8b6c878":"# 5.Return the _id Field\n\n+ The insert_one() method returns a InsertOneResult object, which has a property, inserted_id, that holds the id of the inserted document.\n\n+ Insert another record in the \"customers\" collection, and return the value of the _id field:\n\n","56ada13d":"+ You can check if a database exist by listing all databases in you system:","52c9d4bc":"# 13.Update","9b82fb0e":"# Delete Collection\n\n+ You can delete a table, or collection as it is called in MongoDB, by using the drop() method.","9d712454":"# 9.Query","a7561cc7":"# 4.Insert Document\n\n+ A document in MongoDB is the same as a record in SQL databases.\n\n+ To insert a record, or document as it is called in MongoDB, into a collection, we use the insert_one() method.\n\n+ The first parameter of the insert_one() method is a dictionary containing the name(s) and value(s) of each field in the document you want to insert.","c48245cc":"# Delete Many Documents\n\n+ To delete more than one document, use the delete_many() method.\n\n+ The first parameter of the delete_many() method is a query object defining which documents to delete.","e3666b37":"# Advanced Query\n\n+ To make advanced queries you can use modifiers as values in the query object.\n\n+ E.g. to find the documents where the \"address\" field starts with the letter \"S\" or higher (alphabetically), use the greater than modifier: {\"$gt\": \"S\"}:\n","56a88c0d":"#  MongoDB With Python","f063be50":"# Find All\n\n\n+ To select data from a table in MongoDB, we can also use the find() method.\n\n+ The find() method returns all occurrences in the selection.\n\n+  The first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection.\n\n\n+ No parameters in the find() method gives you the same result as SELECT * in MySQL.","1424e9a2":"+ The drop() method returns true if the collection was dropped successfully, and false if the collection does not exist.","d38683c3":"# 10.Sort","844ecad4":"# 14.Limit\n","20e355e7":"+ Important: In MongoDB, a collection is not created until it gets content!\n\n+ MongoDB waits until you have inserted a document before it actually creates the collection.","bec9f057":"+ Insert Multiple Documents, with Specified IDs\n\n+ If you do not want MongoDB to assign unique ids for you document, you can specify the _id field when you insert the document(s).\n\n+ Remember that the values has to be unique. Two documents cannot have the same _id.","182150f7":"# Filter the Result\n\n+ When finding documents in a collection, you can filter the result by using a query object.\n\n+ The first argument of the find() method is a query object, and is used to limit the search.","0c403771":"# PyMongo\n\n+ Python needs a MongoDB driver to access the MongoDB database.\n\n\n+ In this tutorial we will use the MongoDB driver \"PyMongo\".\n\n\n+ We recommend that you use PIP to install \"PyMongo\".\n\n\n+ PIP is most likely already installed in your Python environment.\n\n\n+ Navigate your command line to the location of PIP, and type the following:","5eb3ffcb":"# 1.Create Database"}}