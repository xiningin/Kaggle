{"cell_type":{"ac79b638":"code","da94e3b8":"code","e187c3ac":"code","2a8fd31a":"code","e56be196":"code","250021f2":"code","a859b470":"code","69e167fb":"code","056964dc":"code","ec99d29f":"code","eb93b7fb":"code","5272b7e9":"code","9ca47311":"code","99a3b7ce":"code","00c86ee1":"code","a52f0e8c":"code","692b06ac":"code","2fc8a239":"code","eb2d0259":"code","eea5ac29":"code","2d9462bd":"code","bbcac855":"code","83d5f020":"code","d43c85a1":"code","a94637f2":"code","ada8aac6":"code","0853c04b":"code","48acd6cf":"code","49d35480":"code","ad73b548":"code","887b4267":"code","786dd0fa":"code","6bcd4930":"code","a205d2cd":"code","30509119":"code","01a01b0b":"code","6f2b080e":"code","0740bd01":"code","649af0f6":"code","e27dc94f":"code","aa108bb9":"code","78bea5a3":"code","1500f8be":"code","0bce96e6":"code","3c981865":"code","77171664":"code","2a5105f5":"code","220d9729":"code","2f572f66":"code","3182cced":"markdown","3f6a77b9":"markdown","fd718bcb":"markdown","b5e39b1d":"markdown","a86baaa6":"markdown","7ead758a":"markdown","2093bab9":"markdown","5592da9a":"markdown","280fa47b":"markdown","f928a6b0":"markdown","30781f95":"markdown","c6f2e399":"markdown","f6518b37":"markdown","d4325872":"markdown","27a64c2c":"markdown","0dc682de":"markdown","b41d2538":"markdown","25dff1a0":"markdown","d78cefd3":"markdown","989f0a81":"markdown","67c332ae":"markdown","a4188f84":"markdown","7b170c26":"markdown","66f9090e":"markdown","cd6d25c7":"markdown","a40877df":"markdown","a47f111e":"markdown"},"source":{"ac79b638":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","da94e3b8":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","e187c3ac":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","2a8fd31a":"pd.options.display.max_columns = 100","e56be196":"train.head()","250021f2":"plt.figure(figsize = (10,5))\nsns.distplot(train['SalePrice'])","a859b470":"plt.figure(figsize = (10,5))\nsns.boxplot(x=train['SalePrice'])","69e167fb":"# Outliar\naaa = train[train['SalePrice'] > 700000]\naaa.head()","056964dc":"train['GrLivArea'].describe()","ec99d29f":"train['TotalBsmtSF'].describe()","eb93b7fb":"train = train[train['SalePrice'] < 700000]\ntrain = train.drop([train.index[1298] , train.index[533]])\n#alldata = pd.concat([train, test])","5272b7e9":"from sklearn.preprocessing import StandardScaler\n\n#standardizing data\nsaleprice_scaled = StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:5]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-5:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","9ca47311":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF','LotArea','GrLivArea','LowQualFinSF', 'TotRmsAbvGrd']\nsns.pairplot(train[cols], size = 2)\nplt.show();","99a3b7ce":"data = train[['SalePrice', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF','LotArea', '1stFlrSF', '2ndFlrSF' ,'GrLivArea', \n                'LowQualFinSF', 'TotRmsAbvGrd', 'YrSold', 'GarageArea']]\nplt.figure(figsize=(10,10))\nsns.heatmap(data = data.corr(), annot=True, \nfmt = '.2f', linewidths=.5, cmap='Blues')","00c86ee1":"Area = train[['GrLivArea', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF']]\nArea.head()","a52f0e8c":"plt.figure(figsize = (10,5))\nplt.title('Area')\nsns.scatterplot(train['1stFlrSF'], train['SalePrice'])\nsns.scatterplot(train['2ndFlrSF'], train['SalePrice'])\nplt.xlabel('Area')","692b06ac":"# Make a relationship between GrLivArea and 1stFlrSF\n#alldata['Ratio_1st'] = alldata['1stFlrSF'] \/ alldata['GrLivArea']","2fc8a239":"plt.figure(figsize = (6,3))\nsns.boxplot(x=train['GrLivArea'])","eb2d0259":"plt.figure(figsize = (6,3))\nsns.boxplot(np.log(train['GrLivArea']))\naaaa = train[np.log(train['GrLivArea']) > 8.5]\nbbbb = train[np.log(train['GrLivArea']) < 6.0]\ncccc = pd.concat([aaaa, bbbb])\ncccc.head()","eea5ac29":"plt.figure(figsize = (6,3))\nsns.boxplot(x=train['1stFlrSF'])","2d9462bd":"plt.figure(figsize = (6,3))\nsns.boxplot(np.log(train['1stFlrSF']))\neeee = train[np.log(train['1stFlrSF']) > 8.2]\neeee.head()","bbcac855":"# Interaction Columns\n#alldata['Period_Original'] = alldata['YrSold'] - alldata['YearBuilt']\n#alldata['Period_Remod'] = alldata['YrSold'] - alldata['YearRemodAdd']","83d5f020":"#plt.figure(figsize = (10,5))\n#sns.scatterplot(alldata['Period_Remod'], alldata['SalePrice'])\n#sns.scatterplot(alldata['Period_Original'], alldata['SalePrice'])","d43c85a1":"Bsmt = train[['TotalBsmtSF', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF']]\nBsmt.head()","a94637f2":"plt.figure(figsize = (6,3))\nsns.boxplot(x=train['TotalBsmtSF'])","ada8aac6":"plt.figure(figsize = (6,3))\nsns.boxplot(np.log(train['TotalBsmtSF']))","0853c04b":"dddd = train[np.log(train['TotalBsmtSF']) > 8.5]\ndddd.head()","48acd6cf":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'TotRmsAbvGrd', 'BedroomAbvGr', 'KitchenAbvGr', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath']\nsns.pairplot(train[cols], size = 2)\nplt.show();","49d35480":"#boxplot\nvar = 'FullBath'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 4))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=10, ymax=700000);\nplt.xticks(rotation=90);","ad73b548":"# Bathrooms\n#alldata['TotBath'] = alldata['BsmtFullBath'] + alldata['BsmtHalfBath'] + alldata['FullBath'] + alldata['HalfBath']\n\n# Rooms (Baths inclusive)\n#alldata['TotRmsAbvGrd_Bath'] = alldata['TotRmsAbvGrd'] + alldata['TotBath']","887b4267":"#boxplot\n#var = 'TotRmsAbvGrd_Bath'\n#data = pd.concat([train['GrLivArea'], train[var]], axis=1)\n#f, ax = plt.subplots(figsize=(8, 4))\n#fig = sns.boxplot(x=var, y=\"GrLivArea\", data=data)\n#fig.axis(ymin=10, ymax=7000);\n#plt.xticks(rotation=90);","786dd0fa":"#LotShape: General shape of property\n#group = alldata.groupby('TotRmsAbvGrd_Bath')['GrLivArea'].agg(['mean'])\n#group.columns = ['TotRmsAbvGrd_Bath_GrLivArea']\n#group.reset_index(inplace=True)\n\n#alldata = pd.merge(alldata, group, on=('TotRmsAbvGrd_Bath'), how='left')\n#alldata['TotRmsAbvGrd_Bath_GrLivArea'] = alldata['TotRmsAbvGrd_Bath_GrLivArea'].astype(np.float16)","6bcd4930":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'GarageArea', 'GarageYrBlt', 'GarageCars']\nsns.pairplot(train[cols], size = 2)\nplt.show();","a205d2cd":"ccc = train[train['GarageCars'] == 4]\nccc.head()","30509119":"train = train[train['SalePrice'] < 700000]\ntrain = train.drop([train.index[420], train.index[747], train.index[1190], train.index[1340], train.index[1350]])\ntrain = train.drop([train.index[1298] , train.index[533]])","01a01b0b":"alldata = pd.concat([train, test])","6f2b080e":"alldata['Ratio_1st'] = alldata['1stFlrSF'] \/ alldata['GrLivArea']\n\nalldata['Period_Original'] = alldata['YrSold'] - alldata['YearBuilt']\nalldata['Period_Remod'] = alldata['YrSold'] - alldata['YearRemodAdd']\n\n\nalldata['TotBath'] = alldata['BsmtFullBath'] + alldata['BsmtHalfBath'] + alldata['FullBath'] + alldata['HalfBath']\nalldata['TotRmsAbvGrd_Bath'] = alldata['TotRmsAbvGrd'] + alldata['TotBath']","0740bd01":"#missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(10)","649af0f6":"#scatterplot\nsns.set()\ncols = ['LotFrontage', 'SalePrice']\nsns.pairplot(train[cols], size = 2)\nplt.show();","e27dc94f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor i in alldata.columns[alldata.dtypes == object]:\n    alldata[i] = le.fit_transform(list(alldata[i]))","aa108bb9":"alldata2 = alldata.drop(['Id', 'SalePrice'], axis = 1)","78bea5a3":"alldata2 = alldata2.fillna(-1)","1500f8be":"train2 = alldata2[:len(train)]\ntest2 = alldata2[len(train):]","0bce96e6":"from xgboost import XGBRegressor\nxgb = XGBRegressor(max_depth = 6, colsample_bytree = 0.7, subsample_bytree = 0.8, n_estimators = 1000, learning_rate = 0.01)\nxgb.fit(train2, train['SalePrice'])\nresult = xgb.predict(test2)","3c981865":"from lightgbm import LGBMRegressor\nlgb = LGBMRegressor(num_leaves = 75, colsample_bytree = 0.7, subsample_bytree = 0.8, n_estimators = 1000, learning_rate = 0.01)\nlgb.fit(train2, train['SalePrice'])\nresult2 = lgb.predict(test2)","77171664":"from catboost import CatBoostRegressor  \ncb = CatBoostRegressor()\ncb.fit(train2, train['SalePrice'])\nresult3 = cb.predict(test2)","2a5105f5":"sub = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv')","220d9729":"sub['SalePrice'] = result*0.5 + result2*0.25 + result3*0.25\nsub.head()","2f572f66":"sub.to_csv('House(Tree)v2.csv', index = False)","3182cced":"# Data Preprocessing","3f6a77b9":"### Columns : GarageArea\n\n - GarageArea: Size of garage in square feet\n - GarageType: Garage location\n - GarageYrBlt: Year garage was built\n - GarageFinish: Interior finish of the garage\n - GarageCars: Size of garage in car capacity\n - GarageQual: Garage quality\n - GarageCond: Garage condition","fd718bcb":"### Categorical Columns\n- MSZoning: Identifies the general zoning classification of the sale.\n- LotArea: Lot size in square feet\n- Neighborhood: Physical locations within Ames city limits\n- OverallQual: Rates the overall material and finish of the house\n\n\n### Numercial Columns\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n- TotalBsmtSF: Total square feet of basement area\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- GrLivArea: Above grade (ground) living area square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- Bedroom: Bedrooms above grade (does NOT include basement bedrooms)\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\n* etc... \n","b5e39b1d":"> Oh! There is already good relationship columns","a86baaa6":"### Columns : GrLivArea\n- 'GrLivArea' is the most influencail factor as hitmap above.\n\n- GrLivArea: Above grade (ground) living area square feet\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)","7ead758a":"### drop box","2093bab9":"## Heatmap","5592da9a":"### interaction box","280fa47b":"### Columns : TotRmsAbvGrd\n- Room! Yeah We can assume that there must be good relationship between Number of rooms & Price! Also & Floor\n\n - TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n - BedroomAbvGr: Bedrooms above grade (does NOT include basement bedrooms)\n - KitchenAbvGr: Kitchens above grade\n - BsmtFullBath: Basement full bathrooms\n - BsmtHalfBath: Basement half bathrooms\n - FullBath: Full bathrooms above grade\n - HalfBath: Half baths above grade","f928a6b0":"> Okay I would delete the columns ( PoolQC, MiscFeature, Alley, Fence, FireplaceQu)\n> But I can say \"YES\" on column \"LotFrontage\"","30781f95":"# Analysis on SalePrice","c6f2e399":"- Hm.. It seems that there is not that issue in High Price. So Let`s delete them!","f6518b37":"> Yeah, there seems make sense!!","d4325872":"- So now We are able to think there is some good connection between 'Yearbuilt' , 'TotalBsmtSF' , 'GrLivArea', 'TotRmsAbvGrd', 'GarageArea'","27a64c2c":"# Missing data search","0dc682de":"![\ud14d\uc2a4\ud2b8](https:\/\/www.networkauctions.co.uk\/images\/house%20prices%20up.jpg \"House Pricing\")","b41d2538":"1. Supply and demand\n2. Interest rates\n3. Economic growth\n4. Demographics\n5. Location, location, location\n6. Parking\n7. Neighborhood\n8. Age and condition\n9. Nearby features\n\nAs i mentioned above, there are some factors that influence the SalePrice wheither crucial or not.","25dff1a0":"# Domain Knowledge","d78cefd3":"## Scatter plot","989f0a81":"> There seems some outliar in GarageCars Columns == 4, So we need to invetigate those rows","67c332ae":"# Modeling","a4188f84":"### Columns : Yearbuilt\n- There are some columns that seems related with YearBuilt\n\n - YearRemodAdd : Remodel date (same as construction date if no remodeling or additions)\n - YrSold : Year Sold (YYYY)\n - MoSold : Month Sold (MM)","7b170c26":"### Columns : TotalBsmtSF\n- There are also some columns that seems to be related with TotalBsmSF\n\n - TotalBsmtSF: Total square feet of basement area\n - BsmtFinSF1: Type 1 finished square feet\n - BsmtFinType2: Rating of basement finished area (if multiple types)\n - BsmtUnfSF: Unfinished square feet of basement area","66f9090e":"# Analysis on X Columns","cd6d25c7":"- Ther are some common columns in Outliar\n  -  Low Density, Pave, No alley, YearBuilt, Slightly irregular,etc...\n  - So, whether to decide it is truly Outliar, we need to know the mean of each shared columns\n  - If there are reasonable issues on High SalePrice, then we shouldn't delete this as Outliar","a40877df":"### Columns : Area & Rooms\n- There might be some good relationsship between Area & Rooms. So Let`s go deeper in it.","a47f111e":"> It seems that Linear relationship exists between two columns.\n> So Let`s not delete it!"}}