{"cell_type":{"c30f8760":"code","2d34d1bd":"code","c300cd1d":"code","1a368655":"code","91354e5c":"code","2776fd99":"code","57a995bb":"code","adfb6058":"code","ecc2e298":"code","b82cb7f4":"code","bbab67cf":"code","a24b6b50":"code","1c019ae3":"code","e3d9ac57":"code","8f6810ae":"code","20687c83":"code","ac985a60":"markdown","dd9eadfa":"markdown","a7bea618":"markdown","98ac9c01":"markdown","135a1e6e":"markdown","3df2d971":"markdown","caea449b":"markdown","483cc3e2":"markdown","60c105b4":"markdown","eacfca90":"markdown","0093adda":"markdown","3c29ac87":"markdown","00373a96":"markdown","2b364140":"markdown","ffefa401":"markdown","6c89d543":"markdown","4cc6d1ab":"markdown","37a5e1ee":"markdown","f8266576":"markdown","eac5c657":"markdown","d1adcc06":"markdown"},"source":{"c30f8760":"import numpy as np\nimport os\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt","2d34d1bd":"SEED = 42\nnp.random.seed(SEED)\n\nROOT_DIR = \".\"\nFOLDER_NAME = \"ensembles\"\nIMAGES_PATH = os.path.join(ROOT_DIR, \"images\", FOLDER_NAME)\nos.makedirs(IMAGES_PATH, exist_ok=True)\n\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)","c300cd1d":"def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)","1a368655":"from matplotlib.colors import ListedColormap\n\ndef plot_decision_boundary(clf, X, y, axes=[-1.5, 2.45, -1, 1.5], alpha=0.5, contour=True):\n    x1s = np.linspace(axes[0], axes[1], 100)\n    x2s = np.linspace(axes[2], axes[3], 100)\n    x1, x2 = np.meshgrid(x1s, x2s)\n    X_new = np.c_[x1.ravel(), x2.ravel()]\n    y_pred = clf.predict(X_new).reshape(x1.shape)\n    custom_cmap = ListedColormap(['#fafab0','#9898ff','#a0faa0'])\n    plt.contourf(x1, x2, y_pred, alpha=0.3, cmap=custom_cmap)\n    if contour:\n        custom_cmap2 = ListedColormap(['#7d7d58','#4c4c7f','#507d50'])\n        plt.contour(x1, x2, y_pred, cmap=custom_cmap2, alpha=0.8)\n    plt.plot(X[:, 0][y==0], X[:, 1][y==0], \"yo\", alpha=alpha)\n    plt.plot(X[:, 0][y==1], X[:, 1][y==1], \"bs\", alpha=alpha)\n    plt.axis(axes)\n    plt.xlabel(r\"$x_1$\", fontsize=18)\n    plt.ylabel(r\"$x_2$\", fontsize=18, rotation=0)","91354e5c":"from sklearn.datasets import make_moons\nX, y = make_moons(n_samples=500, noise=0.30, random_state=SEED)","2776fd99":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=SEED)","57a995bb":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nbag_clf = BaggingClassifier(\n    DecisionTreeClassifier(), n_estimators=500,\n    max_samples=100, bootstrap=True, random_state=SEED)\nbag_clf.fit(X_train, y_train)\ny_pred = bag_clf.predict(X_test)","adfb6058":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","ecc2e298":"tree_clf = DecisionTreeClassifier(random_state=SEED)\ntree_clf.fit(X_train, y_train)\ny_pred_tree = tree_clf.predict(X_test)\nprint(accuracy_score(y_test, y_pred_tree))","b82cb7f4":"fix, axes = plt.subplots(ncols=2, figsize=(10,4), sharey=True)\nplt.sca(axes[0])\nplot_decision_boundary(tree_clf, X, y)\nplt.title(\"Decision Tree\", fontsize=14)\nplt.sca(axes[1])\nplot_decision_boundary(bag_clf, X, y)\nplt.title(\"Decision Trees with Bagging\", fontsize=14)\nplt.ylabel(\"\")\nsave_fig(\"decision_tree_without_and_with_bagging_plot\")\nplt.show()","bbab67cf":"bag_clf = BaggingClassifier(\n    DecisionTreeClassifier(), n_estimators=500,\n    bootstrap=True, oob_score=True, random_state=SEED)\nbag_clf.fit(X_train, y_train)\nbag_clf.oob_score_","a24b6b50":"bag_clf.oob_decision_function_","1c019ae3":"from sklearn.metrics import accuracy_score\ny_pred = bag_clf.predict(X_test)\naccuracy_score(y_test, y_pred)","e3d9ac57":"from sklearn.ensemble import RandomForestClassifier\n\nrnd_clf = RandomForestClassifier(n_estimators=500, max_leaf_nodes=16, random_state=SEED)\nrnd_clf.fit(X_train, y_train)\n\ny_pred_rf = rnd_clf.predict(X_test)","8f6810ae":"bag_clf = BaggingClassifier(\n    DecisionTreeClassifier(max_features=\"sqrt\", max_leaf_nodes=16),\n    n_estimators=500, random_state=SEED)\n\nbag_clf.fit(X_train, y_train)\ny_pred = bag_clf.predict(X_test)","20687c83":"np.sum(y_pred == y_pred_rf) \/ len(y_pred) ","ac985a60":"# 3.1 Bagging decision tree ","dd9eadfa":"# 0.Commons ","a7bea618":"## save layout","98ac9c01":"## 6.3 compare 2 models\n**A Random Forest** is equivalent to **a bag of decision trees**","135a1e6e":"## 0.3 common functions","3df2d971":"# 4.Decision boundary \n\n","caea449b":"\n## Basic Decision Tree vs Bagging Decision Tree","483cc3e2":"## 0.2 common variables","60c105b4":"# 3.2 Basic decision tree","eacfca90":"# 2.split data (train,validation)","0093adda":"## 6.2 make bagging model and predict","3c29ac87":"# 6.RandomForestClassifier vs BaggingClassifier","00373a96":"## 5.1 make oob model","2b364140":"## 5.2 oob decision function","ffefa401":"## 6.1. make randomforest model and predict ","6c89d543":"## 5.3 score by oob model ","4cc6d1ab":"## plot decision boundary ","37a5e1ee":"## 0.1 import commons","f8266576":"reference from  https:\/\/github.com\/ageron\/handson-ml2\/blob\/master\/07_ensemble_learning_and_random_forests.ipynb","eac5c657":"# 1.make data","d1adcc06":"# 5.OOB MODEL [ oob_score=True]"}}