{"cell_type":{"df21b2c5":"code","02ede812":"code","dd7f37e3":"code","2f2212ef":"code","691a2019":"code","dd2b9f02":"code","ac86fc15":"code","d0ce8ef5":"code","a5fa6e44":"code","78aa5c8f":"code","51afbad6":"code","c31eec63":"code","66e5d529":"code","6e5d3313":"code","478a4f20":"code","028532a1":"code","17678a17":"code","0a59f98f":"code","672fe5e1":"code","2936e792":"code","146970b3":"code","35ee6336":"code","9f145707":"code","900f2329":"code","a994a071":"code","ca29f637":"code","37aa1ade":"code","929cd727":"code","f7c69db6":"code","9f352a45":"code","2d6c14e9":"markdown","61a17a0b":"markdown","c3f42d52":"markdown","b4aa6208":"markdown","eb385a50":"markdown","fd275f5b":"markdown","0e379be0":"markdown","5a251be0":"markdown","138ca143":"markdown"},"source":{"df21b2c5":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.preprocessing import PolynomialFeatures ","02ede812":"# Read the dataset - bottle.csv \n# Here, I've made Btl_cnt column as an Index \n\ndata = pd.read_csv(\"..\/input\/bottle.csv\", index_col = \"Btl_Cnt\")\ndata.head(3)","dd7f37e3":"# Change Index name by Serial_no, # Inplace true makes it permanent further\n\ndata.index.set_names([\"Serial_no\"], inplace = True)","2f2212ef":"# Extract two columns(Salnity & T_degC) from dataframe for prediction \n\ndataset = data[[\"Salnty\",\"T_degC\"]]\ndataset.head(1)","691a2019":"# change the name of the columns \n\ndataset.columns = [\"Sal\", \"Temp\"]","dd2b9f02":"dataset.head(1)","ac86fc15":"#dropdown null values everywhere in dataset\ndataset = dataset.dropna(axis=0, how=\"any\")","d0ce8ef5":"# take sample size of 500 to speed up the analysis\nTrained_data = dataset[:][:500]\nlen(Trained_data)","a5fa6e44":"#checkout of NaN existance in Sal column of Trained_data\nTrained_data[\"Sal\"].isna().value_counts()","78aa5c8f":"#checkout of NaN existance in Temp column of Trained_data\nTrained_data[\"Temp\"].isna().value_counts()","51afbad6":"#Dropdown duplicates values in Trained_data\nTrained_data = Trained_data.drop_duplicates(subset = [\"Sal\", \"Temp\"])\nlen(Trained_data)","c31eec63":"import seaborn as sns\nsns.set(font_scale=1.6)\nplt.figure(figsize=(13, 9))\nplt.scatter(Trained_data[\"Sal\"], Trained_data[\"Temp\"],s=65)\nplt.xlabel('Sal',fontsize=25)\nplt.ylabel('Temp',fontsize=25)\nplt.title('Trained_data  - Sal vs Temp',fontsize=25)\nplt.show()","66e5d529":"# Divide Trained_data into two variables X & y\nX = Trained_data.iloc[:, 0:1].values  # all rows of Sal column\ny = Trained_data.iloc[:, -1].values  # all rows of Temp column","6e5d3313":"lin = LinearRegression()\nlin.fit(X,y)","478a4f20":"#Predict value of Temp with random variable\nPrediction_Temp_lin = lin.predict([[33]])\nPrediction_Temp_lin","028532a1":"import seaborn as sns\nsns.set(font_scale=1.6)\nplt.figure(figsize=(13, 9))\nplt.scatter(X,y,s=65)\nplt.plot(X,lin.predict(X), color='red', linewidth='6')\nplt.xlabel('Sal',fontsize=25)\nplt.ylabel('Temp',fontsize=25)\nplt.title('Comparision Temp and Predicted Temp with Linear Regression',fontsize=25)\nplt.show()","17678a17":"# Consider degree=3 \npoly = PolynomialFeatures(degree = 3) \nX_poly = poly.fit_transform(X) \npoly.fit(X_poly, y) \nlin2 = LinearRegression() \nlin2.fit(X_poly, y)","0a59f98f":"#Predict value of Temp randomly\nPrediction_Temp_Poly = lin2.predict(poly.fit_transform([[33]])) \nPrediction_Temp_Poly","672fe5e1":"sns.set(font_scale=1.6)\nplt.figure(figsize=(13, 9))\nx_grid = np.arange(min(X), max(X), 0.1)\nx_grid = x_grid.reshape(-1,1)\nplt.scatter(X,y,s=65)\nplt.plot(x_grid,lin2.predict(poly.fit_transform(x_grid)) , color='red', linewidth = '6')\nplt.xlabel('Sal',fontsize=25)\nplt.ylabel('Temp',fontsize=25)\nplt.title('Comparision Temp and Predicted Temp with Linear Regression',fontsize=25)\nplt.show()","2936e792":"Test_data = data[[\"Salnty\",\"T_degC\"]]\nTest_data.head(2)","146970b3":"Test_data[\"Salnty\"].isna().value_counts()","35ee6336":"Test_data.dropna(subset = [\"Salnty\"], inplace = True)","9f145707":"Test_data[\"Salnty\"].isna().value_counts()","900f2329":"Test_data[\"T_degC\"].isna().value_counts()","a994a071":"NaN_Temp = Test_data[Test_data[\"T_degC\"].isna()]\nNaN_Temp","ca29f637":"def NaN_Temp_Prediction(row):\n    Salnty = row[0]\n    return lin2.predict(poly.fit_transform([[Salnty]]))","37aa1ade":"NaN_Temp.iloc[:3262,-1] = NaN_Temp.iloc[:3262,].apply(NaN_Temp_Prediction, axis= 1)","929cd727":"# Here, we can see that all the values have been replaced by predicted values in T_degC column\nNaN_Temp\n","f7c69db6":"# Values in the T_degC column in the form of an array. Just remove the brackets using .str.strip() method\nNaN_Temp[\"T_degC\"] = NaN_Temp[\"T_degC\"].str.get(0)","9f352a45":"# Here, is our cleaned dataframe\nNaN_Temp","2d6c14e9":"###### From the above analysis, it is observe that the predictions of temperature are more acurate with Polynomial Regression. Therefore, we gonna move ahead with the Polinomial Regression","61a17a0b":"# Replacement of NaN value in Temperature column by Predicted Temp value in dataframe","c3f42d52":"#### Fitting Polynomial Regression ","b4aa6208":"There are 3262 NaN values of Temperature need to Predict. Next, just get only NaN values of Temp column.","eb385a50":"#### Fitting Linear Regression","fd275f5b":"####  Define the function called NaN_Temp_Prediction- it will predict all the NaN Temperature associated with given Salnty.\n##### Salnty = row[0] -- Means it will pass each row for column 0 (column 0 = Salnty) ","0e379be0":"##### Apply the define function to the location Temp column where, all the predicted values are going to replace NaN. \n###### iloc[:3262,-1] = :3262 is the lenght of  rows\/Index & -1 is last column that is T_degC","5a251be0":"### Final DataFrame -- Predicted Temperature values (Previosly were NaN) accosiated with salnty","138ca143":"## Prediction of Temperature based on Salinity "}}