{"cell_type":{"89ff05bc":"code","0291e625":"code","4448d411":"code","e8a885fe":"code","5d009c7b":"code","9eaab007":"code","bc9c1cdb":"code","9a8c0faf":"code","fb4887c7":"code","d268f4b8":"code","ab2468b8":"code","369b234f":"code","971ba65e":"code","644ce791":"code","87e42be9":"code","7ca805a3":"code","5200d653":"markdown","30ff8a89":"markdown"},"source":{"89ff05bc":"# Import the pandas package, then use the \"read_csv\" function to read\n# the labeled training data\nimport pandas as pd\nfrom bs4 import BeautifulSoup             \nimport re\nfrom nltk.corpus import stopwords # Import the stop word list\nfrom nltk.stem.porter import PorterStemmer\nimport matplotlib.pyplot as plt\n\ntrain = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv\", header=0, \\\n                    delimiter=\"\\t\", quoting=3)\ntrain = train.drop(['id'], axis=1)\ntrain.head()","0291e625":"df2 = pd.read_csv('..\/input\/imdb-review-dataset\/imdb_master.csv',encoding=\"latin-1\")\n","4448d411":"df2 = df2.drop(['Unnamed: 0','type','file'],axis=1)\ndf2.columns = [\"review\",\"sentiment\"]\ndf2.head()","e8a885fe":"df2 = df2[df2.sentiment != 'unsup']\ndf2['sentiment'] = df2['sentiment'].map({'pos': 1, 'neg': 0})\ndf2.head()","5d009c7b":"training = pd.concat([train, df2]).reset_index(drop=True)\ntraining.shape\n","9eaab007":"\ndef review_to_words( raw_review ):\n    # Function to convert a raw review to a string of words\n    # The input is a single string (a raw movie review), and \n    # the output is a single string (a preprocessed movie review)\n    #\n    # 1. Remove HTML\n    review_text = BeautifulSoup(raw_review,).get_text() \n    #\n    # 2. Remove non-letters        \n    letters_only = re.sub(\"[^a-zA-Z]\", \" \", review_text) \n    #\n    # 3. Convert to lower case, split into individual words\n    words = letters_only.lower().split()                                             \n    #\n    # 4. In Python, searching a set is much faster than searching\n    #   a list, so convert the stop words to a set\n    stops = set(stopwords.words(\"english\"))                  \n    # \n    # 5. Remove stop words\n    meaningful_words = [w for w in words if not w in stops]   \n    #\n    # 6. Join the words back into one string separated by space, \n    # and return the result.\n    return( \" \".join( meaningful_words ))   ","bc9c1cdb":"# Get the number of reviews based on the dataframe column size\nnum_reviews = training[\"review\"].size\n\n# Initialize an empty list to hold the clean reviews\nclean_train_reviews = []\n\n# Loop over each review; create an index i that goes from 0 to the length\n# of the movie review list \nprint (\"Cleaning and parsing the training set movie reviews...\\n\")\nclean_train_reviews = []\nfor i in range( 0, num_reviews ):\n    # If the index is evenly divisible by 10000, print a message\n    if( (i+1)%10000 == 0 ):\n        print (\"Review %d of %d\\n\" % ( i+1, num_reviews ))                                                                 \n    clean_train_reviews.append( review_to_words( training[\"review\"][i] ))\nprint(\"Done\")","9a8c0faf":"print (\"Creating the bag of words...\\n\")\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Initialize the \"CountVectorizer\" object, which is scikit-learn's\n# bag of words tool.  \nvectorizer = CountVectorizer(analyzer = \"word\",   \\\n                             tokenizer = None,    \\\n                             preprocessor = None, \\\n                             stop_words = None,   \\\n                             max_features = 6000) \n\n# The input to fit_transform should be a list of strings.\ntrain_data_features = vectorizer.fit_transform(clean_train_reviews)\n\n# Numpy arrays are easy to work with, so convert the result to an \n# array\ntrain_data_features = train_data_features.toarray()\nprint (\"Done\")\n","fb4887c7":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(clean_train_reviews)","d268f4b8":"#splitting dataset into training and testing data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(train_data_features,training[\"sentiment\"],test_size=0.2,random_state=0)\nprint(\"Splitting Done\")","ab2468b8":"print (\"Training the random forest model...\")\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Initialize a Random Forest classifier with 100 trees\nforest = RandomForestClassifier(n_estimators = 100) \n\n# Fit the forest to the training set, using the bag of words as \n# features and the sentiment labels as the response variable\n#\n# This may take a few minutes to run\nforest = forest.fit(x_train, y_train )\nprint (\"Done\")\n","369b234f":"# Use the random forest to make sentiment label predictions\nresult = forest.predict(x_test)\nprint(\"Predictions Done\")","971ba65e":"from sklearn.metrics import accuracy_score,f1_score,confusion_matrix\n#checking accuracy score\naccuracy=accuracy_score(y_test,result)\naccuracy","644ce791":"#checking confusion matrix\ncm=confusion_matrix(y_test,result)\ncm","87e42be9":"#checking f1 score\nf1=f1_score(y_test,result)\nf1","7ca805a3":"from nltk.corpus import stopwords # Import the stop word list\n\n# Read the test data\ntest = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/testData.tsv\", header=0, delimiter=\"\\t\", \\\n                   quoting=3 )\n\n# Verify that there are 25,000 rows and 2 columns\nprint (test.shape)\n\n# Create an empty list and append the clean reviews one by one\nnum_reviews = len(test[\"review\"])\nclean_test_reviews = [] \n\nprint (\"Cleaning and parsing the test set movie reviews...\\n\")\nfor i in range(0,num_reviews):\n    if( (i+1) % 5000 == 0 ):\n        print (\"Review %d of %d\\n\" % (i+1, num_reviews))\n    clean_review = review_to_words( test[\"review\"][i] )\n    clean_test_reviews.append( clean_review )\n\n# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = vectorizer.transform(clean_test_reviews)\ntest_data_features = test_data_features.toarray()\n\n# Use the random forest to make sentiment label predictions\nresult = forest.predict(test_data_features)\n\n# Copy the results to a pandas dataframe with an \"id\" column and a \"sentiment\" column\noutput = pd.DataFrame( data={\"id\":test[\"id\"], \"sentiment\":result} )\n\n# Use pandas to write the comma-separated output file\noutput.to_csv(\"Bag_of_Words_model.csv\", index=False, quoting=3 )\nprint(\"Done\")","5200d653":"**Creating Features from a Bag of Words (Using scikit-learn)**","30ff8a89":"**Creating a WordCloud**"}}