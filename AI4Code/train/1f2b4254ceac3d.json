{"cell_type":{"4b894887":"code","305fc525":"code","ac6404e9":"code","ecc3f1ed":"code","621ab872":"code","a1fb4f7d":"code","b0bf0706":"code","d8a4b52a":"code","d9a117a7":"code","c9bb28d7":"code","985dfea0":"code","737f2d56":"code","4c0c07fa":"code","b019002d":"code","aef7c21c":"code","3aeadbc9":"markdown"},"source":{"4b894887":"import numpy as np\nimport pandas as pd\nimport keras\nfrom keras import applications\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Activation, Flatten, Bidirectional, Conv2D, MaxPooling2D, Lambda, MaxPool2D, BatchNormalization, Input, concatenate, K, Reshape, LSTM, CuDNNLSTM\nfrom keras.utils import np_utils\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import Callback, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport xml.etree.ElementTree as ET\nimport sklearn\nimport itertools\nimport cv2\nimport scipy\nimport os\nimport csv\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm import tqdm","305fc525":"class1 = {1:'NEUTROPHIL',2:'EOSINOPHIL',3:'MONOCYTE',4:'LYMPHOCYTE'}\nclass2 = {0:'Mononuclear',1:'Polynuclear'}\ntree_path = '..\/input\/dataset-master\/dataset-master\/Annotations'\nimage_path = '..\/input\/dataset-master\/dataset-master\/JPEGImages'","ac6404e9":"#Sample image generation\nimage = cv2.imread(image_path+'\/BloodImage_00002.jpg')\ntree = ET.parse(tree_path+'\/BloodImage_00002.xml')\ntry:\n    image.shape\n    print(\"Checked for shape. Shape is {}\".format(image.shape))\nexcept AttributeError:\n    print(\"Error: Invalid shape.\")","ecc3f1ed":"for elem in tree.iter():\n    if 'object' in elem.tag or 'part' in elem.tag:\n        for attr in list(elem):\n            if 'name' in attr.tag:\n                name = attr.text\n            if 'bndbox' in attr.tag:\n                for dim in list(attr):\n                    if 'xmin' in dim.tag:\n                        xmin = int(round(float(dim.text)))\n                    if 'ymin' in dim.tag:\n                        ymin = int(round(float(dim.text)))\n                    if 'xmax' in dim.tag:\n                        xmax = int(round(float(dim.text)))\n                    if 'ymax' in dim.tag:\n                        ymax = int(round(float(dim.text)))\n                if name[0] == \"R\":\n                    cv2.rectangle(image, (xmin, ymin),\n                                (xmax, ymax), (0, 255, 0), 1)\n                    cv2.putText(image, name, (xmin + 10, ymin + 15),\n                            cv2.FONT_HERSHEY_SIMPLEX, 1e-3 * image.shape[0], (0, 255, 0), 1)\n                if name[0] == \"W\":\n                    cv2.rectangle(image, (xmin, ymin),\n                                (xmax, ymax), (0, 0, 255), 1)\n                    cv2.putText(image, name, (xmin + 10, ymin + 15),\n                            cv2.FONT_HERSHEY_SIMPLEX, 1e-3 * image.shape[0], (0, 0, 255), 1)\n                if name[0] == \"P\":\n                    cv2.rectangle(image, (xmin, ymin),\n                                (xmax, ymax), (255, 0, 0), 1)\n                    cv2.putText(image, name, (xmin + 10, ymin + 15),\n                            cv2.FONT_HERSHEY_SIMPLEX, 1e-3 * image.shape[0], (255, 0, 0), 1)\nplt.figure(figsize=(16,16))\nplt.imshow(image)\nplt.show()","621ab872":"df1 = pd.read_csv('..\/input\/dataset-master\/dataset-master\/labels.csv')\ndf1 = df1.drop(columns=['Unnamed: 0']).dropna()\ndf1","a1fb4f7d":"#reader = csv.reader(open('\/dataset-master\/labels.csv'))\n# skip thev header\ny3 = df1[~df1[\"Category\"].str.contains(\",\", na=False)]['Category']\n#y3","b0bf0706":"encoder = LabelEncoder()\nencoder.fit(y3)\nencoded_y = encoder.transform(y3)\ncounts = np.bincount(encoded_y)\nprint(counts)\nfig, ax = plt.subplots()\nplt.bar(list(range(5)), counts)\nax.set_xticklabels(('', 'Basophil', 'Eosinophil', 'Lymphocyte', 'Monocyte', 'Neutrophil'))\nax.set_ylabel('Number of Cells')","d8a4b52a":"def get_data(folder):\n    #    Load the data and labels from the given folder.\n    X = []\n    y = []\n    z = []\n    for wbc_type in os.listdir(folder):\n        print(wbc_type)\n        if not wbc_type.startswith('.'):\n            if wbc_type in ['NEUTROPHIL']:\n                label = 1\n                label2 = 1\n            elif wbc_type in ['EOSINOPHIL']:\n                label = 2\n                label2 = 1\n            elif wbc_type in ['MONOCYTE']:\n                label = 3  \n                label2 = 0\n            elif wbc_type in ['LYMPHOCYTE']:\n                label = 4 \n                label2 = 0\n            else:\n                label = 5\n                label2 = 0\n            for image_filename in tqdm(os.listdir(folder + wbc_type)):\n                img_file = cv2.imread(folder + wbc_type + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = cv2.resize(img_file, dsize=(80,60), interpolation=cv2.INTER_CUBIC)\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n                    z.append(label2)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    z = np.asarray(z)\n    return X,y,z\nX_train, y_train, z_train = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TRAIN\/')\nX_test, y_test, z_test = get_data('..\/input\/dataset2-master\/dataset2-master\/images\/TEST\/')\n\n# Encode labels to hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nfrom keras.utils.np_utils import to_categorical\ny_trainHot = to_categorical(y_train, num_classes = 5)\ny_testHot = to_categorical(y_test, num_classes = 5)\nz_trainHot = to_categorical(z_train, num_classes = 2)\nz_testHot = to_categorical(z_test, num_classes = 2)\nprint(class1)\nprint(class2)","d9a117a7":"def plotHistogram(a):\n    #Plot histogram of RGB Pixel Intensities\n    plt.figure(figsize=(10,5))\n    plt.subplot(1,2,1)\n    plt.imshow(a)\n    plt.axis('off')\n    histo = plt.subplot(1,2,2)\n    histo.set_ylabel('Count')\n    histo.set_xlabel('Pixel Intensity')\n    n_bins = 30\n    plt.hist(a[:,:,0].flatten(), bins= n_bins, lw = 0, color='r', alpha=0.5);\n    plt.hist(a[:,:,1].flatten(), bins= n_bins, lw = 0, color='g', alpha=0.5);\n    plt.hist(a[:,:,2].flatten(), bins= n_bins, lw = 0, color='b', alpha=0.5);\nplotHistogram(X_train[1])","c9bb28d7":"X_train=np.array(X_train)\nX_train=X_train\/255.0\nX_test=np.array(X_test)\nX_test=X_test\/255.0\nplotHistogram(X_train[1])","985dfea0":"def rgb_to_grayscale(input):\n    \"\"\"Average out each pixel across its 3 RGB layers resulting in a grayscale image\"\"\"\n    return K.mean(input, axis=3)\ndef rgb_to_grayscale_output_shape(input_shape):\n    return input_shape[:-1]","737f2d56":"# Helper Functions  Learning Curves and Confusion Matrix\nclass MetricsCheckpoint(Callback):\n    \"\"\"Callback that saves metrics after each epoch\"\"\"\n    def __init__(self, savepath):\n        super(MetricsCheckpoint, self).__init__()\n        self.savepath = savepath\n        self.history = {}\n    def on_epoch_end(self, epoch, logs=None):\n        for k, v in logs.items():\n            self.history.setdefault(k, []).append(v)\n        np.save(self.savepath, self.history)\n\ndef plotKerasLearningCurve():\n    plt.figure(figsize=(10,5))\n    metrics = np.load('logs.npy')[()]\n    filt = ['acc'] # try to add 'loss' to see the loss learning curve\n    for k in filter(lambda x : np.any([kk in x for kk in filt]), metrics.keys()):\n        l = np.array(metrics[k])\n        plt.plot(l, c= 'r' if 'val' not in k else 'b', label='val' if 'val' in k else 'train')\n        x = np.argmin(l) if 'loss' in k else np.argmax(l)\n        y = l[x]\n        plt.scatter(x,y, lw=0, alpha=0.25, s=100, c='r' if 'val' not in k else 'b')\n        plt.text(x, y, '{} = {:.4f}'.format(x,y), size='15', color= 'r' if 'val' not in k else 'b')   \n    plt.legend(loc=4)\n    plt.axis([0, None, None, None]);\n    plt.grid()\n    plt.xlabel('Number of epochs')\n    plt.ylabel('Accuracy')\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n#This function prints and plots the confusion matrix.\n#Normalization can be applied by setting `normalize=True`.\n\n    plt.figure(figsize = (5,5))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\ndef plot_learning_curve(history):\n    plt.figure(figsize=(8,8))\n    plt.subplot(1,2,1)\n    plt.plot(history.history['acc'])\n    plt.plot(history.history['val_acc'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.savefig('.\/accuracy_curve.png')\n    #plt.clf()\n    # summarize history for loss\n    plt.subplot(1,2,2)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.savefig('.\/loss_curve.png')","4c0c07fa":"def runKerasCNNAugment(a,b,c,d,e, epochs, classes):\n    \n    batch_size = 128\n    num_classes = len(b[0])\n#     img_rows, img_cols = a.shape[1],a.shape[2]\n    img_rows,img_cols=80,80\n    input_shape = (img_rows, img_cols, 3)\n    input_tensor = Input(shape=input_shape)\n    model = applications.Xception(weights='imagenet',include_top=False,input_shape=(input_shape))\n    for layer in model.layers[:-5]:\n        layer.trainable = False\n    x = model.output\n    x = Flatten()(x)\n    x = Dense(1024,activation=\"relu\")(x)\n    x = Dropout(0.25)(x)\n    \n    #Creating CNN\n    modelcnn = Sequential()\n    modelcnn.add(Conv2D(32, kernel_size=(3, 3),\n                     activation='relu',\n                     input_shape=input_shape,strides=e))\n    modelcnn.add(Conv2D(64, (3, 3), activation='relu'))\n    modelcnn.add(MaxPooling2D(pool_size=(2, 2)))\n    modelcnn.add(Dropout(0.25))\n    modelcnn.add(Flatten())\n    cnn_output = modelcnn(input_tensor)\n    \n    # Creating RNN    \n    modelrnn = Lambda(rgb_to_grayscale, rgb_to_grayscale_output_shape)(input_tensor)\n    #modelrnn = Bidirectional(LSTM(64, return_sequences=True, dropout=0.25, recurrent_dropout=0.25))(modelrnn)\n    #rnn_output = Bidirectional(LSTM(64, dropout=0.25, recurrent_dropout=0.25))(modelrnn)\n    modelrnn = Bidirectional(CuDNNLSTM(64, return_sequences=True))(modelrnn)\n    modelrnn = Dropout(0.25)(modelrnn)\n    rnn_output = Bidirectional(CuDNNLSTM(64))(modelrnn)\n    rnn_output = Dropout(0.25)(rnn_output)\n    # Merging both cnn bottleneck and rnn's output wise element wise multiplication\n    merge_layer = concatenate([x, rnn_output])\n    last_process = Dense(128, activation='relu')(merge_layer)\n    last_process = Dropout(0.5)(last_process)\n    output_tensor = Dense(num_classes, activation='softmax')(last_process)\n    model = Model(input=input_tensor, output=output_tensor)\n    model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'])    \n    datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        zoom_range=0.1,\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False\n        )  # randomly flip images\n    history = model.fit_generator(datagen.flow(a,b, batch_size=32,shuffle=True), steps_per_epoch=len(a) \/ 32, epochs=epochs, validation_data = [c, d],callbacks = [MetricsCheckpoint('logs')])\n    score = model.evaluate(c,d, verbose=0)\n    print('\\nKeras CNN+RNN accuracy:', score[1],'\\n')\n    y_pred = model.predict(c)\n    map_characters = classes\n    print('\\n', sklearn.metrics.classification_report(np.where(d > 0)[1], np.argmax(y_pred, axis=1), target_names=list(map_characters.values())), sep='')    \n    Y_pred_classes = np.argmax(y_pred,axis=1) \n    Y_true = np.argmax(d,axis=1)\n    plotKerasLearningCurve()\n    plt.show()  \n    plot_learning_curve(history)\n    plt.show()\n    confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n    plot_confusion_matrix(confusion_mtx, classes = list(classes.values())) \n    plt.show()","b019002d":"runKerasCNNAugment(X_train,y_trainHot,X_test,y_testHot,1,70, class1)","aef7c21c":"runKerasCNNAugment(X_train,z_trainHot,X_test,z_testHot,2, 70, class2)","3aeadbc9":"This is the preliminary implementation of ideas which were used to develop the paper titled **\"Combining Neural Network Models for Blood Cell Classification\"**\n> **Citation**: **Indraneel Ghosh, Siddhant Kundu, \u201cCombining Neural Network Models for Blood Cell Classification.\u201d, arXiv 2021**\n\nThe final results of the work can be found in the following repository. For more details about the thought process behind the implementation, please refer to the [paper](https:\/\/arxiv.org\/abs\/2101.03604)\n"}}