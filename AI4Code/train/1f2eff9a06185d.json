{"cell_type":{"5c58e1cc":"code","3f2c7047":"code","ec50d2d8":"code","e7edf0f2":"code","cfa80bcb":"code","063dd264":"code","44b28126":"code","0decbb9c":"code","d8991fbc":"code","7f9eb51a":"markdown","4dda9f34":"markdown"},"source":{"5c58e1cc":"import numpy as np, pandas as pd, os\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis, LinearDiscriminantAnalysis\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm import tqdm\nfrom sklearn.covariance import EmpiricalCovariance\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport sympy \n","3f2c7047":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain.head()","ec50d2d8":"from sklearn.covariance import GraphicalLasso, OAS\n\ndef get_mean_cov(x,y):\n    model = OAS()\n    ones = (y==1).astype(bool)\n    x2 = x[ones]\n    model.fit(x2)\n    p1 = model.precision_\n    m1 = model.location_\n    \n    onesb = (y==0).astype(bool)\n    x2b = x[onesb]\n    model.fit(x2b)\n    p2 = model.precision_\n    m2 = model.location_\n    \n    ms = np.stack([m1,m2])\n    ps = np.stack([p1,p2])\n    return ms,ps\n","e7edf0f2":"from sklearn.mixture import GaussianMixture\nfrom sklearn.cluster import Birch\nfrom sklearn.cluster import DBSCAN\nfrom tqdm import tqdm_notebook\n\n# INITIALIZE VARIABLES\ncols = [c for c in train.columns if c not in ['id', 'target']]\ncols.remove('wheezy-copper-turtle-magic')\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor i in tqdm_notebook(range(512)):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    train2.reset_index(drop=True,inplace=True)\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    sel = VarianceThreshold(threshold=1.5).fit(train2[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n    \n    # STRATIFIED K-FOLD\n    skf = StratifiedKFold(n_splits=11, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        x_train, y_train = train3[train_index,:], train2.loc[train_index]['target'].values\n        \n        x_train_0 = x_train[y_train==0]\n        x_train_1 = x_train[y_train==1]\n        \n        brc = Birch(branching_factor=50, n_clusters=3, threshold=0.4, compute_labels=True)\n        labels_0 = brc.fit_predict(x_train_0)\n        labels_1 = brc.fit_predict(x_train_1) \n        \n        zero_mean = []\n        zero_cov = []\n        for l in np.unique(labels_0):\n            model = OAS()\n            model.fit(x_train_0[labels_0==l])\n            p = model.precision_\n            m = model.location_\n            \n            zero_mean.append(m)\n            zero_cov.append(p)\n            \n        one_mean = []\n        one_cov = []\n        for l in np.unique(labels_1):\n            model = OAS()\n            model.fit(x_train_1[labels_1==l])\n            p = model.precision_\n            m = model.location_\n            \n            one_mean.append(m)\n            one_cov.append(p)\n       \n            \n            \n        \n#         print(np.array(zero_mean).mean(axis=0))\n        \n        ms = np.stack(zero_mean + one_mean)\n        ps = np.stack(zero_cov +  one_cov)\n        \n        \n#         ms, ps = get_mean_cov(x_train, y_train)\n        \n        gm = GaussianMixture(n_components=6, init_params='random', \n                             covariance_type='full', tol=0.001,reg_covar=0.001, max_iter=100, n_init=1, means_init=ms, precisions_init=ps)\n        gm.fit(np.concatenate([train3[train_index,:],test3],axis = 0))\n        oof[idx1[test_index]] = gm.predict_proba(train3[test_index,:])[:, 0:3].mean(axis=1)\n        preds[idx2] += gm.predict_proba(test3)[:, 0:3].mean(axis=1) \/ skf.n_splits\n    print('AUC ', i, roc_auc_score(1- train2['target'], oof[idx1]))    \n\n        \n# PRINT CV AUC\nauc = roc_auc_score(1 - train['target'],oof)\nprint('QDA scores CV =',round(auc,5))\n","cfa80bcb":"auc = roc_auc_score(1 - train['target'],oof)\nprint('QDA scores CV =',round(auc,5))","063dd264":"x_test_0 = pd.read_csv('..\/input\/test.csv')\nx_test_0['target']=preds","44b28126":"cols = [c for c in train.columns if c not in ['id', 'target']]\ncols.remove('wheezy-copper-turtle-magic')","0decbb9c":"import numpy as np, pandas as pd, os\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import svm, neighbors\n\noof = np.zeros(len(train))\npreds = np.zeros(len(test))\n\n# BUILD 512 SEPARATE MODELS\nfor k in tqdm_notebook(range(512)):\n    # ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I\n    train2 = train[train['wheezy-copper-turtle-magic']==k] \n    train2p = train2.copy(); idx1 = train2.index \n    test2 = x_test_0[x_test_0['wheezy-copper-turtle-magic']==k]\n    \n    # ADD PSEUDO LABELED DATA\n    test2p = test2\n    train2p = pd.concat([train2p,test2p],axis=0)\n    \n    train2p.reset_index(drop=True,inplace=True)\n    \n    # FEATURE SELECTION (USE APPROX 40 OF 255 FEATURES)\n    sel = VarianceThreshold(threshold=1.5).fit(train2p[cols])     \n    train3p = sel.transform(train2p[cols])\n    train3 = sel.transform(train2[cols])\n    test3 = sel.transform(test2[cols])\n        \n    # STRATIFIED K FOLD\n    skf = KFold(n_splits=17, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3p):\n        test_index3 = test_index[ test_index<len(train3) ] # ignore pseudo in oof\n        \n#         print(train3p[train_index,:].shape)\n        # MODEL AND PREDICT WITH QDA\n        clf = neighbors.KNeighborsRegressor(n_neighbors=9, weights='distance')\n        clf.fit(train3p[train_index,:], train2p.loc[train_index]['target'])\n        oof[idx1[test_index3]] = clf.predict(train3[test_index3,:])\n        preds[test2.index] += clf.predict(test3) \/ skf.n_splits\n       \n    if k%64==0: print(k)\n        \n# PRINT CV AUC\nauc = roc_auc_score(train['target'], oof)\nprint('Pseudo Labeled QDA scores CV =',round(auc,5))","d8991fbc":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds\nsub.to_csv('submission.csv',index=False)\n\nimport matplotlib.pyplot as plt\nplt.hist(preds,bins=100)\nplt.title('Final Test.csv predictions')\nplt.show()","7f9eb51a":"![](http:\/\/)","4dda9f34":"# Submit Predictions"}}