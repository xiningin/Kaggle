{"cell_type":{"1af92b8b":"code","21091e3b":"code","53f61830":"code","8f461cd0":"code","a1e27851":"code","e65021e0":"code","11075b24":"code","eacc1417":"code","ef59f432":"code","cfd89147":"code","a1573a27":"code","bab85b3d":"code","7d5d5fe8":"code","f0a343bd":"code","afabd219":"code","ca261d0c":"code","60437bbe":"code","ea4a46c3":"code","758ce98e":"code","a283381d":"code","7096f0d8":"code","eaec6fe6":"code","418bf5a8":"code","669cc0e9":"code","820258d3":"code","fb7d867f":"code","b7d98ee1":"code","0171f380":"code","ea3ca9a8":"code","435691fd":"code","96a2b313":"code","32f0d4c0":"code","e412591b":"code","3ef7889f":"code","f7c4ec29":"code","7b525f5d":"code","42da6085":"code","35690279":"markdown","9f1a13a4":"markdown","6cf52946":"markdown","05c4b7ce":"markdown","80ab496d":"markdown","5c86a94d":"markdown","4c11e388":"markdown","4e74d780":"markdown","29d26b9f":"markdown","4ab76b24":"markdown","c0621212":"markdown","06736f27":"markdown","dbe1e27a":"markdown","09a48871":"markdown","edfd4cc1":"markdown","67179532":"markdown","b97621ca":"markdown","7e1123c2":"markdown","29c711ab":"markdown","59c6818c":"markdown","dc49052f":"markdown","11147cbf":"markdown","0571815c":"markdown","adc67ddf":"markdown","21fdfbfe":"markdown","8ff36eea":"markdown","7183c43d":"markdown","db53d5fa":"markdown","1f5847e4":"markdown"},"source":{"1af92b8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2","21091e3b":"labels = os.listdir(\"..\/input\/drowsiness-dataset\/train\")","53f61830":"labels","8f461cd0":"import matplotlib.pyplot as plt\nplt.imshow(plt.imread(\"..\/input\/drowsiness-dataset\/train\/Closed\/_0.jpg\"))","a1e27851":"a = plt.imread(\"..\/input\/drowsiness-dataset\/train\/yawn\/10.jpg\")","e65021e0":"\n\na.shape","11075b24":"plt.imshow(plt.imread(\"..\/input\/drowsiness-dataset\/train\/yawn\/10.jpg\"))","eacc1417":"def face_for_yawn(direc=\"..\/input\/drowsiness-dataset\/train\", face_cas_path=\"..\/input\/prediction-images\/haarcascade_frontalface_default.xml\"):\n    yaw_no = []\n    IMG_SIZE = 145\n    categories = [\"yawn\", \"no_yawn\"]\n    for category in categories:\n        path_link = os.path.join(direc, category)\n        class_num1 = categories.index(category)\n        print(class_num1)\n        for image in os.listdir(path_link):\n            image_array = cv2.imread(os.path.join(path_link, image), cv2.IMREAD_COLOR)\n            face_cascade = cv2.CascadeClassifier(face_cas_path)\n            faces = face_cascade.detectMultiScale(image_array, 1.3, 5)\n            for (x, y, w, h) in faces:\n                img = cv2.rectangle(image_array, (x, y), (x+w, y+h), (0, 255, 0), 2)\n                roi_color = img[y:y+h, x:x+w]\n                resized_array = cv2.resize(roi_color, (IMG_SIZE, IMG_SIZE))\n                yaw_no.append([resized_array, class_num1])\n    return yaw_no\n\n\nyawn_no_yawn = face_for_yawn()","ef59f432":"def get_data(dir_path=\"..\/input\/drowsiness-dataset\/train\/\", face_cas=\"..\/input\/prediction-images\/haarcascade_frontalface_default.xml\", eye_cas=\"..\/input\/prediction-images\/haarcascade.xml\"):\n    labels = ['Closed', 'Open']\n    IMG_SIZE = 145\n    data = []\n    for label in labels:\n        path = os.path.join(dir_path, label)\n        class_num = labels.index(label)\n        class_num +=2\n        print(class_num)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_COLOR)\n                resized_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n                data.append([resized_array, class_num])\n            except Exception as e:\n                print(e)\n    return data","cfd89147":"data_train = get_data()","a1573a27":"def append_data():\n#     total_data = []\n    yaw_no = face_for_yawn()\n    data = get_data()\n    yaw_no.extend(data)\n    return np.array(yaw_no)","bab85b3d":"new_data = append_data()","7d5d5fe8":"X = []\ny = []\nfor feature, label in new_data:\n    X.append(feature)\n    y.append(label)","f0a343bd":"X = np.array(X)\nX = X.reshape(-1, 145, 145, 3)","afabd219":"from sklearn.preprocessing import LabelBinarizer\nlabel_bin = LabelBinarizer()\ny = label_bin.fit_transform(y)","ca261d0c":"y = np.array(y)","60437bbe":"from sklearn.model_selection import train_test_split\nseed = 42\ntest_size = 0.30\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=seed, test_size=test_size)","ea4a46c3":"len(X_test)","758ce98e":"# !pip install tensorflow==2.3.1\n# !pip install keras==2.4.3","a283381d":"from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nimport tensorflow as tf","7096f0d8":"tf.__version__","eaec6fe6":"import keras\nkeras.__version__","418bf5a8":"train_generator = ImageDataGenerator(rescale=1\/255, zoom_range=0.2, horizontal_flip=True, rotation_range=30)\ntest_generator = ImageDataGenerator(rescale=1\/255)\n\ntrain_generator = train_generator.flow(np.array(X_train), y_train, shuffle=False)\ntest_generator = test_generator.flow(np.array(X_test), y_test, shuffle=False)","669cc0e9":"model = Sequential()\n\nmodel.add(Conv2D(256, (3, 3), activation=\"relu\", input_shape=X_train.shape[1:]))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Conv2D(128, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Conv2D(64, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Conv2D(32, (3, 3), activation=\"relu\"))\nmodel.add(MaxPooling2D(2, 2))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(4, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", metrics=[\"accuracy\"], optimizer=\"adam\")\n\nmodel.summary()","820258d3":"history = model.fit(train_generator, epochs=20, validation_data=test_generator, shuffle=True, validation_steps=len(test_generator))","fb7d867f":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\n\nplt.plot(epochs, accuracy, \"g\", label=\"trainning accuracy\")\nplt.plot(epochs, val_accuracy, \"b\", label=\"validation accuracy\")\nplt.legend()\nplt.show()\n\nplt.plot(epochs, loss, \"r\", label=\"trainning loss\")\nplt.plot(epochs, val_loss, \"b\", label=\"validation loss\")\nplt.legend()\nplt.show()","b7d98ee1":"model.save(\"drowiness_new20.h5\")","0171f380":"model.save(\"drowiness_new20.model\")","ea3ca9a8":"prediction = model.predict_classes(X_test)","435691fd":"prediction","96a2b313":"labels_new = [\"yawn\", \"no_yawn\", \"Closed\", \"Open\"]","32f0d4c0":"from sklearn.metrics import classification_report\nprint(classification_report(np.argmax(y_test, axis=1), prediction, target_names=labels_new))","e412591b":"labels_new = [\"yawn\", \"no_yawn\", \"Closed\", \"Open\"]\nIMG_SIZE = 145\ndef prepare(filepath, face_cas=\"..\/input\/prediction-images\/haarcascade_frontalface_default.xml\"):\n    img_array = cv2.imread(filepath, cv2.IMREAD_COLOR)\n    img_array = img_array \/ 255\n    resized_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))\n    return resized_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)\n\nmodel = tf.keras.models.load_model(\".\/drowiness_new20.h5\")","3ef7889f":"# prepare(\"..\/input\/drowsiness-dataset\/train\/no_yawn\/1068.jpg\")\nprediction = model.predict([prepare(\"..\/input\/drowsiness-dataset\/train\/no_yawn\/1067.jpg\")])\nnp.argmax(prediction)","f7c4ec29":"prediction = model.predict([prepare(\"..\/input\/drowsiness-dataset\/train\/Closed\/_101.jpg\")])\nnp.argmax(prediction)","7b525f5d":"prediction = model.predict([prepare(\"..\/input\/drowsiness-dataset\/train\/Open\/_104.jpg\")])\nnp.argmax(prediction)","42da6085":"prediction = model.predict([prepare(\"..\/input\/drowsiness-dataset\/train\/yawn\/113.jpg\")])\nnp.argmax(prediction)","35690279":"# train test split","9f1a13a4":"# length of X_test","6cf52946":"# Prediction \n## 0-yawn, 1-no_yawn, 2-Closed, 3-Open","05c4b7ce":"# import some dependencies","80ab496d":"# image shape","5c86a94d":"# Not necessary, only use to matching with my pc version","4c11e388":"![fatigued-truck-driver-1.gif](attachment:fatigued-truck-driver-1.gif)\n\n## Driver drowsiness detection is a car safety technology which helps prevent accidents caused by the driver getting drowsy. Various studies have suggested that around 20% of all road accidents are fatigue-related, up to 50% on certain roads.","4e74d780":"# tensorflow version","29d26b9f":"# for yawn and not_yawn. Take only face","4ab76b24":"# separate label and features","c0621212":"# extend data and convert array","06736f27":"# label array","dbe1e27a":"# Prediction","09a48871":"# for closed and open eye","edfd4cc1":"# If you like please upvote","67179532":"# labels","b97621ca":"# save model","7e1123c2":"# predicting function","29c711ab":"# LabelBinarizer","59c6818c":"# Data Augmentation","dc49052f":"# visualize random 1 image","11147cbf":"# new variable to store","0571815c":"# Model","adc67ddf":"# history","21fdfbfe":"# visualize yawn image. \n# Here background is unnecessary. we need only face image array","8ff36eea":"# reshape the array","7183c43d":"# classification report","db53d5fa":"# image array","1f5847e4":"# keras version"}}