{"cell_type":{"6b00bc57":"code","1e2eaa4a":"code","97fd6377":"code","83a73fe1":"code","3bb66334":"code","a89a9290":"code","ae342cff":"code","9290cab9":"code","0e571e2c":"code","83bb474a":"code","16439d8b":"code","31e2130a":"code","396b9366":"code","b77d386d":"code","ead52f13":"code","92f1f50b":"code","7e1ee5d7":"code","b40f62f1":"code","6bbb3d80":"code","33d50643":"code","f0ca54b9":"code","718575a4":"code","9064e187":"code","70d8cf6e":"code","5111e1d7":"code","fce9c6eb":"code","7bef8fca":"code","0697e51f":"code","602e6dcb":"markdown","eccfb222":"markdown","362ba534":"markdown","ff1e133f":"markdown","67b751dd":"markdown","df6ac8d2":"markdown","55db0d70":"markdown","82cb661a":"markdown","8c1bfc5d":"markdown","58bd3cd7":"markdown","e78e61b8":"markdown","ce3473c7":"markdown","31183ccd":"markdown","753264a0":"markdown","41f71246":"markdown","b69a9aa5":"markdown","552f07b7":"markdown","9afe52dd":"markdown","563f7684":"markdown","337ca6f6":"markdown","62159392":"markdown","8c4b6f5f":"markdown","68a22499":"markdown","27a4710a":"markdown","31dc6746":"markdown","7ddf4ddf":"markdown","f57af394":"markdown","524f1635":"markdown","c8e10eed":"markdown","a269d2dd":"markdown","892e0e14":"markdown","5c22e9ca":"markdown","b0f07dfa":"markdown","d915585b":"markdown"},"source":{"6b00bc57":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport scipy.stats as stats\nfrom scipy.stats import norm\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew, norm\nfrom sklearn.neighbors import KNeighborsRegressor\nimport seaborn as sb\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\n","1e2eaa4a":"train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","97fd6377":"plt.figure(figsize = (20,5))\nsns.barplot(x='Neighborhood', y=\"SalePrice\", data = train, estimator = np.median)\nplt.title('Median of Sale Price by Neighbourhood', fontsize = 13)\nplt.show()","83a73fe1":"train_test = pd.concat([train,test], axis=0, sort=False)\ntrain_test.shape","3bb66334":"one_hot = train_test[['MSZoning', 'MSSubClass', 'Street', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', \n          'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', \n          'MasVnrType', 'Foundation', 'Heating', 'Electrical', 'GarageType', 'SaleType', 'SaleCondition']]\nlabel_enc = train_test[['Utilities', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC',\n            'CentralAir', 'KitchenQual', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive']]","a89a9290":"train_test['Utilities'] = train_test['Utilities'].map({'AllPub': 3, 'NoSewr': 2, 'NoSeWa': 1, 'ELO': 0})\ntrain_test['ExterQual'] = train_test['ExterQual'].map({'Ex': 4, 'Gd': 3, 'TA': 2, 'Fa': 1, 'Po': 0})\ntrain_test['ExterCond'] = train_test['ExterCond'].map({'Ex': 4, 'Gd': 3, 'TA': 2, 'Fa': 1, 'Po': 0})\ntrain_test['BsmtQual'] = train_test['BsmtQual'].map({'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0})\ntrain_test['BsmtCond'] = train_test['BsmtCond'].map({'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0})\ntrain_test['BsmtExposure'] = train_test['BsmtExposure'].map({'Gd': 4, 'Av': 3, 'Mn': 2, 'No': 1, 'NA': 0})\ntrain_test['BsmtFinType1'] = train_test['BsmtFinType1'].map({'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0})\ntrain_test['BsmtFinType2'] = train_test['BsmtFinType2'].map({'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0})\ntrain_test['HeatingQC'] = train_test['HeatingQC'].map({'Ex': 4, 'Gd': 3, 'TA': 2, 'Fa': 1, 'Po': 0})\ntrain_test['CentralAir'] = train_test['CentralAir'].map({'N': 0, 'Y': 1})\ntrain_test['KitchenQual'] = train_test['KitchenQual'].map({'Ex': 4, 'Gd': 3, 'TA': 2, 'Fa': 1, 'Po': 0})\ntrain_test['GarageFinish'] = train_test['GarageFinish'].map({'Fin': 3, 'RFn': 2, 'Unf': 1, 'NA': 0})\ntrain_test['GarageQual'] = train_test['GarageQual'].map({'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0})\ntrain_test['GarageCond'] = train_test['GarageCond'].map({'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0})\ntrain_test['PavedDrive'] = train_test['PavedDrive'].map({'Y': 2, 'P': 1, 'N': 0})","ae342cff":"not_available = pd.DataFrame(train_test.isna().sum(), columns = ['Not_available'])\nnot_available = not_available[not_available['Not_available'] > 0]\nnot_available['Percentage'] = (not_available['Not_available'] \/ 2919) * 100\nnot_available['Decision'] =  np.where(not_available['Percentage'] > 20, 'Discard', 'Keep')\nnot_available = not_available.sort_values(by=['Percentage'])\n\nnot_available","9290cab9":"train_test.drop(columns=['FireplaceQu', 'SalePrice', 'Fence', 'Alley', 'MiscFeature', 'PoolQC'], inplace=True)","0e571e2c":"train_test['MSZoning'].fillna(train_test['MSZoning'].mode()[0], inplace=True)\ntrain_test['MSSubClass'].fillna(train_test['MSSubClass'].mode()[0], inplace=True)\ntrain_test['Street'].fillna(train_test['Street'].mode()[0], inplace=True)\ntrain_test['LotShape'].fillna(train_test['LotShape'].mode()[0], inplace=True)\ntrain_test['LandContour'].fillna(train_test['LandContour'].mode()[0], inplace=True)\ntrain_test['LotConfig'].fillna(train_test['LotConfig'].mode()[0], inplace=True)\ntrain_test['LandSlope'].fillna(train_test['LandSlope'].mode()[0], inplace=True)\ntrain_test['Neighborhood'].fillna(train_test['Neighborhood'].mode()[0], inplace=True)\ntrain_test['Condition1'].fillna(train_test['Condition1'].mode()[0], inplace=True)\ntrain_test['Condition2'].fillna(train_test['Condition2'].mode()[0], inplace=True)\ntrain_test['BldgType'].fillna(train_test['BldgType'].mode()[0], inplace=True)\ntrain_test['HouseStyle'].fillna(train_test['HouseStyle'].mode()[0], inplace=True)\ntrain_test['RoofStyle'].fillna(train_test['RoofStyle'].mode()[0], inplace=True)\ntrain_test['RoofMatl'].fillna(train_test['RoofMatl'].mode()[0], inplace=True)\n\ntrain_test['Exterior1st'].fillna(train_test['Exterior1st'].mode()[0], inplace=True)\ntrain_test['Exterior2nd'].fillna(train_test['Exterior2nd'].mode()[0], inplace=True)\ntrain_test['Foundation'].fillna(train_test['Foundation'].mode()[0], inplace=True)\ntrain_test['Heating'].fillna(train_test['Heating'].mode()[0], inplace=True)\ntrain_test['Electrical'].fillna(train_test['Electrical'].mode()[0], inplace=True)\ntrain_test['GarageType'].fillna(train_test['GarageType'].mode()[0], inplace=True)\ntrain_test['SaleType'].fillna(train_test['SaleType'].mode()[0], inplace=True)\ntrain_test['SaleCondition'].fillna(train_test['SaleCondition'].mode()[0], inplace=True)\n\ntrain_test['Utilities'].fillna(train_test['Utilities'].mode()[0], inplace=True)\ntrain_test['ExterQual'].fillna(train_test['ExterQual'].mode()[0], inplace=True)\ntrain_test['ExterCond'].fillna(train_test['ExterCond'].mode()[0], inplace=True)\ntrain_test['BsmtQual'].fillna(train_test['BsmtQual'].mode()[0], inplace=True)\ntrain_test['BsmtCond'].fillna(train_test['BsmtCond'].mode()[0], inplace=True)\ntrain_test['BsmtExposure'].fillna(train_test['BsmtExposure'].mode()[0], inplace=True)\ntrain_test['BsmtFinType1'].fillna(train_test['BsmtFinType1'].mode()[0], inplace=True)\ntrain_test['BsmtFinType2'].fillna(train_test['BsmtFinType2'].mode()[0], inplace=True)\n\ntrain_test['HeatingQC'].fillna(train_test['HeatingQC'].mode()[0], inplace=True)\ntrain_test['CentralAir'].fillna(train_test['CentralAir'].mode()[0], inplace=True)\ntrain_test['KitchenQual'].fillna(train_test['KitchenQual'].mode()[0], inplace=True)\ntrain_test['GarageFinish'].fillna(train_test['GarageFinish'].mode()[0], inplace=True)\ntrain_test['GarageQual'].fillna(train_test['GarageQual'].mode()[0], inplace=True)\ntrain_test['GarageCond'].fillna(train_test['GarageCond'].mode()[0], inplace=True)\ntrain_test['PavedDrive'].fillna(train_test['PavedDrive'].mode()[0], inplace=True)","83bb474a":"train_test['BsmtFinSF1'].fillna(train_test['BsmtFinSF1'].mean(), inplace=True)\ntrain_test['BsmtFinSF2'].fillna(train_test['BsmtFinSF2'].mean(), inplace=True)\ntrain_test['BsmtUnfSF'].fillna(train_test['BsmtUnfSF'].mean(), inplace=True)\ntrain_test['TotalBsmtSF'].fillna(train_test['TotalBsmtSF'].mean(), inplace=True)\ntrain_test['GarageCars'].fillna(train_test['GarageCars'].mean(), inplace=True)\ntrain_test['GarageArea'].fillna(train_test['GarageArea'].mean(), inplace=True)\ntrain_test['BsmtFullBath'].fillna(train_test['BsmtFullBath'].mean(), inplace=True)\ntrain_test['BsmtHalfBath'].fillna(train_test['BsmtHalfBath'].mean(), inplace=True)\ntrain_test['Functional'].fillna(train_test['Functional'].mode()[0], inplace=True)\ntrain_test['MasVnrArea'].fillna(train_test['MasVnrArea'].mean(), inplace=True)\ntrain_test['MasVnrType'].fillna(train_test['MasVnrType'].mode()[0], inplace=True)\ntrain_test['GarageYrBlt'].fillna(train_test['GarageYrBlt'].mean(), inplace=True)\ntrain_test['LotFrontage'].fillna(train_test['LotFrontage'].mean(), inplace=True)","16439d8b":"train_test.isna().sum()","31e2130a":"plt.figure(figsize=(50,40))\ncor = train_test.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","396b9366":"train1 = train_test[:1460] \ntrain2 = train[\"SalePrice\"]\ntrain_n = pd.concat([train1,train2], axis=1, sort=False)\ntrain_n","b77d386d":"plt.style.use('fivethirtyeight')\nplt.subplots(figsize=(14, 9))\nsb.distplot(train2, kde=True, hist=True, fit=norm)\nplt.show()","ead52f13":"y_train = np.log1p(train2)\nplt.style.use('fivethirtyeight')\nplt.subplots(figsize=(14, 8))\nsb.distplot(y_train, kde=True, hist=True, fit=norm)\nplt.show()","92f1f50b":"numeric_feats = train_test.dtypes[train_test.dtypes != 'object'].index\nskewed_feats = train_test[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]\nhigh_skew","7e1ee5d7":"for feature in high_skew.index:\n    train_test[feature] = np.log1p(train_test[feature])","b40f62f1":"train_test['TotalHomeQuality'] = train_test['OverallQual'] + train_test['OverallCond']\ntrain_test['TotalBathrooms'] = (train_test['FullBath'] + (0.5 * train_test['HalfBath']) +\n                                  train_test['BsmtFullBath'] + (0.5 * train_test['BsmtHalfBath']))\ntrain_test['TotalSF'] = train_test['TotalBsmtSF'] + train_test['1stFlrSF'] + train_test['2ndFlrSF']","6bbb3d80":"train_test = train_test.set_index('Id')\ntrain_test = pd.get_dummies(train_test)\npd.set_option('display.max_columns', 230)\n\ntrain_test","33d50643":"X_train = train_test[:len(y_train)]\nX_test = train_test[len(y_train):]\n\nX_train","f0ca54b9":"import xgboost as xg\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV, KFold, cross_val_score\nfrom sklearn.linear_model import LinearRegression, ElasticNet, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom catboost import CatBoostRegressor\nfrom mlxtend.regressor import StackingRegressor","718575a4":"\nkf = KFold(n_splits=8, random_state=42, shuffle=True)\n\ndef cv_rmse(model):\n    return -cross_val_score(model, X_train, y_train, scoring='neg_root_mean_squared_error', cv=kf)\n\nmodels = ['Linear', 'SVR', 'Random_Forest', 'XGBR', 'Cat_Boost', 'Ridge', 'Elastic_Net', 'Lasso', 'Stack']\nscores = []\n\nlin = LinearRegression()\nscore_lin = cv_rmse(lin)\nscores.append(score_lin.mean())\n\nsvr = SVR()\nscore_svr = cv_rmse(svr)\nscores.append(score_svr.mean())\n\nrfr = RandomForestRegressor()\nscore_rfr = cv_rmse(rfr)\nscores.append(score_rfr.mean())\n\nxgb = xg.XGBRegressor()\nscore_xgb = cv_rmse(xgb)\nscores.append(score_xgb.mean())\n\ncatb = CatBoostRegressor(verbose=0, allow_writing_files=False)\nscore_catb = cv_rmse(catb)\nscores.append(score_catb.mean())\n\nrid = Ridge()\nscore_rid = cv_rmse(rid)\nscores.append(score_rid.mean())\n\nel = ElasticNet()\nscore_el = cv_rmse(el)\nscores.append(score_el.mean())\n\nlas = Lasso()\nscore_las = cv_rmse(las)\nscores.append(score_las.mean())\n\nstack_gen = StackingRegressor(regressors=(CatBoostRegressor(verbose=0, allow_writing_files=False),\n                                          Ridge(),\n                                          xg.XGBRegressor(),\n                                          RandomForestRegressor()),\n                              meta_regressor=CatBoostRegressor(verbose=0, allow_writing_files=False),\n                              use_features_in_secondary=True)\nscore_stack_gen = cv_rmse(stack_gen)\nscores.append(score_stack_gen.mean())\n\ncv_score = pd.DataFrame(models, columns=['Regressors'])\ncv_score['RMSE_mean'] = scores\ncv_score","9064e187":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(15, 11))\nplt.barh(cv_score['Regressors'], cv_score['RMSE_mean'])\nplt.title('RMSE by Regressors')\nplt.yticks(fontsize=14)\nplt.xticks(fontsize=15)\nplt.show()","70d8cf6e":"predictions = {}\n\ndef cat_boost(X_train, y_train, X_test):\n    regressor = CatBoostRegressor(verbose=0, allow_writing_files=False)\n    params = {'learning_rate': [0.01, 0.05, 0.005, 0.0005],\n              'depth': [4, 6, 10],\n              'l2_leaf_reg': [1, 2, 3, 5, 9]}\n\n    grid_search_cat = RandomizedSearchCV(estimator=regressor, scoring='neg_root_mean_squared_error', param_distributions=params, n_iter=10, cv=4, verbose=2,\n                                     random_state=42, n_jobs=-1)\n    grid_search_cat.fit(X_train, y_train)\n    cat_model = grid_search_cat.best_estimator_\n    return cat_model\n\ncat_model = CatBoostRegressor(verbose=0, allow_writing_files=False, learning_rate=0.05, l2_leaf_reg=2, depth=4)\ncat_model.fit(X_train, y_train)\npredictions['CatBoost'] = cat_model.predict(X_test)","5111e1d7":"def ridge(X_train, y_train, X_test):\n    alpha_ridge = {'alpha': [-3, -2, -1, 1e-15, 1e-10, 1e-8, 1e-5, 1e-4, 1e-3, 1e-2, 0.5, 1, 1.5, 2, 3, 4, 5, 10, 20, 30, 40]}\n\n    rd = Ridge()\n    grid_search_rd = GridSearchCV(estimator=rd, scoring='neg_root_mean_squared_error', param_grid=alpha_ridge, cv=4, n_jobs=-1, verbose=3)\n    grid_search_rd.fit(X_train, y_train)\n    ridgeModel = grid_search_rd.best_estimator_\n    return ridgeModel\n\nridgeModel = Ridge(alpha=10)\nridgeModel.fit(X_train, y_train)\npredictions['Ridge'] = ridgeModel.predict(X_test)","fce9c6eb":"def stack(X_train, y_train, X_test):\n    regressor = StackingRegressor()\n    stack_search_rd = GridSearchCV(estimator=rd, scoring='neg_root_mean_squared_error', cv=4, n_jobs=-1, verbose=3)\n    stack_search_rd.fit(X_train, y_train)\n    stack_model = stack_search_rd.best_estimator_\n    return stack_model\n    \nstack_model = StackingRegressor(regressors=(CatBoostRegressor(verbose=0, allow_writing_files=False),\n                                          Ridge(),\n                                          xg.XGBRegressor(),\n                                          RandomForestRegressor()),\n                              meta_regressor=CatBoostRegressor(verbose=0, allow_writing_files=False),\n                              use_features_in_secondary=True)\nstack_model.fit(X_train, y_train)\npredictions['Stack'] = stack_model.predict(X_test)","7bef8fca":"final_prediction = 0.25 * predictions['Stack'] + 0.35 * predictions['Ridge'] + 0.4 * predictions['CatBoost']","0697e51f":"result = np.expm1(final_prediction)\nresult = pd.DataFrame(result)\nsub_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'], result], axis=1)\ndatasets.columns = ['Id', 'SalePrice']\ndatasets.to_csv('cat.csv', index=False)","602e6dcb":"**Step 5: Handling Missing values**","eccfb222":"Stack","362ba534":"Now we'll add 3 new features","ff1e133f":"Splitting datasets","67b751dd":"**Step 8: Feature Engineering**\n","df6ac8d2":"**Step 2: Reading Datasets**","55db0d70":"Blending Models","82cb661a":"As we see it's not, so now we'll fix that with log","8c1bfc5d":"Visualizing the results","58bd3cd7":"**Step 6: Observing Correlations**","e78e61b8":"**Step 9: getting the Dummies**","ce3473c7":"**Visualized House Price Prediction**\n\n![](https:\/\/media.timeout.com\/images\/105639464\/1372\/772\/image.jpg)\n[Photograph: Shutterstock]\n\n\nIn this notebook we're predicting selling prices of houses while going through:\n\n**PREPROCESSING & EDA**\n- Importing Libraries & Data\n- Dealing with Missing values\n- Looking at correlations\n- Dealing with Categorical variables: Labelling and Dummy-Encoding\n\n**MODELING**\n- Fixing Skewness\n- Logging\n- Trying out different Models\n- Blending Results from Best Models","31183ccd":"Discovering columns with missing values","753264a0":"Getting results of performance of each model","41f71246":"**Step 11: Final Submission**","b69a9aa5":"Median of Sale Price by Neighbourhood","552f07b7":"**Step 3: Data Visualization**","9afe52dd":"Concatenating train and test data","563f7684":"Making sure no data is missing","337ca6f6":"Creating Correlations Heatmap","62159392":"Filling the missing values of numerical variables with mean","8c4b6f5f":"Selecting the rest of highly skewed features and fixing them","68a22499":"**Step 7: Fixing Skewness**","27a4710a":"Let's see if the dependant variable SalePrice is normally distributed","31dc6746":"Dropping variables labelled 'Discard' and SalePrice","7ddf4ddf":"Importing the libraries for modelling","f57af394":"Filling the missing values of categorical variables with mode","524f1635":"**Step 10: Modelling**","c8e10eed":"**Step 1: Importing neccessary libriries and packages** ","a269d2dd":"CatBoost","892e0e14":"Label Encoding","5c22e9ca":"Ridge","b0f07dfa":"Below are dataset's categorical variables which will later be processed with Dummy-Encoding and Label-Encoding","d915585b":"**Step 4: Dealing with Categorical variables: Labelling and Dummy-Encoding**"}}