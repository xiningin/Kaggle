{"cell_type":{"0a09d158":"code","0f3755f8":"code","1f535b7d":"code","6c711efc":"code","12306f76":"code","7be34f37":"code","ad18aab8":"code","4322b641":"code","15028512":"markdown","146d0a40":"markdown","1d723ccf":"markdown","6a782b14":"markdown"},"source":{"0a09d158":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0f3755f8":"df = pd.read_csv(\"\/kaggle\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv\")","1f535b7d":"df.head()","6c711efc":"def in_app_p(row):\n    \n    x=row[\"In-app Purchases\"]\n    if isinstance(x,np.float64) or pd.isnull(x):\n        row[\"In_App_Count\"]= 0\n        row[\"In_App_Max\"]  = 0\n    else:\n        x_list=[float(x) for x in row[\"In-app Purchases\"].split(\",\")]\n        row[\"In_App_Count\"]=len(x_list)\n        row[\"In_App_Max\"]=max(x_list)\n    return row \n\ndef languages(row):\n    if pd.isnull(row[\"Languages\"]):\n        row[\"Languages\"]=\"EN\"\n    if \"EN\" in row[\"Languages\"]:\n        row[\"Language_EN\"]=1\n    else:\n        row[\"Language_EN\"]=1\n    row[\"Languages_Count\"]=len(row[\"Languages\"].split(\",\"))\n    \n    return row\n\ndef genres(row):\n    row[\"Genres_Count\"] = len(row[\"Genres\"].split())\n    return row\n\n###############################################################################################################################\n\ndf2 = df.loc[df[\"User Rating Count\"]>=10,:].copy()\n\ndf2 = df2.assign(Great_App=lambda x: np.where(x[\"Average User Rating\"]>=4.5,1,0))\\\n         .assign(Subtitle_Present=lambda x: np.where(x[\"Subtitle\"].isnull(),0,1))\\\n         .assign(Price=lambda x: np.where(x[\"Price\"]>=10,10,x[\"Price\"]))\\\n         .assign(Price_Free=lambda x: np.where(x[\"Price\"]==0,1,0))\\\n         .assign(Age_Rating=lambda x: x[\"Age Rating\"].str.replace(\"+\",\"\").astype(int))\\\n         .assign(Description_Length=lambda x: x[\"Description\"].str.len())\\\n         .apply(genres,axis=1)\\\n         .apply(languages,axis=1)\\\n         .apply(in_app_p,axis=1)\\\n         .drop(columns=[\"URL\",\"ID\",\"Name\",\"Subtitle\",\"Icon URL\",\"Primary Genre\",\"In-app Purchases\",\"Developer\",\"Description\",\"Languages\",\"Average User Rating\",\n                        \"Original Release Date\",\"Current Version Release Date\",\"Genres\",\"Age Rating\"])\n\ndf2.head()","12306f76":"X=df2.drop(columns=[\"Great_App\"])\ny=df2[\"Great_App\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25)\n\nrf = RandomForestClassifier(n_estimators=100)\n\nparam_grid = { \n    'n_estimators': [300, 500, 750],\n    'max_features': ['auto', 'sqrt'],\n    'max_depth' : [10,15,20],\n    'criterion' :['gini']\n}\n\ncv_rf = GridSearchCV(estimator=rf, param_grid=param_grid, scoring=\"roc_auc\", cv= 5)\n\ncv_rf.fit(X_train,y_train)\n\n#cross_val_score(rf,X_train,y_train, scoring=\"accuracy\",cv=5)","7be34f37":"cv_rf.best_params_","ad18aab8":"cv_rf.best_score_","4322b641":"final_model = cv_rf.best_estimator_\nfinal_model.fit(X_train,y_train)\nprint(confusion_matrix(y_test,final_model.predict(X_test)))\nprint(roc_auc_score(y_test,final_model.predict(X_test)))","15028512":"# Feature Engineering","146d0a40":"# Test Score","1d723ccf":"# Build Forest","6a782b14":"# Load Data"}}