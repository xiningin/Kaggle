{"cell_type":{"0c5f4292":"code","6a1d3bb8":"code","3f7e7d8e":"code","8ebbdfc9":"code","8587fa2c":"code","2a309cdc":"code","a8b4b3cc":"code","5fe9b9a8":"code","eab5fb11":"code","c1d9baf5":"code","9f77b1bb":"code","bd3372f7":"code","a571256a":"code","e4fa75f1":"code","dc3f768f":"code","9ab2cc71":"code","e1b87629":"code","eacbe76f":"code","33142414":"code","107d9ffb":"markdown","9be9683e":"markdown","935da971":"markdown","7160091d":"markdown","24e89f30":"markdown","d92bb5a8":"markdown","3d94bb47":"markdown","8b827eb2":"markdown","c54becf1":"markdown","7a93ed28":"markdown","adf5f305":"markdown","3f7a2354":"markdown"},"source":{"0c5f4292":"from __future__ import print_function\nimport os\nimport pandas as pd\nimport datetime as dt\nimport json\nimport plotly.express as px\nfrom urllib.request import urlopen\nfrom IPython.core.display import display, HTML","6a1d3bb8":"zfic = '..\/input\/covid19-and-malaria\/Covid_World_Daily.csv'\nzfim = '..\/input\/covid19-and-malaria\/Malaria_World.csv'\nzfip = '..\/input\/covid19-and-malaria\/Population_World.csv'\nzurl = 'https:\/\/raw.githubusercontent.com\/jupyter-widgets\/ipyleaflet\/master\/examples\/countries.geo.json'","3f7e7d8e":"dfc1 = pd.read_csv(zfic, encoding='latin-1')\n# dfc1.head(1)\ndfc2 = dfc1[['countryterritoryCode','countriesAndTerritories','popData2018','dateRep','cases','deaths']]\ndfc2 = dfc2.groupby(by=['countryterritoryCode','countriesAndTerritories','popData2018','dateRep']\n                   ).sum().groupby(level=[0]).cumsum()\ndfc2 = dfc2.reset_index()\n# dfc2.head(1)\ndfc2.columns = ['Code','Name','Population','Date','Covid_C','Covid_D']\ndfc2.head(1)","8ebbdfc9":"dfc3 = dfc2[['Date']].groupby(by=['Date']).count()\ndfc3 = dfc3.reset_index()\ndfc3['Date'] = pd.to_datetime(dfc3['Date'])\ndfc3 = dfc3.sort_values(by=['Date'], ascending=False)\ndfc3.head(2)","8587fa2c":"dfm1 = pd.read_csv(zfim, encoding='latin-1')\n# dfm1.head(1)\ndfp1 = pd.read_csv(zfip, encoding='latin-1')\n# dfp1.head(1)\ndfm1 = pd.merge(dfm1, dfp1, on='Code', how='left', indicator=False)\n# dfm1.head(1)\ndfm1 = dfm1[['Code','Country_x','Population_2020','Deaths_2010']]\ndfm1.columns = ['Code','Name','Population','Malaria_D']\ndfm1 = dfm1.dropna()\ndfm1.head(1)","2a309cdc":"def pickOne(arr):\n    b = \"0\"\n    for c in arr:\n        if str(c) > str(b):\n            b = c\n    return str(b)\n\ndef perPop(j,k):\n    return int(1000000 * float(j) \/ float(k))","a8b4b3cc":"dfcm1 = pd.merge(dfc2, dfm1, on=['Code'], how='outer', indicator=False)\ndfcm1 = dfcm1.fillna(0)\n# dfcm1.head(1)\n\ndfcm1['Name'] = dfcm1.apply(lambda x: pickOne([x.Name_x, x.Name_y]), axis=1)\ndfcm1['Population'] = dfcm1.apply(lambda x: pickOne([x.Population_x, x.Population_y]), axis=1)\ndfcm1['Covid_CP'] = dfcm1.apply(lambda x: perPop(x.Covid_C, x.Population), axis=1)\ndfcm1['Covid_DP'] = dfcm1.apply(lambda x: perPop(x.Covid_D, x.Population), axis=1)\ndfcm1['Malaria_DP'] = dfcm1.apply(lambda x: perPop(x.Malaria_D, x.Population), axis=1)\n\ndfcm1['aCfMf'] = dfcm1.apply(lambda x: (x.Covid_DP<1) & (x.Malaria_DP<11), axis=1)\ndfcm1['aCfMt'] = dfcm1.apply(lambda x: (x.Covid_DP<1) & (x.Malaria_DP>10), axis=1)\ndfcm1['aCtMf'] = dfcm1.apply(lambda x: (x.Covid_DP>0) & (x.Malaria_DP<11), axis=1)\ndfcm1['aCtMt'] = dfcm1.apply(lambda x: (x.Covid_DP>0) & (x.Malaria_DP>10), axis=1)\n\ndfcm1 = dfcm1[['Code','Name','Date','Covid_C','Covid_D','Malaria_D',\n               'Covid_CP','Covid_DP','Malaria_DP','aCfMf','aCfMt','aCtMf','aCtMt']]\ndfcm1 = dfcm1.sort_values(by=['Malaria_D'], ascending=False)\ndfcm1.head(1)","5fe9b9a8":"dfcm2 = dfcm1[['Date','aCfMf','aCfMt','aCtMf','aCtMt','Covid_D','Malaria_D']].groupby(['Date']).sum()\ndfcm2 = dfcm2.reset_index()\ndfcm2 = dfcm2.iloc[1:]\ndfcm2['Date'] = pd.to_datetime(dfcm2['Date'])\ndfcm2 = dfcm2.sort_values(by=['Date'], ascending=False)\ndfcm2.head(1)","eab5fb11":"dfcm2['CfMf'] = dfcm2.apply(lambda x: int(100 * x.aCfMf \/ (x.aCfMf + x.aCfMt + x.aCtMf + x.aCtMt)), axis=1)\ndfcm2['CfMt'] = dfcm2.apply(lambda x: int(100 * x.aCfMt \/ (x.aCfMf + x.aCfMt + x.aCtMf + x.aCtMt)), axis=1)\ndfcm2['CtMf'] = dfcm2.apply(lambda x: int(100 * x.aCtMf \/ (x.aCfMf + x.aCfMt + x.aCtMf + x.aCtMt)), axis=1)\ndfcm2['CtMt'] = dfcm2.apply(lambda x: int(100 - x.CfMf - x.CfMt - x.CtMf), axis=1)\ndfcm3 = dfcm2[['Date','CfMf','CfMt','CtMf','CtMt']]\ndfcm3.head(1)","c1d9baf5":"a = [\"\",\"\",\"\",\"\"]\nb = [\"\",\"\",\"\",\"\"]\nfor i in range(4):      \n    try:\n        v = dfcm3.iloc[1,i+1]\n    except:\n        v = 0\n    try:\n        w = dfcm3.iloc[90,i+1]\n    except:\n        w = 0\n    a[i] = \"<td style='background-color:rgb(\"\n    a[i] = a[i] + str(int(255)) +\",\"\n    a[i] = a[i] + str(int(255-v)) +\",\"\n    a[i] = a[i] + str(int(255-2*v))\n    a[i] = a[i] + \")'>\" + str(v) + \"<\/td>\"\n    b[i] = \"<td style='background-color:rgb(\"\n    b[i] = b[i] + str(int(255)) +\",\"\n    b[i] = b[i] + str(int(255-w)) +\",\"\n    b[i] = b[i] + str(int(255-2*w))\n    b[i] = b[i] + \")'>\" + str(w) + \"<\/td>\"    \n    \nzhtm = \"<html><body>\"\nzhtm = zhtm + \"<table><col width='500'><col width='500'>\"\nzhtm = zhtm + \"<tr><td>\"\nzhtm = zhtm + \"<table><col width='200'><col width='150'><col width='150'>\"\nzhtm = zhtm + \"<tr><td><h2>\" + str(dfcm3.iloc[1,0])[:10] + \"<\/h2><\/td><th >No_Covid<\/th><th>With_Covid<\/th><\/tr>\"\nzhtm = zhtm + \"<tr><th>No_Malaria<\/th>\" + a[0] + a[2] + \"<\/tr>\"\nzhtm = zhtm + \"<tr><th>With_Malaria<\/th>\" + a[1] + a[3] + \"<\/tr><\/table>\"\nzhtm = zhtm + \"<\/td><td>\"\nzhtm = zhtm + \"<table><col width='200'><col width='150'><col width='150'>\"\nzhtm = zhtm + \"<tr><td><h2>\" + str(dfcm3.iloc[90,0])[:10] + \"<\/h2><\/td><th >No_Covid<\/th><th>With_Covid<\/th><\/tr>\"\nzhtm = zhtm + \"<tr><th>No_Malaria<\/th>\" + b[0] + b[2] + \"<\/tr>\"\nzhtm = zhtm + \"<tr><th>With_Malaria<\/th>\" + b[1] + b[3] + \"<\/tr><\/table>\"\nzhtm = zhtm + \"<\/tr><\/table>\"\nzhtm = zhtm + \"<\/body><\/html>\"\n    \ndisplay(HTML(zhtm))","9f77b1bb":"with urlopen(zurl) as resp:\n    zjso = json.loads(resp.read().decode('utf-8'))\n    \nzids = []\nfor zloc in zjso['features']:\n    zids.append([zloc['id']])\nzids = pd.DataFrame(data=zids, columns=['Code'])\n# zids.head(3)\n\nmaps = [\"\",\"\",\"\"]\ndats = ['2019','2020-01-31','2020-03-31']\nlabs = [\"Malaria deaths per million up to 2019\", \"Covid-19 cases per million up to 2020-01-31\", \"Covid-19 cases per million up to 2020-03-31\"]","bd3372f7":"dfm2 = dfm1\ndfm2['Malaria_DP'] = dfm2.apply(lambda x: perPop(x.Malaria_D, x.Population), axis=1)\ndfm2 = pd.merge(zids, dfm1[['Code','Malaria_DP']], on=['Code'], how='left', indicator=False)\ndfm2 = dfm2.fillna(0)\n\nfor i in [0]:\n    \n    maps[i] = px.choropleth_mapbox(dfm2,\n                                   geojson=zjso,\n                                   locations='Code',\n                                   color='Malaria_DP',\n                                   color_continuous_scale=\"OrRd\",\n                                   range_color=(0,12),\n                                   mapbox_style=\"carto-positron\",\n                                   zoom=1,\n                                   center = {\"lat\":0,\"lon\":0},\n                                   opacity=0.5,\n                                   labels={'Malaria_DP':'Malaria'})\n    \n    maps[i].update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})","a571256a":"dfc4 = dfc2[['Date','Code','Population','Covid_C']]\ndfc4['Date'] = pd.to_datetime(dfc4['Date'])\ndfc4['Covid_CP'] = dfc4.apply(lambda x: perPop(x.Covid_C, x.Population), axis=1)\n\nfor i in [1,2]:\n    \n    dfc5 = dfc4.loc[dfc4['Date']==dats[i], ['Code','Covid_CP']]\n    dfc5['Covid_CP'] = dfc5['Covid_CP'].astype(float)\n    dfc6 = pd.merge(zids, dfc5[['Code','Covid_CP']], on=['Code'], how='left', indicator=False)\n    dfc6 = dfc6.fillna(0)\n    \n    maps[i] = px.choropleth_mapbox(dfc6,\n                                   geojson=zjso,\n                                   locations='Code',\n                                   color='Covid_CP',\n                                   color_continuous_scale=\"OrRd\",\n                                   range_color=(0,12),\n                                   mapbox_style=\"carto-positron\",\n                                   zoom=1,\n                                   center = {\"lat\":0,\"lon\":0},\n                                   opacity=0.5,\n                                   labels={'Covid_CP':'Covid-19'})\n    \n    maps[i].update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})","e4fa75f1":"print(labs[0])","dc3f768f":"maps[0]","9ab2cc71":"print(labs[1])","e1b87629":"maps[1]","eacbe76f":"print(labs[2])","33142414":"maps[2]","107d9ffb":"### Conclusion","9be9683e":"### Plot Data on the World Map\n\n- Load an available geo-jason file for the world.\n- Prepare a dataframe of malaria deaths for alls ids (as included in the geo-jason), and map it on the world map.\n- Prepare a dataframe of covid-19 deaths for all ids for a beginning date, and map it on the world map.\n- Prepare a dataframe of covid-19 deaths for all ids for a later date, and map it on the world map.","935da971":"GovCDC: https:\/\/www.cdc.gov\/coronavirus\/2019-nCoV\/index.html\n\nGovWHOCovid: https:\/\/www.who.int\/health-topics\/coronavirus\n\nGovWHOMalaria: https:\/\/www.who.int\/news-room\/fact-sheets\/detail\/malaria\n\nEduHarvard: https:\/\/dataverse.harvard.edu\/file.xhtml\n\nEduStanford: https:\/\/library.stanford.edu\/research\/stanford-geospatial-center\n\nOrgWikiCovid: https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019\n\nOrgWikiMalaria: https:\/\/en.wikipedia.org\/wiki\/Malaria\n\nOrgHopkinsM: https:\/\/www.hopkinsmedicine.org\/coronavirus\/\n\nOrgNPR: https:\/\/www.npr.org\/sections\/goatsandsoda\/2020\/01\/23\/798632253\/map-confirmed-cases-of-wuhan-coronavirus\n\nOrgEndMal: https:\/\/endmalaria.org\/about-malaria\/key-facts\n\nInfoWorldoM: https:\/\/www.worldometers.info\/coronavirus\/#countries\n\nComNaturalE: https:\/\/www.naturalearthdata.com\/","7160091d":"### Correlation of Covid-19 and Malaria (Deaths per Million Population)\n\nMerge covid-19 and malaria dataframes, and evaluate correlation between covid and malaria.","24e89f30":"### Plot the Correlation as a Colored Table","d92bb5a8":"- In January 2020, there was almsot no region with both malaria and Covid-19.\n- In later period, there are a regions with both malaria and Covid-19.\n- In later period, the number of regions with both malaria and Covid-19 is not significant.\n- This implies that while malaria is present almost everywhere and Covid-19 is entering almost everywhere, the overall presence of Covid-19 is less noticeable in regions known for malaria.\n- Based on this finding, I am inclined to speculate that people who have had some malaria medicine (such as [quinine](https:\/\/en.wikipedia.org\/wiki\/Quinine)) and regions which have had spray of some mosquito killer (such as [DDT](https:\/\/en.wikipedia.org\/wiki\/DDT)) are less likely to get Covid-19.","3d94bb47":"# COVID-19 Seems to Hate Malaria.","8b827eb2":"### References","c54becf1":"### Malaria Dataframe\n\nPrepare a dataframe of malaria deaths and population, merge them, and keep relevant columns.","7a93ed28":"### Covid-19 Dataframe\n\nPrepare dataframes of Covid-19 cases and deaths, keep relevant columns, and add cumulative sums.","adf5f305":"COronaVIrus Disease 2019 (COVID-19) was first reported in December 2019, and has now engulfed and locked down the entire world.\n\nMalaria is an old and life threatening pathogenic disease, which still exits in spite of aggressive efforts.\n\nThis notebook compares the known numbers of cases of and deaths due to Covid-19 to the known numbers of deaths due to malaria.\n\nThe notebook finds that while malaria is present almost everywhere and Covid-19 is entering almost everywhere, the overall presence of Covid-19 is less noticeable in regions known for malaria.\n\nIt is as if Covid-19 seems to hate malaria.\n\nBased on this finding, I am inclined to speculate that people who have had some malaria medicine (such as [quinine](https:\/\/en.wikipedia.org\/wiki\/Quinine)) and regions which have had spray of some mosquito killer (such as [DDT](https:\/\/en.wikipedia.org\/wiki\/DDT)) are less likely to get Covid-19.","3f7a2354":"### Packages and Files Used"}}