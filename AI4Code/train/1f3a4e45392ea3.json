{"cell_type":{"abcfee06":"code","02f42153":"code","673e7a67":"code","f404df60":"code","cfc8e604":"code","e1879703":"code","6cc1e645":"code","4f23469b":"code","9544f535":"code","cb01d984":"code","171ce9a9":"code","8b38a925":"code","77666838":"code","5a8c2015":"code","7e5ad8b8":"code","b3b84264":"code","d5ec210e":"code","931e2478":"code","efbc021b":"markdown","dceac84b":"markdown","3f5b1070":"markdown","40dbf17e":"markdown","0dbc0da0":"markdown","ff9118ca":"markdown","6d28b2af":"markdown"},"source":{"abcfee06":"# Intersection of 2 line segments","02f42153":"import shapely.geometry as shg\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 8, 8 #makes our plots bigger!","673e7a67":"#Define the areasign code (note the doc comments!)    \ndef areasign(tri):\n    \"\"\"Finds the sign of the area of a closed triangle\n\n    Parameters\n    ----------\n    tri : List\n        List of coordinate tuples in the format\n        [(x, y), (x, y). (x, y), (x, y)]\n        First and last vertex are the same\n    \n    Returns\n    -------\n    int (-1, 1, 0)\n        -1 if the triangle is encoded clockwise\n        1  if the triangle is encoded anti-clockwise\n        0  if the coordinates are a 1d line\n    \"\"\"\n    sumarea = 0\n    for i in range(0, len(tri)-1):\n        xi = tri[i][0]\n        yi = tri[i][1]\n        xj = tri[i+1][0]\n        yj = tri[i+1][1]\n        sumarea = sumarea + ((xi*yj)-(yi*xj))\n        \n    if sumarea == 0: return 0\n    if sumarea < 0:  return -1\n    if sumarea > 0:  return 1","f404df60":"#Create a a line and copy \ntestline = [(2,2), (5,5)]\ntestline = [(2,2), (5,5)]\ntp1 = (1,5)\ntp2 = (6,2)\ntp3 = (1,1)\n\n#PLOT THEM OUT\ntl1xy = list(zip(*testline))\nplt.plot(tl1xy[0], tl1xy[1])\nplt.plot(tp1[0], tp1[1], 'rx')\nplt.text(tp1[0] + 0.1, tp1[1], s ='pq', fontsize = 15)   #PLOTTING TEXT ONTO THE PLOT (x, y, \"text\")\nplt.plot(tp2[0], tp2[1], 'bx')\nplt.text(tp2[0] - 0.4, tp2[1], s ='p\\'q', fontsize = 15) #Need to escape the ' character'\nplt.plot(tp3[0], tp3[1], 'gx')\nplt.text(tp3[0]+0.1 + 0.1, tp3[1]+0.1, s ='p\\'\\'q', fontsize = 15)","cfc8e604":"tri1 = testline.copy()\ntri2 = testline.copy()\ntri3 = testline.copy()\n\n#insert the test point at the start\ntri1.insert(0, tp1)\ntri2.insert(0, tp2)\ntri3.insert(0, tp3)\n\n#Close the polygon by adding at the start coordinate at the end\ntri1.append(tp1)\ntri2.append(tp2)\ntri3.append(tp3)\n\nprint(tri1)\nprint(tri2)\nprint(tri3)","e1879703":"#FUNCTION TO CREATE TRIANGLE FROM LINE SEGMENT AND TEST POINT\n\ndef create_triangle(test_pt, line_seg):\n    tri = line_seg.copy()\n    \n    tri.insert(0, test_pt)\n    tri.append(test_pt)\n    \n    return tri\n    ","6cc1e645":"tri_test = create_triangle((1, 5), [(2,2), (5,5)])\nprint(tri_test)\n\nxy = list(zip(*tri_test))\nplt.plot(xy[0], xy[1], linewidth=4)                      #PLOT TRIANGLE\nplt.fill(xy[0], xy[1], color = 'lightblue', alpha=0.5)   #FILL TRIANGLE\nplt.plot(1, 5 , 'ro')                                    #PLOT THE TEST PT\nplt.plot([2, 5], [2, 5], 'r-')                           #PLOT THE LINE SEGMENT","4f23469b":"# 2 line segments\n\nline1 = [(1,1), (5, 5)]\nline2 = [(1, 4), (5, 1)]\n\nxy1 = list(zip(*line1))\nxy2 = list(zip(*line2))\n\nplt.plot(xy1[0], xy1[1], color = 'red', linewidth = 4)\nplt.plot(xy2[0], xy2[1], color = 'blue', linewidth =4)","9544f535":"#CREATE TRIANGLES FROM LINE1 and the start and endpoints of LINE2\n\ntri1 = create_triangle(line2[0], line1)\ntri2 = create_triangle(line2[1], line1)\n\nprint(areasign(tri1), areasign(tri2))","cb01d984":"#PLOT THE TRIANGLES WE HAVE CREATED\nxy1 = list(zip(*tri1))\nplt.plot(xy1[0], xy1[1], linewidth=4, color='red')                      #PLOT TRIANGLE\nplt.fill(xy1[0], xy1[1], color = 'lightblue', alpha=0.5)                #FILL TRIANGLE\nxy2 = list(zip(*tri2))\nplt.plot(xy2[0], xy2[1], linewidth=4, color='blue')                     #PLOT TRIANGLE\nplt.fill(xy2[0], xy2[1], color = 'lightgreen', alpha=0.5)               #FILL TRIANGLE","171ce9a9":"# TO CHECK LINE SEGMENT INTERSECTION WE ALSO HAVE TO CHECK\n# THE SIGNS OF THE TRIANGLES OF THE MADE FROM LINE2 AND THE \n# START AND END POINTS OF LINE 1\n\ntri3 = create_triangle(line1[0], line2)\ntri4 = create_triangle(line1[1], line2)\n\nprint(areasign(tri3), areasign(tri4))","8b38a925":"#PLOT THE TRIANGLES WE HAVE CREATED\nxy1 = list(zip(*tri1))\nplt.plot(xy1[0], xy1[1], linewidth=4, color='red')                      #PLOT TRIANGLE\nplt.fill(xy1[0], xy1[1], color = 'lightblue', alpha=0.5)                #FILL TRIANGLE\nxy2 = list(zip(*tri2))\nplt.plot(xy2[0], xy2[1], linewidth=4, color='blue')                     #PLOT TRIANGLE\nplt.fill(xy2[0], xy2[1], color = 'lightgreen', alpha=0.5)               #FILL TRIANGLE\nxy3 = list(zip(*tri3))\nplt.plot(xy3[0], xy3[1], linewidth=4, color='coral')                    #PLOT TRIANGLE\nplt.fill(xy3[0], xy3[1], color = 'coral', alpha=0.2)                    #FILL TRIANGLE\nxy4 = list(zip(*tri4))\nplt.plot(xy4[0], xy4[1], linewidth=4, color='magenta')                  #PLOT TRIANGLE\nplt.fill(xy4[0], xy4[1], color = 'magenta', alpha=0.2)                  #FILL TRIANGLE\n\nplt.text(1.55, 3.4, s = \"Tri 1\", fontsize=20, rotation=45)\nplt.text(3.7, 1.7, s = \"Tri 2\", fontsize=20, rotation=225)\nplt.text(2, 2, s = \"Tri 3\", fontsize=20, rotation=135)\nplt.text(3.5, 3.5, s = \"Tri 4\", fontsize=20, rotation=-45)","77666838":"#2 NEW LINES THAT DON'T INTERSECT\nline3 = [(2,2), (5, 5)]\nline4 = [(0.5, 2.5), (2.5, 0.5)]\n\nxy1 = list(zip(*line3))\nxy2 = list(zip(*line4))\n\nplt.plot(xy1[0], xy1[1], linewidth=4, color='navy')\nplt.plot(xy2[0], xy2[1], linewidth=4, color='orangered')","5a8c2015":"tri1 = create_triangle(line4[0], line3)\ntri2 = create_triangle(line4[1], line3)\n\nprint(areasign(tri1), areasign(tri2))\n\ntri3 = create_triangle(line3[0], line4)\ntri4 = create_triangle(line3[1], line4)\n\nprint(areasign(tri3), areasign(tri4))","7e5ad8b8":"#PLOT THE TRIANGLES WE HAVE CREATED\nxy1 = list(zip(*tri1))\nplt.plot(xy1[0], xy1[1], linewidth=4, color='red')                      #PLOT TRIANGLE\n\nxy2 = list(zip(*tri2))\nplt.plot(xy2[0], xy2[1], linewidth=4, color='blue')                     #PLOT TRIANGLE\n\nxy3 = list(zip(*tri3))\nplt.plot(xy3[0], xy3[1], linewidth=4, color='coral', linestyle='dashed')                    #PLOT TRIANGLE\n\nxy4 = list(zip(*tri4))\nplt.plot(xy4[0], xy4[1], linewidth=4, color='magenta', alpha=0.8)                  #PLOT TRIANGLE\n\n\n","b3b84264":"# ALL THAT'S LEFT IS TO WRAP THIS AS A FUNCTION","d5ec210e":"def line_intersection(line1, line2):\n    #create 4 triangles from the\n    #start and end points of each line and the other line\n    tri1 = create_triangle(line2[0], line1)\n    tri2 = create_triangle(line2[1], line1)\n    tri3 = create_triangle(line1[0], line2)\n    tri4 = create_triangle(line1[1], line2)\n    \n    #Find the sign of the area of each triangle\n    tri1sign = areasign(tri1)\n    tri2sign = areasign(tri2)\n    tri3sign = areasign(tri3)\n    tri4sign = areasign(tri4)\n    #if the signs pf each pair are not the same then the lines intersect\n    if ((tri1sign != tri2sign) and (tri3sign != tri4sign)):\n        return True\n    else:\n        return False\n\nprint('These 2 cross')\nprint(line1)\nprint(line2)\nprint('These 2 do not cross')\nprint(line3)\nprint(line4)","931e2478":"print(line_intersection(line1, line2))\nprint(line_intersection(line3, line4))","efbc021b":"# ORANGE (DASHED) AND MAGENTA TRIANGLES \n# ARE BOTH ANTI-CLOCKWISE TRIANGLES SO HAVE THE SAME SIGN\n\n# Line segments DO NOT intersect","dceac84b":"# IF \n# AREASIGN TRI1 != TRI2 **AND**\n# AREASIGN TRI3 != TRI4\n# THE LINE SEGMENTS **INTERSECT**","3f5b1070":"# PASTE THESE FUNCTIONS INTO A NEW NOTEBOOK CALLED \"Coursework 1\"","40dbf17e":"# LINE SEGMENTS DO NOT INTERSECT\n# tri3 and tri4 have the same sign when we compute area","0dbc0da0":"The Areasign function with docstrings\n[Documenting Functions in Python](https:\/\/realpython.com\/documenting-python-code\/)","ff9118ca":"# Some things to try out\n\n# Test the lines \n* [(3, 3), (100, 101)] and [(5, 1), (5, 150)]\n* [(3, 3), (100, 101)] and [(1, 1), (5, 5)]\n\n# PLOT THEM OUT TO CHECK\n\n# Add DOCSTRINGS to these new functions\n# TO describe the PURPOSE of the function, their ARGUMENTS and RETURN values\n\n","6d28b2af":"# End and Start Points have different signs so lie on opposite sides of line1\n"}}