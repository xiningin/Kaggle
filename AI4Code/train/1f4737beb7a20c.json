{"cell_type":{"503fc158":"code","e57084d0":"code","e973321b":"code","fcbad048":"code","af54c313":"code","dd4bd23c":"code","f197b5a2":"code","20fa078d":"code","fb97c439":"code","c046122b":"code","62258e67":"code","9574058d":"code","e20896ee":"code","79acbde5":"code","91cd6317":"code","2d98ea42":"code","5124c51e":"code","e112da7e":"code","5027b7cf":"code","101a3117":"code","e5e76c7a":"code","20f1be0f":"code","bce99792":"code","904c086d":"code","097f63bb":"code","f9888350":"code","52a056c8":"code","6627e9bc":"code","2f206080":"code","7718b833":"code","461e87ea":"code","7530494d":"code","92313d8a":"code","86957ee1":"code","0a80447b":"code","e8e37bb2":"code","b2594f09":"code","e2642399":"code","328acc52":"code","d4921145":"code","6bd1575d":"code","b1342857":"code","156b82b1":"code","2791853f":"code","012d8bfc":"code","ab5b439e":"code","a3715881":"code","0e0d6437":"code","65606ff8":"code","c3dc38ed":"code","3ff42b25":"code","4fae5564":"code","cdfb2c5b":"code","8ee1e36b":"markdown","5612f1ee":"markdown","99497a11":"markdown","b0264d23":"markdown","a38b80e0":"markdown","bbdf2e27":"markdown","843fda28":"markdown","68197f45":"markdown","2c79530a":"markdown"},"source":{"503fc158":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport sklearn.preprocessing as sk\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\n","e57084d0":"df_b = pd.read_csv(\"..\/input\/opcode_frequency_benign.csv\")\ndf_m = pd.read_csv(\"..\/input\/opcode_frequency_malware.csv\")","e973321b":"df_b['Class'] = 0\ndf_m['Class'] = 1","fcbad048":"df_train_original2 = df_b.append(df_m)\ndf_train_original = df_b.append(df_m , ignore_index = True)\n","af54c313":"df_train_original.head()","dd4bd23c":"df_train = df_train_original.copy()\n","f197b5a2":"df_train.duplicated(keep = 'first').any()","20fa078d":"df_train.isnull().values.any()","fb97c439":"df_train.drop('FileName',axis = 1,inplace = True)","c046122b":"y = df_train['Class']\nX = df_train.drop('Class',axis = 1)\nX.head()","62258e67":"# Test train split\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=42)","9574058d":"from sklearn import preprocessing\n#Performing Min_Max Normalization\nmin_max_scaler = preprocessing.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(X_train)\nX_train = pd.DataFrame(np_scaled)\nnp_scaled_val = min_max_scaler.transform(X_val)\nX_val = pd.DataFrame(np_scaled_val)\nX_train.head()","e20896ee":"np.random.seed(42)","79acbde5":"from sklearn.naive_bayes import GaussianNB as NB\nnb = NB()\nnb.fit(X_train,y_train)\nnb.score(X_val,y_val)","91cd6317":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score\n\ny_pred_NB = nb.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_NB))","2d98ea42":"print(classification_report(y_val, y_pred_NB))","5124c51e":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_val, y_pred_NB)","e112da7e":"from sklearn.linear_model import LogisticRegression\nlg = LogisticRegression(solver = 'liblinear', C = 1, multi_class = 'ovr', random_state = 42)\nlg.fit(X_train,y_train)\nlg.score(X_val,y_val)","5027b7cf":"lg = LogisticRegression(solver = 'lbfgs', C = 8, multi_class = 'multinomial', random_state = 42)\nlg.fit(X_train,y_train)\nlg.score(X_val,y_val)","101a3117":"y_pred_LR = lg.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_LR))","e5e76c7a":"print(classification_report(y_val, y_pred_LR))","20f1be0f":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_val, y_pred_LR)","bce99792":"from sklearn.tree import DecisionTreeClassifier\n\ntrain_acc = []\ntest_acc = []\nfor i in range(1,15):\n    dTree = DecisionTreeClassifier(max_depth=i)\n    dTree.fit(X_train,y_train)\n    acc_train = dTree.score(X_train,y_train)\n    train_acc.append(acc_train)\n    acc_test = dTree.score(X_val,y_val)\n    test_acc.append(acc_test)","904c086d":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(1,15),train_acc,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(1,15),test_acc,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score, test_score],[\"Train Accuracy\", \"Validation Accuracy\"])\nplt.title('Accuracy vs Max Depth')\nplt.xlabel('Max Depth')\nplt.ylabel('Accuracy')","097f63bb":"from sklearn.tree import DecisionTreeClassifier\n\ntrain_acc = []\ntest_acc = []\nfor i in range(2,30):\n    dTree = DecisionTreeClassifier(max_depth = 10, min_samples_split=i, random_state = 42)\n    dTree.fit(X_train,y_train)\n    acc_train = dTree.score(X_train,y_train)\n    train_acc.append(acc_train)\n    acc_test = dTree.score(X_val,y_val)\n    test_acc.append(acc_test)","f9888350":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(2,30),train_acc,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(2,30),test_acc,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score, test_score],[\"Train Accuracy\", \"Validation Accuracy\"])\nplt.title('Accuracy vs min_samples_split')\nplt.xlabel('Max Depth')\nplt.ylabel('Accuracy')","52a056c8":"dTree = DecisionTreeClassifier(max_depth=9, random_state = 42)\ndTree.fit(X_train,y_train)\ndTree.score(X_val,y_val)","6627e9bc":"y_pred_DT = dTree.predict(X_val)\nprint(confusion_matrix(y_val, y_pred_DT))","2f206080":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_val,y_pred_DT)","7718b833":"from sklearn.ensemble import RandomForestClassifier\n\nscore_train_RF = []\nscore_test_RF = []\n\nfor i in range(1,18,1):\n    rf = RandomForestClassifier(n_estimators=i, random_state = 42)\n    rf.fit(X_train, y_train)\n    sc_train = rf.score(X_train,y_train)\n    score_train_RF.append(sc_train)\n    sc_test = rf.score(X_val,y_val)\n    score_test_RF.append(sc_test)","461e87ea":"plt.figure(figsize=(10,6))\ntrain_score,=plt.plot(range(1,18,1),score_train_RF,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='green', markersize=5)\ntest_score,=plt.plot(range(1,18,1),score_test_RF,color='red',linestyle='dashed',  marker='o',\n         markerfacecolor='blue', markersize=5)\nplt.legend( [train_score,test_score],[\"Train Score\",\"Test Score\"])\nplt.title('Fig4. Score vs. No. of Trees')\nplt.xlabel('No. of Trees')\nplt.ylabel('Score')","7530494d":"rf = RandomForestClassifier(n_estimators=13, random_state = 42)\nrf.fit(X_train, y_train)\nrf.score(X_val,y_val)","92313d8a":"y_pred_RF = rf.predict(X_val)\nconfusion_matrix(y_val, y_pred_RF)","86957ee1":"print(classification_report(y_val, y_pred_RF))","0a80447b":"param_grid = {\n'n_estimators': [650,700,800,900],\n'max_features': ['auto', 'sqrt', 'log2'],\n'max_depth' : [16,17,18],\n'criterion' :['gini', 'entropy']\n}","e8e37bb2":"#import xgboost as xgb","b2594f09":"#xgc = xgb.XGBClassifier()\n#xgc.fit(X_train, y_train)\n#xgc.score(X_val,y_val)","e2642399":"#y_pred_X = xgc.predict(X_val)\n#roc_auc_score(y_val, y_pred_X)","328acc52":"from sklearn.model_selection import GridSearchCV\nCV_rfc = GridSearchCV(estimator=rf, param_grid=param_grid, cv= 5, verbose=20,n_jobs=-1)\nCV_rfc.fit(X,y)","d4921145":"CV_rfc.best_params_","6bd1575d":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn import tree\nmodel = BaggingClassifier(tree.DecisionTreeClassifier(random_state=1))\nmodel.fit(X_train, y_train)\nmodel.score(X_val,y_val)","b1342857":"y_pred_bagging = model.predict(X_val)\naccuracy_score(y_val,y_pred_bagging)","156b82b1":"df_test_original = pd.read_csv(\"..\/input\/Test_data.csv\")\ndf_test = df_test_original.copy()\ndf_test.head()","2791853f":"df_testing = df_test.drop(df_test.columns[1809],axis  = 1)\ndf_testing = df_testing.drop('FileName',axis = 1)\ndf_testing.head()","012d8bfc":"min_max_scaler = preprocessing.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(X)\nX1 = pd.DataFrame(np_scaled)\nX1.head()","ab5b439e":"min_max_scaler = preprocessing.MinMaxScaler()\nnp_scaled = min_max_scaler.fit_transform(df_testing)\ndf_minmax = pd.DataFrame(np_scaled)\ndf_minmax.head()","a3715881":"rf.fit(X,y)\npredictions = rf.predict(df_minmax)","0e0d6437":"submit = pd.read_csv(\"..\/input\/Test_data.csv\" , sep = \",\")\ncolID = submit[['FileName']]","65606ff8":"res = colID.assign(Class = predictions)","c3dc38ed":"res['FileName'] = res['FileName'].astype(int)","3ff42b25":"res.to_csv(\"Submission3.csv\",index = False)","4fae5564":"res.info()","cdfb2c5b":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\ndef create_download_link(df, title = \"Download CSV file\", filename = \"Submissionffg.csv\"):\n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\ncreate_download_link(res)","8ee1e36b":"# Feature Scaling","5612f1ee":"# Decision Tree","99497a11":"# Naive Bayes","b0264d23":"# Pre Processing","a38b80e0":"# Testing on the model","bbdf2e27":"# Random Forest","843fda28":"# Bagging","68197f45":"# Grid Search","2c79530a":"# Logistic Regression"}}