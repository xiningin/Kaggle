{"cell_type":{"91ee2bd5":"code","61c9ae9f":"code","85c77624":"code","3d9326ed":"code","dd7029f9":"code","fc85c7fb":"code","a4d9984a":"markdown","b5bcc654":"markdown","daa9ee82":"markdown","9780c54d":"markdown","5f8ff476":"markdown","76e2d4fa":"markdown","3258d809":"markdown","fbab9d5d":"markdown","2a44bcc0":"markdown"},"source":{"91ee2bd5":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","61c9ae9f":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","85c77624":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","3d9326ed":"nRowsRead = None # specify 'None' if want to read whole file\n# Vancouver-animal-control-inventory-register.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Vancouver-animal-control-inventory-register.csv', sep = ';', header = 'infer', nrows = nRowsRead)\ndf1.dataframeName = 'Vancouver-animal-control-inventory-register.csv'\ndf1.set_index('AnimalID',inplace=True, verify_integrity=True)\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","dd7029f9":"df1.head(5)","fc85c7fb":"plotPerColumnDistribution(df1, 10, 5)","a4d9984a":"There is 1 csv file in the current version of the dataset:\n","b5bcc654":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","daa9ee82":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","9780c54d":"Distribution graphs (histogram\/bar graph) of sampled columns:","5f8ff476":"Let's take a quick look at what the data looks like:","76e2d4fa":"## Introduction\nThis is an automatically-generated kernel (That has been slightly edited by Joseph Horton) with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.\n\nThe only notable changes from the kernel generated by the Kaggle Kerneler bot is that I've removed charts that do not fit the data, set AnimalID as the index, and set the delimitator to ';' when reading in the datafile.","3258d809":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`.","fbab9d5d":"Now you're ready to read in the data and use the plotting functions to visualize the data.","2a44bcc0":"### Let's check 1st file: \/kaggle\/input\/Vancouver-animal-control-inventory-register.csv"}}