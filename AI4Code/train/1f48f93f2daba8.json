{"cell_type":{"4a4890b0":"code","f92e347a":"code","65d68896":"code","dee0e094":"code","02afd504":"code","037afce4":"code","89674b19":"code","11bcd4a7":"code","c7285bbe":"code","6405994c":"code","834cd5a8":"code","5a19c251":"code","acae8cf0":"code","cf65cf82":"code","06e7835c":"code","8c01772c":"code","e5bf04fb":"code","dca1b508":"code","2f98bbef":"code","5d6c11b9":"code","cfed5d4b":"code","f9ef891b":"code","9711691f":"code","0a06d3a6":"code","1f873a14":"code","0abd52d7":"code","0a1411ca":"code","7b327d41":"code","70ca3bb7":"code","5d4040b3":"code","7147e7f9":"code","b56c90ac":"code","3568c44a":"code","08430371":"code","2ae3e13b":"code","c0a9d478":"code","237b5702":"markdown","e13401d4":"markdown","c2be88d6":"markdown","2c099e60":"markdown","ee268e5f":"markdown","a1a80cc3":"markdown","92fecb1f":"markdown","9e945264":"markdown","01e33e11":"markdown","bccc1de1":"markdown","23ff834f":"markdown","60cb2dc9":"markdown","7583f815":"markdown","1831bac1":"markdown","2893dfde":"markdown","c8fe83b8":"markdown","d35c4f2a":"markdown","af469c62":"markdown"},"source":{"4a4890b0":"# Python \u22653.5 is required\nimport sys\nassert sys.version_info >= (3, 5)\n\n# Scikit-Learn \u22650.20 is required\nimport sklearn\nassert sklearn.__version__ >= \"0.20\"\n\n# Common imports\nimport numpy as np\nimport pandas as pd\nimport os\n\n# To plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\n# Ignore useless warnings (see SciPy issue #5998)\nimport warnings\nwarnings.filterwarnings(action=\"ignore\", message=\"^internal gelsd\")","f92e347a":"housing = pd.read_csv('..\/input\/california-housing-prices\/housing.csv')\nhousing.head()","65d68896":"housing.info()","dee0e094":"housing[\"ocean_proximity\"].value_counts()","02afd504":"housing.describe().T","037afce4":"housing.hist(bins=50, figsize=(20,15))\nplt.show();","89674b19":"fig = plt.figure(dpi = 80, figsize = (6,4))\nax = fig.add_axes([1,1,1,1])\nax.set(xlabel = 'Median Income Class',ylabel = 'Frequency',title = 'Distribution of Median Income')\nhousing[\"median_income\"].hist(color='blue',ax = ax)\nplt.show()","11bcd4a7":"housing[\"income_cat\"] = pd.cut(housing[\"median_income\"],\n                               bins=[0., 1.5, 3.0, 4.5, 6., np.inf],\n                               labels=[1, 2, 3, 4, 5])","c7285bbe":"housing[\"income_cat\"].value_counts()","6405994c":"fig = plt.figure(dpi = 80, figsize = (6,4))\nax = fig.add_axes([1,1,1,1])\nax.set(xlabel = 'Median Income Category',ylabel = 'Frequency',title = 'Distribution of Median Income Category')\nhousing[\"income_cat\"].hist(color = 'purple',ax=ax)\nplt.show()","834cd5a8":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(housing, housing[\"income_cat\"]):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","5a19c251":"housing = strat_train_set.copy()","acae8cf0":"fig = plt.figure(dpi = 100,figsize = (4,4))\nax = fig.add_axes([1,1,1,1])\n\nimport matplotlib.image as mpimg\ncalifornia_img=mpimg.imread(\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/1b\/California_Locator_Map.PNG\/280px-California_Locator_Map.PNG\")\nhousing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", figsize=(10,7),ax=ax,\n                       s=housing['population']\/100, label=\"Population\",\n                       c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"),\n                       colorbar=False, alpha=0.4,\n                      )\nplt.imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05], alpha=0.5,\n           cmap=plt.get_cmap(\"jet\"))\nplt.ylabel(\"Latitude\", fontsize=14)\nplt.xlabel(\"Longitude\", fontsize=14)\n\nprices = housing[\"median_house_value\"]\ntick_values = np.linspace(prices.min(), prices.max(), 11)\ncbar = plt.colorbar()\ncbar.ax.set_yticklabels([\"$%dk\"%(round(v\/1000)) for v in tick_values], fontsize=14)\ncbar.set_label('Median House Value', fontsize=16)\n\nplt.legend(fontsize=16)\nplt.show();","cf65cf82":"corr = housing.corr()\nmask = np.triu(np.ones_like(corr,dtype = bool))\n\nplt.figure(dpi=100)\nplt.title('Correlation Analysis')\nsns.heatmap(corr,mask=mask,annot=False,lw=0,linecolor='white',cmap='viridis',fmt = \"0.2f\")\nplt.xticks(rotation=90)\nplt.yticks(rotation = 0)\nplt.show()","06e7835c":"# from pandas.tools.plotting import scatter_matrix # For older versions of Pandas\nfrom pandas.plotting import scatter_matrix\n\nattributes = [\"median_house_value\", \"median_income\", \"total_rooms\",\n              \"housing_median_age\"]\nscatter_matrix(housing[attributes], figsize=(12, 8))\nplt.show()","8c01772c":"fig = plt.figure(dpi = 80, figsize = (6,4))\nax = fig.add_axes([1,1,1,1])\n\nhousing.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n             alpha=0.1,color = 'blue',ax=ax)\nplt.axis([0, 16, 0, 550000])\nplt.show()","e5bf04fb":"housing[\"rooms_per_household\"] = housing[\"total_rooms\"]\/housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]\/housing[\"total_rooms\"]\nhousing[\"population_per_household\"]=housing[\"population\"]\/housing[\"households\"]","dca1b508":"corr = housing.corr()\nmask = np.triu(np.ones_like(corr,dtype = bool))\n\nplt.figure(dpi=100)\nplt.title('Correlation Analysis')\nsns.heatmap(corr,mask=mask,annot=False,lw=0,linecolor='white',cmap='magma',fmt = \"0.2f\")\nplt.xticks(rotation=90)\nplt.yticks(rotation = 0)\nplt.show()","2f98bbef":"housing = strat_train_set.drop(\"median_house_value\", axis=1) # drop labels for training set\nhousing_labels = strat_train_set[\"median_house_value\"].copy()","5d6c11b9":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder","cfed5d4b":"from sklearn.base import BaseEstimator, TransformerMixin\n\n# column index\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y=None):\n        return self  # nothing else to do\n    def transform(self, X):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household,\n                         bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]","f9ef891b":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('attribs_adder', CombinedAttributesAdder()),\n        ('std_scaler', StandardScaler()),\n    ])","9711691f":"from sklearn.compose import ColumnTransformer\n\nhousing_num = housing.drop(\"ocean_proximity\", axis=1)\n\nnum_attribs = list(housing_num)\ncat_attribs = [\"ocean_proximity\"]\n\n\nfull_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", OneHotEncoder(), cat_attribs),\n    ])","0a06d3a6":"housing_prepared = full_pipeline.fit_transform(housing)\nhousing_prepared","1f873a14":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=5, random_state=42)\nforest_reg.fit(housing_prepared, housing_labels)","0abd52d7":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n\nhousing_predictions = forest_reg.predict(housing_prepared)\nforest_mse = mean_squared_error(housing_labels, housing_predictions)\nforest_rmse = np.sqrt(forest_mse)\nprint(\"RMSE ==> \", forest_rmse)","0a1411ca":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())","7b327d41":"from sklearn.model_selection import cross_val_score\n\nforest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels,\n                                scoring=\"neg_mean_squared_error\", cv=5)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","70ca3bb7":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\n# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\ngrid_search.fit(housing_prepared, housing_labels)","5d4040b3":"grid_search.best_params_","7147e7f9":"grid_search.best_estimator_","b56c90ac":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","3568c44a":"final_model = grid_search.best_estimator_\n\nX_test = strat_test_set.drop(\"median_house_value\", axis=1)\ny_test = strat_test_set[\"median_house_value\"].copy()\n\nX_test_prepared = full_pipeline.transform(X_test)","08430371":"final_predictions = final_model.predict(X_test_prepared)\n\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)","2ae3e13b":"print(\"RMSE on Test ==> \",final_rmse)","c0a9d478":"from scipy import stats\n\nconfidence = 0.95\nsquared_errors = (final_predictions - y_test) ** 2\nnp.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,\n                         loc=squared_errors.mean(),\n                         scale=stats.sem(squared_errors)))","237b5702":"# Get the data","e13401d4":"> This plot reveals a few things. First, the correlation is indeed very strong; you can clearly see the upward trend and the points are not too dispersed.","c2be88d6":"# EDA\n\nI will create a seperate copy to play around... Note that i am not touching test set :)","2c099e60":"# Launch and Monitor\n\nOverview ==>\n\n1. What are the next steps after you\u2019ve deployed your machine learning model?\n\n2. Post-deployment monitoring is a crucial step in any machine learning project\n\n3. Learn from an experienced machine learning leader about the various aspects of post-model production monitoring\n\n[Read Article Here](https:\/\/www.analyticsvidhya.com\/blog\/2019\/10\/deployed-machine-learning-model-post-production-monitoring\/)\n\n### Thank you for reading my Notebook. Please feel free to improve me by suggesting anything :)","ee268e5f":"> This image tells that the housing price is very much related to the location and to the population density.","a1a80cc3":"Notice a few things in these histograms:\n\n1. First, the median income attribute does not look like it is expressed in US dollars (USD). After checking with the team that collected the data, you are told that the data has been scaled and capped at 15 (actually 15.0001) for higher median incomes, and at 0.5 (actually 0.4999) for lower median incomes. Working with preprocessed attributes is common in Machine Learning, and it is not necessarily a problem, but you should try to understand how the data was computed.\n\n2. The housing median age and the median house value were also capped. The latter may be a serious problem since it is your target attribute (your labels). Your Machine Learning algorithms may learn that prices never go beyond that limit. You need to check with your client team (the team that will use your system\u2019s output) to see if this is a problem or not. If they tell you that they need precise predictions even beyond $500,000, then you have mainly two options:\n\na. Collect proper labels for the districts whose labels were capped.\n\nb. Remove those districts from the training set (and also from the test set, since your system should not be evaluated poorly if it predicts values beyond\n$500,000).\n\n3. These attributes have very different scales. We will discuss this later in this chapter when we explore feature scaling.\n\n4. Finally, many histograms are tail heavy: they extend much farther to the right of the median than to the left. This may make it a bit harder for some Machine Learning algorithms to detect patterns. We will try transforming these attributes later on to have more bell-shaped distributions.","92fecb1f":"# Evaluate Model","9e945264":"> You might want to have an idea of how precise the estimate is. For this you can compute a 95% Confidence Interval for the genralization error using scipy.","01e33e11":"> Most median income values are clustered around 2\u20135 (tens of thousands of dollars),but some median incomes go far beyond 6. It is important to have a sufficient number of instances in your dataset for each stratum, or else the estimate of the stratum\u2019s importance may be biased. This means that you should not have too many strata, and each stratum should be large enough.","bccc1de1":"# Model Tuning\n\n> Feel free to change CV and do some experimentation !!","23ff834f":"> Not bad! The new bedrooms_per_room attribute is much more correlated with the median house value than the total number of rooms or bedrooms. ","60cb2dc9":"#### Let us create few more attributes !!","7583f815":"> I will use Staratified sampling, considering Median Income to a good predictor !!","1831bac1":"> The most promising attribute to predict the median house value is the median income, so let\u2019s zoom in on their correlation scatterplot.","2893dfde":"## Split the Data in Train and Test set","c8fe83b8":"# Data Pipeline","d35c4f2a":"# Introduction\n\n![](https:\/\/miro.medium.com\/max\/2726\/1*ra5Opk-6Fy1wH0IPXiankA.png)\n\nThe California Housing Prices dataset from the StatLib repository.This dataset was based on data from the 1990 California cen\u2010\nsus.\n\nHere are the main steps you will go through:\n\n1. Get the data.\n\n2. Discover and visualize the data to gain insights.\n\n3. Prepare the data for Machine Learning algorithms.\n\n4. Select a model and train it.\n\n5. Fine-tune your model.\n\n6. Present your solution.\n\n7. Launch, monitor, and maintain your system.","af469c62":"# Model Training\n\nI am not focusing myself to achieve accuracy here. So i will use simpler models. Feel free to fork and tweak params accordingly :)"}}