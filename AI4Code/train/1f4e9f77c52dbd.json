{"cell_type":{"72af6f9c":"code","88ac03b3":"code","94da9dad":"code","b3bff492":"code","4e608047":"code","0f21f2fc":"code","24581389":"code","19a0305c":"code","bbb35a64":"code","eed1e854":"code","224452c0":"code","8e196b53":"code","ebc06425":"code","7c1076a7":"code","7398842a":"code","b58e2719":"code","150e9442":"code","0ea08dd5":"code","058b49dd":"code","2f07c09f":"code","583fcae3":"code","20a1d9b0":"code","1a3b7e3d":"code","ed0d5f41":"code","7ef2f07c":"code","2add0492":"code","ff17e2b5":"code","81ab3a9c":"code","db49b5ad":"code","104a525c":"code","623e5109":"code","fd789710":"code","4637e97d":"markdown","0800f923":"markdown","c175df14":"markdown","3d285910":"markdown","61bcc0e1":"markdown","6a9dfb61":"markdown","daaf478f":"markdown","f2ad1bab":"markdown","74947d38":"markdown","8cc8c532":"markdown","6da6b8d9":"markdown","085f9673":"markdown","eafe8398":"markdown","201e2e2d":"markdown","f4bd5435":"markdown","c484148a":"markdown","8fd67475":"markdown","b65726c1":"markdown","f040b1bf":"markdown","3632721b":"markdown","a72fe09a":"markdown","34e51276":"markdown","2d2522f7":"markdown","8b213649":"markdown","19a9ca76":"markdown","896df29a":"markdown","361c7c8b":"markdown","cf390130":"markdown","d062ecbd":"markdown","7ba0f0ed":"markdown","b3b7e84c":"markdown"},"source":{"72af6f9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88ac03b3":"from IPython.display import HTML\nHTML(\"\"\"\n<style>\nh1,h2,h3 {\n\tmargin: 1em 0 0.5em 0;\n\tfont-weight: 600;\n\tfont-family: 'Titillium Web', sans-serif;\n\tposition: relative;  \n\tfont-size: 36px;\n\tline-height: 40px;\n\tpadding: 15px 15px 15px 2.5%;\n\tcolor: #13003A;\n\tbox-shadow: \n\t\tinset 0 0 0 1px rgba(53,86,129, 1), \n\t\tinset 0 0 5px rgba(53,86,129, 1),\n\t\tinset -285px 0 35px white;\n\tborder-radius: 0 10px 0 15px;\n\tbackground: #fff\n    \n}\n<\/style>\n\"\"\")","94da9dad":"!pip install greykite","b3bff492":"!pip install pillow==4.1.1\n%reload_ext autoreload\n%autoreload","4e608047":"!pip install --force-reinstall pandas","0f21f2fc":"from collections import defaultdict\nimport warnings\nimport pandas as pd\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt \nimport datetime, pytz\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport gc\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport plotly\nfrom sklearn.metrics import mean_absolute_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import Activation\nimport keras\nimport tensorflow\nfrom greykite.framework.templates.autogen.forecast_config import ForecastConfig\nfrom greykite.framework.templates.autogen.forecast_config import MetadataParam\nfrom greykite.framework.templates.forecaster import Forecaster \nfrom greykite.framework.templates.model_templates import ModelTemplateEnum\nfrom greykite.framework.utils.result_summary import summarize_grid_search_results","24581389":"df = pd.read_csv('..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2021-03-31.csv')\ndf['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\ngroup = df.groupby('date')\nPrice = group['Weighted_Price'].mean()","19a0305c":"df_price_zz=Price.to_frame()\ndf_price_zz['Timestamp'] = df_price_zz.index\ndf_price_zz['Timestamp'] = pd.to_datetime(df_price_zz['Timestamp'])\ndf_price_zz.reset_index(drop=True,inplace=True)\ndf_price_include_zz = df_price_zz[df_price_zz['Timestamp'].dt.year >= 2017]\ndf_price_include_zz.reset_index(drop=True,inplace=True)\n# df_price_include_zz","bbb35a64":"df_price_include_zz.set_index(\"Timestamp\", inplace = True)\ndf_price_include_zz","eed1e854":"Price.to_numpy()\ndf_price=Price.to_frame()\ndf_price['Timestamp'] = df_price.index\ndf_price['Timestamp'] = pd.to_datetime(df_price['Timestamp'])\ndf_price.reset_index(drop=True,inplace=True)\ndf_price_include = df_price[df_price['Timestamp'].dt.year >= 2017]\ndf_price_include.reset_index(drop=True,inplace=True)","224452c0":"prediction_days = 50\ndf_train= df_price_include_zz[:len(df_price_include_zz)-prediction_days]\ndf_test= df_price_include_zz[len(df_price_include_zz)-prediction_days:]","8e196b53":"metadata = MetadataParam(\n time_col=\"Timestamp\",   # ----> name of the time column \n value_col=\"Weighted_Price\",  # ----> name of the value column \n freq=\"W\"           #\"MS\" for Montly at start date, \"H\" for hourly, \"D\" for daily, \"W\" for weekly, etc.\n)","ebc06425":"forecaster = Forecaster()\nresult = forecaster.run_forecast_config(\n     df=df_price_include,\n     config=ForecastConfig(\n         model_template=ModelTemplateEnum.SILVERKITE.name,\n         forecast_horizon=30,  # forecasts 30 steps ahead\n         coverage=0.95,  # 95% prediction intervals\n         metadata_param=metadata\n    )\n)","7c1076a7":"fig = result.timeseries.plot()\nfig.show()","7398842a":"grid_search = result.grid_search\ncv_results = summarize_grid_search_results(\n     grid_search=grid_search,\n     decimals=2,\n     # The below saves space in the printed output. Remove to show all available metrics and columns.\n     cv_report_metrics=None,\n     column_order=[\"rank\", \"mean_test\", \"split_test\", \"mean_train\", \"split_train\", \"mean_fit_time\", \"mean_score_time\", \"params\"])\n # Transposes to save space in the printed output\ncv_results[\"params\"] = cv_results[\"params\"].astype(str)\ncv_results.set_index(\"params\", drop=True, inplace=True)\ncv_results.transpose()","b58e2719":"backtest = result.backtest\nfig = backtest.plot().show()","150e9442":"backtest_eval = defaultdict(list)\nfor metric, value in backtest.train_evaluation.items():\n    backtest_eval[metric].append(value)\n    backtest_eval[metric].append(backtest.test_evaluation[metric])\nmetrics = pd.DataFrame(backtest_eval, index=[\"train\", \"test\"]).T\nmetrics","0ea08dd5":"forecast = result.forecast\nfig = forecast.plot().show()\n","058b49dd":"forecast.df.head().round(2)","2f07c09f":"fig = forecast.plot_components().show()\n","583fcae3":"summary = result.model[-1].summary()  # -1 retrieves the estimator from the pipeline\nprint(summary)","20a1d9b0":"model = result.model\nmodel","1a3b7e3d":"future_df = result.timeseries.make_future_dataframe(\n    periods=4,\n    include_history=False)\nfuture_df","ed0d5f41":"model.predict(future_df)","7ef2f07c":"training_set = df_train.values\ntraining_set = np.reshape(training_set, (len(training_set), 1))\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntraining_set = sc.fit_transform(training_set)\nX_train = training_set[0:len(training_set)-1]\ny_train = training_set[1:len(training_set)]\nX_train = np.reshape(X_train, (len(X_train), 1, 1))","2add0492":"model1 = Sequential()\nmodel1.add(LSTM(10,activation=\"sigmoid\",return_sequences = True,input_shape = (None, 1)))\n# model1.add(Dropout(0.2))\n# model1.add(LSTM(64,return_sequences = True))\n# model1.add(Dropout(0.2))\n# model1.add(LSTM(10))\n# model1.add(Dropout(0.2))\n\nmodel1.add(Dense(1))\nmodel1.compile(loss='mean_squared_error', optimizer='adam')","ff17e2b5":"model1.summary()","81ab3a9c":"history=model1.fit(X_train, y_train, batch_size = 5, epochs = 20)","db49b5ad":"%matplotlib inline\nplt.figure(figsize=(15,5))\nplt.plot(history.history['loss'])\nplt.title(\"The model's evaluation\", fontsize=14)\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.show()","104a525c":"from keras.utils.vis_utils import plot_model\nplot_model(model1, to_file='model_plot.png', show_shapes=True, show_layer_names=True, expand_nested=False)","623e5109":"# Making the predictions\ntest_set = df_test.values\ninputs = np.reshape(test_set, (len(test_set), 1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (len(inputs), 1, 1))\npredicted_BTC_price = model1.predict(inputs)\npredicted_BTC_price=predicted_BTC_price.reshape(-1,1)\npredicted_BTC_price = sc.inverse_transform(predicted_BTC_price)","fd789710":"%matplotlib inline\nplt.figure(figsize=(15,8))\nplt.plot(test_set, color = \"red\", label = \"Real Stock Price\")\nplt.plot(predicted_BTC_price, color = \"black\", label = \"Predict Stock Price\")\nplt.title(\"BTC Price Prediction\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"BTC Price(USD)\")\nplt.legend()\nplt.show()","4637e97d":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\"> Creating a Forecast :<\/h1>","0800f923":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Model Diagnostics :<\/h1>","c175df14":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\"> \ud83d\udee0 Data Preprocessing :<\/h1>","3d285910":"<h1 style=\"background-color:#88FBFF;font-size:30px;color:#00033E;font-weight : bold\">LSTM approach :<\/h1>","61bcc0e1":"# **Context**\n<p style=\"font-size:15px;color:#1C37A6;\">Bitcoin (\u20bf) is a decentralized digital currency, without a central bank or single administrator, that can be sent from user to user on the peer-to-peer bitcoin network without the need for intermediaries. Transactions are verified by network nodes through cryptography and recorded in a public distributed ledger called a blockchain. The cryptocurrency was invented in 2008 by an unknown person or group of people using the name Satoshi Nakamoto. The currency began use in 2009 when its implementation was released as open-source software.<br><br>\nAccurate knowledge about the future is helpful to any business. Time series forecasts can provide future expectations for metrics and other quantities that are measurable over time.<br> \nWhile domain knowledge and expert judgment can sometimes produce accurate forecasts, algorithmic automation enables scalability and reproducibility, and may improve accuracy. Algorithmic forecasts can be consumed by additional algorithms downstream to make decisions or derive insights.<\/p>","6a9dfb61":"- **Fast training and scoring**\nWorks with intelligent prototyping, framework search, and benchmarking. Matrix search is valuable for model choice and self-loader estimating of different measurements.\n- **Flexible design**\nGives time arrangement regressors to catch pattern, irregularity, occasions, changepoints, and autoregression, and allows you to add your own.<br>\nFits the conjecture utilizing an AI model.\n- **Intuitive Interface**\nGives incredible plotting apparatuses to investigate irregularity, connections, changepoints, and so forth <br>\nGives model formats (default boundaries) that function admirably dependent on information attributes and gauge prerequisites (for example every day long haul conjecture).<br>\nProduces interpretable yield, with model rundown to analyze individual regressors, and segment plots to outwardly review the consolidated impact of related regressors <br>\n- **Extensible Framework**\nUncovered numerous estimate calculations in a similar interface, making it simple to attempt calculations from various libraries and think about outcomes.<br>\nA similar pipeline gives preprocessing, cross-approval, backtest, estimate, and assessment with any calculation.","daaf478f":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Forecast :<\/h1>","f2ad1bab":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Training the Model :<\/h1>","74947d38":"<p style=\"font-size:15px;color:#1C37A6;\">As a matter of course, run_forecast_config gives chronicled assessment, so you can perceive how the conjecture performs on past information. This is put away in grid_search (cross-approval parts) and backtest (holdout test set).<\/p>","8cc8c532":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Visualizing Model Performance :<\/h1>","6da6b8d9":"<h1 style=\"background-color:#88FBFF;font-size:30px;color:#00033E;font-weight : bold\">Introduction to GreyKite :<\/h1>","085f9673":"![](https:\/\/thumbor.forbes.com\/thumbor\/960x0\/https%3A%2F%2Fspecials-images.forbesimg.com%2Fdam%2Fimageserve%2F908633080%2F960x0.jpg%3Ffit%3Dscale)","eafe8398":"<p style=\"font-size:15px;color:#1C37A6;\">This brand new Python library <b>GreyKite by Linkedin<\/b>, is used for time series forecasting. This library makes the life of data scientists easier. \n    Its main forecasting algorithm, called <b>Silverkite<\/b>, is fast, accurate, and intuitive, making it suitable for interactive and automated forecasting at scale. We will start by describing a few applications and then walk through the algorithm design and user experience.<\/p>","201e2e2d":"![](https:\/\/i.pinimg.com\/originals\/cf\/90\/bb\/cf90bb1b741ff44adde054a2e12b82e6.gif)","f4bd5435":"![](https:\/\/miro.medium.com\/max\/1032\/1*AUwc53cmW04hjPrKtVyePQ.gif)","c484148a":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">\u2705 Importing the required Libraries :<\/h1>","8fd67475":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Cross-Validation :<\/h1>","b65726c1":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">\u2699 Installation :<\/h1>","f040b1bf":"![](https:\/\/content.linkedin.com\/content\/dam\/engineering\/site-assets\/images\/blog\/posts\/2021\/05\/greykite1.png)","3632721b":" <p style=\"font-size:15px;color:#1C37A6;font-weight : bold\">I had tried to give a gentle introduction to Time Series Forecasting Using GreyKite Python Library and the traditional LSTM approach. I hope you learn something from this blog, and it will help you in the future.<br>\nThe library is still in the development process, and the developers are planning to add other useful open-source algorithms in the future to give users more options to choose from through a unified interface.<\/p>\n\n**References** :\n- https:\/\/engineering.linkedin.com\/blog\/2021\/greykite--a-flexible--intuitive--and-fast-forecasting-library\n- https:\/\/arxiv.org\/abs\/2105.01098\n- https:\/\/venturebeat.com\/2021\/05\/13\/linkedin-open-sources-greykite-a-library-for-time-series-forecasting\/\n- https:\/\/github.com\/linkedin\/greykite\n- https:\/\/analyticsindiamag.com\/linkedin-open-sources-this-new-library-for-time-series-forecasting\/\n\n","a72fe09a":"<br>\n<h1 style = \"font-size:35px; font-family:cursive ; font-weight : bold; color : #650076; text-align: center;\">\ud83d\udcb2\ud83d\udcc8 Bitcoin Price Prediction : GreyKite V\/s LSTM <\/h1>\n<br>","34e51276":"<p style=\"font-size:15px;color:#1C37A6;\"><b>Greykite<\/b> contains a simple modeling interface that facilitates data exploration and model tuning. The library provides intuitive forecasts through its flagship algorithm, known as Silverkite. <b>Silverkite<\/b> is highly customizable and includes tuning parameters to capture diverse time series characteristics. \n    Besides Silverkite, Greykite also supports <b>Prophet<\/b>, which is an open-source algorithm for forecasting time series data. The Prophet algorithm is developed by Facebook and is robust to missing data and shifts in the trend and handles outliers well.<\/p>","2d2522f7":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Features of GreyKite :<\/h1>","8b213649":" <p style=\"font-size:15px;color:#1C37A6;\"> The model summary allows inspection of individual model terms. Check parameter estimates and their significance for insights on how the model works and what can be further improved.<\/p>\n","19a9ca76":"![](https:\/\/analyticsdrift.com\/wp-content\/uploads\/2021\/05\/LinkedIn-greykite-architecture-1024x481.png)","896df29a":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Backtest :<\/h1>","361c7c8b":"<p style=\"font-size:15px;color:#1C37A6;\">The forecast can be created with just a few lines of code. First, specify the dataset information. We are setting the time_col parameter as 'Timestamp' and the value_col parameter as 'Weighted_Price'. In freq, we are setting value as D for Daily at the start date. After this create a forecaster using the Forecaster class from the GreyKite package. The output of run_forecast_config() would be a dictionary which is having future predicted values, original time series, and historical forecast performance<\/p>","cf390130":" <p style=\"font-size:15px;color:#1C37A6;\"> This plot shows how your dataset\u2019s trend, event\/holiday, seasonality patterns are handled in the model.<\/p>","d062ecbd":"# **Do UPVOTE if you like my work** ","7ba0f0ed":"<h1 style=\"background-color:#FF85A3;font-size:20px;color:#00033E;font-weight : bold\">Tech behind GreyKite :<\/h1>","b3b7e84c":"<h1 style=\"background-color:#88FBFF;font-size:20px;color:#00033E;font-weight : bold\">Wrapping Up :<\/h1>"}}