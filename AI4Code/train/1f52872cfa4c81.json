{"cell_type":{"0015ec9f":"code","cd6f5a68":"code","55ee8190":"code","55e5f8d5":"code","5c3ad624":"code","475e7e72":"code","99c093fe":"code","478b2c8f":"code","63a3ecf7":"code","81b23d83":"code","a42d46d9":"code","400d19f6":"code","b67647e5":"code","9c527859":"code","58c75c18":"code","17ae0152":"code","7326f551":"code","d07328b9":"code","8de9dd5f":"code","e4764a06":"code","ad705024":"code","3af15ffa":"code","3889ba10":"code","814ed086":"code","bb6ea990":"code","db32dd43":"code","cfe5c577":"code","e56d617f":"code","f4731c0b":"code","80fab8fa":"code","45f075be":"code","399cec03":"code","32f49cb4":"code","53caf83f":"code","ef9e6646":"code","242f7ba6":"code","773df94a":"code","68723f88":"code","55f84565":"code","e349c4a9":"code","8f6029ae":"code","70036ecc":"markdown","140b499c":"markdown","c2f5236f":"markdown","88cf7775":"markdown","21e3366a":"markdown","5a19418b":"markdown","5628decc":"markdown","ab033f77":"markdown","e87173b8":"markdown","4572ad9d":"markdown","457822e6":"markdown","000c9aa7":"markdown","972c98d0":"markdown","875f2adf":"markdown","302f45b9":"markdown","10ffc0cc":"markdown","f55dedee":"markdown","aab551e2":"markdown","21821de6":"markdown","5dc6a25f":"markdown","f679104f":"markdown","5df04857":"markdown","8b1e1578":"markdown","8a94e8e6":"markdown","68ceecc7":"markdown","dcaefbc8":"markdown","4d412ef8":"markdown","8d1a2829":"markdown","a26fcbd2":"markdown","912a6dbe":"markdown","e48814f3":"markdown","36e91368":"markdown","3eafe300":"markdown","78a1416f":"markdown","9149106e":"markdown","3d94b3e9":"markdown","25ee51ef":"markdown","319e373d":"markdown","1bc0b477":"markdown","0d44c4fc":"markdown","41e222f0":"markdown","6ef0cfcf":"markdown","9468a183":"markdown","14e14fd4":"markdown","be5a4e2e":"markdown"},"source":{"0015ec9f":"print('Matheus Tenorio')","cd6f5a68":"'Matheus Tenorio' # String com aspas simples\n\"Matheus Tenorio\" # String com aspas duplas","55ee8190":"print('Matheus Tenorio')\n# print('Idade: 24')\n# Esta linha n\u00e3o ser\u00e1 executada bem como a linha acima","55e5f8d5":"print('Matheus Tenorio') # coment\u00e1rio de uma linha\n'''\nComent\u00e1rio de muitas linhas\nprint('Idade: 24')\nEsta linha n\u00e3o ser\u00e1 executada bem como a linha acima\n'''","5c3ad624":"print('''Meu nome \u00e9 Matheus Tenorio\nMinha Idade \u00e9 24 anos''')","475e7e72":"print('Matheus Tenorio')\nprint('Idade: 24 anos')\nprint('Altura: 1,80cm')","99c093fe":"age = 24","478b2c8f":"age = 24          # O tipo da vari\u00e1vel age, no momento, \u00e9 um inteiro\nage = 'Ola Mundo' # O tipo da vari\u00e1vel age passa a ser uma string","63a3ecf7":"age = None","81b23d83":"age = None\nage1 = 0\nage == age1","a42d46d9":"age = 24\nAge = 24\n_age = 24\nmy_age = 24\nage23 = 24\n_24 = 24\na2 = 24","400d19f6":"2age = 24    # Quebra as regras 1 e 2 dos nomes permitidos","b67647e5":"age@new = 24 # Quebra a regra 3 dos nomes permitidos","9c527859":"for = 23     # Regra 2 dos nomes proibidos","58c75c18":"my_age = 24 # snake_case -> Recomendado para vari\u00e1veis\nmyAge = 24  # camelCase -> Poss\u00edvel, mas n\u00e3o recomendado para vari\u00e1veis\nMyAge = 24  # CamelCase -> Poss\u00edvel, mas n\u00e3o recomendado para vari\u00e1veis","17ae0152":"age = input()","7326f551":"age = input('Qual a sua idade? ')","d07328b9":"type(True)\ntype(82)\ntype(4.0)\ntype(1 + 1j)\ntype(\"Macei\u00f3\")","8de9dd5f":"int('1010', 2) # Bin\u00e1ria\nint('a', 16) # Hexadecimal","e4764a06":"bool('1')\nbool(0.1)\nbool('0.0')\nbool('0')\nbool(0)\nbool(0.0)","ad705024":"str1 = 'Edge'\nstr2 = \"Edge\"","3af15ffa":"string1 = 'abcd'\nstring2 = \"abc\"\n\n# Igualdade\nprint( string1 == string2 )\n# Diferente\nprint( string1 != string2 )\n# Maior que\nprint( string1 > string2 )\n# Menor que\nprint( string1 < string2 )\n\n# Soma de strings (Concatena\u00e7\u00e3o)\nprint( string1 + string2 )\n# Multiplica\u00e7\u00e3o\nprint( 5 * string1 )\n\n# Atribui\u00e7\u00e3o\nstring3 = string2 + string1\nprint(string3)\n\n# Pertence\nprint( string2 in string1 )","3889ba10":"phrase = 'Que desastre! At\u00e9 minhas fraquezas s\u00e3o mais fortes que eu!'\nprint(phrase.lower())\nprint(phrase.upper())\nprint(phrase.split(' '))","814ed086":"age = input()\nage = int(age)\nprint('Sua idade \u00e9 %d' % age)\n\n# 0 <= idade <= 18 -> 'Voc\u00ea \u00e9 crian\u00e7a'\n# 18 < idade <= 50 -> 'Voc\u00ea \u00e9 adulto'\n# 50 < idade       -> 'Voc\u00ea \u00e9 idoso'\n\nif 0 <= age and age <= 18:\n    print('Voc\u00ea \u00e9 crian\u00e7a')\nif 18 < age and age <= 50:\n    print('Voc\u00ea \u00e9 adulto')\nif 50 < age:\n    print('Voc\u00ea \u00e9 idoso')","bb6ea990":"age = input()\nage = int(age)\nprint('Sua idade \u00e9 %d' % age)\n\n# 0 <= idade <= 18 -> 'Voc\u00ea \u00e9 crian\u00e7a'\n# 18 < idade <= 50 -> 'Voc\u00ea \u00e9 adulto'\n# 50 < idade       -> 'Voc\u00ea \u00e9 idoso'\n\nif 0 <= age and age <= 18:\n    print('Voc\u00ea \u00e9 crian\u00e7a')\nelse:\n    if age <= 50:\n        print('Voc\u00ea \u00e9 adulto')\n    else:\n        print('Voc\u00ea \u00e9 idoso')","db32dd43":"age = input()\nage = int(age)\nprint('Sua idade \u00e9 %d' % age)\n\n# 0 <= idade <= 18 -> 'Voc\u00ea \u00e9 crian\u00e7a'\n# 18 < idade <= 50 -> 'Voc\u00ea \u00e9 adulto'\n# 50 < idade       -> 'Voc\u00ea \u00e9 idoso'\n\nif 0 <= age and age <= 18:\n    print('Voc\u00ea \u00e9 crian\u00e7a')\nelif age <= 50:\n    print('Voc\u00ea \u00e9 adulto')\nelse:\n    print('Voc\u00ea \u00e9 idoso')","cfe5c577":"age = input()\nage = int(age)\nprint('Sua idade \u00e9 %d' % age)\n\n# 0 <= idade <= 18 -> 'Voc\u00ea \u00e9 crian\u00e7a'\n# 18 < idade <= 50 -> 'Voc\u00ea \u00e9 adulto'\n# 50 < idade       -> 'Voc\u00ea \u00e9 idoso'\n\nage_range = 'crian\u00e7a' if 0 <= age <= 18 else ('adulto' if age <= 50 else 'idoso')\nprint('Voc\u00ea \u00e9 ' + age_range)","e56d617f":"guests = ['Matheus', 'Luana', 'Lucas', 'Alfredo', 'J\u00e9ssica']","f4731c0b":"print(guests)\nfirst_guest = guests[0]\nsecond_guest = guests[1]\n\nprint('O primeiro convidado \u00e9: %s' % (first_guest))\nprint('O segundo convidado \u00e9: %s' % (second_guest))","80fab8fa":"print(guests)\nlast_guest = guests[-1]\nlast_but_one_guest = guests[-2]\n\nprint('O \u00faltimo convidado \u00e9: %s' % (last_guest))\nprint('O pen\u00faltimo convidado \u00e9: %s' % (last_but_one_guest))","45f075be":"print(guests)\nprint(f'Os dois primeiros itens s\u00e3o: {guests[0:2]}')\nprint(f'O 3\u00ba, 4\u00ba e 5\u00ba itens s\u00e3o: {guests[2:5]}')","399cec03":"print(guests)\nprint(f'Os dois primeiros itens s\u00e3o: {guests[-5:-3]}')\nprint(f'O 3\u00ba e 4\u00ba itens s\u00e3o: {guests[-3:-1]}')","32f49cb4":"print(guests[:])\nprint(f'Os dois primeiros itens s\u00e3o: {guests[:2]}')\nprint(f'Os tr\u00eas \u00faltimos itens s\u00e3o: {guests[-3:]}')","53caf83f":"guests = ['Matheus', 'Luana', 'Lucas', 'Alfredo', 'J\u00e9ssica']\n\nprint(guests)\ndel guests[1] # Exclui o segundo elemento da lista guests\nprint(guests)\ndel guests    # Exclui a lista guests\nprint(guests)","ef9e6646":"numbers = [ 3, 94,  2, 94, 72, 58, 72, 52]\nprint(type(numbers))\nprint(type(numbers) == list)\nprint(len(numbers))\nprint(max(numbers))\nprint(min(numbers))","242f7ba6":"guests = ['Matheus', 'Luana', 'Lucas', 'Alfredo', 'J\u00e9ssica', 'Rodrigo', 'Ely', 'Jo\u00e3o']\n\nguests.append('Carol')\nprint(f'convidados: {guests}')\n\nguests.insert(1, 'Adriana')\nprint(f'convidados: {guests}')\n\nguests.remove('Lucas')\nprint(f'convidados: {guests}')\n\nname = guests.pop()\nprint(f'nome: {name}, convidados: {guests}')\n\nname = guests.pop(3)\nprint(f'nome: {name}, convidados: {guests}')\n\nindex = guests.index('Luana')\nprint(f'indice: {index}')\n\nguests[-1] = 'Alfredo'\ntimes = guests.count('Alfredo')\nprint(f'vezes: {times}')\n\nguests.sort()\nprint(f'convidados: {guests}')\n\nguests.reverse()\nprint(f'convidados: {guests}')\n\nother_guests = guests.copy()\nprint(f'outros convidados: {other_guests}, convidados: {guests}')\n\nguests2 = guests\nguests.clear()\nprint(f'outros convidados: {other_guests}, convidados 2: {guests2}, guests: {guests}')\n\nguests.append('Franciele')\nguests.append('Fabio')\nprint(guests)\nguests.extend(other_guests)\nprint(f'outros convidados: {other_guests}, convidados: {guests}')","773df94a":"import math\n\nnumbers = [ 3, 94,  2, 39, 72, 58, 75, 52]\n\nsquare_roots = list(map(math.sqrt, numbers))\nprint(square_roots)","68723f88":"def is_even(x):\n    return (x % 2) == 0\n\nnumbers = [ 3, 94,  2, 39, 72, 58, 75, 52]\n\neven = list(filter(is_even, numbers))\nprint(even)","55f84565":"# Cria\u00e7\u00e3o de tuplas\ntlp1 = (82,'edge',2+1j, True)\ntlp2 = (1,)\nvar1 = (1) # N\u00e3o \u00e9 uma tupla\ntlp3 = tuple([1,2])\n\n# Tamanho da tupla\nlen(tlp1)\n\n# Acessar os valores a partir dos \u00edndeces\nprint(tlp1[2])\nprint(tlp1[-2])\n\n# - Slice\nprint(tlp1[1:3])\n\n# - Casting\nlist1 = list(tlp1)\nset1 = set(tlp1)\n\n# Juntar tuplas\nprint( tlp1 + tlp2 )","e349c4a9":"# Cria\u00e7\u00e3o de set\nset1 = set([1,2,3,2])\nset2 = {1,2,3,2}\nset3 = set()\nvar1 = {} # N\u00e3o \u00e9 um set\n\n# Tamanho de um set\nlen(set1)\n\n# Verificar se um item est\u00e1 no set\nprint( 1 in set1 )\nprint( 1 not in set1 )\n\n# - Adi\u00e7\u00e3o de item(s)\nset1.add(6)\nset2.update([5,4,7,10])\nset1.union(set2) # Este m\u00e9todo s\u00f3 funciona para set\n\n# Remo\u00e7\u00e3o do primeiro item\nset1.pop() # Remove o primeiro\nset1.remove(2)\nset1.clear() # Remove todos os itens","8f6029ae":"# Cria\u00e7\u00e3o de um dicion\u00e1rio Create a dictionary\ndic1 = {}\ndic2 = dict()\ndic3 = {\n    1: 'abc',\n    'a': 'd'\n}\ndic4 = {\n\t1: 1,\n\t1: 'a'\n}\n# Adi\u00e7\u00e3o de uma nova chave\ndic3[10] = '10'\n\n# Tamanho\nlen(dic3)\n\n# Acessar os valores a partir das chaves\nprint(dic3[1])\n\n# Remo\u00e7\u00e3o de uma chave\ndel dic3[10]\n\n# Verifica se a chave est\u00e1 no dicion\u00e1rio\nprint(1 in dic3)\n\n# Pegar todas as chaves\nprint(dic3.keys())\n\n# Pegar todas os valores\nprint(dic3.values())\n\n# Pegar todas as chave\/valor\nprint(dic3.items())","70036ecc":"Para criar v\u00e1rias condi\u00e7\u00f5es, podemos unir as ideias do `if` e do `else`. No Python, utilizamos a estrutura `elif`. Essa estrutura \u00e9 sempre acompanhada do `if` ou de outro `elif`. Isto quer dizer que podemos ter v\u00e1rios `elif` acompanhados do mesmo `if`. A sintaxe do `elif` \u00e9 a seguinte:\n```\nif <condi\u00e7\u00e3o1>:\n    <code>\nelif <condi\u00e7\u00e3o2>:\n    <code>\nelif <condi\u00e7\u00e3o3>:\n    <code>\nelse:\n    <code>\n```\nComo pode ser visto, a sintaxe do `elif` \u00e9 parecida com a sintaxe do `if`: palavra-chave `elif`, seguida de uma condi\u00e7\u00e3o, seguido do s\u00edmbolo dois pontos `:`, seguido do corpo do `elif` na pr\u00f3xima linha (indentado). A estrutura `else` no final \u00e9 opcional, enquanto a estrutura `if` no inicio \u00e9 obrigat\u00f3rio.","140b499c":"## *Built-in function* map\nNo Python, temos a *built-in function* `map`, utilizada para transformar cada elemento da lista, de acordo com uma fun\u00e7\u00e3o definida pelo desenvolvedor. No exemplo abaixo, vamos calcular a raiz quadrada de cada elemento da lista `numbers`, utilizando a *built-in function* `map` e a fun\u00e7\u00e3o `math.sqrt`.\n\nA *built-in function* `map` recebe dois parametros:\n1. Uma fun\u00e7\u00e3o que recebe um parametro. Essa fun\u00e7\u00e3o vai ser mapeada em cada item da lista;\n1. A lista onde a fun\u00e7\u00e3o ser\u00e1 mapeada.","c2f5236f":"# Convens\u00e3o dos nomes das vari\u00e1veis\nO nome das vari\u00e1veis seguem uma convens\u00e3o de nomes chamada **snake_case**.\nNessa convens\u00e3o as vari\u00e1veis seguem o seguinte formato:\n> Todas as letras s\u00e3o min\u00fasculas e as palavras compostas s\u00e3o separadas por underline (\\_)\n\nA convens\u00e3o de nomes \u00e9 uma forma da comunidade padronizar a formata\u00e7\u00e3o (visual) do c\u00f3digo. \nIsto quer dizer que \u00e9 apenas uma escolha da comunidade. N\u00e3o \u00e9 obrigat\u00f3rio, mas \u00e9 recomendado","88cf7775":"## M\u00e9todos\nA lista \u00e9 uma classe e, por isso, tem m\u00e9todos. Alguns dos principais m\u00e9todos da lista ser\u00e3o mostrados a seguir:\n1. `append` -> Adiciona um item no final da lista. Recebe um parametro: o item que ser\u00e1 adicionado. Retorna `None`;\n1. `insert` -> Adiciona um item, em uma posi\u00e7\u00e3o espec\u00edfica da lista. Recebe dois parametros: o primeiro parametro \u00e9 o indice onde o item, do segundo parametro, ser\u00e1 inserido na lista. Retorna `None`;\n1. `remove` -> Remove o item de uma lista, utilizando o pr\u00f3prio item. Recebe um parametro: o item que ser\u00e1 removido. Retorna `None`;\n1. `pop` -> Remove um item, em uma posi\u00e7\u00e3o espec\u00edfica da lista, se n\u00e3o for espec\u00edficado a posi\u00e7\u00e3o \u00e9 removido o \u00faltimo item da lista. Recebe um parametro: o indice do item que ser\u00e1 removido. Retorna o item foi removido;\n1. `index` -> Retorna o indice de um item da lista. Recebe um parametro: o item que se deseja obter o indice. Retorna o indice do item passado como argumento;\n1. `count` -> Conta a ocorrencia de um item em uma lista. Recebe um parametro: o item que se deseja contar as ocorrencias. Retorna a ocorrencia do item passado como argumento;\n1. `sort` -> Organiza a lista em ordem crescente. N\u00e3o recebe parametros. Retorna `None`;\n1. `reverse` -> Inverte a ordem da lista. N\u00e3o recebe parametros. Retorna `None` (Uma outra maneira de fazer esta opera\u00e7\u00e3o e retornar uma nova lista \u00e9 `<var_list>[::-1]`)\n1. `copy` -> Cria uma nova lista (c\u00f3pia) indenpedente da lista original (modifica\u00e7\u00f5es na nova lista n\u00e3o afeta a lista original). N\u00e3o recebe parametros. Retorna a nova lista criada;\n1. `clear` -> Limpa uma lista, tornando-a uma lista vazia (sem itens, ou de tamanho zero). N\u00e3o recebe parametros. Retorna `None`.\n1. `extend` -> Concatena uma lista a outra lista. Recebe um parametro: a lista que vai ser concatenada. Retorna `None`.","21e3366a":"Vale lembrar que para os boleanos, temos que o valor 0 (zero) indica false, enquanto qualquer outro valor indica verdadeiro.","5a19418b":"Como pode ser visto no exemplo acima, as aspas triplas tamb\u00e9m s\u00e3o considerados strings de v\u00e1rias linhas","5628decc":"Al\u00e9m disso, podemos tamb\u00e9m converter um tipo em outro. Existe algumas limita\u00e7\u00f5es como n\u00e3o \u00e9 poss\u00edvel converter qualquer string em int ou float. Para isso, basta utilizar a palavra reservada de cada tipo.\n\n   * bool(arg)\n   * int(arg)\n   * float(arg)\n   * complex(arg)\n   * str(agr)\n\nEm especial o int(arg), pode converter uma base al\u00e9m da decimal. Ou seja, a fun\u00e7\u00e3o de convers\u00e3o tem como padr\u00e3o a base 10, por\u00e9m \u00e9 poss\u00edvel converter para outra base utilizando int(arg,base=10).","ab033f77":"# Tupla\n\nAs demais estruturas acima permitem que seja alterada, ou seja, \u00e9 poss\u00edvel alterar os valores internos. Esta estrutura n\u00e3o permite altera\u00e7\u00e3o, imut\u00e1vel, dos itens ap\u00f3s a constru\u00e7\u00e3o. Ela \u00e9 interessante para ser utilizadas em conjunto com set, pois eles necessitam que os dados sejam imut\u00e1veis e na chave de um dicion\u00e1rio.","e87173b8":"# Operador Tern\u00e1rio\nExiste uma forma mais resumida de implementar os condicionais, em apenas uma linha. Estes \u00e9 o operador tern\u00e1rio. A origem do nome \u00e9 porque esse operador \u00e9 um dos poucos operadores que recebem 3 argumentos. Desta forma, o nome operador tern\u00e1rio \u00e9 sempre associado a este operador que avalia uma condi\u00e7\u00e3o e retorna uma express\u00e3o dependendo da condi\u00e7\u00e3o avaliada. A sintaxe do operador tern\u00e1rio em Python \u00e9 a seguinte:\n```\nvar = <express\u00e3o verdadeira> if <condi\u00e7\u00e3o> else <express\u00e3o falsa>\n```\nNote que a sintaxe do operador \u00e9 bem parecida com a linguagem natural:\n> Retorne `<express\u00e3o verdadeira>` se a condi\u00e7\u00e3o `<condi\u00e7\u00e3o>` for verdadeira, caso contr\u00e1rio retorne `<express\u00e3o falsa>`","4572ad9d":"## Operadores\nExistem dois operadores importantes que podem ser utilizados nas listas: `in` e `del`.\n\n### Operador `in`\nO operador `in` \u00e9 utilizado para verificar a rela\u00e7\u00e3o de pertinencia entre itens e listas. A sintaxe deste operador \u00e9 a seguinte:\n```\n<itemN> in <var_list>\n```\nEssa express\u00e3o \u00e9 utlizada para verificar se o item `<itemN>` pertence \u00e0 lista `<var_list>`. \nAinda podemos ser verificado se o `<itemN>` n\u00e3o pertence \u00e0 lista `<var_list>`, utilizando a palavra-chave `not` na frente do operador `in`. A sintaxe \u00e9 da seguinte forma:\n```\n<itemN> not in <var_list>\n```\n\n### Operador `del`\nO operador `del` \u00e9 utilizado para excluir um item de uma lista, tendo a seguinte sintaxe:\n```\ndel <var_list>[n]\n```\nO n-\u00e9simo item da lista `<var_list>` ser\u00e1 exclu\u00eddo. Para remover a lista `<var_list>` podemos utilizar a seguinte sintaxe:\n```\ndel <var_list>\n```","457822e6":"Note que o valor passado como argumento da fun\u00e7\u00e3o est\u00e1 entre aspas.\nQuando um texto est\u00e1 entre aspas, isto \u00e9 uma _string_. \nUma string pode estar entre aspas simples ('') ou aspas duplas (\"\")","000c9aa7":"# Entrada\nPara obter dados provenientes dos usu\u00e1rios, podemos utilizar a _built-in function_ `input`.\nAssim como a fun\u00e7\u00e3o `print` est\u00e1 relacionada com a sa\u00edda de dados, a fun\u00e7\u00e3o `input` est\u00e1 relacionada com a entrada de dados.","972c98d0":"# String\n\nString \u00e9 uma sequ\u00eancia de caracteres e um objeto iter\u00e1vel(Veja tabela ASCII).","875f2adf":"## Operadores\n\nAs string cont\u00e9m diversos operadores\n\nCompara\u00e7\u00e3o - Utiliza como base a tabela ASCII:\n\n   * Igualdade (==)\n   * Diferente (!=)\n   * Maior que (>)\n   * Menor que (<)\n   * Maior ou igual que (>=)\n   * Menor ou igual que (<=)\n\nAritm\u00e9trico:\n\n   * Soma (+)\n   * Multiplica\u00e7\u00e3o (*)\n\nAtribui\u00e7\u00e3o:\n\n   * Atribui\u00e7\u00e3o (=)\n   * Atribui\u00e7\u00e3o com soma (+=)\n   * Atribui\u00e7\u00e3o com Multiplica\u00e7\u00e3o (*=)\n\nConjunto:\n\n   * Pertence (in)\n   * N\u00e3o pertence (not in)","302f45b9":"# Condicionais\nPara executar um trecho de c\u00f3digo de acordo com uma condi\u00e7\u00e3o, podemos utilizar os condicionais. Em Python, temos 3 palavras-chaves para a utiliza\u00e7\u00e3o de condicionais: `if`, `else` e `elif`. A estrutura `if` pode ser utilizado sozinho ou em conjunto com o `elif` e com o `else`. A sintaxe do `if` \u00e9 a seguinte:\n```\nif <condi\u00e7\u00e3o>:\n    <code>\n```\nAp\u00f3s a palavra-chave `if` temos uma condi\u00e7\u00e3o `<condi\u00e7\u00e3o>` e o s\u00edmbolo dois pontos `:`, para determinar o final das condi\u00e7\u00f5es. \nNa pr\u00f3xima linha \u00e9 definido o corpo do `if`, sempre indentado. O corpo do `if` termina quando a indenta\u00e7\u00e3o termina.","10ffc0cc":"# Conjunto (Set)\n\nUm set ou conjunto \u00e9 uma estrutura de dados que n\u00e3o permite a repeti\u00e7\u00e3o de elementos.","f55dedee":"Perceba que n\u00e3o precisamos definir o tipo da vari\u00e1vel, pois Python \u00e9 dinamicamente tipada.\nIsto quer dizer que uma vari\u00e1vel possui o tipo do dado que ela est\u00e1 armazenando no momento.\nDiferente de outras linguagens como: C, C++, Java, Rust, em que todas as vari\u00e1veis possuem um tipo na sua declara\u00e7\u00e3o e n\u00e3o podem ser alterados depois, em Python as vari\u00e1veis possuem o tipo do dado que recebem, podendo esse tipo ser alterado depois da declara\u00e7\u00e3o.","aab551e2":"# Coment\u00e1rios\nUm coment\u00e1rio \u00e9 uma parte do c\u00f3digo (ou do script) que n\u00e3o ser\u00e1 executado. \\\nOs coment\u00e1rios s\u00e3o \u00fateis para impedir, de forma f\u00e1cil, que parte do c\u00f3digo seja executado, seja para testes, para eliminar um bug, ou at\u00e9 para descobrir onde est\u00e1 o bug.\nTamb\u00e9m s\u00e3o utilizados para fazer anota\u00e7\u00f5es como no c\u00f3digo acima.\nOs coment\u00e1rios podem ser de uma linha, utilizando o s\u00edmbolo cerquilha (#).\nTudo ap\u00f3s o cerquilha ser\u00e1 considerado um coment\u00e1rio","21821de6":"Podemos omitir um dos indices no *slicing*, ou todos. \n- Se o indice omitido for o primeiro, ent\u00e3o a nova lista come\u00e7ar\u00e1 no in\u00edcio da lista original. \n- Se o indice omitido for o segundo, ent\u00e3o a nova lista terminar\u00e1 no final da lista original.\n- Se ambos os indices forem omitidos, ent\u00e3o a nova lista ser\u00e1 igual a lista original.\n\nIsto \u00e9 \u00fatil para obter sublistas importantes:\n1. Os `n` primeiros itens de uma lista `<var_list>`:\n```\n<var_list>[:n]\n```\n2. Os `n` \u00faltimos itens de uma lista `<var_list>`:\n```\n<var_list>[-n:]\n```\n\nVamos analizar cada caso:\n1. O primeiro indice est\u00e1 omitido, ent\u00e3o o come\u00e7o da nova lista ser\u00e1 o come\u00e7o da lista original. O segundo indice indica que a nova lista termina antes do indice `n`, ou seja, vai at\u00e9 o item no indice `(n-1)`, que \u00e9 o n-\u00e9simo item. Portanto, a nova lista come\u00e7a no come\u00e7o da lista original e termina no n-\u00e9simo item, isto quer dizer que estamos obtendo o `n` primeiros itens da lista.\n2. O primeiro \u00edndice indica que a nova lista come\u00e7a no indice `-n`, ou seja, o n-\u00e9simo item de tr\u00e1s pra frete (da direita para a esquerda), j\u00e1 que a indexa\u00e7\u00e3o reversa come\u00e7a com -1. O segundo indice est\u00e1 omitido, ent\u00e3o o final da nova lista ser\u00e1 o final da lista original. Portanto, a nova lista come\u00e7a no n-\u00e9simo \u00faltimo elemento e termina no final da lista original, isto quer dizer que estamos obtendo os `n` \u00faltimos itens da lista.","5dc6a25f":"## *Built-in function* filter\nNo Python, temos a *built-in function* `filter`, utilizada para filtrar os elementos da lista, de acordo com uma fun\u00e7\u00e3o definida pelo desenvolvedor. Esta fun\u00e7\u00e3o, chamada de filtro, deve receber um parametro. Este parametro representa um item da lista. Se esta fun\u00e7\u00e3o retornar `True`, ent\u00e3o o elemento recebido permanece na lista. se a fun\u00e7\u00e3o retornar `False`, ent\u00e3o o elemento \u00e9 retirado da lista. \u00c9 importante salientar que \u00e9 gerada uma nova lista, com o filtro aplicado.\nNo exemplo abaixo, vamos filtrar os elementos \u00edmpares da lista `numbers`, isto \u00e9, vamos manter o elementos pares. Para isso, vamos definir uma fun\u00e7\u00e3o filtro `is_even`, que verifica se o argumento \u00e9 par, e vamos utilizar a *built-in function* `filter`.\n\nA *built-in function* `filter` recebe dois parametros:\n1. Uma fun\u00e7\u00e3o filtro, que recebe um parametro. Essa fun\u00e7\u00e3o vai ser aplicada em cada item da lista;\n1. A lista onde a fun\u00e7\u00e3o filtro ser\u00e1 aplicada.","f679104f":"Note tamb\u00e9m que a vari\u00e1vel \u00e9 criada no momento em que a atribui\u00e7\u00e3o \u00e9 feita, isto \u00e9, no momento em que um valor \u00e9 dado para ela `age = 24`.\nDesta forma, a cria\u00e7\u00e3o de uma vari\u00e1vel sempre possui uma atribui\u00e7\u00e3o.\nPara criar uma vari\u00e1vel sem valor, podemos utilizar a palavra-chave `None`","5df04857":"## Indexa\u00e7\u00e3o\nPara acessar um item, ou modifica-lo, utilizamos a indexa\u00e7\u00e3o. A indexa\u00e7\u00e3o \u00e9 uma opera\u00e7\u00e3o que retorna um item de uma lista, de acordo com o indice que voc\u00ea utilizar.\nO python possui dois tipos de indexa\u00e7\u00e3o: a __indexa\u00e7\u00e3o normal__ e a __indexa\u00e7\u00e3o reversa__.\n\n### Indexa\u00e7\u00e3o Normal\nA sintaxe da indexa\u00e7\u00e3o normal (tamb\u00e9m chamada de forward indexing) \u00e9 a seguinte:\n```\n<itemN> = <var_list>[<indexN>]\n<var_list>[<indexN>] = <new_itemN>\n```\nA vari\u00e1vel que cont\u00e9m a lista \u00e9 `<var_list>` e para indexar um valor utilizamos: os colchetes `[]` ap\u00f3s a vari\u00e1vel e um inteiro (pode ser uma constante ou uma vari\u00e1vel do tipo inteiro) representando o indice `<indexN>`. Vamos analizar as duas linhas da sintaxe mostrada:\n1. Na primeira linha existe um acesso ao item na posi\u00e7\u00e3o `<indexN>`, da lista `<var_list>`. O retorno deste item \u00e9 armazenado na vari\u00e1vel `<itemN>`;\n1. Na segunda linha existe uma modifica\u00e7\u00e3o na posi\u00e7\u00e3o `<indexN>`, da lista `<var_list>`. Na posi\u00e7\u00e3o `<indexN>` ser\u00e1 atribuido o item `<new_itemN>`.\n\nNa indexa\u00e7\u00e3o normal, os indices come\u00e7am por zero. Isso quer dizer que para obter o primeiro item, utilizamos o indice 0, para obter o segundo elemento o indice 1 e assim por diante. Resumindo, para indexar o n-\u00e9simo item de uma lista, temos que utilizar o indice `(n-1)`","8b1e1578":"# Vari\u00e1veis\n\nEm Python, as vari\u00e1veis s\u00e3o declaradas da seguinte forma:","8a94e8e6":"# Dicion\u00e1rio\n\nEssa estrutura tem o conceito chave - valor, ou seja, a partir de uma chave tem um valor\/objeto. Por exemplo, na nossa sociedade temos o CPF que a partir desse n\u00famero podemos identificar a pessoa (Nome,Data de Nascimento, ...).","68ceecc7":"A palavra-chave `None` representa o valor nulo do Python. Assim, a vari\u00e1vel `age` existe mas n\u00e3o possui valor.","dcaefbc8":"Perceba que o valor nulo `None` \u00e9 diferente do inteiro 0. \nNa vari\u00e1vel `age` n\u00e3o existe valor armazenado, enquanto na vari\u00e1vel `age1` existe um valor, o inteiro zero","4d412ef8":"Os tipos b\u00e1sicos s\u00e3o:\n\n* Boleano - bool;\n* Inteiro - int;\n* Real - float;\n* Complexo - complex;\n* String - str.\n\nE todos s\u00e3o object.","8d1a2829":"# Tipos b\u00e1sicos\n\nAqui vamos ver os tipos b\u00e1sicos em Python, qualquer outro tipo \u00e9 uma composi\u00e7\u00e3o deles. Outro ponto importante \u00e9 que todos os tipos s\u00e3o objetos.\n\nPrimeiro, vamos ver a diferen\u00e7a entre valor e tipo:\n\n* Valor: \u00c9 o dado;\n* Tipo: \u00c9 a classifica\u00e7\u00e3o do tipo.\n\nEm Python, existe a fun\u00e7\u00e3o 'type', a qual retorna o tipo do dado.","a26fcbd2":"Os nomes pro\u00edbidos possuem as seguintes regras:\n1. Qualquer nome que quebre uma, ou mais, regras dos nomes permitidos\n2. Palavras-chave do Python","912a6dbe":"### Indexa\u00e7\u00e3o Reversa\nEm Python, diferente de outras linguagens de programa\u00e7\u00e3o, existe uma outra forma de indexar listas, chamada indexa\u00e7\u00e3o reversa. Na indexa\u00e7\u00e3o reversa os posi\u00e7\u00f5es dos items s\u00e3o acessados na ordem reversa, isto \u00e9, de tr\u00e1s pra frente. Para utilizar esta indexa\u00e7\u00e3o utlizamos a mesma sintaxe da indexa\u00e7\u00e3o normal, por\u00e9m com os indices negativos e come\u00e7ando por -1. Assim, o \u00faltimo item da lista \u00e9 indexado com o indice -1, o pen\u00faltimo \u00e9 indexado com o indice -2 e assim por diante. Resumindo, para acessar o n-\u00e9simo item, da direita para a esquerda, utilizamos o indice `-n`.","e48814f3":"A estrutura `else` \u00e9 sempre utilizada em conjunto com a estrutura `if`. Isto que dizer que o `else` come\u00e7a assim que o corpo do `if` termina. A estrutura `else` possui a seguinte sintaxe:\n```\nif <condi\u00e7\u00e3o>:\n    <code>\nelse:\n    <code>\n```\nNote que ap\u00f3s a palavra-chave `else` n\u00e3o existe condi\u00e7\u00e3o, somente o s\u00edmbolo dois pontos `:`. Isto ocorre porque a estrutura `else` representa o c\u00f3digo executado, quando a condi\u00e7\u00e3o do `if` \u00e9 falsa. O corpo do `else` segue a mesma linha do corpo do `if`.","36e91368":"Para indexar itens no in\u00edcio da lista utilizamos a indexa\u00e7\u00e3o normal, j\u00e1 para indexar itens no final da lista utilizamos a indexa\u00e7\u00e3o reversa\n> - Inicio -> Normal\n> - Final -> Reversa\n\n## *Slicing* (Fatiamento)\nEm Python, temos uma forma simplificada de obter uma sublista, chamada *slicing* (ou fatiamento). O *slicing* pode ser feito em qualquer cole\u00e7\u00e3o sequencial indexada, tal como: conjuntos e strings. A sintaxe \u00e9 bem parecida com a indexa\u00e7\u00e3o, por\u00e9m o resultado \u00e9 diferente: enquanto na indexa\u00e7\u00e3o \u00e9 retornado um item de uma lista, no *slicing* \u00e9 retornado uma lista totalmente nova e independente da lista original. Formalizando, o *slicing* retorna uma nova cole\u00e7\u00e3o, do mesmo tipo da cole\u00e7\u00e3o original, por\u00e9m independente dessa. Por exemplo: o slicing de uma string retorna uma nova string e independente da string original. A sintaxe do *slicing* \u00e9 a seguinte:\n```\n<sublist> = <var_list>[<s>:<e>]\n```\nA vari\u00e1vel que cont\u00e9m a lista \u00e9 `<var_list>` e para fazer o *slicing* vamos utlizar: os colchetes `[]` ap\u00f3s a vari\u00e1vel e dentro dos colchetes vamos utilizar dois inteiros (pode ser constantes ou vari\u00e1veis do tipo inteiro) separados por dois pontos `:`. O primeiro inteiro dentro dos colchetes `<s>` representa a posi\u00e7\u00e3o inicial, enquanto o segundo inteiro dentro dos colchetes `<e>` representa a posi\u00e7\u00e3o final. Assim a nova lista, que ser\u00e1 atribu\u00edda a vari\u00e1vel `<sublist>`, ser\u00e1 composta por todos os itens, dentro do intervalo `[<s>, <e>)`, da lista `<var_list>`. Perceba que o item presente na posi\u00e7\u00e3o `<e>` n\u00e3o ser\u00e1 inclu\u00eddo na nova lista. Os itens presentes ser\u00e3o os itens da posi\u00e7\u00e3o: `<s>`, `(<s>+1)`, `(<s>+2)` at\u00e9 o item na posi\u00e7\u00e3o `(<e>-1)`.","3eafe300":"# Erros\n\nQuando alguma coisa d\u00e1 errada no script, o interpretador Python interrompe a execu\u00e7\u00e3o do programa e imprime uma mensagem de erro","78a1416f":"O retorno da fun\u00e7\u00e3o `input` consiste nos dados digitados pelo usu\u00e1rio. Este retorno \u00e9 sempre do tipo `string`.\nPara adicionar um promt (uma frase, ou palavra, que vem antes da entrada de dados) basta adicionar uma string como argumento da fun\u00e7\u00e3o `input`","9149106e":"# Sa\u00edda\n\nPara imprimir alguma coisa na tela, utilizamos a _built-in function_ **_print_**","3d94b3e9":"# Regras de nomeclatura de vari\u00e1veis\nExiste alguns nomes que s\u00e3o permitidos para os nomes das vari\u00e1veis, enquanto outros nomes s\u00e3o pro\u00edbidos.\n\nOs nomes permitidos possuem as seguintes regras:\n1. Deve come\u00e7ar com **letra min\u00fascula**, ou com **letra mai\u00fascula** ou com **underline** (\\_)\n2. Pode possuir **n\u00fameros**, por\u00e9m **n\u00e3o pode iniciar** com n\u00fameros\n3. Os \u00fanicos simbolos permitidos s\u00e3o: **letras min\u00fascula**, **letra mai\u00fascula**, **underline**, **n\u00fameros**","25ee51ef":"Vamos dar uma olhada na mensagem de erro impressa:\n```Shell\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n<ipython-input-12-72bcea0f1f9d> in <module>\n      1 print('Matheus Tenorio')\n      2 print('Idade: 24 anos')\n----> 3 pritn('Altura: 1,80cm')\n\nNameError: name 'pritn' is not defined\n```\nA primeira linha mostra o tipo do erro. Neste caso foi `NameError` que indica um erro de sintaxe. Mais precisamente a fun\u00e7\u00e3o `print` foi escrita errada (`pritn`)\nNas pr\u00f3ximas linhas \u00e9 mostrado em qual linha o erro ocorreu. Isto \u00e9 \u00fatil para encontrar o erro em um script com muitas linhas.","319e373d":"# Cole\u00e7\u00f5es\nEm python, temos o conceito de cole\u00e7\u00f5es. Um cole\u00e7\u00e3o, como sugere o nome, \u00e9 um conjunto de elementos relacionados, que podem possuir, ou n\u00e3o, o mesmo tipo.\nTemos 4 tipos principais de cole\u00e7\u00f5es: \n1. Lista\n1. Tupla\n1. Conjunto (Set)\n1. Dicion\u00e1rio","1bc0b477":"Rode o c\u00f3digo acima para ver cada sa\u00edda.","0d44c4fc":"Tamb\u00e9m podemos utilizar indices negativos no *slicing*. Eles funcionam da mesma forma como na indexa\u00e7\u00e3o reversa.","41e222f0":"### Note que o print deve possuir parenteses","6ef0cfcf":"Para fazer um coment\u00e1rio de muitas linhas podemos utilizar aspas triplas (''' ''')","9468a183":"Al\u00e9m dos operadores, as strings possuem um conjunto de m\u00e9todos - https:\/\/docs.python.org\/2.5\/lib\/string-methods.html. Vamos abordar alguns deles aqui como transformar todos os caracteres em 'caixa baixa' ou 'caixa alta' e separa em substring a partir de um padr\u00e3o.","14e14fd4":"# Lista\nA lista \u00e9 uma cole\u00e7\u00e3o sequencial indexada. Sequ\u00eancial porque a ordem importa no momento que os itens s\u00e3o armazenados e indexada por utilizar indices n\u00famericos para obter os itens armazenados na lista. Por consequ\u00eancia, os itens da lista s\u00e3o acessados e modificados por indices n\u00famericos, sendo estes indices correspondentes as posi\u00e7\u00f5es, nas quais os itens est\u00e3o armazenados na lista. A lista corresponderia ao array de outras linguagens, mas com a vantagem de aceitar diversos tipos. A sintaxe da lista \u00e9 a seguinte:\n\n```\n<nome_da_variavel> = [<item1>, <item2>, <item3>, ..., <itemN>]\n```\nO `<nome_da_vari\u00e1vel>` representa o nome da vari\u00e1vel que vai armazenar a lista. A lista \u00e9 sempre delimitada por colchetes `[]`. Desta forma, tudo que estiver dentro dos colchetes ser\u00e1 um item da lista. Os `<item1>`, `<item2>`, `<item3>` e `<itemN>`, correspondem aos itens da lista. Perceba que os itens da lista s\u00e3o separados por v\u00edrgula `,`. Caso a lista possua apenas um item n\u00e3o \u00e9 necess\u00e1rio a v\u00edrgula, apenas o item.","be5a4e2e":"## *Built-in Functions*\nExistem 4 *built-in functions* que podem ser utilizadas em listas:\n1. `type` -> utilizada para obter o tipo da lista (deve retornar `list`)\n1. `len` -> utilizado para obter o tamanho da lista\n1. `max` -> utilizado para obter o item de maior valor da lista\n1. `min` -> utilizado para obter o item de menor valor da lista"}}