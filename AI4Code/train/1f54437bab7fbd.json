{"cell_type":{"c9f5f716":"code","dbd59d9e":"code","33a6eba6":"code","4ad5dfc3":"code","81836f74":"code","171ad14d":"code","8ba201f6":"code","50f8869a":"code","2fa41c40":"code","d2102d05":"code","f2f3fec6":"code","eb222042":"code","aa245211":"markdown"},"source":{"c9f5f716":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nimport missingno as msno\nimport seaborn as sns\nwarnings.filterwarnings('ignore')","dbd59d9e":"#\u8bfb\u53d6\u6570\u636e\ntrain_data = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/machine-learning-hebei-north-university\/test.csv\")\ntrain_data.head()","33a6eba6":"#\u6570\u636e\u67e5\u770b\u7f3a\u5931\u5217\u6570\u91cf\u53ca\u7f3a\u5931\u503c\u4e2a\u6570\nmissing = train_data.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()\nprint(missing)","4ad5dfc3":"#\u5220\u9664\u7f3a\u5931\u503c\u8f83\u591a\u7684\u7279\u5f81\ntrain_data=train_data.drop(labels=['FireplaceQu','Fence','Alley','MiscFeature','PoolQC','LotFrontage'],axis=1)\ntrain_data.shape","81836f74":"# \u7b5b\u9009\u9700\u8981\u586b\u5145\u7684\u5217\nprint(train_data.columns[train_data.isnull().sum() > 0])\n#\u5c06Nan\u8f6c\u6362\u4e3a0\nfor column in list(train_data.columns[train_data.isnull().sum() > 0]):\n    Nan = 0\n    train_data[column].fillna(Nan, inplace=True)\n#\u7528\u5217\u5747\u503c\u8fdb\u884c\u586b\u5145NaN\nfor column in list(train_data.columns[train_data.isnull().sum() > 0]):\n    mean_val = train_data[column].mean()\n    train_data[column].fillna(mean_val, inplace=True)","171ad14d":"#\u67e5\u770b\u586b\u5145\u540e\u7684\u6570\u636e\ntrain_data.describe()","8ba201f6":"#\u8ba1\u7b97\u76f8\u5173\u7cfb\u6570\ncorrmatrix = train_data.corr()\n# \u7ed8\u5236\u70ed\u529b\u56fe\uff0c\u70ed\u529b\u56fe\u6a2a\u7eb5\u5750\u6807\u5206\u522b\u662fdata\u7684index\/column,vmax\/vmin\u8bbe\u7f6e\u70ed\u529b\u56fe\u989c\u8272\u6807\u8bc6\u4e0a\u4e0b\u9650\uff0ccenter\u663e\u793a\u989c\u8272\u6807\u8bc6\u4e2d\u5fc3\u4f4d\u7f6e\uff0ccmap\u989c\u8272\u6807\u8bc6\u989c\u8272\u8bbe\u7f6e\nsns.heatmap(corrmatrix,square=True,vmax=1,vmin=-1,center=0.0,cmap='coolwarm')","50f8869a":"# \u53d6\u76f8\u5173\u6027\u524d10\u7684\u7279\u5f81\nk=10\n# data.nlargest(k, 'target')\u5728data\u4e2d\u53d6\u2018target'\u5217\u503c\u6392\u524d\u5341\u7684\u884c\n# cols\u4e3a\u6392\u524d\u5341\u7684\u884c\u7684index,\u5728\u672c\u4f8b\u4e2d\u5373\u4e3a\u4e0e\u2019SalePrice\u2018\u76f8\u5173\u6027\u6700\u5927\u7684\u524d\u5341\u4e2a\u7279\u5f81\u540d\ncols = corrmatrix.nlargest(k,'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train_data[cols].values.T)\n#data[cols].values.T\n#\u8bbe\u7f6e\u5750\u6807\u8f74\u5b57\u4f53\u5927\u5c0f\nsns.set(font_scale=1.25)\n# sns.heatmap() cbar\u662f\u5426\u663e\u793a\u989c\u8272\u6761\uff0c\u9ed8\u8ba4\u662f\uff1bcmap\u663e\u793a\u989c\u8272\uff1bannot\u662f\u5426\u663e\u793a\u6bcf\u4e2a\u503c\uff0c\u9ed8\u8ba4\u4e0d\u663e\u793a\uff1b\n# square\u662f\u5426\u6b63\u65b9\u5f62\u65b9\u6846\uff0c\u9ed8\u8ba4\u4e3aFalse,fmt\u5f53\u663e\u793aannotate\u65f6annot\u7684\u683c\u5f0f\uff1bannot_kws\u4e3aannot\u8bbe\u7f6e\u683c\u5f0f\n# yticklabels\u4e3aY\u8f74\u523b\u5ea6\u6807\u7b7e\u503c\uff0cxticklabels\u4e3aX\u8f74\u523b\u5ea6\u6807\u7b7e\u503c\nhm = sns.heatmap(cm,cmap='RdPu',annot=True,square=True,fmt='.2f',annot_kws={'size':10},yticklabels=cols.values,xticklabels=cols.values)\n\n \ncm1 = train_data[cols].corr()\nhm2 = sns.heatmap(cm1,square=True,annot=True,cmap='RdPu',fmt='.2f',annot_kws={'size':10})","2fa41c40":"#\u9009\u53d6\u7684\u7279\u5f81\uff1a'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt'\ncols1 = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars','TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nsns.pairplot(train_data[cols1],size=2.5)","d2102d05":"#\u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\n\nfeature_data = train_data.drop(['SalePrice'],axis=1)\ntarget_data = train_data['SalePrice']\n \n# \u5c06\u6570\u636e\u96c6\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train, y_test = train_test_split(feature_data, target_data, test_size=0.3)\n","f2f3fec6":"#\u5efa\u7acb\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nfrom statsmodels.formula.api import ols\nfrom statsmodels.sandbox.regression.predstd import wls_prediction_std\n \ndf_train = pd.concat([X_train,y_train],axis=1)\n# ols(\"target~feature+C(feature)\", data=data\n# C(feature)\u8868\u793a\u8fd9\u4e2a\u7279\u5f81\u4e3a\u5206\u7c7b\u7279\u5f81category\nlr_model = ols(\"SalePrice~C(OverallQual)+GrLivArea+C(GarageCars)+TotalBsmtSF+C(FullBath)+YearBuilt\",data=df_train).fit()\nprint(lr_model.summary())\n \n# \u9884\u6d4b\u6d4b\u8bd5\u96c6\nlr_model.predict(X_test)\n","eb222042":"# prstd\u4e3a\u6807\u51c6\u65b9\u5dee\uff0civ_l\u4e3a\u7f6e\u4fe1\u533a\u95f4\u4e0b\u9650\uff0civ_u\u4e3a\u7f6e\u4fe1\u533a\u95f4\u4e0a\u9650\nprstd, iv_l, iv_u = wls_prediction_std(lr_model, alpha = 0.05)\n# lr_model.predict()\u4e3a\u8bad\u7ec3\u96c6\u7684\u9884\u6d4b\u503c\npredict_low_upper = pd.DataFrame([lr_model.predict(),iv_l, iv_u],index=['PredictSalePrice','iv_l','iv_u']).T\npredict_low_upper.plot(kind='hist',alpha=0.4)","aa245211":"# House Prices - Advanced Regression Techniques"}}