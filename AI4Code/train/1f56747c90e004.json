{"cell_type":{"cda3e695":"code","db5e25a8":"code","f8aee859":"code","7198ccfb":"code","ce1eff49":"code","5b464f08":"code","f928d09b":"code","976fcb9d":"code","42400e47":"code","76f7a47a":"code","97bd6e1c":"code","98480186":"code","25c6843c":"markdown","0e4f2ca1":"markdown"},"source":{"cda3e695":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db5e25a8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\ndata=pd.read_csv('..\/input\/logistic-regression\/Social_Network_Ads.csv')\ndata.head()","f8aee859":"data['Gender']=data['Gender'].map({'Male':2,'Female':3})\ndata.head()\n","7198ccfb":"data.isna().sum()","ce1eff49":"positive=data[data['Purchased'].isin([1])]\nnegative=data[data['Purchased'].isin([0])]\n\nfig,ax=plt.subplots(figsize=(15,10))\n\n\n\nax.scatter(positive['Gender'],positive['Age'],s=50,c='b',marker='o',label='Purchased')\nax.scatter(negative['Gender'],negative['Age'],s=50,c='r',marker='x',label='Not Purchased')\n","5b464f08":"\nfig,ax=plt.subplots(figsize=(15,10))\n\nax.scatter(positive['EstimatedSalary'],positive['Gender'],s=50,c='b',marker='o',label='Purchased')\nax.scatter(negative['EstimatedSalary'],negative['Gender'],s=50,c='r',marker='x',label='Not Purchased')\n","f928d09b":"fig,ax=plt.subplots(figsize=(15,10))\n\nax.scatter(positive['EstimatedSalary'],positive['Age'],s=50,c='b',marker='o',label='Purchased')\nax.scatter(negative['EstimatedSalary'],negative['Age'],s=50,c='r',marker='x',label='Not Purchased')","976fcb9d":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX=data.drop(['Purchased','Gender','User ID'],axis=1).values\nX=scaler.fit_transform(X)\ny=data.iloc[:,-1].values\n","42400e47":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","76f7a47a":"from sklearn.linear_model import LogisticRegression\nlogRegressor=LogisticRegression()\nlogRegressor.fit(X_train,y_train)","97bd6e1c":"pred=logRegressor.predict(X_test)\npred=np.reshape(pred,(80,1))\ny_test=np.reshape(y_test,(80,1))\nlogRegressor.score(X_test,y_test)","98480186":"from sklearn.metrics import classification_report, confusion_matrix,accuracy_score\nprint(classification_report(y_test,pred))\nprint (\"Confusion matrix : \\n\",confusion_matrix(y_test,pred))\nprint (\"Accuracy : \\n\",accuracy_score(y_test,pred))","25c6843c":"# **Conclusion** \n**I used LogisticRegression Model based on plots\nResult: 92.5% Accuracy on test**\n\n","0e4f2ca1":"> view favbar"}}