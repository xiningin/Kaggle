{"cell_type":{"037c4b9c":"code","ae5b3890":"code","6390f52c":"code","039ae17a":"code","ac3e842a":"code","ebcc2b0d":"code","8bdf9cf7":"code","842ef162":"code","cc5716a1":"code","adb99e08":"code","e72f4831":"code","1c0733fb":"markdown","bb89c2b2":"markdown","e672c624":"markdown","85a0fcbe":"markdown","66164a65":"markdown","2152dda5":"markdown","5406949d":"markdown"},"source":{"037c4b9c":"import numpy as np\nimport pandas as pd\nfrom PIL import Image\n%matplotlib inline\n","ae5b3890":"import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras import Model,layers\nfrom keras.models import load_model, model_from_json","6390f52c":"train_datagen = ImageDataGenerator(\nshear_range =10,\nzoom_range = 0.2,                  \nhorizontal_flip = True,\npreprocessing_function = preprocess_input)\n\ntrain_generator = train_datagen.flow_from_directory(\n '..\/input\/chest-xray-pneumonia\/chest_xray\/train',\n batch_size = 32,\n class_mode = 'binary',\n target_size =  (224,224))\n\nvalidation_datagen = ImageDataGenerator(\n preprocessing_function = preprocess_input)\n\nvalidation_generator = validation_datagen.flow_from_directory(\n'..\/input\/chest-xray-pneumonia\/chest_xray\/test',\nshuffle = False,\nclass_mode='binary',\ntarget_size=(224,224))","039ae17a":"conv_base = ResNet50(include_top = False, weights = 'imagenet')\n\nfor layer in conv_base.layers:\n    layer.trainable = False\n    \nx = conv_base.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation='relu')(x)\npredictions = layers.Dense(2,activation='softmax')(x)\nmodel = Model(conv_base.input, predictions)\n\noptimizer = keras.optimizers.Adam()\nmodel.compile(loss='sparse_categorical_crossentropy',\n             optimizer = optimizer,\n             metrics=['accuracy'])","ac3e842a":"history = model.fit_generator(\ngenerator = train_generator,\nepochs = 3,\nvalidation_data = validation_generator)","ebcc2b0d":"import torch\nfrom torchvision import datasets, models, transforms\nimport torch.nn as nn\nfrom torch.nn import functional as F\nimport torch.optim as optim","8bdf9cf7":"normalize = transforms.Normalize(mean = [0.485,0.456,0.406],\n                                std = [0.229, 0.224, 0.225])\n\ndata_transforms = {\n    'train':\n    transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.RandomAffine(0, shear=10, scale = (0.8,1.2)),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        normalize]),\n    \n        \n    'validation':\n    transforms.Compose([\n        transforms.Resize((224,224)),\n        transforms.ToTensor(),                \n        normalize])}\n\nimage_datasets = {\n    'train':\n    datasets.ImageFolder('..\/input\/chest-xray-pneumonia\/chest_xray\/train', data_transforms['train']),\n    'validation':\n    datasets.ImageFolder('..\/input\/chest-xray-pneumonia\/chest_xray\/test', data_transforms['validation'])}\n\ndataloader = {\n    'train':\n    torch.utils.data.DataLoader(\n    image_datasets['train'],\n    batch_size=32,\n    shuffle=True,\n    num_workers=4),\n    \n    'validation':\n    torch.utils.data.DataLoader(\n    image_datasets['validation'],\n    batch_size=32,\n    shuffle = False,\n    num_workers = 4)}\n    \n","842ef162":"device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\nmodel = models.resnet50(pretrained = True).to(device)\n\nfor param in  model.parameters():\n    param.requires_grad = False\n    \nmodel.fc = nn.Sequential(\nnn.Linear(2048,128),\nnn.ReLU(inplace =True),\nnn.Linear(128,2)).to(device)\n\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.fc.parameters())","cc5716a1":"def train_model(model, criterion, optimizer, num_epochs = 3):\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch+1, num_epochs))\n        print('-'*10)\n        \n        \n        for phase in ['train','validation']:\n            if phase == 'train':\n                model.train()\n            else:\n                model.eval()\n            \n            \n            running_loss = 0.0\n            running_corrects = 0\n            \n            for inputs,labels in dataloader[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                \n                outputs = model(inputs)\n                loss = criterion(outputs,labels)\n                \n                if phase == 'train':\n                    optimizer.zero_grad()\n                    loss.backward()\n                    optimizer.step()\n                    \n                _,preds = torch.max(outputs,1)\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n                \n            epoch_loss = running_loss \/ len(image_datasets[phase])\n            epoch_acc = running_corrects.double() \/ len(image_datasets[phase])\n            \n            print('{} loss :{:.4f}, acc:{:.4f}'.format(phase,epoch_loss,epoch_acc))\n            \n    return model\n\nmodel_trained = train_model(model, criterion, optimizer, num_epochs=2)","adb99e08":"torch.save(model_trained.state_dict(),'..\/weights.h5')","e72f4831":"model = models.resnet50(pretrained=False).to(device)\nmodel.fc = nn.Sequential(\nnn.Linear(2048,128),\nnn.ReLU(inplace=True),\nnn.Linear(128,2)).to(device)\n\nmodel.load_state_dict(torch.load('..\/weights.h5'))","1c0733fb":"# Import Dependencies","bb89c2b2":"# Train the Model","e672c624":"# PyTorch","85a0fcbe":"# Refrences\n\n*Idea* = \nnewsletters,\n\n*Code* = \nself gained knowledge\n\n\n**Hope you liked it**\n**Please share your views for to help in evolving myself & learning more and more..........................................                              ...............  \n**","66164a65":"# Save the Model","2152dda5":"# Load the Model","5406949d":"# Create Data Generators"}}