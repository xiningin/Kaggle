{"cell_type":{"3abb461d":"code","085e1b7c":"code","22a7a685":"code","1261a7a3":"code","fbe117e3":"code","354cb326":"code","8294caaa":"code","c270f89d":"code","ae363453":"code","a0cd7252":"code","7dac66c9":"code","364eea60":"code","c5736466":"code","6d6d6083":"code","61660a7d":"code","9633af02":"code","7df452e7":"code","1339efec":"code","527dbfc9":"code","4d3947da":"markdown","b32c6d47":"markdown","897b5b03":"markdown","89a82ff5":"markdown","e0b3a876":"markdown","244b1e9d":"markdown","d55f0c39":"markdown"},"source":{"3abb461d":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBClassifier\n\nfrom itertools import product\nimport random","085e1b7c":"random.seed(42)","22a7a685":"def label_converter(label):\n    conversion = {\n        1: 0,\n        2: 1,\n        3: 2,\n        4: 3,\n        6: 4,\n        7: 5\n    }\n    \n    return conversion[label]","1261a7a3":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv', index_col='Id').reset_index(drop=True)\n\nclass5_index = None\nfor index, val in enumerate(df['Cover_Type']):\n    if val == 5:\n        class5_index = index\n\ndf = df.drop([class5_index])\n\nX = df.drop(['Cover_Type'], axis=1)\ny = df['Cover_Type'].apply(label_converter)","fbe117e3":"X = X.drop(['Soil_Type7', 'Soil_Type15'], axis=1)\nnumerical = []\ncategorical = []\nfor col in X.columns:\n    if X[col].nunique() <= 2:\n        categorical.append(col)\n    else:\n        numerical.append(col)\n        \ngaussian_features = ['Elevation', 'Hillshade_3pm']\nfor feature in gaussian_features:\n    numerical.remove(feature)","354cb326":"X_train, X_val, y_train, y_val = train_test_split(\n    X,\n    y,\n    test_size=0.2,\n    random_state=42,\n    stratify=y\n)","8294caaa":"X_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv', index_col='Id')\nX_test = X_test.drop(['Soil_Type7', 'Soil_Type15'], axis=1)","c270f89d":"def create_new_pipeline(params):\n    numerical_gaussian_transformer = SimpleImputer(strategy='mean')\n    numerical_transformer = SimpleImputer(strategy='median')\n    categorical_transformer = SimpleImputer(strategy='most_frequent')\n\n    preprocessor = ColumnTransformer(\n    transformers=[\n        ('gaussian', numerical_gaussian_transformer, gaussian_features),\n        ('numerical', numerical_transformer, numerical),\n        ('categorical', categorical_transformer, categorical)\n    ])\n\n    scaler = StandardScaler()\n\n    model = XGBClassifier(\n        use_label_encoder=False,\n        objective='multi:softmax',\n        n_jobs=-1,\n        random_state=42,\n        **params\n    )\n\n    pipeline = Pipeline(\n    steps=[\n           ('preprocessor', preprocessor),\n           ('scaler', scaler),\n           ('model', model)\n          ]\n    )\n\n    return pipeline","ae363453":"search_space = {\n    'n_estimators': [10, 20, 50],\n    'max_depth': np.linspace(1, 9, num=5).astype('int'),\n    'learning_rate': np.logspace(-3, 1, num=5),\n    'reg_alpha': np.linspace(0, 1, num=3),\n    'reg_lambda': np.linspace(0, 1, num=3)\n}","a0cd7252":"NUM_POSS = 15","7dac66c9":"max_score = 0\nbest_params = {}\n\nfor val in random.choices(list(product(*search_space.values())), k=NUM_POSS):\n    params = {}\n    for i, param in enumerate(search_space.keys()):\n        params[param] = val[i]\n    print(params)\n\n    clf = create_new_pipeline(params)\n\n    clf.fit(X_train, y_train)\n\n    score = clf.score(X_val, y_val)\n    if score > max_score:\n        max_score = score\n        best_params = params\n    print(f'Score: {score}\\tBest score: {max_score}')","364eea60":"best_params","c5736466":"max_score","6d6d6083":"clf = create_new_pipeline(best_params)","61660a7d":"clf.fit(X, y)","9633af02":"clf.score(X, y)","7df452e7":"def reverse_label_converter(label):\n    conversion = {\n        0: 1,\n        1: 2,\n        2: 3,\n        3: 4,\n        4: 6,\n        5: 7\n    }\n    \n    return conversion[label]","1339efec":"submission = pd.DataFrame(\n    {'Id': X_test.index,\n     'Cover_Type': map(reverse_label_converter, clf.predict(X_test))}\n)\n\nsubmission","527dbfc9":"submission.to_csv('submission.csv', index=False)","4d3947da":"# Initialization","b32c6d47":"# Hyperparameter Tuning","897b5b03":"# Preparing data","89a82ff5":"# Making Predictions","e0b3a876":"In this notebook I will train a XGBoost model with random search for tuning the model.\n\nI will also use the insights gained from the [EDA](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/) here.\n\nMy other notebooks:\n - [Exploratory Data Analysis](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-exploratory-data-analysis\/)\n - [Sample Submission](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-sample-submission\/)\n - [Boilerplate code](https:\/\/www.kaggle.com\/aniketsharma00411\/tpsdec21-dummy\/)","244b1e9d":"# Training Final Model","d55f0c39":"# Creating a Pipeline"}}