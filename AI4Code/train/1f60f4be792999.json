{"cell_type":{"e1917aae":"code","c5236c8d":"code","72c3dff2":"code","bd1688ff":"code","061b274c":"code","e12c8b8e":"code","d89b025a":"code","f5dda5af":"code","157704ca":"code","4dd79fc8":"code","e8b78505":"code","750b5a58":"code","a318dde3":"code","181dc6f2":"code","4ad2be92":"code","cfb58ccf":"code","266479fe":"code","2d4545a3":"code","9ab3b232":"code","adddb485":"code","1e54446c":"code","8ba3b9aa":"code","4cabbab1":"code","6f960a0b":"code","8c1cbb47":"code","70217913":"code","80a8d76b":"code","2a67cc90":"code","fa59310d":"code","6dd67d34":"code","46240a65":"code","028e8917":"code","c7437163":"code","5d30a03e":"code","325495d8":"code","6aa64f81":"code","21288d68":"code","cfa9d68d":"code","58c9b982":"code","f88ec2fc":"code","b9dd0577":"code","3e18e87c":"code","34b716e5":"code","e727a4c6":"code","4478b1b1":"code","8aad7526":"code","960a88e9":"code","3bb577e3":"code","4eeaa626":"code","7fec0932":"code","471b289b":"code","dc143cc0":"code","f7d4f143":"code","f0587627":"code","418ae680":"code","d36a22da":"code","cff88084":"code","741606d0":"code","fe426d02":"code","773faa1f":"code","734f91ad":"code","d423b7df":"code","39987d8c":"code","488b5f66":"code","6175174e":"code","ed46dbad":"code","0550208a":"code","fc9f6b1e":"markdown","f6a8ade5":"markdown","c2324334":"markdown","338adfe1":"markdown","b2c5e4b6":"markdown","248cbba1":"markdown","6786e16b":"markdown","c43f9598":"markdown","ce6835c2":"markdown","268812cc":"markdown","d7a297a6":"markdown","6bfea469":"markdown","a4e00f6b":"markdown","0a2faa72":"markdown","185b8cbf":"markdown","a6e6052f":"markdown","9d7577c2":"markdown","ba07d722":"markdown","93c91014":"markdown","6644129e":"markdown","0811985b":"markdown","7625e20a":"markdown","6cb90057":"markdown","10152e24":"markdown","22dee829":"markdown","1100bd37":"markdown"},"source":{"e1917aae":"# install calmap\n! pip install calmap\n\n# essential libraries\nimport json\nfrom urllib.request import urlopen\n\n# storing and anaysis\nimport numpy as np\nimport pandas as pd\n\n# visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport calmap\nimport folium\n\n# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow\n\n# converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()   \n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport plotly.express as px\n\nfrom sklearn.cluster import KMeans\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\n# Setup\nimport folium\nimport plotly.graph_objects as go\nimport math \nimport random\n\n# for time series\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly\n\n\n\n\n########\nimport matplotlib.colors as mcolors\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\n%matplotlib inline \n","c5236c8d":"full_table = pd.read_csv('\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv', parse_dates=['Date'])\nfull_table.head()","72c3dff2":"# cases \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# replacing Mainland china with just China\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)","bd1688ff":"# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Province\/State'].str.contains('Diamond Princess cruise ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\n","061b274c":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","e12c8b8e":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp.style.background_gradient(cmap='Reds')","d89b025a":"temp_flg = temp_f[temp_f['Deaths']>0][['Country\/Region', 'Deaths']]\ntemp_flg.sort_values('Deaths', ascending=False).reset_index(drop=True).style.background_gradient(cmap='Reds')","f5dda5af":"# World wide\n\nm = folium.Map(location=[0, 0], tiles='cartodbpositron',\n               min_zoom=1, max_zoom=4, zoom_start=1)\n\nfor i in range(0, len(full_latest)):\n    folium.Circle(\n        location=[full_latest.iloc[i]['Lat'], full_latest.iloc[i]['Long']],\n        color='crimson', \n        tooltip =   '<li><bold>Country : '+str(full_latest.iloc[i]['Country\/Region'])+\n                    '<li><bold>Province : '+str(full_latest.iloc[i]['Province\/State'])+\n                    '<li><bold>Confirmed : '+str(full_latest.iloc[i]['Confirmed'])+\n                    '<li><bold>Deaths : '+str(full_latest.iloc[i]['Deaths'])+\n                    '<li><bold>Recovered : '+str(full_latest.iloc[i]['Recovered']),\n        radius=int(full_latest.iloc[i]['Confirmed'])**1.1).add_to(m)\nm","157704ca":"patient_path_13_3_20 = '\/kaggle\/input\/coronavirusdataset\/patient.csv'\ntime_path_13_3_20 = '\/kaggle\/input\/coronavirusdataset\/time.csv'\nroute_path_13_3_20 = '\/kaggle\/input\/coronavirusdataset\/route.csv'","4dd79fc8":"patient_13_3_20 = pd.read_csv(patient_path_13_3_20, index_col=\"patient_id\")\ntime_13_3_20 = pd.read_csv(time_path_13_3_20, index_col=\"date\")\nroute_13_3_20 = pd.read_csv(route_path_13_3_20, index_col=\"patient_id\")\n\nprint(f\"Last Update: {pd.datetime.today().strftime('%m\/%d\/%Y')}\")","e8b78505":"patient_13_3_20.info()","750b5a58":"patient_13_3_20.isna().sum()","a318dde3":"dead_13_3_20 = patient_13_3_20[patient_13_3_20.state == 'deceased']\ndead_13_3_20.head()","181dc6f2":"patient_13_3_20['birth_year'] = patient_13_3_20.birth_year.fillna(0.0).astype(int)\npatient_13_3_20['birth_year'] = patient_13_3_20['birth_year'].map(lambda val: val if val > 0 else np.nan)\n\ndead_13_3_20['age'] = 2020 - patient_13_3_20['birth_year'] \n\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the deceased\")\nax = sns.kdeplot(data=dead_13_3_20['age'], shade=True, color=\"g\")\n","4ad2be92":"male_dead_13_3_20 = dead_13_3_20[dead_13_3_20.sex == 'male']\nfemale_dead_13_3_20 = dead_13_3_20[dead_13_3_20.sex == 'female']\n\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the deceased by gender\")\nsns.kdeplot(data=female_dead_13_3_20['age'], label=\"Female\", shade=True).set(xlim=(0))\nsns.kdeplot(data=male_dead_13_3_20['age'],label=\"Male\" ,shade=True).set(xlim=(0))","cfb58ccf":"female_data=female_dead_13_3_20['age']\nmale_data=male_dead_13_3_20['age']\n\nplt.hist(female_data , bins=10, label=\"Female\")\nplt.hist(male_data, bins=10, label=\"Male\")\n\nplt.legend()\n\nplt.title(\"Age distribution of the deceased by gender\")\nplt.xlabel(\"Age\")\nplt.show()\n","266479fe":"female_data=female_dead_13_3_20['age']\nmale_data=male_dead_13_3_20['age']\n\nplt.hist(female_data , bins=20)\nplt.hist(male_data, bins=20)\n\nplt.title(\"Age distribution of the deceased by gender\")\nplt.xlabel(\"Age\")\nplt.show()\n","2d4545a3":"released_13_3_20 = patient_13_3_20[patient_13_3_20.state == 'released']\nreleased_13_3_20['age'] = 2020 - patient_13_3_20['birth_year'] \n\nmale_released_13_3_20 = released_13_3_20[released_13_3_20.sex == 'male']\nfemale_released_13_3_20 = released_13_3_20[released_13_3_20.sex == 'female']\n\nplt.figure(figsize=(10,6))\nsns.set_style(\"darkgrid\")\nplt.title(\"Age distribution of the released by gender\")\nsns.kdeplot(data=female_released_13_3_20['age'], label=\"Female\", shade=True).set(xlim=(0))\nsns.kdeplot(data=male_released_13_3_20['age'],label=\"Male\" ,shade=True).set(xlim=(0))","9ab3b232":"female_data=female_released_13_3_20['age']\nmale_data=male_released_13_3_20['age']\n\nplt.hist(female_data , bins=10)\nplt.hist(male_data, bins=10)\n\nplt.title(\"Age distribution of the deceased by gender\")\nplt.xlabel(\"Age\")\nplt.show()\n","adddb485":"female_data=female_released_13_3_20['age']\nmale_data=male_released_13_3_20['age']\n\nplt.hist(female_data , bins=20)\nplt.hist(male_data, bins=20)\n\nplt.title(\"Age distribution of the deceased by gender\")\nplt.xlabel(\"Age\")\nplt.show()","1e54446c":"import matplotlib.colors as mcolors\nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline ","8ba3b9aa":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')","4cabbab1":"confirmed_df.head()","6f960a0b":"cols = confirmed_df.keys()\n\nconfirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","8c1cbb47":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","70217913":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)\nprint('Days Since 22.1.20: ' , len(days_since_1_22))","80a8d76b":"# Forcasting values\ndays_in_future = 14\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-14]","2a67cc90":"# Convert integer into datetime for better visualization\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","fa59310d":"# Split data for model\nX_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.15, shuffle=False) ","6dd67d34":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=100, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","46240a65":"print('Best Params are: ')\nsvm_search.best_params_","028e8917":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","c7437163":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","5d30a03e":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","325495d8":"print(linear_model.coef_)\nprint(linear_model.intercept_)","6aa64f81":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Confirmed Cases', 'Linear Regression predictions'])","21288d68":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_confirmed, y_train_confirmed)","cfa9d68d":"bayesian_search.best_params_","58c9b982":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","f88ec2fc":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Confirmed Cases', 'Bayesian predictions'])","b9dd0577":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.xticks(size=15)\nplt.show()","3e18e87c":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","34b716e5":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","e727a4c6":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","4478b1b1":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-14:], svm_pred[-14:]))","8aad7526":"# Future predictions using Bayesian regression\nprint('Bayesian regression future predictions:')\nset(zip(future_forcast_dates[-14:], bayesian_pred[-14:]))","960a88e9":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-14:])","3bb577e3":"# Split data for model\nX_train_deaths, X_test_deaths, y_train_deaths, y_test_deaths = train_test_split(days_since_1_22, total_deaths, test_size=0.15, shuffle=False) ","4eeaa626":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, n_jobs=-1, return_train_score=True, n_iter=40, verbose=1)\nsvm_search.fit(X_train_deaths, y_train_deaths)","7fec0932":"print('Best Params are: ')\nsvm_search.best_params_","471b289b":"svm_deaths = svm_search.best_estimator_\nsvm_pred_death = svm_deaths.predict(future_forcast)","dc143cc0":"# check against testing data\nsvm_test_pred = svm_deaths.predict(X_test_deaths)\nplt.plot(svm_test_pred)\nplt.plot(y_test_deaths)\nplt.legend(['Death Cases', 'SVM predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_deaths))","f7d4f143":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_deaths, y_train_deaths)\ntest_linear_pred = linear_model.predict(X_test_deaths)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_deaths))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_deaths))","f0587627":"print(linear_model.coef_)\nprint(linear_model.intercept_)","418ae680":"plt.plot(y_test_deaths)\nplt.plot(test_linear_pred)\nplt.legend(['Death Cases', 'Linear Regression predictions'])","d36a22da":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_deaths, y_train_deaths)","cff88084":"bayesian_search.best_params_","741606d0":"bayesian_deaths = bayesian_search.best_estimator_\ntest_bayesian_pred_deaths = bayesian_deaths.predict(X_test_deaths)\nbayesian_pred_deaths = bayesian_deaths.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred_deaths, y_test_deaths))\nprint('MSE:',mean_squared_error(test_bayesian_pred_deaths, y_test_deaths))","fe426d02":"plt.plot(y_test_deaths)\nplt.plot(test_bayesian_pred_deaths)\nplt.legend(['Confirmed Cases', 'Bayesian predictions'])","773faa1f":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Deaths', size=20)\nplt.xticks(size=15)\nplt.show()","734f91ad":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, svm_pred_death, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","d423b7df":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","39987d8c":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.plot(future_forcast, bayesian_pred_deaths, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Death Cases Over Time', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.legend(['Death Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","488b5f66":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-14:], svm_pred_death[-14:]))","6175174e":"# Future predictions using Bayesian regression\nprint('Bayesian regression future predictions:')\nset(zip(future_forcast_dates[-14:], bayesian_pred_deaths[-14:]))","ed46dbad":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-14:])","0550208a":"plt.figure(figsize=(10, 7))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['Deaths', 'Recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=20)\nplt.xlabel('Time', size=20)\nplt.ylabel('# of Cases', size=20)\nplt.xticks(size=15)\nplt.show()","fc9f6b1e":"Country on deaths reported","f6a8ade5":"**<h2>Country Wise Data<\/h2>**","c2324334":"**<h1>Number of CoronaVirus cases prediction:<\/h1>**","338adfe1":"<h2>Patients deceased<\/h2>","b2c5e4b6":"<h1>Maps<\/h1>","248cbba1":"**<h2>Bayesian Model Prediction:<\/h2>**","6786e16b":"\n\n**<h2>Content:<\/h2>**\n\n\n\n\n\n*   Worldwide Data Analysis\n*   South Korea Data Analysis\n\n*   Number of Worldwide cases predictions\n*   Number of Worldwide deaths predictions\n\n\n\n\n\n\n\n","c43f9598":"**<h2>COVID-19 in South Korea<\/h2>**","ce6835c2":"### Information about each country (Confirmed, Deaths, Recovered)","268812cc":"<h3>In which province or state<\/h3>","d7a297a6":"In this notebook I will share insights, analytics and predictions about the virus known by the scientific name of **SARS-CoV-2** \n\n**SARS-CoV-2** causes the disease **COVID-19** (**CoV-19**) which is an infectious disease declared as a global pandemic by the World Health Organization (**WHO**) and causes a severe acute respiratory syndrome.\n\npreviously known by the provisional name 2019 novel coronavirus **(2019-nCoV)** this virus is a positive-sense single-stranded RNA virus.\n\nIt is contagious in humans and is the cause of the ongoing 2019\u201320 coronavirus outbreak, an pandemic of coronavirus disease 2019 **(COVID-19)** ","6bfea469":"**<h2>Linear Regression Model Prediction:<\/h2>**","a4e00f6b":"**<h3>Learn more:<\/h3>**\n\n\n*  World Health Organization ([WHO](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019))\n*   Centers for Disease Control and Prevention ([CDC](https:\/\/www.cdc.gov\/Coronavirus\/2019-ncov\/))\n\n*   Nature - [Link 1](https:\/\/www.nature.com\/articles\/s41569-020-0360-5) , [Link 2](https:\/\/www.nature.com\/articles\/s41586-020-2008-3) , [Link 3](https:\/\/www.nature.com\/articles\/s41586-020-2008-3\/figures\/1)\n\n\n\n","0a2faa72":"**<h2>SVM Model Prediction:<\/h2>**","185b8cbf":"**<h3>Age distribution of deceased:<\/h3>**","a6e6052f":"**<h2>Age distrubtion of deceased by gender:<\/h2>**","9d7577c2":"**<h2>Linear Regression Model Prediction:<\/h2>**","ba07d722":"**<h1>Future Forcasting<\/h1>**","93c91014":"**<h2>Deaths vs Recoveries overtime<\/h2>**","6644129e":"**<h1>Data Analysis of COVID-19 Worldwide<\/h1>**","0811985b":"<h3>Across The World<\/h3>","7625e20a":"**<h1>Number of deaths prediction:<\/h1>**","6cb90057":"**<h2>Bayesian Model Prediction:<\/h2>**","10152e24":"### **imports**","22dee829":"**<h2>SVM Model Prediction:<\/h2>**","1100bd37":"**<h2>Age distrubtion of released by gender:<\/h2>**"}}