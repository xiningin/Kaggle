{"cell_type":{"6874f665":"code","bfa6e68b":"code","e979dd24":"code","369d4a57":"code","54c6c6e2":"code","69a603b5":"code","b3afed6c":"code","03c76266":"code","4cdceb37":"code","fd36c142":"code","4752a4b0":"code","bb39c4dc":"code","fbb6586c":"code","a17ea551":"code","320e558a":"code","cbc768d8":"code","150d01af":"code","d47d6507":"code","963eb69b":"code","a8467be6":"code","94c2721b":"code","965fe62d":"code","0c307309":"code","6f51e132":"code","4557d152":"code","b28e58e6":"code","c723274f":"code","7ca61594":"code","55b54397":"code","4f47d810":"code","32e803bc":"code","85667886":"code","b93c96fb":"code","4c0bccfa":"code","b9287609":"code","14644b79":"code","65b38822":"code","6c1291ea":"code","0fba8245":"code","23d31ad0":"code","18fdf41f":"code","cea826c5":"code","37b27d91":"code","6ec367d9":"code","eed77a81":"code","55d8ac78":"code","f335366b":"markdown","46b7c6bb":"markdown","d1dcfeb4":"markdown","91a37852":"markdown","dfd69c61":"markdown","60f5ba6d":"markdown","1059cc98":"markdown","fe6b9e03":"markdown","6f454708":"markdown","9036d722":"markdown","e5385a64":"markdown","37f2439f":"markdown","b1a64b6f":"markdown","9668522d":"markdown","5c4360c9":"markdown","fa1ab4bd":"markdown","a2508eed":"markdown","ddcea840":"markdown","cdf7d08a":"markdown","7f8008d6":"markdown","5c00b2c3":"markdown","f7ed1250":"markdown","0d485689":"markdown","c5c455f5":"markdown","5389a0d1":"markdown","151cb4ae":"markdown","137ef4c5":"markdown","1878575a":"markdown","f0c6b95d":"markdown","bd434c3f":"markdown","433a381a":"markdown"},"source":{"6874f665":"# import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","bfa6e68b":"# read dataset\ndf = pd.read_csv('..\/input\/automobile-dataset\/Automobile_data.csv')\ndf.head()","e979dd24":"df.shape","369d4a57":"df.info()","54c6c6e2":"corr = df.corr() # correlation map\nfig, ax = plt.subplots(figsize=(20,20))\nax = sns.heatmap(corr, annot=True, cmap= 'vlag_r', center = 0)","69a603b5":"pd.to_numeric(df['normalized-losses'], errors='coerce').isnull().sum()","b3afed6c":"df[df['normalized-losses'] == '?']","03c76266":"df['normalized-losses'] = pd.to_numeric(df['normalized-losses'], errors='coerce')","4cdceb37":"df['normalized-losses'].value_counts()","fd36c142":"normalized_losses_mean = df['normalized-losses'].mean()\nnormalized_losses_mean","4752a4b0":"df['normalized-losses'].fillna(normalized_losses_mean, inplace = True)","bb39c4dc":"df['normalized-losses'].isnull().sum() # Check","fbb6586c":"df['num-of-doors'].value_counts()","a17ea551":"df['num-of-doors'].replace('four', 4, inplace = True)\ndf['num-of-doors'].replace('two', 2, inplace = True)\ndf['num-of-doors'] = pd.to_numeric(df['num-of-doors'], errors='coerce')\n\ndf['num-of-doors'].value_counts()","320e558a":"df['num-of-doors'].isnull().sum()","cbc768d8":"# Dropping the 2 null values\ndf.dropna(inplace = True)","150d01af":"df['num-of-doors'].isnull().sum()","d47d6507":"df['peak-rpm'].unique()","963eb69b":"pd.to_numeric(df['peak-rpm'], errors='coerce').isnull().sum()","a8467be6":"df.drop(df[pd.to_numeric(df['peak-rpm'], errors='coerce').isnull()].index, inplace= True)","94c2721b":"pd.to_numeric(df['price'], errors= 'coerce').isnull().sum()","965fe62d":"df.drop(df[pd.to_numeric(df['price'], errors='coerce').isnull()].index, inplace= True)","0c307309":"pd.to_numeric(df['bore'], errors= 'coerce').isnull().sum()","6f51e132":"df.drop(df[pd.to_numeric(df['bore'], errors='coerce').isnull()].index, inplace= True)","4557d152":"pd.to_numeric(df['stroke'], errors= 'coerce').isnull().sum()","b28e58e6":"df[['price', 'horsepower', 'peak-rpm', 'num-of-doors']] = df[['price', 'horsepower', 'peak-rpm', 'num-of-doors']].astype(int)\ndf[['bore', 'stroke', 'normalized-losses']] = df[['bore', 'stroke', 'normalized-losses']].astype(float)","c723274f":"df.info()","7ca61594":"plt.figure(figsize=[10,10])\nplt.subplot(3,2,1)\ndf.boxplot(column=['city-mpg'])\nplt.subplot(3,2,2)\ndf.boxplot(column=['curb-weight'])\nplt.subplot(3,2,3)\ndf.boxplot(column=['symboling'])\nplt.subplot(3,2,4)\ndf.boxplot(column=['price'])\nplt.subplot(3,2,5)\ndf.boxplot(column=['bore'])\nplt.subplot(3,2,6)\ndf.boxplot(column=['wheel-base'])\n;","55b54397":"df.describe()","4f47d810":"plt.figure(figsize=[12,8])\nplt.subplot(2,2,1)\nbin_edges = np.arange(5000, 50000+1000, 1000)\nplt.hist(data=df, x='price', bins = bin_edges)\nplt.xlabel('price')\nplt.subplot(2,2,2)\nbin_edges = np.arange(5, 60+3, 3)\nplt.hist(data=df, x='city-mpg', bins = bin_edges)\nplt.xlabel('city-mpg')\nplt.subplot(2,2,3)\nbin_edges = np.arange(5, 60+3, 3)\nplt.hist(data=df, x='highway-mpg', bins = bin_edges)\nplt.xlabel('highway-mpg')\nplt.subplot(2,2,4)\nbin_edges = np.arange(30, 300+10, 10)\nplt.hist(data=df, x='horsepower', bins = bin_edges)\nplt.xlabel('horsepower');","32e803bc":"base_color = sns.color_palette()[0]\nplt.figure(figsize=[20,5])\norder = df.groupby('make').price.mean().sort_values(ascending = False).index\nsns.barplot(data= df , x='make', y='price', color=base_color, order= order)\nplt.xticks(rotation = 30)\n;","85667886":"df.head()","b93c96fb":"plt.figure(figsize=[20,15])\nplt.subplot(2,2,1)\nsns.regplot(data=df, x='horsepower', y='price')\nplt.subplot(2,2,2)\nsns.regplot(data=df, x='engine-size', y='price')\nplt.subplot(2,2,3)\nsns.regplot(data=df, x='curb-weight', y='price')\nplt.subplot(2,2,4)\nsns.regplot(data=df, x='width', y='price');","4c0bccfa":"df_new = df","b9287609":"df_new['body-style'].value_counts()","14644b79":"# We can select more or less\ndummies_body = pd.get_dummies(df_new['body-style'], drop_first=True)\ndummies_make = pd.get_dummies(df_new['make'], drop_first=True)\ndummies_wheels = pd.get_dummies(df_new['drive-wheels'], drop_first=True) \n","65b38822":"df_new = df_new.join(dummies_body).join(dummies_make).join(dummies_wheels)\ndf_new.head()","6c1291ea":"import statsmodels.api as sm\nfrom patsy import dmatrices\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\ndf['intercept'] = 1\ndf.rename(columns={'curb-weight' : 'curb_weight', 'engine-size' : 'engine_size', 'city-mpg':'city_mpg',\n                    'highway-mpg':'highway_mpg'}, inplace = True) # for some reason VIF check doesn't work on columns with `-` inbetween\ndf.head()","0fba8245":"y, X = dmatrices('price~width+curb_weight+engine_size+horsepower+city_mpg+highway_mpg', df, return_type = 'dataframe')\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif[\"features\"] = X.columns\nvif.round(1)","23d31ad0":"y, X = dmatrices('price~width+curb_weight+engine_size+horsepower+city_mpg', df, return_type = 'dataframe')\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif[\"features\"] = X.columns\nvif.round(1)","18fdf41f":"reg_m = sm.OLS(df['price'], df[['intercept', 'width', 'curb_weight', 'engine_size', 'horsepower', 'city_mpg']])\nres = reg_m.fit()\nres.summary()","cea826c5":"reg_m = sm.OLS(df['price'], df[['intercept', 'width', 'engine_size', 'horsepower']])\nres = reg_m.fit()\nres.summary()","37b27d91":"pred_price = -59020 + (df.width * 818.5) + (df.engine_size * 106) + (df.horsepower * 46.3)","6ec367d9":"df_new.head()","eed77a81":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n#features = df_new['width', 'engine-size', 'horsepower']\nX = df_new[['width', 'engine-size', 'horsepower', 'wheel-base','curb-weight','bore',\n            'hardtop',\n            'hatchback',\t'sedan',\t'wagon',\t'audi',\t'bmw',\t'chevrolet',\t'dodge',\t'honda',\n            'isuzu',\t'jaguar',\t'mazda',\t'mercedes-benz',\t'mercury',\t'mitsubishi',\t'nissan',\n            'peugot',\t'plymouth',\t'porsche',\t'saab',\t'subaru',\t'toyota',\t'volkswagen',\t'volvo',\n            'fwd',\t'rwd',]]\ny = df_new['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nregr = LinearRegression()\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\nprint('Mean Root squared error: %.2f'% np.sqrt(mean_squared_error(y_test, y_pred)))\nprint('R2: %.2f'% r2_score(y_test, y_pred))\nprint('Mean Absolute Error: %.2f' % mean_absolute_error(y_test, y_pred))","55d8ac78":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=300, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)\nprint('Mean Root squared error: %.2f'% np.sqrt(mean_squared_error(y_test, y_pred)))\nprint('R2: %.2f'% r2_score(y_test, y_pred))\nprint('Mean Absolute Error: %.2f' % mean_absolute_error(y_test, y_pred))","f335366b":"All VIFs are below 10, which means that those variables are not correlated to each other and we can use them all.","46b7c6bb":"> Dataset was limited in number of rows, thus the outliers were kept.  \n> We dropped 12 records total.  \n> We wished to estimate the normalized losses but it had many NAN values\n","d1dcfeb4":"# Exploring Data","91a37852":"> What are the features affecting the price of the car?\n","dfd69c61":"## Questions:\n\n\n---\n\n\nWhat questions we wish to ask?","60f5ba6d":"#### Multicolinearity Check","1059cc98":"**From the previous heat map it is shown that there are correlation between some features like :**\n>1. wheel-base &\n>> a. length\\\n>> b. width\\\n>> c. curb-weight\n> 2. length &\n>> a. width\\\n>> b. curb-weight\n> 3. width & \n>> a. curb-weight  \n>> b. engine-size\n> 4. engine-size &\n>> a. curb-weight  \n> 5. highway-mpg &\n>> a. city-mpg\\\n>> b. curb-weight  \n>> c. length\n> 6. Price &\n>> Width\\\n>> Curb-weight\\\n>> Engine-size\\\n>> Horsepower","fe6b9e03":"## The data set is in https:\/\/www.kaggle.com\/toramky\/automobile-dataset. <br>`symboling` refers to the risk associated with this car relative to its set.<br> `normalized-losses` is the average loss per car per year. ","6f454708":"### Trying out with modeling with Machine Learning","9036d722":"Dropping the non numerical","e5385a64":"As excepted city_mpg and highway_mpg are dependant varaibles. Deleting `highway_mpg` and try the check again","37f2439f":"We Could fill the null values with the column mean","b1a64b6f":"We got a good model with all variables statistically significant except the `curb_weight` and `city_mpg`.  \nTrying again without the `curb_weight` nor `city_mpg` variabale:  \n","9668522d":"## Cleaning num-of-doors","5c4360c9":"# Encoding some categorical Features\n\n--------","fa1ab4bd":"Price seems to be right skewed with too many outliers.","a2508eed":"From exploratory part of the analysis we found the price is most afftect with the following variables:\n> Width\\\n> Curb-weight\\\n> Engine-size\\\n> Horsepower  \n> city-mpg  \n> highway-mpg","ddcea840":"##Other numerical columns that should be treated `peak-rpm`, `horsepower`, `bore`, `stroke` and `price`","cdf7d08a":"## Question#1 What are the features affecting the price of the car?","7f8008d6":"#Data Cleaning \n\n---\n\n","5c00b2c3":"# Sci-Kit Learn Linear Regression using the previous numerical features + categorical features","f7ed1250":"Changing data type for qualitative columns","0d485689":"## Looking for missing data in normalized-losses column","c5c455f5":"Using RandomForestRessor with same features","5389a0d1":"# Limitation","151cb4ae":"## Encoding the body-style feature","137ef4c5":"Dropping the records with missing prices","1878575a":"##Checking outliers for numerical variables","f0c6b95d":"Adding a correlation heat map to check if there are relations between features","bd434c3f":"# Introdction\n\n\n","433a381a":"### Building Linear Regression Model between the above models"}}