{"cell_type":{"d75663ee":"code","1f343225":"code","fe7215d7":"code","52058db8":"code","d371b36f":"code","d5465510":"code","9f0c45b3":"code","5d47eb8f":"code","cab2714a":"code","82e9be45":"code","c6180054":"code","7d7c889f":"code","09ad4890":"code","50b9f172":"code","03cb0240":"code","bff38336":"code","060abc04":"code","dad52bdc":"code","bcdd7c0e":"code","21d083a0":"code","68ae972c":"code","8aa6b6f6":"code","d99557ae":"code","15bf7f72":"code","93e67346":"code","a2b5dc33":"code","606aac27":"code","c35c9fe9":"code","405efcda":"code","b368c83d":"code","f9c92cf4":"code","440a3a2a":"code","35fb6dc2":"code","5f29b1db":"code","70659d95":"code","c142dadc":"code","5e54fa5e":"code","31a06ada":"code","dccc524f":"code","7a4fab5e":"code","0fc676ce":"code","fb38ddd8":"code","5bf4ba72":"code","d5ebb401":"code","b7e8238a":"code","18648dae":"code","e65c36da":"code","dff71e4e":"code","760474f8":"code","d37e3f28":"code","584a92d0":"code","255da113":"code","a80e5fbc":"code","b898bc7a":"code","972d53f7":"code","3564393f":"code","53c734d0":"code","456f75fc":"code","4e55d660":"code","03daa616":"code","d93dba1b":"code","387b0f23":"code","1cd3392e":"code","3522c45b":"code","4bcc9e3a":"code","1b38084d":"code","8fb8e737":"code","6159acfc":"code","5c6ce064":"code","fbbd9e80":"code","21cde933":"code","04acc431":"code","b51670be":"code","6696aafa":"code","194a2e37":"code","b97bd020":"code","b1c0e94c":"code","5a2d498f":"code","b9f04fe7":"code","36f90e46":"code","b9bf8be1":"code","b83373c2":"code","728eb738":"code","bb2b6853":"code","56711b81":"code","8c1db695":"code","eff21c6c":"code","64208926":"code","4468a141":"code","bf33e2db":"code","362be53b":"code","1ed7329d":"code","6980e19c":"code","5459cc4b":"code","d8b2db27":"code","c4078dda":"code","18a8b042":"code","5511119a":"code","c3251f08":"code","1131a275":"code","1a04cf2d":"code","5750fb06":"code","f6a7c231":"code","860aef82":"code","de9ba5fd":"code","8bd5ae80":"code","b23c8858":"code","1ffe25f7":"code","24d95e34":"code","92d04666":"code","9f7b8e17":"code","b03948b6":"code","a72fae2a":"code","afcab577":"code","bac37679":"code","2da16012":"code","53aa85f6":"code","09b3e0ca":"markdown"},"source":{"d75663ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1f343225":"path = '\/kaggle\/input\/home-data-for-ml-course\/train.csv'\npath2 = '\/kaggle\/input\/home-data-for-ml-course\/test.csv'\ntrain = pd.read_csv(path,index_col='Id')\ntest = pd.read_csv(path2,index_col='Id')\nall = pd.concat([train,test])\nall","fe7215d7":"with_str = {}\nwith_nan = {}\nfor each in all.columns:\n    tp = all[each].dtype\n    a = all[each].isnull().sum()\n    if a > 0:\n        with_nan[each] = a\n    if tp == 'object' and each in list(with_nan.keys()):\n        with_str[each] = 'with '+str(a)+'nan'\n    if tp == 'object' and each not in list(with_nan.keys()):\n        with_str[each] = 'complete'","52058db8":"print(all.dtypes)\n","d371b36f":"sns.distplot(all.SalePrice,kde=False);","d5465510":"plt.figure(figsize=(16,10))\nsns.heatmap(train[train.corr().iloc[-1][train.corr().iloc[-1]>0.5].index].corr(),annot=True,cmap=\"YlGnBu\")","9f0c45b3":"plt.figure(figsize=(12,12))\nsns.catplot(x=\"OverallQual\", y=\"SalePrice\", kind=\"box\", data=train);","5d47eb8f":"#plt.figure(figsize=(26,15))\nsns.regplot(x=\"GrLivArea\", y=\"SalePrice\", data=train);","cab2714a":"to_be_check = train[(train.GrLivArea > 4500) & (train.SalePrice < 300000)]#.index.tolist()","82e9be45":"to_be_check = to_be_check.append(train[(train.OverallQual == 4) & (train.SalePrice > 200000)])","c6180054":"all['PoolQC'][all.PoolQC.isnull()] = 'None'","7d7c889f":"dict1 = {'None' : 0, 'Po': 1, 'Fa' : 2, 'TA' : 3, 'Gd' : 4, 'Ex' : 5}\ndict1['None']\nall['PoolQC'] = all['PoolQC'].apply(lambda x:dict1[x])","09ad4890":"all.groupby('PoolQC').PoolQC.count()","50b9f172":"all[(all['PoolQC']==0) & (all['PoolArea'] > 0)].loc[:,['PoolArea', 'PoolQC', 'OverallQual']]","03cb0240":"all.PoolQC[2421] = 2\nall.PoolQC[2504] = 3\nall.PoolQC[2600] = 2","bff38336":"all['MiscFeature'][all.MiscFeature.isnull()] = 'None'","060abc04":"sns.catplot(x=\"MiscFeature\", y=\"SalePrice\", kind=\"bar\", data=all);","dad52bdc":"all['Alley'][all.Alley.isnull()]='None'","bcdd7c0e":"sns.catplot(x=\"Alley\", y=\"SalePrice\", kind=\"bar\", data=all);","21d083a0":"all['Fence'][all.Fence.isnull()]='None'","68ae972c":"all.groupby('Fence').agg({'SalePrice':'median','Fence':'count'})#pd.DataFrame({'Fence_num':all[all.SalePrice.notnull()].groupby('Fence').Fence.count(),'SalePrice_median':all[all.SalePrice.notnull()].groupby('Fence').SalePrice.median()})   ","8aa6b6f6":"all.FireplaceQu[all.FireplaceQu.isnull()]='None'","d99557ae":"all['FireplaceQu'] = all['FireplaceQu'].apply(lambda x:dict1[x])","15bf7f72":"all.groupby('FireplaceQu').FireplaceQu.count()","93e67346":"plt.figure(figsize=(15,10))\n\nsns.catplot(x=\"Neighborhood\", y=\"LotFrontage\", kind=\"bar\", data=all).set_xticklabels(rotation=70)","a2b5dc33":"medians = all.groupby('Neighborhood').LotFrontage.median()#.loc['Blmngtn']\nfor i in all[all.LotFrontage.isnull()].index:\n    all.loc[i,'LotFrontage'] = medians.loc[all.iloc[i].Neighborhood]\n    ","606aac27":"all.LotShape = all.LotShape.apply(lambda x:{'IR3':0, 'IR2':1, 'IR1':2, 'Reg':3}[x])","c35c9fe9":"all.groupby('LotShape').LotShape.count()","405efcda":"all.GarageYrBlt[all.GarageYrBlt.isnull()] = all.YearBuilt[all.GarageYrBlt.isnull()]","b368c83d":"len(all[all.GarageType.isnull()&all.GarageQual.isnull()&all.GarageFinish.isnull()])","f9c92cf4":"all[all.GarageType.notnull()&all.GarageQual.isnull()&all.GarageFinish.isnull()].index","440a3a2a":"all.loc[[2127,2577]][['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]","35fb6dc2":"all.groupby('GarageCond').GarageCond.count()","5f29b1db":"all.groupby('GarageQual').GarageCond.count()","70659d95":"all.groupby('GarageFinish').GarageCond.count()","c142dadc":"all.loc[2127,'GarageCond'] = 'TA'\nall.loc[2127,'GarageQual'] = 'TA'\nall.loc[2127,'GarageFinish'] = 'Unf'","5e54fa5e":"all.loc[[2127,2577]][['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]","31a06ada":"all.loc[2577,'GarageCars'] = 0\nall.loc[2577,'GarageArea'] = 0\nall.loc[2577,'GarageType'] = 'No Garage'","dccc524f":"all.loc[[2127,2577]][['GarageCars', 'GarageArea', 'GarageType', 'GarageCond', 'GarageQual', 'GarageFinish']]","7a4fab5e":"all.GarageType[all.GarageType.isnull()]='No Garage'","0fc676ce":"all.GarageFinish[all.GarageFinish.isnull()]='None'","fb38ddd8":"all.GarageFinish = all.GarageFinish.apply(lambda x:{'None':0, 'Unf':1, 'RFn':2, 'Fin':3}[x])","5bf4ba72":"all.groupby('GarageFinish').GarageFinish.count()","d5ebb401":"all.GarageQual[all.GarageQual.isnull()]='None'","b7e8238a":"all.GarageQual = all.GarageQual.apply(lambda x: dict1[x])","18648dae":"all.groupby('GarageQual').GarageQual.count()","e65c36da":"all.GarageCond[all.GarageCond.isnull()]='None'","dff71e4e":"all.GarageCond = all.GarageCond.apply(lambda x: dict1[x])","760474f8":"all.groupby('GarageCond').GarageCond.count()","d37e3f28":"with_nan","584a92d0":"all[all.BsmtFinType1.notnull() & (all.BsmtQual.isnull() | all.BsmtCond.isnull() | all.BsmtExposure.isnull() | all.BsmtFinType2.isnull())][['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']]","255da113":"all[all.BsmtFinType1.isnull()].BsmtFullBath.unique()","a80e5fbc":"all.groupby('BsmtFinType2').BsmtFinType2.count()","b898bc7a":"all.groupby('BsmtExposure').BsmtExposure.count()","972d53f7":"all.groupby('BsmtCond').BsmtCond.count()","3564393f":"all.groupby('BsmtQual').BsmtQual.count()","53c734d0":"all.loc[333,'BsmtFinType2' ] = 'Unf'\nall.loc[[949,1488,2349],'BsmtExposure' ] = 'No'\nall.loc[[2186,2041,2525],'BsmtCond' ] = 'TA'\nall.loc[[2218,2219],'BsmtQual' ] = 'TA'","456f75fc":"all[all.BsmtFinType1.notnull() & (all.BsmtQual.isnull() | all.BsmtCond.isnull() | all.BsmtExposure.isnull() | all.BsmtFinType2.isnull())][['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']]","4e55d660":"all.BsmtQual[all.BsmtQual.isnull()] = 'None'\nall.BsmtExposure[all.BsmtExposure.isnull()] = 'None'\nall.BsmtCond[all.BsmtCond.isnull()] = 'None'\nall.BsmtFinType1[all.BsmtFinType1.isnull()] = 'None'\nall.BsmtFinType2[all.BsmtFinType2.isnull()] = 'None'","03daa616":"all.BsmtQual = all.BsmtQual.apply(lambda x:dict1[x])\nall.BsmtCond = all.BsmtCond.apply(lambda x:dict1[x])\nall.BsmtExposure = all.BsmtExposure.apply(lambda x:{'None':0, 'No':1, 'Mn':2, 'Av':3, 'Gd':4}[x])\nall.BsmtFinType1 = all.BsmtFinType1.apply(lambda x:{'None':0, 'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ':4, 'ALQ':5, 'GLQ':6}[x])\nall.BsmtFinType2 = all.BsmtFinType2.apply(lambda x:{'None':0, 'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ':4, 'ALQ':5, 'GLQ':6}[x])","d93dba1b":"\nall[all.BsmtQual.isnull() | (all.BsmtFullBath.isnull() | all.BsmtHalfBath.isnull() | all.BsmtFinSF1.isnull() | all.BsmtFinSF2.isnull() | all.BsmtUnfSF.isnull() |all.TotalBsmtSF.isnull() )][['BsmtQual', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]","387b0f23":"all.loc[[2189,2121],['BsmtQual', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]=0","1cd3392e":"all.loc[[2121,2189]][['BsmtQual', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']]","3522c45b":"len(all[all.MasVnrType.isnull()&all.MasVnrArea.isnull()])","4bcc9e3a":"all[all.MasVnrType.isnull() & all.MasVnrArea.notnull()][['MasVnrType' , 'MasVnrArea']]","1b38084d":"all.groupby('MasVnrType').MasVnrType.count()","8fb8e737":"all.loc[2611,'MasVnrType']='BrkFace'","6159acfc":"all[all.MasVnrType.isnull() & all.MasVnrArea.notnull()][['MasVnrType' , 'MasVnrArea']]","5c6ce064":"all.MasVnrType[all.MasVnrType.isnull()] = 'None'","fbbd9e80":"all.MasVnrArea[all.MasVnrArea.isnull()] = 0\nall.groupby('MasVnrArea').MasVnrArea.count()","21cde933":"def F_T(all,name,sth='None',dict1=None,mode=False):\n    if mode==False:\n        all[name][all[name].isnull()]=sth\n        print(all.groupby(name)[name].count())\n    if mode == True:\n        all[name][all[name].isnull()]=all.groupby(name)[name].count().idxmax()\n    if dict1!=None:\n        all[name] = all[name].apply(lambda x:dict1[x])\n    return all.groupby(name)[name].count()","04acc431":"F_T(all,'MasVnrType',dict1={'None':0, 'BrkCmn':0, 'BrkFace':1, 'Stone':2})","b51670be":"all.groupby('MasVnrType')['MasVnrType'].count()","6696aafa":"F_T(all,'MSZoning',mode=True)","194a2e37":"all[all['KitchenQual'].isnull()][['KitchenQual','KitchenAbvGr']]","b97bd020":"all[all['KitchenAbvGr']==0][['KitchenQual','KitchenAbvGr']]","b1c0e94c":"def assign(all,dict1={},value=[]):\n    #dict1={name:[id,id,id]}\n    #value=[a,b,c]\n    for i,each in enumerate(dict1.items()):\n        all.loc[each[1],[each[0]]] = value[i]","5a2d498f":"assign(all,{'KitchenAbvGr':[955,2588,2860]},[1])\nF_T(all,'KitchenQual',mode=True,dict1=dict1)\nall.Utilities = None\nF_T(all,dict1={'Sal':0, 'Sev':1, 'Maj2':2, 'Maj1':3, 'Mod':4, 'Min2':5, 'Min1':6, 'Typ':7},name='Functional',mode=True)\nF_T(all,name='Exterior1st',mode=True)\nF_T(all,name='Exterior2nd',mode=True)\nF_T(all,name='ExterQual',dict1=dict1)\nF_T(all,name='ExterCond',dict1=dict1)\nF_T(all,name='Electrical',mode=True)\nF_T(all,name='SaleType',mode=True)","b9f04fe7":"F_T(all,name='HeatingQC',dict1=dict1)\nF_T(all,name='CentralAir',dict1={'N':0, 'Y':1})\nF_T(all,name='LandSlope',dict1={'Sev':0, 'Mod':1, 'Gtl':2})\nF_T(all,name='Street',dict1={'Grvl':0, 'Pave':1})\nF_T(all,name='PavedDrive',dict1={'N':0, 'P':1, 'Y':2})","36f90e46":"all.YrSold = all.YrSold.apply(lambda x:str(x))\nall.MoSold = all.MoSold.apply(lambda x:str(x))","b9bf8be1":"sns.catplot(x='YrSold', y=\"SalePrice\", kind=\"bar\", data=all);","b83373c2":"sns.catplot(x='MoSold', y=\"SalePrice\", kind=\"bar\", data=all);","728eb738":"dict2={'20':'1 story 1946+', '30':'1 story 1945-', '40':'1 story unf attic', '45':'1,5 story unf', '50':'1,5 story fin', '60':'2 story 1946+', '70':'2 story 1945-', '75':'2,5 story all ages', '80':'split\/multi level', '85':'split foyer', '90':'duplex all style\/age', '120':'1 story PUD 1946+', '150':'1,5 story PUD all', '160':'2 story PUD 1946+', '180':'PUD multilevel', '190':'2 family conversion'}","bb2b6853":"all.MSSubClass = all.MSSubClass.apply(lambda x:str(x))\nF_T(all,name='MSSubClass',dict1=dict2)","56711b81":"plt.figure(figsize=(16,10))\nsns.heatmap(train[train.corr().iloc[-1][train.corr().iloc[-1]>0.5].index].corr(),annot=True,cmap=\"YlGnBu\")","8c1db695":"# from sklearn.ensemble import RandomForestRegressor\n# model = RandomForestRegressor(n_estimators=100, criterion='mse')\n# model.fit(train.iloc[:,:-1],train.SalePrice)\n# pre = model.predict","eff21c6c":"train.iloc[:,:-1]","64208926":"plt.figure(figsize=(20,10))\nplt.subplot(2,4,1)\nsns.kdeplot(all.GrLivArea)\nplt.subplot(2,4,2)\nsns.distplot(all.TotRmsAbvGrd,kde=False)\nplt.subplot(2,4,3)\nsns.kdeplot(all['1stFlrSF'])\nplt.subplot(2,4,4)\nsns.kdeplot(all['2ndFlrSF'])\nplt.subplot(2,4,5)\nsns.kdeplot(all.TotalBsmtSF)\nplt.subplot(2,4,6)\nsns.distplot(all.LotArea,kde=False)\nplt.subplot(2,4,7)\nsns.kdeplot(all.LotFrontage)\nplt.subplot(2,4,8)\nsns.distplot(all.LowQualFinSF,kde=False)\n","4468a141":"all.loc[:,['GrLivArea', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF']]#\u540e\u4e09\u4e2a\u52a0\u548c\u7b49\u4e8e\u7b2c\u4e00\u4e2a","bf33e2db":"plt.figure(figsize=(20,10))\nsns.catplot(x=\"Neighborhood\", kind=\"count\", palette=\"ch:.25\", data=all).set_xticklabels(rotation=60)","362be53b":"plt.subplot(3,3,1)\nsns.distplot(all.OverallQual,kde=False)\nplt.subplot(3,3,2)\nsns.distplot(all.ExterQual,kde=False)\nplt.subplot(3,3,3)\nsns.distplot(all.BsmtQual,kde=False)\nplt.subplot(3,3,4)\nsns.distplot(all.KitchenQual,kde=False)\nplt.subplot(3,3,5)\nsns.distplot(all.GarageQual,kde=False)\nplt.subplot(3,3,6)\nsns.distplot(all.FireplaceQu,kde=False)\nplt.subplot(3,3,7)\nsns.catplot(x=\"PoolQC\", kind=\"count\", palette=\"ch:.25\", data=all)\nplt.show()","1ed7329d":"sns.catplot(x=\"MSSubClass\", kind=\"count\", palette=\"ch:.25\", data=all).set_xticklabels(rotation=60)","6980e19c":"sns.catplot(x=\"MSSubClass\", y=\"SalePrice\", kind=\"bar\", data=all).set_xticklabels(rotation=60)","5459cc4b":"# from sklearn.ensamble import RandomForest\n# from sklearn import shffle\n# model1 = RandomForest(n_estmator=100,metrics='mse')\n# model2=RandomForest(n_estmator=100,metrics='mse')\n# for each in all.columns:\n#     data1=train.copy()\n#     data2=test.copy()\n#     y=data1.SalePrice\n#     x=data1.drop(['SalePrice'],axis=1)\n#     a=data2\n#     model1.fit(x,y)\n#     shuffle(x[each])\n#     model2.fit(x,y)\n#     model1.predict","d8b2db27":"\nall['TotBathrooms'] =  all.FullBath+ all.HalfBath*0.5 +all.BsmtFullBath+ all.BsmtHalfBath*0.5","c4078dda":"all","18a8b042":"sns.regplot(x=all.TotBathrooms,y=all.SalePrice)","5511119a":"sns.catplot(x=\"TotBathrooms\", kind=\"count\", palette=\"ch:.25\", data=all)","c3251f08":"all.YearRemodAdd.unique()","1131a275":"all.loc[:,['TotBathrooms','SalePrice']].corr()","1a04cf2d":"all['Remod'] = (all.YearBuilt==all.YearRemodAdd).apply(lambda x:int(x))","5750fb06":"all['Age'] = all.YrSold.copy().apply(lambda x:int(x))-all.YearRemodAdd","f6a7c231":"plt.figure(figsize=(20,10))\nsns.regplot(x=all.Age,y=all.SalePrice)","860aef82":"all.loc[:,['Age','SalePrice']].corr()","de9ba5fd":"sns.catplot(x=\"Remod\", y=\"SalePrice\", kind=\"bar\", data=all)","8bd5ae80":"all['IsNew'] = (all.YrSold.copy().apply(lambda x:int(x))==all.YearBuilt).apply(lambda x:int(x))","b23c8858":"all.YearBuilt.dtype","1ffe25f7":"sns.catplot(x=\"IsNew\", y=\"SalePrice\", kind=\"bar\", data=all)","24d95e34":"order=list(all.groupby('Neighborhood').SalePrice.median().sort_values().index)\nsns.catplot(x=\"Neighborhood\", y=\"SalePrice\", kind=\"bar\", data=all,order=order).set_xticklabels(rotation=70)","92d04666":"order","9f7b8e17":"all['NeighRich']=0\nall['NeighRich'][all.loc[:,'Neighborhood'].apply(lambda x:x in ['StoneBr', 'NridgHt', 'NoRidge'])]=4\nall['NeighRich'][all.loc[:,'Neighborhood'].apply(lambda x:x in ['OldTown', 'Edwards', 'BrkSide', 'Sawyer', 'Blueste', 'SWISU', 'NAmes', 'NPkVill', 'Mitchel'])]=1\nall['NeighRich'][all.loc[:,'Neighborhood'].apply(lambda x:x in ['SawyerW', 'Gilbert', 'NWAmes', 'Blmngtn', 'CollgCr', 'ClearCr', 'Crawfor'])]=2\nall['NeighRich'][all.loc[:,'Neighborhood'].apply(lambda x:x in ['Veenker', 'Somerst', 'Timber'])]=3\nall['NeighRich'][all.loc[:,'Neighborhood'].apply(lambda x:x in ['MeadowV', 'IDOTRR', 'BrDale'])] = 0","b03948b6":"all['NeighRich']","a72fae2a":"plt.figure(figsize=(20,10))\nall['TotalSqFeet'] = all.GrLivArea + all.TotalBsmtSF\nsns.regplot(x='TotalSqFeet',y = 'SalePrice',data=all)","afcab577":"all.loc[:,['TotalSqFeet','SalePrice']].corr()","bac37679":"all= all.drop(['YearRemodAdd', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'TotalBsmtSF', 'BsmtFinSF1'],axis=1)","2da16012":"all=all.drop([524,1299],axis=0)","53aa85f6":"all=all.drop(['Utilities'],axis=1)","09b3e0ca":"1. **\u7f16\u7801\u65b9\u5f0f**"}}