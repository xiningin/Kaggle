{"cell_type":{"0ab56fbe":"code","4556148f":"code","02b8448e":"code","acc75e10":"code","1f629bb5":"code","3ae032a7":"code","2b557b3d":"code","df4f069b":"code","bcb57751":"code","88c6b18d":"code","612150e8":"code","15d67607":"code","f7d95b4d":"code","237b5345":"code","6beb21d7":"code","932eeed0":"code","6ae026c9":"code","4a18c6c5":"code","3f9772d7":"code","60537f14":"code","2818bd65":"code","f79c190e":"code","00d337d4":"code","f65900f7":"code","f153bb8b":"code","89adba16":"markdown","d8f2366b":"markdown","ab579249":"markdown","509b346e":"markdown","dc56a768":"markdown","2ab5486c":"markdown","7fa08ab0":"markdown","f558773f":"markdown","74495939":"markdown","13479a99":"markdown","e7bd77ab":"markdown","ea472a56":"markdown","85102b50":"markdown","58007c68":"markdown"},"source":{"0ab56fbe":"!pip install -Uqq fastai","4556148f":"from fastai.vision.all import *","02b8448e":"path = untar_data(URLs.FLOWERS)","acc75e10":"f_train = path\/'train.txt'\nf_valid = path\/'valid.txt'\nf_test = path\/'test.txt'","1f629bb5":"f_train,f_valid,f_test","3ae032a7":"train_df = pd.read_csv(f_train, delimiter='\\n', names=['flower'])\nvalid_df = pd.read_csv(f_valid, delimiter='\\n', names=['flower'])\ntrain_df = pd.concat([train_df, valid_df], ignore_index=True)\ntrain_list = train_df.values.tolist()\ntest_df = pd.read_csv(f_test, delimiter='\\n', names=['flower'])\ntest_list = test_df.values.tolist()","2b557b3d":"l_train = [(re.findall('\\d', str(f))) for f in train_list]\nl_test = [(re.findall('\\d', str(f))) for f in test_list]","df4f069b":"train_path = [''.join(i[:5]) for i in l_train]\ntrain_labels = [''.join(i[5:]) for i in l_train]\ntest_path = [''.join(i[:5]) for i in l_test]\ntest_labels = [''.join(i[5:]) for i in l_test]","bcb57751":"d_train = {'path': train_path, 'labels': train_labels}\nd_test = {'path': test_path, 'labels': test_labels}\ntr_df = pd.DataFrame(d_train)\ntr_df['is_valid'] = False\nte_df = pd.DataFrame(d_test)\nte_df['is_valid'] = True\ndf = pd.concat([tr_df, te_df], ignore_index=True)","88c6b18d":"df['labels'].isnull().sum()","612150e8":"labels = ['pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea', 'english marigold', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', 'globe thistle', 'snapdragon', \"colt's foot\", 'king protea', 'spear thistle', 'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily', 'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower', 'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy', 'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william', 'carnation', 'garden phlox', 'love in the mist', 'mexican aster', 'alpine sea holly', 'ruby-lipped cattleya', 'cape flower', 'great masterwort', 'siam tulip', 'lenten rose', 'barbeton daisy', 'daffodil', 'sword lily', 'poinsettia', 'bolero deep blue', 'wallflower', 'marigold', 'buttercup', 'oxeye daisy', 'common dandelion', 'petunia', 'wild pansy', 'primula', 'sunflower', 'pelargonium', 'bishop of llandaff', 'gaura', 'geranium', 'orange dahlia', 'pink-yellow dahlia?', 'cautleya spicata', 'japanese anemone', 'black-eyed susan', 'silverbush', 'californian poppy', 'osteospermum', 'spring crocus', 'bearded iris', 'windflower', 'tree poppy', 'gazania', 'azalea', 'water lily', 'rose', 'thorn apple', 'morning glory', 'passion flower', 'lotus', 'toad lily', 'anthurium', 'frangipani', 'clematis', 'hibiscus', 'columbine', 'desert-rose', 'tree mallow', 'magnolia', 'cyclamen ', 'watercress', 'canna lily', 'hippeastrum ', 'bee balm', 'ball moss', 'foxglove', 'bougainvillea', 'camellia', 'mallow', 'mexican petunia', 'bromelia', 'blanket flower', 'trumpet creeper', 'blackberry lily']\nlen(labels)","15d67607":"t_labels = pd.DataFrame(labels, columns=['flowers'])\nlabels_dict = t_labels.to_dict()['flowers']","f7d95b4d":"_df = df.copy()\n_df['label'] = _df.labels.astype(int).map(labels_dict)\n_df['images'] = _df.path.map(lambda x : path\/f'jpg\/image_{x}.jpg')\n_df = _df.drop(columns=['path','labels'])","237b5345":"_df.head(2)","6beb21d7":"dls = DataBlock(blocks= (ImageBlock, CategoryBlock),\n                get_x = ColReader(2),\n                get_y = ColReader(1),\n                splitter = ColSplitter('is_valid'),\n                item_tfms = Resize(225),\n                batch_tfms = aug_transforms()).dataloaders(_df, bs=32)","932eeed0":"dls.show_batch()","6ae026c9":"learn = cnn_learner(dls, densenet201, metrics=accuracy, cbs=ShowGraphCallback())","4a18c6c5":"learn.lr_find()","3f9772d7":"learn.fine_tune(9)","60537f14":"interp = ClassificationInterpretation.from_learner(learn)","2818bd65":"interp.plot_top_losses(8, nrows=2, figsize=(16,8))","f79c190e":"learn.export()","00d337d4":"learn_inf = load_learner('.\/export.pkl')","f65900f7":"learn_inf.dls.vocab","f153bb8b":"learn_inf.predict('..\/input\/rubylipped\/ruby-lipped-cattleya.jpg')","89adba16":"The code below separates the image path from the labels","d8f2366b":"checking for null values after concatenting the train and test dataframes","ab579249":"I downloaded a flower from the internet to test my model and the model predicted correctly.","509b346e":"The datablock API where we create our dataset and dataloader","dc56a768":"Display samples from the dataset, to have a sense of what the images look like.","2ab5486c":"Using regular expression to extract the labels and paths required by the datablock API","7fa08ab0":"The vision module will be required for this task","f558773f":"The dataset was originally divided into three - train, valid and test. However, I used the train and vaild data for training and the test data for validation. This offers more images for training, thereby making the model more robust.","74495939":"I converted the label list to a dictionary for ease of mapping with the dataframe","13479a99":"creating the train and test dataframe. I also a new column 'is_valid', this will distinquish between the train and valid data","e7bd77ab":"untar_data is a fastai function that downloads the images from the source website","ea472a56":"The cnn_learner houses the dataloader, the model, metrics and callbacks","85102b50":"Install fastai - a pytorch-based deep learning library","58007c68":"Below are the 102 labels required for this task"}}