{"cell_type":{"4eb4d0c2":"code","d5cc3f52":"code","ce0d2f4e":"code","4d5512d9":"code","c7951947":"code","da9bc14d":"code","c207410e":"code","a4012f02":"code","e5db8ff3":"code","9110bf3b":"code","a104c1a5":"code","40a5ca93":"code","898e379c":"code","c665fa48":"code","d65eaa63":"code","e717f04a":"code","53c7bf37":"code","b28d3e90":"code","7fcb393a":"code","8e36a057":"code","3d4dac5a":"code","806b968c":"markdown","a51adc9e":"markdown","07667f6f":"markdown","d02e476c":"markdown","7524ba47":"markdown","fab99cd0":"markdown"},"source":{"4eb4d0c2":"import os\n__print__ = print\ndef print(string):\n    os.system(f'echo \\\"{string}\\\"')\n    __print__(string)","d5cc3f52":"! pip install pytorch-transformers","ce0d2f4e":"from fastai.text import *\nfrom fastai.metrics import *\nfrom pytorch_transformers import RobertaTokenizer","4d5512d9":"# Creating a config object to store task specific information\nclass Config(dict):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n    \n    def set(self, key, val):\n        self[key] = val\n        setattr(self, key, val)\n        \nconfig = Config(\n    testing=False,\n    seed = 2019,\n    roberta_model_name='roberta-base', # can also be exchnaged with roberta-large \n    max_lr=1e-5,\n    epochs=1,\n    use_fp16=False,\n    bs=4, \n    max_seq_len=256, \n    num_labels = 2,\n    hidden_dropout_prob=.05,\n    hidden_size=768, # 1024 for roberta-large\n    start_tok = \"<s>\",\n    end_tok = \"<\/s>\",\n)","c7951947":"df = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")","da9bc14d":"if config.testing: df = df[:5000]\nprint(df.shape)","c207410e":"df.head()","a4012f02":"feat_cols = \"review\"\nlabel_cols = \"sentiment\"","e5db8ff3":"class FastAiRobertaTokenizer(BaseTokenizer):\n    \"\"\"Wrapper around RobertaTokenizer to be compatible with fastai\"\"\"\n    def __init__(self, tokenizer: RobertaTokenizer, max_seq_len: int=128, **kwargs): \n        self._pretrained_tokenizer = tokenizer\n        self.max_seq_len = max_seq_len \n    def __call__(self, *args, **kwargs): \n        return self \n    def tokenizer(self, t:str) -> List[str]: \n        \"\"\"Adds Roberta bos and eos tokens and limits the maximum sequence length\"\"\" \n        return [config.start_tok] + self._pretrained_tokenizer.tokenize(t)[:self.max_seq_len - 2] + [config.end_tok]","9110bf3b":"# create fastai tokenizer for roberta\nroberta_tok = RobertaTokenizer.from_pretrained(\"roberta-base\")\n\nfastai_tokenizer = Tokenizer(tok_func=FastAiRobertaTokenizer(roberta_tok, max_seq_len=config.max_seq_len), \n                             pre_rules=[], post_rules=[])","a104c1a5":"# create fastai vocabulary for roberta\npath = Path()\nroberta_tok.save_vocabulary(path)\n\nwith open('vocab.json', 'r') as f:\n    roberta_vocab_dict = json.load(f)\n    \nfastai_roberta_vocab = Vocab(list(roberta_vocab_dict.keys()))","40a5ca93":"# Setting up pre-processors\nclass RobertaTokenizeProcessor(TokenizeProcessor):\n    def __init__(self, tokenizer):\n         super().__init__(tokenizer=tokenizer, include_bos=False, include_eos=False)\n\nclass RobertaNumericalizeProcessor(NumericalizeProcessor):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, vocab=fastai_roberta_vocab, **kwargs)\n\n\ndef get_roberta_processor(tokenizer:Tokenizer=None, vocab:Vocab=None):\n    \"\"\"\n    Constructing preprocessors for Roberta\n    We remove sos and eos tokens since we add that ourselves in the tokenizer.\n    We also use a custom vocabulary to match the numericalization with the original Roberta model.\n    \"\"\"\n    return [RobertaTokenizeProcessor(tokenizer=tokenizer), NumericalizeProcessor(vocab=vocab)]","898e379c":"# Creating a Roberta specific DataBunch class\nclass RobertaDataBunch(TextDataBunch):\n    \"Create a `TextDataBunch` suitable for training Roberta\"\n    @classmethod\n    def create(cls, train_ds, valid_ds, test_ds=None, path:PathOrStr='.', bs:int=64, val_bs:int=None, pad_idx=1,\n               pad_first=True, device:torch.device=None, no_check:bool=False, backwards:bool=False, \n               dl_tfms:Optional[Collection[Callable]]=None, **dl_kwargs) -> DataBunch:\n        \"Function that transform the `datasets` in a `DataBunch` for classification. Passes `**dl_kwargs` on to `DataLoader()`\"\n        datasets = cls._init_ds(train_ds, valid_ds, test_ds)\n        val_bs = ifnone(val_bs, bs)\n        collate_fn = partial(pad_collate, pad_idx=pad_idx, pad_first=pad_first, backwards=backwards)\n        train_sampler = SortishSampler(datasets[0].x, key=lambda t: len(datasets[0][t][0].data), bs=bs)\n        train_dl = DataLoader(datasets[0], batch_size=bs, sampler=train_sampler, drop_last=True, **dl_kwargs)\n        dataloaders = [train_dl]\n        for ds in datasets[1:]:\n            lengths = [len(t) for t in ds.x.items]\n            sampler = SortSampler(ds.x, key=lengths.__getitem__)\n            dataloaders.append(DataLoader(ds, batch_size=val_bs, sampler=sampler, **dl_kwargs))\n        return cls(*dataloaders, path=path, device=device, dl_tfms=dl_tfms, collate_fn=collate_fn, no_check=no_check)","c665fa48":"class RobertaTextList(TextList):\n    _bunch = RobertaDataBunch\n    _label_cls = TextList","d65eaa63":"# loading the tokenizer and vocab processors\nprocessor = get_roberta_processor(tokenizer=fastai_tokenizer, vocab=fastai_roberta_vocab)\n\n# creating our databunch \ndata = RobertaTextList.from_df(df, \".\", cols=feat_cols, processor=processor) \\\n    .split_by_rand_pct(seed=config.seed) \\\n    .label_from_df(cols=label_cols,label_cls=CategoryList) \\\n    .databunch(bs=config.bs, pad_first=False, pad_idx=0)","e717f04a":"import torch\nimport torch.nn as nn\nfrom pytorch_transformers import RobertaModel\n\n# defining our model architecture \nclass CustomRobertaModel(nn.Module):\n    def __init__(self,num_labels=2):\n        super(CustomRobertaModel,self).__init__()\n        self.num_labels = num_labels\n        self.roberta = RobertaModel.from_pretrained(config.roberta_model_name)\n        self.dropout = nn.Dropout(config.hidden_dropout_prob)\n        self.classifier = nn.Linear(config.hidden_size, num_labels) # defining final output layer\n        \n    def forward(self, input_ids, token_type_ids=None, attention_mask=None, labels=None):\n        _ , pooled_output = self.roberta(input_ids, token_type_ids, attention_mask) # \n        logits = self.classifier(pooled_output)        \n        return logits","53c7bf37":"roberta_model = CustomRobertaModel()\n\nlearn = Learner(data, roberta_model, metrics=[accuracy])","b28d3e90":"learn.model.roberta.train() # setting roberta to train as it is in eval mode by default\nlearn.fit_one_cycle(config.epochs, max_lr=config.max_lr)","7fcb393a":"def get_preds_as_nparray(ds_type) -> np.ndarray:\n    learn.model.roberta.eval()\n    preds = learn.get_preds(ds_type)[0].detach().cpu().numpy()\n    sampler = [i for i in data.dl(ds_type).sampler]\n    reverse_sampler = np.argsort(sampler)\n    ordered_preds = preds[reverse_sampler, :]\n    pred_values = np.argmax(ordered_preds, axis=1)\n    return ordered_preds, pred_values","8e36a057":"preds, pred_values = get_preds_as_nparray(DatasetType.Valid)","3d4dac5a":"# accuracy on valid\n(pred_values == data.valid_ds.y.items).mean()","806b968c":"## Setting up the DataBunch","a51adc9e":"This notebook follows the tutorial @ https:\/\/medium.com\/@devkosal\/using-roberta-with-fastai-for-nlp-7ed3fed21f6c","07667f6f":"# Building the Model","d02e476c":"# Using RoBERTa with Fastai Tutorial ","7524ba47":"# Getting Predictions","fab99cd0":"## Setting Up the Tokenizer"}}