{"cell_type":{"a37fa7b1":"code","6a71dacb":"code","2a46c355":"code","6ade60b9":"code","6bf46885":"code","410dad8f":"code","87056c8b":"code","e50fef9b":"code","6be72f96":"code","98a245f7":"code","d1c53e0f":"code","36db3421":"code","ff91cb6d":"code","e4f721cc":"code","167bae40":"code","a71a9979":"code","4b668fd1":"code","5c5c1e2d":"code","a65dac64":"code","023a6fc0":"code","e17536e5":"code","1ac3def0":"code","67e3e1f2":"code","208d5230":"code","87accf1b":"code","12e753ef":"code","704f9eb5":"code","d5934851":"code","691296cf":"code","991849d0":"code","e8b27f4d":"code","e278055d":"code","f02b1ed2":"code","ca14d7ac":"code","e6442a22":"code","95166dc7":"code","bd744cc3":"code","6027f5ba":"markdown","5e85cf96":"markdown","091aa339":"markdown","1ede8f53":"markdown","caaf7135":"markdown","00cd5c8d":"markdown","d42ad1ca":"markdown"},"source":{"a37fa7b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, plot_confusion_matrix\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a71dacb":"data1 = pd.read_csv(\"\/kaggle\/input\/adm-2020-21-assignment-1\/train_malware.csv\")\ndata2 = pd.read_csv(\"\/kaggle\/input\/adm-2020-21-assignment-1\/train_benign.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/adm-2020-21-assignment-1\/Test_data.csv\")","2a46c355":"test.head()","6ade60b9":"test.isnull().sum() # check for null values in test","6bf46885":"# Remove null values column from test\ntest.drop(test.columns[1809], axis=1, inplace=True)","410dad8f":"# add an extra column to denote if data classifies as benign or malware\n# 1 is added to denote malware and 0 to denote benign\ndata1[\"Target\"] = \"1\"\ndata2[\"Target\"] = \"0\"","87056c8b":"data1.head()","e50fef9b":"data2.head()","6be72f96":"# append the two train dataframes after checking both have equal number of columns\ndata = data1.append(data2)","98a245f7":"data.head()","d1c53e0f":"# drop the \"FileName\" column from both train and test dataframe\ndata.drop(\"FileName\", axis=1, inplace=True)\n\nfilename = test[\"FileName\"] # stored for future to create final submission dataframe\ntest.drop(\"FileName\", axis=1, inplace=True)\ndata.head()","36db3421":"data.info()","ff91cb6d":"cols_with_0 = data.columns[(data == 0).all()] # Store all columns that have only 0 values","e4f721cc":"cols_with_0","167bae40":"# delete the columns containing only 0 values\ndata.drop(cols_with_0, axis=1, inplace=True)\ntest.drop(cols_with_0, axis=1, inplace=True)","a71a9979":"data.shape","4b668fd1":"test.shape","5c5c1e2d":"X = data.drop(\"Target\", axis=1)\ny = data[\"Target\"]","a65dac64":"# Use ExtraTreesClassifier for Plot the Importance of Features\n\nfrom sklearn.datasets import make_classification\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nforest = ExtraTreesClassifier(n_estimators=250,\n                              random_state=42)\nforest.fit(X, y)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n# Print the feature ranking\nprint(\"Feature ranking:\")\nfor f in range(X.shape[1]):\n    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))","023a6fc0":"from sklearn.feature_selection import SelectFromModel","e17536e5":"# select features that might contribute to predicting\nsfm = SelectFromModel(forest, threshold = 0.000001)\n\nsfm.fit(X, y)","1ac3def0":"# Delete all columns that will not contribute\nX = sfm.transform(X)\ntest = sfm.transform(test)","67e3e1f2":"X.shape","208d5230":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","87accf1b":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\ntest = sc.transform(test)","12e753ef":"y_test = y_test.astype(int)","704f9eb5":"from xgboost import XGBClassifier","d5934851":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)","691296cf":"y_pred_xgb = xgb.predict_proba(X_test)","991849d0":"from sklearn import metrics","e8b27f4d":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False, pos_label=1 )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","e278055d":"draw_roc(y_test, y_pred_xgb[:,1])","f02b1ed2":"acc_decision_tree = round(xgb.score(X_train, y_train) * 100, 2)\nprint(round(acc_decision_tree,2,), \"%\")","ca14d7ac":"Y_test = xgb.predict_proba(test)","e6442a22":"predictions_test = pd.DataFrame({\n        \"FileName\": filename,\n        \"Class\": Y_test[:,1]\n    })","95166dc7":"predictions_test.to_csv('csv_to_submit.csv', index = False)","bd744cc3":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):\n csv = df.to_csv(index=False)\n b64 = base64.b64encode(csv.encode())\n payload = b64.decode()\n html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n html = html.format(payload=payload,title=title,filename=filename)\n return HTML(html)\ncreate_download_link(predictions_test)","6027f5ba":"# Predicting on Testing Data","5e85cf96":"# Data Mining","091aa339":"# Data Transformation","1ede8f53":"### XGBoost","caaf7135":"### Splitting Training Data","00cd5c8d":"# Data Cleaning and Manipulation","d42ad1ca":"### Important Feature Selection"}}