{"cell_type":{"4e6c552e":"code","a31fd93b":"code","3a34d8cd":"code","53233dbb":"code","8a60317c":"code","56b6ef20":"code","eae15dcb":"code","a23362f6":"code","b2889475":"code","e898060c":"code","c0f0d34f":"code","7d17441c":"code","79f68364":"code","295d6a05":"code","471e2f32":"code","55ae5531":"code","b08c49ff":"code","91883078":"code","a49f95a6":"code","9cc580cf":"code","c670183a":"code","f1ed5bb9":"code","196171d1":"code","f95a11ee":"code","d6b27273":"code","932f70d5":"code","b3b719f3":"code","cb482404":"code","f8b53a37":"code","b508fa7a":"code","3f69dced":"code","a159c22d":"code","c45982ca":"code","8df6ec54":"code","a7edd8b8":"code","61cdc257":"code","06798e99":"code","fa3e5773":"code","0df45ce9":"code","fb14a61b":"code","9af8ac28":"code","da0418bf":"code","7b6a864d":"code","90bf53ab":"code","42f67fa2":"code","22ea2f7c":"code","7aab1359":"code","f7bf2194":"code","f635fd84":"code","a8f43846":"code","e4651c8f":"code","8cc3195a":"code","e00531c6":"code","541c3ca0":"code","9b3e9b6b":"code","0de57866":"code","592a3de5":"code","2bfd9b31":"code","8aef8dd8":"code","4d6654bc":"code","65d4946a":"markdown","8169ac3b":"markdown","e72b9eb2":"markdown","02a6371a":"markdown","23db1fdf":"markdown","2c380a0a":"markdown","78dff3c1":"markdown","f177c2ca":"markdown","e15d8414":"markdown","16691fd2":"markdown","2a8de832":"markdown","bcd2cbbd":"markdown","3f1f2e32":"markdown","a3f2b87c":"markdown"},"source":{"4e6c552e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","a31fd93b":"df = pd.read_csv('..\/input\/titanic\/train.csv')","3a34d8cd":"df","53233dbb":"#check if there is any significant correlation\ndf.corr()","8a60317c":"plt.figure(figsize=(15,8))\nsns.heatmap(df.corr(),annot = True,cmap='Oranges_r',square = False,yticklabels = False,linewidth = 2)","56b6ef20":"df.Survived.value_counts()","eae15dcb":"plt.figure(figsize=(10,6),facecolor = '#90eef8')\nplt.pie(df.Survived.value_counts(),labels=['Not Survived','Survived'],startangle=90,explode=[0,0.05],pctdistance=0.8,shadow=True,colors=['#fdb98a','#f76502'],autopct = '%1.1f%%')\ncentre_circle = plt.Circle((0,0),0.60,fc='#90eef8')\nplt.gca().add_artist(centre_circle)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","a23362f6":"df[df.Survived == 0].Sex.value_counts(),df[df.Survived == 1].Sex.value_counts()","b2889475":"_,ax = plt.subplots(1,2,figsize=(20,6),facecolor = '#90eef8')\nax[0].pie(df[df.Survived == 0].Sex.value_counts(),labels=['Male','Female'],startangle=90,explode=[0,0.05],pctdistance=0.8,shadow=True,colors=['#fdb98a','#f76502'],autopct = '%1.1f%%')\nax[1].pie(df[df.Survived == 1].Sex.value_counts(),labels=['Female','Male'],startangle=90,explode=[0,0.05],pctdistance=0.8,shadow=True,colors=['#fdb98a','#f76502'],autopct = '%1.1f%%')\n\ncentre_circle = plt.Circle((0,0),0.60,fc='#90eef8')\nax[0].add_artist(centre_circle)\ncentre_circle = plt.Circle((0,0),0.60,fc='#90eef8')\nax[1].add_artist(centre_circle)\n\n\nax[0].set_title('Not Survived',fontsize = 30)\nax[1].set_title('Survived',fontsize = 30)\nplt.tight_layout()\nplt.show()","e898060c":"df.isna().sum()","c0f0d34f":"df.Embarked.describe()","7d17441c":"#Filling NaN value with most frequent value\ndf.Embarked.fillna('S',inplace=True)","79f68364":"le = LabelEncoder()\ndf.Cabin = le.fit_transform(df.Cabin)","295d6a05":"sns.kdeplot(df.Cabin)","471e2f32":"df.Cabin = df.Cabin.replace(147,np.nan)","55ae5531":"#As Cabin variable is not symetrically distributed and right skewed. So, we will use median over mean\ndf['Cabin'].fillna(df.groupby('Pclass')['Cabin'].transform('median'),inplace = True)","b08c49ff":"sns.kdeplot(df.Age)","91883078":"df['Age'].fillna(df.groupby('Pclass')['Age'].transform('median'),inplace = True)","a49f95a6":"for i in range(0,df.shape[0]):\n    if df.iloc[i,5] < 18 :\n        df.iloc[i,5] = 0\n    elif 18 <= df.iloc[i,5] < 30 :\n        df.iloc[i,5] = 1\n    elif 30 <= df.iloc[i,5] < 50 :\n        df.iloc[i,5] = 2\n    elif 50 <= df.iloc[i,5] < 80 :\n        df.iloc[i,5] = 3\n    if df.iloc[i,5] >= 80 :\n        df.iloc[i,5] = 4","9cc580cf":"df['Family'] = df['SibSp']+df['Parch']","c670183a":"df.iloc[:,3].map(lambda x : x.split(',')[1].split('.')[0].strip()).value_counts()","f1ed5bb9":"df.iloc[:,3] = df.iloc[:,3].map(lambda x : x.split(',')[1].split('.')[0].strip())","196171d1":"for i in range (0,df.shape[0]):\n    if df.iloc[i,3] == 'Mr' or df.iloc[i,3] == 'Mrs' or df.iloc[i,3] == 0:\n        df.iloc[i,3] = 0\n    elif df.iloc[i,3] == 'Master' or df.iloc[i,3] == 'Miss' or df.iloc[i,3] == 1:\n        df.iloc[i,3] = 1\n    else:\n        df.iloc[i,3] = 2\n    ","f95a11ee":"df","d6b27273":"x = df.drop(['PassengerId','Survived','Ticket','SibSp','Parch','Cabin'],axis =1)","932f70d5":"x = pd.get_dummies(x)","b3b719f3":"y = df.Survived","cb482404":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=6)\n","f8b53a37":"rfc = RandomForestClassifier(random_state=3)\nrfc.fit(x_train,y_train)\naccuracy_score(y_test,rfc.predict(x_test))","b508fa7a":"lgb = LGBMClassifier(learning_rate=0.1,min_child_samples=14,reg_alpha=7,reg_lambda=7)\nlgb.fit(x_train,y_train)\naccuracy_score(y_test,lgb.predict(x_test))","3f69dced":"xgb = XGBClassifier(learning_rate=0.9,reg_alpha=0.1,reg_lambda=13)\nxgb.fit(x_train,y_train)\naccuracy_score(y_test,xgb.predict(x_test))","a159c22d":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score","c45982ca":"def cval(x, y,estimator,params,folds):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=17)\n    \n    for fold, (train_idx, test_idx) in enumerate(skf.split(x, y)):\n        x_train, y_train = x.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = x.iloc[test_idx], y.iloc[test_idx]\n\n        model = estimator(**params)\n        model.fit(x_train, y_train, eval_set=[(x_test, y_test)], early_stopping_rounds=100, verbose=0)\n        accu = accuracy_score(y_test, model.predict(x_test))\n        \n        print(str(fold+1)+' Fold Accuracy: '+str(accu))\n        print(\"-\"*50)\n    \n    return model","8df6ec54":"params = {'learning_rate':0.1,'min_child_samples':14,'reg_alpha':7,'reg_lambda':7}","a7edd8b8":"lgbm = cval(x,y,LGBMClassifier,params,5)","61cdc257":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=6)","06798e99":"accuracy_score(y_test,lgbm.predict(x_test))","fa3e5773":"test = pd.read_csv('..\/input\/titanic\/test.csv')","0df45ce9":"test.isna().sum()","fb14a61b":"test.Cabin = le.fit_transform(test.Cabin)","9af8ac28":"df.Cabin = df.Cabin.replace(76,np.nan)","da0418bf":"test.Cabin.fillna(test.groupby('Pclass')['Cabin'].transform('median'),inplace=True)","7b6a864d":"test.Age.fillna(test.groupby('Pclass')['Age'].transform('median'),inplace=True)","90bf53ab":"test.Fare.describe()","42f67fa2":"a = test.Fare.median()","22ea2f7c":"test.Fare.fillna(a,inplace=True)","7aab1359":"test['Family'] = test['SibSp']+test['Parch']","f7bf2194":"test = test.drop(['Cabin','Ticket','SibSp','Parch'],axis =1)","f635fd84":"test","a8f43846":"for i in range(0,test.shape[0]):\n    if test.iloc[i,4] < 18 :\n        test.iloc[i,4] = 0\n    elif 18 <= test.iloc[i,4] < 30 :\n        test.iloc[i,4] = 1\n    elif 30 <= test.iloc[i,4] < 50 :\n        test.iloc[i,4] = 2\n    elif 50 <= test.iloc[i,4] < 80 :\n        test.iloc[i,4] = 3\n    if test.iloc[i,4] >= 80 :\n        test.iloc[i,4] = 4","e4651c8f":"test","8cc3195a":"b = test.PassengerId\n","e00531c6":"test.Name = test.Name.map(lambda x : x.split(',')[1].split('.')[0].strip())","541c3ca0":"for i in range (0,test.shape[0]):\n    if test.iloc[i,2] == 'Mr' or test.iloc[i,2] == 'Mrs' or test.iloc[i,2] == 0:\n        test.iloc[i,2] = 0\n    elif test.iloc[i,2] == 'Master' or test.iloc[i,2] == 'Miss' or test.iloc[i,2] == 1:\n        test.iloc[i,2] = 1\n    else:\n        test.iloc[i,2] = 2","9b3e9b6b":"test = pd.get_dummies(test)","0de57866":"test.drop(['PassengerId'],axis = 1,inplace= True)","592a3de5":"pred = lgb.predict(test)","2bfd9b31":"submission = pd.DataFrame({'PassengerId':b,'Survived':pred})","8aef8dd8":"submission","4d6654bc":"submission.to_csv('submission.csv',index=False)","65d4946a":"<span style='font-size:25px;font-weight:bold;color:#20beff'>LightGBM<\/span>","8169ac3b":"<span style=\"font-size:20px;font-weight:bold;color:#20beff\">Probability of surviving for females are higher than males.<\/span>","e72b9eb2":"<h1 id=\"heading3\">\n<span style=\"font-size:35px;color:#20beff;font-weight:bold\"><center>Test data<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading3\" target ='_self'><\/a>\n<\/h1>","02a6371a":"<h1 id=\"heading2\">\n<span style=\"font-size:35px;color:#20beff;font-weight:bold\"><center>Model Fitting<\/center><\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading2\" target ='_self'><\/a>\n<\/h1>","23db1fdf":"<span style='font-size:25px;font-weight:bold;color:#20beff'>NaN<\/span>","2c380a0a":"<span style='font-size:25px;font-weight:bold;color:#20beff'>Correlation<\/span>","78dff3c1":"<span style='font-size:25px;font-weight:bold;color:#20beff'>Both SibSp and Parch combined is representing the number of family member<\/span>","f177c2ca":"<h1 id=\"heading1\">\n<span style=\"font-size:35px;color:#20beff;font-weight:bold\"><center>Understanding Data<\/center><\/span>\n      <a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading1\" target =\"_self\"><\/a>\n<\/h1>","e15d8414":"<center><img src='https:\/\/i.imgur.com\/SZQXq1q.png' width = '600px'><\/center>","16691fd2":"<span style='font-size:25px;font-weight:bold;color:#20beff'>Random Forest<\/span>","2a8de832":"<center><img src='https:\/\/1.bp.blogspot.com\/-WWe6LvkQZLY\/UfWViMco9wI\/AAAAAAAAAN8\/dzibibpS7Xo\/w1200-h630-p-k-no-nu\/titanic_in_the_night_wallpaper-401299-1283323224.jpeg' width = '800px'><\/center>","bcd2cbbd":"<span style='font-size:25px;font-weight:bold;color:#20beff'>Categorising age in different sub groups.<\/span>\n \n*   0 < Age < 18 -->  0\n*  18 < Age < 30 -->  1\n*  30 < Age < 50 -->  2\n*  50 < Age < 80 -->  3\n*   0 < Age      -->  4 ","3f1f2e32":"<span style='font-size:25px;font-weight:bold;color:#20beff'>K-Fold on LightGBM <\/span>","a3f2b87c":"<span style='font-size:25px;font-weight:bold;color:#20beff'>XGBoost<\/span>"}}