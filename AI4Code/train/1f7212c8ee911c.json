{"cell_type":{"78b671e3":"code","c7cc5338":"code","8291dce4":"code","4d6da669":"code","95e36698":"code","a71532f2":"code","27e5b383":"code","6c19dbfa":"code","698eb597":"code","b1b290db":"code","5d3896f3":"code","0053fae0":"code","586c2f19":"code","995e349c":"code","28c10318":"code","ca6c042c":"code","7798996c":"code","996272fd":"code","e8d18765":"code","eefc27f2":"code","72ce986e":"code","58b5e865":"code","91b792ba":"code","7027d9ae":"code","9ce5189f":"code","b8246146":"code","0190a5f5":"code","089a6113":"code","65b93585":"code","b9696e7e":"code","57746bd2":"code","bee60dd6":"code","a6271faf":"code","d4539acc":"code","51c8be9a":"code","fde8fb0d":"code","025d2dbc":"code","981775bf":"code","7edcf980":"code","15f1ece1":"code","f6aa450e":"code","1fcb6ed4":"code","71178438":"code","908e4fae":"code","e5ef7654":"code","548d53c4":"code","02abda49":"code","57c877f4":"code","d4e64c1c":"code","f1c9a43b":"code","66f2a0a0":"code","e65ffa4e":"code","ac6bc3a7":"code","dd8e1885":"code","1241484e":"code","871bfe87":"markdown","ab62966f":"markdown","66d5fe0b":"markdown","580d2a04":"markdown","7a1ab266":"markdown","3a0ec499":"markdown","d304077f":"markdown","922d8963":"markdown","9acf6ca5":"markdown","0e16c778":"markdown","78cbc37a":"markdown","ca233f0d":"markdown","47c009f5":"markdown","daea9890":"markdown","03e04c75":"markdown","d01d7585":"markdown","ce74404c":"markdown","fd3a765c":"markdown"},"source":{"78b671e3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom catboost import CatBoostClassifier, cv, Pool\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix","c7cc5338":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","8291dce4":"df_train.head()","4d6da669":"df_train.info()","95e36698":"hist = df_train.hist(figsize=(15,10))","a71532f2":"df_train.describe()","27e5b383":"df_train.describe(include=[object])","6c19dbfa":"df_train[df_train['Embarked'].isnull()]","698eb597":"df_train['Embarked'].value_counts().plot.bar()\nplt.title('Count of passengers by Embarked')\nplt.xlabel('Embarked')\nplt.ylabel('Count of passengers')","b1b290db":"sns.countplot(x='Survived', hue='Embarked', data=df_train)\nplt.title('Influence Embarked on Survived')","5d3896f3":"df_train[df_train['Embarked'] == 'S']['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'])\nplt.title('Survival provided Embarked = S')\nplt.xlabel('Survival')\nplt.ylabel('Proportion  of passengers')","0053fae0":"df_train.dropna(subset=['Embarked'], inplace=True)","586c2f19":"df_train[df_train['Age'].isnull()]","995e349c":"df_train['Salutation'] = df_train['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())","28c10318":"df_train['Salutation'].unique()","ca6c042c":"df_train.groupby('Salutation').mean()","7798996c":"df_train.groupby('Salutation').count()","996272fd":"df_group = df_train.groupby(['Sex', 'Pclass', 'Salutation'], as_index=False).agg({'Age': 'median'}).rename(columns={'Age': 'Age_median'})\ndf_group","e8d18765":"df_train = df_train.merge(df_group, on=['Sex', 'Pclass', 'Salutation'])\ndf_train['Age'] = np.where(df_train['Age'].isnull(), df_train['Age_median'],df_train['Age'])\ndf_train.drop(['Age_median', 'Salutation', 'Name'], axis=1, inplace=True)\ndf_test.drop(['Name'], axis=1, inplace=True)","eefc27f2":"df_train['Family'] = df_train['SibSp'] + df_train['Parch']\ndf_train['Parch_marker'] = np.where(df_train['Parch'] == 0, 0, 1)\ndf_train['Family_marker'] = np.where(df_train['Parch'] == 0, 0, 1)","72ce986e":"f,ax = plt.subplots(2,2,figsize=(14,8))\ndf_train[df_train['Parch_marker'] == 0]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[0,0])\ndf_train[df_train['Parch_marker'] == 1]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[0,1])\ndf_train[df_train['Family_marker'] == 0]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[1,0])\ndf_train[df_train['Family_marker'] == 1]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[1,1])\nax[0,0].set_title('Survival under condition Parch_marker = 0')\nax[0,1].set_title('Survival under condition Parch_marker = 1')\nax[1,0].set_title('Survival under condition Family_marker = 0')\nax[1,1].set_title('Survival under condition Family_marker = 1')\nf.supxlabel('Survival')\nf.supylabel('Proportion  of passengers')","58b5e865":"df_test['Family'] = df_train['SibSp'] + df_train['Parch']\ndf_test['Family_marker'] = np.where(df_test['Parch'] == 0, 0, 1)","91b792ba":"df_train.drop(['SibSp', 'Parch', 'Family', 'Parch_marker'], axis=1, inplace=True)\ndf_test.drop(['SibSp', 'Parch', 'Family'], axis=1, inplace=True)","7027d9ae":"df_train.head()","9ce5189f":"df_test.head()","b8246146":"df_train[['Fare']].describe().T","0190a5f5":"box_ = plt.boxplot(df_train['Fare'])","089a6113":"Q1 = df_train['Fare'].quantile(0.25)\nQ3 = df_train['Fare'].quantile(0.75)\nIQR = Q3 - Q1\nmax_border_outlier = Q3 + IQR","65b93585":"f,ax = plt.subplots(1,4,figsize=(20,4))\ndf_train[df_train['Fare'] > max_border_outlier]['Survived'].value_counts(normalize=True).sort_values().plot.bar(color=['tab:red', 'tab:green'], ax=ax[0])\ndf_train[(df_train['Fare'] > Q3) & (df_train['Fare'] <= max_border_outlier)]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[1])\ndf_train[(df_train['Fare'] > Q1) & (df_train['Fare'] <= Q3)]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[2])\ndf_train[(df_train['Fare'] <= Q1)]['Survived'].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'], ax=ax[3])\nax[0].set_title('Survival under condition Fare > Q3 + 1,5 IQR')\nax[1].set_title('Survival under condition Q3 < Fare <= Q3 + 1,5 IQR')\nax[2].set_title('Survival under condition Q1 < Fare <= Q3')\nax[3].set_title('Survival under condition Fare <= Q1')\nf.supxlabel('Survival')\nf.supylabel('Proportion  of passengers')","b9696e7e":"df_train['Finance_status'] = np.where(df_train['Fare'] > max_border_outlier, 'rich',\n                                     np.where(df_train['Fare'] <= Q1, 'middle', 'poor'))\ndf_test['Finance_status'] = np.where(df_test['Fare'] > max_border_outlier, 'rich',\n                                     np.where(df_test['Fare'] <= Q1, 'middle', 'poor'))","57746bd2":"df_train.drop(['PassengerId', 'Ticket', 'Cabin', 'Fare'], axis=1, inplace=True)\ndf_test.drop(['Ticket', 'Cabin', 'Fare'], axis=1, inplace=True)","bee60dd6":"df_train.info()","a6271faf":"df_train.head()","d4539acc":"df_test.head()","51c8be9a":"sns.countplot(x='Survived', hue='Sex', data=df_train)\nplt.title('Influence Sex on Survived')","fde8fb0d":"target_feature = 'Survived'\ncat_features = ['Pclass', 'Sex', 'Embarked', 'Family_marker','Finance_status']\nnum_features = list(set(df_train.columns) - set(cat_features) - set([target_feature]))","025d2dbc":"df_train[target_feature].value_counts(normalize=True).plot.bar(color=['tab:red', 'tab:green'])\nplt.grid(axis='y')\nplt.title(target_feature)\nplt.xlabel('Class')\nplt.ylabel('Proportion')","981775bf":"X = df_train.drop(target_feature, axis=1)\ny = df_train[target_feature]","7edcf980":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=35)","15f1ece1":"cat_features_index = [X_train.columns.get_loc(i) for i in cat_features]\ncat_features_index","f6aa450e":"metrics = {}\n\ndef print_confusion_matrix(y_true, y_pred):\n    sns.heatmap(confusion_matrix(y_true=y_true, y_pred=y_pred), annot=True, cmap='coolwarm', cbar=False, fmt='.3g')\n    plt.title('Confusion matrix')\n    plt.xlabel('Predict')\n    plt.ylabel('Actual')\n    plt.show()\n    \ndef start_train(model, X_train, y_train, X_valid, y_valid, verbose, model_name):\n    model.fit(X_train, y_train, eval_set=(X_valid, y_valid), verbose=verbose)\n    y_pred = model.predict(X_valid)\n    accuracy = accuracy_score(y_true=y_valid, y_pred=y_pred)\n    metrics[model_name] = accuracy\n    print(f'Training completed. Accuracy {model_name} = {accuracy}.')\n    print_confusion_matrix(y_true=y_valid, y_pred=y_pred)\n    print('Params:')\n    print(model.get_params())\n    \ndef randomized_cv(model, param_grid, X_train, y_train):\n    grid_search = RandomizedSearchCV(model, param_grid, cv=5, scoring='accuracy')\n    grid_search.fit(X_train, y_train, verbose=False)\n    print('The best accuracy score is {:.3f}'.format(grid_search.best_score_))\n    return grid_search.best_estimator_","1fcb6ed4":"X_valid['y_pred_naive'] = np.where(((X_valid['Finance_status'] == 'rich') | (X_valid['Sex'] == 'female')), 1, 0)\ny_pred_naive = X_valid['y_pred_naive'].copy()\nX_valid.drop('y_pred_naive', axis=1, inplace=True)","71178438":"accuracy = accuracy_score(y_true=y_valid, y_pred=y_pred_naive)\nmetrics['Baseline model'] = accuracy\nprint(f'Training completed. Accuracy Baseline model = {accuracy}.')\nprint_confusion_matrix(y_true=y_valid, y_pred=y_pred_naive)","908e4fae":"standard_model = CatBoostClassifier(cat_features=cat_features_index, eval_metric='Accuracy')","e5ef7654":"start_train(model=standard_model, \n           X_train=X_train,\n           y_train=y_train,\n           X_valid=X_valid,\n           y_valid=y_valid,\n           verbose=False,\n           model_name='Standard model')","548d53c4":"param_grid = {\n    'iterations': range(1, 1001),\n    'depth': range(1, 11),\n    'learning_rate':[0.03,0.001,0.01,0.1,0.2,0.3],\n    'l2_leaf_reg': range(3, 11)\n}\ncv_model = randomized_cv(CatBoostClassifier(cat_features=cat_features_index), param_grid, X_train=X_train, y_train=y_train)","02abda49":"start_train(model=cv_model, \n           X_train=X_train,\n           y_train=y_train,\n           X_valid=X_valid,\n           y_valid=y_valid,\n           verbose=False,\n           model_name='CV model')","57c877f4":"plt.bar(x=metrics.keys(), height=metrics.values())\nplt.title('Accuracy')\nplt.ylim(0.7)","d4e64c1c":"feature_importance = standard_model.get_feature_importance(prettified=True)\nfeature_importance","f1c9a43b":"plt.bar(x=feature_importance['Feature Id'], height=feature_importance['Importances'], color=['tab:blue', 'tab:orange','tab:green', 'tab:purple', 'tab:olive', 'tab:cyan'])\nplt.title('Base model. Feature importance')","66f2a0a0":"feature_importance = cv_model.get_feature_importance(prettified=True)\nfeature_importance","e65ffa4e":"plt.bar(x=feature_importance['Feature Id'], height=feature_importance['Importances'], color=['tab:blue', 'tab:orange','tab:green', 'tab:purple', 'tab:olive', 'tab:cyan'])\nplt.title('Base model. Feature importance')","ac6bc3a7":"X_test = df_test.drop('PassengerId', axis=1)\npredictions = standard_model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","dd8e1885":"output","1241484e":"output.dtypes","871bfe87":"Survival under condition Fare > Q3 + 1,5 IQR about 70%.    \nSurvival under condition Q3 < Fare <= Q3 + 1,5 IQR about 40%.    \nSurvival under condition Q1 < Fare <= Q3 about 40%.    \nSurvival under condition Fare <= Q1 about 20%.    \nThus, three groups can be distinguished: the rich, the middle class and the poor.","ab62966f":"CV Model","66d5fe0b":"Look at SibSp, Parch","580d2a04":"### Load data","7a1ab266":"Survival of passengers with family is about 50%.    \nPassenger survival without family is less common.    \nLet's use a new feature \"Family_marker\".    \nRemove SibSp, Parch, Family, Parch_marker.","3a0ec499":"### Training","d304077f":"The count of surviving men is much less.","922d8963":"I will restore the age of passengers depending on the Salutation Persons.","9acf6ca5":"### Preprocessing","0e16c778":"Remove unused features","78cbc37a":"Look at sex","ca233f0d":"Look at Age. Imput missing values.","47c009f5":"\u0421lass balance","daea9890":"Look at Fare.","03e04c75":"Standard model","d01d7585":"Passengers with Embarked  equal  null survived.    \nModa by Embarked equal \"S\".    \nSurvival under condition Embarked = S is half as much.    \nTherefore, I will not replace null with the moda.    \nI will remove two objects with Embarked equal null.","ce74404c":"Look at Embarked. Imput missing values.","fd3a765c":"Baseline.    \nAssume that all women and all rich passengers survive."}}