{"cell_type":{"34bbb019":"code","f225edc0":"code","5a714a3b":"code","975d1bd1":"code","6c9f24d2":"code","a9d59553":"code","35878fd5":"code","1e897734":"code","5c2c90c5":"code","8d0c871a":"code","8e58303b":"code","1b9aa893":"code","d9871105":"code","ed4d5f9d":"code","bba544b9":"code","6022b598":"code","250fe0c6":"code","8fe2bf68":"code","56420250":"markdown","03ed9575":"markdown","5e38ae20":"markdown","244d96ed":"markdown","4e6aeb87":"markdown","cb05767b":"markdown","e91edd3f":"markdown"},"source":{"34bbb019":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport math\nfrom textwrap import wrap\n\nwarnings.filterwarnings('ignore')\nsns.set_palette('Set2')\nsns.set_style('darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f225edc0":"df = pd.read_csv('..\/input\/top-500-supercomputers\/GREEN500.csv', encoding='ISO-8859-2')\ndf.head()","5a714a3b":"df.isnull().sum()","975d1bd1":"unique_df = pd.DataFrame()\nunique_df['Features'] = df.columns\nunique=[]\nfor i in df.columns:\n    unique.append(df[i].nunique())\nunique_df['Uniques'] = unique\n\nf, ax = plt.subplots(1,1, figsize=(15,7))\n\nsplot = sns.barplot(x=unique_df['Features'], y=unique_df['Uniques'], alpha=0.8)\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center',\n                   va = 'center', xytext = (0, 9), textcoords = 'offset points')\nplt.title('Bar plot for number of unique values in each column',weight='bold', size=15)\nplt.ylabel('#Unique values', size=12, weight='bold')\nplt.xlabel('Features', size=12, weight='bold')\nplt.xticks(rotation=90)\nplt.show()","6c9f24d2":"import plotly.express    as px \n\nfig = px.treemap(df.head(20), path=['Name'], values='TOP500 Rank',\n                title=\"<b>TreeMap for Top 20 Names by TOP500 Rank<\/b>\",\n                 color='Rank') \nfig.show()","a9d59553":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.Computer)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"grey\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","35878fd5":"sum=df['Computer'].str.len()\nprint(sum)","1e897734":"# let's check the length of summaries, the average length is 20 characters.\ndf['computer length'] = df['Computer'].apply(len)\ndf['computer length'].describe()","5c2c90c5":"sns.boxplot(x='Year', y=df['computer length'], data=df)","8d0c871a":"pd.set_option('display.max_colwidth', -1)\ndf_NA = pd.DataFrame(data=[df.isna().sum().tolist(), [\"{:.2f}\".format(i)+'%' for i in (df.isna().sum()\/df.shape[0]*100).tolist()]], \n            columns=df.columns, index=['NA_Count', 'NA_Percent']).transpose()\ndf_NA[df_NA['NA_Count']>0].transpose()","8e58303b":"s = (df.isna().sum()\/df.shape[0]*100)<50\ndf_modified = df[s.index[s].tolist()]\nprint (df_modified.shape)\ndf_modified.head()","1b9aa893":"plt.rcParams['font.size'] = 14\nfig, ax = plt.subplots(3, 2, figsize=(20,20))\nfor col, ax in zip(['Continent','Interconnect Family','Interconnect','Country','Segment','System Model','Processor Generation'], ax.flat):\n    dict_ = df_modified[col].value_counts().head(10).to_dict()\n    if ('Not Available' in dict_.keys()):\n        dict_.pop('Not Available')\n    labels = []\n    for i in dict_.keys():\n        i = i.split(' ')\n        if (len(i) > 6):\n            i[math.ceil(len(i)\/2)-1] += '\\n'\n            labels.append(' '.join(i))\n        else:\n            labels.append(' '.join(i))\n    ax.pie(x=list(dict_.values()), labels=labels, shadow=True, startangle=0)\n    \n    col = (' '.join(col.split('_'))).upper()\n    ax.set_title(col, weight='bold', fontsize=18)\nplt.tight_layout()\nplt.show()","d9871105":"plt.figure(figsize=(18,10))\nfigure = plt.figure(figsize=(10,6))\nsns.countplot(y='Interconnect Family', hue='Manufacturer', data=df_modified.replace('Not Available', np.nan))\nlabels = ['\\n'.join(wrap(l, 40)) for l in df_modified['Manufacturer']]\nplt.legend(labels, shadow=True, facecolor='lightyellow', title='Computers Manufacturer', title_fontsize=18)\nplt.xlabel('Count', weight='bold', fontsize=18)\nplt.ylabel('Interconnect Family', weight='bold', fontsize=18)\nplt.show()","ed4d5f9d":"plt.figure(figsize=(18,8))\nsns.countplot(y='Segment', hue='Site', data=df_modified.replace('Not Available', np.nan))\nplt.legend(shadow=True, facecolor='lightyellow', title='Computers Site', title_fontsize=18)\nplt.xlabel('Count', weight='bold', fontsize=18)\nplt.ylabel('Segment', weight='bold', fontsize=18)\nplt.show()","bba544b9":"#Code by Siti K https:\/\/www.kaggle.com\/khotijahs1\/2020-indonesia-university-rank\/comments\n\n#Top 20 Computers by Ranking\ntop_computer = df.sort_values(by='TOP500 Rank', ascending=False)[:20]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=top_computer.Rank, x=top_computer.Manufacturer)\nplt.xticks(rotation=45)\nplt.xlabel('Manufacturer Name')\nplt.ylabel('Count')\nplt.title('Manufacturers Ranking')\nplt.show()","6022b598":"#Code by Siti K https:\/\/www.kaggle.com\/khotijahs1\/2020-indonesia-university-rank\/comments\n\n#Top 20 Computers by Ranking\ntop_computer = df.sort_values(by='TOP500 Rank', ascending=False)[:20]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=top_computer.Rank, x=top_computer.Processor)\nplt.xticks(rotation=45)\nplt.xlabel('Processor')\nplt.ylabel('Count')\nplt.title('Processors Ranking')\nplt.show()","250fe0c6":"#Code by Siti K https:\/\/www.kaggle.com\/khotijahs1\/2020-indonesia-university-rank\/comments\n\n#Top 20 Computers by Ranking\ntop_computer = df.sort_values(by='Name', ascending=False)[:20]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=top_computer.Rank, x=top_computer.Computer)\nplt.xticks(rotation=45)\nplt.xlabel('Computer')\nplt.ylabel('Count')\nplt.title('Computers Ranking')\nplt.show()","8fe2bf68":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here without a SuperComputer' )","56420250":"#Codes by YiYuan https:\/\/www.kaggle.com\/latong\/food-review-text-summarization\/notebook","03ed9575":"#Code by Mohammad Imran Shaikh https:\/\/www.kaggle.com\/shikhnu\/covid19-tweets-eda-visualization-wordcloud","5e38ae20":"![](https:\/\/mma.prnewswire.com\/media\/659152\/Super_Micro_Computer_GPU_Servers.jpg?p=publish&w=950)prnewswire.com","244d96ed":"Columns with missing values","4e6aeb87":"#Codes by Ayush Garg https:\/\/www.kaggle.com\/ayushggarg\/covid-19-health-services-disruption-india-eda\/notebook","cb05767b":"SUPERCOMPUTERS (Faster, More Powerful and Technologically Superior)\n\nA supercomputer is a computer with a high level of performance as compared to a general-purpose computer.\n\nThe performance of a supercomputer is commonly measured in floating-point operations per second (FLOPS) instead of million instructions per second (MIPS).\n\nSince 2017, there are supercomputers which can perform over 1017 FLOPS (a hundred quadrillion FLOPS, 100 petaFLOPS or 100 PFLOPS). \n\nSince November 2017, all of the world's fastest 500 supercomputers run Linux-based operating systems. Additional research is being conducted in the United States, the European Union, Taiwan, Japan, and China to build faster, more powerful and technologically superior exascale supercomputers\nhttps:\/\/en.wikipedia.org\/wiki\/Supercomputer","e91edd3f":"Get rid of the columns having missing data > 50%"}}