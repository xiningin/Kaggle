{"cell_type":{"3502bece":"code","3f1a1e80":"code","8a0475f1":"code","538c73b7":"code","5dc8ca1a":"code","0aa7165c":"code","c8d500ce":"code","e6788635":"code","dc89419e":"code","2d7864b9":"markdown"},"source":{"3502bece":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3f1a1e80":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt","8a0475f1":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n#A partir daqui temos os dados carregados","538c73b7":"X_train = train.drop(['label'],axis=1)\ny_train = train['label']","5dc8ca1a":"#Mostrar uma imagem de um n\u00famero qualquer\nplt.imshow(np.array(X_train.iloc[1,:]).reshape(28,28), cmap=plt.get_cmap('gray'))","0aa7165c":"X = X_train.copy()\ny = y_train.copy()","c8d500ce":"from sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import cross_val_score\n\n#Como s\u00f3 os dados de treino possuem as labels(classifica\u00e7\u00e3o real)\n#Realize um train_test_split a partir dos dados de treino\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n#Avaliar na particao de treino e avaliar os resultados atrav\u00e9s de classification report\n\n#DESAFIO\n#Treinar os dados com redes neurais e avaliar os hiperparametros com GridSearch ","e6788635":"from sklearn.metrics import classification_report\n\n#abordagem Holdout - parametros padrao\nmlp = MLPClassifier()\nmlp.fit(X_train,y_train)\ny_pred = mlp.predict(X_test)\nprint(classification_report(y_pred,y_test))\n\n","dc89419e":"from sklearn.model_selection import GridSearchCV\n\nmlp = MLPClassifier()\nnn_params = {'hidden_layer_sizes':[(100,),(100,100),(85,50)],\n            'learning_rate' : ['constant','adaptive'],\n                                    'learning_rate_init' : [0.001,0.02,0.1]}\n                                      \ngs_nn = GridSearchCV(mlp,param_grid =nn_params,verbose = 1)\ngs_nn.fit(X_train,y_train)\ny_pred = gs_nn.predict(y_test)\nprint(classification_report(y_pred,y_test))","2d7864b9":"Bom Dia\/Boa tarde \/Boa Noite\n\nTreine um modelo para o modelo saber diferenciar os n\u00fameros.\nPercebam que desta vez, temos muito mais pixels do que na aula ministrada, temos agora 784 Colunas(pixels)"}}