{"cell_type":{"1a2efa2f":"code","78a60b84":"code","4ed226fd":"code","78423fb2":"code","16cbb4da":"code","4508c195":"code","2e7de122":"code","79a7ee6d":"code","0596b138":"code","4cd4f9be":"code","e1c6ce1d":"code","7be9fcd0":"code","6f0d0a76":"code","2e50b12e":"code","304bd9b9":"code","b44524a7":"code","901d63e3":"code","066f0dae":"markdown"},"source":{"1a2efa2f":"# \u9996\u5148\u5bfc\u5165\u5305\n! pip install ipdb\nimport torch\nimport torch.nn as nn\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nfrom PIL import Image\nimport os\n\nimport matplotlib.pyplot as plt\nimport torchvision.models as models\nfrom torchvision.transforms.transforms import RandomCrop\n# This is for the progress bar.\nfrom tqdm import tqdm\nfrom torch.utils.tensorboard import SummaryWriter\nimport ipdb\nimport albumentations\nimport cv2","78a60b84":"\n#CutMix\u65b9\u6cd5\n\"\"\"\u8f93\u5165\u4e3a\uff1a\u6837\u672c\u7684size\u548c\u751f\u6210\u7684\u968f\u673alamda\u503c\"\"\"\ndef rand_bbox(size, lam):\n    W = size[2]\n    H = size[3]\n    \"\"\"1.\u8bba\u6587\u91cc\u7684\u516c\u5f0f2\uff0c\u6c42\u51faB\u7684rw,rh\"\"\"\n    cut_rat = np.sqrt(1. - lam)\n    cut_w = np.int(W * cut_rat)\n    cut_h = np.int(H * cut_rat)\n \n    # uniform\n    \"\"\"2.\u8bba\u6587\u91cc\u7684\u516c\u5f0f2\uff0c\u6c42\u51faB\u7684rx,ry\uff08bbox\u7684\u4e2d\u5fc3\u70b9\uff09\"\"\"\n    cx = np.random.randint(W)\n    cy = np.random.randint(H)\n    #\u9650\u5236\u5750\u6807\u533a\u57df\u4e0d\u8d85\u8fc7\u6837\u672c\u5927\u5c0f\n \n    bbx1 = np.clip(cx - cut_w \/\/ 2, 0, W)\n    bby1 = np.clip(cy - cut_h \/\/ 2, 0, H)\n    bbx2 = np.clip(cx + cut_w \/\/ 2, 0, W)\n    bby2 = np.clip(cy + cut_h \/\/ 2, 0, H)\n    \"\"\"3.\u8fd4\u56de\u526a\u88c1B\u533a\u57df\u7684\u5750\u6807\u503c\"\"\"\n    return bbx1, bby1, bbx2, bby2\n","4ed226fd":"def get_device():\n    return 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndevice = get_device()\ntorch.backends.cudnn.benchmark = True\nprint(device)","78423fb2":"#\u5bfc\u5165\u6570\u636e\nlabels_dataframe = pd.read_csv('..\/input\/classify-leaves\/train.csv')","16cbb4da":"# \u628alabel\u6587\u4ef6\u6392\u4e2a\u5e8f\nleaves_labels = sorted(list(set(labels_dataframe['label'])))\nn_classes = len(leaves_labels)\nclass_to_num = dict(zip(leaves_labels, range(n_classes)))\nnum_to_class = {v : k for k, v in class_to_num.items()}","4508c195":"\nclass LeavesData(Dataset):\n    def __init__(self, csv_path, file_path, mode='train', valid_ratio=0.2, resize_height=256, resize_width=256):\n        \"\"\"\n        Args:\n            csv_path (string): csv \u6587\u4ef6\u8def\u5f84\n            img_path (string): \u56fe\u50cf\u6587\u4ef6\u6240\u5728\u8def\u5f84\n            mode (string): \u8bad\u7ec3\u6a21\u5f0f\u8fd8\u662f\u6d4b\u8bd5\u6a21\u5f0f\n            valid_ratio (float): \u9a8c\u8bc1\u96c6\u6bd4\u4f8b\n        \"\"\"\n        \n        # \u9700\u8981\u8c03\u6574\u540e\u7684\u7167\u7247\u5c3a\u5bf8\uff0c\u6211\u8fd9\u91cc\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u5c3a\u5bf8\u4e0d\u4e00\u81f4#\n        self.resize_height = resize_height\n        self.resize_width = resize_width\n\n        self.file_path = file_path\n        self.mode = mode\n\n        # \u8bfb\u53d6 csv \u6587\u4ef6\n        # \u5229\u7528pandas\u8bfb\u53d6csv\u6587\u4ef6\n        self.data_info = pd.read_csv(csv_path)  #header=None\u662f\u53bb\u6389\u8868\u5934\u90e8\u5206\n        self.data_info = self.data_info.sample(frac=1.0)\n        # \u8ba1\u7b97 length\n        self.data_len = len(self.data_info.index)\n        self.train_len = int(self.data_len * (1 - valid_ratio))\n        \n        if mode == 'train':\n            # \u7b2c\u4e00\u5217\u5305\u542b\u56fe\u50cf\u6587\u4ef6\u7684\u540d\u79f0\n            # self.train_image = np.asarray(self.data_info.iloc[1:, 0])\n            self.train_image = np.asarray(self.data_info.iloc[0:self.train_len, 0])  #self.data_info.iloc[1:,0]\u8868\u793a\u8bfb\u53d6\u7b2c\u4e00\u5217\uff0c\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u5230train_len\n            # \u7b2c\u4e8c\u5217\u662f\u56fe\u50cf\u7684 label\n            # self.train_label = np.asarray(self.data_info.iloc[1:, 1])\n            self.train_label = np.asarray(self.data_info.iloc[0:self.train_len, 1])\n\n            self.image_arr = self.train_image \n            self.label_arr = self.train_label\n        elif mode == 'valid':\n            self.valid_image = np.asarray(self.data_info.iloc[self.train_len:, 0])  \n            self.valid_label = np.asarray(self.data_info.iloc[self.train_len:, 1])\n            self.image_arr = self.valid_image\n            self.label_arr = self.valid_label\n        elif mode == 'test':\n            self.test_image = np.asarray(self.data_info.iloc[1:, 0])\n            self.image_arr = self.test_image\n            \n        self.real_len = len(self.image_arr)\n\n        print('Finished reading the {} set of Leaves Dataset ({} samples found)'\n              .format(mode, self.real_len))\n\n    def __getitem__(self, index):\n        # \u4ece image_arr\u4e2d\u5f97\u5230\u7d22\u5f15\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\n        single_image_name = self.image_arr[index]\n\n        # \u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\n        img_as_img = Image.open(self.file_path + single_image_name)\n\n        #\u5982\u679c\u9700\u8981\u5c06RGB\u4e09\u901a\u9053\u7684\u56fe\u7247\u8f6c\u6362\u6210\u7070\u5ea6\u56fe\u7247\u53ef\u53c2\u8003\u4e0b\u9762\u4e24\u884c\n#         if img_as_img.mode != 'L':\n#             img_as_img = img_as_img.convert('L')\n\n        #\u8bbe\u7f6e\u597d\u9700\u8981\u8f6c\u6362\u7684\u53d8\u91cf\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u4e00\u7cfb\u5217\u7684nomarlize\u7b49\u7b49\u64cd\u4f5c\n        if self.mode == 'train':\n            transform = transforms.Compose([\n                # transforms.CenterCrop(224),\n                # transforms.TenCrop(224, vertical_flip=False),\n                transforms.Resize((224, 224)),\n                transforms.CenterCrop(size=224),\n                # transforms.TenCrop\n                # transforms.RandomCrop(224),\n                transforms.RandomVerticalFlip() ,\n                # transforms.RandomResizedCrop(size=224, scale=(0.8, 1.0)),\n                # transforms.RandomRotation(degrees=15),\n                transforms.RandomHorizontalFlip(),\n                #transforms.CenterCrop(size=224),\n                transforms.ToTensor(),\n                # transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n            ])\n\n\n\n        else:\n            # valid\u548ctest\u4e0d\u505a\u6570\u636e\u589e\u5f3a\n            transform = transforms.Compose([\n                transforms.Resize((224, 224)),\n                transforms.CenterCrop(size=224),\n                transforms.ToTensor(),\n                # transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n            ])\n        \n        img_as_img = transform(img_as_img)\n        \n        if self.mode == 'test':\n            return img_as_img\n        else:\n            # \u5f97\u5230\u56fe\u50cf\u7684 string label\n            label = self.label_arr[index]\n            # number label\n            number_label = class_to_num[label]\n\n            return img_as_img, number_label  #\u8fd4\u56de\u6bcf\u4e00\u4e2aindex\u5bf9\u5e94\u7684\u56fe\u7247\u6570\u636e\u548c\u5bf9\u5e94\u7684label\n\n    def __len__(self):\n        return self.real_len","2e7de122":" \n\ntrain_path = '..\/input\/classify-leaves\/train.csv'\ntest_path = '..\/input\/classify-leaves\/test.csv'\n# csv\u6587\u4ef6\u4e2d\u5df2\u7ecfimages\u7684\u8def\u5f84\u4e86\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u5230\u4e0a\u4e00\u7ea7\u76ee\u5f55\nimg_path = '..\/input\/classify-leaves\/'\n\ntrain_dataset = LeavesData(train_path, img_path, mode='train')\nval_dataset = LeavesData(train_path, img_path, mode='valid')\ntest_dataset = LeavesData(test_path, img_path, mode='test')\nbatch_size = 32","79a7ee6d":"# \u5b9a\u4e49data loader\ntrain_loader = torch.utils.data.DataLoader(\n        dataset=train_dataset,\n        batch_size=batch_size, \n        shuffle=True,\n        num_workers=8,\n        pin_memory=True\n    )\n\nval_loader = torch.utils.data.DataLoader(\n        dataset=val_dataset,\n        batch_size=batch_size, \n        shuffle=False,\n        num_workers=8,\n        pin_memory=True\n    )\ntest_loader = torch.utils.data.DataLoader(\n        dataset=test_dataset,\n        batch_size=batch_size, \n        shuffle=False,\n        num_workers=8,\n        pin_memory=True\n    )","0596b138":"def set_parameter_requires_grad(model, feature_extracting):\n    if feature_extracting:\n        model = model\n        for param in model.parameters():\n            param.requires_grad = False\n\n# resnext101_32x8d\ndef res_model(num_classes, feature_extract = False, use_pretrained=True):\n\n    model_ft = models.resnext101_32x8d(pretrained=use_pretrained)\n    set_parameter_requires_grad(model_ft, feature_extract)\n    num_ftrs = model_ft.fc.in_features\n    model_ft.fc = nn.Sequential(nn.Linear(num_ftrs, num_classes))\n\n    return model_ft\n\n# \u8d85\u53c2\u6570\nlearning_rate = 3e-4\nweight_decay = 1e-3\nnum_epoch = 50\nbeta = 0.9\ncutmix_prob = 0.9\nmodel_path = '.\/pre_res_model.ckpt'\n\n# torch.distributed.init_process_group(backend=\"nccl\")\nmodel = res_model(176)\nmodel = nn.DataParallel(model)\nmodel = model.to(device)\n# model = nn.parallel.DistributedDataParallel(model) # device_ids will include all GPU devices by default\n\n\n# For the classification task, we use cross-entropy as the measurement of performance.\ncriterion = nn.CrossEntropyLoss()\n\n# Initialize optimizer, you may fine-tune some hyperparameters such as learning rate on your own.\noptimizer = torch.optim.AdamW(model.parameters(), lr = learning_rate, weight_decay=0.02)\n# optimizer = torch.optim.SGD(model.parameters(),lr=learning_rate)\nscheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, 10, eta_min=1e-6, last_epoch=-1)\n# The number of training epochs.\nn_epochs = num_epoch\n\n# ipdb.set_trace()\nbest_acc = 0.0","4cd4f9be":"for epoch in range(n_epochs):\n    # ---------- Training ----------\n    # Make sure the model is in train mode before training.\n    model.train() \n    # These are used to record information in training.\n    train_loss = []\n    train_accs = []\n    # Iterate the training set by batches.\n    for batch in tqdm(train_loader):\n        # A batch consists of image data and corresponding labels.\n        imgs, labels = batch\n        imgs = imgs.to(device)\n        labels = labels.to(device)\n        \n        r = np.random.rand(1)\n\n        if beta > 0 and r < cutmix_prob:\n            # generate mixed sample\n            \"\"\"1.\u8bbe\u5b9alamda\u7684\u503c\uff0c\u670d\u4ecebeta\u5206\u5e03\"\"\"\n            lam = np.random.beta(beta, beta)\n            \"\"\"2.\u627e\u5230\u4e24\u4e2a\u968f\u673a\u6837\u672c\"\"\"\n            rand_index = torch.randperm(imgs.size()[0]).cuda()\n            target_a = labels#\u4e00\u4e2abatch\n            target_b = labels[rand_index] #batch\u4e2d\u7684\u67d0\u4e00\u5f20\n            \"\"\"3.\u751f\u6210\u526a\u88c1\u533a\u57dfB\"\"\"\n            bbx1, bby1, bbx2, bby2 = rand_bbox(imgs.size(), lam)\n            \"\"\"4.\u5c06\u539f\u6709\u7684\u6837\u672cA\u4e2d\u7684B\u533a\u57df\uff0c\u66ff\u6362\u6210\u6837\u672cB\u4e2d\u7684B\u533a\u57df\"\"\"\n            imgs[:, :, bbx1:bbx2, bby1:bby2] = imgs[rand_index, :, bbx1:bbx2, bby1:bby2]\n            # adjust lambda to exactly match pixel ratio\n            \"\"\"5.\u6839\u636e\u526a\u88c1\u533a\u57df\u5750\u6807\u6846\u7684\u503c\u8c03\u6574lam\u7684\u503c\"\"\"\n            lam = 1 - ((bbx2 - bbx1) * (bby2 - bby1) \/ (imgs.size()[-1] * imgs.size()[-2]))\n            # compute output\n            \"\"\"6.\u5c06\u751f\u6210\u7684\u65b0\u7684\u8bad\u7ec3\u6837\u672c\u4e22\u5230\u6a21\u578b\u4e2d\u8fdb\u884c\u8bad\u7ec3\"\"\"\n            logits = model(imgs)\n            \"\"\"7.\u6309lamda\u503c\u5206\u914d\u6743\u91cd\"\"\"\n            loss = criterion(logits, target_a) * lam + criterion(logits, target_b) * (1. - lam)\n        else:\n                # compute output\n            # Forward the data. (Make sure data and model are on the same device.)\n            logits = model(imgs)\n            # Calculate the cross-entropy loss.\n            # We don't need to apply softmax before computing cross-entropy as it is done automatically.\n            loss = criterion(logits, labels)\n\n        \n        \n        # Gradients stored in the parameters in the previous step should be cleared out first.\n        optimizer.zero_grad()\n        # Compute the gradients for parameters.\n        loss.backward()\n        # Update the parameters with computed gradients.\n        optimizer.step()\n        \n        \n        # Compute the accuracy for current batch.\n        acc = (logits.argmax(dim=-1) == labels).float().mean()\n\n        # Record the loss and accuracy.\n        train_loss.append(loss.item())\n        train_accs.append(acc)\n        \n    scheduler.step()    \n    # The average loss and accuracy of the training set is the average of the recorded values.\n    train_loss = sum(train_loss) \/ len(train_loss)\n    train_acc = sum(train_accs) \/ len(train_accs)\n\n    # Print the information.\n    print(f\"[ Train | {epoch + 1:03d}\/{n_epochs:03d} ] loss = {train_loss:.5f}, acc = {train_acc:.5f},best_acc = {best_acc:.5f}\")\n    \n    \n    # ---------- Validation ----------\n    # Make sure the model is in eval mode so that some modules like dropout are disabled and work normally.\n    model.eval()\n    # These are used to record information in validation.\n    valid_loss = []\n    valid_accs = []\n    \n    # Iterate the validation set by batches.\n    for batch in tqdm(val_loader):\n        imgs, labels = batch\n        # We don't need gradient in validation.\n        # Using torch.no_grad() accelerates the forward process.\n        with torch.no_grad():\n            logits = model(imgs.to(device))\n            \n        # We can still compute the loss (but not the gradient).\n        loss = criterion(logits, labels.to(device))\n\n        # Compute the accuracy for current batch.\n        acc = (logits.argmax(dim=-1) == labels.to(device)).float().mean()\n\n        # Record the loss and accuracy.\n        valid_loss.append(loss.item())\n        valid_accs.append(acc)\n        \n    # The average loss and accuracy for entire validation set is the average of the recorded values.\n    valid_loss = sum(valid_loss) \/ len(valid_loss)\n    valid_acc = sum(valid_accs) \/ len(valid_accs)\n\n    # Print the information.\n    print(f\"[ Valid | {epoch + 1:03d}\/{n_epochs:03d} ] loss = {valid_loss:.5f}, acc = {valid_acc:.5f}, lr = {optimizer.param_groups[0]['lr']:.5f}\")\n\n    # if the model improves, save a checkpoint at this epoch\n    if valid_acc > best_acc:\n        best_acc = valid_acc\n        torch.save(model.state_dict(), model_path)\n        print('saving model with acc {:.3f}'.format(best_acc))\n\n        ","e1c6ce1d":"import torch\nimport torch.nn as nn\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\nfrom PIL import Image\nimport os\nimport matplotlib.pyplot as plt\nimport torchvision.models as models\n# This is for the progress bar.\nfrom tqdm import tqdm\n\n\ndef get_device():\n    return 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndevice = get_device()\ntorch.backends.cudnn.benchmark = True\nprint(device)","7be9fcd0":"# \u770b\u770blabel\u6587\u4ef6\u957f\u5565\u6837\nlabels_dataframe = pd.read_csv('..\/input\/classify-leaves\/train.csv')\n\n\n# \u628alabel\u6587\u4ef6\u6392\u4e2a\u5e8f\nleaves_labels = sorted(list(set(labels_dataframe['label'])))\nn_classes = len(leaves_labels)\nclass_to_num = dict(zip(leaves_labels, range(n_classes)))\nnum_to_class = {v : k for k, v in class_to_num.items()}","6f0d0a76":"\nclass LeavesData(Dataset):\n    def __init__(self, csv_path, file_path, mode='train', valid_ratio=0.2, resize_height=256, resize_width=256):\n        \"\"\"\n        Args:\n            csv_path (string): csv \u6587\u4ef6\u8def\u5f84\n            img_path (string): \u56fe\u50cf\u6587\u4ef6\u6240\u5728\u8def\u5f84\n            mode (string): \u8bad\u7ec3\u6a21\u5f0f\u8fd8\u662f\u6d4b\u8bd5\u6a21\u5f0f\n            valid_ratio (float): \u9a8c\u8bc1\u96c6\u6bd4\u4f8b\n        \"\"\"\n        \n        # \u9700\u8981\u8c03\u6574\u540e\u7684\u7167\u7247\u5c3a\u5bf8\uff0c\u6211\u8fd9\u91cc\u6bcf\u5f20\u56fe\u7247\u7684\u5927\u5c0f\u5c3a\u5bf8\u4e0d\u4e00\u81f4#\n        self.resize_height = resize_height\n        self.resize_width = resize_width\n\n        self.file_path = file_path\n        self.mode = mode\n\n        # \u8bfb\u53d6 csv \u6587\u4ef6\n        # \u5229\u7528pandas\u8bfb\u53d6csv\u6587\u4ef6\n        self.data_info = pd.read_csv(csv_path, header=None)  #header=None\u662f\u53bb\u6389\u8868\u5934\u90e8\u5206\n        # \u8ba1\u7b97 length\n        self.data_len = len(self.data_info.index) - 1\n        self.train_len = int(self.data_len * (1 - valid_ratio))\n\n        \n\n        if mode == 'train':\n            # \u7b2c\u4e00\u5217\u5305\u542b\u56fe\u50cf\u6587\u4ef6\u7684\u540d\u79f0\n            self.train_image = np.asarray(self.data_info.iloc[1:self.train_len, 0])  #self.data_info.iloc[1:,0]\u8868\u793a\u8bfb\u53d6\u7b2c\u4e00\u5217\uff0c\u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u5230train_len\n            # \u7b2c\u4e8c\u5217\u662f\u56fe\u50cf\u7684 label\n            self.train_label = np.asarray(self.data_info.iloc[1:self.train_len, 1])\n            self.image_arr = self.train_image \n            self.label_arr = self.train_label\n        elif mode == 'valid':\n            self.valid_image = np.asarray(self.data_info.iloc[self.train_len:, 0])  \n            self.valid_label = np.asarray(self.data_info.iloc[self.train_len:, 1])\n            self.image_arr = self.valid_image\n            self.label_arr = self.valid_label\n        elif mode == 'test':\n            self.test_image = np.asarray(self.data_info.iloc[1:, 0])\n            self.image_arr = self.test_image\n            \n        self.real_len = len(self.image_arr)\n\n        print('Finished reading the {} set of Leaves Dataset ({} samples found)'\n              .format(mode, self.real_len))\n\n    def __getitem__(self, index):\n        # \u4ece image_arr\u4e2d\u5f97\u5230\u7d22\u5f15\u5bf9\u5e94\u7684\u6587\u4ef6\u540d\n        single_image_name = self.image_arr[index]\n\n        # \u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\n        img_as_img = Image.open(self.file_path + single_image_name)\n\n        #\u5982\u679c\u9700\u8981\u5c06RGB\u4e09\u901a\u9053\u7684\u56fe\u7247\u8f6c\u6362\u6210\u7070\u5ea6\u56fe\u7247\u53ef\u53c2\u8003\u4e0b\u9762\u4e24\u884c\n#         if img_as_img.mode != 'L':\n#             img_as_img = img_as_img.convert('L')\n\n        #\u8bbe\u7f6e\u597d\u9700\u8981\u8f6c\u6362\u7684\u53d8\u91cf\uff0c\u8fd8\u53ef\u4ee5\u5305\u62ec\u4e00\u7cfb\u5217\u7684nomarlize\u7b49\u7b49\u64cd\u4f5c\n        if self.mode == 'train':\n            transform = transforms.Compose([\n                transforms.Resize((224, 224)),\n                transforms.RandomHorizontalFlip(p=0.5),              \n                #transforms.RandomResizedCrop(size=224, scale=(0.8, 1.0)),\n                #transforms.RandomRotation(degrees=15),\n                #transforms.RandomHorizontalFlip(),\n                #transforms.CenterCrop(size=224),\n                transforms.ToTensor(),\n                #transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n            ])\n        else:\n            # valid\u548ctest\u4e0d\u505a\u6570\u636e\u589e\u5f3a\n            transform = transforms.Compose([\n                transforms.Resize((224, 224)),\n                transforms.CenterCrop(size=224),\n                transforms.ToTensor(),\n                #transforms.Normalize([0.485, 0.456, 0.406],[0.229, 0.224, 0.225])\n            ])\n        \n        img_as_img = transform(img_as_img)\n        \n        if self.mode == 'test':\n            return img_as_img\n        else:\n            # \u5f97\u5230\u56fe\u50cf\u7684 string label\n            label = self.label_arr[index]\n            # number label\n            number_label = class_to_num[label]\n\n            return img_as_img, number_label  #\u8fd4\u56de\u6bcf\u4e00\u4e2aindex\u5bf9\u5e94\u7684\u56fe\u7247\u6570\u636e\u548c\u5bf9\u5e94\u7684label\n\n    def __len__(self):\n        return self.real_len\n","2e50b12e":"\ntrain_path = '..\/input\/classify-leaves\/train.csv'\ntest_path = '..\/input\/classify-leaves\/test.csv'\n# csv\u6587\u4ef6\u4e2d\u5df2\u7ecfimages\u7684\u8def\u5f84\u4e86\uff0c\u56e0\u6b64\u8fd9\u91cc\u53ea\u5230\u4e0a\u4e00\u7ea7\u76ee\u5f55\nimg_path = '..\/input\/classify-leaves\/'","304bd9b9":"train_dataset = LeavesData(train_path, img_path, mode='train')\nval_dataset = LeavesData(train_path, img_path, mode='valid')\ntest_dataset = LeavesData(test_path, img_path, mode='test')","b44524a7":"\n# \u5b9a\u4e49data loader\ntrain_loader = torch.utils.data.DataLoader(\n        dataset=train_dataset,\n        batch_size=224, \n        shuffle=True,\n        num_workers=8,\n        pin_memory=True\n    )\n\nval_loader = torch.utils.data.DataLoader(\n        dataset=val_dataset,\n        batch_size=224, \n        shuffle=False,\n        num_workers=8,\n        pin_memory=True\n    )\ntest_loader = torch.utils.data.DataLoader(\n        dataset=test_dataset,\n        batch_size=64, \n        shuffle=False,\n        num_workers=8,\n        pin_memory=True\n    )\n \n# \u662f\u5426\u8981\u51bb\u4f4f\u6a21\u578b\u7684\u524d\u9762\u4e00\u4e9b\u5c42\ndef set_parameter_requires_grad(model, feature_extracting):\n    if feature_extracting:\n        model = model\n        for param in model.parameters():\n            param.requires_grad = False\n# resnet152\u6a21\u578b\ndef res_model(num_classes, feature_extract = False, use_pretrained=True):\n\n    model_ft = models.resnext101_32x8d(pretrained=use_pretrained)\n    set_parameter_requires_grad(model_ft, feature_extract)\n    num_ftrs = model_ft.fc.in_features\n    model_ft.fc = nn.Sequential(nn.Linear(num_ftrs, num_classes))\n\n    return model_ft\n","901d63e3":"\nmodel_path = '.\/input\/resnext101-32x8d\/pre_res_model2.ckpt'\n\n\nsaveFileName = '.\/2submission.csv'\n\n## predict\nmodel = res_model(176)\n\n# print(model)\n# input()\n# create model and load weights from checkpoint\nmodel = nn.DataParallel(model).cuda()\nmodel.load_state_dict(torch.load(model_path))\n\n\n# Make sure the model is in eval mode.\n# Some modules like Dropout or BatchNorm affect if the model is in training mode.\nmodel.eval()\n\n# Initialize a list to store the predictions.\npredictions = []\n# Iterate the testing set by batches.\nfor batch in tqdm(test_loader):\n    \n    imgs = batch\n    with torch.no_grad():\n        logits = model(imgs.to(device))\n    \n    # Take the class with greatest logit as prediction and record it.\n    predictions.extend(logits.argmax(dim=-1).cpu().numpy().tolist())\n\npreds = []\nfor i in predictions:\n    preds.append(num_to_class[i])\n\n\n\ntest_data = pd.read_csv(test_path)\ntest_data['label'] = pd.Series(preds)\nsubmission = pd.concat([test_data['image'], test_data['label']], axis=1)\nsubmission.to_csv(saveFileName, index=False)\nprint(\"Done!!!!!!!!!!!!!!!!!!!!!!!!!!!\")","066f0dae":"\u9884\u6d4b\u9636\u6bb5"}}