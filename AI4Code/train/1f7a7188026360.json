{"cell_type":{"8f9e0724":"code","0fe6a0e3":"code","49968f2a":"code","0e122107":"code","59940100":"code","ccca312a":"code","c480dd78":"code","f1b2be32":"code","ab379d52":"code","0a3a924d":"code","98406329":"code","c03db724":"code","dc9cf193":"code","2c41ea1a":"code","0c84e4fe":"code","fa49a6e0":"code","8b62567b":"code","71d193ad":"code","48b9d194":"code","8e4d917a":"code","1d94f4d2":"code","39b75017":"code","628e3ce4":"code","e3bd559d":"code","3b9cc561":"code","301a73ac":"code","2a506de3":"code","bbf09372":"code","89dcbb7f":"code","26f553e2":"code","ee698a07":"code","51c165aa":"code","eb45e232":"code","0158eec8":"code","c80e53c7":"code","87b63009":"code","5ee6c80b":"code","6165c93e":"code","4f1d1875":"code","8938798a":"code","61f24dfb":"code","88c41d60":"code","2e98880c":"code","ff2f4ca2":"code","0e75f8d5":"code","9f946159":"code","61633a8e":"code","14677eb1":"code","caeccafd":"code","6e0fd377":"code","86b084ec":"code","e1af961b":"code","05314281":"code","cf50a4d9":"code","fd71d69e":"code","52f37494":"code","c7157e7f":"code","5318f4e0":"code","5e075bf5":"code","a3fd349e":"code","0c484e1c":"code","148982d4":"code","b1fe9889":"code","e138337a":"code","df4c5ded":"code","f8a8ab8a":"code","140c36d7":"code","5a290a48":"code","eabbf02d":"code","ebe51525":"code","0ac1e237":"code","cd2945aa":"code","26601774":"code","40270458":"code","d173ea34":"code","a7ff4cdd":"code","e4ed5c86":"code","769432bc":"code","288b023e":"code","0f9ac3fb":"code","4e2a4c49":"code","fd60e46f":"code","8b5a8457":"code","08863c6d":"code","0f330744":"code","002e210e":"code","3f3a3566":"code","23a2dd7f":"code","dfc6b996":"markdown","e4ca0e2d":"markdown","0e514bd5":"markdown","0a9a36ef":"markdown","49d7dd8d":"markdown","b1906c24":"markdown","df38528d":"markdown","6d902d73":"markdown","616e12e6":"markdown","7a71f10f":"markdown","33f2e81a":"markdown","86f97ded":"markdown","412ed6c7":"markdown","5d9dddfe":"markdown","d5d582a9":"markdown","9a6f8bc7":"markdown","715ea848":"markdown","3d0ebf0b":"markdown","b1804339":"markdown","24de14ef":"markdown","dc29c073":"markdown","10c07c84":"markdown","930151b0":"markdown","d91f090e":"markdown","45cecbf8":"markdown","187a56da":"markdown","6c53b4af":"markdown","789c21d8":"markdown","306b65cb":"markdown","d2d9d51e":"markdown","7016dba5":"markdown","922d95e8":"markdown","65f1431a":"markdown","b12e0a90":"markdown","f6fa782d":"markdown","5250e54a":"markdown","c3eb165e":"markdown","13af8bc8":"markdown","eefc35ec":"markdown","50631dc5":"markdown","9c4b871f":"markdown","271fd27a":"markdown","a79fe590":"markdown","193e6eec":"markdown","bd8e68c8":"markdown","f9443e6f":"markdown","13856724":"markdown","4d4f3d39":"markdown","79646278":"markdown","a5e7a650":"markdown","f69d1083":"markdown","4bb8794c":"markdown","9610defa":"markdown","800a1628":"markdown","45a798eb":"markdown","bf8cd52a":"markdown","bdec4d3e":"markdown","bb44ac9b":"markdown","b9a82e80":"markdown","ec04fe11":"markdown","c3c73fde":"markdown","e5ae6e2c":"markdown","1fddd7b4":"markdown","988abbf5":"markdown","2ce1df5c":"markdown","410e2a1b":"markdown","f508a377":"markdown","e31dd1b3":"markdown","61498b15":"markdown","090e52cc":"markdown","aff57e72":"markdown","f7d6ac8f":"markdown","47aa946a":"markdown","978bd13a":"markdown","77c88388":"markdown","c7ce5124":"markdown","0c86e521":"markdown","672a7bc1":"markdown","5d42e844":"markdown","44d33604":"markdown","0ebc5fb4":"markdown","e935ec5c":"markdown","d7642ebd":"markdown","712181b0":"markdown","d66bcf01":"markdown","95cf7a1a":"markdown","a2c6575d":"markdown","58a100f1":"markdown","53855b35":"markdown","c2eceb5d":"markdown","cf064998":"markdown","6fec69d6":"markdown","cf0ecb4f":"markdown","ba27ea9f":"markdown","5b3c7893":"markdown","0c7a03b3":"markdown","b78d001c":"markdown","d3a2ac29":"markdown","87ce80e3":"markdown","d80def2e":"markdown","4ca7d8d0":"markdown","325a7304":"markdown","be2483ac":"markdown","e501021a":"markdown","85e59670":"markdown","02ce718e":"markdown","a88a593c":"markdown","be94ff02":"markdown","44f28f1f":"markdown","01e9e6a0":"markdown","06735908":"markdown"},"source":{"8f9e0724":"from IPython.display import HTML\nHTML(\"\"\"<style>h1,h2,h3 {margin: 1em 0 0.5em 0;font-weight: 600;font-family:'Titillium Web', sans-serif;position: relative;  font-size: 36px;line-height: 40px;padding: 15px 15px 15px 2.5%;color: #00018D;box-shadow: inset 0 0 0 1px rgba(97,0,45, 1), inset 0 0 5px rgba(53,86,129, 1),inset -285px 0 35px #F2D8FF;border-radius: 0 10px 0 15px;background: #FFD8B2}<\/style>\"\"\")","0fe6a0e3":"def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) \/\/ 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))","49968f2a":"x = 3\nprint(x, type(x))","0e122107":"print(x + 1)   # Addition\nprint(x - 1)   # Subtraction\nprint(x * 2)   # Multiplication\nprint(x ** 2)  # Exponentiation","59940100":"x += 1\nprint(x)\nx *= 2\nprint(x)","ccca312a":"y = 2.5\nprint(type(y))\nprint(y, y + 1, y * 2, y ** 2)","c480dd78":"t, f = True, False\nprint(type(t))","f1b2be32":"print(t and f) # Logical AND;\nprint(t or f)  # Logical OR;\nprint(not t)   # Logical NOT;\nprint(t != f)  # Logical XOR;","ab379d52":"hello = 'hello'   # String literals can use single quotes\nworld = \"world\"   # or double quotes; it does not matter\nprint(hello, len(hello))","0a3a924d":"hw = hello + ' ' + world  # String concatenation\nprint(hw)","98406329":"hw12 = '{} yes  {} {}'.format(hello, world, 12)  # string formatting\nprint(hw12)","c03db724":"s = \"hello\"\nprint(s.capitalize())  # Capitalize a string\nprint(s.upper())       # Convert a string to uppercase; prints \"HELLO\"\nprint(s.rjust(7))      # Right-justify a string, padding with spaces\nprint(s.center(7))     # Center a string, padding with spaces\nprint(s.replace('l', '(ell)'))  # Replace all instances of one substring with another\nprint('  world '.strip())  # Strip leading and trailing whitespace","dc9cf193":"xs = [3, 1, 2]   # Create a list\nprint(xs, xs[2])\nprint(xs[-1])     # Negative indices count from the end of the list; prints \"2\"","2c41ea1a":"xs[2] = 'foo'    # Lists can contain elements of different types\nprint(xs)","0c84e4fe":"xs.append('bar') # Add a new element to the end of the list\nprint(xs)  ","fa49a6e0":"x = xs.pop()     # Remove and return the last element of the list\nprint(x, xs)","8b62567b":"nums = list(range(5))    # range is a built-in function that creates a list of integers\nprint(nums)         # Prints \"[0, 1, 2, 3, 4]\"\nprint(nums[2:4])    # Get a slice from index 2 to 4 (exclusive); prints \"[2, 3]\"\nprint(nums[2:])     # Get a slice from index 2 to the end; prints \"[2, 3, 4]\"\nprint(nums[:2])     # Get a slice from the start to index 2 (exclusive); prints \"[0, 1]\"\nprint(nums[:])      # Get a slice of the whole list; prints [\"0, 1, 2, 3, 4]\"\nprint(nums[:-1])    # Slice indices can be negative; prints [\"0, 1, 2, 3]\"\nnums[2:4] = [8, 9] # Assign a new sublist to a slice\nprint(nums)         # Prints \"[0, 1, 8, 9, 4]\"","71d193ad":"d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data\nprint(d['cat'])       # Get an entry from a dictionary; prints \"cute\"\nprint('cat' in d)     # Check if a dictionary has a given key; prints \"True\"","48b9d194":"d['fish'] = 'wet'    # Set an entry in a dictionary\nprint(d['fish'])      # Prints \"wet\"","8e4d917a":"print(d.get('monkey', 'N\/A'))  # Get an element with a default; prints \"N\/A\"\nprint(d.get('fish', 'N\/A'))    # Get an element with a default; prints \"wet\"","1d94f4d2":"del d['fish']        # Remove an element from a dictionary\nprint(d.get('fish', 'N\/A')) # \"fish\" is no longer a key; prints \"N\/A\"","39b75017":"d = {(x, x + 1): x for x in range(10)}  # Create a dictionary with tuple keys\nt = (5, 6)       # Create a tuple\nprint(type(t))\nprint(d[t])       \n\nprint(d[(1, 2)])","628e3ce4":"d[0] = 100 # you can change a value in the dictionary...\nprint(d)","e3bd559d":"\nx = -15\n\nif x == 0:\n    print(x, \"is zero\")\nelif x > 0:\n    print(x, \"is positive\")\nelif x < 0:\n    print(x, \"is negative\")\nelse:\n    print(x, \"is unlike anything I've ever seen...\")","3b9cc561":"for N in [2, 3, 5, 7]:\n    print(N, end=' ') # print all on same line","301a73ac":"for i in range(10): # generate a list\n    print(i, end=' ')","2a506de3":"animals = ['cat', 'dog', 'monkey']\nfor animal in animals:\n    print(animal)","bbf09372":"animals = ['cat', 'dog', 'monkey']\nfor idx, animal in enumerate(animals):\n    print('#{}: {}'.format(idx + 1, animal))","89dcbb7f":"d = {'person': 2, 'cat': 4, 'spider': 8}\nfor animal, legs in d.items():\n    print('A {} has {} legs'.format(animal, legs))","26f553e2":"i = 0\nwhile i < 10:\n    print(i, end=' ')\n    i += 1","ee698a07":"nums = [0, 1, 2, 3, 4]\nsquares = []\nfor x in nums:\n    squares.append(x ** 2)\nprint(squares)","51c165aa":"nums = [0, 1, 2, 3, 4]\nsquares = [x ** 2 for x in nums]\nprint(squares)","eb45e232":"nums = [0, 1, 2, 3, 4]\neven_squares = [x ** 2 for x in nums if x % 2 == 0]\nprint(even_squares)","0158eec8":"nums = [0, 1, 2, 3, 4]\neven_num_to_square = {x: x ** 2 for x in nums if x % 2 == 0}\nprint(even_num_to_square)","c80e53c7":"def sign(x):\n    if x > 0:\n        return 'positive'\n    elif x < 0:\n        return 'negative'\n    else:\n        return 'zero'\n\nfor x in [-1, 0, 1]:\n    print(sign(x))","87b63009":"def hello(name, loud=False):\n    if loud:\n        print('HELLO, {}'.format(name.upper()))\n    else:\n        print('Hello, {}!'.format(name))\n\nhello('Bob')\nhello('Fred', loud=True)","5ee6c80b":"class Greeter:\n\n    # Constructor\n    def __init__(self, name):\n        self.name = name  # Create an instance variable\n\n    # Instance method\n    def greet(self, loud=False):\n        if loud:\n          print('HELLO, {}'.format(self.name.upper()))\n        else:\n          print('Hello, {}!'.format(self.name))\n\ng = Greeter('Fred')  # Construct an instance of the Greeter class\ng.greet()            # Call an instance method; prints \"Hello, Fred\"\ng.greet(loud=True)   # Call an instance method; prints \"HELLO, FRED!\"","6165c93e":"import numpy as np","4f1d1875":"a = np.array([1, 2, 3])  # Create a rank 1 array","8938798a":"print(type(a), a.shape, a[0], a[1], a[2])\na[0] = 5                 # Change an element of the array\nprint(a)                  ","61f24dfb":"b = np.array([[1,2],[3,4]])   # Create a rank 2 array\nprint(b)","88c41d60":"print(b.shape)","2e98880c":"a = np.zeros((2,2))  # Create an array of all zeros\nprint(a)","ff2f4ca2":"b = np.ones((1,2))   # Create an array of all ones\nprint(b)","0e75f8d5":"c = np.full((2,2), 7) # Create a constant array\nprint(c)","9f946159":"d = np.eye(2)        # Create a 2x2 identity matrix\nprint(d)","61633a8e":"e = np.random.random((2,2)) # Create an array filled with random values\nprint(e)","14677eb1":"# Create the following rank 2 array with shape (3, 4)\n# [[ 1  2  3  4]\n#  [ 5  6  7  8]\n#  [ 9 10 11 12]]\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n\n# Use slicing to pull out the subarray consisting of the first 2 rows\n# and columns 1 and 2; b is the following array of shape (2, 2):\n# [[2 3]\n#  [6 7]]\nb = a[:2, 1:3]\nprint(b)","caeccafd":"print(a[0, 1])\nb[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]\nprint(a[0, 1]) ","6e0fd377":"# Create the following rank 2 array with shape (3, 4)\na = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\nprint(a)","86b084ec":"row_r1 = a[1, :]    # Rank 1 view of the second row of a  \nrow_r2 = a[1:2, :]  # Rank 2 view of the second row of a\nrow_r3 = a[[1], :]  # Rank 2 view of the second row of a\nprint(row_r1, row_r1.shape)\nprint(row_r2, row_r2.shape)\nprint(row_r3, row_r3.shape)","e1af961b":"# We can make the same distinction when accessing columns of an array:\ncol_r1 = a[:, 1]\ncol_r2 = a[:, 1:2]\nprint(col_r1, col_r1.shape)\nprint()\nprint(col_r2, col_r2.shape)","05314281":"a = np.array([[1,2], [3, 4], [5, 6]])\n\n# An example of integer array indexing.\n# The returned array will have shape (3,) and \nprint(a[[0, 1, 2], [0, 1, 0]])\n\n# The above example of integer array indexing is equivalent to this:\nprint(np.array([a[0, 0], a[1, 1], a[2, 0]]))","cf50a4d9":"# When using integer array indexing, you can reuse the same\n# element from the source array:\nprint(a[[0, 0], [1, 1]])\n\n# Equivalent to the previous integer array indexing example\nprint(np.array([a[0, 1], a[0, 1]]))","fd71d69e":"# Create a new array from which we will select elements\na = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nprint(a)","52f37494":"# Create an array of indices\nb = np.array([0, 2, 0, 1])\n\n# Select one element from each row of a using the indices in b\nprint(a[np.arange(4), b])  # Prints \"[ 1  6  7 11]\"","c7157e7f":"# Mutate one element from each row of a using the indices in b\na[np.arange(4), b] += 10\nprint(a)","5318f4e0":"import numpy as np\n\na = np.array([[1,2], [3, 4], [5, 6]])\n\nbool_idx = (a > 2)  # Find the elements of a that are bigger than 2;\n                    # this returns a numpy array of Booleans of the same\n                    # shape as a, where each slot of bool_idx tells\n                    # whether that element of a is > 2.\n\nprint(bool_idx)","5e075bf5":"# We use boolean array indexing to construct a rank 1 array\n# consisting of the elements of a corresponding to the True values\n# of bool_idx\nprint(a[bool_idx])\n\n# We can do all of the above in a single concise statement:\nprint(a[a > 2])","a3fd349e":"x = np.array([1, 2])  # Let numpy choose the datatype\ny = np.array([1.0, 2.0])  # Let numpy choose the datatype\nz = np.array([1, 2], dtype=np.int64)  # Force a particular datatype\n\nprint(x.dtype, y.dtype, z.dtype)","0c484e1c":"x = np.array([[1,2],[3,4]], dtype=np.float64)\ny = np.array([[5,6],[7,8]], dtype=np.float64)\n\n# Elementwise sum; both produce the array\nprint(x + y)","148982d4":"# Elementwise difference; both produce the array\nprint(x - y)\nprint(np.subtract(x, y))","b1fe9889":"# Elementwise product; both produce the array\nprint(x * y)\nprint(np.multiply(x, y))","e138337a":"# Elementwise division; both produce the array\n# [[ 0.2         0.33333333]\n#  [ 0.42857143  0.5       ]]\nprint(x \/ y)\nprint(np.divide(x, y))","df4c5ded":"# Elementwise square root; produces the array\n# [[ 1.          1.41421356]\n#  [ 1.73205081  2.        ]]\nprint(np.sqrt(x))","f8a8ab8a":"x = np.array([[1,2],[3,4]])\ny = np.array([[5,6],[7,8]])\n\nv = np.array([9,10])\nw = np.array([11, 12])\n\n# Inner product of vectors; both produce 219\nprint(v.dot(w))\nprint(np.dot(v, w))","140c36d7":"print(v @ w)","5a290a48":"# Matrix \/ vector product; both produce the rank 1 array [29 67]\nprint(x.dot(v))\nprint(np.dot(x, v))\nprint(x @ v)","eabbf02d":"# Matrix \/ matrix product; both produce the rank 2 array\n# [[19 22]\n#  [43 50]]\nprint(x.dot(y))\nprint(np.dot(x, y))\nprint(x @ y)","ebe51525":"x = np.array([[1, 2], [3, 4], [5, 6]])\n\nprint(np.max(x))  # Compute sum of all elements; prints \"21\"\nprint(np.min(x))  # Compute sum of all elements; prints \"21\"\nprint(np.sum(x))  # Compute sum of all elements; prints \"21\"","0ac1e237":"x = np.array([[1, 2], [5, 3], [4, 6]])\n\nprint(np.max(x, axis=0))  # Compute max of each column; prints \"[5 6]\"\nprint(np.max(x, axis=1))  # Compute max of each row; prints \"[2 5 6]\"","cd2945aa":"x = np.array([[1, 2], [3, 4], [5, 6]])\n\nprint(x)\nprint(\"transpose\\n\", x.T)","26601774":"v = np.array([[1,2,3]])\nprint(v )\nprint(\"transpose\\n\", v.T)","40270458":"# We will add the vector v to each row of the matrix x,\n# storing the result in the matrix y\nx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 0, 1])\ny = np.empty_like(x)   # Create an empty matrix with the same shape as x\n\n# Add the vector v to each row of the matrix x with an explicit loop\nfor i in range(4):\n    y[i, :] = x[i, :] + v\n\nprint(y)","d173ea34":"vv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other\nprint(vv)                # Prints \"[[1 0 1]\n                         #          [1 0 1]\n                         #          [1 0 1]\n                         #          [1 0 1]]\"","a7ff4cdd":"y = x + vv  # Add x and vv elementwise\nprint(y)","e4ed5c86":"import numpy as np\n\n# We will add the vector v to each row of the matrix x,\n# storing the result in the matrix y\nx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 0, 1])\ny = x + v  # Add v to each row of x using broadcasting\nprint(y)","769432bc":"# Compute outer product of vectors\nv = np.array([1,2,3])  # v has shape (3,)\nw = np.array([4,5])    # w has shape (2,)\n# To compute an outer product, we first reshape v to be a column\n# vector of shape (3, 1); we can then broadcast it against w to yield\n# an output of shape (3, 2), which is the outer product of v and w:\n\nprint(np.reshape(v, (3, 1)) * w)","288b023e":"# Add a vector to each row of a matrix\nx = np.array([[1,2,3], [4,5,6]])\n# x has shape (2, 3) and v has shape (3,) so they broadcast to (2, 3),\n# giving the following matrix:\n\nprint(x + v)","0f9ac3fb":"# Add a vector to each column of a matrix\n# x has shape (2, 3) and w has shape (2,).\n# If we transpose x then it has shape (3, 2) and can be broadcast\n# against w to yield a result of shape (3, 2); transposing this result\n# yields the final result of shape (2, 3) which is the matrix x with\n# the vector w added to each column. Gives the following matrix:\n\nprint((x.T + w).T)","4e2a4c49":"# Another solution is to reshape w to be a row vector of shape (2, 1);\n# we can then broadcast it directly against x to produce the same\n# output.\nprint(x + np.reshape(w, (2, 1)))","fd60e46f":"# Multiply a matrix by a constant:\n# x has shape (2, 3). Numpy treats scalars as arrays of shape ();\n# these can be broadcast together to shape (2, 3), producing the\n# following array:\nprint(x * 2)","8b5a8457":"import matplotlib.pyplot as plt","08863c6d":"# Compute the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y)\n\n# Show the figure.\nplt.show()","0f330744":"y_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y_sin, label='Sine')\nplt.plot(x, y_cos, label='Cosine')\nplt.legend() # uses the label arguments given above\n\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\n\n# Show the figure.\nplt.show()","002e210e":"x = np.random.rand(50)\ny = np.random.rand(50)\ncolors = np.random.randint(0, 2, 50)\n\nplt.scatter(x, y, c=colors)\n\nplt.show()","3f3a3566":"# Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Set up a subplot grid that has height 2 and width 1,\n# and set the first such subplot as active.\nplt.subplot(2, 1, 1)\n\n# Make the first plot\nplt.plot(x, y_sin)\nplt.title('Sine')\n\n# Set the second subplot as active, and make the second plot.\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n\n# Adjust spacing between subplots\nplt.subplots_adjust(hspace = 0.4)\n\n# Show the figure.\nplt.show()","23a2dd7f":"from matplotlib.cbook import get_sample_data\n\nimg_file = get_sample_data('grace_hopper.jpg')\n\nimg = plt.imread(img_file)\nplt.imshow(img)\nplt.show()","dfc6b996":"#### Slicing","e4ca0e2d":"Python is a high-level, dynamically typed multiparadigm programming\nlanguage. Python code is often said to be almost like pseudocode, since\nit allows you to express very powerful ideas in very few lines of code\nwhile being very readable. As an example, here is an implementation of\nthe classic quicksort algorithm in Python:","0e514bd5":"For example, suppose that we want to add a constant vector to each row\nof a matrix. We could do it like this:","0a9a36ef":"### Plotting","49d7dd8d":"The code in the following cell will raise a `SyntaxError` because it\ntries to use a variable name that begins with a number, which is not\nallowed in Python.\n\nRun the code, and look for three key \u201cingredients\u201d in the error message\nthat is printed to the output:\n\n-   the type of error. In this case, it will be a `SyntaxError`. This\n    type of error is raised by the *parser*, which checks to see if the\n    code is valid before passing it to the *runtime* to execute the\n    code.\n-   an explanation of the error, if available. In this case, the\n    explanation is \u201cinvalid syntax\u201d.\n-   details about where the error was detected. At what line of code,\n    and what point in the line, did the error occur?","b1906c24":"When programming, frequently we want to transform one type of data into\nanother. As a simple example, consider the following code that computes\nsquare numbers:","df38528d":"In more advanced use case, you may find yourself needing to change the\ndimensions of a certain matrix. This is often the case in machine\nlearning applications where a certain model expects a certain shape for\nthe inputs that is different from your dataset. numpy's `reshape()`\nmethod is useful in these cases.\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-reshape.png)","6d902d73":"Another useful, basic, plot is the `scatter` plot:","616e12e6":"Boolean array indexing: Boolean array indexing lets you pick out\narbitrary elements of an array. Frequently this type of indexing is used\nto select the elements of an array that satisfy some condition. Here is\nan example:","7a71f10f":"Python includes several built-in container types: lists, dictionaries,\nsets, and tuples.","33f2e81a":"Integers and floats work as you would expect from other languages:","86f97ded":"A list is the Python equivalent of an array, but is resizeable and can\ncontain elements of different types:","412ed6c7":"The most important function in `matplotlib` is `plot`, which allows you\nto plot 2D data. Here is a simple example:","5d9dddfe":"A dictionary stores (key, value) pairs, similar to a `Map` in Java or an\nobject in Javascript. You can use it like this:","d5d582a9":"For example, you can perform an elementwise sum on two arrays using\neither the + operator or the `add()` function.\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-arrays-adding-1.png)\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-arithmetic.png)","9a6f8bc7":"We can also use these methods to produce multi-dimensional arrays, as\nlong as we pass them a tuple describing the dimensions of the matrix we\nwant to create:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-ones-zeros-random.png)\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-3d-array-creation.png)","715ea848":"And this works for other operations as well, not only addition:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-array-subtract-multiply-divide.png)","3d0ebf0b":"Note that the range starts at zero by default, and that by convention\nthe top of the range is not included in the output.","b1804339":"When you are working with Python, you are likely to come across errors.\nWhen an error occurs, Python tries to explain to you what went wrong,\nbut it takes some experience to interpret the error messages.","24de14ef":"Numpy is the core library for scientific computing in Python. It\nprovides a high-performance multidimensional array object, and tools for\nworking with these arrays. If you are already familiar with MATLAB, you\nmight find this [tutorial](http:\/\/wiki.scipy.org\/NumPy_for_Matlab_Users)\nuseful to get started with Numpy.","dc29c073":"For brevity we have left out a lot of details about numpy array\nindexing; if you want to know more you should read the documentation.","10c07c84":"#### Lists","930151b0":"Broadcasting typically makes your code more concise and faster, so you\nshould strive to use it where possible.","d91f090e":"#### Tuples","45cecbf8":"**Attribution**:\n\n-   Parts of this notebook are adapted from a tutorial from CS231N at\n    Stanford\n    University , which\n    is shared under the [MIT\n    license]((https:\/\/opensource.org\/licenses\/MIT)).\n-   Parts of this notebook are adapted from Jake VanderPlas\u2019s [Whirlwind\n    Tour of\n    Python](https:\/\/colab.research.google.com\/github\/jakevdp\/WhirlwindTourOfPython\/blob\/master\/Index.ipynb),\n    which is shared under the [Creative Commons CC0 Public Domain\n    Dedication\n    license](https:\/\/github.com\/jakevdp\/WhirlwindTourOfPython\/blob\/master\/LICENSE).\n-   The visualizations in this notebook are from [A Visual Intro to\n    NumPy](http:\/\/jalammar.github.io\/visual-numpy\/) by Jay Alammar,\n    which is licensed under a Creative Commons\n    Attribution-NonCommercial-ShareAlike 4.0 International License.\nCredit of this work: (https:\/\/scholar.google.com\/citations?user=41k4_N8AAAAJ)","187a56da":"Broadcasting is a powerful mechanism that allows numpy to work with\narrays of different shapes when performing arithmetic operations.\nFrequently we have a smaller array and a larger array, and we want to\nuse the smaller array multiple times to perform some operation on the\nlarger array.","6c53b4af":"This tutorial is an introduction to Python and the `numpy` library for\nthose who are already familiar with programming in another language.\n\nIn this tutorial, we will cover:\n\n-   Basic Python: Basic data types, Containers (Lists, Dictionaries,,\n    Tuples), Control Flow Statements, Errors and Exceptions, Functions,\n    Classes\n-   `numpy`: Arrays, Array indexing, Datatypes, Array math, Broadcasting\n-   `matplotlib`: Basic Visualization, Subplots, Image Visualization","789c21d8":"To use Numpy, we first need to import the `numpy` package. By\nconvention, we import it using the alias `np`. Then, when we want to use\nmodules or functions in this library, we preface them with `np.`","306b65cb":"Here are some more examples. Run the following cells, one at a time.\nEach will trigger an error message. Try to parse the error message by\nlooking for the three \u201cingredients\u201d.\n\nLook up each error type in [the\ndocumentation](https:\/\/docs.python.org\/3\/library\/exceptions.html). Under\nwhat conditions is this error raised?","d2d9d51e":"Notice that in the cell above, there is a comment at the end of each\nline. Comments in Python are indicated by a pound sign (`#`), and\nanything on the line following the pound sign is ignored. You can have\ninline comments that follow a statement on the same line, like the ones\nabove, or a comment on its own line.","7016dba5":"This works; however when the matrix `x` is very large, computing an\nexplicit loop in Python could be slow. Note that adding the vector v to\neach row of the matrix `x` is equivalent to forming a matrix `vv` by\nstacking multiple copies of `v` vertically, then performing elementwise\nsummation of `x` and `vv`. We could implement this approach like this:","922d95e8":"### Functions","65f1431a":"Now let's look at the operations:","b12e0a90":"To create a `numpy` array with more dimensions, we can pass nested\nlists, like this:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-array-create-2d.png)\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-3d-array.png)","f6fa782d":"The line `y = x + v` works even though `x` has shape `(4, 3)` and `v`\nhas shape `(3,)` due to broadcasting; this line works as if v actually\nhad shape `(4, 3)`, where each row was a copy of `v`, and the sum was\nperformed elementwise.\n\nBroadcasting two arrays together follows these rules:\n\n1.  If the arrays do not have the same rank, prepend the shape of the\n    lower rank array with 1s until both shapes have the same length.\n2.  The two arrays are said to be compatible in a dimension if they have\n    the same size in the dimension, or if one of the arrays has size 1\n    in that dimension.\n3.  The arrays can be broadcast together if they are compatible in all\n    dimensions.\n4.  After broadcasting, each array behaves as if it had shape equal to\n    the elementwise maximum of shapes of the two input arrays.\n5.  In any dimension where one array had size 1 and the other array had\n    size greater than 1, the first array behaves as if it were copied\n    along that dimension\n\nIf this explanation does not make sense, try reading the explanation\nfrom the\n[documentation](http:\/\/docs.scipy.org\/doc\/numpy\/user\/basics.broadcasting.html)\nor this [explanation](http:\/\/wiki.scipy.org\/EricsBroadcastingDoc).\n\nFunctions that support broadcasting are known as universal functions.\nYou can find the list of all universal functions in the\n[documentation](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/ufuncs.html#available-ufuncs).","5250e54a":"Two ways of accessing the data in the middle row of the array. Mixing\ninteger indexing with slices yields an array of lower rank, while using\nonly slices yields an array of the same rank as the original array:","c3eb165e":"By the way: note that you did not have to declare the variable `x` or\nspecify its type before you assigned a value to it. In Python, you can\ncreate a variable just by assigning something to it.","13af8bc8":"You can make this code simpler using a list comprehension:","eefc35ec":"With just a little bit of extra work we can easily plot multiple lines\nat once, and add a title, legend, and axis labels:","50631dc5":"This tutorial is designed to run as a Python notebook on Colab. We\u2019ll\ntake a closer look at Colab and its features in a separate tutorial, but\nfor now, here is what you need to know:\n\n-   When you see a \u201ccell\u201d with Python code in it, move your mouse over\n    the margin on the left side of the cell. A \\> button will appear -\n    click on that button to execute the code in the cell.\n-   The output of the code will appear underneath the cell.\n-   You can edit the code in the cell and press the \\> button again to\n    execute the modified code.\n\nAs you work through this tutorial, look at the code in each cell, and\ntry to predict its output before you run it! Then, run the cell and\ncheck your understanding. You can also try to modify the code and\nobserve the effect of your changes.","9c4b871f":"<div class=\"alert alert-block alert-info\">  \n<h1>If you like my work, please upvote ^ \ud83d\udc4d my code so that i will be motivated to share more valuable and helpful work on this competition \ud83d\ude0d<\/h1>\n        <\/p>\n<\/div>","271fd27a":"Every numpy array is a grid of elements of the same type. Numpy provides\na large set of numeric datatypes that you can use to construct arrays.\nNumpy tries to guess a datatype when you create an array, but functions\nthat construct arrays usually also include an optional argument to\nexplicitly specify the datatype. Here is an example:","a79fe590":"#### If-Else\n\nConditional statements, often referred to as *if-then* statements, allow\nthe programmer to execute certain pieces of code depending on some\nBoolean condition.\n\nA basic example of a Python conditional statement is this:","193e6eec":"Integer array indexing: When you index into numpy arrays using slicing,\nthe resulting array view will always be a subarray of the original\narray. In contrast, integer array indexing allows you to construct\narbitrary arrays using the data from another array. Here is an example:","bd8e68c8":"You can also use the `@` operator which is equivalent to numpy's `dot`\noperator.","f9443e6f":"The `matplotlib` library is very flexible, and you can create virtually\nany plot and modify its appearance in any way you might think of. If you\ndon\u2019t like the way your plot looks, fix it! Use the\n[documentation](http:\/\/matplotlib.org\/api\/pyplot_api.html) to learn\nmore.","13856724":"You can plot different things in the same figure using the `subplot`\nfunction. Here is an example:","4d4f3d39":"Numpy\n-----","79646278":"Notice the simplicity of the `for` loop: we specify the variable we want\nto use, the sequence we want to loop over, and use the \u201c`in`\u201d operator\nto link them together in an intuitive and readable way. More precisely,\nthe object to the right of the \u201c`in`\u201d can be any Python *iterator*.\n\nFor example, one of the most commonly-used iterators in Python is the\n`range` object, which generates a sequence of numbers:","a5e7a650":"We can create a `numpy` array by passing a Python list to `np.array()`.","f69d1083":"Basics of Python\n----------------","4bb8794c":"### Arrays","9610defa":"Introduction\n------------","800a1628":"It is easy to iterate over the keys in a dictionary:","45a798eb":"List comprehensions can also contain conditions:","bf8cd52a":"### Control Flow Statements","bdec4d3e":"Note especially the use of colons (`:`) and whitespace to denote\nseparate blocks of code.\n\nA *block* of code is a set of statements that should be treated as a\nunit. In C, for example, code blocks are denoted by curly braces:\n\n``` c\n\/\/ C code\nfor(int i=0; i<100; i++)\n   {\n      \/\/ curly braces indicate code block\n      total += i;\n   }\n```\n\nIn Python, code blocks are denoted by *indentation*:\n\n``` python\nfor i in range(100):\n    # indentation indicates code block\n    total += i\n```\n\nwhere all statements that should be evaluated within the \u201cblock\u201d are at\nthe same level of indentation.\n\nIndented code blocks are always preceded by a colon (`:`) on the\nprevious line.","bb44ac9b":"Python is a great general-purpose programming language on its own, but\nwith the help of a few popular *libraries* (`numpy`, `pandas`,\n`matplotlib`) it becomes a powerful environment for scientific\ncomputing.","b9a82e80":"Python implements all of the usual operators for Boolean logic, but uses\nEnglish words rather than symbols (`&&`, `||`, etc.):","ec04fe11":"#### While\n\nThe other type of loop in Python is a `while` loop, which iterates until\nsome condition is met:","c3c73fde":"You can use the `imshow` function to display images from a file. Here is\nan example:","e5ae6e2c":"#### Strings","1fddd7b4":"Numpy offers several ways to index into arrays.","988abbf5":"We can loop over any list, no matter what type of object is stored in\nit.","2ce1df5c":"The syntax for defining classes in Python is straightforward:","410e2a1b":"### Containers","f508a377":"If you want access to the index of each element within the body of a\nloop, use the built-in `enumerate` function:","e31dd1b3":"Numpy provides many useful functions for performing computations on\narrays, such as `min()`, `max()`, `sum()`, and others:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-aggregation-1.png)","61498b15":"### Array math","090e52cc":"A Brief Note on Python Versions\n-------------------------------\n\nAs of Janurary 1, 2020, Python has [officially dropped\nsupport](https:\/\/www.python.org\/doc\/sunset-python-2\/) for `python2`.\nWe\u2019ll be using Python 3.","aff57e72":"And here are some more practical applications:","f7d6ac8f":"#### Booleans","47aa946a":"In addition to accessing list elements one at a time, Python provides\nconcise syntax to access sublists; this is known as slicing:","978bd13a":"Python functions are defined using the `def` keyword. For example:","77c88388":"You can also mix integer indexing with slice indexing. However, doing so\nwill yield an array of lower rank than the original array. Note that\nthis is quite different from the way that MATLAB handles array slicing:","c7ce5124":"### Classes","0c86e521":"This creates the array we can see on the right here:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/create-numpy-array-1.png)","672a7bc1":"#### Numbers","5d42e844":"Matplotlib is a plotting library. In this section we give a brief\nintroduction to the `matplotlib.pyplot` module, which provides a\nplotting system similar to that of MATLAB.\n\nBy convention, we typically import this module using the `plt` alias:","44d33604":"Matplotlib\n----------","0ebc5fb4":"### Datatypes","e935ec5c":"This brief overview has touched on many of the important things that you\nneed to know about numpy, but is far from complete. Check out the [numpy\nreference](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/) to find out much\nmore about numpy.","d7642ebd":"We can index and slice numpy arrays in all the ways we can slice Python\nlists:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-array-slice.png)\n\nAnd you can index and slice numpy arrays in multiple dimensions. If\nslicing an array with more than one dimension, you should specify a\nslice for each dimension:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-indexing.png)","712181b0":"You can read all about numpy datatypes in the\n[documentation](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/arrays.dtypes.html).","d66bcf01":"Numpy broadcasting allows us to perform this computation without\nactually creating multiple copies of v. Consider this version, using\nbroadcasting:","95cf7a1a":"As usual, you can find all the gory details about lists in the\n[documentation](https:\/\/docs.python.org\/3.7\/tutorial\/datastructures.html#more-on-lists).","a2c6575d":"### Broadcasting","58a100f1":"We will often define functions to take optional keyword arguments, like\nthis:","53855b35":"A slice of an array is a view into the same data, so modifying it will\nmodify the original array.","c2eceb5d":"#### Dictionaries","cf064998":"### Subplots","6fec69d6":"String objects have a bunch of useful methods; for example:","cf0ecb4f":"You can find a list of all string methods in the\n[documentation](https:\/\/docs.python.org\/3.7\/library\/stdtypes.html#string-methods).","ba27ea9f":"You can read much more about the `subplot` function in the\n[documentation](http:\/\/matplotlib.org\/api\/pyplot_api.html#matplotlib.pyplot.subplot).","5b3c7893":"### Array indexing","0c7a03b3":"Here are a couple of visual examples involving broadcasting.\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-array-broadcast.png)\n\nNote the application of rule\\# 2 - these arrays are compatible in each\ndimension if they have either the same size in that dimension, or if one\narray has size 1 in that dimension.\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-broadcast.png)","b78d001c":"Note that unlike MATLAB, `*` is elementwise multiplication, not matrix\nmultiplication. We instead use the `dot()` function to compute inner\nproducts of vectors, to multiply a vector by a matrix, and to multiply\nmatrices. `dot()` is available both as a function in the numpy module\nand as an instance method of array objects:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-dot-product-1.png)","d3a2ac29":"You can find the full list of mathematical functions provided by numpy\nin the\n[documentation](http:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.math.html).\n\nApart from computing mathematical functions using arrays, we frequently\nneed to reshape or otherwise manipulate data in arrays. The simplest\nexample of this type of operation is transposing a matrix; to transpose\na matrix, simply use the T attribute of an array object.\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-transpose.png)","87ce80e3":"One useful trick with integer array indexing is selecting or mutating\none element from each row of a matrix:","d80def2e":"Not only can we aggregate all the values in a matrix using these\nfunctions, but we can also aggregate across the rows or columns by using\nthe `axis` parameter:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/numpy-matrix-aggregation-4.png)","4ca7d8d0":"#### List comprehensions","325a7304":"A tuple is an (immutable) ordered list of values. A tuple is in many\nways similar to a list; one of the most important differences is that\ntuples can be used as keys in dictionaries and as elements of sets,\nwhile lists cannot. Here is a trivial example:","be2483ac":"There are often cases when we want numpy to initialize the values of the\narray for us. numpy provides methods like `ones()`, `zeros()`, and\n`random.random()` for these cases. We just pass them the number of\nelements we want it to generate:\n\n![](http:\/\/jalammar.github.io\/images\/numpy\/create-numpy-array-ones-zeros-random.png)","e501021a":"Dictionary comprehensions are similar to list comprehensions, but allow\nyou to easily construct dictionaries. For example:","85e59670":"### Errors and Exceptions","02ce718e":"You can find all you need to know about dictionaries in the\n[documentation](https:\/\/docs.python.org\/2\/library\/stdtypes.html#dict).","a88a593c":"### Basic data types","be94ff02":"Note that unlike many languages, Python does not have unary increment\n(x++) or decrement (x--) operators.\n\nPython also has built-in types for long integers and complex numbers;\nyou can find all of the details in the\n[documentation](https:\/\/docs.python.org\/3.7\/library\/stdtypes.html#numeric-types-int-float-long-complex).","44f28f1f":"Basic mathematical functions operate elementwise on arrays, and are\navailable both as operator overloads and as functions in the numpy\nmodule.","01e9e6a0":"#### For\n\nLoops in Python are a way to repeatedly execute some code statement. So,\nfor example, if we\u2019d like to print each of the items in a list, we can\nuse a `for` loop:","06735908":"A numpy array is a grid of values, all of the same type, and is indexed\nby a tuple of nonnegative integers. The number of dimensions is the rank\nof the array; the shape of an array is a tuple of integers giving the\nsize of the array along each dimension."}}