{"cell_type":{"634eb568":"code","890a3cb5":"code","390cc561":"code","a8d1a716":"code","fef9ba3e":"code","fe40618c":"code","d573b853":"code","88cb9076":"markdown","f2931d78":"markdown","b2c164ba":"markdown","9bb92603":"markdown"},"source":{"634eb568":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","890a3cb5":"data = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/train.csv')\n# \u0414\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'\n","390cc561":"import seaborn as sns\n%matplotlib inline\nfig, axs = plt.subplots(1, 3, figsize = (23, 7))\nsns.histplot(data, x = 'ClientPeriod', ax = axs[0])\nsns.histplot(data, x = 'MonthlySpending', ax = axs[1])\nsns.histplot(data, x = 'MonthlySpending', ax = axs[2])\nfig.suptitle('numerical columns')\nplt.show()\n\ndef categorical_meanings(X):\n    return data[X].value_counts()\nfig, axs = plt.subplots(4, 4, figsize = (43, 35))\nfig.suptitle('categorical columns', size = 38)\nfor ind, name in enumerate(cat_cols):\n    aa = categorical_meanings(name) \n    sns.barplot(x = aa.index, y = aa, ax = axs[ind - 4 * (ind \/\/ 4), ind \/\/ 4])","a8d1a716":"\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\ndata_cat = data[cat_cols].applymap(str)\nonehot_encoder = OneHotEncoder(sparse=False)\ndata_categorical_columns = pd.DataFrame(onehot_encoder.fit_transform(data_cat))\n\n\nencoder = StandardScaler()\nlabel = LabelEncoder()\nfor name_col in num_cols:\n    data[name_col] = label.fit_transform(data[name_col])\ndata_num_cols = encoder.fit_transform(data[num_cols])","fef9ba3e":"from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nparam_grid = {'C':[100, 10, 1, 0.1, 0.01, 0.001]}\nlog_regressor = LogisticRegression(penalty = 'l2', random_state = 0, class_weight='balanced', solver='liblinear')\nlr_scoring = GridSearchCV(log_regressor, param_grid,  scoring = 'roc_auc', refit=True, cv = 10)\nlr_scoring.fit(np.hstack((data_num_cols, data_categorical_columns)) , data[target_col])\nprint(lr_scoring.best_params_, lr_scoring.best_score_)","fe40618c":"(X_train, \n X_test, \n y_train, y_test) = train_test_split(data[feature_cols], data[target_col], \n                                     test_size = 0.3, \n                                     random_state = 42)\nfrom catboost import CatBoostRegressor, Pool  \nmodel = CatBoostRegressor(eval_metric = 'AUC' )\neval_dataset = Pool(X_test,y_test, cat_features = cat_cols)\n\n\nmodel.fit(X_train, y_train, eval_set = eval_dataset, cat_features = cat_cols, verbose=False, plot = False)\n\nprint(model.get_best_score()['validation']['AUC'], '\\n', model.get_all_params())","d573b853":"X_test_ = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/test.csv')\n\nsubmission = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/submission.csv')\n\n\nclasss = []\nfor meaning in model.predict(X_test_, prediction_type = 'Probability')[:, 0]:\n    if meaning < 0.5:\n        classs.append(1)\n    else:\n        classs.append(0)\n\n\n\n\nsubmission['Churn'] = classs\nsubmission.to_csv('.\/my_submission.csv')\n","88cb9076":"\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","f2931d78":"\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","b2c164ba":"\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430 \u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u043a\u0430","9bb92603":"\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"}}