{"cell_type":{"3fb53df5":"code","fbb813af":"code","95a7f6b0":"code","10da2d1b":"code","3574a8aa":"code","d00524cc":"code","d3b1e189":"code","eec2d400":"code","e10b5ced":"code","c377282f":"code","588c3ecb":"code","5775305e":"code","9bd35853":"code","d3f8d0a5":"code","92046e8f":"code","af150e80":"code","08af4887":"code","73a991eb":"code","5828074d":"code","22f909a2":"code","38b5bc26":"code","3f19be08":"code","504ed4d7":"code","ac1b7a47":"code","21b1e1e9":"code","ea216227":"code","2bc0f128":"code","d6bdfe1d":"code","016066c5":"code","eca15405":"code","42e3589d":"code","8c4876c6":"code","681fa445":"code","86058230":"code","7ef05f98":"code","6dccc78b":"code","543fb211":"code","53acb175":"code","3eb33a8b":"code","734de7dc":"code","8fd7083b":"code","23e0759a":"code","449d5c0d":"code","a661b955":"code","c8ef2d6a":"code","fb2a3b02":"code","f72718bc":"code","67bf48b7":"code","c51b1b5e":"code","59c144ed":"code","88ceecf1":"code","587b248c":"markdown","30f6647a":"markdown","a29ca1b1":"markdown","93220cb6":"markdown","a17a18e9":"markdown","d5a9993f":"markdown"},"source":{"3fb53df5":"import gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder\n\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.model_selection import StratifiedKFold,GroupKFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn.model_selection import train_test_split\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier","fbb813af":"pd.set_option('display.max_columns', 50)","95a7f6b0":"#\u8aad\u307f\u8fbc\u307f\n\n#df_train = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/train.csv', index_col=0, skiprows=lambda x: x%10!=0)\ndf_train = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/train.csv', index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/test.csv', index_col=0)","10da2d1b":"#\u2b50\ufe0f\n#issue_d \u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\n\n#df_train['earliest_cr_line'].str[-4:]\ndf_train_earliest = pd.merge(df_train['issue_d'].str[-4:], df_train,left_index=True, right_index=True)\ndf_train_earliest = df_train_earliest.rename(columns = {'issue_d_x':'issue_d_year'})\ndf_train_earliest = pd.merge(df_train['issue_d'].str[:3], df_train_earliest,left_index=True, right_index=True)\ndf_train_earliest = df_train_earliest.rename(columns = {'issue_d':'issue_d_month'})\ndf_train_earliest = df_train_earliest.rename(columns = {'issue_d_y':'issue_d'})\n\n#df_test['earliest_cr_line'].str[-4:]\ndf_test_earliest = pd.merge(df_test['issue_d'].str[-4:], df_test,left_index=True, right_index=True)\ndf_test_earliest = df_test_earliest.rename(columns = {'issue_d_x':'issue_d_year'})\ndf_test_earliest = pd.merge(df_test['issue_d'].str[:3], df_test_earliest,left_index=True, right_index=True)\ndf_test_earliest = df_test_earliest.rename(columns = {'issue_d':'issue_d_month'})\ndf_test_earliest = df_test_earliest.rename(columns = {'issue_d_y':'issue_d'})\n\ndf_train = df_train_earliest\ndf_test =  df_test_earliest\n\n###################\ndf_train['issue_d_month_mm'] = df_train['issue_d_month'].replace({'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06','Jul':'07','Aug': '08','Sep': '09','Oct': '10','Nov': '11','Dec': '12'})\ndf_test['issue_d_month_mm'] = df_test['issue_d_month'].replace({'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06','Jul':'07','Aug': '08','Sep': '09','Oct': '10','Nov': '11','Dec': '12'})\n\ndf_train['issue_d_yyyymm'] = df_train['issue_d_year'].str.cat(df_train['issue_d_month_mm'])\ndf_test['issue_d_yyyymm'] = df_test['issue_d_year'].str.cat(df_test['issue_d_month_mm'])\n\ndf_train['issue_d_yyyymm'] = df_train['issue_d_yyyymm'].fillna(-9999)\ndf_train['issue_d_yyyymm'] = df_train['issue_d_yyyymm'].astype(int)\n\ndf_test['issue_d_yyyymm'] = df_test['issue_d_yyyymm'].fillna(-9999)\ndf_test['issue_d_yyyymm'] = df_test['issue_d_yyyymm'].astype(int)\n\n###################\n\n\n#nan\u3092\uff10\u57cb\u3081\u3001int\u306b\u578b\u5909\u63db\ndf_train['issue_d_year'] = df_train['issue_d_year'].fillna(-9999)\ndf_train['issue_d_year'] = df_train['issue_d_year'].astype(int)\n\ndf_test['issue_d_year'] = df_test['issue_d_year'].fillna(-9999)\ndf_test['issue_d_year'] = df_test['issue_d_year'].astype(int)\n\ndf_train['issue_d_month'] = df_train['issue_d_month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug': 8,'Sep': 9,'Oct': 10,'Nov': 11,'Dec': 12})\ndf_test['issue_d_month'] = df_test['issue_d_month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug': 8,'Sep': 9,'Oct': 10,'Nov': 11,'Dec': 12})\n\n#nan\u3092\uff10\u57cb\u3081\u3001int\u306b\u578b\u5909\u63db\ndf_train['issue_d_month'] = df_train['issue_d_month'].fillna(-9999)\ndf_train['issue_d_month'] = df_train['issue_d_month'].astype(int)\n\ndf_test['issue_d_month'] = df_test['issue_d_month'].fillna(-9999)\ndf_test['issue_d_month'] = df_test['issue_d_month'].astype(int)\n\n","3574a8aa":"#\u2b50\ufe0f\u671f\u9593\u3092\u7d5e\u308b\n#df_train = df_train[df_train['issue_d_year'] >= 2014]\ndf_train = df_train[df_train['issue_d_yyyymm'] >= 201401]","d00524cc":"\ncat = []\nnum = []\n\n\nfor col in df_train.columns:\n\n    if df_train[col].dtype == 'object':\n        cat.append(col)\n    else:\n        num.append(col)","d3b1e189":"#\u65b0\u305f\u306b\u8ffd\u52a0\u3057\u3066\u3044\u304f\u6570\u5024\u7cfb\u7279\u5fb4\u91cf","eec2d400":"df_train['mths_since_last_delinq']+ df_train['mths_since_last_major_derog'] +df_train['mths_since_last_record']","e10b5ced":"#\u2b50\ufe0f\n#\u7dcf\u501f\u91d1\u984d\u304cnan\u306e\u5834\u5408\u3001loan_amnt\u3092\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u3002\ndf_train.loc[df_train['tot_cur_bal'].isnull(), 'tot_cur_bal'] = df_train[df_train['tot_cur_bal'].isnull()]['loan_amnt'] \ndf_test.loc[df_test['tot_cur_bal'].isnull(), 'tot_cur_bal'] = df_test[df_test['tot_cur_bal'].isnull()]['loan_amnt'] ","c377282f":"#\u2b50\ufe0f\n#installment\/annual_inc\n#\u6708\u306e\u7d66\u6599\u306b\u5bfe\u3059\u308b\u652f\u6255\u3044\u5272\u5408\n#\u30ed\u30fc\u30f3\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u501f\u308a\u624b\u304c\u652f\u6255\u3046\u6708\u3005\u306e\u652f\u6255\u3044\/(\u767b\u9332\u6642\u306b\u501f\u308a\u624b\u304c\u63d0\u4f9b\u3059\u308b\u81ea\u5df1\u7533\u544a\u306e\u5e74\u53ce\u3002\/12)\n\ndf_train['installment\/annual_inc'] = df_train['installment']\/(df_train['annual_inc']\/12)\ndf_test['installment\/annual_inc'] = df_test['installment']\/(df_test['annual_inc']\/12)\n","588c3ecb":"#\u2b50\ufe0f\n\n#loan_amnt\/installment\n#\u5b8c\u6e08\u652f\u6255\u3044\u56de\u6570\n#\u501f\u91d1\u984d\/\u6708\u306e\u652f\u6255\u3044\u984d\n\ndf_train['loan_amnt\/installment'] = df_train['loan_amnt']\/df_train['installment']\ndf_test['loan_amnt\/installment'] = df_test['loan_amnt']\/df_test['installment']\n","5775305e":"#\u2b50\ufe0f\u7279\u5fb4\u5217\u8ffd\u52a0(\u6587\u5b57\u5217\u306e\u5217\u540c\u58eb\u306e\u7d50\u5408)\n\n#addr_state\n\n#series\u4f5c\u6210\nsr_train_addr = df_train['addr_state'].str.cat(df_train['zip_code'])\nsr_test_addr = df_test['addr_state'].str.cat(df_test['zip_code'])\n\n#series\u3092DF\u5909\u63db\ndf_train_addr = pd.DataFrame(sr_train_addr)\ndf_test_addr = pd.DataFrame(sr_test_addr)\n\n#\u5217\u540d\u5909\u63db\ndf_train_addr = df_train_addr.rename(columns = {'addr_state':'address'})\ndf_test_addr = df_test_addr.rename(columns = {'addr_state':'address'})\n\n#\u7d50\u5408\ndf_train = pd.merge(df_train_addr, df_train,left_index=True, right_index=True)\ndf_test = pd.merge(df_test_addr, df_test,left_index=True, right_index=True)","9bd35853":"#\u5c0f\u6587\u5b57\u5316\ndf_train['emp_title'] = df_train['emp_title'].str.lower()\ndf_test['emp_title'] = df_test['emp_title'].str.lower()","d3f8d0a5":"#########################\n#emp_title \u5358\u8a9e\u6570\u30ab\u30a6\u30f3\u30c8\n\n#\u6587\u5b57\u5217\u5206\u5272\ndf_train_emp_title_split = df_train['emp_title'].str.split(' ', expand=True)\ndf_test_emp_title_split = df_test['emp_title'].str.split(' ', expand=True)\n\n#\u7a7a\u767d\u3092None\u5909\u63db\ndf_train_emp_title_split = df_train_emp_title_split.replace('',None) \ndf_test_emp_title_split = df_test_emp_title_split.replace('',None) \n\n#null\u4ee5\u5916\u3092\u30ab\u30a6\u30f3\u30c8\ndf_train_emp_title_split_count = df_train_emp_title_split.count(axis=1)\ndf_test_emp_title_split_count = df_test_emp_title_split.count(axis=1)\n\n#df\u5909\u63db\ndf_train_emp_title_split_count = pd.DataFrame(df_train_emp_title_split_count)\ndf_test_emp_title_split_count = pd.DataFrame(df_test_emp_title_split_count)\n\n#\u5217\u540d\u5909\u63db\ndf_train_e = df_train_emp_title_split_count.rename(columns = {0:'emp_title_word_count'})\ndf_test_e = df_test_emp_title_split_count.rename(columns = {0:'emp_title_word_count'})\n\n#\u7d50\u5408\ndf_train = pd.merge(df_train_e, df_train,left_index=True, right_index=True)\ndf_test = pd.merge(df_test_e, df_test,left_index=True, right_index=True)\n\n#########################","92046e8f":"#\u6b20\u640d\u5024\u306e\u6570\u3092\u884c\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\ndf_train_nan_s = df_train.isnull().sum(axis=1)\ndf_test_nan_s = df_test.isnull().sum(axis=1)","af150e80":"#series\u3092DF\u5909\u63db\ndf_train_nan = pd.DataFrame(df_train_nan_s)\ndf_test_nan = pd.DataFrame(df_test_nan_s)","08af4887":"df_train_nan = df_train_nan.rename(columns = {0:'nan_count'})\ndf_test_nan = df_test_nan.rename(columns = {0:'nan_count'})","73a991eb":"df_train = pd.merge(df_train_nan, df_train,left_index=True, right_index=True)\ndf_test = pd.merge(df_test_nan, df_test,left_index=True, right_index=True)","5828074d":"#\u2b50\ufe0f\u6587\u5b57\u5217\u7cfb\u306e\u30ab\u30e9\u30e0\u5024\u306e\u6587\u5b57\u6570\u30ab\u30e9\u30e0\u8ffd\u52a0\u95a2\u6570\n#\u2b50\ufe0f\u7279\u5fb4\u91cf\u8ffd\u52a0\n\ndef len_col_add(column,change_column,df_train,df_test):\n    #\u2b50\ufe0f\u3053\u306e\u30ab\u30e9\u30e0\u540d\u5909\u66f4\n\n    df_train_change_len = df_train[column].str.len().fillna(0)\n    df_test_change_len = df_test[column].str.len().fillna(0)\n\n    df_train_change_len_next = pd.DataFrame(df_train_change_len)\n    df_test_change_len_next = pd.DataFrame(df_test_change_len)\n\n    #\u2b50\ufe0f\u3053\u3053\u306e\u30ab\u30e9\u30e0\u540d\u5909\u66f4\u3068\u5909\u66f4\u3059\u308b\u30ab\u30e9\u30e0\u540d\u5909\u66f4\n    df_train_change_len_next = df_train_change_len_next.rename(columns = {column:change_column})\n    df_test_change_len_next = df_test_change_len_next.rename(columns = {column:change_column})\n\n    #df\u540c\u58eb\u306e\u7d50\u5408\n    df_train = pd.merge(df_train_change_len_next, df_train,left_index=True, right_index=True)\n    df_test = pd.merge(df_test_change_len_next, df_test,left_index=True, right_index=True)\n    \n    return df_train,df_test","22f909a2":"df_train,df_test = len_col_add('emp_title','emp_title_len',df_train,df_test)","38b5bc26":"df_train,df_test = len_col_add('title','title_len',df_train,df_test)","3f19be08":"df_train,df_test = len_col_add('home_ownership','home_ownership_len',df_train,df_test)","504ed4d7":"df_train,df_test = len_col_add('purpose','purpose_len',df_train,df_test)","ac1b7a47":"#df_train['earliest_cr_line'].str[-4:]\ndf_train_earliest = pd.merge(df_train['earliest_cr_line'].str[-4:], df_train,left_index=True, right_index=True)\ndf_train_earliest = df_train_earliest.rename(columns = {'earliest_cr_line_x':'earliest_cr_line_year'})\ndf_train_earliest = pd.merge(df_train['earliest_cr_line'].str[:3], df_train_earliest,left_index=True, right_index=True)\ndf_train_earliest = df_train_earliest.rename(columns = {'earliest_cr_line':'earliest_cr_line_month'})\ndf_train_earliest = df_train_earliest.rename(columns = {'earliest_cr_line_y':'earliest_cr_line'})\n\n#df_test['earliest_cr_line'].str[-4:]\ndf_test_earliest = pd.merge(df_test['earliest_cr_line'].str[-4:], df_test,left_index=True, right_index=True)\ndf_test_earliest = df_test_earliest.rename(columns = {'earliest_cr_line_x':'earliest_cr_line_year'})\ndf_test_earliest = pd.merge(df_test['earliest_cr_line'].str[:3], df_test_earliest,left_index=True, right_index=True)\ndf_test_earliest = df_test_earliest.rename(columns = {'earliest_cr_line':'earliest_cr_line_month'})\ndf_test_earliest = df_test_earliest.rename(columns = {'earliest_cr_line_y':'earliest_cr_line'})\n\ndf_train = df_train_earliest\ndf_test =  df_test_earliest","21b1e1e9":"#nan\u3092\uff10\u57cb\u3081\u3001int\u306b\u578b\u5909\u63db\ndf_train['earliest_cr_line_year'] = df_train['earliest_cr_line_year'].fillna(-9999)\ndf_train['earliest_cr_line_year'] = df_train['earliest_cr_line_year'].astype(int)\n\ndf_test['earliest_cr_line_year'] = df_test['earliest_cr_line_year'].fillna(-9999)\ndf_test['earliest_cr_line_year'] = df_test['earliest_cr_line_year'].astype(int)","ea216227":"df_train['earliest_cr_line_month'] = df_train['earliest_cr_line_month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug': 8,'Aug': 8,'Sep': 9,'Oct': 10,'Nov': 11,'Dec': 12})\ndf_test['earliest_cr_line_month'] = df_test['earliest_cr_line_month'].replace({'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug': 8,'Aug': 8,'Sep': 9,'Oct': 10,'Nov': 11,'Dec': 12})","2bc0f128":"df_train['earliest_cr_line_month'].unique()","d6bdfe1d":"#nan\u3092\uff10\u57cb\u3081\u3001int\u306b\u578b\u5909\u63db\ndf_train['earliest_cr_line_month'] = df_train['earliest_cr_line_month'].fillna(-9999)\ndf_train['earliest_cr_line_month'] = df_train['earliest_cr_line_month'].astype(int)\n\ndf_test['earliest_cr_line_month'] = df_test['earliest_cr_line_month'].fillna(-9999)\ndf_test['earliest_cr_line_month'] = df_test['earliest_cr_line_month'].astype(int)","016066c5":"df_train['duration'] = df_train['issue_d_year'] - df_train['earliest_cr_line_year'] \ndf_test['duration'] = df_test['issue_d_year'] - df_test['earliest_cr_line_year'] ","eca15405":"#\u671f\u9593\u304c 100\u5e74\u4ee5\u4e0a\u62c5\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u5909\u63db\ndf_train.loc[df_train['duration'] > 100, 'duration'] = -9999\ndf_test.loc[df_test['duration'] > 100, 'duration'] = -9999","42e3589d":"#\u2b50\ufe0f\n#emp_length \u3092\u6570\u5024\u3068\u3057\u3066\u5207\u308a\u51fa\u3059\n\n#\u30bf\u30a4\u30d7\u5909\u63db\u3059\u308b\u524d\u306b\u6b20\u640d\u5024\u57cb\u3081\ndf_train_emp_len = df_train['emp_length'].fillna(-9999)\ndf_test_emp_len = df_test['emp_length'].fillna(-9999)\n\ndf_train_emp_len_next = pd.DataFrame(df_train_emp_len)\ndf_test_emp_len_next = pd.DataFrame(df_test_emp_len)\n\ndf_train_emp_len_next = df_train_emp_len_next.rename(columns = {'emp_length':'emp_length_num'})\ndf_test_emp_len_next = df_test_emp_len_next.rename(columns = {'emp_length':'emp_length_num'})\n\n#emp_length\u3092\u6570\u5024\u5316\ndf_train_emp_len_next['emp_length_num'] = df_train_emp_len_next['emp_length_num'].replace({'< 1 year':0,'1 year':1,'2 years':2,'3 years':3,'4 years':4,'5 years':5,'6 years':6,'7 years': 7,'8 years': 8,'9 years': 9,'10+ years': 10})\ndf_test_emp_len_next['emp_length_num'] = df_test_emp_len_next['emp_length_num'].replace({'< 1 year':0,'1 year':1,'2 years':2,'3 years':3,'4 years':4,'5 years':5,'6 years':6,'7 years': 7,'8 years': 8,'9 years': 9,'10+ years': 10})\n\ndf_train_emp_len_next['emp_length_num'] = df_train_emp_len_next['emp_length_num'].astype(int)\ndf_test_emp_len_next['emp_length_num'] = df_test_emp_len_next['emp_length_num'].astype(int)\n\n#\u2b50\ufe0fdf\u540c\u58eb\u306e\u7d50\u5408\ndf_train = pd.merge(df_train_emp_len_next, df_train,left_index=True, right_index=True)\ndf_test = pd.merge(df_test_emp_len_next, df_test,left_index=True, right_index=True)\n","8c4876c6":"#\u2b50\ufe0f\n#zip_code\u3092\u6570\u5024\u30ab\u30e9\u30e0\u306b\u5909\u63db\u3057\u3066\u307f\u308b\n\ndf_train = pd.merge(df_train['zip_code'].str[:3], df_train,left_index=True, right_index=True)\ndf_train['zip_code_x'] = df_train['zip_code_x'].astype(int)\n\ndf_test = pd.merge(df_test['zip_code'].str[:3], df_test,left_index=True, right_index=True)\ndf_test['zip_code_x'] = df_test['zip_code_x'].astype(int)\n\n","681fa445":"#\u2b50\ufe0f\n#zip_code\u3092\u3055\u3089\u306b\u5206\u5272\u3057\u3066\u307f\u308b\n\ndf_train = pd.merge(df_train['zip_code_y'].str[:1], df_train,left_index=True, right_index=True)\n#df_train['zip_code_x'] = df_train['zip_code_x'].astype(int)\n\ndf_test = pd.merge(df_test['zip_code_y'].str[:1], df_test,left_index=True, right_index=True)\n#df_test['zip_code_x'] = df_test['zip_code_x'].astype(int)\n","86058230":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n\n#submission = pd.read_csv('sample_submission.csv', index_col=0)\ngdp_df = pd.read_csv('..\/input\/homework-for-students4plus\/US_GDP_by_State.csv', index_col=0)\n\ndesc_df = pd.read_csv('..\/input\/homework-for-students4plus\/description.csv', index_col=0)\nzip_df = pd.read_csv('..\/input\/homework-for-students4plus\/free-zipcode-database.csv', index_col=0)\nspi_df = pd.read_csv('..\/input\/homework-for-students4plus\/spi.csv', index_col=0)\nstate_df = pd.read_csv('..\/input\/homework-for-students4plus\/statelatlong.csv', index_col=0)\n","7ef05f98":"### \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080","6dccc78b":"# local\n#df_train = pd.read_csv('train.csv', index_col=0)\nX_test = df_test\n\n#\u30b5\u30f3\u30d7\u30eb\u521d\u671f\uff08\u65e5\u4ed8\u306e\u6587\u5b57\u5217issue_d \u3092 date\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u308b\uff09\n#df_train = pd.read_csv('train.csv', index_col=0, parse_dates=['issue_d'], skiprows=lambda x: x%20!=0)\n#X_test = pd.read_csv('test.csv', index_col=0, parse_dates=['issue_d'])\n\n\n#df_train = pd.read_csv('..\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d'])\ny_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\n\n\n#\u2b50\ufe0f\u6700\u7d42\u7684\u306b\u306f\u4f59\u8a08\u306adf\u306f\u6d88\u3059\n#del df_train\ngc.collect()","543fb211":"#\u8272\u3005\u8ffd\u52a0\u3057\u3066\u307f\u308b","53acb175":"cat = []\nnum = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cat.append(col)\n    else:\n        num.append(col)\n\n        ","3eb33a8b":"#\u6570\u5024\u7cfb\u6a19\u6e96\u5316\u6b63\u898f\u5316\n#\u6a19\u6e96\u5316\u3042\u308c\u3053\u308c","734de7dc":"#\u5bfe\u6570\u5909\u63db\nX_train['loan_amnt'] = X_train['loan_amnt'].apply(np.log1p)\nX_test['loan_amnt'] = X_test['loan_amnt'].apply(np.log1p)\n","8fd7083b":"#\u2b50\ufe0f\ntarget = 'loan_condition'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\nfor col in cat:\n\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test[col] = X_test[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        \n    X_train[col]  = enc_train\n","23e0759a":"#\u6700\u7d42\u7684\u3044\u4e2d\u592e\u5024\u57cb\u3081\nX_train.fillna(X_train.median(), inplace=True)\nX_test.fillna(X_train.median(), inplace=True)","449d5c0d":"import random","a661b955":"#\u30e9\u30f3\u30c0\u30e0\u306b\u8272\u3005\u4f5c\u6210\nclf_arry = []\nskf_arry = []\n\nfor i in range(0,25):\n    rand_int =random.randint(1, 10000)\n    \n    #random_state\u306b\u4e71\u6570\u8a2d\u5b9a\n    clf_random = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                    importance_type='split', learning_rate=0.05, max_depth=-1,\n                                    min_child_samples=20, min_child_weight=0.005, min_split_gain=0.0,\n                                    n_estimators=99999, n_jobs=-1, num_leaves=15, objective=None,\n                                    random_state= rand_int, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                    subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\n    \n    skf_random = StratifiedKFold(n_splits=5, random_state= rand_int, shuffle=True)\n    \n    print(clf_random)\n    print(skf_random)\n    \n    clf_arry.append(clf_random)\n    skf_arry.append(skf_random)\n    ","c8ef2d6a":"print(len(clf_arry))","fb2a3b02":"#\u2b50\ufe0f\u8907\u6570\u691c\u5b9a\u3000\u8907\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nscores = []\ny_pred_test = np.zeros(len(X_test)) # \u30c6\u30b9\u30c8\u30c6\u3099\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u683c\u7d0d\u7528array\n\n#skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\n#------------------------------------\nfor y in range(0,len(clf_arry)):\n    clf = clf_arry[y]\n    skf = skf_arry[y]\n    \n    print(clf)\n    print(skf)\n    #############################\n    for i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n        \n        print('\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f')\n        print(y)\n        print(i)\n        print('\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f')\n        \n        #X_train_, y_train_, text_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n        X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n        #X_val, y_val, text_val = X_train.iloc[test_ix], y_train.iloc[test_ix]\n        X_val, y_val = X_train.iloc[test_ix], y_train.iloc[test_ix]\n        #clf = LGBMClassifier(**params)\n        \n\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        #\u2b50\ufe0fearly_stopping_rounds=200\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        #\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n        clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n\n        y_pred = clf.predict_proba(X_val)[:,1]\n        scores.append(roc_auc_score(y_val, y_pred))          \n\n\n        y_pred_test += clf.predict_proba(X_test)[:,1] # \u30c6\u30b9\u30c8\u30c6\u3099\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u8db3\u3057\u3066\u3044\u304f scores = np.array(scores)\n        #print('Ave. CV score is %f' % scores.mean()) \n\n        #############################\n        #print('\u9014\u4e2d\u30b9\u30b3\u30a2:'')\n        #print(scores)\n#------------------------------------","f72718bc":"y_pred_test","67bf48b7":"# \u6700\u5f8c\u306bfold\u6570\u3066\u3099\u5272\u308b\nprint(len(clf_arry) )\n \ny_pred = y_pred_test \/ (len(clf_arry) * 5)\n\nprint('----------------------')\nprint('\u5404\u30b9\u30b3\u30a2\uff1a')\nx = 0\nfor i in scores:\n    x += i\n    print(i)  \n    \nprint('----------------------')\nprint(x)\nprint('Ave. CV score\uff1a')\nprint(x\/(len(clf_arry) * 5))","c51b1b5e":"imp = DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train.columns, columns=['importance']).sort_values(['importance'], ascending=False)\nimp","59c144ed":"fig, ax = plt.subplots(figsize=(7, 8))\nlgb.plot_importance(clf, max_num_features=50, ax=ax, importance_type='gain')","88ceecf1":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n\n#submission = pd.read_csv('sample_submission.csv', index_col=0)\nsubmission = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","587b248c":"#\u2b50\ufe0fzip\u60c5\u5831\u7d50\u5408\nzip_df = zip_df[['Zipcode','Lat','Long','Xaxis','Yaxis','Zaxis']].groupby('Zipcode').mean()\nzip_df = zip_df.reset_index()\n\ndf_train_zip = df_train.rename(columns = {'zip_code_x':'Zipcode'})\ndf_train_zip = df_train_zip.reset_index()\n\ndf_train_zip = pd.merge(df_train_zip,zip_df,  on='Zipcode',how='left')\ndf_train_zip = df_train_zip.set_index('ID')\n\ndf_test_zip = df_test.rename(columns = {'zip_code_x':'Zipcode'})\ndf_test_zip = df_test_zip.reset_index()\n\ndf_test_zip = pd.merge(df_test_zip,zip_df,  on='Zipcode',how='left')\ndf_test_zip = df_test_zip.set_index('ID')\n\n#-----------------------\ndf_train = df_train_zip\ndf_test = df_test_zip","30f6647a":"#\u2b50\ufe0fstate\u60c5\u5831\u7d50\u5408\nstate_df_next = state_df.reset_index()\ngdp_df_next = gdp_df.reset_index()\nstate_gdp_df = pd.merge(state_df_next, gdp_df_next, left_on='City', right_on='State')\n\n\n#------------\n\ndf_train_state = df_train.reset_index()\n\ndf_train_state = pd.merge(df_train_state,state_gdp_df, left_on=['addr_state', 'issue_d_year'], right_on=['State_x', 'year'],how='left')\n\ndf_train_state = df_train_state.set_index('ID')\n\n#------------\ndf_test_state = df_test.reset_index()\n\ndf_test_state = pd.merge(df_test_state,state_gdp_df, left_on=['addr_state', 'issue_d_year'], right_on=['State_x', 'year'],how='left')\n\ndf_test_state = df_test_state.set_index('ID')\n\n\n#-------------\ndf_train = df_train_state\ndf_test = df_test_state","a29ca1b1":"# LightGBM","93220cb6":"### \u7279\u5fb4\u91cf\u30bf\u30a4\u30d7\u3054\u3068\u306b\u5206\u5272\u3059\u308b","a17a18e9":"### Target Encoding","d5a9993f":"\u57fa\u6e96\u30b9\u30b3\u30a2\n[754]\tvalid_0's auc: 0.712316\tvalid_0's binary_logloss: 0.424527\n[565]\tvalid_0's auc: 0.712765\tvalid_0's binary_logloss: 0.424386\n[616]\tvalid_0's auc: 0.713072\tvalid_0's binary_logloss: 0.42427\n\n[221]\tvalid_0's auc: 0.714988\tvalid_0's binary_logloss: 0.434498         >=2015\n[372]\tvalid_0's auc: 0.715806\tvalid_0's binary_logloss: 0.432076         >=2014\n[318]\tvalid_0's auc: 0.715864\tvalid_0's binary_logloss: 0.432009 \u2192      0.70495\n\n[500]\tvalid_0's auc: 0.714768\tvalid_0's binary_logloss: 0.428766     >=201312\n[356]\tvalid_0's auc: 0.715928\tvalid_0's binary_logloss: 0.431976     >=201401\n\n\n\n"}}