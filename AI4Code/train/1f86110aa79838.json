{"cell_type":{"661ac770":"code","6fd0ace9":"code","9229843d":"code","24ab5bcd":"code","cee73e4d":"code","f2ee07b7":"code","6ecef394":"code","f6a734de":"code","071a600b":"code","86d9d3b0":"code","b4179287":"code","69b17be1":"code","c7ec2c66":"code","01461fab":"code","231a5c8b":"code","eaeb8d25":"code","6b6e25ba":"code","47fba8cc":"code","27acd0a0":"code","23af626e":"code","5dc4b9c6":"code","f7d98a86":"code","67bfaefa":"code","06e0de93":"code","faf6e3c2":"code","19d8ffb4":"code","9f8587a9":"code","492f0560":"code","a369e560":"code","f4ef3fd4":"code","9d591a27":"code","ccfedd04":"code","1d0a454c":"code","fa97caaa":"code","830a23ef":"code","23ac4757":"code","687fe789":"code","ea984b58":"code","6dc7956c":"code","530caaac":"code","d128270a":"code","a3c6fff0":"code","7a5ace0c":"code","3253e850":"code","df9212bb":"code","1b1b08b9":"markdown","54f544f2":"markdown","2e985618":"markdown","62e40bbd":"markdown","f9fca776":"markdown","0f0f9c31":"markdown","6d53e037":"markdown","10092049":"markdown","b01551c0":"markdown","40d55468":"markdown","547a67a4":"markdown","d133b3c1":"markdown","2bdc3fee":"markdown","9eb1af3c":"markdown","d908d4ab":"markdown","900fd27b":"markdown","3a8c1ff6":"markdown","c423c3b2":"markdown","abdb1e9f":"markdown","869fd9df":"markdown","1ec4fb38":"markdown","3871bf92":"markdown","91a57268":"markdown","4ff562f8":"markdown","6233edc5":"markdown","b8347702":"markdown","259a9c75":"markdown","45828d1c":"markdown"},"source":{"661ac770":"# Imports\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","6fd0ace9":"# Unzipping the archived dataset, then loading it to df variable which is indication for dataframe.\n#!unzip 'archive2.zip'\ndf = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\n# Displaying the shape and the first 5 rows of the dataset,\ndisplay(df.shape)\ndf.head()","9229843d":"df.info()","24ab5bcd":"df.duplicated().sum()","cee73e4d":"# Checking the number of the unique values for each variable, such as Neighbourhood, Handcap, and so on.\ndf.nunique()","f2ee07b7":"df.describe()","6ecef394":"df.groupby('Age').size()","f6a734de":"df.head()","071a600b":"# Checking how much the data covers over the year\ndf.AppointmentDay.sort_values()[:5]","86d9d3b0":"df.AppointmentDay.sort_values()[-5:]","b4179287":"df_clean = df.copy()","69b17be1":"# 1. Dropping PatientId, AppointmentID, ScheduledDay, and AppointmentDay.\ndf_clean.drop(columns=['PatientId', 'AppointmentID', 'ScheduledDay', 'AppointmentDay'], inplace=True)","c7ec2c66":"# 2. Drop the record of Age < 0.\ndf_clean.drop(index=df_clean[df_clean['Age'] < 0].index[0], inplace=True)","01461fab":"# 3. Replacing No-show by show, Yes by 0, and No by 1\ndf_clean.rename(columns={'No-show': 'Show'}, inplace=True)\ndf_clean.loc[df_clean['Show'] == 'Yes', ['Show']] = 0\ndf_clean.loc[df_clean['Show'] == 'No', ['Show']] = 1","231a5c8b":"df_clean[df_clean['Age'] < 0]","eaeb8d25":"df_clean.head()","6b6e25ba":"df_clean.info()","47fba8cc":"df_clean.Show = df_clean.Show.astype(int)\ndf_clean.info()","27acd0a0":"df_clean.info()","23af626e":"# Number of showing ups for each age\ndf_clean.groupby('Age').sum().Show.sort_values(ascending=False)","5dc4b9c6":"def replacing(df):\n    \"\"\"\n    Segment each age into an age segment started from 5 to 85 years\n    and divided by 10 years.\n    First segment is from 0 to 5 years.\n    Last segment is from 85 to the max years old person.\n    Each segment in between is within 10 years range.\n    \n    returns: df, a dataframe contains the age segments.\n    \"\"\"\n    lower = 5\n    upper = 15\n    lower_2 = lower\n    upper_2 = upper\n    \n    # Segment the age into multiple segments using integers first then replace \n    # the integers with their corresponding string segment.\n    df.loc[df.Age <= 5, ['Age']] = 5\n    while(1):\n        df.loc[(lower < df.Age) & (df.Age <= upper), ['Age']] = upper\n        lower += 10\n        upper += 10\n        if upper > 85:\n            break\n    df.loc[df.Age > 85, ['Age']] = int(df_clean.Age.max())\n    \n    \n    # Creating a copy from the cleaned dataset to segment the age.\n    df.loc[df.Age == 5, ['Age']] = '0 - 5'\n    while(1):\n        df.loc[df.Age == upper_2, ['Age']] = '{} - {}'.format(lower_2+1, upper_2)\n        upper_2 += 10\n        lower_2 += 10\n        if upper_2 > 85:\n            break\n    df.loc[df.Age == int(df_clean.Age.max()), ['Age']] = '86 - {}'.format(df_clean.Age.max()) \n    \n    return df","f7d98a86":"# Creating a copy from the cleaned dataset to segment the age.\ndf_clean_segments = df_clean.copy()\n\ndf_clean_segments = replacing(df_clean_segments)","67bfaefa":"df_clean_segments.groupby('Age').count()","06e0de93":"# Creating pandas series that contains the number of showing up(sum of 1s) for each age segment.\nage_segments = df_clean_segments.groupby('Age').sum().Show.sort_values(ascending=False)\n\nlocations = np.arange(len(age_segments))\nheights = list(age_segments)\nlabels = age_segments.index\n\nf = plt.figure(figsize=(10, 7))\n\nax1 = f.add_subplot(1, 1, 1)\nax1.bar(locations, heights, tick_label=labels, color='k')\nax1.set_title(\"Number of Showing Up Times per Age Segments\")\nax1.set_xlabel(\"Age Segments\")\nax1.set_ylabel(\"Number of Showing Up Times\");","faf6e3c2":"# Creating a copy from the cleaned dataset to segment the age.\ndf_clean_segments = df_clean.copy()\n\n# Creating a function for ease of age segmentation in next sections.\ndef segmenting(df_clean_segments):\n    # Segment the age into multiple segments using integers first then replace the integers with their corresponding segment.\n    df_clean_segments.loc[df_clean_segments.Age <= 5, ['Age']] = 5 # '0-5'\n    df_clean_segments.loc[(5 < df_clean_segments.Age) & (df_clean_segments.Age <= 15), ['Age']] = 15 #'6-15'\n    df_clean_segments.loc[(15 < df_clean_segments.Age) & (df_clean_segments.Age <= 25), ['Age']] = 25 #'16-25'\n    df_clean_segments.loc[(25 < df_clean_segments.Age) & (df_clean_segments.Age <= 40), ['Age']] = 40 #'26-40'\n    df_clean_segments.loc[(40 < df_clean_segments.Age) & (df_clean_segments.Age <= 60), ['Age']] = 60 #'41-60'\n    df_clean_segments.loc[(60 < df_clean_segments.Age) & (df_clean_segments.Age <= 80), ['Age']] = 80 #'61-80'\n    df_clean_segments.loc[df_clean_segments.Age > 80, ['Age']] = int(df_clean.Age.max()) #'81-{}'.format(df_clean.Age.max())\n\n    # Replace the integers with their corresponding segment.\n    df_clean_segments.loc[df_clean_segments.Age == 5, ['Age']] = '0 - 5'\n    df_clean_segments.loc[df_clean_segments.Age == 15, ['Age']] = '16 - 25'\n    df_clean_segments.loc[df_clean_segments.Age == 25, ['Age']] = '6 - 15'\n    df_clean_segments.loc[df_clean_segments.Age == 40, ['Age']] = '26 - 40'\n    df_clean_segments.loc[df_clean_segments.Age == 60, ['Age']] = '41 - 60'\n    df_clean_segments.loc[df_clean_segments.Age == 80, ['Age']] = '61 - 80'\n    df_clean_segments.loc[df_clean_segments.Age == int(df_clean.Age.max()), ['Age']] = '81 - {}'.format(df_clean.Age.max())\n\nsegmenting(df_clean_segments)","19d8ffb4":"# Creating pandas series that contains the number of showing up(sum of 1s) for each age segment.\nage_segments = df_clean_segments.groupby('Age').sum().Show.sort_values(ascending=False)\n\nlocations = np.arange(len(age_segments))\nheights = list(age_segments)\nlabels = age_segments.index\n\nf = plt.figure(figsize=(10, 7))\n\nax1 = f.add_subplot(1, 1, 1)\nax1.bar(locations, heights, tick_label=labels, color='k')\nax1.set_title(\"Number of Showing Up Times per Age Segments\")\nax1.set_xlabel(\"Age Segments\")\nax1.set_ylabel(\"Number of Showing Up Times\");","9f8587a9":"# Hot encoding the gender column > Which means we should drop the rest columns for avoiding misconvinention,\n# and focusing only on the columns that we're going to use.\none_hot_df_clean = pd.get_dummies(df_clean.drop(columns=['Neighbourhood', 'Scholarship', 'Hipertension',\n                                                         'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received']))","492f0560":"one_hot_df_clean.head(10)","a369e560":"# Creating a copy from the one hot encoded data to segment the age.\ndf_clean_segments = one_hot_df_clean.copy()\n\n\n# Segment the age into multiple segments using the previous function\nsegmenting(df_clean_segments)","f4ef3fd4":"df_clean_segments[df_clean_segments.Show == 1].groupby('Age').sum()","9d591a27":"one_hot_df_clean_segments = df_clean_segments[df_clean_segments.Show == 1].groupby('Age').sum()","ccfedd04":"one_hot_df_clean_segments.drop(columns='Show').plot(figsize=(10,7));","1d0a454c":"# Hot encoding the Show column > Which means we should drop the rest columns for avoiding misconvinention,\n# and focusing only on the columns that we're going to use.\nshow_encoded = pd.get_dummies(df_clean.drop(columns=['Age', 'Neighbourhood', 'Scholarship', 'Hipertension',\n                                                     'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received']), \n                              columns=['Show'])","fa97caaa":"show_encoded","830a23ef":"show_encoded.groupby('Gender').sum()","23ac4757":"# Let's check that we did is right by comparing the total number of Show_0 & Show_1 \n# for each genders with the total number of records.\nshow_encoded.groupby('Gender').sum().sum().sum() == len(df_clean.Show)","687fe789":"show_encoded.groupby('Gender').sum().T","ea984b58":"# Creating 2 pandas series for each Male and Female, and sorting the values as well.\nshow_percent_f = show_encoded.groupby('Gender').sum().T['F'].sort_values(ascending=False)\nshow_percent_m = show_encoded.groupby('Gender').sum().T['M'].sort_values(ascending=False)\n\nsizes_f = list(show_percent_f)\nsizes_m = list(show_percent_m)\n\n# Changing the labels of the chart\nlabels = ['Shown', \"Didn't Shown\"]\ncolors = ['lightskyblue', 'lightcoral']\nexplode = (0.1, 0)  # explode 1st slice\n\nf = plt.figure(figsize=(15, 7))\n\nax1 = f.add_subplot(1, 2, 1)\nax2 = f.add_subplot(1, 2, 2)\n\nax1.pie(sizes_f, labels=labels, colors=colors, explode=explode,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nax1.set_title(\"Percent of Females who shown & didn't show for appointments\");\nax1.set_ylabel(\"Female Percentage\")\n\n\nax2.pie(sizes_m, labels=labels, colors=colors, explode=explode,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nax2.set_title(\"Percent of Males who shown & didn't show for appointments\")\nax2.set_ylabel(\"Male Percentage\");","6dc7956c":"total_number_of_appointments = df_clean.Show.count()\nprint(\"So, the total number of appointments is\", total_number_of_appointments)","530caaac":"show_up_number = df_clean.Show.sum()\nprint(\"And the Number of the people of only show up for their appointments is\", show_up_number)","d128270a":"percentage_of_show_up = (show_up_number\/total_number_of_appointments) * 100\nprint(\"{:.2f}%\".format(percentage_of_show_up))","a3c6fff0":"show_df_clean = df_clean.copy()\nshow_df_clean.loc[show_df_clean.Show == 1, ['Show']] = 'Shown'\nshow_df_clean.loc[show_df_clean.Show == 0, ['Show']] = \"Didn't Shown\"","7a5ace0c":"show_df_clean.groupby('Show')['Show'].count().sort_values(ascending=False)","3253e850":"show_percent = show_df_clean.groupby('Show')['Show'].count().sort_values(ascending=False)\n\nsizes = list(show_percent)\nlabels = show_percent.index\ncolors = ['lightskyblue', 'lightcoral']\nexplode = (0.1, 0)  # explode 1st slice\n\nf = plt.figure(figsize=(10, 7))\n\nax1 = f.add_subplot(1, 1, 1)\nax1.pie(sizes, labels=labels, colors=colors, explode=explode,\n        autopct='%1.1f%%', shadow=True, startangle=140)\nax1.set_title(\"Percentage of the People who shown and didn't show for their appointments\");","df9212bb":"# plot the heatmap\nf = plt.figure(figsize=(12, 8))\nax1 = f.add_subplot(1, 1, 1)\n\ncorr = df_clean.corr()\nsns.heatmap(corr,\n            annot=True,\n            xticklabels=corr.columns,\n            yticklabels=corr.columns);","1b1b08b9":"All columns has no Null values and the same number of entries which is great. We won't have the issue of Null values and handling it.","54f544f2":"As we can see here, almost both genders are commited with the same ratio for their appointments. Which is interesting, if you think that a gender is commited more.","2e985618":"In order to group all males and females in each age segment, we should convert Gender from categorical to numerical value, so best tool to use is one hot encoding.\n\nFirstly, we're gonna encode the gender into males column and females column. Then we select only the people who shown up and group them by age segments. Lastly, we have the number of shown up males and females in each age segment.","62e40bbd":"Here we go. Now, it's more obvious that age segment from 41 to 60 years old has the largest number of showing up times for their appointment.","f9fca776":"We have no duplicate records too.","0f0f9c31":"### Cleaning","6d53e037":"In order to answer that question we need firstly to analyze the Gender with Show columns. We want to know the number of Shown up appointments and number of didn't show up appointments for each gender. Then we can simply divide each number over the total number of appointments to know what is the percentage of shown up and not shown up for each gender.\n\nFirstly, we're gonna encode the Show Show_0 & Show_1 columns. Then we group them by Gender and sum them to finally result in the number of Show_0 & Show_1 of each gender. Then plotting these findings for clearer investigation.","10092049":"### Assessing\n\n#### Quality Issues\n1. We won't use PatientId, AppointmentID, ScheduledDay, and AppointmentDay for analysis.\n2. Age has a record of value = -1.\n3. The name of No-show column could be inconvenient.\n\n#### Tidiness Issues\nThere's no tidiness issue.","b01551c0":"**Data Dictionary**\n* PatientId\n\t* Identification of a patient\n* AppointmentID\n\t* Identification of each appointment\n* Gender\n\t* Male or Female . Female is the greater proportion, woman takes way more care of they health in comparison to man.\n* AppointmentDay\n\t* The day of the actuall appointment, when they have to visit the doctor.\n* ScheduledDay\n\t* The day someone called or registered the appointment, this is before appointment of course.\n* Age\n\t* How old is the patient.\n* Neighbourhood\n\t* Where the appointment takes place \/ indicates the location of the hospital.\n* Scholarship\n\t* True of False\n* Hipertension\n\t* True or False\n* Diabetes\n\t* True or False\n* Alcoholism\n\t* True or False\n* Handcap\n\t* True or False\n* SMS_received\n\t* 1 or more messages sent to the patient.\n* No-show\n\t* \u2018No\u2019 if the patient showed up to their appointment, and \u2018Yes\u2019 if they did not show up.","40d55468":"<a id='conclusions'><\/a>\n## Conclusions\n\n* Age is one of the main factors that affects on people commitment towards their health. We dsicovered 2 main opposites in age segmentation. Which are: \n    1. People from 41 to 60 years old are more commited for appointments and caring more about their health. \n    2. On the other hand, people from 81 to 115 years old are almost don't care about their age. \n    \n  So, surely age is considered one of the main factors.\n\n\n\n* We also notcied that the number of females who are caring about their health is much larger than the number of males in general. Except that the number is almost equal at age segment of less than 5 years, which is reasonable because at that age, children are considered the responsibility of their family, and don't have a decision in showing up. So, Females are caring and commited more.\n\n\n* On the other hand, when we analyzed the ratio of showing up for each gender. We find that they're almost the same. So, roughly the percentage of males and females who're commited to their appointments and showing up for them is 80% out of all the appointments they made. And clearly, around 20% of them didn't show up. So, both genders has the same ratio of commitment out of the total appointments that each gender has.\n\n* As obvious from the heatmap visualization, there's a relation between Age & Hibertention and Diabetes & Hibertension. Which would be useful in our future analysis that would tackle these variables.\n\n\n### Limitations and Missing Information\nAs discovered in the General Properties of the <a href=\"#wrangling\">Data Wrangling<\/a> part:\n\n* The data only covers a span of a month and 10 days, which is very small sample with respect to the whole year. And this specific missing information could misbalance the findings.\n\n* The number of Neighbourhoods stated in the dataset is only 81 one, which is not a representative sample of the population.\n\n* It would be very useful, if there's a column indicates the average income for each person.\n\n* It would be very useful, if there's a column indicates the level of education for each person.\n\n* It would be very useful, if there's a column indicates the class of the hospital (which indicates its price).\n\n* It would be very useful, if there's a column indicates whether there's a puplic transportaion in the Neighbourhood or not.","547a67a4":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n### General Properties","d133b3c1":"<a id='intro'><\/a>\n## Introduction\nIn this project, we will be analyzing Medical Appointment No Shows dataset which is focused on the question: \n* A person makes a doctor appointment, receives all the instructions and no-show. Who to blame?\n\nThis dataset contains 110.527 medical appointments in Brazil and its 14 associated variables (characteristics). The most important one if the patient show-up or no-show to the appointment.\n\nOne of these variables is scholarship, and this variable refers to the concept of Bolsa Fam\u00edlia. It is a social welfare program of the Government of Brazil. Bolsa Fam\u00edlia provides financial aid to poor Brazilian families. The program attempts to both reduce short-term poverty by direct cash transfers and fight long-term poverty by increasing human capital among the poor through conditional cash transfers. It also works to give free education to children who cannot afford to go to school to show the importance of education. To find more, you can check this [link](https:\/\/en.wikipedia.org\/wiki\/Bolsa_Fam%C3%ADlia).\n\n\n### The questions that we plan on exploring:\n<ol>\n<li><a href=\"#q1\">Does age affect on people for showing up for their appointments? And which age segment is caring less\/more about health?<\/a><\/li>\n<li><a href=\"#q2\">Which gender of each age segment is caring less\/more about health?<\/a><\/li>\n<li><a href=\"#q3\">Which gender is commited more to their appointment, Male or Female?<\/a><\/li>\n<li><a href=\"#q4\">What is the percentage of the people who shown up for their appointments out of the total number?<\/a><\/li>\n<\/ol>\n\n\n### Future Work: \n**Questions that we could explore:**\n5. Which areas recives the largest number of appointments? \/ Which areas that their people have a lot of health issues?\n6. Which areas that their people are commited to their appointments?\n7. Are the enrolled people in Bolsa Fam\u00edlia program more commited for showing up for their appointment?\n8. Does having a mental or physical disadvantage (such as Hipertension, Diabetes, Alcoholism, and Handcap) affect on showing up for appointment? If yes, describe.\n9. Does sending SMS matter for reminding people to show up?\n\n**Statstical Analysis Using ML:**\n* What if that possible to predict someone to no-show an appointment?","2bdc3fee":"##### Test","9eb1af3c":"We almost discovered the same finding as the previous question which is the percentage of the Shown up peole to their appointments is `79.8%` with respect to `20.2%` didn't shown.","d908d4ab":"In order to gret a better understanding between the Age & Show variables, let's investigate the Age column.","900fd27b":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n\n<a id='q1'><\/a>\n### Q1: Does age affect on people for showing up for their appointments? And which age segment is caring less\/more about health?","3a8c1ff6":"As we can see it looks like that the largest number of showing up times is when `Age = 0`.","c423c3b2":"Let's invistgate the Show column, in order to better understand the percentage of the commited people out of the total.","abdb1e9f":"#### Heartmap\nOne important thing is to have an insight about the correlation between the variables. So, let's create a heatmap of all the feature variables. Heatmap is an extremely powerful way to visualize relationships between variables in high dimensional space and commonly use in Exploratory Data Analysis (EDA).","869fd9df":"##### Code","1ec4fb38":"##### Define\n1. Dropping PatientId, AppointmentID, ScheduledDay, and AppointmentDay as we won't use them for analysis.\n2. Drop the record of Age = -1\n3. Renaming No-show column by Show, and replacing Yes by 0 and No by 1 just for clarity and avoiding misconveniention.","3871bf92":"As we can see the largest times number is for age segments 46 - 65.\n\nBut, let's change the segments a bit to gather better insights.","91a57268":"<a id='q4'><\/a>\n### Q4: What is the percentage of the people who shown up for their appointments out of the total number?","4ff562f8":"<a id='q2'><\/a>\n### Q2: Which gender of each age segment is caring less\/more about health?","6233edc5":"# Project: Medical Appointment No Shows - Exploratory Data Analysis\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","b8347702":"<a id='q3'><\/a>\n### Q3: Which gender is commited more to their appointment, Male or Female?","259a9c75":"Perfect. Ther're equal. Let's move on and transpose the dataframe for somoother dealing.","45828d1c":"From analyzing this chart, we can clearly notice that below 5 years old, the number of shown up males is slightly larger. \n\nOn the other hand the number of shown up females is larger in all rest segments. However both genders is increasing from segment 16-25 years and reaching the maximum at 41-60 (as discovered while answering the last question by the way), then decreasing till reaching the minimum shown up at the segment 81-115 years old. \n\nReally intersting insights."}}