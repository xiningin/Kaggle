{"cell_type":{"1cc30320":"code","511f31e8":"code","ab4f77a8":"code","aaf3ca4c":"code","4bd8a0d7":"code","4d23b529":"code","c5d15478":"code","b0380843":"code","c6635ab8":"code","691a9102":"code","3fca914d":"code","0c90d0c2":"code","6df67b86":"code","98ad9623":"code","2a70f4ec":"code","9b868008":"code","c4cd0303":"code","b4480190":"code","84c19eb0":"code","3060f836":"code","056298f9":"code","5cbf14da":"code","4126153a":"code","5b15eab0":"code","26f0dd31":"code","601a96e2":"code","28aa707f":"code","72e83a68":"code","6129e53d":"code","2f97fe22":"code","e8238313":"code","04d89cad":"code","925466b5":"code","c8520ed2":"code","10a98ad0":"code","0d7fb080":"code","9f3c753a":"code","2fe6d5d5":"code","ee86b870":"code","7cac2334":"code","6cc81b29":"code","999da1c5":"code","0a32b0d1":"code","25ffebcc":"code","2102a4b4":"code","08881085":"code","c3c32f74":"code","5086b80a":"code","2378eea4":"code","839bc84f":"code","ec8e34af":"code","12ca36c3":"code","7f1975d7":"code","c6302ddb":"code","ca685e60":"code","a48a370b":"code","7a3bd7a6":"code","c6c5e4fe":"code","6cc48e59":"code","b97b982d":"code","e5092895":"code","56e0456e":"code","8007e695":"code","3b3451e2":"code","a2ce07ba":"code","7ce1a8b5":"code","3184449a":"code","cd4b99e0":"code","64108e00":"code","9d1f2041":"code","94faa322":"code","a5fd9b2c":"code","c0a311a0":"code","cbf878be":"code","cf4a1e17":"code","8dab8abf":"code","079bf0b8":"code","3031a7e7":"code","810a999b":"code","8ec99c82":"code","9d295787":"code","f43e0d02":"code","b5e87765":"code","9366b35d":"code","2d4a7feb":"code","d9d4d0e0":"code","a26672a5":"code","d5f54b46":"code","922fc6b3":"code","cbb90061":"code","4877a3b7":"code","c3bb648b":"code","430615c5":"code","dec70c44":"code","4c58da36":"markdown","12d6ddf8":"markdown","caa2dbd8":"markdown","3049e507":"markdown","a5371e73":"markdown","7ffc01d9":"markdown","68c052d7":"markdown","cb26ead0":"markdown","7fab9ea7":"markdown","35cbcf36":"markdown","a7057fcf":"markdown","92774f26":"markdown","11cbbaca":"markdown","faa91337":"markdown","10fc4d5f":"markdown","7a5cc838":"markdown","3cf8cf12":"markdown","72ec32eb":"markdown","1b818e40":"markdown","52dd9662":"markdown","aaf05f34":"markdown","ea01d792":"markdown","b27aaaf3":"markdown","b40abd1b":"markdown","0d5b5bf5":"markdown"},"source":{"1cc30320":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n%matplotlib inline","511f31e8":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","ab4f77a8":"train.head()","aaf3ca4c":"train.tail()","4bd8a0d7":"train.info()","4d23b529":"test.info()","c5d15478":"train.describe(include='all')","b0380843":"train = train.drop(['Ticket'],axis=1)\ntest = test.drop(['Ticket'],axis=1)","c6635ab8":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).agg(['count','mean'])","691a9102":"train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).agg(['count','mean'])","3fca914d":"a = train.loc[train['Age'].isnull()==False]","0c90d0c2":"grid = sns.FacetGrid(a, col='Survived')\ngrid.map(plt.hist, 'Age', bins=16)","6df67b86":"age_bins = np.arange(0,85,step=5)\nages = np.array(a['Age'])\nage_cat = pd.cut(ages,age_bins)\nage_df = pd.DataFrame(pd.value_counts(age_cat,sort=False).to_frame())\nage_df = age_df.rename(columns={0:'Age Count'})\n\nsurvived = a.loc[train['Survived']==1]\nsurvived_ages=np.array(survived['Age'])\nsurvived_ages_cat=pd.cut(survived_ages,age_bins)\nsurv_age_df = pd.DataFrame(pd.value_counts(survived_ages_cat,sort=False).to_frame())\nsurv_age_df = surv_age_df.rename(columns={0:'Survived Age Count'})\n\nnotsurvived = a.loc[train['Survived']==0]\nnotsurvived_ages=np.array(notsurvived['Age'])\nnotsurvived_ages_cat=pd.cut(notsurvived_ages,age_bins)\nnotsurv_age_df = pd.DataFrame(pd.value_counts(notsurvived_ages_cat,sort=False).to_frame())\nnotsurv_age_df = notsurv_age_df.rename(columns={0:'Not Survived Age Count'})","98ad9623":"tab = pd.concat([age_df,surv_age_df,notsurv_age_df],axis=1)\ntab['survival Rate'] = tab['Survived Age Count']\/tab['Age Count']\ntab['Age'] = np.arange(5,85,step=5)\ntab","2a70f4ec":"sns.scatterplot(data=tab,x='Age',y='survival Rate')","9b868008":"age_bins = [0,15,64,85]\nages = np.array(a['Age'])\nage_cat = pd.cut(ages,age_bins)\nage_df = pd.DataFrame(pd.value_counts(age_cat,sort=False).to_frame())\nage_df = age_df.rename(columns={0:'Age Count'})\n\nsurvived = a.loc[train['Survived']==1]\nsurvived_ages=np.array(survived['Age'])\nsurvived_ages_cat=pd.cut(survived_ages,age_bins)\nsurv_age_df = pd.DataFrame(pd.value_counts(survived_ages_cat,sort=False).to_frame())\nsurv_age_df = surv_age_df.rename(columns={0:'Survived Age Count'})\n\nnotsurvived = a.loc[train['Survived']==0]\nnotsurvived_ages=np.array(notsurvived['Age'])\nnotsurvived_ages_cat=pd.cut(notsurvived_ages,age_bins)\nnotsurv_age_df = pd.DataFrame(pd.value_counts(notsurvived_ages_cat,sort=False).to_frame())\nnotsurv_age_df = notsurv_age_df.rename(columns={0:'Not Survived Age Count'})\n\ntab = pd.concat([age_df,surv_age_df,notsurv_age_df],axis=1)\ntab['survival Rate'] = tab['Survived Age Count']\/tab['Age Count']\ntab","c4cd0303":"train.loc[((train['Age']==16) | (train['Age']==17))] ","b4480190":"train['title'] = train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\nnewtab = train[['title','PassengerId']].groupby(['title'],as_index=False).count()\nnewtab1 = train[['title','Survived']].groupby(['title'],as_index=False).mean()\npd.concat([newtab,newtab1],axis=1)","84c19eb0":"test['title'] = test.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\nnewtab2 = test[['title','PassengerId']].groupby(['title'],as_index=False).count()\nnewtab2","3060f836":"train = train.drop(['Name'], axis=1)\ntest = test.drop(['Name'], axis=1)\ntrain.info()","056298f9":"train['title'] = train['title'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major',\n                                      'Rev','Sir','Dona'],'Uncommon')\ntrain['title'] = train['title'].replace(['Mlle','Ms'],'Miss')\ntrain['title'] = train['title'].replace('Mme','Mrs')\n\ntest['title'] = test['title'].replace(['Capt','Col','Countess','Don','Dr','Jonkheer','Lady','Major',\n                                      'Rev','Sir','Dona'],'Uncommon')\ntest['title'] = test['title'].replace(['Mlle','Ms'],'Miss')\ntest['title'] = test['title'].replace('Mme','Mrs')","5cbf14da":"train[['title','Survived']].groupby(['title'],as_index=False).mean()","4126153a":"sns.boxplot(x='title',y='Age',data=train)","5b15eab0":"miss_age = train.loc[train['title']=='Miss']\nmiss_age_sp = miss_age.loc[miss_age['SibSp']>0]\nmiss_age_nsp = miss_age.loc[miss_age['SibSp']==0]\nsns.boxplot(data=[miss_age_sp['Age'],miss_age_nsp['Age']])","26f0dd31":"plt.hist(miss_age_sp['Age'],alpha=0.3,color='blue',bins=12)\nplt.hist(miss_age_nsp['Age'],alpha=0.3,color='red',bins=12)","601a96e2":"miss_age_sp_class1 = miss_age_sp.loc[miss_age_sp['Pclass']==1]\nmiss_age_sp_class2 = miss_age_sp.loc[miss_age_sp['Pclass']==2]\nmiss_age_sp_class3 = miss_age_sp.loc[miss_age_sp['Pclass']==3]\nplt.hist(miss_age_sp_class1['Age'],alpha=0.1,color='blue',bins=12)\n","28aa707f":"plt.hist(miss_age_sp_class2['Age'],alpha=0.1,color='red',bins=12)\n","72e83a68":"plt.hist(miss_age_sp_class3['Age'],alpha=0.1,color='green',bins=12)","6129e53d":"mr_age = train.loc[train['title']=='Mr']\nplt.hist(mr_age['Age'],bins=16)","2f97fe22":"uncommon_age = train.loc[train['title']=='Uncommon']\nplt.hist(uncommon_age['Age'],bins=16)","e8238313":"Age_class = []\nfor i in np.arange(891):\n    if pd.isnull(train['Age'][i]):\n        if train['title'][i] == 'Miss':\n            if train['SibSp'][i] == 0:\n                Age_class.append('Adult')\n            elif train['SibSp'][i] > 0 and train['Pclass'][i] == 1:\n                Age_class.append('Adult')\n            else:\n                Age_class.append('Child')\n        elif train['title'][i] == 'Mr' or train['title'][i] == 'Mrs' or train['title'][i] == 'Uncommon':\n            Age_class.append('Adult')\n        else:\n            Age_class.append('Child')\n    elif train['Age'][i] <= 15:\n        Age_class.append('Child')\n    elif train['Age'][i] > 15 and train['Age'][i] < 65:\n        Age_class.append('Adult')\n    else:\n        Age_class.append('OAP')\n        ","04d89cad":"train['Age_class'] = Age_class\ntrain.head()","925466b5":"Age_class1 = []\nfor i in np.arange(418):\n    if pd.isnull(test['Age'][i]):\n        if test['title'][i] == 'Miss':\n            if test['SibSp'][i] == 0:\n                Age_class1.append('Adult')\n            elif test['SibSp'][i] > 0 and test['Pclass'][i] == 1:\n                Age_class1.append('Adult')\n            else:\n                Age_class1.append('Child')\n        elif test['title'][i] == 'Mr' or test['title'][i] == 'Mrs' or test['title'][i] == 'Uncommon':\n            Age_class1.append('Adult')\n        else:\n            Age_class1.append('Child')\n    elif test['Age'][i] <= 15:\n        Age_class1.append('Child')\n    elif test['Age'][i] > 15 and test['Age'][i] < 65:\n        Age_class1.append('Adult')\n    else:\n        Age_class1.append('OAP')\n        ","c8520ed2":"test['Age_class'] = Age_class1\ntest.head()","10a98ad0":"train = train.drop(['Age'],axis=1)\ntest = test.drop(['Age'],axis=1)\ntrain.info()\ntest.info()","0d7fb080":"train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).agg(['count','mean'])","9f3c753a":"train.loc[train['Embarked'].isnull()]","2fe6d5d5":"pd.crosstab(train['Embarked'],train['Pclass'],rownames=['Embarked'],colnames=['Pclass'])","ee86b870":"train.at[61,'Embarked'] = 'C'","7cac2334":"train.at[829,'Embarked'] = 'S'","6cc81b29":"train['cab_letter'] = train['Cabin'].astype(str).str[0]","999da1c5":"train.head()","0a32b0d1":"train[['cab_letter','Survived']].groupby(['cab_letter'],as_index=False).agg(['count','mean'])","25ffebcc":"a = train.loc[train['Cabin'].notnull()]\na['Survived'].mean()","2102a4b4":"pd.crosstab(train['cab_letter'],train['Pclass'])","08881085":"pd.crosstab([train['cab_letter'],train['Survived']],train['Pclass'])","c3c32f74":"had_cabin = []\nfor i in np.arange(891):\n    if pd.isnull(train['Cabin'][i]):\n        had_cabin.append(0)\n    else:\n        had_cabin.append(1)\ntrain['had_cabin'] = had_cabin\ntrain.head()","5086b80a":"train = train.drop(['Cabin','cab_letter'],axis=1)\ntrain.head()","2378eea4":"had_cabin1 = []\nfor i in np.arange(418):\n    if pd.isnull(test['Cabin'][i]):\n        had_cabin1.append(0)\n    else:\n        had_cabin1.append(1)\ntest['had_cabin'] = had_cabin1\ntest.head()","839bc84f":"test = test.drop(['Cabin'],axis=1)","ec8e34af":"test.info()\ntrain.info()","12ca36c3":"pd.crosstab([train['had_cabin'],train['Survived']],train['Pclass'])","7f1975d7":"train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).agg(['count','mean'])","c6302ddb":"plt.hist(train['Fare'],bins=20)","ca685e60":"grid = sns.FacetGrid(train, col='Survived')\ngrid.map(plt.hist, 'Fare')","a48a370b":"a = train.loc[train['Pclass']==1]\nb = train.loc[train['Pclass']==2]\nc = train.loc[train['Pclass']==3]","7a3bd7a6":"grid = sns.FacetGrid(a, col='Survived')\ngrid.map(plt.hist, 'Fare')","c6c5e4fe":"grid = sns.FacetGrid(b, col='Survived')\ngrid.map(plt.hist, 'Fare')","6cc48e59":"grid = sns.FacetGrid(c, col='Survived')\ngrid.map(plt.hist, 'Fare')","b97b982d":"sns.lmplot(x='Fare',y='Survived',data=train,logistic=True,line_kws={'color':'black'})","e5092895":"sns.lmplot(x='Fare',y='Survived',data=a,logistic=True,line_kws={'color':'black'})","56e0456e":"sns.lmplot(x='Fare',y='Survived',data=b,logistic=True,line_kws={'color':'black'})","8007e695":"sns.lmplot(x='Fare',y='Survived',data=c,logistic=True,line_kws={'color':'black'})","3b3451e2":"Fare1 = []\nfor i in np.arange(891):\n    if train['Pclass'][i] == 1:\n        Fare1.append(train['Fare'][i])\n    else:\n        Fare1.append(0)\nFare2 = []\nfor i in np.arange(891):\n    if train['Pclass'][i] == 2:\n        Fare2.append(train['Fare'][i])\n    else:\n        Fare2.append(0)\ntrain['Fare1'] = Fare1\ntrain['Fare2'] = Fare2","a2ce07ba":"Fare1t = []\nfor i in np.arange(418):\n    if test['Pclass'][i] == 1:\n        Fare1t.append(test['Fare'][i])\n    else:\n        Fare1t.append(0)\nFare2t = []\nfor i in np.arange(418):\n    if test['Pclass'][i] == 2:\n        Fare2t.append(test['Fare'][i])\n    else:\n        Fare2t.append(0)\ntest['Fare1'] = Fare1t\ntest['Fare2'] = Fare2t","7ce1a8b5":"test.loc[test['Fare'].isnull()] #missing value for Fare is in Pclass 3","3184449a":"c['Fare'].mean() #mean price of ticket for pclass 3 is 13.68","cd4b99e0":"test.at[152,'Fare'] = 13.68","64108e00":"train = train.drop(['Fare'],axis=1)\ntest = test.drop(['Fare'],axis=1)","9d1f2041":"train.info()\ntest.info()","94faa322":"train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).agg(['count','mean'])","a5fd9b2c":"train[['Parch','Survived']].groupby(['Parch'],as_index=False).agg(['count','mean'])","c0a311a0":"count_tab = pd.crosstab(train['SibSp'],train['Parch'])\ncount_tab","cbf878be":"table = pd.pivot_table(train, values='Survived', index=['SibSp'],columns=['Parch'], aggfunc=np.mean, fill_value=0)","cf4a1e17":"table","8dab8abf":"sns.heatmap(table)","079bf0b8":"family_size = []\nfor i in np.arange(891):\n    if train['SibSp'][i] + train['Parch'][i] <= 3 and train['SibSp'][i] + train['Parch'][i] >= 1:\n        family_size.append(1)\n    else:\n        family_size.append(0)\ntrain['family_size'] = family_size\n\nfamily_size1 = []\nfor i in np.arange(418):\n    if test['SibSp'][i] + test['Parch'][i] <= 3 and test['SibSp'][i] + test['Parch'][i] >= 1:\n        family_size1.append(1)\n    else:\n        family_size1.append(0)\ntest['family_size'] = family_size1","3031a7e7":"train.info()\ntest.info()","810a999b":"train['Sex'] = train['Sex'].map({'female': 0, 'male': 1}).astype(int)\ntest['Sex'] = test['Sex'].map({'female': 0, 'male': 1}).astype(int)\ntrain = train.drop(['PassengerId','SibSp','Parch'],axis=1)\ntest = test.drop(['SibSp','Parch'],axis=1)\ntrain.info()\ntest.info()","8ec99c82":"emb_dummies = pd.get_dummies(train['Embarked'])\ntitle_dummies = pd.get_dummies(train['title'])\nage_dummies = pd.get_dummies(train['Age_class'])","9d295787":"train = train.drop(['Embarked','title','Age_class'],axis=1)\ndummies = pd.concat([emb_dummies,title_dummies,age_dummies],axis=1)\ntrain = pd.concat([train,dummies],axis=1)","f43e0d02":"#Multicollinearity consideration\ntrain = train.drop(['C','Master','Child'],axis=1)\ntrain.info()","b5e87765":"emb1_dummies = pd.get_dummies(test['Embarked'])\ntitle1_dummies = pd.get_dummies(test['title'])\nage1_dummies = pd.get_dummies(test['Age_class'])\n\ntest = test.drop(['Embarked','title','Age_class'],axis=1)\ndummies1 = pd.concat([emb1_dummies,title1_dummies,age1_dummies],axis=1)\ntest = pd.concat([test,dummies1],axis=1)\n\n#Multicollinearity consideration\ntest = test.drop(['C','Master','Child'],axis=1)\ntest.info()","9366b35d":"first_class = []\nfor i in np.arange(891):\n    if train['Pclass'][i] == 1:\n        first_class.append(1)\n    else:\n        first_class.append(0)\n        \nsecond_class = []\nfor i in np.arange(891):\n    if train['Pclass'][i] == 2:\n        second_class.append(1)\n    else:\n        second_class.append(0)\n        \ntrain['first_class'] = first_class\ntrain['second_class'] = second_class\ntrain = train.drop(['Pclass'],axis=1)\ntrain.info()","2d4a7feb":"first_class1 = []\nfor i in np.arange(418):\n    if test['Pclass'][i] == 1:\n        first_class1.append(1)\n    else:\n        first_class1.append(0)\n        \nsecond_class1 = []\nfor i in np.arange(418):\n    if test['Pclass'][i] == 2:\n        second_class1.append(1)\n    else:\n        second_class1.append(0)\n        \ntest['first_class'] = first_class1\ntest['second_class'] = second_class1\ntest = test.drop(['Pclass'],axis=1)\ntest.info()","d9d4d0e0":"train.head()","a26672a5":"test.head()","d5f54b46":"Y = train['Survived']\nX = train.drop(['Survived'],axis=1)","922fc6b3":"Y = np.ravel(Y)","cbb90061":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100,max_depth=4) #max_depth of 4 to avoid overfitting\nrandom_forest.fit(X, Y)\nrandom_forest.score(X, Y)","4877a3b7":"pass_id = test['PassengerId']\ntest = test.drop(['PassengerId'],axis=1)\npredictions = random_forest.predict(test)","c3bb648b":"final_submission = pd.DataFrame({\"PassengerId\":pass_id,\"Survived\":predictions})","430615c5":"final_submission","dec70c44":"final_submission.to_csv('final_submission.csv',index=False)","4c58da36":"The random forest achieved an accuracy of 78.2% putting me in the top 21% at the time of writing - not bad for a first attempt. Looking back at what I could have done differently, I perhaps would have left age as a continuous variable and replaced null values with the median age for each respective title. I also didn't test the accuracy of other classification algorithms - Logistic regression is good for exploring how critical each feature is to the model, so that could have been used to see which features could be dropped.","12d6ddf8":"Now we can explore SibSp and Parch","caa2dbd8":"We now have all the features we want in the model, but we have to get it into the right format. There are no more null values in either dataset so we don't have to complete any more features. We need to get the 'Sex' category into number format where male takes the value 1 and female 0. We can remove PassengerId, SibSp and Parch. Pclass, Embarked, title and age_class are categorical data so we need to create dummies for these variables.","3049e507":"The age feature contains null values so we need to complete it. We need to think about other features that could help us estimate whether passengers that have a null value for age are a child, an adult or an OAP. Extracting the title from Name could give us some clues. For example, a master will be under 18 and a 'miss' is likely to be younger than a 'mrs'.","a5371e73":"Roughly 63% of the 216 passengers with a class 1 ticket survived, compared to a survival rate of 38% for the whole training data set. We can clearly see that the lower the class of ticket, the lower the chances of survival and thus this is a feature that should remain in our final model. There is also a huge difference in the survival rate between males and females - 74% of the 314 females in the training set survived compared to roughly 19% of the 577 men. ","7ffc01d9":"The histograms help us to better visualise the age distribution of those with the title mr and uncommon, therefore I am willing to accept anyone as 'mr' or 'uncommon' as an adult. Now we need to add the new classification to the data set.","68c052d7":"Given the histogram I'm happy to accept every miss that has no spouse\/sibling on board as an adult. However there is roughly a 50\/50 split for those that do between children and adults so, I'm going to delve further for this category, by looking at ticket class.","cb26ead0":"# Titanic Survival Prediction","7fab9ea7":"Immediately we can see that anyone who is a master is a child and anyone who is a mrs is an adult. There is a large portion of the uncommon title category and mr category that are adults with the exception of a few. Whilst every miss is not an OAP and some are children. We can delve further into the 'miss', 'mr' and 'uncommon' categories. Those categorised as 'miss' that have value 'SibSp' > 0 may be more likely to be children than those where 'SibSp' = 0. This is because if a miss has a sibling or spouse onboard they are more likely to be a sibling, because if it was a spouse, the chances are they would be a mrs.","35cbcf36":"For the training data set there are 891 rows with a fair amount of missing data for Age, Cabin and two missing values for Embarked. For the test data set there are 418 rows, again with a fair amount of missing data for age and cabin and one missing value for Fare. Immediately we can see that PassengerId and Ticket aren't going to tell us anything with regards to the chances of a passengers survival - PassengerId is a unique identifier for each passenger, whilst 681\/891 values for Ticket are unique. Ticket appears to take alphanumeric value and is unlikely to show any relationship with survival. Cabin is an interesting one, only 204\/891 rows of the training set contain non-null values. Initially this could be a candidate to discard from our model, but we should carry out some investigation before doing so. For example, it appears as though 'Cabin' takes the format letter-number, could those with a certain letter as their cabin number have a better chance of survival? We should also check if we could reasonably estimate the cabin letter, perhaps it could show a strong correlation with Pclass or Fare? Name is another interesting one. Although every name is unique, if we could extract the title from each name, this could potentially tell us something about a passenger\u2019s survival chances. First, we will do some exploratory analysis for the remaining features: Pclass, Sex, Age, SibSp, Parch, Fare, Embarked and see how they correlate with survival.","a7057fcf":"We have one more feature that contains null values - Cabin. Only 204\/891 in the training set are non null. The cabin seems to take the format letter-number. If the letter in the cabin can tell us something about a passengers chances of survival then it could be worth trying to complete this feature, however if we can't reasonably estimate the cabin letter from other features in the training set then we should drop this feature altogether. First lets extract the Cabin letter from the cabin number.","92774f26":"Given the histograms, I am happy to class every miss with a spouse\/sibling on board and a class 1 ticket as an adult and every miss with a spouse\/sibling on board with any other class ticket as a child. The rules we have built so far for classifying age are:\n\nAnyone with a value for age:\n* <=15 is a child\n* 15< and <65 is an adult\n* 65 or over is an OAP\n\nAnyone without a value for age:\n* Master is a child\n* Mrs is an adult\n* Miss with no spouse on board is an adult\n* Miss with a spouse on board and 1st class ticket is an adult\n* Miss with a spouse on board and ticket below 1st class is a child\n\nNow we need to explore 'mr' and 'uncommon' to complete the age classification","11cbbaca":"Next we'll investigate the Fare feature. It is clear just by looking at a snapshot of the data that the Fare is directly correlated to the ticket class but it could be worth seeing if there is variation in survival rate by the fare paid within each pclass group.","faa91337":"It looks like survival rates are good for people who are in smaller families and aren't alone. Particularly those in families of less than 4. I will create a new variable called Family size that returns 1 if SibSp + Parch falls within 1 and 3 and 0 otherwise.","10fc4d5f":"So 59% of those that purchased first class tickets embarked from Southampton. Looking back before we dropped the name feature the names of the two who had null embarked values were Amelie Icard (PassengerId 62) and Mrs Martha Stone (PassengerId 830). Given the names I think we can reasonably assume Amelie embarked from Chersbourg and we can see that Martha purchased a first class ticket. Given that 59% of those that purchased first class tickets embarked from Southampton and 72% of the passengers overall embarked from there, I'm happy to assume Martha embarked from Southampton.","7a5cc838":"Having so many different categories for title could be overfitting, so we will first simplify it by separating titles as the most common: Mr, Mrs, Miss, Master and everything else as uncommon. There are also titles such as mlle which is the prefix for mademoiselle and ms which need to be converted to 'miss' and mme which is the prefix for madame which needs to converted into 'mrs'.","3cf8cf12":"Age is a continuous variable so it would be better to visualise the distribution of the age for those who survived and those who didn't. Earlier we saw that the max value for age was 80, with the minimum value below 1, so we will look at the distribution in bins of 5, which will be 16 bins.","72ec32eb":"One of the things I have to decide is whether to consider those 18 or over as adults or those 16 or over, given that it wasn't uncommon for people aged 16-18 to be married back then. Setting the threshold at 16 brings the survival rate up for children from around 50% to around 59%. This coupled with the fact that a simple exploration of 16 & 17 year olds on board shows a large proportion of them without children or parents onboard in the 'Parch' feature makes me lean towards 16 as the threshold. ","1b818e40":"It could help to split the age feature into categories and compare the survival rate amongst each category.","52dd9662":"It looks like the survival rate for those embarking from Southampton and Queenstown is similar to the overall survival rate for the training dataset. Those embarking from Cherbourg had a higher survival rate at around 55% so this is a feature that we should leave in for model training. To complete the remaining two null values for embarked we need to think about which features might be able to tell us where they embarked from. Pclass could be a good indicator - certain ports could be nearer to more affluent areas where passengers may be more likely to purchase a first class ticket.","aaf05f34":"Now let's explore the embarked feature. We also need to complete the two null values for this feature in the training data set.","ea01d792":"I'm starting my first Kaggle notebook with the classic Titanic Survival Prediction competition. The first task is to import the relevant libraries and take a look at what the data looks like. It's important to understand the data type for each feature and see if there is any missing data.","b27aaaf3":"The sample sizes for each individual cabin letter are small, so I don't think it would help the model to split cabin into letter classes. Interestingly, the survival rate for the group who have a cabin value is two thirds, whereas the survival rate for the group with the cabin value as null is around 30%. Looking into why this might be we can see that the vast majority of those that have a value for cabin had a first class ticket, whilst the vast majority that had a null value for cabin were in second or third class. I'm going to change the Cabin feature into whether the passenger had a value for Cabin.","b40abd1b":"There is clearly a trend in the survival rate against fare within each Pclass group except for those with third class tickets, so I will create an interaction between Pclass and Fare by creating two new variables: Fare1 and Fare2. Fare1 will take the Fare value if the passenger has a first class ticket and 0 otherwise, Fare2 will take the Fare value if the passenger has a second class ticket and 0 otherwise. Due to multicollinearity we can't create a Fare3 variable.","0d5b5bf5":"The survival rate amongst those under 15 looks relatively good with the exception of the age 6-10 category which is a lot closer to the data set average, whilst the survival rate doesn't differ much for those above the age of 15 to those under the age of 65. We could leave Age as a continuous variable but in order to estimate the age of the 177 passengers that have a null value for age, my initial thoughts are that it could be a good idea to split the age feature into three groups: child, adult and OAP. Let's take a look what happens to the survival rates when we split into these categories."}}