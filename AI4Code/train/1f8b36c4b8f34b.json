{"cell_type":{"6b6c24f3":"code","f5e02cd6":"code","8cd1b39d":"code","02c2c6ca":"code","a285e76a":"code","053aa830":"code","fe1cc950":"code","436175be":"code","52b695b3":"code","cdae146f":"code","07e7e068":"code","c5739291":"code","5b6a7230":"code","4cfdf972":"code","1516f94f":"code","ebb2b64c":"code","b48a3859":"code","fc19fd1e":"code","cf288df5":"code","c6d92732":"code","894bb94b":"code","46318c2a":"code","c8fe7cf6":"code","e804ead0":"code","38b3a488":"code","c4a96a1c":"code","1f3df6d0":"code","a0e9e230":"code","7fa6207c":"code","7ce6ab57":"code","82550732":"code","0de78989":"code","0adec743":"code","0ce29b2d":"code","e4359f28":"code","5222a941":"code","fc6227a9":"code","d6833585":"code","9542099a":"code","218151a3":"code","1725abd3":"code","68b03342":"code","dab40766":"code","a8bf0d34":"code","393854ff":"code","c851e507":"code","e3e32356":"code","b9795f0b":"code","b8687909":"code","d24fa053":"code","cd3524fb":"code","25b515ac":"code","e6cc67e9":"code","c7f69542":"code","aad2acf8":"code","02b171da":"code","aeb5734f":"code","46c473ef":"markdown","a0b4d234":"markdown","203ec9ed":"markdown","7f187b30":"markdown","8cc7a377":"markdown","f0d5e55d":"markdown","ea3b8b34":"markdown","039b7218":"markdown","5a69760c":"markdown","06afed3c":"markdown","12522b2b":"markdown","79272b18":"markdown","ba16db8f":"markdown","b56bd93a":"markdown","df196966":"markdown","51f130b9":"markdown"},"source":{"6b6c24f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport datetime\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, ShuffleSplit, learning_curve\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier, GradientBoostingClassifier, VotingClassifier, StackingClassifier, BaggingClassifier\n# explicitly require this experimental feature\nfrom sklearn.experimental import enable_hist_gradient_boosting  # noqa\n# now you can import normally from ensemble\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\nfrom sklearn.model_selection import KFold, GridSearchCV\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb\n\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nmatplotlib.rcParams.update({'font.size': 12})\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","f5e02cd6":"def twohistplot(column, df, Xrangetoplot = None, Xbinstoplot = None, Yrangetoplot = None, Ybinstoplot = None, medianplot = True):\n    if Yrangetoplot is None:\n        if not(Xrangetoplot is None):\n            Yrangetoplot = Xrangetoplot\n    if Ybinstoplot is None:\n        if not(Xbinstoplot is None):\n            Ybinstoplot = Xbinstoplot\n    X = train.loc[df['Credit Default'] == 0, column]\n    Y = train.loc[df['Credit Default'] != 0, column]\n    fig, axs = plt.subplots(1, 2, figsize=(12, 5))\n    axs[0].hist(X, bins = Xbinstoplot, density = True, range = Xrangetoplot, color = 'green', alpha = 0.3, log = False)\n    axs[1].hist(Y, bins = Ybinstoplot, density = True, range = Yrangetoplot, color = 'red', alpha = 0.3, log = False)\n    \n    if medianplot:\n        axs[0].axvline(X.mean(), color='k', linestyle='dashed', linewidth=1)\n        axs[1].axvline(Y.mean(), color='k', linestyle='dashed', linewidth=1)\n        axs[0].axvline(X.median(), color='k', linestyle='solid', linewidth=1)\n        axs[1].axvline(Y.median(), color='k', linestyle='solid', linewidth=1)\n    axs[0].set_title('Credit closed on time')\n    axs[1].set_title('Credit expired')\n    axs[0].set_xlabel(column)\n    axs[1].set_xlabel(column)\n    axs[0].grid(True)\n    axs[1].grid(True)\n    plt.show()\n    ","8cd1b39d":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))","02c2c6ca":"def balance_df_by_target(df, target_name):\n\n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n\n    for i in range(disbalance_coeff):\n        sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n        df = df.append(sample, ignore_index=True)\n\n    return df.sample(frac=1) ","a285e76a":"TRAIN_DATASET_PATH = '\/kaggle\/input\/credit-data\/train (1).csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/credit-data\/test (1).csv'","053aa830":"train = pd.read_csv(TRAIN_DATASET_PATH)","fe1cc950":"train.head()","436175be":"train.shape","52b695b3":"train.dtypes","cdae146f":"train.isnull().sum()","07e7e068":"#temp = train.loc[]\ntemp = train\nfor item in temp.columns:\n    if temp[item].dtype in ['int64', 'float64']:\n        item_mean = temp[item].mean()\n        item_mode = temp[item].mode()[0]\n        item_median = temp[item].median()\n        print(item, '\\n', 'Min value: ', temp[item].min(), '\\n','Mean value: ', item_mean, '\\n','Mode value: ', item_mode, '\\n','Median value: ', item_median, '\\n','Max value: ', temp[item].max(),  '\\n', '\\n')\n        print(item, '\\n',pd.unique(train[item]),'\\n','\\n')\n    else: \n        print(item, '\\n',pd.unique(train[item]),'\\n','\\n')\n    \ntemp = None","c5739291":"class DataPreprocessing:\n    \"\"\"Correction of the possible wrong data\"\"\"\n    def __init__(self):\n        self.av_X = pd.DataFrame()\n        \n    def home_ownership_corr(self, X):\n        str_to_numbers = {'Own Home': 1, 'Home Mortgage': 2, 'Rent': 3, 'Have Mortgage': 4}\n        X['Home Ownership'] = X['Home Ownership'].replace(str_to_numbers)\n        X['Home Ownership'] = X['Home Ownership'].astype(int)\n        return X\n    \n    def purpose_corr(self, X):\n        str_to_numbers = {'debt consolidation': 1, 'other': 2, 'home improvements': 3, 'take a trip': 4,\n                          'buy a car': 5,'small business': 6, 'business loan': 7, 'wedding': 8,\n                          'educational expenses': 9, 'buy house': 10, 'medical bills': 11, 'moving': 12,\n                          'major purchase': 13, 'vacation': 14, 'renewable energy': 15}\n        X['Purpose'] = X['Purpose'].replace(str_to_numbers)\n        X['Purpose'] = X['Purpose'].astype(int)\n        return X\n    \n    def term_corr(self, X):\n        str_to_numbers = {'Short Term': 1, 'Long Term': 2}\n        X['Term'] = X['Term'].replace(str_to_numbers)\n        X['Term'] = X['Term'].astype(int)\n        return X\n        \n    def annual_income_corr(self, X):\n        X.loc[X['Annual Income'].isnull(),'Annual Income'] = 0\n        return X\n    \n    def years_in_current_job_corr(self, X):\n        str_to_numbers = {'10+ years': 10, '9 years': 9, '8 years': 8, '7 years': 7, '6 years': 6,\n                         '5 years': 5, '4 years': 4, '3 years': 3,'2 years': 2, '1 year': 1,\n                         '< 1 year': 0}\n        X['Years in current job'] = X['Years in current job'].replace(str_to_numbers)\n        X.loc[X['Years in current job'].isnull(),'Years in current job'] = 0\n        \n        return X\n    \n    def months_since_last_delinquent_corr(self, X):\n        X.loc[X['Months since last delinquent'].isnull(),'Months since last delinquent'] = 0\n        X['Months since last delinquent'] = X['Months since last delinquent'].astype(int)\n        return X\n    \n    def bankruptcies_corr(self, X):\n        X.loc[X['Bankruptcies'].isnull(),'Bankruptcies'] = 0\n        X['Bankruptcies'] = X['Bankruptcies'].astype(int)\n        return X\n    \n    def credit_score_corr(self, X):\n        X.loc[X['Credit Score']>5000, 'Credit Score'] = X.loc[X['Credit Score']>5000, 'Credit Score']\/10\n        X.loc[X['Credit Score'].isnull(),'Credit Score'] = 0\n        X['Credit Score'] = X['Credit Score'].astype(int)\n        return X\n    \n    def current_loan_amount_corr(self, X):\n        X.loc[X['Current Loan Amount']==9.9999999e+07, 'Current Loan Amount'] = 0\n        return X\n    \n    def maximum_open_credit_corr(self, X):\n        X.loc[X['Maximum Open Credit']>=1000000000, 'Maximum Open Credit'] = X.loc[X['Maximum Open Credit']>=1000000000, 'Maximum Open Credit']\/10\n        return X\n    \n    def data_correction(self, Y):\n        Y = self.home_ownership_corr(Y)\n        Y = self.purpose_corr(Y)\n        Y = self.term_corr(Y)\n        Y = self.annual_income_corr(Y)\n        Y = self.years_in_current_job_corr(Y)\n        Y = self.months_since_last_delinquent_corr(Y)\n        Y = self.bankruptcies_corr(Y)\n        Y = self.credit_score_corr(Y)\n        Y = self.current_loan_amount_corr(Y)\n        Y = self.maximum_open_credit_corr(Y)\n        return Y","5b6a7230":"datacorrection = DataPreprocessing()\ntrain = datacorrection.data_correction(train)\n#train = datacorrection.annual_income_corr(train)\n#train = datacorrection.years_in_current_job_corr(train)\ntrain.isnull().sum()\n","4cfdf972":"train.shape","1516f94f":"temp = train\nfor item in temp.columns:\n    if temp[item].dtype in ['int64', 'float64']:\n        item_mean = temp[item].mean()\n        item_mode = temp[item].mode()[0]\n        item_median = temp[item].median()\n        print(item, '\\n', 'Min value: ', temp[item].min(), '\\n','Mean value: ', item_mean, '\\n','Mode value: ', item_mode, '\\n','Median value: ', item_median, '\\n','Max value: ', temp[item].max(),  '\\n', '\\n')\n        print(item, '\\n',pd.unique(train[item]),'\\n','\\n')\n    else: \n        print(item, '\\n',pd.unique(train[item]),'\\n','\\n')\n    \ntemp = None","ebb2b64c":"train.dtypes","b48a3859":"plt.figure(figsize = (10,10))\ndataindx = (train['Months since last delinquent'] >= 0) \nsns.scatterplot(x = train.loc[dataindx, 'Credit Score'], y = train.loc[dataindx, 'Credit Default'])\nplt.grid(b = True, which = 'both')\nplt.minorticks_on\nplt.show()\n","fc19fd1e":"twohistplot('Months since last delinquent', train, [1,118], 118)\n#twohistplot(column, df, Xrangetoplot, Xbinstoplot, Yrangetoplot, Ybinstoplot)","cf288df5":"twohistplot('Years in current job', train, [0,10], 10)","c6d92732":"twohistplot('Number of Open Accounts', train, [0,44], 44)","894bb94b":"twohistplot('Years of Credit History', train, [0,60], 60)","46318c2a":"twohistplot('Maximum Open Credit', train, [0,3000000], 500)","c8fe7cf6":"twohistplot('Maximum Open Credit', train, [3000000, 10000000], 100, [3000000, 10000000], 100, False)","e804ead0":"twohistplot('Number of Credit Problems', train)","38b3a488":"twohistplot('Current Loan Amount', train, [1,800000], 100, [1,800000], 100)","c4a96a1c":"train.loc[(train['Current Loan Amount']>=900000)&(train['Credit Default']==0)&(train['Maximum Open Credit']>=0),'Current Loan Amount'].count()\n","1f3df6d0":"twohistplot('Current Credit Balance', train, [0,1000000], 100, [0,1000000], 100)","a0e9e230":"twohistplot('Monthly Debt', train, [0,100000], 100, [0,100000], 100)","7fa6207c":"twohistplot('Credit Score', train, [600,760], 100, [600,760], 100)","7ce6ab57":"train.loc[(train['Credit Score']>=0)&(train['Credit Score']<=300), 'Credit Score']","82550732":"train.dtypes","0de78989":"target_name = 'Credit Default'\ntrain = pd.read_csv(TRAIN_DATASET_PATH)\ntest = pd.read_csv(TEST_DATASET_PATH)\n\nnumeric_features = ['Annual Income', 'Number of Open Accounts', \n                    'Years of Credit History', 'Maximum Open Credit', 'Number of Credit Problems', \n                    'Months since last delinquent', 'Bankruptcies', 'Current Loan Amount', \n                    'Current Credit Balance', 'Monthly Debt', 'Credit Score']","0adec743":"scaler = StandardScaler()\n\ntrain_norm = train.copy()\ntrain_norm[numeric_features] = scaler.fit_transform(train_norm[numeric_features])\n\ntrain = train_norm.copy()","0ce29b2d":"X = train.drop(columns = target_name)\ny = train[target_name]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.33, shuffle = True, random_state = 21)","e4359f28":"preprocessor = DataPreprocessing()\nX_train = preprocessor.data_correction(X_train)\nX_valid = preprocessor.data_correction(X_valid)\ntest = preprocessor.data_correction(test)","5222a941":"df_for_balancing = pd.concat([X_train, y_train], axis=1)\ndf_balanced = balance_df_by_target(df_for_balancing, target_name)\n    \ndf_balanced[target_name].value_counts()\n","fc6227a9":"X_train = df_balanced.drop(columns=target_name)\ny_train = df_balanced[target_name]","d6833585":"#RandomForestClassifier(n_estimators=100, *, criterion='gini', max_depth=None, min_samples_split=2, \n#min_samples_leaf=1, min_weight_fraction_leaf=0.0, max_features='auto', max_leaf_nodes=None, \n#min_impurity_decrease=0.0, min_impurity_split=None, bootstrap=True, oob_score=False, n_jobs=None, \n#random_state=None, verbose=0, warm_start=False, class_weight=None, ccp_alpha=0.0, max_samples=None)\nRFclf = RandomForestClassifier(n_estimators=60, max_depth=7, random_state=21).fit(X_train, y_train)\ny_train_pred = RFclf.predict(X_train)\nprint('Train - ',RFclf.score(X_train, y_train))\ny_valid_pred = RFclf.predict(X_valid)\nprint('Validation - ',RFclf.score(X_valid, y_valid))","9542099a":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","218151a3":"#BaggingClassifier(base_estimator=None, n_estimators=10, *, max_samples=1.0, max_features=1.0, bootstrap=True, \n#bootstrap_features=False, oob_score=False, warm_start=False, n_jobs=None, random_state=None, verbose=0)\nBgclf = BaggingClassifier(n_estimators=115, random_state=21).fit(X_train, y_train) \ny_train_pred = Bgclf.predict(X_train)\nprint('Train - ',Bgclf.score(X_train, y_train))\ny_valid_pred = Bgclf.predict(X_valid)\nprint('Validation - ',Bgclf.score(X_valid, y_valid))","1725abd3":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","68b03342":"#GradientBoostingClassifier(*, loss='deviance', learning_rate=0.1, n_estimators=100, subsample=1.0, \n#criterion='friedman_mse', min_samples_split=2, min_samples_leaf=1, min_weight_fraction_leaf=0.0, \n#max_depth=3, min_impurity_decrease=0.0, min_impurity_split=None, init=None, random_state=None, \n#max_features=None, verbose=0, max_leaf_nodes=None, warm_start=False, validation_fraction=0.1, \n#n_iter_no_change=None, tol=0.0001, ccp_alpha=0.0)\nGBclf = GradientBoostingClassifier(learning_rate=0.05, n_estimators=115, random_state=21).fit(X_train, y_train) \ny_train_pred = GBclf.predict(X_train)\nprint('Train - ',GBclf.score(X_train, y_train))\ny_valid_pred = GBclf.predict(X_valid)\nprint('Validation - ',GBclf.score(X_valid, y_valid))","dab40766":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","a8bf0d34":"#HistGradientBoostingClassifier(loss='auto', *, learning_rate=0.1, max_iter=100, max_leaf_nodes=31, \n#max_depth=None, min_samples_leaf=20, l2_regularization=0.0, max_bins=255, categorical_features=None, \n#monotonic_cst=None, warm_start=False, early_stopping='auto', scoring='loss', validation_fraction=0.1, \n#n_iter_no_change=10, tol=1e-07, verbose=0, random_state=None)\nHGBclf = HistGradientBoostingClassifier(learning_rate=0.05, max_iter=90, max_depth=9, random_state=21).fit(X_train, y_train) \ny_train_pred = HGBclf.predict(X_train)\nprint('Train - ',HGBclf.score(X_train, y_train))\ny_valid_pred = HGBclf.predict(X_valid)\nprint('Validation - ',HGBclf.score(X_valid, y_valid))","393854ff":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","c851e507":"lgbmclf = lgbm.LGBMClassifier(random_state=21).fit(X_train, y_train)\ny_train_pred = lgbmclf.predict(X_train)\nprint('Train - ',lgbmclf.score(X_train, y_train))\ny_valid_pred = lgbmclf.predict(X_valid)\nprint('Validation - ',lgbmclf.score(X_valid, y_valid))","e3e32356":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","b9795f0b":"catbclf = catb.CatBoostClassifier(silent=True, random_state=21).fit(X_train, y_train)\ny_train_pred = catbclf.predict(X_train)\nprint('Train - ',catbclf.score(X_train, y_train))\ny_valid_pred = catbclf.predict(X_valid)\nprint('Validation - ',catbclf.score(X_valid, y_valid))","b8687909":"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)","d24fa053":"#StackingClassifier(estimators, final_estimator=None, *, cv=None, stack_method='auto', n_jobs=None, \n#passthrough=False, verbose=0)\n\"\"\"Stclf = StackingClassifier([('RFclf', RFclf), ('lgbmclf', lgbmclf), ('catbclf', catbclf), ('Bgclf', Bgclf), ('GBclf', GBclf), ('HGBclf', HGBclf)]).fit(X_train, y_train) \ny_train_pred = Stclf.predict(X_train)\nprint('Train - ',Stclf.score(X_train, y_train))\ny_valid_pred = Stclf.predict(X_valid)\nprint('Validation - ',Stclf.score(X_valid, y_valid))\"\"\"","cd3524fb":"\"\"\"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)\"\"\"","25b515ac":"#VotingClassifier(estimators, *, voting='hard', weights=None, n_jobs=None, flatten_transform=True, verbose=False)\n\"\"\"Vclf = StackingClassifier([('RFclf', RFclf), ('lgbmclf', lgbmclf), ('catbclf', catbclf), ('Bgclf', Bgclf), ('GBclf', GBclf), ('HGBclf', HGBclf)]).fit(X_train, y_train) \nprint('Train - ',Vclf.score(X_train, y_train))\ny_pred_valid = Vclf.predict(X_valid)\nprint('Validation - ',Vclf.score(X_valid, y_valid))\"\"\"","e6cc67e9":"\"\"\"get_classification_report(y_train, y_train_pred, y_valid, y_valid_pred)\"\"\"","c7f69542":"submit = pd.read_csv('\/kaggle\/input\/credit-data\/sample_submission (1).csv')\nsubmit.head()","aad2acf8":"predictions = GBclf.predict(test)\npredictions","02b171da":"submit['Credit Default'] = predictions\nsubmit.head()","aeb5734f":"submit.to_csv('GradientBoostingClasssubmit.csv', index=False)","46c473ef":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","a0b4d234":"# Data analysis","203ec9ed":"# Test predictions using the best model with max f1-score=0.53: GBclf","7f187b30":"# A Bagging classifier.","8cc7a377":"# Stack of estimators with a final classifier.","f0d5e55d":"# Light GBM","ea3b8b34":"# Data subdivision for train and validation","039b7218":"# Gradient Boosting for classification","5a69760c":"# Data scaling","06afed3c":"# Target variable balancing","12522b2b":"# Soft Voting\/Majority Rule classifier for unfitted estimators.","79272b18":"Data fields\n* Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n* Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434\n* Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b\n* Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n* Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n* Years of Credit History - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0431\u044b\u043b\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c\n* Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n* Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430\n* Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\n* Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0443)\n* Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 (\u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u0435\u0442 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430)\n* Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433\n* Credit Score - \u0431\u0430\u043b\u043b\u044b \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n* Credit Default - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430)","ba16db8f":"# Histogram-based Gradient Boosting Classification Tree.","b56bd93a":"# yandex CatBoost","df196966":"# Train and test data read","51f130b9":"# A random forest classifier."}}