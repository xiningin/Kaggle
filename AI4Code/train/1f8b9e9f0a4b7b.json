{"cell_type":{"060a21a6":"code","22c1b327":"code","2057d13e":"code","f9adaf7b":"code","2d8313f4":"code","4ff38b5b":"code","ec0a9208":"code","52155670":"code","5dab38f9":"code","6bd50980":"code","178bfeb6":"code","2a90c666":"code","1252a405":"code","f8c853e0":"code","d0dc7613":"code","a660d45b":"code","656851ae":"code","419cc329":"code","108e8579":"code","5afa6b07":"code","5f1ccc62":"code","829bf75b":"code","1fce6370":"code","e9b69bcd":"code","0a8d3e33":"code","0b7d1e37":"code","029b90c8":"code","1492bb65":"code","d7e1fe24":"code","c95dd97a":"code","272fb824":"code","ead3410e":"code","98a82ab0":"code","05db6b8f":"code","7c4b70ed":"code","72115ad0":"code","36679713":"markdown","aff4f539":"markdown","43252761":"markdown","2a4c4912":"markdown","5cb21139":"markdown","beeba246":"markdown","44feecd0":"markdown","ca80ce73":"markdown","2a4f3552":"markdown"},"source":{"060a21a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22c1b327":"df = pd.read_csv('\/kaggle\/input\/diamonds\/diamonds.csv')\ndf.head()\n","2057d13e":"df.describe()","f9adaf7b":"df[df['x'] == 0]","2d8313f4":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df, x='cut', y='x')","4ff38b5b":"def for_x(cols):\n    x = cols[0]\n    cut = cols[1]\n    if x == 0:\n        if cut == 'Ideal':\n            return 5.6\n        elif cut == 'Premium':\n            return 6\n        elif cut == 'Good cut':\n            return 5.9\n        elif cut == 'Very Good':\n            return 5.8\n        else:\n            return 6.1\n    else:\n        return x","ec0a9208":"df['x'] = df[['x', 'cut']].apply(for_x, axis=1)","52155670":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df, x='cut', y='y')","5dab38f9":"df[(df['cut']=='Ideal')&(df['y'])]['y'].median()","6bd50980":"def for_y(cols):\n    y = cols[0]\n    cut = cols[1]\n    if y == 0:\n        if cut == 'Ideal':\n            return df[(df['cut']=='Ideal')&(df['y'])]['y'].median()\n        elif cut == 'Premium':\n            return df[(df['cut']=='Premium')&(df['y'])]['y'].median()\n        elif cut == 'Good cut':\n            return df[(df['cut']=='Good cut')&(df['y'])]['y'].median()\n        elif cut == 'Very Good':\n            return df[(df['cut']=='Very Good')&(df['y'])]['y'].median()\n        else:\n            return df[(df['cut']=='Fair')&(df['y'])]['y'].median()\n    else:\n        return y","178bfeb6":"df['y'] = df[['y', 'cut']].apply(for_y, axis=1)","2a90c666":"df['y'].describe()","1252a405":"plt.figure(figsize=(15,5))\nsns.boxplot(data=df, x='cut', y='z')","f8c853e0":"def for_z(cols):\n    z = cols[0]\n    cut = cols[1]\n    if z == 0:\n        if cut == 'Ideal':\n            return df[(df['cut']=='Ideal')&(df['z'])]['z'].median()\n        elif cut == 'Premium':\n            return df[(df['cut']=='Premium')&(df['z'])]['z'].median()\n        elif cut == 'Good cut':\n            return df[(df['cut']=='Good cut')&(df['z'])]['z'].median()\n        elif cut == 'Very Good':\n            return df[(df['cut']=='Very Good')&(df['z'])]['z'].median()\n        else:\n            return df[(df['cut']=='Fair')&(df['z'])]['z'].median()\n    else:\n        return z","d0dc7613":"df['z'] = df[['z', 'cut']].apply(for_z, axis=1)","a660d45b":"df['z'].describe()","656851ae":"df.describe()","419cc329":"df['Depth'] = ((2 * df['z']) \/ (df['x'] + df['y']))*100\ndf['Depth'] = df['Depth'].round(2)\n","108e8579":"df.drop(['Unnamed: 0', 'depth'], axis=1, inplace=True)\n","5afa6b07":"df.head()","5f1ccc62":"plt.figure(figsize=(15,5))\nsns.scatterplot(data=df, x='carat', y='price', hue='cut')","829bf75b":"plt.figure(figsize=(15,5))\nsns.scatterplot(data=df, x='carat', y='price', hue='clarity')","1fce6370":"#categorical features will be one hot encoded.\n\ncat = pd.get_dummies(df['cut'], drop_first=True)\ndf.drop(['cut'], axis=1, inplace=True)\ndf = pd.concat([df, cat], axis=1)\ndf.head()","e9b69bcd":"#df['color'].value_counts().keys().to_list()\n#df['clarity'].value_counts().keys().to_list()\n#after conveting the color, clarity to list creat a dictionary based on the ranking according to description.\n\ncolor = {'G': 4, 'E': 2, 'F': 3, 'H': 5, 'D': 1, 'I': 6, 'J': 7}\nclarity = {'SI1': 6, 'VS2': 5, 'SI2': 7, 'VS1': 4, 'VVS2': 3, 'VVS1': 2, 'IF': 1, 'I1': 8}\ndf['Color'] = df['color'].map(color)\ndf['Clarity'] = df['clarity'].map(clarity)\ndf = df.drop(['color','clarity'], axis=1)","0a8d3e33":"df.columns","0b7d1e37":"data = df[['carat', 'table', 'x', 'y', 'z', 'Depth', 'Color', 'Clarity']]\ndata.head(1)","029b90c8":"#scaling of the data.\n#we'll use min max scalar as it bring data into a 0-1 range.\n#we will scale all data except the One hot encoded and the price.\n\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscale = MinMaxScaler() \nscale.fit(data)\nscaled = scale.transform(data)\nscaled = pd.DataFrame(scaled)\nscaled.head()","1492bb65":"scaled.columns = ['carat', 'table', 'x', 'y', 'z', 'Depth', 'Color', 'Clarity']\nscaled.head(1)","d7e1fe24":"diamond = pd.concat([scaled, df[['Good','Ideal','Premium','Very Good']], df['price']], axis=1)\ndiamond.head(5)","c95dd97a":"from sklearn.model_selection import train_test_split\nX = diamond.drop('price', axis=1)\ny = diamond['price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\nprint(X_train.shape)\nprint(y_train.shape)\n\n","272fb824":"from sklearn.ensemble import RandomForestRegressor\n\nreg = RandomForestRegressor(n_estimators=200)\n\nreg.fit(X_train, y_train)\n\ny_pred_rf = reg.predict(X_test)","ead3410e":"from sklearn.linear_model import LinearRegression\nmod = LinearRegression()\n\nmod.fit(X_train, y_train)\n\ny_pred = mod.predict(X_test)\n\nprint(y_pred)","98a82ab0":"from sklearn.metrics import r2_score\nprint(r2_score(y_test, y_pred_rf))\nprint(r2_score(y_test, y_pred))","05db6b8f":"comp = pd.DataFrame({'Actual': y_test, 'Logistc Regression': y_pred, 'RandomForestr regg': y_pred_rf})\ncomp","7c4b70ed":"sns.scatterplot(data=comp, x='Actual', y='Logistc Regression')","72115ad0":"sns.scatterplot(data=comp, x='Actual', y='RandomForestr regg')","36679713":"According to the description in the dataset the columns of 'clarity' and 'color' have ranking.\n","aff4f539":"There are zero values in dimentions. This is not possible. To deal with this we can replace \nthe zeros with the median with the cut the are of. ","43252761":"Now we have our data ready!\nI'll be using linear regression to predict price.","2a4c4912":"Here, we can see a distinction between the clarity of diamond. Same goes for color of diamond.","5cb21139":"We can see here there is a linear relationship beteen the the price and the carat of a diamond.\nAlthough most of the data lies between 1 to 3 carat. There is no clear seperation among the cut of diamond.","beeba246":"**For Z**","44feecd0":"**#For X.**","ca80ce73":"**For Y.**","2a4f3552":"Although the number zero values was less it was better to replate the '0' rather than drop them.\nNow as the value are replaced we need to apply these new changes to the Depth column as well."}}