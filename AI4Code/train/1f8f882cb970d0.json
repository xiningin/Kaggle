{"cell_type":{"8c33326a":"code","502e5651":"code","fbcdcfc4":"code","97a56ab7":"code","603f86fc":"code","9120a943":"code","4079df8f":"code","faf9e8e8":"code","4c46813f":"code","9b6199c6":"code","b633af1d":"code","7d70a33b":"code","7220413c":"code","fe766b6f":"markdown","2f21f422":"markdown","75622a09":"markdown","93c034d4":"markdown","daeae8fd":"markdown","f954abef":"markdown","a1a0a5fc":"markdown","acf7bfbd":"markdown","4d23747e":"markdown","0dec35bf":"markdown"},"source":{"8c33326a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import SVMSMOTE \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","502e5651":"df = pd.read_csv('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')\ndf.head().style.background_gradient(cmap='RdGy')","fbcdcfc4":"\nrslt_df = df[(df['toxic'] == 0) & (df['severe_toxic'] == 0) & (df['obscene'] == 0) & (df['threat'] == 0) & (df['insult'] == 0) & (df['identity_hate'] == 0)]\nrslt_df2 = df[(df['toxic'] == 1) & (df['severe_toxic'] == 0) & (df['obscene'] == 0) & (df['threat'] == 0) & (df['insult'] == 0) & (df['identity_hate'] == 0)]\nnew1 = rslt_df[['id', 'comment_text', 'toxic']].iloc[:23891].copy() \nnew2 = rslt_df2[['id', 'comment_text', 'toxic']].iloc[:946].copy()\nnew = pd.concat([new1, new2], ignore_index=True)","97a56ab7":"lens = new.comment_text.str.len()\nlens.mean(), lens.std(), lens.max()","603f86fc":"lens.hist();","9120a943":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(new[\"comment_text\"], new['toxic'], test_size=0.33)","4079df8f":"from sklearn.feature_extraction.text import HashingVectorizer\nvectorizer = HashingVectorizer(n_features=2**23)\nX1 = vectorizer.fit_transform(X_train)\nX_test1= vectorizer.transform(X_test)","faf9e8e8":"print('Original dataset shape %s' % Counter(y_train))\nsm = SVMSMOTE(random_state=42)\nX_res, y_res = sm.fit_resample(X1, y_train)\nprint('Resampled dataset shape %s' % Counter(y_res))\n","4c46813f":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nclf2 = LogisticRegression(C=0.1, solver='sag')\nscores = cross_val_score(clf2, X_res,y_res, cv=5,scoring='f1_weighted')\nscores","9b6199c6":"y_p1 = clf2.fit(X_res, y_res).predict(X_test1)\nfrom sklearn.metrics import accuracy_score\n\n# accuracy: (tp + tn) \/ (p + n)\naccuracy = accuracy_score(y_test, y_p1)\nprint('Accuracy: %f' % accuracy)","b633af1d":"# finding confidence interval\nimport numpy as np\nz=1.96\ninterval = z * np.sqrt( (0.908137 * (1 - 0.908137)) \/ y_test.shape[0])\ninterval","7d70a33b":"from sklearn.svm import SVC\nfrom sklearn import svm\nclf = svm.SVC(kernel='linear', C=1)\nscores = cross_val_score(clf,X_res,y_res, cv=5)\nscores","7220413c":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\ny_p2 = clf.fit(X_res, y_res).predict(X_test1)\n\n# accuracy: (tp + tn) \/ (p + n)\naccuracy = accuracy_score(y_test, y_p2)\nprint('Accuracy: %f' % accuracy)\n\nimport numpy as np\n# finding confidence interval\nz=1.96\ninterval = z * np.sqrt( (0.963279 * (1 - 0.963279)) \/ y_test.shape[0])\ninterval","fe766b6f":"SVM-SMOTE, an **over-sampling** technique, is used to investigate how well it handles the trade-off. \nSMOTE, its ancestor, is a popular over-sampling technique which balances class distribution by synthetically generating new minority class instances along directions from existing minority class instances towards their nearest neighbours.\nSVM-SMOTE focuses on generating new minority class instances near borderlines with SVM so as to help establish boundary between classes.","2f21f422":"# Feature hashing \n\nalso known as the hashing trick (by analogy to the kernel trick), is a fast and space-efficient way of vectorizing features","75622a09":"This one is designed to be as memory efficient as possible.\nInstead of storing the tokens as strings, the vectorizer applies the hashing trick to encode them as numerical indexes.\n\n* {n-gram \u2192 hash(n-gram)%2^\u313b}\n* Has collisions but works in practice\n* sklearn.feature_extraction.text.HashingVectorizer\n* Implement in vowpal wabbit library.","93c034d4":"![svmsmote](https:\/\/miro.medium.com\/max\/2124\/1*wLy-jPchisCrYWKOv_jK_g.png)","daeae8fd":"LOGISTIC REGRESSION","f954abef":"SVC","a1a0a5fc":"![image](https:\/\/www.kalw.org\/sites\/kalw\/files\/styles\/medium\/public\/201712\/AAEAAQAAAAAAAAf_AAAAJDNjODQwOGE0LTRlM2YtNGJjOS1hNmQxLWNlODFmNjEwNDU3OQ-1.jpg)","acf7bfbd":"![svmsmote](https:\/\/miro.medium.com\/fit\/c\/1838\/551\/1*5t_gGECrUDNV2NiZIovZBw.png)","4d23747e":"Link to my work(Implementation using Vowpal Wabbit library) - https:\/\/github.com\/Bavalpreet\/NLP\/blob\/master\/nlp_vw.ipynb","0dec35bf":"# SVMSMOTE"}}