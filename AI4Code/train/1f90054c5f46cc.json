{"cell_type":{"1ff9fb6d":"code","5fd64a9e":"code","0c5898a1":"code","ebec31e7":"code","2bf9f3d5":"code","4f191ac5":"code","3b18361a":"code","4ee5f6cb":"code","d2f2f962":"code","9624328b":"code","6fcc6316":"code","c673de8a":"code","f9f12cc6":"code","39dc9806":"code","bfa9ca3e":"code","f01a66a9":"code","2f02e6a3":"code","61feaa05":"code","c9c81ed1":"code","6aef555f":"code","51733f67":"code","939cb661":"code","306ef59d":"code","71aa19f5":"code","95d00f9d":"code","38855432":"code","b4f4603a":"code","6adafb35":"code","c280084d":"code","5337fb7f":"code","b4971ed6":"code","d98a8824":"code","5cba1c78":"code","12108a87":"code","f352bc53":"code","895b9894":"code","e6bda4c6":"code","5075e1e0":"code","394f1f8d":"code","2b5c12ec":"code","8b6bcc56":"code","0d5bfb7e":"code","356c1c85":"code","8e9c441e":"code","cd4ada5e":"markdown","1b3b4d7b":"markdown","fef13270":"markdown","82a4868c":"markdown","9423c9fa":"markdown","b6c8537d":"markdown","a3ee188b":"markdown","f9988e0c":"markdown","fdf9703a":"markdown","37af4f68":"markdown","12ca364f":"markdown","4700c032":"markdown","3b8c5247":"markdown","c56671fa":"markdown","67aaa091":"markdown","9471b897":"markdown","9ee5715a":"markdown","60012e84":"markdown","6f3149d4":"markdown","7309e033":"markdown","4359fe59":"markdown","4afe34c2":"markdown","72cb27a4":"markdown"},"source":{"1ff9fb6d":"import numpy as np\nimport pandas as pd\nfrom timeit import default_timer as timer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","5fd64a9e":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_curve,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix,  roc_curve, precision_recall_curve, accuracy_score, roc_auc_score","0c5898a1":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndata.head()","ebec31e7":"print(data.info())","2bf9f3d5":"# Check if balanced or imbalanced class\nprint(data['Outcome'].value_counts())","4f191ac5":"# visualising\nsns.countplot(x='Outcome',data=data)\nax=plt.gca()\nfor p in ax.patches:\n    ax.annotate(p.get_height(),(p.get_x()+0.35,p.get_height()+5))\nplt.tight_layout()","3b18361a":"for i in data.columns[1:8]:\n    print('Missing values in',i,':',len(data[data[i]==0]))","4ee5f6cb":"cols=['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\nfor i in cols:\n    data[i]=data[i].replace(to_replace=0,value=np.NaN)","d2f2f962":"data.head()","9624328b":"# Visualize glucose data distribution \nplt.figure()\nsns.set(style='white')\n\nsns.distplot(data[data['Outcome']==1]['Glucose'].dropna(),label='Diabetic',kde_kws={'linewidth': 2});\nb = sns.distplot(data[data['Outcome']==0]['Glucose'].dropna(),label='Non-Diabetic',kde_kws={'linewidth': 2});\nplt.legend();\nb.set_xlabel('Glucose Levels');","6fcc6316":"# Filling Glucose values with median acc. to outcome\ndata.loc[(data['Outcome'] == 0 ) & (data['Glucose'].isnull()), 'Glucose'] = data[data['Outcome'] == 0 ]['Glucose'].mean()\ndata.loc[(data['Outcome'] == 1 ) & (data['Glucose'].isnull()), 'Glucose'] = data[data['Outcome'] == 1 ]['Glucose'].mean()","c673de8a":"print(data['Glucose'].isnull().sum())","f9f12cc6":"# Visualize Insulin data distribution \nplt.figure()\n\nsns.distplot(data[data['Outcome']==1]['Insulin'].dropna(),label='Diabetic',kde_kws={'linewidth': 2});\nb = sns.distplot(data[data['Outcome']==0]['Insulin'].dropna(),label='Non-Diabetic',kde_kws={'linewidth': 2});\nplt.legend();\nb.set_xlabel('Insulin Levels');","39dc9806":"# Filling Insulin values with median acc. to outcome\ndata.loc[(data['Outcome'] == 0 ) & (data['Insulin'].isnull()), 'Insulin'] = data[data['Outcome'] == 0 ]['Insulin'].median()\ndata.loc[(data['Outcome'] == 1 ) & (data['Insulin'].isnull()), 'Insulin'] = data[data['Outcome'] == 1 ]['Insulin'].median()","bfa9ca3e":"print(data['Insulin'].isnull().sum())","f01a66a9":"# Visualize SkinThickness data distribution \nplt.figure()\n\nsns.distplot(data[data['Outcome']==1]['SkinThickness'].dropna(),label='Diabetic',kde_kws={'linewidth': 2});\nb = sns.distplot(data[data['Outcome']==0]['SkinThickness'].dropna(),label='Non-Diabetic',kde_kws={'linewidth': 2});\nplt.legend();\nb.set_xlabel('Skin Thickness');","2f02e6a3":"# Filling SkinThickness values with median acc. to outcome\ndata.loc[(data['Outcome'] == 0 ) & (data['SkinThickness'].isnull()), 'SkinThickness'] = data[data['Outcome'] == 0 ]['SkinThickness'].median()\ndata.loc[(data['Outcome'] == 1 ) & (data['SkinThickness'].isnull()), 'SkinThickness'] = data[data['Outcome'] == 1 ]['SkinThickness'].median()","61feaa05":"print(data['SkinThickness'].isnull().sum())","c9c81ed1":"# Visualize Blood Pressure data distribution \nplt.figure()\n\nsns.distplot(data[data['Outcome']==1]['BloodPressure'].dropna(),label='Diabetic',kde_kws={'linewidth': 2});\nb = sns.distplot(data[data['Outcome']==0]['BloodPressure'].dropna(),label='Non-Diabetic',kde_kws={'linewidth': 2});\nplt.legend();\nb.set_xlabel('Blood Pressure levels');","6aef555f":"# Filling BloodPressure values with median acc. to outcome\ndata.loc[(data['Outcome'] == 0 ) & (data['BloodPressure'].isnull()), 'BloodPressure'] = data[data['Outcome'] == 0 ]['BloodPressure'].mean()\ndata.loc[(data['Outcome'] == 1 ) & (data['BloodPressure'].isnull()), 'BloodPressure'] = data[data['Outcome'] == 1 ]['BloodPressure'].mean()","51733f67":"print(data['BloodPressure'].isnull().sum())","939cb661":"# Visualize SkinThickness data distribution \nplt.figure()\n\nsns.distplot(data[data['Outcome']==1]['BMI'].dropna(),label='Diabetic',kde_kws={'linewidth': 2});\nb = sns.distplot(data[data['Outcome']==0]['BMI'].dropna(),label='Non-Diabetic',kde_kws={'linewidth': 2});\nplt.legend();\nb.set_xlabel('BMI');","306ef59d":"# Filling BloodPressure values with median acc. to outcome\ndata.loc[(data['Outcome'] == 0 ) & (data['BMI'].isnull()), 'BMI'] = data[data['Outcome'] == 0 ]['BMI'].median()\ndata.loc[(data['Outcome'] == 1 ) & (data['BMI'].isnull()), 'BMI'] = data[data['Outcome'] == 1 ]['BMI'].median()","71aa19f5":"print(data['BMI'].isnull().sum())","95d00f9d":"data.head()","38855432":"plt.figure(figsize=(12,10)) \np=sns.heatmap(data.corr(), annot=True,cmap ='YlGnBu')  ","b4f4603a":"sns.pairplot(data, hue=\"Outcome\", vars=['Pregnancies','Glucose','BloodPressure','SkinThickness','BMI']);","6adafb35":"from sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nscaled = std.fit_transform(data.iloc[:,:8])\nX = pd.DataFrame(scaled,columns=data.columns[:8])\ny = data['Outcome'].astype(int)","c280084d":"display(X.head(), y.head())","5337fb7f":"X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=0)\n\nclf = GradientBoostingClassifier(max_depth=4,random_state=0);","b4971ed6":"# Cross Validation Score\nprint('Cross_Val_Score:', np.mean(cross_val_score(clf, X, y, cv=10)))","d98a8824":"clf.fit(X_train, y_train)\nprint('Accuracy on test set:', clf.score(X_test, y_test))","5cba1c78":"def scores_table(model):\n    scores = ['accuracy', 'precision', 'recall', 'f1', 'roc_auc']\n    res = []\n    for sc in scores:\n        scores = cross_val_score(model, X, y, cv = 5, scoring = sc)\n        res.append(scores)\n    df = pd.DataFrame(res).T\n    df.loc['mean'] = df.mean()\n    df.loc['std'] = df.std()\n    df= df.rename(columns={0: 'accuracy', 1:'precision', 2:'recall',3:'f1',4:'roc_auc'})\n    return df","12108a87":"scores_table(clf)","f352bc53":"y_pred = clf.predict(X_test)\nconfusion_matrix(y_test, y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","895b9894":"def plot_ruc(model, X_train, y_train, X_test, y_test):\n    y_pred = model.fit(X_train, y_train).decision_function(X_test)\n\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n    roc_auc_lr = auc(fpr, tpr)\n\n    plt.figure()\n    plt.plot(fpr,tpr, lw=3, label='DTC ROC curve (area = {:0.2f})'.format(roc_auc_lr));\n\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.title('ROC Curve', fontsize=16)\n    plt.legend(loc='lower right', fontsize=13)\n    plt.plot([0, 1], [0, 1], color='navy', lw=3, linestyle='--');\n\ndef plot_prc(model, X_train, y_train, X_test, y_test):\n    y_pred = model.fit(X_train, y_train).decision_function(X_test)\n    \n    precision, recall, thresholds = precision_recall_curve(y_test, y_pred)\n\n    plt.figure()\n    plt.xlim([0.0, 1.01])\n    plt.ylim([0.0, 1.01])\n    plt.plot(precision, recall, label='Precision-Recall Curve',lw=3)\n    plt.xlabel('Precision', fontsize=16)\n    plt.ylabel('Recall', fontsize=16)","e6bda4c6":"clf=GradientBoostingClassifier(max_depth=4,random_state=0)\nplot_ruc(clf,X_train, y_train, X_test, y_test)\nplot_prc(clf,X_train, y_train, X_test, y_test)","5075e1e0":"sns.barplot(y=X.columns,x=clf.feature_importances_,orient=\"h\");","394f1f8d":"start = timer()\ngrid_values = {'learning_rate': [0.0001, 0.001, 0.01, 0.1, 0.2, 0.3, 1],\n               'max_depth': [2,3,4,5,6,7]}\nclf=GradientBoostingClassifier(n_estimators=250,random_state=0)\ngrid_clf_auc = GridSearchCV(clf, param_grid = grid_values, scoring = 'recall',cv=5,n_jobs=-1)\ngrid_clf_auc.fit(X_train, y_train)\ny_decision_fn_scores_auc = grid_clf_auc.decision_function(X_test) \n\nend = timer()\n\nprint('Test set AUC: ', roc_auc_score(y_test, y_decision_fn_scores_auc))\nprint('Grid best parameter: ', grid_clf_auc.best_params_)\nprint('Grid best score (recall): ', grid_clf_auc.best_score_)\nprint('Time taken: {0:.2f}',end-start,'seconds')\n","2b5c12ec":"clf2=GradientBoostingClassifier(n_estimators=250,max_depth=2,learning_rate=0.01,random_state=0)\nclf2.fit(X_train, y_train)\nsc = clf2.score(X_test, y_test)\nprint('Test set score: {0:.2f} %'.format(sc*100))","8b6bcc56":"clf2=GradientBoostingClassifier(n_estimators=300,max_depth=6,learning_rate=0.02,random_state=0)\nprint('Cross_Val_Score:', np.mean(cross_val_score(clf2, X, y, cv=5)))","0d5bfb7e":"# New confusion matrix\nclf2.fit(X_train, y_train)\ny_pred = clf2.predict(X_test)\nconfusion_matrix(y_test, y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","356c1c85":"scores_table(clf2)","8e9c441e":"plot_ruc(clf2,X_train, y_train, X_test, y_test)\nplot_prc(clf2,X_train, y_train, X_test, y_test)","cd4ada5e":"> ## Loading Libraries","1b3b4d7b":"<h1><center> Pima Indians Diabetes Prediction <\/h1>\n<h3> <center>Predict the onset of diabetes based on diagnostic measures <\/h3>","fef13270":"### **Confusion Matrix**","82a4868c":"> ## EDA","9423c9fa":"> ## Building Model","b6c8537d":"> ## Hyper Parameter Tuning","a3ee188b":"#### Converting 0 values to NaN","f9988e0c":"### <li> Check for missing values <\/li>\n#### Missing values are 0 values","fdf9703a":"### 1. Glucose\n***","37af4f68":" - ### Getting Different Scores","12ca364f":"> ## Filling Missing Values","4700c032":"### 4. Blood Pressure\n***","3b8c5247":"> ## Scaling and Preparing data","c56671fa":"<b> We filled all our null values !! <\/b>\n***\n***","67aaa091":"### 4. BMI\n***","9471b897":"\n### **ROC Curve**","9ee5715a":"### 2. Insulin\n***","60012e84":"### **Applying new parameters**","6f3149d4":"> ## Model Performance Analysis","7309e033":"> ## Reading Data\nKaggle Database link : <a> https:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database <\/a>","4359fe59":"### **Feature Importances**","4afe34c2":"***\n<h3><center> Thus, we achieved a accuracy of <u>88.80 %<\/u> with <u>ROC AUC = 0.95 <\/u>\n<\/h3>","72cb27a4":"### 3. Skin Thickness\n***"}}