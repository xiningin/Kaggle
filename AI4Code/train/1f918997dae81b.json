{"cell_type":{"778510ac":"code","f1499c80":"code","05283a96":"code","575c4845":"code","298c3d35":"code","80afd28b":"code","ed3d32a0":"code","7a17c338":"code","1dab3be9":"code","49581cbd":"code","5cdf9051":"code","e6c94fd8":"code","eaf113d5":"code","6c371770":"code","67699cdc":"code","c146fdf3":"code","7c464dd3":"code","ad53a216":"code","6d81e2d1":"code","5f5f91be":"code","d40cb765":"code","922bd3a2":"code","7c1b21b2":"markdown","c8f0d34c":"markdown","7e410170":"markdown","384edca7":"markdown","7788bb92":"markdown","2bf6a976":"markdown","59a0c381":"markdown","e02382d0":"markdown","aa8d0bc9":"markdown","e42a0d84":"markdown","d7010aaa":"markdown","1fafbba9":"markdown","37dc8764":"markdown","8876c152":"markdown","81fcb949":"markdown"},"source":{"778510ac":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error\nfrom scipy.sparse import csr_matrix\nimport gc","f1499c80":"# Memory reduction helper function:\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns: #columns\n        col_type = df[col].dtypes\n        if col_type in numerics: #numerics\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","05283a96":"data_pass = '\/kaggle\/input\/m5-forecasting-accuracy\/'\n\n# Sales quantities:\nsales = pd.read_csv(data_pass+'sales_train_validation.csv')\n\n# Calendar to get week number to join sell prices:\ncalendar = pd.read_csv(data_pass+'calendar.csv')\ncalendar = reduce_mem_usage(calendar)\n\n# Sell prices to calculate sales in USD:\nsell_prices = pd.read_csv(data_pass+'sell_prices.csv')\nsell_prices = reduce_mem_usage(sell_prices)","575c4845":"# Dataframe with only last 28 days:\ncols = [\"d_{}\".format(i) for i in range(1914-28, 1914)]\ndata = sales[[\"id\", 'store_id', 'item_id'] + cols]\n\n# To long form:\ndata = data.melt(id_vars=[\"id\", 'store_id', 'item_id'], \n                 var_name=\"d\", value_name=\"sale\")\n\n# Add week of year column from 'calendar':\ndata = pd.merge(data, calendar, how = 'left', \n                left_on = ['d'], right_on = ['d'])\n\ndata = data[[\"id\", 'store_id', 'item_id', \"sale\", \"d\", \"wm_yr_wk\"]]\n\n# Add weekly price from 'sell_prices':\ndata = data.merge(sell_prices, on = ['store_id', 'item_id', 'wm_yr_wk'], how = 'left')\ndata.drop(columns = ['wm_yr_wk'], inplace=True)\n\n# Calculate daily sales in USD:\ndata['sale_usd'] = data['sale'] * data['sell_price']\ndata.head()\n\n#this part is correct","298c3d35":"# List of categories combinations for aggregations as defined in docs:\ndummies_list = [sales.state_id, sales.store_id, \n                sales.cat_id, sales.dept_id, \n                sales.state_id +'_'+ sales.cat_id, sales.state_id +'_'+ sales.dept_id,\n                sales.store_id +'_'+ sales.cat_id, sales.store_id +'_'+ sales.dept_id, \n                sales.item_id, sales.state_id +'_'+ sales.item_id, sales.id]\n\n\n## First element Level_0 aggregation 'all_sales':\ndummies_df_list =[pd.DataFrame(np.ones(sales.shape[0]).astype(np.int8), \n                               index=sales.index, columns=['all']).T]\n\n# List of dummy dataframes:\nfor i, cats in enumerate(dummies_list):\n    dummies_df_list +=[pd.get_dummies(cats, drop_first=False, dtype=np.int8).T]\n    \n# Concat dummy dataframes in one go:\n## Level is constructed for free.\nroll_mat_df = pd.concat(dummies_df_list, keys=list(range(12)), \n                        names=['level','id'])#.astype(np.int8, copy=False)\n\n# Save values as sparse matrix & save index for future reference:\nroll_index = roll_mat_df.index\nroll_mat_csr = csr_matrix(roll_mat_df.values)\nroll_mat_csr.shape","80afd28b":"# Dump roll matrix to pickle:\nroll_mat_df.to_pickle('roll_mat_df.pkl')","ed3d32a0":"# Free some momory:\ndel dummies_df_list, roll_mat_df\ngc.collect()","7a17c338":"# Fucntion to calculate S weights:\ndef get_s(drop_days=0):\n    \n    \"\"\"\n    drop_days: int, equals 0 by default, so S is calculated on all data.\n               If equals 28, last 28 days won't be used in calculating S.\n    \"\"\"\n    # Rollup sales:\n    d_name = ['d_' + str(i+1) for i in range(1913-drop_days)]\n    sales_train_val = roll_mat_csr * sales[d_name].values\n\n    no_sales = np.cumsum(sales_train_val, axis=1) == 0\n    sales_train_val = np.where(no_sales, np.nan, sales_train_val)\n\n    # Denominator of RMSSE \/ RMSSE\n    weight1 = np.nanmean(np.diff(sales_train_val,axis=1)**2,axis=1)\n    \n    return weight1","1dab3be9":"S = get_s(drop_days=0)\nS.shape","49581cbd":"# S values from AGG & WRMSSE Evaluator:\n# array([3.26268315e+05, 5.14239651e+05, 5.17917913e+05, ...,\n#       1.71293871e-01, 6.98666667e-02, 2.81004710e-01])\n# Good match:\nS[10:]","5cdf9051":"# Functinon to calculate weights:\ndef get_w(sale_usd):\n    \"\"\"\n    \"\"\"\n    # Calculate the total sales in USD for each item id:\n    total_sales_usd = sale_usd.groupby(\n        ['id'], sort=False)['sale_usd'].apply(np.sum).values\n    \n    # Roll up total sales by ids to higher levels:\n    weight2 = roll_mat_csr * total_sales_usd\n    \n    return 12*weight2\/np.sum(weight2)","e6c94fd8":"W = get_w(data[['id','sale_usd']])\nW.shape","eaf113d5":"# Predicted weights\nW_df = pd.DataFrame(W,index = roll_index,columns=['w'])\n\n# Load the original weights:\ndata_pass = '\/kaggle\/input\/original-weights\/'\nW_original_df = pd.read_csv(data_pass+'weights_validation.csv')\n\n# Set new index, calculate difference between original and predicted:\nW_original_df = W_original_df.set_index(W_df.index)\nW_original_df['Predicted'] = W_df.w\nW_original_df['diff'] = W_original_df.Weight - W_original_df.Predicted\n\n# See where we are off by more than e-6\nm = W_original_df.Weight.values - W_df.w.values > 0.000001\nW_original_df[m]","6c371770":"SW = W\/np.sqrt(S)","67699cdc":"sw_df = pd.DataFrame(np.stack((S, W, SW), axis=-1),index = roll_index,columns=['s','w','sw'])\nsw_df.to_pickle('sw_df.pkl')","c146fdf3":"# Function to do quick rollups:\ndef rollup(v):\n    '''\n    v - np.array of size (30490 rows, n day columns)\n    v_rolledup - array of size (n, 42840)\n    '''\n    return roll_mat_csr*v #(v.T*roll_mat_csr.T).T\n\n\n# Function to calculate WRMSSE:\ndef wrmsse(preds, y_true, score_only=False, s = S, w = W, sw=SW):\n    '''\n    preds - Predictions: pd.DataFrame of size (30490 rows, N day columns)\n    y_true - True values: pd.DataFrame of size (30490 rows, N day columns)\n    sequence_length - np.array of size (42840,)\n    sales_weight - sales weights based on last 28 days: np.array (42840,)\n    '''\n    \n    if score_only:\n        return np.sum(\n                np.sqrt(\n                    np.mean(\n                        np.square(rollup(preds.values-y_true.values))\n                            ,axis=1)) * sw)\/12 #<-used to be mistake here\n    else: \n        score_matrix = (np.square(rollup(preds.values-y_true.values)) * np.square(w)[:, None])\/ s[:, None]\n        score = np.sum(np.sqrt(np.mean(score_matrix,axis=1)))\/12 #<-used to be mistake here\n        return score, score_matrix","7c464dd3":"# Define fold pass here:\nfile_pass = '\/kaggle\/working\/'# '\/kaggle\/input\/fast-wrmsse-and-sw-frame\/'\n\n# Load S and W weights for WRMSSE calcualtions:\nsw_df = pd.read_pickle(file_pass+'sw_df.pkl')\nS = sw_df.s.values\nW = sw_df.w.values\nSW = sw_df.sw.values\n\n# Load roll up matrix to calcualte aggreagates:\nroll_mat_df = pd.read_pickle(file_pass+'roll_mat_df.pkl')\nroll_index = roll_mat_df.index\nroll_mat_csr = csr_matrix(roll_mat_df.values)\ndel roll_mat_df","ad53a216":"# Predictions:\nsub = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\nsub = sub[sub.id.str.endswith('validation')]\nsub.drop(['id'], axis=1, inplace=True)\n\nDAYS_PRED = sub.shape[1]    # 28\n\n# Ground truth:\ndayCols = [\"d_{}\".format(i) for i in range(1914-DAYS_PRED, 1914)]\ny_true = sales[dayCols]","6d81e2d1":"%%timeit -n 100 -r 5\n# n - execute the statement n times \n# r - repeat each loop r times and return the best\n\nscore = wrmsse(sub, y_true, score_only=True)","5f5f91be":"%%timeit -n 100 -r 5\n# n - execute the statement n times \n# r - repeat each loop r times and return the best\n\nscore1, score_matrix = wrmsse(sub, y_true)","d40cb765":"score = wrmsse(sub, y_true, score_only=True)\nscore","922bd3a2":"score1, score_matrix = wrmsse(sub, y_true)\nscore_df = pd.DataFrame(score_matrix, index = roll_index)\nscore_df.reset_index(inplace=True)\nscore_df.head()\nscore1","7c1b21b2":"### Score df for visualizations:\nscore_matrix is only needed for EDA and visualizations.","c8f0d34c":"### Load wieghts for WRMSSE calculations:","7e410170":"# W - USD sales weights\n\nThese are constant as they are arbitrary and predefined by business logic and have nothing to do with ML. (IMHO)","384edca7":"### Calculate score:\nIf you just need the score, set Score_only = True for slightly faster calculations.","7788bb92":"# Rollup Index & Matrix\n\nBuild roll up matrix to easily compute aggregations.\nAnd build an index, so we always know whats where.","2bf6a976":"### Calculate sales is USD:","59a0c381":"# S - sequence length weights\nIt is a constant for the original dataset. It may be recalculated for every fold. IMHO it is overkill, but several people have weighty resasons for it.","e02382d0":"### Load Datasets\nAll three datasets needed because we need to calculate sales in USD.","aa8d0bc9":"### Create fake predictions:","e42a0d84":"PS: As we see our index matches Level_ids and Agg levels of the original dataset, so the **csr_matrix works accurately**.","d7010aaa":"### SW dataframe:\nPickle dump of S and W weights and roll index for easy loading in other notebooks.","1fafbba9":"### Comparison to the Original weights\nThanks to @vkagklis who spotted the issue and @newbielch who showed how to fix it, the difference between original and calculated weights is less than 0.00001","37dc8764":"# WRMSSE calculations without overhead\n\nThis notebook is based on amazing [for_Japanese_beginner(with WRMSSE in LGBM))](https:\/\/www.kaggle.com\/girmdshinsei\/for-japanese-beginner-with-wrmsse-in-lgbm) and [RMSE and WRMSSE of a submission](https:\/\/www.kaggle.com\/chameleontk\/rmse-and-wrmsse-of-a-submission)\n\nCustom loss function requires quick calculations of WRMSSE. This notebook attempts to make a quick and clear WRMSEE calculation function with pickled S,W weights and pickled csr_matrix for swift rollups.\n\nNote: Difference in rolled up vectors is equal to their rolled up difference:\n\n\\begin{equation}\n Y\\times M - \\hat{Y}\\times M= (Y-\\hat{Y}) \\times M = D\n\\end{equation}\n\nThe rest of the calculations are the same:\n\n\\begin{equation}\nWRMSSE = \\sum_{i=1}^{42840} \\left(\\frac{W_i}{\\sqrt{S_i}} \\times \\sqrt{\\sum{(D)^2}}\\right)\n\\end{equation}\n\nNote that the real weights are W\/sqrt(S) this is important for weights evaluations. Besides a single precalulated weight can be used for faster calculations.\nSimilar stuff in code:\n\n```\nroll_diff = rollup(preds.values-y_true.values)\n\nSW = W\/np.sqrt(S)\n\nscore = np.sum(\n                np.sqrt(\n                    np.mean(\n                        np.square(roll_diff)\n                            ,axis=1)) * SW)\n```\n\nWhere S are weights based on sequence length, W are weights based on sales in USD for the 28 days.\n\n\nPS: The S and W weights has been compared with well tested [wrmsse-evaluator](https:\/\/www.kaggle.com\/dhananjay3\/wrmsse-evaluator-with-extra-features) and the original weights. Please let me know in the comments if you spot any mistakes.\n\nPPS: Please note: I have made a tiny mistake in WRMSSE function: should be \/12 not x12 at the end. Updated.","8876c152":"# WRMSSE\n\nIf you just need to calculate WRMSEE with default weights S, W, simply load them and use the function below.","81fcb949":"### Functions for WRMSSE calculations:"}}