{"cell_type":{"14287a33":"code","b57007f5":"code","4d22e9ac":"code","ff4f96f2":"code","6c2f8bb9":"code","93cd5a48":"code","a691d0fa":"code","9c5b44cf":"code","afb63647":"code","23eb4ad3":"code","995f0d49":"code","026a4f0d":"code","b73ecb90":"code","fa66d74c":"code","7aca9f89":"code","ece64236":"code","c73fd544":"code","ff7840be":"code","c715eeb9":"code","be24aa9b":"code","3c980cb4":"code","9e2b1e70":"code","d7588f1e":"code","8210d1ce":"code","fbf81c9f":"code","fcd3e10d":"code","6741cb81":"code","2b35817d":"code","94e32871":"code","2c08c6f2":"code","98ac7a25":"code","e492e6d8":"code","d7dcb2f1":"code","78a51862":"code","f9c91c76":"code","c1358b8a":"code","526a5ab4":"code","84479d20":"code","538ac720":"markdown","d554710b":"markdown","927d317a":"markdown","e2244f90":"markdown","99d8472e":"markdown","dccd9ab5":"markdown","8f9e5e90":"markdown","27474803":"markdown","aaf33046":"markdown","4d7b87de":"markdown","cc4a15f5":"markdown","2aca5bc5":"markdown","f9f7d7aa":"markdown","48775a5b":"markdown","85624f9a":"markdown","0c486c75":"markdown","9e36bbec":"markdown","6ff9bf9f":"markdown","2718e1d7":"markdown","2f09ccfc":"markdown","ba0297ce":"markdown","ce0f8425":"markdown"},"source":{"14287a33":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom collections import Counter\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly\nsns.set_style('darkgrid')","b57007f5":"df=pd.read_csv('..\/input\/data.csv')","4d22e9ac":"df.head().T","ff4f96f2":"df.columns","6c2f8bb9":"df.info()","93cd5a48":"df.describe().T","a691d0fa":"df.drop(['Unnamed: 0','Photo','Flag','Club Logo'],axis=1,inplace=True)","9c5b44cf":"msno.bar(df.sample( 18207 ),(28,10),color='red')","afb63647":"df.isnull().sum()","23eb4ad3":"missing_height = df[df['Height'].isnull()].index.tolist()\nmissing_weight = df[df['Weight'].isnull()].index.tolist()\nif missing_height == missing_weight:\n    print('They are same')\nelse:\n    print('They are different')","995f0d49":"df.drop(df.index[missing_height],inplace =True)","026a4f0d":"df.isnull().sum()","b73ecb90":"df.drop(['Loaned From','Release Clause','Joined'],axis=1,inplace=True)","fa66d74c":"#Number of countries available and top 5 countries with highest number of players\nprint('Total number of countries : {0}'.format(df['Nationality'].nunique()))\nprint(df['Nationality'].value_counts().head(5))\nprint('--'*40)\nprint(\"\\nEuropean Countries have most players\")","7aca9f89":"#Total number of clubs present and top 5 clubs with highest number of players\nprint('Total number of clubs : {0}'.format(df['Club'].nunique()))\nprint(df['Club'].value_counts().head(5))","ece64236":"#Player with maximum Potential and Overall Performance\nprint('Maximum Potential : '+str(df.loc[df['Potential'].idxmax()][1]))\nprint('Maximum Overall Perforamnce : '+str(df.loc[df['Overall'].idxmax()][1]))","c73fd544":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nprint('BEST IN DIFFERENT ASPECTS :')\nprint('_________________________\\n\\n')\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}'.format(pr_cols[i],df.loc[df[pr_cols[i]].idxmax()][1]))\n    i += 1","ff7840be":"#Cleaning some of values so that we can interpret them \ndef value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\ndf['Value'] = df['Value'].apply(value_to_int)\ndf['Wage'] = df['Wage'].apply(value_to_int)","c715eeb9":"df.head().T","be24aa9b":"#Top earners\nprint('Most valued player : '+str(df.loc[df['Value'].idxmax()][1]))\nprint('Highest earner : '+str(df.loc[df['Wage'].idxmax()][1]))\nprint(\"--\"*40)\nprint(\"\\nTop Earners\")","3c980cb4":"sns.jointplot(x=df['Age'],y=df['Potential'],\n              joint_kws={'alpha':0.1,'s':5,'color':'red'},\n              marginal_kws={'color':'red'})\n\n","9e2b1e70":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\nfrom math import pi\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in df.groupby(df['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(10, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1","d7588f1e":"sns.lmplot(data = df, x = 'Age', y = 'SprintSpeed',lowess=True,scatter_kws={'alpha':0.01, 's':5,'color':'green'}, \n           line_kws={'color':'red'})","8210d1ce":"sns.lmplot(x = 'BallControl', y = 'Dribbling', data = df,col = 'Preferred Foot',scatter_kws = {'alpha':0.1,'color':'orange'},\n           line_kws={'color':'red'})","fbf81c9f":"\nsns.jointplot(x=df['Dribbling'], y=df['Crossing'], kind=\"hex\", color=\"#4CB391\");","fcd3e10d":"value = df.Value\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\n\nsns.relplot(x=\"Age\", y=\"Potential\", hue=value\/100000, \n            sizes=(40, 400), alpha=.5,\n            height=6, data=df);","6741cb81":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(15, 15))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"YlGnBu\")","2b35817d":"plt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df['Overall'], df['Age'], hue = df['Preferred Foot'], palette = 'rocket')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","94e32871":"cols = ['Age','Overall','Potential','Acceleration','SprintSpeed',\"Agility\",\"Stamina\",'Strength','Preferred Foot']\ndf_small = df[cols]","2c08c6f2":"df_small.head()","98ac7a25":"sns.pairplot(df_small, hue ='Preferred Foot',palette=[\"black\", \"red\"],plot_kws=dict(s=50, alpha =0.8),markers=['^','v'])","e492e6d8":"df=pd.read_csv('..\/input\/data.csv')","d7dcb2f1":"#DROP UNNECESSARY VALUES\ndrop_cols = df.columns[28:54]\ndf = df.drop(drop_cols, axis = 1)\ndf = df.drop(['Unnamed: 0','ID','Photo','Flag','Club Logo','Jersey Number','Joined','Special','Loaned From','Body Type', 'Release Clause',\n               'Weight','Height','Contract Valid Until','Wage','Value','Name','Club'], axis = 1)\ndf = df.dropna()\ndf.head()","78a51862":"#Turn Real Face into a binary indicator variable\ndef face_to_num(df):\n    if (df['Real Face'] == 'Yes'):\n        return 1\n    else:\n        return 0\n    \n#Turn Preferred Foot into a binary indicator variable\ndef right_footed(df):\n    if (df['Preferred Foot'] == 'Right'):\n        return 1\n    else:\n        return 0\n\n#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n\n#Get a count of Nationalities in the Dataset, make of list of those with over 250 Players (our Major Nations)\nnat_counts = df.Nationality.value_counts()\nnat_list = nat_counts[nat_counts > 250].index.tolist()\n\n#Replace Nationality with a binary indicator variable for 'Major Nation'\ndef major_nation(df):\n    if (df.Nationality in nat_list):\n        return 1\n    else:\n        return 0\n\n#Create a copy of the original dataframe to avoid indexing errors\ndf1 = df.copy()\n\n#Apply changes to dataset to create new column\ndf1['Real_Face'] = df1.apply(face_to_num, axis=1)\ndf1['Right_Foot'] = df1.apply(right_footed, axis=1)\ndf1['Simple_Position'] = df1.apply(simple_position,axis = 1)\ndf1['Major_Nation'] = df1.apply(major_nation,axis = 1)\n\n#Split the Work Rate Column in two\ntempwork = df1[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True) \n#Create new column for first work rate\ndf1[\"WorkRate1\"]= tempwork[0]   \n#Create new column for second work rate\ndf1[\"WorkRate2\"]= tempwork[1]\n#Drop original columns used\ndf1 = df1.drop(['Work Rate','Preferred Foot','Real Face', 'Position','Nationality'], axis = 1)\ndf1.head()\n","f9c91c76":"#Split ID as a Target value\ntarget = df1.Overall\ndf2 = df1.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","c1358b8a":"#Applying Linear Regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\n#Finding the r2 score and root mean squared error\nfrom sklearn.metrics import r2_score, mean_squared_error\nprint('r2 score: '+str(r2_score(y_test, predictions)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(y_test, predictions))))","526a5ab4":"perm = PermutationImportance(model, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist())\n#Top 3 important features are Potential, Age & Reactions ","84479d20":"#Visualising the results\nplt.figure(figsize=(18,10))\nsns.regplot(predictions,y_test,scatter_kws={'color':'red','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'black','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Linear Prediction of Player Rating\")\nplt.show()","538ac720":"We will have comparisions for `Age`, `Overall`, `Potential`, `Accelaration`, `SprintSpeed`, `Agility` , `Stamina`, `Strength`","d554710b":"# Introduction\n\n<a class=\"anchor\" id=\"toc\"><\/a>\n\nFIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. It is the 26th installment in the FIFA series, and was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows\n\n\n*Source: [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/FIFA_19)*\n\nThis game did not recieve much popular reviews. However, we will have a deep analysis in this notebook.\n\n<font color=\"red\" size=3>Please upvote this kernel if you like it. It motivates me to produce more quality content :)<\/font>\n\n![Image](https:\/\/images.daznservices.com\/di\/library\/GOAL\/d2\/e5\/fifa-19-ultimate-team_19gk2cvl4sd11kpd72z9ufwi1.jpg?t=1305899489&quality=60&w=1600)","927d317a":"Relation between `potential` and `age` with respected `value` of players","e2244f90":"**Lowest correlation** among the goalkeeping side with other columns and high among themselves \n\n**High correlation** between `Dribbling`, `Volleys`, `Passing` etc...","99d8472e":"<a id=\"3\"><\/a>\n# 3. Data Analysis","dccd9ab5":"<a id=\"5\"><\/a> <br>\n# 5.Modelling","8f9e5e90":"As they are same I am assuming it will be same for other all columns too. \n\nWe will see it soon. ","27474803":"`Left Footed Players` vs `Right Footed Players`","aaf33046":"As we can see, we guessed right and now we have fewer null values.","4d7b87de":"<font color=\"red\" size=5><center>FIFA - EDA and Linear Regression Starter<\/center><\/font>","cc4a15f5":"### From the plot we can infer many things. \n* Firstly, most of the people are right footed xD\n* Some unusual behavior in `Potential` vs `Overall`\n* `Accelaration` and `SprintSpeed` follow a proper linear relationship\n* `Agility` vs `SprintSpeed`, `Agility` vs `Accelaration` and `Agility` vs `Stamina` have somewhat linear relationship","2aca5bc5":"<a id=\"2\"><\/a> \n# 2. Data Cleaning","f9f7d7aa":"`48` is repeating many times lets check if all of them are same `ID` or not","48775a5b":"`Crossing` vs `Dribbling`","85624f9a":"As the `age` increases the `sprint speed` decreases","0c486c75":"<a id=\"4\"><\/a> <br>\n# 4. Exploratory Data Analysis","9e36bbec":"`Potential` tends to fall as you grow old","6ff9bf9f":"Source of below visualisations: [fifa19-analysis](https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis)","2718e1d7":"----------------------------------------------------------------------------------------------------------------------------------------------\n<a id =\"1\" > <\/a>\n# 1. Glimpse of the data at hand","2f09ccfc":"# Table of Contents\n1. [Glimpse of the data at hand](#1)\n2. [Data Cleaning](#2)\n3. [Data Analysis](#3)\n4. [Exploratory Data Analysis](#4)\n5. [Modelling](#5)","ba0297ce":"Permutation importance is the first tool for understanding a machine-learning model, and involves shuffling individual variables in the validation data (after a model has been fit), and seeing the effect on accuracy.","ce0f8425":"<font color=\"chocolate\" size=+2.5><b>My Other Kernels<\/b><\/font>\n\nClick on the button to view kernel...\n\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/eda-with-r3-id\" class=\"btn btn-success\" style=\"color:white;\">EDA wirh R3*ID<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/ensemble-learning-part-1\" class=\"btn btn-success\" style=\"color:white;\">Ensemble Learning Part 1<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/ensemble-learning-part-2\" class=\"btn btn-success\" style=\"color:white;\">Ensemble Learning Part 2<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/students-performance-in-exams-eda-in-depth\" class=\"btn btn-success\" style=\"color:white;\">Students performance in Exams- EDA in depth \ud83d\udcca\ud83d\udcc8<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/pulmonary-embolism-dicom-preprocessing-eda\" class=\"btn btn-success\" style=\"color:white;\">\ud83e\ude7aPulmonary Embolism Dicom preprocessing & EDA\ud83e\ude7a<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/first-kaggle-submission\" class=\"btn btn-success\" style=\"color:white;\">Titanic: Machine Learning from Disaster<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/graduate-admission-chances\" class=\"btn btn-success\" style=\"color:white;\">\ud83d\udcd6 Graduate Admission Chances \ud83d\udcd5 \ud83d\udcd4<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/flower-classification-augmentations-eda\" class=\"btn btn-success\" style=\"color:white;\">Flower_Classification+Augmentations+EDA<\/a><br><br>\n\n<a href=\"https:\/\/www.kaggle.com\/nitindatta\/storytelling-with-gwd-pre-print-data\" class=\"btn btn-success\" style=\"color:white;\">Storytelling with GWD pre_print data<\/a><br><br>\n\n\n### If these kernels impress you,give them an <font size=\"+2\" color=\"red\"><b>Upvote<\/b><\/font>.<br>\n\n<a href=\"#toc\" class=\"btn btn-primary\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>"}}