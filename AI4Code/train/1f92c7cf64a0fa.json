{"cell_type":{"2f34c792":"code","40ad59ae":"code","c73f54c3":"code","89ea6ea4":"code","6c3f8754":"code","513295a3":"code","5007e7fc":"code","ec877cd5":"code","1e72cb37":"code","0b721286":"code","ad149c39":"code","ee4160c9":"code","43720e2c":"code","98adabb3":"code","2b4c66a9":"code","0b841d39":"code","06ac74e8":"code","14773f32":"code","06495f47":"code","8f6a2430":"code","6fb9ee1a":"code","9b38b784":"code","25ec59c1":"code","23cbef7d":"code","7d178f0b":"code","280fd81b":"code","b4a37014":"code","4d123729":"markdown","66d94378":"markdown","0c43a129":"markdown","42841bd8":"markdown","24f73b87":"markdown","e1a48299":"markdown","cad75a96":"markdown","f93e08f2":"markdown","785dc29c":"markdown","f509573b":"markdown","86f9938b":"markdown","9685b556":"markdown","bae2c940":"markdown","1bd92033":"markdown","3937c083":"markdown","46948ad2":"markdown"},"source":{"2f34c792":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40ad59ae":"import torch\nimport torchvision as vision\nfrom torch import nn","c73f54c3":"train_source_frame = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_source_frame = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","89ea6ea4":"train_label = torch.tensor(train_source_frame.loc[:, 'label'].to_numpy()).reshape(-1).long()\ntrain_features = torch.tensor(train_source_frame.loc[:, tuple(map(lambda idx: f'pixel{idx}', range(train_source_frame.shape[1] - 1)))].to_numpy()).reshape(-1, 1, 28, 28).float()","6c3f8754":"train_label.shape, train_features.shape","513295a3":"from ignite.engine import Events, create_supervised_trainer, create_supervised_evaluator\nfrom ignite.metrics import Loss, Accuracy\nfrom ignite.contrib.handlers.tqdm_logger import ProgressBar","5007e7fc":"train_ratio = 0.9\nbatch_size = 2048\nlearning_rate = 5e-5","ec877cd5":"class MNISTDataset(torch.utils.data.Dataset):\n    def __init__(self, features, label):\n        assert features.shape[0] == label.shape[0]\n        self._features = features\n        self._label = label\n        \n    def __getitem__(self, item):\n        return self._features[item], self._label[item]\n    \n    def __len__(self):\n        return self._label.shape[0]\n\ntrain_slice = slice(0, int(train_label.shape[0] * train_ratio))\nvalid_slice = slice(int(train_label.shape[0] * train_ratio), None)","1e72cb37":"train_dataset = MNISTDataset(train_features[train_slice], train_label[train_slice])\nvalid_dataset = MNISTDataset(train_features[valid_slice], train_label[valid_slice])\nlen(train_dataset), len(valid_dataset)","0b721286":"train_loader = torch.utils.data.DataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    pin_memory=True\n)\n\nvalid_loader = torch.utils.data.DataLoader(\n    valid_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    pin_memory=True\n)","ad149c39":"!pip install torchsummary\nfrom torchsummary import summary ","ee4160c9":"model = nn.Sequential(\n    nn.Conv2d(1, 32, 3, bias=False),\n    nn.BatchNorm2d(32),\n    nn.SELU(inplace=True),\n    nn.Conv2d(32, 128, 1, bias=False),\n    nn.BatchNorm2d(128),\n    nn.SELU(inplace=True),\n    nn.Conv2d(128, 192, 5, bias=False),\n    nn.BatchNorm2d(192),\n    nn.SELU(inplace=True),\n    nn.Conv2d(192, 256, 3, bias=False),\n    nn.BatchNorm2d(256),\n    nn.SELU(inplace=True),\n    nn.Conv2d(256, 32, 20, bias=False),\n    nn.BatchNorm2d(32),\n    nn.SELU(inplace=True),\n    nn.Conv2d(32, 10, 1, bias=True),\n    nn.Flatten(),\n)","43720e2c":"summary(model.cuda(), (1, 28, 28))","98adabb3":"trainer = create_supervised_trainer(\n    model=model,\n    optimizer=torch.optim.Adam(model.parameters(), lr=learning_rate),\n    loss_fn=torch.nn.CrossEntropyLoss(),\n    device=torch.device('cuda:0')\n)\nevaluator = create_supervised_evaluator(\n    model=model,\n    metrics={\n        'accuracy': Accuracy(),\n        'loss': Loss(torch.nn.CrossEntropyLoss())\n    },\n    device=torch.device('cuda:0')\n)","2b4c66a9":"accuracy = []\nloss = []\n@trainer.on(Events.EPOCH_COMPLETED)\ndef on_epoch_completed(engine):\n    evaluator.run(valid_loader)\n    accuracy.append(evaluator.state.metrics[\"accuracy\"])\n    loss.append(evaluator.state.metrics[\"loss\"])\n    print(f'Epoch {engine.state.epoch} Accuracy {evaluator.state.metrics[\"accuracy\"]} Loss {evaluator.state.metrics[\"loss\"]}')\n\npbar = ProgressBar()\npbar.attach(trainer)\ntrainer.run(train_loader, 50)","0b841d39":"from matplotlib import pyplot as plt","06ac74e8":"plt.plot(accuracy)\nplt.plot(loss)","14773f32":"max(accuracy), min(loss)","06495f47":"torch.cuda.empty_cache()","8f6a2430":"test_features = torch.tensor(test_source_frame.loc[:, tuple(map(lambda idx: f'pixel{idx}', range(test_source_frame.shape[1])))].to_numpy()).reshape(-1, 1, 28, 28).float()\ntest_dataset = torch.utils.data.TensorDataset(test_features)\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset,\n    batch_size=256,\n    shuffle=False,\n    pin_memory=True\n)","6fb9ee1a":"import gc\ngc.collect()","9b38b784":"import tqdm","25ec59c1":"torch.cuda.empty_cache()\ngc.collect()","23cbef7d":"outputs = []\nmodel.eval()\nfor batch in tqdm.tqdm(test_loader):\n    with torch.no_grad():\n        output = model(batch[0].to('cuda:0'))\n        batch[0] = batch[0].to('cpu')\n        outputs.append(output.to('cpu'))\n        del output, batch\n        if len(outputs) % 1 == 0:\n            torch.cuda.empty_cache()\n            gc.collect()\n    ","7d178f0b":"target = torch.cat(outputs).argmax(axis=1).numpy()\nsubmission = pd.DataFrame({'ImageId': list(range(1, target.shape[0] + 1)), 'Label': target})","280fd81b":"submission.to_csv('\/kaggle\/working\/submission.csv', index=False)","b4a37014":"torch.save(model, '\/kaggle\/working\/model.pt')","4d123729":"### \u6a21\u578b\u7ed3\u6784\n\n\u672c\u5b9e\u9a8c\u6a21\u578b\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a","66d94378":"\u7ec4\u88c5`DataLoader`\uff1a","0c43a129":"### \u5f00\u59cb\u8bad\u7ec3","42841bd8":"## \u5b9e\u9a8c\u7ed3\u679c\n\n\u4fdd\u5b58\u5b9e\u9a8c\u7ed3\u679c\u5e76\u63d0\u4ea4Kaggle\u5e73\u53f0\u8fdb\u884c\u6392\u540d\uff1a","24f73b87":"Accuracy-Loss\u53d8\u5316\u8d8b\u52bf\u5982\u4e0b\uff1a","e1a48299":"\u51c6\u5907\u8bad\u7ec3\u96c6\u4e0e\u9a8c\u8bc1\u96c6\n\n\u8bad\u7ec3\u96c6\u6570\u636e\u91cf\u4e0e\u9a8c\u8bc1\u96c6\u6570\u636e\u91cf\uff1a","cad75a96":"\u8bad\u7ec3\u8be6\u7ec6\u8fc7\u7a0b\u5982\u4e0b\uff1a","f93e08f2":"2020010216 \u9648\u6da6\u6cfd \u9ad8\u7ea7\u673a\u5668\u5b66\u4e60 \u671f\u672b\u5b9e\u9a8c\n\n# MNIST ConvNet \u5b9e\u9a8c\n\n**Goals:**\n\n1. understand Neural Networks and how they are arranged in layered architectures\n1. implement dropout to regularize networks\n1. effectively cross-validate and find the best hyperparameters for Neural Network architecture\n1. understand the architecture of Convolutional Neural Networks and train gain experience with training these models on data\n\n**Hints:**\n\n1. Implement Dropout and explore its effects on model generalization\n1. You will implement several CNN toolkits that are commonly used. You will train a (shallow) convolutional network on MNIST, and it will then be up to you to train the best network that you can.\n\n**Extra:**\n\n1. In the process of training your network, you should feel free to implement anything that you want to get better performance. You can modify the solver, implement additional layers, use different types of regularization, use an ensemble of models, or anything else that comes to mind.","785dc29c":"\u5c01\u88c5`Dataset`\uff1a","f509573b":"\u5f15\u5165PyTorch\u5e93\uff1a","86f9938b":"\u8bfb\u5165\u6807\u7b7e\u6570\u636e\u5c3a\u5bf8\u4e0e\u8bad\u7ec3\u7279\u5f81\u5c3a\u5bf8\uff1a","9685b556":"\u8bfb\u53d6\u539f\u59cb\u6587\u4ef6\uff1a","bae2c940":"\u8bfb\u5165\u6240\u6709\u539f\u59cb\u6570\u636e\u5e76\u8c03\u6574\u5c3a\u5bf8\uff1a","1bd92033":"## \u524d\u671f\u51c6\u5907\u4e0e\u6570\u636e\u5904\u7406\n\n\u663e\u793a\u6570\u636e\u6587\u4ef6\u76ee\u5f55\uff1a","3937c083":"\u5f15\u5165`pytorch-ignite`\u5e93\u63a7\u5236\u8bad\u7ec3\u8fc7\u7a0b\uff1a","46948ad2":"## \u8fdb\u884c\u8bad\u7ec3\n\n\u8bbe\u5b9a\u516c\u5171\u53c2\u6570\uff1a\n\n- \u8bad\u7ec3\u96c6\/\u603b\u6570\u636e\u96c6\u6bd4\u4f8b\n- \u6279\u5927\u5c0f\n- \u5b66\u4e60\u7387"}}