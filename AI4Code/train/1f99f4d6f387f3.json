{"cell_type":{"a2c0e4c2":"code","a3085bb0":"code","855d4c09":"code","61bee1b7":"code","cddcf64c":"code","7ed6c3b5":"code","2d28c04c":"code","5b06096b":"code","c97d3467":"code","eac69d7a":"code","354432e2":"code","6db1cccf":"code","21190182":"code","d46c8cd6":"code","a253b9fb":"code","098f84fa":"code","b1a3dd35":"code","cbb83152":"code","ca77d209":"code","baff36f4":"code","692522d3":"code","f73094d1":"code","cc997f20":"code","66bba068":"code","b401c1fa":"code","37793d96":"code","3d17f046":"code","5ae716ef":"code","cb86220c":"code","a4b386cc":"code","949434ec":"code","90c37cb0":"code","89c4cf8d":"code","bcb0edfc":"code","42f727f2":"code","813e6b66":"code","45f7047d":"code","baa34653":"code","92f0b4ab":"code","503f6c8f":"code","e9d58af7":"code","07bce546":"code","99fe2562":"code","534839b8":"code","805f66f7":"code","faa8944b":"code","dd78b81b":"code","eceb6160":"code","6ee0e44a":"code","dd9bdc03":"code","40dabf0f":"code","0ad749fa":"code","1a0c7835":"code","cc7f2b36":"code","ccc2b553":"code","e6336362":"code","92d0083b":"code","d519047e":"code","ebaeb6b2":"code","fc500958":"code","371a3227":"code","47a3ef33":"code","cb0b3e08":"code","545a3b39":"code","9ead154c":"code","ac66704c":"code","81ad100f":"code","d8a7c20f":"code","4a2fca6a":"code","bd3b8f62":"code","29938c61":"code","fc0058fa":"code","3c1f1dd3":"code","2630be6f":"code","51715dfe":"code","88893d48":"code","a35060b7":"code","39d82755":"code","ce46b7ce":"markdown","9c65607e":"markdown","7b03c55b":"markdown","e29706be":"markdown","96abdfff":"markdown","2227fb80":"markdown","cea1d06e":"markdown","6beb929c":"markdown","e027dac6":"markdown","613741fb":"markdown","e8d56f4a":"markdown","4d7efe1a":"markdown","b9148f25":"markdown","69648106":"markdown","7159dec3":"markdown","8a122f01":"markdown","6bf1ec7e":"markdown","cb2fe573":"markdown","eccc35f1":"markdown","f9aceb77":"markdown","e6db8d5c":"markdown","dba4abfc":"markdown","e4cfb0dd":"markdown","0cbe9568":"markdown","032345d3":"markdown","e6f72dc6":"markdown","f3e213e7":"markdown","8124659c":"markdown"},"source":{"a2c0e4c2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nimport warnings\nwarnings.filterwarnings('ignore')","a3085bb0":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test_results = pd.read_csv('..\/input\/dummy-submission\/Best_Submission.csv')","855d4c09":"df_test.insert(loc=1,column='Survived',value=df_test_results['Survived'])\ndf_train = pd.concat([df_train,df_test],axis=0)\ndf_train.reset_index(inplace=True)\ndf_train.drop('index',axis=1,inplace=True)","61bee1b7":"df_train.info()","cddcf64c":"def Missing_Data_Plot(df):\n  missing_data = []\n  for col_name in df.columns:\n    missing_data.append( df[col_name].isnull().values.sum()\/len(df['PassengerId'])*100 )\n\n  sns.set(rc={'figure.figsize':(16,8)})\n  sns.barplot(x=df.columns, y=missing_data)\n  plt.xlabel('Columns')\n  plt.ylabel('Percentage of Missing values')\n  plt.title('Missing Values')\n  plt.yticks(np.arange(0,100,20))","7ed6c3b5":"Missing_Data_Plot(df_train)","2d28c04c":"temp = df_train.loc[(df_train['Age'].isnull() == False)]            # Storing the dataframe with no missing values of Age into Temp","5b06096b":"print(df_train['Parch'].unique())                           # Checking if the both temp and df_train have same unique value of Prach and SibSp\nprint(temp['Parch'].unique())\n\nprint(df_train['SibSp'].unique())\nprint(temp['SibSp'].unique())","c97d3467":"df_train['Parch'].loc[df_train['Parch'] == 9] = 6","eac69d7a":"temp = df_train.loc[(df_train['Age'].isnull() == False)] \nParch_key = list(temp['Parch'].unique())                   #Parch Feature is mapped to a Dictionary\nParch_val = [i for i in range(0,len(Parch_key))]\n\nSib_key = list(temp['SibSp'].unique())                     #SibSp Feature is mapped to a Dictionary\nSib_val = [i for i in range(0,len(Sib_key))]\n\nParch_dict = {}\nSib_dict = {}\n\nfor i in Parch_key:\n  for j in Parch_val:\n    Parch_dict[i] = j\n    Parch_val.remove(j)\n    break\n\n\nfor i in Sib_key:\n  for j in Sib_val:\n    Sib_dict[i] = j\n    Sib_val.remove(j)\n    break\n\n\nAge_mat = []                                              # Now I have created a Age Matrix with Parch and SibSp Dictionaries,\nfor i in list(temp['Parch'].unique()):                    # we can now fill age value with the coreesponding Parch & SibSp Value\n  temp_2 = []\n  for j in list(temp['SibSp'].unique()):\n    age = []\n    for ind in temp.index:\n      if temp['Parch'][ind]==i and temp['SibSp'][ind]==j:\n        age.append(temp['Age'][ind])\n    temp_2.append(np.mean(age).round())\n  Age_mat.append(temp_2)\nAge_mat = np.array(Age_mat)                               #Final Age Matrix is Saved to Age_mat","354432e2":"print(Age_mat)                                           #How our Age Matrix Looks","6db1cccf":"def Age_Imputer(df,Age_mat,Parch_dict,Sib_dict):                                   \n  temp = df.loc[(df['Age'].isnull() == True)]        # Here is the function which will use the parch and SibSp values \n  for ind in temp.index:\n    a = temp['Parch'][ind]  \n    b = temp['SibSp'][ind]                            # to fill the missing Age Values\n    i = Parch_dict[a]\n    j = Sib_dict[b]\n    df['Age'][ind] = Age_mat[i,j]","21190182":"Age_Imputer(df_train,Age_mat,Parch_dict,Sib_dict)          # Calling the Imputer Function","d46c8cd6":"Missing_Data_Plot(df_train)\ndf_train.info()","a253b9fb":"temp = df_train.loc[(df_train['Embarked'].isnull() == False)]","098f84fa":"count = []\nfor i in range(1,4):\n  embar = []\n  P1 = temp['Embarked'].loc[(temp['Pclass'] == i)]\n  embar.append(len(P1.loc[(P1 == 'S')]))\n  embar.append(len(P1.loc[(P1 == 'Q')]))\n  embar.append(len(P1.loc[(P1 == 'C')]))\n  count.append(embar)\ncount","b1a3dd35":"x = np.arange(3)\nplt.bar(x+0.2, count[0]\/np.sum(count[0])*100, color='r',width=0.2, label = 'Class-1')\nplt.bar(x, count[1]\/np.sum(count[1])*100, color='orange',width=0.2, label = 'Class-2')\nplt.bar(x-0.2, count[2]\/np.sum(count[2])*100, color='g',width=0.2, label = 'Class-3')\nplt.xticks(x, ['S', 'Q', 'C'])\nplt.legend()\nplt.title('Relation between Class and Embarked')\nplt.xlabel('Embarked')\nplt.ylabel('%age. of Passengers')\nplt.show()","cbb83152":"def Embarked_Imputer(df):                                                       # Function to impute values of Emabrked features using PClass Feature\n  temp = df.loc[df['Embarked'].isnull() == True]\n  for idk in temp.index:\n    if temp['Pclass'][idk] == 3 or temp['Pclass'][idk] == 2:\n      df['Embarked'][idk] = 'S'\n    else:\n      df['Embarked'][idk] = 'C'","ca77d209":"Embarked_Imputer(df_train)","baff36f4":"temp = df_train.dropna(axis=0)","692522d3":"mask_1 = (temp['Embarked'] == 'S' )\nmask_2 = (temp['Embarked'] == 'Q')\nmask_3 = (temp['Embarked'] == 'C')\ntemp_1 = temp[{'Age','Fare','Pclass'}].loc[mask_1]\ntemp_2 = temp[{'Age','Fare','Pclass'}].loc[mask_2]\ntemp_3 = temp[{'Age','Fare','Pclass'}].loc[mask_3]","f73094d1":"embarked_filter = [temp_1, temp_2, temp_3]","cc997f20":"def Class_Filter(temp):\n  group = temp.groupby(by='Pclass')\n  temp_4 = np.array(group.get_group(1))\n  temp_5 = np.array(group.get_group(2))\n  temp_6 = np.array(group.get_group(3))\n  class_filter = [temp_4,temp_5,temp_6]\n  return class_filter ","66bba068":"class_filtered = []\nfor filt in embarked_filter:\n  class_filtered.append(Class_Filter(filt))  ","b401c1fa":"a = np.where(class_filtered[0][0][0] == 35)\nf = np.where(class_filtered[0][0][0] == 53.1)","37793d96":"def age_bin(temp):\n  age_cl_1 = []\n  age_cl_2 = []\n  age_cl_3 = []\n  age_cl_4 = []\n  new_fare = []\n  for i in range(0,len(temp)):\n    age = temp[i,a[0][0]]\n    fare = temp[i,f[0][0]].round(2)\n    if age > 0 and age <= 20:\n      age_cl_1.append(fare)\n    if age > 20 and age <= 40:\n      age_cl_2.append(fare)\n    if age > 40 and age <= 60:\n      age_cl_3.append(fare)\n    if age > 60 and age <= 90:\n      age_cl_4.append(fare)\n\n  new_fare = [np.mean(age_cl_1).round(2), np.mean(age_cl_2).round(2), np.mean(age_cl_3).round(2), np.mean(age_cl_4).round(2)]\n  return new_fare","3d17f046":"fare = []\nfor i in range(0,3):\n  for j in range(0,3):\n    slice = class_filtered[i][j]\n    fare.append(age_bin(slice))","5ae716ef":"Fare_mat = np.array(fare)","cb86220c":"print(Fare_mat)                            #How our Fare matrix Looks","a4b386cc":"Age_bin = np.arange(4)\nplt.figure(figsize=[16,12])\nplt.bar(Age_bin-0.2,Fare_mat[0],color = 'orange', width = 0.2, label = 'Class-1')\nplt.bar(Age_bin,Fare_mat[1],color = 'red', width = 0.2, label = 'Class-2')\nplt.bar(Age_bin+0.2,Fare_mat[2],color = 'blue', width = 0.2, label = 'Class-3')\nplt.xticks(Age_bin,['0-20','20-40','40-60','>60'])\nplt.xlabel('Age Groups')\nplt.ylabel('Fare')\nplt.title(\"Fare Distribution for Emabrked = 'S'\")\nplt.legend(loc='upper right')\nplt.show()","949434ec":"Age_bin = np.arange(4)\nplt.figure(figsize=[16,12])\nplt.bar(Age_bin-0.2,Fare_mat[3],color = 'orange', width = 0.2, label = 'Class-1')\nplt.bar(Age_bin,Fare_mat[4],color = 'red', width = 0.2, label = 'Class-2')\nplt.bar(Age_bin+0.2,Fare_mat[5],color = 'blue', width = 0.2, label = 'Class-3')\nplt.xticks(Age_bin,['0-20','20-40','40-60','>60'])\nplt.xlabel('Age Groups')\nplt.ylabel('Fare')\nplt.title(\"Fare Distribution for Emabrked = 'Q'\")\nplt.legend(loc='upper right')\nplt.show()","90c37cb0":"Age_bin = np.arange(4)\nplt.figure(figsize=[16,12])\nplt.bar(Age_bin-0.2,Fare_mat[6],color = 'orange', width = 0.2, label = 'Class-1')\nplt.bar(Age_bin,Fare_mat[7],color = 'red', width = 0.2, label = 'Class-2')\nplt.bar(Age_bin+0.2,Fare_mat[8],color = 'blue', width = 0.2, label = 'Class-3')\nplt.xticks(Age_bin,['0-20','20-40','40-60','>60'])\nplt.xlabel('Age Groups')\nplt.ylabel('Fare')\nplt.title(\"Fare Distribution for Emabrked = 'C'\")\nplt.legend(loc='upper right')\nplt.show()","89c4cf8d":"def Fare_Imputer(train,new):\n  df_array = np.array(train)\n  age_dict = { '0': 0,'1': 1,'2': 2,'3': 3}\n  comb_dict = { 'S1': 0, 'S2': 1, 'S3': 2, 'Q1': 3, 'Q2': 4, 'Q3': 5, 'C1': 6, 'C2': 7, 'C3': 8 }\n  for i in range(0,len(train['PassengerId'])):\n    if np.isnan(df_array[i,9]):\n      age = df_array[i,5]\n      clas = df_array[i,2]\n      embar = df_array[i,11]\n      comb = str(embar) + str(clas)\n      x = comb_dict[comb]\n      y = age_dict[str(math.floor(age\/20))]\n      if np.isnan(new[x,y]):\n        df_array[i,9] = train['Fare'].median()\n      else: \n        df_array[i,9] = new[x,y].round(2)\n  col = train.columns\n  return pd.DataFrame(df_array,columns=col)","bcb0edfc":"df_train = Fare_Imputer(df_train,Fare_mat)\n","42f727f2":"df_train.info()","813e6b66":"new_df_train = df_train.copy()","45f7047d":"# Alone_Function creates a new feature \"Alone\"\n\ndef Alone(df):\n  df.insert(12,'Alone',\"\")\n  df.insert(13,'Small Family',\"\")\n  df.insert(14,'Big Family',\"\")\n  alone = []\n  sf = []\n  bf = []\n\n  for ind in df.index:\n    if df['SibSp'][ind] == 0 and df['Parch'][ind] == 0:\n      alone.append(1)\n      sf.append(0)\n      bf.append(0)\n    elif df['SibSp'][ind] > 2 or df['Parch'][ind] > 2 :\n      alone.append(0)\n      sf.append(0)\n      bf.append(1)\n    else:\n      alone.append(0)\n      sf.append(1)\n      bf.append(0)\n  df.iloc[:,12] = alone\n  df.iloc[:,13] = sf\n  df.iloc[:,14] = bf","baa34653":"Alone(new_df_train) #Applying Function on Train Set","92f0b4ab":"col_list = ['Alone','Small Family','Big Family']\nSurvived = [ (new_df_train[col].loc[(new_df_train['Survived'] == 1)].sum()\/new_df_train[col].sum()*100).round(2) for col in col_list ]\nNot_Survived = [ (new_df_train[col].loc[(new_df_train['Survived'] == 0)].sum()\/new_df_train[col].sum()*100).round(2) for col in col_list ]","503f6c8f":"plt.figure(figsize = [16,8])\nplt.bar(0, Survived[0], color='orange',width=0.2, label = 'Survived')\nplt.bar(1,Survived[1], color='orange',width=0.2)\nplt.bar(2, Survived[2], color='orange',width=0.2)\n\nplt.bar(0.2, Not_Survived[0], color='g',width=0.2, label = 'Not-Survived')\nplt.bar(1.2, Not_Survived[1], color='g',width=0.2,)\nplt.bar(2.2, Not_Survived[2], color='g',width=0.2,)\n\nplt.bar(0.1, (Survived[0]\/Not_Survived[0])*100, color='black',width=0.01, label = 'Chances of Survival')\nplt.bar(1.1, (Survived[1]\/Not_Survived[0])*100, color='black',width=0.01,)\nplt.bar(2.1, (Survived[2]\/Not_Survived[0])*100, color='black',width=0.01,)\n\nplt.xlabel('Percentage of Passengers')\nplt.ylabel('Type of Group of Passenger')\nplt.title('Group of Passengers vs Survival')\nplt.xticks([0.1,1.1,2.1],['Alone','Small Family','Big Family'])\nplt.legend()","e9d58af7":"#Salutation Function for Extracting Salutation and Length of Name from Name Column\ndef Salutation(df):\n  temp = []\n  length = []\n  for name in df['Name']: \n    temp_name = name.split(\", \")[1]\n    length.append(len(name))\n    temp.append(temp_name.split(\" \")[0])\n  df['Salutation'] = temp\n  df['Len_Name'] = length","07bce546":"Salutation(new_df_train)","99fe2562":"sal_list = new_df_train['Salutation'].unique()\nsal_count = []\nfor i in sal_list:\n  temp=0\n  for j in new_df_train['Salutation']:\n    if j == i:\n      temp+=1\n  sal_count.append(temp)    \nsal_count\n\nplt.figure(figsize=[16,8])\nsns.barplot(x=sal_list, y=sal_count)\nplt.xlabel('Salutation Type')\nplt.ylabel('Count of Salutation')","534839b8":"temp = []\nfor sal in new_df_train['Salutation']:\n  if sal in ['Mr.','Mrs.']:\n    temp.append('Adults')\n  elif sal in ['Miss','Master.']:\n    temp.append('Teen\/Kid')\n  elif sal in ['Dr.','Major.','Col.','Capt.']:\n    temp.append('Officer')\n  else:\n    temp.append('Royalty')\nnew_df_train['New_Sal'] = temp","805f66f7":"sal_list = new_df_train['New_Sal'].unique()\nSurvived_Sal = []\nNot_Survived_Sal = []\nfor i in sal_list:\n  tot = new_df_train['Survived'].loc[(new_df_train['New_Sal'] == i)]\n  Survived_Sal.append( round( ( tot.sum() \/ len(tot) ),4) * 100 )\n  Not_Survived_Sal.append( round( ( ( len(tot) - tot.sum() ) \/ len(tot) ),4)*100 )\nprint(Survived_Sal)\nprint(Not_Survived_Sal)","faa8944b":"Sal_type = np.arange(4)\nplt.bar(Sal_type-0.2,Survived_Sal,color = 'orange', width = 0.2, label = 'Survived')\nplt.bar(Sal_type,Not_Survived_Sal,color = 'g', width = 0.2, label = 'Not-Survived')\n\nplt.xticks(Age_bin,['Adults','Teens\/Kids','Officers','Royalty'])\nplt.xlabel('Sal Types')\nplt.ylabel('No. of Passengers')\nplt.title(\"Survival on basis of Salutation\")\nplt.legend()\nplt.show()","dd78b81b":"from sklearn.preprocessing import OneHotEncoder\ndef Encoder(df,col_name):\n  Encoder = OneHotEncoder(sparse=False,handle_unknown='ignore')\n  temp = pd.DataFrame(Encoder.fit_transform(df[[col_name]]))\n  temp.columns = Encoder.get_feature_names([col_name])\n  return temp","eceb6160":"encoded_columns = {'Pclass','Embarked','Sex','Parch','SibSp','New_Sal'}\nfor col in encoded_columns:\n  temp = Encoder(new_df_train,col)\n  new_df_train = pd.concat([new_df_train,temp],axis=1)","6ee0e44a":"drop_col_list = {'Name', 'Sex','Embarked','Cabin','Ticket','New_Sal','Salutation'}\nnew_df_train.drop(drop_col_list,axis=1,inplace=True)\nnew_df_train = new_df_train.reset_index(drop=True)","dd9bdc03":"new_df_train.info()","40dabf0f":"new_df_train = new_df_train.astype(int)\nnew_df_train['Fare'] = new_df_train['Fare'].astype(float)","0ad749fa":"new_df_train.info()","1a0c7835":"# Importing Models for Feature Selection\nfrom sklearn.feature_selection import SelectFromModel\n\n# Importing TrainTest Split and MinMaxScaler for Scaling the Data\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Importing Grid Search CV for HyperParameterTuning and Stratifiedkfold for CV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\n# Importing Classifier Models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# Importing Metrics From Sklearn for Evaluation\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report","cc7f2b36":"Y = new_df_train['Survived']\nX = new_df_train.drop( 'Survived' ,axis=1 )","ccc2b553":"clf = RandomForestClassifier(n_estimators=50, max_features='sqrt')\nclf = clf.fit(X,Y)\nfeatures = pd.DataFrame()\nfeatures['feature'] = X.columns\nfeatures['Importance'] = clf.feature_importances_\nfeatures.sort_values(by=['Importance'],ascending = True,inplace=True)\nfeatures.set_index('feature',inplace=True)\n\n# Ploting the Feature Importance\nfeatures.plot(kind = 'barh', figsize = (25,25))","e6336362":"model = SelectFromModel(clf,prefit=True)\nreduced_df_train = model.transform(X)","92d0083b":"train_set = reduced_df_train[:891,:]\ntest_set = reduced_df_train[891:,:]\nY = np.array(Y)\nY = Y.reshape(1309,1)\nX = train_set","d519047e":"X_train,X_test,y_train,y_test = train_test_split(X,Y[:891,-1], random_state = 42,test_size=0.3)","ebaeb6b2":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","fc500958":"classifier = RandomForestClassifier()\nclassifier.fit(X_train,y_train)\n\nclassifier_2 = LogisticRegression()\nclassifier_2.fit(X_train,y_train)\n\nclassifier_3 = GradientBoostingClassifier()\nclassifier_3.fit(X_train,y_train)\n\nclassifier_4 = XGBClassifier()\nclassifier_4.fit(X_train,y_train)\n\nclassifier_5 = VotingClassifier(estimators=[('rf',classifier),('gb',classifier_3),('xgb',classifier_4)], voting='hard',n_jobs=-1,)\nclassifier_5.fit(X_train,y_train)","371a3227":"y_pred = classifier.predict(X_test)\nprint(\"\\033[1m\" + \"For Random Forest :\" + \"\\033[0m\")\nprint(classification_report(y_test,y_pred))\n\ny_pred_2 = classifier_2.predict(X_test)\nprint(\"\\033[1m\" + \"For Logistic Regression :\" + \"\\033[0m\")\nprint(classification_report(y_test,y_pred_2))\n\ny_pred_3 = classifier_3.predict(X_test)\nprint(\"\\033[1m\" + \"For Gardient Boosting Classifier :\" + \"\\033[0m\")\nprint(classification_report(y_test,y_pred_3))\n\ny_pred_4 = classifier_4.predict(X_test)\nprint(\"\\033[1m\" + \"For XGBoost Classifier :\" + \"\\033[0m\")\nprint(classification_report(y_test,y_pred_4))\n\ny_pred_5 = classifier_5.predict(X_test)\nprint(\"\\033[1m\" + \"For Voting Classifier :\" + \"\\033[0m\")\nprint(classification_report(y_test,y_pred_5))","47a3ef33":"# Summary of Predictions :\npredictions = [y_pred, y_pred_2, y_pred_3,y_pred_4,y_pred_5]\nj = 1\nfor i in predictions:\n  print(\"\\033[1m\" +'For Classifier :' + str(j) + \"\\033[0m\" )\n  print(accuracy_score(y_test,i))\n  print(confusion_matrix(y_test,i))\n  j+=1","cb0b3e08":"grid   =   [ {\n               'max_depth': [4,6,8],                                             #Random_forest_grid\n               'min_samples_split': [2, 3, 10],\n               'min_samples_leaf': [1, 3, 10],\n               'criterion' : ['gini', 'entropy' ],\n               'max_features' : ['sqrt','auto','log2'],\n               'n_estimators': [50,10] } ]\n","545a3b39":"cross_val = StratifiedKFold(n_splits = 3)  \nGSCV = GridSearchCV( RandomForestClassifier(), param_grid = grid[0], cv = cross_val, verbose=0 )\nGSCV.fit(X_train,y_train)","9ead154c":"print(\" Best Parameters:\" + str(GSCV.best_params_))\nprint(\" Best Score:\" + str(GSCV.best_score_))\nRF_param = GSCV.best_params_","ac66704c":"grid   =   [  {\n               'solver' : ['newton-cg', 'lbfgs', 'liblinear'],            #Logistic_Regression_Grid\n               'penalty' : ['l1', 'l2'],\n               'C': [0.001, 0.01, 0.1, 1, 10]  }  ]","81ad100f":"GSCV = GridSearchCV( LogisticRegression(), param_grid = grid[0], cv = cross_val, verbose=0 )\nGSCV.fit(X_train,y_train)","d8a7c20f":"print(\" Best Parameters:\" + str(GSCV.best_params_))\nprint(\" Best Score:\" + str(GSCV.best_score_))\nLR_param = GSCV.best_params_","4a2fca6a":"classifier = RandomForestClassifier(**RF_param)\nclassifier.fit(X_train,y_train)\n\nclassifier_2 = LogisticRegression(**LR_param)\nclassifier_2.fit(X_train,y_train)\n\nclassifier_3 = GradientBoostingClassifier(n_estimators = 180, min_samples_split = 2, min_samples_leaf = 4, max_depth = 50, loss = 'deviance', learning_rate = 0.01, criterion = 'mse')\nclassifier_3.fit(X_train,y_train)\n\nclassifier_4 = XGBClassifier()\nclassifier_4.fit(X_train,y_train)\n\nclassifier_5 = VotingClassifier(estimators=[('rf',classifier), ('gb',classifier_3),('xgb',classifier_4)], voting='hard',n_jobs=-1,)\nclassifier_5.fit(X_train,y_train)","bd3b8f62":"y_pred = classifier.predict(X_test)\nprint(\"For Random Forest :\")\nprint(classification_report(y_test,y_pred))\n\ny_pred_2 = classifier_2.predict(X_test)\nprint(\"For Logistic Regression :\")\nprint(classification_report(y_test,y_pred_2))\n\ny_pred_3 = classifier_3.predict(X_test)\nprint(\"For Gradient Boosting :\")\nprint(classification_report(y_test,y_pred_3))\n\ny_pred_4 = classifier_4.predict(X_test)\nprint(\"For Xtreme Gradient Boosting :\")\nprint(classification_report(y_test,y_pred_4))\n\ny_pred_5 = classifier_5.predict(X_test)\nprint(\"For Voting Classifier :\")\nprint(classification_report(y_test,y_pred_5))","29938c61":"# Summary of Predictions after hyper Parameter Tuning:\npredictions_2 = [y_pred, y_pred_2, y_pred_3,y_pred_4,y_pred_5]\nj = 1\nfor i in predictions:\n  print('For Classifier :' + str(j))\n  print(accuracy_score(y_test,i))\n  print(confusion_matrix(y_test,i))\n  j+=1","fc0058fa":"# Comparasion of Predictions :\nj = 1\nfor i in range(0,len(predictions)):\n  print('For Classifier :' + str(j))\n  print('Without HyperParameter Tuning' + str(accuracy_score(y_test,predictions[i])) )\n  print('After HyperParameter Tuning' + str(accuracy_score(y_test,predictions_2[i])) )\n  j+=1","3c1f1dd3":"from keras.models import Sequential\nfrom keras.layers import Dense\n\ndim = X_train.shape[1]\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=dim, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n# compile the keras model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the keras model on the dataset\nmodel.fit(X_train,y_train, epochs=100, batch_size=10)\n# evaluate the keras model\n_, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %.2f' % (accuracy*100))","2630be6f":"y_pred_6 = model.predict(X_test,batch_size=10).round(0)","51715dfe":"y_pred_6 = y_pred_6.astype(int)","88893d48":"print(classification_report(y_test,y_pred_6))\nprint(accuracy_score(y_test,y_pred_6))\nprint(confusion_matrix(y_test,y_pred_6))","a35060b7":"result = pd.DataFrame(classifier.predict(scaler.transform(test_set)),columns={'Survived'})","39d82755":"submission = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission =pd.concat([submission['PassengerId'],result],axis=1)\nsubmission.to_csv('.\/Submission_5.csv',index=False)","ce46b7ce":"## 1. Deriving a new feature \"Salutation\" i.e. Title of the person travelling then we will group them by 'Regular' ,'Officer', 'Royalty'","9c65607e":"# After Hyperparameter Tuning of Models","7b03c55b":"# Using Grid Search CV for Hyperparameter tuning Of Models","e29706be":"# Using Models without HyperParameter Tuning","96abdfff":"### 3. Fare","2227fb80":"### 1. Age","cea1d06e":"Visualising Distribution of 'Fare' with 'Class','Emarked' and 'Age group'","6beb929c":"# Data Cleaning","e027dac6":"### 2. Embarked","613741fb":"# Feature Selection \/ Feature Importance","e8d56f4a":"from the Graph it is clear that \n1. most of the passengers that were traveling alone have died, and chances of survival of alone person are least.\n2. Most of the small families survived, may be its because of the fact that small family members are less in no. hence gathered easily at the rescue point.","4d7efe1a":"# Data Loading from Csv","b9148f25":"## 1. Deriving a new feature \"Alone\" if a traveler is alone or not","69648106":"We can see from the plots :\n1. That most of the passenger have Embarked from 'S'\n2. The passengers that Embarked from 'S' are mostly of Class-3 & Class-2\n3. The passengers that Embarked from 'C' are mostly of Class-1\n\nSince there are only 2 missing values we can :\n1. Either Fill the most frequent value i.e. 'S'.\n2. Or We can Fill the values as per the Class they are in.\n\nI have used the Second Method Since this Notebook is common for Playground Competition, which have the same dataset but with many missing values.","7159dec3":"## Visualising  feature Alone with Survival","8a122f01":"# Calculating Best Parameters for RandomForestClassifier","6bf1ec7e":"## Percentage of Missing Data","cb2fe573":"Dropping Extra Columns like **'Name' , 'Sex' , 'Embarked' , 'Cabin' , 'Ticket' , 'New_Sal' , 'Salutation'**","eccc35f1":"### Importing Neccessary Models","f9aceb77":"For Fare Imputation, according to my hypothesis should be dependent of 3 factors only :\n1. Age of Passenger (\"Age\")\n2. From where he is Boarding the Ship (\"Embarked\")\n3. Which Class he is travelling (\"Pclass\")\n\nTherefore i have made a 2D matrix of fare with x ad y index being the \"Age_Bin\" and \"Emabrked & Class Combined\"","e6db8d5c":"# Splitting Data","dba4abfc":"# Calculating Best Parameters for Logistic Regression","e4cfb0dd":"# Preparing Submission File","0cbe9568":"We have one value of Parch that has no Age value,\nand only two rows are there of that value\ntherefore we can reduce it to 8 as later we are going to group the Parch Field anyway.","032345d3":"# Feature Engineering : Adding extra features\n","e6f72dc6":"As Cabin has almost 80% values missing, there is no way we can Impute the Values without inducing somekind of bias into the data.\nTherefore we will drop this Column Later.\n\nNow we only left with one value of Fare and 2 Values of Embarked","f3e213e7":"# Using Keras Sequential Model","8124659c":"## Handling Missing Values"}}