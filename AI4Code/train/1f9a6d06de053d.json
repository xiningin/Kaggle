{"cell_type":{"697d2bd1":"code","e418e11d":"code","8b09a189":"code","d9c016a8":"code","8c40156c":"code","8249b2df":"code","a7f6b494":"code","8df73a97":"code","92e9b8ec":"code","bfe1ad51":"code","9016c2e5":"code","90b986db":"code","2c2b42bc":"code","f866e5f9":"code","3994d226":"code","b125b177":"code","3e183c44":"code","eefbc5f2":"code","2d10b465":"code","2dc2b45c":"code","554386d5":"code","1de9fc05":"code","4573b622":"code","21d4feb4":"code","03a3ba52":"code","30ab75c7":"code","0e858b38":"code","b81677ab":"code","7e1089cf":"code","5347ae4c":"code","744cbd85":"code","3e3f2536":"code","f9c13c62":"code","ce0384ce":"markdown","3a472be7":"markdown","208e4a23":"markdown","31729167":"markdown","3a5daeda":"markdown","6228218f":"markdown","112fc467":"markdown","6e83a8e2":"markdown","2aa5b51c":"markdown","05d02cf9":"markdown","d6197d07":"markdown","9b4787f6":"markdown","0f35a50c":"markdown","df3436d8":"markdown","52e9a3b6":"markdown","e5ea3dfc":"markdown","213f409f":"markdown","d35603f7":"markdown","7c0f2e64":"markdown","6330301c":"markdown"},"source":{"697d2bd1":"import sqlite3\nfrom sqlite3 import Error\n\nimport pandas as pd\nfrom IPython.display import Image\n\npd.options.mode.chained_assignment = None","e418e11d":"def create_connection(db_file, delete_db=False):\n    import os\n    if delete_db and os.path.exists(db_file):\n        os.remove(db_file)\n\n    conn = None\n    try:\n        conn = sqlite3.connect(db_file)\n        conn.execute(\"PRAGMA foreign_keys = 1\")\n    except Error as e:\n        print(e)\n\n    return conn\n\n\ndef create_table(conn, create_table_sql, drop_table_name=None):\n    \n    if drop_table_name: # You can optionally pass drop_table_name to drop the table. \n        try:\n            c = conn.cursor()\n            c.execute(\"\"\"DROP TABLE IF EXISTS %s\"\"\" % (drop_table_name))\n        except Error as e:\n            print(e)\n    \n    try:\n        c = conn.cursor()\n        c.execute(create_table_sql)\n    except Error as e:\n        print(e)\n        \ndef insert_sql_statement(insert_data, conn, table_name):\n    with conn:\n        cur = conn.cursor()\n\n        empty_value_container = \"?,\"*len(insert_data[0])\n        empty_value_container = \"\".join([\"(\",empty_value_container.strip(\",\"),\")\"])\n\n        cur.executemany(f\"INSERT INTO {table_name} VALUES {empty_value_container}\", insert_data)\n        \ndef read_sql_query(query, conn):\n    result = pd.read_sql_query(query, conn)\n    return result","8b09a189":"database_filename = 'f1_info.db'\nconn = create_connection(database_filename, delete_db=True)","d9c016a8":"def create_constructors_table():\n    \n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/constructors.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    constructor_index = columns.index(\"constructorId\")\n    name_index = columns.index(\"name\")\n\n    constructorId = list(map(lambda row: int(row[constructor_index]), data[1:]))\n    name = list(map(lambda row: row[name_index].strip('\"'), data[1:]))\n\n    insert_data = list(zip(constructorId,name))\n    \n    sql_create_statement = \"\"\"CREATE TABLE constructors\n                        (\n                            constructorId Integer not null Primary key,\n                            name Text not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement,drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"constructors\")\n    \ndef create_constructor_standings_table():\n\n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/constructor_standings.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    constructorStandingsId_index = columns.index(\"constructorStandingsId\")\n    raceId_index = columns.index(\"raceId\")\n    constructorId_index = columns.index(\"constructorId\")\n    points_index = columns.index(\"points\")\n    position_index = columns.index(\"position\")\n\n    constructorStandingsId = list(map(lambda row: int(row[constructorStandingsId_index]), data[1:]))\n    raceId = list(map(lambda row: int(row[raceId_index]), data[1:]))\n    constructorId = list(map(lambda row: int(row[constructorId_index]), data[1:]))\n    points = list(map(lambda row: float(row[points_index]), data[1:]))\n    position = list(map(lambda row: int(row[position_index]), data[1:]))\n\n    insert_data = list(zip(constructorStandingsId, raceId, constructorId, points, position))\n\n    sql_create_statement = \"\"\"CREATE TABLE constructor_standings\n                        (\n                            constructorStandingsId Integer not null Primary key,\n                            raceId Integer not null,\n                            constructorId not null,\n                            points Integer not null,\n                            position Integer not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement,drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"constructor_standings\")\n    \ndef create_drivers_table():\n\n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/drivers.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    driverId_index = columns.index(\"driverId\")\n    forename_index = columns.index(\"forename\")\n    surname_index = columns.index(\"surname\")\n\n    driverId = list(map(lambda row: int(row[driverId_index]), data[1:]))\n    name = list(map(lambda row: \" \".join([row[forename_index].strip('\"'),row[surname_index].strip('\"')]) , data[1:]))\n\n    insert_data = list(zip(driverId, name))\n\n    sql_create_statement = \"\"\"CREATE TABLE drivers\n                        (\n                            driverId Integer not null Primary key,\n                            name Text not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement,drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"drivers\")\n    \ndef create_races_table():\n\n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/races.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    raceId_index = columns.index(\"raceId\")\n    year_index = columns.index(\"year\")\n    round_index = columns.index(\"round\")\n\n    raceId = list(map(lambda row: int(row[raceId_index]), data[1:]))\n    year = list(map(lambda row: int(row[year_index]), data[1:]))\n    round = list(map(lambda row: int(row[round_index]), data[1:]))\n\n    insert_data = list(zip(raceId, year, round))\n\n    sql_create_statement = \"\"\"CREATE TABLE races\n                        (\n                            raceId Integer not null Primary key,\n                            year Integer not null,\n                            round Integer not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement, drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"races\")\n    \ndef create_results_table():\n\n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/results.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    resultId_index = columns.index(\"resultId\")\n    raceId_index = columns.index(\"raceId\")\n    driverId_index = columns.index(\"driverId\")\n    constructorId_index = columns.index(\"constructorId\")\n    grid_index = columns.index(\"grid\")\n    position_index = columns.index(\"position\")\n    points_index = columns.index(\"points\")\n    statusId_index = columns.index(\"statusId\")\n\n    resultId = list(map(lambda row: int(row[resultId_index]), data[1:]))\n    raceId = list(map(lambda row: int(row[raceId_index]), data[1:]))\n    driverId = list(map(lambda row: int(row[driverId_index]), data[1:]))\n    constructorId = list(map(lambda row: int(row[constructorId_index]), data[1:]))\n    grid = list(map(lambda row: int(row[grid_index]), data[1:]))\n    position = list(map(lambda row: row[position_index], data[1:]))\n    points = list(map(lambda row: float(row[points_index]), data[1:]))\n    statusId = list(map(lambda row: int(row[statusId_index]), data[1:]))\n\n    position = list(map(lambda val: '1000' if val==\"\\\\N\" else val, position))\n    position = list(map(lambda val: int(val), position))\n\n    insert_data = list(zip(resultId, raceId, driverId, constructorId, grid, position, points, statusId))\n\n    result_df = pd.DataFrame(insert_data, columns=[\"resultId\",\"raceId\",\"driverId\",\"constructorId\",\"grid\",\"position\",\"points\",\"statusId\"])\n\n    grouped=result_df.groupby(by='raceId')['position']\n    values=grouped.transform(lambda x: len(x))\n    indices_to_replace=result_df[result_df.position==1000].index.tolist()\n    values_to_replace=values[indices_to_replace]\n    result_df['position'].iloc[indices_to_replace]=values_to_replace\n\n    insert_data = result_df.values\n\n    sql_create_statement = \"\"\"CREATE TABLE results\n                        (\n                            resultId Integer not null Primary key,\n                            raceId Integer not null,\n                            driverId Integer not null,\n                            constructorId Integer not null,\n                            grid Integer not null,\n                            position Integer not null,\n                            points Real not null,\n                            statusId Integer not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement, drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"results\")\n    \ndef create_status_table():\n\n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/status.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    statusId_index = columns.index(\"statusId\")\n    status_index = columns.index(\"status\")\n\n    statusId = list(map(lambda row: int(row[statusId_index]), data[1:]))\n    status = list(map(lambda row: row[status_index].strip('\"'), data[1:]))\n\n    insert_data = list(zip(statusId, status))\n\n    sql_create_statement = \"\"\"CREATE TABLE status\n                        (\n                            statusId Integer not null Primary key,\n                            status Text not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement, drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"status\")\n    \ndef create_lap_times_table():\n    \n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/lap_times.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    raceId_index = columns.index(\"raceId\")\n    driverId_index = columns.index(\"driverId\")\n    lap_index = columns.index(\"lap\")\n    milliseconds_index = columns.index(\"milliseconds\")\n\n    raceId = list(map(lambda row: int(row[raceId_index]), data[1:]))\n    driverId = list(map(lambda row: int(row[driverId_index]), data[1:]))\n    lap = list(map(lambda row: int(row[lap_index]), data[1:]))\n    milliseconds = list(map(lambda row: int(row[milliseconds_index]), data[1:]))\n    lapId = list(range(1, len(raceId)+1))\n\n    insert_data = list(zip(lapId, raceId, driverId, lap, milliseconds))\n\n    sql_create_statement = \"\"\"CREATE TABLE lap_times\n                        (\n                            lapId Integer not null Primary key,\n                            raceId Integer not null,\n                            driverId Integer not null,\n                            lap Integer not null,\n                            milliseconds Integer not null\n                        )\n                        \"\"\"\n\n    create_table(conn, sql_create_statement, drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"lap_times\")\n    \ndef create_pit_stops_table():\n    \n    with open(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/pit_stops.csv\",\"r\") as f:\n        data = f.read().strip().split(\"\\n\")\n\n    data = list(map(lambda row: row.split(\",\"), data))\n\n    columns = data[0]\n\n    raceId_index = columns.index(\"raceId\")\n    driverId_index = columns.index(\"driverId\")\n    stop_index = columns.index(\"stop\")\n    lap_index = columns.index(\"lap\")\n    milliseconds_index = columns.index(\"milliseconds\")\n\n    raceId = list(map(lambda row: int(row[raceId_index]), data[1:]))\n    driverId = list(map(lambda row: int(row[driverId_index]), data[1:]))\n    stop = list(map(lambda row: int(row[stop_index]), data[1:]))\n    lap = list(map(lambda row: int(row[lap_index]), data[1:]))\n    milliseconds = list(map(lambda row: int(row[milliseconds_index]), data[1:]))\n    pit_stop_Id = list(range(1, len(raceId)+1))\n\n    insert_data = list(zip(pit_stop_Id, raceId, driverId, stop, lap, milliseconds))\n\n    sql_create_statement = \"\"\"CREATE TABLE pit_stops\n                        (\n                            pit_stop_Id Integer not null Primary key,\n                            raceId Integer not null,\n                            driverId Integer not null,\n                            stop Integer not null,\n                            lap Integer not null,\n                            milliseconds Integer not null\n                        )\n                        \"\"\"\n    \n    create_table(conn, sql_create_statement, drop_table_name=True)\n\n    insert_sql_statement(insert_data, conn, \"pit_stops\")","8c40156c":"create_constructors_table()\ncreate_constructor_standings_table()\ncreate_drivers_table()\ncreate_races_table()\ncreate_results_table()\ncreate_status_table()\ncreate_lap_times_table()\ncreate_pit_stops_table()","8249b2df":"import numpy as np\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-talk')\nimport matplotlib.patches as mpatches\n\nimport warnings\nwarnings.filterwarnings('ignore')","a7f6b494":"query_statement = \"\"\"\n                select year, constructors.name from constructor_standings\n                \n                    join\n\n                        (\n                        \n                            select year, raceId from races\n                            group by year\n                            having max(round)\n                        \n                        ) as last_race\n\n                            on last_race.raceId = constructor_standings.raceId\n                        \n                    join constructors\n                        on constructor_standings.constructorId=constructors.constructorId\n                \n                where position=1\n                \n                order by year\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","8df73a97":"fig, ax = plt.subplots(figsize=(15,5))\n\ncmap = plt.get_cmap('Set1')\ncolors=[cmap(i) for i in range(len(result.name.unique()))]\n\nresult.name.value_counts().plot.bar(ax=ax, color=colors)\nax.set_ylabel(\"Number of constructor championships\")\nax.grid(False);","92e9b8ec":"result[(result.year>=2010) & (result.year<2020)]","bfe1ad51":"query_statement = \"\"\"\n                select last_race.year, constructors.name, position from constructor_standings\n                \n                    join\n\n                        (\n                        \n                            select year, raceId from races\n                            where year between 2010 and 2019\n                            group by year\n                            having max(round)\n                        \n                        ) as last_race\n\n                            on constructor_standings.raceId = last_race.raceId\n                    \n                    join constructors\n                        on constructors.constructorId = constructor_standings.constructorId\n                \n                where constructors.name = \"Ferrari\"\n                \n                order by last_race.year\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","9016c2e5":"result","90b986db":"fig, ax = plt.subplots(figsize=(15,5))\n\ncmap = plt.get_cmap('Set1')\ncolors=[cmap(i) for i in range(len(result.position.unique()))]\n\nresult.position.value_counts().plot.bar(ax=ax, color=colors)\nax.grid(False)\nax.set_ylabel(\"Frequency\")\nax.set_xlabel(\"Constructor standing positions\");","2c2b42bc":"query_statement = \"\"\"\n                select last_race.year, constructors.name, constructor_standings.position, constructor_standings.points from constructor_standings\n                \n                    join\n\n                        (\n                        \n                            select year, raceId from races\n                            where year between 2010 and 2019\n                            group by year\n                            having max(round)\n                        \n                        ) as last_race\n\n                            on last_race.raceId = constructor_standings.raceId\n                        \n                    join constructors\n                        on constructors.constructorId = constructor_standings.constructorId\n                \n                where constructors.name = \"Ferrari\" or constructor_standings.position = 1\n                \n                order by year, position\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","f866e5f9":"# Calculate Ferrari's percentage deficit over the decade\npercent_deficit = []\nyears = result.year.unique()\nfor year in years:\n    percent_deficit.append(-1*(result[result.year==year].points.pct_change().iloc[1]))\n    \n\n# Calculate moving average\nnumbers = percent_deficit.copy()\nwindow_size = 3\ni = 0\nmoving_averages = []\n\nwhile i < len(numbers) - window_size + 1:\n    this_window = numbers[i : i + window_size]\n    window_average = sum(this_window) \/ window_size\n    moving_averages.append(window_average)\n    i += 1\n\nfig, [ax1, ax2, ax3] = plt.subplots(nrows=3, ncols=1, figsize=(17,9), sharex=True)\nfig.tight_layout()\n\ncmap = plt.get_cmap('tab10')\ncolors=[cmap(i) for i in range(len(result.year.unique()))]\n\nax1.bar(years, percent_deficit, color=colors)\nax1.grid(False)\n\nax2.scatter(years, result[result.name==\"Ferrari\"].position.values)\nax2.plot(years, result[result.name==\"Ferrari\"].position.values, linestyle=\"--\")\nax2.grid(False)\n\nax3.scatter(years[2:], moving_averages)\nax3.plot(years[2:], moving_averages, c=\"gray\", label=\"3-years moving average\")\nax3.grid(False)\n\nax1.set_ylabel(\"Percentage points deficit\")\nax2.set_ylabel(\"Constructor Standings\")\nax3.set_ylabel(\"3 years percentage points\\ndeficit average\")\n\nax1.set_title(\"Ferrari last decade (2010-2019) performance\")\nax3.set_xticks(years)\nax3.set_xticklabels(years, fontsize=13);","3994d226":"query_statement = \"\"\"\n                select races.year, races.round, constructors.name, constructor_standings.points, season_winner.seasonWinner from races\n                \n                join\n                \n                    (\n                    \n                        select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                        join\n\n                            (\n\n                                select year, raceId from races\n                                where year between 2010 and 2019\n                                group by year\n                                having max(round)\n\n                            ) as last_race\n\n                                on constructor_standings.raceId = last_race.raceId\n\n                        join constructors\n                            on constructors.constructorId = constructor_standings.constructorId\n\n                        where constructor_standings.position=1\n                    \n                    ) as season_winner\n                    \n                        on races.year = season_winner.year\n                \n                join constructor_standings\n                    on constructor_standings.raceId = races.raceId\n                    \n                join constructors\n                    on constructors.constructorId = constructor_standings.constructorId\n                    \n                where constructors.name = \"Ferrari\" or constructors.name = season_winner.seasonWinner\n                    \n                order by races.year, races.round, constructor_standings.position\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","b125b177":"fig, ax = plt.subplots(figsize=(15,15), nrows=5, ncols=2)\nfig.tight_layout()\nyears = result.year.unique()\nfor ind in range(0,len(years),2):\n    ax_ind = ind\/\/2\n    result[result.year==years[ind]].groupby(\"name\")[\"points\"].plot(x=\"round\", y=\"points\", legend=True, ax=ax[ax_ind][0])\n    result[result.year==years[ind+1]].groupby(\"name\")[\"points\"].plot(x=\"round\", y=\"points\", legend=True, ax=ax[ax_ind][1])\n    \n    ax[ax_ind][0].set_title(f\"Season {years[ind]}\")\n    ax[ax_ind][1].set_title(f\"Season {years[ind+1]}\")\n    \n    ax[ax_ind][0].grid(False)\n    ax[ax_ind][1].grid(False);","3e183c44":"query_statement = \"\"\"\n                select races.year, constructors.name,\n                \n                    (\n                        case\n                            when results.position<=3 then \"Podium\"\n                            when results.position between 4 and 10 then \"In points\"\n                            else\n                                case\n                                    when status.status like \"Finish%\" or status.status like \"+%\" then \"Out of points\"\n                                    else \"DNF\"\n                                end \n                        end\n                    ) as \"resultType\"\n                \n                from results\n                \n                join races\n                    on races.raceId = results.raceId\n                    \n                join constructors\n                    on constructors.constructorId = results.constructorId\n                    \n                join status\n                    on results.statusId = status.statusId\n                    \n                join\n                \n                    (\n                    \n                        select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                        join\n\n                            (\n\n                                select year, raceId from races\n                                where year between 2010 and 2019\n                                group by year\n                                having max(round)\n\n                            ) as last_race\n\n                                on constructor_standings.raceId = last_race.raceId\n\n                        join constructors\n                            on constructors.constructorId = constructor_standings.constructorId\n\n                        where constructor_standings.position=1\n\n                    \n                    ) as season_winner\n                    \n                on season_winner.year = races.year\n                \n                where constructors.name = \"Ferrari\" or constructors.name = season_winner.seasonWinner\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","eefbc5f2":"fig, ax = plt.subplots(figsize=(17,17), nrows=5, ncols=2, sharey=True)\nfig.tight_layout(pad=5)\nyears = result.year.unique()\nfor ind in range(0,len(years),2):\n    ax_ind = ind\/\/2\n    \n    for add in range(2):\n        year = years[ind+add]\n        df = result[result.year==year].groupby(\"name\").resultType.value_counts().to_frame()\n        name = []\n        resultType = []\n        for team, cat in df.index:\n            name.append(team)\n            resultType.append(cat)\n        df.index = range(df.shape[0])\n        df.rename(columns={\"resultType\":\"Counts\"}, inplace=True)\n        df[\"name\"] = name\n        df[\"resultType\"] = resultType\n        df.pivot(index='resultType', columns='name', values='Counts').plot(kind='bar', ax=ax[ax_ind][add], rot=35, xlabel=\"\")\n        ax[ax_ind][add].set_title(f\"Season {years[ind+add]}\")\n        ax[ax_ind][add].grid(False);","2d10b465":"query_statement = \"\"\"\n                select \n                \n                    (\n\n                        case\n                            when races.year<2015 then \"2010-2014\"\n                            else \"2015-2019\"\n                        end\n\n                    ) as \"yearPartition\",\n                \n                    (\n\n                        case\n                            when status.status like \"Finish%\" or status.status like \"+%\" then \"Completed\"\n                            else status.status\n                        end\n\n                    ) as resultType\n                \n                from results\n                \n                join races\n                    on races.raceId = results.raceId\n                    \n                join constructors\n                    on constructors.constructorId = results.constructorId\n                    \n                join status\n                    on status.statusId = results.statusId\n                    \n                where races.year between 2010 and 2019 and constructors.name = \"Ferrari\"\n                \n            \"\"\"\nresult = read_sql_query(query_statement, conn)","2dc2b45c":"df = result[result.resultType!=\"Completed\"].groupby(\"yearPartition\").resultType.value_counts(sort=True, ascending=True).to_frame()\nyearPartition = []\nresultType = []\nfor year, cat in df.index:\n    yearPartition.append(year)\n    resultType.append(cat)\ndf.index = range(df.shape[0])\ndf.rename(columns={\"resultType\":\"Counts\"}, inplace=True)\ndf[\"yearPartition\"] = yearPartition\ndf[\"resultType\"] = resultType\n#df.pivot(index='resultType', columns='yearPartition', values='Counts').plot(kind='barh');\n\ndf.resultType = df.resultType.apply(lambda val: \"Accident\" if val==\"Accident\" or val==\"Collision\" or val==\"Collision damage\" else val)\n\n\naccident_dnf = [df[(df.yearPartition==\"2010-2014\") & (df.resultType==\"Accident\")].Counts.sum(),df[(df.yearPartition==\"2015-2019\") & (df.resultType==\"Accident\")].Counts.sum()]\nnon_accident_dnf = [df[(df.yearPartition==\"2010-2014\") & (df.resultType!=\"Accident\")].Counts.sum(), df[(df.yearPartition==\"2015-2019\") & (df.resultType!=\"Accident\")].Counts.sum()]\n\ndf = pd.DataFrame({\"accident_dnf\":accident_dnf, \"non_accident_dnf\":non_accident_dnf, \"years\":[\"2010-2014\", \"2015-2019\"]})\n\nfig, ax = plt.subplots(figsize=(15,5))\ndf[[\"accident_dnf\",\"non_accident_dnf\"]].plot(kind=\"bar\", stacked=True, ax=ax)\nax.set_xticks(range(len(df.years.values.tolist())))\nax.set_xticklabels(df.years.values.tolist(), rotation=45)\nax.set_title(\"Ferrari's Accident type DNFs vs Non-accident type DNFs\")\nax.grid(False);","554386d5":"query_statement = \"\"\"\n                select races.year, constructors.name team, drivers.name driver, results.position, results.points from results\n                \n                join races\n                    on races.raceId = results.raceId\n                    \n                join constructors\n                    on constructors.constructorId = results.constructorId\n                    \n                join drivers\n                    on drivers.driverId = results.driverId\n                    \n                join\n                    (\n                    \n                        select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                        join\n\n                            (\n\n                                select year, raceId from races\n                                where year between 2010 and 2019\n                                group by year\n                                having max(round)\n\n                            ) as last_race\n\n                                on constructor_standings.raceId = last_race.raceId\n\n                        join constructors\n                            on constructors.constructorId = constructor_standings.constructorId\n\n                        where constructor_standings.position=1\n\n                    \n                    ) as season_winner\n                    \n                    on season_winner.year = races.year\n                    \n                where races.year between 2010 and 2019 and (constructors.name = \"Ferrari\" or constructors.name = season_winner.seasonWinner)\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","1de9fc05":"def get_driver_contrib(ferrai, champ, year):\n    ferrari_dictionary = (result[(result.year==year) & (result.team==ferrai)].groupby(\"driver\").points.sum().div(result[(result.year==year) & (result.team==ferrai)].points.sum())).to_dict()\n    champ_dictionary = (result[(result.year==year) & (result.team==champ)].groupby(\"driver\").points.sum().div(result[(result.year==year) & (result.team==champ)].points.sum())).to_dict()\n\n    \n    ferrari_drivers = list(map(lambda val: val[0], sorted(ferrari_dictionary.items(), key=lambda val: val[1], reverse=True)))\n    champ_drivers = list(map(lambda val: val[0], sorted(champ_dictionary.items(), key=lambda val: val[1], reverse=True)))\n    drivers = ferrari_drivers+champ_drivers\n\n    ferrari_drivers_contrib = list(map(lambda val: val[1], sorted(ferrari_dictionary.items(), key=lambda val: val[1], reverse=True)))\n    champ_drivers_contrib = list(map(lambda val: val[1], sorted(champ_dictionary.items(), key=lambda val: val[1], reverse=True)))\n    contrib = ferrari_drivers_contrib+champ_drivers_contrib\n    \n    return drivers, contrib","4573b622":"fig, ax = plt.subplots(figsize=(17,17), nrows=5, ncols=2, sharey=True)\nfig.tight_layout(pad=5)\nyears = result.year.unique()\nfor ind in range(0,len(years),2):\n    ax_ind = ind\/\/2\n    \n    for add in range(2):\n\n        year = years[ind+add]\n        \n        t1, t2 = result[result.year==year].team.unique()\n        \n        if t1 == \"Ferrari\":\n            \n            drivers, contrib = get_driver_contrib(t1, t2, year)\n            \n            red_patch = mpatches.Patch(color='tab:red', label=t1)\n            blue_patch = mpatches.Patch(color='tab:blue', label=t2)\n            \n        else:\n            \n            drivers, contrib = get_driver_contrib(t2, t1, year)\n                \n            red_patch = mpatches.Patch(color='tab:red', label=t2)\n            blue_patch = mpatches.Patch(color='tab:blue', label=t1)\n            \n        ax[ax_ind][add].bar(drivers, contrib, color=['tab:red','tab:red','tab:blue','tab:blue'])\n        ax[ax_ind][add].set_title(f\"Season {years[ind+add]}\")\n        \n        ax[ax_ind][add].legend(handles=[red_patch, blue_patch])\n        ax[ax_ind][add].grid(False)\n        \n    ax[ax_ind][0].set_ylabel(\"Percentage of teams'\\ntotal points distributed\\nover drivers\");","21d4feb4":"query_statement = \"\"\"\n                select races.year, drivers.name,\n                \n                    (\n\n                        case\n                            when status.status like \"Finish%\" or status.status like \"+%\" then \"Completed\"\n                            else status.status\n                        end\n\n                    ) as resultType\n                \n                from results\n                \n                join constructors\n                    on constructors.constructorId = results.constructorId\n                    \n                join races\n                    on races.raceId = results.raceId\n                    \n                join drivers\n                    on drivers.driverId = results.driverId\n                    \n                join status\n                    on status.statusId = results.statusId\n                    \n                where constructors.name = \"Ferrari\" and (races.year between 2015 and 2019) and resultType!=\"Completed\"\n                \n                order by races.year\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","03a3ba52":"result.resultType = result.resultType.apply(lambda val: \"Accident\" if val==\"Accident\" or val==\"Collision\" or val==\"Collision damage\" else val)\nresult.resultType = result.resultType.apply(lambda val: \"Non-accidental\" if val!=\"Accident\" else val)\n\nnon_accidental = []\naccident = []\nnames = []\n\nfor driver in result.name.unique():\n    driver_dict = result[result.name==driver].resultType.value_counts().to_dict()\n    \n    try:\n        non_accidental.append(driver_dict[\"Non-accidental\"])\n    except:\n        non_accidental.append(0)\n    \n    try:\n        accident.append(driver_dict[\"Accident\"])\n    except:\n        accident.append(0)\n    \n    names.append(driver)\n    \nfig, ax = plt.subplots(figsize=(15,5))\npd.DataFrame({\"Name\":names, \"accident\":accident, \"Non-accidental\":non_accidental}).plot(x=\"Name\", kind=\"bar\", ax=ax)\nax.set_xlabel(\"\")\nax.set_ylabel(\"Frequency\", fontsize=13)\nax.set_title(\"Ferrari's DNF analysis by drivers\")\nax.grid(False);","30ab75c7":"query_statement = \"\"\"\n                    select races.year, constructors.name,\n                    \n                        (\n                        \n                            case\n                                when results.grid in (1,2) then \"first_row\"\n                                when results.grid in (3,4) then \"second_row\"\n                                when results.grid in (5,6) then \"third_row\"\n                                else \"out_of_third_row\" \n                            end\n                        ) as gridType\n                    \n                    from results\n                    \n                    join constructors\n                        on constructors.constructorId = results.constructorId\n                        \n                    join races\n                        on races.raceId = results.raceId\n                        \n                    join\n                    \n                        (\n\n                            select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                            join\n\n                                (\n\n                                    select year, raceId from races\n                                    where year between 2010 and 2019\n                                    group by year\n                                    having max(round)\n\n                                ) as last_race\n\n                                    on constructor_standings.raceId = last_race.raceId\n\n                            join constructors\n                                on constructors.constructorId = constructor_standings.constructorId\n\n                            where constructor_standings.position=1\n\n\n                        ) as season_winner\n                        \n                            on season_winner.year = races.year\n                        \n                    where (races.year between 2010 and 2019) and constructors.name in (\"Ferrari\", season_winner.seasonWinner)\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","0e858b38":"fig, ax = plt.subplots(figsize=(17,17), nrows=5, ncols=2, sharey=True)\nfig.tight_layout(pad=5)\nyears = result.year.unique()\nfor ind in range(0,len(years),2):\n    ax_ind = ind\/\/2\n    \n    for add in range(2):\n        year = years[ind+add]\n        df = result[result.year==year].groupby(\"name\").gridType.value_counts().to_frame()\n        name = []\n        gridType = []\n        for team, cat in df.index:\n            name.append(team)\n            gridType.append(cat)\n        df.index = range(df.shape[0])\n        df.rename(columns={\"gridType\":\"Counts\"}, inplace=True)\n        df[\"name\"] = name\n        df[\"gridType\"] = gridType\n        df.pivot(index='gridType', columns='name', values='Counts').plot(kind='bar', ax=ax[ax_ind][add], rot=35, xlabel=\"\")\n        ax[ax_ind][add].set_title(f\"Season {years[ind+add]}\")\n        ax[ax_ind][add].grid(False);","b81677ab":"query_statement = \"\"\"\n                    select races.year, constructors.name,\n                    \n                        sum(case\n                                when results.grid>3 and results.position<4 then 1\n                                else 0\n                            end) as podiumGain,\n            \n                        sum(case\n                                when results.grid>3 then 1\n                                else 0\n                            end) as noPodiumStart\n        \n                    from results\n                    \n                    join constructors\n                        on constructors.constructorId = results.constructorId\n                        \n                    join races\n                        on races.raceId = results.raceId\n                        \n                    join\n                    \n                        (\n\n                            select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                            join\n\n                                (\n\n                                    select year, raceId from races\n                                    where year between 2010 and 2019\n                                    group by year\n                                    having max(round)\n\n                                ) as last_race\n\n                                    on constructor_standings.raceId = last_race.raceId\n\n                            join constructors\n                                on constructors.constructorId = constructor_standings.constructorId\n\n                            where constructor_standings.position=1\n\n\n                        ) as season_winner\n                        \n                            on season_winner.year = races.year\n\n                        \n                    where (races.year between 2010 and 2019) and constructors.name in (\"Ferrari\", season_winner.seasonWinner)\n                    \n                    group by races.year, constructors.name\n            \"\"\"\nresult = read_sql_query(query_statement, conn)","7e1089cf":"result[\"percent_podiumGain\"] = result[\"podiumGain\"]\/result[\"noPodiumStart\"]","5347ae4c":"fig, [ax1, ax2] = plt.subplots(figsize=(16,9), nrows=2, ncols=1, sharex=True)\n\nresult[result.name==\"Ferrari\"][[\"year\",\"percent_podiumGain\"]].plot(kind=\"line\", x=\"year\",y=\"percent_podiumGain\", ax=ax1)\nresult[result.name==\"Ferrari\"][[\"year\",\"percent_podiumGain\"]].plot(kind=\"scatter\", x=\"year\",y=\"percent_podiumGain\", ax=ax1)\n\nresult[result.name!=\"Ferrari\"][[\"year\",\"percent_podiumGain\"]].plot(kind=\"line\", x=\"year\",y=\"percent_podiumGain\", ax=ax1)\nresult[result.name!=\"Ferrari\"][[\"year\",\"percent_podiumGain\"]].plot(kind=\"scatter\", x=\"year\",y=\"percent_podiumGain\", ax=ax1)\n\nax1.legend([\"Ferrari\",\"Champion team\"])\nax1.grid(False)\n\nresult[result.name==\"Ferrari\"][[\"year\",\"noPodiumStart\"]].plot(kind=\"line\", x=\"year\",y=\"noPodiumStart\", ax=ax2)\nresult[result.name==\"Ferrari\"][[\"year\",\"noPodiumStart\"]].plot(kind=\"scatter\", x=\"year\",y=\"noPodiumStart\", ax=ax2)\n\nresult[result.name!=\"Ferrari\"][[\"year\",\"noPodiumStart\"]].plot(kind=\"line\", x=\"year\",y=\"noPodiumStart\", ax=ax2)\nresult[result.name!=\"Ferrari\"][[\"year\",\"noPodiumStart\"]].plot(kind=\"scatter\", x=\"year\",y=\"noPodiumStart\", ax=ax2)\n\nax2.set_xticks(result.year.unique())\n\nax2.legend([\"Ferrari\",\"Champion team\"])\nax2.grid(False);","744cbd85":"query_statement = \"\"\"\n                    select races.year, races.raceId, constructors.name team, drivers.name driver, sum(lap_times.milliseconds) total_lap_time, \n                    \n                        (\n                        \n                            case\n                                when status.status not like \"Finish%\" and status.status not like \"+%\" then 1\n                                else 0\n                            end\n                        ) Retired\n                    \n                    from lap_times\n                    \n                    join results\n                        on results.raceId = lap_times.raceId and results.driverId = lap_times.driverId\n                    \n                    join constructors\n                        on constructors.constructorId = results.constructorId\n                        \n                    join drivers\n                        on drivers.driverId = results.driverId\n                        \n                    join races\n                        on races.raceId = results.raceId\n                        \n                    join status\n                        on status.statusId = results.statusId\n                        \n                    join\n                    \n                        (\n\n                            select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                            join\n\n                                (\n\n                                    select year, raceId from races\n                                    where year between 2010 and 2019\n                                    group by year\n                                    having max(round)\n\n                                ) as last_race\n\n                                    on constructor_standings.raceId = last_race.raceId\n\n                            join constructors\n                                on constructors.constructorId = constructor_standings.constructorId\n\n                            where constructor_standings.position=1\n\n\n                        ) as season_winner\n                        \n                            on season_winner.year = races.year\n                        \n                    where (races.year between 2011 and 2019) and constructors.name in (\"Ferrari\", season_winner.seasonWinner)\n                    \n                    group by races.year, races.raceId, drivers.name\n            \"\"\"\nresult_lap_time = read_sql_query(query_statement, conn)\n\nquery_statement = \"\"\"\n                    select races.year, races.raceId, constructors.name team, drivers.name driver, sum(pit_stops.milliseconds) total_pit_stop_time from pit_stops\n                    \n                    join results\n                        on results.raceId = pit_stops.raceId and results.driverId = pit_stops.driverId\n                    \n                    join constructors\n                        on constructors.constructorId = results.constructorId\n                        \n                    join drivers\n                        on drivers.driverId = results.driverId\n                        \n                    join races\n                        on races.raceId = results.raceId\n                        \n                    join\n                    \n                        (\n\n                            select last_race.year, constructors.name as seasonWinner from constructor_standings\n\n                            join\n\n                                (\n\n                                    select year, raceId from races\n                                    where year between 2010 and 2019\n                                    group by year\n                                    having max(round)\n\n                                ) as last_race\n\n                                    on constructor_standings.raceId = last_race.raceId\n\n                            join constructors\n                                on constructors.constructorId = constructor_standings.constructorId\n\n                            where constructor_standings.position=1\n\n\n                        ) as season_winner\n                        \n                            on season_winner.year = races.year\n                        \n                    where (races.year between 2011 and 2019) and constructors.name in (\"Ferrari\", season_winner.seasonWinner)\n                    \n                    group by races.year, races.raceId, drivers.name\n            \"\"\"\nresult_pit_stop_time = read_sql_query(query_statement, conn)","3e3f2536":"df = pd.merge(result_lap_time, result_pit_stop_time, on=[\"year\", \"raceId\", \"team\", \"driver\"], how=\"left\")\n\ndf[\"total_pit_stop_time\"].fillna(0, inplace=True)\n\ndf = df[df[\"Retired\"] != 1]\n\ndf[\"net_lap_time\"] = df[\"total_lap_time\"] - df[\"total_pit_stop_time\"]\n\nyears = df[\"year\"].unique()\nraceId = df[\"raceId\"].unique()\n\nyear_diff = {}\nfor year in years:\n    \n    lap_time_diff = []    \n    for race in raceId:\n        \n        df_temp = df[(df[\"year\"] == year) & (df[\"raceId\"] == race)].reset_index(drop=True)\n        n_rows = df_temp.shape[0]\n        teams = df_temp[\"team\"].unique()\n        n_teams = len(teams)\n        \n        if n_rows in [0, 1]:\n            continue\n            \n        elif n_rows == 2:\n            if n_teams == 1:\n                continue\n            else:\n                win_team_lap_time = df_temp[df_temp[\"team\"] == win_team][\"net_lap_time\"].values[0]\n                ferrari_lap_time = df_temp[df_temp[\"team\"] == \"Ferrari\"][\"net_lap_time\"].values[0]\n                \n                val = win_team_lap_time - ferrari_lap_time\n            \n        elif n_rows == 3:\n            win_team = [val for val in teams if val!=\"Ferrari\"][0]\n            win_team_cnt = df_temp[df_temp[\"team\"] == win_team].shape[0]\n            ferrari_cnt = df_temp[df_temp[\"team\"] == \"Ferrari\"].shape[0]\n            \n            if ferrari_cnt > win_team_cnt:\n                win_team_lap_time = df_temp[df_temp[\"team\"] == win_team][\"net_lap_time\"].values[0]\n                ferrari_lap_time = np.min(df_temp[df_temp[\"team\"] == \"Ferrari\"][\"net_lap_time\"].values)\n            \n            else:\n                win_team_lap_time = np.min(df_temp[df_temp[\"team\"] == win_team][\"net_lap_time\"].values)\n                ferrari_lap_time = df_temp[df_temp[\"team\"] == \"Ferrari\"][\"net_lap_time\"].values[0]\n                \n            val = win_team_lap_time - ferrari_lap_time\n            \n        else:\n            win_team = [val for val in teams if val!=\"Ferrari\"][0]\n            win_team_lap_time = np.sum(df_temp[df_temp[\"team\"] == win_team][\"net_lap_time\"].values)\n            ferrari_lap_time = np.sum(df_temp[df_temp[\"team\"] == \"Ferrari\"][\"net_lap_time\"].values)\n            \n            val = win_team_lap_time - ferrari_lap_time\n            \n        lap_time_diff.append(val\/1000)\n        \n    year_diff[year] = lap_time_diff","f9c13c62":"fig, ax0 = plt.subplots(figsize=(17,15), nrows=3, ncols=3)\nfig.tight_layout()\n\nyear_mean_diff = {}\n\nfor ind in range(0,len(years)-1,3):\n    ax_ind = ind\/\/3\n    \n    for add in range(3):\n        year = years[ind+add]\n        year_vals = year_diff[year]\n        colors=['red' if val<0 else 'lawngreen' for val in year_vals]\n        ax0[ax_ind][add].plot(year_vals, \"--o\")\n        ax0[ax_ind][add].bar(range(len(year_vals)), year_vals, color=colors)\n        ax0[ax_ind][add].set_title(f\"Season {year}\")\n        ax0[ax_ind][add].grid(False)\n        \n        year_mean_diff[year] = np.log(-1*np.mean(year_vals))\n        \n        if add!=0:\n            continue\n            \n        ax0[ax_ind][add].set_ylabel(\"Championship winning team's lap\\n times - Ferrari's lap times (in seconds\\n grouped by the teams per race)\")\n        \nfig, ax1 = plt.subplots(figsize=(20,5))\nax1.plot(list(year_mean_diff.keys()), list(year_mean_diff.values()), \"--o\")\nax1.set_ylabel(\"Negative log of average\\nmean lap time\");","ce0384ce":"The answer is because Ferrari is by far the most sucessful F1 team in terms of number of constructors championship wins.<br>\nBut, let's take a look at who are the championship winning teams in the last decade (2010-2019)","3a472be7":"The race outcomes are grouped in four different categories as follows:<br>\n<ul>\n    <li>Podium: Being able to finish a race in top three spots<\/li>\n    <li>In points: Being able to finish a race bewtween 4th and 10th spots.<\/li>\n    <li>Out of points: Being able to finish a race out of top 10 spots.<\/li>\n    <li>DNF: Did Not Finish.<\/li>\n<\/ul>\n\n<b>Key Findings:<\/b>\n<ul>\n    <li>Season 2012 is an outlier season, where the number of podiums scored by Ferrari are more than a title winning team.<\/li>\n    <li>Except in year 2012 and year 2018, in every other season the championship wining teams score more podiums than Ferrai.<\/li>\n    <li>In year 2018 Ferrari scores almost equal number of podiums as the title winning Mercedes team.<\/li>\n    <li>Again excepting years 2012 and 2018, in every other seasons over the last decade Ferrari places their cars into the points (in the top 10 rankings in a race) more than the champion teams but also fails to clinch more podiums than the champion teams.<\/li>\n    <li>Surprisingly, three out of the four seasons (2010-2013) where Red Bull team wins the title, has more DNFs than Ferrari.<\/li>\n    <li>Opposite to that, in every season since 2015 where Mercedes wins the titles, Ferrari has atleast 5 DNFs every season which are always more than Mercedes's DNFs.<\/li>\n<\/ul>\n\nThe obvious question arises as why Ferrari has more DNFs since 2015 when they are actually getting good season by season.<br><br>\n\nTo answer this part we need more data which we don't have. But we can look at what are those DNFs all about? Are there more reliability related issues or are there more car crashes?","208e4a23":"For this analyses, we use csv files provided in the dataset.<br>\n<ol>\n    <li><b>constructors.csv<\/b><\/li>\n    <li><b>constructor_standings.csv<\/b><\/li>\n    <li><b>drivers.csv<\/b><\/li>\n    <li><b>races.csv<\/b><\/li>\n    <li><b>results.csv<\/b><\/li>\n    <li><b>status.csv<\/b><\/li>\n    <li><b>lap_times.csv<\/b><\/li>\n    <li><b>pit_stops.csv<\/b><\/li>\n<\/ol>","31729167":"Before we execute above functions, we create db file and set-up a database connection with that file.","3a5daeda":"We can see, the constructor standing positions are not that bad. They certainly are not in the botton half of the pile.","6228218f":"<b>Key findings:<\/b>\n<ul>\n    <li>We can see Charles Leclerc only in one year has 3 accident type DNFs compare to Sebastian's or Kimi's 6 accident type DNF's in 5 years.<\/li>\n    <li>Also, Kimi is extremely unfortunate for retiring multiple times due to reliability issues.<\/li>\n<\/ul>\n\nNow that we have grasped some of the ideas where Ferrari loses some of their season points, we will focus on analyzing Ferrari's qualifying performances. <br><br>\nQualifying is second most important event of the race weekend. Results of a qualifying session dictate drivers grid formation for the start of the race event. <br><br> Let's look at these results.","112fc467":"# Scuderia Ferrari\n\n![Scuderia Ferrari](http:\/\/wallpapercave.com\/wp\/wp1880037.jpg)","6e83a8e2":"We can see from above plots that considering only the championship standings can be missleading. For example, in the years 2010 and 2011, Ferrari's standings are same, 3rd spot for both years, but in those years the percentage points deficit increased from just above 20% to just above 40%.\n\n<b>Other key findings:<\/b>\n<ul>\n    <li>In the year 2012, percentage points deficit one of the lowest of the decade followed by the increase in the deficit in the coming years reaching the maximum at 2014 to almost 70%.<\/li>\n    <li>The gradual improvement in the season performance after 2014 helps Ferrari to reach another one of the lowest percentage points deficit year 2018.<\/li>\n<\/ul>\n\nLet's now compare Ferrari's race performances, in terms of the points scored, with a championship winning team of the respective years.","2aa5b51c":"Above first nine bar charts highlight the differences between championship winning teams' lap times and the Ferrari's lap times from 9 different years.<br><br>\nWhereas the above line plot indicates the \"average yearly lap time differences\" between two teams over the decade.\n\n<b>Key findings:<\/b>\n<ul>\n    <li>Plots indicating year\/season 2017, 2018, and 2019 have more green bars than the previous plots.<\/li>\n    <li>In seasons such 2013, 2016, and especially in 2018 Ferrari's lap time performance in the first half of these years is better than respective championship winning teams of the years.<\/li>\n    <li>Year 2019 is exceptional where Ferrari's lap time performance is consistantly good in the later portion of the season.<\/li>\n    <li>From the negative average mean lap time plot, we can conclude, in year 2018 Ferrari's overall race performance is better than 2012 (their two best performing years of the decade).<\/li>\n<\/ul>","05d02cf9":"To analyze qualyfing performance, we group qualyfing results in four different categories.\n<ul>\n    <li><b>first_row: Qualyfing 1st or 2nd<\/b><\/li>\n    <li><b>second_row: Qualyfing 3rd or 4th<\/b><\/li>\n    <li><b>third_row: Qualyfing 5th or 6th<\/b><\/li>\n    <li><b>out_of_third_row: Qualyfing below 6th<\/b><\/li>\n<\/ul>\n\n<br>\n\n<b>Key Findings:<\/b>\n<ul>\n    <li>Except in seasons 2017, 2018, and 2019, Ferrari is no where near to the championship winning teams in terms of qualifying performances.<\/li>\n    <li>Recalling percentage points deficit plot, we know 2012 season is Ferrari's one of the best performing season of the decade. But the plots above reveal that championship winning Red Bull Racing team in the seasons 2010-2013 outperforms Ferrari in terms of clinching at least one of the top two rows for the race starts.<\/li>\n    <li>As we concluded in one of the earlier plots, the years 2013 to 2016 are absolute nighmares for Ferrari. Sticking to the same conclusion we can experience the dominance of the championship winning teams, in those years, in placing their superior, high efficient cars in front rows over the entire seasons.<\/li>\n    <li>Also, Ferrari's comback in qualifying sessions in year 2017 is appreciable.<\/li>\n    <li>Recalling the moving average plot for percentage points deficit, we know 2016 season is a tipping point for Ferrari's perforance. From that season onwards for straight three years, the average moving plot shows downward trend for percentage points deficit. This trend is also evident from the above bar charts as the qualifying performances from 2017 improve comparing to their previous years.<\/li>\n<\/ul>\n\n<br><br>\nOne element that we don't want to miss is race strategies and overall race performance such as tire management, tire selection, spontenous pit stops decisions, cars overtaking ability, etc. But unfortunately we don't have that information either. Hence, we now look at Ferrari's potential of finishing in podium for a race event when qualifying result is out of podium. ","d6197d07":"## Hello! everyone, this notebook looks at the Formula One's most iconic team's dreadful decade 2010-2019 and tries to find how things went wrong!\n\nSimilar to the previous work of mine, this notebook is divided into two parts\n<ol>\n    <li>Building sqlite database<\/li>\n    <li>Analysis<\/li>\n<\/ol>","9b4787f6":"To create sqlite database we create few helper functions:\n<ol>\n    <li><b>create_connection: This function sets-up a connection with db_file<\/b><\/li>\n    <li><b>create_table: This function creats a table based on the create_table_sql statement<\/b><\/li>\n    <li><b>insert_sql_statement: This function inserts data based on insert_data sql statement into a table named \"table_name\"<\/b><\/li>\n    <li><b>read_sql_query: This function reads sql query and returns a pandas dataframe containing the query<\/b><\/li>\n<\/ol>","0f35a50c":"The above plots tries to grasp team's ablilities to finish in the podium spots when the qualyfing result are out of 1st, 2nd or 3rd.\n\nThe first plot of the two above, line charts, show a proportion of teams' \"out of podium starts\" (starting grid position 4 or more) that actully resulted into a podium finish (race result 1, 2, or 3) at the end of the race.<br>\nThe second plot shows the number of podium starts by a team.\n\n<ul>\n    <li>The second plot undoubtedly concludes that Ferrari, never in the last decade has less \"out of podium race starts\" than the championship winning teams for respective years.<\/li>\n    <li>First plot highlights the Ferrari's best of the decade years, 2012 and 2018, where the percentages of the podium finish gains after starting 4 or more on the grid positions are above 0.3<\/li>\n<\/ul>\n\nIn the closing stages of the notebook, we like to look at shear car performance. Again because we do not have enough data about engine and car performance we can only approximate.<br><br> One key indicator of the overall car performance is lap times during the race. Hence, in the next plot, we compare Ferrari's lap times vs championship winning team's lap times for the respective years.","df3436d8":"And we can see that giants like Ferrari has not won a single title in the last 10 years.<br>\nDoes that mean Ferrari is no longer competative? Let's answer this question by looking at Ferrari's constructor championship standings in the years.","52e9a3b6":"In fact, by looking at the bar-plot above we can see 5 out of 10 times they stood at first-runner up spot.<br><br>\nBut, being at the 2nd spot for 5 times and still not winning a championship makes us curious to know why or rather how?. Hence we will now look at points scored by the team using following formula: \n\n\n<br><br>\npercentage points deficit = $\\frac{\\text{Total points scored by championship winning team of particular year - Ferrari's total points in the same year}}{\\text{Total points scored by championship winning team of particular year}}$","e5ea3dfc":"<b>Continuing from the last plot, key finding are listed below:<\/b>\n<ul>\n    <li>Coming from the last plot we have the idea of Ferrari having more DNFs in 2015-2019 period than 2010-2014 period. But from the plot above, we understand that the number of DNFs in 2015-2019 are almost twice as much as 2010-2014.<\/li>\n    <li>We can also observe a significant rise in the non accident related DNFs (such as power loss, gear box issue, etc.) in those time periods.<\/li>\n    <li>In the 2010-2014 period, non accidental DNFs proportion of 16 total DNFs is 37.5%. This is compared to 53.125% non accidental DNFs of total 32 DNFs in period 2015-2019<\/li>\n<\/ul>\n\nThe next important information to look at is the drivers' data.","213f409f":"Now, that our database is up and running, we will start second part of the notebook, Analysis.<br>\nFor numerical analysis and visualization purpose we will use numpy and matplotlib libraries.","d35603f7":"The above plots show drivers' team contributions in therms of points scored - season by season.\n<ul>\n    <li>From year 2010 to year 2015 Ferrai has lead F1 drivers in their driver line ups, Fernando Alonso (2010-2014) and Sebastian Vettel (2015). In every season of this period lead drivers score at least 60% of the team's total season tally of points.<\/li>\n    <li>But that dynamics changes from year 2016 where non-lead drivers score atleast close to 40% of the team's total points.<\/li>\n    <li>Season 2019 in an important year for Ferrari, where Sebastian Vettel (4 times driver championship winner) is no longer a lead driver.<\/li>\n    <li>Since year 2010 except year 2018 and year 2019 the Ferrari's drivers' contribution gap is always greater than those of the championship winning team's drivers' contribution gap.<\/li>\n<\/ul>\n\nNow, that we have introduced ourselves to Ferrari's driver line-up since 2010, we can get back to our previous question about accidents vs non-accidents (realiability related) DNFs, but this time grouped by Ferrari drivers.","7c0f2e64":"## First question we might ask ourselves is why we care about Ferrari?\n![Charles Ferrari](https:\/\/besthqwallpapers.com\/Uploads\/4-3-2019\/82565\/thumb2-charles-leclerc-4k-ferrari-sf90-raceway-2019-f1-cars.jpg)","6330301c":"<b>Key findings:<\/b>\n<ul>\n    <li>Observing seasons 2011, 2013, 2014, 2015, 2016 Ferrari's gap with the title winners always increases significantly and consistantly over the season races.<\/li>\n    <li>Whereas in season 2012 Ferrari is consistent with it's performance but not able to catch-up with the title wining Red Bull Racing team.<\/li>\n    <li>In season 2010, 2017, 2018 Ferrari is more competative, especially in 2018 where Ferrai is strong title contender, but is not able to hold-up to their lead and the championship fight.<\/li>\n    <li>Seasons 2013 - 2016 are actual nightmare years.<\/li>\n<\/ul>\n\nIn the next plot we like to observe Ferrari's overall race performance per season, by comparing race outcomes with a championship tittle winning team of the respective years."}}