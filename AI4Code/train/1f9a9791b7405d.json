{"cell_type":{"389950b7":"code","e3bb565f":"code","907001d9":"code","5d977887":"code","36902706":"code","a2f6bf33":"code","881f7967":"code","d5a516b4":"code","8c649eb3":"code","49759c30":"code","991cef58":"code","987b037d":"code","7be55629":"code","a5936a0f":"code","17746fd3":"code","31acaf9c":"code","1e071b25":"code","bce517b1":"code","ac4c7eed":"code","94d348e4":"code","15d69b4b":"markdown","923e68dc":"markdown","3e0dd46e":"markdown","9cc61e26":"markdown","7c2257d0":"markdown","8f7f0516":"markdown","f0712596":"markdown","7a3a03d3":"markdown","62008270":"markdown","706e06c0":"markdown","59ea11ee":"markdown","1fcdd12a":"markdown","ae54c54b":"markdown","43e856cf":"markdown","baea6c84":"markdown","c5d825c6":"markdown","82e37e08":"markdown","9d03544b":"markdown","231a92bb":"markdown","c3475380":"markdown","bcc62971":"markdown"},"source":{"389950b7":"import os\nimport warnings\nimport numpy as np \nimport pandas as pd \nimport pandas_profiling as pp\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline","e3bb565f":"train  = pd.read_csv('..\/input\/train.csv')\ntest   = pd.read_csv('..\/input\/test.csv')\nsample = pd.read_csv('..\/input\/sample_submission.csv')","907001d9":"pp.ProfileReport(train)","5d977887":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","36902706":"y     = train[['Id','SalePrice']]\ntrain = train.drop('SalePrice',axis=1)","a2f6bf33":"all_dfs = [train,test]\nall_df = pd.concat(all_dfs).reset_index(drop=True);","881f7967":"display_all(all_df.isnull().sum()\/all_df.shape[0])","d5a516b4":"all_df.drop(['Alley','PoolQC','MiscFeature','Fence','FireplaceQu','Utilities'],axis=1,inplace=True)","8c649eb3":"all_df['LotFrontage'].fillna(value=all_df['LotFrontage'].median(),inplace=True)\nall_df['MasVnrType'].fillna(value='None',inplace=True)\nall_df['MasVnrArea'].fillna(0,inplace=True)\nall_df['BsmtCond'].fillna(value='TA',inplace=True)\nall_df['BsmtExposure'].fillna(value='No',inplace=True)\nall_df['Electrical'].fillna(value='SBrkr',inplace=True)\nall_df['BsmtFinType2'].fillna(value='Unf',inplace=True)\nall_df['GarageType'].fillna(value='Attchd',inplace=True)\nall_df['GarageYrBlt'].fillna(value=all_df['GarageYrBlt'].median(),inplace=True)\nall_df['GarageFinish'].fillna(value='Unf',inplace=True)\nall_df['GarageQual'].fillna(value='TA',inplace=True)\nall_df['GarageCond'].fillna(value='TA',inplace=True)\nall_df['BsmtFinType1'].fillna(value='NO',inplace=True)\nall_df['BsmtQual'].fillna(value='No',inplace=True)\nall_df['BsmtFullBath'].fillna(value=all_df['BsmtFullBath'].median(),inplace=True)\nall_df['BsmtFinSF1'].fillna(value=all_df['BsmtFinSF1'].median(),inplace=True)\nall_df['BsmtFinSF2'].fillna(value=0,inplace=True)\nall_df['BsmtUnfSF'].fillna(value=0,inplace=True)\nall_df['TotalBsmtSF'].fillna(value=all_df['TotalBsmtSF'].median(),inplace=True)\nall_df['BsmtHalfBath'].fillna(value=0,inplace=True)\nall_df['GarageCars'].fillna(value=all_df['GarageCars'].median(),inplace=True)\nall_df['GarageArea'].fillna(value=all_df['GarageArea'].median(),inplace=True)","49759c30":"labelencoder=LabelEncoder()\n\nall_df['MSZoning']      = labelencoder.fit_transform(all_df['MSZoning'].astype(str))\nall_df['Exterior1st']   = labelencoder.fit_transform(all_df['Exterior1st'].astype(str))\nall_df['Exterior2nd']   = labelencoder.fit_transform(all_df['Exterior2nd'].astype(str))\nall_df['KitchenQual']   = labelencoder.fit_transform(all_df['KitchenQual'].astype(str))\nall_df['Functional']    = labelencoder.fit_transform(all_df['Functional'].astype(str))\nall_df['SaleType']      = labelencoder.fit_transform(all_df['SaleType'].astype(str))\nall_df['Street']        = labelencoder.fit_transform(all_df['Street'])   \nall_df['LotShape']      = labelencoder.fit_transform(all_df['LotShape'])   \nall_df['LandContour']   = labelencoder.fit_transform(all_df['LandContour'])   \nall_df['LotConfig']     = labelencoder.fit_transform(all_df['LotConfig'])   \nall_df['LandSlope']     = labelencoder.fit_transform(all_df['LandSlope'])   \nall_df['Neighborhood']  = labelencoder.fit_transform(all_df['Neighborhood'])   \nall_df['Condition1']    = labelencoder.fit_transform(all_df['Condition1'])   \nall_df['Condition2']    = labelencoder.fit_transform(all_df['Condition2'])   \nall_df['BldgType']      = labelencoder.fit_transform(all_df['BldgType'])   \nall_df['HouseStyle']    = labelencoder.fit_transform(all_df['HouseStyle'])   \nall_df['RoofStyle']     = labelencoder.fit_transform(all_df['RoofStyle'])   \nall_df['RoofMatl']      = labelencoder.fit_transform(all_df['RoofMatl'])    \nall_df['MasVnrType']    = labelencoder.fit_transform(all_df['MasVnrType'])   \nall_df['ExterQual']     = labelencoder.fit_transform(all_df['ExterQual'])  \nall_df['ExterCond']     = labelencoder.fit_transform(all_df['ExterCond'])   \nall_df['Foundation']    = labelencoder.fit_transform(all_df['Foundation'])   \nall_df['BsmtQual']      = labelencoder.fit_transform(all_df['BsmtQual'])   \nall_df['BsmtCond']      = labelencoder.fit_transform(all_df['BsmtCond'])   \nall_df['BsmtExposure']  = labelencoder.fit_transform(all_df['BsmtExposure'])   \nall_df['BsmtFinType1']  = labelencoder.fit_transform(all_df['BsmtFinType1'])   \nall_df['BsmtFinType2']  = labelencoder.fit_transform(all_df['BsmtFinType2'])   \nall_df['Heating']       = labelencoder.fit_transform(all_df['Heating'])   \nall_df['HeatingQC']     = labelencoder.fit_transform(all_df['HeatingQC'])   \nall_df['CentralAir']    = labelencoder.fit_transform(all_df['CentralAir'])   \nall_df['Electrical']    = labelencoder.fit_transform(all_df['Electrical'])    \nall_df['GarageType']    = labelencoder.fit_transform(all_df['GarageType'])  \nall_df['GarageFinish']  = labelencoder.fit_transform(all_df['GarageFinish'])   \nall_df['GarageQual']    = labelencoder.fit_transform(all_df['GarageQual'])  \nall_df['GarageCond']    = labelencoder.fit_transform(all_df['GarageCond'])   \nall_df['PavedDrive']    = labelencoder.fit_transform(all_df['PavedDrive'])  \nall_df['SaleCondition'] = labelencoder.fit_transform(all_df['SaleCondition'])  ","991cef58":"Scaler       = StandardScaler()\nall_scaled   = pd.DataFrame(Scaler.fit_transform(all_df))\ntrain_scaled = pd.DataFrame(all_scaled[:1460])\ntest_scaled  = pd.DataFrame(all_scaled[1460:2920])","987b037d":"X = train_scaled\nX_train, X_test, y_train, y_test = train_test_split(X, y['SalePrice'], test_size=0.1, random_state=42)","7be55629":"from xgboost import XGBRegressor\nXGB = XGBRegressor(max_depth=2,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nXGB.fit(X_train,y_train)","a5936a0f":"from lightgbm import LGBMRegressor\nLGBM = LGBMRegressor(n_estimators = 1000)\nLGBM.fit(X_train,y_train)","17746fd3":"print (\"Training score:\",XGB.score(X_train,y_train), \"Test Score:\",XGB.score(X_test,y_test))\nprint (\"Training score:\",LGBM.score(X_train,y_train),\"Test Score:\",LGBM.score(X_test,y_test))","31acaf9c":"y_pred_xgb  = pd.DataFrame( XGB.predict(test_scaled))\ny_pred_lgbm = pd.DataFrame(LGBM.predict(test_scaled))\n\ny_pred=pd.DataFrame()\ny_pred['SalePrice'] = 0.5 * y_pred_xgb[0] + 0.5 * y_pred_lgbm[0]\ny_pred['Id'] = test['Id']","1e071b25":"y_pred.to_csv('house_price_blend.csv',index=False)","bce517b1":"from yellowbrick.regressor import ResidualsPlot\nfrom yellowbrick.regressor import PredictionError\nfrom yellowbrick.model_selection import ValidationCurve","ac4c7eed":"visualizer = ResidualsPlot(XGB)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)\nvisualizer","94d348e4":"model = Lasso(alpha=10)\nvisualizer = PredictionError(model)\n\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)\n                 \n","15d69b4b":"# A very simple XGB Regression Example for Beginners !\n\n\n\n![](https:\/\/marsrealty.co.nz\/wp-content\/uploads\/2018\/10\/sold-1000x500.jpeg)","923e68dc":"# Getting the data","3e0dd46e":"# let's fill the Na with specific values!","9cc61e26":"# XGBoost","7c2257d0":"# train - test split !","8f7f0516":"# Imports","f0712596":"### I'm a big fan of Yellowbricks: Machine Learning Visualization library (especially their regression visualisation tools)\n\n### You can find additional information through its website: https:\/\/www.scikit-yb.org\/en\/latest\/\n\n![](https:\/\/www.scikit-yb.org\/en\/latest\/_images\/banner.png)","7a3a03d3":"### Start here if...\n\nYou have some experience with R or Python and machine learning basics. Both competitions used here are perfect for data science students who have completed an online course in machine learning and are looking to expand their skill set before trying a featured competition. \n\n### Competition Description\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png)\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\n### Practice Skills\n\n- Creative feature engineering \n- Advanced regression techniques like random forest and gradient boosting","62008270":"## thanks a lot for your time! I'm trying to keep this notebook in a neat way to help the beginners! Though I'm planning to add some simple EDA blocks as well.","706e06c0":"At the end of the notebook, some intro on yellowbricks!","59ea11ee":"# need to scale in case we want to use linear models","1fcdd12a":"# gotta encode all the object types! ","ae54c54b":"# blend 50% + 50%","43e856cf":"if you're complete beginner, than I suggest you to check out the documentations and a nice intro about boosting algorithms first\n\n- https:\/\/xgboost.readthedocs.io\/en\/latest\/\n- https:\/\/lightgbm.readthedocs.io\/en\/latest\/\n- https:\/\/www.analyticsvidhya.com\/blog\/2015\/11\/quick-introduction-boosting-algorithms-machine-learning\/\n\nlet me know if you need help ","baea6c84":"# don't really know what to do with these!","c5d825c6":"# train and target","82e37e08":"# Light GBM","9d03544b":"# finally the submission","231a92bb":"Please upvote if you like it!","c3475380":"# our scores","bcc62971":"# Some Regression Visuals to help us understand the current state!"}}