{"cell_type":{"cabf00d4":"code","befea5d7":"code","9e786224":"code","2a6f923a":"code","721eb16d":"code","93e5b702":"code","02b356ff":"code","18951ac1":"code","45eb08f0":"code","71157a44":"code","c694250c":"code","9b0e322a":"code","81841f33":"code","fbd1e519":"code","0cfbb0fd":"code","69450337":"code","9908f847":"code","2ea46c93":"code","1e09870c":"code","39c7b3a3":"code","441bd4d9":"code","33db8e5e":"code","17f25795":"code","9337a812":"code","cdcb4dcb":"code","fd9d1dcd":"code","c20c1f9f":"code","1cbaa5f4":"code","7d248d3b":"code","2e5dc41e":"code","fbd6e58a":"code","84a8a425":"code","4ed62aab":"code","3b684ac1":"code","bd04f697":"code","eb58fd15":"code","1ff1638b":"code","78a2d997":"code","87b987da":"code","2c257966":"code","38d51e25":"code","63a76604":"code","7c5085b2":"code","356103e0":"code","26571019":"code","4382dca7":"code","35058492":"code","41c2ddfc":"code","beebc3e7":"code","0c889281":"code","28385b1a":"code","b077c152":"code","71f8d4e5":"code","9095d4b0":"code","7ee41c94":"code","129ad313":"code","1c30b359":"code","238940f2":"code","5c38aa79":"code","2a456508":"code","63711dc8":"code","173aaa0e":"code","cc890bdb":"code","c5526930":"code","021251f9":"code","1e3f5c9e":"code","e2bddfdd":"code","d040be08":"code","f9a9ac32":"markdown","7e4fc2fc":"markdown","3165f65c":"markdown","61465fc2":"markdown","691fceb0":"markdown","5f046750":"markdown","d904e8ed":"markdown","6d60261a":"markdown","57e5b509":"markdown","9e5ea698":"markdown","4ecb9984":"markdown","a2e1ad07":"markdown","ff33f8b4":"markdown","50f796be":"markdown","7cbfe8ec":"markdown"},"source":{"cabf00d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","befea5d7":"# Imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom scipy.stats import skew\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n# Definitions\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n%matplotlib inline\n#njobs = 4\n","9e786224":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","2a6f923a":"train_ID = train_df['Id']\ntest_ID = test_df['Id']","721eb16d":"train_df.head()","93e5b702":"train_df.info()","02b356ff":"train_df.describe()","18951ac1":"train_df.hist(bins=50,figsize=(30,20) )\nplt.show()","45eb08f0":"fig,ax = plt.subplots()\nax.scatter(x = train_df['GrLivArea'], y = train_df['SalePrice'])\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","71157a44":"#delaating outliers\n\ntrain_df = train_df.drop(train_df[(train_df['GrLivArea']>4000) & (train_df['SalePrice']<300000)].index)\n","c694250c":"#Check the graphic again\nfig, ax = plt.subplots()\nax.scatter(train_df['GrLivArea'], train_df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","9b0e322a":"import seaborn as sns\nfrom scipy import stats\n\nfrom scipy.stats import norm\n\nsns.distplot(train_df['SalePrice'] , fit=norm);\n\n(mu, sigma) = norm.fit(train_df['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt)\nplt.show()","81841f33":"train_df[\"SalePrice\"] = np.log1p(train_df[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train_df['SalePrice'] , fit=norm);\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train_df['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt)\nplt.show()\nmu = 12.02 and sigma ","fbd1e519":"ntrain = train_df.shape[0]\nntest = test_df.shape[0]","0cfbb0fd":"y_train = train_df.SalePrice.values","69450337":"y_train.shape","9908f847":"train_df.shape","2ea46c93":"train_df.drop(\"Id\", axis = 1, inplace = True)\ntest_df.drop(\"Id\", axis = 1, inplace = True)","1e09870c":"#concat the whole data\ndata = pd.concat((train_df,test_df)).reset_index(drop=True)\ndata.drop(['SalePrice'], axis=1, inplace=True)","39c7b3a3":"data.shape","441bd4d9":"data.info()","33db8e5e":"all_data_na = (data.isnull().sum() \/ len(data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","17f25795":"fig,ax = plt.subplots(figsize=(15,13))\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xticks(rotation='90')\n\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","9337a812":"#correlation map\ncorr_map = train_df.corr()\nplt.subplots(figsize =(12,10))\n\nsns.heatmap(corr_map,vmax=0.9, square=True)","cdcb4dcb":"corr_map['GrLivArea'].sort_values(ascending=False)","fd9d1dcd":"data[\"PoolQC\"] =data[\"PoolQC\"].fillna(\"None\")\n","c20c1f9f":"data[\"MiscFeature\"] = data[\"MiscFeature\"].fillna(\"None\")\ndata[\"Alley\"] = data[\"Alley\"].fillna(\"None\")\ndata[\"Fence\"] = data[\"Fence\"].fillna(\"None\")\ndata[\"FireplaceQu\"] = data[\"FireplaceQu\"].fillna(\"None\")\n","1cbaa5f4":"\ndata[\"LotFrontage\"] = data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","7d248d3b":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    data[col] = data[col].fillna('None')","2e5dc41e":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    data[col] = data[col].fillna(0)","fbd6e58a":"\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    data[col] = data[col].fillna(0)\n    \ndata[\"MasVnrType\"] = data[\"MasVnrType\"].fillna(\"None\")\ndata[\"MasVnrArea\"] = data[\"MasVnrArea\"].fillna(0)\n\ndata['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata = data.drop(['Utilities'], axis=1)\n\ndata[\"Functional\"] = data[\"Functional\"].fillna(\"Typ\")\n\ndata['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\n\ndata['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])\n\ndata['MSSubClass'] = data['MSSubClass'].fillna(\"None\")","84a8a425":"all_data_na = (data.isnull().sum() \/ len(data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","4ed62aab":"all_data = data","3b684ac1":"all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","bd04f697":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","eb58fd15":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","1ff1638b":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","78a2d997":"numeric_feats.shape","87b987da":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","2c257966":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","38d51e25":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","63a76604":"len(all_data.values)","7c5085b2":"len(train.values)","356103e0":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","26571019":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","4382dca7":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","35058492":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","41c2ddfc":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","beebc3e7":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","0c889281":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","28385b1a":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","b077c152":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","71f8d4e5":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","9095d4b0":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","7ee41c94":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","129ad313":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","1c30b359":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)    ","238940f2":"averaged_models  = AveragingModels(models = (ENet, GBoost, KRR, lasso))","5c38aa79":"score = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","2a456508":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","63711dc8":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","173aaa0e":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","cc890bdb":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","c5526930":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","021251f9":"#LightGBM\n\nmodel_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","1e3f5c9e":"\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","e2bddfdd":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","d040be08":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","f9a9ac32":"ratio of NAN","7e4fc2fc":"**the data are skewed to the right **\n","3165f65c":"adding new feature","61465fc2":"there are so many null in the values ","691fceb0":"skewness in Categorical data ","5f046750":"Final training ","d904e8ed":"Stacking some models ","6d60261a":"adding meta models ","57e5b509":"Analyzing the data","9e5ea698":"Averaged base models score","4ecb9984":"\u2022 Get rid of the corresponding districts.\n\u2022 Get rid of the whole attribute.\n\u2022 Set the values to some value (zero, the mean, the median, etc.).","a2e1ad07":"missing data","ff33f8b4":"**outliers****","50f796be":" dealing with missing values","7cbfe8ec":"filling with Median"}}