{"cell_type":{"180ff5d3":"code","46a60ee5":"code","4bbab3b9":"code","09c57ab9":"code","875e2cd7":"code","d2d02cb7":"code","2e7fc504":"code","9e012da8":"code","9d6932e9":"code","030da10a":"code","79b08ffb":"code","3cfa9633":"code","229c8390":"code","2648a729":"code","c81f6529":"code","877576bc":"code","927885b7":"code","d2c0ce4a":"code","e2026dad":"code","55edd3bc":"code","01f34ada":"code","18d7a095":"code","51d55540":"code","486088dd":"code","82874812":"code","10dddbe3":"code","616865f3":"code","585264bc":"code","7c293dbb":"code","35a5ab90":"code","c3e14bfd":"code","80f25bd1":"code","89d4ad17":"code","ef51b6ff":"code","b41f625c":"code","93d2738d":"code","1f4bb598":"code","856fa27c":"code","eeed41a4":"code","60b7b92f":"code","a7522577":"code","963799db":"code","fdcc4e08":"code","e397126c":"code","bfe84d6d":"code","92defb66":"code","dccae432":"code","81680a8c":"code","015ba519":"code","90b89261":"code","6ce873b9":"code","22aa9b2b":"code","c8107d5c":"code","1bb226f5":"code","fb2d180b":"code","3a5d2e53":"code","45fe7999":"code","cce5f1b6":"code","db248f6e":"code","33121495":"code","cd39eb84":"code","fc4a149c":"code","e1e914b3":"code","1c408931":"code","036c510b":"code","3ffd5b37":"code","4058b377":"code","acfdc2fb":"code","d15f999e":"code","ffe5e706":"code","98a94bc1":"code","749d4c05":"code","a5818997":"code","12847ac8":"code","67bc3166":"code","5da24151":"code","a8336c25":"code","c974daa9":"code","a6071ab6":"code","d4373142":"code","af215336":"code","192eab5a":"code","9243029d":"code","3b38d380":"code","c38bc4a6":"code","46b0a611":"code","e73d74b0":"code","e4827ccf":"code","87311e8b":"code","02a3be94":"code","fad57499":"code","7ab0876f":"code","7725f44a":"code","68417123":"code","4a677f79":"code","bb295cb4":"code","f974d97b":"code","7ff4fd27":"code","113d5306":"code","8ebd9e07":"code","76ad44ae":"code","2ae7513a":"code","6e80c312":"code","544daf7b":"code","736537a7":"code","0be6d41c":"code","ddf95f11":"code","71cdd318":"code","c363f9b2":"code","7d8b6259":"code","d1c2062a":"code","afee65b0":"code","97d32319":"code","1f6922e3":"code","db87c120":"code","90f614ca":"code","b37849de":"code","56bd66ad":"code","bd399650":"code","b3f1b50c":"code","568a5d31":"code","1b6620fb":"code","418dcd1e":"code","5cc4d548":"code","51913625":"code","00c65328":"code","b177d6ba":"code","81247b7c":"code","3b5d8bb6":"code","846a7e0b":"code","d4f768d4":"code","f4303480":"code","d92d8c91":"code","c10e998d":"code","48f0370b":"code","e43f8a25":"code","c0fbfb5b":"code","f62e9269":"code","59fafc90":"code","81960b97":"code","b7b3f8ff":"code","cf5a34d0":"markdown","357cf2a3":"markdown","d2a205d2":"markdown","4c2a2458":"markdown","a6775217":"markdown","8e3bfa82":"markdown","85006a23":"markdown","8dada898":"markdown","faaa36f8":"markdown","153c4a9b":"markdown"},"source":{"180ff5d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\ninfile = \"..\/input\/\"\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew","46a60ee5":"train = pd.read_csv(infile+\"train.csv\")\ntest = pd.read_csv(infile+\"test.csv\")\nsubmit = pd.read_csv(infile+\"sample_submission.csv\")","4bbab3b9":"train.head(5)","09c57ab9":"test.head(5)","875e2cd7":"print(\"train \uc14b\uc758 (\ud589,\uc5f4) : {}\".format(train.shape))\nprint(\"test \uc14b\uc758 (\ud589,\uc5f4) : {}\".format(test.shape))\n\ntrain = train.drop(['id'],axis=1)\ntest = test.drop(['id'],axis=1)\n\nprint(\"\uc218\uc815\ub41c train \uc14b\uc758 (\ud589,\uc5f4) : {}\".format(train.shape))\nprint(\"\uc218\uc815\ub41c test \uc14b\uc758 (\ud589,\uc5f4) : {}\".format(test.shape))","d2d02cb7":"train.corr(method='pearson')","2e7fc504":"plt.figure(figsize = (15,10))\nsns.heatmap(train.corr(), annot=True, cmap='Blues',fmt='.2f',linewidths=.5)","9e012da8":"#corr \uac12\uc774 \ub192\uc740 10\uac1c\uc758 \ub370\uc774\ud130\ub97c heatmap \ud558\ub294 \uacfc\uc815\n\n#saleprice correlation matrix\ncorrmat = train.corr()\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'price')['price'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f',cmap='Blues', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","9d6932e9":"train.info()","030da10a":"sns.distplot(train['price'],fit=norm)","79b08ffb":"(mu, sigma) = norm.fit(train['price'])\nprint(\"\\n mu = {:.2f} and sigma = {:.2f}\".format(mu,sigma))","3cfa9633":"print('\uc9d1\uac00\uaca9\uc758 \uc65c\ub3c4 :',train.price.skew())\nprint('\uc9d1\uac00\uaca9\uc758 \ucca8\ub3c4 :',train.price.kurtosis())\n#\uc65c\ub3c4\uac00 \uc591\uc218\uc77c \uc218\ub85d \uc624\ub978\ucabd\uc73c\ub85c \uaf2c\ub9ac\uac00 \uae38\ub2e4.\n#\ucca8\ub3c4\uac00 3\ubcf4\ub2e4 \ud074 \uc218\ub85d \ubfb0\uc871\ud55c \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. 3\uc5d0 \uac00\uae4c\uc6b0\uba74 \uc815\uaddc\ud654\ub428","229c8390":"fig = plt.figure()\nres = stats.probplot(train['price'], plot= plt)\nplt.show()","2648a729":"train['price'] = np.log1p(train['price'])\n\nsns.distplot(train['price'],fit=norm)\n\n(mu, sigma) = norm.fit(train['price'])\nprint(\"\\n mu = {:.2f} and sigma = {:.2f}\".format(mu,sigma))\n\nfig = plt.figure()\nres = stats.probplot(train['price'],plot=plt)\nplt.show()","c81f6529":"print('\uc9d1\uac00\uaca9\uc758 \uc65c\ub3c4 :',train.price.skew())\nprint('\uc9d1\uac00\uaca9\uc758 \ucca8\ub3c4 :',train.price.kurtosis())","877576bc":"sns.boxplot(train.grade, train.price)","927885b7":"train[train.grade==3]","d2c0ce4a":"train[(train.grade==11) & (train.price>15.5)]","e2026dad":"train[(train.grade==8) & (train.price>14.7)]","55edd3bc":"train[(train.grade==7) & (train.price>14.5)]","01f34ada":"train[(train.grade==7) & (train.price<11.55)]","18d7a095":"train = train.drop([2302,4123,2775,7173,12346,878,2372,8756],axis=0)","51d55540":"sns.boxplot(train.grade, train.price)","486088dd":"sns.regplot(train.sqft_living, train.price)","82874812":"train[train.sqft_living>13000]","10dddbe3":"train = train.drop([8912],axis=0)","616865f3":"sns.regplot(train.sqft_living, train.price)","585264bc":"sns.boxplot(train.bedrooms, train.price)","7c293dbb":"ntrain = train.shape[0]\nntest = train.shape[0]\ny_train = train['price']","35a5ab90":"train = train.drop(['price'],axis=1)","c3e14bfd":"df = pd.concat([train, test],axis=0)","80f25bd1":"df.info()","89d4ad17":"df.date.head()","ef51b6ff":"year = df.date.apply(lambda x:x[0:4]).astype(int)\nmonth = df.date.apply(lambda x:x[4:6]).astype(int)\nday = df.date.apply(lambda x:x[6:8]).astype(int)","b41f625c":"df['year'] = year\ndf['month'] = month\ndf['day'] = day","93d2738d":"df = df.drop(['date'],axis=1)","1f4bb598":"df.describe()","856fa27c":"print(\"zipcode\uc758 \uc778\ub371\uc2a4 \uac1c\uc218 : {}\".format(len(df.zipcode.value_counts().index))) #zipcode \uc778\ub371\uc2a4\uc758 \uac1c\uc218\nprint(\"zipcode\uc758 \uc778\ub371\uc2a4 \uc911 \ucd5c\uc19f\uac12 : {}\".format(df.zipcode.value_counts().min())) #zipcode \uc778\ub371\uc2a4 \uc911 \ucd5c\uc18c\uac12\nprint(\"zipcode\uc758 \uc778\ub371\uc2a4 \uc911 \ucd5c\ub313\uac12 : {}\".format(df.zipcode.value_counts().max())) #zipcode \uc778\ub371\uc2a4 \uc911 \ucd5c\ub300\uac12","eeed41a4":"from sklearn.preprocessing import LabelEncoder","60b7b92f":"le = LabelEncoder()\nle.fit(df.zipcode)\n\ndf['zipcode'] = le.transform(df.zipcode)\ndf.zipcode.value_counts()","a7522577":"plt.figure(figsize = (10,10))\nsns.boxplot(x=df.zipcode, y=df.sqft_living)","963799db":"df.columns","fdcc4e08":"sns.countplot(df.bedrooms)","e397126c":"sns.countplot(df.bathrooms)","bfe84d6d":"df['room_sum'] = df.bedrooms + df.bathrooms","92defb66":"sns.countplot(df.room_sum)","dccae432":"print(\"\uc7ac\uac74\ucd95\ud55c \uac74\ubb3c \uac1c\uc218 :\",df[df.sqft_living == df.sqft_living15].shape[0])\nprint(\"\uc7ac\uac74\ucd95\ud558\uc9c0 \uc54a\uc740 \uac74\ubb3c \uac1c\uc218 :\",df[df.sqft_living != df.sqft_living15].shape[0])","81680a8c":"df.room_sum = df.room_sum+1 #0\uac12\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub098\ub220\uc904\ub54c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ub9c9\uc544\uc8fc\uae30 \uc704\ud574 1\uc744 \ub354\ud55c\ub2e4.","015ba519":"sns.countplot(df.room_sum)","90b89261":"df = df.reset_index(drop=True) #concat\uc73c\ub85c \uc778\ud574 \uc778\ub371\uc2a4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud568","6ce873b9":"row = df.shape[0]\nsqft_per_rooms = []\nfor i in range(row):\n    if df.sqft_living[i] == df.sqft_living15[i]:\n        sqft_per_rooms.append(df.sqft_living[i]\/df.room_sum[i])\n    else:\n        sqft_per_rooms.append(df.sqft_living15[i]\/df.room_sum[i])\ndf['sqft_per_rooms'] = sqft_per_rooms","22aa9b2b":"sns.distplot(df.sqft_per_rooms,fit=norm)","c8107d5c":"print(\"\uc7ac\uac74\ucd95 \ud558\uc9c0 \uc54a\uc740 \uc9d1\uc758 \uac2f\uc218 :\",df[df.yr_renovated==0].shape[0])\nprint(\"\uc7ac\uac74\ucd95 \ub41c \uc9d1\uc758 \uac2f\uc218 :\",df[df.yr_renovated>0].shape[0])","1bb226f5":"during_yr = []\nfor i in range(row):\n    if df.yr_renovated[i]==0:\n        during_yr.append(df.year[i]-df.yr_built[i])\n    else:\n        during_yr.append(df.year[i]-df.yr_renovated[i])\n\ndf['during_yr'] = during_yr","fb2d180b":"sns.distplot(df.during_yr,fit=norm)","3a5d2e53":"df.floors.value_counts()","45fe7999":"sqft_per_floor = []\nfor i in range(row):\n    if df.sqft_living[i]==df.sqft_living15[i]:\n        sqft_per_floor.append(df.sqft_living[i]\/df.floors[i])\n    else:\n        sqft_per_floor.append(df.sqft_living15[i]\/df.floors[i])\n\ndf['sqft_per_floor'] = sqft_per_floor","cce5f1b6":"sns.distplot(df.sqft_per_floor,fit=norm)","db248f6e":"df['sqft_total'] = df['sqft_above'] + df['sqft_basement']","33121495":"df['during_yr'] = df['during_yr']+1","cd39eb84":"df.columns","fc4a149c":"reno =[]\nfor i in range(df.shape[0]):\n    if df.yr_renovated[i]>0:\n        reno.append(1)\n    else:\n        reno.append(0)","e1e914b3":"df['renovated'] = reno","1c408931":"df.renovated.value_counts()","036c510b":"basement =[]\nfor i in range(df.shape[0]):\n    if df.sqft_basement[i]>0:\n        basement.append(1)\n    else:\n        basement.append(0)","3ffd5b37":"df['basement'] = basement","4058b377":"df.basement.value_counts()","acfdc2fb":"use_col = ['sqft_living', 'sqft_lot','sqft_above','sqft_basement','sqft_living15','sqft_lot15','sqft_total','sqft_per_rooms','sqft_per_floor','during_yr']","d15f999e":"skewed_feats = df[use_col].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({\"Skew\":skewed_feats})\nskewness\n\n#skewness\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \uc124\uba85\n#\ub370\uc774\ud130\uc758 \ubd84\ud3ec\uac00 \ud55c\ucabd\uc73c\ub85c \uce58\uc6b0\uce5c \uc815\ub3c4\ub97c \uc758\ubbf8\ud55c\ub2e4.\n#\uc67c\ucabd\uc73c\ub85c \uae34 \uaf2c\ub9ac\ub97c \uac00\uc9c8 \ub54c\ub294 skewness\uac00 \uc74c\uc218, \uc624\ub978\ucabd\uc73c\ub85c \uae34 \uaf2c\ub9ac\ub97c \uac00\uc9c8 \ub54c\ub294 skewness \uc591\uc218.","ffe5e706":"skewness = skewness[abs(skewness) > 0.75]\n#\uc808\ub313\uac12\uc774 0.75\ubcf4\ub2e4 \ub192\uc740 skewness\ub97c \uac00\uc9c0\ub294 \ud589\uc744 Box Cox transform \ud574\uc900\ub2e4\nprint(\"\ud589 \uac1c\uc218 :\",skewness.shape[0])","98a94bc1":"#Box Cox transform\uc744 \ud574\uc90c\uc73c\ub85c\uc368 \ud55c\ucabd\uc73c\ub85c \uae38\uc5b4\uc9c4 \uaf2c\ub9ac\uc758 \ubaa8\uc591\uc744 \uc7a1\uc544\uc904 \uc218 \uc788\ub2e4.\n#\ud3b8\ud5a5\uc744 \uc7a1\uc544\uc8fc\ub294\ub370 \ub3c4\uc6c0\uc774\ub41c\ub2e4.\n#np.log1p\ub97c \uc0ac\uc6a9\ud574\ub3c4 \ube44\uc2b7\ud55c \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    df[feat] = boxcox1p(df[feat],lam)","749d4c05":"fig, ax = plt.subplots(3,4,figsize=(20,20))\nn=0\nfor r in range(3):\n    for c in range(4):\n        sns.distplot(df[use_col[n]],fit=norm,ax=ax[r][c])\n        ax[r][c].set_title(use_col[n],fontsize=20)\n        n+=1\n        if n==len(use_col):\n            break","a5818997":"train = df.iloc[:ntrain,:]\ntest = df.iloc[ntrain:,:]","12847ac8":"train['per_price'] = y_train \/ train['sqft_total']","67bc3166":"zipcode_price = train.groupby(['zipcode'])['per_price'].agg({'mean','var'})","5da24151":"train = pd.merge(train,zipcode_price,how='left',on='zipcode')\ntest = pd.merge(test,zipcode_price,how='left',on='zipcode')","a8336c25":"train.head(5)","c974daa9":"test.head(5)","a6071ab6":"for df in [train,test]:\n    df['zipcode_mean'] = df['mean'] * df['sqft_total']\n    df['zipcode_var'] = df['var'] * df['sqft_total']\n    del df['mean']\n    del df['var']","d4373142":"print(train.columns)\nprint(test.columns)","af215336":"train = train.drop(['per_price'],axis=1)","192eab5a":"fig, ax = plt.subplots(1,1,figsize=(15,8))\nsns.boxplot(train.day, y_train)","9243029d":"fig, ax = plt.subplots(1,1,figsize=(15,8))\nsns.boxplot(train.month, y_train)","3b38d380":"sns.countplot(train[train.year==2014].month)","c38bc4a6":"sns.countplot(train[train.year==2015].month)","46b0a611":"sns.countplot(test[test.year==2015].month)","e73d74b0":"fig, ax = plt.subplots(1,1,figsize=(15,8))\nsns.boxplot(train.year, y_train)","e4827ccf":"sns.countplot(train.year)","87311e8b":"fig, ax = plt.subplots(1,1,figsize=(15,8))\nsns.boxplot(train.condition, y_train)","02a3be94":"fig, ax = plt.subplots(1,1,figsize=(20,8))\nsns.boxplot(train.during_yr, y_train)","fad57499":"from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge, LassoLarsIC, LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score, make_scorer\nimport xgboost as xgb\nimport lightgbm as lgb","7ab0876f":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","7725f44a":"lasso = make_pipeline(RobustScaler(), Lasso(alpha=0.0005, random_state=1))\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9,random_state=3))\nKRR = KernelRidge(alpha=0.6,kernel='polynomial', degree=2, coef0=2.5)\n","68417123":"from time import time\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV, ShuffleSplit","4a677f79":"'''\nstart = time()\n\nrf_regressor = RandomForestRegressor(random_state=42)\ncv_sets = ShuffleSplit(random_state=4)\nparameters = {'n_estimators':[100,120,140],\n             'min_samples_leaf':[1,2,3],\n             'max_depth':[10,15,20]}\n\nscorer = make_scorer(r2_score)\nn_iter_search = 10\ngrid_obj = RandomizedSearchCV(rf_regressor,parameters,\n                             n_iter = n_iter_search,\n                             scoring = scorer,\n                             cv = cv_sets,\n                             random_state = 99)\n\ngrid_fit = grid_obj.fit(train, y_train)\nrf_opt = grid_fit.best_estimator_\n\nend = time()\n\nrf_time = (end-start)\/60\nprint(\"\uac78\ub9b0 \uc2dc\uac04 :\",rf_time)\n'''","bb295cb4":"#grid_fit.best_params_","f974d97b":"RFforest = RandomForestRegressor(n_estimators = 140,\n                                min_samples_leaf = 2,\n                                max_depth = 20)","7ff4fd27":"LinearR = LinearRegression()","113d5306":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","8ebd9e07":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=4, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n","76ad44ae":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","2ae7513a":"score = rmsle_cv(LinearR)\nprint(\"\\nLinear Regression {:.4f} ({:.4f})\".format(score.mean(), score.std()))","6e80c312":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","544daf7b":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","736537a7":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","0be6d41c":"score = rmsle_cv(RFforest)\nprint(\"Random Forest score: {:.4f} ({:.4f})\\n\".format(score.mean(),score.std()))","ddf95f11":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","71cdd318":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","c363f9b2":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","7d8b6259":"'''class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   '''","d1c2062a":"'''averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))'''","afee65b0":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","97d32319":"from mlxtend.regressor import StackingCVRegressor","1f6922e3":"#stack_gen = StackingCVRegressor(regressors = (ENet,GBoost,KRR),meta_regressor=lasso,\n#                               use_features_in_secondary=True)","db87c120":"stack_lass = StackingCVRegressor(regressors = (ENet,GBoost,KRR,RFforest,model_xgb,model_lgb),meta_regressor=lasso,\n                                 use_features_in_secondary=True)","90f614ca":"stack_org = StackingCVRegressor(regressors = (ENet,GBoost,KRR,model_xgb,model_lgb),meta_regressor=lasso,\n                                 use_features_in_secondary=True)","b37849de":"stack_lin = StackingCVRegressor(regressors = (LinearR,ENet,GBoost,KRR,model_xgb,model_lgb),meta_regressor=lasso,\n                                 use_features_in_secondary=True)","56bd66ad":"stack_all = StackingCVRegressor(regressors = (LinearR,ENet,GBoost,KRR,RFforest,model_xgb,model_lgb),meta_regressor=lasso,\n                                 use_features_in_secondary=True)","bd399650":"#stack_ENet = StackingCVRegressor(regressors = (lasso,GBoost,KRR,model_xgb,model_lgb),meta_regressor=ENet,\n#                               use_features_in_secondary=True)","b3f1b50c":"#stack_xgb = StackingCVRegressor(regressors = (ENet,GBoost,KRR,lasso,model_lgb),meta_regressor=model_xgb,\n#                               use_features_in_secondary=True)","568a5d31":"'''stack_xgb.fit(train, y_train)\nstack_xgb_train_pred = stack_xgb.predict(train)\nstack_xgb_pred = np.expm1(stack_xgb.predict(test))\nprint(rmsle(y_train, stack_xgb_train_pred))'''","1b6620fb":"stack_lass.fit(train, y_train)\nstack_lass_train_pred = stack_lass.predict(train)\nstack_lass_pred = np.expm1(stack_lass.predict(test))\nprint(rmsle(y_train, stack_lass_train_pred))","418dcd1e":"stack_org.fit(train, y_train)\nstack_org_train_pred = stack_org.predict(train)\nstack_org_pred = np.expm1(stack_org.predict(test))\nprint(rmsle(y_train, stack_org_train_pred))","5cc4d548":"stack_lin.fit(train, y_train)\nstack_lin_train_pred = stack_lin.predict(train)\nstack_lin_pred = np.expm1(stack_lin.predict(test))\nprint(rmsle(y_train, stack_lin_train_pred))","51913625":"stack_all.fit(train, y_train)\nstack_all_train_pred = stack_all.predict(train)\nstack_all_pred = np.expm1(stack_all.predict(test))\nprint(rmsle(y_train, stack_all_train_pred))","00c65328":"'''stack_ENet.fit(train, y_train)\nstack_ENet_train_pred = stack_ENet.predict(train)\nstack_ENet_pred = np.expm1(stack_ENet.predict(test))\nprint(rmsle(y_train, stack_ENet_train_pred))'''","b177d6ba":"'''stack_gen.fit(train, y_train)\nstack_gen_train_pred = stack_gen.predict(train)\nstack_gen_pred = np.expm1(stack_gen.predict(test))\nprint(rmsle(y_train, stack_gen_train_pred))'''","81247b7c":"'''model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))'''","3b5d8bb6":"'''model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))'''","846a7e0b":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stack_lass_train_pred))","d4f768d4":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stack_org_train_pred))","f4303480":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stack_lin_train_pred))","d92d8c91":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stack_all_train_pred))","c10e998d":"ensemble = stack_lass_pred","48f0370b":"submit['price'] = ensemble\nsubmit.to_csv(\"lass_stacked_suwon.csv\",index=False)","e43f8a25":"ensemble = stack_org","c0fbfb5b":"submit['price'] = ensemble\nsubmit.to_csv(\"org_stacked_suwon.csv\",index=False)","f62e9269":"ensemble = stack_lin","59fafc90":"submit['price'] = ensemble\nsubmit.to_csv(\"lin_stacked_suwon.csv\",index=False)","81960b97":"ensemble = stack_all","b7b3f8ff":"submit['price'] = ensemble\nsubmit.to_csv(\"lin_stacked_suwon.csv\",index=False)","cf5a34d0":"### \uc0dd\uac01\ub098\ub294\ub300\ub85c \uc9c4\ud589\ud558\uae30 \ub54c\ubb38\uc5d0 \uc21c\uc11c\uc5d0 \ubb38\uc81c\ub294 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","357cf2a3":"#### zipcode\ub97c \ud30c\uc545\ud558\uc5ec label encoding\uc744 \uc9c4\ud589\ud558\ub3c4\ub85d \ud55c\ub2e4.","d2a205d2":"### Averaged base models class","4c2a2458":"#### price\uc640 \uac00\uc7a5 \uc0c1\uad00\uc774 \ub192\uc740 sqft_living\uc744 zipcode \uae30\uc900\uc73c\ub85c boxplot\uc744 \uadf8\ub824\ubcf8\ub2e4.","a6775217":"#### price \uac12\uc744 \uc815\uaddc\ud654\ud55c\ub2e4.","8e3bfa82":"#### date\uc758 \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 year,month,day\uc758 \uc5f4\uc744 \ucd94\uac00\ud55c\ub2e4.","85006a23":"#### model \ub9cc\ub4e4\uae30","8dada898":"#### train \ub370\uc774\ud130\ub85c price\uc640\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubbf8\ub9ac \ud30c\uc545\ud574\ubcf4\uc790.","faaa36f8":"#### \ucd1d \ubc29\uac1c\uc218 \ud569\uce58\uae30","153c4a9b":"### \uc774\uc0c1\uce58 \uc81c\uac70"}}