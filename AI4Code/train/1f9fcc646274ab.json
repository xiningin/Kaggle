{"cell_type":{"4d1b6b72":"code","432c21a6":"code","6f3c64db":"code","f2e6ff7c":"code","82b7aec5":"code","ee9a1e10":"code","1352188f":"code","9addcc6e":"code","04fe2af7":"code","a873be2b":"code","5d0ac412":"code","6fe475a8":"code","3e917832":"code","e956e688":"code","d73a6432":"code","24610863":"code","4bae17a0":"code","da60bb69":"code","85f1500c":"code","42a8af3c":"code","6272e376":"code","cc58b634":"code","a9123e8b":"code","65cdeda9":"code","1e925154":"code","7e779f85":"markdown","5192c8a2":"markdown","98c35ae1":"markdown","a111556f":"markdown","48c30634":"markdown","cc202602":"markdown","244d6f91":"markdown","f4536d27":"markdown","9ab0387c":"markdown","864e1390":"markdown","c390c771":"markdown","6dd84d6b":"markdown","3ec98cf4":"markdown"},"source":{"4d1b6b72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import f1_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","432c21a6":"df=pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf.head()","6f3c64db":"df.shape","f2e6ff7c":"df.info()","82b7aec5":"df.describe()","ee9a1e10":"cols_with_zero = ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']\nfor col in cols_with_zero:\n    df[col] = df[col].replace(0, np.NaN)\n    median = int(df[col].median(skipna= True))\n    df[col] = df[col].replace(np.NaN, median)","1352188f":"df.head()","9addcc6e":"df.isnull().sum()","04fe2af7":"corr=df.corr()","a873be2b":"plt.figure(figsize=(10,10))\nsns.heatmap(corr,annot=True)","5d0ac412":"plt.figure(figsize=(30,10))\nsns.countplot(df[\"SkinThickness\"])","6fe475a8":"df_columns=[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]","3e917832":"for i in df_columns:\n    g = sns.FacetGrid(df, col='Outcome')\n    g = g.map(sns.kdeplot, i)","e956e688":"sns.set_style=\"whitegrid\"\nsns.pairplot(df,hue=\"Outcome\",palette=\"coolwarm\")","d73a6432":"plt.figure(figsize=(10,10))\nsns.scatterplot(x=\"Insulin\",y=\"BMI\",hue=\"Outcome\",data=df)","24610863":"plt.subplot(111)\nsns.distplot(df['Age'], bins=10, kde=True)\nplt.show()\n\nplt.subplot(121)\nsns.distplot(df[\"Glucose\"],bins=10,kde=True)\nplt.show()\n\nplt.subplot(131)\nsns.distplot(df[\"BloodPressure\"],bins=10,kde=True)\nplt.show()","4bae17a0":"sns.stripplot(x='Outcome', y=\"Age\" , data=df)","da60bb69":"sns.stripplot(x='Outcome', y=\"Glucose\" , data=df)","85f1500c":"X=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","42a8af3c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","6272e376":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","cc58b634":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 11, metric = 'euclidean', p = 2)\nclassifier.fit(X_train, y_train)","a9123e8b":"y_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","65cdeda9":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","1e925154":"print(f1_score(y_test,y_pred))","7e779f85":"Finding the correlations between the different features present in our dataset.","5192c8a2":"**MAKING THE CONFUSION MATRIX**","98c35ae1":"**SPLITTING DATASET INTO TRAIN TEST AND TEST SET**","a111556f":"**IMPORTING DATASET**","48c30634":"**DATA VISUALISATION**","cc202602":"**TRAINING THE DATASET ON THE K-NN MODEL**","244d6f91":"We use it forbreaking data variables up across multiple subplots and combining those subplots into a single figure.","f4536d27":"**DATA PREPROCESSING**","9ab0387c":"Splitting dataset into independent and dependent dataset","864e1390":"As Glucose,BloodPressure,SkinThickness,Insulin,BMI these columns have 0 as its values. We'll clean some of our dependent variables, replacing the 0's in the features with their mean.","c390c771":"**WE GOT AN ACCURACY OF 81% AND F1_SCORE 68% WHICH IS NOT VERY GOOD BUT SATISFACTORY**","6dd84d6b":"**FEATURE SCALING**\n\nFor making all the features to come in a similar range","3ec98cf4":"**PREDICTING THE TEST SET RESULT**"}}