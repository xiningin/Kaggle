{"cell_type":{"a8872f20":"code","99025837":"code","4918cc10":"code","3cbb999c":"code","53b968e7":"code","a1009ce0":"code","7322cd91":"code","21e14cd4":"code","bcad9de9":"code","6f3faf29":"code","fe289f8f":"code","077adb27":"code","cf6d906e":"code","e4acc64f":"code","4f71666d":"code","44226c90":"code","4a70e8b0":"code","faa4900f":"code","39a6ba38":"code","2b8220d9":"code","6b5ea442":"code","ca9fa929":"code","88993e8c":"code","88b07b16":"code","c0f8485a":"code","a36d34a4":"code","cdf5e808":"code","74c2ece2":"code","a55b9fae":"code","4d08842b":"code","3be9e5c0":"code","f8dd0821":"code","5260bfde":"code","a68e1373":"code","caea1206":"code","61d365f8":"code","c6aca481":"code","31a3410e":"code","a389d697":"code","7ed6467d":"code","7cd1ccd4":"code","95491d29":"code","97742f22":"code","1fb7fa63":"code","572e4152":"code","06540e87":"code","51795fd3":"code","7d809470":"code","2b6bb22d":"code","1a8f5ce8":"markdown","f3a4515d":"markdown","2a01fe30":"markdown","0214f59a":"markdown","ca7b1a5a":"markdown","37256bd8":"markdown","c64f94dd":"markdown","53bb4df2":"markdown","ed17ee0d":"markdown","567d1d2b":"markdown","2d4dd1f0":"markdown","9da29277":"markdown","20960263":"markdown","510defb3":"markdown","16c1b185":"markdown","ec0aaa00":"markdown","245365d7":"markdown","bd0b930e":"markdown","5c40e329":"markdown"},"source":{"a8872f20":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport pandas as pd\nimport time\nimport glob\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow\nimport os\nimport cv2\nimport shutil\nimport seaborn as sns\nimport xgboost\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nimport category_encoders as ce\nfrom sklearn.metrics import mean_absolute_error","99025837":"train_df = pd.read_csv('..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/train.csv')\ntest_df = pd.read_csv('..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv')\ntrain_df, valid_df = train_test_split(train_df, train_size=0.95, random_state=0)","4918cc10":"train_df.head()","3cbb999c":"train_df = train_df.rename(columns={'Image_path': 'file_path', 'Condition': 'labels'})","53b968e7":"valid_df = valid_df.rename(columns={'Image_path': 'file_path', 'Condition': 'labels'})\ntest_df = test_df.rename(columns={'Image_path': 'file_path', 'Condition': 'labels'})","a1009ce0":"train_path = '..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/trainImages\/'\ntest_path = '..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/testImages\/'","7322cd91":"train_df.file_path = train_path + train_df.file_path","21e14cd4":"train_df.head()","bcad9de9":"valid_df.file_path = train_path + valid_df.file_path\ntest_df.file_path = test_path + test_df.file_path","6f3faf29":"train_df.labels.value_counts()","fe289f8f":"valid_df.labels.value_counts()","077adb27":"train_class_diff = 1237-92\nvalid_class_diff = 63-7","cf6d906e":"labels = []\nfile_path = []\nfor file in glob.glob('..\/input\/stanford-cars-dataset\/cars_train\/cars_train\/*.jpg'):\n    labels.append(0)\n    file_path.append(file)\nprint ('file_path: ', len(file_path), '   labels: ', len(labels))","e4acc64f":"Fseries = pd.Series(file_path, name='file_path')\nLseries = pd.Series(labels, name='labels')\nstanford_df = pd.concat([Fseries,Lseries], axis=1)\nstanford_df = pd.DataFrame(np.array(stanford_df).reshape(8144,2), columns = ['file_path', 'labels'])\nprint(stanford_df['labels'].value_counts())","4f71666d":"balance_images = stanford_df.sample(train_class_diff + valid_class_diff, random_state = 0)\nbalance_images.head()","44226c90":"train_balance = balance_images[:train_class_diff]\nvalid_balance = balance_images[-valid_class_diff:]\nprint(train_balance.size, valid_balance.size)","4a70e8b0":"balanced_class_train_df = pd.concat([train_df, train_balance], axis=0)","faa4900f":"balanced_class_train_df = balanced_class_train_df.reset_index(drop=True)","39a6ba38":"balanced_class_train_df.head()","2b8220d9":"balanced_class_train_df.tail()","6b5ea442":"balanced_class_valid_df = pd.concat([valid_df, valid_balance], axis=0)","ca9fa929":"balanced_class_valid_df = balanced_class_valid_df.reset_index(drop=True)","88993e8c":"balanced_class_valid_df.head()","88b07b16":"class_dict = {0: 'Undamaged', 1: 'Damaged'}","c0f8485a":"balanced_class_train_df.labels = balanced_class_train_df.labels.map(class_dict)","a36d34a4":"balanced_class_train_df.head()","cdf5e808":"balanced_class_valid_df.labels = balanced_class_valid_df.labels.map(class_dict)\nbalanced_class_valid_df.head()","74c2ece2":"print(balanced_class_train_df.labels.value_counts(),\n      balanced_class_valid_df.labels.value_counts())","a55b9fae":"plt.figure(figsize = (14,10))\nfor i in range(20):\n    random = np.random.randint(1,len(balanced_class_train_df))\n    plt.subplot(4,5,i+1)\n    plt.imshow(cv2.imread(balanced_class_train_df.loc[random,\"file_path\"]))\n    plt.title(balanced_class_train_df.loc[random, \"labels\"], size = 10, color = \"black\") \n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()","4d08842b":"target_size=(299,299)\nbatch_size=64","3be9e5c0":"train_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.inception_resnet_v2.preprocess_input, horizontal_flip=True, zoom_range=0.1)\ntest_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.inception_resnet_v2.preprocess_input)\ntrain_gen = train_datagen.flow_from_dataframe(balanced_class_train_df, x_col='file_path', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='binary')\nvalid_gen = test_datagen.flow_from_dataframe(balanced_class_valid_df, x_col='file_path', y_col='labels', target_size=target_size, batch_size=batch_size, color_mode='rgb', class_mode='binary')","f8dd0821":"base_model = tf.keras.applications.InceptionResNetV2(include_top=False, input_shape = (299,299,3))","5260bfde":"classification_model = tf.keras.Sequential([\n    base_model,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.BatchNormalization(), \n    tf.keras.layers.Dropout(0.2), \n    tf.keras.layers.Dense(1, activation='sigmoid')\n])","a68e1373":"lr=0.001\nclassification_model.compile(loss='binary_crossentropy', optimizer=Adam(lr=lr), metrics=['accuracy'])","caea1206":"patience = 1\nstop_patience = 3\nfactor = 0.5\n\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(\"classify_model.h5\", save_best_only=True, verbose = 0),\n    tf.keras.callbacks.EarlyStopping(patience=stop_patience, monitor='val_loss', verbose=1),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=factor, patience=patience, verbose=1)\n]","61d365f8":"epochs = 30\nhistory = classification_model.fit(train_gen, validation_data=valid_gen, epochs=epochs, callbacks=callbacks, verbose=1)","c6aca481":"plt.plot(history.history['loss'], label='Loss (training data)')\nplt.plot(history.history['val_loss'], label='Loss (validation data)')\nplt.title('Loss for Training')\nplt.ylabel('Loss')\nplt.xlabel('No. epoch')\nplt.legend(['train', 'validation'], loc=\"upper left\")\nplt.show()\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","31a3410e":"best_class_model = classification_model\nbest_class_model.load_weights('.\/classify_model.h5')\nbest_class_model.evaluate(valid_gen)","a389d697":"train_df.head()","7ed6467d":"train_df['Insurance_company'] = LabelEncoder().fit_transform(train_df['Insurance_company'])\ntest_df['Insurance_company'] = LabelEncoder().fit_transform(test_df['Insurance_company'])","7cd1ccd4":"train_df.head()","95491d29":"train_df.Expiry_date = train_df.Expiry_date.apply(pd.to_datetime)\ntrain_df['month'] = train_df.Expiry_date.apply(lambda x: x.month)\ntrain_df['day'] = train_df.Expiry_date.apply(lambda x: x.day)\ntrain_df['year'] = train_df.Expiry_date.apply(lambda x: x.year)\ntrain_df.drop(['Expiry_date'], 1, inplace = True)\n\ntest_df.Expiry_date = test_df.Expiry_date.apply(pd.to_datetime)\ntest_df['month'] = test_df.Expiry_date.apply(lambda x: x.month)\ntest_df['day'] = test_df.Expiry_date.apply(lambda x: x.day)\ntest_df['year'] = test_df.Expiry_date.apply(lambda x: x.year)\ntest_df.drop(['Expiry_date'], 1, inplace = True)","97742f22":"train_df.head()","1fb7fa63":"features = train_df[['Cost_of_vehicle', 'Insurance_company', 'Min_coverage', 'Max_coverage', 'month', 'day', 'year']]","572e4152":"ax = sns.heatmap(features)","06540e87":"X = train_df[['Cost_of_vehicle', 'Max_coverage', 'Min_coverage']]\ny = train_df['Amount']","51795fd3":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.95, random_state=0)","7d809470":"regression_model = XGBRegressor(n_estimators=1000, learning_rate=0.001)\nregression_model.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_valid, y_valid)], verbose=False)","2b6bb22d":"predictions = regression_model.predict(X_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","1a8f5ce8":"# **Model Training Graphs**","f3a4515d":"# **Import Libraries**","2a01fe30":"# **Visualize Images**","0214f59a":"# **Best Classification Model Predictions on Valid Set**","ca7b1a5a":"# **Classification Model**","37256bd8":"Need to encode labels since we cant have strings. I took this part from [this notebook.](https:\/\/www.kaggle.com\/sohommajumder21\/resnet50v2-and-randomforestregresion)","c64f94dd":"# **Callbacks for Classification Model**","53bb4df2":"Disclaimer: I used images from Stanford Cars Dataset to help train the classification model since otherwise, the dataset would be way too inbalanced to train with. ","ed17ee0d":"First time using machine learning in a project, so bad results as expected :)","567d1d2b":"# **Image Data Generator**","2d4dd1f0":"# **Balancing Classes in Train and Valid Dataframes**","9da29277":"Finding important features","20960263":"# **XG Boost Model**","510defb3":"# **Dataframes**","16c1b185":"Dataframe Preprocessing","ec0aaa00":"# **Classification Model Training**","245365d7":"Dataset is extremely unbalanced. We will add images of cars from the Stanford Cars Dataset to combat this.  ","bd0b930e":"# **Training XGBoost Model**","5c40e329":"Pretty decent accuracy. "}}