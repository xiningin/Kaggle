{"cell_type":{"5df9b91b":"code","171fa9b0":"code","9a435d21":"code","3a2d5f49":"code","0537d5f3":"code","e9157c4f":"code","e8296fe8":"code","7f622544":"code","485eddeb":"code","a39f9d52":"code","7945a4c0":"code","b7c41801":"code","f6e198fd":"code","6596683a":"code","a8ac1203":"code","b2689946":"code","1ec580f1":"code","0fb1fb98":"code","f768c4aa":"code","f29d4053":"code","eb87c01c":"code","6ddf486e":"code","43362eed":"code","261b4118":"code","ddcd5b1f":"code","374bdc84":"code","d24d4670":"code","94d9c299":"code","46068ea8":"code","3d203102":"code","4abba3fc":"code","23114c55":"code","1d014e6c":"code","83f55559":"code","ede0c508":"code","ccabc9ce":"code","259e01cb":"code","fbccc335":"markdown","f7f7f620":"markdown","a18b0e96":"markdown","016cab51":"markdown","256b78ee":"markdown","ca07d3fa":"markdown","83e38137":"markdown","e5ea5e01":"markdown","5cc81711":"markdown","44589f0c":"markdown","6af29761":"markdown","0383f734":"markdown"},"source":{"5df9b91b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","171fa9b0":"mobile = pd.read_csv(\"\/kaggle\/input\/mobile-price-classification\/train.csv\")\nmobile","9a435d21":"#No es necesario hacer una escalacion, revisar resultados\nmobile.describe()","3a2d5f49":"mobile.isnull().sum()","0537d5f3":"fig = make_subplots(\n    rows=3, \n    cols=2, \n    subplot_titles=['Battery Power', 'Dual Sim', 'Pc', 'Memory', 'Cores', 'Price Range']\n)\n\nfig.append_trace(go.Histogram(x=mobile[::500]['battery_power'], nbinsx=10),1,1)\nfig.append_trace(go.Histogram(x=mobile[::500]['dual_sim'], nbinsx=10),1,2)\nfig.append_trace(go.Histogram(x=mobile[::500]['pc'], nbinsx=10),2,1)\nfig.append_trace(go.Histogram(x=mobile[::500]['int_memory'], nbinsx=10),2,2)\nfig.append_trace(go.Histogram(x=mobile[::500]['n_cores'], nbinsx=10),3,1)\nfig.append_trace(go.Histogram(x=mobile[::500]['price_range'], nbinsx=20),3,2)\n\nfig.show()\n","e9157c4f":"fig = px.box(x=mobile['price_range'], y=mobile['fc'])\nfig.show()","e8296fe8":"fig = px.box(x=mobile['price_range'], y=mobile['px_height'])\nfig.show()","7f622544":"fig = px.box(x=mobile['price_range'], y=mobile['ram'])\nfig.show()","485eddeb":"corr = mobile.corr()\ncorr.style.background_gradient(cmap='plasma').set_precision(2)","a39f9d52":"y = mobile[\"price_range\"]\nmobile = mobile.drop([\"price_range\"], axis=1)","7945a4c0":"lda_model = LinearDiscriminantAnalysis(n_components=1).fit(mobile, y)\nreduced_X = lda_model.transform(mobile).reshape(-1, 1)","b7c41801":"num_classes = 4\ny = keras.utils.to_categorical(y, num_classes)","f6e198fd":"reduced_X = reduced_X.ravel()","6596683a":"input_shape = (1)\n\nmodel = keras.Sequential(\n    [\n        keras.Input(shape= input_shape),\n        layers.Flatten(),\n        layers.Dense(500, activation=\"relu\"),\n        layers.Dense(num_classes, activation=\"softmax\"),\n    ]\n)\n\nmodel.build(input_shape)\nmodel.summary()","a8ac1203":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","b2689946":"model.fit(reduced_X, y, epochs=10, batch_size=250, verbose=1, validation_split=0.2)","1ec580f1":"score = model.evaluate(reduced_X, y, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","0fb1fb98":"val = model.predict(reduced_X)\nval = np.argmax(val, axis=1)\nval.shape","f768c4aa":"y = np.argmax(y, axis=1)\ny.shape","f29d4053":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, val)\ncm\nfig = px.imshow(cm, x=['Low Cost','Medium Cost', 'High Cost', 'Very High Cost'], y=['Low Cost','Medium Cost', 'High Cost', 'Very High Cost'])\nfig.show()","eb87c01c":"divorce = pd.read_csv(\"\/kaggle\/input\/divorce-prediction\/divorce_data.csv\", sep=\";\")\ndivorce","6ddf486e":"divorce.describe()","43362eed":"divorce.isnull().sum()","261b4118":"fig = make_subplots(\n    rows=3, \n    cols=2, \n    subplot_titles=['Q15', 'Q31', 'Q37', 'Q42', 'Q49', 'Divorce']\n)\n\nfig.append_trace(go.Histogram(x=divorce[::50]['Q15'], nbinsx=10),1,1)\nfig.append_trace(go.Histogram(x=divorce[::50]['Q31'], nbinsx=10),1,2)\nfig.append_trace(go.Histogram(x=divorce[::50]['Q37'], nbinsx=10),2,1)\nfig.append_trace(go.Histogram(x=divorce[::50]['Q42'], nbinsx=10),2,2)\nfig.append_trace(go.Histogram(x=divorce[::50]['Q49'], nbinsx=10),3,1)\nfig.append_trace(go.Histogram(x=divorce[::50]['Divorce'], nbinsx=20),3,2)\n\nfig.show()","ddcd5b1f":"corr = divorce.corr()\ncorr.style.background_gradient(cmap='plasma').set_precision(2)","374bdc84":"y = divorce[\"Divorce\"]\ndivorce = divorce.drop([\"Divorce\"], axis=1)\ndivorce","d24d4670":"lda_model = LinearDiscriminantAnalysis(n_components=1).fit(divorce, y)\nreduced_X = lda_model.transform(divorce).reshape(-1, 1)","94d9c299":"num_classes = 2\ny = keras.utils.to_categorical(y, num_classes)","46068ea8":"reduced_X = reduced_X.ravel()","3d203102":"input_shape = (1)\n\nmodel = keras.Sequential(\n    [\n        keras.Input(shape= input_shape),\n        layers.Flatten(),\n        layers.Dense(50, activation=\"relu\"),\n        layers.Dense(num_classes, activation=\"softmax\"),\n    ]\n)\n\nmodel.build(input_shape)\nmodel.summary()","4abba3fc":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","23114c55":"model.fit(reduced_X, y, epochs=5, batch_size=250, verbose=1, validation_split=0.2)","1d014e6c":"score = model.evaluate(reduced_X, y, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","83f55559":"score = model.evaluate(reduced_X, y, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","ede0c508":"val = model.predict(reduced_X)\nval = np.argmax(val, axis=1)\nval.shape","ccabc9ce":"y = np.argmax(y, axis=1)\ny.shape","259e01cb":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, val)\ncm\nfig = px.imshow(cm, x=['Married','Divorce'], y=['Married','Divorce'])\nfig.show()","fbccc335":"# Ejercicio 2","f7f7f620":"## NN with Keras","a18b0e96":"### Outliers\n\nNo removi los outliers porque no son exagerado","016cab51":"#### Predictions","256b78ee":"### Matriz de Correlacion","ca07d3fa":"# Ejercicio 1","83e38137":"## Analisis de data","e5ea5e01":"### Matriz de correlacion ","5cc81711":"## Analisis de data","44589f0c":"### NN with Keras","6af29761":"#### Training Accurancy","0383f734":"#### LDA Reshape 1D"}}