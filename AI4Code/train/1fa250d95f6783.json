{"cell_type":{"517e75cf":"code","d2ed0022":"code","5e3c69dd":"code","b8802d43":"code","a8e8f175":"code","9a7acd77":"code","d5be8483":"code","964daa40":"code","d3b0bd25":"code","7fe5109a":"code","b07992e6":"code","32fa9501":"code","56e00148":"markdown","cf2b79b4":"markdown","359b8c11":"markdown"},"source":{"517e75cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn as skl\nimport xgboost as xgb\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2ed0022":"data = pd.read_csv('\/kaggle\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')","5e3c69dd":"data.head()","b8802d43":"data.describe()","a8e8f175":"from sklearn.model_selection import train_test_split \n\nX, y = data.drop(['default.payment.next.month'], axis=1), data['default.payment.next.month']\n\ntest_prop = 0.2\n\nX_train, X_test, y_train, y_test = train_test_split(\n     X, y, test_size=test_prop)\n\n\nD_train = xgb.DMatrix(X_train, label=y_train)\nD_test = xgb.DMatrix(X_test, label=y_test)","9a7acd77":"import xgboost as xgb\n\nparams = {\n    # Parameters that we are going to tune.\n    'max_depth':6,\n    'min_child_weight': 1,\n    'eta':.3,\n    'subsample': 1,\n    'colsample_bytree': 1,\n    # Other parameters\n    'objective':'binary:hinge',\n}\n\nsteps = 50 # The number of training iterations\n\nmodel = xgb.train(params, D_train, steps)","d5be8483":"preds = model.predict(D_test)","964daa40":"from sklearn.metrics import roc_auc_score\n\nauc = roc_auc_score(preds, y_test)\n\nprint('ROC AUC:', auc)","d3b0bd25":"\"\"\"\nfrom sklearn.model_selection import GridSearchCV\n\nestimator = xgb.XGBClassifier(\n    objective= 'binary:hinge'\n)\n\nvar_params = {\n    # Parameters that we are going to tune.\n    'max_depth':range(6,10,2),\n    'min_child_weight': range(3,9,2),\n    'eta':[0.005,0.01,0.05,0.1,0.2],\n    'colsample_bytree': [0.6,0.8,1],\n    'subsample':[0.8,1]\n}\n\ngrid_search = GridSearchCV(\n    estimator=estimator,\n    param_grid=var_params,\n    scoring = 'roc_auc',\n    n_jobs = 3,\n    cv = 10,\n    verbose=True\n)\n\ngrid_search.fit(X_train, y_train)\"\"\"","7fe5109a":"grid_search.best_estimator_","b07992e6":"parameters0 = {\n    # Parameters that we are going to tune.\n    'max_depth':8,\n    'min_child_weight': 3,\n    'eta':.005,\n    'subsample': 1,\n    'colsample_bytree': 1,\n    # Other parameters\n    'objective':'binary:hinge',\n}\n\nmodel_opt = xgb.train(parameters0, D_train, steps)\n\npreds0 = model.predict(D_test)","32fa9501":"auc0 = roc_auc_score(preds0, y_test)\n\nprint('New ROC AUC:', auc0)","56e00148":"# With output best parameters","cf2b79b4":"# Hyper-parameter tuning: grid search","359b8c11":"# Hyperparameter tuning results\n\n### Without tuning\n\nOur first attempt yielded an _auc_ of 0.7429454183338285.\n\n### With tuning\n\nAfter having tuned the model, we get 0.7429454183338285.\n\n## Evaluation\n\nThere has been no accuracy gained by the tuning process. "}}