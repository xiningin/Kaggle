{"cell_type":{"52df3683":"code","7f111fe2":"code","de4cf43f":"code","bb2c0884":"code","ca1b0c03":"code","9dd6191b":"code","f3b9223d":"code","a4d3c4e1":"code","e0ade8f3":"code","811d5567":"code","12cf6a9d":"code","74ab4460":"code","34740fdc":"code","ff30c84f":"code","e9ddb57e":"code","3da632a7":"code","ed766a83":"code","50f87efb":"code","885b72ae":"code","267d5c52":"code","e290e122":"code","66d05903":"code","e0d6b296":"code","8d28a0e9":"code","97dcacb6":"code","1f56b345":"code","ef1ec13e":"code","5ec15f2e":"code","4fa45c2e":"markdown","88cb085c":"markdown","442d19bf":"markdown","d93bc952":"markdown","8db68158":"markdown"},"source":{"52df3683":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","7f111fe2":"bf_df = pd.read_csv(\"..\/input\/BlackFriday.csv\")","de4cf43f":"bf_df.head()","bb2c0884":"bf_df.info()","ca1b0c03":"bf_df.isnull().sum()","9dd6191b":"bf_df.columns","f3b9223d":"bf_df['Gender'].unique()","a4d3c4e1":"plt.subplot(1,2,1)\nsns.countplot(bf_df['Gender']) #attendance\n\nm_purchase = bf_df.groupby(['Gender'])['Purchase'].sum()\nplt.subplot(1,2,2)\nsns.barplot(m_purchase.index, m_purchase.values) #dollar value","e0ade8f3":"sns.countplot(bf_df['Marital_Status'])","811d5567":"sns.countplot(bf_df['Gender'], hue = bf_df['Marital_Status'])","12cf6a9d":"sns.countplot(bf_df['Stay_In_Current_City_Years'])","74ab4460":"pie = bf_df.groupby(['Product_Category_1']).count()['User_ID']\npie_sorted = pie.sort_values(ascending = False)\nplt.figure(figsize = (10,8))\nplt.pie(x = pie_sorted.values, labels = pie_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()","34740fdc":"pie2 = bf_df.groupby(['Product_Category_2']).count()['User_ID']\npie2_sorted = pie2.sort_values(ascending = False)\nplt.figure(figsize = (10,8))\nplt.pie(x = pie2_sorted.values, labels = pie2_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()","ff30c84f":"pie3 = bf_df.groupby(['Product_Category_3']).count()['User_ID']\npie3_sorted = pie3.sort_values(ascending = False)\n\nplt.figure(figsize = (10,8))\nplt.pie(x = pie3_sorted.values, labels = pie3_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.show()","e9ddb57e":"#combined Pie Chart\n\nplt.figure(figsize = (20,8))\n\nplt.subplot(1,3,1)\npie = bf_df.groupby(['Product_Category_1']).count()['User_ID']\npie_sorted = pie.sort_values(ascending = False)\nplt.pie(x = pie_sorted.values, labels = pie_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Product_Category_1')\n\nplt.subplot(1,3,2)\npie2 = bf_df.groupby(['Product_Category_2']).count()['User_ID']\npie2_sorted = pie2.sort_values(ascending = False)\nplt.pie(x = pie2_sorted.values, labels = pie2_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Product_Category_2')\n\nplt.subplot(1,3,3)\npie3 = bf_df.groupby(['Product_Category_3']).count()['User_ID']\npie3_sorted = pie3.sort_values(ascending = False)\nplt.pie(x = pie3_sorted.values, labels = pie3_sorted.index, autopct='%1.1f%%')\nplt.axis('equal')\nplt.title('Product_Category_3')\n\nplt.show()","3da632a7":"plt.figure(figsize = (20,8))\nsns.countplot(bf_df['Product_Category_1'], hue = bf_df['Gender'])","ed766a83":"bf_df.head()","50f87efb":"bf_df.columns","885b72ae":"train_raw = bf_df[['Gender', 'Age', 'Occupation', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status']]\ntest = bf_df['Product_Category_1']","267d5c52":"train_raw['Stay_In_Current_City_Years'] = train_raw['Stay_In_Current_City_Years'].apply(lambda x: '4' if x == '4+' else x)\ntrain_raw['Stay_In_Current_City_Years'] = train_raw['Stay_In_Current_City_Years'].apply(lambda x: int(x))","e290e122":"train_raw['City_Category'] = train_raw['City_Category'].apply(lambda x: 0 if x == 'A' else (1 if x == 'B' else 2))","66d05903":"train_raw['Age'] = train_raw['Age'].apply(lambda x: '00-17' if x == '0-17' else x)\ntrain_raw['Age'] = train_raw['Age'].apply(lambda x: '56-60' if x == '55+' else x)\ntrain_raw['Age'] = train_raw['Age'].apply(lambda x: 0.5 * (int(x[0])*10 + int(x[1]) + int(x[-2])*10 + int(x[-1])))","e0d6b296":"train_raw['Gender'] = train_raw['Gender'].apply({'M':1, 'F':0}.get)","8d28a0e9":"train_raw.info()","97dcacb6":"train = train_raw.copy()","1f56b345":"x_train, y_train, x_test, y_test = train_test_split(train, test, test_size=0.1, random_state=42)","ef1ec13e":"tree = DecisionTreeClassifier()\ntree.fit(x_train, x_test)\ny_pred = tree.predict(y_train)","5ec15f2e":"accuracy_score(y_test, y_pred)","4fa45c2e":"**Predict Product Type from Product_category_1 of a customer based on the rest of available data.**","88cb085c":"Convert raw data to ml friendly","442d19bf":"\t- Analyzing data for research \n\t\t\u25cb Who is more likely to spend more in a black Friday sale?\n\t\t\t\u00a7 Men or Women.\n\t\t\t\u00a7 Married or Un Married\n\t\t\t\u00a7 Old Residents or new residents \n\t\t\u25cb Which type of products are more likely to be sold in a sale like black Friday?\n        \u25cb Which type of products are common among men and which among women?\n\t- Prediction\/classification-\n\t\t\u25cb Predict Age of a customer based on the rest of available data.\n\t\t\u25cb Predict gender of a customer based on rest of data.\n\t\t\u25cb Predict amount of purchase based on rest of data.\n     - Recommendation -\n         \u25cb Suggest products based on age.\n         \u25cb Suggest products based on location customers belong to.\n         \u25cb Suggest products based on gender.","d93bc952":"**Which type of products are more likely to be sold in a sale like black Friday?**","8db68158":"**Which type of products are common among men and which among women?**"}}