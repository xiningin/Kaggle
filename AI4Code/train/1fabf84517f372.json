{"cell_type":{"62df525a":"code","ec57fa25":"code","56718bfd":"code","16e1f136":"code","228da1bc":"code","ffa899cf":"code","f21fa37e":"code","1332b50e":"code","ddd5b3cd":"code","82557d74":"code","80cd8dd7":"code","a3115d72":"code","42088176":"code","b5009327":"code","8748f73d":"code","bfaa2de3":"code","844f145d":"code","1cf4413c":"code","bc4cc42f":"code","4b1fe2b7":"code","364e0798":"code","ba77a013":"code","6f96dcf7":"code","bd3d7809":"code","0e8c1ce1":"code","4ec0e21c":"code","139047ee":"code","c17e22d2":"code","fbebe699":"code","5ad217c2":"code","371d1506":"code","ee680640":"code","ca1bd986":"code","a6d480a5":"code","19ba93c7":"markdown","bb999cf2":"markdown","90e81bdd":"markdown","49294e7e":"markdown","f66bb981":"markdown","8a5af9d4":"markdown","2232aefc":"markdown","b8a76063":"markdown","0a360b2e":"markdown","d209cd2d":"markdown","aef865b3":"markdown","e2f420a9":"markdown","342bb024":"markdown","afc4c5f8":"markdown","b42663e6":"markdown","ca494eb8":"markdown","fa6ed194":"markdown","0c192f80":"markdown","48b4296c":"markdown","a3030a23":"markdown","8b8f4651":"markdown","c0e69813":"markdown","fda21755":"markdown","d860f74a":"markdown","a9796628":"markdown","8bc278f5":"markdown","62734769":"markdown"},"source":{"62df525a":"# data wrangling\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling as pdp\nfrom collections import Counter\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.core.display import display\n\n# modeling\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_validate\n\n# evaluation\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","ec57fa25":"# Load\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# fundamental statistics\ndisplay(train_df.describe(include='all'))\n\n# generate detailed report(train)\npdp.ProfileReport(train_df)","56718bfd":"# \u524d\u51e6\u7406\uff1b raw \u30c7\u30fc\u30bf\u306e\u3046\u3061\u6570\u5024\u578b\u306e\u30c7\u30fc\u30bf\u3092\u3068\u308a\u3042\u3048\u305a\u4f7f\u3046\uff08\u8003\u3048\u308b\u3053\u3068\u5c11\u306a\u3044\u304b\u3089\uff09\n# train \u30c7\u30fc\u30bf\u304b\u3089\u66f4\u306b validation \u7528\u306e\u30c7\u30fc\u30bf\u3092\u5207\u308a\u5206\u3051\u308b\nX = train_df.loc[:, ['Fare', 'Age']].fillna(0)\ny = train_df.loc[:, ['Survived']]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=123)\n\n# train\/valid \u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u9670\u6027\u30fb\u967d\u6027\u6bd4\u7387\u306e\u6bd4\u8f03\nprint('train:\\n', y_train['Survived'].value_counts() \/ y_train.shape[0])\nprint('valid:\\n', y_valid['Survived'].value_counts() \/ y_valid.shape[0])\n\n# \u3060\u3044\u305f\u3044\u540c\u3058\u304f\u3089\u3044\u306b\u306a\u308b\u306e\u3067 OK","16e1f136":"# \u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\nmodel = SVC(random_state=123)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u5024\nprint(y_pred)","228da1bc":"# \u7cbe\u5ea6\uff08Accuracy\uff09\nprint('score:', accuracy_score(y_valid, y_pred))","ffa899cf":"# \u6df7\u5408\u884c\u5217\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","f21fa37e":"train_df['Survived'].value_counts()","1332b50e":"# \u5143\u30c7\u30fc\u30bf\ntrain_df.head()","ddd5b3cd":"# \u88dc\u5b8c\u524d\u306e\u5206\u5e03\ntrain_df.Age.hist()","82557d74":"train_df['Sex'] = train_df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\nguess_ages = np.zeros((2,3))\nguess_ages\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        guess_df = train_df[(train_df['Sex'] == i) & \\\n                              (train_df['Pclass'] == j+1)]['Age'].dropna()\n        age_guess = guess_df.median()\n\n        # Convert random age float to nearest .5 age\n        guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        train_df.loc[ (train_df.Age.isnull()) & (train_df.Sex == i) & (train_df.Pclass == j+1),\\\n                'Age'] = guess_ages[i,j]\n\ntrain_df['Age'] = train_df['Age'].astype(int)\n\ntrain_df.head()","80cd8dd7":"train_df[train_df['Age'].notnull()].shape","a3115d72":"# \u88dc\u5b8c\u5f8c\u306e\u5206\u5e03\ntrain_df.Age.hist()","42088176":"df = train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)\nplt.bar(df['Pclass'], df['Survived'])\nplt.title('survival ratio by Pclasses')\nplt.show()","b5009327":"# \u4f8b\nprint(pd.get_dummies([1, 2, 3]))","8748f73d":"# Cabin \u306f\u6b20\u640d\u304c\u591a\u3044\uff08687\/891\uff09\ntrain_df.Cabin.value_counts(dropna=False).sort_values(ascending=False)","bfaa2de3":"# Ticket \u306f\u8b0e\u304c\u591a\u3044\uff08\u4ef6\u6570\u304c\u6700\u5927\u306e\u3082\u306e\u3067 7 \u4ef6\u3057\u304b\u306a\u3044\uff0cFare \u3068\u540c\u3058\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308b\uff0c etc...\uff09\ntrain_df.Ticket.value_counts(dropna=False).sort_values(ascending=False)","844f145d":"# drop\ntrain_df = train_df.drop(['Ticket', 'Cabin', 'PassengerId', 'Name', 'Embarked'], axis=1)\ntrain_df.head()","1cf4413c":"# train\/validation \u306b\u5206\u5272\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=123)\n\n# \u4e88\u6e2c\nmodel = SVC(random_state=123)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u7d50\u679c\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])\nprint('score:', accuracy_score(y_valid, y_pred))\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","bc4cc42f":"# before\ntrain_df.describe(include = 'all')","4b1fe2b7":"scaler = StandardScaler()\ntrain_df.iloc[:, 1:] = scaler.fit_transform(train_df.iloc[:, 1:])\ntrain_df.head()","364e0798":"# after\ntrain_df.describe(include = 'all')","ba77a013":"# train\/validation \u306b\u5206\u5272\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=123)\n\n# \u4e88\u6e2c\nmodel = SVC(random_state=123)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u7d50\u679c\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])\nprint('score:', accuracy_score(y_valid, y_pred))\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","6f96dcf7":"def show_results_info(cv_results):\n    print('test scores:', cv_results['test_score'])\n    print('max:', cv_results['test_score'].max())\n    print('mean:', cv_results['test_score'].mean())\n    print('min:', cv_results['test_score'].min())\n    print('\\n')\n\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]\n\ncv = KFold(n_splits = 5, shuffle = True, random_state = 123)\ncv_results = cross_validate(model, X, y, cv = cv)\nprint('results of KFold')\nshow_results_info(cv_results)\n\ncv = StratifiedKFold(n_splits = 5, shuffle = True, random_state = 123)\ncv_results = cross_validate(model, X, y, cv = cv)\nprint('results of StratifiedKFold')\nshow_results_info(cv_results)","bd3d7809":"# \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\nX = train_df.drop(\"Survived\", axis=1)\ny = train_df[\"Survived\"]\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=123, stratify = y, test_size = .25)\n# \u4e88\u6e2c\nmodel = SVC(random_state=123)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u7d50\u679c\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])\nprint('score:', accuracy_score(y_valid, y_pred))\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","0e8c1ce1":"train_scores = []\nvalid_scores = []\nC_array = np.arange(.5, 10.5, .5)\n\nfor C in C_array:\n\n    model = SVC(C = C, random_state=123)\n    model.fit(X_train, y_train)\n    \n    y_pred_train = model.predict(X_train)\n    train_scores.append(accuracy_score(y_train, y_pred_train))\n    \n    y_pred_valid = model.predict(X_valid)\n    valid_scores.append(accuracy_score(y_valid, y_pred_valid))\n\nsns.lineplot(x = C_array, y = train_scores, color = 'skyblue', label = 'train')\nsns.lineplot(x = C_array, y = valid_scores, color = 'orange', label = 'valid')\nplt.show()","4ec0e21c":"train_scores = []\nvalid_scores = []\ngamma_array = np.arange(.05, 1.05, .05)\n\nfor gamma in gamma_array:\n\n    model = SVC(C = 3, gamma = gamma, random_state=123)\n    model.fit(X_train, y_train)\n    \n    y_pred_train = model.predict(X_train)\n    train_scores.append(accuracy_score(y_train, y_pred_train))\n    \n    y_pred_valid = model.predict(X_valid)\n    valid_scores.append(accuracy_score(y_valid, y_pred_valid))\n\nsns.lineplot(x = gamma_array, y = train_scores, color = 'skyblue', label = 'train')\nsns.lineplot(x = gamma_array, y = valid_scores, color = 'orange', label = 'valid')\nplt.show()","139047ee":"model = SVC(C = 3, gamma = .17, random_state=123)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u7d50\u679c\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])\nprint('score:', accuracy_score(y_valid, y_pred))\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","c17e22d2":"valid_score_matrix = np.zeros([C_array.shape[0], gamma_array.shape[0]])\n\nfor i, gamma in enumerate(gamma_array):\n    for j, C in enumerate(C_array):\n        model = SVC(C = C, gamma = gamma, random_state = 123)\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_valid)\n        valid_score_matrix[i, j] = accuracy_score(y_valid, y_pred)\n\nvalid_score_df = pd.DataFrame(valid_score_matrix, index = gamma_array, columns = C_array)\nvalid_score_df.head()","fbebe699":"plt.figure(figsize=(16, 16))\nsns.heatmap(valid_score_df, annot = True, fmt = '.4f')\nplt.xlabel('C')\nplt.ylabel('gamma')\nplt.show()","5ad217c2":"model = SVC(C = 3.5, gamma = 0.15, random_state=123) # test score: 0.66985\n# model = SVC(C = 8.0, gamma = 0.1, random_state=123) # test score: 0.58851\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_valid)\n\n# \u4e88\u6e2c\u7d50\u679c\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])\nprint('score:', accuracy_score(y_valid, y_pred))\nsns.heatmap(confusion_matrix(y_valid, y_pred), annot=True, fmt='d')","371d1506":"def preprocess(df):\n    df['Sex'] = df['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n    guess_ages = np.zeros((2,3))\n    guess_ages\n\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = df[(df['Sex'] == i) & \\\n                                  (df['Pclass'] == j+1)]['Age'].dropna()\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n\n    for i in range(0, 2):\n        for j in range(0, 3):\n            df.loc[ (df.Age.isnull()) & (df.Sex == i) & (df.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    df['Age'] = df['Age'].astype(int)\n\n    # drop\n    df = df.drop(['Ticket', 'Cabin', 'PassengerId', 'Name', 'Embarked'], axis=1)\n    \n    # scaling\n    scaler = StandardScaler()\n    df.iloc[:, 1:] = scaler.fit_transform(df.iloc[:, 1:])\n    df.head()\n    return df","ee680640":"# passengerId \u306f Submit \u306b\u5fc5\u8981\u306a\u306e\u3067\u3068\u3063\u3066\u304a\u304f\npassenger_id = test_df[\"PassengerId\"].copy()\n\n# \u524d\u51e6\u7406\uff08test \u30c7\u30fc\u30bf\u306b\u306f Fare == nan \u306e\u30b5\u30f3\u30d7\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u66ab\u5b9a\u51e6\u7f6e\u3068\u3057\u3066 fillna\uff09\nX_test = preprocess(test_df.fillna(0))\nX_test.head()","ca1bd986":"y_pred = model.predict(X_test)\nprint(y_pred)\nprint('freq:', Counter(y_pred), '\/ratio:', np.array([v for v in Counter(y_pred).values()]) \/ y_pred.shape[0])","a6d480a5":"submission_df = pd.DataFrame({\n        \"PassengerId\": passenger_id,\n        \"Survived\": y_pred\n    })\ndisplay(submission_df.head())\nsubmission_df.to_csv('.\/submission.csv', index=False)","19ba93c7":"# Libraries","bb999cf2":"\u3000C = 3.5, gamma = 0.15 \u3068 C = 8.0, gamma = 0.1 \u306e\u6642\u304c\u3082\u3063\u3068\u3082\u7cbe\u5ea6\u304c\u9ad8\u3044\uff0e\u5f8c\u8ff0\u306e\u5de5\u7a0b\u3067\u3069\u3061\u3089\u3082 Submit \u3057\u3066\u307f\u305f\u7d50\u679c\u524d\u8005\u306e\u65b9\u304c test \u30c7\u30fc\u30bf\u3067\u306e\u30b9\u30b3\u30a2\u304c\u3088\u304b\u3063\u305f\u305f\u3081\uff0c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u306f\u524d\u8005\u3092\u63a1\u7528\uff0e","90e81bdd":"## \uff12\uff0e\uff12\uff0e\u30c7\u30fc\u30bf\u3092\u6539\u3081\u308b\uff08\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff09\n\u3000\u4ee5\u4e0b\uff0c[Titanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\u3092\u53c2\u8003\u306b\uff0c\u30e2\u30c7\u30eb\u306e\u5165\u529b\u3068\u306a\u308b\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\u3092\u9032\u3081\u308b\uff0e","49294e7e":"\u4ee5\u4e0a\u306e\u4f8b\u3067\u306f C = 3.0 \u3042\u305f\u308a\u3092\u5883\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u30b9\u30b3\u30a2\u304c\u4e0b\u304c\u308a\u59cb\u3081\u308b\u3053\u3068\u304b\u3089\uff0c\u4ed6\u306e\u5024\u3092\u56fa\u5b9a\u3057\u305f\u5834\u5408\u306b\u6700\u9069\u306a C \u306e\u5024\u306f\u304a\u3088\u305d 3.0 \u3067\u3042\u308b\u3068\u8a00\u3048\u308b\uff0e\nC = 3.0 \u306b\u56fa\u5b9a\u3057\u305f\u5834\u5408\u306e gamma \u306e\u6700\u9069\u306a\u5024\u3092\u6c42\u3081\u308b\uff0e  \ngamma \u306e\u521d\u671f\u5024\u306f 1 \/ sample size \u3067\u3042\u308b\u304b\u3089\u4eca\u56de\u306e\u5834\u5408\u306f 1 \/ 668 = 0.00149\uff0e\u3053\u306e\u5024\u3092\u306a\u3093\u3068\u306a\u304f\u542b\u3080\u7bc4\u56f2\u3067\u63a2\u7d22\uff0e","f66bb981":"## \uff11\uff0e\uff12\uff0e\u4f7f\u3046\u30e2\u30c7\u30eb\u3092\u8003\u3048\u308b\nscikit-learn \u306e WEB \u30b5\u30a4\u30c8\u306e\u30d5\u30ed\u30fc\u56f3\u304c\u53c2\u8003\u306b\u306a\u308b\uff08[Choosing the right estimator](https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html)\uff09\uff0e\u4ee5\u4e0b\u306f\u89b3\u70b9\u306e\u4f8b\uff0e\n- \u30e9\u30d9\u30eb\u4e88\u6e2c\u304b\u9023\u7d9a\u5024\u306e\u4e88\u6e2c\u304b\n    - \u30e9\u30d9\u30eb\u306e\u4e88\u6e2c\u306a\u3089\u5206\u985e\u30e2\u30c7\u30eb\n    - \u9023\u7d9a\u5024\u306e\u4e88\u6e2c\u306a\u3089\u56de\u5e30\u30e2\u30c7\u30eb\n- \u7cbe\u5ea6\u304b\u89e3\u91c8\u6027\u304b\n    - \u7cbe\u5ea6\u512a\u5148\uff08\u753b\u50cf\u8a8d\u8b58\u3084\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u3069\uff0c\u51fa\u3059\u3082\u306e\u51fa\u305b\u3070\u3088\u3044\u7cfb\uff09\u306a\u3089\u6df1\u5c64\u5b66\u7fd2\u3084 SVM\n    - \u89e3\u91c8\u6027\u304c\u5fc5\u8981\uff08\u610f\u601d\u6c7a\u5b9a\u306e\u305f\u3081\u306e\u5206\u6790\uff09\u306a\u3089\u91cd\u56de\u5e30\u3084\u6c7a\u5b9a\u6728\n- \u30c7\u30fc\u30bf\u91cf\n    - \u5c11\u306a\u3059\u304e\u308b\u5834\u5408\uff1a\u30c7\u30fc\u30bf\u96c6\u3081\u308b\u3068\u3053\u308d\u304b\u3089\u3084\u308a\u306a\u304a\u3059\n    - 100,000 \u4ef6\u672a\u6e80\uff1a\u5272\u3068\u81ea\u7531\u306b\u30e2\u30c7\u30eb\u3092\u9078\u3079\u308b\uff0e\u6df1\u5c64\u5b66\u7fd2\u7b49\u306f\u30bf\u30b9\u30af\u306b\u3088\u3063\u3066\u306f\u30c7\u30fc\u30bf\u91cf\u304c\u8db3\u308a\u306a\u3044\uff1f\uff08\u8a73\u3057\u3044\u4eba\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\n    - 100,000 \u4ef6\u4ee5\u4e0a:\uff11\u5ea6\u306e\u8a08\u7b97\u91cf\u304c\u591a\u3044\u624b\u6cd5\u306f\u3064\u3089\u304f\u306a\u3063\u3066\u304f\u308b\uff0e\u6df1\u5c64\u5b66\u7fd2\u306f\u9010\u6b21\u5b66\u7fd2\u53ef\u80fd\u306a\u306e\u3067\u3084\u308a\u3088\u3046\u306f\u3042\u308b\uff0e\u3044\u305a\u308c\u3082\u304a\u91d1\u6b21\u7b2c\uff0e\n\n\u4eca\u56de\u306f\u7cbe\u5ea6\u304c\u5168\u3066\u3067\u30c7\u30fc\u30bf\u3082\u591a\u304f\u306f\u306a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a SVC \u306b\u3059\u308b\uff0eSVM\u6700\u5f37\uff01\uff01\uff08\u500b\u4eba\u306e\u611f\u60f3\uff09","8a5af9d4":"# \uff12\uff0e\u6539\u5584\n## \uff12\uff0e\uff11\uff0e\u539f\u56e0\u306b\u3042\u305f\u308a\u3092\u3064\u3051\u308b","2232aefc":"## \uff11\uff0e\uff11\uff0e\u3068\u308a\u3042\u3048\u305a\u30c7\u30fc\u30bf\u898b\u308b\n\u57fa\u790e\u7d71\u8a08\u91cf\u3084\u9805\u76ee\u9593\u306e\u76f8\u95a2\u7b49\u3092\u982d\u306b\u5165\u308c\u3066\u304a\u304f\uff0e\u4ee5\u4e0b\u6240\u611f\uff0e\n- \u4ef6\u6570\uff1a891\u4ef6\n    - \u305d\u3093\u306a\u306b\u591a\u304f\u306a\u3044\uff0e\n- \u8aac\u660e\u5909\u6570\n    - PassengerID: \u7121\u8996\u3067\u3088\u3055\u305d\u3046\n    - Pclass: \u90e8\u5c4b\u306e\u968e\u7d1a\uff1f\u907f\u96e3\u7d4c\u8def\u3068\u304b\u512a\u9047\u3055\u308c\u65b9\u306b\u5f71\u97ff\u3057\u305d\u3046\uff0e\n    - Name: \u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u306f\u3042\u308a\u3048\u306a\u3044\u3051\u3069\u656c\u79f0\u306f\u4f7f\u3048\u305d\u3046\uff0e\n    - Sex: \u3081\u3063\u3061\u3083\u4f7f\u3048\u305d\u3046\n    - Age: \u751f\u304d\u6b7b\u306b\u306b\u95a2\u4fc2\u3057\u305d\u3046\u3060\u304c\uff0c\u4eba\u9593\u304c\u6551\u52a9\u306e\u512a\u5148\u5ea6\u3092\u8003\u3048\u308b\u3068\u304d\u5e74\u9f62\u3088\u308a\u8352\u3044\u7c92\u5ea6\uff08\u5b50\u4f9b\uff0f\u5927\u4eba\uff0f\u8001\u4eba\uff09\u3067\u8003\u3048\u305d\u3046\u3060\u304b\u3089\u4e38\u3081\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\uff0e\n    - SibSp: Sibling\uff08\u5144\u5f1f\uff09\u3068Spous\uff08\u914d\u5076\u8005\uff09\u306e\u6570\u3089\u3057\u3044\uff0e\u76f8\u95a2\u306a\u3055\u305d\u3046\uff0e\n    - Ticket: \u6570\u5b57\u304c\u4f55\u3092\u5dee\u3059\u304b\u308f\u304b\u3089\u306a\u3044\u3051\u3069 Fare \u3068\u5f79\u5272\u304c\u88ab\u308a\u305d\u3046\uff1f\n    - Fare: \u4f7f\u3048\u305d\u3046\uff0ePclass \u3068\u76f8\u95a2\u3042\u308a\u305d\u3046\uff0e\n    - Parch: \u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570\u3089\u3057\u3044\uff0e\u751f\u304d\u6b7b\u306b\u306b\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\uff0e\n    - Fare: \u6570\u5024\u3063\u307d\u3044\u3051\u3069 1 \u523b\u307f\u3067\u5024\u6bb5\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u3068\u3057\u3066\u8003\u3048\u3066\u3082\u3044\u3044\u304b\u3082\n- \u76ee\u7684\u5909\u6570\uff08Survived\uff09\n    - 0:1 = 549:342 \u21d2 \u5168\u54e1 0 \uff08\u6b7b\uff09\u3068\u4e88\u6e2c\u3057\u305f\u3089\u7cbe\u5ea6 61%","b8a76063":"### \uff12\uff0e\uff12\uff0e\uff13\uff0e\u8981\u3089\u306a\u3044\u7279\u5fb4\u91cf\u3092\u5207\u308a\u6368\u3066\u308b\nCabin \u306f\u6b20\u640d\u304c\u591a\u304f\uff0c Ticket \u306f\u8b0e\u304c\u591a\u3044\uff0e\u3044\u305a\u308c\u3082\u5207\u308a\u6368\u3066\u308b\uff0e  \nPassengerId, Name, Embarked \u3082\u4eca\u56de\u306f\u5207\u308a\u6368\u3066\uff0e","0a360b2e":"# \uff13\uff0eSubmit\ntrain \u30c7\u30fc\u30bf\u306b\u3084\u3063\u305f\u51e6\u7406\u3092 test \u306b\u3082\u65bd\u3057\u305f\u4e0a\u3067\uff0c \u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u3081\u305f\u30e2\u30c7\u30eb\u3067\u63a8\u8ad6\u3092\u884c\u3044\uff0cSubmit\u3059\u308b\uff0e  \n\u524d\u51e6\u7406\u3092\u95a2\u6570\u306b\u307e\u3068\u3081\u3066\u304a\u304f\u3068\u697d\uff0e","d209cd2d":"### \uff12\uff0e\uff12\uff0e\uff12\uff0e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30c0\u30df\u30fc\u5909\u6570\u5316\u3059\u308b\nSVC \u306e\u5165\u529b\u5024\u306f\u6570\u5024\u578b\uff0e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5927\u5c0f\u306e\u6982\u5ff5\u304c\u3042\u308b\u3068\u597d\u307e\u3057\u304f\u306a\u3044\u5834\u5408\u304c\u3042\u308b\uff0e\u3042\u308b\u5024\u3092\u967d\u6027\u304b\u9670\u6027\u304b\u306e 2 \u5024\u3067\u8868\u73fe\u3059\u308b\u8907\u6570\u306e\u5217\u306b\u5909\u63db\u3059\u308b\uff0e  \n\u4eca\u56de\u306f\u8a72\u5f53\u7121\u3057\uff08Sex \u306f\u3082\u3068\u3082\u3068 2 \u5024\u306a\u306e\u3067\u305d\u306e\u307e\u307e\uff0fPclass \u306f\u5024\u306e\u5927\u5c0f\u3068\u8ca0\u306e\u76f8\u95a2\u304c\u3042\u308b\uff081 \u306b\u8fd1\u3044\u307b\u3069\u751f\u5b58\u7387\u304c\u9ad8\u3044\uff1b\u6570\u306b\u610f\u5473\u304c\u3042\u308b\uff09\u305f\u3081\u30c0\u30df\u30fc\u5909\u6570\u5316\u4e0d\u8981\uff09","aef865b3":"## \uff12\uff0e\uff14\uff0e \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6539\u3081\u308b\n\u3000SVM \u306e\u4e3b\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\uff0c \u9593\u9055\u3044\u3092\u8a31\u5bb9\u3059\u308b\u5ea6\u5408\u3044\uff08\u4ee5\u4e0b\uff0cC\uff09\u3084\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u6b63\u5247\u5316\u306e\u5ea6\u5408\u3044\uff08\u4ee5\u4e0b\uff0cgamma\uff09\u306a\u3069\u304c\u3042\u308b\uff0e\u3053\u3053\u3067\u306f\u9023\u7d9a\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf C \u306e\u6700\u9069\u5024\u3092\u5b9f\u9a13\u3067\u6c42\u3081\u308b\uff0e  \n\u3000\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6a2a\u8ef8\uff0c\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u7e26\u8ef8\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f validation curve \u3092\u7528\u3044\u3066\u5b66\u7fd2\u306e\u69d8\u5b50\u3092\u53ef\u8996\u5316\u3059\u308b\uff0eSVM \u306e\u30d1\u30e9\u30e1\u30fc\u30bf C \u306e\u5834\u5408\uff0c\u5024\u3092\u5927\u304d\u304f\u3057\u3066\u3044\u304f\u3068\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u30b9\u30b3\u30a2\u306f\u4e0a\u304c\u308a\u7d9a\u3051\u308b\uff08\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3078\u306e\u904e\u5270\u9069\u5408\u304c\u9032\u3080\uff09\u4e00\u65b9\u3067\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u30b9\u30b3\u30a2\u306f\u3042\u308b\u5024\u3092\u5883\u754c\u306b\u4e0b\u304c\u308a\u59cb\u3081\u308b\uff0e\u4e0b\u304c\u308a\u59cb\u3081\u308b\u76f4\u524d\u306e\u5024\u304c\u6700\u9069\u306a\u5024\u3067\u3042\u308b\uff0e  ","e2f420a9":"### \uff12\uff0e\uff12\uff0e\uff14\uff0e\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\nRBF \u30ab\u30fc\u30cd\u30eb\u306f\u5185\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u5909\u6570\u9593\u3067\u7d76\u5bfe\u5024\u306e\u5dee\u304c\u5927\u304d\u3044\u3068\u4e0a\u624b\u304f\u6a5f\u80fd\u3057\u306a\u3044\uff0e  \n\u540d\u7fa9\u5c3a\u5ea6\u306e\u4ee5\u5916\u306e\u5909\u6570\u3092\uff0c\u5e73\u5747 0 \u5206\u6563 1 \u3068\u306a\u308b\u3088\u3046\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3053\u308c\u3092\u56de\u907f\u3059\u308b\uff0e","342bb024":"---\n### \u53c2\u8003\u8cc7\u6599\u30fb\u88dc\u8db3\u8cc7\u6599\n- [\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u5099\u5fd8\u9332](https:\/\/qiita.com\/risako_\/items\/91ea7f34433bfa2ea40c)\uff08Qiita \u8a18\u4e8b\uff09\n- [Kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6280\u8853](https:\/\/www.amazon.co.jp\/Kaggle%E3%81%A7%E5%8B%9D%E3%81%A4%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E3%81%AE%E6%8A%80%E8%A1%93-%E9%96%80%E8%84%87-%E5%A4%A7%E8%BC%94\/dp\/4297108437)\uff08\u66f8\u7c4d\uff09","afc4c5f8":"\u3000\u4e00\u822c\u306b\u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\uff0c\u507d\u967d\u6027\u7387\u30fb\u507d\u9670\u6027\u7387\u304c\u9ad8\u3044\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u5224\u5225\u3059\u308b\u306e\u306b\u3088\u308a\u6709\u7528\u306a\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3068\u3044\u3046\u65b9\u91dd\u304c\u8003\u3048\u3089\u308c\u308b\uff0e\u4eca\u56de\u306f 2 \u5024\u5206\u985e\u306a\u306e\u3067\uff0c\u3068\u306b\u304b\u304f\u6b7b\u4ea1\u3068\u751f\u5b58\u3092\u898b\u5206\u3051\u308b\u306e\u306b\u53c2\u8003\u306b\u306a\u308b\u3088\u3046\u306a\u60c5\u5831\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\uff0e  \n\u3000\u53c8\uff0c\u76ee\u7684\u5909\u6570\u306e\u5024\u304c\u3044\u305a\u308c\u304b\u306e\u5024\u306b\u504f\u3063\u3066\u3044\u308b\u4e0d\u5747\u8861\u306a\u30c7\u30fc\u30bf\u306e\u5834\u5408\uff0c\u30e2\u30c7\u30eb\u304c\u305d\u306e\u504f\u308a\u81ea\u4f53\u3092\u5b66\u7fd2\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\uff0e\u3053\u306e\u5834\u5408\u5c64\u5316\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff08\u5404\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\u304b\u3089\u5747\u7b49\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\uff09\u306a\u3069\u3092\u691c\u8a0e\u3059\u308b\uff0e\u4eca\u56de\u306f\u305d\u3053\u307e\u3067\u4e0d\u5747\u8861\u3067\u306a\u3044\uff08\u9670\u6027:\u967d\u6027 = 6:4 \u304f\u3089\u3044\uff09\u306e\u3067\uff0c\u7279\u5fb4\u91cf\u306e\u898b\u76f4\u3057\u7b49\u3092\u901a\u3057\u3066\u6539\u5584\u3055\u308c\u308b\u3053\u3068\u3092\u671f\u5f85\uff0e","b42663e6":"\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u5f8c\u306e\u7cbe\u5ea6\uff0e\u7d50\u69cb\u4e0a\u304c\u3063\u3066\u3044\u308b\uff0e","ca494eb8":"0.17 \u304f\u3089\u3044\u3092\u5883\u306b validation \u30c7\u30fc\u30bf\u306e\u30b9\u30b3\u30a2\u304c\u4e0b\u304c\u308a\u59cb\u3081\u308b\u305f\u3081\uff0cC = 3.0 \u306e\u5834\u5408\u306e gamma \u306e\u6700\u9069\u306a\u5024\u306f 0.17 \u3068\u3044\u3048\u308b\uff0e  \n\u3053\u308c\u3089\u306e\u5024\u3092\u7528\u3044\u3066\u4f5c\u6210\u3057\u305f\u7d50\u679c\u3092\u8a55\u4fa1\u3057\u3066\u307f\u308b\uff0e","fa6ed194":"\u3084\u308b\u3068\u3057\u305f\u3089 pandas.get_dummies \u95a2\u6570\u3092\u7528\u3044\u308b\uff0e","0c192f80":"\u7cbe\u5ea6\u304c\u82e5\u5e72\u4e0a\u304c\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\uff0e  \nC \u3092\u56fa\u5b9a\u3057\u306a\u3044\u5834\u5408\u306e C \u3068 gamma \u306e\u6700\u9069\u306a\u7d44\u307f\u5408\u308f\u305b\u306f\u3069\u3046\u3060\u308d\u3046\u304b\uff0e","48b4296c":"### \uff12\uff0e\uff12\uff0e\uff11\uff0e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\nAge \u306f\u6709\u7528\u305d\u3046\u306a\u306e\u3067\u88dc\u5b8c\u3059\u308b\uff0e\u6027\u30fb Pclass \u3054\u3068\u306e\u4e2d\u592e\u5024\u3092\u7b97\u51fa\uff0e","a3030a23":"score \u306e\u5404\u7a2e\u7d71\u8a08\u91cf\u306b\u57fa\u3065\u304d\uff0c\u4eca\u56de\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u306b\u57fa\u3065\u304f StratifiedSampling \u3092\u63a1\u7528\uff0e  ","8b8f4651":"### \u3069\u306e\u3088\u3046\u306b\u5916\u3057\u3066\u3044\u308b\u304b\uff1f\uff1b\u6df7\u540c\u884c\u5217\u306e\u78ba\u8a8d\n\u3000\u6df7\u540c\u884c\u5217\u3067\u507d\u967d\u6027\u30fb\u507d\u9670\u6027\u306e\u591a\u5be1\u3092\u78ba\u8a8d\u3059\u308b\uff0e\u6b7b\u4ea1\u3092\u9670\u6027\uff0c\u751f\u5b58\u3092\u967d\u6027\u3060\u3068\u3059\u308b\u3068\uff0c\u4ee5\u4e0b\u306e\u4f8b\u3060\u3068\u507d\u9670\u6027\uff08\u8aa4\u3063\u3066\u6b7b\u4ea1\u3068\u5224\u5b9a\u3055\u308c\u305f\u4f8b\uff09\u304c\u591a\u3044\uff0e","c0e69813":"\u518d\u5ea6\u8a55\u4fa1\u3057\u3066\u307f\u308b  \n\u4f5c\u6210\u3057\u305f\u7279\u5fb4\u91cf\u3092\u7528\u3044\u3066\uff0c\u5192\u982d\u3068\u540c\u3058\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\uff0e\u82e5\u5e72\u7cbe\u5ea6\u304c\u4e0a\u304c\u3063\u3066\u3044\u308b\uff0e","fda21755":"## \uff11\uff0e\uff14\uff0e\u7cbe\u5ea6\u78ba\u8a8d\n\u3060\u3044\u305f\u3044\u6b8b\u5ff5\u306a\u7d50\u679c\u306b\u306a\u308b","d860f74a":"# \uff11\uff0e\u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u3064\u304f\u308b","a9796628":"# \u3053\u306e Notebook \u306e\u8981\u65e8\n\u3000\u3053\u306e Notebook \u3067\u306f\uff0c\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u3092\u984c\u6750\u306b\u5b9f\u52d9\u306b\u304a\u3051\u308b\u30e2\u30c7\u30eb\u69cb\u7bc9\u696d\u52d9\u306e\u6d41\u308c\u3092\u8aac\u660e\u3059\u308b\uff0e\u8cea\u7591\u5fdc\u7b54\u542b\u3081 1.0 h \u5f31\u307b\u3069\u3067\u306e\u8b1b\u7fa9\u3067\u4f7f\u7528\uff0e  \n\u3000Titanic \u3092\u984c\u6750\u306b\u3057\u305f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308b\uff0e\n \n- [Titanic Survival Predictions (Beginner)](https:\/\/www.kaggle.com\/nadintamer\/titanic-survival-predictions-beginner)\uff08\u7c21\u6f54\u3067\u8aad\u307f\u3084\u3059\u3044\uff09\n- [Titanic Data Science Solutions](https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions)\uff08\u3061\u3087\u3063\u3068\u8aad\u307f\u7269\u98a8\uff09\n\n\u3000\u3044\u305a\u308c\u3082\u6210\u529f\u30d1\u30bf\u30fc\u30f3\u3092\u982d\u304b\u3089\u306a\u305e\u3063\u305f\u3082\u306e\u3067\uff0c\u5b9f\u52d9\u306b\u306f\u7a0b\u9060\u3044\uff0e\u5b9f\u52d9\u306b\u8fd1\u3044\u6d41\u308c\u3092\u304b\u3044\u3064\u307e\u3093\u3067\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u308b\uff0e\n\n# \u76ee\u6b21\n1. \u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u3064\u304f\u308b\n    1. \u3068\u308a\u3042\u3048\u305a\u30c7\u30fc\u30bf\u898b\u308b\n    2. \u4f7f\u3046\u30e2\u30c7\u30eb\u3092\u8003\u3048\u308b\n    3. \u96d1\u306b\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308b\n    4. \u7cbe\u5ea6\u78ba\u8a8d\n2. \u6539\u5584\n    1. \u539f\u56e0\u306b\u3042\u305f\u308a\u3092\u3064\u3051\u308b\n    2. \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u6539\u3081\u308b\n    2. \u7279\u5fb4\u91cf\u3092\u6539\u3081\u308b\n    3. \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6539\u3081\u308b\n3. Submit","8bc278f5":"## \uff12\uff0e\uff13\uff0e\u30c7\u30fc\u30bf\u3092\u6539\u3081\u308b\uff08\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff09\n\u4e0e\u3048\u3089\u308c\u305f\u6559\u5e2b\u30e9\u30d9\u30eb\u4ed8\u304d\u30b5\u30f3\u30d7\u30eb\uff08train.csv\uff09\u3092 train \u30c7\u30fc\u30bf\u3068 validation \u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u3053\u3068\u306f\u5148\u306b\u8aac\u660e\u3057\u305f\uff0e  \ntrain \u3068 validation \u306b\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u969b\uff0c\u610f\u56f3\u305b\u305a\u30c7\u30fc\u30bf\u304c\u504f\u308b\u3053\u3068\u3092\u9632\u3050\u65b9\u6cd5\u3068\u3057\u3066\uff0ccross validation \u306b\u3088\u3063\u3066\u30e2\u30c7\u30eb\u306e\u30b9\u30b3\u30a2\u306e\u3070\u3089\u3064\u304d\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308b\uff0e  ","62734769":"## \uff11\uff0e\uff13\uff0e\u96d1\u306b\u30e2\u30c7\u30eb\u3092\u3064\u304f\u308b\n\u3000\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304b\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u96d1\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\uff0e\u3084\u308a\u305f\u3044\u3053\u3068\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u306e\u7c92\u5ea6\u304c\u304a\u304b\u3057\u3044\u5834\u5408\u3053\u306e\u6642\u70b9\u3067\u6c17\u3065\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff08\u4f8b\u3048\u3070\uff0c\u8eca\u306e\u4e8b\u6545\u3054\u3068\u306b\u4eba\u9593\u306e\u751f\u6b7b\u3092\u4e88\u6e2c\u3057\u305f\u3044\u306e\u306b\uff0c\u5951\u7d04\u8005\u5358\u4f4d\u306e\u30c7\u30fc\u30bf\u3057\u304b\u7121\u3044\u5834\u5408\u306a\u3069\uff09\uff0e\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u5b9f\u73fe\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u304c\u660e\u3089\u304b\u306b\u308f\u304b\u308b\u5834\u5408\uff0c\u3053\u306e\u30d5\u30a7\u30fc\u30ba\u306f\u98db\u3070\u3057\u3066\u3044\u304d\u306a\u308a\u7279\u5fb4\u91cf\u4f5c\u308a\u8fbc\u3093\u3067\u3082\u3044\u3044\u3068\u601d\u3046\uff08\uff1f\uff09\uff0e  \n\u3000\u5c1a\uff0c\u30c7\u30fc\u30bf\u306f train, valid, test \u306e 3 \u7a2e\u985e\u3067\u8003\u3048\u308b\uff0e train \u3067\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3057\uff0c valid \u3067\u5b66\u7fd2\u304c\u9069\u5207\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\u3092\u884c\u3044\uff08validation \u3068\u8a00\u3046\uff1b\u5f8c\u8ff0\uff09\uff0c test \u3092\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092 Submit \u3059\u308b\uff0e"}}