{"cell_type":{"4a753dc8":"code","ebcc3c0d":"code","ee76e185":"code","0139ae9c":"code","d7fc76d3":"code","f497af83":"code","aad24ba3":"code","ea20e2ea":"code","884e35e6":"code","6c012d4b":"code","c209c703":"code","8d76aea5":"code","5634e31a":"code","77a7157e":"code","09a01e7a":"code","cfe2911f":"code","9934cbfe":"code","293195a9":"code","70438e67":"code","61349255":"code","4af03c81":"code","a72690cf":"code","eb72a792":"code","f4aad690":"code","8aede62c":"code","b07a9dd2":"code","efc244dc":"code","424059c3":"code","d742eacd":"code","564817e4":"code","e99d25f5":"code","14edb4fa":"code","b689c5e9":"code","2d17fba6":"code","0b77f704":"code","7f0a5488":"code","20c284bd":"code","1af27cae":"code","4e00e2c0":"code","69437c41":"code","ca7b0bf8":"code","72aea456":"code","f49253b8":"code","cfec5d25":"code","6f2b19bb":"code","a7f03d83":"code","50eaf33f":"code","9f20636b":"code","e1b10d0e":"code","07dbbfc2":"code","0a4df2da":"code","01a93131":"code","235b0173":"code","12cc2ca1":"code","89dc6678":"code","580e6d88":"code","4fe91775":"code","ebae666f":"code","12475844":"code","99b6da64":"code","720b606c":"code","21111092":"code","98f2bcaa":"code","c85f135a":"code","3d82f15c":"code","c047c5c8":"code","027ba941":"code","b1708387":"code","a9a35921":"code","7087b236":"code","3632f963":"code","8079902e":"code","0691b579":"code","5650139d":"code","eedff6a5":"code","a3dbe339":"code","436af44d":"code","875f31db":"code","4b9e1911":"markdown","1a572764":"markdown","7cfa8447":"markdown","1e9e204c":"markdown","9e9c580c":"markdown","947cec04":"markdown","8c2c5d67":"markdown","e7321577":"markdown","f3c14e1a":"markdown","d0517231":"markdown","8cea5130":"markdown","afbf25b9":"markdown","29865d3b":"markdown","e0f9fbe9":"markdown","736aa1fe":"markdown","22a45191":"markdown","40db5a45":"markdown","e1791460":"markdown","ae37e320":"markdown","62516f76":"markdown","7aeb553d":"markdown","539568ac":"markdown","a000560a":"markdown","ec2b0cfb":"markdown","05ca1c97":"markdown","bd4c0a19":"markdown","c688a092":"markdown","b77f2cc1":"markdown","e74f0cda":"markdown","b875c397":"markdown","de0b7a56":"markdown","c79397d8":"markdown","c865c30e":"markdown","f6d89c29":"markdown","9692780f":"markdown","a2d64fa8":"markdown","94683b0d":"markdown","3bfe3acb":"markdown","fa312724":"markdown","e692b803":"markdown","68367d85":"markdown","96dc1c39":"markdown","25b7005f":"markdown","f7a714a1":"markdown","ee3859bf":"markdown","1718e61d":"markdown","38e3ec0e":"markdown","23f36b6d":"markdown","038fbc96":"markdown","014b1a30":"markdown","d6c69edb":"markdown","1b288cde":"markdown","9086ec39":"markdown","94777bda":"markdown","b3020e21":"markdown","2738c709":"markdown","4c682f09":"markdown","6799dde8":"markdown","09549b24":"markdown","73b2d414":"markdown","7f87b9f5":"markdown","4203e43c":"markdown","ba7953b5":"markdown","6f5403a7":"markdown","970d8562":"markdown","e7b6c582":"markdown","990009fe":"markdown","580c2b62":"markdown","b92d75af":"markdown","7dc4ac30":"markdown","80dc6641":"markdown","44cc1508":"markdown","170e58ec":"markdown","4069752f":"markdown","045d3850":"markdown","65d39d9c":"markdown","957d018b":"markdown","96376915":"markdown","88ba4157":"markdown","b7624995":"markdown","475caa04":"markdown","10d2a662":"markdown","e3987799":"markdown","078a554a":"markdown","af2d9107":"markdown","b1c699bb":"markdown","cf004f21":"markdown","451a5906":"markdown","19a7ac53":"markdown","88cd50fc":"markdown","6ae807f6":"markdown","7b6246db":"markdown","57757613":"markdown","f02882e8":"markdown","f1059524":"markdown","6b888f8e":"markdown","75a8f6d2":"markdown","6ae47a2f":"markdown","be1a4a3e":"markdown","17e35569":"markdown","fc48b7e0":"markdown","11df4f67":"markdown","30f78ecc":"markdown","6c2bd885":"markdown"},"source":{"4a753dc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization purposes\nimport seaborn as sns # for data visualization\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","ebcc3c0d":"import warnings\n\nwarnings.filterwarnings('ignore')","ee76e185":"data = '\/kaggle\/input\/uci-breast-cancer-wisconsin-original\/breast-cancer-wisconsin.data.txt'\n\ndf = pd.read_csv(data, header=None)","0139ae9c":"# view dimensions of dataset\n\ndf.shape","d7fc76d3":"# preview the dataset\n\ndf.head()","f497af83":"col_names = ['Id', 'Clump_thickness', 'Uniformity_Cell_Size', 'Uniformity_Cell_Shape', 'Marginal_Adhesion', \n             'Single_Epithelial_Cell_Size', 'Bare_Nuclei', 'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class']\n\ndf.columns = col_names\n\ndf.columns","aad24ba3":"# let's agian preview the dataset\n\ndf.head()","ea20e2ea":"# drop Id column from dataset\n\ndf.drop('Id', axis=1, inplace=True)","884e35e6":"# view summary of dataset\n\ndf.info()","6c012d4b":"for var in df.columns:\n    \n    print(df[var].value_counts())\n","c209c703":"df['Bare_Nuclei'] = pd.to_numeric(df['Bare_Nuclei'], errors='coerce')","8d76aea5":"df.dtypes","5634e31a":"# check missing values in variables\n\ndf.isnull().sum()","77a7157e":"# check `na` values in the dataframe\n\ndf.isna().sum()","09a01e7a":"# check frequency distribution of `Bare_Nuclei` column\n\ndf['Bare_Nuclei'].value_counts()","cfe2911f":"# check unique values in `Bare_Nuclei` column\n\ndf['Bare_Nuclei'].unique()","9934cbfe":"# check for nan values in `Bare_Nuclei` column\n\ndf['Bare_Nuclei'].isna().sum()","293195a9":"# view frequency distribution of values in `Class` variable\n\ndf['Class'].value_counts()","70438e67":"# view percentage of frequency distribution of values in `Class` variable\n\ndf['Class'].value_counts()\/np.float(len(df))","61349255":"# view summary statistics in numerical variables\n\nprint(round(df.describe(),2))","4af03c81":"# plot histograms of the variables\n\n\nplt.rcParams['figure.figsize']=(30,25)\n\ndf.plot(kind='hist', bins=10, subplots=True, layout=(5,2), sharex=False, sharey=False)\n\nplt.show()","a72690cf":"correlation = df.corr()","eb72a792":"correlation['Class'].sort_values(ascending=False)","f4aad690":"plt.figure(figsize=(10,8))\nplt.title('Correlation of Attributes with Class variable')\na = sns.heatmap(correlation, square=True, annot=True, fmt='.2f', linecolor='white')\na.set_xticklabels(a.get_xticklabels(), rotation=90)\na.set_yticklabels(a.get_yticklabels(), rotation=30)           \nplt.show()","8aede62c":"X = df.drop(['Class'], axis=1)\n\ny = df['Class']","b07a9dd2":"# split X and y into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n","efc244dc":"# check the shape of X_train and X_test\n\nX_train.shape, X_test.shape","424059c3":"# check data types in X_train\n\nX_train.dtypes","d742eacd":"# check missing values in numerical variables in X_train\n\nX_train.isnull().sum()","564817e4":"# check missing values in numerical variables in X_test\n\nX_test.isnull().sum()","e99d25f5":"# print percentage of missing values in the numerical variables in training set\n\nfor col in X_train.columns:\n    if X_train[col].isnull().mean()>0:\n        print(col, round(X_train[col].isnull().mean(),4))","14edb4fa":"# impute missing values in X_train and X_test with respective column median in X_train\n\nfor df1 in [X_train, X_test]:\n    for col in X_train.columns:\n        col_median=X_train[col].median()\n        df1[col].fillna(col_median, inplace=True)           \n      ","b689c5e9":"# check again missing values in numerical variables in X_train\n\nX_train.isnull().sum()","2d17fba6":"# check missing values in numerical variables in X_test\n\nX_test.isnull().sum()","0b77f704":"X_train.head()","7f0a5488":"X_test.head()","20c284bd":"cols = X_train.columns","1af27cae":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\n\nX_test = scaler.transform(X_test)\n","4e00e2c0":"X_train = pd.DataFrame(X_train, columns=[cols])","69437c41":"X_test = pd.DataFrame(X_test, columns=[cols])","ca7b0bf8":"X_train.head()","72aea456":"# import KNeighbors ClaSSifier from sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# instantiate the model\nknn = KNeighborsClassifier(n_neighbors=3)\n\n\n# fit the model to the training set\nknn.fit(X_train, y_train)\n","f49253b8":"y_pred = knn.predict(X_test)\n\ny_pred","cfec5d25":"# probability of getting output as 2 - benign cancer\n\nknn.predict_proba(X_test)[:,0]","6f2b19bb":"# probability of getting output as 4 - malignant cancer\n\nknn.predict_proba(X_test)[:,1]","a7f03d83":"from sklearn.metrics import accuracy_score\n\nprint('Model accuracy score: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))","50eaf33f":"y_pred_train = knn.predict(X_train)","9f20636b":"print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))","e1b10d0e":"# print the scores on training and test set\n\nprint('Training set score: {:.4f}'.format(knn.score(X_train, y_train)))\n\nprint('Test set score: {:.4f}'.format(knn.score(X_test, y_test)))","07dbbfc2":"# check class distribution in test set\n\ny_test.value_counts()","0a4df2da":"# check null accuracy score\n\nnull_accuracy = (85\/(85+55))\n\nprint('Null accuracy score: {0:0.4f}'. format(null_accuracy))","01a93131":"# instantiate the model with k=5\nknn_5 = KNeighborsClassifier(n_neighbors=5)\n\n\n# fit the model to the training set\nknn_5.fit(X_train, y_train)\n\n\n# predict on the test-set\ny_pred_5 = knn_5.predict(X_test)\n\n\nprint('Model accuracy score with k=5 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_5)))","235b0173":"# instantiate the model with k=6\nknn_6 = KNeighborsClassifier(n_neighbors=6)\n\n\n# fit the model to the training set\nknn_6.fit(X_train, y_train)\n\n\n# predict on the test-set\ny_pred_6 = knn_6.predict(X_test)\n\n\nprint('Model accuracy score with k=6 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_6)))","12cc2ca1":"# instantiate the model with k=7\nknn_7 = KNeighborsClassifier(n_neighbors=7)\n\n\n# fit the model to the training set\nknn_7.fit(X_train, y_train)\n\n\n# predict on the test-set\ny_pred_7 = knn_7.predict(X_test)\n\n\nprint('Model accuracy score with k=7 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_7)))","89dc6678":"# instantiate the model with k=8\nknn_8 = KNeighborsClassifier(n_neighbors=8)\n\n\n# fit the model to the training set\nknn_8.fit(X_train, y_train)\n\n\n# predict on the test-set\ny_pred_8 = knn_8.predict(X_test)\n\n\nprint('Model accuracy score with k=8 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_8)))","580e6d88":"# instantiate the model with k=9\nknn_9 = KNeighborsClassifier(n_neighbors=9)\n\n\n# fit the model to the training set\nknn_9.fit(X_train, y_train)\n\n\n# predict on the test-set\ny_pred_9 = knn_9.predict(X_test)\n\n\nprint('Model accuracy score with k=9 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_9)))","4fe91775":"# Print the Confusion Matrix with k =3 and slice it into four pieces\n\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\n\nprint('Confusion matrix\\n\\n', cm)\n\nprint('\\nTrue Positives(TP) = ', cm[0,0])\n\nprint('\\nTrue Negatives(TN) = ', cm[1,1])\n\nprint('\\nFalse Positives(FP) = ', cm[0,1])\n\nprint('\\nFalse Negatives(FN) = ', cm[1,0])","ebae666f":"# Print the Confusion Matrix with k =7 and slice it into four pieces\n\ncm_7 = confusion_matrix(y_test, y_pred_7)\n\nprint('Confusion matrix\\n\\n', cm_7)\n\nprint('\\nTrue Positives(TP) = ', cm_7[0,0])\n\nprint('\\nTrue Negatives(TN) = ', cm_7[1,1])\n\nprint('\\nFalse Positives(FP) = ', cm_7[0,1])\n\nprint('\\nFalse Negatives(FN) = ', cm_7[1,0])","12475844":"# visualize confusion matrix with seaborn heatmap\n\nplt.figure(figsize=(6,4))\n\ncm_matrix = pd.DataFrame(data=cm_7, columns=['Actual Positive:1', 'Actual Negative:0'], \n                                 index=['Predict Positive:1', 'Predict Negative:0'])\n\nsns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')","99b6da64":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred_7))","720b606c":"TP = cm_7[0,0]\nTN = cm_7[1,1]\nFP = cm_7[0,1]\nFN = cm_7[1,0]","21111092":"# print classification accuracy\n\nclassification_accuracy = (TP + TN) \/ float(TP + TN + FP + FN)\n\nprint('Classification accuracy : {0:0.4f}'.format(classification_accuracy))\n","98f2bcaa":"# print classification error\n\nclassification_error = (FP + FN) \/ float(TP + TN + FP + FN)\n\nprint('Classification error : {0:0.4f}'.format(classification_error))\n","c85f135a":"# print precision score\n\nprecision = TP \/ float(TP + FP)\n\n\nprint('Precision : {0:0.4f}'.format(precision))\n","3d82f15c":"recall = TP \/ float(TP + FN)\n\nprint('Recall or Sensitivity : {0:0.4f}'.format(recall))","c047c5c8":"true_positive_rate = TP \/ float(TP + FN)\n\n\nprint('True Positive Rate : {0:0.4f}'.format(true_positive_rate))","027ba941":"false_positive_rate = FP \/ float(FP + TN)\n\n\nprint('False Positive Rate : {0:0.4f}'.format(false_positive_rate))","b1708387":"specificity = TN \/ (TN + FP)\n\nprint('Specificity : {0:0.4f}'.format(specificity))","a9a35921":"# print the first 10 predicted probabilities of two classes- 2 and 4\n\ny_pred_prob = knn.predict_proba(X_test)[0:10]\n\ny_pred_prob","7087b236":"# store the probabilities in dataframe\n\ny_pred_prob_df = pd.DataFrame(data=y_pred_prob, columns=['Prob of - benign cancer (2)', 'Prob of - malignant cancer (4)'])\n\ny_pred_prob_df","3632f963":"# print the first 10 predicted probabilities for class 4 - Probability of malignant cancer\n\nknn.predict_proba(X_test)[0:10, 1]","8079902e":"# store the predicted probabilities for class 4 - Probability of malignant cancer\n\ny_pred_1 = knn.predict_proba(X_test)[:, 1]","0691b579":"# plot histogram of predicted probabilities\n\n\n# adjust figure size\nplt.figure(figsize=(6,4))\n\n\n# adjust the font size \nplt.rcParams['font.size'] = 12\n\n\n# plot histogram with 10 bins\nplt.hist(y_pred_1, bins = 10)\n\n\n# set the title of predicted probabilities\nplt.title('Histogram of predicted probabilities of malignant cancer')\n\n\n# set the x-axis limit\nplt.xlim(0,1)\n\n\n# set the title\nplt.xlabel('Predicted probabilities of malignant cancer')\nplt.ylabel('Frequency')","5650139d":"# plot ROC Curve\n\nfrom sklearn.metrics import roc_curve\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_1, pos_label=4)\n\nplt.figure(figsize=(6,4))\n\nplt.plot(fpr, tpr, linewidth=2)\n\nplt.plot([0,1], [0,1], 'k--' )\n\nplt.rcParams['font.size'] = 12\n\nplt.title('ROC curve for Breast Cancer kNN classifier')\n\nplt.xlabel('False Positive Rate (1 - Specificity)')\n\nplt.ylabel('True Positive Rate (Sensitivity)')\n\nplt.show()\n","eedff6a5":"# compute ROC AUC\n\nfrom sklearn.metrics import roc_auc_score\n\nROC_AUC = roc_auc_score(y_test, y_pred_1)\n\nprint('ROC AUC : {:.4f}'.format(ROC_AUC))","a3dbe339":"# calculate cross-validated ROC AUC \n\nfrom sklearn.model_selection import cross_val_score\n\nCross_validated_ROC_AUC = cross_val_score(knn_7, X_train, y_train, cv=5, scoring='roc_auc').mean()\n\nprint('Cross validated ROC AUC : {:.4f}'.format(Cross_validated_ROC_AUC))","436af44d":"# Applying 10-Fold Cross Validation\n\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(knn_7, X_train, y_train, cv = 10, scoring='accuracy')\n\nprint('Cross-validation scores:{}'.format(scores))","875f31db":"# compute Average cross-validation score\n\nprint('Average cross-validation score: {:.4f}'.format(scores.mean()))","4b9e1911":"### check  percentage of frequency distribution of `Class`","1a572764":"# **4. Eager learners vs lazy learners** <a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)\n\nEager learners mean when giving training data points, we will construct a generalized model before performing prediction on given new points to classify. We can think of such learners as being ready, active and eager to classify new data points.\n\nLazy learning means there is no need for learning or training of the model and all of the data points are used at the time of prediction. Lazy learners wait until the last minute before classifying any data point. They merely store the training dataset and waits until classification needs to perform. Lazy learners are also known as instance-based learners because lazy learners store the training points or instances, and all learning is based on instances.\n\nUnlike eager learners, lazy learners do less work in the training phase and more work in the testing phase to make a classification.","7cfa8447":"We can see that the `Bare_Nuclei` column contains 16 `nan` values.","1e9e204c":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n\n1. [Introduction to k Nearest Neighbours Algorithm](#1)\n2. [k Nearest Neighbours intuition](#2)\n3. [How to decide the number of neighbours in kNN](#3)\n4. [Eager learners vs lazy learners](#4)\n5. [Import libraries](#5)\n6. [Import dataset](#6)\n7. [Exploratory data analysis](#7)\n8. [Data visualization](#8)\n9. [Declare feature vector and target variable](#9)\n10. [Split data into separate training and test set](#10)\n11.\t[Feature engineering](#11)\n12.\t[Feature scaling](#12)\n13.\t[Fit Neighbours classifier to the training set](#13)\n14.\t[Predict the test-set results](#14)\n15.\t[Check the accuracy score](#15)\n16.\t[Rebuild kNN classification model using different values of k](#16)\n17.\t[Confusion matrix](#17)\n18.\t[Classification metrices](#18)\n19.\t[ROC - AUC](#19)\n20.\t[k-Fold Cross Validation](#20)\n21.\t[Results and conclusion](#21)\n22. [References](#22)\n","9e9c580c":"Here, **y_test** are the true class labels and **y_pred** are the predicted class labels in the test-set.","947cec04":"### Discover patterns and relationships \n\n\nAn important step in EDA is to discover patterns and relationships between variables in the dataset. I will use the seaborn heatmap to explore the patterns and relationships in the dataset.\n","8c2c5d67":"# **7. Exploratory data analysis** <a class=\"anchor\" id=\"7\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nNow, I will explore the data to gain insights about the data. ","e7321577":"We can see that the `Bare_Nuclei` column contains missing values. We need to dig deeper to find the frequency distribution of \nvalues of `Bare_Nuclei`.","f3c14e1a":"### Adjusting the classification threshold level","d0517231":"### Compare model accuracy with null accuracy\n\n\nSo, the model accuracy is 0.9714. But, we cannot say that our model is very good based on the above accuracy. We must compare it with the **null accuracy**. Null accuracy is the accuracy that could be achieved by always predicting the most frequent class.\n\nSo, we should first check the class distribution in the test set. ","8cea5130":"We can see that all the variables in the dataset are positively skewed. ","afbf25b9":"# **15. Check accuracy score** <a class=\"anchor\" id=\"15\"><\/a>\n\n[Table of Contents](#0.1)","29865d3b":"### Explore problems within variables\n\n\nNow, I will explore problems within variables.\n","e0f9fbe9":"### Rebuild kNN Classification model using k=5","736aa1fe":"### Classification accuracy","22a45191":"We now have training and testing set ready for model building. Before that, we should map all the feature variables onto the same scale. It is called `feature scaling`. I will do it as follows.","40db5a45":"# **16. Rebuild kNN Classification model using different values of k** <a class=\"anchor\" id=\"16\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nI have build the kNN classification model using k=3. Now, I will increase the value of k and see its effect on accuracy.","e1791460":"### View top 5 rows of dataset","ae37e320":"### Frequency distribution of values in variables","62516f76":"We can see that the `Id` column has been removed from the dataset. \n\nWe can see that there are 9 numerical variables and 1 categorical variable in the dataset. I will check the frequency distribution of values in the variables to confirm the same.","7aeb553d":"We can see that the occurences of most frequent class is 85. So, we can calculate null accuracy by dividing 85 by total number of occurences.","539568ac":"# **11. Feature Engineering** <a class=\"anchor\" id=\"11\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n**Feature Engineering** is the process of transforming raw data into useful features that help us to understand our model better and increase its predictive power. I will carry out feature engineering on different types of variables.\n","a000560a":"# **19. ROC-AUC** <a class=\"anchor\" id=\"19\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n\n### ROC Curve\n\n\nAnother tool to measure the classification model performance visually is **ROC Curve**. ROC Curve stands for **Receiver Operating Characteristic Curve**. An **ROC Curve** is a plot which shows the performance of a classification model at various \nclassification threshold levels. \n\n\n\nThe **ROC Curve** plots the **True Positive Rate (TPR)** against the **False Positive Rate (FPR)** at various threshold levels.\n\n\n\n\n**True Positive Rate (TPR)** is also called **Recall**. It is defined as the ratio of **TP to (TP + FN)**.\n\n\n\n\n\n**False Positive Rate (FPR)** is defined as the ratio of **FP to (FP + TN)**.\n\n\n\n\nIn the ROC Curve, we will focus on the TPR (True Positive Rate) and FPR (False Positive Rate) of a single point. This will give us the general performance of the ROC curve which consists of the TPR and FPR at various threshold levels. So, an ROC Curve plots TPR vs FPR at different classification threshold levels. If we lower the threshold levels, it may result in more items being classified as positve. It will increase both True Positives (TP) and False Positives (FP).\n\n\n","ec2b0cfb":"### Drop redundant columns\n\n\nWe should drop any redundant columns from the dataset which does not have any predictive power. Here, `Id` is the redundant column. So, I will drop it first.","05ca1c97":"We can see that there are `nan` values in the `Bare_Nuclei` column.","bd4c0a19":"# **14. Predict test-set results** <a class=\"anchor\" id=\"14\"><\/a>\n\n[Table of Contents](#0.1)","c688a092":"# **22. References** <a class=\"anchor\" id=\"22\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe work done in this project is inspired from following books and websites:-\n\n1.\tHands on Machine Learning with Scikit-Learn and Tensorflow by Aure\u0301lie\u0301n Ge\u0301ron\n2.\tIntroduction to Machine Learning with Python by Andreas C. Mu\u0308ller and Sarah Guido\n3.\tUdemy course \u2013 Machine Learning \u2013 A Z by Kirill Eremenko and Hadelin de Ponteves\n4.\thttps:\/\/en.wikipedia.org\/wiki\/K-nearest_neighbors_algorithm\n5.\thttps:\/\/www.datacamp.com\/community\/tutorials\/k-nearest-neighbor-classification-scikit-learn\n6.\thttp:\/\/dataaspirant.com\/2016\/12\/23\/k-nearest-neighbor-classifier-intro\/\n7.\thttps:\/\/stackabuse.com\/k-nearest-neighbors-algorithm-in-python-and-scikit-learn\/\n\n","b77f2cc1":"We can see that there are 699 instances and 11 attributes in the data set. \n\n\nIn the dataset description, it is given that there are 10 attributes and 1 `Class` which is the target variable. So, we have 10 attributes and 1 target variable.","e74f0cda":"### Interpretation\n\n\n- Using the mean cross-validation, we can conclude that we expect the model to be around 96.46 % accurate on average.\n\n- If we look at all the 10 scores produced by the 10-fold cross-validation, we can also conclude that there is a relatively high variance in the accuracy between folds, ranging from 100% accuracy to 87.72% accuracy. So, we can conclude that the model is very dependent on the particular folds used for training, but it also be the consequence of the small size of the dataset.\n\n- We can see that 10-fold cross-validation accuracy does not result in performance improvement for this model.","b875c397":"### Compare the train-set and test-set accuracy\n\n\nNow, I will compare the train-set and test-set accuracy to check for overfitting.","de0b7a56":"### Rebuild kNN Classification model using k=9","c79397d8":"# **18. Classification metrices** <a class=\"anchor\" id=\"18\"><\/a>\n\n[Table of Contents](#0.1)","c865c30e":"We can see that there are no missing values in X_train and X_test.","f6d89c29":"### Missing values in variables","9692780f":"### Estimating correlation coefficients\n\nOur dataset is very small. So, we can compute the standard correlation coefficient (also called Pearson's r) between every pair of attributes. We can compute it using the `df.corr()` method as follows:-","a2d64fa8":"### Rename column names\n\nWe can see that the dataset does not have proper column names. The columns are merely labelled as 0,1,2.... and so on. We should give proper names to the columns. I will do it as follows:-","94683b0d":"# **6. Import dataset** <a class=\"anchor\" id=\"6\"><\/a>\n\n[Table of Contents](#0.1)","3bfe3acb":"Now, we can see that all the columns of the dataframe are of type numeric.","fa312724":"### Classification error","e692b803":"Our target variable is `Class`. So, we should check how each attribute correlates with the `Class` variable. We can do it as follows:-","68367d85":"# **9. Declare feature vector and target variable** <a class=\"anchor\" id=\"9\"><\/a>\n\n[Table of Contents](#0.1)","96dc1c39":"We now have `X_train` dataset ready to be fed into the Logistic Regression classifier. I will do it as follows.","25b7005f":"### Comments\n\n\n- In binary problems, the threshold of 0.5 is used by default to convert predicted probabilities into class predictions.\n\n\n- Threshold can be adjusted to increase sensitivity or specificity. \n\n\n- Sensitivity and specificity have an inverse relationship. Increasing one would always decrease the other and vice versa.\n\n\n- Adjusting the threshold level should be one of the last step you do in the model-building process.","f7a714a1":"# **8. Data Visualization** <a class=\"anchor\" id=\"8\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nNow, we have a basic understanding of our data. I will supplement it with some data visualization to get better understanding\nof our data.","ee3859bf":"# **21. Results and Conclusion** <a class=\"anchor\" id=\"21\"><\/a>\n\n[Table of Contents](#0.1)\n\n\n\n1. In this project, I build a kNN classifier model to classify the patients suffering from breast cancer. The model yields very good performance as indicated by the model accuracy which was found to be 0.9786 with k=7.\n\n2. With k=3, the training-set accuracy score is 0.9821 while the test-set accuracy to be 0.9714. These two values are quite comparable. So, there is no question of overfitting. \n\n3. I have compared the model accuracy score which is 0.9714 with null accuracy score which is 0.6071. So, we can conclude that our K Nearest Neighbors model is doing a very good job in predicting the class labels.\n\n4. Our original model accuracy score with k=3 is 0.9714. Now, we can see that we get same accuracy score of 0.9714 with k=5. But, if we increase the value of k further, this would result in enhanced accuracy. With k=6,7,8 we get accuracy score of 0.9786. So, it results in performance improvement. If we increase k to 9, then accuracy decreases again to 0.9714. So, we can conclude that our optimal value of k is 7.\n\n5. kNN Classification model with k=7 shows more accurate predictions and less number of errors than k=3 model. Hence, we got performance improvement with k=7.\n\n6. ROC AUC of our model approaches towards 1. So, we can conclude that our classifier does a good job in predicting whether it is benign or malignant cancer.\n\n7. Using the mean cross-validation, we can conclude that we expect the model to be around 96.46 % accurate on average.\n\n8. If we look at all the 10 scores produced by the 10-fold cross-validation, we can also conclude that there is a relatively high variance in the accuracy between folds, ranging from 100% accuracy to 87.72% accuracy. So, we can conclude that the model is very dependent on the particular folds used for training, but it also be the consequence of the small size of the dataset.\n","1718e61d":"### Comment\n\n\nSo, kNN Classification model with k=7 shows more accurate predictions and less number of errors than k=3 model. Hence, we got performance improvement with k=7.","38e3ec0e":"ROC curve help us to choose a threshold level that balances sensitivity and specificity for a particular context.","23f36b6d":"### f1-score\n\n\n**f1-score** is the weighted harmonic mean of precision and recall. The best possible **f1-score** would be 1.0 and the worst \nwould be 0.0.  **f1-score** is the harmonic mean of precision and recall. So, **f1-score** is always lower than accuracy measures as they embed precision and recall into their computation. The weighted average of `f1-score` should be used to \ncompare classifier models, not global accuracy.\n","038fbc96":"### View summary of dataset\n","014b1a30":"### predict_proba method\n\n\n**predict_proba** method gives the probabilities for the target variable(2 and 4) in this case, in array form.\n\n`2 is for probability of benign cancer` and `4 is for probability of malignant cancer.`","d6c69edb":"**I hope you find this kernel useful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be highly appreciated**.","1b288cde":"### Rebuild kNN Classification model using k=8","9086ec39":"### Convert data type of Bare_Nuclei to integer","94777bda":"# **17. Confusion matrix** <a class=\"anchor\" id=\"17\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nA confusion matrix is a tool for summarizing the performance of a classification algorithm. A confusion matrix will give us a clear picture of classification model performance and the types of errors produced by the model. It gives us a summary of correct and incorrect predictions broken down by each category. The summary is represented in a tabular form.\n\n\nFour types of outcomes are possible while evaluating a classification model performance. These four outcomes are described below:-\n\n\n**True Positives (TP)** \u2013 True Positives occur when we predict an observation belongs to a certain class and the observation actually belongs to that class.\n\n\n**True Negatives (TN)** \u2013 True Negatives occur when we predict an observation does not belong to a certain class and the observation actually does not belong to that class.\n\n\n**False Positives (FP)** \u2013 False Positives occur when we predict an observation belongs to a    certain class but the observation actually does not belong to that class. This type of error is called **Type I error.**\n\n\n\n**False Negatives (FN)** \u2013 False Negatives occur when we predict an observation does not belong to a certain class but the observation actually belongs to that class. This is a very serious error and it is called **Type II error.**\n\n\n\nThese four outcomes are summarized in a confusion matrix given below.\n","b3020e21":"### Rebuild kNN Classification model using k=6","2738c709":"### Correlation Heat Map","4c682f09":"# **3. How to decide the number of neighbours in kNN** <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nWhile building the kNN classifier model, one question that come to my mind is what should be the value of nearest neighbours (k) that yields highest accuracy. This is a very important question because the classification accuracy depends upon our choice of k.\n\nThe number of neighbours (k) in kNN is a parameter that we need to select at the time of model building. Selecting the optimal value of k in kNN is the most critical problem. A small value of k means that noise will have higher influence on the result. So, probability of overfitting is very high. A large value of k makes it computationally expensive in terms of time to build the kNN model. Also, a large value of k will have a smoother decision boundary which means lower variance but higher bias.\n\nThe data scientists choose an odd value of k if the number of classes is even. We can apply the elbow method to select the value of k. To optimize the results, we can use Cross Validation technique. Using the cross-validation technique, we can test the kNN algorithm with different values of k. The model which gives good accuracy can be considered to be an optimal choice. It depends on individual cases and at times best process is to run through each possible value of k and test our result.","6799dde8":"The confusion matrix shows `83 + 53 = 136 correct predictions` and `2 + 2 = 4 incorrect predictions`.\n\n\nIn this case, we have\n\n\n- `True Positives` (Actual Positive:1 and Predict Positive:1) - 83\n\n\n- `True Negatives` (Actual Negative:0 and Predict Negative:0) - 53\n\n\n- `False Positives` (Actual Negative:0 but Predict Positive:1) - 2 `(Type I error)`\n\n\n- `False Negatives` (Actual Positive:1 but Predict Negative:0) - 2 `(Type II error)`","09549b24":"### Check for overfitting and underfitting","73b2d414":"We can see that there are 16 `nan` values in the dataset. I will impute missing values after dividing the dataset into training and test set.","7f87b9f5":"We can see that the `Class` variable contains 2 class labels - `2` and `4`. `2` stands for benign and `4` stands for malignant cancer.","4203e43c":"# **2. k Nearest Neighbours intuition** <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe kNN algorithm intuition is very simple to understand. It simply calculates the distance between a sample data point and all the other training data points. The distance can be Euclidean distance or Manhattan distance. Then, it selects the k nearest data points where k can be any integer. Finally, it assigns the sample data point to the class to which the majority of the k data points belong.\n\n\nNow, we will see kNN algorithm in action. Suppose, we have a dataset with two variables which are classified as `Red` and `Blue`.\n\n\nIn kNN algorithm, k is the number of nearest neighbours. Generally, k is an odd number because it helps to decide the majority of the class. When k=1, then the algorithm is known as the nearest neighbour algorithm.\n\nNow, we want to classify a new data point `X` into `Blue` class or `Red` class. Suppose the value of k is 3. The kNN algorithm starts by calculating the distance between `X` and all the other data points. It then finds the 3 nearest points with least distance to point `X`. \n\n\nIn the final step of the kNN algorithm, we assign the new data point `X` to the majority of the class of the 3 nearest points. If 2 of the 3 nearest points belong to the class `Red` while 1 belong to the class `Blue`, then we classify the new data point  as `Red`.\n","ba7953b5":"Now, based on the above analysis we can conclude that our classification model accuracy is very good. Our model is doing a very good job in terms of predicting the class labels.\n\n\nBut, it does not give the underlying distribution of values. Also, it does not tell anything about the type of errors our classifer is making. \n\n\nWe have another tool called `Confusion matrix` that comes to our rescue.","6f5403a7":"# **10. Split data into separate training and test set** <a class=\"anchor\" id=\"10\"><\/a>\n\n[Table of Contents](#0.1)","970d8562":"### Observations\n\n\n- In each row, the numbers sum to 1.\n\n\n- There are 2 columns which correspond to 2 classes - 2 and 4. \n\n\n    - Class 2 - predicted probability that there is benign cancer.    \n    \n    - Class 4 - predicted probability that there is malignant cancer.\n        \n    \n- Importance of predicted probabilities\n\n    - We can rank the observations by probability of benign or malignant cancer.\n\n\n- predict_proba process\n\n    - Predicts the probabilities    \n    \n    - Choose the class with the highest probability    \n    \n    \n- Classification threshold level\n\n    - There is a classification threshold level of 0.5.    \n    \n    - Class 4 - probability of malignant cancer is predicted if probability > 0.5.    \n    \n    - Class 2 - probability of benign cancer is predicted if probability < 0.5.    \n    \n","e7b6c582":"### Rebuild kNN Classification model using k=7","990009fe":"### Classification Report\n\n\n**Classification report** is another way to evaluate the classification model performance. It displays the  **precision**, **recall**, **f1** and **support** scores for the model. I have described these terms in later.\n\nWe can print a classification report as follows:-","580c2b62":"kNN algorithm is robust to outliers.","b92d75af":"### Engineering missing values in variables\n\n","7dc4ac30":"# **12. Feature Scaling** <a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)","80dc6641":"### ROC  AUC\n\n\n**ROC AUC** stands for **Receiver Operating Characteristic - Area Under Curve**. It is a technique to compare classifier performance. In this technique, we measure the `area under the curve (AUC)`. A perfect classifier will have a ROC AUC equal to 1, whereas a purely random classifier will have a ROC AUC equal to 0.5. \n\n\nSo, **ROC AUC** is the percentage of the ROC plot that is underneath the curve.","44cc1508":"### Multivariate plots","170e58ec":"# **1. Introduction to k Nearest Neighbours algorithm** <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nIn machine learning, k Nearest Neighbours or kNN is the simplest of all machine learning algorithms. It is a non-parametric algorithm used for classification and regression tasks. Non-parametric means there is no assumption required for data distribution. So, kNN does not require any underlying assumption to be made. In both classification and regression tasks, the input consists of the k closest training examples in the feature space. The output depends upon whether kNN is used for classification or regression purposes.\n\n-\tIn kNN classification, the output is a class membership. The given data point is classified based on the majority of type of its neighbours. The data point is assigned to the most frequent class among its k nearest neighbours. Usually k is a small positive integer. If k=1, then the data point is simply assigned to the class of that single nearest neighbour.\n\n-\tIn kNN regression, the output is simply some property value for the object. This value is the average of the values of k nearest neighbours.\n\n\nkNN is a type of instance-based learning or lazy learning. Lazy learning means it does not require any training data points for model generation. All training data will be used in the testing phase. This makes training faster and testing slower and costlier. So, the testing phase requires more time and memory resources.\n\nIn kNN, the neighbours are taken from a set of objects for which the class or the object property value is known. This can be thought of as the training set for the kNN algorithm, though no explicit training step is required. In both classification and regression kNN algorithm, we can assign weight to the contributions of the neighbours. So, nearest neighbours contribute more to the average than the more distant ones.\n\n","4069752f":"### Interpretation\n\n\nFrom the above correlation heat map, we can conclude that :-\n\n1. `Class` is highly positive correlated with `Uniformity_Cell_Size`, `Uniformity_Cell_Shape` and `Bare_Nuclei`. (correlation coefficient = 0.82).\n\n2. `Class` is positively correlated with `Clump_thickness`(correlation coefficient=0.72), `Marginal_Adhesion`(correlation coefficient=0.70), `Single_Epithelial_Cell_Size)`(correlation coefficient = 0.68) and `Normal_Nucleoli`(correlation coefficient=0.71).\n\n3. `Class` is weekly positive correlated with `Mitoses`(correlation coefficient=0.42).\n\n4. The `Mitoses` variable is weekly positive correlated with all the other variables(correlation coefficient < 0.50).","045d3850":"### Check the distribution of variables\n\n\nNow, I will plot the histograms to check variable distributions to find out if they are normal or skewed. ","65d39d9c":"### check frequency distribution of target variable `Class`","957d018b":"We can see that our model accuracy score is 0.9714 but null accuracy score is 0.6071. So, we can conclude that our K Nearest Neighbors model is doing a very good job in predicting the class labels.","96376915":"### Outliers in numerical variables","88ba4157":"So, now we will come to the end of this kernel.\n\nI hope you find this kernel useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\nThank you","b7624995":"### Interpretation\n\n\n- ROC AUC is a single number summary of classifier performance. The higher the value, the better the classifier.\n\n- ROC AUC of our model approaches towards 1. So, we can conclude that our classifier does a good job in predicting whether it is benign or malignant cancer.","475caa04":"<a class=\"anchor\" id=\"0\"><\/a>\n# **kNN Classifier Tutorial in Python**\n\n\nHello friends,\n\nkNN or k-Nearest Neighbours Classifier is a very simple and easy to understand machine learning algorithm. In this kernel, I build a k Nearest Neighbours classifier to classify the patients suffering from Breast Cancer.\n\nSo, let's get started.\n","10d2a662":"### Observations\n\n\n- We can see that the above histogram is positively skewed.\n\n\n- The first column tell us that there are approximately 80 observations with 0 probability of malignant cancer.\n\n\n- There are few observations with probability > 0.5.\n\n\n- So, these few observations predict that there will be malignant cancer.\n","e3987799":"We can summarize the cross-validation accuracy by calculating its mean.","078a554a":"### False Positive Rate","af2d9107":"### Recall\n\n\nRecall can be defined as the percentage of correctly predicted positive outcomes out of all the actual positive outcomes.\nIt can be given as the ratio of true positives (TP) to the sum of true positives and false negatives (TP + FN). **Recall** is also called **Sensitivity**.\n\n\n**Recall** identifies the proportion of correctly predicted actual positives.\n\n\nMathematically, `recall` can be given as the ratio of `TP to (TP + FN)`.\n\n","b1c699bb":"[Go to Top](#0)","cf004f21":"The above confusion matrix shows `83 + 54 = 137 correct predictions` and `2 + 1 = 4 incorrect predictions`.\n\n\nIn this case, we have\n\n\n- `True Positives` (Actual Positive:1 and Predict Positive:1) - 83\n\n\n- `True Negatives` (Actual Negative:0 and Predict Negative:0) - 54\n\n\n- `False Positives` (Actual Negative:0 but Predict Positive:1) - 2 `(Type I error)`\n\n\n- `False Negatives` (Actual Positive:1 but Predict Negative:0) - 1 `(Type II error)`","451a5906":"### Precision\n\n\n**Precision** can be defined as the percentage of correctly predicted positive outcomes out of all the predicted positive outcomes. It can be given as the ratio of true positives (TP) to the sum of true and false positives (TP + FP). \n\n\nSo, **Precision** identifies the proportion of correctly predicted positive outcome. It is more concerned with the positive class than the negative class.\n\n\n\nMathematically, `precision` can be defined as the ratio of `TP to (TP + FP)`.\n","19a7ac53":"### Specificity","88cd50fc":"The distribution of values shows that data type of `Bare_Nuclei` is of type integer. But the summary of the dataframe shows that it is type object. So, I will explicitly convert its data type to integer.","6ae807f6":"### Interpretation\n\nOur Cross Validated ROC AUC is very close to 1. So, we can conclude that, the KNN classifier is indeed a very good model.","7b6246db":"# **13. Fit K Neighbours Classifier to the training eet** <a class=\"anchor\" id=\"13\"><\/a>\n\n[Table of Contents](#0.1)","57757613":"### Interpretation \n\n- The correlation coefficient ranges from -1 to +1. \n\n- When it is close to +1, this signifies that there is a strong positive correlation. So, we can see that there is a strong positive correlation between `Class` and `Bare_Nuclei`, `Class` and `Uniformity_Cell_Shape`, `Class` and `Uniformity_Cell_Size`.\n\n- When it is clsoe to -1, it means that there is a strong negative correlation. When it is close to 0, it means that there is no correlation. \n\n- We can see that all the variables are positively correlated with `Class` variable. Some variables are strongly positive correlated while some variables are negatively correlated.","f02882e8":"# **5. Import libraries** <a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)","f1059524":"### True Positive Rate\n\n\n**True Positive Rate** is synonymous with **Recall**.\n","6b888f8e":"### Univariate plots","75a8f6d2":"### Summary of variables\n\n\n- There are 10 numerical variables in the dataset.\n\n\n- All of the variables are of discrete type.\n\n\n- Out of all the 10 variables, the first 9 variables are feature variables and last variable `Class` is the target variable.\n\n\n","6ae47a2f":"### Check data types of columns of dataframe","be1a4a3e":"We can see that the column names are renamed. Now, the columns have meaningful names.","17e35569":"# **20. k-fold Cross Validation** <a class=\"anchor\" id=\"20\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nIn this section, I will apply k-fold Cross Validation technique to improve the model performance. Cross-validation is a statistical method of evaluating generalization performance It is more stable and thorough than using a train-test split to evaluate model performance. ","fc48b7e0":"### Support\n\n\n**Support** is the actual number of occurrences of the class in our dataset.","11df4f67":"The training-set accuracy score is 0.9821 while the test-set accuracy to be 0.9714. These two values are quite comparable. So, there is no question of overfitting. \n","30f78ecc":"### Interpretation\n\n\nOur original model accuracy score with k=3 is 0.9714. Now, we can see that we get same accuracy score of 0.9714 with k=5. But, if we increase the value of k further, this would result in enhanced accuracy.\n\n\nWith k=6,7,8 we get accuracy score of 0.9786. So, it results in performance improvement.\n\n\nIf we increase k to 9, then accuracy decreases again to 0.9714.","6c2bd885":"### Assumption\n\n\nI assume that the data are missing completely at random (MCAR). There are two methods which can be used to impute missing values. One is mean or median imputation and other one is random sample imputation. When there are outliers in the dataset, we should use median imputation. So, I will use median imputation because median imputation is robust to outliers.\n\n\nI will impute missing values with the appropriate statistical measures of the data, in this case median. Imputation should be done over the training set, and then propagated to the test set. It means that the statistical measures to be used to fill missing values both in train and test set, should be extracted from the train set only. This is to avoid overfitting."}}