{"cell_type":{"9e7f66c2":"code","7d5e0604":"code","aeb89543":"code","845208c5":"code","87700092":"code","cdaf141f":"code","dd571768":"code","e4c9523d":"code","441e91ef":"code","c3915ef2":"code","a0519980":"code","dfda3f39":"code","89131e5e":"code","f0799122":"code","d112aeee":"code","6b925983":"code","c83cb0f5":"code","0ff396f9":"code","d5cf3496":"code","4a8760e0":"code","2747c1a0":"code","6464e795":"code","244b036c":"code","4e519978":"code","ee904f73":"code","a3f822df":"code","5d83351d":"code","5d57906f":"code","4e9f054d":"code","0c35b7b2":"code","a819916f":"code","e03358df":"code","ad9c4219":"code","498d1f2c":"code","9553398d":"code","14b69885":"code","bceece04":"code","c8e855c2":"code","aafbae81":"code","3f1f6c0e":"code","44146276":"code","cb54bf2c":"code","884648a2":"code","56696bf4":"code","3c1a65cd":"code","cebd9875":"code","2d0e66c6":"code","e4bc1210":"code","f2e8955d":"code","7b07e427":"code","5319a601":"code","202407b2":"code","f7e434a9":"code","af093ab0":"code","df177f8f":"code","cecaba27":"code","b4be73f3":"code","cc9fdc51":"code","639efcbe":"code","024cb536":"code","0d20254e":"markdown","028ef191":"markdown","fd03d3c0":"markdown","ec69bb9a":"markdown","5b62762c":"markdown","bf9dbf3e":"markdown","528dcdaa":"markdown","26468a1a":"markdown","18b5d5d2":"markdown","536cb4b1":"markdown","3bfe6a73":"markdown","129a193b":"markdown","d4dcbb2d":"markdown","88d65173":"markdown","f0efcc01":"markdown","37970653":"markdown","d41024b6":"markdown","9fd245b3":"markdown","017b529c":"markdown","01f39b1f":"markdown","0496259d":"markdown","37b174c9":"markdown","054da993":"markdown","72cecd19":"markdown","a5dafb5b":"markdown","a66c865c":"markdown","9344738e":"markdown","de1035ca":"markdown","c6d56f26":"markdown","cf2e24f0":"markdown","02473968":"markdown","7fd02724":"markdown"},"source":{"9e7f66c2":"# preprocessing\nimport numpy as np\nimport pandas as pd \n\n# graph\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\n# model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\n\n# evaluation\nfrom sklearn.metrics import mean_squared_error\n\n# utils\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7d5e0604":"seed = 223","aeb89543":"train_act = pd.read_csv('\/kaggle\/input\/train_activity.csv')\ntrain_pay = pd.read_csv('\/kaggle\/input\/train_payment.csv')\ntrain_pledge = pd.read_csv('\/kaggle\/input\/train_pledge.csv')\ntrain_trade = pd.read_csv('\/kaggle\/input\/train_trade.csv')\ntrain_combat = pd.read_csv('\/kaggle\/input\/train_combat.csv')\nprint('train activity shape: ',train_act.shape)\nprint('train payment shape: ',train_pay.shape)\nprint('train pledge shape: ',train_pledge.shape)\nprint('train trade shape: ',train_trade.shape)\nprint('train combat shape: ',train_combat.shape)","845208c5":"test1_act = pd.read_csv('\/kaggle\/input\/test1_activity.csv')\ntest1_pay = pd.read_csv('\/kaggle\/input\/test1_payment.csv')\ntest1_pledge = pd.read_csv('\/kaggle\/input\/test1_pledge.csv')\ntest1_trade = pd.read_csv('\/kaggle\/input\/test1_trade.csv')\ntest1_combat = pd.read_csv('\/kaggle\/input\/test1_combat.csv')\nprint('test1 activity shape: ',test1_act.shape)\nprint('test1 payment shape: ',test1_pay.shape)\nprint('test1 pledge shape: ',test1_pledge.shape)\nprint('test1 trade shape: ',test1_trade.shape)\nprint('test1 combat shape: ',test1_combat.shape)","87700092":"test2_act = pd.read_csv('\/kaggle\/input\/test2_activity.csv')\ntest2_pay = pd.read_csv('\/kaggle\/input\/test2_payment.csv')\ntest2_pledge = pd.read_csv('\/kaggle\/input\/test2_pledge.csv')\ntest2_trade = pd.read_csv('\/kaggle\/input\/test2_trade.csv')\ntest2_combat = pd.read_csv('\/kaggle\/input\/test2_combat.csv')\nprint('test2 activity shape: ',test2_act.shape)\nprint('test2 payment shape: ',test2_pay.shape)\nprint('test2 pledge shape: ',test2_pledge.shape)\nprint('test2 trade shape: ',test2_trade.shape)\nprint('test2 combat shape: ',test2_combat.shape)","cdaf141f":"train_label = pd.read_csv('\/kaggle\/input\/train_label.csv')\nprint('train_label shape: ',train_label.shape)","dd571768":"validation_acc = pd.read_csv('\/kaggle\/input\/train_valid_user_id.csv')\nprint('validation_acc shape: ',validation_acc.shape)","e4c9523d":"train = train_act.groupby(['acc_id','server','char_id']).day.count().reset_index().groupby('acc_id').day.sum().reset_index()\ntrain.columns = ['acc_id','total_days']\ntrain = pd.merge(train, train_label, on='acc_id', how='inner')\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","441e91ef":"test1 = test1_act.groupby(['acc_id','server','char_id']).day.count().reset_index().groupby('acc_id').day.sum().reset_index()\ntest1.columns = ['acc_id','total_days']\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","c3915ef2":"test2 = test2_act.groupby(['acc_id','server','char_id']).day.count().reset_index().groupby('acc_id').day.sum().reset_index()\ntest2.columns = ['acc_id','total_days']\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","a0519980":"total_char_id_df = train_act[['acc_id','server','char_id']].drop_duplicates().groupby('acc_id').char_id.count().reset_index()\ntotal_char_id_df.columns = ['acc_id','total_char_id']\ntrain = pd.merge(train, total_char_id_df, on='acc_id', how='left')\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","dfda3f39":"total_char_id_df = test1_act[['acc_id','server','char_id']].drop_duplicates().groupby('acc_id').char_id.count().reset_index()\ntotal_char_id_df.columns = ['acc_id','total_char_id']\ntest1 = pd.merge(test1, total_char_id_df, on='acc_id', how='left')\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","89131e5e":"total_char_id_df = test2_act[['acc_id','server','char_id']].drop_duplicates().groupby('acc_id').char_id.count().reset_index()\ntotal_char_id_df.columns = ['acc_id','total_char_id']\ntest2 = pd.merge(test2, total_char_id_df, on='acc_id', how='left')\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","f0799122":"amount_by_acc_id = train_pay.groupby('acc_id').agg({'amount_spent':['max','median']})\namount_by_acc_id.columns = ['max_amount','median_amount']\ntrain = pd.merge(train, amount_by_acc_id, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","d112aeee":"amount_by_acc_id = test1_pay.groupby('acc_id').agg({'amount_spent':['max','median']})\namount_by_acc_id.columns = ['max_amount','median_amount']\ntest1 = pd.merge(test1, amount_by_acc_id, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","6b925983":"amount_by_acc_id = test2_pay.groupby('acc_id').agg({'amount_spent':['max','median']})\namount_by_acc_id.columns = ['max_amount','median_amount']\ntest2 = pd.merge(test2, amount_by_acc_id, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","c83cb0f5":"playtime_by_day = train_act.groupby(['day','acc_id']).playtime.sum().reset_index().groupby('acc_id').agg({'playtime':['std','mean']})\nplaytime_by_day.columns = ['std_playtime','avg_playtime']\ntrain = pd.merge(train, playtime_by_day, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","0ff396f9":"playtime_by_day = test1_act.groupby(['day','acc_id']).playtime.sum().reset_index().groupby('acc_id').agg({'playtime':['std','mean']})\nplaytime_by_day.columns = ['std_playtime','avg_playtime']\ntest1 = pd.merge(test1, playtime_by_day, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","d5cf3496":"playtime_by_day = test2_act.groupby(['day','acc_id']).playtime.sum().reset_index().groupby('acc_id').agg({'playtime':['std','mean']})\nplaytime_by_day.columns = ['std_playtime','avg_playtime']\ntest2 = pd.merge(test2, playtime_by_day, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","4a8760e0":"sales_cnt_df = train_trade.source_acc_id.value_counts().reset_index()\nsales_cnt_df.columns = ['acc_id','sales_cnt']\ntrain = pd.merge(train, sales_cnt_df, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","2747c1a0":"sales_cnt_df = test1_trade.source_acc_id.value_counts().reset_index()\nsales_cnt_df.columns = ['acc_id','sales_cnt']\ntest1 = pd.merge(test1, sales_cnt_df, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","6464e795":"sales_cnt_df = test2_trade.source_acc_id.value_counts().reset_index()\nsales_cnt_df.columns = ['acc_id','sales_cnt']\ntest2 = pd.merge(test2, sales_cnt_df, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","244b036c":"total_amount_df = train_trade[train_trade.source_acc_id.isin(train.acc_id)].groupby('source_acc_id').item_amount.sum().reset_index()\ntotal_amount_df.columns = ['acc_id','total_amount']\ntrain = pd.merge(train, total_amount_df, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","4e519978":"total_amount_df = test1_trade[test1_trade.source_acc_id.isin(test1.acc_id)].groupby('source_acc_id').item_amount.sum().reset_index()\ntotal_amount_df.columns = ['acc_id','total_amount']\ntest1 = pd.merge(test1, total_amount_df, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","ee904f73":"total_amount_df = test2_trade[test2_trade.source_acc_id.isin(test2.acc_id)].groupby('source_acc_id').item_amount.sum().reset_index()\ntotal_amount_df.columns = ['acc_id','total_amount']\ntest2 = pd.merge(test2, total_amount_df, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","a3f822df":"class_by_user = train_combat[['acc_id','server','char_id','class']].drop_duplicates().groupby(['acc_id','class']).char_id.count().unstack()\nclass_by_user = class_by_user.fillna(0)\nclass_by_user.columns = ['class{}'.format(i) for i in range(8)]\ntrain = pd.merge(train, class_by_user, on='acc_id', how='left')\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","5d83351d":"class_by_user = test1_combat[['acc_id','server','char_id','class']].drop_duplicates().groupby(['acc_id','class']).char_id.count().unstack()\nclass_by_user = class_by_user.fillna(0)\nclass_by_user.columns = ['class{}'.format(i) for i in range(8)]\ntest1 = pd.merge(test1, class_by_user, on='acc_id', how='left')\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","5d57906f":"class_by_user = test2_combat[['acc_id','server','char_id','class']].drop_duplicates().groupby(['acc_id','class']).char_id.count().unstack()\nclass_by_user = class_by_user.fillna(0)\nclass_by_user.columns = ['class{}'.format(i) for i in range(8)]\ntest2 = pd.merge(test2, class_by_user, on='acc_id', how='left')\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","4e9f054d":"random_df = train_combat.groupby('acc_id').agg({'random_attacker_cnt':'sum','random_defender_cnt':'sum'})\nrandom_df.columns = ['total_random_attacker_cnt','total_random_defender_cnt']\ntrain = pd.merge(train, random_df, on='acc_id', how='left')\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","0c35b7b2":"random_df = test1_combat.groupby('acc_id').agg({'random_attacker_cnt':'sum','random_defender_cnt':'sum'})\nrandom_df.columns = ['total_random_attacker_cnt','total_random_defender_cnt']\ntest1 = pd.merge(test1, random_df, on='acc_id', how='left')\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","a819916f":"random_df = test2_combat.groupby('acc_id').agg({'random_attacker_cnt':'sum','random_defender_cnt':'sum'})\nrandom_df.columns = ['total_random_attacker_cnt','total_random_defender_cnt']\ntest2 = pd.merge(test2, random_df, on='acc_id', how='left')\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","e03358df":"pledge_cnt_sum_df = train_combat.groupby('acc_id').agg({'pledge_cnt':'sum','num_opponent':'sum'})\npledge_cnt_sum_df.columns = ['total_pledge_cnt','total_num_opponent']\ntrain = pd.merge(train, pledge_cnt_sum_df, on='acc_id', how='left')\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","ad9c4219":"pledge_cnt_sum_df = test1_combat.groupby('acc_id').agg({'pledge_cnt':'sum','num_opponent':'sum'})\npledge_cnt_sum_df.columns = ['total_pledge_cnt','total_num_opponent']\ntest1 = pd.merge(test1, pledge_cnt_sum_df, on='acc_id', how='left')\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","498d1f2c":"pledge_cnt_sum_df = test2_combat.groupby('acc_id').agg({'pledge_cnt':'sum','num_opponent':'sum'})\npledge_cnt_sum_df.columns = ['total_pledge_cnt','total_num_opponent']\ntest2 = pd.merge(test2, pledge_cnt_sum_df, on='acc_id', how='left')\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","9553398d":"total_pledge_id_df = train_pledge[['acc_id','char_id','server','pledge_id']].drop_duplicates().groupby('acc_id').pledge_id.count().reset_index()\ntotal_pledge_id_df.columns = ['acc_id','total_pledge_id']\ntrain = pd.merge(train, total_pledge_id_df, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train \ud06c\uae30 \uccb4\ud06c: ',train.shape)","14b69885":"total_pledge_id_df = test1_pledge[['acc_id','char_id','server','pledge_id']].drop_duplicates().groupby('acc_id').pledge_id.count().reset_index()\ntotal_pledge_id_df.columns = ['acc_id','total_pledge_id']\ntest1 = pd.merge(test1, total_pledge_id_df, on='acc_id', how='left')\ntest1 = test1.fillna(0)\nprint('test1 \ud06c\uae30 \uccb4\ud06c: ',test1.shape)","bceece04":"total_pledge_id_df = test2_pledge[['acc_id','char_id','server','pledge_id']].drop_duplicates().groupby('acc_id').pledge_id.count().reset_index()\ntotal_pledge_id_df.columns = ['acc_id','total_pledge_id']\ntest2 = pd.merge(test2, total_pledge_id_df, on='acc_id', how='left')\ntest2 = test2.fillna(0)\nprint('test2 \ud06c\uae30 \uccb4\ud06c: ',test2.shape)","c8e855c2":"f, ax = plt.subplots(1,5,figsize=(30,5))\nsns.scatterplot(train.total_pledge_id, train.survival_time,ax=ax[0])\nax[0].set_title('Correlation Total pledge ID and Survival Time')\nax[0].set_xlabel('Total pledge ID')\nax[0].set_ylabel('Survival Time')\nax[0].axvline(20, color='red', linestyle='--')\nsns.scatterplot(train.total_num_opponent, train.survival_time,ax=ax[1])\nax[1].set_title('Correlation Total Number of Opponent and Survival Time')\nax[1].set_xlabel('Total Number of Opponent')\nax[1].set_ylabel('Survival Time')\nax[1].axvline(100, color='red', linestyle='--')\nsns.scatterplot(train.total_pledge_cnt, train.survival_time,ax=ax[2])\nax[2].set_title('Correlation Total pledge Count and Survival Time')\nax[2].set_xlabel('Total pledge Count')\nax[2].set_ylabel('Survival Time')\nax[2].axvline(100, color='red', linestyle='--')\nsns.scatterplot(train.sales_cnt, train.survival_time,ax=ax[3])\nax[3].set_title('Correlation Sales Count and Survival Time')\nax[3].set_xlabel('Sales Count')\nax[3].set_ylabel('Survival Time')\nax[3].axvline(1000, color='red', linestyle='--')\nsns.scatterplot(train.avg_playtime, train.survival_time,ax=ax[4])\nax[4].set_title('Correlation Average Playtime and Survival Time', color='red')\nax[4].set_xlabel('Average Playtime')\nax[4].set_ylabel('Survival Time')\nplt.show()\n\ntrain64 = train[train.survival_time==64]\n\nf, ax = plt.subplots(1,4,figsize=(24,3))\nsns.distplot(train64.total_pledge_id, ax=ax[0])\nax[0].set_title('Histogram of Total pledge ID with Non-Churn')\nax[0].set_xlabel('Total pledge ID')\nax[0].axvline(20, color='red', linestyle='--')\nsns.distplot(train64.total_num_opponent, ax=ax[1])\nax[1].set_title('Histogram of Total Number of Opponent with Non-Churn')\nax[1].set_xlabel('Total Number of Opponent')\nax[1].axvline(100, color='red', linestyle='--')\nsns.distplot(train64.total_pledge_cnt, ax=ax[2])\nax[2].set_title('Histogram of Total pledge Count with Non-Churn')\nax[2].set_xlabel('Total pledge Count')\nax[2].axvline(100, color='red', linestyle='--')\nsns.distplot(train64.sales_cnt, ax=ax[3])\nax[3].set_title('Histogram of Sales Count with Non-Churn')\nax[3].set_xlabel('Sales Count')\nax[3].axvline(1000, color='red', linestyle='--')\nplt.show()","aafbae81":"f, ax = plt.subplots(1,2,figsize=(15,5))\nsns.scatterplot(train.total_random_defender_cnt, train.survival_time, ax=ax[0])\nax[0].set_title('Correlation Random Defender Count and Survival Time')\nax[0].set_xlabel('Random Defender Count')\nax[0].set_ylabel('Survival Time')\nax[0].axvline(100, color='red', linestyle='--')\nsns.scatterplot(train.total_random_attacker_cnt, train.survival_time, ax=ax[1])\nax[1].set_title('Correlation Random Attacker Count and Survival Time')\nax[1].set_xlabel('Random Attacker Count')\nax[1].set_ylabel('Survival Time')\nax[1].axvline(200, color='red', linestyle='--')\nplt.show()\n\ntrain64 = train[train.survival_time==64]\n\nf, ax = plt.subplots(1,2,figsize=(15,3))\nsns.distplot(train64.total_pledge_id, ax=ax[0])\nax[0].set_title('Histogram of Random Defender Count with Non-Churn')\nax[0].set_xlabel('Random Defender Count')\nax[0].axvline(100, color='red', linestyle='--')\nsns.distplot(train64.total_num_opponent, ax=ax[1])\nax[1].set_title('Histogram of Random Attacker Count with Non-Churn')\nax[1].set_xlabel('Random Attacker Count')\nax[1].axvline(200, color='red', linestyle='--')\nplt.show()","3f1f6c0e":"_, ax = plt.subplots(2,4, figsize=(20,10))\nf = ['class0','class1','class2','class3','class4','class5','class6','class7']\nl = [20,50,19,10,10,10,40,20]\nfor i in range(8):\n    sns.scatterplot(train[f[i]], train.survival_time, ax=ax[i\/\/4,i%4])\n    ax[i\/\/4,i%4].set_ylabel('Survival Time')\n    ax[i\/\/4,i%4].axvline(l[i], color='red', linestyle='--')\n    if i != 6:\n        ax[i\/\/4,i%4].set_title('Correlation {} and Survival Time'.format(f[i]))\n    else:\n        ax[i\/\/4,i%4].set_title('Correlation {} and Survival Time'.format(f[i]), color='red')","44146276":"train_idx = validation_acc[validation_acc.set=='Train'].acc_id\nvalid_idx = validation_acc[validation_acc.set=='Validation'].acc_id\n\ntrain_set = train[train.acc_id.isin(train_idx)]\nvalid_set = train[train.acc_id.isin(valid_idx)]\n\nprint('train set: ',train_set.shape)\nprint('valid set: ',valid_set.shape)","cb54bf2c":"def survival64(y_pred, dataset):\n    y_true = dataset.get_label()\n    y_pred = np.array([64 if x > 64 else x for x in y_pred])\n    y_pred = np.array([0 if x < 0 else x for x in y_pred])\n    y_pred = np.round(y_pred)\n    error = np.sqrt(mean_squared_error(y_true, y_pred))\n    return 'error', error, False","884648a2":"lr_amount = LinearRegression()\nlr_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.amount_spent)\nlr_amount_pred = lr_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_amount_pred = pd.Series(lr_amount_pred).apply(lambda x: 0 if x < 0 else x)","56696bf4":"lr_survival = LinearRegression()\nlr_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.survival_time)\nlr_survival_pred = lr_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_survival_pred = pd.Series(lr_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlr_survival_pred = lr_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","3c1a65cd":"lr_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lr_survival_pred,\n                           'amount_spent':lr_amount_pred})\nprint('lr_pred_df shape: ',lr_pred_df.shape)","cebd9875":"# amount\nlr_amount_pred_test1 = lr_amount.predict(test1.drop(['acc_id'], axis=1))\nlr_amount_pred_test2 = lr_amount.predict(test2.drop(['acc_id'], axis=1))\n# survival time\nlr_survival_pred_test1 = lr_survival.predict(test1.drop(['acc_id'], axis=1))\nlr_survival_pred_test2 = lr_survival.predict(test2.drop(['acc_id'], axis=1))\n# concat\ntest1_lr = pd.DataFrame({'acc_id':test1.acc_id,\n                         'survival_time':lr_survival_pred_test1,\n                         'amount_spent':lr_amount_pred_test1})\ntest2_lr = pd.DataFrame({'acc_id':test2.acc_id,\n                         'survival_time':lr_survival_pred_test2,\n                         'amount_spent':lr_amount_pred_test2})\n# print\nprint('Linear Regression Test1 Prediction shape: ',test1_lr.shape)\nprint('Linear Regression Test2 Prediction shape: ',test2_lr.shape)","2d0e66c6":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':10,\n    'n_jobs':5,\n    'random_state':seed\n}","e4bc1210":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","f2e8955d":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","7b07e427":"rf_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","5319a601":"# amount\nrf_amount_pred_test1 = rf_amount.predict(test1.drop(['acc_id'], axis=1))\nrf_amount_pred_test2 = rf_amount.predict(test2.drop(['acc_id'], axis=1))\n# survival time\nrf_survival_pred_test1 = rf_survival.predict(test1.drop(['acc_id'], axis=1))\nrf_survival_pred_test2 = rf_survival.predict(test2.drop(['acc_id'], axis=1))\n# concat\ntest1_rf = pd.DataFrame({'acc_id':test1.acc_id,\n                         'survival_time':rf_survival_pred_test1,\n                         'amount_spent':rf_amount_pred_test1})\ntest2_rf = pd.DataFrame({'acc_id':test2.acc_id,\n                         'survival_time':rf_survival_pred_test2,\n                         'amount_spent':rf_amount_pred_test2})\n# print\nprint('Random Forest Test1 Prediction shape: ',test1_lr.shape)\nprint('Random Forest Test2 Prediction shape: ',test2_lr.shape)","202407b2":"lgb_params = {\n    'n_estimators':800,\n    'sees':seed\n}","f7e434a9":"lgb_train_amount = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                               train_set.amount_spent)\nlgb_train_survival = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                                 train_set.survival_time)","af093ab0":"lgb_amount = lgb.train(lgb_params, \n                       lgb_train_amount,\n                       feval=survival64,\n                       valid_sets=[lgb_train_amount],\n                       verbose_eval=100)\n\nlgb_amount_pred = lgb_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)","df177f8f":"lgb_survival = lgb.train(lgb_params, \n                         lgb_train_survival,\n                         feval=survival64,\n                         valid_sets=[lgb_train_survival],\n                         verbose_eval=100)\n\nlgb_survival_pred = lgb_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlgb_survival_pred = lgb_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","cecaba27":"lgb_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lgb_survival_pred,\n                           'amount_spent':lgb_amount_pred})\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)","b4be73f3":"# amount\nlgb_amount_pred_test1 = lgb_amount.predict(test1.drop(['acc_id'], axis=1))\nlgb_amount_pred_test2 = lgb_amount.predict(test2.drop(['acc_id'], axis=1))\n# survival time\nlgb_survival_pred_test1 = lgb_survival.predict(test1.drop(['acc_id'], axis=1))\nlgb_survival_pred_test2 = lgb_survival.predict(test2.drop(['acc_id'], axis=1))\n# concat\ntest1_lgb = pd.DataFrame({'acc_id':test1.acc_id,\n                         'survival_time':lgb_survival_pred_test1,\n                         'amount_spent':lgb_amount_pred_test1})\ntest2_lgb = pd.DataFrame({'acc_id':test2.acc_id,\n                         'survival_time':lgb_survival_pred_test2,\n                         'amount_spent':lgb_amount_pred_test2})\n# print\nprint('Light GBM Test1 Prediction shape: ',test1_lr.shape)\nprint('Light GBM Test2 Prediction shape: ',test2_lr.shape)","cc9fdc51":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result) \n    return score","639efcbe":"lr_valid_score = score_function(lr_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nrf_valid_score = score_function(rf_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nlgb_valid_score = score_function(lgb_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(valid_set[['acc_id','survival_time','amount_spent']],\n                            valid_set[['acc_id','survival_time','amount_spent']])\n\nprint('Linear Regression score: ',lr_valid_score)\nprint('Random Forest score: ',rf_valid_score)\nprint('Light GBM score: ',lgb_valid_score)\nprint('true score: ',true_score)","024cb536":"# Linear Regression\ntest1_lr.to_csv('test1_lr_tootouch_baseline2.csv', index=False)\ntest2_lr.to_csv('test2_lr_tootouch_baseline2.csv', index=False)\n# Randaom Forest\ntest1_rf.to_csv('test1_rf_tootouch_baseline2.csv', index=False)\ntest2_rf.to_csv('test2_rf_tootouch_baseline2.csv', index=False)\n# Light GBM\ntest1_lgb.to_csv('test1_lgb_tootouch_baseline2.csv', index=False)\ntest2_lgb.to_csv('test2_lgb_tootouch_baseline2.csv', index=False)","0d20254e":"## total random_acttacker & defender cnt\n- \uc720\uc800\ubcc4 \ub9c9\ud53c \uacf5\uaca9 \ucd1d \ud69f\uc218\uc640 \ud53c\ud574 \ucd1d \ud69f\uc218\ub97c \uad6c\ud55c\ub2e4.","028ef191":"## total pledge_cnt & total num_opponent\n- \uc720\uc800\ubcc4 \uadf8\ub8f9\ud654\ub97c \ud1b5\ud574 \ud608\ub9f9\uac04 \uc804\ud22c \ucd1d \ud69f\uc218 & \uc804\ud22c \uce90\ub9ad\ud130 \ucd1d \uc218\ub97c \uad6c\ud55c\ub2e4.","fd03d3c0":"## max_amount & median_amount\n28\uc77c\ub3d9\uc548 payment \uae30\ub85d\uc774 \uc788\ub294 \uc720\uc800\ub9cc \ucd5c\ub300\uac12\uacfc \uc911\uac04\uac12\uc73c\ub85c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4","ec69bb9a":"# Split data\n\n\uc774\uc804\uc5d0 \ud559\uc2b5\ub370\uc774\ud130\uc640 \ud3c9\uac00\ub370\uc774\ud130\ub85c \ub098\ub208 \uc720\uc800 ID\ub97c \uac00\uc838\uc628\ub2e4","5b62762c":"# Configuration\n\uae30\ubcf8 \uc124\uc815\uac12\uc744 \uc9c0\uc815\ud558\ub294 \uacf3","bf9dbf3e":"# Visualization","528dcdaa":"## Model 2: Random Forest","26468a1a":"## Model 1: Linear Regression","18b5d5d2":"\ub9c9\ud53c \ud53c\ud574\/\uac00\ud574 \ud69f\uc218\uc5d0 \ub530\ub77c \ucc28\uc774\uac00 \uc788\ub2e4. \ub9c9\ud53c \ud53c\ud574\ub97c \ub9ce\uc774 \uc785\uc740 \uacbd\uc6b0, \uc794\uc874\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\uc640 \uc0c1\uad00\uc774 \uc788\ub2e4. \ubc18\uba74 \uac00\ud574\uc758 \uacbd\uc6b0 \ud53c\ud574\uc5d0 \ube44\ud574 \ub9c9\ud53c \uac00\ud574 \ube48\ub3c4\uac00 \ub192\uc740\uac83\uacfc \uc794\uc874\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\uc640 \ud070 \uc0c1\uad00\uc740 \uc5c6\ub2e4.","536cb4b1":"## std_playtime & avg_playtime\n1. \uba3c\uc800 \uc77c\ubcc4, \uc720\uc800\ubcc4\ub85c \ud558\ub8e8\uc5d0 \ucd1d \uac8c\uc784\uc2dc\uac04\uc744 \uad6c\ud55c\ub2e4.\n2. \uc720\uc800\ubcc4 \uc77c\ubcc4 \ud3c9\uade0,\ud45c\uc900\ud3b8\ucc28 \uac8c\uc784\uc2dc\uac04 \uacc4\uc0b0\uc744 \uad6c\ud55c\ub2e4.\n3. \ud45c\uc900\ud3b8\ucc28\uac00 NaN\uc778 \uacbd\uc6b0\ub294 \ud45c\ubcf8\uc774 1\uac1c\uc778 \uacbd\uc6b0\uc774\ubbc0\ub85c 0\uc73c\ub85c \ud55c\ub2e4.","3bfe6a73":"light GBM \uc0ac\uc6a9 \ub370\uc774\ud130\uc14b \uc0dd\uc131","129a193b":"## total pledge_id \n1. \uc720\uc800\ubcc4 \uac00\uc785\ud55c \ud608\ub9f9 \uc218\ub97c \ud655\uc778\ud558\uae30\uc704\ud574 \uc720\uc800ID, \uce90\ub9ad\ud130ID, \uc11c\ubc84, \ud608\ub9f9ID\ub97c \ucd94\ucd9c \ud6c4 \uc911\ubcf5\uac12\uc744 \uc81c\uac70\ud55c\ub2e4.\n2. \uc720\uc800\ubcc4 \ud608\ub9f9 \uc218\ub97c \uc13c\ub2e4.","d4dcbb2d":"## total_days\n1. \uc720\uc800\ubcc4 \ud65c\ub3d9\uc77c \uc218\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac01 \uc720\uc800\uac00 \uac01 \uc11c\ubc84\uc5d0 \uc788\ub294 \uac01 \uce90\ub9ad\ud130\ub97c \ud65c\ub3d9\ud55c \uc77c\uc218\ub97c \ud655\uc778\ud558\uace0 \ubaa8\ub450 \ub354\ud55c\ub2e4.","88d65173":"# Preprocessing\n\n`\uc0ac\uc6a9 \ubcc0\uc218`\n\n- total_days : \ud65c\ub3d9\uc77c \uc218 \ud569\n- total_char_id : \uc720\uc800\ubcc4 \uce90\ub9ad\ud130 \uc218\n- max_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \ucd5c\ub300\uac12\n- median_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \uc911\uac04\uac12\n- std_playtime : \uc720\uc800\ubcc4 \uac8c\uc784\uc2dc\uac04 \ud45c\uc900\ud3b8\ucc28\n- avg_playtime : \uc720\uc800\ubcc4 \uac8c\uc784\uc2dc\uac04 \ud3c9\uade0\n- total_sales : \uc720\uc800\ubcc4 \ucd1d \ud310\ub9e4 \ud69f\uc218\n- total_amount : \uc720\uc800\ubcc4 \ucd1d \ud310\ub9e4\ub7c9\n- class{n} : \uc720\uc800\ubcc4 \uc9c1\uc5c5\ubcc4 \uce90\ub9ad \uc218\n- total_random_acttacker_cnt : \uc720\uc800\ubcc4 \ub9c9\ud53c \uacf5\uaca9 \ucd1d \ud69f\uc218\n- total_random_defender_cnt : \uc720\uc800\ubcc4 \ub9c9\ud53c \ud53c\ud574 \ucd1d \ud69f\uc218\n- total_pledge_cnt : \uc720\uc800\ubcc4 \ud608\ub9f9 \uc804\ud22c \ucd1d \ud69f\uc218\n- total_num_opponent : \uc720\uc800\ubcc4 \uc804\ud22c \uc0c1\ub300 \ucd1d \uc218\n- total_pledge_id : \uc720\uc800\ubcc4 \uac00\uc785 \ud608\ub9f9 \uc218","f0efcc01":"## class{n}\n1. \uc720\uc800\ubcc4 \uc9c1\uc5c5\ubcc4 \uac1c\uc218\ub97c \ucc3e\uae30 \uc704\ud574 \uc720\uc800ID, \uce90\ub9ad\ud130ID, class\ub9cc \uba3c\uc800 \ucd94\ucd9c\ud55c \ud6c4 \uc911\ubcf5\ub418\ub294 \uac12\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4.\n2. \uc774 \ud6c4 \uc720\uc800ID\uc640 \uc9c1\uc5c5\uc744 \uadf8\ub8f9\ud654\ud558\uc5ec \uc720\uc800\ubcc4 \uc9c1\uc5c5\uc774 \uba87\uac1c\uc788\ub294\uc9c0 \uac2f\uc218\ub97c \uc138\uace0 \uac01 \uac12\ub4e4\uc744 \uc720\uc800\ubcc4 \uc9c1\uc5c5\ubcc4 \ub370\uc774\ud130\ub85c unstack\ud55c\ub2e4.","37970653":"### Test1 & Test2","d41024b6":"1. Linear Regression\n2. Random Forest Regression\n3. Light GBM","9fd245b3":"### Test1 & Test2","017b529c":"## total char_id\n1. \uc720\uc800\ubcc4 \uce90\ub9ad\ud130 \uc218\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 \uc720\uc800ID, \uc11c\ubc84, \uce90\ub9ad\ud130ID\ub97c \ucd94\ucd9c\ud6c4 \uc911\ubcf5\uac12\uc744 \uc81c\uac70\ud55c\ub2e4. \n2. \uc720\uc800ID \uac2f \uc218\ub97c \uc13c\ub2e4.","01f39b1f":"## Validation Data","0496259d":"# Baseline Part 2\n\n## Question\n`Activity`\n1. \uc720\uc800\ubcc4 \ud558\ub8e8 \ud3c9\uade0 \uac8c\uc784\uc2dc\uac04\n    1. \uce90\ub9ad\ud130\uac00 \uc5ec\ub7ec\uac1c\uc778 \uacbd\uc6b0 \ud558\ub8e8\uc5d0 \uc5ec\ub7ec\uac00\uc9c0 \uce90\ub9ad\uc744 \ud588\uc73c\uba74 \ud569\uc73c\ub85c \ud558\ub8e8\ub97c \uacc4\uc0b0\n    2. \uc804\uccb4 \uac8c\uc784\uc2dc\uac04 \/ \uc804\uccb4 \ud65c\ub3d9\uc77c \uc218 \ub85c \uacc4\uc0b0\n2. \uc720\uc800\ubcc4 \ud558\ub8e8 \ud3c9\uade0 \uac8c\uc784\uc2dc\uac04\uc758 \ubd84\uc0b0\n    - \ub9cc\uc77c \uc720\uc800\uc758 \ud65c\ub3d9\uc77c \uc218\uac00 \ud558\ub8e8\uc778 \uacbd\uc6b0 \ubd84\uc0b0\uc740 0\uc73c\ub85c \uce58\ud658\n    \n`Trade`\n1. \uc720\uc800\ubcc4 \ucd1d \ud310\ub9e4 \ud69f\uc218\n    - \uac8c\uc784 \uc811\uae30 \uc804\uc5d0\ub294 \ub300\ubd80\ubd84 \uc18c\uc9c0\ud55c \uc544\uc774\ud15c\ub4e4\uc744 \ubaa8\ub450 \uccad\uc0b0\ud558\ub824 \ud55c\ub2e4.\n2. \uc720\uc800\ubcc4 \uac70\ub798\uc544\uc774\ud15c \ucd1d \uc218\ub7c9\n    - \ucd1d \ud310\ub9e4 \ud69f\uc218\uac00 \uc801\uc5b4\ub3c4 \ub9ce\uc740 \uc544\uc774\ud15c\ub4e4\uc744 \uccad\ud55c\ud560 \uc218 \uc788\ub2e4.\n\n`Combat`\n1. \uc720\uc800\ubcc4 \ubcf4\uc720 \uc9c1\uc5c5 \uac2f \uc218\n    - \ube68\ub9ac \uc9c8\ub9ac\ub294 \uc9c1\uc5c5\uc774 \uc788\ub294\uac00?\n2. \uc720\uc800\ubcc4 \ucd1d \ub9c9\ud53c \uacf5\uaca9 \ud69f\uc218\n3. \uc720\uc800\ubcc4 \ucd1d \ub9c9\ud53c \ud53c\ud574 \ud69f\uc218\n4. \uc720\uc800\ubcc4 \ud3c9\uade0 \uc804\ud22c \uc0c1\ud0dc \uce90\ub9ad\ud130 \uc218\n5. \uc720\uc800\ubcc4 \ud608\ub9f9\uac04 \uc804\ud22c\uc5d0 \ucc38\uc5ec\ud55c \ud69f\uc218\n    - \uace0\ub7a9\uc720\uc800\ub294 \ub2e4\ub300\uc77c \uc804\ud22c\ub97c \uc88b\uc544\ud55c\ub2e4.(\uac00\uc124) \uace0\ub7a9\uc720\uc800\ub294 \uc794\uc874\uae30\uac04\uc774 \uae38\ub2e4.\n\n`Pledge`\n1. \uc720\uc800\ubcc4 \ud608\ub9f9 \uc544\uc774\ub514 \ucd1d \uc218\n    1. \uc720\uc800\ubcc4 \uce90\ub9ad\ud130\ubcc4 \ub2e4\ub978 \ud608\ub9f9\uc774 \uc788\uc744 \uc218 \uc788\uc9c0 \uc54a\uc744\uae4c?\n    2. \uce90\ub9ad\ud130 \uc218\ub85c \uac00\uc785 \ud608\ub9f9 \ucd1d \uc218\ub97c \ub098\ub204\uc5b4\uc11c \ud655\uc778\n    3. \uac12\uc774 \ud074\uc218\ub85d \ud608\ub9f9\uc744 \uc790\uc8fc \uc62e\uae34\ub294 \uc720\uc800\uc774\ub2e4.\n\n## \uc0ac\uc6a9 \ubcc0\uc218\n- total_days : \ud65c\ub3d9\uc77c \uc218 \ud569\n- total_char_id : \uc720\uc800\ubcc4 \uce90\ub9ad\ud130 \uc218\n- max_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \ucd5c\ub300\uac12\n- median_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \uc911\uac04\uac12\n- std_playtime : \uc720\uc800\ubcc4 \uac8c\uc784\uc2dc\uac04 \ud45c\uc900\ud3b8\ucc28\n- avg_playtime : \uc720\uc800\ubcc4 \uac8c\uc784\uc2dc\uac04 \ud3c9\uade0\n- total_sales : \uc720\uc800\ubcc4 \ucd1d \ud310\ub9e4 \ud69f\uc218\n- total_amount : \uc720\uc800\ubcc4 \ucd1d \ud310\ub9e4\ub7c9\n- class{n} : \uc720\uc800\ubcc4 \uc9c1\uc5c5\ubcc4 \uce90\ub9ad \uc218\n- total_random_acttacker_cnt : \uc720\uc800\ubcc4 \ub9c9\ud53c \uacf5\uaca9 \ucd1d \ud69f\uc218\n- total_random_defender_cnt : \uc720\uc800\ubcc4 \ub9c9\ud53c \ud53c\ud574 \ucd1d \ud69f\uc218\n- total_pledge_cnt : \uc720\uc800\ubcc4 \ud608\ub9f9 \uc804\ud22c \ucd1d \ud69f\uc218\n- total_num_opponent : \uc720\uc800\ubcc4 \uc804\ud22c \uc0c1\ub300 \ucd1d \uc218\n- total_pledge_id : \uc720\uc800\ubcc4 \uac00\uc785 \ud608\ub9f9 \uc218\n    \n## \uc0ac\uc6a9 \ubaa8\ub378\n1. Linear Regression\n2. Random Forest\n3. Light GBM\n\n## \uacb0\uacfc\n**Baseline 1**\n\nModel | Score\n---|---\nTrue Label | 30704.35\nLinear Regression | 3492.45\nRandom Forest | 3993.83\nLight GBM | 3674.59\n\n**Baseline 2**\n\nModel | Score\n---|---\nTrue Label | 30704.35\nLinear Regression | 4435.33\nRandom Forest | 4392.21\nLight GBM | 4384.03","37b174c9":"## Target","054da993":"\uc77c\ubcc4 \ud3c9\uade0 \uc9c0\ucd9c\uae08\uc561(amount_spent)\uc5d0 \uc601\ud5a5\uc744 \ubc1b\ub294 \uac83\uc740 \uc5c6\uc5c8\ub2e4. \ubc18\uba74\uc5d0 \uba87\uac00\uc9c0 \ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0\ub294 \uc794\uc874 \uc77c\uc218(survival_time)\uacfc \uc0c1\uad00\uc774 \uc788\ub2e4. \uac01 \ubcc0\uc218\ubcc4 \ube68\uac04\uc120\uc744 \uae30\uc900\uc73c\ub85c \uc794\uc874 \uc77c\uc218\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098 \uc5ec\uc804\ud788 False Negative\uc758 \ube44\uc911\uc774 \ub354 \ud06c\ub2e4.","72cecd19":"# Evaluation\n\n\ud3c9\uac00\ub294 **Score function** \uc744 \ud1b5\ud574 \uae30\ub300\uc774\uc775\uc744 \uacc4\uc0b0\ud55c\ub2e4","a5dafb5b":"### Test1 & Test2","a66c865c":"## total amount\n1. trade \ud14c\uc774\ube14\uc5d0\uc11c \ud310\ub9e4\uc790\uac00 train set\uc5d0 \uc788\ub294 \uc720\uc800\uc778 \uacbd\uc6b0\ub9cc \ucd94\ucd9c\n2. \ucd94\ucd9c\ub41c \ub370\uc774\ud130\uc5d0\uc11c \uac01 \uc720\uc800\ubcc4 \ud310\ub9e4\ub7c9 \ucd1d\ud569 \uacc4\uc0b0","9344738e":"## total_sales\n\n\ucd1d \ud310\ub9e4 \ud69f\uc218\ub294 trade \ud14c\uc774\ube14\uc5d0\uc11c \uac01 \uc720\uc800\uac00 \uba87\ubc88 \ud314\uc558\ub294\uc9c0 \ud69f\uc218\ub97c \uc13c \ud6c4 join\ud55c\ub2e4.","de1035ca":"## Model3: Light GBM","c6d56f26":"\uc9c1\uc5c5 \uad70\uc5d0 \ub530\ub77c \uc794\uc874 \uc77c\uc218\ub294 True Positive \ube44\uc728\uc774 \ub354 \ub192\ub2e4. Class 6\uc758 \uacbd\uc6b0 \ube48\ub3c4 \uc218\uc5d0 \ub530\ub77c \uc794\uc874 \uc77c\uc218\ub97c \uad6c\ubd84\ud560 \uc218 \uc5c6\uc9c0\ub9cc \ud558\ub098 \uc774\uc0c1\uce58\uac00 \uc788\ub2e4. ","cf2e24f0":"# Load Data","02473968":"# Modeling","7fd02724":"**Custom Metric**\n- survival time\uc758 \uacbd\uc6b0 64\uc774\uc0c1\uc778 \uac12\uc740 64\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. \n- Boosting model\ub4e4\uc740 \ud559\uc2b5\uacfc\uc815\uc5d0 \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud558\uc5ec error\ub97c \ud559\uc2b5\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c \ud574\uacb0\uc5d0 \uc801\ud569\ud55c \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4."}}