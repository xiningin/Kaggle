{"cell_type":{"5737cfda":"code","fd230759":"code","19fed474":"code","c2b11cd1":"code","f70e09bd":"code","3fdea76b":"code","a9e3e3ce":"code","df978309":"code","cf45ad92":"code","690cdd7c":"code","d9909af1":"code","87c72e3b":"markdown","114b6734":"markdown","9665077e":"markdown","033a55d1":"markdown","c443a31c":"markdown","a553b814":"markdown","235b384a":"markdown","93a49280":"markdown","482a4472":"markdown","7bcba228":"markdown","2b0f9a86":"markdown","7bf8c652":"markdown","4989e35c":"markdown","55bb6bdc":"markdown","84f8a88d":"markdown","84bb8f86":"markdown"},"source":{"5737cfda":"def speed(distance, time):\n    return distance \/ time\n\ntest_case = speed(10, 2)\nprint(f'Speed across distance = 10 and time = 2 is {test_case}')","fd230759":"def can_ride_free(age, height):\n    if age >= 10 and height >= 120:\n        return True\n    else:\n        return False\n    \ntest_case_1 = can_ride_free(15, 150)\ntest_case_2 = can_ride_free(8, 119)\ntest_case_3 = can_ride_free(14, 100)\n\nprint(f'The output of test case 1 should be True, got {test_case_1}')\nprint(f'The output of test case 2 should be False, got {test_case_2}')\nprint(f'The output of test case 3 should be False, got {test_case_3}')","19fed474":"def calculate_cartons(num_of_bottles):\n    num_of_cartons = num_of_bottles \/ 6\n    \n    if type(num_of_cartons) == float:\n        \n        num_of_cartons = (num_of_bottles \/\/ 6) + 1\n        \n    return num_of_cartons\n\ndef run_test_case():\n    \n    num_of_bottles = input('Number of bottles? ')\n    num_of_bottles = int(num_of_bottles)\n    num_of_cartons = calculate_cartons(num_of_bottles)\n\n    if num_of_cartons == 1:\n        print('1 carton required')\n    else:\n        print(f'{num_of_cartons} cartons required')\n        \n    return num_of_cartons\n    \ntest_case_1 = run_test_case() # 9 bottles\ntest_case_2 = run_test_case() # 6 bottles\nprint(f'The output of test_case_1 should be 2, got {test_case_1}')\nprint(f'The output of test_case_2 should be 1, got {test_case_2}')\n","c2b11cd1":"def weighted_average(marks, weights):\n    total_elements = len(marks)\n    \n    weighted_marks = [marks[i] * weights[i] for i in range(total_elements)]\n    \n    total_mark = sum(weighted_marks)\n    weighted_average = total_mark \/ total_elements\n    \n    return weighted_average\n\ntest_case = weighted_average([2, 4], [3, 5])\nprint(f'The output of test_case should be 13, got {test_case}')","f70e09bd":"def sum_until(n):\n    sum_at_point, starting_point = 0, 0\n    \n    while sum_at_point < n:\n        sum_at_point += starting_point\n        starting_point += 1\n    \n    return sum_at_point\n\ntest_case_1 = sum_until(9)\ntest_case_2 = sum_until(16)\nprint(f'The outout of test_case_1 should be 10, got {test_case_1}')\nprint(f'The output of test_case_2 should be 21, got {test_case_2}')","3fdea76b":"def print_powers(nums):\n    for i in nums:\n        print(f'{i} {i**2} {i**3}')\n        \ntest_case = print_powers([3, 5, 1])","a9e3e3ce":"def convert_to_kilograms(measurements):\n    # return [measurements[i] * 1000 for i in range(len(measurements))]\n    \n    for i in range(len(measurements)):\n        measurements[i] = measurements[i] * 1000\n        \nmeasurements = [5, 25, 7]\nconvert_to_kilograms(measurements)\nprint(f'The output of test_case should be 5000, 25000, 7000, got {measurements}')","df978309":"def product_tuples(items):\n    weights, lengths = [], []\n    \n    for item in items:\n        weights.append(item[0])\n        lengths.append(item[1])\n\n    # weights_product, lengths_product = prod(weights), prod(lengths)\n    weights_product, lengths_product = 1, 1\n    \n    for weight in weights:\n        weights_product *= weight\n        \n    for length in lengths:\n        lengths_product *= length\n    \n    return (weights_product, lengths_product)\n\n\ntest_case_1_items = [(40.5, 1.0), (20.5, 2.5), (10.0, 5.0)]\ntest_case_1 = product_tuples(test_case_1_items)\nprint(f'The output of test_case_1 should be (8302.5, 12.5), got {test_case_1}')\n\ntest_case_2_items = [(2.0, 10.0), (3.0, 20.0), (4.0, 30.0)]\ntest_case_2 = product_tuples(test_case_2_items)\nprint(f'The output of test_case_1 should be (24.0, 6000.0), got {test_case_2}')","cf45ad92":"def nearby_towns(towns, max_distance):\n    town_set = set()\n    for key, value in towns.items():\n        if value <= max_distance:\n            town_set.add(key)\n            \n    return town_set\n    \n    \ntowns = {'Kaiapoi': 20.6, 'Sheffield': 54.0, 'Lincoln': 28.4, 'Springfield': 64.3, 'Methven': 95.3,\n        'Hororata': 59.6, 'Darfield': 50.1, 'Rangiora': 30.0}\ngot = nearby_towns(towns, 30.0)\nexpected = {'Kaiapoi', 'Lincoln', 'Rangiora'}\nprint(got == expected)","690cdd7c":"import numpy as np\n\ndef quadrratic(xs, a, b, c):\n    pass\n    \nxs = np.array('4396')","d9909af1":"class Beetle:\n    def __init__(self, name, length, num_legs, has_wings):\n        self.name = name\n        self.length = length\n        self.num_legs = num_legs\n        self.has_wings = has_wings\n        \n        print(f'{self.name} ({round(self.length, 1)} mm) with {num_legs} legs and ', end='')\n        \n        if self.has_wings:\n            print('wings')\n        else:\n            print('no wings')\n    \n\ngood_guy = Beetle('Centipede', 12.9, 20, False)\nbad_guy = Beetle('Wasp', 10.16, 6, True)","87c72e3b":"## Sample questions for dictionary functions","114b6734":"You have been asked to put a number of wine bottles into small cartons, each of which holds 6 bottles. Write a program that prompts the user for the number of bottles and then prints the number of cartons required. The prompt string for input is \"Number of bottles?\" (with a space at the end) and the output is of the form 1 carton required if just a single carton is required or 17 cartons required otherwise. \\[The difference is the 's' at the end of 'cartons'\\].\n\nThe number of cartons required is always an integer and includes any partially-filled cartons. For example, if there are 9 bottles, you need 1 full carton of 6 bottles plus one extra carton containing only 3 bottles.\n\nSo the number of cartons required is 2 in that case.","9665077e":"Write a function `speed(distance, time)` that returns the speed across a distance with a given time.","033a55d1":"Write a function `quadratic(xs, a, b, c)` that takes as parameters a numpy array `xs` and three floats `a`, `b`. and `c` and returns a numpy array of the values `ax2 + bx + c` for each of the `x` values in the array `xs`.\n\nYour function cannot use any loops or if statements. You should import numpy before defining your function. \uff08\u770b\u4e0d\u592a\u61c2\uff09","c443a31c":"Write a function `convert_to_kilograms(measurements)` which takes a list of measurements in tonnes as a parameter and **modifies that list** by replacing each measurement with its kilograms version, which involves multiplying by 1000.\n\nYou will need to use the updated-list pattern, so the function should not explicitly return a value.","a553b814":"## Sample questions for numpy functions","235b384a":"Write a class _Beetle_ that behaves as follows:\n\n1. Instances of _Beetle_ are created with constructor calls of the form\n\n```\ngood_guy = Beetle('Centipede', 12.9, 20, False)\nbad_guy = Beetle('Wasp', 10.16, 6, True)\n```\n\nwhere the four parameters are: \n* The kind of beetle\n* Its length in mm (a floating point value)\n* The number of legs\n* A 'has_wings' parameter that's True if the beetle has wings.\n\n2. When printed, beetles are displayed as in the following two examples, which correspond to the two examples above:\n\n* Centipede (12.9 mm) with 20 legs and no wings \n* Wasp (10.2 mm) with 6 legs and wings\n\nLengths are always displayed with exactly 1 digit after the decimal point.\n\nYou may assme that the number of legs is never 1, so you don't need to decide whether to display _leg_ or _legs_.\n\n3. A beetle's length can be changed by a call to its _grow_ method with a floating point parameter that sets the amount by which the length increases. See the example below: \uff08\u54ea\u5462\uff1f\uff09\n","93a49280":"Write a function `sum_until(n)` that sums the integers 1, 2, 3, ... etc until the total equals or exceeds n.\n\nIt then **returns** the value of the total at that point. You may assume n is non-negative. For example, `sum_until(9)` would compute `1 + 2 + 3 + 4`, at which point the sum is 10, so that value would be returned to the caller.\n\n**Notes:**\n\n* You are required to use a `while` loop for this\n* You cannot use any for loop or comprehensions in your answer.","482a4472":"Write a function`nearby_towns(towns, max_distance)` that takes two parameters: a dictionary `towns`, that maps from town names to their distance from some reference city, and a number `max_distance` that is the maximum distance of interest.\n\nThe function should return a **set** of the names of all the towns that are at most max distance away.","7bcba228":"Write a function `weighted_average(marks, weights)` that takes two equal-length non-empty lists of non-negative integer or floats as parameters and **returns** the weighted average of the marks.\n\nThe weighted average is computed by multiplying each mark by its corresponding weight to get a weighted mark.\n\nThe sum of the weighted marks is then divided by the sum of the weights. (\u611f\u89c9\u8fd9\u91cc\u9898\u76ee\u63cf\u8ff0\u778e\u5199\uff09","2b0f9a86":"Write a function `print_powers(nums)` that takes a list of integers as a parameter. \n\nFor each integer in the list the function prints a line displaying the integer, the integer squared and the integer cubed.\n\nThe numbers are separated by a single space.\n\nThe function does not return anything.","7bf8c652":"## Sample questions to writing a class in Python","4989e35c":"Write a function `produce_tuples(tuple_list)` that takes a list of 2-element (weight, length) tuples as a parameter and returns a tuple containing two values: the product of the weights from the input tuples and the product of the lengths from the input tuples.","55bb6bdc":"A free bus ride is available only to people who at least 10 years of age and at least 120 cm tall. Write a boolean-valued function `can_ride_free(age, height)` that returns `True` if a person of the given age and height satisfies the criteria for the free ride and `False` otherwise.","84f8a88d":"## Sample questions for tuple functions","84bb8f86":"## Basic functions for arithmetic calculation, list operations"}}