{"cell_type":{"553b533d":"code","9c490a88":"code","c245fdb2":"code","2c828107":"code","2fc7fb5b":"code","ff937777":"code","22056d0b":"code","76ae08fc":"code","3fc7f4b6":"code","903c0b02":"code","0ace40af":"code","e354abe2":"code","400064f9":"code","a317a1bb":"code","25f8215d":"code","e22fca49":"code","623e28ee":"code","3fbf2de6":"code","d427376e":"code","6055bbe9":"code","e4d79c46":"code","a9d573fa":"code","9579e08b":"code","f98bb9db":"code","969b7ade":"code","978447a4":"code","406a3fc8":"markdown"},"source":{"553b533d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9c490a88":"#Reading the csv file into a dataframe\ndata = pd.read_csv('..\/input\/mines-vs-rocks\/sonar.all-data.csv', header=None)","c245fdb2":"# View the top five rows of the data\ndata.head()","2c828107":"X = data.drop(60, axis=1)","2fc7fb5b":"print(X.shape)\nX.head()","ff937777":"Y = data[60]\nprint(Y.head())\nY.replace({'R':0, 'M':1}, inplace=True)","22056d0b":"Y","76ae08fc":"from sklearn.model_selection import train_test_split\nX_trn, X_tst, y_trn, y_tst = train_test_split(X, Y, test_size=0.2, random_state=0)","3fc7f4b6":"def sigmoid(x):\n    '''\n    Returns the sigmoid of x\n    '''\n    return 1\/(1+np.exp(-x))","903c0b02":"def init_param(X):\n    '''\n    Args: X -> input matrix\n    Returns: a tuple of initialised parameters , w vector and b for the bias\n    '''\n    np.random.seed(0)\n    w = np.random.rand(X.shape[1])\n    b = 0\n    param = {'w': w,\n             'b': b\n            }\n    return param\n","0ace40af":"def Cost_func(X, Y, param, lamb):\n    '''\n    Computes the cost and gradient value for a given X, Y, param\n    Args:\n        X => input feautre matrix \n        Y => output array\n        param => parameters\n        lamb => regularisation constant\n    Returns: \n        J => Cost \n        grad => gradient values for w and b\n    '''\n    m = len(X)\n    prob = np.dot(param['w'], X.T) + param['b']\n    pred = sigmoid(prob)\n    \n    J = - np.sum((Y* np.log(pred)) + ((1-Y)*(np.log(1-pred))))\/m\n    reg = lamb*np.sum(np.power(param['w'], 2))\/(2*m)\n    J = J + reg\n    \n    dw = (1\/m)* np.dot((pred - Y), X) + lamb*(param['w'])\/m\n    db = (1\/m)* np.sum(pred -Y)\n    \n    grad= {'dw': dw,\n           'db': db}\n    \n    return J, grad","e354abe2":"def optimize(X, Y, param, num_iter, learning_rate, lamb):\n    '''\n    Optimize the paramenter using gradient descent.\n    Args:\n        X => input feature matrix\n        Y => output array\n        param => parameters which are updated\n        num_iter => total number of itertions\n        learning_rate => learning rate to specify the step size during gradient descent\n    Returns:\n        param => updated parameters' array\n        cost => final cost        \n    '''\n    for i in range(num_iter):\n        cost, grad = Cost_func(X, Y, param, lamb)\n        param['w'] = param['w']-(learning_rate*grad['dw'])\n        param['b'] = param['b']-(learning_rate*grad['db'])\n        \n        \n    return param, cost","400064f9":"def predict(X, param):\n    '''\n    predicts the target value, Y_pred\n    Args: X => input feature matrix,\n          param => parameter vector (w, b)\n    Returns: Array of predictions\n    '''\n    Y_pred=[]\n    prob= np.dot(param['w'], X.T) + param['b']\n    pred = sigmoid(prob)\n    for i in range(len(X)):\n        if pred[i] > 0.5:\n            Y_pred.append(1)\n        else:\n            Y_pred.append(0)\n            \n    return np.array(Y_pred).T\n        ","a317a1bb":"def accuracy(Y, Y_pred):\n    '''\n    Returns the accuracy for the predictions\n    '''\n    return np.sum(Y == Y_pred) \/ len(Y)","25f8215d":"def main(X, Y, learning_rate=0.01, num_iter=10000, lamb=0, ret_cost=False):\n    '''\n    Combining all the possible\n    Args:\n        ret_cost => Flag to return cost along with other values\n    Returns: \n        if ret_cost == False\n        param and y_pred\n        \n        else:\n        param, y_pred and final cost\n    '''\n    param = init_param(X)\n    cost, grad= Cost_func(X, Y, param, lamb)\n    param, cost_f = optimize(X, Y, param, num_iter, learning_rate, lamb)\n    \n    y_pred = predict(X, param)\n    acc = accuracy(Y, y_pred)\n    \n    print('Final_cost \\t', cost_f)\n    print('Accuracy_train \\t', acc)\n    if ret_cost:\n        return param, y_pred, cost_f\n    else:\n        return param, y_pred","e22fca49":"import matplotlib.pyplot as plt\ncost=[]\nnum=[]\nfor i in range(2000, 20000, 2000):\n    cost.append(main(X_trn, y_trn, learning_rate= 0.01, num_iter=i, lamb=1, ret_cost=True)[2])\n    num.append(i)","623e28ee":"plt.title('Variation in cost with number of iterations')\nplt.xlabel('number of iterations')\nplt.ylabel('Cost')\nplt.scatter(num, cost)","3fbf2de6":"rate = [0.001, 0.003, 0.005, 0.009, 0.01, 0.03, 0.05, 0.09, 0.1, 0.3, 0.5]\ncst=[]","d427376e":"for r in rate:\n    print('Learning_rate: ', r)\n    cst.append(main(X_trn, y_trn, learning_rate= r, num_iter=18000, lamb=1, ret_cost=True)[2])\n    ","6055bbe9":"plt.title('Variation in Cost with Learning rate')\nplt.xlabel('Learning rate')\nplt.ylabel('Cost')\nplt.plot(rate, cst)","e4d79c46":"lmd = [ 0.01, 0.1, 0.5, 1, 10, 20, 50, 100]\ncost_l = []","a9d573fa":"for l in lmd:\n    print('Regularisation Constatnt: ', l)\n    trn_val = main(X_trn, y_trn, learning_rate= 0.5, num_iter=18000, lamb=l, ret_cost=True)\n    cost_l.append(trn_val[2])\n    p = trn_val[0]\n    pred=  predict(X_tst, p)\n    print('Test Cost : \\t', accuracy(y_tst, pred) )","9579e08b":"plt.title('Variation in Cost with Regularisation Constant')\nplt.xlabel('Lambda')\nplt.ylabel('Cost')\nplt.plot(lmd, cost_l)","f98bb9db":"param_f = main(X_trn, y_trn, learning_rate= 0.5, num_iter=18000, lamb=0.5)[0]","969b7ade":"pred= predict(X_tst, param_f)","978447a4":"accuracy(y_tst, pred)","406a3fc8":"### Notebook content\nThis notebook does not contain any preprocessing steps. <br>\nThis notebook has logistic regression from scratch. <br>\nSteps to build a logistic regression model:\n    1. Initialise parameters\n    2. Compute Cost function and gradient\n    3. Apply gradient descent to optimize the parameters\n    4. Compute the final predictions\n\nTuning of Hyperparameters except lambda (regularisation constant)\n"}}