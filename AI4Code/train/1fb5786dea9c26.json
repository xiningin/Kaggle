{"cell_type":{"1e1e49cc":"code","7b2315d9":"code","edee34ed":"code","de15c892":"code","977a1168":"code","01314153":"code","5a2cdcf1":"code","5539bd1b":"code","6bb3870e":"code","7707672f":"code","166f93e5":"code","bfc288a2":"code","33bd61a5":"code","dbd9ec98":"code","0a40a25a":"markdown","d2901fb8":"markdown","67f1f55f":"markdown","9cf85d5d":"markdown","59dce939":"markdown","856cebfc":"markdown","55afc6ba":"markdown","146514a8":"markdown","a6e44c02":"markdown","39d656b2":"markdown"},"source":{"1e1e49cc":"# from pathlib import Path\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom albumentations import Compose\nfrom albumentations.core.transforms_interface import ImageOnlyTransform","7b2315d9":"perquet_path = \"\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet\"\ndf = pd.read_parquet(perquet_path)\nh = 137\nw = 236","edee34ed":"def get_augmented_img(img, func):\n    output_img = np.zeros((h * 2, w), dtype=np.uint8)\n    output_img[:h] = img\n    output_img[h:] = func(img)\n    return output_img","de15c892":"def show_augmented_img(f):\n    cols, rows = 5, 3\n    img_num = cols * rows\n    fig = plt.figure(figsize=(18,12))\n\n    for i in range(img_num):\n        img = get_augmented_img(data[i], f)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.imshow(img)\n        ax.set_axis_off()","977a1168":"sub_df = df.sample(n=15)\ndata = 255 - sub_df.iloc[:, 1:].values.reshape(-1, h, w).astype(np.uint8)","01314153":"def erosin(img):\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, tuple(np.random.randint(1, 6, 2)))\n    img = cv2.erode(img, kernel, iterations=1)\n    return img\n\nshow_augmented_img(erosin)","5a2cdcf1":"class Erosin(ImageOnlyTransform):\n    def apply(self, img, **params):\n        return erosin(img)\n\nf = Erosin()\nout = f(image=data[0])\n\nplt.imshow(out[\"image\"])","5539bd1b":"def dilation(img):\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, tuple(np.random.randint(1, 6, 2)))\n    img = cv2.dilate(img, kernel, iterations=1)\n    return img\n\nshow_augmented_img(dilation)","6bb3870e":"class Dilation(ImageOnlyTransform):\n    def apply(self, img, **params):\n        return dilation(img)\n    \n    \nf = Dilation()\nout = f(image=data[0])\n\nplt.imshow(out[\"image\"])","7707672f":"def get_random_kernel():\n    structure = np.random.choice([cv2.MORPH_RECT, cv2.MORPH_ELLIPSE, cv2.MORPH_CROSS])\n    kernel = cv2.getStructuringElement(structure, tuple(np.random.randint(1, 6, 2)))\n    return kernel\n\ndef opening(img):\n    img = cv2.erode(img, get_random_kernel(), iterations=1)\n    img = cv2.dilate(img, get_random_kernel(), iterations=1)\n    return img\n\nshow_augmented_img(opening)","166f93e5":"class Opening(ImageOnlyTransform):\n    def apply(self, img, **params):\n        return opening(img)\n    \nf = Opening()\nout = f(image=data[0])\n\nplt.imshow(out[\"image\"])","bfc288a2":"def closing(img):\n    img = cv2.dilate(img, get_random_kernel(), iterations=1)\n    img = cv2.erode(img, get_random_kernel(), iterations=1)\n    return img\n\nshow_augmented_img(closing)","33bd61a5":"class Closing(ImageOnlyTransform):\n    def apply(self, img, **params):\n        return closing(img)\n    \n    \nf = Closing() \nout = f(image=data[0])\n\nplt.imshow(out[\"image\"])","dbd9ec98":"transform = Compose([\n    Erosin(),\n    Dilation(),\n    Opening(),\n    Closing()\n])\n\nout = transform(image=data[0])\nplt.imshow(out[\"image\"])","0a40a25a":"### Custom albumentations transform","d2901fb8":"### Custom albumentations transform","67f1f55f":"# Morphological Transformations & Custom albumentations transforms\nThis kernel shows some image augmentation using morphological transformations.\nhttps:\/\/opencv-python-tutroals.readthedocs.io\/en\/latest\/py_tutorials\/py_imgproc\/py_morphological_ops\/py_morphological_ops.html\n\n---\n\n**This kernel fork from [yu4u's Bengali: morphological ops as image augmentation](https:\/\/www.kaggle.com\/ren4yu\/bengali-morphological-ops-as-image-augmentation).**  \n**if you like this kernel, please upvote original kernels.**","9cf85d5d":"## albumentations.Compose using Custom albumentations transforms","59dce939":"# Opening\nOpening is performed by successively applying erosion and dilation. It can be used to remove noise. Here erosion and dilation with random kernel is used as image augmentation.","856cebfc":"# Closing\nClosing is performed by successively applying dilation and erosion. It can be used to 'close' small holes. Here dilation and erosion with random kernel is used as image augmentation.","55afc6ba":"### Custom albumentations transform","146514a8":"# Dilation","a6e44c02":"### Custom albumentations transform","39d656b2":"# Erosion"}}