{"cell_type":{"c18cbcc2":"code","f34e9bfa":"code","1c93bded":"code","6f961026":"code","d1d290e7":"code","6b29ff78":"code","b4fe591d":"code","9915f25a":"code","b2b065e3":"code","92859b39":"code","000b7d06":"code","48a89f99":"code","6aa340f6":"code","06e8511f":"code","5344033b":"code","aafba2d4":"code","7b244907":"code","201b89aa":"markdown","8c8130aa":"markdown"},"source":{"c18cbcc2":"from sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM","f34e9bfa":"import pandas as pd # for data analytics\nimport numpy as np # for numerical computation\nfrom sklearn.metrics import precision_recall_fscore_support, classification_report,confusion_matrix, precision_recall_curve\nfrom sklearn.metrics import roc_auc_score , average_precision_score , roc_curve,auc , accuracy_score\nfrom sklearn import utils  \nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1c93bded":"# data visualization\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# data preparation for modelling\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\n\nimport time\nimport pandas as pd","6f961026":"df = pd.read_pickle(\"..\/input\/searching-for-bad-loan-data-preprocessing\/df_pp.pkl\")","d1d290e7":"X_train, X_test, Y_train, Y_test = train_test_split(df.drop(['Loan_status'], axis=1), \n                                                    df['Loan_status'], test_size=0.2, random_state=2020)","6b29ff78":"Fraud = Y_train[Y_train==1]\nNon_Fraud  = Y_train[Y_train==0]\noutlier_fraction = len(Fraud)\/float(len(Non_Fraud))","b4fe591d":"len(Fraud), len(Non_Fraud)","9915f25a":"IsolationForest_clf = IsolationForest(n_estimators=100, max_samples=len(X_train), contamination=outlier_fraction,random_state=2020, verbose=50)\n","b2b065e3":"IsolationForest_clf.fit(X_train)\nscores_prediction = IsolationForest_clf.decision_function(X_train)\n","92859b39":"y_pred = IsolationForest_clf.predict(X_test)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\n\nprint(classification_report(Y_test,y_pred))","000b7d06":"pred = pd.DataFrame(data = y_pred , dtype=np.float32)\ny_test =  pd.DataFrame(data = Y_test)\ny_test.reset_index(inplace = True)\ny_test.drop('index',axis=1,inplace=True)\npreds = pd.concat([y_test,pred], axis=1)","48a89f99":"preds.columns = ['trueLabel','prediction']\npredictionsBasedOnKFoldsXGBoostGradientBoosting = preds.copy()\n\nprecision, recall, thresholds = \\\n    precision_recall_curve(preds['trueLabel'],preds['prediction'])\naverage_precision = \\\n    average_precision_score(preds['trueLabel'],preds['prediction'])\n\nplt.step(recall, precision, color='k', alpha=0.7, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\n\nplt.title('Precision-Recall curve: Average Precision = {0:0.2f}'.format(\n          average_precision))\n\nfpr, tpr, thresholds = roc_curve(preds['trueLabel'],preds['prediction'])\nareaUnderROC = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic: \\\n        Area under the curve = {0:0.2f}'.format(areaUnderROC))\nplt.legend(loc=\"lower right\")\nplt.show()","6aa340f6":"LocalOutlierFactor_clf = LocalOutlierFactor(n_neighbors=30, algorithm='auto',  leaf_size=30, metric='minkowski',p=2, metric_params=None, contamination=outlier_fraction)","06e8511f":"LocalOutlierFactor_clf.fit(X_train)","5344033b":"scores_prediction = LocalOutlierFactor_clf.negative_outlier_factor_","aafba2d4":"\ny_pred = LocalOutlierFactor_clf.fit_predict(X_test)\n\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\n   \n\nprint(classification_report(Y_test,y_pred))","7b244907":"pred = pd.DataFrame(data = y_pred , dtype=np.float32)\ny_test =  pd.DataFrame(data = Y_test)\ny_test.reset_index(inplace = True)\ny_test.drop('index',axis=1,inplace=True)\npreds = pd.concat([y_test,pred], axis=1)\n\npreds.columns = ['trueLabel','prediction']\npredictionsBasedOnKFoldsXGBoostGradientBoosting = preds.copy()\n\nprecision, recall, thresholds = \\\n    precision_recall_curve(preds['trueLabel'],preds['prediction'])\naverage_precision = \\\n    average_precision_score(preds['trueLabel'],preds['prediction'])\n\nplt.step(recall, precision, color='k', alpha=0.7, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.3, color='k')\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\n\nplt.title('Precision-Recall curve: Average Precision = {0:0.2f}'.format(\n          average_precision))\n\nfpr, tpr, thresholds = roc_curve(preds['trueLabel'],preds['prediction'])\nareaUnderROC = auc(fpr, tpr)\n\nplt.figure()\nplt.plot(fpr, tpr, color='r', lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='k', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic: \\\n        Area under the curve = {0:0.2f}'.format(areaUnderROC))\nplt.legend(loc=\"lower right\")\nplt.show()","201b89aa":"## Isolate Forest","8c8130aa":"## LocalOutlierFactor"}}