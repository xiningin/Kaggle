{"cell_type":{"643dab3c":"code","5f337db6":"code","ee81ccf3":"code","62c57a9e":"code","e9d67e2d":"code","301d3063":"code","a5bba794":"code","285bf617":"code","2c8658e2":"code","a4618e96":"code","c9bdba4f":"code","2ad5f584":"code","a812823f":"code","83d9cd78":"code","3d126c6f":"code","280a2ea5":"code","c30bdbbc":"code","1422e63b":"code","7faa9fbd":"code","4e992465":"code","e5cf5761":"code","64218d91":"code","228da529":"code","2eb1aa6d":"code","c06790fd":"code","4cb54c6f":"code","324e861f":"code","10d0c57c":"code","13c2ce91":"code","85626f9a":"code","d9174132":"code","526b697f":"code","cf9a1e3e":"code","cdf19a44":"code","5b645473":"code","6a242905":"code","662cf774":"code","343788a0":"code","86924b45":"code","a17eb0fd":"code","3fe8b2d3":"code","bdaa9fe3":"code","3d01cec5":"code","0eaf4871":"code","cb552718":"code","229452ec":"markdown","b5383a77":"markdown","cf5b8689":"markdown","3216acfe":"markdown","6d3f199b":"markdown","5889ab10":"markdown","de7b1a60":"markdown","5ce52576":"markdown","9102dd44":"markdown","7172dd22":"markdown","cc416ede":"markdown","f9370cfc":"markdown","18841fcb":"markdown","add08f9e":"markdown","39f75b22":"markdown","31d14224":"markdown","69f4639a":"markdown"},"source":{"643dab3c":"#Get Data from yahoo Finance \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_datareader as wb\nimport datetime as dt\nimport matplotlib.style as style\nstyle.use('ggplot')\n\ntickers = ['IEF', 'SPY']\nsec_data = pd.DataFrame()\nstart = dt.datetime(2008,1,1)\nend = dt.datetime(2022,1,28)\nfor t in tickers:\n    sec_data[t] = wb.DataReader(t, data_source = 'yahoo', start = start, end = end)['Adj Close']\nsec_data.head()","5f337db6":"#get dividend infomation into dataframe\n#IEF\nief_div_data = pd.DataFrame(columns = [tickers[0]])\nief_div_data = wb.DataReader(tickers[0], data_source = 'yahoo-dividends', start = start, end = end)['value']\n#SPY\nspy_div_data = pd.DataFrame(columns = [tickers[1]])\nspy_div_data = wb.DataReader(tickers[1], data_source = 'yahoo-dividends', start = start, end = end)['value']","ee81ccf3":"#check data\nspy_div_data.head()","62c57a9e":"#sorting reversely so the format can be added back \nief_div_data = ief_div_data.sort_index(ascending = True)\nspy_div_data = spy_div_data.sort_index(ascending = True)\nief_div_data","e9d67e2d":"# back add dividend dataframe to Adj Close Price dataframe\nsec_data_adj = pd.DataFrame().reindex_like(sec_data)\nsec_data_adj['IEF'] = sec_data['IEF'].add(ief_div_data, fill_value = 0)\nsec_data_adj['SPY'] = sec_data['SPY'].add(spy_div_data, fill_value = 0)\nsec_data_adj.info()","301d3063":"# Calculate daily return \nsec_returns = sec_data_adj.pct_change().dropna()\nsec_returns.info()","a5bba794":"# Import calculation module\nimport financial_kit as erk","285bf617":" # Take daily returns compounded to monthly returns\nsec_returns_m = sec_returns.resample('M').apply(erk.compound).to_period('M')\nsec_returns_m.head()","2c8658e2":"#read risk one-year risk free rate download from https:\/\/www.treasury.gov \none_year_rf = pd.read_csv(\"..\/input\/one-year-rf\/one_year_rf.csv\", index_col = 0)","a4618e96":"one_year_rf","c9bdba4f":"\n#make a copy and drop all n\/a row \none_year_rf = one_year_rf.copy()\none_year_rf = one_year_rf.dropna()\n#cut off the every first row \"[date, value]\"\none_year_rf = one_year_rf.iloc[1:]\n#rename index and columns\none_year_rf.index.name = \"Date\"\none_year_rf.rename(columns={\"Unnamed: 1\" : \"value\"}, inplace= True)\n#parse index to datetime\none_year_rf.index = pd.to_datetime(one_year_rf.index)\n#change datatype to float for calculation\none_year_rf = one_year_rf.astype(\"float64\") \/ 100\n#transform daily to monthly avg\none_year_rf = one_year_rf.resample('M').mean().to_period('M')\none_year_rf.head()","2ad5f584":"#to align with the risk free rate 's date range to index return\none_year_rf.loc[sec_returns_m.index[0] : ]","a812823f":"#assign risk free rate value \nriskfree_rate = one_year_rf.loc[sec_returns_m.index[0] : ].mean().value\nriskfree_rate","83d9cd78":"import matplotlib.pyplot as plt\nposition_1 = sec_returns_m + 1\nposition_1.iloc[0] = 1\nposition_1 = position_1.cumprod() * 1\nposition_1['2001':'2021'].plot(figsize = (20,8))\nplt.legend(fontsize=15)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.title('08 - 21 Return of a Dollar',size = 15)\nround(erk.summary_stats(sec_returns_m['2001':'2021'],riskfree_rate = riskfree_rate),4)","3d126c6f":"position_2 = sec_returns_m['2017':'2021'] + 1\nposition_2.iloc[0] = 1\nposition_2 = position_2.cumprod() * 1\nposition_2['2017':'2021'].plot(figsize = (20,8))\nplt.legend(fontsize=15)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.title('17 - 21 Return of a Dollar',size = 15)\nround(erk.summary_stats(sec_returns_m['2017':'2021'],riskfree_rate = riskfree_rate),4)","280a2ea5":"position_3 = sec_returns_m['2021':] + 1\nposition_3.iloc[0] = 1\nposition_3 = position_3.cumprod() * 1\nposition_3['2021':].plot(figsize = (20,8),title = '21\/1 - 21\/12 Return of a Dollar')\nplt.legend(fontsize=15)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.title('21\/1 - 21\/12 Return of a Dollar',size = 15)\nround(erk.summary_stats(sec_returns_m['2021':],riskfree_rate = riskfree_rate),4)","c30bdbbc":"# Get annual covariance matrix of the data for backtesting\ncov = sec_returns_m.cov() * 12","1422e63b":"# set 80 stock 20 bond weight allocator as function\ndef twenty_eighty_w(r):\n    w = pd.Series([0.2, 0.8]) \n    w.index = r.columns\n    return w \n    \n   \ntwenty_eighty_w(sec_returns_m)","7faa9fbd":"#create return dataframe\nportfolio_result = pd.DataFrame()\nportfolio_result['IEF'] = sec_returns_m['IEF'] \nportfolio_result['SPY'] = sec_returns_m['SPY']\nportfolio_result['ERC'] = erk.backtest_ws(sec_returns_m, estimation_window=12, weighting = erk.weight_erc, cov_estimator = erk.sample_cov)\nportfolio_result['EW'] = erk.backtest_ws(sec_returns_m, estimation_window=12, weighting = erk.weight_ew)\nportfolio_result['GMV'] = erk.backtest_ws(sec_returns_m, estimation_window=12, weighting = erk.weight_gmv)\nportfolio_result['80\/20'] = erk.backtest_ws(sec_returns_m, estimation_window=12, weighting = twenty_eighty_w)","4e992465":"#Because backtest will use \"previous 12 month data\" to calculate the first month weighting, 2018-01 - 2018-12 data has become N\/A and has to be dropped !\nportfolio_result = portfolio_result.dropna(how = 'any')","e5cf5761":"#check data\nportfolio_result.head()","64218d91":"#Plot it \nimport matplotlib.pyplot as plt\ngraph = portfolio_result.copy() + 1\ngraph.iloc[0] = 1 \n\nax = (graph.cumprod() * 1).plot(figsize = (20,8))\nplt.title('Different Combination of IEF\/SPY - Rebalance Monthly', fontsize = 20)\nplt.axvline(x = '2020-03', ls = '-', color = 'darkred', linewidth = 8, alpha = 0.3 )\nax.yaxis.grid(True, linestyle='-', linewidth=0.25)\nplt.legend(fontsize=15)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\n# hist_ax.axhline(y=start, ls=\":\", color=\"black\")\nround(erk.summary_stats(portfolio_result,riskfree_rate = riskfree_rate),2)","228da529":"# trailing 12 months correlation  \ncor = sec_returns_m['2009':'2021'].rolling(window = 12).corr()\ncor = cor.droplevel(level=1)\ncor = cor.drop(columns=\"IEF\").dropna()\ncor = round(cor,2)","2eb1aa6d":"cor.rename(columns = {\"SPY\" : \"Correlation\"}, inplace = True)\ncor = cor[cor.Correlation != 1]\nprint(cor)\ncor.plot(figsize = (20,8), title = \"Trailing 12 months Correlation  \")","c06790fd":"hedge_fund = pd.read_csv('..\/input\/hedge-funds-rets\/hedge_funds_rets.csv', index_col = 0)","4cb54c6f":"hedge_fund = hedge_fund['2003-07':] ","324e861f":"hedge_fund.index = pd.to_datetime(hedge_fund.index).to_period('M')\nhedge_fund.index.name = 'Date'\nhedge_fund","10d0c57c":"#combine two Datasets\nportfolio_rets = pd.concat([hedge_fund, portfolio_result],axis = 1).dropna()","13c2ce91":"stats = round(erk.summary_stats(portfolio_rets),4).sort_values('Sharpe Ratio', ascending = False)\nstats","85626f9a":"portfolio_rets.iloc[0] = 0\nax = (portfolio_rets[stats.index] + 1).cumprod().plot(figsize = (20,10), colormap=\"RdYlGn_r\")\nax.legend(fontsize = 10, loc = 'best')\nax.yaxis.grid(True, linestyle='-', linewidth=0.25)\nplt.legend(fontsize=15)\nplt.xticks(size = 20)\nplt.yticks(size = 20)\nplt.xlabel(\"Date\",size = 20)\nplt.title(\"Comparison with Hedge Fund Return 2009\/1 - 2021\/6\",size = 20)","d9174132":"# below it's just a way to get the annual return and annual volatility from selected period which can be use as input for simulations\npoxy_data =round(erk.summary_stats(sec_returns_m['2020-02':'2020-12']),4)\nief_ar, spy_ar = poxy_data['Annualized Return']\nief_vol, spy_vol = poxy_data['Annualized Vol']\nprint('ief ret:',ief_ar, 'ief vol:', ief_vol)\nprint('spy ret:',spy_ar, 'spy vol:', spy_vol)","526b697f":"# 1.assume IEF is cash-like instructment with annual return of 2% \n# 2.assume SPY can generate annual return of 6%, volatility  of 17%\n# 3. Investment horizon is 10 years\n# Using Geometric Brownian motion we can simulate the result\nrets_ief = pd.DataFrame(erk.gbm(n_years = 10, n_scenarios = 5000, mu = 0.02, sigma = 0, steps_per_year = 12, s_0 = 0, prices = False))\nrets_spy = pd.DataFrame(erk.gbm(n_years = 10, n_scenarios = 5000, mu = 0.06 , sigma = 0.17, steps_per_year = 12, s_0 = 0, prices = False))","cf9a1e3e":"#Check out how only 4 out of 5000 results look like \nl = [1,2,3,4]\n(rets_spy[l] + 1).cumprod().plot(figsize=(15,8))","cdf19a44":"# Using simulated data to create a 80 \/ 20 fixed weighting portfolio \nrets_8020 = erk.bt_mix(rets_spy, rets_ief, allocator = erk.fixedmix_allocator, w1 = .8) \n# This is the result of avg. 5000 times of running\nerk.summary_stats(rets_8020).mean()","5b645473":"# Using simulated data to create a 80 gliding 20 weighting portfolio \nrets_8020g = erk.bt_mix(rets_spy, rets_ief, allocator = erk.glidepath_allocator,  start_glide = .8, end_glide = 0.2) \nerk.summary_stats(rets_8020g).mean()","6a242905":"# Terminal stats can give me insight of how the 5000 results play out \n# mean = average of all terminal values in year 10  \n# std = standard deviation of all terminal values in year 10 \n# P_breach = In year 10, what is the probability of breacking the 0.8 floor \n# e_short = If the floor was broken, what would be the average return for results that break the floor  \n\n\npd.concat([erk.terminal_stats(rets_spy, name=\"SPY\", floor=0.80),\n           erk.terminal_stats(rets_ief, name=\"IEF\", floor=0.80),\n           erk.terminal_stats(rets_8020, name=\"8020\", floor=0.80),\n           erk.terminal_stats(rets_8020g, name=\"8020g\", floor=0.80)]\n          ,axis=1).round(4).dropna(how = \"all\")\n","662cf774":"# Implementation of CPPI Strategy and assume the safe instrument is cash with 2% return per year  \n# 1.To get floor present value \nfloor_pv = 1 \/ (rets_ief + 1).cumprod().iloc[::-1]\n# 2. incorporate with CPPI strategy \nrets_floor80 = erk.bt_mix(rets_spy, rets_ief, allocator=erk.floor_allocator, floor=.80,  zc_prices=floor_pv, m = 3)\nrets_floor80","343788a0":"# check out the first five result\nl = [1,2,3,4,5]\n(rets_floor80[l]+1).cumprod().plot()","86924b45":"pd.concat([erk.terminal_stats(rets_spy, name=\"SPY\", floor=0.80),\n           erk.terminal_stats(rets_ief, name=\"IEF\", floor=0.80),\n           erk.terminal_stats(rets_8020, name=\"8020\", floor=0.80),\n           erk.terminal_stats(rets_8020g, name=\"8020g\", floor=0.80),\n           erk.terminal_stats(rets_floor80, name=\"80floor\", floor=0.80)]\n          ,axis=1).round(4).dropna(how = \"all\")","a17eb0fd":"import warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\ntv_eq = erk.terminal_values(rets_spy)\ntv_8020 = erk.terminal_values(rets_8020)\ntv_floor80 = erk.terminal_values(rets_floor80)\nplt.figure(figsize=(20, 8))\nsns.distplot(tv_eq, color=\"red\", label=\"100% SPY\", bins=100)\nplt.axvline(tv_eq.mean(), ls=\"--\", color=\"red\")\nsns.distplot(tv_8020, color=\"Green\", label=\"80\/20 SPY\/IEF\", bins=100)\nplt.axvline(tv_8020.mean(), ls=\"--\", color=\"green\")\nsns.distplot(tv_floor80, color=\"orange\", label=\"Floor80\", bins=100)\nplt.axvline(tv_floor80.mean(), ls=\"--\", color=\"orange\")\n\nplt.legend(fontsize=15)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.ylabel(\"Density\",fontsize=20)\nplt.axvline(0.8, ls=\"--\", color=\"black\", alpha = 0.8)\nplt.annotate(\"Blackline --> 0.8 floor\", xy=(7,0.5),fontsize = 20)\n","3fe8b2d3":"l = list(range(10))\n(rets_floor80[l]+1).cumprod().plot(figsize = (12,8))\nplt.axhline(0.8, ls=\"--\", color=\"black\", alpha = 0.8)\nplt.annotate(\"Blackline --> 0.8 floor\", xy=(3.5,60),fontsize = 20)","bdaa9fe3":"# setting a allocator that restrict the dynamic 20% drawdown limitation \nrets_maxdd20 = erk.bt_mix(rets_spy, rets_ief, allocator=erk.drawdown_allocator, maxdd=.20, m = 3)","3d01cec5":"pd.concat([erk.terminal_stats(rets_spy, name=\"SPY\", floor=0.80),\n           erk.terminal_stats(rets_ief, name=\"IEF\", floor=0.80),\n           erk.terminal_stats(rets_8020, name=\"8020\", floor=0.80),\n           erk.terminal_stats(rets_8020g, name=\"8020g\", floor=0.80),\n           erk.terminal_stats(rets_floor80, name=\"80floor\", floor=0.80),\n           erk.terminal_stats(rets_maxdd20, name=\"maxdd20\", floor=0.80)]\n          ,axis=1).round(4).dropna(how = \"all\")","0eaf4871":"tv_maxdd20 = erk.terminal_values(rets_maxdd20)\nplt.figure(figsize=(20,8))\nsns.distplot(tv_eq, color=\"red\", label=\"100% SPY\", bins=100)\nplt.axvline(tv_eq.mean(), ls=\"--\", color=\"red\")\nsns.distplot(tv_8020, color=\"Green\", label=\"80\/20 SPY\/IEF\", bins=100)\nplt.axvline(tv_8020.mean(), ls=\"--\", color=\"green\")\nsns.distplot(tv_maxdd20, color=\"yellow\", label=\"maxdd20%\", bins=100)\nplt.axvline(tv_maxdd20.mean(), ls=\"--\", color=\"yellow\")\nplt.legend(fontsize=15)\nplt.xticks(size = 20)\nplt.yticks(size = 20)\nplt.ylabel(\"Density\",fontsize=20)\nplt.axvline(0.8, ls=\"--\", color=\"black\", alpha = 0.8)\nplt.annotate(\"Blackline --> 0.8 floor\", xy=(7,0.8),fontsize = 20)","cb552718":"l = list(range(10))\n(rets_maxdd20[l]+1).cumprod().plot(figsize = (12,8))\nplt.axhline(0.8, ls=\"--\", color=\"black\", alpha = 0.8)\nplt.annotate(\"Blackline --> 0.8 floor\", xy=(2.5,60),fontsize = 20)","229452ec":"# 4. Demonstrate a Monte Carlo simulation with liability due in terminal value (static floor)","b5383a77":"### Also, there is nothing break the 0.8 floor anymore :","cf5b8689":"# 3. Comparing Hedge Fund Index Performance with our strageties\n- date source : https:\/\/risk.edhec.edu\/all-downloads-hedge-funds-indices \n- EDHEC only collect this data until 2021 - 06 , so I only compare timeframe 2009-01 - 2021-06","3216acfe":"### Summary Stats of SPY \/ IEF - 2008 - 2021 Return of a Dollar","6d3f199b":"### D. Generate a Summary Stats \n* Annualized Return\n* Annualized Reutrn \n* Skewness - Skewness refers to a distortion or asymmetry that deviates from the symmetrical bell curve, or normal distribution\n* Kurtosis - a measure of whether the data are heavy-tailed or light-tailed relative to a normal distribution.\n* Cornish Fisher VaR - incorporate skewbess and kurtosis into to var calculation\n* Historic CVaR - Use specific period of historical return to find out the lowest 5 percentile return threshold\n* Sharpe Ratio - (Annualized Return - Risk Free Rate ) \/ Annualized Vol \n* Max Drawdown - find out the largest % difference between the highest and the lowest point","5889ab10":"# 6. Conclusion\nAs you can see from two Graphs above, through adding dynamic drawdown limitation, we can find a combination that has better performance than cash and has more control in risk than pure equity does.\n","de7b1a60":"### Base on the simulation ...\n1. By looking at the terminal value density graph, CPPI Strategy (Floor 80%) seem like doing good job by keeping asset value above 0.8 eventually, however, it does not garentee the asset value **ALWAYS** above the floor if we check on monthly basis. For Example : take a look at the first 10 results that we generated, we can see there are one that go below 0.75.\n2. If we need our portfolio to be **ALWAYS** above 0.8 floor we need to make adjustment\n","5ce52576":"### Summary Stats of SPY \/ IEF - 2017 - 2021 Return of a Dollar","9102dd44":"### C. To get risk free rate in order to calculate sharpe ratio\n- By not making any assumption about risk free rate for now, just take the avg. of 2008 - 2021 (0.7%)","7172dd22":"### B. Adding back dividends then Calculate return","cc416ede":"# 5. Demonstrate Monte Carlo simulation of Dynamic Risk Budgeting","f9370cfc":"# 1. Collect and Clean Data \n#### A. Get Tresury bond 7-10 year index fund, S&P 500 index fund (SPY) from Yahoo Finance, capture Daily Adjusted Close","18841fcb":"# 2. Comparing the strategies using historical data\n\n- 100% SPY\n\n- 100% IEF\n\n- Equal Weighted (50%, 50%)\n\n- Risk Parity(ERC) with top limit 80%\n\n- Global Minimum Volatility \n\n- 80\/20 (80SPY\/ 20IEF fixed weight)","add08f9e":"### Summary Stats of SPY \/ IEF - 2021 Return of a Dollar","39f75b22":"IEF and SPY correlation varys from moderate level of 0.3 to negative 0.8 , that means Combination between these two can somehow cancel off each other and diversify risk","31d14224":"# Is Passive Investing Safe ? \n### Scenario : \nIf only invest in  S&P500 index and Treasury bond index, what would be the best combination and how to control risk ?\n\n\n### Favorite quote about risk :\n\n\u201cNever forget the six-foot-tall man who drowned crossing the stream that was five feet deep on average.\u201d \u2015 Howard Marks\n\n\n### The purposes of this notebook : \n 1. Demonstrate some combinations if I only invest in \n- Tresury bond index fund (IEF : Treasury 7-10) \/ S&P 500 index fund (SPY)\n- Comparing the performance of each combination with monthly rebalancing using historical data  \n 2. Comparing with Hedge fund index\n 3. Demonstrate a Monte Carlo simulation with liability due in terminal value (static floor)\n 4. Demonstrate Monte Carlo simulation of Dynamic Risk Budgeting\n \n \n### Datasets Used : \n Hedge-funds-rets : EDHEC Hedge fund historical return series  \n one-year-rf : one year risk free rate from https:\/\/www.treasury.gov \n \n### Module Used : \n`pandas_datareader`  \n`datetime`  \n`numpy`  \n`pandas`  \n`matplotlib`   \n`seaborn`  \n`financial_kit` - module that I use for financial calculations \n\n\n\n \n \n \n ","69f4639a":"### Terminal value is protected from above the 0.8 floor :"}}