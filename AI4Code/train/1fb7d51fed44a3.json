{"cell_type":{"e42180fa":"code","e72082e2":"code","c703e58f":"code","b3d0e115":"code","e2165d19":"code","4511e5a6":"code","374c31c9":"code","f94b4d4f":"code","c22be997":"code","dce19455":"code","890e49f7":"code","a3c1c8e5":"code","d779fd1d":"code","4803cc25":"code","21e77b53":"code","b052266f":"code","2feb092d":"code","cdea10b7":"code","40478d6a":"code","a45fdbff":"code","60a87a1f":"code","23e2e9f5":"code","e01c6ad1":"code","572e4285":"code","61c64d1c":"code","8e08556c":"code","0135fdd5":"code","00411870":"code","eb8c299f":"code","f6913d5f":"code","71d1a448":"code","88db3760":"code","f6fbc114":"code","1ce676db":"code","b321ed39":"code","717bd323":"code","b6cafc16":"code","85208eeb":"code","885aab99":"code","d1d01709":"code","d2d14e7a":"code","b37dcd66":"code","30b0e165":"code","2526653c":"code","b2b80abc":"code","1828b2d8":"code","124c6d0c":"code","1e8f7dd2":"code","bbff233a":"code","d4812b79":"code","10c7d715":"code","43a5560f":"code","3538f6f2":"code","bde41e89":"code","7e9ef696":"code","2c1c7780":"markdown","0cca6711":"markdown","3fbedf42":"markdown","885ae316":"markdown","21324ba2":"markdown","b5774bc1":"markdown","6c00430f":"markdown","406dc9d3":"markdown","726195c3":"markdown","ffc5aebd":"markdown","393eee98":"markdown","e43093ec":"markdown","0cb7d141":"markdown","838dbf01":"markdown","28dee8b2":"markdown","3b82c9a3":"markdown","817fbc45":"markdown","3514e3d2":"markdown","7f9651b7":"markdown","1d875efa":"markdown","ec7b697f":"markdown","9d9dd62f":"markdown","ad80542e":"markdown","15557e53":"markdown","efb542f4":"markdown","1fcf874b":"markdown","1106e33b":"markdown","7c775eaa":"markdown","b14b60b1":"markdown","69496792":"markdown","5b30f9f8":"markdown","3e54968b":"markdown","1d11829d":"markdown","10d7c9fd":"markdown","444b599d":"markdown","27193fa1":"markdown","27fcb827":"markdown","1fdbea0b":"markdown","139f4c9e":"markdown","a7a517a4":"markdown","ee96c8e7":"markdown","3f9569b7":"markdown","5fa15d9b":"markdown","b3200919":"markdown","ce6452cf":"markdown","00db83e3":"markdown","b0b48081":"markdown","2f93d6d9":"markdown","5f213754":"markdown","683f13d5":"markdown"},"source":{"e42180fa":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.style.use('ggplot')\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing  import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import balanced_accuracy_score, accuracy_score, mean_absolute_error\nfrom collections import Counter\nimport re\nimport nltk\n#import pymorphy2\nfrom ast import literal_eval\nimport gensim\nimport math","e72082e2":"train_data = pd.read_csv(\"..\/input\/grocery-sales-forecast\/train.csv\")\nprint(train_data.shape)\ntrain_data.head(16)","c703e58f":"product_id = train_data.sort_values(by=['product_id'])['product_id'].unique()\nprint(len(product_id))\nprint(product_id[:5])","b3d0e115":"test_data = pd.read_csv(\"..\/input\/grocery-sales-forecast\/test.csv\")\nprint(test_data.shape)\ntest_data.head(15)","e2165d19":"product_test_id = test_data.sort_values(by=['product_id'])['product_id'].unique()\nprint(len(product_test_id))\nprint(product_test_id[:5])\nprint(len(set(product_test_id == product_id)))  # \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435\u0442","4511e5a6":"warehouse_id = test_data['warehouse_id'].unique()\nprint(len(warehouse_id))  # \u0412\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430","374c31c9":"simple_data = pd.read_csv(\"..\/input\/grocery-sales-forecast\/sub.csv\")\nprint(simple_data.shape)\nsimple_data.head()","f94b4d4f":"'''\n# \u042d\u0442\u043e \u043f\u043b\u043e\u0445\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435!\nX_train, X_test, y_train, y_test = train_test_split(train_data.drop('quantity', axis=1), train_data[['quantity']], test_size=0.1945, random_state=42)\nprint(X_train.head(3))\nprint(X_test.head(3))\nprint(y_train.head(3))\nprint(y_test.head(3))\n'''","c22be997":"train_data = train_data.sort_values(by=['date', 'product_id'])\nX_train = train_data.drop('quantity', axis=1)\ny_train = train_data['quantity']\nX_train","dce19455":"# n = 5  # 2021-04-08 - 5 = 2021-04-03 -- \u0413\u0440\u0430\u043d\u0438\u0446\u0430\nX_train = train_data.where(train_data['date'] < '2021-04-03').dropna().drop('quantity', axis=1)\ny_train = train_data.where(train_data['date'] < '2021-04-03').dropna()['quantity']\nX_test = train_data.where(train_data['date'] >= '2021-04-03').dropna().drop('quantity', axis=1)\ny_test = train_data.where(train_data['date'] >= '2021-04-03').dropna()['quantity']\nprint(X_train.head(3))\nprint(X_test.head(3))\nprint(y_train.head(3))\nprint(y_test.head(3))","890e49f7":"data_ = pd.Series(pd.to_datetime(train_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(train_data['date'].unique(), data_week))\nprint(date2week)","a3c1c8e5":"my_dict = {}\n# k = 0\nfor product_info, product_quantity in tqdm(zip(X_train[['warehouse_id', 'product_id', 'date']].values, y_train)):\n    '''\n    product_info[0] - warehouse_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\n    product_info[1] - product_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\n    product_info[2] - date - \u0434\u0430\u0442\u0430\n    product_quantity - quantity - \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436\n    '''\n    my_id = str(product_info[0]) + str(product_info[1])\n    # print(my_id, product_info[0], product_info[1])\n    if my_id in my_dict:\n        if date2week[product_info[2]] in my_dict[my_id]:\n            my_dict[my_id][date2week[product_info[2]]].append(product_quantity)\n        else:\n             my_dict[my_id][date2week[product_info[2]]] = [product_quantity]\n    else:\n        my_dict[my_id] = {}\n        my_dict[my_id][date2week[product_info[2]]] = [product_quantity]\n# my_dict","d779fd1d":"answer_round, answer_floor, answer_ceil = [], [], []\nnice_product, bad_product = 0, 0\nfor product_info in tqdm(X_test[['warehouse_id', 'product_id', 'date']].values):\n    my_id_first = str(product_info[0]) + str(product_info[1])\n    my_id_second = date2week[product_info[2]]\n    try:\n        my_array = my_dict[my_id_first][my_id_second]  # \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \n        nice_product += 1\n    except:\n        bad_product += 1\n        my_array = []\n    if len(my_array) < 1:\n        answer_round.append(1)\n        answer_floor.append(1)\n        answer_ceil.append(1)\n    else:  # \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n        answer_round.append(round(sum(my_array) \/ len(my_array)))\n        answer_floor.append(math.floor(sum(my_array) \/ len(my_array)))\n        answer_ceil.append(math.ceil(sum(my_array) \/ len(my_array)))\nprint()\nprint(nice_product, bad_product)\n# print(len(answer), len(y_test))\nprint(mean_absolute_error(y_test, answer_round))\nprint(mean_absolute_error(y_test, answer_floor))\nprint(mean_absolute_error(y_test, answer_ceil))","4803cc25":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","21e77b53":"answer_ceil = []\nnice_product, bad_product = 0, 0\ndata_2 = pd.Series(pd.to_datetime(test_data['date'].unique()))\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    #print()\n    #print(product_info)\n    #break\n    my_id_first = str(float(product_info[0])) + str(float(product_info[1]))\n    my_id_second = date2week[product_info[2]]\n    try:\n        my_array = my_dict[my_id_first][my_id_second]  # \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \n        nice_product += 1\n    except:\n        bad_product += 1\n        my_array = []\n    if len(my_array) < 3:  # \u0415\u0441\u043b\u0438 \u0442\u043e\u0432\u0430\u0440 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u043a\u0443\u043f\u0438\u043b\u0438 \u043f\u0430\u0440\u0443 \u0440\u0430\u0437, \u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0435\u0433\u043e \u043d\u0435 \u043a\u0443\u043f\u044f\u0442 \u0432\u043e\u0432\u0441\u0435\n        answer_ceil.append(0)\n\n    else:  \n        answer_ceil.append(math.ceil(sum(my_array) \/ len(my_array)))\nprint()\nprint(nice_product, bad_product)\nprint(len(answer_ceil), len(simple_data))\n","b052266f":"#Result_table = pd.read_csv(\"\/content\/drive\/MyDrive\/Sales_Forecasting\/sub.csv\")\n#Result_table['quantity'] = pd.Series(answer_ceil)\n#Result_table[[\"id\", \"quantity\"]].to_csv(\"FINAL.csv\", index=False)","2feb092d":"product_id = train_data['product_id'].unique()\ndate = train_data['date'].unique()\nwarehouse_id = train_data['warehouse_id'].unique()\nprint(len(product_id), len(date), len(warehouse_id), len(product_id) * len(date) * len(warehouse_id))","cdea10b7":"my_current_dict = {}\nfor product_info in tqdm(train_data[['warehouse_id', 'product_id', 'date', 'quantity']].values):\n    '''\n    product_info[0] - warehouse_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\n    product_info[1] - product_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\n    product_info[2] - date - \u0434\u0430\u0442\u0430\n    product_info[3] - quantity - \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436\n    '''\n    my_id = str(product_info[0]) + str(product_info[1]) + str(product_info[2])\n    my_current_dict[my_id] = product_info[3]\nprint()\nprint(len(my_current_dict))","40478d6a":"data_ = pd.Series(pd.to_datetime(train_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(train_data['date'].unique(), data_week))\nprint(date2week)","a45fdbff":"my_huge_dict = {}\nnice_product = 0\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            my_id = str(id_warehouse) + str(id_product) + str(id_date)\n            if my_id in my_current_dict:\n                nice_product += 1\n                if id_warehouse in my_huge_dict:\n                    if id_product in my_huge_dict[id_warehouse]:\n                        if date2week[id_date] in my_huge_dict[id_warehouse][id_product]:\n                            my_huge_dict[id_warehouse][id_product][date2week[id_date]].append(my_current_dict[my_id])\n                        else:\n                            my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                    else:\n                        my_huge_dict[id_warehouse][id_product] = {}\n                        my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                else:\n                    my_huge_dict[id_warehouse] = {}\n                    my_huge_dict[id_warehouse][id_product] = {}\n                    my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n            else:\n                if id_warehouse in my_huge_dict:\n                    if id_product in my_huge_dict[id_warehouse]:\n                        if date2week[id_date] in my_huge_dict[id_warehouse][id_product]:\n                            my_huge_dict[id_warehouse][id_product][date2week[id_date]].append(0)\n                        else:\n                            my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [0]\n                    else:\n                        my_huge_dict[id_warehouse][id_product] = {}\n                        my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [0]\n                else:\n                    my_huge_dict[id_warehouse] = {}\n                    my_huge_dict[id_warehouse][id_product] = {}\n                    my_huge_dict[id_warehouse][id_product][date2week[id_date]] = [0]\nprint()\nprint(nice_product)","60a87a1f":"amount = 0\nset_amount = set()\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            if str(id_warehouse) + str(id_product) + str(date2week[id_date]) not in set_amount:\n                amount += len(my_huge_dict[id_warehouse][id_product][date2week[id_date]])\n                set_amount.add(str(id_warehouse) + str(id_product) + str(date2week[id_date]))\nprint()\nprint(amount)","23e2e9f5":"# \u041f\u043e\u043d\u0438\u043c\u0430\u044e, \u0447\u0442\u043e \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u044e \u0442\u0430\u043a\u0443\u044e \u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0443, \u0447\u0442\u043e \u0438 \u043f\u0430\u0440\u0443 \u044f\u0447\u0435\u0435\u043a \u0432\u044b\u0448\u0435. \u041d\u043e \u0445\u043e\u0447\u0443 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0430\u043a\u0446\u0435\u043d\u0442 \u043d\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0438 \u043a\u043e\u0434\u0430\nmy_huge_dict_train = {}\nmy_huge_dict_test = {}\nnice_product = 0\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            if id_date > '2021-04-01':\n                my_id = str(id_warehouse) + str(id_product) + str(id_date)\n                if my_id in my_current_dict:\n                    nice_product += 1\n                    if id_warehouse in my_huge_dict_test:\n                        if id_product in my_huge_dict_test[id_warehouse]:\n                            if date2week[id_date] in my_huge_dict_test[id_warehouse][id_product]:\n                                my_huge_dict_test[id_warehouse][id_product][date2week[id_date]].append(my_current_dict[my_id])\n                            else:\n                                my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                        else:\n                            my_huge_dict_test[id_warehouse][id_product] = {}\n                            my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                    else:\n                        my_huge_dict_test[id_warehouse] = {}\n                        my_huge_dict_test[id_warehouse][id_product] = {}\n                        my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                else:\n                    if id_warehouse in my_huge_dict_test:\n                        if id_product in my_huge_dict_test[id_warehouse]:\n                            if date2week[id_date] in my_huge_dict_test[id_warehouse][id_product]:\n                                my_huge_dict_test[id_warehouse][id_product][date2week[id_date]].append(0)\n                            else:\n                                my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [0]\n                        else:\n                            my_huge_dict_test[id_warehouse][id_product] = {}\n                            my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [0]\n                    else:\n                        my_huge_dict_test[id_warehouse] = {}\n                        my_huge_dict_test[id_warehouse][id_product] = {}\n                        my_huge_dict_test[id_warehouse][id_product][date2week[id_date]] = [0]\n            else:\n                my_id = str(id_warehouse) + str(id_product) + str(id_date)\n                if my_id in my_current_dict:\n                    nice_product += 1\n                    if id_warehouse in my_huge_dict_train:\n                        if id_product in my_huge_dict_train[id_warehouse]:\n                            if date2week[id_date] in my_huge_dict_train[id_warehouse][id_product]:\n                                my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].append(my_current_dict[my_id])\n                            else:\n                                my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                        else:\n                            my_huge_dict_train[id_warehouse][id_product] = {}\n                            my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                    else:\n                        my_huge_dict_train[id_warehouse] = {}\n                        my_huge_dict_train[id_warehouse][id_product] = {}\n                        my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [my_current_dict[my_id]]\n                else:\n                    if id_warehouse in my_huge_dict_train:\n                        if id_product in my_huge_dict_train[id_warehouse]:\n                            if date2week[id_date] in my_huge_dict_train[id_warehouse][id_product]:\n                                my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].append(0)\n                            else:\n                                my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [0]\n                        else:\n                            my_huge_dict_train[id_warehouse][id_product] = {}\n                            my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [0]\n                    else:\n                        my_huge_dict_train[id_warehouse] = {}\n                        my_huge_dict_train[id_warehouse][id_product] = {}\n                        my_huge_dict_train[id_warehouse][id_product][date2week[id_date]] = [0]\nprint()\nprint(nice_product)","e01c6ad1":"amount = 0\nset_amount = set()\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            if str(id_warehouse) + str(id_product) + str(date2week[id_date]) not in set_amount:\n                amount += len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\n                set_amount.add(str(id_warehouse) + str(id_product) + str(date2week[id_date]))\nprint()\nprint(amount)","572e4285":"amount = 0\nset_amount = set()\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            if str(id_warehouse) + str(id_product) + str(date2week[id_date]) not in set_amount:\n                amount += 1  # len(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]])  # \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n                set_amount.add(str(id_warehouse) + str(id_product) + str(date2week[id_date]))\nprint()\nprint(amount)","61c64d1c":"right_answer = []\nanswer_round, answer_floor, answer_ceil = [], [], []\nset_amount = set()\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            answer_round.append(round(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\n            answer_floor.append(math.floor(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\n            answer_ceil.append(math.ceil(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\nprint(mean_absolute_error(right_answer, answer_round))\nprint(mean_absolute_error(right_answer, answer_floor))\nprint(mean_absolute_error(right_answer, answer_ceil))","8e08556c":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n\n#print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","0135fdd5":"answer = []\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = (product_info[2])\n    #print(id_warehouse)\n    #print(id_product)\n    #print(id_date)\n    #print(my_huge_dict[id_warehouse][id_product][date2week[id_date]])\n    #break\n    answer.append(math.floor(sum(my_huge_dict[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict[id_warehouse][id_product][date2week[id_date]])))\n    \nprint()\nprint(len(answer), len(simple_data))\n","00411870":"#Result_table = pd.read_csv(\"\/content\/drive\/MyDrive\/Sales_Forecasting\/sub.csv\")\n#Result_table['quantity'] = pd.Series(answer)\n#Result_table[[\"id\", \"quantity\"]].to_csv(\"FINAL.csv\", index=False)","eb8c299f":"data_ = pd.Series(pd.to_datetime(train_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(train_data['date'].unique(), data_week))\nprint(date2week)","f6913d5f":"import statistics\nfrom scipy import stats as s\n\nright_answer = []\nanswer_round, answer_floor, answer_ceil = [], [], []\nanswer_median, answer_median_low, answer_median_high = [], [], []\nanswer_mode = []\nset_amount = set()\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            answer_round.append(round(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\n            answer_floor.append(math.floor(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\n            answer_ceil.append(math.ceil(sum(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])\/len(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])))\n\n            answer_median.append(statistics.median(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]]))\n            answer_median_low.append(statistics.median_low(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]]))\n            answer_median_high.append(statistics.median_high(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]]))\n            \n            answer_mode.append(int(s.mode(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]])[0]))\n\nprint(mean_absolute_error(right_answer, answer_round))\nprint(mean_absolute_error(right_answer, answer_floor))\nprint(mean_absolute_error(right_answer, answer_ceil))\n\nprint(mean_absolute_error(right_answer, answer_median))\nprint(mean_absolute_error(right_answer, answer_median_low))\nprint(mean_absolute_error(right_answer, answer_median_high))\n\nprint(mean_absolute_error(right_answer, answer_mode))","71d1a448":"def exponential_smoothing(series, alpha):\n    result = [series[0]] # first value is same as series\n    for n in range(1, len(series)):\n        result.append(alpha * series[n] + (1 - alpha) * result[n-1])\n    return result[-1]","88db3760":"\ncur_min = 1\ncur_alpha = 0\n\nfor i in tqdm(range(1, 30)):\n    alpha = i\/100\n    right_answer = []\n    answer_exponential_smoothing_round, answer_exponential_smoothing_floor, answer_exponential_smoothing_ceil = [], [], []\n    for id_warehouse in warehouse_id:\n        for id_product in (product_id):\n            for id_date in date:\n                right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n                #answer_exponential_smoothing_round.append(round(exponential_smoothing(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]], alpha)))\n                answer_exponential_smoothing_floor.append(math.floor(exponential_smoothing(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]], alpha)))\n                #answer_exponential_smoothing_ceil.append(math.ceil(exponential_smoothing(my_huge_dict_train[id_warehouse][id_product][date2week[id_date]], alpha)))\n    if mean_absolute_error(right_answer, answer_exponential_smoothing_floor) < cur_min:\n        cur_min = mean_absolute_error(right_answer, answer_exponential_smoothing_floor)\n        cur_alpha = alpha\n#print(mean_absolute_error(right_answer, answer_exponential_smoothing_round))\nprint(cur_min, cur_alpha)\n#print(mean_absolute_error(right_answer, answer_exponential_smoothing_ceil))","f6fbc114":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n\n#print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","1ce676db":"answer = []\nalpha = 0.14\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = (product_info[2])\n    answer.append(math.floor(exponential_smoothing(my_huge_dict[id_warehouse][id_product][date2week[id_date]], alpha)))\n    \nprint()\nprint(len(answer), len(simple_data))","b321ed39":"#Result_table = pd.read_csv(\"\/content\/drive\/MyDrive\/Sales_Forecasting\/sub.csv\")\n#Result_table['quantity'] = pd.Series(answer)\n#Result_table[[\"id\", \"quantity\"]].to_csv(\"FINAL_exp.csv\", index=False)","717bd323":"first_warehouse = {}\nsecond_warehouse = {}\nnumber_of_products = 10\nset_of_products = set()\n\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = date2week[(product_info[2])]\n\n    if id_product in set_of_products or len(set_of_products) < number_of_products:\n        set_of_products.add(id_product)\n\n        if id_warehouse == 0:\n            if id_product not in first_warehouse:\n                first_warehouse[id_product] = {}\n                first_warehouse[id_product][id_date] = my_huge_dict[id_warehouse][id_product][id_date]\n\n            else:\n                if id_date not in first_warehouse[id_product]:\n                    first_warehouse[id_product][id_date] = my_huge_dict[id_warehouse][id_product][id_date]\n\n        else:\n            if id_product not in second_warehouse:\n                second_warehouse[id_product] = {}\n                second_warehouse[id_product][id_date] = my_huge_dict[id_warehouse][id_product][id_date]\n\n            else:\n                if id_date not in second_warehouse[id_product]:\n                    second_warehouse[id_product][id_date] = my_huge_dict[id_warehouse][id_product][id_date]\n        \n\n    \nprint()\n\nprint(first_warehouse)\nprint(len(first_warehouse))\nprint(len(first_warehouse[71165]))\n\nprint(second_warehouse)\nprint(len(second_warehouse))\nprint(len(second_warehouse[71165]))","b6cafc16":"\n\n# fig, axs = plt.subplots(2, 7, sharex=True, sharey=True)\nfig = plt.figure(figsize=(90, 10))\n\nweek2number = {'Friday': 0, 'Saturday': 1, 'Sunday': 2, 'Monday': 3, 'Tuesday': 4, 'Wednesday': 5, 'Thursday': 6}\nproduct2color = {71165: 'orange', 71170: 'black', 71185: 'blue', 71215: 'green', 71220: 'yellow', 71225: 'red', 71230: 'purple', 71235: 'brown', 71285: 'pink', 71350: 'c'}\ntitle_x = []\nflag_print = True\nfor i in range(1, 20):\n    title_x.append(i)\n\nfor i in first_warehouse.items():\n    for j in i[1].items():\n        position = 171 + week2number[j[0]]\n        ax = fig.add_subplot(position)\n        ax.plot(title_x, j[1], color=product2color[i[0]])\n        if flag_print:\n            print(j[0])\n    flag_print = False\n\n'''\nfor i in second_warehouse.values():\n    for j in i.items():\n        position = 276 + week2number[j[0]]\n        ax = fig.add_subplot(position)\n        ax.plot(title_x, j[1], color='orange', label=j[0])\n'''\n#fig = plt.figure(figsize=(cm_to_inch(15),cm_to_inch(10)))\n#plt.tight_layout()\nplt.show()\n","85208eeb":"data_ = pd.Series(pd.to_datetime(train_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(train_data['date'].unique(), data_week))\nprint(date2week)","885aab99":"right_answer = []\nanswer_round, answer_floor, answer_ceil = [], [], []\nanswer_median, answer_median_low, answer_median_high = [], [], []\nanswer_mode, answer_exp = [], []\nthreshold  = 8\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n            local_max = 0\n            local_i = 0\n            for i in range(len(data)):\n                if local_max < data[i]:\n                    local_max = data[i]\n                    local_i = i\n\n            data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n            data.pop()\n\n\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            answer_round.append(round(sum(data)\/len(data)))\n            answer_floor.append(math.floor(sum(data)\/len(data)))\n            answer_ceil.append(math.ceil(sum(data)\/len(data)))\n\n            answer_median.append(statistics.median(data))\n            answer_median_low.append(statistics.median_low(data))\n            answer_median_high.append(statistics.median_high(data))\n            \n            answer_exp.append(math.floor(exponential_smoothing(data, 0.14)))\n            #answer_mode.append(int(s.mode(data)[0]))\n\nprint(mean_absolute_error(right_answer, answer_round))\nprint(mean_absolute_error(right_answer, answer_floor))\nprint(mean_absolute_error(right_answer, answer_ceil))\n\nprint(mean_absolute_error(right_answer, answer_median))\nprint(mean_absolute_error(right_answer, answer_median_low))\nprint(mean_absolute_error(right_answer, answer_median_high))\n\nprint(mean_absolute_error(right_answer, answer_exp))\n#print(mean_absolute_error(right_answer, answer_mode))","d1d01709":"cur_min = 1\nbest_alpha = 0\nbest_beta = 0\nfor alpha in tqdm(range(1, 12)):\n    for beta in range(1, 11):\n        if beta <= alpha:\n            right_answer = []\n            answer_exp = []\n            for id_warehouse in warehouse_id:\n                for id_product in (product_id):\n                    for id_date in date:\n                        '''\n                        Friday\n                        Saturday\n                        Sunday\n                        Monday\n                        Tuesday\n                        Wednesday\n                        Thursday\n                        '''\n                        data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n                        local_max = 0\n                        local_i = 0\n                        for i in range(len(data)):\n                            if local_max < data[i]:\n                                local_max = data[i]\n                                local_i = i\n\n                        data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                        data.pop()\n                        right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n                        my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n                        if date2week[id_date] == 'Saturday':\n                            answer_exp.append(my_ans_by_day)\n                        \n                        #-----------------------------------\n                        elif date2week[id_date] == 'Friday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append(((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                        \n                        elif date2week[id_date] == 'Sunday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n                        \n                        #-----------------------------------\n                        elif date2week[id_date] == 'Monday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n                        \n                        elif date2week[id_date] == 'Tuesday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n                        \n                        #-----------------------------------\n                        elif date2week[id_date] == 'Wednesday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n                        \n                        elif date2week[id_date] == 'Thursday':\n                            data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n                            my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                            answer_exp.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n\n            if mean_absolute_error(right_answer, answer_exp) < cur_min:\n                best_alpha = alpha\n                best_beta = beta\n                cur_min = mean_absolute_error(right_answer, answer_exp)\nprint()\nprint(cur_min, best_alpha, best_beta)\n            #print(mean_absolute_error(right_answer, answer_mode))","d2d14e7a":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n\n#print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","b37dcd66":"answer = []\nalpha = 0.14\nalpha = 1\nbeta = 1\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = (product_info[2])\n\n    data = my_huge_dict[id_warehouse][id_product][date2week[id_date]].copy()\n    local_max = 0\n    local_i = 0\n    for i in range(len(data)):\n        if local_max < data[i]:\n            local_max = data[i]\n            local_i = i\n\n    data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    data.pop()\n    #right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n    my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n    if date2week[id_date] == 'Saturday':\n        answer.append(my_ans_by_day)\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Friday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Sunday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \n    elif date2week[id_date] == 'Sunday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Friday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Monday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Tuesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \n    elif date2week[id_date] == 'Tuesday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Monday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Wednesday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Thursday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \n    elif date2week[id_date] == 'Thursday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Wednesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta))\n    \nprint()\nprint(len(answer), len(simple_data))","30b0e165":"#Result_table = pd.read_csv(\"\/content\/drive\/MyDrive\/Sales_Forecasting\/sub.csv\")\n#Result_table['quantity'] = pd.Series(answer)\n#Result_table[[\"id\", \"quantity\"]].to_csv(\"FINAL_3.csv\", index=False)","2526653c":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n\n#print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","b2b80abc":"answer = []\nalpha = 0.14\nalpha = 1\nbeta = 1\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = (product_info[2])\n\n    data = my_huge_dict[id_warehouse][id_product][date2week[id_date]].copy()\n    local_max = 0\n    local_i = 0\n    for i in range(len(data)):\n        if local_max < data[i]:\n            local_max = data[i]\n            local_i = i\n\n    data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    data.pop()\n    #right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n    my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n    if date2week[id_date] == 'Saturday':\n        answer.append(my_ans_by_day)\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Friday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Sunday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Sunday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Friday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Monday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Tuesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Tuesday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Monday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Wednesday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Thursday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Thursday':\n        data2 = my_huge_dict[id_warehouse][id_product]['Wednesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \nprint()\nprint(len(answer), len(simple_data))","1828b2d8":"Result_table = pd.read_csv(\"..\/input\/grocery-sales-forecast\/sub.csv\")\nResult_table['quantity'] = pd.Series(answer)\nResult_table[[\"id\", \"quantity\"]].to_csv(\"FINAL_33.csv\", index=False)","124c6d0c":"data_ = pd.Series(pd.to_datetime(train_data['date'].unique()))\n\n# print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(train_data['date'].unique(), data_week))\nprint(date2week)","1e8f7dd2":"right_answer = []\nanswer_round, answer_floor, answer_ceil = [], [], []\nanswer_median, answer_median_low, answer_median_high = [], [], []\nanswer_mode, answer_exp = [], []\nthreshold  = 1.5\nfor id_warehouse in warehouse_id:\n    for id_product in tqdm(product_id):\n        for id_date in date:\n            data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n            local_max = 0\n            local_i = 0\n            for i in range(len(data)):\n                if local_max < data[i]:\n                    local_max = data[i]\n                    local_i = i\n            \n            if local_max > threshold * math.floor(sum(data)\/len(data)):\n                data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                data.pop()\n            else:\n                data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                data.pop()\n\n\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            answer_round.append(round(sum(data)\/len(data)))\n            answer_floor.append(math.floor(sum(data)\/len(data)))\n            answer_ceil.append(math.ceil(sum(data)\/len(data)))\n\n            answer_median.append(statistics.median(data))\n            answer_median_low.append(statistics.median_low(data))\n            answer_median_high.append(statistics.median_high(data))\n            \n            answer_exp.append(math.floor(exponential_smoothing(data, 0.14)))\n            #answer_mode.append(int(s.mode(data)[0]))\n\nprint(mean_absolute_error(right_answer, answer_round))\nprint(mean_absolute_error(right_answer, answer_floor))\nprint(mean_absolute_error(right_answer, answer_ceil))\n\nprint(mean_absolute_error(right_answer, answer_median))\nprint(mean_absolute_error(right_answer, answer_median_low))\nprint(mean_absolute_error(right_answer, answer_median_high))\n\nprint(mean_absolute_error(right_answer, answer_exp))\n#print(mean_absolute_error(right_answer, answer_mode))","bbff233a":"cur_min = 1\nalpha = 1\nbeta = 1\nbest_threshold = 1\nA, B = [], []\nfor koef in tqdm(range(53, 72)):\n    threshold = koef\/10\n    right_answer = []\n    answer_exp = []\n    for id_warehouse in warehouse_id:\n        for id_product in (product_id):\n            for id_date in date:\n                data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n                local_max = 0\n                local_i = 0\n                for i in range(len(data)):\n                    if local_max < data[i]:\n                        local_max = data[i]\n                        local_i = i\n\n                if local_max > threshold * math.floor(sum(data)\/len(data)):\n                    data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                    data.pop()\n\n                right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n                my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n                if date2week[id_date] == 'Saturday':\n                    answer_exp.append(my_ans_by_day)\n                \n                #-----------------------------------\n                elif date2week[id_date] == 'Friday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                \n                elif date2week[id_date] == 'Sunday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                \n                #-----------------------------------\n                elif date2week[id_date] == 'Monday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                \n                elif date2week[id_date] == 'Tuesday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                \n                #-----------------------------------\n                elif date2week[id_date] == 'Wednesday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n                \n                elif date2week[id_date] == 'Thursday':\n                    data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n                    my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                    answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n\n    if mean_absolute_error(right_answer, answer_exp) < cur_min:\n        best_threshold = threshold\n        cur_min = mean_absolute_error(right_answer, answer_exp)\n    \n    A.append(mean_absolute_error(right_answer, answer_exp))\n    B.append(threshold)\nprint()\nprint(cur_min, best_threshold)\nfig = plt.figure(figsize=(20, 10))\nax = fig.add_subplot(111)\nax.plot(B, A, color='orange')\nplt.show()","d4812b79":"cur_min = 1\nalpha = 1\nbeta = 1\nthreshold = 5.5\nright_answer = []\nanswer_exp = []\nfor id_warehouse in warehouse_id:\n    for id_product in (product_id):\n        for id_date in date:\n            data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n            local_max = 0\n            local_i = 0\n            for i in range(len(data)):\n                if local_max < data[i]:\n                    local_max = data[i]\n                    local_i = i\n\n            if local_max > threshold * math.floor(sum(data)\/len(data)):\n                data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                data.pop()\n\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n            if date2week[id_date] == 'Saturday':\n                answer_exp.append(my_ans_by_day)\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Friday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Thursday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Monday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Sunday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Wednesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Tuesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n\nprint()\nprint(mean_absolute_error(right_answer, answer_exp))\n","10c7d715":"cur_min = 1\nalpha = 1\nbeta = 1\nthreshold = 5.5\nright_answer = []\nanswer_exp = []\nfor id_warehouse in warehouse_id:\n    for id_product in (product_id):\n        for id_date in date:\n            data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n            local_max = 0\n            local_i = 0\n            for i in range(len(data)):\n                if local_max < data[i]:\n                    local_max = data[i]\n                    local_i = i\n\n            if local_max > threshold * math.floor(sum(data)\/len(data)):\n                data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                data.pop()\n\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n            if date2week[id_date] == 'Saturday':\n                answer_exp.append(my_ans_by_day)\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Friday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Thursday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Monday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Sunday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Wednesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Tuesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n\nprint()\nprint(mean_absolute_error(right_answer, answer_exp))\n","43a5560f":"cur_min = 1\nalpha = 1\nbeta = 1\nthreshold = 5.5\nright_answer = []\nanswer_exp = []\nfor id_warehouse in warehouse_id:\n    for id_product in (product_id):\n        for id_date in date:\n            data = my_huge_dict_train[id_warehouse][id_product][date2week[id_date]].copy()\n            local_max = 0\n            local_i = 0\n            for i in range(len(data)):\n                if local_max < data[i]:\n                    local_max = data[i]\n                    local_i = i\n\n            if local_max > threshold * math.floor(sum(data)\/len(data)):\n                data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n                data.pop()\n\n            right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n            my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n            if date2week[id_date] == 'Saturday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Friday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Thursday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Monday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Sunday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Saturday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            #-----------------------------------\n            elif date2week[id_date] == 'Wednesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n            \n            elif date2week[id_date] == 'Tuesday':\n                data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n                my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n                answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n\nprint()\nprint(mean_absolute_error(right_answer, answer_exp))\n","3538f6f2":"data_ = pd.Series(pd.to_datetime(test_data['date'].unique()))\n\n\n#print(data_, type(data_))\ndata_week = data_.dt.day_name()\n# print(data_week)\ndate2week = dict(zip(test_data['date'].unique(), data_week))\nprint(date2week)","bde41e89":"cur_min = 1\nalpha = 1\nbeta = 1\nthreshold = 5.5\nright_answer = []\nanswer_exp = []\nfor product_info in tqdm(test_data[['warehouse_id', 'product_id', 'date']].values):\n    id_warehouse = (product_info[0])\n    id_product = (product_info[1])\n    id_date = (product_info[2])\n\n    data = my_huge_dict[id_warehouse][id_product][date2week[id_date]].copy()\n    local_max = 0\n    local_i = 0\n    for i in range(len(data)):\n        if local_max < data[i]:\n            local_max = data[i]\n            local_i = i\n\n    if local_max > threshold * math.floor(sum(data)\/len(data)):\n        data[local_i] = data[-1]  # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n        data.pop()\n\n    # right_answer.append(my_huge_dict_test[id_warehouse][id_product][date2week[id_date]][0])\n    my_ans_by_day = math.floor(exponential_smoothing(data, 0.14))\n\n    if date2week[id_date] == 'Saturday':\n        answer_exp.append(my_ans_by_day)\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Friday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Thursday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Thursday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Wednesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Monday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Sunday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Sunday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Friday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    #-----------------------------------\n    elif date2week[id_date] == 'Wednesday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Tuesday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n    \n    elif date2week[id_date] == 'Tuesday':\n        data2 = my_huge_dict_train[id_warehouse][id_product]['Monday'].copy()\n        my_ans_by_second_day = math.floor(exponential_smoothing(data2, 0.14))\n        answer_exp.append(math.floor((my_ans_by_day * alpha + my_ans_by_second_day * beta) \/ (alpha + beta)))\n\nprint()\n# print(mean_absolute_error(right_answer, answer_exp))\nprint(len(answer_exp), len(simple_data))","7e9ef696":"#Result_table = pd.read_csv(\"\/content\/drive\/MyDrive\/Sales_Forecasting\/sub.csv\")\n#Result_table['quantity'] = pd.Series(answer_exp)\n#Result_table[[\"id\", \"quantity\"]].to_csv(\"Last_try.csv\", index=False)","2c1c7780":"### \u041f\u0440\u043e\u0431\u0443\u0435\u043c 2 \u0438\u0434\u0435\u0438:\n\n*   \u0410\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n*   \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0443 \u0434\u043d\u0435\u0439\n\n","0cca6711":"### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","3fbedf42":"## \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 train \/ test","885ae316":"## \u0422\u0440\u0435\u0442\u044c\u044f \u0438\u0434\u0435\u044f: \u0443\u0447\u0451\u0442 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u0434\u043d\u0435\u0439\n","21324ba2":"## \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n","b5774bc1":"### \u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c \u043e\u0448\u0438\u0431\u043e\u043a. \u0412\u043c\u0435\u0441\u0442\u043e ceil \u0432\u043e\u0437\u044c\u043c\u0451\u043c floor","6c00430f":"### \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b:\n\n*   \u0418\u043c\u0435\u0435\u0442\u0441\u044f **\u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u044f \u0440\u043e\u0441\u0442\u0430**. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0447\u0435\u043c \u0434\u043e\u043b\u044c\u0448\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043d\u0435\u0433\u043e \u0445\u043e\u0434\u0438\u0442. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043b\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442.\n*   \u0415\u0441\u0442\u044c \u044f\u0440\u043a\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0435 **\u0432\u044b\u0431\u0440\u043e\u0441\u044b**. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u043f\u043e\u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f.\n*   \u0412 **Saturday** \u043b\u044e\u0434\u0438 \u0437\u0430\u043a\u0443\u043f\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u043d\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u0447\u0430\u0449\u0435, \u0447\u0435\u043c \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043d\u0438. \u0415\u0433\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043d\u044f \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c.\n*   \u0412 **Sunday** \u0438 **Wednesday** \u043b\u044e\u0434\u0438 \u043f\u043e\u043a\u0443\u043f\u0430\u044e\u0442 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e.\n\n\u0412\u0441\u0435 \u044d\u0442\u0438 \u0432\u044b\u0432\u043e\u0434\u044b \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 10 \u043f\u0435\u0440\u0432\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0443\u043d\u043a\u0442 \u0437\u0430\u043a\u0440\u043e\u0435\u043c \u0433\u043b\u0430\u0437\u0430. \u0410 \u0432\u043e\u0442 \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0443\u043d\u043a\u0442\u0430\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.\n\n\n","406dc9d3":"## \u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u0434\u0435\u0438:\n\n* \u041a\u043e\u0440\u044f\u0432\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0443\u043b\u0435\u0439, \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\n* \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0434\u0430\u0436 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n* \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c test \/ train \u0432\u044b\u0431\u043e\u0440\u043a\u0443, \u0438\u0431\u043e \u043d\u0435\u0442 \u0443\u0447\u0451\u0442\u0430 \u043d\u0443\u043b\u0435\u0439\n\n","726195c3":"### \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u042d\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u043f\u043e X_train","ffc5aebd":"### Score = 0.46886 \n### \u041c\u044f\u0433\u043a\u043e \u0433\u043e\u0432\u043e\u0440\u044f - \u0443\u0436\u0430\u0441\u043d\u043e...\n","393eee98":"### \u0420\u0430\u0437\u043c\u0435\u0440\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 train \/ test. \u0417\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u0432\u043e\u0437\u044c\u043c\u0451\u043c 2021-04-01, \u0440\u043e\u0432\u043d\u043e 7 \u0434\u043d\u0435\u0439","e43093ec":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u043d\u0430 \u0438\u0445 id","0cb7d141":"### \u0422\u0430\u043a\u0441, \u043d\u0443 \u0441\u0443\u0431\u0431\u043e\u0442\u0443 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432\u0441\u0451-\u0442\u0430\u043a\u0438 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u0430 \u0432\u043e\u0442 \u0438\u0434\u0435\u044f \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0434\u043d\u0451\u043c \u0441\u0442\u0440\u0435\u043b\u044c\u043d\u0443\u043b\u0430. \u041d\u0430 \u044d\u0442\u043e\u043c \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e\u0441\u044c, \u0438\u0431\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e 3 \u0434\u043d\u044f \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0440\u0430\u043d\u043d\u0430\u044f \u0438\u0434\u0435\u044f.","838dbf01":"### \u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\n\n","28dee8b2":"## \u0412\u0442\u043e\u0440\u0430\u044f \u0438\u0434\u0435\u044f: \u043c\u043e\u0434\u0435\u0440\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n\n","3b82c9a3":"### Score = 0.20210\n### \u042d\u0442\u043e \u0443\u0436\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u043d\u0435 \u043f\u0440\u0435\u0434\u0435\u043b :)","817fbc45":"### \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0435\u0441\u0442\u044c \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c \u043e 10% \u0442\u043e\u0432\u0430\u0440\u043e\u0432.","3514e3d2":"### \u0418\u0442\u0430\u043a, \u0441\u0443\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u044f\u0441\u043d\u0430. \u041f\u0440\u043e\u0431\u043b\u0435\u043c \u043f\u043e\u043a\u0430 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u0448\u0443 train \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438\u0434\u0435\u0438","7f9651b7":"### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n*   \u0421\u0431, \u0432\u0441-\u043f\u043d, \u0432\u0442-\u0441\u0440, \u0447\u0442-\u043f\u0442\n*   \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043d\u044f \u0431\u0443\u0434\u0435\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439, \u043c\u0438\u043d\u0443\u044f \u0441\u0443\u0431\u0431\u043e\u0442\u0443\n*   \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043d\u044f \u0431\u0443\u0434\u0435\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0443\u0431\u0431\u043e\u0442\u0443\n\n\u041f\u043e\u043a\u0430 0.19406065345846368 \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043a\u043e\u0440 \u043d\u0430 \u043d\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n","1d875efa":"\n### \u041f\u043e\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\n* warehouse_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\n* product_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\n* date - \u0434\u0430\u0442\u0430\n* quantity - \u043a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u0436\n* id - \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0442\u0440\u043e\u043a\u0438\n\n ","ec7b697f":"### \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u0441\u0435\u0433\u043e 5%. \u042d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c!","9d9dd62f":"### Score = 0.20085\n### \u0421\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u043e\u0441\u0442\u0430 \u043d\u0435\u0442. \u041d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435...","ad80542e":"### \u0421\u0443\u0442\u044c \u0438\u0434\u0435\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u043a\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0439 \u0442\u043e\u0432\u0430\u0440\/\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0434\u0430\u043b\u0435\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0434\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437","15557e53":"\n\n---\n\n\n\n","efb542f4":"### \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0438 \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f id \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442. \u041f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0435\u0442.","1fcf874b":"### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u0435\u0431\u044f","1106e33b":"### \u041d\u0430\u0447\u043d\u0451\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043d\u0443\u043b\u044f\u043c\u0438\n\u0418\u0434\u0435\u044f \u0442\u0430\u043a\u0430\u044f: \u0435\u0441\u043b\u0438 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u043e\u0432\u0430\u0440\u0435 \u043d\u0435\u0442, \u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u0435\u0433\u043e \u043a\u0443\u043f\u0438\u043b\u0438 0 \u0440\u0430\u0437. \u042d\u0442\u043e \u043f\u043e\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.","7c775eaa":"### \u0417\u043d\u0430\u0447\u0438\u0442 \u0443 \u043d\u0430\u0441 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 874608 \u0437\u0430\u043f\u0438\u0441\u0435\u0439. \u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u043e\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u0430 \u0441\u0440\u0430\u0437\u0443 \u0431\u0443\u0434\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u0438\u043a. \u041e\u043d \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c \u0436\u0435, \u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u0435\u0435.","b14b60b1":"### Score = 0.19935\n### \u0425\u0443\u0436\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0448\u043b\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430. \u0413\u0440\u0443\u0441\u0442\u043d\u043e. \u041d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u044f \u0443\u0436\u0435 \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443, \u0438\u0431\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043d\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c.","69496792":"## \u041f\u0435\u0440\u0432\u0430\u044f \u0438\u0434\u0435\u044f: \u0434\u043d\u0438 \u043d\u0435\u0434\u0435\u043b\u0438","5b30f9f8":"### Score = 0.20137\n### \u0425\u0443\u0436\u0435 \u0447\u0435\u043c \u043f\u0440\u043e\u0448\u043b\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430... \u042f\u0432\u043d\u043e \u0435\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0430","3e54968b":"### \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u043c\u0435\u0435\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0434\u0430\u0442\u0435 \u0438 id \u0434\u0430\u043d\u043d\u044b\u0435. \u0418\u0434\u0435\u044f \u0434\u0435\u043b\u0435\u043d\u0438\u044f:\n\n*   \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 n \u0434\u043d\u0435\u0439\n*   \u0414\u0435\u043b\u0438\u043c \u043d\u0430 train \/ test \u043f\u043e \u044d\u0442\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\n\n","1d11829d":"### \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0431\u0443\u0434\u0435\u043c \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 \u044d\u0442\u043e\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438 \u0438\u0441\u043a\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432\u0430\u0440\u044f","10d7c9fd":"### \u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0434\u0430\u0451\u0442 \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0435\u0447\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u0435\u0435\n","444b599d":"### \u0417\u0430\u0431\u044b\u043b \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u044c... \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0435\u0440\u0435\u0431\u0435\u0451\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043d\u043e\u0432\u043e.","27193fa1":"### \u0418\u0442\u0430\u043a, \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0434\u043d\u0438 \u043d\u0430 \u043f\u0430\u0440\u044b \u0438 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b:\n\n*   \u0421\u0443\u0431\u0431\u043e\u0442\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u043a\u0430\u043a \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u0432\u044b\u0448\u0435\n*   \u041f\u044f\u0442\u043d\u0438\u0446\u0430 - \u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435, \u043a\u0430\u043a \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u043d\u0438\n*   \u041f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a - \u0432\u0442\u043e\u0440\u043d\u0438\u043a\n*   \u0421\u0440\u0435\u0434\u0430 - \u0447\u0442\u0435\u0432\u0435\u0440\u0433\n\n\u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u0438\u0436\u0430\u0442\u044c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u043d\u044f, \u0438\u0431\u043e \u0431\u0440\u0430\u0442\u044c \u0447\u0438\u0441\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043a\u0440\u0443\u0442\u043e\n\n\n","27fcb827":"### \u0421\u0440\u0430\u0437\u0443 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 warehouse_id \u0438 \u043d\u0430 product_id, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 product_id \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b\n","1fdbea0b":"### \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c: \u0434\u0430\u0442\u0430 - \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438","139f4c9e":"### \u041f\u043e\u043a\u0430 \u044d\u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u043e\u043c\u043e\u0433\u043b\u043e \u0441\u0430\u043c\u043e\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430.","a7a517a4":"### \u041e\u043a\u0435\u0439, \u044d\u0442\u043e \u043f\u043e\u043a\u0430 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041e\u0441\u0442\u0430\u0432\u0438\u043c threshold = 5.5","ee96c8e7":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b","3f9569b7":"## \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u0441 \u0447\u0435\u043c \u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c","5fa15d9b":"### \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0433\u0434\u0435 key = warehouse_id + product_id, \u0430 value = \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 key = \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0438 value = \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u043e\u0434\u0430\u0436","b3200919":"### \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041f\u0440\u0438\u0447\u0451\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0434\u0430\u0451\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0415\u0433\u043e \u0438 \u0431\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. ","ce6452cf":"### \u0421\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u043d\u0435\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0432\u043e\u0439\u043d\u043e\u0435 \u044d\u043a\u0441\u043f\u043e\u043d\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u0433\u043b\u0430\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430","00db83e3":"### \u0425\u043e\u0447\u0435\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0432\u0441\u0435\u043c \u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430\u043c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436 \u0432 \u0447\u0435\u0442\u0432\u0435\u0440\u0433, \u043d\u043e \u0438 \u043a\u0430\u043a-\u0442\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0435 \u0434\u043d\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435.\n","b0b48081":"### \u041c\u0434\u0430... \u041d\u0443 \u043e\u043a\u0435\u0439 \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0437\u0430\u043b\u044c\u0451\u043c \u0441 \u0442\u0430\u043a\u0438\u043c \u0432\u044b\u0432\u043e\u0434\u043e\u043c","2f93d6d9":"### Score = 0.19921\n### \u041f\u043e\u0442\u044f\u043d\u0435\u0442","5f213754":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 simple submission","683f13d5":"### \u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u0434\u0435\u044e \u0441 \u0434\u043d\u044f\u043c\u0438 \u043d\u0435\u0434\u0435\u043b\u0438, \u043d\u043e \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u0430 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0435\u0435"}}