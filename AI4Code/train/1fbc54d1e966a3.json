{"cell_type":{"5cd636d0":"code","5037ed23":"code","cc883017":"code","e843ec5a":"code","52b706c1":"code","293bc871":"code","fb500c52":"code","5e4546f3":"code","57ca51ea":"code","6ad0d245":"code","6e95fcbb":"code","3f0e0a2d":"code","fe4773b9":"code","e7795023":"code","e7d06136":"code","e4798e9c":"code","d192208e":"code","caa223de":"code","07d8b779":"code","6dfccd8e":"code","8599cff8":"code","d43edc42":"code","2df450ef":"code","848f42d6":"code","42e55230":"code","478075f6":"code","025946a5":"code","88864407":"code","efb7e29e":"markdown","9a3eb8af":"markdown","f31d2b31":"markdown","adf10bb3":"markdown","bde812c5":"markdown"},"source":{"5cd636d0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5037ed23":"!pip install pyspark","cc883017":"import pyspark\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.getOrCreate()","e843ec5a":"df = spark.read.format('csv').options(header = True,inferSchema = True).csv('..\/input\/car-acceptability-prediction\/train.csv')\ndf.show(5,truncate = False)\ndf.printSchema()\ndf.count()","52b706c1":"test = spark.read.format('csv').options(header = True,inferSchema = True).csv('..\/input\/car-acceptability-prediction\/test.csv')\ntest.show(5,truncate = False)\ntest.printSchema()","293bc871":"from pyspark.ml import Pipeline\nfrom pyspark.ml.classification import DecisionTreeClassifier,RandomForestClassifier,LogisticRegression,FMClassifier\nfrom pyspark.ml.feature import StringIndexer,OneHotEncoder,VectorAssembler,IndexToString\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator","fb500c52":"input_category = df.columns[1:-1]\n# The index of string vlaues multiple columns\ninput_indexers = [\n    StringIndexer(inputCol=c, outputCol=\"{0}_indexed\".format(c))\n    for c in input_category\n]\n# The encode of indexed vlaues multiple columns\ninput_encoders = [OneHotEncoder(dropLast=False,inputCol=indexer.getOutputCol(),\n            outputCol=\"{0}_encoded\".format(indexer.getOutputCol())) \n    for indexer in input_indexers\n]\noutput_indexers = StringIndexer(inputCol = \"acceptability\",outputCol=\"acceptability_indexed\")\n\n# Vectorizing encoded values\nassembler = VectorAssembler(inputCols=[encoder.getOutputCol() for encoder in input_encoders],outputCol=\"features\")\n\n# Model\nrandom_forest_model = RandomForestClassifier(labelCol=\"acceptability_indexed\",featuresCol=\"features\",maxDepth=20, maxBins=128, numTrees=200)\nlogistic_regression_model = LogisticRegression(labelCol=\"acceptability_indexed\",featuresCol=\"features\",tol=1e-8,maxIter = 1000)\ndecision_tree_model = DecisionTreeClassifier(labelCol=\"acceptability_indexed\",featuresCol=\"features\",maxDepth=20, maxBins =128)\n","5e4546f3":"(train,dev) = df.randomSplit([0.95,0.05])\n\nRF_pipeline = Pipeline(stages = [output_indexers] + input_indexers + input_encoders + [assembler] + [random_forest_model])\nLR_pipeline = Pipeline(stages = [output_indexers] + input_indexers + input_encoders + [assembler] + [logistic_regression_model])\nDT_pipeline = Pipeline(stages = [output_indexers] + input_indexers + input_encoders + [assembler] + [decision_tree_model])\n\n\nRF_model = RF_pipeline.fit(train)\nLR_model = LR_pipeline.fit(train)\nDT_model = DT_pipeline.fit(train)\n\nRF_prediction = RF_model.transform(dev).select(\"prediction\",\"acceptability_indexed\",\"features\")\nLR_prediction = LR_model.transform(dev).select(\"prediction\",\"acceptability_indexed\",\"features\")\nDT_prediction = DT_model.transform(dev).select(\"prediction\",\"acceptability_indexed\",\"features\")\n","57ca51ea":"evaluator = MulticlassClassificationEvaluator(\n    labelCol = \"acceptability_indexed\",predictionCol = \"prediction\",metricName = \"accuracy\"\n)\nRF_acc = evaluator.evaluate(RF_prediction)\nLR_acc = evaluator.evaluate(LR_prediction)\nDT_acc = evaluator.evaluate(DT_prediction)\n","6ad0d245":"print(\"RandomForest: \",RF_acc)\nprint(\"Logistic Regression: \",LR_acc)\nprint(\"Decision Tree: \",DT_acc)\n\nacc = [RF_acc,LR_acc,DT_acc]\nmodel = [RF_model,LR_model,DT_model]\n\nmax_acc_index = [index for index in range(len(acc)) if acc[index] == max(acc)]\nmax_model = model[max_acc_index[0]]","6e95fcbb":"new_train = RF_model.transform(train)\nnew_train.select(\"acceptability\",\"acceptability_indexed\").toPandas().value_counts().index","3f0e0a2d":"# final_predictions = max_model.transform(test).select(\"car_id\",\"prediction\").withColumnRenamed(\"prediction\",\"acceptability\")\n# final_predictions.toPandas().replace(1, 'acc').replace(0, 'unacc').replace(2, 'good').replace(3, 'vgood').to_csv(\"final_result.csv\",index = False,header = True)","fe4773b9":"RF_pred1 = RF_model.transform(test).select(\"car_id\",\"prediction\").withColumnRenamed(\"prediction\",\"acceptability\")\nLR_pred1 = LR_model.transform(test).select(\"car_id\",\"prediction\").withColumnRenamed(\"prediction\",\"acceptability\")\nDT_pred1 = DT_model.transform(test).select(\"car_id\",\"prediction\").withColumnRenamed(\"prediction\",\"acceptability\")","e7795023":"pred1 = RF_pred1.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')\npred2 = LR_pred1.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')\npred3 = DT_pred1.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')","e7d06136":"pred1.head(), pred2.head(), pred3.head()","e4798e9c":"path = \"..\/input\/car-acceptability-prediction\/train.csv\"\ndf = (spark.read.options(header = True, inferSchema = True).format(\"csv\").load(path))","d192208e":"indexer = StringIndexer()\nindexer.setInputCols([\"buying_price\", \"maintenance_price\",\"number_of_doors\",\"carry_capacity\",\"trunk_size\",\"safety\"]), #\nindexer.setOutputCols([\"one_buying_price\", \"one_maintenance_price\",\"one_number_of_doors\",\"one_carry_capacity\",\"one_trunk_size\",\"one_safety\"]), #\nfeatures = indexer.fit(df).transform(df)\nfeatures = features.select([\"one_buying_price\", \"one_maintenance_price\",\"one_number_of_doors\",\"one_carry_capacity\",\"one_trunk_size\",\"one_safety\", \"acceptability\"])\nlabel_index = StringIndexer()\nlabel_index.setInputCols([\"acceptability\"]), #\nlabel_index.setOutputCols([\"label\"]),\n\nfeatures1 = label_index.fit(features).transform(features)","caa223de":"feature_test = indexer.fit(df).transform(test)\nfeature1_test = feature_test.select([\"car_id\",\"one_buying_price\", \"one_maintenance_price\",\"one_number_of_doors\",\n                            \"one_carry_capacity\",\"one_trunk_size\",\"one_safety\"])\nfeature1_test = VectorAssembler(inputCols=[\"one_buying_price\", \"one_maintenance_price\",\"one_number_of_doors\"\n                                            ,\"one_carry_capacity\",\"one_trunk_size\",\"one_safety\"], outputCol=\"output\").transform(feature1_test)","07d8b779":"feature_vector = VectorAssembler(inputCols=[\"one_buying_price\", \"one_maintenance_price\",\"one_number_of_doors\"\n                                            ,\"one_carry_capacity\",\"one_trunk_size\",\"one_safety\"], outputCol=\"output\").transform(features1)","6dfccd8e":"# Models\nlogis  = LogisticRegression(maxIter = 1000, featuresCol='output', labelCol='label')\nmodel_logis = logis.fit(feature_vector)\nprediction = model_logis.transform(feature1_test)","8599cff8":"tree  = DecisionTreeClassifier(maxDepth=10, maxBins=64, featuresCol='output', labelCol='label')\nmodel_tree = tree.fit(feature_vector)\nprediction = model_tree.transform(feature1_test)","d43edc42":"forest  = RandomForestClassifier(maxDepth=10, maxBins=64, numTrees=50, featuresCol='output', labelCol='label')\nmodel_forest = forest.fit(feature_vector)\nprediction = model_forest.transform(feature1_test)","2df450ef":"result_logis = prediction.select([\"car_id\", \"prediction\"]).withColumnRenamed(\"prediction\",\"acceptability\")\nresult_tree = prediction.select([\"car_id\", \"prediction\"]).withColumnRenamed(\"prediction\",\"acceptability\")\nresult_forest = prediction.select([\"car_id\", \"prediction\"]).withColumnRenamed(\"prediction\",\"acceptability\")","848f42d6":"pred4 = result_logis.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')\npred5 = result_tree.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')\npred6 = result_forest.toPandas().replace(1, 'acc').replace(0, 'unacc')\\\n.replace(2, 'good').replace(3, 'vgood')","42e55230":"pred4.head(), pred5.head(), pred6.head()","478075f6":"final_sub = pd.DataFrame()\nfinal_sub['car_id'] = pred1.car_id\nfinal_sub['pred1'] = pred1.acceptability\nfinal_sub['pred2'] = pred2.acceptability\nfinal_sub['pred3'] = pred3.acceptability\nfinal_sub['pred4'] = pred4.acceptability\nfinal_sub['pred5'] = pred5.acceptability\nfinal_sub['pred6'] = pred6.acceptability\nfinal_sub.head()","025946a5":"final_sub.shape","88864407":"temp = final_sub.mode(axis=1)\nfinal_sub['acceptability'] = temp[0]\nfinal_sub[['car_id', 'acceptability']].to_csv('submission.csv', index=0)\nfinal_sub[['car_id', 'acceptability']].head()","efb7e29e":"# Load data","9a3eb8af":"18520832 - L\u00e2m Gia Huy<br>\n18520997 - Tr\u1ea7n Quang Linh<br>\n18520505 - D\u01b0\u01a1ng V\u0103n B\u00ecnh<br>","f31d2b31":"# Create Pipepline using onehotencoding","adf10bb3":"# Ensemble","bde812c5":"# Create Pipepline using label encoding"}}