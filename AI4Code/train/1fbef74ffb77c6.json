{"cell_type":{"4e1e758b":"code","8351ad93":"code","f9c60d6e":"code","66df34ae":"code","749686c8":"code","eca53666":"code","daf5b1ae":"code","ea46cb11":"code","4fa0cc0a":"code","616f54a6":"code","849d30ee":"code","6a12b723":"code","599cce85":"code","86f9603e":"code","294f9825":"code","f0fc0d77":"code","fbecc952":"code","116ba6dd":"code","a8f95d93":"code","0e539875":"code","96a72660":"code","33af4580":"code","050183c7":"code","2d42c05b":"code","337914b5":"code","6d8bc49f":"code","a9b0062a":"code","ec3bd797":"code","25fea7f0":"code","51d344f2":"code","1c8c5a18":"code","f0a4da27":"code","c6ac6302":"code","d604e285":"code","d5316e1f":"code","86a069e2":"code","7bb716ee":"markdown"},"source":{"4e1e758b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8351ad93":"df = pd.read_csv(\"..\/input\/motion-capture-hand-postures-data-set\/Postures.csv\")\n","f9c60d6e":"df.head(20)","66df34ae":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","749686c8":"plt.figure(figsize=(18,6))\nsns.heatmap(df.isnull(), yticklabels=False)","eca53666":"df.columns","daf5b1ae":"df.drop(['User', 'X5', 'Y5', 'Z5', 'X6', 'Y6', 'Z6',\n       'X7', 'Y7', 'Z7', 'X8', 'Y8', 'Z8', 'X9', 'Y9', 'Z9', 'X10', 'Y10',\n       'Z10', 'X11', 'Y11', 'Z11', 'X4','Y4', 'Z4'], axis = 1, inplace = True)\nX = df.drop(\"Class\", axis = 1)\ny = df['Class']\n","ea46cb11":"df.drop([0], inplace=True)","4fa0cc0a":"#######\ndf[df[\"X3\"] == \"?\"][\"X3\"].replace(to_replace=\"?\",value= '0', inplace=True)\ndf[df[\"Y3\"] == \"?\"][\"Y3\"].replace(\"(\\?)\", '0', inplace=True, regex = True)\ndf[df[\"Z3\"] == \"?\"][\"Z3\"].replace(\"?\", 0, inplace=True)\n########","616f54a6":"df.replace('(\\?)',0, regex=True, inplace = True)","849d30ee":"\ndf = df.astype(float)","6a12b723":"df.head()","599cce85":"plt.figure(figsize = (12,8))\nsns.boxplot(x = df['Class'], y = df[\"X3\"])","86f9603e":"for i in range(1,6):\n  \n    print(df[(df[\"Class\"] == i) & (df[\"X3\"] != '0')][\"X3\"].mean())\n    \n    i = i+1","294f9825":"def fill_val(col):\n    Class = col[0]\n    axis = col[1]\n    \n    if (axis == 0):\n        \n        if Class == 1:\n            return 43.67886811229142\n        \n        elif Class == 2:\n            return 50.20092183147651\n        elif Class == 3:\n            return 58.665852856488755\n        elif Class == 4:\n            return 55.26632410942612\n        elif Class == 5:\n            return 34.72019438231079\n    else:\n        return axis","f0fc0d77":"df['X3'] = df[['Class', \"X3\"]].apply(fill_val, axis = 1)","fbecc952":"for i in range(1,6):\n  \n    print(df[(df[\"Class\"] == i) & (df[\"Y3\"] != '0')][\"Y3\"].mean())\n    \n    i = i+1","116ba6dd":"def fill_val2(col):\n    Class = col[0]\n    axis = col[1]\n    \n    if (axis == 0):\n        \n        if Class == 1:\n            return 62.777261714635515\n        \n        elif Class == 2:\n            return 104.49406404584828\n        elif Class == 3:\n            return 62.75648931306541\n        elif Class == 4:\n            return 85.70812847028812\n        elif Class == 5:\n            return 96.45432683767733\n    else:\n        return axis\n    \n    ","a8f95d93":"df['Y3'] = df[['Class', \"Y3\"]].apply(fill_val2, axis = 1)","0e539875":"for i in range(1,6):\n  \n    print(df[(df[\"Class\"] == i) & (df[\"Z3\"] != '0')][\"Z3\"].mean())\n    \n    i = i+1","96a72660":"def fill_val3(col):\n    Class = col[0]\n    axis = col[1]\n    \n    if (axis == 0):\n        \n        if Class == 1:\n            return -52.24485750151599\n        \n        elif Class == 2:\n            return -1.149659492484871\n        elif Class == 3:\n            return -40.51515098612851\n        elif Class == 4:\n            return -34.338311884597694\n        elif Class == 5:\n            return -26.060598332688784\n    else:\n        return axis\n    ","33af4580":"df['Z3'] = df[['Class', \"Z3\"]].apply(fill_val3, axis = 1)","050183c7":"df.head()","2d42c05b":"df.info()","337914b5":"df.describe().transpose()","6d8bc49f":"X = df.drop('Class', axis =1)\ny = df['Class']","a9b0062a":"from sklearn.model_selection import train_test_split","ec3bd797":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","25fea7f0":"from sklearn.ensemble import RandomForestClassifier","51d344f2":"rtree = RandomForestClassifier(100)","1c8c5a18":"rtree.fit(X_train, y_train)","f0a4da27":"prediction = rtree.predict(X_test)","c6ac6302":"prediction","d604e285":"from sklearn.metrics import classification_report,confusion_matrix","d5316e1f":"print(classification_report(y_test,prediction))","86a069e2":"print(confusion_matrix(y_test,prediction))","7bb716ee":"NOT WORKED"}}