{"cell_type":{"54ce5c3a":"code","69ca1fcf":"code","f104b132":"code","eb0a67dc":"code","d3881691":"code","ba692411":"code","26e16602":"code","57ebad99":"code","beb76bf0":"code","d34d9a24":"code","df35fe1b":"code","93c90ca5":"code","de8cc327":"code","716f364b":"code","c9cd1905":"code","25c9571a":"code","f1af550d":"code","2c891730":"code","3c212fef":"code","5238c272":"code","9e8fda9d":"markdown","c3cc5b20":"markdown","b4a64f39":"markdown","d11b0c89":"markdown","e06377c8":"markdown"},"source":{"54ce5c3a":"# First, we'll import pandas, a data processing and CSV file I\/O library\nimport pandas as pd \nimport pandas.plotting\nfrom pandas.plotting import andrews_curves\n\n# We'll also import seaborn, a Python graphing library\nimport seaborn as sns \nfrom matplotlib import pyplot as plt \nsns.set_theme(style=\"ticks\", palette=\"pastel\")\n\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\nplt.style.use(\"fast\")\n%matplotlib inline\n\n# Next, we'll load the Iris flower dataset, which is in the \"..\/input\/\" directory\n\ndf=pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\n\n# Let's see what's in the first 10 rows of our iris data -\ndf.head(10)","69ca1fcf":"# we can see that we have ID column which has no actual use, so we will detele it now.\n# \"inplace=True\" This syntax will change the origional dataset.\ndf.drop(\"Id\", axis=1, inplace=True)\ndf.head()","f104b132":"# some useful information about our dataset\ndf.info()","eb0a67dc":"# lets see how many columns and rows in our dataset\ndf.shape","d3881691":"# some useful statistics about our datasets, later we will see the same statistics according to our species\ndf.describe()","ba692411":"# lets see how many null values we have in our data sets \ndf.isnull().sum()","26e16602":"# Let's see how many examples we have of each species\ndf.Species.value_counts()","57ebad99":"# statistical summary about Iris Setosa\nSetosa_Summary = df.loc[df.Species == \"Iris-setosa\"]\nSetosa_Summary.describe()","beb76bf0":"# statistical summary about versicolor\nVersicolor_summary = df.loc[df.Species == \"Iris-versicolor\"]\nVersicolor_summary.describe()","d34d9a24":"# statistical summary about virginica\nvirginica_summary = df.loc[df.Species == \"Iris-virginica\"]\nvirginica_summary.describe()\n","df35fe1b":"df.boxplot(by=\"Species\", figsize=(12, 6))","93c90ca5":"# We can look at an individual feature in Seaborn through a boxplot\nplt.figure(figsize=(12,8))\nsns.boxplot(x=\"Species\",y=\"SepalLengthCm\", data=df)","de8cc327":"# We can look at an individual feature in Seaborn through a boxplot\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data= df)","716f364b":"# We can look at an individual feature in Seaborn through a boxplot\nplt.figure(figsize=(12, 8))\nsns.boxplot(x=\"Species\", y=\"PetalWidthCm\", data= df)","c9cd1905":"# we can see the correlation of all the attributes of our dataset\nheat_map = df.corr()\nsns.heatmap(heat_map, annot=True, linewidth=0.5, cmap=\"YlGnBu\" )","25c9571a":"# Another useful seaborn plot is the pairplot, which shows the bivariate relation\n# between each pair of features\n# \n# From the pairplot, we'll see that the Iris-setosa species is separataed from the other\n# two across all feature combinations\nsns.pairplot(df, hue=\"Species\", size=3)","f1af550d":"# We'll use seaborn's FacetGrid to observe the correlation of sepal length and sepal width\nsns.FacetGrid(df, hue=\"Species\", size=7).map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\").add_legend()","2c891730":"# We'll use seaborn's FacetGrid to observe the correlation of petal length and petal width\nsns.FacetGrid(df, hue=\"Species\", size=7).map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\").add_legend()","3c212fef":"# One cool more sophisticated technique pandas has available is called Andrews Curves\n# Andrews Curves involve using attributes of samples as coefficients for Fourier series\nandrews_curves(df, \"Species\")","5238c272":"# Now I will generate different Violin plot, which is also another way as well as the\n# ridge to visualize how the data is distributed. The objective in this part is to \n# visualize how the values of each attribute behave in different species.\n\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=df)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=df)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=df)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=df)","9e8fda9d":"**Libraries and Data Loading**","c3cc5b20":"The columns in this dataset are:\n\n* Id\n* SepalLengthCm\n* SepalWidthCm\n* PetalLengthCm\n* PetalWidthCm\n* Species","b4a64f39":"**Exploratory Data Analysis**","d11b0c89":"* **Correlation**","e06377c8":"**Description**\nThe Iris dataset was used in R.A. Fisher's classic 1936 paper, The Use of Multiple Measurements in Taxonomic Problems, and can also be found on the UCI Machine Learning Repository.\n\nIt includes three iris species with 50 samples each as well as some properties about each flower. One flower species is linearly separable from the other two, but the other two are not linearly separable from each other.\n\n**Objective**\nIn this notebook I will perform exploratory data analysis, during the analysis process we will use beautiful and expressive graphics to facilitate the understanding of third parties, all the graphic visualizations generated in this work will be done through the package matplotlib and seaborn, which provides dense and beautiful tooling for any type of work."}}