{"cell_type":{"d5f9956c":"code","05528b9a":"code","1eb7e45c":"code","ac1ac049":"code","42b8cee7":"code","ffa6530d":"code","6a04419e":"code","f4bf3b67":"code","77067278":"code","a12bbb2e":"code","2f3bee6c":"code","26df359d":"code","105ea985":"code","a40a0d20":"code","981bff1f":"code","322ab120":"code","1cf8953b":"code","0cafec86":"code","9bb5a1ba":"code","13892817":"code","dec2502d":"code","9cb2330a":"code","6d29c7b3":"code","e52eb78a":"code","435bb8ae":"code","a93787f5":"markdown"},"source":{"d5f9956c":"import pandas as pd\nimport numpy as np\nfrom scipy.spatial import distance\n\nfrom sklearn.cluster import KMeans, MiniBatchKMeans\nimport more_itertools as mit\nfrom sklearn.preprocessing import minmax_scale\nimport plotly.offline as pyo\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n","05528b9a":"pd.options.plotting.backend = \"plotly\"","1eb7e45c":"# Requests per minute by time. \"n\" column = count of requests per minute.\nDATA_PATH = '..\/input\/volha-rps\/drop_test.csv'","ac1ac049":"config = {'scrollZoom': True}","42b8cee7":"df = pd.read_csv(DATA_PATH)","ffa6530d":"df","6a04419e":"df['timestamp'] = pd.to_datetime(df['day']) + pd.to_timedelta(df['minute'] * 60 + df['hour'] * 60 * 60, unit='s')","f4bf3b67":"df.set_index('timestamp', inplace=True)","77067278":"df.sort_index(inplace=True)","a12bbb2e":"# Dedup index.\ndf = (\n    df\n        .reset_index()\n        .drop_duplicates(subset='timestamp', keep='last')\n        .set_index('timestamp').sort_index()\n)","2f3bee6c":"# Because we need per-second granularity while the original data is per-minute.\ndf['n'] = df['n'] \/ 60.","26df359d":"df.rename({'n': 'rps'}, axis=1, inplace=True)","105ea985":"df = df[['rps']]","a40a0d20":"df","981bff1f":"df['avg_rps'] = df.rolling('30min')['rps'].mean()","322ab120":"# Find RPS curve's peaks.\navg_rps = df['avg_rps']\ndf['is_peak'] = (\n    (avg_rps >= avg_rps.shift(1)) & (avg_rps > avg_rps.shift(-1))\n    | (avg_rps > avg_rps.shift(1)) & (avg_rps >= avg_rps.shift(-1))\n    | (avg_rps <= avg_rps.shift(1)) & (avg_rps < avg_rps.shift(-1))\n    | (avg_rps < avg_rps.shift(1)) & (avg_rps <= avg_rps.shift(-1))\n)","1cf8953b":"df","0cafec86":"# Find tangent angle to a curve traced between peaks of avg. RPS values.\npeaks = df[~df['is_peak'].isna() & df['is_peak']]\ndf['y1'] = peaks['avg_rps'].astype(np.float64)\npeaks = df[~df['is_peak'].isna() & df['is_peak']]\ndf['y2'] = peaks['y1'].shift(1).astype(np.float64)\n# Because requests per SECOND.\ndf['delta_x'] = 1.0\ndf['delta_y'] = df['y1'] - df['y2']\n# df['delta_y'].fillna(method='pad', inplace=True)\n# Angle with the previous peak (not just a relgular data-point!).\ndf['angle'] = np.degrees(np.arctan2(df['delta_y'], df['delta_x']))\ndf['angle'].fillna(method='pad', inplace=True)\ndf['abs_angle'] = np.abs(df['angle'])","9bb5a1ba":"# 10 clusters because less would mean more false-positives and more - more unnecessary computations.\nkmeans = KMeans(n_clusters=10)","13892817":"# Find anomalies among absolute values of tangent angles to the curve of averaged RPS.\n# Cluster data of each 60 days and calculate threshold as min. value of one of the topmost clusters.\n\n# TODO: find some streaming clustering solution.\ndef get_treshold(group):\n    group = group.assign(cluster=kmeans.fit_predict(group[['abs_angle']].fillna(0)))\n    return group.groupby('cluster')['abs_angle'].min().quantile(0.90)\n\nthresholds = df.groupby(pd.Grouper(freq='60d')).apply(get_treshold)","dec2502d":"df['anomaly_threshold'] = thresholds.reindex(df.index, method='pad')","9cb2330a":"# Now, when anomaly-threshold value is calculated - calculate anomaly status.\ndf['is_anomaly'] = df['abs_angle'] > df['anomaly_threshold']","6d29c7b3":"anomalies = df[df['is_anomaly'] & df['is_peak']]","e52eb78a":"# Full data is too heavy to draw - sample it.\nsample = df[:200000]\nsample_anomalies = sample[sample.index.isin(anomalies.index)]","435bb8ae":"fig = make_subplots(rows=2, cols=1, shared_xaxes=True, y_title='Average RPS and tangent angle')\nfig.add_scatter(x=sample.index, y=sample['rps'], mode='lines', name='RPS', row=1, col=1)\nfig.add_scatter(x=sample.index, y=sample['avg_rps'].fillna(method='backfill'), mode='lines', name='Average RPS', row=1, col=1)\nfig.add_scatter(\n    x=sample_anomalies.index, \n    y=sample_anomalies['rps'], \n    mode='markers', \n    name='Anomalies', \n    row=1, \n    col=1,\n    text=(\n        'Angle: ' + sample_anomalies['abs_angle'].astype(str) +\n        ' Theshold: ' + sample_anomalies['anomaly_threshold'].astype(str)\n    )\n)\n\nfig.add_scatter(x=sample.index, y=sample['abs_angle'], name='Tangent angle', row=2, col=1)\nfig.add_scatter(x=sample.index, y=sample['anomaly_threshold'], name='Anomaly threshold', row=2, col=1)\n\nfig.show(config=config)","a93787f5":"# Detect anomalies in web-traffic"}}