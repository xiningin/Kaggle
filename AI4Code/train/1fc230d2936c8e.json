{"cell_type":{"dfcfbefb":"code","8310493f":"code","64fd43c1":"code","19a34ad0":"code","b467cf62":"code","6290ddb6":"code","e72a05cb":"code","0277e6fb":"code","d60e2f33":"code","e14c9be4":"code","2368c6d4":"code","c7248cb7":"code","c16e8bd0":"code","1c942c59":"code","ecc90090":"code","69eeb9c2":"code","27dfa19f":"code","c4db8e27":"code","66ab5a35":"code","3681d380":"code","b557d667":"code","fad851fc":"code","5cf78a61":"code","85300aa7":"code","2ab2820c":"code","feb7cd06":"code","101f2dcb":"code","768d72ef":"code","53e40db0":"code","d662965c":"code","2373bdbd":"code","b820cb9e":"code","9094a6a5":"code","f0936ef7":"code","ff8726c4":"code","2860357b":"code","5ff5b650":"code","48f170f9":"code","24262c75":"code","8d09c77c":"code","64e68921":"code","3134b333":"code","20d4dcdd":"code","833488b0":"code","aaebf6dd":"code","304fc988":"code","ea0717f5":"code","396035ed":"code","6d7e1e26":"code","61f03a0b":"code","5c5064d7":"code","94305e57":"code","af63064e":"code","cf7b4d15":"code","dc114180":"code","a6a9c331":"code","9da99277":"code","87d4aad3":"code","46ffa1f8":"code","7330fec8":"code","1e1beb51":"code","a667a5b9":"code","bfc15bb7":"code","3bd1e7a3":"code","57209b89":"code","93d080af":"code","3d3ef376":"code","0f26f05b":"code","2a47ed24":"code","926ad0d7":"code","bf1b380a":"code","0d7cf037":"code","8d624367":"code","411e0319":"markdown","22438fff":"markdown","a95f9046":"markdown","80abe27b":"markdown","052887ce":"markdown","26c2d112":"markdown","5487c417":"markdown","a7edb7d8":"markdown","4e1c611c":"markdown","59a91981":"markdown","c32851a9":"markdown","c897c33d":"markdown","adeb1c25":"markdown","fc72aee9":"markdown","e90f69af":"markdown","22ebacdd":"markdown","492079e8":"markdown","96662993":"markdown","272bd4d1":"markdown","5f126240":"markdown","9f6b8d5b":"markdown","1b8ff4a8":"markdown","5168f0a2":"markdown","30fba99f":"markdown","f489f9b6":"markdown","4f5e3f0c":"markdown","98f2f4d3":"markdown","8ecd46e3":"markdown","b75c6a71":"markdown","a8c38a69":"markdown","d54202b0":"markdown","260d9ee3":"markdown","cf45b130":"markdown","98013a62":"markdown","df57b034":"markdown","e14cddd6":"markdown","e08218e1":"markdown","bc523950":"markdown","615130b0":"markdown","f897a4bf":"markdown","6897cc58":"markdown","55026d5d":"markdown","c059347e":"markdown","dd406e04":"markdown","40dae305":"markdown","344c52f2":"markdown","a957d6b6":"markdown","c74e4ae1":"markdown","25569b7a":"markdown","11a6145b":"markdown","164ffa62":"markdown","ab2d0462":"markdown","2d787e09":"markdown","c1a17799":"markdown","f3d5126e":"markdown","346312b9":"markdown","47749e03":"markdown","e288ff0b":"markdown","6c6ed1b1":"markdown","2840f697":"markdown","e5929158":"markdown","27f36a61":"markdown","d5947eab":"markdown"},"source":{"dfcfbefb":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\n#style.use('ggplot')\nstyle.use('fivethirtyeight')\n\nimport seaborn as sns\nsns.set_context('talk', font_scale=0.8) \n\nimport plotly as py\nfrom plotly import tools\nfrom plotly import subplots\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\nfrom scipy import stats\n\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, max_error\nfrom sklearn.metrics import explained_variance_score, r2_score\nfrom sklearn.model_selection import train_test_split, cross_validate\nfrom sklearn.preprocessing import StandardScaler\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nimport os\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/world-happiness\"))\nprint(os.listdir(\"..\/input\/65-world-indexes-gathered\"))","8310493f":"def warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn","64fd43c1":"%%html\n<style>table {float:left}<\/style>\n<style> table td, table th, table tr {text-align:left !important;} <\/style>","19a34ad0":"df_happy_2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\ndf_happy_2016 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ndf_happy_2017 = pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")\ndf_65indexes = pd.read_csv(\"..\/input\/65-world-indexes-gathered\/Kaggle.csv\")","b467cf62":"def plotly_scatter(df, col_x_values, col_y_values) :\n    \n    plot_title = col_y_values + \" vs. \" + col_x_values\n        \n    trace = go.Scatter( x = df[col_x_values], y = df[col_y_values],\n                        text = df['Country'], mode = 'markers') \n\n    layout = go.Layout( title=plot_title, autosize=False, width=700, height=500,\n                        xaxis=dict(title = col_x_values), \n                        yaxis=dict(title = col_y_values)              \n                      )\n\n    fig = go.Figure(data=[trace], layout=layout)\n    fig.update_layout(title=go.layout.Title(text=plot_title, xref=\"paper\", x=0.5))     \n    \n    iplot(fig)","6290ddb6":"def plotly_choropleth_map(countries, values, title, colorbar_title, projection, colorscale) :\n    \n    data = dict(type = 'choropleth', \n           colorscale = colorscale,\n           locations = countries,\n           locationmode = 'country names',\n           z = values, \n           text = countries,\n           colorbar = {'title': colorbar_title})\n    \n    layout = dict(title = title, \n                  geo = dict(showframe = True, \n                       projection = {'type': projection}))\n    \n    choroplethmap = go.Figure(data = [data], layout=layout)\n    choroplethmap.update_layout(title=go.layout.Title(text=title, xref=\"paper\", x=0.5))    \n    \n    iplot(choroplethmap)","e72a05cb":"def plotly_true_and_predictions(model) :\n\n    str_title = type(model).__name__\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    fig = subplots.make_subplots(rows=1, cols=2, print_grid=False, \n                          subplot_titles=[\"Happiness Score, true and predicted\", \n                                          \"Differences Histogram\"])\n\n    trace_1 = go.Scatter(x = y_test, y = y_pred, name=\"\", \n                         mode = 'markers',  marker = dict(size = 10),\n                         text = y_test.index)\n    \n    trace_2 = go.Histogram(x=y_test-y_pred, name=\"Diff\", nbinsx = 25)\n\n    fig.append_trace(trace_1, 1, 1)\n    fig.append_trace(trace_2, 1, 2)\n\n    fig['layout'].update(height=450, width=800, title=str_title, showlegend=False)\n    fig['layout']['xaxis1'].update(title='y_true', range=[0, 9])\n    fig['layout']['yaxis1'].update(title='y_pred', range=[0, 9])\n    fig['layout']['xaxis2'].update(title='y_true - y_pred', range=[-2, 2])\n    fig['layout']['yaxis2'].update(title='count', range=[0, 5])    \n    \n    fig.update_layout(title=go.layout.Title(text=str_title, xref=\"paper\", x=0.5))\n    \n    iplot(fig)","0277e6fb":"df_happy_2015.head(15)","d60e2f33":"df_happy_2016.head(15)","e14c9be4":"df_happy_2017.head(15)","2368c6d4":"df_happy_2017.rename(columns={'Happiness.Rank': 'Happiness Rank',\n                              'Happiness.Score': 'Happiness Score',\n                              'Economy..GDP.per.Capita': 'Economy (GDP per Capita)'\n                             }, inplace=True)","c7248cb7":"df_65indexes.head(150)","c16e8bd0":"df_65indexes.sort_values(by=['Carbon dioxide emissions per capita 2011 Tones'], ascending=False).head(15)","1c942c59":"country_and_rank = ['Country','Happiness Rank']","ecc90090":"df_countries_rank_year =  \\\n    df_happy_2015[country_and_rank].  \\\n    merge(df_happy_2016[country_and_rank], on='Country').  \\\n    merge(df_happy_2017[country_and_rank], on='Country')","69eeb9c2":"df_countries_rank_year.set_index('Country', inplace=True)\ndf_countries_rank_year.rename(columns={'Happiness Rank_x': 'Happiness Rank_2015'}, inplace=True)\ndf_countries_rank_year.rename(columns={'Happiness Rank_y': 'Happiness Rank_2016'}, inplace=True)\ndf_countries_rank_year.rename(columns={'Happiness Rank': 'Happiness Rank_2017'}, inplace=True)\ndf_countries_rank_year['Change_2015_to_2017'] = df_countries_rank_year['Happiness Rank_2015'] - df_countries_rank_year['Happiness Rank_2017']\ndf_countries_rank_year.head(25)","27dfa19f":"df_countries_rank_year.nlargest(10, 'Change_2015_to_2017', keep='last')","c4db8e27":"df_countries_rank_year.nsmallest(10, 'Change_2015_to_2017', keep='last')","66ab5a35":"f,ax = plt.subplots(figsize=(10, 8))\n#sns.set(font_scale=1.2)\nsns.heatmap(df_happy_2015.corr(), annot=True, annot_kws={\"size\": 12}, cmap=\"rainbow\", \n            linewidths=1.5, linecolor=\"white\", fmt= '.2f',ax=ax)\nplt.show()","3681d380":"cols = df_happy_2015.columns[3:].tolist()\nprint(cols)","b557d667":"for col in cols :\n    fig, ax = plt.subplots(figsize=(8, 5.5))\n    g = sns.boxplot(x=col, y=\"Region\", data=df_happy_2015)\n    plt.show()","fad851fc":"fig, ax = plt.subplots(figsize=(8, 6.5))\ng = sns.scatterplot('Economy (GDP per Capita)', 'Happiness Score',  hue= 'Region', data=df_happy_2015);\ng.legend(loc='upper left', bbox_to_anchor=(1.05, 1.01), ncol=1);\n#plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.);","5cf78a61":"fig, ax = plt.subplots(figsize=(8, 6.5))\ng = sns.scatterplot('Health (Life Expectancy)' ,'Happiness Score',  hue= 'Region', data=df_happy_2015);\ng.legend(loc='upper left', bbox_to_anchor=(1.05, 1.01), ncol=1);","85300aa7":"df=df_happy_2015\n\ndf['Region_code'] = pd.factorize(df['Region'], sort=True)[0] + 1 \n\ndata = [ { 'x': df['Health (Life Expectancy)'],\n           'y': df['Happiness Score'],\n           'mode': 'markers',\n           'marker': { 'color': df['Region_code'] ,\n                       'colorscale' : 'Viridis' ,\n                       'size': df['Economy (GDP per Capita)']*20,\n                       'showscale': True\n                      },\n           \"text\" :  df['Country']    \n       } ]\n\ntitle = 'Happiness Score vs Health (Life Expectancy): Size=Economy, Color=Region'\n\nlayout = dict(title=title,\n              xaxis=dict(title='Health (Life Expectancy)'),\n              yaxis=dict(title='Happiness Score'),\n             )\nfig = go.Figure(data=data,layout=layout)\nfig.update_layout(title=go.layout.Title(text=title, xref=\"paper\", x=0.5))\n\niplot(fig)","2ab2820c":"regions = df['Region'].unique().tolist()\n\nfig = { 'data': [{ 'x': df[df['Region']==region]['Economy (GDP per Capita)'],\n                   'y': df[df['Region']==region]['Happiness Score'],    \n                   'name': region, \n                   'text': df['Country'][df['Region']==region], \n                   'mode': 'markers',\n                   'marker': {'size': df['Health (Life Expectancy)']*20 ,\n                             } \n                 } \n                   for region in regions       ],\n    \n        'layout': { 'xaxis': {'title': 'GDP per Capita'},\n                    'yaxis': {'title': \"Happiness Score\"}\n                  }\n       }\n\niplot(fig)","feb7cd06":"import plotly.figure_factory as ff\n\ndf_happy_2015['index'] = np.arange(1,len(df_happy_2015)+1)\ncols = ['Happiness Score', 'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n        'Freedom', 'Trust (Government Corruption)', 'Generosity']\n\nfig = ff.create_scatterplotmatrix (df_happy_2015[cols], diag='box', index='Happiness Score', colormap='Viridis',\n                                  colormap_type='cat', height=900, width=900)\n\n\nfig.update_layout(title=go.layout.Title(text=\"Scatterplot Matrix\", xref=\"paper\", x=0.5))\n\niplot(fig)","101f2dcb":"df = df_happy_2015\nplotly_choropleth_map(df['Country'], df['Happiness Score'], \n                      'Global Happiness 2015', 'Happiness Score', \n                      'natural earth', 'Viridis')","768d72ef":"df_countries_rank_year.head()","53e40db0":"df = df_countries_rank_year\nplotly_choropleth_map(df.index, df['Change_2015_to_2017'], \n                      'Happiness Rank Change 2015 to 2017', \n                      'Rank Change', \n                      'natural earth', 'Rainbow')","d662965c":"df = df_happy_2015\nplotly_choropleth_map(df['Country'], df['Economy (GDP per Capita)'], \n                      'Economy (GDP per Capita)', 'GDP per Capita', \n                      'equirectangular', 'Viridis')","2373bdbd":"plotly_scatter(df_happy_2015, 'Economy (GDP per Capita)', 'Happiness Score')","b820cb9e":"sns.jointplot(x='Economy (GDP per Capita)', y='Happiness Score',  data=df_happy_2015, kind='kde', height=6)\nplt.show()","9094a6a5":"sns.lmplot(x='Economy (GDP per Capita)', y='Happiness Score', \n           data=df_happy_2015, height=6, aspect=1.2)\nplt.show()","f0936ef7":"df = df_65indexes\nplotly_choropleth_map(df['Id'], df['Carbon dioxide emissions per capita 2011 Tones'], \n                      'Carbon dioxide emissions per capita 2011', \n                      'Tons', 'natural earth', 'Portland')","ff8726c4":"df_happy_2015.shape","2860357b":"df_65indexes.shape","5ff5b650":"df_happy_2015 = df_happy_2015.set_index('Country')\ndf_65indexes = df_65indexes.set_index('Id')\n\ndf_join = df_happy_2015.join(df_65indexes, how=\"inner\")","48f170f9":"df_join.shape","24262c75":"df_happy_2015.index.difference(df_65indexes.index)","8d09c77c":"df_65indexes.index.difference(df_happy_2015.index)","64e68921":"df_happy_2015.rename(index={\"Congo (Brazzaville)\":\"Republic of the Congo\"},inplace=True)\ndf_happy_2015.rename(index={\"Congo (Kinshasa)\":\"Democratic Republic of the Congo\"},inplace=True)\ndf_65indexes.rename(index={\"Hong Kong\\xa0\":\"Hong Kong\"},inplace=True)\ndf_65indexes.rename(index={\"C\u00f4te d'Ivoire\":\"Ivory Coast\"},inplace=True)\ndf_65indexes.rename(index={\"Palestine\":\"Palestinian Territories\"},inplace=True)","3134b333":"df_join = df_happy_2015.join(df_65indexes, how=\"inner\")\ndf_join.shape","20d4dcdd":"df_65indexes.index.difference(df_happy_2015.index)","833488b0":"df_join.head()","aaebf6dd":"sns.jointplot(x=['Human Development Index HDI-2014'],\n              y=['Happiness Score'],               \n              data=df_join, height=6)\nplt.show()","304fc988":"['Happiness Score']","ea0717f5":"plt.figure(figsize=(7,7))\nsns.scatterplot(x='Human Development Index HDI-2014', y='Happiness Score', data=df_join)\nsns.kdeplot(df_join['Human Development Index HDI-2014'], df_join['Happiness Score']);","396035ed":"col_names_65idx = df_join.columns.tolist()[13:]\ndf_corr = df_join[col_names_65idx].corrwith(df_join['Happiness Score']).abs().sort_values(ascending=False)\ndf_corr.head(20)","6d7e1e26":"df_corr_rank = df_join[col_names_65idx].corrwith(df_join['Happiness Rank']).abs().sort_values(ascending=False)\ndf_corr_rank.head(20)","61f03a0b":"df_join['Country'] = df_join.index","5c5064d7":"plotly_scatter(df_join, 'Gini coefficient 2005-2013', 'Happiness Score')","94305e57":"plotly_scatter(df_join, 'Gross domestic product GDP percapta', 'Happiness Score')","af63064e":"plotly_scatter(df_join, 'Gross national income GNI per capita - 2011  Dollars', 'Happiness Score')","cf7b4d15":"cols_65idx_sorted = df_corr.index.tolist()\nlen(cols_65idx_sorted)","dc114180":"print(cols_65idx_sorted[:10])","a6a9c331":"X_HPscore = df_join[cols_65idx_sorted].copy()\ny_HPscore = df_join[\"Happiness Score\"].copy()","9da99277":"X = X_HPscore.iloc[:,:10].copy()\ny = y_HPscore.copy()","87d4aad3":"y","46ffa1f8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)\nprint(len(X_train))\nprint(len(X_test))","7330fec8":"linear = LinearRegression()\nridge = Ridge()\nlasso = Lasso()","1e1beb51":"plotly_true_and_predictions(linear)","a667a5b9":"plotly_true_and_predictions(ridge)","bfc15bb7":"plotly_true_and_predictions(lasso)","3bd1e7a3":"list_models = [linear, ridge, lasso]\nname_models = [\"linear\", \"ridge\", \"lasso\"]\ndict_models = dict(zip(name_models, list_models))","57209b89":"MAE = mean_absolute_error \nMSE = mean_squared_error\nMXE = max_error\nr2  = r2_score","93d080af":"print(\"model\", \"\\t\", \"MAE\", \"\\t\",  \"RMSE\", \"\\t\", \"MXE\", \"\\t\", \"r2\")\nprint(\"-+\"*30)\n\nfor n, m in dict_models.items() :\n    print(  n,\"\\t\", \n           '{:05.3f}'.format(MAE(y_test, m.predict(X_test))), \"\\t\",\n           '{:05.3f}'.format(np.sqrt(MSE(y_test, m.predict(X_test)))), \"\\t\", \n           '{:05.3f}'.format(MXE(y_test, m.predict(X_test))), \"\\t\", \n           '{:05.3f}'.format(r2(y_test, m.predict(X_test))), \"\\t\",           \n         ) \n","3d3ef376":"nr_feats = list(range(1,31))\nscoring = ['neg_mean_absolute_error', 'neg_mean_squared_error', 'max_error']","0f26f05b":"scores_MAE_linear = []\nscores_MAE_ridge = []\nscores_MAE_lasso = []\nscores_RMSE_linear = []\nscores_RMSE_ridge = []\nscores_RMSE_lasso = []\nscores_MXE_linear = []\nscores_MXE_ridge = []\nscores_MXE_lasso = []\n\n\nfor i in nr_feats:\n    \n    X = X_HPscore.iloc[:,:i].copy()\n    y = y_HPscore.copy()\n    \n    linear = LinearRegression()\n    ridge = Ridge()\n    lasso = Lasso()\n       \n    scores_linear = cross_validate(linear, X, y, scoring=scoring, cv=5)\n    scores_ridge = cross_validate(ridge, X, y, scoring=scoring, cv=5)\n    scores_lasso = cross_validate(lasso, X, y, scoring=scoring, cv=5)\n    \n    scores_MAE_linear.append(-1* np.mean(scores_linear['test_neg_mean_absolute_error']))\n    scores_MAE_ridge.append(-1* np.mean(scores_ridge['test_neg_mean_absolute_error']))\n    scores_MAE_lasso.append(-1* np.mean(scores_lasso['test_neg_mean_absolute_error']))     \n                  \n    scores_RMSE_linear.append(np.mean(np.sqrt(-1 * scores_linear['test_neg_mean_squared_error'])))\n    scores_RMSE_ridge.append(np.mean(np.sqrt(-1 * scores_ridge['test_neg_mean_squared_error'])))\n    scores_RMSE_lasso.append(np.mean(np.sqrt(-1 * scores_lasso['test_neg_mean_squared_error'])))   \n    \n    scores_MXE_linear.append(np.mean(-1 * scores_linear['test_max_error']))\n    scores_MXE_ridge.append(np.mean(-1 * scores_ridge['test_max_error']))\n    scores_MXE_lasso.append(np.mean(-1 * scores_lasso['test_max_error']))     \n    ","2a47ed24":"fig, axs = plt.subplots(3, 1, figsize=(10,18))\n\n\nfig.suptitle(\"MAE, RMSE and MXE vs. number of features \", fontsize=18)\n\naxs[0].plot(nr_feats, scores_MAE_linear, label=\"linear\")\naxs[0].plot(nr_feats, scores_MAE_ridge, label=\"ridge\")\naxs[0].plot(nr_feats, scores_MAE_lasso, label=\"lasso\")\naxs[0].set_xlim(1,30)\naxs[0].set_ylim(0.7,0.9)\naxs[0].set_xlabel(\"Number of features\", fontsize=14)\naxs[0].set_ylabel(\"Mean absolute error\", fontsize=14)\naxs[0].legend();\n\naxs[1].plot(nr_feats, scores_RMSE_linear, label=\"linear\")\naxs[1].plot(nr_feats, scores_RMSE_ridge, label=\"ridge\")\naxs[1].plot(nr_feats, scores_RMSE_lasso, label=\"lasso\")\naxs[1].set_xlim(1,30)\naxs[1].set_ylim(0.8,1.0)\naxs[1].set_xlabel(\"Number of features\", fontsize=14)\naxs[1].set_ylabel(\"Root mean squared error\", fontsize=14)\naxs[1].legend();\n\naxs[2].plot(nr_feats, scores_MXE_linear, label=\"linear\")\naxs[2].plot(nr_feats, scores_MXE_ridge, label=\"ridge\")\naxs[2].plot(nr_feats, scores_MXE_lasso, label=\"lasso\")\naxs[2].set_xlim(1,30)\naxs[2].set_ylim(1.4,1.9)\naxs[2].set_xlabel(\"Number of features\", fontsize=14)\naxs[2].set_ylabel(\"Maxium absolute error\", fontsize=14)\naxs[2].legend();","926ad0d7":"zipped_scores =  list(zip(scores_MAE_linear, scores_RMSE_linear)) \ndf_scores = pd.DataFrame(zipped_scores, columns = ['scores_MAE_linear' , 'scores_RMSE_linear'], index = nr_feats) \ndf_scores['features'] = cols_65idx_sorted[:30]\ndf_scores['change_MAE']  = df_scores['scores_MAE_linear'].diff()\ndf_scores['change_RMSE'] = df_scores['scores_RMSE_linear'].diff()","bf1b380a":"df_scores","0d7cf037":"import sklearn","8d624367":"sorted(sklearn.metrics.SCORERS.keys())","411e0319":"### 10 biggest rises in Happiness rank","22438fff":"## Plotly choropleth maps","a95f9046":"**About the WHR dataset** (from Kaggle) :\n\nThe World Happiness Report is a landmark survey of the state of global happiness.  \n\nThe happiness scores and rankings use data from the Gallup World Poll. The scores are based on answers to the main life evaluation question asked in the poll. This question, known as the Cantril ladder, asks respondents to think of a ladder with the best possible life for them being a 10 and the worst possible life being a 0 and to rate their own current lives on that scale.\n\nThe scores are from nationally representative samples for the years 2013-2016 and use the Gallup weights to make the estimates representative. The columns following the happiness score estimate the extent to which each of six factors \u2013 economic production, social support, life expectancy, freedom, absence of corruption, and generosity \u2013 contribute to making life evaluations higher in each country than they are in Dystopia, a hypothetical country that has values equal to the world\u2019s lowest national averages for each of the six factors. They have no impact on the total score reported for each country, but they do explain why some countries rank higher than others.","80abe27b":"In Part 1 we found that there are many features in the 65 world indexes that have a high correlation coefficient to the Happiness Score and Rank.  \nIn the following we check how well these features predict the Happiness.","052887ce":"To predict the Happinees score we use the independent dataset 65 wolrd indexes  \nbecause we can not use data from the World Happiness Report.  \nfrom the dataset description on Kaggle:  \nWhat do the columns succeeding the Happiness Score(like Family, Generosity, etc.) describe?  \nThe following columns: GDP per Capita, Family, Life Expectancy, Freedom, Generosity, Trust Government Corruption describe the extent to which these factors contribute in evaluating the happiness in each country. The Dystopia Residual metric actually is the Dystopia Happiness Score(1.85) + the Residual value or the unexplained value for each country as stated in the previous answer.  \n**If you add all these factors up, you get the happiness score so it might be un-reliable to model them to predict Happiness Scores.**  \n\nSee also discussion: https:\/\/www.kaggle.com\/unsdsn\/world-happiness\/discussion\/35141  ","26c2d112":"## top 15 happiest countries for 2015, 2016 and 2017","5487c417":"Of the 65 indexes the largest correlation to Happiness is found for indexes from these groups:  \n* Economy \n* Developement\n* Health \n* Education","a7edb7d8":"### Countries that are in Happiness 2015 data but not in 65 indexes","4e1c611c":"Lets look in more detail how the errors for the predictions change when we include more or less features from 65 indexes.","59a91981":"Yes, now all 154 countries that are in both datasets are also in the joined dataframe.","c32851a9":"## 1.3 Exploring 65 world indexes","c897c33d":"### **Plotly**","adeb1c25":"## 2.1 First test: 10 features, 3 linear models","fc72aee9":"Many of the contries that occur in 65 indexes but not in Happiness 2015 are very small islands.  \nHowever there are also some large countries that are not in the Happiness 2015 data:\n\n'Belize', 'Brunei', 'Cape Verde', 'Cuba', 'Equatorial Guinea' 'Guinea-Bissau', 'Guyana' 'Maldives', 'Namibia', 'Papua New Guinea',","e90f69af":"## 2.2 Vary number of features, 3 linear models","22ebacdd":"### Cross Validation Scores, cv=5","492079e8":"**scatter**","96662993":"### Correlation matrix for 2015","272bd4d1":"158 countries in Happiness 2015 data","5f126240":"### Results: MAE, RMSE, MXE, r2","9f6b8d5b":"### Seaborn Boxplots for World Regions","1b8ff4a8":"### Correlation to Happiness Rank","5168f0a2":"### Correlation to Happiness Score","30fba99f":"# Part 1: Exploratory Data Analysis","f489f9b6":"### Part 0: Imports, reading data, useful functions  \n\n\n### Part 1: Exploratory Data Analysis\n\n1.1 first look at **world-happiness** and **65-world-indexes-gathered**  \n[top 15 happiest countries for 2015, 2016 and 2017](#top-15-happiest-countries-for-2015,-2016-and-2017)   \n[Match column names for all years](#Match-column-names-for-all-years)     \n[65 indexes](#65-indexes)   \n[Sort by largest CO2 emissions per capita](#Sort-by-largest-CO2-emissions-per-capita) \n\n1.2 Exploring happiness data: 2015, 2016, 2017  \n**Pandas**  \n[Change in top 25 Happiness ranks 2015-2017](#Change-in-top-25-Happiness-ranks-2015-2017)   \n[10 biggest rises in Happiness rank](#10-biggest-rises-in-Happiness-rank)     \n[10 biggest drops in Happiness rank](#10-biggest-drops-in-Happiness-rank)    \n**Seaborn**  \n[Seaborn Boxplots for World Regions](#Seaborn-Boxplots-for-World-Regions)  \n[Scatterplots for World Regions](#Scatterplots-for-World-Regions)  \n[Correlation matrix for 2015](#Correlation-matrix-for-2015)  \n**Plotly**  \n[Scatterplot matrix for 2015](#Scatterplot-matrix-for-2015)  \n**Choropleth maps**  \n[Happiness Score Map 2015](#Happiness-Score-Map-2015)    \n[Slider: Happiness Score Maps 2015-2017](#Slider:-Happiness-Score-Maps-2015-2017)  \n[Map: Happiness rank change 2015 to 2017](#Map:-Happiness-rank-change-2015-to-2017) \n\n1.3 Exploring 65 world indexes  \nCarbon dioxide emissions per capita 2011  \n\n1.4 Looking at both data sets together \n\n\n\n### Part 2: Modeling happiness score from 65 world indexes\n\n\npredict happiness score from 65 world indexes\n\n\n\n","4f5e3f0c":"<img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/51965cc6e4b0812cc818d772\/1497545812042-23CKR83KTAAUZHQ5QPRF\/ke17ZwdGBToddI8pDm48kO-nusLtcAdtf47f8bIHOgBZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PIRZ5NwDSCpbsZQ0RB-l3w14x_kfU1-FWN1-nxyaZPMPYKMshLAGzx4R3EDFOm1kBS\/thrive+finding+happiness?format=750w\" width=\"450\">","98f2f4d3":"### Map: Happiness rank change 2015 to 2017","8ecd46e3":"### Scatterplots for World Regions","b75c6a71":"### Useful functions ","a8c38a69":"### Match column names for all years","d54202b0":"Only 149 countries in both datasets, that is 9 countries less than there are in Happiness 2015 data.  \nLets check if some countries are misspelled or named differently,","260d9ee3":"The plots above show that more features not always lead to better predictions.  \nFor Linear and Ridge model, MAE and RMSE are smaller when using the top 5 features compared to the top 10 features.  \nOn the other hand, for Lasso the error rises very rarely and only little for every further feature included.  \nIn the next update we check if we can apply this info to remove those features that lead to larger prediction errors.","cf45b130":"There are some countries that are in the top 10 each year.  \nAnd many of the top happiest countries are in Western Europe.  \nScandinavians seem to be especially happy.  \nAlso we note some differences in the column names for 2017.  ","98013a62":"Column names for 2015 and 2016 are the same.  \nFor 2017 some names are different and there are a few additional columns.  \nFor convenience, we rename the columns for 2017 to match those of 2015 and 2016.","df57b034":"## **1.2 Exploring happiness data**","e14cddd6":"# Part 0: Imports, reading data, useful functions ","e08218e1":"### Countries that are in  65 indexes data but not in Happiness 2015","bc523950":"**The notebook follows this outline:**","615130b0":"### Scatterplot matrix for 2015","f897a4bf":"### 10 features with highest correlation","6897cc58":"### Happiness Score Map 2015","55026d5d":"### Sort by largest CO2 emissions per capita","c059347e":"### Plotly","dd406e04":"### 10 biggest drops in Happiness rank","40dae305":"## **1.1.1 - World Happiness**","344c52f2":"Seaborn","a957d6b6":"# Part 2: Modeling happiness score from 65 world indexes","c74e4ae1":"### Imports","25569b7a":"### inner join","11a6145b":"### Change in top 25 Happiness ranks 2015-2017","164ffa62":"### Results: Difference of predicted and true Happiness Scores","ab2d0462":"The default sorting of the 65 indexes dataframe is by the Human Development Index (HDI) of 2014.  \nIn the top places we find many countries that are also among the happiest countries.  \nSo the HDI might be a good proxy for the Happiness Score. We explore this further in Part 1.4 and Part 2.  \nLets now look at another sorting, for example the largest CO2 emissions per capita.","2d787e09":"## 1.4 Studying both data sets together ","c1a17799":"# World Happiness and 65 world indexes","f3d5126e":"Yes, the following countries are in both datasets, but have different names: \n\n| Happiness 2015 | 65 indexes | Note |\n| --- | --- | --- |\n| 'Congo (Brazzaville)' | 'Republic of the Congo' | see Wikipedia |\n| 'Congo (Kinshasa)' | 'Democratic Republic of the Congo' | see Wikipedia |\n| 'Hong Kong' | 'Hong Kong ' | typo: space after name |\n| 'Ivory Coast' | 'C\u00f4te d'Ivoire' | english and french name |\n| 'Palestinian Territories' | 'Palestine' | same country |","346312b9":"### train_test_split","47749e03":"Looks like the 10 features of 65 indexes with largest correlation to Happiness Score can indeed be used for predicting the Happiness of the countries: The true Happiness core for the 31 countries in the validation set agrees quite well with the predictions.  \nFor all linear models, the deviation to the true score is approximately in between -1 to +1\nand the differences of true and predicted values spread evenly around the 1:1 line.\nLets look in more detail at these error measures for the different models: \n* MAE = mean_absolute_error \n* MSE = mean_squared_error\n* MXE = max_error\n* r2  = r2_score","e288ff0b":"### 3 linear models","6c6ed1b1":"188 countries in 65 indexes data","2840f697":"We correct these names and then join the datasets again.  \nThat should enhance the joined dataset by 5 countries.","e5929158":"In this kernel we are exploring the **World Happiness Report** (WHR) dataset provided by Kaggle.\n\nIn the first part of the notebook we study the data with pandas tools and statistical plots of seaborn.  \nWe see what are the most happiest countries in the different years and which countries experienced the largest rises and drops in Happines rank. Also, we study how Happiness is related to parameters like Economy, Health, Education etc. and how these values vary for different regions of the world. Finally, some interactive choropleth maps with Plotly complete this EDA part.\n\nIn the second part we check how well the WHR Happiness score (and rank) can be predicted by independent data.  \nFor this, we use data from the **65 world indexes** dataset which is a collection of socioeconomic indicators for each country of the world,\n","27f36a61":"### Reading data  \nThere are 3 happiness data csv files for 2015, 2016 and 2017 and one data file for the 65 world indexes.  \nWe read the csv files into individual pandas dataframes.","d5947eab":"## **1.1.2 - 65 indexes**"}}