{"cell_type":{"abbe5572":"code","9e97bcc4":"code","0532103f":"code","93888cdc":"code","3a9700cf":"code","47de9a49":"code","93a02278":"code","64c76b4f":"code","36994938":"code","183acff2":"code","ffbbb5de":"code","50e2c515":"code","0ae062b7":"code","4eb8d10c":"code","9f8f38a3":"code","0ceb1f4b":"markdown","d30a1b2f":"markdown","b0946a12":"markdown","3b39d224":"markdown","bfbfbbde":"markdown","9cc99e57":"markdown","0f3043cc":"markdown","b36af424":"markdown","aca3e8b0":"markdown","7d63eaf4":"markdown","9ee5f317":"markdown","7f6bc8c3":"markdown","2a4fe7f5":"markdown","71743622":"markdown","3051fc96":"markdown","a07b44ca":"markdown","3e45f6f8":"markdown","cec0f0a8":"markdown","5279e8fe":"markdown","3bd65026":"markdown","479b3241":"markdown","e8e5e9f0":"markdown","27de33c7":"markdown","5565c082":"markdown","ede99d5f":"markdown","d340e151":"markdown","e36ab06b":"markdown","550c2c15":"markdown","00aacafa":"markdown"},"source":{"abbe5572":"import csv\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas as gpd\n\nfrom sklearn.linear_model import LinearRegression\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9e97bcc4":"# Opening the dataset\ndataframe = pd.read_csv(r\"\/kaggle\/input\/architectural-offices-in-finland\/Database.csv\")\n\n# Dropping duplicate office names (Offices that have more than one location)\ndataframe.drop_duplicates(subset= \"name\", inplace=True)\n\n# Converting financials to millions \ndataframe[\"turnover\"] = dataframe[\"turnover\"] \/ 1000\ndataframe[\"profit\"] = dataframe[\"profit\"] \/ 1000","0532103f":"dataframe.head()","93888cdc":"dataframe.info()","3a9700cf":"sns.heatmap(dataframe.corr(method=\"pearson\"), cmap=\"Blues\", annot=True)","47de9a49":"sns.pairplot(dataframe)","93a02278":"sns.pairplot(\n    dataframe,\n    x_vars=[\"turnover\", \"profit\", \"personnel\"],\n    y_vars=[\"turnover\", \"profit\", \"personnel\"])","64c76b4f":"def mapPlot(dataframe):\n    \"\"\"\n    \"\"\"\n    df = dataframe\n    \n    # Eliminating faulty coordinates\n    df = df[df.latitude > 60]\n    df = df[df.longitude > 21]\n    \n    # Base Map\n    districts = gpd.read_file(r\"\/kaggle\/input\/architectural-offices-in-finland\/FIN_adm3.shp\")\n    ax = districts.plot(color=\"#3791CB\", figsize=(8,16), zorder=1)\n    \n    # Labels\n    ax.set_title(\"Spatial Distribution of Architectural Offices in Finland\", fontsize= 15, pad= 20)\n    ax.set_xlabel(\"Longitude\")\n    ax.set_ylabel(\"Latitude\")\n    \n    # Geodataframe with dropped pins\n    fin = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.longitude, df.latitude), crs = \"EPSG:4326\")\n    fin.plot(ax=ax, color='#ffcd4f', markersize = 7, alpha = 1, zorder=2)\n    \n    # Legend & Grid\n    plt.grid(linestyle=\":\", color='grey')\n    \n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n    # Display\n    plt.show()\n    \nmapPlot(dataframe)","36994938":"def personnelHist(dataframe):\n    \"\"\"\n    \"\"\"\n    df = dataframe.copy()\n    \n    # Creating Figure & Axes\n    fig, ax = plt.subplots(figsize=(16,8))\n\n    # Plot\n    ax.hist(df[\"personnel\"], bins = range(80), color = \"#5DADE2\")\n    \n    # Mean & Median\n    ax.axvline(df.personnel.mean(), color='#239B56', linestyle='dashed', linewidth=1.5)\n    ax.axvline(df.personnel.median(), color='#9B59B6', linestyle='dashed', linewidth=1.5)\n    \n    # Labels\n    ax.set_title( \"Number of Employees in Finnish Architectural Offices\", fontsize= 20, pad= 40)\n    plt.xlabel(\"Number of Employees\", fontsize=20)\n    plt.ylabel(\"Number of Offices\", fontsize=20)\n    \n    in_ylim, max_ylim = plt.ylim()\n    ax.text(df.personnel.mean()*1.1, max_ylim*0.9, 'Mean: {:.0f} employees'.format(df.personnel.mean()), color = \"#239B56\",  fontsize= 15)\n    ax.text(df.personnel.median()*1.1, max_ylim*0.7, 'Median: {:.0f} employees'.format(df.personnel.median()), color = \"#9B59B6\", fontsize= 15)\n    \n    # Ticks\n    ax.set_xticks(range(0,90,5))\n    \n    # Legend & Grid\n    ax.grid(linestyle=\":\", color='#696969')\n    \n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n    \n    plt.show()\n    \npersonnelHist(dataframe)","183acff2":"def byTurnover(dataframe,top_n):\n    \"\"\"\n    Function plots the top_n offices by turnover from the given dataframe\n    \"\"\"\n    df = dataframe.copy()\n\n    # Filtering values\n    higest_turnover = df.nlargest(top_n, ['turnover'])\n    higest_turnover.reset_index( drop = True, inplace= True)\n\n    # Plot\n    ax = higest_turnover[\"turnover\"].plot(kind = \"barh\", figsize= (16,8), width = 0.8, legend = True, color = \"#5DADE2\" ) \n    ax = higest_turnover[\"profit\"].plot(kind = \"barh\", figsize= (16,8), width = 0.8, legend = True, color = \"#21618C\" ) \n\n    # Title\n    ax.set_title(\"Top {} Architectural Offices in Finland by Turnover\".format(top_n), fontsize= 15, pad= 40)\n    \n    # Axis & Labels \n    ax.set_xlabel(\"Turnover & Profit (Millions of Euros) \", fontsize=12)\n    ax.set_xlim([-2.5,23.5])\n    ax.invert_yaxis()\n    \n    # Ticks\n    ax.set_xticks([-1,-0.5,0,0.5,1,2,3,4,5,6,7,8,9,10,11,13,23])\n    \n    # Labels\n    ax.set_yticklabels(higest_turnover[\"name\"])\n    ax.tick_params(labeltop=True, labelright=False)\n    \n    # Legend & Grid\n    ax.legend([\"Turnover\", \"Profit\"])\n    ax.grid(linestyle=\":\", color='#696969')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n\n    plt.tight_layout()\n    plt.show()\n\nbyTurnover(dataframe,25)","ffbbb5de":"def byProfit(dataframe, top_n):\n    \"\"\"\n    Function plots the top_n offices by profit from the given dataframe\n    \"\"\"\n    df = dataframe.copy()\n    \n    # Filtering values\n    df = dataframe.nlargest(top_n, ['profit'])\n    df.reset_index(drop = True, inplace= True)\n\n    # Dropping unused columns\n    df.drop(columns=[\"turnover\", 'operative profit', 'change in turnover', \"personnel\"], inplace = True)\n\n    # Plot\n    ax = df.profit.plot(kind = \"barh\", figsize= (16,8), width = 0.8, legend = False, color = \"#5DADE2\" ) \n    # Inverting Y axis\n    ax.invert_yaxis()\n\n    # Labels\n    ax.set_title(\"Top {} Architectural Offices in Finland by Profit\".format(top_n), fontsize= 15, pad= 40)  \n    ax.set_xlabel(\"Profit (Millions of Euros) \", fontsize=12)\n    ax.set_yticklabels(df[\"name\"])\n\n    # Ticks \n    ax.set_xticks([x * 0.25 for x in range(0, 14)])\n    ax.tick_params(labeltop=True, labelright=False)\n    \n    # Legend & Grid\n    ax.grid(linestyle=\":\", color='#696969')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n\n    plt.show()\n\nbyProfit(dataframe, 20)","50e2c515":"def byPersonnel(dataframe, top_n):\n    \"\"\"\n    Function plots the top_n offices by personnel from the given dataframe\n    \"\"\"\n    df = dataframe.copy()\n    df = df.nlargest(top_n, ['personnel']).copy()\n\n    # Data\n    df.reset_index( drop = True, inplace= True)\n    df.drop(columns=[\"turnover\", 'operative profit', 'change in turnover', \"profit\"], inplace = True)\n\n    # Plot\n    ax = df.personnel.plot(kind = \"barh\", figsize= (16,8), width = 0.8, legend = False, color = \"#5DADE2\" ) \n\n    # Labels\n    ax.set_title(\"{} Biggest Architectural Offices in Finland\".format(top_n), fontsize= 15, pad= 40)\n    ax.set_xlabel(\"Number of Employees\", fontsize=12)\n    ax.invert_yaxis()\n    ax.set_xlim([30,170])\n    \n    # Ticks\n    ax.set_yticklabels(df[\"name\"])\n    ax.set_xticks([30, 40, 50, 60, 70, 80,  90, 170])\n    ax.tick_params(labeltop=True, labelright=False)\n\n    # Legend & Grid\n    ax.grid(linestyle=\":\", color='#696969')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n\n    plt.tight_layout()\n    plt.show()\n    \n\nbyPersonnel(dataframe, 20)","0ae062b7":"def boxes(dataframe):\n    \"\"\"\n    This function plots a box plot grouped by number of emploees and profit\n    \"\"\"\n    \n    df_source = dataframe.copy()\n\n    # Filtering Extreme Outliers\n    df = df_source[(df_source['profit'] > -0.3) & ( df_source['profit'] < 2)]\n\n    # Grouping offices by number of employees\n    bins = [0,5,10,20,30,40,50,60,np.inf]\n    labels = [\"<5\",\"5-10\",\"10-20\",\"20-30\",\"30-40\",\"40-50\",\"50-60\",\" >60\"]\n    cut = df.assign(size=pd.cut(df['personnel'],bins,labels=labels))\n    grouped_data = cut.groupby(\"size\")\n    d = dict(iter(cut.groupby(\"size\")))\n    data = []\n    for i in d.keys():\n        data.append(d[i][\"profit\"])\n\n    # Creating Figure\n    fig, ax = plt.subplots(figsize=(16,8))\n\n    # Medianprops for the plot\n    medianprops = dict(linestyle='-', linewidth=2.5, color='white')\n\n    # Boxplot\n    box = ax.boxplot(data, vert=False, patch_artist=True, widths=0.7, whis = 1.7, medianprops=medianprops)\n    plt.setp(box[\"boxes\"], facecolor=\"#5DADE2\")\n\n    # Labels\n    ax.set_title(\"Profit Range for Each Office Size\", fontsize= 15, pad= 40)\n    ax.set_ylabel(\"Number of Employees\", fontsize=20)\n    ax.set_xlabel(\"Profit (Millions of Euros)\", fontsize=20)\n    \n    # Ticks\n    ax.tick_params(labeltop=True, labelright=False)\n    ax.set_yticklabels(labels)\n\n    # Legend & Grid\n    ax.grid(linestyle=\":\", color='#696969')\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n\n    plt.show()\n\nboxes(dataframe)","4eb8d10c":"def linearReg(dataframe):\n    \"\"\"\n    \"\"\"\n    df = dataframe.copy()\n    \n    # Drop NaN\n    df.dropna(subset = [\"personnel\"], inplace=True)\n    df.dropna(subset = [\"profit\"], inplace=True)\n    \n    # Isolating outliers\n    df = df[df.profit > -0.5]\n    df = df[df.profit < 3]\n    df = df[df.personnel < 80]\n    \n    # Scatterplot Data\n    xvals = df[\"profit\"].astype(float)\n    yvals = df[\"personnel\"]\n\n    # Linear Regression\n    reg = LinearRegression().fit(np.vstack(xvals), yvals)\n    df[\"predict\"] = reg.predict(np.vstack(xvals))\n    \n    # Slope & Intercept\n    b = reg.intercept_\n    m = reg.coef_\n    print(\"y = {:.2f}x + {:.2f}\".format(m[0],b))\n    \n    # Creating Figure\n    fig, ax = plt.subplots(figsize=(16,8))\n\n    # Scatter Plot\n    ax.scatter(xvals, yvals, s = 12)\n    # Regression Line\n    ax.plot(xvals, df[\"predict\"])\n\n    # Label\n    ax.set_title(\"Profit vs Number of Employees\", fontsize= 20, pad= 20)\n    ax.set_xlabel(\"Profit (Millions of Euros)\", fontsize=12)\n    ax.set_ylabel(\"Number of Employees\", fontsize=12)\n\n    # Legend & Grid\n    ax.grid(linestyle=\":\", color='#696969')\n\n    # Limiting Graph Range\n    ax.set_ylim([-10,90])\n    ax.set_xlim([-0.25, 1.3])\n\n    # Watermark\n    ax.text(0.99, 0.01, '\u00a9 Github\/Geometrein',\n            verticalalignment='bottom', horizontalalignment='right',\n            transform=ax.transAxes,\n            color='grey',\n            fontsize=15,\n            alpha = 0.7)\n    \n    plt.show()\n    \nlinearReg(dataframe)","9f8f38a3":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ndef color(seed):\n    \"\"\"\n    Custum color coding by office postcode\n    \"\"\"\n    np.random.seed(seed)\n    color_code = [np.random.randint(0, 140),np.random.randint(100, 200),np.random.randint(200, 210)]\n    return '#%02X%02X%02X' % tuple(color_code)\n\ndef linReg(dataframe):\n    \"\"\"\n    \"\"\"\n    df = dataframe.copy()\n\n    df.dropna(subset = [\"personnel\", \"profit\", \"postcode\"], inplace=True)\n\n    # Isolating Outliers\n    df = df[ (df['profit'] < 3)  &  (df['profit'] > -0.2) ]\n    df = df[ (df[\"personnel\"] < 100) & (df[\"personnel\"] != 0)]\n    df[\"profit\"] = 1000000 * df[\"profit\"]\n    \n    # Color coding by postal number\n    df[\"postcode\"].astype(int)\n    df['color'] = df['postcode'].astype(int).apply(lambda x: color(x))\n    \n    # Data\n    xvals = df[\"profit\"].astype(float)\n    yvals = df[\"personnel\"]\n\n    # LinearRegression\n    reg = LinearRegression().fit(np.vstack(xvals), yvals)\n    df[\"predict\"] = reg.predict(np.vstack(xvals))\n    \n    # Figure\n    fig = go.Figure()\n    \n    # Trace\n    fig.add_trace(go.Scatter(name = \"Office\",\n                                    x=xvals,\n                                    y=yvals,\n                                    mode='markers',\n                                    marker_color=df['color'],\n                                    text=df['name'],\n                                    hovertemplate=\"Name: %{text}<br>Profit(\u20ac): %{x}<br>Emploees: %{y}\"\n                                    ))\n    # Trace\n    fig.add_trace(go.Scatter(name='Market trend', x=xvals, y=df[\"predict\"], mode='lines', hoverinfo = \"skip\", line=dict(color=\"#5DADE2\", width=2)))\n\n    # Layout\n    fig.update_layout(title='Profit vs Number of Employees', width=1000, height=700)\n\n    fig.show()\n\nlinReg(dataframe)","0ceb1f4b":"At what rate should offices in Finland grow? Intuitively we understand that more profit leads to bigger offices with more employees. How are these variables correlated in reality?\nIn order to answer this question, it\u2019s important to understand the causal relationships between these variables. Very often offices are paid more for bigger and more complex projects since big projects require more working hours to complete. Subsequently, the necessity to handle more complex projects might force the office to hire new employees. On the other hand, offices that have highly skilled workers or rely on automation do not necessarily need to scale at the same rate as other offices. With this in mind, let\u2019s take a look at the simple scatter plot below.","d30a1b2f":"In our case the values are:<br \/><br \/> e = 5%<br \/> p = 1814<br \/> q = 1-p<br \/><br \/> If we proceed with calculation the result will be 317. Note that the Cochran's Sample Size Formula gives the minimum number of samples necessary for the desired confidence level. In our case, the Minimum number is **317** while our sample size is **374**.<br \/><br \/> Note that this is the column that contained the least amount of information the Table. With other variables, we are way above the minimum threshold, therefore, we can assume that the sample size is large enough to represent the whole market.","b0946a12":"# Which offices have the Highest Profit?","3b39d224":"# Sample Size with Cochran\u2019s Formula","bfbfbbde":"#  Quick lookup","9cc99e57":"The table contains the following columns:\n* \"name\": Office Name\n* \"street\": Office street address\n* \"postcode\": Office postal code \n* \"city\": Office City\n* \"latitude\": Office latitude\n* \"longitude\":Office longitude\n* \"turnover\": [Turnover](https:\/\/www.investopedia.com\/terms\/t\/turnover.asp) during 2019\n* \"change in turnover\": Change in turnover from 2018\n* \"profit\": [Profit](http:\/\/www.investopedia.com\/terms\/p\/profit.asp) in 2019 financial year\n* \"operative profit\": [operative profit](https:\/\/www.investopedia.com\/terms\/o\/operating_profit.asp) in 2019 financial year\n* \"personnel\": Number of Emploees in 2019 financial year","0f3043cc":"In the 2019 Architectural market as a whole was worth approximately 356.784.000 \u20ac. The market share of these 25 firms together accounts for 45.47% of the whole market. This might be a little concerning. This leaves 54.53% of available capital for the remaining offices to share. Naturally, this results in fierce competition between smaller offices.","b36af424":"**Is 374 offices big enough sample to represent 1800 offices?** Luckily this is a fairly standard question in statistics and there are ways to verify the sample size.\nIn this case we will use Cochran's Sample Size Formula to answer this question.\n<br \/>\n<br \/>\n\n![Cochran's Sample Size Formula](https:\/\/www.smartsurvey.co.uk\/assets\/img\/graphics\/cochrans-formula.svg)","aca3e8b0":"Below you can find an interactive scatterplot where companies are colour coded based on their postal code.","7d63eaf4":"# Imports","9ee5f317":"# How big are architectural offices in Finland?","7f6bc8c3":"# How much profit offices make based on their size?","2a4fe7f5":"Let's glance at the underlying data and see what we got in our hands.","71743622":"The majority of the offices in Finland are definitely on a smaller side of the spectrum. 50% of offices have one or two employees. Naturally, when we have a positively skewed distribution the mean is not a reliable measure. The few outliers (offices with a very high number of employees) distort the mean value.","3051fc96":"# Which are the biggest Architectural offices in Finland?","a07b44ca":"# Exploratory Data Analysis","3e45f6f8":"Already at this stage, we can see that there something going on between **\"turnover\"**, **\"profit\"** and **\"personnel\"** variables.<br> With this in mind, we can take a little closer look at the data with Seaborn's pairplot.","cec0f0a8":"# Where is Finnish architecture produced?","5279e8fe":"# Which offices have the Highest Turnover?","3bd65026":"# Does the profitability of the office depend on the postcode?","479b3241":"# How Finnish Architectural Offices Grow?","e8e5e9f0":"With simple linear regression, we can see that the variables are indeed positively correlated with a correlation coefficient of r = 0.699 (r =1 would mean perfect positive correlation, r = 0 no correlation, and r = -1 strong negative correlation). Although the regression does not describe the bigger offices accurately (due to the big variance in profits mentioned earlier) the general trend can still be identified. r = 0.699 is a relatively strong association. Note that Linear Regression sacrifices accuracy for each individual data point in order to illustrate the overall correlation. Given the nature of the dataset, the model describes offices with low-profit better than the offices with a high profit. This is understandable since there are fewer samples for very profitable offices and a lot more samples for less profitable offices.","27de33c7":"#  Some Insightful Questions","5565c082":"The map shows the spatial distribution of architectural offices in Finland. Taking into account that Finland\u2019s urbanization level is approximately 85.45%, It is not surprising that the majority of offices are clustered around metropolitan areas. Uusimaa is clearly the most densely packed region. An interesting observation is that 1.12% of offices are located above the arctic cycle. Furthermore, there is an architectural office registered above the 69th Latitude very close to the Finnish border with Norway. **Finnish respect for personal space illustrated at its best.**","ede99d5f":"# Finnish Architectural Landscape: A Statistical Cross Section","d340e151":"Already here we can roughly see that all three variables are correlated to some extent. Causal links between these variables can also be reliably established. Profit is normally some portion of companies turnover therefore the bigger the turnover the bigger the profit can potentially be. Of course, this is not always the case. High operational costs can result in a company with a huge turnover but with no profit. This relationship can be already seen in the graph above.","e36ab06b":"We can see that the underlying table contains more geospatial information while the financial information for many of the offices is missing. Although this is not an ideal situation, this can hardly be avoided since often this information is harder to access for private companies. This kind of asymetry can result in biased study since the sample of **374** offices might not represent all **1814** well.","550c2c15":"In this Kernel you can find the underlying study behind this [Medium Article](https:\/\/towardsdatascience.com\/finnish-architectural-landscape-a-statistical-cross-section-bf68637b3eaa?sk=59ee0de17746bff5510120d421d991f5).\n## [Associated Github Repo](https:\/\/github.com\/Geometrein\/Fin-Ark)\n\n**What\u2019s the point of using financial data to analize architectural offices?**\n\nThe economy as a social science is essentially concerned with how people interact with things of value. Knowing how much people are willing to pay for a particular service quite often (though not always) can give an approximate hint about the value it provides to society. Additionally, Financial information is always meticulously collected and stored for management and taxation purposes. Since every office collects and stores financial data in a similar manner, we have a common metrics to compare otherwise very different organizations. With the use of some basic descriptive statistics, we can now analyze the information in the field and hopefully gain some useful insights.","00aacafa":"What can be seen from the graph above is that the offices with more than 40 employees seem to generate higher median profit but they are also subjected to higher volatility in profits (possibly due to high operational costs). 30\u201340 employees seems to be the sweet spot. For offices of this scale, the median income is higher than in 95% of the offices in Finland yet the range of profits is not as vast as with the larger offices."}}