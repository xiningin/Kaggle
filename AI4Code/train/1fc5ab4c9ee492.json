{"cell_type":{"7744dc65":"code","e6907510":"code","18505360":"code","4bcfbfd6":"code","a0e00139":"code","e4ba55ac":"code","473396d1":"code","922c293e":"code","70b50b9e":"code","95c27502":"code","8669381b":"code","c0e0b093":"code","01c85901":"code","b5da0cb9":"code","b2f975fa":"code","60ee3947":"code","d48d1a76":"code","31ac0dbb":"code","2d293fa8":"code","dd8f2854":"code","3ff29975":"code","985ba81f":"code","d9f29d29":"code","9a4b2a2d":"code","97f43eff":"code","dee4a2e3":"code","acb3e7ca":"code","d3d9945e":"code","e4769e3d":"code","41b07744":"code","a441b20a":"code","bd4da5de":"code","a935637b":"code","ee0e54fa":"code","673dbe5e":"code","4463b14c":"code","4fbae975":"code","2ef91110":"code","730f8d89":"code","1b747514":"code","637a4c76":"code","c0e8648c":"code","bc7987d6":"code","3258b488":"code","fb12665d":"code","9adb9033":"code","45829074":"code","33131acf":"code","b427c4fc":"code","ef965acd":"code","49ddd3b1":"code","6ab2da76":"code","fe6c419e":"code","4e660235":"code","1ed7ef68":"code","84779783":"code","11b8e585":"code","d811ed69":"code","1383f7b3":"code","96549e9c":"code","187220ca":"code","29e2a5e8":"code","7244550b":"code","9eaab47f":"code","ce3e2eb4":"code","7219b559":"markdown","6b1370b7":"markdown","26102768":"markdown","ce6d1c21":"markdown","223fc5a5":"markdown","10cfb580":"markdown","4be54219":"markdown","45d79922":"markdown","1cf18873":"markdown","f9cf2f3b":"markdown","f4d6e935":"markdown","384daaae":"markdown","3a22ff90":"markdown","c80cd4fc":"markdown","6e5a8d05":"markdown","83687ffd":"markdown","7c88a74b":"markdown","7b25fdc8":"markdown","88c265bd":"markdown","452fe0bf":"markdown","17c31f95":"markdown","c26c69a9":"markdown","1bb3c5ea":"markdown","8973058c":"markdown","553971b8":"markdown","3f2c9aa7":"markdown","65c8f90d":"markdown","17ccb53b":"markdown","5fc4b5b6":"markdown","38e31a7b":"markdown","3ecee96c":"markdown","b9a4ddd2":"markdown","f4bc5c4e":"markdown","6ec8d523":"markdown","846e9ef6":"markdown","c65d47ee":"markdown","5ba31d33":"markdown","4734c23d":"markdown","0e6c2eb8":"markdown","4a9de917":"markdown"},"source":{"7744dc65":"import matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn import preprocessing \nlabel_encoder = preprocessing.LabelEncoder()\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn.model_selection import train_test_split\nimport statsmodels\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression()\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,f1_score,cohen_kappa_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\nfrom sklearn.tree import DecisionTreeClassifier\ndt= DecisionTreeClassifier()\nfrom sklearn import tree\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nrf= RandomForestClassifier()\nimport imblearn\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\npd.options.display.max_columns = None\npd.options.display.max_rows = None\npd.options.display.float_format = '{:.6f}'.format\nfrom sklearn.model_selection import train_test_split\nimport statsmodels\nimport statsmodels.api as sm\nimport statsmodels.stats.api as sms\nfrom statsmodels.graphics.gofplots import qqplot\nfrom scipy.stats import probplot\nfrom statsmodels.stats.diagnostic import linear_rainbow\nfrom scipy import stats\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import LeaveOneOut\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor as vif\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfrom scipy.stats import boxcox\nfrom statsmodels.stats.diagnostic import het_goldfeldquandt\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.impute import KNNImputer\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6907510":"\nimport csv\n\nwith open(\"..\/input\/bank-marketing\/bank-marketing.csv\",\"r\")as file:\n    reader=csv.reader(file)\ndf=pd.read_csv(\"..\/input\/bank-marketing\/bank-marketing.csv\")\n\ndf.head()","18505360":"df.head()","4bcfbfd6":"df.shape","a0e00139":"df.info()","e4ba55ac":"df.describe()","473396d1":"df[df['salary']==0].head()","922c293e":"df.isnull().sum()","70b50b9e":"df.columns","95c27502":"df=df.drop(['age','marital-education','y'],axis=1)","8669381b":"df.shape","c0e0b093":"for i in df.columns:\n\n    print(i,' ',' ',df[i].nunique())\n","01c85901":"for i in df.columns:\n    if (df[i].nunique()) <= 10:\n        print('(',i,')','column','is Categorical')","b5da0cb9":"df.dtypes","b2f975fa":"df['age group'].dtypes","60ee3947":"df['age group']=df['age group'].astype('object')","d48d1a76":"df['age group'].dtypes","31ac0dbb":"df['response']=df['response'].astype('object')","2d293fa8":"num_col = df.select_dtypes(include=np.number)\ncat_col = df.select_dtypes(include=np.object)\ncat_col = cat_col.drop('response',1) # Dropping target variable\ncat_col.head()\n","dd8f2854":"num_col.head()","3ff29975":"for i in df.columns:\n    print(' ')\n    print(i,' ','\\n',df[i].unique())","985ba81f":"df['job'].value_counts()","d9f29d29":"for i in df.columns:\n    df[i]=df[i].replace('unknown',np.nan)","9a4b2a2d":"df.isnull().sum()","97f43eff":"print('Percentage of Null values :','\\n',(df.isnull().sum()\/len(df)*100).sort_values(ascending=False).head())","dee4a2e3":"df=df.drop('poutcome',axis=1) ","acb3e7ca":"df.columns","d3d9945e":"print('Percentage of Null values :','\\n',(df.isnull().sum()\/len(df)*100).sort_values(ascending=False).head())","e4769e3d":"df['contact']=df['contact'].fillna(df['contact'].mode()[0])","41b07744":"df['job']=df['job'].fillna(df['job'].mode()[0])","a441b20a":"df['education']=df['education'].fillna(df['education'].mode()[0])","bd4da5de":"df.isnull().sum()","a935637b":"df.head()","ee0e54fa":"for i in num_col:\n    sns.boxplot(num_col[i])\n    plt.show()","673dbe5e":"df1 = df.copy()","4463b14c":"df1['age group']=df1['age group'].astype('object')","4fbae975":"df1['response']=df1['response'].astype('object')","2ef91110":"df1_num = df1.select_dtypes(include=np.number)\ndf1_cat = df1.select_dtypes(include=np.object)\ndf1_cat = df1_cat.drop('response',1) # Dropping target variable\n","730f8d89":"df1_cat.head()","1b747514":"df1_num.head()","637a4c76":"df1['balance'] = np.sqrt(df1['balance'])","c0e8648c":"sns.boxplot(df1['balance'])","bc7987d6":"df1['duration'] = np.sqrt(df1['duration'])","3258b488":"sns.boxplot(df1['duration'])","fb12665d":"df1['campaign'] = np.log(df1['campaign'])","9adb9033":"sns.boxplot(df1['campaign'])","45829074":"df1['pdays'] = np.sqrt(df1['pdays'])","33131acf":"sns.boxplot(df1['pdays'])","b427c4fc":"df1['previous'] = np.sqrt(df1['previous'])","ef965acd":"sns.boxplot(df1['previous'])","49ddd3b1":"df.skew().sort_values(ascending=False)","6ab2da76":"df1.skew().sort_values(ascending=False)","fe6c419e":"for i in df1_num.columns:\n    sns.distplot(df1_num[i])\n    plt.show()","4e660235":"plt.figure(figsize=(10,10))\nsns.heatmap(df1.corr(),annot=True)\nplt.show()","1ed7ef68":"plt.figure(figsize=(18,12))\nsns.pairplot(df1)","84779783":"for i in df1_cat.columns:\n    sns.barplot(df1_cat[i],df1['response'])\n    plt.show()","11b8e585":"for i in df1.columns:                      \n    df1[i]= label_encoder.fit_transform(df1[i])","d811ed69":"df1.head()","1383f7b3":"((df1['response'].value_counts(normalize=True))*100).plot(kind='bar')","96549e9c":"x = df1.drop('response',1)\ny=df1['response']","187220ca":"smote = SMOTE(sampling_strategy=0.5,random_state=10)\nx_sm,y_sm = smote.fit_resample(x,y)","29e2a5e8":"df_sm = pd.DataFrame(x_sm,columns=x.columns)\ndf_sm['y']=y_sm","7244550b":"df_sm.head()","9eaab47f":"(df_sm['y'].value_counts(normalize=True)*100)","ce3e2eb4":"(df_sm['y'].value_counts(normalize=True)*100).plot(kind='bar')","7219b559":"#### No null Values in the Dataset","6b1370b7":"## Salary & day are multimodal distributions\n## Other numerical columns are Right skewed","26102768":"#### Treating Null values","ce6d1c21":"##### No Strong Correlation between variables","223fc5a5":"# Univariate Analysis","10cfb580":"## Info","4be54219":"### Split Categorical & numerical columns for further analysis","45d79922":"# Insignificant columns","1cf18873":"### Removed age, marital-education and y columns as they are insignificant for prediction","f9cf2f3b":"Age group:\n10 - 19 = 1\n20 - 29 = 2\n30 - 39 = 3\n40 - 49 = 4\n50 - 59 = 5\n60 - 69 = 6\n70 - 79 = 7\n80 - 89 = 8\n90 - 99 = 9","f4d6e935":"##  Class is imbalanced,  resampling techniques to be used to balance it ","384daaae":"### After replacing the values, we have Null values in 4 columns","3a22ff90":"### Where Salary = 0 , Job is \"Unknown\". May be house wives or people without a job ","c80cd4fc":"## Skewness after log transformation","6e5a8d05":"# Bivariate Analysis","83687ffd":"### Columns (job, education, contact,poutcome) have some values as \"Unknown\" ","7c88a74b":"# Outliers","7b25fdc8":"### Dropping Poutcome column as it has (>80% NULL values)","88c265bd":"## Libraries","452fe0bf":"## Applying Log & SQRT transforms, skewness was brought down significantly, but outliers were not removed","17c31f95":"10 numerical columns and 13 Categorical columns are in the dataset","c26c69a9":"## Relationship between Variables","1bb3c5ea":"## Skewness before log transformation","8973058c":"## Identify any insignificant or incorrect values in the dataset","553971b8":"## No strong correlation between variables is observed","3f2c9aa7":"## Read Dataset","65c8f90d":"### Replacing all 'Unknown' as null","17ccb53b":"## Distribution","5fc4b5b6":"### Convert Target variable to Categorical column","38e31a7b":"# Class Imbalance","3ecee96c":"### Age_group to be converted to categorical","b9a4ddd2":"### There are 45211 rows and 23 columns in the dataset","f4bc5c4e":"# Outliers are observed from the boxplot","6ec8d523":"## Null Values","846e9ef6":"## All columns is continuous in nature and are important for analysis, removing outliers will lead to loss of data.  So, using Sqrt and  log transformation to treat outliers","c65d47ee":"# Inferences\n\nAge group - 9 most likely buy the product \n\nEligible People most likely buy the product\n\nMarried & Single People most likely buy the product\n\nSecondary & Tertiary Educated People most likely buy the product\n\nTargeted People most likely buy the product\n\nPeople with No Default in Credit most likely buy the product\n\nPeople with No Loans in Credit most likely buy the product\n\nPeople contacted using Cellular phone most likely buy the product","5ba31d33":"## Identify the right data type of the columns","4734c23d":"# Encoding","0e6c2eb8":"## Data Cleaning","4a9de917":"### There is no suspectable inference from the 5 point summary except Salary column"}}