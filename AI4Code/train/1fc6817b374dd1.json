{"cell_type":{"a8030d44":"code","da7bca09":"code","9a014575":"code","267a0036":"code","1194f2b7":"code","b97f4023":"markdown"},"source":{"a8030d44":"%%writefile agent.py\n\nimport random\n\ndef random_agent(observation, configuration):\n    return random.randrange(configuration.banditCount)","da7bca09":"%%writefile always_first_agent.py\n\ndef always_first(observation, configuration):\n    return 0","9a014575":"%%writefile sample_agent.py\n\nimport math\n\n# \u6700\u5f8c\u306b\u9078\u3093\u3060\u81ea\u52d5\u8ca9\u58f2\u6a5f(0~99\u306eint\u578b)\nlast_bandit = -1\ntotal_reward = 0\n\nsums_of_reward = None\nnumbers_of_selections = None\n\ndef ucb_agent(observation, configuration):    \n    global sums_of_reward, numbers_of_selections, last_bandit, total_reward\n    \n    # \u521d\u56de\u5b9f\u884c\u6642\n    if observation.step == 0:\n        # \u305d\u308c\u305e\u308c\u306e\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u3092\u9078\u629e\u3057\u305f\u56de\u6570\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3092\u7528\u610f\n        numbers_of_selections = [0] * configuration[\"banditCount\"]\n        # \u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u3054\u3068\u306b\u7372\u5f97\u3057\u305f\u5831\u916c\u3092\u8a18\u9332\u3001\u5408\u8a08\u3057\u3066\u3044\u304f\n        sums_of_reward = [0] * configuration[\"banditCount\"]\n\n    if last_bandit > -1:\n        # observation.reward\u304b\u30891step\u524d\u307e\u3067\u306etotalreward\u3092\u5f15\u304f\u3053\u3068\u306b\u3088\u3063\u3066\u76f4\u8fd1\u306estep\u306e\u5831\u916c\u3092\u7b97\u51fa\n        reward = observation.reward - total_reward\n        # \u9078\u3093\u3060\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u306e\u7dcf\u5831\u916c\u3092\u66f4\u65b0\n        sums_of_reward[last_bandit] += reward\n        total_reward += reward\n\n    bandit = 0\n    max_upper_bound = 0\n    for i in range(0, configuration.banditCount):\n        # \u3053\u306e\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u3092\u9078\u3093\u3060\u3053\u3068\u304c\u3042\u3063\u305f\u3089\n        if (numbers_of_selections[i] > 0):\n            # \u5bfe\u8c61\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u306e\u5e73\u5747\u5831\u916c\u3092\u7b97\u51fa\n            average_reward = sums_of_reward[i] \/ numbers_of_selections[i]\n            # UCB\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6570\u5f0f\n            delta_i = math.sqrt(2 * math.log(observation.step+1) \/ numbers_of_selections[i])\n            # UCB\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306e\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u306e\u9078\u629e\u57fa\u6e96\u3068\u306a\u308b\u5024\u3092\u7b97\u51fa\n            upper_bound = average_reward + delta_i\n        else:\n            upper_bound = 1e400\n        # upper_bound\u304c\u4e00\u756a\u5927\u304d\u3044\u30d0\u30f3\u30c7\u30a3\u30c3\u30c8\u3092\u9078\u3076\n        if upper_bound > max_upper_bound and last_bandit != i:\n            max_upper_bound = upper_bound\n            bandit = i\n            # \u6700\u5f8c\u306b\u9078\u3093\u3060bandit\u3092\u66f4\u65b0\n            last_bandit = bandit\n\n    numbers_of_selections[bandit] += 1\n\n    if bandit is None:\n        bandit = 0\n\n    return bandit","267a0036":"!pip install kaggle-environments --upgrade","1194f2b7":"from kaggle_environments import make\n\nenv = make(\"mab\", debug=True)\n\nenv.run([\"sample_agent.py\", \"agent.py\"])\nenv.render(mode=\"ipython\", width=800, height=800)","b97f4023":"\u3053\u306e\u30b3\u30f3\u30da\u306f100\u500b\u306e\u81ea\u52d5\u8ca9\u58f2\u6a5f\u304c\u3042\u308a\u3001\u305d\u306e\u3069\u308c\u304b\u3092\u9078\u3076\u3068\u3044\u3046\u30b9\u30c6\u30c3\u30d7\u30922000\u56de\u884c\u3063\u3066\u5f97\u3089\u308c\u305f\u5831\u916c\u306e\u5408\u8a08\u3092\u7af6\u3046\u3002  \n\u5404\u81ea\u52d5\u8ca9\u58f2\u6a5f\u306b\u306f\u72ec\u81ea\u306e\u78ba\u7387\u5206\u5e03\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u78ba\u7387\u5206\u5e03\u306b\u3057\u305f\u304c\u3063\u3066\u5831\u916c(0\u304b1)\u304c\u8fd4\u5374\u3055\u308c\u308b\u3002\n\n\u4e3b\u8981\u5909\u6570\u89e3\u8aac  \nbandit: \u81ea\u52d5\u8ca9\u58f2\u6a5f  \nreward: \u5831\u916c"}}