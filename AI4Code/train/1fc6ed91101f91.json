{"cell_type":{"7781a9c4":"code","4510e3cf":"code","de2bc84a":"code","90e3600f":"code","1b099873":"code","de62d23d":"code","ec4e5b05":"code","ebc6ab50":"code","e4986489":"code","3bbbc564":"code","28877f4d":"code","67ab072d":"code","58a76cae":"code","1ab33e14":"code","e5f19b49":"code","d98e3ff2":"code","92837352":"code","7765e99d":"code","9fc8c0f0":"code","b6ccbe6e":"code","17bab47d":"code","64bdfe2c":"code","cf5bebd0":"code","f20ceee5":"code","dca317ff":"code","363e628c":"code","e28d57cb":"code","37774258":"code","e163dce3":"code","cd1a537c":"markdown","f3c4a5fe":"markdown","ae2c6947":"markdown","49235557":"markdown","63e412f9":"markdown","856bf022":"markdown","99c65701":"markdown","9d00618b":"markdown","8624b362":"markdown","2cb38e07":"markdown","43db6848":"markdown"},"source":{"7781a9c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4510e3cf":"df = pd.read_csv('..\/input\/this-dataset-organizations-working-in-syria\/data.csv', encoding='ISO-8859-1')\npd.set_option('display.max_columns', None)\ndf.head()","de2bc84a":"df.isnull().sum()","90e3600f":"df[\"Dis Name\"].value_counts()","1b099873":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'red',\n                      colormap='PuBu_r',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"Dis Name\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Organizations in Syria\")\nplt.show()","de62d23d":"##Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\nfrom wordcloud import WordCloud\nfrom wordcloud import STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = 'purple',\n                      colormap='PuBu_r',\n                      height =2000,\n                      width = 2000\n                     ).generate(str(df[\"SubDis Name\"]))\nplt.rcParams['figure.figsize'] = (12,12)\nplt.axis(\"off\")\nplt.imshow(wordcloud)\nplt.title(\"Organizations in Syria\")\nplt.show()","ec4e5b05":"#https:\/\/stackoverflow.com\/questions\/38516481\/trying-to-remove-commas-and-dollars-signs-with-pandas-in-python\n\ndf['Cost'] = df['Cost'].astype(str).str.replace(',', '')\ndf['Cost'] = df['Cost'].astype(str).str.replace('$', '')\n#df['Price'] = df['Price'].astype(int)","ebc6ab50":"#Code by Benjamin Obi Tayo https:\/\/towardsdatascience.com\/how-to-remove-sign-from-data-table-baa37598982a\n\ndf['Coverage'] = list(map(lambda x: x[:-1], df['Coverage'].values))","e4986489":"import datetime","3bbbc564":"#Code by HarshGupta57 https:\/\/www.kaggle.com\/harshgupta57\/freediving-world-records-eda\/notebook\n\ndf[['day','month','year']] = df['Date'].apply(lambda x : pd.Series(str(x).split('-')))","28877f4d":"df.drop('Date', inplace=True, axis =1)","67ab072d":"df.head()","58a76cae":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in df.columns:\n    if df[c].dtype=='float16' or  df[c].dtype=='float32' or  df[c].dtype=='float64':\n        df[c].fillna(df[c].mean())\n\n#fill in -999 for categoricals\ndf = df.fillna(-999)\n# Label Encoding\nfor f in df.columns:\n    if df[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[f].values))\n        df[f] = lbl.transform(list(df[f].values))\n        \nprint('Labelling done.')","1ab33e14":"df.head()","e5f19b49":"len(df)","d98e3ff2":"#Code by ABHIJEET DESHMUKH  https:\/\/www.kaggle.com\/sarabhian\/free-time-learning\/notebook\n\nfrom sklearn.covariance import EllipticEnvelope\nX= df[\"Cost\"].values\nX=X.reshape((135,2)) # 270 = len(X)\/2 since X need to be 2D array\n# print(X)\nenvlp = EllipticEnvelope(contamination = 0.02 ,random_state=10)  # contamination == % of data outside ellipse\npred = envlp.fit_predict(X)\n# Extract outliers\noutlier_index = np.where(pred<=-1)\noutlier_values = X[outlier_index]\n\n# Plot the data\nsns.set(rc={'figure.figsize':(20,12)})\nsns.set_style('darkgrid')\nsns.scatterplot(x=X[:,0], y=X[:,1] )\nsns.scatterplot(x=outlier_values[:,0], \n                y=outlier_values[:,1], color='r')\nplt.title(\"Elliptic Envelope Outlier Detection\", fontsize=15, pad=15)\n\n#plt.savefig(\"Elliptic Envelope Detection.png\", dpi=80)\n\n# outlier count \nprint(\"total outliers\" ,outlier_values.size)","92837352":"from sklearn.covariance import EllipticEnvelope\nX= df[\"Target\"].values\nX=X.reshape((135,2)) # 270 = len(X)\/2 since X need to be 2D array\n# print(X)\nenvlp = EllipticEnvelope(contamination = 0.02 ,random_state=10)  # contamination == % of data outside ellipse\npred = envlp.fit_predict(X)\n# Extract outliers\noutlier_index = np.where(pred<=-1)\noutlier_values = X[outlier_index]\n\n# Plot the data\nsns.set(rc={'figure.figsize':(20,12)})\nsns.set_style('darkgrid')\nsns.scatterplot(x=X[:,0], y=X[:,1] )\nsns.scatterplot(x=outlier_values[:,0], \n                y=outlier_values[:,1], color='red')\nplt.title(\"Elliptic Envelope Outlier Detection\", fontsize=15, color= 'r', pad=15)\n\n#plt.savefig(\"Elliptic Envelope Detection.png\", dpi=80)\n\n# outlier count \nprint(\"total outliers\" ,outlier_values.size)","7765e99d":"import lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\n\nimport shap\nimport random","9fc8c0f0":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","b6ccbe6e":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","17bab47d":"#Avoid LGBM Error: Do not support special JSON characters in feature name\n\n#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","64bdfe2c":"X = dfmodel.drop(['Target','Cost'], axis = 1)\ny = dfmodel['Target']","cf5bebd0":"lgb_params = {\n                    'objective':'binary', \n                    'metric':'auc', \n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","f20ceee5":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","dca317ff":"lgb_params = {\n                    'objective':'binary', #binary\n                    'metric':'auc',  #auc\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","363e628c":"print(LGBM)","e28d57cb":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","37774258":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","e163dce3":"shap.summary_plot(shap_values[1], X)","cd1a537c":"#Target outliers","f3c4a5fe":"#Remove Percent Sign","ae2c6947":"#Split Date  (day\/month\/year)","49235557":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSH03OYW_ZsxvJyACOyP0HaLTxsVRwPpOvK2g&usqp=CAU)oxifamilibrary.openrepository.com","63e412f9":"#Acknowledgement\n\nrossinEndrew https:\/\/www.kaggle.com\/endrewrossin\/fast-lightgbm-model-to-detect-exam-result-w-shap\/notebook","856bf022":"![](https:\/\/weexist-sy.org\/wp-content\/uploads\/2018\/01\/WeExist-1024x529.png)weexist-sy.org","99c65701":"#Final Model","9d00618b":"#Checking if it worked.","8624b362":"#Really????\n\nWhen I chose Cost or Coverage, it returned Male. If I chose Male, it returned female. ","2cb38e07":"#Outliers with EllipticEnvelope","43db6848":"#Remove Dollar signs and commas\n\nCan only use str.acessor with string values\nIn that case you should apply astype(str) before the str.replace\n\nastype(str).str.replace('$', '')"}}