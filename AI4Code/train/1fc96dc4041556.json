{"cell_type":{"4770cf0f":"code","40b71c8e":"code","264504eb":"code","5a733e9f":"code","f88815fa":"code","214c8a7f":"code","5b37dfe6":"code","c32b4be4":"code","7147d411":"code","2b5018e0":"code","d6f6e284":"code","dfc41b4f":"code","a3669732":"code","4220b6d1":"code","bf26d6df":"code","9fee17a1":"code","cb3e2d23":"code","c7e92ab3":"code","a4233149":"code","52a55cbe":"code","6f1a86cb":"code","64fdf074":"code","6e14eaad":"markdown","ed1ddf17":"markdown","fb42c4ea":"markdown","2f65d4b2":"markdown","32e3aa0f":"markdown","d9086368":"markdown","5e7d00a4":"markdown"},"source":{"4770cf0f":"import networkx as nx\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom io import StringIO\nfrom IPython.display import SVG\nimport pydot # import pydot or you're not going to get anywhere my friend :D","40b71c8e":"dot_graph = pydot.Dot(graph_type='digraph')\n\nsd_node = pydot.Node('Structured\\nData\\n(ODBC, CSV, XLS)')\nsd_node.set_shape('box3d')\ndot_graph.add_node(sd_node)\n\nqsd_node = pydot.Node('Quasistructured\\nData\\n(PACS, RIS, JSON)')\nqsd_node.set_shape('box3d')\ndot_graph.add_node(qsd_node)\n\nsds_node = pydot.Node('Streaming\\nData Sources\\n(0MQ, Kafka, IoT)')\nsds_node.set_shape('box3d')\ndot_graph.add_node(sds_node)\n\nusd_node = pydot.Node('Unstructured\\nData\\n(Text, DOCX)')\nusd_node.set_shape('box3d')\ndot_graph.add_node(usd_node)\n\nnlp_node = pydot.Node('NLP Processing\\n(Word2Vec,\\nBag of Words,\\nParseNet)')\nnlp_node.set_shape('box')\ndot_graph.add_node(nlp_node)\n\nriq_node = pydot.Node('4Quant\\nAnalytics\\nEngine')\n#riq_node.set_shape('box3d')\ndot_graph.add_node(riq_node)\n\n\niedge = pydot.Edge(sd_node,riq_node)\niedge.set_label('Tables')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(qsd_node,riq_node)\niedge.set_label('Key-Value\\nStores')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(usd_node,nlp_node)\niedge.set_label('Keyword\\nExtraction')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(usd_node,nlp_node)\niedge.set_label('Category')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(nlp_node,riq_node)\niedge.set_label('Key-Value\\nStore')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(sds_node,riq_node)\niedge.set_label('Minibatch\\nDatasets')\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\n\nasp_node = pydot.Node('Apache Spark')\nasp_node.set_shape('square')\ndot_graph.add_node(asp_node)\n\nhadoop_node = pydot.Node('Distributed\\nHadoop\\nFilesystem (HDFS)')\nhadoop_node.set_shape('box3d')\ndot_graph.add_node(hadoop_node)\n\niedge = pydot.Edge(riq_node,asp_node)\niedge.set_label('Redundant\\nDistributed\\nDatasets')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(riq_node,asp_node)\niedge.set_label('Streaming\\nReduntant\\nDistributed\\nDatasets')\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(asp_node,hadoop_node)\niedge.set_label('Parquet\\nDistributed\\nColumn\\nStore')\niedge.set_penwidth(3)\ndot_graph.add_edge(iedge)\n\nodbc_node = pydot.Node('OBDC-Hive\\nData View')\nodbc_node.set_shape('box3d')\ndot_graph.add_node(odbc_node)\n\nxls_node = pydot.Node('Excel Workbook\\nSummaries')\nxls_node.set_shape('box')\ndot_graph.add_node(xls_node)\n\niedge = pydot.Edge(asp_node,odbc_node)\niedge.set_penwidth(2)\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(odbc_node,xls_node)\niedge.set_penwidth(2)\ndot_graph.add_edge(iedge)\n\nsap_node = pydot.Node('SAP HANA')\nsap_node.set_shape('none')\ndot_graph.add_node(sap_node)\n\niedge = pydot.Edge(odbc_node,sap_node)\niedge.set_penwidth(1)\ndot_graph.add_edge(iedge)\n\n\nibot_node = pydot.Node('Image\\nBot')\nibot_node.set_shape('triangle')\ndot_graph.add_node(ibot_node)\n\n\niedge = pydot.Edge(riq_node,ibot_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(ibot_node, riq_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\nibot_node = pydot.Node('Genomics\\nBot')\nibot_node.set_shape('triangle')\ndot_graph.add_node(ibot_node)\n\n\niedge = pydot.Edge(riq_node,ibot_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(ibot_node, riq_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\nibot_node = pydot.Node('DxRx\\nBot')\nibot_node.set_shape('triangle')\ndot_graph.add_node(ibot_node)\n\n\niedge = pydot.Edge(riq_node,ibot_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\niedge = pydot.Edge(ibot_node, riq_node)\niedge.set_penwidth(1)\niedge.set_style('dashed')\ndot_graph.add_edge(iedge)\n\n\ndot_graph.write_svg('big_data.svg')\ndot_graph.write_ps2('big_data.ps2')\nSVG('big_data.svg')","264504eb":"dot_graph = pydot.Dot(graph_type='digraph')\n\ndef make_node(name,shape):\n    cur_node = pydot.Node(name)\n    cur_node.set_shape(shape)\n    dot_graph.add_node(cur_node)\n    return cur_node\n\ndef make_link(a_node, b_node, label = None, width = 1, style='dashed'):\n    cur_edge = pydot.Edge(a_node,b_node)\n    cur_edge.set_penwidth(width)\n    cur_edge.set_style(style)\n    if label is not None: cur_edge.set_label(label)\n    dot_graph.add_edge(cur_edge)\n    return cur_edge\n\nsd_node = make_node('Patient\\n(Suspicious)','tab')\nct_node = make_node('Chest CT','box3d')\npet_node = make_node('PET\/CT','box3d')\ngp_node = make_node('General\\nPractioner','box')\nstaging_node = make_node('Staging\\n(Radiologist &\\nNuclear Medicine)','box')\nbrocho_node = make_node('Bronchoscopy \/\\n Mediastinoscopy\/ \\nPathology','box')\ndiag_node = make_node('Diagnosis','trapezium')\ntb_node = make_node('Tumor Board','component')\n\ntherapy_node = make_node('Therapy','cds')\n\n\nmake_link(gp_node,ct_node, 'Initial\\nAssessment', style='solid')\nmake_link(sd_node,gp_node,'Coughing\\nBlood', style='solid')\n\nmake_link(ct_node,gp_node,'Nothing\\nFound')\nmake_link(ct_node,pet_node,'Suspicious\\nFindings', style='solid')\n\nmake_link(pet_node,staging_node, style='solid')\n\nmake_link(staging_node, brocho_node, style='solid')\nmake_link(staging_node,gp_node,'Nothing\\nFound')\n\nmake_link(brocho_node, diag_node, style='solid')\nst_link = make_link(staging_node, tb_node, 'Prepare\\nReport', style='thick')\nst_link.set_color('blue')\nst_link.set_fontcolor('blue')\nst_link.set_fontsize(20)\nst_link.set_penwidth(2.0)\nst_link.set_style('dashed')\nmake_link(diag_node, tb_node, style='solid')\n\n\nmake_link(tb_node, therapy_node, 'Thorasic Surgery\\n(Surgery)', style='solid')\nmake_link(tb_node, therapy_node, 'Chemotherapy\\n(Oncology)', style='solid')\nmake_link(tb_node, therapy_node, 'Pallative\\nCare\\n(Oncology)')\n\nmake_link(therapy_node, ct_node, 'Follow-up', style='solid')\nmake_link(therapy_node, pet_node, 'Follow-up', style='solid')\n\ndot_graph.set_overlap(False)\ndot_graph.set_rankdir('UD')\ndot_graph.write_svg('nsclc.svg', prog = 'dot')\ndot_graph.write_ps2('nsclc.ps2')\nSVG('nsclc.svg')\n\n","5a733e9f":"dot_graph = pydot.Dot(graph_type='digraph')\n\ntb_node = make_node('Tumor Board','component')\ntherapy_node = make_node('Therapy','cds')\n\n\nsurg_node = make_node('Surgery','octagon')\nonco_node = make_node('Oncology','octagon')\n\nct_node = make_node('Chest CT','box3d')\npet_node = make_node('PET\/CT','box3d')\nstaging_node = make_node('Staging\\n(Radiologist &\\nNuclear Medicine)','box')\n\nmake_link(tb_node, therapy_node, 'Treatment', style='solid')\nmake_link(therapy_node, surg_node, 'Thorasic Surgery', style='solid')\nmake_link(therapy_node, onco_node, 'Chemotherapy', style='solid')\nmake_link(therapy_node, onco_node, 'Pallative\\nCare', style='solid')\nmake_link(onco_node, surg_node, 'Thorasic Surgery')\n\nmake_link(onco_node, ct_node, 'Follow-up', style = 'solid')\nmake_link(surg_node, ct_node, 'Follow-up', style = 'solid')\nmake_link(ct_node, pet_node, 'More Detailed\\nImages')\nmake_link(ct_node, staging_node, style = 'solid')\nmake_link(pet_node, staging_node, style = 'solid')\nmake_link(staging_node, tb_node, style = 'solid')\n\n\ndot_graph.write_svg('nsclc_therapy.svg')\ndot_graph.write_ps2('nsclc_therapy.ps2')\nSVG('nsclc_therapy.svg')","f88815fa":"dot_graph = pydot.Dot(graph_type='digraph')\n\ndef make_node(name,shape):\n    cur_node = pydot.Node(name)\n    cur_node.set_shape(shape)\n    dot_graph.add_node(cur_node)\n    return cur_node\n\ndef make_link(a_node, b_node, label = None, width = 1, style='dashed'):\n    cur_edge = pydot.Edge(a_node,b_node)\n    cur_edge.set_penwidth(width)\n    cur_edge.set_style(style)\n    if label is not None: cur_edge.set_label(label)\n    dot_graph.add_edge(cur_edge)\n    return cur_edge\n\nnm_data_node_xml = make_node('Nuclear Medicine Records (XML)','tab')\nnm_data_node_xls = make_node('Nuclear Medicine Records (XLS)','tab')\nnm_data_node_adb = make_node('Nuclear Medicine Records (AccessDB)','tab')\nnm_data_node = make_node('Aggregate NM Data','trapezium')\nmake_link(nm_data_node_xml, nm_data_node)\nmake_link(nm_data_node_xls, nm_data_node)\nmake_link(nm_data_node_adb, nm_data_node)\n\nonco_data_node = make_node('Oncology Records (XLS)','tab')\njoin_node = make_node('Merge Records','trapezium')\nmake_link(onco_data_node, join_node)\nmake_link(nm_data_node, join_node, 'Filter on disease\\ncase and type')\n\npacs_node = make_node('PACS Records','cds')\nsolr_node = make_node('PACSCrawler\/SOLR Database','box')\npacs_join_node = make_node('Match PET Scans','trapezium')\nmake_link(pacs_node, solr_node, 'pypacscrawler\\nmeta')\nmake_link(solr_node, pacs_join_node, '')\nmake_link(join_node, pacs_join_node, '')\n\nmaster_list_node = make_node('Save as full_list.json','tab')\nmake_link(pacs_join_node, master_list_node, 'Master Patient List')\n\nscreened_list_node = make_node('Screened List','box')\nmake_link(pacs_join_node, screened_list_node, 'LungStage Screener\\nGoogle Docs\\n(Gregor)\\n5min\/patient')\n\ndownload_node = make_node('Download for Annotation','box3d')\nmake_link(screened_list_node, download_node, '')\n\npet_download_node = make_node('Region Annotations','box3d')\nmake_link(download_node, pet_download_node, 'LungStage Annotation\\nSlicer-based Tool\\n(Alex and Thomas)\\n30min\/patient')\nmake_link(pet_download_node, screened_list_node, 'Filter already\\nannotated cases')\nregion_list_node = make_node('Region Data\\nlsa.npz\\nlsa.json','tab')\nmake_link(pet_download_node, region_list_node, 'Save Region Data')\n\nonco_list_node = make_node('Oncology List','box')\nmake_link(region_list_node, onco_list_node, '')\nmake_link(master_list_node, onco_list_node, '')\n\nfull_list_node = make_node('Full Patient Data','box')\nmake_link(onco_list_node, full_list_node, 'LungStage Oncology Tool\\nGoogle Docs\\n(Audrey)\\n30min\/patient')\n\nif False:\n    sd_node = make_node('Patient\\n(Suspicious)','tab')\n    ct_node = make_node('Chest CT','box3d')\n    pet_node = make_node('PET\/CT','box3d')\n    gp_node = make_node('General\\nPractioner','box')\n    staging_node = make_node('Staging\\n(Radiologist &\\nNuclear Medicine)','box')\n    brocho_node = make_node('Bronchoscopy \/\\n Mediastinoscopy\/ \\nPathology','box')\n    diag_node = make_node('Diagnosis','trapezium')\n    tb_node = make_node('Tumor Board','component')\n\n    therapy_node = make_node('Therapy','cds')\n\n\n    make_link(gp_node,ct_node, 'Initial\\nAssessment', style='solid')\n    make_link(sd_node,gp_node,'Coughing\\nBlood', style='solid')\n\n    make_link(ct_node,gp_node,'Nothing\\nFound')\n    make_link(ct_node,pet_node,'Suspicious\\nFindings', style='solid')\n\n    make_link(pet_node,staging_node, style='solid')\n\n    make_link(staging_node, brocho_node, style='solid')\n    make_link(staging_node,gp_node,'Nothing\\nFound')\n\n    make_link(brocho_node, diag_node, style='solid')\n    st_link = make_link(staging_node, tb_node, 'Prepare\\nReport', style='thick')\n    st_link.set_color('blue')\n    st_link.set_fontcolor('blue')\n    st_link.set_fontsize(20)\n    st_link.set_penwidth(2.0)\n    st_link.set_style('dashed')\n    make_link(diag_node, tb_node, style='solid')\n\n\n    make_link(tb_node, therapy_node, 'Thorasic Surgery\\n(Surgery)', style='solid')\n    make_link(tb_node, therapy_node, 'Chemotherapy\\n(Oncology)', style='solid')\n    make_link(tb_node, therapy_node, 'Pallative\\nCare\\n(Oncology)')\n\n    make_link(therapy_node, ct_node, 'Follow-up', style='solid')\n    make_link(therapy_node, pet_node, 'Follow-up', style='solid')\n\ndot_graph.set_overlap(False)\ndot_graph.set_rankdir('UD')\ndot_graph.write_svg('lungstage_data.svg', prog = 'dot')\nSVG('lungstage_data.svg')\n\n","214c8a7f":"dot_graph = pydot.Dot(graph_type='digraph')\n\ndef make_node(name,shape):\n    cur_node = pydot.Node(name)\n    cur_node.set_shape(shape)\n    dot_graph.add_node(cur_node)\n    return cur_node\n\ndef make_link(a_node, b_node, label = None, width = 1, style='dashed'):\n    cur_edge = pydot.Edge(a_node,b_node)\n    cur_edge.set_penwidth(width)\n    cur_edge.set_style(style)\n    if label is not None: cur_edge.set_label(label)\n    dot_graph.add_edge(cur_edge)\n    return cur_edge\n\nmri_node = make_node('mri', 'folder')\nmri_node.set_label('MRI Image Data\\n(T2, DWI, Scout)')\n\nsort_node = make_node('sort', 'record')\nsort_node.set_label('{{Neural Image Sorter}|{DWI|T1|T2|Other}}')\n\nmake_link(mri_node, sort_node, style = 'solid')\n\npos_node = make_node('position', 'record')\npos_node.set_label('{{Neural Position\\nEstimator}|{z}}')\n\nmake_link(mri_node, pos_node, style = 'solid')\n\nstage_node = make_node('t2_stage', 'record')\nstage_node.set_label('{{ Staging}|{T0|T1|T2|T3|T4}|{N0|N1|N2}|{M0|M1}}')\n\nmake_link(mri_node, stage_node, 'MRI Images', style = 'solid')\n\nmake_link(sort_node, stage_node, 'MRI Category')\nmake_link(pos_node, stage_node, 'Position\\nEstimate')\n\noutcome_node = make_node('outcome', 'record')\noutcome_node.set_label('{{Outcome}|{Recurrence|Remission}}')\n\nmake_link(mri_node, outcome_node, 'MRI Images', style = 'solid')\n\nmake_link(stage_node, outcome_node, 'Stage\\nEstimation')\nmake_link(sort_node, outcome_node)\nfor inode in [pos_node, sort_node]:\n    inode.set_style('filled')\n    inode.set_fillcolor('lightblue')\n\nfor inode in [stage_node, outcome_node]:\n    inode.set_style('filled')\n    inode.set_fillcolor('lightgreen')\n    \n\ndot_graph.set_rankdir('UD')\ndot_graph.write_svg('reading_t2.svg')\ndot_graph.write_png('reading_t2.png')\nSVG('reading_t2.svg')","5b37dfe6":"from glob import glob\nfrom skimage.io import imread\nfrom matplotlib import cm\nimport numpy as np\nimport os\nimport pandas as pd\nbase_dir = '\/Users\/mader\/Dropbox\/4Quant\/Projects\/TumorSegmentation\/paper_figures\/sample_pat_slices\/'\nraw_slices = glob(os.path.join(base_dir,'0*_*.tif'))\nseg_slices = glob(os.path.join(base_dir,'marked_*.png'))\ndot_graph = pydot.Dot(graph_type='digraph')\n\nimg_node = lambda im_path, label: \"\"\"<<TABLE border=\"0\" cellborder=\"0\"><TR><TD width=\"60\" height=\"50\" fixedsize=\"true\"><IMG SRC=\"{src}\" scale=\"true\"\/><\/TD><\/TR><tr><td><font point-size=\"12\">{label}<\/font><\/td><\/tr><\/TABLE>>\"\"\".format(src=os.path.abspath(im_path), label=label)\n\nt_slice = imread(raw_slices[0])\n\nfrom scipy.ndimage.morphology import binary_fill_holes\ni_slice = imread(seg_slices[0])\nbw_slice = binary_fill_holes(i_slice[:,:,0]>i_slice[:,:,1])\n\nfrom skimage.measure import label\nlabel_slice = label(bw_slice)\n\nfrom skimage.measure import regionprops\nslice_regions = regionprops(label_slice)\n\n\nflow_figs_dir = 'flowchart_figs'\ntry:\n    os.mkdir(flow_figs_dir)\nexcept:\n    print(flow_figs_dir,'already exists')\n    \ndef make_img(in_arr,out_name, **kwargs):\n    fig, ax1 = plt.subplots(1,1, figsize = (5,5))\n    ax1.imshow(in_arr, interpolation = 'none', **kwargs)\n    ax1.axis('off')\n    out_path = os.path.join(flow_figs_dir,out_name)\n    fig.savefig(out_path)\n    plt.close('all')\n    return out_path\n\n    \npacs = make_node('PACS', 'box')\npacs.set_label(img_node(make_img(t_slice,'start.png', cmap = 'bone'),'Patient Image'))\n\n\ndnn = make_node('DNN', 'box3d')\ndnn.set_label('Deep Segmentation \\n Neural Network')\n\nmake_link(pacs, dnn, 'Whitened\\nImages', style = 'solid')\n\nmake_link(dnn, dnn, 'Continuous\\nExpert\\nFeedback', style = 'dashed')\n\nseg_img = make_node('Seg_Img', 'box')\nseg_img.set_label(img_node(seg_slices[0],'Segmented Image'))\n\ntumor_seg_label = img_node(make_img(bw_slice,'seg.png', cmap = 'bone'),'Segmented Tumor')\n\nmake_link(dnn,seg_img, tumor_seg_label , style = 'solid')\n\nmake_link(pacs,seg_img, style='solid')\n\nft_img = make_node('Feature_img', 'folder')\nft_img.set_label(img_node(make_img(label_slice,'labels.png', cmap = cm.gist_earth),'Labeled Features'))\n\nmake_link(seg_img, ft_img,'Morphological\\nAnalysis',  style='solid')\n\nsumm_table = make_node('FinalStat', 'invhouse')\n\nfor clabel,c_reg in enumerate(slice_regions):\n    cur_feat = make_node('Feature_img_%d' % clabel, 'note')\n    cbox = c_reg.bbox\n    sub_reg_img = label_slice[cbox[0]:cbox[2],cbox[1]:cbox[3]]\n    cur_feat.set_label(img_node(make_img(sub_reg_img,'label_%d.png' % clabel, cmap = cm.gist_earth, vmin = 0, vmax = label_slice.max()),'Feature {}'.format(clabel)))\n    make_link(ft_img, cur_feat,  style='dashed')\n    \n    cur_feat_lab = make_node('Feature_table_%d' % clabel, 'record')\n    combo_dict = dict(zip(['Area', 'Perimeter', 'Circularity', 'Diameter', 'Solidity'],\n                 [c_reg.area, c_reg.perimeter, c_reg.eccentricity, c_reg.equivalent_diameter, c_reg.solidity]))\n    stat_label = pd.DataFrame([combo_dict]).to_html()\n    stat_label = '|'.join(['{ %s | %2.2f}' % (rname,rval) for rname, rval in combo_dict.iteritems()])\n    cur_feat_lab.set_label('<'+stat_label+'>')\n    make_link(cur_feat, cur_feat_lab, style='solid')\n    make_link(cur_feat_lab, summ_table, style='solid')\n\nsumm_table.set_label('Summary Statistics\\nDecision Tree')\n\n\ntumor_stage_node = make_node('tumor_stage', 'record')\nmeta_stage_node = make_node('meta_stage', 'record')\nnode_stage_node = make_node('node_stage', 'record')\n\nt_val = np.random.uniform(0,1, size=5)\nt_val *= 100.0\/t_val.sum()\nm_val = np.random.uniform(0,1, size=2)\nm_val *= 100.0\/m_val.sum()\nn_val = np.random.uniform(0,1, size=4)\nn_val *= 100.0\/n_val.sum()\ntumor_stage_node.set_label('|'.join( ['{T%d | %2.1f%%}' % (i, j) for i,j in enumerate(sorted(t_val))]))\n\nnode_stage_node.set_label('|'.join( ['{N%d | %2.1f%%}' % (i, j) for i,j in enumerate(n_val)]))\nmeta_stage_node.set_label('|'.join( ['{M%d | %2.1f%%}' % (i, j) for i,j in enumerate(m_val)]))\n\nfor i in range(len(t_val)): make_link(summ_table, tumor_stage_node, style='solid')\nfor i in range(len(n_val)): make_link(summ_table, node_stage_node, style='solid')\nfor i in range(len(m_val)): make_link(summ_table, meta_stage_node, style='solid')\n\n    \ndot_graph.set_rankdir('UD')\n#dot_graph.set_overlap(False)\ndot_graph.write_svg('cnn_morp_tree_proc.svg', prog = 'dot')\nSVG('cnn_morp_tree_proc.svg')","c32b4be4":"from skimage.measure import regionprops\nimport pandas as pd\n%matplotlib inline\nplt.imshow(label_slice,cmap = cm.gist_earth)\nall_reg = regionprops(label_slice)\nc_reg = all_reg[0]\nimport StringIO as sio\npd.DataFrame([dict(zip(['Area', 'Perimeter', 'Circularity', 'Diameter', 'Solidity'],\n                 [c_reg.area, c_reg.perimeter, c_reg.eccentricity, c_reg.equivalent_diameter, c_reg.solidity]))]).to_html()","7147d411":"[c_reg.area, c_reg.perimeter, c_reg.eccentricity, c_reg.equivalent_diameter, c_reg.solidity]","2b5018e0":"\nimport os.path\nimport re\nimport sys\nimport tarfile\nimport cv2\nimport skimage.transform\nimport scipy\nimport matplotlib.pyplot as plt\n\n# pylint: disable=unused-import,g-bad-import-order\nimport tensorflow.python.platform\nfrom six.moves import urllib\nimport numpy as np\nimport tensorflow as tf\nfrom PIL import Image\nfrom glob import glob\n# pylint: enable=unused-import,g-bad-import-order\n\nfrom tensorflow.python.platform import gfile\n\nTF_LOGGING = False\n# pylint: disable=line-too-long\nDATA_URL = 'http:\/\/download.tensorflow.org\/models\/image\/imagenet\/inception-2015-12-05.tgz'\n\ndef maybe_download_and_extract(dest_directory):\n  \"\"\"Download and extract model tar file.\"\"\"\n  if not os.path.exists(dest_directory):\n    os.makedirs(dest_directory)\n  filename = DATA_URL.split('\/')[-1]\n  filepath = os.path.join(dest_directory, filename)\n  if not os.path.exists(filepath):\n    def _progress(count, block_size, total_size):\n      sys.stdout.write('\\r>> Downloading %s %.1f%%' % (\n          filename, float(count * block_size) \/ float(total_size) * 100.0))\n      sys.stdout.flush()\n    filepath, _ = urllib.request.urlretrieve(DATA_URL, filepath,\n                                             reporthook=_progress)\n    print()\n    statinfo = os.stat(filepath)\n    print('Succesfully downloaded', filename, statinfo.st_size, 'bytes.')\n  tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n\nmy_model_dir = '\/Users\/mader\/Desktop\/trained-imagenet'\nmaybe_download_and_extract(my_model_dir)\nwith gfile.FastGFile(os.path.join(\n  my_model_dir, 'classify_image_graph_def.pb'), 'r') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    resized_arr = np.zeros((299,299,3))\n    sub_img = np.expand_dims(resized_arr.astype(np.float32),0)\/255.0 # so the values are small\n    print(sub_img.shape)\n    tf_new_image = tf.Variable(sub_img)\n    tf_shift_image = tf.clip_by_value(255*tf_new_image,0,255) - 128 # shift the value to be mean centered and clip the input\n    _ = tf.import_graph_def(graph_def, name='', input_map={\"Sub:0\": tf_shift_image})\n    c_graph = graph_def\n","d6f6e284":"try:\n    sess.close()\nexcept:\n    print(\"No session to close\")\nsess = tf.InteractiveSession()\ntf.initialize_all_variables().run(session = sess)\nsoftmax_tensor = sess.graph.get_tensor_by_name('softmax:0')","dfc41b4f":"color_words = [] #[\"weights\",\"biases\"]\ndef add_inputs(graph,last_tens, max_depth = 3):\n    if max_depth == 0: return graph\n    dst_node = last_tens.name\n    for c_input in last_tens.op.inputs:\n        src_node = c_input.name\n        edge_args = {}\n        print(dst_node)\n        for cw in color_words: \n            if (src_node.find(cw)>=0): \n                edge_args['color']=\"#ff0000\"\n        #if (dst_node==\"softmax:0\"): \n        #    edge_args['color']=\"#00ff00\" \n        edge = pydot.Edge(src_node, dst_node, **edge_args)\n        # and we obviosuly need to add the edge to our graph\n        graph.add_edge(edge)\n        graph = add_inputs(graph,c_input, max_depth-1)\n    return graph\n        ","a3669732":"dot_graph = pydot.Dot(graph_type='digraph')\ndot_graph = add_inputs(dot_graph,softmax_tensor, max_depth = 5)\ndot_graph.write_svg('inception_net.svg')\nSVG('inception_net.svg')","4220b6d1":"pe = pydot.Edge(\"Input\\nImage\",\"mixed_10\/join:0\",color=\"#ff0000\", style=\"dashed\")\ndot_graph.add_edge(pe)\npe = pydot.Edge(\"softmax:0\",\"softmax_cross_entropy_with_logits\", color=\"#00ff00\")\ndot_graph.add_edge(pe)\npe = pydot.Edge(\"jellyfish_vector\",\"softmax_cross_entropy_with_logits\")\ndot_graph.add_edge(pe)\n                  \ndot_graph.write_svg('inception_net.svg')\nSVG('inception_net.svg')","bf26d6df":"tandy = \"bob\"\ntandy.find('')","9fee17a1":"import cPickle\nwith open('\/Users\/mader\/Dropbox\/4Quant\/Projects\/TumorSegmentation\/tensorflow\/cout_graph.pkl','r') as r:\n    gph = cPickle.load(r)","cb3e2d23":"gph = pydot.graph_from_dot_data(\"\"\"\ndigraph G {\nrankdir=TB;\nconcentrate=True;\nnode [shape=record];\nlayer0 [color=red, label=\" (Activation)\"];\nlayer1 [color=blue, label=\" (Dense)\"];\nlayer1 -> layer0;\nlayer2 [label=\" (Dropout)\"];\nlayer2 -> layer1;\nlayer3 [color=red, label=\" (Activation)\"];\nlayer3 -> layer2;\nlayer4 [color=blue, label=\" (Dense)\"];\nlayer4 -> layer3;\nlayer5 [label=\" (Flatten)\"];\nlayer5 -> layer4;\nlayer6 [label=\" (Dropout)\"];\nlayer6 -> layer5;\nlayer7 [color=green, label=\" (MaxPooling2D)\"];\nlayer7 -> layer6;\nlayer8 [color=red, label=\" (Activation)\"];\nlayer8 -> layer7;\nlayer9 [color=green, label=\" (Convolution2D)\"];\nlayer9 -> layer8;\nlayer10 [color=red, label=\" (Activation)\"];\nlayer10 -> layer9;\nlayer11 [color=green, label=\" (Convolution2D)\"];\nlayer11 -> layer10;\nlayer12 [label=\" (Dropout)\"];\nlayer12 -> layer11;\nlayer13 [color=green, label=\" (MaxPooling2D)\"];\nlayer13 -> layer12;\nlayer14 [color=red, label=\" (Activation)\"];\nlayer14 -> layer13;\nlayer15 [color=green, label=\" (Convolution2D)\"];\nlayer15 -> layer14;\nlayer16 [color=red, label=\" (Activation)\"];\nlayer16 -> layer15;\nlayer17 [color=green, label=\" (Convolution2D)\"];\nlayer17 -> layer16;\nlayer18 [label=\" (Dropout)\"];\nlayer18 -> layer17;\nlayer19 [color=green, label=\" (MaxPooling2D)\"];\nlayer19 -> layer18;\nlayer20 [color=red, label=\" (Activation)\"];\nlayer20 -> layer19;\nlayer21 [color=green, label=\" (Convolution2D)\"];\nlayer21 -> layer20;\nlayer22 [color=red, label=\" (Activation)\"];\nlayer22 -> layer21;\nlayer23 [color=green, label=\" (Convolution2D)\"];\nlayer23 -> layer22;\nlayer24 [color=red, label=\" (Activation)\"];\nlayer24 -> layer23;\n}\n\"\"\")","c7e92ab3":"gph.write_svg('test_net.svg',prog = 'neato')\nSVG('test_net.svg')","a4233149":"?gph.write_svg","52a55cbe":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.regularizers import l1\nfrom keras.layers import LSTM, ActivityRegularization\nfrom keras.layers import merge, Input\nfrom keras.models import Sequential, Graph, Model\n\ndef simple_ltsm_model(maxlen,vocab_size,out_size):\n    # build the model: 2 stacked LSTM\n    print('Build model...')\n    model = Sequential()\n    model.add(LSTM(512, return_sequences=False, input_shape=(maxlen, vocab_size)))\n    #model.add(Dropout(0.25))\n    #model.add(LSTM(1024, return_sequences=False))\n    #model.add(Dropout(0.25))\n    #model.add(Dense(out_size,  W_regularizer = l1(0.01)))\n    model.add(Activation('sigmoid'))\n    return model\n\ndef medium_ltsm_model(maxlen,vocab_size,out_size, net_depth = 512):\n    seq_input = Input((maxlen, vocab_size),name='Sequence of Words')\n    ltsm_lay = LSTM(net_depth, return_sequences=False, name='Read Word by Word')(seq_input)\n    \n    full_input = Input((vocab_size,),name = 'Full Sentence Vector')\n    prep_full = Dense(net_depth, activation = 'relu', name='Preprocess Sentence Vector')(full_input)\n    \n    merge_lay = merge([prep_full,ltsm_lay], mode='concat', concat_axis=1, name='Combine')\n    do_lay = Dropout(0.25, name='Randomly Remove Elements')(merge_lay)\n    mix_lay = Dense(out_size,  activation = 'sigmoid', name='Mashup All Components')(do_lay)\n    model = Model(input=[seq_input,full_input], output=mix_lay)\n    return model","6f1a86cb":"model = medium_ltsm_model(50,100,100,100)","64fdf074":"from keras.utils.visualize_util import model_to_dot\nfrom IPython.display import SVG\n# Define model\nvmod = model_to_dot(model)\nvmod.write_svg('se_ltsm.svg')\nSVG('se_ltsm.svg')","6e14eaad":"# Data Flow LungStage","ed1ddf17":"# MRI Project","fb42c4ea":"## Overview\nVarious code to make flowcharts and diagrams using python since Visio and powerpoint are too annoying","2f65d4b2":"# Data Warehouse \/ Lake Strategy","32e3aa0f":"# Other Diagrams","d9086368":"# LungStage Workflow\n","5e7d00a4":"# Tensorflow Inception Example"}}