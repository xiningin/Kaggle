{"cell_type":{"6f2d1d81":"code","91df18f9":"code","388bcbff":"code","1dbc97d2":"code","dfc4eba6":"code","85465943":"code","4eafe28a":"code","06d061be":"code","68535d5f":"code","8e938ea6":"code","19255b86":"code","8a4727d9":"code","6f19a225":"code","a93cf3de":"code","b80049ce":"code","2dc77c7d":"code","14968e7f":"code","7ee91cd5":"code","75efbb3d":"code","7364fe12":"code","02daca65":"code","e63127ba":"markdown"},"source":{"6f2d1d81":"\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn.utils import shuffle \nimport tensorflow as tf\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D, BatchNormalization, Dropout, Dense, Flatten\nfrom tensorflow.keras.utils import to_categorical    ","91df18f9":"datagen = ImageDataGenerator(rescale=1.\/255,\n                            validation_split = 0.1,\n                                    horizontal_flip=False,\n                                    )\n","388bcbff":"train_image = datagen.flow_from_directory(\n        \"..\/input\/devnagri-script-classification\/Data\/Train\",\n        target_size=(64, 64),\n        batch_size=360,\n        subset='training',\n        shuffle = True,\n        class_mode='categorical')","1dbc97d2":"print(train_image)","dfc4eba6":"val_image = datagen.flow_from_directory(\n        \"..\/input\/devnagri-script-classification\/Data\/Train\",\n        target_size=(64, 64),\n        batch_size=360,\n        shuffle = True,\n        subset='validation',\n        class_mode='categorical')","85465943":"img, lab = next(iter(train_image))\nimg.shape, lab.shape","4eafe28a":"class_indices = train_image.class_indices\nlen(class_indices)","06d061be":"def create_model(activation='relu', optimizer='adam', kernel_initializer='he_normal'):\n    \n    model = Sequential()\n    \n    model.add(Conv2D(32, (3,3), padding='same', input_shape=(64, 64, 3), activation= activation, kernel_initializer=kernel_initializer))\n    model.add(MaxPooling2D(2,2))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(64, (3,3), padding='same', activation= activation, kernel_initializer=kernel_initializer))\n    model.add(MaxPooling2D(2,2))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n\n    model.add(Conv2D(128, (3,3), padding='same', activation= activation, kernel_initializer=kernel_initializer))\n    model.add(MaxPooling2D(2,2))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n\n    model.add(Flatten())\n\n    model.add(Dense(32, activation= activation, kernel_initializer=kernel_initializer, kernel_regularizer='l2'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n\n    model.add(Dense(46, activation='softmax'))\n\n    model.compile(optimizer=optimizer,\n                    loss='categorical_crossentropy',\n                    metrics=['accuracy'])\n    return model","68535d5f":"model = create_model()    ","8e938ea6":"model.summary() ","19255b86":"history = model.fit(train_image, epochs=10, verbose=1, validation_data = val_image, shuffle=True)","8a4727d9":"accuracy = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(accuracy, label = \"Training accuracy\")\nplt.plot(val_accuracy, label=\"Validation accuracy\")\nplt.legend()\nplt.title(\"Training vs validation accuracy\")\n\n\nplt.subplot(2,2,2)\nplt.plot(loss, label = \"Training loss\")\nplt.plot(val_loss, label=\"Validation loss\")\nplt.legend()\nplt.title(\"Training vs validation loss\")\n\nplt.show()","6f19a225":"model_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","a93cf3de":"test_image = tf.io.gfile.listdir('..\/input\/devnagri-script-classification\/Data\/Test')\nimages = []\nfor f in test_image:\n    img = tf.keras.preprocessing.image.load_img('..\/input\/devnagri-script-classification\/Data\/Test\/'+ f, color_mode = \"rgb\", target_size = (64,64))\n    img = tf.keras.preprocessing.image.img_to_array(img)\n    img = img\/255\n    images.append(img)","b80049ce":"\npred = model.predict(tf.convert_to_tensor(images))","2dc77c7d":"print(pred)","14968e7f":"pred = np.argmax(pred, axis = 1)","7ee91cd5":"pred.shape","75efbb3d":"class_indices = dict([(value, key) for key, value in class_indices.items()])\n\npred = list(map(class_indices.get, pred))","7364fe12":"submission1 = pd.DataFrame({'id': test_image,'category': pred})\nsubmission1.head()\n","02daca65":"submission1.to_csv('classifier2.csv',index= False)","e63127ba":"###### Loading the test image"}}