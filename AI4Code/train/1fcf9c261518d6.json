{"cell_type":{"95f31602":"code","4a69aa96":"code","030a3326":"code","a83522f1":"code","865e7c4a":"code","8aad140e":"code","79fd899d":"code","b6b5d3a2":"code","103d3a6a":"code","b9c527db":"code","f9a430d2":"code","6c60afb3":"code","0031927c":"code","ad124b00":"markdown","e5dccd5d":"markdown","420cf022":"markdown","f9b4d2d6":"markdown","a736152e":"markdown"},"source":{"95f31602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a69aa96":"import matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler","030a3326":"data_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nprint(data_train)\n\ndata_val = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_id = data_val['Id']","a83522f1":"#For training data.\n\n#Checking which features have what fraction of missing values\nfor i in range(0,data_train.shape[1]):\n    for j in range(0, data_train.shape[0]):\n        if(pd.isnull(data_train.iloc[j,i])):\n            print(data_train.columns[i])\n            print('Total missing values:',pd.isnull(data_train[data_train.columns[i]]).sum())\n            print('Fraction of missing values',(pd.isnull(data_train[data_train.columns[i]]).sum())\/data_train.shape[0])\n            print('\\n')\n            break\n\n#Imputing missing values appropriately.            \ndata_train['LotFrontage'].fillna(data_train['LotFrontage'].median(), inplace=True)\ndata_train['MasVnrType'].fillna(data_train['MasVnrType'].mode()[0], inplace=True)\ndata_train['MasVnrArea'].fillna(data_train['MasVnrArea'].median(), inplace=True)\ndata_train['BsmtQual'].fillna(data_train['BsmtQual'].mode()[0], inplace=True)\ndata_train['BsmtCond'].fillna(data_train['BsmtCond'].mode()[0], inplace=True)\ndata_train['BsmtExposure'].fillna(data_train['BsmtExposure'].mode()[0], inplace=True)\ndata_train['BsmtFinType1'].fillna(data_train['BsmtFinType1'].mode()[0], inplace=True)\ndata_train['BsmtFinType2'].fillna(data_train['BsmtFinType2'].mode()[0], inplace=True)\ndata_train['Electrical'].fillna(data_train['Electrical'].mode()[0], inplace=True)\ndata_train['GarageType'].fillna(data_train['GarageType'].mode()[0], inplace=True)\ndata_train['GarageFinish'].fillna(data_train['GarageFinish'].mode()[0], inplace=True)\ndata_train['GarageQual'].fillna(data_train['GarageQual'].mode()[0], inplace=True)\ndata_train['GarageCond'].fillna(data_train['GarageCond'].mode()[0], inplace=True)\n\nprint(data_train)    ","865e7c4a":"#For validation data.\nfor i in range(0,data_val.shape[1]):\n    for j in range(0, data_val.shape[0]):\n        if(pd.isnull(data_val.iloc[j,i])):\n            print(data_val.columns[i])\n            print('Total missing values:',pd.isnull(data_val[data_val.columns[i]]).sum())\n            print('Fraction of missing values',(pd.isnull(data_val[data_val.columns[i]]).sum())\/data_val.shape[0])\n            print('\\n')\n            break\n\ndata_val['MSZoning'].fillna(data_val['MSZoning'].mode()[0], inplace=True)\ndata_val['LotFrontage'].fillna(data_val['LotFrontage'].median(), inplace=True)\ndata_val['Utilities'].fillna(data_val['Utilities'].mode()[0], inplace=True)\ndata_val['Exterior1st'].fillna(data_val['Exterior1st'].mode()[0], inplace=True)\ndata_val['Exterior2nd'].fillna(data_val['Exterior2nd'].mode()[0], inplace=True)\ndata_val['MasVnrType'].fillna(data_val['MasVnrType'].mode()[0], inplace=True)\ndata_val['MasVnrArea'].fillna(data_val['MasVnrArea'].median(), inplace=True)\ndata_val['BsmtQual'].fillna(data_val['BsmtQual'].mode()[0], inplace=True)\ndata_val['BsmtCond'].fillna(data_val['BsmtCond'].mode()[0], inplace=True)\ndata_val['BsmtExposure'].fillna(data_val['BsmtExposure'].mode()[0], inplace=True)\ndata_val['BsmtFinType1'].fillna(data_val['BsmtFinType1'].mode()[0], inplace=True)\ndata_val['BsmtFinType2'].fillna(data_val['BsmtFinType2'].mode()[0], inplace=True)\ndata_val['BsmtFinSF1'].fillna(data_val['BsmtFinSF1'].median(), inplace=True)\ndata_val['BsmtFinSF2'].fillna(data_val['BsmtFinSF2'].median(), inplace=True)\ndata_val['BsmtUnfSF'].fillna(data_val['BsmtUnfSF'].median(), inplace=True)\ndata_val['TotalBsmtSF'].fillna(data_val['TotalBsmtSF'].median(), inplace=True)\ndata_val['BsmtFullBath'].fillna(data_val['BsmtFullBath'].median(), inplace=True)\ndata_val['BsmtHalfBath'].fillna(data_val['BsmtHalfBath'].median(), inplace=True)\ndata_val['KitchenQual'].fillna(data_val['KitchenQual'].mode()[0], inplace=True)\ndata_val['Functional'].fillna(data_val['Functional'].mode()[0], inplace=True)\ndata_val['GarageType'].fillna(data_val['GarageType'].mode()[0], inplace=True)\ndata_val['GarageFinish'].fillna(data_val['GarageFinish'].mode()[0], inplace=True)\ndata_val['GarageQual'].fillna(data_val['GarageQual'].mode()[0], inplace=True)\ndata_val['GarageCond'].fillna(data_val['GarageCond'].mode()[0], inplace=True)\ndata_val['GarageCars'].fillna(data_val['GarageCars'].median(), inplace=True)\ndata_val['GarageArea'].fillna(data_val['GarageArea'].median(), inplace=True)\ndata_val['SaleType'].fillna(data_val['SaleType'].mode()[0], inplace=True)\n\nprint(data_val)","8aad140e":"#Creating new features using existing ones.\ndata_train['is_renovated']=1\ndata_train['is_renovated'].loc[data_train['YearBuilt']==data_train['YearRemodAdd']]=0\ndata_train['age_at_selling'] = data_train['YrSold'] - data_train['YearBuilt']\ndata_train['renovation_age'] = data_train['YrSold'] - data_train['YearRemodAdd']\n\ndata_val['is_renovated']=1\ndata_val['is_renovated'].loc[data_val['YearBuilt']==data_val['YearRemodAdd']]=0\ndata_val['age_at_selling'] = data_val['YrSold'] - data_val['YearBuilt']\ndata_val['renovation_age'] = data_val['YrSold'] - data_val['YearRemodAdd']\n\n#Dropping features with high fraction of missing values.\ndrop_col = ['Id', 'GarageYrBlt', 'YrSold', 'YearBuilt', 'YearRemodAdd', 'Alley', 'FireplaceQu', 'PoolQC', 'Fence', 'MiscFeature']\ndata_train.drop(drop_col, axis=1, inplace=True)\ndata_val.drop(drop_col, axis=1, inplace=True)\n\nprint(data_train.head())\nprint(data_val.head())\n","79fd899d":"#Encoding categorical features.\nlabel_encoder = LabelEncoder()\ncont_col = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n           'LowQualFinSF', 'GrLivArea', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n           'ScreenPorch', 'PoolArea', 'MiscVal', 'SalePrice', 'age_at_selling', 'renovation_age']\nfor i in range(0, data_train.shape[1]):\n    if(data_train.columns[i] not in cont_col):\n        data_train[data_train.columns[i]] = label_encoder.fit_transform(data_train[data_train.columns[i]])\n\nfor i in range(0, data_val.shape[1]):\n    if(data_val.columns[i] not in cont_col):\n        data_val[data_val.columns[i]] = label_encoder.fit_transform(data_val[data_val.columns[i]])\n\n\n\nprint(data_train.head())\nprint(data_val.head())","b6b5d3a2":"y = data_train['SalePrice']\nX = data_train.drop(['SalePrice'], axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nminimax = MinMaxScaler()\nX_train = minimax.fit_transform(X_train)\nX_test = minimax.transform(X_test)\ndata_val = minimax.transform(data_val)\n","103d3a6a":"#Linear Regression\nlinear_reg = LinearRegression()\nlinear_reg.fit(X_train, y_train)\nlinear_reg.score(X_test, y_test)","b9c527db":"#Ridge Linear Regression(with L2 regularization)\nridge_reg = Ridge(alpha=10)\nridge_reg.fit(X_train, y_train)\nridge_reg.score(X_test, y_test)","f9a430d2":"#KNN Regression\nknn_reg = KNeighborsRegressor(n_neighbors=10)\nknn_reg.fit(X_train, y_train)\nknn_reg.score(X_test, y_test)","6c60afb3":"#Elastic Net Regression(combined L1, L2 regularization)\nelastic_net = ElasticNet(alpha=0.1, l1_ratio=0.7)\nelastic_net.fit(X_train, y_train)\nelastic_net.score(X_test, y_test)","0031927c":"predicted = pd.DataFrame()\npredicted['Id'] = test_id\npredicted['SalePrice'] = elastic_net.predict(data_val)\nprint(predicted)\npredicted.to_csv('Submission.csv', index=False)","ad124b00":"# IV. Feature Scaling and Model Fitting","e5dccd5d":"# V. Final Predictions and Submission","420cf022":"# I. Importing Required Libraries and Data","f9b4d2d6":"# II. Data Cleaning: Missing Value Handling","a736152e":"# III. Feature Engineering"}}