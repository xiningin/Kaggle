{"cell_type":{"8285fafb":"code","4f4ede95":"code","2d088842":"code","31240255":"code","a34469f6":"code","7ad927ee":"code","eaf9b05b":"code","f98afa9d":"code","9ce6cc17":"code","da8ee79b":"code","c6c35c82":"code","0f7abde7":"markdown","f841c9c0":"markdown","3f5b526f":"markdown","27f2c9c2":"markdown","6a124a43":"markdown","b9cb9424":"markdown","ea537c41":"markdown","0c5f4859":"markdown"},"source":{"8285fafb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nroot = '\/kaggle\/input\/titanic\/'\n#Any results you write to the current directory are saved as output.","4f4ede95":"import pandas as pd\n#train_dict_df = {'PassengerId' : 'int8','Pclass': 'int8', 'Age':'int8','Fare':'float32', 'Cabin':'int8' }\ntrain_df = pd.read_csv(\n    os.path.join(root, 'train.csv'))\ntrain_df","2d088842":"import numpy as np \nfor index, row in train_df.iterrows():\n    if np.isnan(row['Age']):\n        train_df.at[index, 'Age'] = round(train_df['Age'].mean())\ntrain_df['Sex'] = pd.Categorical(train_df['Sex']).codes \ntrain_df","31240255":"\ntrain_df_reg = train_df.drop(labels = ['PassengerId', 'Name', 'SibSp', 'Ticket', 'Cabin', 'Embarked', 'Parch'], axis = 1)\ncorr = train_df.corr(method = 'pearson')\nsurvived = train_df_reg.pop('Survived')\ncorr\n\ntrain_df_reg.describe()","a34469f6":"from sklearn.svm import SVC\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import cross_val_score\nscaler = MinMaxScaler()\n\n\nclf_train = scaler.fit_transform(train_df_reg)\nlinreg = SVC(kernel='rbf', gamma = 'scale', C=20)\nlinreg_pred = linreg.fit(clf_train, survived)\n#linreg = Ridge(alpha = 30).fit(clf_train, survived)\nscores = cross_val_score(linreg, clf_train, survived,  cv=3)\nscores","7ad927ee":"import pandas as pd\n#train_dict_df = {'PassengerId' : 'int8','Pclass': 'int8', 'Age':'int8','Fare':'float32', 'Cabin':'int8' }\ntest_df = pd.read_csv(\n    os.path.join(root, 'test.csv'))\ntest_df['Sex'] = pd.Categorical(test_df['Sex']).codes \ntest_df","eaf9b05b":"import numpy as np \nfor index, row in test_df.iterrows():\n    if np.isnan(row['Age']):\n        test_df.at[index, 'Age'] = round(test_df['Age'].mean())\ntest_df.ffill(inplace=True)\ntest_df","f98afa9d":"\ntest_df_reg = test_df.drop(labels = ['PassengerId', 'Name', 'SibSp', 'Ticket', 'Cabin', 'Embarked', 'Parch'], axis = 1)\n\nclf_test = scaler.transform(test_df_reg)\n\ntest_re = linreg_pred.predict(clf_test)\ntest_df['Survived'] = np.round_(test_re)\n\n","9ce6cc17":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nmodel = LogisticRegression()\nmodel.fit(clf_train,survived)\ny_pred_train = model.predict(clf_train)\ny_pred_test = model.predict(clf_test)\n\nprint('Accuracy score for logistic regression train case {}'.format(accuracy_score(survived, y_pred_train)))\n#print('Accuracy score for logistic regression test case {}'.format(accuracy_score(y_test, y_pred_test)))\n#print('Confusion matrix for logistic regression train case {}'.format(confusion_matrix(survived, y_pred_train)))\ncm = confusion_matrix(survived, y_pred_train)\n","da8ee79b":"import seaborn as sns\nconfusion_matrix(survived, y_pred_train)\nsns.heatmap(cm, annot=True, annot_kws={\"size\": 12})","c6c35c82":"res = pd.DataFrame(test_df, columns = ['PassengerId', 'Survived'])\nres.to_csv('titanic.csv',index=False)\n","0f7abde7":"Simple Linear regression ","f841c9c0":"Filling missing value in test data","3f5b526f":"Fill the dataframe with the predicted values","27f2c9c2":"Importing test data","6a124a43":"Data engineering ","b9cb9424":"**Logistic Regression** ","ea537c41":"Export to the CSV file","0c5f4859":"MODIFY THE AGE DATA"}}