{"cell_type":{"7ff9b88a":"code","95620279":"code","341c45f3":"code","a3d4da1e":"code","714c72ea":"code","1dcedfbb":"code","e4704637":"code","7c52ade3":"code","118cf271":"code","27401ef6":"code","09eb67c5":"code","335fc89f":"code","c4db6e1f":"code","8e9cace6":"code","e57f9295":"code","cbd5ce43":"code","64076171":"code","00e9b744":"code","2ff7b54e":"code","5a981ad7":"code","5528ae20":"code","ddabd2c8":"markdown","0dcea692":"markdown","d38b381d":"markdown","ae70b82a":"markdown"},"source":{"7ff9b88a":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('grayscale')","95620279":"DATA = \"..\/input\/tabular-playground-series-may-2021\/\"\ndata_train = pd.read_csv(os.path.join(DATA,'train.csv'))\ndata_test = pd.read_csv(os.path.join(DATA,'test.csv'))\nsubmission = pd.read_csv(os.path.join(DATA,'sample_submission.csv'))","341c45f3":"data_train.head()","a3d4da1e":"data_test.head()\n","714c72ea":"data_train.info()","1dcedfbb":"data_train.describe()","e4704637":"dt_i=[]\ndt_fl=[]\ndt_o=[]\n\nfor col in data_train.columns:\n    x=data_train[col].dtype\n    if x=='int64':\n        dt_i.append(col)\n    elif x=='float64':\n        dt_fl.append(col)\n    else:\n        dt_o.append(col)","7c52ade3":"dt_fl","118cf271":"dt_i","27401ef6":"dt_o","09eb67c5":"plt.figure(figsize = (10,8))\nsns.barplot(x = 'feature_1',y = 'target',data = data_train)\nplt.show()","335fc89f":"plt.figure(figsize=(18,8))\nplt.subplot(1,2,1)\ndata_train.target.value_counts().plot.pie(explode=[0,0.1,0.2,0.3])\nplt.subplot(1,2,2)\nsns.countplot(data_train.target)\nplt.suptitle(\"Target Distribution\", size=20)\nplt.show()","c4db6e1f":"for i in dt_i:   \n    cnt_srs = data_train[i].value_counts()\n\n    plt.figure(figsize=(20,8))\n    plt.bar(cnt_srs.index, cnt_srs.values, alpha=0.8)\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xlabel('Values', fontsize=12)\n    plt.title(f'Count for {i}')\n    plt.show()","8e9cace6":"corr = data_train[dt_i].corr().abs()\n\nfig, ax = plt.subplots(figsize=(20, 12))\nax.text(-1.1, -0.7, 'Correlation between the Features', fontsize=20)\nsns.heatmap(corr, annot=False, fmt=\".2f\",cmap='gray',\n            cbar_kws={\"shrink\": .8}, vmin=0, vmax=0.05)\nplt.yticks(rotation=0)\nplt.show()","e57f9295":"!pip install mljar-supervised -q","cbd5ce43":"from supervised.automl import AutoML\nX=data_train.drop(['target','id'],axis=1)\ny=data_train['target']\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=42 , stratify = y )","64076171":"# train models with AutoML\nautoml = AutoML(mode=\"Compete\",ml_task = 'multiclass_classification',eval_metric='logloss')\nautoml.fit(X_train, y_train)","00e9b744":"# compute the performance on test data\npredictions = automl.predict_all(X_test)\npredictions","2ff7b54e":"result = pd.DataFrame({\"Predicted\": np.array(predictions[\"label\"]), \"Target\": np.array(y_test)})\nresult","5a981ad7":"df_res = pd.DataFrame(result)\nconfusion_matrix = pd.crosstab(df_res['Target'], df_res['Predicted'], rownames=['Target'], colnames=['Predicted'], margins = True)\nplt.figure(figsize=(18,8))\nsns.heatmap(confusion_matrix, annot=True,cmap='gray')\nplt.show()","5528ae20":"data_test = data_test.drop('id',1)\npredictions_all = automl.predict_all(data_test)\nsubmission[['Class_1','Class_2', 'Class_3', 'Class_4']] = predictions_all[['prediction_Class_1', 'prediction_Class_2', 'prediction_Class_3',\n       'prediction_Class_4']]\nsubmission.to_csv(f'submission.csv',index=False)","ddabd2c8":"<img src = \"https:\/\/raw.githubusercontent.com\/mljar\/mljar-examples\/master\/media\/AutoML_overview_mljar_v3.svg\">","0dcea692":"<img src = \"https:\/\/media.tenor.com\/images\/92481d2c662be7f7528dbd7d5049ce54\/tenor.gif\">","d38b381d":"## mljar -- Machine Learning for Humans\n<p> The mljar-supervised is an Automated Machine Learning Python package that works with tabular data. It is designed to save time for a data scientist \ud83d\ude0e. It abstracts the common way to preprocess the data, construct the machine learning models, and perform hyper-parameters tuning to find the best model \ud83c\udfc6. It is no black-box as you can see exactly how the ML pipeline is constructed (with a detailed Markdown report for each ML model). <\/p>\n\n<p> The mljar-supervised will help you with: <\/p>\n\n* explaining and understanding your data,\n* trying many different machine learning models,\n* creating Markdown reports from analysis with details about all models,\n* saving, re-running and loading the analysis and ML models.\n\n\n* <b>Source --> https:\/\/github.com\/mljar\/mljar-supervised\/ <\/b>","ae70b82a":"<img src = \"https:\/\/i.imgur.com\/uHVJtv0.png\">"}}