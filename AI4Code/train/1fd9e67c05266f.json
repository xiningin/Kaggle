{"cell_type":{"91ef735d":"code","9d51ef3d":"code","d113db11":"code","62640638":"code","5dd3486d":"code","d0136117":"code","7eedb0b1":"code","5e3dcff2":"code","ac71fc01":"code","b34b5026":"code","5fd5a783":"code","669f0fa5":"code","23ee20ac":"code","ff834a08":"code","4861f129":"code","fcbd9a9e":"code","4ce2395f":"code","cbdca3a0":"code","39f05010":"code","bb61344a":"code","e11e5331":"code","f5d4d762":"code","8976254d":"code","0e4f6000":"code","358c6839":"code","a7c8b433":"code","80ca5c50":"markdown","e31e604a":"markdown","8dc46527":"markdown","c54872f0":"markdown","c4521d73":"markdown","25a7b520":"markdown","121888f8":"markdown","1295e33a":"markdown","8b66a3c2":"markdown","09562a46":"markdown","c679a377":"markdown","0f573f18":"markdown","e5d45cc9":"markdown","b67e00bf":"markdown","86f8c031":"markdown","e5d88687":"markdown","f9391e41":"markdown","17b1e7a4":"markdown","4daa96c2":"markdown","9eaa8160":"markdown","bff1ee87":"markdown"},"source":{"91ef735d":"import pandas as pd\nimport numpy as np\n# visualizations\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom wordcloud import WordCloud\n# text data\nimport re\n\n# read url and open image\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\n# value percentage in pie chart\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\n\n# missing values in a dataset\ndef missing_data(dataset):\n    missing_values = dataset.isnull().sum()\n    missing_values = missing_values[missing_values > 0]\n    perc_missing = pd.DataFrame(round(missing_values\/len(dataset)*100, 2), columns=['missing%'])\n    count_missing = pd.DataFrame(missing_values, columns=['count'])\n    missing_data = pd.concat([perc_missing, count_missing], axis=1).sort_values(by='missing%', ascending=False)\n    return missing_data.style.background_gradient(cmap='PuBuGn')\n\ndef categorical_count(data, column, palette, xlabel, ylabel):\n    counts = data[column].value_counts()\n    x = counts.index\n    y = counts.values\n    colors = sns.color_palette(palette, 8)\n    with plt.style.context('fivethirtyeight'):\n        plt.figure(figsize=(10, 6))\n        plt.bar(x=x, height=y, color=colors)\n        for c, v in zip(x, y):\n            plt.text(c, v+1, f'{v}\\n({round(v\/sum(y)*100, 2)}%)', ha='center')\n        plt.yticks(np.arange(0, max(y)+20, 20))\n        plt.xticks(x)\n        plt.xlabel(xlabel)\n        plt.ylabel(ylabel)\n        plt.show()\n        \ndef bivariate_categorical_count(data, col1, col2, measure):\n    count = data.groupby([col1, col2]).agg({measure: 'count'}).unstack()[measure]\n    categories = count.index\n    y1 = count.values[:, 0]\n    y2 = count.values[:, 1]\n    fig = go.Figure()\n    fig.add_trace(go.Bar(x=categories,y=y1,name=data[col2].unique()[1], marker_color='gold',text=y1))\n    fig.add_trace(go.Bar(x=categories,y=y2,name=df[col2].unique()[0], marker_color='teal',text=y2))\n    fig.update_traces(textposition='outside')\n    fig.update_layout(barmode='group', \n                      title=f\"Number of {df[col2].unique()[0]} and {df[col2].unique()[1]} items across {col1}\", \n                      template='ggplot2')\n    fig.show()\n\ndef read_img_from_url(url):\n    \"\"\"this function reads an image from url and converts in numpy array\"\"\"\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n    img_matrix = np.array(img)\n    return img_matrix\n\ndef custom_wc(col):\n    plt.figure(figsize=(12, 20))\n    for i, category in enumerate(df[col].unique()):\n        # ingredints corpus for a specific category\n        ingredient_list = \",\".join([word.lower() for word in re.split(',', \",\".join(df[df[col] == category].ingredients))])\n        # wordcloud instantiate\n        wc = WordCloud(width=900, height=600, colormap='Dark2', \n                       max_words=50, background_color='white').generate(ingredient_list)\n        # plot wordcloud\n        plt.subplot(4, 2, i+1)\n        plt.imshow(wc, interpolation='bilinear')\n        plt.title(category.upper(), fontweight='bold')\n        plt.suptitle(f'50 most common ingredients across all {col}s', fontsize=15)\n        plt.axis(\"off\")","9d51ef3d":"df = pd.read_csv('..\/input\/indian-food-101\/indian_food.csv', na_values='-1')\ndf.head()","d113db11":"df.shape","62640638":"missing_data(df)","5dd3486d":"# handle missing values\ndf.fillna('Unknown', inplace=True)","d0136117":"df['ingredients_count'] = df['ingredients'].apply(lambda x: len(re.split(',', x)))","7eedb0b1":"url = \"https:\/\/i.etsystatic.com\/11743934\/r\/il\/f30302\/2167761089\/il_794xN.2167761089_i2nd.jpg\"\nimage_mask = read_img_from_url(url)\ningredient_list = \",\".join([word.lower() for word in re.split(',', \",\".join(df.ingredients))])\nwc = WordCloud(mask=image_mask, width=900, height=600, colormap='Dark2', \n               max_words=50, background_color='white', contour_width=1, contour_color='black').generate(ingredient_list)\nplt.figure(figsize=(12, 15))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","5e3dcff2":"diet_count = df.diet.value_counts()\ndiet_colors = ['teal', 'gold']\nfig, ax = plt.subplots(figsize=(7, 7))\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=diet_count.values, labels=diet_count.index, autopct=make_autopct(diet_count.values), \n          textprops={'size': 15}, pctdistance=0.4, colors=diet_colors)\nax.add_artist(center_circle)\nplt.legend()\nplt.show()","ac71fc01":"custom_wc('diet')","b34b5026":"categorical_count(df, 'course', 'husl', 'Type of course', 'Number of dishes')","5fd5a783":"custom_wc('course')","669f0fa5":"categorical_count(df, 'flavor_profile', 'Set2', 'Flavor profile', 'Number of dishes')","23ee20ac":"custom_wc('flavor_profile')","ff834a08":"categorical_count(df, 'region', 'tab10', 'Region', 'Number of dishes')","4861f129":"custom_wc('region')","fcbd9a9e":"bivariate_categorical_count(df, 'region', 'diet', 'name')","4ce2395f":"pd.pivot_table(df, values='name', index=['diet'], columns=['region'], \n               aggfunc='count', fill_value=0, dropna=False, margins=True, margins_name='Total')","cbdca3a0":"bivariate_categorical_count(df, 'course', 'diet', 'name')","39f05010":"pd.pivot_table(df, values='name', index=['diet'], columns=['course'], \n               aggfunc='count', fill_value=0, dropna=False, margins=True, margins_name='Total')","bb61344a":"bivariate_categorical_count(df, 'flavor_profile', 'diet', 'name')","e11e5331":"pd.pivot_table(df, values='name', index=['diet'], columns=['flavor_profile'], \n               aggfunc='count', fill_value=0, dropna=False, margins=True, margins_name='Total')","f5d4d762":"top_preptime = df[df.prep_time != 'Unknown'][['name', 'prep_time']].sort_values(by='prep_time', ascending=False)[:10]\ntop_cooktime = df[df.cook_time != 'Unknown'][['name', 'cook_time']].sort_values(by='cook_time', ascending=False)[:10]\nwith plt.style.context('ggplot'):\n    fig, ax = plt.subplots(1, 2, figsize=(10, 10))\n    plt.subplots_adjust(wspace=0.1)\n    ax[0].barh(y=top_preptime['name'], width=top_preptime['prep_time'],\n           color='orchid')\n    ax[0].invert_xaxis()\n    ax[0].yaxis.tick_left()\n    #ax[0].set_yticklabels(top_preptime['name'], fontsize=12, fontweight='semibold')\n    ax[0].set_xlabel('Preparation Time in minutes')\n    ax[0].set_title('Preparation Time')\n    \n    ax[1].barh(y=top_cooktime['name'], width=top_cooktime['cook_time'],\n           color='coral')\n    ax[1].yaxis.tick_right()\n    #ax[1].set_yticklabels(top_cooktime['name'], fontsize=12, fontweight='semibold')\n    ax[1].set_xlabel('Cooking Time in minutes')\n    ax[1].set_title('Cooking Time')\n    ax[1].set_xticks(np.arange(0, 800, 100))","8976254d":"course_cooktime = df[df.cook_time != 'Unknown'][['name', 'course', 'cook_time']].sort_values(by=['course','cook_time'], ascending=False)\ncourse_preptime = df[df.prep_time != 'Unknown'][['name', 'course', 'prep_time']].sort_values(by=['course','prep_time'], ascending=False)\ncourses = df.course.unique()\nn_best = 5\ncolors = sns.color_palette(\"tab10\")\nwith plt.style.context('bmh'):\n    fig, axes = plt.subplots(4, 2, figsize=(10, 15))\n    plt.subplots_adjust(wspace=0.5, hspace=0.5)\n    axes = axes.ravel()\n    for i, c, color, ax in zip(np.arange(0, 8, 2), courses, colors, axes):\n        sns.barplot(data=course_preptime[course_preptime.course == c][:n_best], \n                x='prep_time', y='name', ax=axes[i+1], orient='h', color='orchid')\n        sns.barplot(data=course_cooktime[course_cooktime.course == c][:n_best], \n                x='cook_time', y='name', ax=axes[i], orient='h', color='coral')\n        \n        axes[i].set_xlabel('cooking time in minutes')\n        axes[i+1].set_xlabel('preparation time in minutes')\n        axes[i].set_ylabel(None)\n        axes[i+1].set_ylabel(None)\n        axes[i].set_title(c.upper())\n        axes[i+1].set_title(c.upper())","0e4f6000":"region_cooktime = df[df.cook_time != 'Unknown'][['name', 'region', 'cook_time']].sort_values(by=['region','cook_time'], ascending=False)\nregion_preptime = df[df.prep_time != 'Unknown'][['name', 'region', 'prep_time']].sort_values(by=['region','prep_time'], ascending=False)\nregions = df.region.unique()\nn_best = 5\ncolors = sns.color_palette(\"tab10\")\nwith plt.style.context('bmh'):\n    fig, axes = plt.subplots(7, 2, figsize=(10, 30))\n    plt.subplots_adjust(wspace=0.7, hspace=0.5)\n    axes = axes.ravel()\n    for i, c, color, ax in zip(np.arange(0, 14, 2), regions, colors, axes):\n        sns.barplot(data=region_preptime[region_preptime.region == c][:n_best], \n                x='prep_time', y='name', ax=axes[i+1], orient='h', color='orchid')\n        sns.barplot(data=region_cooktime[region_cooktime.region == c][:n_best], \n                x='cook_time', y='name', ax=axes[i], orient='h', color='coral')\n        \n        axes[i].set_xlabel('cooking time in minutes')\n        axes[i+1].set_xlabel('preparation time in minutes')\n        axes[i].set_ylabel(None)\n        axes[i+1].set_ylabel(None)\n        axes[i].set_title(c.upper())\n        axes[i+1].set_title(c.upper())","358c6839":"categorical_count(df, 'ingredients_count', 'Dark2', 'Number of ingrediants used', 'count')","a7c8b433":"with plt.style.context('bmh'):\n    fig, axes = plt.subplots(2, 2, figsize=(12, 10))\n    plt.subplots_adjust(wspace=0.4, hspace=0.4)\n    axes = axes.ravel()\n    for ax, col in zip(axes, ['diet', 'region', 'flavor_profile', 'course']):\n        sns.countplot(data=df, x='ingredients_count', hue=col, ax=ax)\n        ax.legend(loc='upper right')\n        ax.set_title(col)","80ca5c50":"## Missing Values","e31e604a":"## 13. Distribution of number of ingredients used across types of diet, region, flavor profiles and courses","8dc46527":"## 8. Number of vegetarian and non-vegetarian dishes across flavor profiles","c54872f0":"## 7. Number of vegetarian and non-vegetarian dishes across courses","c4521d73":"## 1. 50 most common ingredients used in Indian cuisine","25a7b520":"# <font color='darkorange'>INDIAN <\/font><font color='dodgerblue'>FOOD <\/font><font color='darkgreen'>ANALYSIS<\/font>","121888f8":"## Additional Features","1295e33a":"## 6. Number of vegetarian and non-vegetarian dishes across regions","8b66a3c2":"# <font color='darkorchid'>Data Exploration<\/font>","09562a46":"## 4. Flavour profile of dishes and respective count\n- The missing flavor profiles of dishes is labeled as `Unknown`. \n- In the given sample dataset of 255 Indian dishes , 52.2 percent of the dishes are spicy, 34.5 percent are sweet, 11.4 percent are `Unknown`, 1.6 percent are bitter and only 0.4 percent are sour i.e. just a single dish is sour.","c679a377":"![](http:\/\/media.giphy.com\/media\/NI8fT7ugMo9eU\/giphy.gif)","0f573f18":"## 9. Top 10 dishes with the highest preparation and cooking time\n- excluding all the missing values in prep and cook time","e5d45cc9":"## 3. Number of dishes in each course type","b67e00bf":"## 12. Distribution of number of ingrediants used in dishes","86f8c031":"### Fill missing values with 'Unknown'","e5d88687":"## 5. Number of dishes from all regions\n- The missing regions of dishes are labeled as `Unknown`. ","f9391e41":"## 10. Top 5 dishes with the highest cooking and preparation time for all course types\n- excluding all the missing values in prep and cook time","17b1e7a4":"# <font color='mediumvioletred'>Lets look at the data<\/font>","4daa96c2":"## 2. Number of vegetarian and non vegetarian dishes (Types of diet)","9eaa8160":"## Dataset shape\n - the sample dataset consists of 255 Indian dishes","bff1ee87":"## 11. Top 5 dishes with the highest cooking and preparation time for all regions"}}