{"cell_type":{"545367f8":"code","a29b2c99":"code","849a446b":"code","820f4fd2":"code","ef386ade":"code","f6ddb085":"code","9c4f3a3c":"code","17055d36":"code","aaa5fa23":"code","dc111b9d":"code","cf760a4d":"code","0d91f29c":"code","fbae1af8":"code","c52fb0d7":"code","fc9ed309":"code","a0e2a02a":"code","2f9395cd":"code","1e6cd38b":"code","24359bab":"code","f41a23e4":"code","1885ebe3":"code","7fc71654":"code","5d4f48f3":"code","99496fb3":"code","76fa85e1":"code","e8963f2d":"code","da41499f":"code","dad65857":"code","21a478eb":"code","de7b18cf":"code","b1188177":"code","fd1e8936":"code","0f1c7e22":"code","5dca11e8":"code","9a1fa1e8":"code","5c801cc1":"code","1da91830":"code","87edcf20":"markdown","dda594d3":"markdown","64564515":"markdown","c8d5d394":"markdown","d56fd09b":"markdown","530f5d86":"markdown","ac7c17c9":"markdown","2b78f0c1":"markdown","23a4d345":"markdown"},"source":{"545367f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a29b2c99":"import matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.neural_network import MLPClassifier ","849a446b":"df = pd.read_csv('..\/input\/csgo-round-winner-classification\/csgo_round_snapshots.csv')","820f4fd2":"df.head()","ef386ade":"df.isnull().sum() # finding nulls","f6ddb085":"sns.countplot(df['round_winner'])","9c4f3a3c":"col = df.columns","17055d36":"# checking for columns for only one value\nt=[]\nfor i in col:\n    t.append(df[i].nunique())\n","aaa5fa23":"# all the columns with only one value\ntemp =[]\nfor i in range(len(t)):\n    if t[i]==1:\n        temp.append(i)\n        print(i)","dc111b9d":"sns.countplot(df[col[22]])","cf760a4d":"df.drop([col[22], col[30], col[37], col[52], col[58], col[60]], axis = 1, inplace = True) # dropping those columns\nprint(col[22])\nprint(col[30])\nprint(col[37])\nprint(col[52])\nprint(col[58])\nprint(col[60])","0d91f29c":"df.head()","fbae1af8":"label_encoder = preprocessing.LabelEncoder() \ndf['map'] = label_encoder.fit_transform(df['map'])","c52fb0d7":"df['bomb_planted'] = label_encoder.fit_transform(df['bomb_planted'])","fc9ed309":"df['round_winner'] = label_encoder.fit_transform(df['round_winner'])","a0e2a02a":"df.head()","2f9395cd":"col = df.columns","1e6cd38b":"c = []\nfor i in col:\n    c.append(df['round_winner'].corr(df[i]))","24359bab":"df.info()","f41a23e4":"standscl = preprocessing.StandardScaler()","1885ebe3":"standscl.fit(df)","7fc71654":"standscl.transform(df)","5d4f48f3":"df = standscl.transform(df)","99496fb3":"df = pd.DataFrame(df, columns = col)","76fa85e1":"df.head()","e8963f2d":"df['round_winner'] = label_encoder.fit_transform(df['round_winner'])","da41499f":"x = df.drop('round_winner', axis = 1)","dad65857":"x.head()","21a478eb":"y = df['round_winner']","de7b18cf":"y.head()","b1188177":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)","fd1e8936":"model_1 = LogisticRegression()\nmodel_1.fit(x_train,y_train)\npred_1 = model_1.predict(x_test)\ncr1    = classification_report(y_test,pred_1)\nprint(cr1)","0f1c7e22":"model_2 = DecisionTreeClassifier()\nmodel_2.fit(x_train,y_train)\npred_2 = model_2.predict(x_test)\ncr2 = classification_report(y_test,pred_2)\nprint(cr2)","5dca11e8":"model_3 = RandomForestClassifier()\nmodel_3.fit(x_train,y_train)\npred_3 = model_3.predict(x_test)\ncr3 = classification_report(y_test,pred_3)\nprint(cr3)","9a1fa1e8":"model_4 = XGBClassifier()\nmodel_4.fit(x_train,y_train)\npred_4 = model_4.predict(x_test)\ncr4 = classification_report(y_test,pred_4)\nprint(cr4)","5c801cc1":"model_5 = MLPClassifier()\nmodel_5.fit(x_train,y_train)\npred_5 = model_5.predict(x_test)\ncr5 = classification_report(y_test,pred_5)\nprint(cr5)","1da91830":"print('Optimal accuracy for random forest classifier:', str(accuracy_score(y_test,pred_3)*100) + '%')","87edcf20":"## Normalizing the data using Standard Scalar","dda594d3":"### label encoding all categorical values\n","64564515":"# CSGO round winner prediction","c8d5d394":"# Training and Evaluation","d56fd09b":"# What is CSGO?","530f5d86":"## Train Test Split\n","ac7c17c9":"> CSGO(Counter Strike Global-Offencive) is a round based tactical shooter between CT(Counter terrorist) and T(Terrorist) where we buy equipments usig in game cash that is provided by the game in each round. The overall goal is that the terrorist must plant a bomb while the counter terrorist must stop them or defuse the bomb.","2b78f0c1":"# Data preprocessing\n","23a4d345":"## Splitting the data into X and Y"}}