{"cell_type":{"c6bb5445":"code","8ad757e2":"code","6d126459":"code","d485f088":"code","4bf25116":"code","8f9e4103":"code","a3cd4f4b":"code","7419f7b7":"code","3d897201":"code","88d178b2":"code","c1453173":"code","e1d36b52":"code","c96ba24c":"code","ddcbf514":"markdown","cd479177":"markdown","4621c613":"markdown","4d380a5a":"markdown","9803a53c":"markdown","64144c84":"markdown","aaa59f3d":"markdown","2970e3a9":"markdown","e23e4778":"markdown","f8b63cd2":"markdown","f3757754":"markdown","d84787be":"markdown","32cf0763":"markdown","0f5adeb4":"markdown","fa567f5d":"markdown","14b70189":"markdown","71a309ba":"markdown","141c9527":"markdown","f66fa671":"markdown","53de58c8":"markdown","bf7ee369":"markdown","026e4d0f":"markdown","5bedccd4":"markdown","912aadec":"markdown","7f7dd730":"markdown","b6140f1f":"markdown","b52e0f93":"markdown","06e496df":"markdown","94e244db":"markdown","c25f89c4":"markdown","14a48fb0":"markdown","2a80711b":"markdown"},"source":{"c6bb5445":"cd name_you_want_to_give_of_your_virtual_environment\n. bin\/activate","8ad757e2":"from __future__ import division, print_function\n# coding=utf-8\nimport sys\nimport os\nimport glob\nimport re\nimport numpy as np\n\n# Flask utils\nfrom flask import Flask, redirect, url_for, request, render_template\nfrom werkzeug.utils import secure_filename\nfrom gevent.pywsgi import WSGIServer\n\nfrom PIL import Image\nimport torch\nimport torchvision.transforms as transforms\nimport torchvision.models as models\nimport torch.nn as nn\n\n\nimport torch.nn.functional as F","6d126459":"# Define a flask app \napp = Flask(__name__)   #always required when creating flask app\nMODEL_PATH = 'models\/model_resnet.pth'    #your model's path where you have stored it.","d485f088":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","4bf25116":"class AdaptiveConcatPool2d(nn.Module):\n    def __init__(self, sz=1):\n        super().__init__()\n        self.adavgp = nn.AdaptiveAvgPool2d(sz)\n        self.adamaxp = nn.AdaptiveMaxPool2d(sz)\n        \n    def forward(self, x):\n        x = torch.cat([self.adavgp(x), self.adamaxp(x)], 1)\n        x = x.view(x.size(0),-1)\n        return x\n\n\n\nclass CustomClassifier(nn.Module):\n    def __init__(self, in_features, intermed_bn= 512, out_features=10, dout=0.25):\n        super().__init__()\n        self.fc_bn0 = nn.BatchNorm1d(in_features)\n        self.dropout0 = nn.Dropout(dout)\n        self.fc0 = nn.Linear(in_features, intermed_bn, bias=True)\n        self.fc_bn1 = nn.BatchNorm1d(intermed_bn, momentum=0.01)\n        self.dropout1 = nn.Dropout(dout * 2)\n        self.fc1 = nn.Linear(intermed_bn, out_features, bias=True)\n        \n    def forward(self, x):\n        x = self.fc_bn0(x)\n        x = self.dropout0(x)\n        x = F.relu(self.fc0(x))\n        x = self.fc_bn1(x)\n        x = self.dropout1(x)\n        x = self.fc1(x)\n        return x","8f9e4103":"model = models.resnet18(pretrained=True)   #loaded pretrained model\n","a3cd4f4b":"model.avgpool = AdaptiveConcatPool2d()     #added own defined layer\nmodel.fc = CustomClassifier(in_features=model.fc.in_features*2, out_features=10) #added own classifier layer according to requirement","7419f7b7":"#load and map model dict\n\n# model was trained on gpu so mapped it to cpu as our application will do prediction on cpu \n# and tensors also will be on cpu\nmodel.load_state_dict(torch.load(MODEL_PATH,map_location=torch.device('cpu')))","3d897201":"data_transforms = transforms.Compose([\n        transforms.RandomCrop(512, padding=8, padding_mode='reflect'),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.0793, 0.0530, 0.0545], std=[0.1290, 0.0886, 0.1376])\n        ])","88d178b2":"def pred_single(img_path, return_label=True):\n    with torch.no_grad():\n        model.eval()\n        img = Image.open(img_path)  #NOTE : Image.open \n        img = data_transforms(img)\n        bs_img = img.unsqueeze(0)\n        #bs_img = bs_img.to(device)\n        preds = torch.sigmoid(model(bs_img))\n        prediction = preds[0]\n        return prediction","c1453173":"def decode_labels(target, thresh=0.5, return_label=True):\n    result = []\n    for i, tgt in enumerate(target):\n        if tgt > thresh:\n            result.append(str(i) + \":\" + labels[i] + \" \")           \n    return result","e1d36b52":"@app.route('\/', methods=['GET'])\ndef index():\n    # Main page\n    return render_template('index.html')","c96ba24c":"@app.route('\/predict', methods=['GET', 'POST'])\ndef upload():\n    if request.method == 'POST':\n        # Get the file from post request\n        f = request.files['file']\n\n        # Save the file to .\/uploads\n        basepath = os.path.dirname(__file__)\n        file_path = os.path.join(\n            basepath, 'uploads', secure_filename(f.filename))  \n        f.save(file_path)    # save image into uploads folder\n\n        # Make prediction\n        preds = pred_single(file_path, model)  # predict that image\n        result = decode_labels(preds)          # decode that prediction\n        result = result[0] + \"\" + result[1]    # create a string of result \n        return result                          # return that result\n    return None\n\n\nif __name__ == '__main__':\n    app.run(debug=True,threaded=False)","ddcbf514":"I have tested my application on python-3.7 so I am creating virtual environment for this python version .\n<br><br>\nSo type following command in your terminal:<br><br>\npython3.7 -m virtualenv name_you_want_to_give_of_your_virtual_environment","cd479177":"# 4f) Add your own layers in that pretrained model(if any) same as during training. ","4621c613":"# Step 3) Create some folders and files\n\nCreate a base folder that will be your project folder inside your virtual environment folder.<br>\n\n![Screenshot%20from%202020-06-29%2011-45-00.png](attachment:Screenshot%20from%202020-06-29%2011-45-00.png)\n\n<br>\nHere you can see that 'pytorchh' is environment directory and inside it i have created a 'protien' directory that is my project folder<br><br>\n Inside protien folder there are some essential folders and files that are required by flask that are static and templates folder and one driver python file that is app.py here.<br><br>\n\nfolders : models , static\/css\/main.css, static\/js\/main.js ,templates\/home.html,  templates\/result.html , uploads <br>\nfiles : app.py","4d380a5a":"# 4a) First import all important libraries","9803a53c":"Above I created virtual environment named as 'pytorchh'","64144c84":"# 4h) Now define transformation for your images same as when model was being tested ","aaa59f3d":"Don't worry about html ,css and js code. They will be given in the last of this tutorial.<br> Only understand the basic structure ","2970e3a9":"# What you will learn <br>\nFirst of all it's important to note that I am not going to tell anything about web development. Topic that will be covered here is how to use flask to deploy this competition's code and make a deep learning based web application.\n\n<br><br>\nI am supposing that you are on your local machine. So let us see step by step approach to do so.\n\n","e23e4778":"![Screenshot%20from%202020-06-29%2011-58-37.png](attachment:Screenshot%20from%202020-06-29%2011-58-37.png)","f8b63cd2":"# Step 1) create a virtual environment","f3757754":"# 4e) Load your pretrained model that has been used for training","d84787be":"# step5) Move your .pth file into models folder\n\nThis is the only step you need to do if you are using my source code(link my source code will be given below )","32cf0763":"In the last line you can see (pytorchh) that means now I am in newly created pytorchh environment.<br><br>\nIn this environent there will be not any module present so you have to install all required modules.","0f5adeb4":"# Points to take away <br>\n\n1. Download pretrained model and make changes in it same as you have done in your notebook.<br>\n2. Apply transformation same as you have done in your notebook during testing\/validation of model<br>\n3. store your model's .pth file inside models folder (if using my source code's folder structure) ","fa567f5d":"![Screenshot%20from%202020-06-29%2011-33-33.png](attachment:Screenshot%20from%202020-06-29%2011-33-33.png)","14b70189":"# 4l) Now here is another route ('\/predict') with get and post request. \n\nIf request is post that means you have uploaded image from upload files button from browser then it will be stored in uploads folder then it will be predicted and corresponding label will be returned.","71a309ba":"# 4c) Define Labels","141c9527":"![Screenshot%20from%202020-06-29%2011-33-58.png](attachment:Screenshot%20from%202020-06-29%2011-33-58.png)","f66fa671":"Hope you all are doing well and learning something new.\nSo as a last part of this course I want to present a method to deploy this project as a web application using Flask.","53de58c8":"A link will be appeared : https:\/\/127.0.0.1:5000","bf7ee369":"My github Repo(Source code is here ): <br>\nhttps:\/\/github.com\/pandeynandancse\/human-protein-classifier\n<br>\n<br>\n# FEEL FREE TO FORK IT","026e4d0f":"# 4b) Define a flask app ","5bedccd4":"If you are familiar with flask then you know that static and templates folder and one driver python file are required by any flask app.<br><br>\n# What it means??<br>\n<br>\nWell! static folder serves static files such as images, css, js and templates folder serves templates that are html files. And there is one python file that is called driver file that will be given in command line to run flask app. ","912aadec":"# 4j) Define a function to decode labels(it will be present in your competition code)","7f7dd730":"# 4g) Here it's important to note our model was on gpu , so for prediction on cpu map model to cpu\n\n\nmap_location=torch.device('cpu')","b6140f1f":"Open this link and your application will start working","b52e0f93":"\n# Step 4)Inside app.py\nHere I have written basic code required for classification ","06e496df":"# 4i) Define pred_single function (see in your competition code ,it must be there)\nHere one function of Image class from PIL module has been used ==>>> Image.open()<br>\nNote this point.","94e244db":"# Step2) Activate that environment","c25f89c4":"# step6) Now run your application from command line\n\npython app.py","14a48fb0":"# 4d) Define your model same as you have created previously during training.<br><br>\nHere I am using this notebook's model: https:\/\/www.kaggle.com\/nachiket273\/protein-classification-one-cycle for the privacy of my model according to competition rule.<br><br>\nSo here you can store your own model.","2a80711b":"# 4k) Now here comes some basic flask concpets that can be used to make a web application\nFirst define a home\/index route ('\/') that means when you open the browser with given link it is routed here and renders a template index.html"}}