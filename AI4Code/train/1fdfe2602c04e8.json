{"cell_type":{"bc6e993b":"code","739f1e26":"code","c2a1d0c9":"code","a04351b9":"code","0c9b43e5":"code","9acd5fb2":"code","b71e407f":"code","d5045b9c":"code","24852e43":"code","71414713":"code","3697bd2a":"code","141fb3ca":"code","3933a8ce":"markdown","15891eb1":"markdown","c366a6b3":"markdown"},"source":{"bc6e993b":"import warnings; warnings.filterwarnings('ignore')\nimport pandas as pd,numpy as np,tensorflow as tf\nimport h5py,imageio,os,torch\nimport seaborn as sn,pylab as pl\nfrom tensorflow.keras.preprocessing import image as tkimg\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom skimage import io; from tqdm import tqdm\nfrom ipywidgets import widgets\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES=True\nfrom torch.utils.data import DataLoader as tdl\nfrom torch.utils.data import Dataset as tds\nfrom torchvision import transforms,utils\ndev=torch.device('cuda:0' \\\nif torch.cuda.is_available() else 'cpu')\nfrom IPython.core.magic import register_line_magic\nfrom IPython.display import Image\nfile_path='..\/input\/tomato-cultivars\/'","739f1e26":"def paths2tensor(img_paths,file_path,img_size):\n    tensor=[]\n    for img_path in tqdm(img_paths):\n        img0=tkimg.load_img(\n            file_path+img_path,\n            target_size=(img_size,img_size))\n        img=tkimg.img_to_array(img0)\n        tensor.append(np.expand_dims(img,axis=0))\n    return np.vstack(tensor)\ndef animate(images):\n    converted_images=np.clip(images*255,0,255).astype(np.uint8)\n    imageio.mimsave('animation.gif',converted_images)\n    return Image(open('animation.gif','rb').read())\ndef interpolate_hypersphere(v1,v2,steps):\n    v1norm=tf.norm(v1)\n    v2norm=tf.norm(v2)\n    v2normalized=v2*(v1norm\/v2norm)\n    vectors=[]\n    for step in range(steps):\n        interpolated=v1+(v2normalized-v1)*step\/(steps-1)\n        interpolated_norm=tf.norm(interpolated)\n        interpolated_normalized=\\\n        interpolated*(v1norm\/interpolated_norm)\n        vectors.append(interpolated_normalized)\n    return tf.stack(vectors)\ndef plcmap(cmap,n):\n    return [pl.cm.get_cmap(cmap)(i\/n)[:3] \n            for i in range(1,n+1)]\nplcmap('Reds',5)","c2a1d0c9":"names=['Kumato','Beefsteak','Tigerella',\n       'Roma','Japanese Black Trifele',\n       'Yellow Pear','Sun Gold','Green Zebra',\n       'Cherokee Purple','Oxheart','Blue Berries',\n       'San Marzano','Banana Legs',\n       'German Orange Strawberry','Supersweet 100']\nfile_list=sorted(os.listdir(file_path))\nimg_size=160\nlabels=np.array([int(el[:2]) for el in file_list],\n                dtype=np.int8)-1\nimages=np.array(paths2tensor(\n    file_list,file_path=file_path,img_size=img_size),\n    dtype=np.float32)\/255\nN=labels.shape[0]; n=int(.2*N)\nshuffle_ids=np.arange(N)\nnp.random.RandomState(12).shuffle(shuffle_ids)\nimages,labels=images[shuffle_ids],labels[shuffle_ids]\nx_test,x_train=images[:n],images[n:]\ny_test,y_train=labels[:n],labels[n:]","a04351b9":"df=pd.DataFrame([[x_train.shape,x_test.shape],\n                 [x_train.dtype,x_test.dtype],\n                 [y_train.shape,y_test.shape],\n                 [y_train.dtype,y_test.dtype]],               \n                columns=['train','test'])\nstart=100\ndef display_imgs(images,labels,names,start):\n    fig=pl.figure(figsize=(6,3))\n    n=np.random.randint(0,start-1)\n    for i in range(n,n+6):\n        ax=fig.add_subplot(2,3,i-n+1,xticks=[],yticks=[])\n        ax.set_title(\n            names[labels[i]],color='darkred',fontsize=12)\n        ax.imshow((images[i]))\n    pl.tight_layout(); pl.show()\ndisplay_imgs(images,labels,names,start); display(df)","0c9b43e5":"with h5py.File('TomatoCultivarImages.h5','w') as f:\n    f.create_dataset('train_images',data=x_train)\n    f.create_dataset('train_labels',data=y_train)\n    f.create_dataset('test_images',data=x_test)\n    f.create_dataset('test_labels',data=y_test)\nos.stat('TomatoCultivarImages.h5')","9acd5fb2":"x_valid,y_valid=x_test[:int(n\/2)],y_test[:int(n\/2)]\nx_test,y_test=x_test[int(n\/2):],y_test[int(n\/2):]","b71e407f":"class TData(tds):\n    def __init__(self,x,y):   \n        self.x=torch.tensor(x,dtype=torch.float32)\n        self.y=torch.tensor(y,dtype=torch.int32)\n    def __getitem__(self,index):\n        img,lbl=self.x[index],self.y[index]\n        return img,lbl\n    def __len__(self):\n        return self.y.shape[0]\nbatch_size2=int(8); img_size2=int(64)\nn_train=batch_size2*(x_train.shape[0]\/\/batch_size2)\nx_train2=np.transpose(x_train,(0,3,1,2))[:n_train]\nprint(x_train2.mean(),x_train2.std())\nn_valid=batch_size2*(x_valid.shape[0]\/\/batch_size2)\nx_valid2=np.transpose(x_valid,(0,3,1,2))[:n_valid]\nn_test=batch_size2*(x_test.shape[0]\/\/batch_size2)\nx_test2=np.transpose(x_test,(0,3,1,2))[:n_test]\nrandom_seed=23\ntrain2=TData(x_train2,y_train[:n_train])\nvalid2=TData(x_valid2,y_valid[:n_valid])\ntest2=TData(x_test2,y_test[:n_test])\ndataloaders={'train':tdl(dataset=train2,shuffle=True,batch_size=batch_size2), \n             'valid':tdl(dataset=valid2,shuffle=True,batch_size=batch_size2),\n             'test':tdl(dataset=test2,shuffle=True,batch_size=batch_size2)}\ndel train2,valid2,test2","d5045b9c":"@register_line_magic\ndef display_data_imgs(data):\n    global names\n    for images,labels in dataloaders[data]:  \n        print('Image dimensions: %s'%str(images.shape))\n        print('Label dimensions: %s'%str(labels.shape))\n        images=[np.transpose(images[i],(1,2,0)) \n                for i in range(len(images))]\n        display_imgs(images,labels,names,2)\n        break\n%display_data_imgs valid","24852e43":"set(labels)","71414713":"pl.figure(figsize=(10,5))\nsn.countplot(x=labels,facecolor=(0,0,0,0),\n             linewidth=5,linestyle='-.',\n             edgecolor=plcmap('Reds',15))\npl.title('Cultivar Distribution',\n         color='darkred',fontsize=15);","3697bd2a":"n=np.random.randint(50)\nprint('label: ',y_test[n],names[y_test[n]])\npl.figure(figsize=(3,3))\npl.imshow((x_test[n]));","141fb3ca":"imgs=np.vstack([interpolate_hypersphere(x_test[0],x_test[1],120),\n                interpolate_hypersphere(x_test[1],x_test[0],120)])\nanimate(imgs)","3933a8ce":"## Data Representation","15891eb1":"## Code Modules & Functions","c366a6b3":"## Data Processing"}}