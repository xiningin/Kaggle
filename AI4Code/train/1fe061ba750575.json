{"cell_type":{"0b6a8b63":"code","c4c4cbd1":"code","b38ba0f1":"code","0994a879":"code","e8c50864":"code","5e18f150":"code","d0ed1c43":"code","73c969f5":"code","a9ccfad5":"code","3f2a0268":"code","b48fa9f1":"code","61905959":"code","5b3d86f4":"code","b2962bdb":"code","b2d09d1b":"code","2e9001d5":"code","14ef48c1":"code","fe89a877":"code","31195aae":"code","5f27046c":"code","d81e26e1":"code","81c1b80e":"code","b9b6dc17":"code","10533dd0":"code","9e2bf068":"code","52790e76":"code","0deb318c":"code","d9c9e232":"code","86f8ebda":"code","4598b0f4":"code","a2a96a16":"code","ec68ea7b":"code","c0e3c4a6":"code","3c1007de":"code","112a6c8d":"code","445893c4":"code","04314420":"code","39d3c1e6":"code","08e3f47c":"code","750f9005":"code","e7d48cea":"code","ad25c741":"code","7c15ad91":"code","c24ffc16":"code","c261d9cc":"code","aeaf322e":"code","b584afa9":"code","32ffd3e5":"code","38683a2c":"code","6daa420e":"code","09df90f3":"code","200bade4":"code","ce8de1b7":"code","94a020bb":"code","932223d8":"code","039d45e3":"code","9fac63ae":"markdown","2415d12e":"markdown","addd334b":"markdown","75759fc2":"markdown","86171efb":"markdown","ef0fa258":"markdown","30c9f908":"markdown","f47434af":"markdown","1e1dc112":"markdown"},"source":{"0b6a8b63":"from warnings import filterwarnings\nfilterwarnings('ignore')\nimport numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy as sp\nfrom sklearn.cluster import KMeans","c4c4cbd1":"df = pd.read_csv(\"..\/input\/test123\/USArrests.csv\").copy()\n\n\ndf.head()\n","b38ba0f1":"df.index = df.iloc[:,0]  #Get all rows in column 0 ,means we will only take states names\n","0994a879":"df.index","e8c50864":"df.index.name=\"States\"       #it change index name without this index name is Unnamed:0. With this its look better\n#del df.index.name           #also if you want you can delete index name \n\ndf.head()","5e18f150":"df = df.iloc[:,1:5]  #with this we deleted row 1 so extra city  names deleted","d0ed1c43":"df.head()","73c969f5":"#del df.index.name","a9ccfad5":"df.head()","3f2a0268":"df.isnull().sum()","b48fa9f1":"df.info()","61905959":"df.describe().T  #we can interpret the data set through this table. It tell us a lot of thing about dataset\n","5b3d86f4":"df.hist(figsize = (10,10));","b2962bdb":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 4)","b2d09d1b":"?kmeans #kmeans Documentation","2e9001d5":"k_fit = kmeans.fit(df) #ve created model","14ef48c1":"k_fit.n_clusters","fe89a877":"k_fit.cluster_centers_","31195aae":"k_fit.labels_","5f27046c":"#g\u00f6rsellestirme","d81e26e1":"kmeans = KMeans(n_clusters = 2)\nk_fit = kmeans.fit(df)","81c1b80e":"kumeler = k_fit.labels_","b9b6dc17":"plt.scatter(df.iloc[:,0], df.iloc[:,1], c = kumeler, s = 50, cmap = \"viridis\")\n\ncenters = k_fit.cluster_centers_\n\nplt.scatter(centers[:,0], centers[:,1], c = \"black\", s = 200, alpha = 0.5);","10533dd0":"from mpl_toolkits.mplot3d import Axes3D","9e2bf068":"kmeans = KMeans(n_clusters = 3)\nk_fit = kmeans.fit(df)\nkumeler = k_fit.labels_\ncenters = kmeans.cluster_centers_","52790e76":"plt.rcParams['figure.figsize'] = (16, 9)\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2]); #we visualized data set as 3d","0deb318c":"fig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df.iloc[:, 0], df.iloc[:, 1], df.iloc[:, 2], c=kumeler)\nax.scatter(centers[:, 0], centers[:, 1], centers[:, 2], \n           marker='*', \n           c='#050505', \n           s=1000);              #we marked center points of variables","d9c9e232":"kmeans = KMeans(n_clusters = 3)\nk_fit = kmeans.fit(df)\nclusters = k_fit.labels_","86f8ebda":"pd.DataFrame({\"States\" : df.index, \"clusters\": clusters})[0:10] #we can see which state belongs to which cluster","4598b0f4":"df[\"cluster_no\"] = clusters","a2a96a16":"df.head()","ec68ea7b":"df[\"cluster_no\"] = df[\"cluster_no\"] + 1 # we did that because we want to start cluster_no from 1 ","c0e3c4a6":"df.head()","3c1007de":"#!pip install yellowbrick\nfrom yellowbrick.cluster import KElbowVisualizer\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,50))\nvisualizer.fit(df) \nvisualizer.poof()  ","112a6c8d":"kmeans = KMeans(n_clusters = 4)\nk_fit = kmeans.fit(df)\nclusters = k_fit.labels_","445893c4":"pd.DataFrame({\"States\" : df.index, \"Clusters\": clusters})[0:10]","04314420":"df = pd.read_csv(\"..\/input\/test123\/USArrests.csv\").copy()\ndf.index = df.iloc[:,0]\ndf = df.iloc[:,1:5]\n#del df.index.name\ndf.head()","39d3c1e6":"from scipy.cluster.hierarchy import linkage\nhc_complete = linkage(df, \"complete\")\nhc_average = linkage(df, \"average\")\nhc_single = linkage(df, \"single\")","08e3f47c":"dir(hc_complete)","750f9005":"from scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexes')\nplt.ylabel('Distance')\ndendrogram(\n    hc_complete,\n    leaf_font_size=10\n);","e7d48cea":"from scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexes')\nplt.ylabel('Distance')\ndendrogram(\n    hc_complete,\n    truncate_mode = \"lastp\",\n    p = 4,\n    show_contracted = True\n);","ad25c741":"from scipy.cluster.hierarchy import dendrogram\n\nplt.figure(figsize=(15, 10))\nplt.title('Hierarchical Clustering - Dendogram')\nplt.xlabel('Indexes')\nplt.ylabel('Distance')\nden = dendrogram(\n    hc_complete,\n    leaf_font_size=10\n);","7c15ad91":"?dendrogram  #dendrogram Documentation","c24ffc16":"from sklearn.cluster import AgglomerativeClustering\ncluster = AgglomerativeClustering(n_clusters = 4, \n                                  affinity = \"euclidean\", \n                                  linkage = \"ward\")\n\ncluster.fit_predict(df)","c261d9cc":"pd.DataFrame({\"States\" : df.index, \"Clusters\": cluster.fit_predict(df)})[0:10]","aeaf322e":"df[\"Cluster_no\"] = cluster.fit_predict(df)","b584afa9":"df.head()","32ffd3e5":"df = pd.read_csv(\"..\/input\/test123\/USArrests.csv\").copy()\ndf.index = df.iloc[:,0]\ndf = df.iloc[:,1:5]\n#del df.index.name\ndf.head()","38683a2c":"from warnings import filterwarnings\nfilterwarnings('ignore')     #this func just ingnoring and deleting warnings notification","6daa420e":"from sklearn.preprocessing import StandardScaler\n\ndf = StandardScaler().fit_transform(df)\ndf[0:5,0:5]","09df90f3":"from sklearn.decomposition import PCA\npca = PCA(n_components = 3)\npca_fit = pca.fit_transform(df)","200bade4":"bilesen_df = pd.DataFrame(data = pca_fit, \n                          columns = [\"birinci_bilesen\",\"ikinci_bilesen\",\"ucuncu_bilesen\"])","ce8de1b7":"bilesen_df.head()","94a020bb":"pca.explained_variance_ratio_","932223d8":"pca = PCA().fit(df)","039d45e3":"plt.plot(np.cumsum(pca.explained_variance_ratio_))","9fac63ae":"# K-Means","2415d12e":"## K-MEANS Model and Visualization","addd334b":"# Hierarchical Clustering\n\n","75759fc2":"## Optimum K\u00fcme Say\u0131s\u0131","86171efb":"# PCA\n","ef0fa258":"### mostly in this equation we want within-cluster similarity MAX , inter-cluster similarity MIN\n","30c9f908":"### clusters and observation units\n","f47434af":"## our motivation is get to know which cluster number belongs to which state","1e1dc112":"## Optimum Number of Clusters"}}