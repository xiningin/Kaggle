{"cell_type":{"51169567":"code","87fe7233":"code","69171f54":"code","362161cd":"code","ece74746":"code","3d58cbcf":"code","5aa32041":"code","0d56a81a":"code","1aa486bd":"code","fa2784f8":"code","3577cece":"code","7e2a62ea":"code","5e11d480":"code","8c5abc8c":"code","90e5e7a1":"code","7a52a39f":"code","f0cadae5":"code","25387a6c":"code","0760e7fa":"code","07f415df":"code","521dc5a5":"code","2c6e88f8":"code","764f10f0":"code","dc09883f":"markdown","f9d74254":"markdown","8999c54a":"markdown","d67e0af3":"markdown","917fdbc1":"markdown","efe52f03":"markdown","a766c396":"markdown"},"source":{"51169567":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.models import Sequential\nfrom keras.optimizers import SGD","87fe7233":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nfull = pd.concat([train,test],ignore_index=True)","69171f54":"full.head()","362161cd":"full.drop([\"PassengerId\"],axis=1,inplace=True)","ece74746":"full.info()","3d58cbcf":"train.isna().mean()","5aa32041":"# Replace the NaN values with \"Unknown\" and \"Known\" for the other ones\nlab = lambda x : \"Known\" if type(x) == str else \"Unknown\"\nfull[\"Cabin\"] = full[\"Cabin\"].apply(lab)","0d56a81a":"full.groupby(\"Cabin\").mean()[\"Survived\"].plot(kind=\"bar\",ylabel=\"Survival rate\")","1aa486bd":"# Creating a categorical variable for the passenger's title\ntext = []\nfor i in full[\"Name\"]:\n    text.append(i.split(\",\")[1].split(\".\")[0].strip())\nfull[\"Name\"] = text\n\n\nfull['Name'] = full['Name'].replace(['Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\nfull['Name'] = full['Name'].replace(['the Countess', 'Lady', 'Sir'], 'Royal')\nfull['Name'] = full['Name'].replace('Mlle', 'Miss')\nfull['Name'] = full['Name'].replace('Ms', 'Miss')\nfull['Name'] = full['Name'].replace('Mme', 'Mrs')","fa2784f8":"full.head()","3577cece":"# Label Encoding and One Hot Encoding for categorical features\nfull[\"Sex\"] = LabelEncoder().fit_transform(full[\"Sex\"])\nfull[\"Cabin\"] = LabelEncoder().fit_transform(full[\"Cabin\"])\n\nfull = pd.concat([full,pd.get_dummies(full[\"Name\"])],axis=1)\nfull.head(10)","7e2a62ea":"full.groupby(\"Name\").mean()[\"Age\"]","5e11d480":"# So what i'm doing here is, replacing the median age for each name title\n\nfor i in full[\"Name\"].unique():\n    full.loc[(full[\"Age\"].isnull()) & (full[\"Name\"] == i),\"Age\"] = full.loc[(full[\"Age\"].isnull()) & (full[\"Name\"] == i),\"Age\"].replace(np.nan,full.groupby(\"Name\").mean()[\"Age\"][i])","8c5abc8c":"full.isna().mean()","90e5e7a1":"train = full[ :891]\ntest  = full[891: ]","7a52a39f":"# Selecting the useful columns \nfeatures = [\"Age\",\"Fare\",\"Pclass\",\"Sex\",\"Cabin\",\"Master\",\"Miss\",\"Mr\",\"Mrs\",\"Rare\",\"Royal\"]","f0cadae5":"x = train[features]\ny = train[\"Survived\"]","25387a6c":"# The final dataset\nx.head()","0760e7fa":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)","07f415df":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","521dc5a5":"# Set the random seed for reproducible results\nseed_value= 0\n\nimport os\nos.environ['PYTHONHASHSEED']=str(seed_value)\n\nimport random\nrandom.seed(seed_value)\n\nimport numpy as np\nnp.random.seed(seed_value)\n\nimport tensorflow as tf\ntf.random.set_seed(seed_value)\n\nmodel = Sequential()\nmodel.add(Dense(64,input_dim=11))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2))\nmodel.add(Activation(\"softmax\"))\n\ny_train = pd.get_dummies(y_train)\n\nopt = SGD(learning_rate=0.1)\n\nmodel.compile(optimizer= opt ,loss = \"categorical_crossentropy\" , metrics = [\"accuracy\"])\nmodel.fit(x_train,y_train,epochs=50,batch_size=64,validation_split=0.1)","2c6e88f8":"preds = model.predict_classes(x_test)\nsns.heatmap(confusion_matrix(y_test,preds),annot=True)","764f10f0":"submission = model.predict_classes(scaler.transform(test[features]))\n","dc09883f":"***MODELING***","f9d74254":"Known values has higher survival rate","8999c54a":"**Age**","d67e0af3":"* 77% of the values in the Cabin column and almost 20% in the Age column are missing. \n* We can fill the nan values in the Age column. \n*  You can drop the Cabin column. But i think it can be useful.","917fdbc1":"**Submission**","efe52f03":"**Cabin**","a766c396":"**Name**"}}