{"cell_type":{"ad4db0fc":"code","3b759d0c":"code","140d94db":"code","237c6e9d":"code","f065fff7":"code","57c05176":"markdown"},"source":{"ad4db0fc":"import os\n\ntrain_path = \"..\/input\/cat-and-dog\/training_set\/training_set\/\"\ntest_path = \"..\/input\/cat-and-dog\/test_set\/test_set\/\"\n\nprint(os.listdir(train_path))\nprint(os.listdir(test_path))","3b759d0c":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_gen = ImageDataGenerator(rescale=1.\/255, zoom_range = 0.2,\n                               rotation_range=40, horizontal_flip= True)\n\ntest_gen = ImageDataGenerator(rescale=1.\/255)\n\ntrain = train_gen.flow_from_directory(train_path, target_size=(224,224),\n                                      batch_size=32, class_mode = \"binary\")\n\ntest = test_gen.flow_from_directory(test_path, target_size=(224,224),\n                                      batch_size=32, class_mode = \"binary\")","140d94db":"from tensorflow.keras.models import Sequential\nmodel = Sequential()\n\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.optimizers import Adam\n\nmodel.add(Conv2D(32, (3,3), padding=\"SAME\", activation=\"relu\", input_shape = (224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3), padding=\"SAME\", activation=\"relu\", input_shape = (224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3,3), padding=\"SAME\", activation=\"relu\", input_shape = (224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128, (3,3), padding=\"SAME\", activation=\"relu\", input_shape = (224,224,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation=\"relu\"))\n\nmodel.add(Dense(1, activation=\"sigmoid\"))\n\nmodel.compile(Adam(lr=0.001), loss = \"binary_crossentropy\", metrics=\"accuracy\")","237c6e9d":"from tensorflow.keras.callbacks import EarlyStopping\nearly = EarlyStopping(monitor = \"val_loss\", patience = 2)\n\nmodel.fit(train, epochs=50, validation_data=test, callbacks=[early])","f065fff7":"# Making single prediction\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img(\"..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4004.jpg\", target_size = (224, 224))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = model.predict(test_image)\ntrain.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)","57c05176":"As you can see difference between loss and val_loss is getting higher it is because i setted patience to 20 but\ni have changed it to 2 so it will fix that if your run it in your machine"}}