{"cell_type":{"94a5cac8":"code","04a3bb1f":"code","934e8783":"code","91e8f8e2":"code","4b1c7600":"code","87ed0ab6":"code","e11016ae":"code","a9783775":"code","041a0c26":"code","e0310adc":"code","80ea08af":"code","24fd30a1":"code","af06f14d":"code","4d0c9b70":"code","6060b3da":"code","8720cb51":"code","63d2230f":"code","62e04595":"code","6a00a550":"code","7a26c563":"code","944bfc82":"code","3a7e7d76":"code","b336dd74":"code","d0ad4616":"code","eaa7de1e":"code","aa89e3bc":"code","497c399f":"code","42b484ab":"code","a69730cf":"code","d8275bea":"code","68be125f":"code","fdcf3843":"code","f8002841":"code","8380cf7f":"code","7565d75b":"code","24fd76cc":"code","fae5dad3":"code","631634c1":"code","28ab4bae":"code","dad5acd2":"code","045b568b":"code","a7c8a48d":"code","63094452":"code","24813cf0":"code","d627aba3":"code","b9d5cbf7":"code","6a0c0e13":"code","b2eed8bd":"code","0c6c3c17":"code","fe9c981d":"code","ef8a6484":"code","2fae4486":"code","d33970da":"code","21d0f7bd":"code","ad32c6a1":"code","2c7da78e":"code","49fe91b6":"markdown","4dc04b0c":"markdown","346f1249":"markdown","f132b651":"markdown","b411b4f8":"markdown","dfa92886":"markdown","7bd1b3ff":"markdown","3ba7a86d":"markdown","f268ad9d":"markdown","353a0840":"markdown","99b95232":"markdown","b69a1a9c":"markdown","843fc280":"markdown","6c2234d0":"markdown","9c08bdb2":"markdown","fa15e50b":"markdown","407fac33":"markdown","1438fd02":"markdown","492ac163":"markdown","d1d93d81":"markdown","cf9eb1f1":"markdown","6e18655d":"markdown","45dd8a38":"markdown","2cf5a9af":"markdown","d58f5a32":"markdown","105cf3b1":"markdown","dabf0977":"markdown","28cff499":"markdown","7ecfb1d5":"markdown","8bf2f72c":"markdown","70cb0b82":"markdown","5895232f":"markdown","874f6073":"markdown","31468ea1":"markdown","72c10a2e":"markdown","37a15089":"markdown","9af86b9b":"markdown","13b1a7ac":"markdown","c73c169e":"markdown","27537f32":"markdown"},"source":{"94a5cac8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","04a3bb1f":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ntrain_df.head()","934e8783":"train_df.info()","91e8f8e2":"test_df.info()","4b1c7600":"sns.countplot('Survived', data=train_df)","87ed0ab6":"train_df.describe()","e11016ae":"#\ubb38\uc790\uc5f4 \ub370\uc774\ud130\ntrain_df.describe(include=['O'])","a9783775":"pd.crosstab(train_df['Pclass'], train_df['Survived'], margins=True)","041a0c26":"train_df[['Pclass', 'Survived']].groupby('Pclass', as_index=False).mean()","e0310adc":"pd.crosstab(train_df['Sex'], train_df['Survived'], margins=True)","80ea08af":"plt.xticks(np.arange(0,84,4))\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.hist(train_df['Age'], bins=20)","24fd30a1":"g = sns.FacetGrid(train_df, col='Survived', height=7)\ng.map(plt.hist, 'Age', bins=20)","af06f14d":"train_df['Tmp']=\"\"\nplt.figure(figsize=(18,8))\nplt.xticks(np.arange(0,110,5))\nsns.violinplot('Age', 'Tmp', hue='Survived', data=train_df, scale='count', split=True).set_title('Age vs Survived')\ntrain_df.drop('Tmp', axis=1, inplace=True)","4d0c9b70":"cummulate_survival_ratio = []\nfor i in range(1,80):\n    survival_ratio = train_df.loc[train_df['Age'] < i , 'Survived'].sum() \/ len(train_df.loc[train_df['Age'] < i, 'Survived'])\n    cummulate_survival_ratio.append(survival_ratio)\nplt.plot(cummulate_survival_ratio)","6060b3da":"plt.figure(figsize=(18,8))\nplt.yticks(np.arange(0,110,10))\nsns.violinplot('Pclass', 'Age', hue='Survived', data=train_df, scale='count', split=True, inner='stick').set_title('Pclass and Age vs Survived')","8720cb51":"plt.figure(figsize=(18,8))\nplt.yticks(np.arange(0,110,10))\nsns.violinplot('Sex', 'Age', hue='Survived', data=train_df, scale='count', split=True).set_title('Sex and Age vs Survived')","63d2230f":"sns.pointplot('Pclass', 'Survived', hue='Sex', data=train_df, height=5)","62e04595":"pd.crosstab(train_df['Embarked'], train_df['Survived'], margins=True)","6a00a550":"train_df[['Embarked', 'Survived']].groupby('Embarked', as_index=False).mean()","7a26c563":"plt.xlabel('Fare')\nplt.ylabel('Count')\nplt.hist(train_df['Fare'], bins=40)","944bfc82":"plt.xlabel('Fare')\nplt.ylabel('Count')\nplt.hist(test_df['Fare'], bins=40)","3a7e7d76":"#test_df['Fare']\uc5d0 null \uac12\uc774 1\uac1c \uc874\uc7ac\ud558\ubbc0\ub85c, \ubbf8\ub9ac \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6cc\uc900\ub2e4.\ntest_df['Fare'].fillna(test_df['Fare'].median(), inplace=True)\n\nprint(train_df['Fare'].describe())\n\ncombine = [train_df, test_df]\nfor dataset in combine:\n    dataset['Fare'] = dataset['Fare'].apply(lambda x : 10 * np.log(x) if x>0 else 0)\n\nprint(train_df['Fare'].describe())\n\nplt.xlabel('Fare')\nplt.ylabel('Count')\nplt.hist(train_df['Fare'], bins=40)","b336dd74":"train_df['Tmp']=\"\"\nplt.figure(figsize=(18,8))\nplt.xticks(np.arange(0,110,5))\nsns.violinplot('Fare', 'Tmp', hue='Survived', data=train_df, scale='count', split=True).set_title('Fare vs Survived')\ntrain_df.drop('Tmp', axis=1, inplace=True)","d0ad4616":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n\nsns.countplot(train_df['FamilySize'])","eaa7de1e":"sns.barplot('FamilySize', 'Survived', data=train_df, ci=None)","aa89e3bc":"Embarked_mapping = {'C':0, 'Q':1, 'S':2}\nfor dataset in combine:\n    dataset['Embarked'].fillna('S', inplace=True)\n    dataset['Embarked'].replace({'C':0, 'Q':1, 'S':2}, inplace=True)\n    dataset['Sex'].replace({'female':1, 'male':0}, inplace=True)\n","497c399f":"sns.heatmap(train_df[['Age', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize']].corr(), annot=True, square=True)","42b484ab":"pc_values = [1,2,3]\nfs_values = [1,2,3,4,5,6,7,8,11]\nfor dataset in combine:\n    for i in pc_values:\n        for j in fs_values:\n            #Pclass\uc640 FamilySize\uac00 \uac19\uc740 \uadf8\ub8f9\uc5d0\uc11c\uc758 \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6cc\uc904\uac70\ub2e4\n            age_guess = dataset.loc[(dataset['Pclass']==i)&(dataset['FamilySize']==j), 'Age'].dropna().median()\n            dataset.loc[(dataset['Pclass']==i)&(dataset['FamilySize']==j&(dataset['Age'].isnull())), 'Age'] = age_guess\n","a69730cf":"for dataset in combine:\n    age = dataset['Age'].dropna().median()\n    dataset['Age'].fillna(age, inplace=True)","d8275bea":"print(train_df.info())\nprint(test_df.info())","68be125f":"plt.hist(train_df['Age'], bins=20)\nplt.hist(test_df['Age'], bins=20)","fdcf3843":"cut_bins = [0,10,35,65,200]\ncut_label = [3, 1, 2, 0] #\uc0dd\uc874\uc728\uc774 \ub192\uc740 \uad6c\uac04\uc774 3, \uc81c\uc77c \ub0ae\uc740 \uad6c\uac04\uc774 0\nfor dataset in combine:\n    dataset['AgeBand'] = pd.cut(train_df['Age'], bins=cut_bins, labels=cut_label, include_lowest=True)\n    dataset['AgeToCat'] = dataset['AgeBand'].astype(int)","f8002841":"train_df[['AgeToCat', 'Survived']].groupby('AgeToCat', as_index=False).mean()","8380cf7f":"plt.hist(train_df['Fare'], bins=20)\nplt.hist(test_df['Fare'], bins=20)","7565d75b":"for dataset in combine:\n    dataset['FareBand'] = pd.qcut(train_df['Fare'], 4)","24fd76cc":"train_df[['FareBand', 'Survived']].groupby('FareBand', as_index=False).mean()","fae5dad3":"for dataset in combine:\n    dataset['FareToCat'] = 0\n    dataset.loc[(dataset['Fare'] > 20.682) & (dataset['Fare'] <= 26.71), 'FareToCat'] = 1\n    dataset.loc[(dataset['Fare'] > 26.71) & (dataset['Fare'] <= 34.34), 'FareToCat'] = 2\n    dataset.loc[ dataset['Fare'] > 34.34, 'FareToCat'] = 3\ntrain_df.head()","631634c1":"train_df[['FareToCat', 'Survived']].groupby('FareToCat', as_index=False).mean()","28ab4bae":"for dataset in combine:\n    dataset['Initial'] = dataset['Name'].str.extract(r'([A-Za-z]+)\\.')","dad5acd2":"def color(x):\n    c = 'red' if x ==0 else 'black'\n    return 'color : {}'.format(c)\npd.crosstab(train_df['Sex'], train_df['Initial']).style.applymap(color)","045b568b":"pd.crosstab(test_df['Sex'], test_df['Initial']).style.applymap(color)","a7c8a48d":"pd.crosstab(train_df['Survived'], train_df['Initial'])","63094452":"for dataset in combine:\n    dataset['InitialToCat'] = 5 #other initial\n    dataset.loc[dataset['Initial'].isin(['Rev', 'Mr']), 'InitialToCat'] = 1 # Mr\uc774 1\n    dataset.loc[dataset['Initial'].isin(['Mlle', 'Mme', 'Ms', 'Miss']), 'InitialToCat'] = 2 # Miss\uac00 2\n    dataset.loc[dataset['Initial'].isin(['Mme', 'Mrs']), 'InitialToCat'] = 3 # Mrs\uac00 3\n    dataset.loc[dataset['Initial']=='Master', 'InitialToCat'] = 4 # Master\uac00 4\npd.crosstab(train_df['Survived'], train_df['InitialToCat'])","24813cf0":"train_df[['InitialToCat', 'Survived']].groupby('InitialToCat', as_index=False).mean()","d627aba3":"#0: 5~ \/ 1: 1~2 \/ 2: 3~4\ncut_bins = [1,3,5,100]\ncut_label = [1, 2, 0] \nfor dataset in combine:\n    #dataset['AgeBand'] = pd.qcut(train_df['Age'], 5)\n    #dataset['AgeBand'] = pd.cut(train_df['Age'], 5)\n    dataset['FamilyToCat'] = pd.cut(train_df['FamilySize'], bins=cut_bins, labels=cut_label, include_lowest=True)\n    dataset['FamilyToCat'] = dataset['FamilyToCat'].astype(int)","b9d5cbf7":"train_df[['FamilyToCat','Survived']].groupby('FamilyToCat', as_index=False).mean().sort_values(by='Survived')","6a0c0e13":"train_df.info()","b2eed8bd":"train_df.drop(['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'AgeBand', 'FareBand', 'Initial', 'FamilySize'], axis=1, inplace=True)\ntest_df.drop(['Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'AgeBand', 'FareBand', 'Initial', 'FamilySize'], axis=1, inplace=True)","0c6c3c17":"train_df.info()","fe9c981d":"test_df.info()","ef8a6484":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nknn = KNeighborsClassifier(n_neighbors=8)\ndt = DecisionTreeClassifier(max_depth=5, random_state=0)\nvo = VotingClassifier(estimators=[('LR',lr), ('KNN',knn), ('DT', dt)], voting='soft')\nrf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0)\n\ny_train_df = train_df['Survived']\nx_train_df = train_df.drop('Survived', axis=1)\nx_test_df = test_df.drop('PassengerId', axis=1)\n\nscores = cross_val_score(vo, x_train_df, y_train_df, scoring='accuracy', cv=10)\nprint(np.mean(scores))\nscores = cross_val_score(rf, x_train_df, y_train_df, scoring='accuracy', cv=10)\nprint(np.mean(scores))","2fae4486":"dt.fit(x_train_df, y_train_df)\nrf.fit(x_train_df, y_train_df)\nimportants = pd.Series(dt.feature_importances_, index=x_train_df.columns)\nprint(importants.sort_values(ascending=False))\nimportants = pd.Series(rf.feature_importances_, index=x_train_df.columns)\nprint(importants.sort_values(ascending=False))","d33970da":"def make_other_x(df):\n    other_x = df.copy()\n    other_x['FamilyAge'] = other_x['FamilyToCat'] * other_x['AgeToCat']\n    return other_x\nother_x = make_other_x(x_train_df)\nother_x.head()","21d0f7bd":"scores = cross_val_score(vo, other_x, y_train_df, scoring='accuracy', cv=10)\nprint(np.mean(scores))\nscores = cross_val_score(rf, other_x, y_train_df, scoring='accuracy', cv=10)\nprint(np.mean(scores))\n\ndt.fit(other_x, y_train_df)\nrf.fit(other_x, y_train_df)\nimportants = pd.Series(dt.feature_importances_, index=other_x.columns)\nprint(importants.sort_values(ascending=False))\nimportants = pd.Series(rf.feature_importances_, index=other_x.columns)\nprint(importants.sort_values(ascending=False))","ad32c6a1":"other_x_test = make_other_x(x_test_df)\n\nrf.fit(other_x, y_train_df)\ny_pred = rf.predict(other_x_test)\nprint(y_pred.shape)\ny_pred","2c7da78e":"submit = pd.DataFrame({'PassengerId':test_df['PassengerId'], 'Survived':y_pred})\nprint(submit.head())\nsubmit.to_csv('submit.csv', index=False)","49fe91b6":"1. \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0\uc11c \ub098\uc774\uac00 \uc5b4\ub9ac\uba74 \uc0dd\uc874\uc728\uc774 \uc62c\ub77c\uac04\ub2e4.\n2. female\uc740 pclass\uc640\ub294 \uc0c1\uad00\uc5c6\uc774 \ud56d\uc0c1 male\ubcf4\ub2e4 \uc0dd\uc874\uc728\uc774 \ub192\ub2e4.\n3. sex\uc640 \uc0c1\uad00\uc5c6\uc774 pclass\uac00 \ub192\uc544\uc9c0\uba74 \uc0dd\uc874\uc728\uc740 \ub5a8\uc5b4\uc9c4\ub2e4.","4dc04b0c":"# *4.\ubaa8\ub378 \ud6c8\ub828, \uc608\uce21*","346f1249":"1. lr, knn, dt\ub97c \uc774\uc6a9\ud55c soft voting\uacfc random forest \ub450 \ubaa8\ub378\uc744 \ube44\uad50\ud558\uc5ec \ub354 \uc88b\uc740 \uacb0\uacfc\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\ub2e4.\n2. \ud3c9\uac00 \ubc29\ubc95\uc740 cross_val_score\ub97c \ud1b5\ud574 \uad50\ucc28\uac80\uc99d\uc73c\ub85c \ud310\ubcc4\ud560 \uac83\uc774\ub2e4.","f132b651":"## 3.7 Drop","b411b4f8":"Banding\ud558\uae30 \uc804\uc5d0 \uc6b0\uc120 test_df\uc640 train_df\uc5d0\uc11c age\uc758 \ubd84\ud3ec\ub97c \ubcf4\uc790.","dfa92886":"## 2.6 Fare","7bd1b3ff":"* version 3 : Age band\uc640 Fare band\ub97c qcut\uc5d0\uc11c cut\uc73c\ub85c \ubc14\uafc8. 0.74162 -> 0.76555\n* version 4 : Embarked\ub97c one-hot encoding\ud568. 0.76555 -> 0.76555\n* version 5 : Pclass\ub3c4 one-hot encoding + \ubc34\ub4dc cut \uac1c\uc218 \ub298\ub9bc. 0.76555 -> 0.73684\n* version 6 : version2\ub85c \ub3cc\uc544\uac00\uc11c initial \uc548 \uc5c6\uc560\uace0 qcut\uc5d0\uc11c cut\uc744 \ubc14\uafc8. 0.73684 -> 0.75?\n* version 7 : inital\ud558\ub294 \ubc95 \uc61b\ub0a0\uaebc\ub85c \ubc14\uafc8 \/ age\ub97c cut\uc73c\ub85c \ub2e4\uc2dc \ub3cc\ub9bc \/ \ubaa8\ub378 predict \ud558\uae30 \uc804\uc5d0 \uc5ec\ub7ec feature\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub193\uc74c.(\uc774\ubc88\uc5d0\ub294 familysize\uc5c6\uc560\uace0 isalone \ub9cc* \ub4e4\uc5b4\ubd04) -> 0.76555\n* version 8 : cut \uad6c\uac04 \uc870\uc815 \/ \ub2e4\ub978 feature \ub354 \ub9cc\ub4e4\uc5b4\ubcf4\uc790... -> 0.789\n* version 9 : Age\ub791 Fare \uad6c\uac04 \ub0b4\uac00 \uc9c1\uc811 \ubcf4\uace0 \uc124\uc815 \/ feature_importance_\ub85c feature\ub4e4 \ub2e4\uc2dc \uac80\ud1a0 \/ one-hot encoding \/ max_depth \uc81c\ud55c -> 0.789\n* version 10 : Age\\*Class \uc0ad\uc81c \/ min_samples_split \ucd94\uac00 -> 0.784\n* version 11 : \ub300\uaddc\ubaa8 \uacf5\uc0ac... \uc774\uac8c \uadf8\ub098\ub9c8 \uc81c\uc77c \ucd5c\uc120\uc778\ub4ef -> 0.7799 tq...\n* version 12 : Age \uc5c6\uc560\uc11c \ucd1d feature 3\uac1c(initial, pclass, familysize) \/ \uae4a\uc7745 \ucd5c\uc18c\ubd84\ud560\uac1c\uc2182 -> 0.7799\n* version 13 : \uc2e4\uc218\ub85c \uc798\ubabb\ub0c4\n* version 14 : randomforest\ub85c \ubc14\uafc8 \/ family*age \ucd94\uac00 -> 0.784\n* version 15 : \uc2e4\uc218\ub85c \uc798\ubabb\ub0c4\n* version 16 : soft voting\uc73c\ub85c \ubc14\uafc8 \/ \ub9e8 \ub9c8\uc9c0\ub9c9\uc5d0 \uc911\uc694\ub3c4\ub85c drop\ud588\ub358 \uc18d\uc131\ub4e4 \ub2e4 \ubcf5\uadc0, family\\*age \ucd94\uac00 -> 0.75\n* version 17 : \uc815\ud655\ub3c4 \ub5a8\uc5b4\uc9c4 \uac83\uc73c\ub85c \ubcf4\uc544 overfitting \ubc1c\uc0dd \ud55c \ub4ef, randomforest\ub85c \ubc14\uafd4\ubcf4\uc790. -> 0.80!!!\n* version 18 : \ucd5c\uc885\ubcf8 \/ \uc8fc\uc11d \uc815\ub9ac \ub2e4 \ud568","3ba7a86d":"PassengerId(test\uc5d0\uc11c\ub294 \uc9c0\uc6b0\uba74 \uc548 \ub428!), Name, Age, SibSp, Parch, Ticket, Fare, Cabin, AgeBand, FareBand, Initial, FamilySize\ub294 \uc0ad\uc81c\ud574\ub3c4 \ub428","f268ad9d":"## 3.3 Fare banding","353a0840":"FamilySize\uc640 Pclass\uac00 \ub3d9\uc77c\ud55c \ub2e4\ub978 \ud0d1\uc2b9\uac1d\uc774 \uc5c6\ub2e4\uba74 \ucc44\uc6cc\uc9c0\uc9c0 \uc54a\uc558\uc744 Age\uac12\ub3c4 \uc788\uc5c8\uc744 \uac83\uc774\ub2e4. \uc774\ub294 \uadf8\ub0e5 median\uc73c\ub85c \ucc44\uc6cc\uc8fc\uc790.","99b95232":"1. 20~36\uc138\uc758 \ud0d1\uc2b9\uac1d \uc218\uac00 \uac00\uc7a5 \ub9ce\uc74c\n2. \ud558\uc9c0\ub9cc 20~36\uc138\uc758 \ud0d1\uc2b9\uac1d \uc911 \uc0ac\ub9dd\ud55c \uc0ac\ub78c\ub3c4 \ub9ce\uc74c\n3. \ub098\uc774\uac00 \ub9e4\uc6b0 \uc5b4\ub9b4 \ub54c \uc0dd\uc874\ub960\uc740 \uc0c1\ub2f9\ud788 \ub192\uc74c\n4. Age\uac00 Survived\uc640 \uc120\ud615\uad00\uacc4\ub97c \uac00\uc9c0\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \uc911\uc694\ud55c feature\ub85c \uc791\uc6a9\ud560 \uac83\uc740 \ud655\uc2e4\ud568\n5. \ub098\uc911\uc5d0 Age band\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc0ac\uc6a9\ud574\uc57c\ud560 \ub4ef\n6. 0~10, 10~25, 25~35, 35~65, 65~ \ub85c \ub098\ub220\ubcf4\uc790","b69a1a9c":"# *3. Feature Engineering*","843fc280":"log\ub97c \ucde8\ud574\uc8fc\ub2c8 standard deviation\uac00 \ud604\uc800\ud788 \uc904\uc5b4\ub4e0 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","6c2234d0":"1. female\uc774 male\ubcf4\ub2e4 \uc801\uc9c0\ub9cc, \uc0b4\uc544\ub0a8\uc740 female\uc774 \ud6e8\uc52c \ub9ce\uc74c\n2. \uc131\ubcc4\uc5d0 \ub530\ub77c Survived\uac00 \ucc28\uc774\uac00 \uc2ec\ud558\ubbc0\ub85c \uc911\uc694\ud55c feature\ub85c \uc791\uc6a9\ud560 \ub4ef","9c08bdb2":"## 2.1 Pclass","fa15e50b":"# *2.\ub370\uc774\ud130 \ud0d0\uc0c9*","407fac33":"1. S\uc5d0 \uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ud0d4\uc9c0\ub9cc, \uc0dd\uc874\uc728\uc740 \uc81c\uc77c \ub0ae\ub2e4.\n2. C -> Q -> S \uc21c\uc73c\ub85c \uc0dd\uc874\uc728\uc774 \ub5a8\uc5b4\uc9c4\ub2e4.\n3. C -> Q -> S \uc21c\uc73c\ub85c 0,1,2 \ud574\uc8fc\uc5b4\uc11c \uc870\uae08\uc774\ub098\ub9c8\uc758 correlation\uc774\ub77c\ub3c4 \ucc59\uae30\uc790. ","1438fd02":"## 2.3 Age","492ac163":"## 2.4 Pclass, Sex, Age","d1d93d81":"## 2.5 Embarked","cf9eb1f1":"1. \ud63c\uc790 \ud0c4 \uc0ac\ub78c\uc774 \uc81c\uc77c \ub9ce\ub2e4.\n2. 4\uba85\uc77c \ub54c \uc0dd\uc874\uc728\uc774 \uc81c\uc77c \uc62c\ub77c\uac00\uace0, \uac00\uc871\uc218\uac00 \ub9ce\uc544\uc9c0\uac70\ub098 \uc801\uc5b4\uc9c0\uba74 \uc0dd\uc874\uc728\uc774 \ub5a8\uc5b4\uc9c4\ub2e4.\n3. 3~4, 1~2, 5~ \ub85c \uad6c\uac04 \ub098\ub220\ubcf4\uc790.","6e18655d":"## 3.6 FamilySize banding","45dd8a38":"## 3.1 null data\n* Age\uc758 null \uac12\uc774 \uc0c1\ub2f9\ud788 \ub9ce\uc73c\ubbc0\ub85c , Age\uc640 correlation\uc774 \ub192\uc740 \ud2b9\uc131\ub4e4\uc744 \uc774\uc6a9\ud558\uc5ec null\uac12\uc744 \ucc44\uc6cc\uc904 \uac70\ub2e4.\n* \uadf8 \uc804\uc5d0 \ubbf8\ub9ac Emabarked\uc640 Sex\ub97c \uc22b\uc790 \ub370\uc774\ud130\ub85c \ubc14\uafb8\uc5b4\uc8fc\uace0, null\uac12\ub3c4 \ucc44\uc6cc\uc918\uc57c \ud558\ub294\ub370 Embarked\ub294 null\uac12\uc774 \uc5bc\ub9c8 \uc5c6\uc73c\ubbc0\ub85c \uadf8\ub0e5 median(S\uac00 \uc81c\uc77c \ub9ce\uc558\ub2e4)\uc73c\ub85c \ucc44\uc6cc\uc8fc\uc790.","2cf5a9af":"1. \uc131\uc744 \ucd1d \ub2e4\uc12f\uac00\uc9c0, 1:Mr \/ 2:Miss \/ 3:Mrs \/ 4:Master \/ 5:other \ub85c \ub098\ub20c\uac70\uc784.\n2. Master\uc744 \ub0a8\uc790\ub85c \ub123\uae30\uc5d0\ub294 \uc0dd\uc874\uc728\uc774 \uc0c1\ub2f9\ud788 \ub192\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ubd84\ub958.\n3. Miss\uc640 Mrs\ub97c \ud569\uce58\uae30\uc5d0\ub294 \uc774 \ub450 \uc9d1\ub2e8\uc758 \uc218\uac00 \uc880 \ub9ce\uc544\uc11c \uc548 \uc88b\uc744 \uac83 \uac19\uc74c.\n4. Mlle\ub098 Mme\uac00 Miss\uc640 Mrs\ub85c \ub4e4\uc5b4\uac00\ub294 \uac74 \uc678\uad6d \ucee4\ub110\uc744 \ucc38\uc870\ud574\uc11c \ud588\uc74c. \ubbf8\uad6d \ubb38\ud654\uc5d0\uc11c \uc4f0\uc774\ub294 \uc131\uc528 \ubb50 \uadf8\ub7f0\uac70\uc77c\ub4ef.","d58f5a32":"* \uc704\uc5d0\uc11c violinplot\uc73c\ub85c \ubcf8\ub300\ub85c, 0~10, 10~35, 35~65, 65~ \ub85c \ub098\ub220\ubcf4\uc790\n* \uc0dd\uc874\uc728 \uc21c\uc11c\ub300\ub85c 3 : 0~10 \/ 1 : 10~35 \/ 2 : 35~65 \/ 0 : 65~ \uac00 \ub41c\ub2e4.","105cf3b1":"1. Fare\uc758 \ubd84\ud3ec\uac00 \uc55e\ucabd\uc5d0 \ub9e4\uc6b0 \ubab0\ub824 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.\n2. \uc774\ub294 \ubaa8\ub378 \ud6c8\ub828 \ud6c4 \uc608\uce21 \uc2dc\uc5d0 \uc870\uae08\uc758 \ucc28\uc774\uc5d0\ub3c4 \ub9e4\uc6b0 \ubbfc\uac10\ud558\uac8c \ubc18\uc751\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uc88b\uc9c0 \uc54a\ub2e4.\n3. scaler\ub97c \ud1b5\ud574 \uc870\uae08 \ubd84\uc0b0\uc2dc\ucf1c\uc8fc\uc5b4\ubd24\uc790 \uc5b4\ucc28\ud53c \uc911\uc559\uc73c\ub85c \ubab0\ub9ac\uac8c \ub418\ubbc0\ub85c \uc774\ub294 \uc758\ubbf8 \uc5c6\uc744 \ub4ef.\n4. \ub300\uc2e0\uc5d0 log\uac12\uc744 \ucde8\ud574\uc11c \uc870\uae08 \ub354 \ub113\uac8c \ud3b4\uc8fc\uc790.","dabf0977":"## 3.4 Name -> Initial","28cff499":"## 3.2 Age banding","7ecfb1d5":"## 2.7 FamilySize = SibSp + Parch","8bf2f72c":"* age band\uc5d0 \ub530\ub978 \uc0dd\uc874\uc728\uc774 \uc9c0\uae08\uae4c\uc9c0 \uad00\ucc30\ud55c \uac83\uacfc \uc5b4\ub290\uc815\ub3c4 \uc77c\uce58\n* age band\ub294 category\ud615 \ub370\uc774\ud130\uc774\ubbc0\ub85c \uc774\ub97c int \ud0c0\uc785\uc73c\ub85c \ubc14\uafbc \uac83\uc774 AgeToCat\uc774\ub2e4.","70cb0b82":"* test\uc640 train\uc5d0\uc11c fare\uc758 \ubd84\ud3ec\uac00 \ube44\uc2b7\ud558\ubbc0\ub85c \ub3d9\uc77c\ud55c \uac1c\uc218\ub300\ub85c \ub098\ub220\uc8fc\ub294 qcut\uc744 \uc0ac\uc6a9\ud558\uc790\n* \uc0ac\uc2e4 age\ucc98\ub7fc \uc9c1\uc811 \uad6c\uac04\uc744 \ub098\ub220\ubcf4\uc558\ub294\ub370, \uacb0\uacfc\uac00 \ub354 \uc548 \uc88b\uc544\uc84c\ub2e4...","5895232f":"\uc774\ub984\uc5d0\uc11c \uc131\uc528\ub9cc \ucd94\ucd9c\ud55c Initial \ud2b9\uc131\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uc790","874f6073":"## 2.2 Sex","31468ea1":"# *1.\ub370\uc774\ud130 \uc77d\uae30, \ub300\ub7b5\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uae30*","72c10a2e":"Age\ub098 Fare\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc0dd\uc874\uc728 \uc21c\uc11c\ub300\ub85c \uc22b\uc790\ud615 \ub370\uc774\ud130\ub85c \ubc14\uafd4\uc90c\uc73c\ub85c\uc368 \uc870\uae08\uc758 correlation\uc774\ub77c\ub3c4 \ucc59\uae30\ub824 \ud568.","37a15089":"* \uacb0\uacfc \uc0c1\uc2b9\ub9cc \ubcf4\uba74 soft voting\uc774 \ub354 \ub9ce\uc774 \uc0c1\uc2b9\ud588\uc9c0\ub9cc, \uc2e4\uc81c submit\ud574\ubcf8 \uacb0\uacfc random forest\uac00 \ub354 \uc88b\uac8c \ub098\uc654\ub2e4.\n* random forest\uac00 over fitting\uc5d0 \ub354 \uac15\ud55c \ubaa8\uc2b5\uc744 \ubcf4\uc5ec\uc8fc\uc5c8\ub2e4. \n* \uc911\uc694\ub3c4\uc5d0\uc11c random forest\uc758 \uacbd\uc6b0 decisoin tree\ubcf4\ub2e4 \ub354 \uace8\uace0\ub8ec \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uc774\uac83\uc774 \uc5f0\uad00 \ub418\uc5b4\uc788\ub294\ub4ef \ud558\ub2e4.","9af86b9b":"Pclass\uc640 Survived\ub294 \uac15\ud55c correlation\uc744 \uac00\uc9c0\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","13b1a7ac":"Pclass\uc640 FamilySize\uac00 \uc0c1\ub300\uc801\uc73c\ub85c Age\uc640 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\uc73c\ubbc0\ub85c, \uc774\ub4e4\uc744 \uc774\uc6a9\ud574\uc11c null\uac12\uc744 \ucc44\uc6cc\uc8fc\uc790","c73c169e":"* \uc0ac\uc2e4 SibSp\uc640 Parch\ub97c \ud569\uccd0\uc11c FamilySize\ub97c \ub9cc\ub4dc\ub294 \uac74 \ub370\uc774\ud130 \ud0d0\uc0c9\uc5d0\uc11c \ud560 \uc77c\uc740 \uc544\ub2c8\ub2e4.\n* \uadf8\ub798\ub3c4 \uc9c1\uad00\uc801\uc73c\ub85c \ub458\uc744 \ud569\uce5c FamilySize\uac00 \uc0dd\uc874\uc5d0 \ub354 \uc601\ud5a5\uc744 \ubbf8\uce60 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc774\ub807\uac8c \ud55c \ud6c4\uc5d0 \uc0dd\uc874\uc728\uc744 \uc0b4\ud3b4\ubcf4\uc790.","27537f32":"\uc911\uc694\ub3c4\uc5d0\uc11c age\uc758 \uc911\uc694\ub3c4\uac00 \uc0c1\ub2f9\ud788 \ub0ae\ub2e4. family\ub97c \uce74\ud14c\uace0\ub9ac\ud654 \uc2dc\ud0ac\ub54c age\ucc98\ub7fc \uc21c\uc11c\ub300\ub85c\uac00 \uc544\ub2c8\ub77c \uc0dd\uc874\uc728\uc774 \ub192\uc740 \uc9d1\ub2e8\uc774 \ub192\uc740 \uc22b\uc790\ub97c \ubc1b\uac8c \ud574\uc8fc\uc5c8\uc73c\ubbc0\ub85c, \uc774 \ub458\uc744 \uacf1\ud574\uc8fc\uba74 \uc911\uc694\ub3c4\uac00 \ub192\uc740 feature\uac00 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc9c8 \uac83\uc774\ub2e4."}}