{"cell_type":{"9d3e7e6c":"code","9b64abd1":"code","0961011f":"code","fbcc4960":"code","654c72c8":"code","d9ca15b1":"code","87033d12":"code","731eff95":"code","d07adcc7":"code","f9d21728":"code","3a86213c":"code","6ff6024b":"code","d085a872":"code","b0f83548":"code","e3c13162":"code","32d46289":"code","c7865c47":"code","f80e9120":"code","ceb23b56":"code","c2ab663d":"code","53161428":"code","8951b157":"code","8618de6b":"code","64de1148":"code","553627de":"code","2f064a80":"markdown","53337019":"markdown","76e69c61":"markdown","e900d124":"markdown","a216c9fb":"markdown","64acb637":"markdown","9e6b9814":"markdown","af0d9e35":"markdown","d27f9cf7":"markdown","3e621ebf":"markdown","7a108118":"markdown","7002dbd0":"markdown","443109f5":"markdown","d4010908":"markdown","93ba5a9f":"markdown","3c23ade2":"markdown","008a51ba":"markdown","f07c8215":"markdown","26ec3795":"markdown"},"source":{"9d3e7e6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore') \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9b64abd1":"games=pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")","0961011f":"games.head()","fbcc4960":"games.info()","654c72c8":"games.describe()","d9ca15b1":"# NA_Sales vs EU_Sales\ng10=games.iloc[:10,:]\ng10[[\"NA_Sales\",\"EU_Sales\"]].groupby([\"NA_Sales\"],as_index=False).mean().sort_values(by=\"EU_Sales\",ascending=True)","87033d12":"g10=games.iloc[:10,:]\ng10[[\"EU_Sales\",\"JP_Sales\"]].groupby([\"EU_Sales\"],as_index=False).mean().sort_values(by=\"JP_Sales\",ascending=True)","731eff95":"g10=games.iloc[:10,:]\ng10[[\"Other_Sales\",\"Global_Sales\"]].groupby([\"Other_Sales\"],as_index=False).mean().sort_values(by=\"Global_Sales\",ascending=True)","d07adcc7":"games.head()","f9d21728":"games.columns[games.isnull().any()]","3a86213c":"games.isnull().sum()","6ff6024b":"games[games[\"Publisher\"].isnull()]","d085a872":"games.head()","b0f83548":"#games.Genre.value_counts()","e3c13162":"#genre nin ve Global Salen\u0131n type bakt\u0131k\n#games.info()","32d46289":"\ngames.Genre.unique()","c7865c47":"#Bar plot \n#example:Genre vs Global_sales\n\narea_list=list(games[\"Genre\"].unique())\narea_global_ratio=[]\n\nfor i in area_list:\n    \n    x=games[games[\"Genre\"]==i]\n    \n    area_global_rate=sum(x.Global_Sales)\/len(x)\n    \n    area_global_ratio.append(area_global_rate)\n    \n#Sorting\n\ndata=pd.DataFrame({\"area_list\":area_list,\"area_global_ratio\":area_global_ratio})\nnew_index=(data[\"area_global_ratio\"].sort_values(ascending=False)).index.values\nsorted_data=data.reindex(new_index)\n\n#visualization\n\nplt.figure(figsize=(15,10))\n\nsns.barplot(x=sorted_data[\"area_list\"],y=sorted_data[\"area_global_ratio\"])\n\nplt.xticks(rotation=45)\n\nplt.xlabel(\"Genre\")\nplt.ylabel(\"Global Sales\")\nplt.title(\"Global Sales of Genre\")\nplt.show()\n","f80e9120":"games.head()","ceb23b56":"g = sns.jointplot(games.NA_Sales,games.EU_Sales, kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()","c2ab663d":"y = games.groupby(['Year']).sum()\ny = y['Global_Sales']\nx = y.index.astype(int)\n\nplt.figure(figsize=(12,8))\nax = sns.barplot(y = y, x = x)\nax.set_xlabel(xlabel='$ Millions', fontsize=16)\nax.set_xticklabels(labels = x, fontsize=12, rotation=90)\nax.set_ylabel(ylabel='Year', fontsize=16)\nax.set_title(label='Game Sales in $ Millions Per Year', fontsize=20)\nplt.show();","53161428":"#plt.style.use(\"classic\")\nname=games.Name.value_counts()\n\nplt.figure(figsize=(15,10))\nax=sns.barplot(x=name[:10].values,y=name[:10].index)\nplt.xticks(rotation=90)\nplt.xlabel(\"Game Name\",fontsize=20)\nplt.ylabel(\"Count\",fontsize=20)\nplt.title(\"Game Name Top 10\",color=\"red\",fontsize=20)","8951b157":"#ba\u015fta datam\u0131z\u0131n columlar\u0131na tekrar g\u00f6z gezdirdik\n#games.head()","8618de6b":"sns.set_style(\"dark\")\nsns.despine()\ntable = games.pivot_table('Global_Sales', index='Platform', columns='Year', aggfunc='sum')\nplatforms = table.idxmax()\nsales = table.max()\nyears = table.columns.astype(int)\ndata = pd.concat([platforms, sales], axis=1)\ndata.columns = ['Platform', 'Global Sales']\n\nplt.figure(figsize=(15,10))\nax = sns.pointplot(y = 'Global Sales', x = years, hue='Platform', data=data, size=15)\nax.set_xlabel(xlabel='Year', fontsize=16)\nax.set_ylabel(ylabel='Global Sales Per Year', fontsize=16)\nax.set_title(label='Highest Total Platform Revenue in $ Millions Per Year', fontsize=20)\nax.set_xticklabels(labels = years, fontsize=12, rotation=50)\nplt.show();","64de1148":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(games.corr(), annot=True, linewidths=0.5,linecolor=\"blue\", fmt= '.1f',ax=ax)\nplt.show()","553627de":"sns.pairplot(data)\nplt.show()","2f064a80":"bu bo\u015f olan degerlerin toplamda ne kadar olduguna bakal\u0131m","53337019":"y\u0131llara g\u00f6re platformlar\u0131n global kazan\u00e7lar\u0131","76e69c61":"games datas\u0131n\u0131n columlar\u0131 aras\u0131ndaki ili\u015fkiyi inceledik","e900d124":"## Global Sat\u0131\u015flar\u0131n Y\u0131ll\u0131k Oranlar\u0131","a216c9fb":" # INTRODUCTION\n \n <font color=\"blue\">\n Concet:\n    \n 1. [Load data](#1)\n 2. [Fields include](#2)\n 3. [Basic Data Analysis](#3)\n 4. [Missing Values](#4)\n \n     * [Find Missing values](#5)\n     \n 5. [Searborn Visualization](#6)\n \n     * [Genre vs Global_sales Rate(Bar Plot) ](#7)\n     * [NA_Sales vs EU_Sales(Join Plot)](#8)\n     * [Games Heatmap](#9)","64acb637":"G\u00f6rd\u00fcg\u00fcn\u00fcz gibi bo\u015f olan degerler \u00e7ok fazla  olugu i\u00e7in doldurmam\u0131z neredeyse imkans\u0131z.","9e6b9814":"<a id='6'><a><br>\n# Seaborn ","af0d9e35":"## Pair Plot \u00d6rnegi","d27f9cf7":"<a id='9'><a><br>\n## Games Heatmap","3e621ebf":"<a id='3'><a><br>\n    \n## BAS\u0130C DATA ANALYS\u0130S\n\nTop 10 Games\n\n* NA_SALES-EU_SALES\n* EU SALES_JP_SALES\n* OTHER_SALES - GLOBAL_SALES","7a108118":"\u0130lk 10 Oyunun s\u0131ralamas\u0131","7002dbd0":"<a id='8'><a><br>\n\n## Join Plot\n\n## NA_Sales vs EU_Sales ","443109f5":"<a id='5'><a><br>\n## Find Missing Value","d4010908":"Publisher'daki kay\u0131p verilerin hangi s\u0131rada olduklar\u0131n\u0131 bulal\u0131m.","93ba5a9f":"<a id='7'><a><br>\n## Bar plot\nexample:Genre vs Global_Sales ratio \n","3c23ade2":"<a id='1'><a><br>\n## Load Data","008a51ba":"<a id='2'><a><br>\n    \n## Fields include\n\n1. Rank - Ranking of overall sales\n1. Name - The games name\n1. Platform - Platform of the games release (i.e. PC,PS4, etc.)\n1. Year - Year of the game's release\n1. Genre - Genre of the game\n1. Publisher - Publisher of the game\n1. NA_Sales - Sales in North America (in millions)\n1. EU_Sales - Sales in Europe (in millions)\n1. JP_Sales - Sales in Japan (in millions)\n1. Other_Sales - Sales in the rest of the world (in millions)\n1. Global_Sales - Total worldwide sales.","f07c8215":"Hangi column larda missing value oldugunu g\u00f6relim","26ec3795":"<a id='4'><a><br>\n##  Missing Value\n\n* Find Missing Value\n"}}