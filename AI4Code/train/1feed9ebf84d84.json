{"cell_type":{"755bce59":"code","80140d77":"code","6274e377":"code","8e63e22a":"code","0fee2536":"code","a7d26fa1":"code","12ca4e71":"code","d17961eb":"code","dfc2c3a1":"code","2fa65e55":"code","2e885d4e":"code","827ba7ca":"code","7690a55d":"code","f948a14e":"code","796637ce":"code","a3b6cce6":"code","85d6453d":"code","05539953":"code","7e34fd3b":"code","24b19a8f":"code","616fc3cd":"code","bdf63f39":"code","c13bfc0a":"code","9563b114":"code","cde9e4ff":"markdown","ffc2f23b":"markdown","2adf5813":"markdown","8ffb6018":"markdown","84f58b51":"markdown","80028d03":"markdown","dd16ca7d":"markdown","bb18f326":"markdown","d071ef2c":"markdown","9503ea44":"markdown","efbc181a":"markdown","5003b9f2":"markdown","6398f2a6":"markdown","bc86ce9f":"markdown","946f8029":"markdown","b22156b6":"markdown"},"source":{"755bce59":"#algebra\nimport pandas as pd\npd.options.display.float_format = '{:,.5f}'.format\n#I want to see all features from the dataset given. But be careful, sometimes the output can be too large!\npd.options.display.max_rows = None \nimport numpy as np\n\n#visuals\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.express as px","80140d77":"laml_no_nans = pd.read_csv('..\/input\/my-output-from-092021-pg\/laml_no_nans.csv')\nlaml_plus_nans = pd.read_csv('..\/input\/my-output-from-092021-pg\/laml_plus_nans.csv')\nh2o_plus_nans = pd.read_csv('..\/input\/my-output-from-092021-pg\/h2o_plus_nans.csv')\nlast_final = pd.read_csv('..\/input\/my-output-from-092021-pg\/final_submission.csv')","6274e377":"hist_data = [laml_no_nans.claim, laml_plus_nans.claim, h2o_plus_nans.claim, last_final.claim]\ngroup_labels = ['laml without nans', 'laml with nans', 'h2o with nans', 'last final']\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 0.3, show_hist = False, show_rug = False)\nfig.show()","8e63e22a":"final_sub_2 = last_final.copy()\nfinal_sub_3 = last_final.copy()\nfinal_sub_6 = last_final.copy()\nfinal_sub_9 = last_final.copy()","0fee2536":"final_sub_2.loc[:, 'claim'] = (laml_no_nans ** 2 + laml_plus_nans ** 2 + h2o_plus_nans ** 2) \/ 3\nfinal_sub_3.loc[:, 'claim'] = (laml_no_nans ** 3 + laml_plus_nans ** 3 + h2o_plus_nans ** 3) \/ 3\nfinal_sub_6.loc[:, 'claim'] = (laml_no_nans ** 6 + laml_plus_nans ** 6 + h2o_plus_nans ** 6) \/ 3\nfinal_sub_9.loc[:, 'claim'] = (laml_no_nans ** 9 + laml_plus_nans ** 9 + h2o_plus_nans ** 9) \/ 3","a7d26fa1":"hist_data = [final_sub_2.claim, final_sub_3.claim, final_sub_6.claim, final_sub_9.claim]\ngroup_labels = ['** 2', '** 3', '** 6', '** 9']\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 0.3, show_hist = False, show_rug = False)\nfig.show()","12ca4e71":"final_sub_05 = last_final.copy()\nfinal_sub_033 = last_final.copy()\nfinal_sub_025 = last_final.copy()\nfinal_sub_01 = last_final.copy()","d17961eb":"final_sub_05.loc[:, 'claim'] = (laml_no_nans ** 1\/2 + laml_plus_nans ** 1\/2 + h2o_plus_nans ** 1\/2) \/ 3\nfinal_sub_033.loc[:, 'claim'] = (laml_no_nans ** 1\/3 + laml_plus_nans ** 1\/3 + h2o_plus_nans ** 1\/3) \/ 3\nfinal_sub_025.loc[:, 'claim'] = (laml_no_nans ** 1\/4 + laml_plus_nans ** 1\/4 + h2o_plus_nans ** 1\/4) \/ 3\nfinal_sub_01.loc[:, 'claim'] = (laml_no_nans ** 1\/10 + laml_plus_nans ** 1\/10 + h2o_plus_nans ** 1\/10) \/ 3","dfc2c3a1":"hist_data = [final_sub_05.claim, final_sub_033.claim, final_sub_025.claim, final_sub_01.claim]\ngroup_labels = ['** 1\/2', '** 1\/3', '** 1\/4', '** 1\/10']\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 0.3, show_hist = False, show_rug = False)\nfig.show()","2fa65e55":"final_sub_w1 = last_final.copy()\nfinal_sub_w2 = last_final.copy()\nfinal_sub_w3 = last_final.copy()\nfinal_sub_w4 = last_final.copy()","2e885d4e":"final_sub_w1.loc[:, 'claim'] = laml_no_nans * 0.45 + laml_plus_nans * 0.45 + h2o_plus_nans * 0.1\nfinal_sub_w2.loc[:, 'claim'] = laml_no_nans * 0.4 + laml_plus_nans * 0.4 + h2o_plus_nans * 0.2\nfinal_sub_w3.loc[:, 'claim'] = laml_no_nans * 0.25 + laml_plus_nans * 0.25 + h2o_plus_nans * 0.5\nfinal_sub_w4.loc[:, 'claim'] = laml_no_nans * 0.1 + laml_plus_nans * 0.1 + h2o_plus_nans * 0.8","827ba7ca":"hist_data = [final_sub_w1.claim, final_sub_w2.claim, final_sub_w3.claim, final_sub_w4.claim]\ngroup_labels = ['version 1', 'version 2', 'version 3', 'version 4']\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 0.3, show_hist = False, show_rug = False)\nfig.show()","7690a55d":"final_sub_w5 = last_final.copy()\nfinal_sub_w6 = last_final.copy()\nfinal_sub_w7 = last_final.copy()\nfinal_sub_w8 = last_final.copy()","f948a14e":"final_sub_w5.loc[:, 'claim'] = laml_no_nans * 0.1 + laml_plus_nans * 0.45 + h2o_plus_nans * 0.45\nfinal_sub_w6.loc[:, 'claim'] = laml_no_nans * 0.2 + laml_plus_nans * 0.4 + h2o_plus_nans * 0.4\nfinal_sub_w7.loc[:, 'claim'] = laml_no_nans * 0.5 + laml_plus_nans * 0.25 + h2o_plus_nans * 0.25\nfinal_sub_w8.loc[:, 'claim'] = laml_no_nans * 0.8 + laml_plus_nans * 0.1 + h2o_plus_nans * 0.1","796637ce":"hist_data = [final_sub_w5.claim, final_sub_w6.claim, final_sub_w7.claim, final_sub_w8.claim]\ngroup_labels = ['version 5', 'version 6', 'version 7', 'version 8']\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 0.3, show_hist = False, show_rug = False)\nfig.show()","a3b6cce6":"subs = [final_sub_2, final_sub_3, final_sub_6, final_sub_9, \n        final_sub_05, final_sub_033, final_sub_025, final_sub_01, \n        final_sub_w1, final_sub_w2, final_sub_w3, final_sub_w4, \n        final_sub_w5, final_sub_w6, final_sub_w7, final_sub_w8]\nversion_name = ['squared, equal', \n                'cubic, equal', \n                '^6, equal', \n                '^9, equal', \n                'sqrt, equal', \n                '^1\/3, equal', \n                '^1\/4, equal', \n                '^1\/10, equal', \n                'linear, laml 2*45%, h2o 10%', \n                'linear, laml 2*40%, h2o 20%', \n                'linear, laml 2*25%, h2o 50%', \n                'linear, laml 2*10%, h2o 80%', \n                'linear, NaNs 2*45%, no NaNs 10%', \n                'linear, NaNs 2*40%, no NaNs 20%', \n                'linear, NaNs 2*25%, no NaNs 50%', \n                'linear, NaNs 2*10%, no NaNs 80%']","85d6453d":"sub_comparison = pd.DataFrame(columns = ['version_name', 'claim_less_than_0.5', 'claim_more_than_0.5'])\nfor sub in subs:\n    sub_comparison.loc[sub_comparison.shape[0]] = [None, len(sub[sub['claim'] < 0.5]) \/ len(sub), len(sub[sub['claim'] >= 0.5]) \/ len(sub)]","05539953":"sub_comparison['version_name'] = version_name","7e34fd3b":"train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')","24b19a8f":"sub_comparison.loc[sub_comparison.shape[0]] = ['Train dataset', len(train[train['claim'] < 0.5]) \/ len(train), len(train[train['claim'] >= 0.5]) \/ len(train)]","616fc3cd":"fig, ax = plt.subplots(figsize=(12, 8))\nax = sns.barplot(x = 'claim_less_than_0.5', y = 'version_name', data = sub_comparison)\nax.set_title('Amount of claims less than 0.5 with different averaging versions')\nplt.axvline(x = 1, color = 'red')\nplt.text(1, 10, 'All data', color = 'red', rotation = 90, verticalalignment = 'top', horizontalalignment = 'right')\nplt.axvline(x = 1 \/ 2, color = 'blue')\nplt.text(1 \/ 2, 10, '50% of data', color = 'blue', rotation = 90, verticalalignment = 'top', horizontalalignment = 'right')\nplt.xlabel('Percentage')\nplt.ylabel('Version of averaging')\nplt.show()","bdf63f39":"balanced = final_sub_2.copy()\nbalanced.loc[:, 'claim'] = (final_sub_2 + final_sub_w8) \/ 2","c13bfc0a":"sub_comparison.loc[sub_comparison.shape[0]] = ['Balanced try', len(balanced[balanced['claim'] < 0.5]) \/ len(balanced), len(balanced[balanced['claim'] >= 0.5]) \/ len(balanced)]","9563b114":"fig, ax = plt.subplots(figsize=(12, 8))\nax = sns.barplot(x = 'claim_less_than_0.5', y = 'version_name', data = sub_comparison)\nax.set_title('Amount of claims less than 0.5 with different averaging versions')\nplt.axvline(x = 1, color = 'red')\nplt.text(1, 10, 'All data', color = 'red', rotation = 90, verticalalignment = 'top', horizontalalignment = 'right')\nplt.axvline(x = 1 \/ 2, color = 'blue')\nplt.text(1 \/ 2, 10, '50% of data', color = 'blue', rotation = 90, verticalalignment = 'top', horizontalalignment = 'right')\nplt.xlabel('Percentage')\nplt.ylabel('Version of averaging')\nplt.show()","cde9e4ff":"### Compare predictions","ffc2f23b":"### I wonder if the model exist which can get straight into that 50% zone, or that will be overfitting?","2adf5813":"### Take previous submission files as input","8ffb6018":"#### What about average of the first and the last? One on them stands out a little to the right side, the other - to the left. They can balance each other.","84f58b51":"#### Exponents > 1 and equal weight of each output","80028d03":"#### First 4, change H2O and make other two equal.","dd16ca7d":"### I noticed, that the author of the origin did not show the result of averaging. Here I want to present some.","bb18f326":"### Well, applying both too small or too large exponent makes our PDF move towards zero. Now let's try different combos of weights.","d071ef2c":"#### Add train data to this set","9503ea44":"#### First, some exponents > 1 and equal weight of each output","efbc181a":"### Will it work fine in the perspective? Final estimation will show.","5003b9f2":"#### Change weight of PDF without NaNs","6398f2a6":"### These plots are not so clear without number. Let's estimate perecentage of values > and < 0.5 in each case.","bc86ce9f":"# Summarizing","946f8029":"### I do not like this last final at all. Let's try something distinct.","b22156b6":"## Inspired by [Power averaging is your friend!](https:\/\/www.kaggle.com\/edrickkesuma\/power-averaging-is-your-friend), but with some corrections. And use only my own results!"}}