{"cell_type":{"f24823db":"code","16da5884":"code","70c2b5d6":"code","74ab8af0":"code","b755fe61":"code","5acb7cc2":"code","74b5e369":"code","7f1403b8":"code","5526260c":"code","98b8c35c":"code","c03df3e6":"code","b3c4bbe0":"code","d56d08bd":"code","bdb177ad":"code","8a02f8f2":"code","db23e9bc":"code","5b6a117d":"code","4cfa0364":"code","1f4e938e":"code","421c517b":"code","cfd969b8":"code","21dc3ff4":"code","51da7645":"code","2f5c9c03":"code","7281a3a4":"code","7a3b881f":"code","65626452":"code","376424d9":"code","f5b18ea7":"code","71b9565f":"code","74bd0c7e":"code","381182ff":"code","3a289d81":"code","5c6dffac":"code","d94e5575":"code","903cfaf7":"code","eeea7b83":"code","df3c285b":"code","c17abb00":"code","70d6add3":"code","7cd1d5b5":"code","0e2d476b":"code","c51ed29b":"code","ceec01bf":"code","ac82abbd":"code","382b6534":"code","5318fdbf":"code","f764cbf0":"code","705f227c":"code","b40650aa":"code","76bebe3f":"code","1c626f64":"markdown","0e47623e":"markdown","436dc522":"markdown","71db6f9b":"markdown","75a71daf":"markdown","0ebb5370":"markdown"},"source":{"f24823db":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport missingno as ms","16da5884":"matches = pd.read_csv('\/kaggle\/input\/ipldata\/matches.csv')\ndeliveries = pd.read_csv('\/kaggle\/input\/ipldata\/deliveries.csv')","70c2b5d6":"matches.head()","74ab8af0":"deliveries.head()","b755fe61":"matches.info()","5acb7cc2":"matches.describe()","74b5e369":"# # of missing records in column\nmatches.isnull().sum()","7f1403b8":"ms.matrix(matches)\nplt.xticks(rotation=90)\nplt.show()","5526260c":"ms.bar(matches)\nplt.show()","98b8c35c":"# drop umpire3 column\nmatches.drop('umpire3', axis=1, inplace=True)","c03df3e6":"matches[matches['city'].isnull()]['venue']","b3c4bbe0":"# Replace null city with Unknow.\nmatches['city'].fillna('Unknown', inplace=True)","d56d08bd":"matches[matches['winner'].isnull()]","bdb177ad":"# Dropping records has NaN winner\nmatches.dropna(subset=['winner'], inplace=True)","8a02f8f2":"matches[matches['umpire1'].isnull()]","db23e9bc":"matches[matches['umpire2'].isnull()]","5b6a117d":"# Replacing NaN umpire with Unknown\nmatches['umpire1'].fillna('Unknown', inplace=True)\nmatches['umpire2'].fillna('Unknown', inplace=True)","4cfa0364":"# List of City in ascending order\nsorted(matches['city'].unique())","1f4e938e":"# Replacing city whose name changed like Bangalore\nmatches['city'] = matches['city'].replace('Bengaluru', 'Bangalore')","421c517b":"# List of teams in ascending order\nsorted(matches['team1'].unique())","cfd969b8":"# Replacing the team whose name changed like Delhi Capitals\nmatches = matches.replace('Deccan Chargers', 'Sunrisers Hyderabad')\nmatches = matches.replace('Rising Pune Supergiants', 'Rising Pune Supergiant')\nmatches = matches.replace('Delhi Daredevils', 'Delhi Capitals')","21dc3ff4":"# List of teams\nteam = sorted(matches['team1'].unique())\nteam","51da7645":"sorted(matches['team2'].unique())","2f5c9c03":"sorted(matches['venue'].unique())","7281a3a4":"# Replacing the venue whose name changed like Delhi Capitals\nmatches['venue'] = matches['venue'].replace(\n    {\n        'Feroz Shah Kotla Ground': 'Feroz Shah Kotla', \n        'M. Chinnaswamy Stadium': 'M Chinnaswamy Stadium', \n        'MA Chidambaram Stadium, Chepauk': 'M. A. Chidambaram Stadium',\n        'Punjab Cricket Association Stadium, Mohali': 'Punjab Cricket Association IS Bindra Stadium, Mohali',\n        'Rajiv Gandhi Intl. Cricket Stadium': 'Rajiv Gandhi International Stadium, Uppal'\n        \n    }\n)","7a3b881f":"def bar_plot(df, x, y, color=None, text=None, title=None, tickangle=90):\n    if color==None:\n        fig = px.bar(df, x=x, y=y, text=df[text], title=title)\n    if text==None:\n        fig = px.bar(df, x=x, y=y, color=color, title=title)\n    if title==None:\n        fig = px.bar(df, x=x, y=y, color=color, text=df[text])\n    else:\n        fig = px.bar(df, x=x, y=y, color=color, text=df[text], title=title)\n        \n    fig.update_xaxes(tickangle=tickangle)\n    fig.show()","65626452":"umpires = pd.DataFrame([(umpire, matches[(matches['umpire1']==umpire) | (matches['umpire2']==umpire)].shape[0]) for umpire in pd.unique(matches[['umpire1', 'umpire2']].values.ravel())]).sort_values(1, ascending=False)\numpires.columns = ['Umpire', 'Count']\ntop_10_fav_umpire = umpires[:10]\n\nbar_plot(df=top_10_fav_umpire, x='Umpire', y='Count', color='Umpire', text='Count', title='Top 10 favourite Umpires | 2008-2019')","376424d9":"most_played_in_city = matches['city'].value_counts().reset_index()\nmost_played_in_city.columns = ['City', 'Count']\n\nbar_plot(df=most_played_in_city, x='City', y='Count', text='Count', title='Most to the least favourite city that has hosted the match | 2008-2019')\n\n\nfig = px.pie(most_played_in_city, values='Count', names='City', title='% of matches hosted in the city')\nfig.show()","f5b18ea7":"top_10_played_in_stad = matches['venue'].value_counts()[:10].reset_index()\ntop_10_played_in_stad.columns = ['Venue', 'Count']\n\n\nbar_plot(df=top_10_played_in_stad, x='Venue', y='Count', color='Venue', text='Count', title='Top 10 Stadium\/Venue that has hosted IPL match | 2008 - 2019')","71b9565f":"team_palyed_wins = pd.DataFrame((team, matches[(matches['team1']==team) | (matches['team2']==team)].shape[0], matches[matches['winner']==team].shape[0]) for team in matches['team1'].unique())\nteam_palyed_wins.columns = ['Team', 'Played_match', 'Wins_match']\nteam_palyed_wins = team_palyed_wins.sort_values(by='Played_match', ascending=False)\n\nteam_palyed_wins['Win_percent'] = round(team_palyed_wins['Wins_match']*100 \/ team_palyed_wins['Played_match'], 2)\nteam_palyed_wins = team_palyed_wins.reset_index(drop=True).sort_values('Win_percent', ascending=False)\n\nteam_palyed_wins","74bd0c7e":"fig = go.Figure(data=[go.Table(header=dict(values=team_palyed_wins.columns),\n                 cells=dict(values=team_palyed_wins.values.T))\n                     ])\nfig.show()","381182ff":"bar_plot(team_palyed_wins, x=\"Team\", y=\"Win_percent\", text='Win_percent', color='Team', title=\"Win Percentage | Played vs Win | 2008-2019\")\n\nfig = px.pie(team_palyed_wins, values='Wins_match', names='Team', title='Win Percentage vs Other Team | 2008-2019')\nfig.show()","3a289d81":"teams = team_palyed_wins['Team'].tolist()\nplayed = team_palyed_wins['Played_match'].tolist()\nwins = team_palyed_wins['Wins_match'].tolist()\n\nfig = go.Figure(data=[\n    go.Bar(name='Played Match', x=teams, y=played, text=played, textposition='auto'),\n    go.Bar(name='Win Match', x=teams, y=wins, text=wins, textposition='auto')\n])\n\nfig.update_layout(barmode='stack', title_text='Played Vs Wins | 2008 - 2019')\nfig.update_xaxes(tickangle=90)\nfig.show()","5c6dffac":"ipl_winner_by_season = []\n\nfor year in range(2008, 2020):\n    highest_winner = matches[matches['season']==year]['winner'].value_counts()\n    if highest_winner[0]==highest_winner[1]:\n        ipl_winner_by_season.append((highest_winner.index[1], year, highest_winner[1]))\n        \n    ipl_winner_by_season.append((highest_winner.index[0], year, highest_winner[0]))","d94e5575":"ipl_winner_by_season = pd.DataFrame(ipl_winner_by_season)\nipl_winner_by_season.columns = ['Team', 'Season', 'Wins']\n\nfig = bar_plot(ipl_winner_by_season, x=\"Team\", y=\"Wins\", color=\"Team\", text='Season', title=\"Highest match winner team in every season\")","903cfaf7":"top_10_player_of_the_match = matches['player_of_match'].value_counts()[:10].reset_index()\ntop_10_player_of_the_match.columns = ['Player', 'Count']\n\nbar_plot(top_10_player_of_the_match, x=\"Player\", y=\"Count\", text='Count', color='Player', title=\"Top 10 Player of the match | 2008-2019\")","eeea7b83":"player_of_season = pd.DataFrame([(year, matches[matches['season']==year]['player_of_match'].value_counts().index[0], matches[matches['season']==year]['player_of_match'].value_counts()[0]) for year in range(2008, 2020)])\nplayer_of_season.columns = ['Season', 'Player', 'Count']\n\nbar_plot(player_of_season, x=\"Player\", y=\"Count\", text='Season', color='Player', title=\"Player of the Season | 2008-2019\")","df3c285b":"toss_dicision = matches['toss_decision'].value_counts().reset_index()\ntoss_dicision.columns = ['Toss_dicision', 'Count']\n\nfig = px.pie(toss_dicision, values='Count', names='Toss_dicision', title='Toss Dicision')\nfig.show()","c17abb00":"# Adding looser column\ndef looser(x):\n    if x['winner']==x['team1']:\n        return x['team2']\n    else:\n        return x['team1']\n    ","70d6add3":"matches['looser'] = matches.apply(looser, axis=1)\n\nmatches.sample(1)","7cd1d5b5":"winner_count_by_field_decision = matches[(matches['toss_decision']=='field')]['winner'].value_counts().to_frame()\nwinner_count_by_bat_decision = matches[(matches['toss_decision']=='bat')]['winner'].value_counts().to_frame()\n\nwinner_count_by_toss_decision = pd.concat([winner_count_by_field_decision, winner_count_by_bat_decision], axis=1).reset_index()\n\nwinner_count_by_toss_decision.columns = ['Team', 'Field', 'Bat']","0e2d476b":"fig = go.Figure(data=[\n    go.Bar(name='Field', x=winner_count_by_toss_decision['Team'], y=winner_count_by_toss_decision['Field'], text=winner_count_by_toss_decision['Field']),\n    go.Bar(name='Bat', x=winner_count_by_toss_decision['Team'], y=winner_count_by_toss_decision['Bat'], text=winner_count_by_toss_decision['Bat'])\n])\n\nfig.update_layout(barmode='group', title={'text': '# of winner by Toss decision'})\nfig.update_xaxes(tickangle=90)\nfig.show()","c51ed29b":"matches[(matches['toss_decision']=='field') & (matches['toss_winner']==matches['winner'])]['winner'].value_counts()","ceec01bf":"matches[(matches['toss_decision']=='field') & (matches['toss_winner']==matches['looser'])]['looser'].value_counts()","ac82abbd":"matches[(matches['toss_decision']=='bat') & (matches['toss_winner']==matches['winner'])]['winner'].value_counts()","382b6534":"matches[(matches['toss_decision']=='bat') & (matches['toss_winner']==matches['looser'])]['looser'].value_counts()","5318fdbf":"teams_playes_in_stadium = {}\n\nfor venue in matches['venue'].unique():\n    for team in matches['team1'].unique():\n        count = matches[(matches['venue']==venue) & ((matches['team1']==team) | (matches['team2']==team))].shape[0]\n        if venue not in teams_playes_in_stadium:\n            teams_playes_in_stadium[venue] = {team: count}\n        else:\n            teams_playes_in_stadium[venue][team] = count","f764cbf0":"plt.figure(figsize=(20, 10))\nteams_played_in_stadium = pd.DataFrame(teams_playes_in_stadium).T\nsns.heatmap(teams_played_in_stadium, annot=True)\nplt.title('Team vs Venue')\nplt.show()","705f227c":"csk = matches[(matches['team1']=='Chennai Super Kings') | (matches['team2']=='Chennai Super Kings')]","b40650aa":"opp_tm = csk['team1'].unique().tolist()\nopp_tm.remove('Chennai Super Kings')\nopp_tm","76bebe3f":"csk[(csk['team1']==opp_tm[0]) | (csk['team2']==opp_tm[0])]","1c626f64":"### Teams\n* Chennai Super Kings\n* Delhi Capitals\n* Gujarat Lions\n* Kings XI Punjab\n* Kochi Tuskers Kerala\n* Kolkata Knight Riders\n* Mumbai Indians\n* Pune Warriors\n* Rajasthan Royals\n* Rising Pune Supergiant\n* Royal Challengers Bangalore\n* Sunrisers Hyderabad","0e47623e":"**1. Chennai Super Kings**","436dc522":"Column - umpire3 has 637 missing records in the dataset. ","71db6f9b":"#### Missing records visualizaion","75a71daf":"## Data Cleaning","0ebb5370":"## Analysis by team"}}