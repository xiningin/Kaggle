{"cell_type":{"ca683384":"code","c7fd57df":"code","30564fad":"code","bbe4ab94":"code","9ba65245":"code","5d80d1a1":"code","1c2fa892":"code","566001d0":"code","2f0e79a2":"code","08311612":"code","73393eac":"code","6186dc6c":"code","2915b7ee":"code","118e9612":"markdown","94364795":"markdown"},"source":{"ca683384":"description_of_this_commit='brute force feature combinations'\nseed = 71","c7fd57df":"import numpy as np\nimport pandas as pd\nimport os\nfrom pathlib import Path\npd.set_option('display.max_columns', 100)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport logging\nimport time","30564fad":"from sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nimport time\nfrom tqdm import tqdm_notebook as tqdm\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier","bbe4ab94":"# \u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u306e\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u3068\u306e\u9055\u3044\u3092\u5438\u53ce\u3059\u308b\nimport os\nif 'KAGGLE_URL_BASE' in os.environ:\n    print('running in kaggle kernel')\n    data_dir = Path('..\/input')\n    log_dir = Path('.\/')\nelse:\n    print('running in other environment')\n    data_dir = Path('..\/data\/raw')\n    log_dir = Path('..\/log')\ndata_dir","9ba65245":"logger = None","5d80d1a1":"def getLogger():\n    global logger\n    if logger is not None:\n        return logger\n    logfile = log_dir \/ 'all.log'\n    logger = logging.getLogger(description_of_this_commit)\n    formatter = logging.Formatter('%(asctime)s - [%(name)s] - %(levelname)s - %(message)s')\n    fh = logging.FileHandler(logfile, 'a+')\n    fh.setFormatter(formatter)\n    #fh.setLevel(logging.DEBUG)\n    logger.addHandler(fh)\n    logger.addHandler(logging.StreamHandler())\n    logger.setLevel(logging.DEBUG)\n    return logger","1c2fa892":"logger = getLogger()\nlogger.info('logging test')","566001d0":"df_all_cache = None","2f0e79a2":"def load_data():\n    # \u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u4e8c\u56de\u76ee\u4ee5\u964d\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n    # train\u3068test\u3092\u7d50\u5408\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001is_train\u5217\u3067\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3092\u533a\u5225\n    # test\u90e8\u5206\u306eloan_condition\u306f0\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\n    \n    global df_all_cache\n    if df_all_cache is not None:\n        return df_all_cache.copy()\n    df_train = pd.read_csv(data_dir \/ 'train.csv', index_col=0)\n    df_test = pd.read_csv(data_dir \/ 'test.csv', index_col=0)\n    def lookup(s):    \n        # \u65e5\u4ed8\u306e\u30d1\u30fc\u30b9\u3092\u9ad8\u901f\u5316\n        #via: https:\/\/stackoverflow.com\/questions\/29882573\/pandas-slow-date-conversion\n        dates = {date:pd.to_datetime(date) for date in s.unique()}\n        return s.map(dates)\n    df_test['loan_condition'] = 0.0\n    df_train['is_train'] = True\n    df_test['is_train'] = False\n\n    df_all_cache = pd.concat([df_train, df_test], axis=0)\n    df_all_cache['issue_d'] = lookup(df_all_cache['issue_d'])\n    df_all_cache['earliest_cr_line'] = lookup(df_all_cache['earliest_cr_line'])\n    return df_all_cache.copy()","08311612":"def remove_nonnumerical_features(df_all):\n    # \u6570\u5024\u30c7\u30fc\u30bf\u4ee5\u5916\u306f\u6368\u3066\u308b\n    categorical_features = []\n    for col in df_all.columns:\n        if df_all[col].dtype in ['datetime64[ns]', 'object']:\n            categorical_features.append(col)\n    df_all = df_all.drop(columns=categorical_features)\n    return df_all","73393eac":"df_all = load_data()\n# df_all = add_feature1(df_all)\n# df_all = add_feature2(df_all)\n# df_all = encode_categorical_features(df_all)\ndf_all = remove_nonnumerical_features(df_all)\n","6186dc6c":"X_train = df_all[df_all['is_train']].drop(columns=['loan_condition', 'is_train'])\ny_train = df_all[df_all['is_train']]['loan_condition']\nX_test = df_all[~ (df_all['is_train'])].drop(columns=['is_train', 'loan_condition'])","2915b7ee":"#\u30e2\u30c7\u30eb\u4f5c\u6210\u3001\u691c\u5b9a\u3001\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u3092\u3059\u308b\n","118e9612":"# \u30e2\u30c7\u30ea\u30f3\u30b0","94364795":"# \u4e8b\u524d\u6e96\u5099"}}