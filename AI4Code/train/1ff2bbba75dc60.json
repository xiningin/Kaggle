{"cell_type":{"3c9eabe4":"code","361b47bb":"code","074eb3c9":"code","879d559f":"code","05bf97d2":"code","015f87f7":"code","946cb39f":"code","44c5cdc0":"code","9f062251":"code","568c212d":"code","65aaf59f":"code","1eaf1381":"code","111c212b":"markdown","b125fdf8":"markdown","ca704bbf":"markdown","930c42c6":"markdown","b147d231":"markdown","05f7ad8a":"markdown","6526a378":"markdown","1f907580":"markdown","6d431be9":"markdown"},"source":{"3c9eabe4":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)","361b47bb":"df = pd.read_csv(\"..\/input\/train.csv\")\n#\u00a0I set the name of the column to be dropped from the data set and then drop it.\ndropList = [\"Ticket\", \"Name\", \"Cabin\", \"Embarked\", \"Age\", \"PassengerId\"]\ndf.drop(dropList, axis=1, inplace=True)\ndf.info()","074eb3c9":"df['Sex'] = pd.DataFrame(np.where(df['Sex'] == 'male',1,0))\ndf[\"Fare\"] = df[\"Fare\"].fillna(0.0).apply(np.int64)\ndf.info()","879d559f":"X = df.drop([\"Survived\"],axis=1)\ny = df.Survived","05bf97d2":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import confusion_matrix as cm\nimport matplotlib.pyplot as plt\n\n# For Visualization\nfrom sklearn.tree import export_graphviz\nfrom sklearn import tree\nfrom IPython.display import SVG\nfrom graphviz import Source\nfrom IPython.display import display\nfrom sklearn import ensemble","015f87f7":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)\nd_tree1 = DecisionTreeClassifier(max_depth = 2, random_state=42)\nd_tree1.fit(X_train, y_train)","946cb39f":"predictions = d_tree1.predict(X_test)\nscore = round(accuracy_score(y_test, predictions), 3)\ncm1 = cm(y_test, predictions)\nprint(\"Confisuon Matrix:\\n\", cm1)\nprint(\"Our model score:\", score)","44c5cdc0":"graph = Source(tree.export_graphviz(d_tree1, out_file=None,feature_names=X.columns, \n                                    filled = True))\ndisplay(SVG(graph.pipe(format='svg')))","9f062251":"plt.figure(figsize=(16, 9))\n\nd_tree2 = DecisionTreeClassifier(max_depth = 8, random_state=42)\nd_tree2.fit(X_train, y_train)\nranking = d_tree2.feature_importances_\nfeatures = np.argsort(ranking)[::-1][:10]\ncolumns = X.columns\n\nplt.title(\"Feature importances based on Decision Tree Classifier\", y = 1.03, size = 18)\nplt.bar(range(len(features)), ranking[features], align=\"center\")\nplt.xticks(range(len(features)), columns[features], rotation=80)\nplt.show()","568c212d":"df_test = pd.read_csv(\"..\/input\/test.csv\")\ndropListForTest = [\"Ticket\",\"Name\",\"Cabin\",\"Embarked\",\"Age\"]\ndf_test.drop(dropListForTest,axis=1,inplace=True)","65aaf59f":"df_test['Sex'] = pd.DataFrame(np.where(df_test['Sex'] == 'male',1,0))\ndf_test[\"Fare\"] = df_test[\"Fare\"].fillna(0.0).apply(np.int64)","1eaf1381":"ids = df_test['PassengerId']\npredictions = d_tree1.predict(df_test.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)","111c212b":"I created a decision tree model using the \"X\" and \"y\" data I created above.","b125fdf8":"They must be of the same data type in order for me to perform a transaction with the data. So I'm defining non-int64 variables in the above output. Then I make them \"int64\".","ca704bbf":"## Machine Learning Part\nI use the libraries in the first section to educate the model, and the libraries in the second part to visualize the model I have created. As you can see from the libraries I have introduced, I used the \"Decision Tree\" model. If you are trying to get the best score in a particular project, you should also test the other models and choose the highest performance model. But the reason why I use my decision tree model is that it is very easy to visualize. You may have customers who prefer this. \"Black Box\" models are more legible because they will have the trouble explaining the models. Therefore, I choose the Decision Tree model in accordance with such a scenario.","930c42c6":"In this chart, we see the variables that are most effective in looking at whether a passenger has survived.","b147d231":"With the model I have set up, I look at the score of the \"test\" data I have allocated above. I get the output as a confusion matrix. If you've never used it, read the confusion matrix as follows:\n[![image](https:\/\/i.hizliresim.com\/MVg559.png)](https:\/\/hizliresim.com\/MVg559)\n* TN: True Negative\n* FP: False Positive\n* FN: False Negative\n* TP: True Positive\n\nUnderneath, we see how many percent of the survivors are correct.","05f7ad8a":"Finally, in order to be able to register for the competition, I take the test data and guess them with the model I have trained and send the output.","6526a378":"As you will see, I have a data set that does not contain any blank data and is all of the same data type. I am creating a new data frame by separating the variable I am trying to guess in order to operate with my data set.","1f907580":"## Visualization Part\nHere is the visualization part I described in the introduction. We can see the model created by our machine as a decision tree. This decision tree we obtain: if the passenger is male money, if the woman decides by looking at the class.","6d431be9":"## Introduction\nHi, in this notebook, we will use the information of Titanic's passengers and we will predict which passengers will be saved and which ones will not survive.\nWe start by introducing two libraries that allow us to play on the data.\n- Numpy: It enables us to perform matrix based operations on data.\n- Pandas: Easy-to-use data structures and data analysis tools for the Python programming language."}}