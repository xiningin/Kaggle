{"cell_type":{"040a1e29":"code","59959d74":"code","e0c0d81c":"code","a38d037a":"code","9e1fc46c":"code","332ae3d0":"code","ac6006c6":"code","27b7e2ae":"code","01124a8f":"code","fa992b3f":"markdown","746bd649":"markdown","96810b13":"markdown","7678d651":"markdown","e1b12754":"markdown","7bd06e0f":"markdown","5579c575":"markdown","84ccb2df":"markdown","42aaa70d":"markdown","95bfdf20":"markdown","d1988f5b":"markdown"},"source":{"040a1e29":"import re\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n##PROCESSING the available Job Tiles provided in the Kaggle Competition Dataset \n\nJobTitleFoldername = '..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Additional data\/'\nJobTitleFilename = 'job_titles.csv'\nJobTitleentirepath= JobTitleFoldername + JobTitleFilename\n\n#Setting an empty JobTile list\nJobTitle = []\n\n#Read the Jobtitles into a dataframe and convert it to list\nJobTitleDF = pd.read_csv(JobTitleentirepath, header=None)\nJobTitle = JobTitleDF[0].values.tolist()\n\n#Sort and reverse the Jobtile list based on the length of the element\n#  so that SENIOR CARPENTER is in the top of list be for CARPENTER \n#  this is will help in sorting the list based on seniority as currently we dont have any such alignment data available  \nJobTitle.sort(key=len)\nJobTitle.reverse()\n\n#Converting the JobTile list to a pattern so that the element are seperated by or '|\n#  This pattern will be used further in regex search function\nJobtilePattern = \"'abc|\"+'|'.join(JobTitle) + \"|xyz'\"\n\n##END: PROCESSING the available Job Tiles provided in the Kaggle Competition Dataset \n        \n\n#Initialize a list which will collect JobClass and Missing JobClass info\nJobClassALL = []\nMissingJobClassALL = []\nMismatchJobClassnFileNameALL = []\n\n#Process the files in Job Bulletins folder\nfor filename in filelist:\n\n    entirepath= foldername + filename\n    \n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#initializing the List for current file as EMPTY\n    JOBClass =[0,0,0,0,0,0,0,0,0,0,0]\n    MissingJobClass = [0]\n    MismatchJobClassnFileName = [0]\n\n#Populating the filename as a first element of list\n    JOBClass[0] = filename\n\n#EXTRACTING Job Class Title from the files\n# Few files have 'CAMPUS INTERVIEWS ONLY' tag in the beginning. Omitting that\n# Few files have acrynom in Job tiles enclosed () . Omitting that\n    Refinefiletext = re.sub('CAMPUS INTERVIEWS ONLY','',filetext.strip()).strip()\n    JobClassExtract = Refinefiletext[:re.search('\\w*\\n',Refinefiletext.strip()).end()-1]\n    JobClassTransform = re.sub('[ ]*\\(.*\\)[ ]*',' ',re.split('\\s{2,}|\\t',JobClassExtract)[0]).strip()\n#END: EXTRACTING Job Class Title from the files\n\n#Populating the JobTile in the list\n    JOBClass[1] = JobClassTransform\n\n#BEGIN :  Matching JobTile of the plain text file with the available JobTile list\n# Checking if the JobTile fetched from the job bulletin files are matching with the available Job Tile list\n# If the Job Titles are not available, writting them in seperate file\n#    \n    JobClassSrch = re.search(JobtilePattern.upper().strip(), JobClassTransform.upper())\n    if JobClassSrch is not None:\n        JOBClass[2] = JobClassTransform[JobClassSrch.start():JobClassSrch.end()]\n#       Check if the Job Class in the plain text file matches with Job Class in the Filename\n        if re.search(JOBClass[2].strip(), filename) is None:\n            MismatchJobClassnFileName[0] = filename\n            MismatchJobClassnFileNameALL.append(MismatchJobClassnFileName)\n\n    if JOBClass[1] != JOBClass[2] :\n        MissingJobClass[0] = JOBClass[1]\n        MissingJobClassALL.append(MissingJobClass)\n#END :  Matching JobTile of the plain text file with the available JobTile list\n\n#Appending the current files outcome to the main list\n    JobClassALL.append(JOBClass)\n\n\n#Converting into panda dataframe\nJobClassALLDF = pd.DataFrame(JobClassALL)\nMissingJobClassDF = pd.DataFrame(MissingJobClassALL)\nMismatchJobClassnFileNameDF = pd.DataFrame(MismatchJobClassnFileNameALL)\n\n#Adding identified missing JobTile to the dataframe that has the existing JobTitle list\nJobTitleDF = JobTitleDF.append(pd.DataFrame(MissingJobClassALL),ignore_index=True)\n\nprint(\"Job Tiles missing from the Job Tile csv available in the Comptetion data\")\nprint(MissingJobClassDF)\n\nprint(\"Job Tiles Mismatch from the Job Tile  in plain text Filename and it's content\")\nprint(MismatchJobClassnFileNameDF)\n\n#Writing into csv file for the ease of analysis\nJobClassALLDF.to_csv(\"JOBClassExtract.csv\",sep=',',index=None)\nMissingJobClassDF.to_csv(\"MissingJobClass.csv\",sep=',',index=None,header=None)\nJobTitleDF.to_csv(\"NewJobTitles.csv\",index=None,header=None)\nMismatchJobClassnFileNameDF.to_csv(\"MismatchJobClassnFileName.csv\",index=None,header=None)\n","59959d74":"import re\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\nimport matplotlib.pyplot as plt\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n#Initialize a list which will collect Salary info\nSalaryALL = []\nLosAnglesSalaryManyALL = [] \nDWPSalaryCleanManyALL = []\n#Process the files under Job Bulletins\nfor filename in filelist:\n\n    entirepath= foldername + filename\n    \n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#initializing the List for current file as EMPTY\n    SalOut =[0,0,0,0,0,0,0,0,0,0,0]\n\n#Populating the filename as a first element of list\n    SalOut[0] = filename\n\n#Spliting the file text into two parts, Second part one contains text after salary\n    FromsalaryData = re.split('ANNUAL\\s?SALARY',filetext)\n    DWPCount = re.findall('DepartmentofWaterandPower',re.sub('\\n|\\s+|\\,|\\*','',filetext))\n#Check the lenght of the list to see if any file doesnt contain ANNUAL SALARY details\n#    Identified one file which doesnt have the ANNUAL SALARY details - Vocational Worker  DEPARTMENT OF PUBLIC WORKS.txt\n#    Reviewed the file and it doesnt contain salary details so setting salary to NA   \n    if len(FromsalaryData) > 1:\n\n#Spliting the file to extract the salary section seperately\n        SalaryData = re.split('[A-Z]{3,}',FromsalaryData[1])\n        if len(SalaryData) > 1:\n            SalaryDataStrip = SalaryData[0].strip()\n\n#Removing special charcter from the data\n            SalaryDataClean = re.sub('\\n|\\s+|\\,|\\*','',SalaryDataStrip)\n            \n#Splitting the data to get both the salary details- City of Los Angles and  Department of Water and Power Salary\n            DWPSplit = re.split('DepartmentofWaterandPower',SalaryDataClean)\n\n#Extracting the section to get the City of Los Angles Salary details\n            LosAnglesSalary = DWPSplit[0]\n\n#Extracting the section to get the Department of Water and Power Salary details\n            if len(DWPSplit) > 1:\n               DWPSalary = DWPSplit[1]\n            else:\n               DWPSalary = 'NA'\n\n            LosAnglesSalaryClean = re.findall('\\$\\d{3,}\\-\\$\\d{3,}|\\$\\d{3,}[a-z\\W]*',re.sub('to','-',LosAnglesSalary))              \n            if len(LosAnglesSalaryClean) > 0:    \n                if re.search('\\$\\d{3,}\\-\\$\\d{3,}',LosAnglesSalaryClean[0]) : \n                    SalOut[1] = re.sub('\\$','',LosAnglesSalaryClean[0])\n                else:\n                    SalOut[1] = re.sub('[a-z\\W\\,\\s]','',LosAnglesSalaryClean[0])\n            else:\n                SalOut[1] = 'N\/A'\n                \n            DWPSalaryClean = re.findall('\\$\\d{3,}\\-\\$\\d{3,}|\\$\\d{3,}[a-z\\W]*',re.sub('to','-',DWPSalary))              \n            if len(DWPSalaryClean) > 0:    \n                if re.search('\\$\\d{3,}\\-\\$\\d{3,}',DWPSalaryClean[0]) : \n                    SalOut[2] = re.sub('\\$','',DWPSalaryClean[0])\n                else:\n                    str2 = re.sub('[a-z\\W\\,\\s]','',DWPSalaryClean[0])\n                    SalOut[2] = str2\n            else:\n                SalOut[2] = 'N\/A'\n            \n#Extracting the details when more than one salary range is specified in Job Bulletins\n            if len(LosAnglesSalaryClean) >1: \n                LosAnglesSalaryMany = [x for x in LosAnglesSalaryClean]\n                SalOut[3] = LosAnglesSalaryMany\n                LosAnglesSalaryManyALL.append([SalOut[0],LosAnglesSalaryMany,len(LosAnglesSalaryMany)])\n            if len(DWPSalaryClean) >1:\n                DWPSalaryCleanMany = [x for x in DWPSalaryClean ]\n                SalOut[4] = DWPSalaryCleanMany\n                DWPSalaryCleanManyALL.append([SalOut[0],DWPSalaryCleanMany,len(DWPSalaryCleanMany),len(DWPCount)])\n \n    SalOut[5] = DWPCount\n    SalOut[6] = len(DWPCount)\n       \n#Appending the current files outcome to the main list\n    SalaryALL.append(SalOut)\n#Converting into panda dataframe\nSalaryALLDF = pd.DataFrame(SalaryALL)\nLosAnglesSalaryManyALLDF = pd.DataFrame(LosAnglesSalaryManyALL,columns=['filename','Salary Range','Count'])\nDWPSalaryCleanManyALLDF = pd.DataFrame(DWPSalaryCleanManyALL,columns=['filename','Salary Range','Count','DWPCount'])\n\n#Bar plot to show how many salary range are available in the Job Bulletins\nfig = plt.figure(figsize=(12,6))\nfig.suptitle('Multiple Salary Range Mentioned In Job Bulletins', fontsize=20)\nplt.subplot(1,2,1)\nLosAnglesSalaryManyALLDF['Count'].value_counts().plot.bar()\nplt.title('Multiple Salary figures for LosAngles Salary')\nplt.xlabel('Count of Salary Range Available')\nplt.ylabel('Count of JobBulletins')\n\nplt.subplot(1,2,2)\nDWPSalaryCleanManyALLDF['Count'].value_counts().plot.bar()\nplt.title('Multiple Salary figures for DWP Salary')\nplt.xlabel('Count of Salary Range Available')\nplt.ylabel('Count of JobBulletins')\n\nplt.subplots_adjust(left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)\nplt.show()\n\nfig = plt.figure(figsize=(12,6))\nfig.suptitle('Missing criteria to apply for Department of Water and Power', fontsize=20)\nDWPSalaryCleanManyALLDF['DWPCount'].value_counts().plot.bar()\nplt.title('Department of Water and Power')\nplt.xlabel('# of times \\'Department of Water and Power\\' is used in Job Bulletin')\nplt.ylabel('Count of JobBulletins')\n\nplt.subplots_adjust(left=None,bottom=None,right=None,top=None,wspace=None,hspace=None)\nplt.show()\n\n#Writing into csv file for the ease of analysis\nSalaryALLDF.to_csv(\"SalaryDF.csv\",sep=',',index=None)\nLosAnglesSalaryManyALLDF.to_csv(\"LosAnglesSalaryManyDF.csv\",sep=',',index=None)\nDWPSalaryCleanManyALLDF.to_csv(\"DWPSalaryCleanALLDF.csv\",sep=',',index=None)\n","e0c0d81c":"import re\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import date\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n#Initialize a list which will collect Open Date info\nOpenDateALL = []\n\n#Get the current year. It will be used for further processing\nCurryear = date.today().strftime(\"%Y\")\n\n#Process the files under Job Bulletins\nfor filename in filelist:\n\n    entirepath= foldername + filename\n    \n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#initializing the List and variable for current file as EMPTY\n    OpenDate =['','','','','']\n    OrgOpenDate = ''\n    RevDate = ''\n    OpenDateValue = ''\n    OpenDateYear  = ''\n    OpenDateYearInt = ''\n    TextNoREQ = ''\n\n#Populating the filename as a first element of list\n    OpenDate[0] = filename\n\n#Fetching the Open Date related data from the plain text file\n    OpenDateSrch = re.search('OPEN DATE(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{4})|OPEN DATE(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{2})',filetext.upper())\n\n#Fetching the Revised Open Date related data from the plain text file\n    RevisedSrch = re.search('REVISED(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{4})|REVISED(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{2})',filetext.upper())\n\n#The below logic check is the Revised Date is available. In case it is available it will the Open Date of the Job Bulletin\n#    In case Only Open Date is available it will retained as Open Date\n    if OpenDateSrch is not None :\n        if RevisedSrch is not None :\n            OpenDateValue = filetext[RevisedSrch.start()+8:RevisedSrch.end()].strip()\n            RevDate = filetext[RevisedSrch.start()+8:RevisedSrch.end()].strip()\n        else:    \n            OpenDateValue = filetext[OpenDateSrch.start()+10:OpenDateSrch.end()].strip()\n        OrgOpenDate = filetext[OpenDateSrch.start()+10:OpenDateSrch.end()].strip()\n    else:\n        OpenDate[1] = 'N\/A'\n\n#Populate the evaluated open date based on availibility of Revised Date\n    OpenDate[1] = OpenDateValue\n#Populate the Open date availibile in the Job Bulletin\n    OpenDate[2] = OrgOpenDate\n#Populate the Revised Open date availibile in the Job Bulletin\n    OpenDate[3] = RevDate\n\n### BEGIN : Refernce to Old Date Analysis\n# The below logic is based on the hypothesis that Job Bulletins may contains reference to older date( Older than Open Date of Job Bulletins)\n# From the filetext we will remove the Requirment Details(as there are instance where it refers to old dates for specifying experience)\n# We will capture the content before the REQUIREMENT DETAILS and after WHERE TO APPLY sections\n# We will evaluate this new text to check for any reference to older dates\n# Please note: There can still be few exceptions where older dates are guinely referred     \n    BFRREQText=re.search('REQ[A-Z]{4}',filetext)\n    if BFRREQText is not None:\n        TextNoREQ = filetext[:BFRREQText.start()]\n        AFTWTAText=re.search('WHERE TO APPLY',filetext)\n        if AFTWTAText is not None:\n            TextNoREQ = TextNoREQ + filetext[AFTWTAText.start():]\n        else:\n            TextNoREQ = filetext\n    else:\n        TextNoREQ = filetext\n        \n#The below logic formates the year of Open Date to YYYY format\n#  When the year is in YY format it check if it is lesser than current year's YY format\n#        In case it is less, it will be prefix by 20 for tweenth century else it will be 19\n    if len(OpenDateValue) <= 8:\n        if (OpenDateValue[-2:] <= Curryear[2:]):\n            OpenDateYear = \"20\" + OpenDateValue[-2:]\n        else:\n            OpenDateYear = \"19\" + OpenDateValue[-2:]\n    else:\n        OpenDateYear = OpenDateValue[-4:]\n\n#The below logic search for occurance of year older than the Open Date year\n#  It check for any reference of last four year\n#  If Open Date year is 2018 , it will search for any reference for 2017,2016,2015 and 2014 \n    OpenDateYearInt = list(set(re.findall(str(int(OpenDateYear[0:4]) -1) + \"|\" + str(int(OpenDateYear[0:4]) -2) + \"|\" + str(int(OpenDateYear[0:4]) -3) + \"|\" + str(int(OpenDateYear[0:4]) -4),TextNoREQ)))\n\n    if OpenDateYearInt == []:\n        OpenDate[4] = ''\n    else:\n        OpenDate[4] = OpenDateYearInt\n### END : Refernce to Old Date Analysis\n       \n#Appending the current files outcome to the main list\n    OpenDateALL.append(OpenDate)\n#Converting into panda dataframe\nOpenDateALLDF = pd.DataFrame(OpenDateALL,columns=['Filename','Open Date','Original Open Date','Revised Open Date','Old Year Reference'])\n\nprint(\"Job Bulletins contains reference to older date( Older than Open Date of Job Bulletins)\")\nprint('Count of Job Bulletines with Revised Open Date' , OpenDateALLDF['Revised Open Date'][OpenDateALLDF['Revised Open Date']!=''].count())\nprint('Count of Job Bulletines with Old Year Reference', OpenDateALLDF['Old Year Reference'][OpenDateALLDF['Old Year Reference']!=''].count())\nprint('Total Count of Job Bulletines',len(OpenDateALLDF))\n\n\n\n#Writing into csv file for the ease of analysis\nOpenDateALLDF.to_csv(\"OpenDateALLDF.csv\",sep=',',index=None)\n","a38d037a":"import re\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n#Initialize a list which will collect Driving License info\nLicALL = []\n\n#Process the files in Job Bulletins folder\nfor filename in filelist:\n\n    entirepath= foldername + filename\n\n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#initializing the List for current file as EMPTY\n    LicOut =[0,0,0,0]\n\n#Populating the filename as a first element of list\n    LicOut[0] = filename\n\n#BEGIN : License required , possibly required or Not required\n\n# Check if any driving License information is available in the file \n    LicBasicLicSrch  = re.findall('CLASS [A-Z]{1} .*LICENSE|DRIVER.*LICENSE',filetext.upper())\n\n# Check if driving License is required \n    LicRQRDSrch = re.findall('DRIVER[S\\']{2} LICENSE IS REQUIRED|POSSESSION OF A VALID CALIFORNIA DRIVER\\'S LICENSE|DRIVER\\'S LICENSE[A-W ]*REQUIRED|DRIVER\\'S LICENSE[A-W ]*BY[A-W ]*REQUIRED|SOME POSITIONS REQUIRE A VALID CALIFORNIA DRIVER\\'S LICENSE|THESE POSITIONS ARE OPEN TO ALL WHO APPLY WITH A VALID CALIFORNIA DRIVER\\'S LICENSE',filetext.upper())\n\n# Check if driving License is possibly required \n    LicPOSSSrch = re.findall('MAY ALSO REQUIRE A VALID CALIFORNIA DRIVER\\'S LICENSE|POSITIONS MAY REQUIRE.*DRIVER\\'S LICENSE|DRIVER\\'S LICENSE MAY BE REQUIRED',filetext.upper())\n\n# Check if driving License is required with special licence class\n    LicSpecificSrch  = re.findall('CALIFORNIA CLASS [A-Z]{*} LICENSE IS REQUIRED|CLASS A OR B DRIVER\\'S LICENSE|CLASS A DRIVER\\'S LICENSE|CLASS B DRIVER\\'S LICENSE|CLASS A OR CLASS B DRIVER\\'S LICENSE|CALIFORNIA B DRIVER\\'S LICENSE|CALIFORNIA A DRIVER\\'S LICENSE',filetext.upper())\n\n# Set the flag as 'N' for Not required, 'P' for possibly required and 'R' for required\n    if LicBasicLicSrch == []:\n        LicOut[1] = 'N'\n    elif LicRQRDSrch != []:\n        LicOut[1] = 'R'\n    elif LicPOSSSrch !=[]:\n        LicOut[1] = 'P'\n    elif LicSpecificSrch!=[]:\n        LicOut[1] = 'R'\n    else:\n        LicOut[1] = 'P'\n\n#END : License required , possibly required or Not required\n        \n#BEGIN : Specific driving License requirement        \n#  Merge all the Driving License information extracted earlier in one list\n    AllSrchData = list(set(LicBasicLicSrch +LicRQRDSrch+LicPOSSSrch+LicSpecificSrch))\n#  Join the merge list in one text for easy processing, manipulation and data extraction\n    AllSrchDatajoin= '|'.join(AllSrchData)\n#  Clean the data by removing puncuations\n    All = re.sub('\\\"|\\(\\)|\\'','',AllSrchDatajoin)\n\n#  Extract the information pertaining to specific driving licence\n#  Normalize the data to use proper CLASS tag before the driving licence Class information.\n#    There are instances where we see tag like CLASS A or B, the idea is the make them CLASS A or CLASS B\n    CleanClass  = list(set([re.sub('CLASS CLASS| CLASS\\\/','CLASS',re.sub('OR','OR CLASS',re.sub('CALIFORNIA ','CLASS ',x.strip()))) for x in list(set(re.findall('CLASS [A-Z]{1} OR [A-Z]{1} |CLASS [A-Z]{1} OR CLASS [A-Z]{1} |CLASS [A-Z]{1} AND [A-Z]{1} |CLASS [A-Z]{1} AND CLASS [A-Z]{1} |CLASS [A-Z]{1} AND\\\/OR CLASS [A-Z]{1} |CLASS [A-Z]{1} OR\\\/AND CLASS [A-Z]{1} |CALIFORNIA [A-Z]{1} |CLASS [A-Z]{1} ',All)))]))\n#  In file where we have multiple licence classes ,we will seperate them with | to indicate OR\n#    This step is pre step to that.Replace any cocurance of AND\/OR or OR\/AND with AND~ or ~AND to ease further processing\n#    We will further split the data by 'OR' \n    RemoveOR  = list(set(re.split(' OR ',re.sub('OR\\\/|\\\/OR','~',' OR '.join(CleanClass)))))\n\n#Extracting the Class with AND clause in it in one list and other list contains the remaining data \n    ExtractANDClass = [x for x in RemoveOR if re.search('AND',x) is not None ]\n    ExtractSinClass = [x for x in RemoveOR if re.search('AND',x) is None ]\n    \n#initializing the List as EMPTY to contain class data\n    LicCategory = []\n\n#Identifying distinct classes \n#  Since we collected based on 'class' tag, we will fetch all the combinations.\n#  Like CLASS B, CLASS A AND\/OR CLASS B, CLASS A \n#  the following logic cleans up this pattern to identify distinct CLASSess\n    if ExtractANDClass != []:\n        for x in ExtractANDClass:\n            for y in ExtractSinClass:\n                if re.search(y,x) is None:\n                    LicCategory = LicCategory + [y]\n        LicCategory = LicCategory + [x]\n    else:\n        LicCategory = ExtractSinClass\n\n#After  processing of data replace AND~ with the correct clause mentioned in the job bulletin\n    LicOut[2] =re.sub('AND~|~AND','AND\/OR','|'.join(LicCategory))\n    LicOut[3] = All\n#END : Specific driving License requirement        \n\n    LicALL.append(LicOut)\n\n#Converting into panda dataframe\npromoDF = pd.DataFrame(LicALL)\nprint(promoDF[3].head())\n#Writing into csv file for the ease of analysis\npromoDF.to_csv(\"DrivingLicDetails.csv\",sep=',',index=None)\n","9e1fc46c":"#####################################################################################\n#BEGIN :Function for generating list of requirement sets and subset in a JobBulletins\n\ndef RequirementSetDetails(REQ_Text):\n# Summary:\n#  This function extract the requirement set and sub set from the Requirements\n#  sample job class export template is the basis for this logic\n# Logic:\n#   If the requirements are seperated by OR conjunction, the requirement details are presented in seperate rows in the output csv\n#   If the requirements are seperated by AND conjunction, the requirement details are presented in current rows in the output csv\n#Output:\n#   The output of this function is a list of different requirement  available in a Job Bulletins\n#Example 1:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; and 2. ReQ Detail2       ; and 3. ReQ Detail3       ; and 4. ReQ Detail4\n#                        a. ReQ Detail2; or         a. ReQ Detail3; or \n#                        b. ReQ Detail2;            b. ReQ Detail3;  \n#   Here the Requirments are seperated  by and conjuction but ReQ 2 and ReQ3 has two sub requirement\n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n#\n#Example 2:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n#   Here the Requirments are seperated  by and conjuction \n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n#    \n#Example 3:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; or 2. ReQ Detail2 ; or 3. ReQ Detail3 ; or 4. ReQ Detail4\n#   Here the Requirments are seperated  by and conjuction \n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; \n#    2. ReQ Detail2;\n#    3. ReQ Detail3;\n#    4. ReQ Detail4\n#\n#    \n#Set the Requirement ID to 1\n    REQ_SET_ID = 1\n#Empth List for data processing\n    ReqListNew =[]\n    ReqListFinal =[]\n#    print(REQ_Text)\n#    print('^^^^^')\n\n#Splitting the  requirement set pattern  on Conjunction 'OR' to get distinct requirement set\n    ReqList = re.split('^\\d{1,2}[\\. ]{1}|[\\W|\\s]{1}or\\s*\\n\\d{1,2}\\W|[\\W|\\s]{1}OR\\s*\\n\\d{1,2}\\W',REQ_Text)\n#    ReqList = re.split('^\\d{1,2}\\W',REQ_Text)\n    \n#Clean the list of requriment after spilt on basis of Conjunction 'OR'\n#     to Omit Empty elements and to attach Requriment Set ID to each requirement set\n    for x in ReqList:\n        if x != '':\n            ReqListNew = ReqListNew + [str(REQ_SET_ID) + '. ' + x]\n            REQ_SET_ID = REQ_SET_ID + 1\n#Follwing with Process the requirement sets obtained from previous steps \n    for y in ReqListNew:\n#       Cleaning the requirement set data\n        rowstrip  = y.strip().strip('\\W').strip('\\s').strip('(')\n\n#       Check if both 'AND' and 'OR' conjuction \n#       This will primaraily cover the requriment where Main Requirement are seperated by 'AND' conjunction and the sub requirement have 'OR' conjuction\n#         To state few example; the files are:\n#          ADVANCE PRACTICE PROVIDER CORRECTIONAL CARE 2325 020808 REV 111214.txt\n#          EMS ADVANCED PROVIDER 2341 111618 REV 122018.txt\n        if re.findall('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',rowstrip) != [] and re.findall('\\;[ ]{1,}and\\s*\\n\\d|\\;[ ]{1,}AND\\s*\\n\\d',rowstrip) != []:\n# The if part deals with requirement that has both AND and OR conjuntion\n# Splitting the  requirement text  on Conjunction 'AND' for further processing\n            ReqListANDSplit = re.split('\\;[ ]{1,}and\\s*\\n|\\;[ ]{1,}AND\\s*\\n',rowstrip)\n\n# Initializing list and few variables\n            ANDPartText = []\n            ORPartText =[]\n            ORPartSrch =[]\n#Looping over the set after spliting the requirement by AND conjunction            \n            for x in ReqListANDSplit:\n# Since the requirement seperated by AND conjuction are part of one set, renaming the Requirment identification number to letter for ease of proceessing in later stage                \n                if ReqListFinal == []:\n                    x = re.sub('^\\d\\.','a.',x)\n# The below statement search from the main requirement statement in the and requirement before the sub requirement starts\n#Example :\n#   If a Job Bulletin has requirement as:\n#    2. ReQ Detail2  \n#      a. ReQ Detail2; or \n#      b. ReQ Detail2;     \n#   The output set for this  statement will be as below \n#    2. ReQ Detail2 \n                ANDPartSrch = re.search('\\W[A-Za-z]{1}\\.',x)\n                if ANDPartSrch is not None:\n                    ANDPartText1 =  x[:ANDPartSrch.start()]\n#                   The below statement search from the main requirement statement in the and requirement before the sub requirement starts\n#                   Considering the above example the out will be :\n#                       [a. ReQ Detail2,b. ReQ Detail2]    \n                    ORPartSrch = re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',x[ANDPartSrch.end()-2:])\n#                   Appending the extracted AND part to each OR part. The output will look like:\n#                       [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]    \n                    ORPartSrch = [ ANDPartText1 + ' ' + x for x in re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',x[ANDPartSrch.end()-2:])]\n                else:\n                    ANDPartText = ANDPartText + [x]\n                    \n# Creating a list of list for all the OR clause in the requirement. For Example1 mentioned above, it will look like\n#   [[2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2],[3. ReQ Detail 3 a. ReQ Detail3,3. ReQ Detail3 b. ReQ Detail3]]    \n                if ORPartSrch != []:\n                    ORPartText.append(ORPartSrch)\n\n                ORPartSrch =[]\n\n# create a single list for list of list created above\n#   [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3,3. ReQ Detail3 b. ReQ Detail3]]    \n            ORPartFlat = list(itertools.chain(*ORPartText))\n# Get all the Combination of requirement for the above list:\n#  For Example 1 above the len(ORPartText) = 2\n#  Combinations will look like:\n#             [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]\n#             [2. ReQ Detail2 a. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3]\n#             :\n#             :\n            ORComb = list(itertools.combinations(ORPartFlat,len(ORPartText)))\n            FinalList = ['~'.join(x) for x in ORPartText]\n            CombList = ['~'.join(x) for x in ORComb]\n# Remove the irrevant combinations\n#  For Example 1 above the combination\n#             [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]\n#  is part of \n#    2. ReQ Detail2  \n#      a. ReQ Detail2; or \n#      b. ReQ Detail2;   \n#  which is seperated by Or conjuctions and hence omitting it\n#  the below combination is valid\n#           [2. ReQ Detail2 a. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3]\n#  as it represents :\n#     2. ReQ Detail2       ; and 3. ReQ Detail3   \n#       a. ReQ Detail2;          a. ReQ Detail3; \n            CombiFinal2 = [re.split('\\~',x) for x in CombList if re.search('|'.join([re.sub('\\W','',x) for x in FinalList]),re.sub('\\W','',x)) is None]\n#  For Example 1 above \n#    1. ReQ Detail1; and 2. ReQ Detail2       ; and 3. ReQ Detail3       ; and 4. ReQ Detail4\n#                        a. ReQ Detail2; or         a. ReQ Detail3; or \n#                        b. ReQ Detail2;            b. ReQ Detail3;  \n# the below logic with add the below details to all the valid combinations\n#    1. ReQ Detail1; and 4. ReQ Detail4\n            for x in CombiFinal2:\n                ReqListFinal = ReqListFinal + [';and '.join(ANDPartText) + ';and '+ ';and '.join(x)]\n        else:\n# This part deals with  requirement whic has only OR conjuction or AND conjuction in requirement details\n# Splitting the  requirement text  on Conjunction 'OR' for further processing\n            ReqListOrSplit = re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',rowstrip)\n            ReqListFinal= ReqListFinal + [z for z in ReqListOrSplit]\n#            print(ReqListFinal)\n    return ReqListFinal\n\n#END :Function for generating list of requirement sets and subset in a JobBulletins\n#####################################################################################\n","332ae3d0":"#Import Libaries \nimport re\nfrom os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\nimport itertools\n\n#####################################################################################\n#BEGIN :Function for generating list of requirement sets and subset in a JobBulletins\n\ndef RequirementSetDetails(REQ_Text):\n# Summary:\n#  This function extract the requirement set and sub set from the Requirements\n#  sample job class export template is the basis for this logic\n# Logic:\n#   If the requirements are seperated by OR conjunction, the requirement details are presented in seperate rows in the output csv\n#   If the requirements are seperated by AND conjunction, the requirement details are presented in current rows in the output csv\n#Output:\n#   The output of this function is a list of different requirement  available in a Job Bulletins\n#Example 1:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; and 2. ReQ Detail2       ; and 3. ReQ Detail3       ; and 4. ReQ Detail4\n#                        a. ReQ Detail2; or         a. ReQ Detail3; or \n#                        b. ReQ Detail2;            b. ReQ Detail3;  \n#   Here the Requirments are seperated  by and conjuction but ReQ 2 and ReQ3 has two sub requirement\n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n#    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n#\n#Example 2:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n#   Here the Requirments are seperated  by and conjuction \n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n#    \n#Example 3:\n#   If a Job Bulletin has requirement as:\n#    1. ReQ Detail1; or 2. ReQ Detail2 ; or 3. ReQ Detail3 ; or 4. ReQ Detail4\n#   Here the Requirments are seperated  by and conjuction \n#   The output set for this  requirement is presented as below \n#    1. ReQ Detail1; \n#    2. ReQ Detail2;\n#    3. ReQ Detail3;\n#    4. ReQ Detail4\n#\n#    \n#Set the Requirement ID to 1\n    REQ_SET_ID = 1\n#Empth List for data processing\n    ReqListNew =[]\n    ReqListFinal =[]\n\n\n#Splitting the  requirement set pattern  on Conjunction 'OR' to get distinct requirement set\n    ReqList = re.split('^\\d{1,2}[\\. ]{1}|[\\W|\\s]{1}or\\s*\\n\\d{1,2}\\W|[\\W|\\s]{1}OR\\s*\\n\\d{1,2}\\W',REQ_Text)\n\n#Clean the list of requriment after spilt on basis of Conjunction 'OR'\n#     to Omit Empty elements and to attach Requriment Set ID to each requirement set\n    for x in ReqList:\n        if x != '':\n            ReqListNew = ReqListNew + [str(REQ_SET_ID) + '. ' + x]\n            REQ_SET_ID = REQ_SET_ID + 1\n#Follwing with Process the requirement sets obtained from previous steps \n    for y in ReqListNew:\n#       Cleaning the requirement set data\n        rowstrip  = y.strip().strip('\\W').strip('\\s').strip('(')\n\n#       Check if both 'AND' and 'OR' conjuction \n#       This will primaraily cover the requriment where Main Requirement are seperated by 'AND' conjunction and the sub requirement have 'OR' conjuction\n#         To state few example; the files are:\n#          ADVANCE PRACTICE PROVIDER CORRECTIONAL CARE 2325 020808 REV 111214.txt\n#          EMS ADVANCED PROVIDER 2341 111618 REV 122018.txt\n        if re.findall('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',rowstrip) != [] and re.findall('\\;[ ]{1,}and\\s*\\n\\d|\\;[ ]{1,}AND\\s*\\n\\d',rowstrip) != []:\n# The if part deals with requirement that has both AND and OR conjuntion\n# Splitting the  requirement text  on Conjunction 'AND' for further processing\n            ReqListANDSplit = re.split('\\;[ ]{1,}and\\s*\\n|\\;[ ]{1,}AND\\s*\\n',rowstrip)\n\n# Initializing list and few variables\n            ANDPartText = []\n            ORPartText =[]\n            ORPartSrch =[]\n#Looping over the set after spliting the requirement by AND conjunction            \n            for x in ReqListANDSplit:\n# Since the requirement seperated by AND conjuction are part of one set, renaming the Requirment identification number to letter for ease of proceessing in later stage                \n                if ReqListFinal == []:\n                    x = re.sub('^\\d\\.','a.',x)\n# The below statement search from the main requirement statement in the and requirement before the sub requirement starts\n#Example :\n#   If a Job Bulletin has requirement as:\n#    2. ReQ Detail2  \n#      a. ReQ Detail2; or \n#      b. ReQ Detail2;     \n#   The output set for this  statement will be as below \n#    2. ReQ Detail2 \n                ANDPartSrch = re.search('\\W[A-Za-z]{1}\\.',x)\n                if ANDPartSrch is not None:\n                    ANDPartText1 =  x[:ANDPartSrch.start()]\n#                   The below statement search from the main requirement statement in the and requirement before the sub requirement starts\n#                   Considering the above example the out will be :\n#                       [a. ReQ Detail2,b. ReQ Detail2]    \n                    ORPartSrch = re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',x[ANDPartSrch.end()-2:])\n#                   Appending the extracted AND part to each OR part. The output will look like:\n#                       [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]    \n                    ORPartSrch = [ ANDPartText1 + ' ' + x for x in re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',x[ANDPartSrch.end()-2:])]\n                else:\n                    ANDPartText = ANDPartText + [x]\n                    \n# Creating a list of list for all the OR clause in the requirement. For Example1 mentioned above, it will look like\n#   [[2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2],[3. ReQ Detail 3 a. ReQ Detail3,3. ReQ Detail3 b. ReQ Detail3]]    \n                if ORPartSrch != []:\n                    ORPartText.append(ORPartSrch)\n\n                ORPartSrch =[]\n\n# create a single list for list of list created above\n#   [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3,3. ReQ Detail3 b. ReQ Detail3]]    \n            ORPartFlat = list(itertools.chain(*ORPartText))\n# Get all the Combination of requirement for the above list:\n#  For Example 1 above the len(ORPartText) = 2\n#  Combinations will look like:\n#             [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]\n#             [2. ReQ Detail2 a. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3]\n#             :\n#             :\n            ORComb = list(itertools.combinations(ORPartFlat,len(ORPartText)))\n            FinalList = ['~'.join(x) for x in ORPartText]\n            CombList = ['~'.join(x) for x in ORComb]\n# Remove the irrevant combinations\n#  For Example 1 above the combination\n#             [2. ReQ Detail2 a. ReQ Detail2,2. ReQ Detail2 b. ReQ Detail2]\n#  is part of \n#    2. ReQ Detail2  \n#      a. ReQ Detail2; or \n#      b. ReQ Detail2;   \n#  which is seperated by Or conjuctions and hence omitting it\n#  the below combination is valid\n#           [2. ReQ Detail2 a. ReQ Detail2,3. ReQ Detail 3 a. ReQ Detail3]\n#  as it represents :\n#     2. ReQ Detail2       ; and 3. ReQ Detail3   \n#       a. ReQ Detail2;          a. ReQ Detail3; \n            CombiFinal2 = [re.split('\\~',x) for x in CombList if re.search('|'.join([re.sub('\\W','',x) for x in FinalList]),re.sub('\\W','',x)) is None]\n#  For Example 1 above \n#    1. ReQ Detail1; and 2. ReQ Detail2       ; and 3. ReQ Detail3       ; and 4. ReQ Detail4\n#                        a. ReQ Detail2; or         a. ReQ Detail3; or \n#                        b. ReQ Detail2;            b. ReQ Detail3;  \n# the below logic with add the below details to all the valid combinations\n#    1. ReQ Detail1; and 4. ReQ Detail4\n            for x in CombiFinal2:\n                ReqListFinal = ReqListFinal + [';and '.join(ANDPartText) + ';and '+ ';and '.join(x)]\n        else:\n# This part deals with  requirement whic has only OR conjuction or AND conjuction in requirement details\n# Splitting the  requirement text  on Conjunction 'OR' for further processing\n            ReqListOrSplit = re.split('\\;[ ]{1,}or\\s*\\n|\\;[ ]{1,}OR\\s*\\n',rowstrip)\n            ReqListFinal= ReqListFinal + [z for z in ReqListOrSplit]\n#            print(ReqListFinal)\n    return ReqListFinal\n\n#END :Function for generating list of requirement sets and subset in a JobBulletins\n#####################################################################################\n\n#Function for generating REQUIREMENT_SUBSET_ID - A-Z represents 1-26. In the case of 27th, 28th, ... sub-requirement, use AA, BB, ...\ndef next_alpha_sequence(alp):\n    lpart = alp.rstrip('Z')\n    if not lpart:  # s contains only 'Z'\n        alp = 'A' * (len(alp) + 1)\n    else:\n        num_replacements = len(alp) - len(lpart)\n        alp = lpart[:-1] + (chr(ord(lpart[-1]) + 1) if lpart[-1] != 'Z' else 'A')\n        alp += 'A' * num_replacements\n    return alp\n\n#The below function converts number names to number for numbers at thousands positions\n# It is called in conjunction with names_to_number(which is the main function)\ndef thousand_conv(in_num):\n    in_num = in_num.group()\n    findthousandand = re.findall('[\\d]{1}\\~1000\\~[\\d]{1,}',in_num)\n    findthousand = re.findall('[\\d]{1}\\~1000[ ]+',in_num)\n    if findthousandand !=[]:\n        numberlist = re.split('~',in_num)\n        newpattern = int(numberlist[0])*int(numberlist[1]) + int(numberlist[2])\n    elif findthousand !=[]:\n        numberlist = re.split('~',in_num)\n        newpattern = int(numberlist[0])*int(numberlist[1]) \n    else:\n        newpattern =''\n    in_num = str(newpattern)\n    return in_num\n\n#The below function converts number names to number for numbers at hundred positions\n# It is called in conjunction with names_to_number(which is the main function)\ndef hundred_conv(in_num):\n    in_num = in_num.group()\n    findhundredand = re.findall('[\\d]{1}\\~?100\\~?[\\d]{1,}',in_num)\n    findhundred = re.findall('[\\d]{1}\\~?100[ ]+',in_num)\n    if findhundredand !=[]:\n        numberlist = re.split('~',in_num)\n        newpattern = int(numberlist[0])*int(numberlist[1]) + int(numberlist[2])\n    elif findhundred !=[]:\n        numberlist = re.split('~',in_num)\n        newpattern = int(numberlist[0])*int(numberlist[1]) \n    else:\n        newpattern =''\n    in_num = str(newpattern)\n    return in_num\n\n#The below function converts number names to number for numbers at tens positions\n# It is called in conjunction with names_to_number(which is the main function)\ndef tens_conv(in_num):\n    in_num = in_num.group()\n    findoneand = re.findall('\\~[\\d]{1}0\\~[\\- ]*[\\d]{1}',in_num)\n    findone = re.findall('\\~[\\d]{1}0\\~',in_num)\n    if findoneand !=[]:\n        numberlist = re.split('~',re.sub('\\-','',in_num))\n        newpattern = int(numberlist[1]) + int(numberlist[2])\n    elif findone !=[]:\n        numberlist = re.split('~',in_num)\n        newpattern = int(numberlist[1]) \n    else:\n        newpattern =''\n    in_num = str(newpattern)\n    return in_num\n\n#The below function converts number names to number in a given text\ndef names_to_number(para):\n    npara = re.sub('[\\W]*THOUSAND','~1000~',re.sub('[\\W]*THOUSAND[\\W]*AND[\\W]*','~1000~',para.upper()))\n    npara = re.sub('[\\W]*HUNDRED','~100',re.sub('[\\W]*HUNDRED[\\W]*AND[\\W]*','~100~',npara.upper()))\n    npara = npara.replace('THIRTY','~30~').replace('FOURTY','~40~').replace('FORTY','~40~').replace('FIFTY','~50~').replace('SIXTY','~60~').replace('SEVENTY','~70~').replace('EIGHTY','~80~').replace('NINETY','~90~')\n    npara = npara.replace('ELEVEN','11').replace('TWELVE','12').replace('THRITEEN','13').replace('FOURTEEN','14').replace('FIFTEEN','15').replace('SIXTEEN','16').replace('SEVENTEEN','17').replace('EIGHTEEN','18').replace('NINETEEN','19').replace('TWENTY','~20~')\n    npara = npara.replace('ONE','1').replace('TWO','2').replace('THREE','3').replace('FOUR','4').replace('FIVE','5').replace('SIX','6').replace('SEVEN','7').replace('EIGHT','8').replace('NINE','9').replace('TEN','10')\n    npara = re.sub('\\~[\\d]{1}0\\~[\\- ]*[\\d]{1}|\\~[\\d]{1}0\\~',tens_conv,npara)\n    npara = re.sub('[\\d]{1}\\~100\\~[\\d]{1,}|[\\d]{1}\\~100[ ]+',hundred_conv,npara)\n    npara = re.sub('\\~[\\W ]*','~',npara)\n    npara = re.sub('[\\d]{1}\\~1000\\~[\\d]{1,}|[\\d]{1}\\~1000[]*[\\d]{1,}|[\\d]{1}\\~1000[ ]+',thousand_conv,npara)\n    return npara\n\n#  The below function calculates the experiennce length when Experience length comes first like in the input text  '5 years of Experience'\ndef years_of_experience(YearExp):\n    yearsExpOP = ''\n    if YearExp == []:\n        yearsExpOP = ''\n    elif re.search('HALF',YearExp[0]) is not None:\n        HalfEndSrch = re.search('\\DAND',YearExp[0].strip())\n        HalfEndNoANDSrch = re.search('\\d+',YearExp[0].strip())\n        if HalfEndSrch is not None:\n            yearsExpOP = int(YearExp[0].strip()[:HalfEndSrch.start()]) + 0.5\n        elif HalfEndNoANDSrch  is not None:\n            yearsExpOP = int(YearExp[0].strip()[:HalfEndNoANDSrch.end()]) * 0.5\n        else:\n            yearsExpOP = 0.5\n            \n    elif re.search('YEAR',YearExp[0]) is not None:\n        YearEndSrch = re.search('\\D',YearExp[0].strip())\n        if YearEndSrch is not None:\n            yearsExpOP = YearExp[0].strip()[:YearEndSrch.start()]\n    elif re.search('MONTH',YearExp[0]) is not None:\n        MonEndSrch = re.search('\\D',YearExp[0].strip())\n        if MonEndSrch is not None:\n            yearsExpOP = round(int(YearExp[0].strip()[:MonEndSrch.start()])\/12 ,2)\n    elif re.search('HOURS',YearExp[0]) is not None:\n        HourEndSrch = re.search('\\D',re.sub('\\,','',YearExp[0]).strip())\n        if HourEndSrch is not None:\n            yearsExpOP = round(int(re.sub('\\,','',YearExp[0]).strip()[:HourEndSrch.start()])\/(365*24),2)\n    return yearsExpOP\n\n#  The below function calculates the experiennce length when Experience length comes first like in the input text  '5 years of Experience'\ndef years_of_experiencelater(YearExp):\n    yearsExpOP = ''\n    if YearExp == []:\n        yearsExpOP = ''\n    elif re.search('HALF',YearExp[0]) is not None:\n        HalfEndSrch = re.search('\\d+ AND',YearExp[0].strip())\n        HalfEndNoANDSrch = re.search('\\d+',YearExp[0].strip())\n        if HalfEndSrch is not None:\n            yearsExpOP = int(YearExp[0].strip()[HalfEndSrch.start():HalfEndSrch.end()-3]) + 0.5\n        elif HalfEndNoANDSrch is not None:\n            yearsExpOP = int(YearExp[0].strip()[HalfEndNoANDSrch.start():HalfEndNoANDSrch.end()]) * 0.5\n        else:\n            yearsExpOP =  0.5\n    elif re.search('YEAR',YearExp[0]) is not None:\n        YearSrch = re.search('\\d+',YearExp[0].strip())\n        if YearSrch is not None:\n            yearsExpOP = YearExp[0].strip()[YearSrch.start():YearSrch.end()]\n    elif re.search('MONTH',YearExp[0]) is not None:\n        MonEndSrch = re.search('\\d+',YearExp[0].strip())\n        if MonEndSrch is not None:\n            yearsExpOP = round(int(YearExp[0].strip()[MonEndSrch.start():MonEndSrch.end()])\/12 ,2)\n    elif re.search('HOURS',YearExp[0]) is not None:\n        HourEndSrch = re.search('\\d+',re.sub('\\,','',YearExp[0]).strip())\n        if HourEndSrch is not None:\n            yearsExpOP = round(int(re.sub('\\,','',YearExp[0]).strip()[HourEndSrch.start():HourEndSrch.end()])\/(365*24),2)\n    return yearsExpOP\n\n##PROCESSING the available Job Tiles provided in the Kaggle Competition Dataset \n\nJobTitleFoldername = '..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Additional data\/'\nJobTitleFilename = 'job_titles.csv'\nJobTitleentirepath= JobTitleFoldername + JobTitleFilename\n\n#Setting an empty JobTile list\nJobTitle = []\n\n#Read the Jobtitles into a dataframe and convert it to list\nJobTitleDF = pd.read_csv(JobTitleentirepath, header=None)\nJobTitle = JobTitleDF[0].values.tolist()\n\n#Sort and reverse the Jobtile list based on the length of the element\n#  so that SENIOR CARPENTER is in the top of list be for CARPENTER \n#  this is will help in sorting the list based on seniority as currently we dont have any such alignment data available  \nJobTitle.sort(key=len)\nJobTitle.reverse()\n\n#Converting the JobTile list to a pattern so that the element are seperated by or '|\n#  This pattern will be used further in regex search function\nJobtilePattern = \"'abc|\\W\"+'\\W|\\W'.join(JobTitle) + \"\\W|xyz'\"\n\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n#Initialize a list which will File error \nFilesWithMissingInfo = []\n\n#Initialize a list which will contain the data collected from all the csv\n# It will contain list of lists that will contain the data from csv\nfrmtAll = []\n\n#Initialize the header of the output dataset \nfileheader =[\"FILE_NAME\",\"JOB_CLASS_TITLE\",\"JOB_CLASS_NO\",\"REQUIREMENT_SET_ID\",\"REQUIREMENT_SUBSET_ID\",\"JOB_DUTIES\",\"EDUCATION_YEARS\",\"SCHOOL_TYPE\",\"EDUCATION_MAJOR\",\"EXPERIENCE_LENGTH\",\"FULL_TIME_PART_TIME\",\"EXP_JOB_CLASS_TITLE\",\"EXP_JOB_CLASS_ALT_RESP\",\"EXP_JOB_CLASS_FUNCTION\",\"COURSE_COUNT\",\"COURSE_LENGTH\",\"COURSE_SUBJECT\",\"MISC_COURSE_DETAILS\",\"DRIVERS_LICENSE_REQ\",\"DRIV_LIC_TYPE\",\"ADDTL_LIC\",\"EXAM_TYPE\",\"ENTRY_SALARY_GEN\",\"ENTRY_SALARY_DWP\",\"OPEN_DATE\"]\n\n#Process the files to create a token list\nfor filename in filelist:\n\n# Intialize the filepath by appending filename to the folder path where the Job Bulletins are available \n    entirepath= foldername + filename\n\n# Read the content of plaintext file in filetext variable    \n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#Initialize a list which will contain the data collected from the csv being read\n    frmtOut = ['','','','','','','','','','','','','','','','','','','','','','','','','']\n\n#BEGIN: FILENAME INFORMATION \n    frmtOut[0]=filename\n#END: FILENAME INFORMATION \n\n#BEGIN: JOB CLASS TITLE INFORMATION \n#EXTRACTING Job Class Title from the files\n# Few files have 'CAMPUS INTERVIEWS ONLY' tag in the beginning. Omitting that\n# Few files have acrynom in Job tiles enclosed () . Omitting that\n    Refinefiletext = re.sub('CAMPUS INTERVIEWS ONLY','',filetext.strip()).strip()\n    JobClassExtract = Refinefiletext[:re.search('\\w*\\n',Refinefiletext.strip()).end()-1]\n    JobClassTransform = re.sub('[ ]*\\(.*\\)[ ]*',' ',re.split('\\s{2,}|\\t',JobClassExtract)[0]).strip()\n\n    frmtOut[1] = JobClassTransform\n#END: JOB CLASS TITLE INFORMATION \n    \n#BEGIN: CLASS CODE INFORMATION \n    ClassCodeSrch = re.search('Class Code((\\W+)|(\\w+))[0-9]{4}',filetext)\n    if ClassCodeSrch is not None :\n        ClassCode = filetext[ClassCodeSrch.end()-4:ClassCodeSrch.end()]\n        if len(ClassCode) == 3:\n            frmtOut[2] = '0' + ClassCode\n        else:\n            frmtOut[2] =  str(ClassCode)\n    else:\n        FilesWithMissingInfo.append([\"Missing ClassCode\",filename])\n        frmtOut[2] = 'N\/A'\n#END: CLASS CODE INFORMATION \n \n\n#BEGIN: DUTIES INFORMATION \n    DutiesSrch_StartPos = re.search('DUTIES(\\W+)(.)',filetext)\n    DutiesSrch_EndPos = re.search('DUTIES(\\W+)(.*\\n)',filetext)\n    if DutiesSrch_StartPos is not None and DutiesSrch_EndPos is not None:\n        frmtOut[5] =filetext[DutiesSrch_StartPos.end()-1:DutiesSrch_EndPos.end()-1]\n    else:\n        FilesWithMissingInfo.append([\"Missing Duties Information\",filename])\n        frmtOut[5] = 'N\/A'\n#END: DUTIES INFORMATION \n\n#BEGIN: OPEN DATE INFORMATION \n# Search for Open Date text \n    OpenDateSrch = re.search('OPEN DATE(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{4})|OPEN DATE(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{2})',filetext.upper())\n# Few Open Date have been revised \n    RevisedSrch = re.search('REVISED(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{4})|REVISED(\\W+)(\\d{1,2}\\-\\d{1,2}\\-\\d{2})',filetext.upper())\n    if OpenDateSrch is not None :\n        if RevisedSrch is not None :\n            frmtOut[24] = filetext[RevisedSrch.start()+8:RevisedSrch.end()].strip()\n        else:    \n            frmtOut[24] = filetext[OpenDateSrch.start()+10:OpenDateSrch.end()].strip()\n    else:\n        FilesWithMissingInfo.append([\"Missing Open Date\",filename])\n        frmtOut[24] = 'N\/A'\n#END: OPEN DATE INFORMATION \n\n#BEGIN: EXAM TYPE INFORMATION \n    EXAM_TYPE = re.findall('INTER[A-Z]{2,}\\sPROMO[A-Z]{2,}|OPEN\\sCOMPET[A-Z]{2,}|DEPART[A-Z]{2,}\\sPROMO[A-Z]{2,}|open to all',filetext)\n    if len(EXAM_TYPE)==1 : \n        if EXAM_TYPE[0][0].upper() == 'O':\n            frmtOut[21] =  \"OPEN\"\n        if EXAM_TYPE[0][0].upper() == 'I':\n            frmtOut[21] =  \"INT_DEPT_PROM\"\n        if EXAM_TYPE[0][0].upper() == 'D':\n            frmtOut[21] =  \"DEPT_PROM\"\n\n    if len(EXAM_TYPE)==2 : \n        if re.sub(\"OI\",\"IO\",EXAM_TYPE[0][0].upper() + EXAM_TYPE[1][0].upper()) == 'IO':\n            frmtOut[21] =  \"OPEN_INT_PROM\"  \n        else:\n            frmtOut[21] =  \"N\/A\" \n#END: EXAM TYPE INFORMATION \n \n#BEGIN: SALARY INFORMATION \n    FromsalaryData = re.split('ANNUAL\\s?SALARY',filetext)\n    if len(FromsalaryData) > 1:\n        SalaryData = re.split('[A-Z]{3,}',FromsalaryData[1])\n        if len(SalaryData) > 1:\n            SalaryDataStrip = SalaryData[0].strip()\n            SalaryDataClean = re.sub('\\n|\\s+|\\,|\\*','',SalaryDataStrip)\n\n            DWPSplit = re.split('DepartmentofWaterandPower',SalaryDataClean)\n            LosAnglesSalary = DWPSplit[0]\n\n            if len(DWPSplit) > 1:\n               DWPSalary = DWPSplit[1]\n            else:\n               DWPSalary = 'N\/A'\n\n            LosAnglesSalaryClean = re.findall('\\$\\d{3,}\\-\\$\\d{3,}|\\$\\d{3,}[a-z\\W]*',re.sub('to','-',LosAnglesSalary))              \n            if len(LosAnglesSalaryClean) > 0:    \n                if re.search('\\$\\d{3,}\\-\\$\\d{3,}',LosAnglesSalaryClean[0]) : \n                    frmtOut[22] = re.sub('\\$','',LosAnglesSalaryClean[0])\n                else:\n                    frmtOut[22] = re.sub('[a-z\\W\\,\\s]','',LosAnglesSalaryClean[0])\n            else:\n                frmtOut[22] = 'N\/A'\n                \n            DWPSalaryClean = re.findall('\\$\\d{3,}\\-\\$\\d{3,}|\\$\\d{3,}[a-z\\W]*',re.sub('to','-',DWPSalary))              \n            if len(DWPSalaryClean) > 0:    \n                if re.search('\\$\\d{3,}\\-\\$\\d{3,}',DWPSalaryClean[0]) : \n                    frmtOut[23] = re.sub('\\$','',DWPSalaryClean[0])\n                else:\n                    frmtOut[23] = re.sub('[a-z\\W\\,\\s]','',DWPSalaryClean[0])\n            else:\n                frmtOut[23] = 'N\/A'\n#END: SALARY INFORMATION \n\n#BEGIN: DRIVING LICENSE INFORMATION\n    LicBasicLicSrch  = re.findall('CLASS [A-Z]{1} .*LICENSE|DRIVER.*LICENSE',filetext.upper())\n\n    LicRQRDSrch = re.findall('DRIVER[S\\']{3} LICENSE IS REQUIRED|POSSESSION OF A VALID CALIFORNIA DRIVER\\'S LICENSE|DRIVER\\'S LICENSE[A-W ]*REQUIRED|DRIVER\\'S LICENSE[A-W ]*BY[A-W ]*REQUIRED|SOME POSITIONS REQUIRE A VALID CALIFORNIA DRIVER\\'S LICENSE|THESE POSITIONS ARE OPEN TO ALL WHO APPLY WITH A VALID CALIFORNIA DRIVER\\'S LICENSE',filetext.upper())\n\n    LicPOSSSrch = re.findall('MAY ALSO REQUIRE A VALID CALIFORNIA DRIVER\\'S LICENSE|POSITIONS MAY REQUIRE.*DRIVER\\'S LICENSE|DRIVER\\'S LICENSE MAY BE REQUIRED',filetext.upper())\n\n    LicSpecificSrch  = re.findall('CALIFORNIA CLASS [A-Z]{*} LICENSE IS REQUIRED|CLASS A OR B DRIVER\\'S LICENSE|CLASS A DRIVER\\'S LICENSE|CLASS B DRIVER\\'S LICENSE|CLASS A OR CLASS B DRIVER\\'S LICENSE|CALIFORNIA B DRIVER\\'S LICENSE|CALIFORNIA A DRIVER\\'S LICENSE',filetext.upper())\n\n    if LicBasicLicSrch == []:\n        frmtOut[18] = 'N'\n    elif LicRQRDSrch != []:\n        frmtOut[18] = 'R'\n    elif LicPOSSSrch !=[]:\n        frmtOut[18] = 'P'\n    elif LicSpecificSrch!=[]:\n        frmtOut[18] = 'R'\n    else:\n        frmtOut[18] = 'P'\n\n    AllSrchData = list(set(LicBasicLicSrch +LicRQRDSrch+LicPOSSSrch+LicSpecificSrch))\n    AllSrchDatajoin= '|'.join(AllSrchData)\n    All = re.sub('\\\"|\\(\\)|\\'','',AllSrchDatajoin)\n\n    CleanClass  = list(set([re.sub('CLASS CLASS| CLASS\\\/','CLASS',re.sub('OR','OR CLASS',re.sub('CALIFORNIA ','CLASS ',x.strip()))) for x in list(set(re.findall('CLASS [A-Z]{1} OR [A-Z]{1} |CLASS [A-Z]{1} OR CLASS [A-Z]{1} |CLASS [A-Z]{1} AND [A-Z]{1} |CLASS [A-Z]{1} AND CLASS [A-Z]{1} |CLASS [A-Z]{1} AND\\\/OR CLASS [A-Z]{1} |CLASS [A-Z]{1} OR\\\/AND CLASS [A-Z]{1} |CALIFORNIA [A-Z]{1} |CLASS [A-Z]{1} ',All)))]))\n    RemoveOR  = list(set(re.split(' OR ',re.sub('OR\\\/|\\\/OR','~',' OR '.join(CleanClass)))))\n    ExtractANDClass = [x for x in RemoveOR if re.search('AND',x) is not None ]\n    ExtractSinClass = [x for x in RemoveOR if re.search('AND',x) is None ]\n    \n    LicCategory = []\n\n    if ExtractANDClass != []:\n        for x in ExtractANDClass:\n            for y in ExtractSinClass:\n                if re.search(y,x) is None:\n                    LicCategory = LicCategory + [y]\n        LicCategory = LicCategory + [x]\n    else:\n        LicCategory = ExtractSinClass\n\n    frmtOut[19] =re.sub('AND~|~AND','AND\/OR','|'.join(LicCategory))\n#END: DRIVING LICENSE INFORMATION\n\n###################################################################################\n###################################################################################\n###################################################################################\n###################################################################################\n#BEGIN: REQUIREMENT DETAILS \n# The following elements defined in the Data Dictonary are being retrived from the REQUIREMENT\/MINIMUM QUALIFICATION section for the Job Bulletins     \n#   EDUCATION_YEARS\n#   SCHOOL_TYPE\n#   EDUCATION_MAJOR\n#   EXPERIENCE_LENGTH\n#   FULL_TIME_PART_TIME\n#   EXP_JOB_CLASS_TITLE\n#   EXP_JOB_CLASS_ALT_RESP\n#   EXP_JOB_CLASS_FUNCTION\n#   COURSE_COUNT\n#   COURSE_LENGTH\n#   COURSE_SUBJECT\n#   MISC_COURSE_DETAILS\n#   ADDTL_LIC\n    \n#Intializing the Update Flag\n    updateflag = 0\n#  Extract the REQUIREMENT\/MINIMUM QUALIFICATION section from the Job Bulletin\n    REQsrch=re.search('REQUI[A-Z]{4,}\\W*MI[A-Z]{4,}\\W*REQ[A-Z]{4,}\\W*|REQUI[A-Z]{4,}\\W*MI[A-Z]{4,}\\W*QUA[A-Z]{4,}\\W*|REQUI[A-Z]{4,}\\W*MI[A-Z]{4,}\\W*|REQUI[A-Z]{4,}\\W*',filetext)\n    if REQsrch is not None:\n        # The below variable contains text from REQUIREMENT\/MINIMUM QUALIFICATION section onwards till the end of file\n        Newfiletext = filetext[REQsrch.end():]\n\n        # Finding the end of the REQUIREMENT\/MINIMUM QUALIFICATION section\n        REQsrchEND=re.search('\\n\\s*[A-Z]{4,}',Newfiletext)\n        if REQsrchEND is not None:\n            #Extracting only the REQUIREMENT\/MINIMUM QUALIFICATION section\n            REQ_Text = Newfiletext[:REQsrchEND.start()].strip()\n            \n            #Calling the function to get list of distinct REQUIREMENT SET based on the AND\/OR conjunction\n            REQDetails  = RequirementSetDetails(REQ_Text)\n\n            # Intializing Variable\n            REQCounter = 0\n            updateflag = 0\n            prevID = 0\n\n            # Intializing REQUIREMENT SET ID and REQUIREMENT SET SUB_ID\n            REQ_SET_ID = 1\n            REQ_SET_SUB_ID = 'A'\n\n            # Processing each REQUIREMENT SET ID  available in the Job Bulletin\n            for r in REQDetails:\n                rowstrip  = r.strip().strip('\\W').strip('\\s').strip('(')\n\n#################################################################################\n# BEGIN OF LOGIC to set REQUIREMENT SET ID and REQUIREMENT SET SUB_ID for the Job Bulletin\n\n                REQCounter = REQCounter + 1\n                if REQCounter == 1:\n                    REQ_SET_SUB_ID = 'A'\n                    # Initializing the variables for the first Requirement Set for a JoBBulletin else it will contain stale data\n                    EduType =''\n                    EduYear =''\n                    EduMajor =''\n                    AdditionalLicType =''\n                    SemQuartUnitsValue = ''\n                    CourseCount = ''\n                    SemQuartSub = ''\n                    SemQuartSubRaw = ''\n                    frmtOut[6] =''\n                    frmtOut[7] =''\n                    frmtOut[8] =''\n\n                    frmtOut[9] =''\n                    frmtOut[10] =''\n                    frmtOut[11] =''\n                    frmtOut[12] =''\n                    frmtOut[13] =''\n\n                # If the requirement start with digit it is the begining of a REQ SET data                    \n                if re.match('\\d',rowstrip[:1]):\n                    if (re.match('\\d\\W',rowstrip[:2]) or re.match('\\d ',rowstrip[:2])) and rowstrip[:1] != prevID :\n                        frmtOut[3] = REQ_SET_ID\n                        REQ_SET_ID = REQ_SET_ID + 1\n                        REQ_SET_SUB_ID = 'A'\n\n                        # Initializing the variables for the each Requirement Set for a JoBBulletin else data of one Requirement set will move in the later REquuirement set\n                        EduType =''\n                        EduYear =''\n                        EduMajor =''\n                        AdditionalLicType =''\n                        SemQuartUnitsValue = ''\n                        CourseCount = ''\n                        SemQuartSub = ''\n                        SemQuartSubRaw = ''\n                        frmtOut[6] =''\n                        frmtOut[7] =''\n                        frmtOut[8] =''\n\n                        frmtOut[9] =''\n                        frmtOut[10] =''\n                        frmtOut[11] =''\n                        frmtOut[12] =''\n                        frmtOut[13] =''\n\n#                   The below logic is to handle the situation in the below example\n#                   REQuirement in Job Bulletins is a below:                         \n#                       1 REQ 1  Details   or                          \n#                       2 REQ 2 Details   and                          \n#                       3 REQ 3 Details                             \n#                       a REQ 3a Details   or                          \n#                       b REQ 3b Details  \n#                   RequirementSetDetails function will Split it as the following REQUIREMENT SET]\n#                       1 REQ 1  Details                             \n#                       2 REQ 2 Details  and 3 REQ 3 Details a REQ 3a Details              \n#                       2 REQ 2 Details  and 3 REQ 3 Details b REQ 3b Details              \n#                   This is a special case and hence REQ_SET_ID which was incremented in previous loop run will be set back                          \n                    elif rowstrip[:1] == prevID:\n                        frmtOut[3] = REQ_SET_ID - 1\n                    else:\n                        frmtOut[3] = REQ_SET_ID\n                    prevID = rowstrip[:1]\n                    frmtOut[4] = REQ_SET_SUB_ID\n                    updateflag = 1                \n\n                # If the requirement start with letter it is the begining of a REQ SUB SET data                    \n                if re.match('[A-Z]{1}',rowstrip[:1].upper()) and REQCounter > 1:\n                    frmtOut[4] = REQ_SET_SUB_ID\n                    updateflag = 1\n                else: \n                    frmtOut[4] = REQ_SET_SUB_ID\n\n                # If below logic takes care of the situation when the requirement doesnot contain there own REQ ID And SUB ID \n                if not(re.match('1',rowstrip[:1])) and REQCounter == 1 :\n                    frmtOut[3] = REQ_SET_ID\n                    frmtOut[4] = REQ_SET_SUB_ID\n                    REQ_SET_ID = REQ_SET_ID + 1\n                    updateflag = 1\n\n                REQ_SET_SUB_ID = next_alpha_sequence(REQ_SET_SUB_ID)\n\n# END OF LOGIC to set REQUIREMENT SET ID and REQUIREMENT SET SUB_ID for the Job Bulletin\n#################################################################################\n\n#######################################################################################\n#BEGIN Education Details\n\n#Converting number names to number for easire processing which searching of how many years information\n                rnumtoname = re.sub('[ ]*\\(.*?\\)[ ]*|\\)|\\d+\\.|\\W[A-Z]{1}[\\.\\:]',' ',names_to_number(rowstrip))\n#Correcting the conversion above for words like writTEN, mainTENance,wEIGHT...\n                CorrectNumRep = list(set(re.findall('[A-Z]+8+[A-Z]+|[A-Z]+8+|[A-Z]+10+[A-Z]+|[A-Z]+10+|[A-Z]+1+[A-Z]+|[A-Z]+1+',rnumtoname)))\n                if CorrectNumRep !=[]:\n                    for x in CorrectNumRep:\n                        repla = re.sub('1','ONE',re.sub('8','EIGHT',re.sub('10','TEN',x)))\n                        rnumtoname = re.sub(x,repla,rnumtoname)\n\n#Searching for school Type Information\n                SchoolTypefindall = re.findall('GRADUATE|GRADUATION|BACHELOR|PH\\.D|MASTER\\'S|HIGH SCHOOL|CERTIFICATE PROGRAM|CERTIFICATES|CERTIFICATE|CERTIFICATION|DEGREE|ASSOCIATE[A-Z\\' ]{1,15}DEGREE',rnumtoname.upper())\n                if SchoolTypefindall !=[]:\n# Not considering the details for CERTIFICATES\n#   CERTIFICATES is refered in other context(like allocation, permits) in the set of data studied \n                    if ('CERTIFICATES' in SchoolTypefindall) and not('GRADUATION' in SchoolTypefindall  or 'HIGH SCHOOL' not in SchoolTypefindall  or 'GRADUATE' in SchoolTypefindall  or 'BACHELOR' in SchoolTypefindall or 'PH.D' in SchoolTypefindall or 'MASTER\\'S' in SchoolTypefindall or 'DEGREE' in SchoolTypefindall or 'ASSOCIATE[A-Z\\' ]{1,15}DEGREE' in SchoolTypefindall):\n                        EduType = ''\n                    else:\n# Setting up the accurate Education Type \n# After studying the data, this logic is categorizing Education Type as\n#        COLLEGE OR UNIVERSITY : if the education is attained from College or University\n#        HIGH SCHOOL :For High School education\n#        CERTIFICATE : For any certificate\n#        ASSOCIATE DEGREE : For Associate Degree\n#        ACCREDITED INSTITUTE : When College or University is not refered and it is mentioned that the education should be from Accrediated Institute\n#        DEGREE WITHOUT SPECIFICATION : For instance where degree is referred but it is not mentioned whether it should be from Collegeor University or Any accrediated institute \n                        \n                        if ('GRADUATION' in SchoolTypefindall  and 'HIGH SCHOOL' not in SchoolTypefindall)  or 'CERTIFICATE PROGRAM' in SchoolTypefindall  or 'GRADUATE' in SchoolTypefindall  or 'BACHELOR' in SchoolTypefindall or 'PH.D' in SchoolTypefindall or 'MASTER\\'S' in SchoolTypefindall or 'DEGREE' in SchoolTypefindall or re.search('ASSOCIATE[A-Z\\' ]{1,15}DEGREE','|'.join(SchoolTypefindall)) is not None :\n                            if re.search('COLLEGE|UNIVERSITY',rnumtoname.upper()) and re.search('ASSOCIATE[A-Z\\' ]{1,15}DEGREE','|'.join(SchoolTypefindall)) is None:\n                                EduType = 'COLLEGE OR UNIVERSITY'\n                            elif re.search('ACCREDITED',rnumtoname.upper()) and re.search('ASSOCIATE[A-Z\\' ]{1,15}DEGREE','|'.join(SchoolTypefindall)) is None:\n                                EduType = 'ACCREDITED INSTITUTE'\n                            elif re.search('ASSOCIATE[A-Z\\' ]{1,15}DEGREE','|'.join(SchoolTypefindall)) is not None: \n                                EduType = 'ASSOCIATE DEGREE'\n                            elif re.search('DEGREE',rnumtoname.upper()) and len(list(set(SchoolTypefindall))) >1:\n                                EduType = 'DEGREE WITHOUT SPECIFICATION'\n                            elif re.search('CERTIFICATE PROGRAM',rnumtoname.upper()) and len(list(set(SchoolTypefindall))) >1:\n                                EduType = 'CERTIFICATE PROGRAM'\n                            elif not('GRADUATION' in SchoolTypefindall or 'GRADUATE' in SchoolTypefindall or 'DEGREE' in SchoolTypefindall):\n                                EduType = 'OTHERS'\n\n# Setting up the accurate Education Year \n                            EducationYearSrch = re.findall('\\d*[- ]*YEAR[A-Z\\W ]{1,5}COLLEGE|\\d*[- ]*YEAR[A-Z\\W ]{1,5}UNIVERSITY|\\d*[- ]*YEAR[A-Z\\W ]{1,25}DEGREE|\\d*[- ]*YEAR[A-Z\\W ]{1,35}ACCREDITED',rnumtoname)\n                            if EducationYearSrch !=[]:\n                                EduYear = EducationYearSrch[0][0]\n                            else:\n                                EduYear = ''\n# Setting up the accurate Education Major\n# For Associate degree : The logic looks for the details like is Associate of Art\/Science or any specifiction like Associate Degree IN\n# For College or University, Accrediated Institute and Degree:\n#             The logic looks for the details like is MAJOR or IN\n#             The below logic omits unnecessary preposition, adjective... words but this filteration is very specfic to the Job Bulletins that were available\n#                                             \n                            MajorInSrch  =  re.findall('COLLEGE[A-Z\\, ]*MAJOR[A-Z ]* IN [A-Z\\,\\- ]*|UNIVERSITY[A-Z\\, ]*MAJOR[A-Z ]* IN [A-Z\\,\\- ]*|COLLEGE IN [A-Z\\,\\- ]*|UNIVERSITY IN [A-Z\\,\\- ]*|DEGREE IN [A-Z\\,\\- ]*|DEGREE PROGRAM IN [A-Z\\,\\- ]*|ACCREDITED[A-Z ]* IN [A-Z\\,\\- ]*|CERTIFICATE PROGRAM IN [A-Z\\,\\- ]*',re.sub('\\:| [A-Z]?\\.','',rnumtoname))  \n                            EduMajor = ''\n                            if EduType == 'ASSOCIATE DEGREE'and MajorInSrch == []:\n                                MajorInSrch  =  re.findall('ASSOCIATE OF [A-Z]* DEGREE|ASSOCIATE[\\'S]* DEGREE[A-Z ]* IN [A-Z\\,\\- ]*',rnumtoname)  \n                                if MajorInSrch!= [] and re.search('ASSOCIATE OF [A-Z]* DEGREE',MajorInSrch[0])is not None:\n                                    EduMajor = re.sub('ASSOCIATE OF | DEGREE','',MajorInSrch[0])\n                            if MajorInSrch != []:    \n                                MajorInSrchSplit = re.split(' IN ', MajorInSrch[0]) \n                                if len(MajorInSrchSplit) > 1:\n                                    MajorInSrchSplitEnd = re.split('DESIGNATION| WITH |MAY|SUCCESSFUL|INCLUDING |WHICH |UPON |FROM |AT | ANY|ANY |OR OTHER |OR A |OR SPECIAL|OR [A ]*CLOSELY[\\- ]?RELATED FIELD|OR [A ]*RELATED|[ ]*AND$',MajorInSrchSplit[1].strip())\n                                    MajorSuchSub =re.sub('OR VARIOUS [A-Z ]*DISCIPLINES SUCH AS ','',MajorInSrchSplitEnd[0])\n                                    if re.search('SUCH AS',MajorSuchSub) is None:\n                                        EduMajor = '|'.join([re.sub('^[A-Z]{1} | AND','',x).strip() for x in re.split('\\,|OR | OR',MajorSuchSub) if x.strip() != '' ])\n                                    else:\n                                        SuchSplit = re.split('SUCH AS',MajorInSrchSplitEnd[0])\n                                        EduMajor = '|'.join([re.sub('^[A-Z]{1} | AND','',x).strip() for x in re.split('\\,|OR | OR',SuchSplit[1]) if x.strip() != '' ])\n\n                        elif 'CERTIFICATE' in SchoolTypefindall or 'CERTIFICATION' in SchoolTypefindall:\n                            EduType = 'CERTIFICATE'\n                        elif 'HIGH SCHOOL' in SchoolTypefindall:\n                            EduType = 'HIGH SCHOOL'\n                        frmtOut[7] = EduType\n                        frmtOut[6] = EduYear\n                        frmtOut[8] = EduMajor\n#END Education Details\n#######################################################################################\n#BEGIN : Additional License Information Processing\n#               Look for the presence of License information in the REQuirement text                          \n                LicenseTypeFindAll = re.findall('LICENSE',rnumtoname.upper())\n#               Initialize variables                          \n                AddLicTypeList=[]\n#               Clean up the extracted data to get the additional licence details\n#               Fetch  License details\n                LicTypeDetailSrch  =  re.findall('LICENSE[D]? AS .*|.*LICENSED BY.*|A VALID.*LICENSE.*|AS A LICENSED.*|AS A.*LICENSED.*|LICENSE.*AS A.*|.*A STATE OF CALIFORNIA PARAMEDIC LICENSE.*|POSSESSION OF.*LICENSE?.*',rnumtoname.upper())\n                if LicTypeDetailSrch !=[]:\n#                  Process the data if it has license details other that Driver License\n                    LicTypeDetailSrchFilter  =  [x for x in LicTypeDetailSrch if re.search('CLASS [A-Z]{1} .*LICENSE|DRIVER.*LICENSE',x) is None]\n                    if LicTypeDetailSrchFilter !=[]:\n                        LicTypeDetailSplit  =   re.split('\\n|\\.|\\;',LicTypeDetailSrchFilter[0])\n#                       Remove unecessary text for the extracted details\n                        for x in LicTypeDetailSplit:\n                            if re.search('LICENSE',x) is not None:\n                                AddLicTypeList  = AddLicTypeList + [x]\n                        AdditionalLicType = re.sub('^AS[\\W]*|^AND[\\W]*|[\\W]*AND$|\\s{2,}',' ',AddLicTypeList[0].strip())\n                frmtOut[20]= AdditionalLicType    \n\n#END : Additional License Information Processing                        \n\n################################################################\n# BEGIN : Course Details\n#Looking for the Course  related details in the requirement section               \n                CourseFindAll = re.findall('COURSE|SEMESTER|QUARTER',rnumtoname.upper())\n#Extract for the Semester and Quarter unit count\n                SemQuartUnits = [re.sub('\\W|\\s','',re.sub('QUARTER','Q',re.sub('SEMESTER','S',x))) for x in re.findall('\\W*\\d+ SEMESTER|\\W*\\d+ QUARTER',rnumtoname.upper())]\n                if len(SemQuartUnits) == 1:\n                    SemQuartUnitsValue = SemQuartUnits[0]\n                elif len(SemQuartUnits) >=2:\n                    SemQuartUnitsValue = SemQuartUnits[0] + '|' + SemQuartUnits[1]\n#Extract for the number of courses required\n                if re.findall('\\d+ COURSE',rnumtoname) !=[]:\n                    CourseCount = re.findall('\\d+',re.findall('\\d+ COURSE',rnumtoname)[0])[0]\n                \n                frmtOut[14] = CourseCount\n                frmtOut[15] = SemQuartUnitsValue\n\n# Extracting the Course subjects\n#             The below logic omits unnecessary preposition, adjective... words but this filteration is very specfic to the Job Bulletins that were available\n#             It also omiting the details after are refered in some context like SUCH AS or RELATED                                \n#             Anything apart from this will come as a dirty data                \n                SemQurtDataExtract = re.findall('SEMESTER.* IN [A-Z\\,\\-\\: ]*|QUARTER.* IN [A-Z\\,\\-\\: ]*|SEMESTER.* OF [A-Z\\,\\-\\: ]*|QUARTER.* OF [A-Z\\,\\-\\: ]*|SEMESTER.* ON [A-Z\\,\\-\\: ]*|QUARTER.* ON [A-Z\\,\\-\\: ]*',rnumtoname)    \n                SemQurtSrchSplitEnd = []\n                if len(SemQurtDataExtract)>=1:\n                    SemQurtDataSplit = re.split(' IN ',SemQurtDataExtract[0])\n                    if (len(SemQurtDataSplit) == 1):\n                        SemQurtDataSplit = re.split(' UNITS OF ',SemQurtDataExtract[0])\n                    if (len(SemQurtDataSplit) == 1):\n                        SemQurtDataSplit = re.split(' ON ',SemQurtDataExtract[0])\n                    if len(SemQurtDataSplit) > 1:\n                        SemQurtSrchSplitEnd = re.split(' WITH | FIELDS|\\d|COMPLETION|REQUIREMENT|AN ACCREDITED|MAY|INCLUDING |WHICH |UPON |FROM |AT |OR OTHER |OR A | RELATED|SUCH AS |OF AREAS',SemQurtDataSplit[1].strip())\n                        SemQuartSubRaw = '|'.join([re.sub('^[A-Z]{1} |[\\W]*THE [\\W]*|^THE$|COURSEWORK|COURSE WORK|EACH |OF THE FOLLOWING AREAS|COMBINATION OF|EITHER|FOLLOWING|[\\W]+AND[ ]*$|COURSES| ANY|ANY |','',x).strip() for x in re.split('\\,|OR | OR|\\:',SemQurtSrchSplitEnd[0]) if x.strip() != '' ])\n                        SemQuartSub = re.sub('^\\||\\|$','',SemQuartSubRaw)\n                frmtOut[16] =SemQuartSub\n \n# Extracting the Misc Course details:                   \n                CourseDataExtract = [re.sub('^[A-Za-z]{1}[\\. ]{1}','',x).strip() for x in re.findall('.*course.*|.*Course.*',re.sub('[ ]*\\(.*?\\)[ ]*|\\)|\\d+\\.','',rowstrip)) if re.search('Course Waiver|course waiver',x) is None]   \n                SemnQuartExtract = [re.sub('^[A-Za-z]{1}[\\. ]{1}','',x).strip() for x in re.findall('.*semester.*|.*Semester.*|.*quarter.*|.*Quarter.*',re.sub('[ ]*\\(.*?\\)[ ]*|\\)|\\d+\\.','',rowstrip)) if re.search('Course Waiver|course waiver',x) is None]   \n\n# REfining  the Misc Course details.\n#               Merging the data extracted above for Course and Semeter            \n#               Omitting the details that are already in the other course related fields:                   \n                DetailFilter = [x for x in list(set(SemnQuartExtract + CourseDataExtract)) if re.search('[Ss]{1}emester.* in [A-Za-z\\,\\-\\: ]*|[Qq]{1}uarter.* in [A-Za-z\\,\\-\\: ]*|[Ss]{1}emester.* on [A-Za-z\\,\\-\\: ]*|[Qq]{1}uarter.* on [A-Za-z\\,\\-\\: ]*|[Ss]{1}emester.* on [A-Za-z\\,\\-\\: ]*|[Qq]{1}uarter.* on [A-Za-z\\,\\-\\: ]*',x) is None]\n                frmtOut[17] = ';and '.join(DetailFilter)\n# END : Course Details\n################################################################\n\n\n#######################################################################################\n#BEGIN Experience Details\n# The below  aims to categorise data in the following Experience Category\n#    a) Full Time\n#    b) Part Time\n#    c) Paid Or Vocational Experience \n#    d) Apprenticship  Experience \n#    e) Hours Of : When the experience is mentioned in hours not in Full Time, Part Time ...                \n#    f) Others : When the experience details doesnt falls in any of the mentioned category\n                \n                #Searching for Experience Type Information\n                ExpTypeFindAll = re.findall('FULL-TIME|FULL TIME|PART-TIME|PART TIME|PAID OR VOLUNTEER|VOLUNTEER OR PAID|HOURS OF[A-Z ]*EXPERIENCE|EXPERIENCE|CURRENT EMPLOY|YEARS AS A|APPRENTICESHIP',rnumtoname)\n                if ExpTypeFindAll !=[]:\n#                   Processing the Full Time Experience Data\n                    if 'FULL TIME' in ExpTypeFindAll or 'FULL-TIME' in ExpTypeFindAll:\n                        frmtOut[10] = 'FULL-TIME'\n                        # Check if any Experience Length is mentioned for Full Time experience\n                        FullTimeLen = re.findall('\\d+.*FULL[- ]{1}TIME.*',rnumtoname)\n                        # Only first occurance of Full Time will be consider to evaluate experience length\n                        if FullTimeLen != []:\n                            #In the event when multiple Full Time experience length is mentioned, the logic considers the first occurance of of the experience lenght\n                            FullTimeLenTxt = re.findall('\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}FULL[- ]{1}TIME?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*FULL[- ]{1}TIME?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*FULL[- ]{1}TIME?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*FULL[- ]{1}TIME?',FullTimeLen[0])\n                            # Caculate the exact lenght by calling years_of_experience function\n                            frmtOut[9] = years_of_experience(FullTimeLenTxt)\n\n                        # Below is the logic the Extract the correponding Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Primary Job Class, the details pertaining to substitute experience has been omitted\n                        FullTimeTextAll =[x for x in re.findall('.*FULL[- ]{1}TIME.*',rnumtoname) if re.findall('FULL[- ]{1}TIME.*SUBSTIT.*',x)==[] ]\n                        FullTimeJBC = re.findall(JobtilePattern,'|'.join(FullTimeTextAll))\n\n                        # Below is the logic the Extract the correponding alternate Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Alternative Job Class, the details pertaining to substitute experience has been considered\n                        #       Please note that, from data analysis I identified that requirement can have a Full Time experience details along with any other experience\n                        #       For alternate Job class we are considerring any experience be it be Full Time or not\n                        #       Hence I am filtering data on EXPERIENCE\n                        FULLExpTextAltAll = re.findall('.*EXPERIENCE.*',rnumtoname)\n                        \n                        # Intialize the list which will contain the Job Class details for Alternate Job Class for Full Time experience\n                        FULLExpTxt =[]\n                        for x in FULLExpTextAltAll:\n                            # The below logic is for the senario when we have two set of Full Time experience details in the requirement\n                            #    One that is for the Primary Job Class and Second for the alternative Job Class\n                            #    Since the Primary Job Class has been evaluated earlier, the logic filters out the data for alternative Job Class(which is normally specified as the word Substitute)\n                            if re.findall('FULL[- ]{1}TIME.*SUBSTIT.*',x)!=[]:\n                                # Omitting the word Full Time in case of Alternate Job Class\n                                # This will be helpful in the next steps and avoid filtering of data which contains alternate Job Class for Full Time\n                                x = re.sub('FULL[- ]{1}TIME','',x)\n                            FULLExpTxt = FULLExpTxt  + [x]    \n                        #This logic extracts the final filtered text that contains alternate Job Class\n                        #  In many requirement Education\/Certification\/Course\/Program are considered as Substitute for an experience\n                        #  Below logic Omits those details as we need only expericence details to compute alternate Job Class\n                        #  Since the Requirement text already has Full Time experience details which was used to evaluate the Primary Job Class. We are omitting that details to avoid reconsidering the same for alternate Job Class\n                        #  The logic Splits on 'SUBSTIT' as many of the requirement mentions that the experience is a substitute for the Primary JobClass and if we dont split the data we will get the Primary Job Class again in Alternate Job Class \n                        FULLExpTextAlt = [re.split('SUBSTIT',x)[0] for x in FULLExpTxt if re.findall('FULL[- ]{1}TIME|RECOMMENDATION|PROGRAM.*SUBSTIT.*|COURSE.*SUBSTIT.*|DEGREE.*SUBSTIT.*|CERTIFI.*SUBSTIT.*',x)==[]]\n                        FULLExpAltJBC = re.findall(JobtilePattern,'|'.join(FULLExpTextAlt))\n\n                        # Below Logic formats and cleans the Job Class in final format \n                        #  Multiple Job Class is seperated by |  \n                        #  Omitting any unnecessary puncuation mark around the Job Class\n                        frmtOut[11] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in FullTimeJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n                        frmtOut[12] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in FULLExpAltJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n\n#                   Processing the Part Time Experience Data\n                    elif 'PART TIME' in ExpTypeFindAll or 'PART-TIME' in ExpTypeFindAll:\n                        frmtOut[10] = 'PART-TIME'\n                        # Check if any Experience Length is mentioned for Part Time experience\n                        PARTTimeLen = re.findall('\\d+.*PART[- ]{1}TIME.*',rnumtoname)\n\n                        # Only first occurance of PART Time will be consider to evaluate experience length\n                        if PARTTimeLen != []:\n                            #In the event when multiple Part Time experience length is mentioned, the logic considers the first occurance of of the experience lenght\n                            PARTTimeLenTxt = re.findall('\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}PART[- ]{1}TIME?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*PART[- ]{1}TIME?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*PART[- ]{1}TIME?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*PART[- ]{1}TIME?',PARTTimeLen[0])\n                            # Caculate the exact length by calling years_of_experience function\n                            frmtOut[9] = years_of_experience(PARTTimeLenTxt)\n\n                        # Below is the logic the Extract the corresponding Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Primary Job Class, the details pertaining to substitute experience has been omitted\n                        PARTTimeTextAll =[x for x in re.findall('.*PART[- ]{1}TIME.*',rnumtoname) if re.findall('PART[- ]{1}TIME.*SUBSTIT.*',x)==[] ]\n                        PARTTimeJBC = re.findall(JobtilePattern,'|'.join(PARTTimeTextAll))\n\n                        # Below is the logic the Extract the correponding alternate Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Alternative Job Class, the details pertaining to substitute experience has been considered\n                        #       Please note that, from data analysis I identified that requirement can have a Part Time experience details along with any other experience\n                        #       For alternate Job class we are considerring any experience be it be Part Time or not\n                        #       Hence I am filtering data on EXPERIENCE\n                        PARTExpTextAltAll = re.findall('.*EXPERIENCE.*',rnumtoname)\n\n                        # Intialize the list which will contain the Job Class details for Alternate Job Class for Part Time experience\n                        PARTExpTxt =[]\n                        for x in PARTExpTextAltAll:\n                            # The below logic is for the senario when we have two set of Part Time experience details in the requirement\n                            #    One that is for the Primary Job Class and Second for the alternative Job Class\n                            #    Since the Primary Job Class has been evaluated earlier, the logic filters out the data for alternative Job Class(which is normally specified as the word Substitute)\n                            if re.findall('PART[- ]{1}TIME.*SUBSTIT.*',x)!=[]:\n                                # Omitting the word Part Time in case of Alternate Job Class\n                                # This will be helpful in the next steps and avoid filtering of data which contains alternate Job Class for Part Time\n                                x = re.sub('PART[- ]{1}TIME','',x)\n                            PARTExpTxt = PARTExpTxt  + [x]    \n\n                        #This logic extracts the final filtered text that contains alternate Job Class\n                        #  In many requirement Education\/Certification\/Course\/Program are considered as Substitute for an experience\n                        #  Below logic Omits those details as we need only expericence details to compute alternate Job Class\n                        #  Since the Requirement text already has Part Time experience details which was used to evaluate the Primary Job Class. We are omitting that details to avoid reconsidering the same for alternate Job Class\n                        #  The logic Splits on 'SUBSTIT' as many of the requirement mentions that the experience is a substitute for the Primary JobClass and if we dont split the data we will get the Primary Job Class again in Alternate Job Class \n                        PARTExpTextAlt = [re.split('SUBSTIT',x)[0] for x in PARTExpTxt if re.findall('PART[- ]{1}TIME|RECOMMENDATION|PROGRAM.*SUBSTIT.*|COURSE.*SUBSTIT.*|DEGREE.*SUBSTIT.*|CERTIFI.*SUBSTIT.*',x)==[]]\n                        PARTExpAltJBC = re.findall(JobtilePattern,'|'.join(PARTExpTextAlt))\n\n                        # Below Logic formats and cleans the Job Class in final format \n                        #  Multiple Job Class is seperated by |  \n                        #  Omitting any unnecessary puncuation mark around the Job Class\n                        frmtOut[11] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in PARTTimeJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n                        frmtOut[12] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in PARTExpAltJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n\n#                   Processing the Paid or Volunteer Experience Data\n                    elif 'PAID OR VOLUNTEER' in ExpTypeFindAll or 'VOLUNTEER OR PAID' in ExpTypeFindAll:\n                        frmtOut[10] = 'PAID OR VOLUNTEER'\n\n                        # Check if any Experience Length is mentioned for PAID OR VOLUNTEER experience\n                        PVTimeLen = re.findall('\\d+.*PAID OR VOLUNTEER.*|\\d+.*VOLUNTEER OR PAID.*',rnumtoname)\n                        # Only first occurance of PAID OR VOLUNTEER Time will be consider to evaluate experience length\n                        if PVTimeLen != []:\n                            #In the event when multiple Paid or Volunteer Time experience length is mentioned, the logic considers the first occurance of of the experience lenght\n                            PVTimeLenTxt = re.findall('\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}VOLUNTEER OR PAID?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*VOLUNTEER OR PAID?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*VOLUNTEER OR PAID?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*VOLUNTEER OR PAID?|\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}PAID OR VOLUNTEER?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*PAID OR VOLUNTEER?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*PAID OR VOLUNTEER?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*PAID OR VOLUNTEER?',PVTimeLen[0])\n                            # Caculate the exact length by calling years_of_experience function\n                            frmtOut[9] = years_of_experience(PVTimeLenTxt)\n\n                        # Below is the logic the Extract the corresponding Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Primary Job Class, the details pertaining to substitute experience has been omitted\n                        PVTimeTextAll =[x for x in re.findall('.*PAID OR VOLUNTEER.*|.*VOLUNTEER OR PAID.*',rnumtoname) if re.findall('PAID OR VOLUNTEER.*SUBSTIT.*|VOLUNTEER OR PAID.*SUBSTIT.*',x)==[] ]\n                        PVTimeJBC = re.findall(JobtilePattern,'|'.join(PVTimeTextAll))\n\n                        # Below is the logic the Extract the correponding alternate Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Alternative Job Class, the details pertaining to substitute experience has been considered\n                        #       Please note that, from data analysis I identified that requirement can have a Paid or Volunteer Time experience details along with any other experience\n                        #       For alternate Job class we are considerring any experience be it be Paid or Volunteer Time or not\n                        #       Hence I am filtering data on EXPERIENCE\n                        PVExpTextAltAll = re.findall('.*EXPERIENCE.*',rnumtoname)\n\n                        # Intialize the list which will contain the Job Class details for Alternate Job Class for Paid or Volunteer Time experience\n                        PVExpTxt =[]\n                        for x in PVExpTextAltAll:\n                            # The below logic is for the senario when we have two set of Paid or Volunteer Time experience details in the requirement\n                            #    One that is for the Primary Job Class and Second for the alternative Job Class\n                            #    Since the Primary Job Class has been evaluated earlier, the logic filters out the data for alternative Job Class(which is normally specified as the word Substitute)\n                            if re.findall('PAID OR VOLUNTEER.*SUBSTIT.*|VOLUNTEER OR PAID.*SUBSTIT.*',x)!=[]:\n                                # Omitting the word Paid or Volunteer Time in case of Alternate Job Class\n                                # This will be helpful in the next steps and avoid filtering of data which contains alternate Job Class for Paid or Volunteer Time\n                                x = re.sub('PAID OR VOLUNTEER|VOLUNTEER OR PAID','',x)\n                            PVExpTxt = PVExpTxt  + [x]    \n\n                        #This logic extracts the final filtered text that contains alternate Job Class\n                        #  In many requirement Education\/Certification\/Course\/Program are considered as Substitute for an experience\n                        #  Below logic Omits those details as we need only expericence details to compute alternate Job Class\n                        #  Since the Requirement text already has Paid or Volunteer Time experience details which was used to evaluate the Primary Job Class. We are omitting that details to avoid reconsidering the same for alternate Job Class\n                        #  The logic Splits on 'SUBSTIT' as many of the requirement mentions that the experience is a substitute for the Primary JobClass and if we dont split the data we will get the Primary Job Class again in Alternate Job Class \n                        PVExpTextAlt = [re.split('SUBSTIT',x)[0] for x in PVExpTxt if re.findall('PAID OR VOLUNTEER|VOLUNTEER OR PAID|RECOMMENDATION|PROGRAM.*SUBSTIT.*|COURSE.*SUBSTIT.*|DEGREE.*SUBSTIT.*|CERTIFI.*SUBSTIT.*',x)==[]]\n                        PVExpAltJBC = re.findall(JobtilePattern,'|'.join(PVExpTextAlt))\n\n                        # Below Logic formats and cleans the Job Class in final format \n                        #  Multiple Job Class is seperated by |  \n                        #  Omitting any unnecessary puncuation mark around the Job Class\n                        frmtOut[11] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in PVTimeJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n                        frmtOut[12] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in PVExpAltJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n\n#                   Processing the Apprenticeship Experience Data\n                    elif 'APPRENTICESHIP' in ExpTypeFindAll:\n                        frmtOut[10] = 'APPRENTICESHIP'\n                       \n                        # Check if any Experience Length is mentioned for APPRENTICESHIP experience\n                        APPTimeLen = re.findall('\\d+.*APPRENTICESHIP.*',rnumtoname)\n                        # Only first occurance of APPRENTICESHIP Time will be consider to evaluate experience length\n                        if APPTimeLen != []:\n                            APPTimeLenTxt = re.findall('\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}APPRENTICESHIP?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*APPRENTICESHIP?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*APPRENTICESHIP?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*APPRENTICESHIP?',APPTimeLen[0])\n                            frmtOut[9] = years_of_experience(APPTimeLenTxt)\n\n                        # Since this section considers Apprenticeship, it cant have Job Classes\n                        # Considered Apprenticeship as just a pre requisite Job Class internship for Job Class Applicant will apply for\n                        frmtOut[11] = ''\n                        frmtOut[12] = ''\n\n#                   Processing the Hours Of Experience Data\n                    elif re.search('HOURS OF','|'.join(ExpTypeFindAll)) is not None:\n                        frmtOut[10] = 'HOURS OF'\n                        # Check if any Experience Length is mentioned for HOURS OF experience\n                        HoursOfLen = re.findall('\\d+.*HOURS OF.*',rnumtoname)\n                        # Only first occurance of HOURS OF will be consider to evaluate experience length\n                        if HoursOfLen != []:\n                            #In the event when multiple Hours Of  Time experience length is mentioned, the logic considers the first occurance of of the experience lenght\n                            HoursOfLenTxt = re.findall('[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOURS OF?',HoursOfLen[0])\n                            # Caculate the exact length by calling years_of_experience function\n                            frmtOut[9] = years_of_experience(HoursOfLenTxt)\n\n                        # Below is the logic the Extract the corresponding Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Primary Job Class, the details pertaining to substitute experience has been omitted\n                        HoursOfTextAll =[x for x in re.findall('.*HOURS OF.*',rnumtoname) if re.findall('HOURS OF.*SUBSTIT.*',x)==[] ]\n                        HoursOfJBC = re.findall(JobtilePattern,'|'.join(HoursOfTextAll))\n\n                        # Below is the logic the Extract the correponding alternate Job Class if anything has been mentioned \n                        #   The REQuirement Details contains details  of Experience which can act as substitute \n                        #   Since the following logic identifies the Alternative Job Class, the details pertaining to substitute experience has been considered\n                        #       Please note that, from data analysis I identified that requirement can have a Hours Of  Time experience details along with any other experience\n                        #       For alternate Job class we are considerring any experience be it be Hours Of  Time or not\n                        #       Hence I am filtering data on EXPERIENCE\n                        HoursOfTextAltAll = re.findall('.*EXPERIENCE.*',rnumtoname)\n                        # Intialize the list which will contain the Job Class details for Alternate Job Class for Hours Of  Time experience\n                        HoursOfTxt =[]\n                        for x in HoursOfTextAltAll:\n                            # The below logic is for the senario when we have two set of Hours Of  Time experience details in the requirement\n                            #    One that is for the Primary Job Class and Second for the alternative Job Class\n                            #    Since the Primary Job Class has been evaluated earlier, the logic filters out the data for alternative Job Class(which is normally specified as the word Substitute)\n                            if re.findall('HOURS OF.*SUBSTIT.*',x)!=[]:\n                                # Omitting the word Hours Of  Time in case of Alternate Job Class\n                                # This will be helpful in the next steps and avoid filtering of data which contains alternate Job Class for Hours Of  Time\n                                x = re.sub('HOURS OF','',x)\n                            HoursOfTxt = HoursOfTxt  + [x]    \n\n                        #This logic extracts the final filtered text that contains alternate Job Class\n                        #  In many requirement Education\/Certification\/Course\/Program are considered as Substitute for an experience\n                        #  Below logic Omits those details as we need only expericence details to compute alternate Job Class\n                        #  Since the Requirement text already has Hours Of  Time experience details which was used to evaluate the Primary Job Class. We are omitting that details to avoid reconsidering the same for alternate Job Class\n                        #  The logic Splits on 'SUBSTIT' as many of the requirement mentions that the experience is a substitute for the Primary JobClass and if we dont split the data we will get the Primary Job Class again in Alternate Job Class \n                        HoursOfTextAlt = [re.split('SUBSTIT',x)[0] for x in HoursOfTxt if re.findall('HOURS OF|RECOMMENDATION|PROGRAM.*SUBSTIT.*|COURSE.*SUBSTIT.*|DEGREE.*SUBSTIT.*|CERTIFI.*SUBSTIT.*',x)==[]]\n                        HoursOfAltJBC = re.findall(JobtilePattern,'|'.join(HoursOfTextAlt))\n\n                        # Below Logic formats and cleans the Job Class in final format \n                        #  Multiple Job Class is seperated by |  \n                        #  Omitting any unnecessary puncuation mark around the Job Class\n                        frmtOut[11] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in HoursOfJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n                        frmtOut[12] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in HoursOfAltJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n\n#                   Processing the Other Experience Data\n                    else:\n                        # The Below logic checks for any Education\/Certification\/Program\/Course\/ Certificate related inforamation is present in the requirement that is substitute for experience\n                        StudySubExpFindAll = re.findall('GRADUAT[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE[\\.]?|DEGREE[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE|SEMESTER[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE|QUARTER[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE|PROGRAM[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE|COURSE[A-Z0-9\\W ]*SUBSTIT[A-Z0-9\\W ]*EXPERIENCE',rnumtoname)\n\n                        # The further logic is executed if\n                        #    No Education\/Certification\/Program\/Course\/ Certificate related inforamation is present as we are bothered only for the experience details\n                        #    Or \n                        #    In case, any Education\/Certification\/Program\/Course\/ Certificate related inforamation is present\n                        #      It check any additonal Experience data is available. So the word EXPERIENCE has to appear more than Study related Data\n                        #          If the requirement says that XYZ education is substitute for Experience then there must be additional Experience data\n                        if StudySubExpFindAll == [] or (StudySubExpFindAll != [] and ExpTypeFindAll.count('EXPERIENCE') > len(StudySubExpFindAll)):\n                            frmtOut[10] = 'OTHERS'\n\n                            # Check if any Experience Length is mentioned for OTHERS experience\n                            OthersLen =   re.findall('\\d+.*EXPERIENCE.*|CURRENT EMPLOY.*|\\d+.*YEARS AS A.*|EXPERIENCE EQU.*\\d+.*',rnumtoname)\n                            # Only first occurance of Other Time will be consider to evaluate experience length\n                            if OthersLen != []:\n\n                                #In the event when multiple Other experience length is mentioned, the logic considers the first occurance of of the experience lenght\n                                #  The below consider the text where Experience length comes first like  '5 years of Experience'\n                                OthersLenTxt = re.findall('\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}EXPERIENCE?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*EXPERIENCE?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*EXPERIENCE?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*EXPERIENCE?|\\d+[A-Z\\-\\,\\:\\#\\;\\d ]{1,10}HALF[A-Z\\-\\,\\:\\#\\; ]YEAR[A-Z\\-\\,\\:\\#\\; ]{1,15}CURRENT EMPLOY?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEAR[A-Z\\-\\,\\:\\#\\; ]*CURRENT EMPLOY?|\\d+[A-Z\\-\\,\\:\\#\\; ]*MONTH[A-Z\\-\\,\\:\\#\\; ]*CURRENT EMPLOY?|[\\d\\,]+[A-Z\\-\\,\\:\\#\\; ]*HOUR[A-Z\\-\\,\\:\\#\\; ]*CURRENT EMPLOY?|\\d+[A-Z\\-\\,\\:\\#\\; ]*YEARS AS A?',OthersLen[0])\n                                #  The below consider the text where Experience length comes later  like 'Experience Equivlant to 5 years'\n                                OthersLenEquTxt = re.findall('EXPERIENCE EQU[A-Z\\W ]*TO [\\d]+[A-Z\\W ]*HALF[A-Z\\-\\,\\:\\#\\; ]YEAR|EXPERIENCE EQU[A-Z\\W ]*TO [\\d]+[A-Z\\W ]*YEAR|EXPERIENCE EQU[A-Z\\W ]*TO [\\d]+[A-Z\\W ]*MONTH|EXPERIENCE EQU[A-Z\\W ]*TO [\\d\\,]*[A-Z\\W ]*HOUR',OthersLen[0])\n                                \n                                # Calling the functions that calculates the actual experience lenght based on the above two conditions                             \n                                if OthersLenEquTxt !=[]:\n                                    frmtOut[9] = years_of_experiencelater(OthersLenEquTxt)\n                                else:\n                                    frmtOut[9] = years_of_experience(OthersLenTxt)\n\n                                # Below is the logic the Extract the corresponding Job Class if anything has been mentioned \n                                #   The REQuirement Details contains details  of Experience which can act as substitute \n                                OthersTextAll =[x for x in re.findall('.*EXPERIENCE.*|.*CURRENT EMPLOY.*|.*YEARS AS A.*|.*EXPERIENCE EQU.*',rnumtoname) if re.findall('EXPERIENCE.*SUBSTIT.*|CURRENT EMPLOY.*SUBSTIT.*|YEARS AS A.*SUBSTIT.*|EXPERIENCE EQU.*SUBSTIT.*',x)==[] ]\n                                OthersJBC = re.findall(JobtilePattern,'|'.join(OthersTextAll))\n\n                                # Below Logic formats and cleans the Job Class in final format \n                                #  Multiple Job Class is seperated by |  \n                                #  Omitting any unnecessary puncuation mark around the Job \n                                #  For Experience in Other Category, the logic does not  evaluate alternate Job Class as it this category considers all the experience that were not considered earlier \n                                frmtOut[11] = '|'.join([x.strip('\\.|\\,|\\;|\\\"| ') for x in OthersJBC if x.strip('\\.|\\,|\\;|\\\"| ') != ''])\n                                frmtOut[12] = ''\n                                        \n\n#               The Below logic extracts the Job Class function if the requirement has contains experience details as per the category mentioned above\n                if  frmtOut[10] != '':\n                    JobFunction= re.findall('.*',rowstrip)\n                    # Omitting other details that are already captured in other elements and extracting the Job Class function details    \n                    JobFunctionDetail= [x for x in re.findall('.*',rowstrip) if re.findall('FULL[- ]{1}TIME|PART[- ]{1}TIME|PAID OR VOLUNTEER|VOLUNTEER OR PAID|HOURS OF|APPRENTICESHIP|EXPERIENCE|CURRENT.*EMPLOY|VALID.*CARD|YEAR|MONTH|HOUR|PROGRAM|COURSE|DEGREE|HIGH SCHOOL|CERTIFI|REGIST|QUARTER|SEMETER|LICENSE|COMPLETION OF|ATTAINMENT OF|RECOMMENDATION|U.S. CITIZENSHIP|GRADUAT',x,flags=re.IGNORECASE) == [] and x.strip()!='']\n                    JobFunctionDetailClean = [re.sub('^[A-Za-z0-9]{1}[\\.\\) ]{1}|\\s',' ',x).strip('\\-\\* ') for x in JobFunctionDetail if re.findall('JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER',x,flags=re.IGNORECASE)==[]]\n                    frmtOut[13] = ';and '.join(JobFunctionDetailClean)\n#END Experience Details\n#######################################################################################\n\n\n                if updateflag == 1 :\n                    frmtOut_CP = frmtOut.copy()\n                    frmtAll.append(frmtOut_CP)\n                updateflag = 0\n            \n\n#END: REQUIREMENT DETAILS \n###################################################################################\n###################################################################################\n###################################################################################\n###################################################################################\n\n\n\npandaDF = pd.DataFrame(frmtAll,columns=fileheader)\nFilesWithMissingInfoDF = pd.DataFrame(FilesWithMissingInfo,columns=['Error Details','File Name'])\n\n#print(pandaDF)\n\npandaDF.to_csv(\"JobBullentinExtractCSV.csv\",sep=',',index=None)\nFilesWithMissingInfoDF.to_csv(\"FilesWithMissingInfo.csv\",sep=',',index=None)\nprint('Structured CSV file have been created as JobBullentinExtractCSV.csv' )\nprint(FilesWithMissingInfoDF)\nprint('Count Of Files with Missing Data:',len(FilesWithMissingInfo))\n#pandaDF.to_csv()","ac6006c6":"import re\nfrom os import listdir\n#import readability\nfrom wordcloud import WordCloud\nfrom os.path import isfile, join\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/data-science-for-good-city-of-los-angeles\/cityofla\/CityofLA\/Job Bulletins\/'\nfilelist = [f for f in listdir(foldername) if isfile(join(foldername, f))]\n\n#Initialize  list\nAnalysisAll = []\nJobHeaderAll = []\n\n\n#Process the files in Job Bulletins folder\nfor filename in filelist:\n\n    entirepath= foldername + filename\n    textfile = open(entirepath,'r',encoding='latin-1')\n    filetext = textfile.read()\n    textfile.close()\n\n#initializing the List for current file as EMPTY\n    AnalysisOut =[0,0,0,0,0,0,0,0,0,0]\n\n#Populating the filename as a first element of list\n    AnalysisOut[0] = filename\n\n# Calculating the length of file\n    AnalysisOut[1] = len(filetext)\n    \n# Calculating the Number of sentences of file    \n    AnalysisOut[2] = len(re.findall('\\n',filetext))\n\n# Calculating the Number of Section(like Annual Salary, Duties) and their length in the file \n    HeaderListRaw = re.findall('\\n[A-Z\\d\\W]{4,}\\n',filetext)\n    HeaderList = [re.sub('\\n*|\\s{2,}|\\t|\\:','',x) for x in HeaderListRaw]\n    AnalysisOut[3] = HeaderList\n    AnalysisOut[4] = len(HeaderList)\n    \n# Generating a list containing length of each section \n    StartPoint = 0\n    NewText = filetext[StartPoint:]\n    SectionLen=[]\n    for x in HeaderListRaw:\n        NewText = NewText[StartPoint:]\n        Srchx = re.search(x.replace('+','\\+'),NewText)\n        if Srchx is not None:\n            SectionText = NewText[:Srchx.start()]\n            StartPoint = Srchx.start()\n        SectionLen = SectionLen + [len(SectionText)]\n    SectionLen = SectionLen + [len(NewText[StartPoint:])]\n    AnalysisOut[5] = SectionLen\n    \n# Calculating the Minimum length of sections in file \n    AnalysisOut[6] = min(SectionLen)\n# Calculating the Maximum length of sections in file \n    AnalysisOut[7] = max(SectionLen)\n# Calculating the Average length of sections in file \n    AnalysisOut[8] = round(sum(SectionLen)\/len(SectionLen))\n# Calculating the FleschReadingScale of the file \n#    AnalysisOut[9] = readability.getmeasures(filetext, lang='en')['readability grades']['FleschReadingEase']\n    AnalysisOut[9] = 0\n    \n    AnalysisAll.append(AnalysisOut)\n    JobHeaderAll = JobHeaderAll + AnalysisOut[3]\n\n#Converting into panda dataframe\npromoDF = pd.DataFrame(AnalysisAll,columns=['File Name','File Length','Number of sentences','Section in file','Number of Sections','Length Of Sections','Section Min Length','Section Max Length','Section Avg Length','FleschReadingScale'])\nprint(\"Average of various count showing the statistics on the readibility of Job Bulletins\")\nprint(promoDF.mean())\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(' '.join(JobHeaderAll))\n\nfig = plt.figure(figsize=(35,9))\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\n#Writing into csv file for the ease of analysis\npromoDF.to_csv(\"JBAnalysisDetails.csv\",sep=',',index=None)\n","27b7e2ae":"from os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/kaggle-cityofla-competition\/'\nfilename = 'JobBullentinExtractCSV.csv'\n\nentirepath= foldername + filename\n#Setting an empty JobTile list\nJobBull = []\n\n#Read the Job Bulletins CSV into a dataframe and convert it to list\nJobBullDF = pd.read_csv(entirepath)\n\n#Plotting Graphs\nJobBullDF['SCHOOL_TYPE'].value_counts().plot.bar()\nplt.title('JOB Bulletins volume based on EDUCATION TYPE')\nplt.xlabel('EDUCATION TYPE')\nplt.ylabel('Count of JobBulletins')\nplt.show()\n\n\nJobBullDF['FULL_TIME_PART_TIME'].value_counts().plot.bar()\nplt.title('JOB Bulletins volume based on EXPERIENCE TYPE')\nplt.xlabel('EXPERIENCE TYPE')\nplt.ylabel('Count of JobBulletins')\n\nplt.show()\n\nJobBullDF['EXPERIENCE_LENGTH'].hist()\nplt.title('JOB Bulletins volume based on JOB EXPERIENCE TENURE')\nplt.xlabel('JOB EXPERIENCE TENURE(In Years)')\nplt.ylabel('Count of JobBulletins')\n\nplt.show()","01124a8f":"import re\nfrom os import listdir\n#import readability\nfrom wordcloud import WordCloud\nfrom os.path import isfile, join\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n#Get the list of files under Job Bulletins\nfoldername='..\/input\/kaggle-cityofla-competition'\nfilelist = [f for f in listdir(foldername)]\nprint(filelist)\npromoDF = pd.DataFrame(filelist)\nprint(promoDF)\n","fa992b3f":"##**Driving License Analysis**\n\nApproach\n*  Identify the pattern to search the Driving License details from the plain text file\n*  Refine the pattern unless and until you find a pattern that satifies all the available test file\n\nRecommendation:\n* Currently the Driving License Requirement available in the elaborate text and can be replaced with specific bullet point information. Job Bulletins can specifically mention if License is 'Required or Not Required' and if required, the details of the type of licence in case of special license requirement.\n* Similar the violation information can be described in a very crisp manner rather than elaborate text\n\nOutput files:\n* DrivingLicDetails.csv : Contains the Driving License extracted from individual Job Bulletin plain text file","746bd649":"##**Approach**\n* Analysis each and every data element for the Kaggle datadictionary based on the data in the plain text file available under the Job Bulletins folder\n* The intent is to understand the data pattern, missing element and finalizing the approach to extract it streamlessly from the bunch of plain text file\n* Create the final csv as per the Kaggle Data Dictionary\n* Document any finding or disprepency or recommendation that can help in attaining the overall goal","96810b13":"##**Job Class Title Analysis**\n\nApproach\n*  Identify the pattern to search the Job Class Title details from the plain text file\n*  Refine the pattern unless and until you find a pattern that satifies all the available test file\n*  Match the extracted Job Class Title with the Job Titles available in the Job Title csv of the Competition Data\n*  Generate a new Job Title csv which will contain the missing Job Titles\n \nFinding:\n* Few files have 'CAMPUS INTERVIEWS ONLY' tag in the beginning\n* Few files have acrynom in Job tiles enclosed ()\n* Many job tiles used in the plain text files were missing from the master Job Title list of the Competition Data\n* Many plain text file have different Job Tile in file name and in the file content\n\nRecommendation:\n* Standarize the Job Titles and same has to be consitently used across the job bulletins to avoid confusion.\n\nOutput files:\n* JOBClassExtract.csv : Contains the jobtile extracted from individual Job Bulletin plain text file\n* MissingJobClass.csv : List of Job Titles that were unavailable in the Master Job Title list of the Competition Data\n* NewJobTitles.csv : New Job Title master list that contains all the Job Titles including the missing one\n* MismatchJobClassnFileName : List of files where job title in filename doesnt match with the Job title in the file","7678d651":"##**Sample Bias from the Job Bulletins Extracts**\nThe below logic shows graph on how the Jobs are aligned based on the Education Type, Experience Type and the Experience Length\n\nEducation Type:\nThe graph shows the Jobs require primarily a College or University Degree or a Certified professional\n\nExperience Type:\nThe graph shows inclination towards FUll_TIME Job Experience. But it is again upto the related authorities to decide on how they want to use human resources\n\nExperience Length:\nThe graph shows inclination towards 2-Years  Experienced profession. This could have bean more balance.\n\n\n","e1b12754":"**Understand the available data to finalize the approach**\nThe key folder and document for the csv generation:\n* Job Bulletins\n* Annotation Descriptions.docx\n* Job_titles.csv\n* Kaggle_data_dictionary.csv\n* Sample job class export template.csv\n\nThe key folder and document for further analysis:\n* Generated intermediate or final csv\n* Annotation Descriptions.docx\n* City Job Paths\n* Description of promotions in job bulletins.docx\n* Job_titles.csv","7bd06e0f":"##**Structured CSV of Job Bulletins**\nThe below logic convert a folder full of plain-text job postings into a single structured CSV file\n\nThe following elements defined in the Data Dictonary are being retrived from the REQUIREMENT\/MINIMUM QUALIFICATION section of the Job Bulletins     \n*EDUCATION_YEARS\n*SCHOOL_TYPE\n*EDUCATION_MAJOR\n*EXPERIENCE_LENGTH\n*FULL_TIME_PART_TIME\n*EXP_JOB_CLASS_TITLE\n*EXP_JOB_CLASS_ALT_RESP\n*EXP_JOB_CLASS_FUNCTION\n*COURSE_COUNT\n*COURSE_LENGTH\n*COURSE_SUBJECT\n*MISC_COURSE_DETAILS\n*ADDTL_LIC\n\nThe following elements defined in the Data Dictonary are being generated by the code below:\n*REQUIREMENT_SET_ID\n*REQUIREMENT_SUBSET_ID\n\nThe following elements defined in the Data Dictonary are being retrived from the ANNUAL INCOME section of the Job Bulletins     \n*ENTRY_SALARY_GEN\n*ENTRY_SALARY_DWP\n\nThe following elements defined in the Data Dictonary are being retrived from the OPEN DATE,Beggining of file, Class Code,DUTIES section of the Job Bulletins     \nOPEN_DATE\nJOB_CLASS_TITLE\nJOB_CLASS_NO\nJOB_DUTIES\n\nThe following elements defined in the Data Dictonary by searching entire Job Bulletins     \nDRIVERS_LICENSE_REQ\nDRIV_LIC_TYPE\nEXAM_TYPE\n\nAfter studying the data, this logic is categorizing Education Type as\n*COLLEGE OR UNIVERSITY : if the education is attained from College or University\n*HIGH SCHOOL :For High School education\n*CERTIFICATE : For any certificate\n*ASSOCIATE DEGREE : For Associate Degree\n*ACCREDITED INSTITUTE : When College or University is not refered and it is mentioned that the education should be from Accrediated Institute\n*DEGREE WITHOUT SPECIFICATION : For instance where degree is referred but it is not mentioned whether it should be from Collegeor University or Any accrediated institute \n\nAfter studying the data, this logic is categorizing Experience Type as\n*Full Time\n*Part Time\n*Paid Or Vocational Experience \n*Apprenticship  Experience \n*Hours Of : When the experience is mentioned in hours not in Full Time, Part Time ...                \n*Others : When the experience details doesnt falls in any of the mentioned category\n\n","5579c575":"##**Split Requirement into Requirement Set and Requirement SUB Set logic**\n\nThe logic is based on the 'sample job class export template\n Logic:\n   If the requirements are seperated by OR conjunction, the requirement details are presented in seperate rows in the output csv\n   If the requirements are seperated by AND conjunction, the requirement details are presented in current rows in the output csv\nOutput:\n   The output of this function is a list of different requirement  available in a Job Bulletins\nExample 1:\n   If a Job Bulletin has requirement as:\n    1. ReQ Detail1; and 2. ReQ Detail2       ; and 3. ReQ Detail3       ; and 4. ReQ Detail4\n                        a. ReQ Detail2; or         a. ReQ Detail3; or \n                        b. ReQ Detail2;            b. ReQ Detail3;  \n   Here the Requirments are seperated  by and conjuction but ReQ 2 and ReQ3 has two sub requirement\n   The output set for this  requirement is presented as below \n    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n    1. ReQ Detail1; and 2. ReQ Detail2  a. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   a. ReQ Detail3; and 4. ReQ Detail4\n    1. ReQ Detail1; and 2. ReQ Detail2  b. ReQ Detail2;  and 3. ReQ Detail3   b. ReQ Detail3; and 4. ReQ Detail4\n\nExample 2:\n   If a Job Bulletin has requirement as:\n    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n   Here the Requirments are seperated  by and conjuction \n   The output set for this  requirement is presented as below \n    1. ReQ Detail1; and 2. ReQ Detail2 ; and 3. ReQ Detail3 ; and 4. ReQ Detail4\n    \nExample 3:\n   If a Job Bulletin has requirement as:\n    1. ReQ Detail1; or 2. ReQ Detail2 ; or 3. ReQ Detail3 ; or 4. ReQ Detail4\n   Here the Requirments are seperated  by and conjuction \n   The output set for this  requirement is presented as below \n    1. ReQ Detail1; \n    2. ReQ Detail2;\n    3. ReQ Detail3;\n    4. ReQ Detail4","84ccb2df":"##**Annual Salary Analysis**\n\nApproach\n*  Identify the pattern to search the Annual Salary details from the plain text file\n*  Refine the pattern unless and until you find a pattern that satifies all the available test file\n*  Check for any issues in the data\n \nFinding:\n* There are multiple Salary Range mentioned in Job Bulletins. It may be difficult for applicant to understand what is correct the Salary Range \n* We see two sets of Salary  one for Los Angles and another for Department of Water and Power. But there no reference whether the opening is for Los Angles Or Department of Water and Power. \n\nRecommendation:\n* Clearly mention the Salary Range  for the Job Bulletins\n* If there are multiple Salary Range, please specific the criteria on when a particular range is applicable\n\nGraph:\n* Multiple Salary figures for LosAngles Salary : There are few Job Bulletins which has even seven set of Salary Range Available. This graphs demonstrate various set of salary range present in the Job Bulletins against the count of Job Bulletins. For example how many Job Bullentins has two salary range and so on. This is for Los Angles Salary\n* Multiple Salary figures for DWP Salary: This demonstrate the same information as the above graph but it is for Department of Water and Power\n* Department of Water and Power: This graph is to prove the hypothesis that even if the Job Bulletins contains two sets of salary date one for Los Angles and another for Department of Water of Power, the Job Bulletins doesnt clearly specify whether the opening is for Los Angles Or Department of Water and Power Or how can they apply for Los Angles or DWP. This graphs captures the occurance of the tag 'Department of Water and Power' in the Job Bulletins and the graph clearly shows that most of the Job Bulletin has only occurance of this tag which proves the hypotheis that Job Bullentin doesnt clearly mention if the opening is for Los Angles or DWP\n\nOutput files:\n* SalaryDF.csv : Contains the Salary details extracted from individual Job Bulletin plain text file\n* LosAnglesSalaryManyDF.csv : Contains the list of Job Bulletins which has multiple salary range for Los Angles\n* DWPSalaryCleanALLDF.csv : Contains the list of Job Bulletins which has multiple salary range for Department of Water and Power\n","42aaa70d":"##**Open Date Analysis**\n\nApproach\n*  Identify the pattern to search the Open Date Title details from the plain text file\n*  Refine the pattern unless and until you find a pattern that satifies all the available test file\n*  Test the hypothesis that the Job Bulletin contains reference to year older than Open Date \n \nFinding:\n* Many Job Bulletins contains Revised Open Date. That means those Job Bulletins contains two dates - Open Date and Revised Date. In such instances, we have to consider Revised Open Date as the actual Open Date\n* There are instance where the Job Bulletin contains reference to year older than Open Date. While evaluating that we have not considered the content of Job Bulletin Requirement section as it refers to old dates for specifying experience. But please note that there can still be few exceptions where older dates are guinely referred but attempts have been made to normalize data optimally.\n\nRecommendation:\n* Not to use reference to older dates in Job Bulletins as it confuses the applicant\n* Keep only the accurate Open Date in Job Bulletins. Occurance of both Open Date and Revised date reflects as a change tracker for Job Bullentins but Job Bulletins are not meant for tracking history. \n\nOutput files:\n* JOBClassExtract.csv : Contains the jobtile extracted from individual Job Bulletin plain text file\n* MissingJobClass.csv : List of Job Titles that were unavailable in the Master Job Title list of the Competition Data\n* NewJobTitles.csv : New Job Title master list that contains all the Job Titles including the missing one","95bfdf20":"**Problem Statement**\nThe content, tone, and format of job bulletins can influence the quality of the applicant pool. Overly-specific job requirements may discourage diversity. The Los Angeles Mayor\u2019s Office wants to reimagine the city\u2019s job bulletins by using text analysis to identify needed improvements. \n\n**The goal is to **\nConvert a folder full of plain-text job postings into a single structured CSV file and then to use this data to:\n1. Identify language that can negatively bias the pool of applicants; \n2. Improve the diversity and quality of the applicant pool; and\/or \n3. Make it easier to determine which promotions are available to employees in each job class.","d1988f5b":"##**Readability of the Job Bulletins**\n\nThe Job Bullentins can be more structured. \nThe current Job Bulletins are very lengthy with multiple sections in it \nThey can be refined further to provide a crisp and clear understanding of the Job Requirement\n\nThe below logic also shows a WordCloud for the section(the header in capital in Job Bullentins are considered section here).\nThe graph higlighs the usage of PROCESS NOTES in the Job Bulletins  similarly few other Sections\n\nI couldn not install the readbility package in my Kaggle kernal and hence the FleschReadingScale value couldn't be shown and have be set to zero.\n\nHere are the actual statistics:\n\nAverage of various count showing the statistics on the readibility of Job Bulletins\n\n*File Length            9757.032211\n\n*Number of sentences      86.510981\n\n*Number of Sections       12.877013\n\n*Section Min Length       47.891654\n\n*Section Max Length     3088.926794\n\n*Section Avg Length      707.969253\n\n*FleschReadingScale       38.378158"}}