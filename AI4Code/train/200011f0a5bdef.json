{"cell_type":{"f2181209":"code","619d77a5":"code","84247b95":"code","b8e39e93":"code","a38385bb":"code","ca24811f":"code","854bf0b1":"code","e87fa29e":"code","caa92434":"code","d0fb1719":"code","24e69034":"code","871bd812":"code","84dc496d":"code","3c9e1366":"code","b01a793e":"code","f247d758":"code","8562699d":"code","7b8f571a":"code","da3adef4":"code","c6c2502a":"code","eb633ac8":"code","b5b6f4f3":"code","0d57571d":"code","3389a889":"code","d7821368":"code","a8c0096b":"code","3f58abf5":"code","39727a99":"code","3386e79a":"code","fdc7b793":"code","185bc111":"code","16b78ddd":"code","a9e1aea6":"markdown","e3e067da":"markdown","bf2dc1d8":"markdown","dbca83e8":"markdown","0746d5c5":"markdown","e8313550":"markdown","db6b2d8c":"markdown","32f8add9":"markdown","8bb095cc":"markdown","b6bd075a":"markdown","6f0228ac":"markdown","c22c036b":"markdown","ed63b612":"markdown","1c7231d4":"markdown","0f053335":"markdown","2cf3fb2a":"markdown","3efa78b7":"markdown","007f447e":"markdown"},"source":{"f2181209":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","619d77a5":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","84247b95":"dataset_path = '\/kaggle\/input\/neolen-house-price-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(\"The shape of the dataset is {}.\".format(df.shape))","b8e39e93":"df.head(10)","a38385bb":"df.info()","ca24811f":"df.describe()","854bf0b1":"print('The most expensive house is sold by: {:,.0f}$'.format(df.SalePrice.max()))\nprint('The cheapest house is sold by: {:,.0f}$'.format(df.SalePrice.min()))\nprint('Mean SalePrice: {:,.0f}$ , Median SalePrice: {:,.0f}$'.format(df.SalePrice.mean(), df.SalePrice.median()))","e87fa29e":"df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())\ndf['Alley'] = df['Alley'].fillna('No alley access')\ndf['BsmtQual'] = df['BsmtQual'].fillna('No Basement')\ndf['BsmtCond'] = df['BsmtCond'].fillna('No Basement')\ndf['BsmtExposure'] = df['BsmtExposure'].fillna('No Basement')\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna('No Basement')\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna('No Basement')\ndf['FireplaceQu'] = df['FireplaceQu'].fillna('No Fireplace') \ndf['GarageType'] = df['GarageType'].fillna('No Garage')\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].median())\ndf['GarageFinish'] = df['GarageFinish'].fillna('No Garage')\ndf['GarageQual'] = df['GarageQual'].fillna('No Garage')\ndf['GarageCond'] = df['GarageCond'].fillna('No Garage')\ndf['PoolQC'] = df['PoolQC'].fillna('No Pool')\ndf['Fence'] = df['Fence'].fillna('No Fence')\ndf['MiscFeature'] = df['MiscFeature'].fillna('None')","caa92434":"df.info()","d0fb1719":"df['MasVnrType']=df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].median())\ndf.shape","24e69034":"lst_objects=[]\nfor col in df.columns:\n    if(df[col].dtype == np.object ):\n        #print(col)\n        lst_objects.append(col)\nprint(lst_objects)","871bd812":"df['Expensive'] = np.where(df.SalePrice >= df.SalePrice.median(), 'Yes', 'No')","84dc496d":"(df['Expensive']=='Yes').sum()","3c9e1366":"sns.boxplot(y='SalePrice', data=df)","b01a793e":"sns.histplot(data=df, x='SalePrice', hue='Expensive', kde=True)","f247d758":"ax = sns.boxplot(x='OverallQual', y='SalePrice', data=df)","8562699d":"fig, axes=plt.subplots(nrows=40, ncols=2, figsize=(20,140))\ncol=0\nfor i in range(40):\n    for j in range(2):\n        if df.columns[col] in lst_objects:\n            sns.histplot(x=df.columns[col], data=df, hue='Expensive', ax=axes[i,j])\n        else:\n            sns.scatterplot(x=df.columns[col], y='SalePrice', data=df , hue='Expensive',ax=axes[i,j])\n        col+=1\n#plt.savefig('Pic.jpg')","7b8f571a":"df.drop(columns=['Expensive'], inplace=True)","da3adef4":"from sklearn.preprocessing import LabelEncoder\ndf[lst_objects] = df[lst_objects].astype('category')\nlabelencoder = LabelEncoder()\nfor col in lst_objects:\n    df[col]= labelencoder.fit_transform(df[col])\n#Adding 1 for all values of label encoding\ndf[lst_objects] += 1\ndf[lst_objects]","c6c2502a":"df.head(5)","eb633ac8":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\n\nX_train = train_df.drop(columns=['Id','SalePrice'])\ny_train = train_df['SalePrice']\n\nX_val = val_df.drop(columns=['Id','SalePrice'])\ny_val = val_df['SalePrice']","b5b6f4f3":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\npred_val= model.predict(X_val)\nprint(\"RMSE is :\", mean_squared_error(y_val, pred_val, squared=False))","0d57571d":"from xgboost import XGBRegressor\n\n# Define  model as an object of XGBRegressor\nmodel_XGboost = XGBRegressor(n_estimators=350,max_depth=15,learning_rate=.1,random_state=1,\n                     n_jobs=10, subsample=1,min_child_weight=0.6) # Your code here\n\n# Fit the model\nmodel_XGboost.fit(X_train, y_train)\n\n# Get validation predictions using RMSE\npred_val_xgboost = model_XGboost.predict(X_val)\nprint(\"RMSE is :\", mean_squared_error(y_val, pred_val_xgboost, squared=False))","3389a889":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df","d7821368":"test_df.info()","a8c0096b":"test_df['LotFrontage'] = test_df['LotFrontage'].fillna(test_df['LotFrontage'].median())\ntest_df['Alley'] = test_df['Alley'].fillna('No alley access')\ntest_df['BsmtQual'] = test_df['BsmtQual'].fillna('No Basement')\ntest_df['BsmtCond'] = test_df['BsmtCond'].fillna('No Basement')\ntest_df['BsmtExposure'] = test_df['BsmtExposure'].fillna('No Basement')\ntest_df['BsmtFinType1'] = test_df['BsmtFinType1'].fillna('No Basement')\ntest_df['BsmtFinType2'] = test_df['BsmtFinType2'].fillna('No Basement')\ntest_df['FireplaceQu'] = test_df['FireplaceQu'].fillna('No Fireplace') \ntest_df['GarageType'] = test_df['GarageType'].fillna('No Garage')\ntest_df['GarageYrBlt'] = test_df['GarageYrBlt'].fillna(df['GarageYrBlt'].median())\ntest_df['GarageFinish'] = test_df['GarageFinish'].fillna('No Garage')\ntest_df['GarageQual'] = test_df['GarageQual'].fillna('No Garage')\ntest_df['GarageCond'] = test_df['GarageCond'].fillna('No Garage')\ntest_df['PoolQC'] = test_df['PoolQC'].fillna('No Pool')\ntest_df['Fence'] = test_df['Fence'].fillna('No Fence')\ntest_df['MiscFeature'] = test_df['MiscFeature'].fillna('None')","3f58abf5":"test_df.info()","39727a99":"test_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0], inplace=True)\ntest_df['MasVnrArea'].fillna(test_df['MasVnrArea'].median(), inplace=True)\ntest_df['Electrical'].fillna(test_df['Electrical'].mode()[0],inplace=True)\ntest_df.shape","3386e79a":"test_df[lst_objects] = test_df[lst_objects].astype('category')\nlabelencoder = LabelEncoder()\nfor col in lst_objects:\n    test_df[col]= labelencoder.fit_transform(test_df[col])\n    \n#Adding 1 for all values of label encoding\ntest_df[lst_objects] += 1\ntest_df[lst_objects]","fdc7b793":"test_df.head(5)","185bc111":"X_test = test_df.drop(columns=['Id'])\n\ny_test_predicted = model_XGboost.predict(X_test)\n\ntest_df['SalePrice'] = y_test_predicted\n\ntest_df","16b78ddd":"test_df[['Id', 'SalePrice']].to_csv('submission.csv', index=False)","a9e1aea6":"Creating **List of objects** that refers to the columns with type **'object'**","e3e067da":"**Import Packages**","bf2dc1d8":"**Clean data with 'NA' type in default to its type in desc.**","dbca83e8":"**Data Preprocessing**","0746d5c5":"**The Most Expensive House and the cheapest once**","e8313550":"**XGBRegressor Model**","db6b2d8c":"**Predicting the test 'SalePrice' using XGRegressor Model**","32f8add9":"**Using Label Encoding for categorical features**","8bb095cc":"**Read Train Data**","b6bd075a":"Label Encoding for categorial features","6f0228ac":"**Evaluating Over Testing**","c22c036b":"**Visualizing** fetures relative to **'SalePrice'**","ed63b612":"We add **'Expensive'** feature to help in **data visualization**","1c7231d4":"Remove **'Expensive'** from data","0f053335":"**Training over Data using Linear regression Using RMSE for evaluation**","2cf3fb2a":"Spliting Data into train and validation","3efa78b7":"**Replace nans columns with its median value**","007f447e":"Linear Regression Model"}}