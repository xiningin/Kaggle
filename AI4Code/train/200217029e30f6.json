{"cell_type":{"8479b0e8":"code","7092425a":"code","d44761c0":"code","0cd8cadd":"code","f64f7a0f":"code","f24c50a2":"code","dbc35ab6":"code","85a21128":"code","9db1bd95":"code","2e051349":"code","718f2dab":"code","8dceb353":"code","2fe037f2":"code","4f5017eb":"code","f233bdc9":"markdown","a5f28564":"markdown","50aa424f":"markdown","09fd8eb1":"markdown","ff5e394f":"markdown","cae738b4":"markdown"},"source":{"8479b0e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7092425a":"data_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', sep = ',', header = 0)\ndata_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', sep = ',', header = 0)\nprint(data_train)\ndata_train.info()\nprint(data_test)\ndata_test.info()","d44761c0":"# Replenish missing age data\n# Classify by salutation and calculate the average value of each\n# Using conbined data, train and test\n# Name\u306e\u656c\u79f0\u3067\u5206\u985e\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u5e73\u5747\u5e74\u9f62\u3092\u7b97\u51fa\n# \u5e74\u9f62\u306e\u6b20\u640d\u88dc\u5145\u306fdata_train \u3068 dat_test \u3092\u5408\u4f53\u3057\u3066\u884c\u3046\uff08\u3053\u306e\u30c7\u30fc\u30bf\u9593\u306e\u76f8\u95a2\u306f'Survived'\u3068\u95a2\u4fc2\u306a\u3044\u306e\u3067\uff09\ncombine1 = [data_train]\nfor data_train in combine1:\n    data_train['Salutation'] = data_train.Name.str.extract(' ([A-Za-z]+).', expand=False)\nfor data_train in combine1:\n    data_train['Salutation'] = data_train['Salutation'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    data_train['Salutation'] = data_train['Salutation'].replace('Mlle', 'Miss')\n    data_train['Salutation'] = data_train['Salutation'].replace('Ms', 'Miss')\n    data_train['Salutation'] = data_train['Salutation'].replace('Mme', 'Mrs')\n\ncombine2 = [data_test]\nfor data_test in combine2:\n    data_test['Salutation'] = data_test.Name.str.extract(' ([A-Za-z]+).', expand=False)\nfor data_test in combine2:\n    data_test['Salutation'] = data_test['Salutation'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    data_test['Salutation'] = data_test['Salutation'].replace('Mlle', 'Miss')\n    data_test['Salutation'] = data_test['Salutation'].replace('Ms', 'Miss')\n    data_test['Salutation'] = data_test['Salutation'].replace('Mme', 'Mrs')\n\n\nSalutation_mapping = {'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Rare':5}\nfor data_train in combine1:\n    data_train['Salutation'] = data_train['Salutation'].map(Salutation_mapping)\n    data_train['Salutation'] = data_train['Salutation'].fillna(0)\nfor data_test in combine2:\n    data_test['Salutation'] = data_test['Salutation'].map(Salutation_mapping)\n    data_test['Salutation'] = data_test['Salutation'].fillna(0)\n\nAge_Salutation_dn1 = data_train[['Age', 'Salutation']].dropna()\nAge_Salutation_dn2 = data_test[['Age', 'Salutation']].dropna()\n\nAge_Salutation_dn1 = np.array(Age_Salutation_dn1)\nAge_Salutation_dn2 = np.array(Age_Salutation_dn2)\n\nt_age_Mr, t_age_Miss, t_age_Mrs, t_age_Master, t_age_Rare = 0, 0, 0, 0, 0\nMr_count, Miss_count, Mrs_count, Master_count, Rare_count = 0, 0, 0, 0, 0\nfor i in range(len(Age_Salutation_dn1)):\n    age1 = Age_Salutation_dn1[i][0]\n    if Age_Salutation_dn1[i][1] == 1:\n        t_age_Mr += age1\n        Mr_count += 1\n    elif Age_Salutation_dn1[i][1] == 2:\n        t_age_Miss += age1\n        Miss_count += 1\n    elif Age_Salutation_dn1[i][1] == 3:\n        t_age_Mrs += age1\n        Mrs_count += 1\n    elif Age_Salutation_dn1[i][1] == 4:\n        t_age_Master += age1\n        Master_count += 1\n    else:\n        t_age_Rare += age1\n        Rare_count += 1\nfor i in range(len(Age_Salutation_dn2)):\n    age2 = Age_Salutation_dn2[i][0]\n    if Age_Salutation_dn2[i][1] == 1:\n        t_age_Mr += age2\n        Mr_count += 1\n    elif Age_Salutation_dn2[i][1] == 2:\n        t_age_Miss += age2\n        Miss_count += 1\n    elif Age_Salutation_dn2[i][1] == 3:\n        t_age_Mrs += age2\n        Mrs_count += 1\n    elif Age_Salutation_dn2[i][1] == 4:\n        t_age_Master += age2\n        Master_count += 1\n    else:\n        t_age_Rare += age2\n        Rare_count += 1\n    \n\n\nm_age_Mr = t_age_Mr \/ Mr_count\nm_age_Miss = t_age_Miss \/ Miss_count\nm_age_Mrs = t_age_Mrs \/ Mrs_count\nm_age_Master = t_age_Master \/ Master_count\nm_age_Rare = t_age_Rare \/ Rare_count\n\nprint('Mr:', m_age_Mr)\nprint('Miss:', m_age_Miss)\nprint('Mrs:', m_age_Mrs)\nprint('Master:', m_age_Master)\nprint('Rare:', m_age_Rare)","0cd8cadd":"from pandas import Series, DataFrame\nimport math\n\n# \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\ndata_set = DataFrame(data_train.drop(['PassengerId', 'Name', 'Ticket'], axis=1)) # \u4f7f\u308f\u306a\u3044\u5217\u3092\u524a\u9664\ndata_set = data_set.fillna({'Fare':0, 'Cabin':0,'Embarked':0}) # 'Fare'\u3068'Cabin\u3068'Embarked'\u306e\u7a7a\u6b04\u30920\u3067\u57cb\u3081\u308b \ndata_set = data_set.replace({'male':0, 'female':1, 'S':1, 'C':2, 'Q':3}) # \u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048(Sex, Embarked)\ndata_set = data_set.replace({'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6, 'G':7, 'T':8}, regex=True) # \u6587\u5b57\u5217\u3092\u542b\u3080\u30c7\u30fc\u30bf\u3092\u90e8\u5206\u4e00\u81f4\u3067\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048(Cabin)\n\n# \u5e74\u9f62\u306e\u6b20\u640d\u88dc\u5145\uff08Mr,Miss,Mrs,Master,Rare\u5225\u306b\uff09\nfor i in range(len(data_set)):\n    salutation = data_set['Salutation'][i]\n    if salutation == 1:\n        if pd.isnull(data_set['Age'][i]):\n            data_set['Age'].loc[i] = m_age_Mr\n    elif salutation == 2:\n        if pd.isnull(data_set['Age'][i]):\n            data_set['Age'].loc[i] = m_age_Miss\n    elif salutation == 3:\n        if pd.isnull(data_set['Age'][i]):\n            data_set['Age'].loc[i] = m_age_Mrs\n    elif salutation == 4:\n        if pd.isnull(data_set['Age'][i]):\n            data_set['Age'].loc[i] = m_age_Master\n    else:\n        if pd.isnull(data_set['Age'][i]):\n            data_set['Age'].loc[i] = m_age_Rare\n\n# \u65b0\u305f\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3059\u308b\n# \u81ea\u5206\u3092\u542b\u3081\u305f\u5bb6\u65cf\u4eba\u6570\ndata_set['FamilySize'] = data_set['SibSp'] + data_set['Parch'] + 1\n# \u4e00\u4eba\u304b\u3069\u3046\u304b\u3001FamilySize\u304c2\u4ee5\u4e0a5\u672a\u6e80\u3001FamilySize\u304c5\u4ee5\u4e0a\u3001Cabin\u304c0\u304b\u3069\u3046\u304b\nisAlone = []\nFamilySize_M = []\nFamilySize_L = []\nisCabinNo = []\nroundAgeArray = []\nroundFareArray = []\nfor i in range(len(data_set)):\n    if data_set['FamilySize'][i] == 1:\n        isAlone.append(1)\n    else:\n        isAlone.append(0)\n    if data_set['Cabin'][i] == 0:\n        isCabinNo.append(1)\n    else:\n        isCabinNo.append(0)\n    if data_set['FamilySize'][i] < 2:\n        FamilySize_M.append(0)\n        FamilySize_L.append(0)\n    elif data_set['FamilySize'][i] < 5:\n        FamilySize_M.append(1)\n        FamilySize_L.append(0)\n    else:\n        FamilySize_M.append(0)\n        FamilySize_L.append(1)\n    # \u5e74\u4ee3\n    roundAge = int(data_set['Age'][i] \/ 10)\n    roundAgeArray.append(roundAge)\n    # \u6599\u91d1\n    if data_set['Fare'][i] > 0:\n        roundFare = int(math.log(data_set['Fare'][i]))\n    else:\n        roundFare = 0\n    roundFareArray.append(roundFare)\n#    print(roundFare)\n\ndata_set['isAlone'] = isAlone\ndata_set['FamilySize_M'] = FamilySize_M\ndata_set['FamilySize_L'] = FamilySize_L\ndata_set['isCabinNo'] = isCabinNo\ndata_set['roundAge'] = roundAgeArray\ndata_set['roundFare'] = roundFareArray\n\ndata_set.info()\n","f64f7a0f":"testData = np.array(data_set)\ntestData = testData.astype('int32')\n#for i in range(len(testData)):\n#    print(testData[i])\n\ndata_set = data_set.dropna() # \u7a7a\u6b04\u306e\u3042\u308b\u884c\u3092\u524a\u9664\n\n","f24c50a2":"# Select from the following items and set it in the array\n# 'Pclass', 'Sex', 'Age', 'Fare', 'Cabin', 'Embarked', 'Salutation', 'FamilySize',\n# 'isAlone', 'FamilySize_M', 'FamilySize_L', 'isCabinNo', 'roundAge', 'roundFare'\n\n# *************************************************************************\nexVarArray = ['Pclass', 'Sex', 'Age', 'Salutation', 'FamilySize']\n# *************************************************************************\n","dbc35ab6":"x = DataFrame(data_set[exVarArray])\nt = DataFrame(data_set['Survived'])\n\n# numpy\u306e\u914d\u5217\u306b\u5909\u63db\nx = np.array(x)\nt = np.array(t)\n\n# numpy\u3067\u578b\u3092\u5909\u63db\nt = t.ravel()\n\nx = x.astype('float32')\nt = t.astype('int32')\n# \u4e2d\u3092\u78ba\u8a8d\nprint('x shape:', x.shape)# n\u884cm\u5217\u306e\u884c\u5217(n, m)\u306b\u306a\u3063\u3066\u3044\u308c\u3070OK\nprint(x[:10])\nprint('t shape:', t.shape)# n\u884c1\u5217\u306e\u30d9\u30af\u30c8\u30eb(n,)\u306b\u306a\u3063\u3066\u3044\u308c\u3070OK\nprint(t[:10])","85a21128":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\n# scaling\nfeatures = preprocessing.minmax_scale(x[:, :])\n\n# split data for train and test\nx_train, x_test, t_train, t_test = train_test_split(features, t.ravel(), test_size=0.3)\n\nprint(x_train)\nprint(x_test)\nprint(t_train)\nprint(t_test)","9db1bd95":"from sklearn import neural_network\n\nclf = neural_network.MLPClassifier(max_iter=1000, activation=\"relu\", alpha=0.0001)\nclf.fit(x_train, t_train)","2e051349":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\npredict = clf.predict(x_test)\naccuracy = accuracy_score(t_test, predict)\nprecision = precision_score(t_test, predict)\nrecall = recall_score(t_test, predict)\nf1 = f1_score(t_test, predict)","718f2dab":"import math\n\ntest = DataFrame(data_test.drop(['PassengerId', 'Name', 'Ticket'], axis=1)) # \u4f7f\u308f\u306a\u3044\u5217\u3092\u524a\u9664\n\n# \u5e74\u9f62\u306e\u6b20\u640d\u88dc\u5145\uff08Mr,Miss,Mrs,Master,Rare\u5225\u306b\uff09\nfor i in range(len(test)):\n    salutation = test['Salutation'][i]\n    if salutation == 1:\n        if pd.isnull(test['Age'][i]):\n            test['Age'].loc[i] = m_age_Mr\n    elif salutation == 2:\n        if pd.isnull(test['Age'][i]):\n            test['Age'].loc[i] = m_age_Miss\n    elif salutation == 3:\n        if pd.isnull(test['Age'][i]):\n            test['Age'].loc[i] = m_age_Mrs\n    elif salutation == 4:\n        if pd.isnull(test['Age'][i]):\n            test['Age'].loc[i] = m_age_Master\n    else:\n        if pd.isnull(test['Age'][i]):\n            test['Age'].loc[i] = m_age_Rare\n\n\ntest = test.fillna({'Fare':0, 'Cabin':0,'Embarked':0}) # 'Fare'\u3068'Cabin'\u3068'Embarked'\u306e\u5217\u306b\u3042\u308b\u7a7a\u6b04\u30920\u3067\u57cb\u3081\u308b \ntest = test.replace({'male':0, 'female':1, 'S':1, 'C':2, 'Q':3}) # \u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\ntest = test.replace({'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6, 'G':7, 'T':8}, regex=True) # \u6587\u5b57\u5217\u3092\u542b\u3080\u30c7\u30fc\u30bf\u3092\u90e8\u5206\u4e00\u81f4\u3067\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\ntest['FamilySize'] = test['SibSp'] + test['Parch'] + 1\nisAlone = []\nFamilySize_M = []\nFamilySize_L = []\nisCabinNo = []\nroundAgeArray = []\nroundFareArray = []\nfor i in range(len(test)):\n    if test['FamilySize'][i] == 1:\n        isAlone.append(1)\n    else:\n        isAlone.append(0)\n    if test['Cabin'][i] == 0:\n        isCabinNo.append(1)\n    else:\n        isCabinNo.append(0)\n    if test['FamilySize'][i] < 2:\n        FamilySize_M.append(0)\n        FamilySize_L.append(0)\n    elif test['FamilySize'][i] < 5:\n        FamilySize_M.append(1)\n        FamilySize_L.append(0)\n    else:\n        FamilySize_M.append(0)\n        FamilySize_L.append(1)\n\n    roundAge = int(test['Age'][i] \/ 10)\n    roundAgeArray.append(roundAge)\n    if test['Fare'][i] > 0:\n        roundFare = int(math.log(test['Fare'][i]))\n    else:\n        roundFare = 0\n    roundFareArray.append(roundFare)\n\ntest['isAlone'] = isAlone\ntest['FamilySize_M'] = FamilySize_M\ntest['FamilySize_L'] = FamilySize_L\ntest['isCabinNo'] = isCabinNo\ntest['roundAge'] = roundAgeArray\ntest['roundFare'] = roundFareArray\n\n\ntest = DataFrame(test[exVarArray])\n\ntest.info()\nprint(test)","8dceb353":"y = np.array(test)\n\n# scaling\ny = preprocessing.minmax_scale(y[:, :])\ny","2fe037f2":"result = clf.predict(y)\nresult","4f5017eb":"if accuracy > 0.8:\n    print('Succeeded')\n    print('accuracy : ', '{:.3f}'.format(accuracy))\n    print('precision: ', '{:.3f}'.format(precision))\n    print('recall   : ', '{:.3f}'.format(recall))\n    print('f1       : ', '{:.3f}'.format(f1))\n    result = np.array(result)\n    result = result.astype('int')\n    PassengerId = 891\n    outputArray = []\n    for i in range(len(result)):\n        PassengerId += 1\n        predict = result[i]\n        innerArray = [PassengerId, predict]\n        outputArray.append(innerArray)\n    df = pd.DataFrame(outputArray, columns=['PassengerId', 'Survived'])\n    df.to_csv(path_or_buf='gender_submission.csv', index=False)# index=False\u3067\u884c\u756a\u53f7\u3092\u51fa\u529b\u3057\u306a\u3044\n#    print(df)\nelse:\n    print('Low accuracy : {:.3f}'.format(accuracy))","f233bdc9":"# 5. Inference","a5f28564":"# 4. Learn with scikit-learn","50aa424f":"# 2. Data formatting","09fd8eb1":"# 1. Import data","ff5e394f":"# 3. Choose an explanatory variable","cae738b4":"# 6. Make data for uploading"}}