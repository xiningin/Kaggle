{"cell_type":{"2c8c66f6":"code","5d8eabda":"code","04be9cd9":"code","e8681ccc":"code","f8c9dced":"code","9289440d":"code","04abcbfa":"code","02e1602a":"code","6562f370":"code","083a0929":"code","9ddf2958":"code","cf4faa37":"code","63974ffe":"code","f5038522":"code","e7f0ba9c":"code","545f4868":"code","15ae3ea1":"code","240a8283":"code","39c6c92a":"code","ff3332c2":"code","c733f1c9":"code","a6d3873f":"code","acb8d323":"code","b0858ebb":"code","622ce420":"code","146933eb":"code","f9d28939":"code","b5e92b8a":"code","3e668516":"code","32391af5":"code","45933b91":"code","9d005d12":"code","8bdeb3e7":"code","204c2bdb":"code","ed48e4b9":"code","7de8ad28":"code","7c67dbd9":"code","77829877":"code","bbd6793e":"code","369528b4":"code","a4f56e8c":"code","cac55983":"code","d5fcb197":"code","6b9c928d":"code","9bd7762c":"code","f5bc7085":"code","1dfe3a14":"code","48216ce2":"code","d353ce00":"code","83395fb6":"code","8d2773ea":"code","e8120c20":"code","28ba64ae":"code","f9e12755":"code","e1e83995":"code","cc047f6b":"code","81323359":"code","75d3517b":"code","c5c72514":"code","144fd2df":"code","01509b20":"code","4915f08f":"code","f10bbbd1":"code","0fe972b0":"code","e4baee8e":"code","e14b4c1f":"markdown","1a0a71a0":"markdown","636f4b14":"markdown","94b4e327":"markdown","902836c1":"markdown","28f1b732":"markdown","35406796":"markdown","c2f7c25b":"markdown","1488eac1":"markdown","6939c2c9":"markdown","b1da9341":"markdown","43967c94":"markdown","04d6cc69":"markdown","b2f6b572":"markdown","9212511d":"markdown","346421c3":"markdown","66c3ca3d":"markdown","c8c6bc49":"markdown","d593f62e":"markdown","f079f4a5":"markdown","cd5a8bd8":"markdown","fe16a36d":"markdown","b6e87565":"markdown","8a541160":"markdown","2869b339":"markdown","8acad7fc":"markdown","1b80c455":"markdown","35a90b1b":"markdown"},"source":{"2c8c66f6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\ninit_notebook_mode(connected=True)  \nplt.style.use('ggplot')\nfrom collections import Counter\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport urllib.request\nimport random\nfrom sklearn.preprocessing import StandardScaler","5d8eabda":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","04be9cd9":"df = pd.read_csv(\"..\/input\/new-york-city-current-job-postings\/nyc-jobs.csv\")","e8681ccc":"df.head()\n","f8c9dced":"df.info()","9289440d":"def missing_values_table(df):\n   \n    # Total missing values\n    mis_val = df.isnull().sum()\n    \n    # Percentage of missing values\n    mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n    \n    # Make a table with the results\n    mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n    \n    # Rename the columns\n    mis_val_table_columns = mis_val_table.rename(\n    columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n    \n    # Sort the table by percentage of missing descending\n    # .iloc[:, 1]!= 0: filter on missing missing values not equal to zero\n    mis_val_table_columns = mis_val_table_columns[\n        mis_val_table_columns.iloc[:,1] != 0].sort_values(\n    '% of Total Values', ascending=False).round(2)  # round(2), keep 2 digits\n    \n    # Print some summary information\n    print(\"Dataset has {} columns.\".format(df.shape[1]) + '\\n' + \n    \"There are {} columns that have missing values.\".format(mis_val_table_columns.shape[0]))\n    \n    # Return the dataframe with missing information\n    return mis_val_table_columns","04abcbfa":"missing_values_table(df)","02e1602a":"df = df.drop(['Recruitment Contact', 'Hours\/Shift', 'Post Until', 'Work Location 1'],axis=1)","6562f370":"df = df.drop(['Additional Information'],axis=1)","083a0929":"missing_values_table(df)","9ddf2958":"for column in ['Job Category','Residency Requirement','Posting Date', 'Posting Updated','Process Date', 'To Apply']:\n    df[column] = df[column].fillna(df[column].mode()[0]) ","cf4faa37":"\nhigh_sal_range = (df.groupby('Civil Service Title')['Salary Range To'].mean().nlargest(10)).reset_index()\n\nfig = px.bar(high_sal_range, y=\"Civil Service Title\", x=\"Salary Range To\", orientation='h', title = \"Highest High Salary Range\",color=  \"Salary Range To\", color_continuous_scale= px.colors.qualitative.G10).update_yaxes(categoryorder=\"total ascending\")\nfig.show()\n","63974ffe":"popular_categories = df['Job Category'].value_counts()[:5]\npopular_categories","f5038522":"job_categorydf = df['Job Category'].value_counts(sort=True, ascending=False)[:10].rename_axis('Job Category').reset_index(name='Counts')\njob_categorydf = job_categorydf.sort_values('Counts')","e7f0ba9c":"trace = go.Scatter(y = job_categorydf['Job Category'],x = job_categorydf['Counts'],mode='markers',\n                   marker=dict(size= job_categorydf['Counts'].values\/2,\n                               color = job_categorydf['Counts'].values,\n                               colorscale='Viridis',\n                               showscale=True,\n                               colorbar = dict(title = 'Opening Counts')),\n                   text = job_categorydf['Counts'].values)\n\ndata = [(trace)]\n\nlayout= go.Layout(autosize= False, width = 1000, height = 750,\n                  title= 'Top 10 Job Openings Count',\n                  hovermode= 'closest',\n                  xaxis=dict(showgrid=False,zeroline=False,\n                             showline=False),\n                  yaxis=dict(title= 'Job Openings Count',ticklen= 2,\n                             gridwidth= 5,showgrid=False,\n                             zeroline=True,showline=False),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","545f4868":"num_cols = df._get_numeric_data().columns","15ae3ea1":"num_cols","240a8283":"cat_cols = list(set(df.columns) - set(num_cols))","39c6c92a":"today = pd.datetime.today()","ff3332c2":"redudant_cols = ['Job ID', '# Of Positions','Posting Updated','Minimum Qual Requirements','To Apply','Business Title','Level']","c733f1c9":"df[cat_cols]","a6d3873f":"df = df.drop(redudant_cols,axis=1)","acb8d323":"df","b0858ebb":"def parse_categories(x):\n    l = x.replace('&', ',').split(',')\n    l = [x.strip().rstrip(',') for x in l]\n    key_categories.extend(l)","622ce420":"def parse_keywords(x, l):\n    x = x.lower()\n    tokens = nltk.word_tokenize(x)\n    stop_words = set(stopwords.words('english'))\n    token_l = [w for w in tokens if not w in stop_words and w.isalpha()]\n    l.extend(token_l)","146933eb":"def preferred_skills(x):\n    kwl = []\n    df[df['Job Category'] == x]['Preferred Skills'].dropna().apply(parse_keywords, l=kwl)\n    kwl = pd.Series(kwl)\n    return kwl.value_counts()[:20]","f9d28939":"key_categories = []\ndf['Job Category'].dropna().apply(parse_categories)\nkey_categories = pd.Series(key_categories)\nkey_categories = key_categories[key_categories!='']\npopular_categories = key_categories.value_counts().iloc[:25]","b5e92b8a":"key_categories","3e668516":"df['cat'] = key_categories","32391af5":"plt.figure(figsize=(10,10))\nsns.countplot(y=key_categories, order=popular_categories.index, palette='YlGn')","45933b91":"\nsalary_table = df[['Civil Service Title', 'Salary Range From', 'Salary Range To']]\n","9d005d12":"jobs_highest_high_range = pd.DataFrame(salary_table.groupby(['Civil Service Title'])['Salary Range To'].mean().nlargest(10)).reset_index()\nplt.figure(figsize=(8,6))\nsns.barplot(y='Civil Service Title', x='Salary Range To', data=jobs_highest_high_range, palette='Greys')","8bdeb3e7":"def plot_wordcloud(text):\n    wordcloud = WordCloud(background_color='white',\n                     width=1024, height=720).generate(text)\n    plt.clf()\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis('off')\n    plt.show()","204c2bdb":"job_description_keywords = []\ndf['Job Description'].apply(parse_keywords, l=job_description_keywords)\nplt.figure(figsize=(10, 8))\ncounter = Counter(job_description_keywords)\ncommon = [x[0] for x in counter.most_common(40)]\nplot_wordcloud(' '.join(common))","ed48e4b9":"words = []\ncounts = []\nfor letter, count in counter.most_common(10):\n    words.append(letter)\n    counts.append(count)","7de8ad28":"import matplotlib.cm as cm\nfrom matplotlib import rcParams\ncolors = cm.rainbow(np.linspace(0, 1, 10))\nrcParams['figure.figsize'] = 20, 10\n\nplt.title('Top words in the Job description vs their count')\nplt.xlabel('Count')\nplt.ylabel('Words')\nplt.barh(words, counts, color=colors)","7c67dbd9":"df['Posting Date'] = pd.to_datetime(df['Posting Date'])","77829877":"df['Process Date'] = pd.to_datetime(df['Process Date'])","bbd6793e":"df['years of exprience'] = df['Process Date'] - df['Posting Date']","369528b4":"df['years of exprience'] = df['years of exprience'].dt.days","a4f56e8c":"df_cluster = df[['cat','Salary Range To','years of exprience']]","cac55983":"df_cluster.isna().sum()","d5fcb197":"df_cluster['cat'].value_counts()","6b9c928d":"df_cluster['cat'].fillna('Others', inplace=True)","9bd7762c":"df_cluster=df_cluster.replace('\\*','',regex=True)","f5bc7085":"df_cluster","1dfe3a14":"#Calculating the Hopkins statistic\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nimport numpy as np\nfrom math import isnan\n \ndef hopkins(X):\n    d = X.shape[1]\n    #d = len(vars) # columns\n    n = len(X) # rows\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    H = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(H):\n        print(ujd, wjd)\n        H = 0\n \n    return H","48216ce2":"#Let's check the Hopkins measure\nhopkin_df = df_cluster\nhopkins(hopkin_df.drop(['cat'],axis=1))","d353ce00":"df_cluster_std = df_cluster\nX_C = df_cluster_std.drop(['cat'],axis=1)\ndf_cluster_std = StandardScaler().fit_transform(X_C)","83395fb6":"df_cluster","8d2773ea":"#Let's check the silhouette score first to identify the ideal number of clusters\n# To perform KMeans clustering \nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nsse_ = []\nfor k in range(2, 10):\n    kmeans = KMeans(n_clusters=k).fit(df_cluster_std)\n    sse_.append([k, silhouette_score(df_cluster_std, kmeans.labels_)])","e8120c20":"plt.plot(pd.DataFrame(sse_)[0], pd.DataFrame(sse_)[1]);","28ba64ae":"#The sihouette score reaches a peak at around 4 clusters indicating that it might be the ideal number of clusters.\n#Let's use the elbow curve method to identify the ideal number of clusters.\nssd = []\nfor num_clusters in list(range(1,10)):\n    model_clus = KMeans(n_clusters = num_clusters, max_iter=50)\n    model_clus.fit(df_cluster_std)\n    ssd.append(model_clus.inertia_)\n\nplt.plot(ssd)","f9e12755":"\n#K-means with k=4 clusters\nmodel_clus4 = KMeans(n_clusters = 4, max_iter=50)\nmodel_clus4.fit(df_cluster_std)","e1e83995":"dat4=df_cluster\ndat4.index = pd.RangeIndex(len(dat4.index))\ndat_km = pd.concat([dat4, pd.Series(model_clus4.labels_)], axis=1)\ndat_km.columns = ['cat','salary_max','exp','ClusterID']\ndat_km","cc047f6b":"dat_km['ClusterID'].value_counts()","81323359":"dat_km","75d3517b":"#One thing we noticed is all distinct clusters are being formed except cluster 1 with more data points\n#Now let's create the cluster means wrt to the various variables mentioned in the question and plot and see how they are related\ndf_final=pd.merge(df,dat_km,on='cat')","c5c72514":"df_final","144fd2df":"df_final.info()","01509b20":"#Along Job category and years of exprience\nsns.scatterplot(x='cat',y='exp',hue='ClusterID',data=df_final)","4915f08f":"#Along Job category and years of exprience\nsns_plot = sns.scatterplot(x='Salary Range To',y='exp',hue='cat',data=df_final)","f10bbbd1":"fig = sns_plot.get_figure()\nfig.savefig(\"output.png\")","0fe972b0":"#let's take a look at those Job category clusters and try to make sense if the clustering process worked well.\ndf_final_on_jobcat = df_final[df_final['ClusterID']==1]","e4baee8e":"df_final_on_jobcat['cat'].value_counts()","e14b4c1f":"# Feature Engineering","1a0a71a0":"# Conclusion","636f4b14":"## Loading Libraries<a id=\"1\"><\/a> <br>","94b4e327":"The sihouette score reaches a peak at around 4 clusters indicating that it might be the ideal number of clusters.","902836c1":"Loading the dataset and gathering a glimpse:","28f1b732":"- **Job ID**: The Unique Job ID for each opening\n- **Posting Type**: The opening type, whether internal or external, for the job.\n- **# of Positions**: The number of positions available for a certain opening\n- **Business Title**: The position the candidate would hold.\n- **Civil Service Title**: The Broad Title the position would be classified under\n- **Title Code No**: The Code for a particular title\n- **Level**: The authority the certain opening would bring with it\n- **Job Category**: Broad Classification of where all the jobs would fall in\n- **Full-time\/Part-Time**: Time frame of a job.\n- **Salary Range From**: The beginning salary cap for that particular opening\n- **Salary Range To**: The highest cap for that particular job opening.\n- **Salary Frequency**: The payment factor for the job, hourly or annual\n- **Work Location**: The location of the workplace\n- **Division\/Work Unit**: Broad working units for all the jobs \n- **Job Description**: A brief idea of what the job will contain\n- **Minimum Qual Requirements**: The minimum qualifications a candidate must possess for the job\n- **Preferred Skills**: Optimal skills which the posting is looking for\n- **Additional Information**: Any additional information provided with the job opening\n- **Hours\/Shift**: The timings for the job\n- **Work Location 1**: Additional information for the work location\n- **Recruitment Contact**: Empty field, supposed to contain numbers\n- **Residency Requirement**: Whether the employee must be a resident of NYC.\n- **Posting date**: When the opening was announced.\n- **Post Until**: The closing date.\n- **Posting Updated**: The time when the posting was updated for the opening.\n- **Process Date**: When the posting process was completed\n\nPhew! That was a lot of columns, well then, let's get to exploring them! ","35406796":"# K-means Clustering","c2f7c25b":"### Highest High Salary Range <a id=\"9\"><\/a> <br>","1488eac1":"Replacing null values of few variables which has less than 0.1% of null values with mode of respective features","6939c2c9":"### Data Cleaning and Transformation","b1da9341":"A distinct elbow is formed at around 2-5 clusters. Let's finally create the clusters and see for ourselves which ones fare better","43967c94":"# Exploratory Data Analysis<a id=\"3\"><\/a> <br>\n","04d6cc69":"As there is no column for years of exprience, so we can assume that process date is the date when either latest or new posting has been published by the employer ","b2f6b572":"From the above wordcloud, it can be seen that work, city, project, water, new are most frequently used words in the Job description, whereas staff system,management, planning, design, support e.t.c are required skills which are demanded mostly by the employer","9212511d":"0.99 is a good Hopkins score. Hence the data is very much suitable for clustering. Preliminary check is now done.\nWe can do standardisation again or else we can skip this step as well.","346421c3":"Based on the business problem given in the problem statement, it can be said that personal information(Posting date,process date,resident details) will be of no use for our employee segregeration","66c3ca3d":"# Data Preprocessing <a id=\"2\"><\/a> <br>","c8c6bc49":"# Data Preprocessing","d593f62e":"From the above plot, it can be seen that different salary ranges based on job category(cat) and years of experience(exp).\n","f079f4a5":"Oh. It seems that **Senior General Deputy Manager**, in general, has the highest avergae salary range, ranging upto $230,000 per year!\nNow that's an impressive amount. \n\nMost of the openigns in the top ten highest salary seem to be from executive fields, or higher posts. These are the fields which rake in most of the money, on average, paving way for the high salaries people seem to hear about!","cd5a8bd8":"#### Columns Description:","fe16a36d":"So, here we can remove the words which doesn't necessarily depict any information related to skills","b6e87565":"Even 'Additional Information' is not relevant to our requirement, so it has to be removed","8a541160":"As Job categories are more, x-axis in the graph is not visible but we can make a clear depiction below","2869b339":"It can be concluded from the above analysis that:\n    \nEngineering :                             51425\nArchitecture :                           50325\nPlanning  :                               24625\n\nhas more number of demand as well as higher salary with respect to niche skills. Whereas for last few job category there are having very less openings coming.\n\n\nHealth Policy         :                       9\nPlanning Building Operations      :           8\nHealth Building Operations  :                6\nHealth Public Safety      :                  6\nCommunity Programs Policy    :               6\nInnovation Policy       :                    4\nHuman Resources Technology   :               4\nHuman Resources Communications    :          4\nHuman Resources Constituent Services :       4\nHuman Resources Health Public Safety  :       1\n\nIt is obvious from the clustering as well as the merged data with cluster information that cluster 1 belongs to those set which has more openings and higher demand with more salary","8acad7fc":"### Top 10 Job Openings via Category <a id=\"15\"><\/a> <br>","1b80c455":"As we see from the above step that Recruitment Contact, Hours\/Shift, Post Until, Work Location 1has more than 50% null values, so it's abvious to drop these columns","35a90b1b":"we are creating new dataframe with job category, maximum salary for the respective role and years of exprience. Reason of taking max salary instead of mean salary is to categorize those set of job which demands niche skills and higher salary"}}