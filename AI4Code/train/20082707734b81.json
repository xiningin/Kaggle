{"cell_type":{"d6ed8eec":"code","17b6a338":"code","52fc26aa":"code","f86134b7":"code","f8c2c1bf":"code","76b888a1":"code","e06720a0":"code","869cde07":"code","e2ed9e34":"code","8d50c0fa":"code","c9a05560":"code","fed014f1":"code","0e83e532":"code","ae7f29fd":"code","edb9614a":"code","22653ade":"code","fdecf1ee":"code","23f0fb3c":"markdown"},"source":{"d6ed8eec":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport matplotlib\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","17b6a338":"path_to_cr_data = \"\/kaggle\/input\/avengers-face-recognition\/cropped_images\/\"","52fc26aa":"import os\nimg_dirs = []\nfor entry in os.scandir(path_to_cr_data):\n    if entry.is_dir():\n        img_dirs.append(entry.path)","f86134b7":"#Getting the face detector xml\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')","f8c2c1bf":"def get_cropped_image_if_2_eyes(image_path):\n    img = cv2.imread(image_path)\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    for (x,y,w,h) in faces:\n        roi_gray = gray[y:y+h, x:x+w]\n        roi_color = img[y:y+h, x:x+w]\n        eyes = eye_cascade.detectMultiScale(roi_gray)\n        if len(eyes) >= 2:\n            return roi_color","76b888a1":"cropped_image_dirs = []\ncelebrity_file_names_dict = {}\n\nfor img_dir in img_dirs:\n    count = 1\n    celebrity_name = img_dir.split('\/')[-1]\n    print(celebrity_name)\n    \n    celebrity_file_names_dict[celebrity_name] = []\n    \n    for entry in os.scandir(img_dir):\n        roi_color = get_cropped_image_if_2_eyes(entry.path)\n        if roi_color is not None:\n            cropped_folder = path_to_cr_data + celebrity_name\n            if not os.path.exists(cropped_folder):\n                os.makedirs(cropped_folder)\n                cropped_image_dirs.append(cropped_folder)\n                print(\"Generating cropped images in folder: \",cropped_folder)\n                \n            cropped_file_name = celebrity_name + str(count) + \".png\"\n            cropped_file_path = cropped_folder + \"\/\" + cropped_file_name \n            \n            #cv2.imwrite(cropped_file_path, roi_color)\n            celebrity_file_names_dict[celebrity_name].append(cropped_file_path)\n            count += 1","e06720a0":"class_dict = {}\ncount = 0\nfor celebrity_name in celebrity_file_names_dict.keys():\n    class_dict[celebrity_name] = count\n    count = count + 1\nclass_dict","869cde07":"X, y = [], []\nfor celebrity_name, training_files in celebrity_file_names_dict.items():\n    for training_image in training_files:\n        img = cv2.imread(training_image)\n        scalled_raw_img = cv2.resize(img, (64, 64))\n        #img_har = w2d(img,'db1',5)\n        #scalled_img_har = cv2.resize(img_har, (32, 32))\n        #combined_img = np.vstack((scalled_raw_img.reshape(32*32*3,1),scalled_img_har.reshape(32*32,1)))\n        X.append(scalled_raw_img)\n        y.append(class_dict[celebrity_name])    ","e2ed9e34":"plt.imshow(X[190])","8d50c0fa":"X= np.array(X)\ny= np.array(y)\nX.shape , y.shape","c9a05560":"X_train_orig, X_test_orig, y_train, y_test = train_test_split(X, y, train_size= 0.9 ,random_state=0)\nX_train_orig.shape","fed014f1":"!pip install keras-facenet\nfrom keras_facenet import FaceNet\nembedder = FaceNet()","0e83e532":"X_train = embedder.embeddings(X_train_orig)\nX_test = embedder.embeddings(X_test_orig)\nprint('Train embed shape=',X_train.shape)\nprint('Test embed shape=',X_test.shape)","ae7f29fd":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","edb9614a":"model.score(X_test, y_test)","22653ade":"classes= ['chris_evans', 'mark_ruffalo','scarlett_johansson','chris_hemsworth','robert_downey_jr']\n\ny_pred= model.predict(X_test)\n\n\nplt.figure(figsize=(15,15))\nfor i in range(0,len(y_test)):\n    plt.subplot(5, 5, i+1)\n    plt.imshow(X_test_orig[i])\n    plt.axis('off')\n    plt.title(classes[y_pred[i]])","fdecf1ee":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_pred)) ","23f0fb3c":" ## Using Facenet to get embeddings"}}