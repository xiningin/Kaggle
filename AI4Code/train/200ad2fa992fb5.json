{"cell_type":{"7e992653":"code","7daf8e87":"code","1a4424c1":"code","4415ac50":"code","9b55defa":"code","f384bbbc":"code","f2d39961":"code","0008dde6":"code","09ebb08c":"code","41a1effa":"code","d853b449":"code","7e590a07":"code","28dbf12b":"code","bdcd7c23":"code","aa2ad663":"code","1ad2956a":"code","fb35b956":"code","df7ce925":"code","503f237e":"code","9474b4e5":"code","79b5def9":"code","70165b96":"code","a8512d62":"code","cf03aaee":"code","4eb2a118":"code","009081e0":"code","61cb88b5":"code","83149d73":"markdown","639cd87b":"markdown","f2bf4496":"markdown","717919c2":"markdown","dc6971df":"markdown","0c0b37d2":"markdown","210f562a":"markdown","358622d1":"markdown","ee7e4e9a":"markdown","21cba3c3":"markdown","47d66ec4":"markdown","98826671":"markdown","723f4c9a":"markdown","86f06324":"markdown","4d99224a":"markdown","494a98df":"markdown","7be6449b":"markdown"},"source":{"7e992653":"!pip install sweetviz","7daf8e87":"import sweetviz as sv\n\nimport pandas as pd\nimport numpy as np\n\nfrom random import uniform\n\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.feature_selection import VarianceThreshold\nfrom mlxtend.feature_selection import ExhaustiveFeatureSelector\nfrom mlxtend.feature_selection import SequentialFeatureSelector\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import RFECV\nfrom boruta import BorutaPy\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier","1a4424c1":"train = pd.read_csv('..\/input\/porto-seguro-data-challenge\/train.csv').drop(['id'], axis=1)\ntest = pd.read_csv('..\/input\/porto-seguro-data-challenge\/test.csv').drop(['id'], axis=1)\nsample_submission = pd.read_csv('..\/input\/porto-seguro-data-challenge\/submission_sample.csv')\nmeta = pd.read_csv('..\/input\/porto-seguro-data-challenge\/metadata.csv')","4415ac50":"cat_nom = [x for x in meta.iloc[1:-1, :].loc[(meta.iloc[:,1]==\"Qualitativo nominal\")].iloc[:,0]] # 0.66 \/ 0.56\ncat_ord = [x for x in meta.iloc[1:-1, :].loc[(meta.iloc[:,1]==\"Qualitativo ordinal\")].iloc[:,0]] # 0.36 \/ 0.36\nnum_dis = [x for x in meta.iloc[1:-1, :].loc[(meta.iloc[:,1]==\"Quantitativo discreto\")].iloc[:,0]] # 0.40\nnum_con = [x for x in meta.iloc[1:-1, :].loc[(meta.iloc[:,1]==\"Quantitativo continua\")].iloc[:,0]] # 0.38","9b55defa":"my_report = sv.analyze(train, target_feat='y')","f384bbbc":"my_report.show_notebook()","f2d39961":"X_test = test[cat_nom+cat_ord+num_dis+num_con]\nX = train[cat_nom+cat_ord+num_dis+num_con]\ny = train.y\n\nSEED=314","0008dde6":"clf = RandomForestClassifier(max_depth=2, random_state=SEED)\n\nclf.fit(X, y);\n\nres_var_imp = pd.DataFrame({\n    \"feature\": X.columns,\n    \"var_imp\": clf.feature_importances_\n})\n\nres_var_imp.sort_values('var_imp', ascending=False)","09ebb08c":"%%time\nmutual_info = mutual_info_classif(X, y)","41a1effa":"res_mutual_info = pd.DataFrame({\n    \"feature\": X.columns,\n    \"mutual_info\": mutual_info\n})\n\nres_mutual_info.sort_values('mutual_info', ascending=False)","d853b449":"res_pzeros = pd.DataFrame({\n    \"feature\": X.columns,\n    \"pzeros\": (X.shape[0] - X.astype(bool).sum(axis=0)) \/ X.shape[0] * 100\n})\n\nres_pzeros.sort_values('pzeros', ascending=False)","7e590a07":"res_pnull = pd.DataFrame({\n    \"feature\": X.columns,\n    \"pnull\": 100 - (X.shape[0] - X.replace(-999, np.nan).isnull().sum()) \/ X.shape[0] * 100\n})\n\nres_pnull.sort_values('pnull', ascending=False)","28dbf12b":"%%time\nlasso_newton = LogisticRegression(C=1, penalty=\"l2\", solver='sag', tol = 0.1, random_state=314)\nbfs=SequentialFeatureSelector(lasso_newton,\n                              k_features='best',\n                              forward=False,\n                              floating=False, \n                              scoring='neg_log_loss',\n                              cv=0,\n                              verbose=2,\n                              n_jobs=1)\nbfs.fit(X, y);","bdcd7c23":"res_bfs = pd.DataFrame({\n    \"feature\": X.columns,\n    \"bfs\": np.where(X.columns.isin(bfs.k_feature_names_), \"to_keep\", \"to_remove\")\n})\nres_bfs.sort_values('bfs', ascending=True)","aa2ad663":"# %%time\n# \n# efs = ExhaustiveFeatureSelector(LGBMClassifier(),\n#                                 min_features=10,\n#                                 max_features=75,\n#                                 scoring='neg_log_loss',\n#                                 print_progress=True,\n#                                 cv=5)\n# \n# efs.fit(X, y);","1ad2956a":"# res_efs = pd.DataFrame({\n#     \"feature\": X.columns,\n#     \"efs\": np.where(X.columns.isin(efs.k_feature_names_), \"to_keep\", \"to_remove\")\n# })\n# res_efs.sort_values('efs', ascending=True)","fb35b956":"%%time\n\nlasso = LogisticRegression(C=1, penalty=\"l1\", solver=\"liblinear\", random_state=314).fit(X, y)\nlasso_selector = SelectFromModel(lasso, prefit=True, threshold=\"median\")","df7ce925":"res_lasso = pd.DataFrame({\n    \"feature\": X.columns,\n    \"lasso\": np.where(lasso_selector.get_support(), \"to_keep\", \"to_remove\")\n})\nres_lasso.sort_values('lasso', ascending=True)","503f237e":"%%time\n\nrf = RandomForestClassifier(n_jobs=-1, max_depth=4)\nrfe_selector = RFECV(rf, min_features_to_select=20, step=1, n_jobs=1, verbose=1)\n#rfe_selector.fit(X_sample.values, y[X_sample.index]) #dev\nrfe_selector.fit(X.values, y)","9474b4e5":"res_rfe = pd.DataFrame({\n    \"feature\": X.columns,\n    \"rfe\": np.where(rfe_selector.support_, \"to_keep\", \"to_remove\")\n})\nres_rfe.sort_values('rfe', ascending=True)","79b5def9":"%%time\n\nrf = RandomForestClassifier(n_jobs=-1, max_depth=4)\nboruta_selector = BorutaPy(rf, n_estimators='auto', verbose=2, random_state=314)\nboruta_selector.fit(X.values, y)\n#boruta_selector.fit(X_sample.values, y[X_sample.index]) #dev","70165b96":"res_boruta = pd.DataFrame({\n    \"feature\": X.columns,\n    \"boruta\": np.where(boruta_selector.support_, \"to_keep\", \"to_remove\")\n})\nres_boruta.sort_values('boruta', ascending=True)","a8512d62":"X_random = pd.concat([X, pd.DataFrame({'random':[uniform(0.0, 100.0) for i in range(X.shape[0])]})], axis=1)","cf03aaee":"%%time\nrf = RandomForestClassifier(n_jobs=-1, max_depth=3)\nrf.fit(X_random, y);","4eb2a118":"varip_random = np.float(rf.feature_importances_[X_random.columns==\"random\"])\nprint(\"Random VarImp:\", varip_random)\n\nres_rand_var_imp = pd.DataFrame({\n    \"feature\": X_random.columns,\n    \"rand_var_imp\": rf.feature_importances_,\n    \"rand_var\": np.where(rf.feature_importances_ > varip_random, \"to_keep\", \"to_remove\")\n})\nres_rand_var_imp.sort_values('rand_var_imp', ascending=False)","009081e0":"feature_selection = res_var_imp.\\\n                    merge(res_mutual_info).\\\n                    merge(res_pzeros).\\\n                    merge(res_pnull).\\\n                    merge(res_bfs).\\\n                    merge(res_lasso).\\\n                    merge(res_boruta).\\\n                    merge(res_rfe).\\\n                    merge(res_rand_var_imp.drop('rand_var_imp', axis=1))\n\nfeature_selection.to_csv('feature_selection.csv', index=False)","61cb88b5":"feature_selection.style.\\\n    bar(subset=['var_imp'],color='#205ff2').\\\n    bar(subset=['mutual_info'],color='#205ff2').\\\n    background_gradient(subset=['pzeros'],cmap='coolwarm').\\\n    background_gradient(subset=['pnull'],cmap='coolwarm').\\\n    apply(lambda x: [\"background: red\" if v == \"to_remove\" else \"\" for v in x], axis = 1)","83149d73":"# Lasso Regularization (L1)","639cd87b":"# Boruta","f2bf4496":"# Variable Importance","717919c2":"# Conclus\u00e3o\n\nO objetivo deste notebook foi apenas explorar mais os dados sob uma perspectiva da sele\u00e7\u00e3o automatizada de features. \n\nNote que nenhum tratamento foi feito sobre as features categ\u00f3ricas nem aos valores faltantes neste notebook (por enquanto), ent\u00e3o use com sabedoria! ","dc6971df":"# Porto Seguro Data Challenge\n---\n\n## Defini\u00e7\u00e3o do Problema\n\n**Objetivo**: \"Nessa competi\u00e7\u00e3o voc\u00ea ser\u00e1 desafiado a construir um modelo que prediz a probabilidade de aquisi\u00e7\u00e3o de um produto.\"\n\n\nObs.: Segundo a descri\u00e7\u00e3o, a medida utilizada como crit\u00e9rio de avalia\u00e7\u00e3o ser\u00e1 a F1 e a medida Sensibilidade como crit\u00e9rio para desempate\n\n<p style=\"color:red\">Se gostou n\u00e3o esque\u00e7a do voto! \ud83e\udd18<\/p>","0c0b37d2":"# Zero Proportion","210f562a":"# Information Gain","358622d1":"# SweetViz Report\n---","ee7e4e9a":"<div class=\"alert alert-warning\"> \n<h3><strong>\u26a0\ufe0f Aten\u00e7\u00e3o! <br><\/strong> <\/h3>\n    \n<p style=\"color: rgb(0, 0, 0);\">No futuro este notebook pode ser alterado pois tanto as features <b>categ\u00f3ricas<\/b> quanto os valores <b>faltantes<\/b> n\u00e3o tiveram nenhum tratamento especial nessas an\u00e1lises!<\/p>\n<\/div>","21cba3c3":"# Exhaustive Feature Selection","47d66ec4":"# Backward Feature Elimination","98826671":"# Feature Selection\n---\n\nM\u00e9todos utilizados para sele\u00e7\u00e3o de features:\n    \n- Variable Importance\n- Information Gain\n- Zero Proportion\n- Null Proportion\n- Backward Feature Elimination\n- Exhaustive Feature Selection (off)\n- Lasso Regularization (L1)\n- Recursive Feature Elimination (RFE)\n- Boruta\n- Random Feature\n\nPreparar dados para an\u00e1lises:","723f4c9a":"# Null Proportion","86f06324":"# RFE","4d99224a":"# Random Column","494a98df":"# Combinar Resultados\n---","7be6449b":"# Carregar depend\u00eancias\n---"}}