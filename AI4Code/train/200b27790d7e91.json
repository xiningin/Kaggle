{"cell_type":{"e6a69e83":"code","9d045adb":"code","7ba6b6b1":"code","3921c523":"code","e4b822bd":"code","d931d3d4":"code","4d16e647":"code","3389bc12":"code","b902d04c":"code","b8354d6a":"code","92600b08":"code","673090f5":"code","56cf6a04":"code","8deb6693":"code","df93a312":"code","75310a56":"code","97adcc13":"code","bfcc33f6":"code","8eefcf7e":"code","1485cee7":"code","589c56c9":"code","0ae29a8a":"code","2cc6784a":"code","e369f0e0":"code","0f7449b9":"code","c5c9adde":"code","50588dbe":"code","e05209d8":"code","915f818b":"code","d8b4f14f":"code","89d920a1":"code","8c77280c":"code","b7c960fa":"code","b6dafd5f":"code","567111c5":"code","741f6f79":"code","dc1ee37d":"code","0307b6e7":"code","a15b8a56":"code","2ead0eab":"code","8abf1074":"code","157eb5b9":"code","3925e69d":"code","dbf2d997":"code","6e46680e":"code","58da9cfa":"code","5b0a02af":"code","599ff832":"code","75907320":"code","722ef660":"code","84d03bce":"code","16ae2770":"code","f85b774e":"code","b02942e1":"code","f2a52d29":"code","0a6fe233":"code","e883be6a":"code","8de9044d":"code","d02773c1":"code","797cf386":"code","701da2f2":"code","96fc54ab":"code","74130661":"code","ffe09f03":"code","4a88f72c":"code","35f77519":"markdown","4d07f7db":"markdown","a934635a":"markdown","938c55d9":"markdown","a346042a":"markdown","3f6f39b5":"markdown","6f8a58f3":"markdown","34de1365":"markdown"},"source":{"e6a69e83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport seaborn as sns\nfrom sklearn import *\nimport xgboost as xg\n# import GPy\n# import GPyOpt\n\n# from GPyOpt.methods import BayesianOptimization\n\n# Any results you write to the current directory are saved as output.","9d045adb":"# Libraries\n\nimport numpy as np\nimport pandas as pd\nfrom functools import reduce\npd.set_option('max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\nimport datetime\nimport lightgbm as lgb\nfrom scipy import stats\nfrom scipy.sparse import hstack, csr_matrix\nfrom sklearn.model_selection import train_test_split, KFold\nfrom wordcloud import WordCloud\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.preprocessing import StandardScaler\nstop = set(stopwords.words('english'))\nimport os\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport json\nimport ast\nimport math\nimport json\nimport ast\nimport eli5\nimport shap\nfrom catboost import CatBoostRegressor\nfrom urllib.request import urlopen\nfrom PIL import Image\nfrom sklearn.preprocessing import LabelEncoder\nimport time\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_log_error","7ba6b6b1":"or_train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\nor_test = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')\n\n# from this kernel: https:\/\/www.kaggle.com\/gravix\/gradient-in-a-box\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \nor_train = text_to_dict(or_train)\nor_test = text_to_dict(or_test)\n\ntrain = or_train.copy()\ntest = or_test.copy()","3921c523":"train['belongs_to_collection'].head()","e4b822bd":"chs = ['belongs_to_collection']\nfor table in [train, test]:\n    for col in chs:\n        trs = table[col].apply(lambda x:sorted(list(map(lambda y:y['name'], x))))\n        text = trs.apply(lambda x:\" \".join(x))\n        table[col] = text","d931d3d4":"text_train = or_train.copy()\ntext_test = or_test.copy()\n\ntext_train=text_train.fillna('')\ntext_test=text_test.fillna('')\n\ntext_cols = ['belongs_to_collection','genres','production_companies','production_countries','Keywords','cast','crew']\nfor col in text_cols:\n    trs=text_train[col].apply(lambda x:sorted(list(map(lambda y:y['name'], x))))\n    text = trs.apply(lambda x:\" \".join(x)+\" \" if len(x)>0 else \"\")\n    text_train[col] = text.apply(lambda x:x.strip())\n    \n    trs=text_test[col].apply(lambda x:sorted(list(map(lambda y:y['name'], x))))\n    text = trs.apply(lambda x:\" \".join(x)+\" \" if len(x)>0 else \"\")\n    text_test[col] = text.apply(lambda x:x.strip())","4d16e647":"choose_text = ['belongs_to_collection','genres','production_companies','production_countries','overview']\ntext_train['text'] = text_train[choose_text].apply(lambda x: ''.join(x), axis=1)\ntext_train = text_train['text']\ntext_train = text_train.apply(lambda x:x.split(' '))\n\ntext_test['text'] = text_test[choose_text].apply(lambda x: ''.join(x), axis=1)\ntext_test = text_test['text']\ntext_test = text_test.apply(lambda x:x.split(' '))","3389bc12":"embeddings_index = {}\nwith open(os.path.join('..\/input\/glove6b50dtxt\/glove.6B.50d.txt')) as f:\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.asarray(values[1:], dtype='float32')\n        embeddings_index[word] = coefs","b902d04c":"EMBEDDING_DIM = max(max(text_train.apply(lambda x:len(x))), max(text_test.apply(lambda x:len(x))))*50\nnum_words = len(text_train)\nembedding_matrix = np.zeros((num_words, EMBEDDING_DIM))\ntest_matrix = np.zeros((len(text_test), EMBEDDING_DIM))","b8354d6a":"for row in range(len(text_train)):\n    line = text_train[row]\n    for i in range(len(line)):\n        k = line[i].lower()\n        if k in embeddings_index:\n            vec = embeddings_index[k]\n            embedding_matrix[row][i*50:(i+1)*50] = vec\nfor row in range(len(text_test)):\n    line = text_test[row]\n    for i in range(len(line)):\n        k = line[i].lower()\n        if k in embeddings_index:\n            vec = embeddings_index[k]\n            test_matrix[row][i*50:(i+1)*50] = vec","92600b08":"rand_indices = np.random.permutation(3000)\ntrain_indices = rand_indices[0:2500]\nvalid_indices = rand_indices[2500:]\n\nx_val = embedding_matrix[valid_indices]\n# y_val = ys[valid_indices]\n\nx_tr = embedding_matrix[train_indices]\n# y_tr = ys[train_indices]\n\nprint('Shape of x_tr: ' + str(x_tr.shape))\n# print('Shape of y_tr: ' + str(y_tr.shape))\nprint('Shape of x_val: ' + str(x_val.shape))\n# print('Shape of y_val: ' + str(y_val.shape))","673090f5":"from keras.layers import Dense, Input\nfrom keras import models\nfrom keras import regularizers\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n\ninput_img = Input(shape=(EMBEDDING_DIM,), name='input_img')\n\nencode1 = Dense(EMBEDDING_DIM\/\/2, activation='relu', name='encode1')(input_img)\nhidden = Dropout(0.5)(encode1)\nencode2 = Dense(128, activation='relu', name='encode2')(hidden)\nencode3 = Dense(32, activation='relu', name='encode3')(encode2)\nbottleneck = Dense(8, activation='relu', name='bottleneck')(encode3)\ndecode1 = Dense(32, activation='relu', name='decode1')(bottleneck)\ndecode2 = Dense(128, activation='relu', name='decode2')(decode1)\ndecode3 = Dense(EMBEDDING_DIM\/\/2, activation='relu', name='decode3')(decode2)\nhidden = Dropout(0.5)(decode3)\ndecode4 = Dense(EMBEDDING_DIM, activation='relu', name='decode4')(decode3)\n\n# hidden1 = Dense(128, activation='relu')(bottleneck)\n# hidden2 = Dense(265, activation='relu', kernel_regularizer=regularizers.l2(0.01))(hidden1)\n# hidden3 = Dense(512, activation='relu', kernel_regularizer=regularizers.l2(0.01))(hidden2)\n# hidden4 = Dropout(0.5)(hidden3)\n# hidden5 = Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.01))(hidden4)\n# classifier = Dense(1, activation='linear', name='reg', activity_regularizer=regularizers.l1(0.01))(hidden5)\n\nae = models.Model(input_img, decode4)","56cf6a04":"from keras import optimizers\n\nlearning_rate = 1E-3 # to be tuned!\n\nae.compile(loss='mean_squared_error', optimizer=optimizers.RMSprop(lr=learning_rate))\nhistory = ae.fit(x_tr, x_tr, \n                 batch_size=128, \n                 epochs=20, \n                 validation_data=(x_val, x_val))","8deb6693":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss, 'r', label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","df93a312":"ae_encoder = models.Model(input_img, bottleneck)\nencoded_test = ae_encoder.predict(test_matrix)\nencoded_test\nencoded_train = ae_encoder.predict(embedding_matrix)\nencoded_train","75310a56":"xg_train = xg.DMatrix(data=train.loc[:,['budget','popularity','runtime']], label=np.array(train['revenue']))\nparams = {'eval_metric' : 'rmse', 'silent' : 1}\nxg_model = xg.train(params, xg_train)\nxg_test = xg.DMatrix(data=train.loc[:,['budget', 'popularity', 'runtime']])\nxg_pred = xg_model.predict(xg_test)\n\neli5.show_weights(xg_model)","97adcc13":"fig, ax = plt.subplots(figsize=(20, 10))\nplt.scatter(train['budget'], train['revenue'])\n\nlinereg = linear_model.LinearRegression()\nlinereg.fit(np.array(train['budget']).reshape(-1, 1),train['revenue'])\nli_pre = linereg.predict(np.array(train['budget']).reshape(-1, 1))\nplt.plot(train['budget'], li_pre, color='orange', label='linear')\n\nplt.scatter(train['budget'], xg_pred, label = 'xgboost')\nplt.legend()\nplt.show()","bfcc33f6":"print(np.sqrt(metrics.mean_squared_log_error(train['revenue'], li_pre)))\nprint(np.sqrt(metrics.mean_squared_log_error(train['revenue'], xg_pred)))","8eefcf7e":"train['log_budget'] = np.log1p(train['budget'])\ntrain['log_revenue'] = np.log1p(train['revenue'])\ntest['log_budget'] = np.log1p(test['budget'])","1485cee7":"sns.boxenplot(x='original_language', y='log_revenue', data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)])","589c56c9":"for table in [train, test]:\n    table['has_homepage'] = 0\n    table.loc[table['homepage'].isnull() == True, 'has_homepage'] = 0\n    table.loc[table['homepage'].isnull() == False, 'has_homepage'] = 1","0ae29a8a":"sns.catplot(x='has_homepage', y='revenue', data=train)","2cc6784a":"plt.figure(figsize=(16,8))\nplt.subplot(1,2,1)\nsns.boxenplot(x='original_language', y='revenue', data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)])\nplt.subplot(1,2,2)\nsns.boxenplot(x='original_language', y='log_revenue', data=train.loc[train['original_language'].isin(train['original_language'].value_counts().head(10).index)])","e369f0e0":"# plt.figure(figsize=(12,12))\n# text = \" \".join(train.loc[train['revenue'].sort_values(ascending=False).head(200).index, 'crew'])\n# wc = WordCloud(background_color='white', width=1200, height=1000).generate(text)\n# plt.axis(\"off\")\n# plt.imshow(wc)","0f7449b9":"# vec = TfidfVectorizer(sublinear_tf=True, analyzer='word', ngram_range=(1,2), min_df=5)\n# overview_text = vec.fit_transform(train['overview'].fillna(''))\n# linreg = LinearRegression()\n# linreg.fit(overview_text, train['log_revenue'])\n# eli5.show_weights(linreg, vec=vec, top=20)","c5c9adde":"plt.figure(figsize=(20,6))\nplt.subplot(1,2,1)\nplt.hist(train['runtime'].fillna(0), bins=40)\nplt.subplot(1,2,2)\nplt.scatter(train['runtime'].fillna(0), train['revenue'])","50588dbe":"def fix_date(x):\n    year = x.split('\/')[2]\n    if int(year) <= 19:\n        return x[:-2]+\"20\"+year\n    else:\n        return x[:-2]+\"19\"+year\n\ntest.loc[test['release_date'].isnull(), 'release_date'] = '5\/1\/00'\nfor table in [train, test]:\n    table['release_date'] = table['release_date'].apply(lambda x:fix_date(x))","e05209d8":"def trans(table):\n    df = pd.DataFrame()\n    t = pd.to_datetime(table['release_date'])\n    date_parts = [\"year\", \"weekday\", \"month\", 'weekofyear', 'day', 'quarter']\n    for part in date_parts:\n        part_col = 'release_date' + \"_\" + part\n        df[part_col] = getattr(t.dt, part).astype(int)\n    table = pd.concat([table, df], axis=1)\n    return table\ntrain = trans(train)\ntest = trans(test)","915f818b":"d1 = train['release_date_year'].value_counts().sort_index()\nd2 = train.groupby(['release_date_year'])['revenue'].sum()\ndata = [go.Scatter(x=d1.index, y=d1.values, name='film count'), go.Scatter(x=d2.index, y=d2.values, name='total revenue', yaxis='y2')]\nlayout = go.Layout(dict(title = \"Number of films and total revenue per year\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Count'),\n                  yaxis2=dict(title='Total revenue', overlaying='y', side='right')\n                  ),legend=dict(\n                orientation=\"v\"))\npy.iplot(dict(data=data, layout=layout))","d8b4f14f":"sns.catplot(x='release_date_year', y='revenue', data=train);\ntrain.head()","89d920a1":"train['num_countries'] = train['production_countries'].apply(lambda x: len(x) if x != {} else 0)\ntest['num_countries'] = test['production_countries'].apply(lambda x: len(x) if x != {} else 0)\nsns.catplot(x='num_countries', y='revenue', data=train);\nplt.title('Revenue for different number of countries producing the film');","8c77280c":"train = train.drop(['homepage', 'imdb_id', 'poster_path', 'release_date', 'status','log_revenue'], axis=1)\ntest = test.drop(['homepage', 'imdb_id', 'poster_path', 'release_date','status'], axis=1)","b7c960fa":"train.head()","b6dafd5f":"train.rename(columns={'belongs_to_collection':\"collection_name\"}, inplace=True)\ntest.rename(columns={'belongs_to_collection':\"collection_name\"}, inplace=True)","567111c5":"train['log_budget'] = np.log1p(train['budget'])\ntest['log_budget'] = np.log1p(test['budget'])","741f6f79":"list_of_genres = list(train['genres'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\ntrain['num_genres'] = train['genres'].apply(lambda x: len(x) if x != {} else 0)\ntrain['all_genres'] = train['genres'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_genres = [m[0] for m in Counter([i for j in list_of_genres for i in j]).most_common(15)]\nfor g in top_genres:\n    train['genre_' + g] = train['all_genres'].apply(lambda x: 1 if g in x else 0)\n    \ntest['num_genres'] = test['genres'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_genres'] = test['genres'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_genres:\n    test['genre_' + g] = test['all_genres'].apply(lambda x: 1 if g in x else 0)\n\ntrain = train.drop(['genres'], axis=1)\ntest = test.drop(['genres'], axis=1)","dc1ee37d":"list_of_companies = list(train['production_companies'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\ntrain['num_companies'] = train['production_companies'].apply(lambda x: len(x) if x != {} else 0)\ntrain['all_production_companies'] = train['production_companies'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_companies = [m[0] for m in Counter([i for j in list_of_companies for i in j]).most_common(30)]\nfor g in top_companies:\n    train['production_company_' + g] = train['all_production_companies'].apply(lambda x: 1 if g in x else 0)\n    \ntest['num_companies'] = test['production_companies'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_production_companies'] = test['production_companies'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_companies:\n    test['production_company_' + g] = test['all_production_companies'].apply(lambda x: 1 if g in x else 0)\n\ntrain = train.drop(['production_companies', 'all_production_companies'], axis=1)\ntest = test.drop(['production_companies', 'all_production_companies'], axis=1)","0307b6e7":"list_of_countries = list(train['production_countries'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\ntrain['num_countries'] = train['production_countries'].apply(lambda x: len(x) if x != {} else 0)\ntrain['all_countries'] = train['production_countries'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_countries = [m[0] for m in Counter([i for j in list_of_countries for i in j]).most_common(25)]\nfor g in top_countries:\n    train['production_country_' + g] = train['all_countries'].apply(lambda x: 1 if g in x else 0)\n    \ntest['num_countries'] = test['production_countries'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_countries'] = test['production_countries'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_countries:\n    test['production_country_' + g] = test['all_countries'].apply(lambda x: 1 if g in x else 0)\n\ntrain = train.drop(['production_countries', 'all_countries'], axis=1)\ntest = test.drop(['production_countries', 'all_countries'], axis=1)","a15b8a56":"list_of_languages = list(train['spoken_languages'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\ntrain['num_languages'] = train['spoken_languages'].apply(lambda x: len(x) if x != {} else 0)\ntrain['all_languages'] = train['spoken_languages'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_languages = [m[0] for m in Counter([i for j in list_of_languages for i in j]).most_common(30)]\nfor g in top_languages:\n    train['language_' + g] = train['all_languages'].apply(lambda x: 1 if g in x else 0)\n    \ntest['num_languages'] = test['spoken_languages'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_languages'] = test['spoken_languages'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_languages:\n    test['language_' + g] = test['all_languages'].apply(lambda x: 1 if g in x else 0)\n\ntrain = train.drop(['spoken_languages', 'all_languages'], axis=1)\ntest = test.drop(['spoken_languages', 'all_languages'], axis=1)","2ead0eab":"list_of_keywords = list(train['Keywords'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\ntrain['num_Keywords'] = train['Keywords'].apply(lambda x: len(x) if x != {} else 0)\ntrain['all_Keywords'] = train['Keywords'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\ntop_keywords = [m[0] for m in Counter([i for j in list_of_keywords for i in j]).most_common(30)]\nfor g in top_keywords:\n    train['keyword_' + g] = train['all_Keywords'].apply(lambda x: 1 if g in x else 0)\n    \ntest['num_Keywords'] = test['Keywords'].apply(lambda x: len(x) if x != {} else 0)\ntest['all_Keywords'] = test['Keywords'].apply(lambda x: ' '.join(sorted([i['name'] for i in x])) if x != {} else '')\nfor g in top_keywords:\n    test['keyword_' + g] = test['all_Keywords'].apply(lambda x: 1 if g in x else 0)\n\ntrain = train.drop(['Keywords', 'all_Keywords'], axis=1)\ntest = test.drop(['Keywords', 'all_Keywords'], axis=1)","8abf1074":"list_of_cast_names = list(train['cast'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nlist_of_cast_genders = list(train['cast'].apply(lambda x: [i['gender'] for i in x] if x != {} else []).values)\nlist_of_cast_characters = list(train['cast'].apply(lambda x: [i['character'] for i in x] if x != {} else []).values)\ntrain['num_cast'] = train['cast'].apply(lambda x: len(x) if x != {} else 0)\ntop_cast_names = [m[0] for m in Counter([i for j in list_of_cast_names for i in j]).most_common(15)]\nfor g in top_cast_names:\n    train['cast_name_' + g] = train['cast'].apply(lambda x: 1 if g in str(x) else 0)\ntrain['genders_0_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntrain['genders_1_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntrain['genders_2_cast'] = train['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\ntop_cast_characters = [m[0] for m in Counter([i for j in list_of_cast_characters for i in j]).most_common(15)]\nfor g in top_cast_characters:\n    train['cast_character_' + g] = train['cast'].apply(lambda x: 1 if g in str(x) else 0)\n    \ntest['num_cast'] = test['cast'].apply(lambda x: len(x) if x != {} else 0)\nfor g in top_cast_names:\n    test['cast_name_' + g] = test['cast'].apply(lambda x: 1 if g in str(x) else 0)\ntest['genders_0_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntest['genders_1_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntest['genders_2_cast'] = test['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\nfor g in top_cast_characters:\n    test['cast_character_' + g] = test['cast'].apply(lambda x: 1 if g in str(x) else 0)\n\ntrain = train.drop(['cast'], axis=1)\ntest = test.drop(['cast'], axis=1)","157eb5b9":"list_of_crew_names = list(train['crew'].apply(lambda x: [i['name'] for i in x] if x != {} else []).values)\nlist_of_crew_jobs = list(train['crew'].apply(lambda x: [i['job'] for i in x] if x != {} else []).values)\nlist_of_crew_genders = list(train['crew'].apply(lambda x: [i['gender'] for i in x] if x != {} else []).values)\nlist_of_crew_departments = list(train['crew'].apply(lambda x: [i['department'] for i in x] if x != {} else []).values)\ntrain['num_crew'] = train['crew'].apply(lambda x: len(x) if x != {} else 0)\ntop_crew_names = [m[0] for m in Counter([i for j in list_of_crew_names for i in j]).most_common(15)]\nfor g in top_crew_names:\n    train['crew_name_' + g] = train['crew'].apply(lambda x: 1 if g in str(x) else 0)\ntrain['genders_0_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntrain['genders_1_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntrain['genders_2_crew'] = train['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\ntop_cast_characters = [m[0] for m in Counter([i for j in list_of_cast_characters for i in j]).most_common(15)]\nfor g in top_cast_characters:\n    train['crew_character_' + g] = train['crew'].apply(lambda x: 1 if g in str(x) else 0)\ntop_crew_jobs = [m[0] for m in Counter([i for j in list_of_crew_jobs for i in j]).most_common(15)]\nfor j in top_crew_jobs:\n    train['jobs_' + j] = train['crew'].apply(lambda x: sum([1 for i in x if i['job'] == j]))\ntop_crew_departments = [m[0] for m in Counter([i for j in list_of_crew_departments for i in j]).most_common(15)]\nfor j in top_crew_departments:\n    train['departments_' + j] = train['crew'].apply(lambda x: sum([1 for i in x if i['department'] == j])) \n    \ntest['num_crew'] = test['crew'].apply(lambda x: len(x) if x != {} else 0)\nfor g in top_crew_names:\n    test['crew_name_' + g] = test['crew'].apply(lambda x: 1 if g in str(x) else 0)\ntest['genders_0_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ntest['genders_1_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ntest['genders_2_crew'] = test['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\nfor g in top_cast_characters:\n    test['crew_character_' + g] = test['crew'].apply(lambda x: 1 if g in str(x) else 0)\nfor j in top_crew_jobs:\n    test['jobs_' + j] = test['crew'].apply(lambda x: sum([1 for i in x if i['job'] == j]))\nfor j in top_crew_departments:\n    test['departments_' + j] = test['crew'].apply(lambda x: sum([1 for i in x if i['department'] == j])) \n\ntrain = train.drop(['crew'], axis=1)\ntest = test.drop(['crew'], axis=1)","3925e69d":"for table in [test, train]:\n    table['has_collection'] = table['collection_name'].apply(lambda x: 1 if len(x)!=0 else 0)","dbf2d997":"for col in ['original_language', 'collection_name', 'all_genres']:\n    le = LabelEncoder()\n    le.fit(list(train[col].fillna('')) + list(test[col].fillna('')))\n    train[col] = le.transform(train[col].fillna('').astype(str))\n    test[col] = le.transform(test[col].fillna('').astype(str))","6e46680e":"train_texts = train[['title', 'tagline', 'overview', 'original_title']]\ntest_texts = test[['title', 'tagline', 'overview', 'original_title']]","58da9cfa":"for col in ['title', 'tagline', 'overview', 'original_title']:\n    train['len_' + col] = train[col].fillna('').apply(lambda x: len(str(x)))\n    train['words_' + col] = train[col].fillna('').apply(lambda x: len(str(x.split(' '))))\n    train = train.drop(col, axis=1)\n    test['len_' + col] = test[col].fillna('').apply(lambda x: len(str(x)))\n    test['words_' + col] = test[col].fillna('').apply(lambda x: len(str(x.split(' '))))\n    test = test.drop(col, axis=1)","5b0a02af":"X = train.drop(['id', 'revenue'], axis=1)\ny = np.log1p(train['revenue'])\nX_test = test.drop(['id'], axis=1)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.1)","599ff832":"print(X_train.shape)\nprint(X_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)\nprint(X_test.shape)","75907320":"params = {'num_leaves': 30,\n         'min_data_in_leaf': 20,\n         'objective': 'regression',\n         'max_depth': 5,\n         'learning_rate': 0.01,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.2,\n         \"verbosity\": -1}\nmodel1 = lgb.LGBMRegressor(**params, n_estimators = 20000, nthread = 4, n_jobs = -1)\nmodel1.fit(X_train, y_train, \n        eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric='rmse',\n        verbose=1000, early_stopping_rounds=200)\neli5.show_weights(model1, feature_filter=lambda x: x != '<BIAS>')","722ef660":"n_fold = 5\nfolds = KFold(n_splits=n_fold, shuffle=True, random_state=42)","84d03bce":"def train_model(X, X_test, y, params=None, folds=folds, model_type='lgb', plot_feature_importance=False, model=None):\n\n    oof = np.zeros(X.shape[0])\n    prediction = np.zeros(X_test.shape[0])\n    scores = []\n    feature_importance = pd.DataFrame()\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X)):\n        print('Fold', fold_n, 'started at', time.ctime())\n        if model_type == 'sklearn':\n            X_train, X_valid = X[train_index], X[valid_index]\n        else:\n            X_train, X_valid = X.values[train_index], X.values[valid_index]\n        y_train, y_valid = y[train_index], y[valid_index]\n        \n        if model_type == 'lgb':\n            model = lgb.LGBMRegressor(**params, n_estimators = 20000, nthread = 4, n_jobs = -1)\n            model.fit(X_train, y_train, \n                    eval_set=[(X_train, y_train), (X_valid, y_valid)], eval_metric='rmse',\n                    verbose=1000, early_stopping_rounds=200)\n            \n            y_pred_valid = model.predict(X_valid)\n            y_pred = model.predict(X_test, num_iteration=model.best_iteration_)\n            \n        if model_type == 'xgb':\n            train_data = xgb.DMatrix(data=X_train, label=y_train)\n            valid_data = xgb.DMatrix(data=X_valid, label=y_valid)\n\n            watchlist = [(train_data, 'train'), (valid_data, 'valid_data')]\n            model = xgb.train(dtrain=train_data, num_boost_round=20000, evals=watchlist, early_stopping_rounds=200, verbose_eval=500, params=params)\n            y_pred_valid = model.predict(xgb.DMatrix(X_valid), ntree_limit=model.best_ntree_limit)\n            y_pred = model.predict(xgb.DMatrix(X_test.values), ntree_limit=model.best_ntree_limit)\n\n        if model_type == 'sklearn':\n            model = model\n            model.fit(X_train, y_train)\n            y_pred_valid = model.predict(X_valid).reshape(-1,)\n            score = mean_squared_error(y_valid, y_pred_valid)\n            \n            y_pred = model.predict(X_test)\n            \n        if model_type == 'cat':\n            model = CatBoostRegressor(iterations=20000,  eval_metric='RMSE', **params)\n            model.fit(X_train, y_train, eval_set=(X_valid, y_valid), cat_features=[], use_best_model=True, verbose=False)\n\n            y_pred_valid = model.predict(X_valid)\n            y_pred = model.predict(X_test)\n        \n        oof[valid_index] = y_pred_valid.reshape(-1,)\n        scores.append(mean_squared_error(y_valid, y_pred_valid) ** 0.5)\n        \n        prediction += y_pred    \n        \n        if model_type == 'lgb':\n            # feature importance\n            fold_importance = pd.DataFrame()\n            fold_importance[\"feature\"] = X.columns\n            fold_importance[\"importance\"] = model.feature_importances_\n            fold_importance[\"fold\"] = fold_n + 1\n            feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n\n    prediction \/= n_fold\n    \n    print('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))\n    \n    if model_type == 'lgb':\n        feature_importance[\"importance\"] \/= n_fold\n        if plot_feature_importance:\n            cols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n                by=\"importance\", ascending=False)[:50].index\n\n            best_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\n            plt.figure(figsize=(16, 12));\n            sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\n            plt.title('LGB Features (avg over folds)');\n        \n            return oof, prediction, feature_importance\n        return oof, prediction\n    \n    else:\n        return oof, prediction","16ae2770":"y.shape","f85b774e":"params = {'num_leaves': 30,\n         'min_data_in_leaf': 10,\n         'objective': 'regression',\n         'max_depth': 5,\n         'learning_rate': 0.01,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.2,\n         \"verbosity\": -1}\noof_lgb, prediction_lgb, _ = train_model(X, X_test, y, params=params, model_type='lgb', plot_feature_importance=True)","b02942e1":"# xg_train = xg.DMatrix(data=X, label=np.array(y))\n# params = {'eval_metric' : 'rmse', 'silent' : 1}\n# xg_model = xg.train(params, xg_train)\n# xg_test = xg.DMatrix(data=X_test)\n# xg_pred = xg_model.predict(xg_test)","f2a52d29":"df2 = pd.DataFrame(encoded_train)\nX=pd.concat([X, df2], axis=1)\n\ndf2 = pd.DataFrame(encoded_test)\nX_test = pd.concat([X_test, df2], axis=1)\n\nX","0a6fe233":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBRegressor\nxg_model = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n               colsample_bytree=1, gamma=4.541003990662603, importance_type='gain',\n               learning_rate=0.08209238500752991, max_delta_step=0, max_depth=4,\n               min_child_weight=8, missing=None, n_estimators=137, n_jobs=1,\n               nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,\n               reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n               subsample=1)\n\nxg_train = xg.DMatrix(data=X, label=np.array(y))\nxg_model.fit(X, y)\nxg_test = xg.DMatrix(data=X_test)\nxg_pred = xg_model.predict(X_test)","e883be6a":"train_pred = xg_model.predict(X)\ntrain_pred = np.expm1(train_pred)\nnp.sqrt(mean_squared_log_error(train['revenue'], train_pred))","8de9044d":"sub = pd.read_csv('..\/input\/tmdb-box-office-prediction\/sample_submission.csv')\nsub['revenue'] = np.expm1(xg_pred)\nsub.to_csv(\"xgb.csv\", index=False)","d02773c1":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBRegressor\n\n# xgb1 = XGBRegressor()\n# parameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n#               'objective':['reg:linear'],\n#               'learning_rate': [.03, 0.05, .07], #so called `eta` value\n#               'max_depth': [5, 6, 7],\n#               'min_child_weight': [4],\n#               'silent': [1],\n#               'subsample': [0.7],\n#               'colsample_bytree': [0.7],\n#               'n_estimators': [500]}\n\n\n# folds = 3\n# param_comb = 5\n\n# kf = KFold(n_splits=10)\n\n# random_search = RandomizedSearchCV(xgb, param_distributions=parameters, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=kf.split(X,y), verbose=3, random_state=1001 )\n# random_search.fit(X, y)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","797cf386":"from sklearn import datasets\nfrom sklearn.model_selection import RandomizedSearchCV, cross_val_score\n\nfrom scipy.stats import uniform\nfrom xgboost import XGBRegressor\n\nxgb = XGBRegressor()\n\nbaseline = cross_val_score(xgb, X, y, scoring='neg_mean_squared_error').mean()\nbaseline","701da2f2":"param_dist = {\"learning_rate\": uniform(0, 1),\n              \"gamma\": uniform(0, 5),\n              \"max_depth\": range(1,50),\n              \"n_estimators\": range(1,300),\n              \"min_child_weight\": range(1,10)}\n\nrs = RandomizedSearchCV(xgb, param_distributions=param_dist, \n                        scoring='neg_mean_squared_error', n_iter=25)\n\n# Run random search for 25 iterations\nrs.fit(X, y);","96fc54ab":"# random_search = rs\n# print('\\n All results:')\n# print(random_search.cv_results_)\n# print('\\n Best estimator:')\n# print(random_search.best_estimator_)\n","74130661":"# import GPy\n# import GPyOpt\n# from GPyOpt.methods import BayesianOptimization\n\n# bds = [{'name': 'learning_rate', 'type': 'continuous', 'domain': (0, 1)},\n#         {'name': 'gamma', 'type': 'continuous', 'domain': (0, 5)},\n#         {'name': 'max_depth', 'type': 'discrete', 'domain': (1, 50)},\n#         {'name': 'n_estimators', 'type': 'discrete', 'domain': (1, 300)},\n#         {'name': 'min_child_weight', 'type': 'discrete', 'domain': (1, 10)}]\n\n# # Optimization objective \n# def cv_score(parameters):\n#     parameters = parameters[0]\n#     score = cross_val_score(\n#                 XGBRegressor(learning_rate=parameters[0],\n#                               gamma=int(parameters[1]),\n#                               max_depth=int(parameters[2]),\n#                               n_estimators=int(parameters[3]),\n#                               min_child_weight = parameters[4]), \n#                 X, y, scoring='neg_mean_squared_error').mean()\n#     score = np.array(score)\n#     return score\n\n# optimizer = BayesianOptimization(f=cv_score, \n#                                  domain=bds,\n#                                  model_type='GP',\n#                                  acquisition_type ='EI',\n#                                  acquisition_jitter = 0.05,\n#                                  exact_feval=True, \n#                                  maximize=True)\n\n# # Only 20 iterations because we have 5 initial random points\n# optimizer.run_optimization(max_iter=20)","ffe09f03":"# optimizer.Y_best","4a88f72c":"y_rs = np.maximum.accumulate(rs.cv_results_['mean_test_score'])\n# y_bo = np.maximum.accumulate(-optimizer.Y).ravel()\n\nprint(f'Baseline neg. MSE = {baseline:.2f}')\nprint(f'Random search neg. MSE = {y_rs[-1]:.2f}')\n# print(f'Bayesian optimization neg. MSE = {y_bo[-1]:.2f}')\n\nplt.plot(y_rs, 'ro-', label='Random search')\n# plt.plot(y_bo, 'bo-', label='Bayesian optimization')\nplt.xlabel('Iteration')\nplt.ylabel('Neg. MSE')\nplt.title('Value of the best sampled CV score');\nplt.legend();","35f77519":"## Date","4d07f7db":"1. \u6295\u8d44\u4e0e\u6536\u76ca\u7684\u5173\u7cfb\uff0c\u660e\u663e\uff0c\u6295\u8d44\u4e0e\u6536\u76ca\u5448\u6b63\u76f8\u5173","a934635a":"## Data Analytics","938c55d9":"## Model","a346042a":"## Text Pretrained","3f6f39b5":"### Runtime","6f8a58f3":"## Data Load","34de1365":"## Data Process"}}