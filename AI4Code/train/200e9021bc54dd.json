{"cell_type":{"0f1486cd":"code","d381d473":"code","5549ebb7":"code","6b3dd191":"code","02e318ac":"code","e1ec0bd8":"code","33995ad0":"code","6a407c19":"code","0b853136":"code","7f2cd574":"code","56f72e24":"code","84adbbd8":"code","16322fe1":"code","56c19a1b":"code","2fd16c9a":"code","709c33f5":"code","6eb51d47":"code","d252a351":"code","748693eb":"code","0a630e98":"code","dc025278":"code","c2469064":"code","dfd9d91e":"code","91d5472f":"code","7a621c06":"code","17946932":"code","29d760fc":"code","67c7bd11":"code","db1fe67e":"code","6c996961":"code","9b617629":"code","d04f0f3b":"code","3dddd4f9":"code","074aa800":"code","d04cd74f":"code","ed91e50f":"code","51c736ec":"code","d49499fc":"code","8b789065":"code","5983bbb2":"code","52d14ee6":"code","d40670e6":"code","d0737820":"markdown","44b158a9":"markdown","194ca5f1":"markdown","d2d51751":"markdown","2151c6f8":"markdown"},"source":{"0f1486cd":"import numpy as np, pandas as pd\nimport ast \nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\nimport spacy\nfrom nltk import Tree\nen_nlp = spacy.load('en')\nfrom nltk.stem.lancaster import LancasterStemmer\nst = LancasterStemmer()\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV","d381d473":"data = pd.read_csv(\"..\/input\/train_detect_sent_v2.csv\",encoding=\"latin-1\") #.reset_index(drop=True)","5549ebb7":"data.shape","6b3dd191":"data=data.drop('Unnamed: 0',axis=1)","02e318ac":"data.head(3)","e1ec0bd8":"ast.literal_eval(data[\"sentences\"][0])","33995ad0":"data = data[data[\"sentences\"].apply(lambda x: len(ast.literal_eval(x)))<11].reset_index(drop=True)","6a407c19":"def create_features(data):\n    train = pd.DataFrame()\n     \n    for k in range(len(data[\"euclidean_dis\"])):\n        dis = ast.literal_eval(data[\"euclidean_dis\"][k])\n        for i in range(len(dis)):\n            train.loc[k, \"column_euc_\"+\"%s\"%i] = dis[i]\n    \n    print(\"Finished\")\n    \n    for k in range(len(data[\"cosine_sim\"])):\n        dis = ast.literal_eval(data[\"cosine_sim\"][k].replace(\"nan\",\"1\"))\n        for i in range(len(dis)):\n            train.loc[k, \"column_cos_\"+\"%s\"%i] = dis[i]\n            \n    train[\"target\"] = data[\"target\"]\n    return train","0b853136":"train = create_features(data)","7f2cd574":"del data","56f72e24":"train.head(3)","84adbbd8":"# train.fillna(10000, inplace=True)","16322fe1":"train.head(3).transpose()","56c19a1b":"train.apply(max, axis = 0)","2fd16c9a":"subset1 = train.iloc[:,:10].fillna(60)\nsubset2 = train.iloc[:,10:].fillna(1)","709c33f5":" subset1.head(3)","6eb51d47":" subset2.head(3)","d252a351":"train2 = pd.concat([subset1, subset2],axis=1, join_axes=[subset1.index])","748693eb":"train2.head(3)","0a630e98":"train2.apply(max, axis = 0)","dc025278":"scaler = MinMaxScaler()\nX = scaler.fit_transform(train2.iloc[:,:-1])","c2469064":"X","dfd9d91e":"train_x, test_x, train_y, test_y = train_test_split(X,\ntrain.iloc[:,-1], train_size=0.8, random_state = 5)","91d5472f":"mul_lr = linear_model.LogisticRegression(multi_class='multinomial', solver='newton-cg')\nmul_lr.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, mul_lr.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, mul_lr.predict(test_x)))\n","7a621c06":"predicted = pd.read_csv(\"..\/input\/train_detect_sent_v2.csv\",encoding=\"latin-1\").reset_index(drop=True)","17946932":"predicted=predicted.drop('Unnamed: 0',axis=1)","29d760fc":"predicted = predicted[predicted[\"sentences\"].apply(lambda x: len(ast.literal_eval(x)))<11].reset_index(drop=True)","67c7bd11":"predicted.shape","db1fe67e":"def get_columns_from_root(train):\n    \n    for i in range(train.shape[0]):\n        if len(ast.literal_eval(train[\"root_match_idx\"][i])) == 0: pass\n        \n        else:\n            for item in ast.literal_eval(train[\"root_match_idx\"][i]):\n                train.loc[i, \"column_root_\"+\"%s\"%item] = 1\n    return train","6c996961":"predicted = get_columns_from_root(predicted)","9b617629":"predicted.head(3).transpose()","d04f0f3b":"subset3 = predicted[[\"column_root_0\",\"column_root_1\",\"column_root_2\",\"column_root_3\",\"column_root_4\",\"column_root_5\",\\\n             \"column_root_6\",\"column_root_7\",\"column_root_8\",\"column_root_9\"]]","3dddd4f9":"subset3.fillna(0, inplace=True)","074aa800":"train3 = pd.concat([subset3, train2],axis=1, join_axes=[subset3.index])","d04cd74f":"train3.head(3).transpose()","ed91e50f":"train3 = train3[[\"column_root_0\",\"column_root_1\",\"column_root_2\",\"column_root_3\",\"column_root_4\",\"column_root_5\",\\\n             \"column_root_6\",\"column_root_7\",\"column_root_8\",\"column_root_9\", \"column_cos_0\",\"column_cos_1\",\\\n           \"column_cos_2\",\"column_cos_3\",\"column_cos_4\",\"column_cos_5\",\\\n             \"column_cos_6\",\"column_cos_7\",\"column_cos_8\",\"column_cos_9\", \"target\"]]","51c736ec":"train_x, test_x, train_y, test_y = train_test_split(train3.iloc[:,:-1],\ntrain3.iloc[:,-1], train_size=0.8, random_state = 5)","d49499fc":"mul_lr = linear_model.LogisticRegression(multi_class='multinomial', solver='newton-cg')\nmul_lr.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, mul_lr.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, mul_lr.predict(test_x)))\n","8b789065":"rf = RandomForestClassifier(min_samples_leaf=8, n_estimators=60)\nrf.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, rf.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, rf.predict(test_x)))","5983bbb2":"model = xgb.XGBClassifier()\nparam_dist = {\"max_depth\": [3,5,10],\n              \"min_child_weight\" : [1,5,10],\n              \"learning_rate\": [0.07, 0.1,0.2],\n               }\n\n# run randomized search\ngrid_search = GridSearchCV(model, param_grid=param_dist, cv = 3, \n                                   verbose=5, n_jobs=-1)\ngrid_search.fit(train_x, train_y)","52d14ee6":"grid_search.best_estimator_","d40670e6":"xg = xgb.XGBClassifier(max_depth=5)\nxg.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, xg.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, xg.predict(test_x)))","d0737820":"### Standardize","44b158a9":"### XgBoost","194ca5f1":"### Logistic-Regression with Root Match feature","d2d51751":"### Fitting Multinomial Logistic Regression","2151c6f8":"### Random Forest"}}