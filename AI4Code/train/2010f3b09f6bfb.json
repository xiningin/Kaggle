{"cell_type":{"cc139790":"code","acc61f60":"code","e14660f7":"code","0939d0b2":"code","70ee9ac7":"code","21e6490e":"code","12669e19":"code","2f823116":"code","0e65e243":"code","c1e64b82":"code","6ca72e80":"code","e39991aa":"code","13499943":"code","b9cc69b5":"code","f487f493":"code","3ceab990":"code","4685f4a2":"code","ccacb48d":"code","c879f852":"code","a89b456a":"code","28c0395e":"code","d32f70b8":"code","9fb1fc12":"markdown","2a35a8a5":"markdown","6c6f1ae1":"markdown","74ec4f4a":"markdown","4d2330e6":"markdown","494a7ec3":"markdown"},"source":{"cc139790":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","acc61f60":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.feature_extraction.text import CountVectorizer\n\nimport string\nimport re","e14660f7":"train = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')","0939d0b2":"print('train shape:', train.shape)\nprint('test shape:', test.shape)","70ee9ac7":"train.head()","21e6490e":"test.head()","12669e19":"all_data = [train, test]","2f823116":"for data in all_data:\n  data.drop([\"location\", \"id\"], axis=1, inplace=True)","0e65e243":"def remove_URL(text):\n  url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n  return url.sub(r'', text)\n\n\ndef remove_html(text):\n  html = re.compile(r'<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')\n  return re.sub(html, '', text)\n\n\ndef remove_punct(text):\n  table = str.maketrans('', '', string.punctuation)\n  return text.translate(table)","c1e64b82":"for data in all_data:\n  data['text'] = data['text'].apply(lambda x: remove_URL(x))\n  data['text'] = data['text'].apply(lambda x: remove_html(x))\n  data['text'] = data['text'].apply(lambda x: remove_punct(x))","6ca72e80":"count_vectorizer = CountVectorizer(max_features=2000)\n\nX = count_vectorizer.fit_transform(train[\"text\"]).toarray()\ntest = count_vectorizer.transform(test[\"text\"]).toarray()","e39991aa":"y = train['target']","13499943":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","b9cc69b5":"from sklearn import tree, linear_model, neighbors, naive_bayes, ensemble\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","f487f493":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n    \n    #GLM\n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n\n    XGBClassifier(),\n    CatBoostClassifier()  \n    ]","3ceab990":"row_index = 0\nMLA_compare = pd.DataFrame()\n\nfor classifier in MLA:\n  classifier.fit(X_train, y_train)\n\n  y_pred = classifier.predict(X_test)\n  classifier_accuracy_score = accuracy_score(y_test, y_pred)\n\n  MLA_name = classifier.__class__.__name__\n  MLA_compare.loc[row_index, 'MLA Name'] = MLA_name\n  MLA_compare.loc[row_index, 'Accuracy Score'] = classifier_accuracy_score*100\n\n  print(MLA_name, \"Done\")\n  row_index+=1","4685f4a2":"MLA_compare = MLA_compare.sort_values(by=\"Accuracy Score\", ascending=False).reset_index(drop=True)\nMLA_compare","ccacb48d":"plt.rcParams[\"figure.figsize\"] = (20,6)\nsns.barplot(x=\"MLA Name\", y=\"Accuracy Score\", data = MLA_compare)\nplt.xticks(rotation=90)\nplt.xlabel(\"Algorithm Name\")","c879f852":"classifier = linear_model.RidgeClassifierCV(cv=15)\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\nprint(\"Accuracy Score : \", accuracy_score(y_test, y_pred), \"\\n\\n\")\nprint(confusion_matrix(y_test, y_pred))","a89b456a":"sample_submission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")\nsample_submission","28c0395e":"test_pred = classifier.predict(test)","d32f70b8":"output = pd.DataFrame({'id': sample_submission.id, 'target': test_pred})\noutput.to_csv('submission.csv', index=False)","9fb1fc12":"## Dealing with Missing Values","2a35a8a5":"# Model","6c6f1ae1":"# Data Preprocessing","74ec4f4a":"## RidgeClassifierCV\t","4d2330e6":"## Importing Libraries","494a7ec3":"## Convert Text to Vectors using Count Vectorizer"}}