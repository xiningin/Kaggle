{"cell_type":{"e5eb98ef":"code","f5dfd2b4":"code","d27f1e4f":"code","b6a81540":"code","ff94c877":"code","27fc5b63":"code","1b3148bd":"code","8a115e0b":"code","9a7f1066":"code","eb555f9e":"code","97b516b9":"code","67e56a66":"code","530e7707":"code","95af026a":"code","56a1df9e":"code","b4587ea3":"code","71918ae3":"code","8a6d34f7":"code","f2371185":"code","1e142cb3":"code","bd704c20":"code","a30e0520":"code","55a1d5d3":"code","58b5a732":"markdown","a877eaf6":"markdown","462e7bc1":"markdown","e89242f6":"markdown","da483533":"markdown","21e9d8db":"markdown","f4fc6750":"markdown","58852d2b":"markdown","bb790321":"markdown","6b2bf70c":"markdown","4c6d06f5":"markdown","03440359":"markdown","c61f69fc":"markdown","80e42615":"markdown","9ed1214e":"markdown","ddd4ad66":"markdown","f6256c15":"markdown","8236af9e":"markdown","ac107bf3":"markdown","cb799afb":"markdown","fd642402":"markdown","f4b1c7b6":"markdown","f8c1ccf9":"markdown","7e8eff6f":"markdown"},"source":{"e5eb98ef":"# Import dependencies:\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f5dfd2b4":"df_artists = pd.read_csv('\/kaggle\/input\/scrapped-lyrics-from-6-genres\/artists-data.csv')\ndf_artists.head()","d27f1e4f":"df_artists_2c = df_artists[['Link', 'Genre']]\ndf_artists_2c.head()","b6a81540":"df_artists_2c.duplicated(subset = 'Link', keep = 'first').value_counts()","ff94c877":"df_artists_2c.loc[lambda df: df['Link'] == '\/10000-maniacs\/']","27fc5b63":"df_artists_2c.duplicated().value_counts()","1b3148bd":"df_artists_nd = df_artists_2c.drop_duplicates(subset='Link', keep='first', ignore_index=False)\ndf_artists_nd.Genre.value_counts()","8a115e0b":"df_lyrics = pd.read_csv('\/kaggle\/input\/scrapped-lyrics-from-6-genres\/lyrics-data.csv')\ndf_lyrics.head()","9a7f1066":"df_lyrics.Idiom.value_counts()","eb555f9e":"df_lyrics_en = df_lyrics.drop(df_lyrics[df_lyrics['Idiom'] !='ENGLISH'].index)\ndf_lyrics_en.Idiom.value_counts()","97b516b9":"# Search for duplicate entries in 'SLink' (Artist & Song name):\ndf_lyrics_en.duplicated(subset = 'SLink', keep = 'first').value_counts()","67e56a66":"# Drop duplicates in the field 'SLink'\ndf_lyrics_en.drop_duplicates(subset='SLink', keep='first', inplace=True, ignore_index=False)\n\n# Search for persisting duplicate lyric entries:\ndf_lyrics_en.duplicated(subset = 'Lyric', keep = 'first').value_counts()","530e7707":"(df_lyrics_en[df_lyrics_en.duplicated(subset = 'Lyric', keep = 'first')])","95af026a":"df_lyrics_nd = df_lyrics_en.drop(['SName', 'SLink', 'Idiom'], axis=1)\ndf_lyrics_nd","56a1df9e":"# Discard all duplicate rows: \ndf_lyrics_nd.drop_duplicates(inplace=True)\n\n# Check that we have absolutely no duplicate entries remaining:\ndf_lyrics_nd.duplicated().value_counts()","b4587ea3":"df_merged = pd.merge(df_lyrics_nd, df_artists_nd, how='inner', left_on='ALink', right_on='Link')\ndf_merged.head()","71918ae3":"df_merged_2c = df_merged.drop(['ALink','Link'], axis=1)\ndf_merged_2c.head()","8a6d34f7":"df_merged_2c.Genre.value_counts()","f2371185":"df_3g = df_merged_2c.drop(df_merged_2c[ (df_merged_2c['Genre'] == 'Sertanejo') | (df_merged_2c['Genre'] == 'Samba') | (df_merged_2c['Genre'] == 'Funk Carioca')].index)\ndf_3g","1e142cb3":"df_3g.drop_duplicates(inplace=True)","bd704c20":"# use pd.concat to join the new columns with your original dataframe\ndf_3g = pd.concat([df_3g,pd.get_dummies(df_3g['Genre'])],axis=1)\n\n# now drop the original 'Genre' column (you don't need it anymore)\ndf_3g.drop(['Genre'],axis=1, inplace=True)","a30e0520":"# Save as .csv\ndf_3g.to_csv('DF_3Genres_Lyrics_En.csv', index = False)","55a1d5d3":"'''\naggregation_functions = {'Hip Hop': 'sum', 'Pop': 'sum', 'Rock': 'sum','Lyric': 'first'}\ndf_ml = df_3g.groupby(df_3g.Lyric).agg(aggregation_functions).reset_index(drop=True)\ndf_ml.head()\n'''","58b5a732":"I like Rock, but this definitely isn't the most balanced dataset. At this stage it is probably better if we completely discard the three least represented genres as they are effectively outliers in our data. ","a877eaf6":"There are still duplicate lyrics entries. This is most likely due to the same song being performed by multiple artists. But let's take a better look.","462e7bc1":"We can see that this dataframe contains information about the artists included in the set. The information we will be using for our classification task is the Artist name and Genre assigned to them. When it comes to the name, it is better to use the Link column, as we will see it also exists in the lyrics dataframe, and will allow us to merge the dataframes easier. The rest of the columns can be dropped now.","e89242f6":"This means that the same song by the same artist has multiple entries. We can discard these duplicates.","da483533":"## Merge dataframes\n\nNow that we have two clean dataframes, we can merge them at the name of the artist to create our main dataset.","21e9d8db":"So now we have an artist dataframe that's much easier to work with. Let's see if there are any duplicate entries of artists.","f4fc6750":"Now that we have simplified our dataframe, let's take a look at our labels (Genre).","58852d2b":"Finally, let's perform a one-hot encoding of the labels, so that they are in a convenient format for our classifier.","bb790321":"Here is one additional step that we could have taken if we had decided to verge into multi-label classification territory by keeping duplicate artist entries for multiple genres. \nThis is to merge rows with the same lyrics and duplicate entries under different label. Using the aggregate function, this will generate entries with multiple labels. Then we would need to use a classifier such as Multi-Label K-Nearest Neighbours, capable of handling this task. We will ignore this now, since we are taking a single-label approach, which gives us more flexibility in choosing a classifier.\nThe optional code is shown below:","6b2bf70c":"One of the columns is Idiom, which denotes the language of the lyrics. Let's see how many languages we have in our dataset.","4c6d06f5":"So now we have an exclusively English lyrics dataframe. Time to search for duplicate entries.","03440359":"Our data exists in two separate dataframes, one corresponding to the artists and their associated musical genre, and the other containing the songs and their lyrics. The link between the two dataframes is the name of the performing artist. We will process each starting dataframe separately before merging them in order to generate our feature dataset.","c61f69fc":"There are 302 instances of duplicate artist entries. We can check one of those below:","80e42615":"## Lyrics dataframe\n\nTime to load and take a look at our lyrics dataframe.","9ed1214e":"So now we have a 3 Genre dataset (Pop, Rock & Hip Hop). Once last thing to do is to clear any remaining duplicate rows. This will discard the same song performed by different artists in the same genre.","ddd4ad66":"### Artists dataframe\n\nFirst, we read in the \"artists-data.csv\" file.","f6256c15":"Apparently, the 'SName' 'SLink' columns are not well defined, and we have the same song lyrics under different song names, for the same artists. We should make sure that the lyrics appear once under every artist, without eliminating any possible cover songs. First we will get rid of the 'SName', 'SLink' and 'Idiom' columns now since they are of no further use.","8236af9e":"# Lyrics-based Genre Classification\n\nMusical genres are usually distinguished from each other in terms of their musical content, be it orchestration, rhythmic metre and melodic structure. However, when it comes to songs, it is also the lyrical content that is often associated with a specific genre in its thematology and choice of expression.\n\nIn this project we will attempt to classify songs belonging to 3 music genres (Pop, Rock, Hip Hop) depending solely on their lyrics. Our dataset for this task is found in Kaggle under the title *Scrapped Lyrics from 6 Genres*, and contains lyrics of songs across different artists, languages and genres.","ac107bf3":"We can see that the issue here is certain artists have been classified under multiple genres. Let's make sure this is the problem and we don't actually have multiple identical entries all across our columns.","cb799afb":"Now we have a dataframe with the Artist and Lyric columns. Any duplicate rows will indicate the existence of the same song by the same artist, and can therefore be safely discarded.","fd642402":"Quite a few languages, especially Portuguese. We will only use songs in English for this task, therefore we must drop all other languages.","f4b1c7b6":"Indeed it is an issue of multiple genres for a single artist. A couple of approaches we can take with this issue are:\n1. We only keep one genre per artist. This will greatly simplify things, however it will make our model relatively rigid and inaccurate in its classification, and there's always the issue of which single genre would be more fitting to keep for an artist.\n2. We leave this dataframe as is, and the resulting merged dataframe will contain duplicate entries of lyrics under multiple labels. This will, one could argue that keeping these duplicates will make our model assign a weaker association of the lyrics with a specific genre.\n\nTo take the first approach, we can run the code cell below and use the resulting df_artists_nd dataframe. This will eliminate all double entries and strictly assign one genre per artist. Our model will be simplistic but more robust. ","f8c1ccf9":"We are good to go. Let's store our cleaned up dataset. We will use this dataset to train our classifier in the next Notebook.","7e8eff6f":"We can now discard the artist names as we have no further use for them."}}