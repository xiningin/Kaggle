{"cell_type":{"d0d0b783":"code","2b76ce3d":"code","a821417f":"code","7f4b8664":"code","ebbeee3d":"code","8821cc64":"code","55765f4a":"code","a03cabc1":"code","c3e05905":"code","dfc7d2d3":"code","68c3e6bb":"code","46b24ce8":"code","3a6ee79e":"code","336b0046":"code","5d65001d":"code","837f5f60":"code","e8b90eb7":"code","f5ead6aa":"code","6017e0a9":"code","bfb7c427":"code","a692a3b4":"code","e488da0e":"code","8e905501":"code","d745fa56":"code","a76678ff":"markdown","ae3df69d":"markdown"},"source":{"d0d0b783":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","2b76ce3d":"data = pd.read_csv('\/kaggle\/input\/ufcdata\/preprocessed_data.csv')\nraw_data = pd.read_csv('\/kaggle\/input\/ufcdata\/data.csv')\ndata.shape","a821417f":"raw_data.head(3)","7f4b8664":"data.head()","ebbeee3d":"data.info()","8821cc64":"fighters = pd.concat([raw_data['R_fighter'], raw_data['B_fighter']], ignore_index=True)\nnames = ' '\nfor name in fighters:\n    name = str(name)\n    names = names + name + ' '","55765f4a":"from wordcloud import WordCloud, STOPWORDS \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black',  \n                min_font_size = 10).generate(names) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","a03cabc1":"raw_data['weight_class'].unique()","c3e05905":"plt.figure(figsize=(8,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=raw_data['weight_class'], data=raw_data)","dfc7d2d3":"stances = pd.concat([raw_data['R_Stance'], raw_data['B_Stance']], ignore_index=True)\nst_values = stances.value_counts().sort_values(ascending=False).head(10)\nst_labels = st_values.index","68c3e6bb":"plt.figure(figsize=(10,6))\nsns.barplot(y=st_values, x=st_labels)","46b24ce8":"plt.figure(figsize=(8,8))\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=raw_data['no_of_rounds'], data=raw_data)","3a6ee79e":"countsT = data['title_bout'].value_counts()\nlabels = 'False' ,'True'\nsizes = countsT.values\nexplode = (0.1, 0.1) \nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis('equal')  \nplt.show()","336b0046":"countsT = data['Winner'].value_counts()\nlabels = 'Red' ,'Blue'\nsizes = countsT.values\nexplode = (0.1, 0.1) \nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.axis('equal')  \nplt.show()","5d65001d":"raw_data['country'] = raw_data['location'].apply(lambda x : x.split(',')[-1])","837f5f60":"plt.figure(figsize=(8,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=raw_data['country'], data=raw_data)","e8b90eb7":"values = fighters.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index","f5ead6aa":"plt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","6017e0a9":"raw_data['year'] = raw_data['date'].apply(lambda x : x.split('-')[0])","bfb7c427":"plt.figure(figsize=(15,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=raw_data['year'], data=raw_data)","a692a3b4":"age = pd.concat([raw_data['R_age'], raw_data['B_age']], ignore_index=True)\nage_values = age.value_counts()\nage_labels = age_values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=age_labels,y=age_values)","e488da0e":"data_num = data.select_dtypes(include=[np.float, np.int])\n\nscaler = StandardScaler()\ndata[list(data_num.columns)] = scaler.fit_transform(data[list(data_num.columns)])","8e905501":"y = data['Winner']\nX = data.drop(columns = 'Winner')\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)","d745fa56":"%%time\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n# evaluate predictions\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))","a76678ff":"**Base Model - XGBoost**","ae3df69d":"**Let's start with plotting the winner's corner color **"}}