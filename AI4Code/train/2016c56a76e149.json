{"cell_type":{"816c3ebf":"code","4bb2311a":"code","dca52511":"code","f225f521":"code","4c02b18e":"code","3d6a95ee":"code","e97d6bd8":"code","ee34e61d":"code","ee452563":"code","b13b3ec5":"code","4dad6a2c":"code","4d088ad9":"code","84b217fa":"code","68f1648f":"code","a52aa0b4":"code","f6a06ee9":"code","f9ca830a":"code","7213b83d":"code","2a430561":"code","550a3fe8":"code","b052aa52":"code","c1d7d59e":"code","f54cb9fe":"code","4fd3a482":"code","16a6ee18":"code","ee3e70e7":"code","93ed0b68":"code","5443df97":"code","853e01e5":"code","22ca3e5e":"code","08ec0797":"code","74845cad":"code","5fea23bb":"code","aaea1c2d":"code","396fb685":"code","a75d82cb":"code","1def56dd":"code","c9cf262e":"code","da02f684":"code","89cf47c0":"code","490fbfd7":"code","63200afc":"code","8ab6e213":"code","5f18ec8b":"code","1563bf24":"code","66dd7a26":"code","0dcd4abf":"code","7c1d1d9b":"code","0945b74d":"code","399734cd":"code","8cdf5b15":"code","5d33aaf1":"code","f7d2ec13":"code","ecaf5228":"code","d2c1b775":"code","c7047d12":"code","36925cd6":"code","47a993ee":"code","e6292357":"code","4ad8bd3e":"code","8cc40adc":"code","14e7dc4e":"code","c752ba36":"code","616a7ae4":"code","00040e3f":"code","47e1025d":"code","3beaa3db":"code","3f5b1d26":"code","c4425c56":"code","71925938":"code","4167ac15":"code","1cdba20e":"code","aa94f57f":"code","44b5327d":"code","e0836bc7":"code","da1d9d30":"code","4f2111ef":"code","ca6b2735":"code","a82d3c6d":"code","d0677d4e":"code","c99ff134":"code","21eeb657":"code","fa5a8ffc":"code","5d3b4ffe":"code","6f4e0a82":"code","a77327df":"code","768e128c":"code","c76c819e":"code","be20bfa6":"code","60704d49":"code","35a06ddb":"code","1b1e0583":"code","d4a43350":"code","3542c72f":"code","db448dbb":"code","0f35f0bd":"code","3b025408":"code","580d8dae":"code","d1f54452":"code","a71b51c2":"code","1c3e9afc":"code","ca1773c2":"code","812ad98d":"code","156b7520":"code","1402dafc":"code","670e28cd":"code","4b4fd702":"code","b5e4c2e5":"code","de56b7f6":"code","a793451f":"code","3a6ca649":"code","951e5bdb":"code","b690bbec":"code","bb2eab0d":"code","8993bdb2":"code","1e32a9fc":"code","cc5200c4":"code","fc0100d0":"code","cc860a42":"code","770ce272":"code","90815aad":"code","8f677793":"code","5c542d1d":"code","d7e9940b":"code","d2d7bea0":"code","ece242f6":"code","79c1334b":"code","259dbe91":"code","9c874040":"code","90191771":"code","80127e13":"code","ecad0a62":"code","b4fea37d":"code","40f1c8dc":"code","2821962e":"code","c927d5b6":"code","93688282":"code","121215a6":"code","53ff18ec":"code","68c32c89":"code","148cf31e":"code","f8d57c70":"code","926de708":"code","50271c66":"code","243b154d":"code","785e9f76":"code","4494f88f":"code","8a5398e8":"code","c45c0929":"code","9873199a":"code","6ba88c50":"code","e2b08490":"code","68002a96":"code","a700f9a1":"code","9472158c":"code","5efaf8a7":"code","f4409444":"code","356e2dc7":"code","5dba483f":"code","423378e1":"code","19795321":"code","368718f1":"code","8436358f":"code","140d0919":"code","40045206":"code","c0c086d6":"code","ab54efb7":"code","966ae256":"code","22f8b478":"code","acfe8452":"code","1575e16e":"code","162299b3":"code","98668a99":"code","083a1d54":"markdown","da534dfe":"markdown","efa2d7c6":"markdown","54fb5498":"markdown","6171d7df":"markdown","46b7e9b2":"markdown","83b8a21f":"markdown","c9b61dcf":"markdown","65de1ec8":"markdown","72bd470f":"markdown","39fb215d":"markdown","d859214a":"markdown","ad244bf4":"markdown","aa09e064":"markdown","c2fbc022":"markdown","c9deea64":"markdown","700f825d":"markdown","2950a6f2":"markdown","1be577b7":"markdown","615cf7a7":"markdown","f8cb6c31":"markdown","eb920cb9":"markdown","a0bd6644":"markdown","ca4a93f5":"markdown","075790ed":"markdown","9d6145c3":"markdown","96673c29":"markdown","c72b8333":"markdown","a76de263":"markdown","ec0f678d":"markdown","2f64e5e8":"markdown","e92ecb13":"markdown","42faf485":"markdown","adbf27ac":"markdown","04d1f2af":"markdown","bf7007f2":"markdown","43c8aa3f":"markdown","a411da7d":"markdown","ab8347fa":"markdown","e7249131":"markdown","2fb422ff":"markdown","da8403c7":"markdown","72feafa7":"markdown","cc5f82cd":"markdown","1d66b7a5":"markdown","e5a5ecf4":"markdown","957bb701":"markdown","041de7ae":"markdown","636199a8":"markdown","988dff30":"markdown","d7e958ba":"markdown","486efab7":"markdown","9d76a584":"markdown","a5f5d902":"markdown","317ff655":"markdown","74e59f43":"markdown","a19cccf0":"markdown","3f8e2a34":"markdown","f332f71f":"markdown","fecfb89c":"markdown","e6e755a0":"markdown","473596f7":"markdown","72a290b3":"markdown","18422a50":"markdown","fd1cf9b0":"markdown","30ede877":"markdown","a71df120":"markdown","06486b96":"markdown","6dd858e7":"markdown","5a24abba":"markdown","5094a915":"markdown","339a665b":"markdown","72ad5919":"markdown","a7d35904":"markdown","ca28bc9f":"markdown","c59da367":"markdown","fb499c13":"markdown","e42fe2b5":"markdown","21c2e0c8":"markdown","c467821a":"markdown","a9c8aa30":"markdown","ac6f9971":"markdown","cf233054":"markdown","ed9d6e1e":"markdown","ef473577":"markdown","0cf637fb":"markdown","6ba63198":"markdown","cca3ccdc":"markdown","0ba01c8c":"markdown","8a1bfc56":"markdown","33692410":"markdown","35a50acb":"markdown"},"source":{"816c3ebf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy import stats\nfrom scipy.stats import skew \nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,ExtraTreesRegressor\nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs\nfrom sklearn.metrics import r2_score,mean_squared_error","4bb2311a":"warnings.simplefilter(action='ignore', category=FutureWarning)\npd.set_option('display.float_format', lambda x: '%.3f' % x)","dca52511":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f225f521":"train.info()","4c02b18e":"train.head()","3d6a95ee":"train.describe()","e97d6bd8":"test.info()","ee34e61d":"test.head()","ee452563":"test.describe()","b13b3ec5":"null_counts_train = train.isnull().sum()\nnull_counts_train[null_counts_train>0].sort_values(ascending = False)","4dad6a2c":"null_counts_test = test.isnull().sum()\nnull_counts_test[null_counts_test>0].sort_values(ascending = False)","4d088ad9":"percentage_of_nulls_train = null_counts_train[null_counts_train>0].sort_values(ascending = False)\/test['Id'].count()*100\npercentage_of_nulls_train","84b217fa":"plt.figure(figsize = (10,6))\npercentage_of_nulls_train.plot(kind='bar', colormap='Paired')\nplt.xticks(rotation='90')\nplt.title('Percent missing data by feature (training set)', fontsize = 15)\nplt.xlabel('Feature',fontsize = 15)\nplt.ylabel('Percent of missing data',fontsize = 15)\nplt.axhline(y=30, color='r', linestyle='-')\nplt.show()","68f1648f":"percentage_of_nulls_test = null_counts_test[null_counts_test>0].sort_values(ascending = False)\/test['Id'].count()*100\npercentage_of_nulls_test","a52aa0b4":"plt.figure(figsize = (10,6))\npercentage_of_nulls_test.plot(kind = 'bar',fontsize=12,colormap='Paired')\nplt.title('Percent missing data by feature (test set)', fontsize = 15)\nplt.xlabel('Feature',fontsize = 15)\nplt.ylabel('Percent of missing data',fontsize = 15)\nplt.axhline(y=30, color='r', linestyle='-')\nplt.show()","f6a06ee9":"train.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis = 1,inplace = True)\ntest.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis = 1,inplace = True)","f9ca830a":"train['LotFrontage'] = train['LotFrontage'].fillna(value=train.groupby('Neighborhood')['LotFrontage'].transform('median'))","7213b83d":"test['LotFrontage'] = test['LotFrontage'].fillna(value=test.groupby('Neighborhood')['LotFrontage'].transform('median'))","2a430561":"train['LotFrontage'].isnull().sum()","550a3fe8":"null_garages_train = train[(train['GarageYrBlt'].isnull()) | (train['GarageType'].isnull()) | (train['GarageFinish'].isnull()) \n      | (train['GarageQual'].isnull()) | (train['GarageCond'].isnull())]","b052aa52":"null_garages_train_n = null_garages_train.isnull().sum()\nnull_garages_train_n[null_garages_train_n>0].sort_values(ascending = False)","c1d7d59e":"for i in ('GarageType','GarageFinish','GarageQual','GarageCond'):\n    train[i] = train[i].fillna('None')","f54cb9fe":"train[['GarageType','GarageFinish','GarageQual','GarageCond']].isnull().sum()","4fd3a482":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(0)","16a6ee18":"train['GarageYrBlt'].isnull().sum()","ee3e70e7":"null_garages_test = test[(test['GarageYrBlt'].isnull()) | (test['GarageType'].isnull()) | (test['GarageFinish'].isnull()) \n      | (test['GarageQual'].isnull()) | (test['GarageCond'].isnull()) | (test['GarageCars'].isnull()) | (test['GarageArea'].isnull())]","93ed0b68":"null_garages_test_n = null_garages_test.isnull().sum()\nnull_garages_test_n[null_garages_test_n>0].sort_values(ascending = False)","5443df97":"for i in ('GarageType','GarageFinish','GarageQual','GarageCond'):\n    test[i] = test[i].fillna('None')","853e01e5":"for j in ('GarageYrBlt','GarageCars','GarageArea'):\n    test[j] = test[j].fillna(0)","22ca3e5e":"null_bsmt_train = train[(train['BsmtFinType2'].isnull()) | (train['BsmtExposure'].isnull()) | (train['BsmtFinType1'].isnull()) \n      | (train['BsmtCond'].isnull()) | (train['BsmtQual'].isnull())]","08ec0797":"null_bsmt_train_n = null_bsmt_train.isnull().sum()\nnull_bsmt_train_n[null_bsmt_train_n>0].sort_values(ascending = False)","74845cad":"for i in ('BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtCond','BsmtQual'):\n    train[i] = train[i].fillna('None')","5fea23bb":"train[['BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtCond','BsmtQual']].isnull().sum()","aaea1c2d":"null_bsmt_test = test[(test['BsmtFinType2'].isnull()) | (test['BsmtExposure'].isnull()) | (test['BsmtFinType1'].isnull()) \n      | (test['BsmtCond'].isnull()) | (test['BsmtQual'].isnull()) | (test['BsmtFullBath'].isnull()) \n      | (test['BsmtHalfBath'].isnull()) | (test['BsmtFinSF1'].isnull()) | (test['BsmtFinSF2'].isnull()) \n      | (test['BsmtUnfSF'].isnull())]","396fb685":"null_bsmt_test_n = null_bsmt_test.isnull().sum()\nnull_bsmt_test_n[null_bsmt_test_n>0].sort_values(ascending = False)","a75d82cb":"for i in ('BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtCond','BsmtQual'):\n    test[i] = test[i].fillna('None')","1def56dd":"for j in ('BsmtFullBath','BsmtHalfBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF'):\n    test[j] = test[j].fillna(0)","c9cf262e":"train[['BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtCond','BsmtQual',\n      'BsmtFullBath','BsmtHalfBath','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']].isnull().sum()","da02f684":"null_counts_train = train.isnull().sum()\nnull_counts_train[null_counts_train>0].sort_values(ascending = False)","89cf47c0":"null_counts_test = test.isnull().sum()\nnull_counts_test[null_counts_test>0].sort_values(ascending = False)","490fbfd7":"null_masvnr_train = train[(train['MasVnrType'].isnull()) | (train['MasVnrArea'].isnull())]","63200afc":"null_masvnr_train_n = null_masvnr_train.isnull().sum()\nnull_masvnr_train_n[null_masvnr_train_n>0].sort_values(ascending = False)","8ab6e213":"train['MasVnrArea'] = train['MasVnrArea'].fillna(0)","5f18ec8b":"train['MasVnrType'] = train['MasVnrType'].fillna('None')","1563bf24":"null_masvnr_test = test[(test['MasVnrType'].isnull()) | (test['MasVnrArea'].isnull())]","66dd7a26":"null_masvnr_test_n = null_masvnr_test.isnull().sum()\nnull_masvnr_test_n[null_masvnr_test_n>0].sort_values(ascending = False)","0dcd4abf":"test['MasVnrArea'] = test['MasVnrArea'].fillna(0)","7c1d1d9b":"test['MasVnrType'] = test['MasVnrType'].fillna('None')","0945b74d":"train.dropna(inplace= True)","399734cd":"test['MSZoning'].value_counts()","8cdf5b15":"test[test['MSZoning'].isnull()][['Id','Neighborhood']]","5d33aaf1":"test[test['Neighborhood'] == 'IDOTRR'].groupby('MSZoning').count()['Neighborhood']","f7d2ec13":"test[test['Neighborhood'] == 'Mitchel'].groupby('MSZoning').count()['Neighborhood']","ecaf5228":"test['MSZoning'] = test.groupby('Neighborhood')['MSZoning'].fillna(value='RM',limit=2)","d2c1b775":"test['MSZoning'] = test['MSZoning'].fillna('RL')","c7047d12":"test[test['Id']==1916]['MSZoning']","36925cd6":"test['Functional'].value_counts()","47a993ee":"test['Functional'] = test['Functional'].fillna('Typ')","e6292357":"test['Utilities'].value_counts()","4ad8bd3e":"train['Utilities'].value_counts()","8cc40adc":"test['Utilities'] = test['Utilities'].fillna('AllPub')","14e7dc4e":"train = train[train['Utilities']!='NoSeWa']","c752ba36":"test['SaleType'].value_counts()","616a7ae4":"test[test['SaleType'].isnull()]['Neighborhood']","00040e3f":"test[test['Neighborhood']=='Sawyer'].groupby('SaleType').count()['Neighborhood']","47e1025d":"test['SaleType'] = test['SaleType'].fillna('WD')","3beaa3db":"test['KitchenQual'].value_counts()","3f5b1d26":"test[test['KitchenQual'].isnull()]['Neighborhood']","c4425c56":"test[test['Neighborhood']=='ClearCr'].groupby('KitchenQual').count()['Neighborhood']","71925938":"test['KitchenQual'] = test['KitchenQual'].fillna('TA')","4167ac15":"test[test['Exterior1st'].isnull()]['Exterior2nd']","1cdba20e":"test[test['Exterior1st'].isnull()]['Neighborhood']","aa94f57f":"test[test['Neighborhood']=='Edwards'].groupby('Exterior1st').count()['Neighborhood']","44b5327d":"test[test['Neighborhood']=='Edwards'].groupby('Exterior2nd').count()['Neighborhood']","e0836bc7":"test['Exterior1st'] = test['Exterior1st'].fillna('Wd Sdng')\ntest['Exterior2nd'] = test['Exterior2nd'].fillna('Plywood')","da1d9d30":"null_counts_test = test.isnull().sum()\nnull_counts_test[null_counts_test>0].sort_values(ascending = False)","4f2111ef":"map_1 = {'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1}","ca6b2735":"train['ExterQual'] = train['ExterQual'].map(map_1)\ntest['ExterQual'] = test['ExterQual'].map(map_1)\ntrain['ExterCond'] = train['ExterCond'].map(map_1)\ntest['ExterCond'] = test['ExterCond'].map(map_1)\ntrain['HeatingQC'] = train['HeatingQC'].map(map_1)\ntest['HeatingQC'] = test['HeatingQC'].map(map_1)\ntrain['KitchenQual'] = train['KitchenQual'].map(map_1)\ntest['KitchenQual']= test['KitchenQual'].map(map_1)","a82d3c6d":"map_2 = {'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1,'None':0}","d0677d4e":"train['BsmtQual'] = train['BsmtQual'].map(map_2)\ntest['BsmtQual'] = test['BsmtQual'].map(map_2)\ntrain['BsmtCond'] = train['BsmtCond'].map(map_2)\ntest['BsmtCond'] = test['BsmtCond'].map(map_2)\ntrain['GarageQual'] = train['GarageQual'].map(map_2)\ntest['GarageQual'] = test['GarageQual'].map(map_2)\ntrain['GarageCond'] = train['GarageCond'].map(map_2)\ntest['GarageCond'] = test['GarageCond'].map(map_2)","c99ff134":"map_3 = {'GLQ':6,'ALQ':5,'Rec':4,'BLQ':3,'LwQ':2,'Unf':1,'None':0}","21eeb657":"train['BsmtFinType1'] = train['BsmtFinType1'].map(map_3)\ntest['BsmtFinType1'] = test['BsmtFinType1'].map(map_3)\ntrain['BsmtFinType2'] = train['BsmtFinType2'].map(map_3)\ntest['BsmtFinType2'] = test['BsmtFinType2'].map(map_3)","fa5a8ffc":"train['GarageFinish'] = train['GarageFinish'].replace(['Fin','RFn','Unf','None'],[3,2,1,0])\ntest['GarageFinish'] = test['GarageFinish'].replace(['Fin','RFn','Unf','None'],[3,2,1,0])","5d3b4ffe":"train['PavedDrive'] = train['PavedDrive'].replace(['Y','P','N'],[3,2,1])\ntest['PavedDrive'] = test['PavedDrive'].replace(['Y','P','N'],[3,2,1])","6f4e0a82":"train['BsmtExposure'] = train['BsmtExposure'].replace(['Gd','Av','Mn','No','None'],[4,3,2,1,0])\ntest['BsmtExposure'] = test['BsmtExposure'].replace(['Gd','Av','Mn','No','None'],[4,3,2,1,0])\n","a77327df":"train['HouseStyle'] = train['HouseStyle'].replace(['1Story','1.5Unf','1.5Fin','2Story','2.5Unf','2.5Fin','SFoyer','SLvl'],\n                                                  [1,2,3,4,5,6,3,3])\ntest['HouseStyle'] = test['HouseStyle'].replace(['1Story','1.5Unf','1.5Fin','2Story','2.5Unf','2.5Fin','SFoyer','SLvl'],\n                                                  [1,2,3,4,5,6,3,3])","768e128c":"train['RoofMatl'].value_counts()","c76c819e":"def roof_mat(col):\n    if col == 'WdShake' or col == 'WdShngl' or col == 'Metal' or col == 'Roll' or col == 'Membran':\n        return 'Other'\n    else:\n        return col","be20bfa6":"train['RoofMatl'] = train['RoofMatl'].apply(lambda x:roof_mat(x))\ntest['RoofMatl'] = test['RoofMatl'].apply(lambda x:roof_mat(x))","60704d49":"train['Exterior1st'].value_counts()","35a06ddb":"def ext1st(col):\n    if col == 'Stone' or col == 'BrkComm' or col == 'CBlock' or col == 'ImStucc' or col == 'AsphShn':\n        return 'Other'\n    else:\n        return col","1b1e0583":"train['Exterior1st'] = train['Exterior1st'].apply(lambda x:ext1st(x))\ntest['Exterior1st'] = test['Exterior1st'].apply(lambda x:ext1st(x))","d4a43350":"train['Exterior2nd'].value_counts()","3542c72f":"def ext2nd(col):\n    if col == 'AsphShn' or col == 'CBlock':\n        return 'Other'\n    else:\n        return col","db448dbb":"train['Exterior2nd'] = train['Exterior2nd'].apply(lambda x:ext2nd(x))\ntest['Exterior2nd'] = test['Exterior2nd'].apply(lambda x:ext2nd(x))","0f35f0bd":"train['Heating'].value_counts()","3b025408":"def heating(col):\n    if col == 'GasA':\n        return col\n    else:\n        return 'Other'","580d8dae":"train['Heating'] = train['Heating'].apply(lambda x:heating(x))\ntest['Heating'] = test['Heating'].apply(lambda x:heating(x))","d1f54452":"train['Electrical'].value_counts()","a71b51c2":"def electr(col):\n    if col == 'FuseP' or col == 'Mix':\n        return 'Other'\n    else:\n        return col","1c3e9afc":"train['Electrical'] = train['Electrical'].apply(lambda x:electr(x))\ntest['Electrical'] = test['Electrical'].apply(lambda x:electr(x))","ca1773c2":"train_not_obj = train.dtypes[train.dtypes != 'object'].index\ntest_not_obj = test.dtypes[train.dtypes != 'object'].index\ntrain_skew = train[train_not_obj].apply(lambda x:skew(x)).sort_values(ascending=False)\ntest_skew = test[test_not_obj].apply(lambda x:skew(x)).sort_values(ascending=False)","812ad98d":"high_skewed_train = train_skew[train_skew > abs(1)]\nhigh_skewed_test = test_skew[train_skew > abs(1)]","156b7520":"high_skewed_train_index = high_skewed_train.index\nhigh_skewed_test_index = high_skewed_test.index","1402dafc":"for i in high_skewed_train_index:\n    train[i] = np.log(train[i]+1)","670e28cd":"for i in high_skewed_test_index:\n    test[i] = np.log(test[i]+1)","4b4fd702":"plt.figure(figsize=(14,6))\nsns.heatmap(train.corr(),cmap='coolwarm')\nplt.title('Correlation between features')\nplt.show()","b5e4c2e5":"corr_saleprice = train.corr()['SalePrice'].sort_values(ascending = False)[1:]","de56b7f6":"plt.figure(figsize=(12,6))\ncorr_saleprice.plot(kind='bar')\nplt.title('Correlation between target feature (SalePrice) and dependence variables')\nplt.show()","a793451f":"plt.figure(figsize=(14,6))\nsns.boxplot(x='OverallQual', y = 'SalePrice', data = train)\nplt.title('Sale price of house by overall quality')\nplt.show()","3a6ca649":"plt.figure(figsize=(14,6))\nsns.scatterplot(x = 'GrLivArea', y = 'SalePrice', data = train)\nplt.title('Log of Sale Price vs Ground living Area')","951e5bdb":"train[train['GrLivArea']>8.3]","b690bbec":"train = train[train['GrLivArea']<8.3]","bb2eab0d":"plt.figure(figsize=(14,6))\nsns.countplot(x = 'GarageCars', data = train)\nplt.title('GarageCars')","8993bdb2":"plt.figure(figsize=(14,6))\ntrain['SalePrice'].plot.hist(bins = 50)\nplt.title('Distribution of housing prices')\nplt.show()","1e32a9fc":"stats.kstest(train['SalePrice'], 'norm')","cc5200c4":"train.drop('Condition2',axis = 1, inplace = True)\ntest.drop('Condition2',axis = 1, inplace = True)","fc0100d0":"train.head()","cc860a42":"test.head()","770ce272":"train = pd.get_dummies(train,drop_first = True)","90815aad":"test = pd.get_dummies(test,drop_first = True)","8f677793":"y = train['SalePrice']","5c542d1d":"X = train.drop('SalePrice',axis = 1)","d7e9940b":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=123)","d2d7bea0":"results = pd.DataFrame({'Model':[],\n                       'R_squared':[],\n                       'Mean_squared_error':[]})","ece242f6":"lm_model = LinearRegression()","79c1334b":"sfs_lm = sfs(lm_model,k_features = 40,forward=True,floating=False, scoring='r2',cv=5)\n","259dbe91":"sfs_lm.fit(X_train, y_train)","9c874040":"sfs_lm.subsets_","90191771":"X_train_sfs_lm = sfs_lm.transform(X_train)\nX_val_sfs_lm = sfs_lm.transform(X_val)","80127e13":"lm_model.fit(X_train_sfs_lm, y_train)","ecad0a62":"lm_model_val_predictions = lm_model.predict(X_val_sfs_lm)","b4fea37d":"lm_model_results = pd.DataFrame({'Model':['Linear Regression'],\n                                'R_squared':[r2_score(y_val,lm_model_val_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,lm_model_val_predictions)]})\nresults = results.append(lm_model_results)","40f1c8dc":"ridge = Ridge()\nparameters = {'alpha':list(np.arange(0.0, 30.0, 0.01))}","2821962e":"Ridge_reg= GridSearchCV(ridge, parameters, scoring='neg_mean_squared_error',cv=5)","c927d5b6":"Ridge_reg.fit(X_train,y_train)","93688282":"print(Ridge_reg.best_estimator_)","121215a6":"best_ridge_model = Ridge_reg.best_estimator_","53ff18ec":"ridge_model_predictions = best_ridge_model.predict(X_val)","68c32c89":"ridge_results = pd.DataFrame({'Model':['Ridge Regression'],\n                                'R_squared':[r2_score(y_val,ridge_model_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,ridge_model_predictions)]})\nresults = results.append(ridge_results)","148cf31e":"lasso = Lasso()\nparameters = {'alpha':list(np.arange(0.0, 2.0, 0.01))}","f8d57c70":"lasso_reg= GridSearchCV(lasso, parameters, scoring='neg_mean_squared_error',cv=5)","926de708":"lasso_reg.fit(X_train,y_train)","50271c66":"print(lasso_reg.best_estimator_)","243b154d":"best_lasso_model = lasso_reg.best_estimator_","785e9f76":"lasso_model_predictions = best_ridge_model.predict(X_val)","4494f88f":"lasso_results = pd.DataFrame({'Model':['Lasso Regression'],\n                                'R_squared':[r2_score(y_val,lasso_model_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,lasso_model_predictions)]})\nresults = results.append(lasso_results)","8a5398e8":"dtree = DecisionTreeRegressor()","c45c0929":"param_grid = {'max_depth':list(np.arange(1,10)),\n             'max_features': ['auto', 'sqrt', 'log2']}","9873199a":"grid_dtree = GridSearchCV(dtree,param_grid,cv = 5)","6ba88c50":"grid_dtree.fit(X_train, y_train)","e2b08490":"best_dtree = grid_dtree.best_estimator_","68002a96":"dtree_val_predictions = best_dtree.predict(X_val)","a700f9a1":"dtree_results = pd.DataFrame({'Model':['Decistion tree'],\n                                'R_squared':[r2_score(y_val,dtree_val_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,dtree_val_predictions)]})\nresults = results.append(dtree_results)","9472158c":"random_forest = RandomForestRegressor()","5efaf8a7":"param_grid = {'max_depth':list(np.arange(1,10)),\n              'n_estimators':[100,1000],\n             'max_features': ['auto', 'sqrt', 'log2']}","f4409444":"grid_rf = GridSearchCV(random_forest,param_grid,cv=5)","356e2dc7":"grid_rf.fit(X_train,y_train)","5dba483f":"best_random_forest = grid_rf.best_estimator_  ","423378e1":"rf_val_predictions = best_random_forest.predict(X_val)","19795321":"rf_results = pd.DataFrame({'Model':['Random forest'],\n                                'R_squared':[r2_score(y_val,rf_val_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,rf_val_predictions)]})\nresults = results.append(rf_results)","368718f1":"extra_trees = ExtraTreesRegressor()","8436358f":"param_grid = {'max_depth':list(np.arange(1,10)),\n              'n_estimators':[100,1000],\n             'max_features': ['auto', 'sqrt', 'log2']}","140d0919":"grid_et = GridSearchCV(extra_trees,param_grid,cv=5)","40045206":"grid_et.fit(X_train,y_train)","c0c086d6":"best_extra_trees = grid_et.best_estimator_","ab54efb7":"et_val_predictions = best_extra_trees.predict(X_val)","966ae256":"et_results = pd.DataFrame({'Model':['Extra_trees'],\n                                'R_squared':[r2_score(y_val,et_val_predictions)],\n                                'Mean_squared_error':[mean_squared_error(y_val,et_val_predictions)]})\nresults = results.append(et_results)","22f8b478":"results","acfe8452":"ridge_predictions = best_ridge_model.predict(test)","1575e16e":"ridge_predictions = np.exp(ridge_predictions)","162299b3":"submission_csv = pd.DataFrame({'Id': test['Id'],\n                                    'SalePrice': ridge_predictions})","98668a99":"submission_csv.to_csv(\"Submission.csv\",index=False)","083a1d54":"Let's make a dummy variables for caregorical variables. Before we do that let's remove condition2 variable as we got condition1 which has the same amount of categories on training and test set.","da534dfe":"Propably our missing value should have TA(Typical\/Average) or Gd(Good). We can assume as we did earlier that in Neighborhood should be similar class of houses so let's repeat this step.","efa2d7c6":"Let's add Stone, BrkComm, CBlock, ImStucc and AsphShn to Other","54fb5498":"And we got it! All the missing variables are now cleared on training set. Let's the finish test set.","6171d7df":"## Ridge regression","46b7e9b2":"## Model selection","83b8a21f":"Now we are sure that all the missing values are for garages features are because of lack of garages at all.\nLet's fill missing values by 'None' and GarageYrBlt by 0.","c9b61dcf":"- LotFrontage - Linear feet of street connected to property\n\nWe can assume from the describtion that the area of the street is connected to property. Let's impute missing data by median for LotFrontage for missing observations","65de1ec8":"For five variables in our training dataset are missing more than 30% of observations (actually more than 40%).","72bd470f":"We have only 3 variables on training data and 9 variables on test data. Let's tidy up MasVnrArea and MasVnrType","39fb215d":"Last but not least:\n\n- Exterior2nd: Exterior covering on house (if more than one material)\n- Exterior1st: Exterior covering on house","d859214a":"## Decision tree","ad244bf4":"Let's keep CompShg and Tar&Grv, for other categories let's give 'other'","aa09e064":"Let's now check what we can do with other features:","c2fbc022":"For heating feature let's keep GasA and for other type of heating let's give 'Other'","c9deea64":"- Exterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","700f825d":"Let's fill Exterior1st by WD Sdng and Exterior2nd by Plywood as most common value for Exterior2nd is Plywood","2950a6f2":"Let's fix some of features which have got categorical values.","1be577b7":"### Data overview","615cf7a7":"### Linear Regression","f8cb6c31":"Let's make sure that there is no missing values.","eb920cb9":"- Electrical: Electrical system\nThere is only one missing value so we can drop this observation","a0bd6644":"Now we are sure that all missing observations for basement features are for the same set of observations. Let's fill missing values on training set. All of missing values are object so we can fill NaN values by None.","ca4a93f5":"We can see that three missing values were from IDOTRR Neighborhood and one from Mitchel so let's impute values for MSZoning basing on max number of elements of Neighborhood feature.","075790ed":"We can try in the same way for test set.","9d6145c3":"We can refresh our knowledge to check how many missing features we have to fix. Let's overwrite variable which we created as the start.","96673c29":"All right, there is one house with NoSeWa (Electricity and Gas Only) but we can treat that as a outlier as delele this observation.","c72b8333":"To be one hundred percent sure that we filled missing values let's check LotFrontage columns","a76de263":"#### Test set","ec0f678d":"## Extra trees","2f64e5e8":"## Import all necessary libraries","e92ecb13":"Now it looks better. Let's move to the modelling chapter!","42faf485":"Now we should not have any missing values on test set as well! Let's make sure.","adbf27ac":"Let's impute WD on missing value.","04d1f2af":"Let's now check if our targer variable has normal distribution","bf7007f2":"By map_3:\n    \n- BsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       None\tNo Basement\n       \nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       None\tNo Basement","43c8aa3f":"- GarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       None\tNo Garage","a411da7d":"## Random forest","ab8347fa":"By map_2:\n    \n- BsmtQual: Evaluates the height of the basement\n\n       Ex Excellent (100+ inches)\t\n       Gd Good (90-99 inches)\n       TA Typical (80-89 inches)\n       Fa Fair (70-79 inches)\n       Po Poor (<70 inches\n       None No Basement\n       \n- BsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       None\tNo Basement\n\n- GarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       None\tNo Garage\n       \n- GarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage","e7249131":"Let's also check the GarageCars variable ","2fb422ff":"We can see from that there is no normal distribution. To be sure let's make a Kolmogorov-Smirnof test.","da8403c7":"## Data modelling","72feafa7":"- Utilities: Type of utilities available ","cc5f82cd":"Let's check the skewness of our features and make a log to features with skewness > 1! \n","1d66b7a5":"The most common garage is a garage for two cars.","e5a5ecf4":"We have NaN value for the same observation, let's fill this value as we did before.","957bb701":"GrLivArea is variable which indicate a above grade (ground) living area square feet.\n\nLogarithm of Sale Price in relation with GrLivArea is almost linear.\n\nIn our dataset there are a few outliers. Let's delete these 4 outliers for GrLivArea.","041de7ae":"- KitchenQual: Kitchen quality","636199a8":"- SaleType: Type of sale.\nLet's check in what Neighborhood are missing observations and fill it by most common value.","988dff30":"\n- BsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       None\tNo Basement\n       ","d7e958ba":"### Import data","486efab7":"- Electrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed","9d76a584":"Let's switch FuseP and Mix to Other.","a5f5d902":"We could expect that forward selection will include variables which had the biggest correletion with target variable. As we can see from the results we met our expectations.","317ff655":"Let's make a few plots to check our target features which is SalePrice","74e59f43":"#### Training set","a19cccf0":"OverallQual is a variable which is responsible for rates the overall material and finish of the house. With the growth of quality prices of the houses are getting higher.","3f8e2a34":"- HouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Leve","f332f71f":"There is a very small probability that there is something different than ALLPub (All public Utilities (E,G,W,& S). Let's check on training set and if there is also only AllPub let's impute that!","fecfb89c":"## Evaluation","e6e755a0":"Let's impute for variable MSZoning value \"RM\" in houses in IDOTRR(Iowa DOT and Rail Road) and for variable MSZoning value \"RL\" in houses in Mitchel.","473596f7":"- RoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles\n       \n       ","72a290b3":"We can reject the hipothesis of normality of distribution on every significance level. ","18422a50":"Let's check which variables were taken to our model.","fd1cf9b0":"Let's try to model data using six methods:\n- Linear Regression\n- Ridge\n- Lasso Regresion\n- Decistion tree\n- Random forest\n- Extra trees\n\nAs we have propably too many statistically inrelevant features we will use forward selection to reduce number of variables in choosen estimators.\nTo compare results of these methods we will create a dataframe which will include R-square and mean squared error metrics.","30ede877":"Let's fill MasVnrType by None as it is an object and MasVnrArea by 0.","a71df120":"We can assume that missing values should have Typ - Typical Functionality. Let's impute Typ for these observations","06486b96":"Let's check another set of missing values related to basement:\n- BsmtFinType2: Rating of basement finished area (if multiple types)\n- BsmtExposure: Refers to walkout or garden level walls\n- BsmtFinType1: Rating of basement finished area\n- BsmtCond: Evaluates the general condition of the basement\n- BsmtQual: Evaluates the height of the basement    \nand for test set as well:\n\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- BsmtFinSF1: Type 1 finished square feet      \n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area","6dd858e7":"Let's compare the result's on validation set.","5a24abba":"### Missing data","5094a915":"We can see that models are very similar to each other. Let's predict our test data using Ridge Regression model.","339a665b":"Let's impute TA for missing observation","72ad5919":"- Exterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles","a7d35904":"Let's delete the features which had over 30% of missing observations in training and test data.","ca28bc9f":"Let's create a split for training and validation set. Final check will be on test set.","c59da367":"- PavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel","fb499c13":"## Data Exploratory","e42fe2b5":"We can see that there is the biggest positive correlation for features: OverallQual, GrlivArea, GarageCars, ExterQual and KitchenQUal and negative for features KitchenAbvGr and EnclosedPorch.","21c2e0c8":"Let's check in the first step how many missing observations we have got in training and test set.","c467821a":"- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n\nWe can assume that in this set of houses other method than masonry was used.\n\nLet's check if missing information for both features are for the same set of observations like we did for garages and basements features.\n    ","a9c8aa30":"By map_1:\n- ExterQual: Evaluates the quality of the material on the exterior \n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n       \n- ExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n       \n- HeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n       \n- KitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor","ac6f9971":"Let's fill missing values for test set as well. BsmtFullBath, BsmtHalfBath, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF and TotalBsmtSF are integers so we have to impute zeros.","cf233054":"- MSZoning: Identifies the general zoning classification of the sale.\n\nLet's impute by using Neighborhood grouping","ed9d6e1e":"### Lasso regression","ef473577":"## Feature engineering","0cf637fb":"The same conclusion about missing observations we can draw for test data.","6ba63198":"As we have to many dependence variable let's make a forward selection to reduce variables which are not statistically relevant.","cca3ccdc":"And let's make the same for test data but we have there also GarageCars and GarageArea variables which are integer. So these features we should impute by 0 instead of None value.","0ba01c8c":"And let's do the same for test data","8a1bfc56":"Let's start with correlation plot","33692410":"- Functional: Home functionality (Assume typical unless deductions are warranted).\n\nLet's take a look for missing functional observations ","35a50acb":"Now it's time to check:\n- GarageYrBlt: Year garage was built  \n- GarageType: Garage location\n- GarageFinish: Interior finish of the garage\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n\nand for test data as well:\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n\nMissing values for all Garage features are propably for the same set of observations - houses without garage."}}