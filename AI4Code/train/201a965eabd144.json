{"cell_type":{"65031d50":"code","5ebbbf4a":"code","fe3d9100":"code","8cd6c845":"code","2780e693":"code","5732dd64":"code","f569854b":"code","85904032":"code","16d036d0":"code","90cfbb5e":"code","45f6e163":"code","ee1437ef":"code","2a824807":"code","a72e392e":"code","f7b95611":"code","e6807ff7":"code","87299380":"code","3e3e9d89":"code","fda5a7b4":"code","4e050ad7":"code","a63f1b3e":"code","3d54850c":"code","bc7c4e04":"code","8f098618":"code","ec929f31":"code","19786c9c":"code","a1e640a4":"code","300a9f65":"code","3848831c":"code","699158c4":"code","ec762f0f":"code","81ade8e6":"code","1d98c4aa":"code","35d630ab":"code","4f251c48":"code","ae6b0534":"code","cecd1bdb":"code","af063dc6":"code","479b5766":"code","ddd171fc":"code","1aa22b19":"code","f0c182ba":"code","1e43ead7":"code","2b6df9a6":"code","ffc94c09":"code","34600ad2":"code","18a540ef":"code","0b754231":"code","4671a40c":"code","714e1a84":"code","aae744c0":"code","7fb9ee44":"code","02aa052a":"code","b5faddc7":"code","05181713":"code","4690bfd5":"code","55561abb":"code","6f9c94d8":"code","6972ac86":"code","0d871808":"code","b2c43e64":"code","f17fc0b3":"code","35572465":"code","f5480509":"code","0d0a86c0":"code","856a6c6c":"code","4d6b7039":"code","a892a6fd":"code","30a631c4":"code","b77468be":"code","c9e61170":"code","8e70a0d8":"code","ac50d314":"code","d09a51ac":"code","375b19b9":"code","85c5d64a":"code","f9cd1588":"code","c861dd64":"code","b6e98865":"code","9883cca0":"code","4b39f679":"code","7e818131":"code","e84c924b":"code","41c95201":"code","66c709d4":"code","b8ee45c0":"code","4d891b4a":"code","2abd16f9":"code","c60868b9":"code","8ec9e3d6":"code","8aee80a7":"code","2c3cec2e":"code","e132c858":"code","64fc9c76":"code","a4c725db":"code","aae7cbfa":"code","6f0bf945":"code","65f4d0bd":"code","bac3849b":"code","a296066f":"code","b9c27e72":"code","7422934e":"code","3035d912":"code","870ae081":"code","27b4cf60":"code","f364750e":"code","9e0f8303":"code","b1f0c226":"code","2280bc3b":"code","f5167ec0":"code","966ca2db":"code","8b02606a":"code","becb3c18":"code","6ac45e73":"code","c60d5106":"markdown","c47758b5":"markdown","0330c10a":"markdown","a26da1b0":"markdown","74b2ddf7":"markdown","736567ba":"markdown","64a3c42d":"markdown","b8235169":"markdown","3a18891a":"markdown","516a25e8":"markdown","3c1bab2b":"markdown","a9b48f49":"markdown","04190208":"markdown","b74dc6ca":"markdown","e1f38375":"markdown","29682ccc":"markdown","1c283226":"markdown","aa4b83d5":"markdown","227cba05":"markdown","dda1c1bb":"markdown","1b756530":"markdown","8b637d3e":"markdown","71940d23":"markdown","dc54e6f1":"markdown","5863f20a":"markdown","0c96a517":"markdown","91ecb65d":"markdown","908c9cd2":"markdown","bff928eb":"markdown","a7aa6805":"markdown","3746239f":"markdown","c2a00293":"markdown","5107d942":"markdown","c258c107":"markdown","926e9cb5":"markdown","d2dae70c":"markdown","011c6c91":"markdown","28851fb9":"markdown","7b0151fa":"markdown","ef83347a":"markdown","3722d0f7":"markdown","56c67476":"markdown","d143ada0":"markdown","81b4f98f":"markdown","64f5c3db":"markdown","380d5893":"markdown","937a5e28":"markdown","6929ee81":"markdown","ced771ab":"markdown","c42e6294":"markdown","bc2bb504":"markdown","b0004962":"markdown","8f4e9408":"markdown","2f535e09":"markdown","1ddd69d3":"markdown","6dd64572":"markdown","8cf8dc7d":"markdown","4dd92eba":"markdown","95e49630":"markdown","8eb4a54f":"markdown","2095b778":"markdown","11d47c46":"markdown","7f08a453":"markdown","9cd2cfad":"markdown","0d4f3a50":"markdown","433cf5a4":"markdown","5ce57f6e":"markdown","4f5274ad":"markdown","c1839012":"markdown","13439949":"markdown","4f693de5":"markdown","c41c81ee":"markdown","1e52a45b":"markdown","38ac9ab7":"markdown","eb0b712e":"markdown","6b57eea9":"markdown"},"source":{"65031d50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport re\nimport seaborn as sns \n\nfrom datetime import timedelta\nfrom pandas.plotting import register_matplotlib_converters\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n# warnings.filterwarnings('ignore')\n\npd.set_option('display.max_rows', 50)  # Show more rows\npd.set_option('display.max_columns', 50)  # Show more columns\nplt.style.use('ggplot')  # Nice plotting\n\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","5ebbbf4a":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\n# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n\n# \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndata.columns = ['restaurant_id', 'city', 'cuisine_style', 'ranking',\n              'price_range', 'number_of_reviews', 'reviews', 'URL_TA', 'ID_TA', 'sample', 'rating']","fe3d9100":"def price_range_convector(raw):\n    '''The function takes string code\n     and return int code'''\n    \n    if raw == '$$ - $$$':\n        return 2\n    elif raw == '$':\n        return 1\n    elif raw == '$$$$':\n        return 3\n    elif raw == 'nan':\n        return 0\n\n\ndef outliers_check(sample):\n    ''' The function takes Pandas.Series\n        then calculate outliers \n        and return df with them '''\n\n    Q1 = sample.quantile(0.25)\n    Q3 = sample.quantile(0.75)\n    IQR = Q3 - Q1\n    temp_df = pd.DataFrame(sample)\n    temp_df['up_outliers'] = pd.Series(sample > (Q3 + IQR*1.5))\n    temp_df['down_outliers'] = pd.Series(sample < (Q1 - IQR*1.5))\n\n    if temp_df.up_outliers.nunique() == 1 and temp_df.down_outliers.nunique() == 1:\n        return print('\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b')\n    else:\n        return temp_df[(temp_df.down_outliers == True) | (temp_df.up_outliers == True)]\n    \n    \ndef outliers_replace(sample):\n    ''' The function takes Pandas.Series\n        then calculate outliers \n        and return df with them '''\n    \n    Q1 = sample.quantile(0.25)\n    Q3 = sample.quantile(0.75)\n    IQR = Q3 - Q1\n    temp_df = pd.DataFrame(sample)\n    temp_df['up_outliers'] = pd.Series(sample > (Q3 + IQR*1.5))\n    temp_df['down_outliers'] = pd.Series(sample < (Q1 - IQR*1.5))\n    to_replace = list(set(outliers_check(sample)[temp_df.columns[0]]))\n    mediana = temp_df[temp_df.columns[0]].median()    \n    temp_df = temp_df.replace(to_replace, mediana)\n    \n    return temp_df[temp_df.columns[0]]\n\n\ndef return_count(value):\n    '''The function return number of elements in the list'''\n    \n    if type(value) == list:\n        return len(value)\n    else: return 1\n    \n\ncapital = ['Paris', 'Stockholm', 'London', 'Berlin',\n           'Bratislava', 'Vienna', 'Rome', 'Madrid',\n           'Dublin', 'Brussels', 'Warsaw', 'Budapest', 'Copenhagen',\n           'Amsterdam', 'Lisbon', 'Prague', 'Oslo',\n           'Helsinki', 'Ljubljana', 'Athens', 'Luxembourg']\n\ndef capital_check(raw):\n    '''The function takes city name\n    and return 1 if it is capital or 0 if not'''\n    \n    if raw in capital: \n        return 1\n    else:\n        return 0\n    \n    \nr_net = data.restaurant_id.value_counts()\n\ndef net_creator(value):\n    '''The function takes string Restaurant_id\n    and return 1 if restaurant in restaurant net or 0 if not'''\n    \n    if r_net.loc[value] == 1:\n        return 0\n    else: return 1\n    \n\npositive = ['love', 'amazing', 'good', 'best', 'brilliant', 'appealing', 'appetite',\n            'appetizing', 'aromatic', 'cool', 'clean', 'delectable', 'delicious',\n            'delightful', 'divine', 'edible', 'enjoyable', 'enticing', 'enjoy',\n            'excellent', 'exquisite', 'extraordinary', 'efficient', 'fab',\n            'fabulous', 'fantastic', 'fiery', 'finger-licking', 'friendly',\n            'gem', 'great', 'hearty', 'heavenly', 'honeyed', 'incredible',\n            'juicy', 'lovely', 'luscious', 'lush', 'marvelous', 'mouthwatering',\n            'nice', 'palatable', 'piquant', 'perfect', 'pleasant', 'pleasing',\n            'refreshing', 'rich', 'ripe', 'robust', 'salubrious',\n            'satisfying', 'savory', 'scrumptious', 'superb', 'super',\n            'tasty', 'tender', 'terrific', 'top', 'wonderful', 'unique',\n            'yummy', 'zesty']\nnegative = ['watery', 'overpriced', 'what', 'cold', 'disappointing', 'busy',\n            'kicked', 'shameful', 'avoid', 'lack', 'fast', 'boring',\n            'junk', 'bad', 'inadequate', 'poor', 'rotten', 'unhealthy',\n            'harm', 'ass', 'dehydrated', 'nasty', 'nasty-ass',\n            'poor-quality', 'awful', 'bad-tasting', 'canned',\n            'convenience', 'dangerous', 'disgusting', 'evil',\n            'frozen', 'god-awful', 'harmful', 'horrible',\n            'insufficient', 'prepackaged', 'processed', 'tasteless',\n            'terrible', 'unhealthful', 'vile', 'malnutrition', 'undernourishment',\n            'wrong', 'wast']\nneutral = ['okay', 'not exceptional', 'but','not bad', 'reasonable', 'average']\n\ndef emotion(sring):\n    '''The function takes string\n    find emotions and return emotion's list'''\n\n    emotion_list = []\n    for word in positive:\n        if word in str(sring.lower()):\n            emotion_list.append('positive')\n    for word in negative:\n        if word in str(sring.lower()):\n            emotion_list.append('negative')\n    for word in neutral:\n        if word in str(sring.lower()):\n            emotion_list.append('neutral')\n    if len(emotion_list) == 0:\n        emotion_list.append('neutral')\n    emotion_list = list(set(emotion_list))\n    \n    return emotion_list\n\n\n\ndef round_prediction_1(prediction):\n    '''round with discrete 0.5'''\n    \n    for index, number in enumerate(prediction):\n        remainder = number % 1\n        replacement_number = number \/\/ 1\n        if 0.25 <= remainder < 0.75:\n            replacement_number += 0.5\n        elif remainder >= 0.75:\n            replacement_number += 1\n        prediction[index] = replacement_number\n    \n    return prediction\n\n\n\ndef round_prediction_2(prediction):\n    '''round with discrete 0.5'''\n    \n    return np.round(prediction * 2) \/ 2 \n\n\ndef mean_per_city_fillna(var_name, tednention):\n    '''The function takes variable name\n    create variable with mean per city values of var_name,\n    fill na-values in [var_name],\n    and create new variable fillna_tednention_var_name'''\n    \n    if tednention == \"mean\":\n        # \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n        mean_var_name_per_city = data.groupby('city')[var_name].mean()\n    elif tednention == \"median\":\n        mean_var_name_per_city = data.groupby('city')[var_name].median()\n    data[f'{tednention}_{var_name}_per_city'] = data.city.apply(\n    lambda x: round(mean_var_name_per_city.loc[x]))\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c nan \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n    df = data.copy()\n    df.index = df.city\n    values = {key:value for key in set(df.index) \n              for value in set(df[f'{tednention}_{var_name}_per_city'])}\n    df[var_name].fillna(value=values, inplace=True, axis=0)\n    # \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 var_name \u0432 data\n    data[f'fillna_{tednention}_{var_name}'] = list(df[var_name])\n    \n\ndef mean_per_city_fillna_train(var_name, tednention):\n    '''The function takes variable name\n    create variable with mean per city values of var_name,\n    fill na-values in [var_name],\n    create new variable fillna_tednention_var_name'''\n    \n    if tednention == \"mean\":\n        # \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n        mean_var_name_per_city = df_train.groupby('City')[var_name].mean()\n    elif tednention == \"median\":\n        # \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n        mean_var_name_per_city = df_train.groupby('City')[var_name].median()\n    df_train[f'{tednention}_{var_name}_per_city'] = df_train.City.apply(\n    lambda x: round(mean_var_name_per_city.loc[x]))\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c nan \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\n    df = df_train.copy()\n    df.index = df.City\n    values = {key:value for key in set(df.index) \n              for value in set(df[f'{tednention}_{var_name}_per_city'])}\n    df[var_name].fillna(value=values, inplace=True, axis=0)\n    # \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 var_name \u0432 data\n    df_train[f'fillna_{tednention}_{var_name}'] = list(df[var_name])\n    \n\n    \ndef cuisine_name(review):\n    '''The function takes string of review\n    and return list of cuisine style \n    if any cuisine is in cuisine_list'''\n    \n    new_cuisine_list = [cuisine for cuisine in cuisine_list if cuisine.lower() in review.lower()]\n    \n    if len(new_cuisine_list) > 0:\n        return f\"{new_cuisine_list}\"\n    else: return None  ","8cd6c845":"data.sample(5)","2780e693":"data.reviews[1]","5732dd64":"data.nunique(dropna=False)","f569854b":"# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\ndata['number_of_reviews_isNAN'] = pd.isna(data['number_of_reviews']).astype('uint8')","85904032":"mean_per_city_fillna('number_of_reviews', 'mean')\n# mean_per_city_fillna('number_of_reviews', 'median')","16d036d0":"display(data.price_range.unique())\ndata.price_range.value_counts()","90cfbb5e":"# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\ndata['price_range_isNAN'] = pd.isna(data['price_range']).astype('uint8')","45f6e163":"# # \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a Restaurant_id \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Price Range\n# restaurant_net = data[data['price_range'].isna(\n# )].restaurant_id.value_counts().index\n\n# # \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Price Range \u043c\u043e\u0434\u043e\u0439 \u043f\u043e \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u043c\u043e\u0434\u043e\u0439 \u043f\u043e \u0432\u0441\u0435\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n# for id_ in restaurant_net:\n#     net_slice = data.loc[data['restaurant_id'] == id_, 'price_range']\n#     if len(net_slice.value_counts()) > 1:\n#         filler = net_slice.value_counts().index[0]\n#         if filler == 'nan':\n#             filler = net_slice.value_counts().index[1]\n#         data.loc[data['restaurant_id'] == id_,\n#                  'price_range'] = net_slice.fillna(filler)\n#     else:\n#         data.loc[data['restaurant_id'] == id_, 'price_range'] = data['price_range'].fillna(\n#             data['price_range'].mode()[0])\n\n# # \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430.\n# data.price_range = data.price_range.apply(price_range_convector)\n# data.sample()","ee1437ef":"# \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430\ndata['price_range'] = data['price_range'].apply(price_range_convector)\nmean_per_city_fillna('price_range', 'mean')\ndata = data.drop('mean_price_range_per_city',axis=1)","2a824807":"# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ndata.info()\ndisplay(data['fillna_mean_price_range'].unique())\ndata['fillna_mean_price_range'].value_counts()","a72e392e":"data.reviews.value_counts()","f7b95611":"data[data.reviews.isna()]","e6807ff7":"# display(len(data[(data.reviews == '[[], []]') & (data['number_of_reviews_isNAN'] == 0)]))\n# data[(data.reviews == '[[], []]') & (data['number_of_reviews_isNAN'] == 0)].sample()\n","87299380":"# display(len(data[(data.reviews == '[[], []]') & (data['number_of_reviews_isNAN'] == 1)]))\n# data[(data.reviews == '[[], []]') & (data['number_of_reviews_isNAN'] == 1)].sample()","3e3e9d89":"# data['reviews_isNAN'] = data.reviews\n# data.reviews_isNAN = data.reviews_isNAN.astype(str)\n\n# # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 2, \u0442\u0430\u043c \u0433\u0434\u0435 \u043d\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n# data.loc[(data.reviews_isNAN == '[[], []]') \n#          & (data['number_of_reviews_isNAN'] == 1),\n#          'reviews_isNAN'] = data[(data.reviews_isNAN == '[[], []]'\n#          ) & (data.number_of_reviews_isNAN == 1)].replace('[[], []]',2)\n# # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 1, \u0442\u0430\u043c \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n# data.loc[(data.reviews_isNAN == '[[], []]') \n#          & (data['number_of_reviews_isNAN'] == 0),\n#          'reviews_isNAN'] = data[(data.reviews_isNAN == '[[], []]'\n#          ) & (data.number_of_reviews_isNAN == 0)].replace('[[], []]',1)\n\n# data.loc[data.reviews_isNAN == 'nan', 'reviews_isNAN'] = data[\n#     data.reviews_isNAN == 'nan'].reviews_isNAN.replace('nan',1)\n\n# # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u044b \u043d\u0430 0, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n# def str_replace(raw):\n    \n#     if type(raw) != int:\n#         return 0 \n    \n    \n# data.loc[data.reviews_isNAN.str.contains(' ',na = False), 'reviews_isNAN'\n#         ] = data.reviews_isNAN.str.contains(' ',na = False).apply(str_replace)\n\n# # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\n# display(data.reviews_isNAN.unique())\n# data.reviews_isNAN.value_counts()","fda5a7b4":"data.loc[0, 'cuisine_style']","4e050ad7":"# \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445  \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.\ndata['cuisine_style_isNAN'] = pd.isna(data['cuisine_style']).astype('uint8')","a63f1b3e":"data.loc[13, 'reviews']","3d54850c":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u043a\u0443\u0445\u043e\u043d\u044c, \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u0433\u0430\u0434\u043a\u043e\u0439\ndata['cuisine'] = data.cuisine_style.fillna(\"['mystery']\")\n\n# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0438\ndata['cuisine'] = data['cuisine'].apply(lambda x: eval(x))\n\n# \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0431\u0435\u0437 mystery\ncuisine_list = np.sort(data.cuisine.explode().unique())[:-1]\n\n# display(cuisine_list)","bc7c4e04":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u0443\u0445\u043d\u044f\u0445, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f\u0441\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0438\u0437 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.\ndata.loc[(data['cuisine_style'].isna()) & (data.reviews != '[[], []]'), 'cuisine_style'] = data[(\n    data['cuisine_style'].isna()) & (data.reviews != '[[], []]')].reviews.astype(str).apply(cuisine_name)","8f098618":"# \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e 'cuisine', \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043d\u0435\u0439 \u043d\u0430 1688 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435\n# \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u0430\u0433\u0430\u0434\u043a\u043e\u0439 \"['mystery']\"\ndata['cuisine'] = data.cuisine_style.fillna(\"['mystery']\")\n\n# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0438\ndata['cuisine'] = data['cuisine'].apply(lambda x: eval(x))\n\n# \u0443\u0431\u0435\u0440\u0451\u043c \u0437\u0430\u0433\u0430\u0434\u043a\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043d\u0435 \u043f\u043e\u043f\u0430\u043b\u0430 \u0432 \u043c\u043e\u0434\u0443, \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u043d\u0438\u0431\u0443\u0434\u044c \u0433\u043e\u0440\u043e\u0434\u0443\ndf = data.copy()\ndf = df.explode('cuisine')\ndf.loc[df['cuisine'] == 'mystery', 'cuisine'] = None\n\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043c\u043e\u0434\ndict_of_mods = {key: f\"['{df[df.city == key]['cuisine'].value_counts().index[0]}']\"\n                for key in set(df.city)}\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0434\u0430\u043c\u0438\ndf = data.copy()\ndf.index = df.city\ndf['cuisine_style'].fillna(value=dict_of_mods, inplace=True, axis=0)\ndf['cuisine'] = df.cuisine_style.apply(lambda x: eval(x))\n\n# \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 data\ndata['cuisine'] = list(df['cuisine'])","ec929f31":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f 'cuisine' \u043c\u043e\u0434\u043e\u0439. \u041d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 11590 mystery.\ndata.info()\ndata.cuisine.astype(str).value_counts()","19786c9c":"data.sample()","a1e640a4":"df_train['Rating'].sort_values().unique()","300a9f65":"plt.figure(figsize=(15, 5))\nplt.subplot(121)\nplt.title('Rating Distribution', fontsize=15)\nplt.ylabel('Rating')\nplt.xlabel('Quantity')\ndf_train['Rating'].value_counts(ascending=True).plot(kind='barh',color='green')\nplt.show()","3848831c":"plt.figure(figsize=(15, 5))\nplt.subplot(121)\ncolors = ['green', 'maroon']\nsns.distplot(df_train.Rating.values, bins=9, color=colors[0], kde=False)\nplt.title('Rating Distribution', fontsize=15)\nplt.xlabel('Rating')\nplt.ylabel('Quantity')\n\nplt.subplot(122)\nsns.boxplot(df_train.Rating.values, color=colors[1])\nplt.title('Rating Distribution', fontsize=15)\nplt.xlabel('Rating')\nplt.show()","699158c4":"plt.rcParams['figure.figsize'] = (10,5)\nsns.heatmap(data.drop(['sample'], axis=1).corr(), annot=True)\nplt.title('Pirson', fontsize=15)\nplt.show()","ec762f0f":"plt.figure(figsize=(25, 5))\nplt.subplot(121)\nplt.title('Ranking Distribution', fontsize=15)\n# Draw a nested violinplot and split the violins for easier comparison\nsns.violinplot(data=df_train, x=\"Rating\", y=\"Ranking\", \n               split=True, inner=\"quart\", linewidth=1)\n#               \nsns.despine(left=True)","81ade8e6":"plt.figure(figsize=(15, 5))\nplt.subplot(121)\ncolors = ['g', 'maroon']\nsns.distplot(df_train.Ranking.values, bins=100, color=colors[0], kde=False)\nplt.title('Ranking Distribution', fontsize=15)\nplt.xlabel('Ranking')\nplt.ylabel('Quantity')\n\nplt.subplot(122)\nsns.boxplot(df_train.Ranking.values, color=colors[1])\nplt.title('Ranking Distribution', fontsize=15)\nplt.xlabel('Ranking')\nplt.show()","1d98c4aa":"plt.title(\"Quantity of restourants\", fontsize=15)\nplt.xlabel('quantity')\ndf_train['City'].value_counts(ascending=True).plot(kind='barh', figsize=(15, 10), color = 'g' )\nplt.show()","35d630ab":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0432 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nsns.set_color_codes(\"dark\")\nfig, ax = plt.subplots(figsize=(15, 5))\n\nfor city in (df_train['City'].value_counts())[0:10].index:\n    sns.distplot(df_train['Ranking'][df_train['City'] == city],\n                 kde=False, label=city,)\n\nax.legend(prop={'size': 10})\nplt.title('Ranking Distribution among cities', fontsize=15)\nplt.xlabel('Ranking')\nplt.ylabel('Quantity (frequency)')\nplt.show()","4f251c48":"# \u0432\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0434\u0435\u0441\u044f\u0442\u043a\u0430\nsns.set_color_codes(\"bright\")\nfig, ax = plt.subplots(figsize=(15, 5))\n\nfor city in (df_train['City'].value_counts())[10:20].index:\n    sns.distplot(df_train['Ranking'][df_train['City'] == city],\n                 kde=False, label=city,)\n\nax.legend(prop={'size': 10})\nplt.title('Ranking Distribution among cities', fontsize=15)\nplt.xlabel('Ranking')\nplt.ylabel('Quantity (frequency)')\nplt.show()","ae6b0534":"sns.set_color_codes(\"bright\")\nfig, ax = plt.subplots(figsize=(15, 5))\n\nfor city in (df_train['City'].value_counts())[20:].index:\n    sns.distplot(df_train['Ranking'][df_train['City'] == city],\n                 kde=False, label=city,)\n\nax.legend(prop={'size': 10})\nplt.title('Ranking Distribution among cities', fontsize=15)\nplt.xlabel('Ranking')\nplt.ylabel('Quantity (frequency)')\nplt.show()","cecd1bdb":"for city in (df_train['City'].value_counts()).index:\n    fig, ax = plt.subplots(figsize=(15, 5))\n    section = df_train[df_train['City'] == city]\n    sns.boxplot(x = 'Rating', y = 'Ranking', data = section)\n    plt.title(f'Rank distribution relative to Rating in {city}', fontsize=15)\n    plt.xlabel('Rating')\n    ax.legend(prop={'size': 10})\n    plt.show()","af063dc6":"# \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u0430\ndf_train['Price Range'] = df_train['Price Range'].apply(price_range_convector)\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c nan \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmean_per_city_fillna_train('Price Range', 'mean') \ndf_train = df_train.drop('mean_Price Range_per_city',axis=1)","479b5766":"plt.figure(figsize=(15, 5))\nplt.subplot(121)\ncolors = ['g', 'maroon']\nsns.distplot(df_train['Price Range'].values, bins=3, color=colors[0], kde=False)\nplt.title('Price Range Distribution', fontsize=15)\nplt.xlabel('Price Range')\nplt.ylabel('Quantity')\n\n\nplt.subplot(122)\nsns.boxplot(df_train['Price Range'].values, color=colors[1])\nplt.title('Price Range Distribution', fontsize=15)\nplt.xlabel('Price Range')\nplt.show()","ddd171fc":"plt.figure(figsize=(25, 3))\nplt.subplot(121)\nplt.title('Price Range Distribution', fontsize=15)\n# Draw a nested violinplot and split the violins for easier comparison\nsns.violinplot(data=df_train, x=\"Rating\", y=\"Price Range\", \n               split=True, inner=\"quart\", linewidth=1)\n#               \nsns.despine(left=True)","1aa22b19":"for city in (df_train['City'].value_counts()).index:\n    fig, ax = plt.subplots(figsize=(15, 5))\n    section = df_train[df_train['City'] == city]\n    sns.boxplot(x = 'Rating', y = 'Price Range', data = section)\n    plt.title(f'Rank distribution relative to Rating in {city}', fontsize=15)\n    plt.xlabel('Rating')\n    ax.legend(prop={'size': 10})\n    plt.show()","f0c182ba":"# mean_per_city_fillna_train('Number of Reviews', 'mean') # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u043f\u043b\u0435\u0441\u043a \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438.\nmean_per_city_fillna_train('Number of Reviews', 'median')","1e43ead7":"df_train.info()","2b6df9a6":"plt.figure(figsize=(15, 5))\nplt.subplot(121)\ncolors = ['g', 'maroon']\nsns.distplot(df_train['fillna_median_Number of Reviews'].values, bins=100, color=colors[0], kde=False)\nplt.title('Number of Reviews Distribution', fontsize=15)\nplt.xlabel('Number of Reviews')\nplt.ylabel('Quantity')\n\nplt.subplot(122)\nsns.boxplot(df_train['fillna_median_Number of Reviews'].values, color=colors[1])\nplt.title('Number of Reviews Distribution', fontsize=15)\nplt.xlabel('Number of Reviews')\nplt.show()","ffc94c09":"colors = ['g', 'maroon']\nfor city in (df_train['City'].value_counts()).index:\n    plt.figure(figsize=(15, 5))\n    plt.subplot(121)\n    section = df_train[df_train['City'] == city]['fillna_median_Number of Reviews']\n    sns.distplot(section.values, bins=100, color=colors[0], kde=False)\n    plt.title(f'Number of Reviews distribution in {city}', fontsize=15)\n    plt.xlabel('Number of Reviews')\n    plt.ylabel('Quantity')\n\n    plt.subplot(122)\n    sns.boxplot(section.values, color=colors[1])\n    plt.title(f'Number of Reviews distribution in {city}', fontsize=15)\n    plt.xlabel('Number of Reviews')\n    plt.show()","34600ad2":"# \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0432\u043e \u0432\u0441\u0435\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\ndf_train['outliers_free_Number of Reviews'] = outliers_replace(df_train['fillna_median_Number of Reviews'])","18a540ef":"\n    fig, ax = plt.subplots(figsize=(15, 5))\n  \n    sns.boxplot(x = 'Rating', y = 'outliers_free_Number of Reviews', data = df_train)\n    plt.title('Number of Reviews distribution relative to Rating', fontsize=15)\n    plt.xlabel('Rating')\n    ax.legend(prop={'size': 10})\n    plt.show()","0b754231":"for city in (df_train['City'].value_counts()).index:\n    fig, ax = plt.subplots(figsize=(15, 5))\n    section = df_train[df_train['City'] == city]\n    sns.boxplot(x = 'Rating', y = 'outliers_free_Number of Reviews', data = section)\n    plt.title(f'Number of Reviews distribution relative to Rating in {city}', fontsize=15)\n    plt.xlabel('Rating')\n    ax.legend(prop={'size': 10})\n    plt.show()","4671a40c":"plt.title(\"Max Number of Reviews\", fontsize=15)\nplt.xlabel('quantity')\ndf_train.groupby('City')['fillna_median_Number of Reviews'].max().sort_values(\n).plot(kind='barh', figsize=(15, 10), color = 'g')\nplt.show()","714e1a84":"plt.title(\"Sum Number of Reviews\", fontsize=15)\nplt.xlabel('quantity')\ndf_train.groupby('City')['fillna_median_Number of Reviews'].sum().sort_values(\n).plot(kind='barh', figsize=(15, 10), color = 'g')\nplt.show()","aae744c0":"sum_review_namber = df_train.groupby('City')[\n    'fillna_median_Number of Reviews'].sum().sort_values()\n# \u0421\u0443\u043c\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndf_train['reviews_in_city'] = df_train['City'].apply(lambda x: sum_review_namber[x])\n# \u0414\u043e\u043b\u044f \u043e\u0442 \u0441\u0443\u043c\u043c\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndf_train['fraction_reviews'] = df_train['fillna_median_Number of Reviews'] \/ df_train[\n    'reviews_in_city']\ndf_train.sample(5)","7fb9ee44":"plt.title(\"Sum of fraction_reviews\", fontsize=15)\nplt.xlabel('quantity')\ndf_train.groupby('City')['fraction_reviews'].sum().sort_values(\n).plot(kind='barh', figsize=(5, 10), color = 'g')\nplt.show()","02aa052a":"# \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0432\u043e \u0432\u0441\u0435\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\ndf_train['outliers_free_fraction_reviews'] = outliers_replace(df_train['fraction_reviews'])\nfig, ax = plt.subplots(figsize=(15, 5))\nsection = df_train[df_train['City'] == city]\nsns.boxplot(x = 'Rating', y = 'outliers_free_fraction_reviews', data = df_train)\nplt.title('fraction_reviews distribution relative to Rating', fontsize=15)\nplt.xlabel('Rating')\nax.legend(prop={'size': 10})\nplt.show()    ","b5faddc7":"data['restaurant_id'].value_counts()","05181713":"net = len(data[\"restaurant_id\"].value_counts().values[\n    data['restaurant_id'].value_counts().values > 1])\nnumber = len(data['restaurant_id'].value_counts())\ndisplay(f'\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0442\u0435\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 {net} \u0438\u0437 {number}')","4690bfd5":"colors = ['g', 'maroon']\nfor city in (df_train['City'].value_counts()).index:\n    plt.figure(figsize=(10, 3))\n    plt.subplot(121)\n    section = df_train[df_train['City'] == city]['Rating']\n    sns.distplot(section.values, bins=100, color=colors[0], kde=False)\n    plt.title(f'Rating distribution in {city}', fontsize=15)\n    plt.xlabel('Rating')\n    plt.ylabel('Quantity')\n\n    plt.subplot(122)\n    sns.boxplot(section.values, color=colors[1])\n    plt.title(f'Rating distribution in {city}', fontsize=15)\n    plt.xlabel('Rating')\n    plt.show()","55561abb":"df_cs = data.copy()\ndf_cs = df_cs.explode('cuisine')\n# df_cs.cuisine.hist()","6f9c94d8":"df_cs.sample()","6972ac86":"colors = ['g', 'maroon']\nfor cuisine in (df_cs['cuisine'].value_counts()).index:\n    plt.figure(figsize=(10, 3))\n    plt.subplot(121)\n    section = df_cs[df_cs['cuisine'] == cuisine]['rating']\n    sns.distplot(section.values, bins=100, color=colors[0], kde=False)\n    plt.title(f'Rating distribution in {cuisine}', fontsize=15)\n    plt.xlabel('Rating')\n    plt.ylabel('Quantity')\n\n    plt.subplot(122)\n    sns.boxplot(section.values, color=colors[1])\n    plt.title(f'Rating distribution in {cuisine}', fontsize=15)\n    plt.xlabel('Rating')\n    plt.show()","0d871808":"df_train.loc[0,'URL_TA']","b2c43e64":"df_train.loc[0,'ID_TA']","f17fc0b3":"df_train['ID_TA'].value_counts()","35572465":"df_train.info()","f5480509":"df_train.columns","0d0a86c0":"max_var_name_per_city = data.groupby('city')['ranking'].max()\ndata['max_ranking_per_city'] = data.city.apply(\nlambda x: round(max_var_name_per_city.loc[x]))\ndata['norm_ranking'] = data['ranking'] \/ data['max_ranking_per_city']","856a6c6c":"data.sample()","4d6b7039":"# \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0440\u0430\u043d\u0433.\nnumber_of_restaurants  = data.city.value_counts()\n\ndata['n_restaurants_per_city'] = data.city.apply(lambda x: number_of_restaurants.loc[x])\ndata['ranking_per_n_r_city'] = data.ranking \/ data.n_restaurants_per_city","a892a6fd":"# \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u043d\u0433 \u043f\u043e \u0441\u0435\u0442\u0438\nmean_net_restaurant = data.groupby('restaurant_id').ranking_per_n_r_city.mean()\ndata['mean_net_ranking'] = data.restaurant_id.apply(lambda x: mean_net_restaurant.loc[x])","30a631c4":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\noutliers_check(data['fillna_mean_number_of_reviews'])","b77468be":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ndata['reviews_outliers_free'] = outliers_replace(data['fillna_mean_number_of_reviews'])","c9e61170":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u0435\u043c\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmax_var_name_per_city = data.groupby('city')['reviews_outliers_free'].max()\ndata['max_number_of_reviews_per_city'] = data.city.apply(\nlambda x: round(max_var_name_per_city.loc[x]))\ndata['norm_reviews_on_max'] = data['reviews_outliers_free'] \/ data['max_number_of_reviews_per_city']","8e70a0d8":"sum_review_namber = data.groupby('city')[\n    'reviews_outliers_free'].sum().sort_values()\n# \u0421\u0443\u043c\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata['reviews_in_city'] = data['city'].apply(lambda x: sum_review_namber[x])\n# \u0414\u043e\u043b\u044f \u043e\u0442 \u0441\u0443\u043c\u043c\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndata['fraction_reviews'] = data['reviews_outliers_free'] \/ data[\n    'reviews_in_city']\n\ndata.sample(5)","ac50d314":"data.info()","d09a51ac":"# \u0415\u0449\u0451 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\ndata['rank_norm_reviews_in_city'] = data.norm_ranking \/ data.reviews_in_city\ndata['ranking_norm_fraction_reviews'] = data.ranking \/ data.fraction_reviews\ndata['ranking_norm_reviews_in_city'] = data.ranking \/ data.reviews_in_city\ndata['rank_norm_fraction_reviews'] = data.norm_ranking \/ data.fraction_reviews","375b19b9":"data['net'] = data.restaurant_id.str.replace('id_','').astype(int)\ndata['net']","85c5d64a":"agg_cuisine = {'Central European': ['Central European', 'Austrian', 'German', 'Dutch',\n                                    'Belgian', 'Czech', 'Swiss', 'Hungarian', 'Romanian'],\n               'European': ['European'],\n               'Greek': ['Greek'],\n               'French': ['French'],\n               'coffe': ['Cafe', 'Brew Pub'],\n               'other': ['Fusion', 'International', 'Soups', 'Contemporary',  'Diner',\n                         'Fast Food', 'Street Food', 'Delicatessen'],\n               'meat': ['Steakhouse', 'Grill', 'Barbecue'],\n               'alcohol': ['Bar', 'Wine Bar', 'Gastropub',  'Pub'],\n               'Asian': ['Asian', 'Malaysian', 'Korean', 'Indonesian', 'Singaporean'],\n               'diet': ['Healthy', 'Gluten Free Options'],\n               'Passific Ocean': ['Polynesian', 'Hawaiian', 'Filipino'],\n               'British': ['British', 'Irish', 'Welsh', 'Scottish'],\n               'Spanish': ['Spanish', 'Portuguese'],\n               \n               'Balcan': ['Albanian', 'Croatian', 'Slovenian'],\n               'Eastern European': ['Eastern European', 'Polish', 'Russian', \n                                    'Ukrainian', 'Balti', 'Latvian'],\n               'Scandinavian': ['Scandinavian', 'Danish', 'Norwegian', 'Swedish'],\n               'Kosher': ['Kosher', 'Israeli'],\n               'Italian': ['Italian', 'Pizza'],\n               'Japanese': ['Japanese', 'Sushi'],\n               'Chinese': ['Taiwanese', 'Minority Chinese', 'Chinese', \n                           'Tibetan', 'Xinjiang', 'Yunnan', 'Fujian'],\n               'Vegan': ['Vegan Options', 'Vegetarian Friendly'],\n               'Indian': ['Indian', 'Bangladeshi', 'Pakistani', 'Nepali', 'Sri Lankan'],\n               'American': ['American', 'Cajun & Creole', 'Canadian'],\n               'Arabic': ['Arabic', 'Egyptian', 'Lebanese', 'Middle Eastern',\n                          'Moroccan', 'Tunisian', 'Halal'],\n               'Caucasian': ['Caucasian', 'Georgian', 'Armenian', 'Azerbaijani'],\n               'Australian': ['Australian', 'New Zealand'],\n               'Mediterranean': ['Seafood', 'Mediterranean'],\n               'SEA': ['Thai', 'Vietnamese', 'Burmese', 'Cambodian'],\n               'African': ['African', 'Ethiopian'],\n               'South American': ['Argentinean', 'Brazilian', 'Chilean', 'Colombian',\n                                  'Ecuadorean', 'Native American', 'Peruvian', \n                                  'South American', 'Venezuelan'],\n               'Central American': ['Central American', 'Caribbean', 'Cuban', 'Jamaican', \n                                    'Latin', 'Mexican', 'Salvadoran', 'Southwestern'],\n               'Central Asian': ['Central Asian', 'Afghani', 'Mongolian', 'Pakistani', \n                                 'Persian', 'Turkish', 'Uzbek']\n               }\n","f9cd1588":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e - \u0430\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438.\ndata['agg_cuisine'] = data.cuisine.apply(lambda x: list(set([\n    key for element in x for key, value in agg_cuisine.items() \n    for cuisine in value if cuisine == element])))","c861dd64":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 n_cuisine\ndata['n_cuisine'] = data.cuisine.apply(lambda x: len(x))","b6e98865":" data['reviews_'] = data.reviews.astype(str)","9883cca0":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u044d\u043c\u043e\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043e\u043a\u0440\u0430\u0441\u043a\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['emotion'] = data.reviews_.apply(emotion)\ndata.sample()","4b39f679":"# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ndata[data['emotion'].isna()]","7e818131":"def first_review(date_list):\n    if len(date_list) > 0:\n        return date_list[0]\n    else: return None\n    \n    \ndef last_review(date_list):\n    if len(date_list) == 2:\n        return date_list[1]\n    else: return None\n\n    \npattern = re.compile('\\d+\\W\\d+\\W\\d\\d\\d\\d')\ndata['reviews_date'] = data.reviews.apply(lambda x: pattern.findall(str(x)))    \ndata['first_review_time'] = data.reviews_date.apply(first_review)\ndata['last_review_time'] = data.reviews_date.apply(last_review)\ndata['time_penultimate_review'] = pd.to_datetime(data['first_review_time'])\ndata['time_last_review'] = pd.to_datetime(data['last_review_time'])\ndata['delta_reviews_time'] = data['time_last_review'] - data['time_penultimate_review']\ndata['delta_reviews_time'] = data['delta_reviews_time'].dt.days","e84c924b":"data.loc[data.delta_reviews_time < 0,'reviews_date']","41c95201":"data[data.delta_reviews_time < 0].reviews_date.apply(lambda x: x.reverse())","66c709d4":"data[data.delta_reviews_time < 0].reviews_date","b8ee45c0":"data['first_review_time'] = data.reviews_date.apply(first_review)\ndata['last_review_time'] = data.reviews_date.apply(last_review)\ndata['time_penultimate_review'] = pd.to_datetime(data['first_review_time'])\ndata['time_last_review'] = pd.to_datetime(data['last_review_time'])\ndata['delta_reviews_time'] = data['time_last_review'] - data['time_penultimate_review']\ndata['delta_reviews_time'] = data['delta_reviews_time'].dt.days\ndata['delta_reviews_time_isNAN'] = pd.isna(data['delta_reviews_time']).astype('uint8')\ndata['time_penultimate_review_isNAN'] = pd.isna(data['time_penultimate_review']).astype('uint8')\ndata['time_last_review_isNAN'] = pd.isna(data['time_last_review']).astype('uint8')","4d891b4a":"data.delta_reviews_time.hist(figsize=(10, 5), color = 'm')\nplt.title(\"delta reviews time\", fontsize=15)\nplt.xlabel('days')\nplt.ylabel('quantity')\nplt.show()","2abd16f9":"register_matplotlib_converters()","c60868b9":"plt.title(\"time penultimate review\", fontsize=15)\nplt.xlabel('year')\nplt.ylabel('quantity')\ndata['time_penultimate_review'].hist(figsize=(10, 5), color = 'g')\nplt.show()","8ec9e3d6":"plt.title(\"time last review\", fontsize=15)\nplt.xlabel('year')\nplt.ylabel('quantity')\ndata['time_last_review'].hist(figsize=(10, 5), color = 'g')\nplt.show()","8aee80a7":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \"\u0441\u0432\u0435\u0436\u0435\u0441\u0442\u044c\" \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \ndata['recency_penultimate_review'] = data['time_last_review'].max() - data['time_penultimate_review']\ndata['recency_last_review'] = data['time_last_review'].max() - data['time_last_review']\n# \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\ndata['recency_penultimate_review'] = data['recency_penultimate_review'].dt.days\ndata['recency_last_review'] = data['recency_last_review'].dt.days\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ndata['recency_penultimate_review'].fillna(value=data.recency_penultimate_review.median(),\n                                          inplace=True, axis=0)\ndata['recency_last_review'].fillna(value=data.recency_last_review.median(), inplace=True, axis=0)\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\ndata[['recency_penultimate_review', 'recency_last_review']]","2c3cec2e":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 delta_reviews_time.\ndata['delta_reviews_time'].fillna(value=data.delta_reviews_time.median(), inplace=True, axis=0)","e132c858":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\npopulation = {\n    'London': 8787892,\n    'Paris': 2187526,\n    'Madrid': 3300000,\n    'Barcelona': 1593075,\n    'Berlin': 3726902,\n    'Milan': 1331586,\n    'Rome': 2860000,\n    'Prague': 1300000,\n    'Lisbon': 505526,\n    'Oporto': 237559,\n    'Vienna': 1900000,\n    'Amsterdam': 872080,\n    'Brussels': 144784,\n    'Hamburg': 1840000,\n    'Munich': 1558395,\n    'Lyon': 506615,\n    'Stockholm': 975904,\n    'Budapest': 1752286,\n    'Warsaw': 1720398,\n    'Dublin': 1793579 ,\n    'Copenhagen': 1330993,\n    'Athens': 3090508,\n    'Edinburgh': 476100,\n    'Zurich': 402275,\n    'Porto': 237559,\n    'Geneva': 196150,\n    'Krakow': 779115,\n    'Oslo': 697549,\n    'Helsinki':  656229,\n    'Bratislava': 563682,\n    'Luxembourg': 626108,\n    'Ljubljana': 295504\n}\n\ndata['population'] = data['city'].map(population)\n\n# UPD \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u041c\u0410\u0415","64fc9c76":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0436\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d.\ndata['population_per_n_rest'] = data.population \/ data.n_restaurants_per_city","a4c725db":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e capital - \u0441\u0442\u043e\u043b\u0438\u0446\u0430\ndata['capital'] = data.city.apply(capital_check)\ndata.sample(2)","aae7cbfa":"# dummy for cuisine_style\n# data = data.join(pd.get_dummies(data.cuisine.apply(pd.Series).stack()).sum(level=0))\ndata = data.join(pd.get_dummies(data.agg_cuisine.apply(pd.Series).stack()).sum(level=0))\n# UPD \u0410\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u0434\u0430\u044e\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u041c\u0410\u0415, \u0447\u0435\u043c \u043d\u0435\u0430\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435.","6f0bf945":"# dummy \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndata['city_'] = data['city']\ndata = pd.get_dummies(data, columns=[ 'city_',])","65f4d0bd":"# dummy for emotion\ndata = data.join(pd.get_dummies(data.emotion.apply(pd.Series).stack()).sum(level=0))","bac3849b":"# \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0438\u043b\u044c\u043d\u043e\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndata = data.drop(['price_range',\n                  'number_of_reviews',\n                  'max_ranking_per_city',\n                  'ranking_per_n_r_city',\n                  'time_last_review_isNAN'], axis=1)\n# 'reviews_outliers_free','reviews_in_city',\n#                   'ranking_norm_reviews_in_city',\n#                   'ranking_norm_fraction_reviews',","a296066f":"data = data.drop(['reviews_in_city','ranking_norm_fraction_reviews','norm_reviews_on_max'], axis=1)","b9c27e72":"plt.rcParams['figure.figsize'] = (50,50)\nsns.heatmap(data.drop(['sample'], axis=1).corr(), annot=True)\nplt.show()","7422934e":"# \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\ndf = data.drop(['sample'], axis=1).copy()\nplt.rcParams['figure.figsize'] = (30,20)\nsns.heatmap(df.iloc[:,:41].corr(), annot=True)\nplt.show()","3035d912":"# \u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\ndf_preproc = data.copy()\ndf_preproc = df_preproc.drop([column  for column in df_preproc.columns \n                        if df_preproc[column].dtype == 'O'\n                        or df_preproc[column].dtype == '<M8[ns]'],axis=1)\n# df_preproc.sample()\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['rating'], axis=1)\n\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","870ae081":"# df_preproc.sample()","27b4cf60":"# df_preproc.info()","f364750e":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","9e0f8303":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)\n\n\n\n# \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f y_pred, \u0441 \u0448\u0430\u0433\u043e\u043c 0.5\ny_pred_round_1 = y_pred.copy()\ny_pred_round_2 = y_pred.copy()\n\ny_pred_round_1 = round_prediction_1(y_pred_round_1)    \ny_pred_round_2 = round_prediction_2(y_pred_round_2)    \n\n# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MAE_round_1:', metrics.mean_absolute_error(y_test, y_pred_round_1))\nprint('MAE_round_2:', metrics.mean_absolute_error(y_test, y_pred_round_2))","b1f0c226":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,30)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(25).plot(kind='barh')\nplt.show()","2280bc3b":"test_data.sample(10)","f5167ec0":"test_data = test_data.drop(['rating'], axis=1)","966ca2db":"sample_submission","8b02606a":"predict_submission = model.predict(test_data)","becb3c18":"# predict_submission = round_prediction_2(predict_submission)\npredict_submission = round_prediction_1(predict_submission)\npredict_submission","6ac45e73":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","c60d5106":"## 3 Feature Engineering","c47758b5":"\u041a\u0430\u043a \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c, \u0442\u0430\u043a \u0438 \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435.  \n\n\u041d\u0443\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443.\n\n","0330c10a":"\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442.  \n\u0414\u043e\u0440\u043e\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0438\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0434\u0435\u0448\u043e\u0432\u044b\u0445.","a26da1b0":"\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b\u043e\u0441\u044c! \n\n\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.","74b2ddf7":"\u0412 \u0442\u043e\u043f 10 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430.","736567ba":"\u0412\u0441\u0435 \u043a\u0443\u0445\u043d\u0438, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0435\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u0441\u043c\u0435\u0449\u0451\u043d\u043d\u043e\u0435 \u0432\u043f\u0440\u0430\u0432\u043e.\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0438\u0433\u0440\u0430\u0442\u044c \u0440\u043e\u043b\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.\n\nUPD \u0421 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u044f \u043f\u043e\u0441\u043f\u0435\u0448\u0438\u043b, \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0447\u0435\u043c \u0431\u0435\u0437 \u043d\u0438\u0445.","64a3c42d":"\u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0420\u0438\u043c\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0447\u0430\u0449\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043e\u0442\u0437\u044b\u0432\u044b, \u0447\u0435\u043c \u0432 \u041f\u0430\u0440\u0438\u0436\u0435, \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432 \u043f\u0430\u0440\u0438\u0436\u0441\u043a\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435.","b8235169":"### Cuisine Style: \u041a\u0443\u0445\u043d\u044f","3a18891a":"\u0421\u0438\u043b\u044c\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0432\u043b\u0438\u044f\u0435\u0442 \u0440\u0430\u043d\u0433. \u041f\u0440\u0438\u0441\u043c\u043e\u0442\u0440\u0438\u043c\u0441\u044f \u043a \u043d\u0435\u043c\u0443 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0435.\n### Ranking ","516a25e8":"city          - \u0433\u043e\u0440\u043e\u0434 \u044f\u0432\u043d\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a  \ncuisine_style - \u043a\u0443\u0445\u043d\u044f \u044f\u0432\u043d\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a     \nprice_range   - \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d 4 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0435         \n        \nrating        - \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f           \n","3c1bab2b":"y_pred \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f [3.25 , 4.345, 4.18 , ..., 3.09 , 4.49 , 4.29 ]  \n\u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f 'Rating' [1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ]  \n\u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f y_pred, \u0441 \u0448\u0430\u0433\u043e\u043c 0.5","a9b48f49":"# DATA","04190208":"### \u043d\u043e\u0432\u0438\u0437\u043da \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\n\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442 \u043d\u043e\u0432\u0438\u0437\u043d\u0443 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u0417\u0430 \u0440\u0435\u043f\u0435\u0440\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.","b74dc6ca":"\u0421\u0442\u0440\u0430\u043d\u043d\u043e, \u0447\u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0451\u0442 \u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u041c\u0410\u0415.\n2.4 \u043e\u043d \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442 \u0434\u043e 2, \u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u043e 2.5","e1f38375":"\u0415\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u0441\u0442\u0438\u043b\u044f \u043a\u0443\u0445\u043d\u0438, \u043d\u043e \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0438\u043b\u044c.  \n\"[['Surprisingly good pizza', 'Yummy'], ['09\/28\/2017', '09\/19\/2016']]\"  \n\u041c\u043e\u0436\u043d\u043e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 'cuisine_style' \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","29682ccc":"\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u043e \u043d\u0435\u0434\u043e\u0440\u0430\u0437\u0443\u043c\u0435\u043d\u0438\u0435.","1c283226":"# Model \n\u0421\u0430\u043c ML","aa4b83d5":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","227cba05":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","dda1c1bb":"## 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","1b756530":"\u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 33140 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043b\u044c\u0442 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0434\u0430\u0442\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.  \n\nUPD \u0418\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a, \u0441\u0443\u0434\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435.","8b637d3e":"### Restaurant_id\n#### \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0443\u044e **net**, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043b\u0438 \u043d\u0435\u0442.","71940d23":"\u0412\u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u0435\u0435-\u043c\u0435\u043d\u043d\u0435 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430.\n\u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0434\u0435, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u0433.\n16 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u043c\u0435\u043d\u044c\u0448\u0435 2500.  \n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u0432\u043b\u0435\u0432\u043e \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u043e\u0442 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0431\u0430\u043b\u043b\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.","dc54e6f1":"\u0412 \u043e\u0442\u0437\u044b\u0432\u0430\u0445 2 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u0442\u0438\u043f\u0430 nan, \u0445\u043e\u0442\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443 \u044d\u0442\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 2 \u0438 124.   \n\u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a (8112) \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \"[[],[]]\".  \n\u0427\u0442\u043e \u0442\u043e\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u043c.\n","5863f20a":"### Number of Reviews","0c96a517":"### URL_TA ","91ecb65d":"### City\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u043d\u0433\u043e\u0432\u0430\u044f, \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0430\u044f.","908c9cd2":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Price Range \u043c\u043e\u0434\u043e\u0439 \u043f\u043e \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432 \u0441\u0435\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438\u043b\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u0435\u0442\u044c - \u043c\u043e\u0434\u043e\u0439 \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n\nUPD \u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u041c\u0410\u0415, \u0447\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.","bff928eb":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Price Range \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","a7aa6805":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043a\u0430\u044f \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0430\u043b\u043b\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.  \n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438\u043b\u0438 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\n\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0434\u043e\u043b\u044e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430","3746239f":"\u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0432\u0441\u0435\u043c \u0431\u0435\u0437 \u0441\u0442\u0438\u043b\u044f \u043a\u0443\u0445\u043d\u0438, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 'cuisine_style' \u043c\u043e\u0434\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432 \u043d\u0435\u0439.","c2a00293":"\u0412 \u0446\u0435\u043b\u043e\u043c \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.  \n\n\n#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0430\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","5107d942":"### Number of Reviews \/ \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432","c258c107":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430.","926e9cb5":"### City - \u0433\u043e\u0440\u043e\u0434","d2dae70c":"# Data Preprocessing\n","011c6c91":"\u041e\u0442\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 nan, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0435\u0437 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043d\u043e \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432 (6089).  \n\u0413\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0434\u0435 \u043d\u0435\u0442 \u043d\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043d\u0438 \u0441\u0430\u043c\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 (2023).  \n\u0414\u0443\u043c\u0430\u044e \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0440\u0430\u043d\u0433\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e.  \n\n\u0413\u0434\u0435\n0 - \u0435\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b      \n1 - \u043d\u0435\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432   \n2 - \u043d\u0435\u0442 \u043d\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432, \u043d\u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\n\n\nUPD \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u041c\u0410\u0415, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u043e\u043a\u043e\u0435 \u0438 \u0437\u0430\u043a\u043e\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043d\u0438\u043c\u0438.","28851fb9":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 Price Range \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.","7b0151fa":"S  \u0434\u0435\u0448\u0451\u0432\u044b\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442  \nSS - SSS  \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442  \nSSSS \u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442  \n\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a).  \n\u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 1,2,3 ","ef83347a":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","3722d0f7":"\u041d\u0438\u0447\u0435\u0433\u043e \u0432\u043e\u0435\u043d\u043d\u043e\u0433\u043e. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0446\u0435\u043d \u0441\u043c\u0435\u0449\u0435\u043d\u043e \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043d\u0438\u0437\u043a\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0420\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0420\u0438\u043c\u0430 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u043e\u0433\u043e\u043c 4.5 \u0438 5 \u0431\u0430\u043b\u043b\u043e\u0432.  \n\u041d\u0443 \u0438 \u0432 \u0446\u0435\u043b\u043e\u043c \u043f\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0435, \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043d\u0438\u0437\u043a\u0438\u043c \u0446\u0435\u043d\u043e\u0432\u044b\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u0431\u0430\u043b\u043b\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.","56c67476":"### Cuisine Style \/ \u041a\u0443\u0445\u043d\u044f","d143ada0":"\u0417\u0430\u043c\u0435\u0442\u043d\u0430 \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u044f \u043d\u0430 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.   ","81b4f98f":"# functions\n","64f5c3db":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435. \u0418 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u0445\u0432\u043e\u0441\u0442\u0435 \u0435\u0433\u043e \u043a\u0443\u0447\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","380d5893":"### Ranking\n\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.","937a5e28":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","6929ee81":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","ced771ab":"\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0435\u0442\u044f\u043c\u0438, \u0434\u0443\u043c\u0430\u044e \u044d\u0442\u043e \u0441\u0442\u043e\u0438\u0442 \u0443\u0447\u0435\u0441\u0442\u044c.","c42e6294":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","bc2bb504":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking","b0004962":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u043e \u0432\u043b\u0435\u0432\u043e.  \n\u041c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u043d\u0433 \u043c\u0435\u043d\u044c\u0448\u0435 2500. \u0422.\u0435. \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432\u044b\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430.  \n\n\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0447\u0435\u043c \u043d\u0438\u0436\u0435 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0435\u0433\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433. \n\u041d\u043e \u044d\u0442\u043e \u043b\u0438\u0448\u044c \u043e\u0442\u0447\u0430\u0441\u0442\u0438 \u0442\u0430\u043a, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u044d\u0442\u0430 \u0441\u0432\u044f\u0437\u044c \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f, \u0434\u0430 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0432\u0441\u0435\u0433\u043e \u043b\u0438\u0448\u044c -0,11.  \n\u0425\u043e\u0442\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043b\u043e\u0433\u0438\u043a\u0435 \u0432\u0435\u0449\u0435\u0439, \u0434.\u0431. \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0430\u043d\u0433 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0441\u043e\u043a\u043e\u043c\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443.   \n\n\u0420\u0430\u0437\u0431\u0435\u0440\u0451\u043c\u0441\u044f \u0441 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u0440\u0435\u0447\u0438\u0435\u043c.  \n\u0418\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u0435\u0442: Ranking - __\u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435__.  \n\u0417\u043d\u0430\u0447\u0438\u0442, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u043d\u0433\u0438.  \n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c. ","8f4e9408":"## 4 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n","2f535e09":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u044e\u0442\u0441\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u043b\u0434\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445. \u041c.\u0431. \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.","1ddd69d3":"### Cuisine Style: \u041a\u0443\u0445\u043d\u044f","6dd64572":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \"['Bar', 'Pub']\", \u043d\u043e \u0432 \u043d\u0438\u0445 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432\u0438\u0434\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u0438.","8cf8dc7d":"# import","4dd92eba":"\n#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","95e49630":"\u0412 \u043e\u0431\u0449\u0435\u043c \u0438 \u0446\u0435\u043b\u043e\u043c \u0441 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u0440\u0435\u0447\u0438\u0435\u043c \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f, \u0435\u0433\u043e \u043d\u0435\u0442!  \n\u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u0435\u0449\u0435\u0439 \u043c\u0435\u043d\u044f \u043f\u043e\u0434\u0432\u0435\u043b\u0430. \u041f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432\u044b\u0432\u043e\u0434 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u0432\u0435\u0440\u043d\u044b\u043c.   \n\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0435\u043c \u043c\u0435\u043d\u044c\u043d\u0435 \u0440\u0430\u043d\u0433, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433. \u0418\u0437 \u043e\u0431\u0449\u0435\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u044b \u0432\u044b\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0420\u0438\u043c, \u0440\u0430\u043d\u0433\u0430\u043c\u0438 \u0434\u043b\u044f \u043f\u044f\u0442\u0438 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430, \u043d\u043e \u0434\u043b\u044f \u0420\u0438\u043c\u0430 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043d\u0435\u0442 \u0438 \u043e\u0442\u043a\u0440\u043e\u0432\u0435\u043d\u043d\u043e \u043d\u0438\u0437\u043a\u043e\u0440\u0435\u0439\u0442\u0435\u043d\u0433\u043e\u0432\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.   \n\u041d\u043e \u0432\u0441\u044f\u0437\u044c \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u043d\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f.\n\u041e\u0434\u043d\u0430\u043a\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0441\u0445\u043e\u0436\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u043d\u0433\u0430 \u043f\u043e \u0431\u0430\u043b\u043b\u0430\u043c \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430\u0445.\n\n\u041c\u0435\u0434\u0438\u0430\u043d\u0430 \u0434\u043b\u044f 5 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0432 \u041b\u043e\u043d\u0434\u043e\u043d\u0435 \u0432\u044b\u0448\u0435 8000 \u043f\u043e \u0440\u0430\u043d\u0433\u0443.  \n\u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0440\u0438 \u0433\u043e\u0440\u043e\u0434\u0430 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u043d\u0433 \u043f\u0435\u0440\u0435\u0432\u0430\u043b\u0438\u0432\u0430\u0435\u0442 \u0437\u0430 8000.  \n\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0440\u0430\u043d\u0433\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0435\u0441\u044f \u043a \u043d\u0438\u0437\u043a\u0438\u043c \u0431\u0430\u043b\u043b\u0430\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0441 \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0440\u0430\u043d\u0433\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0435\u0441\u044f \u043a \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0431\u0430\u043b\u043b\u0430\u043c \u0440\u0435\u0439\u0442\u0438\u0433\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\n\n\n\u0414\u0443\u043c\u0430\u044e \u0441\u0442\u043e\u0438\u0442 \u043e\u0442\u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0433\u043d\u0430 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438\u043b\u0438 \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432. ","8eb4a54f":"### Dummy","2095b778":"### \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0432 \u0434\u043d\u044f\u0445.\n\n\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0443 \u0442\u0440\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: \u0432\u0440\u0435\u043c\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430, \u0432\u0440\u0435\u043c\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u043a\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438.","11d47c46":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e 'mean_n_of_reviews_per_city' - \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.\n\n\u0412\u0441\u0451 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f `mean_per_city_fillna()`.\n\nUPD \u0417\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0434\u0430\u0451\u0442 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435, \u0447\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0430 0.","7f08a453":"# Predict TripAdvisor Rating\n\n### \u0417\u0430\u0434\u0430\u0447\u0430 \u2014 \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u0447\u0435\u0441\u0442\u043d\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u043a\u0440\u0443\u0447\u0438\u0432\u0430\u044e\u0442 \u0441\u0435\u0431\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433.\n\u041d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n","9cd2cfad":"### \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"number_of_reviews\".\n\n\u0427\u0438\u0441\u043b\u043e\u0432\u043e\u0439, \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.","0d4f3a50":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u043c\u0435\u0449\u0435\u043d\u043e \u0432\u043f\u0440\u0430\u0432\u043e.","433cf5a4":"\u041e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 2\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u043a\u0443\u0445\u043d\u044f \u0438 \u043e\u0442\u0437\u044b\u0432\u044b. ","5ce57f6e":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430. \u0411\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043a\u043e\u0433\u0434\u0430 \u044f \u044d\u0442\u043e\u043c\u0443 \u043d\u0430\u0443\u0447\u0443\u0441\u044c.","4f5274ad":"### \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\".","c1839012":"\u0415\u0441\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0441\u0435\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.","13439949":"### \u041e\u0442\u0437\u044b\u0432\u044b.\n\u0412\u044b\u0434\u0435\u043b\u0435\u0435\u043d\u0438\u0435 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","4f693de5":"### ID_TA","c41c81ee":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \n\n\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","1e52a45b":"### Price Range","38ac9ab7":"\u0412 \u043f\u0435\u0440\u0435\u0447\u043d\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430. ","eb0b712e":"\u041b\u044e\u0431\u043e\u043f\u044b\u0442\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439 ID. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0434\u0443\u0431\u043b\u0438.\n\u041d\u043e \u0442.\u043a. \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u043d\u0438 \u043d\u0435\u043b\u044c\u0437\u044f, \u0442\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u0441 \u044d\u0442\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435 \u0431\u0443\u0434\u0443.","6b57eea9":"### Restaurant_id"}}