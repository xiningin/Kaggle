{"cell_type":{"018e064d":"code","139f2e44":"code","79aad9fb":"code","ccee4da3":"code","87fc5796":"code","f3d2aebe":"code","ac9d8cb6":"code","4705baf8":"code","3221f4f4":"code","308a10ca":"code","4323be85":"code","da7ceba1":"markdown","ac0993f7":"markdown","5d945812":"markdown","10073597":"markdown"},"source":{"018e064d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go #plotly libraries for plotting figures\nimport plotly.express as px #plotly express\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","139f2e44":"#try first with LFB Incident data from January 2017 mini.xlsx which contains only 1000 rows\ndf = pd.read_excel('\/kaggle\/input\/londonfirebrigadeincidentsrecordsmini\/LFB Incident data from January 2017 mini.xlsx')","79aad9fb":"#running this cell with the entire dataset will take a long time because of the number of rows\n#df = pd.read_excel('\/kaggle\/input\/londonfirebrigadeincidentrecords\/LFB Incident data from January 2017.xlsx')","ccee4da3":"#this plots the first 5 rows, just to understand the columns in the dataset and have a quick overview of the data\ndf.head()","87fc5796":"#this plots a list of the name of the columns so that we can easily copy\/past their name for calling them in subsequent cells\ndf.columns","f3d2aebe":"#drop any nan values from dataframe df\n#how='any' means we are dropping the entire row if just one of the values is nan\n#refer to https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/10min.html for documentation\ndf=df.dropna(how='any')","ac9d8cb6":"#lets see what we get after we have dropped all nan values\n#describe gives us an idea of the dataset, including some stats\ndf.describe()","4705baf8":"#and now if we plot the first three rows head(3) = first 3 rows\ndf.head(3)","3221f4f4":"#note that the first column is not sequential, we can reindex usint pd.reset_index if needed \n#see documentation here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.reset_index.html?highlight=reset_index#pandas.DataFrame.reset_index\n#We can use the drop parameter (drop=True) to avoid the old index being added as a column\n#if you would like to keep the original indexes, then either do not run this cell or comment the following line\n#df.reset_index(drop=True)","308a10ca":"mapbox_access_token='pk.eyJ1IjoibWFyaWEtbWluZ2FsbG9uIiwiYSI6ImNrYzhxMHppMjFlNjUyeXFvaHBpODhjM20ifQ.gPWY1eHpfN23yVIi2qc7FA'","4323be85":"import plotly.express as px\n\npx.set_mapbox_access_token(mapbox_access_token)\n\nfig = px.scatter_mapbox(df, \n                        lat=df['Latitude'], \n                        lon=df['Longitude'],     \n                        color=df['IncidentStationGround'], \n                        size=df['Notional Cost (\u00a3)'],\n                        size_max=50,\n                        color_continuous_scale=px.colors.cyclical.IceFire,\n                        animation_frame=df['CalYear'],\n                        center= dict(lat=51.515419,lon=-0.141099),\n                        zoom=9,\n                        width=1080,\n                        height=900,\n                        title = \"London Fire Brigade Records\",\n                        mapbox_style=\"basic\")\nfig.show()","da7ceba1":"# Import libraries and set up main data paths","ac0993f7":"Reference: https:\/\/plotly.com\/python\/scattermapbox\/\n\nTo plot on Mapbox maps with Plotly you need a Mapbox account and a public Mapbox Access Token. Create an account here: https:\/\/mapbox.com\/ and obtain a Mapbox Access token. See below snapshot for where to find your token:\n\n![mapbox1.JPG](attachment:mapbox1.JPG)\n\nSee Mapbox Map Layers documentation for more information: https:\/\/docs.mapbox.com\/help\/how-mapbox-works\/access-tokens\/#how-access-tokens-work\n\nThe token should look something like: 'pk.eyJ1IjoibWFyaWEtbWluZ2FsbG9uIiwiYSI6ImNrYzhxMHppMjFlNjUyeXFvaHBpODhjM20ifQ.gPWY1eHpfN23yVIi2qc7FA'\n\nWe then provide this token as follows:\n\nmapbox_access_token = 'pk.eyJ1IjoibWFyaWEtbWluZ2FsbG9uIiwiYSI6ImNrYzhxMHppMjFlNjUyeXFvaHBpODhjM20ifQ.gPWY1eHpfN23yVIi2qc7FA'\n\nWe will use plotly.express as it is quick and easy. We will then read the token with: px.set_mapbox_access_token(mapbox_access_token)\n\nIf we are using the extended version of plotly then we will read it with: layout.mapbox.access_token(mapbox_access_token)\n\nFor more information, refer to : https:\/\/plotly.com\/python\/mapbox-layers\/","5d945812":"The following is a quick plot using plotly express. \nHave a look at the documentation to customize it here: \nhttps:\/\/plotly.github.io\/plotly.py-docs\/generated\/plotly.express.scatter_mapbox.html\n","10073597":"# Set up Scatter Mapbox"}}