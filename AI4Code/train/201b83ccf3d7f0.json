{"cell_type":{"8cfd6d92":"code","ba846d35":"code","15e32623":"code","42b4cd0c":"code","e8a45b3d":"code","cc28bdc2":"code","d2dcdfa5":"code","953f10c7":"code","a9488081":"code","b4d97821":"code","62304424":"code","15de6d24":"code","c79d456d":"code","769239f3":"code","a12318ea":"code","9f0fad32":"code","d5664218":"code","0c934ee4":"code","ec3a1c2c":"code","90fd8c36":"code","3464a8ff":"code","bd8215cc":"code","077d9e78":"code","68a25a43":"code","2b892727":"code","8023f707":"code","03d9b146":"code","966235de":"code","adb4436f":"code","792f49d2":"code","12f03178":"code","f4ac6cc8":"markdown","f29a4e44":"markdown","b139690b":"markdown","56be8622":"markdown","418fc480":"markdown","3c06fdcf":"markdown","8d9e84f0":"markdown","20bbaaee":"markdown","a749f16d":"markdown","89c9b790":"markdown","b8fd6167":"markdown","2eb43efb":"markdown","bf6f57a0":"markdown","6fd276e3":"markdown","60d84a00":"markdown","f5e010c1":"markdown","6e5da7e6":"markdown","4b1ecd95":"markdown","e666c399":"markdown","166d1489":"markdown","382924ec":"markdown","9a3ed388":"markdown","dc796d81":"markdown","21505efc":"markdown","7e390061":"markdown","6bb25dd2":"markdown"},"source":{"8cfd6d92":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.head()","ba846d35":"!pip install pycaret","15e32623":"from pycaret.regression import *\nreg1 = setup(train, target = 'SalePrice', session_id = 123, silent = True) #silent is set to True for unattended run during kernel execution","42b4cd0c":"compare_models(blacklist = ['tr']) #blacklisted Thielsen Regressor due to longer training times","e8a45b3d":"catboost = create_model('catboost', verbose = False) #verbose set to False to avoid printing score grid\ngbr = create_model('gbr', verbose = False)\nxgboost = create_model('xgboost', verbose = False)","cc28bdc2":"blend_top_3 = blend_models(estimator_list = [catboost, gbr, xgboost])","d2dcdfa5":"stack1 = stack_models(estimator_list = [gbr, xgboost], meta_model = catboost, restack = True)","953f10c7":"from pycaret.regression import *\nreg1 = setup(train, target = 'SalePrice', session_id = 123, \n             normalize = True, normalize_method = 'zscore',\n             transformation = True, transformation_method = 'yeo-johnson', transform_target = True,\n             ignore_low_variance = True, combine_rare_levels = True,\n             numeric_features=['OverallQual', 'OverallCond', 'BsmtFullBath', 'BsmtHalfBath', \n                               'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n                               'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'PoolArea'],\n             silent = True #silent is set to True for unattended run during kernel execution\n             )","a9488081":"compare_models(blacklist = ['tr']) #blacklisted Thielsen Regressor due to longer training times","b4d97821":"gbr = create_model('gbr', verbose = False)\ncatboost = create_model('catboost', verbose = False)\nsvm = create_model('svm', verbose = False)\nlightgbm = create_model('lightgbm', verbose = False)\nxgboost = create_model('xgboost', verbose = False)","62304424":"blend_top_5 = blend_models(estimator_list = [gbr,catboost,svm,lightgbm,xgboost])","15de6d24":"stack2 = stack_models(estimator_list = [gbr,catboost,lightgbm,xgboost], meta_model = svm, restack = True)","c79d456d":"from pycaret.regression import *\nreg1 = setup(train, target = 'SalePrice', session_id = 123, \n             normalize = True, normalize_method = 'zscore',\n             transformation = True, transformation_method = 'yeo-johnson', transform_target = True,\n             numeric_features=['OverallQual', 'OverallCond', 'BsmtFullBath', 'BsmtHalfBath', \n                               'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', \n                               'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'PoolArea'],\n             ordinal_features= {'ExterQual': ['Fa', 'TA', 'Gd', 'Ex'],\n                                'ExterCond' : ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                                'BsmtQual' : ['Fa', 'TA', 'Gd', 'Ex'], \n                                'BsmtCond' : ['Po', 'Fa', 'TA', 'Gd'],\n                                'BsmtExposure' : ['No', 'Mn', 'Av', 'Gd'],\n                                'HeatingQC' : ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                                'KitchenQual' : ['Fa', 'TA', 'Gd', 'Ex'],\n                                'FireplaceQu' : ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                                'GarageQual' : ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                                'GarageCond' : ['Po', 'Fa', 'TA', 'Gd', 'Ex'],\n                                'PoolQC' : ['Fa', 'Gd', 'Ex']},\n             polynomial_features = True, trigonometry_features = True, remove_outliers = True, outliers_threshold = 0.01,\n             silent = True #silent is set to True for unattended run during kernel execution\n             )","769239f3":"compare_models(blacklist = ['tr']) #blacklisted Thielsen Regressor due to longer training times","a12318ea":"huber = tune_model('huber', n_iter = 100)","9f0fad32":"omp = tune_model('omp', n_iter = 100)","d5664218":"ridge = tune_model('ridge', n_iter = 100)","0c934ee4":"br = tune_model('br', n_iter = 100)","ec3a1c2c":"lightgbm = tune_model('lightgbm', n_iter = 50)","90fd8c36":"par = tune_model('par', n_iter = 100)","3464a8ff":"blend_all = blend_models(estimator_list = [huber, omp, ridge, br])","bd8215cc":"plot_model(br, plot = 'residuals')","077d9e78":"plot_model(br, plot = 'error')","68a25a43":"plot_model(br, plot = 'vc')","2b892727":"plot_model(br, plot = 'feature')","8023f707":"interpret_model(lightgbm)","03d9b146":"interpret_model(lightgbm, plot = 'correlation', feature = 'TotalBsmtSF')","966235de":"interpret_model(lightgbm, plot = 'reason', observation = 0)","adb4436f":"# check predictions on hold-out\npredict_model(blend_all);","792f49d2":"final_blender = finalize_model(blend_all)\nprint(final_blender)","12f03178":"predictions = predict_model(final_blender, data = test)\npredictions.head()","f4ac6cc8":"# 5. Iteration 3: Setup with Advance Preprocessing","f29a4e44":"## 5.5 Interpret LightGBM Model","b139690b":"## 5.3 Blend Models","56be8622":"- No improvement from stacking. Best model still Catboost Regressor with default hyperparameters with RMSLE `0.1313`.","418fc480":"# 1. Import Dataset","3c06fdcf":"# 4. Iteration 2: Setup with Preprocessing","8d9e84f0":"## 4.2 Create and Store Models in Variable","20bbaaee":"## 5.1 Compare Models","a749f16d":"## END OF NOTEBOOK - THANK YOU.","89c9b790":"- No significant improvement after blending. Best individual model is Catboost with `0.1313` RMSLE. Blender RMSLE is `0.1364`.","b8fd6167":"## 4.3 Blend Models","2eb43efb":"# 2. Install PyCaret","bf6f57a0":"## 5.2 Tune Models","6fd276e3":"- Blending top models has slightly improved RMSLE from `0.1275` to `0.1265`.","60d84a00":"## 3.3 Blend Models","f5e010c1":"## 4.1 Compare Models","6e5da7e6":"# 6. Finalize Blender and Predict test dataset","4b1ecd95":"## 3.1 Compare Models","e666c399":"- Catboost Regressor RMSLE slightly improved from `0.1313` to `0.1275` ","166d1489":"## 5.4 Evaluate Bayesian Ridge Model","382924ec":"- No improvement after stacking.","9a3ed388":"# 3. Iteration 1: Setup without Preprocessing","dc796d81":"## 3.2 Create and Store Models in Variable","21505efc":"## 4.4 Stack Models","7e390061":"## 3.4 Stack Models","6bb25dd2":"- RMSLE on hold-out is `0.1061` vs. 10 fold CV is `0.1180`."}}