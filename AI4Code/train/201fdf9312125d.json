{"cell_type":{"d0506dc9":"code","37e7f962":"code","f20a6f43":"code","f36f658f":"code","819bd7a9":"code","15d44b04":"code","8a376abe":"code","03f04bf2":"code","4273dcf5":"code","15ad473b":"code","b0e2b5d3":"code","f0723c22":"code","e7feb8de":"code","b9dc2f5e":"code","518ecbe8":"code","b6861939":"markdown","701ab241":"markdown"},"source":{"d0506dc9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport plotly.express as px\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\", index_col = 'Id')\ntest_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\", index_col = 'ForecastId')\npd.set_option('display.max_columns', 200)\npd.set_option('display.max_rows', 200)\n\n\ntrain_df.rename(columns={\"Country_Region\": \"country\", \"Province_State\": \"province\"}, inplace=True, errors=\"raise\")\ndf = train_df.fillna('NA').groupby(['country','province','Date'])['ConfirmedCases'].sum() \\\n                          .groupby(['country','province']).max().sort_values() \\\n                          .groupby(['country']).sum().sort_values(ascending = False)\n\ntop10 = pd.DataFrame(df).head(10)\nfig = px.bar(top10, x=top10.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Brwnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","37e7f962":"df_by_date = pd.DataFrame(train_df.fillna('NA').groupby(['country','Date'])['ConfirmedCases'].sum().sort_values().reset_index())\n\nfig = px.bar(df_by_date.loc[(df_by_date['country'] == 'Canada') &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Canada')\nfig.show()","f20a6f43":"fig = px.bar(df_by_date.loc[(df_by_date.country == 'Russia') &(df_by_date.Date >= '2020-03-01')].sort_values(['Date','ConfirmedCases'],ascending = False),\n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Blues)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Russia')\nfig.show()","f36f658f":"fig = px.bar(df_by_date.loc[(df_by_date['country'] == 'US') &(df_by_date.Date >= '2020-03-02')].sort_values('ConfirmedCases',ascending = False), x='Date', \n             y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Brwnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in US')\nfig.show()","819bd7a9":"fig = px.bar(df_by_date.loc[(df_by_date['country'] == 'Italy' ) &(df_by_date.Date >= '2020-03-02')].sort_values('ConfirmedCases',ascending = False), x='Date', y='ConfirmedCases',\n            color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Mint)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in Italy')\nfig.show()","15d44b04":"fig = px.bar(df_by_date.loc[df_by_date['country'] == 'China'].sort_values('ConfirmedCases',ascending = False), x='Date', y='ConfirmedCases',\n            color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Purples)\nfig.update_layout(title_text='Confirmed COVID-19 cases per day in China')\nfig.show()","8a376abe":"df = train_df.fillna('NA').groupby(['country','province','Date'])['ConfirmedCases','Fatalities'].sum() \\\n                          .groupby(['country','province']).max().sort_values(by='ConfirmedCases') \\\n                          .groupby(['country']).sum().sort_values(by='ConfirmedCases',ascending = False)\n\ndf = pd.DataFrame(df).reset_index()\n\n\ndf = pd.DataFrame(df)\n\ndf_new_cases = pd.DataFrame(train_df.fillna('NA').groupby(['country','Date'])['ConfirmedCases'].sum() \\\n                            .reset_index()).sort_values(['country','Date'])\ndf_new_cases.ConfirmedCases = df_new_cases.ConfirmedCases.diff().fillna(0)\ndf_new_cases = df_new_cases.loc[df_new_cases['Date'] == max(df_new_cases['Date']),['country','ConfirmedCases']]\ndf_new_cases.rename(columns={\"ConfirmedCases\": \"NewCases\"}, inplace=True, errors=\"raise\")\n\ndf_new_deaths = pd.DataFrame(train_df.fillna('NA').groupby(['country','Date'])['Fatalities'].sum() \\\n                            .reset_index()).sort_values(['country','Date'])\n\ndf_new_deaths.Fatalities = df_new_deaths.Fatalities.diff().fillna(0)\ndf_new_deaths = df_new_deaths.loc[df_new_deaths['Date'] == max(df_new_deaths['Date']),['country','Fatalities']]\n\ndf_new_deaths.rename(columns={\"Fatalities\": \"NewFatalities\"}, inplace=True, errors=\"raise\")\n\nmerged = df.merge(df_new_cases, left_on='country', right_on='country')\\\n            .merge(df_new_deaths, left_on='country', right_on='country')\n\n\nmerged.style.background_gradient(cmap=\"Blues\", subset=['ConfirmedCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['Fatalities'])\\\n            .background_gradient(cmap=\"Blues\", subset=['NewCases'])\\\n            .background_gradient(cmap=\"Reds\", subset=['NewFatalities'])","03f04bf2":"df_by_date.ConfirmedCases = df_by_date.ConfirmedCases.diff().fillna(0)\ndf_by_date.index = pd.to_datetime(df_by_date.Date)","4273dcf5":"# install calmap\n! pip install calmap","15ad473b":"import matplotlib.pyplot as plt\nimport calmap","b0e2b5d3":"fig = plt.figure(figsize=(20, 3));\nax = fig.add_subplot(111)\ncax = calmap.yearplot(df_by_date.ConfirmedCases, fillcolor='white', cmap='Blues', linewidth=0.5)\nfig.colorbar(cax.get_children()[1], ax=cax, orientation='horizontal')\nplt.title('Number of new confirmed cases per day worldwide');","f0723c22":"ft_by_date = train_df.fillna('NA').groupby(['country','Date'])['Fatalities'].sum().sort_values().reset_index() \\\n                          .groupby(['Date'])['Fatalities'].sum().sort_values()\n\nft_by_date.index = pd.to_datetime(ft_by_date.index)\nft_by_date = ft_by_date.diff().fillna(0)","e7feb8de":"fig = plt.figure(figsize=(20,3))\n\nax = fig.add_subplot(111)\ncax = calmap.yearplot(ft_by_date, fillcolor='white', cmap='Reds', linewidth=0.5)\nfig.colorbar(cax.get_children()[1], ax=cax, orientation='horizontal')\nplt.title('Number of deaths per day worldwide');","b9dc2f5e":"# Remove columns we do not need\ncols = ['Fatalities']\ntimes_series_cntr = train_df.drop(cols, axis=1).fillna('N\/A')\n\n# Aggregate cases by date and country\ntimes_series_cntr = times_series_cntr.groupby(['Date','province','country'])['ConfirmedCases'].max()\\\n                    .groupby(['Date','country']).sum()\\\n                    .reset_index()\n\n# Indexing with Time Series Data\ntimes_series_cntr = times_series_cntr.set_index('Date')","518ecbe8":"import seaborn as sns\nfrom matplotlib import rcParams, pyplot as plt, style as style\n\nstyle.use('ggplot')\nrcParams['figure.figsize'] = 15,10\ncountry_province = train_df.fillna('N\/A').groupby(['country','province'])['ConfirmedCases', 'Fatalities'].max().sort_values(by='ConfirmedCases', ascending=False)\n\ncountries = country_province.groupby('country')['ConfirmedCases','Fatalities'].sum().sort_values(by= 'ConfirmedCases',ascending=False)\n\ncountries['country'] = countries.index\n\n# Unpivot the dataframe from wide to long format\ndf_long = pd.melt(countries, id_vars=['country'] , value_vars=['ConfirmedCases','Fatalities'])\n\n#Top countries by confirmed cases\ntop_countries = countries.index[:10]\n\ntop_countries_tm = times_series_cntr[times_series_cntr['country'].isin(top_countries)]\nplt.xticks(rotation=45)\n\n\nax = sns.lineplot(x=top_countries_tm.index, y=\"ConfirmedCases\", hue=\"country\", data=top_countries_tm).set_title('Cumulative line')\nplt.legend(loc=2, prop={'size': 12});","b6861939":"## Visualizations using PlotLy\n\n### Please upvote if you like this notebook.\n\n#### I would also appreciate any suggestions you might have.","701ab241":"Confirmed Cases vs Deaths by Country"}}