{"cell_type":{"64998ee3":"code","06e3de75":"code","22cd949a":"code","302c44bb":"code","f1d4a5a6":"code","21c68e03":"code","acf8ca8d":"code","f2048024":"code","ff7af1c5":"code","4708afb6":"code","0d0e9d31":"markdown","bd4e65f7":"markdown"},"source":{"64998ee3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n# apply ignore\nimport warnings\nwarnings.filterwarnings('ignore')","06e3de75":"#load data\ntrain_data = pd.read_csv('..\/input\/learn-together\/train.csv')\ntrain_data.head()","22cd949a":"#load data\ntest_data = pd.read_csv('..\/input\/learn-together\/test.csv')\ntest_data.head()","302c44bb":"# check missing values\nprint('train_data missing values = {}'.format(train_data.isnull().values.any()))\nprint('test_data missing values  = {}'.format(test_data.isnull().values.any()))","f1d4a5a6":"# No missing values, separate target from predictors\ny = train_data.Cover_Type              \ntrain_data.drop(['Cover_Type'], axis=1, inplace=True)\n\n# Select numeric columns only\nnumeric_cols = [cname for cname in train_data.columns if train_data[cname].dtype in ['int64', 'float64']]\nX = train_data[numeric_cols].copy()\nX_test = test_data[numeric_cols].copy()","21c68e03":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\n\nmodel = RandomForestRegressor(n_estimators=50,random_state=70,max_depth=120)\nmy_pipeline = Pipeline(steps=[('model', model)])","acf8ca8d":"from sklearn.model_selection import cross_val_score\n\n# Multiply by -1 since sklearn calculates *negative* MAE\nscores = -1 * cross_val_score(my_pipeline, X, y,\n                              cv=5,\n                              scoring='neg_mean_absolute_error')\n\nprint(\"MAE scores:\\n\", scores)","f2048024":"def get_score(n_estimators):\n    \"\"\"Return the average MAE over 3 CV folds of random forest model.\n    \n    Keyword argument:\n    n_estimators -- the number of trees in the forest\n    \"\"\"\n\n    print(n_estimators)\n    \n    # Multiply by -1 since sklearn calculates *negative* MAE\n    model = RandomForestRegressor(n_estimators=n_estimators,random_state=70,max_depth=120)\n    x_pipeline = Pipeline(steps=[\n        ('model', model)\n    ])\n    \n    # n_jobs if set to -1, all CPUs are used.\n    scores = -1 * cross_val_score(x_pipeline, X, y,\n                              cv=3, n_jobs=-1,\n                              scoring='neg_mean_absolute_error')\n\n    return scores.mean()","ff7af1c5":"results = {50*i: get_score(50*i) for i in range(1, 20)} ","4708afb6":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot(results.keys(), results.values())\nplt.show()","0d0e9d31":"**Make Predictions**<br\/>\nRead the file of \"test\" data. And apply model to make predictions","bd4e65f7":"As dataset is small, **cross-validation** gives a more accurate measure of model quality"}}