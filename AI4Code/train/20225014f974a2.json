{"cell_type":{"53d0d45a":"code","5f1ffc4e":"code","abbb54c3":"code","64aacbf2":"code","76be9b72":"code","af4de9b6":"code","7c85d96f":"code","254a8b3a":"code","a69a480f":"code","9da33f9b":"code","75c11f20":"code","759f7bf0":"code","6408266c":"code","884f43ec":"code","a58f9e55":"code","c1fb853b":"code","54c9e946":"code","84e8f0a9":"code","debd6045":"code","6f6eb6a6":"code","12947dac":"code","652a0306":"code","4ec6af1b":"code","a1447587":"code","99c02308":"code","bb1352a3":"code","b15c6752":"code","c4f46e44":"code","72bd73fa":"code","f25d4149":"code","02e5e903":"code","31cb996c":"code","a52bf4a5":"code","5fbfb2ec":"code","45112d80":"code","a6992404":"code","c7fd7b34":"code","114dd5ae":"code","00c8fdc0":"markdown","1c7567d4":"markdown","04ac5d80":"markdown","aac6ec25":"markdown","21284d55":"markdown","6b9a4486":"markdown"},"source":{"53d0d45a":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import colors as mcolors \nimport math \nimport rasterio\nfrom rasterio.plot import show\nfrom rasterio.mask import mask\nimport shapely\nimport geopandas as gpd\nimport fiona","5f1ffc4e":"def scale(array):\n    arr_min = array.min(axis=(0, 1))\n    arr_max = array.max(axis=(0, 1))\n    return (array - arr_min) \/ (arr_max - arr_min)","abbb54c3":"dataset = rasterio.open('..\/input\/mi3380-project1-hust\/img.tif')\npolygons = gpd.read_file('..\/input\/mi3380-project1-hust\/shp\/paddy_bg.shp')","64aacbf2":"print(\"Dataset's crs \", dataset.crs)\nprint(\"Polygons's crs \", polygons.crs)","76be9b72":"rgb = dataset.read()\nrgb.shape","af4de9b6":"band = []\nfor i in range (4):\n    band.append(dataset.read(i+1))\nband = np.asarray(band)","7c85d96f":"fig, ax = plt.subplots(1, 4, figsize=(13, 13))\nax[0].imshow(band[0])\nax[0].set_title('Band 1')\nax[1].imshow(band[1])\nax[1].set_title('Band 2')\nax[2].imshow(band[2])\nax[2].set_title('Band 3')\nax[3].imshow(band[3])\nax[3].set_title('Band 4 (Near Infrared)')","254a8b3a":"polygons","a69a480f":"poly_background = polygons.iloc[:6, :]\npoly_paddy = polygons.iloc[6:, :]","9da33f9b":"shapes_paddy = []\ngeo = poly_paddy.values[:, 2]\nfor i in range(len(poly_paddy)):\n    shapes_paddy.append(geo[i])\nshapes_background = []\ngeo = poly_background.values[:, 2]\nfor i in range(len(poly_background)):\n    shapes_background.append(geo[i])  ","75c11f20":"shapes_paddy","759f7bf0":"masks_paddy = rasterio.mask.raster_geometry_mask(dataset, shapes_paddy)[0].astype(np.int8)\nmasks_background = rasterio.mask.raster_geometry_mask(dataset, shapes_background)[0].astype(np.int8)","6408266c":"fig, ax = plt.subplots(1, 2, figsize=(10, 10))\nax[0].imshow(masks_paddy, cmap = 'gray')\nax[0].set_title('Paddy')\nax[1].imshow(masks_background, cmap = 'gray')\nax[1].set_title('Background')","884f43ec":"pixels_paddy = []\npixels_background = []\nfor i in range (len(masks_paddy)):\n  for j in range (len(masks_paddy[0])):\n    if (masks_paddy[i, j] == 0):\n      pixels_paddy.append([i, j])\n    if (masks_background[i, j] == 0):\n      pixels_background.append([i, j])","a58f9e55":"samples_paddy = []\nsamples_background = []\n\nfor i in range (len(pixels_paddy)): \n  pixels = np.zeros(4) \n  for j in range (4):\n    pixels[j] = dataset.read(j + 1)[pixels_paddy[i][0], pixels_paddy[i][1]]\n  samples_paddy.append(pixels)\n\nfor i in range (len(pixels_background)): \n  pixels = np.zeros(4) \n  for j in range (4):\n    pixels[j] = dataset.read(j + 1)[pixels_background[i][0], pixels_background[i][1]]\n  samples_background.append(pixels)\n\nsamples_paddy = np.asarray(samples_paddy)\nsamples_background = np.asarray(samples_background)","c1fb853b":"print('Shape of samples_paddy: ', samples_paddy.shape)\nprint('Shape of samples_background: ', samples_background.shape)","54c9e946":"df_paddy = pd.DataFrame({ 'Band 1' : samples_paddy[:,0],\n                    'Band 2' : samples_paddy[:,1],\n                    'Band 3' : samples_paddy[:,2],\n                    'Band 4' : samples_paddy[:,3],\n                    'Label' : 'paddy'})\ndf_background = pd.DataFrame({ 'Band 1' : samples_background[:,0],\n                    'Band 2' : samples_background[:,1],\n                    'Band 3' : samples_background[:,2],\n                    'Band 4' : samples_background[:,3],\n                    'Label' : 'background'})","84e8f0a9":"print(\"Paddy Dataframe\")\nprint(df_paddy.head())\nprint(\"Shape: \", df_paddy.shape)\nprint(\"----------------------------------------------\")\nprint(\"Background Dataframe\")\nprint(df_background.head())\nprint(\"Shape: \", df_background.shape)","debd6045":"def scale(array):\n    arr_min = array.min(axis=(0, 1))\n    arr_max = array.max(axis=(0, 1))\n    return (array - arr_min) \/ (arr_max - arr_min)","6f6eb6a6":"frames = [df_paddy, df_background]\ndf = pd.concat(frames)","12947dac":"df = pd.get_dummies(df, columns=['Label'])","652a0306":"df.head()","4ec6af1b":"X = df.values[:, 0:4].astype(float)\ny = df.values[:, 4:6].astype(float)\nX = scale(X)","a1447587":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test=train_test_split(X, y, test_size=0.25, random_state=42)","99c02308":"from keras.models import Sequential \nfrom keras.layers import Dense \nfrom keras.optimizers import Adam \nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau","bb1352a3":"def create_network():\n    model = Sequential()\n    model.add(Dense(32, input_shape=(4,), activation='relu'))\n    model.add(Dense(16, activation='relu'))\n    model.add(Dense(2, activation='softmax'))\n        \n    return model","b15c6752":"earlyStopping = EarlyStopping(patience=10, verbose=0)\nmcp_save = ModelCheckpoint('model.h5', verbose=0, save_best_only=True, save_weights_only=True)\nreduce_lr_loss = ReduceLROnPlateau(factor=0.1, patience=5, min_lr=0.000001, verbose=0)\ncallbacks = [earlyStopping, mcp_save, reduce_lr_loss]","c4f46e44":"model = create_network()\nmodel.compile(loss='binary_crossentropy', optimizer=Adam(), metrics=['accuracy'])","72bd73fa":"results = model.fit(X_train,Y_train, epochs=50, batch_size=32, callbacks = callbacks, validation_data=(X_test, Y_test), verbose = 0)","f25d4149":"plt.figure(figsize=(8, 8))\nplt.title(\"Learning curve\")\nplt.plot(results.history[\"loss\"], label=\"loss\")\nplt.plot(results.history[\"val_loss\"], label=\"val_loss\")\nplt.plot( np.argmin(results.history[\"val_loss\"]), np.min(results.history[\"val_loss\"]), marker=\"x\", color=\"r\", label=\"best model\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"log_loss\")\nplt.legend();","02e5e903":"model.evaluate(X_test, Y_test, verbose=1)","31cb996c":"dataset = rasterio.open('..\/input\/mi3380-project1-hust\/img.tif')","a52bf4a5":"rgb = np.transpose(dataset.read(), (1, 2, 0))\nrgb.shape","5fbfb2ec":"band1 = np.reshape(dataset.read(1), -1)\nband2 = np.reshape(dataset.read(2), -1)\nband3 = np.reshape(dataset.read(3), -1)\nband4 = np.reshape(dataset.read(4), -1)","45112d80":"fully_df = pd.DataFrame({'Band 1': band1,\n                    'Band 2' : band2,\n                    'Band 3' : band3,\n                    'Band 4' : band4})\nObservation = scale(fully_df.values)","a6992404":"def model_predict(X):\n    result = model.predict(X)\n    for i in range (len(X)):\n        if (result[i, 1] >= 0.6):\n            print(X[i, :], ' is paddy')\n        if (result[i, 1] < 0.6 and result[i, 1] > 0.5):\n            print(X[i, :], '  may be paddy')\n        else:\n            print(X[i, :], ' is background')","c7fd7b34":"model_predict(Observation[80:100, :])","114dd5ae":"def predict(pixel):\n    X = np.zeros((1, 4))\n    for i in range (4):\n        X[0, i] = dataset.read(i+1)[pixel[0], pixel[1]]\n    result = model.predict(X)\n    if (result[0, 1] >= 0.7):\n        print(pixel, ' is paddy')\n    if (result[0, 1] < 0.7 and result[0, 1] > 0.5):\n        print(pixel, '  may be paddy')\n    else:\n        print(\"pixel (\",pixel[0],\", \", pixel[1],\") is background\")","00c8fdc0":"# Artificial Neural Network - ANN","1c7567d4":"# Visualize and preprocessing data","04ac5d80":"Check their're coordinates","aac6ec25":"# Peredict pixel is paddy or background","21284d55":"![image.png](attachment:image.png)","6b9a4486":"scale array to reduce gradient exploding"}}