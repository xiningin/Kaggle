{"cell_type":{"3feecb77":"code","0546bcdc":"code","b01c50a2":"code","e66f477c":"code","4887bd24":"code","ba57d890":"code","c79526d3":"code","a5692754":"code","4aa6c1af":"code","b03119e3":"code","4ca1ec24":"code","71e44a74":"markdown","49492585":"markdown","6345f1c9":"markdown","19943078":"markdown","e7104bd4":"markdown","4488cbd2":"markdown","6e68c58c":"markdown","78513ecc":"markdown"},"source":{"3feecb77":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import StratifiedKFold\nimport xgboost as xgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV\nimport lightgbm as lgb\nfrom sklearn.model_selection import cross_val_score,KFold\n","0546bcdc":"train = pd.read_csv(\"..\/input\/ntt-data-global-ai-challenge-06-2020\/COVID-19_train.csv\")\ntest = pd.read_csv('..\/input\/ntt-data-global-ai-challenge-06-2020\/COVID-19_test.csv')\ntrain_num = train.shape[0]\ndata = pd.concat([train,test])\n\ndef dummy_date(df):\n    df[\"year\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[0])\n    df[\"month\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[1])\n    df[\"day\"] = df[\"Date\"].apply(lambda x: x.split(\"-\")[2])\n    #df.drop(\"Date\",inplace=True,axis=1)\n    return df\n\ndef LabelEncord_categorical(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        le = LabelEncoder()\n        df[params] = le.fit_transform(df[params])\n    return df\n\ndef dummies(df):\n    categorical_params = [\"year\",\"month\",\"day\"]\n    for params in categorical_params:\n        dummies =  pd.get_dummies(df[params])\n        df = pd.concat([df, dummies],axis=1)\n    return df\n\ndef pre_processing(df):\n    df = dummy_date(df)\n    df = LabelEncord_categorical(df)\n    df = dummies(df)\n    return df\n\ndata = pre_processing(data)\n\ntrain = data[:train_num]\ntest = data[train_num:]","b01c50a2":"y_train = train[\"Price\"].values\nX_train = train.drop([\"Price\",\"Date\"],axis=1).values\ny_test = test[\"Price\"].values\nX_test =test.drop([\"Price\",\"Date\"],axis=1).values\n","e66f477c":"from sklearn.model_selection import train_test_split\n# train_df, val_df = train_test_split(train_df, test_size=.10, random_state=1)","4887bd24":"grid_param ={'n_estimators': [100],'max_depth':[-1, 2,3,4,5, ],'num_leaves':[3, 7, 15, 31],'learning_rate':[0.1,0.05,0.01]}\n\nfit_params={'early_stopping_rounds':10, \n            'eval_metric' : 'rmse', \n            'eval_set' : [(X_train, y_train)]\n           }","ba57d890":"from sklearn.model_selection import GridSearchCV\n\nbst = lgb.LGBMRegressor(\n                        num_leaves = 31,\n                        learning_rate=0.01,\n                        min_child_samples=10,\n                        n_estimators=1000,\n                        max_depth=-1,\n                        )\n\n\nbst_gs_cv = GridSearchCV(\n            bst, # \u8b58\u5225\u5668\n            grid_param, # \u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8 \n            verbose = 1\n            )\n\nbst_gs_cv.fit(\n            X_train, \n            y_train,\n            **fit_params,\n            verbose = 0\n            )\n\nbest_param = bst_gs_cv.best_params_\nprint('Best parameter: {}'.format(best_param))","c79526d3":"bgt = lgb.LGBMRegressor(**bst_gs_cv.best_params_)\nbgt.fit(X_train,y_train)","a5692754":"predictions = bgt.predict(X_test)\npredictions","4aa6c1af":"bgt.score(X_train,y_train)","b03119e3":"submission = pd.DataFrame({ 'DATE': test['Date'],\n                            'PRICE': predictions })\nsubmission.head()","4ca1ec24":"submission.to_csv('submission.csv', index=False)","71e44a74":"Evaluate score","49492585":"Make X and y for train and test data","6345f1c9":"Define some method for pre processing.\ndummy_date: Spliting \"Date\" features into \"year\",\"month\",\"day\" as categorical features\nLabelEncord_categorical: Label Encording for \"year\",\"month\",\"day\" features\ndummies: Tried to get dummies for \"year\",\"month\",\"day\" features","19943078":"Creating Submission file","e7104bd4":"Predict","4488cbd2":"Use GridSearch for searching best hyperparameter\nModel: XGBRegressor","6e68c58c":"Train data using XGBRegressor with best parameter","78513ecc":"Import Libraries and data"}}