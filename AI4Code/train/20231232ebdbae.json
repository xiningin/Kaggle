{"cell_type":{"682e9c90":"code","9817c621":"code","c32523b9":"code","53c630f0":"code","3266e831":"code","7553b78e":"code","4a73efb7":"code","e3ac8916":"code","f309a40b":"code","203b8436":"code","a825150f":"code","77dcebf0":"code","bdf0b9c1":"code","444f81ab":"code","b6b49243":"code","ece6b56f":"code","7ef2c960":"code","aa97a20e":"code","4aed322b":"code","d9241315":"code","ecf2c338":"code","2097e5e0":"code","f5286b1d":"code","b31cf6e4":"code","f0d7e694":"code","6eac3d3b":"code","0450cb02":"code","396dc8a9":"code","cd69578a":"code","523c36f1":"code","ebd9f330":"code","3ddb08d9":"markdown","d6ab37e7":"markdown","5b4296ac":"markdown","80fcc613":"markdown","5db9ae6c":"markdown","fad84c9c":"markdown","a8ae09ad":"markdown","d7a0b69c":"markdown","cc43cab1":"markdown","deca330c":"markdown","7c04bf3f":"markdown","80068bb1":"markdown"},"source":{"682e9c90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9817c621":"train_df = pd.read_csv (\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv (\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","c32523b9":"train_df.columns","53c630f0":"train_df.head()","3266e831":"train_df.describe()","7553b78e":"train_df.info()","4a73efb7":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    \n    output: bar plot + value count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count categorical variable\n    varValue = var.value_counts()\n    \n    #visualise\n    plt.figure(figsize = (5,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequncy\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} \/n {}\".format(variable, varValue))","e3ac8916":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor i in category1:\n    bar_plot(i)","f309a40b":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))","203b8436":"def plot_hist(variable):\n    plt.figure(figsize= (9,3))\n    plt.hist(train_df[variable], bins=80)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show","a825150f":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor c in numericVar:\n    plot_hist(c)","77dcebf0":"# Pclass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","bdf0b9c1":"# Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","444f81ab":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","b6b49243":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index= False).mean().sort_values(by=\"Survived\", ascending=False)","ece6b56f":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for i in features:\n        \n        # 1st Quartile\n        Q1 = np.percentile(df[i],25)\n        \n        # 3rd Quartile\n        Q3 = np.percentile(df[i],75)\n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier step\n        outlier_step = IQR * 1.5\n        \n        # detect outlier and  theri indeces\n        outlier_list_col = df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step )].index \n    \n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter (outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n       \n    return multiple_outliers","7ef2c960":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","aa97a20e":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop=True)","4aed322b":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis=0).reset_index(drop=True)","d9241315":"train_df.head()","ecf2c338":"train_df.columns[train_df.isnull().any()]","2097e5e0":"train_df.isnull().sum()","f5286b1d":"train_df[train_df[\"Embarked\"].isnull()]","b31cf6e4":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","f0d7e694":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","6eac3d3b":"train_df[train_df[\"Embarked\"].isnull()]","0450cb02":"train_df[train_df[\"Fare\"].isnull()]","396dc8a9":"train_df[train_df[\"Pclass\"] == 3]","cd69578a":"np.mean(train_df[train_df[\"Pclass\"] == 3] [\"Fare\"])","523c36f1":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3] [\"Fare\"]))","ebd9f330":"train_df[train_df[\"Fare\"].isnull()]","3ddb08d9":"<a ID = \"7\"><\/a><br>\n# Outlier Detection","d6ab37e7":"<a ID = \"8\"><\/a><br>\n# Missing Values","5b4296ac":"<a ID = \"1\"><\/a><br>\n## 1. Load and Check Data","80fcc613":"<a ID = \"10\"><\/a><br>\n## Filling Missing Values\n* \"Embarked\" has 2 missing values\n* \"Fare\" has \" missing value","5db9ae6c":"<a ID = \"2\"><\/a><br>\n# 2.Variable Description\n1. PassengerId: unique ID number\n2. Survived: passenger survive (1) or died (0)\n3. Pclass: passenger class\n4. Name: passenger name\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings or spouse\n8. Parch: number of parent or children\n9. Ticket: ticket number\n10. Fare: amount of money for ticket\n11. Cabin: cabin category \n12. Embarked: port where passenger embarked (C= Cherborg, Q= Queenstown, S= Southampton)","fad84c9c":"<a ID = \"5\"><\/a><br>\n## Numerical Variable","a8ae09ad":"<a ID = \"4\"><\/a><br>\n## Categorical Variable","d7a0b69c":"# Introduction\n\nThis project is about RMS Titanic which sank after colliding with an iceberg, and the survivors in 1912. 1502 out of 2224 passengers and crew died in this disaster. \n\nIn this project, we will try to build a predictive model to find out what sorts of people were more likely to survive. Data that we will use are the passenger data like; name, age, gender, socio-economic class, etc.\n\n<font color = 'blue' >\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)<\/a><br>\n    * [Univariate Variable Analysis](#3)\n       * [Categorical Variable](#4)\n       * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Values](#8)\n    * [Finding Missing Values](#9)\n    * [Filling Missing Values](#10)","cc43cab1":" <a ID = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","deca330c":"* float64(2): Fare, Age\n* int64(5): PassengerId, Survived, Pclass, SibSp, Parch, \n* object(5): Name, Sex, Ticket, Cabin, Embarked","7c04bf3f":"<a ID = \"9\"><\/a><br>\n## Finding Missing Values\n    ","80068bb1":"<a ID = \"3\"><\/a><br>\n# Univariate Variable Analysis\n   * Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n   * Numerical Variable: Age, PassengerId, Fare"}}