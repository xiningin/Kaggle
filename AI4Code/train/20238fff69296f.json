{"cell_type":{"8672a49c":"code","4b09acba":"code","0f40fd0e":"code","4904e187":"code","8ca99ae2":"code","67ce5949":"code","14d51295":"code","6731abf8":"code","e866ca05":"code","7d4563a7":"code","50ecf785":"code","14405859":"code","b76cb978":"code","27db2c47":"code","48ff18ef":"code","791759f4":"code","95b4323d":"code","6d795777":"code","2836728f":"code","51bc2101":"code","f488abf7":"code","f81dba3c":"code","d3f84a81":"code","0f83b383":"code","5db6249e":"code","7df056fb":"code","ed097554":"code","9539e5b3":"code","5724f3ef":"code","024559f3":"code","ca0812eb":"code","63f08fc2":"code","8a2ba0e7":"code","609c739f":"code","999cafa3":"code","da3c9133":"code","8763803d":"code","5cbabee7":"code","965ff9aa":"code","07e5ee92":"code","4c94d4c2":"code","e8203491":"code","9bfbcf42":"code","949340ea":"code","3a838b6a":"code","010eedeb":"code","4b73e131":"code","5bbb6be6":"code","0621b834":"code","0dac41cb":"code","e4d08e9a":"code","0a907f2c":"code","0982c7fe":"code","d9bf4b47":"markdown","cf9fd6b2":"markdown","01517afa":"markdown","a76e87eb":"markdown","5c273f03":"markdown","c0692131":"markdown","35b26c08":"markdown","59f735b4":"markdown","3f8319e9":"markdown","e4e5ae43":"markdown","94ff6a0b":"markdown","5356e5ad":"markdown","cc4b89cd":"markdown","daaf225a":"markdown","3fa6d7c3":"markdown","13efd6f7":"markdown","b24974a0":"markdown"},"source":{"8672a49c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b09acba":"# Major libraries related to Data handling, Vis and statistics\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport seaborn as sns\nfrom scipy.stats import normaltest, skew\nfrom sklearn.preprocessing import StandardScaler\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.metrics import r2_score, median_absolute_error, mean_absolute_error\nfrom sklearn.metrics import median_absolute_error, mean_squared_error, mean_squared_log_error\nfrom statsmodels.tsa.stattools import pacf\nfrom statsmodels.graphics.tsaplots import plot_pacf, plot_acf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA, ARMA\nfrom statsmodels.tsa import stattools\n\nfrom IPython.display import set_matplotlib_formats \nplt.style.use('ggplot')\nsns.set_style('whitegrid')\nsns.set(font_scale=1.5)\n%config InlineBackend.figure_format = 'retina'\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Pallets used for visualizations\ncolor= \"Spectral\"\ncolor_plt = ListedColormap(sns.color_palette(color).as_hex())\ncolor_hist = 'teal'\nBOLD = '\\033[1m'\nEND = '\\033[0m'","0f40fd0e":"stocks = pd.read_csv('\/kaggle\/input\/saudi-stock-exchange-tadawul\/Tadawul_stcks.csv')\nstocks_2 = pd.read_csv('\/kaggle\/input\/saudi-stock-exchange-tadawul\/Tadawul_stcks_23_4.csv')\nstocks = stocks_2.append(stocks,ignore_index=True)\nstocks.rename(columns={'trading_name ': 'trading_name', 'volume_traded ': 'volume_traded','no_trades ':'no_trades'}, inplace=True)\nstocks.head()","4904e187":"stocks[stocks['sectoer']=='Health Care']['trading_name'].unique()","8ca99ae2":"health_care = stocks[stocks['sectoer']=='Health Care']\nhealth_care['date']= pd.to_datetime(health_care['date'])\nhealth_care.sort_values('date', inplace=True)\nhealth_care = health_care.set_index('date')\nhealth_care.head()","67ce5949":"health_care.info()","14d51295":"health_care.isna().sum() # it's ok that open, high, and low has some missing values, we're not going to us them anyways.","6731abf8":"plt.figure(figsize=(17, 6))\nsns.lineplot(x=health_care.index, y=\"close\", hue=\"trading_name\", markers=True, data=health_care)\nplt.title('Closing price of Saudi Stocks in the Healthcare Sector')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\nplt.grid(False)\nplt.show()","e866ca05":"stocks[stocks['trading_name']=='CHEMICAL'].tail(1)","7d4563a7":"stocks[stocks['trading_name']=='SPIMACO'].tail(1)","50ecf785":"covid_19 = pd.read_csv('\/kaggle\/input\/saudi-covid19-from-11-to-184\/saudi_covid-19.csv', index_col='Date', parse_dates=['Date'])\ncovid_19.drop('Unnamed: 0',axis=1, inplace=True)\ncovid_19 = covid_19 [['ConfirmedCases', 'ConfirmedDeaths', 'StringencyIndex']]\ncovid_19.describe().T","14405859":"# The date that Saudi Arabia reported the first case of covid-19\ncovid_19[covid_19['ConfirmedCases']==1].head(1)","b76cb978":"# The date that Saudi Arabia closed everything and had the lockdown.\ncovid_19[covid_19['StringencyIndex']==covid_19.max()['StringencyIndex']].head(1)","27db2c47":"health_care_2020 = health_care.loc[health_care.index>'2020-01-01']\nplt.figure(figsize=(17, 6))\nsns.lineplot(x=health_care_2020.index, y=\"close\", hue=\"trading_name\", markers=True, data=health_care_2020)\nplt.title('Closing price of Saudi Stocks in the Healthcare Sector in 2020 and COVID-19 Analysis')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\n\nplt.axvline(x= dt.datetime(2020,3,3))\nplt.text(x=dt.datetime(2020,3,1),y=20,s='First case of Covid-19 reported',rotation=90)\nplt.axvline(x=dt.datetime(2020,3,23))\nplt.text(x=dt.datetime(2020,3,21),y=20,s='First day of lockdown',rotation=90)\n\n\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\nplt.grid(True)\nplt.show()","48ff18ef":"CHEMICAL_df = stocks[stocks['trading_name']=='CHEMICAL']\nCHEMICAL_df['date']= pd.to_datetime(CHEMICAL_df['date'])\nCHEMICAL_df.sort_values('date', inplace=True)\nCHEMICAL_df = CHEMICAL_df.set_index('date')\nCHEMICAL_df.drop('symbol',axis=1).describe().T","791759f4":"SPIMACO_df = stocks[stocks['trading_name']=='SPIMACO']\nSPIMACO_df['date']= pd.to_datetime(SPIMACO_df['date'])\nSPIMACO_df.sort_values('date', inplace=True)\nSPIMACO_df = SPIMACO_df.set_index('date')\nSPIMACO_df.drop('symbol',axis=1).describe().T","95b4323d":"plt.figure(figsize=(17, 4))\nplt.plot(CHEMICAL_df['close'])\nplt.title('Closing price of Saudi Chemical Co.')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()\n\nplt.figure(figsize=(17, 4))\nplt.plot(SPIMACO_df['close'])\nplt.title('Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","6d795777":"def mean_absolute_percentage_error(y_true, y_pred):\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","2836728f":"def plot_moving_average(series, window, plot_intervals=False, scale=1.96):\n\n    rolling_mean = series.rolling(window = window).mean()\n    resample_mean = series.resample('Y').mean()\n    \n    plt.figure(figsize=(17,6))\n    plt.title('Moving Average for ')\n    plt.plot(series[window:], label='Actual values')\n    plt.plot(rolling_mean, 'g', label='Rolling mean trend window size = {}'.format(window) , linewidth=4.0)\n    plt.plot(resample_mean, 'black', label='Yearly Resample mean trend')\n    \n    #Plot confidence intervals for smoothed values\n    if plot_intervals:\n        mae = mean_absolute_error(series[window:], rolling_mean[window:])\n        deviation = np.std(series[window:] - rolling_mean[window:])\n        lower_bound = rolling_mean - (mae + scale * deviation)\n        upper_bound = rolling_mean + (mae + scale * deviation)\n        plt.plot(upper_bound, 'r--', label='Upper bound \/ Lower bound')\n        plt.plot(lower_bound, 'r--')\n            \n    \n    plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)    \n    plt.grid(True)","51bc2101":"#Smooth by previous quarter (90 days)\nplot_moving_average(CHEMICAL_df['close'], 100, plot_intervals=True)\nplt.ylabel('Closing price ($)')\nplt.title ('Moving Average for Closing price of Saudi Chemical Co.');\n\n#Smooth by previous quarter (90 days)\nplot_moving_average(SPIMACO_df['close'], 100, plot_intervals=True)\nplt.ylabel('Closing price ($)')\nplt.title ('Moving Average for Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation');","f488abf7":"# I think that there is something wrong because I don't think that the data looks stationary, \n# but the p-value is smaller than 0.05!\n# why?\nprint(BOLD + 'CHEMICAL' +END)\nresult = adfuller(CHEMICAL_df['close'].dropna())\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nprint('p_value < 0.05 , that means the series is stationary\\n')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')\n    \nprint('\\n' + BOLD + 'SPIMACO' +END)\nresult = adfuller(SPIMACO_df['close'].dropna())\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nprint('p_value < 0.05 , that means the series is stationary\\n')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')    ","f81dba3c":"CHEMICAL_df['close_diff'] = CHEMICAL_df['close'].diff()\nplot_moving_average(CHEMICAL_df['close_diff'], 100, plot_intervals=True)\nplt.ylabel('Difference in closing price ($)')\nplt.title ('Difference in Moving Average for Closing price of Saudi Chemical Co.');\n\nSPIMACO_df['close_diff'] = SPIMACO_df['close'].diff()\nplot_moving_average(SPIMACO_df['close_diff'], 100, plot_intervals=True)\nplt.ylabel('Difference in closing price ($)')\nplt.title ('Difference in Moving Average for Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation');","d3f84a81":"plt.figure(figsize=(10, 6))\nsns.distplot(CHEMICAL_df['close_diff'].dropna())\nplt.title('Distribution of Difference in closing price of Saudi Chemical Co. (%)')\nplt.ylabel('Frequency')\nplt.xlabel('Difference in closing price (%)')\nplt.show()\n\nplt.figure(figsize=(10, 6))\nsns.distplot(SPIMACO_df['close_diff'].dropna())\nplt.title('Distribution of Difference in closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation (%)')\nplt.ylabel('Frequency')\nplt.xlabel('Difference in closing price (%)')\nplt.show()","0f83b383":"print(BOLD + 'CHEMICAL' +END)\nresult = adfuller(CHEMICAL_df['close_diff'].dropna())\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nprint('p_value < 0.05 , that means the series is stationary\\n')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')\n\nprint('\\n'+ BOLD + 'SPIMACO' +END)\nresult = adfuller(SPIMACO_df['close_diff'].dropna())\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nprint('p_value < 0.05 , that means the series is stationary\\n')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')    \n    ","5db6249e":"CHEMICAL_df['close'].autocorr()","7df056fb":"SPIMACO_df['close'].autocorr()","ed097554":"def autocorr_plots(y, lags=None):\n    fig, ax = plt.subplots(ncols=2, figsize=(15, 4), sharey=True)\n    plot_acf(y, lags=lags, ax=ax[0])\n    plot_pacf(y, lags=lags, ax=ax[1])\n    return fig, ax","9539e5b3":"fig, ax = autocorr_plots(CHEMICAL_df['close'],lags=30)","5724f3ef":"fig, ax = autocorr_plots(SPIMACO_df['close'],lags=30)","024559f3":"corr_CHEMICAL_df = CHEMICAL_df.drop('symbol', axis=1).corr()\nfig, axs = plt.subplots(figsize = (13, 10)) \nmask = np.triu(np.ones_like(corr_CHEMICAL_df, dtype = np.bool))\nsns.heatmap(corr_CHEMICAL_df, ax = axs, mask = mask, cmap = sns.diverging_palette(180, 10, as_cmap = True))\nplt.title('Correlation of the stock prices in Saudi Chemical Co.')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()","ca0812eb":"corr_SPIMACO_df = SPIMACO_df.drop('symbol', axis=1).corr()\nfig, axs = plt.subplots(figsize = (13, 10)) \nmask = np.triu(np.ones_like(corr_SPIMACO_df, dtype = np.bool))\nsns.heatmap(corr_SPIMACO_df, ax = axs, mask = mask, cmap = sns.diverging_palette(180, 10, as_cmap = True))\nplt.title('Correlation of the stock pricess in Saudi Pharmaceutical Industries & Medical Appliances Corporation')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()","63f08fc2":"# evaluate an ARIMA model for a given order (p,d,q)\ndef evaluate_arima_model(X, arima_order):\n    # prepare training dataset\n    train_size = int(len(X) * 0.66)\n    train, test = X[0:train_size], X[train_size:]\n    history = [x for x in train]\n    # make predictions\n    predictions = list()\n    for t in range(len(test)):\n        model = ARIMA(history, order=arima_order)\n        model_fit = model.fit(disp=0)\n        yhat = model_fit.forecast()[0]\n        predictions.append(yhat)\n        history.append(test[t])\n    # calculate out of sample error\n    error = mean_squared_error(test, predictions)\n    return error","8a2ba0e7":"# evaluate combinations of p, d and q values for an ARIMA model\ndef evaluate_models(dataset, p_values, d_values, q_values):\n    dataset = dataset.astype('float32')\n    best_score, best_cfg = float(\"inf\"), None\n    for p in p_values:\n        for d in d_values:\n            for q in q_values:\n                order = (p,d,q)\n                try:\n                    mse = evaluate_arima_model(dataset, order)\n                    if mse < best_score:\n                        best_score, best_cfg = mse, order\n                    print('ARIMA%s MSE=%.3f' % (order,mse))\n                except:\n                    continue\n    print('Best ARIMA%s MSE=%.3f' % (best_cfg, best_score))","609c739f":"CHEMICAL_df.index.max(), CHEMICAL_df.index.min()","999cafa3":"# mid year \nint((CHEMICAL_df.index.max().year + CHEMICAL_df.index.min().year) \/2)","da3c9133":"df_train = CHEMICAL_df.loc[:'2011']\ndf_test = CHEMICAL_df.loc['2012':'2019']\n\n# train \nclose_train = df_train['close']\nudiff_train = close_train.diff().dropna()\n\n#test\nclose_test = df_test['close']\nudiff_test = close_test.diff().dropna()","8763803d":"df_train.shape , df_test.shape","5cbabee7":"# Plot the train and test sets on the axis ax\nfig, ax = plt.subplots(figsize=(10, 6))\ndf_train['close'].plot(ax=ax)\ndf_test['close'].plot(ax=ax)\nplt.title('Closing price of Saudi Chemical Co.')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","965ff9aa":"# Plot the train and test sets on the axis ax\nfig, ax = plt.subplots(figsize=(10, 6))\nudiff_train.plot(ax=ax)\nudiff_test.plot(ax=ax)\nplt.title('Difference in Closing price of Saudi Chemical Co.')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","07e5ee92":"#find the optimal parameters using AIC & BIC\nauto_select = stattools.arma_order_select_ic(df_train['close'], max_ar=5, max_ma=5, ic=['aic', 'bic'])\n\nplt.subplots(figsize = (10,8))\nsns.heatmap(auto_select['aic'],  cmap = sns.diverging_palette(180, 10, as_cmap = True),square=True, fmt='.1f')\nplt.title('AIC')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()\n\nplt.subplots(figsize = (10,8))\nsns.heatmap(auto_select['bic'],  cmap = sns.diverging_palette(180, 10, as_cmap = True),square=True, fmt='.1f')\nplt.title('BIC')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()","4c94d4c2":"model = ARIMA(close_train,order=(2,0,0))\nres = model.fit()\nres.summary()","e8203491":"# plot our prediction for train data\nfig, ax = plt.subplots(figsize=(10, 6))\nclose_train.plot(legend = True)\nres.fittedvalues.rename(\"Trainset Predictions\").plot(legend = True)\nplt.title('Actual vs. Prediction in Trainset Closing price of Saudi Chemical Co.')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","9bfbcf42":"start = len(udiff_train) \nend = len(udiff_train) + len(udiff_test) \n  \n# Predictions for the test set \npredictions = res.predict(start, end).rename(\"Testset Predictions\") \npredictions = pd.DataFrame(predictions)\npredictions.set_index(df_test.index,inplace=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nclose_test.plot(legend = True, ax = ax)\npredictions.plot(legend = True, ax = ax) \n\nplt.title('Actual vs. Prediction in Testset Closing price of Saudi Chemical Co.')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","949340ea":"SPIMACO_df.index.max(), SPIMACO_df.index.min()","3a838b6a":"# mid year \nint((SPIMACO_df.index.max().year + SPIMACO_df.index.min().year) \/2)","010eedeb":"df_train = SPIMACO_df.loc[:'2011']\ndf_test = SPIMACO_df.loc['2012':'2019']\n\n# train \nclose_train = df_train['close']\nudiff_train = close_train.diff().dropna()\n\n#test\nclose_test = df_test['close']\nudiff_test = close_test.diff().dropna()","4b73e131":"df_train.shape , df_test.shape","5bbb6be6":"# Plot the train and test sets on the axis ax\nfig, ax = plt.subplots(figsize=(10, 6))\ndf_train['close'].plot(ax=ax)\ndf_test['close'].plot(ax=ax)\nplt.title('Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation')\nplt.ylabel('Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","0621b834":"# Plot the train and test sets on the axis ax\nfig, ax = plt.subplots(figsize=(10, 6))\nudiff_train.plot(ax=ax)\nudiff_test.plot(ax=ax)\nplt.title('Difference in Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","0dac41cb":"#find the optimal parameters using AIC & BIC\nauto_select = stattools.arma_order_select_ic(df_train['close'], max_ar=5, max_ma=5, ic=['aic', 'bic'])\n\nplt.subplots(figsize = (10,8))\nsns.heatmap(auto_select['aic'],  cmap = sns.diverging_palette(180, 10, as_cmap = True),square=True, fmt='.1f')\nplt.title('AIC')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()\n\nplt.subplots(figsize = (10,8))\nsns.heatmap(auto_select['bic'],  cmap = sns.diverging_palette(180, 10, as_cmap = True),square=True, fmt='.1f')\nplt.title('BIC')\n\n# fix for mpl bug that cuts off top\/bottom of seaborn viz\nb, t = plt.ylim() # discover the values for bottom and top\nb += 0.5 # Add 0.5 to the bottom\nt -= 0.5 # Subtract 0.5 from the top\nplt.ylim(b, t) # update the ylim(bottom, top) values\nplt.show()","e4d08e9a":"model = ARIMA(close_train,order=(1,0,1))\nres = model.fit()\nres.summary()","0a907f2c":"# plot our prediction for train data\nfig, ax = plt.subplots(figsize=(10, 6))\nclose_train.plot(legend = True)\nres.fittedvalues.rename(\"Trainset Predictions\").plot(legend = True)\nplt.title('Actual vs. Prediction in Trainset Closing price ofSaudi Pharmaceutical Industries & Medical Appliances Corporation')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","0982c7fe":"start = len(udiff_train) \nend = len(udiff_train) + len(udiff_test) \n  \n# Predictions for the test set \npredictions = res.predict(start, end).rename(\"Testset Predictions\") \npredictions = pd.DataFrame(predictions)\npredictions.set_index(df_test.index,inplace=True)\n\nfig, ax = plt.subplots(figsize=(10, 6))\n\nclose_test.plot(legend = True, ax = ax)\npredictions.plot(legend = True, ax = ax) \n\nplt.title('Actual vs. Prediction in Testset Closing price of Saudi Pharmaceutical Industries & Medical Appliances Corporation')\nplt.ylabel('Difference Closing price ($)')\nplt.xlabel('Year')\nplt.grid(False)\nplt.show()","d9bf4b47":"## Problem Statment\n\nUsing data science in the stock market is not new, but that doesn't apply for Saudi Stock Exchange (Tadawul), We are trying to explore the saudi stocks in the healthcare sector, so we can predict their closing prices using time series analysis with ARIMA. We chosing the two older companies in the healthcare sector to study, which are Saudi Chemical Co. and Saudi Pharmaceutical Industries & Medical Appliances Corporation. ","cf9fd6b2":"### Just for fun: Checking the effects of COVID-19 on the saudi healthcare stock prices","01517afa":"## Datasets Description\n\nData sourse: https:\/\/www.kaggle.com\/salwaalzahrani\/saudi-stock-exchange-tadawul\n\nThis is the data of Saudi stock market companies since 2000-01-01. It was collected from Saudi Stock Exchange (Tadawul) https:\/\/www.tadawul.com.sa\/wps\/portal\/tadawul\/home\/\n\nEach row in the database represents the price of a specific stock at a specific date:\n\n- symbol (Integer): The symbol or the reference number of the company\n- name(String) Name of the company\n- trading_name (String): The trading name of the company\n- sectoer (Date): The sector in which the company operates\n- date (Date): The date of the stock price\n- open (Decimal): The opening price\n- high (Decimal): The highest price of the stock at that day\n- low (Decimal): The lowest price of the stock at that day\n- close (Decimal): The closing price\n- change (Decimal): The change in price from the last day\n- perc_Change (Decimal): The percentage of the change\n- volume_traded (Decimal): The volume of the trades for the day\n- value_traded (Decimal): The value of the trades for the day\n- no_trades (Decimal): The number of trades for the day","a76e87eb":"### Contents:\n- [Data Import & Cleaning](#Data-Import-and-Cleaning)\n- [Datasets Description](#Datasets-Description)\n- [Exploratory Data Analysis](#Exploratory-Data-Analysis)\n- [Data Visualization](#Visualize-the-data)\n- [Preprocessing and Modeling](#Preprocessing_and_Modeling)\n- [Conclusions and Recommendations](#Conclusions-and-Recommendations)","5c273f03":"Using data science in the stock market is not new, but that doesn't apply for Saudi Stock Exchange (Tadawul), We are trying to explore the saudi stocks in the healthcare sector, so we can predict their closing prices using time series analysis with ARIMA. We chosing the two older companies in the healthcare sector to study, which are Saudi Chemical Co. and Saudi Pharmaceutical Industries & Medical Appliances Corporation.","c0692131":"## Preprocessing and Modeling","35b26c08":"## Data Visualization","59f735b4":"- we can actually see the effect of covid-19 on stock market, as the closing prices decreased in almost all companies after the first case of covid-19 was reported in saudi\n- After the first day of lockdown, I was expecting another drop in prices, but we cannot see that in the graph. prices actually were not affected. ","3f8319e9":"## Data Import & Cleaning","e4e5ae43":"## Conclusions and Recommendations","94ff6a0b":"### We will be foucsing on stocks in Healthcare sector","5356e5ad":"### A) Saudi Chemical Co.","cc4b89cd":"### B)  Saudi Pharmaceutical Industries & Medical Appliances Corporation","daaf225a":"## CHEMICAL vs. SPIMACO","3fa6d7c3":"### From the graph above, we decided that we will do analysis will be done for CHEMICAL and SPIMACO as they are the oldest companies in healthcare sector. ","13efd6f7":"## Exploratory Data Analysis","b24974a0":"\n    \n\n<img src=\"http:\/\/imgur.com\/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n\n\n# Project 4 : Saudi Stock Exchange (Tadawul) prediction for Healthcare Companies \n\n\n<img src=\"https:\/\/www.xmarabia.net\/wp-content\/uploads\/2018\/05\/Stock-Charts-7.jpg\" style=\"height: 250px; width: 1000px\">\n\n\n\n\n---"}}