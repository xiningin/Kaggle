{"cell_type":{"94cf1173":"code","93f57c75":"code","1ef16670":"code","db0b62b7":"code","af051445":"code","9f160efd":"code","97cf532b":"code","c4e091ce":"code","d2e66469":"code","aa0e94bc":"code","3397409a":"code","55be3b85":"code","e7a88d49":"code","daa6b402":"code","8a4a7d21":"code","b3b39c28":"code","e5c676ca":"code","d7ff91a5":"code","aece9caa":"code","667d29f3":"code","a6f8ddac":"code","a3ba0355":"code","5a89b437":"code","98aaedbc":"code","8aab29ba":"code","038c675d":"code","d8ad6e03":"code","fe9b1447":"code","4a623340":"code","8b193cde":"code","8af80e6e":"code","f05c3aa0":"code","f0119f47":"code","c655f4ee":"code","17699087":"markdown","575747aa":"markdown","2100b378":"markdown","86782f43":"markdown","110d521b":"markdown","b4a9633d":"markdown","c183f53d":"markdown","cd0c7fde":"markdown"},"source":{"94cf1173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93f57c75":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split","1ef16670":"train= pd.read_csv('..\/input\/co2-emission-prediction-data\/CO2_emission_train_data_set.csv')\ntest= pd.read_csv('..\/input\/co2-emission-prediction-data\/CO2_emission_test_data_2014.csv')","db0b62b7":"train.shape","af051445":"test.shape","9f160efd":"train.drop_duplicates()","97cf532b":"test.drop_duplicates()","c4e091ce":"train.isnull().values.any()","d2e66469":"train.isnull().values.any()","aa0e94bc":"train.info()","3397409a":"train['Population_total'].value_counts()","55be3b85":"#train['Renewable_energy_use'].unique()","e7a88d49":"train['Energy_use_kg_of_oil_per_capita'] = train['Energy_use_kg_of_oil_per_capita'].apply(lambda x:x.concat(x.split(',')))","daa6b402":"train['Energy_use_kg_of_oil_per_capita'].head()","8a4a7d21":"train['GDP_Growth']=train['GDP_Growth'].apply(lambda x:x.replace('..',''))\ntrain['CO2_Emission_Metrics_per_capita']=train['CO2_Emission_Metrics_per_capita'].apply(lambda x:x.replace('..',''))\ntrain['Electricity_access']=train['Electricity_access'].apply(lambda x:x.replace('..',''))\ntrain['Urban_population']=train['Urban_population'].apply(lambda x:x.replace('..',''))\ntrain['Population_growth']=train['Population_growth'].apply(lambda x:x.replace('..',''))\ntrain['Urban_population_growth_annual']=train['Urban_population_growth_annual'].apply(lambda x:x.replace('..',''))\ntrain['Live_stock_production']=train['Live_stock_production'].apply(lambda x:x.replace('..',''))\ntrain['Forest_area']=train['Forest_area'].apply(lambda x:x.replace('..',''))\ntrain['Renewable_energy_use']=train['Renewable_energy_use'].apply(lambda x:x.replace('..',''))\ntrain['Energy_use_kg_of_oil_per_capita']=train['Energy_use_kg_of_oil_per_capita'].apply(lambda x:x.replace('..',''))\ntrain['Population_total']=train['Population_total'].apply(lambda x:x.replace('..',''))","b3b39c28":"test['GDP_Growth']=test['GDP_Growth'].apply(lambda x:x.replace('..',''))\ntest['CO2_Emission_Metrics_per_capita']=test['CO2_Emission_Metrics_per_capita'].apply(lambda x:x.replace('..',''))\ntest['Electricity_access']=test['Electricity_access'].apply(lambda x:x.replace('..',''))\ntest['Urban_population']=test['Urban_population'].apply(lambda x:x.replace('..',''))\ntest['Population_growth']=test['Population_growth'].apply(lambda x:x.replace('..',''))\ntest['Urban_population_growth_annual']=test['Urban_population_growth_annual'].apply(lambda x:x.replace('..',''))\ntest['Live_stock_production']=test['Live_stock_production'].apply(lambda x:x.replace('..',''))\ntest['Forest_area']=test['Forest_area'].apply(lambda x:x.replace('..',''))\ntest['Renewable_energy_use']=test['Renewable_energy_use'].apply(lambda x:x.replace('..',''))\ntest['Energy_use_kg_of_oil_per_capita']=test['Energy_use_kg_of_oil_per_capita'].apply(lambda x:x.replace('..',''))\ntest['Population_total']=test['Population_total'].apply(lambda x:x.replace('..',''))","e5c676ca":"train['GDP_Growth']=pd.to_numeric(train['GDP_Growth'])\ntrain['CO2_Emission_Metrics_per_capita']=pd.to_numeric(train['CO2_Emission_Metrics_per_capita'])\ntrain['Electricity_access']=pd.to_numeric(train['Electricity_access'])\ntrain['Urban_population']=pd.to_numeric(train['Urban_population'])\ntrain['Population_growth']=pd.to_numeric(train['Population_growth'])\ntrain['Urban_population_growth_annual']=pd.to_numeric(train['Urban_population_growth_annual'])\ntrain['Live_stock_production']=pd.to_numeric(train['Live_stock_production'])\ntrain['Forest_area']=pd.to_numeric(train['Forest_area'])\ntrain['Renewable_energy_use']=pd.to_numeric(train['Renewable_energy_use'])","d7ff91a5":"test['GDP_Growth']=pd.to_numeric(test['GDP_Growth'])\ntest['CO2_Emission_Metrics_per_capita']=pd.to_numeric(test['CO2_Emission_Metrics_per_capita'])\ntest['Electricity_access']=pd.to_numeric(test['Electricity_access'])\ntest['Urban_population']=pd.to_numeric(test['Urban_population'])\ntest['Population_growth']=pd.to_numeric(test['Population_growth'])\ntest['Urban_population_growth_annual']=pd.to_numeric(test['Urban_population_growth_annual'])\ntest['Live_stock_production']=pd.to_numeric(test['Live_stock_production'])\ntest['Forest_area']=pd.to_numeric(test['Forest_area'])\ntest['Renewable_energy_use']=pd.to_numeric(test['Renewable_energy_use'])","aece9caa":"train['GDP_Growth']=train['GDP_Growth'].fillna(train['GDP_Growth'].mean())\ntrain['CO2_Emission_Metrics_per_capita']=train['CO2_Emission_Metrics_per_capita'].fillna(train['CO2_Emission_Metrics_per_capita'].mean())\ntrain['Electricity_access']=train['Electricity_access'].fillna(train['Electricity_access'].mean())\ntrain['Urban_population']=train['Urban_population'].fillna(train['Urban_population'].mean())\ntrain['Population_growth']=train['Population_growth'].fillna(train['Population_growth'].mean())\ntrain['Urban_population_growth_annual']=train['Urban_population_growth_annual'].fillna(train['Urban_population_growth_annual'].mean())\ntrain['Live_stock_production']=train['Live_stock_production'].fillna(train['Live_stock_production'].mean())\ntrain['Forest_area']=train['Forest_area'].fillna(train['Forest_area'].mean())\ntrain['Renewable_energy_use']=train['Renewable_energy_use'].fillna(train['Renewable_energy_use'].mean())","667d29f3":"test['GDP_Growth']=test['GDP_Growth'].fillna(test['GDP_Growth'].mean())\ntest['CO2_Emission_Metrics_per_capita']=test['CO2_Emission_Metrics_per_capita'].fillna(test['CO2_Emission_Metrics_per_capita'].mean())\ntest['Electricity_access']=test['Electricity_access'].fillna(test['Electricity_access'].mean())\ntest['Urban_population']=test['Urban_population'].fillna(test['Urban_population'].mean())\ntest['Population_growth']=test['Population_growth'].fillna(test['Population_growth'].mean())\ntest['Urban_population_growth_annual']=test['Urban_population_growth_annual'].fillna(test['Urban_population_growth_annual'].mean())\ntest['Live_stock_production']=test['Live_stock_production'].fillna(test['Live_stock_production'].mean())\ntest['Forest_area']=test['Forest_area'].fillna(test['Forest_area'].mean())\ntest['Renewable_energy_use']=test['Renewable_energy_use'].fillna(test['Renewable_energy_use'].mean())","a6f8ddac":"train.isnull().sum()","a3ba0355":"test.isnull().sum()","5a89b437":"train.describe()","98aaedbc":"test.describe()","8aab29ba":"train.head(10)","038c675d":"le = preprocessing.LabelEncoder()\n\ntrain['Country'] = le.fit_transform(train['Country'])\ntest['Country'] = le.fit_transform(test['Country'])","d8ad6e03":"train.head(10)","fe9b1447":"plt.figure(figsize=(10,7.5))\ncor = train.corr(method ='pearson')\nsns.heatmap(cor, cmap=\"RdYlGn\")\nplt.show()","4a623340":"for i in train.columns:\n    sns.boxplot(train[i])\n    plt.show()","8b193cde":"y_train= train['CO2_Emission_Metrics_per_capita']\nX_train= train.drop(['CO2_Emission_Metrics_per_capita'], axis=1)\ny_test= test['CO2_Emission_Metrics_per_capita']\nX_test= test.drop(['CO2_Emission_Metrics_per_capita'], axis=1)","8af80e6e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\n\nrf = RandomForestRegressor(n_estimators=100, min_samples_split=2,min_samples_leaf=1,random_state=0)\nrf.fit(X_train, y_train)","f05c3aa0":"predicted_test = rf.predict(X_test)\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predicted_test))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, predicted_test))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predicted_test)))","f0119f47":"def rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)\nfi = rf_feat_importance(rf, X_train); ","c655f4ee":"def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)\nplot_fi(fi[:45]);","17699087":"# **DATA PREPROCESSING**","575747aa":"**Coverting Nan's into mean**","2100b378":"# DATA ANALYSIS","86782f43":"# **Model Building**","110d521b":"# Feature Importance: To Identify the causes and Influencing features of CO2 Emissions","b4a9633d":"**Coverting to numeric**","c183f53d":"**Making Missing value \"..\" into Nan**","cd0c7fde":"# Decision Tree "}}