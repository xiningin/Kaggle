{"cell_type":{"03ae5cab":"code","c560961d":"code","08371a8e":"code","501f8d05":"code","54c81025":"code","c32fbf6e":"code","4b171cf6":"code","59102299":"code","7f0ad814":"code","e6754462":"code","2ad51fe3":"code","49f31450":"code","756cce39":"code","f28c100d":"code","995b302d":"code","852b086e":"code","42259094":"code","c6727ef1":"code","ff957042":"markdown","6320841e":"markdown","b634cda3":"markdown","cc252762":"markdown","b9f46d0f":"markdown","7334afb2":"markdown","18fd0670":"markdown","c6ed61ae":"markdown","b51c853f":"markdown","c10860e2":"markdown","0a223858":"markdown","db7b8ef0":"markdown","51a40178":"markdown","4bff1729":"markdown"},"source":{"03ae5cab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c560961d":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","08371a8e":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","501f8d05":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","54c81025":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","c32fbf6e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nsns.countplot(x = 'Survived', hue = 'Sex', data = train_data, palette = 'RdBu')","4b171cf6":"sns.countplot(x = 'SibSp', hue = 'Survived', data = train_data)","59102299":"sns.countplot(x = 'Parch', hue = 'Survived', data = train_data)","7f0ad814":"sns.countplot(x = 'Survived', hue = 'Pclass', data = train_data)","e6754462":"train_data['Age'].hist(bins = 20, color = 'Orange', figsize = (15, 5))\nplt.hist(train_data.query('Survived==1')['Age'], bins = 50)\nplt.xlabel('Age')\nplt.ylabel('Count')","2ad51fe3":"train_data['Fare'].hist(bins = 50, color = 'Orange', figsize = (15, 5))\nplt.hist(train_data.query('Survived==1')['Fare'], bins = 50)\nplt.xlabel('Fare')\nplt.ylabel('Count')","49f31450":"train_data.isnull().sum() # checking for missing data in the training set","756cce39":"test_data.isnull().sum() # checking for missing data in the testing set","f28c100d":"# Filling missing age data with the mean age of all passengers\ntrain_data['Age'] = train_data['Age'].fillna(train_data['Age'].mean())\ntest_data['Age'] = test_data['Age'].fillna(test_data['Age'].mean())\n\n# Training using the data I found to be relevant to survival\ny_train = train_data[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Age\"]\nX_train = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])","995b302d":"from sklearn.neighbors import KNeighborsClassifier\n\n# Fitting our data to the KNN Classifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\nknn_prediction = knn.predict(X_test)\nprint(\"prediction = \", knn_prediction)\n\nprint(knn.score(X_train, y_train))","852b086e":"from sklearn.linear_model import SGDClassifier\n\n# Fitting our data to the SGD Classifier\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)\n\nsgd_prediction = sgd.predict(X_test)\nprint(\"prediction = \", sgd_prediction)\n\nprint(sgd.score(X_train, y_train))","42259094":"from sklearn.tree import DecisionTreeClassifier\n\n# Fitting our data to the DT Classifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ndtc_prediction = dtc.predict(X_test)\nprint(\"prediction = \", dtc_prediction)\n\nprint(dtc.score(X_train, y_train))","c6727ef1":"# Creating submission data using dtc, because it yielded the highest average accuracy\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': dtc_prediction})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ff957042":"# SibSp vs Survival","6320841e":"# Tutorial Analysis","b634cda3":"# Exploratory Data Analysis","cc252762":"# Loading Data","b9f46d0f":"# KNN Classifier","7334afb2":"# Sex vs Survival","18fd0670":"# Parch vs Survival","c6ed61ae":"# SGD Classifier","b51c853f":"# Fixing Missing Values and Training Data","c10860e2":"# Generate Submission Data","0a223858":"# Age vs Number Survived per","db7b8ef0":"# Missing Data","51a40178":"# Decision Tree Classifier","4bff1729":"Pclass vs Survival"}}