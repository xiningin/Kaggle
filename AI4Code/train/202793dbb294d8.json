{"cell_type":{"786f17c5":"code","7ffbaa54":"code","7a5b0aa7":"code","61de2682":"code","6940e9c6":"code","01f9edff":"code","11e90ec9":"code","61ebe2cb":"code","58741faf":"code","9c7c4a4c":"code","151244a9":"code","53362ac1":"code","b58d273d":"code","195b2d61":"code","5611c775":"code","8aac2eb0":"code","a77775f9":"code","dda2ecdd":"code","4e8d4e77":"code","cd56b890":"code","6015d902":"code","b92a21f0":"code","e1fc116b":"code","39202c86":"markdown","a140e4c0":"markdown","4190c3c8":"markdown"},"source":{"786f17c5":"import numpy as np","7ffbaa54":"np.array([[1,2,3]]).ndim","7a5b0aa7":"np.arange(0,9).reshape(3,3).ndim","61de2682":"a=np.arange(0,9)\nb=np.array([np.arange(0,9),-1*np.flip(range(0,9))])","6940e9c6":"a.ndim","01f9edff":"b.ndim","11e90ec9":"a,b","61ebe2cb":"b.shape","58741faf":"b.itemsize,a.itemsize","9c7c4a4c":"ones=np.ones((5,5)) # 5x5 array of ones\nones[1:-1,1:-1]=0 # doing 3x3 zeros at the center of ones array\nones[(round(len(ones)\/2)),round((len(ones)\/2))]=9 # changing the number 0 to nine at the center\nones","151244a9":"from math import *\ndef f(tuple):\n    ones=np.ones(tuple) # 5x5 array of ones\n    ones[1:-1,1:-1]=0 # doing 3x3 zeros at the center of ones array\n    ones[(floor(len(ones)\/2)),floor((len(ones)\/2))]=9 # changing the number 0 to nine at the center\n    return ones","53362ac1":"f((3,3))","b58d273d":"a=np.array([1,2,3])\nb=a # b\u00f6yle yapt\u0131\u011f\u0131m\u0131zda b'de yap\u0131lacak i\u015flem a'da da yap\u0131lacakt\u0131r.\nb[0]=666\n\na,b # G\u00f6r\u00fcld\u00fc\u011f\u00fc gibi.","195b2d61":"# Bunun yerine a\u015fa\u011f\u0131daki gibi yaparsak\n\na=np.array([1,2,3])\nb=a.copy() # Problem engellenecektir.\nb[0]=666\n\na,b ","5611c775":" np.full((3,6),7)","8aac2eb0":"a=np.full((2,3),3)\nb=np.full((3,2),6)\nnp.matmul(a,b) # matrix multiplication","a77775f9":"c=np.array([[110,2,3],[4,5,6],[7,8,9]])\nnp.linalg.det(c)","dda2ecdd":"import math\n\n#x=np.random.randint(math.ceil(np.random.random()),size=(3,19))\nx=np.random.randint(np.random.randint(1,100),size=(5,3)).max()\nx","4e8d4e77":"np_list=np.reshape(np.arange(0,9),(3,3))","cd56b890":"np_list","6015d902":"np.sum(np_list,axis=0)","b92a21f0":"import numpy as np\n    \n        \ndef calculate(list):\n    \n    if(len(list)<9): \n        raise ValueError(\"List must contain nine numbers.\")\n    \n    np_list=np.reshape(list,(3,3))  \n    \n    mean=[np.mean(np_list,axis=0).tolist(),np.mean(np_list,axis=1).tolist(),np.mean(np_list).tolist()]\n    variance=[np.var(np_list,axis=0).tolist(),np.var(np_list,axis=1).tolist(),np.var(np_list).tolist()]\n    std_dev=[np.std(np_list,axis=0).tolist(),np.std(np_list,axis=1).tolist(),np.std(np_list).tolist()]\n    maximum=[np.max(np_list,axis=0).tolist(),np.max(np_list,axis=1).tolist(),np.max(np_list).tolist()]\n    minimum=[np.min(np_list,axis=0).tolist(),np.min(np_list,axis=1).tolist(),np.min(np_list).tolist()]\n    summary=[np.sum(np_list,axis=0).tolist(),np.sum(np_list,axis=1).tolist(),np.sum(np_list).tolist()]\n  \n    calculations={'mean': mean,\n                  'variance': variance,\n                  'standard deviation': std_dev,\n                  'max': maximum,\n                  'min': minimum,\n                  'sum': summary}\n    \n    return calculations","e1fc116b":"calculate([0,1,2,3,4,5,6,7,8])","39202c86":"# freeCodeCamp 1st Project","a140e4c0":"# INITIALIZE AN ARRAY","4190c3c8":"# NumPy Copying an Array"}}