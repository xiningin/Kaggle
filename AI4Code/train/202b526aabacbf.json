{"cell_type":{"2d3a59c5":"code","209b986b":"code","34ca5858":"code","ee88bd21":"code","901062fe":"code","3321e771":"code","b00ec522":"code","8ea40cfc":"code","d431f610":"code","234af8aa":"code","938a174a":"code","eecdeaeb":"code","e7ac54c6":"code","3b73c13f":"code","24512f7f":"code","e31726fb":"code","06c68bd8":"code","0735a5c6":"markdown","9d5c8f1c":"markdown","f7bf3160":"markdown"},"source":{"2d3a59c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","209b986b":"algorithm = ['lasso', 'elastic', 'ridge', 'lightgbm', 'xgboost', 'svr', 'linear', 'tweedie']\ncolumns = ['age', 'domain1_var1', 'domain1_var2', 'domain2_var1', 'domain2_var2']","34ca5858":"DATA_PATH = '..\/input\/brain-models\/'\n\ndf_pred = pd.read_csv(DATA_PATH + 'training_ridge.csv')['Id']","ee88bd21":"for a in algorithm:\n    p = pd.read_csv(DATA_PATH + 'training_{}.csv'.format(a))\n    for c in p.columns[1:]:\n        p['{}_{}'.format(a,c[5:])] = p[c]\n        p = p.drop(c, axis=1)\n    df_pred = pd.merge(df_pred, p, on='Id')","901062fe":"df_sub = pd.read_csv(DATA_PATH + 'submission_ridge.csv')['Id']\n\nfor a in algorithm:\n    p = pd.read_csv(DATA_PATH + 'submission_{}.csv'.format(a))\n    for c in p.columns[1:]:\n        p['{}_{}'.format(a,c)] = p[c]\n        p = p.drop(c, axis=1)\n    df_sub = pd.merge(df_sub, p, on='Id')","3321e771":"def extract_algo(df, col):\n    for c in df.columns[1:]:\n        if col not in c:\n            df = df.drop(c, axis=1)\n    \n    for c in df.columns[1:]:\n        s = c.split('_')[0]\n        df[s] = df[c]\n        df = df.drop(c, axis=1)\n    return df","b00ec522":"extract_algo(df_pred, 'age')","8ea40cfc":"score_pd = pd.read_csv(\"\/kaggle\/input\/trends-assessment-prediction\/train_scores.csv\")","d431f610":"score_pd","234af8aa":"df = extract_algo(df_pred, 'domain1_var1')\ndf = df.merge(score_pd, on=\"Id\", how=\"left\")\ntest_df = extract_algo(df_sub, 'domain1_var1')\nsub_df = test_df.copy()","938a174a":"params = {\n    'max_depth': -1,\n    'num_leaves': 3,\n    'min_data_in_leaf': 4,\n}\n","eecdeaeb":"from sklearn.model_selection import KFold\n\ndef metric(y_true, y_pred):\n    return np.mean(np.sum(np.abs(y_true - y_pred), axis=0)\/np.sum(y_true, axis=0))","e7ac54c6":"from sklearn.svm import SVR","3b73c13f":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\noveral_score = 0\nfor target, c, w in [(\"age\", 100, 0.3), (\"domain1_var1\", 10, 0.175), (\"domain1_var2\", 10, 0.175), (\"domain2_var1\", 10, 0.175), (\"domain2_var2\", 10, 0.175)]:    \n    df = extract_algo(df_pred, target)\n    df = df.merge(score_pd, on=\"Id\", how=\"left\")\n    test_df = extract_algo(df_sub, target)\n\n    y_oof = np.zeros(df.shape[0])\n    y_test = np.zeros((test_df.shape[0], NUM_FOLDS))\n    \n    for f, (train_ind, val_ind) in enumerate(kf.split(df, df)):\n        train_df, val_df = df.iloc[train_ind], df.iloc[val_ind] # train, val split\n        train_df = train_df[train_df[target].notnull()] # null\u6392\u9664\n\n        model = SVR(kernel='rbf')\n        model.fit(train_df[algorithm], train_df[target]) #df\u304b\u3089feature, target\u3092\u6307\u5b9a\u3057\u3066model\u3092train\n\n        y_oof[val_ind] = model.predict(val_df[algorithm]) #Out of fold, \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5916\u306e\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\n        y_test[:, f] = model.predict(test_df[algorithm])\n                \n    df[\"pred_{}\".format(target)] = y_oof\n    sub_df[target] = y_test.mean(axis=1)\n    score = metric(df[df[target].notnull()][target].values, df[df[target].notnull()][\"pred_{}\".format(target)].values)\n    overal_score += w*score\n    print(target, np.round(score, 4))\n    print()\n    \nprint(\"Overal score:\", np.round(overal_score, 4))","24512f7f":"sub_df","e31726fb":"sub_df = pd.melt(sub_df[[\"Id\", \"age\", \"domain1_var1\", \"domain1_var2\", \"domain2_var1\", \"domain2_var2\"]], id_vars=[\"Id\"], value_name=\"Predicted\")\nsub_df[\"Id\"] = sub_df[\"Id\"].astype(\"str\") + \"_\" +  sub_df[\"variable\"].astype(\"str\")\n\nsub_df = sub_df.drop(\"variable\", axis=1).sort_values(\"Id\")","06c68bd8":"sub_df.to_csv(\"submission.csv\", index=False)","0735a5c6":"# Support Vector Regression (SVR) Stacking","9d5c8f1c":"### In the case, I use my dataset https:\/\/www.kaggle.com\/ngo1013\/brain-models","f7bf3160":"## SVR Stacking\n\n### This kernel use the ouput files submission_{name}.csv or training_{name}.csv from https:\/\/www.kaggle.com\/ngo1013\/preparation-for-stacking-by-regression-8-model\n### submission_{name}.csv \u30fb\u30fb\u30fb A submission file predicted using the {name} algorithm.\n### training_{name}.csv \u30fb\u30fb\u30fb A training file predicted using the {name} algorithm."}}