{"cell_type":{"f5332157":"code","722b47fa":"code","701a6ab9":"code","3350a6be":"code","4a281e01":"code","baae8e42":"code","6c3f4f9a":"code","d56d1dbc":"code","4b5b49ea":"code","2f0c4016":"code","fa77a98b":"code","8a39e5bf":"code","cdbd08d4":"code","3c910b82":"code","bba3d50e":"code","82ee22ad":"code","0440886b":"code","5b2ad0da":"code","810e5859":"code","e70c549e":"code","6280ebf8":"code","c690afcd":"code","b8567203":"code","5b28c8be":"code","f1c78009":"code","486e8ff7":"code","39399ee1":"code","ac74b555":"code","acf2a63b":"code","30c00559":"code","1f9fec63":"code","0f141f1b":"markdown"},"source":{"f5332157":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","722b47fa":"def precision_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TP[i]==0 or FP[i]==0):\n            TP[i]=0.00000001\n            FP[i]=0.00000001\n        sonuc+=(TP[i]\/(TP[i]+FP[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\n\ndef recall_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TP[i]==0 or FN[i]==0):\n            TP[i]=0.00000001\n            FN[i]=0.00000001\n        sonuc+=(TP[i]\/(TP[i]+FN[i]))\n       \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef accuracy_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        sonuc+=((TP[i]+TN[i])\/(TP[i]+FP[i]+TN[i]+FN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef specificity_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TN[i]==0 or FP[i]==0):\n            TN[i]=0.00000001\n            FP[i]=0.00000001\n        sonuc+=(TN[i]\/(FP[i]+TN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef NPV_hesapla(class_id,TP, FP, TN, FN):\n    sonuc=0\n    for i in range(0,len(class_id)):\n        if (TN[i]==0 or FN[i]==0):\n            TN[i]=0.00000001\n            FN[i]=0.00000001\n        sonuc+=(TN[i]\/(TN[i]+FN[i]))\n        \n    sonuc=sonuc\/len(class_id)\n    return sonuc\ndef perf_measure(y_actual, y_pred):\n    class_id = set(y_actual).union(set(y_pred))\n    TP = []\n    FP = []\n    TN = []\n    FN = []\n\n    for index ,_id in enumerate(class_id):\n        TP.append(0)\n        FP.append(0)\n        TN.append(0)\n        FN.append(0)\n        for i in range(len(y_pred)):\n            if y_actual[i] == y_pred[i] == _id:\n                TP[index] += 1\n            if y_pred[i] == _id and y_actual[i] != y_pred[i]:\n                FP[index] += 1\n            if y_actual[i] == y_pred[i] != _id:\n                TN[index] += 1\n            if y_pred[i] != _id and y_actual[i] != y_pred[i]:\n                FN[index] += 1\n\n\n    return class_id,TP, FP, TN, FN","701a6ab9":"df=pd.read_csv('..\/input\/audit-data\/audit_data.csv')","3350a6be":"df.Risk.value_counts()","4a281e01":"#I am deleting TOTAL, which is just the total of PARA_A and PARA_B and LOCATION_ID as these are not significant for prediction process\ncols_del=['LOCATION_ID','TOTAL']\n\ndf.drop(cols_del, axis=1, inplace=True)","baae8e42":"df.info()","6c3f4f9a":"#eksik de\u011ferlerin say\u0131s\u0131n\u0131 \u00f6\u011frenmek i\u00e7in\ndf.isna().sum()","d56d1dbc":"#Yukar\u0131da da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi Money_value'de bir eksik de\u011fer mevcut bunun yerine money_value alan\u0131n\u0131n ortalama de\u011ferini atayaca\u011f\u0131z\ndf['Money_Value'].fillna((df['Money_Value'].mean()), inplace=True)","4b5b49ea":"sns.countplot(df['Risk'], label = \"Count\") ","2f0c4016":"df.Risk.value_counts()","fa77a98b":"x=df.drop(['Risk'],axis=1)","8a39e5bf":"x.corr(method='pearson').style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","cdbd08d4":"x=x.drop(['Detection_Risk'],axis=1)","3c910b82":"x.columns","bba3d50e":"y=df[\"Risk\"]","82ee22ad":"y=y.values\ntype(y)","0440886b":"from sklearn.metrics import classification_report,precision_score,recall_score,f1_score,roc_auc_score,accuracy_score\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)\nscore_liste=[]\nauc_scor=[]\nprecision_scor=[]\nrecall_scor=[]\nf1_scor=[]\nLR_plus=[]\nLR_eksi=[]\nodd_scor=[]\nNPV_scor=[]\nyouden_scor=[]\nspecificity_scor=[]\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier","5b2ad0da":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nx_train = pd.DataFrame(sc_X.fit_transform(x_train))\nx_test = pd.DataFrame(sc_X.transform(x_test))","810e5859":"k=4\nknn = KNeighborsClassifier(n_neighbors = k)\nknn.fit(x_train,y_train)\ny_head=knn.predict(x_test)\nprint(\"KNN Algoritmas\u0131 ba\u015far\u0131m sonucu: \",knn.score(x_test,y_test))\n\nfrom sklearn.metrics import confusion_matrix\ncmknn = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmknn,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"KNN Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nknn_fpr,knn_tpr,knn_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\n\nLR_plus.append((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\nLR_eksi.append(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp)))\nodd_scor.append(((recall_hesapla(classid,tn,fp,fn,tp)\/(1-specificity_hesapla(classid,tn,fp,fn,tp))))\/(((1-recall_hesapla(classid,tn,fp,fn,tp))\/specificity_hesapla(classid,tn,fp,fn,tp))))\nyouden_scor.append((recall_hesapla(classid,tn,fp,fn,tp)+specificity_hesapla(classid,tn,fp,fn,tp)-1))\nprint(\"KNN algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))","e70c549e":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(x_train,y_train)\ny_head=dtc.predict(x_test)\nprint(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 i\u00e7in ba\u015far\u0131m sonucu: \",dtc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ndtc_fpr,dtc_tpr,dtc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\n\nprint(\"DTC algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmdtc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmdtc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahminde edilen de\u011fer\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Karar A\u011fa\u00e7lar\u0131 Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","6280ebf8":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=225,random_state=1)\nrfc.fit(x_train,y_train)\ny_head=rfc.predict(x_test)\nprint(\"Rastgele Orman Algoritmas\u0131 ba\u015far\u0131m sonucu: \",rfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nrfc_fpr,rfc_tpr,rfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Rastgele Orman algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmrfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmrfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Rastgele Orman Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","c690afcd":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_head=nb.predict(x_test)\nprint(\"Naive Bayes Algoritmas\u0131 ba\u015far\u0131m sonucu: \",nb.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nnb_fpr,nb_tpr,nb_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Naive Bayes algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmnb = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmnb,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Naive Bayes Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","b8567203":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_head=lr.predict(x_test)\nprint(\"Logistic Regresyon Algoritmas\u0131 ba\u015far\u0131m sonucu: \",lr.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nlrc_fpr,lrc_tpr,lrc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Lojistik Regresyon algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmlr = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmlr,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Lojistik Regresyon Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","5b28c8be":"from sklearn.svm import SVC\nsvc=SVC(random_state=1)\nsvc.fit(x_train,y_train)\ny_head=svc.predict(x_test)\nprint(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 ba\u015far\u0131m sonucu: \",svc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nsvc_fpr,svc_tpr,svc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Destek Vekt\u00f6r Makineleri algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmsvc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmsvc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Destek Vekt\u00f6r Makineleri Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","f1c78009":"gfc=GradientBoostingClassifier(n_estimators= 1000, max_leaf_nodes= 4, max_depth=None,random_state= 2,min_samples_split= 5)\ngfc.fit(x_train,y_train)\ny_head=gfc.predict(x_test)\nprint(\"Gradient Boosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",gfc.score(x_test,y_test))\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\ngfc_fpr,gfc_tpr,gfc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Gradient Boosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmgfc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmgfc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Gradient Boosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()\n","486e8ff7":"abc=AdaBoostClassifier(n_estimators=100, random_state=0)\nabc.fit(x_train,y_train)\ny_head=abc.predict(x_test)\nprint(\"AdaBoosting Classifier Algoritmas\u0131 ba\u015far\u0131m sonucu: \",abc.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nabc_fpr,abc_tpr,abc_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"AdaBoosting Classifier algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmabc = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmabc,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"AdaBoosting Classifier Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","39399ee1":"ysa=MLPClassifier(alpha=1, max_iter=1000)\nysa.fit(x_train,y_train)\ny_head=ysa.predict(x_test)\nprint(\"Yapay Sinir A\u011flar\u0131 Algoritmas\u0131 ba\u015far\u0131m sonucu: \",ysa.score(x_test,y_test))\n\n\nclassid,tn,fp,fn,tp=perf_measure(y_test,y_head)\nauc_scor.append(roc_auc_score(y_test,y_head))\nysa_fpr,ysa_tpr,ysa_trr=roc_curve(y_test,y_head)\nscore_liste.append(accuracy_hesapla(classid,tn,fp,fn,tp))\nprecision_scor.append(precision_hesapla(classid,tn,fp,fn,tp))\nrecall_scor.append(recall_hesapla(classid,tn,fp,fn,tp))\nf1_scor.append(f1_score(y_test,y_head,average='macro'))\nNPV_scor.append(NPV_hesapla(classid,tn,fp,fn,tp))\nspecificity_scor.append(specificity_hesapla(classid,tn,fp,fn,tp))\nTPR=recall_hesapla(classid,tn,fp,fn,tp)\nTNR=specificity_hesapla(classid,tn,fp,fn,tp)\nFPR=1-TNR\nif FPR==0:\n    FPR=0.00001\nFNR=1-TPR\nlreksi=FNR\/TNR\nlrarti=TPR\/FPR\nif lreksi==0:\n    lreksi=0.00000001\nLR_plus.append(TPR\/FPR)\nLR_eksi.append(FNR\/TNR)\nodd_scor.append(lrarti\/lreksi)\nyouden_scor.append(TPR+TNR-1)\nprint(\"Yapay Sinir A\u011flar\u0131 algoritmas\u0131 i\u00e7in s\u0131n\u0131fland\u0131rma raporu: \\n\",classification_report(y_test,y_head))\n\ncmysa = confusion_matrix(y_test,y_head)\nf, ax = plt.subplots(figsize =(5,5))\nsns.heatmap(cmysa,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"Tahmin Edilen\")\nplt.ylabel(\"Ger\u00e7ek De\u011fer\")\nplt.title(\"Yapay Sinir A\u011flar\u0131 Algoritmas\u0131 Karma\u015f\u0131kl\u0131k Matrisi\")\nplt.show()","ac74b555":"algo_liste=[\"KNN\",\"Decision Tree\",\"Random Forest\",\"Naive Bayes\",\"Linear Regression\",\"Support Vector Machine\",\"Gradient Boosting Classifier\",\"AdaBoosting Classifier\",\"Neural Network\"]\nscore={\"algo_list\":algo_liste,\"score_liste\":score_liste,\"precision\":precision_scor,\"recall\":recall_scor,\"f1_score\":f1_scor,\"AUC\":auc_scor,\"LR+\":LR_plus,\"LR-\":LR_eksi,\"ODD\":odd_scor,\"YOUDEN\":youden_scor,\"Specificity\":specificity_scor}","acf2a63b":"df=pd.DataFrame(score)\ndf","30c00559":"f,ax1 = plt.subplots(figsize =(15,15))\nsns.pointplot(x=df['algo_list'], y=df['score_liste'],data=df,color='lime',alpha=0.8,label=\"score_liste\")\nsns.pointplot(x=df['algo_list'], y=df['precision'],data=df,color='red',alpha=0.8,label=\"precision\")\nsns.pointplot(x=df['algo_list'], y=df['recall'],data=df,color='black',alpha=0.8,label=\"recall\")\nsns.pointplot(x=df['algo_list'], y=df['f1_score'],data=df,color='blue',alpha=0.8,label=\"f1_score\")\nsns.pointplot(x=df['algo_list'], y=df['AUC'],data=df,color='yellow',alpha=0.8,label=\"AUC\")\n\nsns.pointplot(x=df['algo_list'], y=df['LR-'],data=df,color='orange',alpha=0.8,label=\"YOUDEN\")\n\nsns.pointplot(x=df['algo_list'], y=df['YOUDEN'],data=df,color='brown',alpha=0.8,label=\"LR-\")\nsns.pointplot(x=df['algo_list'], y=df['Specificity'],data=df,color='purple',alpha=0.8,label=\"Specificity\")\nplt.xlabel('Algoritma ismi',fontsize = 15,color='blue')\nplt.ylabel('Score',fontsize = 15,color='blue')\nplt.xticks(rotation= 45)\nplt.title('Parkinson Disease (PD) Veriseti ile S\u0131n\u0131fland\u0131rma',fontsize = 20,color='blue')\nplt.grid()\nplt.legend()\nplt.show()","1f9fec63":"def graph_roc_curve_multiple(log_fpr, log_tpr, knear_fpr, knear_tpr, svc_fpr, svc_tpr, tree_fpr, tree_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gbc_fpr,gbc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr):\n    plt.figure(figsize=(16,8))\n    plt.title('ROC Curve \\n Top 9 Classifiers', fontsize=18)\n    plt.plot(log_fpr, log_tpr, label='Logistic Regression Classifier Score: {:.4f}'.format(roc_auc_score(y_test, lr.predict(x_test))))\n    plt.plot(knear_fpr, knear_tpr, label='KNears Neighbors Classifier Score: {:.4f}'.format(roc_auc_score(y_test, knn.predict(x_test))))\n    plt.plot(svc_fpr, svc_tpr, label='Support Vector Classifier Score: {:.4f}'.format(roc_auc_score(y_test, svc.predict(x_test))))\n    plt.plot(tree_fpr, tree_tpr, label='Decision Tree Classifier Score: {:.4f}'.format(roc_auc_score(y_test, dtc.predict(x_test))))\n    plt.plot(rfc_fpr, rfc_tpr, label='Random Forest Classifier Score: {:.4f}'.format(roc_auc_score(y_test, rfc.predict(x_test))))\n    plt.plot(nb_fpr, nb_tpr, label='Naive Bayes Classifier Score: {:.4f}'.format(roc_auc_score(y_test, nb.predict(x_test))))\n    plt.plot(gbc_fpr, gbc_tpr, label='Gradient Boosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, gfc.predict(x_test))))\n    plt.plot(abc_fpr, abc_tpr, label='AdaBoosting Classifier Score: {:.4f}'.format(roc_auc_score(y_test, abc.predict(x_test))))\n    plt.plot(ysa_fpr, ysa_tpr, label='Neural Network Score: {:.4f}'.format(roc_auc_score(y_test, ysa.predict(x_test))))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([-0.01, 1, 0, 1])\n    plt.xlabel('False Positive Rate', fontsize=16)\n    plt.ylabel('True Positive Rate', fontsize=16)\n    plt.annotate('Minimum ROC Score of 50% \\n (This is the minimum score to get)', xy=(0.5, 0.5), xytext=(0.6, 0.3),\n                arrowprops=dict(facecolor='#6E726D', shrink=0.05),\n                )\n    plt.legend()\n    \ngraph_roc_curve_multiple(lrc_fpr, lrc_tpr, knn_fpr, knn_tpr, svc_fpr, svc_tpr, dtc_fpr, dtc_tpr,rfc_fpr,rfc_tpr,nb_fpr,nb_tpr,gfc_fpr,gfc_tpr,abc_fpr,abc_tpr,ysa_fpr,ysa_tpr)\nplt.show()","0f141f1b":"Yukar\u0131da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi Detection_Risk alan\u0131na ait herhangi bir korelasyon bulunmamaktad\u0131r. Bu y\u00fczden verimizden \u00e7\u0131kar\u0131yoruz."}}