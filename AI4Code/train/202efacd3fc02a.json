{"cell_type":{"6acd71f3":"code","0966dac7":"code","e9be1ce0":"code","619ddd14":"code","663ff051":"code","3eafdd9b":"code","b28933d5":"code","4262a75f":"code","3bd241a3":"code","63abd81f":"code","986122e1":"code","2013567b":"code","3804d97b":"code","2500bb5a":"code","fe815b65":"code","f884e455":"markdown","a51ca997":"markdown","25a5dcd9":"markdown","d2a6ca28":"markdown","a4bbc44b":"markdown","eebef2f6":"markdown","ae20632a":"markdown","4838d071":"markdown","233daedf":"markdown","4f46c367":"markdown","8f18e2f7":"markdown","965fe3a4":"markdown","21f2e31f":"markdown"},"source":{"6acd71f3":"import os\nimport cv2\nimport numpy as np \nimport matplotlib.pyplot as plt\n\ndata_dir = '\/kaggle\/input\/image-grid'\nadtn_dir = '\/kaggle\/input\/bosung'\n\ndata_file_1 = os.listdir(data_dir)\ndata_file_2 = os.listdir(adtn_dir)\n\ndata_file_1.sort()\ndata_file_2.sort()\n\nprint(data_file_1)\nprint(data_file_2)","0966dac7":"path_1 = os.path.join(data_dir, 'fig4.jpg')\n\nimg = cv2.imread(path_1)\nimg_rgb_plt = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.figure(figsize = [10, 9])\nplt.imshow(img_rgb_plt)","e9be1ce0":"from IPython.core.display import Image, display\ndisplay(Image(os.path.join(adtn_dir, 'hsv_range.png'), width=960, unconfined=True))","619ddd14":"import numpy as np\n\nlower_green = np.array([35, 10, 0])             \nupper_green = np.array([70, 220, 255])\n\ndef extract_color_range(img_path, lower_vl, upper_vl, crc = 0):\n    \"\"\"\n    img_path (str) : path to image\n    lower_vl, upper_vl : 1D_array of 3 values H(0-180), S(0-255), V(0-255)\n    crc (integer in (0, 255)) : complement_range_color. For example 0 for black and 255 for white\n    \"\"\"\n    img = cv2.imread(img_path)\n\n    ## convert the img_scr to HSV mode\n    hsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n\n    ## put the range of green colors to the mask in HSV's mode\n    mask_green = cv2.inRange(hsv_img, lower_vl, upper_vl)\n\n    ## get the image_area which have the green_colors\n    extract_range = cv2.bitwise_and(img, img, mask = mask_green)\n\n    ## convert to RGB mode\n    extract_range = cv2.cvtColor(extract_range, cv2.COLOR_BGR2RGB)\n\n    ## covert the complement_range to any color\n    extract_range[extract_range == [0, 0, 0]] = crc\n\n    ## display\n    return extract_range\n\n\nplt.figure(figsize = (25, 8))\nplt.subplot(131); plt.imshow(img_rgb_plt), plt.title('original images')\n\nplt.subplot(132); w_green_RBG = extract_color_range(path_1, lower_green, upper_green, 255)\nplt.imshow(w_green_RBG); plt.title('Extract green color \\n fixed complement_range = 255 (white)')\n\nplt.subplot(133); b_green_RBG = extract_color_range(path_1, lower_green, upper_green)\nplt.imshow(b_green_RBG); plt.title('Extract green color \\n fixed complement_range = 0 (black)')\n\nplt.show()","663ff051":"mask = w_green_RBG[w_green_RBG == 255]\nmask.shape, img.shape","3eafdd9b":"green_prop = 1 - mask.shape[0] \/ (960*960*3)\ngreen_prop","b28933d5":"path_2 = os.path.join(data_dir, \"fig3.jpg\")\nimg_2 = cv2.imread(path_2)\nimg2_rgb_plt = cv2.cvtColor(img_2, cv2.COLOR_BGR2RGB)\n\nlower_blue = np.array([52, 15, 40])\nupper_blue = np.array([120, 255, 255])\n\nw_blue_RBG = extract_color_range(path_2, lower_blue, upper_blue, 255)\nb_blue_RBG = extract_color_range(path_2, lower_blue, upper_blue)\n\nfig2, (ax1, ax2, ax3) = plt.subplots(ncols=3, nrows=1, figsize=(23, 8),\n                                sharex=True, sharey=True)\n\n\nax1.set_title(\"original image\"); ax1.imshow(img2_rgb_plt)\nax2.set_title(\"extract sky \\n fixed complement_range = 255\"); ax2.imshow(w_blue_RBG)\nax3.set_title(\"extract sky \\n fixed complement_range = 0\"); ax3.imshow(b_blue_RBG);","4262a75f":"mask2 = b_blue_RBG[b_blue_RBG == 0]\nw, h, k = img.shape\nprint(\"sky_prop = \", mask2.shape[0] \/ (w*h*k)) ","3bd241a3":"lower_pink = np.array([160, 120, 30])        \nupper_pink = np.array([180, 255, 255])\n\nw_pink_RBG = extract_color_range(path_2, lower_pink, upper_pink, 255)\nb_pink_RBG = extract_color_range(path_2, lower_pink, upper_pink)\n\nfig2, (ax1, ax2, ax3) = plt.subplots(ncols=3, nrows=1, figsize=(23, 8),\n                                sharex=True, sharey=True)\n\n\nax1.set_title(\"original image\"); ax1.imshow(img2_rgb_plt)\nax2.set_title(\"extract flower \\n fixed complement_range = 255\"); ax2.imshow(w_pink_RBG)\nax3.set_title(\"extract flower \\n fixed complement_range = 0\"); ax3.imshow(b_pink_RBG);","63abd81f":"mask3 = b_pink_RBG[b_pink_RBG == 0]\nw, h, k = img.shape\nprint(\"flower_prop = \", 1 - mask3.shape[0] \/ (w*h*k)) ","986122e1":"lower_yellow = np.array([14, 70, 70])             \nupper_yellow = np.array([30, 255, 255])\n\nw_yellow_RBG = extract_color_range(path_2, lower_yellow, upper_yellow, 255)\nb_yellow_RBG = extract_color_range(path_2, lower_yellow, upper_yellow)\n\nfig2, (ax1, ax2, ax3) = plt.subplots(ncols=3, nrows=1, figsize=(23, 8),\n                                sharex=True, sharey=True)\nax1.set_title(\"original image\"); ax1.imshow(img2_rgb_plt)\nax2.set_title(\"extract building \\n fixed complement_range = 255\"); ax2.imshow(w_yellow_RBG)\nax3.set_title(\"extract building \\n fixed complement_range = 0\"); ax3.imshow(b_yellow_RBG);\n\nmask4 = b_yellow_RBG[b_yellow_RBG == 0]\nw, h, k = img.shape\nprint(\"building_prop = \", mask4.shape[0] \/ (w*h*k))","2013567b":"path_3 = os.path.join(data_dir, 'girl_face_1.jpg')\nimg_3 = cv2.imread(path_3)\nimg3_rgb_plt = cv2.cvtColor(img_3, cv2.COLOR_BGR2RGB)\n\nlower_yellow = np.array([1, 2, 2])             \nupper_yellow = np.array([22, 170, 255])\n\nw_yellow_RBG = extract_color_range(path_3, lower_yellow, upper_yellow, 255)\nb_yellow_RBG = extract_color_range(path_3, lower_yellow, upper_yellow)\n\nfig2, (ax1, ax2, ax3) = plt.subplots(ncols=3, nrows=1, figsize=(23, 6),\n                                sharex=True, sharey=True)\nax1.set_title(\"original image\"); ax1.imshow(img3_rgb_plt)\nax2.set_title(\"extract skin&hair \\n fixed complement_range = 255\"); ax2.imshow(w_yellow_RBG)\nax3.set_title(\"extract skin&hair \\n fixed complement_range = 0\"); ax3.imshow(b_yellow_RBG);","3804d97b":"from skimage import io\nfrom skimage import color\n\npath_3 = os.path.join(adtn_dir, \"monkey.jpg\")\n\n# Load picture, convert to grayscale and detect edges\nmonkey = io.imread(path_3)\n\n## Extract the exactly region contains the monkey\nimage_rgb = monkey[0:500, 720: 1150]\n\n## convert the image to gray_mode\nimage_gray = color.rgb2gray(image_rgb)\n\n## Extract exactly the edges from the images\nedges = cv2.Canny(monkey[0:500, 720: 1150], 225, 450)\n\n## display\nplt.figure(figsize = [20, 10])\nplt.subplot(221); plt.imshow(monkey)\nplt.subplot(222); plt.imshow(image_rgb)\nplt.subplot(223); plt.imshow(image_gray)\nplt.subplot(224); plt.imshow(edges)\nplt.show()","2500bb5a":"ret_val, monkey_2 = cv2.threshold(edges, 100, 255, 0)\ncontours, hierarchy = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\nim_contours = cv2.drawContours(edges, contours, -1, (255,0,0), -1)\n\nfig2, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(18, 8),\n                                sharex=True, sharey=True)\n\nax1.set_title('Original picture')\nax1.imshow(image_rgb)\n\nax2.set_title('Filled color bounded by boundary')\nax2.imshow(im_contours)\n\nplt.show()","fe815b65":"mask5 = im_contours[im_contours == 0]\nw,h,k = image_rgb.shape\nprint(\"prop_monkey_face = \", 1 - mask5.shape[0]\/(w*h))","f884e455":"**Finally, find the proportion of `green_color (range)`**","a51ca997":"**Draw the `contours` on the image then fill in the `yellow`**","25a5dcd9":"#### 1. Extract an image_region based on a color_range_of_image by using HSV_space; then calculate the proportion of the region over whole image.\n\n**Loading an image with `cv2` and `matplotlib`**\n\nTo read an image; we use\n\n            cv2.imread(path, color_flag = {0, 1,-1} )\n            \nNext, to display the image with `matplotlib` in `Red Green Blue` mode; we must change the `color_space` from `BGR (cv2)` to `RGB (matplotlib)` before using `imshow`","d2a6ca28":"**Explore how many pixel is white??**","a4bbc44b":"#### 2. Find the proportion by using boundary_extraction.\n\nIn this section; we will find the proportion of a `monkey_face` which be bounded by the given boundaries.\n\nBeside that; we will study how to load an image in `scikit-image` or `skimage`","eebef2f6":"**Example 1.3.** and for the flower","ae20632a":"**Example 1.4.** For the building","4838d071":"In this section, we will study 2 problems:\n\n            1. Extract an image_region based on a color_range_of_image by using HSV_space; then calculate the proportion of the region over whole image.\n            2. Find the proportion by using boundary_extraction.\n            \nFirst of all, viewing what is in the input_folder","233daedf":"To extract an `image_region` based on a given `color_range`; \n- Firstly, we must define the `upper_color_range & lower_color_range`.\n- Next, convert the `image_source` to `HSV mode` then create the `mask_color` that which pixel is in this `color_range`.\n- Finally, using `bitwise_and` to keep the image_region and fill black in the complement.\n\nIn the following code; to convenient, I use\n\n                            green_RBG[green_RBG == [0, 0, 0]] = 255\n\nto asign the `(black)` pixels (`values = [0, 0, 0]`) to `white ([255, 255, 255)`","4f46c367":"Now, using `hsv` and define a `green_range_color` in the following image","8f18e2f7":"#### Example 1.5. Hair extraction","965fe3a4":"Now. find the proportion of the monkey_faces in the `original_images`","21f2e31f":"**Example 1.2.** Find the proportion of the sky in the following image"}}