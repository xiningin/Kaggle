{"cell_type":{"5d26f0c0":"code","bd5d0ae0":"code","f250d288":"code","73dae01f":"code","d3bce8bf":"code","c49638b4":"code","9c84847e":"code","ebd5fb45":"code","1ae14d0d":"code","468e7a25":"code","54d2d02c":"code","2ee6e76f":"code","c74d947b":"code","ddd9c4b2":"code","b49c90a8":"code","4a6ffb96":"code","cb721c6d":"code","b88dceb4":"code","02592fff":"code","f6bf2f0d":"code","1ee6f517":"code","dd835f0d":"code","cee3c230":"code","a6d11d71":"code","d312a064":"code","0828c20d":"code","94b90c8c":"code","c2e65ef3":"code","a515b2fb":"code","8897ec1b":"markdown","41ed25ba":"markdown","2e387405":"markdown","17546868":"markdown","a83fe44c":"markdown","2ac0504c":"markdown","517ffc69":"markdown","4bf0774e":"markdown","b4b2bac1":"markdown","f80df237":"markdown","aa9c2fd2":"markdown","cbf48977":"markdown"},"source":{"5d26f0c0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf","bd5d0ae0":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","f250d288":"print(\"Training set dimension: {}\".format(train.shape))\nprint(\"Test set dimension: {}\".format(test.shape))\nprint(train.info())\nprint(train.head())","73dae01f":"test.head()","d3bce8bf":"X_train = train.loc[:,'pixel0':'pixel783']\ny_train = train.loc[:,'label']\nX_test = test.copy()\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","c49638b4":"print(\"Number of categories: {}\".format(len(y_train.value_counts())))\nprint(y_train.value_counts().sort_index())","9c84847e":"temp = X_train.loc[0,:]\ntemp = temp.values.reshape((28, 28)) \n\nlabel = y_train[0]\n\nplt.figure()\nplt.imshow(temp)\nplt.colorbar()\nplt.grid(False)\nplt.title(\"True label is {}\".format(label))\nplt.show()","ebd5fb45":"print(\"Maximum pixel value is {}\".format(max(X_train.max())))\nprint(\"Minimum pixel value is {}\".format(min(X_train.min())))","1ae14d0d":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","468e7a25":"print(\"Maximum pixel value is {}\".format(max(X_train.max())))\nprint(\"Minimum pixel value is {}\".format(min(X_train.min())))","54d2d02c":"# build\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(128, activation = tf.nn.relu, input_shape = (28*28,)))\nmodel.add(tf.keras.layers.Dense(10, activation = tf.nn.softmax))","2ee6e76f":"# compile\nmodel.compile(optimizer = 'adam',\n              loss = 'sparse_categorical_crossentropy',\n              metrics = ['accuracy'])","c74d947b":"EPOCH = 5\n\nmodel.fit(X_train, y_train, epochs = EPOCH, verbose = 1, validation_split = 0.3)","ddd9c4b2":"pred_train = model.predict(X_train)","b49c90a8":"pred_train[0]","4a6ffb96":"np.argmax(pred_train[0])","cb721c6d":"# true label\ny_train[0]","b88dceb4":"pred_train[1]","02592fff":"np.argmax(pred_train[1])","f6bf2f0d":"# true label\ny_train[1]","1ee6f517":"pred_test = model.predict(X_test)","dd835f0d":"pred_test.shape","cee3c230":"pred_test[0]","a6d11d71":"np.argmax(pred_test[0])","d312a064":"test_id = np.arange(1, X_test.shape[0]+1,1)\ntest_id","0828c20d":"predictions = np.argmax(pred_test, axis = 1)","94b90c8c":"print(test_id.shape)\nprint(predictions.shape)","c2e65ef3":"sub = pd.DataFrame(data = {'ImageId':test_id,\n                           'Label':predictions})","a515b2fb":"sub.head()","8897ec1b":"# Visualization","41ed25ba":"# Setup","2e387405":"# Preprocess","17546868":"# Model","a83fe44c":"# Submission","2ac0504c":"Scale the values to be 0 to 1.","517ffc69":"Each image has 28 pixels height and width. Each pixel indicates brightness, 0 to 255, with higher number meaning darker.<br>\npixel0 to pixel27 is the first row of an image, and pixel28 to pixel 55 is the second row of an image.","4bf0774e":"# Prediction of training set","b4b2bac1":"# Prediction of test set","f80df237":"The location of prediction is exactly the predicted label!","aa9c2fd2":"# Data","cbf48977":"# Training"}}