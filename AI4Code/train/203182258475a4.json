{"cell_type":{"40d91093":"code","90c28dbb":"code","8c1ae534":"code","6c703ec7":"code","b4c5105f":"code","620390cf":"code","b5450adb":"code","d7ab88cc":"code","1bc1abd6":"code","7eb0c0b6":"code","6db11c13":"code","4b303b49":"code","7dc51caf":"code","3361f23a":"code","eec744a4":"code","70be66a5":"code","5b5fe1a2":"code","6461492e":"code","c01dff52":"code","82046dc1":"code","3b86570d":"code","751962b0":"code","356ea2bf":"code","b2dd6b38":"code","8bcea9ae":"code","a6510c42":"code","b2579605":"code","7ae5d021":"code","4e27110d":"code","be50a0eb":"code","9679b013":"code","71fdc4dd":"code","d953cbbb":"code","2e153af3":"code","02ede619":"code","7b0679a5":"code","87a756d9":"code","7d9c10f5":"code","5bcff958":"code","0a2c7b62":"code","cf7c9588":"code","14c40e1e":"code","6a1d1595":"code","0643eb29":"code","b910576e":"code","368af19e":"code","b024b4ed":"code","514b3055":"code","b601c67d":"code","a230d7ee":"code","bef4db48":"code","3e4c6701":"code","ac6e311d":"code","e2fe4239":"markdown","2ae9a39b":"markdown","30cc5ab3":"markdown","9cc9c3de":"markdown","ad330677":"markdown","28413b3f":"markdown","933f898f":"markdown","afaffd22":"markdown","7a378261":"markdown"},"source":{"40d91093":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer","90c28dbb":"movies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\ncredits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")","8c1ae534":"movies.head(3)","6c703ec7":"credits.head(2)","b4c5105f":"movies = movies.merge(credits,on='title')","620390cf":"movies.head(2)","b5450adb":"movies.info()","d7ab88cc":"movies = movies[['id','genres','keywords','title','overview','cast','crew']]","1bc1abd6":"movies.head(1)","7eb0c0b6":"movies.isnull().sum()","6db11c13":"movies.dropna(inplace=True)","4b303b49":"movies.duplicated().sum()","7dc51caf":"movies.iloc[0].genres","3361f23a":"import ast","eec744a4":"def convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","70be66a5":"movies['genres'] = movies['genres'].apply(convert)","5b5fe1a2":"movies.head(2)","6461492e":"movies['keywords'].apply(convert)","c01dff52":"movies['keywords'] = movies['keywords'].apply(convert)","82046dc1":"## movies['cast'][0]","3b86570d":"#For Cast name \ndef convert3(obj):\n    L = []\n    counter = 0\n    for i in ast.literal_eval(obj):\n        if counter != 3:\n            L.append(i['name'])\n            counter+= 1\n        else:\n            break\n    return L","751962b0":"movies['cast'] = movies['cast'].apply(convert3)","356ea2bf":"movies.head(3)","b2dd6b38":"## movies['crew'][0]","8bcea9ae":"def fetchdirector(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n            break\n    return L","a6510c42":"movies['crew'] = movies['crew'].apply(fetchdirector)","b2579605":"movies.head(3)","7ae5d021":"movies.overview[0]","4e27110d":"movies['overview'] = movies['overview'].apply(lambda x:x.split())","be50a0eb":"movies.dtypes","9679b013":"movies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \",\"\") for i in x])","71fdc4dd":"movies.head()","d953cbbb":"movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies ['crew']","2e153af3":"movies.head(5)","02ede619":"new_df = movies[['id','title','tags']]","7b0679a5":"#list into string conversion \nnew_df['tags'] = new_df['tags'].apply(lambda x: \" \".join(x))","87a756d9":"new_df['tags'][0]","7d9c10f5":"#convert it into lower case for best practise \nnew_df['tags'] = new_df['tags'].apply(lambda x: x.lower())","5bcff958":"from sklearn.feature_extraction.text import CountVectorizer","0a2c7b62":"cv = CountVectorizer(max_features=5000,stop_words='english')","cf7c9588":"vectors = cv.fit_transform(new_df['tags']).toarray()","14c40e1e":"vectors","6a1d1595":"vectors[1]","0643eb29":"cv.get_feature_names()","b910576e":"#stemming ['loved','loving'] to ['love','love']","368af19e":"#ecledian distance. -  for higher data set fails \n#Use -  cosine Distance \n# distance x 1\/similarity ","b024b4ed":"from sklearn.metrics.pairwise import cosine_similarity","514b3055":"similarity = cosine_similarity(vectors)","b601c67d":"sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]","a230d7ee":"def recommend(movie):\n    movies_index = new_df[new_df['title'] == movie].index[0]\n    distances = similarity[movies_index]\n    movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]\n    \n    for i in movies_list:\n        print(new_df.iloc[i[0]].title)","bef4db48":"recommend('Gandhi, My Father')","3e4c6701":"import pickle","ac6e311d":"new_df.sample(10)","e2fe4239":"# Import - Important libraries\n - Pandas for cleaning and Exploring purpose \n - Numpy for mathematical conditions \n - Sklearn for vectorization ","2ae9a39b":"# creating tags by concatination following columns -  \n - overview\n - genres\n - keywords \n - casta \n - crew","30cc5ab3":"Checking missing data","9cc9c3de":"# Recoganizing Importent columns Importent columns \n - Genres\n - Keywords\n - title\n - Overview \n - id\n - cast\n - crew\n","ad330677":"# Movie Recommendation System -  top 5 Movies\n - Content Based Recommender System","28413b3f":"## Function calling for recommendation ","933f898f":"# Load Movie Data\n - Movies \n - Credits","afaffd22":"# convert Object list into list","7a378261":"# Joining two dataframs\n - Movies and Credits datafram on the basis of title"}}