{"cell_type":{"d338c16c":"code","17d6dffe":"code","d2e21086":"code","b21694bc":"code","91190410":"code","62989fc5":"code","26f37e16":"code","2b59594a":"code","3473eb8c":"code","2e7db2eb":"code","68cec13f":"code","86e574b2":"code","08d241ee":"code","381e9b54":"code","1e208c8e":"code","e2abf789":"code","07841d40":"code","fde75cb9":"code","f7d6a4d8":"code","a7b7a1a6":"code","8e3290b5":"code","db65523f":"code","4842c0a1":"code","9158e267":"code","ac9da60a":"code","6d18d90f":"code","ed113335":"code","2cdd9660":"code","d5815bdf":"code","11151cc0":"code","9f1fbe81":"code","7c4c3cd5":"code","9414a856":"code","b81b0684":"code","1efec093":"code","7e4a64f8":"code","c16219f5":"code","25af91fb":"code","546e5ff0":"code","158ee5ac":"code","8c9acd25":"markdown","b03eacef":"markdown","a9e5f68c":"markdown","77f53349":"markdown","0c1aa5d2":"markdown","4b0b80e6":"markdown","2c1f09f9":"markdown","466008ae":"markdown","d19c2ba0":"markdown","e7a70c07":"markdown","5b38d975":"markdown","50b75f61":"markdown","fa53de6e":"markdown","75b58da1":"markdown","4004c6b0":"markdown","6f2f81a7":"markdown","5bf2cadc":"markdown","ce98062d":"markdown","46c6c58b":"markdown","f2bdd5c1":"markdown","7c76984f":"markdown","afab22dd":"markdown","66a885f3":"markdown","4157392e":"markdown"},"source":{"d338c16c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17d6dffe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d2e21086":"train_file = '..\/input\/titanic\/train.csv'\ntest_file = '..\/input\/titanic\/test.csv'\nsub = '..\/input\/titanic\/gender_submission.csv'\ntrain_data = pd.read_csv (train_file)\ntest_data = pd.read_csv (test_file)\nsub_data = pd.read_csv (sub)\nprint (train_data.info ())\nprint ('\\n')\nprint (train_data.shape, '\\t', test_data.shape)","b21694bc":"sub_data.head ()","91190410":"train_data.head ()","62989fc5":"train_data.dtypes","26f37e16":"sns.countplot (train_data ['Survived'])","2b59594a":"print (train_data.shape)\nprint ('\\n')\nprint (train_data.isnull ().sum ())","3473eb8c":"train_data ['Age'] = train_data.groupby ('Pclass')['Age'].apply (lambda x : x.fillna (np.mean (x)))\ntrain_data ['Cabin'].fillna (0, inplace = True)\nV = train_data ['Embarked'].value_counts ().sort_values (ascending = False).index [0]\ntrain_data ['Embarked'] = train_data ['Embarked'].fillna (V)","2e7db2eb":"print (train_data.isnull ().sum ().sum ())","68cec13f":"train_data ['Parch'].value_counts ()","86e574b2":"train_data ['SibSp'].value_counts ()","08d241ee":"train_data.loc [train_data.Parch != 0, 'Parch'] = 1\ntrain_data.loc [train_data.SibSp != 0, 'SibSp'] = 1\ntrain_data.loc [train_data.Cabin != 0, 'Cabin'] = 1","381e9b54":"plt.figure (figsize = (8,12))\nplt.subplot (2,1,1)\nsns.distplot (train_data ['Age'])\nplt.subplot (2,1,2)\nsns.distplot (train_data ['Fare'])","1e208c8e":"print (round (train_data [['Age', 'Fare']].describe (),2))","e2abf789":"def combine (df1, df2):\n    J = []\n    for i in range (df1.shape [0]):\n        K = df1[i] +'_' + df2[i]\n        J.append (K)\n    return pd.Series (J)\ntrain_data ['Age_cat'] = pd.cut (train_data ['Age'], [0,15,35,55,80], labels = ['child', 'young','mature', 'old'])\ntrain_data ['Age_cat_Sex'] = combine (train_data ['Age_cat'], train_data ['Sex'])","07841d40":"def name_length (df):\n    J = []\n    for i in range (df.shape [0]):\n        K = len (df[i])\n        J.append (K)\n    return pd.Series (J)\ntrain_data ['Name_length'] = name_length (train_data ['Name'])","fde75cb9":"train_data ['Name_length'].hist ()","f7d6a4d8":"def treat_outliers (df):\n    K = round (np.mean (df) + np.std (df)*1.8)\n    return K\n\nupper_fare = treat_outliers (train_data ['Fare'])\ntrain_data.loc [train_data.Fare > upper_fare, 'Fare'] = upper_fare\n\nupper_name_length = treat_outliers (train_data ['Name_length'])\ntrain_data.loc [train_data.Name_length > upper_name_length, 'Name_length'] = upper_name_length","a7b7a1a6":"def ticket_no (df):\n    L = []\n    for i in range (df.shape [0]):\n        P = df.str.split ()[i][-1][0]\n        L.append (P)\n    return pd.Series (L)\ntrain_data ['ticket_no_first'] = ticket_no (train_data ['Ticket'])","8e3290b5":"train_data ['ticket_no_first'].unique()","db65523f":"cat_cols = ['Pclass', 'Age_cat_Sex', 'Embarked','Cabin', 'ticket_no_first', 'Parch', 'SibSp']\nnum_cols = ['Age','Fare', 'Name_length']","4842c0a1":"plt.figure (figsize = (12,10))\nfor i, col in enumerate (cat_cols):\n    plt.subplot (3,3,i+1)\n    sns.countplot (train_data [col], hue = 'Survived', data = train_data)\n    plt.xticks (rotation = 90)\n    \nplt.tight_layout ()","9158e267":"plt.figure (figsize = (12,8))\nfor i, col in enumerate (num_cols):\n    plt.subplot (2,2,i+1)\n    sns.boxplot (x = 'Survived', y = col, data = train_data)\n","ac9da60a":"train_X = train_data.drop ('Survived', axis = 1)\ny = train_data ['Survived']","6d18d90f":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn import svm\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV","ed113335":"# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(train_X, y, train_size=0.75, test_size=0.25,random_state=0)","2cdd9660":"# Preprocessing for numerical data\nnumerical_transformer = Pipeline (steps = [('scaler', MinMaxScaler ())])\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[('onehot', OneHotEncoder(handle_unknown='ignore'))])\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, num_cols),\n        ('cat', categorical_transformer, cat_cols)\n    ])\n# Define model\n#model = svm.SVC ()\n#model = XGBClassifier()\nmodel = LogisticRegression ()\n#model = RandomForestClassifier()\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n\n#param = {'model__n_estimators': [100, 1000, 10000], 'model__max_depth' : [5,8,10], 'model__random_state' : [0]}\nparam = {'model__penalty' : ['l1', 'l2'],'model__C' : np.logspace(-4, 4, 20),'model__solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], 'model__random_state' : [0]}\n#param = {'model__max_depth' : [5,7,9,11], 'model__learning_rate' : [0.01,0.1,1,10,100], 'model__n_estimators' : [100,1000,10000], 'model__random_state' : [0]}\n#param = {'model__C' : [0.1, 1, 10], 'model__gamma' : [0.00001, 0.0001, 0.001, 0.01, 0.1]}\n\ngrid = GridSearchCV (clf,param_grid = param, cv = 5, verbose=True, n_jobs=-1)","d5815bdf":"# Preprocessing of training data, fit model \ngrid.fit(X_train, y_train)","11151cc0":"grid.best_params_","9f1fbe81":"# Preprocessing for numerical data\nnumerical_transformer = Pipeline (steps = [('scaler', MinMaxScaler ())])\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[('onehot', OneHotEncoder(handle_unknown='ignore'))])\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, num_cols),\n        ('cat', categorical_transformer, cat_cols)\n    ])\n# Define model\n#model = svm.SVC (C = 100, gamma = 0.1, kernel = 'rbf')\n#model = XGBClassifier(max_depth=5, learning_rate=0.01, n_estimators=100, gamma=0, \n#                       min_child_weight=1, subsample=0.8, colsample_bytree=0.8, reg_alpha=0.005)\n\n\nmodel = LogisticRegression (C = 1.624, penalty = 'l1', random_state = 0, solver = 'liblinear')\n#model = LogisticRegression ()\n#param = {'penalty' : ['l1', 'l2'], 'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], 'random_state' : [0]}\n\n#model = RandomForestClassifier(n_estimators = 10000, max_depth = 5, random_state = 0)\n#model = XGBRegressor (n_estimators = 1000, learning_rate = 0.01, random_state = 0)\n# Bundle preprocessing and modeling code in a pipeline\n                      \nclf = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n","7c4c3cd5":"# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Make validation predictions and calculate mean absolute error\npred_valid = clf.predict(X_valid)","9414a856":"print (confusion_matrix (pred_valid, y_valid))\nprint (classification_report (pred_valid, y_valid))\nprint (accuracy_score (pred_valid, y_valid))","b81b0684":"test_data.info ()","1efec093":"test_data ['Age'] = test_data.groupby ('Pclass')['Age'].apply (lambda x : x.fillna (np.mean (x)))\ntest_data ['Cabin'] = test_data ['Cabin'].fillna (0)\ntest_data ['Fare'] = test_data ['Fare'].fillna (np.mean (test_data ['Fare']))","7e4a64f8":"test_data.loc [test_data.Parch != 0, 'Parch'] = 1\ntest_data.loc [test_data.SibSp != 0, 'SibSp'] = 1\ntest_data.loc [test_data.Cabin != 0, 'Cabin'] = 1","c16219f5":"test_data ['Age_cat'] = pd.cut (test_data ['Age'], [0,15,35,55,80], labels = ['child', 'young','mature', 'old'])\ntest_data ['Age_cat_Sex'] = combine (test_data ['Age_cat'], test_data ['Sex'])\ntest_data ['Name_length'] = name_length (test_data ['Name'])\ntest_data ['ticket_no_first'] = ticket_no (test_data ['Ticket'])","25af91fb":"test_data.loc [test_data.Fare > upper_fare, 'Fare'] = upper_fare\ntest_data.loc [test_data.Name_length > upper_name_length, 'Name_length'] = upper_name_length","546e5ff0":"predictions = clf.predict (test_data)","158ee5ac":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submissiont.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8c9acd25":"Target distribution","b03eacef":"# Import libraries","a9e5f68c":"Dtypes","77f53349":"# Training set\/ Holdout set","0c1aa5d2":"# Pipeline preparation","4b0b80e6":"Creating age-sex feature","2c1f09f9":"The charts above some the survival rates basis different features that have been considered.","466008ae":"Checking distributionis of available numerical columns","d19c2ba0":"Creating ticket no first digit\/letter feature","e7a70c07":"Checking distribution of name-length feature and presence of outliers","5b38d975":"Head","50b75f61":"Target and feature columns","fa53de6e":"Checking the impact of categorical features on the target outcome","75b58da1":"Missing values treatment","4004c6b0":"Library imports","6f2f81a7":"# Feature engineering","5bf2cadc":"Creating name-length feature","ce98062d":"Checking the impact of numerical features on the target outcome","46c6c58b":"# Import files","f2bdd5c1":"Checking the categorical and numerical features to be finally considered","7c76984f":"Checking descriptive stats of numerical columns","afab22dd":"Simplifying some columns","66a885f3":"Treating outliers","4157392e":"# Data preprocessing"}}