{"cell_type":{"d8939e45":"code","39d00891":"code","fea28368":"code","3f3c777f":"code","c1d767b9":"code","7cbe12b6":"code","c78249de":"code","32a6fc3b":"code","32e79a1a":"code","ce8a9c9b":"code","7edcfb53":"code","a4ed7bf4":"code","515b3b66":"code","19370b0c":"code","12838ded":"code","aed97fed":"code","4fe3b46e":"code","338c1d00":"code","79bd41b3":"code","676fb32a":"code","bdf07e06":"code","d3f5c514":"code","2cb82af8":"code","ab3637ba":"code","e483a998":"code","b97bc682":"code","b5bb5d01":"code","99b6a216":"code","fd516dc7":"code","ddfba3a6":"code","ab16fec3":"code","0145f676":"markdown","5bdcaad3":"markdown","6f98149e":"markdown","c5ef0d6c":"markdown","963911ad":"markdown","1fa02e1a":"markdown","31b1bb8e":"markdown","b9e8b315":"markdown","f17b8e50":"markdown","24adaac5":"markdown","c000fcba":"markdown","a95275dd":"markdown","f266a7b0":"markdown","4a66896d":"markdown","687e1749":"markdown"},"source":{"d8939e45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39d00891":"unclean_focus = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/unclean focus.csv')\ncclass = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/cclass.csv')\nbmw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv')\nmerc = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv')\nhyundi = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/hyundi.csv')\nfocus = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/focus.csv')\nvauxhall = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vauxhall.csv')\nunclean_cclass = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/unclean cclass.csv')\nvw = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv')\naudi = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\nford= pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')\nskoda = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv')\ntoyota = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/toyota.csv')","fea28368":"unclean_focus.head(5)","3f3c777f":"focus.head()","c1d767b9":"audi.head(5)","7cbe12b6":"bmw.head(5)","c78249de":"vw.head(5)","32a6fc3b":"cclass.head(5)","32e79a1a":"cclass['csv'] = 'cclass'\nbmw['csv'] = 'bmw'\nmerc['csv'] = 'merc'\nhyundi['csv'] = 'hyundi'\nfocus['csv'] = 'focus'\nvauxhall['csv'] = 'vauxhall'\nvw['csv'] = 'vw'\naudi['csv'] = 'audi'\nford['csv'] = 'ford'\nskoda['csv'] = 'skoda'\ntoyota['csv'] = 'toyota'","ce8a9c9b":"df_original = cclass.append([bmw, merc, hyundi, focus, vauxhall, vw, audi, ford, skoda, toyota], ignore_index=False, verify_integrity=False, sort=False)\ndf = cclass.append([bmw, merc, hyundi, focus, vauxhall, vw, audi, ford, skoda, toyota], ignore_index=False, verify_integrity=False, sort=False)","7edcfb53":"df","a4ed7bf4":"df","515b3b66":"df[df['tax(\u00a3)'].notnull() == True]","19370b0c":"df[(df['tax(\u00a3)'].notnull() == True) & (df['tax'].notnull()==True)]","12838ded":"df['tax(\u00a3)'].fillna(value=0, inplace=True)\ndf['tax'].fillna(value=0, inplace=True)\ndf['tax'] = df['tax(\u00a3)'] + df['tax']\ndf.drop(labels='tax(\u00a3)', axis=1, inplace=True)\ndf","aed97fed":"df.info()","4fe3b46e":"df.describe()","338c1d00":"def univariate_plots(column, data=df):\n    if data[column].dtype not in ['int64', 'float64']:\n        f, axes = plt.subplots(1,1,figsize=(15,5))\n        sns.countplot(x=column, data = data)\n        plt.xticks(rotation=90)\n        plt.suptitle(column,fontsize=20)\n        plt.show()\n    else:\n        g = sns.FacetGrid(data, margin_titles=True, aspect=4, height=3)\n        g.map(plt.hist,column,bins=100)\n        plt.show()\n    plt.show()","79bd41b3":"for column in df.columns:\n    univariate_plots(column)","676fb32a":"df['model'].value_counts()","bdf07e06":"(df[(df['year']>2020) | (df['year']<1990)]).describe()","d3f5c514":"(df[(df['year']<2020) | (df['year']>1990)]).describe()","2cb82af8":"def convert_year(year):\n    if year > 2020 or year < 1990:\n        year = 2017 \n    else:\n        year = year\n    \n    return year","ab3637ba":"df['year'] = df['year'].apply(convert_year)\ndf[(df['year']>2020) | (df['year']<1990)]","e483a998":"df[df['transmission'] == 'Other']","b97bc682":"for model in df[df['transmission'] == 'Other']['model'].unique():\n    print(model)\n    print(df[df['model'] == model]['transmission'].value_counts())","b5bb5d01":"def convert_transmission(transmission, model = df['model']):\n    if transmission not in ['Manual','Semi-Auto','Automatic']:\n        transmission = df[df['model'] == model]['transmission'].value_counts().reset_index()['index'][0]\n    else:\n        transmission = transmission\n    \n    return transmission","99b6a216":"df['transmission'] = df['transmission'].apply(convert_transmission)","fd516dc7":"sns.pairplot(df)","ddfba3a6":"categorical_columns = []\n\nfor column in df_original.columns:\n    if df_original[column].dtype == 'object':\n        categorical_columns.append(column)\n        \ndf_original = pd.get_dummies(df_original,columns=categorical_columns, dtype=int, drop_first=True)\ndf_original.fillna(0, inplace=True)\n\ny = df_original['price']\nX = df_original.drop(labels = ['price'], axis = 1)\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\nmodel = LinearRegression().fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint('r2_score:', metrics.r2_score (y_test, y_pred))","ab16fec3":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\n\ncategorical_columns = []\n\nfor column in df.columns:\n    if df[column].dtype == 'object':\n        categorical_columns.append(column)\n        \ndf = pd.get_dummies(df,columns=categorical_columns, dtype=int, drop_first=True)\ndf.fillna(0, inplace=True)\n\ny = df['price']\nX = df.drop(labels = ['price'], axis = 1)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)\n\nmodels = [DecisionTreeRegressor(), LinearRegression(), Ridge(),  Lasso()]\n\nfor model in models:\n    \n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n\n    from sklearn import metrics\n    print('Model:', model)\n    print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n    print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\n    print('r2_score:', metrics.r2_score (y_test, y_pred))\n    print('-------------------------------------')","0145f676":"What is unclean_focus\/focus and unclean_cclass\/cclass? I would like to compare these two pairs.","5bdcaad3":"The outlier years don't seem to have anything special, so I will just transform these to 2017 as this is the mean in terms of year of the rest of the data.","6f98149e":"Some initial observations about the dataset:\n\n* The oldest year is 1970 while mean 25th percantile is 2016. This inidcates that few of the cars are old models.\n* At least 50% of the cars fall within years 2016 to 2019.\n* The maximum year is 2060. Is this an error?\n* The range of mileage is very high. Possibly some outliers.\n* There seems to be some missing values in mpg and also in engine size and tax in guise of 0's.\n* The range of price is also high. Price and its relation with other features will be the main focus of this notebook.","c5ef0d6c":"# Some general univariate visualisations","963911ad":"There are two tax columns.","1fa02e1a":"The following are the outliers in the year (I will consider everything under 1990 and over 2020 as outlier. ","31b1bb8e":"I am going to drop the two 'unclean' datasets and going to combine the rest.","b9e8b315":"I will replace Nan values in tax columns with 0 and simply add them.","f17b8e50":"# Data cleaning","24adaac5":"I will first combine the different datasets as I would only want to work with one dataframe. I am hoping that the feature names are matching. (Surely, there must be a more effecient way of doing this..):","c000fcba":"Some columns are missing in various datasets, however, i will go ahead and combine them.","a95275dd":"There are a lot of car models in the data set. I will add a column with the main csv file name so as to make use of those as fetures as well. I will see how I can use this column.","f266a7b0":"The majority of the cars have manual transmission, while automatic and semi-automatic have almost similar distribution.But what about 'Other'?","4a66896d":"Work in progress..\n\nThe final output of this notebook is to create a model to predict car prices.\n\nDuring the process, I will perform some data cleaning and EDA. Note that I have very little knowledge about cars and models and their features, (I only know how to start a car and drive it..), so if I am going in a very wrong direction, be sure to point it out.","687e1749":"# Bivariate analysis"}}