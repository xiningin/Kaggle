{"cell_type":{"6e5f2aff":"code","479dbd26":"code","109abfbf":"code","ad5bd87c":"code","b5bf56fb":"code","b0c5382b":"code","3ecb1847":"code","d967b691":"code","68287ad6":"code","3bfba4b9":"code","c2371893":"code","b8d8f97e":"code","e215c26a":"code","b02ffa24":"code","c76f7932":"code","70dcf562":"code","9d9f4069":"code","43cceb21":"code","a944b658":"code","d28be775":"code","e65e5fae":"code","9f446e1a":"code","d27391bf":"code","1ade6f08":"code","4222f068":"code","043721f0":"code","d3d1f910":"code","c7d88177":"code","8ad9ca55":"code","7cae5a43":"code","5229c060":"code","0abce389":"code","3f31c65d":"code","deecef67":"code","cc3a3bd2":"code","90b1b44d":"code","5257f947":"code","5d1bfea7":"markdown","1fbdf804":"markdown","6b041c58":"markdown","3adf8b61":"markdown","95514745":"markdown"},"source":{"6e5f2aff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","479dbd26":"data = pd.read_csv(\"\/kaggle\/input\/cannabis-strains\/cannabis.csv\")","109abfbf":"data.head()","ad5bd87c":"data.describe()","b5bf56fb":"print(data[\"Flavor\"].isnull().values.sum())\ndata[\"Flavor\"] = data[\"Flavor\"].fillna(\"None\")","b0c5382b":"total_flavor = []\nmax_len = 0\ntotal_flavor.append(\"None\")\nfor val in data[\"Flavor\"].values:\n    print(val)\n    val = val.split(\",\")\n    \n    if len(val) > max_len:\n        max_len = len(val)\n    \n    for f in val:\n        if f not in total_flavor:\n            total_flavor.append(f)\n            ","3ecb1847":"print(len(total_flavor))\nprint(max_len)","d967b691":"print(data[\"Effects\"].isnull().values.sum())\n# data[\"Flavor\"] = data[\"Flavor\"].fillna(\"None\")","68287ad6":"total_effects = []\nmax_len = 0\nfor val in data[\"Effects\"].values:\n    print(val)\n    val = val.split(\",\")\n    \n    if len(val) > max_len:\n        max_len = len(val)\n        \n    for e in val:\n        if e not in total_effects:\n            total_effects.append(e)","3bfba4b9":"print(len(total_effects))\nprint(max_len)","c2371893":"split_data = data[\"Flavor\"].str.split(\",\")\nsplit_data = split_data.to_list()\nnames = [\"Flavor_1\", \"Flavor_2\", \"Flavor_3\", \"Flavor_4\"]\nnew_flavor = pd.DataFrame(split_data, columns=names)","b8d8f97e":"new_flavor = new_flavor.fillna(\"None\")","e215c26a":"new_flavor[\"Flavor_4\"].isnull().values.sum()\n\n# 2308 values of Flavor_4 column are Null, therefore dropping it.\nnew_flavor = new_flavor.drop(columns=[\"Flavor_4\"])\n\nnew_flavor","b02ffa24":"split_data = data[\"Effects\"].str.split(\",\").to_list()\nnames = [\"Effect_1\", \"Effect_2\", \"Effect_3\", \"Effect_4\", \"Effect_5\"]\n\nnew_effect = pd.DataFrame(split_data, columns=names).fillna(\"None\")","c76f7932":"new_effect","70dcf562":"new_effect.describe()","9d9f4069":"from sklearn.feature_extraction import FeatureHasher","43cceb21":"effect_hasher = FeatureHasher(n_features=3, input_type=\"string\")\nx = effect_hasher.fit_transform(total_effects)","a944b658":"print(total_effects)\nprint(x.toarray())\nlen(np.unique(x.toarray(), axis=0))","d28be775":"flavor_hasher = FeatureHasher(n_features=10, input_type=\"string\")\ny = flavor_hasher.fit_transform(total_flavor)","e65e5fae":"print(total_flavor)\nprint(y.toarray())\nlen(np.unique(y.toarray(), axis=0))","9f446e1a":"total_effects","d27391bf":"names = [\"Effect_1\", \"Effect_2\", \"Effect_3\", \"Effect_4\", \"Effect_5\"]\nnum_effect = pd.DataFrame([])\nfor name in names:\n    d = new_effect[name]\n    temp = effect_hasher.transform(d).toarray()\n    temp = pd.DataFrame(temp)\n    num_effect = pd.concat([num_effect, temp], axis=1)\n    ","1ade6f08":"print(num_effect.head(3))\nprint(new_effect.head(3))","4222f068":"names = [\"Flavor_1\", \"Flavor_2\", \"Flavor_3\"]\nnum_flavor = pd.DataFrame([])\nfor name in names:\n    d = new_flavor[name]\n    temp = flavor_hasher.transform(d).toarray()\n    temp = pd.DataFrame(temp)\n    num_flavor = pd.concat([num_flavor, temp], axis=1)","043721f0":"num_flavor.head(3)\n# print(new_flavor.head(1))","d3d1f910":"new_data = data.copy()","c7d88177":"new_data = pd.get_dummies(new_data, columns=[\"Type\"])\nnew_data","8ad9ca55":"new_data = new_data.drop(columns=[\"Strain\", \"Effects\", \"Flavor\", \"Description\"])\nnew_data = pd.concat([new_data, num_effect, num_flavor], axis=1)\nnew_data","7cae5a43":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom scipy.spatial.distance import cdist ","5229c060":"# Suppose a customer smoked the 100-Og cannabis and like it. So, I took the features of 100-Og and predicted the recommendations.\ntest_values = [ 4.,  1.,  0.,  0., -3.,  3.,  0., -2.,  3., -2., -2.,  0.,  0.,\n       -1.,  3., -2.,  1.,  3.,  3.,  1.,  0.,  0.,  0.,  1.,  0.,  0.,\n        1.,  0., -1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,\n        0., -2.,  1.,  0.,  0.,  1.,  0.,  0.,  0., -2.]","0abce389":"kmeans = KMeans(n_jobs = -1, n_clusters = 30, init='k-means++', max_iter=500)\nmodel = kmeans.fit(new_data)\ntest_values = np.array(test_values)\ntest_values = np.reshape(test_values, (1, -1))\nmodel.predict(test_values)","3f31c65d":"# KMeans Clustering\n# converting the results into a dataframe and plotting them\nframe = pd.DataFrame({'Cluster':range(1,100), 'Dist':Dist})\nplt.figure(figsize=(50,25))\nplt.plot(frame['Cluster'], frame['Dist'], marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Inertia')","deecef67":"from sklearn.neighbors import NearestNeighbors\nnbrs = NearestNeighbors(n_neighbors=5).fit(new_data)","cc3a3bd2":"dist, recommends = nbrs.kneighbors([test_values])\nprint(dist)\nprint(recommends)","90b1b44d":"for index in recommends[0]:\n    print(data.values[index])","5257f947":"from sklearn.metrics.pairwise import cosine_similarity\nres = cosine_similarity(new_data)\nprint(res)","5d1bfea7":"# Split the Flavor Column","1fbdf804":"# Modeling","6b041c58":"# Convert flavor and effects to numerical data","3adf8b61":"# Spliting the Effects column","95514745":"# Feature Hasher"}}