{"cell_type":{"d1cd6043":"code","b922e686":"code","378ab519":"code","4d8e55b0":"code","13ef12ab":"code","e7d8ad4c":"code","19e6c952":"code","29fc728a":"code","93cd6b86":"code","09bfab44":"code","24cf5e42":"code","640e0388":"code","1b34c7e9":"code","4659b41c":"code","46ec52f4":"code","ea9c9ee4":"code","2fef3da2":"code","260a21bc":"code","82a776e4":"code","fed0048c":"code","a94e0cbd":"markdown","72a5cb6f":"markdown","0334ea99":"markdown","9f9ce5f9":"markdown","210173c5":"markdown","727a0c7f":"markdown","cc6ea0c7":"markdown","fef4a4df":"markdown","41ce0227":"markdown","27a63b1e":"markdown","6cb68a0e":"markdown","6921259d":"markdown","3e9d5057":"markdown","0ae0b079":"markdown","a511ed4e":"markdown","a8a5e220":"markdown","6a66de80":"markdown","56f2d8fd":"markdown"},"source":{"d1cd6043":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b922e686":"#for data analysis and modeling\nimport tensorflow as tf\nfrom tensorflow.keras.layers import LSTM, GRU, Dense, Embedding, Dropout\nfrom tensorflow.keras.preprocessing import text, sequence \nfrom tensorflow.keras.models import Sequential\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\n#for text cleaning\nimport string\nimport re\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n#for visualization\nimport matplotlib.pyplot as plt\n","378ab519":"true = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\ntrue.head()","4d8e55b0":"fake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')\nfake.head()","13ef12ab":"true['truth'] = 1\nfake['truth'] = 0\ndf = pd.concat([true, fake], axis=0, ignore_index=True)\ndf.shape","e7d8ad4c":"%%time\ndef clean_text(txt):\n    \"\"\"\"\"\n    cleans the input text in the following steps\n    1- replace contractions\n    2- removing punctuation\n    3- spliting into words\n    4- removing stopwords\n    5- removing leftover punctuations\n    \"\"\"\"\"\n    contraction_dict = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\"}\n    def _get_contractions(contraction_dict):\n        contraction_re = re.compile('(%s)' % '|'.join(contraction_dict.keys()))\n        return contraction_dict, contraction_re\n\n    def replace_contractions(text):\n        contractions, contractions_re = _get_contractions(contraction_dict)\n        def replace(match):\n            return contractions[match.group(0)]\n        return contractions_re.sub(replace, text)\n\n    # replace contractions\n    txt = replace_contractions(txt)\n    \n    #remove punctuations\n    txt  = \"\".join([char for char in txt if char not in string.punctuation])\n    txt = re.sub('[0-9]+', '', txt)\n    \n    # split into words\n    words = word_tokenize(txt)\n    \n    # remove stopwords\n    stop_words = set(stopwords.words('english'))\n    words = [w for w in words if not w in stop_words]\n    \n    # removing leftover punctuations\n    words = [word for word in words if word.isalpha()]\n    \n    cleaned_text = ' '.join(words)\n    return cleaned_text\n    \ndf['data_cleaned'] = df['title'].apply(lambda txt: clean_text(txt))\n","19e6c952":"df['data_cleaned']","29fc728a":"xtrain, xtest, ytrain, ytest = train_test_split(df['data_cleaned'], df['truth'], shuffle=True, test_size=0.2)\n# find the length of the largest sentence in training data\nmax_len = xtrain.apply(lambda x: len(x)).max()\nprint(f'Max number of words in a text in training data: {max_len}')","93cd6b86":"max_words = 10000\ntokenizer = text.Tokenizer(num_words = max_words)\n# create the vocabulary by fitting on x_train text\ntokenizer.fit_on_texts(xtrain)\n# generate the sequence of tokens\nxtrain_seq = tokenizer.texts_to_sequences(xtrain)\nxtest_seq = tokenizer.texts_to_sequences(xtest)\n\n# pad the sequences\nxtrain_pad = sequence.pad_sequences(xtrain_seq, maxlen=max_len)\nxtest_pad = sequence.pad_sequences(xtest_seq, maxlen=max_len)\nword_index = tokenizer.word_index\n\nprint('text example:', xtrain[0])\nprint('sequence of indices(before padding):', xtrain_seq[0])\nprint('sequence of indices(after padding):', xtrain_pad[0])","09bfab44":"%%time\nembedding_vectors = {}\n# with open('\/kaggle\/input\/glove6b100d\/glove.6B.100d.txt','r',encoding='utf-8') as file:\nwith open('\/kaggle\/input\/glove42b300dtxt\/glove.42B.300d.txt','r',encoding='utf-8') as file:\n    for row in file:\n        values = row.split(' ')\n        word = values[0]\n        weights = np.asarray([float(val) for val in values[1:]])\n        embedding_vectors[word] = weights\nprint(f\"Size of vocabulary in GloVe: {len(embedding_vectors)}\")   \n","24cf5e42":"#initialize the embedding_matrix with zeros\nemb_dim = 300\nif max_words is not None: \n    vocab_len = max_words \nelse:\n    vocab_len = len(word_index)+1\nembedding_matrix = np.zeros((vocab_len, emb_dim))\noov_count = 0\noov_words = []\nfor word, idx in word_index.items():\n    if idx < vocab_len:\n        embedding_vector = embedding_vectors.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[idx] = embedding_vector\n        else:\n            oov_count += 1 \n            oov_words.append(word)\n#print some of the out of vocabulary words\nprint(f'Some out of valubulary words: {oov_words[0:5]}')","640e0388":"print(f'{oov_count} out of {vocab_len} words were OOV.')","1b34c7e9":"lstm_model = Sequential()\nlstm_model.add(Embedding(vocab_len, emb_dim, trainable = False, weights=[embedding_matrix]))\nlstm_model.add(LSTM(128, return_sequences=False))\nlstm_model.add(Dropout(0.5))\nlstm_model.add(Dense(1, activation = 'sigmoid'))\nlstm_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(lstm_model.summary())","4659b41c":"%%time\nbatch_size = 256\nepochs  = 10\nhistory = lstm_model.fit(xtrain_pad, np.asarray(ytrain), validation_data=(xtest_pad, np.asarray(ytest)), batch_size = batch_size, epochs = epochs)\n","46ec52f4":"#plot accuracy\nplt.figure(figsize=(15, 7))\nplt.plot(range(epochs), history.history['accuracy'])\nplt.plot(range(epochs), history.history['val_accuracy'])\nplt.legend(['training_acc', 'validation_acc'])\nplt.title('Accuracy')","ea9c9ee4":"\ntrain_lstm_results = lstm_model.evaluate(xtrain_pad, np.asarray(ytrain), verbose=0, batch_size=256)\ntest_lstm_results = lstm_model.evaluate(xtest_pad, np.asarray(ytest), verbose=0, batch_size=256)\nprint(f'Train accuracy: {train_lstm_results[1]*100:0.2f}')\nprint(f'Test accuracy: {test_lstm_results[1]*100:0.2f}')","2fef3da2":"emb_dim = embedding_matrix.shape[1]\ngru_model = Sequential()\ngru_model.add(Embedding(vocab_len, emb_dim, trainable = False, weights=[embedding_matrix]))\ngru_model.add(GRU(128, return_sequences=False))\ngru_model.add(Dropout(0.5))\ngru_model.add(Dense(1, activation = 'sigmoid'))\ngru_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(gru_model.summary())","260a21bc":"\nbatch_size = 256\nepochs  = 10\nhistory = gru_model.fit(xtrain_pad, np.asarray(ytrain), validation_data=(xtest_pad, np.asarray(ytest)), batch_size = batch_size, epochs = epochs)\n","82a776e4":"#plot accuracy\nplt.figure(figsize=(15, 7))\nplt.plot(range(epochs), history.history['accuracy'])\nplt.plot(range(epochs), history.history['val_accuracy'])\nplt.legend(['training_acc', 'validation_acc'])\nplt.title('Accuracy')","fed0048c":"train_gru_results = gru_model.evaluate(xtrain_pad, np.asarray(ytrain), verbose=0, batch_size=256)\ntest_gru_results = gru_model.evaluate(xtest_pad, np.asarray(ytest), verbose=0, batch_size=256)\nprint(f'Train accuracy: {train_gru_results[1]*100:0.2f}')\nprint(f'Test accuracy: {test_gru_results[1]*100:0.2f}')","a94e0cbd":"## GRU","72a5cb6f":"## Load the GloVe vectors","0334ea99":"## Create an embedding matrix with the GloVe vectors\n\nThe embedding matrix has a shape of (vocabulary length, embedding dimension). \n\nNote tht vacab_len is equal to max_words if we set that limit when tokenizing. Otherwise, vocab_len is equal to lenght of all words in word_index+1. \n\nEach row of the embedding matrix belongs to one word in the vocabulary (derived from xtrain) and it contains the weights of embedding vector of that word. <br>\n\nIn the code below, we initialze the embedding matrix with zeros. If a word in our word_index is not found in the embedding vectors from GloVe. \n\nThe weight of that word remains as zero. Below, you can see print out of the some example words that are out of vacabulary (OOV). ","9f9ce5f9":"# Text Cleaning\n\nWe need to clean the text first. If you start searching on the text cleaning domain, you realize there are many different techniques. But you may need just a few methods for the purpose of your NLP task. \n<br>\n<br>\nI looked up the following resources for the text cleaning that I used in this notebook: <br>\nhttps:\/\/machinelearningmastery.com\/clean-text-machine-learning-python\/ <br>\nhttps:\/\/mlwhiz.com\/blog\/2019\/01\/17\/deeplearning_nlp_preprocess\/<br>\n<br>\nHere are 5 steps that give decent text cleaning result for this task:<br>\n1.\t<b>Replace contractions<\/b><br>\nIn English, a contraction is a word or phrase that has been shortened by dropping one or more letters, such as \u201cI\u2019m\u201d instead of \u201cI am\u201d. We can either split the contractions (\u201cI\u2019m\u201d to \u201c I \u201d+\u201d \u2019m \u201d) or convert them to their full format (\u201cI\u2019m \u201d to \u201cI am\u201d). In my experience the latter works better as it's harder to find a word embedding for sub-words like \u201c \u2018m \u201c.<br>\n<br>\n2.\t<b>Removing punctuation<\/b><br>\nWe want the sentences without punctuations like commas, brackets, etc. Python has a constant called string.punctuation that provides a list of punctuation characters. We\u2019ll use this list to clean our text from punctuations.<br>\n<br>\n3.\t<b>Splitting into words<\/b><br>\nIn order to remove stopwords, we first need to split the text into words. We do this with word_tokenize function by NLTK. This function splits the text based on white space and punctuation.<br>\n<br>\n4.\t<b>Removing stopwords<\/b><br>\nStopwords are common words like \u201cthe\u201d, \u201cand\u201d, \u2026 which don\u2019t add much value to the meaning of the text. NLTK has a list of these words that can be imported and used to remove them from the text.<br>\n<br>\n5.\t<b>Removing leftover punctuations<\/b><br>\nI noticed after all this cleaning, there were still some words like \u201c\u2026but\u201d with dots in them. I added this last step to clean them up. <br>\n<br>\nNormalizing by case is also common practice. But, since we are using keras tokenizer later, we can skip this step as tokenizer does this step by default. There are other preprocessing techniques of text like Stemming, and Lemmatization. However, in the realm of deep learning NLP they are not necessary anymore. \n","210173c5":"# Combine fake and true dataframes\nCreate a new column 'truth' showing whethere the news is fake or real. Then, concatenate two datasets into one dataframe. We can choose to use either 'title' or 'text' column or concatenated 'title+text' for training. But, for the sake of processing time, we'll only use 'title'.\n","727a0c7f":"## Tokenize the input training sentences \n\nIn most of the NLP tasks, we need to represent each word in the text with an integer value (index) before feeding it to any model. In this way, the text will be converted to a sequence of integer values. One of the ways of doing that is with Keras. Keras provides an API for tokenizing the text. Tokenizer in Keras finds the frequency of each unique word and sort them based on their frequency. It then assigns an integer value starting from 1 to each word from the top.  You can see the index mapping dictionary by reading tokenizer.word_index.\n \nThere are two distinct steps in tokenizing in this way:\n1. fit_on_texts: We'll fit the tokenizer on our training data to create the word indices\n2. texts_to_sequences: using the word index dictionary from step above, we take this step to transform both train and test data. \n\nHere, we set num_words to a limit such as 10000 words. num_words is a parameter that defines the maximum number of words to keep, based on the word frequency. Keras actually keeps (num_words-1) words. We can leave the num_words to 'None' and tokenizer will pick all the words in the vacabulary. \n\n## Padding and truncating the input training sequences\nAll your input sequences to the model need to have the same length. In order to achieve that, we can use a function that pads the short sequences with zeros (options are 'pre' or 'post' which pads either before or after each sequence). It also truncates any sequence that is longer than a predefined parameter \"maxlen\". Truncating also has the option of 'pre' or 'post' which either truncates at the beginning or at the end of the sequences. ","cc6ea0c7":"# Word embedding using pre-trained GloVe vectors\n\nNow that we have tokenized the text, we use GloVe pretrained vectors. Word embeddings is a way to represent words with similar meaning to have a similar representation. \u202fUsing word embedding through GloVe, we can have a decent performance with models with even relatively small label training sets. \n\nYou can download GloVe pre-trained word vectors from the link below. There are different sizes of vocabulary and embedding dimension available. \n\nhttps:\/\/nlp.stanford.edu\/projects\/glove\/\n","fef4a4df":"# A Step by Step Guide to Text Classification with GloVe, LSTM, and GRU\n\nI have recently taken a great NLP course by deeplearning.ai (Andrew Ng) called \"Sequence Models\". I'm applying my learnings on this dataset and hope in this way I can share some knowledge as well. I will try to explain each step of the way.\n\n# Solution Framework\nHere are the steps we will be taking. We'll explain the details of each step throughout the notebook.\n\n![image.png](attachment:image.png)\n\n\n\n\n","41ce0227":"<a id='model_overview'><\/a>\n# Model Overview\n\nThe model architecture looks like the picture below. Although tokenizing is not part of the modeling, it's nice to show that this step is taken before feeding the text data to the LSTM models. This model is similar to one of the programming assignments in the \"Sequence model\" course. But, one of the LSTM layers are removed as it turned out that adding that extra layer doesn't help and even cause some overfitting. \n\n![image.png](attachment:image.png)","27a63b1e":"## LSTM\nLet's start with LSTM models.","6cb68a0e":"## Loading the required libraries","6921259d":"\n\n**Let me know if you have any suggestions to improve this notebook or if you tried something differently. Thank you. **","3e9d5057":"# Modeling\nNow, we can create a model and pre-train the embedding layer with the embedding matrix we just created based on GloVe vectors. You saw the [model overview](#model_overview) above. The first layer is Embedding. Embedding layer by Keras is a flexible layer that can be used also without any pre-trained weights. In that case, the Embedding layer is initialized with random weights and will learn an embedding for all of the words in the training dataset. In this exercise, we will set the weights of the Embedding layer to the embedding matrix from GloVe pre-trained vectors.This is a tranfer learning. \n\nAnother parameter in Embedding layer is \"trainable\" which can be set to True in case you want to fine-tune the word embedding or if you don't want the embedding weights to be updated you can set it to False. Here, we set it to False.<br>\n\nAfter the Embedding layer, we have a layer of LSTM or GRU and then a Dropout layer for regularization. \n\nThen we have a Dense layer with Sigmoid activation which transforms the output of previous layers to 0 or 1 (real or fake). \n","0ae0b079":"## GRU Evaluation\n\nLet's find the accuracy of training and testing dataset with GRU model below:","a511ed4e":"## LSTM - Evaluation\n\nLet's find the accuracy of training and testing dataset below:","a8a5e220":"![image.png](attachment:image.png)","6a66de80":"# Prepare train and test datasets\n\nUse the usual train_test_split by sklearn to split the data. ","56f2d8fd":"# Loading data and visualizing"}}