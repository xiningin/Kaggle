{"cell_type":{"4a9aebf8":"code","c5de322b":"code","08bb5cd2":"code","c1689bdd":"code","c721aa2a":"code","55a28912":"code","e47bfb7c":"code","c90f6ae5":"code","bf2c3576":"code","936bcd2a":"code","1ca57d8d":"code","4571b8b7":"code","492edde3":"code","f813f629":"code","928303d6":"code","067702ac":"code","876655fd":"code","74a3da88":"code","008b9b4a":"code","589d2697":"code","948e131f":"code","362a84ee":"code","62095f97":"code","9fa5420b":"code","7649ec59":"code","0ede91c9":"code","ef245de0":"code","833b429c":"code","ca717d6d":"code","3d9e0478":"code","190ad06d":"code","570b118f":"code","7ff00bbd":"code","e99b1865":"code","f5387dee":"code","e84c9b24":"code","f5801e93":"code","e81c98d5":"code","005e0aea":"code","7343b709":"code","d462271f":"code","485e1d10":"code","ad935509":"markdown","77754ba9":"markdown","da05418d":"markdown","c6723713":"markdown","65cbfd0b":"markdown","6ab88fae":"markdown","7276deb8":"markdown","33d08aa8":"markdown","6e33c870":"markdown","fdc81279":"markdown","39cee0eb":"markdown","d2dc0438":"markdown","9cf37c05":"markdown","22a786ed":"markdown","4485cff6":"markdown","f625bbf5":"markdown","801a97cd":"markdown","175ad07d":"markdown","e311ddbc":"markdown","69bce1e8":"markdown","af53a617":"markdown","9f794c93":"markdown","07cbc6b1":"markdown","f966afb8":"markdown","6c52cbf2":"markdown","2a04837c":"markdown","98051c97":"markdown","99a64afc":"markdown","5e19b06f":"markdown","312e6d22":"markdown","142e2786":"markdown","4b20b668":"markdown","972510d5":"markdown","adfa17e9":"markdown","1bc101b7":"markdown","6b8b55a1":"markdown","a93793d3":"markdown","351c173d":"markdown","0e8b55e9":"markdown","631e100a":"markdown","d9904ecb":"markdown","502c58d3":"markdown","a833711e":"markdown","cc22bff6":"markdown","2a547e4f":"markdown","d55b0afb":"markdown","9b346536":"markdown","f1c8ed3b":"markdown","425e364c":"markdown","53a28230":"markdown"},"source":{"4a9aebf8":"import pandas as pd\nfrom fbprophet import Prophet","c5de322b":"df = pd.read_csv(\"..\/input\/example-wp-log-peyton-manningcsv\/example_wp_log_peyton_manning.csv\")\ndf.head(5)","08bb5cd2":"m = Prophet()\nm.fit(df)","c1689bdd":"future = m.make_future_dataframe(periods=365)\nfuture.tail()","c721aa2a":"forecast = m.predict(future)\nforecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","55a28912":"fig1 = m.plot(forecast)","e47bfb7c":"fig2  = m.plot_components(forecast)","c90f6ae5":"df = pd.read_csv(\"..\/input\/example-wp-log-r\/wp_log_R.csv\")\ndf.head(5)","bf2c3576":"df['cap'] = 8.5","936bcd2a":"m = Prophet(growth='logistic')\nm.fit(df)","1ca57d8d":"future = m.make_future_dataframe(periods=1826)\nfuture['cap'] = 8.5\nfcst = m.predict(future)\nfig = m.plot(fcst)","4571b8b7":"df['y'] = 10 - df['y']\ndf['cap'] = 6\ndf['floor'] = 1.5\nfuture['cap'] = 6\nfuture['floor'] = 1.5\nm = Prophet(growth='logistic')\nm.fit(df)\nfcst = m.predict(future)\nfig = m.plot(fcst)","492edde3":"from fbprophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), m, forecast)","f813f629":"m = Prophet(changepoint_prior_scale=0.5)\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)","928303d6":"#checking prior scale at a very low value\nm = Prophet(changepoint_prior_scale=0.001)\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)","067702ac":"m = Prophet(changepoints=['2012-04-01'])\nforecast = m.fit(df).predict(future)\nfig = m.plot(forecast)","876655fd":"playoffs = pd.DataFrame({\n  'holiday': 'playoff',\n  'ds': pd.to_datetime(['2008-01-13', '2009-01-03', '2010-01-16',\n                        '2010-01-24', '2010-02-07', '2011-01-08',\n                        '2013-01-12', '2014-01-12', '2014-01-19',\n                        '2014-02-02', '2015-01-11', '2016-01-17',\n                        '2016-01-24', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nsuperbowls = pd.DataFrame({\n  'holiday': 'superbowl',\n  'ds': pd.to_datetime(['2010-02-07', '2014-02-02', '2016-02-07']),\n  'lower_window': 0,\n  'upper_window': 1,\n})\nholidays = pd.concat((playoffs, superbowls))","74a3da88":"m = Prophet(holidays=holidays)\nforecast = m.fit(df).predict(future)","008b9b4a":"forecast[(forecast['playoff'] + forecast['superbowl']).abs() > 0][\n        ['ds', 'playoff', 'superbowl']][-10:]","589d2697":"fig = m.plot_components(forecast)","948e131f":"m = Prophet(holidays=holidays)\nm.add_country_holidays(country_name='US')\nm.fit(df)","362a84ee":"m.train_holiday_names","62095f97":"forecast = m.predict(future)\nfig = m.plot_components(forecast)","9fa5420b":"from fbprophet.plot import plot_yearly\nm = Prophet().fit(df)\na = plot_yearly(m)","7649ec59":"from fbprophet.plot import plot_yearly\nm = Prophet(yearly_seasonality=20).fit(df)\na = plot_yearly(m)","0ede91c9":"m = Prophet(weekly_seasonality=False)\nm.add_seasonality(name='monthly', period=30.5, fourier_order=5)\nforecast = m.fit(df).predict(future)\nfig = m.plot_components(forecast)","ef245de0":"def is_nfl_season(ds):\n    date = pd.to_datetime(ds)\n    return (date.month > 8 or date.month < 2)\n\ndf['on_season'] = df['ds'].apply(is_nfl_season)\ndf['off_season'] = ~df['ds'].apply(is_nfl_season)","833b429c":"m = Prophet(weekly_seasonality=False)\nm.add_seasonality(name='weekly_on_season', period=7, fourier_order=3, condition_name='on_season')\nm.add_seasonality(name='weekly_off_season', period=7, fourier_order=3, condition_name='off_season')\n\nfuture['on_season'] = future['ds'].apply(is_nfl_season)\nfuture['off_season'] = ~future['ds'].apply(is_nfl_season)\nforecast = m.fit(df).predict(future)\nfig = m.plot_components(forecast)","ca717d6d":"df = pd.read_csv(\"..\/input\/air-passenger\/air_passengers.csv\")\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(50, freq='MS')\nforecast = m.predict(future)\nfig = m.plot(forecast)","3d9e0478":"m = Prophet(seasonality_mode='multiplicative')\nm.fit(df)\nforecast = m.predict(future)\nfig = m.plot(forecast)","190ad06d":"fig = m.plot_components(forecast)","570b118f":"m = Prophet(seasonality_mode='multiplicative')\nm.add_seasonality('quarterly', period=91.25, fourier_order=8, mode='additive')\nm.add_regressor('regressor', mode='additive')","7ff00bbd":"forecast = Prophet(interval_width=0.95).fit(df).predict(future)","e99b1865":"m = Prophet(mcmc_samples=300)\nforecast = m.fit(df).predict(future)","f5387dee":"fig = m.plot_components(forecast)","e84c9b24":"df = pd.read_csv(\"..\/input\/yosemite-tempscsv\/yosemite_temps.csv\")\nm = Prophet(changepoint_prior_scale=0.01).fit(df)\nfuture = m.make_future_dataframe(periods=300, freq='H')\nfcst = m.predict(future)\nfig = m.plot(fcst)","f5801e93":"fig = m.plot_components(fcst)","e81c98d5":"df2 = df.copy()\ndf2['ds'] = pd.to_datetime(df2['ds'])\ndf2 = df2[df2['ds'].dt.hour < 6]\nm = Prophet().fit(df2)\nfuture = m.make_future_dataframe(periods=300, freq='H')\nfcst = m.predict(future)\nfig = m.plot(fcst)","005e0aea":"future2 = future.copy()\nfuture2 = future2[future2['ds'].dt.hour < 6]\nfcst = m.predict(future2)\nfig = m.plot(fcst)","7343b709":"df = pd.read_csv(\"..\/input\/retail-sales\/retail_sales.csv\")\nm = Prophet(seasonality_mode='multiplicative').fit(df)\nfuture = m.make_future_dataframe(periods=3652)\nfcst = m.predict(future)\nfig = m.plot(fcst)","d462271f":"m = Prophet(seasonality_mode='multiplicative', mcmc_samples=300).fit(df)\nfcst = m.predict(future)\nfig = m.plot_components(fcst)","485e1d10":"future = m.make_future_dataframe(periods=120, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)","ad935509":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. We can get a suitable dataframe that extends into the future a specified number of days using the helper method Prophet.make_future_dataframe","77754ba9":"The number of potential changepoints can be set using the argument n_changepoints, but this is better tuned by adjusting the regularization","da05418d":"## **3) Seasonality, Holiday Effects, And Regressors**","c6723713":"This can be clearly seen by doing MCMC to see uncertainty in the seasonality","65cbfd0b":"**Monthly data**","6ab88fae":"The predict method will assign each row in future a predicted value which it names yhat. If we pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column yhat with the forecast, as well as columns for components and uncertainty intervals.","7276deb8":"**Data with regular gaps**","33d08aa8":"This time series has a clear yearly cycle, but the seasonality in the forecast is too large at the start of the time series and too small at the end. In this time series, the seasonality is not a constant additive factor as assumed by Prophet, rather it grows with the trend. This is multiplicative seasonality.Prophet can model multiplicative seasonality by setting seasonality_mode='multiplicative' in the input arguments.","6e33c870":"We can plot the forecast by calling the Prophet.plot method and passing in your forecast dataframe","fdc81279":"One property of this way of measuring uncertainty is that allowing higher flexibility in the rate, by increasing changepoint_prior_scale, will increase the forecast uncertainty. This is because if we model more rate changes in the history then we will expect more in the future, and makes the uncertainty intervals a useful indicator of overfitting.","39cee0eb":"## **1) Saturating Forecasts**","d2dc0438":"## **5) Uncertainty Intervals**","9cf37c05":"**Built-in Country Holidays**","22a786ed":"**Uncertainty in seasonality**","4485cff6":"![](http:\/\/jcharistech.files.wordpress.com\/2019\/07\/timeseriesanalysiswithfacebookprophet.png)","f625bbf5":"We then fit the model as before, except pass in an additional argument to specify logistic growth.","801a97cd":"Prophet will by default fit weekly and yearly seasonalities, if the time series is more than two cycles long. It will also fit daily seasonality for a sub-daily time series. You can add other seasonalities (monthly, quarterly, hourly) using the add_seasonality method","175ad07d":"**Seasonalities that depend on other factors**","e311ddbc":"In some instances the seasonality may depend on other factors, such as a weekly seasonal pattern that is different during the summer than it is during the rest of the year, or a daily seasonal pattern that is different on weekends vs. on weekdays. These types of seasonalities can be modeled using conditional seasonalities.","69bce1e8":"You may have noticed in the earlier examples in this documentation that real time series frequently have abrupt changes in their trajectories.By default, Prophet will automatically detect these changepoints and will allow the trend to adapt appropriately. However, if you wish to have finer control over this process.","af53a617":"If the trend changes are being overfit or underfit, we can adjust the strength of the sparse prior using the input argument changepoint_prior_scale","9f794c93":"We can manually specify the locations of potential changepoints with the changepoints argument","07cbc6b1":"Any added seasonalities or extra regressors will by default use whatever seasonality_mode is set to, but can be overriden by specifying mode='additive' or mode='multiplicative' as an argument when adding the seasonality or regressor.","f966afb8":"## **Thank You **","6c52cbf2":"## **2) Trend Changepoints**","2a04837c":"The seasonality has low uncertainty at the start of each month where there are data points, but has very high posterior variance in between. When fitting Prophet to monthly data, only make monthly forecasts, which can be done by passing the frequency into make_future_dataframe.","98051c97":"**Saturating Minimum**","99a64afc":"# **Quick Intro**","5e19b06f":"The Fourier order can be specified for each built-in seasonality when instantiating the model, here it is increased to 20","312e6d22":"we can use Prophet to fit monthly data. However, the underlying model is continuous-time, which means that we can get strange results if you fit the model to monthly data and then ask for daily forecasts.","142e2786":"To get uncertainty in seasonality, we must do full Bayesian sampling. This is done using the parameter mcmc.samples","4b20b668":"**Fourier Order for Seasonalities**","972510d5":"Fourier sum can approximate an aribtrary periodic signal. The number of terms in the partial sum (the order) is a parameter that determines how quickly the seasonality can change.","adfa17e9":"If we have holidays or other recurring events that we\u2019d like to model, we must create a dataframe for them. It has two columns (holiday and ds) and a row for each occurrence of the holiday. It must include all occurrences of the holiday, both in the past (back as far as the historical data go) and in the future (out as far as the forecast is being made). If they won\u2019t repeat in the future, Prophet will model them and then not include them in the forecast","1bc101b7":"**Specifying Custom Seasonalities**","6b8b55a1":"# **Lets Dive Deep Into it**","a93793d3":"**Adjusting trend flexibility**","351c173d":"If we want to see the forecast components, we can use the Prophet.plot_components method. By default you\u2019ll see the trend, yearly seasonality, and weekly seasonality of the time series.","0e8b55e9":"By default, Prophet uses a linear model for its forecast. When forecasting growth, there is usually some maximum achievable point: total market size, total population size, etc. This is called the carrying capacity, and the forecast should saturate at this point.**Prophet allows you to make forecasts using a logistic growth trend model, with a specified carrying capacity**","631e100a":"We fit the model by instantiating a new Prophet object.Then we call its fit method and pass in the historical dataframe","d9904ecb":"The width of the uncertainty intervals (by default 80%) can be set using the parameter interval_width","502c58d3":"We can use a built-in collection of country-specific holidays using the add_country_holidays method","a833711e":"We make a dataframe for future predictions as before, except we must also specify the capacity in the future. Here we keep capacity constant at the same value as in the history, and forecast 5 years into the future.","cc22bff6":"We must specify the carrying capacity in a column cap. Here we will assume a particular value, but this would usually be set using data or expertise about the market size.","2a547e4f":"Prophet follows the sklearn model API. We create an instance of the Prophet class and then call its fit and predict methods.The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","d55b0afb":"**Modeling Holidays and Special Events**","9b346536":"## **4) Multiplicative Seasonality**","f1c8ed3b":"Suppose the dataset above only had observations from 12a to 6a","425e364c":"## **6) Non-Daily Data**","53a28230":"Prophet can make forecasts for time series with sub-daily observations by passing in a dataframe with timestamps in the ds column. The format of the timestamps should be YYYY-MM-DD HH:MM:SS.When sub-daily data are used, daily seasonality will automatically be fit."}}