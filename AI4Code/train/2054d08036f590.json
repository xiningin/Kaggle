{"cell_type":{"cda6e17c":"code","d16f60ba":"code","e2256da8":"code","4d1a8e59":"code","9a2e6c40":"code","b62b6eda":"code","14f4c57d":"code","891f3c1b":"code","0417a525":"code","1503f9fd":"code","ad4c2d01":"code","92479341":"code","d3340106":"code","c3b48a06":"code","912a32f9":"code","b083d116":"code","437ccbe0":"code","4caa4b46":"code","0b05fec9":"code","889573d6":"code","0dbd155e":"code","03530190":"code","779a4287":"code","62b8e6ca":"code","101e1ac6":"code","3b19ba56":"code","63b00f3f":"code","53be585b":"code","1f6b9353":"code","8c89a5d4":"code","8c5c2525":"code","d9bf3f0a":"code","f361625c":"code","8bf5a2ca":"code","e37d1b55":"code","da66825f":"code","5e6e6b05":"code","84fccae8":"code","eaf24c40":"code","ead1ee6f":"code","7d98e456":"code","652fa9d4":"code","9b15ad80":"code","24bafc99":"code","32819774":"code","9bd402d2":"code","f8cebdd0":"code","20fa17e1":"code","317f00a5":"code","08a724b4":"code","c3aad21f":"code","4f768e9d":"code","0b50da57":"code","1e4b2809":"code","d83a97ab":"code","18a3ddc2":"code","8a61358e":"code","1230f706":"code","0bef8c80":"code","bc5a9b07":"code","daebe3a7":"code","40d42bcd":"code","74f47793":"code","5bbb3670":"code","bb9f92c8":"code","2cc4ffd4":"code","fc384915":"code","66f30925":"code","cac9b425":"markdown","8ec33f85":"markdown","a90aa0cf":"markdown","3298538f":"markdown","a8af9022":"markdown","e126025e":"markdown","a41763f8":"markdown","86db88cf":"markdown","07f1da7f":"markdown","a335ab58":"markdown","46696438":"markdown","cf2ae9e9":"markdown","bce1aecf":"markdown","019e8db8":"markdown","34401b12":"markdown","c28ee35e":"markdown","205cf88a":"markdown","ac59ae45":"markdown","450d8212":"markdown","e000cb9f":"markdown","bbc9324b":"markdown","7c2e526d":"markdown","32196070":"markdown","9343a7f1":"markdown","7d6d70a4":"markdown","2777a923":"markdown","1b3bcc9c":"markdown","1dc7122b":"markdown","ce48783b":"markdown","990b1ab7":"markdown","b11ba5e8":"markdown","91ac0e9d":"markdown","dcd6ffba":"markdown","2f17fcaa":"markdown","8a1b3566":"markdown"},"source":{"cda6e17c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d16f60ba":"from  sklearn.ensemble import RandomForestRegressor\nfrom pandas import Series,DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re ","e2256da8":"# \u8bfb\u53d6\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\ntrain_data = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv')","4d1a8e59":"# \u8bad\u7ec3\u96c6\nprint(train_data.info())\ntrain_data.head(5)","9a2e6c40":"# \u6d4b\u8bd5\u96c6\nprint(test_data.info())\ntest_data.head(5)","b62b6eda":"# copy\u64cd\u4f5c\ntrain_df = train_data.copy()\ntest_df = test_data.copy()","14f4c57d":"# \u5217\u91cd\u547d\u540d\n\ntrain_df.rename(columns={'Unnamed: 0':'ID'}, inplace=True)\ntest_df.rename(columns={'Unnamed: 0':'ID'}, inplace=True)","891f3c1b":"# \u53bb\u91cd\uff0c\u7ed3\u679c\u663e\u793a\u6ca1\u6709\u91cd\u590d\u6570\u636e\uff0c\u4e0d\u91c7\u53d6\u64cd\u4f5c\n\nprint(train_df.duplicated().value_counts())\n\n# train_df.drop_duplicates()","0417a525":"# \u5bf9\u5206\u7c7b\u7ed3\u679cSeriousDlqin2yrs\u67e5\u770b\n\nplt.figure()\nsns.countplot('SeriousDlqin2yrs',data=train_df)","1503f9fd":"# \u53ef\u4ee5\u770b\u51fa\u5206\u7c7b\u7ed3\u679c\u662f\u6781\u5176\u4e0d\u5e73\u8861\u7684\uff0c\u4e8b\u4ef6\u53d1\u751f\u7387\u5982\u4e0b\nP = train_df.groupby('SeriousDlqin2yrs')['ID'].count().reset_index()\nP['Percentage'] = 100 * P['ID'] \/ P['ID'].sum()\nprint(P)","ad4c2d01":"train_df.isnull().sum()","92479341":"# \u7528\u968f\u673a\u68ee\u6797\u5bf9MonthlyIncome\u7684\u7f3a\u5931\u503c\u9884\u6d4b\u586b\u5145\u51fd\u6570\ndef set_missing(df):\n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\n    process_df = df.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11]]\n    # \u5206\u6210\u5df2\u77e5\u8be5\u7279\u5f81\u548c\u672a\u77e5\u8be5\u7279\u5f81\u4e24\u90e8\u5206\n    known = process_df[process_df.MonthlyIncome.notnull()].values\n    unknown = process_df[process_df.MonthlyIncome.isnull()].values\n    # X\u4e3a\u7279\u5f81\u5c5e\u6027\u503c\n    X = known[:, [1,2,3,4,5,7,8,9,10]]\n    # y\u4e3a\u7ed3\u679c\u6807\u7b7e\u503c\n    y = known[:,[6]]\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, \n    n_estimators=200,max_depth=3,n_jobs=-1)\n    rfr.fit(X,y)\n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u7279\u5f81\u503c\u9884\u6d4b\n    predicted = rfr.predict(unknown[:,[1,2,3,4,5,7,8,9,10]]).round(0)\n    print(predicted)\n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    print(len(predicted))\n    df.loc[(df.MonthlyIncome.isnull()), 'MonthlyIncome'] = predicted\n    return df","d3340106":"train_df=set_missing(train_df)#\u7528\u968f\u673a\u68ee\u6797\u586b\u8865\u6bd4\u8f83\u591a\u7684\u7f3a\u5931\u503c\ntrain_df=train_df.dropna()#\u5220\u9664\u6bd4\u8f83\u5c11\u7684\u7f3a\u5931\u503c\ntrain_df.shape","c3b48a06":"test_df.isnull().sum()","912a32f9":"# \u7528\u968f\u673a\u68ee\u6797\u5bf9MonthlyIncome\u7684\u7f3a\u5931\u503c\u9884\u6d4b\u586b\u5145\u51fd\u6570\ndef set_missing2(df):\n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\n    process_df = df.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11]]\n    # \u5206\u6210\u5df2\u77e5\u8be5\u7279\u5f81\u548c\u672a\u77e5\u8be5\u7279\u5f81\u4e24\u90e8\u5206\n    known = process_df[process_df.MonthlyIncome.notnull()].values\n    unknown = process_df[process_df.MonthlyIncome.isnull()].values\n    # X\u4e3a\u7279\u5f81\u5c5e\u6027\u503c\n    X = known[:, [2,3,4,5,7,8,9,10]]\n    # y\u4e3a\u7ed3\u679c\u6807\u7b7e\u503c\n    y = known[:,[6]]\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, \n    n_estimators=200,max_depth=3,n_jobs=-1)\n    rfr.fit(X,y)\n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u7279\u5f81\u503c\u9884\u6d4b\n    predicted = rfr.predict(unknown[:,[2,3,4,5,7,8,9,10]]).round(0)\n    print(predicted)\n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    print(len(predicted))\n    df.loc[(df.MonthlyIncome.isnull()), 'MonthlyIncome'] = predicted\n    return df","b083d116":"#\u7528\u968f\u673a\u68ee\u6797\u586b\u8865\u6bd4\u8f83\u591a\u7684\u7f3a\u5931\u503c\uff0c\u5373MonthlyIncome\ntest_df=set_missing2(test_df)\n# \u5bf9\u7a7a\u503c\u7528\u4e2d\u4f4d\u6570\u586b\u5145\ntest_df['NumberOfDependents'].fillna(test_df['NumberOfDependents'].median(), inplace=True)\ntest_df.shape","437ccbe0":"# \u770b\u662f\u5426\u6709\u5f02\u5e38\u503c\ntrain_df.describe()","4caa4b46":"train_df = train_df[train_df['age']>0]","0b05fec9":"# \u5927\u81f4\u6570\u636e\u5206\u5e03\u60c5\u51b5\ntrain_df.hist(bins=50, figsize=(20,15))\nplt.show()","889573d6":"datatemp1=train_df[\"DebtRatio\"]\ndatatemp1.plot(kind='box',title='DebtRatio Distribution',sym='r+');","0dbd155e":"# DebtRatio\u5f02\u5e38\u503c\u7684\u6570\u91cf\nprint(train_df[train_df['DebtRatio'] > 8000].count()) ","03530190":"train_df = train_df[train_df['DebtRatio'] < 8000]","779a4287":"datatemp2=train_df[\"MonthlyIncome\"]\ndatatemp2.plot(kind='box',title='MonthlyIncome Distribution',sym='r+');","62b8e6ca":"print(train_df[train_df['MonthlyIncome'] > 50000].count()) ","101e1ac6":"train_df = train_df[train_df['MonthlyIncome'] < 50000]","3b19ba56":"datatemp3=train_df[\"NumberOfDependents\"]\ndatatemp3.plot(kind='box',title='NumberOfDependents Distribution',sym='r+');","63b00f3f":"print(train_df[train_df['NumberOfDependents'] > 10].count()) ","53be585b":"train_df = train_df[train_df['NumberOfDependents'] < 10]","1f6b9353":"# \u67e5\u770b\u4e00\u4e0b\u4e09\u8005\u7684\u7bb1\u578b\u56fe\nplt.figure(figsize=(19, 12)) \ntrain_df[['NumberOfTime30-59DaysPastDueNotWorse', \n          'NumberOfTime60-89DaysPastDueNotWorse',\n          'NumberOfTimes90DaysLate']].boxplot()\nplt.show()","8c89a5d4":"print(train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse'] > 20].count())","8c5c2525":"train_df = train_df[train_df['NumberOfTime30-59DaysPastDueNotWorse'] < 20]","d9bf3f0a":"datatemp5=train_df[\"NumberRealEstateLoansOrLines\"]\ndatatemp5.plot(kind='box',title='NumberRealEstateLoansOrLines Distribution',sym='r+');","f361625c":"print(train_df[train_df['NumberRealEstateLoansOrLines'] > 30].count())","8bf5a2ca":"#\u5254\u9664\u5f02\u5e38\u503c\ntrain_df = train_df[train_df['NumberRealEstateLoansOrLines'] < 30]","e37d1b55":"datatemp6=train_df[\"RevolvingUtilizationOfUnsecuredLines\"]\ndatatemp6.plot(kind='box',title='RevolvingUtilizationOfUnsecuredLines Distribution',sym='r+');","da66825f":"print(train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] > 3].count()) ","5e6e6b05":"train_df = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] < 3]","84fccae8":"# \u5927\u81f4\u6570\u636e\u5206\u5e03\u60c5\u51b5\ntrain_df.hist(bins=50, figsize=(20,15))\nplt.show()","eaf24c40":"test_df.describe()","ead1ee6f":"# \u67e5\u770b\u4e00\u4e0b\u4e09\u8005\u7684\u7bb1\u578b\u56fe\nplt.figure(figsize=(19, 12)) \ntest_df[['NumberOfTime30-59DaysPastDueNotWorse', \n          'NumberOfTime60-89DaysPastDueNotWorse',\n          'NumberOfTimes90DaysLate']].boxplot()\nplt.show()","7d98e456":"# \u53bb\u638998\u548c96\u4e24\u4e2a\u5f02\u5e38\u503c\ndef replace98and96(column):\n    new = []\n    newval = column.median()\n    for i in column:\n        if (i == 96 or i == 98):\n            new.append(newval)\n        else:\n            new.append(i)\n    return new","652fa9d4":"test_df['NumberOfTime30-59DaysPastDueNotWorse'] = replace98and96(test_df['NumberOfTime30-59DaysPastDueNotWorse'])\ntest_df['NumberOfTimes90DaysLate'] = replace98and96(test_df['NumberOfTimes90DaysLate'])\ntest_df['NumberOfTime60-89DaysPastDueNotWorse'] = replace98and96(test_df['NumberOfTime60-89DaysPastDueNotWorse'])","9b15ad80":"plt.figure(figsize=(15,5))\nplt.hist(train_df.MonthlyIncome,bins=70,alpha=0.8,rwidth=0.9)\nplt.title(\"MonthlyIncome distribution\")\nplt.ylabel('value of MonthlyIncome', fontsize=12)\nplt.xlabel('MonthlyIncome', fontsize=12)\n \nplt.show()","24bafc99":"MI = train_df['MonthlyIncome']\nsns.distplot(MI)","32819774":"plt.figure(figsize=(15,5))\nplt.hist(train_df.age,bins=50,alpha=0.8,rwidth=0.9)\nplt.title(\"age distribution\")\nplt.ylabel('value of age', fontsize=12)\nplt.xlabel('age', fontsize=12)\n \nplt.show()","9bd402d2":"age = train_df['age']\nsns.distplot(age)","f8cebdd0":"# \u68c0\u67e5\u6570\u636e\u7684\u76f8\u5173\u6027\ncorr = train_df.corr()\nplt.figure(figsize=(19, 15))\nsns.heatmap(corr, annot=True, fmt='.2g')","20fa17e1":"# \u4e3a\u4e86\u907f\u514d\u548c\u4ea4\u53c9\u9a8c\u8bc1\u6df7\u6dc6\uff0c\u5c06train\u548ctest\u8bbe\u5b9a\u4e3a\u5176\u4ed6\u540d\u79f0\nX = train_df.drop(['SeriousDlqin2yrs', 'ID'],axis=1)\ny = train_df['SeriousDlqin2yrs']\nW = test_df.drop(['SeriousDlqin2yrs', 'ID'],axis=1)\nz = test_df['SeriousDlqin2yrs']","317f00a5":"# \u7528\u7ebf\u6027\u56de\u5f52\u6a21\u578b\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_predict\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\n\n# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=111)\n\n# \u8c03\u7528\u7ebf\u6027\u56de\u5f52\u51fd\u6570\uff0cC\u4e3a\u6b63\u5219\u5316\u7cfb\u6570\uff0cl1\u8868\u793aL1\u6b63\u5219\u5316\nlogit = LogisticRegression(random_state=111, solver='saga', penalty='l1', class_weight='balanced', C=1.0, max_iter=500)\n\n# \u6807\u51c6\u5316\u62df\u5408\nscaler = StandardScaler().fit(X_train)\n\n# \u6807\u51c6\u5316X_train \u548cX_test\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# \u7ebf\u6027\u56de\u5f52\u62df\u5408\nlogit.fit(X_train_scaled, y_train)\n\n# \u8f93\u5165\u8bad\u7ec3\u96c6\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u5230\u6bcf\u79cd\u5206\u7c7b\u7ed3\u679c\u7684\u6982\u7387\nlogit_scores_proba = logit.predict_proba(X_train_scaled)\n\n# \u8fd4\u56de\u5206\u7c7b1\u7684\u6982\u7387\nlogit_scores = logit_scores_proba[:,1]","08a724b4":"# \u753b\u56fe\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(12,10))\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1], \"k--\") # \u753b\u76f4\u7ebf\u505a\u53c2\u8003\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive rate\")\n","c3aad21f":"# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit, tpr_logit, thresh_logit = roc_curve(y_train, logit_scores)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit,tpr_logit)\nprint('AUC Score : ', (roc_auc_score(y_train,logit_scores)))","4f768e9d":"# \u9a8c\u8bc1\u6d4b\u8bd5\u96c6\uff0c\u6d4b\u8bd5\u5206\u7c7b\u7ed3\u679c\u6982\u7387\u5206\u5e03\nlogit_scores_proba_val = logit.predict_proba(X_test_scaled)\n\n# \u5206\u7c7b\u7ed3\u679c\u4e3a1\u7684\u6982\u7387\nlogit_scores_val = logit_scores_proba_val[:,1]\n\n# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit_val, tpr_logit_val, thresh_logit_val = roc_curve(y_test, logit_scores_val)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit_val,tpr_logit_val)\nprint('AUC Score :', (roc_auc_score(y_test,logit_scores_val)))","0b50da57":"# \u91c7\u7528LogisticRegressionCV\u6765\u4ea4\u53c9\u9a8c\u8bc1\u9009\u62e9\u6b63\u5219\u5316\u7cfb\u6570C\nfrom sklearn.linear_model import LogisticRegressionCV\nlogit = LogisticRegressionCV(Cs=[0.001, 0.01, 0.1, 1, 10, 100], penalty='l1', solver='saga', max_iter=500, class_weight='balanced', random_state=111)\n\n# \u7ebf\u6027\u56de\u5f52\u62df\u5408\nlogit.fit(X_train_scaled, y_train)\n\nprint(logit.C_)","1e4b2809":"# \u8f93\u5165\u8bad\u7ec3\u96c6\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6837\u672c\u5bf9\u5e94\u5230\u6bcf\u79cd\u5206\u7c7b\u7ed3\u679c\u7684\u6982\u7387\nlogit_scores_proba = logit.predict_proba(X_train_scaled)\n\n# \u8fd4\u56de\u5206\u7c7b1\u7684\u6982\u7387\nlogit_scores = logit_scores_proba[:,1]\n\n# roc_curve\u6839\u636e\u5206\u7c7b\u7ed3\u679c\u548c\u5206\u7c7b\u6982\u7387\uff0c\u8fd4\u56defalse positive rage\u548ctrue positive rate\nfpr_logit, tpr_logit, thresh_logit = roc_curve(y_train, logit_scores)\n\n# \u753b\u56fe\nplot_roc_curve(fpr_logit,tpr_logit)\nprint('AUC Score : ', (roc_auc_score(y_train,logit_scores)))","d83a97ab":"# \u5f15\u5165\u964d\u91c7\u6837\u6a21\u5757\nfrom imblearn.under_sampling import RandomUnderSampler\n\n# Counter\u7c7b\u7684\u76ee\u7684\u662f\u7528\u6765\u8ddf\u8e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\nfrom collections import Counter\nprint('Original dataset shape :', Counter(y))","18a3ddc2":"# \u8c03\u7528\u6a21\u5757\nrus = RandomUnderSampler(random_state=111)\n\n# \u76f4\u63a5\u964d\u91c7\u6837\u540e\u8fd4\u56de\u91c7\u6837\u540e\u7684\u6570\u503c\nX_resampled, y_resampled = rus.fit_resample(X, y)\nprint('Resampled dataset shape:', Counter(y_resampled))","8a61358e":"# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\nX_train_rus, X_test_rus, y_train_rus, y_test_rus = train_test_split(X_resampled, y_resampled, random_state=111)\nX_train_rus.shape, y_train_rus.shape","1230f706":"# \u5bf9\u91cd\u91c7\u6837\u4ee5\u540e\u7684\u6570\u636e\u8fdb\u884c\u5206\u7c7b\nlogit_resampled = LogisticRegression(random_state=111, solver='saga', penalty='l1', class_weight='balanced', C=1.0, max_iter=500)\n\nlogit_resampled.fit(X_resampled, y_resampled)\nlogit_resampled_proba_res = logit_resampled.predict_proba(X_resampled)\nlogit_resampled_scores = logit_resampled_proba_res[:, 1]\nfpr_logit_resampled, tpr_logit_resampled, thresh_logit_resampled = roc_curve(y_resampled, logit_resampled_scores)\nplot_roc_curve(fpr_logit_resampled, tpr_logit_resampled)\nprint('AUC score: ', roc_auc_score(y_resampled, logit_resampled_scores))","0bef8c80":"# \u91c7\u7528\u968f\u673a\u68ee\u6797\u6cd5\u5206\u7c7b\u548c\u68af\u5ea6\u4e0a\u5347\u6cd5\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nforest = RandomForestClassifier(n_estimators=300, random_state=111, max_depth=5, class_weight='balanced')\nforest.fit(X_train_rus, y_train_rus)\ny_scores_prob = forest.predict_proba(X_train_rus)\ny_scores = y_scores_prob[:, 1]\nfpr, tpr, thresh = roc_curve(y_train_rus, y_scores)\nplot_roc_curve(fpr, tpr)\nprint('AUC score:', roc_auc_score(y_train_rus, y_scores))","bc5a9b07":"# \u4ea4\u53c9\u9a8c\u8bc1\ny_test_proba = forest.predict_proba(X_test_rus)\ny_scores_test = y_test_proba[:, 1]\nfpr_test, tpr_test, thresh_test = roc_curve(y_test_rus, y_scores_test)\nplot_roc_curve(fpr_test, tpr_test)\nprint('AUC Score:', roc_auc_score(y_test_rus, y_scores_test))","daebe3a7":"# \u770b\u770b\u968f\u673a\u68ee\u6797\u6cd5\u5bf9\u5404\u4e2a\u7279\u5f81\u7684\u91cd\u89c6\u7a0b\u5ea6\ndef plot_feature_importances(model):\n    plt.figure(figsize=(10,8))\n    n_features = X.shape[1]\n    plt.barh(range(n_features), model.feature_importances_, align='center')\n    plt.yticks(np.arange(n_features), X.columns)\n    plt.xlabel('Feature importance')\n    plt.ylabel('Feature')\n    plt.ylim(-1, n_features)\n\nplot_feature_importances(forest)","40d42bcd":"# \u770b\u4e00\u4e0b\u68af\u5ea6\u63d0\u5347\u6811\u6cd5\ngbc_clf = GradientBoostingClassifier(n_estimators=300, learning_rate=0.05, max_depth=8, random_state=112)\ngbc_clf.fit(X_train, y_train)\ngbc_clf_proba = gbc_clf.predict_proba(X_train)\ngbc_clf_scores = gbc_clf_proba[:, 1]\nfpr_gbc, tpr_gbc, thresh_gbc = roc_curve(y_train, gbc_clf_scores)\nplot_roc_curve(fpr_gbc, tpr_gbc)\nprint('AUC Score:', roc_auc_score(y_train, gbc_clf_scores))","74f47793":"# \u6765\u770b\u4e00\u4e0b\u4ea4\u53c9\u9a8c\u8bc1\u7684\u7ed3\u679c\ngbc_val_proba = gbc_clf.predict_proba(X_test)\ngbc_val_scores = gbc_val_proba[:, 1]\nprint('AUC score:', roc_auc_score(y_test, gbc_val_scores))","5bbb3670":"gbc_clf_submission = GradientBoostingClassifier(n_estimators=200, learning_rate=0.05 ,max_depth=4,  random_state=42)\ngbc_clf_submission.fit(X_train,y_train)\ngbc_clf_proba = gbc_clf_submission.predict_proba(X_train)\ngbc_clf_scores = gbc_clf_proba[:,1]\ngbc_val_proba = gbc_clf_submission.predict_proba(X_test)\ngbc_val_scores = gbc_val_proba[:,1]\nfpr_gbc, tpr_gbc, thresh_gbc = roc_curve(y_train, gbc_clf_scores)\nprint('AUC Score :', roc_auc_score(y_train, gbc_clf_scores))\nprint('AUC Score :', roc_auc_score(y_test, gbc_val_scores))","bb9f92c8":"plot_feature_importances(gbc_clf)","2cc4ffd4":"submission_proba = gbc_clf_submission.predict_proba(W)\nsubmission_scores = submission_proba[:, 1]\nsubmission_scores.shape","fc384915":"W.shape","66f30925":"ids = np.arange(1, 101504)\nsubmission = pd.DataFrame( {'Id': ids, 'Probability': submission_scores})\nsubmission.to_csv('submission.csv', index=False)","cac9b425":"## 4.1 \u6570\u636e\u8bbe\u5b9a","8ec33f85":"## 2.2 \u7f3a\u5931\u503c\u5904\u7406","a90aa0cf":"\u8c03\u4e00\u4e0b\u53c2\u6570","3298538f":"### 2.3.5 NumberRealEstateLoansOrLines","a8af9022":"# \u4e8c\u3001\u6e05\u6d17\u6570\u636e","e126025e":"# \u4e94\u3001\u8f93\u51fa\u6570\u636e","a41763f8":"\u53ef\u4ee5\u770b\u51fa\uff08\u76f8\u8f83\u4e8e150000\u7684\u603b\u6837\u672c\u6570\u91cf\uff09DebtRatio\u7684\u5f02\u5e38\u503c\u5f88\u5c11\uff0c\u4e0d\u5f71\u54cd\u6574\u4f53\u6570\u636e\uff0c\u4e8e\u662f\u9009\u62e9\u5220\u53bb","86db88cf":"\u6d4b\u8bd5\u6570\u636e\u96c6\u4e5f\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u7f3a\u5931\u503c\u586b\u5145\u3002\u4e0d\u80fd\u4f5c\u5220\u9664\u6837\u672c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5bf9NumberOfDependents\u7f3a\u5931\u503c\u53d6\u4e2d\u4f4d\u6570\u3002","07f1da7f":"### 2.3.4 NumberOfTime30-59DaysPastDueNotWorse\n\n### &NumberOfTime60-89DaysPastDueNotWorse\n\n### &NumberOfTimes90DaysLate","a335ab58":"## 4.3 \u964d\u91c7\u6837\u5904\u7406","46696438":"\u4ece\u7ed3\u679c\u770b\uff0cLR\u65b9\u6cd5\u8c03\u53c2\u6570\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u63d0\u9ad8AUC\uff0c\u867d\u7136\u91c7\u7528\u4e86balanced\u6743\u91cd\uff0c\u4f46\u662f\u6548\u679c\u8fd8\u662f\u4e0d\u7406\u60f3\uff1b\u63a5\u4e0b\u6765\u5c1d\u8bd5\u5148\u5c06\u6570\u636e\u964d\u91c7\u6837\uff0c\u518d\u91c7\u7528\u968f\u673a\u68ee\u6797\u6cd5","cf2ae9e9":"# \u4e09\u3001\u63a2\u7d22\u6027\u5206\u6790","bce1aecf":"\u7f3a\u5931\u503c\u6307\u7684\u662f\u73b0\u6709\u6570\u636e\u96c6\u4e2d\u67d0\u4e2a\u6216\u67d0\u4e9b\u5c5e\u6027\u7684\u503c\u662f\u4e0d\u5b8c\u5168\u7684\u3002\n\n\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5\u4e00\u822c\u5305\u62ec\uff1a\n1. \u76f4\u63a5\u4f7f\u7528\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff08\u4e0d\u5904\u7406\uff09\uff1b\n2. \u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff08\u8be5\u65b9\u6cd5\u5728\u5305\u542b\u7f3a\u5931\u503c\u7684\u5c5e\u6027\u4ec5\u4ec5\u5305\u542b**\u6781\u5c11\u91cf**\u6709\u6548\u503c\u65f6\u662f\u6709\u6548\u7684\uff09\uff1b\n3. \u76f4\u63a5\u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff1b\n4. \u7f3a\u5931\u503c\u8865\u5168\uff1a\u5747\u503c\u63d2\u8865\u3001\u5efa\u6a21\u9884\u6d4b\u7b49\u7b49","019e8db8":"\u53ef\u4ee5\u4ece\u524d\u9762\u53d1\u73b0\uff0c\u5c5e\u6027\u540d\u2018Unnamed: 0\u2019\u5e94\u8be5\u6539\u4e3a\u2018ID\u2019","34401b12":"### 2.3.1 DebtRatio","c28ee35e":"### 2.3.2 MonthlyIncome","205cf88a":"\u51c6\u786e\u7387\u53cd\u800c\u964d\u4f4e\u4e86","ac59ae45":"### \u5904\u7406\u540e\u7684\u8bad\u7ec3\u96c6","450d8212":"\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u7ed3\u679c\u770b\u5230\u5e74\u9f84\u7684\u6700\u5c0f\u503c\u4e3a0\uff0c\u662f\u4e0d\u5408\u7406\u7684\u503c\uff0c\u4e14\u8fd9\u6837\u7684\u6837\u672c\u5f88\u5c11\uff0c\u6240\u4ee5\u76f4\u63a5\u5220\u9664\u5f02\u5e38\u7684\u6837\u672c","e000cb9f":"\u53ef\u4ee5\u770b\u51faDebtRatio\u3001NumberOfTime30-59DaysPastDueNotWorse\u3001NumberOfTime60-89DaysPastDueNotWorse\u3001NumberOfTimes90DaysLate\u3001NumberRealEstateLoansOrLines\u3001RevolvingUtilizationOfUnsecuredLines\u7684\u6570\u636e\u5206\u5e03\u60c5\u51b5\u6bd4\u8f83\u5f02\u5e38\uff0c\u5e94\u8be5\u6709\u4e00\u4e9b\u6781\u7aef\u7684\u6570\u503c\u5f71\u54cd\u4e86\u5206\u5e03\u56fe\u50cf\u7684\u5448\u73b0\u3002\u4e0b\u9762\u5206\u522b\u7528\u7bb1\u578b\u56fe\u67e5\u770b\u4e00\u4e0b\u6570\u503c\u7684\u5206\u5e03\uff0c\u5220\u53bb\u6781\u7aef\u503c\uff0c\u5e76\u68c0\u67e5\u76f8\u5173\u6027\u3002","bbc9324b":"\u5ba2\u6237\u6536\u5165\u548c\u5e74\u9f84\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u53d8\u91cf\u90fd\u5927\u81f4\u5448\u6b63\u6001\u5206\u5e03\uff0c\u7b26\u5408\u7edf\u8ba1\u5206\u6790\u7684\u5047\u8bbe\u3002","7c2e526d":"# \u4e00\u3001\u5bfc\u5165\u6570\u636e","32196070":"### 2.3.3 NumberOfDependents","9343a7f1":"## 2.3 \u5f02\u5e38\u503c\u5904\u7406","7d6d70a4":"## 2.1 \u68c0\u67e5\u6570\u636e","2777a923":"## 4.5 \u68af\u5ea6\u63d0\u5347\u6cd5\u5206\u7c7b","1b3bcc9c":"\u6d4b\u8bd5\u6570\u636e\u96c6\u4e5f\u6709\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e3b\u8981\u5bf9NumberOfTime30-59DaysPastDueNotWorse\u3001NumberOfTime60-89DaysPastDueNotWorse\u3001NumberOfTimes90DaysLate\u7684\u5f02\u5e38\u503c\u505a\u66ff\u6362\u4e3a\u4e2d\u4f4d\u6570\u7684\u5904\u7406","1dc7122b":"# \u76f8\u5173\u5e93","ce48783b":"\u6570\u636e\u4e0d\u5e73\u8861\u4f1a\u8ba9\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u8fc7\u591a\u5173\u6ce8\u591a\u6570\u7c7b\uff0c\u4f7f\u5206\u7c7b\u6027\u80fd\u4e0b\u964d\uff1b\u56e0\u4e3a\u6570\u636e\u8db3\u591f\u591a\uff0c\u91c7\u7528\u6b20\u91c7\u6837\uff1b\u91c7\u7528\u6b63\u5219\u56de\u5f52\u6a21\u578b\u548c\u96c6\u6210\u6a21\u578b","990b1ab7":"### 2.3.6 RevolvingUtilizationOfUnsecuredLines","b11ba5e8":"\u53ef\u4ee5\u770b\u51fa\n1. \u53d8\u91cfMonthlyIncome \u7f3a\u5931\u503c\u8f83\u591a\uff0c\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\u6837\u672c\uff0c\u540c\u65f6\u7f3a\u5931\u503c\u4e5f\u6ca1\u6709\u591a\u5230\u80fd\u76f4\u63a5\u5220\u9664\u5c5e\u6027\uff0c\u6240\u4ee5\u9700\u8981\u8865\u5168\u7f3a\u5931\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u968f\u673a\u68ee\u6797\u9884\u6d4b\n2. \u53d8\u91cfNumberOfDependents\u7684\u7f3a\u5931\u503c\u8f83\u5c11\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u5220\u9664\u542b\u7f3a\u5931\u503c\u7684\u6837\u672c","91ac0e9d":"\u5f02\u5e38\u503c\u6307\u5728\u6570\u636e\u96c6\u4e2d\u5b58\u5728\u7684\u4e0d\u5408\u7406\u7684\u503c\uff0c\u53c8\u79f0\u79bb\u7fa4\u70b9\uff0c\u6bd4\u5982\u5e74\u9f84\u5c0f\u4e8e0\uff0c\u6216\u8005\u4e0d\u7b26\u5408\u6b63\u6001\u5206\u5e03\u7684\u6570\u636e\u3002\n\n\u5f02\u5e38\u503c\u7684\u5904\u7406\u65b9\u6cd5\u4e00\u822c\u5305\u62ec\uff1a\n1. \u5220\u9664\u542b\u6709\u5f02\u5e38\u503c\u7684\u6837\u672c\n2. \u5c06\u5f02\u5e38\u503c\u89c6\u4e3a\u7f3a\u5931\u503c\uff0c\u5e94\u7528\u7f3a\u5931\u503c\u5904\u7406\u65b9\u6cd5\n3. \u7528\u5e73\u5747\u503c\u6765\u4fee\u6b63\n4. \u4e0d\u5904\u7406","dcd6ffba":"## 4.2 \u7ebf\u6027\u56de\u5f52\u5206\u7c7b","2f17fcaa":"## 4.4 \u968f\u673a\u68ee\u6797\u5206\u7c7b","8a1b3566":"# \u56db\u3001\u6a21\u578b\u5206\u6790"}}