{"cell_type":{"552cfd27":"code","3a1dfb82":"code","08ecd584":"code","fd0ce814":"code","3465d316":"code","3215f62b":"code","34f5ee34":"code","d969d368":"code","93a9ce0d":"code","2531c618":"code","234e9050":"code","41c0ac4e":"code","e0060129":"code","dd228f6f":"code","24a640ca":"code","57289646":"code","0e31cd23":"code","8bfdd98a":"code","117412c2":"code","64c3184e":"code","09a9620a":"code","3c43997d":"markdown","0d4432ce":"markdown","577455b2":"markdown","e700c100":"markdown","9029b35c":"markdown","cc6bc521":"markdown","afcaf7ab":"markdown"},"source":{"552cfd27":"#installing yfinance for fetching past stock datas\n!pip install yfinance","3a1dfb82":"#importing necessary libraries\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dropout\n\nfrom sklearn.preprocessing import MinMaxScaler","08ecd584":"#Building helper funtion for fetcching stock data\ndef hist(tick):\n    ticker = yf.Ticker(tick + '.NS')  #NS is used for fetching NSE(indian) stock datas. For US stocks use without NS. Refer to yfinance documentation for usage\n    \n    data = ticker.history(period = 'max') #Period used here is max i.e. fetching data from the date of listing to present\n    \n    return data\n\n\n#Checking if the function is working\nhist('SBIN').tail(10)","fd0ce814":"#Fetching ITC data\nITC = hist('ITC')\nITC.head()","3465d316":"#Plotting close price of ITC\n\nplt.figure(figsize=(16,8))\nplt.plot(ITC['Close'])\nplt.title('Historical Closing Price of ITC',fontsize = 15)\nplt.xlabel('Time',fontsize = 15)\nplt.ylabel('Price',fontsize = 15)\nplt.show()","3215f62b":"#Extracting closing price and storing it in a dataframe 'df'\ndf = pd.DataFrame(ITC['Close'])\ndf = df.reset_index()\ndf = df.drop(['Date'],axis = 1)\ndf","34f5ee34":"#Scaling the values of closing price using MinMax Scaler since LSTM is sensitive to ranges of data\nscaler = MinMaxScaler()\nscaled_data  = scaler.fit_transform(np.array(df).reshape(-1,1))\nscaled_data","d969d368":"#Splitting the dataset into train and test\ntraining_size = int(len(scaled_data) * 0.7) #taking 70% of total data to be training set and rest to be test set\ntest_size = int(len(scaled_data) - training_size)\ntrain,test = scaled_data[0:training_size],scaled_data[training_size:len(scaled_data)]","93a9ce0d":"#Generating dataset to train\nX_train = [] #independent\ny_train = [] #dependent\n\nfor i in range(100,len(train)):\n    X_train.append(train[i-100:i,0]) #100 days historical data\n    y_train.append(train[i,0]) #corresponding next day's output\n    \n    \n\nX_train,y_train = np.array(X_train),np.array(y_train)\nX_train = X_train.reshape(X_train.shape[0],X_train.shape[1],1) ","2531c618":"#Lets see the dimensions of both X_train,y_train\nprint('The shape of X_train is {0} and The shape of y_train is {1}'.format(X_train.shape,y_train.shape))","234e9050":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\n","41c0ac4e":"#model summary\nmodel.summary()","e0060129":"model.compile(loss = 'mean_squared_error',optimizer='adam')\nmodel.fit(X_train,y_train,epochs = 5,batch_size=64)","dd228f6f":"#Since test set will be used to predict,lets preprocess it as similar to train set\nX_test = []\ny_test = []\n\nfor i in range(100,len(test)):\n    X_test.append(test[i - 100 : i,0])\n    y_test.append(test[i,0])\n\n    \nX_test,y_test = np.array(X_test),np.array(y_test)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)","24a640ca":"#Lets see the dimensions of both X_test,y_test\nprint('The shape of X_test is {0} and The shape of y_test is {1}'.format(X_test.shape,y_test.shape))","57289646":"#Making prediction on train and test set\npredicted_train = model.predict(X_train)\npredicted_test = model.predict(X_test)\n\n#Since the predicted values will be in scaled form so we have to inverse the values inorder to be in original form\npredicted_train = scaler.inverse_transform(predicted_train)\npredicted_test = scaler.inverse_transform(predicted_test)","0e31cd23":"print('The shape of predicted train is {0} and shape of predicted test values is {1}'.format(predicted_train.shape,predicted_test.shape))","8bfdd98a":"#importing the MSE module from sklearn \nfrom sklearn.metrics import mean_squared_error\n\ndef RMSE(val,pred):\n    return np.sqrt(mean_squared_error(val,pred))","117412c2":"print('RMSE of training data is ',RMSE(scaler.inverse_transform(y_train.reshape(-1,1)),predicted_train))","64c3184e":"print('RMSE of test data is ',RMSE(scaler.inverse_transform(y_test.reshape(-1,1)),predicted_test))","09a9620a":"#Plotting test data\nplt.figure(figsize = (16,8))\nplt.plot(scaler.inverse_transform(y_test.reshape(-1,1)),label = 'true value')\nplt.plot(predicted_test,label = 'predicted value')\nplt.legend()\nplt.show()","3c43997d":"### Building LSTM Model","0d4432ce":"### Training the RNN","577455b2":"### Now we will split the data into independent and dependent set where dataset is created with some time step which is our historical data along with one piece of output data.Here one time step is one day's data.We will create data as considering timestep equal to 100 timesteps i.e.previous 100 days historical data","e700c100":"## Making Predictions on Test set","9029b35c":"## Here we will use LSTM(Long Short Term Memory) for predicting stock prices.Only practical implementation will be done here.This assumes the reader has theoritical knowledge of LSTM\n\n### Here we will be using Tensorflow Keras API for prediction ","cc6bc521":"*Explanation: The 100 time steps means that for each time t, the RNN is going to look at the 100 stock prices before time t, which is the stock price between 100 days. Based on the trends it is capturing during the previous 100 time steps i.e. t-100 to t, historical data will try to predict the next output i.e. t+1.As we know, there are 22 financial days in a month, so 100 time steps corresponds to five months. This means that each day, our RNN is going to look at the previous five months and try to predict the stock price of the next day.* ","afcaf7ab":"### Let's evaluate the prediction of our model using RMSE(Root mean squared error) metric"}}