{"cell_type":{"ae9507bd":"code","33cfcacb":"code","ae0b5ba0":"code","0d820008":"code","f74ee6ae":"code","fd8165de":"code","5da03a9b":"code","eb7d14d7":"code","1fe59f2e":"code","2c4c5c95":"code","f03a5062":"code","2f94e8af":"code","4a49fed9":"code","fa875189":"code","8148e363":"code","7bc3b69a":"code","377a9acb":"code","09c4806c":"code","38b677d0":"code","d739cce6":"code","51deba37":"code","20e67b2c":"code","c0f388a4":"code","58d00b0d":"code","fe3acb3f":"code","c133d20a":"code","0a123bf1":"code","2d0e3528":"code","6d1068b5":"markdown"},"source":{"ae9507bd":"#importing Libraries\nimport os \nimport pathlib \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport matplotlib.image as mpimg\nimport random\nimport cv2\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Activation, Conv2D, MaxPool2D, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport tensorflow as tf","33cfcacb":"#printing image and dir\nfor dirpath,dirnames,filenames in os.walk(\"..\/input\/covid-cxr-image-dataset-research\"):\n    print(f\"there are {len(dirnames)} directories and {len(filenames)} images in '{dirpath}'.\")","ae0b5ba0":"#printing class\ndata_dir = pathlib.Path(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\")\nclass_names = np.array(sorted([item.name for item in data_dir.glob(\"*\")]))\nclass_names","0d820008":"#random image generator function\ndef view_image(target_dir, target_class):\n    target_folder = target_dir+target_class\n    random_image = random.sample(os.listdir(target_folder),1)\n    print(random_image)\n    img = mpimg.imread(target_folder+\"\/\"+ random_image[0])\n    plt.imshow(img, cmap =\"gray\")\n    plt.title(target_class)\n    plt.axis(\"off\")\n    print(f\"image shape {img.shape}\")\n    \n    return img","f74ee6ae":"#X_ray of covid patient\nimg = view_image(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/\",\"covid\")","fd8165de":"#X_ray of normal person\nimg = view_image(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/\",\"normal\")","5da03a9b":"#X_ray of person having viral\nimg = view_image(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/\",\"virus\")","eb7d14d7":"#appending the data for covid\ndata=[]\nlabels=[]\ncovid=os.listdir(\"\/kaggle\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/covid\/\")\nfor a in covid:\n\n    image = cv2.imread(\"\/kaggle\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/covid\/\"+a)\n    image = cv2.resize(image, (224, 224))\n\n\n    data.append(image)\n    labels.append(0)","1fe59f2e":"#appending the data for normal\nnormal =os.listdir(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/normal\/\")\nfor a in normal:\n\n    image = cv2.imread(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/normal\/\"+a)\n    image = cv2.resize(image, (224, 224))\n    data.append(image)\n    labels.append(1)","2c4c5c95":"#appending the data for viral\nvirus =os.listdir(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/virus\/\")\nfor a in virus:\n\n    image = cv2.imread(\"..\/input\/covid-cxr-image-dataset-research\/COVID_IEEE\/virus\/\"+a)\n    image = cv2.resize(image, (224, 224))\n    data.append(image)\n    labels.append(2)","f03a5062":"#creating training and test data \ndata = np.array(data) \/ 255.0\nlabels = np.array(labels)\n\nX_train, X_test, y_train, y_test = train_test_split(data, labels,stratify=labels,test_size=0.20,  random_state=42,shuffle=True)\ny_train = tf.keras.utils.to_categorical(y_train , num_classes=3)\ny_test = tf.keras.utils.to_categorical(y_test , num_classes=3)","2f94e8af":"#Building model\nmodel = Sequential()\n\n#Block Number 1\nmodel.add(Conv2D(input_shape = (224,224,3), filters=32,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Conv2D(filters=32,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(MaxPool2D((2,2)))\n\n#Block Number 2\nmodel.add(Conv2D(filters=64,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\n\nmodel.add(Conv2D(filters=64,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(MaxPool2D((2,2)))\n\n#Block Number 3\nmodel.add(Conv2D(filters=128,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Conv2D(filters=128,padding=\"same\", kernel_size= (3,3)))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(MaxPool2D((2,2)))\n\n# Fully Connected layer\nmodel.add(Flatten())\n\nmodel.add(Dense(units=1024, activation=\"relu\"))\n\nmodel.add(Dense(units=256, activation=\"relu\"))\n\n\nmodel.add(Dense(units=3, activation=\"softmax\"))\n\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","4a49fed9":"#training the model\nmodel.fit(X_train, y_train, validation_split=0.3, epochs= 15, batch_size=32)","fa875189":"#saving the model history\nloss = pd.DataFrame(model.history.history)","8148e363":"#plotting the loss and accuracy \nplt.figure(figsize=(10,10))\n\nplt.subplot(2,2,1)\nplt.plot(loss[\"loss\"], label =\"Loss\")\nplt.plot(loss[\"val_loss\"], label = \"Validation_loss\")\nplt.legend()\nplt.title(\"Training and Validation Loss\")\n\nplt.subplot(2,2,2)\nplt.plot(loss['accuracy'],label = \"Training Accuracy\")\nplt.plot(loss['val_accuracy'], label =\"Validation_ Accuracy \")\nplt.legend()\nplt.title(\"Training-Validation Accuracy\")","7bc3b69a":"predictions = model.predict(X_test)\ny_pred=np.argmax(predictions, axis=1)\ny_test_new=np.argmax(y_test,axis=1)","377a9acb":"#priting classification report\nprint(classification_report(y_test_new,y_pred))","09c4806c":"#Confusion Matrix\npd.DataFrame(confusion_matrix(y_test_new,y_pred),columns=['covid', 'normal', 'virus'],index=['covid', 'normal', 'virus'])","38b677d0":"# Model Tail\n\nbase_model = tf.keras.applications.MobileNet(input_shape=[224,224,3], weights = \"imagenet\", include_top= False)\n\nfor layer in base_model.layers:\n  layer.trainable = False","d739cce6":"#model Head\nmodel = Flatten()(base_model.output)\nmodel = Dense(units=1024, activation=\"relu\")(model)\nmodel = Dense(units=512, activation=\"relu\")(model)\nmodel = Dense(units=256, activation=\"relu\")(model)\nprediction_layer = Dense(units=3, activation=\"softmax\")(model)","51deba37":"#combining both \nmodel = Model(inputs = base_model.input, outputs = prediction_layer)","20e67b2c":"#compiling model\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","c0f388a4":"#training the model \nmodel.fit(X_train, y_train, validation_split=0.3, epochs= 15, batch_size=32)","58d00b0d":"#saving the model history\nloss = pd.DataFrame(model.history.history)","fe3acb3f":"#plotting the loss and accuracy \nplt.figure(figsize=(10,10))\n\nplt.subplot(2,2,1)\nplt.plot(loss[\"loss\"], label =\"Loss\")\nplt.plot(loss[\"val_loss\"], label = \"Validation_loss\")\nplt.legend()\nplt.title(\"Training and Validation Loss\")\n\nplt.subplot(2,2,2)\nplt.plot(loss['accuracy'],label = \"Training Accuracy\")\nplt.plot(loss['val_accuracy'], label =\"Validation_ Accuracy \")\nplt.legend()\nplt.title(\"Training-Validation Accuracy\")","c133d20a":"predictions = model.predict(X_test)\ny_pred=np.argmax(predictions, axis=1)\ny_test_tl=np.argmax(y_test,axis=1)","0a123bf1":"#priting classification report\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test_tl,y_pred))","2d0e3528":"#confusion matrix\npd.DataFrame(confusion_matrix(y_test_new,y_pred),columns=['covid', 'normal', 'virus'],index=['covid', 'normal', 'virus'])","6d1068b5":"# Transfer Learning"}}