{"cell_type":{"03680082":"code","5b39e6f0":"code","15f7e39f":"code","5c73b1ec":"code","943a1d9f":"code","90e357b7":"code","de8e6285":"code","8a25d811":"code","e624a0d7":"code","bb078ee3":"code","b7e69411":"code","93cb7f65":"code","350740fc":"code","b6804507":"code","142c215d":"code","81d602ae":"code","f09e02fe":"code","d48fdb6a":"code","32aba4e4":"markdown","12d85967":"markdown","20afeff1":"markdown","f5d0d930":"markdown","c5bf93d7":"markdown"},"source":{"03680082":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b39e6f0":"items = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsales = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","15f7e39f":"# eksik veri var m\u0131?\nprint(items.isnull().sum())\nprint(\"---------------\")\nprint(sales.isnull().sum())","5c73b1ec":"# item_id sutun baz al\u0131narak sales ve items birle\u015ftirme\ndf = pd.merge(sales, items, on=\"item_id\")","943a1d9f":"# date s\u00fctunu g\u00fcn, ay ve y\u0131l olarak ay\u0131rmak\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['day'] = df['date'].dt.day","90e357b7":"# item_name ve date s\u00fctunlar\u0131n\u0131 kald\u0131rmak\ndf = df.drop(['item_name','date'], axis=1)","de8e6285":"from sklearn.preprocessing import Normalizer\nnorm = Normalizer()\nnorm.fit(df.drop('item_cnt_day', axis=1))","8a25d811":"norm_features = norm.transform(df.drop('item_cnt_day',axis=1))\nnorm_features\n\n# transform = D\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015f de\u011ferleri olan bir DataFrame \u00fcretir. \u00dcretilen DataFrame kendisiyle ayn\u0131 uzunlu\u011funa sahip olur.","e624a0d7":"df_feat = pd.DataFrame(norm_features, columns=df.columns[:-1])","bb078ee3":"# Train ve Test olu\u015fturma\nx = df_feat\ny = df[\"item_cnt_day\"]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=1)","b7e69411":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {} \".format(3,knn.score(x_test,y_test)))","93cb7f65":"from sklearn.naive_bayes import GaussianNB \ngnb = GaussianNB() \ngnb.fit(x_train, y_train) \n\nprint(\"score: \", gnb.score(x_test,y_test))","350740fc":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"score: \", dt.score(x_test,y_test))","b6804507":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import accuracy_score\n\nvoting = VotingClassifier(estimators=[(\"dt\",dt),(\"knn\",knn),(\"gnb\",gnb)])\n\nfor i in (dt, knn, gnb, voting):\n    i.fit(x_train, y_train)\n    y_pred = i.predict(x_test)\n    print(i, \"= \",accuracy_score(y_test, y_pred))","142c215d":"# Accuracy\n\nfrom sklearn.metrics import accuracy_score\nprediction = voting.predict(x_test)\naccuracy = accuracy_score(y_test, prediction)\nprint(100*accuracy)","81d602ae":"# F-measure\n\nfrom sklearn.metrics import f1_score\nprediction = voting.predict(x_test)\n\n# [None, 'micro', 'macro', 'weighted']\nprecision = 100*f1_score(y_test, prediction, average=None)\nprint(precision)","f09e02fe":"# Precision\n\nfrom sklearn.metrics import precision_score\nprediction = voting.predict(x_test)\n\n# [None, 'binary' (default), 'micro', 'macro', 'samples', 'weighted']\nprecision = 100*precision_score(y_test, prediction, average=None) \nprint(precision)","d48fdb6a":"# Recall\n\nfrom sklearn.metrics import recall_score\nprediction = voting.predict(x_test)\nprecision = 100*recall_score(y_test, prediction, average=None)\nprint(precision)","32aba4e4":"### De\u011ferlendirme Metrikleri: (Voting)","12d85967":"### KNN","20afeff1":"### Decison Tree","f5d0d930":"### Naive Bayes","c5bf93d7":"### Voting Classifier"}}