{"cell_type":{"464d88ab":"code","57217a79":"code","583eca11":"code","e7995ffa":"code","065d7c9b":"code","50e306d7":"code","48cfb26b":"code","35fcc58d":"code","5eabc82e":"code","4c1e135f":"code","18197bc3":"code","9492a694":"code","5667ad2b":"code","9029c314":"code","f9955318":"code","8d4acd21":"code","9ea2ef54":"code","b084964e":"code","ecc76862":"code","b2d09b1c":"code","4795a4c2":"code","fb70fce7":"code","0bddba29":"code","3e93b41e":"code","ca7dfb08":"code","db5f10fc":"code","6031fb02":"code","b0e4f62a":"code","ec2d7c46":"code","6c7a7db6":"code","d10a2e3d":"code","0ba51602":"code","012dad24":"code","5e95a7d4":"code","e3682dce":"code","3258bda4":"code","d35bebb3":"code","f777e130":"code","ed048a31":"code","16cf0cfb":"code","caa2e108":"code","0ca14bbe":"code","40010af1":"code","bd6ce82b":"code","46548f9d":"code","8b98a655":"code","71cd640c":"code","cd276971":"code","badf28dc":"code","9a4818bb":"code","63207980":"code","8427e27a":"code","25c5375c":"code","66585937":"code","b7895d19":"code","006f7253":"code","73872592":"code","20a2a489":"code","59ab4842":"code","f04bda16":"code","be283e77":"code","feb6b3f1":"code","26d533b6":"code","d8c9da9e":"code","b5115894":"code","660d1ce6":"code","4b94b25b":"code","3650e392":"code","012ac2bd":"code","cebf6e25":"code","2a35d809":"code","4a6f99cc":"code","b910307e":"code","3ee51503":"code","50a357c1":"code","83b76cad":"code","e4df8425":"code","60f8494b":"markdown","9fc01489":"markdown","dd6f6e89":"markdown","74bf96e3":"markdown","c8f796d0":"markdown","878bc4d3":"markdown","28c0a072":"markdown","3588cf68":"markdown","f331f770":"markdown","0e6f3310":"markdown","ec7a2762":"markdown","a0a7b0e0":"markdown","7478a57d":"markdown","30303ab7":"markdown","cb8ef67a":"markdown","1d4ded30":"markdown","64be7541":"markdown","612ce354":"markdown","38f646f8":"markdown","dfbcb8a4":"markdown","857bb923":"markdown","34e9e075":"markdown","89fc6e7a":"markdown","fc9437d7":"markdown","0950d0a5":"markdown","96317c12":"markdown","7390c148":"markdown","5b87faa9":"markdown","dbc13abd":"markdown","f90bb098":"markdown","494d3f6b":"markdown","e2b85f1c":"markdown","84661ca2":"markdown","fcc0a8ec":"markdown","de502faf":"markdown","2d59f73c":"markdown","dbf6abb4":"markdown","f3f09d74":"markdown","9cca2b8a":"markdown","245d2c0d":"markdown","38a88676":"markdown","eb2e8dae":"markdown","2edc036f":"markdown","a989902e":"markdown","584a5a5c":"markdown","6a999383":"markdown","4c219a3d":"markdown","66a9d14a":"markdown","9993ef82":"markdown","82281ba3":"markdown","8e78e138":"markdown","9a1f1ce2":"markdown","b5783eeb":"markdown","de998ed0":"markdown","6a88183e":"markdown","eff5c99e":"markdown","3581a6f7":"markdown","dfb4e3d7":"markdown","43ff09af":"markdown","0955a97b":"markdown","873e75bb":"markdown","4288065c":"markdown","2555b167":"markdown","c20c3598":"markdown","e9fcecb3":"markdown","76406fa8":"markdown","bfbcc5af":"markdown","cddadfa6":"markdown","b86feda8":"markdown","11aef05b":"markdown","bd21dba5":"markdown"},"source":{"464d88ab":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom math import floor\n","57217a79":"data = pd.read_csv(\"..\/input\/Train.csv\")\ntrain_o = data.copy()\nprint(data.shape)\ndata.columns = ['ID','Month','Passengers']\ntrain_o.columns = ['ID','Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%d-%m-%Y %H:%M')\ntrain_o['Month'] = pd.to_datetime(train_o['Month'], format='%d-%m-%Y %H:%M')\nprint(data.head())\nprint(data.tail())","583eca11":"test = pd.read_csv(\"..\/input\/Test.csv\")\ntest_o = test.copy()\ntest.columns = ['ID','Month']\ntest_o.columns = ['ID','Month']\ntest['Month'] = pd.to_datetime(test['Month'], format='%d-%m-%Y %H:%M')\ntest_o['Month'] = pd.to_datetime(test_o['Month'], format='%d-%m-%Y %H:%M')\nprint(test.tail())\nprint(test.shape)  ","e7995ffa":"for i in (data,train_o,test,test_o):\n    i['year'] = i.Month.dt.year\n    i['mon']  = i.Month.dt.month\n    i['day'] = i.Month.dt.day\n    i['hour'] = i.Month.dt.hour","065d7c9b":"data.head()","50e306d7":"#Aggregating the dataset at daily level\ndata.index = data.Month \ndata = data.resample('D').mean()","48cfb26b":"print(data.head())\nprint(data.tail())","35fcc58d":"#lets divide train dataset into validation and train set\n#split the train data into training set and valid set\ntrain = data['2012-08-25':'2014-06-24']\nvalid = data['2014-06-25':'2014-09-25']\n","5eabc82e":"train.shape,valid.shape","4c1e135f":"test.index = test.Month \ntest = test.resample('D').mean() ","18197bc3":"test.head()","9492a694":"train['Passengers'].plot(figsize=(12, 4))\nplt.legend(loc='best')\nplt.title('passenger traffic')\nplt.show(block=False)","5667ad2b":"# data = data.assign(Passengers_Mean_Imputation=data.Passengers.fillna(data.Passengers.mean()))\n# data[['Passengers_Mean_Imputation']].plot(figsize=(12, 4))\n# plt.legend(loc='best')\n# plt.title('Airline passenger traffic: Mean imputation')\n# plt.show(block=False)","9029c314":"# data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\n# data[['Passengers_Linear_Interpolation']].plot(figsize=(12, 4))\n# plt.legend(loc='best')\n# plt.title('Airline passenger traffic: Linear interpolation')\n# plt.show(block=False)","f9955318":"# data['Passengers'] = data['Passengers_Linear_Interpolation']\n# data.drop(columns=['Passengers_Mean_Imputation','Passengers_Linear_Interpolation'],inplace=True)","8d4acd21":"import seaborn as sns\nfig = plt.subplots(figsize=(12, 2))\nax = sns.boxplot(x=train['Passengers'],whis=1.5)","9ea2ef54":"fig = train.Passengers.hist(figsize = (12,4))","b084964e":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 12, 8\ndecomposition = sm.tsa.seasonal_decompose(train['Passengers'], model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","ecc76862":"decomposition = sm.tsa.seasonal_decompose(train['Passengers'], model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","b2d09b1c":"train_len = train.shape[0]\ntrain_len","4795a4c2":"y_hat_naive = valid.copy()\ny_hat_naive['naive_forecast'] = train['Passengers'][train_len-1]","fb70fce7":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_naive['naive_forecast'], label='Naive forecast')\nplt.legend(loc='best')\nplt.title('Naive Method')\nplt.show()","0bddba29":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_naive['naive_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_naive['naive_forecast'])\/valid['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Naive method'], 'MAPE': [mape], 'RMSE': [rmse]})\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","3e93b41e":"y_hat_avg = valid.copy()\ny_hat_avg['avg_forecast'] = train['Passengers'].mean()","ca7dfb08":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_avg['avg_forecast'], label='Simple average forecast')\nplt.legend(loc='best')\nplt.title('Simple Average Method')\nplt.show()","db5f10fc":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_avg['avg_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_avg['avg_forecast'])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple average method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","6031fb02":"y_hat_sma = data.copy()\nma_window = 12\ny_hat_sma['sma_forecast'] = data['Passengers'].rolling(ma_window).mean()\ny_hat_sma['sma_forecast'][train_len:] = y_hat_sma['sma_forecast'][train_len-1]","b0e4f62a":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_sma['sma_forecast'], label='Simple moving average forecast')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method')\nplt.show()","ec2d7c46":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_sma['sma_forecast'][train_len:])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_sma['sma_forecast'][train_len:])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple moving average forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","6c7a7db6":"from statsmodels.tsa.holtwinters import SimpleExpSmoothing\nmodel = SimpleExpSmoothing(train['Passengers'])\nmodel_fit = model.fit(smoothing_level=0.2,optimized=False)\nmodel_fit.params\ny_hat_ses = valid.copy()\ny_hat_ses['ses_forecast'] = model_fit.forecast(len(valid))\ny_hat_ses[y_hat_ses['ses_forecast'].isnull()]\ny_hat_ses['ses_forecast'].fillna(y_hat_ses['ses_forecast'].mean(),inplace=True)","d10a2e3d":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_ses['ses_forecast'], label='Simple exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Simple Exponential Smoothing Method')\nplt.show()","0ba51602":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_ses['ses_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_ses['ses_forecast'])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Simple exponential smoothing forecast'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults","012dad24":"from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='additive', seasonal=None)\nmodel_fit = model.fit(smoothing_level=0.1, smoothing_slope=0.001, optimized=False)\nprint(model_fit.params)\ny_hat_holt = valid.copy()\ny_hat_holt['holt_forecast'] = model_fit.forecast(len(valid))","5e95a7d4":"plt.figure(figsize=(12,4))\nplt.plot( train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_holt['holt_forecast'], label='Holt\\'s exponential smoothing forecast')\nplt.legend(loc='best')\nplt.title('Holt\\'s Exponential Smoothing Method')\nplt.show()","e3682dce":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_holt['holt_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_holt['holt_forecast'])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt\\'s exponential smoothing method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","3258bda4":"y_hat_hwa = valid.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=12 ,trend='add', seasonal='add')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwa['hw_forecast'] = model_fit.forecast(len(valid))","d35bebb3":"plt.figure(figsize=(12,4))\nplt.plot( train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_hwa['hw_forecast'], label='Holt Winters\\'s additive forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Additive Method')\nplt.show()","f777e130":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_hwa['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_hwa['hw_forecast'])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' additive method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","ed048a31":"y_hat_hwm = valid.copy()\nmodel = ExponentialSmoothing(np.asarray(train['Passengers']) ,seasonal_periods=2 ,trend='add', seasonal='mul')\nmodel_fit = model.fit(optimized=True)\nprint(model_fit.params)\ny_hat_hwm['hw_forecast'] = model_fit.forecast(len(valid))\ny_hat_hwm['hw_forecast'].isnull().sum()","16cf0cfb":"plt.figure(figsize=(12,4))\nplt.plot( train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_hwm['hw_forecast'], label='Holt Winters\\'s mulitplicative forecast')\nplt.legend(loc='best')\nplt.title('Holt Winters\\' Mulitplicative Method')\nplt.show()","caa2e108":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_hwm['hw_forecast'])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_hwm['hw_forecast'])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Holt Winters\\' multiplicative method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","0ca14bbe":"data['Passengers'].plot(figsize=(12, 4))\nplt.legend(loc='best')\nplt.title('assenger traffic')\nplt.show(block=False)","40010af1":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","bd6ce82b":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","46548f9d":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\nplt.figure(figsize=(12,4))\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","8b98a655":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(1), data.index)\nplt.figure(figsize=(12,4))\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","71cd640c":"data_boxcox_diff.dropna(inplace=True)","cd276971":"data_boxcox_diff.tail()","badf28dc":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","9a4818bb":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","63207980":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(12,4))\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 25)\nplt.show()","8427e27a":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(12,4))\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 25)\nplt.show()","25c5375c":"train_data_boxcox = data_boxcox[:train_len]\nvalid_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\nvalid_data_boxcox_diff = data_boxcox_diff[train_len-1:]","66585937":"train_data_boxcox_diff","b7895d19":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(train_data_boxcox_diff, order=(2, 0, 0)) \nmodel_fit = model.fit()\nprint(model_fit.params)","006f7253":"y_hat_ar = data_boxcox_diff.copy()\ny_hat_ar['ar_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox_diff'].cumsum()\ny_hat_ar['ar_forecast_boxcox'] = y_hat_ar['ar_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ar['ar_forecast'] = np.exp(y_hat_ar['ar_forecast_boxcox'])","73872592":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_ar['ar_forecast'][valid.index.min():], label='Auto regression forecast')\nplt.legend(loc='best')\nplt.title('Auto Regression Method')\nplt.show()","20a2a489":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_ar['ar_forecast'][valid.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_ar['ar_forecast'][valid.index.min():])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive (AR) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","59ab4842":"model = ARIMA(train_data_boxcox_diff, order=(0, 0, 2)) \nmodel_fit = model.fit()\nprint(model_fit.params)","f04bda16":"y_hat_ma = data_boxcox_diff.copy()\ny_hat_ma['ma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox_diff'].cumsum()\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ma['ma_forecast'] = np.exp(y_hat_ma['ma_forecast_boxcox'])","be283e77":"plt.figure(figsize=(12,4))\nplt.plot(data['Passengers'][:train_len], label='Train')\nplt.plot(data['Passengers'][train_len:], label='valid')\nplt.plot(y_hat_ma['ma_forecast'][valid.index.min():], label='Moving average forecast')\nplt.legend(loc='best')\nplt.title('Moving Average Method')\nplt.show()","feb6b3f1":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_ma['ma_forecast'][valid.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_ma['ma_forecast'][valid.index.min():])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Moving Average (MA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","26d533b6":"model = ARIMA(train_data_boxcox_diff, order=(1, 0, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","d8c9da9e":"y_hat_arma = data_boxcox_diff.copy()\ny_hat_arma['arma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox_diff'].cumsum()\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arma['arma_forecast'] = np.exp(y_hat_arma['arma_forecast_boxcox'])","b5115894":"plt.figure(figsize=(12,4))\nplt.plot( data['Passengers'][:train_len-1], label='Train')\nplt.plot(data['Passengers'][train_len-1:], label='valid')\nplt.plot(y_hat_arma['arma_forecast'][valid.index.min():], label='ARMA forecast')\nplt.legend(loc='best')\nplt.title('ARMA Method')\nplt.show()","660d1ce6":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_arma['arma_forecast'][train_len-1:])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_arma['arma_forecast'][train_len-1:])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive moving average (ARMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","4b94b25b":"model = ARIMA(train_data_boxcox, order=(2, 1, 4))\nmodel_fit = model.fit()\nprint(model_fit.params)","3650e392":"y_hat_arima = data_boxcox_diff.copy()\ny_hat_arima['arima_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox_diff'].cumsum()\ny_hat_arima['arima_forecast_boxcox'] = y_hat_arima['arima_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arima['arima_forecast'] = np.exp(y_hat_arima['arima_forecast_boxcox'])","012ac2bd":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_arima['arima_forecast'][valid.index.min():], label='ARIMA forecast')\nplt.legend(loc='best')\nplt.title('Autoregressive integrated moving average (ARIMA) method')\nplt.show()","cebf6e25":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_arima['arima_forecast'][valid.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_arima['arima_forecast'][valid.index.min():])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Autoregressive integrated moving average (ARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","2a35d809":"from statsmodels.tsa.statespace.sarimax import SARIMAX\n\nmodel = SARIMAX(train_data_boxcox, order=(3, 1, 4), seasonal_order=(0, 1, 2, 7)) \nmodel_fit = model.fit()\nprint(model_fit.params)","4a6f99cc":"y_hat_sarima = data_boxcox_diff.copy()\ny_hat_sarima['sarima_forecast_boxcox'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_sarima['sarima_forecast'] = np.exp(y_hat_sarima['sarima_forecast_boxcox'])","b910307e":"plt.figure(figsize=(12,4))\nplt.plot(train['Passengers'], label='Train')\nplt.plot(valid['Passengers'], label='valid')\nplt.plot(y_hat_sarima['sarima_forecast'][valid.index.min():], label='SARIMA forecast')\nplt.legend(loc='best')\nplt.title('Seasonal autoregressive integrated moving average (SARIMA) method')\nplt.show()","3ee51503":"rmse = np.sqrt(mean_squared_error(valid['Passengers'], y_hat_sarima['sarima_forecast'][valid.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(valid['Passengers']-y_hat_sarima['sarima_forecast'][valid.index.min():])\/valid['Passengers'])*100,2)\n\ntempResults = pd.DataFrame({'Method':['Seasonal autoregressive integrated moving average (SARIMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = pd.concat([results, tempResults])\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","50a357c1":"#calculate hourly rate of passengers\ntrain_o['ratio'] = train_o['Passengers']\/train_o['Passengers'].sum()\n#group the hourly ratio\ntemp=train_o.groupby(['hour'])['ratio'].sum()\ntemp= pd.DataFrame(temp,columns=['ratio']).reset_index()\ntemp.head()","83b76cad":"#y_hat_sarima_t = test.copy()\npredict = model_fit.predict(test.index.min(), test.index.max())\npredict = np.exp(predict)\ntest['prediction'] = predict\nmerge = pd.merge(test,test_o,on=('day','mon','year'),how='left')\nmerge['hour'] = merge['hour_y']\nmerge = merge.drop(['year','mon','hour_x','hour_y'],axis=1)\nprediction = pd.merge(merge,temp,on='hour',how='left')\nprediction.head()\nprediction['Count'] = prediction['prediction']*prediction['ratio']*24\nprediction['ID'] = prediction['ID_y']\nprediction.head()","e4df8425":"submission = prediction.drop(['ID_x','day','prediction','ID_y','Month','hour','ratio'],axis=1)\npd.DataFrame(submission,columns=['ID','Count']).to_csv(\"Submission_SARIMA.csv\",index=False)","60f8494b":"### Calculate RMSE and MAPE","9fc01489":"### Plot train, test and forecast","dd6f6e89":"### Plot train, test and forecast","74bf96e3":"### Calculate RMSE and MAPE","c8f796d0":"### Plot train, test and forecast","878bc4d3":"### Augmented Dickey-Fuller (ADF) test","28c0a072":"# Initial setup","3588cf68":"## Auto regression moving average method (ARMA)","f331f770":"## Seasonal auto regressive integrated moving average (SARIMA)","0e6f3310":"### Additive seasonal decomposition","ec7a2762":"## Partial autocorrelation function (PACF)","a0a7b0e0":"### Differencing to remove trend","7478a57d":"## Split time series data into training and test set","30303ab7":"### Calculate RSME and MAPE","cb8ef67a":"### Calculate RMSE and MAPE","1d4ded30":"### Calculate RMSE and MAPE","64be7541":"### Box plot and interquartile range","612ce354":"### Plot train, test and forecast","38f646f8":"### Calculate RMSE and MAPE","dfbcb8a4":"### Calculate RMSE and MAPE","857bb923":"### Calculate RMSE and MAPE","34e9e075":"## Holt Winters' additive method with trend and seasonality","89fc6e7a":"# Auto Regressive methods","fc9437d7":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","0950d0a5":"## Simple exponential smoothing","96317c12":"## Autocorrelation function (ACF)","7390c148":"### Plot train, test and forecast","5b87faa9":"### Use linear interpolation to impute missing values","dbc13abd":"## Plot time series data","f90bb098":"### Mean imputation","494d3f6b":"### Plot train, test and forecast","e2b85f1c":"## Missing value treatment","84661ca2":"## Time series Decomposition","fcc0a8ec":"### Plot train, test and forecast","de502faf":"### Calculate RMSE and MAPE","2d59f73c":"### Recover original time series","dbf6abb4":"### Multiplicative seasonal decomposition","f3f09d74":"### Linear interpolation","9cca2b8a":"## Import required packages","245d2c0d":"### Calculate RMSE and MAPE","38a88676":"# Exponential smoothing methods","eb2e8dae":"## Outlier detection","2edc036f":"# Simple time series methods","a989902e":"# Time series forecasting","584a5a5c":"## Holt Winter's multiplicative method with trend and seasonality","6a999383":"## Holt's method with trend","4c219a3d":"## Auto regressive integrated moving average (ARIMA)","66a9d14a":"### Box Cox transformation to make variance constant","9993ef82":"### Histogram plot","82281ba3":"### Augmented Dickey-Fuller (ADF) test","8e78e138":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","9a1f1ce2":"### Recover original time series forecast","b5783eeb":"### Plot train, test and forecast","de998ed0":"## Naive method","6a88183e":"## Auto regression method (AR)","eff5c99e":"### Plot train, test and forecast","3581a6f7":"### Recover original time series","dfb4e3d7":"## Stationarity vs non-stationary time series","43ff09af":"### Plot train, test and forecast","0955a97b":"# Time series analysis","873e75bb":"### Plot train, test and forecast","4288065c":"# Build and evaluate time series forecast","2555b167":"## Simple moving average method","c20c3598":"### Recover original time series forecast","e9fcecb3":"## Import time series data: JETRAIL passenger traffic","76406fa8":"### Recover original time series","bfbcc5af":"### Calculate RMSE and MAPE","cddadfa6":"### Calculate RMSE and MAPE","b86feda8":"### Plot train, test and forecast","11aef05b":"## Moving average method (MA)","bd21dba5":"## Simple average method"}}