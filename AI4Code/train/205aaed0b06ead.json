{"cell_type":{"74da983f":"code","60302494":"code","456749f5":"code","f85a7684":"code","8129beb5":"code","44602e83":"code","13f31f14":"code","7af2272c":"code","68b816d6":"code","629f2fb7":"code","e048c7fe":"code","cab299f2":"code","fc7c2383":"code","8c02663b":"code","6c1777e0":"code","ccb6ecf7":"code","76a96790":"code","e48adce4":"code","cc606b8c":"code","50ff25f5":"code","cbc6d756":"markdown","5396c876":"markdown","dc5513e2":"markdown","d4e62e55":"markdown","384b7327":"markdown","3c48f072":"markdown","7c37cfb2":"markdown","4942bbf2":"markdown"},"source":{"74da983f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')","60302494":"data = pd.read_csv('..\/input\/drug-classification\/drug200.csv')","456749f5":"data","f85a7684":"data.info()","8129beb5":"data.groupby('Drug').median()","44602e83":"sns.countplot(data['Drug'])","13f31f14":"plt.figure(figsize=(20,12))\nplt.subplot(2,2,1)\nsns.countplot('Sex',hue='Drug',data=data)\nplt.subplot(2,2,2)\nsns.countplot('Cholesterol',hue='Drug',data=data)\nplt.subplot(2,2,3)\nsns.countplot('BP',hue='Drug',data=data)","7af2272c":"plt.figure(figsize=(20,12))\nplt.subplot(2,2,1)\nsns.boxplot(y='Age',x='Drug',data=data)\nplt.subplot(2,2,2)\nsns.boxplot(y='Na_to_K',x='Drug',data=data)","68b816d6":"from sklearn.preprocessing import LabelEncoder\nto_be_encoded = ['Sex','BP','Cholesterol']\nlabel_encoder = LabelEncoder()\ndfs = []\nfor i in to_be_encoded:\n    temp = pd.DataFrame({'Before Encoding':data[i].unique(),'After Encoding':label_encoder.fit_transform(data[i].unique())})\n    #print(temp.sort_values(by=['After Encoding'],),'\\n')\n    dfs.append([temp.sort_values(by=['After Encoding'],),i])\n    data[i] = label_encoder.fit_transform(data[i])\n#temp.sort_values(by=['After Encoding'])","629f2fb7":"print(dfs[0][1])\ndfs[0][0]","e048c7fe":"print(dfs[1][1])\ndfs[1][0]","cab299f2":"print(dfs[2][1])\ndfs[2][0]","fc7c2383":"X = data.drop('Drug',axis=1)\nY = data['Drug']","8c02663b":"from sklearn.feature_selection import SelectKBest, chi2\nfs = SelectKBest(score_func=chi2, k='all')\nfs.fit(X, Y)\nper = []\nfor i in fs.scores_:\n    per.append(round(((i\/sum(fs.scores_))*100),3))\n\nfeatures_data = pd.DataFrame({'Feature':X.columns,'Scores':fs.scores_,'Importance (%)':per}).sort_values(by=['Scores'],ascending=False)\n\nplt.figure(figsize=(9,3))\nsns.barplot( 'Importance (%)','Feature',orient='h',data=features_data)\ninsignificant = features_data.loc[features_data['Importance (%)']<0.005]['Feature'].unique()","6c1777e0":"features_data","ccb6ecf7":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=100)","76a96790":"from sklearn.metrics import accuracy_score,classification_report\n\n#XGB\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nxgb = XGBClassifier() \n\n\n# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\n\n#RFC\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\n\n#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\naccuracy = []\nfor i in range(1,40):    \n    kn = KNeighborsClassifier(n_neighbors=i)\n    kn.fit(X_train,Y_train)\n    predK = kn.predict(X_test)\n    accuracy.append([accuracy_score(Y_test,predK),i])\n    #print('Tested for k =',i)\ntemp = accuracy[0]\nfor m in accuracy:\n    if temp[0] < m[0]:\n        temp=m\nknn = KNeighborsClassifier(n_neighbors=temp[1])\n\n#SVM\nfrom sklearn.svm import SVC\nsvc = SVC()\n\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'C': [0.1,1, 10, 100, 1000,2000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} \ngrid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)\n\nprint('Models Imported')","e48adce4":"model_acc = []\nmodels = [xgb,lr,rfc,knn,svc,grid]\n#model_name = ['xgb','lr','rfc','kno','svc','grid']\nfor i in models:\n    i.fit(X_train,Y_train)\n    model_acc.append(accuracy_score(Y_test,i.predict(X_test)))\n                      \nmodels = pd.DataFrame({'Models':models,'Accuracy':model_acc})","cc606b8c":"models = models.sort_values(by=['Accuracy'],ascending=False).reset_index().drop('index',axis=1)\nbest = models['Models'][0]\nmodels['Models']=models['Models'].astype(str).str.split(\"(\", n = 2, expand = True)[0]\nmodels","50ff25f5":"print('Hence the best model is',models['Models'][0],'with an accuracy of',round((models['Accuracy'][0]*100),2),'%')\nprint('\\nThe classification report is:')\nprint(classification_report(Y_test,best.predict(X_test)))","cbc6d756":"# test train split","5396c876":"# One hot encoding","dc5513e2":"# Importing libraries","d4e62e55":"# EDA","384b7327":"# Feature Selection","3c48f072":"# Importing the data","7c37cfb2":"# Model Selection","4942bbf2":"# <center> Drug prediction"}}