{"cell_type":{"ae393b78":"code","23c938e5":"code","e38dd3d0":"code","0a5e0d24":"code","01729a55":"code","c45d167d":"code","4913ca05":"code","af5daa33":"code","394f6fd5":"code","0bc4210e":"code","6ae3bfa7":"code","3dd89c9b":"code","e24c412c":"code","db84c251":"code","71ecc342":"code","0ba8d8d2":"code","36ed46e8":"code","2e5668f5":"code","6541b7e4":"code","579ca492":"code","9db1ac20":"code","a168ad1e":"code","398f2481":"code","23c1bc52":"code","7934d01d":"code","2e582678":"code","6ac6f0f6":"code","8964b5cb":"code","9ac5870d":"code","586ae730":"markdown","87becd1d":"markdown","69a1eee8":"markdown"},"source":{"ae393b78":"import pandas as pd, numpy as np, os\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt","23c938e5":"!pwd","e38dd3d0":"!ls \/kaggle\/input\/","0a5e0d24":"PATH = '..\/input\/ranzcr-oof-and-subs\/'\nFILES = os.listdir(PATH)\nFILES","01729a55":"# removed subs and oofs with potential data leakage\n#FILES = [fn for fn in FILES if '9' not in fn and '10' not in fn]\nFILES = [fn for fn in FILES if '9' not in fn and '10' not in fn and '4' not in fn]\nFILES","c45d167d":"OOF = np.sort( [f for f in FILES if 'oof' in f] )\nOOF_CSV = [pd.read_csv(PATH+k) for k in OOF]\n\nprint('We have %i oof files...'%len(OOF))\nprint(); print(OOF)","4913ca05":"OOF_CSV[0].head()","af5daa33":"OOF_CSV[0].columns","394f6fd5":"OOF_CSV[0].iloc[:, 1:12].columns.tolist()","0bc4210e":"target_cols = OOF_CSV[0].iloc[:, 1:12].columns.tolist()\npred_cols = OOF_CSV[0].iloc[:, 15:].columns.tolist()","6ae3bfa7":"pred_cols","3dd89c9b":"def macro_multilabel_auc(label, pred):\n    aucs = []\n    for i in range(len(target_cols)):\n        aucs.append(roc_auc_score(label[:, i], pred[:, i]))\n    #print(np.round(aucs, 4))\n    return np.mean(aucs)","e24c412c":"x = np.zeros(( len(OOF_CSV[0]), len(OOF)*len(pred_cols)))","db84c251":"x.shape","71ecc342":"for k in range(len(OOF)):\n    x[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] = OOF_CSV[k][pred_cols].values","0ba8d8d2":"TRUE = OOF_CSV[0][target_cols].values\nTRUE","36ed46e8":"all = []\nfor k in range(len(OOF)):\n    #auc = roc_auc_score(OOF_CSV[0].target,x[:,k])\n    auc = macro_multilabel_auc(OOF_CSV[0][target_cols].values, x[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))])\n    all.append(auc)\n    print('Model %i has OOF AUC = %.4f'%(k,auc))\n    \nm = [np.argmax(all)]; w = []","2e5668f5":"m","6541b7e4":"w","579ca492":"old = np.max(all); \n\nRES = 500;#200; \nPATIENCE = 30;#10; \nTOL = 0.00005#0.0003\n'''\nRES = 200;#200; \nPATIENCE = 10;#10; \nTOL = 0.0003#0.0003\n'''\nDUPLICATES = False\n\nprint('Ensemble AUC = %.4f by beginning with model %i'%(old,m[0]))\nprint()\n\nfor kk in range(len(OOF)):\n    \n    # BUILD CURRENT ENSEMBLE\n    md = x[:,int(m[0]*len(pred_cols)):int((m[0]+1)*len(pred_cols))]\n    for i, k in enumerate(m[1:]):\n        md = w[i]*x[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] + (1-w[i])*md\n        \n    # FIND MODEL TO ADD\n    mx = 0; mx_k = 0; mx_w = 0\n    print('Searching for best model to add... ')\n    \n    # TRY ADDING EACH MODEL\n    for k in range(len(OOF)):\n        print(k,', ',end='')\n        if not DUPLICATES and (k in m): continue\n            \n        # EVALUATE ADDING MODEL K WITH WEIGHTS W\n        bst_j = 0; bst = 0; ct = 0\n        for j in range(RES):\n            tmp = j\/RES*x[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] + (1-j\/RES)*md\n            auc = macro_multilabel_auc(TRUE,tmp)\n            if auc>bst:\n                bst = auc\n                bst_j = j\/RES\n            else: ct += 1\n            if ct>PATIENCE: break\n        if bst>mx:\n            mx = bst\n            mx_k = k\n            mx_w = bst_j\n            \n    # STOP IF INCREASE IS LESS THAN TOL\n    inc = mx-old\n    if inc<=TOL: \n        print(); print('No increase. Stopping.')\n        break\n        \n    # DISPLAY RESULTS\n    print(); #print(kk,mx,mx_k,mx_w,'%.5f'%inc)\n    print('Ensemble AUC = %.4f after adding model %i with weight %.3f. Increase of %.4f'%(mx,mx_k,mx_w,inc))\n    print()\n    \n    old = mx; m.append(mx_k); w.append(mx_w)","9db1ac20":"print('We are using models',m)\nprint('with weights',w)\nprint('and achieve ensemble AUC = %.4f'%old)","a168ad1e":"md = x[:, int(m[0]*len(pred_cols)):int((m[0]+1)*len(pred_cols))]\nfor i, k in enumerate(m[1:]):\n    md = w[i]*x[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] + (1-w[i])*md\nplt.hist(md,bins=100)\nplt.title('Ensemble OOF predictions')\nplt.show()","398f2481":"df = OOF_CSV[0].copy()\ndf.pred = md\ndf.to_csv('ensemble_oof.csv',index=False)\ndf.head()","23c1bc52":"SUB = np.sort( [f for f in FILES if 'sub' in f] )\nSUB_CSV = [pd.read_csv(PATH+k) for k in SUB]\n\nprint('We have %i submission files...'%len(SUB))\nprint(); print(SUB)","7934d01d":"# VERFIY THAT SUBMISSION FILES MATCH OOF FILES\na = np.array( [ int( x.split('_')[1].split('.')[0]) for x in SUB ] )\nb = np.array( [ int( x.split('_')[1].split('.')[0]) for x in OOF ] )\nif len(a)!=len(b):\n    print('ERROR submission files dont match oof files')\nelse:\n    for k in range(len(a)):\n        if a[k]!=b[k]: print('ERROR submission files dont match oof files')","2e582678":"y = np.zeros(( len(SUB_CSV[0]), len(SUB)*len(pred_cols)))\nfor k in range(len(SUB)):\n    y[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] = SUB_CSV[k][target_cols].values","6ac6f0f6":"md2 = y[:, int(m[0]*len(pred_cols)):int((m[0]+1)*len(pred_cols))]\nfor i, k in enumerate(m[1:]):\n    md2 = w[i]*y[:, int(k*len(pred_cols)):int((k+1)*len(pred_cols))] + (1-w[i])*md2\nplt.hist(md2,bins=100)\nplt.show()","8964b5cb":"df = SUB_CSV[0].copy()\ndf[target_cols] = md2\ndf.to_csv('ensemble_sub.csv',index=False)\ndf.head()","9ac5870d":"pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv',usecols=[0],index_col=0).join(pd.read_csv('ensemble_sub.csv').set_index('StudyInstanceUID')).fillna(0).to_csv('submission.csv')   ","586ae730":"# Build SUB Ensemble","87becd1d":"# Build OOF Ensemble. Maximize CV Score","69a1eee8":"# Load SUB Files"}}