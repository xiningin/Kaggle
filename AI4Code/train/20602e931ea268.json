{"cell_type":{"083c0ad0":"code","cd758252":"code","a3227eb9":"code","27c8a6ae":"code","e2c7e658":"code","7fd4fe91":"code","e0227e02":"code","619ad5a4":"code","d699d5ba":"code","da7db8b7":"code","47522b75":"code","324116fb":"code","b1ff966d":"code","83e08638":"code","7abbbca1":"code","2be9a573":"code","ec076343":"code","2158119c":"code","de122720":"code","3e301e6b":"code","9f795cca":"code","d22a7fa8":"code","60a40dad":"code","55fd9be6":"code","3ce29c25":"code","d7f73e7c":"code","6eeadd25":"code","41592efe":"code","2b16e619":"code","33f852ab":"code","f70eda30":"code","bb4002e8":"code","9817cbb1":"code","7af649b9":"code","2f598dbb":"code","eae12421":"code","8ca69375":"code","c94f2a22":"code","852da21e":"code","10c32286":"code","51a24e52":"code","45b3b1d6":"code","f705d4b6":"code","910c4a41":"code","df78c892":"code","c7133ced":"code","64e773d8":"code","96120c6d":"code","b2d9ff23":"code","4aa1f8fe":"code","a2f2f21e":"code","9de549c3":"code","f9fb25cf":"code","def3449a":"code","866342bb":"code","cd1cc02c":"code","3d9a5447":"code","4d650c92":"code","dbfff765":"code","53f0e4eb":"code","e90e1dee":"code","266cc182":"code","1e547dff":"code","e79f8498":"code","59ea6f29":"code","42db164a":"code","540f1374":"code","2d94ba19":"code","fa0d57ff":"code","bfa24941":"code","74d5b1cd":"code","13ef6454":"code","24de08a9":"code","20f4c413":"code","b2be07ea":"code","bf12f4db":"code","03c9786c":"markdown","66c99b72":"markdown","5f0b45a2":"markdown","a8509c66":"markdown","89b8b6ef":"markdown","e69fce3e":"markdown","d6fe1eda":"markdown","9d6abba1":"markdown","c46ab003":"markdown","61ee87e8":"markdown","4bca2b1f":"markdown","7d168bb0":"markdown","af801673":"markdown","53a6475d":"markdown","402ebeb1":"markdown","c23949a6":"markdown","d62af1f7":"markdown"},"source":{"083c0ad0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd758252":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport scipy\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\n\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","a3227eb9":"train_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ncombine = [train_df, test_df]","27c8a6ae":"train_df.shape, test_df.shape","e2c7e658":"train_df.info()","7fd4fe91":"train_df.describe()","e0227e02":"train_df.dtypes.value_counts()","619ad5a4":"train_df.duplicated().value_counts()","d699d5ba":"categorical = train_df.select_dtypes(include='object')\nnumerical = train_df.select_dtypes(exclude='object')","da7db8b7":"categorical.shape, numerical.shape","47522b75":"categorical.columns","324116fb":"train_df['Neighborhood'].value_counts()","b1ff966d":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(categorical.columns[0:23]):\n    sns.countplot(categorical[column])\n    plt.subplot(6, 4, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","83e08638":"fig = plt.figure(figsize=(20, 15))\nfor index, column in enumerate(categorical.columns[22:43]):\n    sns.countplot(categorical[column])\n    plt.subplot(6, 4, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","7abbbca1":"#features that in most samples  have only one value\n\nfeatures_one_value_cat = ['Street', 'LandContour', 'Utilities', 'LandSlope', 'Condition2', 'RoofMatl', \n                      'BsmtCond', 'BsmtFinType2', 'Heating', 'Functional', 'GarageQual', 'GarageCond',\n                     'PavedDrive', 'MiscFeature']\n\n#ordinal features\n\nord_features = ['ExterQual', 'HeatingQC', 'ExterCond', 'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'KitchenQual', 'FireplaceQu', 'PoolQC']","2be9a573":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(ord_features):\n    sns.boxplot(data=train_df, x=column, y=\"SalePrice\")\n    plt.subplot(6, 4, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","ec076343":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(numerical):\n    sns.scatterplot(data=train_df, x=column, y=\"SalePrice\")\n    plt.subplot(7, 6, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","2158119c":"numerical = numerical.drop(['Id'], axis=1)","de122720":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(numerical):\n    train_df[column].hist(legend=True)\n    plt.subplot(7, 6, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","3e301e6b":"#features that in most samples  have only one value\n\nfeatures_one_value_num = ['BsmtFinSF2', 'LowQualFinSF', 'KitchenAbvGr',  'PoolArea', 'MiscVal']","9f795cca":"numerical = numerical[numerical.columns.difference(features_one_value_num)]\n","d22a7fa8":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(numerical):\n    plt.subplot(7, 5, index+1)\n    sns.boxplot(y=column, data=numerical.dropna())\n    \n    \nplt.tight_layout()    \nplt.show();  ","60a40dad":"numerical.corr()","55fd9be6":"plt.figure(figsize=(10, 10))\nsns.heatmap(numerical.corr());","3ce29c25":"highly_corr_features = ['1stFlrSF', 'GarageYrBlt', 'TotRmsAbvGrd', 'GarageCars']","d7f73e7c":"plt.figure(figsize=(10, 10))\nsns.heatmap(numerical.corr()[numerical.corr() > 0.8], annot=True, fmt='.1g');","6eeadd25":"missed_val_features = ['Alley', 'FireplaceQu', 'PoolQC', 'Fence']\nuseless_features = ['MoSold', 'YrSold']","41592efe":"features_for_removing = highly_corr_features + missed_val_features + useless_features + features_one_value_cat + features_one_value_num\nfeatures_for_removing","2b16e619":"for dataset in combine:\n    dataset.drop(columns=features_for_removing, inplace=True)","33f852ab":"train_df.head()","f70eda30":"outliars_features = ['BsmtFinSF1', 'LotArea', 'LotFrontage', 'TotalBsmtSF', 'GrLivArea', 'EnclosedPorch']","bb4002e8":"fig = plt.figure(figsize=(10, 5))\n\nfor index, column in enumerate(outliars_features):\n    plt.subplot(2, 3, index+1)\n    sns.boxplot(y=column, data=numerical.dropna())\n   \n    \nplt.tight_layout()    \nplt.show();","9817cbb1":"train_df = train_df.drop(train_df[train_df['BsmtFinSF1'] > 4000].index)\ntrain_df = train_df.drop(train_df[train_df['LotArea'] > 100000].index)\ntrain_df = train_df.drop(train_df[train_df['LotFrontage'] > 200].index)\ntrain_df = train_df.drop(train_df[train_df['TotalBsmtSF'] > 5000].index)\ntrain_df = train_df.drop(train_df[train_df['GrLivArea'] > 4000].index)\ntrain_df = train_df.drop(train_df[train_df['EnclosedPorch'] > 400].index)","7af649b9":"fig = plt.figure(figsize=(10, 5))\n\nfor index, column in enumerate(outliars_features):\n    plt.subplot(2, 3, index+1)\n    sns.boxplot(y=column, data=train_df)\n   \n    \nplt.tight_layout()    \nplt.show();","2f598dbb":"train_df.isnull().sum().sort_values(ascending=False).head(10)","eae12421":"test_df.isnull().sum().sort_values(ascending=False).head(20)","8ca69375":"\nfilling_NA = ['BsmtExposure', 'BsmtQual', 'BsmtFinType1', 'GarageFinish', 'GarageType', 'KitchenQual']\ntrain_df.loc[:, filling_NA] = train_df[filling_NA].fillna('NA')     \ntest_df.loc[:, filling_NA] = test_df[filling_NA].fillna('NA')  ","c94f2a22":"train_df['MasVnrType'].fillna('None', inplace=True)\ntest_df['MasVnrType'].fillna('None', inplace=True)","852da21e":"train_df['Electrical'] = train_df['Electrical'].fillna(train_df['Electrical'].mode()[0])\n\nfilling_mode = ['MSZoning', 'Exterior1st', 'Exterior2nd']\ntest_df.loc[:, filling_mode] = test_df[filling_mode].apply(lambda x: x.fillna(x.mode()[0]))\n","10c32286":"filling_zero = ['BsmtFullBath', 'GarageArea', 'BsmtFinSF1', 'BsmtUnfSF', 'TotalBsmtSF']\ntest_df.loc[:, filling_zero] = test_df[filling_zero].apply(lambda x: x.fillna(x.mode()[0]))","51a24e52":"test_df['SaleType'] = test_df['SaleType'].fillna('Oth')","45b3b1d6":"train_df['MasVnrArea'] = train_df.groupby('MasVnrType')['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))\ntest_df['MasVnrArea'] = test_df.groupby('MasVnrType')['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))\n\ntrain_df['LotFrontage'] = train_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\ntest_df['LotFrontage'] = test_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))","f705d4b6":"dict_1 = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0}\ndict_2 = {'Gd': 3, 'Av': 2, 'Mn': 1, 'No': 0, 'NA': 0}\ndict_3 = {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0}\ndict_4 = {'Reg': 3, 'IR1': 2, 'IR2': 1, 'IR3': 0}\ndict_5 = {'Fin': 3, 'RFn': 2, 'Unf': 1, 'NA': 0}\ndict_6 = {'Y': 1, 'N': 0}","910c4a41":"train_df['ExterQual'] = train_df['ExterQual'].map(dict_1)\ntrain_df['HeatingQC'] = train_df['HeatingQC'].map(dict_1)\ntrain_df['ExterCond'] = train_df['ExterCond'].map(dict_1)\ntrain_df['BsmtQual'] = train_df['BsmtQual'].map(dict_1)\ntrain_df['KitchenQual'] = train_df['KitchenQual'].map(dict_1)\ntrain_df['BsmtExposure'] = train_df['BsmtExposure'].map(dict_2)\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].map(dict_3)\ntrain_df['LotShape'] = train_df['LotShape'].map(dict_4)\ntrain_df['GarageFinish'] = train_df['GarageFinish'].map(dict_5)\ntrain_df['CentralAir'] = train_df['CentralAir'].map(dict_6)","df78c892":"test_df['ExterQual'] = test_df['ExterQual'].map(dict_1)\ntest_df['HeatingQC'] = test_df['HeatingQC'].map(dict_1)\ntest_df['ExterCond'] = test_df['ExterCond'].map(dict_1)\ntest_df['BsmtQual'] = test_df['BsmtQual'].map(dict_1)\ntest_df['KitchenQual'] = test_df['KitchenQual'].map(dict_1)\ntest_df['BsmtExposure'] = test_df['BsmtExposure'].map(dict_2)\ntest_df['BsmtFinType1'] = test_df['BsmtFinType1'].map(dict_3)\ntest_df['LotShape'] = test_df['LotShape'].map(dict_4)\ntest_df['GarageFinish'] = test_df['GarageFinish'].map(dict_5)\ntest_df['CentralAir'] = test_df['CentralAir'].map(dict_6)","c7133ced":"categorical_train = train_df.select_dtypes(include='object').columns\ncategorical_test = test_df.select_dtypes(include='object').columns","64e773d8":"def code_mean(dataset, cat_feature):\n    return (dataset[cat_feature].map(train_df.groupby(cat_feature)['SalePrice'].mean()))","96120c6d":"for col in  categorical_test:\n    test_df[col] = code_mean(test_df, col)","b2d9ff23":"for col in  categorical_train:\n    train_df[col] = code_mean(train_df, col)","4aa1f8fe":"print(train_df.columns)","a2f2f21e":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(train_df):\n    sns.scatterplot(data=train_df, x=column, y=\"SalePrice\")\n    plt.subplot(8, 7, index+1)\n    \nplt.tight_layout()    \nplt.show();  ","9de549c3":"fig = plt.figure(figsize=(20, 15))\n\nfor index, column in enumerate(train_df):\n    train_df[column].hist(legend=True)\n    plt.subplot(8, 7, index+1)\n    \nplt.tight_layout()    \nplt.show();   ","f9fb25cf":"train_df['PorchArea'] = train_df['OpenPorchSF'] + train_df['EnclosedPorch'] + train_df['3SsnPorch'] + train_df['ScreenPorch']","def3449a":"test_df['PorchArea'] = test_df['OpenPorchSF'] + test_df['EnclosedPorch'] + test_df['3SsnPorch'] + test_df['ScreenPorch']","866342bb":"train_df.drop(columns=['OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch'], inplace=True)\ntest_df.drop(columns=['OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch'], inplace=True)","cd1cc02c":"train_df['NumBath'] = train_df['BsmtFullBath'] + 0.5*train_df['BsmtHalfBath'] + train_df['FullBath'] + 0.5*train_df['HalfBath']\ntest_df['NumBath'] = test_df['BsmtFullBath'] + 0.5*test_df['BsmtHalfBath'] + test_df['FullBath'] + 0.5*test_df['HalfBath']","3d9a5447":"train_df['YearRemodAdd'].loc[train_df[train_df['YearRemodAdd'] != train_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 1\ntrain_df['YearRemodAdd'].loc[train_df[train_df['YearRemodAdd'] == train_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 0","4d650c92":"test_df['YearRemodAdd'].loc[test_df[test_df['YearRemodAdd'] != test_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 1\ntest_df['YearRemodAdd'].loc[test_df[test_df['YearRemodAdd'] == test_df['YearBuilt']]['YearRemodAdd'].index.values.tolist()] = 0","dbfff765":"train_df['2ndFlrSF'].hist();","53f0e4eb":"train_df['2ndFlrSF'].loc[train_df[train_df['2ndFlrSF'] != 0]['2ndFlrSF'].index.values.tolist()] = 1","e90e1dee":"train_df.rename(columns={'2ndFlrSF': 'Is2ndFlr'}, inplace=True)","266cc182":"test_df['2ndFlrSF'].loc[test_df[test_df['2ndFlrSF'] != 0]['2ndFlrSF'].index.values.tolist()] = 1\ntest_df.rename(columns={'2ndFlrSF': 'Is2ndFlr'}, inplace=True)","1e547dff":"train_df.columns","e79f8498":"sns.scatterplot(data=train_df, x='Fireplaces', y=\"SalePrice\");","59ea6f29":"train_df['Fireplaces'].loc[train_df[train_df['Fireplaces'] != 0]['Fireplaces'].index.values.tolist()] = 1\ntest_df['Fireplaces'].loc[test_df[test_df['Fireplaces'] != 0]['Fireplaces'].index.values.tolist()] = 1","42db164a":"test_df['NumBath'] = test_df['NumBath'].fillna(0)\ntest_df['BsmtHalfBath'] = test_df['BsmtHalfBath'].fillna(0)","540f1374":"test_df.info()","2d94ba19":"X = train_df.drop(columns=['Id', 'SalePrice'])\ny = train_df['SalePrice']\nX_test = test_df.drop(columns=['Id'])","fa0d57ff":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=42)","bfa24941":"lin_reg = LinearRegression(n_jobs=-1)\nlin_reg.fit(X_train, y_train)\ny_pred = lin_reg.predict(X_val)\n\nmean_squared_error(y_val, y_pred, squared=False)","74d5b1cd":"lin_reg.score(X_val, y_val)","13ef6454":"y.describe()","24de08a9":"pd.DataFrame(lin_reg.coef_, X.columns, columns=[ 'Coef']).sort_values(by=['Coef'])","20f4c413":"rf = RandomForestRegressor(max_depth=20, max_features=12, min_samples_leaf=2,\n                      n_estimators=644, n_jobs=-1, random_state=1)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_val)\n\nmean_squared_error(y_val, y_pred, squared=False)","b2be07ea":"model = RandomForestRegressor(max_depth=20, max_features=12, min_samples_leaf=2,\n                      n_estimators=644, n_jobs=-1, random_state=1)\nmodel.fit(X, y)\npredict = model.predict(X_test)","bf12f4db":"output = pd.DataFrame({'Id': test_df.Id, 'SalePrice': predict})\noutput.to_csv('house_price_baseline.csv', index=False)","03c9786c":"Also we change all values of '**Fireplaces**' that are more than 0 on 1","66c99b72":"# **Dealing with outliars**","5f0b45a2":"# **Removing of redundant features**","a8509c66":"# **Data visualization**","89b8b6ef":"Highly correlated features:\n\n* TotalBsmtSF, 1stFlrSF;\n* GarageYrBlt, YearBuilt;\n* GrLivArea, TotRmsAbvGrd;\n* GarageArea, GarageCars","e69fce3e":"Other categorical variables are replaced by the mean value of the SalePrice for a separate category.","d6fe1eda":"Random Forest.\n\nParameters for Random Forest Regressor were tuning by using GridSearchCV.","9d6abba1":"# **Categorical Features Encoding**","c46ab003":"Ordinal variables are replaced by numbers.","61ee87e8":"# **Model**","4bca2b1f":"Since most values of '**2ndFlrSF**' are 0, then we create new feature '**Is2ndFlr**'(it shows whether 2nd floor exists).","7d168bb0":"If '**YearRemodAdd**' equal '**YearBuilt**' remodeling or additions was not performed,in this case we assign 0 this column.\n\nIf If '**YearRemodAdd**' not equal '**YearBuilt**', we asign 1 for '**YearRemodAdd**'(emodeling or additions was performed)","af801673":"# **Filling missing values**","53a6475d":"# **Feature engineering**","402ebeb1":"I create new feature '**NumBath**' (number of bathrooms) based on all features describe bathrooms( '**BsmtFullBath**', '**BsmtHalfBath**', '**FullBath**', '**HalfBath**').\n\nAlso I multiply '**BsmtHalfBath**' and 'HalfBath' on 0.5 because they are not full bathrooms.","c23949a6":"Linear regression","d62af1f7":"Let combine all features with porch and creat new one 'PorchArea'."}}