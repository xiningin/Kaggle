{"cell_type":{"a02e7f86":"code","e776e0b9":"code","d88886cc":"code","10ddf022":"code","ec8ef15c":"code","108f0354":"code","98e29504":"code","3d38e051":"code","fd88ba99":"code","70776834":"code","e1cfdd0c":"code","20ddc078":"code","2fd4d270":"code","d7cefdf7":"code","689408ae":"code","b3431711":"code","1cb0e6ec":"code","51a4f220":"code","b009bd4c":"code","74a983f5":"code","f95fa97a":"code","aa8967ae":"code","2cb2f002":"code","f24c5b2f":"code","a4d708bc":"code","8213e47b":"code","81bdbe6a":"code","6ea23479":"code","66277de9":"code","dd5e9a44":"code","f1084649":"code","39d36255":"code","ca43f65b":"code","1aafc9b3":"code","8ce7cc68":"code","63a5e44c":"code","1ac4d254":"code","d9f55973":"code","38310324":"code","861c06e0":"code","e3398549":"markdown","22f9280f":"markdown","7a2a610c":"markdown","2acc139c":"markdown","18c113c5":"markdown","bd4b53c3":"markdown","1664a880":"markdown","69d2a52d":"markdown","9a9eaa15":"markdown"},"source":{"a02e7f86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e776e0b9":"data=pd.read_csv('\/kaggle\/input\/high-value-customers-identification\/Ecommerce.csv', encoding='ISO-8859-1')\ndata.head()","d88886cc":"data.shape","10ddf022":"data.describe()","ec8ef15c":"data.info()","108f0354":"\ndata.isnull().sum()","98e29504":"data.drop(['Unnamed: 8'], axis=1, inplace=True)","3d38e051":"data.CustomerID.nunique()","fd88ba99":"data.columns","70776834":"import matplotlib.pyplot as plt\nimport seaborn as sns","e1cfdd0c":"plt.figure(figsize=(15,12))\ndata.groupby('Country')['Quantity'].count().plot(kind='barh')\nplt.show()","20ddc078":"data['Total']=data.Quantity*data.UnitPrice","2fd4d270":"data['Invoice_Year']=pd.to_datetime(data.InvoiceDate).dt.year\ndata['Invoice_Month']=pd.to_datetime(data.InvoiceDate).dt.month\ndata['Invoice_Day']=pd.to_datetime(data.InvoiceDate).dt.day","d7cefdf7":"data","689408ae":"per_yr_total=data.groupby('Invoice_Year')['Total'].sum()\nper_yr_total.plot(kind='bar')\nplt.show()","b3431711":"per_yr_total","1cb0e6ec":"per_monyr_total=data.groupby(['Invoice_Year','Invoice_Month'])['Total'].sum()\nper_monyr_total.plot(kind='bar')\nplt.show()","51a4f220":"plt.figure(figsize=(15,12))\nmax_per_stk=data.groupby('StockCode')['Total'].sum().sort_values(ascending=False)[:20]\nmax_per_stk.plot(kind='bar')\nplt.show()","b009bd4c":"total_per_inv=data.groupby('InvoiceNo')['Total'].sum().sort_values(ascending=False)[:15]\ntotal_per_inv.plot(kind='bar')\nplt.show()","74a983f5":"plt.figure(figsize=(15,12))\nsns.barplot('Invoice_Month','Total', data=data,hue='Invoice_Year')\nplt.show()","f95fa97a":"plt.figure(figsize=(20,20))\nsns.barplot('Invoice_Day','Quantity', hue='Invoice_Year',data=data)\nplt.show()","aa8967ae":"df=data.groupby('CustomerID').agg({'Total':['mean','sum','max']})\ndf=pd.DataFrame(df)\ndf.columns=['TotalAmt','MeanAmt','MaxAmt']\ndf\n\n\n\n\n\n","2cb2f002":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\n","f24c5b2f":"sc=MinMaxScaler()\nx=df.values\nx=sc.fit_transform(x)\nx","a4d708bc":"\niner=[]\nfor i in range(1,11):\n    km=KMeans(n_clusters=i, init='k-means++',random_state=0)\n    km.fit(x)\n    iner.append(km.inertia_)\n    ","8213e47b":"plt.plot(range(1,11), iner)\nplt.xlabel('No. of clusters')\nplt.show()\n","81bdbe6a":"import mpl_toolkits.mplot3d.axes3d as p3","6ea23479":"def kmeans_cluster(n):\n    kmeans=KMeans(n_clusters=n, init='k-means++',random_state=0)\n    kmeans.fit_predict(x)\n    return kmeans","66277de9":"def plot_clusters_3d(cluster):\n    fig=plt.figure(figsize=(10,8))\n    ax=p3.Axes3D(fig)\n    label=cluster.labels_\n    ax.scatter(x[:, 0], x[:, 1], x[:,2], c=label,s=50,edgecolor='k', cmap='viridis')\n    ax.scatter(cluster.cluster_centers_[:, 0], cluster.cluster_centers_[:, 1],cluster.cluster_centers_[:, 2], s = 80, c = 'r',marker='*', label = 'Centroids')\n    ax.set_xlabel('TotalAmt')\n    ax.set_ylabel('MeanAmt')\n    ax.set_zlabel('MaxAmt')    \n    ax.set_title(str(np.unique(label).size)+' clusters')\n    plt.autoscale(enable=True, axis='x', tight=True)\n    plt.show()\n    ","dd5e9a44":"kmeans_2=kmeans_cluster(2)\nplot_clusters_3d(kmeans_2)","f1084649":"kmeans_3=kmeans_cluster(3)\nplot_clusters_3d(kmeans_3)","39d36255":"kmeans_4=kmeans_cluster(4)\nplot_clusters_3d(kmeans_4)","ca43f65b":"import scipy.cluster.hierarchy as hc","1aafc9b3":"plt.figure(figsize=(50,12))\nplt.title(\"Dendogram\")\nd=hc.dendrogram(hc.linkage(x, method='ward'))","8ce7cc68":"from sklearn.cluster import AgglomerativeClustering\n","63a5e44c":"def findClusters(n_cluster):\n    agg_clus=AgglomerativeClustering(n_clusters=n_cluster, affinity='euclidean', linkage='ward')\n    agg_clus.fit_predict(x)\n    return agg_clus","1ac4d254":"def plot_aggclusters_3d(cluster):\n    fig=plt.figure(figsize=(10,8))\n    ax=p3.Axes3D(fig)\n    label=cluster.labels_\n    ax.scatter(x[:, 0], x[:, 1], x[:,2], c=label,s=50,edgecolor='k', cmap='plasma')\n    ax.set_xlabel('TotalAmt')\n    ax.set_ylabel('MeanAmt')\n    ax.set_zlabel('MaxAmt')    \n    ax.set_title(str(np.unique(label).size)+' clusters')\n    plt.autoscale(enable=True, axis='x', tight=True)\n    plt.show()\n    ","d9f55973":"agg_2=findClusters(2)\nplot_aggclusters_3d(agg_2)","38310324":"agg_3=findClusters(3)\nplot_aggclusters_3d(agg_3)","861c06e0":"agg_4=findClusters(4)\nplot_aggclusters_3d(agg_4)","e3398549":"With 3 clusters","22f9280f":"For 2016, we have data for only two months, Nov and Dec and data for these two months are more than those of 2017.","7a2a610c":"For number of clusters 2","2acc139c":"The probabale clusters could be 2,3, or 4","18c113c5":"In 2017, the total sales were more than in 2016.","bd4b53c3":"With 4 clusters","1664a880":"If we plot a 2D graphs of the same","69d2a52d":"In november of 2017, the total was maximum","9a9eaa15":"The stock code DOT had the max value of transaction over the two years."}}