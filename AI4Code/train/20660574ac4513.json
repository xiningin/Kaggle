{"cell_type":{"bdb18277":"code","e47c4a1e":"code","a827242f":"code","3303ad03":"code","5f1869bb":"code","1dc2557e":"code","1ae9e190":"code","a66689ec":"code","79148426":"code","f06b1848":"code","35f9f8f2":"code","263f8606":"code","83a9bca4":"code","2732e9a2":"code","3fd9e5d3":"code","eaed2ff2":"code","368f686d":"code","56062669":"code","c81c4c8a":"code","999c81a3":"code","598e77bb":"code","6da4a447":"code","462d900c":"code","4e2e5a39":"code","97a03c3b":"code","98d59899":"code","fc1915ea":"code","b661a127":"code","a9689d15":"code","cccdaa7a":"code","5bfe5129":"code","813e9fe2":"code","0f686ee8":"code","8335e9ad":"code","482a5f73":"code","59c7a44d":"code","f37a6829":"code","08b7083e":"code","f0ea8ecd":"code","c201695f":"code","43782607":"code","5c57e52b":"code","4dc16815":"code","6ab66e1f":"code","40cb7ad0":"code","55535884":"code","b5a47b26":"code","5ed1fa68":"code","28364d99":"code","bae69db3":"code","a9ccb936":"code","eed922e8":"code","5a8ab6e7":"code","1c7143e8":"code","814f7d35":"code","7a338a6b":"code","5480a861":"code","7174d5c7":"code","83d4fcac":"code","f12ac178":"code","e48fe886":"code","d101ebe5":"code","e21b5538":"code","4d7f678c":"code","91fe802e":"code","9abe3b91":"code","b8917673":"code","82f7247c":"code","18326f45":"code","cc859a07":"code","aa2846a9":"code","40961761":"code","49ee9f14":"code","a24787fb":"code","c532bedc":"code","3512dfd4":"code","abd2a831":"code","f692ca67":"markdown","b01e868e":"markdown","ba9699a7":"markdown","e06ae0b5":"markdown","e6cf3bbf":"markdown","079680e2":"markdown","c90212eb":"markdown","1e3c9a54":"markdown","ee5bd557":"markdown"},"source":{"bdb18277":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e47c4a1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a827242f":"file_covid_19 = '\/kaggle\/input\/novel-covid19-dataset\/time_series_covid19_deaths_global.csv'\ndf_data_covid_19 = pd.read_csv(file_covid_19)\ndf_data_covid_19.head(2)","3303ad03":"# sum up all provinces in one country and only the last date in a column\n\ntest = df_data_covid_19.copy()\ndf_data_covid_19 = test.groupby('Country\/Region', as_index=False).sum()\ndf_data_covid_19 = df_data_covid_19.iloc[:,[0,1,2,-1]].copy()\nprint(df_data_covid_19.iloc[0,[-1]])\ndf_data_covid_19 = df_data_covid_19.rename(columns={'Country\/Region':'Country', '10\/30\/20':'deaths'})\ndf_data_covid_19","5f1869bb":"# health data\n# \/kaggle\/input\/covid19correlationswithdatafromworldbank\/World_Bank_Data_all_health.csv\npath = '\/kaggle\/input\/covid19correlationswithdatafromworldbank'\nfile = 'World_Bank_Data_all_health.csv'\nhealthFile = path + '\/' + file\ndf_health = pd.read_csv(healthFile)","1dc2557e":"df_health.head(3)","1ae9e190":"# the total number of different data are:\n\nlen(df_health['Series Code'].unique())","a66689ec":"# dict with key = country name in World Bank total and value = country name in df_data_covid_19\n\ndict_country_names_data_corona = {\n    'Bahamas, The' : 'Bahamas',\n    'Brunei Darussalam' : 'Brunei',\n    'Congo, Rep.' : 'Congo (Brazzaville)',\n    'Congo, Dem. Rep.'   : 'Congo (Kinshasa)',\n    'Czech Republic' : 'Czechia',\n    'Egypt, Arab Rep.' : 'Egypt',\n    'Gambia, The' : 'Gambia',\n    'Iran, Islamic Rep.' : 'Iran',\n    'Korea, Rep.' : 'Korea, South',\n    'Kyrgyz Republic' : 'Kyrgyzstan',\n    'Lao PDR' : 'Laos',\n    'Russian Federation' : 'Russia',\n    'Slovak Republic' : 'Slovakia',\n    'Syrian Arab Republic' : 'Syria',    \n    'United States' : 'US',\n    'Venezuela, RB' : 'Venezuela',\n    'Yemen, Rep.' : 'Yemen'\n        }","79148426":"def change_name(df, country, dictionary):\n    '''\n    Canges the name from country column in df following the dict\n    input:\n    df:  DataFrame where country names have to be changed\n    country: the column with the country names to be changed\n    dictionary: the dic with old and nuw names\n    \n    output:\n    returns the changed dict with the column 'Country' holding the correct names\n    returns a list with the changed names\n    \n    '''\n\n    list_of_changed_countries = []\n    df['Country'] = df[country]\n    for index in range(df.shape[0]):\n        country_old = df.Country.iloc[index]\n        if country_old in dictionary.keys():\n            new_country = dictionary[country_old]\n            df.Country.iat[index] = new_country\n            list_of_changed_countries.append(country_old)\n            \n    return df, list_of_changed_countries","f06b1848":"# changing the country names\ndf_health , the_old_names = change_name(df_health, 'Country', dict_country_names_data_corona)\n#print(the_old_names)\nprint(len(dict_country_names_data_corona), len(the_old_names))","35f9f8f2":"print(df_health['Series Code'].unique())","263f8606":"print(df_health['Series Code'].isna().sum())","83a9bca4":"df_health.shape","2732e9a2":"df_health = df_health.sort_values('Series Code')","3fd9e5d3":"df_health.tail()","eaed2ff2":"df_health = df_health.reset_index()\ndel df_health['index']\ndf_health.tail()","368f686d":"df_health = df_health[:6011].copy()\ndf_health","56062669":"# test country US\n\ndf_health[df_health.Country == 'US']","c81c4c8a":"# make a dict with Series Codes as key and Series Name as value\ndict_healt_codes = {}\ncodes = df_health['Series Code'].unique()\nnames = df_health['Series Name'].unique()\nfor i in range(len(codes)):\n    dict_healt_codes[codes[i]] = names[i]\n    ","999c81a3":"# example:\ndict_healt_codes['SH.IMM.HEPB']","598e77bb":"def concat_df(df1, df2, df2_column):\n    '''\n    adds the df2_column from df2 to df1 based on 'Country'\n    input: df1: base df\n        df2 : df to take column to add to df1\n    output df = df1 + df2_column\n    '''\n    df = df1.copy()\n    df[df2_column] = 0.\n    index1 = 0\n    index2 = 0\n    while index1 < df.shape[0]:\n        country = df['Country'].iloc[index1]\n        #print(country)\n        index2 = 0\n        while index2 < df2.shape[0]:\n            country2 = df2['Country'].iloc[index2]\n            #print(country2)\n            if country == df2['Country'].iloc[index2]:\n                if df2[df2_column].iloc[index2] != np.nan:\n                    df[df2_column].iat[index1] = df2[df2_column].iloc[index2]\n                    #print( df2.Country.iloc[index2] , df2[df2_column].iloc[index2])\n            index2 += 1\n        #print(index1)    \n        index1 += 1\n    \n    return df.copy()","6da4a447":"codes","462d900c":"\ndf_temp = df_data_covid_19.copy()\ndf_temp.shape","4e2e5a39":"\ndf_temp = df_health[df_health['Series Code']== codes[6]]\ndf_temp.shape","97a03c3b":"len(df_health.Country.unique()), len(df_health['Country Code'].unique())","98d59899":"# make columns in df from codes in df_health\n\n\nfor code in codes[:]:\n    print(code)\n    df_temp = df_health[df_health['Series Code']== code]\n    df_data_covid_19 = concat_df(df_data_covid_19, df_temp , 'Value')\n    print('df_data_covid_19.shape', df_data_covid_19.shape)\n    df_data_covid_19[code] = df_data_covid_19['Value']\n    #print('df_data_covid_19.columns', df_data_covid_19.columns)\ndel df_data_covid_19['Value'] # is a temporary column","fc1915ea":"df_data_covid_19.head()","b661a127":"# SP.POP.TOTL is the country population total\ndf_data_covid_19  = df_data_covid_19.rename(columns={'SP.POP.TOTL':'Population'})\n","a9689d15":"df_data_covid_19.shape","cccdaa7a":"df_data_covid_19","5bfe5129":"df_data_covid_19[df_data_covid_19['SURF.AREA'].isna()]\n","813e9fe2":"df_data_covid_19_Backup = df_data_covid_19.copy()","0f686ee8":"print(df_data_covid_19.shape)\n# drop the rows where Surface is NaN\ndf_data_drop = df_data_covid_19[df_data_covid_19['SURF.AREA'].isna()]\n#df_World_data_rows_to_drop\n#df_World_data_rows_to_drop.index\n\ndf_data_covid_19 = df_data_covid_19.drop(df_data_drop.index, axis='index')\ndf_data_covid_19.shape","8335e9ad":"# where is population == 0 ?\nzero_population = df_data_covid_19[df_data_covid_19.Population == 0]\n\ndf_data_covid_19 = df_data_covid_19.drop(zero_population.index, axis='index')\ndf_data_covid_19.shape","482a5f73":"# save this df\ndf_data_covid_19.to_csv('World_data_health_GDP_surface_urban_population.csv', index=False)","59c7a44d":"# calculate the relative deaths per 100000 inhabitants\ndf_data_covid_19['covid_19_deaths_per_e5_capita'] = 100000 * df_data_covid_19['deaths'] \/ (df_data_covid_19.Population)\n","f37a6829":"print('MAX covid_19_deaths_per_e5_capita', df_data_covid_19['covid_19_deaths_per_e5_capita'].max() )\nprint('MIN covid_19_deaths_per_e5_capita' , df_data_covid_19['covid_19_deaths_per_e5_capita'].min()  )\nprint('Mean covid_19_deaths_per_e5_capita' , df_data_covid_19['covid_19_deaths_per_e5_capita'].mean()  )","08b7083e":"# sort Corona_deaths_per_capita*100000 ascending order\ndf_data_covid_19 = df_data_covid_19.sort_values(['covid_19_deaths_per_e5_capita'], axis=0)\ndf_data_covid_19.reset_index(inplace=True)\ndel df_data_covid_19['index']","f0ea8ecd":"# make a bar chart\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ny = df_data_covid_19['covid_19_deaths_per_e5_capita'].values\nx = df_data_covid_19['Country'].values\ny = y[:]\nx = x[:]\n\nplt.rc('xtick', labelsize=10) \nplt.rc('ytick', labelsize=10) \nwidth = 0.8  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(20,40))\nrects1 = ax.barh(x, y, width)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\n#ax.set_ylabel('')\nax.set_title('Covid-19 deaths per 100000 inhabitants')\n\ndef autolabel(rects, y):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    label_nr = 0\n    for rect in rects:\n        #print(rect, rect.get_y())\n        height = rect.get_height()\n        ax.annotate('{:0.1f}'.format(y[label_nr]),\n                    xy = ( rect.get_width() , rect.get_y() + height\/2 ),\n                    xytext=(20, -5),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n        label_nr += 1\n\n\nautolabel(rects1, y)\n\nplt.savefig('Covid-19 deaths per 100000 inhabitants_3.png')\nplt.show()","c201695f":"more_than_70_deaths_prt = df_data_covid_19[df_data_covid_19.covid_19_deaths_per_e5_capita > 70.]\nmore_than_70_deaths_prt","43782607":"less_than_20_deaths_prt = df_data_covid_19[df_data_covid_19.covid_19_deaths_per_e5_capita < 20.]\nless_than_20_deaths_prt","5c57e52b":"# correltions with deaths\nimport seaborn as sns # sns.set_theme()\ndata = df_data_covid_19.copy()\ndel data['Country']\n\nuniform_data = data.iloc[:,1:].astype('float')\n#uniform_data.info()","4dc16815":"# display a heatmap of the correlations with covid_19_deaths_per_e5_capita\ncorr = uniform_data.corrwith(df_data_covid_19.covid_19_deaths_per_e5_capita)\ndata_corr = pd.DataFrame(corr)\ndata_corr.sort_values([0],ascending=False ,inplace=True)\n\nf, ax = plt.subplots(figsize=(20, 20))\nax = sns.heatmap(data_corr, square=True, annot=True)\nplt.title('Correlations with covid-19 deaths per 100,000')\nplt.show()\n","6ab66e1f":"# have a increasing impact on deaths:\ndata_increase = data_corr[data_corr[0] > .1]\nprint('Data that increase the death cases')\nprint()\n\nfor index in data_increase.index:\n    if index[0:2] == 'SH':\n        print(dict_healt_codes[index])\n    elif index[0:2] != 'co':\n        print(index)","40cb7ad0":"# data that decrease the deaths\n# have a increasing impact on deaths:\ndata_decrease = data_corr[data_corr[0] < -.1]\nprint('Data that decrease the death cases')\nprint()\n\nfor index in data_decrease.index:\n    if index[0:2] == 'SH':\n        print(dict_healt_codes[index])\n    elif index[0:2] != 'co':\n        print(index)\n","55535884":"# first make features normalizes (per capita for GDP and per square km for surface)\n# GDP_per_capita\ndf_data_covid_19['GDP_per_capita'] = df_data_covid_19['GDP_USdollars'] \/ df_data_covid_19.Population\n\n# Population per square km\ndf_data_covid_19['Pop_pskm'] = df_data_covid_19.Population \/ df_data_covid_19['SURF.AREA']\ndf_data_covid_19.columns\n\n","b5a47b26":"dict_healt_codes['URBAN_POP']","5ed1fa68":"# make index = Country for easy reference\ndf_data_covid_19\ndf_data_covid_19.index = df_data_covid_19.Country","28364d99":"df_data_covid_19.columns","bae69db3":"# make a df with na absolute values : Population, GDP_USdollars, SURF.AREA, deaths\ndf_World_covid_19_data = df_data_covid_19.drop(columns=['Population', 'GDP_USdollars', 'SURF.AREA', 'deaths'])\ny = df_World_covid_19_data.covid_19_deaths_per_e5_capita.values\ny_backup = y\ndel df_World_covid_19_data['covid_19_deaths_per_e5_capita']\n# make list of indexes of the columns except Country and covid-19-deaths covid_19_deaths_per_e5_capita\ncat_features = [] \nlist_of_all_columns = list(df_World_covid_19_data.columns)\nlist_of_columns = list(set(list_of_all_columns[1:29]) | set(list_of_all_columns[31:]) )\nfor col in list_of_columns:\n    cat_features.append(list_of_all_columns.index(col))\ncat_features.sort()\nprint(cat_features)\nprint(list_of_columns)","a9ccb936":"X = df_World_covid_19_data.iloc[:,cat_features]\n","eed922e8":"# using random train and validation set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X , y , test_size=0.33, random_state=10)\n","5a8ab6e7":"# using CatBoost as model\nfrom catboost import CatBoostRegressor, Pool\neval_dataset = Pool(X_valid, y_valid)\nmodel1 = CatBoostRegressor(iterations=1000)\n                           \nhistory = model1.fit(X_train, y_train, eval_set=eval_dataset,\n                     use_best_model=True, verbose=False, plot=False)","1c7143e8":"f_importance = model1.feature_importances_.ravel()\n\ny = X_train.columns.values\nplt.figure(figsize=(5,7))\nbarh = plt.barh(y,f_importance)\nplt.show()","814f7d35":"import shap\nshap.initjs()","7a338a6b":"explainer = shap.TreeExplainer(model1)\nshap_values_train = explainer.shap_values(Pool(X_train, y_train))\nprint(shap_values_train.shape , X_train.shape)\nshap.force_plot(explainer.expected_value, shap_values_train, X_train)\n\n","5480a861":"# create a SHAP dependence plot to show the effect of a single feature across the whole dataset\nshap.dependence_plot(\"URBAN_POP\", shap_values_train, X_train)\n\n    ","7174d5c7":"dict_healt_codes['SH.MED.NUMW.P3']","83d4fcac":"\n\n# looking at The countries with the highest deaths per capita","f12ac178":"df_World_covid_19_data.loc[['Belgium','France','Netherlands','Germany', 'San Marino', 'Peru']].T","e48fe886":"urban_pop_pct = 'URBAN_POP'\ndf_World_covid_19_data['covid_19_deaths_per_e5_capita'] = y_backup\ncolmumns_urban = ['Country', 'Pop_pskm', 'covid_19_deaths_per_e5_capita', urban_pop_pct]\ndf_urban = df_World_covid_19_data[colmumns_urban].copy()\ndf_urban[urban_pop_pct].plot(kind = 'hist', title='histogram of percentage of people living in urban areas')\nplt.show()","d101ebe5":"x = df_urban.URBAN_POP.values\ny = df_urban.covid_19_deaths_per_e5_capita.values\nplt.scatter(x,y)\nplt.xlabel('Percentage of people living in urban areas')\nplt.ylabel('Covid-19 deaths per 100.000 inhabitants')\nplt.title('Percentage of people living in urban areas vs. percentage of covid-19 deaths')\nplt.show()","e21b5538":"# probability that Belgium has high deaths\ndf_World_covid_19_data\n\n","4d7f678c":"X_test = df_World_covid_19_data.loc['US'][cat_features].values\n\npredict = model1.predict(X_test)\n\npredict","91fe802e":"predict.min()","9abe3b91":"# fit a model on all data\nmodel2 = CatBoostRegressor(iterations=1000)\nhistory2 = model2.fit(X, y, verbose=False, plot=False)","b8917673":"predict = model2.predict(X)\npredict.max()","82f7247c":"X_test = df_World_covid_19_data.loc['US'][cat_features].values\n\npredict = model2.predict(X_test)\n\nprint('prediction',  predict)\nprint('actual:', df_World_covid_19_data.loc['US']['covid_19_deaths_per_e5_capita'])","18326f45":"X_test = df_World_covid_19_data.loc['Peru'][cat_features].values\n\npredict = model2.predict(X_test)\n\nprint('prediction',  predict)\nprint('actual:', df_World_covid_19_data.loc['Peru']['covid_19_deaths_per_e5_capita'])","cc859a07":"X_test = df_World_covid_19_data.loc['Belgium'][cat_features].values\n\npredict = model2.predict(X_test)\n\nprint('prediction',  predict)\nprint('actual:', df_World_covid_19_data.loc['Belgium']['covid_19_deaths_per_e5_capita'])","aa2846a9":"# make a backup copy\ndf_World_covid_19_data_backup = df_World_covid_19_data.copy()","40961761":"\ndf_result = pd.DataFrame(df_World_covid_19_data.covid_19_deaths_per_e5_capita)","49ee9f14":"df_result.index","a24787fb":"# run Catboost model \ndf_result = pd.DataFrame(df_World_covid_19_data.covid_19_deaths_per_e5_capita)\n#df_result = df_result.drop(index='covid_19_deaths_per_e5_capita')\n\ndf_result['prediction'] = 0.0\ncounter = 0\nfor country in df_World_covid_19_data.index[:]  :\n    dummy = df_World_covid_19_data.copy()\n    #print('dummy.shape', dummy.shape)\n    dummy = dummy.drop(index=country)\n    #print('dummy.shape', dummy.shape)\n    X = dummy.iloc[:,cat_features]\n    #print('X.shape', X.shape)\n    y = dummy.covid_19_deaths_per_e5_capita.values\n    #print('len(y)',len(y))\n    model = CatBoostRegressor(random_seed=20)\n    model.fit(X,y, verbose=False, plot=False, )\n    X_test = df_World_covid_19_data.loc[country][cat_features].values\n    #print('X_test.shape', X_test.shape)\n    predict = model.predict(X_test)\n    df_result.prediction.at[country] = predict\n    if counter %10 == 0:\n        print(counter, ': ',df_result.loc[country])\n    counter +=1","c532bedc":"plt.figure(figsize=(20,10))\nX = df_result.index.values\ny1 = df_result.covid_19_deaths_per_e5_capita.values\ny2 = df_result.prediction.values\nplt.scatter(X,y1, label='covid_19_deaths_per_e5_capita')\nplt.scatter(X,y2, label='prediction')\nplt.xticks(rotation=90)\nplt.legend()\nplt.show()","3512dfd4":"df_result['pct_error'] = 100*(df_result.prediction \\\n                              - df_result.covid_19_deaths_per_e5_capita) \\\n                            \/(df_result.covid_19_deaths_per_e5_capita + 1.)\n                                                                                               \n                                                                                                                                                                      \ndf_result = df_result.astype('float')                                                                                               \n                                                                                               ","abd2a831":"df_result[abs(df_result.pct_error) < 5.]","f692ca67":"Data from World Bank is CC ","b01e868e":"# training model on all data exept one country, then predicting that country and save the result in a df","ba9699a7":"# If some of you can help me with some advice, it would be much appreciated. I am not an expert and I know a lot of you are.","e06ae0b5":"# what features are important\n","e6cf3bbf":"# 1. load Covid-19 data from  \nhttps:\/\/www.kaggle.com\/themlphdstudent\/novel-covid19-dataset\n\n","079680e2":"# 2. Load the data from Wold Bank","c90212eb":"This notebook wants to see if it can find relations between the covid-19 deaths in a country and features \nthat reflect the countries public-health policies like immunization, health expenditures (both government and private) , malaria, tuberculosis, smoking, poverty, number of undernourished, GDP.\nAlso population density and % of people living in urban areas.  \n  \nAccording to Our World in Data:\nhttps:\/\/ourworldindata.org\/coronavirus#deaths-due-to-covid-19\nQuote: \n    1. the actual total death toll from COVID-19 is likely to be higher than the number of confirmed deaths \u2013 this is due to limited testing and problems in the attribution of the cause of death; the difference between reported confirmed deaths and total deaths varies by country  \n    2. how COVID-19 deaths are recorded may differ between countries (e.g. some countries may only count hospital deaths, whilst others have started to include deaths in homes)  \n    3. the reported death figures on a given date does not necessarily show the number of new deaths on that day: this is due to delays in reporting.","1e3c9a54":"# Collect all data into one df","ee5bd557":"# 3. the country names in World Data and Covid-19 data are not the same\nMake a dict with names to be changed as keys "}}