{"cell_type":{"d1318129":"code","24d14f92":"code","a35af69f":"code","66fa056f":"code","8c6d7d3f":"code","ba041a3e":"code","8e8e2342":"code","d489e97a":"code","79b853d6":"code","ed00626e":"code","d6cf7771":"code","63f5ae2a":"code","34f92921":"code","0a907080":"code","690bab91":"code","d964a483":"code","6b5c6721":"code","a85003b9":"code","695c8dba":"code","923079c2":"code","f844d001":"code","c0aa5838":"code","90604ba5":"code","042f43eb":"code","459d4398":"code","055b4a97":"code","49559250":"code","608a9fb1":"code","99f9a190":"code","80167a77":"code","25b91b3b":"code","0f2f1f63":"code","38016447":"code","e663c5fd":"code","7f82bb2d":"code","811d1e17":"code","f4db770e":"code","0f46d8d9":"code","721b2e48":"code","3a2024c8":"code","be7a17dc":"code","47724927":"code","cd09fbbd":"markdown","188d3e6a":"markdown","f3aae58c":"markdown","5f7c7861":"markdown","1e33c3b5":"markdown","15a529d4":"markdown","d8b252a6":"markdown","65d2e5e5":"markdown","4b32685f":"markdown","1fd595b8":"markdown","37386ddf":"markdown","942befbc":"markdown","091a42b2":"markdown"},"source":{"d1318129":"# Importing essential libraries\nimport numpy as np\nimport pandas as pd","24d14f92":"# Loading the dataset\ndf = pd.read_csv(\"..\/input\/movie-genre-data\/kaggle_movie_train.csv\")","a35af69f":"df.columns","66fa056f":"df.shape","8c6d7d3f":"df.head(10)","ba041a3e":"# Importing essential libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8e8e2342":"# Visualizing the count of 'genre' column from the dataset\nplt.figure(figsize=(12,12))\nsns.countplot(x='genre', data=df)\nplt.xlabel('Movie Genres')\nplt.ylabel('Count')\nplt.title('Genre Plot')\nplt.show()","d489e97a":"# Finding unique genres\nmovie_genre = list(df['genre'].unique())\nmovie_genre.sort()\nmovie_genre","79b853d6":"# Mapping the genres to values\ngenre_mapper = {'other': 0, 'action': 1, 'adventure': 2, 'comedy':3, 'drama':4, 'horror':5, 'romance':6, 'sci-fi':7, 'thriller': 8}\ndf['genre'] = df['genre'].map(genre_mapper)\ndf.head(10)","ed00626e":"# Finding any NaN values\ndf.isna().any()","d6cf7771":"# Removing the 'id' column\ndf.drop('id', axis=1, inplace=True)\ndf.columns","63f5ae2a":"# Importing essential libraries for performing Natural Language Processing on given dataset\nimport nltk\nimport re\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","34f92921":"df.shape","0a907080":"# Cleaning the text\ncorpus = []\nps = PorterStemmer()\n\nfor i in range(0, df.shape[0]):\n\n  # Cleaning special character from the dialog\/script\n  dialog = re.sub(pattern='[^a-zA-Z]', repl=' ', string=df['text'][i])\n\n  # Converting the entire dialog\/script into lower case\n  dialog = dialog.lower()\n\n  # Tokenizing the dialog\/script by words\n  words = dialog.split()\n\n  # Removing the stop words\n  dialog_words = [word for word in words if word not in set(stopwords.words('english'))]\n\n  # Stemming the words\n  words = [ps.stem(word) for word in dialog_words]\n\n  # Joining the stemmed words\n  dialog = ' '.join(words)\n\n  # Creating a corpus\n  corpus.append(dialog)","690bab91":"corpus[0:10]","d964a483":"df[df['genre']==4].index","6b5c6721":"len(corpus)","a85003b9":"drama_words = []\nfor i in list(df[df['genre']==4].index):\n  drama_words.append(corpus[i])\n\naction_words = []\nfor i in list(df[df['genre']==1].index):\n  action_words.append(corpus[i])\n\ncomedy_words = []\nfor i in list(df[df['genre']==3].index):\n  comedy_words.append(corpus[i])\n\ndrama = ''\naction = ''\ncomedy = ''\nfor i in range(0, 3):\n  drama += drama_words[i]\n  action += action_words[i]\n  comedy += comedy_words[i]","695c8dba":"# Creating wordcloud for drama genre\nfrom wordcloud import WordCloud\nwordcloud1 = WordCloud(background_color='white', width=3000, height=2500).generate(drama)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud1)\nplt.axis('off')\nplt.title(\"Words which indicate 'DRAMA' genre \")\nplt.show()","923079c2":"# Creating wordcloud for action genre\nwordcloud2 = WordCloud(background_color='white', width=3000, height=2500).generate(action)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud2)\nplt.axis('off')\nplt.title(\"Words which indicate 'ACTION' genre \")\nplt.show()","f844d001":"# Creating wordcloud for comedy genre\nwordcloud3 = WordCloud(background_color='white', width=3000, height=2500).generate(comedy)\nplt.figure(figsize=(8,8))\nplt.imshow(wordcloud3)\nplt.axis('off')\nplt.title(\"Words which indicate 'COMEDY' genre \")\nplt.show()","c0aa5838":"# Creating the Bag of Words model\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=10000, ngram_range=(1,2))\nX = cv.fit_transform(corpus).toarray()","90604ba5":"y = df['genre'].values","042f43eb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)\nprint('X_train size: {}, X_test size: {}'.format(X_train.shape, X_test.shape))","459d4398":"# Fitting Naive Bayes to the Training set\nfrom sklearn.naive_bayes import MultinomialNB\nnb_classifier = MultinomialNB()\nnb_classifier.fit(X_train, y_train)","055b4a97":"# Predicting the Test set results\nnb_y_pred = nb_classifier.predict(X_test)","49559250":"# Calculating Accuracy\nfrom sklearn.metrics import accuracy_score\nscore1 = accuracy_score(y_test, nb_y_pred)\nprint(\"---- Score ----\")\nprint(\"Accuracy score is: {}%\".format(round(score1*100,2)))","608a9fb1":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nnb_cm = confusion_matrix(y_test, nb_y_pred)","99f9a190":"nb_cm","80167a77":"# Plotting the confusion matrix\nplt.figure(figsize=(15,12))\naxis_labels = ['other', 'action', 'adventure', 'comedy', 'drama', 'horror', 'romance', 'sci-fi', 'thriller']\nsns.heatmap(data=nb_cm, annot=True, cmap=\"Blues\", xticklabels=axis_labels, yticklabels=axis_labels)\nplt.xlabel('Predicted values')\nplt.ylabel('Actual values')\nplt.title('Confusion Matrix for Multinomial Naive Bayes Algorithm')\nplt.show()","25b91b3b":"# Hyperparameter tuning the Naive Bayes Classifier\nbest_accuracy = 0.0\nalpha_val = 0.0\nfor i in np.arange(0.1,1.1,0.1):\n  temp_classifier = MultinomialNB(alpha=i)\n  temp_classifier.fit(X_train, y_train)\n  temp_y_pred = temp_classifier.predict(X_test)\n  score = accuracy_score(y_test, temp_y_pred)\n  print(\"Accuracy score for alpha={} is: {}%\".format(round(i,1), round(score*100,2)))\n  if score>best_accuracy:\n    best_accuracy = score\n    alpha_val = i\nprint('--------------------------------------------')\nprint('The best accuracy is {}% with alpha value as {}'.format(round(best_accuracy*100, 2), round(alpha_val,1)))","0f2f1f63":"classifier = MultinomialNB(alpha=0.1)\nclassifier.fit(X_train, y_train)","38016447":"def genre_prediction(sample_script):\n  sample_script = re.sub(pattern='[^a-zA-Z]',repl=' ', string=sample_script)\n  sample_script = sample_script.lower()\n  sample_script_words = sample_script.split()\n  sample_script_words = [word for word in sample_script_words if not word in set(stopwords.words('english'))]\n  ps = PorterStemmer()\n  final_script = [ps.stem(word) for word in sample_script_words]\n  final_script = ' '.join(final_script)\n\n  temp = cv.transform([final_script]).toarray()\n  return classifier.predict(temp)[0]","e663c5fd":"# For generating random integer\nfrom random import randint","7f82bb2d":"# Loading test dataset\ntest = pd.read_csv(\"..\/input\/movie-genre-data\/kaggle_movie_test.csv\")\ntest.columns","811d1e17":"test.shape","f4db770e":"test.drop('id', axis=1, inplace=True)\ntest.head(10)","0f46d8d9":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","721b2e48":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","3a2024c8":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","be7a17dc":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","47724927":"# Predicting values\nrow = randint(0,test.shape[0]-1)\nsample_script = test.text[row]\n\nprint('Script: {}'.format(sample_script))\nvalue = genre_prediction(sample_script)\nprint('Prediction: {}'.format(list(genre_mapper.keys())[value]))","cd09fbbd":"\n<p style = \"font-size : 30px; color : #4e8d7c ; font-family : 'Comic Sans MS';  \"><strong> Multinomial Naive Bayes <\/strong><\/p> \n","188d3e6a":"![giphy.gif](https:\/\/media.giphy.com\/media\/hkUs4wIEozErFhDTiN\/giphy.gif)","f3aae58c":"![giphy.gif](https:\/\/media.giphy.com\/media\/eRRPUbWZch3i\/giphy.gif)","5f7c7861":"![giphy.gif](https:\/\/media.giphy.com\/media\/hkUs4wIEozErFhDTiN\/giphy.gif)","1e33c3b5":"\n<p style = \"font-size : 35px; color :#000080 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong> Data Cleaning and Preprocessing<\/strong><\/p>","15a529d4":"\n<p style = \"font-size : 35px; color :#000080 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong> Predictions<\/strong><\/p>","d8b252a6":"\n<p style = \"font-size : 35px; color :#000080 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong> Model Building<\/strong><\/p>","65d2e5e5":"![giphy.gif](https:\/\/media.giphy.com\/media\/MCLLxWrS8Iplrovb6u\/giphy.gif)","4b32685f":"\n<p style = \"font-size : 35px; color :#000080 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong> EDA<\/strong><\/p>","1fd595b8":"<p style = \"font-size : 35px; color :#000080 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #fbc6a4; border-radius: 5px 5px;\"><strong>Loading Data<\/strong><\/p>\n","37386ddf":"\n<p style = \"font-size : 50px; color : #ff0000 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #696969; border-radius: 5px 5px;\"><strong>\ud83c\udfa5 Movie Genres Classification<\/strong><\/p> \n\n\n\n<img style=\"float: center;  border:5px solid #DC143C; width:75%\" src = https:\/\/365psd.com\/images\/previews\/60f\/movie-genres-vector-icons-free-33970.jpg>","942befbc":"![giphy.gif](https:\/\/media.giphy.com\/media\/hkUs4wIEozErFhDTiN\/giphy.gif)","091a42b2":"![giphy.gif](https:\/\/media.giphy.com\/media\/DJqg6JzjuyziX948AC\/giphy.gif)"}}