{"cell_type":{"1b0a74bf":"code","6b0cd1c9":"code","5903ee28":"code","639baf73":"code","0e43e89f":"code","e148f3d8":"code","38a247ba":"code","33b296d8":"code","c6810219":"code","1969bbf8":"code","e0163e75":"code","6e1c4dbf":"code","0fbaea5d":"code","a4bcab56":"code","82dbaf2b":"code","9b9d57ee":"code","100f3392":"code","40215cbb":"code","b1448316":"code","8bec20ce":"code","5df713a7":"code","ce48636f":"code","b9cf6524":"code","65fcb629":"code","d1b1c3c8":"code","3a4cc9d6":"code","05f03e95":"code","ca89a17f":"code","221f1a21":"code","8fac57ad":"code","8d142703":"code","11a8dcee":"code","6bbea7f7":"code","5564002f":"code","326f5313":"code","deb09fb2":"code","cd169f70":"code","25ca824c":"code","276bb3bf":"code","c40a10e2":"markdown","26777148":"markdown","85912cb4":"markdown","744049e1":"markdown"},"source":{"1b0a74bf":"# import libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import KNNImputer\nfrom pandas_profiling import ProfileReport \nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif # use this for classification tasks\nfrom sklearn.ensemble import RandomForestClassifier\n\n%matplotlib inline\n","6b0cd1c9":"# load the data\ndf = pd.read_csv('..\/input\/ckdisease\/kidney_disease.csv')\ndf.head(10)","5903ee28":"#exploration data shape \ndf.shape","639baf73":"df.columns.values","0e43e89f":"df.drop('id', axis=1, inplace=True)","e148f3d8":"df.info()","38a247ba":"df.head().T\n","33b296d8":"df[['htn','dm','cad','pe','ane']] = df[['htn','dm','cad','pe','ane']].replace(to_replace={'yes':1,'no':0})","c6810219":"df[['rbc','pc']] = df[['rbc','pc']].replace(to_replace={'normal':0,'abnormal':1})","1969bbf8":"df[['ba','pcc']] = df[['ba','pcc']].replace(to_replace={'notpresent':0,'present':1})","e0163e75":"df[['appet']] = df[['appet']].replace(to_replace={'good':1,'poor':0,'no':np.nan})","6e1c4dbf":"df[\"classification\"] = [1 if i == \"ckd\" else 0 for i in df[\"classification\"]]","0fbaea5d":"df.head().T\n","a4bcab56":"df.dtypes","82dbaf2b":"df.pcv = pd.to_numeric(df.pcv, errors='coerce')\ndf.pc = pd.to_numeric(df.pc, errors='coerce')\ndf.dm = pd.to_numeric(df.dm, errors='coerce')\ndf.cad = pd.to_numeric(df.cad, errors='coerce')\ndf.wc = pd.to_numeric(df.wc, errors='coerce')\ndf.rc = pd.to_numeric(df.rc, errors='coerce')\n","9b9d57ee":"#describe data \ndf.describe().T","100f3392":"sum(df.duplicated())","40215cbb":"df.isna().sum().sort_values()","b1448316":"((df.isnull().sum()\/df.shape[0])*100).sort_values(ascending=False).plot(kind='bar', figsize=(10,10))","8bec20ce":"#show missing data\nimport missingno as msno\n\nmsno.matrix(df)\nplt.show()","5df713a7":"plt.style.use(\"seaborn-dark-palette\")\n","ce48636f":"sns.countplot(df.classification)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"patients Classification\",fontsize=15)\nplt.show()\n","b9cf6524":"# blood pressure graph\nsns.factorplot(data=df, x='bp', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"blood pressure graph\",fontsize=15)\nplt.show()\n","65fcb629":"#density-frequency graph\n\nsns.factorplot(data=df, x='sg', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"density-frequency graph\",fontsize=15)\nplt.show()","d1b1c3c8":"#sugar-frequency graph\nsns.factorplot(data=df, x='su', kind= 'count',size=6,aspect=2)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"sugar-frequency graph\",fontsize=15)\nplt.show()","3a4cc9d6":"df.age.value_counts().sort_values()\n","05f03e95":"# packed cell volume grahp\nsns.factorplot(data=df, x='age', kind= 'count',aspect=5)\nplt.xlabel('Chronic Kidney Disease')\nplt.title(\"packed cell volume grahp\",fontsize=15)\nplt.show()","ca89a17f":"sns.pairplot(df )\n","221f1a21":"#correlation map\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(df.corr(),annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.title('Correlations between different predictors')\nplt.show()","8fac57ad":"df2 = df.dropna(axis = 0)\nprint(f\"Before dropping all NaN values: {df.shape}\")\nprint(f\"After dropping all NaN values: {df2.shape}\")","8d142703":"df2.head().T","11a8dcee":"X = df2.drop(['classification', 'sg', 'appet', 'rc', 'pcv', 'hemo', 'sod'], axis = 1)\ny = df2['classification']","6bbea7f7":"X.columns\n","5564002f":"from sklearn.model_selection import train_test_split\n","326f5313":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n","deb09fb2":"# Import Libraries\nfrom sklearn.ensemble import RandomForestClassifier\n#----------------------------------------------------\n\n#----------------------------------------------------\n#Applying RandomForestClassifier Model \n\n'''\nensemble.RandomForestClassifier(n_estimators='warn\u2019, criterion=\u2019gini\u2019, max_depth=None,\n                                min_samples_split=2, min_samples_leaf=1,min_weight_fraction_leaf=0.0,\n                                max_features='auto\u2019,max_leaf_nodes=None,min_impurity_decrease=0.0,\n                                min_impurity_split=None, bootstrap=True,oob_score=False, n_jobs=None,\n                                random_state=None, verbose=0,warm_start=False, class_weight=None)\n'''\n\nRandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=20,max_depth=2,random_state=33) #criterion can be also : entropy \nRandomForestClassifierModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))\nprint('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))\n","cd169f70":"\n#Calculating Prediction\ny_pred = RandomForestClassifierModel.predict(X_test)\ny_pred_prob = RandomForestClassifierModel.predict_proba(X_test)\nprint('Predicted Value for RandomForestClassifierModel is : ' , y_pred[:10])\nprint('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred_prob[:10])","25ca824c":"#Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ny_pred=RandomForestClassifierModel.predict(X_test)\ny_true=y_test\ncm=confusion_matrix(y_true,y_pred)\n\n#Confusion Matrix on Heatmap\nf,ax=plt.subplots(figsize=(5,5))\nsns.heatmap(cm,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"GBCModel Matrix\")\nplt.show()","276bb3bf":"\n# Saving the model\nimport pickle\npickle.dump(RandomForestClassifierModel, open('kidney.pkl', 'wb'))","c40a10e2":"# DATA VISUALIZATION","26777148":"1. age - age\n2. bp - blood pressure\n3. sg - specific gravity\n4. al - albumin\n5. su - sugar\n6. rbc - red blood cells\n7. pc - pus cell\n8. pcc - pus cell clumps\n9. ba - bacteria\n10. bgr - blood glucose random\n11. bu - blood urea\n12. sc - serum creatinine\n13. sod - sodium\n14. pot - potassium\n15. hemo - haemoglobin\n16. pcv - packed cell volume\n17. wc - white blood cell count\n18. rc - red blood cell count\n19. htn - hypertension\n20. dm - diabetes mellitus\n21. cad - coronary artery disease\n22. appet - appetite\n23. pe - pedal edema\n24. ane - anemia\n25. lassification - class\n\n# Feature description\n\n1. Age(numerical) --> age in years\n2. Blood Pressure(numerical) bp in mm\/Hg\n3. Specific Gravity(nominal) sg - (1.005,1.010,1.015,1.020,1.025)\n4. Albumin(nominal)al - (0,1,2,3,4,5)\n5. Sugar(nominal) su - (0,1,2,3,4,5)\n6. Red Blood Cells(nominal) rbc - (normal,abnormal)\n7. Pus Cell (nominal)pc - (normal,abnormal)\n8. Pus Cell clumps(nominal)pcc - (present,notpresent)\n9. Bacteria(nominal) ba - (present,notpresent)\n10. Blood Glucose Random(numerical) bgr in mgs\/dl\n11. Blood Urea(numerical) bu in mgs\/dl\n12. Serum Creatinine(numerical) sc in mgs\/dl\n13. Sodium(numerical) sod in mEq\/L\n14. Potassium(numerical) pot in mEq\/L\n15. Haemoglobin(numerical) hemo in gms\n16. Packed Cell Volume(numerical)\n17. White Blood Cell Count(numerical) wc in cells\/cumm\n18. Red Blood Cell Count(numerical) rc in millions\/cmm\n19. Hypertension(nominal) htn - (yes,no)\n20. Diabetes Mellitus(nominal) dm - (yes,no)\n21. Coronary Artery Disease(nominal) cad - (yes,no)\n22. Appetite(nominal) ppet - (good,poor)\n23. Pedal Edema(nominal) pe - (yes,no)\n24. Anemia(nominal)ane - (yes,no)\n25. Class (nominal) class - (ckd,notckd)","85912cb4":"# EDA","744049e1":"# Data contains"}}