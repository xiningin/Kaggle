{"cell_type":{"6ffcbe3c":"code","a7192d0b":"code","2c610cab":"code","0b04a50f":"code","669616fa":"code","ceccedf0":"code","d5c7de29":"code","f0b15a5f":"code","440a6de5":"code","ad483b51":"code","caa41d4c":"code","c394fc7d":"markdown","bdebb783":"markdown","44f77a6a":"markdown","c3cc5264":"markdown","3559c371":"markdown","bde0974f":"markdown","29c1346d":"markdown","e2c5479d":"markdown","0b813dea":"markdown","9205b027":"markdown","22a59d32":"markdown","6d919cd6":"markdown","24fbab92":"markdown"},"source":{"6ffcbe3c":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport math\nimport shutil\nfrom IPython.core import display as ICD","a7192d0b":"# Matrix addition with Numpy\na = np.array([4, 3, 6])\nb = np.array([3, -1, 2])\nc = np.add(a, b)\nprint(c)\n# Matrix addition with TensorFlow\na = tf.constant([4, 3, 6])\nb = tf.constant([3, -1, 2])\nc = tf.add(a, b)\nwith tf.Session() as sess:\n  result = sess.run(c)\n  print(result)","2c610cab":"df = pd.read_csv(\"..\/input\/housing.csv\", sep=\",\")\nprint('Original Dataset:')\nICD.display(df.head(15))\na = pd.DataFrame(df.isnull().sum())\na['# of null values'] = a[0]\nb = a[['# of null values']]\nprint('Before Dropping Null Values:')\nprint('# of Rows, Columns: ',df.shape)\nICD.display(b)\ndf = df.dropna(axis=0)\na = pd.DataFrame(df.isnull().sum())\na['# of null values'] = a[0]\nb = a[['# of null values']]\nprint('After Dropping Null Values:')\nprint('# of Rows, Columns: ',df.shape)\nICD.display(b)","0b04a50f":"c = pd.plotting.scatter_matrix(df, alpha=0.2, figsize=(17, 17), diagonal='hist')\nc;","669616fa":"df['num_rooms'] = df['total_rooms'] \/ df['households']\ndf['num_bedrooms'] = df['total_bedrooms'] \/ df['households']\ndf['persons_per_house'] = df['population'] \/ df['households']\ndf.drop(['total_rooms', 'total_bedrooms', 'population', 'households'], axis = 1, inplace = True)\n\nfeatcols = {\n  colname : tf.feature_column.numeric_column(colname) \\\n    for colname in 'housing_median_age,median_income,num_rooms,num_bedrooms,persons_per_house'.split(',')\n}\n# Bucketize lat, lon so it's not so high-res; California is mostly N-S, so more lats than lons\nfeatcols['longitude'] = tf.feature_column.bucketized_column(tf.feature_column.numeric_column('longitude'),\n                                                   np.linspace(-124.3, -114.3, 5).tolist())\nfeatcols['latitude'] = tf.feature_column.bucketized_column(tf.feature_column.numeric_column('latitude'),\n                                                  np.linspace(32.5, 42, 10).tolist())\n\n# Split into train and eval\nmsk = np.random.rand(len(df)) < 0.8\ntraindf = df[msk]\nevaldf = df[~msk]\n\nSCALE = 100000\nBATCH_SIZE=100\ntrain_input_fn = tf.estimator.inputs.pandas_input_fn(x = traindf[list(featcols.keys())],\n                                                    y = traindf[\"median_house_value\"] \/ SCALE,\n                                                    num_epochs = 1,\n                                                    batch_size = BATCH_SIZE,\n                                                    shuffle = True)\neval_input_fn = tf.estimator.inputs.pandas_input_fn(x = evaldf[list(featcols.keys())],\n                                                    y = evaldf[\"median_house_value\"] \/ SCALE,  # note the scaling\n                                                    num_epochs = 1, \n                                                    batch_size = len(evaldf), \n                                                    shuffle=False)\nprint('# of Rows, Columns: ',df.shape)\nICD.display(df.head(15))","ceccedf0":"c = pd.plotting.scatter_matrix(df, alpha=0.2, figsize=(17, 17), diagonal='hist')\nc;","d5c7de29":"def print_rmse(model, name, input_fn):\n  metrics = model.evaluate(input_fn=input_fn, steps=1)\n  print ('RMSE on {} dataset = {} USD'.format(name, np.sqrt(metrics['average_loss'])*SCALE))","f0b15a5f":"SCALE = 100000\ntrain_fn = tf.estimator.inputs.pandas_input_fn(x = df[[\"num_rooms\"]],\n                                              y = df[\"median_house_value\"] \/ SCALE,  # note the scaling\n                                              num_epochs = 1,\n                                              shuffle = True)\n\nfeatures = [tf.feature_column.numeric_column('num_rooms')]\noutdir = '.\/housing_trained'\nshutil.rmtree(outdir, ignore_errors = True) # start fresh each time\nmyopt = tf.train.AdamOptimizer(learning_rate = 0.01)\nmodel = tf.estimator.LinearRegressor(model_dir = outdir, feature_columns = features, optimizer = myopt)\nmodel.train(input_fn = train_fn, steps = 300)\nprint_rmse(model, 'training', train_fn)","440a6de5":"SCALE = 100000\ntrain_fn = tf.estimator.inputs.pandas_input_fn(x = df[[\"num_rooms\"]],\n                                              y = df[\"median_house_value\"] \/ SCALE,  # note the scaling\n                                              num_epochs = 1,\n                                              shuffle = True)\n\nfeatures = [tf.feature_column.numeric_column('num_rooms')]\noutdir = '.\/housing_trained'\nshutil.rmtree(outdir, ignore_errors = True) # start fresh each time\nmyopt = tf.train.AdamOptimizer(learning_rate = 0.03)\nmodel = tf.estimator.DNNRegressor(model_dir = outdir,\n                                hidden_units = [50, 50, 20],\n                                feature_columns = features,\n                                optimizer = myopt,\n                                dropout = 0.05)\nmodel.train(input_fn = train_fn, steps = 300)\nprint_rmse(model, 'training', train_fn)","ad483b51":"outdir = '.\/housing_trained'\nshutil.rmtree(outdir, ignore_errors = True) # start fresh each time\nmyopt = tf.train.AdamOptimizer(learning_rate = 0.01)\nmodel = tf.estimator.LinearRegressor(model_dir = outdir, feature_columns = featcols.values(), optimizer = myopt)\n#NSTEPS = (100 * len(traindf)) \/ BATCH_SIZE\nNSTEPS = 3000\nmodel.train(input_fn = train_input_fn, steps = NSTEPS)\nprint_rmse(model, 'eval', eval_input_fn)","caa41d4c":"outdir = '.\/housing_trained'\nshutil.rmtree(outdir, ignore_errors = True) # start fresh each time\nmyopt = tf.train.AdamOptimizer(learning_rate = 0.01)\nmodel = tf.estimator.DNNRegressor(model_dir = outdir,\n                                hidden_units = [50, 50, 20],\n                                feature_columns = featcols.values(),\n                                optimizer = myopt,\n                                dropout = 0.1)\n#NSTEPS = (100 * len(traindf)) \/ BATCH_SIZE\nNSTEPS = 3000\nmodel.train(input_fn = train_input_fn, steps = NSTEPS)\nprint_rmse(model, 'eval', eval_input_fn)","c394fc7d":"*Step 4: Feature Engineering*","bdebb783":"*Step 6: Evaluate Regressors Using the Full Feature Space*","44f77a6a":"*Step 2: Perform Basic Matrix Operations Using TensorFlow*","c3cc5264":"**Predict California Housing Prices with TensorFlow**","3559c371":"*Step 3: Load and Describe Data*","bde0974f":"Credit: Many of these functions are adaptations from the following tutorials ([Link #1](https:\/\/github.com\/GoogleCloudPlatform\/training-data-analyst\/blob\/master\/courses\/machine_learning\/deepdive\/03_tensorflow\/a_tfstart.ipynb), [Link #2](https:\/\/github.com\/GoogleCloudPlatform\/training-data-analyst\/blob\/master\/courses\/machine_learning\/deepdive\/05_artandscience\/a_handtuning.ipynb), [Link #3](https:\/\/github.com\/GoogleCloudPlatform\/training-data-analyst\/blob\/master\/courses\/machine_learning\/deepdive\/05_artandscience\/c_neuralnetwork.ipynb)).","29c1346d":"[LinearRegressor()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/estimator\/LinearRegressor) with only a single feature (num_rooms).","e2c5479d":"[DNNRegressor()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/estimator\/DNNRegressor) with only a single feature (num_rooms).","0b813dea":"**Summary:\n**\n\nIn the end, we were able to predict California housing prices using a TensorFlow DNNRegressor and we saw an error (RMSE) of approximately $80,000.  In the future, I will optimize the model hyper-parameters and I will add additional evaluation metrics in order to make these predictions more accurate.","9205b027":"*Step 5: Evaluate Regressors Using a Reduced Feature Space*","22a59d32":"[DNNRegressor()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/estimator\/DNNRegressor) using the full feature space.","6d919cd6":"[LinearRegressor()](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/estimator\/LinearRegressor) using the full feature space.","24fbab92":"*Step 1: Import Python Packages*"}}