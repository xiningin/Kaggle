{"cell_type":{"48645a9f":"code","7008cb75":"code","693afa84":"code","9565ae96":"code","b2794b58":"code","51fbae73":"code","b87adc18":"code","402680e3":"code","d96ec690":"code","04753bda":"code","04e90000":"code","c244d508":"code","f38b4994":"code","bde721b3":"code","d6b3615d":"code","40b0dda7":"code","53b27a9f":"code","6061a706":"code","963c0f6f":"code","f42071c5":"code","cf362c4f":"code","44673446":"code","8803f882":"code","c0e2cdeb":"code","758e39a0":"code","a6a32b98":"code","709d510b":"code","95d838a0":"code","c084bb82":"code","459bfc05":"code","14593ee7":"code","8737ec47":"code","eca8da38":"code","e2d28869":"code","b6d5f18e":"code","c9e04ca6":"code","a852d078":"code","68fdb504":"code","311dd0f0":"code","fba00513":"code","153d3883":"code","30dda10c":"code","748cbea4":"code","5ea9d934":"code","cbd5051c":"code","0f864e21":"code","7c1015d7":"code","722a0ac3":"code","34adf01e":"code","6b4e7b70":"code","4dd1566a":"code","76a8c308":"code","a6b5953b":"code","f1e00337":"code","18d6b841":"code","d2b40c2f":"code","0880e340":"code","65e3b4b4":"code","88930504":"code","4cd7e119":"code","f1a4e460":"code","47765fce":"code","82445798":"code","18f85b16":"code","67a38179":"code","ea1665c9":"code","1c116d53":"code","130e196b":"code","df563a9d":"code","f5c7a8eb":"code","c9729ef7":"code","b1d3e683":"code","7c28beb0":"code","76a1ce6d":"code","5705dc9f":"code","bdfeb4b0":"markdown","9e966fa9":"markdown","69342020":"markdown","f1b6a7cb":"markdown","b0afeaea":"markdown","fa79cf29":"markdown","aeb9c449":"markdown","4e6d6a79":"markdown","a9d8ad28":"markdown","60cc9421":"markdown","c3f8736d":"markdown","d956640c":"markdown","b08c3d0d":"markdown","67191589":"markdown","e6106d87":"markdown","8c3dab7b":"markdown","4306d4a4":"markdown","07008b61":"markdown","0ee4835c":"markdown","08a37e0e":"markdown","0e22deb7":"markdown","22f36969":"markdown","daaf8f42":"markdown","c3a88cd8":"markdown","db4ab17a":"markdown","ebd36976":"markdown","41f89bff":"markdown","dc122cb6":"markdown","d0a9997e":"markdown","d154a4a4":"markdown","728a2b41":"markdown","f7bff18d":"markdown","5ea02375":"markdown","01db50af":"markdown","5414cb10":"markdown","a4abeb81":"markdown","fbeac2ea":"markdown","c22e40f0":"markdown","9e4df177":"markdown","f1f9827b":"markdown","f0df9fe0":"markdown"},"source":{"48645a9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7008cb75":"df= pd.read_csv(\"..\/input\/real-estate-dataset\/data.csv\")","693afa84":"df.shape\n#(Rows,Columns)\n","9565ae96":"df.info()","b2794b58":"df.head(6)\n","51fbae73":"df.tail(6)","b87adc18":"df.columns\n","402680e3":"df['CRIM']\n","d96ec690":"type(df['CRIM'])","04753bda":"#df.CRIM\ndf[['CRIM','ZN']]","04e90000":"df.loc[3]","c244d508":"df.loc[[0,1,4]]","f38b4994":"df.loc[0:3]","bde721b3":"df.loc[[0,3],['CRIM','ZN']]","d6b3615d":"df.loc[0:5,'CRIM':'NOX']","40b0dda7":"df.iloc[3]","53b27a9f":"df.iloc[[0,1,4]]","6061a706":"df.iloc[0:3]","963c0f6f":"df.iloc[[0,2],[0,4]]","f42071c5":"df.iloc[0:5,3:5]","cf362c4f":"df.set_index('CRIM')","44673446":"df #df's index is not change because we dont use inplace=True.","8803f882":"df.set_index('ZN',inplace=True)","c0e2cdeb":"df","758e39a0":"# df.loc[1] # the program gave the error because df.loc[]'s variable must be row's value.if you call rows with row's Id, you must use df.iloc[] ","a6a32b98":"df.iloc[1]","709d510b":"df","95d838a0":"df.reset_index(inplace=True)","c084bb82":"df","459bfc05":"df.sort_index(ascending= False, inplace=False)","14593ee7":"df","8737ec47":"df","eca8da38":"filt = (df['INDUS']>4)&(df['CRIM']>0.03)\nfilt","e2d28869":"df.loc[filt]\n#df[filt]\n#if we want use reverse of filter we must use df.loc[~filter].\n","b6d5f18e":"#filt = df['LanguageWorkedWith'].str.contains('Python', na=False)\n","c9e04ca6":"df.columns","a852d078":"df.rename(columns={'ZN':'zn'},inplace = True)","68fdb504":"df","311dd0f0":"df.columns = [x.lower() for x in df.columns]","fba00513":"a = ['sa as','as sa ']","153d3883":"df.rename(columns={'zn':'zn'},inplace=True)","30dda10c":"df","748cbea4":"df.columns=df.columns.str.replace(' ','_')","5ea9d934":"df","cbd5051c":"df.loc[1]=[1,1,1,1,1,1,1,1,1,1,1,1,1,1]","0f864e21":"df.head()","7c1015d7":"df.loc[1,['crim','indus']]=[2,2]","722a0ac3":"df.head(3)","34adf01e":"df.loc[1,'chas']=5","6b4e7b70":"df.head(5)","4dd1566a":"filt= (df.zn>0)\ndf[filt]['crim']= 15","76a8c308":"df.loc[filt,'crim']=0.006","a6b5953b":"df.head()","f1e00337":"#df['email'] = df['email'].str.lower()","18d6b841":"def div2(x):\n    return x\/2\n    ","d2b40c2f":"df['indus']=df['indus'].apply(div2)","0880e340":"df","65e3b4b4":"df.apply(len)","88930504":"df.apply(len, axis='columns')","4cd7e119":"df.applymap(div2)","f1a4e460":"df.head()","47765fce":"df['newColumn']=0","82445798":"df['newColumn2']=df.zn+df.crim","18f85b16":"df.head()","67a38179":"df.drop(columns=['newColumn','newColumn2'],inplace=True)","ea1665c9":"df.columns","1c116d53":"df.append({'zn':5},ignore_index=True)\n","130e196b":"df.tail()","df563a9d":"df=df.append({'zn':5},ignore_index=True)","f5c7a8eb":"df.tail(3)","c9729ef7":"df.drop(index=511,inplace=True)","b1d3e683":"df.tail()","7c28beb0":"You can also drop with filter","76a1ce6d":"filt=df.crim<0.5","5705dc9f":"df.drop(index=df[filt].index,inplace=True)","bdfeb4b0":"You can change the index while you import DataFrame.\n**pd.read_csv(<font color='green'>'DF location'<\/font>, index_col=<font color ='green'>'ColumnName'<\/font>)**.","9e966fa9":"#### Drop Columns\n**df.drop(<font color= 'green'> columns=[<font color='red'>'columnName1','columnnName2',....<\/font>]<\/font>,<font  color ='green'> inplace=True or False<\/font>)**","69342020":"##  General Info About Data ","f1b6a7cb":"#### APPLY,MAPAPPLY,MAP","b0afeaea":"## UPDATING DATA","fa79cf29":"df.head(int x) = Shows first x rows in the df.\n<br>\ndf.tail(int x)= Shows last x rows in the df.","aeb9c449":"#### if you want reach spesific rows and colums you must use  **df.loc[<font color ='green'>[rowId1,rowId2],['ColumnName1','ColumnName2']<\/font>]**.\n","4e6d6a79":"We filtering data for the show data which has spesific attribute.\n","a9d8ad28":"## FILTER","60cc9421":"We can see the DataFrame's columns :df.columns ","c3f8736d":"## EDIT INDEXES","d956640c":"### Reset Index","b08c3d0d":"### Columns","67191589":"### df.iloc\ndifference from df.loc[] that when you use df.iloc[],**you must index the columns and Ids**. **","e6106d87":"DataFrame consist of Rows and Columns and We need to enter the rows and columns when apply Machine learning algoritms or EDA.","8c3dab7b":"#### if you want reach spesific rows and colums you must use  **df.iloc[<font color ='green'>[rowIdNumber1,rowIdNumber2] ,['ColumnNameINDEX1','ColumnNameINDEX2']<\/font>]**.\n","4306d4a4":"### Add Column\n\ndf['newColumnName']=.....","07008b61":"### Add Rows\n**df.append({},ignore_index=True or False)**\nNote:df.append doesn't include inplace.","0ee4835c":"You can set the index \n<br>\n**df.set_index(<font color = 'green'>'ColumnName'<\/font>,inplace= <font color = 'green'> True or False<\/font>)**\n<br>\n<font color = 'red'>if you choose inplace =True the dataframe change  but you choose inplace=false dataframe is not change.<\/font>","08a37e0e":"### df.loc\n**df.loc[<font color ='green'>Row's id<\/font>]**\n\nif you want reach more than one row you must use **df.loc[<font color ='green'>[RowId1,RowId2,...]<\/font>]**.\n    ","0e22deb7":"Series is a array which is one dimensional","22f36969":"### Drop Row\ndf.drop(index=indexNumber,inplace=True or False)\n","daaf8f42":" most of the time index should be unique but for the nonce our index is not be unique.","c3a88cd8":"### Rows","db4ab17a":"You can sort the index with **df.sort_index(ascending= <font color = green >True or False<\/font>,inplace=<font color = green >True or False<\/font>)**.","ebd36976":"#### if you want reach  rows and colums which are in certain range you must use  **df.loc[<font color ='green'>rowIdNumber1:rowIdNumber2 , 'ColumnNameU':'ColumnNameV'<\/font>]**.","41f89bff":"## ADD COLUMN OR ROW","dc122cb6":"## to be continued\n","d0a9997e":"You shouldn't use df[''].map if the columns' values are spesific for ex. True,False or Yes,No other situation instead of df.map you can use df[''].replace({}) ","d154a4a4":"#### if you want reach  rows and colums which are in certain range you must use  **df.loc[<font color ='green'>rowId1:rowId2,'ColumnNameU':'ColumnNameV'<\/font>]**.\n","728a2b41":"If you want reset index you can use:\n<br>\ndf.reset_index(inplace=<font color= 'green'>True or False<\/font>)","f7bff18d":"#### if you want reach rows which are in certain range you must use **df.loc[x:y]**.\n","5ea02375":"# **<font color='red'>This Notebook Created for Pandas Training <\/font>**\n Read Csv and Start Data Analysis\n Selecting Rows and Columns\n","01db50af":"## Enter Specific Column\n\n**df['columnName']** <font color='red'>(Reccomended because of columnName may be irregular or contain special characters)<\/font> or **df.columnName**.\n\n\u0130f you want reach more than one columns you can use **df[['columnName1','columnName2']]**.\n","5414cb10":"### Set index","a4abeb81":"We created the filter but we can only see True or false we must use df[filt] or df.loc[filt] (preffered).\n","fbeac2ea":"You can change the column with df.columns= ['A','B'....] but it is not preferred because when you work huge dataframe, you habe a lot of column and this algorithm is too long to use.You must use different code such as,**df.rename(<font color ='red'>columns={'A':'a','B':'b'}<\/font>, <font color ='green'>inplace= True or False<\/font>)**.\u0130f you want change multiple columns ,you can use different algorithm.  ","c22e40f0":"## SELECT\u0130NG ROWS AND COLUMNS","9e4df177":"## IN ADDITION","f1f9827b":"## Enter Specific Row or Rows","f0df9fe0":"##  Read CSV"}}