{"cell_type":{"0178374d":"code","2e73f0c1":"code","279e0759":"code","f324cc0c":"code","84c66ed1":"code","9369df65":"code","cdfe0b43":"code","1503ba6f":"code","0baddeb6":"code","1edb6e56":"code","cacb2794":"code","2918d267":"code","e9b63222":"code","326a9e4b":"code","3991fb83":"code","4539bae8":"code","f7ef4d91":"code","424687ca":"code","04c099dd":"code","6fc6708b":"code","3d7bceb9":"code","c7eead13":"code","c5b27653":"code","1fcb37de":"code","9cc8a916":"code","08b16144":"code","08bea7e4":"code","9d46a91e":"code","7967659e":"code","cff497dd":"code","2e9bd1c6":"code","9cee1ac4":"code","30f8846d":"code","9121afcd":"code","402b9a89":"code","3e7d7a63":"code","f4a70e24":"code","edad0dd1":"code","c5d42c9f":"code","ba991b92":"code","b1a03cb8":"code","abfb9f5c":"code","44379e66":"code","762725fb":"code","9aa0e2d0":"code","a81ef179":"code","90f7bcf0":"code","91900a2b":"code","4b7924d3":"code","d103ef24":"code","f8ff5826":"code","8bcdb2c9":"code","59ede1ed":"code","bf0cb6a7":"code","213c3a42":"code","8eabb8f1":"code","5d105811":"code","a5407655":"code","37161043":"code","64dc5e83":"code","53efcc8c":"code","c0273244":"code","6f3606ed":"code","6ad6320c":"code","94e4c9f0":"code","366fc0b4":"code","85ef9b77":"code","e8793341":"code","3fafba3a":"code","1966749e":"code","e9940316":"code","428a3603":"code","4f501bc5":"code","2141a172":"code","d49e7835":"code","34aafe41":"code","1e340374":"code","19af13cd":"code","72e71f39":"code","324ffffa":"code","d2c3a008":"code","13b273e6":"code","f6991008":"code","dbe7e4b8":"code","3c61f133":"code","adb19464":"code","653dfcc1":"code","0ff6c930":"code","c14c5a33":"code","2c082e64":"code","43ee3ac3":"code","758a2d00":"code","cf900bb2":"markdown","f4f7613f":"markdown","c9d92a35":"markdown","a1374f75":"markdown","d9c652b8":"markdown","d242d041":"markdown","beee6e1b":"markdown","44e62a3d":"markdown","1153aef4":"markdown","d6371556":"markdown","5c3f695f":"markdown","15c9ce4c":"markdown","b2357b3b":"markdown","294b78d7":"markdown","0086ef5c":"markdown","32817a28":"markdown","fe4400ad":"markdown","905eef41":"markdown","ccf72414":"markdown","1de3232e":"markdown","ce275395":"markdown","f9609787":"markdown","0aab024a":"markdown","4f5ac9bc":"markdown","af742a14":"markdown","a3c68180":"markdown","8a35d8ce":"markdown","0da6931d":"markdown","7eeb6343":"markdown","1978002b":"markdown","3556009e":"markdown","4b49a360":"markdown","5626d27f":"markdown","783fecc1":"markdown","535a1a24":"markdown","c78a72e9":"markdown","356eafc1":"markdown","464544d4":"markdown","4bfb9dc3":"markdown","d854f725":"markdown","f5b4b747":"markdown","0042e387":"markdown","5dd89492":"markdown","69678675":"markdown","5dd7205f":"markdown","07773898":"markdown","bbae5176":"markdown","05ce8fef":"markdown","b7911171":"markdown","56e51151":"markdown","afa0c6fc":"markdown","0a2cd3bb":"markdown","a161bc11":"markdown","e15ca912":"markdown","08df7d69":"markdown"},"source":{"0178374d":"import numpy as np\nimport pandas as pd\nimport os\nimport re\nimport pydicom\n\n# import useful tools\nfrom glob import glob\nfrom PIL import Image\nimport cv2\nimport pydicom as dcm\nimport random\nimport matplotlib.patches as patches\nfrom sklearn.model_selection import KFold\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\n\nfrom sklearn.model_selection import StratifiedKFold\nimport warnings\n\n# import data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\nimport matplotlib\nimport pydicom as dicom\n\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\n\n\n# import data augmentation\nimport albumentations as albu\n\n# import math module\nimport math\n\n# Libraries\nimport pandas_profiling\nimport xgboost as xgb\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.tree import DecisionTreeRegressor\nimport matplotlib.patches as patches\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# One-hot encoding\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Other\nfrom random import randint\nimport warnings\nimport csv\nwarnings.filterwarnings(\"ignore\")","2e73f0c1":"class Cfg(object):\n  \n  def __init__(self):\n    super(Cfg, self).__init__()\n    self.dim = 512\n    self.batch= 8\n    self.steps= 500\n    self.epochs= 10\n    self.train_csv= '..\/input\/vinbigdata-{}-image-dataset\/vinbigdata\/train.csv'.format(self.dim)\n    self.test_csv= '..\/input\/vinbigdata-{}-image-dataset\/vinbigdata\/test.csv'.format(self.dim)\n    self.img_dir= '..\/input\/vinbigdata-{}-image-dataset\/vinbigdata\/train\/'.format(self.dim)\n    \n    self.git= 'https:\/\/github.com\/fizyr\/keras-retinanet.git'\n    self.model_url= ['https:\/\/github.com\/fizyr\/keras-retinanet\/releases\/download\/0.5.1\/resnet50_coco_best_v2.1.0.h5',\n               'https:\/\/github.com\/fizyr\/keras-retinanet\/releases\/download\/0.5.1\/resnet101_oid_v1.0.0.h5',\n               'https:\/\/github.com\/fizyr\/keras-retinanet\/releases\/download\/0.5.1\/resnet152_oid_v1.0.0.h5']\n      \n    self.color_code=   {'Cardiomegaly':(124,252,0), 'Aortic enlargement':(135,206,250),\n                        'Pleural thickening':(199,21,133),'ILD':(245,245,220), 'Nodule\/Mass':(220,20,60),\n                        'Pulmonary fibrosis':(0,255,255), 'Lung Opacity':(128,128,0), 'Atelectasis':(255,0,255),\n                        'Other lesion':(176,224,230), 'Infiltration':(210,105,30),'Pleural effusion':(105,105,105),\n                        'Calcification':(138,43,226) ,'Consolidation':(250,240,230),'Pneumothorax':(100,149,237)}\n    \ncfg= Cfg()","279e0759":"# Setup the paths to train and test images\nTEST_DIR = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/test\/\"\nTRAIN_DIR = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/train\/\"\ndataset_dir = \"..\/input\/vinbigdata-chest-xray-abnormalities-detection\/\"","f324cc0c":"# Glob the directories and get the lists of train and test images\ntrain_fns = glob(TRAIN_DIR + '*')\ntest_fns = glob(TEST_DIR + '*')\n\n# Loading training data and test data\ntrain_df = pd.read_csv(dataset_dir+'train.csv')\nsample = pd.read_csv(dataset_dir+'sample_submission.csv')","84c66ed1":"# Images with no abnormal findings will be omitted.\nabnormal_train = train_df[train_df['class_name']!=\"No finding\"]","9369df65":"from tqdm import tqdm\nrows, columns, sex = [], [], []\nids = abnormal_train['image_id'].unique()\nfor i in ids:\n    path = dataset_dir+ 'train\/' + i + '.dicom'\n    dicom = dcm.dcmread(path, stop_before_pixels=True)\n    rows.append(dicom.Rows)\n    columns.append(dicom.Columns)\n    sex.append(dicom.PatientSex)","cdfe0b43":"info = pd.DataFrame({'image_id':ids, 'rows':rows, 'columns':columns, 'sex':sex})","1503ba6f":"dicom_meta = pd.read_csv('..\/input\/eda-dicom-reading-vinbigdata-chest-x-ray\/train_dicom_properties.csv.bz2').rename(columns={'file':'image_id'})","0baddeb6":"df= pd.read_csv(cfg.train_csv)\nprint(df.shape)\ndf= df[df.class_name != 'No finding']","1edb6e56":"def get_feature_distribution(data, feature):\n    # Get the count for each label\n    label_counts = data[feature].value_counts()\n\n    # Get total number of samples\n    total_samples = len(data)\n\n    # Count the number of items in each class\n    print(\"Feature: {}\".format(feature))\n    for i in range(len(label_counts)):\n        label = label_counts.index[i]\n        count = label_counts.values[i]\n        percent = int((count \/ total_samples) * 10000) \/ 100\n        print(\"{:<30s}:{}%\".format(label, count, percent))","cacb2794":"def show_dicom_images(data):\n    img_data = data\n    f, ax = plt.subplots(3,3, figsize=(6,8))\n    for i,data_row in enumerate(img_data):\n        imagePath = data_row\n        data_row_img_data = dcm.read_file(imagePath)\n        data_row_img = dcm.dcmread(imagePath)\n        ax[i\/\/3, i%3].imshow(data_row_img.pixel_array, cmap=plt.cm.bone) \n        ax[i\/\/3, i%3].axis('off')\n    plt.show()","2918d267":"def load_img(path):\n    img= cv2.imread(path)\n    img= cv2.resize(img, (cfg.dim, cfg.dim))\n    return img\n\ndef normalize_cod(df):\n    df.x_min= (df.x_min\/ df.width)* cfg.dim\n    df.x_max= (df.x_max\/ df.width)* cfg.dim\n    \n    df.y_min= (df.y_min\/ df.height)* cfg.dim\n    df.y_max= (df.y_max\/ df.height)* cfg.dim\n    return df\n\ndf= normalize_cod(df.copy())\ndf= df.reset_index(drop = True)","e9b63222":"def read_xray(path, voi_lut = True, fix_monochrome = True):\n    dicom = dcm.read_file(path)\n\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    return (data * 255).astype(np.uint8)","326a9e4b":"def plot(name):\n    train_cls = train_df[train_df['class_name'] == name]\n    fig, axes = plt.subplots(4,4, figsize=(10, 10))\n    fig.suptitle(name+\" examples\", fontsize=10)\n    for i in range(4):\n        for j in range(4):\n            row = train_cls.iloc[random.randint(0, len(train_cls))]\n            path = dataset_dir + 'train\/' + row['image_id'] + '.dicom'\n            axes[i][j].imshow(read_xray(path), cmap='gray')\n            axes[i][j].add_patch(patches.Rectangle(\n                (row['x_min'], row['y_min']), \n                row['x_max'] - row['x_min'], \n                row['y_max'] - row['y_min'], \n                edgecolor='blue', \n                fill=False)\n            )\n    plt.show()","3991fb83":"def load_img(path):\n    img= cv2.imread(path)\n    img= cv2.resize(img, (cfg.dim, cfg.dim))\n    return img\n\ndef normalize_cod(df):\n    df.x_min= (df.x_min\/ df.width)* cfg.dim\n    df.x_max= (df.x_max\/ df.width)* cfg.dim\n    \n    df.y_min= (df.y_min\/ df.height)* cfg.dim\n    df.y_max= (df.y_max\/ df.height)* cfg.dim\n    return df\n\ndf= normalize_cod(df.copy())\ndf= df.reset_index(drop = True)","4539bae8":"def plot_width_of__bounding_boxes(data):\n    \n    fig, axes = plt.subplots(7, 2, figsize=(16,20), sharex=True)\n    fig.suptitle(\"width of bounding box for different categories\", fontsize=16)\n    \n    classes = data.class_name.unique()\n    for j, i in enumerate(classes[~np.isin(classes, 'No finding')]):\n        data_ = data[data['class_name']==i]\n        sns.distplot(data_['x_max'] - data_['x_min'], ax=axes[j%7, j\/\/7]);\n        axes[j%7, j\/\/7].title.set_text(i);\n    plt.show()","f7ef4d91":"classes= df.class_name.unique()\nind= df.class_id.unique()","424687ca":"##### Color-Code ########\ncolor= cfg.color_code\n\ndef show_bb(i):\n    df_mini= df[df.image_id==df.image_id[i]]\n    path= cfg.img_dir + df.image_id[i] + '.png'\n    img= load_img(path)\n    rep_class=[]\n    font = cv2.FONT_HERSHEY_SIMPLEX \n    for i, row in df_mini.iterrows():\n        class_n= row['class_name']\n        if class_n in rep_class:\n            continue                          # More generalization\n        rep_class.append(class_n)\n        x_min= int(row['x_min']); x_max= int(row['x_max'])\n        y_min= int(row['y_min']); y_max= int(row['y_max'])\n        img= cv2.rectangle(img, (x_min, y_min), (x_max, y_max), color[class_n], 2)\n        fontScale= (x_max- x_min)*2.5\/img.shape[1]\n        img= cv2.putText(img, class_n, (x_min, y_min-5), font, fontScale, cv2.LINE_AA)\n    return img","04c099dd":"classes= df.class_name.unique()\nind= df.class_id.unique()","6fc6708b":"##### Color-Code ########\ncolor= cfg.color_code\n\ndef show_bb(i):\n    df_mini= df[df.image_id==df.image_id[i]]\n    path= cfg.img_dir + df.image_id[i] + '.png'\n    img= load_img(path)\n    rep_class=[]\n    font = cv2.FONT_HERSHEY_SIMPLEX \n    for i, row in df_mini.iterrows():\n        class_n= row['class_name']\n        if class_n in rep_class:\n            continue                          # More generalization\n        rep_class.append(class_n)\n        x_min= int(row['x_min']); x_max= int(row['x_max'])\n        y_min= int(row['y_min']); y_max= int(row['y_max'])\n        img= cv2.rectangle(img, (x_min, y_min), (x_max, y_max), color[class_n], 2)\n        fontScale= (x_max- x_min)*2.5\/img.shape[1]\n        img= cv2.putText(img, class_n, (x_min, y_min-5), font, fontScale, cv2.LINE_AA)\n    return img","3d7bceb9":"train_df.info()","c7eead13":"train_df.nunique().to_frame().rename(columns={0:\"Unique Values\"}).style.background_gradient(cmap=\"plasma\")","c5b27653":"train_df[['class_id', 'class_name', 'rad_id']].groupby(['class_id', 'class_name']).count().rename(columns={'rad_id': 'Number of records'})","1fcb37de":"df.head()","9cc8a916":"train_rad = train_df['rad_id'].value_counts().reset_index()\nfig = go.Figure(data=[go.Table(header=dict(values=['Radiologist ID', 'Number of Observations'], fill_color='yellow'),\n                 cells=dict(values=[train_rad['index'], train_rad['rad_id']], fill_color='lavender'))\n                     ])\nfig.show()","08b16144":"def plot_distribution_classes(x_values, y_values, title):\n    \n    #colors = ['rgb(26, 118, 255)',] * 15\n    #colors[0] = 'lightslategray'\n\n    fig = go.Figure(data=[go.Bar(\n        x=x_values, \n        y=y_values,\n        text=y_values\n        #marker_color=colors\n    )])\n\n    fig.update_layout(height=400, width=700, title_text=title)\n    fig.update_xaxes(type=\"category\")\n\n    fig.show()","08bea7e4":"indexes = train_df.rad_id.unique()\ncounts = train_df.rad_id.value_counts()\n\nsorted_dict = dict(zip(indexes, counts))\nsorted_dict = {k: v for k, v in sorted(sorted_dict.items(), key=lambda item: item[1], reverse = True)}\n\nx = list(sorted_dict.keys())\ny = list(sorted_dict.values())\n\nplot_distribution_classes(x, y, \n                          title=\"Distribution of Annotations by Radioloiest\")","9d46a91e":"whatassigned = train_df[['rad_id', 'class_id', 'image_id']]\\\n    .groupby(['rad_id', 'class_id'])\\\n    .count()\\\n    .reset_index()\\\n    .pivot(index='rad_id', columns='class_id',values='image_id')\\\n    .add_prefix('class')\\\n    .fillna(0)\\\n    .astype(np.int64)\nwhatassigned['Percent with no finding'] = [f'{tmpvar}%' for tmpvar in np.round(100*whatassigned['class14'].values\/whatassigned.sum(axis=1).values,2)]\nwhatassigned","7967659e":"plt.figure(figsize=(6, 6))\nsns.countplot(x=\"class_id\", data=train_df)\nplt.title(\"Class ID Distribution\")\nplt.show()","cff497dd":"plt.figure(figsize=(6, 6))\nsns.countplot(x=\"rad_id\", data=train_df)\nplt.title(\"RAD ID Distribution\")\nplt.show()","2e9bd1c6":"fig, axes = plt.subplots(figsize = (20,10), nrows=2, ncols=2)\nax0, ax1, ax2, ax3 = axes.flatten()\n\nax0.hist(train_df.x_min, bins=55, color = \"skyblue\")\nax0.axvline(x=602, color='royalblue', linestyle='dashed', linewidth=2)\nax0.axvline(x=1457, color='royalblue', linestyle='dashed', linewidth=2)\nax0.axvline(x=1014, color='cornflowerblue', linewidth=2)\nax0.set_title('X minimum', fontsize=18)\n\nax1.hist(train_df.x_max, bins=55, color = \"skyblue\")\nax1.axvline(x=1010, color='royalblue', linestyle='dashed', linewidth=2)\nax1.axvline(x=1567, color='cornflowerblue', linewidth=2)\nax1.axvline(x=1947, color='royalblue', linestyle='dashed', linewidth=2)\nax1.set_title('X maximum', fontsize=18)\n\nax2.hist(train_df.y_min, bins=55)\nax2.axvline(x=627, color='orchid', linestyle='dashed', linewidth=2)\nax2.axvline(x=935, color='cornflowerblue', linewidth=2)\nax2.axvline(x=1471, color='orchid', linestyle='dashed', linewidth=2)\nax2.set_title('Y minimum', fontsize=18)\n\nax3.hist(train_df.y_max, bins=55)\nax3.axvline(x=1009, color='orchid', linestyle='dashed', linewidth=2)\nax3.axvline(x=1411, color='cornflowerblue', linewidth=2)\nax3.axvline(x=1911, color='orchid', linestyle='dashed', linewidth=2)\nax3.set_title('Y maximum', fontsize=18)","9cee1ac4":"# Confirmation of the format of samples for submission\nsample.head(3)","30f8846d":"# Display some of the training data\ntrain_df.head()","9121afcd":"# Display of training data\nprint(train_df)","402b9a89":"# Check for missing values in the training data\ntrain_df.isnull().sum()","3e7d7a63":"# Check the unique values of image IDs.\nabnormal_train.image_id.value_counts()","f4a70e24":"fig = plt.figure(figsize=(6,6))\nsns.countplot(y ='class_name', data=abnormal_train);","edad0dd1":"train_df[['class_id', 'class_name', 'rad_id']].groupby(['class_id', 'class_name']).count().rename(columns={'rad_id': 'Number of records'}).style.applymap(lambda x: 'background-color:lightsteelblue')","c5d42c9f":"plot(\"No finding\")","ba991b92":"plot(\"Aortic enlargement\")","b1a03cb8":"target1 = abnormal_train[abnormal_train['class_id']==0]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target1['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target1['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target1['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target1['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","abfb9f5c":"plot(\"Cardiomegaly\")","44379e66":"target\uff12 = abnormal_train[abnormal_train['class_id']==3]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff12['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff12['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff12['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff12['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","762725fb":"plot(\"Pleural thickening\")","9aa0e2d0":"target\uff13 = abnormal_train[abnormal_train['class_id']==11]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff13['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff13['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff13['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff13['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","a81ef179":"plot(\"Pulmonary fibrosis\")","90f7bcf0":"target\uff14 = abnormal_train[abnormal_train['class_id']==13]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff14['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff14['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff14['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff14['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","91900a2b":"plot(\"Nodule\/Mass\")","4b7924d3":"target\uff15 = abnormal_train[abnormal_train['class_id']==8]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff15['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff15['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff15['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff15['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","d103ef24":"plot(\"Lung Opacity\")","f8ff5826":"target\uff16 = abnormal_train[abnormal_train['class_id']==7]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff16['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff16['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff16['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff16['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","8bcdb2c9":"plot(\"Pleural effusion\")","59ede1ed":"target\uff17 = abnormal_train[abnormal_train['class_id']==10]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff17['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff17['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff17['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff17['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","bf0cb6a7":"plot(\"Other lesion\")","213c3a42":"target\uff18 = abnormal_train[abnormal_train['class_id']==9]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff18['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff18['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff18['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff18['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","8eabb8f1":"plot(\"Infiltration\")","5d105811":"target\uff19 = abnormal_train[abnormal_train['class_id']==6]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target\uff19['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target\uff19['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target\uff19['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target\uff19['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","a5407655":"plot(\"ILD\")","37161043":"target10 = abnormal_train[abnormal_train['class_id']==5]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target10['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target10['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target10['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target10['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","64dc5e83":"plot(\"Calcification\")","53efcc8c":"target11 = abnormal_train[abnormal_train['class_id']==2]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target11['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target11['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target11['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target11['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","c0273244":"plot(\"Consolidation\")","6f3606ed":"target12 = abnormal_train[abnormal_train['class_id']==4]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target12['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target12['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target12['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target12['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","6ad6320c":"plot(\"Atelectasis\")","94e4c9f0":"target13 = abnormal_train[abnormal_train['class_id']==1]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target13['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target13['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target13['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target13['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","366fc0b4":"plot(\"Pneumothorax\")","85ef9b77":"target14 = abnormal_train[abnormal_train['class_id']==12]\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target14['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target14['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target14['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target14['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","e8793341":"# coding: utf-8\nfrom tqdm import tqdm\nimport time\n\n# Set the total value \nbar = tqdm(total = 1000)\n# Add description\nbar.set_description('Progress rate')\nfor i in range(100):\n    # Set the progress\n    bar.update(25)\n    time.sleep(1)","3fafba3a":"target1 = abnormal_train[abnormal_train['class_name']=='Aortic enlargement']\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(target1['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(target1['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(target1['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(target1['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","1966749e":"fig = plt.figure(figsize=(6,6))\nsns.countplot(info['sex'], data=train_df)\nplt.title(\"Sex distribution including those with no findings\")\nplt.show()","e9940316":"fig = plt.figure(figsize=(6,6))\nsns.countplot(info['sex'], data=abnormal_train)\nplt.title(\"SEX distribution excluding those with no findings\")\nplt.show()","428a3603":"plt.figure(figsize=(6, 6))\nsns.countplot(x=\"rad_id\", data=train_df)\nplt.title(\"RAD ID Distribution including those with no findings\")\nplt.show()","4f501bc5":"fig = plt.figure(figsize=(6,6))\nsns.countplot(x='rad_id', data=abnormal_train)\nplt.title(\"RAD ID Distribution excluding those with no findings\")\nplt.show()","2141a172":"fig = plt.figure(figsize=(6,6))\nax = sns.scatterplot(x='rows', y='columns', data=info, alpha=0.3)\nplt.title(\"row(x) column(x) scatter plot\")\nplt.show()","d49e7835":"fig = plt.figure(figsize=(6,6))\nax = sns.scatterplot(x='x_min', y='y_min', data=abnormal_train, alpha=0.3)\nplt.title(\"min coordinate scatter plot\")\nplt.show()","34aafe41":"fig = plt.figure(figsize=(6,6))\nax = sns.scatterplot(x='x_max', y='y_max', data=abnormal_train, alpha=0.3)\nplt.title(\"max coordinate scatter plot\")\nplt.show()","1e340374":"sns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(2,2,figsize=(6,6))\nsns.distplot(abnormal_train['x_max'],kde=True,bins=50, color=\"red\", ax=ax[0,0])\nsns.distplot(abnormal_train['y_max'],kde=True,bins=50, color=\"blue\", ax=ax[0,1])\nsns.distplot(abnormal_train['x_min'],kde=True,bins=50, color=\"green\", ax=ax[1,0])\nsns.distplot(abnormal_train['y_min'],kde=True,bins=50, color=\"magenta\", ax=ax[1,1])\nlocs, labels = plt.xticks()\nplt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","19af13cd":"plt.figure(figsize = (6, 6))\nx = info[\"rows\"]\ny = info[\"columns\"]\nsns.distplot(x * y, kde = True, color = \"brown\")\nplt.xlabel(\"pixel count\", fontsize = 16)\nplt.title(\"Pixel Count Analysis\", fontsize = 18)\nplt.grid(True)\nplt.axis(\"on\")","72e71f39":"# Create a list of classes and a dictionary\nclasses = train_df[['class_id', 'class_name', 'rad_id']]\\\n    .groupby(['class_id', 'class_name'])\\\n    .count()\\\n    .rename(columns={'rad_id': 'Number of records'})\\\n    .reset_index()\n\nfor index, row in classes.iterrows():\n    if index==0:\n        label_dict = {row['class_id']: row['class_name']}\n    else:\n        label_dict.update({row['class_id']: row['class_name']})\n\ntrain_df = pd.merge(train_df, dicom_meta, on='image_id', how='left')\ntrain_df['x_max'] = train_df['x_max']\/train_df['Columns']\ntrain_df['x_min'] = train_df['x_min']\/train_df['Columns']\ntrain_df['y_max'] = train_df['y_max']\/train_df['Rows']\ntrain_df['y_min'] = train_df['y_min']\/train_df['Rows']\ntrain_df['width'] = (train_df['x_max']-train_df['x_min'])\ntrain_df['height'] = (train_df['y_max']-train_df['y_min'])\ntrain_df['area'] = train_df['height']*train_df['width']\ntrain_df['x_center'] = (train_df['x_max']+train_df['x_min'])\/2\ntrain_df['y_center'] = (train_df['y_max']+train_df['y_min'])\/2","324ffffa":"# In this cell, we create a feature for how many other classes a radiologist has already assigned \n# for the same image.\n\ntmp1 = pd.merge(train_df, train_df, on=['image_id', 'rad_id'], how='left').fillna(0)\n#tmp1 = tmp1[ (tmp1['class_id_x']!=tmp1['class_id_y']) | (tmp1['x_min_x']!=tmp1['x_min_y']) | (tmp1['x_max_x']!=tmp1['x_max_y']) | (tmp1['y_min_x']!=tmp1['y_min_y']) | (tmp1['y_max_x']!=tmp1['y_max_y'])]\n\n\ntmp_cols = ['image_id', 'rad_id', 'class_id_x', 'x_min_x', 'y_min_x', 'x_max_x', 'y_max_x']\ntmp1 = tmp1[ tmp_cols + ['class_id_y', 'x_max_y']]\\\n    .groupby(tmp_cols+['class_id_y'])\\\n    .count()\\\n    .reset_index()\\\n    .pivot(index=tmp_cols,\n           columns='class_id_y', values='x_max_y')\\\n    .add_prefix('other_')\\\n    .reset_index()\\\n    .rename(columns={'class_id_x':'class_id',\n                     'class_id_x': 'class_id',\n                     'x_min_x': 'x_min',\n                     'y_min_x': 'y_min',\n                     'x_max_x': 'x_max',\n                     'y_max_x': 'y_max'})\n\n\ntrain_df = pd.merge(train_df, tmp1, \n                 on=['image_id', 'rad_id', 'class_id', 'x_min', 'y_min', 'x_max', 'y_max'],\n                 how='left')\ntrain_df[['other_'+str(i) for i in range(15)]] = train_df[['other_'+str(i) for i in range(15)]]\\\n    .fillna(0)\\\n    .astype(np.int)\n\n# Finally, we subtract the extra count of +1 for each label itself (when we want to predict it, we\n# do not want to have a feature that leaks the label, which it otherwise would).\nfor idx, row in train_df.iterrows():\n    if row['class_id']<14:        \n        train_df['other_' + str(row['class_id'])].values[idx] += -1\n    ","d2c3a008":"locations = np.zeros((14, 1000, 1000))\nfor index, row in tqdm(train_df.iterrows(), total=train_df.shape[0]):\n    if row['class_id']<14:\n        locations[row['class_id'], \n                  ((np.round(row['y_min'],3)*1000).astype(np.int)):((np.round(row['y_max'],3)*1000).astype(np.int)), \n                  ((np.round(row['x_min'],3)*1000).astype(np.int)):((np.round(row['x_max'],3)*1000).astype(np.int))] += 1\n        \nclasscounts = train_df[['image_id', 'rad_id', 'class_id','class_name']]\\\n    .groupby(['image_id', 'rad_id', 'class_id'])\\\n    .count()\\\n    .reset_index()\\\n    .pivot(index=['image_id', 'rad_id'], columns='class_id', values='class_name')\\\n    .rename(columns={i:'n_class'+str(i) for i in range(15)})\\\n    .fillna(0)\n   \nclassareas = train_df[['image_id', 'rad_id', 'class_id','area']]\\\n    .groupby(['image_id', 'rad_id', 'class_id'])\\\n    .sum()\\\n    .reset_index()\\\n    .pivot(index=['image_id', 'rad_id'], columns='class_id', values='area')\\\n    .rename(columns={i:'area_class'+str(i) for i in range(15)})\\\n    .fillna(0)\n\ntrain_df = pd.merge( pd.merge( train_df, classcounts, on=['image_id', 'rad_id'], how='left'), \n                  classareas, on=['image_id', 'rad_id'], how='left')\ntrain_df = train_df[train_df['class_id']!=14]\n\nclasses = train_df[['class_id', 'class_name', 'rad_id']]\\\n    .groupby(['class_id', 'class_name'])\\\n    .count()\\\n    .rename(columns={'rad_id': 'Number of records'})\\\n    .reset_index()\n    \nfor index, row in classes.iterrows():\n    if index==0:\n        label_dict = {row['class_id']: row['class_name']}\n    else:\n        label_dict.update({row['class_id']: row['class_name']})\n        \nf, axs = plt.subplots(5, 3, sharey=True, sharex=True, figsize=(16,28));\n\nfor class_id in range(14):\n    axs[class_id \/\/ 3, class_id - 3*(class_id \/\/ 3)].imshow(locations[class_id], cmap='inferno', interpolation='nearest');\n    axs[class_id \/\/ 3, class_id - 3*(class_id \/\/ 3)].set_title(str(class_id) + ': ' + label_dict[class_id])\n    \nplt.show();    ","13b273e6":"plot_width_of__bounding_boxes(abnormal_train)","f6991008":"classes = train_df[['class_id', 'class_name', 'rad_id']].groupby(['class_id', 'class_name']).count().rename(columns={'rad_id': 'Number of records'}).reset_index()\n\nfor index, row in classes.iterrows():\n    if index==0:\n        label_dict = {row['class_id']: row['class_name']}\n    else:\n        label_dict.update({row['class_id']: row['class_name']})","dbe7e4b8":"cols = ['#e41a1c', '#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999', '#000000', '#1b9e77', '#d95f02', '#7570b3', '#e7298a']","3c61f133":"train_df['size'] = (train_df['x_max']-train_df['x_min'])*(train_df['y_max']-train_df['y_min'])\nsizes = train_df.loc[train_df['class_id']<14, ['class_id', 'size']].groupby('class_id').mean().reset_index()\n\nplt.figure(figsize=(6, 6));\nplt.bar(sizes['class_id'], sizes['size'], \n        tick_label=[str(i) + ': ' + label_dict[i] for i in range(14)],\n        color=cols);\nplt.xticks(rotation='vertical');","adb19464":"numbers = train_df.loc[train_df['class_id']<14, ['image_id', 'rad_id', 'class_id', 'size']].groupby(['image_id', 'rad_id', 'class_id']).count().reset_index().groupby('class_id').mean('size').reset_index()\n\nplt.figure(figsize=(6, 6));\nplt.bar(numbers['class_id'], numbers['size'], tick_label=[str(i) + ': ' + label_dict[i] for i in range(14)], color=cols);\nplt.xticks(rotation='vertical');","653dfcc1":"tmpdf = train_df[['class_id', 'image_id', 'rad_id']].groupby(['class_id', 'image_id']).count().reset_index()\ntmpdf['rad_id'] = np.minimum(tmpdf['rad_id'].values, 1)\ncorr  = tmpdf.pivot(index='image_id', columns='class_id', values='rad_id').fillna(0).reset_index(drop=True).corr()\ncorr.style.background_gradient(cmap='coolwarm', vmin=-1.0, vmax=1.0).set_precision(2)","0ff6c930":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(7, 7), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n    \n\ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()","c14c5a33":"imgs = []\nimg_ids = abnormal_train['image_id'].values\nclass_ids = abnormal_train['class_id'].unique()\n\n# map label_id to specify color\nlabel2color = {class_id:[randint(0,255) for i in range(3)] for class_id in class_ids}\nthickness = 3\nscale = 5\n\n\n\nfor i in range(8):\n    img_id = random.choice(img_ids)\n    img_path = f'{dataset_dir}\/train\/{img_id}.dicom'\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    boxes = abnormal_train.loc[abnormal_train['image_id'] == img_id, ['x_min', 'y_min', 'x_max', 'y_max']].values\/scale\n    labels = abnormal_train.loc[abnormal_train['image_id'] == img_id, ['class_id']].values.squeeze()\n    \n    for label_id, box in zip(labels, boxes):\n        color = label2color[label_id]\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (500,500))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","2c082e64":"# training dataset\nfeatures = ['image_id' ,'class_id', 'rad_id', 'x_min', 'y_min', 'x_max', 'y_max']\ntrain_ftr = train_df[features]\ntrain_ftr.head()","43ee3ac3":"# coding: utf-8\nfrom tqdm import tqdm\nimport time\n\n# Set the total value \nbar = tqdm(total = 1000)\n# Add description\nbar.set_description('Progress rate')\nfor i in range(100):\n    # Set the progress\n    bar.update(25)\n    time.sleep(1)","758a2d00":"# predictions.to_csv('submission.csv',index= False)","cf900bb2":"* Let's also look at the distribution of sexes with no abnormal findings. There seems to be no particular difference.","f4f7613f":"There are 15 different radiographic observations which correspond to:\n\n* 0 - Aortic enlargement\n* 1 - Atelectasis\n* 2 - Calcification\n* 3 - Cardiomegaly\n* 4 - Consolidation\n* 5 - ILD\n* 6 - Infiltration\n* 7 - Lung Opacity\n* 8 - Nodule\/Mass\n* 9 - Other lesion\n* 10 - Pleural effusion\n* 11 - Pleural thickening\n* 12 - Pneumothorax\n* 13 - Pulmonary fibrosis\n* 14 - No finding","c9d92a35":"# Infiltration","a1374f75":"# Submission","d9c652b8":"# Check statistics","d242d041":"# Atelectasis","beee6e1b":"# No finding","44e62a3d":"* ILD stands for \"Interstitial Lung Disease\".\n* Interstitial Lung Disease is a general term for many conditions in which the interstitial space is injured.","1153aef4":"* Check the structure of the training data: there are three types of IDs and disease categories, and the maximum and minimum values for x and y, respectively, are listed.","d6371556":"* Rad IDs from R1 to R17\n* rad_id is the ID of the radiologist that made the observation","5c3f695f":"* This competition classifies chest radiographs into 15 categories, one of which is normal.\n* This is a competition for object detection and disease classification.\n* All images in dataset are DICOM format. So we need to convert data from DICOM to numpy array.[Convert dicom to np.array - the correct way](https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way) article will be helpful.\n\n* The host of the competition is explained as follows in [this thread](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/207741).\n* In this competition, you\u2019re given a set of training X-ray images in DICOM format, each of which was blindly annotated with bounding boxes of 14 classes by 3 radiologists from a pool of 17, encoded with Rad IDs from R1 to R17. The task is to automatically correctly predict boxes around abnormalities and classify them for the test images, whose ground-truth labels are hidden. Unlike the labels of the training set, those of the test set were already a consensus of 5 radiologists per image.\n* \n# Columns\n\n\n* image_id - unique image identifier\n\n* class_name - the name of the class of detected object (or \"No finding\")\n\n* class_id - the ID of the class of detected object\n\n* rad_id - the ID of the radiologist that made the observation\n\n* x_min - minimum X coordinate of the object's bounding box\n\n* y_min - minimum Y coordinate of the object's bounding box\n\n* x_max - maximum X coordinate of the object's bounding box\n\n* y_max - maximum Y coordinate of the object's bounding box","15c9ce4c":"# Consolidation","b2357b3b":"* ILD stands for \"Interstitial Lung Disease.\"\n* Interstitial lung disease is a general term for many conditions in which the interstitial space is injured.","294b78d7":"# Acknowledgements\n* [EDA - VinBigData Chest X-ray Abnormalities](https:\/\/www.kaggle.com\/trungthanhnguyen0502\/eda-vinbigdata-chest-x-ray-abnormalities)\n* [VinBigData: EDA All You need to know](https:\/\/www.kaggle.com\/dhananjay3\/vinbigdata-eda-all-you-need-to-know)\n[*Chest_X-ray: Knowledges for the 14 abnormalities*](https:\/\/www.kaggle.com\/sakuraandblackcat\/chest-x-ray-knowledges-for-the-14-abnormalities)\n* [Convert dicom to np.array - the correct way](https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way)\n* [VinBigData Chest X-ray Abnormalities Detection](https:\/\/www.kaggle.com\/hamditarek\/vinbigdata-chest-x-ray-abnormalities-detection)\n* [EDA & .dicom reading: VinBigData Chest X-ray](https:\/\/www.kaggle.com\/bjoernholzhauer\/eda-dicom-reading-vinbigdata-chest-x-ray)\n* [Chest_X-ray_Starter](https:\/\/www.kaggle.com\/drcapa\/chest-x-ray-starter)\n* [VinBigData Chest X-ray EDA with Plotly](https:\/\/www.kaggle.com\/debarshichanda\/vinbigdata-chest-x-ray-eda-with-plotly)\n* [VinBigData Retinanet-Detection [Training] ](https:\/\/www.kaggle.com\/akhileshdkapse\/vinbigdata-retinanet-detection-training\/data)\n* [VinBigData: EDA All You need to know](https:\/\/www.kaggle.com\/dhananjay3\/vinbigdata-eda-all-you-need-to-know)\n* [VBD Chest X-ray Abnormalities Detection | EDA\ud83d\udcca\ud83d\udd34](https:\/\/www.kaggle.com\/mrutyunjaybiswal\/vbd-chest-x-ray-abnormalities-detection-eda)\n* [Finding data issues and mislabeled bounding boxes](https:\/\/www.kaggle.com\/bjoernholzhauer\/finding-data-issues-and-mislabeled-bounding-boxes)\n* [Chest X-ray Abnormalities Doctor-EDA](https:\/\/www.kaggle.com\/anantgupt\/chest-x-ray-abnormalities-doctor-eda)\n* [All you need to know about DICOM](https:\/\/www.kaggle.com\/asimzahid\/all-you-need-to-know-about-dicom)\n* [EDA_train_csv](https:\/\/www.kaggle.com\/soudainchat\/eda-train-csv)","0086ef5c":"# Pulmonary fibrosis","32817a28":"# Loading data","fe4400ad":"# Overview","905eef41":"# Calcification","ccf72414":"* Pleural effusion is the accumulation of water outside the lungs in the chest cavity.\n* The outside of the lungs is covered by a thin membrane consisting of two layers known as the pleura. Fluid accumulation between these two layers (chest-wall\/parietal-pleura and the lung-tissue\/visceral-pleura) is called pleural effusion.\n* The findings of pleural effusion vary widely and vary depending on whether the radiograph is taken in the upright or supine position.\n* The most common presentation of pleural effusion is elevation of the diaphragm on one side, flattening the diaphragm, or blunting the angle between rib and diaphragm (typically more than 30 degrees)","1de3232e":"* Lung opacity can often be identified as any area in the chest radiograph that is more white than it should be.\n* Please see [this kaggle discussion](https:\/\/www.kaggle.com\/zahaviguy\/what-are-lung-opacities) for more information.","ce275395":"# Features based on where bounding boxes for a class tend to be","f9609787":"# Data Visualization","0aab024a":"* Atelectasis is a condition where there is no air in part or all of the lungs. And the lungs are collapsed. A common cause of atelectasis is obstruction of the bronchi.","4f5ac9bc":"# Aortic enlargement\n* Aortic enlargement is known as a sign of an aortic aneurysm. This condition often occurs in the ascending aorta.","af742a14":"*  Cardiomegaly can be caused by many conditions, including hypertension, coronary artery disease, infections, inherited disorders, and cardiomyopathies.\n* Cardiomegaly is usually diagnosed when the ratio of the heart's width to the width of the chest is more than 50%. This diagnostic criterion may be an essential basis for this competition.\n* Cardiomegaly can be caused by many conditions, including hypertension, coronary artery disease, infections, inherited disorders, and cardiomyopathies.\n* The heart-to-lung ratio criterion for the diagnosis of cardiomegaly is a ratio of greater than 0.5. ","a3c68180":"* Let's see how it correlates with the different classes\n* The following correlations were found to be strong.\n* '0: Aortic enlargement' and '3: Cardiomegaly'.\n* '\uff110: Pleural effusion' and '\uff11\uff11: Pleural thickening'.\n* '\uff11\uff11: Pleural thickening' and '\uff11\uff13: Pulmonary fibrosis'.","8a35d8ce":"* Pulmonary Fibrosis is inflammation of the lung interstitium due to various causes, resulting in thickening and hardening of the walls, fibrosis, and scarring.\n* The fibrotic areas lose their air content, which often results in dense cord shadows or granular shadows.","0da6931d":"* Next, let's check the number of diseases in the training data with numbers.","7eeb6343":"# Plot bounding box","1978002b":"* View the distribution by object's bounding box and class ID","3556009e":"# Trends in bounding boxes differences","4b49a360":"# Lung Opacity","5626d27f":"* Consolidation is officially referred to as air space consolidation. It is a decrease in lung permeability due to infiltration of fluid, cells, or tissue replacing the air-containing spaces in the alveoli.","783fecc1":"# Nodule\/Mass","535a1a24":"* Let's look at the number of diseases in the training data in a graph.","c78a72e9":"* Nodules and masses are seen primarily in lung cancer, and metastasis from other parts of the body such as colon cancer and kidney cancer, tuberculosis, pulmonary mycosis, non-tuberculous mycobacterium, obsolete pneumonia, and benign tumors.\n* A nodule\/mass is a round shade (typically less than 3 cm in diameter \u2013 resulting in much smaller than average bounding boxes) that appears on a chest X-ray image.","356eafc1":"* Calcium (calcification) may be deposited in areas where previous inflammation of the lungs or pleura has healed. Calcium may be deposited in the aorta due to atherosclerosis. Or calcification may occur in mediastinal lymph nodes.\n* Many diseases or conditions can cause calcification on chest x-ray.\n* Calcification may occur in the Aorta (as with atherosclerosis) or it may occur in mediastinal lymph nodes (as with previous infection, tuberculosis, or histoplasmosis).\n","464544d4":"# Your upvote is my motivation","4bfb9dc3":"# Submission File\n[The competition page](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/overview\/evaluation) has the following to say about the sample.\nImages in the test set may contain more than one object. For each object in a given test image, you must predict a class ID, confidence score, and bounding box in format xmin ymin xmax ymax. If you predict that there are NO objects in a given image, you should predict 14 1.0 0 0 1 1, where 14 is the class ID for \"No finding\", 1.0 is the confidence, and 0 0 1 1 is a one-pixel bounding box.\n\nThe submission file should contain a header and have the following format:\n\n","d854f725":"* Please see [What are lung opacities?](https:\/\/www.kaggle.com\/zahaviguy\/what-are-lung-opacities).","f5b4b747":"* Others include all abnormalities that do not fall into any other category. This includes bone penetrating images, fractures, subcutaneous emphysema, etc.","0042e387":"* Let's look at the distribution of Rad-IDs.\n* R10, R9 and R8 are prominently high.","5dd89492":"# Modeling","69678675":"# Pleural thickening","5dd7205f":"# Config File","07773898":"* The pleura is the membrane that covers the lungs, and the change in the thickness of the pleura is called pleural thickening.\n* It is often seen in the uppermost part of the lung field (the apex of the lung).","bbae5176":"# Useful Functions","05ce8fef":"# Work in progress\u2026","b7911171":"Shape Analysis","56e51151":"* The infiltration of some fluid component into the alveoli causes an infiltrative shadow (Infiltration).\n* It is difficult to distinguish from consolidation and, in some cases, impossible to distinguish. Please see [this link](https:\/\/allnurses.com\/consolidation-vs-infiltrate-vs-opacity-t483538\/) for more information.","afa0c6fc":"# Pleural effusion","0a2cd3bb":"# Other lesion","a161bc11":"# Cardiomegaly","e15ca912":"* Now let's look at the gender distribution","08df7d69":"# ILD  "}}