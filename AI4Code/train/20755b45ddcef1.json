{"cell_type":{"aad4c150":"code","be43ca62":"code","958a17ea":"code","69ba579f":"code","d7409bfa":"code","bf865dda":"code","175ecca1":"code","2c524e1a":"code","dfd0280f":"code","f10f6ad3":"code","ece5e9b7":"code","3d9462bf":"code","d027b906":"code","d06bccfb":"code","82bbebcc":"code","1c5556c3":"code","7ebb03cd":"code","abe143b5":"code","e724ea43":"code","b6d9325a":"code","3ef4386b":"code","d5a6610c":"code","cbfeda08":"code","23084124":"code","56a86036":"code","6a306554":"code","4458ebc6":"code","040d14af":"code","339fb76f":"code","d86991be":"code","f79171d0":"code","91d6aa13":"code","e66af710":"code","609b42af":"code","922d96ee":"code","386031e5":"code","50fdfb9f":"code","053cef47":"code","cbd74659":"code","92c6d83a":"code","1cbaae08":"code","a8ae8603":"code","bc222991":"code","0d4f9bfb":"code","6ab129a5":"code","d5bba926":"code","2122d417":"code","6c6a39ca":"code","98d6e8a6":"code","a92774c2":"code","a0f84a06":"code","806956cc":"code","52a268a6":"code","13a8ea4d":"code","14823362":"code","17c9dc72":"code","60c513df":"code","9a7b1190":"code","8085ff81":"code","c8f9f50a":"code","fbf684b4":"code","47c3384b":"code","448e9729":"code","68fd5885":"markdown","67eaae00":"markdown","0f49ea0e":"markdown","4f5dfe46":"markdown","d38ce7c4":"markdown","6ace9d22":"markdown","e41f968c":"markdown","5964a765":"markdown","3be452a5":"markdown","deb9f25b":"markdown"},"source":{"aad4c150":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as st","be43ca62":"training_set=pd.read_csv('..\/input\/glass-quality-classification\/Glass_train.csv')\ntesting_set=pd.read_csv('..\/input\/glass-quality-classification\/Glass_Test.csv')","958a17ea":"training_set.head()","69ba579f":"training_set.shape","d7409bfa":"testing_set.head()","bf865dda":"testing_set.shape","175ecca1":"training_set['Data']='train'","2c524e1a":"testing_set['Data']='test'","dfd0280f":"testing_set['class']=np.nan","f10f6ad3":"combined=pd.concat([training_set,testing_set],sort=False,ignore_index=True)\ncombined","ece5e9b7":"combined['x_avg']=(combined['xmax']+combined['xmin'])\/2\ncombined['y_avg']=(combined['ymax']+combined['ymin'])\/2\ncombined.drop(['xmin','xmax','ymin','ymax','log_area'],axis=1,inplace=True)\ncombined","3d9462bf":"l=['max_luminosity',\n       'thickness', 'pixel_area', 'x_avg',\n       'y_avg']","d027b906":"for i in l:\n    sns.distplot(combined[i])\n    plt.show()","d06bccfb":"for i in l:\n    sns.boxplot(combined[i])\n    plt.show()","82bbebcc":"combined.skew()","1c5556c3":"for i in l:\n    combined[i]=list(st.boxcox(combined[i]+1)[0])\ncombined.skew()","7ebb03cd":"for i in l:\n    sns.boxplot(combined[i])\n    plt.show()","abe143b5":"sns.countplot(combined['class'])\ncombined['class'].value_counts()","e724ea43":"#Divide into test and train:\ntrain = combined.loc[combined['Data']==\"train\"]\ntest = combined.loc[combined['Data']==\"test\"]","b6d9325a":"train.shape","3ef4386b":"test.shape","d5a6610c":"train.drop('Data',axis=1,inplace=True)","cbfeda08":"test.drop('Data',axis=1,inplace=True)","23084124":"train.head()","56a86036":"test.head()","6a306554":"X=train.drop('class',axis=1)\ny=train['class']","4458ebc6":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\n#from sklearn.externals import joblib\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport lightgbm as lgb\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom tpot import TPOTClassifier\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","040d14af":"X_train,X_test,y_train,y_test=train_test_split(X,y, test_size=0.3, random_state=0)","339fb76f":"pipeline_lr=Pipeline([('scalar1',StandardScaler()),\n                     ('lr',LogisticRegression())])","d86991be":"pipeline_dt=Pipeline([('scaler2',StandardScaler()),\n                     ('dt',DecisionTreeClassifier())])","f79171d0":"pipeline_rf=Pipeline([('scalar3',StandardScaler()),\n                     ('rfc',RandomForestClassifier())])","91d6aa13":"pipeline_knn=Pipeline([('scalar4',StandardScaler()),\n                     ('knn',KNN())])","e66af710":"pipeline_xgbc=Pipeline([('scalar5',StandardScaler()),\n                     ('xgboost',XGBClassifier())])","609b42af":"pipeline_lgbc=Pipeline([('scalar6',StandardScaler()),\n                     ('lgbc',lgb.LGBMClassifier())])","922d96ee":"pipeline_ada=Pipeline([('scalar7',StandardScaler()),\n                     ('adaboost',AdaBoostClassifier())])","386031e5":"pipeline_sgdc=Pipeline([('scalar8',StandardScaler()),\n                     ('sgradient',SGDClassifier())])","50fdfb9f":"pipeline_nb=Pipeline([('scalar9',StandardScaler()),\n                     ('nb',GaussianNB())])","053cef47":"pipeline_extratree=Pipeline([('scalar10',StandardScaler()),\n                     ('extratree',ExtraTreesClassifier())])","cbd74659":"pipeline_svc=Pipeline([('scalar11',StandardScaler()),\n                     ('svc',SVC())])","92c6d83a":"pipeline_gbc=Pipeline([('scalar12',StandardScaler()),\n                     ('GBC',GradientBoostingClassifier())])","1cbaae08":"# Lets make the list of pipelines","a8ae8603":"pipelines=[pipeline_lr,pipeline_dt,pipeline_rf,pipeline_knn,pipeline_xgbc,pipeline_lgbc,pipeline_ada,pipeline_sgdc,pipeline_nb,pipeline_extratree,pipeline_svc,pipeline_gbc]","bc222991":"best_accuracy=0.0\nbest_classifier=0\nbest_pipeline=\"\"","0d4f9bfb":"pipe_dict={0:'Logistic Regression',1:'Decision Tree',2:'Random Forest',3:'KNN',4:'XGBC',5:'LGBC',6:'ADA',7:'SGDC',8:'NB',9:'ExtraTree',10:'SVC',11:'GBC'}","6ab129a5":"smote = SMOTE('minority')","d5bba926":"X_sm, y_sm = smote.fit_sample(X_train,y_train)\nprint(X_sm.shape, y_sm.shape)","2122d417":"for i in pipelines:\n    i.fit(X_sm,y_sm)\n    predictions=i.predict(X_test)\n    print('Classification Report : \\n',(classification_report(y_test,predictions)))","6c6a39ca":"for i,model in enumerate(pipelines):\n    print('{} Test Accuracy {}'.format(pipe_dict[i],model.score(X_test,y_test)))","98d6e8a6":"for i,model in enumerate(pipelines):\n    if model.score(X_test,y_test)>best_accuracy:\n        best_accuracy=model.score(X_test,y_test)\n        best_classifier=i\n        best_pipeline=model\nprint(\"Classifier with best accuracy:{}\".format(pipe_dict[best_classifier]))","a92774c2":"# Create a pipeline\npipe = Pipeline([(\"classifier\", RandomForestClassifier())])\n# Create dictionary with candidate learning algorithms and their hyperparameters\nr_param = [{\"classifier\": [LogisticRegression()],\n            \"classifier__penalty\": ['l2','l1'],\n            \"classifier__C\": np.logspace(0, 4, 10)},\n           \n           {\"classifier\": [LogisticRegression()],\n           \"classifier__penalty\": ['l2'],\n           \"classifier__C\": np.logspace(0, 4, 10),\n           \"classifier__solver\":['newton-cg','saga','sag','liblinear']},\n           \n          {\"classifier\": [DecisionTreeClassifier()],\n           \"classifier__criterion\":['gini','entropy'],\n           \"classifier__max_depth\":[5,8,15,25,30,None],\n           \"classifier__min_samples_leaf\":[1,2,5,10,15,100],\n           \"classifier__max_leaf_nodes\": [2, 5,10]},\n     \n          {\"classifier\": [RandomForestClassifier()],\n           \"classifier__n_estimators\": [10, 100, 1000],\n           \"classifier__max_depth\":[5,8,15,25,30,None], \n           \"classifier__min_samples_leaf\":[1,2,5,10,15,100],\n           \"classifier__max_leaf_nodes\": [2, 5,10]},\n      \n           {'classifier':[lgb.LGBMClassifier()],\n            'classifier__n_estimators':np.arange(50,250,5),\n            'classifier__max_depth':np.arange(2,15,5),\n            'classifier__num_leaves':np.arange(2,60,5)},\n           \n           {'classifier':[XGBClassifier()],\n            \"classifier__learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n            \"classifier__max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n            \"classifier__min_child_weight\" : [ 1, 3, 5, 7 ],\n            \"classifier__gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n            \"classifier__colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]},\n           \n           {'classifier':[AdaBoostClassifier()],        \n           \"classifier__n_estimators\": sp_randint(50,250), \n            'classifier__learning_rate': [(0.97 + x \/ 100) for x in range(0, 8)],\n            'classifier__algorithm': ['SAMME', 'SAMME.R']},\n           \n           {'classifier':[KNN()],\n            \"classifier__weights\":['uniform','distance'],\n            'classifier__n_neighbors':np.arange(1,40),\n            'classifier__leaf_size':np.arange(2,40)},\n           \n           {'classifier':[SVC()],                      \n           'classifier__gamma':np.logspace(-4,2,10000),\n           'classifier__C':np.logspace(-2,2,10000)},\n           \n           {\"classifier\":[GradientBoostingClassifier()],\n            \"classifier__learning_rate\":np.arange(0.05,0.5,0.01),\n            \"classifier__n_estimators\":np.arange(50,250,5),\n            'classifier__max_depth':np.arange(4,15,5),\n            \"classifier__min_samples_leaf\":[1,2,5,10,15,100],\n            \"classifier__max_leaf_nodes\": [2, 5,10]}\n           \n          ]","a0f84a06":"rsearch = RandomizedSearchCV(pipe, r_param, cv=5, verbose=0,n_jobs=-1,random_state=0)","806956cc":"best_model_r = rsearch.fit(X_sm,y_sm)","52a268a6":"print(best_model_r.best_estimator_)\nprint(\"The mean accuracy of the model is through randomized search is :\",best_model_r.score(X_test,y_test))","13a8ea4d":"Final_model=GradientBoostingClassifier(learning_rate=0.24000000000000005,\n                                            max_depth=9, max_leaf_nodes=10,\n                                            min_samples_leaf=15,\n                                            n_estimators=165)","14823362":"model=Final_model.fit(X_sm,y_sm)\nmodel","17c9dc72":"model.score(X_test,y_test)","60c513df":"test.drop('class',axis=1,inplace=True)","9a7b1190":"test.head()","8085ff81":"predictions=model.predict(test)","c8f9f50a":"predictions","fbf684b4":"predictions.shape","47c3384b":"predictions_prob=model.predict_proba(test)\nSubmission = pd.DataFrame(predictions_prob)","448e9729":"Submission.to_csv('Submission_glass.csv',index=False)","68fd5885":"### Hyperparameter Tuning using RandomizedSearchCV","67eaae00":"## Problem Statement:","0f49ea0e":"## Splitting train dataset into X and y:","4f5dfe46":"## Reading train and test files:","d38ce7c4":"## Checking distribution of numerical features:","6ace9d22":"## Checking whether the target variable is balanced or not :","e41f968c":"Given below are distinguishing factors that can provide insight into what grade of the glass is being produced. Your objective as a data scientist is to build a machine learning model that can predict the grade of glass based on the given factors.","5964a765":"# Data Preprocessing using standard scaler\n# Reducing dimension using PCA\n# Apply classifier","3be452a5":"## Importing necessary libraries:","deb9f25b":"## Checking outliers of numerical features:"}}