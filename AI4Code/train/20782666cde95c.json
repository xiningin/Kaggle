{"cell_type":{"739ff25e":"code","c7a8e9ed":"code","a914b631":"code","e3d87e33":"code","9a103e16":"code","07277333":"code","10ba0241":"code","9e7db590":"code","325af902":"code","0491bcd3":"code","a344449c":"code","91c185b6":"code","b0d8cfd6":"code","4670f18c":"code","2803e6b1":"code","7959712e":"markdown","a6a0a4eb":"markdown","de84b394":"markdown","3a8d70b4":"markdown","90f02c52":"markdown","9cffaad0":"markdown","d0052712":"markdown","1708719c":"markdown","c2ed3259":"markdown","98969dce":"markdown","3e6d7648":"markdown","93b4ec7a":"markdown","52481623":"markdown","a61c8f76":"markdown","128e31d4":"markdown"},"source":{"739ff25e":"from fastai.vision import *\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\n\n%matplotlib inline","c7a8e9ed":"folder_path = Path('..\/input\/5-celebrity-faces-dataset\/train\/madonna')","a914b631":"image_path = get_image_files(folder_path)[0]\n\nimage_path","e3d87e33":"image = cv2.imread(str(image_path))\n\nimage.shape","9a103e16":"h, w = image.shape[:2]","07277333":"plt.figure(figsize=(w\/30, h\/30))\nplt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))","10ba0241":"arch = '..\/input\/caffe-face-detector-opencv-pretrained-model\/architecture.txt'\nweights = '..\/input\/caffe-face-detector-opencv-pretrained-model\/weights.caffemodel'","9e7db590":"neural_net = cv2.dnn.readNetFromCaffe(arch, weights)","325af902":"blob = cv2.dnn.blobFromImage(\n    image=cv2.resize(image, (299, 299)), # Resize the image to 299px by 299px.\n    scalefactor=1.0, # Set the scaling factor.\n    size=(299, 299), # Specify the spatial size of the image.\n    mean=(103.93, 116.77, 123.68) # Normalize by subtracting the per-channel means of ImageNet images (which were used to train the pre-trained model).\n)","0491bcd3":"neural_net.setInput(blob)\ndetections = neural_net.forward()","a344449c":"type(detections)","91c185b6":"detections.shape","b0d8cfd6":"threshold = 0.5","4670f18c":"for i in range(0, detections.shape[2]):\n    confidence = detections[0, 0, i, 2]\n    if confidence > threshold:\n        box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])\n        startX, startY, endX, endY = box.astype('int')\n        text = '{:.2f}%'.format(confidence * 100)\n        textY = startY - 10 if startY - 10 > 10 else startY + 10 # Ensure that the text won't go off-image.\n        cv2.rectangle(\n            img=image, \n            pt1=(startX, startY), # Vertex of the rectangle.\n            pt2=(endX, endY), # Vertex of the rectangle opposite to `pt1`.\n            color=(255, 0, 0),\n            thickness=2\n        )\n        cv2.putText(\n            img=image, \n            text=text, \n            org=(startX, textY), # Bottom-left corner of the text string.\n            fontFace=cv2.FONT_HERSHEY_SIMPLEX, \n            fontScale=0.5, \n            color=(255, 0, 0),\n            thickness=2\n        )","2803e6b1":"plt.figure(figsize=(w\/30, h\/30))\nplt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))","7959712e":"Let's create the neural network.","a6a0a4eb":"Before we can feed the image to the neural network, we need to pre-process it, and turn it into a *blob*. Let's do this.","de84b394":"**Note:** You can adjust the value of `threshold` to tweak (i) the false positive rate and (ii) the false negative rate for your dataset.\n\nLet's put (i) a bounding box and (ii) the confidence of prediction on each detected face.","3a8d70b4":"`detections` is a rank 4 `ndarray`.","90f02c52":"Let's pick up any one image from the folder.","9cffaad0":"Credit: <a href=\"https:\/\/www.pyimagesearch.com\/2018\/02\/26\/face-detection-with-opencv-and-deep-learning\/\" target=\"_blank\">PyImageSearch.com<\/a>\n\nIt is well known that OpenCV contains pre-trained Haar cascade classifiers for face detection. However, not many people are aware of OpenCV's pre-trained deep learning face detector (which has been part of OpenCV since version 3.3).\n\nThis Caffe based pre-trained model is:\n\n- more accurate than the Haar cascade classifiers\n- somewhat hard to find in the OpenCV library\n\nFor convenient usage from Kaggle notebooks, I have uploaded the pre-trained model as a Kaggle dataset: <a href=\"https:\/\/www.kaggle.com\/sambitmukherjee\/caffe-face-detector-opencv-pretrained-model\" target=\"_blank\">Caffe Face Detector (OpenCV Pre-trained Model)<\/a>.\n\nThis notebook demonstrates how to use this pre-trained model.\n\nModule imports and other preliminaries:","d0052712":"Now, let's take a look at the image.","1708719c":"We shall use a sample image from the <a href=\"https:\/\/www.kaggle.com\/dansbecker\/5-celebrity-faces-dataset\" target=\"_blank\">5 Celebrity Faces Dataset<\/a>.\n\nLet's set the path to the `'train\/madonna'` folder.","c2ed3259":"Let's read in the image and examine its shape.","98969dce":"Let's extract its height and width.","3e6d7648":"Let's define our confidence threshold.","93b4ec7a":"Let's examine the `detections` variable.","52481623":"Finally, let's take a look at the image along with the bounding box and the confidence.","a61c8f76":"Now, let's get our predictions.","128e31d4":"Next, let's read in the model architecture and weights."}}