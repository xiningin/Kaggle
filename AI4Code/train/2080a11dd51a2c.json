{"cell_type":{"feb539ef":"code","de0a88cc":"code","e5d88929":"code","ca852302":"code","6a590bb4":"code","6d6a4cea":"code","0dbd4250":"code","794cd012":"code","1960f42b":"code","216ef622":"code","cfd7de12":"code","6d4a10a4":"markdown","e95bd5a3":"markdown","00a00910":"markdown","e872f7b0":"markdown"},"source":{"feb539ef":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport xgboost as xgb\n\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","de0a88cc":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv',index_col=0)\ntest  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv', index_col=0)\nsample = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","e5d88929":"# rewritten calculation of lag features from this notebook: https:\/\/www.kaggle.com\/patrick0302\/add-lag-u-in-as-new-feat\ntrain['last_value_u_in'] = train.groupby('breath_id')['u_in'].transform('last')\ntrain['u_in_lag'] = train['u_in'].shift(1)\ntrain['u_out_lag'] = train['u_out'].shift(1)\ntrain = train.fillna(0)\n\n# max value of u_in and u_out for each breath\ntrain['breath_id__u_in__max'] = train.groupby(['breath_id'])['u_in'].transform('max')\ntrain['breath_id__u_out__max'] = train.groupby(['breath_id'])['u_out'].transform('max')\n\n# difference between consequitive values\n# IMPORTANT: need to rewrite it so that it is calculated only within separate breaths\ntrain['u_in_diff'] = train['u_in'] - train['u_in_lag']\ntrain['u_out_diff'] = train['u_out'] - train['u_out_lag']\n\n# difference between the current value of u_in and the max value within the breath\ntrain['breath_id__u_in__diffmax'] = train.groupby(['breath_id'])['u_in'].transform('max') - train['u_in']\ntrain['breath_id__u_in__diffmean'] = train.groupby(['breath_id'])['u_in'].transform('mean') - train['u_in']\n\n# OHE\ntrain = train.merge(pd.get_dummies(train['R'], prefix='R'), left_index=True, right_index=True).drop(['R'], axis=1)\ntrain = train.merge(pd.get_dummies(train['C'], prefix='C'), left_index=True, right_index=True).drop(['C'], axis=1)\n\n# https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273974\ntrain['u_in_cumsum'] = train.groupby(['breath_id'])['u_in'].cumsum()","ca852302":"# all the same for the test data\ntest['last_value_u_in'] = test.groupby('breath_id')['u_in'].transform('last')\ntest['u_in_lag'] = test['u_in'].shift(1)\ntest['u_out_lag'] = test['u_out'].shift(1)\ntest = test.fillna(0)\n\ntest['breath_id__u_in__max'] = test.groupby(['breath_id'])['u_in'].transform('max')\ntest['breath_id__u_out__max'] = test.groupby(['breath_id'])['u_out'].transform('max')\n\ntest['u_in_diff'] = test['u_in'] - test['u_in_lag']\ntest['u_out_diff'] = test['u_out'] - test['u_out_lag']\n\ntest['breath_id__u_in__diffmax'] = test.groupby(['breath_id'])['u_in'].transform('max') - test['u_in']\ntest['breath_id__u_in__diffmean'] = test.groupby(['breath_id'])['u_in'].transform('mean') - test['u_in']\n\ntest = test.merge(pd.get_dummies(test['R'], prefix='R'), left_index=True, right_index=True).drop(['R'], axis=1)\ntest = test.merge(pd.get_dummies(test['C'], prefix='C'), left_index=True, right_index=True).drop(['C'], axis=1)\n\ntest['u_in_cumsum'] = test.groupby(['breath_id'])['u_in'].cumsum()","6a590bb4":"scores = []\nfeature_importance = pd.DataFrame()\nmodels = []\ncolumns = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = train[columns]\ny = train['pressure']","6d6a4cea":"param = {'lambda': 0.026484677457314282,\n         'alpha': 0.014849938251506533,\n         'colsample_bytree': 1.0,\n         'subsample': 0.6,\n         'learning_rate': 0.012,\n         'max_depth': 17,\n         'random_state': 24,\n         'min_child_weight': 28,\n         'tree_method':'gpu_hist'}","0dbd4250":"from sklearn.model_selection import GroupKFold\nimport os\nimport time\nfrom sklearn import metrics\n","794cd012":"folds = GroupKFold(n_splits=5)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, y, groups=train['breath_id'])):\n    print(f'Fold {fold_n} started at {time.ctime()}')\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    model = xgb.XGBRegressor(**param, n_estimators=5000)\n    model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_valid, y_valid)],\n            verbose=1000, early_stopping_rounds=100)\n    score = metrics.mean_absolute_error(y_valid, model.predict(X_valid))    \n    models.append(model)\n    scores.append(score)\n\n    fold_importance = pd.DataFrame()\n    fold_importance[\"feature\"] = columns\n    fold_importance[\"importance\"] = model.feature_importances_\n    fold_importance[\"fold\"] = fold_n + 1\n    feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n    \nprint('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))","1960f42b":"for model in models:\n    sample['pressure'] += model.predict(test[columns])\nsample['pressure'] \/= 5","216ef622":"feature_importance[\"importance\"] \/= 5\ncols = feature_importance[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(\n    by=\"importance\", ascending=False)[:50].index\n\nbest_features = feature_importance.loc[feature_importance.feature.isin(cols)]\n\nplt.figure(figsize=(16, 12));\nsns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False));\nplt.title('XGB Features (avg over folds)');","cfd7de12":"sample.to_csv('XGBregressor.csv', index=False)","6d4a10a4":"## DATA LOADING AND LIBRARIES ","e95bd5a3":"# MODEL DEPLOYED WITH GROUPKFOLD","00a00910":"# TRAIN TEST SPLIT","e872f7b0":"# FEATURE ENGINNERING \n\nIDEA FROM  - https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models"}}