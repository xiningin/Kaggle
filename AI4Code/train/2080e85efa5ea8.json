{"cell_type":{"9077a40c":"code","94bd058e":"code","5a4fdb8e":"code","927e8d34":"code","15cbedc9":"code","f427165d":"code","84e94b5e":"code","b330f077":"code","220969ce":"code","67586a56":"code","fac23cb9":"code","a6939add":"code","04cdef85":"code","cb33ffbe":"code","a1d290f1":"code","bf38a2fd":"code","6ff3817d":"code","8416eaa9":"code","d114a8c8":"code","5f8cdc52":"code","d8acd55d":"code","07e95c23":"code","e9fd433f":"code","a7f367fb":"code","ccb765c6":"code","9d44362c":"code","a28b5142":"code","714366a6":"code","005dfa3f":"code","104a1071":"markdown","73bd78b2":"markdown","3dd70d53":"markdown","ed67d722":"markdown","cb140f2e":"markdown","3c53f4f6":"markdown","8cbdfb20":"markdown","daf6e7c7":"markdown","daa8205a":"markdown","b34c29c9":"markdown","8d6cb242":"markdown","bd95ef79":"markdown","8bf19cb1":"markdown","654f46eb":"markdown","e92c70ee":"markdown","41a51710":"markdown","1600a824":"markdown","7d81c748":"markdown"},"source":{"9077a40c":"# Disable warnings in Anaconda\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport sklearn\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.metrics import accuracy_score, classification_report, roc_curve,precision_recall_curve, auc,confusion_matrix\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import SVC\n\nfrom xgboost import XGBClassifier","94bd058e":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","5a4fdb8e":"df.head()","927e8d34":"df.info()","15cbedc9":"df.isnull().sum()","f427165d":"def plot_hist(col, bins=30, title=\"\",xlabel=\"\",ax=None):\n    sns.distplot(col, bins=bins,ax=ax)\n    ax.set_title(f'Histogram of {title}',fontsize=20)\n    ax.set_xlabel(xlabel)","84e94b5e":"fig, axes = plt.subplots(3,2,figsize=(20,20),constrained_layout=True)\nplot_hist(df.creatinine_phosphokinase,\n          title='Creatinine Phosphokinase',\n          xlabel=\"Level of the CPK (mcg\/L)\",\n          ax=axes[0,0])\nplot_hist(df.platelets,\n          bins=30,\n          title='Platelets',\n          xlabel='Platelets in the blood (kiloplatelets\/mL)',\n          ax=axes[0,1])\nplot_hist(df.serum_creatinine,\n          title='Serum Creatinine', \n          xlabel='Level of serum creatinine in the blood (mg\/dL)',\n          ax=axes[1,0])\nplot_hist(df.serum_sodium,\n          bins=30,\n          title='Serum Sodium',\n          xlabel='Level of serum sodium in the blood (mEq\/L)',\n          ax=axes[1,1])\nplot_hist(df.ejection_fraction,\n          title='Ejection Fraction', \n          xlabel='Percentage of blood leaving the heart at each contraction (percentage)',\n          ax=axes[2,0])\nplot_hist(df.time,\n          bins=30,\n          title='Time',\n          xlabel='Follow-up period (days)',\n          ax=axes[2,1])\nplt.show()","b330f077":"fig = px.histogram(df, x=\"age\",color=\"DEATH_EVENT\")\nfig.show()","220969ce":"len_data = len(df)\nlen_w = len(df[df[\"sex\"]==0])\nlen_m = len_data - len_w\n\nmen_died = len(df.loc[(df[\"DEATH_EVENT\"]==1) &(df['sex']==0)])\nmen_survived = len_m - men_died\n\nwomen_died = len(df.loc[(df[\"DEATH_EVENT\"]==1) & (df['sex']==1)])\nwomen_survived = len_w - women_died\n\nlabels = ['Men died','Men survived','Women died','Women survived']\nvalues = [men_died, men_survived, women_died, women_survived]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,textinfo='label+percent',hole=0.4)])\nfig.update_layout(\n    title_text=\"Distribution of DEATH EVENT according to their gender\")\nfig.show()","67586a56":"fig = px.pie(df, values='sex', names='DEATH_EVENT',color_discrete_sequence=px.colors.sequential.RdBu\n            ,title='Proportional of death event based on sex')\nfig.show()","fac23cb9":"fg=sns.FacetGrid(df, hue=\"DEATH_EVENT\", height=6,)\nfg.map(sns.kdeplot, \"age\",shade=True).add_legend(labels=[\"Alive\",\"Not alive\"])\nplt.title('Age Distribution Plot');\nplt.show()","a6939add":"g = sns.lmplot(x=\"age\", y=\"DEATH_EVENT\", col=\"sex\", hue=\"sex\", data=df, y_jitter=.02, logistic=True, truncate=False)\ng.set(xlim=(0, 80), ylim=(-.05, 1.05));","04cdef85":"sns.heatmap(df.corr(),cmap=\"Blues\");","cb33ffbe":"data = df.copy()\ndata.loc[data.DEATH_EVENT == 0, 'DEATH_EVENT'] = \"Alive\"\ndata.loc[data.DEATH_EVENT == 1, 'DEATH_EVENT'] = \"Not Alive\"\nsns.pairplot(data=data[['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium','time','DEATH_EVENT']], hue='DEATH_EVENT');","a1d290f1":"pd.crosstab(df.diabetes ,df.DEATH_EVENT).plot(kind='bar')\nplt.legend(title='DEATH_EVENT', loc='upper right', labels=['No death event', 'Death event'])\nplt.title('Death Event as per diabetes ')\nplt.xlabel('diabetes ')\nplt.ylabel('# Death')\nplt.show()","bf38a2fd":"pd.crosstab(df.high_blood_pressure ,df.DEATH_EVENT).plot(kind='bar')\nplt.legend(title='DEATH_EVENT', loc='upper right', labels=['Not alive', 'Alive'])\nplt.title('Death Event as per High pressure blood ')\nplt.xlabel('High pressure blood ')\nplt.ylabel('# Death')\nplt.show()","6ff3817d":"pd.crosstab(df.smoking ,df.DEATH_EVENT).plot(kind='bar')\nplt.legend(title='DEATH_EVENT', loc='upper right', labels=['Not alive', 'Alive'])\nplt.title('Death Event as per smokers ')\nplt.xlabel('Smokers ')\nplt.ylabel('# Death')\nplt.show()","8416eaa9":"pd.crosstab(df.diabetes ,df.DEATH_EVENT).plot(kind='bar')\nplt.legend(title='DEATH_EVENT', loc='upper right', labels=['Not alive', 'Alive'])\nplt.title('Death Event as per diabetes ')\nplt.xlabel('diabetes ')\nplt.ylabel('Death')\nplt.show()","d114a8c8":"len_data = len(df)\nlen_w = len(df[df[\"sex\"]==0])\nlen_m = len_data - len_w\n\nmen_with_diabetes = len(df.loc[(df[\"diabetes\"]==1) & (df['sex']==0)])\nmen_without_diabetes = len_m - men_with_diabetes\n\nwomen_with_diabetes = len(df.loc[(df[\"diabetes\"]==1) & (df['sex']==1)])\nwomen_without_diabetes = len_w - women_with_diabetes\n#print(men_with_diabetes,men_without_diabetes) \n#print(women_with_diabetes,women_without_diabetes)\n\nlabels = ['M_diabetes','M_no_diabete','W_diabete','W_no_diabete']\nvalues = [men_with_diabetes, men_without_diabetes, women_with_diabetes, women_without_diabetes]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,textinfo='label+percent',hole=0.4)])\nfig.update_layout(\n    title_text=\"Distribution of No\/diabetics according to their gender. (M for Men, W for Women)\")\nfig.show()","5f8cdc52":"fig = px.parallel_categories(df[[\"sex\",\"smoking\",\"diabetes\",\"anaemia\",\"high_blood_pressure\",\"time\",\"DEATH_EVENT\"]], color='DEATH_EVENT', color_continuous_scale=px.colors.sequential.Inferno)\nfig.show()","d8acd55d":"fig = px.box(df, x=\"DEATH_EVENT\", y=\"age\", color=\"smoking\", notched=True)\nfig.show()","07e95c23":"x = df.copy()\ny = x.loc[:,[\"DEATH_EVENT\"]]\nx = x.drop(columns=['time','DEATH_EVENT'])\nfeatures_names = x.columns","e9fd433f":"from sklearn.datasets import make_classification\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.decomposition import PCA","a7f367fb":"forest = ExtraTreesClassifier(n_estimators=250,\n                              random_state=0)\n\nforest.fit(x, y)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(x.shape[1]):\n    print(\"%d. feature %d (%f)\" % (f + 1, indices[f], importances[indices[f]]))\n\n# Plot the impurity-based feature importances of the forest\nplt.figure()\nplt.title(\"Feature importances\")\nsns.barplot(x=features_names[indices].to_numpy(), y=importances[indices], palette=\"deep\",yerr=std[indices])\nplt.xticks(range(x.shape[1]), features_names[indices].to_numpy(),rotation=80)\nplt.xlim([-1, x.shape[1]])\nplt.show()","ccb765c6":"features = features_names[indices].to_numpy()[0:6]\n\nfig = px.scatter_matrix(\n    df,\n    dimensions=features,\n    color=\"DEATH_EVENT\"\n)\nfig.update_traces(diagonal_visible=False)\n\nfig.update_layout(\n    title='Correlation map on best first 5 features',\n    dragmode='select',\n    width=1200,\n    height=1200,\n    #hovermode='closest',\n)\nfig.show()","9d44362c":"def plot_cm(cm,title):\n    z = cm\n    x = ['No death Event', 'Death Event']\n    y = x\n    # change each element of z to type string for annotations\n    z_text = [[str(y) for y in x] for x in z]\n\n    # set up figure \n    fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='deep')\n\n    # add title\n    fig.update_layout(title_text='<i><b>Confusion matrix {}<\/b><\/i>'.format(title),\n                      #xaxis = dict(title='x'),\n                      #yaxis = dict(title='x')\n                     )\n\n    # add custom xaxis title\n    fig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                            x=0.5,\n                            y=-0.10,\n                            showarrow=False,\n                            text=\"Predicted value\",\n                            xref=\"paper\",\n                            yref=\"paper\"))\n\n    # add custom yaxis title\n    fig.add_annotation(dict(font=dict(color=\"black\",size=14),\n                            x=-0.15,\n                            y=0.5,\n                            showarrow=False,\n                            text=\"Real value\",\n                            textangle=-90,\n                            xref=\"paper\",\n                            yref=\"paper\"))\n\n    # adjust margins to make room for yaxis title\n    fig.update_layout(margin=dict(t=50, l=20),width=750,height=750)\n    \n\n\n    # add colorbar\n    fig['data'][0]['showscale'] = True\n    fig.show()","a28b5142":"x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=23)","714366a6":"from catboost import CatBoostClassifier\nmodels= [['Logistic Regression ',LogisticRegression()],\n        ['KNearest Neighbor ',KNeighborsClassifier()],\n        ['Decision Tree Classifier ',DecisionTreeClassifier()],\n        ['Random Forest Classifier ',RandomForestClassifier()],\n        ['Ada Boost ',AdaBoostClassifier()],\n        ['SVM ',SVC()],\n        ['XG Boost',XGBClassifier()],\n        ['Cat Boost',CatBoostClassifier(logging_level='Silent')]]\n\nmodels_score = []\nfor name,model in models:\n    \n    model = model\n    model.fit(x_train,y_train)\n    model_pred = model.predict(x_test)\n    cm_model = confusion_matrix(y_test, model_pred)\n    models_score.append(accuracy_score(y_test,model.predict(x_test)))\n    \n    print(name)\n    print('Validation Acuuracy: ',accuracy_score(y_test,model.predict(x_test)))\n    print('Training Accuracy: ',accuracy_score(y_train,model.predict(x_train)))\n    print('############################################')\n    plot_cm(cm_model,title=name+\"model\")\n    fpr, tpr, thresholds = roc_curve(y_test, model_pred)\n\n    fig = px.area(\n        x=fpr, y=tpr,\n        title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',\n        labels=dict(x='False Positive Rate', y='True Positive Rate'),\n        width=700, height=500\n    )\n    fig.add_shape(\n        type='line', line=dict(dash='dash'),\n        x0=0, x1=1, y0=0, y1=1\n    )\n\n    fig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\n    fig.update_xaxes(constrain='domain')\n    fig.show()\n    \n    \n\n","005dfa3f":"models_names = [\n    'Logistic Regression',\n'KNearest Neighbor',\n'Decision Tree Classifier',\n'Random Forest Classifier',\n'Ada Boost',\n'SVM',\n'XG Boost',\n'Cat Boost']\n\nplt.rcParams['figure.figsize']=20,8\nsns.set_style('darkgrid')\nax = sns.barplot(x=models_names, y=models_score, palette = \"inferno\", saturation =2.0)\nplt.xlabel('Classifier Models', fontsize = 20 )\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.title('Accuracy of different Classifier Models on test set', fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 12)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()\n","104a1071":"No missing values.","73bd78b2":"*Observations*\n*  The distrubution of the age of male\/female with no death event is almost the same \n*  The distribution of the age of male\/femele with death event not the same","3dd70d53":"*Observations*\n* From the two plots we can state that the older we get, higher the probability of having a death event \n* Men are more likely to face when they age than women ","ed67d722":"# Load data and first look","cb140f2e":"## If this notebook helped you to understand both health failure (HF) and ML technics to detect HF or just liked my work please considere upvoting this notebook :). It will keep me motivated and will encourage me to explore more on Kaggle! ","3c53f4f6":"# Modeling ","8cbdfb20":">Since the feature time do not have concret meaning we will not use it, even if the correlation map show that the time feature and the target are correlated.","daf6e7c7":"# Feature selection","daa8205a":"Will use the following algorithm in order to predict the death event:\n* Logistic Regression\n* KNearest Neighbor\n* Decision Tree Classifier\n* Random Forest Classifier\n* Ada Boost\n* SVM\n* XG Boost\n* Cat Boost\n","b34c29c9":"<h2 class=\"list-group-item list-group-item-action active\">Lets invesgate how are the features related to heart failure<\/h2>\n","8d6cb242":"From the datafame info we observe that our columns are all numerical and do not have missing values which will make our work easier","bd95ef79":"# Data analysis","8bf19cb1":"# Introduction\n![](https:\/\/www.clearlake-specialties.com\/wp-content\/uploads\/SystolicDiastolic_Heartfailure.5518685646fab-e1553788922847.png)\n\n \n\nHeart failure is a **progressive condition** in which the heart\u2019s muscle  gets injured from something like a **heart** attack or high blood pressure and **gradually loses its ability to pump enough blood to supply the body\u2019s needs**. The heart can be affected in two ways, either become weak and unable to pump blood (we call this situation systolic heart failure) or it become stiff and unable to fill with blood adequately (we call this situation diastolic heart failure).\n\nUltimately, both conditions lead to retention of extra fluid or congestion. So when patients develop symptoms we call it congestive heart failure Heart failure is very common.  Although we have made progress in the treatment of many forms of heart disease, heart failure is a growing problem in the United States.  Current estimates are that nearly 6.5 million Americans over the age of 20 have heart failure. One major study estimates there are 960,000 new heart failure cases annually.  Not only is heart failure a major problem affecting many people, heart failure is also a major killer.  Heart failure directly accounts for about 8.5% of all heart disease deaths in the United States.  And, by some estimates heart failure actually contributes to about 36% of all cardiovascular disease deaths.\n\n### Motivation: \n * Try to understand what the cause of Heart failure.\n * Explore the data trough some EDA and data visualisazion.\n * Try to detect and extract relevant feature in order to build a prediction model. \n\n\n### The plan:\n\n- [Libraries](#Libraries)\n\n- [Load data and first look](#Load-data-and-first-look)\n\n- [Data Analysis](#Data-Analysis)\n\n- [Feature enginerring](#feature-enginerring)\n\n- [Modeling](#Modeling)\n","654f46eb":"# Libraries","e92c70ee":"With this plot, we have the possible scenerios for a given patient according to their categorical values","41a51710":"<h2 class=\"list-group-item list-group-item-action active\">Distribution of numerical values<\/h2>\n\n- CPK blood tests the different forms of CPK in the bloodstream and the CPK normal range varies from a male to female. The CPK normal range for a male is between 39 \u2013 308 U\/L, while in females the CPK normal range is between 26 \u2013 192 U\/L,\n\n- The reference range for serum sodium is 135-147 mmol\/L,\n\n- Results of the creatinine blood test are measured in milligrams per deciliter or micromoles per liter. The normal range for creatinine in the blood may be 0.84 to 1.21 milligrams per deciliter (74.3 to 107 micromoles per liter), although this can vary from lab to lab, between men and women, and by age. Since the amount of creatinine in the blood increases with muscle mass, men usually have higher creatinine levels than do women.","1600a824":"<h2 class=\"list-group-item list-group-item-action active\">Correlation maps<\/h2>","7d81c748":"* Sex - Gender of patient Male = 1, Female =0\n* Age - Age of patient\n* Diabetes - 0 = No, 1 = Yes\n* Anaemia - 0 = No, 1 = Yes\n* High_blood_pressure - 0 = No, 1 = Yes\n* Smoking - 0 = No, 1 = Yes\n* DEATH_EVENT - 0 = No, 1 = Yes"}}