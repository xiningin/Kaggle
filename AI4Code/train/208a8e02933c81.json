{"cell_type":{"374db6b6":"code","0bacefe3":"code","afa329ec":"code","b0c0d246":"code","c3c48101":"code","7e567963":"code","5179f634":"code","3d664b5f":"code","d4463892":"code","f1f24667":"code","352a075f":"code","c8590272":"code","7a80bbe4":"code","6735367d":"code","a78fb35e":"code","bf26dd76":"code","2ba9b9bd":"markdown","2a48105c":"markdown","ea490fe9":"markdown","b94db1ea":"markdown","3bc28df4":"markdown","6c826621":"markdown","e9b36ff0":"markdown","93df2426":"markdown","3d5f5c0c":"markdown","0d00cddf":"markdown","3e930b60":"markdown","179bfde4":"markdown","7f8ac783":"markdown","f8519a89":"markdown","a2fa110a":"markdown","35dea586":"markdown","d0be7851":"markdown","37395dd6":"markdown","4cf198d2":"markdown"},"source":{"374db6b6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.gridspec as gridspec","0bacefe3":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv', header = [0])\nfeature = [feat for feat in list(df) if feat not in ['id','Unnamed: 32']]\ndf1 = df.filter(feature)","afa329ec":"print(\"Variable target - Diagnosis\")\nprint(\" \")\nprint(df1.diagnosis.value_counts())\nprint(\"\\nBenign cases represent {:.4f}% in dataset.\\n\".format((df1[df1.diagnosis == 'B'].shape[0] \/ df1.shape[0]) * 100))\nplt.figure(figsize=(10,8))\nsns.countplot('diagnosis',data=df1)\nplt.title(\"Variable target - Diagnosis\")\nplt.show()","b0c0d246":"df1.filter(['radius_mean','texture_mean','perimeter_mean','area_mean','smoothness_mean',\n            'compactness_mean','concavity_mean','concave points_mean','symmetry_mean','fractal_dimension_mean']).describe()","c3c48101":"df1.filter(['radius_se','texture_se','perimeter_se','area_se','smoothness_se',\n            'compactness_se','concavity_se','concave points_se','symmetry_se','fractal_dimension_se']).describe()","7e567963":"df1.filter(['radius_worst','texture_worst','perimeter_worst','area_worst','smoothness_worst',\n            'compactness_worst','concavity_worst','concave points_worst','symmetry_worst','fractal_dimension_worst']). describe()","5179f634":"v_features = df1.iloc[:,1:31].columns\nplt.figure(figsize=(12,31*8))\ngs = gridspec.GridSpec(31, 1)\nfor i, cn in enumerate(df1[v_features]):\n    ax = plt.subplot(gs[i])\n    sns.distplot(df1[cn][df1.diagnosis == 'B'], bins=50)\n    sns.distplot(df1[cn][df1.diagnosis == 'M'], bins=50)\n    ax.set_xlabel('')\n    ax.set_title('Histogram relation of variables with Target: ' + str(cn))\nplt.show()","3d664b5f":"sns.set(rc={'figure.figsize':(10,8)})\nsns.heatmap(df1.corr(method='spearman'),fmt = '.2f',cmap='Greens')\nplt.title('Correla\u00e7\u00e3o entre vari\u00e1veis')\nplt.show()","d4463892":"# Package decomposition PCA:\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n# Feature select:\nfeature = ['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean', 'compactness_mean',\n 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean', 'radius_se', 'texture_se',\n 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n 'fractal_dimension_se', 'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst', 'smoothness_worst',\n 'compactness_worst', 'concavity_worst', 'concave points_worst', 'symmetry_worst', 'fractal_dimension_worst']\nx = df1.filter(feature)\n\n# Pre-processing:\nx = StandardScaler().fit_transform(x)\n\n# Decomposition PCA:\npca = PCA(n_components=4)\nprincipalComponents = pca.fit_transform(x)\nvar_explicada = pca.explained_variance_ratio_\nvar_exp_df = pd.DataFrame({\"var_exp\":var_explicada})\nprint(\"The explained variance of the four components: \",(var_exp_df['var_exp'].sum().round(2))*100,\"%\")\n\n# Dataset PCA:\nprincipalDf = pd.DataFrame(data = principalComponents,columns = ['pc1', 'pc2', 'pc3', 'pc4'])\ndf_pca = pd.concat([principalDf, df1['diagnosis']], axis = 1)\nprint(\" \")\nprint(\"Dataset with the main components: \")\nprint(\" \")\nprint(df_pca.head(3))\nprint(\" \")\n\n# Graph PCA - PC1 e PC2:\nplt.figure(figsize=(10,8))\nsns.scatterplot(x=\"pc1\", y=\"pc2\", hue=\"diagnosis\", data=df_pca)\nplt.title(\"Principal Components PC1 and PC2\")\nplt.show()\n\n# Graph PCA - PC1 e PC3:\nplt.figure(figsize=(10,8))\nsns.scatterplot(x=\"pc1\", y=\"pc3\", hue=\"diagnosis\", data=df_pca)\nplt.title(\"Principal Components PC1 and PC3\")\nplt.show()\n\n# Graph PCA - PC1 e PC4:\nplt.figure(figsize=(10,8))\nsns.scatterplot(x=\"pc1\", y=\"pc4\", hue=\"diagnosis\", data=df_pca)\nplt.title(\"Principal Components PC1 and PC4\")\nplt.show()","f1f24667":"# Packages:\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import (confusion_matrix,auc,roc_curve,classification_report)\n\n# Data splitting:\nxtr, xval, ytr, yval = train_test_split(df_pca.drop('diagnosis',axis=1),df_pca['diagnosis'],test_size=0.2,random_state=1025)\n\n# Training model:\nbaseline = LogisticRegression()\nbaseline.fit(xtr,ytr)\n\n# Predict:\np = baseline.predict(xval)\n\n# Confusion matrix:\ncmx = confusion_matrix(yval, p)\nsns.set(rc={'figure.figsize':(10,8)})\nsns.set(font_scale=1.4)\nsns.heatmap(cmx,annot=True,annot_kws={\"size\": 14},cmap='Greens')\nplt.title(\"Confusion matrix\")\nplt.show()\n\n# Metrics:\nprint(\"Metrics: \")\nprint(classification_report(yval, p))","352a075f":"import h2o\nfrom h2o.automl import H2OAutoML\nh2o.init()","c8590272":"train, test = train_test_split(df1, test_size=0.2)\ntraindf = h2o.H2OFrame(train)\ntestdf = h2o.H2OFrame(test)\ny = \"diagnosis\"\nx = list(traindf.columns)\nx.remove(y)\ntraindf[y] = traindf[y].asfactor()\ntestdf[y] = testdf[y].asfactor()","7a80bbe4":"aml = H2OAutoML(max_models = 80, max_runtime_secs = 300, seed = 247)\naml.train(x = x, y = y, training_frame = traindf)\nprint(aml.leaderboard)","6735367d":"predict = aml.predict(testdf)\np = predict.as_data_frame()\nprint(\" \")\ndata = {'actual': test.diagnosis,'predict': p['predict'].tolist()}\ndf = pd.DataFrame(data, columns = ['actual','predict'])\ndf.head(5)","a78fb35e":"confusion_matrix = pd.crosstab(df['actual'], df['predict'], rownames=['Actual'], colnames=['Predicted'])\nsns.set(rc={'figure.figsize':(10,8)})\nsns.set(font_scale=1.4)\nsns.heatmap(confusion_matrix,annot=True,annot_kws={\"size\": 16},cmap='Greens')\nplt.title(\"Confusion matrix\")\nplt.show()\nprint(\"Metrics:\")\nprint(classification_report(df['actual'], df['predict']))","bf26dd76":"h2o.cluster().shutdown(prompt = False)","2ba9b9bd":"#### Test model:","2a48105c":"#### Data splitting:","ea490fe9":"## Breast Cancer Wisconsin (Diagnostic) Data Set\n---\n### Target:\n\nPredict breast cancer diagnosis with data from the state of Wisconsin - USA.\n\n### Predict whether the cancer is benign or malignant:\n\nResources are calculated from a scanned image of a fine needle aspirate (PAAF) of a breast mass. They describe characteristics of the cell nuclei present in the image.\n\n### Attribute information:\n\n1) ID number\n\n2) Diagnosis (M = malignant, B = benign)\n\n### Ten resources with real value are calculated for each cell nucleus:\n\na) radius (mean of distances from center to points on the perimeter)\n\nb) texture (standard deviation of gray-scale values)\n\nc) perimeter\n\nd) area\n\ne) smoothness (local variation in radius lengths)\n\nf) compactness (perimeter^2 \/ area - 1.0)\n\ng) concavity (severity of concave portions of the contour)\n\nh) concave points (number of concave portions of the contour)\n\ni) symmetry\n\nj) fractal dimension (\"coastline approximation\" - 1)\n\n### Preliminary information:\n\nThe mean, standard error and \"worst\" or largest (mean of the three\nlargest values) of these features were computed for each image,\nresulting in 30 features. For instance, field 3 is Mean Radius, field\n13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant\n\n---","b94db1ea":"* Statistics of the worst measures of the characteristics","3bc28df4":"### Inputs:\n___","6c826621":"#### Confusion matrix:","e9b36ff0":"### AutoML - H2O:\n---","93df2426":"#### Histogram relation of variables with Target:","3d5f5c0c":"#### Descriptive statistics:\n\n* Feature average statistics","0d00cddf":"### PCA modeling to reduce dimensionality:\n---","3e930b60":"### Exploratory data analysis:\n---","179bfde4":"* Feature Standard deviation statistics","7f8ac783":"### Package data analysis:\n---","f8519a89":"#### Variable target:","a2fa110a":"#### Start cluster h2o:","35dea586":"#### Shutdown h2o cluster:","d0be7851":"### Baseline - Logistic regression:\n---","37395dd6":"#### Correlation map:","4cf198d2":"#### AutoML H2O training:"}}