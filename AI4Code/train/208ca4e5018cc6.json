{"cell_type":{"687f91a1":"code","9c7dde62":"code","f337f2d7":"code","1c81bf8b":"code","0e87d649":"code","0eb55abd":"code","71b98198":"code","25fd5f21":"code","09cbc9ce":"code","41d6139a":"code","15ba51d1":"code","b504bbd2":"code","236b0daa":"code","99567f0b":"code","5ff0e18b":"code","541dac29":"code","4680bb59":"code","501e550e":"code","ab31eb64":"code","a34a17d0":"code","0bea063f":"code","6be26880":"code","fa73bcea":"code","f7c61e0b":"markdown","1152adc6":"markdown","423e7d10":"markdown","4a89269e":"markdown","e750275d":"markdown"},"source":{"687f91a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport io\nimport requests\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom datetime import timedelta  \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\ndata_atualizacao_brasil='2020-06-07'\ndata_atualizacao='2020-06-08'\n","9c7dde62":"df_brasil = pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")\n\ngovernadores_brasil = pd.read_csv(\"..\/input\/governadores2020\/GOVERNADORES.csv\", encoding = 'latin1', sep=';')\n\n#df_brasil[df_brasil.state=='Distrito Federal'].tail().style.background_gradient(cmap='summer')\n\n\nfp= df_brasil[['date', 'state', 'cases']].pivot_table(columns='date', index='state',values='cases').fillna(0)\n\nnovo_indice=df_brasil[(df_brasil['date']==data_atualizacao_brasil)][['cases', 'state']].sort_values(['cases'], \n                                                                                                    ascending=False)['state']\n\n#sns.heatmap(fp.reindex(novo_indice), cmap='coolwarm')\n#governadores_brasil\n\ndf_inner = pd.merge(df_brasil, governadores_brasil, left_on='state', right_on='Estado', how='inner')\n\ndf_brasil=df_inner.copy()\n","f337f2d7":"#df_brasil[df_brasil.state=='Distrito Federal'].tail().style.background_gradient(cmap='summer')\n\nposicao_diaria=df_brasil[df_brasil.date==data_atualizacao_brasil].sort_values(['cases'], ascending=False)\n\ntotal_casos=posicao_diaria.cases.sum()\ntotal_mortes=posicao_diaria.deaths.sum()\n\nposicao_diaria.style.background_gradient(cmap='summer')\n","1c81bf8b":"\nposicao_diaria['casos_acumulados(%)']=round(posicao_diaria.cases.cumsum()\/total_casos*100,2)\nposicao_diaria['mortes_acumuladas(%)']=round(posicao_diaria.deaths.cumsum()\/total_mortes*100,2)\nposicao_diaria['sequencial']=range(1,posicao_diaria.cases.size+1)\n\nposicao_diaria[['sequencial','date','state','cases','casos_acumulados(%)','deaths','mortes_acumuladas(%)']]","0e87d649":"fp= df_brasil[['date', 'state', 'cases']].pivot_table(columns='date', index='state',values='cases').fillna(0) \n#sns.heatmap(fp, cmap='coolwarm')\n\nfp.reindex(novo_indice)\n\n#fp= df_brasil[['date', 'state', 'suspects']].pivot_table(columns='date', index='state',values='suspects').fillna(0) \n#sns.heatmap(fp, cmap='coolwarm')","0eb55abd":"#https:\/\/plotly.com\/python\/line-and-scatter\/\nimport plotly.offline as py\nimport plotly.graph_objs as go\n\npy.init_notebook_mode(connected=True)\n\n\ntrace = go.Scatter(x = df_brasil['date'],\n                   y = df_brasil['cases'],\n                   mode = 'markers')\n# Armazenando gr\u00e1fico em uma lista\ndata = [trace]\n# Criando Layout\nlayout = go.Layout(title='Evolu\u00e7\u00e3o de casos no Brasil',\n                   yaxis={'title':'Nr de Casos Acumulados'},\n                   xaxis={'title': 'Data de Apura\u00e7\u00e3o'})\n# Criando figura que ser\u00e1 exibida\nfig = go.Figure(data=data, layout=layout)\n# Exibindo figura\/gr\u00e1fico\npy.iplot(fig)\n#df_brasil[['state','cases','date']]","71b98198":"import plotly.express as px\ndf = df_brasil\nfig = px.scatter(df[df.date>'2020-03-15'], x=\"date\", y=\"cases\", color=\"state\",\n                 size='deaths', hover_data=['region'])\nfig.show()","25fd5f21":"fig = px.line(df[df.date>'2020-03-15'], x='date', y='deaths', color='state')\nfig.show()","09cbc9ce":"\nurl=\"https:\/\/www.ecdc.europa.eu\/sites\/default\/files\/documents\/COVID-19-geographic-disbtribution-worldwide-{0}.xlsx\".format(data_atualizacao)\nc=pd.read_excel(url)","41d6139a":"c.info()","15ba51d1":"c['acumulado_confirmados']=0\nc['acumulado_mortos']=0\nc['dobrou_confirmados']=0\nc['dobrou_mortos']=0\nc['primeiro_caso']=0\nc['primeiro_morto']=0\nc['dias_apos_primeiro_caso']=-1\nc['dias_apos_primeiro_morto']=-1\n\nc['GeoId']=c['geoId']\nc['DateRep']=c['dateRep']\nc['Deaths']=c['deaths']\nc['Cases']=c['cases']\nc['Countries and territories']=c['countriesAndTerritories']","b504bbd2":"paises=c.GeoId.unique()\ndatas=sorted(c.DateRep.unique())","236b0daa":"temp=[]\ncontador_duplicacao=1\nqtde_dias_duplicacao=0\ncasos=0\nfor i in datas:\n    qtde_dias_duplicacao=qtde_dias_duplicacao+1\n    casos=casos+c[(c.DateRep==i)].Cases.sum()\n    if casos>=(contador_duplicacao*2):\n        print(\"dobrou o nr de casos no mundo em {0} dias, para {2} casos, no dia {1}\".format(qtde_dias_duplicacao, i, casos))\n        contador_duplicacao=contador_duplicacao*2\n        qtde_dias_duplicacao=0\n\nprint(\"Ultima posicao: {0}\".format(casos))","99567f0b":"temp=[]\ncontador_duplicacao=1\nqtde_dias_duplicacao=0\ncasos=0\nfor i in datas:\n    qtde_dias_duplicacao=qtde_dias_duplicacao+1\n    casos=casos+c[(c.DateRep==i)].Deaths.sum()\n    if casos>=(contador_duplicacao*2):\n        print(\"dobrou o nr de mortos no mundo em {0} dias, para {2} casos, no dia {1}\".format(qtde_dias_duplicacao, i, casos))\n        contador_duplicacao=contador_duplicacao*2\n        qtde_dias_duplicacao=0\n\nprint(\"Ultima posicao: {0}\".format(casos))","5ff0e18b":"for j in paises:\n    historico=c[c.GeoId==j]\n    for pais_ in historico['Countries and territories'].unique(): pais=pais_ \n    #print(j, pais)\n    casos=0\n    contador_duplicacao=1\n    contador_ciclos=0\n    qtde_dias_duplicacao=0\n    comecou=0\n    marcador=0\n    contador_dias=0\n    for i in sorted(historico.DateRep):\n        novadata=i\n        qtde_dias_duplicacao=qtde_dias_duplicacao+1\n        casos=casos+historico[historico.DateRep==i].Cases.sum()\n        \n        condicao=[(c['Countries and territories']==pais) & (c.DateRep>=novadata)]\n        resultado=[casos]\n        c['acumulado_confirmados']=np.select(condicao, resultado, c['acumulado_confirmados'])\n        \n        \n        if comecou==0:\n            if casos>0:\n                #print(\"Primeiro registro em {0}, {1} casos\".format(i,casos))\n                condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n                resultado=[1]\n                c['primeiro_caso']=np.select(condicao, resultado, 0)\n                c['dobrou_confirmados']=np.select(condicao, [-1], c['dobrou_confirmados'])\n                comecou=1\n        \n        elif casos>=(contador_duplicacao*2):\n            #if contador_duplicacao>1: print(\"dobrou o nr de casos em {0} dias, foi para {2} casos, no dia {1}\".format(qtde_dias_duplicacao, i, casos))\n            contador_duplicacao=contador_duplicacao*2\n            qtde_dias_duplicacao=0\n            condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n            contador_ciclos=contador_ciclos+1\n            resultado=[contador_ciclos]\n            c['dobrou_confirmados']=np.select(condicao, resultado, c['dobrou_confirmados'])\n        \n        if comecou==1:\n            condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n            c['dias_apos_primeiro_caso']=np.select(condicao, [contador_dias], c['dias_apos_primeiro_caso'])\n            contador_dias=contador_dias+1\n","541dac29":"c[c['Countries and territories']=='Brazil'].head(10)","4680bb59":"for j in paises:\n    \n    historico=c[c.GeoId==j]\n    for pais_ in historico['Countries and territories'].unique(): pais=pais_ \n   \n    #print(j, pais)\n    casos=0\n    contador_duplicacao=1\n    contador_ciclos=0\n    qtde_dias_duplicacao=0\n    comecou=0\n    marcador=0\n    contador_dias=0\n    for i in sorted(historico.DateRep):\n        qtde_dias_duplicacao=qtde_dias_duplicacao+1\n        casos=casos+historico[historico.DateRep==i].Deaths.sum()\n        novadata=i\n        condicao=[(c['Countries and territories']==pais) & (c.DateRep>=novadata)]\n        resultado=[casos]\n        c['acumulado_mortos']=np.select(condicao, resultado, c['acumulado_mortos'])\n        #print (novadata)\n        if comecou==0:\n            if casos>0:\n                #print(\"Primeiro registro em {0}, {1} mortes\".format(i,casos))\n                condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n                resultado=[1]\n                c['primeiro_morto']=np.select(condicao, resultado, 0)\n                c['dobrou_mortos']=np.select(condicao, [-1], c['dobrou_mortos'])\n                comecou=1      \n        elif casos>=(contador_duplicacao*2):\n           # if contador_duplicacao>1: print(\"dobrou o nr de mortos em {0} dias, foi para {2} mortos, no dia {1}\".format(qtde_dias_duplicacao, i, casos))\n            contador_duplicacao=contador_duplicacao*2\n            qtde_dias_duplicacao=0\n            \n            condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n            contador_ciclos=contador_ciclos+1\n            resultado=[contador_ciclos]\n            c['dobrou_mortos']=np.select(condicao, resultado, c['dobrou_mortos'])\n\n        if comecou==1:\n            condicao=[(c['Countries and territories']==pais) & (c.DateRep==novadata)]\n            c['dias_apos_primeiro_morto']=np.select(condicao, [contador_dias], c['dias_apos_primeiro_morto'])\n            contador_dias=contador_dias+1\n         \n","501e550e":"large = 14; med = 12; small = 10\nparams = {'axes.titlesize': large,\n          'legend.fontsize': med,\n          'figure.figsize': (16, 32),\n          'axes.labelsize': med,\n          'axes.titlesize': med,\n          'xtick.labelsize': med,\n          'ytick.labelsize': med,\n          'figure.titlesize': large}\nplt.rcParams.update(params)\nplt.style.use('seaborn-whitegrid')\nsns.set_style(\"white\")\n","ab31eb64":"\n#[c.CountryExp!='China']\ncoluna_estudada='dobrou_confirmados'\nfp= c[['Countries and territories','dias_apos_primeiro_caso',coluna_estudada]].pivot_table(columns='dias_apos_primeiro_caso', index='Countries and territories',values=coluna_estudada).fillna(-1) \n#novo_indice=c[c[coluna_estudada]==-1][['DateRep', 'CountryExp']].sort_values(['DateRep'])['CountryExp']\nnovo_indice=c[c['DateRep']==data_atualizacao][['acumulado_confirmados', 'Countries and territories']].sort_values(['acumulado_confirmados'], ascending=False).head(30)['Countries and territories']\nsns.heatmap(fp.reindex(novo_indice), cmap='coolwarm')\n","a34a17d0":"c[(c['DateRep']==data_atualizacao) & (c['acumulado_confirmados']>0)][['acumulado_confirmados', 'Countries and territories', 'cases', 'DateRep']].sort_values(['acumulado_confirmados'], ascending=False)[['Countries and territories','acumulado_confirmados', 'cases', 'DateRep']].head(30)\n","0bea063f":"#[c.CountryExp!='China']\ncoluna_estudada='dobrou_mortos'\nfp= c[['Countries and territories','dias_apos_primeiro_morto',coluna_estudada]].pivot_table(columns='dias_apos_primeiro_morto', index='Countries and territories',values=coluna_estudada).fillna(-1) \n#novo_indice=c[c[coluna_estudada]==-1][['DateRep', 'CountryExp']].sort_values(['DateRep'])['CountryExp']\nnovo_indice=c[(c['DateRep']==data_atualizacao) & (c['acumulado_mortos']>0)][['acumulado_mortos', 'Countries and territories']].sort_values(['acumulado_mortos'], ascending=False)['Countries and territories']\nsns.heatmap(fp.reindex(novo_indice).head(30), cmap='coolwarm')\n\n","6be26880":"c[(c['DateRep']==data_atualizacao) & (c['acumulado_mortos']>0)][['acumulado_mortos', 'Countries and territories', 'deaths','DateRep']].sort_values(['acumulado_mortos'], ascending=False)[['Countries and territories','acumulado_mortos','deaths','DateRep']].head(30)\n","fa73bcea":"c[(c['Countries and territories']=='Mexico') & (c['acumulado_mortos']>0)][['acumulado_mortos', 'Countries and territories', 'deaths','DateRep']].sort_values(['acumulado_mortos'], ascending=False)[['Countries and territories','acumulado_mortos','deaths','DateRep']].head(30)\n","f7c61e0b":"Progress\u00e3o nr de mortos\n\ncada quadrado marca quando dobrou o nr de mortos","1152adc6":"Progress\u00e3o nr de casos\n\ncada quadrado marca quando dobrou o nr de casos","423e7d10":"Em n\u00fameros, quantos casos confirmados por pa\u00eds no ultimo dia analisado, os 30+\n\nColuna cases \u00e9 quantos casos nas ultimas 24 horas","4a89269e":"Em n\u00fameros, quantos mortos por pa\u00eds no ultimo dia analisado, os 30+\n\nColuna deaths \u00e9 quantos mortos nas ultimas 24 horas","e750275d":"Analise dos dados por Estado do Brasil\n\nnr de casos confirmados por estado, acumulado"}}