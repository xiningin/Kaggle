{"cell_type":{"847328eb":"code","75da8090":"code","5cb12618":"code","5d1d98ad":"code","9f77795f":"code","096af3ac":"code","69e2f770":"code","62744bb7":"code","12e6bd69":"code","fb2b7257":"code","dcea9221":"code","27701d4e":"code","a7ab8369":"code","22b341d9":"code","f06948b8":"code","43cee4d8":"code","e20e4a11":"code","4970636a":"code","3ec59f45":"code","b90c6d99":"code","781d8806":"code","4e26a8fc":"code","2d63b5e7":"code","2134c3bd":"markdown","87ade390":"markdown","390be60f":"markdown","93161381":"markdown","ebf14dc0":"markdown","12508913":"markdown","43850708":"markdown","9af65a50":"markdown","9e97b126":"markdown","7659f130":"markdown","d526a16f":"markdown","fcade9d5":"markdown","bee38892":"markdown","11250af2":"markdown","9ffa14bf":"markdown","00e9602e":"markdown","afff7177":"markdown","3b6963ff":"markdown"},"source":{"847328eb":"print('Hello Kaggle')\n","75da8090":"from tensorflow import keras\r\nfrom tensorflow.keras import Sequential\r\nfrom tensorflow.keras.layers import Dense\r\nfrom tensorflow.keras.layers import Dropout\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport seaborn as sns\r\nfrom IPython.display import display\r\n\r\nsns.set()\r\n","5cb12618":"try:\r\n    Raw = pd.read_csv(r'..\/Data\/train.csv')\r\nexcept:\r\n    Raw = pd.read_csv(r'..\/input\/titanic\/train.csv')\r\n\r\n\r\nRaw.head()\r\n","5d1d98ad":"Raw.info()\r\n","9f77795f":"sns.displot(Raw, x='Pclass', hue='Survived')\r\n","096af3ac":"sns.displot(Raw, x='Sex', hue='Survived')\r\n","69e2f770":"sns.displot(x='Age', hue='Survived', data=Raw, bins=50)\r\n","62744bb7":"sns.displot(x='SibSp', hue='Survived', data=Raw, bins=10)\r\n","12e6bd69":"sns.displot(data=Raw, x='Parch', hue='Survived', bins=8)\r\n","fb2b7257":"sns.scatterplot(data=Raw, x='PassengerId', y='Fare', hue='Survived')\r\n","dcea9221":"FareThreshold = [-float('inf'), 5, 10, 15, 20, 25, 40,\r\n                 60, 100, 150, 300, float('inf')]\r\nFareLabels = ['5', '10', '15', '20', '25',\r\n              '40', '60', '100', '150', '300', '300+']\r\nDuplicate = Raw.copy()\r\nDuplicate['Fare'] = pd.cut(\r\n    Duplicate['Fare'], bins=FareThreshold, labels=FareLabels)\r\nsns.displot(data=Duplicate, x='Fare', hue='Survived')\r\n","27701d4e":"sns.displot(data=Raw.dropna(subset=['Embarked']), x='Embarked', hue='Survived')\r\n","a7ab8369":"GenderFactorized = Raw\r\nGenderFactorized['Sex'] = Raw['Sex'].replace(['male', 'female'], [0, 1])\r\nGenderFactorized.head()\r\n","22b341d9":"EmbarkedFactorized = GenderFactorized\r\nEmbarkedFactorized['Embarked'] = GenderFactorized['Embarked'].replace(\r\n    ['S', 'C', 'Q'], [0, 1, 2])\r\nEmbarkedFactorized.head()\r\n","f06948b8":"Feature = GenderFactorized[['Survived', 'Pclass',\r\n                            'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked']]\r\n\r\nFeature['Fare'].replace(np.nan, Feature['Fare'].median(), inplace=True)\r\nFeature['Age'].replace(np.nan, Feature['Age'].median(), inplace=True)\r\n\r\n\r\nFeature = Feature.dropna()\r\n\r\ndisplay(Feature.shape)\r\nFeature.head()\r\n","43cee4d8":"TrainData = np.array(Feature.iloc[:, 1:])\r\nTrainLabel = np.array(Feature.iloc[:, 0])\r\ndisplay(TrainData.shape)\r\ndisplay(TrainLabel.shape)\r\n","e20e4a11":"Model = Sequential()\r\n\r\nModel.add(Dropout(0.2))\r\nModel.add(Dense(16, activation='relu'))\r\nModel.add(Dense(8, activation='relu'))\r\nModel.add(Dense(1, activation='sigmoid'))\r\nModel.compile(loss='binary_crossentropy', optimizer='adam',\r\n              metrics=['accuracy'])\r\nEpochs = 500\r\nHistory = Model.fit(TrainData, TrainLabel, epochs=Epochs, verbose=0)\r\nAcc = History.history['accuracy']\r\nLoss = History.history['loss']\r\n\r\nsns.scatterplot(x=range(Epochs), y=Acc)\r\n","4970636a":"sns.scatterplot(x=range(Epochs), y=Loss)\r\n","3ec59f45":"try:\r\n    Test = pd.read_csv(r'..\/Data\/test.csv')\r\nexcept:\r\n    Test = pd.read_csv(r'..\/input\/titanic\/test.csv')\r\n\r\nTest['Embarked'] = Test['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2])\r\nTest['Fare'] = Test['Fare'].replace(np.nan, Test['Fare'].mean())\r\nTest['Age'] = Test['Age'].replace(np.nan, Test['Age'].mean())\r\nTest['Sex'] = Test['Sex'].replace(['male', 'female'], [0, 1])\r\n\r\nTest = Test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\r\n\r\n\r\nTestData = np.array(Test)\r\nTestData.shape\r\n","b90c6d99":"Predict = Model.predict(TestData)\r\nBinaryResult = (Predict > 0.5).astype(int)\r\nBinaryResult.shape\r\n","781d8806":"BinaryResult = BinaryResult.reshape(418)\r\n","4e26a8fc":"try:\r\n    Result = pd.read_csv(r'..\/Data\/gender_submission.csv')\r\nexcept:\r\n    Result = pd.read_csv(r'..\/input\/titanic\/gender_submission.csv')\r\nResult['Survived'] = BinaryResult\r\nResult\r\n","2d63b5e7":"Result.to_csv(r'..\\Submission.csv', index=False)\r\nkeras.backend.clear_session()\r\n","2134c3bd":"## Some Draws","87ade390":"### Too many 'Cabin' null values.\n### **Ignore 'Cabin'**","390be60f":"### People from 'Pclass 1' are more likely to survive.\r\n### People from 'Pclass 3' are more likely to die.\r\n### **'Pclass' matters.**","93161381":"# 4. Predict\r\n\r\n### This part predicts the answer.\r\n","ebf14dc0":"# 1. Intuition\r\n\r\n### This part gives you a glimpse of data, and you'll have a basic idea of what matters for surviving.\r\n### Exactly, this part is call EDA( Exploratory data analysis), but I think Intuition better discribes this part.\r\n### **Let's Start !**","12508913":"#### Do not split the training data\r\n\r\ndef SplitDataFrame(df, frac, axis=0, reset_index=True) -> list:\r\n    '''Split df according to frac.\r\n    Return a list, which stores two parts of df'''\r\n\r\n    if axis == 0:\r\n        Threshold = int(df.shape[0]*frac)\r\n        part1 = df.iloc[0: Threshold, :].reset_index(drop=True)\r\n        part2 = df.iloc[Threshold:, :].reset_index(drop=True)\r\n    elif axis == 1:\r\n        Threshold = df.shape[1]*frac\r\n        part1 = df.iloc[:, 0: Threshold].reset_index(drop=True)\r\n        part2 = df.iloc[:, Threshold:].reset_index(drop=True)\r\n    else:\r\n        print('Key \"axis\" is \"0\" or \"1\"')\r\n    return [part1, part2]\r\n\r\n\r\nSplited = SplitDataFrame(Feature, 0.8)\r\n\r\ndisplay(Splited[0].shape)\r\ndisplay(Splited[0])\r\n\r\ndisplay(Splited[1].shape)\r\ndisplay(Splited[1])\r\n","43850708":"# 3. Modeling and Fitting\r\n\r\n### This part models and fits data.\r\n","9af65a50":"TrainData = np.array(Splited[0].iloc[:, 1:])\r\nTrainLabel = np.array(Splited[0].iloc[:, 0])\r\nValidationData = np.array(Splited[1].iloc[:, 1:])\r\nValidationLabel = np.array(Splited[1].iloc[:, 0])\r\n","9e97b126":"display(TrainData.shape)\r\ndisplay(TrainLabel.shape)\r\ndisplay(ValidationData.shape)\r\ndisplay(ValidationLabel.shape)\r\n","7659f130":"### People with no parent or child are more likely to die.\r\n### People with one or two parents or children are more likely to survive.\r\n### **'Parch' matters.**","d526a16f":"### **'Embarked' matters.**","fcade9d5":"### People with no distant kin are more likely to die.\r\n### People with 1 distant kin are more likely to survive.\r\n### **'SibSp' matters.**","bee38892":"### Male are more likely to survive.\r\n### Female are more likely to die.\r\n### **'Sex' matters.**\r\n","11250af2":"# 2. Preprocessing\r\n\r\n### This part preprocesses the data.","9ffa14bf":"### Those who paid 500+\uffe1 all survived.\r\n### **'Fare' matters.**\r\n### Label the 'Fare' attr at the cost of some information.","00e9602e":"### Babies and children are more likely to survive.\r\n### Others are more likely to die.\r\n### **'Age' matters.**","afff7177":"### Too many 'Ticket' values, and hard to label them.\r\n### **Ignore 'Ticket'**","3b6963ff":"Model.evaluate(ValidationData, ValidationLabel)\r\n"}}