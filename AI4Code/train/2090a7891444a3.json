{"cell_type":{"b2a9db41":"code","42d6574e":"code","69b266c5":"code","7391c35a":"code","02e4c29b":"code","521f838c":"code","e3d3e597":"code","0ae069b7":"code","28553958":"code","9e3fe917":"code","ee2c3aff":"code","40f85382":"markdown","407c4d0a":"markdown","edfb461f":"markdown","dcad796e":"markdown","77194f95":"markdown","ac95d0b6":"markdown","70f1a5b9":"markdown"},"source":{"b2a9db41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42d6574e":"df = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')\ndf.describe()\n","69b266c5":"# This function will find the mean of the given list\ndef find_mean(ls:list):\n    # check if the list has some values\n    if ls:\n        # return the mean(sum_of_list_values\/count_of_values_in_list)\n        return(sum(ls)\/len(ls))\n    else:\n        return 0\nprint(\"Mean for sepal_length: \",find_mean(list(df['sepal_length'])))\nprint(\"Mean for sepal_width: \",find_mean(list(df['sepal_width'])))\nprint(\"Mean for petal_length: \",find_mean(list(df['petal_length'])))\nprint(\"Mean for petal_width: \",find_mean(list(df['petal_width'])))","7391c35a":"# This function will calculate variance of the given list of data-points.\n# 1. calculate mean\n# 2. find deviation from mean\n# 3. square each deviation from mean\n# 4. Find the sum of squares\n# 5. Divide sum of squares by N-1(for sample data-points) or N(for population data-points)\n\ndef calculate_variance(ls:list):\n    # check mean of the list of values\n    mean = find_mean(ls)\n    if mean!=0:\n        return sum((i - mean) ** 2 for i in ls) \/ len(ls)\n    else:\n        return 0\n    \nprint(\"Variance for sepal_length: \",calculate_variance(list(df['sepal_length'])))\nprint(\"Variance for sepal_width: \",calculate_variance(list(df['sepal_width'])))\nprint(\"Variance for petal_length: \",calculate_variance(list(df['petal_length'])))\nprint(\"Variance for petal_width: \",calculate_variance(list(df['petal_width'])))","02e4c29b":"# This method will calculate the standard deviation\ndef calculate_standard_deviation(ls:list):\n    return calculate_variance(ls)**(1\/2)\n\nprint(\"Standard Devation for sepal_length: \",calculate_standard_deviation(list(df['sepal_length'])))\nprint(\"Standard Devation for sepal_width: \",calculate_standard_deviation(list(df['sepal_width'])))\nprint(\"Standard Devation for petal_length: \",calculate_standard_deviation(list(df['petal_length'])))\nprint(\"Standard Devation for petal_width: \",calculate_standard_deviation(list(df['petal_width'])))\n","521f838c":"sns.heatmap(df.corr(), annot = True)\n\nplt.show()","e3d3e597":"from math import sqrt\nimport seaborn as sns\n\n# Statistics\nfrom statistics import median,mean, stdev\nfrom scipy import signal\n\nimport scipy.stats as stats\nfrom scipy.stats import binom, poisson, bernoulli, norm\n","0ae069b7":"mean_sepal_length = mean(df['sepal_length'])\nsd_sepal_length = stdev(df['sepal_length'])\nnormal_df = norm.pdf(df['sepal_length'],loc = mean_sepal_length, scale = sd_sepal_length)\nplt.plot(df['sepal_length'], normal_df, 'bs')\nplt.show()\n","28553958":"# Normal Distribution as a Bell Curve\nplt.figure(figsize=(18,5))\nsns.displot(df)\nplt.title('Distribution', fontsize='xx-large')","9e3fe917":"min_sepal_length = df['sepal_length'].min()\nmax_sepal_length = df['sepal_width'].max()\ncount_sepal_length = df['sepal_length'].count()\n\ndata = np.random.uniform(min_sepal_length, max_sepal_length, count_sepal_length)\ncount, bins, ignored = plt.hist(data, 20, facecolor='green') \n\nplt.xlabel('X~U['+str(min_sepal_length)+','+str(max_sepal_length)+']')\nplt.ylabel('Count')\nplt.title(\"Uniform Distribution Histogram (Bin size 20)\")\nplt.grid(True)\n\nplt.show(block = False)","ee2c3aff":"from scipy.special import factorial\n#x = np.arange(0, 20, 0.1)\n\nx=pd.Series(df['sepal_length']).to_numpy()\n\n\ny = np.exp(-mean_sepal_length)*np.power(mean_sepal_length, x)\/factorial(x)\n\nplt.figure(figsize=(15,8))\nplt.title('Poisson distribution with lambda=5', fontsize='xx-large')\nplt.plot(x, y, 'bs')\nplt.show()","40f85382":"# Poisson Distribution","407c4d0a":"# Kick Start Plan\n\n## Exploration\n\n1. How many classes do we have\n    In the current dataset we have 5 classes in total, out of which 4 are feature values and 1 is label value\n    - sepal_length\n    - sepal_width\n    - petal_length\n    - petal_width\n2. Mean Feature value of every class\n\n    a. **Introduction**:\n        i. Why we use Mean ?\n          if we have a dataset with some data points which are scattered all over the place. Calculating mean helps us find what's the average of all datapoints. It's a measure of central tendancy. It's also reffered to as expected value. Mean is useful in case if dataset has no outliers. if data has outliers, it can produce horribly wrong value for central tendancy.In this case, Median or Mod are used.\n    b. **Find mean without using any library**\n    ii. Use simple python script to find out mean\n      - sepal_length: 5.84\n      - sepal_width: 3.05\n      - petal_length: 3.75\n      - petal_width: 1.19\n        \n    c. **Conclusion of Mean**\n        iii) How mean value helps us in exploring dataset\n            By calculating Mean for each of the classes in the dataset, we've seen that sepal_length has mean of 5.84 which implies that most of the values in sepal_length are likely to lie in this value i.e. 5.8 approximately. This will implies vice versa in each of the feature value according to its mean.\n            \n3. Standard Deviation of every class\n\n    a. **Introduction:**\n        i. Why we use std ?\n            std helps us to find out the spread of data from the mean. it tells us how far each value lies from mean.\n           \n    b. **Find std without using any library**\n        ii. Use simple python script to find out std\n      - sepal_length:  0.8253012917851409\n      - sepal_width:  0.4321465800705435\n      - petal_length:  1.7585291834055201\n      - petal_width:  0.760612618588172\n        \n    c. **Conclusion of std**\n        iii) How std value helps us in exploring dataset\n            Standard Deviation is helpful in normal distribution data where data has no skew. in normal distribution, values are mostly around the central region. std tells you how spread out from central region is your data on average.\n\n4. Variance\n\n    a. **Introduction:**\n        i. Why we use Variance ?\n            Variance is a measure of dispersion that takes into account the spread of all data points in a data set. \n            \n        \n    b. **Find Variance without using any library**\n        ii. Use simple python script to find out Variance\n      - sepal_length:  0.6811222222222222\n      - sepal_width:  0.1867506666666667\n      - petal_length:  3.0924248888888854\n      - petal_width:  0.5785315555555559\n        \n    c. **Conclusion of Variance**\n        <br>iii) How variance value helps us in exploring dataset\n            \n        \n# Goal Kaggle Master\n","edfb461f":"\n### Distributions\n    A distribution is The Possible values a variable can take and how frequently they occur. \n* **Bernouli Distribution**\nA Bernoulli distribution has only two possible outcomes, namely 1 (success) and 0 (failure), and a single trial. So the random variable X which has a Bernoulli distribution can take value 1 with the probability of success, say p, and the value 0 with the probability of failure, say q or 1-p.\n<br> <center>**Bern(1,p)**<\/center>\n<br> **Where**\n<br> **p** = Probability of the Success\n<br> **1** means that there is only one event which actually bernoulli distribution states.\n<br>\n* **Uniform Distribution**\nWhen you roll a fair die, the outcomes are 1 to 6. The probabilities of getting these outcomes are equally likely and that is the basis of a uniform distribution. Unlike Bernoulli Distribution, all the n number of possible outcomes of a uniform distribution are equally likely.\n<br> <center>**N(a,b)**<\/center>\n<br> **Where,**\n<br> **a** = Starting Range\n<br> **b** = End Range\n* **Binomial Distribution**\nA distribution where only two outcomes are possible, such as success or failure, gain or loss, win or lose and where the probability of success and failure is same for all the trials is called a Binomial Distribution.\n<br> <center>**B(n,p)**<\/center>\n<br> **Where,**\n<br> **n** = Number of Trials\n<br> **p** = Probability of Success\n<br> \n* **Normal Distribution**\nThe normal distribution is a continuous probability distribution that is symmetrical around its mean, most of the observations cluster around the central peak, and the probabilities for values further away from the mean taper off equally in both directions. Extreme values in both tails of the distribution are similarly unlikely.\n<br> <center> **N(mean, Std)**<\/center>\n<br> **Where,**\n<br> **mean** = Mean of the data point\n<br> **Std** = Standard Deviation of the Dataset\n  \n\n\n     ","dcad796e":"# Binomial Distribution","77194f95":"# Normal Distribution","ac95d0b6":"## Uniform Distribution","70f1a5b9":"### Mean, Median, Mode\n* **Mean**\n     Mean value of a dataset is the average value i.e. a number around which a whole data is spread out. All values used in calculating the average are weighted equally when defining the Mean.\n     **When to use?**\n     If your data has a symmetric distribution the mean is often used.\n*     **Median**\n     The median is basically the 'middle' number in an ordered data set.\n     **When to use?**\n      If your data is skewed (i.e. has a very long tail in one direction but not the other) the median is often used.\n      **Mode**\n      Mode is simply the most frequent number in the dataset.\n      **When to use?**\n      Mode is decided by the frequency. The value which has more frequency in dataset column is mode.\n      \n**Correlation**\nCorrelation is a statistical measure that expresses the extent to which two variables are linearly related.\nIt\u2019s a common tool for describing simple relationships without making a statement about cause and effect."}}