{"cell_type":{"b0d829ce":"code","4a0b5a76":"code","b7509d96":"code","8100d489":"code","8b54ed4d":"code","f3756c59":"code","1f5fc086":"code","aae43e88":"code","7eee5b9f":"code","daf3a6ce":"code","2d14fd27":"code","fc10f2af":"code","0538ef8b":"code","53fafacd":"code","157149c9":"code","ded713be":"code","82b0d4ca":"code","f52464e1":"code","73e6858d":"code","3dbce15d":"code","410542d8":"code","d4f4a000":"code","7bdd1dcc":"markdown","87bad6e1":"markdown","00804398":"markdown","2d897b03":"markdown","8d146385":"markdown"},"source":{"b0d829ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a0b5a76":"# Memory reduction helper function:\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns: #columns\n        col_type = df[col].dtypes\n        if col_type in numerics: #numerics\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","b7509d96":"# Dataste from 2008 to 2020 (12 years)\ndf = reduce_mem_usage(\n    pd.read_csv(\"\/kaggle\/input\/sf-assessor-property-tax-rolls-2020\/Assessor_Historical_Secured_Property_Tax_Rolls.csv\"))","8100d489":"clmn_names = [c.lower().replace(' ','_') for c in df.columns]\nclmn_names_map = dict(zip(df.columns, clmn_names))\ndf.rename(columns=clmn_names_map, inplace=True)","8b54ed4d":"# Remove homes where current sales date is unknown:\ndf = df[~df['current_sales_date'].isna()]\n\n# Remove homes where current sales date older than 2008:\ndf['current_sales_date'] = pd.to_datetime(df['current_sales_date'])\ndf['sale_year'] = df['current_sales_date'].dt.year\ndf = df[df.sale_year>=df['closed_roll_year'].min()-1]\n\ndf.drop_duplicates(inplace=True)\ndf.info()","f3756c59":"df['id'] = (df['property_location'].astype(str) +\n            df['parcel_number'].astype(str) +\n            df['block'].astype(str) +\n            df['lot'].astype(str))","1f5fc086":"# Properties are uniquely identified by 4 fields.\n# Number of different properties:\ndf[['id']].drop_duplicates().info()","aae43e88":"# Number of sales is roughly 25% higher.\ndf[['id', 'sale_year']].drop_duplicates().info()","7eee5b9f":"# Check out repeated sales. These could be flips!\ndf['sale_next_year'] = df.sale_year+1\nprop_df = df[['id','sale_next_year']].drop_duplicates().copy()\nprop_df = prop_df[['id','sale_next_year']].merge(\n    df.drop_duplicates(),\n    how='inner',\n    left_on=['id','sale_next_year'],\n    right_on=['id','sale_year'],\n    suffixes = ('','_same_year')\n)\nprop_df.shape","daf3a6ce":"df.columns","2d14fd27":"df.rename(columns={'closed_roll_year': 'tax_year'}, inplace=True)\n\nprice_clmns = [\n    'assessed_fixtures_value', 'assessed_improvement_value',\n    'assessed_land_value', 'assessed_personal_property_value']\n\nid_clmns = [\n    'id',\n    'property_location', 'parcel_number', 'block', 'lot',\n    'sale_year','tax_year']","fc10f2af":"# Explore when the change on the assesed value happens - the same year or next year?\ndf[id_clmns+price_clmns].sort_values(by=['id','tax_year']).tail(50)","0538ef8b":"prop_df = df[df.sale_year == (df.tax_year - 1)]","53fafacd":"# Note that we have lost 14,000 ids.\nprop_df.id.unique().shape","157149c9":"prop_df.to_csv(\"sf_home_sales_2020.csv\")","ded713be":"prop_df.sale_year.hist()","82b0d4ca":"prop_df.construction_type.value_counts()","f52464e1":"# Pobably need to prune some of the property classes:\nprop_df.property_class_code_definition.value_counts()","73e6858d":"prop_df.use_definition.value_counts()","3dbce15d":"# sf_find_neighborhoods_2 and neighborhoods are probably duplicates.\n# maybe there are more duplicate columns?\nprop_df.sf_find_neighborhoods_2.value_counts()","410542d8":"prop_df.neighborhoods.value_counts()","d4f4a000":"# property age might be an interesting feature (year_sale - year_property_built)\nprop_df.year_property_built.hist()","7bdd1dcc":"## Small EDA","87bad6e1":"# San Francisco Tax Rolls to SF Home Sales Dataset","00804398":"## Basic Cleanup","2d897b03":"## Limitations of back engineering sales from tax records\n\nAfter your purchase, State law\n(Proposition 13, passed in 1978)\nrequires our office to set a new\ntaxable value for your home. The\nlaw says that this value, called the\nassessed value, should reflect the\nmarket value (not necessarily the\npurchase price) of the property as\nof the date of transfer. Every year\nthereafter, your assessed value\ncannot go up by more than 2% if\nnothing has changed.\n\n* How to estimate your new assessed value?\n\n**If you paid market price for your\nproperty, your new assessed value\nwill likely be the purchase price.**\nHowever, there are times when\nthe price paid is not the market\nvalue, such as property bought\nunder duress or property was **sold\nat a below market price to family\nmembers. In these cases, we are\nrequired to use the market value.**\nTo plan conservatively, you can\nresearch the sale prices of other\ncomparable properties in the same\nneighborhood close to the date of\nyour purchase to estimate market\nvalue.\n\n### Takeaways:\n* In the most cases new value == purchase price.\n* If the purchase price is below market it is imputed with a valuation.\n* If we use next year assessment as sale price, it is at most 2% higher than the \"market\" sale price.\n\nSource: https:\/\/www.sfassessor.org\/sites\/default\/files\/uploaded\/ASR_Factsheet_New%20Homeowner_Final.pdf","8d146385":"## Creating dataset"}}