{"cell_type":{"7d1f5692":"code","3f3b9c1f":"code","a0b64689":"code","0e0a765d":"code","f6d3e7fa":"code","abacf2e8":"code","323ad9f2":"code","49c69c08":"code","879fa43c":"code","5bd1f4b0":"code","4ed17321":"code","15d33e34":"code","760b38c5":"code","76b8125e":"code","82603d3b":"code","ee259b24":"code","faa1bc20":"code","8215da76":"code","508ef13c":"code","c812aac7":"code","8c62bff8":"code","a6bb0aaa":"code","01a8ab4b":"code","7be796a4":"code","02ba0787":"code","dd0414d5":"code","21bd51f7":"code","2478e7b0":"code","44702ce2":"code","ae30d5bd":"code","eeb27eaf":"code","839e722a":"code","d45c11c8":"code","86be48d0":"code","74dd796e":"code","0f117b70":"code","2ed2ad07":"code","ade2ec87":"code","6b60f688":"code","da795b02":"code","b3dbd388":"code","d264f77d":"code","71185a51":"code","ebbe6405":"code","e2aa538f":"code","be5fa67b":"code","40ad5dda":"code","cabb7143":"code","afa62655":"code","7bba9a5b":"code","28567174":"code","169f5d45":"code","092944c8":"code","a3245167":"code","219baa83":"code","8498e341":"code","a82dd927":"code","7b2f5459":"code","42f0bdda":"code","50047a97":"code","4a1d9153":"code","134beb4f":"code","c1987fab":"code","bac75649":"code","a5bbd39e":"code","4ab56da5":"code","638805ed":"code","f040838f":"code","5455ffff":"code","dd0e52e9":"code","fd454e9c":"code","04236e47":"code","daff1766":"code","f127dd2d":"code","a18ae946":"markdown","bafbcfc1":"markdown","ad6eb0ec":"markdown","4d202f17":"markdown","620acf8d":"markdown","1c855dcd":"markdown","e225e389":"markdown","c83c18a0":"markdown","2c17677b":"markdown"},"source":{"7d1f5692":"! git clone https:\/\/github.com\/Tessellate-Imaging\/Monk_Object_Detection.git","3f3b9c1f":"# Check version of Cuda\n! nvcc -V","a0b64689":"! cd Monk_Object_Detection\/3_mxrcnn\/installation && cat requirements_cuda10.1.txt | xargs -n 1 -L 1 pip install","0e0a765d":"import matplotlib.pyplot as plt\nimport cv2","f6d3e7fa":"f, axarr = plt.subplots(2,2)\nimg1 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_test\/cars_test\/00001.jpg')\nimg2 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_test\/cars_test\/00002.jpg')\nimg3 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_test\/cars_test\/00003.jpg')\nimg4 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_test\/cars_test\/00004.jpg')\naxarr[0,0].imshow(img1)\naxarr[0,1].imshow(img2)\naxarr[1,0].imshow(img3)\naxarr[1,1].imshow(img4)","abacf2e8":"f, axarr = plt.subplots(2,2)\nimg1 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/00001.jpg')\nimg2 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/00002.jpg')\nimg3 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/00003.jpg')\nimg4 = cv2.imread('\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/00004.jpg')\naxarr[0,0].imshow(img1)\naxarr[0,1].imshow(img2)\naxarr[1,0].imshow(img3)\naxarr[1,1].imshow(img4)","323ad9f2":"import scipy.io\ncars_annos = scipy.io.loadmat('\/kaggle\/input\/stanford-cars-dataset\/cars_annos.mat')","49c69c08":"cars_annos.keys()","879fa43c":"# cars_annos.values()","5bd1f4b0":"# annotations\nann = cars_annos['annotations']","4ed17321":"# print(ann)","15d33e34":"ann.shape","760b38c5":"ann.size","76b8125e":"class_names = cars_annos['class_names']","82603d3b":"# print(class_names)","ee259b24":"class_names.shape","faa1bc20":"class_names.size","8215da76":"print(\"Annotation: \",ann[0,0])\nprint(\"Classname: \",class_names[0,ann[0,0][5]])","508ef13c":"row = ann[0,0]\n#print(row)\nclass_path = row[0] # relative_im_path\nprint(class_path)\nx1 = row[1] # bbox_x1\nprint(x1)\ny1 = row[2] # bbox_y1\nprint(y1)\nx2 = row[3] # bbox_x2\nprint(x2)\ny2 = row[4] # bbox_y2\nprint(y2)\nrclass = row[5] # class\nprint(rclass)\nprint(class_names[0,rclass])\nrtest = row[6] # test\nprint(rtest)\nprint(class_names[0,rtest])","c812aac7":"row = ann[0,123]\nann_path = row['relative_im_path']\nprint(str(ann_path))\nann_x1 = row['bbox_x1']\nprint(int(ann_x1))\nann_x2 = row['bbox_x2']\nprint(int(ann_x2))\nann_y1 = row['bbox_y1']\nprint(int(ann_y1))\nann_y2 = row['bbox_y2']\nprint(int(ann_y2))\nann_class_no = row['class']\nprint(ann_class_no)\nann_class = class_names[0,ann_class_no-1]\nprint(str(ann_class))\nann_test_no = row['test']\nprint(ann_test_no)\nann_test = class_names[0,ann_test_no]\nprint(str(ann_test))","8c62bff8":"length = ann.size\nimport pandas as pd\ndf_ann = pd.DataFrame(columns = ['relative_im_path','bbox_x1','bbox_y1','bbox_x2','bbox_y2','class','test'])","a6bb0aaa":"df_ann","01a8ab4b":"for i in range(length):\n    row = ann[0,i]\n    df_ann.loc[i,'relative_im_path'] = str(\"\\'\") + '\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/' + str(row['relative_im_path'])[10:-2] + str(\"\\'\")\n    df_ann.loc[i,'bbox_x1'] = int(row['bbox_x1'])\n    df_ann.loc[i,'bbox_y1'] = int(row['bbox_y1'])\n    df_ann.loc[i,'bbox_x2'] = int(row['bbox_x2'])\n    df_ann.loc[i,'bbox_y2'] = int(row['bbox_y2'])\n    ann_class_no = int(row['class'])\n    df_ann.loc[i,'class'] = str(class_names[0,ann_class_no-1])[1:-1].replace(\" \", \"_\")\n    ann_test_no = int(row['test'])\n    df_ann.loc[i,'test'] = str(class_names[0,ann_test_no])[1:-1].replace(\" \", \"_\")","7be796a4":"df_ann.head()","02ba0787":"print(df_ann.loc[0,'relative_im_path'])\nprint(df_ann.loc[0,'class'])\nprint(df_ann.loc[0,'test'])","dd0414d5":"df_ann.tail()","21bd51f7":"df_ann.shape","2478e7b0":"combined = [];\nimport numpy as np\nfor index, row in df_ann.iterrows():\n    img_file = str(row['relative_im_path'])[-10:-1];\n    #label = str(row['class']).encode(\"ascii\");\n    label = str(row['class']);\n    x1 = str(row['bbox_x1'])\n    x2 = str(row['bbox_x2'])\n    y1 = str(row['bbox_y1'])\n    y2 = str(row['bbox_y2'])\n    wr = \"\";\n    # wr += str(x1) + \" \" + str(y1) + \" \" + str(x2) + \" \" + str(y2) + \" \" + label.decode(\"ascii\")[1:-1];\n    wr += str(x1) + \" \" + str(y1) + \" \" + str(x2) + \" \" + str(y2) + \" \" + label[1:-1];\n    combined.append([img_file, wr]);","44702ce2":"combined[:10]","ae30d5bd":"df = pd.DataFrame(combined, columns = ['ID', 'Labels'])  \ndf.to_csv(\"\/kaggle\/working\/train_labels.csv\", index=False)","eeb27eaf":"import os\nimport numpy as np \nimport cv2\nimport dicttoxml\nimport xml.etree.ElementTree as ET\nfrom xml.dom.minidom import parseString\nfrom tqdm import tqdm\nimport shutil\nimport json\nimport pandas as pd","839e722a":"root = \"\/kaggle\";\nimg_dir = \"input\/stanford-cars-dataset\/cars_train\/cars_train\/\";\nanno_file = \"working\/train_labels.csv\";","d45c11c8":"dataset_path = root;\nimages_folder = root + \"\/\" + img_dir;\nannotations_path = root + \"\/working\/annotations\/\";","86be48d0":"if not os.path.isdir(annotations_path):\n    os.mkdir(annotations_path)\n    \ninput_images_folder = images_folder;\ninput_annotations_path = root + \"\/\" + anno_file;","74dd796e":"output_dataset_path = root;\noutput_image_folder = input_images_folder;\noutput_annotation_folder = annotations_path;\n\ntmp = img_dir.replace(\"\/\", \"\");\noutput_annotation_file = output_annotation_folder + \"\/instances_\" + tmp + \".json\";\noutput_classes_file = output_annotation_folder + \"\/classes.txt\";","0f117b70":"if not os.path.isdir(output_annotation_folder):\n    os.mkdir(output_annotation_folder);","2ed2ad07":"df = pd.read_csv(input_annotations_path);\ncolumns = df.columns","ade2ec87":"df.head()","6b60f688":"df.tail()","da795b02":"columns","b3dbd388":"delimiter = \" \";","d264f77d":"list_dict = [];\nanno = [];\nfor i in range(len(df)):\n    img_name = df[columns[0]][i];\n    labels = df[columns[1]][i];\n    tmp = labels.split(delimiter);\n    # print(tmp)\n    for j in range((len(tmp)\/\/5)):\n        label = tmp[j*5+4];\n        if(label not in anno):\n            anno.append(label);\n    anno = sorted(anno)\n    \nfor i in tqdm(range(len(anno))):\n    tmp = {};\n    tmp[\"supercategory\"] = \"master\";\n    tmp[\"id\"] = i;\n    tmp[\"name\"] = anno[i];\n    list_dict.append(tmp);\n\nanno_f = open(output_classes_file, 'w');\nfor i in range(len(anno)):\n    anno_f.write(anno[i] + \"\\n\");\nanno_f.close();","71185a51":"coco_data = {};\ncoco_data[\"type\"] = \"instances\";\ncoco_data[\"images\"] = [];\ncoco_data[\"annotations\"] = [];\ncoco_data[\"categories\"] = list_dict;\nimage_id = 0;\nannotation_id = 0;","ebbe6405":"# there are 8144 images in cars_train folder of the dataset\nfor i in tqdm(range(8144)):\n    img_name = df[columns[0]][i];\n    labels = df[columns[1]][i];\n    tmp = labels.split(delimiter);\n    # image_in_path = input_images_folder + img_name;\n    image_in_path = root + \"\/\" + img_dir + img_name;\n    print(image_in_path)\n    image = cv2.imread(image_in_path, 1);\n    h, w, c = image.shape;\n\n    images_tmp = {};\n    images_tmp[\"file_name\"] = img_name;\n    images_tmp[\"height\"] = h;\n    images_tmp[\"width\"] = w;\n    images_tmp[\"id\"] = image_id;\n    coco_data[\"images\"].append(images_tmp);\n    \n\n    for j in range(len(tmp)\/\/5):\n        x1 = int(tmp[j*5+0]);\n        y1 = int(tmp[j*5+1]);\n        x2 = int(tmp[j*5+2]);\n        y2 = int(tmp[j*5+3]);\n        label = tmp[j*5+4];\n        annotations_tmp = {};\n        annotations_tmp[\"id\"] = annotation_id;\n        annotation_id += 1;\n        annotations_tmp[\"image_id\"] = image_id;\n        annotations_tmp[\"segmentation\"] = [];\n        annotations_tmp[\"ignore\"] = 0;\n        annotations_tmp[\"area\"] = (x2-x1)*(y2-y1);\n        annotations_tmp[\"iscrowd\"] = 0;\n        annotations_tmp[\"bbox\"] = [x1, y1, x2-x1, y2-y1];\n        annotations_tmp[\"category_id\"] = anno.index(label);\n\n        coco_data[\"annotations\"].append(annotations_tmp)\n    image_id += 1;\n\noutfile =  open(output_annotation_file, 'w');\njson_str = json.dumps(coco_data, indent=4);\noutfile.write(json_str);\noutfile.close();","e2aa538f":"! pwd","be5fa67b":"! mv \/kaggle\/working\/annotations \/kaggle\/working\/car_dataset","40ad5dda":"! mkdir \/kaggle\/working\/car_dataset\/train   # img_dir\n! mkdir \/kaggle\/working\/car_dataset\/annotations # anno_dir","cabb7143":"! ls \/kaggle\/working\/car_dataset","afa62655":"! mv \/kaggle\/working\/car_dataset\/classes.txt \/kaggle\/working\/car_dataset\/annotations\n! mv \/kaggle\/working\/car_dataset\/instances_inputstanford-cars-datasetcars_traincars_train.json \/kaggle\/working\/car_dataset\/annotations","7bba9a5b":"# rename\n! mv \/kaggle\/working\/car_dataset\/annotations\/instances_inputstanford-cars-datasetcars_traincars_train.json \/kaggle\/working\/car_dataset\/annotations\/instances_train.json","28567174":"! ls \/kaggle\/working\/car_dataset","169f5d45":"! ls \/kaggle\/working\/car_dataset\/annotations","092944c8":"! cp -r \"\/kaggle\/input\/stanford-cars-dataset\/cars_train\/cars_train\/\"*.jpg \"\/kaggle\/working\/car_dataset\/train\/\"","a3245167":"# ! ls \/kaggle\/working\/car_dataset\/train","219baa83":"import os\nimport sys\nsys.path.append(\"\/kaggle\/working\/Monk_Object_Detection\/3_mxrcnn\/lib\/\")\nsys.path.append(\"\/kaggle\/working\/Monk_Object_Detection\/3_mxrcnn\/lib\/mx-rcnn\")","8498e341":"from train_base import *","a82dd927":"# to be changed accordingly\nroot_dir = \"\/kaggle\/working\";\ncoco_dir = \"car_dataset\";\nimg_dir = \"train\";","7b2f5459":"set_dataset_params(root_dir=root_dir, \n                   coco_dir=coco_dir, imageset=img_dir);","42f0bdda":"set_model_params(model_name=\"resnet50\");","50047a97":"set_hyper_params(gpus=\"0\", lr=0.001, lr_decay_epoch=\"1\", epochs=10, batch_size=16);","4a1d9153":"set_output_params(log_interval=100, save_prefix=\"model_resnet50\");","134beb4f":"set_img_preproc_params(img_short_side=600, img_long_side=1000, \n                       mean=(123.68, 116.779, 103.939), std=(1.0, 1.0, 1.0));","c1987fab":"initialize_rpn_params();\ninitialize_rcnn_params();","bac75649":"if os.path.isdir(\".\/cache\/\"):\n    os.system(\"rm -r .\/cache\/\")","a5bbd39e":"roidb = set_dataset();","4ab56da5":"sym = set_network();","638805ed":"train(sym, roidb);","f040838f":"from infer_base import *","5455ffff":"class_file = set_class_list(\"\/kaggle\/working\/car_dataset\/annotations\/classes.txt\");","dd0e52e9":"set_model_params(model_name=\"resnet50\", model_path=\"trained_model\/model_resnet50-0006.params\");","fd454e9c":"set_hyper_params(gpus=\"0\", batch_size=1);","04236e47":"set_img_preproc_params(img_short_side=600, img_long_side=1000, \n                       mean=(123.68, 116.779, 103.939), std=(1.0, 1.0, 1.0));","daff1766":"initialize_rpn_params();\ninitialize_rcnn_params();\nsym = set_network();\nmod = load_model(sym);","f127dd2d":"set_output_params(vis_thresh=0.6, vis=True)\nInfer(\"\/kaggle\/input\/stanford-cars-dataset\/cars_test\/cars_test\/00004.jpg\", mod);","a18ae946":"# **Training**","bafbcfc1":"# **Inference**","ad6eb0ec":"Dataset params","4d202f17":"**Network**","620acf8d":"# **Monk Type to COCO Type**","1c855dcd":"Desired annotation - COCO Format\nDataset Directory Structure\n\n\/kaggle\/working (root_dir)\n\n      |\n      |------car_dataset (coco_dir) \n      |         |\n      |         |---Images (img_dir)\n      |         |----|\n      |              |-------------------img1.jpg\n      |              |-------------------img2.jpg\n      |              |-------------------.........(and so on)\n      |\n      |\n      |         |---annotations (anno_dir)\n      |         |----|\n      |              |--------------------instances_Images.json \n      |              |--------------------classes.txt\n\n\ninstances_Train.json -> In proper COCO format\nclasses.txt -> A list of classes in alphabetical order","e225e389":"# [Monk_Object_Detection](https:\/\/github.com\/Tessellate-Imaging\/Monk_Object_Detection)","c83c18a0":"# **Converting annotations to Monk Format**","2c17677b":"**Train**"}}