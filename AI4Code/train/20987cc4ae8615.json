{"cell_type":{"afc78001":"code","a7477690":"code","aad714b4":"code","84766de6":"code","928ed035":"code","2e86e126":"code","14cabcd0":"code","2d1859d2":"code","ac9325e9":"code","92432724":"code","55d6b1a2":"code","a4488dba":"code","f9c09941":"code","b041c115":"code","a452c53d":"code","3529cc42":"code","e974fd1a":"code","e5a0ead8":"markdown","239223e5":"markdown","efdd8894":"markdown","b8601c90":"markdown","1854bfca":"markdown","0941cf1a":"markdown","1628a940":"markdown","de83510b":"markdown","631cd76f":"markdown","c39dda2e":"markdown","629f1a95":"markdown","1557906f":"markdown","f727a1aa":"markdown","784dd2f5":"markdown","c15fec64":"markdown","63a832bc":"markdown","86a959b3":"markdown","4fd8374e":"markdown","55dd2838":"markdown","087a8ea0":"markdown","695431c6":"markdown","aaf9b2bb":"markdown","85bca410":"markdown","d80e39ec":"markdown","82f6ac66":"markdown","f0fd18b0":"markdown","8af714bf":"markdown"},"source":{"afc78001":"# importing Modules\n\nimport numpy as np  ## For matrix and maths operation\nimport cv2          ## for img and cv \nimport os\nimport matplotlib.pyplot as plt\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a7477690":"# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\nwhile True:\n    \n    ## Displying Image\n    cv2.imshow('image',img)\n    # IF we've waited at least 0 ms AND we've pressed the Esc\n    if cv2.waitKey(0) & 0xFF == 27:\n        break\n\n#cv2. destroyAllWindows() simply destroys all the windows we created\ncv2.destroyAllWindows()","aad714b4":"# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n# Checkin the Type of Image\nprint(\"Type of image is {}\".format(type(img)))","84766de6":"\n# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n#Dimension for image\nprint(\"Dimension for image is {}\".format(img.shape))\n\n#Image shape is tuple\n#Length = first element of tuple\n#width = second element of tuple\n#No of channel = thrid element of tuple\n\nLength = img.shape[0]\nwidth = img.shape[1]\nChannels = img.shape[2]\n\nprint(\"Length of image is {}\".format(Length))\nprint(\"width of image is {}\".format(width))\nprint(\"No of channels is {}\".format(Channels))","928ed035":"# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n# Resizing the image using Length and width\n\nnewImg = cv2.resize(img, (0,0),fx=0.75,fy=0.75)  \n \nplt.imshow(cv2.cvtColor(newImg, cv2.COLOR_BGR2RGB)) ## Why We change color here we will discuss in later part\nplt.show()","2e86e126":"# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n# Resizing the image using Length and width\n\nImg_change_HW = cv2.resize(img, (300, 200))\n \nplt.imshow(cv2.cvtColor(Img_change_HW, cv2.COLOR_BGR2RGB))\n\nplt.show()\n","14cabcd0":"# Reading Image and storing image object in img variable\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n#Cropping image where following\n# Start Row (y1) = 100\n# Start Column(x1)= 100\n# End row(y1+h) = 300\n# End columns(x1+w) = 200\n\ny1= 100\nx1 =100\ny2 = 300\nx2 = 200\n\ncropped_img = img[y1:y2,x1:x2]  ## ROI Extraction from Image\n\nprint(\"Cropped Image \\n\")\n\nplt.imshow(cv2.cvtColor(cropped_img, cv2.COLOR_BGR2RGB))\n\nplt.show()\n\n","2d1859d2":"\nimport cv2\n\nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n#Reading image in RGB format\nimg = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\ncv2.imshow('image',img)\ncv2.waitKey(0)\n\n#Converting image into HSV\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\ncv2.imshow('HSV',img)\ncv2.waitKey(0)\n\n#Converting image into HLS\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2HLS)\ncv2.imshow('HLS',img)\ncv2.waitKey(0)\n\n#Converting image into Gray\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ncv2.imshow('gray',img)\ncv2.waitKey(0)","ac9325e9":"img = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\nprint(\"Image 1\")\nplt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\nplt.show()\n","92432724":"img2 = cv2.imread('\/kaggle\/input\/blendimg\/blend.jpg')\nprint(\"Image 2\")\nplt.imshow(cv2.cvtColor(img2, cv2.COLOR_BGR2RGB))\nplt.show()","55d6b1a2":"#Making shape equal size\nimg =cv2.resize(img,(400,400))\nimg2 =cv2.resize(img2,(400,400))\n\n# Smoothing or blending\n# Alpha = 0.7 \n# Beta 0.1\nblended = cv2.addWeighted(src1=img,alpha=0.7,src2=img2,beta=0.1,gamma=0)\nplt.imshow(cv2.cvtColor(blended, cv2.COLOR_BGR2RGB));","a4488dba":"# Smoothing or blending\n# Alpha = 0.6\n# Beta 0.3\nblended = cv2.addWeighted(src1=img,alpha=0.6,src2=img2,beta=0.3,gamma=0)\nplt.imshow(cv2.cvtColor(blended, cv2.COLOR_BGR2RGB));","f9c09941":"img = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\nfont = cv2.FONT_HERSHEY_COMPLEX\ncv2.putText(img,text='BAZINGA',org=(10,300), fontFace=font,fontScale= 4,color=(0,255,0),thickness=4)\nplt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB));","b041c115":"#Reading the image \nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n# apply a Gaussian blur with a 7x7 kernel to the image to smooth it,\n# useful when reducing high frequency noise\nblurred = cv2.GaussianBlur(img, (7,7), 0)\nplt.imshow(cv2.cvtColor(blurred, cv2.COLOR_BGR2RGB));","a452c53d":"# Binary Thresholding\n\n#Reading the image \nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\n#Converting image into Grayscale\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n# Binary Thresholding\nret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\nplt.imshow(cv2.cvtColor(thresh1, cv2.COLOR_BGR2RGB));","3529cc42":"# Binary inverse Thresholding\n\nret,thresh2 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)\nplt.imshow(cv2.cvtColor(thresh2, cv2.COLOR_BGR2RGB));","e974fd1a":"#Reading the image \nimg = cv2.imread('\/kaggle\/input\/inputimg\/input_pic.jpg')\n\nedges = cv2.Canny(img,100,200)\nplt.imshow(cv2.cvtColor(edges, cv2.COLOR_BGR2RGB));\n","e5a0ead8":"![](https:\/\/imgur.com\/UvNyHiT.jpg)\n**This is the era of Artificial intelligence, image classification, object detection, facial recognition, object tracking and many other applications gain a lot of fame and importance.**\n\n**Either if you are fascinating by facial recognition, object detection or any other such application or you are looking for an implementation of such application then Opencv can help you in many ways.**\n\n**This Article begins with definition of few important and fundamental concepts and further explains implementation of these concepts using Opencv.\nAt the end of the article you will understand and implement the fundamentals of image processing using Opencv. This important concept you can use in your project as well.**\n\n**In the end, I will request all readers to follow official documentation for other important concepts.\nSo without a wait for a second, let\u2019s catch and understand the basics and fundamentals of image processing using Opencv.**\n","239223e5":"## Reading and displaying image\n* Let\u2019s Begin our journey with very first task, which is reading and displaying image.\n* First task to Import cv2 module\n* Now Read the image using imread () method of Opencv, specify the path of input image in the argument and also image object in variable.\n* Display the image using imshow () method of Opencv, specify window name as first argument and image object variable in second image argument","efdd8894":"### References:\nhttps:\/\/docs.opencv.org\/2.4\/doc\/tutorials\/tutorials.html\n\nhttps:\/\/www.pyimagesearch.com\/2018\/07\/19\/opencv-tutorial-a-guide-to-learn-opencv\/\n\n\n","b8601c90":"## Checking the Type and shape of Image\nAs we have discussed previously, image can represented as an array of digits where each digits is the value of pixel. \n\nSo once you read the image using imread () method of Opencv then Image treated as numpy array of n-dimension (usually 2 dimension array for black and white image and 3 dimension array for colour image).","1854bfca":"## Smoothing or blurring\n\nThis is also called low-pass frequency filter, which is used for removing high frequency noise from digital image data. Or you think as removing outlier pixel from data.\n\nFor blurring image there are multiple methods and techniques such as mean Blurring, median blurring, Gaussian Blurring but usually GaussianBlur () often used method for that.\n\n\n","0941cf1a":"**Let\u2019s do resizing using axis value which simply mean that you are only changing aspect ratio of image.**\n\n* Here we will not change the lenght and width but we will change aspect ratio","1628a940":"## Edge Detection\n\nEdge Detection is way detect corners in given image. Canny Edge Detection is popular edge detection algorithm available in Opencv.\n\nAll we need to call cv2.canny () method for Edge detection.\n\n","de83510b":"**Resizing image using length and width setting**\n\n* cv2.resize(img_object,(width,length)","631cd76f":"## Important terminology in image processing:\nBefore we start let\u2019s understand few important definition in image processing\n\n**Digital Image**:  In short digital Image is a pictorial or graphical representation of given data. The computer can only understand data in the form of digits (basically 0\u2019s and 1\u2019s), so every image can be represented as an array of digits where each digit is the value of the pixel. \n\n**Pixel**: Pixel is the smallest unit of the digital image. Pixel also is known as picture elements, when all pixels combined to form a complete image or video. \n\n**Grayscale Image**: Grayscale is a range of monochromatic shades from black to white. Therefore, a grayscale image contains only shades of gray and no color. Grayscale helps to remove color information from the image, the Pixel value of grayscale image range from 0 to 255. You can think the grayscale image is the black and white image or photo in earlier days.\n\n**Region of Interest (ROI)**: A region of interest (ROI) is a portion of an image that you want to filter or perform some other operation on that.\n\n**Kernel**: In image processing, a kernel, convolution matrix, or mask is a small matrix. This could be shape of 3x3 or 5x5 or other size. Usually this a square matrix which number of rows and columns are equal. It is used for blurring, sharpening, embossing, edge detection, and many more.\n\n**Noise in image**: Noise is randomness in data. In Image, noise is random variations in a parameter such as brightness, etc. It is degradation is image information by some external source. Image noise could be additive or multiplicative in nature.\n\n**Smoothing or blurring**: This is also called low-pass frequency filter, which is used for removing high frequency noise from digital image data\n\t\t\t\t\t**\u201cOR\u201d**\nSmoothing or blurring is way of removing outlier pixel from data by applying low pass filter.\n\n**Image gradient**: An image gradient is a directional change in the intensity or colour in an image. This is fundamental building block for many algorithms such as canny edge detection.\n","c39dda2e":"**Shape of Image**\n\nWe have already know that Images are stored in numpy ndarray. To get the image shape or size, use ndarray.shape to get the dimensions of the image. Then, you can use index on the dimensions variable to get width, height and number of channels for each pixel. Any image ndarray is tuple of size 2 or 3.\n\nShape of image = (length, width, no of channels)\n\nLet\u2019s have a look for below piece of code \n","629f1a95":"**Yehhh!!! Finally we write BAZINGA over our favourite image **","1557906f":"## Installing Opencv and numpy:\nFor working with we need two important libraries\n1.\tNumpy\n2.\tOpencv\n\nYet, if you haven\u2019t install any library. Please follow given below official documentation\n\nFor Opencv installation: https:\/\/pypi.org\/project\/opencv-python\/\n\nFor Numpy Installation: https:\/\/pypi.org\/project\/numpy\/\n\nSo Let\u2019s Begin our journey by reading and displaying image using opencv\n","f727a1aa":"## Introduction:\n\nOpencv was officially launched in 1999. The Opencv project was initially an Intel Research initiative to advance CPU-intensive applications, part of a series of projects including real-time ray tracing and 3D display wall. Originally Opencv was developed in C++ programming language but now Opencv also supports data science favourite python programming language also. Opencv Contains many popular build-in algorithms for computer vision including object detection and object tracking. The current version of Opencv is 4.2.0.For more information, \n\nPlease follow this link https:\/\/opencv.org\/releases\/.\n","784dd2f5":"## Resizing image\n\nResizing the image means that changing the dimensions, which means that\n\n-\tChanging the Aspect ratio(length width ratio)\n-\tChanging length and width directly\n\nFor resizing the image we just need to call Opencv function name resize () with some parameters.\nResize method syntax as follow: \n\ncv2.resize (source image (required), desired size of output (required), scale factor along horizontal axis (optional), scale factor along vertical axis (optional))\n\nIn short all you need to understand that if we change Scale factor that mean we are changing aspect ratio of image.\n","c15fec64":"## Writing text over image\n\nWe often want to put or write some text over image to indicate information for example name of person, place, age, gender etc.\n\nOpencv has putText () Method for writing text over any image where we need to pass following parameters in given sequence\n\n1.\tImage object\n2.\tText that we need to write\n3.\tStart place from where we need to write text\n4.\tFont style\n5.\tFont Size\n6.\t Font colour\n7.\tFont thickness\n\nLet\u2019s have a look this into action by writing lines of python code.\n","63a832bc":"**Let have look how to change these colour spaces in opencv**\n\n**For changing colour space we just need to opencv method cv2.cvtcolor ()**\n","86a959b3":"## Image Thresholding\n\nImage Thresholding is very important step intermediary step of image processing. Image Thresholding can help us to remove noise from data.\n\nIn Opencv for Thresholding we have threshold () function, this function have many technique such as \n\n1.\tBinary Thresholding \n2.\tBinary inverse Thresholding\n3.\tAdaptive Thresholding\n4.\tTo Zero Thresholding\n5.\tTo Zero Inverse Thresholding\n","4fd8374e":"## Color Space in Opencv\n\nSo far so we have worked with RGB (Red, Green, and Blue) colour space but Around 1970 HSL (hue, saturation, lightness) and HSV (hue, saturation, value) as alternative colour models.\n\nThese colour models are actually more aligned with way human perceives colour. \n\n\n\n![color1.jpg](attachment:color1.jpg)\n\n\n![color2.jpg](attachment:color2.jpg)\n\n","55dd2838":"## Blending images\n\nIn many cases we work on more than one images and many times we want to overlay one image over another image, Opencv has many programmatic methods of blending images together and pasting images on top of each other.\n\nIn Opencv addweighted () function used both image and combine them.\n\nThere is simple formula for that\n\n\\begin{equation*}\nImage1 * \\alpha + Image2*\\beta + y\n\\end{equation*}\n\nValues of alpha and beta decides which image in foreground and which image in background.\n\nSo we have two images and we want to use second as background image and first image as foreground image.\n","087a8ea0":"## End Note\n** For complete Understanding I urge all reader to Follow Official Docuementation of Opencv**\n\nFor More practical approach please visit, this Amazing work \n\nhttps:\/\/www.kaggle.com\/bulentsiyah\/learn-opencv-by-examples-with-python\n\n### Thank you!!! Please Upvote my kernel if you like my work.","695431c6":"# Practical guide to Opencv using Python","aaf9b2bb":"## Cropping Image or ROI extraction from Image\n\nCropping mean selecting a particular area from image. This Process also known as extracting Region of interest or ROI. In Opencv we do as following\n\nnew_image = image [length: length+h, width: width+w]\n\t\t\tOR\nNew_image = image [start row: end row, start col: end col]\n\n\nLet\u2019s have write code where we can crop an image where,\n\nStart row =100    \t\tStart column = 100\n\nEnd row = 300\t\t\tEnd Column = 200\n","85bca410":"# Table of Contents\n* <a id='section1'>Introduction <\/a>\n* <a id='Section2'> Important Terminology and concepts<\/a>\n* <a id='Section3'> Reading and Displaying image<\/a>\n* <a id='section4'> Checking Type and Shape of Image<\/a>\n* <a id='section5'> Resizing image<\/a>\n* <a id='section6'> Cropping or ROI Extraction from Image <\/a>\n* <a id='section7'> Color Space in Opencv <\/a>\n* <a id='section8'> Blending <\/a>\n* <a id='section9'> Writting Text Over Image <\/a>\n* <a id='section10'> Smoothing or Blurring <\/a>\n* <a id='section11'> Image Thresholding <\/a>\n* <a id='section12'> Edge Detection<\/a>\n* <a id='section13'> References<\/a>\n* <a id='section13'> End Note<\/a>\n\n","d80e39ec":"**Only by Hit and trail method you can find what Thresholding technique suit on my image. So I urge all reader to check with other threshold technique.**","82f6ac66":"**Its numpy array so for image processing that why we need just work for matrix operations.**","f0fd18b0":"**Note : Shapes of both images should be equal for blending and we can achieve by using resize method of Opencv()**","8af714bf":"**I Urge all Reader try with different value of alpha and beta and check the difference**"}}