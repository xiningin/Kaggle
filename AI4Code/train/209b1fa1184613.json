{"cell_type":{"aee3eadf":"code","096f1fb8":"code","14772aae":"code","7dcf4b80":"code","631e3d5b":"code","7fad7038":"code","6025eff8":"code","9dfd39e1":"code","5adf6a8e":"code","d0883173":"code","2a0f8a53":"code","02686eb7":"code","b6f68c17":"code","07744124":"code","376209e0":"code","4ea1b9e2":"code","e710e7f3":"code","ba5d2475":"markdown","6159f936":"markdown","4b4cf568":"markdown","82afeddc":"markdown","7ef2ed68":"markdown","444f09a4":"markdown","30f70edd":"markdown","322e63e1":"markdown","8ee3144f":"markdown","ad5f665d":"markdown","91b31cc2":"markdown","14ced0c1":"markdown","e67a8794":"markdown","8f017ee2":"markdown","5b8e561d":"markdown","de943632":"markdown","2221463d":"markdown"},"source":{"aee3eadf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom collections import Counter\nfrom xgboost import XGBClassifier\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam, SGD\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense, Dropout, Input\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\npd.options.mode.chained_assignment = None ","096f1fb8":"df = pd.read_csv('..\/input\/gender-classification\/Transformed Data Set - Sheet1.csv')","14772aae":"df['Favorite Music Genre'] = np.where(df['Favorite Music Genre']=='Folk\/Traditional', 'Folk', df['Favorite Music Genre'])","7dcf4b80":"df","631e3d5b":"def bars(column):\n    fig, ax = plt.subplots(1, 1, figsize=(7, 4))\n    \n    fem = df[column][np.where(df['Gender']=='F', True, False)]\n    mal = df[column][np.where(df['Gender']=='M', True, False)]\n\n    fcount = Counter(fem)\n    mcount = Counter(mal)\n\n    f = ax.bar(fcount.keys(), list(fcount.values()), width=.5, color='lightgreen')\n    m = ax.bar(fcount.keys(), list(mcount.values()), bottom=list(fcount.values()), width=.5, color='orange')\n\n    ax.legend((f, m), ('F', 'M'))\n    ax.set_title(column + ' per gender')\n    ax.set_xlabel(column)\n    ax.set_ylabel('Number of people')\n    plt.show()","7fad7038":"bars('Favorite Color')","6025eff8":"bars('Favorite Music Genre')","9dfd39e1":"bars('Favorite Beverage')","5adf6a8e":"bars('Favorite Soft Drink')","d0883173":"le = LabelEncoder()\n\nfor col in df:\n    df[col] = le.fit_transform(df[col])\n    \nX = df.drop('Gender', axis=1)\ny = df['Gender']","2a0f8a53":"for col in X:\n    fig, axes = plt.subplots(1, 5, figsize=(15, 3))\n    \n    feature = X[col]\n    log = (feature+1).transform(np.log)\n    box_cox = pd.Series(stats.boxcox(feature+1)[0])\n    ss = pd.DataFrame(StandardScaler().fit_transform(np.array(feature).reshape(-1, 1)))\n    mm = pd.DataFrame(MinMaxScaler().fit_transform(np.array(feature).reshape(-1, 1)))\n    \n    feature.hist(ax=axes[0], color='blue')\n    log.hist(ax=axes[1], color='orange')\n    box_cox.hist(ax=axes[2], color='green')\n    ss.hist(ax=axes[3], color='purple')\n    mm.hist(ax=axes[4], color='pink')\n    \n    axes[0].set_title('Normal')\n    axes[1].set_title('Log transform')\n    axes[2].set_title('Box Cox')\n    axes[3].set_title('Standard Scaler')\n    axes[4].set_title('Min Max Scaler')\n    \n    X[col+'_log'] = log\n    X[col+'_boxcox'] = box_cox","02686eb7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","b6f68c17":"def scale(scaler, ending):\n    for col in X.columns[:4]:\n        X_train[col+'_'+ending]=pd.DataFrame(scaler.fit_transform(np.array(X_train[col]).reshape(-1, 1)))\n        X_test[col+'_'+ending] = pd.DataFrame(scaler.transform(np.array(X_test[col]).reshape(-1, 1)))\n\nscale(StandardScaler(), 'ss')\nscale(MinMaxScaler(), 'mm')\n    \nX_train = X_train.fillna(0)\nX_test = X_test.fillna(0)","07744124":"sns.heatmap(X.corr(), annot=True)\nplt.show()","376209e0":"pca = PCA(n_components=10)\nX_train = pca.fit_transform(X_train, y_train)\nX_test = pca.transform(X_test)\nevr = pca.explained_variance_ratio_\n\nplt.bar(range(len(evr)), evr, color='lightgreen')\nplt.title('Explained variance ratio of top 10 features')\nplt.ylabel('Explanined variance ratio')\nplt.xlabel('Top 10 features')\nplt.show()","4ea1b9e2":"models = [['SVC', SVC(random_state=1)], ['LinearSVC', LinearSVC(random_state=1, max_iter=1342)], \n          ['K Nearest Neighbours', KNeighborsClassifier()], \n          ['Random Forest', RandomForestClassifier(random_state=1)], \n          ['XGBoost', XGBClassifier(random_state=1)]]\nscores = []\ncross_vals = []\n\nfor classifier in models:\n    model = classifier[1]\n    model.fit(X_train, y_train)\n\n    score = model.score(X_test, y_test)\n    cross_val = cross_val_score(model, X_test, y_test).mean()\n\n    scores.append(score)\n    cross_vals.append(cross_val)\n\n    print(classifier[0], 'score: ' + str(round(score*100, 2)) + '% cross val: ' + str(round(cross_val*100, 2)) + '%')","e710e7f3":"labels = []\nfor label in np.array(models):\n    labels.append(label[0])\n    \nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 5))\n\nax1.bar(labels, scores, color='skyblue')\nax1.set_title('Model scores')\n\nax2.bar(labels, cross_vals, color='pink')\nax2.set_title('Cross val score')\n\nplt.show()","ba5d2475":"Subsequently, we will then split the X and y into train and test sets.","6159f936":"## Classifing data\nThe final stage of our notebook is creating a classification model which predicts whether a person is male or female, based on our given data.","4b4cf568":"Afterwards, we now use bar charts to see how much the top 10 features in our dataset contribute to predicting our final result.","82afeddc":"Both genders roughly evenly enjoy the different beverages.","7ef2ed68":"Next, we apply the transformations that we graphed in the above graphs.","444f09a4":"# Gender Classification\nThis notebook aims to visualise the different interests that males and females have, and then use the data to create a classifier which predicts the different genders.","30f70edd":"The following plot is a heatmap which shows the correlation of the different features in X.","322e63e1":"Furthermore, we will be taking a look at the distribution of the different features when various transformation and scaling techniques are applied. The below graphs show the log, box cox, standard scaler and min max scaler transformations applied to our four features in X.","8ee3144f":"Finally, we use bar charts to visualise how accurate each classifier has been in predicting our data.","ad5f665d":"We make five models: SVC, Linear SVC, K Nearest Neighbours, Random Forest and XGBoost. Then, we loop over each of them, fit our train data to them, and print the accuracies of each predictor.","91b31cc2":"Women substantially enjoy rock and pop more, while men significantly like hip hop, folk and jazz more.","14ced0c1":"## Feature engineering\nNow it is time to engineer our features so that they can be inputted into our classifier.","e67a8794":"Here we can see that women like 7UP\/Sprire and Coca Cola\/Pepsi more, wheras men like Fanta and other drinks.","8f017ee2":"Firstly, we want to convert the categorical features into numerical ones using a LabelEncoder. Then, we split the 'df' dataframe into X and y.","5b8e561d":"## Data visualisation\nFirstly, we will take a look at the data by creating bar charts which show how many men and women like the different features in our dataframe.","de943632":"Here we can see that women prefer cool colours, both genders like neutral ones and men slightly like warm colours more.","2221463d":"### Thank you for reading my notebook.\n### If you enjoyed this notebook and found it helpful, please give it an upvote so that I can make more of these."}}