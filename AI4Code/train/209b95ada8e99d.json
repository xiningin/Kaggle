{"cell_type":{"8dee7c10":"code","1c37c3bb":"code","56b43bd2":"code","53d5c674":"code","82ad3004":"code","4dbdb113":"code","8c10ca44":"code","42c9751c":"code","5b3bf130":"code","e024438e":"code","5e528115":"code","f693f578":"code","c177e6e9":"code","fd50845f":"code","e9f3ca67":"code","0fc30ff5":"code","5e43366b":"code","bd8bab52":"code","878012ed":"code","5aca493f":"code","cf960c36":"code","bd146a5b":"code","38feb52d":"code","2830eb26":"code","bb243c73":"code","2f411f4b":"code","cd037b8b":"code","de25d7b1":"code","98f0ad0d":"code","9cfda706":"code","27204aa1":"code","ec71a758":"code","63a6eae4":"code","c4ef0f95":"code","c952109d":"code","ab4a2815":"code","46fc0a2f":"code","c732cd97":"code","a28a26dd":"code","a3c40f56":"code","a18aa92e":"code","2ef2e42b":"code","4309d65c":"code","31845283":"code","6ebd880d":"code","1fac6b28":"code","fa9afe24":"code","8b24f4f5":"code","7ab436a6":"code","da5fa065":"code","d5cf0e78":"code","63027aa0":"markdown","5b54d26e":"markdown","56b0d2ac":"markdown","28a1d28a":"markdown"},"source":{"8dee7c10":"# Import Libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n%matplotlib inline","1c37c3bb":"# Import Dataset\ndf = pd.read_csv(\"..\/input\/train.csv\", delimiter = \",\")\ndf.head(2)","56b43bd2":"# Missing Values\n\nfig, ax = plt.subplots(figsize=(9,5))\nsns.heatmap(df.isnull(), cbar=False, cmap=\"YlGnBu_r\")\nplt.show()","53d5c674":"# we can delete \"Name, ID, Ticket and Cabin\" parameters\ndf.drop([\"PassengerId\", \"Name\",\"Ticket\", \"Cabin\"], axis = 1, inplace = True) # Drop ","82ad3004":"df.head()","4dbdb113":"list(df.columns)","8c10ca44":"df.info() # we have missing values","42c9751c":"df.describe().T","5b3bf130":"df['Survived'].value_counts() * 100 \/ len(df)","e024438e":"df['Survived'].value_counts().plot(kind='bar')\nplt.show()","5e528115":"df['Pclass'].value_counts().plot(kind='pie')\nplt.show()","f693f578":"df['Sex'].value_counts()","c177e6e9":"df['Embarked'].value_counts()","fd50845f":"df.Age.plot(kind='hist', bins=20);","e9f3ca67":"# Embarked - Age\nsns.catplot(x=\"Embarked\",y=\"Age\", data = df); ","0fc30ff5":"%config InlineBackend.figure_format = \"retina\"\nsns.catplot(x=\"Embarked\",y=\"Age\", data = df, hue = \"Sex\");","5e43366b":"sns.catplot(x = \"Sex\", y = \"Age\", hue = \"Survived\", kind = \"point\", data = df);","bd8bab52":"sns.catplot(x = \"Sex\", y = \"SibSp\", hue = \"Survived\", kind = \"point\", data = df);","878012ed":"sns.boxplot(\"SibSp\",\"Age\", data = df);","5aca493f":"sns.boxplot(\"SibSp\",\"Fare\", data = df);","cf960c36":"sns.boxplot(\"SibSp\",\"Fare\", hue = \"Survived\",data = df);","bd146a5b":"sns.catplot(\"Survived\",\"SibSp\", kind = \"violin\", hue = \"Sex\", data = df);","38feb52d":"g = sns.FacetGrid(data = df, row = \"Sex\", col = \"Survived\")\ng.map(plt.hist, \"Parch\");","2830eb26":"print(pd.isnull(df).sum())","bb243c73":"df.hist(bins=10,figsize=(8,5),grid=False);","2f411f4b":"g = sns.FacetGrid(df, hue=\"Survived\", col=\"Pclass\", margin_titles=True,palette={1:\"blue\", 0:\"red\"})\ng=g.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend();","cd037b8b":"df.corr()[\"Survived\"]","de25d7b1":"g = sns.FacetGrid(df, hue = 'Survived', aspect=3)\ng.map(sns.kdeplot, 'Age', shade= True )\ng.set(xlim=(0 , df['Age'].max()))\ng.add_legend();","98f0ad0d":"from sklearn.preprocessing import LabelEncoder\n\nlabelencoder_Sex = LabelEncoder()\ndf.Sex = labelencoder_Sex.fit_transform(df.Sex)","9cfda706":"df.Embarked = df[\"Embarked\"].astype(\"str\")\n\nlabelencoder_Embarked = LabelEncoder()\ndf.Embarked = labelencoder_Embarked.fit_transform(df.Embarked)","27204aa1":"# Missing Value Imputation for \"Age\" Parameter\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy=\"median\")\ndf[\"Age\"] = imputer.fit_transform(df[\"Age\"].values.reshape(-1,1))\ndf = df.dropna(how = \"all\")","ec71a758":"XX= df.iloc[:,1:].values\nXX.shape","63a6eae4":"y = df.iloc[:,0].values\ny.shape","c4ef0f95":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nXX = scaler.fit_transform(XX)","c952109d":"XX[:5]","ab4a2815":"y[:12]","46fc0a2f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(XX, y, test_size=0.25, random_state=14)","c732cd97":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","a28a26dd":"from sklearn.neighbors import KNeighborsClassifier\n\n# KNN model\n\nclassifier = KNeighborsClassifier(n_neighbors=9, metric='minkowski', p=2)\nclassifier.fit(X_train, y_train)","a3c40f56":"y_pred = classifier.predict(X_test)\npredictions = pd.DataFrame(data=y_pred,    # values\n                index=range(len(y_pred)),    # 1st column as index\n                   columns=['y_pred'])  # 1st row as the column names\n\npredictions['y_test'] = y_test\npredictions.head()","a18aa92e":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true=y_test, y_pred=y_pred)\nprint(cm)","2ef2e42b":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_true=y_test, y_pred=y_pred)\nprint(\"Accuracy: % {:10.2f}\".format(accuracy*100)) ","4309d65c":"accuracy_list = []\nk_list = []\n\nfor k in range(2,10):\n    classifier = KNeighborsClassifier(n_neighbors=k, metric='minkowski', p=2)\n    classifier.fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    accuracy_list.append(accuracy)\n    k_list.append(k)\n    print(\"{} i\u00e7in accuracy: {:10.2f}\".format(k,accuracy))","31845283":"test = pd.read_csv(\"..\/input\/test.csv\", delimiter = \",\")","6ebd880d":"test.head(2)","1fac6b28":"test.drop([\"PassengerId\", \"Name\",\"Ticket\", \"Cabin\"], axis = 1, inplace = True)\ntest.info()","fa9afe24":"imputer = SimpleImputer(strategy=\"median\")\ntest[\"Age\"] = imputer.fit_transform(test[\"Age\"].values.reshape(-1,1))\ntest = test.dropna(how = \"all\")\n\n\nimputer = SimpleImputer(strategy=\"median\")\ntest[\"Fare\"] = imputer.fit_transform(test[\"Fare\"].values.reshape(-1,1))\ntest = test.dropna(how = \"all\")","8b24f4f5":"labelencoder_Sex = LabelEncoder()\ntest.Sex = labelencoder_Sex.fit_transform(test.Sex)\n\n\ntest.Embarked = df[\"Embarked\"].astype(\"str\")\n\nlabelencoder_Embarked = LabelEncoder()\ntest.Embarked = labelencoder_Embarked.fit_transform(test.Embarked)","7ab436a6":"XY_test= test.values\nscaler = StandardScaler()\nXY_test = scaler.fit_transform(XY_test)\nXY_test[:10]","da5fa065":"classifier.predict(XY_test)","d5cf0e78":"# test = pd.read_csv(\"..\/input\/test.txt\", delimiter = \",\")\n# test.drop([\"Name\",\"Ticket\", \"Cabin\", \"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"Embarked\"], axis = 1, inplace = True)\n# test[\"Survived\"] = classifier.predict(XY_test)\n# test.to_csv(\"sonuc.csv\", index = False, header = True)\n\n","63027aa0":"# Model\n## Test-Train","5b54d26e":"# Label Encoder","56b0d2ac":"# EDA","28a1d28a":"## Best Neighbors Number"}}