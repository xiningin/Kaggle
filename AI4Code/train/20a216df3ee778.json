{"cell_type":{"3caaf270":"code","a318ba2d":"code","a3ff1045":"code","e348fc16":"code","894e25c6":"code","7fd96c9a":"code","39b0ee64":"code","b2822ec7":"code","98e4e339":"code","6bfce51e":"code","56b93551":"code","48bf9510":"code","b6fd253f":"code","22f1f43f":"code","a0823f5c":"code","2cfdac14":"code","49afffc1":"code","dac043af":"code","df577a7e":"code","871cbecb":"markdown","59a7dee0":"markdown","c9236e27":"markdown","f5fc98d2":"markdown"},"source":{"3caaf270":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a318ba2d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","a3ff1045":"import pandas as pd\n#oasis_cross_sectional = pd.read_csv(\"..\/input\/mri-and-alzheimers\/oasis_cross-sectional.csv\")\noasis_longitudinal = pd.read_csv(\"..\/input\/mri-and-alzheimers\/oasis_longitudinal.csv\")","e348fc16":"oasis_longitudinal.describe()","894e25c6":"oasis_longitudinal.columns","7fd96c9a":"oasis_longitudinal.head(5)","39b0ee64":"oasis_longitudinal.isnull().sum()","b2822ec7":"import missingno as msno\nmsno.matrix(X)","98e4e339":"msno.matrix(oasis_longitudinal)","6bfce51e":"oasis_longitudinal['SES'].fillna(oasis_longitudinal['SES'].median(), inplace = True)\noasis_longitudinal['MMSE'].fillna(oasis_longitudinal['MMSE'].median(), inplace = True)","56b93551":"msno.matrix(oasis_longitudinal)","48bf9510":"y = oasis_longitudinal.CDR           ","b6fd253f":"Feature = ['MRI ID', 'Group', 'Visit', 'MR Delay', 'M\/F', 'Hand',\n       'Age', 'EDUC', 'SES', 'MMSE', 'eTIV', 'nWBV', 'ASF']\nXX = oasis_longitudinal[Feature]\nX = pd.get_dummies(XX)\n","22f1f43f":"from sklearn.model_selection import train_test_split \nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state = 0)\n    ","a0823f5c":"train = X_train.copy()\ntest = X_val.copy ()","2cfdac14":"my_imputer = SimpleImputer()\ntrain_X_imputed = pd.DataFrame(my_imputer.fit_transform(train))\ntest_X_imputed = pd.DataFrame(my_imputer.fit_transform(test))\n","49afffc1":"# Simple example for beginers how to adress \"\"\nimport numpy as np\nfrom sklearn                        import metrics, svm\nfrom sklearn.linear_model           import LogisticRegression\nfrom sklearn import preprocessing\nfrom sklearn import utils\n\n\nlab_enc = preprocessing.LabelEncoder() #label encodint\ntraining_scores_encoded = lab_enc.fit_transform(y_train) #change target for label encoding\nprint(training_scores_encoded)\nprint(utils.multiclass.type_of_target(y_train))\nprint(utils.multiclass.type_of_target(y_train.astype('int')))  #make y_trian a int\nprint(utils.multiclass.type_of_target(training_scores_encoded)) ","dac043af":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom xgboost import XGBRegressor\n\n#model2 = RandomForestClassifier(n_estimators=150, max_depth=4, random_state=1)\nmodel = GradientBoostingClassifier(random_state=1)\n#model3 = DecisionTreeClassifier(max_depth=3, random_state=1)\n#model=SGDClassifier(random_state=1)\n#model=ExtraTreesClassifier(random_state=1)\n#model = XGBRegressor()\n# Define the models\nmodel_1 = RandomForestClassifier(n_estimators=50, random_state=0)\nmodel_2 = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel_3 = RandomForestClassifier(n_estimators=200, min_samples_split=20, random_state=0)\nmodel_4 = RandomForestClassifier(n_estimators=300, max_depth=6, random_state=1)\n","df577a7e":"model.fit(train_X_imputed, training_scores_encoded)\nprediction = model.predict(test_X_imputed)\nprint(\"Random Forest Results, MAE: %f\" %(mean_absolute_error(y_val, prediction)))\nprint('model accuracy score',model.score(X_val,prediction))\n","871cbecb":"# Feature  \n","59a7dee0":"# Import Data\n","c9236e27":"# Data visualisering","f5fc98d2":"# Model training "}}