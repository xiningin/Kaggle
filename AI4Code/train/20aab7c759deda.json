{"cell_type":{"f64fd331":"code","d9c15d6c":"markdown"},"source":{"f64fd331":"### Case Study ###\n\n# Cyclistic bike-share analysis case study! In this case study, i will perform many real-world tasks of a junior data analyst. I will work for a fictional company, Cyclistic, and meet different characters and team members. In order to answer the key business questions, you will follow the steps of the data analysis process: ask, prepare, process, analyze, share, and act. Moreno (director of marketing and my manager) has assigned me the first question to answer: How do annual members and casual riders use Cyclistic bikes differently?\"\n\n# # # # # # # # # # # # # # # # # # # # # # # \n# Install required packages\n# tidyverse for data import and wrangling\n# lubridate for date functions\n# ggplot for visualization\n# # # # # # # # # # # # # # # # # # # # # # #  \ninstall.packages(\"tidyverse\")\ninstall.packages(\"lubridate\")\ninstall.packages(\"ggplot2\")\n\nlibrary(tidyverse)  #helps wrangle data\nlibrary(lubridate)  #helps wrangle date attributes\nlibrary(ggplot2)#helps visualize data\nlibrary(rmarkdown)\ngetwd() #displays your working directory\nsetwd(\"C:\\\\Users\\\\palma\\\\Downloads\\\\__MACOSX\\\\Capstone\") #sets your working directory to simplify calls to data ... make sure to use your OWN username instead of mine ;)\n\n#=====================\n# STEP 1: COLLECT DATA\n#=====================\n# Upload Divvy datasets (csv files) here\nd1 <- read_csv(\"202010-divvy-tripdata.csv\")\nd2 <- read_csv(\"202011-divvy-tripdata.csv\")\nd3 <- read_csv(\"202012-divvy-tripdata.csv\")\nd4 <- read_csv(\"202101-divvy-tripdata.csv\")\nd5 <- read_csv(\"202102-divvy-tripdata.csv\")\nd6 <- read_csv(\"202103-divvy-tripdata.csv\")\nd7 <- read_csv(\"202104-divvy-tripdata.csv\")\nd8 <- read_csv(\"202105-divvy-tripdata.csv\")\nd9 <- read_csv(\"202106-divvy-tripdata.csv\")\nd10 <- read_csv(\"202107-divvy-tripdata.csv\")\nd11 <- read_csv(\"202108-divvy-tripdata.csv\")\nd12 <- read_csv(\"202109-divvy-tripdata.csv\")\n\n#====================================================\n# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE\n#====================================================\n# Compare column names each of the files\n# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file\ncolnames(d1)\ncolnames(d2)\ncolnames(d3)\ncolnames(d4)\ncolnames(d5)\ncolnames(d6)\ncolnames(d7)\ncolnames(d8)\ncolnames(d9)\ncolnames(d10)\ncolnames(d11)\ncolnames(d12)\n\n# Rename columns  to make them consisent with q1_2020 (as this will be the supposed going-forward table design for Divvy)\n# I did not run this step, because it is irrelevant to the case. My data ranges from November 2020 to October 2021.\n\n(q4_2019 <- rename(q4_2019\n                   ,ride_id = trip_id\n                   ,rideable_type = bikeid \n                   ,started_at = start_time  \n                   ,ended_at = end_time  \n                   ,start_station_name = from_station_name \n                   ,start_station_id = from_station_id \n                   ,end_station_name = to_station_name \n                   ,end_station_id = to_station_id \n                   ,member_casual = usertype))\n\n(q3_2019 <- rename(q3_2019\n                   ,ride_id = trip_id\n                   ,rideable_type = bikeid \n                   ,started_at = start_time  \n                   ,ended_at = end_time  \n                   ,start_station_name = from_station_name \n                   ,start_station_id = from_station_id \n                   ,end_station_name = to_station_name \n                   ,end_station_id = to_station_id \n                   ,member_casual = usertype))\n\n(q2_2019 <- rename(q2_2019\n                   ,ride_id = \"01 - Rental Details Rental ID\"\n                   ,rideable_type = \"01 - Rental Details Bike ID\" \n                   ,started_at = \"01 - Rental Details Local Start Time\"  \n                   ,ended_at = \"01 - Rental Details Local End Time\"  \n                   ,start_station_name = \"03 - Rental Start Station Name\" \n                   ,start_station_id = \"03 - Rental Start Station ID\"\n                   ,end_station_name = \"02 - Rental End Station Name\" \n                   ,end_station_id = \"02 - Rental End Station ID\"\n                   ,member_casual = \"User Type\"))\n\n# Inspect the dataframes and look for incongruencies\nstr(d1)\nstr(d2)\nstr(d3)\nstr(d4)\nstr(d5)\nstr(d6)\nstr(d7)\nstr(d8)\nstr(d9)\nstr(d10)\nstr(d11)\nstr(d12)\n\n\n\n# Convert ride_id and rideable_type to character so that they can stack correctly\nd1 <-  mutate(d1, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type)) \nd2 <-  mutate(d2, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type)) \nd3 <-  mutate(d3, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd4 <-  mutate(d4, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd5 <-  mutate(d5, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd6 <-  mutate(d6, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd7 <-  mutate(d7, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd8 <-  mutate(d8, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd9 <-  mutate(d9, ride_id = as.character(ride_id)\n              ,rideable_type = as.character(rideable_type))\nd10 <-  mutate(d10, ride_id = as.character(ride_id)\n               ,rideable_type = as.character(rideable_type))\nd11 <-  mutate(d11, ride_id = as.character(ride_id)\n               ,rideable_type = as.character(rideable_type))\nd12 <-  mutate(d12, ride_id = as.character(ride_id)\n               ,rideable_type = as.character(rideable_type))\n\n#error bind_rows_(x, .id) : Column `start_station_id` can't be converted from numeric to characte. I had to apply mutate to 'start_station_id` \nd1 <-  mutate(d1, start_station_id = as.character(start_station_id)) \nd2 <-  mutate(d2, start_station_id = as.character(start_station_id)) \nd3 <-  mutate(d3, start_station_id = as.character(start_station_id))\nd4 <-  mutate(d4, start_station_id = as.character(start_station_id))\nd5 <-  mutate(d5, start_station_id = as.character(start_station_id))\nd6 <-  mutate(d6, start_station_id = as.character(start_station_id))\nd7 <-  mutate(d7, start_station_id = as.character(start_station_id))\nd8 <-  mutate(d8, start_station_id = as.character(start_station_id))\nd9 <-  mutate(d9, start_station_id = as.character(start_station_id))\nd10 <-  mutate(d10, start_station_id = as.character(start_station_id))\nd11 <-  mutate(d11, start_station_id = as.character(start_station_id))\nd12 <-  mutate(d12, start_station_id = as.character(start_station_id))\n\n#Error in bind_rows_(x, .id) : Column `end_station_id` can't be converted from numeric to character.I had to apply mutate to 'end_station_id` \n\nd1 <-  mutate(d1, end_station_id = as.character(end_station_id)) \nd2 <-  mutate(d2, end_station_id = as.character(end_station_id)) \nd3 <-  mutate(d3, end_station_id = as.character(end_station_id))\nd4 <-  mutate(d4, end_station_id = as.character(end_station_id))\nd5 <-  mutate(d5, end_station_id = as.character(end_station_id))\nd6 <-  mutate(d6, end_station_id = as.character(end_station_id))\nd7 <-  mutate(d7, end_station_id = as.character(end_station_id))\nd8 <-  mutate(d8, end_station_id = as.character(end_station_id))\nd9 <-  mutate(d9, end_station_id = as.character(end_station_id))\nd10 <-  mutate(d10, end_station_id = as.character(end_station_id))\nd11 <-  mutate(d11, end_station_id = as.character(end_station_id))\nd12 <-  mutate(d12, end_station_id = as.character(end_station_id))\n\n# Stack individual quarter's data frames into one big data frame\nall_trips <- bind_rows(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12)\n\n# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020. Not applicable for this analysis, due to the date in question.\nall_trips <- all_trips %>%  \n  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, \"01 - Rental Details Duration In Seconds Uncapped\", \"05 - Member Details Member Birthday Year\", \"Member Gender\", \"tripduration\"))\n\n#======================================================\n# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS\n#======================================================\n# Inspect the new table that has been created\ncolnames(all_trips)  #List of column names\nnrow(all_trips)  #How many rows are in data frame?\ndim(all_trips)  #Dimensions of the data frame?\nhead(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)\nstr(all_trips)  #See list of columns and data types (numeric, character, etc)\nsummary(all_trips)  #Statistical summary of data. Mainly for numerics\n\n# There are a few problems we will need to fix:\n# (1) In the \"member_casual\" column, there are two names for members (\"member\" and \"Subscriber\") and two names for casual riders (\"Customer\" and \"casual\"). We will need to consolidate that from four to two labels.\n# (2) The data can only be aggregated at the ride-level, which is too granular. We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.\n# (3) We will want to add a calculated field for length of ride since the 2020Q1 data did not have the \"tripduration\" column. We will add \"ride_length\" to the entire dataframe for consistency.\n# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.\n\n# In the \"member_casual\" column, replace \"Subscriber\" with \"member\" and \"Customer\" with \"casual\"\n# Before 2020, Divvy used different labels for these two types of riders ... we will want to make our dataframe consistent with their current nomenclature\n# N.B.: \"Level\" is a special property of a column that is retained even if a subset does not contain any values from a specific level\n# Begin by seeing how many observations fall under each usertype\ntable(all_trips$member_casual)\n\n# Reassign to the desired values (we will go with the current 2020 labels)\nall_trips <-  all_trips %>% \n  mutate(member_casual = recode(member_casual\n                                ,\"Subscriber\" = \"member\"\n                                ,\"Customer\" = \"casual\"))\n\n# Check to make sure the proper number of observations were reassigned\ntable(all_trips$member_casual)\n\n# Add columns that list the date, month, day, and year of each ride\n# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level\n# https:\/\/www.statmethods.net\/input\/dates.html more on date formats in R found at that link\nall_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd\nall_trips$month <- format(as.Date(all_trips$date), \"%m\")\nall_trips$day <- format(as.Date(all_trips$date), \"%d\")\nall_trips$year <- format(as.Date(all_trips$date), \"%Y\")\nall_trips$day_of_week <- format(as.Date(all_trips$date), \"%A\")\n\n# Add a \"ride_length\" calculation to all_trips (in seconds)\n# https:\/\/stat.ethz.ch\/R-manual\/R-devel\/library\/base\/html\/difftime.html\nall_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)\n\n# Inspect the structure of the columns\nstr(all_trips)\n\n## Convert \"ride_length\" from Factor to numeric so we can run calculations on the data\nis.factor(all_trips$ride_length)\nall_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))\nis.numeric(all_trips$ride_length)\n\n# Remove \"bad\" data\n# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative\n# We will create a new version of the dataframe (v2) since data is being removed\n# https:\/\/www.datasciencemadesimple.com\/delete-or-drop-rows-in-r-with-conditions-2\/\nall_trips_v2 <- all_trips[!(all_trips$start_station_name == \"HQ QR\" | all_trips$ride_length<0),]\n\n#=====================================\n# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS\n\n#=====================================\n# Descriptive analysis on ride_length (all figures in seconds)\nmean(all_trips_v2$ride_length) #straight average (total ride length \/ rides)\nmedian(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths\nmax(all_trips_v2$ride_length) #longest ride\nmin(all_trips_v2$ride_length) #shortest ride\n\n# You can condense the four lines above to one line using summary() on the specific attribute\nsummary(all_trips_v2$ride_length)\n\n# Compare members and casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)\n\n# See the average ride time by each day for members vs casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)\n\n# Notice that the days of the week are out of order. Let's fix that.\nall_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"))\n\n# Now, let's run the average ride time by each day for members vs casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)\n#Error in aggregate.data.frame(mf[1L], mf[-1L], FUN = FUN, ...) : no rows to aggregate. Search for a solution without finding it.\n\n# analyze ridership data by type and weekday\nall_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()\n  group_by(member_casual, weekday) %>%  #groups by usertype and weekday\n  summarise(number_of_rides = n()\t\t\t\t\t\t\t#calculates the number of rides and average duration \n            ,average_duration = mean(ride_length)) %>% \t\t# calculates the average duration\n  arrange(member_casual, weekday)\t\t\t\t\t\t\t\t# sorts\n\n# Let's visualize the number of rides by rider type\nall_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>% \n  group_by(member_casual, weekday) %>% \n  summarise(number_of_rides = n()\n            ,average_duration = mean(ride_length)) %>% \n  arrange(member_casual, weekday)  %>% \n  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +\n  geom_col(position = \"dodge\")\n\n# Let's create a visualization for average duration\nall_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>% \n  group_by(member_casual, weekday) %>% \n  summarise(number_of_rides = n()\n            ,average_duration = mean(ride_length)) %>% \n  arrange(member_casual, weekday)  %>% \n  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +\n  geom_col(position = \"dodge\")\n\n#=================================================\n# STEP 5: EXPORT SUMMARY FILE FOR FURTHER ANALYSIS\n#=================================================\n# Create a csv file that we will visualize in Excel, Tableau, or my presentation software\n# N.B.: This file location is for a Mac. If you are working on a PC, change the file location accordingly (most likely \"C:\\Users\\YOUR_USERNAME\\Desktop\\...\") to export the data. You can read more here: https:\/\/datatofish.com\/export-dataframe-to-csv-in-r\/\ncounts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)\nwrite.csv(counts, file = '~\/users\/palma\/Downloads\/__MACOSX\/Capstone')","d9c15d6c":"---\ntitle: \"Project case 1\"\nauthor: \"Roberto V\u00e1squez\"\ndate: \"19-10-2021\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Case Study\n\nCyclistic bike-share analysis case study! In this case study, i will perform many real-world tasks of a junior data analyst. I will work for a fictional company, Cyclistic, and meet different characters and team members. In order to answer the key business questions, you will follow the steps of the data analysis process: ask, prepare, process, analyze, share, and act. Moreno (director of marketing and my manager) has assigned me the first question to answer: How do annual members and casual riders use Cyclistic bikes differently?\n\nFor the analysis use public data for the last 12 months found at: <https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html.> \nData used uploaded to kaggle\n\n# Analysis\n\nFor the analysis, I used the RStudio data analysis tool due to the amount of data collected.\n\n##### **Difference between weekday and weekend rides**\n![](https:\/\/user-images.githubusercontent.com\/71468155\/137963925-7305b00a-0bd3-43f8-81dd-8951439599b8.png)\n\n##### **Difference between the length of rides**\n![](https:\/\/user-images.githubusercontent.com\/71468155\/137963931-9aec605f-f544-4fe3-bf95-783b692231ee.png)\n\n*Looking at the graphs, it can be seen that occasional users make trips with much longer periods than members (the difference is notorious) and the latter make their trips more frequently on Saturdays and Sundays. As for the members, they use the bicycles more frequently on weekdays (Monday to Friday) and decrease their use on Saturdays and Sundays.*\n\n# Recommendations\n\nThe analysis yielded trends in bicycle use by members and casual users, for this reason I propose:\n\n-   Special plans or weekend promotions for casual users.\n\n-   Discounts for longer trip lengths\n\n-   Keeping a record of trips of each user (member or not), to make personalized discounts or promotions.\n\n# **Limitations** \n\n-   Using Excel for this case was a bit disappointing due to the amount of data, as, Excel would freeze on my pc.\n\n-   I also could not upload the 12 months to Big Query because of the size of some months. (I don't have a premium account)\n\n-   RStudio was giving me a lot of errors, being a bit annoying but motivating. I looked for help in different portals, as the Google data analysis course taught me, managing to solve some important errors for my analysis.\n\n-I could not publish my Rmarkdown directly to Kaggle, so I had to improvise.\n\n[*I present you my script - Point to my working directory, use databases of months from November 2020 to October 2021. The database was month by month.*]{.ul}"}}