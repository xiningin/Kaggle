{"cell_type":{"b430ae83":"code","4aa8c014":"code","47f526dd":"code","066d73b0":"code","9b49b19b":"code","6c8dce83":"code","c9c69e55":"code","be5b8843":"code","0166a6fe":"code","2a735321":"code","74ecfe19":"code","90986632":"code","d7e778e4":"code","3643556d":"code","c53c0844":"code","1d23c42f":"code","6affcd73":"code","1c82210c":"code","58328e76":"code","420c50f3":"code","425be4d9":"code","58ffe1b3":"code","3b4df23d":"code","b5adcd23":"code","c002943f":"code","b5c313b6":"code","a51f0bd2":"code","1c7b3a4f":"code","0ab3ce2d":"code","44e95fef":"code","a5b991d7":"code","ad0df48c":"code","1e0ed6fc":"code","f0bf3e02":"code","f858682c":"code","070a1cf6":"code","dcbc9f62":"code","34a3a0dd":"code","581c2859":"code","04697825":"code","2454a017":"code","723bb4f8":"code","bf4ecbea":"code","bb7fa1eb":"code","b82092e0":"code","658a5cf1":"code","8fd254a8":"code","fb3e2a17":"code","752b6117":"code","12baf2cb":"code","51fa5fb3":"code","2218a94c":"code","04f384d8":"code","e960b7ab":"code","a4cea264":"code","f5af366e":"code","481d23d0":"code","fae84e96":"code","302f036b":"code","0ff2ef68":"code","9f121995":"code","b7571a63":"code","00031d86":"code","191a3a50":"code","be31fe7b":"code","d6f2f426":"code","03fd1069":"code","319310f9":"code","b4ed319d":"code","96b77db1":"code","9443489d":"code","7dc49227":"code","d370e8bc":"code","dd8cf202":"code","1c2f2415":"code","4ddd3904":"code","1837e034":"code","da728ec2":"code","f9759ab7":"code","d8f199c3":"code","2cc2c582":"code","10a4c904":"code","6dd13fd7":"code","9b80ae7f":"code","2b6a24aa":"code","dbed582b":"code","3cd0307a":"code","f8d87f7a":"code","a4af801a":"code","83bbd6da":"code","dc9bc039":"code","ec9cbc60":"code","71600530":"code","eaae3fbb":"code","a0aa8006":"code","9bebaaf3":"code","05d2bda9":"code","7b30861b":"markdown","51328ac6":"markdown","26980900":"markdown","a38df055":"markdown","609aec50":"markdown","5fbbcb54":"markdown","83841bb8":"markdown","bae01dcc":"markdown"},"source":{"b430ae83":"import numpy as np\nimport pandas as pd  \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport string\nimport re\n%matplotlib inline\n%precision 3","4aa8c014":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')","47f526dd":"train.head()","066d73b0":"train.info()","9b49b19b":"train_y = train[\"revenue\"]","6c8dce83":"df = pd.concat([train, test])","c9c69e55":"df.drop(columns=['overview','status','imdb_id','poster_path','original_title'], inplace = True)","be5b8843":"#\u8f9e\u66f8\u578b\u306b\u5909\u63db\nimport ast\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\ndef text_to_dict(df):\n    for column in dict_columns:\n        df[column] = df[column].apply(lambda x: {} if pd.isna(x) else ast.literal_eval(x) )\n    return df\n        \ndfx = text_to_dict(train)\nfor col in dict_columns:\n       train[col]=dfx[col]","0166a6fe":"train[train[\"runtime\"].isnull()]","2a735321":"train.loc[train['id'] == 1336,'runtime'] = 130 #kololyov\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2303,'runtime'] = 80 #HappyWeekend\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b","74ecfe19":"train[\"runtime\"].isnull().sum()","90986632":"train[train[\"runtime\"]==0]","d7e778e4":"train.loc[train['id'] == 391,'runtime'] = 96 #The Worst Christmas of My Life\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 592,'runtime'] = 90 #\u0410 \u043f\u043e\u0443\u0442\u0440\u0443 \u043e\u043d\u0438 \u043f\u0440\u043e\u0441\u043d\u0443\u043b\u0438\u0441\u044c\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 925,'runtime'] = 86 #\u00bfQui\u00e9n mat\u00f3 a Bambi?\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 978,'runtime'] = 93 #La peggior settimana della mia vita\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1256,'runtime'] = 92 #Cry, Onion!\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1542,'runtime'] = 93 #All at Once\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1875,'runtime'] = 93 #Vermist\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2151,'runtime'] = 108 #Mechenosets\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2499,'runtime'] = 86 #Na Igre 2. Novyy Uroven\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2646,'runtime'] = 98 #My Old Classmate\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2786,'runtime'] = 111 #Revelation\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2866,'runtime'] = 96 #Tutto tutto niente niente\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b","3643556d":"sns.distplot(train[\"runtime\"], kde=False, rug=False)","c53c0844":"test[test[\"runtime\"].isnull()]","1d23c42f":"test.loc[test['id'] == 3244,'runtime'] = 93 #La caliente ni\u00f1a Julietta\t\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4490,'runtime'] = 90 #Pancho, el perro millonario\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4633,'runtime'] = 108 #Nunca en horas de clase\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6818,'runtime'] = 90 #Miesten v\u00e4lisi\u00e4 keskusteluja\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b","6affcd73":"test[test[\"runtime\"]==0]","1c82210c":"test.loc[test['id'] == 4074,'runtime'] = 103 #Shikshanachya Aaicha Gho\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4222,'runtime'] = 91 #Street Knight\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4431,'runtime'] = 96 #Plus one\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5520,'runtime'] = 86 #Glukhar v kino\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5845,'runtime'] = 83 #Frau M\u00fcller muss weg!\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5849,'runtime'] = 140 #Shabd\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6210,'runtime'] = 104 #The Last Breath\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6804,'runtime'] = 140 #Chaahat Ek Nasha...\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 7321,'runtime'] = 87 #El truco del manco\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b","58328e76":"sns.distplot(test[\"runtime\"], kde=False, rug=False)","420c50f3":"corrmat = train.corr()\nplt.subplots(figsize=(12, 8))\nsns.heatmap(corrmat, square=True, cmap='coolwarm', annot=True,vmin=-1)\n#plt.savefig(\"TMDBcorr.png\")","425be4d9":"train[train[\"budget\"].isnull()]","58ffe1b3":"train[train[\"budget\"]==0]","3b4df23d":"test[test[\"runtime\"].isnull()]","b5adcd23":"test[test[\"budget\"]==0]","c002943f":"#release_date\u3092\u5e74\u3001\u6708\u3001\u65e5\u306b\u5206\u89e3\ndef date_features(df):\n    df['release_date'] = pd.to_datetime(df['release_date'])\n    df['release_year'] = df['release_date'].dt.year\n    df['release_month'] = df['release_date'].dt.month\n    df['release_day'] = df['release_date'].dt.day\n    df['release_quarter'] = df['release_date'].dt.quarter\n    df.drop(columns=['release_date'], inplace=True)\n    return df\n\ntrain=date_features(train)\ntest=date_features(test)\n\ntrain['release_year'].head(10)","b5c313b6":"df = pd.concat([train, test])","a51f0bd2":"df.drop(columns=['status','imdb_id','poster_path','original_title'], inplace = True)","1c7b3a4f":"#budget\u304c0\u306e\u7269\u3092\u4e88\u6e2c\uff08\u30c6\u30b9\u30c8\uff09\u30010\u3067\u306a\u3044\u7269\u3092training\u30c7\u30fc\u30bf\u3068\u3059\u308b\nbudget0 = df[df[\"budget\"] == 0]\nbudget = df[df[\"budget\"] != 0]\ntrain_X = budget[[\"popularity\",\"runtime\"]]\ntrain_y = budget[\"budget\"]\ntest_X = budget0[[\"popularity\",\"runtime\"]]\ntest_y = budget0[\"budget\"]","0ab3ce2d":"budget0","44e95fef":"#budget\u304c0\u306e\u7269\u3092\u7dda\u5f62\u56de\u5e30\u3067\u4e88\u6e2c\nfrom sklearn.linear_model import RidgeCV\nrcv= RidgeCV(cv=3, alphas = 10**np.arange(-2, 2, 0.1))\nrcv.fit(train_X, train_y)\ny_pred = rcv.predict(test_X)","a5b991d7":"budget0[\"id\"].index = range(0,2023)","ad0df48c":"budget_pred = pd.DataFrame(y_pred,columns=[\"pred\"])\nbudget_id = pd.DataFrame(budget0[\"id\"],columns=[\"id\"])\nbudget_pred = pd.concat([budget_id,budget_pred],axis = 1)\nbudget_pred","1e0ed6fc":"budget_pred.describe()","f0bf3e02":"#\u4e88\u7b97\u304c0\u3092\u4e0b\u56de\u3063\u3066\u3044\u308b\u3082\u306e\u306f\u304a\u304b\u3057\u3044\u306e\u30670\u306b\u623b\u3059\u3002\nbudget_pred.loc[budget_pred[\"pred\"] < 0, \"pred\"] = 0","f858682c":"df = pd.merge(df, budget_pred, on=\"id\", how=\"left\") \ndf.loc[budget_pred[\"id\"]-1, \"budget\"] = df.loc[budget_pred[\"id\"]-1, \"pred\"]\ndf = df.drop(\"pred\", axis=1)","070a1cf6":"df","dcbc9f62":"corrmat = df.corr()\nplt.subplots(figsize=(12, 8))\nsns.heatmap(corrmat, square=True, cmap='coolwarm', annot=True,vmin=-1)\n#plt.savefig(\"TMDBcorr.png\")","34a3a0dd":"df[\"overview\"]","581c2859":"df[\"overview\"].isnull().sum()","04697825":"df[\"overview\"]=df[\"overview\"].apply(lambda x : str(x))\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : str(x))","2454a017":"#\u5168\u3066\u5c0f\u6587\u5b57\u306b\u5909\u63db\ndef lower_text(text):\n    return text.lower()","723bb4f8":"df[\"overview\"]=df[\"overview\"].apply(lambda x : lower_text(x))\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : lower_text(x))","bf4ecbea":"#\u77ed\u7e2e\u5f62\u3092\u5143\u306b\u623b\u3059\nshortened = {\n    '\\'m': ' am',\n    '\\'re': ' are',\n    'don\\'t': 'do not',\n    'doesn\\'t': 'does not',\n    'didn\\'t': 'did not',\n    'won\\'t': 'will not',\n    'wanna': 'want to',\n    'gonna': 'going to',\n    'gotta': 'got to',\n    'hafta': 'have to',\n    'needa': 'need to',\n    'outta': 'out of',\n    'kinda': 'kind of',\n    'sorta': 'sort of',\n    'lotta': 'lot of',\n    'lemme': 'let me',\n    'gimme': 'give me',\n    'getcha': 'get you',\n    'gotcha': 'got you',\n    'letcha': 'let you',\n    'betcha': 'bet you',\n    'shoulda': 'should have',\n    'coulda': 'could have',\n    'woulda': 'would have',\n    'musta': 'must have',\n    'mighta': 'might have',\n    'dunno': 'do not know',\n}\ndf[\"overview\"] = df[\"overview\"].replace(shortened)\ntrain[\"overview\"] = train[\"overview\"].replace(shortened)","bb7fa1eb":"#\u8a18\u53f7\u306e\u6392\u9664\ndef remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)","b82092e0":"df[\"overview\"]=df[\"overview\"].apply(lambda x : remove_punct(x))\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : remove_punct(x))","658a5cf1":"# \u9023\u7d9a\u3057\u305f\u6570\u5b57\u30920\u3067\u7f6e\u63db\ndef normalize_number(text):\n    replaced_text = re.sub(r'\\d+', '0', text)\n    return replaced_text","8fd254a8":"df[\"overview\"]=df[\"overview\"].apply(lambda x : normalize_number(x))\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : normalize_number(x))","fb3e2a17":"#\u30ec\u30f3\u30de\u5316\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nwnl = WordNetLemmatizer()\ndf[\"overview\"]=df[\"overview\"].apply(wnl.lemmatize)\ntrain[\"overview\"]=train[\"overview\"].apply(wnl.lemmatize)","752b6117":"#\u7a7a\u767d\u3054\u3068\u306e\u6587\u7ae0\u306e\u5206\u5272\ndf[\"overview\"]=df[\"overview\"].apply(lambda x : str(x).split())\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : str(x).split())","12baf2cb":"df_overview = df[\"overview\"]","51fa5fb3":"def most_common(docs, n=100):#(\u6587\u7ae0\u3001\u4e0a\u4f4dn\u500b\u306e\u5358\u8a9e)#\u4e0a\u4f4dn\u500b\u306e\u5358\u8a9e\u3092\u62bd\u51fa\n    fdist = Counter()\n    for doc in docs:\n        for word in doc:\n            fdist[word] += 1\n    common_words = {word for word, freq in fdist.most_common(n)}\n    print('{}\/{}'.format(n, len(fdist)))\n    return common_words","2218a94c":"most_common(df_overview,100)","04f384d8":"def get_stop_words(docs, n=100, min_freq=1):#\u4e0a\u4f4dn\u500b\u306e\u5358\u8a9e\u3001\u983b\u5ea6\u304cmin_freq\u4ee5\u4e0b\u306e\u5358\u8a9e\u3092\u5217\u6319\uff08\u3042\u307e\u308a\u7279\u5fb4\u306e\u306a\u3044\u5358\u8a9e\u7b49\uff09\n    fdist = Counter()\n    for doc in docs:\n        for word in doc:\n            fdist[word] += 1\n    common_words = {word for word, freq in fdist.most_common(n)}\n    rare_words = {word for word, freq in fdist.items() if freq <= min_freq}\n    stopwords = common_words.union(rare_words)\n    print('{}\/{}'.format(len(stopwords), len(fdist)))\n    return stopwords","e960b7ab":"stopwords = get_stop_words(df_overview)\nstopwords","a4cea264":"def remove_stopwords(words, stopwords):#\u4e0d\u8981\u306a\u5358\u8a9e\u3092\u524a\u9664\n    words = [word for word in words if word not in stopwords]\n    return words","f5af366e":"df[\"overview\"]=df[\"overview\"].apply(lambda x : remove_stopwords(x,stopwords))\ntrain[\"overview\"]=train[\"overview\"].apply(lambda x : remove_stopwords(x,stopwords))","481d23d0":"df[\"overview\"]","fae84e96":"df[\"overview\"]=[\" \".join(review) for review in df[\"overview\"].values]\ntrain[\"overview\"]=[\" \".join(review) for review in train[\"overview\"].values]","302f036b":"df[\"overview\"]","0ff2ef68":"from sklearn.feature_extraction.text import TfidfVectorizer#\u30d9\u30af\u30c8\u30eb\u5316\nvec_tfidf = TfidfVectorizer()\nX = vec_tfidf.fit_transform(df[\"overview\"])\nTfid_overview = pd.DataFrame(X.toarray(), columns=vec_tfidf.get_feature_names())\n\nX2 = vec_tfidf.fit_transform(df[\"overview\"])\nTfid_train_overview = pd.DataFrame(X2.toarray(), columns=vec_tfidf.get_feature_names())","9f121995":"Tfid_overview","b7571a63":"\"\"\"\n#\u76ee\u7684\u5909\u6570\u3068\u30d9\u30af\u30c8\u30eb\u306e\u7dda\u5f62\u56de\u5e30\u306b\u3088\u308b\u5358\u8a9e\u306e\u91cd\u8981\u5ea6\u6bd4\u8f03\uff08\u9014\u4e2d\uff09\nfrom sklearn.linear_model import LinearRegression\nlinreg = LinearRegression()\nlinreg.fit(X2, np.log1p(train['revenue']))\"\"\"","00031d86":"\"\"\"\ncoef = pd.Series(linreg.coef_, index=Tfid_overview.columns)\ndf_coef = pd.DataFrame(coef[coef!=0], columns=[\"coef\"])\ndf_coef.sort_values(\"coef\", ascending=False)\"\"\"","191a3a50":"#\u5358\u8a9e\u6570\ndf['tagline_word_count'] = df['tagline'].apply(lambda x: len(str(x).split()))","be31fe7b":"#\u6587\u5b57\u6570\ndf['tagline_char_count'] = df['tagline'].apply(lambda x: len(str(x)))","d6f2f426":"# \u8a18\u53f7\u306e\u500b\u6570\ndf['tagline_punctuation_count'] = df['tagline'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))","03fd1069":"df['tagline']=df['tagline'].apply(lambda x : str(x))","319310f9":"df[\"tagline\"] = df[\"tagline\"].replace(shortened)","b4ed319d":"df['tagline']=df['tagline'].apply(lambda x : lower_text(x))","96b77db1":"df['tagline']=df['tagline'].apply(lambda x : remove_punct(x))","9443489d":"df[\"tagline\"]=df[\"tagline\"].apply(lambda x : normalize_number(x))","7dc49227":"df['tagline']=df['tagline'].apply(lambda x : str(x).split())","d370e8bc":"tagline = df[\"tagline\"]","dd8cf202":"most_common(tagline)","1c2f2415":"stopwords = get_stop_words(tagline)","4ddd3904":"df['tagline']=df['tagline'].apply(lambda x : remove_stopwords(x,stopwords))","1837e034":"nan = {\"nan\"}\ndef remove_nan(words):\n    words = [word for word in words if word not  in nan]\n    return words","da728ec2":"df['tagline']=df['tagline'].apply(lambda x : remove_nan(x))","f9759ab7":"df['tagline']=[\" \".join(review) for review in df['tagline'].values]","d8f199c3":"#\u30d9\u30af\u30c8\u30eb\u5316\nX = vec_tfidf.fit_transform(df['tagline'])\nTfid_tagline = pd.DataFrame(X.toarray(), columns=vec_tfidf.get_feature_names())","2cc2c582":"Tfid_tagline","10a4c904":"df.columns","6dd13fd7":"df_use = df[[\"runtime\",'budget','tagline_char_count']]","9b80ae7f":"df_use.columns","2b6a24aa":"df_use = pd.concat([df_use,Tfid_overview],axis=1)","dbed582b":"#\u4f7f\u7528\u3059\u308b\u5909\u6570\ndf_use = df_use.loc[:,~df_use.columns.duplicated()]","3cd0307a":"trainX = df_use.iloc[:train.shape[0],:].reset_index(drop=True)\ntest_X = df_use.iloc[train.shape[0]:,:].reset_index(drop=True)\ntrainy = train[\"revenue\"]","f8d87f7a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(trainX,trainy,test_size=0.3,random_state=100)","a4af801a":"import xgboost as xgb","83bbd6da":"\"\"\"\ndtrain = xgb.DMatrix(X_train, label=y_train)  \ndvalid = xgb.DMatrix(X_test, label=y_test)\"\"\"","dc9bc039":"#param = {'max_depth': 5, 'eta': 0.5, 'objective': 'reg:squaredlogerror', 'eval_metric': 'rmsle','alpha':0.5} ","ec9cbc60":"\"\"\"\nevallist = [(dvalid, 'eval'), (dtrain, 'train')]  \nnum_round = 20\nbst = xgb.train(param, dtrain, num_round, evallist, early_stopping_rounds=5)  \"\"\"","71600530":"reg = xgb.XGBRegressor()","eaae3fbb":"\"\"\"\n# \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u63a2\u7d22\nfrom sklearn.model_selection import GridSearchCV\n#reg_cv = GridSearchCV(reg, {'max_depth': [2,4,6], 'n_estimators': [100]})\nreg.fit(X_train, y_train)\n#print (reg_cv.best_params_, reg_cv.best_score_)\"\"\"","a0aa8006":"\"\"\"\nfrom sklearn.linear_model import Lasso\nfrom sklearn.metrics import mean_squared_error\nbest_rmse = 1\nfor num in range(1,100):\n    alpha = num*0.0001\n    reg=Lasso(alpha=alpha,max_iter=3000)\n    reg.fit(X_train,y_train)\n    y_pred=reg.predict(X_test)\n    rmse=np.sqrt(mean_squared_error(y_pred,y_test))\n    if best_rmse>rmse:\n        best_rmse=rmse\n        best_alpha=alpha\nprint(\"best_alpha\",alpha,\"rmse\",best_rmse)\"\"\"","9bebaaf3":"\"\"\"\nreg1=Lasso(alpha=0.0099,max_iter=3000)\nreg1.fit(X_train,y_train)\ny_pred1=reg.predict(test_X)\"\"\"","05d2bda9":"#y_pred1","7b30861b":"### Lasso","51328ac6":"### Xgboost","26980900":"### runtime","a38df055":"### budget","609aec50":"### \u4f7f\u7528\u3059\u308b\u5909\u6570","5fbbcb54":"### Tagline","83841bb8":"### overview","bae01dcc":"budget\u304c0\u306e\u7269\u304c\u591a\u3044\u306e\u3067\u624b\u5165\u529b\u306f\u53b3\u3057\u3044 \u2192\u2460\u88dc\u5b8c\u3057\u306a\u3044\u2461\u88dc\u5b8c\u3059\u308b\n\n\u2461\u88dc\u5b8c\u3059\u308b\u5834\u5408\u306e\u65b9\u6cd5\u3092\u8003\u3048\u308b(\u4fdd\u7559)"}}