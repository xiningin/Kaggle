{"cell_type":{"8e73a4c4":"code","32de49f5":"code","b170a1b6":"code","12772936":"code","874269c3":"code","6f9e4971":"code","478f7b84":"code","45d005df":"code","985c7a75":"code","2e796705":"code","0dbec979":"code","07cd175e":"code","dde11c25":"code","d63138e2":"code","259e0158":"code","99e3e0f8":"code","e8b369c5":"code","5a344038":"code","3b48d958":"code","99e4752d":"code","17449fe3":"code","25b7e6a3":"code","0a646dd4":"code","bd65f577":"code","0e4fa7aa":"code","df1a75d2":"code","d7a08135":"code","5392b7f5":"code","559dfd25":"code","05ae33b9":"code","f00fa108":"code","08b67320":"code","6da82ea0":"code","e9cda929":"code","f8e9570c":"code","52b9b3dc":"code","c5faa153":"markdown","f02b7ad2":"markdown","5698cb63":"markdown","74ba9c00":"markdown","d119dc5d":"markdown","a9b7224d":"markdown","20e762db":"markdown","8f60e144":"markdown","e64d9eca":"markdown","91ce7432":"markdown","1f628b7c":"markdown","c1d4dace":"markdown","1a28b227":"markdown","faccf7a5":"markdown","8a064bc6":"markdown","8b785668":"markdown","21eb4ee3":"markdown","f4c4a0c0":"markdown","ad5a3e58":"markdown","5a1d3816":"markdown","b64fb364":"markdown","9670acb3":"markdown","54beeb98":"markdown","d32cc870":"markdown"},"source":{"8e73a4c4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32de49f5":"data_folder = \"..\/input\/g-research-crypto-forecasting\/\"\n!ls $data_folder","b170a1b6":"#reading the train.csv\ncrypto_df = pd.read_csv(data_folder + 'train.csv')","12772936":"crypto_df.head(10)","874269c3":"asset_details = pd.read_csv(data_folder + 'asset_details.csv')\nasset_details\n","6f9e4971":"binance = crypto_df[crypto_df[\"Asset_ID\"]==0].set_index(\"timestamp\") \nbtc_cash = crypto_df[crypto_df[\"Asset_ID\"]==2].set_index(\"timestamp\") \ncardano = crypto_df[crypto_df[\"Asset_ID\"]==3].set_index(\"timestamp\") \ndodge = crypto_df[crypto_df[\"Asset_ID\"]==4].set_index(\"timestamp\")       \neos = crypto_df[crypto_df[\"Asset_ID\"]==5].set_index(\"timestamp\")   \neth = crypto_df[crypto_df[\"Asset_ID\"]==6].set_index(\"timestamp\")  \neth_classic = crypto_df[crypto_df[\"Asset_ID\"]==7].set_index(\"timestamp\")  \niota = crypto_df[crypto_df[\"Asset_ID\"]==8].set_index(\"timestamp\")  \nlite = crypto_df[crypto_df[\"Asset_ID\"]==9].set_index(\"timestamp\")\nmaker = crypto_df[crypto_df[\"Asset_ID\"]==10].set_index(\"timestamp\")  \nmonero = crypto_df[crypto_df[\"Asset_ID\"]==11].set_index(\"timestamp\")\nstellar = crypto_df[crypto_df[\"Asset_ID\"]==12].set_index(\"timestamp\")\ntron = crypto_df[crypto_df[\"Asset_ID\"]==13].set_index(\"timestamp\")          ","478f7b84":"import plotly.graph_objects as go\n\nbtc = crypto_df[crypto_df[\"Asset_ID\"]==1].set_index(\"timestamp\") # Asset_ID = 1 for Bitcoin\nbtc","45d005df":"btc_mini = btc.iloc[-200:] # Select recent data rows\nfig = go.Figure(data=[go.Candlestick(x=btc_mini.index, open=btc_mini['Open'], high=btc_mini['High'], low=btc_mini['Low'], close=btc_mini['Close'])])\nfig.show()","985c7a75":"eth = crypto_df[crypto_df[\"Asset_ID\"]==13].set_index(\"timestamp\")\neth","2e796705":"eth_mini = eth.iloc[-200:] # Select recent data rows\nfig = go.Figure(data=[go.Candlestick(x=eth_mini.index, open=eth_mini['Open'], high=eth_mini['High'], low=eth_mini['Low'], close=eth_mini['Close'])])\nfig.show()","0dbec979":"tron = crypto_df[crypto_df[\"Asset_ID\"]==8].set_index(\"timestamp\")\ntron","07cd175e":"tron_mini = tron.iloc[-200:] # Select recent data rows\nfig = go.Figure(data=[go.Candlestick(x=tron_mini.index, open=tron_mini['Open'], high=tron_mini['High'], low=tron_mini['Low'], close=tron_mini['Close'])])\nfig.show()","dde11c25":"dodge = crypto_df[crypto_df[\"Asset_ID\"]==4].set_index(\"timestamp\")\ndodge","d63138e2":"dodge_mini = dodge.iloc[-200:] # Select recent data rows\nfig = go.Figure(data=[go.Candlestick(x=dodge_mini.index, open=dodge_mini['Open'], high=dodge_mini['High'], low=dodge_mini['Low'], close=dodge_mini['Close'])])\nfig.show()","259e0158":"# getting the ethernum data\neth = crypto_df[crypto_df[\"Asset_ID\"]==6].set_index(\"timestamp\") # Asset_ID = 6 for Ethereum\neth.info(show_counts =True)","99e3e0f8":"eth.isna().sum()","e8b369c5":"# getting the first five rows\nbtc.head()","5a344038":"# getting the last five rows\nbtc.tail()","3b48d958":"# getting start and end date of btc as datetime64 format\nstart_btc = btc.index[0].astype('datetime64[s]')\nend_btc = btc.index[-1].astype('datetime64[s]')\n\n# getting start and end date of eth as datetime64 format\nstart_eth = btc.index[0].astype('datetime64[s]')\nend_eth = btc.index[-1].astype('datetime64[s]')\n\nprint('BTC data is from ',start_btc , 'to ', end_btc)\nprint('Eth data is from ',start_eth , 'to ', end_eth)\n","99e4752d":"(eth.index[1:]-eth.index[:-1]).value_counts().head()","17449fe3":"eth = eth.reindex(range(eth.index[0],eth.index[-1]+60,60),method='pad')\n","25b7e6a3":"(eth.index[1:]-eth.index[:-1]).value_counts().head()","0a646dd4":"# fill missing values for BTC\nbtc = btc.reindex(range(btc.index[0],btc.index[-1]+60,60),method='pad')\n\n#fill missing values for Tron\ntron =  tron.reindex(range(tron.index[0],tron.index[-1]+60,60),method='pad')\n\n#fill missing values for Dodge\ndodge =  dodge.reindex(range(dodge.index[0],dodge.index[-1]+60,60),method='pad')\n\n","bd65f577":"import matplotlib.pyplot as plt\n\n\nf = plt.figure(figsize=(20,10))\n\nax = f.add_subplot(221)\nplt.plot(btc['Close'], label='BTC')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Bitcoin')\n\nax2 = f.add_subplot(222)\nax2.plot(eth['Close'], color='red', label='ETH')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Ethereum')\n\nax2 = f.add_subplot(223)\nax2.plot(dodge['Close'], color='green', label='Dodge')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Dodge')\n\nax2 = f.add_subplot(224)\nax2.plot(tron['Close'], color='yellow', label='Tron')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Tron')\n\n\nplt.show()","0e4fa7aa":"import time\nfrom datetime import datetime\n\n# auxiliary function, from datetime to timestamp\ntotimestamp = lambda s: np.int32(time.mktime(datetime.strptime(s, \"%d\/%m\/%Y\").timetuple()))\n","df1a75d2":"#create intervals\nbtc_mini_2021 = btc.loc[totimestamp('01\/06\/2021'):totimestamp('01\/07\/2021')]\neth_mini_2021 = eth.loc[totimestamp('01\/06\/2021'):totimestamp('01\/07\/2021')]","d7a08135":"# plot time series for both chosen assets\nf = plt.figure(figsize=(7,8))\n\nax = f.add_subplot(211)\nplt.plot(btc_mini_2021['Close'], label='btc')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Bitcoin Close')\n\nax2 = f.add_subplot(212)\nax2.plot(eth_mini_2021['Close'], color='red', label='eth')\nplt.legend()\nplt.xlabel('Time')\nplt.ylabel('Ethereum Close')\n\nplt.tight_layout()\nplt.show()","5392b7f5":"import pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(6,3),columns=['col1','col2','col3'])\ndf2 = pd.DataFrame(np.random.randn(2,3),columns=['col1','col2','col3'])\n\nprint(df1)\nprint(df2)\nprint('--------------------------------')\nprint(df2.reindex_like(df1,method='pad'))","559dfd25":"# define function to compute log returns\ndef log_return(series, periods=1):\n    return np.log(series).diff(periods=periods)","05ae33b9":"import scipy.stats as stats\n\nlret_btc = log_return(btc_mini_2021.Close)[1:]\nlret_eth = log_return(eth_mini_2021.Close)[1:]\nlret_btc.rename('lret_btc', inplace=True)\nlret_eth.rename('lret_eth', inplace=True)\n\nplt.figure(figsize=(8,4))\nplt.plot(lret_btc);\nplt.plot(lret_eth);\nplt.show()","f00fa108":"# join two asset in single DataFrame\n\nlret_btc_long = log_return(btc.Close)[1:]\nlret_eth_long = log_return(eth.Close)[1:]\nlret_btc_long.rename('lret_btc', inplace=True)\nlret_eth_long.rename('lret_eth', inplace=True)\ntwo_assets = pd.concat([lret_btc_long, lret_eth_long], axis=1)\n\n# group consecutive rows and use .corr() for correlation between columns\ncorr_time = two_assets.groupby(two_assets.index\/\/(10000*60)).corr().loc[:,\"lret_btc\"].loc[:,\"lret_eth\"]\n\ncorr_time.plot();\nplt.xticks([])\nplt.ylabel(\"Correlation\")\nplt.title(\"Correlation between BTC and ETH over time\");","08b67320":"all_assets_2021 = pd.DataFrame([])\nfor asset_id, asset_name in zip(asset_details.Asset_ID, asset_details.Asset_Name):\n  asset = crypto_df[crypto_df[\"Asset_ID\"]==asset_id].set_index(\"timestamp\")\n  asset = asset.loc[totimestamp('01\/01\/2021'):totimestamp('01\/05\/2021')]\n  asset = asset.reindex(range(asset.index[0],asset.index[-1]+60,60),method='pad')\n  lret = log_return(asset.Close.fillna(0))[1:]\n  all_assets_2021 = all_assets_2021.join(lret, rsuffix=asset_name, how=\"outer\")","6da82ea0":"plt.imshow(all_assets_2021.corr());\nplt.yticks(asset_details.Asset_ID.values, asset_details.Asset_Name.values);\nplt.xticks(asset_details.Asset_ID.values, asset_details.Asset_Name.values, rotation='vertical');\nplt.colorbar();","e9cda929":"# Select some input features from the trading data: \n# 5 min log return, abs(5 min log return), upper shadow, and lower shadow.\nupper_shadow = lambda asset: asset.High - np.maximum(asset.Close,asset.Open)\nlower_shadow = lambda asset: np.minimum(asset.Close,asset.Open)- asset.Low\n\nX_btc = pd.concat([log_return(btc.VWAP,periods=5), log_return(btc.VWAP,periods=1).abs(), \n               upper_shadow(btc), lower_shadow(btc)], axis=1)\ny_btc = btc.Target\n\nX_eth = pd.concat([log_return(eth.VWAP,periods=5), log_return(eth.VWAP,periods=1).abs(), \n               upper_shadow(eth), lower_shadow(eth)], axis=1)\ny_eth = eth.Target","f8e9570c":"# select training and test periods\ntrain_window = [totimestamp(\"01\/05\/2021\"), totimestamp(\"30\/05\/2021\")]\ntest_window = [totimestamp(\"01\/06\/2021\"), totimestamp(\"30\/06\/2021\")]\n\n# divide data into train and test, compute X and y\n# we aim to build simple regression models using a window_size of 1\nX_btc_train = X_btc.loc[train_window[0]:train_window[1]].fillna(0).to_numpy()  # filling NaN's with zeros\ny_btc_train = y_btc.loc[train_window[0]:train_window[1]].fillna(0).to_numpy()  \n\nX_btc_test = X_btc.loc[test_window[0]:test_window[1]].fillna(0).to_numpy() \ny_btc_test = y_btc.loc[test_window[0]:test_window[1]].fillna(0).to_numpy() \n\nX_eth_train = X_eth.loc[train_window[0]:train_window[1]].fillna(0).to_numpy()  \ny_eth_train = y_eth.loc[train_window[0]:train_window[1]].fillna(0).to_numpy()  \n\nX_eth_test = X_eth.loc[test_window[0]:test_window[1]].fillna(0).to_numpy() ","52b9b3dc":"from sklearn.preprocessing import StandardScaler\n# simple preprocessing of the data \nscaler = StandardScaler()\n\nX_btc_train_scaled = scaler.fit_transform(X_btc_train)\nX_btc_test_scaled = scaler.transform(X_btc_test)\n\nX_eth_train_scaled = scaler.fit_transform(X_eth_train)\nX_eth_test_scaled = scaler.transform(X_eth_test)","c5faa153":"Target column has 340 null values ","f02b7ad2":"### Visualizing BTC","5698cb63":"## Data features\nWe can see the different features included in the dataset. Specifically, the features included per asset are the following:\n*   **timestamp**: All timestamps are returned as second Unix timestamps (the number of seconds elapsed since 1970-01-01 00:00:00.000 UTC). Timestamps in this dataset are multiple of 60, indicating minute-by-minute data.\n*   **Asset_ID**: The asset ID corresponding to one of the crytocurrencies (e.g. `Asset_ID = 1` for Bitcoin). The mapping from `Asset_ID` to crypto asset is contained in `asset_details.csv`.\n*   **Count**: Total number of trades in the time interval (last minute).\n*   **Open**:\tOpening price of the time interval (in USD).\n*   **High**:\tHighest price reached during time interval (in USD).\n*   **Low**: Lowest price reached during time interval (in USD).\n*   **Close**:\tClosing price of the time interval (in USD).\n*   **Volume**:\tQuantity of asset bought or sold, displayed in base currency USD.\n*   **VWAP**: The average price of the asset over the time interval, weighted by volume. VWAP is an aggregated form of trade data.\n*   **Target**: Residual log-returns for the asset over a 15 minute horizon. \n\nThe first two columns define the time and asset indexes for this data row. The 6 middle columns are feature columns with the trading data for this asset and minute in time. The last column is the prediction target, which we will get to later in more detail.\n\nWe also view the asset information, including the list of all assets, the `Asset_ID` to asset mapping, and the weight of each asset used to weigh their relative importance in the evaluation metric.","74ba9c00":"#### Correlation between assets\nWe hypothesized before that crypto asset returns may exhibit some correlation. Let's check this in more detail now.\nWe can check how the correlation between Bitcoin and Ethereum change over time for the 2021 period we selected.","d119dc5d":"### Visualizing Ethernum","a9b7224d":"### Getting the data folder","20e762db":"creating seperate data frames for each crypto","8f60e144":"Analysing the price changes ????","e64d9eca":"## Candlestick charts\n\nThe trading data format is an aggregated form of market data including for Open, High, Low and Close. We can visualize this data through the commonly used candlestick bar chart, which allows traders to perform technical analysis on intraday values. The bar's body length represents the price range between the open and close of that day's trading. When the bar is red, it means the close was lower than the open, and green otherwise. These are also referred to as bullish and bearish candlesticks. The wicks above and below the bars show the high and low prices of that interval's trading.","91ce7432":"Then we check the time range for the data","1f628b7c":"As in the above table all the columns except the `target`  has same number of Non-Null records. We can confirm it by","c1d4dace":"The assets have quite different history, but we could check if they correlate in recent times.","1a28b227":"### Data visualisation\n##### We will start by visualising the Close prices for the two assets we have selecte","faccf7a5":"#### Dealing with missing values ","8a064bc6":"### Data Preprocessing","8b785668":"Notice that there are many gaps in the data. To work with most time series models, we should preprocess our data into a format without time gaps. To fill the gaps, we can use the .reindex() method for forward filling, filling gaps with the previous valid value.","21eb4ee3":"### Visualizing Tron","f4c4a0c0":"First we can get a coin and look more into the dataset","ad5a3e58":"# G- Research Crypto Forecast Introduction\n\nOver $40 billion worth of cryptocurrencies are traded every day. They are among the most popular assets for speculation and investment, yet have proven wildly volatile. Fast-fluctuating prices have made millionaires of a lucky few, and delivered crushing losses to others. Could some of these price movements have been predicted in advance?\n\nIn this competition, you'll use your machine learning expertise to forecast short term returns in 14 popular cryptocurrencies. We have amassed a dataset of millions of rows of high-frequency market data dating back to 2018 which you can use to build your model. Once the submission deadline has passed, your final score will be calculated over the following 3 months using live crypto data as it is collected.\n\nThe simultaneous activity of thousands of traders ensures that most signals will be transitory, persistent alpha will be exceptionally difficult to find, and the danger of overfitting will be considerable. In addition, since 2018, interest in the cryptomarket has exploded, so the volatility and correlation structure in our data are likely to be highly non-stationary. The successful contestant will pay careful attention to these considerations, and in the process gain valuable insight into the art and science of financial forecasting.\n\nG-Research is Europe\u2019s leading quantitative finance research firm. We have long explored the extent of market prediction possibilities, making use of machine learning, big data, and some of the most advanced technology available. Specializing in data science and AI education for workforces, Cambridge Spark is partnering with G-Research for this competition","5a1d3816":"Note the high but variable correlation between the assets. Here we can see that there is some changing dynamics over time, and this would be critical for this time series challenge, that is, how to perform forecasts in a highly non-stationary environment.\n\nA stationary behaviour of a system or a process is characterized by non-changing statistical properties over time such as the mean, variance and autocorrelation. On the other hand, a non-stationary behaviour is characterized by a continuous change of statistical properties over time. Stationarity is important because many useful analytical tools and statistical tests and models rely on it.\n\nWe can also check the correlation between all assets visualizing the correlation matrix. Note how some assets have much higher pairwise correlation than others.","b64fb364":"### Visualizing Dodge","9670acb3":"When developing a timeseries model we need to find whethere there are any missing timestamps (rows) in the dataset. If there are any missing rows we have to fill the values with an appropriate method","54beeb98":"We can visualize a slice of the Bitcoin prices using the `plotly` library. The bottom part of the plot shows a rangeslider, which you can use to zoom in the plot.","d32cc870":"On shorter intervals we can visually see some potential correlation between both assets, with some simultaneous ups and downs."}}