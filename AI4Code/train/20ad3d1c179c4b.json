{"cell_type":{"72f5249d":"code","5c6626a7":"code","654d9863":"code","9f0cff6a":"code","19706bc1":"code","6ef356bf":"code","153d3e2f":"code","bcb51ea9":"code","fd1bbc9e":"code","b801abfd":"code","ab300a60":"code","3396ca3c":"code","4c411d1e":"code","b4a1db96":"code","ec3544db":"code","f70aa7b5":"code","b25f7b6f":"code","b8faec39":"code","ca6563b5":"code","87f24002":"code","fb6b26f1":"code","ce305191":"code","cb814c12":"code","2d7516b4":"code","0fc98e70":"code","015a1807":"code","f6e3f00f":"code","3ce7ed16":"markdown","4a8cf086":"markdown","792a99aa":"markdown","f74f1e09":"markdown","df926069":"markdown","3cedfb55":"markdown","a3c42b85":"markdown","2fd27fd7":"markdown"},"source":{"72f5249d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c6626a7":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","654d9863":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9f0cff6a":"df = pd.read_csv('\/kaggle\/input\/parkinson-disease-detection\/Parkinsson disease.csv')","19706bc1":"df.head()","6ef356bf":"df.isnull().sum()","153d3e2f":"df.info()","bcb51ea9":"df.describe()","fd1bbc9e":"df.corr()['status'][:-1].sort_values().plot(kind='bar')","b801abfd":"df = df.drop('name', axis = 1)","ab300a60":"plt.figure(figsize=(30,30))\nsns.heatmap(df.corr(), annot = True, cmap= \"coolwarm\")","3396ca3c":"X = df.drop('status', axis = 1)\nY = df['status']","4c411d1e":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.25,random_state=101)","b4a1db96":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","ec3544db":"X_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","f70aa7b5":"X_train_scaled.shape","b25f7b6f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout","b8faec39":"model = Sequential()\n\nmodel.add(Dense(units=30,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=25,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=10,activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# For a binary classification problem\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","ca6563b5":"from tensorflow.keras.callbacks import EarlyStopping\ncb = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)","87f24002":"model.fit(x=X_train_scaled,y=Y_train, validation_data=(X_test_scaled, Y_test), batch_size=450, epochs=600, callbacks=[cb])","fb6b26f1":"losses = pd.DataFrame(model.history.history)","ce305191":"losses.plot()","cb814c12":"predictions = (model.predict(X_test_scaled) > 0.5).astype(\"int32\")","2d7516b4":"from sklearn.metrics import classification_report,confusion_matrix, accuracy_score","0fc98e70":"print(confusion_matrix(Y_test,predictions))","015a1807":"print(classification_report(Y_test,predictions))","f6e3f00f":"print(accuracy_score(Y_test,predictions))","3ce7ed16":"NEURAL NETWORKS (Multi-Layer Perceptron)","4a8cf086":"Scaling Data","792a99aa":"Features Information:\n\n\n\nname - ASCII subject name and recording number\n\n\nMDVP:Fo(Hz) - Average vocal fundamental frequency\n\n\nMDVP:Fhi(Hz) - Maximum vocal fundamental frequency\n\n\nMDVP:Flo(Hz) - Minimum vocal fundamental frequency\n\n\nMDVP:Jitter(%),MDVP:Jitter(Abs),MDVP:RAP,MDVP:PPQ,Jitter:DDP - Several measures of variation in fundamental frequency\n\n\nMDVP:Shimmer,MDVP:Shimmer(dB),Shimmer:APQ3,Shimmer:APQ5,MDVP:APQ,Shimmer:DDA - Several measures of variation in amplitude\n\n\nNHR,HNR - Two measures of ratio of noise to tonal components in the voice\n\n\nstatus - Health status of the subject (one) - Parkinson's, (zero) - healthy\n\n\nRPDE,D2 - Two nonlinear dynamical complexity measures\n\n\nDFA - Signal fractal scaling exponent\n\n\nspread1,spread2,PPE - Three nonlinear measures of fundamental frequency variation\n","f74f1e09":"Creating The Model","df926069":"Citation Request:\n\n\nIf you use this dataset, please cite the following paper:\n\n\n'Exploiting Nonlinear Recurrence and Fractal Scaling Properties for Voice Disorder Detection', Little MA, McSharry PE, Roberts SJ, Costello DAE, Moroz IM. BioMedical Engineering OnLine 2007, 6:23 (26 June 2007)","3cedfb55":"Kaggle: https:\/\/www.kaggle.com\/debasisdotcom\/parkinson-disease-detection","a3c42b85":"Train Test Split","2fd27fd7":"Model Evaluation"}}