{"cell_type":{"1edd263d":"code","c302ee16":"code","e5976046":"code","aabf7400":"code","f625b7d0":"code","ea93e5c1":"code","85e995f8":"code","9d9f53ff":"code","23b5a1ac":"code","78e4d376":"code","db2ac9c2":"code","039ebf81":"code","0db91d25":"code","49265989":"code","20bf1325":"code","1f8d5ffd":"code","8f6778f8":"code","13cad629":"code","2752218f":"code","5811c4c0":"code","d445f3f6":"code","2fa2a837":"code","e0386012":"code","e3552dcb":"code","4551c62e":"code","1c0b6a2f":"code","e45e1f41":"code","e285b4de":"code","d3ac1516":"code","f71670a9":"code","04587904":"code","6ce6ab03":"code","65d9c0c2":"code","6533e90a":"code","e2fe2928":"code","41240fd8":"code","1957af7b":"code","dd25f7c1":"code","4607f114":"code","9d926187":"code","191c0af8":"code","783ddc69":"code","14309754":"code","c4cb8acc":"code","6e085ea2":"code","fe110001":"code","bb0d99a0":"code","2e89ce49":"code","e4201626":"code","4c49a8be":"code","353aec4b":"code","67722958":"code","6b5c8c3e":"code","2fcc8cd4":"code","438f139c":"code","cb6febaf":"markdown","fde196e7":"markdown","93387cb4":"markdown","2909fb07":"markdown","f12b971c":"markdown","0c141221":"markdown","a363d2fd":"markdown","a08e8b69":"markdown","8d23305a":"markdown","e5ec24e9":"markdown","53cb51a7":"markdown","89fbd079":"markdown","5064cda9":"markdown","c93d7d4a":"markdown","6d3ba900":"markdown","38dd2c94":"markdown","7d00b476":"markdown","68f950d7":"markdown","11febe69":"markdown","0636131f":"markdown","0c4cb29f":"markdown","997508b4":"markdown","4334fe5f":"markdown","01a1aa10":"markdown","79eae89f":"markdown","563a0403":"markdown","035ebfc2":"markdown","7aedec71":"markdown","ba3f8470":"markdown","ea11e050":"markdown","6c4abab9":"markdown"},"source":{"1edd263d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","c302ee16":"# Load the train and test csv files into dataframes.\ntrain = pd.read_csv(\"..\/input\/analytics-vidhya-jobathon\/train_Df64byy.csv\")\ntest = pd.read_csv(\"..\/input\/analytics-vidhya-jobathon\/test_YCcRUnU.csv\")","e5976046":"# Return a tuple representing the dimensionality of the DataFrames.\ntrain.shape, test.shape","aabf7400":"# First 5 rows data\ntrain.head()","f625b7d0":"# Ratio of null values\ntrain.isnull().sum()\/train.shape[0] *100","ea93e5c1":"# Ratio of null values\ntest.isnull().sum()\/test.shape[0] *100","85e995f8":"#categorical features\ncategorical = train.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Train Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= train.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Train Set:\",numerical.shape[1])","9d9f53ff":"#categorical features\ncategorical = test.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Test Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= test.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Test Set:\",numerical.shape[1])","23b5a1ac":"print(train['Accomodation_Type'].unique())\nprint(train['Reco_Insurance_Type'].unique())\nprint(train['Is_Spouse'].unique())\nprint(train['Health Indicator'].unique())\nprint(train['City_Code'].unique())","78e4d376":"train.isnull().sum()","db2ac9c2":"test.isnull().sum()","039ebf81":"plt.figure(figsize=(8,5))\nsns.boxplot('Holding_Policy_Type',data=train)","0db91d25":"plt.figure(figsize=(8,5))\nsns.boxplot('Holding_Policy_Type',data=test)","49265989":"# Imputing with mean\ntrain['Holding_Policy_Type'] = train['Holding_Policy_Type'].fillna(train['Holding_Policy_Type'].mean())\ntest['Holding_Policy_Type'] = test['Holding_Policy_Type'].fillna(test['Holding_Policy_Type'].mean())","20bf1325":"train['Holding_Policy_Type'].isnull().sum(),test['Holding_Policy_Type'].isnull().sum()","1f8d5ffd":"# Imputing with mode\ntrain['Health Indicator'] = train['Health Indicator'].fillna(train['Health Indicator'].mode()[0])\ntest['Health Indicator'] = test['Health Indicator'].fillna(test['Health Indicator'].mode()[0])","8f6778f8":"train['Health Indicator'].isnull().sum(),test['Health Indicator'].isnull().sum()","13cad629":"# Imputing with mode\ntrain['Holding_Policy_Duration'] = train['Holding_Policy_Duration'].fillna(train['Holding_Policy_Duration'].mode()[0])\ntest['Holding_Policy_Duration'] = test['Holding_Policy_Duration'].fillna(test['Holding_Policy_Duration'].mode()[0])","2752218f":"train['Holding_Policy_Duration'].isnull().sum(),test['Holding_Policy_Duration'].isnull().sum()","5811c4c0":"# Get the list of columns\ntrain.columns","d445f3f6":"#Get the first 8 rows of dataframe\ntrain.head(8)","2fa2a837":"# Get the information of the dataframe like dtypes, nullcount\ntrain.info()","e0386012":"# Get statistical data of train dataset\ntrain.describe()","e3552dcb":"# Find out the correlation between all dataset\ntrain.corr()","4551c62e":"# Pairplot helps us for EDA at many level\nsns.pairplot(train)","1c0b6a2f":"# This method gives us categorical count of respected features\ntrain['Accomodation_Type'].value_counts()","e45e1f41":"# matplotlib.pyplot as alise as plt function gives us figure method to view the figure and set the size\nplt.figure(figsize=(9,5))\n\n# This countplot is useful to see the graphical representation of categorical data\nsns.countplot('Accomodation_Type',data=train, palette='bright')","e285b4de":"train['Reco_Insurance_Type'].value_counts()","d3ac1516":"plt.figure(figsize=(9,5))\nsns.countplot('Reco_Insurance_Type',data=train, palette='pastel')","f71670a9":"sns.scatterplot(data=train, x=\"Reco_Insurance_Type\", y=\"Accomodation_Type\")","04587904":"train['Is_Spouse'].value_counts()","6ce6ab03":"plt.figure(figsize=(9,5))\nsns.countplot('Is_Spouse',data=train, palette='deep')","65d9c0c2":"# The scatter plot tells us that individual have always no with the Is_Spouse but joint can have or have not be\nsns.scatterplot(data=train, x=\"Reco_Insurance_Type\", y=\"Is_Spouse\", marker='+')","6533e90a":"# there are only 9 types of health indicator for all customers\ntrain['Health Indicator'].value_counts()","e2fe2928":"plt.figure(figsize=(9,5))\nsns.countplot('Health Indicator',data=train, palette='dark')","41240fd8":"# We will replace 14+ to 15 for better prediction experience\ntrain['Holding_Policy_Duration'].replace([\"14+\"],[15.0], inplace= True)","1957af7b":"#This 14+ is taken as a object where all others are float so we will not keep it as different.\n#train['Holding_Policy_Duration'] = train['Holding_Policy_Duration'].astype(object).astype('float64')","dd25f7c1":"train['Holding_Policy_Duration'].value_counts()","4607f114":"# In years\nplt.figure(figsize=(9,5))\nsns.countplot('Holding_Policy_Duration',data=train, palette='dark')","9d926187":"train['Holding_Policy_Type'].value_counts()","191c0af8":"plt.figure(figsize=(9,5))\nsns.countplot('Holding_Policy_Type',data=train, palette='dark')","783ddc69":"sns.scatterplot(data=train, x=\"Holding_Policy_Type\", y=\"Holding_Policy_Duration\")","14309754":"# This is a bar plot.\nplt.figure(figsize=(12,9))\nsns.barplot(y='Reco_Policy_Premium',x='Reco_Policy_Cat',data=train)","c4cb8acc":"sns.scatterplot(data=train, x='City_Code', y='Region_Code')","6e085ea2":"# Feature Scaling\nfeatures = ['City_Code','Accomodation_Type','Reco_Insurance_Type','Upper_Age','Lower_Age','Is_Spouse','Health Indicator',\n            'Holding_Policy_Duration','Holding_Policy_Type','Reco_Policy_Cat','Reco_Policy_Premium']\nX = pd.get_dummies(train[features],drop_first = True)\nX_test = pd.get_dummies(test[features],drop_first = True)\nss = StandardScaler()\nX = ss.fit_transform(X)\nX_test = ss.transform(X_test)","fe110001":"\n#dataMapping1 = { \"Rented\" : 0, \"Owned\" : 1}\n#dataMapping2 = { \"Individual\" : 1, \"Joint\" : 0}\n#dataMapping3 = { 'No' : 0, 'Yes' : 1}\n#dataMapping4 = {'X1' : 1, 'X2' : 2, 'X3' : 3, 'X4' : 4, 'X5' : 5, 'X6' : 6, 'X7' : 7, 'X8' : 8, 'X9' : 9}\n#dataMapping5 = {'C3' : 3, 'C5' : 5, 'C24' : 24, 'C8' : 8, 'C9' : 9, 'C1' : 1, 'C15' : 15, 'C28' : 28,\n#                'C27' : 27, 'C7' : 7, 'C20' : 20, 'C25' : 25, 'C4' : 4, 'C2' : 2, 'C34' : 34, 'C10' : 10, \n#                'C17' : 17, 'C18' : 18, 'C16' : 16, 'C29' : 29, 'C33' : 33, 'C26' : 26, 'C19' : 19, 'C6' : 6,\n#                'C12' : 12, 'C13' : 13, 'C11' : 11, 'C14' : 14, 'C22' : 22, 'C23' : 23, 'C21' : 21, 'C36' : 36,\n#               'C32' : 32, 'C30' : 30, 'C35' : 35, 'C31' : 31}\n                ","bb0d99a0":"\n#train['Accomodation_Type'] = train['Accomodation_Type'].map(dataMapping1)\n#train['Reco_Insurance_Type'] = train['Reco_Insurance_Type'].map(dataMapping2)\n#train['Is_Spouse'] = train['Is_Spouse'].map(dataMapping3)\n#train['Health Indicator'] = train['Health Indicator'].map(dataMapping4)\n#train['City_Code'] = train['City_Code'].map(dataMapping5)","2e89ce49":"# One hot coding\ny = train[\"Response\"]\nfeatures = ['City_Code','Accomodation_Type','Reco_Insurance_Type','Upper_Age','Lower_Age','Is_Spouse','Health Indicator',\n            'Holding_Policy_Duration','Holding_Policy_Type','Reco_Policy_Cat','Reco_Policy_Premium']\nX = pd.get_dummies(train[features],drop_first = True)\nX_test = pd.get_dummies(test[features],drop_first = True)","e4201626":"#DecisionTreeClassifier Model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\nResponse = model.predict(X_test)\noutput = pd.DataFrame({'ID': test.ID, 'Response': Response})\noutput.to_csv('.\/my_submission.csv', index=False)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","4c49a8be":"#RandomForestClassifier =  max_depth = 100\nmodel = RandomForestClassifier(n_estimators=100, max_depth=100, random_state=1)\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","353aec4b":"#KNeighborsClassifier\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","67722958":"#LogisticRegression Model\nmodel = LogisticRegression(class_weight='balanced')\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","6b5c8c3e":"#RandomForestClassifier Model\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","2fcc8cd4":"#GaussianNB Model\nmodel = GaussianNB()\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","438f139c":"# LinearSVC Model\nmodel = LinearSVC()\nmodel.fit(X, y)\nResponse = model.predict(X_test)\nSuccessRate = round(model.score(X, y) * 100, 2)\nSuccessRate","cb6febaf":"<h2 style=\"color:lightblue\" align=\"center\">Health Insurance Lead Prediction<\/h2>","fde196e7":"### Step 2: Data Inspection","93387cb4":"__This shows that there are no outliers in this \"Holding_Policy_Type\" column__","2909fb07":"Our Client FinMan is a financial services company that provides various financial services like loan, investment funds, insurance etc. to its customers.\nFinMan wishes to cross-sell health insurance to the existing customers who may or may not hold insurance policies with the company.\nThe company recommend health insurance to it's customers based on their profile once these customers land on the website.\nCustomers might browse the recommended health insurance policy and consequently fill up a form to apply.\nWhen these customers fill-up the form, their response towards the policy is considered positive and they are classified as a lead.\nOnce these leads are acquired, the sales advisors approach them to convert and thus the company can sell proposed health insurance to these leads in a more efficient manner.\n\nNow the company needs your help in building a model to predict whether the person will be interested in their proposed Health plan\/policy given the information about:\n\n    Demographics (city, age, region etc.)\n    Information regarding holding policies of the customer\n    Recommended Policy Information\n","f12b971c":"Missing data (or missing values) is defined as the data value that is not stored for a variable in the observation of interest. The problem of missing data is relatively common in almost all research and can have a significant effect on the conclusions that can be drawn from the data.\nSo, isnull().sum() method of pandas library will help us to find out feature wise sum of missing values.","0c141221":"__This shows that 3 features have missing values in data 1)Health Indicator 2)Holding_Policy_Duration 3)Holding_Policy_Type.__","a363d2fd":"__Find out if any outliers using seaborn library and boxplot method__","a08e8b69":"__Above figure shows that most of the cusotmers are covered into the X1 health indicator__","8d23305a":"###  Step 6: Building Model","e5ec24e9":"__This shows that we have 50882 rows and 14 columns in Train set whereas Test set has 21805 rows and 13 columns.__","53cb51a7":"## Problem Statement","89fbd079":"__Now we will find out the count of numerical and categorical features__","5064cda9":"__We have imputed mode values on missing data of  \"Holding_Policy_Duration\" column__","c93d7d4a":"__Get count of missing data__","6d3ba900":"__We have imputed mean values on missing data of  \"Holding_Policy_Type\" column__","38dd2c94":"__This figure shows that almost all holding policy types have all types of holding policy duration.__","7d00b476":"__Above figure shows that Holding policy type 3.0 holds most the customers.__","68f950d7":"## Table of Content","11febe69":"__Above tuple shows that there are no any missing values in \"Holding_Policy_Duration\" column__","0636131f":"### Step 1: Importing the Relevant Libraries","0c4cb29f":"Now we will use boxplot method of seaborn library to detect outliers because if there are no outliers then it will be easy to fillup the missing values in relation with the other values of the respective feature.","997508b4":"__We have imputed mode values on missing data of  \"Health Indicator\" column__","4334fe5f":"__Above tuple shows that there are no any missing values in \"Health Indicator\" column__","01a1aa10":"__Above figure shows that most of the customers have 1 year holding policy duration.__","79eae89f":"### Step 4: Exploratory Data Analysis","563a0403":"__Above tuple shows that there are no any missing values in \"Holding_Policy_Type\" column__","035ebfc2":"* __Step 1: Importing the Relevant Libraries__\n    \n* __Step 2: Data Inspection__\n    \n* __Step 3: Data Cleaning__\n    \n* __Step 4: Exploratory Data Analysis__\n    \n* __Step 5: Feature Engineering__\n\n* __Step 6: Building Model__\n ","7aedec71":"### Step 5 : Feature Engineering","ba3f8470":"### Step 3: Data Cleaning","ea11e050":"__We will see unique categories of some features__","6c4abab9":"__This shows that we have 23%, 39% and 39% of missing values in Health Indicator, Holding_Policy_Duration and Holding_Policy_Type columns respectively.__"}}