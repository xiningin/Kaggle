{"cell_type":{"7b9939f3":"code","27d1f94f":"code","8f681b3f":"code","fc9aef97":"code","06d11193":"code","35bc1464":"code","45c67941":"code","a1a0ab56":"code","57ed187c":"code","4e88cb37":"code","33ead127":"code","8117be12":"code","19c2dcf6":"code","1a452ba1":"code","5cf9eaf3":"code","0bc2799e":"code","2d9231a6":"code","c8df7f70":"code","9931acab":"code","6c111561":"code","c0976b38":"code","e6a21c85":"code","366370d2":"code","5c35877f":"code","d3949fa3":"code","c08626f9":"code","6bdf6076":"code","7fcf5194":"code","c0907b67":"code","4b95e767":"code","b5cc15bf":"code","e4eec2dc":"code","294f66eb":"code","9d864a9c":"code","b6704e13":"code","c8edf9a1":"code","15ad251b":"code","c6a54d1f":"code","eb811424":"code","87c5d8ea":"code","ca11a0c4":"code","4c731336":"code","42801216":"code","b9ecf4e6":"code","e6aa1754":"code","eb61e02f":"code","6c322188":"code","5146310d":"code","9802800b":"code","0b92ce5f":"code","e47de393":"code","6b506b47":"code","1983c27d":"code","bc879a83":"code","263d0054":"markdown","596ebaab":"markdown","2e6c106c":"markdown","834d4b3b":"markdown","bb672ed0":"markdown","6fd14fd7":"markdown","98959d41":"markdown","97b20e8c":"markdown","0e5b2df6":"markdown","7cce8215":"markdown","e11a6efc":"markdown","13dfd265":"markdown","d6e56664":"markdown","b2722034":"markdown","cc00393e":"markdown","84e710b8":"markdown","97903e32":"markdown","b6a98144":"markdown","bcdff9fc":"markdown","5942ca1a":"markdown","3483d0de":"markdown","2d57399a":"markdown","b6dd526b":"markdown","f72f38dd":"markdown","2d0a3fa0":"markdown","90cd40a2":"markdown","7bc74f8f":"markdown","1f61aaac":"markdown","b1cbbfea":"markdown","95352972":"markdown","7d0a0bd0":"markdown","6e87fdce":"markdown","a5ca9a3e":"markdown","26c14418":"markdown","d5807663":"markdown","64a8e928":"markdown","3f8f1161":"markdown","d6f9333b":"markdown","cef98c4b":"markdown","2dc95a07":"markdown","6381a225":"markdown","0c4b04b2":"markdown","78401778":"markdown","d53b9544":"markdown","e6ad93b7":"markdown","4d01c47d":"markdown","4f294329":"markdown","9b243cce":"markdown"},"source":{"7b9939f3":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom scipy.special import inv_boxcox\nfrom sklearn.compose import TransformedTargetRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_train.head()","27d1f94f":"print(df_train.shape)\nprint(df_test.shape)\nprint(set(df_train.columns.values) - set(df_test.columns.values))","8f681b3f":"df_train.dtypes.value_counts()","fc9aef97":"col_types = df_train.dtypes\nunique_count = df_train.nunique()\nunique_count[col_types[col_types == 'object'].index].sort_values(ascending = False)","06d11193":"df_train.Neighborhood.value_counts()","35bc1464":"df_train.Exterior2nd.value_counts()","45c67941":"df_train.Exterior1st.value_counts()","a1a0ab56":"df_total = pd.concat([df_train.drop('SalePrice', axis=1), df_test],axis=0)\nnull_cols = df_total.isnull().sum()\nprint(len(null_cols[null_cols > 0]))\nnull_cols[null_cols > 0].sort_values(ascending = False)","57ed187c":"df_total.PoolQC.unique()","4e88cb37":"df_total.MiscFeature.unique()","33ead127":"df_total.Alley.unique()","8117be12":"df_total.Fence.unique()","19c2dcf6":"df_total.FireplaceQu.unique()","1a452ba1":"df_total.LotFrontage.unique()","5cf9eaf3":"df_total.GarageType.unique()","0bc2799e":"print(df_total[df_total.GarageType.isnull()]['GarageYrBlt'].unique())\nprint(df_total[df_total.GarageType.isnull()]['GarageFinish'].unique())\nprint(df_total[df_total.GarageType.isnull()]['GarageQual'].unique())\nprint(df_total[df_total.GarageType.isnull()]['GarageCond'].unique())\nprint(df_total[df_total.GarageType.isnull()]['GarageCars'].unique())","2d9231a6":"df_total[['GarageType','GarageQual','GarageCond', 'GarageYrBlt','GarageCars']][(df_total.GarageType.isnull() == False) \n    & (df_total.GarageQual.isnull() | df_total.GarageCond.isnull() |\n      df_total.GarageYrBlt.isnull() | df_total.GarageCars.isnull())]","c8df7f70":"df_total.BsmtFinType1.unique()","9931acab":"df_total[['BsmtFinType2','BsmtExposure','BsmtFinType1','BsmtCond','BsmtQual']][df_total.BsmtFinType1.isnull() | df_total.BsmtExposure.isnull()]","6c111561":"df_total.MasVnrType.unique()","c0976b38":"df_total['MasVnrArea'][df_total.MasVnrType.isnull()]","e6a21c85":"df_total['Electrical'].unique()","366370d2":"df_total['MSZoning'].unique()","5c35877f":"df_total['Functional'].unique()","d3949fa3":"df_total['BsmtHalfBath'].unique()","c08626f9":"df_total['BsmtFullBath'].unique()","6bdf6076":"df_total['Utilities'].unique()","7fcf5194":"df_total['SaleType'].unique()","c0907b67":"df_train.describe().T","4b95e767":"desc_train = df_train.describe().T\ndesc_train[desc_train['max'] > desc_train['mean'] + desc_train['std'] * 3].index","b5cc15bf":"desc_train = df_train.describe().T\ndesc_train[desc_train['min'] < desc_train['mean'] - desc_train['std'] * 3].index","e4eec2dc":"unique_count = df_train.nunique()\nunique_count[unique_count > len(df_train)*0.75]","294f66eb":"corr_matrix = df_train.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corr_matrix, vmax=0.8, vmin=0.05, annot=True);","9d864a9c":"plt.style.use('dark_background')\nfig, axes = plt.subplots(nrows= 2,ncols = 3, figsize=(20,12))\n\naxes[0,0].scatter(df_train['OverallQual'], df_train['SalePrice'], marker = 'o', color='red')\naxes[0,1].scatter(df_train['GrLivArea'], df_train['SalePrice'], marker = 'o', color='green')\naxes[0,2].scatter(df_train['GarageCars'], df_train['SalePrice'], marker = 'o', color='blue')\naxes[1,0].scatter(df_train['GarageArea'], df_train['SalePrice'], marker = 'o', color='red')\naxes[1,1].scatter(df_train['TotalBsmtSF'], df_train['SalePrice'], marker = 'o', color='green')\naxes[1,2].scatter(df_train['1stFlrSF'], df_train['SalePrice'], marker = 'o', color='blue')\n\naxes[0,0].set_title('Overall material and finish')\naxes[0,1].set_title('Ground living area square feet')\naxes[0,2].set_title('Car capacity')\naxes[1,0].set_title('Garage square feet')\naxes[1,1].set_title('Basement square feet')\naxes[1,2].set_title('First floor square feet')\n\naxes[0,0].set_xlabel('Rate')\naxes[0,0].set_ylabel('Sale price');\naxes[0,1].set_xlabel('Square feet')\naxes[0,1].set_ylabel('Sale price');\naxes[0,2].set_xlabel('Car capacity')\naxes[0,2].set_ylabel('Sale price');\naxes[1,0].set_xlabel('Square feet')\naxes[1,0].set_ylabel('Sale price');\naxes[1,1].set_xlabel('Square feet')\naxes[1,1].set_ylabel('Sale price');\naxes[1,2].set_xlabel('Square feet')\naxes[1,2].set_ylabel('Sale price');","b6704e13":"fig, ax = plt.subplots(nrows= 1,ncols = 1, figsize=(10,5))\nax.hist(df_train['SalePrice'], bins=30)","c8edf9a1":"fig, axes = plt.subplots(nrows= 2,ncols = 3, figsize=(20,12))\naxes[0,0].hist(df_train['LotFrontage'], bins=30)\naxes[0,0].set_title('LotFrontage', fontsize=12)\naxes[0,1].hist(df_train['LotArea'], bins=30)\naxes[0,1].set_title('LotArea', fontsize=12)\naxes[0,2].hist(df_train['MasVnrArea'], bins=30)\naxes[0,2].set_title('MasVnrArea', fontsize=12)\naxes[1,0].hist(df_train['BsmtUnfSF'], bins=30)\naxes[1,0].set_title('BsmtUnfSF', fontsize=12)\naxes[1,1].hist(df_train['BsmtFinSF1'], bins=30)\naxes[1,1].set_title('BsmtFinSF1', fontsize=12)\naxes[1,2].hist(df_train['BsmtFinSF2'], bins=30)\naxes[1,2].set_title('BsmtFinSF2', fontsize=12)","15ad251b":"fig, axes = plt.subplots(nrows= 2,ncols = 3, figsize=(20,12))\naxes[0,0].hist(df_train['TotalBsmtSF'], bins=30)\naxes[0,0].set_title('TotalBsmtSF', fontsize=12)\naxes[0,1].hist(df_train['1stFlrSF'], bins=30)\naxes[0,1].set_title('1stFlrSF', fontsize=12)\naxes[0,2].hist(df_train['2ndFlrSF'], bins=30)\naxes[0,2].set_title('2ndFlrSF', fontsize=12)\naxes[1,0].hist(df_train['LowQualFinSF'], bins=30)\naxes[1,0].set_title('LowQualFinSF', fontsize=12)\naxes[1,1].hist(df_train['GrLivArea'], bins=30)\naxes[1,1].set_title('GrLivArea', fontsize=12)\naxes[1,2].hist(df_train['GarageArea'], bins=30)\naxes[1,2].set_title('GarageArea', fontsize=12)","c6a54d1f":"df_train.groupby('Neighborhood') \\\n    .agg({'Neighborhood':'size', 'SalePrice':'mean'}) \\\n    .sort_values(by='SalePrice') \\\n    .rename(columns={'Neighborhood':'count','SalePrice':'mean'}) ","eb811424":"test_ids = df_test['Id']\ndf_train.drop(columns=['Id', 'GarageYrBlt', '1stFlrSF', 'TotRmsAbvGrd', 'GarageCars'], axis=1, inplace=True)\ndf_test.drop(columns=['Id', 'GarageYrBlt', '1stFlrSF', 'TotRmsAbvGrd', 'GarageCars'], axis=1, inplace=True)","87c5d8ea":"def dropColOutliers(df, col, factor):\n    mean = df[col].mean()\n    std = df[col].std()\n    df.drop(df[df[col] > (mean + factor * std)].index, inplace=True)\n    df.drop(df[df[col] < (mean - factor * std)].index, inplace=True)\n    return df","ca11a0c4":"# Save mode values from train dataset\nall_mode = df_train.mode()\n\ndef fillNAs(df, all_mode):\n    df['PoolQC'].fillna('NA', inplace=True)\n    df['MiscFeature'].fillna('NA', inplace=True)\n    df['Alley'].fillna('NA', inplace=True)\n    df['Fence'].fillna('NA', inplace=True)\n    df['FireplaceQu'].fillna('NA', inplace=True)\n    # I assume that when LotFrontage is NA, there is no street connections with property\n    df['LotFrontage'].fillna(0, inplace=True)\n    # Absence of garage\n    df['GarageType'].fillna('NA', inplace=True)\n    NA_indx = df[(df.GarageType.isnull() == False) & df.GarageFinish.isnull()].index\n    df['GarageFinish'].loc[NA_indx] = all_mode['GarageFinish'][0]\n    df['GarageFinish'].fillna('NA', inplace=True)\n    NA_indx = df[(df.GarageType.isnull() == False) & df.GarageQual.isnull()].index\n    df['GarageQual'].loc[NA_indx] = all_mode['GarageQual'][0]\n    df['GarageQual'].fillna('NA', inplace=True)\n    NA_indx = df[(df.GarageType.isnull() == False) & df.GarageCond.isnull()].index\n    df['GarageCond'].loc[NA_indx] = all_mode['GarageCond'][0]\n    df['GarageCond'].fillna('NA', inplace=True)\n    NA_indx = df[(df.GarageType.isnull() == False) & df.GarageArea.isnull()].index\n    df['GarageArea'].loc[NA_indx] = all_mode['GarageArea'][0]\n    df['GarageArea'].fillna(0, inplace=True)    \n    # Absence of basement\n    df['BsmtFinType1'].fillna('NA', inplace=True)\n    df['BsmtExposure'].fillna('NA', inplace=True)\n    df['BsmtCond'].fillna('NA', inplace=True)\n    df['BsmtQual'].fillna('NA', inplace=True)\n    df['BsmtFinType2'].fillna('NA', inplace=True)\n    df['TotalBsmtSF'].fillna(0, inplace=True)\n    # No masonry veneer\n    df['MasVnrType'].fillna('None', inplace=True)\n    df['MasVnrArea'].fillna(0, inplace=True)\n    # When Electrical is not defined, better use Mix value\n    df['Electrical'].fillna('Mix', inplace=True)    \n    df['MSZoning'].fillna('NA', inplace=True)\n    df['Functional'].fillna('Typ', inplace=True)\n    df['BsmtHalfBath'].fillna(0, inplace=True)\n    df['BsmtFullBath'].fillna(0, inplace=True)\n    df['Utilities'].fillna('AllPub', inplace=True)\n    df['SaleType'].fillna('Oth', inplace=True)\n    df['KitchenQual'].fillna(all_mode['KitchenQual'][0], inplace=True)\n    df['BsmtUnfSF'].fillna(0, inplace=True)\n    df['BsmtFinSF1'].fillna(0, inplace=True)\n    df['BsmtFinSF2'].fillna(0, inplace=True)\n    df['Exterior1st'].fillna(all_mode['Exterior1st'][0], inplace=True)\n    df['Exterior2nd'].fillna(all_mode['Exterior2nd'][0], inplace=True)","4c731336":"fillNAs(df_train, all_mode)\nfillNAs(df_test, all_mode)\nprint(df_train.isnull().any().any())\nprint(df_test.isnull().any().any())","42801216":"target = df_train['SalePrice']\ndf_train.drop('SalePrice', axis=1, inplace=True)","b9ecf4e6":"def aggregation(df):\n    df['Neighborhood'] = df['Neighborhood'].map(\n        {'MeadowV': 0,\n        'IDOTRR': 0,\n        'BrDale': 0,\n        'BrkSide': 0,\n        'Edwards': 0,\n        'OldTown': 0,\n        'Sawyer': 0,\n        'Blueste': 0,\n        'SWISU': 0,\n        'NPkVill': 0,\n        'NAmes': 0,\n        'Mitchel': 0,\n        'SawyerW': 0,\n        'NWAmes': 0,\n        'Gilbert': 0,\n        'Blmngtn': 0,\n        'CollgCr': 0,\n        'Crawfor': 1,\n        'ClearCr': 1,\n        'Somerst': 1,\n        'Veenker': 1,\n        'Timber': 1,\n        'StoneBr': 2,\n        'NridgHt': 2,\n        'NoRidge': 2})\n    \n    df['MSZoning'] = df['MSZoning'].map(\n        {'A': 0,\n         'C': 0,\n         'FV': 1,\n         'I': 0,\n         'RH': 1,\n         'RL': 1,\n         'RP': 1,\n         'RM': 1})\n    \n    df['TotFullBath'] = df['BsmtFullBath'] + df['FullBath']\n    df['TotHalfBath'] = df['BsmtHalfBath'] + df['HalfBath']\n    \n    df['HouseStyle_stories'] = df['HouseStyle'].map(\n        {'1Story': 1,\n         '1.5Fin': 1.5,\n         '1.5Unf': 1.5,\n         '2Story': 2,\n         '2.5Fin': 2.5,\n         '2.5Unf': 2.5,\n         'SFoyer': 1.5,\n         'SLvl': 1.5})\n\n    df['HouseStyle_fin'] = df['HouseStyle'].map(\n        {'1Story': 1,\n         '1.5Fin': 1,\n         '1.5Unf': 0,\n         '2Story': 1,\n         '2.5Fin': 1,\n         '2.5Unf': 0,\n         'SFoyer': 1,\n         'SLvl': 1})","e6aa1754":"aggregation(df_train)\naggregation(df_test)","eb61e02f":"col_types = df_train.dtypes\ndf_train = pd.get_dummies(df_train, columns=col_types[col_types == 'object'].index.values, drop_first=True)\ndf_test = pd.get_dummies(df_test, columns=col_types[col_types == 'object'].index.values, drop_first=True)\nprint(df_train.shape)\nprint(df_test.shape)","6c322188":"def adapt_columns(train_columns, df):\n    # Add missing columns\n    for column in train_columns:\n        if (column not in df.columns):\n            df[column] = 0\n\n    # Delete columns that don't exist in train\n    for column in df.columns:\n        if (column not in train_columns):\n            df.drop(column, axis=1, inplace=True)\n    return df","5146310d":"adapt_columns(df_train.columns, df_test)\nprint(df_train.shape)\nprint(df_test.shape)","9802800b":"def normalization(df):\n    array_val = df.values \n    min_max_scaler = preprocessing.MinMaxScaler()\n    array_norm = min_max_scaler.fit_transform(array_val)\n    return pd.DataFrame(data=array_norm, columns=df.columns.values)","0b92ce5f":"df_train = normalization(df_train)\ndf_test = normalization(df_test)","e47de393":"#params = {'min_child_weight': [10, 15, 20],\n#          'reg_lambda': [1, 5, 10],\n#          'gamma': [0.5, 0.8],\n#          'max_depth': [8, 15, 20],\n#          'learning_rate':[0.2],\n#          'n_estimators': [20, 30, 40]}\nparams = {\n 'max_depth': [4], #[5, 10, 15, 20, 25],\n 'min_child_weight': [9],  #[5, 10, 15, 20, 25],\n 'gamma': [0.0],  #[0.0, 0.2, 0.4, 0.6, 0.8, 1.0],\n 'subsample': [1.0], #[0.7, 0.8, 0.9, 1.0],\n 'colsample_bytree': [1.0], #[0.7, 0.8, 0.9, 1.0]\n 'reg_alpha': [0.0, 0.02, 0.1, 0.5, 2, 10]\n}\n\n#model = xgb.XGBRegressor(objective='reg:linear', verbosity=0)\n\n#xgb_tune = GridSearchCV(estimator=model, param_grid=params, cv=5, verbose=2, n_jobs=4)\n#xgb_tune.fit(df_train.values, target.values)\n\n#print(xgb_tune.best_params_)","6b506b47":"xgb_params = {'max_depth': 4, \n              'min_child_weight': 9,\n              'gamma': 0.0,\n              'colsample_bytree': 1.0,\n              'subsample': 1.0,\n              'reg_alpha': 0.005,\n              'learning_rate': 0.01,\n              'n_estimators': 5000}","1983c27d":"mae = 0\nrmsle = 0\nsplits = 10\n\nkf = KFold(n_splits=splits, shuffle=True, random_state=12345)\n\nfor train_index, test_index in kf.split(df_train):\n    X_train_k, X_test_k = df_train.values[train_index], df_train.values[test_index]\n    y_train_k, y_test_k = target.values[train_index], target.values[test_index]      \n    \n    model_k = xgb.XGBRegressor(params=xgb_params)    \n    model_k.fit(X_train_k, y_train_k)\n    y_pred_k = model_k.predict(X_test_k)\n    \n    np.round(y_pred_k)\n    mae = mae + median_absolute_error(y_test_k, y_pred_k)\n    #y_pred_k[y_pred_k < 0] = 0\n    rmsle = rmsle + np.sqrt(mean_squared_log_error(y_test_k, y_pred_k))\n\nprint('MAE: ' + '{:.2f}'.format(mae\/splits)) \nprint('RMSLE: ' + '{:.4f}'.format(rmsle\/splits)) ","bc879a83":"model = xgb.XGBRegressor(params=xgb_params)\nmodel.fit(df_train.values, target.values)\ny_pred = model.predict(df_test.values)\n\ndf_pred = pd.DataFrame(data=y_pred, columns=['SalePrice'])\ndf_pred = pd.concat([test_ids, df_pred['SalePrice']], axis=1)\ndf_pred.SalePrice = df_pred.SalePrice.round(0)\ndf_pred.to_csv('submission.csv', sep=',', encoding='utf-8', index=False)","263d0054":"## 1.4 Check distinct value counts for categorical features","596ebaab":"## 2.3 Fill NAs","2e6c106c":"# 5. Train the model with XGBoost Regressor","834d4b3b":"Add missing column in test dataset and drop those that don't exists in trainig dataset. The difference could be caused by the one-hot-encoding","bb672ed0":"Change all categorical columns in binaries with one-hot-encoding for train and test dataset","6fd14fd7":"Difinitive hyperparameters:","98959d41":"# 1.9 Check the distributions of continuous numeric features","97b20e8c":"## 1.8 Check the correlation between features","0e5b2df6":"Results:\n* Neighborhood, Exterior2nd, Exterior1st are the features with higher distinct values\n* Some values are in few samples","7cce8215":"## 1.3 Get the column types","e11a6efc":"# 3. Feature Engineering","13dfd265":"This is the function to drop outliers for a single column","d6e56664":"# 1.10 Looking for chances to aggregate categorical variables","b2722034":"NaN values of LotFrontage could be a \"real\" missing value or that the property is not directly connected to the street","cc00393e":"## 2.2 Drop outliers","84e710b8":"NaN values of Fence means that there is no fence in the property","97903e32":"Results:\n* The columns that are more correlated with the target are: OverallQual, GrLivArea, GarageCars, GarageArea, TotalBsmtSF, 1stFlrSF\n* For Linear Regression, I should keep one of these columns correlated columns:\n  * YearBuilt or GarageYrBlt\n  * GrLivArea or TotRmsAbvGrd\n  * GarageCars or GarageArea\n  * TotalBsmtSF or 1stFlrSF","b6a98144":"Results:\n* The train dataset has 1.460 rows and 81 columns\n* The test dataset has 1.459 rows and 80 columns\n* The train dataset has then target variable \"Sale","bcdff9fc":"## 2.4 Separate the target feature from the training dataset","5942ca1a":"Rescale all features in numbers between 0 and 1","3483d0de":"## 3.3 Normalization","2d57399a":"## 3.2 One-hot-encoding","b6dd526b":"NaN values of PoolQC means that there is no pool in the property","f72f38dd":"## 1.2 Get the number of rows and columns (shape)","2d0a3fa0":"NaN values of BsmtFinType1 means that there is no basemente in the property. Let's see all basement related features.","90cd40a2":"Results:\n* The dataset has 3 types of columns: strings, integers and floats","7bc74f8f":"## 2.1 Drop the ID and correlated columns from train and test datasets","1f61aaac":"# 2. Cleaning the dataset","b1cbbfea":"Results:\n* Looking at the columns meanings and min-max values, probably these are not outliers. ","95352972":"## 3.1 Aggregations","7d0a0bd0":"This check should be done in both train and test dataset","6e87fdce":"NaN values of MiscFeature means that there is no alley in the property","a5ca9a3e":"NaN values of GarageType means that there is no garage in the property","26c14418":"Results:\n* Id column must be removed","d5807663":"## 1.6 Check for outliers","64a8e928":"# 4. Hyperparameters optimization","3f8f1161":"## 1.1 Read the datasets","d6f9333b":"Don't drop outliers in the train dataset for now","cef98c4b":"Results:\n* There are 19 columns with NAs\n* Alley, FireplaceQu, PoolQC, Fence, MiscFeature have too many NA","2dc95a07":"NaN values of MiscFeature means that there is no special feature in the property","6381a225":"## 1.5 Check columns with NANs","0c4b04b2":"# 6. Train the final model and make predictions on the test dataset","78401778":"Results:\n* PoolQC, MiscFeature, Alley, Fence, FireplaceQu could not exist in the property and there is a predefined values for NaNs \n* NaN values of LotFrontage could be a \"real\" missing value or that the property is not directly connected to the street\n* When BsmtFinType1 is NaN, the property has no basement, so the other 4 features are also NaN\n* BsmtFinType2 and BsmtExposure could be NaN even if there is a basement\n* When GarageType is missing, GarageYrBlt, GarageFinish, GarageQual, GarageCond, GarageCars are NaN too\n* There are few samples where GarageType is not missing, but the other features ara NaN\n* When MasVnrType is NaN, MasVnrArea is 0\n* Electrical could be NaN, but there must be an electrical system in the property\n* MSZoning doesn't have a predefined value for NaNs\n* Functional could be NaN and has a typical value \n* NaN values for BsmtHalfBath and BsmtFullBath could mean that there is no bathroom in the basement\n* Utilities, SaleType, KitchenQual, BsmtUnfSF, BsmtFinSF1, BsmtFinSF2, Exterior1st, Exterior2nd NaNs need to be treated (ex. mode)","d53b9544":"The other columns related to garage (GarageYrBlt, GarageFinish, GarageQual, GarageCond, GarageCars) are NaN or 0 when GarageType is missing","e6ad93b7":"# 1.0 Exploratory analysis of data","4d01c47d":"NaN values of FireplaceQu means that there is no fence in the property","4f294329":"# **House Prices: Advanced Regression Techniques**","9b243cce":"## 1.7 Look for columns that have too many unique values"}}