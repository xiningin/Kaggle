{"cell_type":{"ea9f711b":"code","e45ac309":"code","0fc84598":"code","3e891923":"code","3ca50100":"code","aab01417":"code","fb9ca879":"code","05244c5c":"code","97de8874":"code","c09872f6":"code","4fa01d67":"code","85b10df2":"code","051e27b1":"code","874da51a":"code","4543c216":"code","656399c7":"code","6ad67628":"code","6812009c":"code","32b08768":"code","2fdcc470":"code","05f9d0d9":"code","8d871eb3":"code","87efaed9":"code","d79b39a4":"markdown","cc172eb1":"markdown","d700e704":"markdown","8c09c1ae":"markdown","c7d9eb48":"markdown","94c2bc85":"markdown","c2b0d052":"markdown","08d387c4":"markdown","ca588031":"markdown","e041371b":"markdown","31043a5f":"markdown"},"source":{"ea9f711b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e45ac309":"#Loading Libraries\n\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os, random\nimport cv2\nfrom glob import glob\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils.np_utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Dense, Flatten, BatchNormalization, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing import image\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom pathlib import Path\nfrom PIL import Image ","0fc84598":"#Loading the data \n\ndata = os.listdir(r\"..\/input\/digits\/Digits\" )\ndata_X = []     \ndata_y = []  \ndata_classes = len(data)\nfor i in range (0,data_classes):\n    data_list = os.listdir(r\"..\/input\/digits\/Digits\" +\"\/\"+str(i))\n    for j in data_list:\n        pic = cv2.imread(r\"..\/input\/digits\/Digits\" +\"\/\"+str(i)+\"\/\"+j)\n        pic = cv2.resize(pic,(32,32))\n        data_X.append(pic)\n        data_y.append(i)\n\n         \nif len(data_X) == len(data_y) :\n    print(\"Total Dataponits = \",len(data_X))\n\n# Labels and images\ndata_X = np.array(data_X)\ndata_y = np.array(data_y)","3e891923":"#Spliting the train validation and test sets\n\ntrain_X, test_X, train_y, test_y = train_test_split(data_X,data_y,test_size=0.05)\ntrain_X, valid_X, train_y, valid_y = train_test_split(train_X,train_y,test_size=0.2)\nprint(\"Training Set Shape = \",train_X.shape)\nprint(\"Validation Set Shape = \",valid_X.shape)\nprint(\"Test Set Shape = \",test_X.shape)","3ca50100":"# Preprocessing the images for neuralnet\n\ndef Prep(img):\n    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #making image grayscale\n    img = cv2.equalizeHist(img) #Histogram equalization to enhance contrast\n    img = img\/255 #normalizing\n    return img\n\ntrain_X = np.array(list(map(Prep, train_X)))\ntest_X = np.array(list(map(Prep, test_X)))\nvalid_X= np.array(list(map(Prep, valid_X)))\n\n#Reshaping the images\ntrain_X = train_X.reshape(train_X.shape[0], train_X.shape[1], train_X.shape[2],1)\ntest_X = test_X.reshape(test_X.shape[0], test_X.shape[1], test_X.shape[2],1)\nvalid_X = valid_X.reshape(valid_X.shape[0], valid_X.shape[1], valid_X.shape[2],1)\n\n#Augmentation\ndatagen = ImageDataGenerator(width_shift_range=0.1, height_shift_range=0.1, zoom_range=0.2, shear_range=0.1, rotation_range=10)\ndatagen.fit(train_X)","aab01417":"# One hot encoding of the labels\n\ntrain_y = to_categorical(train_y, data_classes)\ntest_y = to_categorical(test_y, data_classes)\nvalid_y = to_categorical(valid_y, data_classes)","fb9ca879":"#Creating a Neural Network\n\nmodel = Sequential()\n\nmodel.add((Conv2D(60,(5,5),input_shape=(32, 32, 1) ,padding = 'Same' ,activation='relu')))\nmodel.add((Conv2D(60, (5,5),padding=\"same\",activation='relu')))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#model.add(Dropout(0.25))\n\nmodel.add((Conv2D(30, (3,3),padding=\"same\", activation='relu')))\nmodel.add((Conv2D(30, (3,3), padding=\"same\", activation='relu')))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(500,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()\n","05244c5c":"#Compiling the model\n\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon = 1e-08, decay=0.0)\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])\n\n#Fit the model\n\nhistory = model.fit(datagen.flow(train_X, train_y, batch_size=32),\n                              epochs = 30, validation_data = (valid_X, valid_y),\n                              verbose = 2, steps_per_epoch= 200)","97de8874":"# Testing the model on the test set\n\nscore = model.evaluate(test_X, test_y, verbose=0)\nprint('Test Score = ',score[0])\nprint('Test Accuracy =', score[1])","c09872f6":"# Randomly select an image from the dataset \n\nfolder=r\"..\/input\/sudoku-box-detection\/aug\"\n\na=random.choice(os.listdir(folder))\nprint(a)\nsudoku_a = cv2.imread(folder+'\/'+a)\nplt.figure()\nplt.imshow(sudoku_a)\nplt.show() ","4fa01d67":"#Preprocessing image to be read\nsudoku_a = cv2.resize(sudoku_a, (450,450))\n\n# function to greyscale, blur and change the receptive threshold of image\ndef preprocess(image):\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) \n    blur = cv2.GaussianBlur(gray, (3,3),6) \n    #blur = cv2.bilateralFilter(gray,9,75,75)\n    threshold_img = cv2.adaptiveThreshold(blur,255,1,1,11,2)\n    return threshold_img\n\nthreshold = preprocess(sudoku_a)\n\n#let's look at what we have got\nplt.figure()\nplt.imshow(threshold)\nplt.show()","85b10df2":"# Finding the outline of the sudoku puzzle in the image\ncontour_1 = sudoku_a.copy()\ncontour_2 = sudoku_a.copy()\ncontour, hierarchy = cv2.findContours(threshold,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(contour_1, contour,-1,(0,255,0),3)\n\n#let's see what we got\nplt.figure()\nplt.imshow(contour_1)\nplt.show()","051e27b1":"def main_outline(contour):\n    biggest = np.array([])\n    max_area = 0\n    for i in contour:\n        area = cv2.contourArea(i)\n        if area >50:\n            peri = cv2.arcLength(i, True)\n            approx = cv2.approxPolyDP(i , 0.02* peri, True)\n            if area > max_area and len(approx) ==4:\n                biggest = approx\n                max_area = area\n    return biggest ,max_area\n\ndef reframe(points):\n    points = points.reshape((4, 2))\n    points_new = np.zeros((4,1,2),dtype = np.int32)\n    add = points.sum(1)\n    points_new[0] = points[np.argmin(add)]\n    points_new[3] = points[np.argmax(add)]\n    diff = np.diff(points, axis =1)\n    points_new[1] = points[np.argmin(diff)]\n    points_new[2] = points[np.argmax(diff)]\n    return points_new\n\ndef splitcells(img):\n    rows = np.vsplit(img,9)\n    boxes = []\n    for r in rows:\n        cols = np.hsplit(r,9)\n        for box in cols:\n            boxes.append(box)\n    return boxes\n\n\nblack_img = np.zeros((450,450,3), np.uint8)\nbiggest, maxArea = main_outline(contour)\nif biggest.size != 0:\n    biggest = reframe(biggest)\n    cv2.drawContours(contour_2,biggest,-1, (0,255,0),10)\n    pts1 = np.float32(biggest)\n    pts2 = np.float32([[0,0],[450,0],[0,450],[450,450]])\n    matrix = cv2.getPerspectiveTransform(pts1,pts2)  \n    imagewrap = cv2.warpPerspective(sudoku_a,matrix,(450,450))\n    imagewrap =cv2.cvtColor(imagewrap, cv2.COLOR_BGR2GRAY)\n    \nplt.figure()\nplt.imshow(imagewrap)\nplt.show()","874da51a":"# Importing puzzle to be solved\npuzzle = cv2.imread(\"..\/input\/su-puzzle\/su.jpg\")\n\n#let's see what we got\nplt.figure()\nplt.imshow(puzzle)\nplt.show()\n","4543c216":"# Resizing puzzle to be solved\npuzzle = cv2.resize(puzzle, (450,450))\n# Preprocessing Puzzle \nsu_puzzle = preprocess(puzzle)\n\n# Finding the outline of the sudoku puzzle in the image\nsu_contour_1= su_puzzle.copy()\nsu_contour_2= sudoku_a.copy()\nsu_contour, hierarchy = cv2.findContours(su_puzzle,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\ncv2.drawContours(su_contour_1, su_contour,-1,(0,255,0),3)\n\nblack_img = np.zeros((450,450,3), np.uint8)\nsu_biggest, su_maxArea = main_outline(su_contour)\nif su_biggest.size != 0:\n    su_biggest = reframe(su_biggest)\n    cv2.drawContours(su_contour_2,su_biggest,-1, (0,255,0),10)\n    su_pts1 = np.float32(su_biggest)\n    su_pts2 = np.float32([[0,0],[450,0],[0,450],[450,450]])\n    su_matrix = cv2.getPerspectiveTransform(su_pts1,su_pts2)  \n    su_imagewrap = cv2.warpPerspective(puzzle,su_matrix,(450,450))\n    su_imagewrap =cv2.cvtColor(su_imagewrap, cv2.COLOR_BGR2GRAY)\n    \nplt.figure()\nplt.imshow(su_imagewrap)\nplt.show()","656399c7":"sudoku_cell = splitcells(su_imagewrap)\n#Let's have alook at the last cell\nplt.figure()\nplt.imshow(sudoku_cell[58])\nplt.show()","6ad67628":"# The sudoku_cell's output includes the boundaries this could lead to misclassifications by the model \n# I am cropping the cells to avoid that\n# sneeking in a bit of PIL lib as cv2 was giving some weird error that i couldn't ward off\n\ndef CropCell(cells):\n    Cells_croped = []\n    for image in cells:\n        \n        img = np.array(image)\n        img = img[4:46, 6:46]\n        img = Image.fromarray(img)\n        Cells_croped.append(img)\n        \n    return Cells_croped\n\nsudoku_cell_croped= CropCell(sudoku_cell)\n#Let's have alook at the last cell\nplt.figure()\nplt.imshow(sudoku_cell_croped[58])\nplt.show()","6812009c":"def read_cells(cell,model):\n\n    result = []\n    for image in cell:\n        # preprocess the image as it was in the model \n        img = np.asarray(image)\n        img = img[4:img.shape[0] - 4, 4:img.shape[1] -4]\n        img = cv2.resize(img, (32, 32))\n        img = img \/ 255\n        img = img.reshape(1, 32, 32, 1)\n        # getting predictions and setting the values if probabilities are above 65% \n        \n        predictions = model.predict(img)\n        classIndex = model.predict_classes(img)\n        probabilityValue = np.amax(predictions)\n        \n        if probabilityValue > 0.65:\n            result.append(classIndex[0])\n        else:\n            result.append(0)\n    return result\n\ngrid = read_cells(sudoku_cell_croped, model)\ngrid = np.asarray(grid)","32b08768":"# Reshaping the grid to a 9x9 matrix\n\ngrid = np.reshape(grid,(9,9))\ngrid","2fdcc470":"#For compairing \nplt.figure()\nplt.imshow(su_imagewrap)\nplt.show()","05f9d0d9":"#This function finds the next box to solve \n\ndef next_box(quiz):\n    for row in range(9):\n        for col in range(9):\n            if quiz[row][col] == 0:\n                return (row, col)\n    return False\n\n#Function to fill in the possible values by evaluating rows collumns and smaller cells\n\ndef possible (quiz,row, col, n):\n    #global quiz\n    for i in range (0,9):\n        if quiz[row][i] == n and row != i:\n            return False\n    for i in range (0,9):\n        if quiz[i][col] == n and col != i:\n            return False\n        \n    row0 = (row)\/\/3\n    col0 = (col)\/\/3\n    for i in range(row0*3, row0*3 + 3):\n        for j in range(col0*3, col0*3 + 3):\n            if quiz[i][j]==n and (i,j) != (row, col):\n                return False\n    return True\n\n#Recursion function to loop over untill a valid answer is found. \n\ndef solve(quiz):\n    val = next_box(quiz)\n    if val is False:\n        return True\n    else:\n        row, col = val\n        for n in range(1,10): #n is the possible solution\n            if possible(quiz,row, col, n):\n                quiz[row][col]=n\n                if solve(quiz):\n                    return True \n                else:\n                    quiz[row][col]=0\n        return \n    \ndef Solved(quiz):\n    for row in range(9):\n        if row % 3 == 0 and row != 0:\n            print(\"....................\")\n\n        for col in range(9):\n            if col % 3 == 0 and col != 0:\n                print(\"|\", end=\" \")\n\n            if col == 8:\n                print(quiz[row][col])\n            else:\n                print(str(quiz[row][col]) + \" \", end=\"\")\n                \n            ","8d871eb3":"solve(grid)","87efaed9":"if solve(grid):\n    Solved(grid)\nelse:\n    print(\"Solution don't exist. Model misread digits.\")","d79b39a4":"The goal of [this](https:\/\/www.kaggle.com\/macfooty\/sudoku-box-detection) dataset is to detect the Sudoku box that has been done.  So yey! \n\nHowever, some of the images are unfit to use in our model (some are blurr or solved). So to demonstrate solving I have created a toy dataset of one clear picture. I will be using that to run the model and solve the puzzle.","cc172eb1":"<a id=\"4\"><\/a>\n# **<span style=\"color:#4686C8;\">SPLITTING DATASET<\/span>**\n\nSplitting the dataset into test, train and validation sets. Preprocessing for the features (images) into grayscale, enhancing it with histogram equalization and then normalizing. Followed by converting then into a NumPy array. further reshaping the image's array and using data augmentation. Preprocessing for the labels involves one-hot encoding the label classes","d700e704":"![Green and Blue Illustrative Technology Business Plan Presentation (4).png](attachment:ba7e78b7-addc-4121-8b1b-4c1bb50ddcf7.png)\n\n <h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>PART ONE<\/center><\/h1> \n \n<a id=\"2\"><\/a>\n# **<span style=\"color:#4686C8;\">DIGIT CLASSIFICATION MODEL<\/span>** \n\n**In this section:**\n\n* Loading Data \n* Splitting The Test Train And Validation Sets\n* Preprocessing The Data\n* Model Building And Training\n\n<a id=\"3\"><\/a>\n# **<span style=\"color:#4686C8;\">LOADING DATA<\/span>**\n\nThe dataset of images is used for building a suitable model to classify numbers in an image. Data is then specified as features(the image) and labels(the tags). ","8c09c1ae":"**Some useful resources**:\n\nhttps:\/\/www.youtube.com\/watch?v=G_UYXzGuqvM\n\nhttps:\/\/www.kaggle.com\/yashchoudhary\/deep-sudoku-solver-multiple-approaches\n\nhttps:\/\/www.youtube.com\/watch?v=QR66rMS_ZfA\n\n\n\n**<span style=\"color:#5CE1E6;\"> If you liked this Notebook, please do upvote.<\/span>**\n\n**<span style=\"color:#5CE1E6;\"> If you have any suggestions or questions, feel free to comment!<\/span>**\n\n**<span style=\"color:#5CE1E6;\">Best Wishes!<\/span>**\n\n\n<a id=\"10\"><\/a>\n<h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>END<\/center><\/h1> \n","c7d9eb48":"# <h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>SUDOKU PUZZLE <\/center><\/h1> \n\nFor this project, I am going to solve a sudoku puzzle from an image of an unsolved puzzle. \n\n![Green and Blue Illustrative Technology Business Plan Presentation (3).png](attachment:6b11dbd1-adc1-4987-8934-8f18e37d2cc6.png)\n\nThe project is divided into three parts\n\n**Part One: Digit Classification Model**\n\nBuild and train a neural network on the Chars74K image dataset for digits. This will be further used in classifying the digits in the image.\n\n**Part Two: Detecting And Reading The Sudoku From An Image**\n\nIdentify the sudoku puzzle in an image using OpenCV-library.\nClassify the digits in the detected sudoku puzzle using the model made in part one. \nGetting the values of the cells in the sudoku in for of array.\n\n**Part Three: Solving The Puzzle**\n\nThe array is converted into matrix.\nThe given puzzle is are solved using recursion. \n\n\n   <a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>TABLE OF CONTENTS<\/center><\/h1>\n\n[1. IMPORTING LIBRARIES](#1)\n    \n[2. PART ONE: DIGIT CLASSIFICATION MODEL](#2)    \n\n[3. LOADING DATA](#3)        \n\n[4. SPLITTING DATASET](#4) \n\n[5. MODEL BUILDING](#5) \n\n[6. PART TWO: READING THE SUDOKU PUZZLE](#6) \n    \n[7. DETECTING CONTOUR](#7)    \n\n[8. SPLITTING THE CELLS AND CLASSIFYING DIGITS](#8)        \n\n[9. PART THREE: SOLVING THE SUDOKU](#9) \n\n[10. END](#10) \n    \n    \n <a id=\"1\"><\/a>\n# **<span style=\"color:#4686C8;\">IMPORTING LIBRARIES<\/span>**\n","94c2bc85":"<a id=\"8\"><\/a>\n# **<span style=\"color:#4686C8;\">SPLITTING THE CELLS AND CLASSIFYING DIGITS<\/span>**\n\n* Splitting the sudoku box into 81 cells with empty spaces or digits \n* Cropping the cells to avoid misdetection of boundary lines as digits\n* Using the model to classify the digits in the cells such that the empty cells are classified as zero\n* Getting the detected output in the form of an array of 81 digits ","c2b0d052":"Some numbers may be missing as it may be due to the classification probabilities may be below 65%. It could lead to more than one solution. I am just going with it.\n\nP.S. Adding an arbitrary number could lead to a puzzle with no solution. Whereas, removing numbers increase the combinations.","08d387c4":"<a id=\"7\"><\/a>\n# **<span style=\"color:#4686C8;\">DETECTING CONTOUR<\/span>**\n\n* Detect the biggest contour of the image.\n* Reshaping the outline to get the cropped and well-aligned Sudoku","ca588031":"# <h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>PART THREE<\/center><\/h1> \n\n<a id=\"9\"><\/a>\n# **<span style=\"color:#4686C8;\">SOLVING THE SUDOKU<\/span>**\n\n* Reshaping the array into a 9 x 9 matrix \n* Solving the matrix using recursion","e041371b":"# <h1 style='background:#4686C8; border:0; color:#5CE1E6'><center>PART TWO<\/center><\/h1> \n\n<a id=\"6\"><\/a>\n# **<span style=\"color:#4686C8;\">READING THE SUDOKU PUZZLE <\/span>**\n\n**In this section:**\n\n* Read an image from the dataset \n* Preprocess the image ","31043a5f":"<a id=\"5\"><\/a>\n# **<span style=\"color:#4686C8;\">MODEL BUILDING<\/span>**\n\n**For the model, I will build a convolutional neural network.**\n* Initialising the Convnet\n* Defining by adding layers\n* Compiling the Convnet\n* Train the Convnet"}}