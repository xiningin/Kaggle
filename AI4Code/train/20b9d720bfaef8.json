{"cell_type":{"fae608fb":"code","98159515":"code","dc8a5ac1":"code","633cd385":"code","b4733622":"code","8d36df5e":"code","7bb9a82f":"code","bfab410a":"code","57eff696":"code","93ecebe8":"code","5bbf1623":"code","77468c78":"code","038de6ac":"code","408d4636":"code","c0ccb718":"code","cd2cf320":"code","eb3d687b":"code","9b1f6318":"code","f737db36":"code","b9815f6e":"code","56d65ed8":"code","edf7338c":"code","aa0a149a":"code","e6d54b34":"code","264d2bc0":"code","a4e1a30e":"code","d636a917":"code","92fdd8ea":"code","b3ed25d8":"code","c4ec8f7f":"code","f1d67219":"code","007b4db0":"code","e1c5af29":"code","456b425e":"code","7d727ebf":"code","f0aceac6":"code","af88d39d":"code","2408e8a9":"code","18421712":"code","a78b7917":"code","df5211d9":"code","9119e192":"code","a0e4cd10":"code","9a0ffcd7":"code","feee7697":"code","fb10f389":"code","ca00e6d5":"code","32ec0dbd":"code","a29d5cc1":"code","65cccae5":"code","6cb72f9f":"code","05f9770c":"code","0a20140e":"code","0bd54faa":"code","0517cef4":"code","e5837ba5":"code","735807f4":"code","1cf8f6a0":"code","e48157c1":"markdown","2cc08afa":"markdown","b392bf49":"markdown","1c69f1ee":"markdown","6d2524d2":"markdown","e6c0ad33":"markdown","2c77cade":"markdown","42e612a7":"markdown","679887fe":"markdown","bd10b05d":"markdown","0ed7686d":"markdown","8b83e6ce":"markdown","e1c9f0b8":"markdown","33c09e19":"markdown","a7f49e3c":"markdown","2adcd9ac":"markdown","804ca3b0":"markdown","555f402f":"markdown","da27ff2b":"markdown","ad26cce5":"markdown","1e090713":"markdown","3f43000f":"markdown","3f8f215c":"markdown","564b03d4":"markdown","47d7e365":"markdown","452e07df":"markdown","dca4ced1":"markdown","c717e66f":"markdown","2b0f764f":"markdown","bb2703ee":"markdown","1765dbf6":"markdown","f0923ab3":"markdown","9d18fe0c":"markdown","844a283c":"markdown","5a19099a":"markdown","ae855282":"markdown","d0ec9c6b":"markdown"},"source":{"fae608fb":"import sys\nimport random\nimport operator\nimport zipfile\nfrom time import sleep\nimport re\nimport gc\nimport math\nimport os\nimport time\nimport string\nimport random\nimport pickle\n\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly import graph_objs as go\nfrom IPython.display import display_html,HTML, Javascript\n\nimport tensorflow as tf \nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\nfrom plotly.subplots import make_subplots\n\nfrom PIL import Image\n\nfrom tqdm.autonotebook import tqdm\n\n\n\n\nimport nltk\nfrom pandas import DataFrame\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.feature_extraction.text import CountVectorizer as CV\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer \n# from cuml.feature_extraction.text import CountVectorizer\n# from cuml.neighbors import NearestNeighbors\nfrom sklearn.model_selection import train_test_split\nfrom colorama import Fore, Back, Style\nfrom wordcloud import WordCloud,STOPWORDS\nfrom PIL import Image\nfrom nltk.tokenize import word_tokenize\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation,BatchNormalization\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model,load_model\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.preprocessing import text, sequence\n\nnltk.download('stopwords')\n\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom pprint import pprint\n\n\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff","98159515":"# Defining all our palette colours.\nprimary_azure = \"#8A2BE2\"\nprimary_slate = \"#CCFFFF\"\nprimary_aquamarine = \"#7FFFD4\"\nprimary_crimson = '#1E90FF'\nprimary_venom_green = \"#728C00\"\nprimary_orchid = \"#D8BFD8\"\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\n\nprimary_green = px.colors.qualitative.Plotly[2]\n\n# Defining all colors for text.\nHEAD = '\\x1b[1;31;47m'\nCOMMENT1='\\x1b[1;30;43m'\nCOMMENT2='\\x1b[1;30;44m'\n\nsns.set(rc={'axes.facecolor':'white', 'figure.facecolor':'#234E70'})\npd.set_option('display.max_columns',10)\nsys.setrecursionlimit(10**8)\n\nBASE_PATH = '..\/input\/jigsaw-toxic-comment-classification-challenge'\nunzip = zipfile.ZipFile('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')\nunzip.extractall()\nunzip = zipfile.ZipFile('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')\nunzip.extractall()\nunzip = zipfile.ZipFile('..\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv.zip')\nunzip.extractall()","dc8a5ac1":"train_df = pd.read_csv('.\/train.csv')\ntest_df = pd.read_csv('.\/test.csv')\ntrain_df.head()","633cd385":"train_df['text_len'] = train_df['comment_text'].apply(lambda x: len(x.split(' ')))\ntest_df['text_len'] = test_df['comment_text'].apply(lambda x: len(x.split(' ')))\n\ncolors = [primary_slate,primary_aquamarine,primary_azure,primary_crimson,primary_venom_green,primary_green]\nlabel_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\ntrain_df['none'] = 1-train_df[label_cols].max(axis=1)\nlabel_with_clean = label_cols.copy()\nlabel_with_clean.append('none')\n\ntrain_df['comment_text'].fillna(\"unknown\", inplace=True)\ntest_df['comment_text'].fillna(\"unknown\", inplace=True)\nprint(HEAD+\"train data \\n\"+COMMENT1+\"total data entries: \\t\"+COMMENT2+f\"{len(train_df)}\"+COMMENT1 +\"\\nmaximum comment len: \\t\"\\\n      +COMMENT2 +f\"{max(train_df['text_len'])}\"+COMMENT1+\"\\nminimum comment len: \\t\"+COMMENT2+f\"{min(train_df['text_len'])}\"+\\\n      COMMENT1 +\"\\nmean comment len: \\t\"+COMMENT2 +f\"{train_df['text_len'].mean()}\\n\")\n\nprint(HEAD+f\"test data \\n\"+COMMENT1+\"total data entries: \\t\"+COMMENT2+f\"{len(test_df)}\"+COMMENT1 +\"\\nmaximum comment len: \\t\" \\\n      +COMMENT2 +f\"{max(test_df['text_len'])}\"+ COMMENT1 +\"\\nminimum comment len: \\t\"+COMMENT2+f\"{min(test_df['text_len'])}\"+ COMMENT1 +\"\\nmean comment len: \\t\"+ \\\n      COMMENT2 +f\"{test_df['text_len'].mean()}\")\n\nprint(HEAD+f\"\\nClean Vs. Toxic \\n\"+COMMENT1+\"clean comments: \\t\"+COMMENT2+f\"{len(train_df[train_df.none==1])}\" \\\n     +COMMENT1+\"\\nAll kind of toxic comments: \\t\"+COMMENT2+f\"{len(train_df[train_df.none==0])}\")\n\nprint(HEAD+f\"\\nAll kind of toxicity \\n\"+COMMENT1+\"toxic: \\t\\t\"+COMMENT2+f\"{len(train_df[train_df.toxic==1])}\"\\\n     +COMMENT1+f\"\\nsevere toxic: \\t\"+COMMENT2+f\"{len(train_df[train_df.severe_toxic==1])}\"\\\n     +COMMENT1+f\"\\nobscene: \\t\"+COMMENT2+f\"{len(train_df[train_df.obscene==1])}\"\\\n     +COMMENT1+f\"\\nthreat: \\t\"+COMMENT2+f\"{len(train_df[train_df.threat==1])}\"\\\n     +COMMENT1+f\"\\ninsult: \\t\"+COMMENT2+f\"{len(train_df[train_df.insult==1])}\"\\\n     +COMMENT1+f\"\\nidentity hate: \\t\"+COMMENT2+f\"{len(train_df[train_df.identity_hate==1])}\")","b4733622":"print(HEAD+\"clean comment:\\n\")\nprint(COMMENT1+train_df[train_df.none==1].iloc[3,1])","8d36df5e":"print(HEAD+\"toxic comment:\\n\")\nprint(COMMENT1+train_df[train_df.toxic==1].iloc[3,1])","7bb9a82f":"print(HEAD+'severe_toxic:\\n')\nprint(COMMENT1+train_df[train_df.severe_toxic==1].iloc[2,1])","bfab410a":"print(HEAD+'threat:\\n')\nprint(COMMENT1+train_df[train_df.threat==1].iloc[7,1])","57eff696":"print(HEAD+'insult:\\n')\nprint(COMMENT1+train_df[train_df.insult==1].iloc[22,1])","93ecebe8":"print(HEAD+\"Obscene:\\n\")\nprint(COMMENT1+train_df[train_df.obscene==1].iloc[2,1])","5bbf1623":"print(HEAD+\"identity_hate:\\n\")\nprint(COMMENT1+train_df[train_df.identity_hate==1].iloc[3,1])","77468c78":"balance_counts = train_df[label_with_clean].sum().tolist()\nbalance_sum = pd.DataFrame(balance_counts, columns=['toxicity'],index=label_with_clean)\nbalance_sum.drop(['none'],inplace=True)","038de6ac":"fig = go.Figure()\nfor i,label in enumerate(zip(label_with_clean,colors)):\n    fig.add_trace(go.Bar(\n    x=[label[0]],\n    y=[balance_counts[i]],\n    name=label[0],\n    text=[balance_counts[i]],\n    textposition='auto',\n    marker_color=label[1]\n    ))\nfig.update_layout(\n    paper_bgcolor='#234E70',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Dataset distribution by labels<\/span>',\n    font=dict(color='white',family=\"Courier New, monospace\"),\n)\nfig.show()\n\n\nfig1 = px.pie(train_df['none'].value_counts().reset_index(), values='none',names=['non-toxic',\"All type of toxicity\"])\nfig1.update_traces(textposition=\"inside\", textinfo='percent+label')\nfig1.update_layout(paper_bgcolor='#234E70',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(color='white',family=\"Courier New, monospace\"),\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Distribution by very bad amd normal comments<\/span>',)\nfig1.show()\n\nfig1 = px.pie(balance_sum,values='toxicity',names=[\"toxic\",'severe_toxic','obscene',\"threat\",\"insult\",\"identity_hate\"])\nfig1.update_traces(textposition=\"inside\", textinfo=\"percent+label\")\nfig1.update_layout(paper_bgcolor='#234E70',\n    plot_bgcolor='rgba(0,0,0,0)',\n    font=dict(color='white',family=\"Courier New, monospace\"),\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Distribution between types of toxic comments<\/span>',)\nfig1.show()","408d4636":"row_sums = train_df[label_cols].sum(axis=1)\nx = row_sums.value_counts()\n\n\nfig = go.Figure()\nfor i,label in enumerate(x):\n    fig.add_trace(go.Bar(\n        x=[i],\n        y=[label],\n        name=i,\n        text=[label],\n        textposition='auto',\n        marker_color=[colors[5]]\n    ))\nfig.update_layout(\n    paper_bgcolor='#234E70',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Comments with multiple labels<\/span>',\n    font=dict(color='white',family=\"Courier New, monospace\"),\n)\nfig.show()    ","c0ccb718":"def cutout(seq, idx):\n    return seq[idx+1:] + seq[:idx]\n\ncorr_df = []\nfor i,main_cols in enumerate(zip(train_df.columns[2:8],colors)):\n    corr_mats = []\n    for other_cols in cutout(label_cols,i):\n        confusion_matrix = pd.crosstab(train_df[main_cols[0]],train_df[other_cols])\n        corr_mats.append(confusion_matrix)\n    out = pd.concat(corr_mats,axis=1,keys=cutout(label_cols,i))\n    out = out.style.highlight_min(color=colors[i], axis=0)\n    out = out.set_table_styles([{'selector':'th','props':[('background-color','#234E70'),('color', 'cyan')]}])\n    corr_df.append(out)","cd2cf320":"df1_styler = corr_df[0].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 16px;color:black;'\").set_caption('Correlation between toxic and other labels')\ndf2_styler = corr_df[1].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 16px;color:black;'\").set_caption('Correlation between severe-toxic and other labels')\ndf3_styler = corr_df[2].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 17px;color:black;'\").set_caption('Correlation between obscene and other labels')\ndf4_styler = corr_df[3].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 17px;color:black;'\").set_caption('Correlation between threat and other labels')\ndf5_styler = corr_df[4].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 16px;color:black;'\").set_caption('Correlation between insult and other labels')\ndf6_styler = corr_df[5].set_table_attributes(\"style='display:inline;margin:40px;font-family:monospace;font-style: oblique;font-weight: bold;font-variant: small-caps;font-size: 16px;color:black;'\").set_caption('Correlation between idendity-hate and other labels')\n\ndisplay_html(df1_styler._repr_html_(), raw=True)\ndisplay_html(df2_styler._repr_html_(), raw=True)\ndisplay_html(df3_styler._repr_html_(), raw=True)\ndisplay_html(df4_styler._repr_html_(), raw=True)\ndisplay_html(df5_styler._repr_html_(), raw=True)\ndisplay_html(df6_styler._repr_html_(), raw=True)","eb3d687b":"stop_words = stopwords.words('english')\nmore_stop_words = ['u','im','c','ur']\nstop_words = stop_words + more_stop_words\n\n#unique_word_count \ntrain_df[\"unique_word\"] = train_df[\"comment_text\"].apply(lambda x:len(set(str(x).split())))\ntest_df[\"unique_word\"] = train_df[\"comment_text\"].apply(lambda x:len(set(str(x).split())))\n\n# stop_word_count\ntrain_df[\"stop_word\"] = train_df['comment_text'].apply(lambda x:len([w for w in str(x).lower().split() if w in stop_words]))\ntest_df[\"stop_word\"] = test_df['comment_text'].apply(lambda x:len([w for w in str(x).lower().split() if w in stop_words]))\n\n# url_count\ntrain_df['url_count'] = train_df['comment_text'].apply(lambda x:len([w for w in str(x).lower().split() if 'http' in w or 'https' in w]))\ntest_df['url_count'] = test_df['comment_text'].apply(lambda x:len([w for w in str(x).lower().split() if 'http' in w or 'https' in w]))\n\n# char_count\ntrain_df['char_count'] = train_df['comment_text'].apply(lambda x: len(str(x)))\ntest_df['char_count'] = test_df['comment_text'].apply(lambda x: len(str(x)))\n\n# punctuation_count\ntrain_df['punctuation_count'] = train_df['comment_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))\ntest_df['punctuation_count'] = test_df['comment_text'].apply(lambda x: len([c for c in str(x) if c in string.punctuation]))","9b1f6318":"labels_cols = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\nbalance_counts = train_df[labels_cols].sum().tolist()\n\ndef nano_method(num):\n    if num%2==0:return 2\n    else:return 1\n    \ndfs={}\nfor label in labels_cols:\n    dfs[label] = train_df[train_df[label]==1]\n\nfig = make_subplots(rows=3,cols=2)\n\nfor i, label in enumerate(labels_cols,1):\n        fig.add_trace(\n            go.Scatter(x=dfs[label][[label,'text_len']].index,\n                       y=dfs[label][[label,'text_len']].values[:,1],name=label,fill='tozeroy'),\n            row=math.ceil(i\/2),col=nano_method(i)\n        )\n\nfig.update_layout(height=800, width=800,\n    paper_bgcolor='#234E70',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='<span style=\"font-size:32px; font-family:Times New Roman\">Data Roles in Different Fields<\/span>',\n    font=dict(color='white',family=\"Courier New, monospace\"),\n    \n)\nfig.update_xaxes(range=[0,160000])\nfig.update_yaxes(range=[0,2500])\nfig.show()","f737db36":"METAFEATURES = ['text_len','unique_word', 'stop_word','url_count','char_count','punctuation_count']\n\nfig, axes = plt.subplots(ncols=2, nrows=len(METAFEATURES), figsize=(25,40),dpi=100)\n\n\nfor i, feature in tqdm(enumerate(METAFEATURES),desc='loop'):\n    sns.histplot(dfs['toxic'][feature], label='toxic', ax=axes[i][0], color=colors[5],kde=True,common_norm=True)\n    sns.histplot(dfs['severe_toxic'][feature], label='severe_toxic',ax=axes[i][0], color=colors[4],kde=True,common_norm=True)\n    sns.histplot(dfs['obscene'][feature], label='obscene', ax=axes[i][0], color=colors[3],kde=True,common_norm=True)\n    sns.histplot(dfs['threat'][feature], label='threat', ax=axes[i][0], color=colors[2],kde=True,common_norm=True)\n    sns.histplot(dfs['insult'][feature], label='insult', ax=axes[i][0], color=colors[1],kde=True,common_norm=True)\n    sns.histplot(dfs['identity_hate'][feature], label='identity_hate', ax=axes[i][0], color=colors[0],kde=True,common_norm=True)\n\n    sns.histplot(train_df[feature], label=\"Training\", ax=axes[i][1],color=colors[2],kde=True,common_norm=True)\n    sns.histplot(test_df[feature], label='Test', ax=axes[i][1],color=colors[0],common_norm=True)\n    sleep(0.01)\n    for j in range(2):\n        axes[i][j].set_xlabel('')\n        axes[i][j].set_yscale('symlog', base=5,)\n        axes[i][j].tick_params(axis='x', labelsize=20,colors='w')\n        axes[i][j].tick_params(axis='y', labelsize=20,colors='w')\n        axes[i][j].legend()\n    \n    axes[i][0].set_title(f\"{feature} Target Distribution in Training Set\", fontsize=20,color='white')\n    axes[i][1].set_title(f\"{feature} Training & Test Set Distribution\", fontsize=20,color='white')\nplt.show()\n         ","b9815f6e":"stopword = set(STOPWORDS)","56d65ed8":"#clean comments\nclean_mask=np.array(Image.open(\"..\/input\/logogo\/Descarga gratis Mensaje.png\"))\nclean_mask=clean_mask[:,:,1]\n#wordcloud for clean comments\nsubset=train_df[train_df.none==True]\ntext=subset.comment_text.values\nwc= WordCloud(background_color=\"#234E70\",max_words=2000,mask=clean_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.figure(figsize=(20,10))\nplt.axis(\"off\")\nplt.title('Top words for clean comments', \n          fontsize=25,color='white')\nplt.imshow(wc.recolor(colormap= 'viridis' , random_state=17), alpha=0.98)\nplt.show()","edf7338c":"#toxic\nplt.figure(figsize=(40,50))\nplt.subplot(321)\ntoxic_mask = np.array(Image.open('..\/input\/mzzzzzz\/Negative Grade.jpeg'))\n# toxic_mask = toxic_mask[:,:,1]\n# words cloud for toxic comments\ntext = dfs['toxic'].comment_text.values\nwc = WordCloud(background_color='black',max_words=500,mask=toxic_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.title('Words frequented in Toxic Comments', fontsize=25,color='black')\nplt.axis('off')\nplt.imshow(wc)\n\n\n\n#severe_toxic\nplt.subplot(322)\nsevere_toxic = np.array(Image.open(\"..\/input\/masks-for-masks\/Cat What Murderous Black Cat With Knife Halloween Sticker.jpeg\"))\n# severe_toxic = severe_toxic[:,:,1]\n# wprds cloud for severe_toxic comments\ntext = dfs['severe_toxic'].comment_text.values\nwc = WordCloud(background_color='black', max_words=500, mask=severe_toxic, stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.axis('off')\nplt.title('Words frequented in severe toxic comments',fontsize=25,color='black')\nplt.imshow(wc.recolor(colormap='Paired_r', random_state=122), alpha=0.96)\n\n#obscene\nplt.subplot(323)\nobscene_mask = np.array(Image.open('..\/input\/masks-for-masks\/Image about cute in anime by socoki on We Heart It.jpeg'))\n# obscene_mask = obscene_mask[:,:,1]\n# words cloud for objscene comments\ntext = dfs['obscene'].comment_text.values\nwc = WordCloud(background_color='black', max_words=500, mask=obscene_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.axis('off')\nplt.title('Words frequented in obscene commnets', fontsize=25,color='black')\nplt.imshow(wc.recolor(colormap='RdGy', random_state=215), alpha=0.96)\n\n#threat\nplt.subplot(324)\nthreat_mask = np.array(Image.open('..\/input\/masks-for-masks\/dinner Tosha C_ on ArtStation at https __www.artstation.jpeg'))\n# threat_mask = threat_mask[:,:,1]\n# words cloud for objscene comments\ntext = dfs['threat'].comment_text.values\nwc = WordCloud(background_color='black', max_words=500, mask=threat_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.axis('off')\nplt.title('Words frequented in threat commnets',fontsize=25,color='black')\nplt.imshow(wc.recolor(colormap='rainbow', random_state=215), alpha=0.96)\n\n#insult\nplt.subplot(325)\ninsult_mask = np.array(Image.open('..\/input\/mzzzzzz\/Marshmello Dj Art Print by Shootme - X-Small.jpeg'))\n# insult_mask = insult_mask[:,:,1]\n# words cloud for objscene comments\ntext = dfs['insult'].comment_text.values\nwc = WordCloud(background_color='black', max_words=200, mask=insult_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.axis('off')\nplt.title('Words frequented in insult commnets',fontsize=25,color='black')\nplt.imshow(wc.recolor(colormap='plasma', random_state=215), alpha=0.96)\n\n#identity hate\nplt.subplot(326)\nidentity_hate_mask = np.array(Image.open('..\/input\/masks-for-masks\/Bloodwraith A Fantasy World of Survival and Torment.jpeg'))\n# identity_hate_mask = identity_hate_mask[:,:,1]\n# words cloud for objscene comments\ntext = dfs['identity_hate'].comment_text.values\nwc = WordCloud(background_color='black', max_words=600, mask=identity_hate_mask,stopwords=stopword)\nwc.generate(\" \".join(text))\nplt.axis('off')\nplt.title('Words frequented in identity hate commnets', fontsize=25,color='black')\nplt.imshow(wc.recolor(random_state=125), alpha=0.96)\n\nplt.show()","aa0a149a":"def remove_punctuation(text):\n    punclist = string.punctuation + string.digits\n    # remove punctuation from text\n    table_ = str.maketrans(punclist,' '*len(punclist))\n    text_list = ' '.join(text.translate(table_).split())\n    return text_list\n\ndef remove_stopwords(text):\n    stop_words = stopwords.words('english')\n    more_stopwords = ['u','ya','yo','imma','im','c','da','be','s','on','off','na','nah','noo']\n    stop_words = stop_words + more_stopwords\n    text = ' '.join(word for word in text.split(' ') if word not in stop_words)\n    return text\n\ndef remove_apostrophe(text):\n    return text.replace(\"'\",\"\")\n    \ndef stem_word(text):\n    stemmer = PorterStemmer()\n    text = ' '.join(stemmer.stem(word) for word in text.split(' '))\n    return text\n\ndef lemm_word(text):\n    lemmer = WordNetLemmatizer()\n    text = ' '.join(lemmer.lemmatize(word) for word in text.split(' '))\n    return text","e6d54b34":"def standard_preprocess(text):\n    text = str(text).lower()\n    text = remove_punctuation(text)\n    text = remove_stopwords(text)\n    text = remove_apostrophe(text)\n    text = lemm_word(text)\n    text = stem_word(text)\n    text = remove_punctuation(text)\n    return text","264d2bc0":"%%time\ntqdm.pandas()\ntrain_df['simple_preprocess'] = train_df['comment_text'].progress_apply(standard_preprocess)\ntest_df['simple_preprocess'] = test_df['comment_text'].progress_apply(standard_preprocess)","a4e1a30e":"# these function are borrowed from:-\"https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-for-glove-part1-eda\"\n\nimport operator \n\ndef check_coverage(vocab,embeddings_index):\n    a = {}\n    oov = {}\n    k = 0\n    i = 0\n    for word in tqdm(vocab):\n        try:\n            a[word] = embeddings_index[word]\n            k += vocab[word]\n        except:\n\n            oov[word] = vocab[word]\n            i += vocab[word]\n            pass\n\n    print('Found embeddings for {:.2%} of vocab'.format(len(a) \/ len(vocab)))\n    print('Found embeddings for  {:.2%} of all text'.format(k \/ (k + i)))\n    sorted_x = sorted(oov.items(), key=operator.itemgetter(1))[::-1]\n\n    return sorted_x\n\ndef build_vocab(sentences, verbose =  True):\n    \"\"\"\n    :param sentences: list of list of words\n    :return: dictionary of words and their count\n    \"\"\"\n    vocab = {}\n    for sentence in tqdm(sentences, disable = (not verbose)):\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab\n\ndef get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\n\n\ndef load_embeddings(path):\n    with open(path,'rb') as f:\n        emb_arr = pickle.load(f)\n    return emb_arr","d636a917":"CRAWL_EMBEDDING_PATH = '..\/input\/pickled-crawl300d2m-for-kernel-competitions\/crawl-300d-2M.pkl'\nGLOVE_EMBEDDING_PATH = '..\/input\/pickled-glove840b300d-for-10sec-loading\/glove.840B.300d.pkl'","92fdd8ea":"# load embeddings\ntic = time.time()\nglove_embeddings = load_embeddings(GLOVE_EMBEDDING_PATH)\nprint(HEAD+f'loaded {len(glove_embeddings)} word vectors in {time.time()-tic}s')","b3ed25d8":"vocab = build_vocab(list(train_df['comment_text'].apply(lambda x:x.split())))\noov = check_coverage(vocab,glove_embeddings)\nfor i in oov[:10]:\n    print(COMMENT2+f\"{i}\")","c4ec8f7f":"vocab = build_vocab(list(train_df['simple_preprocess'].apply(lambda x:x.split())))\noov = check_coverage(vocab,glove_embeddings)\nfor i in oov[:10]:\n    print(COMMENT1+f\"{i}\")","f1d67219":"latin_similar = \"\u2019'\u2018\u00c6\u00d0\u018e\u018f\u0190\u0194\u0132\u014a\u0152\u1e9e\u00de\u01f7\u021c\u00e6\u00f0\u01dd\u0259\u025b\u0263\u0133\u014b\u0153\u0138\u017f\u00df\u00fe\u01bf\u021d\u0104\u0181\u00c7\u0110\u018a\u0118\u0126\u012e\u0198\u0141\u00d8\u01a0\u015e\u0218\u0162\u021a\u0166\u0172\u01afY\u0328\u01b3\u0105\u0253\u00e7\u0111\u0257\u0119\u0127\u012f\u0199\u0142\u00f8\u01a1\u015f\u0219\u0163\u021b\u0167\u0173\u01b0y\u0328\u01b4\u00c1\u00c0\u00c2\u00c4\u01cd\u0102\u0100\u00c3\u00c5\u01fa\u0104\u00c6\u01fc\u01e2\u0181\u0106\u010a\u0108\u010c\u00c7\u010e\u1e0c\u0110\u018a\u00d0\u00c9\u00c8\u0116\u00ca\u00cb\u011a\u0114\u0112\u0118\u1eb8\u018e\u018f\u0190\u0120\u011c\u01e6\u011e\u0122\u0194\u00e1\u00e0\u00e2\u00e4\u01ce\u0103\u0101\u00e3\u00e5\u01fb\u0105\u00e6\u01fd\u01e3\u0253\u0107\u010b\u0109\u010d\u00e7\u010f\u1e0d\u0111\u0257\u00f0\u00e9\u00e8\u0117\u00ea\u00eb\u011b\u0115\u0113\u0119\u1eb9\u01dd\u0259\u025b\u0121\u011d\u01e7\u011f\u0123\u0263\u0124\u1e24\u0126I\u00cd\u00cc\u0130\u00ce\u00cf\u01cf\u012c\u012a\u0128\u012e\u1eca\u0132\u0134\u0136\u0198\u0139\u013b\u0141\u013d\u013f\u02bcN\u0143N\u0308\u0147\u00d1\u0145\u014a\u00d3\u00d2\u00d4\u00d6\u01d1\u014e\u014c\u00d5\u0150\u1ecc\u00d8\u01fe\u01a0\u0152\u0125\u1e25\u0127\u0131\u00ed\u00eci\u00ee\u00ef\u01d0\u012d\u012b\u0129\u012f\u1ecb\u0133\u0135\u0137\u0199\u0138\u013a\u013c\u0142\u013e\u0140\u0149\u0144n\u0308\u0148\u00f1\u0146\u014b\u00f3\u00f2\u00f4\u00f6\u01d2\u014f\u014d\u00f5\u0151\u1ecd\u00f8\u01ff\u01a1\u0153\u0154\u0158\u0156\u015a\u015c\u0160\u015e\u0218\u1e62\u1e9e\u0164\u0162\u1e6c\u0166\u00de\u00da\u00d9\u00db\u00dc\u01d3\u016c\u016a\u0168\u0170\u016e\u0172\u1ee4\u01af\u1e82\u1e80\u0174\u1e84\u01f7\u00dd\u1ef2\u0176\u0178\u0232\u1ef8\u01b3\u0179\u017b\u017d\u1e92\u0155\u0159\u0157\u017f\u015b\u015d\u0161\u015f\u0219\u1e63\u00df\u0165\u0163\u1e6d\u0167\u00fe\u00fa\u00f9\u00fb\u00fc\u01d4\u016d\u016b\u0169\u0171\u016f\u0173\u1ee5\u01b0\u1e83\u1e81\u0175\u1e85\u01bf\u00fd\u1ef3\u0177\u00ff\u0233\u1ef9\u01b4\u017a\u017c\u017e\u1e93\"\nwhite_list = string.ascii_letters + string.digits + latin_similar + ' '\nwhite_list += \"'\"","007b4db0":"glove_chars = ''.join([c for c in tqdm(glove_embeddings) if len(c) == 1])\nglove_symbols = ''.join([c for c in glove_chars if not c in white_list])\nglove_symbols","e1c5af29":"jigsaw_chars = build_vocab(list(train_df[\"comment_text\"]))\njigsaw_symbols = ''.join([c for c in jigsaw_chars if not c in white_list])\njigsaw_symbols\n","456b425e":"symbols_to_delete = ''.join([c for c in jigsaw_symbols if not c in glove_symbols])\nsymbols_to_delete","7d727ebf":"symbols_to_isolate = ''.join([c for c in jigsaw_symbols if c in glove_symbols])\nsymbols_to_isolate\n","f0aceac6":"%%time\ntqdm.pandas()\ntrain_df['comment_text'] = train_df['comment_text'].progress_apply(lambda x:remove_punctuation(x))\ntest_df['comment_text'] = test_df['comment_text'].progress_apply(lambda x:remove_punctuation(x))","af88d39d":"isolate_dict = {ord(c):f' {c} ' for c in symbols_to_isolate}\nremove_dict = {ord(c):f'' for c in symbols_to_delete}\n\n\ndef handle_punctuation(x):\n    x = x.translate(remove_dict)\n    x = x.translate(isolate_dict)\n    return x","2408e8a9":"train_df['comment_text'] = train_df['comment_text'].progress_apply(lambda x:handle_punctuation(x))\ntest_df['comment_text'] = test_df['comment_text'].progress_apply(lambda x:handle_punctuation(x))","18421712":"vocab = build_vocab(list(train_df['comment_text'].apply(lambda x:x.split())))\noov = check_coverage(vocab,glove_embeddings)\nfor i in oov[:10]:\n    print(COMMENT2+f\"{i}\")","a78b7917":"train_df['comment_text'] = train_df['comment_text'].progress_apply(lambda x:remove_apostrophe(x))\ntest_df['comment_text'] = test_df['comment_text'].progress_apply(lambda x:remove_apostrophe(x))","df5211d9":"vocab = build_vocab(list(train_df['comment_text'].apply(lambda x:x.split())),verbose=False)\noov = check_coverage(vocab,glove_embeddings)\nfor i,j in zip(oov[:10],oov[10:20]):\n    print(COMMENT2+f\"{i}\")\n    print(COMMENT1+f\"{j}\")","9119e192":"def get_top_n_words(corpus, n=None):\n    tfidf = TfidfVectorizer()\n    tfidf = tfidf.fit(train_df['comment_text'])\n    bag_of_words = tfidf.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0,idx]) for word, idx in tfidf.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ndef get_top_n_bigram(corpus, n=None):\n    tfidf = TfidfVectorizer(ngram_range=(2,2))\n    tfidf = tfidf.fit(train_df['comment_text'])\n    bag_of_words = tfidf.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0,idx]) for word, idx in tfidf.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\ndef get_top_n_trigram(corpus, n=None):\n    tfidf = TfidfVectorizer(ngram_range=(3,3))\n    tfidf = tfidf.fit(train_df['comment_text'])\n    bag_of_words = tfidf.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0)\n    words_freq = [(word, sum_words[0,idx]) for word, idx in tfidf.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\n\n# functions for ploting the barchat\n\ndef plot_bt(fn,corpus,color,title):\n    common_words = fn(corpus,10)\n    common_words_df = DataFrame (common_words, columns=['word','freq'])\n    \n    colors =[]\n    for cols in color:\n        colors.extend([cols for i in range(2)])\n        \n    fig = go.Figure(go.Bar(\n        x = common_words_df['freq'],\n        y = common_words_df['word'],\n        marker_color = colors,\n        orientation='h',\n    ))\n    fig.update_traces(\n        marker_line_color = 'black',\n        marker_line_width = 1,\n        opacity=0.9,\n    )\n    fig.update_layout(\n        paper_bgcolor='#234E70',\n        plot_bgcolor='rgba(0,0,0,0)',\n        title=\"Top 10 \"+title[0]+\" of \"+title[1],\n        yaxis = {'categoryorder':'total ascending'},\n        xaxis = dict(side=\"top\", zerolinecolor = \"#4d4d4d\", zerolinewidth = 1, gridcolor=\"#e7e7e7\"),\n        font=dict(color='white',family=\"Courier New, monospace\"),\n    )\n    fig.show()\n    return common_words_df","a0e4cd10":"color_BuGn = px.colors.sequential.BuGn\ncolor_Blues = px.colors.sequential.Blues\ncolor_BuPu = px.colors.sequential.BuPu\ncolor_OrRd = px.colors.sequential.OrRd\ncolor_PuBu = px.colors.sequential.PuBu\ncolor_RdPu = px.colors.sequential.RdPu\ncolor_YlGn = px.colors.sequential.YlGn\ncolor_deep = px.colors.sequential.deep\ncolor_Tropic = px.colors.sequential.Purp\n\ncorpus_toxic = train_df['comment_text'][train_df.toxic==1]\ncorpus_severe_toxic = train_df['comment_text'][train_df.severe_toxic==1]\ncorpus_obscene = train_df['comment_text'][train_df.obscene==1]\ncorpus_threat = train_df['comment_text'][train_df.threat==1]\ncorpus_insult = train_df['comment_text'][train_df.insult==1]\ncorpus_identity_hate = train_df['comment_text'][train_df.identity_hate==1]\ncorpus_clean = train_df['comment_text'][train_df.none==1]","9a0ffcd7":"common_unigram_clean = plot_bt(get_top_n_words, corpus_clean,color_YlGn,[\"unigram\", \"clean comments\"])\ncommon_unigram_toxic = plot_bt(get_top_n_words,corpus_toxic,color_BuGn,[\"unigram\",\"toxic comments\"])\ncommon_unigram_severe_toxic = plot_bt(get_top_n_words,corpus_severe_toxic,color_Blues,[\"unigram\",\"severe toxic comments\"])\ncommon_unigram_obscene = plot_bt(get_top_n_words, corpus_obscene,color_BuPu, [\"unigram\",\"obscene comments\"])\ncommon_unigram_threat = plot_bt(get_top_n_words, corpus_threat,color_OrRd,[\"unigram\",\"threat comments\"])\ncommon_unigram_insult = plot_bt(get_top_n_words, corpus_insult, color_PuBu,[\"unigram\",\"insult comments\"])\ncommon_unigram_identity_hate = plot_bt(get_top_n_words,corpus_identity_hate,color_RdPu,[\"unigram\",\"identity hate comments\"])","feee7697":"common_bigram_clean = plot_bt(get_top_n_bigram, corpus_clean,color_YlGn,[\"bigram\", \"clean comments\"])\ncommon_bigram_toxic = plot_bt(get_top_n_bigram,corpus_toxic,color_BuGn,[\"bigram\",\"toxic comments\"])\ncommon_bigram_severe_toxic = plot_bt(get_top_n_bigram,corpus_severe_toxic,color_Blues,[\"bigram\",\"severe toxic comments\"])\ncommon_bigram_obscene = plot_bt(get_top_n_bigram, corpus_obscene,color_BuPu, [\"bigram\",\"obscene comments\"])\ncommon_bigram_threat = plot_bt(get_top_n_bigram, corpus_threat,color_OrRd,[\"bigram\",\"threat comments\"])\ncommon_bigram_insult = plot_bt(get_top_n_bigram, corpus_insult, color_PuBu,[\"bigram\",\"insult comments\"])\ncommon_bigram_identity_hate = plot_bt(get_top_n_bigram,corpus_identity_hate,color_RdPu,[\"bigram\",\"identity hate comments\"])","fb10f389":"common_trigram_clean = plot_bt(get_top_n_trigram, corpus_clean,color_YlGn,[\"trigram\", \"clean comments\"])\ncommon_trigram_toxic = plot_bt(get_top_n_trigram,corpus_toxic,color_BuGn,[\"trigram\",\"toxic comments\"])\ncommon_trigram_severe_toxic = plot_bt(get_top_n_trigram,corpus_severe_toxic,color_Blues,[\"trigram\",\"severe toxic comments\"])\ncommon_trigram_obscene = plot_bt(get_top_n_trigram, corpus_obscene,color_BuPu, [\"trigram\",\"obscene comments\"])\ncommon_trigram_threat = plot_bt(get_top_n_trigram, corpus_threat,color_OrRd,[\"trigram\",\"threat comments\"])\ncommon_trigram_insult = plot_bt(get_top_n_trigram, corpus_insult, color_PuBu,[\"trigram\",\"insult comments\"])\ncommon_trigram_identity_hate = plot_bt(get_top_n_trigram,corpus_identity_hate,color_RdPu,[\"trigram\",\"identity hate comments\"])","ca00e6d5":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","32ec0dbd":"def preprocess(x):\n    x = remove_punctuation(x)\n    x = handle_punctuation(x)\n    x = remove_apostrophe(x)\n    return x\n\ntest_df['comment_text'] = test_df['comment_text'].progress_apply(lambda x:preprocess(x))","a29d5cc1":"train_x = train_df['comment_text']\ntest_x = test_df['comment_text']\ntrain_y = train_df[['toxic','severe_toxic','obscene','threat','insult','identity_hate']]","65cccae5":"# This function is borrowed from \"https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-for-glove-part1-eda\"\n\ndef build_matrix(word_index, path):\n    embedding_index = load_embeddings(path)\n    embedding_matrix = np.zeros((max_features + 1, 300))\n    unknown_words = []\n    \n    for word, i in word_index.items():\n        if i <= max_features:\n            try:\n                embedding_matrix[i] = embedding_index[word]\n            except KeyError:\n                try:\n                    embedding_matrix[i] = embedding_index[word.lower()]\n                except KeyError:\n                    try:\n                        embedding_matrix[i] = embedding_index[word.title()]\n                    except KeyError:\n                        unknown_words.append(word)\n    return embedding_matrix, unknown_words\n","6cb72f9f":"max_features=400000\ntokenizer = Tokenizer(num_words=max_features,filters='',lower=False)\ntokenizer.fit_on_texts(list(train_x)+list(test_x))\n\ncrawl_matrix, unknown_words_crawl = build_matrix(tokenizer.word_index, CRAWL_EMBEDDING_PATH)\nprint('n unknown words (crawl): ', len(unknown_words_crawl))\n\nglove_matrix, unknown_words_glove = build_matrix(tokenizer.word_index, GLOVE_EMBEDDING_PATH)\nprint('n unknown words (glove): ', len(unknown_words_glove))\n\nmax_features = max_features or len(tokenizer.word_index) + 1\nmax_features\n\nembedding_matrix = np.concatenate([crawl_matrix, glove_matrix], axis=-1)\nembedding_matrix.shape\n\ndel crawl_matrix\ndel glove_matrix\ngc.collect()","05f9770c":"train_x = tokenizer.texts_to_sequences(train_x)\ntest_x = tokenizer.texts_to_sequences(test_x)\n\nmaxlen = 300\nx_train_padded = pad_sequences(train_x, maxlen=maxlen)\nx_test_padded = pad_sequences(test_x, maxlen=maxlen)\nx_train_padded.shape","0a20140e":"%%time\nwith strategy.scope():\n    model = Sequential()\n    \n    model.add(Embedding(\n        input_dim=embedding_matrix.shape[0], \n        output_dim=embedding_matrix.shape[1], \n        weights = [embedding_matrix], \n        input_length=maxlen\n    ))\n    \n    model.add(Bidirectional(LSTM(\n        maxlen, \n        return_sequences = True, \n    )))\n    \n    model.add(GlobalMaxPool1D())\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(maxlen, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(maxlen, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(6, activation = 'sigmoid'))\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\nmodel.summary()\n","0bd54faa":"# I will only run 2 epochs\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(\n    'model.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True\n)\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor = 'val_loss', \n    factor = 0.2, \n    verbose = 1, \n    patience = 2,                        \n    min_lr = 0.005\n)\nhistory = model.fit(\n    x_train_padded, \n    train_y, \n    epochs = 2,\n    batch_size = 128,\n    validation_split=0.2,\n    verbose = 1,\n    callbacks = [reduce_lr, checkpoint]\n )","0517cef4":"load_model1 = load_model('.\/model.h5')","e5837ba5":"prediction= load_model1.predict(x_test_padded)","735807f4":"unzip = zipfile.ZipFile('..\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')\nunzip.extractall()\nsubm = pd.read_csv('.\/sample_submission.csv')","1cf8f6a0":"subm[[\"toxic\", \"severe_toxic\", \"obscene\", \"threat\", \"insult\", \"identity_hate\"]] = prediction\n\nsubm.to_csv(\"sub_predictions8.csv\", index=False)","e48157c1":"<blockquote><h1 style=\"color: #484848;font-size: 20px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Check coverage without any preprocessing<\/span><\/h1><\/blockquote>","2cc08afa":"<a id='6'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Glove embedding<\/center><\/span><\/h1>\n<\/div>\n<br>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\n    GloVe method is built on an important idea,\n    <br>\n    <br>\n    <blockquote>\n        <span style=\"color: #484848;font-size: 20px;font-weight: 50px;font-family: monospace; letter-spacing: 2px;cursor: pointer\">\n           \"You can derive semantic relationships between words from the co-occurrence matrix\"\n         <\/span>\n     <\/blockquote>\n    <br>\n    <br>\n    <\/p>\n    <p style=\"font-size:16px;  font-family:monospace;\">\n    Word embeddings are basically a form of word representation that bridges the human understanding of language to that of a machine. They have learned representations of text in an n-dimensional space where words that have the same meaning have a similar representation. Meaning that two similar words are represented by almost similar vectors that are very closely placed in a vector space.\n    <br>\n    &nbsp&nbsp&nbsp&nbsp&nbspGiven a corpus having V words, the co-occurrence matrix X will be a V x V   matrix, where the i th row and j th column of X, X_ij denotes how many times word i has co-occurred with word j. An example co-occurrence matrix might look as follows.\n <\/p>\n <br>\n    <img src=\"https:\/\/miro.medium.com\/max\/347\/1*QWcK8CIDs8kMkOwsOxvywA.png\",width=\"500\" height=\"600\" class=\"center\" style=\"margin-left: auto;\n  margin-right: auto;align:center\">\n  \n <p style=\"font-size:12px; font-family:monospace;text-align:center;\">The co-occurrence matrix for the sentence \u201cthe cat sat on the mat\u201d with a window size of 1. As you probably noticed it is a symmetric matrix.<\/p>","b392bf49":"<h1 style=\"color: #484848;font-size: 25px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Tokenization<\/span><\/h1>\n<p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">We need to perform tokenization - the processing of segmenting text into sentences of words. The benefit of tokenization is that it gets the text into a format that is easier to convert to raw numbers, which can actually be used for processing.<\/span><\/p>","1c69f1ee":"<h1 style=\"color: #484848;font-size: 35px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">NLP Guide(Part 1): \ud83d\udcc8EDA, text pre-processing &amp; Embeddings.<\/span><\/h1>\n\n***\n","6d2524d2":"<h1 style=\"color: #484848;font-size: 20px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Pre-process test data<\/span><\/h1>","e6c0ad33":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Lets print all the symbols that are presented in our dataset.<\/span><\/p><\/blockquote>","2c77cade":"<h1 style=\"color: #484848;font-size: 20px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Configuring TPU's<\/span><\/h1>","42e612a7":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Unigram for all labels<\/center><\/span><\/h1>\n<\/div>","679887fe":"<h1 style=\"color: #484848;font-size: 20px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">How to preprocess text-data for Glove embeddings?<\/span><\/h1>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\n    When we train our model by glove embeddings we should not follow usual apparoach for pre-processing because by doing that we can lost useful informations. target should be<span style='font-weight:bold'> get our vocabulary as close to the embeddings as possible.<\/span>Getting your vocabulary close to the pretrained embeddings means, that you should aim for your preprocessing,to result in tokens that are mostly covered by word vectors. \n    <br>\n    \"Each pretrained embedding needs its own preprocessing\"\n    <br>\n    If people used different preprocessing for training their embeddings you would also need to do the same,Especially point to can be quite challenging, if you want to concatenate embeddings as in this kernel. Imagine Embedding A preprocesses \"don't\" to a single token[\"dont\"] and Embedding B to two tokens[\"do\",\"n't\"]. You are basically not able to do both. So you need to find a compromise.\n    <\/p>","bd10b05d":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">As we can see only 27.78% embeddings match to vocab of comments without any pre-processing and only 38.06% to comments with standard pre-processing.<\/span><\/p><\/blockquote>","0ed7686d":"<h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;\" >Lowercase=><\/h2>\n<p style=\"font-size:16px;  font-family:monospace;\">\nProgramming languages consider textual data as sensitive, which means that <span style=\"font-weight:bold\">Different<\/span> is different from <span style=\"font-weight:bold\">different<\/span>. we humans know that those both belong to same token but due to the character encoding those are considered as different tokens. Converting to lowercase is a very mandatory preprocessing step.\n<\/p>\n\n<h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;\" >Punctuation=><\/h2>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\n    Punctuation are the unnecessary symbols that are in our corpus documents, we should be little careful with what we are doing with this. There might be few problems such as U.S \u2014 us \u201cUnited Stated\u201d being converted to \u201cus\u201d after the preprocessing.\n <\/p>\n \n<h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;\" >Stopwords=><\/h2>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\n    Stopwords are the most commonly occuring words which don't give any valuable insights.And removing them normally gives better results and improves computations.\n <\/p>\n \n <h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;\" >Lemmatisation=><\/h2>\n \n <p style=\"font-size:16px;  font-family:monospace;\">\n    Lemmatisation is a way to reduce the word to root synonym of a word. Unlike Stemming, Lemmatisation makes sure that the reduced word is again a dictionary word (word present in the same language). WordNetLemmatizer can be used to lemmatize any word.\n <\/p>\n \n <h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;\" >Stemming=><\/h2>\n \n <p style=\"font-size:16px;  font-family:monospace;\">\n    Stemming reduces the word to its stem, meaning that playing and played are the same words which basically indicate an action play, so we convert playing and played to play. <span style=\"font-weight:bold\">it is very importent normal pre-processing but equally bad for pre-processing for glove embedding. <\/span>\n <\/p>","8b83e6ce":"# <p style=\"color:red;; font-family:newtimeroman; font-size:80%;padding:100px; text-align:center; \">Disclaimer: the dataset used in this notebook contains text that may be considered profane, vulgar, or offensive.<\/p>","e1c9f0b8":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n        <p style=\"padding: 10px;\n              color:white;font-size:20px\">\n            Thanks for your time,And If you like this notebook please consider a upvote.\n        <\/p>\n    <\/div>","33c09e19":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Trigram for all labels<\/center><\/span><\/h1>\n<\/div>","a7f49e3c":"<h1 style=\"color: #484848;font-size: 15px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">The below function is the most importent one yet,in this function we building a matrix for pre-trained embeddings and with that also match our words with embeddings for both upper and lower cases.<\/span><\/h1>","2adcd9ac":"<p style=\"color: #484848;font-size: 20px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"> Lets explore the embeddings, in particular symbols a bit. For that we first need to define \"what is a symbol\" in contrast to a regular letter.<\/p>","804ca3b0":"<h1 style=\"color: #484848;font-size: 25px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">\nSequence Bucketing<\/span><\/h1>","555f402f":"<blockquote>\n<h3 style=\"color: #484848;font-size: 20px;font-weight: bold;font-family: monospace;\" >Text data noises:=<\/h3>\n<p style=\"font-size:16px;  font-family:monospace;\">\nText data contains many kind of impurities and noises that is build false correlations between labels.How to deal with these impurities totally depends on our approach to solve the problem, i will show you two approachs to deal with theses impurities in this notebook,but first we visualize thses noises.they are just punctuations('$',\"'\",',','&') ,urls, stopwords('the','i','are','and') words that do not give much insights about data and common in all instances.\n<\/p>\n<\/blockquote>","da27ff2b":"<blockquote><center><h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;padding-bottom:30px\" >Introduction \ud83d\udcdd<\/h2><\/center>\n    <p style=\"font-size:16px;  font-family:monospace;\">\n        The Goal\ud83e\udd45 of this notebook is to explore text data in a clean beautiful manner.For this i am using \n        <a href='https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge',style=\"color:#159364; font-family:cursive;\">Toxic Comment Classification Challenge<\/a>\n        data.It is a multi-label classification problem, for detecting different types of toxicity like threats,obscenity,insults and identity-based hate.we will explore how imbalanced this dataset is,find correlations between labels and more.\nI will show you some basic  text preprocessing techniques and understand pre-trained embeddings. \n        \n   <\/p>\n   <br>\n  \n<h3 style=\"color: #484848;font-size: 15px;font-weight: bold;font-family: monospace;\" >Multi-label Classification:=<\/h3>\n    <p style=\"font-size:16px;  font-family:monospace;\">\n     In multi-label classification tasks, each problem instance is associated with multiple classes at the same time.Emotion identification, image annotation, text categorization, semantic scene classification, or gene and protein function prediction are examples of such problems.There are strategies to solve multi-label classification problems.In which the first is converts the multi-label problem into multiple single-label classification problems and ignores the correlation among labels,the second is to consider the pair-wise correlation between labels, and the third is to looks at the high order correlation through a subset of labels.\n    <\/p>\n\n<h2 style=\"color: #484848;font-size: 25px;font-weight: bold;font-family: monospace;padding-bottom:30px\" >Table of content<\/h2>\n  \n \n<ul style=\"font-size:16px;  font-family:monospace;\">\n    \n  <li><a href='#1'>Data Loading \ud83d\udcc2<\/a><\/li>\n  <li><a href='#2'>EDA\ud83d\udcc8<\/a><\/li>\n  <li><a href='#3'>WordClouds\u2601\ufe0f<\/a><\/li>\n  <li><a href='#4'>Pre-processing\u2692\ufe0f<\/a><\/li>\n  <li><a href='#5'>Word vector<\/a><\/li>\n  <li><a href='#6'>Glove Embedding<\/a><\/li>\n  <li><a href='#7'>Model Training\ud83c\udfcb\ufe0f<\/a><\/li>\n  <li><a href='#8'>References<\/a><\/li>\n  \n    \n<\/ul>\n<\/blockquote>","ad26cce5":"<h1 style=\"color: #484848;font-size: 35px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Refrences<\/span><\/h1>\n\n","1e090713":"<blockquote><h1 style=\"color: #484848;font-size: 20px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Check coverage with standard preprocessing<\/span><\/h1><\/blockquote>","3f43000f":"<blockquote>\n<h3 style=\"color: #484848;font-size: 20px;font-weight: bold;font-family: monospace;\" >Correlation between lab:=<\/h3>\n<p style=\"font-size:16px;  font-family:monospace;\">\nlooking at the chart above we can see multiple entries are holding multiple tags and that is the normal behavior of multilabel classification problems because of that tags have correlation with other tags,for instance a comment can be type of toxic,severe-toxic and obscene.lets visualize correlation between labels.\n<\/p>\n<\/blockquote>","3f8f215c":"<a id='5'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Word vector<\/center><\/span><\/h1>\n<\/div>\n<br>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\n    Word vectors represent a significant leap forward in advancing our ability to analyze relationships across words, sentences, and documents. In doing so, they advance technology by providing machines with much more information about words than has previously been possible using traditional representations of words. It is word vectors that make technologies such as speech recognition and machine translation possible.\n <br>  \n   &nbsp&nbsp&nbsp&nbsp&nbsp word vectors represent words as multidimensional continuous floating point numbers where semantically similar words are mapped to proximate points in geometric space. In simpler terms, a word vector is a row of real-valued numbers (as opposed to dummy numbers) where each point captures a dimension of the word's meaning and where semantically similar words have similar vectors. This means that words such as wheel and engine should have similar word vectors to the word car (because of the similarity of their meanings), whereas the word banana should be quite distant. example here is showing that by using word vectors we can determine that:\n     <br>\n        <br>\n   &nbsp&nbsp&nbsp&nbsp&nbsp<span style=\"font-weight:bold;\">king - man + woman = queen<\/span>\n\n <\/p>\n","564b03d4":"<a id='7'><\/a>\n<h1 style=\"color: #484848;font-size: 35px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Training\ud83c\udfcb\ufe0f<\/span><\/h1>","47d7e365":"<a id='3'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>WordClouds\u2601\ufe0f<\/center><\/span><\/h1>\n<\/div>\n","452e07df":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Print all the symbols that we have an embeddings for.We can delete all symbols that we do not have embeddings.<\/span><\/p><\/blockquote>","dca4ced1":"<a id='2'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>EDA\ud83d\udcc8<\/center><\/span><\/h1>\n<\/div>\n\n<p style=\"font-size:16px;  font-family:monospace;\">\nThere is not a lot of difference between size of train and test data.but data is highly imbalanced,almost 90% comments are clean and only 10% comments have some kind of toxicity.\nlooking at the insights above we can say that the comments are holding multiple tags, we will see insights about this but first let's check some comments of all tags and try to determine how they categorized.\n<\/p>","c717e66f":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Print symbols that are presented in dataset and we also have embeddings for.<\/span><\/p><\/blockquote>","2b0f764f":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Print result of fuction for handling punctuation and see coverage after removing symbols that we do not have embeddings for\n<\/span><\/p><\/blockquote>","bb2703ee":"<a id='7.1'><\/a>\n<h2 style=\"color: #484848;font-size: 25px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\" ><span style=\" transition: .5s linear\">Long Short Term Memory networks \u2013<\/span><\/h2>\n<a style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\" href=\"https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\"><span style=\" transition: .5s linear\">Long Short Term Memory networks \u2013 usually just called \u201cLSTMs\u201d \u2013 are a special kind of RNN, capable of learning long-term dependencies. They were introduced by Hochreiter & Schmidhuber (1997), and were refined and popularized by many people in following work. They work tremendously well on a large variety of problems, and are now widely used.<\/span><\/a>\n<br>\n<br>\n\n<p style=\"text-align:right;font-style:monospace;font-size:11px\">If you have no idea about what LSTM is i suggest you to click above text.<\/p>\n","1765dbf6":"<p style=\"color: #484848;font-size: 20px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"> Now we can see in previus output data contains words with <span style=\"font-weight:bold\">appstrophe <\/span>that we need to remove because <span style=\"font-weight:bold\">isn't<\/span> and <span style=\"font-weight:bold\">is not<\/span>\nare different words for our word vector.<\/p>","f0923ab3":"<a id='4'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Pre-processing\u2692\ufe0f<\/center><\/span><\/h1>\n<\/div>\n<br>\n<p style=\"font-size:16px;  font-family:monospace;\">\n    Preprocessing is one of the major steps when we are dealing with any kind of text models.During this stage we have to look at the distribution of our data, what techniques are needed and how deep we should clean. Few preprocessing steps are converting to lowercase, removing punctuation, removing stop words and stemming\/lemmatization.\n    In this notebook we will be train our model on pre-trained embeddings,<span style='font-weight:bold'>and remember when we train model by pre-trained embedings we should not follow normal pre-processing steps<\/span> because of doing this we lost lots of useful imformations.we will see why is that when we learn about word embeddings in below cells.\n<\/p>","9d18fe0c":"<blockquote><p style=\"color: #484848;font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\">Print symbols that are presented in dataset but we do not have embeddings for.<\/span><\/p><\/blockquote>","844a283c":"<p style=\"color: #484848;font-size: 20px;font-family: monospace; letter-spacing: 2px;cursor: pointer\"> Now we build the function that will handle punctuation by removing all the symbols that we do not have embeddings for and isolating the symbols that we have embeddings for. <\/p>","5a19099a":"<a style=\"font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\" href=\"https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\">1.Understanding LSTM Neworks<\/a>\n\n<a style=\"font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\" href=\"https:\/\/www.kaggle.com\/christofhenkel\/how-to-preprocessing-for-glove-part1-eda\">2.How To: Preprocessing for GloVe Part1: EDA<\/a>\n\n<a style=\"font-size: 15px;font-weight: bold;padding:30px;font-family: monospace; letter-spacing: 2px;cursor: pointer\" href=\"https:\/\/towardsdatascience.com\/light-on-math-ml-intuitive-guide-to-understanding-glove-embeddings-b13b4f19c010\">3.Intuitive Guide to Understanding GloVe Embeddings<\/a>\n\n","ae855282":"<a id='1'><\/a>\n<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Data Loading\ud83d\udcc2<\/center><\/span><\/h1>\n<\/div>","d0ec9c6b":"<div class=\"alert alert-block alert-info\" style=\"font-size:14px; font-family:cursive;\">\n    <h1 style=\"color: #484848;font-size: 35px;font-weight: bold;font-family: monospace; letter-spacing: 2px;cursor: pointer\"><span style=\" transition: .5s linear\"><center>Bigram for all labels<\/center><\/span><\/h1>\n<\/div>"}}