{"cell_type":{"9738e23e":"code","49cf7c18":"code","d607e3e1":"code","7f916b0f":"code","dd5f1f7b":"code","f48d58d0":"code","8a7256f4":"code","aae26aa6":"code","bb59d7e3":"code","9dd15514":"code","4b82be0c":"code","30a24e9b":"code","262886e2":"code","1a09359d":"code","d9ea4ce6":"code","9bb846a5":"code","81a0ecb0":"code","22d685a3":"code","a17be0aa":"markdown","1af63c19":"markdown","1dda4d05":"markdown"},"source":{"9738e23e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49cf7c18":"import time \n\nfrom catboost import CatBoostClassifier, Pool\nfrom transformers import BertTokenizerFast\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm.notebook import tqdm\n\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_rows', 1000)","d607e3e1":"tokenizer = BertTokenizerFast.from_pretrained('DeepPavlov\/rubert-base-cased-conversational')","7f916b0f":"train = pd.read_csv('\/kaggle\/input\/ml-guild-classification-task\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/ml-guild-classification-task\/test.csv').drop('Unnamed: 0', axis=1)","dd5f1f7b":"train['title'].fillna('', inplace=True)\ntest['title'].fillna('', inplace=True)\n\n# train['title'] = train['title'].astype(str)\n# train['review'] = train['review'].astype(str)\n# train['film_country'] = train['film_country'].astype(str)\n\n# test['title'] = test['title'].astype(str)\n# test['review'] = test['review'].astype(str)\n# test['film_country'] = test['film_country'].astype(str)\n\n# train['title'][train.title == 'nan'] = ''\n# train['review'][train.review == 'nan'] = ''\n# test['title'][test.title == 'nan'] = ''\n# test['review'][test.review == 'nan'] = ''","f48d58d0":"texts = train['title'] + train['review']\npretrained_bpe_texts = [' '.join(map(str, tokenizer.encode(text))) for text in tqdm(texts)]","8a7256f4":"texts_test = test['title'] + test['review']\npretrained_bpe_texts_test = [' '.join(map(str, tokenizer.encode(text))) for text in tqdm(texts_test)]","aae26aa6":"labels = ['positive', 'negative', 'neutral']\nX = train.drop(columns=['positive', 'negative', 'neutral'])\nX_test = test.copy()","bb59d7e3":"n_fold = 5\nfolds = StratifiedKFold(n_splits=n_fold, shuffle=True, random_state=1)","9dd15514":"def train_model_and_predict(X, X_test, y, folds, model_type='cat', \n                            categorical_cols = ['film_country'], \n                            text_cols=[]):\n    prediction = np.zeros((len(X_test), 3))\n    scores = []\n    feature_importance = pd.DataFrame()\n    for fold_n, (train_index, valid_index) in enumerate(folds.split(X, y)):\n        print('Fold', fold_n, 'started at', time.ctime())\n        X_train, X_valid = X.loc[train_index], X.loc[valid_index]\n        y_train, y_valid = y[train_index], y[valid_index]\n            \n        if model_type == 'cat':\n            train_pool = Pool(\n                X_train, \n                y_train, \n                cat_features=categorical_cols,\n                text_features=text_cols,\n                feature_names=list(X_train)\n            )\n            valid_pool = Pool(\n                X_valid, \n                y_valid, \n                cat_features=categorical_cols,\n                text_features=text_cols,\n                feature_names=list(X_valid)\n            )\n            model = CatBoostClassifier(\n                                       task_type=\"GPU\",\n                                       devices='0:1'\n            )\n            model.fit(train_pool, eval_set=valid_pool, use_best_model=True, verbose=False)\n\n            y_pred_valid = model.predict_proba(X_valid)\n            y_pred = model.predict_proba(X_test)\n            \n        scores.append(roc_auc_score(y_valid, y_pred_valid, multi_class='ovr'))\n        print(f'Score: {scores[-1]:.4f}.')\n        prediction += y_pred\n        \n        \n    prediction \/= n_fold\n    print(f'CV mean score: {np.mean(scores):.4f}, std: {np.std(scores):.4f}.')\n            \n    return prediction","4b82be0c":"X['bpe_text'] = pretrained_bpe_texts\nX_test['bpe_text'] = pretrained_bpe_texts_test","30a24e9b":"X_new = X.copy()\nX_test_new = X_test.copy()","262886e2":"def get_day_part(x):\n    hour = int(x.split(' ')[-1].split(':')[0])\n    return 0 if hour > 5 and hour <= 11 else 1 if hour > 11 and hour <= 16 else 2 if hour > 16 else 3    \nX_new['day'] = X_new['date'].apply(lambda x: int(x.split(' ')[0]))\nX_new['month'] = X_new['date'].apply(lambda x: x.split(' ')[1])\nX_new['day_part'] = X_new['date'].apply(get_day_part)\n\nX_test_new['day'] = X_test_new['date'].apply(lambda x: int(x.split(' ')[0]))\nX_test_new['month'] = X_test_new['date'].apply(lambda x: x.split(' ')[1])\nX_test_new['day_part'] = X_test_new['date'].apply(get_day_part)","1a09359d":"X_new['useful_avr'] = X_new['useful'] - X_new['useless']\nX_test_new['useful_avr'] = X_test_new['useful'] - X_test_new['useless']\n\nX_new['useful_share'] = X_new['useful'] \/ (X_new['useful'] + X_new['useless'])\nX_test_new['useful_share'] = X_test_new['useful'] \/ (X_test_new['useful'] + X_test_new['useless'])","d9ea4ce6":"X_new = X_new.drop('date', axis=1)\nX_test_new = X_test_new.drop('date', axis=1)","9bb846a5":"pred_cb = train_model_and_predict(X_new, X_test_new, \n                                  train[labels].to_numpy().argmax(axis=1), \n                                  folds=folds, model_type='cat', \n                                  categorical_cols=['film_year', 'film_country', 'month', 'day_part'], \n                                  text_cols=['review', 'title', 'bpe_text']\n                                 )","81a0ecb0":"ss = pd.read_csv('\/kaggle\/input\/ml-guild-classification-task\/sample_submission.csv')\nss[labels] = pred_cb","22d685a3":"ss.to_csv('submission_catboost_bpe.csv', index=False)","a17be0aa":"# train & predict without 'date' feature","1af63c19":"## add bpe_text column","1dda4d05":"## add some new features"}}