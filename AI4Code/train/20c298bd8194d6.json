{"cell_type":{"6a1d3998":"code","f524a545":"code","be702145":"code","b8c78502":"code","479941e0":"code","06f410ef":"code","57fc6cf6":"code","f2170d94":"code","2fe20af6":"code","5dcd5b50":"code","68a4b3ce":"code","5b72dab2":"code","8c6068b8":"code","c181da54":"code","79703493":"code","b1dd7813":"code","a7578dda":"code","3494f6df":"code","5730d7fd":"code","2d76a803":"code","eaec3af1":"code","cfc74626":"code","41106c20":"code","32b9a4b3":"code","5df1168f":"code","ec1c1e8c":"code","aeb2ff3d":"code","0e0e4815":"markdown","803fac41":"markdown","5781ed42":"markdown","610092d0":"markdown","6c449525":"markdown","6c22b87d":"markdown"},"source":{"6a1d3998":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f524a545":"df=pd.read_csv('\/kaggle\/input\/loan-default-prediction\/Default_Fin.csv')","be702145":"df","b8c78502":"df.describe()","479941e0":"df.isnull().sum()","06f410ef":"import seaborn as sns\nfrom matplotlib import pyplot as plt","57fc6cf6":"label=[1,0]\nplt.pie(df['Employed'].value_counts(), autopct='%1.1f%%',labels=label)","f2170d94":"label=[0,1]\nplt.pie(df['Defaulted?'].value_counts(), autopct='%1.1f%%',labels=label)","2fe20af6":"def bank_balance(ex):\n    if ex <= 1000:\n        return 'very small'\n    elif 1000<ex<=5000:\n        return 'small'\n    elif 5000<ex<=15000:\n        return 'middle'\n    elif 15000<ex<=25000:\n        return 'large'\n    else:\n        return 'very large'\n        ","5dcd5b50":"df['balance_range']=df['Bank Balance'].apply(bank_balance)","68a4b3ce":"df","5b72dab2":"df.groupby('balance_range').size().plot.pie(autopct='%1.1f%%')","8c6068b8":"def annual_salary(ex):\n    if ex <= 100000:\n        return 'very small'\n    elif 100000<ex<=300000:\n        return 'small'\n    elif 300000<ex<=500000:\n        return 'middle'\n    elif 500000<ex<=700000:\n        return 'large'\n    else:\n        return 'very large'      ","c181da54":"df['salary_range']=df['Annual Salary'].apply(annual_salary)","79703493":"df","b1dd7813":"df.groupby('salary_range').size().plot.pie(autopct='%1.1f%%')","a7578dda":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","3494f6df":"x=df.drop(['Defaulted?','Index','balance_range','salary_range'],axis=1)\ny=df['Defaulted?']","5730d7fd":"x = StandardScaler().fit(x).transform(x)","2d76a803":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.20, random_state=10)","eaec3af1":"from sklearn.linear_model import LogisticRegression\nalgorithm1=LogisticRegression(random_state=0)\n\nfrom sklearn.tree import DecisionTreeClassifier\nalgorithm2=DecisionTreeClassifier(random_state=0)\n\nfrom sklearn.ensemble import RandomForestClassifier\nalgorithm3=RandomForestClassifier(random_state=0)\n\nfrom xgboost import XGBClassifier\nalgorithm4=XGBClassifier(random_state=0)\n\n\nfrom catboost import CatBoostClassifier\nalgorithm5=CatBoostClassifier(random_state=0)\n\nalgorithms=[algorithm1,algorithm2,algorithm3,algorithm4,algorithm5]","cfc74626":"from sklearn.model_selection import StratifiedKFold\nstratifiedkfold=StratifiedKFold(n_splits=3) \n\nfrom sklearn.model_selection import cross_val_score\nfor algorithm in algorithms:\n  scores=cross_val_score(algorithm,x_train,y_train,cv=stratifiedkfold,scoring='roc_auc')\n  score=scores.mean()\n  name=algorithm.__class__.__name__\n  print(f' average : {score:.4f}  score : {scores}  {name}')","41106c20":"def make_cm(matrix, columns):\n    n = len(columns)\n    act = ['correct_data'] * n\n    pred = ['prediction'] * n\n\n    cm = pd.DataFrame(matrix, \n        columns=[pred, columns], index=[act, columns])\n    return cm","32b9a4b3":"algorithm5.fit(x_train,y_train)\ny_pred=algorithm5.predict(x_test)\n\nfrom sklearn.metrics import confusion_matrix\ndf_matrix=make_cm(\n    confusion_matrix(y_test,y_pred),['OK','Fail'])\ndisplay(df_matrix)\n\nfrom sklearn.metrics import precision_recall_fscore_support\nprecision,recall,fscore,_=precision_recall_fscore_support(y_test,y_pred,average='binary')\nprint(f' precision: {precision:.4f}  recall: {recall: .4f}  Fscore:  {fscore:.4f}')","5df1168f":"import seaborn as sns\ny_proba0=algorithm5.predict_proba(x_test)[:,1]\n\ny0=y_proba0[y_test==0]\ny1=y_proba0[y_test==1]\n\nplt.figure(figsize=(6,6))\nplt.title('Bank Defaulted')\nsns.distplot(y1,kde=False,norm_hist=True,\n             bins=50,color='b',label='fail')\nsns.distplot(y0,kde=False,norm_hist=True,\n             bins=50,color='k',label='OK')\nplt.xlabel('thres')\nplt.legend()\nplt.show()","ec1c1e8c":"def pred(algorithm5,x,thres):\n  y_proba=algorithm5.predict_proba(x)\n  y_proba1=y_proba[:,1]\n  y_pred=(y_proba1>thres).astype(int)\n  return y_pred\n\n\nthres_list=np.arange(0.8,0,-0.05)\n\nfor thres in thres_list:\n  y_pred=pred(algorithm5,x_test,thres)\n  pred_sum=y_pred.sum()\n  precision,recall,fscore,_=precision_recall_fscore_support(y_test,y_pred,average='binary')\n  print(f' thres : {thres:.2f} pred_sum : {pred_sum} precision: {precision:.4f}  recall: {recall: .4f}  Fscore:  {fscore:.4f})')","aeb2ff3d":"y_final=pred(algorithm5,x_test,0.35)\ndf_matrix2=make_cm(confusion_matrix(y_test,y_final),['OK','Fail'])\ndisplay(df_matrix2)\n\nprecision,recall,fscore,_=precision_recall_fscore_support(y_test,y_final,average='binary')\nprint(f' precision : {precision:.4f}  recall: {recall:.4f} Fscore:{fscore:.4f}')","0e0e4815":"What is the appropriate thres ? ","803fac41":"Defaulted is 3.3% and not defaulted is 96.7%","5781ed42":"Portion of bank balance","610092d0":"Portion of annual salary","6c449525":"prediction analysis","6c22b87d":"Employed is 70.6% and Unemployed is 29.4%"}}