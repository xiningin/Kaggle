{"cell_type":{"44265c05":"code","ed0ea089":"code","0df6939f":"code","8b76db99":"code","9ac5a4ec":"code","cb965479":"code","c9e1bca3":"code","ac2b2631":"code","ed92fcb9":"code","72912258":"code","17efaf1d":"code","e9e90d7f":"code","51d9e8c7":"code","4f03cc6c":"code","a077c890":"code","0134e9dd":"code","4d6a2a07":"code","c7135be4":"code","7c02574c":"code","6a8ef096":"code","91ce3948":"code","030147ce":"code","1c20bd22":"code","26be60dd":"code","1717d3d6":"code","4346e55b":"code","e906fc65":"code","5bc458ea":"code","19d16344":"code","0b47481f":"code","d2742b9b":"code","a7a1b5e5":"code","45c6d84f":"code","846d0f2c":"code","f90b0fac":"code","ff686f05":"code","21bbba28":"code","d7ca83f4":"code","dcce272b":"code","e33955cc":"code","a0734e41":"code","86eb057f":"code","4f267a19":"code","bdd3be9b":"code","983211a5":"code","0608c259":"code","2916068a":"code","035ea23a":"code","28d29cc0":"code","1f6292f9":"code","19a71533":"code","33ad16b4":"code","84cdf07b":"code","b55843f8":"code","6208fd09":"code","681defb2":"code","fec43fb9":"code","31e5eebf":"code","a60e66cb":"code","d7fbff5e":"code","b21798a5":"code","eeb78178":"code","a533b518":"code","bcfab148":"code","fb919fdd":"code","7778f56e":"code","2bf8916c":"code","f56c5a29":"code","9f93bd1a":"code","0f9cbc7e":"code","dae95a57":"code","caa20627":"code","017ae850":"code","53046382":"code","37868e0c":"code","de62d227":"code","5dd05787":"code","921bfdfd":"code","d64b9d51":"code","330706be":"code","188d7223":"code","f98d9701":"code","8e80a64f":"code","db023216":"code","a0ab7d07":"markdown","6781204d":"markdown","d1c0b9b1":"markdown","2045ed5d":"markdown","229f3ddb":"markdown","d223a11c":"markdown","381a6930":"markdown","54f6b533":"markdown","0e0bb483":"markdown","f0aedff3":"markdown","1e344571":"markdown","0d46e44f":"markdown","5c74e497":"markdown","3dec05af":"markdown","329d0b72":"markdown","d141b2b3":"markdown"},"source":{"44265c05":"# Data manipulation modules\nimport pandas as pd        # R-like data manipulation\nimport numpy as np         # n-dimensional arrays","ed0ea089":"# For plotting\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt      # For base plotting","0df6939f":"# Seaborn is a library for making statistical graphics\n# in Python. It is built on top of matplotlib and \n#  numpy and pandas data structures.\nimport seaborn as sns                # Easier plotting","8b76db99":"# Misc\nimport os","9ac5a4ec":"## To Show graphs in same window\n%matplotlib inline","cb965479":"# Setting up Matplotlib, Seaborn map styles\nmpl.style.use(\"seaborn\")\nplt.style.use(\"seaborn\")\n\nbtui = [\n    \"#b2182b\", \"#d6604d\", \"#f4a582\", \"#92c5de\", \"#4393c3\", \"#2166ac\", \"#762a83\",\n    \"#9970ab\", \"#c2a5cf\", \"#a6dba0\", \"#5aae61\", \"#1b7837\", \"#c51b7d\", \"#de77ae\",\n    \"#f1b6da\", \"#8c510a\", \"#bf812d\", \"#dfc27d\", \"#80cdc1\", \"#35978f\", \"#01665e\",\n    ]\nimport random\nbtui_reversed = btui[::-1]\nbtui_shuffled=random.sample(btui, len(btui))\n\nsns.set(context=\"notebook\", style=\"darkgrid\", font=\"monospace\", font_scale=1.5, palette=btui)\nsns.color_palette(btui)\nsns.set_palette(btui)\nsns.set(rc={\"figure.figsize\": (14, 10)})","c9e1bca3":"#inputFolder = \"E:\\\\BDA\\\\MAIN CLASS INFO\\\\KAGGLE - GUNV\\\\gun-violence-data_01-2013_03-2018.csv\\\\\"\n#os.chdir(inputFolder)\n#gunfile = 'gun-violence-data_01-2013_03-2018.csv'\n#data_gun_violence = pd.read_csv(inputFolder+gunfile)\n\n# Kaggle\n# Read data file\ndata_gun_violence = pd.read_csv(\"..\/input\/gun-violence-data_01-2013_03-2018.csv\")","ac2b2631":"# Explore data - First 5 records of Gun Violance data\ndata_gun_violence.head()                          # head()","ed92fcb9":"data_gun_violence.columns","72912258":"data_gun_violence.columns.values","17efaf1d":"data_gun_violence.values","e9e90d7f":"data_gun_violence.dtypes","51d9e8c7":"data_gun_violence.describe()","4f03cc6c":"data_gun_violence.info()","a077c890":"data_gun_violence.shape","0134e9dd":"# using isnull to find out missing values\ndata_gun_violence.isnull().values.any()\n","4d6a2a07":"data_gun_violence.isnull().sum()\n","c7135be4":"# using isna to find out missing values","7c02574c":"data_gun_violence.isna().values.any()","6a8ef096":"sum_missing_data=data_gun_violence.isna().sum()\nsum_missing_data","91ce3948":"count_missing_data=data_gun_violence.isna().count()\ncount_missing_data","030147ce":"percentage_missing_data=(sum_missing_data\/count_missing_data) * 100\npercentage_missing_data","1c20bd22":"missing_data = pd.concat([sum_missing_data, percentage_missing_data], axis=1)\nmissing_data\n","26be60dd":"del(sum_missing_data,count_missing_data,percentage_missing_data)","1717d3d6":"from matplotlib import collections as collections\nfrom matplotlib.patches import Rectangle\n","4346e55b":"#To install this package with conda run:\n#conda install -c auto more-itertools \n\n#from itertools import izip as zip  #throwing error\n\nimport itertools\nzip = getattr(itertools, 'izip', zip)\nfrom itertools import cycle","e906fc65":"# https:\/\/stackoverflow.com\/questions\/21925114\/is-there-an-implementation-of-missingmaps-in-pythons-ecosystem\ndef missmap(df, ax=None, colors=None, aspect=4, sort='descending',\n            title=None, **kwargs):\n    \"\"\"\n    Plot the missing values of df.\n\n    Parameters\n    ----------\n    df : pandas DataFrame\n    ax : matplotlib axes\n        if None then a new figure and axes will be created\n    colors : dict\n        dict with {True: c1, False: c2} where the values are\n        matplotlib colors.\n    aspect : int\n        the width to height ratio for each rectangle.\n    sort : one of {'descending', 'ascending', None}\n    title : str\n    kwargs : dict\n        matplotlib.axes.bar kwargs\n\n    Returns\n    -------\n    ax : matplotlib axes\n\n    \"\"\"\n    if ax is None:\n        fig, ax = plt.subplots()\n\n    # setup the axes\n    dfn = pd.isnull(df)\n\n    if sort in ('ascending', 'descending'):\n        counts = dfn.sum()\n        sort_dict = {'ascending': True, 'descending': False}\n        counts.sort_values(ascending=sort_dict[sort])\n        dfn = dfn[counts.index]\n\n    ny = len(df)\n    nx = len(df.columns)\n    # each column is a stacked bar made up of ny patches.\n    xgrid = np.tile(np.arange(nx), (ny, 1)).T\n    ygrid = np.tile(np.arange(ny), (nx, 1))\n    # xys is the lower left corner of each patch\n    xys = (zip(x, y) for x, y in zip(xgrid, ygrid))\n\n    if colors is None:\n        colors = {True: '#EAF205', False: 'k'}\n\n    widths = cycle([aspect])\n    heights = cycle([1])\n\n    for xy, width, height, col in zip(xys, widths, heights, dfn.columns):\n        color_array = dfn[col].map(colors)\n\n        rects = [Rectangle(xyc, width, height, **kwargs)\n                 for xyc, c in zip(xy, color_array)]\n\n        p_coll = collections.PatchCollection(rects, color=color_array,\n                                             edgecolor=color_array, **kwargs)\n        ax.add_collection(p_coll, autolim=False)\n\n    # post plot aesthetics\n    ax.set_xlim(0, nx)\n    ax.set_ylim(0, ny)\n\n    ax.set_xticks(.5 + np.arange(nx))  # center the ticks\n    ax.set_xticklabels(dfn.columns)\n    for t in ax.get_xticklabels():\n        t.set_rotation(90)\n\n    # remove tick lines\n    ax.tick_params(axis='both', which='both', bottom='off', left='off',\n                   labelleft='off')\n    ax.grid(False)\n\n    if title:\n        ax.set_title(title)\n    return ax\n\ncolours = {True: \"#FF7256\", False: \"#ADD8E6\"}\nax = missmap(data_gun_violence, colors = colours)\nplt.show(ax)","5bc458ea":"data_gun_violence.drop([\n    \"incident_url\",\n    \"sources\",\n    \"source_url\",\n    \"incident_url_fields_missing\",\n    \"location_description\",\n    \"participant_relationship\",\n    ], axis=1, inplace=True)","19d16344":"#Converting object datatype to datetime\ndata_gun_violence[\"date\"] = pd.to_datetime(data_gun_violence[\"date\"])","0b47481f":"data_gun_violence[\"day\"] = data_gun_violence[\"date\"].dt.day\ndata_gun_violence[\"month\"] = data_gun_violence[\"date\"].dt.month\ndata_gun_violence[\"year\"] = data_gun_violence[\"date\"].dt.year\ndata_gun_violence[\"weekday\"] = data_gun_violence[\"date\"].dt.weekday\ndata_gun_violence[\"week\"] = data_gun_violence[\"date\"].dt.week\ndata_gun_violence[\"quarter\"] = data_gun_violence[\"date\"].dt.quarter","d2742b9b":"#Check the datatype of columns now\ndata_gun_violence.dtypes","a7a1b5e5":"data_gun_violence[\"gun_type\"].unique()              #which values","45c6d84f":"# Created a new column for the total number of persons impacted (injured+killed) as per the data available\ndata_gun_violence[\"total_impacted\"] = data_gun_violence[\"n_killed\"] + data_gun_violence[\"n_injured\"]","846d0f2c":"# Creating multiple columns from Participant's Gender column\ndata_gun_violence[\"participant_gender\"] = data_gun_violence[\"participant_gender\"].fillna(\"0::Unknown\")\n\n\ndef clean_participant_gender(row) :\n    gender_row_values = []\n    gender_row = str(row).split(\"||\")\n    for x in gender_row :\n        gender_row_value = str(x).split(\"::\")\n        if len(gender_row_value) > 1 :\n            gender_row_values.append(gender_row_value[1])\n            \n    return gender_row_values\n\n\nparticipant_genders = data_gun_violence.participant_gender.apply(clean_participant_gender)\ndata_gun_violence[\"participant_gender_total\"] = participant_genders.apply(lambda x: len(x))\ndata_gun_violence[\"participant_gender_male\"] = participant_genders.apply(lambda x: x.count(\"Male\"))\ndata_gun_violence[\"participant_gender_female\"] = participant_genders.apply(lambda x: x.count(\"Female\"))\ndata_gun_violence[\"participant_gender_unknown\"] = participant_genders.apply(lambda x: x.count(\"Unknown\"))\ndel(participant_genders)","f90b0fac":"# Checking for null value of column for guns involved and guns stolen and filling the missing values\ndata_gun_violence[\"n_guns_involved\"] = data_gun_violence[\"n_guns_involved\"].fillna(value =0)\ndata_gun_violence[\"gun_stolen\"] = data_gun_violence[\"gun_stolen\"].fillna(value = \"0::Unknown\")","ff686f05":"# Prints a lot but gives all the unique values of a column\n#data_gun_violence[\"gun_stolen\"].unique()\n\ndef clean_gun_stolen(row) :\n    unknownCount = 0\n    stolenCount = 0\n    notstolenCount = 0\n    gunstolen_row_values = []\n    \n    gunstolen_row = str(row).split(\"||\")\n    for x in gunstolen_row :\n            gunstolen_row_value = str(x).split(\"::\")\n            if len(gunstolen_row_value) > 1 :\n                gunstolen_row_values.append(gunstolen_row_value[1])\n                if \"Stolen\" in gunstolen_row_value :\n                    stolenCount += 1\n                elif \"Not-stolen\" in gunstolen_row_value :\n                    notstolenCount += 1\n                else :\n                    unknownCount += 1\n                    \n    return gunstolen_row_values\n\n\ngunstolenvalues = data_gun_violence.gun_stolen.apply(clean_gun_stolen)\ndata_gun_violence[\"gun_stolen_stolen\"] = gunstolenvalues.apply(lambda x: x.count(\"Stolen\"))\ndata_gun_violence[\"gun_stolen_notstolen\"] = gunstolenvalues.apply(lambda x: x.count(\"Not-stolen\"))\ndel(gunstolenvalues)","21bbba28":"# Checking values for new columns added\ndata_gun_violence.head()","d7ca83f4":"# Checking the dimensions\ndata_gun_violence.shape","dcce272b":"# Jointplot between Number of Person Killed Vs Injured in all incidences\nsns.jointplot(\"n_injured\",\n              \"n_killed\",\n              data_gun_violence,\n              kind='scatter',      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              s=200, color='m', edgecolor=\"skyblue\", linewidth=2)","e33955cc":"# Jointplot to identify Maximum Number of Person Injured in which incidence\nsns.jointplot(\"incident_id\",\n              \"n_injured\",\n              data_gun_violence,\n              kind='scatter'      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              )","a0734e41":"# Jointplot to identify Maximum Number of Person Killed in which incidence\nsns.jointplot(\"incident_id\",\n              \"n_killed\",\n              data_gun_violence,\n              kind='scatter',      # kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }, optional\n              color=\"Red\",\n              marginal_kws={'color': 'red'})","86eb057f":"# Jointplot to identify the number guns involved and the number of guns stolen\nsns.jointplot(x=data_gun_violence[\"n_guns_involved\"], y=data_gun_violence[\"gun_stolen_stolen\"], kind=\"scatter\", color=\"#D81B60\")","4f267a19":"# Jointplot to identify the number guns involved and the number of guns not stolen\nsns.jointplot(x=data_gun_violence[\"n_guns_involved\"], y=data_gun_violence[\"gun_stolen_notstolen\"], kind=\"scatter\", color=\"#1E88E5\")","bdd3be9b":"# Jointplot to identify the number of people killed based on gender wise participant total\nsns.jointplot(x=data_gun_violence.participant_gender_total, y=data_gun_violence.n_killed, data=data_gun_violence, space=0, dropna=True, color=\"#D81B60\")","983211a5":"# Jointplot to identify the number of people injured based on gender wise participant total\nsns.jointplot(x=data_gun_violence.participant_gender_total, y=data_gun_violence.n_injured, data=data_gun_violence, space=0, dropna=True, color=\"#1E88E5\")","0608c259":"# Jointplot to see the number of guns involved along with the number of people killed\nsns.jointplot(x=data_gun_violence.n_guns_involved, y=data_gun_violence.n_killed, data=data_gun_violence, space=0, dropna=True, color=\"#D81B60\")","2916068a":"# Histogram for Top 10 Cities with maximum incidents of Gun Violence\ncitywise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"city_or_county\"]).count()\ntop_cities = citywise_total.sort_values(by='incident_id', ascending=False).head(10)\nprint(top_cities)\ntop_cities.plot.barh()\ndel(top_cities)","035ea23a":"# Histogram for Top 10 States with maximum incidents of Gun Violence\nstatewise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"state\"]).count()\ntop_states = statewise_total.sort_values(by='incident_id', ascending=False).head(10)\nprint(top_states)\ntop_states.plot.barh()\ndel(top_states)","28d29cc0":"# Histogram for Weekday wise Incidents\nweekwise_total = data_gun_violence[[\"incident_id\"]].groupby(data_gun_violence[\"weekday\"]).count()\nweekwise_total.plot.barh()\ndel(weekwise_total)\n# Here, for weekdays 0 is for Monday and 6 is for Sunday.","1f6292f9":"# Histogram showing the crime rate state wise\nstate_vs_crimecount=sns.countplot(x=data_gun_violence[\"state\"],data=data_gun_violence,order=data_gun_violence[\"state\"].value_counts().index)\nstate_vs_crimecount.set_xticklabels(state_vs_crimecount.get_xticklabels(),rotation=90)\nstate_vs_crimecount.set_title(\"State Vs Crime Rate\")","19a71533":"# Histogram showing the the top 10 cities with high crime rate\ncity_vs_crimerate=data_gun_violence['city_or_county'].value_counts().head(10)\ncity_vs_crimerate=sns.barplot(x=city_vs_crimerate.index,y=city_vs_crimerate)\ncity_vs_crimerate.set_xticklabels(city_vs_crimerate.get_xticklabels(),rotation=45)\ncity_vs_crimerate.set_title(\"Top 10 Cities having high crime rate\")","33ad16b4":"# unique states\ndata_gun_violence['state'].unique()","84cdf07b":"# state wise crime count for top 10 states\nstate_vs_crimecount=data_gun_violence['state'].value_counts().head(10)\nstate_vs_crimecount","b55843f8":"# Pie chart showing Top 10 States having high crime rate\nplt.pie(state_vs_crimecount,labels=state_vs_crimecount.index,shadow=True)\nplt.title(\"Top 10 States having high crime rate\")\nplt.axis(\"equal\")","6208fd09":"# the same graph in another way\nplt.pie(state_vs_crimecount, labels=state_vs_crimecount.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"Top 10 States having high crime rate\")\nplt.axis(\"equal\")","681defb2":"# state wise crime rate for all the states\nstatewise_crime_rate = data_gun_violence[\"state\"].value_counts()\nstatewise_crime_rate","fec43fb9":"# Pie chart showing state wise crime rate for all the states\nplt.pie(statewise_crime_rate, labels=statewise_crime_rate.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"State-wise Gun Violence Percentage\")\nplt.axis(\"equal\")","31e5eebf":"# Top 50 cities having highest crime rate\ntopcitywise_crime_rate = data_gun_violence[\"city_or_county\"].value_counts().head(50)\ntopcitywise_crime_rate","a60e66cb":"# Pie chart showing Top 50 cities having highest crime rate\nplt.pie(topcitywise_crime_rate, labels=topcitywise_crime_rate.index, colors=btui, autopct=\"%1.1f%%\", shadow=True, startangle=195)\nplt.title(\"City-wise Gun Violence Percentage\")\nplt.axis(\"equal\")","d7fbff5e":"# Density plot for genderwise participant\ngenderwise_total = data_gun_violence[[\"participant_gender_total\", \"participant_gender_male\", \"participant_gender_female\", \"participant_gender_unknown\"]].groupby(data_gun_violence[\"year\"]).sum()\ndp_gen_plot=sns.kdeplot(genderwise_total[\"participant_gender_male\"], shade=True, color=\"r\")\ndp_gen_plot=sns.kdeplot(genderwise_total[\"participant_gender_female\"], shade=True, color=\"b\")\ndp_gen_plot=sns.kdeplot(genderwise_total['participant_gender_unknown'], shade=True, color=\"g\")\ndel(genderwise_total)","b21798a5":"# Density plot for person injured vs killed on all weekdays\ninj_kill_weektotal = data_gun_violence[[\"n_injured\",\"n_killed\"]].groupby(data_gun_violence[\"weekday\"]).sum()\ndp_inj_kill_plot=sns.kdeplot(inj_kill_weektotal['n_injured'], shade=True, color=\"r\")\ndp_inj_kill_plot=sns.kdeplot(inj_kill_weektotal['n_killed'], shade=True, color=\"b\")\ndel(inj_kill_weektotal)","eeb78178":"# Point plot showing yearly no of persons Killed \nyearly_vs_killed=data_gun_violence.groupby(data_gun_violence[\"year\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nyearly_vs_killed_plot=sns.pointplot(x=yearly_vs_killed.index, y=yearly_vs_killed.No_Killed, data=yearly_vs_killed,label=\"yearly_vs_killed\")\nyearly_vs_killed","a533b518":"# Point plot showing yearly no of persons Injured\nyearly_vs_injured=data_gun_violence.groupby(data_gun_violence[\"year\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nyearly_vs_injured_plot=sns.pointplot(x=yearly_vs_injured.index, y=yearly_vs_injured.No_Injured, data=yearly_vs_injured,label=\"yearly_vs_injured\")\nyearly_vs_injured","bcfab148":"# Point plot showing monthly no of people Killed \nmonthly_vs_killed=data_gun_violence.groupby(data_gun_violence[\"month\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nmonthly_vs_killed_plot=sns.pointplot(x=monthly_vs_killed.index, y=monthly_vs_killed.No_Killed, data=monthly_vs_killed,label=\"monthly_vs_killed\")\nmonthly_vs_killed","fb919fdd":"# Point plot showing monthly no of people injured\nmonthly_vs_injured=data_gun_violence.groupby(data_gun_violence[\"month\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nmonthly_vs_injured_plot=sns.pointplot(x=monthly_vs_injured.index, y=monthly_vs_injured.No_Injured, data=monthly_vs_injured,label=\"monthly_vs_injured\")\nmonthly_vs_injured","7778f56e":"# Violin Plot for Year wise no of people injured\nyear_vs_injured_plot = sns.violinplot(\"year\", \"n_injured\", data=data_gun_violence,split=True, inner=\"quartile\")\nyear_vs_injured_plot.set_title(\"Persons injured in the incidents per Year\")","2bf8916c":"# Violin Plot for Year wise no of people killed\nyear_vs_killed_plot = sns.violinplot(\"year\", \"n_killed\",\n               data=data_gun_violence,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_vs_killed_plot.set_title(\"Persons killed in the incidents per Year\")","f56c5a29":"# Violin Plot for total num of persons Impacted(Killed\/Injured) during gun violence\nImpacted_persons_total = data_gun_violence[[\"total_impacted\", \"n_injured\", \"n_killed\"]].groupby(data_gun_violence[\"year\"]).sum()\nprint(Impacted_persons_total)\n","9f93bd1a":"year_impacted_plot = sns.violinplot(data=Impacted_persons_total,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_impacted_plot.set_title(\"Total number of persons Impacted(Killed\/Injured) during gun violence\")\ndel(Impacted_persons_total)","0f9cbc7e":"# Violin Plot for Genderwise total number of persons involved\/impacted during gun violence\ngenderwise_total = data_gun_violence[[\"participant_gender_total\", \"participant_gender_male\", \"participant_gender_female\", \"participant_gender_unknown\"]].groupby(data_gun_violence[\"year\"]).sum()\nprint(genderwise_total)\n","dae95a57":"year_genderwise_plot = sns.violinplot(data=genderwise_total,\n               split=True,         # If hue variable has two levels, draw half of a violin for each level.\n               inner=\"quartile\"    #  Options: \u201cbox\u201d, \u201cquartile\u201d, \u201cpoint\u201d, \u201cstick\u201d, None \n               )\nyear_genderwise_plot.set_title(\"Genderwise total number of persons involved\/impacted during gun violence\")\ndel(genderwise_total)","caa20627":"# State Vs No of People Killed\nstatewise_vs_killed=data_gun_violence.groupby(data_gun_violence[\"state\"]).apply(lambda x: pd.Series(dict(No_Killed=x.n_killed.sum())))\nstatewise_vs_killed","017ae850":"# Box plot for total number of persons killed State wise\nsns.boxplot('state','n_killed',data=data_gun_violence)","53046382":"#State Vs No of people Injured\nstatewise_vs_injured=data_gun_violence.groupby(data_gun_violence[\"state\"]).apply(lambda x: pd.Series(dict(No_Injured=x.n_injured.sum())))\nstatewise_vs_injured","37868e0c":"# Box plot for total number of persons injured State wise\nsns.boxplot('state','n_injured',data=data_gun_violence)","de62d227":"# Box Plot for Monthwise total number of Persons Killed\nmonthwise_killed_plot = sns.boxplot(\"month\", \"n_killed\", data= data_gun_violence)\nmonthwise_killed_plot.set_title(\"Person killed in incidents per month\")","5dd05787":"# Box Plot for Monthwise total number of Persons Injured\nmonth_injured_plot = sns.boxplot(\"month\", \"n_injured\", data= data_gun_violence)\nmonth_injured_plot.set_title(\"Person injured in incidents per month\")","921bfdfd":"# Count Plot for Statewise incidences of Gun Violence\nstatewise_inc_plot = sns.countplot(x=data_gun_violence[\"state\"], data = data_gun_violence,palette=btui,order=data_gun_violence[\"state\"].value_counts().index)\nstatewise_inc_plot.set_title(\"Statewise incidence of Gun Violence\")\nstatewise_inc_plot.set_xticklabels(statewise_inc_plot.get_xticklabels(), rotation=90)","d64b9d51":"# Count plot for statewise crime rate \nstatewise_crime_rate = sns.countplot(x=data_gun_violence[\"state\"], data=data_gun_violence, palette=btui, order=data_gun_violence[\"state\"].value_counts().index)\nstatewise_crime_rate.set_xticklabels(statewise_crime_rate.get_xticklabels(), rotation=90)\nstatewise_crime_rate.set_title(\"State(s) with highest number of Gun Violence\")","330706be":"# Count Plot for State Senate District wise\nstate_incident_plot = sns.countplot(\"state_senate_district\", data = data_gun_violence,palette=btui,order=data_gun_violence[\"state_house_district\"].value_counts().index)\nstate_incident_plot.set_title(\"State Senate District wise incidence of Gun Violence\")\nstate_incident_plot.set_xticklabels(state_incident_plot.get_xticklabels(),rotation=90)","188d7223":"# Count Plot for State Senate District wise\nstate_incident_plot = sns.countplot(\"state_senate_district\", data = data_gun_violence,palette=btui,order=data_gun_violence[\"state_house_district\"].value_counts().index)\nstate_incident_plot.set_title(\"State Senate District wise incidence of Gun Violence\")\nstate_incident_plot.set_xticklabels(state_incident_plot.get_xticklabels(),rotation=90)","f98d9701":"# Facet Grid Graph for Male\/ Female Partipant per Year\ng = sns.FacetGrid(data_gun_violence, hue=\"year\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"*\",\">\",\"<\",\".\"]})\ng.map(plt.scatter, \"participant_gender_male\", \"participant_gender_female\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","8e80a64f":"# Facet Grid Graphh for Person killed and Injured per Year\ng = sns.FacetGrid(data_gun_violence, hue=\"year\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"*\",\">\",\"<\",\"o\"]})\ng.map(plt.scatter, \"n_injured\", \"n_killed\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","db023216":"# Facet Grid Graphh for Person killed and Injured on Particular days of the week\ng = sns.FacetGrid(data_gun_violence, hue=\"weekday\", palette=\"Set1\", size=5, hue_kws={\"marker\": [\"^\", \"v\",\"h\",\"o\",\"+\",\">\",\"d\"]})\ng.map(plt.scatter, \"n_injured\", \"n_killed\", s=100, linewidth=.5, edgecolor=\"white\")\ng.add_legend();","a0ab7d07":"**DATASET INFORMATION**\n\n**File name :**\n\n    --> gun-violence-data_01-2013_03-2018.csv (142.76 MB) - Gun Violence\n    \n**Column descriptions :**\n\n    -incident_id ID of the crime report\n    -date Date of crime\n    -stateState of crime\n    -city_or_countyCity\/ County of crime\n    -addressAddress of the location of the crime\n    -n_killedNumber of people killed\n    -n_injuredNumber of people injured\n    -incident_urlURL regarding the\n    -source_url - Reference to the reporting source\n    -incident_url_fields_missing - TRUE if the incident_url is present, FALSE otherwise\n    -congressional_district - Congressional district id\n    -gun_stolen - Status of guns involved in the crime (i.e. Unknown, Stolen, etc...)\n    -gun_type - Typification of guns used in the crime\n    -incident_characteristics - Characteristics of the incidence\n    -latitude - Location of the incident\n    -location_description\n    -longitude - Location of the incident\n    -n_guns_involved - Number of guns involved in incident\n    -notes - Additional information of the crime\n    -participant_age - Age of participant(s) at the time of crime\n    -participant_age_group - Age group of participant(s) at the time crime\n    -participant_gender - Gender of participant(s)\n    -participant_name - Name of participant(s) involved in crime\n    -participant_relationship - Relationship of participant to other participant(s)\n    -participant_status - Extent of harm done to the participant\n    -participant_type - Type of participant\n    -sources\n    -state_house_district\n    -state_senate_district\n","6781204d":"**APPLYING FEATURE ENGINEERING ON THE GUN VIOLENCE DATASET**","d1c0b9b1":"**i)   Joint Distribution plots:**\n","2045ed5d":"**ix) Facet grid graph**","229f3ddb":"**vii) Box plot**","d223a11c":"# GUN VIOLENCE DATA - EXPLORING AND ANALYZING THE DATA","381a6930":"**iii) Pie chart**","54f6b533":"**viii) Count plot**","0e0bb483":"**Now let's start with the exercise.....!!!**","f0aedff3":"**ii) Histograms**","1e344571":"**DATA EXPLORATION WITH THE HELP OF GRAPHS**","0d46e44f":"**iv) Kernel Density plots**","5c74e497":"**v) Point plots**","3dec05af":"Gun Violence Archive (GVA) is a not for profit corporation formed in 2013 to provide free online public access to accurate information about gun-related violence in the United States. GVA will collect and check for accuracy, comprehensive information about gun-related violence in the U.S. and then post and disseminate it online.","329d0b72":"**The following graphs have been used to describe the gun violence data :**\n* **    i)      Joint Distribution plots**\n* **    ii)     Histograms**\n* **    iii)    Pie chart**\n* **    iv)    Kernel Density plots**\n* **    v)     Point plots**\n* **    vi)    Violin plots**\n* **    vii)   Box plots**\n* **    viii)  Count plots**\n* **    ix)    Facet Grid plots**","d141b2b3":"**vi) Violin plot**"}}