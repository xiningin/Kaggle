{"cell_type":{"e2ff2425":"code","4e09cb57":"code","2da3a475":"code","2eddf409":"code","0896c56c":"code","0dd71448":"code","70741743":"code","fd1b49e4":"code","1d395325":"code","88ea6f92":"code","1acceb02":"code","f2a56c30":"code","140c333e":"code","83e8329a":"code","a6796b63":"code","67d479ed":"code","b6ee7dcd":"code","9e934c1c":"code","ca4a73f0":"code","2b386c66":"code","b06f4bbf":"code","c53e3edb":"code","97ce68b6":"code","08499a2a":"code","0f0d8c7b":"markdown","7d02a6a5":"markdown","91f733e2":"markdown","ce98ad8b":"markdown","72acc741":"markdown","97ae9406":"markdown","85bb5d23":"markdown","9c34f092":"markdown","e354d79f":"markdown","80aa0d21":"markdown","5112c42c":"markdown","c66e308a":"markdown","db483ee7":"markdown","a4c58c10":"markdown","607812a6":"markdown","f608f7b9":"markdown","1b783c4e":"markdown","532e822c":"markdown","00820aa1":"markdown","fce2bd32":"markdown","bea4296c":"markdown","57572218":"markdown","4b3586e5":"markdown","8220c77a":"markdown"},"source":{"e2ff2425":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e09cb57":"# pandas is a software library written for the Python programming language for data manipulation and analysis.\nimport pandas as pd\n#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\nimport numpy as np\n# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.\nimport matplotlib.pyplot as plt\n#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics\nimport seaborn as sns\n# Plotly: The front end for ML and data science models\n# Plotly Express is a built-in part of the plotly library, and is the recommended starting point for creating most common figures\nimport plotly.express as px\nfrom plotly import tools\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","2da3a475":"# import datasets\ntrain_dataset = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_dataset = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf = train_dataset.copy()\ndf.head()","2eddf409":"print('---------------------------------------------------------------')\nprint('Dataset Stats')\ndisplay(df.describe())\nprint('---------------------------------------------------------------')\nprint('')\nprint('Dataset null values:')\ndisplay(df.isna().sum())\n","0896c56c":"print('---------------------------------------------------------------')\nprint('')\nprint('Data columns types:')\ndisplay(df.dtypes)\n# Extracting Titles from the column name\ndf['Name'] = df.Name.str.extract(' ([A-Za-z]+)\\.', expand = False)\ndf=df.rename(columns={\"Name\":\"Titles\"})","0dd71448":"# list of numerical variables............\nnumericalColumns = [col for col in df.columns if df[col].dtypes != 'object']\nprint('---------------------------------------------------------------')\nprint('')\nprint('Number of numerical variables: ', len(numericalColumns))\nprint('---------------------------------------------------------------')\nprint('')\nprint('Numerical Variables Column: ',numericalColumns)","70741743":"categoricalColumns = [col for col in df.columns if df[col].dtypes == 'object']\nprint('---------------------------------------------------------------')\nprint('')\nprint('Number of numerical variables: ', len(categoricalColumns))\nprint('---------------------------------------------------------------')\nprint('')\nprint('Numerical Variables Column: ',categoricalColumns)","fd1b49e4":"def missingDataPourcentage(df):\n    total = df.isnull().sum().sort_values(ascending = False)\n    Percentage = (df.isnull().sum()\/df.isnull().count()*100).sort_values(ascending = False)\n    return pd.concat([total, Percentage], axis=1, keys=['Total', 'Percentage'])\ndisplay(missingDataPourcentage(df))","1d395325":"#data is missing for more than 60%\n# Commented after excution : \ndf.drop(columns = ['Cabin'],axis = 1,inplace = True) \n#Mean, Median and Mode Imputation method, due to the fact of having small number of missing observations\ndf['Embarked']=df['Embarked'].fillna(df['Embarked'].mode()[0])\ndf['Age']=df['Age'].fillna(df['Age'].mean())\n# Display the new count of missing values in our data\ndisplay(df.isna().sum())\n\n","88ea6f92":"display(df[df.duplicated()])\n","1acceb02":"display(df.nunique(axis=0))\n","f2a56c30":"categoricalColumns.remove('Ticket')\ncategoricalColumns.remove('Cabin')\nfor col in categoricalColumns:\n    display(pd.DataFrame({col: df[col].value_counts(),\n                       \"Count\": 100 * df[col].value_counts() \/ len(df)}))\n    print(\"##############################\")\n    sns.countplot(x=df[col], data=df)\n    plt.show()","140c333e":"numericalColumns.remove('PassengerId')\nfor col in numericalColumns:\n    display(pd.DataFrame({col: df[col].value_counts(),\n                       \"Ratio\": 100 * df[col].value_counts() \/ len(df)}))\n    print(\"##############################\")\n    sns.countplot(x=df[col], data=df)\n    plt.show()","83e8329a":"fig = px.histogram(df, x=\"Age\", color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","a6796b63":"display(df.columns)\nfig = px.histogram(df, x='Fare', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","67d479ed":"fig = px.histogram(df, x='Pclass', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()\n","b6ee7dcd":"fig = px.histogram(df, x='Sex', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","9e934c1c":"fig = px.histogram(df, x='Parch', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","ca4a73f0":"fig = px.histogram(df, x='Embarked', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","2b386c66":"fig = px.histogram(df, x='Titles', color =\"Survived\", pattern_shape=\"Survived\",\n                   barmode='group')\nfig.update_layout()","b06f4bbf":"#Preparing dataset for ML\ndf.drop(['Ticket', 'PassengerId'], axis=1, inplace= True)\ndisplay(df.head())\n#Replacing the values...\ndf['Sex'].replace({'male':0, 'female':1}, inplace=True)\ndf['Embarked'].replace({'S':0, 'C':1,'Q':2}, inplace=True)\ndisplay(df['Titles'].unique())\n#I know I could use a Loop & a Dict don't mind me sometimes I'm just too lazy\ndf['Titles'].replace({'Mr':0, 'Mrs':1, 'Miss':2, 'Master':3, 'Don':4, 'Rev':5, 'Dr':6, 'Mme':7, 'Ms':8,'Major':9, 'Lady':10, 'Sir':11, 'Mlle':12, 'Col':13, 'Capt':14, 'Countess':15,'Jonkheer':16},inplace=True)","c53e3edb":"from numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.feature_selection import RFE\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import TruncatedSVD\n\nX = df.drop('Survived', axis=1)\ny = df['Survived']\n\n# minimally prepare dataset\nX = X.astype('float')\ny = LabelEncoder().fit_transform(y.astype('str'))\n# transforms for the feature union\ntransforms = list()\ntransforms.append(('mms', MinMaxScaler()))\ntransforms.append(('ss', StandardScaler()))\ntransforms.append(('rs', RobustScaler()))\ntransforms.append(('qt', QuantileTransformer(n_quantiles=100, output_distribution='normal')))\ntransforms.append(('kbd', KBinsDiscretizer(n_bins=10, encode='ordinal', strategy='uniform')))\ntransforms.append(('pca', PCA(n_components=7)))\ntransforms.append(('svd', TruncatedSVD(n_components=7)))\n# create the feature union\nfu = FeatureUnion(transforms)\n# define the feature selection\nrfe = RFE(estimator=LogisticRegression(solver='liblinear'), n_features_to_select=8)\n# define the model\nmodel = LogisticRegression(solver='liblinear')\n# define the pipeline\nsteps = list()\nsteps.append(('fu', fu))\nsteps.append(('rfe', rfe))\nsteps.append(('m', model))\npipeline = Pipeline(steps=steps)\n# define the cross-validation procedure\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=5, random_state=1)\nscores = cross_val_score(pipeline, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\npipeline.fit(X,y)\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))\n","97ce68b6":"df_test = test_dataset.copy()\n# I remove columns with duplicate semantics and category columns\ndf_test.drop([ 'Cabin', 'Ticket', 'PassengerId'], axis=1, inplace= True)\ndf_test['Sex'].replace({'male':0, 'female':1}, inplace=True)\ndf_test['Embarked'].replace({'S':0, 'C':1,'Q':2}, inplace=True)\ndf_test['Name'] = df_test.Name.str.extract(' ([A-Za-z]+)\\.', expand = False)\ndf_test=df_test.rename(columns={\"Name\":\"Titles\"})\ndisplay(df_test['Titles'].unique())\n#I know I could use a Loop & a Dict don't mind me sometimes I'm just too lazy\ndf_test['Titles'].replace({'Mr':0, 'Mrs':1, 'Miss':2, 'Master':3, 'Don':4, 'Rev':5, 'Dr':6, 'Mme':7, 'Ms':8,'Major':9, 'Lady':10, 'Sir':11, 'Mlle':12, 'Col':13, 'Capt':14, 'Countess':15,'Jonkheer':16,'Dona':17},inplace=True)\ndf_test['Embarked']=df_test['Embarked'].fillna(df_test['Embarked'].mode()[0])\ndf_test['Age']=df_test['Age'].fillna(df_test['Age'].mean())\ndf_test['Fare']=df_test['Fare'].fillna(df_test['Fare'].mean())\n# I rename titanic_df_test\ndisplay(missingDataPourcentage(df_test))\nX_test = df_test\npredicted_survived = pipeline.predict(X_test)\ndisplay(predicted_survived)","08499a2a":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nimport joblib\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\n\n# Construct some pipelines\npipe_lr = Pipeline([('scl', StandardScaler()),\n\t\t\t('clf', LogisticRegression(random_state=1))])\n\npipe_lr_pca = Pipeline([('scl', StandardScaler()),\n\t\t\t('pca', PCA(n_components=7)),\n\t\t\t('clf', LogisticRegression(random_state=1))])\n\npipe_rf = Pipeline([('scl', StandardScaler()),\n\t\t\t('clf', RandomForestClassifier(random_state=1))])\n\npipe_rf_pca = Pipeline([('scl', StandardScaler()),\n\t\t\t('pca', PCA(n_components=7)),\n\t\t\t('clf', RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2))])\n\npipe_svm = Pipeline([('scl', StandardScaler()),\n\t\t\t('clf', svm.SVC(random_state=1))])\n\npipe_svm_pca = Pipeline([('scl', StandardScaler()),\n\t\t\t('pca', PCA(n_components=7)),\n\t\t\t('clf', svm.SVC(random_state=1))])\n\t\t\t\n# Set grid search params\nparam_range = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nparam_range_fl = [1.0, 0.5, 0.1]\n\ngrid_params_lr = [{'clf__penalty': ['l1', 'l2'],\n\t\t'clf__C': param_range_fl,\n\t\t'clf__solver': ['liblinear']}] \n\ngrid_params_rf = [{'clf__criterion': ['gini', 'entropy'],\n\t\t'clf__min_samples_leaf': param_range,\n\t\t'clf__max_depth': param_range,\n\t\t'clf__min_samples_split': param_range[1:]}]\n\ngrid_params_svm = [{'clf__kernel': ['linear', 'rbf'], \n\t\t'clf__C': param_range}]\n\n# Construct grid searches\njobs = -1\n\ngs_lr = GridSearchCV(estimator=pipe_lr,\n\t\t\tparam_grid=grid_params_lr,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10) \n\t\t\t\ngs_lr_pca = GridSearchCV(estimator=pipe_lr_pca,\n\t\t\tparam_grid=grid_params_lr,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10)\n\t\t\t\ngs_rf = GridSearchCV(estimator=pipe_rf,\n\t\t\tparam_grid=grid_params_rf,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10, \n\t\t\tn_jobs=jobs)\n\ngs_rf_pca = GridSearchCV(estimator=pipe_rf_pca,\n\t\t\tparam_grid=grid_params_rf,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10, \n\t\t\tn_jobs=jobs)\n\ngs_svm = GridSearchCV(estimator=pipe_svm,\n\t\t\tparam_grid=grid_params_svm,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10,\n\t\t\tn_jobs=jobs)\n\ngs_svm_pca = GridSearchCV(estimator=pipe_svm_pca,\n\t\t\tparam_grid=grid_params_svm,\n\t\t\tscoring='accuracy',\n\t\t\tcv=10,\n\t\t\tn_jobs=jobs)\n\n# List of pipelines for ease of iteration\ngrids = [gs_lr, gs_lr_pca, gs_rf, gs_rf_pca, gs_svm, gs_svm_pca]\n\n# Dictionary of pipelines and classifier types for ease of reference\ngrid_dict = {0: 'Logistic Regression', 1: 'Logistic Regression w\/PCA', \n\t\t2: 'Random Forest', 3: 'Random Forest w\/PCA', \n\t\t4: 'Support Vector Machine', 5: 'Support Vector Machine w\/PCA'}\n\n# Fit the grid search objects\nprint('Performing model optimizations...')\nbest_acc = 0.0\nbest_clf = 0\nbest_gs = ''\nfor idx, gs in enumerate(grids):\n\tprint('\\nEstimator: %s' % grid_dict[idx])\t\n\t# Fit grid search\t\n\tgs.fit(X, y)\n\t# Best params\n\tprint('Best params: %s' % gs.best_params_)\n\t# Best training data accuracy\n\tprint('Best training accuracy: %.3f' % gs.best_score_)\n\t# Predict on test data with best params\n\ty_pred = gs.predict(X_test)\n\t# Test data accuracy of model with best params\n\tprint(y_pred)'''","0f0d8c7b":"### Age & Survival ","7d02a6a5":"### Pclass & Survival","91f733e2":"# Step 2: Dealing with missing  and duplicated data\n* Missing Data, we focus on as observed in the summary **Columns : [Age,Embarked,Cabin]**\n1. Extracting the pourcentage of missing values\n2. Undertanding the impact of the missing data on the observations , if data is missing for more than 60% of the observation, we will drop it.\n3. In our case, we're not dealing with time-series no trends or seasonality to observe, basically we'll work more with data imputataion.","ce98ad8b":"# Step 1: Separating categorical & numerical columns","72acc741":"### Sex & Survival","97ae9406":"# Model Test ","85bb5d23":"### Embarked & Survival","9c34f092":"### Parch & Survival","e354d79f":"# Exploratory Data Analysis\nFirst, let's read the dataset into a Pandas dataframe and print its summary\n\n### Data Dictionary\n* survival\tSurvival\t0 = No, 1 = Yes\n* pclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n* sex\tSex\t\n* Age\tAge in years\t\n* sibsp\t# of siblings \/ spouses aboard the Titanic\t\n* parch\t# of parents \/ children aboard the Titanic\t\n* ticket\tTicket number\t\n* fare\tPassenger fare\t\n* cabin\tCabin number\t\n* embarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton","80aa0d21":"This is basically just one model , I'll be putting more to test and also a DL model will soon be implemented","5112c42c":"# Machine Learning \n","c66e308a":"### Titles & Survival","db483ee7":"## Numerical data","a4c58c10":"## Categorical data","607812a6":"# EDA - DATA VIZ\n## Step 3: Visualizing the different columns \n","f608f7b9":"### ML Pipline without Featureunion ( It takes a hell of time to execute well I'm not patient)","1b783c4e":"### Categorical features extraction\n**list of categorical variables**","532e822c":"## ML Pipline with FeatureUnion","00820aa1":"# test data preprocessing","fce2bd32":"### Fare & Survival","bea4296c":"# The Challenge\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","57572218":"### Data preprocessing ---- part 2","4b3586e5":"### Numerical features extraction","8220c77a":"## Step 4: Visualizing the relationships between columns & survival\n"}}