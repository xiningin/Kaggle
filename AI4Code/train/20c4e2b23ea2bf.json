{"cell_type":{"b79e03fa":"code","ba8583be":"code","a80b2ef5":"code","25b535f3":"code","4df38be3":"code","00fe0db2":"code","c961fca9":"code","e01200f6":"code","b893a8d5":"code","e98da61f":"markdown","d758c10a":"markdown","b862eff8":"markdown","daf24a6d":"markdown","bdfc9aca":"markdown","83734637":"markdown","817aa223":"markdown","34814931":"markdown","94806f81":"markdown","f7414a72":"markdown","996ba3c8":"markdown"},"source":{"b79e03fa":"import time\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier","ba8583be":"data_dir = '..\/input\/'\n\n# load csv file\ndef load_data(row_nums):\n    train = pd.read_csv(data_dir + 'train.csv').values\n    x_test = pd.read_csv(data_dir + 'test.csv').values\n\n    x_train = train[:row_nums, 1:]\n    y_train = train[:row_nums, 0]\n    return x_train, y_train, x_test\n\nOrigin_x_train, Origin_y_train, Origin_x_test = load_data(1500)","a80b2ef5":"classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nnum = 5\n\nfor y, cls in enumerate(classes):\n    # select all labels equal to current class\n    idxs = np.nonzero([i == y for i in Origin_y_train])\n    idxs = np.random.choice(idxs[0], num)\n    for i, idx in enumerate(idxs):\n        plt_idx = i * len(classes) + y + 1\n        plt.subplot(num, len(classes), plt_idx)\n        pixels = Origin_x_train[idx].reshape((28,28))\n        plt.imshow(pixels)\n        plt.axis(\"off\")\n        if i == 0:\n            plt.title(cls)\n\nplt.show()","25b535f3":"x_train, x_vali, y_train, y_vali = train_test_split(\n    Origin_x_train, \n    Origin_y_train, \n    test_size = 0.2, \n    random_state = 0)\n\nprint(x_train.shape, x_vali.shape, y_train.shape, y_vali.shape)","4df38be3":"k_range = range(1,10)\naccuracies = []\n\nfor k in k_range:\n    print('k = {} classifier begins:'.format(k))\n    # get start timestamp\n    start_time = time.time() \n    \n    # create a knn object:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(x_train, y_train)\n    y_pred = knn.predict(x_vali)\n    \n    # get the accuracy\n    accuracy = accuracy_score(y_vali, y_pred)\n    accuracies.append(accuracy)\n    \n    # get end timestamp\n    end_time = time.time()\n    \n    print('Running time: {} sec'.format(start_time - end_time))","00fe0db2":"print(accuracies)\nplt.plot(k_range, accuracies)\nplt.xlabel('k value')\nplt.ylabel('accuracy')\nplt.show()","c961fca9":"best_k = np.argmax(accuracies) + 1\n\nknn = KNeighborsClassifier(n_neighbors = best_k)\nknn.fit(Origin_x_train, Origin_y_train)\ny_pred = knn.predict(Origin_x_test)","e01200f6":"# test the final result\nclasses = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nnum = 10\n\nfor y, cls in enumerate(classes):\n    # select all labels equal to current class\n    idxs = np.nonzero([i == y for i in y_pred])\n\n    # random select one\n    idxs = np.random.choice(idxs[0], num)\n    for i, idx in enumerate(idxs):\n        plt_idx = i * len(classes) + y + 1\n        plt.subplot(num, len(classes), plt_idx)\n        pixels = Origin_x_test[idx].reshape((28,28))\n        plt.imshow(pixels)\n        plt.axis(\"off\")\n        if i == 0:\n            plt.title(cls)\n\nplt.show()","b893a8d5":"# output the prediction result\npd.DataFrame({\"ImageId\": list(range(1,len(y_pred)+1)),\n              \"Label\": y_pred}).to_csv('.\/Digit_Recogniser_Result.csv', \n                                       index=False,\n                                       header=True)","e98da61f":"# \u9884\u6d4b\u4e4b\u540e\uff0c\u6211\u4eec\u628a\u9884\u6d4b\u597d\u7684\u6570\u636e\u6253\u5370\u5230\u6587\u4ef6Digit_Recogniser_Result.csv\u91cc\u9762\u3002\n# \u6253\u5370\u7684\u683c\u5f0f\u662f\u5982\u4e0b\n\n* ImageId\tLabel\n* 1\t2\n* 2\t0\n* 3\t9\n* 4\t9","d758c10a":"# \u9a8c\u8bc1\u4e00\u4e0b\u7ed3\u679c","b862eff8":"\u4ece `..\/train.csv` and `..\/test.csv` \u6587\u4ef6\u91cc\u9762\u8bfb\u5165 numpy arrays.\n\n\u5bfc\u5165\u6570\u636e\u540e\u6253\u5370shape\u67e5\u770b\u662f\u5426\u6570\u636e\u662f\u5426\u5b8c\u6574\n\n\u5bfc\u5165\u6570\u636e\u5dee\u4e0d\u591a10\u79d2","daf24a6d":"\u628a\u539f\u672c\u7684\u8bad\u7ec3\u6570\u636e\u62c6\u5206\u6210\u4e3a20%\u6d4b\u8bd5\u96c6\uff088400\u4e2a\uff09\uff0c80%\u8bad\u7ec3\u96c6\uff0833600\u4e2a\uff09\n\n\u600e\u4e48\u68372\/8\u5206","bdfc9aca":"# \u9884\u6d4b\u6d4b\u8bd5\u6570\u636e\u96c6\u7684\u7ed3\u679c\n","83734637":"# \u901a\u8fc7\u8bad\u7ec3\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u597d\u7684\u6d4b\u8bd5\u6570\u636e\u96c6\uff0c\u6253\u5370\u51faAccuracy\u7684\u56fe","817aa223":"# \u7528\u56fe\u50cf\u5c55\u793a\u4e00\u4e0b\u6570\u636e\u96c6","34814931":"# \u5bfc\u5165\u6570\u636e","94806f81":"\n\u4e0b\u9762\u8fdb\u884cKNN\u6a21\u578b\u8bad\u7ec3\n\u5982\u679c\u662f\u5927\u6570\u636e\uff0c\u9700\u89811.5\u5c0f\u65f6\u8dd1\u5b8c","f7414a72":"\n\u5c55\u793a\u90e8\u5206\u6570\u636e\u770b\u770b\u56fe\u7247\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\uff08\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u5df1\u770b\uff09","996ba3c8":"# \u4e5d\u7ae0 KNN \u6559\u7a0b \n\nhttps:\/\/www.kaggle.com\/c\/digit-recognizer"}}