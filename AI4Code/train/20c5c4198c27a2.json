{"cell_type":{"b4ddb305":"code","503a6532":"code","5a65ac7b":"code","fc4cfb4e":"code","1a5abedc":"code","7b114cdd":"code","28322669":"code","65995379":"code","096013a8":"code","95950cd2":"code","c2c215be":"code","414174ba":"code","72703859":"code","6543bfaf":"code","27174505":"code","536ab89e":"code","640874b9":"code","cd1f9602":"code","b72a583c":"code","bb800e44":"code","6f7a4ba0":"code","47c2ed80":"code","7d5f4006":"code","5385d4c4":"code","e27480e3":"code","4dfa6e96":"code","2effd7c9":"code","a76f286e":"code","c8b8802d":"markdown","26337a05":"markdown","79f47e5b":"markdown"},"source":{"b4ddb305":"import pandas as pd\n# pd.Series? # returns info page for Series object","503a6532":"animals = ['Rat', 'Cat', 'Dog']\npd.Series(animals)","5a65ac7b":"nums = [1,2,3,4]\npd.Series(nums)","fc4cfb4e":"# if there is None in a list, pandas will create object of type None\nanimals = ['Rat', 'Cat', None]\npd.Series(animals)\n","1a5abedc":"nums = [2,3,4,None]\npd.Series(nums)","7b114cdd":"import numpy as np\nnp.nan == np.nan # is not a number is not equal to itself, we should np.isnan function to check if it is nan\n","28322669":"np.isnan(np.nan)","65995379":"np.nan == None # np.nan and None are not equal","096013a8":"sports = {'Archery': 'Bhutan',\n          'Golf': 'Scotland',\n          'Sumo': 'Japan',\n          'Taekwondo': 'South Korea'}\nsp = pd.Series(sports)","95950cd2":"sp.iloc[2] # i means index loc means location, if we want to get the value using index than use .iloc which is an attribute of a series","c2c215be":"sp.loc['Golf']","414174ba":"sp.index","72703859":"sp[3] # we can query series wihout using .iloc or .loc but using .iloc or .loc is efficient than not using it","6543bfaf":"int_series = pd.Series([100,200,300,400,500,600])\nint_series[0]","27174505":"sports = {99: 'Bhutan',\n          100: 'Scotland',\n          101: 'Japan',\n          102: 'South Korea'}\ns = pd.Series(sports)","536ab89e":"s[0]#This won't call s.iloc[0] as one might expect, it generates an error instead","640874b9":"s = pd.Series([100.00, 120.00, 101.00, 3.00])\nprint(s)\nprint(s+2)  #adds two to each item in s using broadcasting\n\n# above can be done using series interables but its not efficient\nimport numpy as np\nra = pd.Series(np.random.randint(0, 1000, 10000))\nprint(ra.head())\n\n\nfor label, value in ra.iteritems():\n    ra.loc[label] = value+2\n    \nprint(ra.head(4))","cd1f9602":"total = 0\nfor num in s:\n    total += num\n    \nprint(total)","b72a583c":"%%timeit -n 100\ntotal = 0\nfor num in s:\n    total += num\n    \n","bb800e44":"import numpy as np\nrand = pd.Series(np.random.randint(0,1000, 10000))\nrand.head(4)","6f7a4ba0":"len(rand)","47c2ed80":"%%timeit -n 100 # calculate time consumed for 100 runs\nsum = 0\nfor num in rand:\n    sum+=num","7d5f4006":"%%timeit -n 100\nsum = np.sum(rand)","5385d4c4":"original_sports = pd.Series({'Archery': 'Bhutan',\n                             'Golf': 'Scotland',\n                             'Sumo': 'Japan',\n                             'Taekwondo': 'South Korea'})\ncricket_loving_countries = pd.Series(['Australia',\n                                      'Barbados',\n                                      'Pakistan',\n                                      'England'], \n                                   index=['Cricket',\n                                          'Cricket',\n                                          'Cricket',\n                                          'Cricket'])\nall_sports = original_sports.append(cricket_loving_countries)\nprint(original_sports) # does not change base object\nprint(all_sports)","e27480e3":"import pandas as pd\npurchase_1 = pd.Series({'Name': 'Chris',\n                        'Item Purchased': 'Dog Food',\n                        'Cost': 22.50})\npurchase_2 = pd.Series({'Name': 'Kevyn',\n                        'Item Purchased': 'Kitty Litter',\n                        'Cost': 2.50})\npurchase_3 = pd.Series({'Name': 'Vinod',\n                        'Item Purchased': 'Bird Seed',\n                        'Cost': 5.00})","4dfa6e96":"df = pd.DataFrame([purchase_1, purchase_2, purchase_3], index=['Store 1', 'Store 2', 'Store 3'])\ndf","2effd7c9":"df.loc['Store 1'] # get data by index","a76f286e":"df.loc[:, 'Cost'] # select all rows and Cost column","c8b8802d":"# Quering Series","26337a05":"# The DataFrame Data Structure","79f47e5b":"### The series data structure"}}