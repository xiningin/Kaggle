{"cell_type":{"79ca406f":"code","ed8d0253":"code","92fad94b":"code","3b72da5d":"code","97724810":"code","20a0db42":"code","b021fb51":"code","cb559b9b":"code","67b6a519":"code","366572d7":"code","65d85987":"code","b6c0f77c":"code","88e0525e":"code","085044f4":"code","0faffa96":"markdown"},"source":{"79ca406f":"import os\nimport glob\nimport shutil\nimport random\nimport pandas as pd\nfrom PIL import Image\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","ed8d0253":"def importing_data(path):\n    sample = []\n    for filename in glob.glob(path):\n        #img = Image.open(filename,'r')\n        #IMG = np.array(img)\n        sample.append(filename)\n    return sample\n\npath1 = '\/\/kaggle\/input\/brain-tumor-detection\/no\/*.jpg'\npath2 = '\/\/kaggle\/input\/brain-tumor-detection\/yes\/*.jpg'\npath3 = '\/\/kaggle\/input\/brain-tumor-detection\/pred\/*.jpg'\n\ntrain_n = importing_data(path1)\ntrain_y = importing_data(path2)\ntest = importing_data(path3)\n\n#%% CREATION OF DATASETS\n\ndf_train_n = pd.DataFrame({'image':train_n, 'label': 'Healthy'})\ndf_train_y = pd.DataFrame({'image':train_y, 'label': 'Affected'})\ndf_test = pd.DataFrame({'image':test})\ntrain_data = pd.concat([df_train_n, df_train_y])\ntrain_data.head()\n","92fad94b":"\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val = train_test_split(train_data,\n                                  test_size = 0.1,\n                                  shuffle = True,\n                                  random_state = 42)\n\n","3b72da5d":"pip install adabelief-tf==0.2.0","97724810":"from adabelief_tf import AdaBeliefOptimizer\n","20a0db42":"import keras\nfrom keras.metrics import AUC, Recall, Precision\nfrom keras.models import Sequential\nfrom keras.layers import Dense, GlobalAveragePooling2D, Dropout, Conv2D , MaxPooling2D, Flatten\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n#from keras.optimizers import Adam\n\ndef build_model():\n    \n    '''Sequential Model creation'''\n    Cnn = Sequential()\n    \n    Cnn.add(Conv2D(64,(5,5), activation = 'relu', padding = 'same',\n                   strides=(2,2), input_shape = [224,224,1]))\n    Cnn.add(MaxPooling2D(2))\n    Cnn.add(Conv2D(128,(5,5), activation = 'relu', padding = 'same', strides=(2,2)))\n    Cnn.add(Conv2D(128,(5,5), activation = 'relu', padding = 'same', strides=(2,2)))\n    Cnn.add(Conv2D(256,(5,5), activation = 'relu', padding = 'same', strides=(2,2)))\n    Cnn.add(MaxPooling2D(2))\n    #Cnn.add(GlobalAveragePooling2D())\n    Cnn.add(Flatten())\n    Cnn.add(Dense(64, activation = 'relu'))\n    Cnn.add(Dropout(0.4))\n    Cnn.add(Dense(32, activation = 'relu'))\n    Cnn.add(Dropout(0.4))\n    Cnn.add(Dense(2, activation = 'softmax'))\n    return Cnn\n\nkeras_model = build_model()\nkeras_model.summary()","b021fb51":"def Model_fit(train_data, val_data):\n    \n    keras_model = None\n    \n    keras_model = build_model()\n    \n    '''Compiling the model'''\n    \n    keras_model.compile(optimizer = AdaBeliefOptimizer(learning_rate = 1e-4),\n                        loss='sparse_categorical_crossentropy',\n                        metrics =['acc'])\n    \n    es = EarlyStopping(monitor='val_loss', mode='min',\n                       patience=2,\n                       restore_best_weights=True,\n                       verbose=1)\n                       \n    \n    checkpoint_cb = ModelCheckpoint(\"version9.h5\",\n                                    save_best_only=True)\n    \n    reduce_lr = ReduceLROnPlateau(monitor = 'val_loss',\n                                  factor = 0.2,\n                                  patience = 3,\n                                  min_lr = 1e-5,\n                                  mode = 'min',\n                                  verbose=1)\n                                  \n    \n    history = keras_model.fit(train_data,\n                              validation_data = val_data,\n                              epochs= 15,\n                              batch_size = 10,\n                              callbacks=[es, checkpoint_cb, reduce_lr])\n                              \n    \n      \n    return history","cb559b9b":"from keras.preprocessing.image import ImageDataGenerator\n\nk_fold = 1\nIMG_SIZE = 224\nsize = (IMG_SIZE,IMG_SIZE)\nn_CLASS = 2\n\ndef CV_training(train_data, val_data):\n    \n    cv_histories = []\n    \n    for i in range(0,k_fold):\n    \n        datagen = ImageDataGenerator(rescale = 1.\/255)\n    \n        train_set = datagen.flow_from_dataframe(train_data,\n                                                directory = '\/\/kaggle\/input\/brain-tumor-detection\/*.jpg',\n                                                x_col = 'image',\n                                                y_col = 'label',\n                                                target_size = size,\n                                                color_mode = 'grayscale',\n                                                class_mode = 'sparse',\n                                                batch_size = 10,\n                                                shuffle = True,\n                                                interpolation = 'bilinear')\n        \n        val_set = datagen.flow_from_dataframe(val_data,\n                                              directory = '\/\/kaggle\/input\/brain-tumor-detection\/*.jpg',\n                                              x_col = 'image',\n                                              y_col = 'label',\n                                              target_size = size,\n                                              color_mode = 'grayscale',\n                                              class_mode = 'sparse',\n                                              batch_size = 10,\n                                              shuffle = True,\n                                              interpolation = 'bilinear')\n        print(\"Training on Fold: \",i+1)\n    \n        cv_histories.append(Model_fit(train_set, val_set))\n    \n    return cv_histories\n\ncv_results = CV_training(X_train,X_val)","67b6a519":"#%% CHEKING THE CROSS VALIDATION METRICS\n\ndef acc_results(results):\n    i = 0\n    for fold in cv_results:\n        print('Val_Acc Folder '+ str(i) + ' =', max(fold.history['val_acc']))\n        i += 1\n        \nacc_results(cv_results)","366572d7":"#%% LOOKING AT THE ACCURACY-LOSS PLOTS FOR EACH FOLD\n\ndef Acc_Loss_Plot(results):\n    \n    for fold in results:\n        \n        acc = fold.history['acc']\n        val_acc = fold.history['val_acc']\n        loss = fold.history['loss']\n        val_loss = fold.history['val_loss']\n    \n        fig, (ax1, ax2) = plt.subplots(1,2, figsize= (10,5))\n        fig.suptitle(\" MODEL'S METRICS VISUALIZATION \")\n\n        ax1.plot(range(1, len(acc) + 1), acc)\n        ax1.plot(range(1, len(val_acc) + 1), val_acc)\n        ax1.set_title('History of Accuracy')\n        ax1.set_xlabel('Epochs')\n        ax1.set_ylabel('Accuracy')\n        ax1.legend(['training', 'validation'])\n\n\n        ax2.plot(range(1, len(loss) + 1), loss)\n        ax2.plot(range(1, len(val_loss) + 1), val_loss)\n        ax2.set_title('History of Loss')\n        ax2.set_xlabel('Epochs')\n        ax2.set_ylabel('Loss')\n        ax2.legend(['training', 'validation'])\n        plt.show()\n    \nAcc_Loss_Plot(cv_results)","65d85987":"#%% LOADING THE MODEL\n\nimport keras\n\nkeras_model = keras.models.load_model('version9.h5')\nkeras_model.compile(optimizer = AdaBeliefOptimizer(learning_rate = 1e-4),\n                    loss='sparse_categorical_crossentropy', metrics =[ 'acc'])\n\n# Predictions on the test set\n\ndatagen = ImageDataGenerator(rescale = 1.\/255)\n\ntest_set = datagen.flow_from_dataframe(df_test,\n                                       directory = '\/\/kaggle\/input\/brain-tumor-detection\/*.jpg',\n                                       x_col = 'image',\n                                       y_col = None,\n                                       target_size = size,\n                                       color_mode = 'grayscale',\n                                       class_mode = None,\n                                       batch_size = 10,\n                                       shuffle = False,\n                                       interpolation = 'bilinear')\n\npredictions = keras_model.predict(test_set)\npredictions = predictions.argmax(axis=-1)\nprint(\"Where 0 = 'Affected'\")\nprint(\"Where 1 = 'Healthy'\")\nprint(predictions)","b6c0f77c":"pred = []\n[pred.append('Healthy') if i == 1 else pred.append('Affected') for i in predictions]\nprint(pred)","88e0525e":"#%% OBTAINING PREDICTIONS OF THE FIRST BATCH\n    \nimages10 = [test_set[0][0],test_set[0][1],test_set[0][2],test_set[0][3],test_set[0][4],\n            test_set[0][5],test_set[0][6],test_set[0][7],test_set[0][8],test_set[0][9]]\nprediction10 = pred[0:9]\nfinal_pred = zip(images10,prediction10)","085044f4":"def pre_visualization(data, predictions):\n    \n    for image,pred in final_pred:\n        plt.imshow(image.reshape(224,224), cmap = 'gray')\n        plt.title(\"Model's Prediction: \" + str(pred))\n        plt.show()\n        \npre_visualization(images10,prediction10)","0faffa96":"**USING CAM VISUALIZATION**"}}