{"cell_type":{"9ee90516":"code","65d2891d":"code","9da9268c":"code","b4e0e36b":"code","7b7dc662":"code","e214f659":"code","692df3ae":"code","d037e46b":"code","0228b87b":"code","5b6014dd":"code","aaf727cd":"code","3f057573":"code","486e4522":"code","5563c3d5":"code","81ca59ce":"code","eac75079":"code","c98981ed":"code","d7b23956":"code","8d87be50":"code","976b50a6":"code","9752a2c3":"code","415b2ecf":"markdown","57858b17":"markdown","57213c20":"markdown","c71aaf0a":"markdown","502b6880":"markdown","4af58adb":"markdown","943ed858":"markdown","c2f78e61":"markdown","e976e22a":"markdown","7c601cfe":"markdown","31ede739":"markdown","8e282ad6":"markdown"},"source":{"9ee90516":"import os\nimport time\n\nimport pandas as pd\nimport numpy as np\nfrom pathlib import Path\n\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\nimport random\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import model_selection\nfrom sklearn.model_selection import KFold,StratifiedKFold, GroupKFold\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.initializers import RandomUniform","65d2891d":"class Config:\n    debug = False\n    competition = \"TPS_202111\"\n    seed = 42\n    n_folds = 5\n    batch_size = 1024\n    epochs = 200 # 25","9da9268c":"def seed_everything(seed=Config.seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)","b4e0e36b":"data_dir = Path('..\/input\/tabular-playground-series-nov-2021')","7b7dc662":"%%time\ntrain_df = pd.read_csv(data_dir \/ \"train.csv\", \n#                        nrows=10000\n                      )\ntest_df = pd.read_csv(data_dir \/ \"test.csv\",\n#                      nrows=1000\n                     )\nsample_submission = pd.read_csv(data_dir \/ \"sample_submission.csv\")\n\nprint(f\"train data: Rows={train_df.shape[0]}, Columns={train_df.shape[1]}\")\nprint(f\"test data : Rows={test_df.shape[0]}, Columns={test_df.shape[1]}\")","e214f659":"train_df.head()","692df3ae":"features = [col for col in train_df.columns if col not in ('id', 'target')]","d037e46b":"scaler = StandardScaler()\n\ntrain_df[features] = scaler.fit_transform(train_df[features])\ntest_df[features] = scaler.transform(test_df[features])","0228b87b":"y = train_df.target\n\ntest = test_df.drop(columns=[\"id\"], axis=1)\nX = train_df.drop(columns=[\"id\", \"target\"], axis=1)","5b6014dd":"def build_model01(x_shape):\n    \n    inputs = keras.Input(shape=x_shape)\n\n    x = keras.layers.Dense(64, activation=\"relu\")(inputs)\n    x = keras.layers.BatchNormalization()(x)\n    x = keras.layers.Dense(32, activation=\"relu\")(x)\n    x = keras.layers.BatchNormalization()(x)\n#     x = keras.layers.Dropout(0.1)(x)\n\n    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n    \n    model = keras.Model(inputs, outputs)\n    \n    roc_auc = tf.keras.metrics.AUC(name='roc_auc', curve='ROC')\n\n    model.compile(\n        loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[roc_auc]\n    )\n    return model","aaf727cd":"def build_model02_swish(x_shape):\n    inputs = keras.Input(shape=x_shape)\n\n    x = keras.layers.Dense(64, activation=\"swish\")(inputs)\n    x = keras.layers.BatchNormalization()(x)\n    x = keras.layers.Dense(32, activation=\"swish\")(x)\n    x = keras.layers.BatchNormalization()(x)\n#     x = keras.layers.Dropout(0.1)(x)\n\n    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n    \n    model = keras.Model(inputs, outputs)\n    \n    roc_auc = tf.keras.metrics.AUC(name='roc_auc', curve='ROC')\n\n    model.compile(\n        loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[roc_auc, \"acc\"]\n    )\n    return model","3f057573":"def build_model02_swish_dropout(x_shape, activation):\n    inputs = keras.Input(shape=x_shape)\n\n#    activation = \"swish\"\n#    x = keras.layers.Dense(256, activation=activation)(inputs)\n#    x = keras.layers.Dropout(0.3)(x)\n    x = keras.layers.Dense(128, activation=activation)(inputs)\n    x = keras.layers.Dropout(0.2)(x)\n    x = keras.layers.Dense(64, activation=activation)(x)\n    x = keras.layers.Dropout(0.2)(x)\n\n#    x = keras.layers.BatchNormalization()(x)\n    x = keras.layers.Dense(32, activation=\"swish\")(x)\n    x = keras.layers.Dropout(0.2)(x)\n\n    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n    \n    model = keras.Model(inputs, outputs)\n    \n    roc_auc = tf.keras.metrics.AUC(name='roc_auc', curve='ROC')\n\n    model.compile(\n        loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[roc_auc, \"acc\"]\n    )\n    return model","486e4522":"# Model03 + swish","5563c3d5":"def build_model03_swish(x_shape):\n    inputs = keras.Input(shape=x_shape)\n\n    x = keras.layers.Dense(96, activation=\"swish\")(inputs)\n    x = keras.layers.Dense(192, activation=\"swish\")(inputs)\n    x = keras.layers.BatchNormalization()(x)\n\n    x = keras.layers.Dense(128, activation=\"swish\")(inputs)\n    x = keras.layers.BatchNormalization()(x)\n    \n    x = keras.layers.Dense(32, activation=\"swish\")(x)\n    x = keras.layers.BatchNormalization()(x)\n\n    x = keras.layers.Dense(32, activation=\"swish\")(x)\n    x = keras.layers.BatchNormalization()(x)\n\n    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n    \n    model = keras.Model(inputs, outputs)\n    \n    roc_auc = tf.keras.metrics.AUC(name='roc_auc', curve='ROC')\n\n    model.compile(\n        loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[roc_auc, \"acc\"]\n    )\n    return model","81ca59ce":"model = build_model02_swish_dropout(x_shape=(X.shape[1],), activation=\"swish\")\nmodel.summary()","eac75079":"seed_everything()\n\nfinal_test_predictions = []\nfinal_valid_predictions = {}\nscores = []\nhistories = []\n\nkf = StratifiedKFold(n_splits=Config.n_folds, random_state=Config.seed, shuffle=True)\n\nfor fold, (train_idx, valid_idx) in enumerate(kf.split(X = X, y = y)):\n    print(10*\"=\", f\"Fold={fold+1}\", 10*\"=\")\n    start_time = time.time()\n\n    x_train = X.loc[train_idx, :]\n    x_valid = X.loc[valid_idx, :]\n    \n    y_train = y[train_idx]\n    y_valid = y[valid_idx]\n    \n    model = build_model02_swish_dropout(x_shape=(X.shape[1],), activation=\"swish\")\n\n    early_stopping_cb = keras.callbacks.EarlyStopping(monitor=\"val_auc\",\n                                                      mode='max',\n                                                      verbose=1,\n                                                      restore_best_weights=True,\n                                                      patience=3)\n    \n    lr_scheduler_cb = keras.callbacks.ReduceLROnPlateau(\n        monitor='val_loss', \n        factor=0.2,\n        patience=10,\n        mode='min'\n    )\n    \n    history = model.fit(X, y,\n              callbacks=[early_stopping_cb, lr_scheduler_cb],\n                  batch_size=Config.batch_size,\n              validation_data=(x_valid, y_valid),\n              epochs=Config.epochs\n             )\n    histories.append(history)\n\n    # Predictions for OOF\n    print(\"--- Predicting OOF ---\")\n    preds_valid = model.predict(x_valid)[:, -1]\n    final_valid_predictions.update(dict(zip(valid_idx, preds_valid)))\n    \n    auc = roc_auc_score(y_valid,  preds_valid)\n    scores.append(auc)\n\n    run_time = time.time() - start_time\n    \n    # Predictions for Test Data\n    print(\"--- Predicting Test Data ---\")\n    test_preds = model.predict(test_df[features])[:, -1]\n    final_test_predictions.append(test_preds)\n    print(f\"Fold={fold+1}, auc: {auc:.8f}, Run Time: {run_time:.2f}\")\n","c98981ed":"print(f\"Scores -> Adjusted: {np.mean(scores) - np.std(scores):.8f} , mean: {np.mean(scores):.8f}, std: {np.std(scores):.8f}\")","d7b23956":"def plot_history(history, metric, val_metric, title):\n\n    loss = history.history[metric]\n    val_loss = history.history[val_metric]\n\n    epoch = history.epoch\n\n    plt.figure(figsize=(11, 4))\n    \n    plt.plot(epoch, loss, label=metric, color=\"r\")\n    plt.plot(epoch, val_loss, label=val_metric, color=\"b\")\n\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.legend()\n    plt.grid(True)\n    plt.title(f\"Training and Validation {title}\")\n\n    plt.show()\n","8d87be50":"history.history.keys()","976b50a6":"for fold, h in enumerate(histories):\n    print(20*'=', f\"Fold = {fold+1}\", 20*'=')\n\n    plot_history(h, \"acc\", \"val_acc\", \"Accuracy\")\n\n    plot_history(h, \"loss\", \"val_loss\", \"Loss\")\n    plot_history(h, \"roc_auc\", \"val_roc_auc\", \"AUC\")\n\n    plt.show()\n","9752a2c3":"sample_submission['target'] = np.mean(np.column_stack(final_test_predictions), axis=1)\nsample_submission.to_csv(\"test_pred_2.csv\",index=None)\nsample_submission.to_csv(\"submission.csv\",index=None)\nsample_submission","415b2ecf":"# Cross Validation","57858b17":"My starting point for doing Tensorflow\/Keras for TPS Nov 2021\n\nMy first model is build_model01().  I will add additional models, keeping the original for comparison.\n\n# Versions\n\n- V15: Love working on iPad but easier t make mistakes.  See V14.\n- V14: Back to 3 hidden layers. \n- V12: batch_size=1024\n- V11: descrease batch_size=128 4 hidden layers. This failed\n\n- V4: build_model02_swish_dropout()\n- V3: build_model03_swish()\n  - Added lots of extra layers\n- V2: build_model02_swish()\n  - swish activation.  \n  - Added Charts\n  - 25 epochs\n- V1: Original - build_model01()\n\n# References\n\n- [[Tutorial] TensorFlow 2.x For Tabular Data](https:\/\/www.kaggle.com\/lucamassaron\/tutorial-tensorflow-2-x-for-tabular-data)\n- [PyTorch CV - EarlyStopping - LRScheduler](https:\/\/www.kaggle.com\/yusufmuhammedraji\/pytorch-cv-earlystopping-lrscheduler)\n- [TPS Nov 2021 pytorch lightning](https:\/\/www.kaggle.com\/hiro5299834\/tps-nov-2021-pytorch-lightning) LB: 0.74793","57213c20":"# Configuration","c71aaf0a":"# Submission File","502b6880":"# Feature Engineering","4af58adb":"# Models","943ed858":"# Standardize\/Normalize the Data","c2f78e61":"## First Keras Model\n\nKeeping it simple","e976e22a":"# Scores","7c601cfe":"# Model 2: Use swish activation","31ede739":"# History","8e282ad6":"# Extract Target and Drop Unused Columns"}}