{"cell_type":{"4fa4af94":"code","83c9b2d6":"code","1d5505af":"code","d315c3e1":"code","4bbddc4c":"code","8521b6c0":"code","c4eac4e7":"code","4b7ae84c":"code","dd1c781d":"code","1e69547d":"code","8fd7ad01":"code","be0b2771":"markdown","635dc0d1":"markdown","afe3672a":"markdown","75ecbcb9":"markdown","cabb9e88":"markdown","9ca9a6f7":"markdown","347eba74":"markdown"},"source":{"4fa4af94":"import pandas as pd\nmy_stars = pd.read_csv(\"..\/input\/learn-stars\/my_stars.csv\")","83c9b2d6":"my_stars = my_stars.loc[my_stars['proper'].isna()==False]\nmy_stars.head()","1d5505af":"# let's see how the stars are distributed by spectral types\nmy_stars['S_letter'].value_counts().plot.bar()","d315c3e1":"import numpy as np\nT_step={'O':[6000,84000],'B':[20000\/9,30000],'A':[2500\/9,10000], 'F':[1500\/9,7500], 'G':[1000\/9,6000], 'K':[1500\/9,5000], 'M':[1500\/9,3500]}\n\ndef set_temperature(row):\n    key = row['spect'][0]\n    if len(row['spect'])>1 and row['spect'][1].isdigit():\n        num = int(row['spect'][1])\n    else:\n        num = 5.5\n    return T_step[key][1]-num*T_step[key][0]\n    \n# let's add these values to a new column 'Temp'\nmy_stars['Temp'] = my_stars.apply(set_temperature, axis=1)","4bbddc4c":"# put it in the dictionary and after add new column 'Yerk'\nY_dct = {'Ia+':'hypergiant', '0':'hypergiant',\n'IIIa':'giant', 'IIIab':'giant', 'IIIb':'giant',\n'III':'giant', \n'IIa':'bright giant', 'IIb':'bright giant',\n'II':'bright giant', \n'IV':'subgiant',\n'Iab':'supergiant', 'Ib':'supergiant', 'Ia':'supergiant', \n'I':'supergiant', \n'VII':'white dwarf',\n'VI':'subdwarf',\n'Va':'dwarf', 'Vb':'dwarf',\n'V':'dwarf'}\n# V is the main-sequence\nimport re\ndef get_yerk_class(row):\n    s = row['spect'][2:]\n    for key in Y_dct:\n        y = bool(re.search(key,s))\n        if y:\n            return Y_dct[key]\n\nmy_stars['Yerk'] = my_stars.apply(get_yerk_class, axis=1)","8521b6c0":"# let's see how the stars are distributed by Yerkes luminosity classes\nmy_stars['Yerk'].value_counts().plot.bar()","c4eac4e7":"def rel_R (row):\n    return float(row['lum'])**(1\/2)*((6000\/row['Temp'])**2)\n# and again add new column in our dataframe\nmy_stars['Rad'] = my_stars.apply(rel_R, axis=1)","4b7ae84c":"# density plot and histogram of relative radius of stars\nimport seaborn as sns\nsns.distplot(my_stars['Rad'], hist=True, kde=True, \n             color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 4})","dd1c781d":"import math\ndef Log10(row):\n    return (math.log10(row['lum']))\nmy_stars['Log_lum'] = my_stars.apply(Log10,axis=1)","1e69547d":"# finally, we have kind of this data now\nmy_stars.head(10)","8fd7ad01":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nplt.rcParams.update({'font.size': 16})\n\n# let's designate our Sun with an nice yellow asterisk\nplt.scatter(6000, 1 ,marker='*',c='yellow', s=200)\n\nclasses = ['O' ,'B', 'A', 'F' ,'G' ,'K' ,'M']\n# select colors similar to stars and place them in the list\nc=['blueviolet','mediumslateblue','cornflowerblue','aliceblue','gold','orange','r']\nj=0\n# collect stars from different classes into separate dataframes\nSp_dict = {}\nfor cl in classes:\n    Sp_dict[cl] = pd.DataFrame(my_stars[my_stars['S_letter'] == cl])\n# This is a diagram for our selected stars, if you want to build it for a general occasion, just add slices, \n# as below we get a diagram for stars from 850 to 949 in a large dataset\n# x = Sp_dict[cl]['Temp'][850:950]\n# y = Sp_dict[cl]['Log_lum'][850:950]\n# plt.scatter(x, y ,s=Sp_dict[cl]['Rad'][850:950],c=c[j])\n    #there is a temperature limit 30000 for nice pic, but it can be removed as below in comment\n    #x = Sp_dict[cl]['Temp']\n    x = Sp_dict[cl]['Temp'].where(Sp_dict[cl]['Temp'] < 30000)\n    y = Sp_dict[cl]['Log_lum']\n    plt.scatter(x, y ,s=Sp_dict[cl]['Rad']*2,c=c[j])\n    j+=1\n\nax = plt.axes()\nax.set_xlabel('Temperature')\nax.set_ylabel('Lg(L)')\nax.set(facecolor = \"navy\")\nplt.xlim(reversed(plt.xlim()))\nprint('Have done!')","be0b2771":"Next, let's do [Yerkes spectral classification](https:\/\/en.wikipedia.org\/wiki\/Stellar_classification).","635dc0d1":"This notebook shows some transformations over a [HYG-database](https:\/\/github.com\/astronexus\/HYG-Database) to make this dataset more readable and compact. Only stars from the main (Harvard) spectral classification were have been selected. Some astronomical formulas are used to supplement the data and a Hertzsprung-Russell diagram is constructed. It is well suited for teaching the basics of astronomy and for amateur astronomers.\n\nTo begin with, I have left only the columns ['proper', 'dist', 'mag', 'absmag', 'spect', 'lum', 'bayer', 'con'] in the new dataset, thereby reducing the original number of columns from 25 to 8.\nA description of these columns is below (taken as the original dataset from [here](https:\/\/github.com\/astronexus\/HYG-Database)).\n\n**proper**: A common name for the star, such as \"Barnard's Star\" or \"Sirius\". \n\n**dist**: The star's distance in parsecs, the most common unit in astrometry. To convert parsecs to light years, multiplied by 3.262. \n\n**mag**: The star's apparent visual magnitude.\n\n**absmag**: The star's absolute visual magnitude (its apparent magnitude at a distance of 10 parsecs).\n\n**spect**: The star's spectral type, if known.\n\n**bayer**: The Bayer designation as a distinct value\n\n**con**: The standard constellation abbreviation\n\n**lum**: The star's luminosity as a multiple of Solar luminosity.\n\nThen throw out stars with an undefined spectral class and all that not fit the classes in the list ['O' ,'B', 'A', 'F' ,'G' ,'K' ,'M'] and add a new column - the letter of the spectral class.\n\nAnd so I get the file my_stars.csv.\nYou can find it at [this link](https:\/\/www.kaggle.com\/zhukovaekaterina\/simplified-hygdatabase).\n\n","afe3672a":"To get an idea of this study, let's select 142 very famous stars that have common used names. If you want to do research for all stars from the dataset, just comment out next line.","75ecbcb9":"Next, let's calculate the **approximate** temperature of each star. To do this, we will use the number after the letter of the spectral type in the 'spect' column. The hottest stars are marked with digit \"zero\" and the coldest are \"nine\". Therefore, knowing the [temperature limits](https:\/\/en.wikipedia.org\/wiki\/Stellar_classification), it is easy to calculate the approximate temperature step and then the temperature of the star. Only spectral type O is divided differently - from 4 to 9.5, so the calculation is slightly different.\n\nOf course, taking into consideration this approach, the stars will line up in arranged rows on the Hertzsprung-Russell diagram, but this gives an idea of the temperature of the star's atmosphere.\n\nWe also have stars in the dataset, whose spectral class is indicated only by a letter, and the number is lost. In this case, we take the average value n = 5.5.","cabb9e88":"Now we are ready to build a Hertzsprung-Russell diagram. But first, let's logarithm the luminosity to get a nicer picture.","9ca9a6f7":"So, we have got very approximate sizes of stars. If you open other databases, Wikipedia, or other sources, you will see different data on the luminosity of the same stars. Also, keep in mind that we have used a very rough calculation of the star's temperature - just one number in the spectral type designation. But this is a good qualitative calculation.","347eba74":"Let's calculate the approximate relative radius of the star (we will take as 1 the radius of our Sun) using the formula:\n![](https:\/\/ds05.infourok.ru\/uploads\/ex\/031b\/000e33ea-1d04b843\/1\/hello_html_m63161851.png)\nTake the temperature of the Sun 6000 K, the luminosity is contained in the column 'lum', so let's just do it!\n"}}