{"cell_type":{"9aa8cb9b":"code","8b028747":"code","619e7801":"code","ad59567b":"code","0a092448":"code","43611f7e":"code","8a0853fd":"code","2b15b6aa":"markdown","b24e4f2a":"markdown","2da869d0":"markdown","516a4708":"markdown","415ab12e":"markdown","30715a60":"markdown","8494e153":"markdown"},"source":{"9aa8cb9b":"import keras\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.optimizers import Adam\nfrom keras.datasets import cifar10\nfrom keras.models import Sequential \nfrom keras.callbacks import TensorBoard\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D,MaxPooling2D,AveragePooling2D,Dense,Flatten,Dropout\n","8b028747":"(X_train, y_train), (X_test, y_test) = cifar10.load_data() \nfor i in range(0,9):\n    plt.subplot(330+1+i)\n    plt.imshow(X_train[i])\nplt.show()","619e7801":"X_train=X_train.astype('float32')\nX_test=X_test.astype('float32')\n\n\ny_train=keras.utils.to_categorical(y_train,10)\ny_test=keras.utils.to_categorical(y_test,10)\n\nX_train=X_train\/255\nX_test=X_test\/255\n\nX_train.shape","ad59567b":"model=Sequential()\nmodel.add(Conv2D(64, (3, 3), input_shape=(\n    32, 32, 3), padding='valid'))\nmodel.add(Dropout(0.1))\nconvout1 = Activation('relu')\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu', padding='same'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),activation='relu', padding='same'))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),activation='relu', padding='same'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Dropout(0.4))\n\nff = Flatten()\nmodel.add(ff)\n\n\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n\nD = Dropout(0.4)\nmodel.add(D)\n\nmodel.add(Dense(10))\nmodel.add(Activation('softmax'))\n\nmodel.summary()","0a092448":"model.compile(loss='categorical_crossentropy',\n              optimizer=keras.optimizers.Adagrad(lr=0.021), \n              metrics=['accuracy'])","43611f7e":"history = model.fit(X_train, y_train,\n                    validation_split=0.2,\n                    batch_size=32,\n                    epochs=3,\n                    shuffle=True)","8a0853fd":"evaluation=model.evaluate(X_test,y_test)\nprint('Test score - CNN:', evaluation[0])\nprint('Test accuracy - CNN:', evaluation[1])","2b15b6aa":"# Training CIFAR10\n\n\n* 1. Introduction\n* 2. Data preparation\n* 3. Model Training (CNN)\n* 4. Feature extraction\n* 5. Evaluation","b24e4f2a":"# Importing the dataset","2da869d0":"# Defining the CNN","516a4708":"# Compiling the model","415ab12e":"# Importing the libraries","30715a60":"# Introduction\nIn this notebook, I used the CNN model from Keras to train it over the CIFAR10 dataset.","8494e153":"# Training the CNN"}}