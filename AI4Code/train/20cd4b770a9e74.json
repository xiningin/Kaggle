{"cell_type":{"148deecc":"code","d9cd9302":"code","6914beb9":"code","4c57fc35":"code","6e57e1af":"code","597c9127":"code","a91154b2":"code","888b4add":"code","88f05ba0":"code","54d0f249":"markdown"},"source":{"148deecc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# import os\n# import glob\n# import h5py\n# from PIL import Image\n# from keras.models import Sequential, Model\n# from keras.applications.vgg16 import preprocess_input\n# from keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\n# from keras.models import Sequential\n# from keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, SeparableConv2D\n# from keras.layers import GlobalMaxPooling2D\n# from keras.layers.normalization import BatchNormalization\n# from keras.models import Model\n# from keras.optimizers import Adam, SGD, RMSprop\n# from keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\n# from keras.utils import to_categorical\n# from keras import backend as K\n# from tensorflow.python.keras.applications.efficientnet import *\n# import numpy as np\n\n\nfrom tensorflow.keras.applications import EfficientNetB3\n","d9cd9302":"import tensorflow as tf\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection\n    print(\"Running on TPU \", tpu.cluster_spec().as_dict()[\"worker\"])\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError:\n    print(\"Not connected to a TPU runtime. Using CPU\/GPU strategy\")\n    strategy = tf.distribute.MirroredStrategy()","6914beb9":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import preprocess_input\n\nbatch_size = 64  #was 16\ntrain_images = '..\/input\/face-shape-dataset\/FaceShape Dataset\/training_set'\ntest_images = '..\/input\/face-shape-dataset\/FaceShape Dataset\/training_set'\n\nTrainDatagen = ImageDataGenerator(\n        preprocessing_function= preprocess_input,\n        horizontal_flip = False\n\n\n)\n\nTestDatagen = ImageDataGenerator(\n    preprocessing_function= preprocess_input\n\n)\n\ntrain_data = TrainDatagen.flow_from_directory(\n    train_images,\n    target_size = (224,224),\n    batch_size =batch_size,\n    class_mode = 'categorical'\n\n\n)\n\ntest_data = TestDatagen.flow_from_directory(\n    test_images,\n    target_size = (224,224),\n    batch_size = batch_size,\n    class_mode = 'categorical'\n)","4c57fc35":"from tensorflow.keras.layers.experimental import preprocessing\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\n\nimg_augmentation = Sequential(\n    [\n        preprocessing.RandomRotation(factor=0.15),\n        preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1),\n        preprocessing.RandomFlip(),\n        preprocessing.RandomContrast(factor=0.1),\n    ],\n    name=\"img_augmentation\",\n)","6e57e1af":"IMG_SIZE = 300\nNUM_CLASSES = 5\nwith strategy.scope():\n    inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\n    x = img_augmentation(inputs)\n    outputs = EfficientNetB3(include_top=True, weights=None, classes=NUM_CLASSES)(x)\n\n    model = tf.keras.Model(inputs, outputs)\n    model.compile(\n        optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n    )\n\nmodel.summary()\n","597c9127":"epochs = 40\nhist = model.fit(train_data, epochs=epochs, validation_data=test_data, verbose=2)","a91154b2":"import matplotlib.pyplot as plt\n\n\ndef plot_hist(hist):\n    plt.plot(hist.history[\"accuracy\"])\n    plt.plot(hist.history[\"val_accuracy\"])\n    plt.title(\"model accuracy\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epoch\")\n    plt.legend([\"train\", \"validation\"], loc=\"upper left\")\n    plt.show()\n\n\nplot_hist(hist)","888b4add":"model.save('face_shape_classifier.h5')","88f05ba0":"model.save_weights('face_shape_model_weights.h5')","54d0f249":"creating the generators"}}