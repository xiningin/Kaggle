{"cell_type":{"ef4549c8":"code","e228f84e":"code","5d470281":"code","e36b9617":"code","22090e39":"code","8ccf8523":"code","0f0a1320":"code","0052527e":"code","cf3a67ad":"code","c1b936a2":"code","dab503ad":"code","a57a08ec":"code","d4175c4f":"code","2b9e66cb":"code","2b3e8484":"code","4399dfc9":"code","6ff185b7":"code","c62e4e9f":"code","63f5b609":"code","16cd37af":"markdown"},"source":{"ef4549c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","e228f84e":"world = pd.read_csv(\"..\/input\/countries of the world.csv\")","5d470281":"world.head()","e36b9617":"world.info()","22090e39":"world.fillna(0.0, inplace = True)","8ccf8523":"world.head()","0f0a1320":"def convert_currency(val):\n    new_val = val.replace(',','.')\n    return float(new_val)","0052527e":"world[\"Infant mortality (per 1000 births)\"] = world[\"Infant mortality (per 1000 births)\"].astype(str)\nworld[\"Infant mortality (per 1000 births)\"] = world[\"Infant mortality (per 1000 births)\"].apply(convert_currency)\narea_list = list(world['Region'].unique())\nmortality_ratio = []\nfor i in area_list:\n    x = world[world['Region']==i]\n    mortality_rate = sum(x[\"Infant mortality (per 1000 births)\"])\/len(x)\n    mortality_ratio.append(mortality_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_mortality_ratio':mortality_ratio})\nnew_index = (data['area_mortality_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)","cf3a67ad":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_mortality_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('Regions')\nplt.ylabel('Mortality Birth Rate')\nplt.title('Mortality Birth Rate Given States')","c1b936a2":"world['Net migration'] = world['Net migration'].astype(str)\nworld['Net migration'] = world['Net migration'].apply(convert_currency)\nworld['Net migration']","dab503ad":"country_list = list(world['Country'].unique())\nmigration_ratio = []\nfor i in country_list:\n    x = world[world['Country']==i]\n    migration_rate = sum(x[\"Net migration\"])\/len(x)\n    migration_ratio.append(migration_rate)\ndata2 = pd.DataFrame({'country_list': country_list,'country_migration_ratio':migration_ratio})\nnew_index = (data2['country_migration_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data2.reindex(new_index)","a57a08ec":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['country_list'][:20], y=sorted_data2['country_migration_ratio'][:20])\nplt.xticks(rotation= 45)\nplt.xlabel('Countries')\nplt.ylabel('Migration Rate')\nplt.title('Migration Birth Rate Given Countries')","d4175c4f":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['country_list'][-20:], y=sorted_data2['country_migration_ratio'][-20:])\nplt.xticks(rotation= 45)\nplt.xlabel('Countries')\nplt.ylabel('Migration Rate')\nplt.title('Migration Birth Rate Given Countries')","2b9e66cb":"world.columns","2b3e8484":"world[\"Deathrate\"] = world[\"Deathrate\"].astype(str)\nworld[\"Deathrate\"] = world[\"Deathrate\"].apply(convert_currency)\nworld[\"GDP ($ per capita)\"] = world[\"GDP ($ per capita)\"].astype(str)\nworld[\"GDP ($ per capita)\"] = world[\"GDP ($ per capita)\"].apply(convert_currency)\nregion_list = list(world['Region'].unique())\ndeathrate = []\nGDP = []\nfor i in region_list:\n    x = world[world['Region']==i]\n    deathrate1 = sum(x[\"Deathrate\"])\/len(x)\n    gdp = sum(x[\"GDP ($ per capita)\"])\/len(x)\n    deathrate.append(deathrate1)\n    GDP.append(gdp)\ndata3 = pd.DataFrame({'region_list': region_list,'deathrate':deathrate})\nnew_index1 = (data3['deathrate'].sort_values(ascending=False)).index.values\nsorted_data3 = data3.reindex(new_index1)\ndata4 = pd.DataFrame({'region_list': region_list,'GDP':GDP})\nnew_index2 = (data4['GDP'].sort_values(ascending=False)).index.values\nsorted_data4 = data4.reindex(new_index2)\nsorted_data3['deathrate'] = sorted_data3['deathrate']\/max(sorted_data3['deathrate'])\nsorted_data4['GDP'] = sorted_data4['GDP']\/max(sorted_data4['GDP'])\ndata_new = pd.concat([sorted_data3,sorted_data4['GDP']],axis = 1)\ndata_new.sort_values('deathrate',inplace=True)\n","4399dfc9":"data_new","6ff185b7":"f,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='region_list',y='deathrate',data=data_new,color='lime',alpha=0.8)\nsns.pointplot(x='region_list',y='GDP',data=data_new,color='red',alpha=0.8)\nplt.text(40,0.6,'GDP',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'deathrate',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('Regions',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Deathrate  VS  GDP',fontsize = 20,color='blue')\nplt.grid()","c62e4e9f":"data_new.corr()","63f5b609":"g = sns.jointplot(data_new.deathrate, data_new.GDP, kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()","16cd37af":"Alttaki kod blo\u011fu sonucu \u00e7izilen grafi\u011fi bir t\u00fcrl\u00fc b\u00fcy\u00fck hale getiremedim bu konuda da yard\u0131m ederseniz \u00e7ok sevirim. Te\u015fekk\u00fcrler"}}