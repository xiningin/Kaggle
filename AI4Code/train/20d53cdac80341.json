{"cell_type":{"f3a89f7a":"code","84f5b07b":"code","fd6a826d":"code","1f1fe618":"code","f8d37403":"code","f5187ec4":"code","347989db":"code","2541d955":"code","28766b8f":"code","e91aedee":"code","53f496bf":"code","bc5ab71e":"code","894eaa1c":"code","154b48b6":"code","5ec82b52":"code","131d87a6":"code","62362f0b":"code","23427878":"code","7b6c9628":"code","a09a34e4":"markdown","2d829cea":"markdown","66704ec5":"markdown","38672dcb":"markdown","76029967":"markdown"},"source":{"f3a89f7a":"################## \uc2dc\ud5d8 \uc548\ub0b4 \ubb38\uad6c \ubc0f \ucf54\ub4dc ##################\n# \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n# \uc608\uc2dc) print(df.head())\n\n# getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n# \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n# \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\nimport pandas as pd\nX_test = pd.read_csv(\"..\/input\/hr-data\/X_test.csv\")\nX_train = pd.read_csv(\"..\/input\/hr-data\/X_train.csv\")\ny_train = pd.read_csv(\"..\/input\/hr-data\/y_train.csv\")\n\n# \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n# \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n# \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n# pd.DataFrame({'enrollee_id': X_test.enrollee_id, 'target': pred}).to_csv('003000000.csv', index=False)\n\n","84f5b07b":"X_train.head()","fd6a826d":"X_train.info()","1f1fe618":"# \ub3d9\uc77c\ud55c \uae30\uc900 \uc804\ucc98\ub9ac\ub97c \uc704\ud558\uc5ec train test \ubcd1\ud569\nX_train['tt'] = 'train'\nX_test['tt'] = 'test'\nX_union = pd.concat([X_train,X_test]).reset_index()\nX_union.info()","f8d37403":"#\uacb0\uce21\uce58 \ucc98\ub9ac\nX_union.isnull().sum()","f5187ec4":"X_union.describe(include = object)","347989db":"# gender, company_size, company_type, major_discipline \uacb0\uce21\uce58 \uacfc\ub2e4\ud558\uc5ec drop\nX_union = X_union.drop(['gender', 'company_size', 'company_type', 'major_discipline'], axis = 1)\nX_union.isnull().sum()","2541d955":"print(X_union.city.value_counts())\nprint('='*30)\nprint(X_union.relevent_experience.value_counts())\nprint('='*30)\nprint(X_union.enrolled_university.value_counts())\nprint('='*30)\nprint(X_union.education_level.value_counts())\nprint('='*30)\nprint(X_union.experience.value_counts())\nprint('='*30)\nprint(X_union.last_new_job.value_counts())\nprint('='*30)","28766b8f":"X_union = X_union.drop(['city'], axis = 1)\nX_union.rename(columns={\"relevent_experience\": \"rel_exp\", \"enrolled_university\": \"univ\", \"education_level\": \"edu_lv\"\n                       , \"experience\": \"exp\", \"last_new_job\" : \"last\", \"city_development_index\" : \"ct_idx\"}, inplace = True)\nX_union['rel_exp'] = X_union['rel_exp'].apply(lambda x: 'y' if x =='Has relevent experience' \n                                              else 'n' if x == 'No relevent experience' \n                                              else x)\nX_union['univ'] = X_union['univ'].apply(lambda x: 'no' if x =='no_enrollment' \n                                              else 'full' if x == 'Full time course' \n                                              else 'part' if x == 'Part time course' \n                                              else x)\n# Graduate\/Masters\/High School\/Phd\/Primary School > grad\/mas\/high\/phd\/pri\nX_union['edu_lv'] = X_union['edu_lv'].apply(lambda x: 'grad' if x =='Graduate' \n                                              else 'mas' if x == 'Masters' \n                                              else 'high' if x == 'High School' \n                                              else 'phd' if x == 'Phd' \n                                              else 'pri' if x == 'Primary School' \n                                              else x)\n# \uac12 \uc911 <1 = 0, >20 = 21 \ubcc0\uacbd, astype int32 \ubcc0\ud658, 5\ub144\ub2e8\uc704\ub85c pd.cut\n# nan\uac12\ub54c\ubb38\uc5d0 \ud0c0\uc785\ubcc0\uacbd\uc774 \uc548\ub418\ubbc0\ub85c \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\nX_union['exp'] = X_union['exp'].fillna('>20')\nX_union['exp'] = X_union['exp'].apply(lambda x: '0' if x =='<1'\n                                      else '21' if x == '>20'\n                                      else x).astype('int32')\nX_union['exp'] = pd.cut(X_union['exp'],4)\n# \uceec\ub7fc\uba85 last, >4 = 5, never = 0, astype int32 \ubcc0\ud658\n# nan\uac12\ub54c\ubb38\uc5d0 \ud0c0\uc785\ubcc0\uacbd\uc774 \uc548\ub418\ubbc0\ub85c \ucd5c\ube48\uac12 1\ub85c \ucc44\uc6b0\uae30\nX_union['last'] = X_union['last'].fillna('1')\nX_union['last'] = X_union['last'].apply(lambda x: '0' if x =='never'\n                                      else '5' if x == '>4'\n                                      else x).astype('int32')","e91aedee":"X_union.info()","53f496bf":"print(X_union['univ'].value_counts())\nprint('='*30)\nprint(X_union['edu_lv'].value_counts())","bc5ab71e":"#\ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6cc\uc11c \uacb0\uce21\uce58 \ucc98\ub9ac \ub9c8\ubb34\ub9ac\nX_union['univ'] = X_union['univ'].fillna('no')\nX_union['edu_lv'] = X_union['edu_lv'].fillna('grad')","894eaa1c":"# object \ub354\ubbf8\ubcc0\uc218\ud654\nX_union = pd.get_dummies(X_union)\nX_union.info()","154b48b6":"#test, train \uc7ac\ubd84\ub9ac\nX_train = X_union.loc[X_union['tt_test'] == 0].reset_index().drop(['tt_test','tt_train'], axis = 1)\nX_test = X_union.loc[X_union['tt_test'] == 1].reset_index().drop(['tt_test','tt_train'], axis = 1)\n\n#\uacb0\uacfc\uc81c\ucd9c\uc2dc \ud65c\uc6a9\uc744 \uc704\ud55c id\uceec\ub7fc \ubd84\ub9ac\nX_id = X_test['enrollee_id']","5ec82b52":"# \ub370\uc774\ud130 \ud45c\uc900\ud654\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","131d87a6":"from sklearn.model_selection import train_test_split\nX_train, X_train2, y_train, y_train2 = train_test_split(X_train, y_train['target'], test_size = 0.2)","62362f0b":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators = 100)\nmodel.fit(X_train, y_train)\nprint(model.score(X_train, y_train))\nprint(model.score(X_train2, y_train2))","23427878":"pred = model.predict(X_test)\npd.DataFrame({'enrollee_id': X_id, 'target': pred}).to_csv('003000000.csv', index=False)","7b6c9628":"# \ucc44\uc810(\uc544\ub798 \uc8fc\uc11d \ud480\uace0 \uccb4\uc810)\nimport pickle\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nwith open( \"..\/input\/hr-data\/answer.pickle\", \"rb\" ) as file:\n    ans = pickle.load(file)\n    ans = pd.DataFrame(ans)\nprint(roc_auc_score(ans['target'], pred))","a09a34e4":"## \ucd5c\uc885\uc81c\ucd9c\uc6a9 \uc608\uce21","2d829cea":"## \ucc44\uc810","66704ec5":"## \ubaa8\uc758\uace0\uc0ac\n* \uc774\uc9c4 \ubd84\ub958\n* \uc774\uc9c1\ud560 \uc0ac\ub78c\uc744 \ucc3e\ub294 \ubb38\uc81c(\uc9c0\uc6d0\uc790\uac00 \uc77c\ud560 \ud655\ub960)\n\n## \ud3c9\uac00\n* \ud655\ub960\uac12 \uc608\uce21\n* \ud3c9\uac00 : ROC-AUC (\uc774\uc9c1\ud560 \ud655\ub960)\n* \uc608\uce21 : target: 0 \u2013 \uc774\uc9c1\ud560 \ub9c8\uc74c \uc5c6\uc74c, 1 \u2013 \uc774\uc9c1\ud560 \ud68c\uc0ac \ucc3e\uace0 \uc788\uc74c","38672dcb":"## object \uc804\ucc98\ub9ac \ubc29\ud5a5\n* city : drop\n* relevent_experience : \uceec\ub7fc\uba85 rel_exp, \uac12 (Has\/No) relevent experience > y\/n \n* enrolled_university : \uceec\ub7fc\uba85 univ, \uac12 no\/full\/part\n* education_level : \uceec\ub7fc\uba85 edu_lv, \uac12 Graduate\/Masters\/High School\/Phd\/Primary School > grad\/mas\/high\/phd\/pri\n* experience : \uceec\ub7fc\uba85 exp, \uac12 \uc911 <1 = 0, >20 = 21 \ubcc0\uacbd, astype int32 \ubcc0\ud658, 5\ub144\ub2e8\uc704\ub85c pd.cut\n* last_new_job : \uceec\ub7fc\uba85 last, >4 = 5, never = 0, astype int32 \ubcc0\ud658","76029967":"## \uacb0\uce21\uce58 & object \ucc98\ub9ac"}}