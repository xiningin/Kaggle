{"cell_type":{"d777d396":"code","2615594e":"code","3498c236":"code","819c173e":"code","224fff96":"code","6ad12e73":"code","0c8d7c5c":"code","79209594":"code","c0093bf0":"code","0a1a2fa9":"code","028a36c0":"code","7897d1e1":"code","feaa6063":"code","0ea72021":"code","7d9c2363":"code","ce06e38a":"code","a39908c2":"markdown","578510b1":"markdown","8881602f":"markdown","74b10d90":"markdown","0bff30b8":"markdown","9cfddad1":"markdown","13b754af":"markdown","1515f5d3":"markdown","d0958acd":"markdown","3bc3bbaa":"markdown"},"source":{"d777d396":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2615594e":"# \ud604\uc7ac opencv \ucf54\ub4dc\ub294 3.4.2.17 \uc5d0 \ub9de\ucdb0\uc11c \uc791\uc131\ub418\uc5b4 \uc788\uc5b4 \ubc84\uc804\uc744 \ub9de\ucd94\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4. \n! yes | pip3 uninstall opencv-python\n! yes | pip3 uninstall opencv-contrib-python\n! yes | pip3 install opencv-python==3.4.2.17\n! yes | pip3 install opencv-contrib-python==3.4.2.17","3498c236":"import cv2\ncv2.__version__","819c173e":"# OpenCV\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 Import\ud55c\ub2e4.\nimport cv2\n\nimport os\nimport numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\nimport pandas as pd\nfrom tqdm import tqdm\nimport scipy.cluster.vq as vq","224fff96":"# -------------------------------------\n# [Empty Module #1] \ud559\uc2b5\ub370\uc774\ud130, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \n# -------------------------------------\n\n\n# -------------------------------------\n# loadtrain(dataroottrain): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec \ud559\uc2b5\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# -------------------------------------\n# \ubaa9\uc801: \ud559\uc2b5\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n# \uc785\ub825\uc778\uc790: dataroottrain - \ud559\uc2b5 \ub370\uc774\ud130 \uacbd\ub85c\n# \ucd9c\ub825\uc778\uc790: traindata - \ud559\uc2b5\ub370\uc774\ud130(2D img)\n#          trainlabel - \ud559\uc2b5\ub370\uc774\ud130\uc758 \ub77c\ubca8 \n# -------------------------------------\n\ndef loadtrain(dataroottrain):\n    trainlabel=[]\n    traindata=[]\n    for classname in tqdm(os.listdir(dataroottrain)):\n        # ------------------------------------------------------------\n        # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778  (1)\n        # ------------------------------------------------------------\n        # if classname \uc774 \"BACKGROUND_Google\" \uc774\ub77c\uba74 \n        #   trainlabel\uc5d0 102\uac00 \ud604\uc7ac \ud074\ub798\uc2a4\uc758 Index\n        # else\n        #   classname \uc744 df_data \uc18d\uc5d0\uc11c \ucc3e\uc740 \ub2e4\uc74c \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 index\uac00 \ud604\uc7ac \ud074\ub798\uc2a4\uc758 Index \n        # ------------------------------------------------------------\n        # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n        \n        for csvname in os.listdir(os.path.join(dataroottrain,classname)):\n            # ------------------------------------------------------------\n            # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 (2)\n            # ------------------------------------------------------------\n            # 1) trainlabel\uc5d0 \ud604\uc7ac \ud074\ub798\uc2a4 index\ub97c append\n            # 2) csvpath= dataroottrain -> classname -> csvname Tip) os.path.join\uc744 \uc0ac\uc6a9\ud574 csvpath \uc124\uc815 \n            # 3) pd.read_csv\ub97c \uc774\uc6a9\ud574 csv \uc77d\uc5b4\uc628\ud6c4 np.array\ub97c \uc0ac\uc6a9\ud574 numpy \ubcc0\uc218\ub85c \ubcc0\ud658\n            # 4) csv\ub97c \uc77d\uc73c\uba74 matrix\ub294 \ud604\uc7ac [256*256*3,] \ucc28\uc6d0\uc784 \uc774\ub97c [256,256,3] \uc73c\ub85c \ubcc0\uacbd Tip) np.reshape \ud568\uc218 \uc0ac\uc6a9\n            # 5) np.uint8\uc744 \uc774\uc6a9\ud574 \ud0c0\uc785\ubcc0\uacbd\n            # 6) cv2.cvtColor \ub97c \uc0ac\uc6a9\ud574 \uc601\uc0c1\uc758 \ucc28\uc6d0\uc744 \ubcc0\uacbd Tip:)cv2.COLOR_BGR2GRAY\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9 \n            # 7) traindata\uc5d0 \ubcc0\uacbd\ub41c \ub370\uc774\ud130 append\n            # ------------------------------------------------------------\n            # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n\n    return traindata,trainlabel\n\n\n\n# -------------------------------------\n# loadtest(dataroottest): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec \ub370\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# -------------------------------------\n# \ubaa9\uc801: \ud14c\uc2a4\ud2b8\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n# \uc785\ub825\uc778\uc790: dataroottest - \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uacbd\ub85c\n# \ucd9c\ub825\uc778\uc790: testdata - \ud14c\uc2a4\ud2b8\ub370\uc774\ud130(2D img)\n#          testlabel - \ud14c\uc2a4\ud2b8\ub370\uc774\ud130\uc758 \ud30c\uc77c \uc81c\ubaa9  \n# -------------------------------------\ndef loadtest(dataroottest):\n    testlabel=[]\n    testdata=[]\n    testsort=sorted(os.listdir(dataroottest))\n    \n    for csvname in tqdm(testsort):\n        # ------------------------------------------------------------\n        # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\n        # ------------------------------------------------------------\n        # 1) csvpath= dataroottest -> csvname Tip) os.path.join\uc744 \uc0ac\uc6a9\ud574 csvpath \uc124\uc815 \n        # 2) pd.read_csv\ub97c \uc774\uc6a9\ud574 csv \uc77d\uc5b4\uc628\ud6c4 np.array\ub97c \uc0ac\uc6a9\ud574 numpy \ubcc0\uc218\ub85c \ubcc0\ud658\n        # 3) csv\ub97c \uc77d\uc73c\uba74 matrix\ub294 \ud604\uc7ac [256*256*3,] \ucc28\uc6d0\uc784 \uc774\ub97c [256,256,3] \uc73c\ub85c \ubcc0\uacbd Tip) np.reshape \ud568\uc218 \uc0ac\uc6a9\n        # 4) np.uint8\uc744 \uc774\uc6a9\ud574 \ud0c0\uc785\ubcc0\uacbd\n        # 5) cv2.cvtColor \ub97c \uc0ac\uc6a9\ud574 \uc601\uc0c1\uc758 \ucc28\uc6d0\uc744 \ubcc0\uacbd Tip:)cv2.COLOR_BGR2GRAY\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9 \n        # 6) testdata\uc5d0 \ubcc0\uacbd\ub41c \ub370\uc774\ud130 append\n        # ------------------------------------------------------------\n        # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c   \n        \n        testlabel.append(csvname)\n        \n    return testdata,testlabel\n","6ad12e73":"# -------------------------------------\n# [Empty Module #2] \ud2b9\uc9d5\uc810 \ucd94\ucd9c\ud558\uae30 (Dense-SIFT \uc0ac\uc6a9)\n# -------------------------------------\n\n\n# -------------------------------------\n# extract_sift_descriptors(img): <= \uc218\uc815\ud558\uc9c0 \ub9d0\uace0 Dense-SIFT\ub97c \uc704\ud574 \ucc38\uace0\ud558\uc138\uc694\n# -------------------------------------\n# \ubaa9\uc801: SIFT \ud2b9\uc9d5\uc810 \ucd94\ucd9c\uc744 \uc704\ud55c \ud568\uc218\n# \uc785\ub825\uc778\uc790: img - 2D \ud751\ubc31 \uc601\uc0c1 [256,256]\n# \ucd9c\ub825\uc778\uc790: descriptors - SIFT \uae30\uc220\uc790\n# -------------------------------------\ndef extract_sift_descriptors(img):\n    \n    # SIFT \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n    sift = cv2.xfeatures2d.SIFT_create()\n    # SIFT\ub97c \uc774\uc6a9\ud558\uc5ec \ud2b9\uc9d5\uc810 \uc704\uce58 \ucd94\ucd9c\n    keypoints = sift.detect(img,None)\n    # img\uc758 type\uc744 uint8\ub85c \ubcc0\ud658 \n    img=np.uint8(img)\n    # SIFT\ub97c \uc774\uc6a9\ud558\uc5ec \ucd94\ucd9c\ub41c \uc704\uce58 \uc8fc\ubcc0 \uc815\ubcf4\uc778 \uae30\uc220\uc790 \ucd94\ucd9c\n    _,descriptors = sift.compute(img,keypoints)\n    # SIFT \uae30\uc220\uc790 \ubc18\ud658\n    return descriptors\n\n\n# -------------------------------------\n# extract_DenseSift_descriptors(img): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec Dense-SIFT\ub97c \ucd94\ucd9c\ud558\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# -------------------------------------\n# \ubaa9\uc801: Dense-SIFT \ud2b9\uc9d5\uc810 \ucd94\ucd9c\uc744 \uc704\ud55c \ud568\uc218\n# \uc785\ub825\uc778\uc790: img - 2D \ud751\ubc31 \uc601\uc0c1 [256,256]\n# \ucd9c\ub825\uc778\uc790: descriptors - Dense-SIFT \uae30\uc220\uc790\n# -------------------------------------\ndef extract_DenseSift_descriptors(img):\n\n    # ------------------------------------------------------------\n    # 1) SIFT \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n\n    \n    \n    # SIFT \uae30\uc220\uc790\ub97c \ucd94\ucd9c\ud558\uace0 \uc2f6\uc740 \ud2b9\uc9d5\uc810 \uc704\uce58 \uc815\uc758\ud558\uae30\n    keypoints = [cv2.KeyPoint(x, y, DSIFT_STEP_SIZE)\n            for y in range(0, img.shape[0], DSIFT_STEP_SIZE)\n                for x in range(0, img.shape[1], DSIFT_STEP_SIZE)]\n    \n\n    # ------------------------------------------------------------\n    # 2) SIFT\ub97c \uc774\uc6a9\ud558\uc5ec Dense SIFT\ub97c \ucd94\ucd9c\ud558\uc2dc\uc624. (\ub2e8, Keypoints\ub294 Dense-SIFT\uc758 \uc0ac\uc804\uc815\uc758\ub41c \uc704\uce58 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\uc74c)\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n\n    \n    \n    \n    return descriptors\n","0c8d7c5c":"# ------------------------------------------------------------\n# [Empty Module #3] \ucf54\ub4dc\ubd81 \uc0dd\uc131\ud558\uae30 (KMeans \uc0ac\uc6a9)\n# ------------------------------------------------------------\n\n\n\n# ------------------------------------------------------------\n# build_codebook(X, voc_size): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec build_codebook\ub97c \ub9cc\ub4dc\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# ------------------------------------------------------------\n# \ubaa9\uc801: Visual Words (\uc989, codebook)\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ud568\uc218\n#\n# \uc785\ub825\uc778\uc790: X - \uad70\uc9d1\ud654 \ud558\ub824\ub294 \ub370\uc774\ud130 [3060,1024,128]\n#         voc_size - \uad70\uc9d1\ud654 \ud558\ub824\ub294 \uc13c\ud130(Cluster) \uc218, \uc989 Kmeans\uc758 K\n#\n# \ucd9c\ub825\uc778\uc790:  Kmeans \ub0b4\uc7a5 \ubcc0\uc218\uc778 cluster_center\ub97c \ubc18\ud658\n# ------------------------------------------------------------\ndef build_codebook(X, voc_size):\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 \n    # ------------------------------------------------------------\n    # 1) X\ub294 [3060*1024,128]\uc758 \ud615\ud0dc\ub85c reshape \ud55c\ub2e4 **\n    # 2) n_clusters\ub97c voc_size\ub85c \uc8fc\uace0 KMeans\ub97c \uc815\uc758\ud55c\ub2e4\n    # 3) KMeans\uc758 fit \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 data\uc758 cluster-center\ub97c \uad6c\ud55c\ub2e4\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n    \n    \n\n    \n    return xxx # xxx \ub294 \uc791\uc131\uc790\uac00 \ubcc0\uacbd\ud574\uc57c \ud568\n","79209594":"# ------------------------------------------------------------\n# [Empty Module #4] \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uc0dd\uc131\ud558\uae30 (vq,np.histogram \uc0ac\uc6a9)\n# ------------------------------------------------------------\n\n# ------------------------------------------------------------\n# BoW(descriptor, codebook): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec histogram\uc744 \ub9cc\ub4dc\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# ------------------------------------------------------------\n# \ubaa9\uc801: Histogram (\uc989, \ube48\ub3c4\uc218)\ub97c \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ud568\uc218\n#\n# \uc785\ub825\uc778\uc790: descriptor - \ud55c \uc601\uc0c1\uc758 \ud2b9\uc9d5\uc810 Matrix [1024,128] \n#         codebook - \ube44\uad50\ud558\uae30 \uc704\ud55c Visual word [200,128]\n#\n# \ucd9c\ub825\uc778\uc790:  feature\uc758 codebook \ube48\ub3c4\uc218( \uc989 histogram)\uc744 flatten\ud55c Matrix\n\n# ------------------------------------------------------------\ndef BoW( descriptor, codebook):\n    descriptor=descriptor.tolist()\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 \n    # ------------------------------------------------------------\n    # 1) scipy.cluster.vq \ub97c \uc0ac\uc6a9\ud574 \uac01 Dense SIFT(descriptor)\uc640 \uc720\uc0ac\ud55c codebook\uc758 Index\ub97c \ubc18\ud658 \ubc1b\uc544 \uc0ac\uc6a9\n    # 2) \uad6c\ud55c Index\ub4e4 histogram\uc744  np.histogram \uc744 \uc0ac\uc6a9\ud574 histogram\uc744 \uad6c\ud55c\ub2e4\n    # 2-Tip) np.histogram \uc0ac\uc6a9\uc2dc bins=range(codebook.shape[0] + 1), normed=True \ub85c \uc124\uc815\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n\n    \n    \n    \n    \n    return xxx # xxx\ub294 \uc791\uc131\uc790\uac00 \ubcc0\uacbd\ud574\uc57c \ud568\n","c0093bf0":"# ------------------------------------------------------------\n# [Empty Module #5] SVM \ud559\uc2b5 \ubc0f \uc2e4\ud5d8\ub370\uc774\ud130 classification  (SVM \uc0ac\uc6a9)\n# ------------------------------------------------------------\n\n# ------------------------------------------------------------\n# SVM(train_data,train_label, test_data): <= \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uc5ec test_data\ub97c classification\ud558\ub294 \ucf54\ub4dc\ub97c \uc644\uc131\ud558\uc138\uc694\n# ------------------------------------------------------------\n# \ubaa9\uc801: SVM \ud559\uc2b5 \ubc0f test_data\uc758 class\ub97c \ubd84\ub958\ud558\ub294 \ud568\uc218 \n#\n# \uc785\ub825\uc778\uc790: train_data - \ubaa8\ub4e0 \ud559\uc2b5 \uc601\uc0c1\uc758 BoW features(histogram) [3060,200] \n#         train_label - \ubaa8\ub4e0 \ud559\uc2b5 \uc601\uc0c1\uc758 class [3060,1]\n#         test_data   - \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8 \uc601\uc0c1\uc758 BoW features(histogram) [1712,200]\n# \ucd9c\ub825\uc778\uc790: test_data\uc744 SVM\uc73c\ub85c \ubd84\ub958\ud55c \uacb0\uacfc \n\n# ------------------------------------------------------------\ndef SVM(train_data,train_label,test_data):\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778 \n    # ------------------------------------------------------------\n    # 1) svm.SVC() \ub97c \uc0ac\uc6a9\ud574 SVM \uc815\uc758 \n    # 2) SVM\uacfc \ud30c\ub77c\ubbf8\ud130 {'kernel':('linear', 'rbf'), 'C':[0.1 ,1, 10, 100, 1000]} \ub97c \uc0ac\uc6a9\ud574 GridSearchCV() \uc815\uc758\n    # 3) \uc815\uc758\ud55c GridSearchCV\uc758 \ud568\uc218\uc778 fit\uc744 \uc0ac\uc6a9\ud574 train_data \ud559\uc2b5 \n    # 4) \uc815\uc758\ud55c GridSearchCV\uc758 predict \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 test_data \uc5d0 \ub300\ud55c \uc815\ub2f5\uc744 \ucd94\ub860\n    # ------------------------------------------------------------\n    # \uad6c\ud604 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucc38\uace0\ud558\uc5ec \uc544\ub798\ucabd\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00\ud558\ub77c\n    \n    return predict","0a1a2fa9":"#\ud604\uc7ac \uacbd\ub85c \uc800\uc7a5 \ndataroot=\"\/kaggle\/input\/2020mltermprojectbovw\/\"\n# Class \uc774\ub984\uacfc Index\uac00 \ub9f5\ud551\ub418\uc5b4 \uc788\ub294 csv \uacbd\ub85c \uc800\uc7a5 \ncsvpath=os.path.join(dataroot,\"Label2Names.csv\")\n# \uc704 csv \uacbd\ub85c\ub85c csv \uc77d\uc5b4\uc624\uae30 \ndf_data=pd.read_csv(csvpath,header=None)\n\n# \ud559\uc2b5 \ub370\uc774\ud130 \uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uacbd\ub85c \uc800\uc7a5 \ndataroottrain=os.path.join(dataroot,\"train_csv_v2\")\ndataroottest=os.path.join(dataroot,\"test_csv_v2\")","028a36c0":"# CSV\ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 Img \ub370\uc774\ud130 \uc77d\uc5b4\uc624\uae30 (\ud559\uc2b5\ub370\uc774\ud130, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130)\ntrain_data,train_label=loadtrain(dataroottrain)\ntest_data,test_label=loadtest(dataroottest)   \n\n# numpy \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658 \ntrain_data=np.array(train_data)\ntrain_label=np.array(train_label)\ntest_data=np.array(test_data)\ntest_label=np.array(test_label)","7897d1e1":"# Dense SIFT\uc758 Keypoint \uac04\uaca9 \uc124\uc815 \nDSIFT_STEP_SIZE = 8\n# \uc601\uc0c1\uc758 \ud2b9\uc9d5\uc810(DenseSIFT) \uac80\ucd9c(\ud559\uc2b5\ub370\uc774\ud130, \ud14c\uc2a4\ud2b8\ub370\uc774\ud130)\nx_train_feature = [extract_DenseSift_descriptors(img) for img in tqdm(train_data)]\nx_test_feature = [extract_DenseSift_descriptors(img) for img in tqdm(test_data)]\n# numpy \ud615\uc2dd\uc73c\ub85c \ubcc0\ud658\nx_train_des = np.array(x_train_feature)\nx_test_des = np.array(x_test_feature)","feaa6063":"# num_cluster\ub97c 200\uc73c\ub85c \uc124\uc84d\ud558\uc5ec Visual Words(codebook) \uacc4\uc0b0 \ncodebook = build_codebook(x_train_des, 200)","0ea72021":"# BoW feature \uacc4\uc0b0 (\ud559\uc2b5 \ub370\uc774\ud130, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130)\nx_train = [BoW(x_train_des[i],codebook) for i in range(len(train_data))]\nx_train = np.asarray(x_train)\nx_test = [BoW(x_test_des[i],codebook) for i in range(len(test_data))]\nx_test = np.asarray(x_test)","7d9c2363":"# SVM\uc73c\ub85c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud074\ub798\uc2a4 \ubd84\ub958\npredict=SVM(x_train,train_label,x_test) ","ce06e38a":"# CSV \uc81c\ucd9c\uc744 \uc704\ud55c predict shape \ubcc0\ud658 \npredict=predict.reshape(-1,1)\n# CSV \uc81c\ucd9c\uc744 \uc704\ud55c test_label(id) shape \ubcc0\ud658 \ntest_label=np.array(test_label)\ntest_label=test_label.reshape(-1,1)\n# CSV \uc81c\ucd9c\uc744 \uc704\ud55c Predict \uc640 label \ud569\uce58\uae30 \ntotal_result=np.hstack([test_label,predict])\n# CSV \uc81c\ucd9c\uc744 \uc704\ud55c Dataframe\uc73c\ub85c \ubcc0\ud658 \ndf = pd.DataFrame(total_result,columns=[\"Id\",\"Category\"])\n# CSV \uc800\uc7a5 \ndf.to_csv(\".\/Test_2020ML.csv\",index=False,header=True)","a39908c2":"# \ubc18\ub4dc\uc2dc \ucc98\uc74c\ubd80\ud130 \ub05d\uae4c\uc9c0 \uc2a4\ucf08\ub808\ud1a4 \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uad6c\ud604\ud558\uae30 \uc2dc\uc791\ud558\uae38 \ubc14\ub780\ub2e4\n## 1. \uc2a4\ucf08\ub808\ud1a4 \ucf54\ub4dc\ub97c [\ubcf5\uc0ac \ubc0f \ud3b8\uc9d1] \ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4.\n## 2. \uc544\ub798\uc758 [Empty Module 5\uac1c]\ub97c \uc9c1\uc811 \uad6c\ud604\ud55c\ub2e4.\n## 3. main \ubd80\ub97c \uc2e4\ud589\ud558\uba74 \uc5ec\ub7ec\ubd84\uc774 \uc791\uc131\ud55c Empty Module \uc744 \uc774\uc6a9\ud558\uc5ec \ucf54\ub4dc\uac00 \ub3d9\uc791\ud55c\ub2e4.","578510b1":"## [Empty Module #5] SVM: classifier\n\n- svm.SVC() \ub97c \ud65c\uc6a9\ud574 classification \uc744 \uc9c4\ud589\n- GridSearchCV()\ub97c \ud65c\uc6a9\ud574 SVC\uc758 \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \uc9c4\ud589 .\n  - (\ud301) parameters = {'kernel':('linear', 'rbf'), 'C':[0.1 ,1, 10, 100, 1000]}\n- fit()\uc73c\ub85c train_data\uc5d0 \ub300\ud55c \uba38\uc2e0\ub7ec\ub2dd \ud559\uc2b5\n- predict()\uc73c\ub85c test_data\uc5d0 \ub300\ud55c \uc815\ub2f5\uc744 \ucd94\ub860 \ud558\uc5ec \ubc18\ud658 \n\n","8881602f":"## [\ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58] \ucef4\ud4e8\ud130 \ube44\uc804\uc758 \ub300\ud45c \ub77c\uc774\ube0c\ub7ec\ub9ac [OpenCV](https:\/\/opencv.org\/) \nOpencv\ub294 \ub2e4\uc591\ud55c \uc601\uc0c1\/\ub3d9\uc601\uc0c1 \ucc98\ub9ac\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac. \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ub2e4\uc591\ud55c \ud568\uc218\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc73c\uba70, \ubcf8 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\ub294 \uc601\uc0c1\uc758 \uce7c\ub77c \ubcc0\ud658(RGB\uc601\uc0c1\uc744 \ud68c\uc0c9\uc601\uc0c1 \ubcc0\ud658)\uc2dc, \ud2b9\uc9d5\ub7c9 \ucd94\ucd9c(SIFT)\uc2dc \uc0ac\uc6a9\ub429\ub2c8\ub2e4. OpenCV\ub294 C++\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\uc73c\uba70, \ud30c\uc774\uc36c Wrapper\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc5b4 \ud30c\uc774\uc36c\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\uac00\ub2a5\ud569\ub2c8\ub2e4. JupyterNotebook \ud658\uacbd\uc5d0\uc11c\ub294 import cv2\ub85c \ubd88\ub7ec \uc640\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud604\uc7ac Kaggle \ub178\ud2b8\ubd81 \uac1c\ubc1c \ud658\uacbd\uc5d0 \uc124\uce58\ub41c OpenCV \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c\ub294 \uc6b0\ub9ac\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uc6d0\ud65c\ud558\uac8c \uc218\ud589\ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c, \uc544\ub798\uc640 \uac19\uc774 \uae30\uc870\uc5d0 \uc124\uce58\ub41c OpenCV \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc81c\uac70\ud558\uace0 \uc6b0\ub9ac\uc5d0\uac8c \ub9de\ub294 \ubc84\uc804\uc744 \uc124\uce58\ud569\ub2c8\ub2e4.","74b10d90":"# [Empty Module #2] \ud2b9\uc9d5\uc810 \ucd94\ucd9c\ud558\uae30 (Dense-SIFT)\n- ```extract_sift_descriptors``` \ud568\uc218\ub97c \ubc14\ud0d5\uc73c\ub85c ```extract_DenseSift_descriptors``` \ud568\uc218 \uc791\uc131\n- SIFT\uc758 detect \ud568\uc218\uc640 compute \ud568\uc218\ub97c \ud65c\uc6a9\ud55c\ub2e4.\n- SIFT\uc758 detect \ud568\uc218\ub294 \ud2b9\uc9d5\uc810 \uc704\uce58\ub97c \ucd94\ucd9c\ud558\ub294 \ud568\uc218\uc774\uace0, compute \ud568\uc218\ub294 \ud2b9\uc9d5\uc810 \uc704\uce58 \uc8fc\ubcc0 \uc815\ubcf4\ub97c \ucd94\ucd9c\ud558\ub294 \ud568\uc218\uc774\ub2e4.\n- [\ucc38\uace0 \uba54\ub274\uc5bc](https:\/\/docs.opencv.org\/3.4\/d0\/d13\/classcv_1_1Feature2D.html#ab3cce8d56f4fc5e1d530b5931e1e8dc0) \ucc38\uace0  \n    ","0bff30b8":"## [Empty Module #3] Codebook \uc0dd\uc131\n\n- 1) \ucd94\ucd9c\ud55c Dense-SIFT\uc758 \ud2b9\uc9d5\ub7c9(\uae30\uc220\uc790)\uc744 \uc774\uc6a9\ud558\uc5ec Codebook \uc744 \uc0dd\uc131\ud55c\ub2e4\n  - (\ud301) sckikit-learn\uc5d0 \uc788\ub294 Kmeans \uc0ac\uc6a9\ud560 \uac83 [\uba54\ub274\uc5bc](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.cluster.KMeans.html)\n  - 1) X\ub97c [3060 * 1024,128]\ub85c reshape \ud560 \uac83 **\n  - 2) Kmeans\uc758 Cluster \uac2f\uc218(voc_size)\ub97c \uc785\ub825\uc73c\ub85c Kmeans\ub97c \uc815\uc758\ud55c \ud6c4\n  - 3) X(data) \ub97c fit\n  - kmeans center\ub97c return \n  -  ***\uc720\uc758 \uc0ac\ud56d* ** \uc6d0\ub798 \ub450\uc2dc\uac04 \ub118\uac8c \uac78\ub9ac\ub294 \uc791\uc5c5\uc774\ubbc0\ub85c \uc774\uc0c1\ud558\uac8c \uc0dd\uac01\uc548\ud574\ub3c4 \ub41c\ub2e4. \n","9cfddad1":"# [Empty Module #1] \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \n\n### \ubaa9\ud45c: \uc9c0\uae08\ubd80\ud130 1D \ub370\uc774\ud130 \ud615\ud14c\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 csv \ud30c\uc77c\uc744 \uc77d\uace0, \ud559\uc2b5\/\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \ubcc0\uc218(\uba54\ubaa8\ub9ac)\uc5d0 \uc800\uc7a5\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30\ub85c \ud55c\ub2e4.\n- 1) \ud074\ub798\uc2a4 \uba85\uc744 \ubc94\uc8fc\ud615 \ub77c\ubca8\ub85c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5\uc744 \uc9c4\ud589\ud55c\ub2e4. \n  - (\ud301) \ud074\ub798\uc2a4 \uba85: \uc800\uc7a5\ub41c CSV\ud30c\uc77c\uc758 \uc0c1\uc704 \ud3f4\ub354 \uc774\ub984, \ubc94\uc8fc\ud615 \ub77c\ubca8: Label2Names.csv\uc5d0 \uc788\ub294 \ub9e4\ud551 \ud45c\n  - (\uc608) \"crocodile_head\" -> 30\n  - (\uc8fc\uc758) \"BACKGROUND_Google\" \ub294 Label2Names.csv \uc548\uc5d0 \uc5c6\ubbc0\uba70, \ubc30\uacbd\ud074\ub798\uc2a4\ub294 102\ub85c \ub9f5\ud551\ud558\uc5ec \uc0ac\uc6a9\ud558\ub77c\n- 2) \ud2b9\uc9d5\uc810\uc744 \ucd94\ucd9c\ud558\uae30 \uc704\ud574\uc11c\ub294 1D \ub370\uc774\ud130\ub97c 2D \ud615\ud0dc\uc778 RGB \ub370\uc774\ud130\ub85c \ubcc0\ud658\uc774 \ud544\uc694\ud558\ub2e4. \uc774\uc640 \uac19\uc774 \ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \ubcc0\ud658\ud560 \ub54c\ub294 reshape \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c.\n- 3) \uadf8\ub9ac\uace0 uint64\ub85c \uc81c\uacf5\ub41c \ub370\uc774\ud130\ub97c uint8\ub85c \ubcc0\uacbd\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub54c np.uint8 \uc744 \uc0ac\uc6a9\ud558\ub77c.\n- 4) \ud2b9\uc9d5\uc810\uc744 \ucd94\ucd9c\ud558\ub294 OpenCV \ud568\uc218\ub4e4\uc740 \uc785\ub825\uc73c\ub85c \uce7c\ub77c \uc601\uc0c1\uc774 \uc544\ub2cc Gray \uc601\uc0c1\uc744 \uc785\ub825\uc73c\ub85c \ubc1b\uc73c\ubbc0\ub85c \uc601\uc0c1 \uce7c\ub77c\ub97c \ubcc0\ud658\ud55c\ub2e4. \n - \ud604\uc7ac \uc81c\uacf5\ub41c \uc601\uc0c1 \ub370\uc774\ud130\ub294 \uce7c\ub77c \ud3ec\uba67\uc73c\ub85c BGR \ud3ec\ub9f7\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. (\uc77c\ubc18\uc801\uc73c\ub85c \uce7c\ub77c \uc601\uc0c1\uc740 RGB \uc774\ub2e4.)\n - \uc774\ub54c [cv2.cvtcolor() \ub77c\ub294 \ud568\uc218](https:\/\/opencv-python.readthedocs.io\/en\/latest\/doc\/08.imageProcessing\/imageProcessing.html)\ub97c \uc0ac\uc6a9\ud558\uace0, flag\ub85c cv2.COLOR_BGR2GRAY \ub97c \uc0ac\uc6a9\ud558\ub77c. ","13b754af":"# **Empty Module5**","1515f5d3":"# >> \ucf54\ub4dc \uc2dc\uc791 \ubd80\ubd84 (main \ubd80)","d0958acd":"## [Empty Module #4] BoW: histogram vector \uc0dd\uc131\n\n### BoW\n- \uc0dd\uc131\ud574\ub454 codebook(kmeans clustrer center) \uc640 Dense SIFT\ub97c \ube44\uad50\ud558\uc5ec histogram\uc744 \uad6c\ud558\ub294 \uc791\uc5c5 \uc9c4\ud589\n- 1) scipy.cluster.vq\ub97c \uc0ac\uc6a9\ud574 \uac01 Dense SIFT\uc640 \uc720\uc0ac\ud55c codebook\uc758 Index\ub97c \ubc18\ud658 \ubc1b\uc544 \uc0ac\uc6a9. \n  - (\ud301) [\uba54\ub274\uc5bc](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.cluster.vq.vq.html) \ucc38\uace0\n- 2) vq\ub97c \uc774\uc6a9\ud574 \uc5bb\uc740 Index\ub97c np.histogram \uc744 \uc0ac\uc6a9\ud574 histogram\uc744 \uad6c\ud55c\ub2e4.\n  - (\ud301)np.histogram \uc0ac\uc6a9\uc2dc bin=range(codebook.shape[0] + 1), normed=True \uc124\uc815\n  - [\uba54\ub274\uc5bc](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.histogram.html) \ucc38\uace0\n\n","3bc3bbaa":"# >> \ud544\uc694\ud55c \ubaa8\ub4c8 \ubd80\ubd84 (function \ubd80)"}}