{"cell_type":{"8a6cd27f":"code","1839f60b":"code","97673701":"code","61d350d1":"code","009caf5f":"code","bf1a4e0b":"code","6625a601":"code","fccadf89":"code","b6ce7aba":"code","cff03736":"code","b264f8b3":"markdown","c1c8d7fe":"markdown","3495505d":"markdown","3c73be81":"markdown"},"source":{"8a6cd27f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom tensorflow.python.keras.utils import Sequence\nfrom keras import backend as K\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport os\nimport glob","1839f60b":"all_files = glob.glob(\"\/kaggle\/input\/*\/*\")","97673701":"class NumPyFileGenerator(Sequence):\n    def __init__(self, files):\n        self.files = files\n\n    def __len__(self):\n        return len(self.files)\n\n    def __getitem__(self, idx):\n        data = np.load(open(self.files[idx], 'rb'))\n        x = data['MobileNetV2_bottleneck_features']\n        y = data['yahoo_nsfw_output']\n        return x, y","61d350d1":"training_generator = NumPyFileGenerator(files=all_files[0:8])\nvalidation_generator = NumPyFileGenerator(files=all_files[9:10])","009caf5f":"model = tf.keras.Sequential([\n  tf.keras.layers.Conv2D(32, 3, activation='relu', input_shape=(7, 7, 1280)),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.GlobalAveragePooling2D(),\n  tf.keras.layers.Dense(1)\n])","bf1a4e0b":"def threshold_accuracy(y_true, y_pred):\n    absolute_difference = K.abs(y_true - y_pred)\n    truth_matrix = K.greater(absolute_difference, K.variable(0.05))\n    casted = K.cast(truth_matrix, 'float32')\n    final = K.mean(casted)\n    return final","6625a601":"model.compile(optimizer=tf.keras.optimizers.Adam(),\n              loss='mean_squared_error', \n              metrics=[threshold_accuracy])","fccadf89":"history = model.fit_generator(training_generator, \n                    epochs=20, \n                    validation_data=validation_generator)","b6ce7aba":"plt.plot(history.history['threshold_accuracy'])\nplt.plot(history.history['val_threshold_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')","cff03736":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\n\n","b264f8b3":"## Introduction\nThis data set is meant to assist in creating models that mimic the behavior of the [Yahoo NSFW model](https:\/\/github.com\/yahoo\/open_nsfw). This kernel achieves ~80% accuracy (an accurate prediction defined as coming within 5% of Yahoo NSFW's score).","c1c8d7fe":"Start training","3495505d":"Find all of the files as part of this dataset. All the files are compressed numpy arrays in the npz format\n","3c73be81":"Need to create a custom generator for Keras to process. By default each file contains 2000 images, so that will also be the batch size. There will be two generators, one for training and one for validation"}}