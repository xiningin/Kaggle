{"cell_type":{"706346d1":"code","e2f66be1":"code","cdde474c":"code","c20be861":"code","916d81c8":"code","fa2338d4":"code","b5e4ee94":"code","837a9719":"code","b9200eb1":"code","5dcc37ac":"code","bcab73e2":"code","f37654fa":"code","cc9a10fb":"code","a9f2eb5f":"code","e5d1d1f5":"code","bd39e669":"code","2fd08bd3":"code","7b7518c8":"code","24f38417":"code","525e9ffb":"code","f5813db2":"code","74e21e75":"markdown","0148f507":"markdown","09676e7c":"markdown","b398d619":"markdown"},"source":{"706346d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2f66be1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ndata = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')","cdde474c":"data.head()","c20be861":"data.info()","916d81c8":"data.describe()","fa2338d4":"category_data = data.groupby('Category')","b5e4ee94":"category_data.count()","837a9719":"games_data = data[data['Category']=='GAME']","b9200eb1":"games_data","5dcc37ac":"games_data.sort_values('Rating',ascending = False)","bcab73e2":"data5 = games_data[games_data['Rating']==5.0]","f37654fa":"data5","cc9a10fb":"# method to slice the size column into a float\ndef slice_column(patch1):\n    new_size = []\n    for i in data5[patch1]:\n        new_size.append(float(i[:-1]))\n    return new_size","a9f2eb5f":"data5['Size'] = slice_column('Size')","e5d1d1f5":"data5","bd39e669":"def plot_game_data(patch1,patch2,data,kind):\n    sns.jointplot(x = patch1,y = patch2,data = data,kind = kind)\n#     plt.xlabel(patch1,fontsize=15)\n#     plt.ylabel(patch2,fontsize=15)\n#     plt.legend(fontsize=15)\n#     plt.title('{} VS {} Plot'.format(patch1,patch2),fontsize=15)\n    plt.show()","2fd08bd3":"# Reviews column is of object type, lets make that float\ndef make_float():\n    new_review = []\n    for i in data5.Reviews:\n        new_review.append(float(i))\n    return new_review","7b7518c8":"data5['Reviews'] = make_float()","24f38417":"# plotting the size column along with reviews\nplot_game_data('Reviews','Size',data5,'scatter')","525e9ffb":"data5['Installs'] = slice_column('Installs')","f5813db2":"# plotting a graph between size and installs\nplot_game_data('Size','Installs',data5,'scatter')","74e21e75":"Seems like for 5.0 rated games we have some serious non-uniformity, which can give a conclusion that, getting a 5.0 rating in playstore is a coincidence or an initial app stat","0148f507":"The plot between Reviews and Size is highly non-uniform, hence can't say that these two are connected by any means.","09676e7c":"## Analysis of the rating apps having a rating 5.0","b398d619":"## To be Continued ..."}}