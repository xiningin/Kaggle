{"cell_type":{"6bf2c144":"code","2f7c1b11":"code","bf105f39":"code","d71a8078":"code","08cb7da7":"code","cfa24312":"code","9f6f95eb":"code","b3c5c5a7":"code","57a2f91a":"code","3fada172":"code","97d2499d":"code","07efcce6":"code","073fa28c":"code","77682ca7":"code","acf70ea3":"code","f81ab772":"code","2a763594":"code","4ae6c729":"code","58b20146":"code","e02866a2":"code","aa98487e":"code","da6c08c6":"code","7d1db6ca":"code","ef0c85ca":"code","07938410":"code","05975381":"code","f4d199dc":"code","3e4b1cd7":"code","a64be4b0":"code","fd89d6ba":"code","a6c50c07":"code","619ae64c":"code","2962cf5e":"code","897227c6":"code","dba4b7a6":"code","521daf29":"code","e6c949bc":"code","64a97732":"code","48dcf244":"code","6fe11203":"code","5e9dd610":"code","335a4ef4":"code","8df5da5c":"code","63016bfd":"code","6cf0ad57":"code","f79ec99b":"code","a93b66bd":"code","f59f6211":"code","3b611314":"code","4d0888de":"code","38b6e3ca":"code","1d02ac8a":"code","811c1051":"code","b2eb4e19":"code","7351de76":"code","e6ac347c":"code","a03da9d1":"code","033c65ff":"code","50120523":"code","0c4abda1":"code","30e6bac9":"code","8a2bf022":"markdown","2cba09f4":"markdown","d1c11b8e":"markdown","cf98a894":"markdown","17e568d9":"markdown","938c0ede":"markdown","eba2b42b":"markdown","53fd7e24":"markdown","6e4c57ad":"markdown","0dc6cfee":"markdown","39c3cf83":"markdown"},"source":{"6bf2c144":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f7c1b11":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor, plot_tree\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error as mse, r2_score as r2\nfrom sklearn.decomposition import PCA\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nmatplotlib.rcParams.update({'font.size': 14})","bf105f39":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'\nREPORTS_FILE_PATH = '..\/output\/kaggle\/working'","d71a8078":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.head()","08cb7da7":"test_df = pd.read_csv(TEST_DATASET_PATH) # \u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0440\u0435\u0439\u043d\ntest_df.head()\n# \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043d\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 price, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c","cfa24312":"train_df.dtypes","9f6f95eb":"# \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0446\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u044d\u0442\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\ntrain_df['Id'] = train_df['Id'].astype(str)","b3c5c5a7":"plt.figure(figsize = (16, 8))\n\nplt.subplot(121)\ntrain_df['Price'].hist(density=False, bins=20)\nplt.ylabel('count')\nplt.xlabel('\u0426\u0435\u043d\u0430')\n\nplt.subplot(122)\nsns.kdeplot(train_df['Price'], shade=True, legend=False)\nplt.xlabel('\u0426\u0435\u043d\u0430')\n\nplt.suptitle('\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f')\nplt.show()","57a2f91a":"train_df.select_dtypes(include='category').columns.tolist()","3fada172":"train_df.isna().sum()","97d2499d":"target_mean = round(train_df['Price'].mean(), 2)\ntarget_median = train_df['Price'].median()\ntarget_mode = train_df['Price'].mode()[0]","07efcce6":"plt.figure(figsize = (16, 8))\n\nsns.distplot(train_df['Price'], bins=50)\n\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean] * 10, y, label='?',  linewidth=4)\nplt.plot([target_median] * 10, y, label='?',  linewidth=4)\nplt.plot([target_mode] * 10, y, label='?', linewidth=4)\n\nplt.title('\u0426\u0435\u043d\u0430')\nplt.legend()\nplt.show()","073fa28c":"train_df[(train_df['Price']> 620000) & (train_df['Square']< 80)]","77682ca7":"# \u041a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u044c\u0448\u0435 80 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0446\u0435\u043d\u043e\u0439 \u0434\u043e\u0440\u043e\u0436\u0435 620000 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u0437 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\ntrain_df = train_df.drop(train_df[(train_df['Price']> 620000) & (train_df['Square']< 80)].index)","acf70ea3":"train_df.describe()","f81ab772":"df_num_features = train_df.select_dtypes(include=['float64', 'int64', 'int16', 'int32'])\ndf_num_features.drop('Price', axis=1, inplace=True)\ndf_num_features.hist(figsize=(16, 16), bins=20, grid=False);","2a763594":"train_df[train_df['Rooms']<20]['Rooms'].hist(figsize=(4, 4), bins=20, grid=False);","4ae6c729":"#  \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043a\u0432\u0430\u0440\u0442\u0440\u044b \u0434\u043e 6 \u043a\u043e\u043c\u043d\u0430\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u0441\u0435 \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 6\ntrain_df[train_df['Rooms']>6]","58b20146":"train_df[train_df['Rooms'] == 0]","e02866a2":"# \u0422\u0430\u043c \u0433\u0434\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 0 \u043f\u0440\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043e\u0434\u043d\u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u0433\u0434\u0435 >6 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ntrain_df.loc[(train_df['Rooms'] == 0), 'Rooms'] = 1\ntrain_df.loc[(train_df['Rooms'] > 6), 'Rooms'] = train_df['Rooms'].median()","aa98487e":"train_df[train_df['Square']>400]","da6c08c6":"# \u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u0445 \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c > 400 \u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 3 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u043e\u0448\u0438\u0431\u043b\u0438\u0441\u044c \u0437\u0430\u043f\u044f\u0442\u043e\u0439 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 10\ntrain_df.loc[(train_df['Square'] > 400) & (train_df['Rooms'] < 3 ) , 'Square'] = train_df[(train_df['Square'] > 400) & (train_df['Rooms'] < 3)]['Square'] \/ 10","7d1db6ca":"# \u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 10 \u043a\u0432 \u043d\u0435 \u043f\u0440\u0430\u0432\u0434\u0430\u043f\u043e\u0434\u043e\u0431\u043d\u0430\ntrain_df[train_df['Square']<10] ","ef0c85ca":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\nmean_square_room = train_df.groupby(\"Rooms\")['Square'].mean().reset_index().rename(columns={'index':'Rooms', 'Square':'Mean_square'})\n\nmean_square_room\n","07938410":"# \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 10 \u0438 \u043c\u0435\u043d\u044c\u0448\u0435 20 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0438 \u0442\u0430\u043c \u0433\u0434\u0435 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 100 \u043a\u0432 \u0438 \u043e\u0434\u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0430, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0434\u043b\u044f \u044d\u0442\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\ntrain_df = train_df.merge(mean_square_room, on='Rooms', how='left')\ntrain_df.loc[(train_df['Square'] < 10), 'Square'] = train_df['Mean_square'] \ntrain_df.loc[(train_df['Square'] < 20) & (train_df['Rooms'] > 1 ) , 'Square'] = train_df['Mean_square']\ntrain_df.loc[(train_df['Square'] > 100) & (train_df['Rooms'] == 1 ) , 'Square'] = train_df['Mean_square']\ntrain_df.drop('Mean_square', axis=1, inplace=True)","05975381":"train_df[train_df['LifeSquare']<7500]['LifeSquare'].hist(figsize=(4, 4), bins=20, grid=False);","f4d199dc":"\ntrain_df[train_df['LifeSquare']>400]","3e4b1cd7":"train_df['LifeSquare'].isna().sum()","a64be4b0":"# \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a \u0436\u0438\u043b\u043e\u0439\ntrain_df['LifeSquare'].mean()\/train_df['Square'].mean()","fd89d6ba":"# \u0434\u043b\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0442\u0430\u043c \u0433\u0434\u0435 \u0436\u0438\u043b.\u043f\u043b\u043e\u0449\u0430\u0434\u044c < 10 \u043a.\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u044d\u0442\u043e 65 % \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \ntrain_df.loc[(train_df['LifeSquare'].isna()) | (train_df['LifeSquare']<10), 'LifeSquare'] = train_df['Square'] * 0.65","a6c50c07":"# \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439 \u0438 \u0433\u0434\u0435 \u043e\u0434\u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0430, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0435\u0441\u0442\u044c \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 0.65 \u043e\u0442 \u043e\u0431\u0449\u0435\u0439\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']) & (train_df['Rooms'] == 1) & (train_df['KitchenSquare'] > 1),'LifeSquare'] = train_df['Square'] * 0.65","619ae64c":"# \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439 \u0438 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0439 \u0442\u043e\u0436\u0435 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 0.65 \u0412 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u044f\u0435\u043c \u043a \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u044d\u0442\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u0442\u0443\u0434\u0438\u0438 \u0431\u0435\u0437 \u043a\u0443\u0445\u043d\u0438\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']) & (train_df['Rooms'] > 1),'LifeSquare'] = train_df['Square'] * 0.65\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']) & (train_df['Rooms'] == 1),'LifeSquare'] = train_df['Square']","2962cf5e":"train_df[train_df['KitchenSquare']<2100]['KitchenSquare'].hist(figsize=(4, 4), bins=20, grid=False);","897227c6":"train_df[train_df['KitchenSquare']>1000]","dba4b7a6":"# \u041a\u0443\u0445\u043d\u044f \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u043a\u0432 \u043c \u044f\u0432\u043d\u044b\u0439 \u0432\u044b\u0431\u0440\u043e\u0441 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0434\u043b\u044f \u043a\u0443\u0445\u043e\u043d\u0438\ntrain_df.loc[(train_df['KitchenSquare']>1000), 'KitchenSquare'] = train_df['KitchenSquare'].median()","521daf29":"# \u0422\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043a\u0443\u0445\u043d\u0438 > 100 \u043c\u0435\u0442\u0440\u043e\u0432 \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u0435\u043d \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ntrain_df.loc[(train_df['KitchenSquare']>100),'KitchenSquare'] = train_df[train_df['Rooms']==3]['KitchenSquare'].median()","e6c949bc":"# \u041d\u0430\u0439\u0434\u0435\u043c \u0442\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0433\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439\ntrain_df.loc[(train_df['KitchenSquare'] > train_df['Square'])]\n","64a97732":"# \u042d\u0442\u043e \u044f\u0432\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \ntrain_df.loc[(train_df['KitchenSquare'] > train_df['Square']),'KitchenSquare'] = train_df['KitchenSquare'].median()\n# \u041a\u0443\u0445\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 50 \u0442\u043e\u0436\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043d\u0435 \u043f\u0440\u0430\u0432\u0434\u043e \u043f\u043e\u0434\u043e\u0431\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ntrain_df.loc[(train_df['KitchenSquare']>50),'KitchenSquare'] = train_df['KitchenSquare'].median()","48dcf244":"train_df.loc[abs(train_df['KitchenSquare'] - train_df['Square'])<5]","6fe11203":"# \u0422\u0430\u043c \u0433\u0434\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043a\u0443\u0445\u043d\u0435\u0439 \u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043c\u0435\u043d\u044c\u0448\u0435 5 \u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ntrain_df.loc[abs(train_df['KitchenSquare'] - train_df['Square'])<5, 'KitchenSquare'] = train_df['KitchenSquare'].median()","5e9dd610":"train_df[train_df['HouseFloor']>50]","335a4ef4":"# \u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0430\u043a\u0438\u0445 \u0432\u044b\u0441\u043e\u043a\u0438\u0445 \u044d\u0442\u0430\u0436\u0435\u0439 \u043d\u0435\u0442, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435. \u0414\u043e\u043c\u0430 \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0442\u043e\u0436\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c\ntrain_df.loc[(train_df['HouseFloor'] >75) | (train_df['HouseFloor'] == 0), 'HouseFloor'] = train_df['HouseFloor'].median()","8df5da5c":"train_df[train_df['Floor']>train_df['HouseFloor']]","63016bfd":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043c\u0430 \u043d\u0430 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b + 1. \u0422.\u043a \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u044d\u0442\u0430\u0436\u0430\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0434\u0435\u0448\u0435\u0432\u043b\u0435\ntrain_df.loc[(train_df['Floor']>train_df['HouseFloor']), 'HouseFloor'] = train_df['Floor'] + 1","6cf0ad57":"train_df[train_df['HouseYear'] >2021]","f79ec99b":"# \u0412\u0441\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u043c \u0441\u0442\u0430\u0440\u0448\u0435 21 \u0433\u043e\u0434\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\ntrain_df.loc[train_df['HouseYear'] > 2021, 'HouseYear'] = train_df['HouseYear'].median()","a93b66bd":"train_df[train_df['Ecology_1'] == 0]","f59f6211":"# \u041f\u044b\u0442\u0430\u043b\u0430\u0441\u044c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e Healthcare_2, \u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0445\u0443\u0436\u0435\ntrain_df.loc[(train_df['Healthcare_1'].isna()), 'Healthcare_1'] = train_df['Healthcare_1'].mean()","3b611314":"df_num_features = train_df.select_dtypes(include=['float64','int64','float32', 'int8', 'int16', 'int32'])\ndf_num_features.drop('Price', axis=1, inplace=True)\ndf_num_features.hist(figsize=(16, 16), bins=20, grid=False);","4d0888de":"category_numbers = {\"A\": 0, \"B\": 1}\ntrain_df[\"Ecology_2\"] = train_df[\"Ecology_2\"].replace(category_numbers)\ntrain_df[\"Ecology_3\"] = train_df[\"Ecology_3\"].replace(category_numbers)\ntrain_df[\"Shops_2\"] = train_df[\"Shops_2\"].replace(category_numbers)","38b6e3ca":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","1d02ac8a":"class DataPipeline:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.means = None\n        self.medians = None\n      \n    def fit(self, D):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = D.median()\n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n        self.means = D.mean()\n    \n    def transform(self, D):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        D.loc[(train_df['Rooms'] == 0), 'Rooms'] = 1\n        D.loc[(train_df['Rooms'] > 6), 'Rooms'] = train_df['Rooms'].median()\n        \n        # Square\n        D.loc[(D['Square'] > 400) & (D['Rooms'] < 3 ) , 'Square'] = D[(D['Square'] > 400) & (D['Rooms'] < 3)]['Square'] \/ 10\n\n        mean_square_room = D.groupby(\"Rooms\")['Square'].mean().reset_index().rename(columns={'index':'Rooms', 'Square':'Mean_square'})\n        D = D.merge(mean_square_room, on='Rooms', how='left')\n        D.loc[(D['Square'] < 10), 'Square'] = D['Mean_square'] \n        D.loc[(D['Square'] < 20) & (D['Rooms'] > 1 ) , 'Square'] = D['Mean_square']\n        D.loc[(D['Square'] > 100) & (D['Rooms'] == 1 ) , 'Square'] = D['Mean_square']\n        D.drop('Mean_square', axis=1, inplace=True)\n        \n        \n                \n        # KitchenSquare, LifeSquare\n        D.loc[(D['LifeSquare'].isna()) | (D['LifeSquare']<10), 'LifeSquare'] = D['Square'] * 0.65\n        D.loc[(D['LifeSquare'] > D['Square']) & (D['Rooms'] == 1) & (D['KitchenSquare'] > 1),'LifeSquare'] = D['Square'] * 0.65\n        D.loc[(D['LifeSquare'] > D['Square']) & (D['Rooms'] == 1),'LifeSquare'] = D['Square']\n        D.loc[(D['LifeSquare'] == D['Square']), 'LifeSquare'] = D['Square'] * 0.65\n        \n        D.loc[(D['KitchenSquare']>50), 'KitchenSquare'] = self.means['KitchenSquare']\n        D.loc[(D['KitchenSquare'] > D['Square']),'KitchenSquare'] = self.means['KitchenSquare']\n        D.loc[abs(D['KitchenSquare'] - D['Square'])<5, 'KitchenSquare'] = self.means['KitchenSquare']\n           \n        # HouseFloor, Floor\n        D.loc[(D['HouseFloor'] >75) | (D['HouseFloor'] == 0), 'HouseFloor'] = self.means['HouseFloor']\n        D.loc[(D['Floor']>D['HouseFloor']), 'HouseFloor'] = D['Floor'] + 1\n        \n        # HouseYear\n        D.loc[D['HouseYear'] > 2021, 'HouseYear'] = self.means['HouseYear']\n        \n        D.loc[(D['Healthcare_1'].isna()), 'Healthcare_1'] = self.means['Healthcare_1']\n        \n        D['Id'] = D['Id'].astype(str)\n        category_numbers = {\"A\": 0, \"B\": 1}\n        D[\"Ecology_2\"] = D[\"Ecology_2\"].replace(category_numbers)\n        D[\"Ecology_3\"] = D[\"Ecology_3\"].replace(category_numbers)\n        D[\"Shops_2\"] = D[\"Shops_2\"].replace(category_numbers)\n        \n        return D","811c1051":"class FeatureGenerator:\n    def __init__(self):\n        self.districts_median_year = None\n        self.districts_density = None\n        self.district_price_per_square = None\n        self.min_sq = None\n        self.max_sq = None\n\n        \n\n    \n    def new_features(self, df):\n\n        # Floor category\n        floor_bins = [0, 4, 7, 12, df['Floor'].max()]\n        df['Floor_cat'] = pd.cut(df['Floor'], bins=floor_bins, labels=False)\n        df['Floor_cat'].fillna(-1, inplace=True) \n        \n        \n        # Scale and merge Social\n        scaler = RobustScaler()\n        pca = PCA(n_components=1, random_state=42)\n        social_scaled = pd.DataFrame(scaler.fit_transform(df[['Social_1', 'Social_2', 'Social_3']]))\n        df['Social'] = pca.fit_transform(social_scaled)\n        \n        # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435\n        #scaler1 = RobustScaler()\n        #pca1 = PCA(n_components=1, random_state=42)\n        #ecology_scaled = pd.DataFrame(scaler.fit_transform(df[['Ecology_2', 'Ecology_3', 'Ecology_1']]))\n        #df['Ecology'] = pca.fit_transform(ecology_scaled)\n        \n        \n        df.drop(['Ecology_2', 'Ecology_3', 'Shops_2'], axis=1, inplace=True)\n        \n        return df","b2eb4e19":"features_gen = FeatureGenerator()\ntrain_df = features_gen.new_features(train_df)","7351de76":"X = train_df.drop(columns='Price')\ny = train_df['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)\n","e6ac347c":"\ngb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=6, \n                                     min_samples_leaf=50, \n                                     random_state=42,  \n                                     n_estimators=2250,\n                                     max_features='sqrt', \n                                     loss='huber', \n                                     learning_rate=0.025)\n\ngb_model.fit(X_train, y_train)\n\ny_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_test)\n\nevaluate_preds(y_train, y_train_preds, y_test, y_test_preds )","a03da9d1":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","033c65ff":"prepr = DataPipeline()\nprepr.fit(train_df)\n\ntest_df = prepr.transform(test_df)\ntest_df = features_gen.new_features(test_df)\ntest_df","50120523":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","0c4abda1":"test_df\ny_pred = gb_model.predict(test_df)\nsubmit['Price'] = y_pred\nsubmit.head()","30e6bac9":"submit.to_csv('rf_submit4.csv', index=False)","8a2bf022":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","2cba09f4":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","d1c11b8e":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","cf98a894":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","17e568d9":"**EDA**","938c0ede":"\u0418\u0437\u0443\u0447\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e Price, \u043f\u043e\u0441\u0442\u043e\u0440\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0440\u0430\u043c\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","eba2b42b":"\u041c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","53fd7e24":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 train","6e4c57ad":"**\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0dc6cfee":"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u043a\u0432 \u043c\u0435\u0442\u0440\u043e\u0432 \u044f\u0432\u043d\u044b\u0439 \u0432\u044b\u0431\u0440\u043e\u0441 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ","39c3cf83":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f. \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0448\u0440\u0438\u0444\u0442 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u0445."}}