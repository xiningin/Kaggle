{"cell_type":{"b451ccca":"code","a3ae76ae":"code","3dd516d0":"code","1839b4c5":"code","3dc5ff3d":"code","b46f4fc3":"code","ab4918e8":"code","4e779306":"code","d6b96fca":"markdown","5e0a8344":"markdown","2a096b75":"markdown","cb336add":"markdown","63853f31":"markdown"},"source":{"b451ccca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a3ae76ae":"vietnamese_file = '..\/input\/vietnamese-stopwords\/vietnamese-stopwords.txt'\nwith open(vietnamese_file) as f: # The with keyword automatically closes the file when you are done\n    print (f.read(1000))","3dd516d0":"import numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ndef plotWordFrequency(input):\n    f = open(vietnamese_file,'r')\n    words = [x for y in [l.split() for l in f.readlines()] for x in y]\n    data = sorted([(w, words.count(w)) for w in set(words)], key = lambda x:x[1], reverse=True)[:40] \n    most_words = [x[0] for x in data]\n    times_used = [int(x[1]) for x in data]\n    plt.figure(figsize=(20,10))\n    plt.bar(x=sorted(most_words), height=times_used, color = 'grey', edgecolor = 'black',  width=.5)\n    plt.xticks(rotation=45, fontsize=18)\n    plt.yticks(rotation=0, fontsize=18)\n    plt.xlabel('Most Common Words:', fontsize=18)\n    plt.ylabel('Number of Occurences:', fontsize=18)\n    plt.title('Most Commonly Used Words: %s' % (vietnamese_file), fontsize=24)\n    plt.show()","1839b4c5":"vietnamese_file = '..\/input\/vietnamese-stopwords\/vietnamese-stopwords.txt'\nplotWordFrequency(vietnamese_file)","3dc5ff3d":"import pronouncing\nimport markovify\nimport re\nimport random\nimport numpy as np\nimport os\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import LSTM \nfrom keras.layers.core import Dense","b46f4fc3":"def create_network(depth):\n    model = Sequential()\n    model.add(LSTM(4, input_shape=(2, 2), return_sequences=True))\n    for i in range(depth):\n        model.add(LSTM(8, return_sequences=True))\n    model.add(LSTM(2, return_sequences=True))\n    model.summary()\n    model.compile(optimizer='rmsprop',\n              loss='mse')\n    if artist + \".rap\" in os.listdir(\".\") and train_mode == False:\n        model.load_weights(str(artist + \".rap\"))\n        print(\"loading saved network: \" + str(artist) + \".rap\") \n    return model","ab4918e8":"def markov(text_file):\n    ######\n    read = open(text_file, \"r\", encoding='utf-8').read()\n    text_model = markovify.NewlineText(read)\n    return text_model","4e779306":"def syllables(line):\n    count = 0\n    for word in line.split(\" \"):\n        vowels = 'aeiouy'\n#       word = word.lower().strip(\"!@#$%^&*()_+-={}[];:,.<>\/?\")\n        word = word.lower().strip(\".:;?!\")\n        if word[0] in vowels:\n            count +=1\n        for index in range(1,len(word)):\n            if word[index] in vowels and word[index-1] not in vowels:\n                count +=1\n        if word.endswith('e'):\n            count -= 1\n        if word.endswith('le'):\n            count+=1\n        if count == 0:\n            count +=1\n    return count \/ maxsyllables","d6b96fca":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","5e0a8344":"# Codes (reading .txt file) from Paul Mooney: https:\/\/www.kaggle.com\/paultimothymooney\/poetry-generator-rnn-markov","2a096b75":"Markov Chain (https:\/\/github.com\/jsvine\/markovify)","cb336add":"Recurrent Neural Network (https:\/\/keras.io\/layers\/recurrent\/#lstm)","63853f31":"Determine number of syllables in line."}}