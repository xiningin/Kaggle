{"cell_type":{"d97f92a3":"code","d698f869":"code","bf1aab7e":"code","049384fc":"code","5df6cc01":"code","a9190ae7":"code","56439a79":"code","5578bb23":"code","c5d1927f":"code","2181b88e":"code","ecc89588":"code","afe7eedc":"code","f1c3820a":"code","21ad0890":"code","21c89ad4":"code","92f3d63e":"code","d9557320":"code","7c2be5af":"code","e5b49d9b":"code","4e644d7c":"code","34eaf921":"code","c1785992":"code","a4a0be41":"code","29752319":"code","ff16b3c4":"code","fc5226b5":"code","95ce66f9":"code","1a4b6394":"code","0c53ddbb":"code","829c99d2":"code","c2a8c554":"code","0d915934":"code","e36d7c0f":"code","427ca8d0":"code","8a33faa0":"code","40ff3ca0":"code","7ceeaf7b":"code","7dc44e43":"markdown","8b7bf8ee":"markdown","52b65639":"markdown","38b1df59":"markdown","7b4e78b6":"markdown","3fedab01":"markdown","2fe26b50":"markdown","e3ee4c81":"markdown","71cfddc2":"markdown","0f10d173":"markdown"},"source":{"d97f92a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d698f869":"pip install scanpy","bf1aab7e":"import scanpy as sc","049384fc":"path = '\/kaggle\/input\/human-glioblastoma-dataset\/' # matrix.mtx\nadata = sc.read_10x_mtx(path)\nprint(type(adata))\ndf = adata.to_df()\nif len(np.unique(df.columns)) != df.shape[1]:\n    print('Non unique column (gene) names')\ndf","5df6cc01":"sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)\nsc.logging.print_header()\nsc.settings.set_figure_params(dpi=80, facecolor='white')","a9190ae7":"sum0 = np.sum(adata.X,axis = 0)\nprint ( (sum0 == 0).sum() , ' number of totally zero expressed genes ' )\nprint( np.round( (adata.X != 0).sum()\/ (adata.X.shape[0]*adata.X.shape[1]) * 100 , 2) ,' % of non-zeros in data' ) ","56439a79":"# Show those genes that yield the highest fraction of counts in each single cells, across all cells.\nsc.pl.highest_expr_genes(adata, n_top=20 )","5578bb23":"sc.pp.filter_cells(adata, min_genes=200)\nsc.pp.filter_genes(adata, min_cells=3)","c5d1927f":"adata.var['mt'] = adata.var_names.str.startswith('MT-')  # annotate the group of mitochondrial genes as 'mt'\nsc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)","2181b88e":"adata.var['mt'].sum()","ecc89588":"for t in df.columns:\n    if t.upper().startswith('MT'):\n        print(t)","afe7eedc":"# sc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'], jitter=0.4, multi_panel=True)","f1c3820a":"sc.pp.normalize_total(adata, target_sum=1e4)","21ad0890":"sc.pp.log1p(adata)","21c89ad4":"sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\n","92f3d63e":"sc.pl.highly_variable_genes(adata)\n","d9557320":"adata.raw = adata","7c2be5af":"adata = adata[:, adata.var.highly_variable]\n","e5b49d9b":"# sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt'])","4e644d7c":"sc.pp.scale(adata, max_value=10)\n","34eaf921":"sc.tl.pca(adata, svd_solver='arpack')\nsc.pl.pca(adata)#, color='CST3')\n","c1785992":"sc.pl.pca_variance_ratio(adata, log=True)\n","a4a0be41":"#adata.write(results_file)\nadata","29752319":"sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)","ff16b3c4":"#tl.paga(adata)\n#pl.paga(adata, plot=False)  # remove `plot=False` if you want to see the coarse-grained graph\n#tl.umap(adata, init_pos='paga')\n\nsc.tl.umap(adata)\n","fc5226b5":"sc.pl.umap(adata) # , color=[ 'CST3', 'NKG7', 'PPBP']  \n","95ce66f9":"!pip3 install leidenalg","1a4b6394":"sc.tl.leiden(adata)\n","0c53ddbb":"sc.pl.umap(adata, color = ['leiden',])# , color=[ 'CST3', 'NKG7'])","829c99d2":"sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)","c2a8c554":"sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)","0d915934":"sc.tl.rank_genes_groups(adata, 'leiden', method='logreg')\nsc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)","e36d7c0f":"pd.DataFrame(adata.uns['rank_genes_groups']['names']).head(5)\n","427ca8d0":"if 0:\n    result = adata.uns['rank_genes_groups']\n    groups = result['names'].dtype.names\n    pd.DataFrame(\n        {group + '_' + key[:1]: result[key][group]\n        for group in groups for key in ['names', 'pvals']}).head(5)","8a33faa0":"sc.tl.rank_genes_groups(adata, 'leiden', groups=['0'], reference='1', method='wilcoxon')\nsc.pl.rank_genes_groups(adata, groups=['0'], n_genes=20)","40ff3ca0":"sc.pl.rank_genes_groups_violin(adata, groups='0', n_genes=8)\n","7ceeaf7b":"sc.pl.rank_genes_groups_violin(adata, groups='0', n_genes=8)\n","7dc44e43":"A violin plot of some of the computed quality measures:\n\nthe number of genes expressed in the count matrix\nthe total counts per cell\nthe percentage of counts in mitochondrial genes","8b7bf8ee":"The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy.","52b65639":"# Preprocessing","38b1df59":"# What is about \n\n\nWe apply scanpy pipeline as described in tutorial here: https:\/\/scanpy-tutorials.readthedocs.io\/en\/latest\/pbmc3k.html\nto Glioblastoma dataset. \n\n**Context** The dataset - gene expression data of brain cancer cells - Glioblastoma cells. \n\"SCanpy\" - \"Single Cell Python\" - Python package for such data analysis. It is Python verision of similar \"Seurat\" - R package. \n\n","7b4e78b6":"Let us assemple some information about mitochondrial genes, which are important for quality control.\n\nCiting from \u201cSimple Single Cell\u201d workflows (Lun, McCarthy & Marioni, 2017):\n\nHigh proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), possibly because of loss of cytoplasmic RNA from perforated cells. The reasoning is that mitochondria are larger than individual transcript molecules and less likely to escape through tears in the cell membrane.\nWith pp.calculate_qc_metrics, we can compute many metrics very efficiently.","3fedab01":"# Clustering the neighborhood graph\n\nAs Seurat and many others, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag *et al.* (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section.","2fe26b50":"# Finding marker genes\n\nLet us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test.\n\n","e3ee4c81":"Total-count normalize (library-size correct) the data matrix X to 10,000 reads per cell, so that counts become comparable among cells.","71cfddc2":"# Embedding the neighborhood graph\n\nWe advertise embedding the graph in 2 dimensions using UMAP (McInnes et al., 2018), see below. It is potentially more faithful to the global connectivity of the manifold than tSNE, i.e., it better preservers trajectories. In some ocassions, you might still observe disconnected clusters and similar connectivity violations. They can usually be remedied by running:","0f10d173":"# Computing the neighborhood graph\n\nLet us compute the neighborhood graph of cells using the PCA representation of the data matrix. You might simply use default values here. For the sake of reproducing Seurat\u2019s results, let\u2019s take the following values."}}