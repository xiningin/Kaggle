{"cell_type":{"d383c68d":"code","ac07a77a":"code","15c08976":"code","bf6ced6d":"code","77c2856f":"code","9f5b8227":"code","5c52ebdd":"code","0cdbaffb":"code","c3f12124":"code","3ba953ce":"code","096b4057":"code","62561161":"code","d280a666":"code","21908c18":"code","9c635569":"code","1b9dca4c":"code","3394c15f":"code","7db9dbd8":"code","c619bc56":"code","05bb0a21":"code","76374f4e":"code","e2c82e0d":"code","a5a69ead":"code","d785686a":"code","f6dcb97e":"code","ccab31ab":"code","97502a21":"code","8358fdf8":"code","d51d29fa":"code","b5a6c270":"code","d58d41b3":"code","0ccbd780":"code","72d78c7b":"code","05f90ffb":"code","911904b2":"code","d085af1b":"code","42d68f30":"code","9db401b6":"code","efb5e7fc":"code","68e9f151":"code","fea71b98":"code","8b6eb7da":"code","2342a1ed":"code","08dc23ed":"code","0bdcdb7c":"code","0698345a":"code","861f4b1d":"code","7a4de2f9":"code","03bcb797":"code","e66ea4d2":"code","116ddcb1":"code","68ba60dc":"code","1c12b52a":"code","ed1290f9":"code","34e4965d":"code","b70d8762":"code","706424fc":"code","466a9395":"code","e14375bd":"code","b6a81f08":"code","470bd97f":"code","ba714e42":"code","9c323775":"code","86152607":"code","52dc4308":"code","0cbef3f7":"code","6ecfeaef":"code","dff1ff8f":"code","ea3563c7":"markdown","53ca3325":"markdown","685f63dd":"markdown","db80c81f":"markdown","3693f348":"markdown","8a17fc19":"markdown","10d1f939":"markdown","0f3050a0":"markdown"},"source":{"d383c68d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac07a77a":"import matplotlib.pyplot as plt\nimport seaborn as sns","15c08976":"# load datasets\ndf = pd.read_csv(\"\/kaggle\/input\/hepatitis.data\")\ndf.head()","bf6ced6d":"cols = [\"Class\",\"AGE\",\"SEX\",\"STEROID\",\"ANTIVIRALS\",\"FATIGUE\",\"MALAISE\",\"ANOREXIA\",\"LIVER BIG\",\"LIVER FIRM\",\n        \"SPLEEN PALPABLE\",\"SPIDERS\",\"ASCITES\",\"VARICES\",\"BILIRUBIN\",\"ALK PHOSPHATE\", \n        \"SGOT\", \"ALBUMIN\", \"PROTIME\", \"HISTOLOGY\"]","77c2856f":"df = pd.read_csv(\"\/kaggle\/input\/hepatitis.data\", names=cols)\ndf.head()","9f5b8227":"df.columns = df.columns.str.lower().str.replace(' ','_')\ndf = df.replace('?',0)\ndf.head()","5c52ebdd":"#df.dtypes\ndf.columns[df.dtypes=='object']","0cdbaffb":"# ignoring 'albumin' and 'bilirubin' as they are float values\ndf[['steroid', 'fatigue', 'malaise', 'anorexia', 'liver_big', 'liver_firm',\n       'spleen_palpable', 'spiders', 'ascites', 'varices', \n       'alk_phosphate', 'sgot', 'protime']] = df[['steroid', 'fatigue', 'malaise', 'anorexia', 'liver_big', 'liver_firm',\n       'spleen_palpable', 'spiders', 'ascites', 'varices', \n       'alk_phosphate', 'sgot', 'protime']].astype(int)\n\ndf[['albumin','bilirubin']]=df[['albumin','bilirubin']].astype(float)","c3f12124":"df.dtypes","3ba953ce":"df.shape","096b4057":"## check for missing values \ndf.isnull().sum()","62561161":"df.describe()","d280a666":"## values \ntarget_label = {\"Die\":1, \"Live\":2}\n# plotting \nplt.figure(figsize=(8,4))\ndf['class'].value_counts().plot(kind='bar')","21908c18":"### Gender classification\n# 1=male  2=female\nprint(df['sex'].unique())\nprint(df['sex'].value_counts())\n\n#plot gender\nplt.figure(figsize=(8,4))\ndf['sex'].value_counts().plot(kind='bar')","9c635569":"### frequency distribution table using Age range\n### dividing age groups\nlabels = [\"< 10\",\"10-20\",\"20-30\",\"30-40\",\"40-50\",\"50-60\", \"60-70\",\" > 70\"]\nbins = [0,10,20,30,40,50,60,70,80]\nfreq_df = df.groupby(pd.cut(df['age'], bins=bins, labels=labels)).size()\nfreq_df = freq_df.reset_index(name='count')\nfreq_df","1b9dca4c":"# pie chart\nlabels = [\"< 10\",\"10-20\",\"20-30\",\"30-40\",\"40-50\",\"50-60\", \"60-70\",\" > 70\"]\nfig1, ax1 = plt.subplots()\nax1.pie(freq_df['count'], labels = labels, autopct = '1%.1f%%')\nax1.axis('equal')\nplt.show()","3394c15f":"# plot of frequency\nwidth=0.6\nplt.bar(freq_df['age'],freq_df['count'],width)\nplt.ylabel('Counts')\nplt.title('Frequency count of Age')","7db9dbd8":"# Methods\n# boxplt, scatterplot, Zscore, InterQuartile range","c619bc56":"# Boxplot ( Univariate )\nimport seaborn as sns\nsns.boxplot(df['age'])","05bb0a21":"sns.boxplot(df['alk_phosphate'])","76374f4e":"# scatterplot ( multivariate )\nsns.scatterplot(df['age'], df['albumin'])","e2c82e0d":"sns.scatterplot(x= df['albumin'], y=df['age'],hue = df['sex'], palette = ['green','red'], data=df)","a5a69ead":"# using IQR\n# H-spread \/ Mid_spread\n# measure the statistical dispersion\n# IQR = quantile 3(75)- 1(25)","d785686a":"q1 = df.quantile(q = 0.25)\nq3 = df.quantile(q = 0.75)\nIQR = q3-q1\nIQR","f6dcb97e":"## get actual datapoint that is an outlier\n# True = Outliers\n(df < (q1-1.5*IQR))| (df > (q3+1.5*IQR))","ccab31ab":"# removing all values that are outliers i.e True values\ndf_no_outlier  = df[~((df < (q1-1.5*IQR))| (df > (q3+1.5*IQR))).any(axis=1)]\ndf_no_outlier.head()","97502a21":"print(df_no_outlier.shape)\nprint(df.shape)","8358fdf8":"# plot of distribution of data\ndf.hist(bins=50, figsize=(20,15))\nplt.show()","d51d29fa":"df_no_outlier.hist(bins=50, figsize=(20,15))\nplt.show()","b5a6c270":"# SelectKbest\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","d58d41b3":"# features and labels\ndf.head()","0ccbd780":"x_features = df[['age', 'sex', 'steroid', 'antivirals', 'fatigue', 'malaise',\n       'anorexia', 'liver_big', 'liver_firm', 'spleen_palpable', 'spiders',\n       'ascites', 'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'protime', 'histology']]\n\ny_label = df['class']","72d78c7b":"skb = SelectKBest(score_func=chi2, k=10)\nbest_feature_fit = skb.fit(x_features, y_label)","05f90ffb":"print(\"scores: \",best_feature_fit.scores_)","911904b2":"# transform\nb_2 = best_feature_fit.transform(x_features)\nb_2","d085af1b":"# mapping to features and values\nf_score = pd.DataFrame(best_feature_fit.scores_,columns=['Feature Scores'])\nf_score.head()","42d68f30":"features_cols = pd.DataFrame(x_features.columns, columns=['Features Names']) \nfeatures_cols.head()","9db401b6":"# concat those 2 df\n# higher the number, the more importatnt feature \nbest_feat_df = pd.concat([f_score,features_cols], axis=1)\nbest_feat_df","efb5e7fc":"# get 10 high values\nbest_feat_df.nlargest(10,'Feature Scores')","68e9f151":"# Recurssive Feature Elimination\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n","fea71b98":"lr = LogisticRegression() ","8b6eb7da":"rfe = RFE(lr, 8)\nrfe_fit = rfe.fit(x_features, y_label)","2342a1ed":"# selection \nselected_features = pd.DataFrame(rfe_fit.support_, columns=['Selected Features'])# selection \nranking_features = pd.DataFrame(rfe_fit.ranking_, columns=['Ranking Features'])\nrfe_feature_df = pd.concat([features_cols, selected_features,ranking_features], axis=1)\nrfe_feature_df","08dc23ed":"# eliminate lower values ranking or True\n\n### Feature_Importance extraction\n# Extra tree classifier\nfrom sklearn.ensemble import ExtraTreesClassifier","0bdcdb7c":"clf = ExtraTreesClassifier()\nclf.fit(x_features,y_label)","0698345a":"print(clf.feature_importances_)","861f4b1d":"feature_importance_df = pd.Series(clf.feature_importances_, index=x_features.columns)\nfeature_importance_df","7a4de2f9":"df.corr()","03bcb797":"#heat map for correlation\nplt.figure(figsize=(20,10))\nsns.heatmap(x_features.corr(), annot=True)","e66ea4d2":"## Model deployment##\n# Feature and Labels\n# train test split\n# Logistic Regression\n# KNN \n# DCT\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","116ddcb1":"# Initial features\nx_features.head()","68ba60dc":"y_labels = df['class']\ny_labels.shape","1c12b52a":"# Selected Features\nbest_feat_df.nlargest(12,'Feature Scores')['Features Names'].unique()","ed1290f9":"x_features_best = df[['age', 'sex', 'steroid', 'antivirals', 'fatigue',\n       'ascites', 'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'protime', 'histology']]","34e4965d":"# original dataset\nX_train, X_test, y_train, y_test = train_test_split(x_features,y_labels, test_size = 0.30, random_state = 3)","b70d8762":"# best features of dataset\nX_train_b, X_test_b , y_train_b, y_test_b = train_test_split(x_features_best,y_labels, test_size = 0.30, random_state = 3)","706424fc":"# Logistic Regression\nlr = LogisticRegression(max_iter=210, C=2)\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint(\"Training Accuracy on New feature dataset\", accuracy_score(y_train, lr.predict(X_train)))\nprint(\"Testing Accuracy on Original dataset\", accuracy_score(y_test, y_pred))","466a9395":"lr_best = LogisticRegression(max_iter=210, C=2)\nlr_best.fit(X_train_b, y_train_b)\ny_pred_b = lr_best.predict(X_test_b)\nprint(\"Training Accuracy on New feature dataset\", accuracy_score(y_train_b, lr_best.predict(X_train_b)))\nprint(\"Testing Accuracy on New feature dataset\", accuracy_score(y_test_b, y_pred_b))","e14375bd":"## KNN\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(\"Training Accuracy on original dataset\", accuracy_score(y_train, knn.predict(X_train)))\nprint(\"Testing Accuracy on Original dataset\", accuracy_score(y_test, y_pred))","b6a81f08":"## KNN\nknn_best = KNeighborsClassifier(n_neighbors=5)\nknn_best.fit(X_train_b, y_train_b)\ny_pred_b = knn_best.predict(X_test_b)\nprint(\"Training Accuracy on New feature dataset\", accuracy_score(y_train_b, knn_best.predict(X_train_b)))\nprint(\"Testing Accuracy on New feature dataset\", accuracy_score(y_test_b, y_pred_b))","470bd97f":"## Decision Tree\ndct = DecisionTreeClassifier()\ndct.fit(X_train, y_train)\ny_pred = dct.predict(X_test)\nprint(\"Training Accuracy on original dataset\", accuracy_score(y_train, dct.predict(X_train)))\nprint(\"Testing Accuracy on Original dataset\", accuracy_score(y_test, y_pred))","ba714e42":"dct_best = DecisionTreeClassifier()\ndct_best.fit(X_train_b, y_train_b)\ny_pred_b = dct_best.predict(X_test_b)\nprint(\"Training Accuracy on New feature dataset\", accuracy_score(y_train_b, dct_best.predict(X_train_b)))\nprint(\"Testing Accuracy on New feature dataset\", accuracy_score(y_test_b, y_pred_b))","9c323775":"## single prediction\nx1 = X_test.iloc[1]\nx1","86152607":"y_labels.iloc[1]","52dc4308":"## Single Prediction\nx1_pred = lr.predict(np.array(x1).reshape(1,-1))\nx1_pred","0cbef3f7":"x1_pred = knn.predict(np.array(x1).reshape(1,-1))\nx1_pred","6ecfeaef":"x1_pred = dct.predict(np.array(x1).reshape(1,-1))\nx1_pred","dff1ff8f":"# 1- Die \n# 2-Live","ea3563c7":"Using matplotlib, graphs with diferrent dimensions are plotted for simple EDA.","53ca3325":"Column names are lowered for better understanding ","685f63dd":"Feature selection and importance (strong realtion with output)\n","db80c81f":"Checking for outliers i.e. Univariate and Multivariate analysis","3693f348":"Convert all columns to numeric i.e. int or float","8a17fc19":"Model deployment","10d1f939":"Here Columns Are assigned names ","0f3050a0":"The Notebook uses different Machine Learning algorithms to predict whether the person will die or survive based on characteristics w.r.t. Hepatatis. The notebook has EDA and Prediction. It uses Logistic Regression, Decision tree calssifier and KNN. The dataset is taken from UCI repositry."}}