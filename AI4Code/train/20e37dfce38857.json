{"cell_type":{"ce35b8bb":"code","e8caf3ae":"code","23f5760c":"code","f111a7ef":"code","203ef3f8":"code","1e0babc5":"code","8fa416bd":"code","2084c283":"code","6c103de3":"code","e5f68ec7":"code","983e5e1b":"code","c04daf57":"code","611b0f9d":"code","c11ca392":"code","a8a14712":"code","08556f14":"code","ad6b80c3":"code","15359284":"code","495a22b1":"code","aad2ab01":"code","2e406364":"code","8c45c156":"code","eba85eee":"code","5fdb123c":"code","6ad5714c":"code","77918465":"code","03141d7e":"code","7ae98b20":"code","6185f394":"code","1be42e6e":"code","8fc6d448":"code","ae0a0cc4":"code","00e663e8":"code","0eafaf38":"code","4fe12f93":"code","3549374d":"code","d86f86b6":"code","8a26203f":"code","008c783f":"code","eebff5cf":"markdown","9de9821f":"markdown","717a498c":"markdown","5736480b":"markdown","1ca641bb":"markdown","50d2f31b":"markdown","019139b7":"markdown","03e568f7":"markdown","89430e52":"markdown","872349be":"markdown","ea1f1283":"markdown","b3d8bb20":"markdown","f7ace5c0":"markdown","16ba83b1":"markdown","66da513a":"markdown"},"source":{"ce35b8bb":"import pandas as pd #data preprocessing\nimport numpy as np #linear algebra ","e8caf3ae":"import warnings ## to avoid warning messages\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')","23f5760c":"covid=pd.read_csv(\"..\/input\/covid19-case-surveillance-public-use-dataset\/COVID-19_Case_Surveillance_Public_Use_Data.csv\")","f111a7ef":"covid.isnull().sum()","203ef3f8":"import seaborn as sns \nimport matplotlib.pyplot as plt","1e0babc5":"# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","8fa416bd":"%%time\ncovid.head()","2084c283":"covid.shape","6c103de3":"covid.nunique()","e5f68ec7":"covid= covid.drop(['pos_spec_dt','onset_dt'],axis =1)","983e5e1b":"covid=covid.dropna()","c04daf57":"covid.isnull().sum() ##check if any null values present","611b0f9d":"covid.shape","c11ca392":"covid.describe()","a8a14712":"colums = ['current_status', 'sex', 'age_group', 'Race and ethnicity (combined)', 'hosp_yn','icu_yn', 'death_yn', 'medcond_yn']\nfor col in colums:\n    print(col)\n    print(covid[colums].value_counts())\n    print(\"______________________\")","08556f14":"covid.describe().T","ad6b80c3":"#Unique values in data\ncovid.nunique()","15359284":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('medcond_yn ',fontsize = 20)\ncovid['medcond_yn'].value_counts().plot.pie(autopct=\"%1.1f%%\")","495a22b1":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('death_yn',fontsize = 20)\ncovid['death_yn'].value_counts().plot.pie(autopct=\"%1.1f%%\")","aad2ab01":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('hosp_yn',fontsize = 20)\ncovid['hosp_yn'].value_counts().plot.pie(autopct=\"%1.1f%%\")","2e406364":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('icu_yn',fontsize = 20)\ncovid['icu_yn'].value_counts().plot.pie(autopct=\"%1.1f%%\")","8c45c156":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Race and ethnicity (combined)',fontsize = 20)\ncovid['Race and ethnicity (combined)'].value_counts().plot.pie(autopct=\"%1.1f%%\")","eba85eee":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.figure(figsize=(20, 50))\nsns.heatmap(covid.isnull(), cbar=False)","5fdb123c":"print(\"Start Date:\", covid['cdc_report_dt'].min())\nprint(\"End Date:\", covid['cdc_report_dt'].max())","6ad5714c":"covid['age_group'].value_counts()","77918465":"data = covid.copy()","03141d7e":"data['sex'].value_counts()","7ae98b20":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()","6185f394":"data['sex'].value_counts()","1be42e6e":"# mapp = {'Female':1,'Male':2,'Unknown':3,'Missing':4,'Other':5}\n# data['sex'] = data['sex'].apply(lambda x:mapp[x])\n\ndata['sex'] = data['sex'].map({'Female':0,'Male':1,'Unknown':2,'Missing':3,'Other':4})\nprint(data.head())\n","8fc6d448":"data[\"current_status\"] = lb_make.fit_transform(data[\"current_status\"])\ndata[\"hosp_yn\"] = lb_make.fit_transform(data[\"hosp_yn\"])\ndata[\"icu_yn\"] = lb_make.fit_transform(data[\"icu_yn\"])\ndata[\"death_yn\"] = lb_make.fit_transform(data[\"death_yn\"])\ndata[\"medcond_yn\"] = lb_make.fit_transform(data[\"medcond_yn\"])","ae0a0cc4":"data.head()","00e663e8":"covid.shape","0eafaf38":"X =  data[['current_status','hosp_yn','icu_yn','medcond_yn','sex']]\ny = data['death_yn']","4fe12f93":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","3549374d":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log","d86f86b6":"##XGBoost\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n","8a26203f":"Y_pred = model.predict(X_test)\nacc_log = round(model.score(X_train, y_train) * 100, 2)\nacc_log","008c783f":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\nacc_decision_tree","eebff5cf":"# To check if any null values","9de9821f":"#XG Boost","717a498c":"# drop columns which are not significant","5736480b":"**converting Sex feature to a new feature called Gender where female=0 and male=1**","1ca641bb":"# To check unique values in each columns of the dataset","50d2f31b":"# **Some Interesting Insights from Visualization**","019139b7":"#Decision tree","03e568f7":"**Define X and y**","89430e52":"# Logistic regresssion","872349be":"# Converting categorical feature to numeric\u00b6","ea1f1283":"# drop rows having missing values","b3d8bb20":"# Data Preparation For Model","f7ace5c0":"# Load the Data","16ba83b1":"**Train test split**","66da513a":"## **Shape of the dataset**"}}