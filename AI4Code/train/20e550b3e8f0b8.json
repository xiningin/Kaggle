{"cell_type":{"60ea3a3e":"code","c7dad40d":"code","a31a87b7":"code","2205c14f":"code","e26abb79":"code","f8e3aa75":"code","8337469d":"code","25088344":"code","3533a669":"code","e3750974":"code","d97acc10":"code","3db1cf77":"code","b5dea2bf":"code","1adf918d":"code","1c31ee37":"code","10e68b27":"code","724d1294":"code","86c3b3c6":"code","5bfb5cc8":"code","33e29d4d":"code","82e58168":"code","935ea5cf":"code","6ed42c61":"code","3fb190e7":"code","8d2218a2":"code","ae08a386":"code","a54dce1c":"code","b5e75e5c":"markdown","ea34c189":"markdown","c034baaa":"markdown","2e252bd4":"markdown","c158ed70":"markdown","84fda918":"markdown"},"source":{"60ea3a3e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c7dad40d":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\ndf_train","a31a87b7":"df_train.dtypes","2205c14f":"# Check for duplicate values\ndf_train.duplicated().sum()\ndf_test.duplicated().sum()","e26abb79":"df = df_train.copy()\ndf['row_id'] = df_train['row_id']\ndf_train.drop('row_id', axis = 1, inplace = True)\ndf_test.drop('row_id', axis = 1, inplace = True)","f8e3aa75":"df_train.columns","8337469d":"df_train['country'].value_counts().plot(kind = 'bar', color = 'blue');","25088344":"df_train['store'].value_counts().plot(kind = 'bar', color = 'blue');","3533a669":"df_train['product'].value_counts().plot(kind = 'bar', color = 'blue');","e3750974":"sns.boxplot(x ='product', y = 'num_sold', palette = \"coolwarm\", data = df_train);","d97acc10":"sns.boxplot(x = 'country', y = 'num_sold', data = df_train,palette = \"coolwarm\", hue = 'product');","3db1cf77":"sns.boxplot(x = 'store', y = 'num_sold', data = df_train, palette = \"coolwarm\", hue = 'product');","b5dea2bf":"df_train['date'] = pd.to_datetime(df_train['date'])\ndf_test['date'] = pd.to_datetime(df_test['date'])","1adf918d":"df_train['year'] = df_train['date'].dt.year\ndf_train['month'] = df_train['date'].dt.month\ndf_train['day'] = df_train['date'].dt.day\n\ndf_test['year'] = df_test['date'].dt.year\ndf_test['month'] = df_test['date'].dt.month\ndf_test['day'] = df_test['date'].dt.day\n\ndf_train","1c31ee37":"sns.lineplot(data=df_train, x=\"year\", y=\"num_sold\", palette = \"coolwarm\", hue = 'store');","10e68b27":"#rename month column for prettier x axis\ndf_train_copy = df_train.copy()\ndf_train_copy['month'].replace({1: \"Jan\", 2:\"Feb\", 3:\"Mar\", 4:\"Apr\", 5:\"May\", 6:\"Jun\", 7: \"Jul\", 8:\"Aug\", 9:\"Sep\", 10: \"Oct\", 11: \"Nov\", 12:\"Dec\"}, inplace = True)\n\n#Create subplots\nfig, ax = plt.subplots(1,2, sharey=True, figsize=(25,5))\n\n# adjust the suptitle for the subplots\nplt.subplots_adjust(top=0.82, left = 0.42)\n\n#remove grid\nsns.despine()\n\nfig.suptitle(\"KaggleMart VS KaggleRama Sales\/Year\", size = 15)\n\n#add plot labels and position them to the left\nax[0].set_title(\"KaggleMart\", loc = 'left')\nax[1].set_title(\"KaggleRama\", loc = 'left')\n\n#create lineplots\nsns.lineplot(x='month', y='num_sold', hue='year', ci = None, legend = False, marker = 'o', palette = \"coolwarm\", data=df_train_copy.loc[df_train_copy['store'] == 'KaggleMart'], ax = ax[0]);\nsns.lineplot(x='month', y='num_sold', hue='year', ci = None, marker = 'o', palette = \"coolwarm\", data=df_train_copy.loc[df_train_copy['store'] == 'KaggleRama'], ax = ax[1]);\n\n#to reduce legend duplication\nax[1].legend(loc=(1.1, 0.5));","724d1294":"# drop date column\ndf_train.drop('date', axis = 1, inplace = True)\ndf_test.drop('date', axis = 1, inplace = True)","86c3b3c6":"# One hot encoder\ndf_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)","5bfb5cc8":"# Add back the row_id\ndf_train['row_id'] = df_train.index\ndf_test['row_id'] = df_test.index\n\nX_train = df_train.drop('num_sold', axis = 1)\ny_train = df_train['num_sold']","33e29d4d":"# Linear Regression\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, y_train)\n\ny_pred = reg.predict(df_test)","82e58168":"reg.score(df_test,y_pred)","935ea5cf":"# dataframe=pd.DataFrame({\"row_id\":df['row_id'],'num_sold':y_pred})\noutput = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\noutput['num_sold']= y_pred\n\n#idea comes from https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/299162\noutput['num_sold'] = output['num_sold'].apply(np.ceil)\noutput.to_csv('linreg_submission.csv',index =False)","6ed42c61":"output","3fb190e7":"# # Search for the best hyperparameters\n# from sklearn.model_selection import GridSearchCV\n\n# xgb1 = XGBRegressor()\n# parameters = {\n#               'objective':['reg:linear'],\n#               'learning_rate': [.03, 0.05, .07], \n#               'max_depth': [5, 6, 7],\n#               'min_child_weight': [4],\n#               'silent': [1],\n#               'subsample': [0.7],\n#               'colsample_bytree': [0.7],\n#               'n_estimators': [500]}\n\n# xgb_grid = GridSearchCV(xgb1,\n#                         parameters,\n#                         cv = 2,\n#                         n_jobs = 5,\n#                         verbose=True)\n\n# xgb_grid.fit(X_train,\n#          y_train)\n\n# print(xgb_grid.best_score_)\n# print(xgb_grid.best_params_)","8d2218a2":"from xgboost import XGBRegressor \n# define model\nmodel = XGBRegressor(colsample_bytree = 0.7,\n                     learning_rate = 0.07,\n                     max_depth= 10,\n                     min_child_weight= 4,\n                     n_estimators = 700,\n                     subsample = 0.7)\n# fit model\nmodel.fit(X_train, y_train)\n# make a prediction\ny_pred = model.predict(df_test)","ae08a386":"# dataframe=pd.DataFrame({\"row_id\":df['row_id'],'num_sold':y_pred})\noutput = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\noutput['num_sold']= y_pred\n\n#idea comes from https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/299162\noutput['num_sold'] = output['num_sold'].apply(np.ceil)\noutput.to_csv('xgboost_submission3.csv',index =False)","a54dce1c":"output","b5e75e5c":"## ***Exploratory Data Analysis***","ea34c189":"## ***Objective***\n\nFigure out which of the store chains would have the best sales going forward. Build forecasting models to help us decide.","c034baaa":"As we can see from the lineplot KaggleRama had higher sales for all years.","2e252bd4":"## ***Modelling***","c158ed70":"We can see from the previous graph that:\n\n* KaggleRama had higher sales compared to KaggleMart.\n* The highest product sold was Kaggle hat, followed by Kaggle mug, and lastly Kaggle sticker.","84fda918":"From the previous graph we can see that:\n\n* Normay bought the largest number of products compared to Sweden and Finland.\n* Kaggle hat was the most sold product in every country.\n* Kaggle sticker was the least sold product in every country."}}