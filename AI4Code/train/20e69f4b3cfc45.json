{"cell_type":{"534a52d1":"code","0df4c6c4":"code","be224bb2":"code","64f26711":"code","d030318e":"code","a43be15d":"code","d9de2c73":"code","434eac82":"code","fbfb4e15":"code","582a1b82":"code","6707f1c6":"code","2f1e0fc9":"code","a6ab727d":"code","326f20ac":"code","ccc68945":"markdown","fb0b0907":"markdown","d413506c":"markdown","f3625a6e":"markdown","efe1f6ef":"markdown","84e3c8a8":"markdown","18b590e7":"markdown","c7a355cf":"markdown","7c9babd7":"markdown"},"source":{"534a52d1":"# Used most of coding from this kernel \nimport optuna\nimport lightgbm as lgb\nimport pickle\n\nimport riiideducation\nimport dask.dataframe as dd\nimport  pandas as pd\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score","0df4c6c4":"START_IDX = 80000000","be224bb2":"train = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                usecols=[1, 2, 3,4,7,8,9], dtype={'timestamp': 'int64', 'user_id': 'int32' ,'content_id': 'int16','content_type_id': 'int8','answered_correctly':'int8','prior_question_elapsed_time': 'float32','prior_question_had_explanation': 'boolean'}\n              )\ntrain = train[train.content_type_id == False]\n#arrange by timestamp\n\n\ntrain = train.sort_values(['timestamp'], ascending=True)\n\ntrain.drop(['timestamp','content_type_id'], axis=1,   inplace=True)\n\nresults_c = train[['content_id','answered_correctly']].groupby(['content_id']).agg(['mean'])\nresults_c.columns = [\"answered_correctly_content\"]\n\nresults_u = train[['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum'])\nresults_u.columns = [\"answered_correctly_user\", 'sum']","64f26711":"#reading in question df\nquestions_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv',\n                            usecols=[0,1, 3,4],\n                            dtype={'question_id': 'int16',\n                              'part': 'int8','bundle_id': 'int8','tags': 'str'}\n                          )\ntag = questions_df[\"tags\"].str.split(\" \", n = 10, expand = True) \ntag.columns = ['tags1','tags2','tags3','tags4','tags5','tags6']\n\nquestions_df =  pd.concat([questions_df,tag],axis=1)\nquestions_df['tags1'] = pd.to_numeric(questions_df['tags1'], errors='coerce')\nquestions_df['tags2'] = pd.to_numeric(questions_df['tags2'], errors='coerce')\nquestions_df['tags3'] = pd.to_numeric(questions_df['tags3'], errors='coerce')\nquestions_df['tags4'] = pd.to_numeric(questions_df['tags4'], errors='coerce')\nquestions_df['tags5'] = pd.to_numeric(questions_df['tags5'], errors='coerce')\nquestions_df['tags6'] = pd.to_numeric(questions_df['tags6'], errors='coerce')","d030318e":"X = train.iloc[START_IDX:,:]\nX['prior_question_had_explanation'].fillna(False, inplace=True)\nX = pd.merge(X, results_u, on=['user_id'], how=\"left\")\nX = pd.merge(X, results_c, on=['content_id'], how=\"left\")\nX = pd.merge(X, questions_df, left_on = 'content_id', right_on = 'question_id', how = 'left')\n\nX=X[X.answered_correctly!= -1 ]\nX=X.sort_values(['user_id'])\nY = X[[\"answered_correctly\"]]\nX = X.drop([\"answered_correctly\"], axis=1)","a43be15d":"print('Training data shrinked from {:,} records ({:,} users) to {:,} records ({:,} users).'.format(train.shape[0], train['user_id'].nunique(), X.shape[0], X['user_id'].nunique()))","d9de2c73":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\nX[\"prior_question_had_explanation_enc\"] = lb_make.fit_transform(X[\"prior_question_had_explanation\"])\nX.head()\n\nX = X[['answered_correctly_user', 'answered_correctly_content', 'sum','bundle_id','part','prior_question_elapsed_time','prior_question_had_explanation_enc','tags1','tags2','tags3']] \nX.fillna(0.5,  inplace=True)\n\nfrom  sklearn.model_selection import train_test_split\nXt, Xv, Yt, Yv = train_test_split(X, Y, test_size = 0.2, shuffle=False)","434eac82":"lgb_train = lgb.Dataset(Xt, Yt)\nlgb_eval = lgb.Dataset(Xv, Yv)\n\nparams = {\n    'num_leaves': 498,\n    'max_depth': 16,\n    'min_child_weight': 12,\n    'feature_fraction': 0.9475614419516545,\n    'bagging_fraction': 0.8023416987117281,\n    'bagging_freq': 1,\n    'min_child_samples': 79,\n    'lambda_l1': 0.001840839009120818,\n    'lambda_l2': 2.209995089627088e-06,\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'auc',\n    'learning_rate': 0.04,\n    'early_stopping_rounds': 10,\n    'is_unbalance': True\n}","fbfb4e15":"model = lgb.train(params, lgb_train, valid_sets=[lgb_train, lgb_eval], verbose_eval=1000)","582a1b82":"# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')\n\nfi = pd.DataFrame()\nfi['features'] = X.columns.values.tolist()\nfi['importance'] = model.feature_importance(importance_type=\"gain\")\n\nsns.barplot(x='importance', y='features', data=fi.sort_values(by='importance', ascending=True))","6707f1c6":"y_pred = model.predict(Xv)\ny_true = np.array(Yv)\n\nprint('CV score (AUC) = {}'.format(roc_auc_score(y_true, y_pred)))","2f1e0fc9":"file = 'trained_model.pkl'\npickle.dump(model, open(file, 'wb'))\nprint('Trained LGB model was saved!')","a6ab727d":"# env = riiideducation.make_env()","326f20ac":"# iter_test = env.iter_test()\n# for (test_df, sample_prediction_df) in iter_test:\n#     test_df = test_df.sort_values(['user_id','timestamp'], ascending=False)\n#     test_df['answer_time'] = test_df.groupby(['user_id'])['prior_question_elapsed_time'].shift(1)\n    \n#     test_df = pd.merge(test_df, results_u, on=['user_id'],  how=\"left\")\n#     test_df = pd.merge(test_df, results_c, on=['content_id'],  how=\"left\")    \n#     test_df = pd.merge(test_df, questions_df, left_on = 'content_id', right_on = 'question_id', how = 'left')    \n#     test_df['answered_correctly_user'].fillna(0.5, inplace=True)\n#     test_df['answered_correctly_content'].fillna(0.5, inplace=True)\n#     test_df['sum'].fillna(0, inplace=True)\n#     test_df['prior_question_had_explanation'].fillna(False, inplace=True)\n#     test_df[\"prior_question_had_explanation_enc\"] = lb_make.fit_transform(test_df[\"prior_question_had_explanation\"])\n#     test_df['answered_correctly'] =  model.predict(test_df[['answered_correctly_user', 'answered_correctly_content', 'sum','bundle_id','part','prior_question_elapsed_time','prior_question_had_explanation_enc',\n#                                                            'tags1','tags2','tags3']])\n#     env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","ccc68945":"# Config","fb0b0907":"# Save Model\nWe can simply use pickle:)","d413506c":"# Preprocess","f3625a6e":"# Predictions","efe1f6ef":"# Feature importance","84e3c8a8":"# Model fitting\nI use a set of tuned hyperparameters used in my another kernel: [LGB hyperparameter tuning](https:\/\/www.kaggle.com\/code1110\/riiid-lgb-hyperparameter-tuning).","18b590e7":"The data size is huge, and thus it takes very long to get a submission score if we do training and inference in a single notebook. One way to avoid this long-waiting time is to split training and inference in separate notebooks. Here I demonstrate how to do it.\n\nIn this notebook only training is done.\n\nThis notebook is heavily based on \n\n- https:\/\/www.kaggle.com\/lgreig\/simple-lgbm-baseline\n- https:\/\/www.kaggle.com\/jsylas\/riiid-lgbm-starter\n\nPlease upvote these notebooks too.","c7a355cf":"# Validation Score","7c9babd7":"# Load data"}}