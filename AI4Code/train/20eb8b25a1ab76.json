{"cell_type":{"f281e508":"code","f9cd8f37":"code","f3ed81f5":"code","423d2f62":"code","3aa914e8":"code","bb3092f7":"code","458d9def":"code","fd92aab8":"code","2837c7eb":"code","3cbb146e":"code","d20b0463":"code","75fe2f89":"code","859143cc":"code","73241455":"code","c567bcd1":"code","d142d93b":"code","7436c5cf":"code","1bdc1e5f":"code","f8657104":"code","302ab29d":"code","7494349d":"code","5ea1441b":"code","90e24f30":"code","ea80dc85":"code","fc4aca54":"code","40dc5574":"code","eeeb27f1":"code","906237fe":"code","0fa597c6":"code","e3ed97f4":"code","de2449d3":"code","92a6307f":"code","7334d47a":"code","68f7d92d":"code","e00794e4":"code","f2659a10":"code","42bbb786":"code","d7827677":"code","4093fbd1":"code","0795f091":"code","c28bd0ba":"code","59dd1d55":"code","5dbbb935":"code","dd3436af":"code","b273b4b7":"code","cb405653":"code","82be5796":"code","d2a986da":"code","8856103d":"code","04fd4ebe":"code","eaea0dd0":"code","cb9793da":"code","c11b372c":"code","7554f446":"code","2e3b0309":"code","d9c803f9":"code","0dcc2274":"code","0929963b":"code","7be13ccd":"code","175e7163":"code","794f06f2":"code","bb42a0a8":"markdown"},"source":{"f281e508":"import numpy as np \nimport pandas as pd \nimport os\nimport cufflinks as cf\ncf.set_config_file(offline=True)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom xgboost import XGBClassifier\nfrom vecstack import stacking\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n!pip install sweetviz\nimport sweetviz as sv\n","f9cd8f37":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf.head()","f3ed81f5":"iris_report = sv.analyze(df)\niris_report.show_html('iris.html')","423d2f62":"#!ls\n#!conda install dtale -c conda-forge -y\n#!pip install flask_ngrok\n#!pip install plotly\n#!pip install cufflinks","3aa914e8":"df.info()","bb3092f7":"df.groupby(by='Species').describe().T","458d9def":"ax = sns.pairplot(df, hue=\"Species\")","fd92aab8":"_ = sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=df)","2837c7eb":"_ = sns.boxplot(x=\"Species\", y=\"PetalWidthCm\", data=df)","3cbb146e":"_ = sns.boxplot(x=\"Species\", y=\"SepalLengthCm\", data=df)","d20b0463":"_ = sns.boxplot(x=\"Species\", y=\"SepalWidthCm\", data=df)","75fe2f89":"g = sns.FacetGrid(df, col=\"Species\", hue=\"Species\")\n_=g.map(sns.kdeplot, \"PetalLengthCm\", \"PetalWidthCm\", alpha=.7)\n_=g.add_legend()","859143cc":"g = sns.FacetGrid(df, col=\"Species\", hue=\"Species\")\n_=g.map(sns.kdeplot, \"SepalLengthCm\", \"SepalWidthCm\", alpha=.7)\n_=g.add_legend()","73241455":"g = sns.FacetGrid(df, col=\"Species\", hue=\"Species\")\n_=g.map(sns.kdeplot, \"PetalLengthCm\", \"SepalWidthCm\", alpha=.7)\n_=g.add_legend()","c567bcd1":"g = sns.FacetGrid(df, col=\"Species\", hue=\"Species\")\n_=g.map(sns.kdeplot, \"PetalWidthCm\", \"SepalLengthCm\", alpha=.7)\n_=g.add_legend()","d142d93b":"df.Species.value_counts()","7436c5cf":"df[df.columns[1:5]].plot(kind='hist')","1bdc1e5f":"for s in df.Species.unique():\n    df.loc[df.Species==s, df.columns[1:5]].plot(kind='hist', title=s)","f8657104":"df.Species.value_counts().plot(kind='bar')","302ab29d":"df[df.columns[1:5]].plot(kind='density')","7494349d":"df[df.columns[1:5]].plot(kind='box')","5ea1441b":"for s in df.Species.unique():\n    df.loc[df.Species==s, df.columns[1:5]].plot(kind='box', title=s)","90e24f30":"df.Species.replace({'Iris-versicolor' : 3, 'Iris-virginica' : 2, 'Iris-setosa' : 1 }, inplace=True)\ndf.head()","ea80dc85":"y = df[['Species']]\nX = df.loc[:,df.columns[1:5]]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","fc4aca54":"clf = RandomForestClassifier(max_depth=4, n_estimators=100, random_state=0)\nclf.fit(X_train, np.ravel(y_train))\ny_pred = clf.predict(X_test)","40dc5574":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","eeeb27f1":"X.columns","906237fe":"from sklearn.inspection import plot_partial_dependence\nfeatures = [2, 3, (0, 3), (1,2)]\nplot_partial_dependence(clf, X, features, target=1, n_cols=4) \n# fig.set_figwidth(8)\n# fig.set_figheight(15)\n# fig.tight_layout()\nplt.gcf().set_figwidth(8)","0fa597c6":"from sklearn.inspection import plot_partial_dependence\nfeatures = [2, 3, (0, 3), (1,2)]\nplot_partial_dependence(clf, X, features, target=2, n_cols=4) \n# fig.set_figwidth(8)\n# fig.set_figheight(15)\n# fig.tight_layout()\nplt.gcf().set_figwidth(8)","e3ed97f4":"from sklearn.inspection import plot_partial_dependence\nfeatures = [2, 3, (0, 3), (1,2)]\nplot_partial_dependence(clf, X, features, target=3, n_cols=4) \n# fig.set_figwidth(8)\n# fig.set_figheight(15)\n# fig.tight_layout()\nplt.gcf().set_figwidth(8)","de2449d3":"clf.classes_","92a6307f":"y_test[:5]","7334d47a":"import shap\n\nshap.initjs()\n\nexplainer = shap.KernelExplainer(clf.predict_proba, X_train)\nshap_values = explainer.shap_values(X_test)\n\n","68f7d92d":"# plot the SHAP values for the Setosa output of the first instance\nshap.force_plot(explainer.expected_value[0], shap_values[0][0,:], X_test.iloc[0,:])","e00794e4":"shap.force_plot(explainer.expected_value[1], shap_values[1][0,:], X_test.iloc[0,:])","f2659a10":"shap.force_plot(explainer.expected_value[2], shap_values[2][0,:], X_test.iloc[0,:])","42bbb786":"shap_values = explainer.shap_values(X_test)","d7827677":"\nshap.force_plot(explainer.expected_value[0], shap_values[0], X_test)","4093fbd1":"shap.force_plot(explainer.expected_value[1], shap_values[1], X_test)","0795f091":"shap.force_plot(explainer.expected_value[2], shap_values[2], X_test)","c28bd0ba":"shap.dependence_plot(\"PetalLengthCm\", shap_values[0], X_test)","59dd1d55":"shap.dependence_plot(\"PetalWidthCm\", shap_values[0], X_test)","5dbbb935":"shap.dependence_plot(\"PetalLengthCm\", shap_values[1], X_test)","dd3436af":"shap.dependence_plot(\"PetalWidthCm\", shap_values[1], X_test)","b273b4b7":"shap.dependence_plot(\"PetalLengthCm\", shap_values[2], X_test)","cb405653":"shap.dependence_plot(\"PetalWidthCm\", shap_values[2], X_test)","82be5796":"shap.summary_plot(shap_values[0], X_test)","d2a986da":"shap.summary_plot(shap_values[1], X_test)","8856103d":"shap.summary_plot(shap_values[2], X_test)","04fd4ebe":"shap.summary_plot(shap_values, X_test, plot_type=\"bar\")","eaea0dd0":"sgd_clf = SGDClassifier(random_state=0)\nsgd_clf.fit(X_train, np.ravel(y_train))\ny_pred = sgd_clf.predict(X_test)\nprint(classification_report(y_test, y_pred))","cb9793da":"log_clf = LogisticRegression(multi_class='ovr', solver='lbfgs')\nlog_clf.fit(X_train, np.ravel(y_train))\ny_pred = log_clf.predict(X_test)\nprint(classification_report(y_test, y_pred))","c11b372c":"xgb_clf = XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1, \n                   n_estimators=100, max_depth=3)\nxgb_clf.fit(X_train, np.ravel(y_train))\ny_pred = xgb_clf.predict(X_test)\nprint(classification_report(y_test, y_pred))","7554f446":"models = [\n#     KNeighborsClassifier(n_neighbors=5,\n#                         n_jobs=-1),\n    SGDClassifier(random_state=0),\n        \n#     RandomForestClassifier(random_state=0, n_jobs=-1, \n#                            n_estimators=100, max_depth=3),\n     RandomForestClassifier(random_state=0),    \n#     XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1, \n#                   n_estimators=100, max_depth=3)\n    LogisticRegression(random_state=0,multi_class='ovr', solver='lbfgs')\n]\n","2e3b0309":"S_train, S_test = stacking(models,                   \n                           X_train, np.ravel(y_train), X_test,   \n                           regression=False, \n     \n                           mode='oof_pred_bag', \n       \n                           needs_proba=False,\n         \n                           save_dir=None, \n            \n                           metric=accuracy_score, \n    \n                           n_folds=4, \n                 \n                           stratified=True,\n            \n                           shuffle=True,  \n            \n                           random_state=0,    \n         \n                           verbose=2)","d9c803f9":"S_train","0dcc2274":"S_train.shape","0929963b":"S_test","7be13ccd":"S_test.shape","175e7163":"# model = XGBClassifier(random_state=0, n_jobs=-1, learning_rate=0.1, \n#                       n_estimators=100, max_depth=3)\nmodel = LogisticRegression(multi_class='ovr', solver='lbfgs')    \nmodel = model.fit(S_train, np.ravel(y_train))\ny_pred = model.predict(S_test)\nprint('Final prediction score: [%.8f]' % accuracy_score(y_test.values, y_pred))","794f06f2":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","bb42a0a8":"Hey guys please find my try on iris dataset it is might not be perfect but it's showing all inside of Data. I take some reference from other notebooks in other to make for this.\n\nPlease so support if you like it.\n\nThnaks in Advance. "}}