{"cell_type":{"a2da7e1f":"code","61412f4d":"code","c695294d":"code","d9b175e8":"code","38f50f32":"code","0801cf1c":"code","6e7cd22a":"code","c4c0cf03":"code","23dadfcf":"code","0cb81221":"code","b0a9bf89":"code","a2be0995":"code","6f7c373b":"code","0ec6928c":"code","6db681bf":"code","5eabb6fe":"code","4454a810":"code","4b872b94":"code","87831b04":"code","e03a661a":"code","2b08eac7":"code","90de1b54":"code","a7a53cb5":"code","06041321":"code","f92ead82":"code","6e0543d7":"code","a986a665":"code","579cf016":"code","91d08be2":"code","e89b524d":"code","1d2aa01c":"code","f57252cb":"code","c155f83a":"code","d821f7a4":"markdown","5fd1fb05":"markdown","423746f6":"markdown","4a256b61":"markdown"},"source":{"a2da7e1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61412f4d":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline","c695294d":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","d9b175e8":"train.head()","38f50f32":"train.shape","0801cf1c":"train.dtypes","6e7cd22a":"train.hist(figsize=(15,10),bins = 20, color=\"#107009AA\")\nplt.title(\"Features Distribution\")\nplt.show()","c4c0cf03":"train['Survived'].value_counts(normalize=True).plot(kind='bar')\nplt.title('Survived')","23dadfcf":"plt.figure(figsize=(8,6))\nax = sns.countplot(x = \"Sex\",hue=\"Survived\", data=train)\nax.set_title(\"Survived by Gender\")\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Count\")\nplt.show()","0cb81221":"plt.figure(figsize=(8,6))\nax = sns.countplot(x = \"Pclass\",hue=\"Survived\", data=train)\nax.set_title(\"Survived by Class Type\")\nplt.xlabel(\"Class Type\")\nplt.ylabel(\"Count\")\nplt.show()","b0a9bf89":"miss=train.isnull().sum()\nmiss[miss>0]","a2be0995":"test.shape","6f7c373b":"test.dtypes","0ec6928c":"test[\"Pclass\"].value_counts().plot(kind = 'pie', autopct='%1.1f%%', figsize=(8, 8)).legend()","6db681bf":"test[\"Sex\"].value_counts().plot(kind = 'pie', autopct='%1.1f%%', figsize=(8, 8)).legend()","5eabb6fe":"test[\"Embarked\"].value_counts().plot(kind = 'pie', autopct='%1.1f%%', figsize=(8, 8)).legend()","4454a810":"test.hist(figsize=(15,10),bins = 20, color=\"#107009AA\")\nplt.show()","4b872b94":"misstest=test.isnull().sum()\nmisstest[misstest>0]","87831b04":"y=train['Survived']","e03a661a":"df = pd.concat([train,test],axis=0).reset_index(drop=True)","2b08eac7":"df = df.drop([\"Survived\",'Name','Ticket'],axis=1).reset_index(drop=True)","90de1b54":"def missing_value(df):\n    number = df.isnull().sum().sort_values(ascending=False)\n    number = number[number > 0]\n    percentage = df.isnull().sum() *100 \/ df.shape[0]\n    percentage = percentage[percentage > 0].sort_values(ascending=False)\n    return  pd.concat([number,percentage],keys=[\"Total\",\"Percentage\"],axis=1)\nmissing_value(df)","a7a53cb5":"df['Fare'].hist(bins=20)","06041321":"df['Age']=df['Age'].fillna( df['Age'].mean())\ndf[\"Cabin\"] = df[\"Cabin\"].transform(lambda x: x.fillna(x.mode()[0]))\ndf[\"Embarked\"] = df[\"Embarked\"].transform(lambda x: x.fillna(x.mode()[0]))","f92ead82":"df[\"Fare\"] = df[\"Fare\"].fillna(0)","6e0543d7":"missing_value(df)","a986a665":"df=pd.get_dummies(df).reset_index(drop=True)","579cf016":"n=len(y)\ntrain_data = df[:n]\ntest_data = df[n:]","91d08be2":"from sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","e89b524d":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(train_data, y)\npr = knn.predict(test_data)\nkscore = round(knn.score(train_data, y) * 100,2)\nkscore","1d2aa01c":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(train_data, y)\nRpre = random_forest.predict(test_data)\nrandom_forest.score(train_data, y)\nRFScore = round(random_forest.score(train_data, y) * 100, 2)\nRFScore","f57252cb":"result = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': Rpre})","c155f83a":"result.to_csv('submission.csv',index=False)","d821f7a4":"# Exploration the Training Data","5fd1fb05":"Read data","423746f6":"# Import Necessary Libraries ","4a256b61":"# Exploration the Test Data"}}