{"cell_type":{"d8e42381":"code","aaa84cc0":"code","09e9e3b3":"code","ef691f13":"code","61c909e8":"code","92a423a2":"code","6a07e9dc":"code","faa5350e":"code","82fe8e28":"code","95844071":"code","5e82b03a":"code","eff143ce":"code","f39c4431":"code","48b197c5":"code","54468545":"code","1d92d94d":"code","0d09d55d":"code","75f16bfa":"code","6c7b7862":"code","87b68524":"code","3c9cb5c2":"code","0f7ec34b":"code","900a18a4":"code","7df961ae":"code","15f5a89b":"code","bf43ddb6":"code","da3d57ac":"code","c58adabc":"code","8b76f9a2":"code","a2cb6c42":"code","9eb077e9":"code","10a06f38":"code","f513e941":"code","5a79254e":"code","0106740c":"code","384a00e4":"code","2a832d28":"code","73c05e98":"code","ec512da2":"code","187c151b":"code","316450c6":"code","29b8c396":"code","ba17fa59":"code","db76d961":"code","8c1d7cb4":"code","f0496bf2":"code","73d33249":"code","c0662a36":"code","e26c2fca":"code","dbb23143":"markdown","4e399b26":"markdown","f9615747":"markdown","77745a8b":"markdown","7c66ffe1":"markdown","86223505":"markdown"},"source":{"d8e42381":"#import libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","aaa84cc0":"# download datasets from local files\n\ntrain = pd.read_csv('..\/input\/idao-2022-bootcamp-insomnia\/TRAIN.csv')\ntest = pd.read_csv('..\/input\/idao-2022-bootcamp-insomnia\/TEST.csv')\nsample_submission = pd.read_csv('..\/input\/idao-2022-bootcamp-insomnia\/sample_submission.csv')","09e9e3b3":"train.head()","ef691f13":"numerical_columns=['age', 'weight','height','stress','doctor','ubp','lbp']\ncategorical_columns=['sex','sport','pernicious_1','pernicious_2','insomnia']","61c909e8":"train[numerical_columns].describe().T","92a423a2":"sns.countplot(train.insomnia);","6a07e9dc":"sns.distplot(train.age);","faa5350e":"sns.countplot(train.sex);","82fe8e28":"df_c=train.groupby(['sex','insomnia'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()","95844071":"g = sns.catplot(x=\"sex\", y=\"count\",col=\"insomnia\",\n                data=df_c, kind=\"bar\",\n                height=4, aspect=.7);","5e82b03a":"df_c=train.groupby(['sport','insomnia'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()","eff143ce":"g = sns.catplot(x=\"sport\", y=\"count\",col=\"insomnia\",\n                data=df_c, kind=\"bar\",\n                height=4, aspect=.7);","f39c4431":"df_c=train.groupby(['sex'])['stress'].count().to_frame().reset_index()","48b197c5":"sns.catplot(x=\"sex\", y=\"stress\",\n                data=df_c, kind=\"bar\");","54468545":"df_c=train.groupby(['stress','insomnia'])['id'].count().to_frame().rename(columns={'id':'count'}).reset_index()\n#df_c","1d92d94d":"g = sns.catplot(x=\"stress\", y=\"count\",col=\"insomnia\",\n                data=df_c, kind=\"bar\",\n                height=6, aspect=.6);","0d09d55d":"#sns.pairplot(train, hue = \"insomnia\");","75f16bfa":"sns.heatmap(train.corr(), cmap=\"Greens\");","6c7b7862":"train['sex'] -= 1\ntest['sex'] -= 1","87b68524":"df_train = train.copy()\ndf_test = test.copy()","3c9cb5c2":"df_test.pernicious_1.fillna(0,inplace = True)","0f7ec34b":"df_train['pernicious'] = df_train['pernicious_1'] + df_train['pernicious_2']\ndf_test['pernicious'] = df_test['pernicious_1'] + df_test['pernicious_2']","900a18a4":"ids = df_test.id","7df961ae":"df_train.drop(['id','sport','ubp','lbp','pernicious_1','pernicious_2'],axis = 1, inplace = True)\ndf_test.drop(['id','sport','ubp','lbp','pernicious_1','pernicious_2'],axis = 1, inplace = True)","15f5a89b":"df_train.head()","bf43ddb6":"\nX_train, X_test, y_train, y_test = train_test_split(df_train.drop(columns='insomnia'), \n                                                  df_train['insomnia'], \n                                                  test_size=0.3, \n                                                  random_state=42)","da3d57ac":"from sklearn.preprocessing import StandardScaler","c58adabc":"scaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","8b76f9a2":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom scipy.stats import randint\nimport pickle\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\n# import packages for hyperparameters tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV, StratifiedKFold, KFold, GridSearchCV\nfrom sklearn.metrics import f1_score, roc_auc_score,accuracy_score,confusion_matrix, precision_recall_curve, auc, roc_curve, recall_score, classification_report ","a2cb6c42":"random_search = {'criterion': ['entropy', 'gini'],\n               'max_depth': [2,3,4,5,6,7,10],\n               'min_samples_leaf': [4, 6, 8],\n               'min_samples_split': [5, 7,10],\n               'n_estimators': [300]}\n\nclf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search, n_iter = 10, \n                               cv = 10, verbose= 2, random_state= 101, n_jobs = -1)\nmodel.fit(X_train_scaled,y_train)","9eb077e9":"y_pred=model.predict(X_test_scaled)","10a06f38":"print(classification_report(y_test, y_pred))","f513e941":"%pylab inline","5a79254e":"y_score = model.predict_proba(X_test_scaled)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score)\n\ntitle('Random Forest ROC curve: CC Fraud')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))","0106740c":"roc_auc_score(y_test, y_score)","384a00e4":"random_state=42\nn_iter=50\nnum_folds=2\nkf = KFold(n_splits=num_folds, random_state=random_state,shuffle=True)","2a832d28":"def gb_mse_cv(params, random_state=random_state, cv=kf, X=X_train_scaled, y=y_train):\n    # the function gets a set of variable parameters in \"param\"\n    params = {'n_estimators': int(params['n_estimators']), \n              'max_depth': int(params['max_depth']), \n              'learning_rate': params['learning_rate'],\n              'reg_alpha' : params['reg_alpha'],\n              'reg_lambda' : params['reg_lambda'],\n              'colsample_bytree' : params['colsample_bytree'],\n              'min_child_weight' : params['min_child_weight']\n             }\n            \n            \n    \n    # we use this params to create a new LGBM Regressor\n    model = lgb.LGBMClassifier(random_state=42, **params)\n    \n    # and then conduct the cross validation with the same folds as before\n    score = -cross_val_score(model, X, y, cv=cv, scoring=\"roc_auc\", n_jobs=-1).mean()\n\n    return score","73c05e98":"from hyperopt import STATUS_OK, Trials, fmin, hp, tpe","ec512da2":"trials = Trials()","187c151b":"%%time\n\n# possible values of parameters\nspace={'n_estimators': hp.quniform('n_estimators', 100, 200, 1),\n       'max_depth' : hp.quniform('max_depth', 2, 8, 1),\n       'learning_rate': hp.loguniform(\"learning_rate\",-4,-1),\n        'gamma': hp.quniform('gamma',0.1,0.5,0.1),\n        'reg_alpha' : hp.quniform('reg_alpha',1.1,1.5,0.1),\n        'reg_lambda' : hp.uniform('reg_lambda',1.1,1.5),\n        'colsample_bytree' : hp.uniform('colsample_bytree', 0.1,0.5),\n        'min_child_weight' : hp.quniform('min_child_weight', 0, 10, 1),\n      }\n\n# trials will contain logging information\ntrials = Trials()\n\nbest=fmin(fn=gb_mse_cv, # function to optimize\n          space=space, \n          algo=tpe.suggest, # optimization algorithm, hyperotp will select its parameters automatically\n          max_evals=n_iter, # maximum number of iterations\n          trials=trials, # logging\n         )\n\n# computing the score on the test set\nmodel_lgbm = lgb.LGBMClassifier(random_state=42, n_estimators=int(best['n_estimators']),\n                           max_depth=int(best['max_depth']),learning_rate=best['learning_rate'],\n                           reg_alpha=best['reg_alpha'],reg_lambda=best['reg_lambda'],colsample_bytree=best['colsample_bytree'],\n                           min_child_weight=best['min_child_weight'])\nmodel_lgbm.fit(X_train_scaled,y_train)\n\npreds = [pred[1] for pred in model.predict_proba(X_test_scaled)]\nscore = roc_auc_score(y_test, preds, average = 'weighted')","316450c6":"best","29b8c396":"print(\"auc-roc score on Test data\",score)","ba17fa59":"y_score = model.predict_proba(X_test_scaled)[:,1]\nfpr, tpr, _ = roc_curve(y_test, y_score)\n\ntitle('LGBM ROC curve')\nxlabel('FPR (Precision)')\nylabel('TPR (Recall)')\n\nplot(fpr,tpr)\nplot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))","db76d961":"df_test.fillna(0, inplace=True)","8c1d7cb4":"test_values = df_test.values","f0496bf2":"predictions = model_lgbm.predict_proba(test_values)[:,1]\nsubmission_df = pd.DataFrame(data={'id':ids, 'insomnia':predictions})","73d33249":"submission_df.head()","c0662a36":"submission_df.insomnia.mean()","e26c2fca":"submission_df.to_csv(\"submission.csv\", index=False)","dbb23143":"# Light GBM","4e399b26":"# Data visualization","f9615747":"# Random Forest","77745a8b":"# Columns\n- id - person's identificator\n- age - person's age in years\n- weight- person's weight in kilograms\n- height- person's height in centimeters\n- sex - person's sex\n- stress - level of stress during last month (1, 2, 3 - higher values correspond to larger stress)\n- doctor - relative number of visits to doctor previously (1, 2, 3 - higher values correspond to greater number of visits)\n- sport - is person physically active or not (binary)\n- pernicious_1 - does person have some bad habit or not (binary)\n- pernicious_2 - does person have some another bad habit or not (binary)\n- ubp\/lbp - upper\/lower blood pressure in mmHg\n- insomnia - target, does person have sleep disorder or not (binary)","7c66ffe1":"# Submission from LGBM","86223505":"# Feature Selection\nBased on the analysis after the correlation table and data visualizations, I will drop some columns from the Data.\nI will also reconfigure the sex column to be 0 and 1, not 1 and 2."}}