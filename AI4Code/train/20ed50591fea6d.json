{"cell_type":{"2379c86f":"code","550fb887":"code","88f2f88b":"code","f2a6d00a":"code","c05fc2e9":"code","4095ffb2":"code","531f3079":"code","6b99de31":"code","9a7609e4":"code","d5238490":"code","4b9f64a9":"code","cd3ed6b9":"code","c78cc8d6":"code","aaa37437":"code","cf8d7831":"code","3238f15a":"code","f8a85349":"code","b39d380f":"markdown","dbc68982":"markdown","dfc0a605":"markdown","9ecf308d":"markdown","64a3906e":"markdown","fd52f419":"markdown","23697f36":"markdown","ea1f4cf3":"markdown","63ebbc9b":"markdown","0a6add33":"markdown"},"source":{"2379c86f":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport datetime\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)","550fb887":"df_cov = pd.read_csv(\"..\/input\/covid19-tracking-germany\/covid_de.csv\")\ndf_cov[\"state\"] = df_cov[\"state\"].replace(\"Baden-Wuerttemberg\", \"Baden-W\u00fcrttemberg\")\ndf_cov[\"state\"] = df_cov[\"state\"].replace(\"Thueringen\", \"Th\u00fcringen\")\ndf_cov[\"date\"] = pd.to_datetime(df_cov[\"date\"])\n\ndf_dem = pd.read_csv(\"..\/input\/covid19-tracking-germany\/demographics_de.csv\")\ndf_dem[\"state\"] = df_dem[\"state\"].replace(\"Baden-Wuerttemberg\", \"Baden-W\u00fcrttemberg\")\ndf_dem[\"state\"] = df_dem[\"state\"].replace(\"Thueringen\", \"Th\u00fcringen\")\ndf_dem[\"gender\"] = np.where(df_dem[\"gender\"] == \"female\", \"F\", \"M\")\n\ndf_map = gpd.read_file(\"..\/input\/covid19-tracking-germany\/de_state.shp\")\ndf_map = df_map.drop(columns=[\"ADE\", \"RS\", \"RS_0\"])\n\ndf_map_county = gpd.read_file(\"..\/input\/covid19-tracking-germany\/de_county.shp\")","88f2f88b":"df_cov[(df_cov[\"gender\"].isnull()) | (df_cov[\"age_group\"].isnull())].sum()","f2a6d00a":"gender_dist = df_dem.groupby(by=\"gender\").sum()\ngender_dist[\"proportion\"] = gender_dist[\"population\"] \/ gender_dist[\"population\"].sum()\ngender_dist","c05fc2e9":"gender_na = df_cov[\"gender\"].isna()\nind = df_cov[\"gender\"].loc[gender_na].sample(frac=0.51).index\ndf_cov.loc[ind, \"gender\"] = \"F\"\ndf_cov[\"gender\"].fillna(\"M\", inplace=True)\ndf_dem.groupby(by=\"age_group\").sum().idxmax()","4095ffb2":"df_cov[\"age_group\"].fillna(\"35-59\", inplace=True)\ndf_cov.info()","531f3079":"df_daily_cases = df_cov.groupby(\"date\").sum()\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(15,8))\nplt.title(\"Daily cases\")\nsns.lineplot(data=df_daily_cases[\"cases\"])\nplt.ylabel(\"Daily cases\")\nplt.show()","6b99de31":"plt.figure(figsize=(15,8))\nplt.title(\"Daily fatalities\")\nsns.lineplot(data=df_daily_cases[\"deaths\"], color=\"orange\")\nplt.ylabel(\"Daily fatalities\")\nplt.show()","9a7609e4":"df_date_age = df_cov.groupby(by=[\"age_group\"]).sum().reset_index().sort_values(\"age_group\", ascending=True)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18,8)) \nax1.pie(x=df_date_age[\"cases\"], labels=df_date_age[\"age_group\"], autopct=\"%1.1f%%\")\npsns = sns.barplot(data=df_date_age, x=\"age_group\", y=\"deaths\", ax=ax2)\nfor p in psns.patches:\n    psns.annotate(format(100 * p.get_height() \/ df_date_age[\"deaths\"].sum(), \".1f\") + \"%\", \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = \"center\", va = \"center\", \n                   xytext = (0, 9), \n                   textcoords = \"offset points\")\nax1.set_title(\"Proportional distribution of positiv cases\")\nax2.set_title(\"Absolute and relative distribution of fatalities\")\nplt.show()","d5238490":"df_gender = df_cov.groupby(by=[\"age_group\", \"gender\"]).sum().reset_index()\ndf_gender[\"death_ratio\"] = 100 * df_gender[\"deaths\"] \/ df_gender[\"cases\"]\n\nplt.figure(figsize=(15,8))\nsns.lineplot(data=df_gender, x=\"age_group\", y=\"death_ratio\", hue=\"gender\")\nplt.title(\"Death ratio by gender\")\nplt.show()","4b9f64a9":"df_state_cov = df_cov.groupby(by=\"state\", as_index=False).sum()\ndf_state_dem = df_dem[[\"state\", \"population\"]].groupby(by=\"state\", as_index=False).sum()\ndf_state = df_map.merge(df_state_cov, how=\"left\", left_on=\"GEN\", right_on=\"state\")\ndf_state = df_state.merge(df_state_dem, how=\"left\", left_on=\"GEN\", right_on=\"state\")\ndf_state.drop(columns=[\"state_x\", \"state_y\"], inplace=True)\n\ndf_state[\"case_ratio\"] = df_state[\"cases\"] * (1000 \/ df_state[\"population\"])\ndf_state[\"death_ratio\"] = df_state[\"deaths\"] * (1000 \/ df_state[\"population\"])\ndf_state[\"death_case_ratio\"] = 100 * df_state[\"deaths\"] \/ df_state[\"cases\"]\n\ndf_state.set_index(\"GEN\", inplace=True)","cd3ed6b9":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,8))\ndf_state.plot(column=\"case_ratio\", legend=True,\n                    legend_kwds={\"label\": \"Per 1000 residents\",\n                                 \"orientation\": \"horizontal\"}, cmap=\"Reds\", ax=ax1)\nfor i, geo in df_state.centroid.iteritems():\n    ax1.annotate(s=i, xy=[geo.x, geo.y], color=\"black\",\n         bbox=dict(boxstyle='round,pad=0.2', fc='white', alpha=0.75))\nax1.set_title(\"Positive cases\")\n\ndf_state.plot(column=\"death_ratio\", legend=True,\n                    legend_kwds={\"label\": \"Per 1000 residents\",\n                                 \"orientation\": \"horizontal\"}, cmap=\"Reds\", ax=ax2)\nfor i, geo in df_state.centroid.iteritems():\n    ax2.annotate(s=i, xy=[geo.x, geo.y], color=\"black\",\n         bbox=dict(boxstyle='round,pad=0.2', fc='white', alpha=0.75))\nax2.set_title(\"Fatalities\")\n\ndf_state.plot(column=\"death_case_ratio\", legend=True,\n                    legend_kwds={\"label\": \"In percentage (%)\",\n                                 \"orientation\": \"horizontal\"}, cmap=\"Reds\", ax=ax3)\nfor i, geo in df_state.centroid.iteritems():\n    ax3.annotate(s=i, xy=[geo.x, geo.y], color=\"black\",\n         bbox=dict(boxstyle='round,pad=0.2', fc='white', alpha=0.75))\nax3.set_title(\"Deaths per case ratio\")\n    \nax1.axes.get_xaxis().set_visible(False)  \nax2.axes.get_xaxis().set_visible(False)  \nax3.axes.get_xaxis().set_visible(False)   \nax1.axes.get_yaxis().set_visible(False)  \nax2.axes.get_yaxis().set_visible(False)  \nax3.axes.get_yaxis().set_visible(False)  \nplt.show()","c78cc8d6":"df_cov_rel = df_cov.groupby(by=[\"state\", \"date\"]).sum()\ndf_cov_rel = df_cov_rel.replace([np.inf, -np.inf], 0)\ndf_cov_rel = df_cov_rel.replace(np.nan, 0)\ndf_cov_rel[\"cases_cumsum\"] = df_cov_rel.groupby(level=-2)[\"cases\"].cumsum()\ndf_cov_rel[\"deaths_cumsum\"] = df_cov_rel.groupby(level=-2)[\"deaths\"].cumsum()\ndf_cov_rel = df_cov_rel.reset_index()","aaa37437":"plt.figure(figsize=(15,8))\nln = sns.lineplot(data=df_cov_rel.sort_values(\"cases_cumsum\", ascending=False), x=\"date\", y=\"cases_cumsum\", hue=\"state\")\nln.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nplt.title(\"Cumulated cases over time by state\")\nplt.show()","cf8d7831":"plt.figure(figsize=(15,8))\nln = sns.lineplot(data=df_cov_rel.sort_values(\"deaths_cumsum\", ascending=False), x=\"date\", y=\"deaths_cumsum\", hue=\"state\")\nln.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nplt.title(\"Cumulated fatalities over time by state\")\nplt.show()","3238f15a":"df_dem[\"over60\"] = np.where(df_dem[\"age_group\"] >= \"60-79\", 1, 0)\ndf_dem_age = df_dem.groupby([\"state\", \"over60\"]).sum().reset_index()\ndf_dem_age_temp = df_dem_age.groupby(\"state\").sum().reset_index().rename(columns={\"population\":\"total_population\"})\ndf_dem_age = df_dem_age.merge(df_dem_age_temp, how=\"left\")\ndf_dem_age = df_dem_age[df_dem_age[\"over60\"] == 1]\ndf_dem_age[\"age_ratio\"] = 100 * (df_dem_age[\"population\"] \/ df_dem_age[\"total_population\"])\ndf_state2 = df_state.reset_index()[[\"GEN\", \"case_ratio\", \"death_ratio\", \"death_case_ratio\"]]\ndf_dem_age = df_dem_age.sort_values(\"age_ratio\", ascending=False).reset_index(drop=True)\ndf_dem_age = df_dem_age.merge(df_state2, how=\"left\", left_on=\"state\", right_on=\"GEN\")","f8a85349":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(18,8)) \nbr = sns.barplot(data=df_dem_age, x=\"state\", y=\"age_ratio\", ax=ax1)\nbr.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nbr.set_xticklabels(br.get_xticklabels(), rotation=90)\nax1.set_title(\"Residents over 60\")\nax1.set_ylabel(\"In percentage (%)\")\nbr = sns.barplot(data=df_dem_age, x=\"state\", y=\"death_case_ratio\", ax=ax2)\nbr.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nbr.set_xticklabels(br.get_xticklabels(), rotation=90)\nax2.set_title(\"Deaths per case ratio\")\nax2.set_ylabel(\"In percentage (%)\")\nbr = sns.barplot(data=df_dem_age, x=\"state\", y=\"case_ratio\", ax=ax3)\nbr.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nbr.set_xticklabels(br.get_xticklabels(), rotation=90)\nax3.set_title(\"Cases per 1000 residents\")\nax3.set_ylabel(\"x per 1000\")\nbr = sns.barplot(data=df_dem_age, x=\"state\", y=\"death_ratio\", ax=ax4)\nbr.legend(bbox_to_anchor=(1.01, 1), loc='upper left')\nbr.set_xticklabels(br.get_xticklabels(), rotation=90)\nax4.set_title(\"Deaths per 1000 residents\")\nax4.set_ylabel(\"x per 1000\")\nplt.show()","b39d380f":"## Death ratio by gender","dbc68982":"## Importing data","dfc0a605":"## Cumulated fatalities over time by state","9ecf308d":"## Put demographics in relation with Covid","64a3906e":"## Geographical overview","fd52f419":"## Daily cases","23697f36":"## Cumulated cases over time by state","ea1f4cf3":"## Fatality distribution","63ebbc9b":"## Replace NAs","0a6add33":"## Daily fatalities"}}