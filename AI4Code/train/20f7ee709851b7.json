{"cell_type":{"d3734a7c":"code","9ecee0e3":"code","fe38b1f5":"code","b03a6438":"code","5fc15bc3":"code","2a693615":"code","3937ce68":"code","cc75b43f":"code","30905ba1":"code","6833e119":"code","f51c273a":"code","6b7693c3":"code","f43b31de":"code","82cafc3d":"code","0167a556":"code","5b4f32c3":"code","6cac07ac":"code","b6e051c0":"code","0193fcf3":"markdown","929263bb":"markdown","5c35dd0e":"markdown"},"source":{"d3734a7c":"# First as always I will import the main libraries.\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","9ecee0e3":"# Now it's time to import the file and check your informations.\n\ndataset = pd.read_csv('..\/input\/Churn_Modelling.csv')\n\ndataset.head()","fe38b1f5":"# Before to start a preprocessing the data I have to import the dataset in the variables.\n\nX = dataset.iloc[:, 3:13].values\ny = dataset.iloc[:, 13].values\n\n# I put in \"X\" the variable independents and in \"y\" the variable dependent.\n# Notes that I didn't included \"RowNumber\", \"CustomerId\" and \"Surname\", because none of them is relevant for my model.","b03a6438":"# As we can see above there are some columns with categorical values.\n# Now I will encoding them.\n# Let's start to preprocessing our dataset.\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X_1 = LabelEncoder()\n# X_1 refers to \"Geography\" column.\nX[:, 1] = labelencoder_X_1.fit_transform(X[:, 1])\nlabelencoder_X_2 = LabelEncoder()\n# X_2 refers to \"Gender\" column.\nX[:, 2] = labelencoder_X_2.fit_transform(X[:, 2])\nonehotencoder = OneHotEncoder(categorical_features = [1])\nX = onehotencoder.fit_transform(X).toarray()\nX = X[:,1:]","5fc15bc3":"# Let's check if it worked.\n\nX\n\n# I didn't modify the \"y\" variable, because there is just booleans values and, for my model, is desnecessary encode them.","2a693615":"# Now I will prepare my data before to start my Train and Test set.\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)","3937ce68":"# For there isn't any proble with correlations between the values,\n# I will aplly the \"Feature Scaling\".\n\nfrom  sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","cc75b43f":"# Now I will start the more excite part: make the ANN!!!!\n\n# Firt of all: Let's import the Keras libraries and packages.\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","30905ba1":"# I will inicializing the ANN.\n# As this problem is solved by Classification algorithms, I will call my variable of \"classifier\".\n\nclassifier = Sequential()","6833e119":"# I will add the input layer and the first hidden layer.\n\nclassifier.add(Dense(output_dim=6, init='uniform', activation='relu', input_dim=11))\n\n# In \"output_dim\" I used a not best technique that is get the quantity of output plus input and divide by 2, so 11 + 1 \/ 2 = 6.\n# In \"Activiation\" I used the best function for hidden layers: \"relu\".","f51c273a":"# Adding the second layer.\n\nclassifier.add(Dense(output_dim=6, init='uniform', activation='relu'))\n\n# Note that this time I didn't insert the \"input_dim\" paramether, because now I Know how many input I have in my ANN.","6b7693c3":"# Almost finish. Now I will add the output layer.\n\nclassifier.add(Dense(output_dim=1, init='uniform', activation='sigmoid'))\n\n# In \"output_dim\" I put one because I have to guess only the clients who leaves the bank accounts.\n# In \"activation\" I use the best function for it: \"sigmoid\"","f43b31de":"# Compiling the ANN.\n\nclassifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# If I have more than one output, I would have to use in loss paramether other cross entropy.","82cafc3d":"# Let's do the ANN work for us!!!!\n\nclassifier.fit(X_train, y_train, batch_size=10, nb_epoch=100)","0167a556":"# Now our ANN model is done and Let's predict the result.\n\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)","5b4f32c3":"# Let's make the Confusion Matrix and see if this model is good enought to be delivery to client.\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","6cac07ac":"# Let's see the result....\n\ncm","b6e051c0":"# In order to be more easy to see the porcentage, let's do a simple calculus.\n\n(1538 + 187)\/2000\n\n# That's good!!!","0193fcf3":"# Project - Bank Retention Clients\n# This is a ANN project that the goal is guess what perfil of client has more tendency to leave the bank account.","929263bb":"# That's AMAZING!!!\n# When you see the artificial brains which you built working in real-time!!!","5c35dd0e":"# Was fantastic do my first Deep Learnig Project and share with you.\n\n# See you in the next Project!!! \ud83d\ude0e\ud83d\ude80\ud83d\udc4d"}}