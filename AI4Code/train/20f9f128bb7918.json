{"cell_type":{"bca0320f":"code","1efa394d":"code","e015ab90":"code","44c782b9":"code","97067da2":"code","908af0c0":"code","daee1b46":"code","d3bfc567":"code","d23c36fe":"code","48e307eb":"code","02f3bc66":"code","6c7410dd":"code","c37446a6":"code","255c826e":"code","fc2667c9":"code","e62fa057":"code","1c6555b3":"code","7135257f":"code","acd7352e":"code","8c741f29":"code","58365ba0":"code","7d60f8e5":"code","fee3cb1d":"code","0189e4d5":"code","b94d071c":"code","965cf73f":"code","4f21ee86":"code","6ffba395":"code","f7852cc2":"code","254166e3":"code","6b7aa01a":"code","8f918e06":"code","523551ed":"code","ae3ae9ef":"code","9e0eae18":"code","5651661b":"code","95e3c296":"markdown","220ceb62":"markdown","065b9749":"markdown","d2432dc1":"markdown","3410e684":"markdown","fe77c14e":"markdown","5e702ea3":"markdown","b7c028f1":"markdown","418cefb5":"markdown","161d0c7c":"markdown","74b4378c":"markdown","343b678f":"markdown","36ada7b7":"markdown","10850677":"markdown","16fe71d3":"markdown","cee11b8a":"markdown","17ccd6df":"markdown","d6831a4c":"markdown","b24a7c3a":"markdown","0014c7f6":"markdown"},"source":{"bca0320f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1efa394d":"import seaborn as sns\nimport matplotlib.pyplot as plt","e015ab90":"call  = pd.read_csv('\/kaggle\/input\/montcoalert\/911.csv')","44c782b9":"call.head()","97067da2":"call.info()","908af0c0":"call['zip'].value_counts().head()","daee1b46":"call['twp'].value_counts().head()","d3bfc567":"call['title'].nunique()","d23c36fe":"call['Reason'] = call['title'].apply(lambda x:x.split(':')[0])","48e307eb":"call['Reason'].value_counts()","02f3bc66":"sns.countplot(x='Reason',data=call, palette = 'viridis')","6c7410dd":"type(call['timeStamp'].iloc[0])","c37446a6":"call['timeStamp'] = pd.to_datetime(call['timeStamp'])","255c826e":"type(call['timeStamp'].iloc[0])","fc2667c9":"call['timeStamp']","e62fa057":"time = call['timeStamp'].iloc[0]\ntime.hour\n# time.dayofweek\n# time.month\n# time.date()","1c6555b3":"call['Hour'] = call['timeStamp'].apply(lambda time: time.hour)\ncall['Month'] = call['timeStamp'].apply(lambda time:time.month)\ncall['Day of Week'] = call['timeStamp'].apply(lambda time:time.dayofweek)\n","7135257f":"call.sample(5)","acd7352e":"dmap={0:'Mon', 1:'Tue', 2:'Wed', 3:'Thu', 4:'Fri', 5:'Sat', 6:'Sun'}","8c741f29":"call['Day of Week'] = call['Day of Week'].map(dmap)\ncall.head()","58365ba0":"sns.countplot(x='Day of Week',data=call, hue='Reason',palette='viridis')\nplt.legend(bbox_to_anchor=(1.05, 1))","7d60f8e5":"sns.countplot(x='Month',data=call, hue='Reason',palette='viridis')\nplt.legend(bbox_to_anchor=(1, 1))","fee3cb1d":"byMonth = call.groupby('Month').count()\nbyMonth","0189e4d5":"sns.pointplot(x='Month', y = 'lat', data=byMonth.reset_index(), markers='o')","b94d071c":"t = call['timeStamp'].iloc[0]\nt.date()","965cf73f":"call['Date'] = call['timeStamp'].apply(lambda t: t.date())\ncall['Date']","4f21ee86":"call.sample(5)","6ffba395":"call.groupby('Date').count().head()","f7852cc2":"call.groupby('Date').count()['lat'].plot()","254166e3":"call[call['Reason']=='EMS'].groupby(by='Date').count()['lat'].plot()\nplt.title('EMS')","6b7aa01a":"call[call['Reason']=='Fire'].groupby(by='Date').count()['lat'].plot()\nplt.title('Fire')","8f918e06":"call[call['Reason']=='Traffic'].groupby(by='Date').count()['lat'].plot()\nplt.title('Traffic')","523551ed":"dayHour = call.groupby(by=['Day of Week', 'Hour']).count()['Reason'].unstack()\ndayHour","ae3ae9ef":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour)","9e0eae18":"dayMonth = call.groupby(by=['Day of Week', 'Month']).count()['Reason'].unstack()\ndayMonth","5651661b":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth)","95e3c296":"**Created a new dataframe to clearly show the number of calls taken per day of every month.**","220ceb62":"**Created a new column 'Date' from the TimeStamp column.**","065b9749":"**Simple countplot of Total 911 calls**","d2432dc1":"**Top townships for 911 calls**","3410e684":"**You can now grab specific attributes from a Datetime object by calling them.**","fe77c14e":"**Plot representing 'Fire' Reason for the 911 call.**","5e702ea3":"**Checking the data type of timeStamp**","b7c028f1":"**The most common Reason for a 911 call based off the new column**","418cefb5":"**Countplot of Month based off the Reason column**","161d0c7c":"**Plot representing 'Traffic' Reason for the 911 call.**","74b4378c":"**Created 3 new columns for Hour, Month and Day of Week**","343b678f":"**Converting timeStamp from str to datetime**","36ada7b7":"**Created a new column 'Reason' based off the title of the calls**","10850677":"**Top 5 zipcodes for 911 calls**","16fe71d3":"**Used the .map to map the actual string names to the day of the week**","cee11b8a":"**Simple plot indicating the count of calls per month. It clearly shows a big drop in calls in August.**","17ccd6df":"**Created a new dataframe to clearly show the number of calls taken per hour everyday.**","d6831a4c":"**Plot representing 'EMS' Reason for the 911 call.**","b24a7c3a":"**Countplot of Day of the Week based off the Reason column**","0014c7f6":"**Number of unique title codes**"}}