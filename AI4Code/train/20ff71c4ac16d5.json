{"cell_type":{"1bca002c":"code","372c04b3":"code","82573c5e":"code","28b79dd3":"code","15b0eafb":"code","0a053356":"code","d51b0868":"markdown","d6d25c15":"markdown","0e3f5222":"markdown","de8124e0":"markdown","69141538":"markdown","d1c51724":"markdown"},"source":{"1bca002c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold\n\n#modelos\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn.naive_bayes import GaussianNB","372c04b3":"#carregar dados iris\nfile = '..\/input\/iris-train.csv' # caminho absoluto do arquivo\ndf = pd.read_csv(file, delimiter = ',', index_col='Id')\n\n#variaveis features\nX = df[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\n\n# variavel objetivo\nY = df['Species']","82573c5e":"models = []\nmodels.append(('Support Vector Machines - linear', svm.SVC(kernel='linear', random_state=0, gamma=.10, C=2.0) ))\nmodels.append(('Logistic Regression - lbfgs', LogisticRegression(solver='lbfgs', multi_class='auto', max_iter=1000) ))\nmodels.append(('KNeighborsClassifier', KNeighborsClassifier() ))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier() ))\nmodels.append(('RandomForestClassifier', RandomForestClassifier(n_estimators=100) ))\nmodels.append(('Gaussian Na\u00efve Bayes', GaussianNB()))\n","28b79dd3":"# importando cross_val_score\nfrom sklearn.model_selection import cross_val_score","15b0eafb":"\nnames = []\nscores = []\nfor name, model in models:\n    score = (cross_val_score(model, X, Y, cv=10)) # 10 itera\u00e7\u00f5es\n    names.append(name)\n    scores.append(score)\n\nscoresConsolidado = []\nfor sc in scores:\n    scoresConsolidado.append(np.average(sc))\n\nresults = pd.DataFrame({'Model': names, 'Score': scoresConsolidado})\nresults = results.sort_values(by=['Score'], ascending=False) \n\nprint(results)","0a053356":"# separando dados 70% treino 30% teste\n# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 101)\n\n#selecionando o modelo escolhido (apos testes) para fazer a predi\u00e7\u00e3o.\nmodel = models[0][1]\nfilename = models[0][0]\n\n# treinamento com todos os registros da base de treinamento\nX_train = df.drop(['Species'], axis=1) # tudo, exceto a coluna alvo\nY_train = df['Species'] # apenas a coluna alvo\nmodel.fit(X_train, Y_train)\n\n#Realizando a previsao arquivo de teste\ndfPredict = pd.read_csv('..\/input\/iris-test.csv', delimiter=',', index_col='Id')\nxPredict  = dfPredict[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]\nyPredict  = model.predict(xPredict)\n    \n# gerar dados de envio (submiss\u00e3o)\nsubmission = pd.DataFrame({\n    'Id': xPredict.index,\n    'Species': yPredict\n})\nsubmission.set_index('Id', inplace=True)\nsubmission.to_csv(filename+'.csv')","d51b0868":"### Carga de dados\n**Carregando dados de arquivo csv com Pandas. Criando um dataframe para manipular dados**","d6d25c15":"**Treinando e gerarando arquivos para cada modelo**","0e3f5222":"**Utilizando a t\u00e9cnica de Cross Validation - com cross_val_score**\n\n- Recomendado para pequenos volumes de dados (50000)\n\nDividir o dataSet em n conjutos distintos de treino e teste e verificar o score para os n conjuntos.\n\nMultiplos dataSets de treinamento\/teste\n\nIdentificar modelos com maior acur\u00e1cia","de8124e0":"**Criando um array para armazenar v\u00e1rios modelo de aprendizado supervisionado para testes de score**\n\nO objetivo \u00e9 idenficar qual modelo est\u00e1 performando melhor","69141538":"### Importando pacotes necess\u00e1rios","d1c51724":"**Como o objetivo \u00e9 classificar os registros em classes distintas (\"r\u00f3tulo de classe discreto\"), a partir dos atributos desses registro,\ne para o treinamento, para cada registro sabemos previmente a qual classe ele pertence, estamos diante\nde um problema de Aprendizado Supervisionado de Classifica\u00e7\u00e3o.**"}}