{"cell_type":{"323ba977":"code","b9fd3a44":"code","925734d1":"code","e016d2b7":"code","c801e0af":"code","f10b62b4":"code","85e1cc11":"code","26eec690":"code","c1e09abe":"code","fa32193f":"code","67a01851":"code","3cd4588e":"code","ffa33f58":"code","0ab8b400":"code","f1ba0192":"code","31b7cdf4":"code","b907d545":"code","1ebb8498":"code","d6c51652":"code","498ed1e7":"code","cdcb683f":"markdown","5944fe91":"markdown","4850fd00":"markdown","37384233":"markdown","839e3a51":"markdown","97929477":"markdown","48954d30":"markdown","36d5ee10":"markdown","1b38f77c":"markdown","2ff41c70":"markdown"},"source":{"323ba977":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nfrom datetime import date\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b9fd3a44":"Transactions = pd.read_csv('..\/\/input\/retail-shop-case-study-dataset\/Transactions.csv')\nTransactions.head()","925734d1":"Transactions.dtypes","e016d2b7":"Customer = pd.read_csv('..\/\/input\/retail-shop-case-study-dataset\/Customer.csv')\nCustomer.head()","c801e0af":"Cat = pd.read_csv('..\/\/input\/retail-shop-case-study-dataset\/prod_cat_info.csv')\nCat.head(50)","f10b62b4":"Sub_Cat = Cat[['prod_sub_cat_code', 'prod_subcat']]\nSub_Cat.head()","85e1cc11":"Cat_New = Cat[['prod_cat_code', 'prod_cat']]\nCat_New.head()\n\n\n\n#df.drop(df.columns[[0,1,3]], axis=1, inplace=True)","26eec690":"Trans = pd.merge(Transactions, Cat_New, how = 'outer')\n\nTrans.head()","c1e09abe":"Trans = pd.merge(Transactions, Sub_Cat, how = 'outer', left_on=\"prod_subcat_code\", right_on=\"prod_sub_cat_code\")\nTrans.head()","fa32193f":"Trans.head()","67a01851":"Trans = pd.merge(Transactions, Customer,  left_on=\"cust_id\", right_on=\"customer_Id\")\nTrans.head()","3cd4588e":"\nTrans = Trans.drop(['prod_subcat_code', 'prod_cat_code','customer_Id'] , 1) #drop cust_id column\nTrans.head()","ffa33f58":"Trans.Qty = Trans.Qty.abs()\nTrans.Rate = Trans.Rate.abs()\nTrans.total_amt = Trans.total_amt.abs()\nTrans.head()","0ab8b400":"def calculate_age(born):\n    born = datetime.strptime(born, \"%d-%m-%Y\").date()\n    today = date.today()\n    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))\n\nTrans['Age'] = Trans['DOB'].apply(calculate_age)\nTrans.head()","f1ba0192":"Trans.info()","31b7cdf4":"print(\"# unique values in STore Type: {0}\".format(len(Trans['Store_type'].unique().tolist())))\nprint(\"# unique values in City: {0}\".format(len(Trans['city_code'].unique().tolist())))\nprint(\"# unique values in Customer : {0}\".format(len(Trans['cust_id'].unique().tolist())))\nprint(\"# unique values in Age: {0}\".format(len(Trans['Age'].unique().tolist())))\n","b907d545":"labels = Trans['Store_type'].value_counts().index\nsizes = Trans['Store_type'].value_counts().values\nexplode = (0, 0.1, 0.2, 0.1)  # only \"explode\" the 2nd and 3rd slices (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nax1.set_title(\"Retail Shop Store Types\")\n\nplt.show()","1ebb8498":"\nTrans.groupby('Store_type').sum()['total_amt'].plot.bar()\nplt.xticks(rotation=0)\nplt.tight_layout()\nplt.show()","d6c51652":"sns.set(style=\"darkgrid\")       #style the plot background to become a grid\nsns.countplot(y = 'city_code', data=Trans, hue = 'Gender', order = Trans['city_code'].value_counts().index )\n","498ed1e7":"top_customer = Trans.cust_id.value_counts()\ntop_customer[:5].plot(kind='barh')\n#top_customer.sort()top_customer[-5:].plot(kind='barh')","cdcb683f":"We have the customer's DOB, let's make any attempt to get their Age","5944fe91":"Let's see which of the city has the most customers as well as their spending power\n","4850fd00":"Does this mean that e-shop will have the highest revenue among other channels in this dataset? Let's have a look","37384233":"## Data Analysis and Visualization \n","839e3a51":"If you have a look at the data, you will noticed that the data in Qty, Rate and total_amt columns are negatives. We need to transform them to positive values using the abs () function.","97929477":"Let's see the top 5 customers who made the highest number of purchase in the data set","48954d30":"## Data Cleansing ","36d5ee10":"Let's look for unique values in the dimensions. This will help our analysis","1b38f77c":"Let's see the Store Types people tends to use to purchase products ","2ff41c70":"There is a clear need to create a new table prod_sub_cat_code table as well as a new cat table"}}