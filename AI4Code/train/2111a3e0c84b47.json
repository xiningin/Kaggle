{"cell_type":{"d84bde0f":"code","2e8e4fd8":"code","e3c460b0":"markdown","11c84575":"markdown","b0674693":"markdown","6ba1ab51":"markdown","738a412e":"markdown","12ce40a9":"markdown","2d1f3e00":"markdown"},"source":{"d84bde0f":"import os\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"]=\"C:\\Python\\Python37\\d074645e5d17.json\"","2e8e4fd8":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport pandas as pd\n#from google.cloud import bigquery - if you use this no need call below one, it's return row wise. But we need DATAFRAME\nfrom pandas.io import gbq # to communicate with Google BigQuery\n\n#Use for offline use of jupyter notebook\ninit_notebook_mode(connected=True)\n\n#Dynamically load current date\ndat=pd.to_datetime('today')\ntoday=dat.strftime(\"%m-%d-%Y\")\n#Query \nquery = \"\"\"\nWITH double_entry_book AS (\n    -- debits\n    SELECT\n      ARRAY_TO_STRING(inputs.addresses, \",\") AS address\n    , inputs.type\n    , -inputs.value AS value\n    FROM `bigquery-public-data.crypto_bitcoin.transactions` JOIN UNNEST(inputs) AS inputs\n    WHERE block_timestamp_month = '2019-03-01'\n    \n   UNION ALL\n  -- credits\n    SELECT\n      ARRAY_TO_STRING(outputs.addresses, \",\") AS address\n    , outputs.type\n    , outputs.value AS value\n    FROM `bigquery-public-data.crypto_bitcoin.transactions` JOIN UNNEST(outputs) AS outputs\n    WHERE block_timestamp_month = '2019-03-01'\n)\nSELECT \n  address \n, type\n, SUM(value) AS net_change\nFROM double_entry_book\nGROUP BY 1,2\nORDER BY net_change DESC\nLIMIT 10\n\"\"\"\n\n#Excute query & return to DataFrame. Please Note: Always use Standard SQL Query using [dialect='standard']\ntld_share_df = gbq.read_gbq(query, project_id='rahul-data-science',dialect='standard')\n\n#Here we set both axis with data\ntrace = go.Bar(\n    x = tld_share_df['address'],\n    y = tld_share_df['net_change']\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title='Top 10 Richest Bitcoin Holder till '+today\n)\n\n#Here we create figure for plot in plotly with above mention 'data' & 'layout'\nfig = go.Figure(data=data, layout=layout)\n\n#Here we plot plotly chart diagram in offline manner\npy.offline.iplot(fig)","e3c460b0":"> **OUTPUT as an Image (This O\/P only execute if you properly run above mention pip pacakages & [create google bigquery](https:\/\/cloud.google.com\/bigquery\/docs\/quickstarts\/quickstart-web-ui) sucessfully, otherwise above mention error occurs)**\n![](https:\/\/arodek.aro-crm.com\/kaggle\/charttop10.png)","11c84575":"**[PLEASE NOTE: Before run this below mention code make sure you have installed: 1. pip install pandas-gbq & 2. pip install plotly]**","b0674693":"> **OUTPUT as an Image (This O\/P only execute if you properly run above mention pip packages, otherwise above mention error occurs)**\n![](https:\/\/arodek.aro-crm.com\/kaggle\/Top10BitcoinHolderDATAFrame.png)","6ba1ab51":"> First we need to set Enviroment variable in OS, which hold credentials of Google Cloud Account. For e.g: **xxxxxxxxxxx.json** file.","738a412e":"> # Bitcoin : Top 10 Richest Bitcoin Owners\n\nTo do this what we are going to do is we will find out top 10 outputs from the data sorted by the amount of bitcoins transacted in a given month.\n\nFirst we need to create [Google BigQuery](https:\/\/cloud.google.com\/bigquery\/docs\/quickstarts\/quickstart-web-ui)  account in Google. Then use below steps for execution->\n\n**Google Bigquery Dataset : crypto_bitcoin**   \n**Table : transactions**\n\nTo get the desired record set the first property that we need the two important columns, those are :\n\n    -- for debits fields\n***\"inputs.addresses\",\n\"inputs.type\",\n\"inputs.value\"***\n       \n    -- for credits fields      \n***\"outputs.addresses\",\n\"outputs.type\",\n\"outputs.value\"***\n","12ce40a9":"> ***ANYBODY CAN CHECK REALTIME THOSE ABOVE MENTION ADDRESS BALANCES IN THIS LINK BY BLOCKCHAIN.COM - [BALANCE CHECK LINK](https:\/\/www.blockchain.com\/btc\/address\/3MrMeBmbcDjLc52i7j3SdznChU4Fd4WHbw)***","2d1f3e00":"#This Dataframe will retuen current Data in tabular manner\n\n    tld_share_df"}}