{"cell_type":{"507415c9":"code","3bb07f81":"code","ff9c4e0e":"code","1abe7f09":"code","b56ca335":"code","2c62e453":"code","11f87f39":"code","20688bf6":"code","c8f10811":"code","78f8e8e5":"code","61ccad30":"code","bb629625":"code","59c76d2e":"code","7cd6f684":"code","af4b2729":"code","ea02f8e3":"code","a41cf208":"code","5af9770d":"code","73bddd72":"code","2af58bda":"code","7b910d10":"code","a7420112":"code","afcff6bb":"code","1e288206":"code","f7ae8da1":"code","cbbc7575":"code","dc05d0f6":"code","7792b290":"code","82105f8f":"code","dc8d21cd":"code","f1e1c620":"code","0ef75b74":"code","66803727":"code","d8c89e48":"code","322270a9":"code","cd24e876":"code","77fef4ae":"code","158ab365":"code","a8849380":"code","2338966c":"code","25f6b239":"code","24e17945":"code","f875cf6d":"code","df7a2724":"code","a0a21ebd":"code","c3ee222c":"code","7d8dbe9b":"code","7f4b4682":"code","291ebbc6":"code","ff17dbc3":"code","a445cdc4":"code","107b65a5":"code","fcfeca85":"code","fa477a28":"code","220f2bb7":"code","422819f0":"code","80c99e4e":"code","5d0976cb":"code","e4216c95":"code","4934dd23":"code","e361f491":"code","2fdff533":"code","75c2d980":"code","43270767":"code","a8bead22":"code","4c8fb156":"code","b611f223":"code","c3dd0d3d":"code","b4b5529b":"code","9f6050c6":"code","78e6b34b":"code","ab78b54b":"code","02c11d44":"code","22c7f2be":"code","194e011f":"code","7e2e8e08":"code","acf2a165":"code","0f9f9cf0":"markdown","3a48226f":"markdown","1c39bc68":"markdown","2ac55120":"markdown","3dcd009b":"markdown","f1624c0d":"markdown","f3c7f30a":"markdown","79c915c0":"markdown","e3499aae":"markdown","4618c6e9":"markdown","d407a250":"markdown","4dcdebf3":"markdown","f8a79966":"markdown","709d0f9f":"markdown","0f2976e6":"markdown","a84bbed9":"markdown","c41de2e2":"markdown","0577576f":"markdown","3a09d8dc":"markdown","df070031":"markdown","ea0d4964":"markdown","31e57ae5":"markdown","b1ee9316":"markdown","892fc08d":"markdown"},"source":{"507415c9":"import pandas as pd\nimport numpy as np","3bb07f81":"df = pd.read_csv('..\/input\/widsdatathon2021\/TrainingWiDS2021.csv')","ff9c4e0e":"df.head()","1abe7f09":"!pip install missingpy","b56ca335":"from missingpy import MissForest","2c62e453":"imputer = MissForest(max_iter=20)","11f87f39":"x = df.iloc[:,:-1]","20688bf6":"data_dict = pd.read_csv('..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv')","c8f10811":"mid = data_dict['Description'].str.contains('Whether')","78f8e8e5":"fan = []\nfor i,j in enumerate(mid):\n    if j == True:\n        fan.append(i)","61ccad30":"data_dict.iloc[fan]","bb629625":"data_dict[~data_dict['Unit of Measure'].str.contains('None')]","59c76d2e":"data_dict['Data Type'].value_counts().plot(kind='bar')","7cd6f684":"data_dict['Category'].value_counts().plot(kind='bar')","af4b2729":"import matplotlib.pyplot as plt","ea02f8e3":"nulls = df.isna().sum()[df.isna().sum()!=0]","a41cf208":"parts = []\nalls = []\nfor i in range(nulls.shape[0]):\n    if i%40 == 0 and i!=0:\n        alls.append(parts)\n        parts = []\n    if i == 159:\n        alls.append(parts)\n    parts.append(nulls.index[i])","5af9770d":"def custom_plot(df, labels):\n    plt.figure(figsize=(25, 25))\n    plt.barh(range(40),width=df)\n    plt.yticks(range(40),labels, rotation=0, fontsize=20)\n    plt.scatter(df, range(40),color='black')\n    plt.plot(df, range(40),color='red')\n    plt.show();","73bddd72":"def custom_pie_plot(df, labels):\n    explode = [0]*df.shape[0]\n    explode[df.argmax()] = 0.1\n    explode = tuple(explode)\n    fig, ax1 = plt.subplots(figsize=(10,10))\n    ax1.pie(df,explode=explode, labels=labels,autopct=make_autopct(df.values), startangle = 90)\n    ax1.axis('equal')\n    plt.show();","2af58bda":"nulls.iloc[:40].argmax()","7b910d10":"custom_plot(nulls.iloc[:40], alls[0])","a7420112":"custom_plot(nulls.iloc[40:80],alls[1])","afcff6bb":"custom_plot(nulls.iloc[80:120], alls[2])","1e288206":"custom_plot(nulls.iloc[120:],alls[3])","f7ae8da1":"data_dict['Variable Name']","cbbc7575":"pd.set_option('display.max_colwidth', -1)","dc05d0f6":"data_dict[data_dict['Data Type'] == 'string'][['Variable Name','Description']]","7792b290":"x['ethnicity'].value_counts().plot(kind='bar')","82105f8f":"label_encoded = pd.get_dummies(x['ethnicity'], prefix='ethnic')","dc8d21cd":"meds = x['hospital_admit_source'].value_counts()","f1e1c620":"meds[meds.index.str.contains('ICU')]","0ef75b74":"def make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)\n    return my_autopct","66803727":"admitted_encoded = pd.get_dummies(x['hospital_admit_source'], prefix='Admitted_to')","d8c89e48":"x['hospital_admit_source'].value_counts().plot.pie(figsize=(10,10), labeldistance =1.2, \n                                                   autopct=make_autopct(x['hospital_admit_source'].value_counts().values))","322270a9":"import seaborn as sns","cd24e876":"x['icu_admit_source'].value_counts().plot.pie(y='values',pctdistance=0.8, \n                                              figsize=(10,10),fontsize=15,legend=True,\n                                              autopct=make_autopct(x['icu_admit_source'].value_counts().values), \n                                              labeldistance=1.2)","77fef4ae":"icu_admission = pd.get_dummies(x['icu_admit_source'], prefix='Shifted_to')","158ab365":"x['icu_type'].value_counts().plot.pie(pctdistance=0.8, figsize=(10,10), \n                                      autopct=make_autopct(df['icu_type'].value_counts().values),\n                                      labeldistance=1.2,fontsize=15,legend=True,\n            explode = [0.1 if i == df['icu_type'].value_counts().argmax() else 0 for i in range(df['icu_type'].nunique())])","a8849380":"icu_type_encoded = pd.get_dummies(x['icu_type'], prefix='Type')","2338966c":"x['icu_stay_type'].value_counts().plot.pie(figsize=(10,10),\n                                           autopct=make_autopct(x['icu_stay_type'].value_counts().values),\n                                          labeldistance=1.2,fontsize=15,legend=True,\nexplode = [0.1 if i == df['icu_stay_type'].value_counts().argmax() else 0 for i in range(df['icu_stay_type'].nunique())])","25f6b239":"icu_stay_type_encoded = pd.get_dummies(x['icu_stay_type'], prefix='Came_from')","24e17945":"x['apache_2_diagnosis']","f875cf6d":"x['apache_3j_diagnosis']","df7a2724":"x.dtypes[x.dtypes == np.object]","a0a21ebd":"x.groupby(['icu_type','gender'])['encounter_id'].count().plot.pie(figsize=(15, 15), \n                                    autopct=make_autopct(x.groupby(['icu_type','gender'])['encounter_id'].count().values))","c3ee222c":"8.42*130157","7d8dbe9b":"df.groupby(['gender', 'diabetes_mellitus'])['encounter_id'].count().plot.pie(figsize=(10,10), startangle=90,\n                          autopct=make_autopct(df.groupby(['gender', 'diabetes_mellitus'])['encounter_id'].count().values))","7f4b4682":"df.drop('Unnamed: 0',axis=1,inplace=True)","291ebbc6":"x_ed = df.iloc[:,:-1]","ff17dbc3":"x_ed","a445cdc4":"df","107b65a5":"cols = x_ed.columns[x_ed.dtypes == np.object].values","fcfeca85":"cols","fa477a28":"indexes = []\nfor j in cols:\n    for i in range(x.columns.shape[0]):\n        if x.columns[i] == j:\n            indexes.append(i)","220f2bb7":"indexes","422819f0":"for i in range(len(indexes)):\n    start = indexes[i]\n    get_fun = pd.get_dummies(x_ed[cols[i]],prefix=cols[i])\n    for j in range(get_fun.shape[1]):\n        x_ed.insert(start+j,value=get_fun.iloc[:, j],column=get_fun.columns[j])\n    x_ed = x_ed.drop(cols[i],axis=1)","80c99e4e":"x_ed","5d0976cb":"x_ed  = x_ed.set_index('encounter_id')\nx_ed","e4216c95":"y = df.iloc[:,-1]","4934dd23":"dropped = x_ed.ffill().dropna()","e361f491":"replacer = dropped.median()","2fdff533":"replacer","75c2d980":"midd = x_ed.ffill()","43270767":"x_ed.shape","a8bead22":"midd.dtypes == np.float","4c8fb156":"x_ed.columns[midd.dtypes == np.float]","b611f223":"midd = midd.reset_index()\nx_ed = x_ed.reset_index()","c3dd0d3d":"midd","b4b5529b":"for i in range(x_ed.shape[0]):\n    cols = x_ed.columns[midd.dtypes == np.float]\n    temp = midd.loc[i, midd.dtypes == np.float].isna()\n    for j in  range(temp.shape[0]):\n        if temp.iloc[j]:\n            midd.loc[i, cols[j]] = replacer[j]","9f6050c6":"midd","78e6b34b":"midd = midd.drop(['encounter_id','hospital_id'],axis=1)","ab78b54b":"# from sklearn.experimental import enable_halving_search_cv\nfrom catboost import CatBoostClassifier","02c11d44":"cbc = CatBoostClassifier(iterations=800,learning_rate=0.2,\n                   depth=8,loss_function='Logloss',auto_class_weights='Balanced',max_leaves=500,\n                        grow_policy='Lossguide',verbose=0)","22c7f2be":"from sklearn.metrics import plot_confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split","194e011f":"x_train, x_val, y_train, y_val = train_test_split(midd,y,test_size=0.2,random_state=42)","7e2e8e08":"f = cbc.fit(x_train,y_train)","acf2a165":"print(classification_report(f.predict(x_val),y_val))","0f9f9cf0":"### Custom function for plotting\n* This function takes the first 40 null counts, the labels on them\n* Plots a bar plot(horizontal) and the points on top(convention)\n* Thus for the final touch the lines joining the tops","3a48226f":"# Imputation\n* This library is for imputation which can be found on the [link](https:\/\/pypi.org\/project\/missingpy\/#description)\n* This will be implemented in later versions\n* This creates a Random forest for Imputation","1c39bc68":"## Piechart-1\n* Below piechart clearly describes the condition of Hospital\n* This shows that 52% of people came from Emergency department to ICU","2ac55120":"# Plotting, descriptions\nPlotting descriptions are important which helps to make the understanding of data more clearer\n* From below graph we can see most of them are numeric\n* This may be concluded as the major portion of result depends on the continious function of these numerics","3dcd009b":"# Function for percentage\n* This function auto construct the percentages which are correct to 2 decimal places\n* The autopct was taken from [Stackoverflow](https:\/\/stackoverflow.com\/questions\/6170246\/how-do-i-use-matplotlib-autopct)","f1624c0d":"# Importing\/Loading Data","f3c7f30a":"### Making cuts of 40\n* **Because** The nulls had 160 rows so 160\/4 = 40\n* Thus It makes sense to have 4 parts, and look at them seperately","79c915c0":"# Checking the Unique values\n* The values in the below bar graph clearly shows that there are more number of caucasians in the data\n* This may be the bias in the results and might have a significant effect","e3499aae":"## Piechart-3\n* Thus the below pie chart shows that most of the Med-Surg ICU\n* i.e. The icu where the medical surgery is appropiate, Concluding most them were for surgery","4618c6e9":"# Label Encoding\n* Label encoding does is like makes each of the unique values as feature and do binary encoding\n* **pd.getdummoes()** is the useful function which prevents to make an extra import for **sklearn**","d407a250":"# Specific keyword\n* On looking on the data, The word \"Whether\" was indication\n* So i found the one's which had whether and unsuprisngly they were binaries","4dcdebf3":"# Nulls\/NA\n* The main nerve to model this dataset is the Nulls.\n* The amount of nulls should be anaylsed in order to know the depths of data","f8a79966":"# Is the disease male biased?\n* The below piechart shows **Yes** but with a small margin of 8.42% numerically **1095921.94** which clearly a lot\n* Considering > 5 % showing a clear sign of disease is more common in Males","709d0f9f":"# Custom Filling\n* The imputation was taking too much time\n* Sometimes hours, which made me realize\n* Hey waiting 20 mins is better than waiting hours than getting nothing\n* Thus modify the replacer and it will fill the values","0f2976e6":"## Piechart-4\n* This is the simple pie chart to show that most of the ICU paitents were from admission\n* The intresting thing to note is readmission were less showing excllent recovery slot","a84bbed9":"# Was data gender biased?\n* Conclusively **NO** as we cannot conclude this as the below pie chart clearly show equal participation\n* It is very sad to see the equal participation in ICU wards.","c41de2e2":"# Getting units\n* Data with units can be very important to derieve the formula\n* ***Insight-1*** If you can find a way to encode the unit of measure correctly, might be able to come with a formula","0577576f":"# Data description\n* Important part is to know the data, Until you know the data nothing can be anaylsed\n* So far as an insight if you have nulls than data description helps for better imputation","3a09d8dc":"## Category\n* So far the category of labs have been imminent to patient\n* And vitals are second most as expected","df070031":"## PieChart-2\n* The following piechart shows 59% of people had Accident-Emergency as the cause of ICU\n* Further Clarifying that most ICU patients are from Accident Ward","ea0d4964":"# CatBoost\n* The documentation suggested to use Lossguide for num of leaves\n* The learning rate was tried from 0.01 to 0.1 and furthert 0.1 to 0.2\n* The depth was experimented on were [3,7,8]\n* Iterations should be more to reduce loss","31e57ae5":"# Data Description correction\n* BMI dtype is float now\n* Also apache 2 diagnosis and apache 3j diagnosis are all flots\n* So the data description chart to change them to numeric","b1ee9316":"# Looking at categorical variables\n* This is the one where we see the description and Variable Name of strings\n* Cause they are non-numeric types","892fc08d":"# Admit source\n* This checks from where the paitients came from"}}