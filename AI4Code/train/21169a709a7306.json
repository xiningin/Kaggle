{"cell_type":{"4dd3fcd0":"code","f9aa47c7":"code","b4d359bc":"code","d0570cf5":"code","0f65e0e1":"code","11b98fe1":"code","140606cc":"code","992b3495":"code","276dca0d":"code","53cde605":"code","0a8fb286":"code","5b09fcfc":"code","14a395c3":"code","e1e80c7a":"code","af538dd0":"code","0b981e24":"code","dee8d4a4":"markdown","c6337862":"markdown","9d048631":"markdown","1f160d91":"markdown","a75a9123":"markdown","7a4e8060":"markdown","bd84e598":"markdown","83ce9606":"markdown","32f99943":"markdown","e99cc504":"markdown","773576e1":"markdown"},"source":{"4dd3fcd0":"import pandas as pd\nimport numpy as np\nimport os\nfrom os import listdir\nimport cv2\nimport matplotlib.pyplot as plt\nimport glob\n%matplotlib inline  \n# To store resultimg plots\/graphs in the notebook document below the respective code cells\n\n!pip install chart_studio\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\n#Required to apply plotly\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\nimport seaborn as sns\nsns.set(style='whitegrid')\n\nimport pydicom\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')\nplt.show()","f9aa47c7":"print(os.listdir('..\/input\/landmark-recognition-2020\/'))","b4d359bc":"BASE_DIR = '..\/input\/landmark-recognition-2020\/'\n\ntrain_df = pd.read_csv(f'{BASE_DIR}train.csv')\nsample_df = pd.read_csv(f'{BASE_DIR}sample_submission.csv')\n\nprint('Number of training examples {}'.format(train_df.shape[0]))\ntrain_df.head()","d0570cf5":"print('sample_submission shape {}'.format(sample_df.shape))\nsample_df.head()","0f65e0e1":"print('## train_info ##')\nprint(train_df.info())","11b98fe1":"\nlandmarks = len(train_df['landmark_id'].unique())\nprint('Number of unique landmarks in train {}'.format(landmarks))","140606cc":"print('Top few landmark_ids by count')\n\nz = train_df.landmark_id.value_counts().head(10).to_frame()\nz.reset_index(inplace=True)\nz.columns=['landmark_id','count']\nz.landmark_id = z.landmark_id.apply(lambda x: f'id_{x}')\n\nz.style.background_gradient(cmap='Oranges')","992b3495":"# distribution of landmark_ids\n\ntrain_df['landmark_id'].value_counts().sort_values(ascending=False)\\\n.iplot(kind='barh',\n      xTitle='Count',\n      yTitle='landmark_id',\n      linecolor='black',\n      opacity=0.7,\n      color='orange',\n      theme='pearl',\n      bargap=0,\n      gridcolor='white',\n      title='[Interactive] Distribution of landmark_ids from training set')","276dca0d":"# distribution of top few landmark_ids based on count\n\nplt.figure(figsize=(14,5))\nplt.title('Top few landmark_id(s) based on count')\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x='landmark_id', y='count', data=z,)\nplt.show()","53cde605":"print('Bottom few landmark_ids based on count')\n\nz_ = train_df.landmark_id.value_counts().tail(10).to_frame()\nz_.reset_index(inplace=True)\nz_.columns=['landmark_id','count']\nz_.landmark_id = z_.landmark_id.apply(lambda x: f'id_{x}')\n\nz_.style.background_gradient(cmap='Oranges')\n#few landmark_ids with least count","0a8fb286":"# distribution of bottom few landmark_ids based on count\n\nplt.figure(figsize=(14,5))\nplt.title('Bottom few landmark_id(s) based on count')\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x='landmark_id', y='count', data=z_,)\nplt.show()","5b09fcfc":"#density plot\n\nplt.figure(figsize=(9,5))\nplt.title('landmark_id distribution')\nplt.ylabel('Density')\nsns.distplot(train_df.landmark_id, label='Train landmark_ids',color='#fdc029')\nplt.show()","14a395c3":"#scatter plot\ntemp = train_df.landmark_id.value_counts().to_frame()\ntemp.reset_index(inplace=True)\ntemp.columns=['landmark_id','count']\n\nplt.figure(figsize=(14,8))\nsns.scatterplot(x='landmark_id', y='count', data=temp)\nplt.ylabel('# of images')\nplt.xlabel('landmark id')\nplt.title('Number of images for each landmark category')","e1e80c7a":"print('Count of landmark_ids whick are in less than 100 images {}'.format(len(temp[temp['count']<100])))\npercentage = len(temp[temp['count']<100])\/landmarks * 100\nprint('{0:.2f}% of landmark_ids with less than 100 reference images'.format(percentage))","af538dd0":"train_list = glob.glob('..\/input\/landmark-recognition-2020\/train\/*\/*\/*\/*')","0b981e24":"f, axes = plt.subplots(3, 4, figsize=(48, 20))\nrnd = np.random.choice(100)\n\ncurr_row = 0\nfor i in range(12):\n    image = cv2.imread(train_list[i+rnd])\n    \n    col = i%4\n    axes[curr_row, col].imshow(image)\n    if col == 3:\n        curr_row += 1","dee8d4a4":"# Let's visualize some distributions","c6337862":"# Scatter plot for Number of images for each landmark_id","9d048631":"# Lets plot some random images from train","1f160d91":"## Number of unique landmarks","a75a9123":"# If you like my kernel, do upvote :)","7a4e8060":"# Import libraries","bd84e598":"## Train data info","83ce9606":"# Training Data","32f99943":"### More is coming...","e99cc504":"### References:\n[https:\/\/www.kaggle.com\/huangxiaoquan\/google-landmarks-v2-exploratory-data-analysis-eda\/notebook](https:\/\/www.kaggle.com\/huangxiaoquan\/google-landmarks-v2-exploratory-data-analysis-eda\/notebook)\n[https:\/\/www.kaggle.com\/codename007\/a-very-extensive-landmark-exploratory-analysis](https:\/\/www.kaggle.com\/codename007\/a-very-extensive-landmark-exploratory-analysis)","773576e1":"#### Clearly we don't have any missing values"}}