{"cell_type":{"a53b4b2b":"code","3ba27674":"code","eee7ae61":"code","6e4ed5a2":"code","462a3563":"code","56baa100":"code","a42af490":"code","09446846":"code","b10067c3":"code","65da22ad":"code","71b687cd":"code","cfb1fa15":"code","641ceeae":"code","07d5ffee":"code","846788e3":"code","8441354c":"code","cf4c80c1":"code","f5b5a0d4":"code","478d506d":"code","93411fc3":"code","5f055714":"code","2c65ab3d":"code","09adf8b6":"code","0da375bb":"code","dd8c3f0f":"markdown","d038921f":"markdown"},"source":{"a53b4b2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ba27674":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nclr = sns.color_palette(\"light:#5A9\", as_cmap=True)","eee7ae61":"df = pd.read_csv('..\/input\/entrepreneurial-competency-in-university-students\/data.csv')","6e4ed5a2":"df.head()","462a3563":"df.info()","56baa100":"df.isnull().sum()","a42af490":"del df['ReasonsForLack']","09446846":"df.info()","b10067c3":"cat_data = df.select_dtypes(include = ['object']).columns\nnum_data = df.select_dtypes(exclude = ['object']).columns","65da22ad":"#plt.figure(figsize=(10, 16))\nfor i, data in enumerate(cat_data):\n    plt.figure(i)\n    sns.countplot(cat_data[i], data=df, palette=\"light:#5A9\")","71b687cd":"for i, col in enumerate(num_data):\n    plt.figure(i)\n    sns.boxplot(num_data[i], data=df, )","cfb1fa15":"sns.pairplot(df, palette=\"light:#5A9\")","641ceeae":"sns.jointplot(x = df['Age'], y=df['Competitiveness'], kind='kde')","07d5ffee":"df.describe().T","846788e3":"plt.figure(figsize=(10, 6))\nsns.heatmap(df.corr(), annot=True)","8441354c":"df = pd.get_dummies(df)","cf4c80c1":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler","f5b5a0d4":"X = df.drop(['y'], axis = 1)\ny = df['y']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)","478d506d":"print(f\"Training data shape: {X_train.shape}, Training data label shape: {y_train.shape}\")\nprint(f\"Testing data shape: {X_test.shape}, Testing data label shape: {y_test.shape}\")","93411fc3":"ss = StandardScaler()\nX_train_s = ss.fit_transform(X_train)\nX_test_s = ss.fit_transform(X_test)","5f055714":"lda = LinearDiscriminantAnalysis()\nlda.fit(X_train_s, y_train)\npred = lda.predict(X_test_s)","2c65ab3d":"print(f\"Accuracy score of LinearDiscriminant model: {accuracy_score(y_test, pred)}\")","09adf8b6":"from sklearn.svm import SVR\n\nsvr = SVR()\nsvr.fit(X_train_s, y_train)\nsvr_pred = svr.predict(X_test_s)","0da375bb":"#mean_absolute_error(y_test, svr_pred)\nprint(f\"Mean Squared error of the given model: {mean_squared_error(y_test, svr_pred)}\")","dd8c3f0f":"MODEL CREATION","d038921f":"UNIVARIATE ANALYSIS"}}