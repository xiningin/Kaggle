{"cell_type":{"6e4b5d11":"code","06721c48":"code","0712ff83":"code","f1d72d9c":"code","c54631a9":"code","e545c974":"code","8a099634":"code","9968250c":"markdown","817fe8d0":"markdown","21f2fb97":"markdown","810f5c2b":"markdown","e50817b6":"markdown","bf3eb8ca":"markdown","9ce967cd":"markdown","5511c849":"markdown"},"source":{"6e4b5d11":"#Creating the employee table\nCREATE TABLE employee (\n  emp_id INT PRIMARY KEY,\n  first_name VARCHAR(40),\n  last_name VARCHAR(40),\n  birth_day DATE,\n  sex VARCHAR(1),\n  salary INT,\n  super_id INT,\n  branch_id INT\n);\n\n#Creating the branch table\nCREATE TABLE branch (\n  branch_id INT PRIMARY KEY,\n  branch_name VARCHAR(40),\n  mgr_id INT,\n  mgr_start_date DATE,\n  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL #Needed whenever a foreign key is assigned\n); #when assigning a foreign key a reference table must be specified with its original column name\n\n#need to reference the foreign keys in the first table\nALTER TABLE employee\nADD FOREIGN KEY(branch_id)\nREFERENCES branch(branch_id)\nON DELETE SET NULL;\n\n#can add the primary key as a foreign key in the same table\nALTER TABLE employee\nADD FOREIGN KEY(super_id)\nREFERENCES employee(emp_id)\nON DELETE SET NULL;\n\n#Creating the client table\nCREATE TABLE client (\n  client_id INT PRIMARY KEY,\n  client_name VARCHAR(40),\n  branch_id INT,\n  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL\n);\n\n#Creating a works_with table\nCREATE TABLE works_with (\n  emp_id INT,\n  client_id INT,\n  total_sales INT,\n  PRIMARY KEY(emp_id, client_id), #this table uses a composite primary key\n  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,\n  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE\n);\n\n#Creating a branch_supplier table\nCREATE TABLE branch_supplier (\n  branch_id INT,\n  supplier_name VARCHAR(40),\n  supply_type VARCHAR(40),\n  PRIMARY KEY(branch_id, supplier_name),\n  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE\n);","06721c48":"-- Corporate\nINSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);\n#can't insert last foreign key because table has no values\n\nINSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');\n\n#need to update the table since the initial values did not exist\nUPDATE employee\nSET branch_id = 1\nWHERE emp_id = 100;\n\nINSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);\n\n-- Scranton\nINSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);\n\nINSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');\n\nUPDATE employee\nSET branch_id = 2\nWHERE emp_id = 102;\n\nINSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);\nINSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);\nINSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);\n\n-- Stamford\nINSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);\n\nINSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');\n\nUPDATE employee\nSET branch_id = 3\nWHERE emp_id = 106;\n\nINSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);\nINSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);\n\n\n-- BRANCH SUPPLIER\nINSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');\nINSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');\nINSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');\nINSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');\nINSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');\nINSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');\nINSERT INTO branch_supplier VALUES(3, 'Stamford Labels', 'Custom Forms');\n\n-- CLIENT\nINSERT INTO client VALUES(400, 'Dunmore Highschool', 2);\nINSERT INTO client VALUES(401, 'Lackawana Country', 2);\nINSERT INTO client VALUES(402, 'FedEx', 3);\nINSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);\nINSERT INTO client VALUES(404, 'Scranton Whitepages', 2);\nINSERT INTO client VALUES(405, 'Times Newspaper', 3);\nINSERT INTO client VALUES(406, 'FedEx', 2);\n\n-- WORKS_WITH\nINSERT INTO works_with VALUES(105, 400, 55000);\nINSERT INTO works_with VALUES(102, 401, 267000);\nINSERT INTO works_with VALUES(108, 402, 22500);\nINSERT INTO works_with VALUES(107, 403, 5000);\nINSERT INTO works_with VALUES(108, 403, 12000);\nINSERT INTO works_with VALUES(105, 404, 33000);\nINSERT INTO works_with VALUES(107, 405, 26000);\nINSERT INTO works_with VALUES(102, 406, 15000);\nINSERT INTO works_with VALUES(105, 406, 130000);","0712ff83":"-- Find all employees\nSELECT *\nFROM employee;\n\n-- Find all clients\nSELECT *\nFROM client;\n\n-- Find all employees ordered by salary\nSELECT *\nFROM employee\nORDER BY salary; -- Can use DESC for descending order\n\n-- Find all employees ordered by sex then name\nSELECT *\nFROM employee\nORDER BY sex, first_name, last_name ; -- Can add multiple sorting columns\n\n-- Find the first and last names of all employees\nSELECT first_name, last_name -- Specific multiple columns can be returned\nFROM employee\n\n-- Find the forename and surnames of all employees\nSELECT first_name AS forename, last_name AS surname -- Use AS to rename a column in the search\nFROM employee\n\n-- Find out all the different gendres\nSELECT DISTINCT sex -- Find the different values stored in a column\nFROM employee","f1d72d9c":"-- Find the number of employees\nSELECT COUNT(emp_id) -- Count the number of instances in a column\nFROM employee;\n\n-- Find the numbers of female employees born after 1970\nSELECT COUNT(emp_id)\nFROM employee\nWHERE sex = 'F' AND birth_day > '1971-01-01' ; --Have to name complete date\n\n-- Find the average of all employees salaries\nSELECT AVG(salary)\nFROM employee;\n\n-- Find the average of all male employees salaries\nSELECT AVG(salary)\nFROM employee\nWHERE sex = 'M';\n\n-- Find the sum of all employees salaries\nSELECT SUM(salary)\nFROM employee;\n\n-- Find how many males and females there are\nSELECT COUNT(sex), sex\nFROM employee\nGROUP BY sex; -- Groups by the different entries of a column\n\n-- Find the total sales of each salesman\nSELECT emp_id, SUM(total_sales)\nFROM works_with\nGROUP BY emp_id; \n\n-- Find how much clients spent\nSELECT client_id, SUM(total_sales)\nFROM works_with\nGROUP BY client_id; ","c54631a9":"-- WILD CARDS\n\n-- % = any characters, _ = one character\n\n-- Find any clients who are an LLC\nSELECT * \nFROM client\nWHERE client_name LIKE '%LLC'; -- LIKE tries to find a pattern\n\n-- Find any branch suppliers who are in the label business\nSELECT * \nFROM branch_supplier\nWHERE supplier_name LIKE '% Label%';\n\n-- Find any employee born in October\nSELECT *\nFROM employee\nWHERE birth_day LIKE '____-10%';\n\n-- Find any clients who are schools\nSELECT * \nFROM client\nWHERE client_name LIKE '%school%';","e545c974":"-- Find a list of employee and branch names \nSELECT first_name\nFROM employee\nUNION\nSELECT branch_name\nFROM branch;\n-- 1. For union to work you must have the same number of columns\n-- that you are getting in the select statement\n-- 2. The columns must be the same data type\n\n-- Find a list of all clients & branch suppliers' names\nSELECT client_name, branch_id\nFROM client\nUNION\nSELECT supplier_name, branch_id\nFROM branch_supplier;\n\n-- Find a list of all the money earned or spent by the company\nSELECT salary\nFROM employee\nUNION\nSELECT total_sales\nFROM works_with;\n\n---------------------------------------------------\n\nINSERT INTO branch VALUES(4, 'Buffalo', Null, Null);\n\n-- Joins combine rows from two or more tables based on a related column between them\n\n-- Find all branches and the names of their managers\nSELECT employee.emp_id, employee.first_name, branch.branch_name\nFROM employee\nJOIN branch\nON employee.emp_id = branch.mgr_id;\n-- Will join the columns together as long as emp_id and mgr_id are the same\n\n-- Inner Join: will combine rows from different tables whenever they have a shared column\n-- Left Join: include all of the rows from the left table\n-- Right Join: include all of the rows from the right table\n\nSELECT employee.emp_id, employee.first_name, branch.branch_name\nFROM employee\nLEFT JOIN branch\nON employee.emp_id = branch.mgr_id;\n\nSELECT employee.emp_id, employee.first_name, branch.branch_name\nFROM employee\nRIGHT JOIN branch\nON employee.emp_id = branch.mgr_id;\n\n---------------------------------------------------\n\n-- Find the names of all emmployees who have\n-- over 30,000 to a single client\nSELECT employee.emp_id, employee.first_name, employee.last_name\nFROM employee\nWHERE employee.emp_id IN ( -- In Will highlight values within the search range\n    SELECT works_with.emp_id\n    FROM works_with\n    WHERE works_with.total_sales > 30000\n) ;\n\n-- Find all clients who are handled by the branch\n-- that Michael Scott manages\n-- Assuming you know Michael's ID\nSELECT client.client_name\nFROM client\nWHERE client.branch_id = ( -- used in only when there are multiple instances \n    SELECT branch.branch_id\n    FROM branch\n    WHERE branch.mgr_id = 102\n    Limit 1 -- limiting to 1 to find only the results of 1 branch\n);","8a099634":"-- A condition that tells the database to do something\n-- when a specific actions is done\n\nCREATE TABLE trigger_test(\n    message VARCHAR(100)\n);\n\n\n-- EXAMPLE 1\n\n-- Some code needs to be written directly into the console \n-- in order to change some query delimeters\n\nDELIMITER $$ -- changes the delimeter to two dollars sign so that first query part can be added\nCREATE \n    TRIGGER my_trigger BEFORE INSERT\n    ON employee\n    FOR EACH ROW BEGIN\n    INSERT INTO trigger_test VALUES('added new employee');\n    END $$\nDELIMITER ;\n\n-- To test trigger a new employee must be added\nINSERT INTO employee\nVALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);\n\n-- Test table to see if trigger worked\nSELECT * FROM trigger_test;\n\n-- EXAMPLE 2\n-- Inserts the first name of the new values added\nDELIMITER $$\nCREATE\n    TRIGGER my_trigger2 BEFORE INSERT\n    ON employee\n    FOR EACH ROW BEGIN\n        INSERT INTO trigger_test VALUES(NEW.first_name);\n    END $$\nDELIMITER ;\n\n-- To test trigger a new employee must be added\nINSERT INTO employee\nVALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);\n\n-- Test table to see if trigger worked\nSELECT * FROM trigger_test;\n\n\n-- EXAMPLE 3\n--Will use conditions to enter a text\n\nDELIMITER $$\nCREATE\n    TRIGGER my_trigger3 BEFORE INSERT -- Can create triggers for UPDATE and DELETE as well as AFTER instead of BEFORE\n    ON employee\n    FOR EACH ROW BEGIN\n        IF NEW.sex = 'M' THEN\n            INSERT INTO trigger_test VALUES('added male employee');\n        ELSEIF NEW.sex = 'F' THEN\n            INSERT INTO trigger_test VALUES('added female employee');\n        ELSE\n            INSERT INTO trigger_test VALUES('added other employee');\n        END IF;\n    END $$\nDELIMITER ;\n\n-- To test trigger a new employee must be added\nINSERT INTO employee\nVALUES(111, 'Pam', 'Besly', '1988-02-19', 'F', 69000, 106, 3);\n\n-- Test table to see if trigger worked\nSELECT * FROM trigger_test;\n\n-- Can delete triggers with\nDROP TRIGGER my_trigger;","9968250c":"## Introduction\nStructured Query Language or SQL and Tableau are some of the most important tools for any data analyst. In this notebook, I will create a company database based on the fictional paper and office supply sales company \"Dunder Mifflin\" from the American television series \"The Office\". I will also include some data visual representations of the finished database in Tableau. \n\nThe aim of this notebook is to demonstrate key competences in SQL and Tableau and to include this exercise as part of a bigger portfolio of data analysis initiatives. All the data contained within this notebook is fictional and is not an actual representation of any real company. \n\n## The Task\nThe task of this initiative is to create a company database and update it with their current employees. Furthermore, it will be required to visually represent some of the data and create a dashboard that stakeholders and managers can use to have an understanding of their company. \n\n## Database Requirements\nThe company database should be structured as follows:\n\nThe database needs to be organised into branches. Each branch needs to have a unique number, a name, and a particular employee who manages it. \n\nSince the company makes its money be selling to clients, each client should have a name and a unique number to identify it.\n\nThe foundation of the company is its employees, therefore, each employee should have a name, date of birth, sex, salary, and a unique number.\n\nAn employee can work for one branch at a time. Each branch will be managed by one of the employees that work there. It is also necessary to keep track of when the current manager started his or her role.\n\nAn employee can act as a supervisor for other employees at the branch, an employee may also act as the supervisor for employees at other branches. An employee can have at most one supervisor. \n\nSince a branch can handle multiple clients, each client should have a name and a unique number to identify it. A single client may only be handled by one branch at a time.\n\nEmployees can work with clients controlled by their branch to sell them supplies. If necessary, multiple employees can work with the same client. It is required to keep track of how many dollars worth of supplies each employee sells to each client they work with.\n\nMany branches will need to work with suppliers to buy inventory. For each supplier, it is required to keep a track of their name and type of product they are selling to the branch. A single supplier may supply products to multiple branches.\n\n## Visualisation of the ER Diagram\n\n![Screenshot 2021-11-03 at 15.56.31.png](attachment:e92a4672-16ef-4da9-8333-560daafda312.png)","817fe8d0":"#### Adding the Company's Data to the Database","21f2fb97":"#### Using Simple Queries to Obtain Data Insights","810f5c2b":"## Data Visualisation in Tableau\n\n![Screenshot 2021-11-05 at 13.11.46.png](attachment:ac1b0447-4bda-4f81-9842-31dd22a30475.png)\n\n[Link to Dashboard](https:\/\/public.tableau.com\/app\/profile\/patrick5331\/viz\/BuildingaCompanyDatabase\/GlobalOverview?publish=yes)\n","e50817b6":"#### Creation of the Company's Database","bf3eb8ca":"#### Demonstration of the Use of Triggers","9ce967cd":"## Data Acknowledgement\nAll the data used and exercises are originally from freeCodeCamp.org.","5511c849":"#### Demonstration of Unions, Joins, and Nested Queries"}}