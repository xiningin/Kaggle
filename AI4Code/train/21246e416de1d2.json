{"cell_type":{"d5d4dba8":"code","d8002e17":"code","265ea325":"code","b976bccb":"code","c4943e2f":"code","dee1b291":"code","085ae6b1":"code","c7a8f07c":"code","3b5235ef":"code","5436e2fa":"code","f81b1e0a":"code","585c3232":"code","b9c767f1":"code","1a42ecc9":"code","b0b07714":"code","26ab1d34":"markdown","01d00685":"markdown","1de3fea0":"markdown","71794263":"markdown","ca264cb7":"markdown","21ea3879":"markdown","b9501f88":"markdown","ccddae83":"markdown"},"source":{"d5d4dba8":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tensorflow.keras.layers import Dropout, Conv2D, Dense, MaxPooling2D, AveragePooling2D, Flatten, BatchNormalization\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.applications import NASNetLarge\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\nimport os\nimport random","d8002e17":"df = pd.read_csv('..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train.csv')\ndf.head()","265ea325":"train_dir = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/train\/'\ntest_dir = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/'\n\n# Show some labels and images\n\nfor i in range(6):\n    plt.subplot(2,3,i+1)\n    img = cv2.imread(train_dir+df.loc[i,'Image'])\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.title(df.loc[i,'Class'])\n    plt.axis(\"off\")\nplt.show()","b976bccb":"datagen = ImageDataGenerator(rescale=1.\/255.,\n                            validation_split=0.2)\n                            #height_shift_range=0.2,\n                            #shear_range=0.2,\n                            #horizontal_flip=True,\n                            #width_shift_range=0.2,","c4943e2f":"train_gen = datagen.flow_from_dataframe(df,\n                                       directory=train_dir,\n                                       x_col='Image',\n                                       y_col='Class',\n                                       color_mode='rgb',\n                                       target_size=(331,331),\n                                       class_mode='categorical',\n                                       shuffle=True,\n                                       subset='training',\n                                       batch_size=128)\n\nval_gen = datagen.flow_from_dataframe(df,\n                                    directory=train_dir,\n                                    x_col='Image',\n                                    y_col='Class',\n                                    color_mode='rgb',\n                                    target_size=(331,331),\n                                    class_mode='categorical',\n                                    shuffle=True,\n                                    subset='validation',\n                                    batch_size=128) ","dee1b291":"train_gen.class_indices","085ae6b1":"base_layer = NASNetLarge(pooling='avg', weights='imagenet', include_top=True)\n\nmodel = Sequential([base_layer,\n                   Dense(units = 512, activation='relu'),\n                   Dropout(0.4),\n                   Dense(units = 256, activation='relu'),\n                   Dropout(0.3),\n                   Dense(units=6, activation='softmax')])\n\nmodel.layers[0].trainable=False\n\nopt = Adam(lr=1e-3, decay=1e-5)\n\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\nmodel.summary()","c7a8f07c":"history = model.fit(train_gen, validation_data=val_gen, epochs=10)","3b5235ef":"results = model.evaluate(val_gen)\nprint(\"val_loss, val_acc: \", results)","5436e2fa":"plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.plot(history.history['accuracy'], label='Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(borderpad=2)\nplt.show()\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.plot(history.history['loss'], label='Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(borderpad=2)\nplt.show()","f81b1e0a":"def preprocess(path):\n    img = cv2.imread(path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (331, 331))\n    img = img\/255.\n    return img","585c3232":"old_labels = train_gen.class_indices\nNUM_TO_LABEL = dict((v,k) for k,v in old_labels.items())\nNUM_TO_LABEL","b9c767f1":"path = '..\/input\/hackerearth-deep-learning-challenge-holidayseason\/dataset\/test\/image1014.jpg'\nimg = cv2.imread(path)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img)\nimg = preprocess(path)\nplt.title(NUM_TO_LABEL[model.predict(img.reshape(1,331,331,3)).argmax()])\nplt.axis(\"off\")\nplt.show()","1a42ecc9":"files = os.listdir(test_dir)\n\ny_pred = []\n\nfor file in files:\n    img = preprocess(test_dir+file)\n    y_pred.append(NUM_TO_LABEL[model.predict(img.reshape(1,331,331,3)).argmax()])","b0b07714":"dict = {'Image': files, 'Class': y_pred}\n\npf = pd.DataFrame(dict)\npf.to_csv('results.csv')","26ab1d34":"# Evaluate on validation data","01d00685":"# Training graphs","1de3fea0":"# Preprocess the images and split into train and validation","71794263":"# Show an image and label","ca264cb7":"# Create the test predictions","21ea3879":"# Importing Libraries","b9501f88":"# Loading the Data","ccddae83":"# Create and train the model"}}