{"cell_type":{"8e8db01f":"code","b7b6800e":"code","b8e45440":"code","141a78a0":"code","dd3f348c":"code","2cfdc2f5":"code","e67c5b05":"code","1307116e":"code","39677215":"code","42771ad8":"code","cdd33d68":"code","db2c5e9c":"code","fd55a4fd":"code","32d77454":"code","511e9c3f":"code","3beaf2ff":"code","dfb4f075":"code","17e3302f":"code","4df9e492":"code","c6d1fc0f":"code","349b2782":"code","5923e1c3":"code","c12a7089":"code","836e71ab":"code","caa351f0":"code","cc1c35eb":"code","e2f83f22":"code","895fdce8":"code","2f1d2916":"code","5c9e60e2":"code","0e1a763d":"code","81eb4dfe":"code","e7039309":"code","fcea3d1b":"code","d795a80b":"code","52316989":"code","be8d9239":"code","b8041bfb":"code","8b377f30":"code","88509651":"code","a7773155":"code","e6500693":"code","09d7cbac":"code","47c8d384":"code","ec86cb24":"code","ef0adfc0":"code","5bd6d198":"code","65cd8a28":"code","c1ecebca":"code","902959f6":"code","8031c4cf":"code","39009298":"code","a924a032":"code","d86ad204":"code","7ff247c1":"code","881b64bd":"code","eda4dca1":"code","4d5b341a":"code","7fd279c0":"code","a4afc8ed":"code","299a5c78":"code","d6ad7ee8":"code","8309d193":"code","57b3ea85":"code","ac17c893":"code","4a742cb3":"code","b6803aa6":"code","31c2cf2f":"code","b2205145":"code","046df64f":"code","5d71b92f":"code","c7cf7641":"code","364112ce":"code","9a8cf9ad":"code","942f9390":"code","425806f9":"code","31df9264":"code","3d230b3f":"code","0df55f12":"code","4033af7d":"code","15a0176b":"code","c2adbc8c":"code","cd029e3a":"code","9f41de86":"code","a04b4e87":"code","6d1924f8":"code","6c60b458":"code","3f331e0b":"code","1075a408":"code","332bb209":"code","a34ea75f":"code","50268417":"code","4d1ea365":"code","bafa6589":"code","3796cb63":"code","f0830268":"code","d2828fc3":"code","de67d016":"code","ab0325c6":"code","8b2dd50e":"code","4c9e9f4f":"code","f2c54685":"code","b45b55ec":"code","26fb3b29":"code","c44c2f6d":"code","02e6cc19":"code","3566068a":"code","9ce73156":"code","2a1bdab6":"code","58c5f756":"code","bd7748a1":"code","e15b84d4":"code","db4fe2f8":"code","cc003145":"code","a4515042":"code","8c415e89":"code","343b8e74":"code","bcfdf99d":"code","2c9ab9e9":"code","cc18ec3e":"code","cc279478":"code","b559d9bd":"code","afc4db79":"code","314c55e8":"code","fede679d":"code","61873bea":"code","628c3842":"code","a7a6e506":"code","5464dbe9":"code","fafd13e4":"code","0e70cc96":"code","5a50ce92":"code","943eace7":"code","c10c7072":"code","574bb1ae":"code","be162fe9":"code","664d2134":"code","fc7e79c9":"code","b5aff8ae":"code","db14361c":"code","7c9103bb":"code","0477a22d":"code","080311f8":"code","fab4c5eb":"code","a2c67c21":"code","f0184c6a":"code","4ca45911":"code","8fdce40e":"code","0b43ef27":"code","b547492a":"code","955bba95":"code","151afbc3":"code","c3ae0af5":"code","2d0dca7c":"code","ba46578b":"code","548a92d3":"code","ebc3aa4d":"code","b28f47ca":"code","f0fe7e6b":"code","f1a0e245":"code","1f540ea4":"code","3c6dd86a":"code","56c786f1":"code","ebc28366":"markdown","64f014d1":"markdown","8342ef28":"markdown","985bc11b":"markdown","378d3a9f":"markdown","da0b446e":"markdown","2c7b771b":"markdown","8f57a1c4":"markdown","89e3193c":"markdown","bb6058b5":"markdown","f1d1933e":"markdown","30cf040b":"markdown","f1110afb":"markdown","fbb65e38":"markdown","f5bf0385":"markdown","3b7ffb44":"markdown","5393d558":"markdown","d53c328d":"markdown","ae08d61a":"markdown","8b8f01e2":"markdown","4ef1bed0":"markdown","aadd54a1":"markdown","22c55195":"markdown","734508a0":"markdown","626364b4":"markdown","d03ff402":"markdown","612ac2a5":"markdown","de79d540":"markdown","d79e094c":"markdown","e603f341":"markdown","ad782547":"markdown","29f5bb0a":"markdown","14ab72dc":"markdown","9074a3fe":"markdown","3fdb8d81":"markdown","68dded21":"markdown","440f7a38":"markdown","e8d9eef2":"markdown","08049649":"markdown","11b9f547":"markdown","5a8283a7":"markdown","11c09fec":"markdown","1b68fe6c":"markdown","1f38e51d":"markdown","2327d159":"markdown","cdc22f4b":"markdown","40699f39":"markdown","073c7a22":"markdown","e1131e0d":"markdown","00f70dee":"markdown","6bbf8475":"markdown","3d7606f1":"markdown","9137b51b":"markdown","60eb8e1e":"markdown","5025553d":"markdown","f96d054c":"markdown","4777431e":"markdown","48c3d7fb":"markdown","3ed6835a":"markdown","ee89e61e":"markdown","6a13e430":"markdown","7b071095":"markdown"},"source":{"8e8db01f":"!pip install seaborn==0.11.0","b7b6800e":"import pandas as pd \nimport numpy as np\nfrom catboost import CatBoostRegressor, FeaturesData, Pool\nfrom sklearn.metrics import mean_absolute_error\nimport seaborn as sns","b8e45440":"sns.__version__","141a78a0":"df = pd.read_csv(\"..\/input\/seattle-airbnb\/price_train.csv\")","dd3f348c":"df.info()","2cfdc2f5":"import matplotlib.pyplot as plt\nplt.figure(figsize = (15,10))\nsns.heatmap(df.corr(), annot = True)","e67c5b05":"df.head()","1307116e":"test = pd.read_csv(\"..\/input\/seattle-airbnb\/price_test.csv\")","39677215":"test","42771ad8":"df['price'] = df['price'].str.replace(\"$\", \"\"); df['price'] = df['price'].str.replace(\",\", \"\"); df['price'] = df['price'].astype(float)","cdd33d68":"df","db2c5e9c":"from sklearn.preprocessing import LabelBinarizer\nencoder = LabelBinarizer()","fd55a4fd":"host_response_time = encoder.fit_transform(df['host_response_time'])\n\nhost_response_time ","32d77454":"X = df.drop(['X1', 'id', 'price'], axis =1)","511e9c3f":"X.columns","3beaf2ff":"print(\"Number of Features -> \", len(X.columns))","dfb4f075":"X.isna().sum()","17e3302f":"y = df[['price']]","4df9e492":"y","c6d1fc0f":"y.isna().sum()","349b2782":"X['host_is_superhost'] =X['host_is_superhost'].apply(lambda x : 0 if x == False else 1)  ","5923e1c3":"X['host_is_superhost']","c12a7089":"sns.countplot(X['host_is_superhost'])","836e71ab":"X['host_response_rate'] = X['host_response_rate'].str.replace(\"%\", \"\")\nX['host_response_rate'] = X['host_response_rate'].astype(float) \/ 100.0","caa351f0":"X","cc1c35eb":"X[\"host_identity_verified\"] = X[\"host_identity_verified\"].apply(lambda x: 0 if x == False else 1)","e2f83f22":"encoder = LabelBinarizer()\nneighbor_grp_cleansed = encoder.fit_transform(X['neighbourhood_group_cleansed'])\nneighbor_grp_cleansed","895fdce8":"X['neighbourhood_group_cleansed'].value_counts()","2f1d2916":"len(X.columns)","5c9e60e2":"X['cleaning_fee'] = X['cleaning_fee'].str.replace(\"$\", \"\")","0e1a763d":"X['cleaning_fee'] = X['cleaning_fee'].str.replace(\",\", \"\")\n","81eb4dfe":"X['cleaning_fee'] = X['cleaning_fee'].astype(float)","e7039309":"X.columns","fcea3d1b":"X['host_is_superhost']","d795a80b":"X['host_response_rate']","52316989":"X['host_response_rate'].value_counts()","be8d9239":"X['host_response_rate'].corr(df['price'])","b8041bfb":"sns.displot(X['host_response_rate'])","8b377f30":"sns.regplot(X['host_response_rate'], df['price'])","88509651":"X[X['host_response_rate'] == 0]","a7773155":"# to be settled\n\nX['host_response_time']","e6500693":"sns.barplot(X['host_response_time'], df['price'])","09d7cbac":"sns.barplot(X['host_response_time'], df['price'], hue = X['host_is_superhost'], palette = ['r','k'])\nplt.show()","47c8d384":"# to be settled, feature scaling\n\nX['host_listings_count']","ec86cb24":"X['host_listings_count'].corr(df['price'])","ef0adfc0":"sns.scatterplot(X['host_listings_count'], df['price'])","5bd6d198":"sns.regplot(X['host_listings_count'], df['price'])","65cd8a28":"X['host_identity_verified']","c1ecebca":"X['host_identity_verified'].corr(df['price'])","902959f6":"sns.violinplot(X['host_identity_verified'], df['price'])","8031c4cf":"sns.boxplot(X['host_identity_verified'], df['price'])","39009298":"sns.boxplot(X['host_identity_verified'], X['host_listings_count'])","a924a032":"# to be settled\n\nX['accommodates']","d86ad204":"X['accommodates'].value_counts()","7ff247c1":"sns.kdeplot(X['accommodates'], df['price'], shade = True)","881b64bd":"# to be settled\n\nX['neighbourhood_group_cleansed']","eda4dca1":"plt.figure(figsize = (25,10))\nsns.boxplot(X['neighbourhood_group_cleansed'], df['price'])","4d5b341a":"X['property_type']","7fd279c0":"plt.figure(figsize = (25,10))\nsns.countplot(X['property_type'])","a4afc8ed":"plt.figure(figsize = (25,10))\nsns.boxplot(X['property_type'], df['price'])","299a5c78":"# to be settled\n\nX['room_type']","d6ad7ee8":"## Let's explore the room type distribution\n\nsns.countplot(X['room_type'], hue = df['host_is_superhost'])\nplt.show()","8309d193":"# to be settled\n\nX['latitude']","57b3ea85":"# to be settled\n\nX['longitude']","ac17c893":"X.drop(['latitude', 'longitude'], axis = 1, inplace = True)","4a742cb3":"test.drop(['latitude', 'longitude'], axis = 1, inplace = True)","b6803aa6":"# to be feature scaled\n\nX['guests_included']","31c2cf2f":"sns.regplot(X['guests_included'], df['price'])","b2205145":"# to be feature scaled\n\nX['bathrooms']","046df64f":"sns.regplot(X['bathrooms'], df['price'])","5d71b92f":"# to be feature scaled\n\nX['bedrooms']","c7cf7641":"sns.regplot(X['bedrooms'], df['price'])","364112ce":"# to be settled, feature scaled\n\nX['beds']","9a8cf9ad":"sns.displot(X['beds'], bins = 3)","942f9390":"X['beds'].value_counts()","425806f9":"plt.figure(figsize = (15,10))\nsns.boxplot(X['beds'], df['price'])\nplt.show()","31df9264":"# to be settled\n\nX['bed_type']","3d230b3f":"X['bed_type'].value_counts()","0df55f12":"sns.boxplot(X['bed_type'] , df['price'])","4033af7d":"X['amenities']\n","15a0176b":"X['amenities'] = X['amenities'].str.replace(\"[{}]\", \"\")\nX['amenities']","c2adbc8c":"X['amenities'] = X['amenities'].str.replace('[\"\"]', \"\")\nX['amenities']","cd029e3a":"amenities = np.unique(np.concatenate(X['amenities'].map(lambda x : x.split(\",\"))))\namenities","9f41de86":"X.iloc[0]['amenities']","a04b4e87":"amenities = amenities[1:][:-2]\namenities","6d1924f8":"amenities = [x.strip() for x in amenities]","6c60b458":"amenities","3f331e0b":"for amenity in amenities : \n    X[\"has_\" + amenity] = X['amenities'].apply(lambda x : int(amenity in x))","1075a408":"X","332bb209":"X.drop(['amenities'], axis = 1, inplace = True)","a34ea75f":"for amenity in amenities : \n    test[\"has_\" + amenity] = test['amenities'].apply(lambda x : int(amenity in x))","50268417":"test","4d1ea365":"test.drop(['amenities'], axis = 1, inplace = True)","bafa6589":"# feature scaling\n\nX['cleaning_fee']","3796cb63":"sns.distplot(X['cleaning_fee'])","f0830268":"sns.lineplot(X['cleaning_fee'], df['price'])","d2828fc3":"# feature scaling \n\nX['minimum_nights']","de67d016":"X['minimum_nights'].value_counts()","ab0325c6":"sns.scatterplot(X['minimum_nights'], df['price'])","8b2dd50e":"sns.regplot(X['minimum_nights'], df['price'])","4c9e9f4f":"X['maximum_nights']","f2c54685":"sns.scatterplot(X['maximum_nights'], df['price'])","b45b55ec":"sns.regplot(X['maximum_nights'], df['price'])","26fb3b29":"X['instant_bookable'] = X['instant_bookable'].apply(lambda x : 0 if x == False else 1)\nX['instant_bookable']","c44c2f6d":"X['instant_bookable'].corr(df['price'])","02e6cc19":"sns.countplot(X['instant_bookable'])","3566068a":"sns.boxplot(X['instant_bookable'], y = df['price'])","9ce73156":"X['cancellation_policy']","2a1bdab6":"X['cancellation_policy'].value_counts()","58c5f756":"plt.figure(figsize = (15,10))\nsns.violinplot(X['cancellation_policy'], df['price'])","bd7748a1":"plt.figure(figsize = (15,10))\nsns.violinplot(X['cancellation_policy'], df['price'], hue = X['host_is_superhost'], split = True, palette = ['r', 'k'])","e15b84d4":"plt.figure(figsize = (15,10))\nsns.boxplot(X['cancellation_policy'], df['price'])","db4fe2f8":"test['host_is_superhost'] = test['host_is_superhost'].apply(lambda x : 1 if x == True else 0)","cc003145":"categorical_features = np.where(X.dtypes == object)[0]\ncategorical_features","a4515042":"test['host_response_rate'] = test['host_response_rate'].apply(lambda x : float(x[:-1]) \/ 100)","8c415e89":"test['cleaning_fee'] = test['cleaning_fee'].str.replace(\"$\", \"\")\ntest['cleaning_fee'] =test['cleaning_fee'].astype(float)","343b8e74":"test = test.drop(['X1'], axis = 1)\ntest","bcfdf99d":"test = test.drop(['id'], axis = 1)","2c9ab9e9":"categorical_features = np.where(test.dtypes == object)[0]\ncategorical_features","cc18ec3e":"model = CatBoostRegressor(iterations=2000, learning_rate=0.05, depth=5)","cc279478":"model.fit(X,y, cat_features = categorical_features,plot = False)\n","b559d9bd":"X.columns","afc4db79":"test.columns","314c55e8":"len(X.columns) == len(test.columns)","fede679d":"preds = model.predict(test)\n\n#, cat_features = categorical_features)","61873bea":"preds","628c3842":"test.columns","a7a6e506":"columns_ = list(test.columns)\ncolumns_","5464dbe9":"columns_.append('Price')","fafd13e4":"pd.DataFrame(np.c_[test, preds], columns = columns_).to_csv(\"Predictions1_CatBoost.csv\", index = False)","0e70cc96":"X.drop(['minimum_nights', 'maximum_nights'], axis = 1, inplace = True)","5a50ce92":"test.drop(['minimum_nights', 'maximum_nights'], axis = 1, inplace= True)","943eace7":"model = CatBoostRegressor(iterations=2000, learning_rate=0.05, depth=5)","c10c7072":"categorical_features = np.where(test.dtypes == object)[0]\ncategorical_features","574bb1ae":"categorical_features = np.where(X.dtypes == object)[0]\ncategorical_features","be162fe9":"model.fit(X,y, cat_features = categorical_features,plot = False)\n","664d2134":"preds = model.predict(test)","fc7e79c9":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds], columns = columns_).to_csv(\"Predictions2_FeatureSelection_CatBoost.csv\", index = False)","b5aff8ae":"X.info()","db14361c":"X.columns[categorical_features]","7c9103bb":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor(n_estimators = 300, criterion = 'mse', n_jobs = -1)","0477a22d":"cat_columns = list(X.select_dtypes(include=['object']).columns)","080311f8":"cat_columns","fab4c5eb":"for col in  cat_columns:\n    X = pd.concat([X.drop(col, axis=1), pd.get_dummies(X[col], prefix=col, prefix_sep='_',\n\n                                                         drop_first=True)], axis=1)","a2c67c21":"list(X.columns)","f0184c6a":"for col in  cat_columns:\n    test = pd.concat([test.drop(col, axis=1), pd.get_dummies(test[col], prefix=col, prefix_sep='_',\n\n                                                         drop_first=True)], axis=1)","4ca45911":"list(test.columns)","8fdce40e":"print(len(X.columns))\nprint(len(test.columns))","0b43ef27":"for x in list(X.columns):\n    if x not in list(test.columns):\n        print(x)","b547492a":"for x in list(test.columns):\n    if x not in list(X.columns):\n        print(x)","955bba95":"X['property_type_Treehouse'] = 0\nX['bed_type_Couch'] = 0","151afbc3":"test['property_type_Boutique hotel'] = 0\ntest['property_type_Farm stay'] = 0\ntest['property_type_Hostel'] = 0\ntest['property_type_In-law'] = 0\ntest['property_type_Resort'] = 0\ntest['property_type_Yurt'] = 0","c3ae0af5":"len(list(X.columns)) == len(list(test.columns))","2d0dca7c":"forest.fit(X,y)","ba46578b":"preds_forest = forest.predict(test)","548a92d3":"preds_forest","ebc3aa4d":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds_forest], columns = columns_).to_csv(\"Predictions3_RandomForestRegressor.csv\", index = False)","b28f47ca":"import xgboost\nxgb = xgboost.XGBRegressor(n_estimators=300, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\nxgb.fit(X,y)","f0fe7e6b":"X.columns","f1a0e245":"preds_xgb = xgb.predict(test[X.columns])","1f540ea4":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds_xgb], columns = columns_).to_csv(\"Predictions4_XGBoost.csv\", index = False)","3c6dd86a":"import shutil\n\nshutil.rmtree('.\/catboost_info')","56c786f1":"import os\nos.rename('.\/Predictions2_FeatureSelection_CatBoost.csv', 'Final Predictions.csv')","ebc28366":"We can conclude that orders which are responded within an hour, are the costliest ones.","64f014d1":"Most popular amenities","8342ef28":"Conclusion : There is a obvious & direct relation between the accommodates & the price (few being outliers because of other factors or fascilities causing their price to increase). ","985bc11b":"A huge chunk of price lies in the range of 50 to 100 for cleaning. \n\nFor a small fraction, it is 200 to 400. Let's see if that higher cleaning_fee is related to higher price. Intutively, it should be.","378d3a9f":"### Method -2 \n\nFeature Selection","da0b446e":"But, with a verified identity, higher listings count can be achieved.","2c7b771b":"Correlation doesn't indicate the relation quite well. Let's explore more into the distribution & details.","8f57a1c4":"As per NyTimes, A superhost maintains a quick response rate. Let's verify with the data.","89e3193c":"Conclusion : Boutique Hotel & Villa have the highest mean price in the property type.","bb6058b5":"No missing values in the dataset.","f1d1933e":"### Findings","30cf040b":"We'll have to make features of boolean type depicting has or has not for an amenity. ","f1110afb":"Conclusion: Minimum and Maximum Nights don't seem to have a direct effect on the price of the listing.","fbb65e38":"### Method -3 \n\nRandomForest Regressor","f5bf0385":"Although, readings are quite close to each other, it is right to say that number of instant bookings and reserved are equal. However, the ones which have supported instant bookings are on the higher end if we compare the 75th quantile & Max Value. \n\nWe can support our assumption based on these two factors.","3b7ffb44":"Conclusion : With increasing number of bedrooms, the price increases.","5393d558":"Conclusion : \n\n1. Majority of the listings have response rate as 1.0\n\n2. It doesn't affect the price directly\n\nbecause if response_rate is 0, it would eventually be listed out. However, few of the listings had response rate as 0. Let's explore those few responses.","d53c328d":"Boosting Algorithms\n\nXGBoost","ae08d61a":"Conclusion: \n1. If the host is a normal host, the number of requests must be low compared to the superhost, which is resulting in faster response time compared to superhosts.\n2. There might be listings which want to fulfill the criteria of becoming a superhost. And to achieve this feat, they are outperforming in the response time field.","8b8f01e2":"Model 1 -> CatBoost\n\nModel 2 -> CatBoost with Feature Selection (Final Model)\n\nModel 3 -> Random Forest Regressor\n\nModel 4 -> XGBoost","4ef1bed0":"Converting categorical columns to dummies","aadd54a1":"Drop 'latitude' & 'longitude' as these are redundant features compared to 'neighbourhood_group'.\nAdded to it, coordinates aren't the best indicators of price as compared to neighbourhood.","22c55195":"Further Analysis\/Assumption: Instant bookings tend be expensive than reserved bookings? Let's verify our statement","734508a0":"### Feature Wise Preprocessing & Analysis","626364b4":"## Finalizing Outputs","d03ff402":"Conclusion: With the bed type, the price increases. Real bed are the costliest among all as expected.","612ac2a5":"#### Method -4 ","de79d540":"Model 2 seems to be a good option as it is meant to deal optimally with Categorical Features. CatBoost provides a flexible interface for parameter tuning and can be configured to suit different tasks.","d79e094c":"Similarly for test dataset,","e603f341":"Observation : Apertment, House & Guest Suite are the most common property types. ","ad782547":"Conclusion : With increasing number of bathrooms, the price increases.","29f5bb0a":"Preprocess \"cleaning_fee\" to generate numeric column type","14ab72dc":"Let's deal with the categorical variables so as to use RFRegressor","9074a3fe":"We can say, those with 0 response_rate have listings count as 1 (majorly). \nWe can also say, those are intended for long term bookings.","3fdb8d81":"preprocessing Price Column","68dded21":"Drop \"id\" & \"price\" columns from the df to generate X","440f7a38":"Preprocessing \"host_response_rate\" to generate numeric value","e8d9eef2":"Observation: Although, there is a slight difference of number of bookings which satisfyied \"instant_bookable\". However, majority of the bookings are instant_bookable. \n\nConclusion : Majority of the bookings happen to be instant.\n","08049649":"Finding : Superhosts don't support \"super_strict_60\" and \"super_strict_30\"","11b9f547":"Observation : Most of the bookings which happen, comprise of at max 6 beds.","5a8283a7":"A little text cleaning","11c09fec":"Conclusion: \n\n1. Comparing among strict, moderate & flexible, as obvious it should be, the ones with strict cancellation policy tend to be on the higher range.\n\n2. Comparing Super Strict 60 (atleast 60 days cancellation) & Super Strict 30 (atleast 30 days cancellation), super strict 60 should be on the higher end of prices. And it is.\n\n3. Strict 14 with grace period seems to be the most commonly adapted and preferred cancellation policy among all.","1b68fe6c":"We can confirm that, host_identity verification doesn't make any difference to the price.","1f38e51d":"# Summary","2327d159":"## Data Modelling","cdc22f4b":"Conclusion : Although there are some spikes in between (aberrations), we can say there's a linear increase of price with the cleaning_fee.","40699f39":"Conclusion : With increasing number of guests_included, the price increases proportionately. Number of guests_included has a direct impact on the price of the listing.","073c7a22":"##### Preliminary Feature Processing","e1131e0d":"1. We can conclude that orders which are responded within an hour, are the costliest ones.\n\n2. With the bed type, the price increases. Real bed are the costliest among all as expected.\n\n3. Majority of the listings are for Enitre home\/apt.\n\n   1. Among the listings, there is an equal distribution for host being superhost.\n\n   2. No Superhost for shared room which should be obvious.\n\n4. Majority of the bookings happen to be instant. \n\n5. Instant Bookings tend to be expensive.\n\n6. Cancellation Policy\n    1. Comparing among strict, moderate & flexible, as obvious it should be, the ones with strict cancellation policy tend to be on the higher range.\n\n    2. Comparing Super Strict 60 (atleast 60 days cancellation) & Super Strict 30 (atleast 30 days cancellation), super strict 60 should be on the higher end of prices. And it is.\n\n    3. Strict 14 with grace period seems to be the most commonly adapted and preferred cancellation policy among all.  \n    \n7.  With the bed type, the price increases. Real bed are the costliest among all as expected.\n8. Although there are some spikes in between (aberrations), we can say there's a linear increase of price with the cleaning_fee.\n9. Number of beds. \n    1. Most of the bookings which happen, comprise of at max 6 beds.\n    2. As expected, with the increasing number of beds, the price would increase.\n        More beds mean, more space needed. Hence, higher price charged.\n\n    3. Another observation, there are no aberrations for number of beds greater than 6. This can explained by the fact that the most common bookings which happen are the ones for number of beds lesser than 6. Those have additional features which increase their price.\n10. In the dataset, there is an equal distribution of host being a super host and host not being a super host.\n11. With a verified identity, higher listings count can be achieved.\n12. Higher the listings count, higher the price as expected.\n13. \n    1. Majority of the listings have response rate as 1.0. Hence, it doesn't affect the price directly.\n    2. Those with 0 response_rate have listings count as 1 (majorly). (Newly opened)\n    3. We can also say, those are intended for long term bookings.\n14. There is a obvious & direct relation between the accommodates & the price (few being outliers because of other factors or fascilities causing their price to increase).\n15. Queen Anne being affluent neighbourhood is the costliest.\n16. \n    1. Boutique Hotel & Villa have the highest mean price in the property type.\n    2. Apartment, House & Guest Suite are the most commonly booked property types.\n17. With increasing number of guests_included, the price increases proportionately. Number of guests_included has a direct impact on the price of the listing.\n18. With increasing number of bathrooms, the price increases.\n19. With increasing number of bedrooms, the price increases.\n20. Minimum and Maximum Nights don't seem to have a direct effect on the price of the listing.","00f70dee":"Conclusion: \n\nMajority of the listings are for Enitre home\/apt.\n\nAmong the listings, there is an equal distribution for host being superhost.\n\nNo Superhost for shared room which should be obvious.","6bbf8475":"Similar transformation for test dataset","3d7606f1":"Drop the amenities from X","9137b51b":"Remove \"Minimum Nights\" & \"Maximum Nights\" features. These features don't seem to have a direct influence on the price of the listing.","60eb8e1e":"No missing values for prices.","5025553d":"Conclusion : Queen Anne being affluent neighbourhood is the costliest.","f96d054c":"Conclusion : Higher the listings count, higher the price as expected. ","4777431e":"## Initial Training using CatBoost","48c3d7fb":"Observation: If the host is not a superhost, the response time is faster.","3ed6835a":"Preprocess \"host_identity_verified\" to generate numeric column type","ee89e61e":"## Models","6a13e430":"Conclusion : In the dataset, there is an equal distribution of host being a super host and host not being a super host. ","7b071095":"Conclusion : As expected, with the increasing number of beds, the price would increase.\nMore beds mean, more space needed. Hence, higher price charged.\n\nAnother observation, there are no aberrations for number of beds greater than 6. This can explained by the fact that the most common bookings which happen are the ones for number of beds lesser than 6. Those have additional features which increase their price."}}