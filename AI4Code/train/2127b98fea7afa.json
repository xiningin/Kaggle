{"cell_type":{"206bc8d1":"code","28596637":"code","c216ae83":"code","387ac946":"code","f3448d8c":"code","b1218bad":"code","04a72168":"code","e9e49dae":"code","76817a27":"code","21014bbe":"code","17c78558":"code","f9fc2d1a":"code","fa803ccc":"code","4541c622":"code","b80fa684":"code","a9c4cdfa":"code","3ad602a6":"code","8c1a210a":"code","23430999":"code","a72d0ff5":"code","7e05d605":"code","86aa1675":"code","fe0b07f4":"code","5ef8e950":"code","663fa0f6":"code","5a011bd3":"code","696c0dff":"code","410215d8":"code","953e3f23":"code","9da6bfb9":"code","fc2c6b8b":"markdown","e8cc3b04":"markdown","5801d23d":"markdown","262f3099":"markdown","cbe03539":"markdown","84efdda3":"markdown"},"source":{"206bc8d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","28596637":"train = pd.read_csv(\"..\/input\/av-janatahack-crosssell-prediction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/av-janatahack-crosssell-prediction\/test.csv\")","c216ae83":"train.shape","387ac946":"test.shape","f3448d8c":"sns.countplot(x='Previously_Insured',hue='Response',data=train)","b1218bad":"sns.countplot(x='Previously_Insured',hue='Response',data=train[train['Previously_Insured']==0])","04a72168":"train_without_insured = train[train['Previously_Insured']==0].reset_index(drop=True)","e9e49dae":"train_without_insured.head()","76817a27":"train_without_insured.Response.value_counts()","21014bbe":"sns.countplot(x='Gender',hue='Response',data=train_without_insured)","17c78558":"sns.countplot(x='Driving_License',hue='Response',data=train_without_insured)\nprint(train.Driving_License.value_counts())","f9fc2d1a":"sns.countplot(x='Vehicle_Damage',hue='Response',data=train_without_insured)","fa803ccc":"sns.countplot(x='Vehicle_Age',hue='Response',data=train_without_insured)","4541c622":"train_without_insured.describe()","b80fa684":"plt.hist(train_without_insured['Annual_Premium'])\nplt.show()","a9c4cdfa":"binary_cols = ['Gender','Vehicle_Damage']\ncat_cols=['Region_Code','Vehicle_Age','Policy_Sales_Channel']\ncont_cols = ['Annual_Premium','Age']\ndrop_cols = ['Driving_License','id','Vintage']","3ad602a6":"#Combine both train and test data for processing\ncombined_df = pd.concat([train,test], sort=False)","8c1a210a":"#Policy channel with less than 100 records are combined to form \"Others\"\nchannel_count = combined_df.Policy_Sales_Channel.value_counts()\ncombined_df.loc[combined_df.Policy_Sales_Channel.isin(channel_count[channel_count<100].index),'Policy_Sales_Channel'] = 0","23430999":"for each in drop_cols:\n    combined_df.drop([each], axis=1, inplace=True)","a72d0ff5":"# Convert Categorical columns to cat codes\nfor each in binary_cols:\n    combined_df[each] = combined_df[each].astype('category').cat.codes\n\nfor each in cat_cols:\n    combined_df[each] = combined_df[each].astype('category').cat.codes","7e05d605":"combined_df.head()","86aa1675":"train_df = combined_df[combined_df['Response'].notnull()]\ntest_df = combined_df[combined_df['Response'].isnull()]\ntrain_df['Response'] = train_df['Response'].astype('int')\ntest_df.drop('Response',axis=1,inplace=True)","fe0b07f4":"train_df = train_df[train_df['Previously_Insured']==0].reset_index(drop=True)\ntest_df_without_insured = test_df[test_df['Previously_Insured']==0].reset_index(drop=True)\ntrain_df.drop('Previously_Insured',axis=1,inplace=True)\ntest_df_without_insured.drop('Previously_Insured',axis=1,inplace=True)","5ef8e950":"#Normalizing continuous columns\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\nfor each_col in cont_cols:\n    train_df[each_col] = scaler.fit_transform(train_df[each_col].values.reshape(-1,1))\n    test_df_without_insured[each_col] = scaler.transform(test_df_without_insured[each_col].values.reshape(-1,1))","663fa0f6":"X = train_df.drop('Response',axis=1)\ny =  train_df['Response']","5a011bd3":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_auc_score\n\nfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=42)\noverall_preds = np.zeros((test_df_without_insured.shape[0]))\nfor train_index, test_index in fold.split(X, y):\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    catboost_model = CatBoostClassifier(iterations=1000,border_count=103, learning_rate=0.05, l2_leaf_reg=30, depth=6, loss_function= 'Logloss', eval_metric='AUC',use_best_model=True,random_seed=42)\n    catboost_model.fit(X_train,y_train,eval_set=(X_test, y_test), cat_features= binary_cols+cat_cols,early_stopping_rounds=200,verbose=200)\n    pred_prob = catboost_model.predict_proba(X_test)[:,1]\n    print(\"Validation ROC AUC:\"+str(roc_auc_score(y_test,pred_prob)))\n    ypreds = catboost_model.predict_proba(test_df_without_insured)[:,1]\n    overall_preds += ypreds\noverall_preds = overall_preds \/ 3","696c0dff":"test_df.loc[test_df['Previously_Insured']==0,'Response'] = overall_preds\ntest_df.loc[test_df['Previously_Insured']==1,'Response'] = 0","410215d8":"subs = pd.read_csv(\"..\/input\/av-janatahack-crosssell-prediction\/sample_submission_iA3afxn.csv\")","953e3f23":"subs['Response']=test_df.Response","9da6bfb9":"subs.to_csv(\"catboost_prediction.csv\", index=False)","fc2c6b8b":"### EDA","e8cc3b04":"### Pre-Processing","5801d23d":"### Using data with Previously_Insured = 0 only for training, as conversion rate for Previously_Insured=1 is very negligible ","262f3099":"#### Setting Predictions only for \"Previously_Insured\" = 0, else if \"Previously_Insured\"=1 setting predictions as \"0\"","cbe03539":"**Catboost Model for Janatahack: Cross-sell Prediction**\n\nPublic LB Score - 0.8578 (Rank - 157) \n\n\nPrivate LB Score - 0.8633 (Rank - 47)","84efdda3":"### Training CatBoost Model"}}