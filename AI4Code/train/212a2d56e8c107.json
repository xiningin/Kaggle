{"cell_type":{"6b386b6b":"code","c81529cd":"code","a1d302f4":"code","93c98668":"code","66cbbaff":"code","3aebd296":"code","de1dacbe":"code","fe313215":"code","cfc6f8c2":"code","d9afa7cf":"code","f5a76a93":"code","0ff508df":"code","31da206c":"code","84ec16f7":"code","812d57f3":"code","de55b903":"code","74c70988":"code","ccf56ffd":"code","68871c7c":"code","7825afe3":"code","6a0680ab":"code","12e04fff":"code","85d7a34f":"code","528eeef9":"code","6be0d077":"code","141553c1":"code","c33b576c":"code","467f6d85":"code","e1b1824f":"code","73dc1cef":"code","50e5380d":"code","7682bf5a":"code","472a210e":"code","b7ef9b67":"code","0fff30b4":"code","f7762c95":"code","738c92b8":"code","3d0f27b9":"code","7802ac57":"code","aff18bf4":"code","9bf746f7":"code","5c9b5207":"code","f094c79c":"code","361d69d0":"code","14de5b0d":"code","128a3a3b":"markdown","64f75526":"markdown","43673318":"markdown","3d3a830b":"markdown","aed7b017":"markdown","a22a9b74":"markdown","ffe59720":"markdown","264e6dd5":"markdown","110af48d":"markdown","6aeabeaf":"markdown","027ddd27":"markdown","a5f7393c":"markdown","e8435ad3":"markdown","522e02d2":"markdown","f075e247":"markdown","db4dea45":"markdown","a83b6304":"markdown","da5f0ee5":"markdown","590b8950":"markdown","3424caff":"markdown","9dc804a4":"markdown","d90b9987":"markdown","2f7bf220":"markdown","d14f7404":"markdown","f17cd7e5":"markdown","206218ff":"markdown","6e84fbf5":"markdown","6393d64d":"markdown","27e7b5fc":"markdown","14104fa0":"markdown","c7f16c29":"markdown","f09bab2d":"markdown","bfb75b4a":"markdown","f4ceb9d3":"markdown","2ef947cd":"markdown","6cfeff85":"markdown","f6e29566":"markdown","3cdf07cc":"markdown","3a80b839":"markdown","af4bcd57":"markdown","8dc2bb7a":"markdown","c126dca7":"markdown","221daaf8":"markdown","3bfd0c2a":"markdown","161a0f74":"markdown","f521becb":"markdown","541732a7":"markdown","15626357":"markdown","8d6fc9ef":"markdown","cf69ef30":"markdown","521d1189":"markdown","0a6ca49e":"markdown","24aebb57":"markdown","d68eadc1":"markdown","a399ba11":"markdown","d63b4ae9":"markdown","10784769":"markdown","ca73bbe3":"markdown","0307cb98":"markdown","a70d9eaa":"markdown","1a4c3370":"markdown","70274570":"markdown","98d21347":"markdown","4c877981":"markdown","021ed8e6":"markdown","94e0de0f":"markdown","3b8bbef5":"markdown","3fc57c3c":"markdown","1d3ec58f":"markdown","9d2fba2a":"markdown","5d9db38d":"markdown","631e8c20":"markdown","266902ee":"markdown","86e748ed":"markdown","d9d65015":"markdown","ef8100a0":"markdown","1eabdd2e":"markdown","a2436328":"markdown"},"source":{"6b386b6b":"project_name = 'movielens-eda'","c81529cd":"!pip install jovian --upgrade -q\n!pip install bar-chart-race -q","a1d302f4":"import jovian\nimport numpy as np; import pandas as pd; import matplotlib.pyplot as plt\nimport seaborn as sns\nimport bar_chart_race as bcr\nimport pycountry             \nimport operator\nfrom collections import Counter\nimport warnings     \n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","93c98668":"warnings.filterwarnings('ignore')\nmovies = pd.read_csv('..\/input\/the-movies-dataset\/movies_metadata.csv')\npd.options.display.max_columns = 30\npd.set_option('display.float_format', '{:,}'.format) #to display float with commas","66cbbaff":"movies.set_index('id', inplace=True)\nmovies.head(3)","3aebd296":"print(f'Number of rows: {movies.shape[0]}')\nprint(f'Number of columns: {movies.shape[1]}')","de1dacbe":"movies.drop(movies[movies['adult'] == 'True'].index, axis='rows', inplace=True)\nmovies.drop(labels = ['adult', 'belongs_to_collection', 'homepage', 'poster_path', 'video'], axis='columns', inplace=True)","fe313215":"movies.columns\nmovies = movies.reindex(columns = ['imdb_id','title','original_title','release_date','overview','tagline','genres', 'runtime',\n                                   'original_language','spoken_languages','production_companies','production_countries', \n                                   'budget', 'revenue','status',  'vote_average','vote_count','popularity',])\nmovies.head(3)","cfc6f8c2":"movies[['title', 'genres', 'production_companies', 'production_countries', 'spoken_languages']].head(3)","d9afa7cf":"import re\n\nregex = re.compile(r\": '(.*?)'\")\nmovies['genres'] = movies['genres'].apply(lambda x: ', '.join(regex.findall(x)))","f5a76a93":"print('Number of missing values in production_companies column: {}'.format(movies['production_companies'].isna().sum()))\nprint('Number of missing values in spoken_languages column: {}'.format(movies['spoken_languages'].isna().sum()))","0ff508df":"movies.dropna(subset=['production_companies'], axis='rows', inplace=True)\nmovies.dropna(subset=['spoken_languages'], axis='rows', inplace=True)\n\nprint('Number of missing values in production_companies column: {}'.format(movies['production_companies'].isna().sum()))\nprint('Number of missing values in spoken_languages column: {}'.format(movies['spoken_languages'].isna().sum()))","31da206c":"movies['production_companies'] = movies['production_companies'].apply(lambda x: ', '.join(regex.findall(x)))\nmovies['production_countries'] = movies['production_countries'].apply(lambda x: ', '.join(regex.findall(x)))\nmovies['spoken_languages'] = movies['spoken_languages'].apply(lambda x: ', '.join(regex.findall(x)))","84ec16f7":"movies[['title', 'genres', 'production_companies', 'production_countries', 'spoken_languages']].head(3)","812d57f3":"movies.info()","de55b903":"movies['budget'] = movies['budget'].astype(float)\nmovies['popularity'] = movies['popularity'].astype(float)\nmovies['release_date'] = pd.to_datetime(movies['release_date'], format='%Y\/%m\/%d', errors='coerce')\nmovies['runtime'] = pd.to_timedelta(movies['runtime'], unit='m')","74c70988":"movies.info()","ccf56ffd":"print('Number of missing values in imdb_id: {}'.format(movies['imdb_id'].isna().sum()))\nmovies.dropna(subset=['imdb_id'], inplace=True)\nprint('Number of missing values in imdb_id after drop: {}'.format(movies['imdb_id'].isna().sum()))","68871c7c":"cond = movies['imdb_id'].duplicated(keep=False)\nmovies.loc[cond, ['imdb_id','title','release_date', 'overview']].sort_values('imdb_id').head(10)","7825afe3":"print('Number of duplicate imdb_ids before drop: {}'.format(movies['imdb_id'].duplicated().sum()))\nmovies.drop_duplicates('imdb_id', inplace=True)\nprint('Number of duplicate imdb_ids remaining: {}'.format(movies['imdb_id'].duplicated().sum()))","6a0680ab":"cond = movies['title'].duplicated(keep=False)\nmovies.loc[cond, ['imdb_id','title','release_date', 'overview']].sort_values('title').head(10)","12e04fff":"movies.describe().T","85d7a34f":"runtime_int = movies['runtime']\/np.timedelta64(1, 'm')\n\nwith plt.style.context('seaborn'):\n    fig = plt.figure(figsize=(20,20));\n    grid = plt.GridSpec(3, 2, wspace=0.2, hspace=0.2);\n    plt.rc(('xtick', 'ytick'), labelsize=15); plt.rc('axes', labelsize=15); plt.rcParams[\"patch.force_edgecolor\"] = True;\n    _ = plt.subplot(grid[0, 0:]); _ = sns.distplot(runtime_int, kde=False, axlabel='Runtime in Minutes');\n    _ = plt.subplot(grid[1,0]); _ = sns.distplot(movies['budget'], kde=False, axlabel='Budget in USD Millions');\n    _ = plt.subplot(grid[1,1]); _ = sns.distplot(movies['revenue'], kde=False, axlabel='Revenue in USD Billions');\n    _ = plt.subplot(grid[2,0]); _ = sns.distplot(movies['vote_average'], kde=False, axlabel='Vote Average');\n    _ = plt.subplot(grid[2,1]); _ = sns.distplot(movies['vote_count'], kde=False, axlabel='Vote Count');\n","528eeef9":"cols = ['title', 'budget']\nbudget_df = movies.sort_values('budget', ascending=False)[cols].set_index('title')\ntop_10_budget = budget_df.head(10)\n\nfig, ax = plt.subplots(figsize=(15,5))\nsns.set_style('dark')\nsns.barplot(data=top_10_budget, x=top_10_budget.index, y='budget');\nplt.xticks(ha='left', rotation=-20, fontsize=15); plt.yticks(fontsize=15)\nplt.xlabel(''); plt.ylabel('USD 100 Million', fontsize=15);\nplt.title('Top 10 Highest Budget Movies', fontsize=15);","6be0d077":"cols = ['title', 'revenue']\nrevenue_df = movies.sort_values('revenue', ascending=False)[cols].set_index('title')\ntop_10_revenue = revenue_df.head(10)\n\nfig, ax = plt.subplots(figsize=(15,5))\nsns.set_style('dark')\nsns.barplot(data=top_10_revenue, x=top_10_revenue.index, y='revenue');\nplt.xticks(ha='left', rotation=-20, fontsize=15); plt.yticks(fontsize=15)\nplt.xlabel(''); plt.ylabel('USD Billion', fontsize=15);\nplt.title('Top 10 Highest Revenue Movies', fontsize=15);","141553c1":"profits_ser = movies['revenue'] - movies['budget']\nprofits_ser.name = 'profit'\nprofits_df = movies.join(profits_ser)[['title', 'budget', 'revenue', 'profit']].sort_values('profit', ascending=False)\ntop_10_profits = profits_df.head(10).set_index('title')\n\nplt.style.use('ggplot')\ntop_10_profits.plot(kind='bar', figsize=(20,4), fontsize=20)\nplt.ylabel('USD Billion', fontsize=20); plt.xlabel('')\nplt.xticks(rotation=-20, ha='left')\nplt.suptitle('Budget, Revenue and Profit for the Top 10 Profitable Movies', fontsize=20)\nplt.axes().legend(fontsize=16);","c33b576c":"profits_ser_perc = (top_10_profits['profit'] \/ top_10_profits['budget'] * 100)\nprofits_ser_perc = profits_ser_perc.sort_values(ascending=False).to_frame().rename(columns={0:'Profit Percentage'})\n\nfig, ax = plt.subplots(figsize=(15,5))\nsns.set_style('dark')\nsns.barplot(data=profits_ser_perc, x=profits_ser_perc.index, y='Profit Percentage')\nplt.xticks(ha='left', rotation=-20, fontsize=15); plt.yticks(fontsize=15)\nplt.xlabel(''); plt.ylabel('Profit Percentage', fontsize=15);\nplt.title('Profit in Percentage for the Top 10 Profitable Movies', fontsize=15);","467f6d85":"top_10_loss = profits_df[profits_df['revenue'] > 0].tail(10).sort_values(['profit', 'revenue']).set_index('title')\n\nplt.style.use('seaborn')\ntop_10_loss.plot(kind='bar', figsize=(20,6), fontsize=20)\nplt.ylabel('USD Billion', fontsize=20); plt.xlabel('')\nplt.xticks(rotation=-20, ha='left')\nplt.suptitle('Top 10 Losing Movies', fontsize=20)\nplt.axes().legend(fontsize=15);","e1b1824f":"cond = (movies.vote_count)>5000\nratings = movies.loc[cond, ['title', 'vote_average']].sort_values('vote_average', ascending=False)\ntop_10_ratings = ratings.head(10)\n\nplt.style.use('seaborn')\n_ = top_10_ratings.plot(kind='scatter', x='title', y='vote_average', grid=True,\n                        figsize=(20,5), fontsize=15, xticks='', ylim=(8,8.6), s=100, \n                        c=['r', 'g', 'y', 'b', 'r', 'b', 'g', 'y', 'r', 'y',]);\nfor i, (title, vote) in enumerate(zip(top_10_ratings.title, top_10_ratings.vote_average)):\n    _ = plt.text(i, vote, title, rotation=-10, va='top', ha='left', \n                 fontsize=15, fontfamily='fantasy');\nplt.ylabel('Vote Average', fontsize=20, fontfamily='fantasy');\nplt.title('Top 10 Ratings', fontsize=20, fontfamily='fantasy')\nplt.xlabel('');","73dc1cef":"credits = pd.read_csv('..\/input\/the-movies-dataset\/credits.csv')\ncredits.head()","50e5380d":"import re\n\ncast_regex = re.compile(r\"'name': '(.*?)'\")\ndirector_regex = re.compile(r\"'Director', 'name': '(.*?)'\")\ncredits['cast'] = credits['cast'].apply(lambda x: ', '.join(cast_regex.findall(x)))\ncredits['director'] = credits['crew'].apply(lambda x: ', '.join(director_regex.findall(x)))","7682bf5a":"credits.head()","472a210e":"cond = credits.director == ''\ndirectors = credits.loc[~cond, ['id', 'director']] #List of directors without ''\n\ncond2 = movies.genres == ''\ngenres = movies.loc[~cond2, 'genres'].reset_index() #Movie genres without ''\ngenres['id'] = genres['id'].astype(int) #Changing id to from obj to int for merging\n\ndirector_genre = pd.merge(genres, directors, on='id') #Merging\ndirector_genre.head(5)","b7ef9b67":"genre_dummies = director_genre.genres.str.get_dummies(sep=', ') #Creating dummy variables for genres from director_genre\ndirector_genre_dummies = director_genre.join(genre_dummies) #Joining director_genre with genre_dummies\ndirector_genre_dummies.head(3)","0fff30b4":"famous_directors = ['Martin Scorsese', 'Quentin Tarantino', 'Steven Spielberg', 'Alfred Hitchcock', 'Christopher Nolan',\n                   'Tim Burton', 'James Cameron', 'Ridley Scott', 'George Lucas', 'Woody Allen', 'Clint Eastwood',\n                   'Michael Bay', 'Guillermo del Toro', 'John Carpenter', 'Oliver Stone', 'Anurag Kashyap',\n                   'Satyajit Ray', 'Mani Ratnam', 'Yash Chopra', 'Rajkumar Hirani', 'Prakash Jha', 'Karan Johar',\n                   'S. Shankar', 'Mahesh Bhatt', 'Imtiaz Ali', 'A.R. Murugadoss'] # a small list of famous directors(google)\n\ndirector_genre_totals = director_genre_dummies.groupby('director').sum() #summing the genres for each director with groupby\ncond = director_genre_totals.index.isin(famous_directors) #checking if famous director are in director_genre_totals\nfamous_director_genres = director_genre_totals[cond] #filter for famous directors\nfamous_director_genres.drop('id', axis='columns', inplace=True) #dropping id as it is not required\nfamous_director_genres.head(3)","f7762c95":"plt.figure(figsize=(30,10))\nsns.set(font_scale=1.7)\nsns.heatmap(famous_director_genres.T, cmap='gist_gray', annot=True)\n\nplt.title('Directors and their Genre Counts')\nplt.xlabel('Directors')\nplt.xticks(rotation=-40, ha='left');","738c92b8":"df = credits[['director', 'cast']] #create a dataframe of directors and actors from credits dataframe\ndf['cast'] = df.groupby('director')['cast'].transform(lambda cast: ' '.join(cast)) #groubpy director and transform cast into one giant string of all cast\ndf = df.drop_duplicates() #to drop duplicates created by the previous line\ndf.head()","3d0f27b9":"def cast_count_sort(cast_names):\n    d = dict(Counter(cast_names)) #creates a dict with counts of cast names as key, value pairs\n    sorted_d = dict(sorted(d.items(), key=operator.itemgetter(1),reverse=True)) #sort the dict in descending\n    top_2 = list(sorted_d.items())[:5] #create a list of the sorted dict and slice the first 5\n    return top_2\n\ndf['cast'] = df['cast'].str.split(', ').apply(cast_count_sort) #aplly cast_count_sort function to cast\ndf.head()","7802ac57":"cond = df.director.isin(famous_directors)\ndirector_actor = df[cond] #filter for famous directors\ndirector_actor = director_actor.set_index(np.arange(len(director_actor))) #set index to len of dataframe, used for merge\nactor = pd.DataFrame(director_actor.cast.tolist(), \n                     columns=['actor_1', 'actor_2', 'actor_3', \n                              'actor_4', 'actor_5']) #create a dataframe of actors with individual columns\npd.merge(director_actor, actor, left_index=True, right_index=True).set_index('director').drop('cast', axis='columns')","aff18bf4":"def get_language(short_code):                                   #a function to extract language from language short-code.\n    language = pycountry.languages.get(alpha_2=str(short_code))\n    if language:\n        return language.name\n    else:\n        return np.nan\ntop10_lang_rev = movies.groupby('original_language').sum()['revenue'].sort_values(ascending=False)[:10].to_frame()\ntop10_lang_rev['language'] = top10_lang_rev.index.map(get_language).fillna('Chinese') \ntop10_lang_rev","9bf746f7":"cond = (movies.original_language.isin(top10_lang_rev.index)) & (movies.vote_count>100)\ntitle_vote_avg = movies.loc[cond,['title', 'vote_average', 'original_language']]\n\ngrouped = title_vote_avg.groupby('original_language')\ntitle_vote_avg['vote_rank'] = grouped['vote_average'].rank(method='first').astype(int)\ntitle_vote_avg['language'] = title_vote_avg['original_language'].apply(get_language).fillna('Chinese')\n\nlang_top10 = title_vote_avg[title_vote_avg['vote_rank']<11]\nlang_top10.pivot(['language', 'original_language'], 'vote_rank', 'title')","5c9b5207":"cond = (movies.status == 'Released') & (movies.genres != '') & (movies.release_date.notna()) #filter for releaesed, non-empty genres missing release dates\nreleased_movies = movies[cond] \nrelease_year = pd.to_datetime(released_movies.release_date) #retrieving year from released_movies","f094c79c":"genre_dummies = released_movies.genres.str.get_dummies(sep=', ').set_index(release_year).sort_index() #creating genre dummy variables\ngenre_yearly = genre_dummies.resample('Y').sum() #create yearly totals\ngenre_yearly = genre_yearly.loc[(genre_yearly != 0).any(axis=1)] #remove rows which are all zeros, cause by yearly resampling.","361d69d0":"bcr.bar_chart_race(genre_yearly, period_fmt='%Y', fixed_order=False, n_bars=5,\n                   interpolate_period=False, period_length=2000,\n                  steps_per_period=20) ","14de5b0d":"jovian.commit(project=project_name, environment=None)","128a3a3b":"<br><\/br>\nChecking the number of rows and columns in the dataset.","64f75526":"### Loading csv file into a pandas DataFrame <a id='C11'><\/a>","43673318":"The dataframe answers our question but we can see that it is not accurate. For e.g. [Shahrukh Khan](https:\/\/www.google.com\/search?rlz=1C1CHBF_enIN815IN815&sxsrf=ALeKk00U4MmUOGJuvzooJNuXoWOThEIYYQ%3A1601024282712&ei=GrFtX7eJK5nl9QO4pLf4Dw&q=Yash+Chopra+Shahrukh+Khan+movies&oq=Yash+Chopra+Sharukh+Khan+movies&gs_lcp=CgZwc3ktYWIQAzIECCMQJzIGCAAQFhAeMgYIABAWEB5QAFgAYO0saABwAHgAgAFYiAFYkgEBMZgBAKoBB2d3cy13aXrAAQE&sclient=psy-ab&ved=0ahUKEwi3_pad-IPsAhWZcn0KHTjSDf8Q4dUDCA0&uact=5) appearing in only 1 movies that Yash Chopra has directed in is not correct. You may also notice that some of the director names appear in the cast list as well. Google search shows that these directors have infact acted in many of their own movies. [Quentin Tarantino](https:\/\/www.quora.com\/Does-Quentin-Tarantino-appear-in-all-of-his-movies) for example has made a cameo appearances in five of his movies - *Reservoir Dogs, Pulp Fiction, Death Proof, Django Unchained, and Inglourious Basterds.* A google search on [Woody Allen](https:\/\/www.quora.com\/Why-does-Woody-Allen-star-in-so-many-of-his-own-films) as well confirms the same.","3d3a830b":"Listed below are ten movies among all the duplicate *imdb_id* that needs to be removed.","aed7b017":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","a22a9b74":"##### Cleaning Credits Dataframe\n\nLet's extract only the cast and the director from the credits DataFrame for now.","ffe59720":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","264e6dd5":"### Asking and Answering Questions <a id='C80'><\/a>","110af48d":"#### What are the top 10 rated movies in the top 10 languages with the highest revenue? <a id='C110'><\/a>\n\nWe can answer this question by first filtering for languages we got from answering the previous question and also for movies with vote count greater than 100 and saving it to a dataframe. The last filter solves the problem of retrieving movies with a unreleastic rating of 10 and also account for foreign languages with considerably less number of vote count.\n\nWe can then groupby original language and rank the vote averages with *method='first'* to break ties. Finally create a column. Finally create column with language names as we did before and pivot the dataframe to retrieve the titles.","6aeabeaf":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","027ddd27":"<br><\/br>\nIn terms of profit percentage the story is a little different. Avatar remains on top, however the ranking changes for other movies. It is also mind-boggling how successfull movies make profits exceeding their budget. Avatar has made more than 10 times it's budget. Avengers: Age of Ultron, bottom of this list has made nearly 4 times its budget.","a5f7393c":"<br><\/br>\nDtypes changed.","e8435ad3":"## Data Cleaning and Preparation <a id='C5'><\/a>","522e02d2":"##### Answer: Famous Directors - Genre Visualization <a id='C93'><\/a>","f075e247":"<br><\/br>\nExtracting relevant substring from *production_companies*, *production_countries* and *spoken_languages* as done with *genres* above.","db4dea45":"#### Ratings <a id='C77'><\/a>","a83b6304":"![](https:\/\/lambdan.se\/blog\/2019\/12\/31\/movies-i-watched-in-2019\/03fb507e0ce5590520c511b35374785e.png)","da5f0ee5":"#### Box Office Revenue <a id='C64'><\/a>","590b8950":"<br><\/br>\nA quick look at the data.","3424caff":"Some of the directors and the genres that they have worked in is quite evident from the plot.\n\n- Alfred Hitchcock: Thriller, Drama, Mystery and Crime\n- Clint Eastwood: Drama and Thriller\n- John Carpenter: Horror\n- Martin Scorsese, Mani Ratnam and Olive Stone: Drama\n- Ridley Scott: Drama, Action, Thriller and Adventure\n- Satyajit Ray: Drama\n- Steven Spielberg: Drama, Adventure and Action\n- Tim Burton: Fantasy and Comedy\n- Woody Allen: Comedy, Drama and Romance","9dc804a4":"Visually we can see the huge gap between budget and profit in the ten most profitable movies.","d90b9987":"<br><\/br>\nThe histograms are the visualization of the data above. As you can see all except one are highly skewed to the right due to a large number of zero or small values. The strong assumption for zero values can be attributed to the non availability of data since you cannot make a movie for free and not see a little bit of revenue.\n\nVote_average is the only column that closely resembles a normal distribution with a median of 6.","2f7bf220":"##### Credits Head\nA quick look at the DataFrame","d14f7404":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","f17cd7e5":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","206218ff":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","6e84fbf5":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","6393d64d":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","27e7b5fc":"<hr style=\"height:10px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","14104fa0":"<br><\/br>\nRows with duplicate titles will not be removed as they are either remakes of old movies or different movies with the same title.","c7f16c29":"### Summary Statistics <a id='C55'><\/a>","f09bab2d":"## Sections\n- [Data Cleaning and Preparation](#C5)\n    - [Imports](#C8)\n    - [Loading csv file into a pandas DataFrame](#C11)\n    - [Dropping irrelevant columns](#C18)\n    - [Data Cleaning](#C23)\n    - [Changing Columns to Correct Dtypes](#C36)\n    - [Dropping Missing Values](#C43)\n    - [Removing Duplicates](#C47)\n\n- [Data Exploration and Visualization](#C54)\n    - [Summary Statistics](#C55)\n    - [Top 10](#C60)\n        - [Budget](#C61)\n        - [Box Office Revenue](#C64)\n        - [Box Office Hits](#C67)\n        - [Box Office Flops](#C73)\n        - [Ratings](#C77)\n    - [Asking and Answering Questions](#C80)\n        - [What are the movie genres that famous directors (Hollywood and Bollywood) have mostly worked in?](#C81)\n        - [Who are the most number of actors that famous directors have worked with?](#C97)\n        - [What are the top 10 languages in terms of revenue?](#C106)\n        - [What are the top 10 rated movies in the top 10 languages with the highest revenue?](#C110)\n        - [What are the top 5 Genres each year?](#C114)\n\n- [Summary and Conclusion](#C121)","bfb75b4a":"##### Answer: Top 10 Rated Movies in Top 10 Languages with the Highest Revenue","f4ceb9d3":"## Summary and Conclusion <a id='C121'><\/a>\n\nWe just scratched the surface with our analysis in this notebook. More insights can be gained by exploring the remaing columns and other files from the dataset. \n\nShortcomings: The dataset was highly skewed towards large values due to large number of small or zero values. The lack of information for other language movies was evident when we we tried to answer the second question. There were many missing values in the object data type columns - genre, title, etc. These were filtered on the go during the analysis. Assuming these shortcomings were not present we can be confident with our results above and gain more insights by comparing other categorical features that were not explored.\n\nThe sections covered in the notebook should serve as a rough guide on the steps for performing data analysis and visualization. I hope the reader discovers something new as i did. Some of the useful links and references are listed below.\n\n- [Bar Chart Race Tutorial](https:\/\/www.dexplo.org\/bar_chart_race\/tutorial\/)\n- [Bar Chart Race - Medium Post](https:\/\/medium.com\/dunder-data\/create-a-bar-chart-race-animation-in-python-with-matplotlib-477ed1590096)\n- [Jupyter Notebook - Tips, Tricks and Shortcuts](https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tips-tricks-shortcuts\/)\n- [Python - Collections](https:\/\/www.youtube.com\/watch?v=cgDRugJzBfM)\n- [Creating a table of contents in a IPython Notebook](https:\/\/sebastianraschka.com\/Articles\/2014_ipython_internal_links.html#bottom)","2ef947cd":"### Dropping Missing Values<a id='C43'><\/a>","6cfeff85":"<hr style=\"height:10px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","f6e29566":"## Data Exploration and Visualization <a id='C54'><\/a>","3cdf07cc":"<br><\/br>\nAs you can see from the columns above, the substring we need follows a pattern - a colon, followed by whitespace, a single quote, a words or words and finally a single quote.\n\nWe can define this pattern with a regex, compile it and use it to find all words with that pattern in each column by applying a lambda function. If this was confusing, you can jump to the [final result](#C33) to see the cleaned data and compare it to the output above to see what we are trying to accomplish.","3a80b839":"##### Creating Dummy Varaibles for Genres\nThis process will help with retrieving the totals of each genre that a director has worked in.","af4bcd57":"#### What are the top 5 Genres each year ? <a id='C114'><\/a>\n\nTo answer this question we will create dummy variables for genres as we did earlier, resample the data on a yearly frequency and create a DataFrame of totals to visualize the data with a [bar chart race](https:\/\/www.dexplo.org\/bar_chart_race\/).","8dc2bb7a":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","c126dca7":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","221daaf8":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","3bfd0c2a":"##### Answer: Top 5 Genres by year\n*The code below will take some time to run.*","161a0f74":"##### Create a DataFrame of Casts from All Movies Under Each Director","f521becb":"*budget*, *popularity*, *release_date* and *runtime* needs to be changed from object dtype to float, float, datetime and timedelta respectively. This will help with data analysis and visualization later on.","541732a7":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","15626357":"# Exploratory Data Analysis - Movie Lens Dataset","8d6fc9ef":"### Top 10 <a id='C60'><\/a>\n\nListed below are the top 10 movies based on budget, revenue, hits, flops and ratings.","cf69ef30":"##### Answer: Famous Directors - Most Number of Actors Worked With. <a id='C102'><\/a>","521d1189":"I am a little surprised to see The Lone Ranger on top of this list. Although I haven't watched this movie I knew Johnny Depp was in it and thought that it was a success. The 13th Warrior is another surprise. In my exprience movies with good plots always have a imdb rating greater than 6. Both these movies have imdb rating greater than 6 but have been unsuccessfull in the box office. I really have no idea about other movies on this list.","0a6ca49e":"Below is the summary of the trend in genres over the years:\n- 1874-1900: Not many movies in our data. Documentary taking the first place for sometime followed by Fantasy, Comedy and Horror.\n- 1900-1920: We can mostly observe Drama, Comedy and Romance but Fantasy and Animation appear as well.\n- 1920-1930: We see Music making a brief apperance along with Drama, Comedy, Romance and Crime.\n- 1930-1970: Many Genres swap places during this period, however Drama remains on top.\n- 1970-2000: Horror finally shows itself during the 70's and late 80's. Action briefly takes 3rd place during late 90's.\n- 2000-2017: We again see Documentary coming in to the top 5 here. ","24aebb57":"#### Box Office Flops <a id='C73'><\/a>","d68eadc1":"##### Merging Directors and Movie Genres\nListed below are directors and the movies genres for each movie id.","a399ba11":"##### Answer: Top 10 Languages in Terms of Revenue","d63b4ae9":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","10784769":"<hr style=\"height:10px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","ca73bbe3":"<br><\/br>\nWe will be working with the remaning columns shown below. As the columns were all over the place, rearranging them with the reindex method makes it look more organized. You can compare the DataFrame outputs from above and below to see if this made any difference.","0307cb98":"Dropping missing values from the *imdb_id* column.","a70d9eaa":"####  What are the movie genres that famous directors (Hollywood and Bollywood) have mostly worked in? <a id='C81'><\/a>\nWe will be merging the credits csv file with movies DataFrame to answer this question. The credits csv comes separately with this dataset. The following code cells prepares the data for visualization. You can jump to [Answer: Famous Directors - Genre Visualization](#C93) section to see the heatmap that answers this question.","1a4c3370":"<hr style=\"height:5px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","70274570":"#### What are the top 10 languages in terms of revenue ? <a id='C106'><\/a>\nWe can answer this question by grouping the movies dataframe by *original_language*, aggregating and sorting the *revenue* column in descending order. The get_language function uses the external pycountry module and returns the full name of the language from the language shortcode. This step is not necessary and I have used it only for data representation below. The cn language shortcode returns np.nan so we can manually fill this with the correct language name - 'Chinese'.","98d21347":"#### Box Office Hits <a id='C67'><\/a>","4c877981":"#### Budget <a id='C61'><\/a>","021ed8e6":"The columns - *genres*, *production_companies*, *production_countries* and *spoken_languages* looks like json objects converted to string. The following code cells extracts relevant substring with regular expression.","94e0de0f":"### Changing Columns to Correct Dtypes <a id='C36'><\/a>","3b8bbef5":"##### Get Counts of Each Cast and Sort From Highest to Lowest","3fc57c3c":"<br><\/br><a id='C33'><\/a>\nFinal result:","1d3ec58f":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","9d2fba2a":"### Imports <a id='C8'><\/a>","5d9db38d":"### Removing Duplicates <a id='C47'><\/a>","631e8c20":"##### Famous Directors Genre Totals\nLet us now create genre totals for all directors from the above DataFrame and filter only famous directors.","266902ee":"<br><\/br>\nThe above code can be apllied to the remaining columns - *production_companies*, *production_countries* and *spoken_languages*, but we need to remove missing values to avoid additional logic in the lambda function. The missing values are miniscule compared to the entire dataset so dropping these would not affect further analysis.","86e748ed":"### Dropping irrelevant columns <a id='C18'><\/a>","d9d65015":"The exploratory data analysis presented in this notebook is part of the final project for the begginer data analysis course provided by [Jovian](https:\/\/www.jovian.ml\/) that started on 08\/15\/2020 and spanned for 6 weeks.\nCourse participants were required to explore a dataset of their choice and perform exploratory data analysis by asking and answering five interesting questions.\n\nI chose the [MovieLens](https:\/\/grouplens.org\/datasets\/movielens\/) dataset from Kaggle and will be using only with the movies_metadata.csv and the credit.csv files. Below is a brief overview of the data. More information about the dataset can be found [here](https:\/\/www.kaggle.com\/rounakbanik\/the-movies-dataset).\n\nThese files contain metadata for all 45,000 movies listed in the Full MovieLens Dataset. The dataset consists of movies released on or before July 2017. Data points include cast, crew, plot keywords, budget, revenue, posters, release dates, languages, production companies, countries, TMDB vote counts and vote averages.\nmovies_metadata.csv: The main Movies Metadata file. Contains information on 45,000 movies featured in the Full MovieLens dataset. Features include posters, backdrops, budget, revenue, release dates, languages, production countries and companies.\ncredits.csv: Consists of Cast and Crew Information for all our movies. Available in the form of a stringified JSON Object.\n\nThe notebook is divided into three main sections - Data Cleaning and Preparation, Data Exploration and Visualization and ending with Summary and Conclusion.","ef8100a0":"#### Who are the most number of actors that famous directors have worked with? <a id='C97'><\/a>\n\nTo answer this question we will use the Counter submodule from collections and the operator module both of which are python's inbuilt modules. The dummy variables approach from earlier cannot be used as the cast list too large to create a dataframe resulting in a memory allocation error. The following code cells performs data wrangling on the credits dataframe to [answer](#C102) the question. ","1eabdd2e":"<hr style=\"height:2px; border-radius:10px; background: linear-gradient(to right, #0F2027, #203A43, #2C5364);\"> <\/hr>","a2436328":"### Data Cleaning <a id='C23'><\/a>"}}