{"cell_type":{"31d2c14a":"code","0797c8ae":"code","677aec44":"code","530ba6bf":"code","4e2391d8":"code","48606bf0":"code","ffc3877b":"code","b7e6d36d":"code","54397e88":"code","4b0df251":"code","3ed732e7":"code","50b96272":"code","17dd4197":"code","08c35d6e":"code","5e76e393":"code","1cbb8c66":"code","5e873618":"code","07f13a8a":"code","f9d6609f":"code","77fcdd73":"code","b273ac57":"code","6317bb03":"code","04a7ae6d":"code","54c59000":"code","2c6dfdd3":"code","23d9de75":"code","028b9287":"code","11d18b21":"code","8e4fe534":"code","2ee58bfc":"code","7271e3c9":"code","8f9e833f":"code","dc635195":"code","b87495c7":"code","aa774a21":"code","eca33a2c":"code","2d7e2172":"code","ba6cc077":"code","8767dec9":"code","7e9e952d":"code","53819fc2":"markdown"},"source":{"31d2c14a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0797c8ae":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\ntitanic_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntitanic_data.isnull().sum()","677aec44":"\ncorr_matrix = titanic_data.corr().round(2)\nplt.figure(figsize = (14,6))\nsns.heatmap(corr_matrix,annot = True)","530ba6bf":"titanic_data.dtypes\ntitanic_data['Cabin'] = titanic_data['Cabin'].astype('str')","4e2391d8":"#So here we can see that that 77% data is missing in this column so my first approch is to drop this column as this column type\n# is also object type\n#titanic_data = titanic_data.drop('Cabin',axis = 1)\ndef deck(cols):\n    Cabin = cols[0]\n    for i in Cabin:\n        if pd.isnull(i):\n            return 0\n        else:\n            ls1 = []\n            ls1 = list(i)\n            return ls1[0]","48606bf0":"titanic_data['Cabin'] = titanic_data[['Cabin']].apply(deck,axis = 1)","ffc3877b":"def alone(cols):\n   \n    Sibsp = cols[0]\n    Parch = cols[1]\n    if Sibsp == 0 and Parch == 0:\n        return 0\n    else:\n        return 1\n    ","b7e6d36d":"titanic_data['Alone'] = titanic_data[['SibSp','Parch']].apply(alone,axis = 1)","54397e88":"print(titanic_data['Cabin'].unique())\nconverting = {'Cabin' : {'n':0,'C':1,'E':2,'G':3,'D':4,'A':5,'B':6,'F':7,'T':8}}\ntitanic_data = titanic_data.replace(converting)","4b0df251":"common_value = 'S'\ntitanic_data['Embarked'] = titanic_data['Embarked'].fillna(common_value)","3ed732e7":"# Now to fill age's column null values we should see the relation between age and other features.\n#for viweing relation first we convert pclass column into numeric data\ngroup1 = titanic_data.groupby(['Pclass','Sex'])\nprint(group1['Age'].describe())\nplt.figure(figsize = (14,6))\nsns.barplot( x =titanic_data['Survived'],y = titanic_data['Pclass'],hue = titanic_data['Sex'])","50b96272":"#As we can see we have to consider sex and pclass while imputing the nan values of age.\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    Sex = cols[2]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1 and Sex == 'female':\n            return 35\n        \n        elif Pclass == 1 and Sex == 'male':\n              return 41\n        \n        elif Pclass == 2 and Sex == 'female':\n              return 29\n        \n        elif Pclass == 2 and Sex == 'male':\n              return 31\n        \n        elif Pclass == 3 and Sex == 'female':\n              return 22\n        \n        elif Pclass == 3 and Sex == 'male':\n              return 26\n    else:\n        return Age\n        ","17dd4197":"#now filling null values of age\ntitanic_data['Age'] = titanic_data[['Age','Pclass','Sex']].apply(impute_age,axis =1)","08c35d6e":"titanic_data.isnull().sum()","5e76e393":"#now checking outliers in the fare\nplt.figure(figsize = (14,6))\nsns.lineplot(x = titanic_data['Fare'], y =titanic_data['Survived'])\n","1cbb8c66":"sns.boxplot(titanic_data['Age'])","5e873618":"sns.scatterplot(x = titanic_data['Fare'],y = titanic_data['Survived'])","07f13a8a":"#so there are ouliers in the fare.so first approch will be remove those outliers.\nQ1 = titanic_data['Fare'].quantile(0.25)\nQ3 = titanic_data['Fare'].quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","f9d6609f":"titanic_data['Fare'] = titanic_data['Fare'][~((titanic_data['Fare'] < (Q1 - 1.5 * IQR)) |(titanic_data['Fare'] > (Q3 + 1.5 * IQR)))]","77fcdd73":"#so there are ouliers in the fare.so first approch will be remove those outliers.\nQ1 = titanic_data['Age'].quantile(0.25)\nQ3 = titanic_data['Age'].quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","b273ac57":"titanic_data['Age'] = titanic_data['Age'][~((titanic_data['Age'] < (Q1 - 1.5 * IQR)) |(titanic_data['Age'] > (Q3 + 1.5 * IQR)))]","6317bb03":"titanic_data.isnull().sum()","04a7ae6d":"titanic_data = titanic_data.dropna(axis = 0)","54c59000":"from sklearn.preprocessing import LabelEncoder\n\nnumber = LabelEncoder()\ntitanic_data['Sex'] = number.fit_transform(titanic_data['Sex'].astype('str'))\ntitanic_data['Embarked'] = number.fit_transform(titanic_data['Embarked'].astype('str'))\n\n#test_data['Sex'] = number.fit_transform(test_data['Sex'].astype('str'))\n#test_data['Embarked'] = number.fit_transform(test_data['Embarked'].astype('str'))","2c6dfdd3":"corr_matrix1 = titanic_data.corr().round(2)\nplt.figure(figsize = (14,6))\nsns.heatmap(corr_matrix1,annot = True)","23d9de75":"titanic_data= titanic_data.drop(columns = ['PassengerId','Name','Ticket','Alone','Parch'])","028b9287":"X = titanic_data.drop(columns = ['Survived'])\ny = titanic_data['Survived']","11d18b21":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.2, random_state=5)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","8e4fe534":"from sklearn.ensemble import RandomForestClassifier\nforest_model = RandomForestClassifier(n_estimators = 100,max_depth = 10)\nforest_model.fit(X_train,Y_train)","2ee58bfc":"accuracy_forest = forest_model.score(X_test,Y_test)\naccuracy_forest","7271e3c9":"from sklearn.model_selection import cross_val_score\nrf = RandomForestClassifier(n_estimators = 100)\nscores = cross_val_score(rf, X_train, Y_train, cv=10, scoring = \"accuracy\")\nprint(\"Scores:\", scores)\nprint(\"Mean:\", scores.mean())\nprint(\"Standard Deviation:\", scores.std())","8f9e833f":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\nmodel = SVC()\nmodel.fit(X_train,Y_train)\npredictions101 = model.predict(X_test)\nprint(classification_report(Y_test,predictions101))","dc635195":"from sklearn.model_selection import GridSearchCV","b87495c7":"param_grid = {'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.001,0.0001]}","aa774a21":"grid = GridSearchCV(SVC(0),param_grid,verbose = 3)","eca33a2c":"grid.fit(X_train,Y_train)","2d7e2172":"grid.best_params_","ba6cc077":"grid.best_estimator_","8767dec9":"grid_predictions = grid.predict(X_test)","7e9e952d":"print(classification_report(Y_test,grid_predictions))","53819fc2":"Finding best parameteres for SVC modle using grid serach\n"}}