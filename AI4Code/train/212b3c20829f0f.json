{"cell_type":{"284821a6":"code","a0c6a20d":"code","84aedd62":"code","6c32f215":"code","8c4c60cf":"code","f998b032":"code","7c736c3c":"code","a52b3bd9":"code","dafac8ae":"code","afad548b":"code","4ddd0b3e":"code","2ff20ee4":"code","c2c11b7a":"code","e6ce7ae8":"code","b8cda55f":"code","82e46c34":"code","9681d68c":"code","4378af9b":"code","7b1d8f5f":"code","a81e2d06":"code","247acead":"code","747feb70":"code","669131fe":"code","b737c8f5":"code","c93781fd":"code","55578973":"code","b70c897f":"code","1978c9e2":"code","ea580e5f":"code","5ce74fdf":"code","164f1f6a":"code","d18e661e":"code","16c84289":"code","893d2b06":"code","841fdfaa":"markdown","082527a2":"markdown","b37e6ecc":"markdown","67e94e88":"markdown","80f1c454":"markdown","631c5ad5":"markdown","b6c950ca":"markdown","2d18d5d4":"markdown","1fffdad9":"markdown","ddec6541":"markdown","e0288754":"markdown","530eeb79":"markdown","a0a71958":"markdown","98c23032":"markdown","6860f286":"markdown","d7147f4c":"markdown","6948d321":"markdown","45ded484":"markdown","50791cf6":"markdown","bd6d2d34":"markdown","7c05cdf8":"markdown","e83483eb":"markdown","a39ff3e8":"markdown","cb13df1a":"markdown","f6c10d24":"markdown","3047d522":"markdown","8bbfd1ec":"markdown","6b478602":"markdown","0fec3113":"markdown","d57daa7b":"markdown","abac4caf":"markdown","668b65e9":"markdown","60cfc996":"markdown","a01d3c73":"markdown","888e3033":"markdown","2d4fbdbf":"markdown","15ba5ad5":"markdown","b66852e3":"markdown","140f56c8":"markdown","4abe1d70":"markdown","6e680d4d":"markdown","1e03c0f8":"markdown","a14ec380":"markdown","3435eb92":"markdown","ec1fb34a":"markdown","59792263":"markdown","eea801a6":"markdown","017aee3e":"markdown","623ce960":"markdown"},"source":{"284821a6":"%%html\n<style> \n@import url('https:\/\/fonts.googleapis.com\/css?family=Orbitron|Roboto');\nbody {background-color: gainsboro;} \na {color: #37c9e1; font-family: 'Roboto';} \nh1 {color: #37c9e1; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {text-shadow: 4px 4px 4px #aaa;}\ndiv.output_prompt, div.output_area pre {color: slategray;}\ndiv.input_prompt, div.output_subarea {color: #37c9e1;}      \ndiv.output_stderr pre {background-color: gainsboro;}  \ndiv.output_stderr {background-color: slategrey;}       \n<\/style>","a0c6a20d":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport itertools\nplt.style.use('fivethirtyeight')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)","84aedd62":"style_dict = {'background-color':'slategray',\n              'color':'#37c9e1',\n              'border-color': 'white',\n              'font-family':'Roboto'}","6c32f215":"diabetes = pd.read_csv('..\/input\/diabetes.csv')\nprint(diabetes.columns)","8c4c60cf":"diabetes.head().style.set_properties(**style_dict)","f998b032":"print(\"dimension of diabetes data: {}\".format(diabetes.shape))","7c736c3c":"print(diabetes.groupby('Outcome').size())","a52b3bd9":"import seaborn as sns\nsns.countplot(diabetes['Outcome'],label=\"Count\")","dafac8ae":"diabetes.info()","afad548b":"columns=diabetes.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    diabetes[i].hist(bins=20,edgecolor='black')\n    plt.title(i)\nplt.show()","4ddd0b3e":"sns.pairplot(data=diabetes,hue='Outcome',diag_kind='kde')\nplt.show()","2ff20ee4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(diabetes.loc[:, diabetes.columns != 'Outcome'], \n                                                    diabetes['Outcome'], stratify=diabetes['Outcome'], random_state=66)","c2c11b7a":"from sklearn.neighbors import KNeighborsClassifier\ntraining_accuracy = []\ntest_accuracy = []\n# try n_neighbors from 1 to 10\nneighbors_settings = range(1, 11)\nfor n_neighbors in neighbors_settings:\n    # build the model\n    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n    knn.fit(X_train, y_train)\n    # record training set accuracy\n    training_accuracy.append(knn.score(X_train, y_train))\n    # record test set accuracy\n    test_accuracy.append(knn.score(X_test, y_test))\n\nplt.plot(neighbors_settings, training_accuracy, label=\"training accuracy\")\nplt.plot(neighbors_settings, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"n_neighbors\")\nplt.legend()\nplt.savefig('knn_compare_model')","e6ce7ae8":"knn = KNeighborsClassifier(n_neighbors=9)\nknn.fit(X_train, y_train)\n\nprint('Accuracy of K-NN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))","b8cda55f":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression().fit(X_train, y_train)\nprint(\"Training set accuracy: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg.score(X_test, y_test)))","82e46c34":"logreg1 = LogisticRegression(C=0.01).fit(X_train, y_train)\nprint(\"Training set accuracy: {:.3f}\".format(logreg1.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg1.score(X_test, y_test)))","9681d68c":"logreg100 = LogisticRegression(C=100).fit(X_train, y_train)\nprint(\"Training set accuracy: {:.3f}\".format(logreg100.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg100.score(X_test, y_test)))","4378af9b":"diabetes_features = [x for i,x in enumerate(diabetes.columns) if i!=8]\nplt.figure(figsize=(8,6))\nplt.plot(logreg.coef_.T, 'o', label=\"C=1\")\nplt.plot(logreg100.coef_.T, '^', label=\"C=100\")\nplt.plot(logreg1.coef_.T, 'v', label=\"C=0.001\")\nplt.xticks(range(diabetes.shape[1]), diabetes_features, rotation=90)\nplt.hlines(0, 0, diabetes.shape[1])\nplt.ylim(-5, 5)\nplt.xlabel(\"Feature\")\nplt.ylabel(\"Coefficient magnitude\")\nplt.legend()\nplt.savefig('log_coef')","7b1d8f5f":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(random_state=0)\ntree.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","a81e2d06":"tree = DecisionTreeClassifier(max_depth=3, random_state=0)\ntree.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","247acead":"print(\"Feature importances:\\n{}\".format(tree.feature_importances_))","747feb70":"def plot_feature_importances_diabetes(model):\n    plt.figure(figsize=(8,6))\n    n_features = 8\n    plt.barh(range(n_features), model.feature_importances_, align='center')\n    plt.yticks(np.arange(n_features), diabetes_features)\n    plt.xlabel(\"Feature importance\")\n    plt.ylabel(\"Feature\")\n    plt.ylim(-1, n_features)\n\nplot_feature_importances_diabetes(tree)\nplt.savefig('feature_importance')","669131fe":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, random_state=0)\nrf.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(rf.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(rf.score(X_test, y_test)))","b737c8f5":"rf1 = RandomForestClassifier(max_depth=3, n_estimators=100, random_state=0)\nrf1.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(rf1.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(rf1.score(X_test, y_test)))","c93781fd":"plot_feature_importances_diabetes(rf)","55578973":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier(random_state=0)\ngb.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(gb.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb.score(X_test, y_test)))","b70c897f":"gb1 = GradientBoostingClassifier(random_state=0, max_depth=1)\ngb1.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(gb1.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb1.score(X_test, y_test)))","1978c9e2":"gb2 = GradientBoostingClassifier(random_state=0, learning_rate=0.01)\ngb2.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(gb2.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gb2.score(X_test, y_test)))","ea580e5f":"plot_feature_importances_diabetes(gb1)","5ce74fdf":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(random_state=42)\nmlp.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.2f}\".format(mlp.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.2f}\".format(mlp.score(X_test, y_test)))","164f1f6a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)\nmlp = MLPClassifier(random_state=0)\nmlp.fit(X_train_scaled, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(\n    mlp.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp.score(X_test_scaled, y_test)))","d18e661e":"mlp = MLPClassifier(max_iter=1000, random_state=0)\nmlp.fit(X_train_scaled, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(\n    mlp.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp.score(X_test_scaled, y_test)))","16c84289":"mlp = MLPClassifier(max_iter=1000, alpha=1, random_state=0)\nmlp.fit(X_train_scaled, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(\n    mlp.score(X_train_scaled, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(mlp.score(X_test_scaled, y_test)))","893d2b06":"plt.figure(figsize=(20, 5))\nplt.imshow(mlp.coefs_[0], interpolation='none', cmap='viridis')\nplt.yticks(range(8), diabetes_features)\nplt.xlabel(\"Columns in weight matrix\")\nplt.ylabel(\"Input feature\")\nplt.colorbar()","841fdfaa":"### &#x1F310; Outcome 0 means No diabetes, outcome 1 means diabetes\nOf these 768 data points, 500 are labeled as 0 and 268 as 1:","082527a2":"###  &#x1F310; Visualization of model and accuracy ","b37e6ecc":"## &#x1F310; &nbsp; Code Library, Style, and Links","67e94e88":"<b>Short note:<\/b>\nWe can visualize the feature importances to get more insight into our model even though we are not really happy with the model.","80f1c454":"##  &#x1F310; Decision Tree","631c5ad5":"## &#x1F4D8; Summary\n![Imgur](https:\/\/i.imgur.com\/RISfOXB.jpg)\n\n\n\n","b6c950ca":"### &#x1F310; Brief Analysis of the data ","2d18d5d4":"Feature importance rates how important each feature is for the decision a tree makes. It is a number between 0 and 1 for each feature, where 0 means \u201cnot used at all\u201d and 1 means \u201cperfectly predicts the target.\u201d The feature importances always sum to 1:","1fffdad9":"## &#x1F310; &nbsp; Load the Data","ddec6541":"## &#x1F310; Vizualization of Neural Networks ","e0288754":"<b> Observations:<\/b>\n\nThe accuracy on the training set is 100%, while the test set accuracy is much worse. This is an indicative that the tree is overfitting and not generalizing well to new data. Therefore, we need to apply pre-pruning to the tree.\n\nWe set max_depth=3, limiting the depth of the tree decreases overfitting. This leads to a lower accuracy on the training set, but an improvement on the test set.","530eeb79":"## &#x1F310; Gradient Boosting","a0a71958":"<b> Observations:<\/b>\nFeature \"Glucose\" is by far the most important feature.","98c23032":"### &#x1F310; PairPlots: ","6860f286":"&#x1F310;  **Logistic regression is one of the most common classification algorithms.**","d7147f4c":"The above plot suggests that we should choose n_neighbors=9. Here we are:","6948d321":"<b> Observations:<\/b>\nBoth methods of decreasing the model complexity reduced the training set accuracy, as expected. In this case, none of these methods increased the generalization performance of the test set.","45ded484":"## &#x1F310; &nbsp; Load libarary ","50791cf6":"##  &#x1F310;  k-Nearest Neighbors \n","bd6d2d34":"##  &#x1F310;  Feature importance in Decision trees","7c05cdf8":"&#x1F310;  <b>The default value of C=1 provides with 78% accuracy on training and 77% accuracy on test set. ","e83483eb":"## &#x1F310; Data\n\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n* Pregnancies: Number of times pregnant\n* Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n* BloodPressure: Diastolic blood pressure (mm Hg)\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: 2-Hour serum insulin (mu U\/ml)\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: Diabetes pedigree function\n* Age: Age (years)\n* Outcome: Class variable (0 or 1)","a39ff3e8":"##  &#x1F310;  Random Forest ","cb13df1a":"###  &#x1F310; Vizualization of Feature importance ","f6c10d24":"## &#x1F4D8; &nbsp; Objective\n\nWe will try to build a machine learning model to accurately predict whether or not the patients in the dataset have diabetes or not?","3047d522":"![Imgur](https:\/\/i.imgur.com\/ziXuIjp.jpg)","8bbfd1ec":"Useful `LINKS`:\n\n&#x1F4E1; &nbsp; [Pima Indians and Diabetes video](https:\/\/www.youtube.com\/watch?v=pN4HqWRybwk)\n\n&#x1F4E1; &nbsp; [Pima Indians and Diabetes research paper](https:\/\/pdfs.semanticscholar.org\/ef31\/2e378325707b371c4727f6b1f9225fc03a9f.pdf)\n\n&#x1F4E1; &nbsp; [Pandas Visualization](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/visualization.html)\n\n&#x1F4E1; &nbsp; [Pandas Styling](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/style.html)","6b478602":"### &#x1F310; Let\u2019s investigate whether we can confirm the connection between model complexity and accuracy","0fec3113":"<b> Observations:<\/b>\n\nThe accuracy of the MLP is not as good as the other models at all, this is likely due to scaling of the data. Neural networks also expect all input features to vary in a similar way, and ideally to have a mean of 0, and a variance of 1. ","d57daa7b":"##  &#x1F310; Predictive Modeling with Visualization","abac4caf":"## &#x1F310; Vizualization of Feature importance in Random Forest","668b65e9":"The k-NN algorithm is arguably the simplest machine learning algorithm. Building the model     consists only of storing the training dataset. To make a prediction for a new data point, the     algorithm finds the closest data points in the training dataset\u2014its \u201cnearest neighbors.\u201d","60cfc996":"### &#x1F310; Observations:\n1)The diagonal shows the distribution of the the dataset with the kernel density plots.\n\n2)The scatter-plots shows the relation between each and every attribute or features taken pairwise. Looking at the scatter-plots, we can say that no two attributes are able to clearly seperate the two outcome","a01d3c73":"## &#x1F4D8; &nbsp;  Introduction of Pima Indians and Diabetes \n","888e3033":"### &#x1F310; &nbsp; The diabetes dataset consists of 768 data points, with 9 features each","2d4fbdbf":"<b> Observations:<\/b> \n\nFrom the heat map, it is not easy to point out quickly that which feature (features) have relatively low weights compared to the other features.","15ba5ad5":"##  &#x1F310; Logistic Regression","b66852e3":"The plot shows the training and test set accuracy on the y-axis against the setting of n_neighbors on the x-axis. ","140f56c8":"###  &#x1F310; Basic EDA","4abe1d70":"<b> Observations:<\/b>\nThe random forest gives us an accuracy of 78.6%, better than the logistic regression model or a single decision tree, without tuning any parameters. ","6e680d4d":"let\u2019s apply a random forest consisting of 100 trees on the diabetes dataset:","1e03c0f8":"&#x1F310;  <b>Using C=0.01 results in lower accuracy on both the training and the test sets.","a14ec380":"###  &#x1F310; Vizualization of  Logistic Regression ","3435eb92":"## &#x1F310; Vizualization of Feature importance in Gradient Boosting ","ec1fb34a":"## &#x1F310; Neural Networks","59792263":"*Diabetes, is a group of metabolic disorders in which there are high blood sugar levels over a prolonged period. Symptoms of high blood sugar include frequent urination, increased thirst, and increased hunger. If left untreated, diabetes can cause many complications. Acute complications can include diabetic ketoacidosis, hyperosmolar hyperglycemic state, or death. Serious long-term complications include cardiovascular disease, stroke, chronic kidney disease, foot ulcers, and damage to the eyes.*\n\n*This dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.*","eea801a6":"![Imgur](https:\/\/i.imgur.com\/x3rrQyy.png)","017aee3e":"<b> Observations:<\/b>\nSimilarly to the single decision tree, the random forest also gives a lot of importance to the \u201cGlucose\u201d feature, but it also chooses \u201cBMI\u201d to be the 2nd most informative feature overall. The randomness in building the random forest forces the algorithm to consider many possible explanations, the result being that the random forest captures a much broader picture of the data than a single tree.","623ce960":"# ML for Diabetes from Bangladesh \n![Imgur](https:\/\/i.imgur.com\/tRErGUn.gif)"}}