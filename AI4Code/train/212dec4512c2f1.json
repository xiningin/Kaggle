{"cell_type":{"c18316b7":"code","fcd7d665":"code","d88ff94f":"code","2928fb05":"code","7d05441e":"code","8df066f6":"code","53e71768":"code","ad6e446d":"code","0f5f331b":"code","22c6e818":"code","bd15b3c5":"code","99d6e3aa":"code","068e0b28":"code","388857f3":"code","45fd24e9":"code","8cafd804":"code","421a63ad":"code","988c8af8":"code","6fbeaa2f":"code","60f83d0f":"code","693091f8":"code","d3760e95":"code","bde267c8":"code","22f7f2f8":"code","c1c8543e":"code","0023efec":"code","523061f0":"code","832fd602":"code","6cb2c4a1":"code","6a30bfa5":"code","92124a89":"code","e7e725d4":"code","bf6bd891":"code","88817bdf":"code","b0458bcc":"code","5eb67ebb":"code","da830083":"markdown","4bd0052a":"markdown","be434e33":"markdown","29053a6e":"markdown","f52f8809":"markdown","312f6a76":"markdown","5e6ab959":"markdown"},"source":{"c18316b7":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, confusion_matrix, make_scorer\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom xgboost import XGBRegressor\nfrom sklearn import preprocessing\nfrom hyperopt import hp, tpe\nfrom hyperopt.fmin import fmin","fcd7d665":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","d88ff94f":"df.head()","2928fb05":"df.info()","7d05441e":"# df_t = df.copy()","8df066f6":"# del_columns = [3, 6, 7, 8, 10, 11, 13, 14, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, \n#                29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46,\n#                47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, \n#                66, 67, 68, 69, 70, 72, 73, 74, 75]\n# for i in del_columns:\n#     df.drop(df_t.columns[i], axis=1, inplace=True)\n\n# df.info()\n# \"MSSubClass\", \"MSZoning\", \"LotArea\", \"Street\", \"Utilities\", \"Neighborhood\", \n# \"HouseStyle\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\", \"Heating\", \"GarageType\",\n# \"GarageCars\", \"PoolArea\", \"MoSold\", \"YrSold\", \"SaleType\", \"SaleCondition\", \"SalePrice\"","53e71768":"df_tmp = df.copy()","ad6e446d":"df_columns = df_tmp.columns.values.tolist()","0f5f331b":"# Find the columns which contain strings\nfor label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","22c6e818":"for label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        df_tmp[label] = content.astype(\"category\").cat.as_ordered()","bd15b3c5":"df_tmp.MSZoning.cat.categories","99d6e3aa":"df_tmp.to_csv(\"train_tmp.csv\",\n              index=False)","068e0b28":"df_tmp = pd.read_csv(\".\/train_tmp.csv\")","388857f3":"df_tmp.isna().sum()","45fd24e9":"# Check for which numeric columns have null values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","8cafd804":"# Fill numeric rows with the median\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            df_tmp[label + \"_is_missing\"] = pd.isnull(content)\n            df_tmp[label] = content.fillna(content.median())","421a63ad":"# Check if there's any null numeric values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","988c8af8":"# Turn categorical variables into numbers and fill missing\nfor label, content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df_tmp[label+\"is_missing\"] = pd.isnull(content)\n        df_tmp[label] = pd.Categorical(content).codes + 1","6fbeaa2f":"df_val = df_tmp[df_tmp.MoSold == 5]\ndf_train = df_tmp[df_tmp.MoSold != 5]\n\nlen(df_val), len(df_train)","60f83d0f":"X_train, y_train = df_train.drop(\"SalePrice\", axis=1), df_train.SalePrice\nX_valid, y_valid = df_val.drop(\"SalePrice\", axis=1), df_val.SalePrice\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","693091f8":"from sklearn.metrics import mean_squared_log_error\n\ndef rmsle(y_test, y_preds):\n    \"\"\"\n    Calculate root mean squared log error between predictions true labels.\n    \"\"\"\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    val_preds = model.predict(X_valid)\n    scores = {\"Training RMSLE\": rmsle(y_train, train_preds),\n             \"Valid RMSLE\": rmsle(y_valid, val_preds)}\n    return scores","d3760e95":"model = XGBRegressor(verbosity=0)","bde267c8":"%%time\n\nmodel.fit(X_train, y_train)","22f7f2f8":"show_scores(model)","c1c8543e":"%%time\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Defferent RandomForestRegressor hyperparameters\nrf_grid = {\"n_estimators\": np.arange(10, 300, 5),\n           'eta':  [0.025, 0.5, 0.75, 1],\n           \"learning_rate\": [0.10, 0.15, 0.20, 0.25, 0.30, 0.5, 0.7],\n           \"min_child_weight\": [1, 2, 3, 4, 5, 6, 7, 9, 10,12, 15],\n           \"max_depth\": [None, 3, 4, 5, 6, 7, 8, 10, 12, 15],\n           'gamma': [0.25, 0.5, 0.75, 1],\n           \"colsample_bytree\": [0.3, 0.4, 0.5, 0.7, 0.9]}\n\n# Instantiate RandomizesSearchCV model\nrs_model = RandomizedSearchCV(XGBRegressor(random_state=42),\n                             param_distributions=rf_grid,\n                             n_iter=2,\n                             cv=5,\n                             verbose=True)\n\n# Fit the RandomizedSearchCV model\nrs_model.fit(X_train, y_train)","0023efec":"rs_model.best_params_","523061f0":"%%time\n\n# Most ideal hyperparameters\nideal_model = XGBRegressor(verbosity = 0,\n                            n_estimators = 160,\n                            min_child_weight = 5,\n                            max_depth = 12,\n                            learning_rate = 0.1,\n                            gamma = 0.25,\n                            eta = 0.025,\n                            colsample_bytree = 0.5)\n\n# Fit the ideal model\nideal_model.fit(X_train, y_train)","832fd602":"show_scores(ideal_model)","6cb2c4a1":"df_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_test.head()","6a30bfa5":"def preprocess_data(df):\n    \n    # Fill the numeric rows with median\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                df[label + \"_is_missing\"] = pd.isnull(content)\n                df[label] = content.fillna(content.median())\n    \n    # Filled categorical missing data and turn catefories into numbers\n    for label, content in df.items():\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label+\"is_missing\"] = pd.isnull(content)\n            df[label] = pd.Categorical(content).codes + 1\n    \n    return df\npreprocess_data(df_test)","92124a89":"set(df_test.columns) - set(X_train.columns)","e7e725d4":"# for i in del_df_test:\n#     df_test.drop([i], axis=1, inplace=True)\ndf_test.drop('BsmtFinSF1_is_missing', axis=1, inplace=True)\ndf_test.drop('BsmtFinSF2_is_missing', axis=1, inplace=True)\ndf_test.drop('BsmtFullBath_is_missing', axis=1, inplace=True)\ndf_test.drop('BsmtHalfBath_is_missing', axis=1, inplace=True)\ndf_test.drop('BsmtUnfSF_is_missing', axis=1, inplace=True)\ndf_test.drop('GarageArea_is_missing', axis=1, inplace=True)\ndf_test.drop('GarageCars_is_missing', axis=1, inplace=True)\ndf_test.drop('TotalBsmtSF_is_missing', axis=1, inplace=True)","bf6bd891":"test_preds = ideal_model.predict(df_test)","88817bdf":"test_preds","b0458bcc":"df_preds = pd.DataFrame()\ndf_preds[\"Id\"] = df_test[\"Id\"]\ndf_preds[\"SalePrice\"] = test_preds\ndf_preds","5eb67ebb":"df_preds.to_csv(\"submission.csv\", index=False)","da830083":"### Testing our model on a subset (to tune the hyperparameters)","4bd0052a":"### Building an evaluation function","be434e33":"### Hyperparameter tuning with RandomizedSearchCV","29053a6e":"### Make prediction on test data","f52f8809":"### Train a model with the best hyperparameters","312f6a76":"### Filling and turning categorical variables into numbers","5e6ab959":"### Splitting data into train\/validation set"}}