{"cell_type":{"edc4375e":"code","3c1d86fb":"code","488dd053":"code","5ff3052b":"code","5d9833b6":"code","956b4841":"code","43e0afee":"code","4d0cfa96":"code","83d2f3ce":"code","5d0f380a":"code","c2488538":"code","0163e337":"code","6fd7437b":"code","aeb26566":"code","f2e14a56":"code","0734b5a7":"code","6981d610":"code","3b23f20f":"code","d898aecf":"code","79e42ebd":"code","53afb6cc":"code","8b9e2c7f":"code","b4ff45a1":"code","530b4b19":"code","5215578b":"code","7d78f651":"code","41f97731":"code","85804211":"code","03ca08f0":"code","34565548":"code","18f94f1d":"code","36a0fb2d":"code","deb0339b":"code","ef4df958":"code","d3798ded":"code","8d66e49e":"code","5cd6e7fb":"code","942275ca":"code","a474a143":"code","54c300cb":"code","48fd5ad4":"code","ef886dd9":"code","09634be2":"code","8dad3203":"code","4960484c":"code","c5744852":"code","bcdb44c3":"code","e945e65b":"code","c53cc99c":"code","c351e04a":"code","921a22d9":"code","05b1591a":"code","5ea7aa4b":"markdown","181b2908":"markdown","cc1bd307":"markdown","fefbbc12":"markdown","ba881c18":"markdown","7493d4a3":"markdown","52b62e76":"markdown","ce57878a":"markdown"},"source":{"edc4375e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","3c1d86fb":"test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","488dd053":"test_df.head()","5ff3052b":"train_df.head()","5d9833b6":"train_df = pd.get_dummies(train_df, columns=['Embarked'])","956b4841":"train_df.head()","43e0afee":"test_df = pd.get_dummies(test_df, columns=['Embarked'])","4d0cfa96":"test_df.head()","83d2f3ce":"train_df.head()","5d0f380a":"train_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","c2488538":"test_df.drop(['Name', 'Ticket', 'Cabin'], axis=1)","0163e337":"train_df['family_size'] = train_df['SibSp'] + train_df['Parch'] + 1\ntrain_df.head()","6fd7437b":"train_df[['family_size', 'Survived']].groupby(['family_size'], as_index=False).mean().sort_values(by='Survived', ascending=False)","aeb26566":"test_df['family_size'] = test_df['SibSp'] + test_df['Parch'] + 1\n","f2e14a56":"test_df['family_size'] = train_df['SibSp'] + train_df['Parch'] + 1\n","0734b5a7":"train_df.head()","6981d610":"train_df['Sex'].replace(['male', 'female'], [1, 0], inplace=True)\ntest_df['Sex'].replace(['male', 'female'], [1, 0], inplace=True)\n","3b23f20f":"train_df.shape","d898aecf":"train_df.isnull().sum()","79e42ebd":"test_df.isnull().sum()","53afb6cc":"train_df['Age'].fillna(round(train_df['Age'].mean()), inplace=True)\ntest_df['Age'].fillna(round(test_df['Age'].mean()), inplace=True)","8b9e2c7f":"train_df.isnull().sum()","b4ff45a1":"test_df.isnull().sum()","530b4b19":"test_df['Fare'].fillna(round(test_df['Fare'].mean()), inplace=True)","5215578b":"train_df.head()","7d78f651":"test_df.head()","41f97731":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","85804211":"train_df.loc[train_df['Age'] <= 16, 'Age'] = 0\ntrain_df.loc[(train_df['Age'] > 16) & (train_df['Age'] <= 32), 'Age'] = 1\ntrain_df.loc[(train_df['Age'] > 32) & (train_df['Age'] <= 48), 'Age'] = 2\ntrain_df.loc[(train_df['Age'] > 48) & (train_df['Age'] <= 64), 'Age'] = 3\ntrain_df.loc[(train_df['Age'] > 64) & (train_df['Age'] <= 80), 'Age'] = 4\n","03ca08f0":"test_df.loc[test_df['Age'] <= 16, 'Age'] = 0\ntest_df.loc[(test_df['Age'] > 16) & (test_df['Age'] <= 32), 'Age'] = 1\ntest_df.loc[(test_df['Age'] > 32) & (test_df['Age'] <= 48), 'Age'] = 2\ntest_df.loc[(train_df['Age'] > 48) & (test_df['Age'] <= 64), 'Age'] = 3\ntest_df.loc[(train_df['Age'] > 64) & (test_df['Age'] <= 80), 'Age'] = 4","34565548":"train_df[['Age', 'Survived']].groupby(['Age'], as_index=False).mean().sort_values(by='Age', ascending=True)","18f94f1d":"train_df.loc[train_df['Fare'] <= 10, 'Fare'] = 0\ntrain_df.loc[(train_df['Fare'] > 10) & (train_df['Fare'] <= 75), 'Fare'] = 1\ntrain_df.loc[(train_df['Fare'] > 75, 'Fare')] = 2","36a0fb2d":"test_df.loc[test_df['Fare'] <= 10, 'Fare'] = 0\ntest_df.loc[(test_df['Fare'] > 10) & (test_df['Fare'] <= 75), 'Fare'] = 1\ntest_df.loc[(test_df['Fare'] > 75, 'Fare')] = 2","deb0339b":"train_df.head()","ef4df958":"features = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'family_size']\nX = train_df[features]\nX_test = test_df[features]","d3798ded":"Y = train_df['Survived']","8d66e49e":"X.head()","5cd6e7fb":"X_test.head()","942275ca":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\n\n","a474a143":"models_accuracy = {}\ncv = KFold(n_splits=15, random_state=13, shuffle=True)","54c300cb":"model = LogisticRegression(solver='liblinear')\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['Logistic Regression'] = avg_score\nprint(\"Mean of scores = \", avg_score)","48fd5ad4":"model = SVC(decision_function_shape='ovr')\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['SVM'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","ef886dd9":"model = KNeighborsClassifier(n_neighbors=3)\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['Knn'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","09634be2":"model = RandomForestClassifier(n_estimators=80)\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['Random Forest'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","8dad3203":"model = AdaBoostClassifier()\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['Ada Boost'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","4960484c":"model = GradientBoostingClassifier(n_estimators=40)\nscores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)\nprint(scores)\navg_score = np.round(scores.mean()*100,2)\nmodels_accuracy['Gradient Boost'] = avg_score\nprint(\"Mean of scores = {}\".format(np.round(scores.mean()*100, 2)))","c5744852":"models_accuracy","bcdb44c3":"main_Model = GradientBoostingClassifier(n_estimators=40)\nmain_Model.fit(X, Y)\n\npred = main_Model.predict(X_test)","e945e65b":"pred","c53cc99c":"y_pred = pd.DataFrame([submission['PassengerId'] ,pred], index=['PassengerId', 'Survived'])\n","c351e04a":"y_pred","921a22d9":"y_pred = y_pred.T","05b1591a":"y_pred.to_csv('Submission.csv')","5ea7aa4b":"# Thank you\n\n**I have just started. So, please comment what I can improve and make it more accurate**","181b2908":"**SVC**","cc1bd307":"# Titanic Survival Prediction\n\nThe Titanic Ship was the largest and the  luxurious ship in the world. But unfortunately, it sunk on its maiden voyage. While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.","fefbbc12":"# Data Analysis and Feature Engineering","ba881c18":"# Choosing Gradient Boosting as a Main Model","7493d4a3":"**KNN**","52b62e76":"# Training data on different Algorithm and checking accuracy","ce57878a":"****Logistic Regression****"}}