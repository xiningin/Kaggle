{"cell_type":{"60b51890":"code","822f4e68":"code","c94597a6":"code","02990238":"code","c3a6828b":"code","89e5c018":"code","775fdbd4":"code","daecc060":"code","13bc744d":"code","c309e8ec":"code","700c9404":"markdown"},"source":{"60b51890":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nimport random\nimport os\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau","822f4e68":"def seed_everything(seed=2020):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(42)\n","c94597a6":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')","02990238":"COLS = ['cp_type','cp_dose']\nFE = []\nfor col in COLS:\n    for mod in train_features[col].unique():\n        FE.append(mod)\n        train_features[mod] = (train_features[col] == mod).astype(int)\ndel train_features['sig_id']\ndel train_features['cp_type']\ndel train_features['cp_dose']\nFE+=list(train_features.columns) \ndel train_targets['sig_id']","c3a6828b":"def model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Input(877),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(4096, activation=\"relu\"),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(4096, activation=\"relu\"),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(206, activation=\"sigmoid\")\n        ])\n\n    model.compile(optimizer=tf.keras.optimizers.Adam(lr=2.75e-5), loss='binary_crossentropy', metrics=[\"accuracy\", \"AUC\"])\n    return model\n# model.fit(train_dataset, epochs=10, batch_size=128)","89e5c018":"from sklearn.model_selection import KFold\nNFOLD = 5\nkf = KFold(n_splits=NFOLD)\n\nBATCH_SIZE=128\nEPOCHS=30\n\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\nfor col in COLS:\n    for mod in test_features[col].unique():\n        test_features[mod] = (test_features[col] == mod).astype(int)\nsig_id = pd.DataFrame()\nsig_id = test_features.pop('sig_id')\ndel test_features['cp_type']\ndel test_features['cp_dose']\n\npe = np.zeros((test_features.shape[0], 206))\n\ntrain_features = train_features.values\ntrain_targets = train_targets.values\npred = np.zeros((train_features.shape[0], 206))\n\ncnt=0\nfor tr_idx, val_idx in kf.split(train_features):\n    reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n    cnt += 1\n    print(f\"FOLD {cnt}\")\n    net = model()\n    net.fit(train_features[tr_idx], train_targets[tr_idx], batch_size=BATCH_SIZE, epochs=EPOCHS, \n            validation_data=(train_features[val_idx], train_targets[val_idx]), verbose=0, callbacks=[reduce_lr_loss])\n    print(\"train\", net.evaluate(train_features[tr_idx], train_targets[tr_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"val\", net.evaluate(train_features[val_idx], train_targets[val_idx], verbose=0, batch_size=BATCH_SIZE))\n    print(\"predict val...\")\n    pred[val_idx] = net.predict(train_features[val_idx], batch_size=BATCH_SIZE, verbose=0)\n    print(\"predict test...\")\n    pe += net.predict(test_features, batch_size=BATCH_SIZE, verbose=0) \/ NFOLD","775fdbd4":"pe.shape\n\ncolumns = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ndel columns['sig_id']\nsub = pd.DataFrame(data=pe, columns=columns.columns)","daecc060":"sample = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\nsub.insert(0, column = 'sig_id', value=sample['sig_id'])","13bc744d":"sub.to_csv('submission.csv', index=False)","c309e8ec":"# Make sure all the columns between our submission and the sample submission are the same\ndef Diff(list1, list2): \n    return (list(list(set(list1)-set(list2)) + list(set(list2)-set(list1)))) \n\nDiff (sub.columns, pd.read_csv('..\/input\/lish-moa\/sample_submission.csv').columns)","700c9404":"# Baseline quantile regression with K-fold\n\n# Please remember to upvote, especially if you fork! \n### It encourages me to make more content like this.\n\nPlease leave feedback in the comments, as a newbie, it helps a ton!\n\n\n#### Changelog\nImplemented K-folds\n\nChanged to multilabel and sigmoid\n\n\nI have run out of submissions for today (due to errors) unfortunately, but this notebook should perform around 0.15 according to CV."}}