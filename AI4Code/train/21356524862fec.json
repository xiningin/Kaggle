{"cell_type":{"745c855e":"code","6a75b664":"code","c098139e":"code","426fc575":"code","cb184a13":"code","bd064cc8":"code","de7c7ed2":"code","3b6619de":"code","3f56436c":"code","0623f974":"code","dc8ea1b9":"code","c2af85bb":"code","cba9cb71":"code","608aef1f":"code","df36bd88":"code","8d3a3e93":"code","93312e9f":"code","8f1bc064":"code","920f72f0":"code","668493cf":"code","1bd8ec21":"code","093e3613":"code","eedbefec":"code","938fd9bc":"code","8c83bcc9":"code","9a732554":"code","a3f1fb4c":"code","8df0161a":"code","84c01d47":"code","70b1a1d1":"code","64e70bb1":"code","7d9b4d3b":"code","f17f7442":"code","af9aed21":"code","2d68b9b5":"code","f7b69486":"code","2628a2be":"code","9b5c1ddb":"code","746944dc":"code","6d6ae697":"code","077ae2ac":"markdown","fe964d19":"markdown","4102c875":"markdown","b4e68d66":"markdown","b05b660a":"markdown","e83a1ac4":"markdown","625afe2f":"markdown","d8ccac97":"markdown","d1beffe8":"markdown","36157aa1":"markdown","17b0b61e":"markdown","838d9bc3":"markdown","284aaf31":"markdown","3ca582a4":"markdown","4c3f9469":"markdown","32d95a8d":"markdown","5eca54b6":"markdown","61a94eb3":"markdown","e09c147e":"markdown","93e5c0a9":"markdown","20cd2959":"markdown","2f19649b":"markdown","715b302d":"markdown","aa283d6c":"markdown","56b50e93":"markdown","31e9e7a1":"markdown","8c53f0c8":"markdown","9d1eb8c7":"markdown","1bdd0a01":"markdown","43ecabae":"markdown","d8546a9f":"markdown","8fccff95":"markdown","f445e6a0":"markdown","15442ae8":"markdown","4eb05875":"markdown","786778ad":"markdown","3f887f42":"markdown","a139b425":"markdown","8be61214":"markdown","03f3d76c":"markdown","8cfdcf10":"markdown","49835ba7":"markdown","87a3098a":"markdown"},"source":{"745c855e":"library(caret) # Data Splitting\nlibrary(lightgbm) # lightbgm model\nlibrary(knitr) # report generation\nlibrary(ggrepel) # label\nlibrary(OneR) # binning\nlibrary(tidyverse) # metapackage of all tidyverse packages\n\nset.seed(123)","6a75b664":"search()","c098139e":"system(\"ls ..\/input\/titanic\", intern=TRUE)","426fc575":"train_path <- \"..\/input\/titanic\/train.csv\"\ntest_path <- \"..\/input\/titanic\/test.csv\"\nsub_path <- \"..\/input\/titanic\/gender_submission.csv\"\n\ntrain <- read_csv(file = train_path)\ntest <- read_csv(file = test_path)\nsub <- read_csv(file = sub_path)","cb184a13":"# Tibble returns tibble.\ntrain[,c(\"Pclass\")]","bd064cc8":"glimpse(train)","de7c7ed2":"View(train)","3b6619de":"head(train)","3f56436c":"kable(train)","0623f974":"summary(train)","dc8ea1b9":"colSums(is.na(train))","c2af85bb":"options(repr.plot.width=12, repr.plot.height=8)","cba9cb71":"p <- ggplot(data = train, mapping = aes(x = Age, fill = factor(Survived), color = factor(Survived)))\np + geom_histogram(alpha = 0.6) + ggtitle(\"Histogram by Age\") +\ntheme(text=element_text(size = 16)) ","608aef1f":"p <- ggplot(data = train, mapping = aes(x = Age, fill = factor(Survived), color = factor(Survived)))\np + geom_histogram(alpha = 0.6) + ggtitle(\"Histogram by Age\") +\ntheme(text=element_text(size = 16)) + facet_wrap( ~ Sex, ncol = 2)","df36bd88":"p <- ggplot(data = train, mapping = aes(x = Age, fill = factor(Survived), color = factor(Survived)))\np + geom_density(alpha = 0.3) + facet_wrap( ~ Sex, ncol = 2) +\ntheme(text=element_text(size = 16))  + ggtitle(\"Density estimate by Age\")","8d3a3e93":"train <-  train %>% mutate(is_child = ifelse(Age < 18, 1, 0))\ntest <-  test %>% mutate(is_child = ifelse(Age < 18, 1, 0))","93312e9f":"Survived_count <- train %>% \n  group_by(Survived, is_child) %>% \n  summarize(count = n())","8f1bc064":"p <- ggplot(data = Survived_count, mapping = aes(x = is_child, y = count, fill = factor(Survived), color = factor(Survived)))\n#By position_dodge(preserve = \"single\"), we can maintain width of bar.\np + geom_col(position = position_dodge(preserve = \"single\")) +\ncoord_flip() + ggtitle(\"Count of Survived or not per is_Child\")","920f72f0":"p <- ggplot(data = train, mapping = aes(x = factor(Survived), y = Fare))\np + geom_boxplot(alpha = 0.3) + \ntheme(text=element_text(size = 16)) +\ncoord_flip() + ggtitle(\"Boxplot of Fare per Survived\")","668493cf":"summary_fare <- train %>% \n  group_by(Survived) %>%\n  summarize(mean = mean(Fare), std_dev = sd(Fare))\n\nsummary_fare","1bd8ec21":"p <- ggplot(data = train, mapping = aes(x = Age, y = Fare, color = factor(Survived)))\np + geom_point(alpha = 0.5) + theme(text=element_text(size = 16)) +\nggtitle(\"Scatterplot of Age vs Fare per Survived\")","093e3613":"p <- ggplot(data = train, mapping = aes(x = Age, y = Fare, color = factor(Survived)))\np + geom_point(alpha = 0.3) + theme(text=element_text(size = 16)) + \ngeom_hline(yintercept = 100, size = 1.4, color = \"gray80\") +\ngeom_text_repel(data = subset(train, Fare > 100), mapping = aes(label = Pclass)) ","eedbefec":"p <- ggplot(data = train, mapping = aes(x = Age, y = Fare, color = factor(Survived)))\np + geom_point(alpha = 0.3) + theme(text=element_text(size = 16)) + \nfacet_wrap(~ Pclass)","938fd9bc":"target_cols <- c(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Embarked\")\n# Combine the train data and test data for processing.\ntrain_and_test <- rbind(train[, target_cols], test[, target_cols])\n# Extract target\ntrain_label <- train$Survived","8c83bcc9":"# https:\/\/stackoverflow.com\/questions\/2547402\/how-to-find-the-statistical-mode\nmode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\n# https:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy\ntrain_and_test$Age[is.na(train_and_test$Age)]<-median(train_and_test$Age,na.rm=TRUE)\ntrain_and_test$Embarked[is.na(train_and_test$Embarked)]<-mode(train_and_test$Embarked)\ntrain_and_test$Fare[is.na(train_and_test$Fare)]<-median(train_and_test$Fare,na.rm=TRUE)","9a732554":"train_and_test$Sex <- as.numeric(factor(train_and_test$Sex))\n\ntrain_and_test$Embarked <- as.numeric(factor(train_and_test$Embarked))","a3f1fb4c":"train_and_test <-  train_and_test %>% mutate(is_child = ifelse(Age < 18, 1, 0))","8df0161a":"train_and_test$FamilySize = train_and_test$SibSp + train$Parch + 1","84c01d47":"# Binarization\ntrain_and_test = train_and_test %>% mutate(IsAlone = ifelse(FamilySize > 1, 1, 0))","70b1a1d1":"train_and_test$Age_bin <- bin(train_and_test$Age, nbins = 5, labels = c(0, 1, 2, 3, 4))\ntrain_and_test <- train_and_test %>% mutate(Age_bin = as.integer(Age_bin))\n\ntrain_and_test$Fare_bin <- bin(train_and_test$Fare, nbins = 5, labels = c(0, 1, 2, 3, 4))\ntrain_and_test <- train_and_test %>% mutate(Fare_bin = as.integer(Fare_bin))","64e70bb1":"train_idx <- 1:nrow(train)\ntest_idx <- -train_idx\n\ntrain <- train_and_test[train_idx,]\ntest <- train_and_test[test_idx,]","7d9b4d3b":"input_cols <- append(target_cols, c(\"is_child\", \"FamilySize\", \"IsAlone\", \"Age_bin\", \"Fare_bin\"))\n\ntrain_data <- train[, input_cols]\n\ntest_data <- test[, input_cols]","f17f7442":"cat_cols <- c(\"Pclass\", \"Sex\", \"Embarked\", \"is_child\", \"IsAlone\", \"Age_bin\", \"Fare_bin\")\ntrain_ds <- lgb.Dataset(as.matrix(train_data), label = as.matrix(train_label), categorical_feature = cat_cols)","af9aed21":"lgb.cv(\n      objective = \"binary\"\n    , metric = \"binary_logloss\"\n    , data = train_ds\n    , nrounds = 1500L\n    , learning_rate = 0.002\n    , early_stopping_rounds = 10\n    , nfold = 5\n    , shuffle = TRUE\n)","2d68b9b5":"model <- lightgbm(\n    objective = \"binary\"\n    , metric = \"binary_logloss\"\n    , data = train_ds\n    , nrounds = 1433\n    , learning_rate = 0.002\n)","f7b69486":"tree_imp <- lgb.importance(model, percentage = TRUE)","2628a2be":"lgb.plot.importance(\n  tree_imp,\n  top_n = 10L,\n  measure = \"Gain\",\n  left_margin = 10L,\n  cex = NULL\n)","9b5c1ddb":"preds <- predict(model, as.matrix(test_data))","746944dc":"sub$Survived <- ifelse(preds > 0.45,1,0)","6d6ae697":"write.csv(sub, \"submission.csv\", row.names=FALSE)","077ae2ac":"### Check statitstics\n\nWe can see statistics of dataframe by summary function. This is like describe method of pandas dataframe.","fe964d19":"First, we'll set figure's aspect rate.","4102c875":"### Check feature importance","b4e68d66":"### Display tibble\n\nWe can chek tibble with some method like following,\n\n- glimpse: Display in a horizontal tabular format. All columns are visible. \n\n- View: Display like pandas dataframe.\n\n- Head: Display the first few lines of the View.\n\n- kable: Display simple table that is not HTML.","b05b660a":"### Create new column from some columns","e83a1ac4":"We can plot histogram by geom_histogram().","625afe2f":"We can see that the percentage of survivors is higher for smaller values of pclass. pclass 3 has more red dots. Children are mostly green.","d8ccac97":"If they are children, more than half of them survive, but if they are not children, the survival rate is much lower.\n\nWe'll try to find other information that might have an impact on survival. If the fare are high, person may be prioritized for help.\n\nLet's draw a boxplot to see if there is a difference in fare depending on whether you survived or not. This is geom_boxplot().","d1beffe8":"<a id=\"2\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Load data and see overview<\/div>\n\n### Execute shell scripts \n\nIn python notebook, we can call shell script with '!' like, \n\n> ! ls\n\nIn R notebook, we can do it like following,","36157aa1":"As we can see from the boxplot, there is a difference in fare between groups which is whether we survived or not. \n\nLet's calculate the statistics.","17b0b61e":"We can also count null value like this.","838d9bc3":"So far, we have revealed the following features.\n\n* Children seem to have a better chance of survival.\n\n* Female seem to have a higher survival rate than male.\n\n* The higher fare or ticket class, the higher the survival rate seems to be.","284aaf31":"To create plot by ggplot, we have to try 3 steps as following.\n\n<img src=\"https:\/\/raw.githubusercontent.com\/tasotasoso\/kaggle_media\/main\/R_data_analysis\/ggplot_structure.png\" width=\"800\">\n\nIn step1, we select data to use and define  aesthetic relationship of columns of the data. We can do this by ggplot() and returns ggplot object.\n\nIn step2, we choose geom_ function as plot type, and combine it to ggplot object.\n\nIn step3, by combining more options into the ggplot object, we can customize it. For example, the axis format, title, and many other things.","3ca582a4":"### Load csv data.\n\nWe can read csv file by read_csv of tidyverse like this.","4c3f9469":"<a id=\"0\"><\/a> <br>\n# <div class=\"alert alert-block alert-warning\">Merits of R for data analysis<\/div>\n\nTo summarize in bullet points,  there are following merits.\n\n* There is a lot of good literature for data visualization and analysis. In particular, I think there is a lot of literature that mentions the validity of visualization methods and even hypothesis testing.\n\n* With ggplot, we can create high quality plots without tuning. You can check this out [later](#3).\n\n* ggplot has a consistent API and is easy to use. The ggplot object and the geom object allow for a very good syntax and abstraction of the plots.\n\n* With dplyr, it is easy to write complex data wranglings. The Pipe operator can be used to concisely describe the data wrangling process to be followed.\n\nUsing R, we can easily perform beautiful plots and analysis using a very well-developed API. We can also refer to the literature of good statistical users who are using R as their main tool.","32d95a8d":"### Create dataset\n\nIn order to pass the tibble to the LightGBM Dataset API, we have to made it into matrix using as.matrix().","5eca54b6":"If we look at the blue distribution of male, we can see that children have a higher survival rate because another peek appear at the age of below 20.\n\nNow, since whether the person is child or not should have a lot to do with survival rate, let's draw a graph divided by that condition. \n\nWith functions of dplyr, we can manipurate this.  \n\nThe definition of is_child is,\n\n* Yes: 1\n* No: 0","61a94eb3":"The ratio of deaths seems to vary with age. Are there any other similar differences? For example, we are curious about gender.\n\nBy facet_wrap(), we can depicted graphs separately for each conditions very easily.","e09c147e":"<a id=\"5\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Modeling with LightGBM<\/div>\n\nAs Python users, you probably want to try LightGBM first after EDA. This method is also available in R. Let's create a model and submit the estimation results.","93e5c0a9":"### Horizontal division of tibble","20cd2959":"read_csv returns tibble, not data frame. Tibbles are a modern take on data frames.\n\nIn particular, the section on Tibbles vs data frames contains examples of the differences between tibbles and data frames. \n\nWe can use tibble like pandas DataFrame. But there are some difference. For examle , when we take subset by [], tibble returns tibble. If we use pandas dataframe, it [sometimes returns pandas Series](https:\/\/stackoverflow.com\/questions\/16782323\/python-pandas-keep-selected-column-as-dataframe-instead-of-series), so we may use different API between dataframe and series. The R data frame may also return a vector as well.","2f19649b":"<a id=\"1\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Load libraries<\/div>\n\nWe can load (strictly speaking, also attach) libraries by library().\n\nHere we will import a batch of libraries that we will use later. However, if your goal is to visualize and EDA the data first, the tidyverse is important.\n\ntidyverse is a collection of R packages designed for data science.\n\n- ggplot2: Data visualization.\n- dplyr: Data wranglign.\n- tidyr: Create tidy data.\n- readr: Load data from disk.\n- purrr: List manipulation.\n- tibble: Data frame manipulation.\n- stringr: String operation.\n- forcats: Handling factors.","715b302d":"The available packages can be checked with search().","aa283d6c":"Finally, we have our data set!","56b50e93":"dplyr is a set of verbs that help you solve the most common data manipulation challenges. Data rangling can be done by connecting tibble and verv with \"Pipe\" (%>%).\n\nAbout feature engineering like this, I'll try more in [later](#3).\n\nWe can also do groupby and count by dplyr. It might be hard to get used to seeing at first, but we can makes it easier to see the whole operation since we can connect the operations behind. ","31e9e7a1":"## About this notebook\n\nIn this notebook, I will explain how to analyze data with R, comparing it to the Python library.\n\nI'm basically using Python, but recently, I have been reading books, website, other kaggler's notebooks, etc for R learning. Learning different programing language requires a bit of effort, so many users may not really want to learn R. \n\nTo help you get started quickly with R, I've put together some examples of analysis and the differences compared to Python.","8c53f0c8":"### Inference & export submission file","9d1eb8c7":"Draw a bar graph to see the impact of child or not more directly. The bar chart is geom_col().\n\nIf the condition is not category but continuous value such as real number (of course, if the number is distributed within a reasonable range of common sense), we can use factor().\n\nWe can also use coord_flip() if we want to make the plot horizontal. Anyway, if we combined coord_flip(), we can get the plot 90 degrees. In the case of Seaborn, the interface is little confusing. For barplot, the column names for the x and y arguments must be swapped, but for barplot, we have to pass 'h' to orient argment.\n\nBy plotting horizontally, we don't have to tilt the label names by 45 degrees, even if they are longer.","1bdd0a01":"### Binarization","43ecabae":"We can overlap labels to points by geom_text_repel() of ggrepel.\n\nAnd we can overwrite hline by geom_hline().","d8546a9f":"<a id=\"3\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Visualize data with ggplot<\/div>\n\nIf we want to create plots in R, it is a good idea to start with [ggplot2]. If I\u2019m forced to say, ggplot2 is similar to seaborn in python.","8fccff95":"### Categorical encoding","f445e6a0":"The averages are about twice as different.\n\nLet's delve further. Let's draw a scatterplot of each data for each age. We can plot scatterplot by geom_point().","15442ae8":"### Fill missing values with statistics","4eb05875":"### training","786778ad":"<a id=\"4\"><\/a> <br>\n# <div class=\"alert alert-block alert-info\">Feature engineering<\/div>\n\nTo more accuracy, I'll try more feature engineering.\n\nI refered [A Data Science Framework: To Achieve 99% Accuracy](https:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy) for the features to be created.","3f887f42":"### Cross validation","a139b425":"We can see that this difference is more pronounced for male.\n\nWe stratificated the data, now let's try to make the effect of age easier to understand by using geom_density() to draw the density.\n\nWe can plot the kernel density estimate by geom_density().","8be61214":"In particular, in geom_point(), by specifying \u03b1, the color becomes deeper where the number of data is high, which is good for visual clarity.\n\nWe can see that the higher the Fare, the more green dots there are. Also, as we saw above, the green dots are concentrated where the age is low.\n\nThere is one more column that is related to Fare. It is the Ticket class.\n* 1st: Upper\n* 2nd: Middle\n* 3rd: Lower\n\nFor points with Fare higher than 100, let's see which class they are by assigning labels of pclass. Also, let's draw a horizontal line at 100 to make the boundary easier to understand.","03f3d76c":"## Contents\n- [Merits of R for data analysis](#0)\n- [Load libraries](#1)\n- [Load data and see overview](#2)\n- [Visualize data with ggplot](#3)\n- [Feature engineering](#4)\n- [Modeling with LightGBM](#5)","8cfdcf10":"### Concat data to process & select subset","49835ba7":"As a matter of course, we can see that all data with a Fare greater than 100 have a pclass of 1. It also shows a high percentage of survivors.\n\nIf we look at the graphs separately by pclass, we may be able to see more features.","87a3098a":"### Binning & label encoding"}}