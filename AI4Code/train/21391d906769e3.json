{"cell_type":{"f9932418":"code","cc12224a":"code","5717dd95":"code","c78230a3":"code","7011252f":"code","90a067e3":"code","06ef0ed4":"code","c2774783":"code","236f5720":"code","9d496cf1":"code","890974d5":"code","d914bf4a":"code","194a949f":"code","8fbcef93":"code","7c4f5aff":"code","70f16a08":"code","fcb977dc":"code","62472cfd":"code","3a0371cc":"code","52ca3b1c":"code","bc97998a":"code","c94b743e":"code","7e9a179f":"code","043c3b53":"markdown","695f9a98":"markdown","49dbec69":"markdown","79e279d2":"markdown","04036455":"markdown","a40ebd05":"markdown","d4be8e8c":"markdown","0d80d6b5":"markdown","20c2b7be":"markdown","21a2692f":"markdown","fdd80475":"markdown","65eda492":"markdown","0c516525":"markdown","0d07e6df":"markdown","e9ef6a08":"markdown","d7635a36":"markdown","f9e03332":"markdown","fd81aac7":"markdown","0a5de15b":"markdown","c76bc2a2":"markdown","a1d0bba0":"markdown","451bfad1":"markdown","a675f4e1":"markdown","4297a5e0":"markdown","926b4e85":"markdown","10aefc7d":"markdown"},"source":{"f9932418":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","cc12224a":"stock_data = pd.read_csv(\"..\/input\/Google_Stock_Price_Train.csv\")\ntest_data = pd.read_csv(\"..\/input\/Google_Stock_Price_Test.csv\")","5717dd95":"stock_data.head()","c78230a3":"stock_data.tail()","7011252f":"stock_data.info()","90a067e3":"stock_data['Date'] = pd.to_datetime(stock_data['Date'])\nstock_data = stock_data.sort_values(by=['Date'], ascending=True).reset_index()","06ef0ed4":"stock_data.head()","c2774783":"stock_data.tail()","236f5720":"plt.figure(figsize=(18, 8))\nplt.plot(stock_data['Open'])\nplt.title(\"Google Stock Prices\")\nplt.xlabel(\"Time (oldest -> latest)\")\nplt.ylabel(\"Stock Opening Price\")\nplt.show()","9d496cf1":"plt.figure(figsize=(18, 8))\nplt.plot(stock_data['High'])\nplt.title(\"Google Stock Prices\")\nplt.xlabel(\"Time (oldest-> latest)\")\nplt.ylabel(\"Stock Hightest Points\")\nplt.show()","890974d5":"plt.figure(figsize=(18, 8))\nplt.plot(stock_data['Low'])\nplt.title(\"Google Stock Prices\")\nplt.xlabel(\"Time (oldest -> latest)\")\nplt.ylabel(\"Stock Lowest Points\")\nplt.show()","d914bf4a":"plt.figure(figsize=(18, 8))\nplt.plot(stock_data['Volume'])\nplt.title(\"Volume of stocks sold\")\nplt.xlabel(\"Time (oldest-> latest)\")\nplt.ylabel(\"Volume of stocks traded\")\nplt.show()","194a949f":"input_feature = stock_data[['Open', 'High', 'Low', 'Volume', 'Close']]\ninput_data = input_feature.values","8fbcef93":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0,1))\ninput_data[:,:] = scaler.fit_transform(input_data[:,:])","7c4f5aff":"lookback=50\ntotal_size=len(stock_data)\nX=[]\ny=[]\nfor i in range(0, total_size-lookback): # loop data set with margin 50 as we use 50 days data for prediction\n    t=[]\n    for j in range(0, lookback): # loop for 50 days\n        current_index = i+j\n        t.append(input_data[current_index, :]) # get data margin from 50 days with marging i\n    X.append(t)\n    y.append(input_data[lookback+i, 4])","70f16a08":"test_size=100 # 100 days for testing data\nX, y= np.array(X), np.array(y)\nX_test = X[:test_size]\nY_test = y[:test_size]\n\nX_work = X[test_size:]\ny_work = y[test_size:]\n\nvalidate_size = 10\n\nX_valid = X[:validate_size]\ny_valid = y[:validate_size]\nX_train = X[validate_size:]\ny_train = y[validate_size:]","fcb977dc":"X_train = X_train.reshape(X_train.shape[0], lookback, 5)\nX_valid = X_valid.reshape(X_valid.shape[0], lookback, 5)\nX_test = X_test.reshape(X_test.shape[0], lookback, 5)\nprint(X_train.shape)\nprint(X_valid.shape)\nprint(X_test.shape)","62472cfd":"from keras import Sequential\nfrom keras.layers import Dense, LSTM\n\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences= True, activation='relu', input_shape=(X.shape[1], 5)))\nmodel.add(LSTM(50, return_sequences=True, activation='relu'))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.summary()","3a0371cc":"from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\ncallbacks = [\n    EarlyStopping(patience=10, verbose=1),\n    ReduceLROnPlateau(factor=0.1, patience=3, min_lr=0.00001, verbose=1),\n    ModelCheckpoint('model.h5', verbose=1, save_best_only=True, save_weights_only=True)\n]","52ca3b1c":"model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])","bc97998a":"model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_valid, y_valid), callbacks=callbacks)","c94b743e":"predicted_value = model.predict(X_test)","7e9a179f":"plt.figure(figsize=(18, 8))\nplt.plot(predicted_value, color= 'red')\nplt.plot(Y_test, color='green')\nplt.title(\"Close price of stocks sold\")\nplt.xlabel(\"Time (latest ->oldest-> )\")\nplt.ylabel(\"Stock Opening Price\")\nplt.show()","043c3b53":"### Normalize data\nmake data between 0 and 1","695f9a98":"From here we can see our data has 6 columns:\n* **Date**: The date of recorded data\n* **Open**: The price when stock market open\n* **High**: The highest price price of date\n* **Low**: The lowest price point of date\n* **Volumn**: Total Sale of stock on that date\n\nFrom this point we going to define our goal is to predict the **close price** of the given date from test data","49dbec69":"# Prediction","79e279d2":"# Callbacks\n* **EarlyStoping**: It will stop the traning if score of model didn't increase. This prevent model from overfitting. We are to set max in 10 epoches if it didn't increase then we will stop the training\n* **ReduceLROnPlateau**: Use for reduce the learning rate. In 3 steps the score didn't increase we will reduce the learning rate to improve the training\n* **ModelCheckpoint**: Use for save model only when the score increased","04036455":"# Virtualize our predicted data","a40ebd05":"This kernel work with time series marching learning. We going to pick only google stock price dataset as it is simple and useful for beginner. We use Long Short-Term Memory networks (LSTM) for our prediction. We are going to predict the price of google stock. ","d4be8e8c":"As given values of column date is **String** so we will convert it to datetime. After that we order the date column with latest to oldest.","0d80d6b5":"From three virtualizations above we can see that google stock price have been increasing it price lately. ","20c2b7be":"# Data Exploration","21a2692f":"### Select feature\nWe going to select Open, High, Low, Volumn and Close columns. We will put close column to the last one as it is the target column. ","fdd80475":"If you have anything in mind feel free to comment below","65eda492":"# Virtaulization","0c516525":"### Sample data","0d07e6df":"# Import Library","e9ef6a08":"# Compile Model","d7635a36":"### Plot the Open price","f9e03332":"# Import Data","fd81aac7":"### Plot the High price","0a5de15b":"From volumns plot, the volumns sold of google stock bump up base on it season. ","c76bc2a2":"### Reshape LSTM input layer","a1d0bba0":"### creating the data to go back for 50 business days in past ","451bfad1":"### Plot the Low price","a675f4e1":"### Parse and order by date ","4297a5e0":"### Plot the volumns sold","926b4e85":"* We will get last 100 days for testing (predict). \n* We split last remain 10 days to validate our traning\n* and the rest will be our training data","10aefc7d":"### Split train, validate and test data"}}