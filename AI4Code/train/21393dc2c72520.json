{"cell_type":{"efc9e659":"code","5817c5a3":"code","631fd509":"code","220b1b00":"code","6c857cd2":"code","3fbb03fb":"code","34c82dd2":"code","6f6c2f0b":"code","89f1ca5c":"code","c6d231b4":"code","e6050ce9":"code","67fd1ccf":"code","6cce0ff9":"code","bde37aea":"code","95764223":"code","67d0843a":"code","e130c52e":"code","9bca9072":"code","4d9f2945":"code","5d0e6729":"code","1d6ad75f":"code","edfa0fe0":"code","7068a472":"code","3875fe93":"code","2d86f5fb":"code","e1d41d2c":"code","0ef19c9a":"code","d7f6d9fa":"code","39851297":"markdown","0f3584d8":"markdown","82cd25d6":"markdown","7168f52b":"markdown","d05665c9":"markdown","1172a07a":"markdown","351f796a":"markdown","0f66a344":"markdown","a61e1db1":"markdown","fbbb16d8":"markdown","4b5311a8":"markdown","42f57442":"markdown","150c0e87":"markdown","ddd40574":"markdown","1d8e157d":"markdown","f11d83d9":"markdown","a7d2b78a":"markdown","e5c374c4":"markdown","4ed575e0":"markdown","63970c65":"markdown"},"source":{"efc9e659":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","5817c5a3":"original_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\noriginal_test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntarget = original_train.SalePrice.copy()","631fd509":"train=original_train.copy()\ntest=original_test.copy()","220b1b00":"train.head()","6c857cd2":"test.head()","3fbb03fb":"quantitative = [f for f in train.columns if train.dtypes[f] != 'object']\nquantitative.remove('SalePrice')\nquantitative.remove ('Id')\nqualitative = [f for f in train.columns if train.dtypes[f] == 'object']","34c82dd2":"y = train['SalePrice']\nax= sns.displot(data=y, kde=False)\nplt.show()","6f6c2f0b":"quantitative_data = train[quantitative]\nquantitative_data.hist(bins=50, figsize=(20,15))\nplt.show()","89f1ca5c":"f = pd.melt(train, value_vars=quantitative)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False)\ng = g.map(sns.histplot, \"value\")","c6d231b4":"quantitative_data = train[quantitative+['SalePrice']]\ncorr_matrix = quantitative_data.corr()\ncorr_matrix[\"SalePrice\"].sort_values(ascending=False)","e6050ce9":"#HeatMap\nplt.subplots(figsize=(20,15))\nax = sns.heatmap(\n    corr_matrix, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 150, n=200),\n    square=True)","67fd1ccf":"for c in qualitative:\n    train[c] = train[c].astype('category')\n    if train[c].isnull().any():\n        train[c] = train[c].cat.add_categories(['MISSING'])\n        train[c] = train[c].fillna('MISSING')\ndef boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)\n#create a box plot to show how the output changes with qualitative features\nf = pd.melt(train, id_vars=['SalePrice'], value_vars=qualitative)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, height=5)\ng = g.map(boxplot, \"value\", \"SalePrice\")","6cce0ff9":"df = pd.concat((train, test)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(df.shape))","bde37aea":"for i in qualitative:\n    mode = df[i].mode().values[0]\n    df[i] = df[i].fillna(value=mode)","95764223":"for i in quantitative:\n    df[i] = df[i].fillna(df[i].mean())","67d0843a":"df.drop([\"Id\"], axis=1, inplace=True)","e130c52e":"train = df[:original_train.shape[0]]\ntest = df[original_train.shape[0]:]","9bca9072":"quantitative = [f for f in train.columns if train.dtypes[f] != 'object']\n\nqualitative = [f for f in train.columns if train.dtypes[f] == 'object']","4d9f2945":"X_train, X_test, y_train, y_test = train_test_split(train,target, test_size=0.2, random_state=42)","5d0e6729":"categorical_transformer = OneHotEncoder(handle_unknown='ignore')\nCategoricalTransformer = ColumnTransformer(\n    transformers=[('cat', categorical_transformer, qualitative)])","1d6ad75f":"LR=Pipeline(steps=[('CategoricalTransformer', CategoricalTransformer),('regression',LinearRegression())])","edfa0fe0":"model=LR.fit(X_train,y_train)","7068a472":"y_pred=model.predict(X_test)","3875fe93":"score = model.score(X_train, y_train)\nprint(score)","2d86f5fb":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","e1d41d2c":"y_pred_final=model.predict(test)","0ef19c9a":"print(y_pred_final)","d7f6d9fa":"save_to_path = r'.\/submission.csv'\noriginal_test['SalePrice'] =  y_pred_final\noriginal_test[[\"Id\", \"SalePrice\"]].to_csv(save_to_path, index=False)","39851297":"Splitting the data","0f3584d8":"## Assesment Using R2 Score","82cd25d6":"Getting a list of qualitative and quantitative features","7168f52b":"## Pipeline and Model","d05665c9":"Checking for distribution of qualitative data","1172a07a":"Checking correlation values","351f796a":"Reading The Data","0f66a344":"Checking for distribution of quantitative data ( For Skewness)","a61e1db1":"Importing Libraries","fbbb16d8":"Creating a pipeline for encoding and Linear Regression model","4b5311a8":"Evaluating X_train data score","42f57442":"Checking the distribution of the output (if it follows a normal distribution)","150c0e87":"Evaluating X_test data score","ddd40574":"Visualizing the relation between the qualitative features and the output through the boxplot","1d8e157d":"## Preprocessing\nHandling Missing Data","f11d83d9":"Filling missing values in numerical columns with the mean value","a7d2b78a":"Encoding categorical columns by using a column transformer","e5c374c4":"Filling missing values in categorical columns with the most frequent value (Mode)","4ed575e0":"Predicting output for test data","63970c65":"## Saving Output and Submission"}}