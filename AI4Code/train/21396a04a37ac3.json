{"cell_type":{"73bc89f8":"code","fe3c275d":"code","e5c7b26c":"markdown"},"source":{"73bc89f8":"import pandas as pd \nimport urllib.request\nfrom bs4 import BeautifulSoup\nimport numpy as np\n\nimport datetime\nimport matplotlib.lines as mlines\nimport os\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\n\n# Roman numeral finder ========================================================\ndef int_to_Roman(num):\n    val = [1000, 900, 500, 400,100, 90, 50, 40,10,9,5,4,1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n    roman_num = '';i = 0\n    while  num > 0:\n        for _ in range(num \/\/ val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n# =============================================================================\n\n# Build up dictionary of the statistics based on year\nsuperbowl_stats = {}\n# Generate the roman numeral set\nroman_numerals = [int_to_Roman(x) for x in range(1,54)]\n# First thing to do is add the scores via scraping the web:\nnumerical_scraping_stats_indicators = ['First downs rushing','First downs passing','First downs penalty','Net yards rushing', \\\n                            'Rushing attempts','Yards per rush','Interceptions thrown','Net yards passing','Total net yards','Turnovers']\nsplit_scraping_stats_indicators = ['Times sacked-total yards','Punt returns-total yards','Kickoff returns-total yards','Interceptions-total return yards','Punts-average yardage','Fumbles-lost','Penalties-total yards']\ntime_scraping_stats_indicators = ['Time of possession']\ngood_rn = []\nfor rn in roman_numerals:\n    try:\n        print(rn)\n        superbowl_stats[rn] = {}\n        wiki_url = 'https:\/\/en.wikipedia.org\/wiki\/Super_Bowl_'+rn\n\n        # Scrape the scores for each team as well as team name\n        with urllib.request.urlopen(wiki_url) as response:\n            html = response.read()\n            soup = BeautifulSoup(html)\n            summary = soup.findAll(\"table\",{'class','nowraplinks'})\n\n            # Team name ========================================\n            r = summary[0].findAll(\"tr\");tds = r[0].findAll(\"th\")\n            A = tds[0].text;B = tds[1].text\n            superbowl_stats[rn]['Teams'] = [A,B]\n\n            # Scores ===========================================\n            r = summary[0].findAll(\"tr\");tds = r[1].findAll(\"td\")\n            A = int(tds[0].text);B = int(tds[1].text)\n            superbowl_stats[rn]['Score'] = [A,B]\n\n        # Get the detailed stats:\n        with urllib.request.urlopen(wiki_url) as response:\n            html = response.read()\n            soup = BeautifulSoup(html)\n            data = soup.findAll(\"td\")\n            for stat in numerical_scraping_stats_indicators:\n                A = [td.findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                B = [td.findNext('td').findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                superbowl_stats[rn][stat] = [float(A[0]),float(B[0])]\n\n            for stat in split_scraping_stats_indicators:\n                A = [td.findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                B = [td.findNext('td').findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                print([float(a.strip('(').strip(')').replace('\u2013','-').replace('\u2212','-')) for a in A[0].split('\u2013',1)])\n                superbowl_stats[rn][stat] = [[float(a.strip('(').strip(')').replace('\u2013','-').replace('\u2212','-')) for a in A[0].split('\u2013',1)],[float(b.strip('(').strip(')').replace('\u2013','-').replace('\u2212','-')) for b in B[0].split('\u2013',1)]]\n\n            for stat in time_scraping_stats_indicators:\n                A = [td.findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                B = [td.findNext('td').findNext('td').text.strip() for td in data if td.text.strip() in [stat]]\n                superbowl_stats[rn][stat] = [[float(a) for a in A[0].split(':')],[float(b) for b in B[0].split(':')]]\n        good_rn.append(rn)\n    except:\n        del superbowl_stats[rn] \n\n# Now we can look at a scatter of stat vs stat\n\n","fe3c275d":"\nx = []\ny = []\ncolor = []\nfor rn in good_rn:\n    # Get the score\n    A_score = superbowl_stats[rn]['Score'][0]\n    B_score = superbowl_stats[rn]['Score'][1]\n    if A_score>B_score:\n        color.append('#00FF00');color.append('#FF0000')\n    else:\n        color.append('#FF0000');color.append('#00FF00')\n    \n    metric = 'Score'\n    x.append(superbowl_stats[rn][metric][0])\n    x.append(superbowl_stats[rn][metric][1])\n\n    y.append(superbowl_stats[rn]['Score'][0])\n    y.append(superbowl_stats[rn]['Score'][1])\n\nplt.scatter(x, y,c=color)\nplt.xlabel('Total Yards Sacked', fontsize=18)\nplt.ylabel('Score', fontsize=16)\nplt.show()","e5c7b26c":"Scraping Wiki Superbowl historical final statistics\nhttps:\/\/en.wikipedia.org\/wiki\/Super_Bowl_I"}}