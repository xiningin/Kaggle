{"cell_type":{"b0410d5c":"code","f18eae85":"code","cb6c37f2":"code","726f5464":"code","1149bca7":"code","fc4231cc":"code","883184e8":"code","991dd118":"code","574e4d2f":"code","f7a5d961":"code","f6e122c9":"code","f6354181":"code","acb9205a":"code","2980b3bf":"code","abe80d36":"code","6d0dbde8":"code","6d09ac53":"code","4b4d40db":"code","9ce3eda7":"code","afa21a01":"code","539384d9":"code","a647991a":"code","6f6bbb0a":"code","396e0e81":"code","2aa044cf":"code","2769f782":"markdown","caec771f":"markdown","c0e2ac2f":"markdown","b5292f6d":"markdown","578d3eeb":"markdown","10a0ff0c":"markdown","1006b848":"markdown","513cbf11":"markdown","c527b297":"markdown","359b0106":"markdown"},"source":{"b0410d5c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Visualize\nimport jieba #cut word\nimport xgboost #learning algorithm\nfrom sklearn.model_selection  import train_test_split  #split valid data\nimport shap\n\n\nimport re #compare word\nimport os #file system\nfrom collections import Counter #word frequency check\nimport math\nimport warnings # Disable warnings in Anaconda\nwarnings.filterwarnings(\"ignore\")\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f18eae85":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_train['\u55ae\u50f9(\u5143\/\u5e73\u65b9\u516c\u5c3a)'].sort_values(ascending=False)[:4]","cb6c37f2":"#\u5f8c\u9762\u8655\u7406\u8cc7\u6599\u7684\u9014\u4e2d\u6703\u767c\u73fe\u6709\u5169\u7b46\u8cc7\u6599(13453,67951)\u4ea4\u6613\u571f\u5730\u5efa\u7269\u5927\u5c0f\u70ba0   \u6240\u4ee5\u9019\u908a\u4e00\u958b\u59cb\u5148\u522a\u6389 \u514d\u5f97\u5f8c\u9762\u8655\u7406\u5230\u4e00\u534a\u518d\u522a\u6703\u5f71\u97ff\u4e00\u4e9bindex\u7684\u5224\u65b7\ndf_train.drop(index = [1440,35720,13453,67951],inplace=True)\n#\u91cd\u8a2d\u4e00\u4e0bindex\u4ee5\u514dindex\u6703\u8df3\u52d5\u5f71\u97ff\u4e00\u4e9b\u5f8c\u7e8c\u8655\u7406\ndf_train.reset_index(drop=True)\ndf_train.head(1)","726f5464":"#\u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340  \u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u7de8\u5b9a\u7684\u7a7a\u503c\u5f88\u591a\n#\u6b64\u5916index\u53ea\u662f\u7de8\u865f \u6c92\u6709\u610f\u7fa9  \n#\u5148\u780d\u6389\u9019\u4e09\u500b\n#\u6ce8\u610f\u8eca\u4f4d\u7a7a\u503c\u4ee3\u8868\u7121\u8eca\u4f4d \u610f\u7fa9\u91cd\u5927\u8981\u7559\u8457\ndf_train.drop(['\u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340','\u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u7de8\u5b9a','index'],inplace=True,axis=1)\ndf_test.drop(['\u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340','\u975e\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u7de8\u5b9a','index'],inplace=True,axis=1)","1149bca7":"#\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340\u7a7a\u503c\u5c11\n#\u8003\u91cf\u5230\u7a7a\u503c\u5f88\u5c11 \u800c\u4e14\u6709\u53ef\u80fd\u771f\u7684\u662f\u7279\u6b8a\u5206\u5340 \u6240\u4ee5\u5148\u7528\"\u5176\u4ed6\"\u88dc\u7a7a\u503c\ndf_train['\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340'].fillna('\u5176\u4ed6',inplace=True)\ndf_test['\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340'].fillna('\u5176\u4ed6',inplace=True)","fc4231cc":"material = {}\nfor i in df_train['\u5efa\u7269\u578b\u614b'].unique():\n    material[i] = df_train[df_train['\u5efa\u7269\u578b\u614b']==i]['\u4e3b\u8981\u5efa\u6750'].mode()[0]\ndef fill_material(row,column,the_dict,ref_column):\n    if type(row[column])== float and np.isnan(row[column]):\n        if int(re.findall(r'[0-9]+',row['\u4ea4\u6613\u7b46\u68df\u6578'])[1]) + int(re.findall(r'[0-9]+',row['\u4ea4\u6613\u7b46\u68df\u6578'])[2])==0:\n            return '\u7d14\u571f\u5730'\n        else:\n            return the_dict[row[ref_column]]\n    else:\n        return row[column]\ndf_train['\u4e3b\u8981\u5efa\u6750'] = df_train.apply(fill_material,axis=1,column='\u4e3b\u8981\u5efa\u6750',the_dict=material,ref_column='\u5efa\u7269\u578b\u614b')\ndf_test['\u4e3b\u8981\u5efa\u6750'] = df_test.apply(fill_material,axis=1,column='\u4e3b\u8981\u5efa\u6750',the_dict=material,ref_column='\u5efa\u7269\u578b\u614b')","883184e8":"#\u4e3b\u8981\u7528\u9014\u4e5f\u5148\u4f9d\u7167\u7d14\u571f\u5730\u4f86\u505a\u586b\u7a7a\u503c\u7684\u8655\u7406\nuse = {}\nfor i in df_train['\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340'].unique():\n    use[i] = df_train[df_train['\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340']==i]['\u4e3b\u8981\u7528\u9014'].mode()[0]\ndf_train['\u4e3b\u8981\u7528\u9014'] = df_train.apply(fill_material,axis=1,column='\u4e3b\u8981\u7528\u9014',the_dict=use,ref_column='\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340')\ndf_test['\u4e3b\u8981\u7528\u9014'] = df_test.apply(fill_material,axis=1,column='\u4e3b\u8981\u7528\u9014',the_dict=use,ref_column='\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340')","991dd118":"df_train.drop(['\u4ea4\u6613\u5e74\u6708\u65e5','\u4ea4\u6613\u7b46\u68df\u6578','\u5099\u8a3b','\u571f\u5730\u5340\u6bb5\u4f4d\u7f6e\/\u5efa\u7269\u5340\u6bb5\u9580\u724c','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u5ef3','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u623f','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u885b','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u9694\u9593','\u79fb\u8f49\u5c64\u6b21','\u7de8\u865f','\u5efa\u7bc9\u5b8c\u6210\u5e74\u6708','\u7e3d\u6a13\u5c64\u6578','\u8eca\u4f4d\u79fb\u8f49\u7e3d\u9762\u7a4d(\u5e73\u65b9\u516c\u5c3a)','\u8eca\u4f4d\u7e3d\u50f9(\u5143)','\u6709\u7121\u7ba1\u7406\u7d44\u7e54'],axis=1,inplace=True)\ndf_test.drop(['\u4ea4\u6613\u5e74\u6708\u65e5','\u4ea4\u6613\u7b46\u68df\u6578','\u5099\u8a3b','\u571f\u5730\u5340\u6bb5\u4f4d\u7f6e\/\u5efa\u7269\u5340\u6bb5\u9580\u724c','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u5ef3','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u623f','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u885b','\u5efa\u7269\u73fe\u6cc1\u683c\u5c40-\u9694\u9593','\u79fb\u8f49\u5c64\u6b21','\u7de8\u865f','\u5efa\u7bc9\u5b8c\u6210\u5e74\u6708','\u7e3d\u6a13\u5c64\u6578','\u8eca\u4f4d\u79fb\u8f49\u7e3d\u9762\u7a4d(\u5e73\u65b9\u516c\u5c3a)','\u8eca\u4f4d\u7e3d\u50f9(\u5143)','\u6709\u7121\u7ba1\u7406\u7d44\u7e54'],axis=1,inplace=True)","574e4d2f":"rename_dict = {'\u4e3b\u8981\u5efa\u6750':'main_mat',\n'\u4e3b\u8981\u7528\u9014':'main_use',\n'\u4ea4\u6613\u6a19\u7684':'trade_tar',\n'\u5efa\u7269\u578b\u614b':'build_type',\n'\u8eca\u4f4d\u985e\u5225':'car_cat',\n'\u90fd\u5e02\u571f\u5730\u4f7f\u7528\u5206\u5340':'city_class',\n'\u9109\u93ae\u5e02\u5340':'dist',\n'\u571f\u5730\u79fb\u8f49\u7e3d\u9762\u7a4d(\u5e73\u65b9\u516c\u5c3a)':'land(m2)',\n'\u5efa\u7269\u79fb\u8f49\u7e3d\u9762\u7a4d(\u5e73\u65b9\u516c\u5c3a)':'build(m2)',\n'\u7e3d\u50f9(\u5143)':'total_price',\n'\u55ae\u50f9(\u5143\/\u5e73\u65b9\u516c\u5c3a)':'price_per_ping'}","f7a5d961":"df_train.dropna(inplace=True)\ndf_train.rename(rename_dict,axis=1,inplace=True)\ndf_test.rename(rename_dict,axis=1,inplace=True)\ndf_train.info()","f6e122c9":"df_train['effective_m2'] = df_train.apply(lambda row:row['land(m2)'] if row['build(m2)']==0 else row['build(m2)'],axis=1)\ndf_test['effective_m2'] = df_test.apply(lambda row:row['land(m2)'] if row['build(m2)']==0 else row['build(m2)'],axis=1)","f6354181":"df_train.drop(['income_avg','income_var','low_use_electricity','num_of_bus_stations_in_100m','nearest_tarin_station','nearest_tarin_station_distance','lat','lng','location_type','dist','city_class','car_cat','land(m2)','build(m2)','main_mat','main_use','trade_tar','build_type'],axis=1,inplace=True)\ndf_test.drop(['income_avg','income_var','low_use_electricity','num_of_bus_stations_in_100m','nearest_tarin_station','nearest_tarin_station_distance','lat','lng','location_type','dist','city_class','car_cat','land(m2)','build(m2)','main_mat','main_use','trade_tar','build_type'],axis=1,inplace=True)","acb9205a":"df_train.shape,df_test.shape","2980b3bf":"df_train.info()","abe80d36":"df_train.reset_index(drop=True)\ndf_train.shape,df_test.shape","6d0dbde8":"X_train=df_train.drop('price_per_ping',axis=1)\nAll = X_train.append(df_test).reset_index(drop=True)","6d09ac53":"X = All[:-1500]\nX_test = All[-1500:]\nY = df_train['price_per_ping']","4b4d40db":"X_train, X_valid, Y_train, Y_valid = train_test_split(X, Y, test_size =0.1, random_state=2021)","9ce3eda7":"X_train.shape,X_valid.shape,Y_train.shape,Y_valid.shape","afa21a01":"X_test.shape","539384d9":"eta_list = [0.04,0.05,0.06,0.07]\nmax_depth = [6,7,8]\nnum_boost = [10000]\ntest = []\nfor eta in eta_list:\n    for depth in max_depth:\n        for boost in num_boost:\n            test.append([eta,depth,boost])","a647991a":"runout = []\nfor t in test:\n    params = {}\n    # Set our parameters for xgboost\n    #=============your works starts===============#\n    params['objective'] = 'reg:linear'\n    params['eval_metric'] = 'rmse'\n    params['eta'] = t[0]\n    params['max_depth'] = t[1]\n    params['seed'] = 2021\n    #==============your works ends================#\n\n    d_train = xgboost.DMatrix(X_train, label=Y_train)\n    d_valid = xgboost.DMatrix(X_valid, label=Y_valid)\n    watchlist = [(d_train, 'train'), (d_valid, 'valid')]\n    bst = xgboost.train(params, d_train, t[2] ,watchlist, early_stopping_rounds=100, verbose_eval=100)\n\n    y_pred = bst.predict(xgboost.DMatrix(X_valid),ntree_limit=bst.best_iteration)\n    score = round(np.sqrt(np.sum((Y_valid - y_pred)**2)\/Y_valid.shape[0]),2)\n    runout.append((params,t[2],score))\n    print(params,'\\n','Accuracy:',str(score))","6f6bbb0a":"result = pd.DataFrame(runout,columns=['Param','num_of_boost','RMSE'])\nparams = result.sort_values(by='RMSE')[:1].Param.values[0]\nd_train = xgboost.DMatrix(X_train,label=Y_train)\nd_valid = xgboost.DMatrix(X_valid, label=Y_valid)\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\nbst = xgboost.train(params, d_train, test[0][2], watchlist, early_stopping_rounds=100, verbose_eval=50)\n\ny_V = bst.predict(xgboost.DMatrix(X_valid),ntree_limit=bst.best_iteration)\nscore = round(np.sqrt(np.sum((Y_valid - y_V)**2)\/Y_valid.shape[0]),2)\nprint(params,'\\n','Accuracy:',str(score))\ny_pred = bst.predict(xgboost.DMatrix(X_test),ntree_limit=bst.best_iteration)","396e0e81":"# train an XGBoost model\nX= X_valid\ny= Y_valid.values\n# explain the model's predictions using SHAP\n# (same syntax works for LightGBM, CatBoost, scikit-learn, transformers, Spark, etc.)\nshap_values = shap.TreeExplainer(bst).shap_values(X)\n\nshap.summary_plot(shap_values, X, plot_type=\"bar\")\n","2aa044cf":"df_sub = pd.read_csv(\"..\/input\/submission.csv\")\ndf_sub['price_per_ping'] = y_pred\ndf_sub.to_csv(\"submission_new.csv\", index=False)","2769f782":"### \u5f88\u660e\u986f1440\u8ddf35720\u4e0d\u5408\u7406 \u76f4\u63a5\u780d\u6389 \u4ee5\u514d\u5e72\u64fe\u5f8c\u7e8c\u8655\u7406\u904e\u5206\u805a\u7126\u5728\u9019\u88e1","caec771f":"### \u6578\u503c\u4e0d\u7ba1\u600e\u6a23\u5148\u9664\u5b83\u5011\u7684\u6a19\u6e96\u5dee\u518d\u8aaa","c0e2ac2f":"### \u4ee5\u4e0b\u9019\u500b\u5716\u53ea\u662f\u88dd\u731b\u756b\u4e00\u4e0b \u4f46\u770b\u4e86\u5716\u767c\u73fe\u5176\u5be6\u53ef\u4ee5\u628a\u4e00\u5806\u9805\u76ee\u90fd\u53bb\u6389 \u7559\u67d0\u4e00\u9805\u5c31\u597d(\u8070\u660e\u7684\u5927\u5bb6\u61c9\u8a72\u90fd\u6709\u767c\u73fe\u5427?)","b5292f6d":"### \u628a\u4e00\u5806\u89ba\u5f97\u7528\u4e0d\u6389\u7684\u9805\u76ee\u5148\u53bb\u6389","578d3eeb":"### \u62ff\u5230\u8cc7\u6599\u7b2c\u4e00\u4ef6\u4e8b\u60c5\u5148\u628a\u623f\u50f9\u8cc7\u6599\u88e1\u9762\u6700\u96e2\u7fa4\u7684\u5e7e\u7b46\u780d\u6389(\u81ea\u7531\u5fc3\u8b49)","10a0ff0c":"### \u4ee5\u4e0b\u958b\u59cbxgb\u4e82\u6539\u53c3\u6578\u8abf\u6574\n### \u9019\u908a\u76f4\u63a5\u4f5c\u5f0a\u62ff\u81ea\u5df1\u6e2c\u8a66\u6bd4\u8f03\u597d\u7684\u53c3\u6578\u4f86\u7528","1006b848":"### \u628a\u9084\u7559\u8457\u7684\u6b04\u4f4d \u5206\u6210\u6578\u503c\u578b \u9084\u6709\u985e\u5225\u578b","513cbf11":"### \u985e\u5225\u5168\u90e8onehot encode","c527b297":"### \u63a5\u8457\u8655\u7406\u5340\u6bb5\n\u56e0\u70ba\u6211\u5011\u53ea\u5728\u610f\u5230\u5e95\u662f\u5728\u54ea\u689d\u8def (\u5efa\u7269)<br>\n\u6216\u662f\u54ea\u500b\u5730\u6bb5(\u571f\u5730)<br>\n\u6240\u4ee5\u628a\u524d\u9762\u7684\u5e02\u5340\u91cc\u90fd\u53bb\u6389<br>\n\u5f8c\u9762\u7684\u5df7\u5f04\u592a\u7463\u788e \u5148\u53bb\u6389","359b0106":"### \u6211\u5011\u767c\u73fe\u5927\u90e8\u5206\u5efa\u6750\u7684\u7a7a\u503c\u90fd\u4f86\u81ea\u65bc\u7d14\u571f\u5730\u4ea4\u6613 \n### \u6240\u4ee5\u5148\u628a\u4ea4\u6613\u7269\u4ef6\u6c92\u6709\u5efa\u7269,\u8eca\u4f4d\u4ea4\u6613\u7684 \u90fd\u88dc\u4e0a\u7d14\u571f\u5730\n### \u5269\u4e0b\u4e00\u4e9b\u6c92\u88dc\u5230\u7684 \u6211\u5011\u5047\u8a2d\u5efa\u6750\u6703\u8ddf\u5efa\u7269\u7684\u578b\u614b\u6709\u95dc(\u6bd4\u65b9\u8aaa\u5927\u5ec8\u9069\u5408\u6df7\u51dd\u571f  \u900f\u5929\u9069\u5408\u78da\u9020\u4e4b\u985e\u7684)\n### \u76f4\u63a5\u7528\u5efa\u7269\u578b\u614b\u88e1\u9762\u6700\u591a\u7684\u5efa\u6750\u4f86\u88dc\n"}}