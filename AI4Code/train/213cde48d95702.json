{"cell_type":{"d6dcb343":"code","c25e0dff":"code","5e399eac":"code","f1d6b4f4":"code","29a9b08e":"code","63533650":"code","fc5a78ce":"code","49c7ef66":"code","2ccaee19":"code","8d7c2196":"code","3a4274f4":"code","ee8448af":"code","504654b7":"code","a4caf2d1":"code","b13fb23b":"code","b345cc52":"code","b02e88a1":"code","33443815":"markdown","ab27b7a2":"markdown","a526ca7f":"markdown","04ecb658":"markdown","b1e422c3":"markdown","594714e8":"markdown","34f34dba":"markdown","b9ae439e":"markdown","714ceda0":"markdown","05245d53":"markdown","65196a34":"markdown","85324d80":"markdown","a7ba205a":"markdown","9bd9c67a":"markdown","55f056af":"markdown"},"source":{"d6dcb343":"# K\u00fct\u00fcphaneler import ediliyor..\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport os","c25e0dff":"# Veriseti al\u0131nd\u0131..\nprint(os.listdir(\"..\/input\"))\ndata = pd.read_csv('..\/input\/column_2C_weka.csv')","5e399eac":"# Verisetinin i\u00e7eri\u011finden k\u00fc\u00e7\u00fck bir k\u0131s\u0131m a\u015fa\u011f\u0131da g\u00f6r\u00fclmektedir.\ndata.head()","f1d6b4f4":"data.info()","29a9b08e":"data.describe()\n","63533650":"#%% Veri say\u0131sal olarak ifade ediliyor.\n\ndata.loc[:,'class'] = [1 if each == 'Normal' else 0 for each in data.loc[:,'class'] ]\nLabels = data.loc[:,'class']\n\nx = data.drop([\"class\"],axis = 1)\n","fc5a78ce":"#%% Normalizasyon..\nx_norm = (x - np.min(x))\/(np.max(x) - np.min(x))\n\nprint(\"NORMAL\u0130ZASYON \u0130\u015eLEM\u0130 \u00d6NCES\u0130:\",\n      \"\\nMin :\")\nprint(np.min(x))\nprint(\"\\nMax :\")\nprint(np.max(x))\n\n\nprint(\"\\n\\nNORMAL\u0130ZASYON \u0130\u015eLEM\u0130 SONRASI:\",\n      \"\\nMin :\")\nprint(np.min(x_norm))\nprint(\"\\nMax :\")\nprint(np.max(x_norm))","49c7ef66":"#%% Veri E\u011fitim ve Test verisi olarak ayr\u0131ld\u0131..\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_norm, Labels, test_size = 0.3, random_state = 1)\n","2ccaee19":"# Daha sonra s\u0131n\u0131fland\u0131r\u0131c\u0131lar\u0131 kar\u015f\u0131la\u015ftr\u0131rken kullan\u0131lacak score de\u011ferlerini tutmas\u0131 i\u00e7in liste olu\u015fturuldu.\nSCORES = []","8d7c2196":"#%% KNN Modeli\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\n\nprint(\"Accuracy of KNN algorithm: \",knn.score(x_test, y_test))\n","3a4274f4":"# Uygun k de\u011ferinin se\u00e7ilmesi\nscore_list = []\nfor each in range(1,30):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train, y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1, 30), score_list)\nplt.xlabel(\"k value\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy - k Value Relationship\")\nplt.show()\n\nprint(\"Max. Accurancy is \",np.max(score_list),\"\\nk value is :\", score_list.index(np.max(score_list)))\nSCORES.append([\"KNN\",np.max(score_list)])","ee8448af":"# %% Naive bayes \nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\n \n# test\nacc_nb = nb.score(x_test,y_test)\nprint(\"Accuracy of Naive Bayes algorithm: \",acc_nb)\nSCORES.append([\"NB\",acc_nb])\n","504654b7":"# %% SVM\n \nfrom sklearn.svm import SVC\n \nsvm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\n \n#  test\nacc_svm = svm.score(x_test,y_test)\nprint(\"Accuracy of SVM algorithm: \",acc_svm)\nSCORES.append([\"SVM\",acc_svm])\n ","a4caf2d1":"#%% Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nacc_dt = dt.score(x_test,y_test)\nprint(\"Accuracy of Decision Tree algorithm: \",acc_dt ) \nSCORES.append([\"DT\",acc_dt])","b13fb23b":"#%%  random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\n\nacc_rf = rf.score(x_test,y_test)\nprint(\"Accuracy of Random Forest algorithm: \",acc_rf)\nSCORES.append([\"RF\",acc_rf])","b345cc52":"#%% Logistic Regression \nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\n\nacc_lr = lr.score(x_test,y_test)\nprint(\"Accuracy of Logistic Regression algorithm: \",acc_lr)\nSCORES.append([\"LReg.\",acc_lr])","b02e88a1":"# S\u0131n\u0131fland\u0131r\u0131c\u0131lar\u0131n Performanslar\u0131na bak\u0131ld\u0131\u011f\u0131nda SVM'in en y\u00fcksek ba\u015far\u0131ya sahip oldu\u011funu\n# g\u00f6r\u00fcyoruz.Decision Tree ise en d\u00fc\u015f\u00fck ba\u015far\u0131ya sahiptir.\nSCORES = np.array(SCORES)\nSCORES.sort(axis=0)\n\nr,c = SCORES.shape\nfor idx in range(0, r):\n    SCORES[idx,1] = '{:.5s}'.format(SCORES[idx,1])\n\nplt.plot(SCORES[:,0],SCORES[:,1])\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy - Classifiers Relationship\")\nplt.show()\n","33443815":"**ADIM 9: SVM Modelinin Kurulmas\u0131 Ve Test Edilmesi**","ab27b7a2":"**ADIM 7:  KNN Modelinin Kurulmas\u0131 Ve Test Edilmesi.**","a526ca7f":"**ADIM 5: Normalizasyon \u0130\u015flemi.**","04ecb658":"**ADIM 2: Verisetinin Al\u0131nmas\u0131.**","b1e422c3":"**ADIM 13: Performanslar\u0131n Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131.**","594714e8":"**ADIM 8: Naive Bayes Modelinin Kurulmas\u0131 Ve Test Edilmesi**","34f34dba":"**ADIM 10: Decision Tree Modelinin Kurulmas\u0131 Ve Test Edilmesi**","b9ae439e":"**ADIM 6: Verinin E\u011fitim ve Test Verisi Olarak Ayr\u0131lmas\u0131.**","714ceda0":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e5\/KNN_detec.JPG)\n***Kaynak : https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e5\/KNN_detec.JPG***\n\nK-Nearest Neighbors (K-En Yak\u0131n Kom\u015fu) algoritmas\u0131 \u015fu \u015fekilde i\u015fler;\n* Test noktas\u0131 se\u00e7ilir.\n* Di\u011fer t\u00fcm noktalar i\u00e7in test noktas\u0131na olan uzakl\u0131klar hesaplan\u0131r.\n* En yak\u0131n \"K\" tane nokta bulunur.\n* Bu \"K\" tane noktan\u0131n etiketine bak\u0131larak test noktas\u0131 s\u0131n\u0131fland\u0131r\u0131l\u0131r. \u00d6rne\u011fin yukar\u0131daki resimde k=3't\u00fcr ve bu 3 kom\u015funun 2 tanesi ikinci s\u0131n\u0131fa, 1 tanesi birici s\u0131n\u0131fa aittir. Dolay\u0131s\u0131yla test noktas\u0131 i\u00e7in \"ikinci s\u0131n\u0131fa aittir\" diyebiliriz.","05245d53":"**ADIM 12: Logistic Regression Modelinin Kurulmas\u0131 Ve Test Edilmesi.**","65196a34":"**ADIM 1: K\u00fct\u00fcphanelerin \u0130mport Edilmesi.**","85324d80":" # **G\u0130R\u0130\u015e**\n\n*Bu \u00e7al\u0131\u015fmada \"Biomechanical features of orthopedic patients\" veriseti kullan\u0131larak Logistic Regression, KNN, SVM,Naive Bayes, Decision Tree ve  Random Forest s\u0131n\u0131fland\u0131r\u0131c\u0131lar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.*\n\nS\u0131ras\u0131yla \u015fu ad\u0131mlar izlenmi\u015ftir;\n* K\u00fct\u00fcphanelerin \u0130mport Edilmesi.\n* Verisetinin Al\u0131nmas\u0131.\n* Verisetinin \u0130ncelenmesi.\n* Veri \u0130\u00e7erisinden \u00d6zellikler \u0130le Etiketlerin \u00c7\u0131kart\u0131lmas\u0131 Ve Etiketlerin \u0130nteger De\u011fer Olarak Belirtilmesi.\n* Normalizasyon \u0130\u015flemi.\n* Verinin E\u011fitim Ve Test Verisi Olarak Ayr\u0131lmas\u0131.\n* KNN Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* Naive Bayes Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* SVM Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* Decision Tree Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* Random Forest Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* Logistic Regression Modelinin Kurulmas\u0131 Ve Test Edilmesi.\n* Performanslar\u0131n Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131.","a7ba205a":"**ADIM 11: Random Forest Modelinin Kurulmas\u0131 Ve Test Edilmesi.**","9bd9c67a":"**ADIM 4:  Veri \u0130\u00e7erisinden \u00d6zellikler \u0130le Etiketlerin \u00c7\u0131kart\u0131lmas\u0131 Ve Etiketlerin \u0130nteger De\u011fer Olarak Belirtilmesi.**","55f056af":"**ADIM 3: Verisetinin \u0130ncelenmesi. **"}}