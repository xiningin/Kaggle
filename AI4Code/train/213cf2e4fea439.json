{"cell_type":{"2447fbfd":"code","b23dca18":"code","356e5627":"code","85d061a0":"code","38fcc572":"code","ff7205f0":"code","53182aa8":"code","9a31c2c8":"code","9624e16a":"code","2b5b89f4":"code","8560b15b":"code","28bc413a":"code","c5ca22d3":"markdown","6f05f77d":"markdown","fb7a1715":"markdown","9c751ef2":"markdown","eb314317":"markdown","2da0e431":"markdown","93b06357":"markdown","2cc5cca3":"markdown","b3ea12ba":"markdown","50eb561f":"markdown","7a536368":"markdown","2440a0b3":"markdown","fae60add":"markdown","fe8b252e":"markdown","6115839e":"markdown","4de7a72b":"markdown","606bc3f8":"markdown","fa1d6a38":"markdown","9a9d7391":"markdown"},"source":{"2447fbfd":"# import of needed libraries\n\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npd.options.display.max_columns = 300\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b23dca18":"# let's see what our data set look like\n\ndf_solar_co = pd.read_csv(\"..\/input\/30-years-of-european-solar-generation\/EMHIRESPV_TSh_CF_Country_19862015.csv\")\ndf_solar_co.head(2)","356e5627":"df_solar_co.columns","85d061a0":"country_dict = {\n'AT': 'Austria',\n'BE': 'Belgium',\n'BG': 'Bulgaria',\n'CH': 'Switzerland',\n'CY': 'Cyprus',\n'CZ': 'Czech Republic',\n'DE': 'Germany',\n'DK': 'Denmark',\n'EE': 'Estonia',\n'ES': 'Spain',\n'FI': 'Finland',\n'FR': 'France',\n'EL': 'Greece',\n'UK': 'United Kingdom',\n'HU': 'Hungary',\n'HR': 'Croatia',\n'IE': 'Ireland',\n'IT': 'Italy',\n'LT': 'Lithuania',\n'LU': 'Luxembourg',\n'LV': 'Latvia',\n'NO': 'Norway',\n'NL': 'Netherlands',\n'PL': 'Poland',\n'PT': 'Portugal',\n'RO': 'Romania',\n'SE': 'Sweden',\n'SI': 'Slovenia',\n'SK': 'Slovakia'\n    }","38fcc572":"df_solar_co.shape","ff7205f0":"df_solar_nu = pd.read_csv(\"..\/input\/30-years-of-european-solar-generation\/EMHIRES_PVGIS_TSh_CF_n2_19862015.csv\")\ndf_solar_nu = df_solar_nu.drop(columns=['time_step'])\ndf_solar_nu.tail(2)","53182aa8":"df_solar_nu.shape","9a31c2c8":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score","9624e16a":"df_solar_transposed = df_solar_nu[-24*365:].T\ndf_solar_transposed.tail(2)","2b5b89f4":"def plot_elbow_scores(df_, cluster_nb):\n    km_inertias, km_scores = [], []\n\n    for k in range(2, cluster_nb):\n        km = KMeans(n_clusters=k).fit(df_)\n        km_inertias.append(km.inertia_)\n        km_scores.append(silhouette_score(df_, km.labels_))\n\n    sns.lineplot(range(2, cluster_nb), km_inertias)\n    plt.title('elbow graph \/ inertia depending on k')\n    plt.show()\n\n    sns.lineplot(range(2, cluster_nb), km_scores)\n    plt.title('scores depending on k')\n    plt.show()\n    \nplot_elbow_scores(df_solar_transposed, 20)","8560b15b":"df_solar_transposed = df_solar_co[-24*365*10:].T\nplot_elbow_scores(df_solar_transposed, 20)","28bc413a":"X = df_solar_transposed\n\nkm = KMeans(n_clusters=6).fit(X)\nX['label'] = km.labels_\nprint(\"Cluster nb \/ Nb of countries in the cluster\", X.label.value_counts())\n\nprint(\"\\nCountries grouped by cluster\")\nfor k in range(6):\n    print(f'\\ncluster nb {k} : ', \" \".join([country_dict[c] + f' ({c}),' for c in list(X[X.label == k].index)]))","c5ca22d3":"Let's do exactly the same thing but this same at the country level :","6f05f77d":"---\n# Conclusions\n\nIn this first part, we've managed to make cluster of countries \/ regions with similar profiles when it comes to solar generation. This can be convenient when, in the second part, we'll analyze in depth the data for one country representative of each cluster instead of 30.\n\nReferences :\n- [the European Commission's STETIS program](https:\/\/setis.ec.europa.eu\/about-setis)\n- [Hands-On Unsupervised Learning Using Python](https:\/\/www.oreilly.com\/library\/view\/hands-on-unsupervised-learning\/9781492035633\/)\n- [Towards Data Science](https:\/\/towardsdatascience.com\/k-means-clustering-from-a-to-z-f6242a314e9a)","fb7a1715":"__Description of the data set__\n\nThis dataset contains hourly estimates of an area's energy potential for 1986-2015 as a percentage of a power plant's maximum output.\n\nThe overall scope of EMHIRES is to allow users to assess the impact of meteorological and climate variability on the generation of solar power in Europe and not to mime the actual evolution of solar power production in the latest decades. For this reason, the hourly solar power generation time series are released for meteorological conditions of the years 1986-2015 (30 years) without considering any changes in the solar installed capacity. Thus, the installed capacity considered is fixed as the one installed at the end of 2015. For this reason, data from EMHIRES should not be compared with actual power generation data other than referring to the reference year 2015.\n\n__Content__\n- The data is available at both the national level and the [NUTS 2 level](https:\/\/en.wikipedia.org\/wiki\/Nomenclature_of_Territorial_Units_for_Statistics). The NUTS 2 system divides the EU into 276 statistical units.\n- Please see the manual for the technical details of how these estimates were generated.\n- This product is intended for policy analysis over a wide area and is not the best for estimating the output from a single system. Please don't use it commercially.\n\n__Acknowledgements__\n\nThis dataset was kindly made available by [the European Commission's STETIS program](https:\/\/setis.ec.europa.eu\/about-setis). You can find the original dataset here.\n\n__Goal of this 1st step__\n\nThis is the first part of three. Here we're going to study solar generation on a country level in order to make cluster of country which present the same profile so that each group can be investigate in more details later.","9c751ef2":"---","eb314317":"## On the country level","2da0e431":"# Groups of countries or regions with similar profiles","93b06357":"If needed, here is a dictionnary in python that can help us to make the conversion between the 2 letters and the real name of each country : ","2cc5cca3":"How many columns and lines of records do we have :","b3ea12ba":"The best nb k of clusters seems to be 7 even if there isn't any real elbow on the 1st plot.","50eb561f":"# Solar energy generation per country - clustering - part 1-3\n\n---","7a536368":"Each column represent a country, we can list them easily :","2440a0b3":"Then, let's take a look at the data set at the NUTS 2 level system :","fae60add":"First let's start with the data set for each country :","fe8b252e":"Finally, we can keep the optimal number k of clusters, and retrieve infos on each group such as number of countries, and names of those countries :","6115839e":"## On the NUTS 2 level","4de7a72b":"## Clustering with the KMean model ","606bc3f8":"Let's keep the records of one year and tranpose the dataset, because we need to have one line per region.","fa1d6a38":"The objective of clustering is to identify distinct groups in a dataset such that the observations within a group are similar to each other but different from observations in other groups. In k-means clustering, we specify the number of desired clusters k, and the algorithm will assign each observation to exactly one of these k clusters. The algorithm optimizes the groups by minimizing the within-cluster variation (also known as inertia) such that the sum of the within-cluster variations across all k clusters is as small as possible. \n\nDifferent runs of k-means will result in slightly different cluster assignments because k-means randomly assigns each observation to one of the k clusters to kick off the clustering process. k-means does this random initialization to speed up the clustering process. After this random initialization, k-means reassigns the observations to different clusters as it attempts to minimize the Euclidean distance between each observation and its cluster\u2019s center point, or centroid. This random initialization is a source of randomness, resulting in slightly different clustering assignments, from one k-means run to another. \n\nTypically, the k-means algorithm does several runs and chooses the run that has the best separation, defined as the lowest total sum of within-cluster variations across all k clusters. \n\nReference : [Hands-On Unsupervised Learning Using Python](https:\/\/www.oreilly.com\/library\/view\/hands-on-unsupervised-learning\/9781492035633\/)\n\n## Evaluating the cluster quality\n\nThe goal here isn\u2019t just to make clusters, but to make good, meaningful clusters. Quality clustering is when the datapoints within a cluster are close together, and afar from other clusters.\nThe two methods to measure the cluster quality are described below:\n- Inertia: Intuitively, inertia tells how far away the points within a cluster are. Therefore, a small of inertia is aimed for. The range of inertia\u2019s value starts from zero and goes up.\n- Silhouette score: Silhouette score tells how far away the datapoints in one cluster are, from the datapoints in another cluster. The range of silhouette score is from -1 to 1. Score should be closer to 1 than -1.\n\nReference : [Towards Data Science](https:\/\/towardsdatascience.com\/k-means-clustering-from-a-to-z-f6242a314e9a)\n\n__Optimal K: the elbow method__\n\nHow many clusters would you choose ?\n\nA common, empirical method, is the elbow method. You plot the mean distance of every point toward its cluster center, as a function of the number of clusters. Sometimes the plot has an arm shape, and the elbow would be the optimal K.","9a9d7391":"The best nb k of clusters seems to be 6 even if there isn't any real elbow on the 1st plot."}}