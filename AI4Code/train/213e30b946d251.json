{"cell_type":{"9fc5f041":"code","e385251f":"code","47ceb84d":"code","a7424ced":"code","154b37b2":"code","6552c80f":"code","9193ff4b":"code","a1bd17bc":"code","e7275048":"code","28417789":"code","ca075cb4":"code","d287f25c":"code","beb64036":"code","6fa0d3b9":"code","275475c8":"code","22ae5e3d":"code","4279f29d":"code","19b5d778":"code","ddb930cf":"code","2ac8274c":"code","cddd08ff":"code","096ee77b":"code","d0243c79":"code","40419634":"code","1cac63cf":"code","63da3eac":"code","814e56c5":"code","3e7c3fb5":"code","1456c773":"code","ae968889":"code","291e98af":"code","6faf8b89":"code","9440db71":"code","0f58c52a":"code","55ca1d0b":"code","4105c349":"code","339b497b":"code","a47f66e2":"code","68586133":"code","a21e64e8":"code","42e5a072":"code","64bc2c1d":"code","3e9281b8":"code","5f82d108":"code","5e99080c":"code","278a9da1":"code","0b5b4234":"code","84411178":"code","c1d65170":"code","4fe09a58":"code","24a37196":"code","eff25010":"code","2f729b16":"code","6e7b2160":"code","7a31d028":"code","c8790420":"code","a0670df9":"code","a7dd4afb":"code","a0b28a55":"code","ac68ee2c":"code","1f515558":"code","ca7c81d7":"code","79312ec3":"code","558086e1":"code","dc64ae97":"code","0bc7e0c0":"code","4e3cc808":"code","7dffb299":"code","61be49af":"code","85163bc0":"code","78cc5e4d":"code","53570f72":"code","29f744b4":"code","94a10987":"code","ed9708c4":"code","c962d79f":"code","c8461a81":"code","505d9450":"code","c62a8827":"code","41f3964d":"code","ce97e40d":"code","40571225":"code","e352ea92":"code","197ee005":"code","5a8685fc":"code","02cb49f4":"code","9d634d63":"code","7576d3f4":"code","f56cf2f7":"code","26e583b2":"code","31e3cec7":"code","f033ac6c":"code","69ab73f7":"code","d4b8fc19":"code","115b0ad2":"code","f1ccdb30":"code","36270c61":"code","d0be8dc0":"code","6c7faa26":"code","dcc95194":"code","fd313d88":"code","f3d9a882":"code","64717d73":"code","7dc0aee3":"code","8af89f4a":"code","929c84d0":"code","7ee7f377":"code","9380b4a3":"code","3c61d426":"code","d1fe4a69":"code","54887352":"code","bc4825b2":"code","cd3cf209":"code","8149bb16":"code","6dcc1958":"code","8dd88f4c":"code","a6ba5303":"code","a94fdabd":"code","781e0062":"code","ad0ecc81":"code","e4f38397":"code","cf98ec00":"code","c690d368":"code","fba52562":"code","ff199f01":"code","38c4f79d":"code","2f5ad98b":"code","883006a9":"code","08d6d9e4":"code","c05b3f75":"code","db6c8522":"code","da474f7d":"code","6eb84f3f":"code","0c3a1628":"code","339cc618":"code","6a2aeecd":"code","036d1102":"code","3711a543":"code","0a146436":"code","69fcdf1c":"code","b977880a":"code","c3aae6f1":"code","96603f84":"code","d1600977":"code","7daf4e7f":"code","7fcb1c3b":"code","a6ef4026":"code","36a6c0ef":"code","46b271a5":"code","fc597140":"code","fdcc23b6":"code","95a44b15":"code","51bfaaee":"code","5035f688":"code","5aaa10e7":"code","35bdcf2e":"code","ee236796":"code","0882f6a0":"code","1fc1723f":"code","8f692f36":"code","1e88ddbb":"code","d5b3d1fe":"code","b4361013":"code","8168b965":"code","9cbff3dd":"code","bcbe704e":"code","842f0434":"code","3591cb09":"code","f15190b0":"code","900aecf4":"markdown","37e2fd21":"markdown","89c0eda8":"markdown","19e7490e":"markdown","937580a8":"markdown","bd74a21e":"markdown","a07d4687":"markdown","fafd11fc":"markdown","102e6a22":"markdown","11e9dc18":"markdown","75ab417d":"markdown","e712c5ec":"markdown","00a0a403":"markdown","1f9e1f96":"markdown","d662a237":"markdown","42a03ea1":"markdown","f9072e10":"markdown","d0bbd9ff":"markdown","df94451a":"markdown","dce092ec":"markdown","90ca20f2":"markdown","15b72070":"markdown","bf5593eb":"markdown","04b9ff53":"markdown","73bb4137":"markdown","3e06db4c":"markdown","50eddb3b":"markdown","444bf3b7":"markdown","72d3aa2d":"markdown","fea0746b":"markdown","82c61aa9":"markdown","2c3aeeb5":"markdown","99dfeef4":"markdown","b513ed7f":"markdown","990b0d2a":"markdown","3c109d25":"markdown","626eaf03":"markdown","66aca70e":"markdown","3b654769":"markdown","5af4c788":"markdown","90625189":"markdown","e37dfe62":"markdown","ef2d57fc":"markdown","d4125d6b":"markdown","2834afe4":"markdown","1fc0950e":"markdown","5692069e":"markdown","4f76b5a8":"markdown","077d3391":"markdown","48441155":"markdown","9cd5333a":"markdown","f2b7b928":"markdown","ceb5f47b":"markdown","f1b06d4c":"markdown","045cfc23":"markdown","2f4bbf91":"markdown","5655b53e":"markdown","26769111":"markdown","c3096d68":"markdown","0d391221":"markdown","fb894065":"markdown","7b67231a":"markdown","18be703b":"markdown","d35ea48e":"markdown","0499c206":"markdown","f5cc1c5f":"markdown","a65a245e":"markdown","038cf4fc":"markdown","43ecedf6":"markdown","6cd2235b":"markdown","780b2caa":"markdown","a9ccc2bd":"markdown","86112638":"markdown"},"source":{"9fc5f041":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport nltk\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.base import TransformerMixin\nimport catboost as cb\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom ast import literal_eval\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import median_absolute_error\n\npd.options.display.max_columns = 100\npx.defaults.template = \"plotly_white\"\npx.defaults.width = 600\npx.defaults.height = 350","e385251f":"class DataFrameImputer(TransformerMixin):\n\n    def __init__(self):\n        \"\"\"Impute missing values.\n\n        Columns of dtype object are imputed with the most frequent value \n        in column.\n\n        Columns of other types are imputed with mean of column.\n\n        \"\"\"\n    def fit(self, X, y=None):\n\n        self.fill = pd.Series([X[c].value_counts().index[0]\n            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X],\n            index=X.columns)\n\n        return self\n\n    def transform(self, X, y=None):\n        return X.fillna(self.fill)\n    \ndef remove_suffix(df, column_name):\n    df[column_name] = df[column_name].str.split(\" \",expand=True)[0].values.astype(float)\n    \ndef split_xy(X,y):\n    X_train, X_test, y_train, y_test = train_test_split(X.to_numpy(), y.to_numpy(), train_size=0.75, random_state=42)\n\n    X_train = X_train.reshape(-1, 1)\n    X_test = X_test.reshape(-1, 1)\n    y_train = y_train.reshape(-1, 1)\n    y_test = y_test.reshape(-1, 1)\n    \n    return X_train, X_test, y_train, y_test\n\n\ndef cvMeanAndLR(X,y):\n    model = LinearRegression()\n    meanModel = DummyRegressor(strategy=\"mean\")\n\n    cv_results = cross_validate(meanModel, X, y, cv=10, scoring=('r2', 'neg_mean_absolute_error'))\n    print(\"Mean model results:\")\n    print(np.mean(cv_results['test_r2']))\n    print(-np.mean(cv_results['test_neg_mean_absolute_error']))\n\n\n    cv_results = cross_validate(model, X, y, cv=10, scoring=('r2', 'neg_mean_absolute_error'))\n    print(\"\\nModel results:\")\n    print(np.mean(cv_results['test_r2']))\n    print(-np.mean(cv_results['test_neg_mean_absolute_error']))","47ceb84d":"# 1 million cars sample\ndf = pd.read_csv('\/kaggle\/input\/1milcars\/1mCars.csv', index_col=0, low_memory=False)\ndf = df[df.is_new == False]","a7424ced":"df.head(2)","154b37b2":"fig = px.histogram(df[df.year >1998],'year', color_discrete_sequence=['blue'])\nfig.update_layout(bargap = 0.1,margin=dict(l=10, r=0, t=0, b=0))\n\nfig.show()","6552c80f":"\nfig = go.Figure(go.Histogram2d(x=df[df.is_new == False]['mileage'], y=df[df.is_new == False]['price'],\n        autobinx=False,\n        xbins=dict(start=0, end=210000, size=1000),\n        autobiny=False,\n        ybins=dict(start=0, end=60000, size=1000),\n        zmax=500,\n        zauto=False,\n    ))\n\nfig.update_layout(\n    autosize=False,\n    width=600,\n    height=450\n)\n\nfig.show()","9193ff4b":"fig = px.histogram(df[df['year'].notna()], 'mileage')\nfig.update_layout(margin=dict(l=10, r=0, t=0, b=0))\nfig.show()","a1bd17bc":"df['After 2016'] = df['year'] > 2016\nfig = px.histogram(df[df['year'].notna()], 'mileage',color='After 2016',barmode=\"overlay\", \n                   range_x=[0,300000])\nfig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.95,\n    xanchor=\"right\",\n    x=0.95\n),margin=dict(l=10, r=0, t=0, b=0))","e7275048":"#change df to 15 most popular model names to get best ability to dive into categories. \ndf = pd.read_csv('\/kaggle\/input\/1milcars\/top15models.csv', index_col=0, low_memory=False)\ndf = df[df.is_new == False]","28417789":"dfSample = df.sample(50000)\nfig = px.scatter(dfSample[dfSample.is_new == False],'mileage','price',render_mode='webgl',opacity=0.025,trendline ='ols',color_discrete_sequence=['blue'],\n                width=550, height=400)\nfig.update_layout(\n    margin=dict(l=10, r=0, t=0, b=0)\n)\nfig.show()","ca075cb4":"dfSample = df.sample(50000)\nfig = px.scatter(dfSample[dfSample.is_new == False],'mileage','price',color='model_name',render_mode='webgl',opacity=0.08,trendline ='ols',\n                width=800, height=400)\nfig.update_layout(\n    margin=dict(l=10, r=0, t=0, b=0)\n)\nfig.show()","d287f25c":"topN = 5\ndf[df.model_name == \"Silverado 1500\"]['trim_name'].value_counts()[:topN]","beb64036":"topTrims = df[df.model_name == \"Silverado 1500\"]['trim_name'].value_counts()[:topN].index.tolist()\ntopTrimCounts = df[df.model_name == \"Silverado 1500\"]['trim_name'].value_counts()[:topN].values.tolist()","6fa0d3b9":"\nfig = px.scatter(df[(df.is_new == False) & (df.model_name == \"Silverado 1500\") & (df.trim_name.isin(topTrims[:5]))],'mileage','price',color='trim_name',\n                 render_mode='webgl',opacity=0.08,trendline ='ols', width=550, height=400)\n\nfig.update_layout(\n    margin=dict(l=10, r=0, t=0, b=0)\n)\n\nfig.update_layout(legend=dict(\n    yanchor=\"top\",\n    y=0.95,\n    xanchor=\"right\",\n    x=0.95\n))\n\nfig.show()","275475c8":"#Get the average R2 value for all of the regression lines, weighted by number of observations\n\navgR2 = 0\nfor i in range(5):\n    avgR2 += topTrimCounts[i]\/np.sum(topTrimCounts)*px.get_trendline_results(fig).px_fit_results.iloc[i].rsquared\n\nprint(avgR2)","22ae5e3d":"px.histogram(df[(df.is_new == False) & (df.model_name == \"Silverado 1500\") & (df.trim_name.isin(topTrims[:5]))],'engine_displacement',color='trim_name', width=550, height=400)","4279f29d":"px.histogram(df[(df.is_new == False) & (df.model_name == \"Silverado 1500\") & (df.trim_name.isin(topTrims[:5]))],'horsepower',color='trim_name', width=550, height=400)","19b5d778":"y = df.price.fillna(df.price.mean())\nX = df.mileage.fillna(df.mileage.mean())\n\ndummy_regr = DummyRegressor(strategy=\"mean\")\n\ncv_results = cross_validate(dummy_regr, X, y, cv=10, scoring=('r2', 'neg_mean_absolute_error'))\nprint(np.mean(cv_results['test_r2']))\nprint(-np.mean(cv_results['test_neg_mean_absolute_error']))","ddb930cf":"y = df.price.fillna(df.price.mean()).to_numpy().reshape(-1, 1)\nX = df.mileage.fillna(df.mileage.mean()).to_numpy().reshape(-1, 1)\n\ncvMeanAndLR(X,y)","2ac8274c":"F150 = df[df.model_name == 'F-150']","cddd08ff":"fig = px.scatter(F150[F150.is_new == False],'mileage','price',render_mode='webgl',opacity=0.05,trendline ='ols')\nfig.data[1].update(line_color='#d94a5d')\nfig.show()","096ee77b":"y = F150.price.fillna(F150.price.mean()).to_numpy().reshape(-1, 1)\nX = F150.mileage.fillna(F150.mileage.mean()).to_numpy().reshape(-1, 1)\n\ncvMeanAndLR(X,y)","d0243c79":"df[df.model_name == \"F-150\"]['trim_name'].value_counts()[:5]","40419634":"F150Trim = df[(df.model_name == 'F-150') &(df.trim_name == 'XLT SuperCrew 4WD')]","1cac63cf":"fig = px.scatter(F150Trim[F150Trim.is_new == False],'mileage','price',render_mode='webgl',opacity=0.05,trendline ='ols')\nfig.data[1].update(line_color='#d94a5d')\nfig.show()","63da3eac":"y = F150Trim.price.fillna(F150Trim.price.mean()).to_numpy().reshape(-1, 1)\nX = F150Trim.mileage.fillna(F150Trim.mileage.mean()).to_numpy().reshape(-1, 1)\n\ncvMeanAndLR(X,y)","814e56c5":"px.histogram(df[(df.is_new == False) & (df.model_name == \"F-150\") & (df.trim_name == 'XLT SuperCrew 4WD')],'horsepower',color='trim_name', width=550, height=400)","3e7c3fb5":"F150TrimHP = df[(df.model_name == 'F-150') &(df.trim_name == 'XLT SuperCrew 4WD')&(df.horsepower == 375)]\n\ny = F150TrimHP.price.fillna(F150Trim.price.mean()).to_numpy().reshape(-1, 1)\nX = F150TrimHP.mileage.fillna(F150Trim.mileage.mean()).to_numpy().reshape(-1, 1)\n\ncvMeanAndLR(X,y)","1456c773":"dfCatBoost = df[['price','model_name','trim_name','mileage','horsepower']]\ndfCatBoost = DataFrameImputer().fit_transform(dfCatBoost)\n\ny = dfCatBoost.price\nX = dfCatBoost.drop('price',axis=1)\n\ncategorical_features_indices = np.where(X.dtypes == object)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=42)\n\n","ae968889":"train_dataset = cb.Pool(X_train, y_train,cat_features=categorical_features_indices) \ntest_dataset = cb.Pool(X_test, y_test,cat_features=categorical_features_indices)\n\nmodel = cb.CatBoostRegressor(loss_function='RMSE',\n                             iterations=1000,\n                            task_type=\"GPU\",\n                            devices='0:4')\nmodel.fit( train_dataset,\n               eval_set=(test_dataset),\n               plot=True,\n              verbose = False\n              )","291e98af":"#Check performance on f-150 supercrew 4WD\n\ny_pred = model.predict(X_test[(X_test.trim_name == \"XLT SuperCrew 4WD\") &(X_test.horsepower == 375)])\n#Find y values from the indices of the trim level and hp\ny_true = y_test[X_test[(X_test.trim_name == \"XLT SuperCrew 4WD\") &(X_test.horsepower == 375)].index]\n\nmean_absolute_error(y_true, y_pred)","6faf8b89":"#On all models \n\ny_pred = model.predict(X_test)\n#Find y values from the indices of the trim level and hp\ny_true = y_test\n\nmean_absolute_error(y_true, y_pred)","9440db71":"df = df.replace('--',None)\ncolumns_to_numeric = [\"back_legroom\",'front_legroom','fuel_tank_volume','height',\n                      'length','wheelbase','width','torque']\n\nfor column in columns_to_numeric:\n    remove_suffix(df, column)\n    df[column] = pd.to_numeric(df[column])\n    \n","0f58c52a":"#df = df.where(pd.notnull(df), None)\nnullPercentage = df.isnull().mean() * 100\nunder_20_nulls = nullPercentage[nullPercentage < 20].index.values\ndf = df[under_20_nulls]\n\ncolumns_to_drop = ['vin','main_picture_url']\ndf.drop(columns_to_drop, axis=1,inplace=True)","55ca1d0b":"categorical_features_indices = np.where(df.dtypes == object)[0]\n#remove description index\n#categorical_features_indices = np.delete(categorical_features_indices, np.where(categorical_features_indices == df.columns.get_loc(\"description\")))\n#text_cols = [df.columns.get_loc(\"description\")]\n#df.drop('description',inplace=True,axis=1)","4105c349":"dfCatBoostAll = DataFrameImputer().fit_transform(df)\n\ny = dfCatBoostAll.price\nX = dfCatBoostAll.drop('price',axis=1)\n\ncategorical_features_indices = np.where(X.dtypes == object)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=42)\n\ntrain_dataset = cb.Pool(X_train, y_train,cat_features=categorical_features_indices) \ntest_dataset = cb.Pool(X_test, y_test,cat_features=categorical_features_indices)\n\nmodel = cb.CatBoostRegressor(loss_function='RMSE',\n                             iterations=1000,\n                            task_type=\"GPU\",\n                            devices='0:1')\nmodel.fit(train_dataset,\n               eval_set=(test_dataset),\n               plot=True,\n               verbose = False\n              )","339b497b":"y_pred = model.predict(X_test[X_test.trim_name == \"XLT SuperCrew 4WD\"])\n#Find y values from the indices of the trim level\ny_true = y_test[X_test[X_test.trim_name == \"XLT SuperCrew 4WD\"].index]\n\nmean_absolute_error(y_true, y_pred)","a47f66e2":"y_pred = model.predict(X_test)\n#Find y values from the indices of the trim level and hp\ny_true = y_test\n\nmean_absolute_error(y_true, y_pred)","68586133":"\nmodel = cb.CatBoostRegressor(loss_function='RMSE',\n                            task_type=\"GPU\",\n                            devices='0:1')\n\ngrid = {'iterations': [ 150, 200],\n        'learning_rate': [0.1],\n        'depth': [4, 6, 8],\n        'l2_leaf_reg': [0.2, 0.5, 1, 3]}\n\ngrid_search_result = model.grid_search(grid, train_dataset,plot=True,verbose=False)","a21e64e8":"y_pred = model.predict(X_test)\n#Find y values from the indices of the trim level and hp\ny_true = y_test\n\nmean_absolute_error(y_true, y_pred)","42e5a072":"#dfSample = df.sample(1000)","64bc2c1d":"df['major_options'] = df['major_options'].fillna({i: \"[]\" for i in df.index})","3e9281b8":"df['major_options'] = df.major_options.apply(lambda x: literal_eval(x))","5f82d108":"\nmlb = MultiLabelBinarizer(sparse_output=True)\n\ndf = df.join(\n            pd.DataFrame.sparse.from_spmatrix(\n                mlb.fit_transform(df.pop('major_options')),\n                index=df.index,\n                columns=mlb.classes_))","5e99080c":"categorical_features_indices = np.where(df.dtypes == object)[0]\n#remove description index\n#categorical_features_indices = np.delete(categorical_features_indices, np.where(categorical_features_indices == df.columns.get_loc(\"description\")))\n#text_cols = [df.columns.get_loc(\"description\")]\n#df.drop('description',inplace=True,axis=1)","278a9da1":"dfCatBoostAll = DataFrameImputer().fit_transform(df)\n\ny = dfCatBoostAll.price\nX = dfCatBoostAll.drop('price',axis=1)\n\ncategorical_features_indices = np.where(X.dtypes == object)[0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=42)\n\ntrain_dataset = cb.Pool(X_train, y_train,cat_features=categorical_features_indices) \ntest_dataset = cb.Pool(X_test, y_test,cat_features=categorical_features_indices)\n\nmodel = cb.CatBoostRegressor(loss_function='RMSE',\n                             iterations=1000,\n                             task_type=\"GPU\",\n                             devices='0:1')\nmodel.fit(train_dataset,\n               eval_set=(test_dataset),\n               plot=True,\n               verbose=False\n              )","0b5b4234":"y_pred = model.predict(X_test[X_test.trim_name == \"XLT SuperCrew 4WD\"])\n#Find y values from the indices of the trim level\ny_true = y_test[X_test[X_test.trim_name == \"XLT SuperCrew 4WD\"].index]\n\nmean_absolute_error(y_true, y_pred)","84411178":"y_pred = model.predict(X_test)\n#Find y values from the indices of the trim level and hp\ny_true = y_test\n\nmean_absolute_error(y_true, y_pred)","c1d65170":"fig = px.bar( x=X.columns.tolist(), y=model.get_feature_importance())\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","4fe09a58":"import shap\nshap.initjs()","24a37196":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X)\n\n# visualize the first prediction's explanation\nshap.force_plot(explainer.expected_value, shap_values[0,:], X.iloc[0,:])","eff25010":"shap.summary_plot(shap_values, X, max_display=15, plot_type=\"bar\")","2f729b16":"shap.summary_plot(shap_values, X)","6e7b2160":"shap.dependence_plot(\"mileage\", shap_values, X, interaction_index='auto')","7a31d028":"X.mileage.mean()","c8790420":"shap.dependence_plot(\"year\", shap_values, X, interaction_index='mileage',x_jitter=.5)","a0670df9":"pred_price_train = model.predict(X_train)","a7dd4afb":"#px.scatter(x=y_train, y=pred_price_train,render_mode='webgl',opacity=0.05)","a0b28a55":"y_train_res = pred_price_train - y_train","ac68ee2c":"px.histogram(y_train_res.sample(10000))","1f515558":"y_train_res_bin = (y_train_res > 0)*1","ca7c81d7":"y_train_res_bin","79312ec3":"X_train_old = X_train\nX_test_old = X_test\ny_train_old = y_train\ny_test_old = y_test","558086e1":"dfCatBoostAll = DataFrameImputer().fit_transform(df)\n\ny = y_train_res_bin\nX = X_train_old['description'].to_frame()\n\ntext_cols = ['description']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=42)\n\ntrain_dataset = cb.Pool(X_train, y_train,text_features=[0]) \ntest_dataset = cb.Pool(X_test, y_test,text_features=[0])\n\ntext_model = cb.CatBoostClassifier(loss_function='Logloss',\n                             iterations=3000,\n                             task_type=\"GPU\",\n                             devices='0:1')\ntext_model.fit(train_dataset,\n               eval_set=(test_dataset),\n               plot=True,\n               verbose=False\n              )","dc64ae97":"y_pred = text_model.predict(X_test)","0bc7e0c0":"accuracy_score(y_test, y_pred)","4e3cc808":"y_pred_no_text = model.predict(X_test_old)","7dffb299":"mean_absolute_error(y_test_old,y_pred_no_text)","61be49af":"text_pred = text_model.predict(X_test_old['description'].to_frame())","85163bc0":"text_pred","78cc5e4d":"amount = 300\ncorrection = [-amount if x==1 else amount for x in text_pred]","53570f72":"y_pred_corrected = y_pred_no_text + correction","29f744b4":"mean_absolute_error(y_test_old,y_pred_corrected)","94a10987":"def tokenize(x):\n    try:\n        return nltk.word_tokenize(x)\n    except:\n        return []","ed9708c4":"dfSample = df.sample(10000)","c962d79f":"dfSample[\"tokenized\"] = dfSample.apply(lambda row: tokenize(row['description']), axis=1)","c8461a81":"dfSample.tokenized.head()","505d9450":"corpus = []","c62a8827":"for index, row in dfSample.iterrows():\n    corpus += row[\"tokenized\"]","41f3964d":"len(corpus)","ce97e40d":"#Removing signs and putting to lower\ncorpus=[word.lower() for word in corpus if word.isalpha()]","40571225":"px.defaults.width = 950\npx.defaults.height = 600","e352ea92":"freqs1gramtop50 = nltk.FreqDist(corpus).most_common(100)\npx.bar(dfSample, x = [x[0] for x  in freqs1gramtop50], y = [x[1] for x  in freqs1gramtop50])","197ee005":"bgs = list(nltk.bigrams(corpus))\nbgs = [x[0] + \" \" + x[1] for x in bgs]\nfreqs2gramtop50 = nltk.FreqDist(list(bgs)).most_common(100)","5a8685fc":"freqs2gramtop50[:3]","02cb49f4":"px.bar(dfSample, x = [x[0] for x  in freqs2gramtop50], y = [x[1] for x  in freqs2gramtop50])","9d634d63":"bgs = list(nltk.trigrams(corpus))\nbgs = [x[0] + \" \" + x[1] + \" \" + x[2] for x in bgs]\nfreqs2gramtop50 = nltk.FreqDist(list(bgs)).most_common(100)","7576d3f4":"freqs2gramtop50[:3]","f56cf2f7":"px.bar(dfSample, x = [x[0] for x  in freqs2gramtop50], y = [x[1] for x  in freqs2gramtop50])","26e583b2":"px.defaults.width = 800\npx.defaults.height = 450","31e3cec7":"px.histogram(dfSample[\"tokenized\"].apply(lambda x: len(x)))","f033ac6c":"px.histogram(df, x=\"back_legroom\")","69ab73f7":"px.histogram(df[df.back_legroom == 43.6], x='model_name')  ","d4b8fc19":"px.histogram(df, x='bed')  ","115b0ad2":"df.bed_height.value_counts()","f1ccdb30":"df.drop(\"bed_height\",axis=1,inplace=True)","36270c61":"df.bed_length.tail()","d0be8dc0":"df[\"bed_length\"] = df[\"bed_length\"].str.split(\" \",expand=True)[0].values.astype(float)\n","6c7faa26":"check_nulls(df,'bed_length')","dcc95194":"px.histogram(df, x=\"bed_length\")","fd313d88":"px.histogram(df[df.bed_length == 67.1], x='model_name')  ","f3d9a882":"check_nulls(df,'body_type')","64717d73":"px.histogram(df, x='body_type')  ","7dc0aee3":"check_nulls(df,'cabin')","8af89f4a":"df.cabin.value_counts()","929c84d0":"px.histogram(df.dropna(subset=['cabin']), x='body_type')  ","7ee7f377":"check_nulls(df,'city')","9380b4a3":"check_nulls(df,'city_fuel_economy')","3c61d426":"#px.histogram(df,x='city_fuel_economy',color='body_type')\n\npx.histogram(df,x='city_fuel_economy')","d1fe4a69":"check_nulls(df,'combine_fuel_economy')","54887352":"check_nulls(df,'daysonmarket')\n\npx.histogram(df,x='daysonmarket')","bc4825b2":"check_nulls(df,'dealer_zip')","cd3cf209":"def tokenize(x):\n    try:\n        return nltk.word_tokenize(x)\n    except:\n        return []","8149bb16":"dfSample = df.sample(10000)","6dcc1958":"dfSample[\"tokenized\"] = dfSample.apply(lambda row: tokenize(row['description']), axis=1)","8dd88f4c":"dfSample.tokenized.head()","a6ba5303":"corpus = []","a94fdabd":"for index, row in dfSample.iterrows():\n    corpus += row[\"tokenized\"]","781e0062":"len(corpus)","ad0ecc81":"#Removing signs and putting to lower\ncorpus=[word.lower() for word in corpus if word.isalpha()]","e4f38397":"px.defaults.width = 950\npx.defaults.height = 600","cf98ec00":"freqs1gramtop50 = nltk.FreqDist(corpus).most_common(100)\npx.bar(dfSample, x = [x[0] for x  in freqs1gramtop50], y = [x[1] for x  in freqs1gramtop50])","c690d368":"bgs = list(nltk.bigrams(corpus))\nbgs = [x[0] + \" \" + x[1] for x in bgs]\nfreqs2gramtop50 = nltk.FreqDist(list(bgs)).most_common(100)","fba52562":"freqs2gramtop50[:3]","ff199f01":"px.bar(dfSample, x = [x[0] for x  in freqs2gramtop50], y = [x[1] for x  in freqs2gramtop50])","38c4f79d":"bgs = list(nltk.trigrams(corpus))\nbgs = [x[0] + \" \" + x[1] + \" \" + x[2] for x in bgs]\nfreqs2gramtop50 = nltk.FreqDist(list(bgs)).most_common(100)","2f5ad98b":"freqs2gramtop50[:3]","883006a9":"px.bar(dfSample, x = [x[0] for x  in freqs2gramtop50], y = [x[1] for x  in freqs2gramtop50])","08d6d9e4":"px.defaults.width = 800\npx.defaults.height = 450","c05b3f75":"px.histogram(dfSample[\"tokenized\"].apply(lambda x: len(x)))","db6c8522":"df.engine_cylinders.head(7)","da474f7d":"check_nulls(df,'engine_cylinders')","6eb84f3f":"check_nulls(df,'exterior_color')","0c3a1628":"plot_freq_classes(df,'exterior_color',20)","339cc618":"check_nulls(df,'fleet')","6a2aeecd":"check_nulls(df,'frame_damaged')","036d1102":"check_nulls(df,'franchise_dealer')","3711a543":"check_nulls(df,'franchise_make')","0a146436":"plot_freq_classes(df,'franchise_make',20)","69fcdf1c":"check_nulls(df,'front_legroom')","b977880a":"remove_appended(df,'front_legroom')","c3aae6f1":"px.histogram(df, x=\"front_legroom\")","96603f84":"check_nulls(df,'fuel_tank_volume')","d1600977":"remove_appended(df,'fuel_tank_volume')","7daf4e7f":"px.histogram(df, x=\"fuel_tank_volume\")","7fcb1c3b":"check_nulls(df,'fuel_type',categorical=True)","a6ef4026":"plot_freq_classes(df,'fuel_type',20)","36a6c0ef":"check_nulls(df,'has_accidents',categorical=True)","46b271a5":"check_nulls(df,'height',categorical=False)","fc597140":"remove_appended(df,'height')","fdcc23b6":"check_nulls(df,'highway_fuel_economy',categorical=False)","95a44b15":"check_nulls(df,'horsepower',categorical=False)","51bfaaee":"check_nulls(df,'interior_color',categorical=True)","5035f688":"df = df.replace('None',None)","5aaa10e7":"plot_freq_classes(df,'interior_color',10)","35bdcf2e":"check_nulls(df,'isCab',categorical=True)","ee236796":"check_nulls(df,'is_certified',categorical=True)","0882f6a0":"df.drop('is_certified',axis=1,inplace=True)","1fc1723f":"check_nulls(df,'is_cpo',categorical=True)","8f692f36":"check_nulls(df,'is_new',categorical=True)","1e88ddbb":"plot_freq_classes(df,'is_new',5)","d5b3d1fe":"check_nulls(df,'is_oemcpo',categorical=True)","b4361013":"check_nulls(df,'latitude',categorical=False)","8168b965":"check_nulls(df,'length',categorical=False)","9cbff3dd":"remove_appended(df,'length')","bcbe704e":"check_nulls(df,'listed_date',categorical=False)","842f0434":"px.histogram(df,'listed_date')","3591cb09":"check_nulls(df,'listing_color',categorical=True)","f15190b0":"plot_freq_classes(df,'listing_color',20)","900aecf4":"### Plot scatter of top 5 trims ","37e2fd21":"### length","89c0eda8":"Does more engine variants for example exist within each trim variant?","19e7490e":"### Body type\n\n3 classes dominate. Could be interesting to see if clustering would result in these classes too.","937580a8":"### City","bd74a21e":"# General Descriptive Analysis","a07d4687":"### listing_color","fafd11fc":"Curiously performance have decreased after hyperparameter tuning","102e6a22":"Great! It actually outperforms the model created specific for the trim level and hp","11e9dc18":"### combine_fuel_economy","75ab417d":"## Seperate by trim_name","e712c5ec":"### Find most popular trims for Silverado 1500","00a0a403":"### Hyperparameter tuning","1f9e1f96":"## Combine with old model ","d662a237":"### interior_color\n\nNone instead of real null should be replaced","42a03ea1":"### highway_fuel_economy","f9072e10":"### height","d0bbd9ff":"### franchise_make","df94451a":"We see something akin to a normal distribution but with some outliers, that could be very popular models that all have the same back legroom space. One of the \"outliers\"\/overrepresented values is 43.6. Let's see which car models have this leg space:","dce092ec":"### engine_cylinders\n\nType of engine configuration and number of cylinders. Could be useful to distinguish different engine variants of a model that would be important for the price. Could NaN values have electric cars?","90ca20f2":"### fleet","15b72070":"### latitude","bf5593eb":"### horsepower","04b9ff53":"### Bed length\n\nhas 86% nan values, probably because it's only relevant for trucks. Also has \"in\" appended.","73bb4137":"# Visual Analysis For Predictive Task","3e06db4c":"### is_cpo","50eddb3b":"### is_new","444bf3b7":"### Bed","72d3aa2d":"It can be seen that out of the 100k rows we only have around 700 non-NaN values. We think the column describes the bed of the pickup trucks, but it seems to be very rarely used. So probably not relevant to include in the model. ","fea0746b":"## Description Tokenization","82c61aa9":"Text features only works with the classifier in catboost so we wil binarize the residuals ","2c3aeeb5":"### frame_damaged","99dfeef4":"## For all cars","b513ed7f":"### City fuel economy","990b0d2a":"### fuel_tank_volume","3c109d25":"It worked! :) ","626eaf03":"### is_oemcpo","66aca70e":"## CatBoost allVars","3b654769":"## Seperate by model_name","5af4c788":"So clearly the model performs a lot better when only predicting one model with a specific trim level. And the more detailed we segment the more accurate it will likely be. So one option is to create a model per car model and trim level, but that's a bit tedious. Instead we will use a model that can take the categorical features into account. ","90625189":"### listed_date","e37dfe62":"Why the cluster of cars from 0-50k miles?","ef2d57fc":"### Description","d4125d6b":"## Baseline Model (Mean Predictor)","2834afe4":"Cabin only has about 2000 non-null values. And looking at the body type of these 2k rows it's all pick-up trucks. So apparently only relevant for those. But there are around 16k pick-up trucks in this dataset so not always registrered it seems. ","1fc0950e":"### dealer_zip","5692069e":"# Stuff not included in the report","4f76b5a8":"### is_certified","077d3391":"It's evident that more engine versions exist of each trim level, but that they also correlate a lot, with ltz crew cab 4wd and lt crew cab 4wd only with larger engines and the lt double cab mostly in the smaller versions. ","48441155":"### Cabin","9cd5333a":"## all features visualization","f2b7b928":"## Feature importance","ceb5f47b":"## Linear Regression on all car models","f1b06d4c":"### exterior_color","045cfc23":"### fuel_type","2f4bbf91":"### front_legroom","5655b53e":"## CatBoost allVars w\/ major options","26769111":"## Just for F-150 (XLT SuperCrew 4WD)","c3096d68":"## Just for F-150 with 375 hp","0d391221":"Looks like two distributions added together. After checking many columns turns out it's the new cars that have one distribution and the old cars that have another.","fb894065":"## Just for F-150","7b67231a":"### daysonmarket","18be703b":"### listing_id","d35ea48e":"### has_accidents","0499c206":"## CatBoost Minimal","f5cc1c5f":"### isCab","a65a245e":"### franchise_dealer","038cf4fc":"### Examine Trim Variable","43ecedf6":"# Predictive Analysis","6cd2235b":"## (CatBoost allVars w\/ major options + residuals classifier correction)\nUsing description to predict residual values after first model","780b2caa":"Again the popular F-150 is the reason behind a big spike in bed lengths of 67.1","a9ccc2bd":"### Bed height\n\nOnly has NaNs, so will be deleted","86112638":"This confirms that it is as suspected the Ford F-150 that's a very common pick-up truck in the US"}}