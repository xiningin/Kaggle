{"cell_type":{"b965b7a8":"code","3c8ca251":"code","b0a9408b":"code","3144ca9c":"code","3f6a39cc":"code","52014c5b":"code","4495f146":"code","aaa38e32":"code","1843d2fc":"code","966588f5":"code","5f0995d6":"code","23aa59c5":"code","2866f9b9":"code","279ce1b6":"code","e24317c6":"markdown","53cf838b":"markdown","7b35dcf2":"markdown","53c53402":"markdown","3bdd0290":"markdown","03f038ab":"markdown","5a223360":"markdown","92ac522a":"markdown","baa0acd7":"markdown"},"source":{"b965b7a8":" !pip install apyori\n","3c8ca251":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os","b0a9408b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndata=pd.read_csv('\/kaggle\/input\/market-basket-optimisationcsv\/Market_Basket_Optimisation.csv', header=None)\n\ndata.head(5)","3144ca9c":"len(data)","3f6a39cc":"## We need a list of transactions\ntransactions=[]\nfor i in range(0,7500): ## rows\n    transactions.append([str(data.values[i,j]) for j in range (0,20) ])# Columns \n## must be strings","52014c5b":"#transactions","4495f146":"from apyori import apriori\n\nrules=apriori(transactions=transactions,\n              min_support=0.003,## (min 3 times per day  * 7 days)\/7501 \n              min_confidence=0.2,## you can try different values depending on the business requirements\n              min_lift = 3,  ## relevance of the rule... good lift is at least 3. Rules below 3 are not relevant--based on the experience\n              min_length=2, ## 2 products to have at the end, A and B\n              max_length=2) ","aaa38e32":"rules","1843d2fc":"results=list(rules) ## we put rules into a list\n#results","966588f5":"results[5]","5f0995d6":"## 0.004% that french fries and almonds will appear in the basket\n## o.21% that french fries will appear at the basket if almonds are also bought","23aa59c5":"def inspect(results):\n    lhs         = [tuple(result[2][0][0])[0] for result in results]\n    rhs         = [tuple(result[2][0][1])[0] for result in results]\n    supports    = [result[1] for result in results]\n\n    return list(zip(lhs, rhs, supports))\n\n\n    \nresultsinDataFrame = pd.DataFrame(inspect(results), columns = ['Left Hand Side', 'Right Hand Side', 'Support'])","2866f9b9":"resultsinDataFrame","279ce1b6":"resultsinDataFrame.nlargest(n=10, columns=\"Support\") ## 10 rows","e24317c6":"### Displaying the first results coming directly from the output of the apriori function","53cf838b":"## Training the Eclat model on the dataset","7b35dcf2":"## Data Preprocessing","53c53402":"### Displaying the results sorted by descending supports","3bdd0290":"## Importing the libraries","03f038ab":"### Putting the results well organised into a Pandas DataFrame","5a223360":"# Eclat","92ac522a":"## Visualising the results","baa0acd7":"### Displaying the results non sorted"}}