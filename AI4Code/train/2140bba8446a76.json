{"cell_type":{"a0f60fb8":"code","8466fcf9":"code","db5c51b7":"code","79b14915":"code","8e5b86e3":"code","7f3e2866":"code","1023f621":"code","b6bb4e72":"code","24acdb94":"code","ff38c242":"code","99786950":"code","ac845d73":"code","88174993":"code","a071b97b":"code","32a756d7":"code","9e686044":"code","7669f736":"code","d8d753ca":"code","8c357efe":"code","0178acee":"code","78a8f67e":"code","10b9a709":"code","3e1b0714":"code","1b970011":"code","b1ee9ccd":"code","f16d4f2f":"code","826724f1":"code","866293cd":"code","e6280835":"code","7bfc8954":"code","4d386ebd":"code","9c8094d6":"code","a412285a":"code","05046e48":"code","ad7ab54e":"code","75880725":"code","15a5c18f":"code","5cb3d7eb":"code","7d5a33b5":"code","41afbe26":"code","eb382ada":"code","7399bf46":"code","7ba2f19e":"code","0c24c85d":"code","cb7a414f":"code","cc1002f3":"code","35af9464":"code","b6831fa3":"markdown","45f4d1fb":"markdown"},"source":{"a0f60fb8":"pip install dataprep","8466fcf9":"pip install plotly","db5c51b7":"'''\nImport the Libraries\n'''\n\n\n# DATA MANIPULATION\nimport pandas as pd \nimport numpy as np \n\n#DATA VISUALISATION\nimport matplotlib.pyplot as plt \n\ncovid_data_train = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/train.csv\") # csv-Comma Separated Values\ncovid_data_test = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-5\/test.csv\")","79b14915":"covid_data_train.head() # Will show first five rows \n                        # NaN-Not a number","8e5b86e3":"covid_data_train.shape # (number of rows, number of columns)","7f3e2866":"covid_data_train.dtypes.value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('Data type');","1023f621":"covid_data_train.isnull().sum() # This code tells me how many null values are there in each column","b6bb4e72":"covid_data_test.head()","24acdb94":"covid_data_train[covid_data_train['Country_Region'] == 'India'] # This code gives me data for India","ff38c242":"covid_data_train[covid_data_train['Country_Region'] == 'China'] # This code shows me the data for China","99786950":"covid_data_train[covid_data_train['Country_Region'] == 'India']['County'].value_counts() # Return's the count for that particular","ac845d73":"covid_data_test.isnull().sum()","88174993":"covid_data_train.dropna(axis=1, inplace = True) # Drop the null columns-County and Province\ncovid_data_test.dropna(axis=1, inplace=True) # Drop the null columns","a071b97b":"import plotly.express as px # Data visualisation using plotly\n\nfig = plt.figure(figsize = (45,30)) # intialize the figure\nfig = px.pie(covid_data_train, names = 'Country_Region', values = 'TargetValue', color_discrete_sequence = px.colors.sequential.RdBu, hole = 0.4) # Plot the pieplot\nfig.update_traces(textposition = 'inside') # Update the tracing \n\n#fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide') # Update the layout\nfig.show()","32a756d7":"# Visualise the counts of confimred cases and the fatalities\nimport seaborn as sns\nsns.barplot(y = 'TargetValue', x='Target', data = covid_data_train)\nplt.show()","9e686044":"# Visualise the count of target w.r.t population\nfig = px.pie(covid_data_train, values='TargetValue', names='Target')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","7669f736":"confirmed=covid_data_train[covid_data_train['Target']=='ConfirmedCases']\nfig = px.treemap(confirmed, path=['Country_Region'], values='TargetValue',width=900, height=600)\nfig.update_traces(textposition='middle center', textfont_size=15)\nfig.update_layout(\n    title={\n        'text': 'Total Share of Worldwide COVID19 Confirmed Cases',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","d8d753ca":"dead=covid_data_train[covid_data_train['Target']=='Fatalities']\nfig = px.treemap(dead, path=['Country_Region'], values='TargetValue',width=900,height=600)\nfig.update_traces(textposition='middle center', textfont_size=15)\nfig.update_layout(\n    title={\n        'text': 'Total Share of Worldwide COVID19 Fatalities',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","8c357efe":"# Visualise the top 10 most populos countries in the world and the covid cases\ngrouped_data = covid_data_train.groupby('Country_Region').sum()\n\n# Top 10 most populous country\ntop_10_pop_countries=grouped_data.nlargest(10, 'Population')['TargetValue'] # I am able to extract top 10 most populous countries\ntop_10_pop_countries","0178acee":"# Visualise the number of confirmed covid cases and deaths i.e the Target Variable\nfig = px.bar(x = top_10_pop_countries.index, y = top_10_pop_countries.values, title='Top 10 Most Populous Countries V\/S Number of Covid Cases', labels = dict(x='Countries', y='Number of Covid-19 Cases'))\nfig.show()","78a8f67e":"covid_data_train.info() # Information about your data","10b9a709":"# Convert the date column into datetime format\ncovid_data_train['Date'] = pd.to_datetime(covid_data_train['Date'])\ncovid_data_test['Date'] = pd.to_datetime(covid_data_test['Date'])","3e1b0714":"# Visualise the worldwide covid growth w.r.t time\n\n# 1) Group the data by date\ndate_grouped_data = covid_data_train.groupby('Date').sum()\n\n# 2) Plot the date grouped data on a line chart\nfig = px.line(x=date_grouped_data.index, y = date_grouped_data['TargetValue'], title = 'Growth of number of COVID-19 cases over Time', labels = dict(x='Date', y = 'Number of Coivd-19 Cases'))\nfig.show()","1b970011":"covid_data_train[covid_data_train['Country_Region'] == 'India']","b1ee9ccd":"# Visulalisng the growth of covid w.r.t country over time\nfig = px.line(covid_data_train, x = 'Date', y = 'TargetValue', color='Country_Region')\nfig.show()","f16d4f2f":"top_10_populous_countries = list(top_10_pop_countries.index)\ntop_10_populous_countries","826724f1":"top_10_most_pop_countries = covid_data_train[(covid_data_train['Country_Region'] == 'China') | (covid_data_train['Country_Region'] == 'India')|(covid_data_train['Country_Region'] == 'US')|(covid_data_train['Country_Region'] == 'Indonesia')|(covid_data_train['Country_Region'] == 'Brazil')|(covid_data_train['Country_Region'] == 'Pakistan')|(covid_data_train['Country_Region'] == 'Nigeria')|(covid_data_train['Country_Region'] == 'Bangladesh')|(covid_data_train['Country_Region'] == 'Russia')|(covid_data_train['Country_Region'] == 'Japan')]","866293cd":"# Visualise the growth of Covid-19 numbers in top 10 most populous countries\nfig = px.line(top_10_most_pop_countries, x='Date', y='TargetValue', color='Country_Region')\nfig.show()","e6280835":"covid_data_train.drop(['Id'],axis=1, inplace=True) # Drop the ID column","7bfc8954":"covid_data_train.head()","4d386ebd":"covid_data_train['Date']","9c8094d6":"'''2020-01-23'''\n\n2020123\n\n2020*1000 + 1*100 + 23*1","a412285a":"# Convert the Date time variables into integers\ndef to_integer(x):\n  '''Covnerts a datetime variable into integer.'''\n  return 1000*x.year + 100*x.month + x.day\n\n# apply the above method on the dataframe\ncovid_data_train['Date'] = covid_data_train['Date'].apply(lambda x : to_integer(x))","05046e48":"# Perform same on the test_Set\ncovid_data_test['Date'] = covid_data_test['Date'].apply(lambda x : to_integer(x))","ad7ab54e":"covid_data_test","75880725":"# Label Encoding the categorical columns\nfrom sklearn.preprocessing import LabelEncoder\n\n# LabelEncoder Object\nle1 = LabelEncoder()\n\n# fit the categorical columns\ncovid_data_train['Country_Region'] = le1.fit_transform(covid_data_train['Country_Region'])\ncovid_data_test['Country_Region'] = le1.transform(covid_data_test['Country_Region'])\n\nle2 = LabelEncoder()\ncovid_data_train['Target'] = le2.fit_transform(covid_data_train['Target'])\ncovid_data_test['Target'] = le2.transform(covid_data_test['Target'])","15a5c18f":"# Split the data into X and y\nX = covid_data_train.drop('TargetValue', axis=1)\ny = covid_data_train['TargetValue']","5cb3d7eb":"X","7d5a33b5":"test_id = covid_data_test['ForecastId']\n\n# Now drop the ForecastId from the test set\ncovid_data_test.drop(['ForecastId'], axis = 1, inplace=True)","41afbe26":"X","eb382ada":"# merge the training and testing set\ntrain_len = X.shape[0]\ncombined_data = pd.concat((X,covid_data_test))","7399bf46":"# Standardize the data using StandardScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# StandardScaler object\nss = StandardScaler()\n\n# Fit the combined set\nfor column in combined_data.columns:\n  combined_data[column] = ss.fit_transform(combined_data[column].values.reshape((-1,1)))","7ba2f19e":"combined_data.head()","0c24c85d":"# split the combined data back into train and test\nX = combined_data.iloc[ : train_len]\ntesting_data = combined_data.iloc[train_len:]","cb7a414f":"# Split X and y into training and testing set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","cc1002f3":"X_train.shape","35af9464":"# Machine Learning Modeling\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor # Import the random forest\n\n# Model Object\nrf = RandomForestRegressor()\n\n# Fit the model\nrf.fit(X_train, y_train)","b6831fa3":"# **Machine Learning Modelling**","45f4d1fb":"# **DATA PROCESSING**"}}