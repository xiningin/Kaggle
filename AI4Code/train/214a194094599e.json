{"cell_type":{"fd1b5cd9":"code","2a046edd":"code","ce4de539":"code","f85d3893":"code","fba7184b":"code","a6ba0170":"code","240f5ee0":"code","df185234":"code","9776d3aa":"code","d35b7c99":"code","56bafeb4":"code","573f32b1":"code","94d8fcf5":"code","903a4f7a":"code","324cd2c0":"code","3cbe9671":"code","1385ea87":"code","dbaad932":"code","903173fc":"code","46524a61":"code","b1302c43":"markdown","eae1894b":"markdown","a78fb45c":"markdown","9b80671b":"markdown","70d8b9cd":"markdown","23c21b81":"markdown","44d69434":"markdown","6fa36fef":"markdown"},"source":{"fd1b5cd9":"# Copyright 2019 The TensorFlow Hub Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, \n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================","2a046edd":"import os\nimport time\nfrom PIL import Image\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport matplotlib.pyplot as plt\nos.environ[\"TFHUB_DOWNLOAD_PROGRESS\"] = \"True\"","ce4de539":"!wget \"https:\/\/user-images.githubusercontent.com\/12981474\/40157448-eff91f06-5953-11e8-9a37-f6b5693fa03f.png\" -O original.png","f85d3893":"# Declaring Constants\nIMAGE_PATH = \"original.png\"\nSAVED_MODEL_PATH = \"https:\/\/tfhub.dev\/captain-pool\/esrgan-tf2\/1\"","fba7184b":"def preprocess_image(image_path):\n  \"\"\" Loads image from path and preprocesses to make it model ready\n      Args:\n        image_path: Path to the image file\n  \"\"\"\n  hr_image = tf.image.decode_image(tf.io.read_file(image_path))\n  # If PNG, remove the alpha channel. The model only supports\n  # images with 3 color channels.\n  if hr_image.shape[-1] == 4:\n    hr_image = hr_image[...,:-1]\n  hr_size = (tf.convert_to_tensor(hr_image.shape[:-1]) \/\/ 4) * 4\n  hr_image = tf.image.crop_to_bounding_box(hr_image, 0, 0, hr_size[0], hr_size[1])\n  hr_image = tf.cast(hr_image, tf.float32)\n  return tf.expand_dims(hr_image, 0)\n\ndef save_image(image, filename):\n  \"\"\"\n    Saves unscaled Tensor Images.\n    Args:\n      image: 3D image tensor. [height, width, channels]\n      filename: Name of the file to save to.\n  \"\"\"\n  if not isinstance(image, Image.Image):\n    image = tf.clip_by_value(image, 0, 255)\n    image = Image.fromarray(tf.cast(image, tf.uint8).numpy())\n  image.save(\"%s.jpg\" % filename)\n  print(\"Saved as %s.jpg\" % filename)","a6ba0170":"%matplotlib inline\ndef plot_image(image, title=\"\"):\n  \"\"\"\n    Plots images from image tensors.\n    Args:\n      image: 3D image tensor. [height, width, channels].\n      title: Title to display in the plot.\n  \"\"\"\n  image = np.asarray(image)\n  image = tf.clip_by_value(image, 0, 255)\n  image = Image.fromarray(tf.cast(image, tf.uint8).numpy())\n  plt.imshow(image)\n  plt.axis(\"off\")\n  plt.title(title)","240f5ee0":"hr_image = preprocess_image(IMAGE_PATH)","df185234":"# Plotting Original Resolution image\nplot_image(tf.squeeze(hr_image), title=\"Original Image\")\nsave_image(tf.squeeze(hr_image), filename=\"Original Image\")","9776d3aa":"model = hub.load(SAVED_MODEL_PATH)","d35b7c99":"start = time.time()\nfake_image = model(hr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))","56bafeb4":"# Plotting Super Resolution Image\nplot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\nsave_image(tf.squeeze(fake_image), filename=\"Super Resolution\")","573f32b1":"!wget \"https:\/\/lh4.googleusercontent.com\/-Anmw5df4gj0\/AAAAAAAAAAI\/AAAAAAAAAAc\/6HxU8XFLnQE\/photo.jpg64\" -O test.jpg\nIMAGE_PATH = \"test.jpg\"","94d8fcf5":"# Defining helper functions\ndef downscale_image(image):\n  \"\"\"\n      Scales down images using bicubic downsampling.\n      Args:\n          image: 3D or 4D tensor of preprocessed image\n  \"\"\"\n  image_size = []\n  if len(image.shape) == 3:\n    image_size = [image.shape[1], image.shape[0]]\n  else:\n    raise ValueError(\"Dimension mismatch. Can work only on single image.\")\n\n  image = tf.squeeze(\n      tf.cast(\n          tf.clip_by_value(image, 0, 255), tf.uint8))\n\n  lr_image = np.asarray(\n    Image.fromarray(image.numpy())\n    .resize([image_size[0] \/\/ 4, image_size[1] \/\/ 4],\n              Image.BICUBIC))\n\n  lr_image = tf.expand_dims(lr_image, 0)\n  lr_image = tf.cast(lr_image, tf.float32)\n  return lr_image","903a4f7a":"hr_image = preprocess_image(IMAGE_PATH)","324cd2c0":"lr_image = downscale_image(tf.squeeze(hr_image))","3cbe9671":"# Plotting Low Resolution Image\nplot_image(tf.squeeze(lr_image), title=\"Low Resolution\")","1385ea87":"model = hub.load(SAVED_MODEL_PATH)","dbaad932":"start = time.time()\nfake_image = model(lr_image)\nfake_image = tf.squeeze(fake_image)\nprint(\"Time Taken: %f\" % (time.time() - start))","903173fc":"plot_image(tf.squeeze(fake_image), title=\"Super Resolution\")\n# Calculating PSNR wrt Original Image\npsnr = tf.image.psnr(\n    tf.clip_by_value(fake_image, 0, 255),\n    tf.clip_by_value(hr_image, 0, 255), max_val=255)\nprint(\"PSNR Achieved: %f\" % psnr)","46524a61":"plt.rcParams['figure.figsize'] = [15, 10]\nfig, axes = plt.subplots(1, 3)\nfig.tight_layout()\nplt.subplot(131)\nplot_image(tf.squeeze(hr_image), title=\"Original\")\nplt.subplot(132)\nfig.tight_layout()\nplot_image(tf.squeeze(lr_image), \"x4 Bicubic\")\nplt.subplot(133)\nfig.tight_layout()\nplot_image(tf.squeeze(fake_image), \"Super Resolution\")\nplt.savefig(\"ESRGAN_DIV2K.jpg\", bbox_inches=\"tight\")\nprint(\"PSNR: %f\" % psnr)","b1302c43":"##### Copyright 2019 The TensorFlow Hub Authors.\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nCreated by @[Adrish Dey](https:\/\/github.com\/captain-pool) for [Google Summer of Code](https:\/\/summerofcode.withgoogle.com\/) 2019","eae1894b":"**Defining Helper Functions**","a78fb45c":"**Preparing Environment**","9b80671b":"### Evaluating Performance of the Model","70d8b9cd":"**Comparing Outputs size by side.**","23c21b81":"<table class=\"tfo-notebook-buttons\" align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.tensorflow.org\/hub\/tutorials\/image_enhancing\"><img src=\"https:\/\/www.tensorflow.org\/images\/tf_logo_32px.png\" \/>View on TensorFlow.org<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/colab.research.google.com\/github\/tensorflow\/hub\/blob\/master\/examples\/colab\/image_enhancing.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/colab_logo_32px.png\" \/>Run in Google Colab<\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/github.com\/tensorflow\/hub\/blob\/master\/examples\/colab\/image_enhancing.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/GitHub-Mark-32px.png\" \/>View source on GitHub<\/a>\n  <\/td>\n  <td>\n    <a href=\"https:\/\/storage.googleapis.com\/tensorflow_docs\/hub\/examples\/colab\/image_enhancing.ipynb\"><img src=\"https:\/\/www.tensorflow.org\/images\/download_logo_32px.png\" \/>Download notebook<\/a>\n  <\/td>\n<\/table>","44d69434":"# Image Super Resolution using ESRGAN","6fa36fef":"#### Performing Super Resolution of images loaded from path"}}