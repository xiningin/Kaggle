{"cell_type":{"df419d61":"code","49ccaa89":"code","d8a013f6":"code","82c7d362":"code","cfbc04f2":"code","2c1f4029":"code","9fe1c78b":"code","5d06d3d1":"code","61435fd0":"code","c06a1600":"code","1398575c":"code","79b7a427":"code","ed9aa674":"code","cfab400f":"code","f37fbc88":"code","de6df506":"code","95f9b029":"code","a297b62e":"code","d554ba57":"code","bf550ea1":"code","eed4ba99":"code","55b9c094":"code","11a337ab":"code","dff7186b":"code","0fb3e290":"code","f27d29a2":"code","598c2074":"code","4d0858c6":"code","57577985":"code","bb51d365":"markdown"},"source":{"df419d61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49ccaa89":"import os\nimport cv2\nimport glob\nimport time\nimport json\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn import impute\nfrom sklearn import metrics\nfrom sklearn import ensemble\nfrom sklearn import linear_model\nfrom sklearn import decomposition\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\n\n\nwarnings.filterwarnings('ignore')\n\nSEED = 42\nnp.random.seed(SEED)\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:f}'.format)\n\nsns.set_style(\"white\")\nmpl.rcParams['figure.dpi'] = 600\n%matplotlib inline","d8a013f6":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing \nfrom sklearn import model_selection\nfrom sklearn.preprocessing import OrdinalEncoder \nfrom sklearn.model_selection import train_test_split \nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_auc_score\nimport optuna\nfrom sklearn import linear_model\n","82c7d362":"df = pd.read_csv(\"..\/input\/september-folds\/train_folds.csv\")\ndf_test=pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\nsample_submission=pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\ndf1=pd.read_csv(\"..\/input\/catboost-1-iit\/train_pred_1.csv\")\ndf2=pd.read_csv(\"..\/input\/lgbm-2-iit\/train_pred_2.csv\")\ndf3=pd.read_csv(\"..\/input\/lgbm-3-iit\/train_pred_3.csv\")\ndf4=pd.read_csv(\"..\/input\/lgbm-4-iit\/train_pred_4.csv\")\ndf5=pd.read_csv(\"..\/input\/lgbm5-iit\/train_pred_5.csv\")\ndf6=pd.read_csv(\"..\/input\/catboost6-iit\/train_pred_6.csv\")\ndf7=pd.read_csv(\"..\/input\/catboost7-iit\/train_pred_7.csv\")","cfbc04f2":"df_test1=pd.read_csv(\"..\/input\/catboost-1-iit\/test_pred_1.csv\")\ndf_test2=pd.read_csv(\"..\/input\/lgbm-2-iit\/test_pred_2.csv\")\ndf_test3=pd.read_csv(\"..\/input\/lgbm-3-iit\/test_pred_3.csv\")\ndf_test4=pd.read_csv(\"..\/input\/lgbm-4-iit\/test_pred_4.csv\")\ndf_test5=pd.read_csv(\"..\/input\/lgbm5-iit\/test_pred_5.csv\")\ndf_test6=pd.read_csv(\"..\/input\/catboost6-iit\/test_pred_6.csv\")\ndf_test7=pd.read_csv(\"..\/input\/catboost7-iit\/test_pred_7.csv\")","2c1f4029":"df=df.merge(df1,on=\"id\",how=\"left\")\ndf=df.merge(df2,on=\"id\",how=\"left\")\ndf=df.merge(df3,on=\"id\",how=\"left\")\ndf=df.merge(df4,on=\"id\",how=\"left\")\ndf=df.merge(df5,on=\"id\",how=\"left\")\ndf=df.merge(df6,on=\"id\",how=\"left\")\ndf=df.merge(df7,on=\"id\",how=\"left\")\ndf_test =df_test.merge(df_test1,on=\"id\",how=\"left\")\ndf_test =df_test.merge(df_test2,on=\"id\",how=\"left\")\ndf_test =df_test.merge(df_test3,on=\"id\",how=\"left\")\ndf_test =df_test.merge(df_test4,on=\"id\",how=\"left\")\ndf_test=df_test.merge(df_test5,on=\"id\",how=\"left\")\ndf_test=df_test.merge(df_test6,on=\"id\",how=\"left\")\ndf_test=df_test.merge(df_test7,on=\"id\",how=\"left\")","9fe1c78b":"features =[col for col in df.columns if col not in [\"kfold\",\"claim\"]]","5d06d3d1":"df['min_row'] = df[features].min(axis=1)\ndf['max_row'] = df[features].max(axis=1)\ndf['mean_row'] = df[features].mean(axis=1)\ndf['std_row'] = df[features].std(axis=1)\ndf['median_row']=df[features].median(axis=1)\ndf_test ['min_row'] = df_test [features].min(axis=1)\ndf_test ['max_row'] = df_test [features].max(axis=1)\ndf_test ['mean_row'] = df_test [features].mean(axis=1)\ndf_test ['std_row'] = df_test [features].std(axis=1)\ndf_test['median_row']=df_test[features].median(axis=1)\n","61435fd0":"useful_features=[\"pred_1\",\"pred_2\",\"pred_3\",\"pred_4\",\"pred_5\",\"pred_6\",\"pred_7\",\"min_row\",\"max_row\",\"mean_row\",\"std_row\",\"median_row\"]\n","c06a1600":"X=df[useful_features]\ny=df[\"claim\"]\nfrom sklearn.feature_selection import  SelectKBest \nfrom sklearn.feature_selection import f_classif \nbest_features =SelectKBest(score_func=f_classif,k=12)\nfit=best_features.fit(X,y)","1398575c":"df_scores =pd.DataFrame(fit.scores_)\ndf_columns =pd.DataFrame(X.columns)","79b7a427":"features_scores =pd.concat([df_columns,df_scores],axis=1)\nfeatures_scores.columns=[\"space\",\"scores\"]","ed9aa674":"features_scores=features_scores.nlargest(12,\"scores\")","cfab400f":"features_scores","f37fbc88":"useful_features=features_scores[\"space\"]","de6df506":"from xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","95f9b029":"xgb_params = {\n    'n_estimators' : 500,\n    'reg_lambda' : 3,\n    'reg_alpha' : 26,\n    'subsample' : 0.6000000000000001,\n    'colsample_bytree' : 0.6000000000000001,\n    'max_depth' : 9,\n    'min_child_weight' : 5,\n    'gamma' : 13.054739572819486,\n    'learning_rate': 0.01,\n    'booster': 'gbtree'\n}\n\nlgbm_params = {\n    \"objective\": \"binary\",\n    \"learning_rate\": 0.0136989525,\n    'n_estimators':595,\n    'num_leaves': 99,\n    'min_child_samples': 7,\n    'feature_fraction': .3107239,\n    'bagging_fraction': .62804758961,\n    'bagging_freq': 3,\n    'reg_alpha': 89.71464915,\n    'reg_lambda': 1\n}\n\ncatb_params = {\n    'iterations': 709, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli', \n    'od_wait': 1144, \n    'learning_rate': 0.00890385, \n    'reg_lambda': 40.86021936, \n    'random_strength': 58.521645, \n    'depth': 7, \n    'min_data_in_leaf': 6, \n    'leaf_estimation_iterations': 1, \n    'subsample': .100058356,\n    'verbose' : 0\n}\nlgbm1_params = {\n    'objective': 'binary',\n    'n_estimators': 5,\n    'learning_rate': 5e-3,\n    'subsample': 0.6,\n    'subsample_freq': 1,\n    'colsample_bytree': 0.4,\n    'reg_alpha': 10.0,\n    'reg_lambda': 1e-1,\n    'min_child_weight': 256,\n    'min_child_samples': 20,\n    'importance_type': 'gain',\n\n}\nlgbm2_params = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'boosting_type': 'gbdt',\n    'n_estimators': 5, \n    'learning_rate': 0.005, \n    'num_leaves': 29,\n    'min_child_samples': 236, \n    'lambda_l1': 7.702002052840491, \n    'lambda_l2': 9.738840335016775, \n    'feature_fraction': 0.05, #0.3811137625854881, \n    'bagging_fraction': 0.7345219542805319, \n    'bagging_freq': 3, \n    'min_child_weight': 280.0714278010327}\n\n\n\n","a297b62e":"#level-1\/model-1\nfinal_test_preds=[] \nfinal_valid_preds={}\nscore=[]\nfor fold in range(5):\n    xtrain=df[df.kfold !=fold].reset_index(drop=True) \n    xvalid=df[df.kfold ==fold].reset_index(drop=True)\n    xtest=df_test.copy()\n    valid_ids=xvalid.id.values.tolist()\n    ytrain=xtrain['claim']\n    yvalid=xvalid['claim']\n\n    xtrain=xtrain[useful_features].to_numpy()\n    xvalid=xvalid[useful_features].to_numpy()\n    xtest =xtest[useful_features].to_numpy()\n    oof_preds, oof_y = [], []\n    \n    test_preds = np.zeros((xtest.shape[0]))\n    model=CatBoostClassifier(**catb_params)\n    \n    model = model.fit(xtrain, ytrain)\n    preds =model.predict_proba(xvalid)\n    oof_preds.extend(preds[:, 1])\n    oof_y.extend(yvalid)\n        \n    test_preds += model.predict_proba(xtest)[:, 1]\n    final_test_preds.append(test_preds)\n    final_valid_preds.update(dict(zip(valid_ids,preds[:,1])))\n    rmse = roc_auc_score(yvalid, preds[:, 1])\n    \n    print(f\"ROC AUC of current fold is {rmse}\")\n        \n    rmse = roc_auc_score(oof_y, oof_preds)\n    score.append(rmse)\nprint(\"SCORE\")\nprint(np.mean(score))","d554ba57":"final_valid_preds =pd.DataFrame.from_dict(final_valid_preds,orient=\"index\").reset_index()\nfinal_valid_preds.columns=[\"id\",\"pred_1\"]\nfinal_valid_preds.to_csv(\"level1_train_pred_1.csv\",index =False)\n\nsample_submission.claim =np.mean(np.column_stack(final_test_preds),axis=1)\nsample_submission.columns=[\"id\",\"pred_1\"]\nsample_submission.to_csv(\"level1_test_pred_1.csv\",index=False)","bf550ea1":"#level-1\/model-2\nfinal_test_preds=[] \nfinal_valid_preds={}\nscore=[]\nfor fold in range(5):\n    xtrain=df[df.kfold !=fold].reset_index(drop=True) \n    xvalid=df[df.kfold ==fold].reset_index(drop=True)\n    xtest=df_test.copy()\n    valid_ids=xvalid.id.values.tolist()\n    ytrain=xtrain['claim']\n    yvalid=xvalid['claim']\n\n    xtrain=xtrain[useful_features].to_numpy()\n    xvalid=xvalid[useful_features].to_numpy()\n    xtest =xtest[useful_features].to_numpy()\n    oof_preds, oof_y = [], []\n    \n    test_preds = np.zeros((xtest.shape[0]))\n    model=LGBMClassifier(**lgbm_params)\n    \n    model = model.fit(xtrain, ytrain)\n    preds =model.predict_proba(xvalid)\n    oof_preds.extend(preds[:, 1])\n    oof_y.extend(yvalid)\n        \n    test_preds += model.predict_proba(xtest)[:, 1]\n    final_test_preds.append(test_preds)\n    final_valid_preds.update(dict(zip(valid_ids,preds[:,1])))\n    rmse = roc_auc_score(yvalid, preds[:, 1])\n    \n    print(f\"ROC AUC of current fold is {rmse}\")\n        \n    rmse = roc_auc_score(oof_y, oof_preds)\n    \n    score.append(rmse)\nprint(\"SCORE\")\nprint(np.mean(score))","eed4ba99":"final_valid_preds =pd.DataFrame.from_dict(final_valid_preds,orient=\"index\").reset_index()\nfinal_valid_preds.columns=[\"id\",\"pred_2\"]\nfinal_valid_preds.to_csv(\"level1_train_pred_2.csv\",index =False)\n\nsample_submission.claim =np.mean(np.column_stack(final_test_preds),axis=1)\nsample_submission.columns=[\"id\",\"pred_2\"]\nsample_submission.to_csv(\"level1_test_pred_2.csv\",index=False)","55b9c094":"#level-1\/model-3\nfinal_test_preds=[] \nfinal_valid_preds={}\nscore=[]\nfor fold in range(5):\n    xtrain=df[df.kfold !=fold].reset_index(drop=True) \n    xvalid=df[df.kfold ==fold].reset_index(drop=True)\n    xtest=df_test.copy()\n    valid_ids=xvalid.id.values.tolist()\n    ytrain=xtrain['claim']\n    yvalid=xvalid['claim']\n\n    xtrain=xtrain[useful_features].to_numpy()\n    xvalid=xvalid[useful_features].to_numpy()\n    xtest =xtest[useful_features].to_numpy()\n    oof_preds, oof_y = [], []\n    \n    test_preds = np.zeros((xtest.shape[0]))\n    model=XGBClassifier(**xgb_params)\n    \n    model = model.fit(xtrain, ytrain)\n    preds =model.predict_proba(xvalid)\n    oof_preds.extend(preds[:, 1])\n    oof_y.extend(yvalid)\n        \n    test_preds += model.predict_proba(xtest)[:, 1]\n    final_test_preds.append(test_preds)\n    final_valid_preds.update(dict(zip(valid_ids,preds[:,1])))\n    rmse = roc_auc_score(yvalid, preds[:, 1])\n    \n    print(f\"ROC AUC of current fold is {rmse}\")\n        \n    rmse = roc_auc_score(oof_y, oof_preds)\n    \n    score.append(rmse)\nprint(\"SCORE\")\nprint(np.mean(score))","11a337ab":"final_valid_preds =pd.DataFrame.from_dict(final_valid_preds,orient=\"index\").reset_index()\nfinal_valid_preds.columns=[\"id\",\"pred_3\"]\nfinal_valid_preds.to_csv(\"level1_train_pred_3.csv\",index =False)\n\nsample_submission.claim =np.mean(np.column_stack(final_test_preds),axis=1)\nsample_submission.columns=[\"id\",\"pred_3\"]\nsample_submission.to_csv(\"level1_test_pred_3.csv\",index=False)","dff7186b":"df = pd.read_csv(\"..\/input\/september-folds\/train_folds.csv\")\ndf_test=pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\nsample_submission=pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\n\ndf1=pd.read_csv(\"level1_train_pred_1.csv\")\ndf2=pd.read_csv(\"level1_train_pred_2.csv\")\ndf3=pd.read_csv(\"level1_train_pred_3.csv\")\n\n\ndf_test1=pd.read_csv(\"level1_test_pred_1.csv\")\ndf_test2 =pd.read_csv(\"level1_test_pred_2.csv\")\ndf_test3=pd.read_csv(\"level1_test_pred_3.csv\")","0fb3e290":"df=df.merge(df1,on=\"id\",how=\"left\")\ndf=df.merge(df2,on=\"id\",how=\"left\")\ndf=df.merge(df3,on=\"id\",how=\"left\")\n","f27d29a2":"df_test =df_test.merge(df_test1,on=\"id\",how=\"left\")\ndf_test=df_test.merge(df_test2,on=\"id\",how=\"left\")\ndf_test =df_test.merge(df_test3,on=\"id\",how=\"left\")","598c2074":"useful_features=[\"pred_1\",\"pred_2\",\"pred_3\"]","4d0858c6":"final_test_preds=[] \nfinal_valid_preds={}\nscore=[]\nfor fold in range(5):\n    xtrain=df[df.kfold !=fold].reset_index(drop=True) \n    xvalid=df[df.kfold ==fold].reset_index(drop=True)\n    xtest=df_test.copy()\n    valid_ids=xvalid.id.values.tolist()\n    ytrain=xtrain['claim']\n    yvalid=xvalid['claim']\n\n    xtrain=xtrain[useful_features].to_numpy()\n    xvalid=xvalid[useful_features].to_numpy()\n    xtest =xtest[useful_features].to_numpy()\n    oof_preds, oof_y = [], []\n    \n    test_preds = np.zeros((xtest.shape[0]))\n    model=linear_model.LogisticRegression(solver='liblinear',max_iter=10,random_state=42)\n    model = model.fit(xtrain, ytrain)\n    preds =model.predict_proba(xvalid)\n    oof_preds.extend(preds[:, 1])\n    oof_y.extend(yvalid)\n        \n    test_preds += model.predict_proba(xtest)[:, 1]\n    final_test_preds.append(test_preds)\n    final_valid_preds.update(dict(zip(valid_ids,preds[:,1])))\n    rmse = roc_auc_score(yvalid, preds[:, 1])\n    \n    print(f\"ROC AUC of current fold is {rmse}\")\n        \n    rmse = roc_auc_score(oof_y, oof_preds)\n    \n    score.append(rmse)\nprint(\"SCORE\")\nprint(np.mean(score))","57577985":"sample_submission.claim =np.mean(np.column_stack(final_test_preds),axis=1)\nsample_submission.to_csv(\"submission.csv\",index =False)","bb51d365":"Level-1"}}