{"cell_type":{"850b72a7":"code","7c748bb5":"code","33069bee":"code","e6f04c9d":"code","216a8fb0":"code","29237995":"code","6ffba795":"code","15620058":"code","5b34cf79":"code","bcf7cf90":"code","27975c2d":"code","065e32cd":"markdown","5c608d45":"markdown","6491e2a1":"markdown","a240705c":"markdown"},"source":{"850b72a7":"# library imports\nimport os\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","7c748bb5":"# read the CSV files\npath = '..\/input\/seti-breakthrough-listen\/'\ntrain_df = pd.read_csv(os.path.join(path, 'train_labels.csv'))\ntrain_df.head()","33069bee":"sns.countplot(x=train_df['target'])\nplt.show()","e6f04c9d":"train_df['target'].value_counts(normalize=True)","216a8fb0":"# get the file ids for both the classes\nclass_1 = train_df[train_df['target'] == 1][:2]\nclass_0 = train_df[train_df['target'] == 0][:2]\nclass_1 = list(zip(class_1.id, class_1.target))\nclass_0 = list(zip(class_0.id, class_0.target))\nsample_data = [*class_1, *class_0]\nsample_data","29237995":"id = sample_data[0][0]\narray = np.load(os.path.join(path, f'train\/{id[0]}\/{id}' + '.npy'))\narray.shape","6ffba795":"def plot_data(ids:str, target:int)->None:\n    array = np.load(os.path.join(path, f'train\/{ids[0]}\/{ids}' + '.npy'))\n    fig = plt.figure(figsize=(9, 8))\n    for i in range(6):\n        ax = fig.add_subplot(6, 1, i+1)\n        ax.imshow(array[i].astype('float'), interpolation='nearest', aspect='auto')\n        state = 'ON' if i%2 == 0 else 'OFF'\n        if i == 0:\n            ax.set_title(f'Id: {ids}, target: {target}, state: {state} target', size=16)\n        else:\n            ax.set_title(f'{state} target', size=16)\n        plt.tight_layout()","15620058":"# plot the data\nid, target = sample_data[0][0], sample_data[0][1]\nplot_data(id, target)","5b34cf79":"# plot the data\nid, target = sample_data[1][0], sample_data[1][1]\nplot_data(id, target)","bcf7cf90":"# plot the data\nid, target = sample_data[2][0], sample_data[2][1]\nplot_data(id, target)","27975c2d":"# plot the data\nid, target = sample_data[3][0], sample_data[3][1]\nplot_data(id, target)","065e32cd":"As suspected, we are looking at a highly imbalanced class problem with around 91% `class:0` and rest for `class:1`. Let's check out some of the training data.","5c608d45":"## Introduction\n**(_This is a work in progress. More stuff related to modelling will be posted in upcoming days._)**\n\n__The Wow! Signal__ is a narrowband radio signal observed by Ohio State University's Big Ear radio telescope in 1977. The signal appeared to come from the direction of the constellation Sagittarius and lasted just for 72 seconds. Jerry R. Ehman, the astronomer who spotted it on a computer printout days later was so impressed that he quickly scrawled \u201cWow!\u201d in red pen across the page. The data looked much like what SETI astronomers expected to see from an alien intelligence. However, despite many attempts to follow up on the find, the so-called \u201cWow! Signal\u201d has never reappeared.\n\n<a href=\"https:\/\/imgur.com\/lV1dQtn\"><img src=\"https:\/\/i.imgur.com\/lV1dQtn.png\" title=\"source: imgur.com\" \/><\/a>\n\nThe Breakthrough Listen instrument at the Green Bank Telescope (GBT) is a digital spectrometer, which takes incoming raw data from the telescope (amounting to hundreds of TB per day) and performs a Fourier Transform to generate a spectrogram.\n\nBreakthrough Listen generates spectrograms which typically span several GHz of the radio spectrum (rather than the approx. 2 MHz shown above). The data are stored either as filterbank format or HDF5 format files, but essentially are arrays of intensity as a function of frequency and time, accompanied by headers containing metadata such as the direction the telescope was pointed in, the frequency scale, and so on. We generate over 1 PB of spectrograms per year; individual filterbank files can be tens of GB in size. For the purposes of the Kaggle challenge, we have discarded the majority of the metadata and are simply presenting numpy arrays consisting of small regions of the spectrograms that we refer to as \u201csnippets\u201d.\n\nBreakthrough Listen is searching for candidate signatures of extraterrestrial technology - so-called technosignatures. The main obstacle to doing so is that our own human technology (not just radio stations, but wifi routers, cellphones, and even electronics that are not deliberately designed to transmit radio signals) also gives off radio signals. We refer to these human-generated signals as \u201cradio frequency interference\u201d, or RFI.\n\nOne method we use to isolate candidate technosignatures from RFI is to look for signals that appear to be coming from particular positions on the sky. Typically we do this by alternating observations of our primary target star with observations of three nearby stars: 5 minutes on star \u201cA\u201d, then 5 minutes on star \u201cB\u201d, then back to star \u201cA\u201d for 5 minutes, then \u201cC\u201d, then back to \u201cA\u201d, then finishing with 5 minutes on star \u201cD\u201d. One set of six observations (ABACAD) is referred to as a \u201ccadence\u201d. Since we\u2019re just giving you a small range of frequencies for each cadence, we refer to the datasets you\u2019ll be analyzing as \u201ccadence snippets\u201d.\n\n<a href=\"https:\/\/imgur.com\/HQqsec1\"><img src=\"https:\/\/i.imgur.com\/HQqsec1.png\" title=\"source: imgur.com\" \/><\/a>\n\nAs the plot title suggests, this is the Voyager 1 spacecraft. Even though it\u2019s 20 billion kilometers from Earth, it\u2019s picked up clearly by the GBT. The first, third, and fifth panels are the \u201cA\u201d target (the spacecraft, in this case). The yellow diagonal line is the radio signal coming from Voyager. It\u2019s detected when we point at the spacecraft, and it disappears when we point away. It\u2019s a diagonal line in this plot because the relative motion of the Earth and the spacecraft imparts a Doppler drift, causing the frequency to change over time.","6491e2a1":"Before moving further, let's check out the distribution of the target.","a240705c":"## Data Overview\n- __train\/__ - a training set of cadence snippet files stored in numpy float16 format (v1.20.1), one file per cadence snippet id, with corresponding labels found in the `train_labels.csv` file. Each file has dimension (6, 273, 256), with the 1st dimension representing the 6 positions of the cadence, and the 2nd and 3rd dimensions representing the 2D spectrogram.\n- __test\/__ - the test set cadence snippet files; you must predict whether or not the cadence contains a \"needle\", which is the target for this competition\n- __train_labels__ - targets corresponding (by id) to the cadence snippet files found in the train\/ folder"}}