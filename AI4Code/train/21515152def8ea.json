{"cell_type":{"1cc4ae08":"code","95c9dfbb":"code","9e695bf7":"code","d699396a":"code","0f13ab95":"code","a18eb548":"code","1d178e9e":"code","24c2f602":"code","8424325b":"code","b8dd822c":"code","5e95e256":"code","2ad8d9a4":"code","647582cc":"code","d23322c0":"code","19ab5ce3":"code","9936ff1b":"code","a5942650":"code","5777d4ac":"code","c8becc6e":"code","3e356df1":"code","6322648b":"code","e716d088":"code","284a45e0":"code","0d2719d9":"code","9531fcb5":"code","1a09657c":"code","dd02cdcb":"code","0c1b647d":"code","ca44c366":"code","97783362":"code","e39a50ef":"code","b4fdab7b":"code","48eb8ae5":"code","3924a054":"code","5b1084d7":"code","c04e7643":"code","f6be7c1a":"code","f1699d22":"code","8ea49308":"code","c541e26c":"code","6c876e24":"code","c687aedf":"code","2942b60c":"code","3277aaca":"code","5c6848fa":"code","19858e59":"code","6d4f76d9":"code","696970e5":"code","24d9f051":"code","253a1dca":"code","7c392672":"code","63cc1ba7":"code","b5bd6dc6":"code","7579aaa7":"code","720c03e6":"code","f4ab522e":"code","b78b800e":"code","ee97abeb":"code","9e4ee9c8":"code","8e795812":"code","f94e4401":"markdown","fe1fc72e":"markdown","8215b006":"markdown","fb44cf23":"markdown","c81db0fa":"markdown","3cc67eaf":"markdown","04816b15":"markdown","f57bac18":"markdown","8e93b1e9":"markdown","aab3775b":"markdown","41577bc4":"markdown","18eda9b6":"markdown","c8faacb8":"markdown","07594c3f":"markdown","9addad8c":"markdown","3cc75fd7":"markdown","3e5fac96":"markdown","7f4887b0":"markdown","fdb83e42":"markdown","b4c8edd7":"markdown","833ad661":"markdown","4b3e0ef5":"markdown","16dc0e53":"markdown"},"source":{"1cc4ae08":"import pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport folium\nfrom keras.preprocessing import image\n","95c9dfbb":"covid_df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ncovid_df.head()","9e695bf7":"df_confirmed= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndf_deaths= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\ndf_recovered= pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')","d699396a":"df_confirmed.head(3)","0f13ab95":"df_deaths.head(3)","a18eb548":"df_recovered.head(3)","1d178e9e":"countries_1= set(covid_df['Country\/Region'])\ncountries_2= set(df_confirmed['Country\/Region'])\nprint(len(countries_1))\nprint(len(countries_2))","24c2f602":"diff1=[]\nfor item in countries_1:\n    if item not in countries_2:\n        diff1.append(item)\nprint(len(diff1))\ndiff1\n        ","8424325b":"diff2=[]\nfor item in countries_2:\n    if item not in countries_1:\n        diff2.append(item)\nprint(len(diff2))\ndiff2","b8dd822c":"print(df_confirmed.shape)\nprint(df_deaths.shape)\nprint(df_recovered.shape)","5e95e256":"set1= set(df_confirmed['Country\/Region'])\nset2= set(df_recovered['Country\/Region'])","2ad8d9a4":"print(len(set1))\nprint(len(set2))\n#as we see the unique values of countries are the same in botn (so no problem), we can deal with it","647582cc":"liste1=[]\nfor item in set1:\n    if len(df_confirmed.loc[df_confirmed['Country\/Region']== item])!=1:\n           liste1.append(item)\nprint(liste1)\nprint(len(liste1))","d23322c0":"liste2=[]\nfor item in set2:\n    if len(df_recovered.loc[df_recovered['Country\/Region']== item])!=1:\n           liste2.append(item)\nprint(liste2)\nprint(len(liste2))","19ab5ce3":"for item in liste1:\n    if item in liste2:\n        continue\n    else:\n        print(item)","9936ff1b":"df_confirmed[df_confirmed['Country\/Region']=='Canada']","a5942650":"df_recovered[df_recovered['Country\/Region']=='Canada']","5777d4ac":"df_conf_col= df_confirmed.keys()[4:]\ndf_deaths_col = df_deaths.keys()[4:]\ndf_recov_col = df_recovered.keys()[4:]\nif (df_conf_col.equals(df_deaths_col)) & (df_conf_col.equals(df_recov_col)):\n    print(\"The same columns in the 3 datasets\")\n","c8becc6e":"df_confirmed= df_confirmed.groupby('Country\/Region').sum()\ndf_confirmed.reset_index(inplace=True)\ndf_confirmed.shape","3e356df1":"df_deaths= df_deaths.groupby('Country\/Region').sum()\ndf_deaths.reset_index(inplace=True)\ndf_deaths.shape","6322648b":"df_recovered= df_recovered.groupby('Country\/Region').sum()\ndf_recovered.reset_index(inplace=True)\ndf_recovered.shape","e716d088":"df_confirmed.head()","284a45e0":"df_deaths.head()","0d2719d9":"df_recovered.head()","9531fcb5":"dates= df_confirmed.columns[3:]\ndates","1a09657c":"df_confirmed= df_confirmed.melt(id_vars= ['Country\/Region','Lat','Long'],\n                               value_vars= dates,\n                               var_name= 'Date',\n                               value_name= 'confirmed' )\ndf_confirmed","dd02cdcb":"df_deaths= df_deaths.melt(id_vars= ['Country\/Region','Lat','Long'],\n                         value_vars = dates,\n                         var_name ='Date',\n                         value_name = 'deaths')\ndf_deaths","0c1b647d":"df_recovered= df_recovered.melt(id_vars= ['Country\/Region','Lat','Long'],\n                               value_vars= dates,\n                                var_name= 'Date',\n                                value_name='recovered')\ndf_recovered","ca44c366":"#concatenate the three dataframes into one:\ndf_covid= pd.concat([df_confirmed,df_deaths['deaths'],df_recovered['recovered']], axis=1)\ndf_covid.head()","97783362":"#we check if we have null values\ndf_covid.isnull().sum()","e39a50ef":"df_covid.info()\n#As e see, below, 'Date' has the type 'object' (String)","b4fdab7b":"df_covid['Date']= df_covid['Date'].apply(lambda x: datetime.datetime.strptime(x,'%m\/%d\/%y'))","48eb8ae5":"df_covid.head()","3924a054":"df_covid.info()\n#The 'Date' column has, now the type datetime64","5b1084d7":"df_covid","c04e7643":"#choose random day\ndf_covid_group= df_covid.groupby('Date')\nfor date, group in df_covid_group:\n    if date == df_covid.loc[np.random.choice(range(len(df_covid))),'Date']:\n        print(date)\n        print(\"****************************************************\")\n        print(group)\n    ","f6be7c1a":"df_covid_country = df_covid.groupby(['Date','Country\/Region']).aggregate({'confirmed': sum,\\\n                                                                            'deaths': sum, 'recovered':sum})","f1699d22":"df_covid_country","8ea49308":"df_covid_country.loc[(datetime.datetime.strptime('02\/27\/21','%m\/%d\/%y'),'Tunisia')]","c541e26c":"df_covid_country.loc[(datetime.datetime.strptime('02\/27\/21','%m\/%d\/%y'), 'US')]","6c876e24":"df_covid_country.loc[(datetime.datetime.strptime('02\/27\/21','%m\/%d\/%y'), 'China')]","c687aedf":"df_covid_country.loc[(datetime.datetime.strptime('02\/27\/21','%m\/%d\/%y'), 'France')]","2942b60c":"df_covid_country.loc[(datetime.datetime.strptime('02\/27\/21','%m\/%d\/%y'), 'Morocco')]","3277aaca":"df_covid_2= df_covid.groupby('Country\/Region').aggregate({'confirmed':max, 'deaths':max, 'recovered':max})\ndf_covid_2","5c6848fa":"# Top 10 highest confirmed cases (Prevalence)\ntop_10_confirmed= df_covid_2.sort_values(by='confirmed',ascending=False)[0:10]\ntop_10_confirmed","19858e59":"# Top 10 highest recovered cases \ntop_10_recovered= df_covid_2.sort_values(by='recovered',ascending=False)[0:10]\ntop_10_recovered","6d4f76d9":"# Top 10 highest deaths\ntop_10_deaths= df_covid_2.sort_values(by='deaths',ascending=False)[0:10]\ntop_10_deaths","696970e5":"#just for recall\ndf_covid_country","24d9f051":"for country, df_country in df_covid_country.groupby(level=1):\n    if country in ['Tunisia','Algeria','Morocco','France','US','China','India','Korea, South']:\n        dates= list(df_country.index.get_level_values('Date'))\n        confirmed= list(df_country.confirmed)\n        recovered= list(df_country.recovered)\n        deaths= list(df_country.deaths)\n        plt.bar(dates, confirmed, color='blue')\n        plt.bar(dates,recovered,color='green')\n        plt.bar(dates,deaths,color='red')\n        plt.xlabel('Dates')\n        plt.ylabel('Number of people')\n        plt.title(country)\n        plt.legend()\n        plt.show()","253a1dca":"#Just for recall\ntop_10_confirmed.head(3)","7c392672":"def plot_pie_covid(df, column,title):\n    \n    labels_countries= list(df.index)\n    values= df[column].values\n    explode= [0 for i in range(10)]\n    \n    with plt.style.context({'axes.prop_cycle': plt.cycler('color',plt.cm.tab20.colors)}):\n        fig,ax= plt.subplots(figsize=(12,6))\n        ax.pie(values, explode= explode,labels= labels_countries, autopct='%1.0f%%')\n        ax.axis('equal')\n        plt.legend(loc=1)\n        plt.title(title,fontsize=15)\n    plt.show()\n    ","63cc1ba7":"plot_pie_covid(top_10_confirmed, 'confirmed','Covid_19:Top_10 highest confirmed cases(Last update 2021)')","b5bd6dc6":"plot_pie_covid(top_10_recovered, 'recovered','Covid_19:Top_10 highest recovered cases\\\n(Last update 2021)')","7579aaa7":"plot_pie_covid(top_10_recovered, 'deaths',' Covid_19: Top_10 highest deaths:Last update 2021')","720c03e6":"for country, df_country in df_covid_country.groupby(level=1): \n    \n    if country in ['Tunisia','Algeria','Morocco','France','China','India','Korea, South']:\n        \n        dates = list(df_country.index.get_level_values('Date'))\n        confirmed = list(df_country.confirmed)\n        recovered = list(df_country.recovered)\n        deaths = list(df_country.deaths)\n    \n        df = pd.DataFrame(dates)\n        df['confirmed'] = confirmed\n        df['deaths'] = deaths\n        df['recovered']= recovered\n        \n        df_unrolled = df.diff().fillna(df) \n        df_unrolled[0] = dates\n        \n        plt.figure(figsize=(12,6))\n        plt.plot(dates, df_unrolled['confirmed'], color='blue', \n             label='Confirmed cases per day')\n        plt.plot(dates, df_unrolled['recovered'], color='green',\n                label= 'Recovered cases per day')\n        plt.plot(dates, df_unrolled['deaths'], color='red', \n             label='Deaths per day')\n        plt.xlabel('Dates')\n        plt.ylabel('Number of people')\n        plt.title(country)\n        plt.legend()\n        plt.show()","f4ab522e":"df_covid.head()","b78b800e":"most_recent_date= df_covid['Date'].max()\ndf_covid_3= df_covid[df_covid.Date==most_recent_date]\ndf_covid_3.set_index('Country\/Region',inplace=True)","ee97abeb":"df_covid_3.head()","9e4ee9c8":"folium_map= folium.Map(location=[40.738,-73.98], zoom_start=4)\ncolor= '#E37222'\nscale= 50000\nfor place in df_covid_3.index:\n    lat= df_covid_3.loc[place]['Lat']\n    long= df_covid_3.loc[place]['Long']\n    confirmed= df_covid_3.loc[place]['confirmed']\n    recovered= df_covid_3.loc[place]['recovered']\n    deaths= df_covid_3.loc[place]['deaths']\n    \n    marker_confirmed= folium.CircleMarker(location=[lat,long],\n                                         radius= confirmed\/scale,\n                                         color='blue',\n                                         fill=True)\n    marker_confirmed.add_to(folium_map)\n    \n    marker_recovered= folium.CircleMarker(location=[lat,long],\n                                         radius= recovered\/scale,\n                                         color='green',\n                                         fill=True)\n    marker_recovered.add_to(folium_map)\n    \n    radius_deaths= deaths\/scale if deaths >0 else 0.000000001\n    marker_deaths= folium.CircleMarker(location=[lat, long],\n                                 radius=radius_deaths,\n                                 color=\"red\",\n                                 fill=True)\n    marker_deaths.add_to(folium_map)\n                                    \nfolium_map.save('.\/Covid-19 Map.html')                                    ","8e795812":"image_path= '..\/input\/world-map-covid19\/world_map covid19.jpg'\nimg= image.load_img(image_path)\nimg","f94e4401":"## **Step_0: Data Exploration**","fe1fc72e":"#### **- Transform the dataframes, so that they have the same shape**","8215b006":"=> **As we see, the main difference is about how the names have been written (for example, about \"Cote d'Ivoire: it is written in French but in the first dataset, it is written in English (Ivory Coast), but also we have other types of differences :for example : \"Guadaloupe\",\"Martinique\", \"Reunion\"..are  Overseas Departments and Territories (of France), while, these territories are included in France(in the other datasets)...**","fb44cf23":"#### **- Explore the difference between covid_19_data.csv and the other datasets?**","c81db0fa":"##### ***Important Note:the peaks that fall below 0?***\nwe notice that some countries like France, have some peaks that fall below 0: This is probably due to the adjustments made to the numbers. For example, one day the recorded number may be 8000, but the next day the (cumulative) number may be adjusted down to 6000 (due to errors in tests, records,etc.).\n","3cc67eaf":"#### **- Explore why the length of df_recovered is different from df_confirmed(and df_deaths)?**","04816b15":"#### **2- Pie charts**","f57bac18":"=> **As, we see below, canada in df_confirmed(the same thing with df_deaths) has many Provine\/states, but in df_recovered has only one entry: this is all the difference between the datasets.**","8e93b1e9":"#### **1- bar charts for confirmed, recovered cases and deaths for some countries**","aab3775b":"## **Step_2: Data analysis**","41577bc4":"#### **3- Flatten the cumulitave curves for some countries**","18eda9b6":"#### **- Get the Top 10 : highest nulber of deaths, confirmed & recovered cases**","c8faacb8":"## **Step_3: Covid Data Visualization: bar charts, pie charts, flattened cumulative charts & world map showing the prevalence of covid-19**","07594c3f":"#### **- Combine the dataframes, into one, containing 3 columns: confirmed, deaths, recovered**","9addad8c":"#### **4- Show the confirmed, recovered cases and deaths on the world map**","3cc75fd7":"#### **- Get data for a specific day & a specific country**","3e5fac96":"**Note:**\n\nthe recorded numbers (confirmed, recovered cases and deaths) are all **cumulative** and because they are cumulative, it would be difficult to know **whether the situation in a country is getting better or worse.** So, with this code, below, we will **\"unroll\"** the numbers to get the new numbers **reported for each day.** : ","7f4887b0":"#### **- Explore the columns**","fdb83e42":"#### **- Convert \"Date\" column to datetime format, so that we could perform a sort based on dates**","b4c8edd7":"\n## **Table of Contents**\n### **Step_0: Data Exploration**\n\n### **Step_1: Data preparation**\n\n### **Step_2: Data Analysis**\n\n### **Step_3: Covid Data Visualization:bar charts, pie charts, flattened cumulative charts & world map showing the prevalence of covid-19**\n\n","833ad661":"#### **- Display the daily number of confirmed, recovered cases and deaths**","4b3e0ef5":"#### **- Display the daily number of confirmed, recovered cases and deaths per country**","16dc0e53":"## **Step_1: Data preparation**"}}