{"cell_type":{"6b9fa157":"code","18be2f10":"code","3855cd10":"code","f7cd3829":"code","77637b6a":"code","ac8dfe94":"code","c1ec4a62":"markdown","eee4934d":"markdown"},"source":{"6b9fa157":"### importing the required libraries\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","18be2f10":"## importing the data and selecting the independent and independent variables \n\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntrain_data.dropna(axis=0, subset=['SalePrice'], inplace=True)\n\ny = train_data.SalePrice\nX = train_data.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])","3855cd10":"## splitting the data for training and testing and cleaning it using imputation \n\ntrain_X, test_X, train_y, test_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)\nmy_imputer = Imputer()\ntrain_X = my_imputer.fit_transform(train_X)\ntest_X = my_imputer.fit_transform(test_X)","f7cd3829":"## making predictions using the Decision Tree algorithm \n\ndecision_model = DecisionTreeRegressor()  \ndecision_model.fit(train_X, train_y) \npredicted_decision_trees = decision_model.predict(test_X)\nprint (\"Mean Absolute Error using Decision Tress :\", mean_absolute_error(test_y, predicted_decision_trees))","77637b6a":"## making predictions using the Random Forest algorithm \n\nforest_model = RandomForestRegressor(n_estimators=100, max_depth=10)\nforest_model.fit(train_X, train_y )\npredicted_random_forest = forest_model.predict(test_X)\nprint(\"Mean Absolute Error using Random Forest:\", mean_absolute_error(test_y, predicted_random_forest))","ac8dfe94":"## making predictions using the XGBoost algorithm \n\nxg_model = XGBRegressor(n_estimators=100)\nxg_model.fit(train_X, train_y)\npredicted_XGBoost = xg_model.predict(test_X)\nprint(\"Mean Absolute Error using XGBoost: \", mean_absolute_error(test_y, predicted_XGBoost))","c1ec4a62":"**This notebook compares the performance of common regression algorithms for the same dataset.\n1. Decision Trees\n2. Random Forest\n3. XGBoost**","eee4934d":"<strong>As evident from the above metrics, we can conclude that using a combination of Decision Trees (Random Forest) can prove to be very useful in bringing down the errors (increaing accuracy). Also, further improvement in the results can be made using some kind of boosting algorithm.<\/strong>"}}