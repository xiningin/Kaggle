{"cell_type":{"c46e0338":"code","d8fbcd27":"code","8825b93f":"code","260ec5b0":"code","dfdea4a8":"code","cb1799db":"code","a47dce9b":"code","2f3244c7":"code","f645fcd5":"code","99294d43":"code","9c988bf7":"code","ba5c9624":"code","ff6e5b54":"code","939d9ab9":"code","f67874c1":"code","e0edb827":"code","f68e3460":"code","57006925":"code","88ecd28b":"code","3a15db48":"code","61e8df58":"code","1b63473e":"code","d952ef20":"code","91900060":"markdown","4a14edf7":"markdown","922d08e7":"markdown","7bb7964b":"markdown","833b89cf":"markdown","92592d64":"markdown","f051a1e0":"markdown","8679d50e":"markdown","9d357139":"markdown","016dda33":"markdown"},"source":{"c46e0338":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8fbcd27":"# we will focus on df_words in the analysis by applying multi-level indexing\n# import json\n\n# with open('\/kaggle\/input\/lord-of-the-rings-character-data\/LordOfTheRingsBook.json', 'r') as f:\n#     data = f.read()\n# data_book = json.loads(data)\n\n# df_characters = pd.read_csv('\/kaggle\/input\/lord-of-the-rings-character-data\/Characters.csv')\n# df_movies = pd.read_csv('\/kaggle\/input\/lord-of-the-rings-character-data\/Movies.csv')\ndf_words = pd.read_csv('\/kaggle\/input\/lord-of-the-rings-character-data\/WordsByCharacter.csv')","8825b93f":"df_words.info()","260ec5b0":"df_words.head(10)","dfdea4a8":"df_cat_describe = df_words.select_dtypes(include='O').describe()\ndf_cat_describe","cb1799db":"df_top_character = df_words.loc[df_words.Character==df_cat_describe.loc['top','Character'],:]\nprint(len(df_top_character))\nprint(df_top_character.Film.unique())","a47dce9b":"# default index\nprint(df_words.index)\nprint(type(df_words.index.values)) # return the underlying data in some unique data type by .values attribute\nprint(df_words.index.name) # by default, the index column of a df in RangeIndex, whose name attribute is None","2f3244c7":"# apply multi-indexing, use all categorical columns, and sort index to ensure efficiency\ndf_words_multi = df_words.set_index(['Film','Chapter','Race','Character']).sort_index()\ndf_words_multi.head(10)","f645fcd5":"# check for index after applying multi-indexing\nprint(df_words_multi.index.names)\nprint(df_words_multi.index.values[:10])\nprint('size of original data:',len(df_words))\nprint('size of multi-indexed data:',len(df_words_multi))","99294d43":"# apply reset_index to restore any level of multi-index\ndf_new = df_words_multi.reset_index(level=['Chapter','Race'])\ndf_original = df_words_multi.reset_index() # by default, reset_index removes all levels of indices and add to columns\ndf_new.head(10)","9c988bf7":"# Q1: Which characters speak in the first chapter of \u201cThe Fellowship of the Ring\u201d?\n\n# method 1: using single indexing + boolean operator\nprint(df_words.loc[(df_words.Film=='The Fellowship Of The Ring')&(df_words.Chapter=='01: Prologue'),'Character'].unique())\n\n# method 2: using multi-indexing (add sort_index() to boost performance, but this takes extra memory)\nprint(df_words.set_index(['Film','Chapter']).sort_index().loc[('The Fellowship Of The Ring','01: Prologue'),'Character'].unique())\n\n# method 2(concise): the multi-index does not need to be of same length between query and df\nprint(df_words_multi.loc[('The Fellowship Of The Ring','01: Prologue'),:].reset_index(level='Race',drop=True).index.unique().values)","ba5c9624":"# Q2: Who are the first three elves to speak in the \u201cThe Fellowship of the Ring\u201d? \n\n# method 1\nidx = pd.IndexSlice\nprint(df_words_multi.loc[idx['The Fellowship Of The Ring',:,'Elf',:]].reset_index(level='Character').iloc[0:3,:]['Character'].values)\n\n# method 2\nprint(df_words_multi.loc[('The Fellowship Of The Ring',slice(None),'Elf'),:].head(3).reset_index(level='Character')['Character'].values)\n\n# .head() is a nice shorthand for .iloc() ","ff6e5b54":"# Q3: How much do Gandalf and Saruman talk in each chapter of \u201cThe Two Towers\u201d? (indexing multiple possible values)\n        \n# method 1\ndf_words_multi.loc[('The Two Towers',slice(None),slice(None),['Gandalf','Saruman']),:]","939d9ab9":"# Q4: How much does Isildur speak in all of the films? (use pd.DataFrame.xs to get cross-section)\n\n# method 1:\ndf_grouped = df_words.groupby(['Film','Chapter','Race','Character']).sum() \ndf_grouped.loc[(slice(None),slice(None),slice(None),'Galadriel'),:]","f67874c1":"# method 2:\ndf_words_multi.xs('Galadriel',level='Character')","e0edb827":"# Q5: Which hobbits speak the most in each film and across all three films? (use pivot table to both display single record & aggregated record)\n\n# method 1:\n# in each film\ndf_hobbit_each_film = df_words.loc[df_words.Race=='Hobbit'].groupby(['Film','Character']).sum().sort_values(['Film','Words'],ascending=False)\nfor film in df_words.Film.unique():\n    print('Hobbits speaking the most in {}'.format(film))\n#     print(df_hobbit_each_film.xs(film,level='Film').head(3))\n    print(df_hobbit_each_film.loc[film,:].head(3))\n\n# across all three films\nprint('Hobbits speaking the most across all 3 films:')\nprint(df_words.loc[df_words.Race=='Hobbit'].groupby(['Race','Character']).sum().sort_values(['Words'],ascending=False).head(3))","f68e3460":"# method 2:\npivoted = df_words.pivot_table(index = ['Race','Character'],\n                               columns = 'Film',\n                               aggfunc = 'sum',\n                               margins = True,\n                               margins_name = 'All Films',\n                               fill_value = 0).sort_index()\n\npivoted = pivoted.sort_values(by=('Words','All Films'),ascending=False) # notice the index is not aggregated!\npivoted","57006925":"pivoted.loc['Hobbit']","88ecd28b":"# How much does each race speak in different films\npivot_film_race = df_words.pivot_table(index=['Film','Chapter'],columns='Race',values='Words',aggfunc='sum',fill_value=0)\n# pivot_film_race\npivot_film_race.loc[('The Fellowship Of The Ring',slice(None))]","3a15db48":"# split into groups\n# 1. single-indexed df\ngrouped_single = df_words.groupby(['Film'],as_index=False)\nprint('size of the film group single:',len(grouped_single))\n# grouped_single.sum()\n# grouped_single.groups\n# for name, group in grouped_single:\n#     print(name)\n#     print(group)\n# grouped_single.get_group('The Fellowship Of The Ring')\ngrouped_single.groups['The Fellowship Of The Ring']","61e8df58":"# 2. multi-indexed df\ngrouped_multi = df_words_multi.groupby(level=[0,1])\n# grouped_multi = df_words_multi.groupby(['Film','Chapter'])\n# print('size of the film group multi:',len(grouped_multi))\n# grouped_multi.sum().reset_index()\ngrouped_multi.size()","1b63473e":"df_words_multi.head(10)","d952ef20":"df_words_multi.unstack(['Film','Chapter'])","91900060":"# Load Data","4a14edf7":"# Apply Multi-Indexing","922d08e7":"# Answer Questions (From the website)","7bb7964b":"# Some general data summary","833b89cf":"# Introduction","92592d64":"I will try out some multi-indexing functions in pandas, mainly following the link below:<br>\nhttps:\/\/towardsdatascience.com\/how-to-use-multiindex-in-pandas-to-level-up-your-analysis-aeac7f451fce#:~:text=The%20multi-level%20index%20feature%20in%20Pandas%20allows%20you,values%20can%20be%20numbers%2C%20from%200%20to%20infinity.<br>\nBut will also add my own analyses","f051a1e0":"It is worth noting that by multi-indexing the data, the size of the data does not change. What only changes is the index.","8679d50e":"# Answer Questions (of my own)","9d357139":"The data contained have multiple hierarchical columns: **Film -> Chapter -> Character -> Race**, and one value column: **Words**\nThere is no missing value in any of the columns.","016dda33":"# GroupBy Tests"}}