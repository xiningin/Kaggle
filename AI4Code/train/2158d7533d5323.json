{"cell_type":{"35f6019e":"code","7c76074e":"code","65cca16e":"code","9a70b29c":"code","0b8d33b3":"code","fdf2dd3f":"code","d7bf6d4e":"code","0be65a5d":"code","e40b2eab":"code","f2dbf319":"code","aade44de":"code","306d25a4":"code","ea305cb5":"code","7f06ef17":"code","e6735c98":"code","4ad83735":"code","07158b96":"code","804a4afb":"code","03a966e0":"code","c39bf21e":"code","6e94b198":"code","3f201a3a":"code","caf06377":"code","fbd633db":"markdown","c0bbb7c1":"markdown","fcd136f7":"markdown","78257afd":"markdown","22a97ddd":"markdown","24516032":"markdown","c4727a06":"markdown","3e283a84":"markdown","cb98cfba":"markdown","7fb18af1":"markdown","099f185e":"markdown","55d0f720":"markdown","fe917ce2":"markdown","8dec2196":"markdown","a5a6f84f":"markdown","678ff835":"markdown","50f71fb7":"markdown"},"source":{"35f6019e":"# preprocessing\nimport numpy as np\nimport pandas as pd \n\n# graph\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\n# model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\n\n# evaluation\nfrom sklearn.metrics import mean_squared_error\n\n# utils\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7c76074e":"seed = 223","65cca16e":"train_act = pd.read_csv('\/kaggle\/input\/train_activity.csv')\ntest1_act = pd.read_csv('\/kaggle\/input\/test1_activity.csv')\ntest2_act = pd.read_csv('\/kaggle\/input\/test2_activity.csv')\ntrain_pay = pd.read_csv('\/kaggle\/input\/train_payment.csv')\ntest1_pay = pd.read_csv('\/kaggle\/input\/test1_payment.csv')\ntest2_pay = pd.read_csv('\/kaggle\/input\/test2_payment.csv')\nprint('train activity shape: ',train_act.shape)\nprint('test1 activity shape: ',test1_act.shape)\nprint('test2 activity shape: ',test2_act.shape)\nprint('train payment shape: ',train_pay.shape)\nprint('test1 payment shape: ',test1_pay.shape)\nprint('test2 payment shape: ',test2_pay.shape)","9a70b29c":"train_label = pd.read_csv('\/kaggle\/input\/train_label.csv')\nprint('train_label shape: ',train_label.shape)","0b8d33b3":"validation_acc = pd.read_csv('\/kaggle\/input\/train_valid_user_id.csv')\nprint('validation_acc shape: ',validation_acc.shape)","fdf2dd3f":"train = train_act.groupby(['acc_id','char_id']).day.count().reset_index().groupby('acc_id').agg({'char_id':'count','day':'max'})\ntrain = pd.merge(train, train_label, on='acc_id', how='inner')\nprint('train shape: ',train.shape)","d7bf6d4e":"amount_by_acc_id = train_pay.groupby('acc_id').agg({'amount_spent':['max','median']})\namount_by_acc_id.columns = ['max_amount','median_amount']\ntrain = pd.merge(train, amount_by_acc_id, on='acc_id', how='left')\ntrain = train.fillna(0)\nprint('train shape: ',train.shape)","0be65a5d":"train_idx = validation_acc[validation_acc.set=='Train'].acc_id\nvalid_idx = validation_acc[validation_acc.set=='Validation'].acc_id\n\ntrain_set = train[train.acc_id.isin(train_idx)]\nvalid_set = train[train.acc_id.isin(valid_idx)]\n\nprint('train set: ',train_set.shape)\nprint('valid set: ',valid_set.shape)","e40b2eab":"def survival64(y_pred, dataset):\n    y_true = dataset.get_label()\n    y_pred = np.array([64 if x > 64 else x for x in y_pred])\n    y_pred = np.array([0 if x < 0 else x for x in y_pred])\n    y_pred = np.round(y_pred)\n    error = np.sqrt(mean_squared_error(y_true, y_pred))\n    return 'error', error, False","f2dbf319":"lr_amount = RandomForestRegressor()\nlr_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.amount_spent)\nlr_amount_pred = lr_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_amount_pred = pd.Series(lr_amount_pred).apply(lambda x: 0 if x < 0 else x)","aade44de":"lr_survival = RandomForestRegressor()\nlr_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n          train_set.survival_time)\nlr_survival_pred = lr_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlr_survival_pred = pd.Series(lr_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlr_survival_pred = lr_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","306d25a4":"lr_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lr_survival_pred,\n                           'amount_spent':lr_amount_pred})\nprint('lr_pred_df shape: ',lr_pred_df.shape)","ea305cb5":"rf_params = {\n    'n_estimators':1000,\n    'max_depth':10,\n    'n_jobs':5\n}","7f06ef17":"rf_amount = RandomForestRegressor(**rf_params)\nrf_amount.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n              train_set.amount_spent)\nrf_amount_pred = rf_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_amount_pred = pd.Series(rf_amount_pred).apply(lambda x: 0 if x < 0 else x)","e6735c98":"rf_survival = RandomForestRegressor(**rf_params)\nrf_survival.fit(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                train_set.survival_time)\nrf_survival_pred = rf_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nrf_survival_pred = pd.Series(rf_survival_pred).apply(lambda x: 64 if x > 64 else x)\nrf_survival_pred = rf_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","4ad83735":"rf_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':rf_survival_pred,\n                           'amount_spent':rf_amount_pred})\nprint('rf_pred_df shape: ',rf_pred_df.shape)","07158b96":"lgb_params = {\n    'n_estimators':800,\n    'sees':seed\n}","804a4afb":"lgb_train_amount = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                               train_set.amount_spent)\nlgb_train_survival = lgb.Dataset(train_set.drop(['acc_id','amount_spent','survival_time'], axis=1),\n                                 train_set.survival_time)","03a966e0":"lgb_amount = lgb.train(lgb_params, \n                       lgb_train_amount,\n                       feval=survival64,\n                       valid_sets=[lgb_train_amount],\n                       verbose_eval=100)\n\nlgb_amount_pred = lgb_amount.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)","c39bf21e":"lgb_survival = lgb.train(lgb_params, \n                         lgb_train_survival,\n                         feval=survival64,\n                         valid_sets=[lgb_train_survival],\n                         verbose_eval=100)\n\nlgb_survival_pred = lgb_survival.predict(valid_set.drop(['acc_id','amount_spent','survival_time'], axis=1))\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 64 if x > 64 else x)\nlgb_survival_pred = lgb_survival_pred.apply(lambda x: 0 if x < 0 else x).round()","6e94b198":"lgb_pred_df = pd.DataFrame({'acc_id':valid_set.acc_id.values,\n                           'survival_time':lgb_survival_pred,\n                           'amount_spent':lgb_amount_pred})\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)","3f201a3a":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result) \n    return score","caf06377":"lr_valid_score = score_function(lr_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nrf_valid_score = score_function(rf_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\nlgb_valid_score = score_function(lgb_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(valid_set[['acc_id','survival_time','amount_spent']],\n                            valid_set[['acc_id','survival_time','amount_spent']])\n\nprint('Linear Regression score: ',lr_valid_score)\nprint('Random Forest score: ',rf_valid_score)\nprint('Light GBM score: ',lgb_valid_score)\nprint('true score: ',true_score)","fbd633db":"# Split data\n\n\uc774\uc804\uc5d0 \ud559\uc2b5\ub370\uc774\ud130\uc640 \ud3c9\uac00\ub370\uc774\ud130\ub85c \ub098\ub208 \uc720\uc800 ID\ub97c \uac00\uc838\uc628\ub2e4","c0bbb7c1":"# Configuration\n\uae30\ubcf8 \uc124\uc815\uac12\uc744 \uc9c0\uc815\ud558\ub294 \uacf3","fcd136f7":"28\uc77c\ub3d9\uc548 payment \uae30\ub85d\uc774 \uc788\ub294 \uc720\uc800\ub9cc \ucd5c\ub300\uac12\uacfc \uc911\uac04\uac12\uc73c\ub85c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4","78257afd":"# Modeling","22a97ddd":"## Validation Data","24516032":"light GBM \uc0ac\uc6a9 \ub370\uc774\ud130\uc14b \uc0dd\uc131","c4727a06":"**Custom Metric**\n- survival time\uc758 \uacbd\uc6b0 64\uc774\uc0c1\uc778 \uac12\uc740 64\ub85c \ubcc0\ud658\ud574\uc8fc\uc5b4\uc57c \ud55c\ub2e4. \n- Boosting model\ub4e4\uc740 \ud559\uc2b5\uacfc\uc815\uc5d0 \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud558\uc5ec error\ub97c \ud559\uc2b5\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c \ud574\uacb0\uc5d0 \uc801\ud569\ud55c \ud3c9\uac00\uc9c0\ud45c\ub97c \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4.","3e283a84":"# Preprocessing\n\n`\uc0ac\uc6a9 \ubcc0\uc218`\n\n- char_id : \uc720\uc800\ubcc4 \uce90\ub9ad\ud130 \uc218\n- day : \ud65c\ub3d9\uc77c \uc218 \ud569\n- median_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \uc911\uac04\uac12\n- max_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \ucd5c\ub300\uac12","cb98cfba":"\uc720\uc800\ubcc4 \ubcf4\uc720 \uce90\ub9ad\ud130 \uc218\uc640 \ud65c\ub3d9\uc77c \uc218\uc758 \ud569\uc744 \ubcc0\uc218\ub85c \uc0ac\uc6a9\ud55c\ub2e4.","7fb18af1":"# Load Data","099f185e":"## Model 1: Linear Regression","55d0f720":"## Model 2: Random Forest","fe917ce2":"## Target","8dec2196":"# Evaluation\n\n\ud3c9\uac00\ub294 **Score function** \uc744 \ud1b5\ud574 \uae30\ub300\uc774\uc775\uc744 \uacc4\uc0b0\ud55c\ub2e4","a5a6f84f":"# Baseline Part 1\n\n## \uc0ac\uc6a9 \ubcc0\uc218\n- char_id : \uc720\uc800\ubcc4 \uce90\ub9ad\ud130 \uc218\n- day : \ud65c\ub3d9\uc77c \uc218 \ud569\n- median_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \uc911\uac04\uac12\n- max_amount : 28\uc77c\uac04 \uc720\uc800\ubcc4 \uc18c\ube44\uae08\uc561 \ucd5c\ub300\uac12\n    \n## \uc0ac\uc6a9 \ubaa8\ub378\n1. Linear Regression\n2. Random Forest\n3. Light GBM\n\n## \uacb0\uacfc\nModel | Score\n---|---\nTrue Label | 30704.35\nLinear Regression | 3492.45\nRandom Forest | 3993.83\nLight GBM | 3674.59","678ff835":"## Model3: Light GBM","50f71fb7":"1. Linear Regression\n2. Random Forest Regression\n3. Light GBM"}}