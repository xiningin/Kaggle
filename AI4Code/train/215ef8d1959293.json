{"cell_type":{"58bde7e0":"code","35b516f7":"code","02b1fc38":"code","3622be15":"code","fbbc302e":"code","c9443433":"code","4450acb1":"code","48caa5e7":"code","a263243f":"code","5af7dc13":"code","4f5d8839":"code","4a50e8a9":"code","9490f231":"code","33395624":"code","f60ca084":"code","5e047479":"code","4c1970ba":"code","26549b4c":"code","08488554":"code","58c85ff8":"code","dce7ee67":"code","616d4895":"code","2bd7b334":"code","38ec2c90":"code","941e1013":"code","973a687c":"code","505719c4":"code","ded809cc":"code","80466b0b":"code","321eab15":"code","82ca5b14":"code","a6d38b43":"code","afb19233":"markdown","079c3385":"markdown","6d040ce6":"markdown","2118be88":"markdown","58b3af5f":"markdown","41c89d13":"markdown","4f6da99c":"markdown","7567f9ee":"markdown","0d2413a8":"markdown"},"source":{"58bde7e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35b516f7":"games = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ngames.head()","02b1fc38":"games.info()","3622be15":"#Looking out for null records\ngames.isnull().sum()","fbbc302e":"games.dropna(inplace = True)","c9443433":"games.isnull().sum()","4450acb1":"games.describe()","48caa5e7":"# Then convert data from float to int\ngames.Year = games.Year.astype(int)\ngames.head()     # head method always gives you overview of data.","a263243f":"from matplotlib import pyplot as plt\ngames_sorted = games.sort_values(by = ['Year'])\ngames_sorted","5af7dc13":"sales_by_year = games_sorted.groupby('Year').Global_Sales.sum()\nplt.plot(sales_by_year)\nplt.legend()\nplt.xlabel('Years')\nplt.ylabel('Total Sales')","4f5d8839":"import seaborn as sns\nax=plt.figure(figsize=(10,6))\nsns.distplot(games['Year'],color='green')","4a50e8a9":"#Genres of games sold\ngenre = games_sorted.groupby('Genre').Name.count()\ngenre","9490f231":"fig, ax = plt.subplots(figsize=(9, 9))\nax.pie(genre, autopct='%.2f', labels=genre.index)\nax.set_title('Genre Popularity')\nplt.tight_layout()","33395624":"#Who was the most popular publisher during the time\npublisher = games_sorted.groupby('Publisher').Name.count()\npublisher = publisher.sort_values(ascending= False)\ntop_30 = publisher[:30].sort_values(ascending= False)\n# plt.bar(publisher.index(), publisher[1])","f60ca084":"top30=games[\"Publisher\"].value_counts().index\nplt.figure(figsize = (20,20))\nsns.barplot(games[\"Publisher\"].value_counts().iloc[:30], top30[:30]\n           ,palette='mako'\n           ,edgecolor='black'\n           )\nplt.title(\"Most Games produced in Specific Gaming Publisher\",fontsize=20)\nplt.show()","5e047479":"#Lets find out the 30 most famous games over the last 35 years\nName_game = games_sorted.groupby('Name').Global_Sales.sum()\nName_game = Name_game.sort_values(ascending = False)\nName_game_top_30 = Name_game[:30]\nfig, ax = plt.subplots(figsize=(8, 8))\nax.barh( Name_game_top_30.index, Name_game_top_30)\nax.set_title('Top 30 Games of all time(in terms of sales)')\nplt.tight_layout()","4c1970ba":"#We now find out the most sold games by popularity of consoles\nName_console = games_sorted.groupby('Platform').Platform.count()\nName_console = Name_console.sort_values(ascending = False)\n# Name_console_top_30 = Name_console[:30]\nfig, ax = plt.subplots(figsize=(8, 8))\nax.barh(Name_console.index, Name_console)\nax.set_title('Top consoles chosen by gamers')\nplt.tight_layout()","26549b4c":"# Which genre game has been released the most in a single year?\nyear_max_df = games.groupby(['Year', 'Genre']).size().reset_index(name='count')\nyear_max_idx = year_max_df.groupby(['Year'])['count'].transform(max) == year_max_df['count']\nyear_max_genre = year_max_df[year_max_idx].reset_index(drop=True)\nyear_max_genre = year_max_genre.drop_duplicates(subset=[\"Year\", \"count\"], keep='last').reset_index(drop=True)\ngenre = year_max_genre['Genre'].values\n\nplt.figure(figsize=(30, 15))\ng = sns.barplot(x='Year', y='count', data=year_max_genre)\nindex = 0\nfor value in year_max_genre['count'].values:\n    g.text(index, value + 5, str(genre[index] + '----' +str(value)), color='#000', size=14, rotation= 90, ha=\"center\")\n    index += 1\n\n\n\n\nplt.xticks(rotation=90)\nplt.show()","08488554":"#We look at the popular genres in each console\ngenre_NA = games_sorted.groupby('Genre').NA_Sales.sum()\ngenre_NA_sorted = genre_NA.sort_values(ascending = False)\ngenre_EU = games_sorted.groupby('Genre').EU_Sales.sum()\ngenre_EU_sorted = genre_EU.sort_values(ascending = False)\ngenre_JP = games_sorted.groupby('Genre').JP_Sales.sum()\ngenre_JP_sorted = genre_JP.sort_values(ascending = False)\n# Name_console_top_30 = Name_console[:30]\nfig, (ax1, ax2, ax3) = plt.subplots(1,3)\nfig.tight_layout(pad=5.0)\n# ax.pie(genre_NA_sorted, autopct='%.2f', labels=genre_NA_sorted.index)\nax1.barh(genre_NA_sorted.index, genre_NA_sorted)\nax2.barh(genre_EU_sorted.index, genre_EU_sorted)\nax3.barh(genre_JP_sorted.index, genre_JP_sorted)\n# ax.pie(genre_EU_sorted, autopct='%.2f', labels=genre_EU_sorted.index)\nax1.set_title('Top genres chosen by gamers in North America')\nax2.set_title('Top genres chosen by gamers in EU')\nax3.set_title('Top genres chosen by gamers in Japan')\nfig.tight_layout()\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=2, \n                    top=0.9, \n                    wspace=0.4, \n                    hspace=0.4)\nax1.set_xlabel('Sales')\nax1.set_ylabel('Genres')\nax2.set_xlabel('Sales')\nax2.set_ylabel('Genres')\nax3.set_xlabel('Sales')\nax3.set_ylabel('Genres')","58c85ff8":"corr = games.corr()\ncorr","dce7ee67":"import seaborn as sns\nfig, ax = plt.subplots(figsize=(8, 8))\nwith sns.axes_style(\"white\"):\n    ax = sns.heatmap(corr, linewidth=0.5,  cmap=\"YlGnBu\")\n    ax.set_title(\"Heatmap of the correlation between different variables with each other\")\n    ","616d4895":"ax = sns.regplot(x=\"NA_Sales\", y=\"Global_Sales\", data=games)","2bd7b334":"# We can have an equation like: Global_Sales(y) = b0 + NA_Sales*b1\nimport statsmodels.api as sm\n# duncan_prestige = sm.datasets.get_rdataset(\"Duncan\", \"carData\")\nY = games['Global_Sales']\nX = games['NA_Sales']\nX = sm.add_constant(X)\nmodel = sm.OLS(Y,X)\nresults = model.fit()\nresults.params","38ec2c90":"print(results.t_test([1, 0]))","941e1013":"print(results.f_test(np.identity(2)))","973a687c":"results.summary()","505719c4":"# Plot of the residuals\nimport scipy.stats as stats\nresiduals = sorted(results.resid) # Just in case it isn't sorted\nnormal_distribution = stats.norm.pdf(residuals, np.mean(residuals), np.std(residuals))\nplt.plot(residuals, normal_distribution)\n\nplt.show","ded809cc":"#We can also see that NA_Sales is highly correlated with EU_Sales\nax = sns.regplot(x=\"NA_Sales\", y=\"EU_Sales\", data=games)","80466b0b":"#We check if the NA_sales is succesful is correctly predicting if the games that do well in NA will do well in Europe\nY = games['EU_Sales']\nX = games['NA_Sales']\nX = sm.add_constant(X)\nmodel = sm.OLS(Y,X)\nresults = model.fit()\nresults.summary()","321eab15":"#Lets see if both Europe and NA sales are able to correctly predict the global sales.\nY = games['Global_Sales']\nX = games[['NA_Sales', 'EU_Sales']]\nX = sm.add_constant(X)\nmodel = sm.OLS(Y,X)\nresults = model.fit()\nresults.summary()","82ca5b14":"#We can also notice the Sales in Other region has a fairly high correlation with Global Sales\nax = sns.regplot(x=\"Other_Sales\", y=\"Global_Sales\", data=games)","a6d38b43":"Y = games['Global_Sales']\nX = games[['Other_Sales']]\nX = sm.add_constant(X)\nmodel = sm.OLS(Y,X)\nresults = model.fit()\nresults.summary()","afb19233":"An R-squared value of 0.965 means that NA_Sales and EU_Sales explain 96.5% of the variation in the global sales.","079c3385":"**We can see some of our favourite classics like Super Mario Bros and Tetris dominating the charts as the most games sold** ","6d040ce6":"**Visualizing the correlation between all the variables:**","2118be88":"**We can see that until 2015 PS2 was still the most preferred type of console even though we started having PS3 and PS4**","58b3af5f":"We can see that there are a few null records in year and publisher columns.","41c89d13":"**We can see that there are variations in the number of objects present in each columns**","4f6da99c":"We can see that EA and Activision are the real leaders in the game development industry with them 2 dominating as the top 2 game development companies.","7567f9ee":"From the Correlation table we can see that the NA_sales is highly correlated with the global sales made. It has a very high correlation of 0.94. \n\nWe can say that for the games which do well in the NA region, their global sales also tend to be high. We can run a regression analysis to test our hypothesis.\n\nWe can also have a scatter plot to confirm our hypothesis.","0d2413a8":"2009 has the highest numberof game releases"}}