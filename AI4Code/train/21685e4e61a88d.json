{"cell_type":{"50276be2":"code","534a21a2":"code","109a5847":"code","21349fb5":"code","ae60f41e":"code","14c91ca1":"code","8e45b906":"code","147985ce":"code","3eb494e9":"code","e86532f3":"code","4a2e4ee6":"code","107bbfa5":"code","818ee53a":"code","a3092e0c":"code","16a11c06":"code","4f4c058c":"code","c9fb1109":"code","6e009a86":"code","6a66faa8":"code","62db2f24":"code","eb66ebe5":"code","04ed7c92":"code","41feb27f":"code","b1a7e90e":"code","78e84d2d":"code","d7987c87":"code","6019e7cc":"code","d306d4f4":"code","4ecbb94c":"code","a8d270c8":"code","c03d2aef":"code","8e7b639b":"code","ab2d5edf":"code","df6ffdce":"code","3065894e":"code","1a84e2b5":"code","6d15bb7e":"code","b4d43f30":"code","0f738fac":"code","5e363d20":"code","16d8dcf7":"code","e4108d42":"code","e8c0ce3a":"code","5b3eab76":"code","8b61c2ca":"code","2588e9b6":"code","0fe0c486":"code","a07ceef0":"code","18fbffbf":"code","70b50fc5":"code","d0c0780d":"code","f45ae64c":"code","7ffe4bbc":"code","a36d06e3":"code","936e5125":"code","3f4b18c3":"code","91b8c431":"code","6fba2665":"code","f2a7e45e":"code","9abc0bae":"code","02816fa8":"code","0edb8b77":"code","ac400d1d":"code","e138f6cb":"code","8e336401":"code","c4aa2892":"code","1df5dd72":"code","c5b02236":"code","f0bebd98":"code","60c6de7e":"code","772ada50":"code","4f70f31b":"code","4a846ae0":"code","b4cadf86":"code","cea20ae3":"code","1ebdd6dd":"code","9988e380":"code","66af57ed":"code","38ba641f":"code","f3ed514d":"code","d5eca4fd":"code","4fd260c9":"code","2c1ba5d8":"code","69129ba7":"code","ded39ef3":"code","b977bdb1":"code","d396ad77":"code","56b91b02":"code","a80bdf92":"markdown","ff3c25bf":"markdown","f66918cd":"markdown","45184b18":"markdown","c42a1d3e":"markdown"},"source":{"50276be2":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\nimport seaborn as sns","534a21a2":"%matplotlib inline\nfrom pandas_profiling import ProfileReport\nimport pandas.util.testing as tm","109a5847":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21349fb5":"data_file_path = \"\/kaggle\/input\/videogamesales\/vgsales.csv\"\ncompany_region_path = \"\/kaggle\/input\/videogamescompaniesregions\/video-games-developers.csv\"\ntotal_sales_column = \"Total_Sales\"","ae60f41e":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]\n\nplt.rcParams['axes.facecolor'] = primary_bgcolor\n\ncolors = [primary_blue, primary_blue2, primary_blue3, primary_grey, primary_black, primary_bgcolor, primary_green]\nsns.palplot(sns.color_palette(colors))","14c91ca1":"df_data = pd.read_csv(data_file_path)\ndf_data.head()","8e45b906":"df_data.Publisher.unique()","147985ce":"df_region = pd.read_csv(company_region_path)\ndf_region.head()","3eb494e9":"df_region.Developer.unique()","e86532f3":"df = pd.merge(df_data, df_region[['Developer', 'Country']], left_on='Publisher', right_on='Developer', how='left')\ndf.head()","4a2e4ee6":"df.columns","107bbfa5":"final_profile = ProfileReport(df, title='Video games report')","818ee53a":"final_profile","a3092e0c":"df.columns","16a11c06":"if 'Total_Shipped' in df.columns:\n    df[total_sales_column] = df['Total_Shipped'].fillna(0) + df['Global_Sales'].fillna(0)\nelse:\n    regions = ['NA', 'JP', 'EU', 'Other']\n    region_sales_sufix = '_Sales'\n    df[total_sales_column] = df['Global_Sales']","4f4c058c":"df.head()","c9fb1109":"df.isna().sum()","6e009a86":"df.shape","6a66faa8":"df_copy = df.copy()\ndf_copy = df[df['Year'].notna()]\ndf_copy = df_copy.sort_values('Year', ascending=True)","62db2f24":"df_copy.head()","eb66ebe5":"df_copy.dtypes","04ed7c92":"fig = px.histogram(df_copy, x='Platform', animation_frame = 'Year', range_y=[0, 550])\nfig.update_xaxes(type='category')\n# Alphabetical order\nfig.update_xaxes(categoryorder = 'category ascending')\nfig.show()","41feb27f":"top_df_copy = df_copy.groupby(['Platform', 'Year']).agg({total_sales_column: 'count'}).reset_index()\ntop_df_copy.columns = ['Platform', 'Year', 'Count']\ntop_df_copy = top_df_copy[top_df_copy['Year'].isin([2016, 2017, 2018, 2019])]\ntop_df_copy.Year.unique()","b1a7e90e":"top_df_copy = df_copy.groupby(['Platform', 'Year']).agg({total_sales_column: 'count'}).reset_index()\ntop_df_copy.columns = ['Platform', 'Year', 'Count']\ntop_df_copy = top_df_copy[top_df_copy['Year'].isin([2016, 2017, 2018, 2019, 2020])]\ntop_df_copy = top_df_copy[top_df_copy['Count']>top_df_copy['Count'].sum()*0.01]\ntop_df_copy['Year'] = top_df_copy['Year'].astype(str)","78e84d2d":"top_df_copy.Year.unique()","d7987c87":"fig = px.bar(top_df_copy, x='Platform', y='Count', color='Year', barmode='group')\nfig.update_layout(title=\"Total released video-games by platform\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","6019e7cc":"sales_df = df_copy.groupby(['Platform', 'Year']).agg({total_sales_column: 'sum'}).reset_index()\nsales_df = sales_df.sort_values('Year', ascending=True)\nsales_df.head()","d306d4f4":"# We use bar here as we are not counting frequency like histogram\nfig = px.bar(sales_df, x='Platform', y=total_sales_column, animation_frame='Year', range_y=[0, 150])\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","4ecbb94c":"sales_df = sales_df[sales_df['Year'].isin([2016, 2017, 2018, 2019])]\nsales_df = sales_df[sales_df[total_sales_column] > sales_df[total_sales_column].sum() * 0.005]\nsales_df['Year'] = sales_df['Year'].astype(str)\n\nfig = px.bar(\n    sales_df,\n    x='Platform',\n    y=total_sales_column,\n    color='Year',\n    barmode=\"group\"\n)\nfig.update_layout(title=\"Total sales by platforms (Millions)\")\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","a8d270c8":"all_time_df = df_copy.groupby(['Platform']).agg({total_sales_column:'sum'}).reset_index()\nall_time_df = all_time_df[all_time_df[total_sales_column]>all_time_df[total_sales_column].sum()*0.03]","c03d2aef":"all_time_df.head()","8e7b639b":"fig = px.bar(all_time_df, x='Platform', y=total_sales_column)\nfig.update_layout(title='Total sales of all time for the most relevant platforms (in Millions)')\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","ab2d5edf":"region_sales_sufix = '_Sales'\nregions = ['NA', 'JP', 'EU', 'Other']\nregions_agg = {}\n\nfor region in regions:\n    regions_agg[region + region_sales_sufix] = 'sum'\n\nregions_agg[total_sales_column] = 'sum'\nregions_agg","df6ffdce":"# We use it to aggregate the NA, JP, EU, Other and Total sales in the dataset\ndf_loc = df_copy.groupby(['Year']).agg(regions_agg).reset_index()\ndf_loc = df_loc.sort_values('Year', ascending=True)\ndf_loc.head()","3065894e":"fig = go.Figure()\nfor region in regions:\n    fig.add_trace(go.Scatter(\n    x = df_loc['Year'],\n    y = df_loc[region+region_sales_sufix],\n    mode='lines',\n    name=region\n))\n\nfig.update_layout(title=\"Total sales per year by region (Millions)\")\nfig.update_xaxes(type='category')\nfig.show()","1a84e2b5":"year_geo_df = df_copy[[\"Year\",'NA_Sales','EU_Sales','JP_Sales','Other_Sales']]\nyear_geo_df","6d15bb7e":"year_geo_df[['NA_mean','EU_mean','JP_mean','Other_mean']] = year_geo_df.groupby('Year')[['NA_Sales','EU_Sales','JP_Sales','Other_Sales']].transform('sum')\nyear_geo_df = year_geo_df.drop(['NA_Sales','EU_Sales','JP_Sales','Other_Sales'], axis=1)\nyear_geo_df","b4d43f30":"year_geo_df = year_geo_df.drop_duplicates()\nyear_geo_df = year_geo_df.sort_values(\"Year\")\nyear_geo_df","0f738fac":"#Creates dataframes with Place (Containing region sale - Na, eu, jp or other), Year and the mean sales\ntemp_df1 = pd.DataFrame({'Place': ['NA_Sales']*year_geo_df.shape[0], 'Year':year_geo_df['Year'], 'Sales': year_geo_df['NA_mean']})\ntemp_df2 = pd.DataFrame({'Place': ['EU_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['EU_mean']})\ntemp_df3 = pd.DataFrame({'Place': ['JP_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['JP_mean']})\ntemp_df4 = pd.DataFrame({'Place': ['Other_Sales']*year_geo_df.shape[0], 'Year': year_geo_df['Year'], 'Sales': year_geo_df['Other_mean']})","5e363d20":"final = pd.concat([temp_df1,temp_df2,temp_df3,temp_df4], axis=0)\nfinal = final.sort_values(\"Year\")\nfinal","16d8dcf7":"fig=px.bar(\n    final,\n    x='Place', \n    y=\"Sales\", \n    animation_frame=\"Year\",\n    animation_group=\"Place\", \n    color=\"Place\", \n    hover_name=\"Place\",\n    range_y=[0, 200]\n)\nfig.update_layout(title=\"Year sales distribution by region\",title_x=0.5)\nfig.show()","e4108d42":"df_genre = df_copy.groupby(['Genre']).agg(regions_agg)\ndf_genre = df_genre.sort_values(total_sales_column, ascending=False)\ndf_genre.head()","e8c0ce3a":"df_genre.T","5b3eab76":"# The transpose is used to make it look better\n# The column is dropped on axis 1\nfig = px.imshow(df_genre.drop(total_sales_column, 1).T)\nfig.update_layout(title=\"Sales distribution by genre and region (Millions)\")\nfig.show()","8b61c2ca":"df_g4 = df_copy[df_copy['Year'].isin([2016, 2017, 2018, 2019])]\ndf_g4 = df_g4.groupby(['Genre']).agg(regions_agg)\ndf_g4 = df_g4.sort_values(total_sales_column, ascending=False)\ndf_g4","2588e9b6":"fig = px.imshow(df_g4.drop(total_sales_column, 1).T)\nfig.update_layout(title=\"Sales distribution by genre and region over the last 4 years\")\nfig.show()","0fe0c486":"df_genre_tots = df_genre.reset_index()\ndf_genre_tots","a07ceef0":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df_genre_tots['Genre'],\n                        y=df_genre_tots[total_sales_column],\n                        mode='lines+markers'))\n\nfig.update_layout(title=\"Total sales by genre(Millions)\")\nfig.update_xaxes(type='category')\nfig.show()","18fbffbf":"df_genre_tops = list(df_genre_tots[df_genre_tots[total_sales_column]>df_genre_tots[total_sales_column].sum()*0.03]['Genre'])\ndf_genre_tops","70b50fc5":"# Use the labels argument in pie to change up the names of the labels on the graph\ndf_gg = df_copy[df_copy['Genre'].isin(df_genre_tops)]\nfig = px.pie(df_gg, values=total_sales_column, names='Genre',\n            title='Population of European continent', hover_data=['Genre'],\n            hole = 0.2)\nfig.show()","d0c0780d":"fig  = go.Figure()\nfig.add_trace(go.Pie(\n    labels=df_gg['Genre'], \n    values=df_gg[total_sales_column], \n    pull=[0, 0, 0.1, 0.05, 0, 0, 0.05, 0, 0.05],\n))\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(title=\"Percent of sales by Genre\")\nfig.show()","f45ae64c":"df_g4.head()","7ffe4bbc":"df_g4_t = df_g4.reset_index().sort_values(total_sales_column, ascending=False)\ndf_g4_t","a36d06e3":"fig = go.Figure()\n    \nfig.add_trace(go.Scatter(\n    x=df_g4_t['Genre'], \n    y=df_g4_t[total_sales_column], \n    mode='lines+markers',\n))\nfig.update_layout(title=\"Total sales by genre (Millions)\")\nfig.update_xaxes(type='category')\n# fig.update_xaxes(categoryorder='total descending')\nfig.show()","936e5125":"df_copy.columns","3f4b18c3":"df_publishers = df_copy.copy()\ndf_publishers['Country'] = df_publishers.Country.fillna(value='Unknown')","91b8c431":"df_publishers = df_publishers.groupby(['Publisher', 'Country']).agg({total_sales_column: ['sum', 'count']}).reset_index()\ndf_publishers.columns = ['Publisher', 'Country', 'Sales_rev', 'Sales_count']\ndf_publishers = df_publishers[df_publishers.Publisher!='Unknown']\ndf_publishers.head()","6fba2665":"df_publishers = df_publishers[(df_publishers['Sales_rev'] > df_publishers['Sales_rev'].sum() * 0.01) |\n                  (df_publishers['Sales_count'] > df_publishers['Sales_count'].sum() * 0.01)\n]","f2a7e45e":"df_listing_publishers = list(df_publishers.Publisher.unique())","9abc0bae":"df_copy.head()","02816fa8":"df_publishers_sales = df_copy.loc[:, ['Year', 'Publisher', total_sales_column]]\ndf_publishers_sales.head()","0edb8b77":"# Way to create new column that can be stored as a new dataframe column\n# df_publishers_sales.groupby(['Publisher', 'Year'])[total_sales_column].transform('sum')\\\ndf_publishers_sales = df_publishers_sales.groupby(['Publisher', 'Year']).agg({total_sales_column:'sum'}).reset_index()","ac400d1d":"df_publishers_sales = df_publishers_sales.sort_values(\"Year\")","e138f6cb":"df_publishers_sales = df_publishers_sales[df_publishers_sales['Year']>=2006]\ntop_publishers = [\n    'Nintendo', \n    'Sony Computer Entertainment',\n    'Microsoft Game Studios',\n    'Konami Digital Entertainment',\n    'Electronic Arts'\n]\ndf_publishers_sales = df_publishers_sales.loc[df_publishers_sales['Publisher'].isin(top_publishers)]","8e336401":"df_publishers_sales","c4aa2892":"fig=px.bar(\n    df_publishers_sales,\n    x='Publisher', \n    y=total_sales_column, \n    animation_frame=\"Year\", \n    animation_group=\"Publisher\", \n    color=\"Publisher\", \n    hover_name=\"Publisher\",\n    range_y=[0,200]\n)\nfig.update_layout(title_text=\"Top Publisher Game Sale by Year\", xaxis_domain=[0.05, 1.0])\nfig.show()","1df5dd72":"# # ad-hoc adjustment for Microsoft and Bandai\n# microsoft_row = pub_tdf[pub_tdf['Publisher'].str.startswith('Microsoft')].sum()\n# microsoft_row['Publisher'] = 'Microsoft'\n# microsoft_row['Country'] = 'United States'\n# bandai_row = pub_tdf[pub_tdf['Publisher'].str.endswith('Bandai')].sum()\n# bandai_row['Publisher'] = 'Namco Bandai'\n# bandai_row['Country'] = 'Japan'\n\n# # Drop old columns\n# pub_tdf = pub_tdf[~pub_tdf['Publisher'].str.startswith('Microsoft')]\n# pub_tdf = pub_tdf[~pub_tdf['Publisher'].str.endswith('Bandai')]\n\n# # Append new rows to teh DF\n# pub_tdf = pub_tdf.append(microsoft_row, ignore_index=True)\n# pub_tdf = pub_tdf.append(bandai_row, ignore_index=True)","c5b02236":"df_publishers[df_publishers['Publisher'].str.startswith('Microsoft')]","f0bebd98":"df_publishers[df_publishers['Publisher'].str.endswith('Bandai')]","60c6de7e":"df_publishers = df_publishers.sort_values('Sales_rev', ascending=False)\ndf_publishers.head()","772ada50":"fig = px.scatter(\n    df_publishers,\n    x='Publisher',\n    y='Sales_rev',\n    size='Sales_count',\n    color='Country',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and region (Millions)\")\nfig.show()","4f70f31b":"df_copy.head()","4a846ae0":"EU = df_copy.pivot_table('EU_Sales', columns='Publisher', aggfunc='sum')\nEU","b4cadf86":"EU = df_copy.pivot_table('EU_Sales', columns='Publisher', aggfunc='sum').T\nEU = EU.sort_values(by='EU_Sales', ascending=False).iloc[0:5]\nEU_publishers = EU.index\n\nJP = df_copy.pivot_table('JP_Sales', columns='Publisher', aggfunc='sum').T\nJP = JP.sort_values(by='JP_Sales', ascending=False).iloc[0:5]\nJP_publishers = JP.index\n\nNA = df_copy.pivot_table('NA_Sales', columns='Publisher', aggfunc='sum').T\nNA = NA.sort_values(by='NA_Sales', ascending=False).iloc[0:5]\nNA_publishers = NA.index\n\nOther = df_copy.pivot_table('Other_Sales', columns='Publisher', aggfunc='sum').T\nOther = Other.sort_values(by='Other_Sales', ascending=False).iloc[0:5]\nOther_publishers = Other.index\n\nGlobal = df_copy.pivot_table('Global_Sales', columns='Publisher', aggfunc='sum').T\nGlobal = Global.sort_values(by='Global_Sales', ascending=False).iloc[0:5]\nGlobal_publishers = Global.index","cea20ae3":"# Initialize figure\nfig = go.Figure()\n# In marker: Color defines the parameter that decides the position\/color on the colorscale\n# Add Traces\nfig.add_trace(\n    go.Bar(y=NA['NA_Sales'],\n           x=NA_publishers,\n           name=\"North America\",\n          marker={'color': NA['NA_Sales'],'colorscale': 'tealgrn'}))\nfig.add_trace(\n    go.Bar(y=EU['EU_Sales'],\n           x=EU_publishers,\n           name=\"Europe\",\n           marker={'color': EU['EU_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\nfig.add_trace(\n    go.Bar(y=JP['JP_Sales'],\n           x=JP_publishers,\n           name=\"Japan\",\n           marker={'color': JP['JP_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\n\nfig.add_trace(\n    go.Bar(y=Other['Other_Sales'],\n           x=Other_publishers,\n           name=\"Others\",\n           marker={'color': Other['Other_Sales'],'colorscale': 'tealgrn'},\n           visible=False))\n\nfig.add_trace(\n    go.Bar(y=Global['Global_Sales'],\n           x=Global_publishers,\n           name=\"Global\",\n           marker={'color': Global['Global_Sales'],'colorscale': 'tealgrn'},\n               visible=False ))\n\nbuttons = []\ncountries = ['North America', 'Europe', 'Japan', 'Others', 'Global']\n\nfor i, country in enumerate(countries):\n    buttons.append(dict(\n        label=country,\n        method=\"update\",\n        args=[{\"visible\": [False] * i + [True] + [False] * (3-i+1)},\n              {\"title\": f\"Top 5 Publishers for {country}\"}]\n    ))\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=1.17,\n            y=1.2,\n            buttons=buttons,\n        )\n    ])\n\n# Set title\nfig.update_layout(\n    title_text=\"Top 5 Publishers per region\",\n    xaxis_domain=[0.05, 1.0]\n)\n\nfig.show()","1ebdd6dd":"pub_genre_df = df_copy.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(df_listing_publishers)]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(df_genre_tops)]\npub_genre_df.head()","9988e380":"fig = px.scatter(\n    pub_genre_df,\n    x='Publisher',\n    y=total_sales_column,\n    color='Genre',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","66af57ed":"pub_genre_df = df_copy.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(df_listing_publishers[:10])]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(df_genre_tops)]\npub_genre_df.head()","38ba641f":"pub_genre_pivot_df = pub_genre_df.pivot(\n    index='Publisher', columns='Genre', values=total_sales_column)\npub_genre_pivot_df","f3ed514d":"z = pub_genre_pivot_df.values\nx = pub_genre_pivot_df.columns.tolist()\ny = pub_genre_pivot_df.index.tolist()\nprint(z)\nprint(x)\nprint(y)","d5eca4fd":"# Evenly round to the given number of decimals.\nz_text = np.around(z)\nprint(z_text)","4fd260c9":"fig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","2c1ba5d8":"fig = px.box(df_copy[df_copy['Genre'].isin(df_genre_tops)], \n             y=total_sales_column, \n             color='Genre',\n             hover_data=['Name', 'Year'],\n            )\nfig.update_layout(title=\"Games sells boxplot by genre\")\nfig.show()","69129ba7":"platform_tops = ['PS4', 'PSV', 'XOne', 'PC']","ded39ef3":"plat_genre_df = df_copy[(df_copy['Genre'].isin(df_genre_tops[:4])) \n                        & (df_copy['Platform'].isin(platform_tops[:4]))]\nplat_genre_df.head()","b977bdb1":"fig = px.sunburst(plat_genre_df, path=['Genre', 'Platform'], values=total_sales_column)\nfig.show()","d396ad77":"plat_pub_df = df_copy[(df_copy['Platform'].isin(platform_tops[:4])) & (df_copy['Publisher'].isin(df_listing_publishers[:5]))]\n\nfig = px.sunburst(plat_pub_df, path=['Platform', 'Publisher'], values=total_sales_column)\nfig.show()","56b91b02":"genre_pub_genre_df = df_copy[(df_copy['Genre'].isin(df_genre_tops[:4])) & \n                         (df_copy['Publisher'].isin(df_listing_publishers[:5])) & \n                         (df_copy['Platform'].isin(platform_tops[:4]))\n                        ]\n\nfig = px.sunburst(genre_pub_genre_df, path=['Genre', 'Platform', 'Publisher'], values=total_sales_column)\nfig.show()","a80bdf92":"Let\u2019s compare the syntax of the two functions. In groupby(), we pass the column we want to group by in the parentheses and in pivot_table() the equivalent parameter is the index\/columns. In groupby(), to choose the column to aggregate, we use subsetting with brackets while in pivot_table() we pass it to values. Finally, to choose the aggregating function, we use method chaining in groupby() whereas, pivot_table() provides aggfunc argument.","ff3c25bf":"<h2>Sales Analysis","f66918cd":"left_onlabel or list, or array-like\nColumn or index level names to join on in the left DataFrame. Can also be an array or list of arrays of the length of the left DataFrame. These arrays are treated as if they are columns.\n\nright_onlabel or list, or array-like\nColumn or index level names to join on in the right DataFrame. Can also be an array or list of arrays of the length of the right DataFrame. These arrays are treated as if they are columns.","45184b18":"<h2>Sales and genre","c42a1d3e":"<h2>Loading data and cleaning"}}