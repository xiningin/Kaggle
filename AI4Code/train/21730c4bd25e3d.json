{"cell_type":{"4bd0e114":"code","904a3be4":"code","bda65f13":"code","df825041":"code","9ae44128":"code","243e80f3":"code","465ea4df":"code","e5fcf752":"code","a9eabc6a":"code","27995084":"code","0efaa5ca":"code","638bcb43":"code","6b694355":"code","2e72bc8c":"code","34b5610f":"code","0257d130":"code","61314d96":"code","cbfee7fc":"code","3e20e30b":"code","ba92770f":"code","ee0e11fd":"code","48d6255e":"code","59c9b039":"code","cda6204b":"code","4b88dfae":"code","633718b2":"code","fdaa6f39":"code","52b0f953":"code","9eb5bb23":"code","6fcfdbb3":"code","96c6fbde":"code","0a65f862":"code","9e228e4a":"code","be45a3c4":"code","f95a5582":"code","dd54a08a":"code","5deb9993":"code","3deeda0e":"code","503b3150":"code","83935470":"code","077be33d":"code","d92b912f":"code","747e6c8c":"code","5499115a":"code","06194ec1":"code","db9b4ef6":"code","d7c5d563":"code","5eba648e":"code","b016d03c":"code","ca300935":"code","1b80cfd3":"code","0cad752a":"code","1d4f86de":"code","f8ef57ca":"code","00e7fa1f":"code","77909a6d":"code","60c16202":"code","6afedb10":"code","3dc06ae2":"code","34a8b1a6":"code","50e115ac":"code","c18ecc37":"code","ca3ec060":"code","73dee0a7":"code","954c0527":"code","3f9a05ea":"markdown"},"source":{"4bd0e114":"\n# Define variables\nentry = \"Software Engineer\"\nname = \"Feyza\"\nage = 23\ncity = \"Ankara\"\nPython_Beginner = (1 == True)\n\n","904a3be4":"# print entry variable value\nprint(\"entry : \",entry)","bda65f13":"# print Python_Beginner variable value\nprint(\"Python_beginner: : \",Python_Beginner)","df825041":"#Assignment of more than one variable in a single line\nname, age, city = \"Feyza\",23,\"Ankara\"","9ae44128":"print(type(entry),type(name),type(age),type(city),type(Python_Beginner))","243e80f3":"cities = ['barcelona', 'spain', 'germany', 'england']","465ea4df":"cities[2]","e5fcf752":"cities[1]","a9eabc6a":"cities[-1]","27995084":"cities[::]","0efaa5ca":"cities[1::1]","638bcb43":"cities[1::3]","6b694355":"cities[:4]","2e72bc8c":"cities[::-1]","34b5610f":"cities[0:3] = ['france ','azerbaijan']","0257d130":"cities","61314d96":"cities.append('russia ')\ncities","cbfee7fc":"cities.append('spain')\ncities","3e20e30b":"cities.append('germany')\ncities","ba92770f":"cities.remove('germany')\ncities","ee0e11fd":"cities = cities + ['china ']\ncities","48d6255e":"#list methods\n","59c9b039":"cities.reverse()\ncities","cda6204b":"cities.sort()\ncities","4b88dfae":"#Reference type example (method 1)\nplaque = [67,6,45,34,35]","633718b2":"# wrong list copy method\ncopy_plaque= plaque","fdaa6f39":"#is the change made only in the copy_plaque object?\ncopy_plaque[1] = 20","52b0f953":"#Indices number 1 as a result of the change:\nprint(plaque)\nprint(copy_plaque)\n","9eb5bb23":"#other method for copying list (method 2)\nplaque = [67,6,45,34,35]\n#legal copy methods\ncopy_plaque = plaque[::] #copy_plaque = list(plaque)","6fcfdbb3":"# Does the 0-indexed element of both objects change?\ncopy_plaque[1] = 23\nprint(\"plaque: \",plaque)\nprint(\"copy_plaque: \",copy_plaque)","96c6fbde":"#dictionary usage\nnotes = {\n    \"0001-Zeynep\": 88,\n    \"0002-Emin\": 99,\n    \"0003-Reyhan\" : 92, \n    \"0004-\u015e\u00fcheda\" : 85 \n}\n\n#access to dictionary element\nnotes[\"0001-Zeynep\"] #88","0a65f862":"# add new element to dictionary\nnotes [\"0005-Hilmi\"] = 79\nnotes","9e228e4a":"# delete element in dictionary\ndel (notes [\"0005-Hilmi\"])\nnotes","be45a3c4":"(\"0004-\u015e\u00fcheda\" in notes) #True","f95a5582":"# dictionary methods","dd54a08a":"notes.keys()","5deb9993":"notes.values() #dict_values([88,99,92,85])","3deeda0e":"notes.items()","503b3150":"#function definition\ndef bubble_Sequence(array):\n    element_number = len(array)\n    # Return all elements\n    for i in range(element_number):\n        for j in range(0, element_number - i - 1):\n            #Substitution\n            if array[j] > array[j+1] :\n                array[j], array[j+1] = array[j+1], array[j]","83935470":"#function usage\nnumbers = [3, 88, 99, 148, 5, 8, 11, 214, 2, 1]","077be33d":"bubble_Sequence(numbers)\nfor i in range(len(numbers)):\n    print('%d' %numbers[i]) ","d92b912f":"class BaseClassifier(object):\n    def __init__(self):\n        pass\n    def get_name(self):\n        raise NotImplementedError()\n    def fit(self, x, y):\n        raise NotImplementedError()\n    def predict(self, x):\n        raise NotImplementedError()","747e6c8c":"class BaseTree(BaseClassifier):\n    def __init__(self, maks_derinlik):\n        super().__init__()\n        self.height = height\n\n    def get_name(self):\n        return \"Base Tree\";\n \n    def fit(self, x, y):\n        self.X = x\n        self.Y = y\n \n    def predict(self, x):\n        y = np.zeros((x.shape[0],))\n        for i in range(x.shape[0]):\n            y[i] = self.__predict_single(x[i, :])\n        return y","5499115a":"import numpy as np\n\n#Creating an array\nd1 = np.array([5.5,9,10])\nd2 = np.array([(3.5,8,11), (4,7,9), (2,2,1.1)], dtype=float)\n\n#Difference 1. Methods\nd3 = d2 - d1\nprint (\"Difference 1 \/ d3 ->\", d3)\n\n#Difference Method 2\nd3 = np.subtract(d1, d2) \nprint(\"Difference 2 \/ d3 --> \", d3)\n\n#Adding # d1 and d2 and overwriting d1\nd1 = d1 + d2\nprint (\"Total d1 ->\", d1)\nd1","06194ec1":"#Find indexes of elements whose value is greater than 3\nresult = d1> 9\nprint (result)","db9b4ef6":"#Print elements on screen using found indices\nprint (\"Elements greater than 3 ->\", d1 [result])","d7c5d563":"# Product of two matrices\nimport numpy as np\nd4 = np.dot(d1,d2)\nprint (\"Multiplication d4:\", d4)\n\n#Removing the 1st column from the matrix\nd4 = np.delete (d4,0,1)\nprint (\"Subtraction d4:\", d4)\n\n","5eba648e":"#Creating a # 2x5 zero matrix\nZero_matrice = np.zeros([2,5])","b016d03c":"#Find the smallest element in the array\nprint (\"d4 min:\", np.min (d4))\n\n#Finding the largest element in the array\nprint (\"d4 max:\", np.max (d4))\n\n#Average of the index\nprint (\"d4 mean:\", d4.mean ())\n\n#Find the sum of the index\nprint (\"d4 total:\", d4.sum ())\n\n# Square root\nprint (\"d4 square root ->\", np.sqrt (d4))\n\n#Calculating the logarithm of the array\nprint (\"d4 logarithm ->\", np.log (d4))\n\n#Transposition\nprint (\"d4 transpos:\", np.transpose (d4))","ca300935":"list1 = [10, 92, 83, 94, 15, 36]\nlist2 = [i\/2 for i in list1]\nprint(list2) ","1b80cfd3":"x, y = 5, 5\nif (x > y):\n    print(\"x > y\")\nelif (y > x):\n    print(\"y > x\")\nelse:\n    print(\"y = x\")","0cad752a":"#while cycle\ncondition, j = True, 0\nwhile (condition):\n    print(j)\n    j += 1\n    condition = (j != 5)\n\n\n#for cycle\nfor i in range(0, 5):\n    print(i)","1d4f86de":" #lamp function Function definitions containing\ndef fnc3(n):\n  return lambda x : x ** n\n\nfnc_square = fnc3(2)#Dynamic squaring function created\nfnc_cube = fnc3(3) # Creating dynamic cube import function\n\n\nprint(fnc_square(3))\nprint(fnc_cube(3))","f8ef57ca":"import pandas as pd\ndata = [\n        ['D1', 'Sunny','Hot', 'High', 'Weak', 'No'],\n        ['D2', 'Sunny','Hot', 'High', 'Strong', 'No'],\n        ['D3', 'Overcast','Hot', 'High', 'Weak', 'Yes'],\n        ['D4', 'Rain','Mild', 'High', 'Weak', 'Yes'],\n        ['D5', 'Rain','Cool', 'Normal', 'Weak', 'Yes'],\n        ['D6', 'Rain','Cool', 'Normal', 'Strong', 'No'],\n        ['D7', 'Overcast','Cool', 'Normal', 'Strong', 'Yes'],\n        ['D8', 'Sunny','Mild', 'High', 'Weak', 'Yes'],\n        ['D9', 'Sunny','Cool', 'Normal', 'Weak', 'No'],\n        ['D10', 'Rain','Mild', 'Normal', 'Weak', 'Yes'],\n        ['D11', 'Sunny','Mild', 'Normal', 'Strong', 'Yes'],\n        ['D12', 'Overcast','Mild', 'High', 'Strong', 'No'],\n        ['D13', 'Overcast','Hot', 'Normal', 'Weak', 'Yes'],\n        ['D14', 'Rain','Mild', 'High', 'Strong', 'No'],\n       ]\ndf = pd.DataFrame(data,columns=['day', 'outlook', 'temp', 'humidity', 'windy', 'play'])\ndf","00e7fa1f":"df.info()","77909a6d":"df.max()","60c16202":"df.min()","6afedb10":"df.describe()","3dc06ae2":"df.shape","34a8b1a6":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder() \ndf['outlook'] = lb.fit_transform(df['outlook']) \ndf['temp'] = lb.fit_transform(df['temp'] ) \ndf['humidity'] = lb.fit_transform(df['humidity'] ) \ndf['windy'] = lb.fit_transform(df['windy'] )   \ndf['play'] = lb.fit_transform(df['play'] ) ","50e115ac":"df","c18ecc37":"df.describe()","ca3ec060":"X = df.iloc[:,1:3] \nY = df.iloc[:,3]","73dee0a7":"X","954c0527":"Y","3f9a05ea":"import pandas as pd\n\n#Pandas Series identification\ns = pd.Series ([11, -3, -1, 2], index = ['a', 'b', 'c', 'd'])\n\nConvert 2D data to Pandas DataFrame structure\nIf the #columns parameter is provided, column names are defined in the dataframe data structure.\nveriTable = pd.DataFrame (data, columns = ['Country', 'City', 'Nufus'])\n\nReading data from #Csv file\npd.read_csv ('filename.csv', nrows = 7, sep = ',')\n\nSelecting data according to its position in the table\nveritablo.iloc ([0] [0])\n\n# Selecting data by title\nveritablo.loc ([5, [ 'population']])\n\n#Delete data\ns.drop ([ 'a', 'c'])\n\nGetting simple information about the table\ndf.info () # Gives information such as the row of the table, number of columns, data type, number of missing data.\ndataTablo.shape () # Returns the number of rows and columns in the table\nveriTablo.describe () # returns the general descriptive statistic values \u200b\u200bof the table\ndf.min () # finds the smallest data for each column\ndf.mean () # calculates the average value for each column\n\n#You get an error because a dataset is not defined !!!!!"}}