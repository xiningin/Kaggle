{"cell_type":{"2926b9f1":"code","84a3fae5":"code","1272b684":"code","76001cc8":"code","49bc3efb":"code","77fd3a93":"code","e871d659":"markdown","d7304457":"markdown","a20c609a":"markdown","bb42d2ad":"markdown","d13ca706":"markdown","3f4e5549":"markdown","6fd1fcdb":"markdown"},"source":{"2926b9f1":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.applications.vgg16 import VGG16","84a3fae5":"train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\n#Extract training set\nx_train=train.drop('label',axis=1)\nx_train=np.array(x_train)\/255. #Change pixel intensity from 0-255 to 0-1\nx_train=x_train.reshape(-1,28,28,1)\nx_train=tf.image.resize(x_train,size=(32,32)) #Resize to 32x32 since Lenet5 demand input image shape to be 32x32\ny_train=train['label']\n\n#Extract test set\nx_test=test\nx_test=np.array(x_test)\/255. #Change pixel intensity from 0-255 to 0-1\nx_test=x_test.reshape(-1,28,28,1)\nx_test=tf.image.resize(x_test,size=(32,32))","1272b684":"vgg=VGG16(include_top=False,weights='imagenet')\n\n#connect layers\ninput=tf.keras.Input(shape=(32,32,1))\nx=tf.keras.layers.Conv2D(3,1)(input)\nx=vgg(x)\nx=tf.keras.layers.Flatten()(x)\nx=tf.keras.layers.Dense(120,activation='relu')(x)\nx=tf.keras.layers.Dense(84,activation='relu')(x)\noutput=tf.keras.layers.Dense(10,activation='softmax')(x)\n\n#connect model\nmodel=tf.keras.Model(input,output)\n\n#compile model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])","76001cc8":"model.summary()","49bc3efb":"checkpoint=tf.keras.callbacks.ModelCheckpoint(monitor='val_accuracy',save_best_only=True,filepath='my_best_model.hdf5')\n\nhistory=model.fit(x_train,y_train,epochs=10,validation_split=0.2,callbacks=[checkpoint])","77fd3a93":"model=tf.keras.models.load_model('.\/my_best_model.hdf5')\n\ny_test=model.predict(x_test)\nresult=np.argmax(y_test,axis=1) #Since Lenet5 only predict probability of each digits from input image, we extract only digit with most proability\nresult_CSV=pd.DataFrame({'ImageId':range(1,len(result)+1),'Label':result})\nresult_CSV=result_CSV.set_index('ImageId')\nresult_CSV.to_csv('submission.csv')","e871d659":"In this notebook I will show you my code that can predict digits on Digit Recognizer competition with around 99% accuracy. \n\nI use adapted Lenet5 architecture that add VGG16 transfer learnig to predict digit in this dataset.","d7304457":"## About this notebook","a20c609a":"## Create neural network","bb42d2ad":"## Extract data","d13ca706":"I split data into validation set and use checkpoint to find best parameters while fitting.","3f4e5549":"## Load best model and predict digits","6fd1fcdb":"## Fit the model"}}