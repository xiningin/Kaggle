{"cell_type":{"a8830ca6":"code","0499be85":"code","7fd85bc1":"code","df522237":"code","1ea92f58":"code","58888431":"code","8e0b7308":"code","063077d8":"code","5421c25b":"code","c25c8221":"code","6367389c":"code","33983c02":"code","ec148518":"code","59800931":"code","f81fe968":"code","de2b49a5":"code","a998b9cc":"code","8cc29e9f":"code","8893d3f9":"code","343ab0b8":"code","c99bf273":"code","4e08b238":"code","d8141308":"code","fcf9910b":"code","5bc5053d":"code","ff03a06d":"code","3fdc8545":"code","fa99095f":"code","af9ed4a5":"code","948a855d":"code","b3f541ea":"code","07d077d5":"code","bf29ea26":"code","d34c4b8e":"code","e55928e1":"code","14519e4d":"code","90a492bd":"code","9de51a70":"code","284f7165":"code","75286091":"code","c4225601":"code","1ac4b1ed":"code","8a15ad6c":"code","72aac341":"code","ed33d638":"code","633862e3":"code","2c4ea6ce":"code","708bd5c4":"code","481767d0":"code","ffcd607c":"code","9c276a9b":"code","671d7e79":"code","957428a3":"code","06ec21c4":"code","5d6c2cfe":"code","ebcf55a8":"code","abf4f388":"code","36df2a64":"code","d4ceaa30":"code","801ce53c":"markdown","d794404a":"markdown","6c0789d6":"markdown","80ed7621":"markdown","5b728332":"markdown","d05ca0dd":"markdown","1224d64d":"markdown","34309044":"markdown","c41668e8":"markdown","8699fdee":"markdown","46122927":"markdown","f86e33bb":"markdown","4087dd5f":"markdown","d56c1732":"markdown","d08d1ba9":"markdown"},"source":{"a8830ca6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0499be85":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","7fd85bc1":"print('----Train data-----')\nprint(train_df.info())\nprint('----Test data-----')\nprint(test_df.info())","df522237":"train_df.drop(['Cabin'], axis=1, inplace=True)\ntest_df.drop(['Cabin'], axis=1, inplace=True)","1ea92f58":"sns.countplot(x = train_df.Survived)","58888431":"sns.countplot(x = train_df.Pclass)","8e0b7308":"sns.barplot(x=train_df.Pclass, y=train_df.Survived, data=train_df)","063077d8":"sns.countplot(x=train_df.Sex)","5421c25b":"sns.barplot(x=train_df.Sex, y=train_df.Survived, data=train_df)","c25c8221":"plt.hist(train_df.Age, edgecolor='black')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()","6367389c":"sns.boxplot(x=train_df.Survived, y=train_df.Age, data=train_df)","33983c02":"sns.countplot(x=train_df.SibSp)","ec148518":"sns.barplot(x=train_df.SibSp, y=train_df.Survived, data=train_df)","59800931":"sns.countplot(x=train_df.Parch)","f81fe968":"sns.barplot(x=train_df.Parch, y=train_df.Survived, data=train_df)","de2b49a5":"sns.displot(x=train_df.Fare)","a998b9cc":"sns.boxplot(x=train_df.Survived, y=train_df.Fare, data=train_df)","8cc29e9f":"sns.countplot(x=train_df.Embarked)","8893d3f9":"sns.barplot(x=train_df.Embarked, y=train_df.Survived, data=train_df)","343ab0b8":"train_df.Name.head(10)","c99bf273":"# Extracting Title from Name\nwhole_data = train_df.append(test_df)\nwhole_data['Title'] = whole_data.Name.str.extract(r'([A-Za-z]+)\\.', expand=False)\nwhole_data.Title.value_counts()","4e08b238":"#Grouping common titles\nCommon_Title = ['Mr', 'Miss', 'Mrs', 'Master']\nwhole_data['Title'].replace(['Ms', 'Mlle', 'Mme'], 'Miss', inplace=True)\nwhole_data['Title'].replace(['Lady'], 'Mrs', inplace=True)\nwhole_data['Title'].replace(['Sir', 'Rev'], 'Mr', inplace=True)\nwhole_data['Title'][~whole_data.Title.isin(Common_Title)] = 'Others'","d8141308":"train_df = whole_data[:len(train_df)]\ntest_df = whole_data[len(train_df):]","fcf9910b":"sns.boxplot(x='Title', y='Age', data=train_df)","5bc5053d":"# Median Age of each Title\nAgeMedian_by_title = train_df.groupby('Title')['Age'].median()\nAgeMedian_by_title","ff03a06d":"# Impute missing Age values according to title\nfor title in AgeMedian_by_title.index:\n    train_df['Age'][(train_df.Age.isnull()) & (train_df.Title==title)] = AgeMedian_by_title[title]\n    test_df['Age'][(test_df.Age.isnull()) & (test_df.Title==title)] = AgeMedian_by_title[title]","3fdc8545":"# Imputing missing 'Embarked' values\ntrain_df['Embarked'].fillna(train_df.Embarked.mode()[0], inplace=True)","fa99095f":"# Imputing Fare \n# For test dataset, there is only 1 missing value. Simply impute the median\ntest_df.Fare.fillna(test_df.median(), inplace=True)","af9ed4a5":"# For train dataser there are some outliers in Fare\ntrain_df['Fare'].sort_values(ascending=False).head(10)","948a855d":"# replace the outliers the 2nd higher fare\ntrain_df.loc[train_df.Fare>512, 'Fare'] = 263\ntrain_df.Fare.sort_values(ascending=False).head(10)","b3f541ea":"# Check for null values\nprint('-----Train Data-----')\nprint(train_df.info())\nprint('-----Test Data-----')\nprint(test_df.info())","07d077d5":"train_df['Sex_code'] = train_df['Sex'].map({'female':1, 'male':0}).astype('int')","bf29ea26":"test_df['Sex_code'] = test_df['Sex'].map({'female':1, 'male':0}).astype('int')","d34c4b8e":"train_df['Embarked_code'] = train_df['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)\ntest_df['Embarked_code'] = test_df['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)","e55928e1":"train_df['AgeBin_5'] = pd.qcut(train_df['Age'], 5)\ntest_df['AgeBin_5'] = pd.qcut(test_df['Age'], 5)\n\nsns.barplot(x='AgeBin_5', y='Survived', data=train_df)","14519e4d":"train_df['FareBin_5'] = pd.qcut(train_df['Fare'], 5)\ntest_df['FareBin_5'] = pd.qcut(test_df['Fare'], 5)\n\nsns.barplot(x='FareBin_5', y='Survived', data=train_df)","90a492bd":"# Encoding Age and Fare bins into numbers\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel = LabelEncoder()\ntrain_df['AgeBin_Code_5'] = label.fit_transform(train_df['AgeBin_5'])\ntest_df['AgeBin_Code_5'] = label.fit_transform(test_df['AgeBin_5'])\n\ntrain_df['FareBin_Code_5'] = label.fit_transform(train_df['FareBin_5'])\ntest_df['FareBin_Code_5'] = label.fit_transform(test_df['FareBin_5'])","9de51a70":"# Create 'FamilySize' column by adding 'SibSp' and 'Parch'n columns\ntrain_df['FamilySize'] = train_df.SibSp + train_df.Parch + 1\ntest_df['FamilySize'] = test_df.SibSp + test_df.Parch + 1\n\nsns.countplot(x=train_df.FamilySize)","284f7165":"train_df['Alone'] = train_df.FamilySize.map(lambda x: 1 if x==1 else 0)\ntest_df['Alone'] = test_df.FamilySize.map(lambda x: 1 if x==1 else 0)\n\nsns.countplot(x='Alone', data=train_df)","75286091":"sns.barplot(x='Alone', y='Survived', data=train_df)","c4225601":"# Encoding Title\ntrain_df['Title_code'] = train_df.Title.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Others':4}).astype('int')\ntest_df['Title_code'] = test_df.Title.map({'Mr':0, 'Miss':1, 'Mrs':2, 'Master':3, 'Others':4}).astype('int')","1ac4b1ed":"train_df[['Name', 'Ticket']].sort_values('Name').head(20)","8a15ad6c":"whole_data = train_df.append(test_df)\nwhole_data['Surname'] = whole_data.Name.str.extract(r'([A-Za-z]+),', expand=False)\nwhole_data['TixPref'] = whole_data.Ticket.str.extract(r'(.*\\d)', expand=False)\nwhole_data['SurTix'] = whole_data['Surname'] + whole_data['TixPref']\nwhole_data['IsFamily'] = whole_data.SurTix.duplicated(keep=False)*1\nsns.countplot(whole_data.IsFamily)","72aac341":"# Families with children\nwhole_data['Child'] = whole_data.Age.map(lambda x: 1 if x <=16 else 0)\nFamilyWithChild = whole_data[(whole_data.IsFamily==1)&(whole_data.Child==1)]['SurTix'].unique()\nlen(FamilyWithChild)","ed33d638":"# Encode each family with children\nwhole_data['FamilyId'] = 0\nx = 1\nfor tix in FamilyWithChild:\n    whole_data.loc[whole_data.SurTix==tix, ['FamilyId']] = x\n    x += 1","633862e3":"whole_data.head(10)","2c4ea6ce":"whole_data['SurvivedDemo'] = whole_data['Survived'].fillna(9)\npd.crosstab(whole_data.FamilyId, whole_data.SurvivedDemo).drop([0]).plot(kind='bar', stacked=True, color=['black','g','grey'])\nplt.show()","708bd5c4":"whole_data['ConnectedSurvival'] = 0.5 \nSurvived_by_FamilyId = whole_data.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n    if Survived_by_FamilyId[i] >= 1:\n        whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 1\n    elif Survived_by_FamilyId[i] == 0:\n        whole_data.loc[whole_data.FamilyId==i, ['ConnectedSurvival']] = 0\ntrain_df = whole_data[:len(train_df)]\ntest_df = whole_data[len(train_df):]\nsns.barplot(x='ConnectedSurvival', y='Survived', data=train_df)","481767d0":"train_df.columns","ffcd607c":"# Dropping unused columns\nX_train = train_df.drop(['Age', 'Embarked', 'Fare', 'Name', 'Parch', 'PassengerId', 'Sex', 'SibSp',\n                           'Survived', 'Ticket', 'Title', 'AgeBin_5', 'FareBin_5', 'FamilySize', 'Surname',\n                           'TixPref', 'SurTix', 'IsFamily', 'Child', 'FamilyId'], axis=1)\ny_train = train_df['Survived']","9c276a9b":"from sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nmodel = RandomForestClassifier(n_estimators=200, random_state=2)","671d7e79":"X_train.drop('SurvivedDemo', axis=1, inplace=True)","957428a3":"model.fit(X_train,y_train)\nimportance = pd.DataFrame({'feature':X_train.columns, 'importance': np.round(model.feature_importances_,3)})\nimportance = importance.sort_values('importance', ascending=False).set_index('feature')\nimportance.plot(kind='bar', rot=90)\nplt.show()","06ec21c4":"# Choosing top 5 features\nfinal = ['Title_code', 'Sex_code', 'ConnectedSurvival', 'Pclass', 'FareBin_Code_5']","5d6c2cfe":"# Tune Model parameters\ngrid_param = {\n 'n_estimators': [100, 200, 300],\n 'criterion':['gini', 'entropy'],\n 'min_samples_split': [2, 10, 20],\n 'min_samples_leaf': [1, 5],\n 'bootstrap': [True, False],\n}\ngd_sr = GridSearchCV(estimator=model,\n param_grid=grid_param,\n scoring='accuracy',\n cv=5,\n n_jobs=-1)\ngd_sr.fit(X_train[final], y_train)\nbest_parameters = gd_sr.best_params_\nprint(best_parameters)","ebcf55a8":"model2 = RandomForestClassifier(n_estimators=100, bootstrap=True, criterion= 'entropy', min_samples_leaf=5, min_samples_split=2, random_state=2)","abf4f388":"all_accuracies = cross_val_score(estimator=model2, X=X_train, y=y_train, cv=5)\nall_accuracies\nall_accuracies.mean()","36df2a64":"model2.fit(X_train[final], y_train)","d4ceaa30":"X_test = test_df[final]\nprediction = model2.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': prediction.astype(int)})\noutput.to_csv('my_submission.csv', index=False)","801ce53c":"***Passengers are mainly aged 20-40***\n***Younger passengers tend to survive***","d794404a":"***Data Transformation***\\\n**Encode Strings to Numbers for modelling**","6c0789d6":"***Imputation of missing Data\/Outliers***","80ed7621":"*Nearly 50% passengers are travelling in class 3*","5b728332":"***Passengers travelling with parents\/children are more likely to survive than those not***","d05ca0dd":"**With 70% data missing, we can drop 'Cabin' column**","1224d64d":"***Outliers are detected***","34309044":"***Feature Creation***","c41668e8":"***Feature Selection***","8699fdee":"**FamilySize=1 is dominant,it may not provide sufficeint predictive power. So decided to group them and convert to travelling alone or not.**","46122927":"***Passengers travelling with 1 or 2 siblings have higher chances of survival***","f86e33bb":"***Right skewed plot.. Outliers are detected***","4087dd5f":"***Survival chances of Female is more than Male***","d56c1732":"***Connected Survival***\\\n*Survived passengers were mostly from the same family groups*","d08d1ba9":"***Probability of surviving of persons decreases as Pclass increases. This makes 'Pclass' a good feature for prediction***"}}