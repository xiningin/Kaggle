{"cell_type":{"8a6bc312":"code","b2be894e":"code","eefa8293":"code","5b814d9f":"code","3f630d96":"code","db050e0f":"code","4a72003a":"code","667130c2":"code","649f2acc":"code","7f673562":"code","2a3fedbe":"code","654436b6":"code","4b628635":"code","21784e03":"code","12a42b61":"code","4aa89855":"code","80ffe0f1":"code","a8dabff5":"code","1e0712a8":"code","eb9b5af0":"code","205f4a4a":"code","bfec9d9a":"code","3915740c":"code","10076bf1":"code","8094b115":"code","6f3b9963":"code","eb814926":"code","c4f01105":"code","17e2af4d":"code","b92480ee":"code","e170f4b4":"code","43deab38":"code","edacf1a8":"code","7f52c2b8":"code","1f1aae96":"code","8f1fd102":"code","7c2563e4":"code","1bd3d793":"code","52133382":"code","2e1c0bcc":"code","4715138e":"code","e18e0538":"code","a638c456":"code","9ce9d2d3":"code","d769f221":"code","bf5982f6":"code","1fa1b604":"code","dbdf3dca":"code","b4361719":"markdown","e42c0a07":"markdown","37a24038":"markdown","a416f94f":"markdown","032e7508":"markdown","9538299e":"markdown","97928d89":"markdown","f13dc8f1":"markdown","d18ef43c":"markdown","6bbccefc":"markdown","a7e824f5":"markdown","62edf18a":"markdown"},"source":{"8a6bc312":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2be894e":"odi = pd.read_csv('\/kaggle\/input\/odi-batting.csv')\nodi.head()","eefa8293":"odi.info()","5b814d9f":"odi[\"MatchDate\"].head()","3f630d96":"# odi['MatchDate'] = pd.to_datetime(odi['MatchDate'], format=\"%M-%d-%Y\")","db050e0f":"odi[\"MatchDate\"].head()","4a72003a":"odi.info()","667130c2":"odi.describe()","649f2acc":"#25%: 25% values less than number displayed\nodi.describe(include='object')","7f673562":"odi.describe(include='all') #all column summary","2a3fedbe":"odi['Player']","654436b6":"odi['Player'].head()","4b628635":"odi[[\"Player\",\"Runs\"]].head(10)","21784e03":"odi[['Player','Runs','MatchDate']].head(10)","12a42b61":"#top ten players based on total number of matches:\nodi['Player'].value_counts().head(10)","4aa89855":"print(\"Mean of the Runs Column is \",odi['Runs'].mean())\nprint(\"Median of the Runs Column is \",odi['Runs'].median())\nprint(\"Maximum runs of the Runs Column is \",odi['Runs'].max())\nprint(\"Minimum Runs in Runs Column is \",odi['Runs'].min())","80ffe0f1":"#one column one value filter\nsachin_rows = odi[(odi['Player']=='Sachin R Tendulkar')]\nsachin_rows #index is not altered. if this was the index in the original file(excel in this case), it remains the same here","a8dabff5":"sachin_rows = odi[(odi['Player']=='Sachin R Tendulkar')].head()\nsachin_rows","1e0712a8":"sachin = odi[(odi['Player']=='Sachin R Tendulkar')].shape\nsachin","eb9b5af0":"#DROP rows and columns\nif 'URL' in odi.columns:\n    odi = odi.drop(['URL'], axis=1)\nodi.shape  #one column reduced. earlier, we had 8","205f4a4a":"odi.head()","bfec9d9a":"players_summary = odi.groupby(['Player'])\nlen(players_summary)","3915740c":"players_summary = odi.groupby(['Player']).agg({'Runs':'sum'})\nplayers_summary","10076bf1":"players_summary.loc['Sachin R Tendulkar','Runs']","8094b115":"#top ten players\nplayers_summary.sort_values(['Runs'],ascending=False).head(10)","6f3b9963":"odi['is_century'] = odi['Runs'].apply(lambda run:1 if run>99 else 0)\nodi['is_fifty'] = odi['Runs'].apply(lambda run:1 if run>49 and run<100 else 0)\nodi['is_duck'] = odi['Runs'].apply(lambda run:1 if run==0 else 0)\nodi['missed_century'] = odi['Runs'].apply(lambda run:1 if run>90 and run<100 else 0)\nodi.head()","eb814926":"players_summary = odi.groupby(['Player']).agg({'Runs':'sum','is_century':'sum','is_fifty':'sum','is_duck':'sum',\n                                               'missed_century':'sum','ScoreRate':'mean','Country':'count'})\nplayers_summary = players_summary.rename(columns = {'Country':'No. of matches'})\nplayers_summary.sort_values(['Runs'],ascending=False).head(10)","c4f01105":"odi.info()","17e2af4d":"odi['year'] = odi['MatchDate'].apply(lambda d: d[-4:])\nodi.head()","b92480ee":"sachin_rows = odi[(odi['Player'] == 'Sachin R Tendulkar')]\nsachin_years = sachin_rows.groupby(['year']).agg({'Runs':'sum'})\nsachin_years","e170f4b4":"odi['score1'] = odi['ScoreRate'].apply(lambda d: d>100)\nodi.head()","43deab38":"#rahul_rows = odi[odi['Player'].strcontains('Rahul')] #another way\nrahul_rows = odi[odi['Player'] == 'Rahul Dravid']\nrahul_years = rahul_rows.groupby(['year']).agg({'Runs':'sum'})\nrahul_years","edacf1a8":"df_new = pd.concat([sachin_years,rahul_years])\ndf_new","7f52c2b8":"df_new = pd.concat([sachin_years,rahul_years],axis=1,sort=False, join='inner')\ndf_new","1f1aae96":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8f1fd102":"odi.head()","7c2563e4":"players = ['Sachin R Tendulkar','Rahul Dravid','Virender Sehwag']\nodi1 = odi[(odi['Player'].isin(players))]\nsummary1 = odi1.groupby(['Player','Versus']).agg({'Runs':'mean'})\nsummary1\nwide = summary1.unstack(level=1)\nsns.heatmap(wide,cmap='Blues')\nplt.show()","1bd3d793":"summary_pivot = pd.pivot_table(odi1,index='Player',columns='Versus',values='Runs',aggfunc='mean')   #index=Player, columns=Versus\nsummary_pivot","52133382":"sns.heatmap(summary_pivot,cmap='Blues')\nplt.show()","2e1c0bcc":"top_players = odi['Player'].value_counts().head(10)\ntop_players","4715138e":"#x axis player names\n# yaxis player numbers\ntop_players.index","e18e0538":"xvalues = top_players.index\nyvalues = top_players.values\nplt.figure(figsize=(15,10))\nplt.bar(xvalues,yvalues)\nplt.xticks(rotation=30)\nplt.xlabel('Player')\nplt.ylabel('Total Matches')\nplt.title('top ten players by total no. of matches')\nplt.show()","a638c456":"# Using pandas\ntop_players.plot.bar()\nplt.show()","9ce9d2d3":"odi['year'] = odi['MatchDate'].str[-4:]\nodi['year']\nsachin_rows = odi[odi['Player'].str.contains('Sachin')]\nyears_runs = sachin_rows.groupby(['year'])['Runs'].sum()\n#years_runs = sachin_rows.groupby(['year']).agg({'Runs':'sum'})['Runs']\nyears_runs.plot.line()\nplt.show()","d769f221":"player = odi['Player'].value_counts().head()\nplt.figure()\nplayer.plot.pie()\nplt.ylabel('')\nplt.title('Player Name')\nplt.get_cmap()\nplt.show()","bf5982f6":"sns.barplot(data=odi1,x='Player',y='Runs')","1fa1b604":"sns.pointplot(data=odi, orient='h')","dbdf3dca":"Complete_Data = odi.to_csv(\"Updata ODi Batting\", index = False)","b4361719":"# pie plot","e42c0a07":"# Filtering","37a24038":"# line chart","a416f94f":"## Pivot table","032e7508":"# Data Visualization\n* pivot\n* stacking and unstacking\n* data visualization using matplotlib, pandas and seaborn library","9538299e":"* concat\n* join\n* merge\n* decide whether column wise or row wise stack\n* so, in this case column merge\n* common between two DFs: 'years' in this case (index of DF to be precise)","97928d89":"### In runs and score rate, non-null values are less, and that is because runs and score rate can be null at times","f13dc8f1":" # Aggregation, merging and concatenation of Two columns","d18ef43c":"## Task\n**GroupBy:** \n1. if need information based on product column(checks unique values in product column)\n2. GroupBy creates 3 data frames internally(since it has 3 kinds of products: A, B, C)\n3. index will be preserved...data is not changed, but instead it is just reordered and stored in the newely created data frame\n4. summarization\/aggregation : information will be combined and displayed as per the product(we asked for product wise in this case)\n5. final DF\n*   A 8000\n*   B 1000\n    C 1000\n6. in sales column, sum() has been done. and GroupBy has been done by Product","6bbccefc":"# Merging And Concatenation","a7e824f5":"**As we can see that the MatchDate column dtype is object so we can change into datetime format.**","62edf18a":"# Analysis "}}