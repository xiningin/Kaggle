{"cell_type":{"22f5d6fe":"code","c0a78554":"code","2ca7367a":"code","196099b4":"code","d2726785":"code","9f9a9f4c":"code","30af7a60":"code","48a6e1be":"code","0f413ba6":"code","b16a3897":"code","ac0315f5":"code","b19ab85e":"code","838458bf":"code","6403e07e":"code","21015682":"code","f8e245b7":"code","f2cdd414":"code","6823068c":"code","f4682c36":"code","e7530c6d":"markdown"},"source":{"22f5d6fe":"import numpy as np # Linear Algebra\nimport pandas as pd # Data processing, CSV file I\/O (\u0e40\u0e0a\u0e48\u0e19 pd.read_csv)\nimport os","c0a78554":"df = pd.read_csv('..\/input\/facial-expression\/fer2013.csv')","2ca7367a":"label_map = ['Anger', 'Neutral', 'Fear', 'Happy', 'Sad', 'Surprise']","196099b4":"import matplotlib.pyplot as plt","d2726785":"img = df.iloc[0]['pixels'].split()","9f9a9f4c":"img = [int(i) for i in img]","30af7a60":"img = np.array(img)","48a6e1be":"img = img.reshape(48,48)","0f413ba6":"X = []\ny = []","b16a3897":"def getData(path):\n    anger = 0\n    fear = 0\n    sad = 0\n    happy = 0\n    surprise = 0\n    neutral = 0\n    df = pd.read_csv(path)\n    \n    X = []\n    y = []    \n    \n    for i in range(len(df)):\n        if df.iloc[i]['emotion'] != 1:\n            if df.iloc[i]['emotion'] == 0:\n                if anger <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    anger += 1\n                else:\n                    pass\n                \n            if df.iloc[i]['emotion'] == 2:\n                if fear <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    fear += 1\n                else:\n                    pass\n                \n            if df.iloc[i]['emotion'] == 3:\n                if happy <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    happy += 1\n                else:\n                    pass\n                \n            if df.iloc[i]['emotion'] == 4:\n                if sad <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    sad += 1\n                else:\n                    pass\n                \n            if df.iloc[i]['emotion'] == 5:\n                if surprise <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    surprise += 1\n                else:\n                    pass\n                \n            if df.iloc[i]['emotion'] == 6:\n                if neutral <= 4000:            \n                    y.append(df.iloc[i]['emotion'])\n                    im = df.iloc[i]['pixels']\n                    im = [int(x) for x in im.split()]\n                    X.append(im)\n                    neutral += 1\n                else:\n                    pass\n\n            \n            \n    return X, y  ","ac0315f5":"X, y = getData('..\/input\/facial-expression\/fer2013.csv')","b19ab85e":"X = np.array(X)\/255.0\ny = np.array(y)","838458bf":"y_o = []\nfor i in y:\n    if i != 6:\n        y_o.append(i)\n        \n    else:\n        y_o.append(1)","6403e07e":"X = X.reshape(len(X), 48, 48, 1)","21015682":"from keras.utils import to_categorical\ny_new = to_categorical(y_o, num_classes=6)","f8e245b7":"from keras.models import Sequential\nfrom keras.layers import Dense , Activation , Dropout ,Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.metrics import categorical_accuracy\nfrom keras.models import model_from_json\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import *\nfrom keras.layers.normalization import BatchNormalization","f2cdd414":"model = Sequential()\n\n\ninput_shape = (48,48,1)\n\n\nmodel.add(Conv2D(64, (5, 5), input_shape=input_shape,activation='relu', padding='same'))\nmodel.add(Conv2D(64, (5, 5), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(128, (5, 5),activation='relu',padding='same'))\nmodel.add(Conv2D(128, (5, 5),padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\nmodel.add(Conv2D(256, (3, 3),activation='relu',padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n## (15, 15) --->  30\nmodel.add(Flatten())\nmodel.add(Dense(6, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'],optimizer='adam')","6823068c":"model.fit(X, y_new, epochs=22, batch_size=64, shuffle=True, validation_split=0.2)","f4682c36":"model.save('model.h5')","e7530c6d":"The code are not made by me as this is for educational purpose.\nThe original code is obtained through this link:\n[https:\/\/www.kaggle.com\/programminghut\/facial-detection](https:\/\/www.kaggle.com\/programminghut\/facial-detection)"}}