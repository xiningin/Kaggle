{"cell_type":{"8b2e4319":"code","a0f64181":"code","5dc0b1b2":"code","0320b16a":"code","c03e47c6":"code","10735a9f":"code","2da68f0c":"code","1b81872b":"code","bb2384fb":"code","36f7b654":"code","eaab5339":"code","4e32451e":"code","ceebbc3f":"code","252f5521":"code","47fddd64":"code","759c7cba":"code","8aa2ef0d":"code","7e78b1a1":"code","236faa18":"code","d6f1992f":"code","a144b510":"code","90eff0d4":"code","56c6c09a":"code","7ad7322b":"code","2a9086c3":"code","e39f8a24":"code","43e86a98":"code","ad6d0534":"code","550daba7":"code","d0c6bfec":"code","cece5fef":"code","6ff6198e":"code","b218f8e2":"code","208afe41":"code","c1346658":"code","21e42f99":"markdown","e335a0de":"markdown","89632e80":"markdown","aa3e630e":"markdown","0899a97e":"markdown","f34fb073":"markdown","d6a874cf":"markdown","6499144a":"markdown","94ab526b":"markdown","c3262f47":"markdown","216e1e88":"markdown","1da0778b":"markdown","b85bf1bf":"markdown","1e5f4e26":"markdown","e28231ef":"markdown","cf9b7ef8":"markdown"},"source":{"8b2e4319":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import metrics","a0f64181":"data = pd.read_csv(\"..\/input\/us-accidents\/US_Accidents_June20.csv\")\ndata.head()","5dc0b1b2":"print(data.columns)","0320b16a":"colsToDelete = ['ID', 'Source', 'TMC', 'Start_Time', 'End_Time',\n                'End_Lat', 'End_Lng', 'Description', 'Number', 'Street', 'Side', 'City', 'County', 'State',\n                'Zipcode', 'Country', 'Timezone', 'Airport_Code', 'Weather_Timestamp']\ndata = data.drop(colsToDelete, axis=1).dropna()\ndata.head()","c03e47c6":"print(data.dtypes)","10735a9f":"def findIndex(x, lst=[]):\n    for i in range(len(lst)):\n        if(lst[i]==x):\n            return i","2da68f0c":"WindDirections        = list( data[\"Wind_Direction\"].unique() )\nWeatherConditions     = list( data[\"Weather_Condition\"].unique() )\nSunriseSunsets        = list( data[\"Sunrise_Sunset\"].unique() )\nCivilTwilights        = list( data[\"Civil_Twilight\"].unique() )\nNauticalTwilights     = data[\"Nautical_Twilight\"].unique()\nAstronomicalTwilights = data[\"Astronomical_Twilight\"].unique()","1b81872b":"for i in WindDirections:\n    data[\"Wind_Direction\"][ data[\"Wind_Direction\"]==i ] = findIndex(i, WindDirections)\nfor i in WeatherConditions:\n    data[\"Weather_Condition\"][ data[\"Weather_Condition\"]==i ] = findIndex(i, WeatherConditions)\nfor i in SunriseSunsets:\n    data[\"Sunrise_Sunset\"][ data[\"Sunrise_Sunset\"]==i ] = findIndex(i, SunriseSunsets)\nfor i in CivilTwilights:\n    data[\"Civil_Twilight\"][ data[\"Civil_Twilight\"]==i ] = findIndex(i, CivilTwilights)\nfor i in NauticalTwilights:\n    data[\"Nautical_Twilight\"][ data[\"Nautical_Twilight\"]==i ] = findIndex(i, NauticalTwilights)\nfor i in AstronomicalTwilights:\n    data[\"Astronomical_Twilight\"][ data[\"Astronomical_Twilight\"]==i ] = findIndex(i, AstronomicalTwilights)\n\ndata.head()","bb2384fb":"cols = [\"Amenity\", \"Bump\", \"Crossing\", \"Give_Way\", \"Junction\", \"No_Exit\", \"Railway\", \"Roundabout\", \"Station\",\n        \"Stop\", \"Traffic_Calming\", \"Traffic_Signal\", \"Turning_Loop\"]\nfor column in cols:\n    lst = []\n    for i in data[column]:\n        lst.append(1 if(i) else 0)\n    data[column] = lst\n\ndata.head()","36f7b654":"data = data.astype(\"float\")","eaab5339":"lat = data[\"Start_Lat\"]\nlng = data[\"Start_Lng\"]\nX   = data.drop([\"Start_Lat\", \"Start_Lng\"], axis=1)\n\nX.head()","4e32451e":"sns.heatmap(X.corr())","ceebbc3f":"colsToDelete = []\ncorrMatrix = X.corr()\nfor i in corrMatrix.index:\n    for j in corrMatrix.columns:\n        if( abs(corrMatrix[i][j])>=0.2 and i!=j ):\n            colsToDelete.append(i)\ncolsToDelete = list( pd.Series(colsToDelete).unique() )\nX = X.drop(colsToDelete, axis=1)\nX.head()","252f5521":"print(len(X.columns))","47fddd64":"predictLat = LinearRegression().fit(X, lat)\npredictLng = LinearRegression().fit(X, lng)","759c7cba":"print( metrics.mean_squared_error(lat, predictLat.predict(X)) )","8aa2ef0d":"print( metrics.mean_squared_error(lng, predictLng.predict(X)) )","7e78b1a1":"print( metrics.r2_score(lat, predictLat.predict(X)) )","236faa18":"print( metrics.r2_score(lng, predictLng.predict(X)) )","d6f1992f":"print( metrics.mean_squared_log_error(np.fabs(lat), np.fabs(predictLat.predict(X))) )","a144b510":"print( metrics.mean_squared_log_error(np.fabs(lng), np.fabs(predictLng.predict(X))) )","90eff0d4":"print( metrics.mean_absolute_error(lat, predictLat.predict(X)) )","56c6c09a":"print( metrics.mean_absolute_error(lng, predictLng.predict(X)) )","7ad7322b":"newX = pd.DataFrame( PolynomialFeatures(degree=2).fit_transform(X) )\nnewX.head()","2a9086c3":"sns.heatmap(newX.corr())","e39f8a24":"colsToDelete = []\ncorrMatrix = newX.corr()\nfor i in corrMatrix.index:\n    for j in corrMatrix.columns:\n        if( abs(corrMatrix[i][j])>=0.2 and i!=j ):\n            colsToDelete.append(i)\ncolsToDelete = list( pd.Series(colsToDelete).unique() )\nnewX = newX.drop(colsToDelete, axis=1)\nnewX.head()","43e86a98":"predictLatD2 = LinearRegression().fit(newX, lat)\npredictLngD2 = LinearRegression().fit(newX, lng)","ad6d0534":"print( metrics.mean_squared_error(lat, predictLatD2.predict(newX)) )","550daba7":"print( metrics.mean_squared_error(lng, predictLngD2.predict(newX)) )","d0c6bfec":"print( metrics.r2_score(lat, predictLatD2.predict(newX)) )","cece5fef":"print( metrics.r2_score(lng, predictLngD2.predict(newX)) )","6ff6198e":"print( metrics.mean_squared_log_error(np.fabs(lat), np.fabs(predictLatD2.predict(newX))) )","b218f8e2":"print( metrics.mean_squared_log_error(np.fabs(lng), np.fabs(predictLngD2.predict(newX))) )","208afe41":"print( metrics.mean_absolute_error(lat, predictLatD2.predict(newX)) )","c1346658":"print( metrics.mean_absolute_error(lng, predictLngD2.predict(newX)) )","21e42f99":"Firstly, **we should to read, clean and rewrite data as need**.","e335a0de":"MSLE for prediction models for latitude and longitude.","89632e80":"# Reading and modifying data.","aa3e630e":"R^2 for prediction models for latitude and longitude.","0899a97e":"As we see, prediction models, built using quadratic regression model, are worth. It may mean, that in this situation linear regression models are best variant for building prediction models.","f34fb073":"MSE for prediction models for latitude and longitude.","d6a874cf":"Ok, **data was processed**. If we want to predict location of accident **firstly we must split data on predictors and function values and check parameters on pairwise correlation**.","6499144a":"Ok, now we have good list of predictors. **Let's build prediction model. Let's begin with linear regression model.**","94ab526b":"MSE for prediction models for latitude and longitude.","c3262f47":"MSLE for prediction models for latitude and longitude.","216e1e88":"MAE for prediction models for latitude and longitude.","1da0778b":"As we see, different metrics give different answers about quality of linear regression model as prediction model of begining of accident. But main metrics show, that **built regression model is enouth good to usage**. \nWe have working prediction models, but can we build a better model using a higher degree regression model? Firstly, let's check it for quadratic regression models.","b85bf1bf":"R^2 for prediction models for latitude and longitude.","1e5f4e26":"MAE for prediction models for latitude and longitude.","e28231ef":"# Building and testing prediction model.","cf9b7ef8":"**Task: predict the location of the accident.**"}}