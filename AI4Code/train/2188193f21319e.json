{"cell_type":{"2162a192":"code","07409c18":"code","51c188fd":"code","e5e34c3a":"code","640165b5":"code","32ae5abf":"code","7d978989":"code","9f6b33e0":"code","80c13282":"code","02e1685c":"markdown","ca408fc0":"markdown","242b4c5d":"markdown","4e71fa02":"markdown","1c0df4cd":"markdown","38f1d4ea":"markdown","c268dd65":"markdown","2956f982":"markdown","fbb17577":"markdown","db822f29":"markdown","1edd8620":"markdown"},"source":{"2162a192":"# Load some modules...\nimport pandas as pd\nimport numpy as np\nimport calendar \nimport time ","07409c18":"# Load the data in dataframes...\ndf_professionals = pd.read_csv(\"..\/input\/professionals.csv\")\ndf_answers = pd.read_csv(\"..\/input\/answers.csv\")\ndf_questions = pd.read_csv(\"..\/input\/questions.csv\")","51c188fd":"df_questions_answers = df_questions.merge(right=df_answers, how='inner', \n                                         left_on='questions_id', \n                                         right_on='answers_question_id')\n\ndf_questions_answers[\"question_count\"] = 1\ndf_questions_count = df_questions_answers.groupby(\"answers_author_id\").sum()\n","e5e34c3a":"print(df_questions_count.head())","640165b5":"df_professionals.head()","32ae5abf":"\ndef calc_days_since_joined(x):\n    registration_timestamp = x.split(\" \", 1)[0]\n    registration_timestamp = calendar.timegm(time.strptime(registration_timestamp, '%Y-%m-%d'))\n    timestamp = time.time()    \n    \n    result = int((timestamp - registration_timestamp)\/60\/60\/24)\n    \n    return result\n\n\n# We use copy of the professionals dataframe, so we can drop some columns without losing them\ndf_professionals_custom = df_professionals.copy()\n\n# Here is the real action in....\ndf_professionals_custom[\"days_since_join\"] = df_professionals[\"professionals_date_joined\"].apply(calc_days_since_joined)\n\n# We drop some columns, we don't need them in this dataframe\ndf_professionals_custom.drop([\"professionals_location\", \"professionals_industry\", \"professionals_headline\", \"professionals_date_joined\"], axis=1, inplace=True)\n\n\n","7d978989":"df_professionals_custom.head()","9f6b33e0":"df_professionals_custom = df_professionals_custom.merge(right=df_questions_count, how='inner', \n                                                 left_on='professionals_id', \n                                                 right_on='answers_author_id')\n\nprint(df_professionals_custom.head())","80c13282":"# \ndef answered_questions_quote(x):\n    result = x[\"question_count\"] \/ (x[\"days_since_join\"]\/10)\n    return result\n    \n    \ndf_professionals_custom[\"answered_questions_per_10days_quote\"] = df_professionals_custom.apply(answered_questions_quote, axis=1)\n\n\n\ndf_professionals_custom.head()","02e1685c":"Looks good! Now we know how many questions a professional has answered\n\n---\n\nLet's get the days since a professional is registered... a short look in the professionals dataframe","ca408fc0":"Perfect! Now we know how many days a professional is registered\n\n--- \n\nSo let's merge both together\n","242b4c5d":"## General performance indikators for a professional\n\nFor each professional I will calculate a \"answered_questions_per_10days_quote\". So I have a comparable answering\/activity value for all professionals.\n\n(For later improvements: This is just an quantitativ value. We don't now the quality of the answers)\n\n\n\n\n\n---\n\nThis is just a simple first solution. At this point I don't use machine learning but there are some ways to improve this solution later.\n\n\n\nOf course I looked in all CSVs first, and for the first section I only will use the answers, questions and professionals data.","4e71fa02":"I will use this indikator in my solution later... and of course I will publish it here.\n\n\n**Thanks for reading!**","1c0df4cd":"We see that we can use the column \"professionals_date_joined\" to get a timestamp from the registration date. We only need the date and not the time, so we will split the value at the first white-space and convert the date to a timestamp.\n\nThen we can substract the registration timestamp from todays timestamp to get the time between registration and today in secondsband convert the seconds to days. We write the value in a new column ","38f1d4ea":"Now I merge questions an answers by ID and add a column \"question count\" with value 1 to all question-answer combinations. \n\nAfter that I can group our question-answer combinations by \"answers_author_id\" and sum up the \"question count\"-values.","c268dd65":"### Section 1 - the \"answered_questions_per_10days_quote\"\n","2956f982":"Awesome!! We have a comparable answering\/activity value for all professionals\n","fbb17577":"ok, let's take a look what we created...","db822f29":"Our dataframe is ready to calculate our \"answered_questions_per_10days_quote\" ","1edd8620":"Let's take a look what we created..."}}