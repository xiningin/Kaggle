{"cell_type":{"69fcf8d5":"code","ef86cfb0":"code","af407241":"code","bb68d113":"code","92cca9f5":"code","8940a895":"code","79f3b70e":"code","fb1ed63e":"code","a4bb9e9b":"code","a4ee49f8":"code","48668fa6":"code","ba89209f":"code","9a79cc6b":"code","04615d58":"code","2f852a7d":"code","48c93db4":"code","f65871d6":"code","7d280784":"code","2b222813":"code","66c228bd":"code","cf06cc81":"code","51732ad7":"code","7f827608":"code","b47082ab":"code","8807f4c1":"markdown","a2f99782":"markdown","a6a95b3b":"markdown","d0d10191":"markdown","07ab4866":"markdown","d828ed77":"markdown","dfbeb2bb":"markdown","2e827848":"markdown","f7096738":"markdown","1fffed83":"markdown"},"source":{"69fcf8d5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')","ef86cfb0":"df = pd.read_csv('..\/input\/heartcsv\/heart.csv')\ndf.head()","af407241":"df.target.value_counts()","bb68d113":"sns.countplot(x=\"target\", data=df)\nplt.show()\ncountNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))\n#:.2f\u53d6\u5230\u5c0f\u6578\u9ede\u7b2c\u4e8c\u4f4d","92cca9f5":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()\ncountFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","8940a895":"#\u4e86\u89e3target\u7684\u5e73\u5747\ndf.groupby('target').mean()","79f3b70e":"#\u5e74\u9f61\u548c\u76ee\u6a19\u53ef\u8996\u5316\npd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(30,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.show()","fb1ed63e":"#\u6027\u5225\u548c\u76ee\u6a19\u53ef\u8996\u5316\npd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\n#plt.legend\u662f\u6a19\u7c64\u540d\u7a31\u5b9a\u7fa9\nplt.ylabel('Frequency')\nplt.show()","a4bb9e9b":"#\u6709\u6c92\u6709\u75be\u75c5\u548c\u6700\u5927\u5fc3\u7387\u53ca\u5e74\u9f61\u95dc\u4fc2\uff08\u6709\u75be\u75c5\u5fc3\u8df3\u504f\u9ad8\uff0c\u5e74\u9f61\u843d\u572840-60\u9593\uff09\nplt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\n#scatter\u6563\u5e03\u5716\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","a4ee49f8":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","48668fa6":"#\u8840\u7cd6\u6709\u6c92\u6709\u8d85\u904e120\uff0c\u6709\u75c5\u7684\u901a\u5e38\u8840\u7cd6\u90fd\u8d85\u904e120\npd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","ba89209f":"#\u6709\u7121\u75c5\u548c\u80f8\u75db\u7b49\u7d1a\u95dc\u7cfb\npd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","9a79cc6b":"#pd.get_dummies\u985e\u5225\u8b8a\u91cf\u8f49\u63db\u70ba\u6a19\u7c64\u8b8a\u91cf\na = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")\nframes = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)#\u5408\u4f75frames\ndf = df.drop(columns = ['cp', 'thal', 'slope'])#\u53bb\u6389\u539f\u59cb\u6771\u897f\ndf.head()","04615d58":"y = df.target.values\n#\u5340\u5206x \u548c y data\nx_data = df.drop(['target'], axis = 1)","2f852a7d":"# Normalize(\u6b78\u4e00\u5316)\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","48c93db4":"#\u5340\u5206\u6e2c\u8a66\u53ca\u8a13\u7df4\u96c6\n#\u670920%\u7684\u8cc7\u6599\u6703\u7528\u5728\u6e2c\u8a66\u96c6\u4e2d\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","f65871d6":"accuracies = {}\n\nlr = LogisticRegression()\nlr.fit(x_train,y_train)#fit\u8a13\u7df4\u8a13\u7df4\u96c6\nacc = lr.score(x_test,y_test)*100  #\u8f38\u51fa\u6e96\u78ba\u7387\n\naccuracies['Logistic Regression'] = acc\nprint(\"Test Accuracy {:.2f}%\".format(acc))  ","7d280784":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)\n\nprint(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test, y_test)*100))","2b222813":"# try ro find best k value(\u627e\u6700\u4f73\u7684k\u503c)\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train, y_train)\n    scoreList.append(knn2.score(x_test, y_test))\n    \nplt.plot(range(1,20), scoreList)#print \u756b\u5716\u4e0d\u80fd\u653e\u5230for\u88e1\u9762\nplt.xticks(np.arange(1,20,1))   #\u8ddd\u96e2\u57281~19\u4e4b\u9593\uff08\u7b97\u982d\u4e0d\u7b97\u5c3e\uff09\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","66c228bd":"from sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(x_train, y_train)\n#acc\u7b97\u6e96\u78ba\u7387\nacc = svm.score(x_test,y_test)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","cf06cc81":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train, y_train)\n\nacc = nb.score(x_test,y_test)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","51732ad7":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\n\nacc = dtc.score(x_test, y_test)*100\naccuracies['Decision Tree'] = acc\nprint(\"Decision Tree Test Accuracy {:.2f}%\".format(acc))","7f827608":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train, y_train)\n\nacc = rf.score(x_test,y_test)*100\naccuracies['Random Forest'] = acc\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(acc))","b47082ab":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.show()","8807f4c1":"KNN Model","a2f99782":"******\u767c\u73feKNN\u6e96\u78ba\u7387\u6700\u9ad8\uff01\uff01\uff01\uff01\uff01","a6a95b3b":"sklearn Logistic Regression","d0d10191":"Support Vector Machine (SVM) Algorithm","07ab4866":"\u4ee5\u4e0a\u6f14\u7b97\u6cd5\u505a\u4e00\u500b\u7d71\u6574","d828ed77":"\u958b\u59cb\u505a\u8a08\u7b97","dfbeb2bb":"Decision Tree Algorithm","2e827848":"****target - have disease or not (1=yes, 0=no)********","f7096738":"Random Forest Classification","1fffed83":"Naive Bayes Algorithm"}}