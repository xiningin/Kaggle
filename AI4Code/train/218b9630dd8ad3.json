{"cell_type":{"8332e400":"code","bbd8a91d":"code","bf073965":"code","25ee2f38":"code","6c5d995e":"code","c516f4f6":"code","c0dfa052":"code","74e66138":"code","3b851605":"code","6d303ce6":"code","7028dff5":"code","e065b1aa":"code","cf9da4ec":"code","dd73eafd":"code","11eef3b8":"code","f4cccde2":"code","f9d72141":"code","1ff7632a":"code","f7f834ec":"code","b4fecaf1":"code","0efbd0da":"code","c5685a04":"code","b5a31f31":"code","088160c3":"code","90f4ffca":"code","165d6052":"code","a1fc6c68":"code","00438574":"code","c0cbd89d":"code","968522e4":"markdown","a4589806":"markdown","4e8fb9db":"markdown","d4194df7":"markdown","74f76d98":"markdown","787e84c8":"markdown","edbc36ac":"markdown","487c4eb9":"markdown"},"source":{"8332e400":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bbd8a91d":"data = pd.read_csv(\"..\/input\/bank-full.csv\",sep=\",\")","bf073965":"data.info()","25ee2f38":"data.head()","6c5d995e":"# we delete columns whose data type is text\ndata1= data.drop([\"job\",\"education\",\"contact\",\"month\",\"poutcome\"],axis=1)","c516f4f6":"data1[\"default\"] = [0 if each== \"no\" else 1 for each in data1.default]","c0dfa052":"data1[\"loan\"] = [0 if each== \"no\" else 1 for each in data1.loan]","74e66138":"data1[\"y\"] = [0 if each== \"no\" else 1 for each in data1.y]","3b851605":"data1[\"marital\"] = [1 if each == \"married\" else 0 if each == \"single\" else 0.5 for each in data1.marital]\ndata1[\"housing\"] = [1 if each == \"yes\" else 0  for each in data1.housing]","6d303ce6":"data1.head()","7028dff5":"# Defining to y and x_data values for train data\ny = data1.y.values\nx_data = data1.drop([\"y\"],axis=1)","e065b1aa":"# normalization\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))","cf9da4ec":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test =  train_test_split(x,y,test_size=0.15,random_state=42)","dd73eafd":"# we define 2 list that one of them save results of models other list save name of model\nlabelList = []\nresultList = []","11eef3b8":"# Logictic Regression with sklearn\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"test accuracy {}\".format(lr.score(x_test,y_test)))\n\n# adding result and label to lists\nlabelList.append(\"Log_Rec\")\nresultList.append(lr.score(x_test,y_test))","f4cccde2":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"decison tree score : \",dt.score(x_test,y_test))\n\n# adding result and label to lists\nlabelList.append(\"Dec_Tree\")\nresultList.append(dt.score(x_test,y_test))","f9d72141":"# Random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100,random_state = 1)\nrf.fit(x_train, y_train)\nprint(\"Random forest algor. result: \",rf.score(x_test,y_test))\n\n# adding result and label to lists\nlabelList.append(\"Rand_For\")\nresultList.append(rf.score(x_test,y_test))\n","1ff7632a":"# Naive Byes \nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"print accuracy of naive bayes algo: \",nb.score(x_test,y_test))\n\n# adding result and label to lists\nlabelList.append(\"Naive_Byes\")\nresultList.append(nb.score(x_test,y_test))","f7f834ec":"# SVM model\nfrom sklearn.svm import SVC\nsvm = SVC(random_state=3)\nsvm.fit(x_train,y_train)\nprint(\"print accuracy of svm algo: \",svm.score(x_test,y_test))\n\n# adding result and label to lists\nlabelList.append(\"SVM\")\nresultList.append(svm.score(x_test,y_test))","b4fecaf1":"# KNN model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3) #n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\n\n# score\nprint(\" {} nn score: {} \".format(3,knn.score(x_test,y_test)))","0efbd0da":"# Finding optimum k value between 1 and 15\nscore_list = []\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors = each) # create a new knn model\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n\nplt.plot(range(1,15),score_list) # x axis is in interval of 1 and 15\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n\n","c5685a04":"# finding max value in a list and it's index.\na = max(score_list) # finding max value in list\nb = score_list.index(a)+1 # index of max value.\n\nprint(\"k = \",b,\" and maximum value is \", a)\n\n# adding result and label to lists\nlabelList.append(\"KNN\")\nresultList.append(a)","b5a31f31":"plt.plot(labelList,resultList)\nplt.show()","088160c3":"# First of all we combine 2 lists (labelList and resultList) by using zip method\nzipped = zip(labelList, resultList)\nzipped = list(zipped)","90f4ffca":"df = pd.DataFrame(zipped, columns=['label','result'])","165d6052":"df","a1fc6c68":"new_index = (df['result'].sort_values(ascending=False)).index.values \nsorted_data = df.reindex(new_index)","00438574":"plt.plot(sorted_data.loc[:,\"label\"],sorted_data.loc[:,\"result\"])\nplt.show()","c0cbd89d":"sorted_data","968522e4":"**3. Train Test Splite**","a4589806":"**1. Data Cleaning and Regulation**","4e8fb9db":"**6. Conclusion**\n\nAccording to out results **Random Forest** has the biggest result value and others respectively KNN and Logistic Regression.","d4194df7":"**EXPLANATION**\n\nIn this kernel, I compare 6 different classification methods in machine learning.\n\n**CONTENTS**\n\n**1. Data Cleaning and Regulation**\n   \n   I am looking data in general and change number from text for example, Yes-->1 and No-->0. In addtion to this I drop columns which is consist of texts.\n\n**2. Normalization**\n\n**3. Train Test Splite**\n    \nI separate data to 2 different part which is train and test. They are dataset.\n\n**4. Classification Methods **\n\nLogistic Regression, Decision Tree, Random Forest, Navie Byes, SVM, KNN\n\n**5. Visualization**\n\n**6. Conclusion**","74f76d98":"**5. Visualization**","787e84c8":"**2. Normalization**","edbc36ac":"**4. Classifications Methods**\n1. Logistic Regression\n2. Decision Tree\n3. Random Forest\n4. Naive Byes\n5. SVM Model\n6. KNN Model\n","487c4eb9":"Above chart give information to us about results of classification algorithms but it is not sorted and clear chart. We can improve this graph to read it easily."}}