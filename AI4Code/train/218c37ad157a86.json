{"cell_type":{"2092de87":"code","56d62e51":"code","ed377e65":"code","58719907":"code","fbb33849":"code","9408188c":"code","14fdf295":"code","2ac0aeee":"code","5cdd1ee7":"code","65b8fa08":"code","e956b6fd":"code","cfcda6f4":"code","eaae1452":"code","b5f2af5b":"code","523f2e74":"code","031ebe61":"code","689f978f":"code","53f0e827":"code","013da1fd":"code","d0e4a1fc":"code","096d6817":"code","af0649b4":"code","c9eb22cb":"code","8ee466c5":"code","ef633dc5":"code","782667b5":"code","d5bc845c":"code","71b2a2fb":"code","256c6058":"markdown","836811f3":"markdown","1b129977":"markdown","de088433":"markdown","63e3b376":"markdown","a87296c0":"markdown"},"source":{"2092de87":"import pandas as pd\nimport numpy as np\ndf=pd.read_csv(\"..\/input\/algo.csv\")\ndf.rename( columns={'Unnamed: 0':'date'}, inplace=True )\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf['day'] = df['date'].dt.day\ndf['hour'] = df['date'].dt.hour\ndf['minute'] = df['date'].dt.minute\ndf=df.drop([\"date\"],axis=1)\ndf.head()","56d62e51":"df.isnull().sum() # Checking if there is any null value in the dataset ","ed377e65":"df.dtypes","58719907":"df=df.fillna(df.mean()) #replacing the null values with the average value ","fbb33849":"df.describe() #statistical description of the dataset","9408188c":"#Creating Pearson Correlation matrix \nimport matplotlib.pyplot as plt #Importing matplotlib library\nimport seaborn as sns#importing seaborn\nimport statsmodels.api as sm\nplt.figure(figsize=(10,8))\ncor = df.corr()\nsns.heatmap(cor, annot=True,cmap=plt.cm.Reds)\nplt.show()","14fdf295":"#Correlation with output variable\ncor_tar = abs(cor[\"MFR\"])\n#Selecting highly correlated features with target value(MFR)\nrel_features = cor_tar[cor_tar>0.01]\nrel_features #Features those are highly correlated with target value('MFR')","2ac0aeee":"import matplotlib.pyplot as plt \n# plot a histogram to see the distribution of MFR  \ndf['MFR'].hist(bins=30) ","5cdd1ee7":"# get columns to plot\ncolumns = df.columns.drop(['MFR'])\n# create x data\nx_data = range(0,df.shape[0])\n# create figure and axis\nfig, ax = plt.subplots()\n# plot each column\nfor column in columns:\n    ax.plot(x_data, df[column], label=column)\n# set title and legend\nax.set_title('Prediction of Polymer Quality')\nax.legend()","65b8fa08":"#Data Visulaization and relation between each and every feature(including the target value)\nimport seaborn as sns\nsns.pairplot(df)","e956b6fd":"#fREQUENCY OF EACH AND EVERY FEATURES IN THE DAATSET\ndf.plot.hist(subplots=True, figsize=(10, 10), bins=20)","cfcda6f4":"sns.countplot(df['MFR'])","eaae1452":"sns.countplot(df['513HC31114-5.mv'])","b5f2af5b":"sns.countplot(df['513PC31201.pv'])","523f2e74":"sns.countplot(df['513FC31409.pv'])","031ebe61":"# plotting between Hydrogen ratio and MFR value\ny = df[\"MFR\"] \nx = df[\"513HC31114-5.mv\"] \nplt.scatter(x, y, label= \"stars\", color= \"m\",  \n            marker= \"*\", s=30) \n# x-axis label \nplt.ylabel('MFR') \n# frequency label \nplt.xlabel('513HC31114-5.mv') \n# function to show the plot \nplt.show() ","689f978f":"# plotting between Pressure controller and MFR value \ny = df[\"MFR\"] \nx = df[\"513PC31201.pv\"] \nplt.scatter(x, y, label= \"stars\", color= \"m\",  \n            marker= \"*\", s=30) \n# x-axis label \nplt.ylabel('MFR') \n# frequency label \nplt.xlabel('513PC31201.pv') \n# function to show the plot \nplt.show() ","53f0e827":"# plotting between Propylene flow and MFR value\ny = df[\"MFR\"] \nx = df[\"513FC31103.pv\"] \nplt.scatter(x, y, label= \"stars\", color= \"m\",  \n            marker= \"*\", s=30) \n# x-axis label \nplt.ylabel('MFR') \n# frequency label \nplt.xlabel('513FC31103.pv') \n# function to show the plot \nplt.show() ","013da1fd":"#Min-Max Scaling \nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n  \n# Scaled feature \ndf['513FC31103.pv'] = scaler.fit_transform(df['513FC31103.pv'].values.reshape(-1,1))\ndf['513PC31201.pv'] = scaler.fit_transform(df['513PC31201.pv'].values.reshape(-1,1))\ndf['513LC31202.pv'] = scaler.fit_transform(df['513LC31202.pv'].values.reshape(-1,1))\ndf['513FC31409.pv'] = scaler.fit_transform(df['513FC31409.pv'].values.reshape(-1,1))\ndf['513FC31103.pv'] = scaler.fit_transform(df['513FC31103.pv'].values.reshape(-1,1))\ndf['513TC31220.pv'] = scaler.fit_transform(df['513TC31220.pv'].values.reshape(-1,1))","d0e4a1fc":"df.head()","096d6817":"#Using Logistic Regression\n\n#Split the dataset into train and test\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(df.drop([\"MFR\",\"year\",\"hour\",\"minute\"],axis=1),df.MFR.astype('int'),train_size=0.8) #TARGET VALUE = MFR \n#Building Model\nfrom sklearn.linear_model import LogisticRegression\nmodel=LogisticRegression(C=100)\nmodel.fit(x_train,y_train)","af0649b4":"#For Logistic Regression\nfrom sklearn import metrics\ny_pred=model.predict(x_test)\nprint(\"Model Accuracy is :\",metrics.accuracy_score(y_test,y_pred))","c9eb22cb":"#Using Random Forest\n\n#Split the dataset into train and test\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(df.drop([\"MFR\",\"year\",\"hour\",\"minute\"],axis=1),df.MFR.astype('int'),train_size=0.8) #TARGET VALUE = MFR \n#Building Model\nfrom sklearn.ensemble import RandomForestClassifier\nmodel=RandomForestClassifier(n_estimators=1000)\nmodel.fit(x_train,y_train)","8ee466c5":"#For Random Forest\ny_pred=model.predict(x_test)\nprint(\"Model Accuracy is :\",metrics.accuracy_score(y_test,y_pred))","ef633dc5":"#Using KNN Algorithm\n\n#Split the dataset into train and test\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(df.drop([\"MFR\",\"year\",\"hour\",\"minute\"],axis=1),df.MFR.astype('int'),train_size=0.8) #TARGET VALUE = MFR \n#Building Model\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel=KNeighborsClassifier(n_neighbors=3)\nmodel.fit(x_train,y_train)","782667b5":"#For KNN algorithm\ny_pred=model.predict(x_test)\nprint(\"Model Accuracy is :\",metrics.accuracy_score(y_test,y_pred))","d5bc845c":"#Using Decision Tree\n\n#Split the dataset into train and test\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(df.drop([\"MFR\",\"year\",\"hour\",\"minute\"],axis=1),df.MFR.astype('int'),train_size=0.8) #TARGET VALUE = MFR \n#Building Model\nfrom sklearn import tree\nmodel=tree.DecisionTreeClassifier()\nmodel.fit(x_train,y_train)","71b2a2fb":"#For Decision Tree\ny_pred=model.predict(x_test)\nprint(\"Model Accuracy is :\",metrics.accuracy_score(y_test,y_pred))","256c6058":"# Scatter plot to find the relational graph with some features and the target value","836811f3":"# Count plotting for different features","1b129977":"# Different kind of Data Visualization","de088433":"# Applying Different Machine Learning Algorithms","63e3b376":"# Pre-processing & Basic statistical analysis","a87296c0":"# Normalization"}}