{"cell_type":{"0eef1d9c":"code","0f0149cd":"code","de94845b":"code","da345b75":"code","b7c6c576":"code","ba00bc09":"code","59b31ea9":"code","c173a741":"code","3ca3f594":"code","da95a874":"code","93db06d0":"code","eb646d4e":"code","9a19c1cc":"code","a56ee1d9":"code","fca375b2":"code","9cde3cf6":"code","62b7ca29":"code","2fbe73ba":"code","1003d752":"code","6bedee71":"code","ec6f405d":"code","016ed72c":"markdown","fecdf9e7":"markdown","796c4938":"markdown","3841f479":"markdown","8525c563":"markdown","6e4a9114":"markdown","042d4976":"markdown","04142b84":"markdown","fa9ca21a":"markdown","02cbbbd5":"markdown","46260135":"markdown","96a223d1":"markdown","560c430c":"markdown","216ac032":"markdown","95e0b3c5":"markdown","125fa813":"markdown","dd1badf6":"markdown","7a21ab4e":"markdown"},"source":{"0eef1d9c":"# Install csvvalidator to validate datasets\n!pip install csvvalidator","0f0149cd":"import os\nimport numpy as np\nimport pandas as pd\nfrom bokeh.io import output_notebook, push_notebook, show\nfrom bokeh.models import ColumnDataSource, HoverTool, LabelSet, CategoricalColorMapper\nfrom bokeh.layouts import row\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import Spectral4, Spectral11\n\nfrom ipywidgets import interact, IntSlider, Checkbox\n\nfrom h2020 import *\n\noutput_notebook()\nprint(os.listdir('..\/input\/eu-research-projects-under-horizon-2020'))","de94845b":"# Members of the EU\neu_list = ['Austria','Belgium','Bulgaria','Croatia','Cyprus','Czechia','Denmark',\n           'Estonia','Finland','France','Germany','Greece','Hungary','Ireland',\n           'Italy','Latvia','Lithuania','Luxembourg','Malta','Netherlands','Poland',\n           'Portugal','Romania','Slovakia','Slovenia','Spain','Sweden','United Kingdom']","da345b75":"countries = H2020Countries('..\/input\/eu-research-projects-under-horizon-2020\/cordisref-countries.csv')\ncountries.validate()\ncountries.print_validation_summary()\ndf_c = countries.read()\ndf_c = df_c[df_c.language == 'en'].dropna(subset=['euCode']).set_index('euCode').sort_index()\ndf_c['is_in_eu'] = df_c.name.isin(eu_list)","b7c6c576":"projects = H2020Projects('..\/input\/eu-research-projects-under-horizon-2020\/cordis-h2020projects.csv') \nprojects.validate()\nprojects.print_validation_summary()\ndf_p = projects.read()","ba00bc09":"df_p_year = df_p.dropna(subset=['startDate']).copy()\ndf_p_year['startYear'] = df_p_year.startDate.dt.year\ndf_p_year = df_p_year[['startYear']]\ndf_p_year.sort_index(inplace=True)","59b31ea9":"org = H2020Organizations('..\/input\/eu-research-projects-under-horizon-2020\/cordis-h2020organizations.csv') \norg.validate()\norg.print_validation_summary()\ndf_org = org.read()","c173a741":"prog = H2020Programmes('..\/input\/eu-research-projects-under-horizon-2020\/cordisref-H2020programmes.csv')\nprog.validate()\nprog.print_validation_summary()\ndf_pg = prog.read()\ndf_pg.dropna(how='all', inplace=True)\ndf_pg = df_pg[df_pg.language=='en']\ndf_pg.drop(['language'], axis=1, inplace=True)\ndf_pg['shortTitle'].fillna(df_pg['title'], inplace=True)","3ca3f594":"org_columns = ['projectRcn','projectID','ecContribution', 'country']\ndf_org_c = pd.merge(df_org[org_columns], df_c[['name','is_in_eu']], left_on='country',right_index=True)\ndf_org_p = pd.merge(df_org_c, df_p_year, left_on='projectRcn', right_index=True)\n\ndf_org_p_eu = df_org_p.copy()\n\ndf_org_p_eu['_code'] = df_org_p_eu.apply(lambda x: x.country if x.is_in_eu else 'OTH', axis=1)\ndf_org_p_eu['_country'] = df_org_p_eu.apply(lambda x: x['name'] if x.is_in_eu else 'Other non-EU countries', axis=1)\ndf_org_p_eu['_legend'] = df_org_p_eu.apply(lambda x: 'EU Member' if x.is_in_eu else 'Other non-EU countries', axis=1)\n# Mark the UK with another color on the plot\ndf_org_p_eu.loc[df_org_p_eu['country']=='UK','_legend']='UK'\n\n\ndf_cn_yr_eu = (df_org_p_eu.loc[:,['projectID','ecContribution','_country','_code','startYear','_legend']]\n                                            .groupby(['startYear', '_country','_code','_legend'])\n                                            .agg({'projectID':'size','ecContribution':'sum'}))","da95a874":"df_org_p_oth = df_org_p.copy()\n\n# Calculate cut off sum for countries to display\nmax_cont_oth = df_org_p_oth[~df_org_p_oth.is_in_eu].groupby(['country']).ecContribution.sum().max()\n\ndf_org_p_oth['_code'] = df_org_p_oth['country']\ndf_org_p_oth['_country'] = df_org_p_oth['name']\ndf_org_p_oth['_legend'] = df_org_p_oth.apply(lambda x: 'EU Member' if x.is_in_eu else 'non-EU country', axis=1)\n\ndf_cn_yr_oth = (df_org_p_oth.loc[:,['projectID','ecContribution','_code','_country','startYear','_legend']]\n                                            .groupby(['startYear','_code', '_country','_legend'])\n                                            .agg({'projectID':'size','ecContribution':'sum'}))\n# Generate a list of countries to display\ndf_cn_tot = df_cn_yr_oth.groupby(['_code']).ecContribution.sum()\ncode_list = df_cn_tot.loc[(df_cn_tot<=max_cont_oth+1) & (df_cn_tot>0)].index\n\n# Select only countries that are in the list\ndf_cn_yr_oth = df_cn_yr_oth[(df_cn_yr_oth.index.get_level_values(1).isin(code_list))]","93db06d0":"def plot_contribution_prj_num_cn(df_cn_yr, year=2020):\n    max_yr = df_cn_yr.index.max()[0]\n    min_yr = df_cn_yr.index.min()[0]\n    \n    # Data for totals\n    df_cn = df_cn_yr.loc[slice(year),:].groupby(['_country','_code','_legend']).agg({'projectID':'sum','ecContribution':'sum'})\n    df_cn.reset_index(['_code','_legend'],inplace=True)\n    # Data for the most recent yr\n    df_cn_1yr = df_cn_yr.loc[year,:]\n    df_cn_1yr.reset_index(['_code','_legend'],inplace=True)\n    \n    # Make the ColumnDataSource: source1\n    source1 = ColumnDataSource(data={\n        'x'           : df_cn.projectID,\n        'y'           : df_cn.ecContribution\/1000000,\n        'country'     : df_cn.index.values,\n        'country_code': df_cn._code,\n        'legend'      : df_cn._legend})\n\n    # Save the minimum and maximum values of the projectID column: xmin1, xmax1\n    xmin1, xmax1 = min(source1.data['x']), max(source1.data['x'])\n\n    # Save the minimum and maximum values of the ecContribution column: ymin1, ymax1\n    ymin1, ymax1 = min(source1.data['y']), max(source1.data['y'])\n\n    # Make the ColumnDataSource: source2\n    source2 = ColumnDataSource(data={\n        'x'           : df_cn_1yr.projectID,\n        'y'           : df_cn_1yr.ecContribution\/1000000,\n        'country'     : df_cn_1yr.index.values,\n        'country_code': df_cn_1yr._code,\n        'legend'      : df_cn_1yr._legend})\n\n    # Save the minimum and maximum values of the projectID column: xmin2, xmax2\n    xmin2, xmax2 = min(source2.data['x']), max(source2.data['x'])\n\n    # Save the minimum and maximum values of the ecContribution column: ymin2, ymax2\n    ymin2, ymax2 = min(source2.data['y']), max(source2.data['y'])\n    # Create the figure: p1\n    p1 = figure(y_axis_label='EC Contribution (mlns euros)', x_axis_label='Number of Projects',\n                plot_height=400, plot_width=710, x_range = (xmin1-2, xmax1*1.1), y_range = (ymin1-2,ymax1*1.1))\n    p1.title.text = 'EC Contribution and Number of Projects started in period from {} to {} grouped by countries'.format(min_yr, year)\n\n    # p2 = figure(y_axis_label='EC Contribution (mlns euros)', x_axis_label='Number of Projects',\n    #             plot_height=400, plot_width=700, x_range = (xmin2-2, xmax2*1.1), y_range = (ymin2-2,ymax2*1.1))\n    p2 = figure(x_axis_label='Number of Projects',\n                plot_height=400, plot_width=700, x_range = (xmin2-2, xmax2*1.1), y_range = (ymin2-2,ymax2*1.1))\n    p2.title.text = 'EC Contribution and Number of Projects started in {} grouped by countries'.format(year)\n    # Create a HoverTool: hover\n    hover = HoverTool(tooltips=[('Country', '@country'),\n                                ('EC Contribution (mlns euros)', '@y{1.11}'),\n                                ('Number of Projects', '@x{int}')])\n\n    # Add the HoverTool to the plots p1 and p2\n    p1.add_tools(hover)\n    p2.add_tools(hover)\n\n    legend = np.unique(df_cn_yr.index.get_level_values(3))\n    color_mapper = CategoricalColorMapper(factors=legend, palette=Spectral4)\n\n    # Add a circle glyph to the figures p1 and p2\n    p1.circle(x='x', y='y', source=source1, size=10, fill_alpha=0.8, color=dict(field='legend', transform=color_mapper), legend_field='legend')\n    p2.circle(x='x', y='y', source=source2, size=10, fill_alpha=0.8, color=dict(field='legend', transform=color_mapper), legend_field='legend')\n\n    # Create labelsets for the figures p1 and p2\n    labels1 = LabelSet(x='x', y='y', text='country_code', level='glyph',\n                  x_offset=5, y_offset=5, source=source1, render_mode='canvas', \n                  text_font_size='8pt', text_alpha=0.6)\n    labels2 = LabelSet(x='x', y='y', text='country_code', level='glyph',\n                  x_offset=5, y_offset=5, source=source2, render_mode='canvas', \n                  text_font_size='8pt', text_alpha=0.6)\n    \n    p1.legend.location = 'top_left'    \n    p1.legend.background_fill_alpha = 0.3\n    p1.xgrid.visible = False \n    p1.ygrid.visible = False\n    p2.legend.location = 'top_left'\n    p2.legend.background_fill_alpha = 0.3\n    p2.xgrid.visible = False \n    p2.ygrid.visible = False\n    \n\n    # Add labels1 and labels2 to the figures p1 and p2\n    p1.add_layout(labels1 )\n    p2.add_layout(labels2)\n\n    # Create row layout from p1 and p2\n    layout = row(p1, p2)\n\n    def update_plot(yr=year, chk1=True, chk2=True):\n        df_cn = (df_cn_yr.loc[slice(yr),:].groupby(['_country','_code','_legend'])\n                                         .agg({'projectID':'sum','ecContribution':'sum'}))\n        df_cn.reset_index(['_code','_legend'], inplace = True)\n        df_cn_1yr = df_cn_yr.loc[yr,:]\n        df_cn_1yr.reset_index(['_code','_legend'], inplace = True)\n \n        p1.title.text = 'EC Contribution and Number of Projects started in the period from {} to {} grouped by countries'.format(min_yr, yr)\n        p2.title.text = 'EC Contribution and Number of Projects started in {} grouped by countries'.format(yr)\n        new_data1 = {\n                     'x'           : df_cn.projectID,\n                     'y'           : df_cn.ecContribution\/1000000,\n                     'country'     : df_cn.index.values,\n                     'country_code': df_cn._code,\n                     'legend'      : df_cn._legend}\n        source1.data = new_data1\n        new_data2 = {\n                     'x'           : df_cn_1yr.projectID,\n                     'y'           : df_cn_1yr.ecContribution\/1000000,\n                     'country'     : df_cn_1yr.index.values,\n                     'country_code': df_cn_1yr._code,\n                     'legend'      : df_cn_1yr._legend}\n        source2.data = new_data2\n        if chk1:\n            # set x_range and y_range for p1\n            p1.x_range.start = min(new_data1['x'])-2\n            p1.x_range.end = max(new_data1['x'])*1.1\n            p1.y_range.start = min(new_data1['y'])-2\n            p1.y_range.end = max(new_data1['y'])*1.1\n        if chk2:\n            # set x_range and y_range for p2\n            p2.x_range.start = min(new_data2['x'])-2\n            p2.x_range.end = max(new_data2['x'])*1.1\n            p2.y_range.start = min(new_data2['y'])-2\n            p2.y_range.end = max(new_data2['y'])*1.1\n  \n        push_notebook()\n\n    #show(layout, notebook_handle=True)\n    #interact(update_plot, \n    #         yr=IntSlider(value=year, min=2014, max=max_yr, step=1,  description='Year:'),\n    #         chk1=Checkbox(value=True, description='Auto set range (left plot)',disabled=False,indent=True),\n    #         chk2=Checkbox(value=True, description='Auto set range (right plot)',disabled=False,indent=True))\n    show(layout)","eb646d4e":"plot_contribution_prj_num_cn(df_cn_yr_eu, year=2021)","9a19c1cc":"plot_contribution_prj_num_cn(df_cn_yr_oth, year=2021)","a56ee1d9":"df_t = df_p[['id','programme']].copy()\ndf_t.set_index('id',inplace=True)\ndf_t = df_t['programme'].str.split(';', expand=True)\ndf_t = (pd.melt(df_t.reset_index(),id_vars=['id'],value_name='programme')\n               .dropna(subset=['programme']).drop('variable',axis=1)\n               .set_index('id').sort_index())\ndf_t['programme_l'] = df_t.programme.str.split('.')\ndf_t.programme.value_counts()\ndf_t['group'] = (df_t.programme_l.apply(lambda x: x[0]+'.'+x[1]+'.'+x[2]+'.' if len(x)>=4 else\n                                                  x[0]+'.'+x[1]+'.' if len(x)==3 else\n                                                  x[0]+'.' if len(x)==2 else\n                                                  x[0]))\n# We don't need `progaramme_l` anymore\ndf_t.drop('programme_l', axis=1, inplace=True)","fca375b2":"prog = H2020Programmes('..\/input\/eu-research-projects-under-horizon-2020\/cordisref-H2020programmes.csv', encoding='utf-8-sig')\nprog.validate()\nprog.print_validation_summary()\ndf_pg = prog.read()\ndf_pg.dropna(how='all', inplace=True)\ndf_pg = df_pg[df_pg.language=='en']\ndf_pg.drop(['language'], axis=1, inplace=True)\ndf_pg['shortTitle'].fillna(df_pg['title'], inplace=True)\ndf_pg.set_index('code', inplace=True)","9cde3cf6":"df_t = pd.merge(df_t['group'], df_pg['shortTitle'], left_on='group', right_index=True)\ndf_t = df_t.rename(columns={'shortTitle': 'g_name'})","62b7ca29":"df_pg_yr = pd.merge(df_t[['g_name']], df_org_p[['startYear', 'projectID', 'ecContribution','country']], \n                      left_index=True, right_on='projectID')\n\n# Project can belong to several programs in the same group, that's why we can have duplicated rows\ndf_pg_yr.drop_duplicates(subset=['g_name', 'startYear','projectID','ecContribution'], inplace=True)\ndf_pg_yr = pd.merge(df_pg_yr, df_c['is_in_eu'], left_on='country', right_index=True)\n\ndf_pg_yr_all = df_pg_yr.groupby(['startYear','g_name', 'projectID']).agg({'ecContribution': 'sum'})\ndf_pg_yr_all.reset_index('projectID', inplace=True)\n\ndf_pg_yr_all = df_pg_yr_all.groupby(['startYear','g_name']).agg({'projectID': 'size', 'ecContribution': 'sum'})\n\ntopg_list_all = (list(df_pg_yr_all.groupby('g_name')\n                              .agg({'ecContribution': 'sum'})\n                              .sort_values('ecContribution', ascending=False)\n                              .reset_index()\n                              .loc[slice(9),'g_name']))\ndf_pg_yr_all.reset_index('g_name', inplace=True)\ndf_pg_yr_all['_legend'] = df_pg_yr_all.apply(lambda x: x['g_name'] if x['g_name'] in topg_list_all else 'Other', axis=1)\ndf_pg_yr_all.set_index(['g_name'], append=True, inplace=True)","2fbe73ba":"df_pg_yr_oth = df_pg_yr[~df_pg_yr.is_in_eu].groupby(['startYear','g_name', 'projectID']).agg({'ecContribution': 'sum'})\ndf_pg_yr_oth.reset_index('projectID', inplace=True)\n\ndf_pg_yr_oth = df_pg_yr_oth.groupby(['startYear','g_name']).agg({'projectID': 'size', 'ecContribution': 'sum'})\n\ntopg_list_oth = (list(df_pg_yr_oth.groupby('g_name')\n                              .agg({'ecContribution': 'sum'})\n                              .sort_values('ecContribution', ascending=False)\n                              .reset_index()\n                              .loc[slice(9),'g_name']))\ndf_pg_yr_oth.reset_index('g_name', inplace=True)\ndf_pg_yr_oth['_legend'] = df_pg_yr_oth.apply(lambda x: x['g_name'] if x['g_name'] in topg_list_oth else 'Other', axis=1)\ndf_pg_yr_oth.set_index(['g_name'], append=True, inplace=True)","1003d752":"def plot_contribution_prj_num_pg(df_pg_yr, year=2020):\n    max_yr = df_pg_yr.index.max()[0]\n    min_yr = df_pg_yr.index.min()[0]\n    \n    # Data for totals\n    df_pgl = df_pg_yr.loc[slice(year),:].groupby(['g_name','_legend']).agg({'projectID':'sum','ecContribution':'sum'})\n    df_pgl.reset_index(['_legend'],inplace=True)\n    \n    # Data for max_yr\n    df_pgl_1yr = df_pg_yr.loc[year,:].copy()\n    \n    # Set `year` column to use it in hover tool\n    df_pgl['year'] = year\n    df_pgl_1yr['year'] = year\n    \n    # Data to draw a line\n    df_pgl_all = df_pg_yr.groupby(level=1).cumsum()\n \n    # Make the ColumnDataSource: source1\n    source1 = ColumnDataSource(data={\n        'x'           : df_pgl.projectID,\n        'y'           : df_pgl.ecContribution\/1000000,\n        'sname'       : df_pgl.index.values,\n        'legend'      : df_pgl._legend,\n        'year'        : df_pgl.year})\n\n    # Save the minimum and maximum values of the projectID column: xmin1, xmax1\n    xmin1, xmax1 = min(source1.data['x']), max(source1.data['x'])\n\n    # Save the minimum and maximum values of the ecContribution column: ymin1, ymax1\n    ymin1, ymax1 = min(source1.data['y']), max(source1.data['y'])\n\n    # Make the ColumnDataSource: source2\n    source2 = ColumnDataSource(data={\n        'x'           : df_pgl_1yr.projectID,\n        'y'           : df_pgl_1yr.ecContribution\/1000000,\n        'sname'       : df_pgl_1yr.index.values,\n        'legend'      : df_pgl_1yr._legend,\n        'year'        : df_pgl_1yr.year})\n\n    # Save the minimum and maximum values of the projectID column: xmin2, xmax2\n    # xmin2, xmax2 = min(source2.data['x']), max(source2.data['x'])\n    xmin2, xmax2 = min(df_pg_yr['projectID']), max(df_pg_yr['projectID'])\n\n    # Save the minimum and maximum values of the ecContribution column: ymin2, ymax2\n    # ymin2, ymax2 = min(source2.data['y']), max(source2.data['y'])\n    ymin2, ymax2 = min(df_pg_yr['ecContribution'])\/1000000, max(df_pg_yr['ecContribution']\/1000000)\n    # Create the figure: p1\n    p1 = figure(y_axis_label='EC Contribution (mlns euros)', x_axis_label='Number of Projects',\n                plot_height=500, plot_width=760, x_range = (xmin1-1, xmax1*1.05), y_range = (ymin1-1,ymax1*1.8))\n    p1.title.text = 'EC Contribution and Number of Projects started in period from {} to {} grouped by programs'.format(min_yr, year)\n\n    # p2 = figure(y_axis_label='EC Contribution (mlns euros)', x_axis_label='Number of Projects',\n    #             plot_height=500, plot_width=600, x_range = (xmin2-1, xmax2*1.05), y_range = (ymin2-1,ymax2*1.05))\n    p2 = figure(x_axis_label='Number of Projects',\n                plot_height=500, plot_width=600, x_range = (xmin2-1, xmax2*1.05), y_range = (ymin2-1,ymax2*1.05))\n    p2.title.text = 'EC Contribution and Number of Projects started in {} grouped by programs'.format(year)\n    # Create a HoverTool: hover\n    hover = HoverTool(tooltips=[('Year', '@year'),\n                                ('Program group', '@sname'),\n                                ('EC Contribution (mlns euros)', '@y{1.11}'),\n                                ('Number of Projects', '@x{int}')], names=['circle1','circle2','scatter1','scatter2'])\n\n    # Add the HoverTool to the plots p1 and p2\n    p1.add_tools(hover)\n    p2.add_tools(hover)\n\n    legend = np.unique(df_pg_yr._legend)\n    color_mapper = CategoricalColorMapper(factors=legend, palette=Spectral11)\n    \n   \n    # Draw lines\n    ls1=[]\n    ls2=[]\n    g_list = list(legend)\n    g_list.remove('Other')\n    for idx, gr in enumerate(g_list):\n        df_pgl_gr = df_pgl_all.loc[(slice(max_yr),[gr]),:]\n        ls1.append(ColumnDataSource(data={\n                                         'x'         : df_pgl_gr.projectID,\n                                         'y'         : df_pgl_gr.ecContribution\/1000000,\n                                         'year'      : df_pgl_gr.index.get_level_values(0),\n                                         'sname'     : df_pgl_gr.index.get_level_values(1)}))   \n        p1.line(x='x', y='y', source=ls1[idx], line_alpha=0.5, line_color='lightgrey',\n               line_width=1)\n        p1.scatter(x='x', y='y', source=ls1[idx], color='lightgrey', fill_alpha=0.1,\n                  line_alpha=0.3, name='scatter1')\n        df_pgl_1yr_gr = df_pg_yr.loc[(slice(max_yr),[gr]),:]\n        ls2.append(ColumnDataSource(data={\n                                         'x'         : df_pgl_1yr_gr.projectID,\n                                         'y'         : df_pgl_1yr_gr.ecContribution\/1000000,\n                                         'year'      : df_pgl_1yr_gr.index.get_level_values(0),\n                                         'sname'     : df_pgl_1yr_gr.index.get_level_values(1)}))    \n        p2.line(x='x', y='y', source=ls2[idx], line_alpha=0.5, line_color='lightgrey',\n               line_width=1)\n        p2.scatter(x='x', y='y', source=ls2[idx], color='lightgrey', fill_alpha=0.1,\n                  line_alpha=0.3, name='scatter2')\n\n    # Add a circle glyph to the figures p1 and p2\n    p1.circle(x='x', y='y', source=source1, size=10, fill_alpha=0.8, color=dict(field='legend', transform=color_mapper), \n              legend_field='legend', line_color='grey', line_alpha=0.3, name='circle1')\n    \n    p2.circle(x='x', y='y', source=source2, size=10, fill_alpha=0.8, color=dict(field='legend', transform=color_mapper), \n              line_color='grey', line_alpha=0.3, name='circle2')\n\n    p1.legend.location = 'top_left'    \n    p1.legend.background_fill_alpha = 0.3\n    p1.legend.label_text_font_size = '8pt'\n    p1.legend.padding = 3\n    p1.xgrid.visible = False \n    p1.ygrid.visible = False\n    p2.xgrid.visible = False \n    p2.ygrid.visible = False\n\n    # Create row layout from p1 and p2\n    layout = row(p1, p2)\n\n    def update_plot(yr=year, chk1=True, chk2=True):\n        df_pgl = (df_pg_yr.loc[slice(yr),:].groupby(['g_name','_legend'])\n                                           .agg({'projectID':'sum','ecContribution':'sum'}))\n        df_pgl.reset_index(['_legend'], inplace = True)\n        df_pgl_1yr = df_pg_yr.loc[yr,:].copy()\n        \n        # Set `year` for a hover tool\n        df_pgl['year'] = yr\n        df_pgl_1yr['year'] = yr\n        \n \n        p1.title.text = 'EC Contribution and Number of Projects started in the period from {} to {} grouped by programs'.format(min_yr, yr)\n        p2.title.text = 'EC Contribution and Number of Projects started in {} grouped by programs'.format(yr)\n        new_data1 = {\n                     'x'           : df_pgl.projectID,\n                     'y'           : df_pgl.ecContribution\/1000000,\n                     'sname'       : df_pgl.index.values,\n                     'legend'      : df_pgl._legend,\n                     'year'        : df_pgl.year}\n        source1.data = new_data1\n        new_data2 = {\n                     'x'           : df_pgl_1yr.projectID,\n                     'y'           : df_pgl_1yr.ecContribution\/1000000,\n                     'sname'       : df_pgl_1yr.index.values,\n                     'legend'      : df_pgl_1yr._legend,\n                     'year'        : df_pgl_1yr.year}\n        source2.data = new_data2\n        if chk1:\n            # set x_range and y_range for p1\n            p1.x_range.start = min(new_data1['x'])-1\n            p1.x_range.end = max(new_data1['x'])*1.05\n            p1.y_range.start = min(new_data1['y'])-1\n            p1.y_range.end = max(new_data1['y'])*1.8\n        if chk2:\n            # set x_range and y_range for p2\n            p2.x_range.start = min(new_data2['x'])-1\n            p2.x_range.end = max(new_data2['x'])*1.05\n            p2.y_range.start = min(new_data2['y'])-1\n            p2.y_range.end = max(new_data2['y'])*1.05\n  \n        push_notebook()\n\n    #show(layout, notebook_handle=True)\n    #interact(update_plot, \n    #         yr=IntSlider(value=year, min=2014, max=max_yr, step=1,  description='Year:'),\n    #         chk1=Checkbox(value=True, description='Auto set range (left plot)',disabled=False,indent=True),\n    #         chk2=Checkbox(value=False, description='Auto set range (right plot)',disabled=False,indent=True))\n    show(layout)\n","6bedee71":"plot_contribution_prj_num_pg(df_pg_yr_all, year=2021)","ec6f405d":"plot_contribution_prj_num_pg(df_pg_yr_oth, year=2021)","016ed72c":"### Comparison of EC Contribution between Programs for non-EU Countries","fecdf9e7":"Execute the cell below to interact with the plot","796c4938":"#### Organizations","3841f479":"Load and validate data...","8525c563":"# What Countries Benefit from Horizon 2020?\nLooking through data published by CORDIS, I have found that the EU contributes not only to companies and organizations located in the EU-member countries but to companies and organizations all over the world.\n\nBecause of Brexit divorce, it was interesting to me,  where the UK stands amid other EU-member countries.\n\nIt turns out that for projects started in the period from 2014 to 2019 within the Horizon 2020 framework, the total EU contribution to non-EU countries is comparable to the EU contribution to Italy, Spain, and the Netherlands. \n\nSwitzerland, Norway, and Israel hold leadership amid non-EU countries. The total EU contribution to each of these countries, within the Horizon 2020 framework, is comparable to Austria, Demark, Finland, Greece, and Ireland, respectively.","6e4a9114":"### Comparison of EC Contribution between Non-EU Countries and Some EU-Member Countries","042d4976":"#### Programs","04142b84":"# Where does the money go?\nThere are about 300 programs under Horizon 2020, which have a hierarchical structure. I decided to group programs by some level of this hierarchy. \n\nIt is worth to mention that a project can be linked to several programs, and it is hard to verify which amount of money goes to which program. In that case, the whole amount goes to each program group.\n\nIn general, research, breakthrough technologies, health, transport, energy, small and medium-sized enterprises get more support from the EU.","fa9ca21a":"Execute the cell below to interact with the plot","02cbbbd5":"# Further explorations\nI think it would be interesting to dive deeper into the programs' hierarchy. What programs stand behind FET and LEIT, and ERC? It is also interesting to explore programs by countries.\n\nIf you find the kernel interesting or found some mistakes, please, let me know.\n\nYou can find more information about the Horizon 2020 framework program [here](https:\/\/data.europa.eu\/euodp\/en\/data\/dataset\/cordisH2020projects)\n\n Thank you for reading!","46260135":"Execute the cell below to interact with the plot","96a223d1":"Load and validate data...","560c430c":"### Comparison of EC Contribution between Programs for All Countries","216ac032":"### Comparison of EC Contribution between EU-Member Countries and Total EC Contribution to Non-EU Countries","95e0b3c5":"#### Projects","125fa813":"#### Programs","dd1badf6":"Execute the cell below to interact with the plot","7a21ab4e":"#### Countries"}}