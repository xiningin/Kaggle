{"cell_type":{"a778e930":"code","3789d423":"code","bd4221a6":"code","9d4954ab":"code","722decb8":"code","89f1d1b9":"code","1a6b0cf0":"code","4fd4c203":"code","9bea87d8":"code","9aaa23f6":"code","53a6b4a9":"code","f8693fc9":"code","7d4ae2bd":"code","e32bce82":"code","78ab8d0e":"code","915df7e9":"code","371ba07d":"code","1ae685a1":"code","441c455a":"code","76496332":"markdown","a4f18be2":"markdown","81f56853":"markdown","2f3c058f":"markdown","5cc8e006":"markdown","cbf12d7b":"markdown","3370c0d0":"markdown","778d708c":"markdown"},"source":{"a778e930":"#'''Importing Data Manipulation Modules'''\nimport numpy as np                 # Linear Algebra\nimport pandas as pd                # Data Processing, CSV file I\/O (e.g. pd.read_csv)\n\n#'''Seaborn and Matplotlib Visualization'''\nimport matplotlib                  # 2D Plotting Library\nimport matplotlib.pyplot as plt\nimport seaborn as sns              # Python Data Visualization Library based on matplotlib\nimport geopandas as gpd            # Python Geospatial Data Library\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\n#'''Plotly Visualizations'''\nimport plotly as plotly                # Interactive Graphing Library for Python\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\n\n\n#'''NLP - WordCloud'''\nfrom wordcloud import WordCloud, ImageColorGenerator, STOPWORDS\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\nimport os\n%pylab inline\n\nfrom PIL import Image","3789d423":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","bd4221a6":"df.head()","9d4954ab":"print('Rows     :',df.shape[0])\nprint('Columns  :',df.shape[1])\nprint('\\nFeatures :\\n     :',df.columns.tolist())\nprint('\\nMissing values    :',df.isnull().values.sum())\nprint('\\nUnique values :  \\n',df.nunique())","722decb8":"df.isnull().sum()","89f1d1b9":"labels = df['type'].value_counts().index\nvalues = df['type'].value_counts()\ncolors = ['pink', 'lightblue']\n\n\ntrace = go.Pie(labels=labels, values=values,title = 'Distribution of types',marker = dict(colors = colors), pull=[0.05, 0],textinfo='percent+label' )\n\niplot([trace])","1a6b0cf0":"top_10 = df['country'].value_counts()[:10]\nlabels = top_10.index\nvalues = top_10\n\ntrace = go.Pie(labels=labels, values=values, title = 'Distribution of Countries',textinfo='percent+label')\n\niplot([trace])","4fd4c203":"top_15 = df['listed_in'].value_counts()[:15]\nlabels = top_15.index\nvalues = top_15\n\ntrace = go.Pie(labels=labels, values=values, title = 'Distribution of Countries',textinfo='percent')\n\niplot([trace])","9bea87d8":"xmovie = df[df['type'] == 'Movie']\nxtv = df[df['type'] == 'TV Show']\n","9aaa23f6":"trace1 = go.Histogram(\n    x=xmovie['release_year'],\n    opacity=0.75,\n    name = \"Movie\",\n    marker=dict(color='rgb(165,0,38)'))\ntrace2 = go.Histogram(\n    x=xtv['release_year'],\n    opacity=0.75,\n    name = \"TV Show\",\n    marker=dict(color='rgb(215,48,39)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='stack',\n                   title='Number of shows released per year',\n                   xaxis=dict(title='Years'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","53a6b4a9":"plt.rcParams['figure.figsize'] = (18,8)\nsns.countplot(x = 'rating', data = df, order = df['rating'].value_counts()[:15].index, hue = 'type',palette=\"Set1\")\n","f8693fc9":"plt.rcParams['figure.figsize'] = (18,8)\nsns.countplot(y = 'release_year', data = df, order = df['release_year'].value_counts()[:15].index, hue = 'type', palette=\"Set2\")\nplt.title('Year wise analysis', fontsize = '20')","7d4ae2bd":"plt.rcParams['figure.figsize'] = (18,8)\nsns.countplot(y = 'country', data = df, order = df['country'].value_counts()[:10].index, hue = 'type', palette=\"Set3\")\nplt.title('Top 10 Countries wise analysis', fontsize = '20')","e32bce82":"plt.rcParams['figure.figsize'] = (18,8)\nsns.countplot(y = 'duration', data = df, order = df['duration'].value_counts()[:10].index)\nplt.title('Duration wise analysis',fontsize = 20)","78ab8d0e":"#netflix_fr=df[df['country']=='China']\ncleaned=df.dropna()\nimport plotly.express as px\nfig = px.treemap(cleaned, path=['country','director'],\n                  color='director', hover_data=['director','title'],color_continuous_scale='Purples')\nfig.show()","915df7e9":"wave_mask= np.array(Image.open(\"..\/input\/laptop-clapperboard\/laptop-pc-portable-in-black-and-white-vector-24598028.jpg\"))\nstopwords = set(STOPWORDS)\nstopwords.update([\"II\", \"III\"])\nplt.subplots(figsize=(15,15))\n\nwordcloud = WordCloud(mask=wave_mask,background_color=\"lavenderblush\",colormap=\"hsv\" ,contour_width=2, contour_color=\"black\",\n                      width=950,stopwords=stopwords,\n                          height=950\n\n                         ).generate(\" \".join(df.description))\n\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')\nplt.savefig('graph.png')\nplt.title('Wordcloud for Description')\nplt.show()","371ba07d":"wave_mask= np.array(Image.open(\"..\/input\/laptop-clapperboard\/clapper-board-refixed.jpg\"))\nstopwords = set(STOPWORDS)\nstopwords.update([\"II\", \"III\"])\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(mask=wave_mask,background_color=\"lavenderblush\",colormap=\"hsv\" ,contour_width=2, contour_color=\"black\",\n                      width=950,stopwords=stopwords,\n                          height=950\n                         ).generate(\" \".join(df.title))\n\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')\nplt.savefig('graph.png')\nplt.title('Wordcloud for Title')\nplt.show()","1ae685a1":"trace1 = go.Scatter(\n                    x = df.country,\n                    y = df['listed_in'][:100],\n                    mode = \"markers\",\n                    name = \"North America\",\n                    marker = dict(color = 'rgba(28, 149, 249, 0.8)',size=8),\n                    text= df.title)\n\n\ndata = [trace1]\nlayout = dict(title = 'Countries - List - Title',\n              xaxis= dict(title= 'Countries',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\"),\n              yaxis= dict(title= 'List',ticklen= 5,zeroline= False,zerolinewidth=1,gridcolor=\"white\",),\n              paper_bgcolor='rgb(243, 243, 243)',\n              plot_bgcolor='rgb(243, 243, 243)' )\nfig = dict(data = data, layout = layout)\niplot(fig)","441c455a":"trace = go.Scatter3d(\n    x = df.director,\n    y = df.title,\n    z = df.release_year,\n    name = 'Marvel',\n    mode = 'markers',\n    marker = dict(\n         size = 10,\n         color = df.release_year,\n         colorscale = \"Rainbow\",\n         line=dict(color='rgb(140, 140, 170)')\n\n    )\n)\n\ndf = [trace]\n\nlayout = go.Layout(\n    title = 'Cholestrol vs Heart Rate vs Age',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    ),\n    scene = dict(\n            xaxis = dict(title  = 'Director'),\n            yaxis = dict(title  = 'Title'),\n            zaxis = dict(title  = 'Release_Year')\n        )\n    \n)\nfig = go.Figure(data = df, layout=layout)\npy.iplot(fig)","76496332":"# Data Visualization","a4f18be2":"# Finding NaNs","81f56853":"# Importing necessary libraries","2f3c058f":"### Observation:\n    If we zoom in, we can see, starting from 2019, Netflix has increasingly focusing on TV rather than movies.\n    \n    Unfortunately, there's a huge drop due to Covid-19 in 2020, but still TV Show dominant the market, which has released 19 programs, whereas Movie only has 6.","5cc8e006":"# Summary of Dataset","cbf12d7b":"# Reading data","3370c0d0":"# Directors in different countries","778d708c":"# Thanks for watching & please upvote for me, cheers!"}}