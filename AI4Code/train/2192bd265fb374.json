{"cell_type":{"6217302e":"code","366b3ffd":"code","3b959e91":"code","4b6d5139":"code","a030fc78":"code","14677340":"code","19162c1e":"markdown","a26189f1":"markdown","de6f61c3":"markdown","357dae29":"markdown","33079bcf":"markdown"},"source":{"6217302e":"import numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport time\nimport os\n# Model \/ data parameters\nnum_classes = 10\ninput_shape = (28, 28, 1)\n\n# the data, split between train and test sets\n# (train_images, train_labels), (test_images,\n#                                test_labels) = keras.datasets.fashion_mnist.load_data()\ntis1 =time.perf_counter()\n\n# print(os.getcwd()) # >>\/kaggle\/working\nimport pickle\nfr = open('\/kaggle\/input\/fashion-mnist\/Fashion_minst.data', 'rb')\n[train_images, train_labels, test_images, test_labels] = pickle.load(fr)\nprint(train_images.shape)\ntis2 =time.perf_counter()\nprint(\"\\n\u4ecedata\u6587\u4ef6\u5bfc\u5165\u6570\u636e\u7528\u65f6\uff1a%.4f s\\n\"%(tis2-tis1))","366b3ffd":"\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n# Scale images to the [0, 1] range\ntrain_images = train_images.astype(\"float32\") \/ 255\ntest_images = test_images.astype(\"float32\") \/ 255\nprint(\"train_images shape:\", train_images.shape)\n# Make sure images have shape (28, 28, 1) \u5bf91\u901a\u9053\u56fe\u7247\u5377\u79ef\ntrain_images = np.expand_dims(train_images, -1)\ntest_images = np.expand_dims(test_images, -1)\nprint(\"train_images shape:\", train_images.shape)\nprint(train_images.shape[0], \"train samples\")\nprint(test_images.shape[0], \"test samples\")\n\n# convert class vectors to binary class matrices \u8f6c\u5316\u4e3aonehot\u7f16\u7801\nonehot_train_labels = keras.utils.to_categorical(train_labels, num_classes)\nonehot_test_labels = keras.utils.to_categorical(test_labels, num_classes)","3b959e91":"model = keras.Sequential(\n    [\n        keras.Input(shape=input_shape),\n        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n        layers.MaxPooling2D(pool_size=(2, 2)),\n        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n        layers.MaxPooling2D(pool_size=(2, 2)),\n        layers.Flatten(),\n        layers.Dropout(0.5),\n        layers.Dense(num_classes, activation=\"softmax\"),\n    ]\n)\n\nmodel.summary()\n\n# metrics: \u5728\u8bad\u7ec3\u548c\u6d4b\u8bd5\u671f\u95f4\u7684\u6a21\u578b\u8bc4\u4f30\u6807\u51c6\u3002\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=\"adam\", metrics=[\"accuracy\"])\n\n# validation_split\u57280\u548c1\u4e4b\u95f4\u6d6e\u52a8\u3002\u7528\u4f5c\u9a8c\u8bc1\u96c6\u7684\u8bad\u7ec3\u6570\u636e\u7684\u6bd4\u4f8b\u3002\u6a21\u578b\u5c06\u5206\u51fa\u4e00\u90e8\u5206\u4e0d\u4f1a\u88ab\u8bad\u7ec3\u7684\u9a8c\u8bc1\u6570\u636e\uff0c\u5e76\u5c06\u5728\n# \u6bcf\u4e00\u8f6e\u7ed3\u675f\u65f6\u8bc4\u4f30\u8fd9\u4e9b\u9a8c\u8bc1\u6570\u636e\u7684\u8bef\u5dee\u548c\u4efb\u4f55\u5176\u4ed6\u6a21\u578b\u6307\u6807\u3002\u9a8c\u8bc1\u6570\u636e\u662f\u6df7\u6d17\u4e4b\u524d x \u548cy \u6570\u636e\u7684\u6700\u540e\u4e00\u90e8\u5206\u6837\u672c\u4e2d\n# batchsize\u8d8a\u5c0f\uff0c\u8bad\u7ec31\u4e2aepoch\u8017\u65f6\u8d8a\u957f\uff0c\u51c6\u786e\u7387\u8d8a\u9ad8\ntis3 =time.perf_counter()\nmodel.fit(train_images, onehot_train_labels, batch_size=512,\n          epochs=1, validation_split=0.1)\ntis4 =time.perf_counter()\nprint(\"\\n\u8bad\u7ec3\u7528\u65f6\uff1a%.4f s\\n\"%(tis4-tis3))\nmodel.save('.\/my_model.h5')","4b6d5139":"# verbose: 0, 1\u3002\u65e5\u5fd7\u663e\u793a\u6a21\u5f0f\u30020 = \u5b89\u9759\u6a21\u5f0f, 1 = \u8fdb\u5ea6\u6761\nscore = model.evaluate(test_images, onehot_test_labels, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])\n\ntest_loss, test_acc = model.evaluate(test_images,  onehot_test_labels, verbose=2)\nprint('\\nTest accuracy:', test_acc)\n\npredictions = model.predict(test_images)\nprint(predictions[0])\nprint(np.argmax(predictions[0]))\ntest_labels[0]","a030fc78":"# Graph this to look at the full set of 10 class predictions.\ndef plot_image(i, predictions_array, true_label, img):\n    true_label, img = true_label[i], img[i]\n    plt.grid(False)\n    plt.xticks([])\n    plt.yticks([])\n\n    plt.imshow(img, cmap=plt.cm.binary)\n\n    predicted_label = np.argmax(predictions_array)\n    if predicted_label == true_label:\n        color = 'blue'\n    else:\n        color = 'red'\n\n    plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                         100*np.max(predictions_array),\n                                         class_names[true_label]), color=color)\n\n\ndef plot_value_array(i, predictions_array, true_label):\n    true_label = true_label[i]\n    plt.grid(False)\n    plt.xticks(range(10))\n    plt.yticks([])\n    thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n    plt.ylim([0, 1])\n    predicted_label = np.argmax(predictions_array)\n\n    thisplot[predicted_label].set_color('red')\n    thisplot[true_label].set_color('blue')\n\ni = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()\nprint(onehot_test_labels)\nprint(test_labels)\nprint(onehot_test_labels[0])\nprint(test_labels[0])","14677340":"new_model = keras.models.load_model('my_model.h5')\nnew_model.summary()\nscore = new_model.evaluate(test_images, onehot_test_labels, verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","19162c1e":"# \u67e5\u770b\u9884\u6d4b\u7ed3\u679c","a26189f1":"# \u6d4b\u8bd5\u3001\u9884\u6d4b","de6f61c3":"# \u52a0\u8f7d\u6a21\u578b\u8fdb\u884c\u9884\u6d4b","357dae29":"# \u6570\u636e\u9884\u5904\u7406","33079bcf":"# \u7f51\u7edc\u6784\u5efa\u3001\u8bad\u7ec3\u3001\u4fdd\u5b58"}}