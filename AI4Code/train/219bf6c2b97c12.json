{"cell_type":{"ed0853e7":"code","52ef02fa":"code","21c07113":"code","c98dbd5d":"code","3324ea8f":"code","d7912890":"code","82108e06":"code","55050104":"code","fd4cec01":"code","e96dbae3":"code","f84d1857":"code","caf5cc8c":"code","8ba31458":"code","98e4353c":"code","2483df39":"code","fe228660":"code","c4b7f2a4":"code","47ca67ab":"code","d0754774":"code","790ec144":"code","dd3439f2":"code","e8bcbb50":"code","13918567":"code","6d06d0d0":"code","bdedb9b2":"code","7c6a53b8":"code","d9187267":"code","97814d5f":"code","ae53584c":"code","7e635af5":"code","0bf71ec4":"code","12fe1e93":"code","da880535":"code","22cae90e":"code","40b8d023":"code","11097f44":"code","ffbe3438":"code","e6ade672":"code","a771b1ef":"code","057d975c":"code","22770ff2":"code","ca5df776":"code","209fab42":"code","fc1391b2":"code","56569679":"code","c667c111":"code","5a3697d6":"code","2a6c001f":"code","72fa4e3c":"code","4f7d2290":"code","cbf612a0":"code","5346a8c9":"code","e8633bcf":"code","d1a866fe":"code","bdc2c4ae":"code","bd80dd37":"code","21b21b0e":"code","38d3b49b":"code","4b467d9a":"code","63cc6378":"code","172d26b8":"code","a7a3e750":"code","4b9af600":"code","7b8f1b44":"code","48a3a1c6":"code","e30ea0db":"code","3133e2e4":"code","6324a002":"code","37b382bd":"code","821134ab":"code","d8b31759":"code","0ddcc3c7":"code","5ebf16c3":"code","c4013334":"code","9dd2a348":"code","80be0024":"code","137a75f0":"code","79fd7eba":"code","9a184fee":"code","7501c304":"code","7b1af154":"code","e0d7e976":"code","829f4b94":"code","62721c66":"code","37dc8d05":"code","ba73762c":"code","b326afe6":"code","e793b94c":"code","dcb31e94":"code","bef512a1":"code","76199ef9":"code","9da10415":"code","875bbb97":"code","2fe7f16b":"code","58434ce3":"markdown","a54c0c14":"markdown","9cedf768":"markdown","439aa841":"markdown","d3acc320":"markdown","0395a84c":"markdown","4bcdf000":"markdown","0d7eefd0":"markdown","c05ceac9":"markdown","00a7b6cf":"markdown","aca80f13":"markdown","19fc362a":"markdown","c0495e41":"markdown","e59500f5":"markdown","065e4c4c":"markdown","eafe955a":"markdown","cdc79419":"markdown","eddef59e":"markdown","2a392cea":"markdown","1f0d12eb":"markdown"},"source":{"ed0853e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n###############################\nimport matplotlib.pyplot as plt\nimport seaborn as sns   # visualization tools   # g\u00f6rselle\u015ftirme arac\u0131\n###############################\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\nfrom subprocess import check_output  \nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf-8\")) # bulundu\u011fu dizindeki dosyalar\u0131 listeler\n\n# Any results you write to the current directory are saved as output.","52ef02fa":"data1 = pd.read_csv('..\/input\/2015.csv')\ndata2 = pd.read_csv('..\/input\/2016.csv')\ndata3 =  pd.read_csv('..\/input\/2017.csv')","21c07113":"data1.info()","c98dbd5d":"data2.info()","3324ea8f":"data3.info()","d7912890":"data1.corr()","82108e06":"data2.corr()","55050104":"data3.corr()","fd4cec01":"# correlation map 1\nf, ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data1.corr(), annot=True, linewidths=0.5, fmt='.2f', ax=ax)\n# annot = de\u011ferler  # linewidths = \u00e7izgi kal\u0131nl\u0131\u011f\u0131 # fmt = de\u011ferin virg\u00fclden sonra ka\u00e7 tane g\u00f6sterilece\u011fi\nplt.show()","e96dbae3":"# correlation map 2\nf, ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data2.corr(), annot=True, linewidths=0.5, fmt='.2f', ax=ax)\nplt.show()","f84d1857":"# correlation map 3\nf, ax = plt.subplots(figsize=(13, 13))\nsns.heatmap(data3.corr(), annot=True, linewidths=0.5, fmt='.2f', ax=ax)\nplt.show()","caf5cc8c":"# data1.head(-148) # 158 - g\u00f6sterilmek istenen de\u011fer want to see values\n# similar to \n#data1.head(11) \ndata1[10::-1]\n","8ba31458":"data2.head()","98e4353c":"data3.head(7)","2483df39":"data1.columns = data1.columns.str.strip().str.lower().str.replace(' ', '_').str.replace(\"(\",\"\").str.replace(\")\",\"\")\ndata1.columns","fe228660":"data2.columns = data2.columns.str.strip().str.lower().str.replace(\" \",\"_\").str.replace(\"(\",\"\").str.replace(\")\",\"\")\ndata2.columns","c4b7f2a4":"data3.columns = data3.columns.str.strip().str.lower().str.replace(\".\",\"_\").str.replace(\"__\",\"_\").str.replace(\"a_\",\"a\").str.replace(\"y_\",\"y\").str.replace(\"n_\",\"n\")\ndata3.columns","47ca67ab":"\n# Matplotlib\n\ndata1.economy_gdp_per_capita.plot(kind= 'line', color = 'b', label = 'Economy',linewidth=1,grid = True, linestyle=':')\ndata1.health_life_expectancy.plot(color= 'r', label= 'Health Life', linewidth=1, alpha=0.9, grid=True, linestyle= '-')\nplt.legend(loc='upper right')\nplt.xlabel('Economy')\nplt.ylabel('Health Life')\nplt.title('Line Plot')\nplt.show()","d0754774":"data2.freedom.plot(kind = 'line', color = 'black', label='Freedom', linewidth=1, grid=True, linestyle='--' )\ndata2.trust_government_corruption.plot(color = 'cyan', label = 'Trust Goverment Corruption', linewidth = 1,grid=True, linestyle = '-.')\nplt.legend(loc='upper right')\nplt.title('Line Plot')\nplt.xlabel('Freedom')\nplt.ylabel('Trust Goverment Corruption')\nplt.show()","790ec144":"data3.family.plot(kind='line', color='b',label='Family', linewidth=1, grid=True, linestyle=':')\ndata3.happiness_score.plot(color='r', label='Happiness_Score', linewidth=1,grid=True,linestyle='-.' )\nplt.legend(loc='upper left')\nplt.title('Line Plot')\nplt.xlabel('Family')\nplt.ylabel('Happiness Score')\nplt.show()","dd3439f2":"# Scatter plot \ndata1.plot(kind='scatter', x='economy_gdp_per_capita', y='health_life_expectancy', alpha=0.5, color='red')\nplt.xlabel('Economy')\nplt.ylabel('Health')\nplt.title('Economy Health Scatter Plot')\nplt.show()","e8bcbb50":"data2.plot(kind='scatter', x='freedom', y='trust_government_corruption', color='blue', alpha=0.5)\nplt.xlabel('Freedom')\nplt.ylabel('Trust Goverment Corruption')\nplt.title('Freedom - Trust Government')\nplt.show()","13918567":"data3.plot(kind='scatter', x='family', y='happiness_score', color='g', alpha=0.5)\nplt.xlabel('Family')\nplt.ylabel('Happiness Score')\nplt.title('Family Happiness Score')\nplt.show()","6d06d0d0":"# Histogram\n# bins = number of bar in figure \n# bins = fig\u00fcrdeki bar say\u0131s\u0131\n# figsize figir\u00fcn b\u00fcy\u00fckl\u00fc\u011f\u00fc\ndata1.economy_gdp_per_capita.plot(kind='hist', bins=50, figsize=(10,10))\n# data1.economy_gdp_per_capita.plot(kind='hist', bins=60)\nplt.show()","bdedb9b2":"dictionary = {'crotaia' : 'zagreb', 'austria': 'vienna'}\nprint(dictionary.keys())\nprint(dictionary.values())","7c6a53b8":"dictionary['crotaia'] = \"dubrovnik\"\nprint(dictionary)\ndictionary['czech'] = \"prague\"\nprint(dictionary)\ndel dictionary['czech']\nprint(dictionary)\nprint('vienna' in dictionary.values())\ndictionary.clear()\nprint(dictionary)","d9187267":"print(dictionary)","97814d5f":"data1.columns","ae53584c":"series = data1['happiness_rank']\nprint(type(series))\ndata_frame = data1['standard_error']\nprint(type(data_frame))","7e635af5":"x = data1['happiness_score'] < 150\ndata1[x]","0bf71ec4":"data1[np.logical_and(data1['happiness_score']< 5 , data1['family']< 0.5)]","12fe1e93":"data1[(data1['freedom'] < 0.5) & (data1['dystopia_residual']<1)]","da880535":"print(data1['happiness_score'].value_counts(dropna=False))","22cae90e":"data1.describe()","40b8d023":"# data1.boxplot(column='happiness_score', by='country')","11097f44":"data_new = data1.head()\ndata_new","ffbe3438":"# melt\nmelted = pd.melt(frame = data_new, id_vars = 'country', value_vars = ['region', 'happiness_score'])\nmelted","e6ade672":"melted.pivot(index='country', columns = 'variable', values = 'value')","a771b1ef":"data_ilk = data1.head(5)\ndata_ikinci = data2.tail(5)\nconc_data_row = pd.concat([data_ilk, data_ikinci],axis = 0, sort=True)\nconc_data_row","057d975c":"data_x = data1['happiness_rank'].head(5)\ndata_y = data2['happiness_score'].head(5)\nconc_data_col= pd.concat([data_x, data_y],axis=1, sort=True)\nconc_data_col","22770ff2":"data1.dtypes","ca5df776":"data2.dtypes","209fab42":"data3.dtypes","fc1391b2":"data1['country'] = data1['country'].astype('category')\ndata1['region'] = data1['region'].astype('category')\ndata1['happiness_rank'] = data1['happiness_rank'].astype('float')\ndata1.dtypes","56569679":"data1.info()","c667c111":"# There are not any missing values\ndata1[\"happiness_rank\"].value_counts(dropna = False)","5a3697d6":"country = ['Austria', 'Croatia']\npopulation = [\"15\", \"23\"]\nlist_label = [\"country\", \"population\"]\nlist_col = [country, population]\nzipped = list(zip(list_label, list_col))\ndata_dic = dict(zipped)\ndf = pd.DataFrame(data_dic)\ndf","2a6c001f":"# Add new columns \n# yeni s\u00fctun ekleme\ndf[\"capital\"] = [\"vienna\",\"zagreb\"]\ndf","72fa4e3c":"# Broadcasting\n# Yay\u0131n\ndf[\"income\"] = 5,10\ndf","4f7d2290":"# Plotting all data\ndata_cizim = data1.loc[:, [\"family\", \"happiness_score\", \"happiness_rank\"]]\ndata_cizim.plot()","cbf612a0":"# subplots\ndata_cizim.plot(subplots=True)\nplt.show()","5346a8c9":"# scatter plot\ndata_cizim.plot(kind=\"scatter\", x=\"family\", y=\"happiness_score\")\nplt.show()","e8633bcf":"# hist plot\ndata_cizim.plot(kind=\"hist\", y=\"happiness_score\", bins = 50, range = (2,8), normed = True)","d1a866fe":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows = 2, ncols = 1)\ndata_cizim.plot(kind=\"hist\", y=\"happiness_rank\", bins=40, range = (0,50), normed = True, ax=axes[0])\ndata_cizim.plot(kind=\"hist\", y=\"happiness_score\", bins=40, range = (0,50), normed = True, ax=axes[1], cumulative=True)\nplt.savefig('graph.png')\nplt","bdc2c4ae":"data2.describe()","bd80dd37":"time_list = [\"1995-03-15\", \"1997-05-29\"]\nprint(type(time_list[1]))\n# As you can see date is string\n# G\u00f6rd\u00fcg\u00fcn\u00fcz gibi tarih string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","21b21b0e":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndata2_new = data2.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2_new[\"date\"] = datetime_object\n# lets make date as index\ndata2_new = data2_new.set_index(\"date\")\ndata2_new","38d3b49b":"# Now we can select according to our date index\nprint(data2_new.loc[\"1993-03-16\"])\nprint(data2_new.loc[\"1992-03-10\":\"1993-03-16\"])","4b467d9a":"data2_new.resample(\"A\").mean()","63cc6378":"# Lets resample with month\ndata2_new.resample(\"M\").mean()","172d26b8":"# We can interpolete from first value\n# \u0130lk de\u011ferden ba\u015flayarak aralara de\u011fer ekleyebiliriz\ndata2_new.resample(\"M\").first().interpolate(\"linear\")","a7a3e750":"# Or we can interpolate with mean()\n# vaya ortalama ile de\u011fer ekleyebiliriz\ndata2_new.resample(\"M\").mean().interpolate(\"linear\")","4b9af600":"# read data\n# veriyi oku\ndata2_second = pd.read_csv('..\/input\/2016.csv')\n#data2_second = data2_second.set_index(\"month\")\n#data2_second.head()\ndata2_second","7b8f1b44":"data2_second[\"Family\"][15]","48a3a1c6":"data2_second.Family[15]","e30ea0db":"data2_second.loc[15, [\"Family\"]]","3133e2e4":"data2_second[[\"Family\",\"Freedom\"]]","6324a002":"# Difference between selecting columns: series and dataframes\n# s\u00fctun se\u00e7imi aras\u0131ndaki fark\nprint(type(data2_second[\"Family\"])) # series\nprint(type(data2_second[[\"Family\"]])) # data frames","37b382bd":"# Slicing and indexing series\ndata2_second.loc[1:10, \"Family\":\"Freedom\"]","821134ab":"# reverse slicing\ndata2_second.loc[10:1:-1, \"Family\":\"Freedom\"]","d8b31759":"# From something to end\ndata2_second.loc[1:10, \"Freedom\":]","0ddcc3c7":"# creating boolen series\nboolean = data2_second.Family > 1.12\ndata2_second[boolean]","5ebf16c3":"# combining filters\nfirst_filter = data2_second.Family > 1.12\nsecond_filter = data2_second.Freedom > 0.57\ndata2_second[first_filter & second_filter]","c4013334":"# filtering column based other\ndata2_second.Family[data2_second.Freedom<0.1]","9dd2a348":"# Plain python functions\n# sade pyhton fonksiyonlar\u0131\ndef div(n):\n    return n\/2\ndata2_second.Family.apply(div)","80be0024":"# or we can use lambda function\n# veya lambda fonksiyonunu kullanabiliriz\ndata2_second.Family.apply(lambda n : n\/2)","137a75f0":"# Defining column using other columns\n# di\u011fer s\u00fctunlar\u0131 kullanarak s\u00fctun tan\u0131mlama\ndata2_second[\"total\"] = data2_second.Family + data2_second.Freedom\ndata2_second.head()","79fd7eba":"# our index name is this:\n# bizim index imiz:\nprint(data2_second.index.name)\n#lets change it\n# de\u011fi\u015ftirelim\ndata2_second.index.name = \"index_name\"\ndata2_second.head()","9a184fee":"data2_second.head()\nsecond_data = data2_second.copy()\nsecond_data.index = range(0,157,1)\nsecond_data.head()","7501c304":"data2.head()","7b1af154":"data2_third = data2.set_index([\"region\", \"freedom\"])\ndata2_third.head(100)","e0d7e976":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"responce\":[10, 45, 5, 9], \"age\":[1, 5, 72, 65]}\ndf = pd.DataFrame(dic)\ndf","829f4b94":"# pivotting\ndf.pivot(index=\"treatment\", columns=\"gender\", values=\"responce\")","62721c66":"df1 = df.set_index([\"treatment\", \"gender\"])\ndf1","37dc8d05":"df1.unstack(level=0)","ba73762c":"df1.unstack(level=1)","b326afe6":"df2 = df1.swaplevel(0,1)\ndf2","e793b94c":"df","dcb31e94":"# df.pivot(index=\"treatmnt\", columns = \"gender\", values=\"responce\")\npd.melt(df, id_vars=\"treatment\", value_vars=[\"age\", \"responce\"])","bef512a1":"# we will use df\ndf","76199ef9":"df.groupby(\"treatment\").mean()","9da10415":"df.groupby(\"treatment\").age.max()","875bbb97":"df.groupby(\"treatment\")[[\"age\", \"responce\"]].min()","2fe7f16b":"df.info()","58434ce3":"***MISSING DATA and TESTING WITH ASSERT***","a54c0c14":"***INDEX OBJECTS AND LABELED DATA***","9cedf768":"***RESAMPLING PANDAS TIME SERIES***","439aa841":"***Data Types***","d3acc320":"***MELTING DATA FRAMES***","0395a84c":"***4. PANDAS FOUNDATION***","4bcdf000":"***TRANSFORMING DATA***","0d7eefd0":"***CATEGORICALS AND GROUPBY***","c05ceac9":"***STATISTICAL EXPLORATORY DATA ANALYSIS***","00a7b6cf":"***Tidy Data***","aca80f13":"***PIVOTING DATA FRAMES***","19fc362a":"***SLICING DATA FRAME***","c0495e41":"***HIERARCHICAL INDEXING***","e59500f5":"***CONCATENATING DATA***","065e4c4c":"***FILTERING DATA FRAMES***","eafe955a":"***INDEXING PANDAS TIME SERIES***","cdc79419":"***VISUAL EXPLORATORY DATA ANALYSIS***","eddef59e":"***Pivoting Data***","2a392cea":"***MANIPULATING DATA FRAMES WITH PANDAS***","1f0d12eb":"***STACKING and UNSTACKING DATAFRAME***"}}