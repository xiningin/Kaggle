{"cell_type":{"7080d0e8":"code","9b363d86":"code","5bd5f71b":"code","94abee4e":"code","8ccf127b":"code","57ebfa10":"code","8b8fd19f":"code","ad41a212":"code","a4ac9d0d":"code","e9fcadf1":"code","c20f505d":"code","bdf7e305":"code","ee57e9b6":"code","78a03f7f":"code","a7e56a49":"code","0ec632be":"code","6398eb06":"code","63ac0d4d":"code","724a65c9":"code","8d911586":"code","3de7f69a":"markdown","960303a8":"markdown","d63954f1":"markdown","e694276c":"markdown","57b1f49b":"markdown","2209da43":"markdown","0b239103":"markdown","7d74c769":"markdown","1f09c919":"markdown","ee362b5e":"markdown","6db05822":"markdown","75b34efc":"markdown","940c957a":"markdown","bc7e4f15":"markdown","65d1b1c5":"markdown","a5b358bb":"markdown","a097d9ef":"markdown","6fc89d70":"markdown","6e9f5312":"markdown"},"source":{"7080d0e8":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","9b363d86":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5bd5f71b":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","94abee4e":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","8ccf127b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","57ebfa10":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# ATP.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/ATP.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'ATP.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","8b8fd19f":"df1.head(5)","ad41a212":"plotPerColumnDistribution(df1, 10, 5)","a4ac9d0d":"plotCorrelationMatrix(df1, 8)","e9fcadf1":"plotScatterMatrix(df1, 15, 10)","c20f505d":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# atp_rankings_00s.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/atp_rankings_00s.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'atp_rankings_00s.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","bdf7e305":"df2.head(5)","ee57e9b6":"plotPerColumnDistribution(df2, 10, 5)","78a03f7f":"plotCorrelationMatrix(df2, 8)","a7e56a49":"plotScatterMatrix(df2, 12, 10)","0ec632be":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# atp_rankings_10s.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/atp_rankings_10s.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'atp_rankings_10s.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","6398eb06":"df3.head(5)","63ac0d4d":"plotPerColumnDistribution(df3, 10, 5)","724a65c9":"plotCorrelationMatrix(df3, 8)","8d911586":"plotScatterMatrix(df3, 12, 10)","3de7f69a":"Distribution graphs (histogram\/bar graph) of sampled columns:","960303a8":"### Let's check 1st file: \/kaggle\/input\/ATP.csv","d63954f1":"Correlation matrix:","e694276c":"Scatter and density plots:","57b1f49b":"Correlation matrix:","2209da43":"There are 7 csv files in the current version of the dataset:\n","0b239103":"Scatter and density plots:","7d74c769":"### Let's check 3rd file: \/kaggle\/input\/atp_rankings_10s.csv","1f09c919":"Distribution graphs (histogram\/bar graph) of sampled columns:","ee362b5e":"### Let's check 2nd file: \/kaggle\/input\/atp_rankings_00s.csv","6db05822":"Distribution graphs (histogram\/bar graph) of sampled columns:","75b34efc":"## Exemple of Exploratory Analysis\n\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made.","940c957a":"Correlation matrix:","bc7e4f15":"Scatter and density plots:","65d1b1c5":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","a5b358bb":"Let's take a quick look at what the data looks like:","a097d9ef":"Let's take a quick look at what the data looks like:","6fc89d70":"Now you're ready to read in the data and use the plotting functions to visualize the data.","6e9f5312":"Let's take a quick look at what the data looks like:"}}