{"cell_type":{"e13f20e2":"code","4c705d9c":"code","78e13325":"code","dbb6f77f":"code","568c2e7c":"code","b1eb8035":"code","a07bd9b8":"code","4a35f064":"code","3359a914":"code","d148456c":"code","0791b4e9":"code","1c50aa6c":"code","76337169":"code","799b885e":"code","17ecc387":"code","89e0995e":"code","acc9145a":"code","ab2cb0e6":"code","8db5d057":"code","e6c61906":"code","67d21d50":"code","2e5af29e":"code","6764414d":"code","c15840ea":"code","12dcec02":"markdown","29503a6e":"markdown","4d10af6f":"markdown","7e03cdee":"markdown"},"source":{"e13f20e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4c705d9c":"data = pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","78e13325":"data.head()","dbb6f77f":"data.Outcome.value_counts().plot.pie(figsize = (6,6),autopct='%.1f')\nplt.show()\nprint(data.Outcome.value_counts())","568c2e7c":"data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = data[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","b1eb8035":"def median_target(var):   \n    temp = data[data[var].notnull()]\n    temp = temp[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index()\n    return temp","a07bd9b8":"data.groupby(\"Outcome\").median()","4a35f064":"data.loc[(data['Outcome'] == 0 ) & (data['Insulin'].isnull()), 'Insulin'] = 102.5\ndata.loc[(data['Outcome'] == 1 ) & (data['Insulin'].isnull()), 'Insulin'] = 169.5\ndata.loc[(data['Outcome'] == 0 ) & (data['Glucose'].isnull()), 'Glucose'] = 107\ndata.loc[(data['Outcome'] == 1 ) & (data['Glucose'].isnull()), 'Glucose'] = 140\ndata.loc[(data['Outcome'] == 0 ) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 27\ndata.loc[(data['Outcome'] == 1 ) & (data['SkinThickness'].isnull()), 'SkinThickness'] = 32\ndata.loc[(data['Outcome'] == 0 ) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 70\ndata.loc[(data['Outcome'] == 1 ) & (data['BloodPressure'].isnull()), 'BloodPressure'] = 74.5\ndata.loc[(data['Outcome'] == 0 ) & (data['BMI'].isnull()), 'BMI'] = 30.1\ndata.loc[(data['Outcome'] == 1 ) & (data['BMI'].isnull()), 'BMI'] = 34.3","3359a914":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True,  fmt= '.1f',ax=ax)\nplt.show()","d148456c":"sns.countplot(\"Outcome\",data = data)\nplt.xlabel(\"Patient or not\")\nplt.ylabel(\"mean of BMI\")\nplt.show()\nprint(data.BMI.mean())","0791b4e9":"data[\"bmi_highlow\"] = data.BMI\ndata.bmi_highlow = [1 if i >  31 else 0 for i in data.bmi_highlow]","1c50aa6c":"plt.subplots(figsize=(10, 10))\nsns.swarmplot(x=\"Outcome\",y=\"Glucose\",hue=\"bmi_highlow\",data=data)\nplt.show()","76337169":"f,ax = plt.subplots(figsize=(10, 5))\nsns.boxplot(x=\"Outcome\",y=\"Glucose\",hue=\"bmi_highlow\",data=data,ax=ax)\nplt.show()\n","799b885e":"sns.countplot(\"Outcome\",data = data)\nplt.show()\nprint(\"Mean of Glucose:\",data.Glucose.mean())","17ecc387":"data[\"glucose_highlow\"] = data.Glucose\ndata.glucose_highlow = [1 if i >  120 else 0 for i in data.glucose_highlow]","89e0995e":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data[[\"Glucose\",\"Age\",\"Insulin\"]].corr(), annot=True,  fmt= '.1f',ax=ax)\nplt.show()","acc9145a":"y = data.Outcome.values\nX = data.drop(\"Outcome\",axis = 1).values\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","ab2cb0e6":"data = data.sample(frac=1,replace = False)\nfraud_df = data.loc[data['Outcome'] == 1]\nnon_fraud_df = data.loc[data['Outcome'] == 0][:268]\n\nnormal_distributed_df = pd.concat([fraud_df, non_fraud_df])\n\ndf = normal_distributed_df.sample(frac=1,replace = False, random_state= 42 )","8db5d057":"sns.countplot(\"Outcome\",data = df)\nplt.show()","e6c61906":"yu = df.Outcome.values\nXu = df.drop(\"Outcome\",axis = 1).values\nXu_train, Xu_test, yu_train, yu_test = train_test_split(Xu, yu, test_size=0.33, random_state=42)","67d21d50":"from sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(Xu_train, yu_train)\nyu_pred = logreg.predict(Xu_test)\nprint(metrics.accuracy_score(yu_test, yu_pred))","2e5af29e":"yu_pred = logreg.predict(Xu_test)\nyu_true = yu_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(yu_true,yu_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"yu_pred\")\nplt.ylabel(\"yu_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","6764414d":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nscore_list2=[]\nfor i in range(1,50):\n    rt2=RandomForestClassifier(n_estimators=i,random_state=42)\n    rt2.fit(Xu_train,yu_train)\n    score_list2.append(rt2.score(Xu_test,yu_test))\n\nplt.figure(figsize=(12,8))\nplt.plot(range(1,50),score_list2)\nplt.xlabel(\"Esimator values\")\nplt.ylabel(\"Acuuracy\")\nplt.show()","c15840ea":"from sklearn.ensemble import RandomForestClassifier\nrt2=RandomForestClassifier(n_estimators=40,random_state=42)\nrt2.fit(Xu_train,yu_train)\nyu_pred = rt2.predict(Xu_test)\nyu_true = yu_test\nprint(metrics.accuracy_score(yu_test, yu_pred))\ncm=confusion_matrix(yu_true,yu_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"yu_pred\")\nplt.ylabel(\"yu_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","12dcec02":"# Balancing data","29503a6e":"### Glucose, Insulin and BMI is most important parameters for correlation   \nWhat is BMI? Body mass index, or BMI, is a measure of body size. It combines a person's weight with their height. The results of a BMI measurement can give an idea about whether a person has the correct weight for their height.     \nSo more squat and cardio girls, i love you xd","4d10af6f":"It's unbalanced data","7e03cdee":"As we have seen, BMI is higher in patients"}}