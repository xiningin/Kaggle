{"cell_type":{"d1c6d694":"code","9abe063e":"code","62b57dc1":"code","b9574adc":"code","b197ecb9":"code","23f4dc96":"code","9cb72116":"code","81fed762":"code","7b73f4ed":"code","0633908c":"code","ebbc5b79":"code","e5684540":"code","cbf5f7a3":"code","55636809":"code","8e9749d8":"code","1359a624":"code","f55dfc02":"code","553a8ef4":"code","e3da9805":"code","adf96c4d":"code","eae37e07":"code","89ffd96e":"code","e66467a6":"code","77bf7ebb":"code","17b85bb1":"code","7a685e42":"code","5a205578":"code","adf2b798":"code","e6d70a07":"code","6ba805af":"code","ff31d80d":"code","2a571e1b":"code","1a37106b":"code","249e4527":"code","38ac9327":"code","22340cf1":"code","ebdb6d2b":"code","1dd6048b":"code","a0b672c1":"code","70201a43":"code","deb0d9a2":"code","26aca250":"code","8e59fe73":"code","879811d2":"code","d20d4871":"code","ff3a2373":"code","4ce6fce9":"code","dce141d0":"code","c4d04370":"code","61d85654":"code","fed47a1f":"code","b2e21d21":"code","58de63e0":"code","a1b11b25":"code","b3b5d396":"code","d27ca502":"code","c67188bd":"code","f4db0e37":"code","fcd44fec":"code","0301f21c":"code","0dd3dfe3":"code","2483c32c":"code","7eaaa8f3":"code","1098c010":"code","9ac16771":"code","7842d8e9":"markdown","03de3eb6":"markdown","75abe7d2":"markdown","e634461d":"markdown","d49f97d7":"markdown","e613ba62":"markdown","fe2ed414":"markdown","f2284c97":"markdown","e1b42092":"markdown","a569e0d4":"markdown","172dd522":"markdown","d0dbc9b8":"markdown","ad9d6e9e":"markdown","fafb50a5":"markdown","ada3a2c3":"markdown","3b6310ed":"markdown","fb992c90":"markdown"},"source":{"d1c6d694":"import os\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.style.use('dark_background')","9abe063e":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest  = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_clean_kalman = pd.read_csv('\/kaggle\/input\/clean-kalman\/train_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_clean_kalman  = pd.read_csv('\/kaggle\/input\/clean-kalman\/test_clean_kalman.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_clean = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_clean  = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv', dtype={'time': np.float32, 'signal': np.float32})\n\ntrain_sin = pd.read_csv('\/kaggle\/input\/remove-drift-using-a-sine-function\/train_wo_drift.csv', dtype={'time': np.float32, 'signal': np.float32, 'open_channels':np.int32})\ntest_sin  = pd.read_csv('\/kaggle\/input\/remove-drift-using-a-sine-function\/test_wo_drift.csv', dtype={'time': np.float32, 'signal': np.float32})","62b57dc1":"def plot_open_channels_signal(df: pd.DataFrame, vline=[]):\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    \n    ax.plot(df.signal, df.open_channels, '.', color='fuchsia', alpha=0.25)\n    for x in vline:\n        ax.axvline(x, alpha=0.75, color='tomato')\n    ax.set_xlabel('Signal')\n    ax.set_ylabel('Open Channels')\n    plt.show()\n    \n    \ndef plot_data(df: pd.DataFrame):\n    if 'open_channels' in df.columns:\n        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 16))\n    \n        ax2.plot(df.time, df.open_channels, color='royalblue', alpha=0.75)\n        ax2.set_xlabel('time')\n        ax2.set_ylabel('Open Channels')\n    else:\n        fig, ax1 = plt.subplots(1, 1, figsize=(24, 8))\n    \n    ax1.plot(df.time, df.signal, color='royalblue', alpha=0.75)\n    ax1.set_xlabel('time')\n    ax1.set_ylabel('Signal')\n    plt.show()\n    \n    \ndef plot_data_emission(df: pd.DataFrame, timestamps: list = [], roi=None):\n    fig, ax = plt.subplots(1, 1, figsize=(24, 8))\n    \n    ax.plot(df.time, df.signal, color='royalblue', alpha=0.75)\n    for start, end in timestamps:\n        ax.axvspan(start, end, color='lime', alpha=0.5)\n    ax.set_xlabel('time')\n    ax.set_ylabel('Signal')\n    if roi is not None:\n        plt.xlim(roi)\n    plt.show()\n    \n    \ndef distplot(series: pd.Series, bound: float = None):\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    \n    sns.distplot(series, ax=ax, color='darkorange')\n    if bound is not None:\n        ax.axvline(bound)\n    plt.show()\n    \n    \ndef shiftplot(df:pd.DataFrame, open_channel:int, level:float):\n    fig, ax = plt.subplots(1, 1, figsize=(24, 7))\n\n    ax.plot(df.signal, color='royalblue')\n\n    ax.plot(df.signal[(df.open_channels==open_channel) & (df.signal < level)], '.', color='cyan', alpha=0.75, label = 'left part')\n    ax.plot(df.signal[(df.open_channels==open_channel) & (df.signal >= level)], '.', color='deeppink', alpha=0.25, label = 'right part');\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Signal')\n    plt.legend()\n    plt.show();","b9574adc":"plot_open_channels_signal(train)","b197ecb9":"plot_data(train)","23f4dc96":"plot_data(test)","9cb72116":"plot_open_channels_signal(train_clean)","81fed762":"plot_data(train_clean)","7b73f4ed":"plot_data(test_clean)","0633908c":"plot_open_channels_signal(train_sin)","ebbc5b79":"plot_data(train_sin)","e5684540":"plot_data(test_sin)","cbf5f7a3":"plot_open_channels_signal(train_clean_kalman)","55636809":"plot_data(train_clean_kalman)","8e9749d8":"plot_data(test_clean_kalman)","1359a624":"plot_data_emission(train_clean_kalman, roi=[47.5, 48])","f55dfc02":"FIRST_EMISSION = (47.857, 47.863)\nplot_data_emission(train_clean_kalman, [FIRST_EMISSION,], roi=[47.5, 48])","553a8ef4":"plot_data_emission(train_clean_kalman, roi=[360, 390])","e3da9805":"SECOND_EMISSION = (364.229, 382.343)\nplot_data_emission(train_clean_kalman, [SECOND_EMISSION,], roi=[360, 390])","adf96c4d":"plot_data_emission(train_clean_kalman, [FIRST_EMISSION, SECOND_EMISSION])","eae37e07":"train_ckwe = train_clean_kalman_without_emission = train_clean_kalman.loc[(train_clean_kalman.time < FIRST_EMISSION[0]) | (train_clean_kalman.time > FIRST_EMISSION[1]), :]\ntrain_ckwe = train_clean_kalman_without_emission = train_ckwe.loc[(train_ckwe.time < SECOND_EMISSION[0]) | (train_ckwe.time > SECOND_EMISSION[1]), :]\n\ntrain_cwe = train_clean_without_emission = train_clean.loc[(train_clean.time < FIRST_EMISSION[0]) | (train_clean.time > FIRST_EMISSION[1]), :]\ntrain_cwe = train_clean_without_emission = train_cwe.loc[(train_cwe.time < SECOND_EMISSION[0]) | (train_cwe.time > SECOND_EMISSION[1]), :]\n\ntrain_swe = train_sin_without_emission = train_sin.loc[(train_sin.time < FIRST_EMISSION[0]) | (train_sin.time > FIRST_EMISSION[1]), :]\ntrain_swe = train_sin_without_emission = train_swe.loc[(train_swe.time < SECOND_EMISSION[0]) | (train_swe.time > SECOND_EMISSION[1]), :]","89ffd96e":"plot_data_emission(train_ckwe, [FIRST_EMISSION, SECOND_EMISSION])","e66467a6":"plot_open_channels_signal(train_swe)","77bf7ebb":"levels = [-4., -2.95, -1.7, -0.45, 0.98, 2.25]\n\nplot_open_channels_signal(train_swe, levels)","17b85bb1":"distplot(train_ckwe.signal[train_swe.open_channels==0], -4.)","7a685e42":"distplot(train_ckwe.signal[train_swe.open_channels==1], -2.95)","5a205578":"distplot(train_ckwe.signal[train_swe.open_channels==2], -1.7)","adf2b798":"distplot(train_ckwe.signal[train_swe.open_channels==3], -0.45)","e6d70a07":"distplot(train_ckwe.signal[train_swe.open_channels==4], 0.98)","6ba805af":"distplot(train_ckwe.signal[train_swe.open_channels==5], 2.25)","ff31d80d":"shiftplot(train_ckwe, 0, -4.)","2a571e1b":"shiftplot(train_ckwe, 1, -2.95)","1a37106b":"shiftplot(train_ckwe, 2, -1.7)","249e4527":"shiftplot(train_ckwe, 3, -.45)","38ac9327":"shiftplot(train_ckwe, 4, .98)","22340cf1":"shiftplot(train_ckwe, 5, 2.25)","ebdb6d2b":"rights_mean = []\nrights_signal = []\nfor i, l in enumerate(levels):\n    rights_mask = (train_ckwe.open_channels==i) & (train_ckwe.signal >= l)\n    rights_mean.append(train_ckwe.signal[rights_mask].mean())\n    rights_signal.append(train_ckwe.signal[rights_mask])","1dd6048b":"left_mean = []\nleft_signal = []\nfor i, l in enumerate(levels):\n    left_mask = (train_ckwe.open_channels==i) & (train_ckwe.signal < l)\n    left_mean.append(train_ckwe.signal[left_mask].mean())\n    left_signal.append(train_ckwe.signal[left_mask])","a0b672c1":"fig, ax = plt.subplots(1, 1, figsize=(10,10))\n\nax.plot(levels, np.arange(0, 6), color='darkorange', label='bound');\nax.plot(levels, np.arange(0, 6), '*', color='darkorange');\n\nax.plot(left_mean, np.arange(0, 6), color='crimson', label='left signal part');\nax.plot(left_mean, np.arange(0, 6), '*', color='crimson');\nfor i, s in enumerate(left_signal):\n    ax.plot(s, np.ones_like(s)*i, '.', color='crimson', alpha=0.01)\n\nax.plot(rights_mean, np.arange(0, 6), color='indigo', label='right signal part');\nax.plot(rights_mean, np.arange(0, 6), '*', color='indigo');\nfor i, s in enumerate(rights_signal):\n    ax.plot(s, np.ones_like(s)*i, '.', color='indigo', alpha=0.01)\n\nax.set_xlabel('Signal')\nax.set_ylabel('Open Channels')\nplt.legend();","70201a43":"dist = [(l - r)**2 for l, r in zip(left_mean, rights_mean)]","deb0d9a2":"fig, ax = plt.subplots(1, 1, figsize=(10,10))\n\nax.plot(dist, np.arange(0, 6), color='darkgreen');\nax.plot(dist, np.arange(0, 6), '*', color='darkgreen');\nax.axvline(np.mean(dist[:]), color='lime', label=f'{np.mean(dist[:])}')\nax.axvline(np.mean(dist[1:]), color='tomato', label=f'{np.mean(dist[1:])}')\nax.axvline(np.exp(2), color='yellow', label='e**2')\nax.set_xlabel('(LeftSignalMean - RightSignalMean)**2')\nax.set_ylabel('Open Channels')\nplt.legend();","26aca250":"SGNAL_SHIFT_CONSTANT = np.exp(1)\nSGNAL_SHIFT_CONSTANT","8e59fe73":"train_ckwe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_ckwe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntrain_cwe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_cwe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntrain_swe.loc[2000000:2500000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntrain_swe.loc[4500000:, 'signal'] += SGNAL_SHIFT_CONSTANT","879811d2":"plot_data(train_cwe)","d20d4871":"plot_open_channels_signal(train_ckwe)","ff3a2373":"distplot(train_ckwe.signal[train_ckwe.open_channels==0])","4ce6fce9":"distplot(train_ckwe.signal[train_ckwe.open_channels==1],)","dce141d0":"distplot(train_ckwe.signal[train_ckwe.open_channels==2])","c4d04370":"distplot(train_ckwe.signal[train_ckwe.open_channels==3])","61d85654":"distplot(train_ckwe.signal[train_ckwe.open_channels==4])","fed47a1f":"distplot(train_ckwe.signal[train_ckwe.open_channels==5])","b2e21d21":"shiftplot(train_ckwe, 0, -4.)","58de63e0":"shiftplot(train_ckwe, 1, -2.95)","a1b11b25":"shiftplot(train_ckwe, 2, -1.7)","b3b5d396":"shiftplot(train_ckwe, 3, -.45)","d27ca502":"shiftplot(train_ckwe, 4, .98)","c67188bd":"shiftplot(train_ckwe, 5, 2.25)","f4db0e37":"test_clean_kalman.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_clean_kalman.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntest_clean.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_clean.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT\n\ntest_sin.loc[500000:600000, 'signal'] += SGNAL_SHIFT_CONSTANT\ntest_sin.loc[700000:800000, 'signal'] += SGNAL_SHIFT_CONSTANT","fcd44fec":"plot_data(test_clean_kalman)","0301f21c":"train_ckwe.to_csv('train_clean_kalman.csv')\ntest_clean_kalman.to_csv('test_clean_kalman.csv')\n\ntrain_cwe.to_csv('train_clean.csv')\ntest_clean.to_csv('test_clean.csv')\n\ntrain_swe.to_csv('train_sin.csv')\ntest_sin.to_csv('test_sin.csv')","0dd3dfe3":"BOUNDS = [-2.1, -0.9, 0.3, 1.5, 2.78, 3.99, 5.25, 6.5, 7.7, 8.95, 8.95]\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\n\nfor i, bound in enumerate(BOUNDS):\n    sns.distplot(train_ckwe.signal[train_ckwe.open_channels == i], ax=ax, color='darkorange')\n    if bound is not None:\n        ax.axvline(bound)\nplt.show()","2483c32c":"def boundery_classifier(x):\n    for i in range(10):\n        if x < BOUNDS[i]:\n            return i\n    return 10","7eaaa8f3":"train_ckwe['pred'] = train_ckwe.signal.apply(boundery_classifier)","1098c010":"from sklearn.metrics import f1_score, accuracy_score\n\nprint(\"Accuracy =\", accuracy_score(y_pred=train_ckwe['pred'].values, y_true=train_ckwe['open_channels'].values,))\nprint(\"F1 macro =\", f1_score(y_pred=train_ckwe['pred'].values, y_true=train_ckwe['open_channels'].values, average='macro'))","9ac16771":"df_subm = pd.read_csv(\"..\/input\/liverpool-ion-switching\/sample_submission.csv\")\ndf_subm['open_channels'] = test_clean_kalman.signal.apply(boundery_classifier)\ndf_subm.to_csv(\"boundary.csv\", float_format='%.4f', index=False)","7842d8e9":"## Data without drift with Kalman Filter postprocessing by [ragnar](https:\/\/www.kaggle.com\/ragnar123)","03de3eb6":"## Load Data","75abe7d2":"## Initial Data","e634461d":"## Save results","d49f97d7":"#### Data without drift by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte)","e613ba62":"#### First Outliers","fe2ed414":"#### Data without drift by [Eunho Lee](https:\/\/www.kaggle.com\/eunholee)","f2284c97":"## \"Ghost\" drift\nThe chart above has a very interesting relationship: a mirror image of the signal values \u200b\u200brelative to the point for open channels from 0 to 5, which can indicate a shift in values \u200b\u200bin some pieces of the signal.","e1b42092":"## Let's remove \"Ghost\" drift","a569e0d4":"## Reference\n* [Clean Removal of Data Drift](https:\/\/www.kaggle.com\/eunholee\/remove-drift-using-a-sine-function)\n* [remove drift using a sine function](https:\/\/www.kaggle.com\/eunholee\/remove-drift-using-a-sine-function)\n* [A signal processing approach - Kalman Filtering](https:\/\/www.kaggle.com\/teejmahal20\/a-signal-processing-approach-kalman-filtering?scriptVersionId=30696729)\n* [Data Without Drift](https:\/\/www.kaggle.com\/cdeotte\/data-without-drift)\n* [clean_kalman](https:\/\/www.kaggle.com\/ragnar123\/clean-kalman)","172dd522":"#### Second Outliers","d0dbc9b8":"Training data has two obvious outliers that are easiest to remove from the training set.","ad9d6e9e":"## Conclusion\nIn this research I detect and remove outliers and \"Ghost\" drift. I hope that current research help construct more accurate model.","fafb50a5":"## Data without drift","ada3a2c3":"## Help Functions","3b6310ed":"## Outliers ","fb992c90":"## Boundary Classifier"}}