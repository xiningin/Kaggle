{"cell_type":{"22ce23dc":"code","db9cbb24":"code","14a79833":"code","81c5b30c":"code","37c5c0d3":"code","c6ef439d":"code","595842ff":"code","f3c2818d":"code","5de12d0e":"code","7739724e":"code","0fd44f13":"code","10bfcd52":"code","5756c795":"code","da508dfe":"code","fd9a0c83":"code","3b1fcffa":"code","8c09f7b1":"code","a97b33af":"code","a97709ad":"code","5fb990ee":"code","150a3b24":"code","555ddac7":"code","2d83fe6b":"code","2662011e":"code","47f85fba":"code","90a26247":"code","99c34d59":"code","69b7802d":"code","f6c69200":"code","64cca86b":"code","e84400b2":"code","2774e7da":"code","3597789b":"code","061daa41":"code","652f2861":"code","be30b03e":"code","0341a587":"code","7d969450":"code","b217d470":"code","6e624912":"code","328cebf3":"code","8df67554":"code","d5816ff0":"code","820b8ed8":"code","57328917":"code","a2e6f4fd":"code","ec637be6":"code","d27e820c":"code","ad5095ec":"code","6aece7c6":"code","09b690b2":"code","cfddec75":"code","33d96dcd":"code","12193899":"code","1a6411c6":"code","1a1056e8":"code","78bf7b40":"code","5c5bb035":"code","6b6f98f9":"code","bc1d4ec2":"code","a51492e3":"code","be1f16fb":"code","2405a356":"code","890c5ed7":"code","bdeb61fc":"code","1214a0be":"code","4c7db693":"code","603b966f":"code","881d243a":"code","9a1f6878":"code","518cf953":"code","245e6966":"code","d0260471":"code","7d60e7f4":"markdown","ac58fc11":"markdown","e99ca8af":"markdown","2ad8c3d2":"markdown","14e2126f":"markdown","7d9887bb":"markdown","2aea4f5a":"markdown","5934accf":"markdown","bd75ded4":"markdown","4ac041ee":"markdown","580f7d24":"markdown","93b229b7":"markdown","84778d0e":"markdown"},"source":{"22ce23dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n#deneme\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport seaborn as sns\n\nimport plotly.colors\nfrom collections import Counter\n\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db9cbb24":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",'FG','FGA','2P','2PA','3P','3PA','FT','FTA','G', 'GS','eFG%','ORB', 'DRB','PF',\"MP\" ],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\ndf","14a79833":"df.isna().sum()","81c5b30c":"def club(club):\n    return df[df[\"Tm\"]==club]","37c5c0d3":"club(\"GSW\")","c6ef439d":"def Player(name):\n    return df[df[\"Player\"]==name]","595842ff":"Player(\"Alize Johnson\")","f3c2818d":"df.describe().T","5de12d0e":"#import pandas_profiling as pp\n#pp.ProfileReport(df)","7739724e":"player=df.sort_values(by=\"PTS\",ascending=False).head()[\"Player\"]\nsay\u0131=df.sort_values(by=\"PTS\",ascending=False).head()[\"PTS\"]\nteam=df.sort_values(by=\"PTS\",ascending=False).head()[\"Tm\"]\nlib_p=pd.DataFrame({\"Player\":player,\"Points\":say\u0131,\"Team\":team})\n\nplayer=df.sort_values(by=\"AST\",ascending=False).head()[\"Player\"]\nast=df.sort_values(by=\"AST\",ascending=False).head()[\"AST\"]\nteam=df.sort_values(by=\"AST\",ascending=False).head()[\"Tm\"]\nlib_a=pd.DataFrame({\"Player\":player,\"Assist\":ast,\"Team\":team})\n\nplayer=df.sort_values(by=\"TRB\",ascending=False).head()[\"Player\"]\nreb=df.sort_values(by=\"TRB\",ascending=False).head()[\"TRB\"]\nteam=df.sort_values(by=\"TRB\",ascending=False).head()[\"Tm\"]\nlib_r=pd.DataFrame({\"Player\":player,\"Rebound\":reb,\"Team\":team})\n\nplayer=df.sort_values(by=\"STL\",ascending=False).head()[\"Player\"]\nstl=df.sort_values(by=\"STL\",ascending=False).head()[\"STL\"]\nteam=df.sort_values(by=\"STL\",ascending=False).head()[\"Tm\"]\nlib_s=pd.DataFrame({\"Player\":player,\"Steal\":stl,\"Team\":team})\n\nplayer=df.sort_values(by=\"BLK\",ascending=False).head()[\"Player\"]\nblk=df.sort_values(by=\"BLK\",ascending=False).head()[\"BLK\"]\nteam=df.sort_values(by=\"BLK\",ascending=False).head()[\"Tm\"]\nlib_b=pd.DataFrame({\"Player\":player,\"Block\":blk,\"Team\":team})","0fd44f13":"lib_p","10bfcd52":"trace1=go.Bar(\nx=lib_p[\"Player\"],\ny=lib_p[\"Points\"],\ntext=lib_p[\"Team\"])\nlayout=go.Layout(barmode=\"group\",title=\"Players-Points\",xaxis=dict(title=\"Players\"),yaxis=dict(title=\"Points\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","5756c795":"lib_a","da508dfe":"trace1=go.Bar(\nx=lib_a[\"Player\"],\ny=lib_a[\"Assist\"],\ntext=lib_a[\"Team\"])\nlayout=go.Layout(barmode=\"group\",title=\"Players-Assists\",xaxis=dict(title=\"Players\"),yaxis=dict(title=\"Assists\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","fd9a0c83":"lib_r","3b1fcffa":"trace1=go.Bar(\nx=lib_r[\"Player\"],\ny=lib_r[\"Rebound\"],\ntext=lib_r[\"Team\"])\nlayout=go.Layout(barmode=\"group\",title=\"Players-Rebounds\",xaxis=dict(title=\"Players\"),yaxis=dict(title=\"Rebounds\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","8c09f7b1":"lib_s","a97b33af":"trace1=go.Bar(\nx=lib_s[\"Player\"],\ny=lib_s[\"Steal\"],\ntext=lib_s[\"Team\"])\nlayout=go.Layout(barmode=\"group\",title=\"Players-Steal\",xaxis=dict(title=\"Players\"),yaxis=dict(title=\"Steal\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","a97709ad":"lib_b","5fb990ee":"\ntrace1=go.Bar(\nx=lib_b[\"Player\"],\ny=lib_b[\"Block\"],\ntext=lib_b[\"Team\"])\nlayout=go.Layout(barmode=\"group\",title=\"Players-Blocks\",xaxis=dict(title=\"Players\"),yaxis=dict(title=\"Blocks\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","150a3b24":"dfr=df.Ratings\nq1=dfr.quantile(0.25)\nq3=dfr.quantile(0.75)\n\u0131qr=q3-q1\n\u00fcst=q3+1.5*\u0131qr\nalt=q1-1.5*\u0131qr\nprint(q1)\nprint(q3)\nprint(alt)\nprint(\u00fcst)","555ddac7":"dfr=pd.DataFrame(dfr)","2d83fe6b":"dfr.shape","2662011e":"dfr=dfr[~((dfr<alt) | (dfr>\u00fcst)).any(axis=1)] \ndfr.shape","47f85fba":"df=df.select_dtypes(include=[\"float\",\"int\"])","90a26247":"df.Ratings=[1 if each>df[\"Ratings\"].mean() else 0 for each in df.Ratings]\nfrom sklearn.neighbors import LocalOutlierFactor\nlof=LocalOutlierFactor(n_neighbors=20,contamination=0.1)\nlof.fit_predict(df)\ndf_scores=lof.negative_outlier_factor_\ned=np.sort(df_scores)[15]\nayk=df_scores>ed\nyeni=df[df_scores>ed]\nyeni\n","99c34d59":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",'FG','FGA','2P','2PA','3P','3PA','FT','FTA','G', 'GS','eFG%','ORB', 'DRB','PF',\"MP\" ],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\ndf","69b7802d":"rating = pd.DataFrame(df.groupby('Age')['Ratings'].sum())\nrating\n\n","f6c69200":"fig,ax=plt.subplots(figsize=(50,10),ncols=2)\nax1=sns.lineplot(df.Age,df.Ratings,ax=ax[0]);\nax2=sns.lineplot(df.PTS,df.Ratings,ax=ax[1]);\nax1.set_title(\"AGE-RAT\u0130NGS\",fontsize=20)\nax1.set_ylabel(\"RAT\u0130NGS\",fontsize=26)\nax2.set_ylabel(\"RAT\u0130NGS\",fontsize=26)\nax1.set_xlabel(\"AGE\",fontsize=26)\nax2.set_xlabel(\"PTS\",fontsize=26)\nax2.set_title(\"PTS-RAT\u0130NGS\",fontsize=20)\nplt.show()","64cca86b":"\nplt.figure(figsize=(20,10))\ndata=df.corr()\nsns.heatmap(data,annot=True,fmt=\".1f\",cmap=\"RdBu\")\nplt.show()","e84400b2":"heat=data.nlargest(5,\"Ratings\")\nsns.heatmap(heat,annot=True)\nplt.show()","2774e7da":"\n#cols=['Player', 'Ratings', 'Salaries', 'Pos', 'Age', 'Tm', 'FG%', '3P%','2P%', 'FT%', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PTS']\n#sns.pairplot(df[cols])","3597789b":"cols=[\"PTS\",\"Ratings\"]\nsns.pairplot(df[cols],kind=\"reg\")\nplt.show()","061daa41":"df.Ratings.plot(kind=\"box\")\nplt.show()","652f2861":"plt.figure(figsize=(20,5))\nsns.boxplot(df[\"Tm\"],y=df[\"Ratings\"],palette=\"pastel\")\nplt.xlabel(\"Teams\")\nplt.title(\"Teams-Ratings\")\nplt.show()","be30b03e":"for i in df[\"Tm\"].unique():\n    score=np.mean(df[df[\"Tm\"]==i][[\"Player\",\"Ratings\",\"Tm\"]].sort_values(by=\"Ratings\",ascending=False).head())\n    print(float(score),i)\n","0341a587":"plt.figure(figsize=(10,5))\nsns.barplot(y=df[\"PTS\"].head(),x=df[\"Player\"].head())\nplt.show()","7d969450":"trace1=go.Bar(\nx=df[\"Tm\"].value_counts().index,\ny=df[\"Tm\"].value_counts().values,\n\nmarker=dict(color=\"rgba(200,220,20,1)\")\n)\nlayout=go.Layout(barmode=\"group\",title=\"Teams densities\",xaxis=dict(title=\"Teams\"),yaxis=dict(title=\"Densities\"))\nfig=go.Figure(data=trace1,layout=layout)\niplot(fig)","b217d470":"hun=df.iloc[:50 ,:]\ntrace1=go.Scatter(\nx=hun[\"Player\"],\ny=hun[\"PTS\"],\nmode=\"lines\",\nname=\"PTS\",\nline=dict( dash='dot'),\ntext=\"Team:\" + hun[\"Tm\"]\n)\ntrace2=go.Scatter(\nx=hun[\"Player\"],\ny=hun[\"AST\"],\nmode=\"lines\",\nname=\"ASS\u0130ST\",\nline=dict( dash='dot'),\ntext=\"Salary:\" + hun[\"Salaries\"]\n)\nlayout=go.Layout(title=\"PTS-AST\",template='plotly_dark',xaxis=dict(title=\"Teams\"))\nfig=go.Figure(data=[trace1,trace2],layout=layout)\niplot(fig)","6e624912":"df[[\"Ratings\",\"Age\"]].groupby(\"Age\").agg([\"count\",\"mean\"]).sort_values(\"Age\")","328cebf3":"df[[\"Ratings\",\"PTS\"]].groupby(\"Ratings\").agg([\"count\",\"mean\"]).sort_values(\"Ratings\",ascending=False).head()","8df67554":"\nsns.countplot(df[\"Pos\"],palette=\"bone\")\nplt.xlabel(\"position\")\nplt.show()\n","d5816ff0":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nhun=df.iloc[:50 ,:]\ntrace1=go.Bar(\nx=hun[\"Player\"],\ny=hun[\"Ratings\"],\nname=\"Ratings\",\ntext=hun[\"Tm\"])\n\n\n\nlayout=go.Layout(barmode=\"group\",title=\"Player-Ratings\",xaxis=dict(title= 'Players'))\n\nfig=go.Figure(data=trace1,layout=layout)\nplt.figure(figsize=(10,10))\niplot(fig)\n\nplt.show()\n\n\n","820b8ed8":"sns.distplot(df['Age'], color = 'blue')\n","57328917":"\ntrace2=go.Scatter(\nx=hun[\"Player\"],\ny=hun[\"Salaries\"],\n#name=\"Player\",\nmarker=dict(color=\"rgba(16,112,22,1)\"),\nmode=\"lines+markers\",\ntext=hun[\"Ratings\"])\nlayout=go.Layout(title=\"Player-Salaries\",xaxis=dict(title= 'Players'))\nFig=go.Figure(data=trace2,layout=layout)\niplot(Fig)\n\n","a2e6f4fd":"# data preparation\ndfpie = df.iloc[:150,:]\npie1_list = dfpie.Ratings \nlabels = dfpie[\"Ratings\"]\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Ratings\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .2,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Ratings\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Score\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)\n\n","ec637be6":"plt.figure(figsize=(20,5))\nsns.countplot(df.Ratings)\nplt.show()","d27e820c":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",\"Player\",\"Salaries\"],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\ndf=pd.get_dummies(df,columns=[\"Tm\"],prefix=[\"Tm\"])\ndf=pd.get_dummies(df,columns=[\"Pos\"],prefix=[\"Pos\"])","ad5095ec":"df.Ratings=[1 if each>df.Ratings.mean()  else 0 for each in df.Ratings]\ny=df.Ratings.values\nxt=df.drop([\"Ratings\"],axis=1)\nfrom sklearn.preprocessing import StandardScaler\nx=StandardScaler().fit_transform(xt)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nk=list(range(1,50))\nw=[\"uniform\",\"distance\"]\ngrid=dict(n_neighbors=k,weights=w)\nknn=KNeighborsClassifier()\ncv=GridSearchCV(knn,grid,cv=10)\ncv.fit(x_train,y_train)\nprint(cv.best_params_)\nprint(cv.best_score_)","6aece7c6":"from sklearn.linear_model import LogisticRegression\nlor=LogisticRegression().fit(x_train,y_train)\nlor.score(x_test,y_test)","09b690b2":"from sklearn.decomposition import PCA\npca=PCA(n_components=2,whiten=True)\na=pca.fit_transform(x)\nx_trainpca,x_testpca,y_trainpca,y_testpca=train_test_split(a,y,test_size=0.2,random_state=42)\nknn=KNeighborsClassifier(n_neighbors=2)\nknn.fit(x_trainpca,y_trainpca)\nknn.score(x_testpca,y_testpca)","cfddec75":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",\"Player\",\"Salaries\"],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder().fit_transform(df[\"Tm\"])\ndf[\"Tm\"]=le\nl=LabelEncoder().fit_transform(df[\"Pos\"])\ndf[\"Pos\"]=l\ndf","33d96dcd":"df.Ratings=[1 if each>df.Ratings.mean()  else 0 for each in df.Ratings]\ny=df.Ratings.values\nxt=df.drop([\"Ratings\"],axis=1)\nfrom sklearn.preprocessing import StandardScaler\nx=StandardScaler().fit_transform(xt)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nk=list(range(1,50))\nw=[\"uniform\",\"distance\"]\ngrid=dict(n_neighbors=k,weights=w)\nknn=KNeighborsClassifier()\ncv=GridSearchCV(knn,grid,cv=10)\ncv.fit(x_train,y_train)\nprint(cv.best_params_)\nprint(cv.best_score_)","12193899":"from sklearn.linear_model import LogisticRegression\nlor=LogisticRegression().fit(x_train,y_train)\nlor.score(x_test,y_test)","1a6411c6":"from sklearn.decomposition import PCA\npca=PCA(n_components=2,whiten=True)\na=pca.fit_transform(x)\nx_trainpca,x_testpca,y_trainpca,y_testpca=train_test_split(a,y,test_size=0.2,random_state=42)\nknn=KNeighborsClassifier(n_neighbors=2)\nknn.fit(x_trainpca,y_trainpca)\nknn.score(x_testpca,y_testpca)","1a1056e8":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",\"Player\",\"Salaries\",\"Pos\",\"Tm\",],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\ndf","78bf7b40":"df.Ratings=df.Ratings.astype(float)\ndf.Age=df.Age.astype(float)\ndf.G=df.GS.astype(float)\ndf.GS=df.GS.astype(float)\ndf","5c5bb035":"df.Ratings=[1 if each>df.Ratings.mean()  else 0 for each in df.Ratings]\ny=df.Ratings.values\nxt=df.drop([\"Ratings\"],axis=1)\nfrom sklearn.preprocessing import StandardScaler\nx=StandardScaler().fit_transform(xt)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nk=list(range(1,50))\nw=[\"uniform\",\"distance\"]\ngrid=dict(n_neighbors=k,weights=w)\nknn=KNeighborsClassifier()\ncv=GridSearchCV(knn,grid,cv=10)\ncv.fit(x_train,y_train)\nprint(cv.best_params_)\nprint(cv.best_score_)","6b6f98f9":"from sklearn.linear_model import LogisticRegression\nlor=LogisticRegression().fit(x_train,y_train)\nlor.score(x_test,y_test)","bc1d4ec2":"from sklearn.decomposition import PCA\npca=PCA(n_components=2,whiten=True)\na=pca.fit_transform(x)\nx_trainpca,x_testpca,y_trainpca,y_testpca=train_test_split(a,y,test_size=0.2,random_state=42)\nknn=KNeighborsClassifier(n_neighbors=2)\nknn.fit(x_trainpca,y_trainpca)\nknn.score(x_testpca,y_testpca)\n\n\n","a51492e3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport seaborn as sns\n\nfrom collections import Counter\nfrom sklearn.tree import DecisionTreeClassifier\ndtc= DecisionTreeClassifier(criterion='entropy')\n\ndtc.fit(x_train,y_train)\ny_pred= dtc.predict(x_test)\n\nfrom sklearn.metrics import confusion_matrix\n\ncm=confusion_matrix(y_test,y_pred)\nprint('DTC')\nprint(cm)\n\nplt.figure(figsize=(5,5))\nsns.heatmap(cm,annot=True,cmap=\"BuPu\")","be1f16fb":"from keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score","2405a356":"model=Sequential()\nmodel.add(Dense(units=8,activation=\"relu\",kernel_initializer=\"uniform\",input_dim=x.shape[1]))\nmodel.add(Dense(units=4,activation=\"relu\",kernel_initializer=\"uniform\"))\nmodel.add(Dense(units=1,activation=\"sigmoid\",kernel_initializer=\"uniform\"))\nmodel.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])\n    ","890c5ed7":"model.fit(x_train,y_train,epochs=200,validation_data=(x_test,y_test))","bdeb61fc":"df=pd.read_csv(\"\/kaggle\/input\/nba-1920-season-stats-ratings-and-salaries\/nba-stats-salary-rating.csv\")\ndf.drop([\"Unnamed: 0\",\"Player\",\"Salaries\"],axis=1,inplace=True)\ndf=df.replace(np.nan,0)\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder().fit_transform(df[\"Tm\"])\ndf[\"Tm\"]=le\nl=LabelEncoder().fit_transform(df[\"Pos\"])\ndf[\"Pos\"]=l\ndf","1214a0be":"data=df.corr()\nheat=data.nlargest(2,\"Ratings\")\nsns.heatmap(heat,annot=True)","4c7db693":"import statsmodels.api as sm\ny=df[\"Ratings\"]\nx=df[\"PTS\"]\nx=sm.add_constant(x)\nlm=sm.OLS(y,x)\nmodel=lm.fit()\nmodel.summary()\n","603b966f":"model.fittedvalues[0:5]","881d243a":"y[0:5]","9a1f6878":"sns.regplot(df[\"Ratings\"],df[\"PTS\"])","518cf953":"y=df[\"Ratings\"]\nx=df.drop([\"Ratings\"],axis=1)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nreg=PolynomialFeatures(degree=2).fit_transform(x)\nlreg=LinearRegression().fit(reg,y)\ny2=lreg.predict(reg)\na=pd.DataFrame({\"Real\":y,\"Predict\":y2,\"Distance\":y-y2})\na","245e6966":"import statsmodels.api as sm\ny=df[\"Ratings\"]\nx=df.drop([\"Ratings\"],axis=1)\nlm=sm.OLS(y,x)\nmodel=lm.fit()\nmodel.summary()","d0260471":"from sklearn.metrics import r2_score\nr2_score(y,y2)","7d60e7f4":"### PO\u0130NTS LEADERSH\u0130P \n","ac58fc11":"<a id = \"2\"><\/a><br>\n# BAS\u0130C FUNCT\u0130ONS","e99ca8af":" ### REBOUND LEADERSH\u0130P ","2ad8c3d2":"# LOCAL OUTL\u0130ER FACTOR(LOF)","14e2126f":"### STEAL LEADERSH\u0130P ","7d9887bb":"<a id = \"3\"><\/a><br>\n# LEADERSH\u0130PS","2aea4f5a":"<a id = \"1\"><\/a><br>\n# Load and Check Data","5934accf":"### ASS\u0130ST LEADERSH\u0130P ","bd75ded4":"please upvote if you like. \u0131 need to be encouraged for more\n# NBA\n\nThe National Basketball Association (NBA) is a men's professional basketball league in North America, composed of 30 teams (29 in the United States and 1 in Canada). It is one of the four major professional sports leagues in the United States and Canada, and is widely considered to be the premier men's professional basketball league in the world.\n<br> <br>\n<font color = 'blue'>\nContent: \n1. [Load and Check Data](#1)\n1. [BAS\u0130C FUNCT\u0130ONS](#2)\n1. [LEADERSH\u0130PS](#3)\n1. [V\u0130SUAL\u0130ZAT\u0130ON](#4)\n1. [MACH\u0130NE LEARN\u0130NG](#5) \n\n\n\n","4ac041ee":"### BLOCK LEADERSH\u0130P ","580f7d24":"<a id = \"5\"><\/a><br>\n# MACH\u0130NE LEARN\u0130NG","93b229b7":"<a id = \"4\"><\/a><br>\n# V\u0130SUAL\u0130ZAT\u0130ON","84778d0e":"# OUTL\u0130ERS"}}