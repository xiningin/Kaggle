{"cell_type":{"0d3dcdd0":"code","186616cf":"code","ef614c33":"code","8a9d5024":"code","06b21bb5":"code","2584e50a":"code","69da92dc":"code","fba693fe":"code","2e3e43b7":"code","c245decc":"code","83c26f7a":"code","9521a78f":"code","6b377584":"code","99c0eaa1":"code","ea7415f9":"code","27d694d7":"code","895aa35b":"code","d9c4e8ec":"code","78354ce3":"code","b5212232":"code","7a2f158c":"code","32f5c798":"code","a3c32b9f":"code","7897b860":"code","1fe7388b":"code","47b8b20a":"code","f231ae27":"code","62d9e211":"code","f33e2ed8":"code","b47b9ce0":"markdown","cc409d33":"markdown","f3b4673b":"markdown","57ad0d71":"markdown","6667baae":"markdown","88aef0d7":"markdown","b227280a":"markdown","70ddf543":"markdown","0f7a405c":"markdown","d926525a":"markdown","df5bd07b":"markdown","91e0a332":"markdown"},"source":{"0d3dcdd0":"import numpy as np \nimport pandas as pd \nimport cv2 # image and video processing library to be used for reading and resizing our images\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport random # to split and shuffle our dataset\nimport gc # garbage collector for cleaning deleted data from memory\n\n# Input data files are available in the \"..\/input\/\" directory.\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# Any results you write to the current directory are saved as output.","186616cf":"# create a file path to our train and test data\ntrain_dir = '..\/input\/dogs-vs-cats-redux-kernels-edition\/train'\ntest_dir = '..\/input\/dogs-vs-cats-redux-kernels-edition\/test'","ef614c33":"# list comprehension to get all the images in the train data zip file\n# and retrieve all images with dog\/cat in their name\ntrain_dogs = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i] # get dog images\ntrain_cats = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i] # get cat images\n\ntest_imgs = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/test\/{}'.format(i) for i in os.listdir(test_dir)] # get test images","8a9d5024":"train_imgs = train_dogs[:2000] + train_cats[:2000] # grab the images from train_dogs and train_cats and concatenate them","06b21bb5":"random.shuffle(train_imgs) #shuffle the training images so they aren't ordered by first half dogs and second half cats","2584e50a":"# now that we have train_imgs, we don't need train_dogs and train_cats so we get rid of them so we don't run out of \n# memory when training our model\ndel train_dogs\ndel train_cats\ngc.collect()","69da92dc":"# lets view some images in train_imgs\nimport matplotlib.image as mpimg #import an image plotting module from matplotlib\nfor ima in train_imgs[0:3]: # run a for loop to plot the first three images in train_imgs\n    img = mpimg.imread(ima)\n    imgplot = plt.imshow(img)\n    plt.show()","fba693fe":"# resize the images using the cv2 module\nnrows = 150\nncolumns = 150\nchannels = 3","2e3e43b7":"# function to read and resize the images\ndef read_and_process_image(list_of_images):\n    '''\n    Returns two arrays:\n    X is an array of resized images\n    y is an array of labels\n    '''\n    X = [] # images\n    y = [] # labels\n    \n    for image in list_of_images:\n        # read the image\n        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (nrows,ncolumns), interpolation=cv2.INTER_CUBIC))\n\n        # get the labels\n        if 'dog' in image[-13:-1]:\n            y.append(1)\n        elif 'cat' in image[-13:-1]:\n            y.append(0)\n        \n    return X, y","c245decc":"# call the function\nX, y = read_and_process_image(train_imgs)","83c26f7a":"# preview of the first image and label\nX[0]","9521a78f":"y[0:5]","6b377584":"plt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range(columns):\n    plt.subplot(5\/columns + 1, columns, i+1)\n    plt.imshow(X[i])","99c0eaa1":"import seaborn as sns\ndel train_imgs # delete train_imgs since it has already been converted to an array and saved in X\ngc.collect()\n\n# convert list to numpy array to use in our model as X and y are currently a python array list\nX = np.array(X)\ny = np.array(y)\n\n# lets make sure our labels contain the correct number of images\nsns.countplot(y)\nplt.title('Labels for Cats and Dogs')","ea7415f9":"# check shape of data\nprint('Shape of train images is:', X.shape)\nprint('Shape of labels is:', y.shape)","27d694d7":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=2) \n# test_size =0.2 means we set 20% of the data to be assigned to the validation set, \n# and 80% to the train set","895aa35b":"print('Shape of train images is:', X_train.shape)\nprint('Shape of test images is:', X_val.shape)\nprint('Shape of labels is:', y_train.shape)\nprint('Shape of labels is:', y_val.shape)","d9c4e8ec":"del X\ndel y\ngc.collect()","78354ce3":"# get the length of the train and validation data\nntrain = len(X_train)\nntest = len(X_val)\n\nbatch_size = 32","b5212232":"from keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img","7a2f158c":"model = models.Sequential() \nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) \nmodel.add(layers.MaxPooling2D(2, 2))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D(2, 2))\nmodel.add(layers.Conv2D(128, (3, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","32f5c798":"model.summary()","a3c32b9f":"# we'll use the RMSprop optimizer with a learning rate of 0.0001\n# we'll use binary_crossentropy loss because its a binary classification\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=1e-4), metrics=['acc'])","7897b860":"train_datagen = ImageDataGenerator(rescale=1.\/255, \n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True)\nval_datagen = ImageDataGenerator(rescale=1.\/255)","1fe7388b":"# with the ImageDataGenerator complete, pass the train and validation set\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)","47b8b20a":"# training the model\nhistory = model.fit_generator(train_generator,\n                             steps_per_epoch=ntrain \/\/ batch_size,\n                             epochs = 64,\n                             validation_data=val_generator,\n                             validation_steps=ntest \/\/ batch_size)","f231ae27":"# save the model for use next time without training again\nmodel.save_weights('model_weights.h5')\nmodel.save('model_keras.h5')","62d9e211":"# prediction on the first ten images of the test dataset\nX_test, y_test = read_and_process_image(test_imgs[0:10])\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","f33e2ed8":"i = 0\ntext_labels = [] # create a list to hold the labels we will generate\nplt.figure(figsize=(30,20)) # figure size of the images we will plot\nfor batch in test_datagen.flow(x, batch_size=1):\n    pred = model.predict(batch) # make a prediction on the image \n    if pred > 0.5: # if prediction is > 0.5 it should be a dog, so append 'dog'\n        text_labels.append('dog')\n    else: # otherwise, it should be a cat\n        text_labels.append('cat')\n    plt.subplot(5 \/ columns + 1, columns, i + 1) # subplot to plot multiple images\n    plt.title('This is a ' + text_labels[i])\n    imgplot = plt.imshow(batch[0])\n    i+=1\n    if i % 10 == 0:\n        break\nplt.show()","b47b9ce0":"This matches our previous heght, width, and channels.","cc409d33":"## Train Test Split","f3b4673b":"The images above are not the same dimensions so we need to resize them to all the same. \nLets declare the new dimensions to be 150 x 150 for height and width and 3 channels (for colour).","57ad0d71":"## Compile The Model","6667baae":"Using VGGnet to arrange our convolution layers","88aef0d7":"X is now an array of image pixel values and y is a list of labels. ","b227280a":"Using convolutional neual network","70ddf543":"## Network Architecture","0f7a405c":"Now lets test our model on the test images","d926525a":"## Image Data Generator","df5bd07b":"## Create Model","91e0a332":"After 64 epochs, the accuracy is about 83%"}}