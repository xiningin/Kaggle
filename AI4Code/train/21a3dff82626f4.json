{"cell_type":{"ab8674cc":"code","d51b4ad9":"code","66df59d6":"code","4d71c9f8":"code","1575d467":"code","09a5c5ca":"code","d9398aa4":"code","b4fba0b7":"code","a1147659":"code","09ad1c5b":"code","589ba6d3":"code","260cc019":"markdown","1c892521":"markdown","19eb7aa8":"markdown","db652d6d":"markdown","ed8ef471":"markdown","5ee61580":"markdown"},"source":{"ab8674cc":"!pip install kaggle-environments -U","d51b4ad9":"!cp -r ..\/input\/lux-ai-2021\/* .","66df59d6":"from kaggle_environments import make\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","4d71c9f8":"class MapState:\n\n    def __init__(self, gamemap, width, height, player, opponent):\n        self.height = width\n        self.width = height\n        self.bd = gamemap\n        self.player = player\n        self.opponent = opponent\n        self.bd_wood = np.zeros([height, width],np.int16)\n        self.bd_coal = np.zeros([height, width],np.int16)\n        self.bd_uranium = np.zeros([height, width],np.int16)\n        self.start_pos = []\n\n    def set_resources(self):        \n        for y in range(self.height):\n            for x in range(self.width):\n                if self.bd[y][x].has_resource():\n                    if self.bd[y][x].resource.type=='wood':\n                        self.bd_wood[y][x] = self.bd[y][x].resource.amount\n                    elif self.bd[y][x].resource.type=='coal':\n                        self.bd_coal[y][x] = self.bd[y][x].resource.amount\n                    elif self.bd[y][x].resource.type=='uranium':\n                        self.bd_uranium[y][x] = self.bd[y][x].resource.amount\n                        \n    def binarise(self):\n        self.bd_wood[self.bd_wood > 0] = 1\n        self.bd_coal[self.bd_coal > 0] = 1\n        self.bd_uranium[self.bd_uranium > 0] = 1 \n        \n    def find_city(self):\n        for y in range(self.height):\n            for x in range(self.width):\n                if self.bd[y][x].citytile is not None:\n                    self.start_pos.append((y,x))","1575d467":"from lux.game import Game\n\ngame_state = None\n\ndef agent(observation, configuration):\n    \n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    ### Bot code ###\n    actions = []\n    \n    if game_state.turn == 0:\n        actions.append(annotate.circle(0, 0))\n  \n    return actions","09a5c5ca":"from matplotlib.colors import ListedColormap, LinearSegmentedColormap","d9398aa4":"def _map_state_to_visual(map_state):\n    \"\"\" Takes a map state and produces the visualisation\"\"\"\n    map_state.set_resources()\n    map_state.binarise()\n    map_state.find_city()\n        \n    visualizer_array = np.add(np.add(map_state.bd_wood,2*map_state.bd_coal),3*map_state.bd_uranium)\n    \n    start_position_list = []\n    \n    for start_pos in map_state.start_pos:\n                start_position_list.append((start_pos[1],start_pos[0]))\n    \n    return visualizer_array, start_position_list","b4fba0b7":"def get_plot_arrays(map_count_target,target_mapsize):\n    map_count_seen = 0    #counter variable, leaves as zero\n    visualizer_list = []\n    start_position_list = []\n    \n    while map_count_seen<map_count_target:\n        # run the simulation\n        env = make('lux_ai_2021', configuration={\n            'loglevel': 0, \n            'annotations': False, \n            'episodeSteps': 2,\n        }, debug=False)\n        \n        steps = env.run([agent, 'simple_agent'])\n        \n        # initiate the relevant class\n        map_state = MapState(\n            gamemap=game_state.map.map,\n            width=game_state.map.width,\n            height=game_state.map.height,\n            player=game_state.players[0],\n            opponent=game_state.players[(0 + 1) % 2],\n            )\n        \n        if np.isclose(map_state.width,target_mapsize):\n            visualizer_array, start_positions_sim = _map_state_to_visual(map_state)\n            visualizer_list.append(visualizer_array)\n            start_position_list.append(start_positions_sim)\n            map_count_seen += 1\n            \n    return visualizer_list, start_position_list","a1147659":"def plot_visualizer_arrays(visualizer_arrays,start_positions_list,cmap):\n    imgwidth = 4\n    length = len(visualizer_arrays)\n    if length < imgwidth:\n        length = imgwidth\n    fig, axs = plt.subplots(int((length\/imgwidth)+0.5), imgwidth)\n    for i,varray in enumerate(visualizer_arrays):\n        for remainder in range(imgwidth):\n            if i%imgwidth == remainder:\n                axs[int((i-remainder)\/imgwidth),remainder].imshow(varray,cmap)\n                for start_pos in start_positions_list[i]:\n                    axs[int((i-remainder)\/imgwidth),remainder].plot(start_pos[0], start_pos[1], 'k2',markersize=50)","09ad1c5b":"cmap = ListedColormap([\"white\", \"green\", \"blue\", \"red\"]) #color map, key is: blank space, wood, coal, uranium\nmap_count_target = 12 #how many maps do you want\ntarget_mapsize = 12 # size of maps you want to look at, if none all maps are returned\n\nplt.rcParams['figure.figsize'] = [12*5, 8*5] #make plots bigger","589ba6d3":"visualizer_list, start_positions_list = get_plot_arrays(map_count_target,target_mapsize)\nplot_visualizer_arrays(visualizer_list,start_positions_list,cmap)","260cc019":"#### Installing and setting up","1c892521":"### Inspecting Maps for Lux AI\n\nThis notebook plots a number of random (although of fixed size) maps in order to inform agent design","19eb7aa8":"#### Making app specific imports ","db652d6d":"#### Extracting details from a map","ed8ef471":"### Make some user specific imports","5ee61580":"#### Creating a Minimum Working Example of an agent"}}