{"cell_type":{"bf646870":"code","92377fbf":"code","0a45cead":"code","11892603":"code","99f14111":"code","99d4e2cb":"code","f22eec1e":"code","a9634649":"code","7cca87a5":"code","6b0e30ca":"code","a4ed652e":"code","63f2edfc":"code","9ce8cf6d":"code","f32e3f98":"code","fa889e4d":"code","f3cbe9b2":"code","6a51ab4b":"code","83d17de7":"markdown","6bff766e":"markdown","1bc26a45":"markdown","797919e1":"markdown","842b7af1":"markdown","3be013bc":"markdown","16d32586":"markdown","81f98d57":"markdown","87735328":"markdown","4ffd760b":"markdown"},"source":{"bf646870":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92377fbf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers","0a45cead":"df_train_raw = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test_raw = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_sub_raw = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndf_train_raw.head()","11892603":"%config InlineBackend.figure_format = 'png'\nax = df_train_raw['Survived'].value_counts().plot(kind = 'bar',\n                                                  figsize = (10, 6), fontsize= 15, rot= 0)\nax.set_ylabel('Counts', fontsize = 15)\nax.set_xlabel('Survived', fontsize = 15)\nplt.show()","99f14111":"%config InlineBackend.figure_format = 'png'\nax = df_train_raw['Age'].plot(kind = 'hist',bins = 20, color = 'indigo',\n                            figsize = (10, 6), fontsize= 15)\nax.set_ylabel('Frequency', fontsize = 15)\nax.set_xlabel('Age', fontsize = 15)\nplt.show()","99d4e2cb":"%config InlineBackend.figure_format = 'png'\nax = df_train_raw.query('Survived == 0')['Age'].plot(kind = 'density',\n                                                    figsize = (10, 6), fontsize = 15)\ndf_train_raw.query('Survived == 1')['Age'].plot(kind = 'density',\n                                               figsize = (10, 6), fontsize = 15)\nax.legend(['Survived = 0', 'Survived == 1'], fontsize = 12)\nax.set_ylabel('Density', fontsize = 15)\nax.set_xlabel('Age', fontsize = 15)\nplt.show()","f22eec1e":"def preprocessing(dfdata):\n    \n    dfresult = pd.DataFrame()\n    #Pclass\n    dfPclass = pd.get_dummies(dfdata['Pclass'])\n    dfPclass.columns = ['Pclass_' +str(x) for x in dfPclass.columns]\n    dfresult = pd.concat([dfresult,dfPclass], axis = 1)\n    \n    #sex\n    dfSex = pd.get_dummies(dfdata['Sex'])\n    dfresult = pd.concat([dfresult, dfSex], axis=1)\n    \n    #Age\n    dfresult['Age'] = dfdata['Age'].fillna(0)\n    dfresult['Age_null'] = pd.isna(dfdata['Age']).astype('int32')\n    \n    #SibSP, Parch, Fare\n    dfresult['SibSp'] = dfdata['SibSp']\n    dfresult['Parch'] = dfdata['Parch']\n    dfresult['Fare'] = dfdata['Fare']\n    \n    #Cabin\n    dfresult['Cabin_null'] = pd.isna(dfdata['Cabin']).astype('int32')\n    \n    #Embarked\n    dfEmbarked = pd.get_dummies(dfdata['Embarked'], dummy_na = True)\n    dfEmbarked.columns = ['Embarked' +str(x) for x in dfEmbarked.columns]\n    dfresult = pd.concat([dfresult, dfEmbarked], axis=1)\n    \n    return(dfresult)\n\nX_train = preprocessing(df_train_raw)\ny_train = df_train_raw['Survived'].values\n\nX_test = preprocessing(df_test_raw)\ny_test = df_sub_raw['Survived'].values\n\nprint('{} {}'.format(('X_train.shape'),(X_train.shape)))\nprint('{} {}'.format(('X_test.shape'),(X_test.shape)))","a9634649":"tf.keras.backend.clear_session()\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(20, activation = 'relu', input_shape=(15,)))\nmodel.add(layers.Dense(10, activation = 'relu'))\nmodel.add(layers.Dense(1, activation = 'sigmoid'))\n\nmodel.summary()","7cca87a5":"model.compile(optimizer = 'adam',\n             loss = 'binary_crossentropy',\n             metrics = [\"AUC\"])\n\nhistory = model.fit(X_train, y_train,\n                   batch_size = 64,\n                   epochs = 30,\n                   validation_split = 0.2\n                   )\n#train for 30, 10, 10, 10 epochs","6b0e30ca":"%config InlineBackend.figure_format = 'svg'\n\ndef plot_metric(history, metric):\n    train_metrics = history.history[metric]\n    val_metrics = history.history['val_' +metric]\n    epochs = range(1, len(train_metrics) + 1)\n    plt.plot(epochs, train_metrics, 'bo--')\n    plt.plot(epochs, val_metrics, 'ro--')\n    plt.title('Training and validation' +metric)\n    plt.xlabel('Epochs')\n    plt.ylabel(metric)\n    plt.legend(['train_'+metric, 'val_'+metric])\n    plt.show()\n    \n","a4ed652e":"plot_metric(history, 'loss')","63f2edfc":"plot_metric(history, 'auc')","9ce8cf6d":"# model evaluating on test data\nmodel.evaluate(x = X_test, y= y_test)","f32e3f98":"#predict possibilites\nmodel.predict(X_test[0:10])","fa889e4d":"#predicting the classes\nmodel.predict_classes(X_test[0:10])","f3cbe9b2":"# saving model\nmodel.save('titanic_model.h5')\n# you can delete model with \"del model\" command\ndel model","6a51ab4b":"#lets load model\nmodel = models.load_model('titanic_model.h5')\nmodel.evaluate(X_test, y_test)","83d17de7":"> Some formal data preprocessing steps","6bff766e":"## Introduction of each field\uff1a\n\n* Survived: 0 for death and 1 for survived [y labels]\n\n* Pclass: Class of the tickets, with three possible values (1,2,3) [converting to one-hot encoding]\n\n* Name: Name of each passenger [discarded]\n\n* Sex: Gender of each passenger [converting to bool type]\n\n* Age: Age of each passenger (partly missing) [numerical feature, should add \"Whether age is missing\" as auxiliary feature]\n\n* SibSp: Number of siblings and spouse of each passenger (interger) [numerical feature]\n\n* Parch: Number of parents\/children of each passenger (interger) [numerical feature]\n\n* Ticket: Ticket number (string) [discarded]\n\n* Fare: Ticket price of each passenger (float, between 0 to 500) [numerical feature]\n\n* Cabin: Cabin where each passenger is located (partly missing) [should add \"Whether cabin is missing\" as auxiliary feature]\n\n* Embarked: Which port was each passenger embarked, possible values are S\u3001C\u3001Q (partly missing) [converting to one-hot encoding, four dimensions, S,C,Q,nan]","1bc26a45":"# Data Preparation\n","797919e1":"## Model Training","842b7af1":"## Model Configuration","3be013bc":"> Correlation between age and survival label:","16d32586":" lets do some intial data analysis with Pandas\n>  Survival label ditribution","81f98d57":"## Prediction\n","87735328":"## Model Evaluation\n","4ffd760b":"> Age Distribution"}}