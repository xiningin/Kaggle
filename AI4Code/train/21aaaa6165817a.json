{"cell_type":{"947e9f49":"code","4e2e49a8":"code","e3e0fe3d":"code","6f4461e7":"code","86208db4":"code","80501675":"code","2a933da1":"code","74d24455":"code","b32962fb":"code","73acd232":"code","3e4f4b6a":"code","2b80fce4":"code","e2b10cd9":"code","69edffb2":"code","86c6a6ed":"code","d1100983":"code","3538c339":"code","bd747007":"code","f280f908":"code","3a7bd24c":"code","4d9ee5f7":"code","e9e9e788":"code","6b11b3de":"code","9be26388":"code","6a969e81":"code","df712da2":"code","607bdad8":"code","3d55e682":"markdown","9a748c87":"markdown","a29a4ec9":"markdown","85372d7c":"markdown","19124fb3":"markdown","3310bf3a":"markdown","b17c3c9c":"markdown","d8612580":"markdown","37ebcf23":"markdown","79f46ce5":"markdown"},"source":{"947e9f49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mpl","4e2e49a8":"files = []","e3e0fe3d":"files.append(pd.read_csv(\"..\/input\/airline-2019\/Jan2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/feb2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/mar2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/apr2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/may2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/june2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/jul2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/aug2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/sept2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/oct2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/nov2019\/405557996_T_ONTIME_REPORTING.csv\"))\nfiles.append(pd.read_csv(\"..\/input\/airline-2019\/dec20219\/405557996_T_ONTIME_REPORTING.csv\"))\n                         \ndf = pd.concat(files)","6f4461e7":"df","86208db4":"df.dtypes","80501675":"#sort by flight date\ndf = df.sort_values(by=['FL_DATE'])","2a933da1":"df","74d24455":"o_city = df['ORIGIN_CITY_NAME'].tolist()","b32962fb":"new_o_city = []\nfor city in o_city:\n    city = city.split(',')[0] #Split by comma and take the first part, which is the full city name\n    new_o_city.append(city)","73acd232":"df['ORIGIN_CITY_NAME'] = new_o_city #Update ORIGIN_CITY_NAME column","3e4f4b6a":"df","2b80fce4":"#Do the same thing on dest city\nd_city = df['DEST_CITY_NAME']\nnew_d_city = []\nfor city in d_city:\n    city = city.split(',')[0]\n    new_d_city.append(city)\n\ndf['DEST_CITY_NAME'] = new_d_city","e2b10cd9":"df","69edffb2":"df['Unnamed: 25'].value_counts(dropna = False)","86c6a6ed":"df.drop('Unnamed: 25', axis = 1, inplace = True)","d1100983":"df","3538c339":"df['CANCELLED'].value_counts(dropna = False)","bd747007":"df['CANCELLATION_CODE'].value_counts(dropna = False)","f280f908":"df[df['CANCELLED'] == 0]['CANCELLATION_CODE'].value_counts(dropna = False)","3a7bd24c":"df[df['CANCELLED'] == 1]['CANCELLATION_CODE'].value_counts(dropna = False)","4d9ee5f7":"df.drop('CANCELLED', axis = 1, inplace = True)","e9e9e788":"df.head()","6b11b3de":"df.shape","9be26388":"df['TOTAL_DELAY'] = df['CARRIER_DELAY'] + df['WEATHER_DELAY'] + df['NAS_DELAY'] + df['SECURITY_DELAY'] + df['LATE_AIRCRAFT_DELAY']","6a969e81":"df_airlines = df.groupby('OP_CARRIER_AIRLINE_ID')['TOTAL_DELAY'].aggregate(np.sum).reset_index()\ndf_airlines.sort_values('TOTAL_DELAY', ascending = False)","df712da2":"df_airport = df.groupby('ORIGIN')['TOTAL_DELAY'].aggregate(np.sum).reset_index()\ndf_airport.sort_values('TOTAL_DELAY', ascending = False)","607bdad8":"df[df['ORIGIN'] == 'ORD'][['ORIGIN', 'ORIGIN_CITY_NAME', 'ORIGIN_STATE_NM']].head()","3d55e682":"# Task3: Check which of the columns are redundant information (i.e. they can easily be computed from the other columns)","9a748c87":"# Task4: Find out the airports and the flight operators which correspond to maximum delay in general.","a29a4ec9":"# Task1: Combine different csv files into a single dataframe","85372d7c":"'Unnamed: 25' column is useless and can be dropped because it consist NaN values only.","19124fb3":"The airport ORD has the maximum delay in general.","3310bf3a":"It seems 'cancelled' column is redundant because if the flight is cancelled there will be a code A,B,C,D in the 'cancellation code' column.\n\nSo, we drop the 'cancelled' column","b17c3c9c":"Let see where is the airport in:","d8612580":"So, The airport ORD in Chicago has the maximum delay in general.","37ebcf23":"The Flight operator with ID 20304 has the maximum delay in general.","79f46ce5":"# Task2: Clean the city_name columns, which also contain the abreviated state names\nCurrently the city_name columns contain abreviated state names, but it is redundant because there are state names in state_name columns."}}