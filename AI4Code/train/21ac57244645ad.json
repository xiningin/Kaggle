{"cell_type":{"41e63d06":"code","868ffc98":"code","7f0dfdf5":"code","0143b81b":"code","a2a48c29":"code","0fec8311":"code","21d0ecf5":"code","7d7793e3":"code","70781222":"code","2fc650f9":"markdown","29cf6d79":"markdown","6b416fa7":"markdown","465660f4":"markdown","b77f1ca6":"markdown","3c68ec55":"markdown","8e420aa6":"markdown","2fd0926c":"markdown","768bbcf7":"markdown","10dffccc":"markdown"},"source":{"41e63d06":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nfrom sympy import isprime, primerange\nimport matplotlib.pyplot as plt\nfrom matplotlib import collections as mc\nfrom concorde.tsp import TSPSolver\nimport time","868ffc98":"cities = pd.read_csv('..\/input\/cities.csv')\ncities['isPrime'] = cities.CityId.apply(isprime)\nprime_cities = cities.loc[cities.isPrime]","7f0dfdf5":"plt.figure(figsize=(16,10))\nplt.subplot(111, adjustable='box', aspect=1.0)\nplt.plot(cities.X, cities.Y, 'k,', alpha=0.3)\nplt.plot(cities.X[0], cities.Y[0], 'bx')\nplt.xlim(0, 5100)\nplt.ylim(0, 3400)\nplt.xlabel('X', fontsize=16)\nplt.ylabel('Y', fontsize=16)\nplt.title('All cities (North Pole = Blue X)', fontsize=18)\nplt.show()","0143b81b":"plt.figure(figsize=(16,10))\nplt.subplot(111, adjustable='box', aspect=1.0)\nplt.plot(cities.X, cities.Y, 'k,', alpha=0.3)\nplt.plot(prime_cities.X, prime_cities.Y, 'r.', markersize=4, alpha=0.3)\nplt.plot(cities.X[0], cities.Y[0], 'bx')\nplt.xlim(0, 5100)\nplt.ylim(0, 3400)\nplt.xlabel('X', fontsize=16)\nplt.ylabel('Y', fontsize=16)\nplt.title('All cities (Primes = Red Dots, North Pole = Blue X)', fontsize=18)\nplt.show()","a2a48c29":"# This function will submit a path to name.csv (with some validity tests)\ndef make_submission(name, path):\n    assert path[0] == path[-1] == 0\n    assert len(set(path)) == len(path) - 1 == 197769\n    pd.DataFrame({'Path': path}).to_csv(f'{name}.csv', index=False)\n\n# Fast score calculator given a path\ndef score_path(path):\n    cities = pd.read_csv('..\/input\/cities.csv', index_col=['CityId'])\n    pnums = [i for i in primerange(0, 197770)]\n    path_df = cities.reindex(path).reset_index()\n    \n    path_df['step'] = np.sqrt((path_df.X - path_df.X.shift())**2 + \n                              (path_df.Y - path_df.Y.shift())**2)\n    path_df['step_adj'] = np.where((path_df.index) % 10 != 0,\n                                   path_df.step,\n                                   path_df.step + \n                                   path_df.step*0.1*(~path_df.CityId.shift().isin(pnums)))\n    return path_df.step_adj.sum()","0fec8311":"def nearest_neighbour():\n    cities = pd.read_csv(\"..\/input\/cities.csv\")\n    ids = cities.CityId.values[1:]\n    xy = np.array([cities.X.values, cities.Y.values]).T[1:]\n    path = [0,]\n    while len(ids) > 0:\n        last_x, last_y = cities.X[path[-1]], cities.Y[path[-1]]\n        dist = ((xy - np.array([last_x, last_y]))**2).sum(-1)\n        nearest_index = dist.argmin()\n        path.append(ids[nearest_index])\n        ids = np.delete(ids, nearest_index, axis=0)\n        xy = np.delete(xy, nearest_index, axis=0)\n    path.append(0)\n    make_submission('nearest_neighbour', path)\n    return path\n\n#path_nn = nearest_neighbour()","21d0ecf5":"def concorde_tsp(seed=42):\n    cities = pd.read_csv('..\/input\/cities.csv')\n    solver = TSPSolver.from_data(cities.X, cities.Y, norm=\"EUC_2D\")\n    tour_data = solver.solve(time_bound=60.0, verbose=True, random_seed=seed)\n    if tour_data.found_tour:\n        path = np.append(tour_data.tour,[0])\n        make_submission('concorde', path)\n        return path\n    else:\n        return None\n\npath_cc = concorde_tsp()","7d7793e3":"cities = pd.read_csv('..\/input\/cities.csv')\ncities['isPrime'] = cities.CityId.apply(isprime)\nprime_cities = cities.loc[(cities.CityId == 0) | (cities.isPrime)]\nsolver = TSPSolver.from_data(prime_cities.X, prime_cities.Y, norm=\"EUC_2D\")\ntour_data = solver.solve(time_bound=5.0, verbose=True, random_seed=42)\nprime_path = np.append(tour_data.tour,[0])","70781222":"plt.figure(figsize=(16,10))\nax = plt.subplot(111, adjustable='box', aspect=1.0)\nax.plot(cities.X, cities.Y, 'k,', alpha=0.3)\n\nlines = [[(prime_cities.X.values[prime_path[i]],\n           prime_cities.Y.values[prime_path[i]]),\n          (prime_cities.X.values[prime_path[i+1]],\n           prime_cities.Y.values[prime_path[i+1]])]\n         for i in range(0, len(prime_cities))]\nlc = mc.LineCollection(lines, linewidths=1, colors='r')\nax.add_collection(lc)\n\nax.plot(cities.X[0], cities.Y[0], 'bx')\nplt.xlim(0, 5100)\nplt.ylim(0, 3400)\n\nplt.xlabel('X', fontsize=16)\nplt.ylabel('Y', fontsize=16)\nplt.title('All cities (Prime Path = Red, North Pole = Blue X)', fontsize=18)\nplt.show()","2fc650f9":"# 0. Setup + Exploration\n\nUsing `sympy` for primality test and prime finding functions. Installed package from GitHub repo **jvkersch\/pyconcorde** for the Concorde TSP Solver. `numpy` and `pandas` for basic numerical and data processing needs.","29cf6d79":"## Helper Functions","6b416fa7":"## Visualizing the World\n\nThe world goes from (0,0) to about (5100, 3400) and consists of 197769 cities (with 17802 prime cities). 9% of cities are prime.\nThere appears to be no correlation between `CityId` and the `X, Y` coordinates of a city.","465660f4":"# 2. Concorde TSP Solver","b77f1ca6":"Setting up dataframes with an additional `isPrime` tag","3c68ec55":"The prime cities seem to be randomly spread around as well.","8e420aa6":"# 1. Nearest Neighbour\n\nStarting from the North Pole, travel to the nearest city (without concern for prime-ness of a city).","2fd0926c":"# 3. Concorde Solver for only Prime Cities\n\nPerhaps, we can get a more efficient TSP solution if we only use the prime cities (since there are fewer prime cities) and then look into filling in the gaps with non-prime cities.","768bbcf7":"The Concorde solver achieves a score of **1533176.80** (only using the initial steps of the Concorde solver, because the subsequent steps take too long).\n\n***Note:*** The Concorde solver doesn't like halting once it goes past the initial solving stage, regardless of the time bound set. However, the difference between letting it run and halting it in 60 seconds is a matter of a few percent in efficiency.","10dffccc":"This approach achieves a score of **1812602.18**."}}