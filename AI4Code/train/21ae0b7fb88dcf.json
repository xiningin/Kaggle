{"cell_type":{"a334d985":"code","9c9d80dd":"code","176782e9":"code","0f7a5da1":"code","44e39c9d":"code","d85d378b":"code","c592057f":"code","cd23116e":"code","47daaeb8":"code","a5e928ad":"code","f7f83201":"code","5fe51486":"code","2a2a5877":"code","c877e1af":"code","4ff402a1":"code","914673c8":"code","43c91fd4":"code","5bfad4e9":"markdown","cda15cce":"markdown"},"source":{"a334d985":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport numpy as np\nfrom matplotlib import pyplot\nimport sklearn as sk\nfrom tensorflow.keras.layers.experimental import preprocessing","9c9d80dd":"# importing the data to a dataframe \ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/alexcpn\/neuralnetwork_learn\/main\/data\/heart-attack-prediction\/heart.csv\")  \nSAMPLE_SIZE = len(df.index)","176782e9":"#Lets use output or target as preiction label\n\n# Specify the data 3 skip the quality out for y\nX= df.loc[:, :'thall']\ny = df.loc[:,['output']]\nprint(X.head())\nprint(y.head())\nprint(\"shape of X\",X.to_numpy().shape)\nprint(\"shape of y\",y.to_numpy().shape)","0f7a5da1":"# Scale the Feature data\nscaler = sk.preprocessing.StandardScaler().fit(X)\nX_s = scaler.transform(X)\n# Convert the  validation data \nnum_classes = 2\ny_s = keras.utils.to_categorical(y, num_classes) # category - 0 or 1","44e39c9d":"print(\"shape of X_s\",X_s.shape)\nprint(\"shape of y_s\",y_s.shape)\nprint(\"X_s\",X_s[1])\nprint(\"y_s\",y_s[1])\n# Preprocess the data (these are NumPy arrays)\nX_s = X_s.reshape(SAMPLE_SIZE, 13).astype(\"float32\") \ny_s = y_s.reshape(SAMPLE_SIZE, 2).astype(\"float32\") \nprint(\"shape of X_s\",X_s.shape)\nprint(\"shape of y_s\",y_s.shape)\nprint(\"X_s\",X_s[1])\nprint(\"y_s\",y_s[1])","d85d378b":"dataset = tf.data.Dataset.from_tensor_slices((X_s, y_s))","c592057f":"for element in dataset:\n  print(element)\n  break","cd23116e":"train_size = int(0.7 * SAMPLE_SIZE)\nval_size = int(0.15 * SAMPLE_SIZE)\ntest_size = int(0.15 * SAMPLE_SIZE)\nprint(\"train_size=\",train_size,\"val_size=\",val_size,\"test_size=\",test_size)\ndataset = dataset.shuffle(SAMPLE_SIZE)\n\ntrain_dataset = dataset.take(train_size)\ntest_dataset = dataset.skip(train_size)\nval_dataset = test_dataset.skip(val_size)\ntest_dataset = test_dataset.take(test_size)\n\n# for tf data set batch size is given here\nbatch_size = 128\ntrain_dataset = train_dataset.shuffle(buffer_size=1024).batch(batch_size)\ntest_dataset = test_dataset.shuffle(buffer_size=1024).batch(batch_size)\nval_dataset = val_dataset.shuffle(buffer_size=1024).batch(batch_size)","47daaeb8":"print(test_dataset)\nfor element in test_dataset:\n  print((element[0][0]).numpy())\n  print((element[1][0]).numpy())\n  break\n#ds = test_dataset.as_numpy_iterator()\n#print(list(ds))","a5e928ad":"#https:\/\/stackoverflow.com\/questions\/47435526\/what-is-the-meaning-of-axis-1-in-keras-argmax\n\ninputs = keras.Input(shape=(13,), name=\"inputs\")\nflat = keras.layers.Flatten()(inputs)\nx = layers.Dense(64, activation=\"relu\", name=\"dense_1\")(flat)\nx = layers.Dense(64, activation=\"relu\", name=\"dense_2\")(x)\noutputs = layers.Dense(2, activation=\"softmax\", name=\"predictions\")(x)\nmodel = keras.Model(inputs=inputs, outputs=outputs)\n\noptimizer = \"adam\"\nloss=\"categorical_crossentropy\" \nmertics_key = \"accuracy\"\nepochs = 100 ","f7f83201":"model.compile( loss=loss, optimizer=optimizer, metrics=[mertics_key])\n","5fe51486":"tf.keras.backend.clear_session()\n# Train the model          \nhistory =model.fit(train_dataset, epochs=epochs,verbose=0,validation_data=val_dataset)\nmodel.save_weights('hearattack-prediction.h5')\n#print(history.history[mertics_key])\n#pyplot.plot(history.history['loss'])\n#pyplot.plot(history.history['val_loss'])\npyplot.plot(history.history['accuracy'])\npyplot.plot(history.history['val_accuracy'])\npyplot.title('model accuracy')\npyplot.ylabel('accuracy')\npyplot.xlabel('epoch')\npyplot.legend(['train-acc', 'val-acc'], loc='upper left')\npyplot.show()","2a2a5877":"pyplot.plot(history.history['loss'])\npyplot.plot(history.history['val_loss'])\npyplot.title('model loss')\npyplot.ylabel('loss')\npyplot.xlabel('epoch')\npyplot.legend(['train', 'val'], loc='upper left')\npyplot.show()","c877e1af":"score = model.evaluate(test_dataset, verbose = 1) \nprint('Test loss:', score[0]) \nprint('Test accuracy:', score[1])\n","4ff402a1":"np.set_printoptions(precision=2)\nnp.set_printoptions(suppress=True)\n# what we want is something like test loss, test acc: [0.14795634150505066, 0.9563999772071838]\nn=1\nk= X_s[np.newaxis,n,::]\nprint(\"X_test_s\",k)\nj = y_s[n]\nprint(\"original list\",j)\npred = model.predict(k)\nprint(\"original\",j[1],\"Prediction \",np.argmax(pred))\nprint(\"Prediction List\",pred)","914673c8":"n=2\nk= X_s[np.newaxis,n,::]\nprint(X_s[n])\nprint(k)\nj = y_s[n]\npred = model.predict(k)\nprint(\"original\",j[1],\"Prediction \",np.argmax(pred))\nprint(\"Prediction List\",pred)\nn=300\nk= X_s[np.newaxis,n,::]\nj = y_s[n]\npred = model.predict(k)\nprint(\"original\",j[1],\"Prediction \",np.argmax(pred))\nprint(\"Prediction List\",pred)","43c91fd4":"print(test_dataset)\nfor element in test_dataset:\n  k = (element[0][0]).numpy()\n  j = (element[1][0]).numpy()\n  print(k.shape)\n  print(j.shape)\n  print(k[np.newaxis,::].shape)\n  n=2\n  pred = model.predict(k[np.newaxis,::])\n  print(\"original\",j[1],\"Prediction \",np.argmax(pred))\n  print(\"Prediction List\",pred)\n  break\n","5bfad4e9":"<a href=\"https:\/\/colab.research.google.com\/gist\/alexcpn\/fa8b3207fbc72f471bdb72433102344c\/heartattack-prediction-tfdata.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","cda15cce":"From https:\/\/www.kaggle.com\/rashikrahmanpritom\/heart-attack-analysis-prediction-dataset\n\nAbout this dataset\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\nca: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\n\nValue 1: typical angina\nValue 2: atypical angina\nValue 3: non-anginal pain\nValue 4: asymptomatic\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrest_ecg : resting electrocardiographic results\n\nValue 0: normal\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\nthalach : maximum heart rate achieved\n\ntarget\/output : 0= less chance of heart attack 1= more chance of heart attack"}}