{"cell_type":{"6093243b":"code","557c6b0a":"code","357d79d8":"code","4ce62dbe":"code","2d9d5e0b":"code","73d2a1bd":"code","9598d262":"code","b86491dc":"code","faf6ade9":"code","fca0895e":"code","5b9bcc3b":"code","cc62559c":"code","7a83089e":"code","fb3b46be":"code","790a7ee4":"code","542f18d3":"code","055b6060":"code","a95f84e2":"code","90e52794":"code","6dc14843":"code","17c92b46":"code","ebc314d8":"code","112c02c5":"code","a08d97ac":"code","4df8a684":"code","b9c8d39a":"code","6f16a1a8":"code","e47ba405":"code","ebe7ff63":"code","2255b493":"code","0501a71a":"code","8605b0c5":"code","f7a4227b":"code","dd052406":"code","5cbab2dc":"code","642b8f19":"code","bd0417fe":"code","8d0b4e04":"code","4781b4f9":"code","cdcfa30f":"code","9ffa1f7b":"code","649a6e73":"code","6ea17253":"code","904b7b9b":"code","92b21294":"code","97f5d706":"code","0cf8d602":"code","80259dbc":"code","d23bd170":"code","0b9ed0f2":"code","bfd32f97":"code","3f0b0ae0":"code","7cbb1e1c":"code","e1274c76":"code","fef8b1ae":"code","0d5acfb9":"code","4d631465":"code","43e5821f":"code","695b1a0c":"code","6605b4d2":"code","d9e5c8f3":"code","1d27a6e3":"code","c4d3f271":"code","f881619d":"code","e6802c8f":"code","67db2ba8":"code","181bbf1d":"code","c58c9ae0":"code","864a9178":"markdown","01e3fa11":"markdown","a431a6e2":"markdown","31394fbb":"markdown","a01cee25":"markdown","9cb08cac":"markdown","fab4211b":"markdown","d43e2f66":"markdown"},"source":{"6093243b":"#image display\nfrom IPython.display import Image\nImage(\"..\/input\/fifa20image\/960.jpg\")","557c6b0a":"# import libraries for basic operations\nimport numpy as np\nimport pandas as pd \n\n# import libraries for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')","357d79d8":"# import file and show computation time\n%time data = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv')","4ce62dbe":"data.shape","2d9d5e0b":"data.info()","73d2a1bd":"data.head()","9598d262":"data.describe()","b86491dc":"# view particular column in the dataset\ndata['club'].head()","faf6ade9":"# number of clubs in the dataset\nlen(data['club'].unique())","fca0895e":"# view clubs in the dataset\nprint(data['club'].unique())","5b9bcc3b":"# view all columns\nfor col in data.columns:\n    print(col)","cc62559c":"# view particular club data\ndef club(x):\n    return data[data['club'] == x][['short_name','team_jersey_number','player_positions','overall','nationality','age','wage_eur',\n                                    'value_eur','contract_valid_until']]\n\nclub('FC Barcelona')","7a83089e":"# column shape\nx = club('FC Barcelona')\nx.shape","fb3b46be":"# number of players in club\nprint(len(club('FC Barcelona')))","790a7ee4":"# minimum of a column\ndata['release_clause_eur'].min() #max,mean","542f18d3":"# checking if the data contains any NULL value and printing to list\ndata_na=data.columns[data.isna().any()].tolist()\nprint(\"List of cloumns with missing values\",\"\\n\\n\",data_na)","055b6060":"# printing sum of missing values\ndata.isnull().sum()","a95f84e2":"# visualizing missing values\nallna = (data.isnull().sum() \/ len(data))*100\nallna = allna.drop(allna[allna == 0].index).sort_values()\nplt.figure(figsize=(15, 10))\nallna.plot.barh(color=('red', 'black'), edgecolor='black')\nplt.title('Missing values percentage per column', fontsize=15, weight='bold' )\nplt.xlabel('Percentage', size=15)\nplt.ylabel('Features with missing values')\nplt.yticks()\nplt.show()","90e52794":"# grouping missing values into categorical and numerical value \nNA=data[['release_clause_eur','player_tags','team_position','team_jersey_number',\n'loaned_from','joined','contract_valid_until','nation_position','nation_jersey_number','pace',\n'shooting','passing','dribbling','defending','physic',\n'gk_diving','gk_handling','gk_kicking','gk_reflexes','gk_speed','gk_positioning','player_traits','ls','st','rs','lw',\n'lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm','cdm','rdm','rwb','lb','lcb','cb','rcb','rb']]\nNAcat=NA.select_dtypes(include='object')\nNAnum=NA.select_dtypes(exclude='object')\nprint(NAcat.shape[1],'categorical features with missing values')\nprint(NAnum.shape[1],'numerical features with missing values')","6dc14843":"# sum of Na value in a column before filling\ndata['release_clause_eur'].isnull().sum()","17c92b46":"# filling the missing value for the continous variables for proper data visualization\ndata['release_clause_eur'].fillna(0,inplace=True)\ndata['player_tags'].fillna('#Team Player',inplace=True)\ndata['team_position'].fillna('Not Decided',inplace=True)                                  \ndata['team_jersey_number'].fillna(0,inplace=True)\ndata['loaned_from'].fillna('Disclosed',inplace=True)\ndata['joined'].fillna('Disclosed',inplace=True)\ndata['contract_valid_until'].fillna('Disclosed',inplace=True)\ndata['nation_position'].fillna('Not Decided',inplace=True)\ndata['nation_jersey_number'].fillna(0,inplace=True)\ndata['pace'].fillna(data['pace'].mean(),inplace=True)\ndata['shooting'].fillna(data['shooting'].mean(),inplace=True)\ndata['passing'].fillna(data['passing'].mean(),inplace=True)\ndata['dribbling'].fillna(data['dribbling'].mean(),inplace=True)\ndata['defending'].fillna(data['defending'].mean(),inplace=True)\ndata['physic'].fillna(data['physic'].mean(),inplace=True)\ndata['gk_diving'].fillna(data['gk_diving'].mean(),inplace=True)\ndata['gk_handling'].fillna(data['gk_handling'].mean(),inplace=True)\ndata['gk_kicking'].fillna(data['gk_kicking'].mean(),inplace=True)\ndata['gk_reflexes'].fillna(data['gk_reflexes'].mean(),inplace=True)\ndata['gk_speed'].fillna(data['gk_speed'].mean(),inplace=True)\ndata['gk_positioning'].fillna(data['gk_positioning'].mean(),inplace=True)\ndata['player_traits'].fillna('Not Analyzed',inplace=True)\ndata['ls'].fillna('Not Analyzed',inplace=True)\ndata['st'].fillna('Not Analyzed',inplace=True)\ndata['rs'].fillna('Not Analyzed',inplace=True)\ndata['lw'].fillna('Not Analyzed',inplace=True)\ndata['lf'].fillna('Not Analyzed',inplace=True)\ndata['cf'].fillna('Not Analyzed',inplace=True)\ndata['rf'].fillna('Not Analyzed',inplace=True)\ndata['rw'].fillna('Not Analyzed',inplace=True)\ndata['lam'].fillna('Not Analyzed',inplace=True)\ndata['cam'].fillna('Not Analyzed',inplace=True)\ndata['ram'].fillna('Not Analyzed',inplace=True)\ndata['lm'].fillna('Not Analyzed',inplace=True)\ndata['lcm'].fillna('Not Analyzed',inplace=True)\ndata['cm'].fillna('Not Analyzed',inplace=True)\ndata['rcm'].fillna('Not Analyzed',inplace=True)\ndata['rm'].fillna('Not Analyzed',inplace=True)\ndata['lwb'].fillna('Not Analyzed',inplace=True)\ndata['ldm'].fillna('Not Analyzed',inplace=True)\ndata['cdm'].fillna('Not Analyzed',inplace=True)\ndata['rdm'].fillna('Not Analyzed',inplace=True)\ndata['rwb'].fillna('Not Analyzed',inplace=True)\ndata['lb'].fillna('Not Analyzed',inplace=True)\ndata['lcb'].fillna('Not Analyzed',inplace=True)\ndata['cb'].fillna('Not Analyzed',inplace=True)\ndata['rcb'].fillna('Not Analyzed',inplace=True)\ndata['rb'].fillna('Not Analyzed',inplace=True)","ebc314d8":"data.fillna(0, inplace = True)","112c02c5":"# view sum of Na value in column after filling\ndata['release_clause_eur'].isnull().sum()","a08d97ac":"# checking if the data contains any NULL value after filling Na values\ndata_na_after=data.columns[data.isna().any()].tolist()\ndata_na_after","4df8a684":"# functions to categorize features\ndef defending(data):\n    return int(round((data[['defending_marking', 'defending_standing_tackle', \n                               'defending_sliding_tackle']].mean()).mean()))\ndef mental(data):\n    return int(round((data[['mentality_aggression', 'mentality_interceptions', 'mentality_positioning', \n                               'mentality_vision','mentality_composure']].mean()).mean()))\ndef passing(data):\n    return int(round((data[['attacking_crossing', 'attacking_short_passing', \n                               'skill_long_passing']].mean()).mean()))\ndef mobility(data):\n    return int(round((data[['movement_acceleration', 'movement_sprint_speed', \n                               'movement_agility','movement_reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['movement_balance', 'power_jumping', 'power_stamina', \n                               'power_strength']].mean()).mean()))\ndef rating(data):\n    return int(round((data[['potential', 'overall']].mean()).mean()))\ndef shooting(data):\n    return int(round((data[['attacking_finishing', 'attacking_volleys', 'skill_fk_accuracy', \n                               'power_shot_power','power_long_shots', 'mentality_penalties']].mean()).mean()))","b9c8d39a":"# adding newly created categories(columns) to the dataset\n\ndata['cat_defending'] = data.apply(defending, axis = 1)\ndata['cat_mental'] = data.apply(mental, axis = 1)\ndata['cat_passing'] = data.apply(passing, axis = 1)\ndata['cat_mobility'] = data.apply(mobility, axis = 1)\ndata['cat_power'] = data.apply(power, axis = 1)\ndata['cat_rating'] = data.apply(rating, axis = 1)\ndata['cat_shooting'] = data.apply(shooting, axis = 1)","6f16a1a8":"# creating sub dataframe using the newly created columns\n\nplayers = data[['short_name','cat_defending','cat_mental','cat_passing',\n                'cat_mobility','cat_power','cat_rating','cat_shooting','age',\n                'nationality', 'club']]\n\nplayers.head()","e47ba405":"# visualize comparison of preferred foot over the different players\nplt.rcParams['figure.figsize'] = (18, 8)\nsns.countplot(data['preferred_foot'], palette = 'pink')\nplt.title('Most Preferred Foot of the Players', fontsize = 20)\nplt.show()","ebe7ff63":"# plotting a pie chart to represent share of international repuatation\nlabels = ['1', '2', '3', '4', '5']\nsizes = data['international_reputation'].value_counts()\ncolors = plt.cm.copper(np.linspace(0, 1, 5))\nexplode = [0.1, 0.1, 0.2, 0.5, 0.9]\n\nplt.rcParams['figure.figsize'] = (8, 8)\nplt.pie(sizes, labels = labels, colors = colors, explode = explode, shadow = True)\nplt.title('International Repuatation for the Football Players', fontsize = 20)\nplt.legend()\nplt.show()","2255b493":"# visualize different team positions acquired by the players \nplt.figure(figsize = (18, 8))\nplt.style.use('fivethirtyeight')\nax = sns.countplot('team_position', data = data, palette = 'bone')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","0501a71a":"# visualize Players' Wages\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['wage_eur'], color = 'blue')\nplt.xlabel('Wage Range for Players', fontsize = 16)\nplt.ylabel('Count of the Players', fontsize = 16)\nplt.title('Distribution of Wages of Players', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","8605b0c5":"# visualize Skill Moves of Players\nplt.figure(figsize = (10, 8))\nax = sns.countplot(x = 'skill_moves', data = data, palette = 'pastel')\nax.set_title(label = 'Count of players on Basis of their skill moves', fontsize = 20)\nax.set_xlabel(xlabel = 'Number of Skill Moves', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","f7a4227b":"# visualize Height of Players\nplt.figure(figsize = (25,8))\nax = sns.countplot(x = 'height_cm', data = data, palette = 'dark')\nax.set_title(label = 'Count of players on Basis of Height', fontsize = 20)\nax.set_xlabel(xlabel = 'Height(cm)', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","dd052406":"# visualize Weight of Players\nplt.figure(figsize = (25,8))\nax = sns.countplot(x = 'weight_kg', data = data, palette = 'dark')\nax.set_title(label = 'Count of players on Basis of Weight', fontsize = 20)\nax.set_xlabel(xlabel = 'Weight(kg)')\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","5cbab2dc":"# visualize Different Work rate of the players participating in the FIFA 2020\n\nplt.figure(figsize = (15, 7))\nplt.style.use('_classic_test_patch')\n\nsns.countplot(x = 'work_rate', data = data, palette = 'hls')\nplt.title('Different work rates of the Players Participating in the FIFA 2020', fontsize = 20)\nplt.xlabel('Work rates associated with the players', fontsize = 16)\nplt.ylabel('Count of players', fontsize = 16)\nplt.show()","642b8f19":"# visualize Different potential scores of the players participating in the FIFA 2019\n\nx = data.potential\nplt.figure(figsize=(12,8))\nplt.style.use('seaborn-paper')\n\nax = sns.distplot(x, bins = 58, kde = False, color = 'y')\nax.set_xlabel(xlabel = \"Player\\'s Potential Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Potential Scores', fontsize = 20)\nplt.show()","bd0417fe":"# visualize Different overall scores of the players participating in the FIFA 2020\n\nsns.set(style = \"dark\", palette = \"deep\", color_codes = True)\nx = data.overall\nplt.figure(figsize = (12,8))\nplt.style.use('ggplot')\n\nax = sns.distplot(x, bins = 52, kde = False, color = 'r')\nax.set_xlabel(xlabel = \"Player\\'s Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Overall Scores', fontsize = 20)\nplt.show()","8d0b4e04":"# visualize Different nations participating in the FIFA 2020\n\nplt.style.use('dark_background')\ndata['nationality'].value_counts().head(80).plot.bar(color = 'orange', figsize = (20, 7))\nplt.title('Different Nations Participating in FIFA 2020', fontsize = 30, fontweight = 20)\nplt.xlabel('Name of The Country')\nplt.ylabel('count')\nplt.show()","4781b4f9":"# visualize Players' age\n\nsns.set(style = \"dark\", palette = \"colorblind\", color_codes = True)\nx = data.age\nplt.figure(figsize = (15,8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'g')\nax.set_xlabel(xlabel = \"Player\\'s age\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players\\' age', fontsize = 20)\nplt.show()","cdcfa30f":"# visualize violin plot \n\nplt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(data['overall'], data['age'], hue = data['preferred_foot'], palette = 'Greys')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","9ffa1f7b":"# visualize bubble plot\n\nplt.rcParams['figure.figsize'] = (20, 7)\nplt.scatter(data['overall'], data['international_reputation'], s = data['age']*1000, c = 'pink')\nplt.xlabel('Overall Ratings', fontsize = 20)\nplt.ylabel('International Reputation', fontsize = 20)\nplt.title('Ratings vs Reputation', fontweight = 20, fontsize = 20)\n#plt.legend('Age', loc = 'upper left')\nplt.show()","649a6e73":"# selecting some of the interesting and important columns from the set of columns in the given dataset\n\nselected_columns = ['short_name', 'age', 'nationality', 'overall', 'potential', 'club', 'value_eur',\n                    'wage_eur', 'preferred_foot', 'international_reputation', 'weak_foot',\n                    'skill_moves', 'work_rate', 'body_type', 'team_position', 'height_cm', 'weight_kg ',\n                    'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing',\n                    'attacking_volleys', 'skill_dribbling','movement_acceleration','power_shot_power',\n                    'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', \n                    'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', \n                    'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression',\n                    'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', \n                    'defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving',\n                    'goalkeeping_handling',\n                    'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'release_clause_eur','mentality_composure']\ndata_selected = pd.DataFrame(data, columns = selected_columns)\ndata_selected.columns","6ea17253":"# having a look at the sample of selected data\n\ndata_selected.sample(5)","904b7b9b":"# plotting a correlation heatmap\n\nplt.rcParams['figure.figsize'] = (30, 20)\nsns.heatmap(data_selected[['short_name', 'age', 'nationality', 'overall', 'potential', 'club', 'value_eur',\n                    'wage_eur', 'preferred_foot', 'international_reputation', 'weak_foot',\n                    'skill_moves', 'work_rate', 'body_type', 'team_position', 'height_cm',\n                    'attacking_finishing', 'attacking_heading_accuracy', 'attacking_short_passing',\n                    'attacking_volleys', 'skill_dribbling','power_shot_power',\n                    'skill_curve', 'skill_fk_accuracy', 'skill_long_passing', 'skill_ball_control', \n                    'movement_sprint_speed', 'movement_agility', 'movement_reactions', 'movement_balance', \n                    'power_jumping', 'power_stamina', 'power_strength', 'power_long_shots', 'mentality_aggression',\n                    'mentality_interceptions', 'mentality_positioning', 'mentality_vision', 'mentality_penalties', \n                    'defending_marking', 'defending_standing_tackle', 'defending_sliding_tackle', 'goalkeeping_diving',\n                    'goalkeeping_handling',\n                    'goalkeeping_kicking', 'goalkeeping_positioning', 'goalkeeping_reflexes', 'release_clause_eur','mentality_composure']].corr(), annot = True)\nplt.title('Correlation between features', fontsize = 30)\nplt.show()","92b21294":"# best players per each position with their age, club, and nationality based on their overall scores\n\ndata.iloc[data.groupby(data['team_position'])['overall'].idxmax()][['team_position', 'short_name', 'age', 'club', 'nationality']]","97f5d706":"# best players from each positions with their age, nationality, club based on their potential scores\n\ndata.iloc[data.groupby(data['team_position'])['potential'].idxmax()][['team_position', 'short_name', 'age', 'club', 'nationality']]","0cf8d602":"# picking up the countries with highest number of players to compare their overall scores\n\ndata['nationality'].value_counts().head(8)","80259dbc":"# Every Nations' Player and their Weights\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['nationality'].isin(some_countries) & data['weight_kg']]\n\nplt.rcParams['figure.figsize'] = (15, 7)\nax = sns.violinplot(x = data_countries['nationality'], y = data_countries['weight_kg'], palette = 'Reds')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in kg', fontsize = 9)\nax.set_title(label = 'Distribution of Weight of players from different countries', fontsize = 20)\nplt.show()","d23bd170":"# Every Nations' Player and their overall scores\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['nationality'].isin(some_countries) & data['overall']]\n\nplt.rcParams['figure.figsize'] = (15, 7)\nax = sns.barplot(x = data_countries['nationality'], y = data_countries['overall'], palette = 'spring')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Scores', fontsize = 9)\nax.set_title(label = 'Distribution of overall scores of players from different countries', fontsize = 20)\nplt.show()","0b9ed0f2":"# Every Nations' Player and their International Reputation\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['nationality'].isin(some_countries) & data['international_reputation']]\n\nplt.rcParams['figure.figsize'] = (15, 7)\nax = sns.boxenplot(x = data_countries['nationality'], y = data_countries['international_reputation'], palette = 'autumn')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Distribution of reputation', fontsize = 9)\nax.set_title(label = 'Distribution of International Repuatation of players from different countries', fontsize = 15)\nplt.show()","bfd32f97":"# finding the the popular clubs around the globe\ndata['club'].value_counts().head(10)","3f0b0ae0":"# visualize distribution of Overall Score in Different popular Clubs\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['club'].isin(some_clubs) & data['overall']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.boxplot(x = data_clubs['club'], y = data_clubs['overall'], palette = 'autumn')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)\nax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","7cbb1e1c":"# Distribution of international reputation in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['club'].isin(some_clubs) & data['international_reputation']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.violinplot(x = 'club', y = 'international_reputation', data = data_club, palette = 'autumn')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution of Reputation', fontsize = 10)\nax.set_title(label = 'Disstribution of International Reputation in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","e1274c76":"#distribution in weights in popular clubs\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['club'].isin(some_clubs) & data['weight_kg']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.violinplot(x = 'club', y = 'weight_kg', data = data_clubs, palette = 'PuBu')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight in Different popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","fef8b1ae":"# finding 15 youngest Players from the dataset\n\nyoungest = data.sort_values('age', ascending = True)[['short_name', 'age', 'club', 'nationality']].head(15)\nprint(youngest)","0d5acfb9":"# finding 15 eldest players from the dataset\n\neldest = data.sort_values('age', ascending = False)[['short_name', 'age', 'club', 'nationality']].head(15)\nprint(eldest)","4d631465":"# checking the head of the joined column\n\ndata['joined'].head()","43e5821f":"# defining the features of players\n\nplayer_features = ('movement_acceleration', 'mentality_aggression', 'movement_agility', \n                   'movement_balance', 'skill_ball_control', 'mentality_composure', \n                   'attacking_crossing', 'skill_dribbling', 'skill_fk_accuracy', \n                   'attacking_finishing', 'gk_diving', 'gk_handling', \n                   'gk_kicking', 'gk_positioning', 'gk_reflexes', \n                   'attacking_heading_accuracy', 'mentality_interceptions', 'power_jumping', \n                   'skill_long_passing', 'power_long_shots', 'defending_marking', 'mentality_penalties')\n\n# Top four features for every position in football\n\nfor i, val in data.groupby(data['player_positions'])[player_features].mean().iterrows():\n    print('player_positions {}: {}, {}, {}'.format(i, *tuple(val.nlargest(4).index)))","695b1a0c":"from math import pi\n\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in data.groupby(data['player_positions'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(9, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","6605b4d2":"# Top 10 left footed footballers\n\ndata[data['preferred_foot'] == 'Left'][['short_name', 'age', 'club', 'nationality']].head(10)","d9e5c8f3":"# Top 10 Right footed footballers\n\ndata[data['preferred_foot'] == 'Right'][['short_name', 'age', 'club', 'nationality']].head(10)","1d27a6e3":"# comparing the performance of left-footed and right-footed footballers\n# ballcontrol vs dribbing\n\nsns.lmplot(x = 'skill_ball_control', y = 'skill_dribbling', data = data, col = 'preferred_foot')\nplt.show()","c4d3f271":"# visualizing clubs with highest number of different countries\n\ndata.groupby(data['club'])['nationality'].nunique().sort_values(ascending = False).head(10)","f881619d":"# visualizing clubs with highest number of different countries\n\ndata.groupby(data['club'])['nationality'].nunique().sort_values(ascending = True).head(10)","e6802c8f":"sns.lineplot(data['age'], data['cat_rating'], palette = 'Wistia')\nplt.title('Age vs Rating', fontsize = 20)\n\nplt.show()","67db2ba8":"import plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\n\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go","181bbf1d":"rating = pd.DataFrame(data.groupby(['nationality'])['overall'].sum().reset_index())\ncount = pd.DataFrame(rating.groupby('nationality')['overall'].sum().reset_index())\n\ntrace = [go.Choropleth(\n            colorscale = 'YlOrRd',\n            locationmode = 'country names',\n            locations = count['nationality'],\n            text = count['nationality'],\n            z = count['overall'],\n)]\n\nlayout = go.Layout(title = 'Country vs Overall')\n\nfig = go.Figure(data = trace, layout = layout)\npy.iplot(fig)","c58c9ae0":"# function to check details of a player using id\n\ndef playerdata(x):\n    return data.loc[x,:]\n\nx = playerdata(0)  #lionel messi, id = 0.\npd.set_option('display.max_rows', 200)\nx = pd.DataFrame(x)\nprint(x)","864a9178":"FIFA 20 is a football simulation video game published by Electronic Arts as part of the FIFA series.It is the 27th installment in the FIFA series, and was released on 27 September 2019 for Microsoft Windows, PlayStation 4, Xbox One, and Nintendo Switch.\n![](https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Fwww.firstpost.com%2Ftech%2Fgaming%2Ffifa-20-talks-football-intelligence-brings-back-street-style-volta-football-mode-6779391.html&psig=AOvVaw0twD0xH1p28b_C0qgcXXjK&ust=1592847272493000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCJiYpLS4k-oCFQAAAAAdAAAAABAJ)","01e3fa11":"# FIFA 20 Data Visualization","a431a6e2":"### 4. Visualization\n<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#100)","31394fbb":"### 3. Data Cleaning\n<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#100)","a01cee25":"### 1. Importing Libraries and File\n<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#100)","9cb08cac":"<a class=\"anchor\" id=\"100\"><\/a>\n\n## Table of Contents\n\n1. [Import libraries](#1)\n2. [Dataframe Operations](#2)\n3. [Data Cleaning](#3)\n4. [Visualization](#4)\n    -  [countplot](#4.1)\n    -  [pie chart](#4.2)","fab4211b":"### This notebook is updated everyday to improvise and include more content <p>\n    Use it as a reference for EDA","d43e2f66":"### 2. Dataframe Operations\n<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#100)"}}