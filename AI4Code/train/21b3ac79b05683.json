{"cell_type":{"d2d19430":"code","60febb58":"code","b1a7f496":"code","d76da1ac":"code","5a05232f":"markdown"},"source":{"d2d19430":"# Flowchart of processing\nfrom IPython.display import Image\nImage(\"\/kaggle\/input\/diagram\/Diagram.png\")","60febb58":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport cv2\nimport matplotlib.pyplot as plt","b1a7f496":"img = cv2.imread('\/kaggle\/input\/plates\/IMG_0869.JPG') # set up an image\nimgray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) \n\n#Threshold parameters\nx=135\ny=255\nthreshold=1\n\n\nret,thresh1 = cv2.threshold(imgray,x,y,cv2.THRESH_BINARY)\nret,thresh2 = cv2.threshold(imgray,x,y,cv2.THRESH_BINARY_INV)\nret,thresh3 = cv2.threshold(imgray,x,y,cv2.THRESH_TRUNC)\nret,thresh4 = cv2.threshold(imgray,x,y,cv2.THRESH_TOZERO)\nret,thresh5 = cv2.threshold(imgray,x,y,cv2.THRESH_TOZERO_INV)\ntitles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']\nimages = [imgray, thresh1, thresh2, thresh3, thresh4, thresh5]\n\n#Please, assess size of colonies on your Petri dish and choose threshold to make image binary\nsize='big'\nif size=='big':  \n    size1=100\n    size2=1300\nif size=='medium':\n    size1=10\n    size2=500\nif size=='small':\n    size1=0\n    size2=100\n    \n#Visualization\nplt.figure(figsize=(40,40))\nplt.subplot(1,2,1),plt.title(titles[0]),plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\nplt.subplot(1,2,2),plt.title(titles[threshold]),plt.imshow(cv2.cvtColor(images[threshold], cv2.COLOR_BGR2RGB))","d76da1ac":"#Looking for the biggest outline on image via cv2 module. We need it to outline Petri dish\nret,thresh = cv2.threshold(imgray,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU) \ncontours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nareas = []\nfor contour in contours:\n    ar = cv2.contourArea(contour)\n    areas.append(ar)\nmax_area = max(areas)\nmax_area_index = areas.index(max_area)\ncnt = contours[max_area_index]\n\n#Laying the mask\nmask = np.zeros_like(imgray) \ncv2.drawContours(mask, contours, max_area_index, 255, -1) \nrgba = cv2.cvtColor(imgray, cv2.COLOR_BGR2RGBA)\nrgba[:, :, 3] = mask\n\n#Looking for 4 points on the biggest outline to crop the image\narr = cnt.astype('float64') \nw1=int(min(arr[:,:,0])[0])\nw2=int(max(arr[:,:,0])[0])\nh1=int(min(arr[:,:,1])[0])\nh2=int(max(arr[:,:,1])[0])\nif w2<(rgba.shape[1]*0.8): w2=rgba.shape[1]\nif w1>(rgba.shape[1]*0.2): w1=0\nif h2<(rgba.shape[0]*0.8): h2=rgba.shape[0]\nif h1>(rgba.shape[0]*0.2): h1=0\nimg_cropped = rgba[h1:h2,w1:w2]\n\n#Find contours and filter only proper size of contours\nimg=cv2.cvtColor(img_cropped,cv2.COLOR_RGBA2GRAY) \nret,thresh1 = cv2.threshold(img,x,y,cv2.THRESH_BINARY)\nret,thresh2 = cv2.threshold(img,x,y,cv2.THRESH_BINARY_INV)\nret,thresh3 = cv2.threshold(img,x,y,cv2.THRESH_TRUNC)\nret,thresh4 = cv2.threshold(img,x,y,cv2.THRESH_TOZERO)\nret,thresh5 = cv2.threshold(img,x,y,cv2.THRESH_TOZERO_INV)\ntitles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']\nimages = [imgray, thresh1, thresh2, thresh3, thresh4, thresh5]\ncontours, hierarchy = cv2.findContours(images[threshold],cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\na=[]\nb=[]\nfor c in contours:\n    if (cv2.arcLength(c,True)>size1) and (cv2.arcLength(c,True)<size2):\n        a.append(cv2.arcLength(c,True))\n        b.append(c)\nimg=cv2.drawContours(img, b, -1, (255,255,255), 3)\n\n#Count contours and print result:\nprint(\"number of colonies: \", len(b))\n\n#Visualize\nplt.figure(figsize=(40,40))\nplt.subplot(1,6,1),plt.title('Original'),plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\nplt.subplot(1,6,2),plt.title('Alpha'),plt.imshow(rgba)\nplt.subplot(1,6,3),plt.title('Cropped'),plt.imshow(img_cropped)\nplt.subplot(1,6,4),plt.title('Threshold'),plt.imshow(cv2.cvtColor(images[threshold],cv2.COLOR_BGR2RGB))\nplt.subplot(1,6,5),plt.title('Contours'),plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))\n","5a05232f":"This is semi-automatic counter of almost transparent colonies on Petri dish. It is based on the open cv library. Below you can find description and parameters. \nI was using my own set of photos of Petri dishes called \"plates\"."}}