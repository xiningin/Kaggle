{"cell_type":{"e1fca89f":"code","751f8764":"code","01c7d2ab":"code","49b1699c":"code","582678da":"code","99a9cd60":"code","3d1042da":"code","47fdd299":"code","82795d3a":"code","bd0ae0b2":"code","f6c6b583":"code","149b389f":"code","dc8af37a":"code","6db1b50d":"code","2422eae9":"code","59abe237":"code","ac1f9680":"code","70011b39":"code","42f65771":"code","7a227702":"code","89e026af":"code","f4846951":"code","3b23ccc5":"code","2c4bc7f3":"code","558ee14a":"code","170b5695":"code","1c534613":"code","e15aacfd":"code","cc714e29":"code","54bfa12b":"code","481c613d":"code","66dc60f2":"code","e3b3f9dd":"code","aa8c77d1":"code","40b507ac":"code","c2bb8578":"code","5413a783":"code","f8c9cf9c":"code","60460248":"markdown","625b2d94":"markdown","69c8fffd":"markdown","161b7f66":"markdown","84e57b2e":"markdown","28da1501":"markdown","163b5077":"markdown","b724fe2c":"markdown","4d77dcb5":"markdown","6b5fdb4b":"markdown"},"source":{"e1fca89f":"#importing some useful libraries\nimport pandas as pd \nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \nfrom sklearn.metrics import f1_score, confusion_matrix, classification_report, roc_auc_score, roc_curve, auc, accuracy_score, precision_score, recall_score\nfrom sklearn.model_selection import train_test_split, learning_curve\nfrom sklearn.model_selection import cross_val_predict, cross_val_score, cross_validate\nfrom sklearn.model_selection import StratifiedKFold, StratifiedShuffleSplit\nsns.set()\n\nscaler = StandardScaler()","751f8764":"#reading the data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","01c7d2ab":"train.shape","49b1699c":"test.shape","582678da":"train.isnull().sum() #to_show_null_data(Age and cabin embarked)","99a9cd60":"test.isnull().sum() #to_show_null_data(AGE and cabin)","3d1042da":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","47fdd299":"bar_chart('Sex')\nbar_chart('Pclass')\nbar_chart('Embarked')\nbar_chart('Parch')\nbar_chart('SibSp')","82795d3a":"all_data = [train,test]\nfor data in all_data :\n    data['Status'] = data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","bd0ae0b2":"train.Status.unique()","f6c6b583":"for dataset in all_data:\n    dataset['Status'] = dataset['Status'].replace(['Lady', 'Countess','Capt', 'Col',\\\n     'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Status'] = dataset['Status'].replace('Mlle', 'Miss')\n    dataset['Status'] = dataset['Status'].replace('Ms', 'Miss')\n    dataset['Status'] = dataset['Status'].replace('Mme', 'Mrs')\n    ","149b389f":"train.isnull().sum()","dc8af37a":"test.head(10)\nbar_chart('Status')","6db1b50d":"status_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in all_data:\n    dataset['Status'] = dataset['Status'].map(status_mapping)\n    dataset['Status'] = dataset['Status'].fillna(0)","2422eae9":"train.Status.unique()","59abe237":"bar_chart('Status')","ac1f9680":"train['FamilySize'] = train ['SibSp'] + train['Parch'] + 1\ntest['FamilySize'] = test ['SibSp'] + test['Parch'] + 1","70011b39":"train.head()","42f65771":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in all_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)\n    \nfor dataset in all_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","7a227702":"train['Cabin_category'] = train['Cabin'].astype(str).str[0]\ntrain['Cabin_category'] = train['Cabin_category'].map({'A':1,'B':2,'C':2,'D':3,'E':4,'F':5,'G':6,'T':7})\ntrain['Cabin_category'] = train['Cabin_category'].fillna(0)\n# Cabin Grouping \ntrain['HasCabin'] = train['Cabin'].apply(lambda x:0 if x is np.nan else 1)\n\n\ntest['Cabin_category'] = test['Cabin'].astype(str).str[0]\ntest['Cabin_category'] = test['Cabin_category'].map({'A':1,'B':2,'C':2,'D':3,'E':4,'F':5,'G':6,'T':7})\ntest['Cabin_category'] = test['Cabin_category'].fillna(0)\n# Cabin Grouping \ntest['HasCabin'] = test['Cabin'].apply(lambda x:0 if x is np.nan else 1)\n\n#train['Name_length'] = train['Name'].apply(len)\n#test['Name_length'] = test['Name'].apply(len)\n","89e026af":"train.head()","f4846951":"train.isnull().sum()","3b23ccc5":"train[\"Age\"].fillna(train.groupby(\"Status\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Status\")[\"Age\"].transform(\"median\"), inplace=True)\ntrain['Fare'].fillna(7.5, inplace = True)\ntest['Fare'].fillna(7.5, inplace = True)\ntrain['Embarked'].fillna('S', inplace = True)\ntest['Embarked'].fillna('S', inplace = True)","2c4bc7f3":"train.isnull().sum()","558ee14a":"train.isnull().sum()","170b5695":"train.groupby(\"Status\")[\"Age\"].transform(\"median\")","1c534613":"#train['Minor'] = (train['Age'] < 14.0) & (train['Age']>= 0)\n#test['Minor'] = (test['Age'] < 14.0) & (test['Age']>= 0)","e15aacfd":"def correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(train)","cc714e29":"train.Fare = train.Fare.apply(lambda l: np.log(l+1))\ntest.Fare = test.Fare.apply(lambda l: np.log(l+1))\n\ntrain.Fare = scaler.fit_transform(train.Fare.values.reshape(-1,1))\ntest.Fare = scaler.transform(test.Fare.values.reshape(-1,1))\n\n\ntrain.Age = scaler.fit_transform(train.Age.values.reshape(-1,1))\ntest.Age = scaler.transform(test.Age.values.reshape(-1,1))","54bfa12b":"train.head()","481c613d":"y_full = train[\"Survived\"]\nfeatures = [\"Pclass\",\"Sex\",\"Age\",\"IsAlone\", \"FamilySize\", \"Status\",\"Embarked\",\"Fare\",\"Cabin_category\",\"HasCabin\"]\n\nX_full = pd.get_dummies(train[features])\nX_test_full = pd.get_dummies(test[features])\nX_train, X_valid, y_train, y_valid = train_test_split(X_full, y_full, train_size=0.8, test_size=0.2,random_state=42)","66dc60f2":"rf_model = RandomForestClassifier(criterion = 'gini', n_estimators = 100, max_depth = 3, min_samples_split=6, min_samples_leaf=6, random_state=3, oob_score = True)","e3b3f9dd":"rf_model.fit(X_train, y_train)\nrf_val_predictions = rf_model.predict(X_valid)","aa8c77d1":"feature_importances = pd.Series(rf_model.feature_importances_, X_full.columns)\nfeature_importances.sort_values(inplace=True)\nfeature_importances.plot(kind = \"barh\",figsize = (7,6))","40b507ac":"def evaluation(model):\n    \n    model.fit(X_train, y_train)\n    ypred = model.predict(X_valid)\n    \n    lr_probs = model.predict_proba(X_valid)\n    lr_probs = lr_probs[:, 1]\n    lr_auc = roc_auc_score(y_valid, lr_probs)\n    \n    print(confusion_matrix(y_valid, ypred))\n    print(classification_report(y_valid, ypred))\n    \n    N, train_score, val_score = learning_curve(model, X_train, y_train,\n                                              cv=4, scoring='accuracy',\n                                               train_sizes=np.linspace(0.1, 1, 10))\n    \n    plt.figure(figsize=(12, 8))\n    plt.plot(N, train_score.mean(axis=1), label='train score')\n    plt.plot(N, val_score.mean(axis=1), label='validation score')\n    plt.legend()\n    plt.show()","c2bb8578":"evaluation(rf_model)","5413a783":"rf_model.fit(X_full, y_full)\npredictions = rf_model.predict(X_test_full)","f8c9cf9c":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)","60460248":"# Filling in missing data","625b2d94":"# Exploring missing values","69c8fffd":"# **Credits** :\n\n* https:\/\/www.kaggle.com\/chapagain\/titanic-solution-a-beginner-s-guide\n* https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n* https:\/\/www.kaggle.com\/rafalplis\/my-approach-to-titanic-competition\n* https:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution\n* https:\/\/www.kaggle.com\/khkuggle\/simple-and-intermediate-eda-modeling-for-titanic","161b7f66":"# Handling Outliers","84e57b2e":"# Feature engineering","28da1501":"# Training our model and making predictions","163b5077":"### **Titanic Competition**\n\nthis is my first published notebook about the kaggle competition, I have synthesized the results from various notebooks and experimented on my own on the data and reached **0.799 score**, I hope this notebook is useful for someone\n\n* **Your feedback is welcome**\n* **Commented code is things i have tried that hasn't worked**","b724fe2c":"* **Scoring our model**","4d77dcb5":"# Plotting some useful visualizations about the features","6b5fdb4b":"# Preparing and formatting our submissions"}}