{"cell_type":{"48925888":"code","49cea836":"code","6d6185cc":"code","53f1a0b8":"code","b44aa81b":"code","3524dae5":"code","b939bdb8":"code","0cce48ce":"code","1bc8cca8":"code","67f57d38":"code","54d1e7c3":"code","8ba6ff43":"code","99184802":"code","305997f8":"code","0521acf4":"code","1c295edb":"code","90bbea4d":"code","6ff97dc7":"code","1c9bb57a":"code","5b9a9b1e":"code","c4c7e2e1":"code","cf7fabcf":"code","e30bc3b4":"code","ea50910f":"code","c2908d70":"code","f06d6450":"code","81d4b3ea":"code","88b37318":"code","f7cf35d8":"code","29d39e12":"code","76c4a1c2":"code","664a7832":"code","168eb6dd":"code","7db95153":"code","74e5947b":"code","5cc1539d":"code","3e093b6e":"code","aeb4f246":"code","2c76a3c1":"code","4c20c703":"code","9ebb5318":"code","68b5a1cf":"code","6a23a2d1":"code","ee82f02b":"code","1a0a98d7":"markdown","aa2cd194":"markdown","87a2f607":"markdown","0ccebe0a":"markdown","fcfdcd77":"markdown","2c84b0b7":"markdown","0432944a":"markdown","c333ce3f":"markdown","b659c4b4":"markdown","96615bd8":"markdown","384835c4":"markdown","97bc793d":"markdown","8f7ce8a2":"markdown","90d3be98":"markdown","f6c3d8a3":"markdown","9fdca7ed":"markdown","b6587335":"markdown","c80169a5":"markdown","03348d77":"markdown","9284262f":"markdown","46a925de":"markdown","a78ad846":"markdown"},"source":{"48925888":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectKBest,f_regression\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport xgboost as xgb\nimport lightgbm as lgb","49cea836":"train = pd.read_csv('..\/input\/predict-volcanic-eruptions-ingv-oe\/train.csv')\n","6d6185cc":"train.info()","53f1a0b8":"train","b44aa81b":"data = train.copy()","3524dae5":"# making segments data into one data frame\ndef make_data():\n    global data\n    n = 0\n    for  i in data.segment_id :\n        file = pd.read_csv('..\/input\/predict-volcanic-eruptions-ingv-oe\/train\/{}.csv'.format(i))\n        for x in file.columns:\n            data.loc[n:n+1,x+'_mean'] = file[x].mean()\n            data.loc[n,x+'_std'] = file[x].std()\n            data.loc[n,x+'_min'] = file[x].min()\n            data.loc[n,x+'_20'] = file[x].quantile(0.20)\n            data.loc[n,x+'_40'] = file[x].quantile(0.40)\n            data.loc[n,x+'_50'] = file[x].quantile(0.50)\n            data.loc[n,x+'_60'] = file[x].quantile(0.60)\n            data.loc[n,x+'_80'] = file[x].quantile(0.80)\n            data.loc[n,x+'_max'] = file[x].max()\n        n +=1\n\n    data.fillna(0,inplace=True)\n    return data\nmake_data()    ","b939bdb8":"data_train = data.copy()","0cce48ce":"data_train.info()","1bc8cca8":"data_train.describe()","67f57d38":"y_train = data_train['time_to_eruption']\nsegment_id = data_train['segment_id']\ndata_train.drop(['time_to_eruption','segment_id'],axis = 1 , inplace=True)","54d1e7c3":"# finding and removing constant columns\ncols = []\nfor i in data_train.columns :\n    if data_train[i].min() == data_train[i].max():\n        cols.append(i)\ncols","8ba6ff43":"data_train.drop(['sensor_1_50', 'sensor_2_50', 'sensor_3_50','sensor_4_50', 'sensor_5_50', 'sensor_6_50',\n                 'sensor_7_50', 'sensor_8_50', 'sensor_9_50', 'sensor_10_50'],axis = 1 , inplace=True)","99184802":"data_train.shape","305997f8":"std_scaler = StandardScaler()\nstd_data = std_scaler.fit_transform(data_train)\ndata_train = pd.DataFrame(std_data, columns = data_train.columns)\ndata_train","0521acf4":"reg_model = LinearRegression()\nreg_model.fit(data_train,y_train)\nprint(reg_model.score(data_train,y_train))\n","1c295edb":"forest_model = RandomForestRegressor()\nforest_model.fit(data_train,y_train)\nprint(forest_model.score(data_train,y_train))\n","90bbea4d":"forest_score = cross_val_score(forest_model,data_train,y_train,scoring= 'neg_mean_squared_error', cv=20)\nforest_rmse_score = np.sqrt(-forest_score)\nprint(forest_rmse_score.mean())\n\n","6ff97dc7":"tree_model = DecisionTreeRegressor()\ntree_model.fit(data_train,y_train)\nprint(tree_model.score(data_train,y_train))\n","1c9bb57a":"tree_score = cross_val_score(tree_model,data_train,y_train,scoring= 'neg_mean_squared_error', cv=20)\ntree_rmse_score = np.sqrt(-tree_score)\nprint(tree_rmse_score.mean())\n\n","5b9a9b1e":"svr_model = SVR()\nsvr_model.fit(data_train,y_train)\nprint(svr_model.score(data_train,y_train))\n","c4c7e2e1":"gbr_model = GradientBoostingRegressor()\ngbr_model.fit(data_train,y_train)\nprint(gbr_model.score(data_train,y_train))","cf7fabcf":"gbr_score = cross_val_score(gbr_model,data_train,y_train,scoring= 'neg_mean_squared_error', cv=20)\ngbr_rmse_score = np.sqrt(-gbr_score)\nprint(gbr_rmse_score.mean())\n","e30bc3b4":"xgb_model = xgb.XGBRegressor()\nxgb_model.fit(data_train,y_train)\nprint(xgb_model.score(data_train,y_train))","ea50910f":"xgb_score = cross_val_score(xgb_model,data_train,y_train,scoring= 'neg_mean_squared_error', cv=20)\nxgb_rmse_score = np.sqrt(-xgb_score)\nprint(xgb_rmse_score.mean())\n","c2908d70":"lgb_model = lgb.LGBMRegressor()\nlgb_model.fit(data_train,y_train)\nprint(lgb_model.score(data_train,y_train))","f06d6450":"lgb_score = cross_val_score(lgb_model,data_train,y_train,scoring= 'neg_mean_squared_error', cv=20)\nlgb_rmse_score = np.sqrt(-lgb_score)\nprint(lgb_rmse_score.mean())\n","81d4b3ea":"forest_tune_pipeline = Pipeline([\n     ('selector',SelectKBest(f_regression)),\n     ('model',RandomForestRegressor(random_state = 42))])\n\nforest_grid_search = GridSearchCV( estimator = forest_tune_pipeline, param_grid = {'selector__k':[70] , \n  'model__n_estimators':np.arange(500,550,50),'model__max_depth':[15]}, n_jobs=-1,\n                                  scoring=\"neg_mean_squared_error\", cv=20, verbose=3)","88b37318":"forest_grid_search.fit(data_train,y_train)\nprint('the best parameters : ',forest_grid_search.best_params_)\nprint('the best score = ', np.sqrt(-forest_grid_search.best_score_))","f7cf35d8":"tree_tune_pipeline = Pipeline([\n     ('selector',SelectKBest(f_regression)),\n     ('model',DecisionTreeRegressor(random_state = 42))])\n\ntree_grid_search = GridSearchCV( estimator = tree_tune_pipeline, param_grid = {'selector__k':[70,80] , \n     'model__max_depth':[12,13,15]}, n_jobs=-1,scoring=\"neg_mean_squared_error\", cv=20, verbose=3)","29d39e12":"tree_grid_search.fit(data_train,y_train)\nprint('the best parameters : ',tree_grid_search.best_params_)\nprint('the best score = ', np.sqrt(-tree_grid_search.best_score_))","76c4a1c2":"xgb_tune_pipeline = Pipeline([\n     ('selector',SelectKBest(f_regression)), ('model',xgb.XGBRegressor(random_state=42))])\n\nxgb_grid_search = GridSearchCV( estimator = xgb_tune_pipeline, param_grid = {'selector__k':[70] , \n  'model__learning_rate':[0.05],'model__n_estimators':[3000,5000],'model__max_depth':[10],'model__colsample_bytree':[0.3]},\n                               n_jobs=-1, scoring=\"neg_mean_squared_error\", cv=20, verbose=3)","664a7832":"xgb_grid_search.fit(data_train,y_train)\nprint('the best parameters : ',xgb_grid_search.best_params_)\nprint('the best score = ', np.sqrt(-xgb_grid_search.best_score_))","168eb6dd":"lgb_tune_pipeline = Pipeline([\n     ('selector',SelectKBest(f_regression)),\n     ('model',lgb.LGBMRegressor(random_state=42,objective='regression',\n                              bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11))])\n\nlgb_grid_search = GridSearchCV( estimator = lgb_tune_pipeline, param_grid = {'selector__k':[70] , \n  'model__learning_rate':[0.01],'model__num_iterations':[10000],'model__n_estimators':[500],\n                            'model__max_bin':[100],'model__num_leaves':[40,50]},\n                               n_jobs=-1, scoring=\"neg_mean_squared_error\", cv=20, verbose=3)","7db95153":"lgb_grid_search.fit(data_train,y_train)\nprint('the best parameters : ',lgb_grid_search.best_params_)\nprint('the best score = ', np.sqrt(-lgb_grid_search.best_score_))\n\n","74e5947b":"test = pd.read_csv('..\/input\/predict-volcanic-eruptions-ingv-oe\/sample_submission.csv')\ntest","5cc1539d":"def make_data():\n    global test\n    n = 0\n    for  i in test.segment_id :\n        file = pd.read_csv('..\/input\/predict-volcanic-eruptions-ingv-oe\/test\/{}.csv'.format(i))\n        for x in file.columns:\n            test.loc[n:n+1,x+'_mean'] = file[x].mean()\n            test.loc[n,x+'_std'] = file[x].std()\n            test.loc[n,x+'_min'] = file[x].min()\n            test.loc[n,x+'_20'] = file[x].quantile(0.20)\n            test.loc[n,x+'_40'] = file[x].quantile(0.40)\n            test.loc[n,x+'_50'] = file[x].quantile(0.50)\n            test.loc[n,x+'_60'] = file[x].quantile(0.60)\n            test.loc[n,x+'_80'] = file[x].quantile(0.80)\n            test.loc[n,x+'_max'] = file[x].max()\n        n +=1\n\n    test.fillna(0,inplace=True)\n    return test\nmake_data()    ","3e093b6e":"segment_id_test = test['segment_id']\ntest.drop(['time_to_eruption','segment_id'],axis = 1 , inplace=True)","aeb4f246":"test.drop(['sensor_1_50', 'sensor_2_50', 'sensor_3_50','sensor_4_50', 'sensor_5_50', 'sensor_6_50',\n                 'sensor_7_50', 'sensor_8_50', 'sensor_9_50', 'sensor_10_50'],axis = 1 , inplace=True)","2c76a3c1":"std_test = std_scaler.transform(test)\ntest = pd.DataFrame(std_test, columns = test.columns)\ntest","4c20c703":"lgb_final_model    = lgb_grid_search.best_estimator_\nxgb_final_model    = xgb_grid_search.best_estimator_\nforest_final_model = forest_grid_search.best_estimator_\n","9ebb5318":"lgb_y_pred    = lgb_final_model.predict(test)\nxgb_y_pred    = xgb_final_model.predict(test)\nforest_y_pred = forest_final_model.predict(test)","68b5a1cf":"sub = pd.DataFrame()\nsub['segment_id'] = segment_id_test\nsub['time_to_eruption'] = lgb_y_pred\nsub.to_csv('submission_lgb.csv',index=False)","6a23a2d1":"sub_ensemble = pd.DataFrame()\nsub_ensemble['segment_id'] = segment_id_test\nsub_ensemble['time_to_eruption'] = lgb_y_pred*0.6 + xgb_y_pred*0.4\nsub_ensemble.to_csv('submission_ensemble_1.csv',index=False)","ee82f02b":"sub_ensemble_ = pd.DataFrame()\nsub_ensemble_['segment_id'] = segment_id_test\nsub_ensemble_['time_to_eruption'] = lgb_y_pred*0.60 + xgb_y_pred*0.30 + forest_y_pred*0.10\nsub_ensemble_.to_csv('submission_ensemble_2.csv',index=False)","1a0a98d7":"### 1. LinearRegression","aa2cd194":"### 5. GradientBoostingRegressor","87a2f607":"# Final Model for Test set\n","0ccebe0a":"### 3. DecisionTreeRegressor","fcfdcd77":"### 6. xgb","2c84b0b7":"# FINE TUNE THE MODELS\n","0432944a":"### 3. xgb","c333ce3f":"### 2. DecisionTreeRegressor","b659c4b4":"#  Loading & Preparing data","96615bd8":"### Submission","384835c4":"### 1. RandomForestRegressor","97bc793d":"### 2. RandomForestRegressor","8f7ce8a2":"### 4. lgb","90d3be98":"### We will try *lgb* alone and ensemble *[lgb+xgb]* finally we also will try ensemble *[lgb+xgb+RandomForestRegressor]*","f6c3d8a3":"# Data Preparation","9fdca7ed":"### 7. lgb","b6587335":"### Summary\nthe most algorithm that worked well is **lgb** then **xgb** then **RandomForestRegressor** then **DecisionTreeRegressor**","c80169a5":"### Final Model ","03348d77":"# Importing lib","9284262f":"# Training Models","46a925de":"\n### Working on Test data processing\n","a78ad846":"### 4. SVR"}}