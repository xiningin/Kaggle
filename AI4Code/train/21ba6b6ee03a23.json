{"cell_type":{"efc38be8":"code","a0f4da25":"code","8744705e":"code","7d8f8b10":"code","20f87a8b":"code","f285c8b7":"code","9a37fc75":"code","f9886a4e":"code","136621f8":"code","30594b83":"code","ea7fd29f":"code","31fd1aaf":"code","a85e0e7d":"code","ffa3fdc1":"code","98e02413":"code","65e0c23b":"code","1a05c510":"code","ade39da5":"code","96dacd82":"code","f15a2551":"code","4c97583a":"code","3dfc39cb":"code","3cd26e7b":"code","6e47edb0":"code","48e7e077":"code","f2cce1eb":"code","8778e186":"code","d2ca4f7f":"code","3b3c58f4":"code","e96a9789":"code","e0d3b56c":"code","a06164e8":"code","b2877226":"code","48ce0586":"code","8c5f1c1f":"code","12f98354":"code","8dea525a":"markdown","bd897562":"markdown","f73aa627":"markdown","c43f9053":"markdown","71d880b2":"markdown","6a721efe":"markdown","3a664fa6":"markdown","2b7f141f":"markdown","2c29f394":"markdown","012882cf":"markdown","f1d53057":"markdown","f5bd06ad":"markdown","68471542":"markdown","420e93c2":"markdown","5a52935e":"markdown","95483e94":"markdown","fc502ef7":"markdown","f99e50b8":"markdown","d7c0cf51":"markdown","65febb07":"markdown","e4ab17a6":"markdown","73312fc3":"markdown","4fe8e3eb":"markdown","804ef565":"markdown","47aec32c":"markdown","b84f8291":"markdown","dcb456b0":"markdown","1c7aa87d":"markdown","6c613b1c":"markdown","12ec6f11":"markdown","ae702af9":"markdown","37e0777a":"markdown","55afefb1":"markdown","a0dd6fcd":"markdown","2bd7747f":"markdown"},"source":{"efc38be8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a0f4da25":"import numpy as np #\u7528\u6cd5\u67e5\u8be2\uff1ahttps:\/\/numpy.org\/doc\/stable\/user\/quickstart.html#splitting-one-array-into-several-smaller-ones\nimport pandas as pd #\u7528\u6cd5\u67e5\u8be2\uff1ahttps:\/\/pandas.pydata.org\/docs\/user_guide\/index.html\nimport matplotlib.pyplot as plt \nimport matplotlib as mpl #\u7528\u6cd5\u67e5\u8be2\uff1ahttps:\/\/matplotlib.org\/tutorials\/index.html#introductory\nimport seaborn as sns #\u57fa\u4e8ematplotlib\u7684\u56fe\u5f62\u53ef\u89c6\u5316python library\uff0c\u7528\u6cd5\u67e5\u8be2\uff1ahttp:\/\/seaborn.pydata.org\/tutorial.html\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator #\u751f\u6210\u6587\u5b57\u4e91,\u7528\u6cd5\u67e5\u8be2\uff1ahttp:\/\/amueller.github.io\/word_cloud\/auto_examples\/index.html\nfrom PIL import Image\nimport datetime\n\nmpl.rcParams['font.sans-serif'] = ['SimHei']  #\u652f\u6301\u4e2d\u6587\u5b57\u4f53\nplt.style.use('ggplot') #\u9009\u62e9plot\u7684\u5448\u73b0\u98ce\u683c","8744705e":"df=pd.read_csv('\/kaggle\/input\/us-accidents\/US_Accidents_Dec19.csv') #df means DataFrame\uff0c\u6570\u636e\u6846\u67b6","7d8f8b10":"df.head() #df.head()\u4f1a\u5c06excel\u8868\u683c\u4e2d\u7684\u7b2c\u4e00\u884c\u770b\u4f5c\u5217\u540d\uff0c\u5e76\u9ed8\u8ba4\u8f93\u51fa\u4e4b\u540e\u76845\u884c\uff0c\u5728head\u540e\u9762\u7684\u62ec\u53f7\u91cc\u9762\u76f4\u63a5\u5199\u4f60\u60f3\u8981\u8f93\u51fa\u7684\u884c\u6570\u4e5f\u884c\uff0c\u6bd4\u59822\uff0c10\uff0c100\u4e4b\u7c7b\u7684","20f87a8b":"print('Rows     :',df.shape[0]) #df.shape[0]\u67e5\u770b\u884c\u6570\nprint('Columns  :',df.shape[1]) #df.shape[1]\u67e5\u770b\u5217\u6570\nprint('\\nFeatures :\\n     :',df.columns.tolist()) #\u5c06\u5217\u540d\u4ee5list\u5f62\u5f0f\u8f93\u51fa\nprint('\\nMissing values    :',df.isnull().values.sum()) #\u5224\u65ad\u7f3a\u5931\u503c\u6570\u76ee\nprint('\\nUnique values :  \\n',df.nunique()) #\u8fd4\u56de\u5404\u5217\u552f\u4e00\u503c\u7684\u4e2a\u6570","f285c8b7":"df.info() #\u663e\u793a\u57fa\u672c\u4fe1\u606f","9a37fc75":"df.select_dtypes(exclude=['int','float']).columns #\u6839\u636e\u6570\u636e\u7c7b\u578b\u9009\u62e9\u5217\uff0c\u672c\u884c\u6392\u9664\u6574\u6570\u578b\u3001\u6d6e\u70b9\u578b","f9886a4e":"df['Description'].head() #\u8f93\u51fa\u201cDescription\u201d\u5217\u7684\u524d5\u884c","136621f8":"print(df['Source'].unique()) #unique()\u4ee5\u6570\u7ec4\u5f62\u5f0f\uff08numpy.ndarray\uff09\u8fd4\u56de\u5404\u5217\u6570\u636e\u7684\u6240\u6709\u552f\u4e00\u503c\nprint(df['Description'].unique())\nprint(df['Timezone'].unique())\nprint(df['Amenity'].unique())","30594b83":"df.columns","ea7fd29f":"fig=sns.heatmap(df[['TMC','Severity','Start_Lat','End_Lat','Distance(mi)','Temperature(F)','Wind_Chill(F)',\n                    'Humidity(%)','Pressure(in)','Visibility(mi)','Wind_Speed(mph)']].corr(),annot=True,\n                cmap='RdYlGn',linewidths=0.25,annot_kws={'size':16}) \n#.corr()\u51fd\u6570\u8868\u793a\u76f8\u5173\u6027\uff0c.heatmap()\u51fd\u6570\u7528\u6765\u7ed8\u5236\u70ed\u529b\u56fe\uff0clinewidths\uff1a\u70ed\u529b\u56fe\u77e9\u9635\u4e4b\u95f4\u7684\u95f4\u9694\u5927\u5c0f\uff0ccmap\uff1acolormap\uff0c\u5b9a\u4e49\u70ed\u529b\u56fe\u989c\u8272\n#annot\uff1aannotate\uff08\u8bc4\u6ce8\uff09\uff0c\u9ed8\u8ba4False\uff0c\u4e3aTrue\u65f6\uff0c\u5728\u6bcf\u4e2a\u65b9\u683c\u5199\u5165\u6570\u636e\uff0cannot_kws\uff1a\u5f53annot\u4e3aTrue\u65f6\uff0c\u53ef\u8bbe\u7f6e\u5404\u4e2a\u53c2\u6570\uff0c\u5305\u62ec\u5927\u5c0f\uff0c\u989c\u8272\uff0c\u52a0\u7c97\uff0c\u659c\u4f53\u5b57\u7b49\n\nfig=plt.gcf() #\u5f97\u5230\u5f53\u524dFigure\u7684\u5f15\u7528\nfig.set_size_inches(18,18) #\u8bbe\u7f6e\u56fe\u5f62\u5927\u5c0f\nplt.xticks(fontsize=14) #x\u8f74\u523b\u5ea6\u5b57\u4f53\u5927\u5c0f\nplt.yticks(fontsize=14)\nplt.show()","31fd1aaf":"f,ax=plt.subplots(1,2,figsize=(20,8))\n#\u5b9a\u4e49plt.subplots()\u51fd\u6570\u65f6\uff0c\u7b49\u5f0f\u5de6\u8fb9\u7684f\u4ee3\u8868\u7ed8\u56fe\u7a97\u53e3(Figure)\uff1bax\u4ee3\u8868\u8fd9\u4e2a\u7ed8\u56fe\u7a97\u53e3\u4e0a\u7684\u5750\u6807\u7cfb(axis)\n#\u7b2c\u4e00\u4e2a1\u53c2\u6570\u662f\u5b50\u56fe\u7684\u884c\u6570\uff0c\u7b2c\u4e8c\u4e2a2\u53c2\u6570\u662f\u5b50\u56fe\u7684\u5217\u6570\uff08\u53731\u884c2\u5217\uff0c2\u4e2a\u5b50\u56fe\uff09\uff1bfigsize\u7528\u6765\u8bbe\u7f6e\u56fe\u5f62\u7684\u5927\u5c0f\uff0ca\u4e3a\u56fe\u5f62\u7684\u5bbd\uff0c b\u4e3a\u56fe\u5f62\u7684\u9ad8\uff0c\u5355\u4f4d\u4e3a\u82f1\u5bf8\n\ndf['Source'].value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n#value_counts\u51fd\u6570\u7528\u4e8e\u7edf\u8ba1dataframe\u6216series\u4e2d\u4e0d\u540c\u6570\u6216\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\n#plot.pie\u51fd\u6570\u7ed8\u5236\u997c\u72b6\u56fe,explode:\u6247\u5f62\u4e4b\u95f4\u7684\u5206\u79bb\u7a0b\u5ea6\uff0c\u9ed8\u8ba4\u4e3anone\uff0c\u8868\u793a\u4e0d\u5206\u88c2,autopct:\u6247\u5f62\u7684\u6570\u503c\u6807\u7b7e,shadow\uff1a\u662f\u5426\u663e\u793a\u9634\u5f71\uff0c\u9ed8\u8ba4\u4e3afalse\n#ax=ax[0]\uff1a\u8ba9\u997c\u72b6\u56fe\u8f93\u51fa\u4e8e\u7b2c1\u4e2a\u4f4d\u7f6e\u4e0a\nax[0].set_title('Share of Sources') #\u8bbe\u7f6e\u6807\u9898\nax[0].set_ylabel('Count') #\u8bbe\u7f6ey\u8f74\u6807\u7b7e\n\nsns.countplot('Source',data=df,ax=ax[1],order=df['Source'].value_counts().index)\n#countplot\uff1a\u663e\u793a\u6761\u5f62\u56fe\n#ax=ax[0]\uff1a\u8ba9\u997c\u72b6\u56fe\u8f93\u51fa\u4e8e\u7b2c2\u4e2a\u4f4d\u7f6e\u4e0a\uff0corder\uff1a\u4ee5\u503c\u51fa\u73b0\u6b21\u6570\u6392\u5e8f\nax[1].set_title('Count of Source')\nplt.show()","a85e0e7d":"f,ax=plt.subplots(1,2,figsize=(18,8))\n\ndf['Severity'].value_counts().plot.pie(explode=[0.1,0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Percentage Severity Distribution')\nax[0].set_ylabel('Count')\n\nsns.countplot('Severity',data=df,ax=ax[1],order=df['Severity'].value_counts().index)\nax[1].set_title('Count of Severity')\n\nplt.show()","ffa3fdc1":"plt.figure(figsize = (20,10))\n\ndf.Severity.value_counts(normalize=True).sort_index().plot.bar()\n#normalize=True\uff1a\u4ee5\u767e\u5206\u6bd4\u7684\u5f62\u5f0f\u663e\u793a\n#sort_index\uff1a\u9ed8\u8ba4\u6309\u7167\u884c\u540d\u6392\u5e8f\n#plot.bar()\u7ed8\u5236\u67f1\u72b6\u56fe\n\nplt.grid(False)\n#\u7ed8\u5236\u523b\u5ea6\u7ebf\u7684\u7f51\u683c\u7ebf\uff0cFalse\u4ee3\u8868\u6ca1\u6709\n\nplt.title('Severity')\nplt.xlabel('Severity')\nplt.ylabel('Fraction');","98e02413":"f,ax=plt.subplots(1,2,figsize=(18,8))\n\ndf['Side'].value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Side types')\nax[0].set_ylabel('Count')\n\nsns.countplot('Side',data=df,ax=ax[1],order=df['Side'].value_counts().index)\nax[1].set_title('Count of Side')\n\nplt.show()","65e0c23b":"df['Side'].unique()","1a05c510":"import matplotlib.pyplot as plt\n\nfrom PIL import Image #\u5bfc\u5165\u56fe\u50cf\u5904\u7406\u5e93\n\n%matplotlib inline\n#\u5c06matplotlib\u7684\u56fe\u8868\u76f4\u63a5\u5d4c\u5165\u5230Notebook\u4e4b\u4e2d\n\nimport numpy as np\n\nimg=np.array(Image.open('\/kaggle\/input\/usa-timezone-map\/usa-timezone-map.jpg'))\n#Image.open\u51fd\u6570\uff1a\u76f4\u63a5\u8bfb\u53d6\u8be5\u8def\u5f84\u6307\u5411\u7684\u56fe\u7247\n#np.array(Image.open())\u6253\u5f00\u56fe\u50cf\u5e76\u8f6c\u5316\u4e3a\u6570\u5b57\u77e9\u9635\uff0c\u53ef\u4ee5\u5bf9\u56fe\u7247\u8fdb\u884c\u590d\u6742\u5904\u7406\n\nfig=plt.figure(figsize=(30,10))\n#plt.figure(figsize=(6,8))\uff0c\u8868\u793afigure \u7684\u5927\u5c0f\u4e3a\u5bbd\u3001\u957f\uff08\u5355\u4f4d\u4e3ainch\uff09\n\nplt.imshow(img,interpolation='bilinear')\n#imshow()\u51fd\u6570\u5b9e\u73b0\u70ed\u56fe\u7ed8\u5236\n#interplotation\uff08\u63d2\u503c\uff09\uff1a\u7528\u4e8e\u6539\u53d8\u56fe\u7247\u7684\u6a21\u7cca\u5ea6\n\nplt.axis('off')\n#\u5173\u95ed\u5750\u6807\u8f74\uff0c\u9700\u7f6e\u4e8e plt.show() \u4e4b\u524d\uff0cplt.imshow() \u4e4b\u540e\n\nplt.show()","ade39da5":"f,ax=plt.subplots(1,2,figsize=(18,8))\n\ndf['Timezone'].value_counts().plot.pie(explode=[0.1,0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Accidents in Different Timezone')\nax[0].set_ylabel('Timezone')\n\nsns.countplot('Timezone',data=df,ax=ax[1],order=df['Timezone'].value_counts().index)\nax[1].set_title('Accident Count Based on Timezone')\n\nplt.show()","96dacd82":"start = pd.to_datetime(df.Start_Time, format='%Y-%m-%d %H:%M:%S') \n#pd.to_datetime\u51fd\u6570\u6570\u636e\uff08%Y-%m-%d %H:%M:%S\uff08\u59822016-02-08 07:19:27\uff09\uff09\u8f6c\u6362\u4e3a\u65f6\u95f4\u7c7b\u578b\uff0c\u5373datetime\nend = pd.to_datetime(df.End_Time, format='%Y-%m-%d %H:%M:%S')\n\nDuration = (end-start)\n\n#\u63d0\u53d6\u6bcf\u4e2a\u4e8b\u6545\u7684\u5904\u7406\u65f6\u95f4\uff0c\u4ee5\u5206\u949f\u4e3a\u5355\u4f4d\nT_D = 'Time_Duration(min)'\ndf[T_D] = Duration.astype('timedelta64[m]') #\u5c06\u65f6\u95f4\u7c7b\u578b\u8f6c\u6362\u4e3a\u6574\u6570\u578b\n\ndf.head()","f15a2551":"top20 = Duration.astype('timedelta64[m]').value_counts().nlargest(20)\n#astype\u51fd\u6570\uff1a\u5b9e\u73b0\u53d8\u91cf\u7c7b\u578b\u8f6c\u6362\uff0ctimedelta64\u8868\u793a\u65f6\u95f4\u5dee\uff0c[m]\u8868\u793a\u4ee5\u5355\u4f4dminute\u8868\u793a\uff0cnlargest\u51fd\u6570\u8fd4\u56de\u6307\u5b9a\u6570\u76ee\u7684\u6700\u5927\u503c\uff0c\u8ba1\u7b97\u6570\u91cf\u6700\u591a\u768420\u4e2a\u65f6\u95f4\u5dee\u7684\u6570\u91cf\u4e4b\u548c\n\nprint('top 20 accident durations correspond to {:.1f}% of the data'.format(top20.sum()*100\/len(Duration)))\n#top20.sum()\u7528\u6765\u8ba1\u7b97\u6570\u91cf\u6700\u591a\u7684\u524d20\u4e2a\u65f6\u95f4\u5dee\u5bf9\u5e94\u7684\u6570\u636e\u4e2a\u6570\u548c\n\n(top20\/top20.sum()).plot.bar(figsize=(18,8))\n#.bar\u51fd\u6570\u751f\u6210\u67f1\u72b6\u56fe\n\nplt.grid(False)\nplt.title('Accident Duration [Minutes]')\nplt.xlabel('Duration [minutes]')\nplt.ylabel('Fraction')","4c97583a":"#\u8f93\u51fa\u6570\u636e\n#df.to_csv(r'C:\\Users\\user\\Desktop\\\u6570\u636e\u5206\u6790\u9879\u76ee\\US Accidents\\US_Accidents_Dec19_clean.csv',index=0)\n#index=0\u8868\u793a\u4e0d\u4fdd\u5b58\u884c\u7d22\u5f15","3dfc39cb":"fig,ax=plt.subplots(1,2,figsize=(15,8))\n\nclr = (\"blue\", \"forestgreen\", \"gold\", \"red\", \"purple\",'cadetblue','hotpink','orange','darksalmon','brown')\ndf.State.value_counts().sort_values(ascending=False)[:10].sort_values().plot(kind='barh',color=clr,ax=ax[0])\n#sort_values()\u51fd\u6570\u5c06\u6570\u636e\u96c6\u4f9d\u7167\u67d0\u4e2a\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0cascending=False\u8868\u793a\u964d\u5e8f\u6392\u5217\n#plot\u51fd\u6570\u7528\u4e8e\u753b\u56fe\uff0ckind='barh'\u8868\u793a\u753b\u6a2a\u5411\u6761\u5f62\u56fe('line\u2019:\u6298\u7ebf\u56fe\uff08\u9ed8\u8ba4\uff09\uff0c\u2018bar\u2019: \u6761\u5f62\u56fe\uff0c\u2018barh\u2019:\u6a2a\u5411\u6761\u5f62\u56fe\uff0c\u2018hist\u2019:\u67f1\u72b6\u56fe\uff0c\u2018box\u2019:\u7bb1\u7ebf\u56fe\uff0c\n#\u2018kde\u2019:Kernel\u7684\u5bc6\u5ea6\u4f30\u8ba1\u56fe\uff0c\u4e3b\u8981\u5bf9\u67f1\u72b6\u56fe\u6dfb\u52a0Kernel\u6982\u7387\u5bc6\u5ea6\u7ebf\uff0c\u2018density\u2019:\u4e0e\u2018kde\u2019\u76f8\u540c\uff0c\u2018pie\u2019:\u997c\u56fe\uff0c\u2018scatter\u2019:\u6563\u70b9\u56fe\nax[0].set_title(\"Top 10 Accident Prone States\",size=20)\nax[0].set_xlabel('States',size=18)\n\n\ncount=df['State'].value_counts()\ngroups=list(count.index)[:10]\ngroups.append('Other')\n\ncounts=list(count[:10])\ncounts.append(count.agg(sum)-count[:10].agg(sum))\n\ntype_dict=pd.DataFrame({\"group\":groups,\"counts\":counts})\n#DataFrame\u662fPython\u4e2dPandas\u5e93\u4e2d\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7c7b\u4f3cexcel\uff0c\u662f\u4e00\u79cd\u4e8c\u7ef4\u8868\nclr1=('brown','darksalmon','orange','hotpink','cadetblue','purple','red','gold','forestgreen','blue','plum')\nqx = type_dict.plot(kind='pie', y='counts', labels=groups,colors=clr1,autopct='%1.1f%%', pctdistance=0.8, radius=1.2,ax=ax[1])\n#pctdistance\uff1a\u9532\u5f62\u5757\u6570\u636e\u6807\u6ce8\u7684\u5f84\u5411\u8ddd\u79bb\n\nplt.legend(loc=0, bbox_to_anchor=(1.15,0.4)) \n#legend\u51fd\u6570\u7528\u4e8e\u5b9a\u4e49\u56fe\u4f8b\u4f4d\u7f6e\uff0cbbox_to_anchor\u7528\u4e8e\u6307\u5b9a\u56fe\u4f8b\u5728\u8f74\u7684\u4f4d\u7f6e\nplt.subplots_adjust(wspace =0.2, hspace =1)\n#wspace\u4e3a\u5b50\u56fe\u4e4b\u95f4\u7684\u7a7a\u95f4\u4fdd\u7559\u7684\u5bbd\u5ea6\uff0c\u5e73\u5747\u8f74\u5bbd\u7684\u4e00\u90e8\u5206\uff0chspace\u4e3a\u5b50\u56fe\u4e4b\u95f4\u7684\u7a7a\u95f4\u4fdd\u7559\u7684\u9ad8\u5ea6\uff0c\u5e73\u5747\u8f74\u9ad8\u5ea6\u7684\u4e00\u90e8\u5206","3cd26e7b":"df_top_Severity_State = df.groupby('State').agg({'Severity': 'mean'}).sort_values('Severity').reset_index()\n#reset_index()\u51fd\u6570\u7528\u4e8e\u91cd\u7f6e\u7d22\u5f15\n\nplt.figure(figsize=(20,6))\nsns.barplot(y=\"Severity\", x=\"State\", data=df_top_Severity_State.head(10))\n#sns.barplot\u7528\u4e8e\u7ed8\u5236\u6761\u5f62\u56fe\uff0cx,y\u5206\u522b\u8868\u8ff0\u884c\u3001\u5217\u540d\nplt.ioff()","6e47edb0":"plt.figure(figsize=(20,8))\ndf.groupby('Weather_Condition') \\\n        .size() \\\n        .sort_values(ascending = False) \\\n        .iloc[:5] \\\n        .plot.pie(explode=[0.1,0.1,0.1,0.1,0.1],autopct='%1.1f%%',shadow=True)\n#iloc[]\uff1a\u53d6\u51e0\u884c,\u4f8b\u5982,iloc[:5],\u53d6\u524d5\u884c\nplt.ioff()","48e7e077":"fig, ax=plt.subplots(figsize=(20,8))\n\ndf['Weather_Condition'].value_counts().sort_values(ascending=False).head(5).plot.bar(width=0.5,edgecolor='k',align='center',linewidth=2)\n#plot.bar\u51fd\u6570\u4e2d\u7684width\u8868\u793a\u67f1\u5bbd\u5ea6(X\u8f74\u65b9\u5411)\uff0cedgecolor\u8868\u793aBar\u8fb9\u754c\u7ebf\u989c\u8272\uff0clinewidth\u8868\u793a\u8fb9\u754c\u7ebf\u5bbd\n#align\u53ef\u9009['left'(default) | 'center']\uff0c\u51b3\u5b9a\u6574\u4e2abar\u56fe\u5206\u5e03\uff0c\u9ed8\u8ba4left\u8868\u793a\u9ed8\u8ba4\u4ece\u5de6\u8fb9\u754c\u5f00\u59cb\u7ed8\u5236,center\u4f1a\u5c06\u56fe\u7ed8\u5236\u5728\u4e2d\u95f4\u4f4d\u7f6e\n\nplt.xlabel('Weather_Condition',fontsize=20)\nplt.ylabel('Number of Accidents',fontsize=20)\nax.tick_params(labelsize=20)\n#tick_params\u51fd\u6570\u7684labelsize\u7528\u4e8e\u8bbe\u7f6e\u523b\u5ea6\u7ebf\u6807\u7b7e\u7684\u5b57\u4f53\u5927\u5c0f\nplt.title('5 Top Weather Condition for Accidents',fontsize=30)\nplt.grid(False)\nplt.ioff()","f2cce1eb":"bool_cols = [col for col in df.columns if df[col].dtype == np.dtype('bool')]\nbooldf = df[bool_cols]\nnot_one_hot = booldf[booldf.sum(axis = 1) > 1]\nprint('There are {} non one hot metadata rows, which are {:.1f}% of the data'.format(len(not_one_hot),100*len(not_one_hot)\/len(df)))","8778e186":"bools = booldf.sum(axis=0)\n#sum\u51fd\u6570\u4e2daxis=0\u8868\u793a\u6309\u5217\u76f8\u52a0\n\nbools","d2ca4f7f":"bools.plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,10))\nplt.title('Proximity to Traffic Object')","3b3c58f4":"df['time'] = pd.to_datetime(df.Start_Time, format='%Y-%m-%d %H:%M:%S')\ndf = df.set_index('time')\n#set_index\u7528\u4e8e\u6dfb\u52a0\u7d22\u5f15\ndf.head()","e96a9789":"freq_text = {'D':'Daily','W':'Weekly','Y':'Yearly'}\n\nplt.subplots(1,3,figsize=(21,7))\nfor i, (fr,text) in enumerate(freq_text.items(),1):\n    plt.subplot(1,3,i)\n    sample = df.ID['2016':].resample(fr).count()\n    sample.plot(style='.')\n    plt.title('Accidents, {} count'.format(text))\n    plt.xlabel('Date')\n    plt.ylabel('Accident Count');\n#enumerate\u51fd\u6570\u7528\u4e8e\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5\u53ca\u5b83\u4eec\u7684\u4e0b\u6807","e0d3b56c":"df['Start_Time'] = pd.to_datetime(df['Start_Time'], format=\"%Y\/%m\/%d %H:%M:%S\")\n\n#\u63d0\u53d6\u5404\u4e8b\u6545\u53d1\u751f\u5e74\u3001\u6708\u3001\u65e5\u3001\u5c0f\u65f6\u548c\u5de5\u4f5c\u65e5\ndf['Year'] = df['Start_Time'].dt.year #year\u51fd\u6570\u4ece\u65e5\u671f\u578b\u6570\u636e\u4e2d\u83b7\u5f97\u5f53\u524d\u5e74\u4efd\ndf['Month'] = df['Start_Time'].dt.strftime('%b') #strftime('%b')\u51fd\u6570\u4ece\u65e5\u671f\u578b\u6570\u636e\u4e2d\u83b7\u5f97\u5f53\u524d\u6708\u4efd\ndf['DayOfWeekNum'] = df['Start_Time'].dt.dayofweek #dayofweek\u5c06\u5468\u51e0\u8f6c\u6362\u4e3a\u6570\u5b57\uff0c\u5982monday\u8f6c\u4e3a0\uff0csunday\u8f6c\u4e3a6\ndf['DayOfWeek'] = df['Start_Time'].dt.day_name() #day_name()\u51fd\u6570\u4ece\u65e5\u671f\u578b\u6570\u636e\u4e2d\u83b7\u5f97\u8be5\u65e5\u7684\u661f\u671f\u540d\u79f0\n#df['Weekday']=df['Start_Time'].dt.strftime('%a')\u4e5f\u53ef\u83b7\u5f97\u661f\u671f\u540d\u79f0\uff08\u524d3\u4f4d\u5b57\u6bcd\uff09\ndf['MonthDayNum'] = df['Start_Time'].dt.day #day\u51fd\u6570\u4ece\u65e5\u671f\u578b\u6570\u636e\u4e2d\u83b7\u5f97\u8be5\u65e5\u6240\u5728\u5f53\u524d\u6708\u4efd\u7684\u6392\u5e8f\ndf['HourOfDay'] = df['Start_Time'].dt.hour #Hour\u51fd\u6570\u4ece\u65e5\u671f\u578b\u6570\u636e\u4e2d\u83b7\u5f97\u5f53\u524d\u5c0f\u65f6\n\ndf.head()","a06164e8":"fig, ax=plt.subplots(figsize=(20,8))\ndf['DayOfWeek'].value_counts(ascending=False).plot.bar(width=0.5,edgecolor='k',align='center',linewidth=2)\nplt.xlabel('Day of the Week',fontsize=20)\nplt.ylabel('Number of accidents',fontsize=20)\nax.tick_params(labelsize=20)\nplt.title('Accident on Different Days of Week',fontsize=25)\nplt.grid(False)\nplt.ioff()","b2877226":"from wordcloud import WordCloud\n#\u5bfc\u5165\u6587\u5b57\u4e91\u5305\n\nplt.style.use('ggplot')\n#\u8bbe\u7f6e\u7ed8\u56fe\u98ce\u683c\n\nWords = df[\"Description\"].str.split(\"(\").str[0].value_counts().keys()\n#str.split()\u51fd\u6570\u4e3a\u5206\u9694\u7b26\uff0c\u4e0d\u652f\u6301\u6b63\u5219\u53ca\u591a\u4e2a\u5207\u5272\u7b26\u53f7\uff0c\u4e0d\u611f\u77e5\u7a7a\u683c\u7684\u6570\u91cf\n#keys\u51fd\u6570\u7528\u6765\u8fd4\u56de\u5b57\u5178\u4e2d\u7684\u6240\u6709\u7684\u952e\n\nbackground_image = np.array(Image.open('\/kaggle\/input\/usa-states-map\/US-States-Map.png')) \n# Image.open() \u65b9\u6cd5\u8bfb\u53d6\u80cc\u666f\u56fe\u7247,np.array \u65b9\u6cd5\u5c06\u56fe\u7247\u8f6c\u6362\u4e3a\u77e9\u9635\uff0c\u4fbf\u4e8e\u8fdb\u884c\u590d\u6742\u64cd\u4f5c\nimg_colors = ImageColorGenerator(background_image) # \u63d0\u53d6\u80cc\u666f\u56fe\u7247\u989c\u8272\n\nStopwords = set(STOPWORDS) # \u8bbe\u7f6e\u8bcd\u4e91\u81ea\u5e26\u7684\u82f1\u6587\u8fc7\u6ee4\u8bcd,\u7528\u6765\u5206\u5272\u7b5b\u9664\u6587\u672c\u4e2d\u4e0d\u9700\u8981\u7684\u8bcd\u6c47\uff0c\u6bd4\u5982\uff1aa\u3001an\u3001the \u8fd9\u4e9b\n\nWC = WordCloud(scale=5,max_words=1000,mask = background_image,max_font_size = 36,stopwords = Stopwords,background_color=\"black\").generate(\" \".join(Words))\n#scale\uff1a\u6309\u7167\u6bd4\u4f8b\u8fdb\u884c\u653e\u5927\u753b\u5e03\uff0c\u5982\u8bbe\u7f6e\u4e3a1.5\uff0c\u5219\u957f\u548c\u5bbd\u90fd\u662f\u539f\u6765\u753b\u5e03\u76841.5\u500d,max_words\uff1a\u8bbe\u7f6e\u6700\u5927\u73b0\u5b9e\u5b57\u6570\n#colormap:matplotlib\u8272\u56fe\uff0c\u53ef\u66f4\u6539\u540d\u79f0\u8fdb\u800c\u66f4\u6539\u6574\u4f53\u98ce\u683c\n\nWC.recolor(color_func=img_colors) # recolor() \u5219\u662f\u6839\u636e\u56fe\u7247\u8272\u5f69\u7ed8\u5236\u8bcd\u4e91\u6587\u5b57\u989c\u8272\n\nplt.figure(figsize=(30,15))\nplt.imshow(WC,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"WordCloud in the Context of USA Map\",color='R',Fontsize = 40)\nplt.show()","48ce0586":"sns.factorplot('State','Severity',data=df)\n#factorplot\uff1a\u5bf9\u4e24\u4e2a\u7ef4\u5ea6\u7684\u6570\u636e\u7ed8\u5236\u4e00\u7ec4\u56fe\nfig=plt.gcf()\n#gcf\uff08\uff09\u51fd\u6570\uff1a\u83b7\u53d6\u5f53\u524d\u56fe\u5f62\nfig.set_size_inches(20,7)\n#set_size_inches\u7528\u6765\u8bbe\u7f6e\u56fe\u5f62\u7684\u5c3a\u5bf8\uff0c\u5355\u4f4d\u4e3a\u82f1\u5bf8\nplt.show()","8c5f1c1f":"plt.figure(figsize=(20,8))\nPoint = df[df.Severity<5]\nSca = Point.plot(kind='scatter', x='Start_Lng',y='Start_Lat',label='Severity',c='Severity',\n                 cmap=plt.get_cmap('Oranges'),colorbar=True,alpha=0.3,figsize=(20,10))\n#x,y\uff1a\u70b9\u4f4d\u7f6e\uff0ccmap\u6307colormaps\uff08\u8272\u5f69\u56fe\uff09\uff0calpha\u900f\u660e\u5ea6\uff1a\u4ecb\u4e8e0(\u900f\u660e)\u548c1(\u4e0d\u900f\u660e)\u4e4b\u95f4\u3002\nSca.legend()\nplt.ioff()","12f98354":"#\u9009\u62e9\u4ee5\u4e0b\u7279\u5f81\nfeature_list=['Source','TMC','Severity','Start_Lng','Start_Lat','Distance(mi)','Side','City','County','State',\n             'Timezone','Temperature(F)','Humidity(%)','Pressure(in)', 'Visibility(mi)', 'Wind_Direction','Weather_Condition',\n             'Amenity','Bump','Crossing','Give_Way','Junction','No_Exit','Railway','Roundabout','Station','Stop','Traffic_Calming',\n             'Traffic_Signal','Turning_Loop','Sunrise_Sunset','Hour','Weekday', 'Time_Duration(min)']","8dea525a":"**\u9884\u89c8\u6570\u636e\u2014\u2014Summary of Data**","bd897562":"\u4ece\u4e0a\u9762\u7684\u66f2\u7ebf\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5904\u7406\u6240\u9700\u65f6\u95f4\u4e3a29.0\u5206\u949f\u4e8b\u6545\u5360\u6bd4\u6700\u9ad8\uff0c\u8d85\u8fc740%\uff0c\u5176\u6b21\u4e3a44.0\u5206\u949f\u548c360.0\u5206\u949f\uff0c\u90fd\u572815%\u5de6\u53f3\uff0c\u5176\u4ed6\u65f6\u95f4\u90fd\u5c0f\u4e8e10%\uff0c\u76f8\u5bf9\u8f83\u5c11\u3002\u8fd9\u8bf4\u660e\u5927\u591a\u6570\u4e8b\u6545\u9700\u8981\u4e0d\u52301\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u6765\u8fdb\u884c\u5904\u7406\uff0c\u4f46\u4e5f\u5b58\u572815%\u5de6\u53f3\u7684\u4e8b\u6545\u9700\u8981360\u5206\u949f\u624d\u80fd\u89e3\u51b3\u3002","f73aa627":"**\u5bfc\u5165python\u5305\u2014\u2014Importing modules**","c43f9053":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\u4e8b\u6545\u6700\u591a\u53d1\u751f\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde(CA)\uff0c\u5360\u4e8b\u6545\u53d1\u751f\u91cf\u768422.3%\uff0c\u5176\u6b21\u4e3a\u5f97\u514b\u8428\u65af\u5dde(TX)\u548c\u4f5b\u7f57\u91cc\u8fbe\u5dde(FL)\uff0c\u53d1\u751f\u4e8b\u6545\u91cf\u6700\u591a\u7684\u524d\u5341\u4e2a\u5dde\u53d1\u751f\u7684\u4e8b\u6545\u91cf\u5360\u6574\u4e2a\u7f8e\u56fd\u53d1\u751f\u4e8b\u6545\u91cf\u768465.9%\u3002","71d880b2":"**\u6570\u636e\u6e90\u2014\u2014Source of Data**","6a721efe":"**\u5904\u7406\u4e8b\u6545\u6240\u9700\u65f6\u95f4\u2014\u2014Time taken to clear the traffic**","3a664fa6":"\u7531\u4e0a\u56fe\u53ef\u77e5\uff0c67.0%\uff0c\u5373\u4e09\u5206\u4e4b\u4e8c\u6240\u53d1\u751f\u4e8b\u6545\u7684\u4e25\u91cd\u7a0b\u5ea6\u90fd\u4e3a2\u7ea7\uff0c\u5bf9\u4ea4\u901a\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u5ef6\u8bef\uff1b\u5176\u6b21\u4e3a3\u7ea7\uff0c\u5360\u6bd4\u4e3a29.8%\uff0c\u5bf9\u4ea4\u901a\u9020\u6210\u4e86\u8f83\u957f\u65f6\u95f4\u7684\u5ef6\u8bef\uff1b\u800c1\u7ea7\u548c4\u7ea7\u8f83\u5c11\uff0c\u5206\u522b\u53600.0%\u548c3.1%\u3002\u8bf4\u660e\u7edd\u5927\u90e8\u5206\u4e8b\u6545\u90fd\u5bf9\u4ea4\u901a\u9020\u6210\u4e86\u4e00\u5b9a\u6216\u8f83\u957f\u65f6\u95f4\u7684\u5ef6\u8bef\uff0c\u8f83\u5c11\u51fa\u73b0\u9020\u6210\u77ed\u6682\u6216\u957f\u671f\u5ef6\u8bef\u7684\u4ea4\u901a\u4e8b\u6545\u3002","2b7f141f":"\u672c\u6570\u636e\u96c6\u5305\u542b2974334\u6761\u4e8b\u6545\u8bb0\u5f55\uff0c\u517149\u5217\u5c5e\u6027\u3002\u5176\u4e2d\u670911817022\u6761\u7f3a\u5931\u503c\u3002","2c29f394":"\u6b64\u6570\u636e\u5206\u6790\u7684\u6570\u636e\u6e90\u4e3a\u8fd1\u5e74\u6765\u7f8e\u56fd\u7684\u4ea4\u901a\u4e8b\u6545\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u7684\u4e8b\u6545\u6570\u636e\u6536\u96c6\u4e8e2016\u5e742\u6708\u81f32019\u5e7412\u6708\uff0c\u8986\u76d6\u4e86\u7f8e\u56fd49\u4e2a\u5dde\u3002\u4f7f\u7528\u4e24\u79cdapi\u63d0\u4f9b\u6d41\u5a92\u4f53\u4ea4\u901a\u4e8b\u6545\u6570\u636e\uff0c\u5305\u62ec\u7531\u5404\u79cd\u5b9e\u4f53\u6355\u83b7\u7684\u4ea4\u901a\u6570\u636e\uff0c\u5982\u7f8e\u56fd\u548c\u5dde\u4ea4\u901a\u90e8\u95e8\u3001\u6267\u6cd5\u673a\u6784\u3001\u4ea4\u901a\u6444\u50cf\u673a\u548c\u9053\u8def\u7f51\u7edc\u4e2d\u7684\u4ea4\u901a\u4f20\u611f\u5668\u7b49\u3002\u76ee\u524d\uff0c\u6b64\u6570\u636e\u96c6\u4e2d\u5927\u7ea6\u6709300\u4e07\u8d77\u4e8b\u6545\u8bb0\u5f55\u3002","012882cf":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u63a5\u8fd1\u4e00\u534a\u7684\u4e8b\u6545\u90fd\u53d1\u751f\u5728\u4ea4\u901a\u4fe1\u53f7\u706f\u9644\u8fd1\uff0c\u5176\u6b21\u5c31\u662f\u4ea4\u53c9\u8def\u53e3\u548c\u5341\u5b57\u8def\u53e3\uff0c\u8fd9\u4e09\u5904\u5730\u70b9\u662f\u4e8b\u6545\u9ad8\u53d1\u6bb5\uff0c\u5176\u4ed6\u5730\u6bb5\u53d1\u751f\u4e8b\u6545\u7684\u6bd4\u7387\u90fd\u4f4e\u4e8e5%\u3002","f1d53057":"**\u627e\u5230\u7c7b\u522b\u578b\u6570\u636e\u2014\u2014Finding out columns with Catogerical Values**","f5bd06ad":"**\u76f8\u5173\u6027\u2014\u2014Correlation**","68471542":"\u7531\u4e0a\u56fe\u53ef\u77e5\uff0c43.0%\u7684\u4ea4\u901a\u4e8b\u6545\u90fd\u53d1\u751f\u4e8e\u7f8e\u56fd\u7684\u4e1c\u90e8\u65f6\u533a\uff0c27.1%\u7684\u4e8b\u6545\u53d1\u751f\u4e8e\u592a\u5e73\u6d0b\u65f6\u533a\uff0c24.5%\u7684\u4e8b\u6545\u53d1\u751f\u4e8e\u4e2d\u90e8\u65f6\u533a\uff0c5.4%\u7684\u4e8b\u6545\u53d1\u751f\u4e8e\u5c71\u5730\u65f6\u533a\u3002\u8fd9\u662f\u56e0\u4e3a\u7f8e\u56fd\u4e1c\u90e8\u7684\u4eba\u53e3\u5bc6\u96c6\u3001\u7ecf\u6d4e\u6d3b\u52a8\u9891\u7e41\uff0c\u4ea4\u901a\u4e5f\u8f83\u4e3a\u53d1\u8fbe\uff0c\u53d1\u751f\u4e8b\u6545\u91cf\u81ea\u7136\u4e5f\u8f83\u591a\uff1b\u5176\u6b21\u4e3a\u7f8e\u56fd\u7684\u897f\u90e8-\u592a\u5e73\u6d0b\u5730\u533a\u4ee5\u53ca\u4e2d\u90e8\u5730\u533a\uff1b\u800c\u5c71\u5730\u5730\u533a\u4eba\u53e3\u8f83\u5c11\uff0c\u7ecf\u6d4e\u76f8\u5bf9\u843d\u540e\uff0c\u53d1\u751f\u4e8b\u6545\u91cf\u8f83\u5c11\u3002","420e93c2":"\u7531\u4e0a\u56fe\uff0c\u53ef\u4ee5\u770b\u5230\u4e9a\u5229\u6851\u90a3\u5dde\uff0c\u5357\u5361\u7f57\u6765\u7eb3\u548c\u5fb7\u514b\u8428\u65af\u53d1\u751f\u4e8b\u6545\u7684\u4e25\u91cd\u7a0b\u5ea6\u6700\u9ad8\u3002\u4f46\u662f\u4e8b\u6545\u4e25\u91cd\u7a0b\u5ea6\u6700\u9ad8\u7684\u524d\u5341\u4e2a\u5dde\u53d1\u751f\u4e8b\u6545\u7684\u4e25\u91cd\u7a0b\u5ea6\u5e76\u6ca1\u6709\u663e\u8457\u5dee\u522b\u3002","5a52935e":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0cSD(\u5357\u8fbe\u79d1\u4ed6\u5dde)\uff0cWY(\u6000\u4fc4\u660e\u5dde)\u548cAR(\u963f\u80af\u8272\u5dde)\u53d1\u751f\u7684\u4ea4\u901a\u4e8b\u6545\u8f83\u4e3a\u4e25\u91cd\u3002","95483e94":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e8b\u6545\u591a\u53d1\u5728\u5de5\u4f5c\u65e5\uff0c\u8f83\u5c11\u53d1\u751f\u5728\u5468\u672b\uff0c\u8fd9\u53ef\u80fd\u548c\u4eba\u4eec\u7684\u5de5\u4f5c\u901a\u52e4\u4ee5\u53ca\u51fa\u884c\u4e60\u60ef\u6709\u5173\u3002","fc502ef7":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u7f8e\u56fd\u4e1c\u5317\u90e8\u53ca\u5bc6\u897f\u897f\u6bd4\u6cb3\u6d41\u57df\u53d1\u751f\u4e8b\u6545\u6700\u4e3a\u9891\u7e41\uff0c\u5176\u6b21\u5c31\u662f\u4e1c\u5357\u90e8\u3001\u4e2d\u90e8\u4e2a\u522b\u5dde\u4ee5\u53ca\u897f\u90e8\u7684\u52a0\u5dde\u7b49\u5730\uff0c\u8fd9\u4e5f\u548c\u7f8e\u56fd\u7684\u4eba\u53e3\u5206\u5e03\u3001\u7ecf\u6d4e\u6d3b\u52a8\u76f8\u543b\u5408\u3002","f99e50b8":"\u7531\u4e0a\u56fe\u53ef\u77e5\uff0c\u5728\u8be5\u6570\u636e\u96c6\u4e2d\uff0c\u670974.1%\u7684\u6570\u636e\u6765\u6e90\u4e8eMapQuest\uff0c24.5%\u662f\u6570\u636e\u6765\u6e90\u4e8eBing,\u5269\u4f591.4%\u7684\u6570\u636e\u6765\u6e90\u4e8eMapQuest-Bing\u3002\u53ef\u77e5\uff0c\u5927\u90e8\u5206\u6570\u636e\u90fd\u662f\u53d6\u81eaMapquest\u2014\u2014\u63d0\u4f9b\u7f51\u4e0a\u5730\u56fe\u7684\u7f8e\u56fd\u7f51\u7ad9\uff0c\u4e5f\u6709\u63a5\u8fd1\u56db\u5206\u4e4b\u4e00\u7684\u6570\u636e\u53d6\u81eaBing\u2014\u2014\u5fae\u8f6f\u7684\u641c\u7d22\u5f15\u64ce\u3002","d7c0cf51":"\u7f8e\u56fd\u672c\u571f48\u5dde\u5171\u6709\u56db\u4e2a\u65f6\u533a,\u4ece\u897f\u5f80\u4e1c\u4f9d\u6b21\u4e3a\u592a\u5e73\u6d0b\u65f6\u533a,\u5c71\u5730\u65f6\u533a,\u4e2d\u90e8\u65f6\u533a\u548c\u4e1c\u90e8\u65f6\u533a\u3002","65febb07":"**\u9009\u62e9\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u7684\u7279\u5f81\u2014\u2014Select a list of features for machine learning algorithms**","e4ab17a6":"**\u65f6\u533a\u2014\u2014Time Zone:**","73312fc3":"**\u5929\u6c14\u2014\u2014Weather**","4fe8e3eb":"**\u7f8e\u56fd\u5730\u56fe\u80cc\u666f\u6587\u5b57\u4e91\u2014\u2014WordCloud in the Context of USA Map**","804ef565":"**\u6570\u636e\u6e90\u2014\u2014DataSource https:\/\/www.kaggle.com\/sobhanmoosavi\/us-accidents**","47aec32c":"**\u5bfc\u5165\u6570\u636e\u2014\u2014Importing the dataset**","b84f8291":"\u7531\u4e0a\u56fe\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e8b\u6545\u53d1\u751f\u6570\u91cf\u5448\u9010\u5e74\u4e0a\u5347\u8d8b\u52bf\uff0c\u5e76\u4e14\u5b58\u5728\u5b63\u8282\u6027\u53d8\u5316\u8d8b\u52bf\u3002","dcb456b0":"**\u6563\u70b9\u56fe\u2014\u2014Scatter Plot**","1c7aa87d":"**\u4e8b\u6545\u53d1\u751f\u5730\u7edf\u8ba1\u2014\u2014The Analysis of Accidents Location**","6c613b1c":"**\u9884\u89c8\u7c7b\u522b\u578b\u6570\u636e\u2014\u2014Displaying Catogerical values**","12ec6f11":"**\u4e1c\/\u897f\u4fa7\u2014\u2014Side:**","ae702af9":"**\u663e\u793a\u6570\u636e\u2014\u2014Displaying the dataset**","37e0777a":"**\u4e25\u91cd\u7a0b\u5ea6\u2014\u2014Severity:**\n\u4ee51~4\u4e4b\u95f4\u7684\u5206\u6570\u663e\u793a\u4e8b\u6545\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c1\u8868\u793a\u5bf9\u4ea4\u901a\u7684\u5f71\u54cd\u6700\u5c0f(\u5373:\u4e8b\u6545\u53ea\u9020\u6210\u77ed\u6682\u5ef6\u8bef)\uff0c4\u8868\u793a\u5bf9\u4ea4\u901a\u9020\u6210\u91cd\u5927\u5f71\u54cd(\u5373\uff1a\u4e8b\u6545\u9020\u6210\u957f\u671f\u5ef6\u8bef)\u3002","55afefb1":"**\u4e8b\u6545\u7edf\u8ba1\u2014\u2014Accident Count**","a0dd6fcd":"**\u4e0d\u540c\u5dde\u53d1\u751f\u7684\u4e8b\u6545\u91cf\u2014\u2014Accident in different states**","2bd7747f":"\u7531\u4e0a\u56fe\u53ef\u77e5\uff0c\u53d1\u751f\u4e8e\u6674\u6717\u5929\u6c14\u4e0b\u7684\u4e8b\u6545\u6570\u6700\u591a\uff0c\u5360\u6bd4\u4e3a36.2%\uff0c\u8fd9\u53ef\u80fd\u4e0e\u6674\u6717\u5929\u6570\u8f83\u591a\u4ee5\u53ca\u5929\u6c14\u6674\u6717\u65f6\u4eba\u4eec\u5f00\u8f66\u4e13\u6ce8\u5ea6\u4e0d\u9ad8\u6709\u5173\u3002\u5176\u4f59\u56db\u79cd\u5929\u6c14\u6761\u4ef6\u4e0b\u53d1\u751f\u4e8b\u6545\u91cf\u8f83\u4e3a\u63a5\u8fd1\uff0c\u90fd\u572810%\u4e0e20%\u4e4b\u95f4\u3002"}}