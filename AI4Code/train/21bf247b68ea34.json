{"cell_type":{"dcc50f05":"code","d678a38f":"code","677a9a53":"code","68143fb8":"code","2ccecbf6":"code","a8212f49":"code","002b2707":"code","1e66fac2":"code","1e5f68b3":"markdown","847ec452":"markdown","65c37841":"markdown","140598d3":"markdown","186ac3ee":"markdown","32d12e8f":"markdown","7fcf1643":"markdown"},"source":{"dcc50f05":"import re\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.animation as animation\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nfrom tqdm import tqdm\n\npd.set_option('display.max_columns', 1000)\npd.set_option('display.max_colwidth', 1000)\npd.set_option('display.max_rows', 1000)\nplt.rcParams[\"animation.html\"] = \"jshtml\"\nplt.rcParams['figure.dpi'] = 150  \nplt.ioff()","d678a38f":"dataDir = \"\/kaggle\/input\/nfl-big-data-bowl-2021\/\"\ngames = pd.read_csv(dataDir+\"games.csv\")\nplayers = pd.read_csv(dataDir+\"players.csv\")\nplays = pd.read_csv(dataDir+\"plays.csv\")\nweeks = [] \nfor i in range(1,18):\n    weeks.append(pd.read_csv(dataDir+\"week{}.csv\".format(i)))","677a9a53":"def posession(plays_row):\n    if games.query(\"gameId=={}\".format(plays_row.gameId)).visitorTeamAbbr.iloc[0] == plays_row.possessionTeam:\n        return 'away'\n    else:\n        return 'home'\n    \ndef get_week(gameID, playID):\n    return games.query(\"gameId=={}\".format(gameID)).iloc[0].week - 1\n    \ndef get_week_df(gameID, playID):\n    wk = get_week(gameID, playID)\n    week_df = weeks[wk]\n    information = week_df[(week_df.playId==playID)&(week_df.gameId==gameID)]\n    return information, wk\n\n# this function requires 'plays' dataframe\ndef animate_play(gameID, playID):\n    plt.close('all')\n    fig, ax = plt.subplots()\n    fig.set_figheight(7)\n    fig.set_figwidth(14)\n    \n    information, wk = get_week_df(gameID, playID)\n    max_frame = information.frameId.max()\n    print(\"GAME: {}\\tPLAY: {}\\tWEEK: {}\\tFRAME: {}\".format(gameID, playID, wk, max_frame))\n    \n    home, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C0')\n    away, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C1')\n    foot, = ax.plot([],[], linestyle='None', marker='o', markersize=12, c='C2')\n    lines = [home, away, foot]\n    \n    def draw_field():\n        ax.set_xlim(0, 120)\n        ax.set_ylim(-5, 58.3)\n        # Endzones\n        ax.add_patch(Rectangle((  0, 0), width=10, height=53.3, alpha=0.5, color='grey'))\n        ax.add_patch(Rectangle((110, 0), width=10, height=53.3, alpha=0.5, color='grey'))\n        # Sidelines\n        ax.plot([0,120],[0,0], c='grey', linewidth=2)\n        ax.plot([0,120],[53.3,53.3], c='grey', linewidth=2)\n        for i in range(10, 120, 10):\n            # 10 Yard lines\n            ax.plot([i,i],[0,53.3], c='grey', linewidth=2)\n            if abs(60-i) <=40:\n                # Numbers\n                ax.text(i-2.5, 12, str(50-abs(60-i)), color=\"grey\", fontsize=24)\n                ax.text(i-2.5, 41.3, str(50-abs(60-i)), color=\"grey\", fontsize=24, rotation=180)\n        # Hash marks\n        for i in range(10, 110):\n            ax.plot([i,i], [0, 1], c='grey')\n            ax.plot([i,i], [23, 24], c='grey')\n            ax.plot([i,i], [29.3, 30.3], c='grey')\n            ax.plot([i,i], [52.3, 53.3], c='grey')\n        \n        # Drawing the line of scrimmage\n        scrimmage = information.query(\"frameId==1 and displayName=='Football'\").iloc[0].x\n        ax.plot([scrimmage,scrimmage],[0, 53.3], c='darkblue', linewidth=2)\n        \n        # Drawing the First Down Line\n        play_information = plays.query(\"playId=={} and gameId=={}\".format(playID, gameID)).iloc[0]\n        ax.set_title(play_information.playDescription)\n        home_team = games[games.gameId==gameID].iloc[0].homeTeamAbbr\n        poss_team = play_information.possessionTeam\n        team_query_term = \"home\"\n        if home_team != poss_team:\n            team_query_term = \"away\"\n        shit = information.query(\"frameId==1 and team=='{}'\".format(team_query_term)).iloc[0].x\n        first_down_line = scrimmage - play_information.yardsToGo\n        if shit < scrimmage:\n            first_down_line = scrimmage + play_information.yardsToGo\n        ax.plot([first_down_line,first_down_line],[0, 53.3], c='gold', linewidth=2)\n        return lines\n\n    def plot_players(t):\n        home_filtered = information[(information.frameId==t)&(information.team==\"home\")]\n        away_filtered = information[(information.frameId==t)&(information.team==\"away\")]\n        foot_filtered = information[(information.frameId==t)&(information.team==\"football\")]\n        home.set_data(home_filtered.x.array, home_filtered.y.array)\n        away.set_data(away_filtered.x.array, away_filtered.y.array)\n        foot.set_data(foot_filtered.x.array, foot_filtered.y.array)\n        lines = [home, away, foot]\n        \n        if t%10 == 0:\n            print(t,end = ',')\n        return lines\n    \n    return animation.FuncAnimation(fig, plot_players, frames=range(1, max_frame+1), init_func=draw_field, blit=True)\n    #return animation.FuncAnimation(fig, plot_players, frames=range(20, 21), init_func=draw_field, blit=True)","68143fb8":"cover_ones = []\ncover_twos = []\ninitial_name_finding_re = \"(?!(?:No Huddle|Shotgun|sack|Pass|Aborted|Punt|Field|Testaverde|Hamstring|including))([a-zA-Z\\.\\s\\-\\',;])+\"\ninitial_re = \"(\\[\"+initial_name_finding_re+\"\\]|\\(\"+initial_name_finding_re+\"\\)|Coverage [0-9a-zA-Z\\-\\'\\s]+(\\.|\\,)|INTERCEPTED by [A-Z]{1}\\.[A-Z]{1}[-\\'a-zA-Z]+\\s)\"\n\nfor i in tqdm(range(len(plays))):\n    current_play = plays.iloc[i]\n    \n    matchesFromPlayDescription = re.search(initial_re, current_play.playDescription)\n    if matchesFromPlayDescription and current_play.passResult != 'S':\n        matchesFromPlayDescription = re.sub(\"([\\s\\(\\)\\]\\[\\-0-9]|INTERCEPTED by|Coverage by|Coverage |Sr\\.|Jr\\.)\" ,'',matchesFromPlayDescription.group(0)).strip()\n        potentials = re.split(\"[,;]\",matchesFromPlayDescription)\n        \n        # Get the appropriate week\\d.csv\n        play_df, _ = get_week_df(current_play.gameId, current_play.playId)\n        \n        # filter by the qb's team, if there is a qb on the field\n        qb_df = play_df.query(\"position=='QB'\")\n        if len(qb_df) > 0:\n            qb_team = qb_df.team.iloc[0]\n            play_df = play_df[play_df.team!=qb_team]\n\n        # iterate over the list of names\n        for index in range(len(potentials)-1, -1, -1):\n            p = potentials[index]\n            # When the split is empty \n            if len(p) == 0:\n                potentials.pop(index)\n                continue\n\n            shat = p.split(\".\")\n            spec_name_re = \"\"\n            if len(shat) == 1:\n                spec_name_re = \"^[-\\'\\.a-zA-Z]+ {}$\".format(shat[0])\n            elif len(shat) == 2:\n                spec_name_re = \"^{}[-\\'\\.a-zA-Z]+ {}$\".format(shat[0], shat[1])\n            else:\n                print(index, potentials)\n                print(current_play.playDescription)\n                print(\"Uexpected number of periods#####################################################\")\n            \n            # Search from play_df (week\\d.csv)\n            possible_fullnames_from_playdf = play_df[play_df.displayName.str.contains(spec_name_re, regex=True)].displayName.unique().tolist()\n            if len(possible_fullnames_from_playdf) == 1:\n                potentials[index] = possible_fullnames_from_playdf[0]\n            else:\n                potentials.pop(index)\n    if len(potentials) == 1:\n        cover_ones.append(potentials[0])\n        cover_twos.append('')\n    elif len(potentials) == 2: \n        cover_ones.append(potentials[0])\n        cover_twos.append(potentials[1])\n    else:\n        cover_ones.append('')\n        cover_twos.append('')\n\nplays = plays.assign(coverOne=cover_ones,coverTwo=cover_twos)","2ccecbf6":"def donut_chart(series, top_k=10):\n    plt.close('all')\n\n    shit = pd.Series(series).value_counts()\n    shit.iloc[0] += shit[top_k:].sum()\n    shit = shit[1:top_k]\n    shat = shit.plot.pie(textprops={'fontsize': 5})\n    shat.set_xticklabels(shat.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n    my_circle=plt.Circle( (0,0), 0.8, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n\n    plt.show()","a8212f49":"cover_list = plays.coverOne.tolist() + plays.coverTwo.tolist()\ndonut_chart(cover_list)\npd.Series(cover_list).value_counts()[:10]","002b2707":"completions = plays.query(\"passResult=='I'\")\ncompletions = pd.Series(completions.coverOne.tolist() + completions.coverTwo.tolist())\ndonut_chart(completions)\npd.Series(completions).value_counts()[:10]","1e66fac2":"completions = plays.query(\"passResult=='IN'\")\ncompletionSeries = pd.Series(completions.coverOne.tolist() + completions.coverTwo.tolist())\ndonut_chart(completionSeries)\ncompletionSeries.value_counts()[:10]","1e5f68b3":"# How about Intercepted plays?","847ec452":"# Conclusion\nUsing this notebook and the [notebook before](https:\/\/www.kaggle.com\/beomjunbae\/parsing-targets), we now have the full names of covers and the targets. More insightful analysis using both of this columns coming soon.","65c37841":"# How about incomplete passes?\nThe above was looking at all the plays that the covers were involved. How about the plays that resulted in incompletes?","140598d3":"# Some functions that I need\nMostly Visualizations","186ac3ee":"# Parsing for Full Names of Defensive Players\nBy defensive player, I mean the player who is covering the target. To find how to get the full names of the target players, look at my [previous notebook](https:\/\/www.kaggle.com\/beomjunbae\/parsing-targets). \n\nIn this notebook, we do very similar routine, but now, we are parsing for the full names of the covers. Here is the routine I used:","32d12e8f":"# Simple Analysis","7fcf1643":"# Parsing Cover\nThis is the notebook for parsing 'playDescription' for defensive players' full name for every play."}}