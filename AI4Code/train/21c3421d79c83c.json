{"cell_type":{"c9638b91":"code","342fcb11":"code","6495824e":"code","2aaf11e8":"code","5026c303":"code","a54ffba2":"code","fde4ac71":"code","404a2fbd":"code","6ed9386f":"code","1a24ff76":"code","b186a2ae":"code","0412bb70":"code","27967fc7":"code","a46d1a5e":"code","5d1725e5":"code","498df754":"code","d2176254":"code","9e5c9130":"code","c5748706":"code","ba3c3325":"code","e43f928d":"code","98d361c6":"code","b8eb48a5":"code","28b8400b":"code","d0753691":"code","1a31ef3b":"code","c81f4f0f":"code","a5dd4c62":"code","38fb0016":"code","24c99801":"code","f4d60faa":"code","a0c18ea6":"code","be1d8a6c":"code","08c7675c":"code","6e68744b":"code","9b898f3b":"code","7c2bf0a2":"code","f0cf8984":"code","d2e0f0f3":"markdown","9b29ab9a":"markdown","23693d3b":"markdown","02f41dcb":"markdown","9bcb60d8":"markdown","0d92d61b":"markdown","20501f1d":"markdown","13fd16b4":"markdown","cb833a42":"markdown","5560bf6b":"markdown","c5ff8999":"markdown","c4642d03":"markdown","b65990e2":"markdown"},"source":{"c9638b91":"!pip install dexplot -q\n!pip install datasist -q","342fcb11":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\nimport dexplot as dxp\nimport plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nimport datasist as ds\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","6495824e":"DATA_PATH = '..\/input\/abzoobaassessmentdata\/'","2aaf11e8":"train_data = pd.read_csv(DATA_PATH + 'train.csv')\ntest_data = pd.read_csv(DATA_PATH + 'test.csv')\nsubmission_data = pd.read_csv(DATA_PATH + 'sample_submission.csv')","5026c303":"print(f\"Train Rows and columns {train_data.shape[0]}, {train_data.shape[1]}\")\nprint(f\"Test Rows and columns {test_data.shape[0]}, {test_data.shape[1]}\")\n","a54ffba2":"train_data.head()","fde4ac71":"test_data.head()","404a2fbd":"train_data.info()","6ed9386f":"test_data.info()","1a24ff76":"ds.structdata.describe(train_data)","b186a2ae":"null_feat = pd.DataFrame(len(train_data['id']) - train_data.isnull().sum(), columns = ['Count'])\n\ntrace = go.Bar(x = null_feat.index, y = null_feat['Count'] ,opacity = 0.8, marker=dict(color = 'green',\n        line=dict(color='#000000',width=1.5)))\n\nlayout = dict(title =  \"Missing Values in Training Data\")\n                    \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","0412bb70":"ds.structdata.display_missing(train_data)","27967fc7":"ds.structdata.display_missing(test_data)","a46d1a5e":"ds.visualizations.histogram(train_data)","5d1725e5":"ds.visualizations.scatterplot(train_data,target='rent')","498df754":"dxp.kde('rent', data=train_data,figsize=(10,6),title='Distribution of Rent',cmap='picnic')","d2176254":"train_data.info()","9e5c9130":"property_data = train_data.dropna(subset=['property_type'])\nF=property_data['property_type'].value_counts().sort_values(ascending=False)\nlabel=F.index\nsize=F.values\ncolors = ['skyblue', '#FEBFB3', '#96D38C', '#D0F9B1', 'gold']\ntrace =go.Pie(labels=label, values=size, marker=dict(colors=colors), hole=.1)\ndata_trace = [trace]\nlayout = go.Layout(title='Distribution of Property Type')\nfig=go.Figure(data=data_trace,layout=layout)\npy.iplot(fig)","c5748706":"fig = px.scatter(property_data, x=\"rent\", y=\"hospital_miles\", color=\"property_type\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","ba3c3325":"cnt_srs = train_data['bed'].value_counts()\n\nplt.figure(figsize=(10,8))\nsns.barplot(cnt_srs.index, cnt_srs.values, alpha=0.8, color=color[5])\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('bedrooms', fontsize=12)\nplt.title('Count for Bedrooms Available')\nplt.show()","e43f928d":"cnt_bath = train_data['bath'].value_counts()\n\nplt.figure(figsize=(10,8))\nsns.barplot(cnt_bath.index, cnt_bath.values, alpha=0.8, color=color[4])\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('Bathrooms', fontsize=12)\nplt.title('Count for Bathrooms Available')\n\nplt.show()","98d361c6":"fig = px.scatter(train_data, x=\"rent\", y=\"sqft\", trendline=\"ols\",color = 'bed',color_continuous_scale='viridis')\nfig.show()","b8eb48a5":"train_data.head()","28b8400b":"fig, axs = plt.subplots(ncols=3,figsize = (15,8),sharey=True)\nsns.regplot(x='cemetery_dist_miles', y='rent', data=train_data, ax=axs[0])\nsns.regplot(x='nationalhighway_miles', y='rent', data=train_data, ax=axs[1])\nsns.regplot(x='railline_miles',y='rent', data=train_data, ax=axs[2])\nplt.show()","d0753691":"ax = sns.scatterplot(x='lotsize',y='rent',data=train_data,palette='magma',hue='garage')\nax.set_title('Scatter plot of rent and lotsize')\n\nsns.lmplot(x=\"Census_MedianIncome\", y=\"rent\", hue=\"property_type\", data=property_data, palette = 'magma', size = 8)","1a31ef3b":"F=train_data.groupby('county').Crime_Rate.mean().to_frame().sort_values(by='Crime_Rate', ascending=False).round(3)\ntrace=go.Bar(x=F.index, y=F.Crime_Rate, marker=dict(color = F.Crime_Rate, colorscale='tropic',showscale=True))\nddata=[trace]\nlayout = go.Layout(xaxis=dict(tickangle=45),title='Average Crime Rate County wise', yaxis = dict(title = 'Count'))\nfig = go.Figure(data=ddata, layout=layout)\npy.iplot(fig)","c81f4f0f":"dxp.bar(x='yearbuilt', y='rent', data=train_data, aggfunc='mean',\n        x_order='top 10',title='Top 10 year with Highest Rent',sort_values='desc')","a5dd4c62":"dxp.bar(x='city', y='rent', data=train_data, aggfunc='mean',\n        split='property_type', split_order='desc',x_order='top 10',figsize=(10,5),title='Top 10 Cities with Highest Rent')","38fb0016":"yr=train_data.groupby('city').Census_MedianIncome.mean().to_frame().sort_values(by='Census_MedianIncome', ascending=False).round(3)[:10]\nyr.style.background_gradient()","24c99801":"fig = go.Figure(data=go.Scattergeo(\n        lon = property_data['longitude'],\n        lat = property_data['latitude'],\n        text= property_data['city'] + '--' + property_data['state'] + '--' + 'Rent: ' + property_data['rent'].astype(str),\n        mode = 'markers',\n        marker = dict(symbol = 'square',colorscale = 'portland'),\n        marker_color = property_data['rent'],\n\n        ))\n\nfig.update_layout(\n        title = 'Top Rental in US<br>(Hover for City name and Rental)',\n        geo_scope='usa',\n    )\nfig.show()","f4d60faa":"cat_cols = ds.structdata.get_cat_feats(train_data)\nnum_cols = ds.structdata.get_num_feats(train_data)","a0c18ea6":"num_cols = num_cols[3:11]\nnum_cols.append('rent')","be1d8a6c":"sns.set()\nsns.pairplot(train_data[num_cols], size = 2.5)\nplt.show();","08c7675c":"f = pd.melt(train_data, value_vars=num_cols)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False)\ng = g.map(sns.distplot, \"value\")","6e68744b":"county_data = property_data.dropna(subset=['county'])\nfig = px.sunburst(county_data, path=['state','county'], values='rent',\n                  color='Census_MedianIncome', hover_data=['rent'],title='Sunburst County wise')\nfig.show()","9b898f3b":"fig = plt.figure(figsize=(12,12))\n### Number of occurrences\nsns.countplot(train_data.bed, ax = plt.subplot(221));\nplt.xlabel('Number of Bedrooms');\nplt.ylabel('Number of occurrences');\n### Average number of Bedrooms per Property Type\nsns.barplot(x='property_type', y='bed', data=train_data,ax = plt.subplot(222));\nplt.xlabel('Property Type');\nplt.ylabel('Average Number of Bedrooms');\n### Average Property Type for every number of bedrooms\nsns.pointplot(x=\"bed\", y=\"property_type\", data=train_data,markers='x',color='red', ax = plt.subplot(212));\nplt.xlabel('Number of Bedrooms');\nplt.ylabel('Average Property Type');","7c2bf0a2":"fig = plt.figure(figsize=(12,12))\n### Number of occurrences\nsns.countplot(train_data.bath, ax = plt.subplot(221));\nplt.xlabel('Number of Bathrooms');\nplt.ylabel('Number of occurrences');\n### Average number of bathroom per Property Type\nsns.barplot(x='property_type', y='bath', data=train_data,ax = plt.subplot(222));\nplt.xlabel('Property Type');\nplt.ylabel('Average Number of Bathrooms');\n### Average Property Type for every number of bathroom\nsns.pointplot(x=\"bath\", y=\"property_type\", data=train_data,markers='x',color='green', ax = plt.subplot(212));\nplt.xlabel('Number of bathroom');\nplt.ylabel('Average Property Type');","f0cf8984":"Fg=train_data.garage.value_counts().sort_values(ascending=False)[:15]\n\ntrace1 = go.Bar(x=Fg.index,y=Fg.values,marker=dict(color = 'red'))\n                                                      \nFp = train_data.pool.value_counts().sort_values(ascending=False)[:15]\n\ntrace2 = go.Bar(x=Fp.index, y=Fp.values, marker=dict( color ='blue' ))\n\nFpp=train_data.fireplace.value_counts().sort_values(ascending=False)[:15]\n\ntrace3 = go.Bar(x=Fpp.index,y=Fpp.values,marker=dict(color = 'green'))\n                                                      \nFpa = train_data.patio.value_counts().sort_values(ascending=False)[:15]\n\ntrace4 = go.Bar(x=Fpa.index, y=Fpa.values, marker=dict( color ='pink' ))\n \nfig = make_subplots(rows=2, cols=2,subplot_titles=('Garage','Pool','Fireplace','Patio'))                                                        \n \nfig.add_trace(trace1, 1,1) \nfig.add_trace(trace2, 1,2) \nfig.add_trace(trace3, 2,1)  \nfig.add_trace(trace4, 2,2)  \n\nfig['layout'].update(yaxis = dict(title = 'Values'), height=600, width=900, showlegend=False)\npy.iplot(fig)","d2e0f0f3":"> Inference -  As Infered from Scatter plots most of features are not positively correlated to dependent variable 'rent","9b29ab9a":"## 1.1 Univariate & Bivariate Analysis","23693d3b":"# Usecase - Predicting Rent of the Property\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Notebook Content:<\/h3>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#one_\" role=\"tab\" aria-controls=\"profile\">Exploratory Data Analysis<span class=\"badge badge-primary badge-pill\"><\/span><\/a>","02f41dcb":"> Inference Distribution of rent w.r.t sqft does not seems correalted at all","9bcb60d8":"> Inference There are some outliers observed in reg plots for different miles features","0d92d61b":"## 1.2 Multivariate Analysis","20501f1d":" > Inference Philadelphia has highest crime rate followed by York and jefferson county","13fd16b4":"> Inference It is obivious that property have at most 4 bedrooms and bathrooms!","cb833a42":"## Stage I - Exploratory Data Analysis \n* Univariate Anakysis\n* Bivariate Analysis\n* Multivariate Analysis","5560bf6b":"> Inference year 1915 has highest rent  followed by 2015 and 2014 ","c5ff8999":"> Inference - Intersting to see that Condo and Single family resident has high share in data distribution","c4642d03":"## END","b65990e2":"> Inference Philadelphia has highest rent  followed by Pittisburgh and Harrisburg "}}