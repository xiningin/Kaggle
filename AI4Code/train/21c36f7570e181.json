{"cell_type":{"88a1360d":"code","575010ae":"code","46651f29":"code","5e5134f2":"code","e4e08df4":"code","5779c6c1":"code","ba04762a":"code","4bd5f357":"code","2ea6d9a3":"code","f7cea410":"code","acacd257":"code","76f62143":"code","9f65d04a":"code","77d46112":"code","790e3ac2":"code","a2cd22e7":"code","6974c49e":"code","26a94654":"code","8a217426":"code","4e3ac809":"code","4ed83552":"code","743fb465":"code","a20db150":"code","ee9ffbae":"code","37921841":"code","d57b73d7":"code","b3c405f6":"code","8af12a0d":"code","a30210cd":"code","c5ad8357":"code","e0720d03":"code","9d3bc3c5":"code","efac95fe":"code","e27d96ea":"code","8f8afdf9":"code","d07665db":"code","336d7fea":"code","48f63c5b":"code","1c384db3":"code","3c438f5a":"code","5a36cd21":"code","15950b18":"code","e66b7485":"code","139deab2":"code","f5bf0f2f":"code","bba0522b":"code","75a41a7a":"code","35b3d36e":"code","c7703bac":"code","f52bc678":"code","61b6278d":"code","1e070be5":"code","3a4bdaf7":"code","9f798114":"code","ed5e6762":"code","29a684a4":"code","a03947c7":"code","bc71bca4":"code","e8f3da7c":"code","38374cc9":"code","d85c9f41":"code","f1866531":"code","f76b3bab":"code","57c86b78":"code","b5ced4a0":"code","7a135565":"code","215725d6":"code","d90bf8ef":"code","bf6e2964":"code","ad8ea90c":"code","dc8e3c06":"code","9a7e34c6":"code","052db38a":"code","f8ec99fd":"code","ac552b0f":"markdown","8cf5feb5":"markdown","0cdc93e5":"markdown","94328c27":"markdown","8998a382":"markdown","8b97afa0":"markdown","be5f46a1":"markdown","9ffe4746":"markdown","10e573b2":"markdown","e4959d8b":"markdown","db8f78ba":"markdown","9de41cc4":"markdown","773e1f6f":"markdown","008167cb":"markdown"},"source":{"88a1360d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","575010ae":"train = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ntest = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","46651f29":"print(train.shape)\ntrain.head()","5e5134f2":"print(test.shape)\ntest.head()","e4e08df4":"train = train.rename(columns = {'Unnamed: 0': 'id'})\ntrain.head()","5779c6c1":"#train = train.drop([\"Unnamed: 0\"], axis = 1)\n#train.head()\n\n#train_data = train_data.iloc[:,1:]","ba04762a":"train.info()","4bd5f357":"train.describe()","2ea6d9a3":"train.isnull().any()","f7cea410":"train.isnull().sum()","acacd257":"(train.isnull().sum() \/ len(train)) * 100","76f62143":"print(\"Shape of train data Before dropping any Row: \",train.shape)\ntrain = train[train['Mileage'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Engine : \",train.shape)\ntrain = train[train['Power'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Power  : \",train.shape)\ntrain = train[train['Seats'].notna()]\nprint(\"Shape of train data After dropping Rows with NULL values in Seats  : \",train.shape)","9f65d04a":"train = train.reset_index(drop=True)","77d46112":"train.columns","790e3ac2":"print(train['Name'].unique())\nprint(train['Location'].unique())\nprint(train['Fuel_Type'].unique())\nprint(train['Transmission'].unique())\nprint(train['Owner_Type'].unique())","a2cd22e7":"train['Name'].value_counts()","6974c49e":"train['Name'] = train['Name'].str.split().str.get(0)\ntrain.head()","26a94654":"train['Name'].unique()","8a217426":"train.Name[train.Name == 'Isuzu'] = 'ISUZU'\ntrain['Name'].unique()","4e3ac809":"train['Fuel_Type'].value_counts()","4ed83552":"train['Fuel_Type'] = train['Fuel_Type'].replace(['Diesel','Petrol', 'CNG', 'LPG'], [0, 1, 2, 3])\ntrain.head()","743fb465":"train['Transmission'].value_counts()","a20db150":"train['Transmission'] = train['Transmission'].replace(['Manual','Automatic'], [0, 1])\ntrain.head()","ee9ffbae":"train['Owner_Type'].value_counts()","37921841":"train['Owner_Type'] = train['Owner_Type'].replace(['First','Second', 'Third', 'Fourth & Above'], [0, 1, 2, 3])\ntrain.head()","d57b73d7":"train['Mileage'].value_counts()","b3c405f6":"mileage_split = train['Mileage'].str.split(\" \")\n\ntrain['Mileage'] = mileage_split.str.get(0)\ntrain.head()\n\n#train.Mileage = train.Mileage.str.split().str.get(0).astype('float')","8af12a0d":"train['Engine'].value_counts()","a30210cd":"train['Engine'] = train['Engine'].str.strip(' CC').astype(float)\ntrain.head()\n\n#train.Engine = train.Engine.str.split().str.get(0).astype('int', errors='ignore')","c5ad8357":"train['Power'].value_counts()","e0720d03":"power_split = train['Power'].str.split(\" \")\n\ntrain['Power'] = power_split.str.get(0)\ntrain.head()\n\n#train.Power = train.Power.str.split().str.get(0).astype('float', errors='ignore')","9d3bc3c5":"train['Power'].str.contains(\"null\")","efac95fe":"position = []\nfor i in range(train.shape[0]):\n    if train['Power'][i]=='null':\n        position.append(i)\n        \ntrain = train.drop(train.index[position])\ntrain = train.reset_index(drop=True) \n\ntrain.head()","e27d96ea":"train['Name'].value_counts()","8f8afdf9":"train['Name'].describe()","d07665db":"# \uc6d0\ud56b \uc778\ucf54\ub529\n\nname = pd.get_dummies(train['Name'], prefix='Name')\nname.head()","336d7fea":"train = pd.concat([train,name], axis=1)\ntrain.head()","48f63c5b":"train['Location'].value_counts()","1c384db3":"train['Location'].describe()","3c438f5a":"# \uc6d0\ud56b \uc778\ucf54\ub529\n\nlocation = pd.get_dummies(train['Location'], prefix='Location')\nlocation.head()","5a36cd21":"train = pd.concat([train,location], axis=1)\ntrain.head()","15950b18":"f, ax = plt.subplots(figsize=(15,8))\nsns.distplot(train['Price'])\nplt.xlim([0,160])","e66b7485":"var = \"Name\"\nplt.figure(figsize=(20, 10))\nsns.catplot(x=var, kind=\"count\", palette=\"ch:.25\", height=8, aspect=2, data=train);\nplt.xticks(rotation=90);","139deab2":"#sns.countplot(data=train, x=\"Fuel_Type\", hue=\"Kilometers_Driven\")\n","f5bf0f2f":"var = \"Location\"\nplt.figure(figsize=(20, 10))\nsns.catplot(x=var, kind=\"count\", palette=\"ch:.25\", height=8, aspect=2, data=train);\nplt.xticks(rotation=90);","bba0522b":"plt.figure(figsize=(20,20))\nsns.heatmap(train.corr(),annot=True,cmap='coolwarm')\n\nplt.show()","75a41a7a":"train.corr()","35b3d36e":"train.columns","c7703bac":"X = train.iloc[:,3:]\nX.drop([\"Kilometers_Driven\"],axis=1,inplace=True)\nX.drop([\"New_Price\"],axis=1,inplace=True)\nX.head()","f52bc678":"X.shape","61b6278d":"y = train.loc[:,['Kilometers_Driven']]\ny.head()","1e070be5":"y.shape","3a4bdaf7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=31)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","9f798114":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","ed5e6762":"model_1 = DecisionTreeRegressor(max_depth=7)\nmodel_2 = RandomForestRegressor(n_estimators=3000, max_depth=7, max_features=0.7, random_state=31, n_jobs=-1)\nmodel_3 = LinearRegression()\nmodel_4 = GradientBoostingRegressor()","29a684a4":"import numpy as np\nfrom sklearn import metrics\nfrom sklearn.metrics import make_scorer\n\ndef rmse(predict, actual):\n    predict = np.array(predict)\n    actual = np.array(actual)\n    \n    difference = predict - actual\n    difference = np.square(difference)\n    \n    mean_difference = difference.mean()\n    \n    return score\n\nrmse_scorer = make_scorer(rmse)","a03947c7":"model_1.fit(X_train, y_train)\nprediction = model_1.predict(X_test)\n\nprint(\"Accuracy on Traing set: \",model_1.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",model_1.score(X_test,y_test))","bc71bca4":"np.sqrt(metrics.mean_squared_error(y_test, prediction))","e8f3da7c":"model_2.fit(X_train, y_train)\nprediction = model_2.predict(X_test)\n\nprint(\"Accuracy on Traing set: \",model_2.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",model_2.score(X_test,y_test))","38374cc9":"np.sqrt(metrics.mean_squared_error(y_test, prediction))","d85c9f41":"model_3.fit(X_train, y_train)\nprediction = model_3.predict(X_test)\n\nprint(\"Accuracy on Traing set: \",model_3.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",model_3.score(X_test,y_test))","f1866531":"np.sqrt(metrics.mean_squared_error(y_test, prediction))","f76b3bab":"model_4.fit(X_train, y_train)\nprediction = model_4.predict(X_test)\n\nprint(\"Accuracy on Traing set: \",model_4.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",model_4.score(X_test,y_test))","57c86b78":"np.sqrt(metrics.mean_squared_error(y_test, prediction))","b5ced4a0":"model = DecisionTreeRegressor(criterion=\"mse\", splitter=\"best\", max_depth=7, min_samples_split=2, min_samples_leaf=1)","7a135565":"model.fit(X_train, y_train)\nprediction = model.predict(X_test)\n\nprint(\"Accuracy on Traing set: \",model.score(X_train,y_train))\nprint(\"Accuracy on Testing set: \",model.score(X_test,y_test))","215725d6":"from sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nprint(\"\\t\\tError Table\")\nprint('Mean Absolute Error      : ', metrics.mean_absolute_error(y_test, prediction))\nprint('Mean Squared  Error      : ', metrics.mean_squared_error(y_test, prediction))\nprint('Root Mean Squared  Error : ', np.sqrt(metrics.mean_squared_error(y_test, prediction)))\nprint('R Squared Error          : ', metrics.r2_score(y_test, prediction))","d90bf8ef":"#import numpy as np\n#from sklearn import metrics\n#from sklearn.metrics import make_scorer\n#\n#def rmse(predict, actual):\n#    predict = np.array(predict)\n#    actual = np.array(actual)\n#    \n#    difference = predict - actual\n#    difference = np.square(difference)\n#    \n#    mean_difference = difference.mean()\n#    \n#    return score\n#\n#rmse_scorer = make_scorer(rmse)","bf6e2964":"#from sklearn.linear_model import LinearRegression\n#from sklearn.model_selection import cross_val_score\n#\n#max_depth_list = [3, 6, 9, 12, 15, 18, 21]\n#max_features_list = [0.1, 0.3, 0.5, 0.7, 0.9]\n#\n#hyperparameters_list = []\n#for max_depth in max_depth_list:\n#    for max_features in max_features_list:\n#        model = DecisionTreeRegressor(max_depth = max_depth, \n#                                      max_features = max_features, \n#                                      random_state=31)\n#        \n#        score = cross_val_score(model, X_train, y_train, cv=5,\n#                                scoring=rmse_scorer).mean()\n#        \n#        hyperparameters_list.append({\n#            'score':score,\n#            'max_depth':max_depth,\n#            'max_feature':max_features\n#        })\n#        \n#        print('\ud604\uc7ac Score = {0:5f}'.format(score))\n#        \n#hyperparameters_list","ad8ea90c":"#result = pd.DataFrame.from_dict(hyperparameters_list)\n#result = result.sort_values(by=\"score\")\n#result.head()","dc8e3c06":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train_scale = sc.fit_transform(X_train)\ny_train_scale = sc.fit_transform(y_train)\nX_test_scale = sc.fit_transform(X_test)\ny_test_scale = sc.fit_transform(y_test)","9a7e34c6":"import keras\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout","052db38a":"act = 'relu'\nopt = 'Adam'\nlos = 'mean_squared_error'\n\nmodel5 = Sequential()\nmodel5.add(Dense(128, activation = act))\nmodel5.add(Dense(128, activation = act))\nmodel5.add(Dense(128, activation = act))\nmodel5.add(Dense(1, activation = act))\nmodel5.compile(optimizer = opt, loss = los, metrics = ['mse'])\n\n\n#model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nbatch_size = 20\nepoch = 10\nhistory = model5.fit(X_train_scale, y_train_scale, epochs = epoch, batch_size = batch_size, verbose = 1, validation_data=(X_test_scale, y_test_scale))","f8ec99fd":"score = model5.evaluate(X_test_scale, y_test_scale, batch_size=128)\nprint('\\nAnd the Score is ', score[1] * 100, '%')","ac552b0f":"**HyperParameter Tunning**","8cf5feb5":"**Feautre Engineering**","0cdc93e5":"**Data Visualization**","94328c27":"**Regression**","8998a382":"RandomForestRegressor","8b97afa0":"GradientBoostingRegressor","be5f46a1":"DecisionTreeRegressor","9ffe4746":"**Prepare Test Data**","10e573b2":"**\ud6c8\ub828\ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8\ub370\uc774\ud130\ub85c \ub098\ub204\uae30**","e4959d8b":"X = final_train.loc[:,['Year', 'Kilometers_Driven', 'Owner_Type', 'Seats',\n       'Mileage(km\/kg)', 'Engine(CC)', 'Power(bhp)', \n       'Location_Bangalore', 'Location_Chennai', 'Location_Coimbatore',\n       'Location_Delhi', 'Location_Hyderabad', 'Location_Jaipur',\n       'Location_Kochi', 'Location_Kolkata', 'Location_Mumbai',\n       'Location_Pune', 'Fuel_Type_Diesel', 'Fuel_Type_LPG',\n       'Fuel_Type_Petrol', 'Transmission_Manual']]\nX.shape","db8f78ba":"**\uc608\uce21\ubaa8\ud615\ub9cc\ub4e4\uae30**","9de41cc4":"**Keras Tensorflow**","773e1f6f":"**DATA IMPORT**","008167cb":"LinearRegression"}}