{"cell_type":{"49a9e557":"code","138874a1":"code","bbd54e2f":"code","e306bf58":"code","e8e94e82":"code","f7b80e55":"code","eca9d2c2":"code","243ddd38":"code","5e519a07":"code","0d9c33c2":"code","b8227067":"code","10553a12":"code","90589daf":"code","ab684681":"code","41a50b30":"code","3ff232d7":"code","82cfaaab":"code","4b64df9a":"code","9360ad70":"code","24541558":"code","6c98a150":"code","042be5be":"code","4e4a93f7":"code","5ee7a59e":"code","bb4daeff":"code","147c618a":"code","30962445":"code","4af5e365":"code","ee036ebc":"code","cedd6d41":"code","f3aa9424":"code","78a9e8d7":"code","605fba15":"code","19cda286":"code","5c4faa23":"code","a51d5667":"code","90a14611":"code","726cff96":"code","2a074f9a":"code","c2b47ecc":"code","ffa26266":"code","a8a459ed":"code","f0209714":"markdown","2c9798cf":"markdown","1ca9b302":"markdown","9036e0ab":"markdown","5da6a19f":"markdown","b4cdef74":"markdown","d953cd22":"markdown","95a6c5e2":"markdown"},"source":{"49a9e557":"import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline\n#from plt import rcParams\n#rcPramas['figure.figsize'] = 10, 6\nplt.rcParams.update({'figure.figsize': (10, 7), 'figure.dpi': 120})","138874a1":"dataset = pd.read_csv(\"3098000032-Mar18-Mar19.csv\")","bbd54e2f":"dataset.head(50)","e306bf58":"dataset.describe()","e8e94e82":"dataset.shape","f7b80e55":"dataset.dtypes","eca9d2c2":"#For checking missing values in dataset\ndataset.isna().sum()","243ddd38":"dataset['Time_stamp'] = pd.to_datetime(dataset['Time_stamp'], infer_datetime_format=True)\nindexedDataset = dataset.set_index(['Time_stamp'])\ndf = pd.DataFrame(dataset, columns=['kW', 'Time_stamp'])","5e519a07":"#df['Time'] = pd.to_datetime(dataset.Time_stamp)","0d9c33c2":"import matplotlib.pyplot as plt\ndf.plot(x='Time_stamp', y='kW', kind='line') \nplt.show()","b8227067":"#Number of time_stamp per month\ndf.Time_stamp.dt.month.value_counts()","10553a12":"#Line plot of Number of time_stamp per month\ndf.Time_stamp.dt.month.value_counts().sort_index().plot()","90589daf":"df.Time_stamp.min()","ab684681":"df.Time_stamp.max()","41a50b30":"df.loc[200:250]","3ff232d7":"df.set_index('Time_stamp', inplace=True)","82cfaaab":"df.dtypes","4b64df9a":"#Sorting Time_wise\n\ndf = df.sort_values(['Time_stamp'])","9360ad70":"df.shape","24541558":"df.head(31)","6c98a150":"df.loc['2018-11-12 02:00:00':]","042be5be":"fd = df.loc['2018-11-01 15:30:00':]","4e4a93f7":"fd.plot()","5ee7a59e":"#Actual Data to work on.\ndf = df.loc['2018-03-05 09:00:00':'2018-11-01 15:30:00']\ndf.plot()","bb4daeff":"#calculate rolling mean\nrollmean = df.rolling(window=30).mean()\n\n#Calculate standard deviation\nrollstd = df.rolling(window=30).std()\n\nprint(rollmean, rollstd)","147c618a":"origin = plt.plot(df, color='blue', label=\"Orignal\")\nmean = plt.plot(rollmean, color='red', label=\"Rolling Mean\")\nstd = plt.plot(rollstd, color='black', label=\"Rolling std\")\nplt.legend(loc='best')\nplt.title('Rolling Mean and Standard Devision')\nplt.show(block=False)","30962445":"#Dickey-Fuller Test\nFrom statsmodels.tsa.stattools as adfuller\n\nprint(\"Dickey fuller test result:\")\ndftest = adfuller(df['kW'], autolag='AIC')\n\ndfoutput = pd.Series(df, index=['Test statistic', 'p-value', '#Lags Used', 'Number of Observations used'])\nfor key, value in dftest.items():\n    dfoutput['Critical Value (&s)'%key] = value\n    \nprint(dfoutput)","4af5e365":"fd = df","ee036ebc":"fd\n","cedd6d41":"fd.interpolate(method ='linear', limit_direction ='forward') ","f3aa9424":"fd.fillna(method ='pad') ","78a9e8d7":"fd.fillna(fd.mean())","605fba15":"# Train test split\ntrain_size = int(len(df) * 0.8)\ntest_size = len(df) - train_size\ntrain, test = df.iloc[0:train_size], df.iloc[train_size:len(df)]\nprint(len(train), len(test))","19cda286":"#Create dataset function for LSTM model\n\ndef create_dataset(X, y, time_steps=1):\n    Xs, ys = [], []\n    for i in range(len(X) - time_steps):\n        v = X.iloc[i:(i + time_steps)].values\n        Xs.append(v)\n        ys.append(y.iloc[i + time_steps])\n    return np.array(Xs), np.array(ys)","5c4faa23":"\n\ntime_steps = 10\n\n# reshape to [samples, time_steps, n_features]\n\nX_train, y_train = create_dataset(train, train.kW, time_steps)\nX_test, y_test = create_dataset(test, test.kW, time_steps)\n\nprint(X_train.shape, y_train.shape)","a51d5667":"import tensorflow as tf\nfrom tensorflow import keras\nimport seaborn as sns\nfrom pylab import rcParams\nfrom matplotlib import rc\n\n%config InlineBackend.figure_format='retina'\n\n\nsns.set(style='whitegrid', palette='muted', font_scale=1.5)\n\nrcParams['figure.figsize'] = 16, 10\n\nRANDOM_SEED = 42\n\nnp.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)","90a14611":"model = keras.Sequential()\nmodel.add(keras.layers.LSTM(128, input_shape=(X_train.shape[1], X_train.shape[2])))\nmodel.add(keras.layers.Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer=keras.optimizers.Adam(0.001))","726cff96":"history = model.fit(\n    X_train, y_train, \n    epochs=20, \n    batch_size=16, \n    validation_split=0.1, \n    verbose=1, \n    shuffle=False\n)","2a074f9a":"plt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend();","c2b47ecc":"y_pred = model.predict(X_test)","ffa26266":"plt.plot(np.arange(0, len(y_train)), y_train, 'g', label=\"history\")\nplt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), y_test, marker='.', label=\"true\")\nplt.plot(np.arange(len(y_train), len(y_train) + len(y_test)), y_pred, 'r', label=\"prediction\")\nplt.ylabel('Value')\nplt.xlabel('Time Step')\nplt.legend()\nplt.show();","a8a459ed":"plt.plot(y_test, marker='.', label=\"true\")\nplt.plot(y_pred, 'r', label=\"prediction\")\nplt.ylabel('Value')\nplt.xlabel('Time Step')\nplt.legend()\nplt.show();","f0209714":"### Data preprocessing","2c9798cf":" # Time series prediction\n \n Predict kW 48 hours ahead of current time.\n \n In this data reading of meter is bi-hourly. We have to get houly reading in predictions. \n \n For optimization, our prediction shold not be deviated more than \u00b15kWh.\n \n ## To Do\n \n 1- Sampling (convert bi-hourly data into hourly data)\n \n 2- Filling the Data (entering the missing values) \u2714\ufe0f\n \n 3- Sorting the data timewise (Status: done) \u2714\ufe0f\n \n 4- Analysis\n \n How to make Time_stamp indexed? \u2714\ufe0f\n \n How to fill hourly missing value using pandas? \u2714\ufe0f\n \n ### Sub To do\n \n 1-Fill hourly missing value. \u2714\ufe0f\n \n 2-Then mean the day values. \u2714\ufe0f","1ca9b302":"### Training","9036e0ab":"### Rolling mean & Rolling statistics","5da6a19f":"## Sorting w.r.t time\nStatus: Done","b4cdef74":"### Modeling","d953cd22":"## LSTM Tensorflow","95a6c5e2":"dataset.kW.plot()"}}