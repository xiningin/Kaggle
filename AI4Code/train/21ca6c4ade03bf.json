{"cell_type":{"3f34f40f":"code","2155c2cc":"code","a78261d8":"code","88cf2c17":"code","e997073b":"code","797ce084":"code","9b4e92ba":"code","d97be615":"code","0cf0a19d":"code","3fdf8027":"code","74b3d0c1":"code","3fa98ed2":"code","f0fad6ec":"code","eac0026c":"code","fca53468":"code","f831bc52":"code","8ac6fddf":"code","f291a426":"code","9f49e2af":"code","6d163b3e":"code","666bf63a":"code","607b3adc":"code","9bf9615e":"code","c4adc7ab":"code","f3274cf9":"code","b9f230dc":"code","140e5068":"code","a42d153c":"code","87b2e0b1":"code","9a8e9856":"code","fa501f51":"code","e5b70bf1":"code","6d06499a":"code","8d37a211":"code","fa68e33c":"code","8a62c3d5":"code","dfc60fb4":"code","106dbba4":"code","faa99106":"code","98da5557":"code","5b0a95fe":"code","1fa777e5":"code","b6c2a5ef":"code","e77ebed4":"code","5ad35f83":"code","e5f70996":"code","bb6babf8":"code","c3f6c895":"code","2c2e6b1f":"code","1ca35a90":"code","25f00f19":"markdown","b6feb885":"markdown","042b64ed":"markdown","38fab8d1":"markdown","73320fef":"markdown","69ead53b":"markdown","8a64fa54":"markdown","ca9d1ef7":"markdown","ae89ae3b":"markdown","5c80faa0":"markdown","e0db5304":"markdown"},"source":{"3f34f40f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","2155c2cc":"print(os.listdir('..\/input'))","a78261d8":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","88cf2c17":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","e997073b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","797ce084":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/Consumo_cerveja.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Consumo_cerveja.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","9b4e92ba":"df1.head(5)","d97be615":"plotPerColumnDistribution(df1, 10, 5)","0cf0a19d":"plotCorrelationMatrix(df1, 8)","3fdf8027":"import seaborn as sns","74b3d0c1":"%matplotlib inline","3fa98ed2":"df1.head()","f0fad6ec":"df1.isnull().any()","eac0026c":"df1.info()","fca53468":"df1","f831bc52":"# major rows of data have NaN values, thus dropping them would be a wiser descision","8ac6fddf":"df1.dropna(inplace=True)","f291a426":"# this reduces our dataset to great amount","9f49e2af":"df1.info()","6d163b3e":"df1['Temperatura Media (C)'] = df1['Temperatura Media (C)'].apply(lambda x : float(x.replace(',','.')))","666bf63a":"df1['Temperatura Maxima (C)'] = df1['Temperatura Maxima (C)'].apply(lambda x : float(x.replace(',','.')))","607b3adc":"df1['Temperatura Minima (C)'] = df1['Temperatura Minima (C)'].apply(lambda x : float(x.replace(',','.')))","9bf9615e":"df1['Precipitacao (mm)'] = df1['Precipitacao (mm)'].apply(lambda x : float(x.replace(',','.')))","c4adc7ab":"df1.head()","f3274cf9":"df1.describe()","b9f230dc":"sns.pairplot(df1)","140e5068":"# the pairplot gives an idea that our label depends somewhat linearly with most of our features ","a42d153c":"from sklearn.model_selection import  train_test_split","87b2e0b1":"X_train,X_test,y_train,y_test = train_test_split(df1.drop(['Consumo de cerveja (litros)','Data'],axis=1),df1['Consumo de cerveja (litros)'])","9a8e9856":"from sklearn.linear_model import LinearRegression","fa501f51":"lm = LinearRegression()","e5b70bf1":"lm.fit(X_train,y_train)","6d06499a":"predictions = lm.predict(X_test)","8d37a211":"from sklearn import metrics","fa68e33c":"metrics.r2_score(y_test,predictions)","8a62c3d5":"# the score is not that much bad considering the dataset wasn't large enough","dfc60fb4":"metrics.mean_squared_error(y_test,predictions)","106dbba4":"np.sqrt(metrics.mean_squared_error(y_test,predictions))","faa99106":"plt.scatter(y_test,predictions)","98da5557":"p = sns.distplot(y_test,kde=False,bins=50)","5b0a95fe":"p1 = sns.distplot(predictions,kde=False,bins=50)","1fa777e5":"p2 = sns.distplot(y_test-predictions,kde=False,bins=50)","b6c2a5ef":"lm.coef_","e77ebed4":"lm.intercept_","5ad35f83":"# attempt to try another regressor","e5f70996":"from sklearn.ensemble import RandomForestRegressor","bb6babf8":"rfr = RandomForestRegressor(n_estimators=50)","c3f6c895":"rfr.fit(X_train,y_train)\npred = rfr.predict(X_test)","2c2e6b1f":"rfr.score(X_test,y_test)","1ca35a90":"# Randomforestregressor didn't performed well as compared to linear regression which makes sense because our label depends linearly with many of \n# our features","25f00f19":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","b6feb885":"Let's take a quick look at what the data looks like:","042b64ed":"Now you're ready to read in the data and use the plotting functions to visualize the data.","38fab8d1":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","73320fef":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","69ead53b":"Scatter and density plots:","8a64fa54":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","ca9d1ef7":"Distribution graphs (histogram\/bar graph) of sampled columns:","ae89ae3b":"There is 1 csv file in the current version of the dataset:\n","5c80faa0":"### Let's check 1st file: ..\/input\/Consumo_cerveja.csv","e0db5304":"Correlation matrix:"}}