{"cell_type":{"e974a168":"code","c39974c4":"code","a493b57c":"code","2834c91a":"code","3a523bb5":"code","09914641":"code","9f3dcc4c":"code","777d3a2a":"code","29ace7ad":"code","32041a4a":"code","85d87148":"code","4b8233ea":"code","644efcf6":"code","7159a0f5":"markdown","27de68ba":"markdown","8dde92a3":"markdown","eccd32e7":"markdown","09646859":"markdown","b779fab1":"markdown","21fe3f8a":"markdown","809d1d44":"markdown","ccd8d769":"markdown","8c03a1b6":"markdown","d992f8e6":"markdown"},"source":{"e974a168":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c39974c4":"df = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\ndf.head()","a493b57c":"\ndf.fillna(0,inplace = True)\ndf.isnull().sum()","2834c91a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.cross_validation import train_test_split\n\nreg = RandomForestRegressor()\nx = df[df.columns[:-1]]\ny = df.SalePrice\nx = x.select_dtypes(exclude=['object'])#Remove categorial data","3a523bb5":"reg.fit(x,y)\nfea_imp = pd.DataFrame(reg.feature_importances_,index=x.columns)\nfea_imp.sort_values(by=0,ascending=False)","09914641":"features = x[['OverallQual','GrLivArea','TotalBsmtSF','2ndFlrSF','LotArea','1stFlrSF','YearBuilt','OverallCond']]\nlabels = y\n\nfeatures_train ,features_test, labels_train,labels_test = train_test_split(features,labels,test_size=0.3)\nlen(features_test)","9f3dcc4c":"reg.fit(features_train,labels_train)\nreg.score(features_test,labels_test)#Random Forest accuracy","777d3a2a":"from sklearn.ensemble import GradientBoostingRegressor\ngd = GradientBoostingRegressor()\ngd.fit(features_train,labels_train)\ngd.score(features_test,labels_test)","29ace7ad":"final_model = GradientBoostingRegressor()\nfinal_model.fit(features_train,labels_train)\ntest_features = test_data[['OverallQual','GrLivArea','TotalBsmtSF','2ndFlrSF','LotArea','1stFlrSF','YearBuilt','OverallCond']]\ntest_features\n#predictions = final_model.predict(test_features)","32041a4a":"\ntest_features.fillna(test_features.mean(),inplace = True)\ntest_features.isnull().sum()","85d87148":"predictions = final_model.predict(test_features)\n\n","4b8233ea":"output = pd.DataFrame({'Id':test_data.Id,'SalePrice':predictions})\noutput","644efcf6":"output.to_csv('submission.csv',index=False)","7159a0f5":"Split data for training and Testing","27de68ba":"**Fill in the NaN values i.e Missing Data**","8dde92a3":"**GradientBoost**","eccd32e7":"**Get to know your data**","09646859":"Here,we select Gradient Boost as our model to make predictions on testing data which is provided seperately in dataset which has no labels...We will predict SalePrice(label) for test data by training our model on the whole training set this time..We wont use splitted training data...","b779fab1":"**Make predictions**","21fe3f8a":"Store data in csv file as below and submit your output...","809d1d44":"**Feature importances** using RandomForestRegressor\n\nExclude categorial data while fiiting it to the regessor","ccd8d769":"We have two models to fit the data...Random Forest which is already declared, and Gradient Boost declared below...Have a look at the documentation of sklearn to get detailed information about both the models and try to manipulate parameters (which I have avoided here..Models here use default parameter values...)","8c03a1b6":"**\"Hello World!\"**\n\nThis notebook is about cleaning missing values in training as well as testing data , getting the importances of features according to the Random Forest Regressor and fit the data using Gradient Booster and make predictions on test data.  ","d992f8e6":"Clean test dataset and use the same features we used in training the model.."}}