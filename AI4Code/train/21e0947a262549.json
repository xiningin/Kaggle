{"cell_type":{"c9804f98":"code","6ce7331d":"code","b1917afb":"code","791cc885":"code","67d260ea":"code","cda55354":"code","951d5ea0":"code","70700706":"code","af270676":"code","0a5a6828":"code","fdf2d2af":"code","1f79285a":"code","f0edbb05":"code","5487c0ff":"code","bf8b5758":"code","6e803e15":"code","88346b05":"code","8752c469":"code","8a1a9162":"code","6175464b":"code","399f7ccf":"code","2d543d22":"code","225e8128":"code","aff49dd5":"code","d26b18b7":"code","4d3d1b88":"code","d28493c2":"code","f44a5b7a":"markdown","f0caedc3":"markdown","ce869100":"markdown","56cf46f2":"markdown","390535b6":"markdown","b3eeeb8f":"markdown","fb1353dc":"markdown"},"source":{"c9804f98":"import warnings\nwarnings.filterwarnings('ignore')","6ce7331d":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nimport tensorflow as tf\nimport keras.backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout\nfrom keras.optimizers import SGD\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.callbacks import Callback\nfrom IPython.display import SVG\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","b1917afb":"n_images = 50000\nn_objects = 1\nimg_size = 16\nmin_obj_size = 1\nmax_obj_size = 8","791cc885":"def generate_training_set(n_images, n_objects, img_size, min_obj_size, max_obj_size):\n    images = np.zeros((n_images, img_size, img_size))\n    bounding_boxes = np.zeros((n_images, n_objects, 4))\n    for i in range(n_images):\n        for j in range(n_objects):\n            width, height = np.random.randint(min_obj_size, max_obj_size, size = 2)\n            x = np.random.randint(0, img_size - width)\n            y = np.random.randint(0, img_size - height)\n            images[i, x : x + width, y : y + height] = 1.0\n            bounding_boxes[i, j] = [x, y, width, height]\n    return (images, bounding_boxes)","67d260ea":"images, bounding_boxes = generate_training_set(n_images, n_objects, img_size, min_obj_size, max_obj_size)\nprint(\"Images shape:\", images.shape)\nprint(\"Bounding Boxes shape:\", bounding_boxes.shape)","cda55354":"def display_image(index):\n    plt.imshow(images[index].T, cmap = \"binary\", origin='lower', extent = [0, img_size, 0, img_size])\n    for box in bounding_boxes[index]:\n        plt.gca().add_patch(Rectangle((box[0], box[1]), box[2], box[3], ec = 'r', fc = 'none'))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","951d5ea0":"display_image(np.random.randint(0, n_images))","70700706":"display_image(np.random.randint(0, n_images))","af270676":"display_image(np.random.randint(0, n_images))","0a5a6828":"display_image(np.random.randint(0, n_images))","fdf2d2af":"x = (images.reshape(n_images, -1) - np.mean(images)) \/ np.std(images)\nx.shape","1f79285a":"y = bounding_boxes.reshape(n_images, -1) \/ img_size\ny.shape","f0edbb05":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 42)","5487c0ff":"print(\"x_train shape:\", x_train.shape)\nprint(\"x_test shape:\", x_test.shape)\nprint(\"y_train shape:\", y_train.shape)\nprint(\"y_test shape:\", x_test.shape)","bf8b5758":"def classifier():\n    model = Sequential()\n    model.add(Dense(256, input_dim = 256))\n    model.add(Activation('relu'))\n    model.add(Dense(4))\n    return model","6e803e15":"model = classifier()\nmodel.summary()","88346b05":"model.compile(optimizer = \"adadelta\", loss = 'mean_squared_error', metrics = ['accuracy'])","8752c469":"learning_rate_history = []\nclass Learning_Rate_History(Callback):\n    def on_epoch_begin(self, epoch, logs = {}):\n        learning_rate_history.append(K.get_value(model.optimizer.lr))\n        print('Learning Rate:', learning_rate_history[-1])","8a1a9162":"model.fit(x_train, y_train, epochs = 30, validation_split = 0.1, callbacks = [Learning_Rate_History()])","6175464b":"y_pred = model.predict(x_test)\nbox_pred = y_pred * img_size\nbox_pred.shape","399f7ccf":"def IOU(box1, box2):\n    x1, y1, w1, h1 = box1\n    x2, y2, w2, h2 = box2\n    w_intersection = min(x1 + w1, x2 + w2) - max(x1, x2)\n    h_intersection = min(y1 + h1, y2 + h2) - max(y1, y2)\n    if w_intersection <= 0 or h_intersection <= 0: # No overlap\n        return 0\n    I = w_intersection * h_intersection\n    U = w1 * h1 + w2 * h2 - I # Union = Total Area - I\n    return I \/ U","2d543d22":"iou = [IOU(y_test[i], y_pred[i]) for i in range(len(x_test))]","225e8128":"def display(x, box, box_pred):\n    index = np.random.randint(0, len(x))\n    plt.imshow(x[index].reshape(16, 16).T, cmap = 'binary', origin = 'lower', extent = [0, img_size, 0, img_size])\n    plt.gca().add_patch(Rectangle((box_pred[index][0], box_pred[index][1]),\n                                      box_pred[index][2], box_pred[index][3],\n                                      ec = 'r', fc = 'none'))\n    plt.title(\"IOU: \" + str(iou[index]))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","aff49dd5":"display(x_test, y_test, box_pred)","d26b18b7":"display(x_test, y_test, box_pred)","4d3d1b88":"display(x_test, y_test, box_pred)","d28493c2":"display(x_test, y_test, box_pred)","f44a5b7a":"## Preprocessing","f0caedc3":"## Importing Libraries","ce869100":"## Predicting Bounding Boxes","56cf46f2":"## Model Training","390535b6":"## Visualizing Predictions on Validation Set","b3eeeb8f":"## Visualizing Samples from Generated Images","fb1353dc":"## Generating Images and Bounding Boxes"}}