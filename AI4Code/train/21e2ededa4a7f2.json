{"cell_type":{"8676f85b":"code","99c30c0b":"code","45ad6678":"code","8d9abc5c":"code","06f02eb7":"code","9fcd5c01":"code","7bf54483":"code","ddb8adad":"code","0e5e748c":"code","6063f9be":"code","91232791":"code","8fc42c04":"markdown"},"source":{"8676f85b":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","99c30c0b":"heart_data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\nheart_data.head()","45ad6678":"y = heart_data['target']\nX = heart_data.drop('target', axis = 1)\nX.head()","8d9abc5c":"X.describe()","06f02eb7":"y.value_counts()","9fcd5c01":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\n# keep in mind that we want to use scaler on a training data not on a test data. so before scaling we need to split our data\n\n#we will use a standart scaler to scale the features for preprocessing\n\nscaler = StandardScaler()\nscale = scaler.fit(X_train)\n#print(scale.mean_)\n#print(scale.scale_)\nX_train = scale.transform(X_train)\n\nX_test = scale.transform(X_test)","7bf54483":"model = LogisticRegression()\nmodel.fit(X_train, y_train)\npred = model.predict(X_test)","ddb8adad":"score = accuracy_score(y_test, pred)\nscore","0e5e748c":"confusion_matrix(y_test, pred)","6063f9be":"tn, tp, fn, fp = confusion_matrix(y_test, pred).ravel()\n(tn, tp, fn, fp)","91232791":"matrix = classification_report(y_test, pred)\nprint('Classification report \\n', matrix)","8fc42c04":"Lets split our data"}}