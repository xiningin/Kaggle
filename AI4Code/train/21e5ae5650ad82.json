{"cell_type":{"0d376450":"code","95af3171":"code","8af8d44f":"code","0298f87f":"code","f412c7f3":"code","5d7b42bc":"code","ccef8102":"code","5152e93e":"code","a145eb2d":"code","b0030ed8":"code","f922e7ec":"code","f1f6f3c2":"code","6bba3b2d":"markdown","0a677b58":"markdown","535f9939":"markdown","6b7adb4b":"markdown","f3d55eb0":"markdown","c73ae784":"markdown"},"source":{"0d376450":"import numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff","95af3171":"us_videos = pd.read_csv('..\/input\/youtube-new\/USvideos.csv') #Change the files which we need to analyse\nus_videos_categories = pd.read_json('..\/input\/youtube-new\/US_category_id.json')","8af8d44f":"us_videos.head()","0298f87f":"us_videos.info()","f412c7f3":"# Transforming Trending date column to datetime format\nus_videos['trending_date'] = pd.to_datetime(us_videos['trending_date'], format='%y.%d.%m').dt.date\n\n# Transforming Trending date column to datetime format and splitting into two separate ones\npublish_time = pd.to_datetime(us_videos['publish_time'], format='%Y-%m-%dT%H:%M:%S.%fZ')\nus_videos['publish_date'] = publish_time.dt.date\nus_videos['publish_time'] = publish_time.dt.time\nus_videos['publish_hour'] = publish_time.dt.hour","5d7b42bc":"# creates a dictionary that maps 'category_id' to 'category'\nid_to_category = {}\n\nwith open('..\/input\/youtube-new\/US_category_id.json', 'r') as f:\n    data = json.load(f)\n    for category in data['items']:\n        id_to_category[category['id']] = category['snippet']['title']\n\nid_to_category","ccef8102":"keep_columns = ['views', 'likes', 'dislikes', 'comment_count'] # only looking at correlations between these variables\ncorr_matrix = us_videos[keep_columns].corr()\ncorr_matrix","5152e93e":"fig, ax = plt.subplots()\nheatmap = ax.imshow(corr_matrix, interpolation='nearest', cmap=cm.coolwarm)\n\n# making the colorbar on the side\ncbar_min = corr_matrix.min().min()\ncbar_max = corr_matrix.max().max()\ncbar = fig.colorbar(heatmap, ticks=[cbar_min, cbar_max])\n\n# making the labels\nlabels = ['']\nfor column in keep_columns:\n    labels.append(column)\n    labels.append('')\nax.set_yticklabels(labels, minor=False)\nax.set_xticklabels(labels, minor=False)\n\nplt.show()","a145eb2d":"def visualize_most(my_df, column, num=10): # getting the top 10 videos by default\n    sorted_df = my_df.sort_values(column, ascending=False).iloc[:num]\n    \n    ax = sorted_df[column].plot.bar()\n    \n    # customizes the video titles, for asthetic purposes for the bar chart\n    labels = []\n    for item in sorted_df['title']:\n        labels.append(item[:10] + '...')\n    ax.set_xticklabels(labels, rotation=45, fontsize=10)\n    \n    plt.show()","b0030ed8":"visualize_most(us_videos, 'views')","f922e7ec":"visualize_most(us_videos, 'likes', num=5) # only visualizes the top 5","f1f6f3c2":"visualize_most(us_videos, 'dislikes')","6bba3b2d":"**Data preprocessing**","0a677b58":"**Correlation Analysis**","535f9939":"**Importing the files**","6b7adb4b":"**Visualizing likes , views**","f3d55eb0":"**Correlation matrix**","c73ae784":"**Importing Python packages**"}}