{"cell_type":{"471fd773":"code","0a009a87":"code","299fc91d":"code","cea8ef3d":"code","800294bb":"code","f8c03d54":"code","2b26828a":"code","66509b2a":"markdown","0c5cdb77":"markdown"},"source":{"471fd773":"!pip install --upgrade pip","0a009a87":"!pip install kaggle-environments --upgrade","299fc91d":"from kaggle_environments import make\nenv = make(\"mab\", debug=True)","cea8ef3d":"def print_rounds(file1, file2, N=5):\n    env = make(\"mab\", debug=True)\n\n    p1=0\n    p2=0\n    draw=0\n    for i in range(N):\n        env.run([file1, file2])\n        p1_score = env.steps[-1][0]['reward']\n        p2_score = env.steps[-1][1]['reward']\n        p1+=p1_score>p2_score\n        p2+=p2_score>p1_score\n        draw+=p1_score==p2_score\n        env.reset()\n        print(f\"Round {i+1}: {p1_score} - {p2_score}, {file1} {p1} - {p2} {file2}\")\n    print(file1 + \" : \" + str(p1))\n    print(file2 + \" : \" + str(p2))\n    print(\"draws\" + \" : \" + str(draw))","800294bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8c03d54":"%%writefile example.py\n\nimport numpy as np\nimport pandas as pd\nimport random, os, datetime, math\nfrom collections import defaultdict\n\ntotal_reward = 0\nbandit_dict = {}\n\nbandit_pulls=[]\n\nfor x in range(100):\n    bandit_pulls.append(0)\n\ndef set_seed(my_seed=27):\n    os.environ['PYTHONHASHSEED'] = str(my_seed)\n    random.seed(my_seed)\n    np.random.seed(my_seed)\n\ndef get_next_bandit(T):\n    best_bandit = 0\n    best_bandit_expected = 0\n\n    for bnd in bandit_dict: \n        gg=(bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss']==1) and (bandit_dict[bnd]['opp']==1)                                                          \n        expect = (1.0*bandit_dict[bnd]['win']\\\n                  -.5+0.5*gg -.00*bandit_dict[bnd]['loss']\\\n                  + (1.01-0.5*(T\/2000)**4)*bandit_dict[bnd]['op_continue'] \\\n                  + (0.99-0.5*(T\/2000)**4)*(bandit_dict[bnd]['opp']-bandit_dict[bnd]['op_continue']-bandit_dict[bnd]['op_switch']-bandit_dict[bnd]['op_bad_switch']-gg)\\\n                  + (.65-0.1*(T\/2000)**3)*bandit_dict[bnd]['op_switch']\\\n                  + .5*bandit_dict[bnd]['op_bad_switch']) \\\n                 \/ (bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp']) \\\n                * math.pow(0.97, (bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp'])\/(1+T\/2000)**1.75)\n        if expect > best_bandit_expected:\n            best_bandit_expected = expect\n            best_bandit = bnd\n    return best_bandit\n\n\nmy_action_list = []\nop_action_list = []\n\nop_continue_cnt_dict = defaultdict(int)\n\ndef multi_armed_probabilities(observation, configuration):\n    global total_reward, bandit_dict,bandit_pulls\n\n    my_pull = random.randrange(configuration['banditCount'])\n    if 0 == observation['step']:\n        set_seed()\n        total_reward = 0\n        bandit_dict = {}\n        for i in range(configuration['banditCount']):\n            bandit_dict[i] = {'win': 1, 'loss': 0, 'opp': 0, 'op_continue': 0, 'op_switch':0, 'op_bad_switch':0}\n        \n    \n    else:\n        last_reward = observation['reward'] - total_reward\n        total_reward = observation['reward']\n        \n        my_idx = observation['agentIndex']\n        my_last_action = observation['lastActions'][my_idx]\n        op_last_action = observation['lastActions'][1-my_idx]\n        \n        my_action_list.append(my_last_action)\n        op_action_list.append(op_last_action)\n        \n        bandit_pulls[my_last_action]+=1\n        bandit_pulls[op_last_action]+=1\n        \n        if 0 < last_reward:\n            bandit_dict[my_last_action]['win'] = bandit_dict[my_last_action]['win'] +1\n            \n        else:\n            bandit_dict[my_last_action]['loss'] = bandit_dict[my_last_action]['loss'] +1\n            \n        bandit_dict[op_last_action]['opp'] = bandit_dict[op_last_action]['opp'] +1\n        \n        if observation['step'] >= 3:\n            if op_action_list[-1] == op_action_list[-2]:\n                bandit_dict[op_last_action]['op_continue'] += 1\n            else:\n               if bandit_pulls[op_action_list[-1]]>1: \n                bandit_dict[op_action_list[-2]]['op_switch'] += 1\n               else: \n                bandit_dict[op_action_list[-2]]['op_bad_switch']+=1\n                \n        if observation['step']>1600 and last_reward==1:\n            return my_last_action\n        \n    return get_next_bandit(observation['step'])","2b26828a":"print_rounds(\"example.py\",\"example.py\",1)","66509b2a":"For an explanation of the logic behind my code, see the accompanying [discussion post](https:\/\/www.kaggle.com\/c\/santa-2020\/discussion\/216748).","0c5cdb77":"This is an example of one of my best bots. Credit to [Lindada](https:\/\/www.kaggle.com\/a763337092\/pull-vegas-slot-machines-add-weaken-rate-continue5) for his great starter workbook!"}}