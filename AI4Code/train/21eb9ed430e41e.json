{"cell_type":{"7213b9d8":"code","f3ce7495":"code","7a6376f9":"code","e2a023dd":"code","29c8752c":"code","7dd358d5":"code","bd25d8ee":"code","099907bd":"code","d6aa84b7":"code","3351aac1":"code","899387ee":"code","fff2b275":"code","6135aa9f":"code","a833f2c0":"code","21ee6562":"code","30883c40":"code","5d059de5":"code","a979ed47":"code","647c15ed":"code","b46a76c2":"code","4d24e661":"code","788a6dc8":"code","565bffe4":"code","62d0ac59":"code","fd02d964":"code","21e51736":"code","87993d51":"code","f855c459":"code","7ee61cdf":"code","2bdf1e46":"code","6ebf2aba":"code","bbd48b43":"code","cebd9bfa":"code","8ad27e49":"code","29429084":"code","31783b5d":"code","82a3a272":"code","1ca152d8":"code","f68e3dcf":"code","b023272b":"markdown","528bddae":"markdown"},"source":{"7213b9d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3ce7495":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndf = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/vw.csv\")","7a6376f9":"print(\"Dataset shape :\",df.shape)\nprint(\"Number of Rows :\",df.shape[0])\nprint(\"Number of Columns :\",df.shape[1])","e2a023dd":"print(\"Column names :\",list(df.columns))","29c8752c":"df.info()","7dd358d5":"df.describe","bd25d8ee":"df.head()","099907bd":"df.tail()","d6aa84b7":"df = df.drop('model',axis=1)","3351aac1":"df","899387ee":"list(df['transmission'].unique())","fff2b275":"# Import LabelEncoder\nfrom sklearn import preprocessing\n#creating labelEncoder\nle = preprocessing.LabelEncoder()\n# Converting string labels into numbers.\ndf['transmission']=le.fit_transform(df['transmission'])\nprint(df['transmission'])","6135aa9f":"list(df['transmission'].unique())","a833f2c0":"df.info()","21ee6562":"df['fuelType'].unique()","30883c40":"df['fuelType']=le.fit_transform(df['fuelType'])\nprint(df['fuelType'])","5d059de5":"df['mpg'].unique()","a979ed47":"df.info()","647c15ed":"df['year'].unique()","b46a76c2":"plt.figure(figsize=(500,10))\nsns.scatterplot(df['mileage'],df['price'])","4d24e661":"plt.figure(figsize=(20,10))\nsns.countplot(df['year'])","788a6dc8":"sns.distplot(df['year'])","565bffe4":"sns.countplot(df['transmission']) #automatic, manual, semi-automatic = 0,1,2","62d0ac59":"df.columns","fd02d964":"sns.scatterplot(df['tax'],df['price'])","21e51736":"df.corr()","87993d51":"sns.heatmap(df.corr())","f855c459":"sns.pairplot(df)","7ee61cdf":"from pandas_profiling import ProfileReport\nprof = ProfileReport(df)\nprof.to_notebook_iframe()\n#prof.to_file(output_file='output.html')","2bdf1e46":"prof.to_file(output_file=\"output1.html\")","6ebf2aba":"#df.columns\n\nX = df[['transmission', 'mileage', 'fuelType', 'tax', 'mpg','engineSize']]\ny = df['price']","bbd48b43":"y = y.reshape(-1,1)","cebd9bfa":"X = X.reshape(-1,1)","8ad27e49":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns = ['price']),\n                                                    df, train_size = 0.7)","29429084":"df.info()","31783b5d":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","82a3a272":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\n\nreg.fit(X_train,y_train)","1ca152d8":"y_pred = reg.predict(X_test)","f68e3dcf":"from sklearn import metrics\n\nprint(\"Mean Squared Error :\",np.sqrt(metrics.mean_absolute_error(y_test,y_pred)))\nprint(metrics.r2_score(y_test,y_pred))","b023272b":"Dielsel = 0\npetrol = 3\n","528bddae":"automatic, manual, semi-automatic = 0,1,2"}}