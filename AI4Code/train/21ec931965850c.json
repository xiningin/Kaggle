{"cell_type":{"515aff51":"code","1a1e19fe":"code","c5f6c0cb":"code","ad20d011":"code","f3a812f0":"code","81c0db85":"code","cb161ceb":"code","1dc19e72":"code","5da9c5ff":"code","341c0eed":"code","69b62788":"code","85850588":"code","fb298e62":"code","a77dbba7":"code","9da73ab0":"code","0c56ce99":"code","a368456a":"code","f7b76ca7":"code","39bd8598":"code","82d031ce":"code","9540962a":"code","a8f2c9c0":"code","60b35537":"code","9ce12218":"code","523c45e1":"code","e738e5c2":"code","27499978":"code","d57df3e5":"code","6f753ef2":"code","c0277197":"code","f3563cde":"code","f221eb55":"code","c84c7ae1":"code","f3dfa33b":"code","2662ebea":"code","29e66f14":"code","305d232c":"code","cab340ce":"code","86c0e3b8":"code","003603fe":"code","88babc5e":"code","64c8b8e6":"code","8eda5b48":"code","cdfdba4a":"code","607785de":"code","5ee7f504":"code","3132e861":"code","b2ffe164":"code","5e56c00b":"code","91b2ff6f":"code","f718e0b4":"code","c5efb43f":"code","f9ad6725":"code","ebaa5fd7":"code","58c6a088":"code","bf8932a1":"code","e4fefb77":"code","0536e8d9":"code","3db8d771":"code","b1995ddb":"code","dfaa854b":"code","da6bd742":"code","d15fc444":"code","3d8139b6":"code","7b946866":"code","e17ce6af":"code","902c9a72":"code","1445eaf2":"code","a9c5884a":"code","3272cc55":"code","8713086f":"code","9e5ea63f":"code","ff7d56f5":"code","40dc277e":"code","c366a19d":"code","711cdda2":"code","e1583c77":"code","7f9495b7":"code","106ebc71":"code","c01f2cfe":"code","12ae35d3":"code","557aab02":"markdown","8ef49c38":"markdown","9bf949f0":"markdown","c3e284f2":"markdown","dc73bbb2":"markdown","52c23a40":"markdown","5c6cb704":"markdown","e51c0d8c":"markdown","df1a16d6":"markdown","84eecdd0":"markdown","790985b7":"markdown","640b3404":"markdown","30982b39":"markdown","cd11bcd3":"markdown","da088788":"markdown","314621ef":"markdown","19879a18":"markdown","ab9471d0":"markdown","34c2479e":"markdown","2a95ee79":"markdown","7148aede":"markdown","59c0eac6":"markdown","99dfb998":"markdown","48ecd87e":"markdown","472bffe6":"markdown","533a050b":"markdown","f0a45923":"markdown","d4a975d9":"markdown","2352efe3":"markdown","84b464ef":"markdown","77045256":"markdown","73d1d566":"markdown","3445a75f":"markdown","99ccbdea":"markdown","e841a760":"markdown","f0eaf974":"markdown","ee09e844":"markdown","dfab5fba":"markdown","2fa0685c":"markdown","3ce5842b":"markdown","aa7e8434":"markdown"},"source":{"515aff51":"# \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nfrom pandas import Series\nimport pandas as pd\nimport numpy as np\n\nimport pandas_profiling\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom datetime import date\nfrom datetime import datetime, timedelta\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score, recall_score, f1_score, mean_absolute_error, mean_squared_error, precision_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\n\npd.set_option('display.max_rows', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a1e19fe":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u043e\u0432 (\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445)\n\ndef get_boxplot1(column):\n\n    (fig, ax) = plt.subplots(figsize=(14, 4))\n    sns.boxplot(x='default', y=column, data=df.loc[df.loc[:, 'default'\n                ].isin(df.loc[:, 'default'].value_counts().index[:])],\n                ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + 'default')\n    plt.show()","c5f6c0cb":"PATH_to_file = '\/kaggle\/input\/sf-dst-scoring\/'\ntrain = pd.read_csv(PATH_to_file + 'train.csv')\ntest = pd.read_csv(PATH_to_file + 'test.csv')\nsample_submission = pd.read_csv(PATH_to_file + 'sample_submission.csv')","ad20d011":"# \u0414\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432.\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape,\n      '\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', test.shape, \n      '\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape[0]+test.shape[0], sep='\\n')","f3a812f0":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442.\ntrain['train'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435\ntest['train'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435\ndf = pd.concat([train, test], ignore_index=True)\ndf.info()","81c0db85":"# \u0434\u0435\u043b\u0430\u0435\u043c \u0431\u044b\u0441\u0442\u0440\u044b\u0439 EDA \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e pandas_profiling. \u0414\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0442\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430. \u0412\u044b\u0432\u043e\u0434\u044b \u043d\u0438\u0436\u0435.\n# pandas_profiling.ProfileReport(df)","cb161ceb":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 education \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0438 \u0443\u0442\u043e\u0447\u043d\u0438\u043c, \u043d\u0435 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0435\u0449\u0435 \u0433\u0434\u0435-\u0442\u043e.\ned_x = df.education.mode().item()\ndf.education = df.education.fillna(ed_x)","1dc19e72":"df.isna().sum()","5da9c5ff":"# \u0417\u0430\u043e\u0434\u043d\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 education \u0432 \u0447\u0438\u0441\u043b\u0430:\n\nlabel_encoder = LabelEncoder()\n\ndf['education'] = label_encoder.fit_transform(df['education'])\nprint(dict(enumerate(label_encoder.classes_)))\ndf.sample(3)","341c0eed":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0438\u0434:\ndf.app_date = pd.to_datetime(df.app_date)\n\n# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0438\u043e\u0434 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439:\ndisplay(df.app_date.max())\ndisplay(df.app_date.min())","69b62788":"# \u041c\u043e\u0436\u043d\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0433\u043e\u0434, \u043e\u043d \u0432\u0435\u0437\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 2014-\u0439\ndf['app_day'] = df.app_date.dt.day\ndf['app_month'] = df.app_date.dt.month\ndf[\"app_weekday\"] = df.app_date.dt.weekday","85850588":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441 \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439:\ndf['days'] = (df.app_date - df.app_date.min()).dt.days","fb298e62":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e - \u043a\u0430\u043a\u0438\u0435 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.\nplt.figure(figsize=(10,5))\nsns.heatmap(df.iloc[:,19:].corr(), annot=True)","a77dbba7":"# app_month \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 days, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043d \u043d\u0435 \u0433\u043e\u0434\u0438\u0442\u0441\u044f. \n# \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c. \n# \u0418 \u0437\u0430\u043e\u0434\u043d\u043e \u0443\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 app_date, \u043e\u043d \u043d\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d.\n\ndf.drop([\"app_month\"], axis=1, inplace=True)\ndf.drop([\"app_date\"], axis=1, inplace=True)","9da73ab0":"# \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\nnum_cols = [\n    'age',\n    'decline_app_cnt',\n    'score_bki',\n    'bki_request_cnt',\n    'income',\n    'app_day',\n    'days',\n    ]\n\n# \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435\nbin_cols = [\"sex\", \"car\", \"car_type\", \"good_work\", \"foreign_passport\"]\n\n# \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\ncat_cols = [\n    'education',\n    'region_rating',\n    'home_address',\n    'work_address',\n    'sna',\n    'first_time',\n    'app_weekday',\n    ]","0c56ce99":"# \u0421\u0440\u0430\u0437\u0443 \u0436\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 0 \u0438 1, \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0438\u0445 \u043f\u0435\u0440\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\nfor column in bin_cols:\n    df[column] = label_encoder.fit_transform(df[column])   ","a368456a":"# \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e - \u043d\u0430 \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d.\ntrain0 = df.query('train == 1').drop(['train'], axis=1)\ntest0 = df.query('train == 0').drop(['train'], axis=1)\n\nX = train0.drop(['default'], axis=1).values\nY = train0['default'].values\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","f7b76ca7":"model_0 = LogisticRegression(max_iter = 1000)\nmodel_0.fit(X_train, y_train)\ny_pred = model_0.predict(X_test)","39bd8598":"probs = model_0.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","82d031ce":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('accuracy_score: {}'.format(np.round(accuracy_score(y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(y_test, y_pred), 4)))","9540962a":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","a8f2c9c0":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043e\u0448\u0438\u0431\u043e\u043a\nconfusion_matrix(y_test, y_pred)","60b35537":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\n\ntemp_df = df[df['train'] == 1]\nimp_num = Series(f_classif(temp_df[num_cols], temp_df['default'])[0],\n                 index=num_cols)\nimp_num.sort_values(inplace=True)\nimp_num.plot(kind='barh')","9ce12218":"for column in num_cols:\n    get_boxplot1(column)","523c45e1":"df.drop(['app_day'], axis=1, inplace=True)\nnum_cols.remove('app_day')","e738e5c2":"# \u0414\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043c \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 \"\u043e\u0434\u043d\u0430-\u0434\u0432\u0435-\u0442\u0440\u0438-\u043c\u043d\u043e\u0433\u043e\"\n\ndf.decline_app_cnt = df.decline_app_cnt.apply(lambda x: (x if x < 4 else 4))\ndf.bki_request_cnt = df.bki_request_cnt.apply(lambda x: 7 if x >= 7 else x)","27499978":"# \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043c \u043d\u0443\u0436\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445:\n\nnum_cols.remove('decline_app_cnt')\ncat_cols.append('decline_app_cnt')\n\nnum_cols.remove('bki_request_cnt')\ncat_cols.append('bki_request_cnt')","d57df3e5":"df.age.describe()","6f753ef2":"perc25 = df.age.quantile(0.25)\nperc50 = df.age.quantile(0.5)\nperc75 = df.age.quantile(0.75)","c0277197":"def age_to_cat(age):\n    if age <= perc25:\n        cat_age = '0'\n        return cat_age             \n    if perc25 < age <= perc50:\n        cat_age = '1'\n        return cat_age\n    if perc50 < age <= perc75:\n        cat_age = '2'\n        return cat_age\n    if age > perc75:\n        cat_age = '3'\n        return cat_age","f3563cde":"df['age_cat'] = 0 # create age_categorical column\ndf['age_cat'] = df['age'].apply(lambda x:age_to_cat(x))\ndf = df.drop('age',axis=1)","f221eb55":"num_cols.remove('age')\ncat_cols.append('age_cat')","c84c7ae1":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nplt.figure(figsize=(10, 5))\nsns.heatmap(df[num_cols + ['default']].corr(), annot=True)","f3dfa33b":"# \u041f\u043e\u0433\u043b\u044f\u0434\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nfor i in num_cols:\n    plt.figure()\n    sns.distplot(df[i][df[i] > 0].dropna(), kde=False, rug=False)\n    plt.title(i)\n    plt.show()","2662ebea":"# \u041f\u043e\u0441\u043b\u0435 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u044f\u0441\u043d\u0438\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u0433\u0434\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u0445\u043e\u0434. \u0422\u0430\u043a \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c.\nnum_cols_log = ['income']\nfor column in num_cols_log:\n    df[column] = np.log(df[column] + 5)","29e66f14":"# \u041f\u043e\u0433\u043b\u044f\u0434\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\nfor i in num_cols_log:\n    plt.figure()\n    sns.distplot(df[i][df[i] > 0].dropna(), kde = False, rug=False)\n    plt.title(i)\n    plt.show()","305d232c":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\u043c\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\npf = PolynomialFeatures(2, include_bias=False)\npoly_data = pf.fit_transform(df[num_cols])[:, len(num_cols):]\npoly_cols = pf.get_feature_names()[len(num_cols):]\npoly_df = pd.DataFrame(poly_data, columns=poly_cols)\ndf = df.join(poly_df, how='left')","cab340ce":"# \u041f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438, \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f.\n# num_cols = num_cols + poly_cols","86c0e3b8":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443:\nfor col in bin_cols:\n    plt.figure(figsize=(6, 4))\n    sns.countplot(df[col])\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","003603fe":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u0445 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u0441 default:\nfor col in bin_cols:\n    plt.figure(figsize=(8, 4))\n    prop_df = df[col].groupby(df[\"default\"]).value_counts(\n        normalize=True).rename(\"percent\").reset_index()\n    prop_df[\"percent\"] *= 100\n    sns.barplot(x=col, y=\"percent\", hue=\"default\", data=prop_df)\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","88babc5e":"# \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 0 \u0438 1 \u043c\u044b \u0438\u0445 \u0443\u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\ntemp_df = df[df['train'] == 1]\nimp_cat = Series(mutual_info_classif(temp_df[bin_cols],\n                 temp_df['default'], discrete_features=True),\n                 index=bin_cols)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh')","64c8b8e6":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nplt.figure(figsize=(10,5))\nsns.heatmap(df[bin_cols+['default']].corr(), annot=True)","8eda5b48":"df.drop(['car'], axis=1, inplace=True)\nbin_cols.remove('car')","cdfdba4a":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443:\nfor col in cat_cols:\n    plt.figure(figsize=(6, 4))\n    sns.countplot(df[col])\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","607785de":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0438\u0445 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u0441 default:\nfor col in cat_cols:\n    plt.figure(figsize=(8,8))\n    prop_df = df[col].groupby(df[\"default\"]).value_counts(\n        normalize=True).rename(\"percent\").reset_index()\n    prop_df[\"percent\"] *= 100\n    sns.barplot(x=col, y=\"percent\", hue=\"default\", data=prop_df)\n    plt.title(f\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 {col}\")","5ee7f504":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\ntemp_df = df[df['train'] == 1]\nimp_cat = Series(mutual_info_classif(temp_df[cat_cols],\n                 temp_df['default'], discrete_features=True),\n                 index=cat_cols)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh')","3132e861":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nplt.figure(figsize=(15,8))\nsns.heatmap(df[cat_cols+['default']].corr(), annot=True)","b2ffe164":"# df.drop(['work_address'], axis=1, inplace=True)\n# cat_cols.remove('work_address')","5e56c00b":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:\ndata = df[['work_address', 'home_address']].values\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c Scaler instance:\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data)\n\n# \u0418\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0434\u0438\u043d \u043f\u0443\u0442\u0435\u043c \u0443\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.\npca = PCA(n_components=1)\npca.fit(scaled_data)\npca_data = pca.transform(scaled_data)\ndf['address'] = pca_data\n\n# \u0423\u0431\u0435\u0440\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:\ndf = df.drop(['home_address','work_address'],axis=1)\n\n# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043f\u0438\u0441\u043a\u0438:\ncat_cols.remove('home_address')\ncat_cols.remove('work_address')\ncat_cols.append('address')","91b2ff6f":"# \u0414\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e - \u043d\u0430 \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d.\ntrain = df.query('train == 1').drop(['train'], axis=1)\ntest = df.query('train == 0').drop(['train'], axis=1)","f718e0b4":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', train.shape,\n      '\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: ', test.shape, sep='\\n')\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c.","c5efb43f":"# \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 0 \u0438\u043b\u0438 1.\nX_cat = \\\n    OneHotEncoder(sparse=False).fit_transform(train[cat_cols].values)","f9ad6725":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:\nX_num = StandardScaler().fit_transform(train[num_cols].values)","ebaa5fd7":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u043d\u043e \n# \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e,\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.\nX = np.hstack([X_num, train[bin_cols].values, train[poly_cols].values, X_cat])\nY = train['default'].values\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","58c6a088":"model_1 = LogisticRegression(solver = 'liblinear', max_iter = 1000)\nmodel_1.fit(X_train, y_train)\ny_pred = model_1.predict(X_test)\n# y_proba = model_1.predict_proba(X_test)[:,1]","bf8932a1":"probs = model_1.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","e4fefb77":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('accuracy_score: {}'.format(np.round(accuracy_score(y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(y_test, y_pred), 4)))","0536e8d9":"confusion_matrix(y_test, y_pred)","3db8d771":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","b1995ddb":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'default':\n\ndefault_data = df['default'].value_counts()\ndefault_labels = list(df['default'].value_counts().index)\ncolors = ['#3366FF', '#FF3399']\nplt.pie(\n    default_data,\n    labels=default_labels,\n    autopct='%1.1f%%',\n    shadow=True,\n    colors=colors,\n    explode=[0, 0.4],\n    )\nplt.title('Default')\nplt.show()","dfaa854b":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c oversampling, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u043b\u0430\u0434\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443.\nzeros = train[train['default'] == 0]\nones = train[train['default'] == 1]\ndefault_new = int(len(zeros) \/ len(ones))\nfor i in range(default_new):\n    train1 = train.append(ones).reset_index(drop=True)","da6bd742":"X_cat = OneHotEncoder(sparse = False).fit_transform(train1[cat_cols].values)\nX_num = StandardScaler().fit_transform(train1[num_cols].values)\nX = np.hstack([X_num, train1[bin_cols].values, train1[poly_cols].values, X_cat])\nY = train1['default'].values","d15fc444":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","3d8139b6":"model_2 = LogisticRegression(solver = 'liblinear', max_iter = 2000)\nmodel_2.fit(X_train, y_train)\nprobs = model_2.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","7b946866":"y_pred = model_2.predict(X_test)","e17ce6af":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('accuracy_score: {}'.format(np.round(accuracy_score(y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(y_test, y_pred), 4)))","902c9a72":"confusion_matrix(y_test, y_pred)","1445eaf2":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","a9c5884a":"model_3 = LogisticRegression(penalty='l2', class_weight='balanced', max_iter=500, solver = 'liblinear', C = 100)\nmodel_3.fit(X_train, y_train)","3272cc55":"y_pred = model_3.predict(X_test)","8713086f":"probs = model_3.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","9e5ea63f":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('accuracy_score: {}'.format(np.round(accuracy_score(y_test, y_pred), 4)))\nprint('f1_score: {}'.format(np.round(f1_score(y_test, y_pred), 4)))\nprint('recall_score: {}'.format(np.round(recall_score(y_test, y_pred), 4)))\nprint('MSE: {}'.format(np.round(mean_squared_error(y_test, y_pred), 4)))","ff7d56f5":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=labels, fmt='', cmap='Blues')","40dc277e":"X_cat_test = OneHotEncoder(sparse = False).fit_transform(test[cat_cols].values)\nX_num_test = StandardScaler().fit_transform(test[num_cols].values)\n# X_test2 = np.hstack([X_num_test, test[bin_cols].values, X_cat_test])\nX_test2 = np.hstack([X_num_test, test[bin_cols].values, test[poly_cols].values, X_cat_test])\ny_probs = model_3.predict_proba(X_test2)[:,1]","c366a19d":"y_probs = model_3.predict_proba(X_test2)[:,1]","711cdda2":"test['default'] = y_probs","e1583c77":"submission = test[['client_id','default']]\ndisplay(submission.sample(10))\ndisplay(submission.shape)","7f9495b7":"submission.to_csv('submission.csv', index=False)","106ebc71":"from sklearn.ensemble import RandomForestClassifier\n\nmodel_4 = RandomForestClassifier()\nmodel_4.fit(X_train, y_train)\n\ny_pred_rf = model_4.predict(X_test)\ncf_matrix = confusion_matrix(y_test,y_pred_rf)","c01f2cfe":"probs = model_4.predict_proba(X_test)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","12ae35d3":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f confusion matrix:\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_test, y_pred_rf).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=labels, fmt='', cmap='Blues')","557aab02":"# \u0421\u043f\u0438\u0441\u043a\u0438","8ef49c38":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0440\u0435\u0434\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 - \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430. \u0421\u0430\u043c\u044b\u0439 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u043d\u043e \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0439 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, - \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u0430\u043d\u0430 \u0437\u0430\u044f\u0432\u043a\u0430. \u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0432\u0441\u0435.","9bf949f0":"\u041e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c.","c3e284f2":"\u041d\u0430\u0448\u0430 \u0441\u0430\u043c\u0430\u044f \u043f\u0435\u0440\u0432\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043d\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0433\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0430 \u043a\u043e\u0444\u0435\u0439\u043d\u043e\u0439 \u0433\u0443\u0449\u0435 (\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430). \u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043e\u043d\u0430 \u0443 \u043d\u0430\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \"\u0434\u043e\u0431\u0440\u0430\u044f\", \u0434\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0432\u0441\u0435\u043c-\u0432\u0441\u0435\u043c-\u0432\u0441\u0435\u043c.\n\n\u0422\u0430\u043a \u0447\u0442\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0438 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0435.","dc73bbb2":"\u041b\u0443\u0447\u0448\u0435. \u041d\u043e \u043d\u0435\u043d\u0430\u043c\u043d\u043e\u0433\u043e.","52c23a40":"\u0414\u0435\u0444\u043e\u043b\u0442 \u0447\u0430\u0449\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0443 \u0436\u0435\u043d\u0449\u0438\u043d, \u0443 \u043b\u044e\u0434\u0435\u0439 \u0431\u0435\u0437 \u043c\u0430\u0448\u0438\u043d\u044b, \u0443 \u043b\u044e\u0434\u0435\u0439 \u0441 \u043f\u043b\u043e\u0445\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0438 \u0431\u0435\u0437 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430.","5c6cb704":"# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","e51c0d8c":"\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.","df1a16d6":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0442\u043e\u0432, \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437","84eecdd0":"# \u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","790985b7":"# \u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0435\u043c \u043a \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","640b3404":"\u041d\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u043f\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0438\u043b\u044f\u043c.","30982b39":"\u0427\u0430\u0449\u0435 \u0431\u0435\u0440\u0443\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u0436\u0435\u043d\u0449\u0438\u043d\u044b, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d\u044b, \u043b\u044e\u0434\u0438 \u0431\u0435\u0437 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b (\u044d\u0442\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e), \u043b\u044e\u0434\u0438 \u0431\u0435\u0437 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0438 \u043b\u044e\u0434\u0438 \u0431\u0435\u0437 \u043c\u0430\u0448\u0438\u043d\u044b (\u0445\u043e\u0442\u044f \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b, \u0441 \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0441\u0430\u043c\u043e\u0435 \u0442\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u043d\u0430 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u0430\u0442\u044c...). ","cd11bcd3":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0439 \u0430\u0434\u0440\u0435\u0441\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438.","da088788":"\u0420\u0435\u0448\u0438\u043b\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0433\u0440\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438. \u041d\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 RandomForest - \u043e\u043d \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u043b\u0441\u044f. \u041f\u043e\u043f\u043e\u0437\u0436\u0435 (\u043f\u043e\u0441\u043b\u0435 \u0441\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430) \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0435\u0433\u043e \u0434\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c (\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0436\u0435!)","314621ef":"\u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u0415\u0441\u0442\u044c \u0432\u0441\u0435 \u0442\u0438\u043f\u044b: \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435. \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0438\u0445 \u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c.","19879a18":"\u0415\u0449\u0435 \u043f\u0440\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b: \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435, \u043a\u0430\u043a \u043c\u044b \u0443\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043b\u0438, \u0438\u0445 \u043d\u0435\u0442. \u041f\u0440\u0438 EDA \u0431\u044b\u043b\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e, \u0447\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 21 \u0433\u043e\u0434, \u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 - 72, \u0432\u0441\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u041d\u0438 \u043c\u0430\u043b\u043e\u043b\u0435\u0442\u043d\u0438\u0445 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432, \u043d\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u043e\u043b\u0433\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u0442.","ab9471d0":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","34c2479e":"[\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 pandas.profiling](https:\/\/www.kaggle.com\/lenkavinogradova\/sf-dst-credit-scoring-profiling-vinogradova)\n\n\u0412\u044b\u0432\u043e\u0434\u044b:\n\n\u0412\u0441\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c, \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 education \u043d\u0430\u0448\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0441\u043b\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043c\u044b \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0438\u0445 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e.\n\u0416\u0435\u043d\u0449\u0438\u043d \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d, - \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u044d\u0442\u043e \u043a\u0430\u043a-\u0442\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0443\u044e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443.\n\n\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 - \u043e\u043a\u043e\u043b\u043e 39 \u043b\u0435\u0442. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 - 21 \u0433\u043e\u0434, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 - 72, \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043f\u0440\u0430\u0432\u043e. \u0412 \u044d\u0442\u043e\u043c \u043d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0433\u043e (\u043f\u043e\u0436\u0438\u043b\u044b\u0435 \u043b\u044e\u0434\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u043d\u0430\u044e\u0442 \u043e \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u0445 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043d\u0435\u0434\u043e\u0432\u0435\u0440\u0447\u0438\u0432\u044b \u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430\u043c), \u043d\u043e \u043d\u0430\u0434\u043e \u0443\u0447\u0435\u0441\u0442\u044c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u0442\u044c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c) \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438. \u041d\u0443 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u043f\u0443\u043d\u043a\u0442\u0435 \u043f\u0440\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u0445 \u043d\u0435\u0442 - \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0431\u044b \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0431\u044b\u043b 3 \u0433\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 - 110, \u043c\u044b \u0431\u044b \u043d\u0430\u0441\u0442\u043e\u0440\u043e\u0436\u0438\u043b\u0438\u0441\u044c. \u0410 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u0441\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e.\n\n\u0423 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441\u043a\u043e\u0440\u0435\u0435 \u043d\u0435\u0442 \u043c\u0430\u0448\u0438\u043d\u044b, \u0447\u0435\u043c \u043e\u043d\u0430 \u0435\u0441\u0442\u044c. \u0410 \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0441\u0442\u044c, \u0442\u043e \u044d\u0442\u043e, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0430.\n\n\u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442, \u043d\u043e \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043f\u0443\u043d\u043a\u0442 \u043d\u0430\u0434\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0442\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u043d\u0430 \u044d\u0442\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435: 33. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u0432\u043f\u0440\u0430\u0432\u043e.\n\n\u0421\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b - \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0434\u043e\u0431\u0440\u043e\u0441\u043e\u0432\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430, \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u0432\u043e\u0438 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043f\u043e \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044e \u0438 \u043f\u043e\u0433\u0430\u0448\u0435\u043d\u0438\u044e \u043a\u0440\u0435\u0434\u0438\u0442\u0430. \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0431\u0430\u043b\u043b \u043d\u0430\u0448\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 -1.904535049, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 -3.62458632, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 0.19977285. \u0421\u0443\u0434\u044f \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e.\n\n\u0412\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\", \u0432 \u043d\u0435\u043c \u0435\u0441\u0442\u044c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043b\u0435\u0432\u043e. \u0423\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u0438\u0437 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u0441 \u043d\u0438\u0437\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0438 \u0447\u0442\u043e \u0441 \u043d\u0438\u043c\u0438 \u0434\u0435\u043b\u0430\u0442\u044c (\u0443\u0436 \u043d\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043b\u0438 \u044d\u0442\u043e?)\n\n\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0441\u043c\u0435\u0449\u0435\u043d \u0432\u043b\u0435\u0432\u043e, \u0438 \u044d\u0442\u043e \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e: \u0442\u0435, \u043a\u0442\u043e \u0431\u0435\u0440\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442, \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043d\u0435\u043b\u044c\u0437\u044f \u043b\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \"\u0441\u0432\u0435\u0440\u0445\u0443\".\n\nDefault - \u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f. \u0412 \u043d\u0435\u0439 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 (\u043e\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0442\u0430), \u043d\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u043e\u043d\u0438 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u044e\u0442.","2a95ee79":"\u0414\u0435\u0444\u043e\u043b\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0434\u043d\u044f \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d. \u041c\u043e\u0436\u043d\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.","7148aede":"\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u0430\u0434\u0440\u0435\u0441 \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0433\u043e... \u0442\u043e\u0433\u043e! \u0410, \u043d\u0435\u0442, \u0431\u0435\u0437 \u043d\u0435\u0433\u043e \u0445\u0443\u0436\u0435.","59c0eac6":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u043e\u043c\u0443 \u0438\u0437 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430 \u043c\u043e\u0436\u043d\u043e \u0434\u0430\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442, \u0430 \u043a\u043e\u043c\u0443 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0438 \u043d\u0435 \u043d\u0430\u0434\u043e \u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u0432\u0432\u043e\u0434\u043d\u044b\u0445.\n\n\u041f\u0440\u043e\u0435\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0415\u043b\u0435\u043d\u043e\u0439 \u0412\u0438\u043d\u043e\u0433\u0440\u0430\u0434\u043e\u0432\u043e\u0439.\n\n[\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431](https:\/\/github.com\/Lenkka\/skillfactory\/tree\/master\/module_5)\n[\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0438\u0434\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430](https:\/\/github.com\/Lenkka\/skillfactory\/blob\/master\/module_5\/readme.txt)","99dfb998":"# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","48ecd87e":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","472bffe6":"\u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0432 \u0431\u0430\u043d\u043a\u0435 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435. \u0415\u0441\u0442\u044c \u0443 \u043d\u0430\u0441 \u0442\u0443\u0442 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043d\u0430\u0434\u043e \u0441 \u043d\u0438\u043c \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f.","533a050b":"# \u0422\u0440\u0435\u0442\u044c\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430. \u0413\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","f0a45923":"# \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438?","d4a975d9":"# \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430. Oversampling","2352efe3":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","84b464ef":"\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u0447\u0443\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0438 \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u0448\u0438\u043a\u0430\u0440\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u0439\u0434\u0443\u0442\u0441\u044f \u0431\u0435\u0437 \u0434\u0435\u0444\u043e\u043b\u0442\u0430. \u041d\u043e \u043d\u0430\u0448\u0430-\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0439\u0442\u0438 \u0438 \u0442\u0435\u0445, \u043a\u0442\u043e \u0434\u0435\u0444\u043e\u043b\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0449\u0430\u0439\u0442\u0435, \u0434\u0435\u043d\u044c\u0433\u0438 \u0431\u0430\u043d\u043a\u0430...\n\u041f\u043e\u0434\u0443\u043c\u0430\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437.","77045256":"\u0418\u0445 \u044f \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u0430 \u0440\u0443\u043a\u0430\u043c\u0438. \u041c\u0430\u043c\u043e\u0439 \u043a\u043b\u044f\u043d\u0443\u0441, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0431\u0435\u0437 \u043d\u0438\u0445! (\u0438\u0437 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0438)","73d1d566":"# \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c","3445a75f":" \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 \u044d\u0442\u043e\u043c \u043f\u0443\u043d\u043a\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u0445\u043e\u0434, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043e\u0441\u043e\u0431\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 (\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430 \u043d\u0438 \u0443 \u043a\u043e\u0433\u043e \u043d\u0435 \u0431\u044b\u043b\u043e).","99ccbdea":"# \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438","e841a760":"\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435: \u043b\u044e\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0435\u0440\u0443\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u0432 \u0447\u0435\u0442\u0432\u0435\u0440\u0433, \u0447\u0443\u0442\u044c \u0447\u0430\u0449\u0435 \u043d\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u0432\u044b\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 \u0432 \u0441\u0440\u043e\u043a, \u0430 \u043b\u044e\u0434\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0435\u0440\u0443\u0442 \u0435\u0433\u043e \u0432 \u043f\u044f\u0442\u043d\u0438\u0446\u0443, - \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442.\n\n\u0418 \u0435\u0449\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435: \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u043f\u043b\u0430\u0442\u044f\u0442 \u0432 \u0441\u0440\u043e\u043a \u043c\u043e\u043b\u043e\u0434\u0435\u0436\u044c \u0438 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u0436\u0438\u043b\u044b\u0435 \u043b\u044e\u0434\u0438.\n\n","f0eaf974":"\u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435, \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c.","ee09e844":"# \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0441 \u0434\u0430\u0442\u043e\u0439","dfab5fba":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043b\u0430\u0431\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435.","2fa0685c":"# \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","3ce5842b":"\u0421\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 car \u0438 car_type. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u0434\u0430\u043b\u0438\u0442\u044c car \u043a\u0430\u043a \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439, \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0441\u0442\u0430\u043b\u043e \u043b\u0443\u0447\u0448\u0435).\n","aa7e8434":"# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n \n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n \n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n \n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n \n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n \n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n \n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n \n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n \n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n \n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n \n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n \n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n \n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n \n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n \n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n \n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n \n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443"}}