{"cell_type":{"c70c562e":"code","79155be8":"code","405bfeaa":"code","d8c99075":"code","fa7dad32":"code","55a4af06":"code","258d7a5f":"code","c50dc1a2":"code","c974e3c1":"code","baf1dba4":"code","3adab822":"code","80842117":"code","bd8c5a36":"code","ab28e952":"code","8e098f19":"code","82696ca4":"code","6ede7831":"code","422f6df4":"code","11cd9fdc":"code","08dbee43":"code","933d27b4":"code","0164c317":"code","258c72f5":"code","b9f24ee7":"code","43bb20a8":"code","c3ae7370":"markdown","f50a057d":"markdown","c640e1f5":"markdown","128c1bea":"markdown","c6a95d6b":"markdown","a6cf2cd7":"markdown","31204ff8":"markdown","d596f4a8":"markdown","48f7e08a":"markdown","050cabd3":"markdown","5eea7561":"markdown","02159e5e":"markdown","8cb483df":"markdown","6c00a5fb":"markdown","ed883f17":"markdown","33fe3da8":"markdown","3d38d6e7":"markdown","44b160f6":"markdown","2466d63e":"markdown","3dd260eb":"markdown","974d7406":"markdown","9f4c267c":"markdown","e40f0e7f":"markdown","76fbab7a":"markdown","9fec87b2":"markdown","bbb3b741":"markdown","5bd9a163":"markdown","865b2fe7":"markdown","27c47811":"markdown","85f2cd50":"markdown","32ea59df":"markdown","7445567a":"markdown","eb091b3a":"markdown","54d517e1":"markdown","f440f252":"markdown","00296336":"markdown","23f41ec7":"markdown","711a5971":"markdown","d71932b6":"markdown","43180c09":"markdown","2a8f714a":"markdown","6866a635":"markdown"},"source":{"c70c562e":"import requests\nfrom bs4 import BeautifulSoup\nimport json\nimport pandas as pd\nimport re","79155be8":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[1].string","405bfeaa":"ind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","d8c99075":"df = pd.DataFrame(data['season'])\ndf","fa7dad32":"df = pd.DataFrame(data['shotTypes'])\ndf","55a4af06":"df['2017'].apply(pd.Series)","258d7a5f":"pd.DataFrame(data['shotTypes']['2017']).T","c50dc1a2":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[3].string\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","c974e3c1":"df = pd.DataFrame(data)\ndf","baf1dba4":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[4].string # number 4 script and fifth executable \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","3adab822":"df = pd.DataFrame(data)\ndf","80842117":"# Entering Aleksander Isak ID link\nlink = \"https:\/\/understat.com\/player\/5232\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the grouped stats data, it's the second script executed in order\nstrings = scripts[2].string # number 4 script and fifth executable \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","bd8c5a36":"df = pd.DataFrame(data['FW']).T\ndf","ab28e952":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the shotsData, it's the second script executed in order\nstrings = scripts[1].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","8e098f19":"df_h = pd.DataFrame(data['h'])\ndf_a = pd.DataFrame(data['a'])\ndf = df_h.append(df_a)\ndf","82696ca4":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the Rosters data, it's the third script executed in order\nstrings = scripts[2].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","6ede7831":"df = pd.DataFrame(data['a']).T\ndf","422f6df4":"response = requests.get('https:\/\/understat.com\/match\/15054')\nmatch_info = re.search(\"match_info\\s+=\\s+JSON.parse\\('([^']+)\", response.text)\ndecoded_string = bytes(match_info.groups()[0], 'utf-8').decode('unicode_escape')\nmatchObj = json.loads(decoded_string)\ndf = pd.DataFrame(pd.Series(matchObj))\ndf","11cd9fdc":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the fixtures data\nstrings = scripts[1].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)","08dbee43":"df = pd.DataFrame(data)\ndf","933d27b4":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the table \nstrings = scripts[2].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n","0164c317":"df = pd.DataFrame(data.values())\ndf = df.explode(\"history\")\nh = df.pop(\"history\")\ndf = pd.concat([df.reset_index(drop=True), pd.DataFrame(h.tolist())], axis=1)\ndf = df.infer_objects()","258c72f5":"table = df.groupby(['title']).agg({'wins': 'sum', 'draws': 'sum', 'loses': 'sum', 'scored': 'sum', 'missed': 'sum', 'pts': 'sum', 'xG': 'sum', 'xGA': 'sum', 'xpts': 'sum', 'npxG': 'sum', 'npxGA': 'sum', 'deep': 'sum', 'deep_allowed': 'sum'}).reset_index()\ntable","b9f24ee7":"df = pd.DataFrame(data['148']['history'])\ndf","43bb20a8":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the players stats \nstrings = scripts[3].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n# Creating the dataframe\ndf = pd.DataFrame(data)\ndf","c3ae7370":"<a id=\"4.3\"><\/a>\n## 4.3. Match Stats","f50a057d":"Now we have the entire shot data for both Barcelona and Real Sociedad","c640e1f5":"<a id=\"8.\"><\/a>\n# References\nMy main reference was as stated this video tutorial by [McKay Johns](https:\/\/www.youtube.com\/c\/mckayjohns) but there also some notebooks that helped me such as : \n\n   1. https:\/\/github.com\/Torvaney\/understat-db\/blob\/ee4638f9686398cc042faca4eb91cc4831ad3f40\/understatdb\/understat.py\n   \n   \n   2. https:\/\/github.com\/cooperh01\/understat_scrape\/blob\/main\/FornalsSDScrap.ipynb\n   \n   \n   3. https:\/\/github.com\/Torvaney\/understat-db\/blob\/ee4638f9686398cc042faca4eb91cc4831ad3f40\/understatdb\/understat.py \n   \n   \n   4. These stack overflow responses : \n   \n   https:\/\/stackoverflow.com\/questions\/54868228\/issue-with-scraping-understat-chart-data-using-selenium ,   \n   \n   https:\/\/stackoverflow.com\/questions\/67859503\/web-scraping-understat-top-players-data , \n   \n   https:\/\/stackoverflow.com\/questions\/62431388\/how-to-get-the-data-from-a-script-tag-on-a-website-using-python","128c1bea":"And just like that we obtain an unnested DataFrame, here's an alternative method , done by just calling 2 keys with the dictionary : ","c6a95d6b":"<a id=\"3.\"><\/a>\n# 3. Players data\n\nLet's scrape all the data from the Understat page using Beautiful Soup and the player ID in this case for Isak 5232 ","a6cf2cd7":"# Webscraping of Understat using the Beautiful Soup\n\n\n\n**By Jose Gonzalez**\n\n\n**Was greatly inspired by the [McKay Johns tutorial](https:\/\/www.youtube.com\/watch?v=IsR5FrjNmro) he has great tutorials on shotmaps, passing networks, dashboards etc , [here is Youtube channel](https:\/\/www.youtube.com\/c\/mckayjohns)**\n\n![image.png](attachment:image.png)","31204ff8":"Now that we have the data we have to clean and get rid of the unnecessary characters ","d596f4a8":"<a id=\"9.\"><\/a>\n# Other notebooks\nHere are some other notebooks on the subject : \n\n   1. https:\/\/github.com\/douglasbc\/scraping-understat-dataset\/tree\/main\/scraping\n   \n   \n   2. https:\/\/github.com\/cooperh01\/understat_scrape\/blob\/main\/FornalsSDScrap.ipynb\n   \n   \n   3. https:\/\/github.com\/Astrosan\/Soccer-Result-Prediction-Winning-Bets\/blob\/76e9db4ea447a8c04d0cdc13f2b4dde2b797f5e9\/01_WebScraping\/01_Soccer_Result_Prediction_WebScraping.ipynb","48f7e08a":"<a id=\"6.\"><\/a>\n# 6. Get table\nLet's now scrape the standings table containing information about xG, xGA PPDA, etc","050cabd3":"**It's very important to distinguish between the the number of scripts and their own number, remember in Python it starts at 0, for instance if we wish to call the shots script , it would be the fourth script but the number \"[3]\"**","5eea7561":"Same procedure as before but using instead the last script , belonging to the stats by Isak","02159e5e":"Once again pretty straightforward to execute","8cb483df":"For some keys such as shotZones, shotTypes and OpenPlays , they are nested , meaning they have dictionaries inside dictionaries and if we proceed to create dataframes with them , we'll obtain dataframes with dictionaries inside them, this is a good example : ","6c00a5fb":"<a id=\"4.\"><\/a>\n# 4. Match data\n\nLet's focus now on the data we can scrape by using the Beautiful Soup library and the match's IDs.","ed883f17":"In the case of the table it returns once again a nested dataframe, the column of interest is the history data, it contains data for every single match the team played. We'll focus on Barcelona, 148 ID and then on the key history. And now we have all 38 matches data for Barcelona's 2021 season","33fe3da8":"And now we have the entire shot data for Aleksander Isak career","3d38d6e7":"As with other cases the fixtures are highly nested ","44b160f6":"For the matches data links, the order and the number of scripts change : \n\nThe second script available ,[1] to call it is the shotsData : \n\n","2466d63e":"To unnest them what we can do is to apply the series function and create more dataframes out of it ","3dd260eb":"We must call several keys and create DataFrames of them","974d7406":"<a id=\"3.1\"><\/a>\n## 3.1. Players grouped stats\n\nTo get the json data from the Understat page we must first request, find it and execute the script we want , in this case number [1] , the grouped data.","9f4c267c":"<a id=\"4.2\"><\/a>\n## 4.2 Rosters data\n\nNow let's scrap the rosters data for both teams , giving us the stats for the give match : ","e40f0e7f":"<a id=\"3.4\"><\/a>\n## 3.4. Radar data\n\nIn case you want to plot any radar to compare players , this data will be useful, this time using the third script available to execute\n","76fbab7a":"<a id=\"1.\"><\/a>\n# 1. Introduction\n\nThis is the beggining of my Understat series in which I intent to using 4 different methods to scrape data from [Understat](https:\/\/understat.com\/) using Selenium, The Understat module created by [Amos Sebastian](https:\/\/understat.readthedocs.io\/en\/latest\/) and Beautiful Soup, heavily inspired by McKay [Johns tutorials](https:\/\/www.youtube.com\/c\/mckayjohns). Also I plan on using for loops to scrape entire rosters and all goals in several leagues.\n\nThis notebook's made to scrape football statistics from the incredible webpage Understat using **Beautiful Soup library and Heavily inspired by McKay Johs tutorials .**\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)\n","9fec87b2":"Contrary to grouped stats,the creation of DataFrames for  the shot data is pretty straightforward given that we do not have any nested data ","bbb3b741":"In this case we focused on Barcelona's roster","5bd9a163":"As it happens in some cases the data is nested","865b2fe7":"<a id=\"7.\"><\/a>\n# 7. Getting all players stats\nIn this section we'll scrape the major stats for each player in la liga","27c47811":"As it's happened before the shots data for the Barcelona vs Sociedad match is nested into home and away \"h\",\"a\". To unnest them we must create to different DataFrames and merge them together : ","85f2cd50":"<a id=\"1.1\"><\/a>\n## 1.1 Notebook content ","32ea59df":"<a id=\"6.2\"><\/a>\n## Teams Individual performance","7445567a":"<a id=\"3.2\"><\/a>\n## 3.2. Players shot data \n\nSame procedure as the grouped stats except the script for the player shots is the fourth instead of the third and remember python starts on 0 so it's the 4 script available to execute but when called it's [3] \n","eb091b3a":"As with the Understat module and the Selenium tutorial , we cannot create a dataframe for data beacuse it'll lead to ambiguous ordering , logical given that the data is divided such as this : \n\n**To create the dataframes we can call the keys such as this pd.DataFrame(data['season'])**\n\nThis is for **data['season']** , this is going to be for the grouped stats organized by season :\n\n\n","54d517e1":"<a id=\"4.1\"><\/a>\n## 4.1. Shot Data","f440f252":"<a id=\"3.3\"><\/a>\n## 3.3. Match data\n","00296336":"* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Player data.](#3.)\n    - [3.1. Player grouped stat.](#3.1)\n    - [3.2. Shot data.](#3.2)\n    - [3.3. Match data.](#3.3)\n    - [3.4. Radar data.](#3.4)\n* [4. Match data](#4.)\n    - [4.1. Shot data.](#4.1)\n    - [4.2. Player match info](#4.2)\n    - [4.3. Match stats](#4.3)\n* [5. Get fixtures](#5.)\n* [6. Get table](#6.)\n   -  [6.1. Full table.](#6.1)\n   -  [6.2. Teams individual performance](#6.2)\n* [7. Scrape Bundesliga rosters](#7.)\n* [8. References](#8.)\n* [9. Other notebooks](#9.)","23f41ec7":"<a id=\"6.1\"><\/a>\n## Full table","711a5971":"On Selenium we called directly the variables by their name, shotsData for example, instead for Beautiful Soup we call the scripts by their order.For the players link there are usually 4 scripts we are able to call : \n\n\nThe second script we are able to call is grouped stats script : \n\n\n![image-5.png](attachment:image-5.png)\n\nThe third script we are able to call is the radar charts stats : \n\n\n![image-6.png](attachment:image-6.png)\n\nThe fourth script we are able to call is the shots data : \n\n\n\n![image-7.png](attachment:image-7.png)\n\n\n\nThe last script we are able to call is the the stats per game by Isak : \n![image-8.png](attachment:image-8.png)","d71932b6":"And we obtain the exact same result. There are more keys to explore such as shotZones , shotTypes and situation \n","43180c09":"<a id=\"2.\"><\/a>\n# 2. Importing libraries","2a8f714a":"<a id=\"5.\"><\/a>\n# 5. Get fixtures","6866a635":"Here we can scrape some of the stats of the game such as goals scored, shots taken and received, ppdda, xG, xGA and interestingly enough win probability under the name of h_w , h_l and h_d\n![image.png](attachment:image.png)"}}