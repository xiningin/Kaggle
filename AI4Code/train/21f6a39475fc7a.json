{"cell_type":{"33095d95":"code","59b922c4":"code","f0d011fd":"code","efb98b40":"code","8c8e1a15":"code","75b6d6c4":"code","45eca378":"code","bda4a4c0":"code","4e6c479c":"code","605dbd82":"code","0355fc81":"code","d01b6e50":"code","eb20c851":"code","2af47ded":"code","69ea7725":"code","52afb55d":"code","620d3870":"code","639c8969":"code","71b609a0":"code","7559f79e":"code","efc7edc3":"code","18998590":"code","9ffd6df0":"code","421d87ac":"code","da71fdbe":"code","905e79b0":"code","014d61b3":"code","16791092":"code","4e12436c":"code","bb16b8dd":"code","7d27fd5e":"code","eacc168f":"markdown"},"source":{"33095d95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import make_scorer,f1_score, accuracy_score, precision_score\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","59b922c4":"dfTickets = pd.read_csv('..\/input\/all_tickets.csv')\ndfTickets.info()","f0d011fd":"dfTickets.head()","efb98b40":"sns.heatmap(dfTickets.isnull())","8c8e1a15":"dfTickets.isnull().sum()","75b6d6c4":"newdf = dfTickets.select_dtypes([np.number])\nnewdf.columns.values\n","45eca378":"dfTickets['ticket_type'].value_counts()","bda4a4c0":"dfTickets['category'].value_counts()","4e6c479c":"dfTickets['sub_category1'].value_counts()","605dbd82":"len(dfTickets['sub_category1'].value_counts())","0355fc81":"dfTickets['sub_category2'].value_counts()","d01b6e50":"len(dfTickets['sub_category2'].value_counts())","eb20c851":"dfTickets['business_service'].value_counts()\n","2af47ded":"dfTickets['urgency'].value_counts()\n","69ea7725":"dfTickets['impact'].value_counts()\n","52afb55d":"dfTickets['title'].isna().sum()","620d3870":"dfTickets['body'].isna().sum()","639c8969":"dfTickets.shape","71b609a0":"dfTickets.shape","7559f79e":"Y= pd.DataFrame(dfTickets['ticket_type'])","efc7edc3":"X = dfTickets.drop(columns=[\"title\",\"ticket_type\"])","18998590":"print(type(Y))\nprint(type(X))","9ffd6df0":"dfTickets.head()","421d87ac":"X_train, X_test, y_train, y_test = train_test_split(\n    X['body'], Y, test_size=0.4, random_state=0)\n","da71fdbe":"print(X_train.shape)\nprint(y_train.shape)\n","905e79b0":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX_train_tf = cv.fit_transform(X_train)\nX_train_tf.shape","014d61b3":"from sklearn.feature_extraction.text import TfidfTransformer\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf= tfidf_transformer.fit_transform(X_train_tf)\nX_train_tfidf.shape","16791092":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score, accuracy_score\nmnb = MultinomialNB()\nmnb.fit(X_train_tfidf, y_train)","4e12436c":"X_test_tf = cv.transform(X_test)\nX_test_tfidf = tfidf_transformer.transform(X_test_tf)\npred = mnb.predict(X_test_tfidf)\n","bb16b8dd":"print(round(f1_score(y_test, pred),2))\nprint(round(accuracy_score(y_test, pred),2))\n","7d27fd5e":"print('***Stemming***')\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.stem.snowball import SnowballStemmer\nstemmer = SnowballStemmer(\"english\", ignore_stopwords=True)\nclass StemmedCountVectorizer(CountVectorizer):\n    def build_analyzer(self):\n        analyzer = super(StemmedCountVectorizer, self).build_analyzer()\n        return lambda doc: ([stemmer.stem(w) for w in analyzer(doc)])\nstemmed_count_vect = StemmedCountVectorizer(stop_words='english')\nX_train_counts = stemmed_count_vect.fit_transform(X_train)\n\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\ntfidf_transformer = TfidfTransformer()\nX_train_tfidf= tfidf_transformer.fit_transform(X_train_counts)\nX_train_tfidf.shape\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score, accuracy_score\nmnb = MultinomialNB()\nmnb.fit(X_train_tfidf, y_train)\nX_test_tf = stemmed_count_vect.transform(X_test)\nX_test_tfidf = tfidf_transformer.transform(X_test_tf)\npred = mnb.predict(X_test_tfidf)\nprint('MultinomialNB')\nprint(round(f1_score(y_test, pred),2))\nprint(round(accuracy_score(y_test, pred),2))","eacc168f":"**Without Stemming**\nF1 Score : 0.99\nAccuracy Score : 0.99\n\n**With Stemming**\nF1 Score : 0.97\nAccuracy Score : 0.96\n"}}