{"cell_type":{"1ddd3b4f":"code","2914327b":"code","a6df11b5":"code","58a886f2":"code","2affa986":"code","31fb8a68":"code","8e03fe89":"code","a278b5a0":"code","020e92a3":"code","8b3aaeb5":"code","0588d153":"code","87899a93":"code","b34c545f":"code","4f7e0aba":"code","5696de0f":"code","b417d24c":"code","44491445":"code","2467d9b7":"code","7082d66d":"code","b8b77c57":"code","a61de596":"code","69a31877":"code","fb94fc57":"code","a8e81ef8":"code","fa82f3f8":"markdown"},"source":{"1ddd3b4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2914327b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a6df11b5":"df= pd.read_csv(\"\/kaggle\/input\/pokemon\/Pokemon.csv\")","58a886f2":"df.head()","2affa986":"df.dtypes","31fb8a68":"df.describe()","8e03fe89":"df.shape","a278b5a0":"df.isnull().sum()","020e92a3":"#Top 10 pokemons\ndf[[\"Name\",\"Total\"]].sort_values(by= \"Total\",ascending= False).head(10)","8b3aaeb5":"#Least 10 powerfull pokemons\ndf[[\"Name\",\"Total\"]].sort_values(by= \"Total\",ascending= False).tail(10)","0588d153":"#Most powerfull type 1 pokemon types\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(10,10))\nx= df.groupby(\"Type 1\").Total.sum().sort_values(ascending= False)\nfig= sns.barplot(x.values,x.index)\nfig.set_xlabel(\"Overall total\")\nfig.set_ylabel(\"Type\")\nplt.show()","87899a93":"# fastest pokemon types in Type 1","b34c545f":"x= df.groupby(\"Type 1\").Speed.sum().sort_values(ascending= False)\nplt.figure(figsize=(10,10))\nfig= sns.barplot(x.values,x.index)\nfig.set_xlabel(\"Speed\")\nfig.set_ylabel(\"Type\")","4f7e0aba":"#Most defensive type 1 types of pokemon\nplt.figure(figsize=(5,5))\ny= df.groupby(\"Type 1\").Defense.sum().sort_values(ascending= False)\nfig= sns.barplot(y.values,y.index)\nfig.set_xlabel(\"Defense\")\nfig.set_ylabel(\"Type\")","5696de0f":"#Top 10 fastest pokemons\ndf[[\"Name\",\"Speed\"]].sort_values(by= \"Speed\",ascending= False).head(10)","b417d24c":"#pokemons with best attacks\ndf[[\"Name\",\"Attack\"]].sort_values(by= \"Attack\",ascending= False).head(10)","44491445":"#Attack and defense correlation\nplt.figure(figsize=(10,10))\nsns.lmplot(data= df,x= \"Attack\",y= \"Defense\")","2467d9b7":"#Number of pokemons across type 1\nx= df[\"Type 1\"].value_counts()\nsns.barplot(x.values,x.index)","7082d66d":"#Number of pokemons across generations\nx= df.Generation.value_counts()\nax= sns.barplot(x.index,x.values)\nax.set_xlabel(\"Generation\")\nax.set_ylabel(\"No of pokemons\")\n","b8b77c57":"# Violin plot distribution of type 1 pokemons based on attack\nplt.figure(figsize=(20,10))\nax= sns.violinplot(x= \"Type 1\",y= \"Attack\",data= df)\n","a61de596":"# Violin plot distribution of type 1 pokemons based on speed\nplt.figure(figsize=(20,10))\nax= sns.violinplot(x= \"Type 1\",y= \"Speed\",data= df)","69a31877":"# Legendary pokemon distribution\nx= df.Legendary.value_counts()\nlabels=[\"Non legendary\",\"Legendary\"]\nplt.pie(x,labels= labels,autopct= \"%1.1f%%\")\nplt.show()","fb94fc57":"# Type 2 pokemon distribution pie chart\nx= df[\"Type 2\"].value_counts()\nlabels= list(x.index)\nplt.pie(x,labels= labels)\nplt.plot","a8e81ef8":"# Boxplot for overall total for generations of pokemon\nplt.figure(figsize=(10,10))\nsns.boxplot(x= df.Generation,y= df.Total)","fa82f3f8":"Conclusion:\n-Water Type pokemons are strongest and fastest among all types\n-Water type pokemons also have higest defense\n-RayquazaMega Rayquaza,MewtwoMega Mewtwo Y and MewtwoMega Mewtwo X have the best overall stats and considered the strongest\nwhile Sunkern can be considered least strongest as per total stats\n-DeoxysSpeed Forme \tis the fastest pokemon\n-MewtwoMega Mewtwo X has best attack\n-Water type pokemons have most number of pokemons in type 1\n-Most number of pokemons are in Generation 1 and Generation 5\n-Only 8.1% of overall pokemons are legendary\n-Flying type of pokemons have lowest attack and speed(Type 1)\n-Most number of pokemons have Flying type as type 2"}}