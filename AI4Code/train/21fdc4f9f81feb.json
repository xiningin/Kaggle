{"cell_type":{"f791ffe5":"code","8655ae73":"code","7e27a8bb":"code","eaa76d5a":"code","08da727b":"code","ad80707e":"code","6e365f66":"code","f6533094":"code","35ebb83d":"code","fd41d027":"code","b0c3b52b":"code","132fa8b4":"code","554f3ec7":"code","63816d99":"code","29592c61":"code","8ad3d9be":"code","177605bd":"markdown","40ac9bcc":"markdown","05e1272a":"markdown","ed8f7111":"markdown","68fb44ce":"markdown","80d175d7":"markdown","914a18f0":"markdown","e8d12723":"markdown","0d39bd01":"markdown","86606997":"markdown"},"source":{"f791ffe5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8655ae73":"dataset = pd.read_csv('..\/input\/iris\/Iris.csv')\nX = dataset.iloc[:,1:-1].values # Independent_vars\ny = dataset.iloc[:,-1].values # Dependent_vars\n\nprint(dataset.describe()) # for numerical_cols\nprint(dataset.describe(include='object')) # for categorical_cols","7e27a8bb":"sns.barplot(x=dataset.Species,y=dataset.SepalLengthCm)\nplt.xlabel('Species')\nplt.ylabel('SepalLengthCm')\nplt.title('Relationship btw Species and SepalLengthCm')\n","eaa76d5a":"sns.barplot(x=dataset.Species,y=dataset.SepalWidthCm)\nplt.xlabel('Species')\nplt.ylabel('SepalWidthCm')\nplt.title('Relationship btw Species and SepalWidthCm')","08da727b":"sns.barplot(x=dataset.Species,y=dataset.PetalLengthCm)\nplt.xlabel('Species')\nplt.ylabel('PetalLengthCm')\nplt.title('Relationship btw Species and PetalLengthCm')","ad80707e":"sns.barplot(x=dataset.Species,y=dataset.PetalWidthCm)\nplt.xlabel('Species')\nplt.ylabel('PetalWidthCm')\nplt.title('Relationship btw Species and PetalWidthCm')","6e365f66":"sns.scatterplot(x=dataset.SepalLengthCm, y=dataset.PetalLengthCm, hue=dataset.Species)\nplt.xlabel('SepalLengthcm')\nplt.ylabel('PetalLengthCm')\nplt.title('Relationship btw SepalLengthcm and PetalLengthCm')","f6533094":"sns.scatterplot(x=dataset.SepalWidthCm, y=dataset.PetalWidthCm, hue=dataset.Species)\nplt.xlabel('SepalWidthCm')\nplt.ylabel('PetalWidthCm')\nplt.title('Relationship btw SepalWidthCm and PetalWidthCm')","35ebb83d":"dataset.columns.isnull().sum()","fd41d027":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","b0c3b52b":"print(X_train)","132fa8b4":"print(X_test)","554f3ec7":"print(y_train)","63816d99":"print(y_test)","29592c61":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nprint(np.concatenate( (y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1) ), 1))","8ad3d9be":"from sklearn.metrics import confusion_matrix,accuracy_score\n\n# confusion_matrix\n\nprint('Training set')\nprint('confusion_matrix on training set')\nprint(confusion_matrix(y_train,classifier.predict(X_train) ))\n\nprint('accuracy_score on training set')\nprint(accuracy_score(y_train,classifier.predict(X_train)))\n\nprint('\\n')\n\n\nprint('Testing set')\nprint('confusion_matrix on testing set')\nprint(confusion_matrix(y_test, y_pred))\n\nprint('accuracy_score on testing set')\nprint(accuracy_score(y_test, y_pred))\nprint('\\n\\n')\n\n\nfrom sklearn.model_selection import cross_val_score\n\n#basically cross_val_score creates no of folds of trained data that is trained using our classifier , and finds the accuracy for each fold.\n\naccuracies = cross_val_score(estimator=classifier, X=X_train, y=y_train, cv=10) #cv= no of folds\n\nprint('Accuracy of cross_val_score: {:.2f} %'.format(accuracies.mean()*100))\nprint('Standard-Deviation: ',accuracies.std()*100)\n\n\n","177605bd":"# **Importing the dataset**","40ac9bcc":"*Findings: No column has missing values.*","05e1272a":"# **Data Preprossing**","ed8f7111":"> *#Check for missing values columns.*","68fb44ce":"# **Visualizing relationships btw features**","80d175d7":"# Model Performance Evaluation.","914a18f0":"![Model_performance_iris.png](attachment:Model_performance_iris.png)","e8d12723":"# **Importing the libraries**","0d39bd01":"# **Model Building using different classification techniques**","86606997":"# **Splitting Training and Testing data**"}}