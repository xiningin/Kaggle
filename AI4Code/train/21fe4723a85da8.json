{"cell_type":{"5cde6f82":"code","02785ac9":"code","34778afd":"code","5d08f354":"code","3005e500":"code","22887442":"code","ed75b968":"code","45af9ea7":"code","3b1f1850":"code","9127e26c":"code","06f8ec47":"markdown","94f495f1":"markdown","86eb6097":"markdown","ae6aaa1f":"markdown","355d7c2a":"markdown","843bb145":"markdown"},"source":{"5cde6f82":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport itertools\nimport matplotlib.pyplot as plt","02785ac9":"!wget 'https:\/\/www.dropbox.com\/s\/6b1ervg883khysg\/train_true.csv'\n!wget 'https:\/\/www.dropbox.com\/s\/y2g55iywusndq7h\/train_preds.csv'","34778afd":"train_true = pd.read_csv('train_true.csv')\ntrain_preds = pd.read_csv('train_preds.csv')","5d08f354":"labels  = ['Nucleoplasm','Nuclear membrane','Nucleoli',\n'Nucleoli fibrillar center','Nuclear speckles','Nuclear bodies',\n'Endoplasmic reticulum ','Golgi apparatus','Peroxisomes',\n'Endosomes','Lysosomes','Intermediate filaments ',\n'Actin filaments','Focal adhesion sites','Microtubules',\n'Microtubule ends','Cytokinetic bridge','Mitotic spindle',\n'Microtubule organizing center','Centrosome','Lipid droplets',\n'Plasma membrane','Cell junctions','Mitochondria',\n'Aggresome','Cytosol','Cytoplasmic bodies', 'Rods & rings']","3005e500":"yt = train_true.values[:, 1:]\nyp = (train_preds.values[:, 1:] > 0).astype('int')","22887442":"# based on https:\/\/www.kaggle.com\/nikolaikopernik\/confusion-matrix\ndef confusion_matrix(yt, yp, labels):\n    instcount = yt.shape[0]\n    n_classes = len(labels)\n    fp = ((yt - yp) < 0).sum(axis = 0)\n    fn = ((yt - yp) > 0).sum(axis = 0)\n    tp = (yt*yp).sum(axis = 0)\n    tn = ((yt==0)*(yp==0)).sum(axis = 0)\n    mtx = np.vstack([tp\/(tp + fn), fn\/(tp + fn), tn\/(tn + fp), fp\/(tn + fp)]).T\n    plt.figure(num=None, figsize=(5, 15), dpi=100, facecolor='w', edgecolor='k')\n    plt.imshow(mtx, interpolation='nearest',cmap='Blues')\n    plt.title(\"Confusion matrix\")\n    tick_marks = np.arange(n_classes)\n    plt.xticks(np.arange(4), ['1 - 1','1 - 0','0 - 0','0 - 1'])\n    plt.yticks(tick_marks, labels)\n    for i, j in itertools.product(range(n_classes), range(4)):\n        plt.text(j, i, round(mtx[i][j],2), horizontalalignment=\"center\")\n\n    plt.ylabel('labels')\n    plt.xlabel('True-Predicted')\n    plt.show()","ed75b968":"confusion_matrix(yt, yp, labels)","45af9ea7":"def miss_classification(yt, yp, classes, percent=False, multi_label=True):\n    '''\n    Params:\n        yt, yp : binary numpy array\n        classes : list of names classes\n        percent : display persent of miss classification\n        multi_label : target can have multy labels\n    '''\n\n    n_classes = len(classes)\n    fp = ((yt - yp) < 0).astype('int')\n    fn = ((yt - yp) > 0).astype('int')\n    mtc = (fn.T @ fp)\n    if multi_label:\n        mtc = np.hstack([mtc, (fp.sum(axis = 0) - mtc.sum(axis = 0)).clip(0)[:,None]])\n        classes.append('As extra class')\n    if percent:\n        mtc = (mtc \/ mtc.sum(axis = 1)[:,None])\n        mtc = np.nan_to_num(mtc).clip(0,1) * 100\n        \n    plt.figure(num=None, figsize=(12, 12), dpi=100, facecolor='w', edgecolor='k')\n    plt.imshow(mtc, interpolation='nearest',cmap='Blues')\n    plt.title(\"Miss-Classification table\")\n\n    plt.xticks(np.arange(mtc.shape[1]), classes, rotation=90)\n    plt.yticks(np.arange(mtc.shape[0]), classes, rotation=0)\n    \n    for i in range(mtc.shape[0]):\n        for j in range(mtc.shape[1]):\n            plt.text(j, i, int(mtc[i][j]), horizontalalignment=\"center\")\n    plt.ylabel('labels')\n    plt.xlabel('Miss classed')\n    plt.show()","3b1f1850":"miss_classification(yt, yp, labels)","9127e26c":"miss_classification(yt, yp, labels, percent=True)","06f8ec47":"### Total count of miss classed","94f495f1":"**Percet of miss classed class to class**\nExample: Nuclear speckles clasified as Nucleoplasm in 59% of all missclassed ","86eb6097":"## Confusion matrix and Miss-Classification table","ae6aaa1f":"### Load predictions","355d7c2a":"### Miss-Classification table","843bb145":"### Confusion matrix"}}