{"cell_type":{"f8287e03":"code","b4d0450a":"code","68a86167":"code","ffa06665":"code","2c192d05":"code","96bcc37a":"code","f16968de":"code","8195740d":"code","282aa32b":"code","ccf8dc21":"code","3461fbc2":"code","c939d7f5":"code","c9b4d4c1":"code","480137bc":"code","7b7dd70f":"code","6bf7ac80":"code","61cc5b73":"code","6a989806":"code","149c7a84":"code","e963dc69":"code","556ac735":"code","0db98e81":"code","2b8894c5":"code","15111580":"code","d13b3612":"code","5aa1f6cb":"code","e0abbc47":"code","c04c983b":"code","c9e1b0b2":"code","9dc7b395":"code","d0302c16":"code","bffd2108":"code","779aedde":"code","8abe5f55":"code","30e3eaad":"code","71f40858":"code","c798c95f":"code","7d76d33d":"code","0d9eb4cf":"code","6f73d13b":"code","112198e1":"code","e80bcf44":"code","06387667":"code","bb896dd0":"code","4f314723":"code","74341ad8":"code","bf5428b4":"code","a713b5f2":"code","b62a687f":"code","51d9a752":"code","7429f993":"code","6721d406":"code","83b677f1":"code","3e28d630":"code","32d42acc":"code","42bdb7a9":"code","b642a0ba":"code","2c838df6":"code","8dc37823":"code","6d0f72df":"code","8381ca84":"code","bd362ec6":"code","614aed02":"code","b3521818":"markdown","f50d50a5":"markdown","a85ca20c":"markdown","b050bd49":"markdown","9bad7695":"markdown","895ddd4d":"markdown","bb2d5172":"markdown","a7bbcc02":"markdown","6096f801":"markdown","2170c8bb":"markdown","f7b4e4bb":"markdown","fbf61754":"markdown","e83c5fa4":"markdown","8fdfb8a5":"markdown","4a4355d6":"markdown","8d5bcf39":"markdown","b05650a5":"markdown","54b7cb6f":"markdown","898d82ca":"markdown","0a9916bd":"markdown","014bbb91":"markdown","363cf932":"markdown","f451a56d":"markdown","b76105c9":"markdown","8d289cdd":"markdown","11c1cdbc":"markdown"},"source":{"f8287e03":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom pylab import rcParams\nfrom sklearn import preprocessing","b4d0450a":"df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","68a86167":"df.info()","ffa06665":"df.isnull().any()","2c192d05":"df.isnull().sum()","96bcc37a":"df.head()","f16968de":"#Handling null values on Rating feature\n\ndf['Rating'] = df['Rating'].fillna(df['Rating'].median())","8195740d":"df['Type'].value_counts()","282aa32b":"df[\"Type\"].fillna(\"Free\", inplace = True) ","ccf8dc21":"df['Content Rating'].value_counts()","3461fbc2":"df[\"Content Rating\"].fillna(\"Everyone\", inplace = True) ","c939d7f5":"df['Current Ver'].value_counts()","c9b4d4c1":"df[\"Current Ver\"].fillna(\"1.0\", inplace = True)","480137bc":"df['Android Ver'].value_counts()","7b7dd70f":"df[\"Android Ver\"].fillna(\"4.1 and up\", inplace = True)","6bf7ac80":"df.isnull().sum()","61cc5b73":"df['Rating'].describe()","6a989806":"def type_class(types):\n    if types == 'Free':\n        return 0\n    if types == 'Paid':\n        return 1\n    else:\n        pass\n    \ndf['Type'] = df['Type'].map(type_class)    ","149c7a84":"#Testing the changes:\n\ndf['Type'].value_counts()","e963dc69":"df.Installs=df.Installs.apply(lambda x: x.strip('+'))\ndf.Installs=df.Installs.apply(lambda x: x.replace(',',''))\ndf.Installs=df.Installs.replace('Free',np.nan)\ndf.Installs.value_counts()","556ac735":"#Testing the numeric data.\ndf.Reviews.str.isnumeric().sum()","0db98e81":"df[~df.Reviews.str.isnumeric()]","2b8894c5":"df.Reviews = df.Reviews.apply(lambda x:x.replace('3.0M','3000000'))","15111580":"df['Reviews'] = pd.to_numeric(df['Reviews'])","d13b3612":"rcParams['figure.figsize'] = 12,9\ng = sns.kdeplot(df.Rating, color=\"Blue\", shade = True)\ng.set_xlabel(\"Rating\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Rating',size = 23)","5aa1f6cb":"g = sns.countplot(x=\"Category\",data=df, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('Apps per category',size = 22)","e0abbc47":"df['Installs'].unique()","c04c983b":"df['Installs'].isnull().sum(axis = 0)","c9e1b0b2":"#Dropping null rows on Installs column\ndf.dropna(subset=['Installs'], how='all', inplace=True)","9dc7b395":"#Searching null values on Installs column\ndf['Installs'].isnull().sum(axis = 0)","d0302c16":"#Converting Installs feature to numeric\ndf[\"Installs\"] = pd.to_numeric(df[\"Installs\"])","bffd2108":"sorted_installs = sorted(list(df['Installs'].unique()))\ndf['Installs'].replace(sorted_installs, range(0, len(sorted_installs),1), inplace = True)","779aedde":"df['Installs'].head()","8abe5f55":"plt.figure(figsize = (12,12))\nsns.regplot(x=\"Installs\", y=\"Rating\", color = 'teal',data=df);\nplt.title('Rating VS Installs',size = 22)","30e3eaad":"#Converting values to numeric values.\n\nle = preprocessing.LabelEncoder()\ndf['App'] = le.fit_transform(df['App'])","71f40858":"#Encoding category feature.\n\nle = preprocessing.LabelEncoder()\ndf['Category'] = le.fit_transform(df['Category'])","c798c95f":"#Encoding genre features.\n\nle = preprocessing.LabelEncoder()\ndf['Genres'] = le.fit_transform(df['Genres'])","7d76d33d":"#Content Rating encoding.\n\nle = preprocessing.LabelEncoder()\ndf['Content Rating'] = le.fit_transform(df['Content Rating'])","0d9eb4cf":"#Cleaning Price feature.\n\ndf['Price'] = df['Price'].apply(lambda x : x.strip('$'))","6f73d13b":"# Type encoding\n\ndf['Type'] = pd.get_dummies(df['Type'])","112198e1":"df = df[df['Last Updated'] != 0]","e80bcf44":"#Encoding Last Updated feature.\n\nimport time\nimport datetime\n\ndf['Last Updated'] = df['Last Updated'].apply(lambda x : time.mktime(datetime.datetime.strptime(x, '%B %d, %Y').timetuple()))","06387667":"df.select_dtypes(exclude=['int', 'float']).columns","bb896dd0":"#Type encoding.\n\nle = preprocessing.LabelEncoder()\ndf['Type'] = le.fit_transform(df['Type'])","4f314723":"# Convert kbytes to Mbytes \n\nk_indices = df['Size'].loc[df['Size'].str.contains('k')].index.tolist()\nconverter = pd.DataFrame(df.loc[k_indices, 'Size'].apply(lambda x: x.strip('k')).astype(float).apply(lambda x: x \/ 1024).apply(lambda x: round(x, 3)).astype(str))\ndf.loc[k_indices,'Size'] = converter","74341ad8":"#Size encoding.\n\nle = preprocessing.LabelEncoder()\ndf['Size'] = le.fit_transform(df['Size'])","bf5428b4":"#Cleaning Size feature\n#df['Size'] = df['Size'].apply(lambda x: x.strip('+'))\n#df['Size'] = df['Size'].apply(lambda x: x.strip('M'))\n\ndf[df['Size'] == 'Varies with device'] = 0\ndf['Size'] = df['Size'].astype(float)","a713b5f2":"#Seacrching for more non numerical data\n\ndf.info()","b62a687f":"#Showing lines with non numerical data\n\ndf.loc[~df['Price'].astype(str).str.isdigit()]","51d9a752":"#Replacing values on Current Ver feature\n\ndf['Current Ver'].replace('Varies with device', np.nan, inplace = True )\ndf['Current Ver'] = pd.to_numeric(df['Current Ver'], errors='coerce') \ndf['Current Ver'] = df['Current Ver'].fillna(df['Current Ver'].mean())","7429f993":"df['Android Ver']","6721d406":"df['Android Ver'] = df['Android Ver'].str.replace(r'\\D', '')","83b677f1":"#Replace the blank values with the most frequent one\n\ndf['Android Ver'].replace('', 403)\ndf['Android Ver'].fillna(403, inplace=True)","3e28d630":"df['Android Ver'] = pd.to_numeric(df['Android Ver'])","32d42acc":"df[df.isna().any(axis=1)]","42bdb7a9":"#Finding the mode\n\ndf.mode()['Android Ver'][0]","b642a0ba":"#We will replace de null values with the mode\n\ndf['Android Ver'] = df['Android Ver'].fillna(df['Android Ver'].mode()[0])","2c838df6":"df.isnull().sum()","8dc37823":"#Splitting data in to train and test.\n\nfrom sklearn.model_selection import train_test_split\n\nX = df.drop(labels = ['Rating'], axis=1)\nY = df.Rating\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25)","6d0f72df":"#K Nearest Neighbors\n\nfrom sklearn.neighbors import KNeighborsRegressor\n\nknear = KNeighborsRegressor(n_neighbors=50)\nmodelKnn = knear.fit(X_train, y_train)\n\n#Show score\ny_pred = modelKnn.predict(X_test)\nmetrics.mean_absolute_error(y_test, y_pred)","8381ca84":"#Stochastic Gradient Descent\n\nfrom sklearn import linear_model\n\nSGD = linear_model.SGDRegressor()\nmodelSGD = SGD.fit(X_train, y_train)\n\n#Score\ny_pred = modelSGD.predict(X_test)\nmetrics.mean_absolute_error(y_test, y_pred)","bd362ec6":"#Support Vector Regressor\n\nfrom sklearn.svm import SVR\n\nsvr = SVR()\nmodelSVR = svr.fit(X_train, y_train)\n\n#Score\ny_pred = modelSVR.predict(X_test)\nmetrics.mean_absolute_error(y_test, y_pred)","614aed02":"#Linear Regression\n\nfrom sklearn.linear_model import LinearRegression\n\nLR = LinearRegression()\nmodelLr = LR.fit(X_train, y_train)\n\n#Score\ny_pred = modelLr.predict(X_test)\nmetrics.mean_absolute_error(y_test, y_pred)","b3521818":"**Machine Learning.**\n\nWe wiil begin splitting train and test data.","f50d50a5":"Mean and median is very close.","a85ca20c":"Let's just start importing some libraries.","b050bd49":"One value is not numeric, let\u00b4s find it.","9bad7695":"We will do the same to Current Ver and Android Ver.","895ddd4d":"We will convert this value '3.0M' to numeric.","bb2d5172":"Let's see some descriptive statistics.","a7bbcc02":"Now we will do categorical data encoding.","6096f801":"We will fill the null value of the feature Type with \"Free\".","2170c8bb":"We will fill the null values from feature Rating with the median.","f7b4e4bb":"Fixing some null values on \"Android Ver\" feature.","fbf61754":"First we will remove '+' and ',' from Install feature.","e83c5fa4":"We must handle with these values \"Varies with device\" that is appearing at some features.\nWe will replace these values to the mean of values of the feature.","8fdfb8a5":"Now we will convert the feature Type where values is Free to 0 and Paid to 1.","4a4355d6":"By the plot, the average  rating is between 4 and 5 and it was confirmed on statistics..","8d5bcf39":"Cleaning Text from \"Android Ver\" column.","b05650a5":"Let\u00b4s check if all value on feature 'Reviews' are numeric.","54b7cb6f":"Cleaning data","898d82ca":"Apps from game and family categories appears in bigger quantity on the dataset.","0a9916bd":"The features Rating, Type, Content Rating, Current Ver, Android Ver has null values. We will use median to fill it.","014bbb91":"Hello everyone, this is my second Kernel and I have learned a lot with some nice notebooks here. We will try to explore the data and use machine learning to predict apps rating on Play Store. This is a simple notebook (I hope my next will be more advanced) and I will run basic ML algorithms.","363cf932":"We will use the same strategy on the feature Content Rating, filling the null value with the most frequent value, which is Everyone.","f451a56d":"We will remove lines with zeros.","b76105c9":"We found one row with null value on Installs feature. So we choose to delete it.","8d289cdd":"It seems that the number of install affect the rating.","11c1cdbc":"Probably it is not the better way, but We removed the text and the dots from the column."}}