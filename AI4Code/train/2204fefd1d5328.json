{"cell_type":{"b18f3b66":"code","1f31587b":"code","6dd6329e":"code","6f100258":"code","deb4a669":"code","a94c1fc9":"code","093457da":"code","0d2c042d":"code","a0e040aa":"code","bec933ab":"code","628bf3ff":"code","d6f21f0a":"code","cd5567fb":"code","a5104f4b":"code","fa4ede13":"code","b23efe55":"code","5cd04130":"code","8b15ac17":"code","c1d956ea":"code","f7a9e858":"code","6dbaf5c1":"code","987bb695":"code","ff97c29f":"code","00ed49f5":"code","c877ff9e":"code","ca0452fd":"code","37bba809":"code","9a995153":"code","06630567":"code","3aa2553a":"code","6a62b3be":"code","a6bee7d2":"code","13de354d":"code","82b76b2f":"code","f2cb375f":"code","971f63ec":"code","f335959e":"code","a9ec7786":"code","297b0f35":"code","bda28258":"code","f61a6ddd":"code","cbe51535":"code","9aa91cb7":"code","c680e245":"markdown","ca64f6a0":"markdown","56336bb2":"markdown","a5a4c38d":"markdown","a41c8651":"markdown","01b81918":"markdown"},"source":{"b18f3b66":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","1f31587b":"#load datasets\np1_whe = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\np1_gen = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\np2_whe = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')\np2_gen = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')","6dd6329e":"p1_gen.isnull().sum() #null value cheaking in plant 1 generation data","6f100258":"p2_gen.isnull().sum() #null value cheaking in plant 2 generation data","deb4a669":"p1_whe.isnull().sum() #null value cheaking in plant 1 wheather sensor data","a94c1fc9":"p2_whe.isnull().sum() #null value cheaking in plant 2 wheather sensor data","093457da":"p1_gen.info() #plant 1","0d2c042d":"p2_gen.info() #plant 2","a0e040aa":"#saperate date and time, store into new column date, time\n\n#plant 1 power genration data \np1_gen[['date','time']] = p1_gen['DATE_TIME'].apply(lambda x: pd.Series(str(x).split(\" \")))\n\n#plant 2 power genration data\np2_gen[['date','time']] = p2_gen['DATE_TIME'].apply(lambda x: pd.Series(str(x).split(\" \")))\n\n#plant 1 wheather sensor data\np1_whe[['Date','Time']] = p1_whe['DATE_TIME'].apply(lambda x: pd.Series(str(x).split(' ')))\n\n#plant 2 wheather sensor data\np2_whe[['Date','Time']] = p2_whe['DATE_TIME'].apply(lambda x: pd.Series(str(x).split(' ')))","bec933ab":"#drop unnecessary columns like plant id and date_time\n\n#plant 1\np1_gen.drop(['DATE_TIME','PLANT_ID'],axis=1,inplace=True)\n\n#plant 2\np2_gen.drop(['DATE_TIME','PLANT_ID'],axis=1,inplace=True)","628bf3ff":"#power generation data\n#saparate day, month ,hour and minute\n\n#plant 1\np1_gen['day'] = pd.to_datetime(p1_gen.date).dt.day \np1_gen['month'] = pd.to_datetime(p1_gen.date).dt.month\np1_gen['hour'] = pd.to_datetime(p1_gen.time).dt.hour\np1_gen['minute'] = pd.to_datetime(p1_gen.time).dt.minute\n\n#plant 2\np2_gen['day'] = pd.to_datetime(p2_gen.date).dt.day \np2_gen['month'] = pd.to_datetime(p2_gen.date).dt.month\np2_gen['hour'] = pd.to_datetime(p2_gen.time).dt.hour\np2_gen['minute'] = pd.to_datetime(p2_gen.time).dt.minute\n\n#plant 1\np1_gen.drop(['date','time'],axis=1,inplace=True)\n\n#plant 2\np2_gen.drop(['date','time'],axis=1,inplace=True)","d6f21f0a":"#wheather sensor data\n#extract day, month, hour, minute and drop PLANT_ID, Date, Time, DATE_TIME columns\n\n#plant 1\np1_whe['day'] = pd.to_datetime(p1_whe.Date).dt.day\np1_whe['month'] = pd.to_datetime(p1_whe.Date).dt.month\np1_whe['hour'] = pd.to_datetime(p1_whe.Time).dt.hour\np1_whe['minute'] = pd.to_datetime(p1_whe.Time).dt.minute\np1_whe.drop(['PLANT_ID','Date','Time','DATE_TIME'],axis=1,inplace=True)\n\n#plant 2\np2_whe['day'] = pd.to_datetime(p2_whe.Date).dt.day\np2_whe['month'] = pd.to_datetime(p2_whe.Date).dt.month\np2_whe['hour'] = pd.to_datetime(p2_whe.Time).dt.hour\np2_whe['minute'] = pd.to_datetime(p2_whe.Time).dt.minute\np2_whe.drop(['PLANT_ID','Date','Time','DATE_TIME'],axis=1,inplace=True)","cd5567fb":"#get last five records\n\np1_gen.tail() #plant 1","a5104f4b":"p1_whe.head() #plant 1","fa4ede13":"p2_gen.tail() #plant 2","b23efe55":"p2_whe.head() #plant 2","5cd04130":"p1_gen.describe() #plant 1","8b15ac17":"p1_whe.describe() #plant 1","c1d956ea":"p2_gen.describe() #plant 2","f7a9e858":"p2_whe.describe() #plant 2","6dbaf5c1":"print('Mean value of daily yield (for plant 1) :',p1_gen.describe().loc['mean','DAILY_YIELD'])\n\nprint('Mean value of daily yield (for plant 2) :',p2_gen.describe().loc['mean','DAILY_YIELD'])","987bb695":"#extract all 5th and 6th month data points\n\n#platn 1 \np1_gen = p1_gen.loc[(p1_gen.month == 5) | (p1_gen.month == 6)]\n\n#platn 2 \np2_gen = p2_gen.loc[(p2_gen.month == 5) | (p2_gen.month == 6)]","ff97c29f":"#plot_by_hour return bar plot of given column w.r.t hour and month\n#each bar represent hour wise total power ganeration. \n\n#plant 1\ndef plot_by_hour(data, val = None, agg = 'sum'):\n    dd = data\n    by_hour = dd.groupby(['hour','month'])[val].agg(agg).unstack()\n    return by_hour.plot(kind='bar', figsize=(15,4),width=1,grid=True,title='Plant 1'+' '+val,legend=True)\n\nplot_by_hour(p1_gen,'DC_POWER') \nplot_by_hour(p1_gen,'AC_POWER')\nplot_by_hour(p1_gen,'DAILY_YIELD') \n\n\n#plant 2\ndef plot_by_hour(data, val = None, agg = 'sum'):\n    dd = data\n    by_hour = dd.groupby(['hour','month'])[val].agg(agg).unstack()\n    return by_hour.plot(kind='bar', figsize=(15,4),width=1,grid=True,title='Plant 2'+' '+val,legend=True)\n\nplot_by_hour(p2_gen,'DC_POWER') \nplot_by_hour(p2_gen,'AC_POWER')\nplot_by_hour(p2_gen,'DAILY_YIELD') \n","00ed49f5":"#DC power comparison \ndef line_plot(data, col=None, agg = 'sum'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7),title=col, grid =True, legend=True) \n    ax.legend([\"plant 1\", \"plant 2\"]);\n    return (\"Comparison of DC power generation\")\n\nline_plot(p1_gen,'DC_POWER')\nline_plot(p2_gen,'DC_POWER')","c877ff9e":"#AC power comparison \ndef line_plot(data, col=None, agg = 'sum'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7),title=col, grid =True, legend=True) \n    ax.legend([\"plant 1\", \"plant 2\"]);\n    return \"Comparison of AC power generation\"\n\nline_plot(p1_gen,'AC_POWER')\nline_plot(p2_gen,'AC_POWER')","ca0452fd":"#Daily yeild comparison between plant 1 and 2\ndef line_plot(data, col=None, agg = 'sum'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7),title=col, grid =True, legend=True) \n    ax.legend([\"plant 1\", \"plant 2\"]);\n    return 'Daily yeild comparison'\n\nline_plot(p1_gen,'DAILY_YIELD')\nline_plot(p2_gen,'DAILY_YIELD') ","37bba809":"#hour wise 5th and 6th month comparison of ambient temparature and module temparature. \n\n#plant 1\ndef func(data, val = None, agg = 'mean'):\n    dd=data\n    by_hr = dd.groupby(['hour','month'])[val].agg(agg).unstack()\n    return by_hr.plot(kind='bar',figsize=(15,5),width=0.9,grid=True,title='Plant 1'+\" \"+val)\n\nfunc(p1_whe,'AMBIENT_TEMPERATURE')\nfunc(p1_whe,'MODULE_TEMPERATURE')\nfunc(p1_whe,'IRRADIATION')\n\n#plant 2\ndef func(data, val = None, agg = 'mean'):\n    dd=data\n    by_hr = dd.groupby(['hour','month'])[val].agg(agg).unstack()\n    return by_hr.plot(kind='bar',figsize=(15,5),width=0.9,grid=True,title='Plant 2'+\" \"+val)\n\nfunc(p2_whe,'AMBIENT_TEMPERATURE')\nfunc(p2_whe,'MODULE_TEMPERATURE')\nfunc(p2_whe,'IRRADIATION')","9a995153":"#irradiation comparison between plant 1 and plant 2 \n\ndef line_plot(data, col=None, agg = 'mean'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7), grid =True, legend=True) \n    ax.legend(['plant 1','plant 2'])\n    return 'Irradiation comparison'\n\nline_plot(p1_whe,'IRRADIATION')\nline_plot(p2_whe,'IRRADIATION')","06630567":"#AMBIENT TEMPERATURE comparison between plant 1 and plant 2 \n\ndef line_plot(data, col=None, agg = 'mean'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7), grid =True, legend=True) \n    ax.legend(['plant 1','plant 2'])\n    return 'Ambient temperature comparison'\n\nline_plot(p1_whe,'AMBIENT_TEMPERATURE')\nline_plot(p2_whe,'AMBIENT_TEMPERATURE')","3aa2553a":"#MODULE TEMPERATURE comparison between plant 1 and plant 2 \n\ndef line_plot(data, col=None, agg = 'mean'):\n    dd = data\n    hours = dd.groupby(['month',\"hour\"])[col].agg(agg)\n    ax = hours.plot(kind=\"line\", figsize=(15,7), grid =True, legend=True) \n    ax.legend(['plant 1','plant 2'])\n    return 'Module temperature comparision'\n\nline_plot(p1_whe,'MODULE_TEMPERATURE')\nline_plot(p2_whe,'MODULE_TEMPERATURE')","6a62b3be":"#Total irradiation per day\n\n#plant 1\nirr_per_day_p1 = pd.DataFrame(p1_whe.groupby(['month',\"day\"])['IRRADIATION'].agg('sum'))\nirr_per_day_p1","a6bee7d2":"#plant 1\nirr_per_day_p2 = pd.DataFrame(p2_whe.groupby(['month',\"day\"])['IRRADIATION'].agg('sum'))\nirr_per_day_p2","13de354d":"#max ambient and module temperature\n\nprint(' Maximum ambient temparature (plant 1): ',max(p1_whe.AMBIENT_TEMPERATURE),'\\n','Maximum module temparature (plant 1): ',max(p1_whe.MODULE_TEMPERATURE))\nprint(' Maximum ambient temparature (plant 2): ',max(p2_whe.AMBIENT_TEMPERATURE),'\\n','Maximum module temparature (plant 2): ',max(p2_whe.MODULE_TEMPERATURE))","82b76b2f":"#number of inverters in each plant\n\nprint(' Inverter in plant 1:',len(p1_gen.SOURCE_KEY.unique()),'\\n','Inverter in plant 2:',len(p2_gen.SOURCE_KEY.unique()))","f2cb375f":"#DC\/AC ratio of plant 1\np1_gen['DC\/AC'] = p1_gen.DC_POWER\/p1_gen.AC_POWER\np1_gen.fillna(0,inplace=True)\n\n#DC\/AC ratio of plant 2\np2_gen['DC\/AC'] = p2_gen.DC_POWER\/p2_gen.AC_POWER\np2_gen.fillna(0,inplace=True)","971f63ec":"#plant 1\np1_gen.sort_values(by='DC\/AC',ascending=False).reset_index(drop=True).head()","f335959e":"#plant 2\np2_gen.sort_values(by='DC\/AC',ascending=False).reset_index(drop=True).head()","a9ec7786":"#Plant 1 inverter rank(DC to AC conversion)\ninverter_rank_p1 = pd.DataFrame(p1_gen.groupby('SOURCE_KEY')['DC\/AC'].agg('max'))\ninverter_rank_p1.sort_values(by='DC\/AC',ascending=False)","297b0f35":"#plant 2\ninverter_rank_p2 = pd.DataFrame(p2_gen.groupby('SOURCE_KEY')['DC\/AC'].agg('max'))\ninverter_rank_p2.sort_values(by='DC\/AC',ascending=False)","bda28258":"#rank the inverter based on DC power generation for plant 1\ninv_rank_by_dc_p2 = pd.DataFrame(p1_gen.groupby('SOURCE_KEY')['DC_POWER'].agg('sum'))\ninv_rank_by_dc_p2.sort_values(by='DC_POWER',ascending=False)","f61a6ddd":"#rank the inverter based on AC power generation\ninv_rank_by_ac_p1 = pd.DataFrame(p1_gen.groupby('SOURCE_KEY')['AC_POWER'].agg('sum'))\ninv_rank_by_ac_p1.sort_values(by='AC_POWER',ascending=False)","cbe51535":"#rank the inverter based on DC power generation for plant 2\ninv_rank_by_dc_p2 = pd.DataFrame(p2_gen.groupby('SOURCE_KEY')['DC_POWER'].agg('sum'))\ninv_rank_by_dc_p2.sort_values(by='DC_POWER',ascending=False)","9aa91cb7":"#rank the inverter based on AC power generation\ninv_rank_by_ac_p2 = pd.DataFrame(p2_gen.groupby('SOURCE_KEY')['AC_POWER'].agg('sum'))\ninv_rank_by_ac_p2.sort_values(by='AC_POWER',ascending=False)","c680e245":"# Check missing value","ca64f6a0":"# EDA","56336bb2":"# Observations:- \n1. Powerplant at its best during 10 to 14 everyday, specially during MAY.\n2. Mean temparature and irradiation higher in 5th month during each hour.\n3. Power generation during 5th month is much higher than 6th.\n4. Plant 1 ganerate more DC power than plant 2.\n5. Ambient temparature higher in plant 2.\n6. Plant 2 has higher DC to AC convertion than plant 1.","a5a4c38d":"# ****Five-number summary****","a41c8651":"# Description\nThis data has been gathered at two solar power plants in India over a 34 day period. It has two pairs of files - each pair has one power generation dataset and one sensor readings dataset. The power generation datasets are gathered at the inverter level - each inverter has multiple lines of solar panels attached to it. The sensor data is gathered at a plant level - single array of sensors optimally placed at the plant.","01b81918":"# Data manipulation"}}