{"cell_type":{"c2dd70d0":"code","66573d6b":"code","d6158852":"code","cf320c89":"code","77095231":"code","7ebed03f":"code","a198e348":"code","fe4b964c":"code","02144894":"code","46b75b75":"code","333679d3":"code","1e7759c3":"code","adae58e6":"code","22ba4165":"code","1b38582e":"code","678f9531":"code","9fb5e0c8":"code","c6d33aa2":"markdown","9d8fe709":"markdown","6a2a40be":"markdown","4a4ca147":"markdown","b1997da6":"markdown","c7ffaa45":"markdown","dfb27dba":"markdown","f488a4e8":"markdown","f58e03ec":"markdown","7eb04c5b":"markdown"},"source":{"c2dd70d0":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier","66573d6b":"# to start, we read in both files\ntest_file = \"..\/input\/titanic\/test.csv\"\ntrain_file = \"..\/input\/titanic\/train.csv\"\n\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntrain = pd.read_csv(train_file)\ntest = pd.read_csv(test_file)","d6158852":"train.head()\n\n# just as a reminder, the train.csv file looks identical except the missing \"Survived\" column","cf320c89":"train.describe()","77095231":"train['Sex'] = train['Sex'].map({'female': '1', 'male': '0'})\ntest['Sex'] = test['Sex'].map({'female': '1', 'male': '0'})\n\ntrain.head()","7ebed03f":"train.isnull().sum()","a198e348":"# Let's replace the missing age values with the average age\ntrain['Age'].fillna(value=train['Age'].mean(), inplace=True)\ntest['Age'].fillna(value=test['Age'].mean(), inplace=True)\n\n# The Cabin column we will exclude from our dataset\ntrain = train.drop('Cabin', axis=1)\ntest = test.drop('Cabin', axis=1)","fe4b964c":"# first for the train.csv file\ntrain['FirstClass'] = train['Pclass'].apply(lambda x: 1 if x == 1 else 0)\ntrain['SecondClass'] = train['Pclass'].apply(lambda x: 1 if x == 2 else 0)\ntrain['ThirdClass'] = train['Pclass'].apply(lambda x: 1 if x == 3 else 0)\n\n# then for the test.csv file\ntest['FirstClass'] = test['Pclass'].apply(lambda x: 1 if x == 1 else 0)\ntest['SecondClass'] = test['Pclass'].apply(lambda x: 1 if x == 2 else 0)\ntest['ThirdClass'] = test['Pclass'].apply(lambda x: 1 if x == 3 else 0)\n\ntrain.head()","02144894":"# our target object\ny = train['Survived']\n\n# our features for predicting y\nfeatures = ['Sex', 'Age', 'FirstClass', 'SecondClass', 'ThirdClass', 'Parch']\nX = train[features]\n","46b75b75":"train_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1, test_size=0.2)","333679d3":"scaler = StandardScaler()\ntrain_features = scaler.fit_transform(train_X)\n#test_features = scaler.transform(val_X)","1e7759c3":"model = LogisticRegression(random_state=1, solver='liblinear')\nmodel.fit(train_X, train_y)","adae58e6":"model.score(train_features, train_y)","22ba4165":"list(zip(['Sex','Age', 'FirstClass', 'SecondClass'],model.coef_[0]))","1b38582e":"model.score(val_X, val_y)","678f9531":"model_on_full_data = LogisticRegression(random_state=1, solver='liblinear')\nmodel_on_full_data.fit(X, y)\n\n# we already imported the test.csv file at the beginning\n# now we create the test_X which comes from test_data but includes only the columns I used for prediction\ntest_X = test[features]\n\n#make predictions which I will submit\ntest_preds = model_on_full_data.predict(test_X)","9fb5e0c8":"submission = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \n                           \"Survived\": test_preds})\n\nsubmission.to_csv('thilos_submission.csv', \n                  index=False)","c6d33aa2":"## Data Exploration\nIn a first step let's see how the data do look like and if there are any abnormalities.","9d8fe709":"## Now split the data in training and test","6a2a40be":"Next, we want to get rid of missing values since we can't work with them in our models.","4a4ca147":"## Let's select our features & labels","b1997da6":"It seems like a good think to change the \"Sex\" values into numericals for being able to process it.","c7ffaa45":"## Normalize our data to fit sklearn's Regularization","dfb27dba":"There are a lot of NaNs in our \"Age\" column - both in the train and test dataframe. As we learned we have to ask ourselves\n> \"Is this value missing because it wasn't recorded or because it doesn't exist?\"\n\nIn our case both, the age as well as the cabin are simply related to not being recorded.","f488a4e8":"# Titanic - Machine Learning from Disaster Competition\nIn 2019\/2020 I completed the [Codecademy Data Scientist Path](https:\/\/www.codecademy.com\/learn\/paths\/data-science) which also included participating in this legendary competition. As written it \"is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.\"\n\nThe dataset already has been split into train.csv and test.csv.","f58e03ec":"## Finally we're able to create our model and fit it on the data","7eb04c5b":"Let's also split the passenger classes since this could be really interesting for the analysis."}}