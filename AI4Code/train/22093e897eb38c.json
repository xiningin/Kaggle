{"cell_type":{"9076b0c1":"code","a7cee2f3":"code","8ea6657b":"code","e2021917":"code","220bb650":"code","ec63ab45":"code","543d28bd":"code","8e57321f":"code","cf589eb4":"code","b1c21915":"code","8dff5c28":"code","86d21dd1":"code","1bcb9b6d":"code","9b344b40":"markdown"},"source":{"9076b0c1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport scipy.stats as ss\nfrom matplotlib.gridspec import GridSpec\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a7cee2f3":"df2015=pd.read_csv(\"\/kaggle\/input\/world-happiness\/2015.csv\").rename(columns={'Happiness Rank': 'Happiness Rank 2015','Happiness Score': 'Happiness Score 2015'})\ndf2016=pd.read_csv(\"\/kaggle\/input\/world-happiness\/2016.csv\").rename(columns={'Happiness Rank': 'Happiness Rank 2016','Happiness Score': 'Happiness Score 2016'})\ndf2017=pd.read_csv(\"\/kaggle\/input\/world-happiness\/2017.csv\").rename(columns={'Whisker.high':'Upper Confidence Interval','Whisker.low':'Lower Confidence Interval', 'Happiness.Rank': 'Happiness Rank 2017','Happiness.Score': 'Happiness Score 2017'})\ndf2018=pd.read_csv(\"\/kaggle\/input\/world-happiness\/2018.csv\").rename(columns={'Country or region':'Country','Overall rank': 'Happiness Rank 2018','Score': 'Happiness Score 2018'})\ndf2019=pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\").rename(columns={'Country or region':'Country','Overall rank': 'Happiness Rank 2019','Score': 'Happiness Score 2019'})\ndf2017.head()","8ea6657b":"df2015.groupby('Region').size()","e2021917":"df2015.Country=df2015.Country.replace({'Somaliland region': 'Somaliland Region'})\n\ndf2017.Country=df2017.Country.replace({'Hong Kong S.A.R., China': 'Hong Kong', 'Taiwan Province of China': 'Taiwan'})\ndf2017=pd.merge(df2017, df2016[['Country', 'Region']], how='left', on='Country')\ndf2017.loc[[112, 138, 154], 'Region']='Sub-Saharan Africa'\n\ndf2018.Country=df2018.Country.replace({'Hong Kong S.A.R., China': 'Hong Kong', 'Taiwan Province of China': 'Taiwan', 'Trinidad & Tobago': 'Trinidad and Tobago'})\ndf2018=pd.merge(df2018, df2016[['Country', 'Region']], how='left', on='Country')\ndf2018.loc[[122, 140, 154], 'Region']='Sub-Saharan Africa'\ndf2018.loc[37, 'Region']='Latin America and Caribbean'\ndf2018.loc[57, 'Region']='Western Europe'\n\ndf2019.Country=df2019.Country.replace({'Hong Kong S.A.R., China': 'Hong Kong', 'Taiwan Province of China': 'Taiwan', 'Trinidad & Tobago': 'Trinidad and Tobago'})\ndf2019=pd.merge(df2019, df2016[['Country', 'Region']], how='left', on='Country')\ndf2019.loc[[119, 122, 134, 143, 154], 'Region']='Sub-Saharan Africa'\ndf2019.loc[38, 'Region']='Latin America and Caribbean'\ndf2019.loc[63, 'Region']='Western Europe'\ndf2019.loc[83, 'Region']='Central and Eastern Europe'","220bb650":"byregion_2015=df2015.groupby('Region').mean()['Happiness Score 2015'].reset_index().sort_values(by='Region', ascending=True)\nbyregion_2016=df2016.groupby('Region').mean()['Happiness Score 2016'].reset_index().sort_values(by='Region', ascending=True)\nbyregion_2017=df2017.groupby('Region').mean()['Happiness Score 2017'].reset_index().sort_values(by='Region', ascending=True)\nbyregion_2018=df2018.groupby('Region').mean()['Happiness Score 2018'].reset_index().sort_values(by='Region', ascending=True)\nbyregion_2019=df2019.groupby('Region').mean()['Happiness Score 2019'].reset_index().sort_values(by='Region', ascending=True)\n\nbyregion_overall=pd.concat([byregion_2015, byregion_2016['Happiness Score 2016'], byregion_2017['Happiness Score 2017'], byregion_2018['Happiness Score 2018'], byregion_2019['Happiness Score 2019']], axis=1)\nbyregion_overall.head()","ec63ab45":"byregion_overall=byregion_overall.T\nbyregion_overall.columns=byregion_overall.iloc[0]\nbyregion_overall=byregion_overall.reset_index()\nbyregion_overall.drop(0, inplace=True)\n\nbyregion_overall['index']=[2015,2016,2017,2018,2019]\nbyregion_overall['index']=pd.to_datetime(byregion_overall['index'], format='%Y')\nbyregion_overall","543d28bd":"bycountry_2015=df2015[['Country', 'Region', 'Happiness Score 2015', 'Standard Error']].sort_values(by=['Region', 'Country'], ascending=True)\nbycountry_2016=df2016[['Country', 'Region', 'Happiness Score 2016', 'Lower Confidence Interval', 'Upper Confidence Interval']].sort_values(by=['Region', 'Country'], ascending=True)\nbycountry_2017=df2017[['Country', 'Region', 'Happiness Score 2017', 'Lower Confidence Interval', 'Upper Confidence Interval']].sort_values(by=['Region', 'Country'], ascending=True)\nbycountry_2018=df2018[['Country', 'Region', 'Happiness Score 2018']].sort_values(by=['Region', 'Country'], ascending=True)\nbycountry_2019=df2019[['Country', 'Region', 'Happiness Score 2019']].sort_values(by=['Region', 'Country'], ascending=True)","8e57321f":"bycountry_2017.head()","cf589eb4":"from functools import reduce\ndfs=[bycountry_2015, bycountry_2016, bycountry_2017, bycountry_2018, bycountry_2019]\nbycountry_overall=reduce( lambda left, right: pd.merge(left, right, how='outer', on=['Country', 'Region']), dfs )\n\nhappcol=['Happiness Score 2015', 'Happiness Score 2016','Happiness Score 2017']\nbycountry_overall['Overall Mean Score']=bycountry_overall[happcol].mean(axis=1)\nbycountry_overall=bycountry_overall.rename(columns={'Standard Error':'Standard_Error2015', 'Lower Confidence Interval_x': 'LCI2016','Upper Confidence Interval_x': 'UCI2016','Lower Confidence Interval_y': 'LCI2017','Upper Confidence Interval_y': 'UCI2017'})\nbycountry_overall.head()","b1c21915":"bycountry_middleeast=bycountry_overall.query(' Region==\"Middle East and Northern Africa\" ').T\nbycountry_middleeast.columns=bycountry_middleeast.loc['Country']\nbycountry_middleeast.drop(['Country', 'Region'], inplace=True)\nbycountry_middleeast=bycountry_middleeast.reset_index()\nbycountry_middleeast","8dff5c28":"bycountry_middleeast.drop('Oman', axis=1, inplace=True)","86d21dd1":"#PLOTTING\n\nplt.style.use('seaborn-colorblind')\nfig=plt.figure(figsize=[15,15])\n\ngs = GridSpec(6,2, figure=fig, hspace=0.25, wspace=0.2)\n\nax1 = fig.add_subplot(gs[0:2,0])\nbycountry_overall.boxplot(column='Overall Mean Score', by='Region', ax=ax1)\n\nlabels=ax1.get_xticklabels()\nax1.set_xticklabels(labels, rotation=35, ha='right')\n\nax1.set_title('Overall Mean Happiness Scores of Countries in Each Region')\nax1.set_ylabel('Mean Happiness Score')\nplt.suptitle(\"World Happiness Report\")\nax1.xaxis.grid(False)\nax1.yaxis.grid(False)\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\n\n#2nd plot\n\ncolumns=byregion_overall.columns[1:].to_list()\ncm = plt.get_cmap('gist_rainbow')\nNUM_COLORS=10\nax2 = fig.add_subplot(gs[0:2,1])\nax2.set_prop_cycle('color', [cm(1.*i\/NUM_COLORS) for i in range(NUM_COLORS)])\nline=byregion_overall.plot('index',columns, marker='o', alpha=0.6, ax=ax2)\n\nax2.set_title('Happiness Scores Over 2015-2019')\nax2.set_ylabel('Happiness Score')\nax2.set_xlabel('Years')\n\n#highlight Middle East and Northern Africa\nposition=byregion_overall.columns.get_loc('Middle East and Northern Africa')-1 #minus one because first col is index which we dont use\nline.lines[position].set_alpha(1)\nline.lines[position].set_linewidth(2)\n\n# Put a legend below current axis\nax2.legend(loc='upper center', bbox_to_anchor=(0.5, -0.13),\n          fancybox=True, shadow=True, ncol=3, fontsize='small')\n\nax2.spines['top'].set_visible(False)\nax2.spines['right'].set_visible(False)\n\n#3rd plot: Countries in middle east\nN=19\nwidth = 0.25       # the width of the bars\ncountries=bycountry_middleeast.columns.to_list()[1:]\nax3 = fig.add_subplot(gs[3:,:])\nbars1=ax3.bar(np.arange(N), bycountry_middleeast.iloc[0, 1:], label='2015', width=width,\n        yerr=bycountry_middleeast.iloc[1,1:],capsize=7,alpha=0.6,\n        error_kw={'capsize': 5, 'elinewidth': 2, 'alpha':0.7}) \n\nbars2=ax3.bar(np.arange(N)+width,bycountry_middleeast.iloc[2, 1:], label='2016',width=width,\n       yerr=np.c_[bycountry_middleeast.iloc[2, 1:]-bycountry_middleeast.iloc[3,1:],bycountry_middleeast.iloc[4, 1:]-bycountry_middleeast.iloc[2,1:] ].T,\n        alpha=0.6,error_kw={'capsize': 5, 'elinewidth': 2, 'alpha':0.7})\n\nbars3=ax3.bar(np.arange(N)+width*2, bycountry_middleeast.iloc[5, 1:], label='2017',width=width,\n       yerr=np.c_[bycountry_middleeast.iloc[5, 1:]-bycountry_middleeast.iloc[6,1:],bycountry_middleeast.iloc[7, 1:]-bycountry_middleeast.iloc[5,1:] ].T,\n        alpha=0.6,error_kw={'capsize': 5, 'elinewidth': 2, 'alpha':0.7})\nax3.legend(fancybox=True, shadow=True,fontsize='small')\n\nax3.set_title('Happiness Scores of Countries in Middle East & North Africa')\n\nax3.set_xticks(np.arange(N) + width)\nax3.set_xticklabels(countries, rotation=35, ha='right')\n\nax3.set_ylim([2.5,8])\n\nax3.set_ylabel('Happiness Score')\n\n[ax3.spines[loc].set_visible(False) for loc in ['top', 'right']] \n\n#highlight Syria\npos=bycountry_middleeast.columns.get_loc('Syria')-1\nbars1[pos].set_alpha(1)\nbars2[pos].set_alpha(1)\nbars3[pos].set_alpha(1)","1bcb9b6d":"#fig.savefig('assignment4.png', dpi=fig.dpi)","9b344b40":"# **WORK HAPPINESS REPORT DATASET EXPLORATION**\n*I started to learn Pandas in March and then got my hands on Matplotlib around April. I want to improve my skills more, so please feel free to give feedback down below if you have the time, any welcomed. Hope you enjoy this visualization!*"}}