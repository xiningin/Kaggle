{"cell_type":{"50e6a55a":"code","3ce2a877":"code","56c43fa7":"code","7ad2380d":"code","fc68a025":"code","1553211f":"code","dfd6932f":"code","682749c5":"markdown","0b223e93":"markdown","c316a9c7":"markdown","7d1eb346":"markdown","a857369c":"markdown","60f0bd6d":"markdown","c1b5d2cd":"markdown","65b0c42c":"markdown","4e448430":"markdown"},"source":{"50e6a55a":"# Familiar imports\nimport numpy as np\nimport pandas as pd\n\n# For ordinal encoding categorical variables, splitting data\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\n\n# For training random forest model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","3ce2a877":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\")\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsub = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n# Preview the data\ntrain.head()","56c43fa7":"# Separate target from features\ny = train['target']\nfeatures = train.drop(['target', 'id'], axis=1)\ntest.drop(['id'], axis=1, inplace=True)\n\n# Preview features\nfeatures.head()","7ad2380d":"test.head()","fc68a025":"# List of categorical columns\nobject_cols = [col for col in features.columns if 'cat' in col]\nnumerical_cols = [col for col in features.columns if col.startswith('cont')]\nX = features.copy()\nX_test = test.copy()\n\n# ordinal-encode categorical columns\nordinal_encoder = OrdinalEncoder()\nX[object_cols] = ordinal_encoder.fit_transform(X[object_cols])\nX_test[object_cols] = ordinal_encoder.transform(X_test[object_cols])\n\n# scaler numerical columns\nscaler = StandardScaler()\nX[numerical_cols] = scaler.fit_transform(X[numerical_cols])\nX_test[numerical_cols] = scaler.transform(X_test[numerical_cols])\n\n# Preview the ordinal-encoded and scaler features\nX.head()","1553211f":"# Define the model  XGBoost\nfrom xgboost import XGBRegressor\nparams = {\n    'n_estimators': 5000,\n    'learning_rate': 0.1235,\n    'subsample': 0.95,\n    'colsample_bytree': 0.11,\n    'max_depth': 2,\n    'booster': 'gbtree', \n    'reg_lambda': 66.1,\n    'reg_alpha': 15.9,\n    'random_state':42,\n    'tree_method': 'gpu_hist',\n    'gpu_id': 0,\n    'predictor': 'gpu_predictor'\n}\n\nfinal_predictions = []\nkf = KFold(n_splits=10, shuffle=True, random_state=42)\nfor fold, (train_indicies, valid_indicies) in enumerate(kf.split(X=X)):\n    X_train = X.loc[train_indicies]\n    X_valid = X.loc[valid_indicies]\n    y_train = y.loc[train_indicies]\n    y_valid = y.loc[valid_indicies]\n    \n    model = XGBRegressor(**params)\n    model.fit(X_train, y_train,\n             verbose = False,\n             eval_set = [(X_train, y_train), (X_valid, y_valid)],\n             eval_metric = \"rmse\",\n             early_stopping_rounds = 100)\n\n    preds_valid = model.predict(X_valid)\n    preds_test = model.predict(X_test)\n    final_predictions.append(preds_test)\n    print(fold, mean_squared_error(y_valid, preds_valid, squared=False))","dfd6932f":"preds = np.mean(np.column_stack(final_predictions), axis=1)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': sub.id,\n                       'target': preds})\noutput.to_csv('submission.csv', index=False)","682749c5":"# Step 3: Prepare the data\n\nNext, we'll need to handle the categorical columns (`cat0`, `cat1`, ... `cat9`).  \n\nIn the **[Categorical Variables lesson](https:\/\/www.kaggle.com\/alexisbcook\/categorical-variables)** in the Intermediate Machine Learning course, you learned several different ways to encode categorical variables in a dataset.  In this notebook, we'll use ordinal encoding and save our encoded features as new variables `X` and `X_test`.","0b223e93":"# Step 2: Load the data\n\nNext, we'll load the training and test data.  \n\nWe set `index_col=0` in the code cell below to use the `id` column to index the DataFrame.  (*If you're not sure how this works, try temporarily removing `index_col=0` and see how it changes the result.*)","c316a9c7":"Next, we break off a validation set from the training data.","7d1eb346":"Once you have run the code cell above, follow the instructions below to submit to the competition:\n1. Begin by clicking on the **Save Version** button in the top right corner of the window.  This will generate a pop-up window.  \n2. Ensure that the **Save and Run All** option is selected, and then click on the **Save** button.\n3. This generates a window in the bottom left corner of the notebook.  After it has finished running, click on the number to the right of the **Save Version** button.  This pulls up a list of versions on the right of the screen.  Click on the ellipsis **(...)** to the right of the most recent version, and select **Open in Viewer**.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the **Output** tab on the right of the screen.  Then, click on the file you would like to submit, and click on the **Submit** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\nIf you want to keep working to improve your performance, select the **Edit** button in the top right of the screen. Then you can change your code and repeat the process. There's a lot of room to improve, and you will climb up the leaderboard as you work.","a857369c":"In the code cell above, we set `squared=False` to get the root mean squared error (RMSE) on the validation data.\n\n# Step 5: Submit to the competition\n\nWe'll begin by using the trained model to generate predictions, which we'll save to a CSV file.","60f0bd6d":"The next code cell separates the target (which we assign to `y`) from the training features (which we assign to `features`).","c1b5d2cd":"Welcome to the **[30 Days of ML competition](https:\/\/www.kaggle.com\/c\/30-days-of-ml\/overview)**!  In this notebook, you'll learn how to make your first submission.\n\nBefore getting started, make your own editable copy of this notebook by clicking on the **Copy and Edit** button.\n\n# Step 1: Import helpful libraries\n\nWe begin by importing the libraries we'll need.  Some of them will be familiar from the **[Intro to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)** course and the **[Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)** course.","65b0c42c":"# Step 4: Train a model: \nUse LightGBM and KFold to split data\n","4e448430":"# Step 6: Keep Learning!\n\nIf you're not sure what to do next, you can begin by trying out more model types!\n1. If you took the **[Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)** course, then you learned about **[XGBoost](https:\/\/www.kaggle.com\/alexisbcook\/xgboost)**.  Try training a model with XGBoost, to improve over the performance you got here.\n\n2. Take the time to learn about **Light GBM (LGBM)**, which is similar to XGBoost, since they both use gradient boosting to iteratively add decision trees to an ensemble.  In case you're not sure how to get started, **[here's a notebook](https:\/\/www.kaggle.com\/svyatoslavsokolov\/tps-feb-2021-lgbm-simple-version)** that trains a model on a similar dataset."}}