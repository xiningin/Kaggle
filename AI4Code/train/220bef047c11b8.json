{"cell_type":{"351d7bf6":"code","16683f62":"code","330fe81a":"code","767e399c":"code","fb55829d":"code","549dbc69":"code","5f3eb043":"code","2ca8c14a":"code","a872ef8d":"code","b1f0611f":"code","eb8ea2ca":"code","567d933a":"code","05b4c094":"code","17cad055":"code","6c8b8444":"code","643788b9":"code","f345f4ea":"code","752f17d3":"code","a4ebab91":"code","d03f6ac1":"code","f644e5b7":"code","34da0868":"code","7027c927":"markdown","4ad0ae29":"markdown"},"source":{"351d7bf6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16683f62":"4 + 7\n11 * 7  \nsqrt(25)  \nlog10(100)  \n4 \/ 2 \n8 %\/% 3  \n10 %% 3","330fe81a":"vec1 <- c(10, 20, 15, 40)  \nvec2 <- c(\"a\", \"b\", \"c\", NA)\nvec3 <- c(TRUE, FALSE, TRUE, TRUE)  \nvec4 <- gl(4, 1, 4, label = c(\"l1\", \"l2\", \"l3\", \"l4\")) \nlength(vec1)  \nprint(vec1[1]) \nprint(vec1[1:4]) \nlength(vec2)  \nprint(vec2[1:4]) \nprint(vec3[]) \nprint(vec4[])","767e399c":"myDf1 <- data.frame(vec1, vec2)  \nmyDf2 <- data.frame(vec1, vec3, vec4)\nmyDf3 <- data.frame(vec1, vec2, vec3)\nlibrary(datasets) # initialize\nlibrary(help=datasets)","fb55829d":"class(airquality) \nsapply(airquality, class)  \nstr(airquality)  \nsummary(airquality)  \nhead(airquality)  \nfix(airquality)  \nrownames(airquality)  \ncolnames(airquality)  \nnrow(airquality) \nncol(airquality)","549dbc69":"cbind(myDf1, myDf2)  \nrbind(myDf1, myDf1) \nmyDf1$vec1  \nmyDf1[, 1]  \nmyDf1[, c(1,2)]  \nmyDf1[c(1:5), c(2)]","5f3eb043":"subset(airquality, Day == 1, select = -Temp) \nairquality[which(airquality$Day==1), -c(4)]","2ca8c14a":"set.seed(100)\ntrainIndex <- sample(c(1:nrow(airquality)), size=nrow(airquality)*0.7, replace=F)\nairquality[trainIndex, ]  \nairquality[-trainIndex, ]","a872ef8d":"library(ggplot2)\nggplot(diamonds)  \nggplot(diamonds, aes(x=carat)) \nggplot(diamonds, aes(x=carat, y=price))  \nggplot(diamonds, aes(x=carat, color=cut))","b1f0611f":"ggplot(diamonds, aes(x=carat), color=\"steelblue\")\n","eb8ea2ca":"ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth()\nggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price, color=cut))","567d933a":"library(ggplot2)\nggplot(diamonds) + geom_point(aes(x=carat, y=price, color=cut)) + geom_smooth(aes(x=carat, y=price)) \nggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=cut)) + geom_smooth()","05b4c094":"ggplot(diamonds, aes(x=carat, y=price, color=cut, shape=color)) + geom_point()\nlibrary(ggplot2)\ngg <- ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + labs(title=\"Scatterplot\", x=\"Carat\", y=\"Price\")  # add axis lables and plot title.\nprint(gg)","17cad055":"gg1 <- gg + theme(plot.title=element_text(size=30, face=\"bold\"), \n                  axis.text.x=element_text(size=15), \n                  axis.text.y=element_text(size=15),\n                  axis.title.x=element_text(size=25),\n                  axis.title.y=element_text(size=25)) + \n  scale_color_discrete(name=\"Cut of diamonds\")  #\nprint(gg1)","6c8b8444":"gg1 + facet_wrap( ~ cut, ncol=3)","643788b9":"gg1 + facet_wrap(color ~ cut)\n","f345f4ea":"library(ggfortify)\nautoplot(AirPassengers) + labs(title=\"AirPassengers\")","752f17d3":"data(economics, package=\"ggplot2\")  \neconomics <- data.frame(economics) \nggplot(economics) + geom_line(aes(x=date, y=pce, color=\"pcs\")) + geom_line(aes(x=date, y=unemploy, col=\"unemploy\")) + scale_color_discrete(name=\"Legend\") + labs(title=\"Economics\") # plot multiple time series using 'geom_line's\n\nlibrary(reshape2)\ndf <- melt(economics[, c(\"date\", \"pce\", \"unemploy\")], id=\"date\")\nggplot(df) + geom_line(aes(x=date, y=value, color=variable)) + labs(title=\"Economics\")","a4ebab91":"df <- melt(economics[, c(\"date\", \"pce\", \"unemploy\", \"psavert\")], id=\"date\")\nggplot(df) + geom_line(aes(x=date, y=value, color=variable))  + facet_wrap( ~ variable, scales=\"free\")","d03f6ac1":"plot1 <- ggplot(mtcars, aes(x=cyl)) + geom_bar() + labs(title=\"Frequency bar chart\") \nprint(plot1)","f644e5b7":"df <- data.frame(var=c(\"a\", \"b\", \"c\"), nums=c(1:3))\nggplot(df, aes(x=var, y=nums)) + geom_bar(stat = \"identity\") + coord_flip() + labs(title=\"Coordinates are flipped\")","34da0868":"ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() +theme_bw() + labs(title=\"bw Theme\")","7027c927":"### ggplot2","4ad0ae29":"### **Computer Anim & Visualization**\n### W9 Optional Assignment R ggplot\n![image.png](attachment:182cdcb3-4f81-46c3-b455-8469e6da5a9b.png)"}}