{"cell_type":{"39bf9c80":"code","dbf43cfd":"code","aa293a2a":"code","84a368a0":"code","fedbff8b":"code","dc358967":"code","8ff5cd87":"code","11c013ff":"code","6f0188f8":"code","630838b3":"code","feebd052":"code","fa2dfe6c":"code","33d1ca4e":"code","3cebe39e":"code","f7e39734":"code","e1e8cfd0":"code","bb9a5e79":"code","6bcbf756":"code","d3d0d463":"markdown","6b910ea1":"markdown","22304767":"markdown","5f14747d":"markdown","fa09c0e0":"markdown","7460d873":"markdown","22cf0f39":"markdown","ba899fae":"markdown","004268f7":"markdown","4af1148f":"markdown","d73a601d":"markdown","11a9b278":"markdown","40d5ee3e":"markdown","58358dc4":"markdown","9edbc494":"markdown","cb4e41cc":"markdown","7ef129ee":"markdown","311d2fc8":"markdown"},"source":{"39bf9c80":"import pandas as pd\nimport numpy as np\nfrom plotnine import *\nimport warnings\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","dbf43cfd":"train_feat = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntest_feat = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\ntrain_target = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')","aa293a2a":"train_feat['type'] = 'train'\ntest_feat['type'] = 'test'\ndf = train_feat.append(test_feat)\ndf.shape","84a368a0":"print(train_feat.shape)\nprint(test_feat.shape)\nprint(train_target.shape)","fedbff8b":"train_feat.head()","dc358967":"cols = train_feat.columns.tolist()\ngtype = [col for col in cols if \"g-\" in col]\nctype = [col for col in cols if \"c-\" in col]\nprint(\"g- type(gene expression data columns count) :\", len(gtype))\nprint(\"c- type(cell viabillity data columns count) :\", len(ctype))","8ff5cd87":"print(\"NA count :\", train_feat.isnull().sum().sum())\nprint(\"NA count(TARGET):\", train_target.isnull().sum().sum())","11c013ff":"train_target.set_index('sig_id', inplace = True)\ntrain_target.sum().sum() \/ (train_target.shape[0] * train_target.shape[1])","6f0188f8":"train_target.sum(axis = 1).value_counts()","630838b3":"target_count = pd.DataFrame(train_target.sum()).reset_index()\ntarget_count.columns = [\"target\", \"cnt\"]\ntarget_count.sort_values(\"cnt\", ascending = False, inplace = True)\ntarget_count.reset_index(drop = True, inplace = True)\nprint(target_count.head(20))\n\np = (ggplot(target_count[:20], aes('target', 'cnt', fill = 'target')) + geom_col(alpha = 0.5) + theme(axis_text_x=element_text(rotation=45, hjust=1)) +\n     ggtitle('Top 20 Target counts'))\nprint(p)","feebd052":"def cutting_str(x):\n    return x.split(\"_\")[-1]\n\n\ntarget_count['prop'] = target_count['cnt'] \/ target_count.shape[0]\ntarget_count['target_subset'] = target_count['target'].apply(cutting_str)\ntarget_count['target_subset'].value_counts(normalize = True).head(10)","fa2dfe6c":"p = (ggplot(train_feat, aes('factor(cp_type)', fill = 'factor(cp_type)')) + geom_bar(alpha = 0.5) + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cptype count')) \nprint(p)\np = (ggplot(df, aes('factor(type)', fill = 'factor(cp_type)')) + geom_bar(alpha = 0.5, position=\"fill\") + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cptype count (train vs test)')) \nprint(p)","33d1ca4e":"temp = train_feat.loc[train_feat.cp_type == 'ctl_vehicle']['sig_id'].values.tolist()\ntemp = train_target.loc[train_target.sig_id.isin(temp)]\nprint(temp.shape)\ntemp.set_index('sig_id', inplace = True)\nprint(\"ctrl_vehicle target counts :\", temp.sum(axis = 1).sum())","3cebe39e":"p = (ggplot(train_feat, aes('factor(cp_time)', fill = 'factor(cp_time)')) + geom_bar(alpha = 0.5) + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cptime count')) \nprint(p)\np = (ggplot(df, aes('factor(type)', fill = 'factor(cp_time)')) + geom_bar(alpha = 0.5, position=\"fill\") + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cptime count (train vs test)')) \nprint(p)","f7e39734":"p = (ggplot(train_feat, aes('factor(cp_dose)', fill = 'factor(cp_dose)')) + geom_bar(alpha = 0.5) + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cpdose count')) \nprint(p)\np = (ggplot(df, aes('factor(type)', fill = 'factor(cp_dose)')) + geom_bar(alpha = 0.5, position=\"fill\") + theme(axis_text_x=element_text(rotation=45, hjust=1), figure_size = (5, 4)) +\n     ggtitle('cpdose count (train vs test)')) \nprint(p)","e1e8cfd0":"temp = train_feat[gtype]\ntemp.shape\ntemp = temp.iloc[:, :30].corr()\ntemp.reset_index(inplace= True)\ntemp = pd.melt(temp, id_vars= 'index')\n\np = ( ggplot(temp, aes(x='factor(index)', y='factor(variable)', fill='value')) + geom_tile(alpha = 1) + theme_minimal() +scale_fill_gradient2() +\n     theme(figure_size = (12, 9)) + ggtitle(\"g-type columns corr\") + theme(axis_text_x=element_text(rotation=90, hjust=1))   )\n\nprint(p)","bb9a5e79":"train_feat[gtype].describe()","6bcbf756":"train_feat[ctype].describe()","d3d0d463":"#### to be continued","6b910ea1":"54% target columns has \"inhibitor\", 15% target has antagonist.  \nAs we saw earlier, there are multiple targets on the same row.   \nprobably, if they have the same name, isn't there a high probability of having multiple targets?(To-Do)","22304767":"### 7. c- type columns","5f14747d":"### 1. load datasets","fa09c0e0":"### 5. cp_dose","7460d873":"No interesting point was found.","22cf0f39":"### 2. Target","ba899fae":"Until now, it has been difficult to grasp the special meaning. \nHowever, at the end of the target's name, found common words.(inhibitor, antagonist..)","004268f7":"- cp_type indicates samples treated with a **compound (cp_vehicle)** or with a **control perturbation (ctrl_vehicle)**.\n- **control perturbations have no MoAs.**","4af1148f":"only 0.3% of values have 1, otherwise have 0. ","d73a601d":"### 3. cp_type","11a9b278":"Although most of the values are 0 and 1, but some values are 2 or more.  \nIn this case, it is necessary to analyze the relationship between targets.","40d5ee3e":"No interesting point was found.","58358dc4":"- It can be seen that if the cp_type = ctl_vehicle, values are all zero.\n- It is necessary to check how the corresponding values affect other variables than predictions.","9edbc494":"### 6. g- type columns","cb4e41cc":"> The size of the column is too large for the size of the row.. process of selecting appropriate variables is necessary.","7ef129ee":"- looks like column group with similar properties(ex. g-16, g-17 or g-7, g-8, g-9?), or has no relation to other columns(ex. g-18)","311d2fc8":"### 4. cp_time"}}