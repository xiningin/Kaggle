{"cell_type":{"125a7918":"code","1de90166":"code","85bd5f2a":"code","97fc440c":"code","620963a4":"code","8fb74028":"code","12098094":"code","32ccff1c":"code","9f3a2133":"code","8405bcc7":"code","5af5d890":"code","f6586d89":"code","06c9489f":"code","26e2cf3c":"code","1b6e078d":"code","a97febd6":"code","14699cb1":"code","1c2ca82b":"code","ea1f09c1":"code","0cda8f54":"code","ae6563a7":"code","3bcb3e33":"markdown"},"source":{"125a7918":"import numpy as np # linear algebra\nimport os\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport os\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom librosa import feature\nimport librosa \nimport matplotlib.pyplot as plt\nimport IPython.display as ipd  # To play sound in the notebook\nimport librosa.display\nimport json\nfrom matplotlib.pyplot import specgram\nimport pandas as pd\nimport seaborn as sns\nimport glob \nimport os\nfrom tqdm import tqdm\nimport pickle\nfrom PIL import Image\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.nn import init\nfrom torch.utils.data import Dataset, DataLoader, TensorDataset\nfrom torchvision import transforms, utils\nfrom torch.autograd import Variable\nfrom torchvision import models","1de90166":"# Use one audio file in previous parts again\nimport os\nMUSIC = '\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original'\nmusic_dataset = []\ngenre_target = []\nfor root, dirs, files in os.walk(MUSIC):\n    for name in files:\n        filename = os.path.join(root, name)\n        if filename != '\/kaggle\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/jazz\/jazz.00054.wav':\n            music_dataset.append(filename)\n            genre_target.append(filename.split(\"\/\")[6])","85bd5f2a":"music_dataset[67]","97fc440c":"mel_spec=[]\ngenre_new=[]\nN_FFT = 512\nN_MELS = 96\nHOP_LEN = 256\nnum_div=8\nfor idx, wav in enumerate(music_dataset):\n    y, sfr = librosa.load(wav)\n    div= np.split(y[:660000], num_div)\n    for chunck in div:\n        melSpec = librosa.feature.melspectrogram(y=chunck, sr=sfr, n_mels=N_MELS,hop_length=HOP_LEN, n_fft=N_FFT)\n        melSpec_dB = librosa.power_to_db(melSpec, ref=np.max)\n        mel_spec.append(melSpec_dB)\n        genre_new.append(genre_target[idx])","620963a4":"genres={'pop':1,'classical':2,'reggae':3,'disco':4,'jazz':5,'metal':6,'country':7,'blues':8,'hiphop':9,'rock':0}\ngenre_id = [genres[item] for item in genre_new]","8fb74028":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(mel_spec, genre_id, test_size=0.2, random_state=42)","12098094":"BATCH_SIZE = 256\n\ntorch_X_train = torch.unsqueeze(torch.cuda.FloatTensor(X_train),1)\ntorch_y_train = torch.cuda.LongTensor(y_train)\n\n# create feature and targets tensor for test set.\ntorch_X_test = torch.unsqueeze(torch.cuda.FloatTensor(X_test),1)\ntorch_y_test = torch.cuda.LongTensor(y_test)\n\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\ntest = torch.utils.data.TensorDataset(torch_X_test,torch_y_test)\n\n# data loader\ntrain_loader = torch.utils.data.DataLoader(train, batch_size = BATCH_SIZE, shuffle = True)\ntest_loader = torch.utils.data.DataLoader(test, batch_size = BATCH_SIZE, shuffle = False)","32ccff1c":"class upchannel(nn.Module):\n    def __init__(self):\n        super(upchannel, self).__init__()\n\n        self._convblocks = nn.Sequential(\n            nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n\n            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n\n            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(256),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=4),\n\n            nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(512),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=4)\n        )\n        self._classifier = nn.Sequential(nn.Linear(in_features=512*5, out_features=1024),\n                                         nn.ReLU(),\n                                         nn.Dropout(),\n                                         nn.Linear(in_features=1024, out_features=256),\n                                         nn.ReLU(),\n                                         nn.Dropout(),\n                                         nn.Linear(in_features=256, out_features=10))\n        self.apply(self._init_weights)\n\n    def forward(self, x):\n        x = self._convblocks(x)\n        x = x.view(x.size(0), -1)\n        score = self._classifier(x)\n        return score\n\n    def _init_weights(self, layer) -> None:\n        if isinstance(layer, nn.Conv1d):\n            nn.init.kaiming_uniform_(layer.weight)\n        elif isinstance(layer, nn.Linear):\n            nn.init.xavier_uniform_(layer.weight)","9f3a2133":"model=upchannel()\nmodel.cuda()\nerror = nn.CrossEntropyLoss()\nlearning_rate=0.001\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)","8405bcc7":"EPOCHS = 60\nmodel.train()\nfor epoch in range(EPOCHS):\n    correct = 0\n    for batch_idx, (X_batch, y_batch) in enumerate(train_loader):\n        var_X_batch = Variable(X_batch).float()\n        var_y_batch = Variable(y_batch)\n        optimizer.zero_grad()\n        output = model(var_X_batch)\n        loss = error(output, var_y_batch)\n        loss.backward()\n        optimizer.step()\n\n                # Total correct predictions\n        predicted = torch.max(output.data, 1)[1] \n        correct += (predicted == var_y_batch).sum()\n                #print(correct)\n        if batch_idx % 50 == 0:\n            print('Epoch : {} [{}\/{} ({:.0f}%)]\\tLoss: {:.6f}\\t Accuracy:{:.3f}%'.format(epoch, batch_idx*len(X_batch), len(train_loader.dataset), 100.*batch_idx \/ len(train_loader), loss.data, float(correct*100) \/ float(BATCH_SIZE*(batch_idx+1))))","5af5d890":"torch.save(model.state_dict(),'.\/CNN60.pth')","f6586d89":"model.eval()","06c9489f":"correct = 0\ntotal = 0\nwith torch.no_grad():\n    for data in test_loader:\n        images, labels = data\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint('Accuracy of the network on the test images: %d %%' % (\n    100 * correct \/ total))","26e2cf3c":"BATCH_SIZE = 128\n\ntorch_X_train = torch.unsqueeze(torch.cuda.FloatTensor(X_train),1)\ntorch_y_train = torch.cuda.LongTensor(y_train)\n\n# create feature and targets tensor for test set.\ntorch_X_test = torch.unsqueeze(torch.cuda.FloatTensor(X_test),1)\ntorch_y_test = torch.cuda.LongTensor(y_test)\n\n# Pytorch train and test sets\ntrain = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\ntest = torch.utils.data.TensorDataset(torch_X_test,torch_y_test)\n\n# data loader\ntrain_loader = torch.utils.data.DataLoader(train, batch_size = BATCH_SIZE, shuffle = True)\ntest_loader = torch.utils.data.DataLoader(test, batch_size = BATCH_SIZE, shuffle = False)","1b6e078d":"import torch\ntorch.manual_seed(123)\nimport torch.nn as nn\n\nclass CRNN(nn.Module):\n    def __init__(self):\n        super(CRNN, self).__init__()\n        \n        self._extractor = nn.Sequential(\n             nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, stride=1, padding=1),\n             nn.BatchNorm2d(64),\n             nn.ReLU(),\n             nn.MaxPool2d(kernel_size=2),\n \n             nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1),\n             \n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n\n            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(256),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n            nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=1, padding=1),\n                         nn.BatchNorm2d(512),\n                         nn.ReLU(),\n                         nn.MaxPool2d(kernel_size=4)\n        )\n        self._rnnModule = nn.Sequential(\n            nn.GRU(512*3, 512, batch_first=False,bidirectional=True)\n            #nn.LSTM(512, 512, batch_first=False, bidirectional=True),\n        )\n        \n        self._classifier = nn.Sequential(nn.Linear(in_features=10*1024, out_features=512),\n                                         nn.ReLU(),\n                                         nn.Dropout(),\n                                         nn.Linear(in_features=512, out_features=256),\n                                         nn.ReLU(),\n                                         nn.Dropout(),\n                                         nn.Linear(in_features=256, out_features=10))\n        self.apply(self._init_weights)\n    def forward(self, x):\n        x = self._extractor(x)\n        x = x.permute(3,0,1,2)\n        x = x.view(x.size(0), x.size(1), -1)\n        x, hn = self._rnnModule(x)\n        x = x.permute(1, 2, 0)\n        #print(x.shape)\n        x = x.reshape(x.size(0), -1)\n        score = self._classifier(x)\n        return score\n    def _init_weights(self, layer) -> None:\n        if isinstance(layer, nn.Conv1d):\n            nn.init.kaiming_uniform_(layer.weight)\n        elif isinstance(layer, nn.Linear):\n            nn.init.xavier_uniform_(layer.weight)","a97febd6":"model=CRNN()\nmodel.cuda()\nerror = nn.CrossEntropyLoss()\nlearning_rate=0.0005\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)","14699cb1":"EPOCHS = 60\nmodel.train()\nfor epoch in range(EPOCHS):\n    correct = 0\n    for batch_idx, (X_batch, y_batch) in enumerate(train_loader):\n        var_X_batch = Variable(X_batch).float()\n        var_y_batch = Variable(y_batch)\n        optimizer.zero_grad()\n        output = model(var_X_batch)\n        loss = error(output, var_y_batch)\n        loss.backward()\n        optimizer.step()\n\n                # Total correct predictions\n        predicted = torch.max(output.data, 1)[1] \n        correct += (predicted == var_y_batch).sum()\n                #print(correct)\n        if batch_idx % 50 == 0:\n            print('Epoch : {} [{}\/{} ({:.0f}%)]\\tLoss: {:.6f}\\t Accuracy:{:.3f}%'.format(epoch, batch_idx*len(X_batch), len(train_loader.dataset), 100.*batch_idx \/ len(train_loader), loss.data, float(correct*100) \/ float(BATCH_SIZE*(batch_idx+1))))","1c2ca82b":"model.eval()","ea1f09c1":"correct = 0\ntotal = 0\nwith torch.no_grad():\n    for data in test_loader:\n        images, labels = data\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint('Accuracy of the network on the test images: %d %%' % (\n    100 * correct \/ total))","0cda8f54":"torch.save(model.state_dict(),'.\/CRNN60.pth')","ae6563a7":"test,sfr = librosa.load('\/kaggle\/input\/song-test\/Beyonc - Crazy In Love ft (mp3cut.net).wav')\ntestspec = librosa.feature.melspectrogram(y=chunck, sr=sfr, n_mels=N_MELS,hop_length=HOP_LEN, n_fft=N_FFT)\ntestspec = librosa.power_to_db(testspec, ref=np.max)","3bcb3e33":"Kaggle Notebook Runner: @las4aplicades"}}