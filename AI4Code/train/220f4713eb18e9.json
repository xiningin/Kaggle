{"cell_type":{"a14d686b":"code","13fb0da2":"code","d8043289":"code","a743e88f":"code","b42841fc":"code","5cc52ebc":"code","69204997":"code","2367f3bf":"code","01cb8af5":"code","472f167d":"code","f3d460b1":"code","593de160":"code","8319c96c":"code","125ebae6":"code","52e39da6":"code","7b8dc9a2":"markdown","c8d97386":"markdown","87d2d45e":"markdown","f3a5d1bc":"markdown","1cb5581d":"markdown","8e024d58":"markdown","44bc96f5":"markdown"},"source":{"a14d686b":"%load_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 160\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","13fb0da2":"import numpy as np\nfrom skimage.io import imread\nfrom skimage.util import montage as montage2d\nimport pandas as pd\nfrom pathlib import Path\ndata_dir = Path('..\/input\/drawings\/')","d8043289":"draw_df = pd.DataFrame({'path': list(data_dir.glob('*\/*\/*\/*.png'))})\ndraw_df['img_id'] = draw_df['path'].map(lambda x: x.stem)\ndraw_df['disease'] = draw_df['path'].map(lambda x: x.parent.stem)\ndraw_df['validation'] = draw_df['path'].map(lambda x: x.parent.parent.stem)\ndraw_df['activity'] = draw_df['path'].map(lambda x: x.parent.parent.parent.stem)\nprint(draw_df.shape, 'images loaded')\ndraw_df.sample(3)","a743e88f":"def fixed_imread(in_path, resize=True):\n    \"\"\"read images, invert and scale them\"\"\"\n    c_img = 1.0-imread(in_path, as_gray=True)\n    max_dim = np.max(c_img.shape)\n    if not resize:\n        return c_img\n    if c_img.shape==(256, 256):\n        return c_img\n    if max_dim>256:\n        big_dim = 512\n    else:\n        big_dim = 256\n        \n    out_img = np.zeros((big_dim, big_dim), dtype='float32')\n    c_offset = (big_dim-c_img.shape[0])\/\/2\n    d_offset = c_img.shape[0]+c_offset\n    \n    e_offset = (big_dim-c_img.shape[1])\/\/2\n    f_offset = c_img.shape[1]+e_offset\n    out_img[c_offset:d_offset, e_offset:f_offset] = c_img[:(d_offset-c_offset), :(f_offset-e_offset)]\n    return out_img","b42841fc":"fig, m_axs = plt.subplots(2, 2, figsize=(20, 20))\nfor c_ax, (c_lab, c_rows) in zip(m_axs.flatten(), draw_df.groupby(['activity', 'disease'])):\n    prev_img = montage2d(np.stack([fixed_imread(x) for x in c_rows['path'].iloc[0:9]], 0))\n    c_ax.imshow(prev_img, cmap='gray')\n    c_ax.set_title(' '.join(c_lab))\n    c_ax.axis('off')","5cc52ebc":"from skimage.filters import threshold_yen as thresh_func\nfrom skimage.filters import median\nfrom skimage.morphology import disk, opening, diamond\n\ndef read_and_thresh(in_path, resize=True):\n    c_img = fixed_imread(in_path, resize=resize)\n    c_img = (255*c_img).clip(0, 255).astype('uint8')\n    c_img = median(c_img, disk(2))\n    c_thresh = thresh_func(c_img)\n    return c_img>c_thresh\nfig, m_axs = plt.subplots(2, 2, figsize=(10, 10))\nfor c_ax, (c_lab, c_rows) in zip(m_axs.flatten(), draw_df.groupby(['activity', 'disease'])):\n    prev_img = montage2d(np.stack([read_and_thresh(x) for x in c_rows['path'].iloc[0:9]], 0))\n    c_ax.imshow(prev_img, cmap='gray')\n    c_ax.set_title(' '.join(c_lab))\n    c_ax.axis('off')","69204997":"%%time\n# run all images\ndraw_df['thresh_img'] = draw_df['path'].map(lambda x: read_and_thresh(x, resize=False))","2367f3bf":"fig, m_axs = plt.subplots(3, 3)\nfor c_ax, (c_lab, c_row) in zip(m_axs.flatten(), draw_df.sample(9).iterrows()):\n    c_ax.imshow(c_row['thresh_img'], cmap='gray')\n    c_ax.set_title('{activity} {disease}'.format(**c_row))\n    c_ax.axis('off')","01cb8af5":"from skimage.morphology import label\nfrom skimage.morphology import closing\ndef label_sort(in_img, cutoff=0.1):\n    total_cnt = np.sum(in_img>0)\n    lab_img = label(in_img)\n    new_image = np.zeros_like(lab_img)\n    remap_index = []\n    for k in np.unique(lab_img[lab_img>0]):\n        cnt = np.sum(lab_img==k)\n        if cnt>total_cnt*cutoff:\n            remap_index+=[(k, cnt)]\n    sorted_index = sorted(remap_index, key=lambda x: -x[1])\n    for new_idx, (old_idx, idx_count) in enumerate(sorted_index, 1):\n        new_image[lab_img==old_idx] = new_idx\n    return new_image","472f167d":"fig, m_axs = plt.subplots(3, 3)\nfor c_ax, (c_lab, c_row) in zip(m_axs.flatten(), draw_df.sample(9).iterrows()):\n    clean_img = closing(label_sort(c_row['thresh_img'])>0, disk(2))\n    c_ax.imshow(clean_img, cmap='gray')\n    c_ax.set_title('{activity} {disease}'.format(**c_row))\n    c_ax.axis('off')","f3d460b1":"%%time\ndraw_df['clean_img'] = draw_df['thresh_img'].map(lambda x: closing(label_sort(x)>0, disk(2)))","593de160":"from skimage.morphology import skeletonize\n\nfig, m_axs = plt.subplots(3, 3)\nfor c_ax, (c_lab, c_row) in zip(m_axs.flatten(), draw_df.sample(9).iterrows()):\n    skel_img = skeletonize(c_row['clean_img'])\n    skel_y, skel_x = np.where(skel_img)\n    skel_x = skel_x*1.0\/skel_img.shape[1]\n    skel_y = skel_y*1.0\/skel_img.shape[0]\n    \n    c_ax.plot(skel_x, skel_y, 'b.')\n    c_ax.set_title('{activity} {disease}'.format(**c_row))\n    c_ax.axis('off')","8319c96c":"all_row_list = []\nfor _, c_row in draw_df.iterrows():\n    skel_img = skeletonize(c_row['clean_img'])\n    skel_y, skel_x = np.where(skel_img)\n    skel_x = skel_x*1.0\/skel_img.shape[1]\n    skel_y = skel_y*1.0\/skel_img.shape[0]\n    for x, y in zip(skel_x, skel_y):\n        d_row = dict(**{k: v for k,v in c_row.items() if len(np.shape(v))<1})\n        d_row['x'] = x\n        d_row['y'] = y\n        all_row_list += [d_row]","125ebae6":"all_row_df = pd.DataFrame(all_row_list)\nall_row_df.sample(3)","52e39da6":"fig, m_axs = plt.subplots(2, 2, figsize=(30, 30), dpi=72)\nfor c_ax, (c_lab, c_rows) in zip(m_axs.flatten(), all_row_df.groupby(['activity', 'disease'])):\n    for c_id, d_rows in c_rows.groupby('img_id'):\n        mean_std = np.mean([d_rows['x'].std(), d_rows['y'].std()])\n        c_ax.plot((d_rows['x']-d_rows['x'].mean())\/mean_std, \n                  (d_rows['y']-d_rows['y'].mean())\/mean_std, '.', label=c_id, ms=0.75)\n    c_ax.legend()\n    c_ax.set_title(' '.join(c_lab))\n    c_ax.axis('off')","7b8dc9a2":"# Filter and Segment\nWe can filter and segment the images in order to extract the drawings more clearly as just drawing pixels and noise","c8d97386":"# Show Images","87d2d45e":"# Next Steps\n1. Try and order the curves and get realistic (if possibly inaccurate) trajectories for the pen movement\n2. Quantify the pressure by looking at the thickness of the skeleton at specific points.\n3. Start to quantify the 'jigglyness' of the motion (fourier analysis of the time series?, differential motion?)\n","f3a5d1bc":"## Organize Datasets\nHere we organize the datasets by directory so we can see the breakdown a bit better","1cb5581d":"### Convert to table\nWe convert all of the detected skeleton points into a table and combine all of the results together","8e024d58":"## Show all of the drawings on the same axis\nBy plotting the skeleton pixels as points and rescaling we can overlay all of the images on top of each other for better visualization. The healthy patients are significantly more consistent than the Parkinson's.","44bc96f5":"## Keep only large enough components\nOnly keep objects larger than 10% of the total activated pixels"}}