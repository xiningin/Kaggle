{"cell_type":{"460ccfb9":"code","70a1b78b":"code","9b83740d":"code","72865101":"code","989d29b1":"code","10264ffa":"code","217511b1":"code","8209463b":"code","d2472cfb":"code","5e8ac639":"code","fbbf97db":"code","8e7dd026":"code","4c58df7e":"code","e64bcd4c":"code","ed574af9":"code","2f6b393c":"code","f61e028a":"code","43cd4f8e":"code","4fa9d367":"code","15ca74a1":"code","83649422":"code","0ea81985":"code","82dea490":"code","96c0d6f8":"code","0ab8b1f5":"code","6280ad1c":"code","5547e6ff":"code","f0f98170":"code","0d76eddc":"code","ad4baa06":"code","f4d3b734":"code","69a1cac9":"markdown","22031613":"markdown","793d4049":"markdown","c249b0a7":"markdown","6acb8e6d":"markdown","80fb5d57":"markdown","399c42da":"markdown","20b17d10":"markdown","f768060e":"markdown","4eb03f2f":"markdown"},"source":{"460ccfb9":"#Installations\n!pip install calmap\n!pip install chart_studio\n!pip install plotly-geo\n","70a1b78b":"import chart_studio\n#API KEY \nusername = 'jatins' # your username\napi_key = 'ZeezwRMdl79LdkA45Tcy'\nchart_studio.tools.set_credentials_file(username=username, api_key=api_key)\n# W1Qor7JU3YzGZkHwqCvT","9b83740d":"#Import necessary packages\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport requests\nimport json\n\n#Visualization Libraries\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.io as pio\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nimport calmap\n\n\nfrom IPython.core.display import HTML\n\n%matplotlib inline\npio.templates.default = \"plotly_dark\"","72865101":"#New York Times GitHub Data\nnyturl = 'https:\/\/api.github.com\/repos\/nytimes\/covid-19-data\/contents'\nr = requests.get(nyturl)\nif(r.ok):\n    repo = json.loads(r.text or r.content)\n    \nrepo[2]\n\nd = {}\n\nfor i in range(len(repo)):\n    htmlurl = repo[i]['download_url']\n    name = repo[i]['name']\n    if name.find(\".csv\") != -1:\n        tempdf = pd.read_csv(htmlurl)\n        d[\"df_\" + name] = tempdf\n        \nd.keys()\n\n","989d29b1":"#Read data\ndf = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\nUS = pd.read_csv(\"..\/input\/corona-virus-report\/usa_county_wise.csv\")\nnyt_us_counties = d['df_us-counties.csv']\nnyt_us_states = d['df_us-states.csv']","10264ffa":"# #Weather history test code\n# !pip install wwo-hist\n# from wwo_hist import retrieve_hist_data\n\n# frequency=3\n# start_date = '11-DEC-2018'\n# end_date = '11-MAR-2019'\n# api_key = '5601834ed1f74cddb2402604201903'\n# location_list = ['singapore','california']\n\n# hist_weather_data = retrieve_hist_data(api_key,\n#                                 location_list,\n#                                 start_date,\n#                                 end_date,\n#                                 frequency,\n#                                 location_label = False,\n#                                 export_csv = False,\n#                                 store_df = True)\n\n\n# singaporetemp = hist_weather_data[0]\n# singaporetemp.head()\n# singaporetemp[['date_time', 'maxtempC']].groupby('date_time').sum()\n\n# import seaborn as sns\n# sns.scatterplot(x= 'date_time', y= 'maxtempC', data = singaporetemp)","217511b1":"# #Library - Pandas Profiling \n# import pandas_profiling as pp\n\n# profile = pp.ProfileReport(df,title='Pandas Profiling Report', html={'style':{'full_width':True}})\n# profile\n\n#Clean Data & Change data types \n\ndf['Date'] = pd.to_datetime(df['Date'])\nUS['Date'] = pd.to_datetime(US['Date'])\n\n#Create Variables\n\ndf['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']\nUS['Active'] = US['Confirmed'] - US['Deaths']\n\nUS.info()","8209463b":"#Number for Countries affected over time\n\ndfpivot = df.pivot_table(index = 'Country\/Region', columns = 'Date', values = ['Confirmed'])\n\ncountrycount =  dfpivot.groupby(\"Country\/Region\").sum().apply(lambda x: x[x > 0].count(), axis =0)\ncountrycount = pd.DataFrame(countrycount)\n\ncountrycount.reset_index(inplace = True)\ncountrycount.columns = [\"Metric\", \"Date\", \"Count\"]\n\n\n#Animated Line Chart\ntrace = go.Scatter(x=countrycount['Date'][0:2], y=countrycount['Count'][0:2],\n                         mode = 'markers', line = dict(width = 2))\n\nframes = [dict(data = [dict(type = 'scatter', x= countrycount['Date'][:k+1], y = countrycount['Count'][:k+1])],\n               traces = [0,1], \n               ) for k in range(1, len(countrycount) - 1)\n         ]\n    \nlayout = go.Layout(width = 600, \n                   height = 440, \n                   showlegend = False, hovermode = 'closest', \n                    updatemenus=[dict(type='buttons', showactive=False,\n                                y=1.05,\n                                x=1.15,\n                                xanchor='right',\n                                yanchor='top',\n                                pad=dict(t=0, r=10),\n                                buttons=[dict(label='Play',\n                                              method='animate',\n                                              args=[None, \n                                                    dict(frame=dict(duration=30, \n                                                                    redraw=False),\n                                                         transition=dict(duration=0),\n                                                         fromcurrent=True,\n                                                         mode='immediate')])])])\n      \n\nlayout.update(xaxis =dict(range=[countrycount.Date[0], countrycount.Date[len(countrycount)-1]], \n                          autorange=False, showgrid = True, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)', \n                          linewidth = 2\n                         ),\n              yaxis =dict(range=[min(countrycount.Count)-10, max(countrycount.Count)+20], \n                          autorange=False, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)', \n                          linewidth = 2\n                         ), \n              title = \"Number Of Countries Affected Over Time\"\n             );\nfig = go.Figure(data=[trace], frames=frames, layout=layout)\n\nfig.show()\n\n\nimport chart_studio.plotly as py\npy.plot(fig, filename = 'countries-affected-over-time', auto_open=True)","d2472cfb":"#Race Chart\n# HTML('''ources\/embed.js\"><\/script><\/div>''')<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1873703\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1873703\/embed\"><script src=\"https:\/\/public.flourish.studio\/res","5e8ac639":"#Visualize Count Data\n\n#Get latest data\ndflatest = df[df['Date'] == max(df['Date'])]\n\n#Aggregate Values\ngrouped = dflatest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()\nsummary = grouped.sort_values(by = 'Confirmed', ascending = False).reset_index()\n\n#Custom formatting\nsummary.style.background_gradient(cmap= 'Blues', subset = ['Confirmed'])\\\n             .background_gradient(cmap= 'Reds', subset = ['Deaths'])\\\n             .background_gradient(cmap= 'Greens', subset = ['Recovered'])\\\n             .background_gradient(cmap = 'Oranges', subset = ['Active'])","fbbf97db":"#Function for trend plot\ndef trendplot(data, xaxis, lables, title, line_size, mode_size, colors):\n    fig = go.Figure()\n\n    for i in range(len(labels)):\n        fig.add_trace(go.Scatter(x=data[xaxis], y=data[labels[i]], mode='lines+markers',\n            name=labels[i],\n            line=dict(color=colors[i], width=line_size[i]),\n            connectgaps=True\n        ))\n\n    fig.update_layout(\n        xaxis = dict(\n                showline = True, \n                showgrid = True, \n                showticklabels = True,\n                linecolor = 'rgb(204, 204, 204)', \n                linewidth = 2, \n        ticks = 'inside'), \n\n        yaxis=dict(\n            showgrid=True,\n            zeroline=False,\n            showline=False,\n            showticklabels=True,\n            linecolor = 'rgb(204, 204, 204)', \n            linewidth = 2\n        ),\n\n        autosize = True, \n        title = title, \n        hovermode = 'x'\n\n    )\n    fig.show()\n    return fig\n","8e7dd026":"\n#World Trend Plot\nworldsummary = df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index() \n\nxaxis = 'Date'\ntitle = 'World Trend'\nlabels = ['Confirmed', 'Deaths', 'Recovered', 'Active']\ncolors = ['#51C1F9', '#FF4B4B', '#2ECC71', '#ECF0F1']\nmode_size = [1,1,1,1]\nline_size = [3,3,3,3]  \n\nfigtrend = trendplot(data = worldsummary, xaxis = xaxis, \n          lables = labels, title = title, \n          line_size = line_size, mode_size = mode_size, \n          colors = colors)\n\nimport plotly.io as pio\npio.write_html(figtrend, file=\"worldtrend.html\", auto_open=True)","4c58df7e":"# World Folium Map\n\nworld_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(dflatest)):\n    folium.Circle(\n        location=[dflatest.iloc[i]['Lat'], dflatest.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+dflatest.iloc[i]['Country\/Region']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(dflatest.iloc[i]['Province\/State']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(dflatest.iloc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(dflatest.iloc[i]['Deaths'])+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius= np.log(dflatest.iloc[i]['Confirmed']+1.001)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill_opacity = 0.1,\n        fill=True).add_to(world_map)\n\nworld_map\n\n","e64bcd4c":"np.log(dflatest['Confirmed']+1.001)*60000","ed574af9":"#Choropleth Map for Confirmed\npio.templates.default = \"ggplot2\"\nfig = px.choropleth(dflatest, locations=\"Country\/Region\",\n                    color=np.log10(dflatest[\"Confirmed\"]), \n                    hover_name=\"Country\/Region\", \n                    hover_data=[\"Confirmed\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\n                   \nfig.update_layout(\n#                     title=dict(text = \"Interactive Confirmed Cases Heat Map (Log Scale)\", \n#                             xref = 'paper'), \n#                   font = dict(size = 15, \n#                   ),\n                  plot_bgcolor = '#fff', \n                  paper_bgcolor = '#fff')\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"tealrose\")\nfig.update_geos(fitbounds=\"locations\", visible=False, projection_type=\"orthographic\", oceancolor = '#afd4db',  showocean = True, bgcolor = '#fff')\n# fig.to_image(\"Global Heat Map confirmed.png\")\nfig.show()\n\n\nimport plotly.io as pio\npio.write_html(fig, file=\"confirmedcasesworldmap.html\", auto_open=True)","2f6b393c":"#Choropleth Map for Deaths\n\nfig = px.choropleth(dflatest, locations=\"Country\/Region\",\n                    color=np.log10(dflatest[\"Deaths\"]), \n                    hover_name=\"Country\/Region\", # column to add to hover information\n                    hover_data=[\"Deaths\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\n                   \nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title =\"Death Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Death Cases(Log Scale)\",colorscale=\"Reds\")\n# fig.to_image(\"Global Heat Map confirmed.png\")\nfig.show()\n\n","f61e028a":"#Choropleth Map for Recovered\n\nfig = px.choropleth(dflatest, locations = 'Country\/Region',\n                    color = np.log10(dflatest['Recovered']), \n                   hover_name = \"Country\/Region\", \n                   hover_data = [\"Recovered\"], \n                   color_continuous_scale = px.colors.sequential.Plasma, locationmode = \"country names\")\n\nfig.update_layout(title =\"Recovered Cases Heat Map (Log Scale)\" )\nfig.update_geos(fitbounds = \"locations\", visible = False)\nfig.update_coloraxes(colorbar_title=\"Recovered Cases(Log Scale)\", colorscale = \"Greens\")\nfig.show()","43cd4f8e":"#Scatter Geo for Confirmed\npio.templates.default = \"plotly_white\"\ndata = df.groupby(['Date','Country\/Region'])['Confirmed', 'Deaths'].sum().reset_index()\ndata[\"Date\"] = pd.to_datetime( data[\"Date\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(data, locations = \"Country\/Region\", locationmode = \"country names\", \n                     color= np.power(data[\"Confirmed\"],0.2)- 0.5 , size= np.power(data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country\/Region\",\n                     hover_data=[\"Confirmed\"],\n                     range_color= [0, max(np.power(data[\"Confirmed\"],0.25))], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n#                      title = \"Time Lapse of Confirmed Cases\"\n                    )\n\nfig.update_coloraxes(colorscale = 'hot')\nfig.update(layout_coloraxis_showscale = False)\nfig.update_layout(plot_bgcolor = '#fff', paper_bgcolor = '#fff')\nfig.update_geos(oceancolor = '#afd4db',  showocean = True, bgcolor = '#fff')\nfig.show()\n\n\nimport plotly.io as pio\npio.write_html(fig, file=\"worldconfirmedtimelapse.html\", auto_open=True)","4fa9d367":"#Scatter Geo for Deaths\npio.templates.default = \"plotly_white\"\ndata = df.groupby(['Date','Country\/Region'])['Confirmed', 'Deaths'].sum().reset_index()\ndata[\"Date\"] = pd.to_datetime( data[\"Date\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(data, locations = \"Country\/Region\", locationmode = \"country names\", \n                     color= 8.8 - np.power(data[\"Deaths\"],0.2) , size= np.power(data[\"Deaths\"]+1,0.3)-1, hover_name=\"Country\/Region\",\n                     hover_data=[\"Deaths\"],\n                     range_color= [0, max(np.power(data[\"Deaths\"],0.2))], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     title = \"Time Lapse of Death Numbers\"\n                    )\n\nfig.update_coloraxes(colorscale = 'hot')\nfig.update(layout_coloraxis_showscale = False)\nfig.show()\n\n\n","15ca74a1":"#Cal Map\n\n\n# f = plt.figure(figsize=(20,10))\n# f.add_subplot(2,1,1)\n# calmap.yearplot(df.groupby('Date')['Confirmed'].sum().diff(), fillcolor='White', cmap='GnBu', linewidth=1,linecolor=\"#fafafa\",year=2020,)\n# plt.title(\"Daily Confirmed Cases\",fontsize=20)\n# plt.tick_params(labelsize=15)\n\nf = plt.figure(figsize=(20,10))\nf.add_subplot(2,1,1)\ncalmap.yearplot(df.groupby('Date')['Deaths'].sum().diff(), fillcolor='White', cmap='Reds', linewidth=1,linecolor=\"#fafafa\",year=2020,)\nplt.title(\"Daily Deaths\",fontsize=20)\nplt.tick_params(labelsize=15)\n\nplt.savefig(\"calmap_deaths.png\")","83649422":"#Exloring US Data \nUS.info()\nUS.head()\n","0ea81985":"#Top 20 States\n\n#Get latest data\nUSlatest = US[US['Date'] == max(US['Date'])]\n\n#Aggregate Values\ngrouped = USlatest.groupby('Province_State')['Confirmed', 'Deaths', 'Active'].sum()\nsummary = grouped.sort_values(by = 'Active', ascending = False)[:20].reset_index()\n\n#Custom formatting\nsummary.style.background_gradient(cmap= 'Blues', subset = ['Confirmed'])\\\n             .background_gradient(cmap= 'Reds', subset = ['Deaths'])\\\n             .background_gradient(cmap = 'Oranges', subset = ['Active'])","82dea490":"#Get location data for ease of respresentation\n","96c0d6f8":"#Clean US Latest\nUSlatest = US[US['Date'] == max(US['Date'])]\nUSlatest = USlatest.dropna(subset=['FIPS'])\nUSlatest['FIPS'] = USlatest['FIPS'].astype(int)\nUSlatest['FIPS']=USlatest['FIPS'].apply(lambda x: '{0:0>5}'.format(x))\n\npio.templates.default = \"seaborn\"\n\nimport plotly.figure_factory as ff\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\n# fig = px.choropleth(USlatest, geojson=counties, locations=\"FIPS\",\n#                     color='Confirmed', \n#                     color_continuous_scale=\"RdBu\",\n#                     range_color=(0, 30),\n#                     hover_name=\"Province_State\", # column to add to hover information\n#                     hover_data=[\"Confirmed\"],\n#                     scope=\"usa\")\n                   \n# fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.show()\n\n\ncolorscale = [\"#deecfa\", \"#B2C5D9\", \"#9EB0C4\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#FFBBB5\", \"#FF5E4F\"\n]\nendpts = list(np.linspace(0, 500, len(colorscale) - 1))\nfips = USlatest['FIPS'].tolist()\nvalues = USlatest['Confirmed'].tolist()\n\nfig = ff.create_choropleth(\n    fips=fips, values=values, scope=['usa'],\n    binning_endpoints=endpts, colorscale=colorscale,\n    show_state_data=True,\n    show_hover=True,\n    asp = 2.9,\n#     title_text = 'USA by Confirmed Count',\n    legend_title = 'Confirmed Count'\n)\nfig.layout.template = \"plotly_white\"\nfig.update_layout(plot_bgcolor = '#fff', \n                  paper_bgcolor = '#fff', \n#                  title={\n#                         'text': \"USA by Confirmed Count\",\n#                         'xref': 'paper',\n#                         'yref': 'paper',\n                \n                    \n#                         }\n                 )\nfig.show()\n\nimport plotly.io as pio\npio.write_html(fig, file=\"usheatmap.html\", auto_open=True)\n","0ab8b1f5":"#Growth for the top 10 States\npio.templates.default = \"plotly_dark\"\n\ntop5states = summary['Province_State'][:10].to_list()\ntop5states\n\n#Plot Trend Graph for the top 5 states\nustrend =  US[US['Province_State'].isin(top5states)].groupby(['Date','Province_State'])['Confirmed', 'Deaths', 'Active'].sum().reset_index() \n#Params\n\nfig = px.line(ustrend, x=\"Date\", y=\"Active\", color=\"Province_State\",\n              line_group=\"Province_State\", hover_name=\"Province_State\")\nfig.update_layout(\n        xaxis = dict(\n                showline = True, \n                showgrid = True, \n                showticklabels = True,\n                linecolor = 'rgb(204, 204, 204)', \n                linewidth = 2, \n        ticks = 'outside'), \n\n        yaxis=dict(\n            showgrid=True,\n            zeroline=False,\n            showline=True,\n            showticklabels=True,\n            linecolor = 'rgb(204, 204, 204)', \n            linewidth = 2\n            \n        ), \n    title = \"Active Cases - Top 10 US States\", \n    hovermode=\"x\"\n)\nfig.show()\n\nimport plotly.io as pio\npio.write_html(fig, file=\"top10states_darkmode.html\", auto_open=True)","6280ad1c":"nyt_us_counties.info()\n\n#Change \"date\" field to datetime\n   \nnyt_us_counties['date'] = pd.to_datetime(nyt_us_counties['date'])","5547e6ff":"nyt_us_counties_recent = nyt_us_counties[nyt_us_counties.date == max(nyt_us_counties.date)]\n\n#Top 20 Counties\ntop20counties = nyt_us_counties_recent.groupby(['county', 'state'])['cases', 'deaths'].sum().sort_values('cases', ascending = False)[:20].reset_index()\ntop20counties.style.background_gradient(cmap = 'RdGy')\n\n","f0f98170":"pio.templates.default = \"plotly_white\"\ntemp = df\ndailycases = temp[['Date', 'Country\/Region', 'Confirmed']].groupby('Date')['Confirmed'].sum().diff().reset_index()\n\nfig = px.bar(dailycases, x=\"Date\", y=\"Confirmed\", color_discrete_sequence=['#0f98fa'])\n\n\nfig.update_layout(xaxis = dict(\n                          autorange=True, showgrid = True, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)', \n                          linewidth = 2\n                         ),\n              yaxis =dict(\n                          autorange=True, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)',\n                          linewidth = 2\n                         ),\n              paper_bgcolor = '#fff', \n              plot_bgcolor = '#fff',\n            \n             );\nfig.show()\n\nimport plotly.io as pio\npio.write_html(fig, file=\"dailycases_world.html\", auto_open=True)","0d76eddc":"#Italy - Daily Cases\ntemp = df[df['Country\/Region']=='Italy' ]\ndailycases = temp.groupby('Date')['Confirmed'].sum().diff().reset_index()\n\nfig = px.bar(dailycases, x=\"Date\", y=\"Confirmed\", color_discrete_sequence=['#24bfa0'])\n\n\nfig.update_layout(xaxis = dict(\n                          autorange=True, showgrid = True, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)', \n                          linewidth = 2\n                         ),\n              yaxis =dict(\n                          autorange=True, showline = True,\n                          showticklabels=True,\n                          linecolor = 'rgb(204, 204, 204)',\n                          linewidth = 2\n                         ),\n              paper_bgcolor = '#fff', \n              plot_bgcolor = '#fff',\n            \n             );\nfig.show()\n\n# import plotly.io as pio\n# pio.write_html(fig, file=\"dailycases_world.html\", auto_open=True)","ad4baa06":"def plotsubplot(data, countries, colors, ncols = 1):\n    fig = make_subplots(rows = len(countries), cols = ncols, subplot_titles = countries)\n    for i in range(0, len(countries)):\n        temp = data[data['Country\/Region']==countries[i]]\n        dailycases = temp.groupby('Date')['Confirmed'].sum().diff().reset_index()\n        temp_fig = px.bar(dailycases, x=\"Date\", y=\"Confirmed\", color_discrete_sequence=[colors[i]])\n        fig.add_trace(temp_fig['data'][0], row=i+1, col=1)\n    \n    fig.update_layout(height=len(countries)*300,\n                  title_text=\"Cases Per Day By Country\")\n    fig.show()","f4d3b734":"countries = ['India', 'US', 'Italy']\n\ncolors = ['#2a7886', '#fac248', '#4892fa']\n        \nplotsubplot(data = df,  countries = countries, colors = colors)","69a1cac9":"# **COVID-19 Exploratory Data Analysis**\n![COVID](https:\/\/www.usnews.com\/dims4\/USNEWS\/6b8fce5\/2147483647\/crop\/2000x1333%2B0%2B0\/resize\/1200x1200%3E\/quality\/85\/?url=https%3A%2F%2Fmedia.beam.usnews.com%2Fd4%2F30%2Fc480b10543ce8443f14e21287493%2F200313-pandemic-stock.jpg)\n[Image Credits](https:\/\/health.usnews.com\/conditions\/articles\/whats-the-difference-between-an-epidemic-and-pandemic)\n\nCOVID-19 (SARS-CoV-2), popularly known as the Coronavirus, was first identified in Wuhan, China in December 2019. Since inception, the infamous virus has caused major disruptions in almost every aspect of life and continues to affect millions all around the globe. \n\n\n## Resources on COVID-19\n* [World Health Organization (WHO)](https:\/\/www.who.int\/health-topics\/coronavirus#tab=tab_1)\n* [US Centers for Disease Control and Prevention (CDC)](https:\/\/www.cdc.gov\/coronavirus\/2019-nCoV\/index.html)\n* [John Hopkins University](https:\/\/coronavirus.jhu.edu\/)\n* [COVID-19 Tracker for India](https:\/\/www.covid19india.org\/)\n\n## Acknowledgments\nA big shout-out to the amazing community out there for sharing their work. It was truly an invaluable learning experience.\n* https:\/\/www.kaggle.com\/imdevskp\/covid-19-analysis-visualization-comparisons\n* https:\/\/www.kaggle.com\/tarunkr\/covid-19-case-study-analysis-viz-comparisons\n* https:\/\/www.kaggle.com\/abhinand05\/covid-19-digging-a-bit-deeper\n\n\n## <font style=\"color:#D99B0B \"> *Please feel free to comment any feedback you may have on how the notebook can be improved. <font style=\"color:#DC1818\"><b>Stay Home! Stay Safe!<\/b>*\n\n\n","22031613":"### Number of Countries Affected Over Time (Animated Line Plot)\n<hr>","793d4049":"### Exploring US Counties\n<hr>","c249b0a7":"### Summary For Countries (sorted on confirmed count)\n<hr>","6acb8e6d":"### Confirmed Cases - Race Chart\n*Created using Flourish Studio. Data as of 04\/07 *\n\nURL - https:\/\/public.flourish.studio\/visualisation\/1873703\/\n\n<hr>","80fb5d57":"### US County Data from New York Times GitHub URL\n<hr>","399c42da":"### Top US Counties\n<hr>","20b17d10":"### World Trend Plot","f768060e":"### Read Data\n<hr>","4eb03f2f":"### Clean & Format Variables\n<hr>"}}