{"cell_type":{"45e93277":"code","e03c106c":"code","d1d1434c":"code","981962d0":"code","cee87638":"code","4fc2c0f4":"code","f360ad9a":"code","8a5d71b1":"code","fba73832":"code","c1b52a99":"code","b22081d6":"code","1529ca6f":"code","81025d99":"code","b2c89e87":"code","caae6868":"code","06b500e4":"code","7523c4d2":"code","d5143f93":"markdown","cc99a14b":"markdown","d650318a":"markdown","b3fe3c75":"markdown","abff53f0":"markdown","3c273641":"markdown","879969ec":"markdown","014725b8":"markdown","6be399c6":"markdown","5a536a21":"markdown","8230edc3":"markdown","12d6184c":"markdown","1714133f":"markdown","e82bdcc9":"markdown","aaa4aa85":"markdown","f36f99cc":"markdown","6d6be160":"markdown","b2bdbcbc":"markdown"},"source":{"45e93277":"!pip install fbprophet","e03c106c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nimport holidays\nimport warnings\nimport os\nimport sys\n\nfrom fbprophet import Prophet\nfrom collections import defaultdict\n\nwarnings.filterwarnings('ignore')\npyo.init_notebook_mode()","d1d1434c":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='date', parse_dates=True, infer_datetime_format=True)\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv', index_col='date', parse_dates=True, infer_datetime_format=True)\n\nprint(f'Shape of the train dataset : {df_train.shape}')\nprint(f'Shape of the test dataset : {df_test.shape}')","981962d0":"# Training Data Feature engineering\ndf_train['weekday'] = df_train.index.weekday\ndf_train['days'] = df_train.index.day\ndf_train['months'] = df_train.index.month\n\n\n# Test Data Feature engineering\ndf_test['weekday'] = df_test.index.weekday\ndf_test['days'] = df_test.index.day\ndf_test['months'] = df_test.index.month","cee87638":"def get_holidays(obj, yrs, **kwargs):\n    \"\"\"\n    Function to get the holidays of a specific country\/region.\n    \n    Parameters:\n    -----------\n    obj : holidays.object\n        Represents a holidays object of a specific country\n        \n        \n    yrs : array-like\n        Represents the years.\n        \n    Returns:\n    -------\n    df_holidays : pandas.DataFrame\n        Represents the holiday list of the country\/region.\n        \n        \n    Usage:\n    -----\n    >>> import holidays\n    >>> finland_holidays = get_holidays(holidays.Finland, range(2015, 2020))\n    >>> \n    \"\"\"\n    \n    temp_data = defaultdict(lambda : list())\n    for yr in yrs:\n        for data in obj(years=yr).items():\n            temp_data[data[1]].append(data[0].strftime('%d-%m-%Y'))\n            \n            \n    df_holidays = pd.DataFrame()\n    for days, dts in temp_data.items():\n        _df = pd.DataFrame({\n            'holiday' : days,\n            'ds' : pd.to_datetime(dts),\n            'lower_window' : kwargs.get('lower_window', 0),\n            'upper_window' : kwargs.get('upper_window', 1)\n        })\n        \n        df_holidays = df_holidays.append(_df)\n        del _df\n        \n    del temp_data\n        \n    return df_holidays","4fc2c0f4":"finland_holidays = get_holidays(holidays.Finland, range(2015, 2019))","f360ad9a":"norway_holidays = get_holidays(holidays.Norway, range(2015, 2019))","8a5d71b1":"sweden_holidays = get_holidays(holidays.Sweden, range(2015, 2019))","fba73832":"def create_models(data, holidays):\n    \n    \"\"\"\n    Function to create Prophet models \n    \n    Parameters:\n    -----------\n    data : pandas.DataFrame\n        Represents the dataframe with which we are working.\n    \n    holidays : dict\n        Represents a dictionary of dataframes containing specific holidays (if required)\n        \n    Returns:\n    --------\n    models : array-like\n        Contains a list of Prophet Models.\n        \n    combinations : array-like\n        Contains a specific list of combinations of (country, store, product)\n        \n        \n    Usage:\n    ------\n    >>> from prophet import Prophet\n    >>> models, combinations = create_models(data, {}) # in case of no specific holidays\n    >>> ...\n    >>> models, combinations = create_models(data, {'USA':holidays_USA}) # in case of specific holidays\n    >>> ...\n    \"\"\"\n    combinations = list()\n    \n    for country in data['country'].unique():\n        for store in data['store'].unique():\n            for prod in data['product'].unique():\n                combinations.append((country, store, prod, holidays.get(country, None)))\n                \n    \n    total = data['country'].nunique() * data['store'].nunique() * data['product'].nunique()\n    \n    models = [Prophet(holidays=combinations[i][-1]) for i in range(total)]\n    \n    return models, combinations","c1b52a99":"def model_fitting_and_forecasting(data, combinations, models, regressors, **kwargs):\n    \n    \"\"\"\n    Function to fit models and then forecast on the data\n    \n    Parameters:\n    -----------\n    data : pandas.DataFrame\n        Represents the training data or a specific dataset.\n        \n    combinations : array-like\n        Reperesents the specific combinations for our model\n        \n    models : array-like\n        Represents a list of Prophet model (for our use case)\n        \n    regressors : array-like \n        Represents the extra variables that the model will take into consideration while training\/forecasting\n        \n    Returns:\n    -------\n    preds : array-like\n        Represents the forecast values of the data\n        \n    Usage:\n    -----\n    >>> \n    >>> preds = model_fitting_and_forecasting(df_train, combinationsm models, regressors)\n    >>> .....\n    \n    \"\"\"\n    \n    \n    # add the regressors to the model\n    for m in models:\n        for reg in regressors:\n            m.add_regressor(reg)\n            \n    # Train and forecast the model\n    preds = list()\n    \n    for i, com in enumerate(combinations):\n        _df = data.loc[(data['country'] == com[0]) & (data['store'] == com[1]) & (data['product'] == com[2])][['num_sold', *regressors]].reset_index()\n        _df = _df.rename(columns={'date':'ds', 'num_sold':'y'})\n        models[i].fit(_df)\n        \n        future = models[i].make_future_dataframe(periods=kwargs.get('periods', 365), freq=kwargs.get('freq', 'D'))\n        future['weekday'] = future['ds'].dt.weekday\n        future['days'] = future['ds'].dt.day\n        future['months'] = future['ds'].dt.month\n        \n        \n        forecast = models[i].predict(future)[['ds', 'yhat']].tail(kwargs.get('periods', 365))\n        preds.append(forecast)\n        del forecast\n        del future\n        del _df\n        \n    return preds\n        \n        \n    ","b22081d6":"def create_submission_file(test, preds, combinations, filename):\n    \"\"\"\n    Function to create the submission files for the competetion\n    \n    Parameters:\n    -----------        \n    test : panadas.DataFrame\n        Represents the test data.\n        \n    preds : array-like\n        Represents the forecast made for the test data.\n        \n    combinations : array-like\n        Represents the combination data.\n        \n    filename : str\n        Represents the submission file name.\n        \n        \n    Returns:\n    -------\n    None\n    \n    Usage:\n    -----\n    >>> ....\n    >>> create_submission_file(df_test, preds, combinations, 'sample_submission.csv')\n    >>> ....\n    \"\"\"\n    \n    for i in range(len(combinations)):\n        preds[i]['country'] = combinations[i][0]\n        preds[i]['store'] = combinations[i][1]\n        preds[i]['product'] = combinations[i][2]\n        \n        \n    submission = test.copy().reset_index()\n    for i, com in enumerate(combinations):\n        submission.loc[(submission['country'] == com[0]) & (submission['store'] == com[1]) & (submission['product'] == com[2]), 'num_sold'] = preds[i]['yhat'].values\n        \n    submission = submission[['row_id', 'num_sold']]\n    submission.to_csv(filename, index=False)\n    ","1529ca6f":"models1, combinations1 = create_models(df_train, {})","81025d99":"preds = model_fitting_and_forecasting(df_train, combinations1, models1, ['weekday', 'days', 'months'])","b2c89e87":"create_submission_file(df_test, preds, combinations1, 'submission_without_holidays.csv')","caae6868":"models2, combinations2 = create_models(df_train, {'Finland':finland_holidays, \n                                                 'Norway' : norway_holidays,\n                                                 'Sweden' : sweden_holidays})","06b500e4":"preds = model_fitting_and_forecasting(df_train, combinations2, models2, ['weekday', 'days', 'months'])","7523c4d2":"create_submission_file(df_test, preds, combinations2, 'submission_with_holidays.csv')","d5143f93":"<a id=\"ref\"\/><br\/>\n## References\n\n1. https:\/\/www.kaggle.com\/dextermojo\/eda-of-tps-2022-fbprophet-baseline\n2. https:\/\/www.youtube.com\/watch?v=XZhPO043lqU&list=PL3N9eeOlCrP5cK0QRQxeJd6GrQvhAtpBK&index=11\n3. https:\/\/facebook.github.io\/prophet\/docs\/seasonality,_holiday_effects,_and_regressors.html\n4. https:\/\/www.geeksforgeeks.org\/python-holidays-library\/","cc99a14b":"<a id='bs'\/><br\/>\n## Basic Setup","d650318a":"<a id=\"prophet2\"\/><br\/>\n## Application of Prophet (with Holidays) on the data","b3fe3c75":"### Model Fitting and Forecasting","abff53f0":"### Model Fitting and Forecasting","3c273641":"<a id='nor-holiday'\/><br\/>\n### Recording Norway Holidays","879969ec":"<a id=\"swe-holiday\"\/><br\/>\n### Recording Sweden Holidays","014725b8":"### Model Creation","6be399c6":"# Application of fbProphet for estimation of Sales of the TPS Jan 2022 Data \ud83d\udcc8\n\n![](https:\/\/miro.medium.com\/max\/1400\/1*BVIwEoE5oEmHJU8XbV_mKA.png)\n\nThis notebook is in continuation of my [EDA of TPS 2022 + fbProphet Baseline](https:\/\/www.kaggle.com\/dextermojo\/eda-of-tps-2022-fbprophet-baseline) notebook. \n\nIn this notebook I'll be showcasing the application of Facebook Prophet for Multi-variate Time Series Modelling.\n\n","5a536a21":"### Create the Submission File","8230edc3":"### Create the Submission File","12d6184c":"<a id=\"holidays\"\/><br\/>\n## Recording Specific holidays","1714133f":"<a id='basic-feature'\/><br\/>\n## Basic Feature Engineering","e82bdcc9":"<a id='fin-holiday'\/><br\/>\n### Recording Finland Holidays","aaa4aa85":"<a id='toc'\/><br\/>\n# Table of Contents\n\n1. [Installation of Prophet](#install)\n2. [Basic Setup](#bs)\n3. [Basic Feature Engineering](#basic-feature)\n4. [Recording Specific holidays](#holidays)\n5. [Application of Prophet (without Holidays) on the data](#prophet1)\n6. [Application of Prophet (with Holidays) on the data](#prophet2)\n7. [References](#ref)","f36f99cc":"### Model Creation","6d6be160":"<a id='install'\/><br\/>\n## Installation of Prophet","b2bdbcbc":"<a id=\"prophet1\"\/><br\/>\n## Application of Prophet (without Holidays) on the data"}}