{"cell_type":{"09b8d21b":"code","584997b1":"code","a7dec8ce":"code","f44da678":"code","a981509c":"code","b4396756":"code","66ac1d63":"code","ea0d2cf4":"code","c5766fcc":"code","f01d634a":"code","d81363da":"code","31583efb":"code","a20bbb6a":"code","1497000a":"code","d1401248":"code","5181dbd3":"code","579423df":"markdown","7b3aa3de":"markdown","a1eb05bb":"markdown","469e6344":"markdown","2a7ffa23":"markdown","dcd87fe1":"markdown","20566a14":"markdown","c1eb25e0":"markdown","cd6afc60":"markdown","2c012ea4":"markdown","77d30a66":"markdown","3efda96e":"markdown","42e1ffa0":"markdown","aa8346a1":"markdown"},"source":{"09b8d21b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nfrom datetime import date\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","584997b1":"data = pd.read_csv(\"..\/input\/nba2k20-player-dataset\/nba2k20-full.csv\",parse_dates=True)\ndata","a7dec8ce":"data = data.drop(['college', 'full_name', 'jersey', 'draft_peak'], axis=1)","f44da678":"data[data.isnull().any(axis=1)]","a981509c":"data['draft_round'] = data['draft_round'].apply(lambda x: 0 if x=='Undrafted' else int(x)) \ndata['team'] = data['team'].fillna('No team')\n\n","b4396756":"data['position'] = data['position'].apply(lambda x: 'F-C' if x=='C-F' else x)\ndata['position'] = data['position'].apply(lambda x: 'F-G' if x=='G-F' else x)","66ac1d63":"data['weight'] = [float(data['weight'][i].split()[3]) for i in range(len(data))]\ndata['height'] = [float(data['height'][i].split()[-1]) for i in range(len(data))]\ndata['salary'] = [int(data['salary'][i].split('$')[1]) for i in range(len(data))]","ea0d2cf4":"data.head()","c5766fcc":"data.dtypes","f01d634a":"data['b_day'] = data['b_day'].apply(lambda x: datetime.strptime(x, '%m\/%d\/%y').date())\ndata['age'] = (datetime.today().date() - data['b_day']).astype('<m8[Y]').astype('int64')","d81363da":"data = data.drop(['b_day'], axis=1)","31583efb":"data.head()","a20bbb6a":"fig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"box\"}, {\"type\": \"box\"}],\n           [{\"type\": \"box\"}, {\"type\": \"box\"}]],\n)\n\nfig.add_trace(go.Box(y=data['age'], boxpoints='all', name='age'),\n              row=1, col=1)\n\nfig.add_trace(go.Box(y=data['weight'], boxpoints='all', name='weight'),\n              row=1, col=2)\n\nfig.add_trace(go.Box(y=data['height'], boxpoints='all', name='height'),\n              row=2, col=1)\n\nfig.add_trace(go.Box(y=data['rating'], boxpoints='all', name='rating'),\n              row=2, col=2)\nfig.update_layout(height=1000)\nfig.show()\n","1497000a":"for column in ['weight', 'height']:\n    upper_lim = data[column].quantile(.95)\n    lower_lim = data[column].quantile(.05)\n    data.loc[(data[column] > upper_lim),column] = upper_lim\n    data.loc[(data[column] < lower_lim),column] = lower_lim\nfor column in ['age', 'rating']:\n    upper_lim = data[column].quantile(.95)\n    lower_lim = data[column].quantile(.05)\n    data.loc[(data[column] > upper_lim),column] = int(upper_lim)\n    data.loc[(data[column] < lower_lim),column] = int(lower_lim)","d1401248":"for column in ['team', 'country', 'position', 'draft_round']:\n    encoded_columns = pd.get_dummies(data[column])\n    data = data.join(encoded_columns).drop(column, axis=1)","5181dbd3":"data","579423df":"So, column \"team\" have NaN values and column 'draft_round' containes string values 'Undrafted'. To fix that let's fill NaNs and replace string values by int.","7b3aa3de":"<a id='part5'><h1>5. One-hot encoding<\/h1><\/a>","a1eb05bb":"<a id='part1'><h1>1. Imputation<\/h1><\/a>","469e6344":"<ul style='list-style-type: none'>\n    <li><a href='#part1' style='text-decoration: none; font-size: 24px'>1. Imputation<\/a><\/li>\n    <li><a href='#part2' style='text-decoration: none; font-size: 24px'>2. Feature Split<\/a><\/li>\n    <li><a href='#part3' style='text-decoration: none; font-size: 24px'>3. Extracting Date<\/a><\/li>\n    <li><a href='#part4' style='text-decoration: none; font-size: 24px'>4. Handling Outliers<\/a><\/li>\n    <li><a href='#part5' style='text-decoration: none; font-size: 24px'>5. One-hot encoding<\/a><\/li>\n<\/ul>\n","2a7ffa23":"This method spreads the values in a column to multiple flag columns and assigns 0 or 1 to them. ","dcd87fe1":"<a id='part3'><h1>3. Extracting date<\/h1><\/a>","20566a14":"<a id='part2'><h1>2. Feature split<\/h1><\/a>","c1eb25e0":"<a id='part4'><h1>4. Handling Outliers<\/h1><\/a>","cd6afc60":"To extract values from some columns like 'weight' we need to split data.","2c012ea4":"Seems like some of date can be assumed as an outlier. One of methods to detect outliers is to use percentiles.","77d30a66":"Union related positions","3efda96e":"Some columns contain not useful information for model and needed to be dropped","42e1ffa0":"Let's extract date from 'b_day' create 'age' column.","aa8346a1":"Let's check if there are missing values"}}