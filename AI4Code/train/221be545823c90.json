{"cell_type":{"cc470e56":"code","07898749":"code","283e3a2d":"code","156aed39":"code","b65a97dc":"code","32987c05":"code","45c2167b":"code","33e11ab8":"code","174371d6":"code","15be94ee":"code","d2352365":"code","fa0cfb2b":"code","3d71952b":"code","31a2d6be":"code","52fa5354":"markdown","7ad36a17":"markdown","f0c99dfb":"markdown","1f6a8262":"markdown","24a7bf04":"markdown","d4fd5e3c":"markdown","e3d2474b":"markdown","1ef26569":"markdown","6e7c0695":"markdown","ad87b9ec":"markdown","6691cc28":"markdown","29e8b372":"markdown"},"source":{"cc470e56":"import numpy as np\nimport pandas as pd\n\nimport os, gc, re\n\ndf = pd.read_csv('\/kaggle\/input\/enron-email-dataset\/emails.csv')\ndf.head(5)","07898749":"print(df.iloc[22,1])","283e3a2d":"def info_part(i):\n    \"\"\"split infomation part out\"\"\"\n    return i.split('\\n\\n', 1)[0]\ndef content_part(i):\n    \"\"\"split content part out\"\"\"\n    return i.split('\\n\\n', 1)[1]\ndf['pre_info'] = df.message.map(info_part)\ndf['content'] = df.message.map(content_part)\ndf['test_true'] = True\n\nwords2split = ['Message-ID: ', 'Date: ', 'From: ', 'To: ', 'Subject: ', 'Cc: ', 'Mime-Version: ', 'Content-Type: ',\n               'Content-Transfer-Encoding: ', 'Bcc: ', 'X-From: ', 'X-To: ', 'X-cc: ', 'X-bcc: ', 'X-Folder: ', 'X-Origin: ',\n               'X-FileName: ']\nfeatures_naming = [i[:-2] for i in words2split]\nsplit_condition = '|'.join(words2split)","156aed39":"# Some emails' subject confuse the string-spliting function, so I make a little change\ndef duplicated_info(i):\n    return i.replace(' Date: ', ' Date- ').replace(' Subject: ', ' Subject2: ').replace(' To: ',\n                    ' To- ').replace(' (Subject: ', ' (Subject- ')\ndf['pre_info'] = df['pre_info'].map(duplicated_info)\n\n# let's check how many categories are there in these emails\ndef num_part(i):\n    return len(re.split(split_condition, i))\ndf['num_info'] = df['pre_info'].map(num_part)\n\n# around 20k emails do not have the 'To: ' category, so I add one\ndef add_to(i):\n    return i.replace('\\nSubject: ', '\\nTo: \\nSubject: ')\ntemp_condition = (df['num_info'] == 17) | (df['num_info'] == 15)\ndf.loc[temp_condition, 'pre_info'] = df.loc[temp_condition, 'pre_info'].map(add_to)\n\n\n# similar way to deal with the \"Cc:\" and \"Bcc:\" categories\ntemp_condition = (df['num_info'] == 16) | (df['num_info'] == 15)\ndef add_bcc(i):\n    return i.replace('\\nX-From: ', '\\nBcc: \\nX-From: ')\ndf.loc[temp_condition, 'pre_info'] = df.loc[temp_condition, 'pre_info'].map(add_bcc)\ndef add_cc(i):\n    return i.replace('\\nMime-Version: ', '\\nCc: \\nMime-Version: ')\ndf.loc[temp_condition, 'pre_info'] = df.loc[temp_condition, 'pre_info'].map(add_cc)","b65a97dc":"df['num_info'] = df['pre_info'].map(num_part)\ndf['num_info'].value_counts()","32987c05":"df_remove = df.loc[df['num_info'] != 18].copy()\ndf = df.loc[df['num_info'] == 18].copy()","45c2167b":"global feature_idx\ndef info_split(i):\n    ## split the i th part out and remove \\n for the feature\n    return re.split(split_condition, i)[feature_idx+1][:-2]\ndef info_split_last(i):\n    ## no need to remove \\n for last category -- X-FileName\n    return re.split(split_condition, i)[feature_idx+1]\nfor feature_idx in range(len(words2split)):\n    if feature_idx != len(words2split) - 1:\n        df[features_naming[feature_idx]] = df['pre_info'].map(info_split)\n    else:\n        df[features_naming[feature_idx]] = df['pre_info'].map(info_split_last) ","33e11ab8":"df['Content-Transfer-Encoding'].value_counts()","174371d6":"df_remove2 = df.loc[df['Content-Transfer-Encoding'] == 'text\/plain; charset=us-asci']\ndf = df.loc[df['Content-Transfer-Encoding'] != 'text\/plain; charset=us-asci']","15be94ee":"# print(df_remove.iloc[0,1])\n# print(df_remove2.iloc[0,1])","d2352365":"df.loc[df[\"content\"].str.contains(\"-------------\"), \"content\"]","fa0cfb2b":"def split_other_content(i):\n    \"\"\"split other forms of contents out\"\"\"\n    return i.split('-------------', 1)[0]\ndf[\"has_other_content\"] = df[\"content\"].str.contains(\"-------------\")\ndf[\"if_forwarded\"] = df[\"content\"].str.contains(\"------------- Forwarded\")\ndf['content'] = df.content.map(split_other_content)","3d71952b":"df = df.drop(['pre_info','test_true', 'num_info'], axis = 1).set_index(\"file\")\ndf.to_csv(\"emails_cleaned.csv\")","31a2d6be":"df.head(5)","52fa5354":"Let's check one category if I did well:","7ad36a17":"Now let's see how many wrong-formatted email are left:","f0c99dfb":"## Import and have a Look","1f6a8262":"## Content part \n\nThere are a lot of emails contain non plain English info such as attach file and \"Forwarded\" message, I discovered that many of them were seperated by \"-------------\". Therefore I use this to discard these parts and add indicators.","24a7bf04":"### If this kernel helps you, please upvote!","d4fd5e3c":"## Information Part\n\nLet's seperate the \"info\" and \"content\" parts, and deal with the information part first.","e3d2474b":"There is still one not quite right, I would just take it away too...","1ef26569":"I know this is not a perfect way, but it is efficient enough.  \nFinally we drop the auxiliary columns and export it:","6e7c0695":"Note that the content part can be cleaned deeper, you will need extra effort to fight with it. Good Luck!","ad87b9ec":"Oh, there are 3 of them.\nI would simply choose to print them out to have a look, then remove from dataset.","6691cc28":"Have a read at these discarded emails...","29e8b372":"Wow, only two columns! What's inside the message? Let's look at an example:"}}