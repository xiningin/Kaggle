{"cell_type":{"ac3aa2ae":"code","895c666d":"code","602926ef":"code","4897e7a1":"code","6ba45c14":"code","39674a47":"code","89b294ce":"code","cec84c3b":"code","935088f2":"code","46c176f1":"code","8c671106":"code","a7f18655":"code","469f752a":"code","35466e5c":"code","62612733":"code","2bf66c44":"code","3e165d79":"code","b634d04b":"code","828665ac":"code","022e014f":"code","fe12e655":"code","0b649a0e":"code","a2b9e901":"code","f0415ce7":"code","3cba2dce":"code","474c52bf":"code","509cd258":"code","7d213b58":"code","20b00e2f":"code","25e30fe6":"code","9c217e85":"code","55113a2f":"code","68a2df4e":"code","8d33b6b2":"code","5a9eb824":"code","7be6400d":"code","79dd9e28":"code","050da471":"code","031c9509":"code","4da50e8e":"code","1a5fb14b":"code","f9781f7a":"markdown"},"source":{"ac3aa2ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","895c666d":"import numpy as np\nimport pandas as pd\n\ndata=pd.read_csv('\/kaggle\/input\/datasets_35901_52633_winequalityN.csv')","602926ef":"data.head()","4897e7a1":"data.shape","6ba45c14":"data.describe()","39674a47":"data.isnull().sum()","89b294ce":"x=data.iloc[:,:-1]\ny=data.iloc[:,-1]","cec84c3b":"x.shape","935088f2":"x['type'].value_counts()","46c176f1":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nx['type']=le.fit_transform(x['type'])","8c671106":"x['type'].value_counts()","a7f18655":"null_values=x.isnull().sum()\nnull_values","469f752a":"for z in x:\n if(null_values[z]>0) : \n     x.loc[(x[z].isnull()),z]=x[z].mean()","35466e5c":"x.isnull().sum()","62612733":"x.corr()","2bf66c44":"x.describe()","3e165d79":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\ni=1;\nfor z in x:\n    plt.subplot(4,4,i)\n    i=i+1\n    plt.scatter(x[z],y)","b634d04b":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\ni=1;\nfor z in x:\n    plt.subplot(4,4,i)\n    i=i+1\n    plt.boxplot(x[z])\n    plt.title(z)","828665ac":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler() \nx=sc.fit_transform(x)","022e014f":"type(y)","fe12e655":"y=pd.DataFrame(y,columns=['quality'])","0b649a0e":"y.head()","a2b9e901":"y.loc[(y['quality'] <= 5),'quality']=0\ny.loc[(y['quality'] <= 7) & (y['quality'] >5),'quality']=1\ny.loc[(y['quality'] >7 ) ,'quality']=2","f0415ce7":"y['quality'].value_counts()","3cba2dce":"import seaborn as sns\nplt.figure(figsize=(8,4))\nsns.countplot(y[\"quality\"],palette=\"muted\")","474c52bf":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)","509cd258":"x_train.shape","7d213b58":"y_train.shape\ny_train['quality'].value_counts()","20b00e2f":"x_test.shape","25e30fe6":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nnb=GaussianNB()\n\n#training the model\nnb.fit(x_train,y_train.values.ravel())\ny_pred=nb.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","9c217e85":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(max_depth=32,n_estimators=120,criterion='entropy')\nrf.fit(x_train,y_train.values.ravel())\ny_pred=rf.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","55113a2f":"rf.predict([[1,7.0,0.270,0.36,20.7,0.045,45.0,170.0,1.00100,3.00,0.450000,8.8]])","68a2df4e":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier(criterion='entropy')\ndt.fit(x_train,y_train)\ny_pred=dt.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","8d33b6b2":"from sklearn.neighbors import KNeighborsClassifier  \nclassifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  \nclassifier.fit(x_train, y_train.values.ravel()) \ny_pred= classifier.predict(x_test) \nmetrics.accuracy_score(y_test,y_pred)","5a9eb824":"from imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler(random_state=0)\nx_r, y_r = ros.fit_resample(x, y)","7be6400d":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x_r,y_r,test_size=0.2,random_state=1)","79dd9e28":"y_train['quality'].value_counts()","050da471":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn import metrics\nnb=GaussianNB()\n\n#training the model\nnb.fit(x_train,y_train.values.ravel())\ny_pred=nb.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","031c9509":"rf=RandomForestClassifier(max_depth=32,n_estimators=120,criterion='entropy')\nrf.fit(x_train,y_train.values.ravel())\ny_pred=rf.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","4da50e8e":"dt=DecisionTreeClassifier(criterion='entropy')\ndt.fit(x_train,y_train)\ny_pred=dt.predict(x_test)\nmetrics.accuracy_score(y_test,y_pred)","1a5fb14b":"classifier= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  \nclassifier.fit(x_train, y_train.values.ravel()) \ny_pred= classifier.predict(x_test) \nmetrics.accuracy_score(y_test,y_pred)","f9781f7a":"data=data[~((data['fixed acidity'] < 5) | (data['fixed acidity']>8))]\ndata=data[~((data['residual sugar'] < 1) | (data['residual sugar']>10))]\ndata=data[~(data['volatile acidity']>0.45)]\ndata=data[~((data['citric acid'] < 0.2) | (data['citric acid']>0.46))]\ndata=data[~((data['chlorides'] < 0.02) | (data['chlorides']>0.065))]\ndata=data[~((data['free sulfur dioxide'] < 16) | (data['free sulfur dioxide']>45))]\ndata=data[~((data['total sulfur dioxide'] < 60) | (data['total sulfur dioxide']>170))]\ndata=data[~(data['density']>1.01)]\ndata=data[~((data['pH'] < 2.9) | (data['pH']>3.5))]\ndata=data[~(data['sulphates']>0.7)]\n"}}