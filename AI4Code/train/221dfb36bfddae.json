{"cell_type":{"4d94a55d":"code","819f6de8":"code","f8e26283":"code","a132a05b":"code","45917cc3":"code","6324a33f":"code","326711f9":"code","8c602144":"code","14559dec":"code","51109dca":"code","4ded3fb0":"code","191c2b6e":"code","4f858805":"code","916b1a94":"code","d6a04b34":"code","6f7fb81c":"code","009ba9ea":"code","99daf613":"code","9d9bf676":"code","3e810846":"code","1e4e6331":"code","064a7cb3":"code","e42ebee3":"code","7b0b7bbc":"code","24a73ecd":"code","e57e2775":"code","b03be776":"code","330c6609":"code","75bc0cf9":"code","4cfb5823":"markdown","b8c8ae7c":"markdown","c61f5e81":"markdown","da950951":"markdown","1e628d4a":"markdown","bbaa3b48":"markdown","efc00b8c":"markdown","e8089c33":"markdown","a41628a9":"markdown","0ff9cf11":"markdown"},"source":{"4d94a55d":"# Import Library\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nfrom pandas import set_option\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nmatplotlib.rcParams['font.size'] = 10\nmatplotlib.rcParams['figure.figsize'] = (9, 9)\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","819f6de8":"sample_submissionfile = \"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\"\ntestfile = \"..\/input\/house-prices-advanced-regression-techniques\/test.csv\"\ntrainfile = \"..\/input\/house-prices-advanced-regression-techniques\/train.csv\"","f8e26283":"# Import Dataset\ndataset = pd.read_csv(trainfile)\ndataset.drop('Id', axis=1, inplace=True)","a132a05b":"# Get the Dataset Shape\ndataset.shape","45917cc3":"# Convert categorical variable into dummy\/indicator variables\nDatasetDef = dataset.copy()\nDatasetDef = pd.get_dummies(dataset)","6324a33f":"# Print the shape after Convert categorical variable\nDatasetDef.shape","326711f9":"# Compute pairwise correlation of columns\ndc = DatasetDef.corr(method='pearson')\nprint(dc)","8c602144":"# Collect the Features that have correlation higher than 45% or less than -45%\nFeature = []\nfor i in (dc['SalePrice'][dc['SalePrice'] > 0.45]).index:\n    Feature.append(i)\nfor i in (dc['SalePrice'][dc['SalePrice'] < -0.45]).index:\n    Feature.append(i)","14559dec":"# Set the SalesPrice as last Feature\nFeature.remove('SalePrice')\nFeature.append('SalePrice')","51109dca":"# Create a Dataframe with the Highly correlated features\nDatasetDef = DatasetDef[Feature]","4ded3fb0":"# Show the Features info\nDatasetDef.info()","191c2b6e":"# we will drop GarageYrBlt as it seem like YearBuilt\nDatasetDef.drop('GarageYrBlt', axis=1, inplace=True)","4f858805":"# we will fill the MasVnrArea with the median of the column\nmedian = DatasetDef['MasVnrArea'].median()\nDatasetDef['MasVnrArea'].fillna(median, inplace=True)","916b1a94":"DatasetDef.info()","d6a04b34":"DatasetDef['SalePrice'] = np.log(DatasetDef['SalePrice'])\nDatasetDef['GrLivArea'] = np.log(DatasetDef['GrLivArea'])","6f7fb81c":"# Correlation Matrix Plot\nplt.figure(figsize=(15, 15))\nsns.heatmap(DatasetDef.corr(), annot=True)","009ba9ea":"# we will drop the features with high correlation\nDatasetDef.drop(['TotalBsmtSF', '1stFlrSF','GarageArea', 'TotRmsAbvGrd'], axis=1, inplace=True)","99daf613":"# Correlation Matrix Plot\nplt.figure(figsize=(15, 15))\nsns.heatmap(DatasetDef.corr(), annot=True)","9d9bf676":"# Feature-Feature Relationships\nsns.pairplot(data=DatasetDef)","3e810846":"# Density Plots\nDatasetDef.plot(kind='density', subplots=True, layout=(5,5), sharex=False, sharey=False, \n             figsize=(15,15))\nplt.show()","1e4e6331":"# Split-out validation dataset\ny = DatasetDef['SalePrice'].values\nDatasetDef.drop('SalePrice', axis=1, inplace=True)\nX = DatasetDef.values\nvalidation_size = 0.20\nseed = 7\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=validation_size, random_state=seed)","064a7cb3":"# Test options and evaluation metric\nnum_folds = 10\nscoring = 'neg_mean_squared_error'","e42ebee3":"# Spot-Check Algorithms\nmodels = []\nmodels.append(('LR', LinearRegression()))\nmodels.append(('LASSO', Lasso()))\nmodels.append(('EN', ElasticNet()))\nmodels.append(('KNN', KNeighborsRegressor()))\nmodels.append(('CART', DecisionTreeRegressor()))\nmodels.append(('SVR', SVR()))","7b0b7bbc":"# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=True)\n    cv_results = -cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","24a73ecd":"# prepare the model\nmodel = LinearRegression()\nmodel.fit(X_train, Y_train)","e57e2775":"# transform the validation dataset\npredictions = model.predict(X_validation)\nprint('MSE: {:.3f}'.format(mean_squared_error(Y_validation, predictions)))","b03be776":"# Import Test Feature Dataset\ndatasettest = pd.read_csv(testfile)\ndatasettest.drop('Id', axis=1, inplace=True)\ndatasettest = pd.get_dummies(datasettest)\ndatasettest = datasettest[Feature[:-1]]\ndatasettest.drop('GarageYrBlt', axis=1, inplace=True)\ndatasettest['MasVnrArea'].fillna(0, inplace=True)\ndatasettest['GarageCars'].fillna(2, inplace=True)\ndatasettest['GrLivArea'] = np.log(datasettest['GrLivArea'])\ndatasettest.drop(['TotalBsmtSF', '1stFlrSF','GarageArea', 'TotRmsAbvGrd'], axis=1, inplace=True)\ntest_X = datasettest[:-1].values","330c6609":"# Import Label Dataset\nLabel = pd.read_csv(sample_submissionfile)\nLabel.drop('Id', axis=1, inplace=True)\nLabel['SalePrice'] = np.log(Label['SalePrice'])\ntest_Y = Label[:-1].values","75bc0cf9":"test = model.predict(test_X)\nprint('MSE: {:.4f}'.format(mean_squared_error(test_Y, test)))","4cfb5823":"### 10. <u>Finalize Model<\/u>","b8c8ae7c":"### 8. <u>Run and evaluate each model<\/u>","c61f5e81":"### 3. <u>Feature Engineering<\/u>","da950951":"### 11. <u>Test Model<\/u>","1e628d4a":"### 7. <u>Build Models<\/u>","bbaa3b48":"### 1. <u>Import libraries<\/u>","efc00b8c":"### 4. <u>Summarize the Dataset<\/u>","e8089c33":"### 5. <u>Data Visualization<\/u>","a41628a9":"### 2. <u>Load Dataset<\/u>","0ff9cf11":"### 6. <u>Create a Validation Dataset<\/u>"}}