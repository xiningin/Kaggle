{"cell_type":{"d62c9adc":"code","c8aa69a9":"code","f47f541f":"code","4201dbee":"code","480a9336":"code","f2d823fe":"code","084f51a5":"code","6ec0c0a2":"code","ca2058ed":"code","3b9a3bb3":"code","a3b47e90":"code","ab8633af":"code","bf32d285":"code","109356a4":"code","eeafc3a7":"code","4c67be76":"code","045e655f":"code","b2dc0fe8":"markdown","e6b3f0ea":"markdown","f61f8f57":"markdown","55441b08":"markdown","54d18d14":"markdown","a09541a6":"markdown","989ae2ac":"markdown","66a78485":"markdown","9619686e":"markdown"},"source":{"d62c9adc":"import numpy as np\nimport pickle\nimport cv2\nimport tensorflow as tf\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'","c8aa69a9":"EPOCHS = 25\nINIT_LR = 1e-3\nBS = 32\ndefault_image_size = tuple((64, 64))\nimage_size = 0\nwidth=64\nheight=64\ndepth=3\nimage_size = 0\ndirectory_root = '..\/input\/PlantVillage\/'","f47f541f":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(\"Error :\", e)\n        return None","4201dbee":"\nimage_list, label_list = [], []\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    for directory in root_dir :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            root_dir.remove(directory)\n\n    for plant_folder in root_dir :\n       \n        plant_disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        \n        for disease_folder in plant_disease_folder_list :\n            # remove .DS_Store from list\n            if disease_folder == \".DS_Store\" :\n                plant_disease_folder_list.remove(disease_folder)\n\n        for plant_disease_folder in plant_disease_folder_list:\n            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n            plant_disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n                \n            for single_plant_disease_image in plant_disease_image_list :\n                if single_plant_disease_image == \".DS_Store\" :\n                    plant_disease_image_list.remove(single_plant_disease_image)\n\n            for image in plant_disease_image_list[:200]:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"[INFO] Image loading completed\")  \nexcept Exception as e:\n    print(f\"Error : {e}\")","480a9336":"image_size = len(image_list)\nprint(image_size)","f2d823fe":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\nn_classes = len(label_binarizer.classes_)","084f51a5":"print(label_binarizer.classes_)","6ec0c0a2":"np_image_list = np.array(image_list, dtype=np.float16) \/ 225.0","ca2058ed":"print(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(np_image_list, image_labels, test_size=0.2, random_state = 42)","3b9a3bb3":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","a3b47e90":"\n# %% [markdown]\n#build our model\ninputShape = (height, width, depth)\nmodel = Sequential()\n#convolutional layer with rectified linear unit activation\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=inputShape))\n#again\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\n#choose the best features via pooling\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n#randomly turn neurons on and off to improve convergence\nmodel.add(Dropout(0.25))\n#flatten since too many dimensions, we only want a classification output\nmodel.add(Flatten())\n#fully connected to get all relevant data\nmodel.add(Dense(128, activation='relu'))\n#one more dropout for convergence' sake :) \nmodel.add(Dropout(0.5))\n#output a softmax to squash the matrix into output probabilities\nmodel.add(Dense(n_classes, activation='softmax'))\n#Adaptive learning rate (adaDelta) is a popular form of gradient descent rivaled only by adam and adagrad\n#categorical ce since we have multiple classes (10) ","ab8633af":"model.summary()","bf32d285":"from tensorflow.keras.optimizers import Adam\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\n# distribution\nimport keras\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\n\n# model.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])\n# train the network\nprint(\"[INFO] training network...\")","109356a4":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train),\n    epochs=EPOCHS, verbose=1\n    )","eeafc3a7":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","4c67be76":"print(\"[INFO] Calculating model accuracy\")\nscores = model.evaluate(x_test, y_test)\nprint(f\"Test Accuracy: {scores[1]*100}\")","045e655f":"#%%\nimport h5py\nmodel.save('trained_model.h5')","b2dc0fe8":"Import neccessary packages","e6b3f0ea":"Save model using Pickle\n\n","f61f8f57":"Function to convert images to array","55441b08":"Plot the train and val curve","54d18d14":"Model Accuracy","a09541a6":"Get Size of Processed Image","989ae2ac":"#build our model\ninputShape = (height, width, depth)\nmodel = Sequential()\n#convolutional layer with rectified linear unit activation\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=inputShape))\n#again\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\n#choose the best features via pooling\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n#randomly turn neurons on and off to improve convergence\nmodel.add(Dropout(0.25))\n#flatten since too many dimensions, we only want a classification output\nmodel.add(Flatten())\n#fully connected to get all relevant data\nmodel.add(Dense(128, activation='relu'))\n#one more dropout for convergence' sake :) \nmodel.add(Dropout(0.5))\n#output a softmax to squash the matrix into output probabilities\nmodel.add(Dense(n_classes, activation='softmax'))\n#Adaptive learning rate (adaDelta) is a popular form of gradient descent rivaled only by adam and adagrad\n#categorical ce since we have multiple classes (10) \n\n\n# Model Summary","66a78485":"Print the classes\nprint(n_classes)","9619686e":"Fetch images from directory"}}