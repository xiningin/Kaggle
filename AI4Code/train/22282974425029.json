{"cell_type":{"0bcc5385":"code","a2edd7cd":"code","d23dfc33":"code","d23f4fd7":"code","48712aa5":"code","8edc68f1":"code","f126d672":"code","6ab8b2d0":"code","24d3d41b":"code","57f838d8":"code","b9b920c2":"code","3f77ebb9":"code","8fc1b7c9":"code","84a6872a":"code","7f0efdce":"code","2fe18870":"code","95be44ef":"code","088e31fb":"code","44b4f987":"markdown","8de707cf":"markdown","0fd1eef6":"markdown","34ce7f16":"markdown","5a8b9c24":"markdown","fa678c7c":"markdown","ef1ba72f":"markdown","733ab496":"markdown","27cd451a":"markdown","6d6aa3b2":"markdown","e6aebf8a":"markdown","15754804":"markdown"},"source":{"0bcc5385":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2edd7cd":"# tuple\ndef tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","d23dfc33":"x = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","d23f4fd7":"x = 5              # global scope x  \ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","48712aa5":"# built in scope\nimport builtins\ndir(builtins)","8edc68f1":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())  ","f126d672":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","6ab8b2d0":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,3,5,7)\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():              \n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","24d3d41b":"#user defined function\ndef square(x):\n    return x**2\nprint(square(5))\n\n# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\n\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","57f838d8":"#anonymous function\nnumber_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","b9b920c2":"#anonymous function\nmylist = [1,2,3,4,5]\nx = map(lambda x: x*5, mylist)\nprint(list(x))","3f77ebb9":"# iteration example\nname = \"ronaldo\"   #string\nit = iter(name)    # use iter() method\nprint(next(it))    # print next iteration\nprint(next(it))\nprint(*it)         # print remaining iteration","8fc1b7c9":"# zip example\nlist1 = [1,2,3,4]     # list\nlist2 = [5,6,7,8]\nz = zip(list1,list2)  # use zip() method\nprint(type(z))\nprint(z)\nprint(\"------\")\n\nz_list = list(z)\nprint(type(z))\nprint(z_list)\nprint(\"------\")\n\nun_zip = zip(*z_list)            # used to \"*\" unzip\nun_list1,un_list2 = list(un_zip) # unzip returns tuple\nprint(type(un_list2)) \nprint(un_list1)\nprint(un_list2)      ","84a6872a":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","7f0efdce":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","2fe18870":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.info()","95be44ef":"data.head(10)","088e31fb":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\nprint(threshold)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] ","44b4f987":"\nSCOPE<br>\nWhat we need to know about scope:<br>\n\nglobal: defined main body in script<br>\nlocal: defined in a function<br>\nbuilt in scope: names in predefined built in scope module such as print, len<br>","8de707cf":"LIST COMPREHENS\u0130ON<br>\nOne of the most important topic of this kernel<br>\n\n* list comprehension: collapse for loops for building lists into a single line<br>\nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","0fd1eef6":"**USER DEFINED FUNCTION**<br>\nWhat do we need to know about functions:<br>\n\ndocstrings: documentation for functions. Example:<br>\nfor f():<br>\n\"\"\"This is docstring for documentation of function f\"\"\"<br>\ntuple: sequence of immutable python objects.<br>\ncant modify values<br>\ntuple uses paranthesis like tuble = (1,2,3)<br>\nunpack tuple into several variables like a,b,c = tuple<br>","34ce7f16":"ITERATORS<br>\n\n* iterable is an object that can return an iterator<br>\n* iterable: an object with an associated iter() method<br>\nexample: list, strings and dictionaries<br>\n* iterator: produces next value with next() method","5a8b9c24":"zip(): zip lists","fa678c7c":"LAMBDA FUNCTION<br>\nFaster way of writing function","ef1ba72f":"Example Dataset","733ab496":"DEFAULT and FLEXIBLE ARGUMENTS<br>\n\n1. Default argument example:<br>\n\ndef f(a, b=1):<br>\n\"\"\" b = 1 is default argument\"\"\"","27cd451a":"\nNESTED FUNCTION<br>\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","6d6aa3b2":"2. Flexible argument example:<br>\n\ndef f(*args):<br>\n \"\"\" *args can be one or more\"\"\"<br>\n \n def f(** kwargs)<br>\n \"\"\" **kwargs is a dictionary\"\"\"","e6aebf8a":"[i + 1 for i in num1 ]: list of comprehension<br>\ni +1: list comprehension syntax<br>\nfor i in num1: for loop syntax<br>\ni: iterator<br>\nnum1: iterable object<br>","15754804":"ANONYMOUS FUNCT\u0130ON<br>\n\nLike lambda function but it can take more than one arguments.<br>\n\n* map(func,seq) : applies a function to all the items in a list"}}