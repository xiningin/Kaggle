{"cell_type":{"b7998733":"code","f2870df4":"code","66084807":"code","5ded15c5":"code","ec4d409c":"code","27c89c15":"code","3004278f":"code","d417c95e":"code","70e1c95d":"code","cf9534c5":"code","54e03dc1":"code","ce5a7134":"code","49e5f2e0":"code","4d7e459e":"code","2f1a0e24":"code","059efc66":"code","8694ef91":"code","e8674aca":"code","6cbfd277":"markdown","c0471c87":"markdown"},"source":{"b7998733":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f2870df4":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","66084807":"# Let's start simple and use a random forest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score","5ded15c5":"train.groupby('Survived')['Cabin'].value_counts()","ec4d409c":"# start with simple features\ny = train.Survived\nX = train.loc[:, ['Sex', 'Age', 'Fare', 'Pclass', 'Embarked', 'Cabin']]","27c89c15":"# This dataset only has 2 values for gender, let's code them as binary\nX.Sex = X.Sex.replace({'male': 1, 'female': 0})\n# fill in missing ages by median per gender\nX.loc[(X.Sex == 1) & (pd.isna(X.Age)), 'Age'] = X.loc[(X.Sex == 1) & (~pd.isna(X.Age)), 'Age'].median()\nX.loc[(X.Sex == 0) & (pd.isna(X.Age)), 'Age'] = X.loc[(X.Sex == 0) & (~pd.isna(X.Age)), 'Age'].median()\n# fill Embarked as categorical\nX.loc[pd.isna(X.Embarked), 'Embarked'] = 0\nX.Embarked = X.Embarked.replace({'S': 1, 'C': 2, 'Q': 3})\nX.Embarked = X.Embarked.astype('category')\n# grab just the letter\/hall of cabin\nX.loc[~pd.isna(X.Cabin), 'Cabin'] = X.loc[~pd.isna(X.Cabin), 'Cabin'].apply(lambda x: x[0])","3004278f":"dummies = pd.get_dummies(X.Cabin, drop_first=True, dummy_na=True)\nX = pd.merge(left=X, right=dummies, left_index=True, right_index=True, how='left')\nX.drop('Cabin', axis=1, inplace=True)","d417c95e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.33)\nbaseline = y_train.value_counts(normalize=True).values.tolist()[0]","70e1c95d":"print(f\"Baseline Accuracy is: {baseline}\")","cf9534c5":"rfc = RandomForestClassifier(bootstrap=True, n_estimators=250)\nrfc.fit(X_train, y_train)\ntrain_pred = rfc.predict(X_train)","54e03dc1":"# Let's evaluate training performance\nprint(confusion_matrix(train_pred, y_train))\nprint(f'Training accuracy is: {accuracy_score(train_pred, y_train)}')","ce5a7134":"for value, name in sorted(zip(rfc.feature_importances_, X_train.columns), reverse=True):\n    print(f'{name}: {value}')","49e5f2e0":"test_pred = rfc.predict(X_test)\nprint(confusion_matrix(test_pred, y_test))\nprint(f'Testing accuracy is: {accuracy_score(test_pred, y_test)}')","4d7e459e":"# This is actually pretty good out of the box and we can probably stop here.\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nX_final = test.loc[:, ['PassengerId', 'Sex', 'Age', 'Fare', 'Pclass', 'Embarked', 'Cabin']]","2f1a0e24":"# Repeat same cleaning process\nX_final.Sex = X_final.Sex.replace({'male': 1, 'female': 0})\n# fill in missing ages by median per gender\nX_final.loc[(X_final.Sex == 1) & (pd.isna(X_final.Age)), 'Age'] = X_final.loc[(X_final.Sex == 1) & (~pd.isna(X_final.Age)), 'Age'].median()\nX_final.loc[(X_final.Sex == 0) & (pd.isna(X_final.Age)), 'Age'] = X_final.loc[(X_final.Sex == 0) & (~pd.isna(X_final.Age)), 'Age'].median()\nX_final.loc[(X_final.Sex == 1) & (pd.isna(X_final.Fare)), 'Fare'] = X_final.loc[(X_final.Sex == 1) &  (~pd.isna(X_final.Fare)), 'Fare'].median()\nX_final.loc[(X_final.Sex == 0) & (pd.isna(X_final.Fare)), 'Fare'] = X_final.loc[(X_final.Sex == 0) &  (~pd.isna(X_final.Fare)), 'Fare'].median()\nX_final.loc[pd.isna(X_final.Embarked), 'Embarked'] = 0\nX_final.Embarked = X_final.Embarked.replace({'S': 1, 'C': 2, 'Q': 3})\nX_final.Embarked = X_final.Embarked.astype('category')\nX_final.loc[~pd.isna(X_final.Cabin), 'Cabin'] = X_final.loc[~pd.isna(X_final.Cabin), 'Cabin'].apply(lambda x: x[0])\ndummies = pd.get_dummies(X_final.Cabin, drop_first=True, dummy_na=True)\nX_final = pd.merge(left=X_final, right=dummies, left_index=True, right_index=True, how='left')\nX_final.drop('Cabin', axis=1, inplace=True)","059efc66":"final_prediction = rfc.predict(X_final.iloc[:, 1:])","8694ef91":"X_final['Survived'] = final_prediction","e8674aca":"output = X_final.loc[:, ['PassengerId', 'Survived']].copy()\noutput.to_csv('final.csv', index=False)","6cbfd277":"### Test Set","c0471c87":"### Train Set"}}