{"cell_type":{"33ae7a75":"code","b75c55d3":"code","7ebc3a9d":"code","8d031252":"code","ad44eb4f":"code","b5792014":"code","21f686e3":"code","49313429":"code","3b7128d6":"code","902da84f":"code","6d4f5953":"markdown","29923437":"markdown","0c714262":"markdown","0006f0d8":"markdown","9ce4ceaf":"markdown","ed491d82":"markdown"},"source":{"33ae7a75":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport cv2\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom PIL import Image\nfrom sklearn.model_selection import train_test_split\nfrom skimage.transform import resize\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf\nfrom tensorflow.keras import *","b75c55d3":"# loading dataset\ndata = []\nlabels = []\nclasses = 43\ncur_path = '..\/input\/gtsrb-german-traffic-sign\/Train'\n\nfor i in os.listdir(cur_path):\n    dir = cur_path + '\/' + i\n    for j in os.listdir(dir):\n        img_path = dir+'\/'+j\n        img = cv2.imread(img_path,-1)\n        img = cv2.resize(img, (30,30), interpolation = cv2.INTER_NEAREST)\n        data.append(img)\n        labels.append(i)\n        \nx_train = np.array(data)\nx_train = x_train \/ 255\ny_train = np.array(labels).astype(np.float)","7ebc3a9d":"x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size=0.2, random_state=42)\nprint(x_train.shape, y_train.shape)\nprint(x_valid.shape, y_valid.shape)","8d031252":"i_path = '..\/input\/gtsrb-german-traffic-sign\/Train\/1\/00001_00072_00027.png'\nplt.imshow(cv2.imread(i_path, -1))","ad44eb4f":"# number of images in each class\ndata_dic = {}\nfor folder in os.listdir(cur_path):\n    data_dic[folder] = len(os.listdir(cur_path + '\/' + folder))\n\ndata_df= pd.Series(data_dic)\nplt.figure(figsize = (15, 6))\ndata_df.sort_values().plot(kind = 'bar')\nplt.xlabel('Classes')\nplt.ylabel('Number of images')","b5792014":"from tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.optimizers import *\n\n\nmodel = Sequential()\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), activation = 'relu', \n                 input_shape = (30, 30, 3), data_format = 'channels_last',\n                 kernel_regularizer = regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.add(BatchNormalization())\n\n# replace maxpooling with conv2d\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5), padding = \"same\", strides = (2, 2),\n                kernel_regularizer = regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5), activation = 'relu' ,\n                 kernel_regularizer=regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\n# replace maxpooling with conv2d\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5), padding = \"same\",\n                 kernel_regularizer = regularizers.l1_l2(l1=1e-4, l2=1e-3), strides = (2, 2)))\nmodel.add(BatchNormalization())\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1024, activation = 'relu',  kernel_regularizer=regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(256, activation = 'relu',  kernel_regularizer=regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(43, activation = 'softmax',  kernel_regularizer=regularizers.l1_l2(l1=1e-4, l2=1e-3)))\nmodel.summary()","21f686e3":"callback = EarlyStopping(monitor='val_accuracy', patience=20, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_accuracy',factor=1e-1, patience=8, verbose=1, min_lr = 2e-6)\nopt = Adam(learning_rate = 1e-3)\nmodel.compile(optimizer = opt,\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nhistory = model.fit(x_train ,y_train,  batch_size = 128, \n         epochs=200, validation_data = (x_valid, y_valid),\n          callbacks=[callback, reduce_lr], shuffle = True)","49313429":"plt.figure(0)\nplt.plot(history.history['accuracy'], label= 'train accuracy')\nplt.plot(history.history['val_accuracy'], label= 'test accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('Accuracy')\nplt.legend()","3b7128d6":"plt.figure(0)\nplt.plot(history.history['loss'], label= 'train loss')\nplt.plot(history.history['val_loss'], label= 'test loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('Loss')\nplt.legend()","902da84f":"test = pd.read_csv('..\/input\/gtsrb-german-traffic-sign\/Test.csv')\ny_test = test[\"ClassId\"].values\nimgs = test[\"Path\"].values\ndata =[]\nfor img in imgs:\n    image = cv2.imread('..\/input\/gtsrb-german-traffic-sign\/' +img)\n    image_fromarray = Image.fromarray(image, 'RGB')\n    resize_image = image_fromarray.resize((30, 30))\n    data.append(np.array( resize_image ))\n\nx_test = np.array(data)\nx_test = x_test\/255\nmodel.evaluate(x_test, y_test)","6d4f5953":"# Visualize the data","29923437":"# Construct Model","0c714262":"# Train Model","0006f0d8":"# Load the dataset","9ce4ceaf":"# Plot ","ed491d82":"# Model performance on test dataset"}}