{"cell_type":{"e0605453":"code","f4098f17":"code","e0297bca":"code","0777318b":"code","fbb92a5a":"code","0890c17c":"code","8c9dd19d":"code","d384d182":"code","d3146875":"code","671fe7f8":"code","618addeb":"code","784818de":"code","818f80e8":"code","627c5934":"code","93ac41fc":"code","d1241295":"code","3da7cc01":"code","d2c795a4":"code","39f41f1a":"code","c1f825f5":"code","d7d1f207":"code","a78ebbd9":"code","29fce9c9":"code","4797faf2":"code","71a4123b":"code","f2b3dd00":"code","15643502":"code","6d96baaf":"code","c499a6f8":"code","ea435ab1":"code","786b962a":"code","2672a57e":"code","b75b5594":"code","153bae32":"code","0968261f":"code","84c2c932":"code","3904d8eb":"code","1fdff7da":"code","8b3f13fc":"code","cf0db8dc":"code","9c16a6ee":"code","d7fd7a1d":"code","9c5936d1":"code","c66c7bf0":"code","b8df1acb":"code","1ccfd901":"code","5f0937be":"code","b7ac67f0":"code","cf103591":"markdown","29e929eb":"markdown","f48cf850":"markdown","2650a3df":"markdown","24b51039":"markdown","1edad634":"markdown","521cdf8c":"markdown","3cf80ca3":"markdown","e55d09bf":"markdown","afb146a2":"markdown","45c02e5b":"markdown","454d6e29":"markdown","c37de0e1":"markdown","e2150abe":"markdown","1da3dc59":"markdown","59da32e0":"markdown","d0fceb76":"markdown","6d44c087":"markdown","76add2c0":"markdown","d1eb7dd5":"markdown","762cec7d":"markdown","36ec2c94":"markdown","56ade714":"markdown","af705e78":"markdown","52e17767":"markdown","5fa02259":"markdown","08c79892":"markdown","f123c2e1":"markdown","61213147":"markdown","5d2ff8a8":"markdown","01241899":"markdown","11fc00b2":"markdown","e6c3a560":"markdown","7aa6847e":"markdown","b3ce95aa":"markdown","2762e8f1":"markdown"},"source":{"e0605453":"import time\nfrom datetime import datetime\n\n#measure notebook running time\nstart_time = time.time()\n\n%matplotlib inline\n\n# backbone\nimport os, warnings\nimport numpy as np \nfrom numpy.random import seed\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport calendar\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor,RandomForestRegressor,AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import ElasticNet, Lasso, Ridge,LinearRegression\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.multioutput import MultiOutputRegressor\n\nfrom xgboost import XGBRegressor\nimport xgboost as xgb\n\n# DNN\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import BatchNormalization\nfrom keras.callbacks import EarlyStopping\nfrom keras import metrics\nimport tensorflow\n\npd.options.display.float_format = '{:.2f}'.format\nsns.set(style='white', context='notebook', palette='deep')\nprint(\"loaded ...\")","f4098f17":"# Reproducibility\ndef set_seed(sd=13):\n    seed(sd)\n    np.random.seed(sd)\n    os.environ['PYTHONHASHSEED'] = str(sd)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\nset_seed(13)","e0297bca":"store_sales = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n        'onpromotion': 'int32',\n    }, usecols=['store_nbr', 'family', 'date', 'sales','onpromotion'])\n\ntest_data = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/test.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'int32',\n    })\nOIL = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv', parse_dates=['date'], infer_datetime_format=True, dtype = {'dcoilwtico':'float32'})\nHOLIDAY = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/holidays_events.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'type': 'category',\n        'locale': 'category',\n        'locale_name': 'category',\n        'description': 'category',\n        'transferred': 'bool',\n    })\nSTORES = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/stores.csv')\nTRANS = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/transactions.csv', parse_dates=['date'], infer_datetime_format=True, \n                    dtype={'store_nbr':'int32','transactions':'float32'})\n\nprint(\"data loaded ...\")","0777318b":"store_sales['date'] = store_sales.date.dt.to_period('D')\ntest_data['date'] = test_data.date.dt.to_period('D')\nstore_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\ntest_data = test_data.set_index(['store_nbr', 'family', 'date']).sort_index()","fbb92a5a":"CALENDAR = pd.DataFrame(pd.period_range(start='2013-01-01', end = '2017-08-31'),columns=['date'])","0890c17c":"OIL['date'] = OIL.date.dt.to_period('D')\nOIL = OIL.set_index(['date']).sort_index()\nOIL['MA'] = OIL.dcoilwtico.rolling(7).mean()\nOIL['SD'] = OIL.dcoilwtico.rolling(7).std()","8c9dd19d":"CALENDAR = CALENDAR.join(OIL, on = 'date')\nCALENDAR.ffill(inplace=True)\nCALENDAR.bfill(inplace=True)\nCALENDAR = CALENDAR.set_index(['date']).sort_index()","d384d182":"CALENDAR.plot(figsize=(20,10), title= \"Oil\", xlabel= \"date\", rot=90);","d3146875":"CALENDAR['Day'] = CALENDAR.index.dayofweek\nCALENDAR['MonthDay'] = CALENDAR.index.day\nCALENDAR['Month'] = CALENDAR.index.month\nCALENDAR['Season'] = CALENDAR['Month'] \/\/ 4","671fe7f8":"CALENDAR['EndOfMonth'] = CALENDAR.index.map(lambda x: calendar.monthrange(x.year, x.month)[1])\nCALENDAR['Payday'] = ((CALENDAR['Day'] == CALENDAR['EndOfMonth']) | (CALENDAR['MonthDay'] == 15)).astype(int)","618addeb":"#CALENDAR.tail(20)","784818de":"HOLIDAY['date'] = HOLIDAY.date.dt.to_period('D')\nHOLIDAY = HOLIDAY.set_index(['date']).sort_index()\nHOLIDAY = HOLIDAY[HOLIDAY.locale == 'National']\nHOLIDAY = HOLIDAY[~HOLIDAY.index.duplicated()]","818f80e8":"CALENDAR['WD'] = 1\nCALENDAR.loc[CALENDAR.Day > 4, 'WD'] = 0","627c5934":"CALENDAR = CALENDAR.merge(HOLIDAY, on='date', how='left')","93ac41fc":"CALENDAR.loc[(CALENDAR.type == 'Holiday') & (CALENDAR.transferred == True), 'WD'] = 1\nCALENDAR.loc[(CALENDAR.type == 'Holiday') & (CALENDAR.transferred == False), 'WD'] = 0\nCALENDAR.loc[(CALENDAR.type == 'Work Day'), 'WD'] = 1\nCALENDAR.loc[(CALENDAR.type == 'Bridge'), 'WD'] = 0\nCALENDAR.loc[(CALENDAR.type == 'Transfer'), 'WD'] = 0","d1241295":"keep_cols = ['dcoilwtico','MA','Day', 'WD', 'SD','Payday','Month','Season']\nCALENDAR = CALENDAR[keep_cols]","3da7cc01":"#start_date = '2016-01-01'\nstart_date = '2017-04-15'\n\n#start_date = '2017-05-01'\nend_date = '2017-08-15'","d2c795a4":"y = store_sales.drop(['onpromotion'], axis=1).unstack(['store_nbr', 'family']).loc[start_date:,'sales']\ny.head()","39f41f1a":"fourier = CalendarFourier(freq='W', order=4)\ndp = DeterministicProcess(index=y.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX = dp.in_sample()","c1f825f5":"PROMO = store_sales.drop('sales', axis=1)\nPROMO = PROMO.append(test_data.drop('id', axis=1))\nPROMO = PROMO.reset_index(['store_nbr','family'])\nPROMO['store_nbr'] = PROMO['store_nbr'].astype('int32')\nPROMO = PROMO.reset_index()\nPROMO = PROMO.groupby(['date','store_nbr'])['onpromotion'].mean()\nPROMO = PROMO.unstack('store_nbr')\nPROMO.tail()","d7d1f207":"X['oil'] = CALENDAR.loc[start_date:end_date]['MA'].values\nX['oil_sd'] = CALENDAR.loc[start_date:end_date]['SD'].values\nX['Day'] = CALENDAR.loc[start_date:end_date]['Day'].values\nX['WD'] = CALENDAR.loc[start_date:end_date]['WD'].values\nX['NewYear'] = (X.index.dayofyear == 1)\nX['NewYear'] = X['NewYear'].apply(lambda row: 1 if row else 0)\nX['Payday'] = CALENDAR.loc[start_date:end_date]['Payday'].values\nX['Season'] = CALENDAR.loc[start_date:end_date]['Season'].values\nX = pd.get_dummies(X, columns= ['Day'])\n#X = X.join(PROMO.loc[start_date:end_date])\nX.shape","a78ebbd9":"X.head(10)","29fce9c9":"%%time\nlinear_model = LinearRegression(fit_intercept=False).fit(X, y)\ny_fit_linear = pd.DataFrame(linear_model.predict(X).clip(0.0), index=X.index, columns=y.columns)\n#y_fit_linear.head()","4797faf2":"%%time\nEXT_model = ExtraTreesRegressor(random_state=13, bootstrap=True, n_jobs=-1).fit(X,y)\ny_fit_ext = pd.DataFrame(EXT_model.predict(X).clip(0.0), index=X.index, columns=y.columns)\n#y_fit_ext.head()","71a4123b":"%%time\nRF_model = RandomForestRegressor(random_state=13, n_jobs=-1).fit(X,y)\ny_fit_rf = pd.DataFrame(RF_model.predict(X).clip(0.0), index=X.index, columns=y.columns)\ny_fit_rf.head()\n#RF_model.get_params()","f2b3dd00":"%%time\nRidge_model = Ridge(fit_intercept=False, alpha= 0.5, normalize=True).fit(X,y)\ny_fit_ridge = pd.DataFrame(Ridge_model.predict(X).clip(0.0), index=X.index, columns=y.columns)\n#y_fit_ridge.head()","15643502":"%%time\n#xgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective = 'reg:squarederror', random_state = 13, n_jobs=-1, learning_rate=0.01, reg_alpha=0.1, reg_lambda=10, subsample= 0.95)).fit(X, y)\n\n# 0.04131683657406662\n# xgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective = 'reg:squarederror', random_state = 13, n_jobs=-1,\n#                                                   learning_rate=0.3, reg_alpha=0, reg_lambda=1, subsample= 1)).fit(X, y)\n\n# xgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective = 'reg:squarederror', random_state = 13, n_jobs=-1,predictor= 'gpu_predictor',\n#                                                   learning_rate=0.045, reg_alpha=0.1, reg_lambda=1.1, subsample= 1)).fit(X, y)\n\nxgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective = 'reg:squarederror', random_state = 13, n_jobs=-1,predictor= 'gpu_predictor',\n                                                  learning_rate=0.045, reg_alpha=0.5, reg_lambda=1, subsample= 1)).fit(X, y)","6d96baaf":"y_fit_xgb = pd.DataFrame(xgb_model.predict(X).clip(0.0), index=X.index, columns=y.columns)\ny_fit_xgb","c499a6f8":"%%time\nfams = ['AUTOMOTIVE','BEAUTY','BEVERAGES','GROCERY I', \"BOOKS\", \"BABY CARE\", \"CELEBRATION\"]\nSTORE_NBR = '1'\nfig, axs = plt.subplots(len(fams), figsize=(30,50))\nfor i in range(len(fams)):\n    axs[i] = y.loc(axis=1)[STORE_NBR, fams[i]].loc[start_date:].plot(ax=axs[i],label=\"sales\")\n    #axs[i] = y_fit_linear.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"LR fit\")\n    axs[i] = y_fit_ext.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"EXT fit\")\n    axs[i] = y_fit_rf.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"RF fit\")\n    axs[i] = y_fit_xgb.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"XGB fit\")\n    #axs[i] = y_fit_ridge.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"Ridge fit\")\n    \n    axs[i].set_title(f'{fams[i]} Sales at Store {STORE_NBR}');\n    axs[i].legend();\n","ea435ab1":"# LR_rmse = mean_squared_error(y,y_fit_linear)**0.5\n# EXT_rmse = mean_squared_error(y,y_fit_ext)**0.5\n# RF_rmse = mean_squared_error(y,y_fit_rf)**0.5\n# Ridge_rmse = mean_squared_error(y,y_fit_ridge)**0.5\n# XGB_rmse = mean_squared_error(y,y_fit_xgb)**0.5","786b962a":"LR_rmse = mean_squared_log_error(y,y_fit_linear)**0.5\nEXT_rmse = mean_squared_log_error(y,y_fit_ext)**0.5\nRF_rmse = mean_squared_log_error(y,y_fit_rf)**0.5\nRidge_rmse = mean_squared_log_error(y,y_fit_ridge)**0.5\nXGB_rmse = mean_squared_log_error(y,y_fit_xgb)**0.5","2672a57e":"print(\"----------------------------------------\")\nprint(\"LR:\", LR_rmse)\nprint(\"Ridge:\", Ridge_rmse)\nprint(\"----------------------------------------\")\nprint(\"EXT:\", EXT_rmse)\nprint(\"RF:\", RF_rmse)\nprint(\"----------------------------------------\")\nprint(\"XGB:\", XGB_rmse)","b75b5594":"end_test='2017-08-31'\nstart_test='2017-08-16'","153bae32":"X_test = dp.out_of_sample(steps=16)","0968261f":"X_test['oil'] = CALENDAR.loc[start_test:end_test]['MA'].values\nX_test['oil_sd'] = CALENDAR.loc[start_test:end_test]['SD'].values\nX_test['Day'] = CALENDAR.loc[start_test:end_test]['Day'].values\nX_test['WD'] = CALENDAR.loc[start_test:end_test]['WD'].values\nX_test['NewYear'] = (X_test.index.dayofyear == 1)\nX_test['NewYear'] = X_test['NewYear'].apply(lambda row: 1 if row else 0)\nX_test['Payday'] = CALENDAR.loc[start_test:end_test]['Payday'].values\nX_test['Season'] = CALENDAR.loc[start_test:end_test]['Season'].values\nX_test = pd.get_dummies(X_test, columns= ['Day']) \n#X_test = X_test.join(PROMO.loc[start_test:end_test])\nX_test.head()","84c2c932":"LR_forecast = pd.DataFrame(linear_model.predict(X_test).clip(0.0),index=X_test.index, columns=y.columns)\n#LR_forecast.head()","3904d8eb":"EXT_forecast = pd.DataFrame(EXT_model.predict(X_test).clip(0.0),index=X_test.index, columns=y.columns)\n#EXT_forecast.head()","1fdff7da":"RF_forecast = pd.DataFrame(RF_model.predict(X_test).clip(0.0),index=X_test.index, columns=y.columns)\nRF_forecast.head()","8b3f13fc":"XGB_forecast = pd.DataFrame(xgb_model.predict(X_test).clip(0.0),index=X_test.index, columns=y.columns)\nXGB_forecast.head()","cf0db8dc":"%%time\nfams = ['AUTOMOTIVE','BEAUTY','BEVERAGES','GROCERY I', \"BOOKS\", \"BABY CARE\", \"CELEBRATION\"]\nSTORE_NBR = '1'\nfig, axs = plt.subplots(len(fams), figsize=(25,30))\nfor i in range(len(fams)):\n    axs[i] = y.loc(axis=1)[STORE_NBR, fams[i]].loc[start_date:].iloc[-90:].plot(ax=axs[i],label=\"sales\")\n    #axs[i] = LR_forecast.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"LR forecast\")\n    axs[i] = EXT_forecast.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"EXT_forecast\")\n    axs[i] = RF_forecast.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"RF_forecast\")\n    axs[i] = XGB_forecast.loc(axis=1)[STORE_NBR, fams[i]].plot(ax=axs[i],label=\"XGB_forecast\")\n    axs[i].set_title(f'{fams[i]} Sales at Store {STORE_NBR}');\n    axs[i].legend();","9c16a6ee":"def forecast_to_submit(forecast):\n    submit = (forecast\n            .stack(['store_nbr', 'family'])\n            .reset_index()\n            .rename(columns={0:\"sales\", 'level_0':'date'})\n            .set_index(['date', 'store_nbr', 'family'])\n            .sort_index())\n    submit = submit.join(test_data.id).reindex(columns=['id', 'sales'])\n    return submit","d7fd7a1d":"#y_submit = LR_forecast\ny_submit_ext = forecast_to_submit(EXT_forecast)\ny_submit_rf = forecast_to_submit(RF_forecast)\ny_submit_xgb = forecast_to_submit(XGB_forecast)\n\n#y_submit_xgb.head(20)","9c5936d1":"y_submit_xgb","c66c7bf0":"VOTING = pd.DataFrame(index = sorted(test_data.id))\nVOTING['XGB'] = y_submit_xgb.sales.values\nVOTING['RF'] = y_submit_rf.sales.values\nVOTING['EXT'] = y_submit_ext.sales.values\nuse_voting = ['XGB','RF','EXT']\nuse_voting = ['RF','EXT']\nVOTING['sales'] = VOTING[use_voting].mean(axis=1)\nVOTING.head(10)","b8df1acb":"y_submit_vote = VOTING[['sales']]","1ccfd901":"#y_submit = y_submit_rf\ny_submit_vote.index.name = 'id'\ny_submit = y_submit_vote.reset_index(drop=False)\n#y_submit = y_submit_xgb\ny_submit.head()","5f0937be":"y_submit.to_csv('submission.csv', index=False)\nprint('Submission completed')","b7ac67f0":"end_time = time.time()\nprint(\"Notebook run time: {:.1f} seconds. Finished at {}\".format(end_time - start_time, datetime.now()) )","cf103591":"# Fit, visual","29e929eb":"## Ridge\nnot used for prediction","f48cf850":"## Data","2650a3df":"## Seasonal","24b51039":"# Predictions\n","1edad634":"## Holidays","521cdf8c":"# Store sales, take #3\nprevious tries: <br>\nhttps:\/\/www.kaggle.com\/lovroselic\/storesales-ls 0.505 <br>\nhttps:\/\/www.kaggle.com\/lovroselic\/storesales-seasonality-only-ls-take-2 0.510 <br>\n","3cf80ca3":"# Imports & config","e55d09bf":"---","afb146a2":"## EXT","45c02e5b":"## ExtraTrees","454d6e29":"## Voting","c37de0e1":"---","e2150abe":"## Fit RMSE","1da3dc59":"---","59da32e0":"---","d0fceb76":"---","6d44c087":"# Features for test set","76add2c0":"### OIL","d1eb7dd5":"## Random Forest","762cec7d":"## Linear regression","36ec2c94":"## RF","56ade714":"## LR","af705e78":"# Calendar","52e17767":"# Date selection","5fa02259":"---\nHistory:<br>\nLR: 0.47621 (V1) <br>\nEXT: 0.44987 (V3) <br>\nRF: 0.4488 (V2) <br>\n-> from april only: 0.44747 <br>\n-> droppepd type: 0.44706 (V5)<br>\n-> added SD rolling: 0.44112 (V8)<br>\n-> data from May 2017: 0.4407 (V9)<br>\n---","08c79892":"---","f123c2e1":"## Other features","61213147":"## XGB","5d2ff8a8":"## Onpromotion","01241899":"# Submit","11fc00b2":"## XGB","e6c3a560":"# Target","7aa6847e":"# Models","b3ce95aa":"## Day of Week","2762e8f1":"## WorkDays"}}