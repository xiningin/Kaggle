{"cell_type":{"7ab8ebf9":"code","84be4739":"code","19b5c694":"code","aed4f542":"code","fd970082":"code","a22d38c6":"code","f089d312":"code","4e5109e7":"code","88b5dbf5":"code","1c71e949":"code","2af6e6ef":"code","5496e785":"code","2887ec44":"code","c348f750":"code","749c1539":"code","80ec5db2":"code","b7380f8e":"markdown","5002a4b0":"markdown","3a7b61d2":"markdown","5df9e938":"markdown","bf761e07":"markdown"},"source":{"7ab8ebf9":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\nimport tensorflow as tf","84be4739":"ds_train = tf.keras.preprocessing.image_dataset_from_directory(directory='..\/input\/devnagri-script-classification\/Data\/Train',\n                                                               validation_split=0.05,\n                                                               subset=\"training\",\n                                                               seed=173,\n                                                               color_mode='grayscale',\n                                                               batch_size=512,\n                                                               image_size=(32,32))\n\nds_val   = tf.keras.preprocessing.image_dataset_from_directory(directory='..\/input\/devnagri-script-classification\/Data\/Train',\n                                                               validation_split=0.05,\n                                                               subset=\"validation\",\n                                                               seed=173,\n                                                               color_mode='grayscale',\n                                                               batch_size=512,\n                                                               image_size=(32,32))\n\nclass_names = ds_train.class_names","19b5c694":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(7, 7))\nfor images, labels in ds_train.take(1):\n    for i in range(9):\n        ax = plt.subplot(3, 3, i + 1)\n        plt.imshow(images[i].numpy().astype(\"uint8\"), cmap='gray',interpolation='bilinear')\n        plt.title(class_names[labels[i]])\n        plt.axis(\"off\")","aed4f542":"!pip install --upgrade Augmentor -q\nimport Augmentor","fd970082":"!mkdir ..\/raw_corpus_augmented\n\nfor directory in tf.io.gfile.listdir('..\/input\/devnagri-script-classification\/Data\/Train'):\n    p = Augmentor.Pipeline(source_directory=\"\/kaggle\/input\/devnagri-script-classification\/Data\/Train\/\"+directory, output_directory=\"\/kaggle\/raw_corpus_augmented\/\"+directory)\n    p.rotate(probability=0.65, max_left_rotation=7.5, max_right_rotation=7.5)\n    p.skew(0.4, 0.2)\n    p.random_distortion(0.7, 7, 7, 5)\n    p.shear(0.35, 5, 5)\n    p.sample(1700*30)","a22d38c6":"def DenseNet_micro(num_classes=46, rm_prob=0):\n    inp  = tf.keras.Input(shape=(32,32,1))\n    inp0 = tf.keras.layers.Rescaling(scale=1.\/255)(inp)\n    inp0 = tf.keras.layers.Conv2D(8,1)(inp)\n    inp0 = tf.keras.layers.BatchNormalization()(inp0)\n    inp0 = tf.keras.layers.ReLU()(inp0)\n\n    # Dense1: Conv(3x3x32 + 2s)\n    # [inp0] --> inp1\n    # [(32,32,8)] --> (15,15,32)\n    inp0 = inp0\n    inp1 = tf.keras.layers.Conv2D(filters=32,\n                                  kernel_size=3,\n                                  strides=2,\n                                  kernel_initializer='he_normal')(inp0)\n    inp1 = tf.keras.layers.BatchNormalization()(inp1)\n    inp1 = tf.keras.layers.ReLU()(inp1)\n    inp1 = tf.keras.layers.Dropout(rm_prob)(inp1)\n\n    # Dense2: Conv(3x3x64 + 2s)\n    # [inp0,inp1] --> inp2\n    # (15,15,32+8) --> (7,7,64)\n    inp0 = tf.keras.layers.AveragePooling2D(3,2)(inp0)\n    inp1 = tf.keras.layers.Concatenate()([inp1, inp0])\n    inp2 = tf.keras.layers.Conv2D(filters=64,\n                                  kernel_size=3,\n                                  strides=2,\n                                  kernel_initializer='he_normal')(inp1)\n    inp2 = tf.keras.layers.BatchNormalization()(inp2)\n    inp2 = tf.keras.layers.ReLU()(inp2)\n    inp2 = tf.keras.layers.Dropout(rm_prob)(inp2)\n\n    # Dense3: Conv(3x3x128 + 2s)\n    # [inp0,inp1,inp2] --> inp3\n    # (7,7,64+32+8) --> (3,3,128)\n    inp1 = tf.keras.layers.AveragePooling2D(3,2)(inp1)\n    inp2 = tf.keras.layers.Concatenate()([inp2, inp1])\n    inp3 = tf.keras.layers.Conv2D(filters=128,\n                                  kernel_size=3,\n                                  strides=2,\n                                  kernel_initializer='he_normal')(inp2)\n    inp3 = tf.keras.layers.BatchNormalization()(inp3)\n    inp3 = tf.keras.layers.ReLU()(inp3)\n    inp3 = tf.keras.layers.Dropout(rm_prob)(inp3)\n\n    # Dense4: Conv(1x1x512 + 1s)\n    # [inp0,inp1,inp2,inp3] --> inp4\n    # (3,3,128+64+32+8) --> (3,3,512)\n    inp2 = tf.keras.layers.AveragePooling2D(3,2)(inp2)\n    inp3 = tf.keras.layers.Concatenate()([inp3, inp2])\n    inp4 = tf.keras.layers.Conv2D(512, 1)(inp3)\n    inp4 = tf.keras.layers.BatchNormalization()(inp4)\n    inp4 = tf.keras.layers.ReLU()(inp4)\n    inp4 = tf.keras.layers.Dropout(rm_prob)(inp4)\n\n    # Output\n    # (m,512) --> (m,46)\n    out = tf.keras.layers.GlobalAveragePooling2D()(inp4)\n    out = tf.keras.layers.Dense(256)(out)\n    out = tf.keras.layers.BatchNormalization()(out)\n    out = tf.keras.layers.ReLU()(out)\n    out = tf.keras.layers.Dropout(rm_prob)(out)\n    out = tf.keras.layers.Dense(num_classes, activation='softmax')(out)\n\n    return tf.keras.Model(inputs=inp, outputs=out)\n\n\nDenseNet_micro = DenseNet_micro(len(class_names), 0.14)\nDenseNet_micro.summary()","f089d312":"tf.keras.utils.plot_model(DenseNet_micro, show_shapes=True)","4e5109e7":"DenseNet_micro.compile(optimizer=tf.keras.optimizers.Adam(7e-5),\n                      loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n                      metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])","88b5dbf5":"train = ds_train.cache().prefetch(tf.data.AUTOTUNE)\nval  = ds_val.cache().prefetch(tf.data.AUTOTUNE)","1c71e949":"from datetime import datetime\ncheckpoint_dir = \".\/checkpoints\"\ncheckpoint_filepath = checkpoint_dir + \"\/cp-eph-{epoch:04d}.ckpt\"\nlogs_dir = \".\/logs\/fit\/\" + datetime.now().strftime(\"%Y-%m-%d_%H:%M:%S\")","2af6e6ef":"prev_epoch=0\nlatest = tf.train.latest_checkpoint(checkpoint_dir)\nif latest:\n    DenseNet_micro.load_weights(latest)\n    prev_epoch = int(latest[-9:-5])\n\nExpDecay_cbk = tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', factor=(1 - 1\/2.7318), patience=5)\nLrScheduler_cbk = tf.keras.callbacks.LearningRateScheduler(lambda (ep, lr): lr\/2 if lr%30 == 0 else (lr*tf.math.exp(-0.1) if ep>300 else lr))\nCheckpoint_cbk = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_filepath, save_weights_only=True, monitor='loss')\nEarlyStopping_cbk = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\nTensorBoard_cbk = tf.keras.callbacks.TensorBoard(log_dir=logs_dir, histogram_freq=1)\n\nHistory = DenseNet_micro.fit(train, \n                             epochs=250,\n                             callbacks=[ExpDecay_cbk, LrScheduler_cbk, Checkpoint_cbk, EarlyStopping_cbk, TensorBoard_cbk],\n                             validation_data=val,\n                             initial_epoch=prev_epoch)","5496e785":"#epoch 63\nDenseNet_micro.evaluate(ds_val)","2887ec44":"DenseNet_micro.save('.\/model.h5')","c348f750":"test_list = tf.io.gfile.listdir('..\/input\/devnagri-script-classification\/Data\/Test')\n\nimgs=[]\nfor f in test_list:\n    img = tf.keras.preprocessing.image.load_img('..\/input\/devnagri-script-classification\/Data\/Test\/'+f, color_mode=\"grayscale\")\n    img = tf.keras.preprocessing.image.img_to_array(img)\n    imgs.append(img)","749c1539":"import numpy as np\n\npred = DenseNet_micro.predict(tf.convert_to_tensor(imgs))\npred = np.argmax(pred, axis=1)\npred = np.take(class_names, pred)","80ec5db2":"import pandas as pd\n\nsubmission = pd.DataFrame({'id':test_list, 'category':pred})\nsubmission.to_csv('submission.csv', index=False)\nsubmission","b7380f8e":"# Let's Train","5002a4b0":"# Approach-1 (DenseNet)","3a7b61d2":"# Dataset Pipeline","5df9e938":"# Data Augmentation","bf761e07":"# Visualize Data"}}