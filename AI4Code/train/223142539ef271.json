{"cell_type":{"3a1b507f":"code","348724cc":"code","d5c4ea01":"code","49476323":"code","5ac35d51":"code","f652c6e2":"code","3948685b":"code","18704582":"code","75266b3b":"code","23bdaa87":"code","4757290b":"code","9447dac8":"code","a29c99a9":"code","4f362da3":"code","e137597b":"code","7755b631":"code","74abc0be":"code","1d8b01c2":"code","ef6d178d":"code","22fdfc3a":"code","9ba02adb":"code","6dc6ba64":"code","16792c9b":"code","cb534e88":"code","f1f7e359":"code","e4f35c47":"code","b3678ba1":"code","db8d705a":"code","651f4cdd":"code","50bd1d3a":"code","38df20d4":"code","16d98fcf":"code","e744f617":"code","10767d6b":"code","717e44aa":"code","3f6f438e":"code","fa6dc5fa":"code","cc1a00a1":"code","fb169f39":"code","aabec9e1":"code","1c4d222e":"code","032e3a84":"code","0f57e3e6":"code","0b0f0dbb":"code","bedf53bb":"code","0b8b9c0c":"code","d6aa8458":"code","6f1ce79f":"code","54ebe731":"code","174e576e":"code","f34069bb":"code","7563290b":"code","0f25dd3f":"code","b1c44707":"code","512bdd6c":"code","2a60662b":"markdown","b6806428":"markdown","6888c2af":"markdown","7bbe45af":"markdown","d5103617":"markdown","b02b7f36":"markdown","2ad56372":"markdown","b2f67fa5":"markdown","e19f3115":"markdown","850c3d3b":"markdown","8e47e950":"markdown","30111f17":"markdown"},"source":{"3a1b507f":"import tensorflow as tf\n\nprint(tf.__version__)","348724cc":"hello = tf.constant(name='hello_', value='Hello world!!!')\nhello2 = tf.constant(value='Hello world 2!!! ')\n\nwith tf.Session() as sess:\n    print (sess.run(hello))","d5c4ea01":"a = tf.constant(34)\nb= tf.constant(55)\nc = a+b","49476323":"print(c)\n\nwith tf.Session() as sess:\n    print(sess.run(c))","5ac35d51":"mat = tf.constant([[3,6], [8,5], [1,4]])\nvec = tf.constant([[3], [5]])","f652c6e2":"print(mat)","3948685b":"print(mat.shape)","18704582":"print(mat.dtype)","75266b3b":"out = tf.matmul(mat,vec)","23bdaa87":"print(out)","4757290b":"print(out.op)","9447dac8":"with tf.Session() as sess:\n    print(sess.run(out))","a29c99a9":"a=tf.constant(name='op', value=500)","4f362da3":"print(a)","e137597b":"a=tf.constant(name='op', value=1000)","7755b631":"print(tf.get_default_graph())","74abc0be":"graph = tf.get_default_graph()","1d8b01c2":"b=graph.get_tensor_by_name('op:0')","ef6d178d":"with tf.Session() as sess:\n    print(sess.run(b))","22fdfc3a":"for op in graph.get_operations():\n    print(op)","9ba02adb":"aa = tf.constant(43.45)\nbb= tf.constant(23.67)\ncc= aa + bb","6dc6ba64":"with tf.Session() as sess:\n    print (cc.eval())","16792c9b":"with tf.Session() as sess:\n    print (sess.run([cc,aa,bb]))","cb534e88":"v_a = tf.constant(5)\nv_b = tf.placeholder(tf.float32)","f1f7e359":"v_c = tf.Variable(5)","e4f35c47":"with tf.Session() as sess:\n    sess.run(v_c.initializer)\n    print(sess.run(v_c))","b3678ba1":"var1 = tf.get_variable(name='myvar1', shape=(), dtype=tf.float32, initializer=tf.zeros_initializer())\nvar2 = tf.get_variable(name='myvar2', shape=(), dtype=tf.float32, initializer=tf.ones_initializer())\nvar3 = tf.get_variable(name='myvar3', shape=(), dtype=tf.float32, initializer=tf.random_uniform_initializer())\n","db8d705a":"with tf.Session() as sess:\n    for i in range(10):\n        sess.run(var1.initializer)\n        var2.initializer.run()\n        var3.initializer.run()\n        print(sess.run([var1, var2, var3]))\n    ","651f4cdd":"c_a = tf.constant(123.0)\nop1 = var1.assign(3)\nop2 = var2.assign(var2+42)\nop3 = var3.assign(c_a+var3)\n","50bd1d3a":"with tf.Session() as sess:\n    sess.run(var1.initializer)\n    var2.initializer.run()\n    var3.initializer.run()\n    for i in range(10):\n        sess.run(op1)\n        sess.run(op2)\n        sess.run(op3)\n        print(sess.run([var1, var2, var3]))\n    ","38df20d4":"def func(x, y):\n    return x*x + y*y","16d98fcf":"x0, y0 = 2, 3\nimport numpy as np","e744f617":"for angle in np.linspace(0, 2*np.pi, 100):\n    x, y = x0 + 0.1* np.cos(angle), y0 + 0.1*np.sin(angle)\n    diff = func(x, y) - func(x0, y0)\n    print('angle: ', angle, 'diff', diff)","10767d6b":"np.tan(0.9519977738150889)","717e44aa":"np.arctan(6\/4)","3f6f438e":"g_x = tf.placeholder(tf.float32)\ng_y = tf.placeholder(tf.float32)\n","fa6dc5fa":"fxy = g_x*g_x + g_y*g_y","cc1a00a1":"grad = tf.gradients(fxy, [g_x, g_y])","fb169f39":"with tf.Session() as sess:\n    print(sess.run(grad, feed_dict={g_x:2, g_y:3}))","aabec9e1":"pts = [[2, 14], [3,12], [1,11], [3,15], [5,14], [4,12], [5,15], [2,11]]","1c4d222e":"import numpy as np\nimport matplotlib.pyplot as plt","032e3a84":"pts = np.array(pts)\nplt.scatter(pts[:,0], pts[:,1]) #all rows and column 0 .....","0f57e3e6":"grid = [[m,c] for m in range(15) for c in range(15)]","0b0f0dbb":"grid","bedf53bb":"def get_loss(pts, m, c):\n    loss = 0\n    for pt in pts:\n        diff = pt[1] - (m*pt[0] + c)\n        loss += (diff) * (diff)\n    return loss    \n\nfor (m,c) in grid:\n    print('loss: ', get_loss(pts,m,c), ', m: ', m, ', c: ', c)","0b8b9c0c":"dummy_x = np.random.random(1000)","d6aa8458":"#y = 5x +3, m=5   c=3\ndummy_y = 5 * dummy_x + 3+ 0.1*np.random.randn(1000)","6f1ce79f":"plt.scatter(dummy_x, dummy_y, s=0.1)","54ebe731":"r_x = tf.placeholder(shape=(1000,), dtype=tf.float32)\nr_y = tf.placeholder(shape=(1000,), dtype=tf.float32)\nm= tf.get_variable(name='slope',dtype=tf.float32,shape=(),initializer=tf.ones_initializer())\nc= tf.get_variable(name='intercept',dtype=tf.float32,shape=(),initializer=tf.ones_initializer())\n","174e576e":"#objective function\nyest = m*r_x+c\nloss = tf.losses.mean_squared_error(r_y,yest)","f34069bb":"optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)","7563290b":"with tf.Session() as sess:\n    init = tf.global_variables_initializer()\n    init.run()\n    for e in range(100):\n        _, val_loss = sess.run([optimizer, loss], feed_dict={r_x:dummy_x, r_y:dummy_y})\n        print('loss: ', val_loss, ', m: ', m.eval(), ', c: ', c.eval())","0f25dd3f":"writer = tf.summary.FileWriter(logdir='log', graph=tf.get_default_graph())","b1c44707":"abc = tf.constant(3)\nxyz = tf.Variable(5)\nprint('names ', abc.name, xyz.name)","512bdd6c":"with tf.variable_scope('myscope'):\n    abc = tf.constant(3)\n    xyz = tf.Variable(5)\nprint('names ', abc.name, xyz.name)","2a60662b":"**Variable scoping**","b6806428":"**Calculating gradient in Tensorflow**","6888c2af":"**Saving graph for Tensorboard**","7bbe45af":"**Executing tensors**","d5103617":"If having placeholders, we have to provide them as feeddict","b02b7f36":"**Linear Regression in Tensorflow**","2ad56372":"**Matrix multiplication**","b2f67fa5":"**Gradients**","e19f3115":"**Graphs**","850c3d3b":"**Fitting Line to points**","8e47e950":"Objective is to find angle where the change in function is maximum","30111f17":"**Variables**"}}