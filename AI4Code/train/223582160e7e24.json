{"cell_type":{"23b1b3e4":"code","9676aa61":"code","f4cdba26":"code","f0ff4441":"code","b5638b7e":"code","b033c50d":"code","14f05284":"code","3023bc1b":"code","59ddedec":"code","25b09405":"code","87b259c6":"code","aea1b81d":"code","28b1d188":"code","601356cb":"code","691cc63c":"code","3836d5f7":"code","75462c40":"code","ef46fd9f":"code","aa9fb789":"code","4da1b79a":"code","873354b9":"code","dbe5e43b":"code","8f4dfb13":"code","484c035d":"code","36fda2fd":"code","208583d1":"code","32ba0e8e":"code","adf8c074":"code","0f13e09e":"code","b139b9e3":"code","a6e3d3b4":"code","22a32230":"code","8d8bc51b":"code","8754442f":"code","a8412ca0":"code","de0a481a":"code","251b18cb":"code","f3b0e569":"code","563ad227":"code","ca369735":"code","2036e04a":"code","98e7cc73":"code","4fe65183":"code","7a786f6e":"markdown","6a8afc96":"markdown","324087ff":"markdown","1f681c4a":"markdown","a77c69f3":"markdown","eecc2058":"markdown","20e968fb":"markdown","199db3ce":"markdown","1eafcdee":"markdown","a4d6a538":"markdown","ee0608e1":"markdown"},"source":{"23b1b3e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9676aa61":"import matplotlib.pyplot as plt \nimport seaborn as sns ","f4cdba26":"df =pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv\")","f0ff4441":"df.head()","b5638b7e":"df.describe()","b033c50d":"df.isnull().sum()","14f05284":"df.dropna(inplace=True)\ndf.isnull().sum()[-1] #-1 t to access the last element of the returend pandas series \"win place percent\" ","3023bc1b":"df.columns","59ddedec":"df['hitnokill']=df['DBNOs']+df['assists']\n","25b09405":"df['total-distnace']=df['swimDistance']+df['walkDistance']+df['rideDistance']\n","87b259c6":"df['recovery']=df['boosts']+df['heals']","aea1b81d":"corr=df.corr()\nplt.subplots(figsize=(20, 11))\nsns.heatmap(corr,annot =True)","28b1d188":"df.drop(['recovery','hitnokill'],axis=1,inplace=True)","601356cb":"df.drop(['Id','groupId','matchId','rankPoints','roadKills','vehicleDestroys'],axis=1,inplace=True)","691cc63c":"df.info()","3836d5f7":"plt.figure(figsize=(22,10))\nsns.distplot(df.assists,bins=30,kde=False)\nplt.show()","75462c40":"df.assists.value_counts()","ef46fd9f":"plt.subplots(figsize=(15,9))\nsns.scatterplot(df['winPlacePerc'],df['winPoints'])","aa9fb789":"plt.subplots(figsize=(15,9))\nsns.scatterplot(df['winPlacePerc'],df['walkDistance'])","4da1b79a":"df.matchType.value_counts().plot(kind='bar',figsize=(10,5))","873354b9":"X=df.drop(['winPlacePerc'],axis=1)\ny=df['winPlacePerc']","dbe5e43b":"from sklearn.feature_selection import f_regression\nfrom sklearn.feature_selection import SelectKBest\n","8f4dfb13":"X.drop('matchType',axis =1 ,inplace =True)","484c035d":"best_feature = SelectKBest(score_func=f_regression,k='all')\nfit = best_feature.fit(X,y)","36fda2fd":"dfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Feature','Score']\nfeatureScores = featureScores.sort_values(by='Score',ascending=False).reset_index(drop=True)\n\nfeatureScores","208583d1":"X.columns","32ba0e8e":"X= X[featureScores.Feature[:15].values]","adf8c074":"from sklearn.preprocessing import StandardScaler\ncols = X.columns\nscaler = StandardScaler()\nX=scaler.fit_transform(X)\nX=pd.DataFrame(X,columns=cols)","0f13e09e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10,random_state=42)\nfrom sklearn.model_selection import cross_val_score","b139b9e3":"from sklearn.linear_model import LinearRegression\n \nreg = LinearRegression()\nmodel = cross_val_score(reg,X_train,y_train,cv=3,scoring='neg_mean_squared_error')\n-model","a6e3d3b4":"test=pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv\")","22a32230":"testcp=test.copy()","8d8bc51b":"testcp['total-distnace']=test['swimDistance']+testcp['walkDistance']+testcp['rideDistance']\n","8754442f":"testcp.columns","a8412ca0":"X.columns","de0a481a":"testcp=testcp[X.columns]","251b18cb":"testcp=scaler.fit_transform(testcp)\ntestcp=pd.DataFrame(testcp,columns=cols)","f3b0e569":"reg.fit(X_train,y_train)","563ad227":"predictions =reg.predict(testcp)","ca369735":"sub=pd.read_csv(\"\/kaggle\/input\/pubg-finish-placement-prediction\/sample_submission_V2.csv\")\nsub.head()","2036e04a":"sub.winPlacePerc=predictions","98e7cc73":"sub.head()","4fe65183":"sub.to_csv('submission.csv',index=False)\n","7a786f6e":"DBNOs - Number of enemy players knocked.\nassists - Number of enemy players this player damaged that were killed by teammates. \nso we can build a new feature = DBONS + assist represents the total number of enemy players this player hit but did not kill \"hitnokill' feature ","6a8afc96":"# feature selection ","324087ff":"**as shown from the previous output the data only one missing value so i will drop i**t","1f681c4a":"# **Building new features** ","a77c69f3":"* ![](http:\/\/)DATA DESCRIPTION:\n* DBNOs - Number of enemy players knocked.\n* assists - Number of enemy players this player damaged that were killed by teammates.\n* boosts - Number of boost items used.\n* damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n* headshotKills - Number of enemy players killed with headshots.\n* heals - Number of healing items used.\n* Id - Player\u2019s Id\n* killPlace - Ranking in match of number of enemy players killed.\n* killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* killStreaks - Max number of enemy players killed in a short amount of time.\n* kills - Number of enemy players killed.\n* longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* matchDuration - Duration of match in seconds.\n* matchId - ID to identify match. There are no matches that are in both the training and testing set.\n* matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* revives - Number of times this player revived teammates.\n* rideDistance - Total distance traveled in vehicles measured in meters.\n* roadKills - Number of kills while in a vehicle.\n* swimDistance - Total distance traveled by swimming measured in meters.\n* teamKills - Number of times this player killed a teammate.\n* vehicleDestroys - Number of vehicles destroyed.\n* walkDistance - Total distance traveled on foot measured in meters.\n* weaponsAcquired - Number of weapons picked up.\n* winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* numGroups - Number of groups we have data for in the match.\n* maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","eecc2058":"**** the most played game type is \"squad fpp \"\n ","20e968fb":"# **importing data**","199db3ce":"As showns from heatmap we crated some useful feature \n* 1-hitnokill .35 colleration with the target (assits .3 and DBNOS .28).\n* 2-total distance .68 with the tagert (swimdistance .15, walkdistance .81, ride distance.34) ===> i think this new feature is not vey useful as the colleration between walk distace and target is higher...my be i would to try to make a new feature from swim and ride distance.\n* 3- recovery colleration with targrt value is .58 (boosts .63 and  heals .43)","1eafcdee":"it is time to check if our new features is useful or not ...so i will check the colleration ","a4d6a538":"* DBNOs - Number of enemy players knocked.\n* assists - Number of enemy players this player damaged that were killed by teammates.\n* boosts - Number of boost items used.\n* damageDealt - Total damage dealt. Note: Self inflicted damage is subtracted.\n* headshotKills - Number of enemy players killed with headshots.\n* heals - Number of healing items used.\n* Id - Player\u2019s Id\n* killPlace - Ranking in match of number of enemy players killed.\n* killPoints - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n* killStreaks - Max number of enemy players killed in a short amount of time.\n* kills - Number of enemy players killed.\n* longestKill - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n* matchDuration - Duration of match in seconds.\n* matchId - ID to identify match. There are no matches that are in both the training and testing set.\n* matchType - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.\n* rankPoints - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n* revives - Number of times this player revived teammates.\n* rideDistance - Total distance traveled in vehicles measured in meters.\n* roadKills - Number of kills while in a vehicle.\n* swimDistance - Total distance traveled by swimming measured in meters.\n* teamKills - Number of times this player killed a teammate.\n* vehicleDestroys - Number of vehicles destroyed.\n* walkDistance - Total distance traveled on foot measured in meters.\n* weaponsAcquired - Number of weapons picked up.\n* winPoints - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n* groupId - ID to identify a group within a match. If the same group of players plays in different matches, they will have a different groupId each time.\n* numGroups - Number of groups we have data for in the match.\n* maxPlace - Worst placement we have data for in the match. This may not match with numGroups, as sometimes the data skips over placements.\n* winPlacePerc - The target of prediction. This is a percentile winning placement, where 1 corresponds to 1st place, and 0 corresponds to last place in the match. It is calculated off of maxPlace, not numGroups, so it is possible to have missing chunks in a match.","ee0608e1":"some values of assists are not shown on the dist plot as it is very small "}}