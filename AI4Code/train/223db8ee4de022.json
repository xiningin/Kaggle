{"cell_type":{"7c9be5ee":"code","467e8b77":"code","d06af4e3":"code","8abef030":"code","bef083c5":"code","c488c874":"code","c94bbae0":"code","2af7848d":"code","b62f3d94":"code","0461633c":"code","648a3578":"code","b154c936":"code","f43ec1d6":"code","b1514c58":"code","699e4972":"code","f9f30311":"code","24f9db15":"code","3f039e6c":"code","c8f1b0f8":"code","088f92c9":"code","6d17f943":"code","b9c0531b":"code","5f6cbbef":"code","8b20a061":"code","aa8c6060":"code","a26f90e0":"code","70393ae5":"code","1f91ea8c":"code","5a596c1e":"code","eeac4019":"code","b37be830":"code","21593c0e":"markdown"},"source":{"7c9be5ee":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","467e8b77":"\ndf = pd.read_csv('..\/input\/coronavirus-2019ncov\/covid-19-all.csv')\n\n\n#df = pd.read_csv('\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', index_col='Date', parse_dates=True)\n\nnewdf= df.groupby(['Date','Country\/Region'])['Confirmed','Deaths','Recovered'].sum().reset_index()\nnewdf","d06af4e3":"#Define our intented countries:Italy, Iran and UK\n\ndf_italy = newdf[:][newdf['Country\/Region']=='Italy']\ndf_iran = newdf[:][newdf['Country\/Region']=='Iran']\ndf_uk = newdf[:][newdf['Country\/Region']=='United Kingdom']\n\n","8abef030":"#Define growth rate and death rate for Italy, Iran and UK\n\n\ndf_italy[\"Current Case\"]=df_italy[\"Confirmed\"]-df_italy[\"Deaths\"]-df_italy[\"Recovered\"]\ndf_iran[\"Current Case\"] =df_iran[\"Confirmed\"] -df_iran[\"Deaths\"] -df_iran[\"Recovered\"]\ndf_uk[\"Current Case\"]=df_uk[\"Confirmed\"]-df_uk[\"Deaths\"]-df_uk[\"Recovered\"]\n\ndf_italy[\"growth\"]=df_italy[\"Current Case\"]\/df_italy[\"Current Case\"].shift(+1)\ndf_iran[\"growth\"]=df_iran[\"Current Case\"]\/df_iran[\"Current Case\"].shift(+1)\ndf_uk[\"growth\"]=df_uk[\"Current Case\"]\/df_uk[\"Current Case\"].shift(+1)\n\ndf_italy[\"death rate\"]=df_italy[\"Deaths\"]\/df_italy[\"Confirmed\"]\ndf_iran[\"death rate\"]=df_iran[\"Deaths\"]\/df_iran[\"Confirmed\"]\ndf_uk[\"death rate\"]=df_uk[\"Deaths\"]\/df_uk[\"Confirmed\"]\n\nitaly_growth = df_italy[[\"Date\",\"growth\"]]\niran_growth = df_iran[[\"Date\",\"growth\"]]\nuk_growth = df_uk[[\"Date\",\"growth\"]]\n\nitaly_death = df_italy[[\"Date\",\"death rate\"]]\niran_death = df_iran[[\"Date\",\"death rate\"]]\nuk_death = df_uk[[\"Date\",\"death rate\"]]","bef083c5":"#plotting the diagram for growth rate\n#Italy vs Iran\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\nax=italy_growth.plot(kind='line',x='Date',y='growth',color='red')\ny=iran_growth.plot(kind='line',x='Date',y='growth',color='orange',ax=ax)\nplt.legend(('Italy', 'Iran',),    loc='upper left')\nplt.ylabel(\"Growth Rate\")\nplt.xlabel(\"Date\")\nplt.title(\"Growth Rate of Italy vs Iran\")\nplt.show()","c488c874":"#plotting the diagram for growth rate\n#Italy vs UK\nax=italy_growth.plot(kind='line',x='Date',y='growth',color='red')\ny=uk_growth.plot(kind='line',x='Date',y='growth',color='blue',ax=ax)\nplt.legend(('Italy', 'UK'),    loc='upper left')\nplt.ylabel(\"Growth Rate\")\nplt.xlabel(\"Date\")\nplt.title(\"Growth Rate of Italy vs UK\")\nplt.show()\ny.figure.savefig('growthukItaly.pdf')","c94bbae0":"#plotting the diagram for death rate\n#Iran vs Italy \nax = plt.gca()\nitaly_death.plot(kind='line',x='Date',y='death rate',color='red',ax=ax)\ny=iran_death.plot(kind='line',x='Date',y='death rate',color='orange',ax=ax)\nplt.legend(('Italy', 'Iran'),    loc='upper left')\nplt.ylabel(\"Death Rate\")\nplt.xlabel(\"Date\")\nplt.title(\"Death Rate of Italy vs Iran\")\ny.figure.savefig('deathiranItaly.pdf')\nplt.show()","2af7848d":"#plotting the diagram for death rate\n#UK vs Italy \nax=italy_death.plot(kind='line',x='Date',y='death rate',color='red')\ny=uk_death.plot(kind='line',x='Date',y='death rate',color='blue',ax=ax)\nplt.legend(('Italy', 'UK'),    loc='upper left')\nplt.ylabel(\"Death Rate\")\nplt.xlabel(\"Date\")\nplt.title(\"Death Rate of Italy and UK\")\ny.figure.savefig('deathukItaly.pdf')\n\nplt.show()","b62f3d94":"#Preparing the data for Regression\n#Italy\ndf_italy= df_italy.dropna()\ndf_italy['Day Number'] = range(1,df_italy.shape[0]+1)\n#df_italy\nX = df_italy.iloc[:, 8].values\nX =X.reshape(-1,1)\ny = df_italy.iloc[:, 6:7].values\ny =y.reshape(-1,1)","0461633c":"# Fitting Linear Regression to the dataset \n#Italy\n\nfrom sklearn.linear_model import LinearRegression \nlin = LinearRegression() \n  \nlin.fit(X, y) ","648a3578":"#calculating RMSE for linear regression\n#Italy\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\ny_prediction = lin.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","b154c936":"# Fitting Polynomial Regression to the dataset \n#Italy\n\nfrom sklearn.preprocessing import PolynomialFeatures \n  \npoly = PolynomialFeatures(degree = 2) \nX_poly = poly.fit_transform(X) \n  \npoly.fit(X_poly, y,) \nlin2 = LinearRegression() \nlin2.fit(X_poly, y)","f43ec1d6":"#calculating RMSE for polynomial regression\n#Italy\n\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.33)\ny_prediction = lin2.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","b1514c58":"# Visualising the Linear Regression results\n#Italy\n\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax1 = fig.add_subplot(111)\nplt.scatter(X, y, color = 'blue') \nplt.plot(X, lin.predict(X), color = 'red') \nplt.title('Linear Regression of Italy') \nplt.xlabel('Day Number') \nplt.ylabel('Growth Rate') \nplt.show() \nax1.figure.savefig('linregitaly.pdf')","699e4972":"# Visualising the Polynomial Regression results \n#Italy\nplt.scatter(X, y, color = 'blue') \n  \nplt.plot(X, lin2.predict(poly.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression') \nplt.xlabel('Days') \nplt.ylabel('Growth Rate') \n  \nplt.show()","f9f30311":"#Prediction for the next 10 days\n#Italy\ndf_italy_prediction = df_italy[['growth','Day Number']]\n\nfor i in range (58,68):\n    df_italy_prediction = df_italy_prediction.append({'Day Number': i,'growth': float(lin.predict(np.array([i]).reshape(-1,1)))\n}, ignore_index=True)","24f9db15":"# Visualising the predictoin\n#Italy\ndff=df_italy[['growth','Day Number']]\ndfff=df_italy_prediction\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax = plt.gca()\ndff.plot(kind='line',x='Day Number',y='growth',color='red',ax=ax)\ndfff.plot(linestyle='dotted',x='Day Number',y='growth',color='red',ax=ax)\nplt.legend(('Real', 'Predication'),    loc='upper left')\nplt.xlabel(\"Day Number\")\nplt.ylabel(\"Growth Rate\")\nplt.title(\"Prediction of Growth Rate of Italy\")\nax.figure.savefig('PredItaly.pdf')\nplt.show()","3f039e6c":"#Preparing the data for Regression\n#UK\ndf_uk= df_uk.dropna()\ndf_uk['Day Number'] = range(1,df_uk.shape[0]+1)\n#df_italy\nX = df_uk.iloc[:, 8].values\nX =X.reshape(-1,1)\ny = df_uk.iloc[:, 6:7].values\ny =y.reshape(-1,1)","c8f1b0f8":"# Fitting Linear Regression to the dataset \n#UK\nlin = LinearRegression() \nlin.fit(X, y)\npoly = PolynomialFeatures(degree = 5) \nX_poly = poly.fit_transform(X) \n  \npoly.fit(X_poly, y,) \nlin2 = LinearRegression() \nlin2.fit(X_poly, y) ","088f92c9":"# Visualising the Linear Regression results\n#UK\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax1 = fig.add_subplot(111)\n\nplt.scatter(X, y, color = 'blue') \nplt.plot(X, lin.predict(X), color = 'red') \nplt.title('Linear Regression of UK') \nplt.xlabel('Days') \nplt.ylabel('Growth Rate') \n  \nplt.show() ","6d17f943":"#calculating RMSE for linear regression\n#UK\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\ny_prediction = lin.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","b9c0531b":"# Visualising the Polynomial Regression results \n#UK\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax1 = fig.add_subplot(111)\nplt.scatter(X, y, color = 'blue') \n  \nplt.plot(X, lin2.predict(poly.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression of UK') \nplt.xlabel('Days') \nplt.ylabel('Growth Rate') \n  \nplt.show()","5f6cbbef":"#calculating RMSE for polynomial regression\n#UK\n\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.33)\ny_prediction = lin2.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","8b20a061":"#Prediction for the next 10 days\n# Visualising the predictoin\n#UK\ndf_uk_prediction = df_uk[['growth','Day Number']]\n\nfor i in range (57,67):\n    df_uk_prediction = df_uk_prediction.append({'Day Number': i,'growth': float(lin.predict(np.array([i]).reshape(-1,1)))\n}, ignore_index=True)\n    \ndff=df_uk[['growth','Day Number']]\ndfff=df_uk_prediction\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax = plt.gca()\n\ndff.plot(kind='line',x='Day Number',y='growth',color='blue',ax=ax)\ndfff.plot(linestyle='dotted',x='Day Number',y='growth',color='blue',ax=ax)\nplt.legend(('Real', 'Predication'),    loc='upper left')\nplt.ylabel(\"Growth rate\")\nplt.xlabel(\"Day Number\")\nplt.title(\"Prediction of Growth Rate of UK\")\nax.figure.savefig('Preduk.pdf')\nplt.show()","aa8c6060":"#Preparing the data for Regression\n#Iran\ndf_iran= df_iran.drop([728]).dropna()\ndf_iran['Day Number'] = range(1,df_iran.shape[0]+1)\ndf_iran = df_iran.iloc[15:]\n\nX = df_iran.iloc[:, 8].values\nX =X.reshape(-1,1)\ny = df_iran.iloc[:, 6:7].values\ny =y.reshape(-1,1)","a26f90e0":"# Fitting Linear Regression to the dataset \n#Iran\nliniran = LinearRegression() \nliniran.fit(X, y)\npoly = PolynomialFeatures(degree = 2) \nX_poly = poly.fit_transform(X) \n  \npoly.fit(X_poly, y,) \nliniranpoly = LinearRegression() \nliniranpoly.fit(X_poly, y)","70393ae5":"# Visualising the linear Regression results \n#Iran\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax1 = fig.add_subplot(111)\n\nplt.scatter(X, y, color = 'blue') \n  \nplt.plot(X, liniran.predict(X), color = 'red') \nplt.title('Linear Regression of Iran') \nplt.xlabel('Days') \nplt.ylabel('Growth Rate') \n  \nplt.show()","1f91ea8c":"#Calculating RMSE for linear regression\n#Iran\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)\ny_prediction = liniran.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","5a596c1e":"# Visualising the Polynomial Regression results \n#Iran\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax1 = fig.add_subplot(111)\nplt.scatter(X, y, color = 'blue') \n  \nplt.plot(X, liniranpoly.predict(poly.fit_transform(X)), color = 'red') \nplt.title('Polynomial Regression of Iran') \nplt.xlabel('Days') \nplt.ylabel('Growth Rate') \n  \nplt.show()\nax1.figure.savefig('polyregiran.pdf')","eeac4019":"#Calculating RMSE for linear regression\n#Iran\n\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.33)\ny_prediction = liniranpoly.predict(X_test)\nRMSE = sqrt(mean_squared_error(y_test, y_prediction))\nprint(RMSE)","b37be830":"#Prediction for the next 10 days\n# Visualising the predictoin\n#Iran\ndf_iran_prediction = df_iran[['growth','Day Number']]\n\nfor i in range (37,40):\n    df_iran_prediction = df_iran_prediction.append({'Day Number': i,'growth': float(liniran.predict(liniran.predict(np.array([i]).reshape(-1,1))))\n}, ignore_index=True)\n    \ndff=df_iran[['growth','Day Number']]\ndfff=df_iran_prediction\nfig = plt.figure(figsize=(10, 8), dpi=40)\nax = plt.gca()\n\ndff.plot(kind='line',x='Day Number',y='growth',color='orange',ax=ax)\ndfff.plot(linestyle='dotted',x='Day Number',y='growth',color='orange',ax=ax)\nplt.legend(('Real', 'Predication'),    loc='upper left')\nplt.ylabel(\"Growth Rate\")\nplt.xlabel(\"Day Number\")\nplt.title(\"Prediction of Growth Rate of Iran\")\nax.figure.savefig('PredIran.pdf')\nplt.show()","21593c0e":"<p style=\"font-family: Arial; font-size:3.75em;color:purple; font-style:bold\"><br>\nTo Be Quarantined or Not To Be<\/p><br>\n\nOne of main concerns of governments is receiving an immense number of patience in a short time interval. The following methods deals with this concern.\n\n\n1.Closing schools\/universities\/libraries \n\n2.Cancellation mass gathering like concerts, . . . \n\n3.Remote working\n\n4.Quarantine\n\nWe propose the following question regarding the last item:\n\n1.Is quarantine effective to control COVID-19?\n\n2.Can quarantine decrease the growth rate of COVID-19?\n\n3.How the epidemic will progress over time?\n\n\nThis notebook is an attempt to answer with the data the above questions.\nWe have to keep in mind, we suppose that the date is trustable.\n"}}