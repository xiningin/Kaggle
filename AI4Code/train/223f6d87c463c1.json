{"cell_type":{"a745baf9":"code","88b7dfcc":"code","e3292eeb":"code","e35ca9ed":"code","c402432a":"code","5f6162f8":"code","04ebc65c":"code","1a56d282":"code","31ba42f0":"code","ad3a0ec2":"code","72c12db9":"code","2b0c4ffb":"code","17872ea8":"code","74601a61":"code","ef4b3506":"markdown","eaa53bb3":"markdown","7c5c9f10":"markdown","49867792":"markdown","2eb7707c":"markdown","544e0ce3":"markdown"},"source":{"a745baf9":"\"\"\"\nImportation of libraries required\n\"\"\"\n\nimport os\nimport random\nimport tensorflow as tf\nimport plotly.graph_objects as go\nfrom distutils.file_util import copy_file","88b7dfcc":"\"\"\"\nDefinition of image access paths\n\"\"\"\n\n# Path to covid images\ncovidDataPath = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\/'\n\n# Path to normal images\nnormalDataPath = '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal\/'","e3292eeb":"\"\"\"\nCreation of the list of paths to the images\n\"\"\"\n\n# Lists for access paths\nlistCovidPaths = []\nlistNormalPaths = []\n\n# Get covid images files paths\nfor root, directories, files in os.walk(covidDataPath):\n    for name in files:\n        listCovidPaths.append(os.path.join(root, name))\n        \n# Get normal images files paths\nfor root, directories, files in os.walk(normalDataPath):\n    for name in files:\n        listNormalPaths.append(os.path.join(root, name))\n\n# Shuffle lists for random train \/ test\n\nrandom.shuffle(listCovidPaths)\nrandom.shuffle(listNormalPaths)","e35ca9ed":"\"\"\"\nCreation of new folders for image training\n\"\"\"\n\n# main folder\n!mkdir .\/Data\/\n\n# Train data folders\n!mkdir .\/Data\/Train\/\n!mkdir .\/Data\/Train\/Covid\/\n!mkdir .\/Data\/Train\/Normal\/\n\n# Test data folders\n!mkdir .\/Data\/Test\/\n!mkdir .\/Data\/Test\/Covid\/\n!mkdir .\/Data\/Test\/Normal\/\n\n# Paths to covid images folders\npathCovidTrain = '.\/Data\/Train\/Covid\/'\npathCovidTest = '.\/Data\/Test\/Covid\/'\n\n# Paths to normal images folders\npathNormalTrain = '.\/Data\/Train\/Normal\/'\npathNormalTest = '.\/Data\/Test\/Normal\/'","c402432a":"\"\"\"\nMoving files to new folders\n\"\"\"\n\n# Move covid images files to new folders\nfor i in range(3616):\n    if i < 2893:\n        copy_file(listCovidPaths[i], pathCovidTrain)\n    else : \n        copy_file(listCovidPaths[i], pathCovidTest)\n\n# Move normal images files to new folders\nfor i in range(10192):\n    if i < 8154:\n        copy_file(listNormalPaths[i], pathNormalTrain)\n    else:\n        copy_file(listNormalPaths[i], pathNormalTest)","5f6162f8":"\"\"\"\nDefinition of data generators\n\"\"\"\n\n# for train data\ntrainGenerator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/255,\n    rotation_range = 20,\n    zoom_range = 0.2\n)\n\n# for test data\ntestGenerator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/255,    \n)","04ebc65c":"\"\"\"\nBuild data generators\n\"\"\"\n\n# Build for train data\npathTrainDir = '.\/Data\/Train\/'\n\ntrainGeneratorBuild = trainGenerator.flow_from_directory(\n    pathTrainDir,\n    target_size = (200,200),\n    class_mode = 'binary',\n    batch_size = 16    \n)\n\n# Build for test data\npathTestDir = '.\/Data\/Test\/'\n\ntestGeneratorBuild = testGenerator.flow_from_directory(\n    pathTestDir,\n    target_size = (200,200),\n    class_mode = 'binary',\n    batch_size = 16\n)","1a56d282":"'''\nDefinition of the Keras model\n'''\n\n# Use InceptionResNetV2 Keras model\nengine = tf.keras.applications.InceptionResNetV2(\n    # Don't include top\n    include_top = False,\n    # Use Imagenet weights\n    weights = 'imagenet',\n    # Define input shape to 224x224x3\n    input_shape = (224,224,3),\n    # Set classifier activation to sigmoid\n    classifier_activation = 'sigmoid'\n)","31ba42f0":"'''\nDefinition of the Keras model outputs\n'''\n\nx = tf.keras.layers.GlobalAveragePooling2D(name = 'avg_pool')(engine.output)\nout = tf.keras.layers.Dense(1, activation = 'sigmoid', name = 'dense_output')(x)","ad3a0ec2":"\"\"\"\nBuilding Keras model\n\"\"\"\n\nmodel = tf.keras.models.Model(inputs = engine.input, outputs = out)","72c12db9":"\"\"\"\nCompil model\n\"\"\"\n\nmodel.compile(\n    # Set optimizer to Adam(0.001)\n    optimizer = tf.keras.optimizers.Adam(0.001),\n    # Set loss to binary crossentropy\n    loss = 'binary_crossentropy',\n    # Set metrics to accuracy\n    metrics = ['accuracy']\n)","2b0c4ffb":"\"\"\"\nFit Keras model\n\"\"\"\n\nhistory = model.fit_generator(\n    # Use train generator\n    trainGeneratorBuild,\n    # Set epochs to 10\n    epochs = 8,\n    # Set steps per epochs to 300\n    steps_per_epoch = 300,\n    # Set verbose to 1\n    verbose = 1\n)","17872ea8":"\"\"\"\nCreation of a graph representing the loss\n\"\"\"\n\n# Get loss data\nlossG = history.history['loss']\naccuracyG = history.history['accuracy']\nepochs = [i for i in range(len(lossG))]\n\n# Create graph\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x = epochs,\n        y = lossG,\n        name = 'Loss',\n        marker = dict(\n            color = 'rgba(250,50,50,1)'        \n        )\n    )\n)\n\nfig.add_trace(\n    go.Scatter(\n        x = epochs,\n        y = accuracyG,\n        name = 'Accuracy',\n        marker = dict(\n            color = 'rgba(50,250,50,1)'        \n        )\n    )\n)\n\nfig.update_layout(\n    title = 'Model loss',\n    template = 'plotly_white'\n)\n\nfig.update_xaxes(\n    title_text='Epochs'\n)\nfig.update_yaxes(\n    title_text='Loss \/ Accuracy values'\n)\n\nfig.show()","74601a61":"\"\"\"\nChecking the accuracy of the Keras model on the test data\n\"\"\"\n\ntestLoss, testAccuracy = model.evaluate(\n    # Use test generator\n    testGeneratorBuild,\n    # Set verbose to 1\n    verbose = 1\n)\n\n# Print results\nprint('Accuracy of model : ' + str(round(testAccuracy,4)*100) + ' %')\nprint('Loss of model : ' + str(round(testLoss,4)))","ef4b3506":"## 5. Results","eaa53bb3":"## 1. Preprocessing","7c5c9f10":"## 2. Data augmentation","49867792":"## 4. Fit model","2eb7707c":"## 3. Set Keras model","544e0ce3":"# Training of a Keras model (InceptionResNetV2) for Covid-19 X-ray detection\n\n## notebook : \n    - Notebook version : 1.3\n    - Training time (approximately) : 500s\n\n## Data : \n    - Train size : 0.8\n    - Test size : 0.2\n    - Covid train images : 2893\n    - Covid test images : 723\n    - Normal train images : 8154\n    - Normal test images : 2038\n\n## Specification :\n    - model : InceptionResNetV2\n    - Optimizer : Adam(0.001)\n    - Epochs : 8\n    - Step per epochs : 300\n\n## Results : \n    - Accuracy : 94.93\n    - Loss : 0.15\n"}}