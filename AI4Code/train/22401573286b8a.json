{"cell_type":{"5bae4cb0":"code","5595b680":"code","c7c39224":"code","f7111eef":"code","46189e55":"code","f4136efb":"code","2678c8ac":"code","8537916b":"code","68399f47":"code","a629e04d":"code","ef2d3e7f":"code","20c81569":"code","cd4650ca":"code","43f1da27":"code","df839b48":"code","0c0f0990":"markdown","aec2e01e":"markdown","a47eabb5":"markdown","592bab2a":"markdown","649ef27b":"markdown","498d6d2e":"markdown","34ea38b5":"markdown","87f4ac3a":"markdown","bdc76e6d":"markdown","f70e03c2":"markdown","93490477":"markdown","52b2628b":"markdown","057b1e2a":"markdown","f50424e3":"markdown","a2e03ac0":"markdown","444f5d19":"markdown","3b8802f9":"markdown","b1b36b8e":"markdown"},"source":{"5bae4cb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5595b680":"import time\nimport pandas as pd\nimport numpy as np\n\n# import plotting libraries\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n#from pandas.plotting import scatter_matrix\n%matplotlib inline\nplt.style.use(['fivethirtyeight'])\nmpl.rcParams['lines.linewidth'] = 2\nimport seaborn as sns\n#sns.set(style='white', font_scale=.8)\n#sns.set_context('talk')\n\n# import the ML algorithm\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\n\n# pre-processing\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# import libraries for model validation\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\n\n# import libraries for metrics and reporting\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","c7c39224":"# Reading the dataset\nvirus = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate', 'Last Update'])\nvirus.drop('SNo', axis=1, inplace=True)\nvirus.head()","f7111eef":"# Analysing the dataset\nprint(virus.info())","46189e55":"# Plotting the graph\nworldwide_cases_stats = pd.DataFrame(virus.groupby(['Country\/Region']).max()\n                                  ['Confirmed']).rename_axis('Country').reset_index().sort_values('Confirmed', ascending=False)\nax = sns.catplot(x='Confirmed', y='Country', data=worldwide_cases_stats.head(10), kind='bar', ci='sd', height=8)\nax.set_xticklabels(rotation=45)\nplt.title('World scenario')\nplt.show()","f4136efb":"# Plotting the graphs\noutside_china_stats = worldwide_cases_stats[worldwide_cases_stats.Country!='Mainland China'].sort_values('Confirmed', ascending=False)\nsns.catplot(x='Confirmed', y='Country', data=outside_china_stats.head(20), kind='bar', ci='sd', height=8)\nplt.title('World scenario excluding Mainland China')\nplt.show()","2678c8ac":"# Plotting the graphs\nchina_stats = virus[virus['Country\/Region']=='Mainland China']\nprovince_stats = pd.DataFrame(china_stats.groupby(['Province\/State']).max()\n                              [['Confirmed','Recovered','Deaths']]).reset_index().rename_axis()\n\nfig, ax = plt.subplots(figsize=(12,12))\nsns.barplot(y='Province\/State', x='Confirmed', data=province_stats, color='#FFE17B', ax=ax, label='Confirmed')\nsns.barplot(y='Province\/State', x='Recovered', data=province_stats, color='#B7EC1E', alpha=0.7, ax=ax, label='Recovered')\nsns.barplot(y='Province\/State', x='Deaths', data=province_stats, color='#FF5733', alpha=0.9, ax=ax, label='Deaths')\nplt.xlabel('Confirmed\/Recovered\/Deaths')\nplt.title('Mainland China statistics')\nplt.legend()\nplt.show()","8537916b":"# Plotting the graphs\nprovince_stats_exclude_hubei = province_stats[province_stats['Province\/State']!='Hubei'].sort_values(['Confirmed'],\n                                                                                                     ascending=False)\nfig, ax = plt.subplots(figsize=(12,12))\nsns.barplot(y='Province\/State', x='Confirmed', data=province_stats_exclude_hubei, color='#FFE17B', ax=ax, label='Confirmed')\nsns.barplot(y='Province\/State', x='Recovered', data=province_stats_exclude_hubei, color='#B7EC1E',alpha=0.7, ax=ax, label='Recovered')\nsns.barplot(y='Province\/State', x='Deaths', data=province_stats_exclude_hubei, color='#FF5733',alpha=0.9, ax=ax, label='Deaths')\n#ax.set_xlim(0,1000)\nplt.xlabel('Confirmed\/Recovered\/Deaths')\nplt.title('statistics of Mainland China excluding Hubei')\nplt.legend()\nplt.show()","68399f47":"# Pie diagram\nprovince_stats_hubei = province_stats[province_stats['Province\/State']=='Hubei'].sort_values('Confirmed', ascending=False)\nfig, ax = plt.subplots()\nax = plt.pie(np.sum(province_stats_hubei.groupby(['Province\/State']).max()), labels=['Confirmed','Recovered','Deaths'], \n       autopct='%.2f%%', explode=(0,0,1), shadow=True, radius=2.5, colors=['#FFC300','#DAF7A6','#FF7269'])\nplt.legend(loc='lower left', borderaxespad=16, fancybox=True, shadow=True)\nplt.show()","a629e04d":"# Reading the time series datasets\nconfirmed_cases = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nrecovered_cases = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ndeath_cases = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')","ef2d3e7f":"# Making seperate datasets\nconf = [] \nfor i in confirmed_cases.columns[4:]:\n    conf.append(confirmed_cases[i].sum())\nConfirmed_ts = pd.DataFrame(data=conf, index=confirmed_cases.columns[4:], columns=['Confirmed'])\nrecv = []\nfor j in recovered_cases.columns[4:]:\n    recv.append(recovered_cases[j].sum())\nRecovered_ts = pd.DataFrame(data=recv, index=recovered_cases.columns[4:], columns=['Recovered'])\ndead = []\nfor k in death_cases.columns[4:]:\n    dead.append(death_cases[k].sum())\nDeaths_ts = pd.DataFrame(data=dead, index=death_cases.columns[4:], columns=['Deaths'])\n\n# Plotting the curves\nfig, ax = plt.subplots(figsize=(16,6))\npos = list(range(len(Confirmed_ts)))\nax = Confirmed_ts.Confirmed.plot(label='Confirmed', color='orange', marker='o', markersize=5)\nax = Recovered_ts.Recovered.plot(label='Recovered', color='green', marker='o', markersize=5)\nax = Deaths_ts.Deaths.plot(label='Deaths', color='red', marker='o', markersize=5)\nplt.title('Comparison of Confirmed cases, Recovered and Deaths', size=15)\nax.set_xticks([p for p in pos])\nax.set_xticklabels(Confirmed_ts.index, rotation=45, size=15)\nplt.yticks(size=15)\nplt.legend(loc=\"upper left\", ncol=3, fancybox=True, shadow=True, fontsize=15)\nplt.show()","20c81569":"# Seperate dataset for Mainland China\nconfirmed_cases_china = confirmed_cases[confirmed_cases['Country\/Region']=='Mainland China']\nrecovered_cases_china = recovered_cases[recovered_cases['Country\/Region']=='Mainland China']\ndeath_cases_china = death_cases[death_cases['Country\/Region']=='Mainland China']\n\n# Extracting the details\nconf_china = []\nfor i in confirmed_cases_china.columns[4:]:\n    conf_china.append(confirmed_cases_china[i].sum())\nrecv_china = []\nfor j in confirmed_cases_china.columns[4:]:\n    recv_china.append(recovered_cases_china[j].sum())\ndead_china = []\nfor k in confirmed_cases_china.columns[4:]:\n    dead_china.append(death_cases_china[k].sum())\nres = zip(conf_china,recv_china,dead_china)\ncounts_china = pd.DataFrame(data=res, index=confirmed_cases_china.columns[4:], columns=['Confirmed', 'Recovered', 'Deaths']) \n\n# Plotting the curves\nfig, ax = plt.subplots(figsize=(16,6))\npos = list(range(len(counts_china)))\nax = counts_china.Confirmed.plot(label='Confirmed', color='orange', marker='o', markersize=5)\nax = counts_china.Recovered.plot(label='Recovered', color='green', marker='o', markersize=5)\nax = counts_china.Deaths.plot(label='Deaths', color='red', marker='o', markersize=5)\nax.set_xticks([p for p in pos])\nax.set_xticklabels(counts_china.index, rotation=45, fontsize=15)\nplt.yticks(size=12)\nplt.title('Comparison of Confirmed cases, Recovered and Deaths in China', fontsize=15)\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.legend(fancybox=True, ncol=3, fontsize=15, shadow=True)\nplt.show()","cd4650ca":"# seperate dataset for Hubei\nconfirmed_cases_hubei = confirmed_cases_china[confirmed_cases_china['Province\/State']=='Hubei']\nrecovered_cases_hubei = recovered_cases_china[recovered_cases_china['Province\/State']=='Hubei']\ndeath_cases_hubei = death_cases_china[death_cases_china['Province\/State']=='Hubei']\n\n# Extracting the details\nconf_hubei = []\nfor i in confirmed_cases_hubei.columns[4:]:\n    conf_hubei.append(confirmed_cases_hubei[i].sum())\nrecv_hubei = []\nfor j in confirmed_cases_hubei.columns[4:]:\n    recv_hubei.append(recovered_cases_hubei[j].sum())\ndead_hubei = []\nfor k in confirmed_cases_hubei.columns[4:]:\n    dead_hubei.append(death_cases_hubei[k].sum())\nres = zip(conf_hubei,recv_hubei,dead_hubei)\ncounts_hubei = pd.DataFrame(data=res, index=confirmed_cases_hubei.columns[4:], columns=['Confirmed', 'Recovered', 'Deaths'])   \n\n# Plotting\nfig, ax = plt.subplots(figsize=(16,6))\npos = list(range(len(counts_hubei)))\nax = counts_hubei.Confirmed.plot(label='Confirmed', color='orange', marker='o', markersize=5)\nax = counts_hubei.Recovered.plot(label='Recovered', color='green', marker='o', markersize=5)\nax = counts_hubei.Deaths.plot(label='Deaths', color='red', marker='o', markersize=5)\nax.set_xticks([p for p in pos])\nax.set_xticklabels(counts_hubei.index, rotation=45, fontsize=15)\nplt.yticks(size=12)\nplt.title('Comparison of Confirmed cases, Recovered and Deaths in hubei', fontsize=15)\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.legend(fancybox=True, ncol=3, fontsize=15, shadow=True)\nplt.show()","43f1da27":"# Seperate dataset for the rest of the world\nconfirmed_cases_row = confirmed_cases[confirmed_cases['Country\/Region']!='Mainland China']\nrecovered_cases_row = recovered_cases[recovered_cases['Country\/Region']!='Mainland China']\ndeath_cases_row = death_cases[death_cases['Country\/Region']!='Mainland China']\n\n# Extracting the details\nconf_row = []\nfor i in confirmed_cases_row.columns[4:]:\n    conf_row.append(confirmed_cases_row[i].sum())\nrecv_row = []\nfor j in confirmed_cases_row.columns[4:]:\n    recv_row.append(recovered_cases_row[j].sum())\ndead_row = []\nfor k in confirmed_cases_row.columns[4:]:\n    dead_row.append(death_cases_row[k].sum())\nres = zip(conf_row,recv_row,dead_row)\ncounts_row = pd.DataFrame(data=res, index=confirmed_cases_row.columns[4:], columns=['Confirmed', 'Recovered', 'Deaths'])   \n\n# Plotting the curves\nfig, ax = plt.subplots(figsize=(16,6))\npos = list(range(len(counts_row)))\nax = counts_row.Confirmed.plot(label='Confirmed', color='orange', marker='o', markersize=5)\nax = counts_row.Recovered.plot(label='Recovered', color='green', marker='o', markersize=5)\nax = counts_row.Deaths.plot(label='Deaths', color='red', marker='o', markersize=5)\nax.set_xticks([p for p in pos])\nax.set_xticklabels(counts_row.index, rotation=45, fontsize=15)\nplt.yticks(size=12)\nplt.title('Comparison of Confirmed cases, Recovered and Deaths in Rest of the World', fontsize=15)\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.legend(fancybox=True, ncol=3, fontsize=15, shadow=True)\nplt.show()","df839b48":"# Plotting the curves\nfig, ax = plt.subplots(figsize=(16,6))\npos = list(range(len(counts_china)))\nax = counts_china.Confirmed.plot(label='Mainland China', color='#C70039', marker='o', markersize=5)\nax = counts_hubei.Confirmed.plot(label='Hubei', color='#FF5733', marker='o', markersize=5)\nax = counts_row.Confirmed.plot(label='Rest of the world', color='#FFC300', marker='o', markersize=5)\nax.set_xticks([p for p in pos])\nax.set_xticklabels(counts_china.index, rotation=45, fontsize=15)\nplt.yticks(size=15)\nplt.title('Comparison of Confirmed cases between Hubei, Mainland China and the rest of the World', fontsize=15)\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.legend(loc='upper left', fontsize=15, fancybox=True, ncol=3, shadow=True)\nplt.show()","0c0f0990":"### Study of relationship of Confirmed, Recovered and Death in chinese province 'Hubei' alone","aec2e01e":"### Comparison of Virus contraction in Hubei, Mainland China and the rest of the world","a47eabb5":"\n### Reading the Dataset","592bab2a":"### Importing the libraries","649ef27b":"Since Hubei has reported the highest number of cases the graph actually is not showing much of the info about other provinces. So lets keep Hubei aside for a while and lets see other provinces","498d6d2e":"### Looking at the statistics of Mainland China excluding Hubei","34ea38b5":"### Study of Relationship between Confirmed, Recovered and Death in rest of the world","87f4ac3a":"### Importing the Datasets","bdc76e6d":"### Mainland China statistics","f70e03c2":"### Visualizing the statistics of Hubei","93490477":" ### Plotting world scenario of virus contraction excluding Mainland China","52b2628b":"### Plotting the world Scenario of Confirmed cases","057b1e2a":"### Upvote if you like my notebook, Your support and encouragement will be greatly appreciated!!!\n### Suggestions and Criticisms are welcomed","f50424e3":"### Analysis using the Time series data","a2e03ac0":"### Global study of Relationship between Confirmed cases, Recovered cases and Deaths \n","444f5d19":"### Study of Relationship between Confirmed, Recovered and Death in Mainland China alone","3b8802f9":"This graph doesnt reveal much information about other part of the world as Mainland China is way ahead in the affected numbers\n\nTo get a global picture of affected let's keep Mainland China aside for a while and revisit the statistics","b1b36b8e":"South Korea registers more number of affected statistics after China\n\nIt is misterious that Italy comes second after South Korea as no other countries from western Europe are listed in top\n\nThe same way unnamed category 'Others' also need interrogation"}}