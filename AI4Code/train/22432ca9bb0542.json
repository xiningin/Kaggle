{"cell_type":{"871b4a07":"code","3af1d297":"code","a5150c3d":"code","2ff66b60":"code","a23ed85e":"code","82c48838":"code","431f4176":"code","2518f1c6":"code","87c700cf":"code","8f675ca6":"code","d3aea388":"code","338e0de1":"code","f506fc9d":"code","3a00d55a":"code","8737f0e5":"code","950cfbaf":"code","b1709a3b":"code","682d9ecd":"code","a528334b":"code","26af4ddb":"code","5eefb3af":"code","3d1dac55":"code","e327c463":"code","a491b3d6":"code","8331a2e6":"code","bb9fcc03":"code","ee66d81a":"code","77c013b6":"code","53c80b36":"code","a40e783b":"code","2421c34d":"code","e597ff35":"markdown","d0a5a4e4":"markdown","672af83e":"markdown","6d1e595d":"markdown"},"source":{"871b4a07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3af1d297":"df1 = pd.read_csv('..\/input\/cusersmarildownloadsresearcherscsv\/researchers.csv', delimiter=';', encoding = \"ISO-8859-1\")\nnRow, nCol = df1.shape\ndf1.dataframeName = 'researchers.csv'\nf'There are {nRow} rows and {nCol} columns'","a5150c3d":"df1.head(5)","2ff66b60":"df1.info","a23ed85e":"df1.describe()","82c48838":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","431f4176":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","2518f1c6":"labels=df1.time.value_counts().index\nsizes=df1.time.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes,labels=labels,autopct=\"%1.f%%\")\nplt.title(\"time\",size=25)\nplt.show()","87c700cf":"labels1=df1.country.value_counts().index\nsizes1=df1.country.value_counts().values\nplt.figure(figsize=(11,11))\nplt.pie(sizes1,labels=labels1,autopct=\"%1.1f%%\")\nplt.title(\"country\",size=25)\nplt.show()","8f675ca6":"plotPerColumnDistribution(df1, 10, 5)","d3aea388":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='g', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","338e0de1":"plotCorrelationMatrix(df1, 8)","f506fc9d":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","3a00d55a":"plotScatterMatrix(df1, 15, 10)","8737f0e5":"df1.time.describe()","950cfbaf":"print (\"Skew is:\", df1.time.skew())\nplt.hist(df1.time, color='green')\nplt.show()","b1709a3b":"target = np.log(df1.time)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='pink')\nplt.show()","682d9ecd":"numeric_features = df1.select_dtypes(include=[np.number])\nnumeric_features.dtypes","a528334b":"corr = numeric_features.corr()\n\nprint (corr['time'].sort_values(ascending=False)[1:11], '\\n')\nprint (corr['time'].sort_values(ascending=False)[-10:])","26af4ddb":"df1.time.unique()","5eefb3af":"#Define a function which can pivot and plot the intended aggregate function \ndef pivotandplot(data,variable,onVariable,aggfunc):\n    pivot_var = data.pivot_table(index=variable,\n                                  values=onVariable, aggfunc=aggfunc)\n    pivot_var.plot(kind='bar', color='orange')\n    plt.xlabel(variable)\n    plt.ylabel(onVariable)\n    plt.xticks(rotation=0)\n    plt.show()","3d1dac55":"pivotandplot(df1,'time','time.1',np.median)","e327c463":"# numpy, matplotlib, seaborn\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","a491b3d6":"# It is a continous variable and hence lets look at the relationship of time with time.1 using a Regression plot\n\n_ = sns.regplot(df1['time'], df1['time.1'])","8331a2e6":"df1.plot(kind='scatter', x='time', y='time.1', alpha=0.5, color='darkblue', figsize = (12,9))\nplt.title('time And time.1')\nplt.xlabel(\"time\")\nplt.ylabel(\"time.1\")\nplt.show()","bb9fcc03":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px","ee66d81a":"trace1 = go.Box(\n    y=df1[\"time\"],\n    name = 'time',\n    marker = dict(color = 'rgb(0,145,119)')\n)\ntrace2 = go.Box(\n    y=df1[\"time.1\"],\n    name = 'time.1',\n    marker = dict(color = 'rgb(5, 79, 174)')\n)\n\ndata = [trace1, trace2]\nlayout = dict(autosize=False, width=700,height=500, title='time', paper_bgcolor='rgb(243, 243, 243)', \n              plot_bgcolor='rgb(243, 243, 243)', margin=dict(l=40,r=30,b=80,t=100,))\nfig = dict(data=data, layout=layout)\niplot(fig)","77c013b6":"import matplotlib.pyplot as plt\nplt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","53c80b36":"df1.plot(kind='scatter', x='time', y='indicator', alpha=0.5, color='mediumorchid', figsize = (12,9))\nplt.title('time And indicator')\nplt.xlabel(\"time\")\nplt.ylabel(\"indicator\")\nplt.show()","a40e783b":"# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n \n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n \n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df1['indicator'], df1['time.1'], df1['time'], c='darkolivegreen', s=60)\nax.view_init(30, 185)\nplt.show()","2421c34d":"ax = sns.violinplot(x=\"time\", y=\"time.1\", data=df1, \n                    inner=None, color=\".8\")\nax = sns.stripplot(x=\"time\", y=\"time.1\", data=df1, \n                   jitter=True)\nax.set_title('time vs time.1')\nax.set_ylabel('time time.1')","e597ff35":"Pie charts from Melih Kanbay @melihkanbay","d0a5a4e4":"The codes below are from Fatih Bilgin. Thank you.","672af83e":"I still don't known how to play with violins, and a lot of other things too.","6d1e595d":"Code below I received from my friend @dcstang.  Thanks David Tang.  "}}