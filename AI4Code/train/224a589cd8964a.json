{"cell_type":{"d4351dc0":"code","ca8924a2":"code","984595a5":"code","4b7e1a3c":"code","48677524":"markdown","c4c37943":"markdown","d91ea609":"markdown","22648294":"markdown"},"source":{"d4351dc0":"import numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM, CuDNNLSTM","ca8924a2":"def load_data():\n    with np.load(\"..\/input\/mnist.npz\") as f:\n        x_train, y_train = f['x_train'], f['y_train']\n        x_test, y_test = f['x_test'], f['y_test']\n    return (x_train, y_train), (x_test, y_test)\n\n(x_train, y_train), (x_test, y_test) = load_data()\nprint(x_train.shape)\nprint(x_train[0].shape)","984595a5":"x_train =  x_train\/255.0\nx_test = x_test\/255.0","4b7e1a3c":"model = Sequential()\n\n# Layers\nmodel.add(CuDNNLSTM(128, input_shape=(x_train.shape[1:]), return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(CuDNNLSTM(128))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(10, activation='softmax'))\n\n# Optimizer\nopt = tf.keras.optimizers.Adam(lr=1e-3, decay=1e-5)\n\n#Compile\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n\n#Fit\nmodel.fit(x_train, y_train, epochs=3, validation_data=(x_test, y_test))\n\n\n","48677524":"## Normalize the data","c4c37943":"# MNIST - TensorFlow Basics using CNN\n\nThe objective of this notebook is to build a basic model for MNIST dataset using TensorFlow Recurrent Neural Network(CNN). This code is from [pythonprogramming.net](https:\/\/pythonprogramming.net\/recurrent-neural-network-deep-learning-python-tensorflow-keras\/)","d91ea609":"## Loading the MNIST Data","22648294":"## Build the Model"}}