{"cell_type":{"22a15303":"code","3815a943":"code","00d19914":"code","354c84e5":"code","812613ec":"code","5ff5d9c9":"code","8e20a45e":"code","f7c72c64":"code","51e09e03":"code","605fbf01":"code","51049359":"code","06b018b7":"code","6ed4365b":"code","d3e00a85":"code","49e8773c":"code","24cee70e":"code","a99a7604":"code","8f3e44dc":"code","61b29ab9":"code","f30c7f26":"code","7041f37c":"code","d1b6675c":"code","e7bf0f98":"code","1b670ccd":"code","5d10d393":"code","189da860":"code","5a1c8b48":"markdown"},"source":{"22a15303":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3815a943":"PATH_WEEK4 = '\/kaggle\/input\/covid19-global-forecasting-week-4'\n\ndf_Train = pd.read_csv(f'{PATH_WEEK4}\/train.csv', parse_dates=[\"Date\"], engine='python')\ndf_Test = pd.read_csv(f'{PATH_WEEK4}\/test.csv')","00d19914":"def fillState(state, country):\n    if state == EMPTY_VAL: return country\n    return state","354c84e5":"df_Train.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_Test.rename(columns={'Country_Region':'Country'}, inplace=True)\n#df_Covid19.rename(columns={'Country\/Region':'Country', 'ObservationDate': 'Date'}, inplace=True)\n#df_Covid19.replace({'Country': 'Mainland China'}, 'China', inplace=True)\n#df_Covid19.replace({'Country': 'Taiwan'}, 'Taiwan*', inplace=True)\n\nEMPTY_VAL = \"EMPTY_VAL\"\n\ndf_Train.rename(columns={'Province_State':'State'}, inplace=True)\ndf_Train['State'].fillna(EMPTY_VAL, inplace=True)\ndf_Train['State'] = df_Train.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\ndf_Test.rename(columns={'Province_State':'State'}, inplace=True)\ndf_Test['State'].fillna(EMPTY_VAL, inplace=True)\ndf_Test['State'] = df_Test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n\n#df_Covid19.rename(columns={'Province\/State':'State'}, inplace=True)\n#df_Covid19['State'].fillna(EMPTY_VAL, inplace=True)\n#df_Covid19['State'] = df_Test.loc[:, ['State', 'Country']].apply(lambda x : fillState(x['State'], x['Country']), axis=1)\n#df_Covid19.replace({'State': 'Taiwan*'}, 'Taiwan*', inplace=True)\n\n#df_Train['Date'] = pd.to_datetime(df_Train['Date'], infer_datetime_format=True) # as pd.read_csv does parsed 'Date' as dates\ndf_Test['Date'] = pd.to_datetime(df_Test['Date'], infer_datetime_format=True) # dtype('Date') would be object, adnd we need to explicitly convert object to date as we did not use parse_dates\n#df_Covid19['Date'] = pd.to_datetime(df_Covid19['Date'], infer_datetime_format=True)","812613ec":"df_groupByCountry = df_Train.loc[:, ['Country', 'State', 'ConfirmedCases', 'Fatalities']].groupby(['Country', 'State']).max().reset_index().groupby('Country').sum().sort_values(by='ConfirmedCases', ascending=False).reset_index()\ndf_groupByCountry[:15].style.background_gradient(cmap='viridis_r')","5ff5d9c9":"import plotly.express as px\n\ncountries = df_groupByCountry.Country.unique().tolist()\ndf_plot = df_Train.loc[(df_Train.Country.isin(countries[:10])) & (df_Train.Date >= '2020-03-11'), ['Date', 'Country', 'State', 'ConfirmedCases', 'Fatalities']].groupby(['Date', 'Country', 'State']).max().reset_index().groupby(['Date', 'Country']).sum().sort_values(by='ConfirmedCases', ascending=False).reset_index()\n\nfig = px.bar(df_plot, x=\"Date\", y=\"ConfirmedCases\", color=\"Country\", barmode=\"stack\")\nfig.update_layout(title='Rise of Confirmed Cases around top 10 countries', annotations=[dict(x='2020-03-21', y=150, xref=\"x\", yref=\"y\", text=\"Coronas Rise exponentially from here\", showarrow=True, arrowhead=1, ax=-150, ay=-150)])\nfig.show()","8e20a45e":"df_Train.loc[: , ['Country', 'State', 'ConfirmedCases', 'Fatalities']].groupby(['Country', 'State']).max().reset_index().nlargest(15, \"ConfirmedCases\").style.background_gradient(cmap='nipy_spectral')","f7c72c64":"import plotly.express as px\n\ndf_plot = df_Train.loc[: , ['Date', 'Country', 'ConfirmedCases', 'Fatalities']].groupby(['Date', 'Country']).max().reset_index()\n\ndf_plot.loc[:, 'Date'] = df_plot.Date.dt.strftime(\"%Y-%m-%d\")\ndf_plot.loc[:, 'Size'] = np.power(df_plot[\"ConfirmedCases\"]+1,0.3)-1 #np.where(df_plot['Country'].isin(['China', 'Italy']), df_plot['ConfirmedCases'], df_plot['ConfirmedCases']*300)\n\nfig = px.scatter_geo(df_plot,\n                     locations=\"Country\",\n                     locationmode = \"country names\",\n                     hover_name=\"Country\",\n                     color=\"ConfirmedCases\",\n                     animation_frame=\"Date\", \n                     size='Size',\n                     #projection=\"natural earth\",\n                     title=\"Rise of Coronavirus Confirmed Cases\")\nfig.show()","51e09e03":"import plotly.express as px\n\ncountries = df_groupByCountry.Country.unique().tolist()\ndf_plot = df_Train.loc[df_Train.Country.isin(countries[:10]), ['Date', 'Country', 'ConfirmedCases']].groupby(['Date', 'Country']).max().reset_index()\n\nfig = px.line(df_plot, x=\"Date\", y=\"ConfirmedCases\", color='Country')\nfig.update_layout(title='No.of Confirmed Cases per Day for Top 10 Countries',\n                   xaxis_title='Date',\n                   yaxis_title='No.of Confirmed Cases')\nfig.show()","605fbf01":"import plotly.express as px\n\ncountries = df_groupByCountry.Country.unique().tolist()\ndf_plot = df_Train.loc[df_Train.Country.isin(countries[:10]), ['Date', 'Country', 'Fatalities']].groupby(['Date', 'Country']).max().reset_index()\n\nfig = px.scatter(df_plot, x=\"Date\", y=\"Fatalities\", color='Country')\nfig.update_layout(title='No.of Fatalities per Day for Top 10 Countries',\n                   xaxis_title='Date',\n                   yaxis_title='No.of Fatalities')\nfig.show()","51049359":"MIN_TEST_DATE = df_Test.Date.min()\n\ndf_train = df_Train.copy() #df_Train.loc[df_Train.Date < MIN_TEST_DATE, :]\ny1_Train = df_train.iloc[:, -2]\ny2_Train = df_train.iloc[:, -1]","06b018b7":"def extractDate(df, colName = 'Date'):\n    \"\"\"\n    This function does extract the date feature in to multiple features\n    - week, day, month, year, dayofweek\n    \"\"\"\n    assert colName in df.columns\n    df = df.assign(#week = df.loc[:, colName].dt.week,\n                   day = df.loc[:, colName].dt.day,\n                   month = df.loc[:, colName].dt.month,\n                   #year = df.loc[:, colName].dt.year,\n                   #dayofweek = df.loc[:, colName].dt.dayofweek\n                   dayofyear = df.loc[:, colName].dt.dayofyear)\n    return df","6ed4365b":"def createNewDataset(df):\n    \"\"\"\n    This function does create a new dataset for modelling.\n    \"\"\"\n    df_New = df.copy()\n    \n    df_New = extractDate(df_New)\n    #df_New.loc[:, 'Date_Int'] = (df_New.loc[:, 'Date'].dt.strftime(\"%m%d\")).astype('int16')\n    df_New.drop(columns=['Date'], axis=1, inplace=True)\n    \n    #df_New.loc[:, 'Country_State'] = df_New.loc[:, 'Country'] + '_' + df_New.loc[:, 'State']\n    #df_New.loc[:, 'Country_State'] = df_New[[\"State\", \"Country\"]].apply(lambda row: str(row[0]) + \"_\" + str(row[1]),axis=1)\n    #df_New.drop(columns=['Country', 'State'], axis=1, inplace=True)\n    \n    return df_New","d3e00a85":"X_Train = createNewDataset(df_train)\nX_Test = createNewDataset(df_Test)","49e8773c":"def RMSLE(pred, actual):\n    return np.sqrt(np.mean(np.power((np.log(pred + 1) - np.log(actual + 1)), 2)))","24cee70e":"from warnings import filterwarnings\nfilterwarnings('ignore')","a99a7604":"def modelPredict(model, X_Test):\n    return model.predict(X_Test)","8f3e44dc":"def modelFit(model, X_Train, y_Train):\n    model.fit(X_Train, y_Train)    ","61b29ab9":"X_Train.columns","f30c7f26":"from sklearn.preprocessing import PolynomialFeatures, LabelEncoder, StandardScaler\nfrom sklearn.linear_model import LinearRegression\n\ndf_out = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\ndf_Test_Out = pd.DataFrame()\nLEncoder = LabelEncoder()\n\npfC = PolynomialFeatures(degree = 3)\npfF = PolynomialFeatures(degree = 3)\n\nmodelC = LinearRegression()\nmodelF = LinearRegression()\n\ncountries = X_Train.Country.unique().tolist()\nfor country in countries:\n    states = X_Train.loc[X_Train.Country == country, :].State.unique().tolist()\n    for state in states:\n        categoricalFeatures = ['Country', 'State']\n        df_Test_Updated = pd.DataFrame()\n        \n        # Train\n        X_Train_CS = X_Train.loc[(X_Train.Country == country) & (X_Train.State == state), :]\n        #X_Train_CS.loc[:, 'Country_State'] = X_Train_CS.loc[:, [\"State\", \"Country\"]].apply(lambda row: row[0] + \"_\" + row[1],axis=1)\n\n        yC_Train_CS = X_Train_CS.loc[:, 'ConfirmedCases'].to_frame()\n        yF_Train_CS = X_Train_CS.loc[:, 'Fatalities'].to_frame()\n        X_Train_CS.drop(columns=['Id', 'ConfirmedCases', 'Fatalities', 'day', 'month'], axis=1, inplace=True)\n        #X_Train_CS.drop(columns=categoricalFeatures, axis=1, inplace=True)\n\n        X_Train_CS.loc[:, 'Country'] = LEncoder.fit_transform(X_Train_CS.loc[:, 'Country'])\n        X_Train_CS.loc[:, 'State'] = LEncoder.fit_transform(X_Train_CS.loc[:, 'State'])\n        #X_Train_CS.loc[:, 'Country_State'] = LEncoder.fit_transform(X_Train_CS.loc[:, 'Country_State'])\n\n        # Test\n        X_Test_CS = X_Test.loc[(X_Test.Country == country) & (X_Test.State == state), :]\n        df_Test_Updated = df_Test_Updated.append(X_Test_CS)\n        #X_Test_CS.loc[:, 'Country_State'] = X_Test_CS.loc[:, [\"State\", \"Country\"]].apply(lambda row: row[0] + \"_\" + row[1],axis=1)\n\n        X_Test_CS_Id = X_Test_CS.loc[:, 'ForecastId']\n        X_Test_CS.drop(columns=['ForecastId', 'day', 'month'], axis=1, inplace=True)\n        #X_Test_CS.drop(columns=categoricalFeatures, axis=1, inplace=True)\n\n        X_Test_CS.loc[:, 'Country'] = LEncoder.fit_transform(X_Test_CS.loc[:, 'Country'])\n        X_Test_CS.loc[:, 'State'] = LEncoder.fit_transform(X_Test_CS.loc[:, 'State'])\n        #X_Test_CS.loc[:, 'Country_State'] = LEncoder.fit_transform(X_Test_CS.loc[:, 'Country_State'])\n        \n        # Model\n        scTrain = StandardScaler()\n        X_Train_CS_SS = scTrain.fit_transform(X_Train_CS)\n        X_Test_CS_SS = scTrain.transform(X_Test_CS)\n        \n        scC = StandardScaler()\n        yC_Train_CS_SS = scC.fit_transform(yC_Train_CS)\n        \n        scF = StandardScaler()\n        yF_Train_CS_SS = scF.fit_transform(yF_Train_CS)\n        \n        modelC.fit(pfC.fit_transform(X_Train_CS_SS), yC_Train_CS_SS)\n        yC_Pred = scC.inverse_transform(modelC.predict(pfC.fit_transform(X_Test_CS_SS)))\n\n        modelF.fit(pfF.fit_transform(X_Train_CS_SS), yF_Train_CS_SS)\n        yF_Pred = scF.inverse_transform(modelF.predict(pfF.fit_transform(X_Test_CS_SS)))\n        \n        yC_Pred[yC_Pred < 0] = yC_Pred[yC_Pred < 0] * -1\n        yF_Pred[yF_Pred < 0] = yF_Pred[yF_Pred < 0] * -1\n        \n        # Output Dataset\n        df = pd.DataFrame({'ForecastId': X_Test_CS_Id, 'ConfirmedCases': yC_Pred.flatten(), 'Fatalities': yF_Pred.flatten()})\n        df_out = pd.concat([df_out, df], axis=0)\n        \n        df_Test_Updated['ConfirmedCases'] = yC_Pred\n        df_Test_Updated['Fatalities'] = yF_Pred\n        df_Test_Out = df_Test_Out.append(df_Test_Updated)\n        # break\n    # Done for state loop\n    # break\n# Done for country loop","7041f37c":"df_out.ForecastId = df_out.ForecastId.astype('int')","d1b6675c":"df_out.iloc[np.r_[42, 45, 97, 143, 175, 267, 327, 350, 420, 450, 540, 590, 680, 730, 2880, 2900, 2960, 3000, 3050, 7000, 7500, 8000, 8500, 9000, 9500, 10000, 10500, 11000, 11500, 12000, 12500, 13000], :]\n#df_out.sample(10)","e7bf0f98":"df_out.to_csv('submission.csv', index=False)","1b670ccd":"df_Test_Out.loc[df_Test_Out.Country == 'India', :]","5d10d393":"df_Test_Out['Date'] = df_Test_Out.apply(lambda x : '2020-' + str(x.month) + '-' + str(x.day), axis=1)\ndf_Test_Out['Date'] = pd.to_datetime(df_Test_Out['Date'], infer_datetime_format=True)","189da860":"import plotly.express as px\n\ncountry = 'India'\ndf_plot = df_Test_Out.loc[(df_Test_Out.Country == country) & (df_Test_Out.Date > '2020-04-01'), ['Date', 'Country', 'State', 'ConfirmedCases', 'Fatalities']].groupby(['Date', 'Country', 'State']).max().reset_index().groupby(['Date', 'Country']).sum().sort_values(by='ConfirmedCases', ascending=False).reset_index()\ndf_plot.ConfirmedCases = round(df_plot.ConfirmedCases)\nfig = px.bar(df_plot, x=\"Date\", y=\"ConfirmedCases\", color=\"ConfirmedCases\")\nfig.update_layout(title='Rise of Confirmed Cases in India', annotations=[dict(x=pd.to_datetime('today'), y=150, xref=\"x\", yref=\"y\", text=\"Today's Stats is here\", showarrow=True, arrowhead=1, ax=-150, ay=-150)])\nfig.show()","5a1c8b48":"## Predicted cases in India till 14th May, 2020"}}