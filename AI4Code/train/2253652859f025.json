{"cell_type":{"ba6e6a23":"code","4a83dfad":"code","683096da":"code","fe89a8e4":"code","561eff22":"code","00e8bf37":"code","b2bd12d8":"code","8cfe27a1":"code","eea3683b":"code","ff624521":"code","8524c1e8":"code","716cf0fa":"code","7b92224b":"code","f0610137":"code","f35124da":"code","a3736d03":"code","ad1eff23":"code","ccc1f5c4":"code","6cad33ea":"code","9ed818ee":"code","83472ab1":"code","71d69558":"code","b2bc27bb":"code","952ad1f3":"code","a46d2702":"code","d8334af5":"code","7ade0ba9":"code","b9d324c6":"code","9e8ae81a":"code","81e84552":"code","8fc956a1":"code","ba525cf3":"code","c154f677":"markdown","732627a5":"markdown","cfadf075":"markdown","0f5d58f8":"markdown","2ed85f8d":"markdown","75835777":"markdown","853883cc":"markdown","959e72d8":"markdown"},"source":{"ba6e6a23":"# Instaling nsepy - for share price data\n# Installing ta - for technical indicators\n#!pip install nsepy\n#!pip install ta","4a83dfad":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom nsepy import get_history\nfrom datetime import date\nfrom nsepy.history import get_price_list,get_indices_price_list\nimport datetime as dt\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15,10\nfrom xgboost import XGBRegressor\nimport matplotlib.pyplot as plt\nfrom xgboost import plot_importance\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV,KFold\nfrom ta.momentum import RSIIndicator,StochasticOscillator\nfrom fastai.tabular import add_datepart\nimport seaborn as sns\nimport altair as alt\nsns.set()\n%matplotlib inline\n\n#remove warnings\nimport warnings\nwarnings.filterwarnings('ignore')","683096da":"price = get_price_list(dt=date(2015,1,1))","fe89a8e4":"# considering data from 2015 to 2016\ndata = get_history(symbol=\"TCS\", start=date(2015,1,1), end=date(2016,12,31))","561eff22":"data.tail()","00e8bf37":"data_new=data.drop(['Symbol', 'Series','Last', 'VWAP', 'Turnover', 'Trades', 'Deliverable Volume',\n       '%Deliverble'],axis=1)","b2bd12d8":"def ChangeIndex(share):\n  '''Changes Date index to datetime datatype'''\n  share.index = pd.to_datetime(share.index) # chane index to datetime format\n  pass","8cfe27a1":"ChangeIndex(data_new)","eea3683b":"data_new.reset_index(inplace=True)","ff624521":"data_new.head()","8524c1e8":"alt.Chart(data_new).mark_line(color='blue').encode(\n    x='Date',\n    y='Close'\n  ).properties(\n    height=400,\n    width=1000\n  )\n","716cf0fa":"add_datepart(data_new, 'Date', drop=False)\ndata_new.drop('Elapsed', axis=1, inplace=True) # not required for the model\n","7b92224b":"def featurecalculator(share):\n  share['EMA_9'] = share['Close'].ewm(9).mean() # exponential moving average of window 9\n  share['SMA_5'] = share['Close'].rolling(5).mean() # moving average of window 5\n  share['SMA_10'] = share['Close'].rolling(10).mean() # moving average of window 10\n  share['SMA_15'] = share['Close'].rolling(15).mean() # moving average of window 15\n  share['SMA_20'] = share['Close'].rolling(20).mean() # moving average of window 20\n  share['SMA_25'] = share['Close'].rolling(25).mean() # moving average of window 25\n  share['SMA_30'] = share['Close'].rolling(30).mean() # moving average of window 30\n  EMA_12 = pd.Series(share['Close'].ewm(span=12, min_periods=12).mean())\n  EMA_26 = pd.Series(share['Close'].ewm(span=26, min_periods=26).mean())\n  share['MACD'] = pd.Series(EMA_12 - EMA_26)    # calculates Moving Average Convergence Divergence\n  share['RSI'] = RSIIndicator(share['Close']).rsi() # calculates Relative Strength Index \n  share['Stochastic']=StochasticOscillator(share['High'],share['Low'],share['Close']).stoch() # Calculates Stochastic Oscillator\n  pass","f0610137":"featurecalculator(data_new)","f35124da":"def labelencode(share):\n  LE=LabelEncoder()\n  share['Is_month_end']=LE.fit_transform(share['Is_month_end'])\n  share['Is_month_start']=LE.fit_transform(share['Is_month_start'])\n  share['Is_quarter_end']=LE.fit_transform(share['Is_quarter_end'])\n  share['Is_quarter_start']=LE.fit_transform(share['Is_quarter_start'])\n  share['Is_year_end']=LE.fit_transform(share['Is_year_end'])\n  share['Is_year_start']=LE.fit_transform(share['Is_year_start'])\n  pass","a3736d03":"labelencode(data_new)","ad1eff23":"data_new.head(40)","ccc1f5c4":"# Dropping rows with Na values\ndata_new=data_new.iloc[33:]","6cad33ea":"data_new.reset_index(drop=True,inplace=True)","9ed818ee":"data_new.head()","83472ab1":"data_new.drop(['Year','High','Low','Open','Prev Close','Volume','Date'],inplace=True,axis=1)","71d69558":"data_new.head()","b2bc27bb":"data_new.columns","952ad1f3":"# Shifting the features a row up\ndata_new[['EMA_9', 'SMA_5', 'SMA_10', 'SMA_15',\n       'SMA_20', 'SMA_25', 'SMA_30', 'MACD', 'RSI', 'Stochastic']]=data_new[['EMA_9', 'SMA_5', 'SMA_10', 'SMA_15',\n       'SMA_20', 'SMA_25', 'SMA_30', 'MACD', 'RSI', 'Stochastic']].shift(-1)","a46d2702":"data_new.head()","d8334af5":"# Splitting the dataset into 70% training, 15% validation and 15% test\n# train test split indexes\ntest_size  = 0.15\nvalid_size = 0.15\n\ntest_split_idx  = int(data_new.shape[0] * (1-test_size))\nvalid_split_idx = int(data_new.shape[0] * (1-(valid_size+test_size)))  \n\n\n#train test split tcs\n\ntrain= data_new.loc[:valid_split_idx]\nvalid= data_new.loc[valid_split_idx+1:test_split_idx]\ntest= data_new.loc[test_split_idx+1:]","7ade0ba9":"y_train = train['Close']\nX_train = train.drop(['Close'], 1)\n\ny_valid = valid['Close']\nX_valid = valid.drop(['Close'], 1)\n\ny_test = test['Close']\nX_test = test.drop(['Close'], 1)","b9d324c6":"parameters = {\n    'n_estimators': [500,600],\n    'learning_rate': [0.1],\n    'max_depth': [8, 12, 15],\n    'gamma': [ 0.005, 0.01,],\n    'random_state': [42],\n    'min_child_weight':[4,3],\n    'subsample':[0.8,1],\n    'colsample_bytree':[1],\n    'colsample_bylevel':[1]\n}\nkfold=KFold(5)\neval_set = [(X_train, y_train), (X_valid, y_valid)]\nmodel = XGBRegressor(objective='reg:squarederror',n_jobs=-1)\nclf = GridSearchCV(model, parameters,cv=kfold,scoring='neg_mean_absolute_error',verbose=0)\n\nclf.fit(X_train, y_train)\n\nprint(f'Best params: {clf.best_params_}')\nprint(f'Best validation score = {clf.best_score_}')","9e8ae81a":"model = XGBRegressor(**clf.best_params_, objective='reg:squarederror',n_jobs=-1)\nmodel.fit(X_train, y_train, eval_set=eval_set, verbose=False)\ny_pred=model.predict(X_test)\nmean_absolute_error(y_test,y_pred)","81e84552":"params={'colsample_bylevel': 1,\n 'colsample_bytree': 0.6,\n 'gamma': 0.005,\n 'learning_rate': 0.07,\n 'max_depth': 10,\n 'min_child_weight': 1,\n 'n_estimators': 170,\n 'random_state': 42,\n 'subsample': 0.6}\neval_set = [(X_train, y_train), (X_valid, y_valid)]","8fc956a1":"xgb=XGBRegressor(**params, objective='reg:squarederror',n_jobs=-1)\nxgb.fit(X_train, y_train, eval_set=eval_set, verbose=False)\ny_pred = xgb.predict(X_test)\nmean_absolute_error(y_test, y_pred)","ba525cf3":"plt.figure(figsize=(15,8))\nsns.lineplot(y=y_pred,x=np.arange(69))\nsns.lineplot(y=y_test,x=np.arange(69))\nplt.legend(['Y-Predicted','Y-True'])\nplt.title('Y-True vs Y-Predicted')\nplt.show()","c154f677":"In this notebook, i wil be predicting stock price by using various technical indicators.\n1. **nsepy** library is used to extract share price history from National Stock Exchange's publicly available data.\n>https:\/\/github.com\/swapniljariwala\/nsepy\n\n2. **ta** i.e. technical analysis library is used to for feature engineering, calculating various technical indicators.\n>https:\/\/github.com\/bukosabino\/ta\n\n3. Altair, matplotlib and seaborn visualization libraries are used.\n\n4. XGBRegressor is used for prediction.\n\n","732627a5":" fastai is used to extract datepart features from date\n\n\n **Simple Moving Average** - *A simple moving average (SMA) is an arithmetic moving average calculated by adding recent prices ( number of recent pr ices can be chose by parameter window) and then dividing that by the number of time periods in the calculation average.*\n\n\n **Exponential Moving Average** - *An exponential moving average (EMA) is a type of moving average (MA) that places a greater weight and significance on the most recent data points. It also takes window as a parameter.*\n\n\n **Relative Strength Index** - *The relative strength index (RSI) is a momentum indicator used in technical analysis that measures the magnitude of recent price changes to evaluate overbought or oversold conditions in the price of a stock or other asset.*\n>https:\/\/www.investopedia.com\/terms\/r\/rsi.asp\n\n **MACD** - *Moving Average Convergence Divergence (MACD) is a trend-following momentum indicator that shows the relationship between two moving averages of a security\u2019s price. The MACD is calculated by subtracting the 26-period Exponential Moving Average (EMA) from the 12-period EMA.*\n>https:\/\/www.investopedia.com\/terms\/m\/macd.asp\n\n **Stochastic Oscillator** - *A stochastic oscillator is a momentum indicator comparing a particular closing price of a security to a range of its prices over a certain period of time. The sensitivity of the oscillator to market movements is reducible by adjusting that time period or by taking a moving average of the result. It is used to generate overbought and oversold trading signals, utilizing a 0-100 bounded range of values.*\n>https:\/\/www.investopedia.com\/terms\/s\/stochasticoscillator.asp#:~:text=A%20stochastic%20oscillator%20is%20a,moving%20average%20of%20the%20result.","cfadf075":"# Feature Engineering\n","0f5d58f8":"# Train test split","2ed85f8d":"# XGBoost Model\n","75835777":"nsepy's get_history() function seems to have some problem, it keeps on running without giving any output or just an empty dataframe as an output.\nLuckily though, using get_price_list()  first seems to establish connection with the nse website and then get_history() works fine.","853883cc":"The mean absolute error has reduced from 35.1153 to 28.9871","959e72d8":"# Handtuning the hyperparameters"}}