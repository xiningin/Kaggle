{"cell_type":{"333d3093":"code","4889ebfb":"code","2538b4d3":"code","757986c2":"code","90f2f7ad":"code","217f62e8":"code","38fa6129":"code","569f85f1":"code","bcf3e669":"code","c2ea2142":"code","a8ec22c4":"code","635e0c73":"code","88edbfda":"code","c6b62da7":"code","036c20c4":"code","40544f97":"code","b35963d2":"markdown","18b5e643":"markdown","6f4df486":"markdown","60862762":"markdown","9a470549":"markdown","9b9f15a9":"markdown","f7266394":"markdown","d9f63720":"markdown","8e3527bd":"markdown","e519d3c8":"markdown"},"source":{"333d3093":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Visiulazation\nimport matplotlib.pyplot as plt\n\n#image processing\nimport cv2\n\n#extracting zippped file\nimport tarfile\n\n#systems\nimport os\nprint(os.listdir(\"..\/input\/haarcascade-frontal-faces\"))\nprint(os.listdir(\"..\/input\/lfwpeople\"))","4889ebfb":"class FaceDetector():\n\n    def __init__(self,faceCascadePath):\n        self.faceCascade=cv2.CascadeClassifier(faceCascadePath)\n\n\n    def detect(self, image, scaleFactor=1.1,\n               minNeighbors=5,\n               minSize=(30,30)):\n        \n        #function return rectangle coordinates of faces for given image\n        rects=self.faceCascade.detectMultiScale(image,\n                                                scaleFactor=scaleFactor,\n                                                minNeighbors=minNeighbors,\n                                                minSize=minSize)\n        return rects","2538b4d3":"#Frontal face of haar cascade loaded\nfrontal_cascade_path=\"..\/input\/haarcascade-frontal-faces\/haarcascade_frontalface_default.xml\"\n\n#Detector object created\nfd=FaceDetector(frontal_cascade_path)","757986c2":"#An image contains faces, loaded\nnational_team_org=cv2.imread(\"..\/input\/haarcascade-frontal-faces\/millitakim-isvecmaci.jpg\")","90f2f7ad":"def get_national_team():\n    return np.copy(national_team_org)\n\ndef show_image(image):\n    plt.figure(figsize=(18,15))\n    #Before showing image, bgr color order transformed to rgb order\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","217f62e8":"show_image(get_national_team())","38fa6129":"def detect_face(image, scaleFactor, minNeighbors, minSize):\n    # face will detected in gray image\n    image_gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    faces=fd.detect(image_gray,\n                   scaleFactor=scaleFactor,\n                   minNeighbors=minNeighbors,\n                   minSize=minSize)\n\n    for x, y, w, h in faces:\n        #detected faces shown in color image\n        cv2.rectangle(image,(x,y),(x+w, y+h),(127, 255,0),3)\n\n    show_image(image)\n    ","569f85f1":"national_team=get_national_team()\n\ndetect_face(image=national_team, \n            scaleFactor=1.9, \n            minNeighbors=3, \n            minSize=(30,30))","bcf3e669":"national_team=get_national_team()\n#Let's play around function parameters\ndetect_face(image=national_team, \n            scaleFactor=1.3, \n            minNeighbors=3, \n            minSize=(30,30))","c2ea2142":"class FetchLFW:\n    def __init__(self, path):\n        self.path=path\n        \n    def _initialize(self,dim):\n        self.dim_of_photo_gallery=dim\n        self.number_of_images=self.dim_of_photo_gallery*self.dim_of_photo_gallery\n        \n        total_number_of_image=13233\n        self.random_face_indexes=np.arange(total_number_of_image)\n        np.random.shuffle(self.random_face_indexes)\n        self.n_random_face_indexes=self.random_face_indexes[:self.number_of_images]\n        \n    def get_lfw_images(self,dim=5):\n        \n        self._initialize(dim)\n        \n        \n        self.lfw_images=self._get_images()\n        \n        return self.lfw_images\n        \n    \n    def _get_images(self):\n        image_list=[]\n        tar = tarfile.open(path, \"r:gz\")\n        counter=0\n        for tarinfo in tar:\n            \n            tar.extract(tarinfo.name)\n            if tarinfo.name[-4:]==\".jpg\":\n                if counter in self.n_random_face_indexes:\n                    image=cv2.imread(tarinfo.name, cv2.IMREAD_COLOR)\n                    image=cv2.resize(image,None,fx=0.4, fy=0.4, interpolation=cv2.INTER_AREA)\n                    image_list.append(np.array(image))\n                counter+=1\n            if tarinfo.isdir():\n                pass\n            else:\n                os.remove(tarinfo.name)\n        tar.close()\n        \n        return np.array(image_list)\n        ","a8ec22c4":"path=\"..\/input\/lfwpeople\/lfwfunneled.tgz\"\nfetchLFW=FetchLFW(path)\ndimension=10\nimages=fetchLFW.get_lfw_images(dim=dimension)\nprint(\"LFW images have been fetched\")","635e0c73":"print(images.shape)","88edbfda":"def get_photo_gallery():\n    counter=0\n    himages=[]\n    vimages=[]\n    for i in range(dimension):\n        for j in range(dimension):\n            \n            himages.append(images[counter])\n            counter+=1\n\n        himage=np.hstack((himages))\n        vimages.append(himage)\n        himages=[]\n    image_matrix=np.vstack((vimages))\n    return image_matrix","c6b62da7":"photo_gallery=get_photo_gallery()\nprint(\"photo_gallery:{}\".format(photo_gallery.shape))\nshow_image(photo_gallery)","036c20c4":"frontal_cascade_path=\"..\/input\/haarcascade-frontal-faces\/haarcascade_frontalface_default.xml\"\nfd=FaceDetector(frontal_cascade_path)\nface_counter=0\nfor image_org in images:\n    \n    image_gray=cv2.cvtColor(image_org,cv2.COLOR_BGR2GRAY)\n    faceRect=fd.detect(image_gray,\n                       scaleFactor=1.1,\n                       minNeighbors=5,\n                       minSize=(30,30))\n    #print(\"I found {} faces\".format(len(faceRect)))\n    first_detection=False\n    for (x,y,w,h) in faceRect:\n        if first_detection==False:\n            face_counter+=1\n            cv2.rectangle(image_org,(x,y),(x+w,y+h),(127,255,0),2)\n            first_detection=True\n        else:\n            print(\"Second detection ignored in a image\")\n\nprint(\"{} images have been scaned\".format(dimension*dimension))\nprint(\"{} faces have been detected\".format(face_counter))","40544f97":"photo_gallery=get_photo_gallery()\nshow_image(photo_gallery)","b35963d2":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"1e1.\"><\/a>\n# **2. Detecting Faces in National Football Team Image** ","18b5e643":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"5.\"><\/a>\n# **6. Showing Images as Photo Gallery**\n","6f4df486":"<a class=\"anchor\" id=\"0.\"><\/a>**Content**\n\n1. [Summary](#1.)\n1. [Detecting Faces in National Football Team Image](#1e1.)\n1. [FetchLFW class](#2.)\n1. [Fetching LFW images](#3.)\n1. [Helper Funciton:get_photo_gallery()](#4.)\n1. [Showing Images as Photo Gallery](#5.)\n1. [Detecting Faces in LFW Dataset](#7.)\n1. [Showing Detected Faces as Photo Gallery](#8.)\n\nQuick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)","60862762":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"6.\"><\/a>\n# **FaceDetector class** ","9a470549":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n \n<a class=\"anchor\" id=\"2.\"><\/a>\n# **3. FetchLFW class**","9b9f15a9":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n\n<a class=\"anchor\" id=\"1.\"><\/a>\n# **1. Summary**\n\nIn this study, face detection was performed from the images in the LFW data set. \n\nBefore face detection in LFW images, multiple face detection performed in single images. \n\nDesired number of images are taken from the zip file in the LFW data set. Then the face detection was made from these images.","f7266394":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"3.\"><\/a>\n# **4. Fetching LFW Images** ","d9f63720":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"7.\"><\/a>\n# **7. Detecting Faces in LFW Dataset** ","8e3527bd":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"4.\"><\/a>\n# **5. Helper Function: get_photo_gallery()** ","e519d3c8":" [Go to Content Menu](#0.)    |             Quick Links: [1](#1.)  |  [2](#1e1.)  |  [3](#2.)  |  [4](#3.)  |  [5](#4.)  |   [6](#5.)  |  [7](#7.)  |  [8](#8.)\n \n<a class=\"anchor\" id=\"8.\"><\/a>\n# **8. Showing Detected Faces as Photo Gallery**"}}