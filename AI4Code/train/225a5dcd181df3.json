{"cell_type":{"04e13ae9":"code","b45b0ea6":"code","73e11431":"code","4cdd411d":"code","843db972":"code","fdf5fa95":"code","d1257461":"code","b56f85b6":"code","ab4973f1":"code","9a95519e":"code","f4ebbdac":"code","e8c8cd69":"code","bc14682a":"code","6ccc04aa":"code","204bbde2":"code","b3a8a78c":"code","bd6f5a57":"code","fcbd9dd9":"code","f4789231":"markdown","1dcab3ec":"markdown","e2f3126f":"markdown","3f655f1c":"markdown","223b5e0a":"markdown","77455238":"markdown","5269a355":"markdown","dba8d0db":"markdown","b77c31ad":"markdown","1617e97a":"markdown","bee0fd6d":"markdown","90149e46":"markdown"},"source":{"04e13ae9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as mat\nimport tensorflow as tf\nfrom tensorflow import keras\nimport random\nfrom zipfile import ZipFile\nimport os\nimport time\nfrom shutil import copyfile\nimport matplotlib.pyplot as mat\nfrom matplotlib.image import imread","b45b0ea6":"# Base path\npath = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19'\nprint(os.listdir(path))","73e11431":"# File Path\ntrain_normal = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/NORMAL\/'\ntrain_pneumonia = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\/PNEUMONIA\/'\ntest_normal = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\/NORMAL\/'\ntest_pneumonia = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\/PNEUMONIA\/'","4cdd411d":"# Path list\ntrain_dir_normal = os.listdir(train_normal)\ntrain_dir_pneumonia = os.listdir(train_pneumonia)\ntest_dir_normal = os.listdir(test_normal)\ntest_fir_pneumonia = os.listdir(test_pneumonia)","843db972":"mat.figure(figsize=(15,10))\nfor i in range(12):\n    ran = random.choice((1,30))\n    rand_normal = [os.path.join(train_normal, f) for f in train_dir_normal[ran:ran+1]]\n    rand_pneumonia = [os.path.join(train_pneumonia, f) for f in train_dir_pneumonia[ran:ran+1]]\n    rand = random.choice(rand_pneumonia+rand_normal)\n    name = rand.split('\/')\n    name = name[-2] + ' Lungs'\n    mat.subplot(3, 4, i+1)\n    img = mat.imread(rand)\n    mat.imshow(img,cmap = 'gray')\n    mat.axis(False)\n    mat.title(name)\nmat.show()\n","fdf5fa95":"# Looking the size of a random sample image\nsample = random.choice(train_dir_normal)\nsample = imread(train_normal + sample)\nsamp = sample.shape\nmat.imshow(sample)\nprint('Sample_Image_size(H*W):', samp)","d1257461":"x, y = [], []\nfor i in train_dir_normal:\n    img_array = imread(train_normal + i)\n    shape = img_array.shape\n    x.append(shape[0])\n    y.append(shape[1])\ndf_shape = pd.DataFrame({'height': x, 'width': y, 'index': range(0, len(train_dir_normal))})","b56f85b6":"df_shape.head()","ab4973f1":"import seaborn as sns\ndef shape(x, y, df):\n    sns.catplot(kind = 'bar', x = x, y = y, data = df)\n\nshape('index', 'height', df_shape)\nshape('index', 'width', df_shape)","9a95519e":"# Looking for the average size\ndf_shape.describe()","f4ebbdac":"tr_dir = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train'\nte_dir = '..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test'\ndatagen_train = keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255.)\ntrain = datagen_train.flow_from_directory(tr_dir, target_size = (200,200), color_mode = 'grayscale', class_mode = 'binary', batch_size = 10)\ndatagen_test = keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255)\ntest = datagen_test.flow_from_directory(te_dir, target_size = (200,200), color_mode = 'grayscale', class_mode= 'binary', batch_size = 10)","e8c8cd69":"model = keras.models.Sequential([\n    keras.layers.Conv2D(32, (5,5), activation = 'relu', input_shape = (200,200, 1)),\n    keras.layers.MaxPool2D((2,2)),\n    \n    keras.layers.Conv2D(64, (3,3), activation = 'relu'),\n    keras.layers.MaxPool2D(2,2),\n    keras.layers.Conv2D(128, (3,3), activation = 'relu'),\n    keras.layers.MaxPool2D((2,2)),\n    \n    keras.layers.Conv2D(256, (3,3), activation = 'relu'),\n    keras.layers.MaxPool2D((2,2)),\n    \n    keras.layers.Flatten(),\n    \n    keras.layers.Dense(512, activation = 'relu'),\n    keras.layers.Dropout(0.3),\n    keras.layers.BatchNormalization(),\n    \n    keras.layers.Dense(1, activation = 'sigmoid')\n])","bc14682a":"opt = keras.optimizers.Adam(learning_rate = 0.0001)\nmodel.compile(loss = 'binary_crossentropy', optimizer=opt, metrics = ['accuracy'])","6ccc04aa":"log_dir = os.path.join(os.curdir, 'logs')\ndef tensor_callback():\n    file_name = time.strftime('run_%Y_%m_%d-%H_%M_%S')\n    return os.path.join(log_dir, file_name)\nfile = tensor_callback()\ntensor= keras.callbacks.TensorBoard(file)\nearly = keras.callbacks.EarlyStopping(patience=10)\n\ncheck = keras.callbacks.ModelCheckpoint(os.curdir)\ncallbacks = [tensor, check, early]","204bbde2":"history = model.fit(train, validation_data=test, epochs = 30, callbacks=callbacks)","b3a8a78c":"acc = history.history['accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nval_acc = history.history['val_accuracy']\nepochs = range(len(history.epoch))\n\ntitle1 = 'Accuracy vs Validation Accuracy'\nleg1 = ['Acc', 'Val_acc']\ntitle2 = 'Loss vs Val_loss'\nleg2 = ['Loss', 'Val_loss']\n\ndef plot(epochs, acc, val_acc, leg, title):\n    mat.plot(epochs, acc)\n    mat.plot(epochs, val_acc)\n    mat.title(title)\n    mat.legend(leg)\n    mat.xlabel('epochs')\n\nmat.figure(figsize=(15,5))\nmat.subplot(1,2,1)\nplot(epochs, acc, val_acc, leg1, title1)\nmat.subplot(1,2,2)\nplot(epochs, loss, val_loss, leg2, title2)\nmat.show()","bd6f5a57":"import tensorflow.keras.preprocessing.image as im","fcbd9dd9":"samp1, samp2 = [], []\nfor i in range(10):\n    sample_img1 = test_normal+random.choice(test_dir_normal)\n    samp1.append(sample_img1)\n    sample_img = test_pneumonia+random.choice(test_fir_pneumonia)\n    samp2.append(sample_img)\n\nmat.figure(figsize = (15, 15))\nlist1 = [samp1 + samp2]\ntype1 = 'Normal'\nm = 0\nj = 1\nfor k in list1:\n    for i in k:\n        imagee = im.load_img(i, target_size = (200,200), color_mode = 'grayscale')\n        imagee = im.img_to_array(imagee)\n        imagee = tf.expand_dims(imagee, axis = 0)\n        img = mat.imread(i)\n        mat.subplot(4,5,j)\n        mat.imshow(img)\n        lab = mat.xlabel(type1)\n        pred = model.predict(imagee)\n        if pred == m:\n            lab.set_color('green')\n        else:\n            lab.set_color('red')\n        j+=1\n        if j >10:\n            type1 = 'Pneumonia'\n            m = 1","f4789231":"# THANK YOU!","1dcab3ec":"## Creating Callbacks","e2f3126f":"## Visualizing random 12 images from Input","3f655f1c":"## Image Preprocessing","223b5e0a":"## Visualizing the train history","77455238":"## Train Model","5269a355":"## Let's Visualize the height and width of all images","dba8d0db":"# Let's Predict some images","b77c31ad":"# COVID19 DATASET- XRAY IMAGE MODEL ","1617e97a":"## Setting all paths and path lists","bee0fd6d":"## Compiling model","90149e46":"# Creating the model"}}