{"cell_type":{"b49855a7":"code","cab99742":"code","bbe0904d":"code","f530dd1e":"code","b2677292":"code","623c0895":"code","e78327d8":"code","3a1624ad":"code","355ad0f1":"code","317f9a3a":"code","646b30a6":"code","7ff3073e":"code","10bef5b7":"code","5095777d":"code","458cdf31":"code","4adf9ecb":"code","6605921a":"markdown","33c522a8":"markdown","81916a8b":"markdown","4c5a33a2":"markdown"},"source":{"b49855a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cab99742":"import numpy as np\nfrom ml_metrics import kappa\nfrom sklearn.metrics import cohen_kappa_score\nimport tensorflow as tf","bbe0904d":"y_true = np.array([0.0,0.0,0.0])\ny_pred = np.array([0.0,0.0,0.0])\ncohen_kappa_score(y_true, y_pred, weights='quadratic')","f530dd1e":"y_true = np.array([0.0,0.0,0.0])\ny_pred = np.array([0.0,0.0,0.0])\ncohen_kappa_score(y_true, y_pred, weights='quadratic')","b2677292":"y_true = np.array([1.0,2.0,3.0])\ny_pred = np.array([0.0,2.0,3.0])\ncohen_kappa_score(y_true, y_pred, weights='quadratic')","623c0895":"y_true = np.array([1.0,2.0,3.0])\ny_pred = np.array([1.0,2.0,3.0])\ncohen_kappa_score(y_true, y_pred, weights='quadratic')","e78327d8":"def qw_kappa_score(y_true, y_pred):\n    #y_true=tf.math.argmax(y_true, axis=1)\n    #y_pred=tf.math.argmax(y_pred, axis=1)\n    threshold = tf.constant([0.37757874193797547])\n    y_pred = tf.subtract(tf.reduce_sum(tf.cast(tf.math.greater(y_pred, threshold), dtype=tf.float32), axis=1), 1)\n    y_true = tf.subtract(tf.reduce_sum(y_true, axis=1), 1)\n    def sklearn_qwk(y_true, y_pred) -> np.float64:\n        return cohen_kappa_score(y_true, y_pred, weights='quadratic')\n    return tf.compat.v1.py_func(sklearn_qwk, (y_true, y_pred), tf.double)","3a1624ad":"qw_kappa_score(tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]]), \n               tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]]))","355ad0f1":"qw_kappa_score(tf.constant([[1.0,1.0,0.0],\n                            [1.0,0.0,0.0],\n                            [1.0,0.0,0.0]]),\n               tf.constant([[0.9,0.5,0.0],\n                            [0.9,0.3,0.0],\n                            [0.9,0.1,0.0]])\n               )","317f9a3a":"qw_kappa_score(tf.constant([[1.0,1.0,0.0],\n                            [1.0,0.0,0.0],\n                            [1.0,0.0,0.0]]),\n               tf.constant([[0.9,0.5,0.0],\n                            [0.9,0.3,0.0],\n                            [0.9,0.1,0.0]])\n               ).numpy()","646b30a6":"qw_kappa_score(tf.constant([[1.0,1.0,0.0],\n                            [1.0,0.0,0.0],\n                            [1.0,0.0,0.0]]),\n               tf.constant([[0.9,0.5,0.0],\n                            [0.9,0.3,0.0],\n                            [0.9,0.5,0.0]])\n               ).numpy()","7ff3073e":"def qw_kappa_score(y_true, y_pred):\n    #y_true=tf.math.argmax(y_true, axis=1)\n    #y_pred=tf.math.argmax(y_pred, axis=1)\n    threshold = tf.constant([0.37757874193797547])\n    y_pred = tf.subtract(tf.reduce_sum(tf.cast(tf.math.greater(y_pred, threshold), dtype=tf.float32), axis=1), 1)\n    y_true = tf.subtract(tf.reduce_sum(y_true, axis=1), 1)\n    def sklearn_qwk(y_true, y_pred) -> np.float64:\n        return cohen_kappa_score(y_true, y_pred, weights='quadratic')\n    result = tf.compat.v1.py_func(sklearn_qwk, (y_true, y_pred), tf.double)\n    return tf.where(tf.math.is_nan(result), tf.constant([1.0], dtype=tf.double), result)","10bef5b7":"qw_kappa_score(tf.constant([[1.0,1.0,0.0],\n                            [1.0,0.0,0.0],\n                            [1.0,0.0,0.0]]),\n               tf.constant([[0.9,0.5,0.0],\n                            [0.9,0.3,0.0],\n                            [0.9,0.5,0.0]])\n               )","5095777d":"qw_kappa_score(tf.constant([[1.0,1.0,0.0],\n                            [1.0,0.0,0.0],\n                            [1.0,0.0,0.0]]),\n               tf.constant([[0.9,0.5,0.0],\n                            [0.9,0.3,0.0],\n                            [0.9,0.5,0.0]])\n               ).numpy()","458cdf31":"qw_kappa_score(tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]]), \n               tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]]))","4adf9ecb":"qw_kappa_score(tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]]), \n               tf.constant([[0.0,0.0,0.0],\n                            [0.0,0.0,0.0],\n                            [0.0,0.0,0.0]])).numpy()","6605921a":"# Imports","33c522a8":"# Sklearn","81916a8b":"### nan handling","4c5a33a2":"# TensorFlow\n\n### no nan handling"}}