{"cell_type":{"cbdf82ce":"code","41792de6":"code","25177dc1":"code","366a50ae":"code","eafcc451":"code","8a1f614d":"markdown","0bf1d7bd":"markdown","7866968b":"markdown"},"source":{"cbdf82ce":"\nimport numpy as np\nimport math\nimport pandas as pd\nimport matplotlib.pyplot as plt","41792de6":"# k = no of clusters\n# each data point is of dimension n\n# for m data points shape of X is (m,n)\n# shape of centroids is (k,n)\n\ndef assignCluster(X,k,centroids):\n    m=len(X)\n    cluster_ids=[0]*m # array denoting cluster id of each data point\n    for i in range(m):\n        distances=[0]*k\n        for j in range(k): #find distance of x with each centroid\n            distances[j]=np.linalg.norm(X[i]-centroids[j])\n        cluster_ids[i]=np.argmin(distances) #assign cluster id corresponding to closest centroid\n    return cluster_ids\n\ndef getCentroids(X,k,cluster_ids):\n    n=len(X[0])\n    # use dataframe groupby function to get centroids as follows\n    df=pd.DataFrame(X)\n    df['cluster_ids']=cluster_ids\n    df=df.groupby(['cluster_ids']).mean()\n    centroids=np.array(df.values)\n    #Shape of centroids centroids.shape = (k,n)\n    return centroids\n\ndef kMeans(X,k,centroids,tol):\n    cluster_ids=assignCluster(X,k,centroids) # assign clusters for the initial centroids\n    curr_tol=math.inf\n    n_iter=0\n    while curr_tol >= tol: # stopping criteria\n        curr_centroids=centroids # store the values of previous centroids\n        centroids=getCentroids(X,k,cluster_ids) # recalculate centroids of the clusters\n        cluster_ids=assignCluster(X,k,centroids) # assign clusters to observations\n        curr_tol=np.max(abs(curr_centroids-centroids)) #\n        n_iter+=1\n    return cluster_ids\n","25177dc1":"# Generate random data\nX1=np.random.multivariate_normal([0,-5], [[8,0.5],[0.5,9]], 120)\nX2=np.random.multivariate_normal([15,9], [[8,0.5],[0.5,9]], 150)\nX3=np.random.multivariate_normal([5,25], [[8,0.5],[0.5,9]], 100)\nX=np.append(X1,np.append(X2,X3,axis=0),axis=0)\nplt.scatter(X[:,0],X[:,1],marker='.',c='black')\nplt.xlabel('x1')\nplt.ylabel('x2')\nplt.show()","366a50ae":"# initialise centroids and run for k=3\nk=3\ntol=1e-3\ncentroids=np.array([[10,30],[25,-5],[-5,10]])\ncluster_ids_k3=kMeans(X,k,centroids,tol)\n\n# initialise centroids and run for k=4\nk=4\ntol=1e-3\ncentroids=np.array([[10,30],[25,-5],[0,0],[4,3]])\ncluster_ids_k4=kMeans(X,k,centroids,tol)","eafcc451":"# Visualise the scatter plot of the clusters\ndef plotIt(X,cluster_ids,k,ax):\n    arr=[[] for i in range(k)]\n    for i in range(len(X)):\n        arr[cluster_ids[i]].append(X[i])\n    for i in range(k):\n        ar1=np.array(arr[i])\n        ax.scatter(ar1[:,0],ar1[:,1],label='cluster '+str(i+1))\n    ax.set_xlabel('x1')\n    ax.set_ylabel('x2')\n    ax.set_title('kMeans: k='+str(k))\n    ax.legend(loc=1)\n    \nfig,axes=plt.subplots(figsize=(14,7),ncols=2)\nplotIt(X,cluster_ids_k3,3,axes[1])\nplotIt(X,cluster_ids_k4,4,axes[0])","8a1f614d":"#### Author: Rudransh Jaiswal\n","0bf1d7bd":"# K Means Clustering\n\n### Given an initial set of k centroids (c[0],c[1],...,c[k-1]) the algorithm proceeds by alternating between these two steps:\n\n\n#### 1. Assignment Step: Assign each data point (obseravtion) to the cluster corresponding to closest centroid:\n \n$\\begin{align}S_{i}^{(t)}\\end{align}$\nis cluster correspoding to centroid c[i] at iteration t\n\n$\\begin{equation*}\nS_{i}^{(t)}={\\big \\{}x_{p}:i=argmin_{i}{\\big \\|}x_{p}-c_{i}^{(t)}{\\big \\|}^{2}; 0\\leq i\\leq k-1{\\big \\}}\n\\end{equation*}$\n\nThat is we assign an observation $\\begin{align}x\\end{align}$ to cluster$\\begin{align}S_{i_{o}}^{(t)}\\end{align}$ where $\\begin{align}i_{o}=argmin_{i}{\\big \\|}x-c_{i}^{(t)}{\\big \\|}^{2}\\end{align}$. \n\nIn simple terms c[$\\begin{align}i_{o}\\end{align}$] is the closest centroid to the obsevation $\\begin{align}x\\end{align}$\n\n#### 2. Update Step: Recalculate centroids for observations assigned to each cluster:\n\n$\n\\begin{equation*}\n{\\displaystyle c_{i}^{(t+1)}={\\frac {1}{\\left|S_{i}^{(t)}\\right|}}\\sum _{x_{j}\\in S_{i}^{(t)}}x_{j}}\n\\end{equation*}\n$\n\nWe recalculate the mean (centroid) of the clusters obtained after the Assignment Step\n\n#### The algorithm converges when the assignments no longer change. In practice we iterate until the change is within a specified tolerance.","7866968b":"# Lets Run it"}}