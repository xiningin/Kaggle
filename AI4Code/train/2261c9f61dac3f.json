{"cell_type":{"d7d25cb8":"code","5589eba6":"code","e0789a9b":"code","d11cff95":"code","b192c808":"code","2f9de41f":"markdown","cda2daf7":"markdown"},"source":{"d7d25cb8":"#!wget https:\/\/manning-content.s3.amazonaws.com\/download\/3\/29c6e49-7df6-4909-ad1d-18640b3c8aa9\/MLiA_SourceCode.zip\n#!unzip -o \/kaggle\/working\/MLiA_SourceCode.zip\n!ls \/kaggle\/working\/machinelearninginaction","5589eba6":"!python -V","e0789a9b":"# KNN\u7b97\u6cd5\nfrom numpy import *\nimport operator\n\ndef createDataset():\n    group = array([[1.0, 1.1], [1.0, 1.0], [0, 0], [0, 0.1]])\n    labels = ['A', 'A', 'B', 'B']\n    return group, labels\n\ndef classify0(inX, dataSet, labels, k):\n    dataSetSize = dataSet.shape[0]\n    diffMat = tile(inX, (dataSetSize, 1)) - dataSet\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistIndicies = distances.argsort()\n    classCount = {}\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1\n    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)\n    return sortedClassCount[0][0]\n\ngroup, labels = createDataset()\nprint(classify0([1,1], group, labels, 3))","d11cff95":"# KNN\u7b97\u6cd5\u4e4b\u5e94\u7528\u4e00\uff1a\u6539\u8fdb\u7ea6\u4f1a\u7f51\u7ad9\u7684\u914d\u5bf9\u6548\u679c\n# 1.\u6536\u96c6\u6570\u636e\uff0c\u6570\u636e\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u5728machinelearninginaction\/Ch02\/datingTestSet2.txt\n!head -3 \/kaggle\/working\/machinelearninginaction\/Ch02\/datingTestSet2.txt\n\nfrom numpy import *\nimport operator\nfrom os import listdir\n\n# 2.\u51c6\u5907\u6570\u636e\ndef file2matrix(filename):\n    \"\"\"\n    2.\u51c6\u5907\u6570\u636e\uff0c\u4ece\u6587\u672c\u4e2d\u89e3\u6790\u6570\u636e\n    \u6837\u672c\u6570\u636e\u5728machinelearninginaction\/Ch02\/datingTestSet2.txt\u4e2d\n    \u5305\u542b\u4e09\u79cd\u7279\u5f81\uff1a\u98de\u884c\u91cc\u7a0b\u6570\u3001\u6e38\u620f\u65f6\u95f4\u6240\u5360\u767e\u5206\u6bd4\u3001\u6bcf\u5468\u6d88\u8017\u51b0\u6dc7\u6dcb\u7684\u516c\u5347\u6570\n    \"\"\"\n    fr = open(filename)\n    arrayOLines = fr.readlines()\n    numberOfLines = len(arrayOLines)\n    returnMat = zeros((numberOfLines, 3))\n    classLabelVector = []\n    index = 0\n    for line in arrayOLines:\n        line = line.strip()\n        listFromLine = line.split('\\t')\n        returnMat[index, :] = listFromLine[0:3]\n        classLabelVector.append(int(listFromLine[-1]))\n        index += 1\n    return returnMat, classLabelVector\n\ndef autoNorm(dataSet):\n    \"\"\"\n    2.\u51c6\u5907\u6570\u636e\uff0c\u5f52\u4e00\u5316\n    \"\"\"\n    minVals = dataSet.min(0)\n    maxVals = dataSet.max(0)\n    ranges = maxVals - minVals\n    normDataSet = zeros(shape(dataSet))\n    m = dataSet.shape[0]\n    normDataSet = dataSet - tile(minVals, (m, 1))\n    normDataSet = normDataSet\/tile(ranges, (m, 1))\n    return normDataSet, ranges, minVals\n\n# 3. \u5206\u6790\u6570\u636e\nimport matplotlib\nimport matplotlib.pyplot as plt\ndatingDataMat, classLabels = file2matrix(\"\/kaggle\/working\/machinelearninginaction\/Ch02\/datingTestSet2.txt\")\nnormDatingDataMat, ranges, minVals = autoNorm(datingDataMat)\nfig = plt.figure()\na1 = fig.add_subplot(131)\na1.scatter(normDatingDataMat[:,0], normDatingDataMat[:, 1], 15.0 * array(classLabels), 15.0 * array(classLabels))\na2 = fig.add_subplot(132)\na2.scatter(normDatingDataMat[:,0], normDatingDataMat[:, 2], 15.0 * array(classLabels), 15.0 * array(classLabels))\na3 = fig.add_subplot(133)\na3.scatter(normDatingDataMat[:,1], normDatingDataMat[:, 2], 15.0 * array(classLabels), 15.0 * array(classLabels))\nplt.show()\n\n# 5. \u7b97\u6cd5\u6d4b\u8bd5\ndef datingClassTest():\n    hoRatio = 0.01\n    # \u8bad\u7ec3\u6837\u672c\u96c6\u5728machinelearninginaction\/Ch02\/datingTestSet.txt\n    datingDataMat, datingLabels = file2matrix(\"\/kaggle\/working\/machinelearninginaction\/Ch02\/datingTestSet2.txt\")\n    normMat, ranges, minVals = autoNorm(datingDataMat)\n    m = normMat.shape[0]\n    numTestVecs = int(m * hoRatio)\n    errorCount = 0.0\n    for i in range(numTestVecs):\n        classifierResult = classify0(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 3)\n        print(\"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, datingLabels[i]))\n        if (classifierResult != datingLabels[i]): errorCount += 1.0\n    print(\"the total error rate is : %f\" % (errorCount\/float(numTestVecs)))\n\n# KNN\u7b97\u6cd5\ndef classify0(inX, dataSet, labels, k):\n    dataSetSize = dataSet.shape[0]\n    diffMat = tile(inX, (dataSetSize, 1)) - dataSet\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistIndicies = distances.argsort()\n    classCount = {}\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1\n    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)\n    return sortedClassCount[0][0]\n\ndatingClassTest()","b192c808":"# \u51c6\u5907\u6837\u672c\u96c6&\u6d4b\u8bd5\u96c6\n!unzip -o \/kaggle\/working\/machinelearninginaction\/Ch02\/digits.zip -d \/kaggle\/working\/machinelearninginaction\/Ch02\/\n\nfrom numpy import *\nimport operator\n\n# KNN\u7b97\u6cd5\ndef classify0(inX, dataSet, labels, k):\n    dataSetSize = dataSet.shape[0]\n    diffMat = tile(inX, (dataSetSize, 1)) - dataSet\n    sqDiffMat = diffMat**2\n    sqDistances = sqDiffMat.sum(axis=1)\n    distances = sqDistances**0.5\n    sortedDistIndicies = distances.argsort()\n    classCount = {}\n    for i in range(k):\n        voteIlabel = labels[sortedDistIndicies[i]]\n        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1\n    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)\n    return sortedClassCount[0][0]\n\ndef img2vector(filename):\n    \"\"\"\n    \u5c06\u9884\u5148\u5904\u7406\u597d\u7684\u6570\u5b57\u6587\u4ef6[32*32]\u7684\u4e8c\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a[1*1024]\u7684\u4e00\u7ef4\u6570\u7ec4\n    \"\"\"\n    returnVect = zeros((1,1024))\n    fr = open(filename)\n    for i in range(32):\n        lineStr = fr.readline()\n        for j in range(32):\n            returnVect[0,32*i+j] = int(lineStr[j])\n    return returnVect\n\ndef handwritingClassTest():\n    hwLabels = []\n    trainingFileList = listdir('\/kaggle\/working\/machinelearninginaction\/Ch02\/trainingDigits')           #load the training set\n    m = len(trainingFileList)\n    trainingMat = zeros((m,1024))\n    for i in range(m):\n        fileNameStr = trainingFileList[i]\n        fileStr = fileNameStr.split('.')[0]     #take off .txt\n        classNumStr = int(fileStr.split('_')[0])\n        hwLabels.append(classNumStr)\n        trainingMat[i,:] = img2vector('\/kaggle\/working\/machinelearninginaction\/Ch02\/trainingDigits\/%s' % fileNameStr)\n    testFileList = listdir('\/kaggle\/working\/machinelearninginaction\/Ch02\/testDigits')        #iterate through the test set\n    errorCount = 0.0\n    mTest = len(testFileList)\n    for i in range(mTest):\n        fileNameStr = testFileList[i]\n        fileStr = fileNameStr.split('.')[0]     #take off .txt\n        classNumStr = int(fileStr.split('_')[0])\n        vectorUnderTest = img2vector('\/kaggle\/working\/machinelearninginaction\/Ch02\/testDigits\/%s' % fileNameStr)\n        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3)\n        print(\"the classifier came back with: %d, the real answer is: %d\" % (classifierResult, classNumStr))\n        if (classifierResult != classNumStr): errorCount += 1.0\n    print(\"\\nthe total number of errors is: %d\" % errorCount)\n    print(\"\\nthe total error rate is: %f\" % (errorCount\/float(mTest)))\n    \nhandwritingClassTest()","2f9de41f":"\u5b9e\u9645\u5e94\u7528:\u624b\u5199\u6570\u5b57\u8bc6\u522b","cda2daf7":"KNN\u7b97\u6cd5\uff1a\u91c7\u7528\u6d4b\u91cf\u4e0d\u901a\u7279\u5f81\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb\u65b9\u6cd5\u8fdb\u884c\u5206\u7c7b\u3002\n\n\u5de5\u4f5c\u539f\u7406\uff1a\u5b58\u5728\u4e00\u4e2a\u6837\u672c\u6570\u636e\u96c6\u5408\uff0c\u4e5f\u79f0\u4e3a**\u8bad\u7ec3\u6837\u672c\u96c6**\uff0c\u5e76\u4e14\u6837\u672c\u96c6\u4e2d\u6bcf\u4e2a\u6570\u636e\u90fd\u5b58\u5728**\u6807\u7b7e**\u3002\u8f93\u5165\u6ca1\u6709\u6807\u7b7e\u7684\u6570\u636e\u540e\uff0c\u5c06\u65b0\u6570\u636e\u7684\u6bcf\u4e2a\u7279\u5f81\u4e0e\u6837\u672c\u96c6\u4e2d\u6570\u636e\u5bf9\u5e94\u7684\u7279\u5f81\u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u7b97\u6cd5\u63d0\u53d6\u6837\u672c\u96c6\u4e2d\u7279\u5f81\u6700\u76f8\u4f3c\u6570\u636e\u7684\u5206\u7c7b\u6807\u7b7e\u3002\u6700\u540e\uff0c\u9009\u62e9K\u4e2a\u6700\u76f8\u4f3c\u6570\u636e\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5206\u7c7b\u6807\u7b7e\uff0c\u4f5c\u4e3a\u65b0\u6570\u636e\u7684\u6807\u7b7e\u3002\n* \u4f18\u70b9\uff1a\u7cbe\u5ea6\u9ad8\u3001\u5bf9\u5f02\u5e38\u503c\u4e0d\u7720\u5e72\u3001\u65e0\u6570\u636e\u8f93\u5165\u5047\u5b9a\n* \u7f3a\u70b9\uff1a\u8ba1\u7b97\u590d\u6742\u5ea6\u9ad8\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8\n* \u9002\u7528\u6570\u636e\u8303\u56f4\uff1a\u6570\u503c\u578b\u548c\u5bf9\u6807\u578b\n~~~~\nKNN\u7b97\u6cd5\u7684\u4e00\u822c\u6d41\u7a0b\n1. \u6536\u96c6\u6570\u636e\uff1a\u53ef\u4ee5\u9002\u7528\u4efb\u4f55\u65b9\u6cd5\u3002\n2. \u51c6\u5907\u6570\u636e\uff1a\u8ddd\u79bb\u8ba1\u7b97\u6240\u9700\u8981\u7684\u6570\u503c\uff0c\u6700\u597d\u662f\u7ed3\u6784\u5316\u7684\u6570\u636e\u683c\u5f0f\u3002\n3. \u5206\u6790\u6570\u636e\uff1a\u53ef\u4ee5\u9002\u7528\u4efb\u4f55\u65b9\u6cd5\u3002\n4. \u8bad\u7ec3\u7b97\u6cd5\uff1a\u7565\u3002\uff08\u8be5\u6b65\u4e0d\u9002\u7528\u4e8eKNN\u7b97\u6cd5\uff09\n5. \u6d4b\u8bd5\u7b97\u6cd5\uff1a\u8ba1\u7b97\u9519\u8bef\u7387\u3002\n6. \u9002\u7528\u7b97\u6cd5\uff1a\u9996\u5148\u9700\u8981\u8f93\u5165\u6837\u672c\u6570\u636e\u548c\u7ed3\u6784\u5316\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u7136\u540e\u8fd0\u884cKNN\u7b97\u6cd5\u5224\u5b9a\u8f93\u5165\u6570\u636e\u5206\u522b\u5c5e\u4e8e\u54ea\u4e2a\u5206\u7c7b\uff0c\u6700\u540e\u5e94\u7528\u4e8e\u8ba1\u7b97\u51fa\u7684\u5206\u7c7b\u6267\u884c\u540e\u7eed\u7684\u5904\u7406\u3002"}}