{"cell_type":{"4c2bd688":"code","3308b3b6":"code","5979e901":"code","9f47221a":"code","937a15aa":"code","47875e57":"code","a8049e0d":"code","4be28b59":"code","557b893d":"code","20fd3de6":"code","a706191e":"code","e41a4dd1":"code","441773fd":"code","5ec89495":"code","aec0acb8":"code","0bfbbca9":"code","19fa7aa9":"code","240e1304":"code","eb292acd":"code","3f0fdb96":"code","2d9aaeb9":"code","db36354c":"code","654a14d5":"markdown","8a8d9339":"markdown","7afe80e4":"markdown","f8216281":"markdown","b4fc4ac2":"markdown"},"source":{"4c2bd688":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","3308b3b6":"print('Loading data...')\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","5979e901":"print(train.shape)\nprint(test.shape)","9f47221a":"train.head()","937a15aa":"test.head()","47875e57":"train_X = train.iloc[:, 1:].values.astype('float32') #pixel_0 to 778\ntrain_y = train.iloc[:, 0].values.astype('int') #label\ntest_X = test.values.astype('float32') #pixel_0 to _778","a8049e0d":"import chainer\nimport chainer.links as L\nimport chainer.functions as F\nfrom chainer.dataset.convert import concat_examples","4be28b59":"class MLP(chainer.Chain):\n    def __init__(self, n_hidden, n_out):\n        super (MLP, self).__init__(\n            l1 = L.Linear(None, n_hidden),\n            l2 = L.Linear(n_hidden, n_hidden),\n            l3 = L.Linear(n_hidden, n_out),)\n            \n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\nprint('Constructing model...')\nhidden_dim = 32  # Hidden dim for neural network\nout_dim = 10     # Number of labels to classify, it is 10 for MNIST task.\n\nmodel = MLP(hidden_dim, out_dim)","557b893d":"#aprint(model(train_X).data)","20fd3de6":"from chainer import optimizers\n#https:\/\/docs.chainer.org\/en\/stable\/reference\/optimizers.html","a706191e":"optimizer = optimizers.Adam()\noptimizer.setup(model)","e41a4dd1":"from chainer import iterators\n#https:\/\/docs.chainer.org\/en\/stable\/reference\/generated\/chainer.iterators.MultiprocessIterator.html","441773fd":"#train data: 42000 \nbatch_size = 420","5ec89495":"dataset_train = []\nfor X, y in zip(train_X, train_y):\n    dataset_train.append((X, y))\ntrain_iterator = iterators.SerialIterator(\n    dataset_train, \n    batch_size\n)","aec0acb8":"#print(train_iterator.epoch)\n#print(len(train_iterator.next()))\n\n#for i in range(1000):\n#    train_iterator.next()\n#print(train_iterator.epoch)","0bfbbca9":"from chainer.datasets import TupleDataset\nfrom sklearn.model_selection import train_test_split\nfrom chainer import Variable","19fa7aa9":"X_train, X_val, y_train, y_val= train_test_split(train_X, train_y, \n                                                 test_size=0.20, \n                                                 random_state=42)\n\ntrain_dataset = TupleDataset(X_train, y_train)","240e1304":"print(train_dataset.__getitem__(10))","eb292acd":"train_accuracy_log = []\nval_accuracy_log = []\n\nmax_epoch = 10\n\nwhile train_iterator.epoch < max_epoch:\n    #Prepare batch data\n    batch = train_iterator.next()\n    X_batch, y_batch = chainer.dataset.concat_examples(batch)\n    \n    #Calculate the cost\n    train_y_preds = model(X_batch)\n    train_loss = F.softmax_cross_entropy(train_y_preds, y_batch)\n    \n    #Learning\n    model.cleargrads()\n    train_loss.backward()\n    optimizer.update()\n    \n    #Check accuracy\n    train_accuracy = F.accuracy(train_y_preds, y_batch)\n    train_accuracy_log.append(float(train_accuracy.data))\n    \n    #Check val accuracy and generalization performance\n    if train_iterator.is_new_epoch:\n        print('******************'*5)\n        val_y_preds = model(X_val)\n        val_loss = F.softmax_cross_entropy(val_y_preds, y_val)\n        val_accuracy = F.accuracy(val_y_preds, y_val)\n        \n        val_accuracy_log.append(float(val_accuracy.data))\n        \n        print('epoch{} train_accuracy:{}, val_accuracy:{}'.\\\n              format(train_iterator.epoch,\n                     train_accuracy.data,\n                     val_accuracy.data))\n    \n    \n    ","3f0fdb96":"plt.plot(range(len(train_accuracy_log)), \n         train_accuracy_log)\nplt.plot(range(100, len(val_accuracy_log)*101, 100),\n         val_accuracy_log, color='red')\nplt.show()","2d9aaeb9":"test_y_preds = model(test_X)\ntest_y_preds= test_y_preds.data\nprint(test_y_preds.shape)","db36354c":"print('Saving submission file \u2026')\n\ntest_y_preds = np.argmax(test_y_preds,axis = 1)\n\ntest_y_preds = pd.Series(test_y_preds,name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),test_y_preds],axis = 1)\nsubmission.to_csv('submission_mlp.csv', index_label=False, index=False)\n\n","654a14d5":"#### Define optization algorithm","8a8d9339":"#### Define Multi layer Perceptron(MLP) Network","7afe80e4":"This is the Kernel for practicing chainer by Kaggle Digit Recognizer.\nI am a beginner in python. Many thanks for this Kernel.\nhttps:\/\/www.kaggle.com\/corochann\/simple-deep-learning-with-chainer-by-sklearn-if","f8216281":"#### Load data","b4fc4ac2":"#### Implement learning iteration"}}