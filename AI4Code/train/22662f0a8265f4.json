{"cell_type":{"603a538d":"code","aa31b346":"code","c60fc800":"code","59caae39":"code","b78e4e37":"code","1986aadb":"code","d0f5562a":"code","1f013692":"code","9b88767a":"code","cd4cec99":"code","ae386124":"code","743c0d1b":"code","9a646e80":"code","c4adac11":"code","1ffde8df":"code","7f11ffbe":"code","8a1c4391":"code","0c34cb08":"code","f81d3650":"code","ab3a8f36":"code","d808c2d2":"code","91f65dd7":"code","b573c73c":"code","99ca9af0":"code","ab7d10af":"code","c1789e1e":"code","92ec61ec":"code","ae43218d":"code","71db7a6f":"code","8fede4ea":"code","ecfc9ec6":"code","86ad3469":"code","fcefa98c":"code","d48b3fd5":"markdown","49989fd2":"markdown","effebcac":"markdown","4e04f40d":"markdown","b9733bc3":"markdown","713c944e":"markdown","545bd3a8":"markdown","ccdaa8e0":"markdown","75f66dce":"markdown","ca5e6b8b":"markdown","025e8ef4":"markdown","ca8e5dff":"markdown","32d47551":"markdown","98b254cb":"markdown","73d5dfc4":"markdown","4273b756":"markdown","6a67566d":"markdown","29877c6c":"markdown","a7303409":"markdown","c35dc79a":"markdown","31ac6b5e":"markdown","7b119461":"markdown","39af2920":"markdown","478db66e":"markdown","9473d01b":"markdown","4ab35804":"markdown","bc50017b":"markdown","d7286038":"markdown","9f3dea0f":"markdown"},"source":{"603a538d":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport math\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nimport itertools\nimport warnings\nwarnings.filterwarnings('ignore')","aa31b346":"filename = '..\/input\/pune_1965_to_2002.csv'","c60fc800":"rainfall_data_matrix = pd.read_csv(filename)\nrainfall_data_matrix.set_index('Year', inplace=True)\nrainfall_data_matrix = rainfall_data_matrix.transpose()\nrainfall_data_matrix","59caae39":"dates = pd.date_range(start='1965-01', freq='MS', periods=len(rainfall_data_matrix.columns)*12)\ndates","b78e4e37":"plt.figure(figsize=(13,7))\nplt.plot(rainfall_data_matrix)\nplt.xlabel('Year')\nplt.ylabel('Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","1986aadb":"plt.figure(figsize=(10,5))\nplt.boxplot(rainfall_data_matrix)\nplt.xlabel('Month')\nplt.ylabel('Monthly mean Precipitation(mm)')\nplt.title('Month vs Precipitation across all years')","d0f5562a":"rainfall_data_matrix_np = rainfall_data_matrix.transpose().as_matrix()\n\nshape = rainfall_data_matrix_np.shape\nrainfall_data_matrix_np = rainfall_data_matrix_np.reshape((shape[0] * shape[1], 1))","1f013692":"rainfall_data = pd.DataFrame({'Precipitation': rainfall_data_matrix_np[:,0]})\nrainfall_data.set_index(dates, inplace=True)\n\ntest_rainfall_data = rainfall_data.ix['1995': '2002']\nrainfall_data = rainfall_data.ix[: '1994']\nrainfall_data.head()","9b88767a":"plt.figure(figsize=(20,5))\nplt.plot(rainfall_data, color='blue')\nplt.xlabel('Year')\nplt.ylabel('Monthly mean Precipitation(mm)')\nplt.title('Precipitation in mm')","cd4cec99":"plt.figure(figsize=(20,5))\nplt.plot(rainfall_data.ix[:60], color='blue')\nplt.xlabel('Year')\nplt.ylabel('Monthly mean Precipitation(mm)')\nplt.title('Precipitation in mm')","ae386124":"scaler = MinMaxScaler(feature_range=(0, 1))\n\ntrain_data = scaler.fit_transform(rainfall_data)\ntest_data = scaler.fit_transform(test_rainfall_data)","743c0d1b":"rainfall_data.head()","9a646e80":"train_data[:5]","c4adac11":"scaler.inverse_transform(train_data[:5])","1ffde8df":"print(\"Shape of train data: \" + str(train_data.shape))\nprint(\"Shape of test data: \" + str(test_data.shape))","7f11ffbe":"def create_dataset(dataset, look_back=1):\n    dataX, dataY = [], []\n\n    for i in range(len(dataset)-look_back-1):\n        a = dataset[i:(i+look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    \n    return np.array(dataX), np.array(dataY)","8a1c4391":"look_back = 3\ntrainX, trainY = create_dataset(train_data, look_back)\ntestX, testY = create_dataset(test_data, look_back)","0c34cb08":"print(\"Shape of train input: \" + str(trainX.shape))\nprint(\"Shape of train labels: \" + str(trainY.shape))\nprint(\"Shape of test input: \" + str(testX.shape))\nprint(\"Shape of test labels: \" + str(testY.shape))","f81d3650":"trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))","ab3a8f36":"print(\"Shape of train input: \" + str(trainX.shape))\nprint(\"Shape of train labels: \" + str(trainY.shape))\nprint(\"Shape of test input: \" + str(testX.shape))\nprint(\"Shape of test labels: \" + str(testY.shape))","d808c2d2":"model = Sequential()\nmodel.add(LSTM(4, input_shape=(1, look_back)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')","91f65dd7":"from IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\n\ndef plot_keras_model(model, show_shapes=True, show_layer_names=True):\n    return SVG(model_to_dot(model, show_shapes=show_shapes, show_layer_names=show_layer_names).create(prog='dot',format='svg'))\n\nplot_keras_model(model, show_shapes=True, show_layer_names=False)","b573c73c":"model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)","99ca9af0":"trainPredict = model.predict(trainX)\ntestPredict = model.predict(testX)","ab7d10af":"testPredict[:5]","c1789e1e":"trainPredict = scaler.inverse_transform(trainPredict)\ntrainY = scaler.inverse_transform([trainY])\ntestPredict = scaler.inverse_transform(testPredict)\ntestY = scaler.inverse_transform([testY])","92ec61ec":"trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))","ae43218d":"dates = pd.date_range(start='1965-04', freq='MS', periods=trainY.shape[1])","71db7a6f":"trainActual = pd.DataFrame({'Precipitation': trainY[0]})\ntrainActual.index = dates\n\ntrainPredictdf = pd.DataFrame({'Precipitation': trainPredict[:,0]})\ntrainPredictdf.index = dates","8fede4ea":"plt.figure(figsize=(20,5))\nplt.plot(trainActual, color='blue', label='Actual values')\nplt.plot(trainPredictdf, color='red', label='Predicted')\nplt.title('Train data: Precipitation vs Year')\nplt.xlabel('Year')\nplt.ylabel('Precipitation')\nplt.legend(loc='best')","ecfc9ec6":"testDates = pd.date_range(start=test_rainfall_data.index[0] + 3, freq='MS', periods=test_rainfall_data.shape[0] - look_back - 1)","86ad3469":"testActual = pd.DataFrame({'Precipitation': testY[0]})\ntestActual.index = testDates\n\ntestPredictdf = pd.DataFrame({'Precipitation': testPredict[:,0]})\ntestPredictdf.index = testDates","fcefa98c":"plt.figure(figsize=(20,5))\nplt.plot(testActual, color='orange', label='Actual future values')\nplt.plot(testPredictdf, color='red', label='Forecast')\nplt.title('Test data: Precipitation vs Year')\nplt.xlabel('Year')\nplt.ylabel('Precipitation')\nplt.legend(loc='best')","d48b3fd5":"### Thanks for  reading. Please do UPVOTE if you find it useful.","49989fd2":"### Create Dataframes for actual values and predicted values of train data","effebcac":"### Predict values using the trained model","4e04f40d":"### Split the whole data into train(1965 - 1995) and test data(1995 - 2002)","b9733bc3":"## <center>Algorithm: LSTM(Long Short Term Memory) <\/center>\n- LSTM is widely used for sequential  type of data.\n- As the time series is sequential, we can apply LSTM which stores the information of previous data and long term dependencies.","713c944e":"### Box plot","545bd3a8":"### Reshape data","ccdaa8e0":"### Insights from the plot\n- The rainfall in the months November, December, January, February, March and April is very less.\n- The rainfall in the months June, July and August are high compared to rainfall in other months of the year. \n- We can observe the seasonality effect.","75f66dce":"### Plot the predicted values\n- Actual values - blue\n- Predicted values - red","ca5e6b8b":"### Plot the forecasted values","025e8ef4":"### Visualize the whole data","ca8e5dff":"[](http:\/\/)### Calculate Root Mean Square Error(RMSE) for train and test predictions","32d47551":"### Scale the data - (0 to 1)","98b254cb":"### Visualize data(zoomed version) - 5 years(1972 - 1977)","73d5dfc4":"### Create dataset\n- Convert time series data into input and labels.","4273b756":"### Create model using Keras","6a67566d":"### Visualize data","29877c6c":"# <center>Time Series Analysis on Pune precipitation data from 1965 to 2002.<\/center>","a7303409":"### Display the model","c35dc79a":"### Filename","31ac6b5e":"### Import libraries","7b119461":"### Genearete dates from 1965-01(January 1965) to 2002-12(December 2002)","39af2920":"### Train model using train data","478db66e":"### Create Dataframes for actual values and predicted values of test data","9473d01b":"### Generate Dates for index","4ab35804":"### Generate Dates for index","bc50017b":"### Data\n- Downloaded from http:\/\/www.indiawaterportal.org\/met_data\/\n- State: Maharashtra\n- District: PUNE\n- Data type: Precipitation\n- Data Range: Monthly mean precipitation for all the years from 1972 to 2002\n\n### Transpose data for easy visualiztion","d7286038":"### Inverse transform the data","9f3dea0f":"### LSTM"}}