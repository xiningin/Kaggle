{"cell_type":{"6d3656e9":"code","34321dc5":"code","5edcab26":"code","8d0d1158":"code","e1486d47":"code","ef162771":"code","9117ac51":"code","bacfe89d":"code","05543719":"code","596b3b71":"markdown","5d97fa2d":"markdown","8c4671ec":"markdown","f754402d":"markdown","e2c1d9ea":"markdown","888a3f7d":"markdown","0fb59add":"markdown","1855342a":"markdown","4dbe9424":"markdown","baa4097b":"markdown","2a0bd7d5":"markdown"},"source":{"6d3656e9":"#importing libraries\nimport os\nDataset=\"\/kaggle\/input\/face-mask-dataset\/data\"\nData_Dir=os.listdir(Dataset)\nprint(Data_Dir)","34321dc5":"import cv2\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split","5edcab26":"images=[]\nlabels=[]\nimg_rows=112\nimg_cols=112\nfor category in Data_Dir:\n    folder_path=os.path.join(Dataset,category)\n    for img in os.listdir(folder_path):\n        img_path=os.path.join(folder_path,img)\n        img=cv2.imread(img_path)\n        \n        try:\n            #concerting image to grayscale\n            grayscale_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n            \n            #resizing the gray scaled images into 56x56 to keep size of the image consistent\n            resized_img=cv2.resize(grayscale_img,(img_rows,img_cols))\n            images.append(resized_img)\n            labels.append(category)\n        except Exception as e:\n            print('Exception: ',e)\n            \nimages=np.array(images)\/255.0\nimages=np.reshape(images,(images.shape[0],img_rows,img_cols,1))\n        \n#perform one hot encoding \nlb=LabelBinarizer()\nlabels=lb.fit_transform(labels)\nlabels=to_categorical(labels)\nlabels=np.array(labels)\n(train_X,test_X,train_y,test_y)=train_test_split(images,labels,test_size=0.25,random_state=0)","8d0d1158":"num_classes=2\nbatch_size=32","e1486d47":"from keras.models import Sequential\nfrom keras.layers import Dense,Activation,Flatten,Dropout\nfrom keras.layers import Conv2D,MaxPooling2D","ef162771":"model=Sequential()\nmodel.add(Conv2D(64,(3,3),input_shape=(img_rows,img_cols,1)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(128,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(num_classes,activation='softmax'))\nprint(model.summary())","9117ac51":"from keras.optimizers import Adam\n\nepoch=50\nmodel.compile(loss='categorical_crossentropy',\n             optimizer=Adam(lr=0.001),\n             metrics=['accuracy'])","bacfe89d":"fitted_model=model.fit(\ntrain_X,\ntrain_y,\nepochs=epoch,\nvalidation_split=0.25)","05543719":"model.save('fm.h5')","596b3b71":"<a id=\"4\"><\/a>\n<font color=\"blue\" size=+2.5><b>2.1 Installation<\/b><\/font>\n* Numpy\n* Pandas\n* Matplotlib\n* Fastai","5d97fa2d":"<a id=\"5\"><\/a>\n<font color=\"blue\" size=+2.5><b>2.2 Library Import<\/b><\/font>","8c4671ec":"<a id=\"2\"><\/a>\n<font color=\"blue\" size=+2.5><b>1.2  What is CNN ?<\/b><\/font>\n<br\/>\n<br\/>\n![image.png](attachment:image.png)\n**CNN stands for Convolutional Neural Network which is a specialized neural network for processing data that has an input shape like a 2D matrix like images. CNN's are typically used for image detection and classification.**","f754402d":"<font size=\"+1\" color=red ><b>Please Upvote my kernel and keep it in your favourite section if you think it is helpful.<\/b><\/font>","e2c1d9ea":"<a id=\"5\"><\/a>\n\n\n<font color=\"blue\" size=+2.5><b>2. Library<\/b><\/font>","888a3f7d":"# Objective\nGoal of this kernel is following:\n- Learn how to implement FastAI on image data.\n- Learn how to implement CNN on custom data.\n- Learn how to Resnet to get better accuracy.\n- Provide Perfect Guide for all the tips and trick to implement CNN and get better accuracy as a Begineer.\n\nI have learned them from [FastAI](https:\/\/docs.fast.ai\/)","0fb59add":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of content<\/h3>\n\n<font color=\"blue\" size=+1><b>Introduction<\/b><\/font>\n* [1. What is CNN ?](#2)\n* [2. What is Transfer Learning ?](#3)    \n\n<font color=\"blue\" size=+1><b>Library<\/b><\/font>\n* [1. Installation](#4)\n* [2. Import Libraries ](#5)\n    \n<font color=\"blue\" size=+1><b> Load and view your data <\/b><\/font>\n* [1. Setting up path for training data ](#6)\n* [2. Data Loading For training ](#7)\n* [3. Data Explorations ](#8)\n* [4. Print Classes present in the data ](#9)\n\n<font color=\"blue\" size=+1><b> Create and train a model <\/b><\/font>\n* [1. Create Models ](#10)\n* [2. Train Model ](#11)\n* [3. Finding LR ](#12)\n* [4. Finetuning HyperParameter](#13)\n\n<font color=\"blue\" size=+1><b> Others <\/b><\/font>\n* [1. Interpret the results](#14)\n* [2. Prediction Using Trained Model](#15)\n* [3. Save and Load Model](#16)\n* [4. Sources](#17)","1855342a":"<a id=\"1\"><\/a>\n<font color=\"blue\" size=+2.5><b>Introduction<\/b><\/font>\n","4dbe9424":"<font size=\"+3\" color=blue><b> <center><u>Face Mask Detection using Transfer Learning <\/u><\/center><\/b><\/font>","baa4097b":"<a id=\"3\"><\/a>\n<font color=\"blue\" size=+2.5><b>1.3  What is Transfer Learning ?<\/b><\/font>\n<br\/>\n<br\/>\n![image.png](attachment:image.png)\n**Transfer learning is a machine learning technique where a model trained on one task is re-purposed on a second related task.**","2a0bd7d5":"![image.png](attachment:image.png)"}}