{"cell_type":{"d875c982":"code","3269398f":"code","af21dbc2":"code","02c7cc80":"code","c4e86def":"code","2bdcf8ca":"code","8a1e5a31":"code","9f812bb6":"code","e5b5148b":"code","c5ed56d9":"code","205a2a44":"code","cccb7de5":"code","b7360288":"code","803735a4":"code","bfcb6552":"code","b3cb7492":"code","c8e419d5":"code","f653dcc9":"code","bcaa0cab":"code","6237b14a":"code","299bc15d":"code","fa657322":"code","ac1f0bda":"code","f74d97c8":"code","d982b500":"code","5d4475d8":"code","46c82dae":"markdown"},"source":{"d875c982":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3269398f":"####################################\n# 1. Data Preprocessing\n####################################\n\n\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 10)\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nfrom operator import attrgetter\nimport matplotlib.colors as mcolors\n!pip install xlrd\n!pip install openpyxl","af21dbc2":"df_ = pd.read_excel('..\/input\/onlineretail1\/online_retail.xlsx',\n                   dtype={'CustomerID': str,\n                          'InvoiceID': str},\n                   parse_dates=['InvoiceDate'])","02c7cc80":"df=df_.copy()","c4e86def":"df.head()","2bdcf8ca":"df.shape","8a1e5a31":"df.info()","9f812bb6":"df.dropna(subset=[\"CustomerID\"],inplace=True)","e5b5148b":"df=df[[\"CustomerID\",\"InvoiceNo\",\"InvoiceDate\"]].drop_duplicates()","c5ed56d9":"df.shape","205a2a44":"####################################\n# 2. Creating retention matrix\n####################################","cccb7de5":"#1. Calculating unique orders for every customer\nn_orders = df.groupby(['CustomerID'])['InvoiceNo'].nunique()","b7360288":"#2.Number of customers who have placed orders more than once in the entire dataset\norders_perc=np.sum(n_orders>1)\/df[\"CustomerID\"].nunique()\n100*orders_perc","803735a4":"# 3. Catching order months\ndf[\"order_month\"]=df[\"InvoiceDate\"].dt.to_period(\"M\")","bfcb6552":"#4.Generating of cohort variable\ndf[\"cohort\"]=df.groupby(\"CustomerID\")[\"InvoiceDate\"].transform(\"min\").dt.to_period(\"M\")","b3cb7492":"#5.Extracting number of customers per month\ndf_cohort=df.groupby([\"cohort\",\"order_month\"]).agg(n_customers=(\"CustomerID\",\"nunique\")).reset_index(drop=False)","c8e419d5":"#6.Extracting period number\n(df_cohort.order_month-df_cohort.cohort).head()","f653dcc9":"df_cohort[\"period_number\"]=(df_cohort.order_month-df_cohort.cohort).apply(attrgetter(\"n\"))","bcaa0cab":"#7. generating cohort_pivot\ncohort_pivot=df_cohort.pivot_table(index=\"cohort\",columns=\"period_number\",values=\"n_customers\")","6237b14a":"cohort_size=cohort_pivot.iloc[:,0]","299bc15d":"#8.generating retention_matrix\nretention_matrix=cohort_pivot.divide(cohort_size,axis=0)","fa657322":"retention_matrix","ac1f0bda":"def create_retention_matrix(dataframe):\n    n_orders = dataframe.groupby(['CustomerID'])['InvoiceNo'].nunique()\n    dataframe['order_month'] = dataframe['InvoiceDate'].dt.to_period('M')\n    dataframe['cohort'] = dataframe.groupby('CustomerID')['InvoiceDate'] \\\n        .transform('min') \\\n        .dt.to_period('M')\n    df_cohort = dataframe.groupby(['cohort', 'order_month']) \\\n        .agg(n_customers=('CustomerID', 'nunique')) \\\n        .reset_index(drop=False)\n    df_cohort['period_number'] = (df_cohort.order_month - df_cohort.cohort).apply(attrgetter('n'))\n    cohort_pivot = df_cohort.pivot_table(index='cohort',\n                                         columns='period_number',\n                                         values='n_customers')\n\n    cohort_size = cohort_pivot.iloc[:, 0]\n    retention_matrix = cohort_pivot.divide(cohort_size, axis=0)\n    return retention_matrix\n","f74d97c8":"create_retention_matrix(df)","d982b500":"####################################\n# 3. Visualization of retention matrix with heatmap\n####################################","5d4475d8":"import seaborn as sns \nsns.axes_style(\"white\")\nfig,ax=plt.subplots(1,2,figsize=(12,8),sharey=True,\n                   gridspec_kw={\"width_ratios\":[1,11]}\n                    #to create the grid the subplots are placed on\n                   )\n#retention matrix\nsns.heatmap(retention_matrix,annot=True,fmt=\".0%\" #showing on percentage of expressions\n            ,cmap=\"RdYlGn\",ax=ax[1])\nax[1].set_title(\"monthly cohorts: user retention\",fontsize=16)\nax[1].set(xlabel=\"# of periods\",ylabel=\"\")\n# cohort size\ncohort_size_df = pd.DataFrame(cohort_size).rename(columns={0: 'cohort_size'})\nwhite_cmap = mcolors.ListedColormap(['white'])\nsns.heatmap(cohort_size_df,\n            annot=True,\n            cbar=False,  # we dont want cbar for second plot (right side colorful scaling)\n            fmt='g',\n            cmap=white_cmap,\n            ax=ax[0])\nfig.tight_layout()\nplt.show()","46c82dae":"############################################\n# KPI & COHORT ANALYSIS: RETENTION RATE\n############################################\n\n# RETENTION RATE'S KPI COHORT ANALYSIS IN 3 STEPS\n\n\n# 1. Data Preprocessing\n# 2. Creating retention matrix\n#    1. Calculating unique orders for every customer\n#    2. Number of customers who have placed orders more than once in the entire dataset\n#    3. Catching order months\n#    4. Generating of cohort variable\n#    5. Extracting number of customers per month\n#    6. Extracting period number\n#    7. Generating cohort_pivot\n#    8. Generating Retention_matrix\n# 3.Visualization of retention matrix with heatmap"}}