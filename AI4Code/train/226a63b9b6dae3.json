{"cell_type":{"e02c4171":"code","0594d89e":"code","abb51c05":"code","5dc06285":"code","1802fba7":"code","39637f97":"code","bcca3046":"code","ffc9ff03":"code","a41f9ac3":"code","d9863e4d":"code","80ba6e0f":"code","bc9714ea":"code","79c6b487":"code","43ae26cb":"code","c25e4746":"code","29d200df":"code","6d29eb79":"code","0c68395e":"code","3c69356b":"code","3c9a1481":"code","17792598":"code","69ab94b7":"code","fbd4b702":"code","e8f48631":"code","e8c1e5e9":"code","42cb9194":"code","2f9b3399":"code","638d42ba":"code","b5395946":"code","1db500e0":"code","117a6ac3":"code","d718496f":"code","9a9c417a":"code","40cea60b":"code","5b41c2a7":"code","1eb9e917":"code","886a0b42":"code","9ef3961a":"code","967027f7":"code","02e11f35":"code","2de07383":"code","b9c819cf":"code","891b0ddf":"code","e9bfd98b":"code","208aa40c":"code","f18ca6b0":"code","8dc20736":"code","dbca3648":"code","02dfd06a":"code","7842bef7":"code","0b44f829":"code","bebce1ae":"code","ce0aec10":"code","cba004c9":"code","90d50aa0":"code","d230750c":"code","da2a7ffa":"code","0400973d":"code","e22a79b1":"code","71602f88":"code","d3e87ddb":"code","8e970039":"code","00e727b3":"code","b7eb86bf":"code","0a18e8fc":"code","0a1c6b9d":"code","6aac3768":"code","f65accd1":"code","d33532a0":"code","dfe456d6":"code","bcb59363":"code","3d083860":"code","9004fa39":"code","468a1762":"markdown","59fc483e":"markdown","012197c5":"markdown","09b39a0d":"markdown"},"source":{"e02c4171":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0594d89e":"mls_salaries_df=pd.read_csv(\"\/kaggle\/input\/us-major-league-soccer-salaries\/mls-salaries-2017.csv\")\nmls_salaries_df\n","abb51c05":"mls_salaries_df.size\n","5dc06285":"mls_salaries_df.info","1802fba7":"mls_salaries_df.describe().round()","39637f97":"mls_salaries_df.max()","bcca3046":"mls_salaries_df.min()","ffc9ff03":"mls_salaries_df.dtypes","a41f9ac3":"mls_salaries_df.columns\n","d9863e4d":"\n#total salary per club in 2017\ntotal_salary=mls_salaries_df.groupby(\"club\").sum()\n\ntotal_salary","80ba6e0f":"type(total_salary)","bc9714ea":"total_salary.sort_values(by=\"base_salary\").plot()","79c6b487":"total_salary","43ae26cb":"mls_salaries_df","c25e4746":"mls_salaries_df.isnull().sum()","29d200df":"salaries=mls_salaries_df.dropna(subset=[\"club\"])","6d29eb79":"club_df  = salaries.set_index(\"club\")\nclub_df\n","0c68395e":"Atlanta = club_df.loc[\"ATL\",:]\nAtlanta","3c69356b":"Atlanta\n","3c9a1481":"Atlanta.dtypes","17792598":"Atlanta.shape","69ab94b7":"Atlanta.memory_usage","fbd4b702":"Atlanta.sort_values(by='base_salary')","e8f48631":"Atlanta.groupby('position').sum()\n","e8c1e5e9":"Atlanta.groupby('position').max('base_salary')\n\n","42cb9194":"Atlanta.max()","2f9b3399":"Atlanta.groupby('position').min()","638d42ba":"all_teams_df= mls_salaries_df\nall_teams_df.groupby(['club','position']).max(['base_salary'])\n\n#all_teams_df.groupby('position').max(['base_salary'])","b5395946":"Atlanta\n","1db500e0":"Atlanta[(Atlanta.position == \"GK\") & (Atlanta.base_salary == Atlanta.base_salary.max())]\n","117a6ac3":"Atlanta[(Atlanta.position == \"D\") & (Atlanta.base_salary == Atlanta.base_salary.max())]\n\n","d718496f":"Atlanta[(Atlanta.position == \"M\") & (Atlanta.base_salary == Atlanta.base_salary.max())]\n","9a9c417a":"Atlanta[(Atlanta.position == \"F\") & (Atlanta.base_salary == Atlanta.base_salary.max())]","40cea60b":" Atlanta.groupby('position')['base_salary'].idxmax()","5b41c2a7":"Atlanta_pos = Atlanta.set_index(\"position\")","1eb9e917":"Atlanta_pos","886a0b42":"Atlanta_pos.reset_index(inplace=True)","9ef3961a":"Atlanta_pos","967027f7":"#df.loc[df.groupby([\"sp\", \"mt\"])[\"count\"].idxmax()] \n#Atlanta_pos[Atlanta_pos.groupby([\"position\"])[\"base_salary\"].idxmax()]\n#Atlanta_pos[Atlanta_pos.groupby([\"position\"]).sum()]\n\nmax_value = Atlanta_pos[\"base_salary\"].max()\n","02e11f35":"max_value","2de07383":"max_index = Atlanta_pos[\"base_salary\"].idxmax()","b9c819cf":"max_index","891b0ddf":"group_max_idx= Atlanta_pos.groupby(by=\"position\").idxmax()","e9bfd98b":"group_max_idx","208aa40c":"group_max_idx= Atlanta_pos.groupby(by=\"position\")[\"base_salary\"].idxmax()","f18ca6b0":"group_max_idx","8dc20736":"type(group_max_idx)","dbca3648":"Atlanta_pos.iloc[group_max_idx,:]","02dfd06a":"groups_max_idx= Atlanta_pos.groupby(by=\"position\")[\"guaranteed_compensation\"].idxmax()","7842bef7":"groups_max_idx","0b44f829":"Atlanta_pos.iloc[groups_max_idx].sort_values(by=['base_salary'])","bebce1ae":"summary_df = Atlanta_pos.iloc[groups_max_idx].sort_values(by=['base_salary'])\nsummary_df.set_index(\"position\", inplace=True)","ce0aec10":"summary_df","cba004c9":"nsummary_df = Atlanta_pos.iloc[groups_max_idx].sort_values(by=['guaranteed_compensation'])","90d50aa0":"nsummary_df","d230750c":"nsummary_df.plot(x=\"position\", y=\"guaranteed_compensation\", ylabel=\"compensation\", kind=\"bar\", title=\"Atlanta\")","da2a7ffa":"# parse league list to only NY RedBulls\nNYRedBulls_df = mls_salaries_df.set_index(\"club\").loc[\"NYRB\",:]\nNYRedBulls_df","0400973d":"# reset index so idxmax() can be used to extract max values row\n# note after groupby can't reset index\nNYRedBulls_df.reset_index(inplace=True)\nNYRedBulls_df","e22a79b1":"# group new dataframe by position & get max value (compensation) index row number\ngrouped_NYRB = NYRedBulls_df.groupby(by=\"position\")['guaranteed_compensation'].idxmax()","71602f88":"# reset index so idxmax() can be used to extract max values row\ngrouped_NYRB","d3e87ddb":"NYRB_summary_df = NYRedBulls_df.iloc[grouped_NYRB].sort_values(by=['guaranteed_compensation'])","8e970039":"NYRB_summary_df","00e727b3":"NYRB_summary_df.plot(x=\"position\", y=\"guaranteed_compensation\", ylabel=\"compensation\", kind=\"bar\", title=\"NYRB\")","b7eb86bf":"teams_df = mls_salaries_df.groupby(by=[\"club\"]).sum()","0a18e8fc":"teams_df.index","0a1c6b9d":"team = input(\"Enter club initials:\")\n","6aac3768":"team","f65accd1":"print(\"Here's the list of teams:\")\nteams_df.index","d33532a0":"# parse league list to only show club of interest\nprint(\"2017 roster and associated salaries\")\nsome_team_df = mls_salaries_df.set_index(\"club\").loc[team,:]\nsome_team_df","dfe456d6":"# reset index so idxmax() can be used to extract max values row\n# note after groupby can't reset index\nsome_team_df.reset_index(inplace=True)\nsome_team_df","bcb59363":"# group new dataframe by position & get max value (compensation) index row number\ngrouped_some_team = some_team_df.groupby(by=\"position\")['guaranteed_compensation'].idxmax()\n# reset index so idxmax() can be used to extract max values row\ngrouped_some_team\n","3d083860":"team_max_df = some_team_df.iloc[grouped_some_team].sort_values(by=['guaranteed_compensation'])\nteam_max_df","9004fa39":"team_max_df.plot(x=\"position\", y=\"guaranteed_compensation\", ylabel=\"compensation\", kind=\"bar\", title=team)","468a1762":"teams_list = teams_df.index","59fc483e":"#### How to get the maximum values of each group in a Pandas DataFrame in Python?  Solved in the lines below\n","012197c5":"####  This will show the process of filtering a dataframe to display one team\n####  & create a bar plot that shows the maximum compensation per position","09b39a0d":"####  Create interactive tool to display max compensation for each team per position.  "}}