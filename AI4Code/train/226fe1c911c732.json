{"cell_type":{"d15ddc89":"code","34d8e7c1":"code","47f94c5a":"code","90887ea8":"code","bdb82486":"code","d219e68a":"code","ddf6ff16":"markdown","b65293f4":"markdown","31dca03d":"markdown","bd24cfb8":"markdown","993bef9a":"markdown","49cd540d":"markdown"},"source":{"d15ddc89":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score","34d8e7c1":"dataset = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","47f94c5a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","90887ea8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","bdb82486":"decisiontree_classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\ndecisiontree_classifier.fit(X_train, y_train)\n\nknn_classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nknn_classifier.fit(X_train, y_train)\n\nkernel_svm = SVC(kernel = 'rbf', random_state = 0)\nkernel_svm.fit(X_train, y_train)\n\nLogistic = LogisticRegression(random_state = 0)\nLogistic.fit(X_train, y_train)\n\nnaive_bayes_classifier = GaussianNB()\nnaive_bayes_classifier.fit(X_train, y_train)\n\nRandomForest_Classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nRandomForest_Classifier.fit(X_train, y_train)\n\nsvm_classifier = SVC(kernel = 'linear', random_state = 0)\nsvm_classifier.fit(X_train, y_train)","d219e68a":"decisiontree_classifier_pred = decisiontree_classifier.predict(X_test)\ncm = confusion_matrix(y_test, decisiontree_classifier_pred)\nprint(cm, \"\\nDecision Tree: \", accuracy_score(y_test, decisiontree_classifier_pred))\n\nsvm_classifier_pred = svm_classifier.predict(X_test)\ncm = confusion_matrix(y_test, svm_classifier_pred)\nprint(cm, \"\\nSVM: \", accuracy_score(y_test, svm_classifier_pred))\n\nkernel_svm_pred = kernel_svm.predict(X_test)\ncm = confusion_matrix(y_test, kernel_svm_pred)\nprint(cm, \"\\nKernel SVM: \", accuracy_score(y_test, kernel_svm_pred))\n\nknn_classifier_pred = knn_classifier.predict(X_test)\ncm = confusion_matrix(y_test, knn_classifier_pred)\nprint(cm, \"\\nK Nearest Neighbor: \", accuracy_score(y_test, knn_classifier_pred))\n\nLogistic_pred = Logistic.predict(X_test)\ncm = confusion_matrix(y_test, Logistic_pred)\nprint(cm, \"\\nLogistic Regression: \", accuracy_score(y_test, Logistic_pred))\n\nnaive_bayes_pred = naive_bayes_classifier.predict(X_test)\ncm = confusion_matrix(y_test, naive_bayes_pred)\nprint(cm, \"\\nNaive Bayes: \", accuracy_score(y_test, naive_bayes_pred))\n\nRandomForest_pred = RandomForest_Classifier.predict(X_test)\ncm = confusion_matrix(y_test, RandomForest_pred)\nprint(cm, \"\\nRandom Forest: \", accuracy_score(y_test, RandomForest_pred))\n\n","ddf6ff16":"# Heart Disease Classification","b65293f4":"## Importing the libraries","31dca03d":"## Importing the dataset","bd24cfb8":"## Feature Scaling","993bef9a":"## Splitting the dataset into the Training set and Test set","49cd540d":"# Modelling"}}