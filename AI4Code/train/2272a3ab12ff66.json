{"cell_type":{"a4c1af88":"code","e53bbc71":"code","6b486d1b":"code","bf21d64e":"code","034282f8":"code","be1bacfd":"code","b3d9a295":"code","5e05d696":"code","89b2d103":"code","a8143c2d":"code","3cd4ffb0":"code","f6820674":"code","cc049668":"code","2b0e41e3":"code","4962851b":"code","fdf5561a":"code","be10f1dc":"code","ad16e72a":"code","f754f76d":"code","f6d2120d":"code","ad2db47d":"code","f979a77f":"code","359ec674":"code","8183b547":"code","29bc4197":"code","14dd3be6":"code","64f6162b":"code","031b9e9c":"code","3f6f7977":"code","1076a458":"code","fa1f8081":"code","acfb902e":"code","e54cc498":"code","9198ac8b":"code","f11dc931":"code","4f72b32e":"code","f1bf46a2":"code","9136075b":"code","faeeceb3":"code","50dcdc45":"code","30554a26":"code","e1f6ef43":"code","52edddc2":"code","07cf7805":"code","6d4767d9":"code","7de48384":"code","39c2ae65":"code","dacac700":"code","386cd603":"code","cc0c5a00":"code","a48ef226":"code","778edaf8":"code","f4d93bea":"code","ae567ca2":"code","71db3718":"code","c2034a13":"code","1b592b24":"code","226d6345":"code","fcdd54d0":"code","0ae5f506":"code","171b36b8":"code","3c8ce408":"code","c29aa9a3":"code","72564722":"code","6c65e4c5":"code","ce715e32":"code","5de11794":"code","54214835":"code","7fe38e85":"code","41809f38":"code","57a74890":"code","ac303901":"code","cc94fdf0":"code","b87c67c0":"code","e2e5f498":"code","973c5b0e":"code","774a64ab":"code","3d3377f0":"code","4b99d31b":"code","af5b01dd":"code","df7655ea":"code","3aeb74e0":"code","e392463d":"code","9a0e4d94":"code","b147bf86":"code","12e09060":"code","09675052":"code","19c18e6f":"code","f8e9b4c2":"code","de074314":"code","0752fd1e":"code","5455df5c":"code","2e3cb310":"code","223005c4":"code","dbfb0432":"code","462dfe0d":"code","473422f8":"code","56fbbc60":"code","956b1931":"code","10e6da93":"code","e57b7e14":"code","8a6e8ba8":"code","ec678102":"code","cc564636":"code","ef057f4a":"code","6efc59c6":"code","0c9f3ed1":"code","47fdd1db":"code","d5e7875f":"code","e5a59d28":"code","d2c6afe0":"code","09325028":"code","4fd98fc6":"markdown","8dbc1e3c":"markdown","db43085e":"markdown","4bc4dc70":"markdown","d9d309ac":"markdown","ac7d67a4":"markdown","38e5226a":"markdown","1c1a80a2":"markdown","ec5a8a2d":"markdown","3ddb03ac":"markdown","055aba3b":"markdown","d9cfdd30":"markdown","5adacc0e":"markdown","6cb4e2f7":"markdown","7fa2d13b":"markdown","925f3ed6":"markdown","326ac783":"markdown"},"source":{"a4c1af88":"import pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","e53bbc71":"df_train = pd.read_csv('bigmart_train.csv')","6b486d1b":"df_train.shape","bf21d64e":"df_train.head(3)","034282f8":"df_train.isna().sum()","be1bacfd":"df_train['Item_Fat_Content'].unique()","b3d9a295":"sns.countplot(x='Item_Fat_Content',data=df_train)","5e05d696":"df_train['Item_Type'].unique()","89b2d103":"sns.countplot(x='Item_Type',data=df_train)","a8143c2d":"df_train['Outlet_Size'].unique()","3cd4ffb0":"df_train['Outlet_Size'].value_counts()","f6820674":"sns.countplot(x='Outlet_Size',data=df_train)","cc049668":"df_train['Outlet_Establishment_Year'].value_counts()","2b0e41e3":"sns.countplot(x='Outlet_Establishment_Year',data=df_train)","4962851b":"df_train['Outlet_Location_Type'].value_counts()","fdf5561a":"sns.countplot(x='Outlet_Location_Type',data=df_train)","be10f1dc":"df_train['Outlet_Type'].value_counts()","ad16e72a":"sns.countplot(x='Outlet_Type',data=df_train)","f754f76d":"df_train.describe()","f6d2120d":"df_train['Outlet_Age']=2021-df_train['Outlet_Establishment_Year']","ad2db47d":"df_train.isna().sum()","f979a77f":"df_train['Item_Weight']= df_train['Item_Weight'].fillna(df_train['Item_Weight'].mean())","359ec674":"# df_train['Outlet_Size'].mode()[0]\ndf_train['Outlet_Size'].value_counts()","8183b547":"df_train['Outlet_Size'].fillna('Medium',inplace=True)","29bc4197":"df_train.isna().sum()","14dd3be6":"a,b = plt.subplots(1,3)\ndf_train['Item_Weight'].plot(kind='box',ax=b[0])\ndf_train['Item_Visibility'].plot(kind='box',ax=b[1])\ndf_train['Item_MRP'].plot(kind='box',ax=b[2])","64f6162b":"\ndf_train['Item_Visibility'].hist()","031b9e9c":"Q1 = df_train['Item_Visibility'].quantile(.25)\n\nQ3 = df_train['Item_Visibility'].quantile(.75)\n\nIQR = Q3 -Q1\n\ndf2= df_train.query('(@Q1- 1.5* @IQR) <= Item_Visibility <= (@Q3 +1.5* @IQR)')","3f6f7977":"df2.shape","1076a458":"Q1-1.5*IQR, Q1, IQR, Q3,   Q3+1.5*IQR","fa1f8081":"df2['Item_Visibility'].describe()","acfb902e":"df_train=df2","e54cc498":"df_train.shape","9198ac8b":"df_train['Item_Fat_Content'].unique()","f11dc931":"df_train['Item_Fat_Content']= df_train['Item_Fat_Content'].replace(['low fat','LF'],'Low Fat')","4f72b32e":"df_train['Item_Fat_Content'].unique()","f1bf46a2":"df_train['Item_Fat_Content']= df_train['Item_Fat_Content'].replace('reg','Regular')","9136075b":"df_train['Item_Fat_Content'].unique()","faeeceb3":"sns.countplot(x='Item_Fat_Content',data=df_train)","50dcdc45":"df_train['Item_Visibility'].value_counts()","30554a26":"\ndf_train['Item_Visibility'].hist()","e1f6ef43":"df_train['Item_Visibility']=pd.cut(df_train['Item_Visibility'],[-1,0.075,0.15,0.2],labels=['Low Viz','Viz', 'High Viz'])\n","52edddc2":"df_train['Item_Visibility'].value_counts()","07cf7805":"df_train.isnull().sum()","6d4767d9":"df_train['Item_Identifier']=df_train['Item_Identifier'].apply(lambda x:x[0:2])","7de48384":"df_train.head()","39c2ae65":"df_train['Item_combined']=df_train['Item_Identifier'].map({'FD':'Food','DR':'Drink','NC':'Non edible'})","dacac700":"df_train","386cd603":"df_train['Item_Fat_Content'].value_counts()","cc0c5a00":"for i in range(len(df_train['Item_combined'])):\n    s=df_train['Item_combined'].iloc[i]\n    if s==\"Non edible\":\n        df_train['Item_Fat_Content'].iloc[i]=\"Non consumable\" #non edible","a48ef226":"df_train['Item_Fat_Content'].value_counts()","778edaf8":"df_train.head()","f4d93bea":"var=['Item_Fat_Content','Item_Visibility','Outlet_Size' ,'Outlet_Location_Type','Outlet_Age','Item_Type']","ae567ca2":"from sklearn.preprocessing import LabelEncoder","71db3718":"le=LabelEncoder()","c2034a13":"for i in var:\n    df_train[i]=le.fit_transform(df_train[i])","1b592b24":"df_train","226d6345":"df_train=pd.get_dummies(df_train,columns=['Outlet_Type','Item_combined'])","fcdd54d0":"from sklearn.preprocessing import StandardScaler","0ae5f506":"df_train.head()","171b36b8":"X=df_train.drop(['Item_Identifier','Outlet_Identifier','Outlet_Establishment_Year','Item_Outlet_Sales'],axis=1)\n","3c8ce408":"X","c29aa9a3":"y=df_train['Item_Outlet_Sales']","72564722":"y","6c65e4c5":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .3, random_state = 0)","ce715e32":"X.shape , X_train.shape, y_train.shape, X_test.shape, y_test.shape","5de11794":"from sklearn.linear_model import LinearRegression\nlr= LinearRegression()\nlr.fit(X_train, y_train)\ny_pred= lr.predict(X_test)\nlr.score(X_test,y_test)","54214835":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nsqrt(mean_squared_error(y_test,y_pred))","7fe38e85":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 2000, random_state = 0)\nregressor.fit(X_train, y_train)","41809f38":"y_pred = regressor.predict(X_test)","57a74890":"from sklearn import metrics\nimport numpy as np\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","ac303901":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(max_depth=5)\nregressor.fit(X_train, y_train)","cc94fdf0":"y_pred = regressor.predict(X_test)","b87c67c0":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","e2e5f498":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X_train, y_train)","973c5b0e":"y_pred = regressor.predict(X_test)\n","774a64ab":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","3d3377f0":"from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS","4b99d31b":"sfs = SFS(RandomForestRegressor(n_estimators=1000, random_state=0, n_jobs = -1),\n         k_features = 15,\n          forward= True,\n          floating = False,\n          verbose= 2,\n          scoring= 'neg_root_mean_squared_error',\n          cv = 4,\n          n_jobs= -1\n         ).fit(X_train, y_train)","af5b01dd":"sfs.k_feature_names_","df7655ea":"sfs.k_feature_idx_","3aeb74e0":"sfs.k_score_ ","e392463d":"pd.DataFrame.from_dict(sfs.get_metric_dict()).T","9a0e4d94":"from sklearn.preprocessing import PolynomialFeatures","b147bf86":"poly_reg = PolynomialFeatures(degree=2)\nX_poly = poly_reg.fit_transform(X_train)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y_train)","12e09060":"X_test_poly= poly_reg.fit_transform(X_test)\ny_pred= lin_reg_2.predict(X_test_poly)\nlin_reg_2.score(X_test_poly,y_test)","09675052":"sqrt(mean_squared_error(y_test,y_pred))","19c18e6f":"X1=X.drop([ 'Outlet_Type_Supermarket Type1','Item_combined_Drink','Item_combined_Non edible'],axis=1)\n","f8e9b4c2":"X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, y, test_size = .3, random_state = 0)","de074314":"poly_reg = PolynomialFeatures(degree=2)\nX_poly1 = poly_reg.fit_transform(X_train1)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly1, y_train1)","0752fd1e":"X_test_poly1= poly_reg.fit_transform(X_test1)\ny_pred= lin_reg_2.predict(X_test_poly1)\nlin_reg_2.score(X_test_poly1,y_test1)","5455df5c":"sqrt(mean_squared_error(y_test1,y_pred))","2e3cb310":"from sklearn.feature_selection import SelectFromModel","223005c4":"from sklearn.feature_selection import RFE\nsel = RFE(RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1), n_features_to_select = 12)\nsel.fit(X_train, y_train)","dbfb0432":"sel.get_support()","462dfe0d":"X_train_rfe = sel.transform(X_train)\nX_test_rfe = sel.transform(X_test)","473422f8":"regressor = RandomForestRegressor(n_estimators = 2000, random_state = 0)\nregressor.fit(X_train_rfe, y_train)","56fbbc60":"y_pred = regressor.predict(X_test_rfe)\nfrom sklearn import metrics\nimport numpy as np\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","956b1931":"poly_reg = PolynomialFeatures(degree=2)\nX_poly1 = poly_reg.fit_transform(X_train_rfe)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly1, y_train)","10e6da93":"X_test_poly1= poly_reg.fit_transform(X_test_rfe)\ny_pred= lin_reg_2.predict(X_test_poly1)\nlin_reg_2.score(X_test_poly1,y_test)","e57b7e14":"from sklearn.ensemble import GradientBoostingRegressor\nmodel= GradientBoostingRegressor()\nmodel.fit(X_train1, y_train1)\nmodel.score(X_test1,y_test1)","8a6e8ba8":"import xgboost as xgb\nmodel=xgb.XGBRegressor()\nmodel.fit(X_train1, y_train1)\nmodel.score(X_test1,y_test1)","ec678102":"import lightgbm as lgb\ntrain_data=lgb.Dataset(X_train1,label=y_train1)\nparams = {'learning_rate':0.001}\nmodel= lgb.train(params, train_data, 100)\nfrom sklearn.metrics import mean_squared_error\ny_pred=model.predict(X_test1)\nrmse=mean_squared_error(y_pred,y_test1)**0.5\nprint(rmse)","cc564636":"from numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom matplotlib import pyplot\nfrom sklearn.ensemble import StackingRegressor\ndef get_models():\n    models = dict()\n    models['knn'] = KNeighborsRegressor()\n    models['cart'] = DecisionTreeRegressor()\n    models['svm'] = SVR()\n    models['stacking'] = get_stacking()\n    return models\ndef get_stacking():\n\n    level0 = list()\n    level0.append(('knn', KNeighborsRegressor()))\n    level0.append(('cart', DecisionTreeRegressor()))\n    level0.append(('svm', SVR()))\n    # define meta learner model\n    level1 = LinearRegression()\n\n    model = StackingRegressor(estimators=level0, final_estimator=level1, cv=5)\n    return model\n \n# evaluate a given model using cross-validation\ndef evaluate_model(model, X, y):\n    cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n    scores = cross_val_score(model, X, y, scoring='neg_root_mean_squared_error', cv=cv, n_jobs=-1, error_score='raise')\n    return scores\n \n\n# get the models to evaluate\nmodels = get_models()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    scores = evaluate_model(model, X1, y)\n    results.append(scores)\n    names.append(name)\n    print('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show()","ef057f4a":"from sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline\nrmse_val = [] #to store rmse values for different k\nfor K in range(20):\n    K = K+1\n    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n\n    model.fit(X_train1, y_train1)  #fit the model\n    pred=model.predict(X_test1) #make prediction on test set\n    error = sqrt(mean_squared_error(y_test1,pred)) #calculate rmse\n    rmse_val.append(error) #store rmse values\n    print('RMSE value for k= ' , K , 'is:', error)","6efc59c6":"curve = pd.DataFrame(rmse_val) #elbow curve \ncurve.plot()","0c9f3ed1":"from sklearn.model_selection import GridSearchCV\nparams = {'n_neighbors':[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}\n\nknn = neighbors.KNeighborsRegressor()\n\nmodel = GridSearchCV(knn, params, cv=5)\nmodel.fit(X_train1,y_train1)\nmodel.best_params_","47fdd1db":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor","d5e7875f":"import numpy as np\nrng = np.random.RandomState(1)\nregr_1 = DecisionTreeRegressor(max_depth=5)\n\nregr_2 = AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),\n                          n_estimators=300, random_state=rng)","e5a59d28":"regr_1.fit(X_train1, y_train1)\nregr_2.fit(X_train1, y_train1)","d2c6afe0":"y_1 = regr_1.predict(X_test1)\ny_2 = regr_2.predict(X_test1)\n","09325028":"print('Root Mean Squared Error: DT', np.sqrt(metrics.mean_squared_error(y_test1, y_1)))\nprint('Root Mean Squared Error: ADABOOST DT', np.sqrt(metrics.mean_squared_error(y_test1, y_2)))","4fd98fc6":"## poly","8dbc1e3c":"### Outilers:","db43085e":"<img src=IQR_Outliers.png>","4bc4dc70":"## HIGHEST ACCURACY MODEL","d9d309ac":"## LGB","ac7d67a4":"### ENSEMBLE","38e5226a":"## gradient boost","1c1a80a2":"### converting into Categorical values:","ec5a8a2d":"### Missing Values:","3ddb03ac":"## drop unnecessary","055aba3b":"### One Hot Encoding:","d9cfdd30":"***\n### X, y:","5adacc0e":"## TRIED SOMETHING MORE","6cb4e2f7":"### multi linear regression","7fa2d13b":"*** \n### select from model best features","925f3ed6":"### knn","326ac783":"### rfr"}}