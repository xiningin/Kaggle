{"cell_type":{"0541daca":"code","821a5392":"code","d95e9e4f":"code","30bee0c3":"code","2a76a37c":"code","6df96a5d":"code","df4673bb":"code","a2930225":"code","60974d1c":"code","98e1ee1a":"code","c2b7a7bc":"code","73eb792e":"code","06f0f908":"code","3800cfa6":"code","db37ebe7":"code","e2d55771":"code","24abaedf":"code","4e9d9f07":"code","e034e747":"code","8bcd3e58":"code","ee60ec7e":"code","b5b05454":"code","0da7b3f6":"code","8cc814a0":"code","c7e253c9":"code","4a039cfb":"code","864302e6":"code","7f845979":"code","16f59567":"code","dd48e62d":"code","0acf3fe9":"code","0e5e91ce":"code","86921f98":"code","e14389da":"code","9b325709":"code","e8e6df8b":"code","6e0c00a3":"code","ce6763e7":"code","e446d2bf":"code","19eb9b32":"code","f0fb0959":"code","fbfc9d5c":"code","72d5292f":"code","3e45d7a9":"code","aff895fb":"code","d0eafa45":"markdown","9a513bdb":"markdown","171a7bc2":"markdown","eefa6960":"markdown","410ed296":"markdown","940ad423":"markdown","75498457":"markdown","320b04d4":"markdown","eb204825":"markdown","2b05d55c":"markdown","eabdfd75":"markdown","590ca54d":"markdown","4387948c":"markdown","86c913ee":"markdown","4d5f9869":"markdown","ef0da297":"markdown","9ac211a2":"markdown","3b4f9d5f":"markdown","1774eb17":"markdown","e1e2a2d0":"markdown","ed9c6707":"markdown","5477d6ab":"markdown"},"source":{"0541daca":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')","821a5392":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',index_col='ObservationDate',parse_dates=True)\ncovidIndia = df[df['Country\/Region'] == 'India']\ncovidIndia.drop(['SNo','Last Update','Province\/State'],axis=1,inplace = True)\ncovidIndia.head()","d95e9e4f":"covidIndia.tail()","30bee0c3":"print(\"Shape of Data is ==> \",covidIndia.shape)","2a76a37c":"covidIndia.index[:10]","6df96a5d":"covidIndia.index.freq = 'D'\ncovidIndia.index[:10]","df4673bb":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nresult = seasonal_decompose(covidIndia['Confirmed'], model='mul')\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 12,8\nresult.plot();","a2930225":"train_data = covidIndia.iloc[:78]\ntest_data = covidIndia.iloc[78:]\n\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nfitted_model = ExponentialSmoothing(train_data['Confirmed'],trend='mul').fit()\n\ntest_predictions = fitted_model.forecast(15).rename('Confirmed Forecast')","60974d1c":"print(\"Prediction ==> \\n\",test_predictions[:5])\nprint(\"\\n\",\"Actual Data ==> \\n\",test_data[:5]['Confirmed'])","98e1ee1a":"fig = plt.figure(dpi = 120)\nax = plt.axes()\nax.set(xlabel = 'Date',ylabel = 'Count of Cases',title = 'Comparision : Test VS Prediction')\ntrain_data['Confirmed'].plot(legend=True,label='TRAIN',lw = 2)\ntest_data['Confirmed'].plot(legend=True,label='TEST',figsize=(8,4),lw = 2)\ntest_predictions.plot(legend=True,label='PREDICTION',lw = 2);","c2b7a7bc":"fig = plt.figure(dpi = 120)\nax = plt.axes()\nax.set(xlabel = 'Date',ylabel = 'Count of Cases',title = 'Comparision : Test VS Prediction (Zoon In)')\ntest_data['Confirmed'].plot(legend=True,label='TEST DATA',figsize=(8,4),lw = 2)\ntest_predictions.plot(legend=True,label='PREDICTION',xlim=['2020-04-23','2020-04-27'],lw = 2);","73eb792e":"from sklearn.metrics import mean_squared_error,mean_absolute_error\n\nprint(\"MAE ==> \",mean_absolute_error(test_data['Confirmed'],test_predictions))\nprint(\"MSE ==> \",mean_squared_error(test_data['Confirmed'],test_predictions))\nprint(\"RMSE ==> \",np.sqrt(mean_squared_error(test_data['Confirmed'],test_predictions)))","06f0f908":"test_data.describe()['Confirmed']['std']","3800cfa6":"final_model = ExponentialSmoothing(train_data['Confirmed'],trend='mul').fit()\nforecast_predictions = final_model.forecast(30)","db37ebe7":"fig = plt.figure(dpi = 120)\nax = plt.axes()\nax.set(xlabel = 'Date',ylabel = 'Count of Cases',title = 'Forecast : (May 1, 2020) to (May 15, 2020)')\ncovidIndia['Confirmed'].plot(figsize=(8,4),lw = 2,legend = True,label = 'Actual Confirmed')\nforecast_predictions.plot(lw=2,legend = True,label = 'Forecast Confirmed',xlim = ['2020-04-20','2020-05-15']);","e2d55771":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ntrain = pd.DataFrame(covidIndia.iloc[:78,1])\ntest = pd.DataFrame(covidIndia.iloc[78:,1])\n\nscaler.fit(train)\nscaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","24abaedf":"print(\"Scaled Train Set ==> \\n\", scaled_train[:5],\"\\n\")\nprint(\"Scaled Test Set==> \\n\", scaled_test[:5])","4e9d9f07":"from keras.preprocessing.sequence import TimeseriesGenerator\nn_input = 15\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)","e034e747":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# define model\nmodel = Sequential()\nmodel.add(LSTM(150, activation='relu', input_shape=(n_input, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')","8bcd3e58":"model.summary()","ee60ec7e":"# fit model\nmodel.fit_generator(generator,epochs=25)","b5b05454":"loss_per_epoch = model.history.history['loss']\nfig = plt.figure(dpi = 120,figsize = (8,4))\nax = plt.axes()\nax.set(xlabel = 'Number of Epochs',ylabel = 'MSE Loss',title = 'Loss Curve of RNN LSTM')\nplt.plot(range(len(loss_per_epoch)),loss_per_epoch,lw = 2);","0da7b3f6":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-n_input:]\ncurrent_batch = first_eval_batch.reshape((1, n_input, n_features))\n\nfor i in range(len(test)):\n    \n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    \n    # store prediction\n    test_predictions.append(current_pred) \n    \n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","8cc814a0":"true_predictions = scaler.inverse_transform(test_predictions)\ntest['Predictions'] = true_predictions\ntest.head()","c7e253c9":"fig = plt.figure(dpi = 120)\nax=plt.axes()\ntest.plot(legend=True,figsize=(14,6),lw = 2,ax=ax)\nplt.xlabel('Date')\nplt.ylabel('Count of Cases')\nplt.title('Comparision B\/W Test and Prediction')\nplt.show();","4a039cfb":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n\ntrain = pd.DataFrame(covidIndia.iloc[:,1])\n\n\nscaler.fit(train)\nscaled_train = scaler.transform(train)\n\nn_input = 15\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)\n\n# define model\nmodel = Sequential()\nmodel.add(LSTM(150, activation='relu', input_shape=(n_input, n_features)))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\n# fit model\nmodel.fit_generator(generator,epochs=25)","864302e6":"loss_per_epoch = model.history.history['loss']\nfig = plt.figure(dpi = 120,figsize = (8,4))\nax = plt.axes()\nax.set(xlabel = 'Number of Epochs',ylabel = 'MSE Loss',title = 'Loss Curve of RNN LSTM')\nplt.plot(range(len(loss_per_epoch)),loss_per_epoch,lw = 2);","7f845979":"forecast = []\n\nfirst_eval_batch = scaled_train[-n_input:]\ncurrent_batch = first_eval_batch.reshape((1, n_input, n_features))\n\nfor i in range(15):\n    current_pred = model.predict(current_batch)[0]\n    forecast.append(current_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n\nforecast= scaler.inverse_transform(forecast)","16f59567":"forecast = pd.DataFrame({'Forecast':forecast.flatten()})\nforecast.index = np.arange('2020-05-01',15,dtype='datetime64[D]')\nforecast.head()","dd48e62d":"fig = plt.figure(dpi=120,figsize = (14,6))\nax = plt.axes()\nax.set(xlabel = 'Date',ylabel = 'Count of Cases (Lacs)',title = 'Forecast : (May 1, 2020) to (May 15, 2020)')\nforecast.plot(label = 'Forecast',ax=ax,color='red',lw=2);","0acf3fe9":"df = pd.DataFrame(covidIndia.iloc[:,1])\ndf.reset_index(inplace = True)\ndf.head()","0e5e91ce":"df.columns = ['ds','y']\ndf.head()","86921f98":"fig = plt.figure(dpi = 120)\naxes = plt.axes()\naxes.set(xlabel = 'Date',ylabel = 'Count of Cases',title = 'Trend')\ndf.plot(x='ds',y='y',figsize=(8,4),lw=2,color = 'blue',ax=axes);","e14389da":"train = df.iloc[:78]\ntest = df.iloc[78:]","9b325709":"from fbprophet import Prophet\nm = Prophet()\nm.fit(train)\nfuture = m.make_future_dataframe(periods=15)\nforecast = m.predict(future)","e8e6df8b":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(5)","6e0c00a3":"test.tail(5)","ce6763e7":"fig = plt.figure(dpi = 120)\nax = plt.axes()\nax.set(xlabel = 'Date',ylabel = 'Count of Cases',title = 'Comparision B\/W Test & Prediction')\nforecast.plot(x='ds',y='yhat',label='Predictions',legend=True,figsize=(8,4),ax=ax,lw=2)\ntest.plot(x='ds',y='y',label='True Miles',legend=True,ax=ax,xlim=('2020-04-17','2020-05-01'),lw=2);","e446d2bf":"from statsmodels.tools.eval_measures import rmse\npredictions = forecast.iloc[-15:]['yhat']\nprint(\"RMSE ==> \",rmse(predictions,test['y']))","19eb9b32":"print(\"Test Mean ==> \",test.mean())","f0fb0959":"from fbprophet import Prophet\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=15)\nforecast = m.predict(future)","fbfc9d5c":"df.tail()","72d5292f":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(5)","3e45d7a9":"fig = plt.figure(dpi = 120 )\naxes = plt.axes()\nm.plot(forecast, figsize = (8,4),ax=axes)\nplt.xlabel('Date')\nplt.ylabel('Count of Cases')\nplt.title('Forecast')\nplt.xticks(rotation = 90);","aff895fb":"plt.figure(dpi = 120)\naxes = plt.axes()\nm.plot(forecast,ax=axes,figsize = (8,4))\nstart = pd.to_datetime(['2020-04-25'])\nend = pd.to_datetime(['2020-05-15'])\nplt.xlabel('Date')\nplt.ylabel('Count of Cases')\nplt.title('Forecast : (May 1, 2020) - (May 15, 2020)')\nplt.xlim(start,end)\nplt.ylim(20000,60000)\nplt.xticks(rotation = 90);","d0eafa45":"> We can see how good our model is able to converge !!","9a513bdb":"## Forecasting\n\nTo forecast, we need to refit model again with whole data points.","171a7bc2":"> I have checked Index to set frequency of Time Series data. It is important to set frequency of Time Series data to avoid unnecessary errors in statsmodels.","eefa6960":"# ETS Decomposition\n\nThe <a href='https:\/\/en.wikipedia.org\/wiki\/Decomposition_of_time_series'>decomposition<\/a> of a time series attempts to isolate individual components such as <em>error<\/em>, <em>trend<\/em>, and <em>seasonality<\/em> (ETS).","410ed296":"## Preprocessing\n\nProphet needs a specific format at input. So we need little bit preprocessing here.","940ad423":"# Holt Winters Method\n\n### <font color=blue>Simple Exponential Smoothing \/ Simple Moving Average<\/font>\nThis is the simplest to forecast. $\\hat{y}$ is equal to the most recent value in the dataset, and the forecast plot is simply a horizontal line extending from the most recent value.\n### <font color=blue>Double Exponential Smoothing \/ Holt's Method<\/font>\nThis model takes trend into account. Here the forecast plot is still a straight line extending from the most recent value, but it has slope.\n### <font color=blue>Triple Exponential Smoothing \/ Holt-Winters Method<\/font>\nThis model has (so far) the \"best\" looking forecast plot, as it takes seasonality into account. When we expect regular fluctuations in the future, this model attempts to map the seasonal behavior.","75498457":"### How good Prophet is doing, Just see black dots are actual confirmed cases while line are prediction with uncertainity...","320b04d4":"# Facebook Prophet\n\n![](https:\/\/www.kdnuggets.com\/wp-content\/uploads\/prophet-facebook.jpg)\n\nProphet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\n## IMPORTANT NOTE ONE:\n\n**You should really read the papaer for Prophet! It is relatively straightforward and has a lot of insight on their techniques on how Prophet works internally!**\n\nLink to paper: https:\/\/peerj.com\/preprints\/3190.pdf","eb204825":"# RNN\n\n![](https:\/\/miro.medium.com\/fit\/c\/1838\/551\/1*HgAY1lLMYSANqtgTgwWeXQ.png)\n\nA recurrent neural network (RNN) is a class of artificial neural networks where connections between nodes form a directed graph along a temporal sequence. This allows it to exhibit temporal dynamic behavior. Derived from feedforward neural networks, RNNs can use their internal state (memory) to process variable length sequences of inputs.This makes them applicable to tasks such as unsegmented, connected handwriting recognition or speech recognition.\n\nYou can read more on RNN [here.](https:\/\/en.wikipedia.org\/wiki\/Recurrent_neural_network)\n\n### RNN for time series =>\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/3b\/The_LSTM_cell.png)\n\nA powerful type of neural network designed to handle sequence dependence is called recurrent neural networks. The Long Short-Term Memory network or LSTM network is a type of recurrent neural network used in deep learning because very large architectures can be successfully trained.\n\nYou can read more on LSTM RNN [here](https:\/\/machinelearningmastery.com\/time-series-prediction-lstm-recurrent-neural-networks-python-keras\/)\n","2b05d55c":"> Let me explain the things now :-\n\n1. I have splitted the data in train and test set, Size of test is 15 because i wanted to forecast for next 15 days.\n2. We can clearly see , How good this simple model is explaining the trend and able to forecast result.\n3. Looking at MSE, you might think the model is doing worst, But think again!! One should not judge model performance by just looking at MSE,RMSE. Compare these values with given data. If it is close to our data then model is doing good. In this case we can see there are little difference between RMSE and STD of actual data. So this simple is not doing that much bad :)","eabdfd75":"> We can see our model is caapturing trend, But India is beating Corona !! :)","590ca54d":"### Now we have forecast for May 1, 2020 to May 15, 2020.\n\n## Now i will end up my notebook here , Thank you for reading!! I hope you guys have learned something.\n\n## Please do upvote, if you like !!","4387948c":"> So , Here is forecast for 15 days using RNN.","86c913ee":"> I will be using Multiplicative model because trend is not linear , It is exponential. Also i will not be using seasonality because it looks like there is no seasonal pattern.","4d5f9869":"## Forecasting using Holt Method","ef0da297":"## Time Series Generator\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining\/validation.\n\n#### Arguments\n    data: Indexable generator (such as list or Numpy array)\n        containing consecutive data points (timesteps).\n        The data should be at 2D, and axis 0 is expected\n        to be the time dimension.\n    \n    targets: Targets corresponding to timesteps in `data`.\n        It should have same length as `data`.\n    \n    length: Length of the output sequences (in number of timesteps).\n    \n    batch_size: Number of timeseries samples in each batch\n        (except maybe the last one).","9ac211a2":"## Model Validation","3b4f9d5f":"## Forecast\n\nLet us forecast for May 1, 2020 to May 15, 2020. Note we have to fit again on whole data...","1774eb17":"# Preprocessing","e1e2a2d0":"## Evaluate on Test Data\n\nThis part is little bit trickt to understand. RNN LSTM actually uses past data to predict next one data point. Here our input length is 15, So in each iteration model will use past 15 data to predict next one.","ed9c6707":"## RNN LSTM Model","5477d6ab":"> Well according to Prophet prediction, Number of Cases should have been decreased as compared to real data!! But our model is doing good."}}