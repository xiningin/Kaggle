{"cell_type":{"dd80e065":"code","6fd84c94":"code","280df87a":"code","204b561b":"code","91bae197":"code","45a5804a":"code","213fd41a":"code","5b02871c":"code","2720a9c1":"code","47c059aa":"code","ab1fe0fb":"code","15027976":"code","b9b78a67":"code","e934e98b":"code","1a66919d":"code","a469e5d6":"code","ee52795d":"code","0526fe7e":"code","a05dc796":"code","563cf3bf":"code","9ba4d055":"code","f3e30df8":"code","d5f6341d":"code","9c11fccc":"code","da32313c":"code","f0b10544":"code","e50b9dbb":"code","8a1c4862":"code","aabb9b8d":"code","06bbf6d8":"code","f5f8ee52":"code","69e67198":"code","542129ef":"code","ffe71a79":"code","5f19473a":"code","12be4564":"code","d83a5062":"code","c2e98677":"code","d7268f03":"code","3c606cf7":"code","97cc02a8":"code","76936328":"code","5a651605":"code","2fc837c1":"code","615ca529":"code","1935ffb9":"code","a9ca1adb":"code","ae91236d":"code","adecbee1":"code","c7795065":"code","9424f54f":"code","e8b06af2":"code","ec80ffab":"code","c801f39a":"code","b0d49a09":"code","302b1139":"code","960001e4":"code","e9e30a5d":"code","83e20daf":"code","63ee0f31":"code","5d81b105":"code","3fa0c947":"code","008690f9":"code","37ad240c":"code","0b551d45":"code","1b627ec6":"code","6fcf2dfe":"code","0a913bac":"code","3bef3bec":"code","f2078a81":"code","6bfd05ac":"code","c7c08aeb":"code","a6b383c8":"code","09adce29":"code","f799bdbd":"code","aa55a0c2":"code","55d00365":"code","c17f4af0":"code","4a2edd79":"code","36cf0987":"code","dea9fee9":"code","bbd556bd":"code","d26b242f":"code","206facdc":"markdown","242fcbab":"markdown","42851ae2":"markdown","f29ee164":"markdown","06e6b34d":"markdown","c7c96ff6":"markdown","5e8ea1ab":"markdown","a76b084a":"markdown","02bd364c":"markdown","6062deaf":"markdown","60df6154":"markdown","dc759607":"markdown","57b10b3f":"markdown","cebd9dd4":"markdown"},"source":{"dd80e065":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] =(20,10)","6fd84c94":"df = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf","280df87a":"df.shape","204b561b":"df.info()","91bae197":"df.groupby('area_type')['area_type'].agg('count')","45a5804a":"df.area_type.unique()","213fd41a":"def change_to_numeric(x):\n    if x == 'Super built-up  Area':\n        return 0\n    elif x == 'Plot  Area':\n        return 1\n    elif x == 'Built-up  Area':\n        return 2\n    else:\n        return 3\n\ndf['area_type_numeric'] = df['area_type'].apply(change_to_numeric)","5b02871c":"df2 = df[['area_type_numeric', 'price']]\ndf2.corr()","2720a9c1":"df1 = df.drop('area_type', axis = 'columns')","47c059aa":"df1.balcony = df1.balcony.fillna(df1.balcony.median())","ab1fe0fb":"df1.balcony.isnull().sum()","15027976":"df_temp = df1[['balcony', 'price']]\ndf_temp.corr()","b9b78a67":"def ready(x):\n    if x == 'Ready To Move':\n        return 1\n    else:\n        return 0\ndf1['availability'] = df1['availability'].apply(ready)","e934e98b":"df_temp = df1[['availability', 'price']]\ndf_temp.corr()","1a66919d":"df2 = df1.drop(['society' , 'balcony', 'availability'] , axis = 'columns')","a469e5d6":"df2.head()","ee52795d":"df2.isnull().sum()","0526fe7e":"df2.describe()","a05dc796":"df2['size'].unique()","563cf3bf":"df2['size'].value_counts().head()","9ba4d055":"df2['size'] = df2['size'].fillna('2 BHK')","f3e30df8":"df2['BHK'] = df2['size'].apply(lambda x : int(x.split(' ')[0]))","d5f6341d":"df_temp = df2[['BHK', 'price']]\ndf_temp.corr()","9c11fccc":"df2['bath'] = df2['bath'].fillna(df2.bath.median())","da32313c":"df2.head()","f0b10544":"df2['location'].value_counts()","e50b9dbb":"df2['location'] = df2['location'].fillna('Whitefield')","8a1c4862":"df2.BHK.unique()","aabb9b8d":"df2[df2.BHK>20]","06bbf6d8":"df2.total_sqft.unique()","f5f8ee52":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True    ","69e67198":"df2[~df2['total_sqft'].apply(is_float)].head(10)","542129ef":"def convert_sqft_to_num(x):\n    token = x.split('-')\n    if len(token)==2:\n        return (float(token[0]) + float(token[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","ffe71a79":"df3 = df2.copy()\ndf3['total_sqft'] = df3['total_sqft'].apply(convert_sqft_to_num)\ndf3.head()","5f19473a":"df3['bath'] = df3['bath'].apply(lambda x: int(x))","12be4564":"df_temp = df3[['BHK', 'price']]\ndf_temp.corr()","d83a5062":"df4 = df3.copy()\ndf4['price_per_sqft'] = df3['price']*100000\/df3['total_sqft']\ndf4","c2e98677":"df4['location'].agg('count')","d7268f03":"len(df4.location)","3c606cf7":"df4.location = df4.location.apply(lambda x : x.strip())\nlocation_stats = df4.groupby('location')['location'].agg('count')\nlocation_stats","97cc02a8":"location_stats = df4.groupby('location')['location'].agg('count').sort_values(ascending = False)\nlocation_stats","76936328":"len(location_stats[location_stats<=10])","5a651605":"location_stats_less_than_10 = location_stats[location_stats<=10]","2fc837c1":"df4.location = df4.location.apply(lambda x : 'other' if x in location_stats_less_than_10 else x)","615ca529":"len(df4.location.unique())","1935ffb9":"sns.heatmap(df4.corr(), annot = True)","a9ca1adb":"df4.head(10)","ae91236d":"sns.boxplot('total_sqft', data = df4, orient = 'vertical')","adecbee1":"sns.boxplot('BHK', data = df4, orient = 'vertical')","c7795065":"sns.boxplot('bath', data = df4, orient = 'vertical')","9424f54f":"sns.boxplot('price', data = df4, orient = 'vertical')","e8b06af2":"max_threshold = df4[[\"bath\",\"BHK\",\"total_sqft\", \"price\", \"price_per_sqft\"]].quantile(0.95)\nmax_threshold","ec80ffab":"df4 = df4.drop(df4[df4['BHK'] > 5].index)\ndf4 = df4.drop(df4[df4['bath'] > 5].index)\ndf4 = df4.drop(df4[df4['total_sqft'] > 3250.0].index)\ndf4 = df4.drop(df4[df4['price'] > 324.0].index)\ndf4 = df4.drop(df4[df4['price_per_sqft'] > 15293.303348].index)","c801f39a":"sns.boxplot('BHK', data = df4, orient = 'vertical')","b0d49a09":"df4[df4.total_sqft\/df4.BHK<300].head(10)","302b1139":"df5 = df4[~(df4.total_sqft\/df4.BHK<300)]","960001e4":"df5['price_per_sqft'].describe()","e9e30a5d":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key , subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<(m+st))]\n        df_out = pd.concat([df_out , reduced_df] , ignore_index = True)\n    return df_out\n\ndf6 = remove_pps_outliers(df5)\ndf6.shape","83e20daf":"df5.shape","63ee0f31":"def plot_scatter_chart(df , location):\n    bhk2 = df[(df.location == location) & (df.BHK==2)]\n    bhk3 = df[(df.location == location) & (df.BHK==3)]\n    matplotlib.rcParams['figure.figsize'] = (15 , 10)\n    plt.scatter(bhk2.total_sqft , bhk2.price , color = 'blue' , label = '2 BHK' , s = 50)\n    plt.scatter(bhk3.total_sqft , bhk3.price , marker = '+' , color = 'green' , label = '3 BHK' , s = 50)\n    plt.xlabel('Total Square feet Area')\n    plt.ylabel('Price(Lakhs Indian Rupees)')\n    plt.title(location)\n    plt.legend()\n\nplot_scatter_chart(df6 , 'Hebbal')  ","5d81b105":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location , location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk , bhk_df in location_df.groupby('BHK'):\n            bhk_stats[bhk] = {\n                'mean' : np.mean(bhk_df.price_per_sqft),\n                'std' : np.std(bhk_df.price_per_sqft),\n                'count' : bhk_df.shape[0]\n            }\n        for bhk , bhk_df in location_df.groupby('BHK'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices , bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n                \n    return df.drop(exclude_indices , axis = 'index')   \n\ndf7 = remove_bhk_outliers(df6)\ndf7.shape","3fa0c947":"plot_scatter_chart(df7 , 'Hebbal')","008690f9":"plt.hist(df7.price_per_sqft , rwidth = 0.8)\nplt.xlabel('Price per square feet')\nplt.ylabel('Count')","37ad240c":"df7.bath.unique()","0b551d45":"plt.hist(df7.bath , rwidth = 0.8)\nplt.xlabel('number of bathrooms')\nplt.ylabel('Count')","1b627ec6":"df8 = df7[(df7.bath<df7.BHK+2)]\ndf8.shape","6fcf2dfe":"df9 = df8.drop(['size' , 'price_per_sqft', 'area_type_numeric'] , axis = 'columns')\ndf9.head()","0a913bac":"dummies = pd.get_dummies(df9.location)\ndummies.head()","3bef3bec":"df10 = pd.concat([df9 , dummies.drop('other' , axis = 'columns')] , axis = 'columns')\ndf10.head()","f2078a81":"df11 = df10.drop(['location'] , axis = 'columns')","6bfd05ac":"x = df11.drop('price' , axis = 'columns')","c7c08aeb":"y = df11.price","a6b383c8":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(x)","09adce29":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score","f799bdbd":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\n#import xgboost as xgb \nfrom sklearn.tree import DecisionTreeRegressor\n#from sklearn.ensemble import RandomForestRegressor\n\ndef find_best_model_using_gridsearchcv(x , y):\n    algos = {\n        'LinearRegression' : {\n            'model' : LinearRegression(),\n            'params' : {\n                'normalize' : [True , False],\n                'fit_intercept': [True , False],\n                 'copy_X' : [True , False]\n            }\n        },\n        'lasso' : {\n            'model' : Lasso(),\n            'params' : {\n                'alpha' : [1, 10, 50, 200, 500],\n                'selection' : ['random' , 'cyclic']\n            } \n        },\n        'Ridge' : {\n            'model' : Ridge(), \n            'params' : {\n                'alpha' : [1, 10, 50, 200, 500],\n                'fit_intercept' : [True , False],\n                'normalize' : [True , False],\n            }\n        },\n        'descision_tree' : {\n            'model' : DecisionTreeRegressor(),\n            'params' :{\n                'criterion' : ['mse' , 'friedman_mse'],\n                'splitter' : ['best' , 'random']\n            }\n        }\n    }\n    \n    scores = []\n    cv = ShuffleSplit(n_splits = 5 , test_size = 0.2 , random_state = 0)\n    for algo_name , config in algos.items():\n        gs = GridSearchCV(config['model'] , config['params'] , cv = cv , return_train_score = False)\n        gs.fit(x , y)\n        scores.append({\n            'model' : algo_name , \n            'best_score' : gs.best_score_,\n            'best_params' : gs.best_params_\n        })\n        \n    return pd.DataFrame(scores , columns = ['model' , 'best_score' , 'best_params'])        ","aa55a0c2":"find_best_model_using_gridsearchcv(X , y) ","55d00365":"from sklearn.model_selection import train_test_split\nX_train , X_test , y_train , y_test = train_test_split(x , y , test_size = 0.2 , random_state = 10)","c17f4af0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ns_x = StandardScaler()\ns_y = StandardScaler()\nX_train_scaled = s_x.fit_transform(X_train)\nX_test_scaled = s_x.transform(X_test)","4a2edd79":"from sklearn.linear_model import Ridge\nmodel = Ridge(alpha= 1, fit_intercept = True, normalize = False)\nmodel.fit(X_train_scaled, y_train)\nmodel.score(X_test_scaled , y_test)","36cf0987":"from sklearn.metrics import mean_squared_error,r2_score\nmodel.fit(X_train_scaled,y_train)\ny_pred = model.predict(X_test_scaled)\nacc = mean_squared_error(y_pred,y_test)\nrscore = r2_score(y_pred,y_test)","dea9fee9":"rscore","bbd556bd":"def rmse(y_pred, y_test):\n    return np.sqrt(mean_squared_error(y_pred,y_test))\nrmse(y_pred,y_test)","d26b242f":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits = 10 , test_size = 0.2 , random_state = 0)\ncross_val_score(Ridge(alpha= 1, fit_intercept = True, normalize = False, tol = 0.0001) , X , y , cv=cv).mean()","206facdc":"# Predicting House Prices in Bangalore","242fcbab":"**Above shows that total_sqft can be a range (e.g. 2100-2850). For such case we can just take average of min and max value in the range. There are other cases such as 34.46Sq. Meter which one can convert to square ft using unit conversion. We are going to just drop such corner cases to keep things simple.**","42851ae2":"# Using One Hot Encoding For Location","f29ee164":"# Outlier Removal Using Standard Deviation and Mean","06e6b34d":"# Model Training ","c7c96ff6":"# Outliers detection and removal","5e8ea1ab":"# Feature Scaling","a76b084a":"# Feature Engineering\n**Adding new feature(integer) for bhk (Bedrooms Hall Kitchen)**","02bd364c":"# Dimensionality Reduction\n**Any location having less than 10 data points should be tagged as \"other\" location. This way number of categories can be reduced by huge amount. Later on when we do one hot encoding, it will help us with having fewer dummy columns.**","6062deaf":"# Model Building","60df6154":"# Evaluation","dc759607":"# Data Load: Loading the data of home prices into a dataframe","57b10b3f":"# Handling of NA values","cebd9dd4":"# Outlier Removal Using Real Estate Logic\n**Normally square ft per bedroom is 300 (i.e. 2 bhk apartment is minimum 600 sqft. If we have for example 400 sqft apartment with 2 bhk than that seems suspicious and can be removed as an outlier. We will remove such outliers by keeping our minimum threshold per bhk to be 300 sqft.**"}}