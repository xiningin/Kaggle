{"cell_type":{"a5c252bb":"code","ff06b750":"code","222e5f06":"code","032332d6":"code","95a2cdd4":"code","e3637577":"code","fe202282":"code","bd6aa9a9":"code","7c6c967f":"code","5abea746":"markdown","0d640c06":"markdown","23ab0d0e":"markdown","36b92301":"markdown","5a072da9":"markdown","dd0da658":"markdown","a14faef7":"markdown","2b31e8fc":"markdown","7f5e0937":"markdown","d4d6d06f":"markdown"},"source":{"a5c252bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff06b750":"from tensorflow.compat.v1 import ConfigProto\nfrom tensorflow.compat.v1 import InteractiveSession\n\nconfig = ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.5\nconfig.gpu_options.allow_growth = True\nsession = InteractiveSession(config=config)\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten\nfrom tensorflow.keras.models import Model#loading saved model without executing entire code \nfrom tensorflow.keras.models import model_from_json\n\n# load json and create model\njson_file = open('..\/input\/final-model-saved\/model2.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"..\/input\/final-model-saved\/model2.h5\")\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n#from keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.inception_v3 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nimport numpy as np\nfrom glob import glob\n\nIMAGE_SIZE = [224, 224]\n\n\ntrain_directory='..\/input\/fruit-and-vegetable-image-recognition\/train'\ntest_directory='..\/input\/fruit-and-vegetable-image-recognition\/test'\nval_directory='..\/input\/fruit-and-vegetable-image-recognition\/validation'\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","222e5f06":"from glob import glob\nglob(\"..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Images\/*\/\")","032332d6":"import os\n\nimport numpy as np\n\nimport shutil\n\nrootdir= '..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Images' #path of the original folder\n\nclasses = ['Apple_Bad','Pomegranate_Bad','Pomegranate_Good','Orange_Good','Orange_Bad','Lime_Good','Lime_Bad','Banana_Bad','Banana_Good','Apple_Good','Guava_Bad','Guava_Good']\n\nfor i in classes:\n\n os.makedirs('.\/fruits\/working' +rootdir + '\/train\/' + i)\n\n os.makedirs('.\/fruits\/working' +rootdir + '\/test\/' + i)\n\n source = rootdir + '\/' + i\n\n allFileNames = os.listdir(source)\n\n np.random.shuffle(allFileNames)\n\n test_ratio = 0.25\n\n train_FileNames, test_FileNames = np.split(np.array(allFileNames),\n                                                      [int(len(allFileNames)* (1 - test_ratio))])\n\n train_FileNames = [source+'\/'+ name for name in train_FileNames.tolist()]\n test_FileNames = [source+'\/' + name for name in test_FileNames.tolist()]\n\n for name in train_FileNames:\n  shutil.copy(name,'.\/fruits\/working'+ rootdir +'\/train\/' + i)\n\n for name in test_FileNames:\n  shutil.copy(name,'.\/fruits\/working'+ rootdir +'\/test\/' + i)","95a2cdd4":"\n\n# Creating partitions of the data after shuffeling\nsrc = root_dir + '\/' + cls # Folder to copy images from\n\nallFileNames = os.listdir(src)\nnp.random.shuffle(allFileNames)\ntrain_FileNames, val_FileNames, test_FileNames = np.split(np.array(allFileNames),\n                                                          [int(len(allFileNames)* (1 - (val_ratio + test_ratio))), \n                                                           int(len(allFileNames)* (1 - test_ratio))])\n\n\ntrain_FileNames = [src+'\/'+ name for name in train_FileNames.tolist()]\nval_FileNames = [src+'\/' + name for name in val_FileNames.tolist()]\ntest_FileNames = [src+'\/' + name for name in test_FileNames.tolist()]\n\nprint('Total images: ', len(allFileNames))\nprint('Training: ', len(train_FileNames))\nprint('Validation: ', len(val_FileNames))\nprint('Testing: ', len(test_FileNames))\n\n# Copy-pasting images\n\n       # Copy-pasting images\nfor name in train_FileNames:\n              shutil.copy(name, '.\/kaggle\/working' + root_dir + '\/' +'train\/' + cls)\n\n       for name in val_FileNames:\n              shutil.copy(name,'.\/kaggle\/working' + root_dir + '\/'+'val\/' + cls)\n\n       for name in test_FileNames:\n               shutil.copy(name,'.\/kaggle\/working' + root_dir + '\/'+ 'test\/' + cls)","e3637577":"os.listdir('.\/kaggle\/working..\/input\/indian-fruits-ripe-or-bad')","fe202282":"!tar -zcvf outputname.tar.gz .\/fruits","bd6aa9a9":"for path, subdirs, files in os.walk('.\/kaggle\/working..\/input\/indian-fruits-ripe-or-bad'):\n    for name in files:\n        print(os.path.join(path, name))","7c6c967f":"# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","5abea746":"import os\nif os.path.exists('.\/kaggle\/working..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Imagestrain\/Apple_Bad'):\n  os.rmdir('.\/kaggle\/working..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Imagestrain\/Apple_Bad')","0d640c06":"train_directory='..\/input\/fruit-and-vegetable-image-recognition\/train'\ntest_directory='..\/input\/fruit-and-vegetable-image-recognition\/test'\nval_directory='..\/input\/fruit-and-vegetable-image-recognition\/validation'","23ab0d0e":"!pip install Keras\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications import imagenet_utils\ndef output(location):\n    img=load_img(location,target_size=(224,224,3))\n    plt.imshow(img)\n    img=img_to_array(img)\n    \n    img=img\/255\n    plt.imshow(img)\n    img=np.expand_dims(img,[0])\n    \n    answer=model.predict(img)\n  #  ans2 = imagenet_utils.decode_predictions(answer)\n    print(answer)\n    y_class = answer.argmax(axis=-1)\n    #print(answer.argmax(axis=-))\n    y = \" \".join(str(x) for x in y_class)\n    y = int(y)\n    res = lab[y]\n    return res","36b92301":"# # Creating Train \/ Val \/ Test folders (One time use)\nimport os\nimport numpy as np\nimport shutil\nimport random\nroot_dir ='..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Images'  # data root path\nclasses_dir = ['Apple_Bad','Pomegranate_Bad','Pomegranate_Good','Orange_Good','Orange_Bad','Lime_Good','Lime_Bad','Banana_Bad','Banana_Good','Apple_Good','Guava_Bad','Guava_Good'] #total labels\n\nval_ratio = 0.15\ntest_ratio = 0.05\n\nfor cls in classes_dir:\n    os.makedirs( '.\/kaggle\/working'+ root_dir +'\/' +'train\/' + cls)\n    os.makedirs('.\/kaggle\/working'+ root_dir +'\/' +'val\/' + cls)\n    os.makedirs( '.\/kaggle\/working' + root_dir +'\/' +'test\/' + cls)\n","5a072da9":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntraining_set = train_datagen.flow_from_directory(train_directory,\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory(test_directory,\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')\n\nprint(len(training_set))\nprint(len(test_set))","dd0da658":"from tensorflow.keras.models import load_model\nfrom tensorflow.keras.preprocessing.image import load_img,img_to_array\nmodel = load_model(\"..\/input\/final-model-saved\/fruit_n_veg_model.h5\",compile=False)\nimport json\nlab = training_set.class_indices\nlab={k:v for v,k in lab.items()}\nprint(lab)\nprint(json.dumps(lab, indent=4))","a14faef7":"model.summary()","2b31e8fc":"print(src)","7f5e0937":"..\/input\/indian-fruits-ripe-or-bad\/Top Indian Fruits Dataset_Clean Images\/FruitDataSet of 256x256 Size_12000 Images\/Apple_Bad","d4d6d06f":"import matplotlib.pyplot as plt\nimg=\"..\/input\/apple-variety\/types-of-apples-1-1200.jpg\"\npic=image.load_img(img,target_size=(224,224,3))\n#plt.imshow(pic)\noutput(img)"}}