{"cell_type":{"48c9b7d0":"code","89d4c71a":"code","e77b4cac":"code","533f99b7":"code","334c8440":"code","0fc64ee5":"markdown","9e28a455":"markdown","142423b5":"markdown","e80de7a7":"markdown","67af14c1":"markdown","bbdf4955":"markdown"},"source":{"48c9b7d0":"!pip install tokenizers==0.5.2","89d4c71a":"# For the user's convenience `tokenizers` provides some very high-level classes encapsulating\n# the overall pipeline for various well-known tokenization algorithm. \n# Everything described below can be replaced by the ByteLevelBPETokenizer class. \n\nfrom tokenizers import Tokenizer\nfrom tokenizers.decoders import ByteLevel as ByteLevelDecoder\nfrom tokenizers.models import BPE\nfrom tokenizers.normalizers import Lowercase, NFKC, Sequence\nfrom tokenizers.pre_tokenizers import ByteLevel\n\n# First we create an empty Byte-Pair Encoding model (i.e. not trained model)\ntokenizer = Tokenizer(BPE.empty())\n\n# Then we enable lower-casing and unicode-normalization\n# The Sequence normalizer allows us to combine multiple Normalizer that will be\n# executed in order.\ntokenizer.normalizer = Sequence([\n    NFKC(),\n    Lowercase()\n])\n\n# Our tokenizer also needs a pre-tokenizer responsible for converting the input to a ByteLevel representation.\ntokenizer.pre_tokenizer = ByteLevel()\n\n# And finally, let's plug a decoder so we can recover from a tokenized input to the original one\ntokenizer.decoder = ByteLevelDecoder()","e77b4cac":"from tokenizers.trainers import BpeTrainer\n\n\n# We initialize our trainer, giving him the details about the vocabulary we want to generate\ntrainer = BpeTrainer(vocab_size=25000, show_progress=True, initial_alphabet=ByteLevel.alphabet())\ntokenizer.train(trainer, [\"..\/input\/big.txt\"])\n\nprint(\"Trained vocab size: {}\".format(tokenizer.get_vocab_size()))","533f99b7":"# You will see the generated files in the output.\ntokenizer.model.save('.')","334c8440":"# Let's tokenizer a simple input\ntokenizer.model = BPE.from_files('vocab.json', 'merges.txt')\nencoding = tokenizer.encode(\"This is a simple input to be tokenized\")\n\nprint(\"Encoded string: {}\".format(encoding.tokens))\n\ndecoded = tokenizer.decode(encoding.ids)\nprint(\"Decoded string: {}\".format(decoded))","0fc64ee5":"Et voil\u00e0 ! You trained your very first tokenizer from scratch using `tokenizers`. Of course, this \ncovers only the basics, and you may want to have a look at the `add_special_tokens` or `special_tokens` parameters\non the `Trainer` class, but the overall process should be very similar.\n\nWe can save the content of the model to reuse it later.","9e28a455":"Now, let load the trained model and start using out newly trained tokenizer","142423b5":"## Tokenization doesn't have to be slow !\n\n### Introduction\n\nBefore going deep into any Machine Learning or Deep Learning Natural Language Processing models, every practitioner\nshould find a way to map raw input strings to a representation understandable by a trainable model.\n\nOne very simple approach would be to split inputs over every space and assign an identifier to each word. This approach\nwould look similar to the code below in python\n\n```python\ns = \"very long corpus...\"\nwords = s.split(\" \")  # Split over space\nvocabulary = dict(enumerate(set(words)))  # Map storing the word to it's corresponding id\n```\n\nThis approach might work well if your vocabulary remains small as it would store every word (or **token**) present in your original\ninput. Moreover, word variations like \"cat\" and \"cats\" would not share the same identifiers even if their meaning is \nquite close.\n\n![tokenization_simple](https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2019\/11\/tokenization.png)\n\n### Subtoken Tokenization\n\nTo overcome the issues described above, recent works have been done on tokenization, leveraging \"subtoken\" tokenization.\n**Subtokens** extends the previous splitting strategy to furthermore explode a word into grammatically logicial sub-components learned\nfrom the data.\n\nTaking our previous example of the words __cat__ and __cats__, a sub-tokenization of the word __cats__ would be [cat, ##s]. Where the prefix _\"##\"_ indicates a subtoken of the initial input. \nSuch training algorithms might extract sub-tokens such as _\"##ing\"_, _\"##ed\"_ over English corpus.\n\nAs you might think of, this kind of sub-tokens construction leveraging compositions of _\"pieces\"_ overall reduces the size\nof the vocabulary you have to carry to train a Machine Learning model. On the other side, as one token might be exploded\ninto multiple subtokens, the input of your model might increase and become an issue on model with non-linear complexity over the input sequence's length. \n \n![subtokenization](https:\/\/nlp.fast.ai\/images\/multifit_vocabularies.png)\n \nAmong all the tokenization algorithms, we can highlight a few subtokens algorithms used in Transformers-based SoTA models : \n\n- [Byte Pair Encoding (BPE) - Neural Machine Translation of Rare Words with Subword Units (Sennrich et al., 2015)](https:\/\/arxiv.org\/abs\/1508.07909)\n- [Word Piece - Japanese and Korean voice search (Schuster, M., and Nakajima, K., 2015)](https:\/\/research.google\/pubs\/pub37842\/)\n- [Unigram Language Model - Subword Regularization: Improving Neural Network Translation Models with Multiple Subword Candidates (Kudo, T., 2018)](https:\/\/arxiv.org\/abs\/1804.10959)\n- [Sentence Piece - A simple and language independent subword tokenizer and detokenizer for Neural Text Processing (Taku Kudo and John Richardson, 2018)](https:\/\/arxiv.org\/abs\/1808.06226)\n\nGoing through all of them is out of the scope of this notebook, so we will just highlight how you can use them.\n\n### @huggingface\/tokenizers library \nAlong with the transformers library, we @huggingface provide a blazing fast tokenization library\nable to train, tokenize and decode dozens of Gb\/s of text on a common multi-core machine.\n\nThe library is written in Rust allowing us to take full advantage of multi-core parallel computations in a native and memory-aware way, on-top of which \nwe provide bindings for Python and NodeJS (more bindings may be added in the future). \n\nWe designed the library so that it provides all the required blocks to create end-to-end tokenizers in an interchangeable way. In that sense, we provide\nthese various components: \n\n- **Normalizer**: Executes all the initial transformations over the initial input string. For example when you need to\nlowercase some text, maybe strip it, or even apply one of the common unicode normalization process, you will add a Normalizer. \n- **PreTokenizer**: In charge of splitting the initial input string. That's the component that decides where and how to\npre-segment the origin string. The simplest example would be like we saw before, to simply split on spaces.\n- **Model**: Handles all the sub-token discovery and generation, this part is trainable and really dependant\n of your input data.\n- **Post-Processor**: Provides advanced construction features to be compatible with some of the Transformers-based SoTA\nmodels. For instance, for BERT it would wrap the tokenized sentence around [CLS] and [SEP] tokens.\n- **Decoder**: In charge of mapping back a tokenized input to the original string. The decoder is usually chosen according\nto the `PreTokenizer` we used previously.\n- **Trainer**: Provides training capabilities to each model.\n\nFor each of the components above we provide multiple implementations:\n\n- **Normalizer**: Lowercase, Unicode (NFD, NFKD, NFC, NFKC), Bert, Strip, ...\n- **PreTokenizer**: ByteLevel, WhitespaceSplit, CharDelimiterSplit, Metaspace, ...\n- **Model**: WordLevel, BPE, WordPiece\n- **Post-Processor**: BertProcessor, ...\n- **Decoder**: WordLevel, BPE, WordPiece, ...\n\nAll of these building blocks can be combined to create working tokenization pipelines. \nIn the next section we will go over our first pipeline.","e80de7a7":"The overall pipeline is now ready to be trained on the corpus we downloaded earlier in this notebook.","67af14c1":"The Encoding structure exposes multiple properties which are useful when working with transformers models\n\n- normalized_str: The input string after normalization (lower-casing, unicode, stripping, etc.)\n- original_str: The input string as it was provided\n- tokens: The generated tokens with their string representation\n- input_ids: The generated tokens with their integer representation\n- attention_mask: If your input has been padded by the tokenizer, then this would be a vector of 1 for any non padded token and 0 for padded ones.\n- special_token_mask: If your input contains special tokens such as [CLS], [SEP], [MASK], [PAD], then this would be a vector with 1 in places where a special token has been added.\n- type_ids: If your was made of multiple \"parts\" such as (question, context), then this would be a vector with for each token the segment it belongs to.\n- overflowing: If your has been truncated into multiple subparts because of a length limit (for BERT for example the sequence length is limited to 512), this will contain all the remaining overflowing parts.","bbdf4955":"Alright, now we are ready to implement our first tokenization pipeline through `tokenizers`. \n\nFor this, we will train a Byte-Pair Encoding (BPE) tokenizer on a quite small input for the purpose of this notebook.\nWe will work with [the file from Peter Norving](https:\/\/www.google.com\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjYp9Ppru_nAhUBzIUKHfbUAG8QFjAAegQIBhAB&url=https%3A%2F%2Fnorvig.com%2Fbig.txt&usg=AOvVaw2ed9iwhcP1RKUiEROs15Dz).\nThis file contains around 130.000 lines of raw text that will be processed by the library to generate a working tokenizer.\n"}}