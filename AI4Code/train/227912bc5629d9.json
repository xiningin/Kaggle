{"cell_type":{"5fbbdb8d":"code","550874fb":"code","4cf02c8b":"code","fe21ce7d":"code","31d8a2b1":"code","42b701ac":"code","a439691f":"code","01ee46f3":"code","544bee56":"code","6aded874":"code","8df98dc0":"code","fd65f2ec":"code","d338fdc1":"code","2db1a7a8":"code","f8ea89cf":"code","14bcf2ce":"markdown","d026392c":"markdown","070aa122":"markdown","a237afab":"markdown","0f9ffbb3":"markdown","5fccb6ab":"markdown","bc1bc202":"markdown","072dcebd":"markdown","e40f9f13":"markdown","338b4e20":"markdown","82c64537":"markdown","75f20c5a":"markdown"},"source":{"5fbbdb8d":"def should_hit(player_total, dealer_card_val, player_aces):\n    \"\"\"Return True if the player should hit (request another card) given the current game\n    state, or False if the player should stay. player_aces is the number of aces the player has.\n    \"\"\"\n    return False","550874fb":"# SETUP. You don't need to worry for now about what this code does or how it works. \n# If you're curious about the code, it's available under an open source license at https:\/\/github.com\/Kaggle\/learntools\/\nfrom learntools.core import binder; binder.bind(globals())\nfrom learntools.python.ex3 import q7 as blackjack\nprint('Setup complete.')","4cf02c8b":"blackjack.simulate_one_game()","fe21ce7d":"blackjack.simulate(n_games=50000)","31d8a2b1":"from contextlib import redirect_stdout\nfrom io import StringIO\nimport numpy as np\ndef simulate_game(verbose=False):\n    out_buffer = StringIO()\n    with redirect_stdout(out_buffer):\n        blackjack.simulate_one_game()\n    out_str = out_buffer.getvalue()\n    if verbose: \n        print(out_str)\n    return any(['Player wins' in x for x in out_str.split('\\n')]) # if any lines say player wins then we won\nsimulate_game(True)","42b701ac":"global val_list\nval_list = []\ndef should_hit(player_total, dealer_card_val, player_aces):\n    global val_list\n    cur_move = np.random.choice([True, False])\n    val_list+=[(player_total, dealer_card_val, player_aces, cur_move)]\n    return cur_move\n\nsimulate_game(False)\nprint(val_list)","a439691f":"%matplotlib inline\nimport pandas as pd\nout_rows=[]\nfor i in range(75000):\n    val_list=[]\n    c_score = simulate_game(False)\n    for i, (player_total, dealer_card_val, player_aces, cur_move) in enumerate(reversed(val_list)):\n        score = 1.0*c_score if i==0 else 0.4+0.1*c_score\n        out_rows+=[{'result': score,\n                    'player_total': player_total, \n                    'dealer_card_val': dealer_card_val, \n                    'player_aces': player_aces, \n                    'cur_move': cur_move\n                   }]\nmove_df = pd.DataFrame(out_rows)\nprint('Win Percentages: {:2.2f}'.format(move_df[move_df['result'].isin([0.0, 1.0])]['result'].mean()*100))\nmove_df.to_csv('all_games.csv', index=False) # save the results\nmove_df.head(10)","01ee46f3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfig, (ax1, ax2) = plt.subplots(2,1, figsize=(15, 10))\nsns.heatmap(100*move_df.query('not cur_move').pivot_table(index='dealer_card_val', \n                                    columns='player_total', \n                                    aggfunc='mean', \n                                    values='result').values, \n            ax=ax1, annot=True, fmt='2.0f', vmin = 10, vmax = 90)\n\nax1.set_title('If player stays')\nax1.set_ylabel('Dealer Card')\nax1.set_xlabel('Player Total')\n\nsns.heatmap(100*move_df.query('cur_move').pivot_table(index='dealer_card_val', \n                                    columns='player_total', \n                                    aggfunc='mean', \n                                    values='result').values, \n            ax=ax2, annot=True, fmt='2.0f', vmin = 10, vmax = 90)\nax2.set_title('If player hits')\nax2.set_ylabel('Dealer Card')\nax2.set_xlabel('Player Total');","544bee56":"from graphviz import Source\nfrom IPython.display import SVG\nfrom sklearn.tree import export_graphviz\nx_vars=['player_total', 'dealer_card_val', 'player_aces']\nshow_tree = lambda x: SVG(Source(export_graphviz(x, out_file=None, feature_names=x_vars)).pipe(format='svg'))","6aded874":"from sklearn.tree import DecisionTreeRegressor\nhit_df = move_df.query('cur_move').groupby(x_vars).agg('mean').reset_index()\nhit_tree = DecisionTreeRegressor()\nhit_tree.fit(hit_df[x_vars], hit_df['result'])\nshow_tree(hit_tree)","8df98dc0":"stand_df = move_df.query('not cur_move').groupby(x_vars).agg('mean').reset_index()\nstand_tree = DecisionTreeRegressor()\nstand_tree.fit(stand_df[x_vars], stand_df['result'])\nshow_tree(stand_tree)","fd65f2ec":"def should_hit(player_total, dealer_card_val, player_aces):\n    hit_result = hit_tree.predict(\n        np.reshape([player_total, dealer_card_val, player_aces], \n                   (1, -1)))[0]\n    stand_result = stand_tree.predict(\n        np.reshape([player_total, dealer_card_val, player_aces], \n                   (1, -1)))[0]\n    return hit_result>=stand_result","d338fdc1":"blackjack.simulate_one_game()","2db1a7a8":"blackjack.simulate(n_games=100000)","f8ea89cf":"def should_hit(player_total, dealer_card_val, player_aces):\n    hit_result = hit_tree.predict(\n        np.reshape([player_total, dealer_card_val, player_aces], \n                   (1, -1)))[0]\n    stand_result = stand_tree.predict(\n        np.reshape([player_total, dealer_card_val, player_aces], \n                   (1, -1)))[0]\n    return hit_result>stand_result # a slightly more conservative strategy\nblackjack.simulate(n_games=100000)","14bcf2ce":"Once you have run the set-up code. You can see the action for a single game of blackjack with the following line:","d026392c":"# Discuss Your Results\n\nHow high can you get your win rate? We have a [discussion thread](https:\/\/www.kaggle.com\/learn-forum\/58735#latest-348767) to discuss your results. Or if you think you've done well, reply to our [Challenge tweet](https:\/\/twitter.com\/kaggle) to let us know.","070aa122":"# Your Turn\n\nSo since Kaggle is all about machine learning we want to instrumentalize the code so we can keep track of what happens. We will first make a `should_hit` function that behaves randomly and we will keep track of what wins and what loses over time","a237afab":"## Show the likelihood of winning\n- based on the dealer card (x-axis) and the player total (y-axis)","0f9ffbb3":"---\nThis exercise is from the **[Python Course](https:\/\/www.kaggle.com\/Learn\/python)** on Kaggle Learn.\n\nCheck out **[Kaggle Learn](https:\/\/www.kaggle.com\/Learn)**  for more instruction and fun exercises.","5fccb6ab":"# The Blackjack Simulator\n\nRun the cell below to set up our simulator environment:","bc1bc202":"We'll simulate games between your player agent and our own dealer agent by calling your function. So it must use the name `should_hit`","072dcebd":"You can see how your player does in a sample of 50,000 games with the following command:","e40f9f13":"# Make a model\nWe can make a model for hitting `cur_move==True` and standing `cur_move==False` and then compare the expected outcomes of the two models to make a better informated decision.","338b4e20":"# Blackjack Rules\n\nWe'll use a slightly simplified version of blackjack (aka twenty-one). In this version, there is one player (who you'll control) and a dealer. Play proceeds as follows:\n\n- The player is dealt two face-up cards. The dealer is dealt one face-up card.\n- The player may ask to be dealt another card ('hit') as many times as they wish. If the sum of their cards exceeds 21, they lose the round immediately.\n- The dealer then deals additional cards to himself until either:\n    - The sum of the dealer's cards exceeds 21, in which case the player wins the round, or\n    - The sum of the dealer's cards is greater than or equal to 17. If the player's total is greater than the dealer's, the player wins. Otherwise, the dealer wins (even in case of a tie).\n\nWhen calculating the sum of cards, Jack, Queen, and King count for 10. Aces can count as 1 or 11 (when referring to a player's \"total\" above, we mean the largest total that can be made without exceeding 21. So e.g. A+8 = 19, A+8+8 = 17)\n\n# The Blackjack Player\nYou'll write a function representing the player's decision-making strategy. Here is a simple (though unintelligent) example.\n\n**Run this code cell** so you can see simulation results below using the logic of never taking a new card.","82c64537":"# Intro\n\nReady for a quick test of your logic and programming skills?\n\nIn today's micro-challenge, you will write the logic for a blackjack playing program.  Our dealer will test your program by playing 50,000 hands of blackjack. You'll see how frequently your program won, and you can discuss how your approach stacks up against others in the challenge.\n\n![Blackjack](http:\/\/www.hightechgambling.com\/sites\/default\/files\/styles\/large\/public\/casino\/table_games\/blackjack.jpg)","75f20c5a":"# Simulate Lots of Games\nHere we simulate lots of games and keep track of what happened. If we win it is a 1 if we lose it is a 0 and for intermediate steps it is a 0.4 or 0.5 depending on if the game was ultimately won by the player"}}