{"cell_type":{"2fdab0da":"code","096f6234":"code","46cfe636":"code","62b99f42":"code","c71241d4":"code","b6757044":"code","03c1f7d0":"code","3e567705":"code","686d0de9":"code","3d74238c":"code","8884ba60":"code","47232ab8":"code","96237162":"code","22e652ee":"code","6282da74":"code","62f93c4b":"code","3f604c1a":"code","9fa17aa1":"code","2343e3f8":"code","ea96c2f1":"code","88b3600f":"code","3ad0ce09":"code","5227194a":"code","db54f16b":"code","ad9a79ac":"code","8e3a8b61":"code","e5348c38":"code","15b1eceb":"code","660f9f29":"code","47db0ab6":"code","35392a32":"code","5c314ed1":"code","c5e5eb3b":"code","1fc448c7":"code","77958f17":"code","872090b4":"code","347177aa":"code","e703d59b":"code","4da520c5":"code","c734371b":"code","9951680a":"code","e7a01d74":"code","524ec656":"code","564477b9":"code","2f8ecda6":"code","75ef7a05":"code","75ebfc15":"code","241d6f42":"code","02192398":"code","21c101f6":"code","acf4120d":"code","16395eee":"code","bf97b1f0":"code","88789cc3":"code","75ed7572":"code","750438e8":"code","8e903d51":"code","075c791c":"code","1168a352":"code","d6200808":"code","fb465c1a":"code","97a71e2d":"code","390a85d2":"code","2d428fa0":"code","d7c70de5":"code","9da49411":"code","36f1d57a":"code","e4a819e8":"code","85e4dba9":"markdown","db136318":"markdown","d3276147":"markdown","e4965677":"markdown","32c30caa":"markdown","3e2ef19b":"markdown","5982f9c9":"markdown","4fd47e13":"markdown","e3171692":"markdown","a4af4aaa":"markdown","dd9f5777":"markdown","4ef42d93":"markdown","d8cf465c":"markdown","9968c307":"markdown","1d21e987":"markdown","9ff3d293":"markdown","a4a65fad":"markdown","204101ff":"markdown","21d2d705":"markdown","23373411":"markdown","0dade684":"markdown","ffd0c6d1":"markdown","0a38dec3":"markdown","24b8e1d2":"markdown","7c816f7e":"markdown","d4c9611d":"markdown","69c889ea":"markdown","1962cd10":"markdown"},"source":{"2fdab0da":"# Bibliotecas para an\u00e1lise dos dados\nimport pandas as pd \nimport numpy as np ","096f6234":"# Criando dataframe com os dados de Treino\ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\n# Visualiza\u00e7\u00e3o inicial do dataframe\nprint(f'N\u00famero de Linhas e Colunas: {df.shape}')\ndf.head()","46cfe636":"# Alterar o nome das colunas para facilitar o entendimento \ndf.columns = [\"Id\", \"Sobreviveu\", \"Classe\", \"Nome\", \"Sexo\", \"Idade\", \"Familiares\", \"Dependentes\", \"Ticket\", \"Pre\u00e7o da Passagem\", \"Cabine\", \"Local de Embarque\"]\ndf.head()","62b99f42":"# Avaliar a distribui\u00e7\u00e3o da classe Target (Sobreviveu)\ndf.Sobreviveu.value_counts(normalize=True)*100","c71241d4":"# Avaliar a distribui\u00e7\u00e3o da Target por Sexo\ndf.groupby('Sexo')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","b6757044":"# Avaliar a distribui\u00e7\u00e3o da Target por Classe\ndf.groupby('Classe')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","03c1f7d0":"# Avalia\u00e7\u00e3o Geral dos Dados\ndf.describe()","3e567705":"# Avaliar a distribui\u00e7\u00e3o dos passageiros pelas Classes do Navio\ndf.Classe.value_counts(normalize=True).sort_index()*100","686d0de9":"# Avaliar a distribui\u00e7\u00e3o dos passageiros por Sexo\ndf.Sexo.value_counts(normalize=True)*100","3d74238c":"# Avaliar a exist\u00eancia de valores faltantes\ndf.isnull().sum()","8884ba60":"# Propor\u00e7\u00e3o de passageiros sem o registro da Idade\n((df.Idade.isnull().sum())\/df.shape[0])*100","47232ab8":"# Avaliar a distribui\u00e7\u00e3o da classe Target pela Idade, a fim de validar alguma correla\u00e7\u00e3o\nimport seaborn as sns\nsns.histplot(data=df.Sobreviveu, x=df.Idade, hue=df.Sobreviveu, bins=14)","96237162":"# Criar nova coluna para as Faixas Et\u00e1rias (criar tamb\u00e9m na base de teste)\nconditions = [\n    (df['Idade'] <= 6.0),\n    (df['Idade'] > 6.0),\n    (df['Idade'].isnull())]\nchoices = [0, 1, 2]\ndf['Faixa Et\u00e1ria'] = np.select(conditions, choices)","22e652ee":"# Avaliar a distriui\u00e7\u00e3o da Sobreviv\u00eancia entre as Faixas Et\u00e1rias criadas\ndf.groupby('Faixa Et\u00e1ria')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","6282da74":"# Avaliar a distribui\u00e7\u00e3o da classe Target pelo Pre\u00e7o da Passagem, a fim de validar alguma correla\u00e7\u00e3o\nimport seaborn as sns\nsns.histplot(data=df.Sobreviveu, x=df['Pre\u00e7o da Passagem'], hue=df.Sobreviveu, bins=12)","62f93c4b":"# Criar nova coluna para a Renda (criar tamb\u00e9m na base de teste)\nconditions = [\n    (df['Pre\u00e7o da Passagem'] <= 48.0),\n    (df['Pre\u00e7o da Passagem'] > 48.0)]\nchoices = [0, 1]\ndf['Renda'] = np.select(conditions, choices)","3f604c1a":"# Avaliar a distriui\u00e7\u00e3o da Sobreviv\u00eancia entre as Faixas de Renda\ndf.groupby('Renda')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","9fa17aa1":"# Valores \u00fanicos para pre\u00e7o da passagem\nlen(df['Pre\u00e7o da Passagem'].unique())","2343e3f8":"# Propor\u00e7\u00e3o de passageiros que n\u00e3o tem indica\u00e7\u00e3o da Cabine\n((df.Cabine.isnull().sum())\/df.shape[0])*100","ea96c2f1":"# Criar dataframes das pessoas Com e Sem o registro da Cabine\nnull_cabin = df.loc[df['Cabine'].isna()]\nsome_cabin = df.loc[df['Cabine'].notna()]\n\n# Avaliar a distribui\u00e7\u00e3o da Target nos passageiros Com e Sem o registro da Cabine\nprint(f'Sobreviv\u00eancia de passageiros Com Cabine:\\n{some_cabin.Sobreviveu.value_counts(normalize=True).sort_index()*100}')\nprint(f'Sobreviv\u00eancia de passageiros Sem Cabine:\\n{null_cabin.Sobreviveu.value_counts(normalize=True).sort_index()*100}')","88b3600f":"# Avaliar a distribui\u00e7\u00e3o dos passageiros Com e Sem Cabine por Classe\nprint(f'Classe dos passageiros Com Cabine:\\n{some_cabin.Classe.value_counts(normalize=True).sort_index()*100}')\nprint(f'Classe dos passageiros Sem Cabine:\\n{null_cabin.Classe.value_counts(normalize=True).sort_index()*100}')","3ad0ce09":"# Avaliar a distribui\u00e7\u00e3o dos passageiros Com e Sem Cabine por Sexo\nprint(f'Sexo dos passageiros Com Cabine:\\n{some_cabin.Sexo.value_counts(normalize=True)*100}')\nprint(f'Sexo dos passageiros Sem Cabine:\\n{null_cabin.Sexo.value_counts(normalize=True)*100}')","5227194a":"# Avaliar passageiros com Local de Embarque faltante\ndf.loc[df['Local de Embarque'].isna()]","db54f16b":"# Avaliar o n\u00famero de Tickets \u00fanicos \nlen(df.Ticket.unique())","ad9a79ac":"# Ver os Tickets que aparecem mais vezes na base\ndf.Ticket.value_counts().head(6)","8e3a8b61":"# Avaliar os passageiros com o Ticket 1601\ndf.loc[df['Ticket']=='1601']","e5348c38":"# Avaliar os passageiros com o Ticket 347082\ndf.loc[df['Ticket']=='347082']","15b1eceb":"# Avaliar os passageiros com o Ticket CA. 2343\ndf.loc[df['Ticket']=='CA. 2343']","660f9f29":"# Avaliar os passageiros com o Ticket CA 2144\ndf.loc[df['Ticket']=='CA 2144']","47db0ab6":"# Avaliar os passageiros com o Ticket 3101295\ndf.loc[df['Ticket']=='3101295']","35392a32":" # Avaliar os passageiros com o Ticket 347088\ndf.loc[df['Ticket']=='347088'] ","5c314ed1":"# Identificar passageiros da mesma fam\u00edlia (esse processo precisa ser feito na base de Teste)\ndf['Sobrenome'] = df['Nome'].str.split(',').str[0]\ndf['Grupo'] = df.duplicated(subset=['Sobrenome'], keep=False)\ndf['Grupo'] = df['Grupo'].replace({True: 1, False: 0})\ndf.head()","c5e5eb3b":"# Avaliar a distribui\u00e7\u00e3o da Target entre as pessoas que estavam em grupo ou fam\u00edlia, e as que estavam sozinhas.\ndf.groupby('Grupo')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","1fc448c7":"# Avaliar a distribui\u00e7\u00e3o das fam\u00edlias ou grupos, pelas Classes do Navio.\ndf.groupby('Classe')['Grupo'].value_counts(normalize=True).sort_index()*100","77958f17":"# Criar coluna com os T\u00edtulos dos passageiros (esse processo precisa ser feito na base de Teste)\ndf['T\u00edtulo'] = df['Nome'].str.split(',').str[1]\ndf['T\u00edtulo'] = df['T\u00edtulo'].str.split('.').str[0]\ndf.head()","872090b4":"# Avaliar a distribui\u00e7\u00e3o da Target pelos T\u00edtulos dos passageiros\ndf.groupby('T\u00edtulo')['Sobreviveu'].value_counts().sort_index()","347177aa":"# Avaliar a situa\u00e7\u00e3o atual do Dataframe\ndf.head()","e703d59b":"# Avaliando a distribui\u00e7\u00e3o do Embarque por Classe\ndf.groupby('Local de Embarque')['Sobreviveu'].value_counts(normalize=True).sort_index()*100","4da520c5":"# Subistituir os missing values por 0\ndf.fillna(value=0, inplace=True)\ndf.isnull().sum()","c734371b":"# Excluir as features que n\u00e3o ser\u00e3o utilizadas na previs\u00e3o\ndf.drop(columns=['Id', 'Nome', 'Ticket', 'Idade', 'Sobrenome', 'Pre\u00e7o da Passagem', 'Familiares', 'Dependentes', 'Local de Embarque'], inplace=True)\ndf.head()","9951680a":"# Avaliar os tipos de Dados\ndf.dtypes","e7a01d74":"# Fazer as transforma\u00e7\u00f5es nos dados (essas mesmas transforma\u00e7\u00f5es precisam ser aplicadas nos dados de Teste)\ndf['Classe'] = df['Classe'].astype(str)\ndf['Sexo'] = df['Sexo'].replace({'male': 1, 'female': 0})\ndf.loc[df['Cabine'] != 0, 'Cabine'] = 1\ndf['Cabine'] = df['Cabine'].astype(int)\n#df['Local de Embarque'] = df['Local de Embarque'].replace({'S': 1, 'C': 2, 'Q': 3, 0: 2}).astype(str)\ndf['T\u00edtulo'] = df['T\u00edtulo'].str.strip()\ndf['T\u00edtulo'] = df['T\u00edtulo'].replace({'Mr': 0})\ndf.loc[df['T\u00edtulo'] != 0, 'T\u00edtulo'] = 1\ndf['T\u00edtulo'] = df['T\u00edtulo'].astype(int)\ndf['Faixa Et\u00e1ria'] = df['Faixa Et\u00e1ria'].astype(str)\ndf.head()","524ec656":"# Avaliar os tipos de Dados, depois da transforma\u00e7\u00e3o\ndf.dtypes","564477b9":"# Criar a matriz com as features e o vetor com a classe target\nX = df.drop('Sobreviveu', axis = 1)\ny = df['Sobreviveu']  \n\n# Dividir a base em Treino e Teste\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=46)","2f8ecda6":"# Tratar colunas categ\u00f3ricas para colunas num\u00e9ricas (label enconde)\nX_train = pd.get_dummies(X_train)\nX_train.head()","75ef7a05":"# Tratar colunas categ\u00f3ricas para colunas num\u00e9ricas (label enconde)\nX_test = pd.get_dummies(X_test)\nX_test.head()","75ebfc15":"# Criar Scaler para tranformar Dataframe (aplicar no conjunto de teste)\nfrom sklearn.preprocessing import MinMaxScaler\nescala = MinMaxScaler()\nX_train = escala.fit_transform(X_train)\nX_test = escala.transform(X_test)","241d6f42":"# Testar Decision Tree\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf_tree = DecisionTreeClassifier()\nparametros = {'min_samples_leaf':[5, 6, 7, 8, 9, 10, 15, 20], 'max_depth':[3, 4, 5, 6, 7, 8, 9, 10], 'criterion': ['entropy', 'gini']}\ngrid = GridSearchCV(estimator=clf_tree, param_grid=parametros, scoring='accuracy', cv=6)\n\n# Validating Model\ngrid.fit(X_train, y_train)\nprint(pd.DataFrame(grid.cv_results_)[['rank_test_score','mean_test_score']].sort_values('rank_test_score').head(5))\nprint(f'Melhores par\u00e2metros: {grid.best_params_}')","02192398":"# Traning Tuning Model\ntuning_clf_tree = DecisionTreeClassifier(criterion='entropy', max_depth=3, min_samples_leaf=5)\ntuning_clf_tree.fit(X_train, y_train)\ny_pred = tuning_clf_tree.predict(X_test)","21c101f6":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# Evaluating Model Accuracy\nprint(f'Acur\u00e1cia do Modelo Decision Tree: {accuracy_score(y_test, y_pred)*100}')\n\n# Evaluating Model Confusion Matrix\nmatriz_tree = pd.DataFrame(confusion_matrix(y_test, y_pred))\nprint('\\nMatriz de Confus\u00e3o Decision Tree') \nprint(matriz_tree)\n\n# Evaluating Model classification Report \nprint('Classification Report do Modelo Decision Tree')\nprint (classification_report(y_test, y_pred))","acf4120d":"# Testar Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nclf_NaiveBayes = GaussianNB()\nparams = {'var_smoothing':[1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 2e-2, 3e-3]}\ngrid = GridSearchCV(estimator=clf_NaiveBayes, param_grid=params, scoring='accuracy', cv=6)\n\n# Training and Validating Model\ngrid.fit(X_train, y_train)\nprint(pd.DataFrame(grid.cv_results_)[['rank_test_score','mean_test_score']].sort_values('rank_test_score').head(5))\nprint(f'Melhores par\u00e2metros: {grid.best_params_}')","16395eee":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Testar XGBoost\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\nclf_xgb = XGBClassifier()\nparams = {'learning_rate':[1e-2, 2e-2, 3e-2, 5e-2, 8e-2], 'max_depth': [3, 4, 5, 6], 'n_estimators': [10, 20, 50, 80, 130, 200, 300]}\ngrid = GridSearchCV(estimator=clf_xgb, param_grid=params, scoring='roc_auc', cv=5)\n\n# Training and Validating Model\ngrid.fit(X_train, y_train)\nprint(pd.DataFrame(grid.cv_results_)[['rank_test_score','mean_test_score']].sort_values('rank_test_score').head(5))\nprint(f'Melhores par\u00e2metros: {grid.best_params_}')","bf97b1f0":"# Tuning Model (XGBoost)\ntuning_clf_xgb = XGBClassifier(learning_rate = 0.01, max_depth = 3, n_estimators = 300)\ntuning_clf_xgb.fit(X_train, y_train)\ny_xgb_pred = tuning_clf_xgb.predict(X_test)","88789cc3":"# Avaliar o desempenho final do Modelo (XGBoost)\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\n# Evaluating Model Accuracy\nprint(f'Acur\u00e1cia do Modelo XGBoost: {accuracy_score(y_test, y_xgb_pred)*100}')\n\n# Evaluating Model Confusion Matrix\nmatriz_xgb = pd.DataFrame(confusion_matrix(y_test, y_xgb_pred))\nprint('\\nMatriz de Confus\u00e3o do Modelo XGBoost') \nprint(matriz_xgb)\n\n# Evaluating Model classification Report \nprint('Classification Report do Modelo XGBoost')\nprint (classification_report(y_test, y_xgb_pred))","75ed7572":"# Abrir a base de Test\ndf_final = pd.read_csv('..\/input\/titanic\/test.csv')\nprint(f'N\u00famero de Linhas e Colunas: {df_final.shape}')\ndf_final.head()","750438e8":"# Criar a coluna Faixa Et\u00e1ria \nconditions = [\n    (df_final['Age'] <= 6.0),\n    (df_final['Age'] > 6.0),\n    (df_final['Age'].isnull())]\nchoices = [0, 1, 2]\ndf_final['Faixa Et\u00e1ria'] = np.select(conditions, choices)","8e903d51":"# Criar a coluna Renda \nconditions = [\n    (df_final['Fare'] <= 48.0),\n    (df_final['Fare'] > 48.0)]\nchoices = [0, 1]\ndf_final['Renda'] = np.select(conditions, choices)","075c791c":"# Criar a coluna Grupo \ndf_final['Sobrenome'] = df_final['Name'].str.split(',').str[0]\ndf_final['Grupo'] = df_final.duplicated(subset=['Sobrenome'], keep=False)\ndf_final['Grupo'] = df_final['Grupo'].replace({True: 1, False: 0})","1168a352":"# Criar coluna dos T\u00edtulos dos passageiros\ndf_final['T\u00edtulo'] = df_final['Name'].str.split(',').str[1]\ndf_final['T\u00edtulo'] = df_final['T\u00edtulo'].str.split('.').str[0]\ndf_final.head()","d6200808":"# Subistituir os missing values por 0\ndf_final.fillna(value=0, inplace=True)\ndf_final.isnull().sum()","fb465c1a":"# Excluir as features que n\u00e3o ser\u00e3o utilizadas na previs\u00e3o\ndf_final.drop(columns=['PassengerId', 'Name', 'Ticket', 'Age', 'Sobrenome', 'Fare', 'SibSp','Parch', 'Embarked'], inplace=True)\ndf_final.head()","97a71e2d":"# Transformando os dados, com as mesmas transforma\u00e7\u00f5es da base de Treino\ndf_final['Pclass'] = df_final['Pclass'].astype(str)\ndf_final['Sex'] = df_final['Sex'].replace({'male': 1, 'female': 0})\ndf_final.loc[df_final['Cabin'] != 0, 'Cabin'] = 1\ndf_final['Cabin'] = df_final['Cabin'].astype(int)\n#df_final['Embarked'] = df_final['Embarked'].replace({'S': 1, 'C': 2, 'Q': 3, 0 : 2}).astype(str)\ndf_final['T\u00edtulo'] = df_final['T\u00edtulo'].str.strip()\ndf_final['T\u00edtulo'] = df_final['T\u00edtulo'].replace({'Mr': 0})\ndf_final.loc[df_final['T\u00edtulo'] != 0, 'T\u00edtulo'] = 1\ndf_final['T\u00edtulo'] = df_final['T\u00edtulo'].astype(int)\ndf_final['Faixa Et\u00e1ria'] = df_final['Faixa Et\u00e1ria'].astype(str)\ndf_final.head()","390a85d2":"# Tratar colunas categ\u00f3ricas para colunas num\u00e9ricas (label enconde)\ndf_final = pd.get_dummies(df_final)\ndf_final.head()","2d428fa0":"# Normaliza\u00e7\u00e3o dos Dados (com o Scaler criado anteriormente)\ndf_final = escala.transform(df_final)\ndf_final","d7c70de5":"# Fazendo a previs\u00e3o com o Modelo XGBoost Tunado\ny_xgb = tuning_clf_xgb.predict(df_final)","9da49411":"# Criar base final com as previs\u00f5es para submiss\u00e3o\ndf_envio = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_envio['Survived'] = y_xgb\ndf_envio.head(10)","36f1d57a":"# Salvar como CSV no formado requerido\ndf_envio = df_envio[['PassengerId', 'Survived']]\ndf_envio.head()","e4a819e8":"# Arvquivo final\ndf_envio.to_csv('pred_xgb_titanic_jwl.csv',index=False)","85e4dba9":"Avaliando a Matriz de Confus\u00e3o e tamb\u00e9m a Precision e Recall, podemos perceber que o desbalanceamento da classe Target est\u00e1 atrapalhando um pouco o desempenho do modelo. Ainda assim esses valores s\u00e3o bem reso\u00e1veis para uma an\u00e1lise com a finalidade apenas de estudar e testar o conhecimento. \nVou rodar todo o tratamento na base de Test e fazer a previs\u00e3o final, queser\u00e1 submetida na competi\u00e7\u00e3o.","db136318":"Certo, agora todas as pessoas que estavam em grupo, ou seja, da **mesma Fam\u00edlia**, est\u00e3o identificadas pela coluna grupo. Vamos avaliar a distribui\u00e7\u00e3o da Target pelos passageiros que estavam em grupos e os que n\u00e3o estavam.","d3276147":"Sabemos que a maior parte dos passageiros do Titanic eram homens, ainda assim, no grupo de passageiros com indica\u00e7\u00e3o da Cabine, a distribui\u00e7\u00e3o \u00e9 praticamente igual entre homens e mulheres. Por isso, mesmo que a correla\u00e7\u00e3o entre a Cabine e a Target pare\u00e7a ser fraca, vale a pena determinar se o passageiro tem a indica\u00e7\u00e3o de cabine ou n\u00e3o. Vou substituir os passageiros sem Cabine por 0 e todos o que tem a marca\u00e7\u00e3o ter\u00e3o valor 1.","e4965677":"No navio est\u00e3o presentes 891 passageiros, e apenas 681 Tickets diferentes existem. Dessa forma, tem v\u00e1rias pessoas com o mesmo Ticket. Vamos avaliar os passageiros que tem o mesmo Ticket, e ver o que \u00e9 poss\u00edvel extrair disso.","32c30caa":"# Aplica\u00e7\u00e3o do Modelo e Submiss\u00e3o do Resultado","3e2ef19b":"A vari\u00e1vel Pre\u00e7o da Passagem apresenta alta cardinalidade e n\u00e3o tem uma correla\u00e7\u00e3o clara com a sobreviv\u00eancia. Dessa forma, ao inv\u00e9s de usar o valores absolutos pagos pelos passageiros, faz mais sentido criar uma classe de Renda e fazer um corte onde existe a maior correla\u00e7\u00e3o do pre\u00e7o da passagem com a sobreviv\u00eancia. Assim sendo, resolvi criar duas classes de renda, sendo que os passageiros que pagaram **at\u00e9 48 d\u00f3lares** ser\u00e3o de Baixa Renda (**0**) e os que pagaram **mais de 48 d\u00f3lares** ser\u00e3o de Alta Renda (**1**). ","5982f9c9":"\u00c9 bem claro que o Sexo do passageiro foi um dos fatores determinantes na sua sobrevi\u00eancia. **74% das mulheres** que estavam no Titanic sobreviveram, enquanto apenas **19% dos homens** sobreviveram. Vamos avaliar se a Classe em que o passageiro viaja est\u00e1 relacionada \u00e0 sobreviv\u00eancia.","4fd47e13":"20% dos passageiros da base est\u00e3o sem a indica\u00e7\u00e3o da idade. Uma forma de corrigir esse dado \u00e9 substituir a idade faltante pela m\u00e9dia das idades, ou uma m\u00e9dia para homens e uma m\u00e9dia para mulheres. Caso a pr\u00f3pria informa\u00e7\u00e3o da Falta da idade seja relevante, podemos deixar isso como uma informa\u00e7\u00e3o discreta, simplificando o ajuste do modelo.","e3171692":"Uma rela\u00e7\u00e3o muito interessante apareceu, o Ticket parece indicar pessoas da mesma fam\u00edlia. Isso pode ser percebido avaliando a coluna do Ticket e tamb\u00e9m do nome, onde a primeira palavra do nome parece indicar a fam\u00edlia. A rela\u00e7\u00e3o entre o Ticket (fam\u00edlia) e a sobreviv\u00eancia \u00e9 muito clara, sendo que em praticamente todos os casos avaliados, todos os familiares morreram. Mas nos casos em que o Ticket \u00e9 o mesmo mas as pessoas n\u00e3o s\u00e3o da mesma fam\u00edlia, parece n\u00e3o haver rela\u00e7\u00e3o entre sobreviver ou n\u00e3o. Pode ser que a fam\u00edlia, atrav\u00e9s do Sobrenome, seja um indicativo mais forte.","a4af4aaa":"**Dicion\u00e1rio dos Dados**:\n\n**ID**: Identificador do Passageiro (int)\n\n**Sobreviveu**: Se o passageiro sobreviveu (0 = N\u00e3o, 1 = Sim)\n\n**Classe**: Classe na qual o passageiro viajou. (1 = Primeira Classe, 2 = Segunda Classe, 3 = Terceira Classe)\n\n**Nome**: Nome do passageiro, com o pronome de tratamento\n\n**Sexo**: Sexo do passageiro (Male, Female)\n\n**Idade**: Idade do passageiro (float)\n\n**Familiares**: Quantidade de irm\u00e3os e c\u00f4njuges relativos ao passageiro\n\n**Dependentes**: Quantidade de Filhos ou Pais (idosos) relativos ao passageiro\n\n**Ticket**: N\u00famero do bilhete do passageiro\n\n**Pre\u00e7o da Passagem**: Valor pago pelo passageiro para viajar (D\u00f3lar)\n\n**Cabine**: N\u00famero da Cabine do passageiro\n\n**Local de Embarque**: Foram 3 paradas antes de seguir para Nova York (C = Cherbourg, Q = Queenstown, S = Southampton)","dd9f5777":"A maior parte dos passageiros estava sem a fam\u00edlia, mas ainda assim uma parcela significativa estava com a fam\u00edlia. Esta informa\u00e7\u00e3o parare ser bastante relevante, logo a informa\u00e7\u00e3o de Grupo ser\u00e1 utilizada no lugar do Ticket. Pode ser que o nome do passageiro indique algumas coisa, pois temos as classifica\u00e7\u00f5es das fam\u00edlias. Dessa forma, pode ser que algu\u00e9m com o t\u00edtulo de Lord ao algo parecido possa ter maior probabilidade de sobreviver. Precisamos fazer uma an\u00e1lise dos nomes.","4ef42d93":"Considerando tudo que foi discutido anteriormente, o valor faltante para a **Cabine** ser\u00e1 simplesmente completado com Zero, pois o simples fato de ter uma cabine marcada j\u00e1 tr\u00e1s grande informa\u00e7\u00e3o sobre a sobreviv\u00eancia. O Local de Embarque sem identifica\u00e7\u00e3o ser\u00e1 transformado em categ\u00f3rica de 0 a 2. Este mesmo tratamento ser\u00e1 aplicado na base de Teste, que ser\u00e1 utilizada para fazer a submiss\u00e3o. ","d8cf465c":"Agora que a base est\u00e1 pronta, podemos treinar um modelo para tentar prever a sobreviv\u00eancia de um passageiros, dadas as caracter\u00edsticas deste indiv\u00edduo. O primeiro passo consiste em dividir a base em duas partes, uma para Treino e Valida\u00e7\u00e3o e outra para Teste do modelo. Isso precisa ser feito para que os processo de Normaliza\u00e7\u00e3o e One-Hot-Encoding sejam feitos na base de treino e as transform\u00e7\u00f5es sejam aplicadas na base de teste.","9968c307":"## Treinar e Testar alguns modelos","1d21e987":"Parece que a Primeira Classe era onde havia uma marca\u00e7\u00e3o correta das Cabines. J\u00e1 a Segunda e a Terceira classes n\u00e3o tinham este controle. Como vimos que a Classe em que o passageiro viajava \u00e9 um importante fator para determinar sua sobreviv\u00eancia, o fato de ter uma cabine marcada pode ajudar a determinar a sobreviv\u00eancia. Vamos avaliar a distribui\u00e7\u00e3o por Sexo, para determinar o padr\u00e3o.","9ff3d293":"\u00c9 bastante diferente a distribui\u00e7\u00e3o da sobreviv\u00eancia para passageiros que tinham o registro da idade e para os que n\u00e3o tinham. Al\u00e9m disso \u00e9 percept\u00edvel que a \u00fanica faixa et\u00e1ria com volume relevante de passageiros e que foi determinante para a sobrevi\u00eancia, foi a faixa et\u00e1ria de crian\u00e7as pequenas. Dessa forma, ser\u00e3o criadas 3 faixas et\u00e1rias para os passageiros: **0**: Crian\u00e7as de 0 a 6 anos, **1**: Passageiros acima dos 6 anos e **2**: Passegeiros sem o registro da idade. Este procedimento pode ser mais adequado, uma vez que foi percebida uma correla\u00e7\u00e3o clara entre a Idade e a Sobreviv\u00eancia, para justificar deixar a idade como vari\u00e1vel cont\u00ednua.","a4a65fad":"Parece haver uma pequena correla\u00e7\u00e3o entre ter o n\u00famero da cabine e sobreviver. Vamos avaliar a distribui\u00e7\u00e3o por sexo e classe e ver se tem algum padr\u00e3o, principalmente com a localiza\u00e7\u00e3o no navio, atrav\u00e9s da classe.","204101ff":"# Introdu\u00e7\u00e3o\nEsse \u00e9 uma an\u00e1lise feita a t\u00edtulo de estudo pessoal, com base no famoso dataset do Titanic: https:\/\/www.kaggle.com\/c\/titanic.\nNa primeira etapa desse notebook ser\u00e1 feita uma an\u00e1lise explorat\u00f3ria dos dados, o que consiste em uma etapa anterior ao processo de previs\u00e3o, para determina\u00e7\u00e3o das features mais relevantes na sobreviv\u00eancia dos passageiros, e tamb\u00e9m para tratamento dos dados categ\u00f3ricos e missing values. Posteriormente ser\u00e1 feito o ajuste de um modelo e submiss\u00e3o da previs\u00e3o de sobreviv\u00eancia no Titanic.","21d2d705":"Est\u00e1 bem claro que as pessoas que estavem em fam\u00edlia, ou grupo, tiveram uma probabilidade um pouco maior de sobreviver. Al\u00e9m disso, essa informa\u00e7\u00e3o \u00e9 \u00fatil porque o resultado de um familiar impacta no resultado dos outros familiares. Esta informa\u00e7\u00e3o pode estar relacionada \u00e0s Classes dos pasageiros, onde as fam\u00edlias da primeira classe podem ter tido prioridade no resgate. Vamos avaliar a dostribui\u00e7\u00e3o dos grupos por Classe.","23373411":"Podemos identificar uma clara correla\u00e7\u00e3o entre a Classe em que o passageiro estava e sua probabilidade de sobreviver: sendo que **63%** da Primeira classe sobreviveu, **47%** da Segunda classe e apenas **24%** da Terceira classe.","0dade684":"**Formata\u00e7\u00e3o dos dados:**\n\n**Classe**: Ser\u00e1 transformada em categ\u00f3rica, para que seja aplicado One-Hot-Encoding.\n\n**Sexo**: Mulher ter\u00e1 valor 0 e Homem valor 1.\n\n**Cabine**: Se tiver a Cabine ficar\u00e1 com valor 1, os demais j\u00e1 est\u00e3o como 0.\n\n**Local de Embarque**: Ser\u00e1 transformada em categ\u00f3rica, para que seja aplicado One-Hot-Encoding.\n\n**Faixa Et\u00e1ria**: Idade < 6 = 0, Idade > 6 = 1, Sem idade  = 2.\n\n**Renda**: Baixa Renda = 0, Alta Renda = 1.\n\n**T\u00edtulo**: Ser\u00e1 transformado em categ\u00f3rica, para que seja aplicado One-Hot-Encoding.\n\n**Pre\u00e7o da Passagem**: Ser\u00e1 normalizado com um scaler.","ffd0c6d1":"# An\u00e1lise e Transforma\u00e7\u00e3o dos Dados","0a38dec3":"# Treinamento e Valida\u00e7\u00e3o do Modelo","24b8e1d2":"\u00c1 classe alvo est\u00e1 desbalanceada, mas n\u00e3o de forma severa. O impacto disso pode ser avaliado atrav\u00e9s da matriz de confus\u00e3o, despois da previs\u00e3o. Por mais que a submiss\u00e3o avalie somente a acur\u00e1cia (que n\u00e3o detecta erros tipo II), \u00e9 importante considerar o impacto desse erro e buscar uma m\u00e9trica adequada (F1, talvez) em situa\u00e7\u00f5es de classes desbalanceadas.\nOutra quest\u00e3o \u00e9 que todas as an\u00e1lises ficaram desbalanceadas, n\u00e3o devendo este comportamento ser confundido totalmente com correla\u00e7\u00e3o.","7c816f7e":"77% dos passageiros est\u00e3o sem o registro da cabine. A cabine \u00e9 uma excelente vari\u00e1vel de localiza\u00e7\u00e3o, podendo indicar a facilidade em sair ou n\u00e3o do navio, na hora do acidente. Precisamos avaliar a distribui\u00e7\u00e3o das cabines por Classe, Sexo e Sobreviv\u00eancia e ver se isso indica algum padr\u00e3o, para assim determinar a melhor forma de tratar essa feature.","d4c9611d":"**Analisando os dados iniciais, podemos perceber algumas caracter\u00edsticas gerais dos passageiros do Titanic**:\n\n**1)** Haviam no navio desde beb\u00eas, com menos de um ano de vida, at\u00e9 idosos, sendo que o passageiro mais velho tinha 80 anos. Mas em geral os passageiros eram mais jovens, sendo a m\u00e9dia de idade de 29,7 anos, e 75% dos passageiros tendo at\u00e9 38 anos.\n\n**2)** O pre\u00e7o da passagem variou bastante, provavelmente em fun\u00e7\u00e3o da classe em que o passageiro viajava. O valor m\u00e9dio da passagem paga para viajar no Titanic foi de 32,20 d\u00f3lares, mas 75% dos passageiros pagaram at\u00e9 31 d\u00f3lares. Os bilhetes mais caros custaram 512 d\u00f3lares.\n\n**3)** A grande maioria dos passageiros viajava sem familiares (marido, esposa ou irm\u00e3o) e n\u00e3o tinham dependentes (filhos e pais idosos).\n\n**4)** Mais da metade dos passageiros (55%) viajava na terceira classe. A segunda classe tinha menos passageiros que a primeira.\n\n**5)** Praticamente 65% dos passageiros eram homens.\n\n**6)** As mulheres sobrevivem em propor\u00e7\u00e3o muito maior que os homens.\n\n**7)** Existe uma correla\u00e7\u00e3o entre a Classe do passageiro e sua probabilidade de sobreviver.","69c889ea":"Os t\u00edtulos: **Miss**, **Mr** e **Mrs** s\u00e3o bem indicativos de sobreviv\u00eancia ou n\u00e3o. Parece haver grande valor nessa informa\u00e7\u00e3o de t\u00edtulo. Por isso,e ela ser\u00e1 tranformada em categ\u00f3rica e utilizada na previs\u00e3o. A tranfora\u00e7\u00e3o ser\u00e1 simplificada, onde **Miss** e **Mrs** ter\u00e3o valor 0, **Mr** Ter\u00e1 valor 1 e os demais valor 2. \n\nFiz v\u00e1rios testes e o t\u00edtulo que realmente impacta nos resultados \u00e9 o de **Mr**. Dessa forma, buscando simplificar a an\u00e1lise, vou considerar apenas uma classe de t\u00edtulo, sendo **Mr** como 0 e todos os demais como 1.","1962cd10":"Estranho, as duas passageiras que n\u00e3o tem o local de embarque definido parecem ter o mesmo Ticket. Precisamos avaliar se existem muito tickets iguais e qual a utilizadade dessa informa\u00e7\u00e3o."}}