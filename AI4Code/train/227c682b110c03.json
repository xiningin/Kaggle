{"cell_type":{"aaf2f0c7":"code","d65f84a3":"code","c75dc8e9":"code","5943843b":"code","a0c168d9":"code","1e0fa283":"code","74664842":"code","ebc44f81":"code","809b8ce5":"code","914b3ea2":"code","947e2b94":"code","6297ce13":"code","9388043a":"code","2e055c80":"code","41044b51":"code","114f83cd":"code","105e6caa":"code","2d3a001b":"code","2d847996":"code","ffc2a2b5":"markdown","304aad33":"markdown","8daac058":"markdown","a93730ed":"markdown","71e50133":"markdown","a9d9a661":"markdown","82476b47":"markdown","46bdaaf3":"markdown","e9b173e4":"markdown","4decb1b7":"markdown","5ffce1e6":"markdown","0f18c863":"markdown","9784cd1f":"markdown","a079ec17":"markdown"},"source":{"aaf2f0c7":"from IPython.display import Image\nimport os","d65f84a3":"Image(r'..\/input\/8-queens-images\/8 Queens images\/sample.jpg')","c75dc8e9":"import numpy as np\nimport copy\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5943843b":"np.random.seed(271)\nsns.set_style(\"whitegrid\")","a0c168d9":"Image(r'..\/input\/8-queens-images\/8 Queens images\/1.PNG')","1e0fa283":"def softmax(input):\n    input = np.array(input, dtype=np.float)\n    input = np.exp(input)\n    output = input \/ input.sum()\n    return output","74664842":"def fitness_function(individual):\n    value = 0\n    for i in range(7):\n        for j in range(i+1,8,1):\n            if individual[i] != individual[j]:\n                x_distance = np.abs(individual[j] - individual[i])\n                y_distance = j - i\n                if x_distance != y_distance:\n                    value += 1\n    return value","ebc44f81":"def mutation(individual, prob=0.1):\n    p = np.random.rand(8)\n    individual[p>prob] = np.random.choice(range(8), 8)[p>prob]\n    \n    return individual","809b8ce5":"def GA(size = 4):\n    size = size\n    num_generation = 0\n    population = []\n    for i in range(size):\n        population.append(np.random.choice(range(8), 8))\n    while (True):\n        print(\"Generation : \", num_generation)\n        fitness_list = []\n        selection = []\n        \n        for individual in population:\n            fitness_value = fitness_function(individual)\n            if fitness_value == 28:\n                print(\"Find Target!\")\n                print(individual)\n                return individual\n            fitness_list.append(fitness_value)\n        \n        print(fitness_list)\n        print()\n        \n        #Selection is Here\n        prob = softmax(fitness_list)\n        select_id = np.random.choice(range(size), size, replace=True, p=prob)\n        for idx in select_id:\n            selection.append(population[idx])\n        num_pair = int(size\/2)\n        position = np.random.choice(range(1,7,1), num_pair, replace=True)\n        \n        \n        #Crossover is Here\n        for i in range(0, size, 2):\n            start = position[int(i\/2)]\n            tempa = copy.deepcopy(selection[i][start:])\n            tempb = copy.deepcopy(selection[i+1][start:])\n            selection[i][start:] = tempb\n            selection[i+1][start:] = tempa\n            \n            \n        #Mutation is Here\n        for i in range(size):\n            selection[i] = copy.deepcopy(mutation(selection[i], prob=0.8))\n        population = selection\n        num_generation += 1","914b3ea2":"def display(input):\n    matrix = np.zeros((8,8))\n    for i in range(8):\n        matrix[i][input[i]] = 1.0\n    return matrix","947e2b94":"Queen = GA(size = 4)","6297ce13":"image = display(Queen)\nimage","9388043a":"plt.figure(figsize=(8,8))\nplt.imshow(image, cmap='gray')","2e055c80":"Queen = GA(size = 100)","41044b51":"image = display(Queen)\nimage","114f83cd":"plt.figure(figsize=(8,8))\nplt.imshow(image, cmap='gray')","105e6caa":"Queen = GA(size = 1000)","2d3a001b":"image = display(Queen)\nimage","2d847996":"plt.figure(figsize=(8,8))\nplt.imshow(image, cmap='gray')","ffc2a2b5":"Initial Population = 4","304aad33":"# **genetic algorithm (GA)**","8daac058":"Initial Population = 100","a93730ed":"**Mutation**","71e50133":"***Now let's solve it!***","a9d9a661":"**Softmax function (transform output into probability)**","82476b47":"Thanks for watching!","46bdaaf3":"# Eight queens puzzle","e9b173e4":"This time, we found target in 105 generations!","4decb1b7":"**Fitness Function** (Survival of the fittest)","5ffce1e6":"Initial Population = 1000","0f18c863":"In computer science and operations research, a genetic algorithm (GA) is a metaheuristic inspired by the process of natural selection that belongs to the larger class of evolutionary algorithms (EA). Genetic algorithms are commonly used to generate high-quality solutions to optimization and search problems by relying on biologically inspired operators such as mutation, crossover and selection.(From Wikipedia)","9784cd1f":"The eight queens puzzle is the problem of placing eight chess queens on an 8\u00d78 chessboard so that no two queens threaten each other; thus, a solution requires that no two queens share the same row, column, or diagonal.","a079ec17":"We found target in 2071 generations"}}