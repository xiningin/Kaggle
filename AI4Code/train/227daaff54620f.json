{"cell_type":{"7fad0d13":"code","f2d4052e":"code","b2446feb":"code","7eaf54db":"code","2730475b":"code","47feb034":"code","13fc26ac":"code","1856c605":"code","693fdf78":"code","bf163d1a":"code","336aea2e":"code","0072d57e":"code","6fac2f27":"code","fc8a65bb":"code","a296b30e":"code","bbe96a62":"code","861c48ba":"code","8b071875":"code","faffa4c6":"code","e4e9fb45":"code","c8baa144":"code","315abb3d":"code","099f32dc":"code","7ae030ad":"code","b26bda14":"code","bd9278e9":"code","a3885c4e":"code","969e580a":"code","2e852502":"code","02c1bc92":"code","0391e0f0":"code","1f8c7b3c":"code","47f343e0":"code","7489ce74":"code","ed5c4779":"code","4314af3f":"code","9990c704":"code","4a714910":"code","6d9a6f38":"code","0c18c9aa":"code","76acac30":"code","291d1aa7":"code","79a387a5":"code","d92f7e69":"code","0ce76bbb":"code","b76dbbef":"code","7b6e8b31":"code","02a2982a":"code","e37bf6b3":"code","d299ce9d":"code","aa22fab2":"code","59c7ef57":"code","e7b27c6b":"code","7df631a3":"code","36f08ea6":"code","22d48121":"code","9875899b":"code","aa6db425":"code","6d42f8f7":"code","54c3639f":"code","e9061d6c":"code","b7931795":"code","4a32e399":"code","834f0011":"code","bdaf3ed9":"code","eafbe84e":"code","cbcf71c8":"code","701a9604":"code","911a22b1":"code","27c10864":"code","85db7d4f":"code","e9aaebe8":"code","19903ffa":"code","d91fd98a":"code","b226c5ed":"code","bdac85e6":"code","c49389cc":"code","d8a12e85":"code","77aa409e":"code","bd8da4db":"code","08e83414":"code","a685cbad":"code","8db44a9b":"code","382b62cb":"code","e2a9d985":"code","e7355ed9":"code","5c201e05":"code","36085589":"code","a31c3105":"code","bbb26de3":"code","70e4c974":"code","8a1a0932":"code","223fe561":"code","3409e51f":"code","6472aad6":"code","15bdf95e":"code","a98bbbfe":"markdown","7d03d217":"markdown","73cf0442":"markdown"},"source":{"7fad0d13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2d4052e":"df = pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","b2446feb":"df.head()","7eaf54db":"list(df[\"neighbourhood_group\"])[:10]","2730475b":"unique_neighbourhood_group = list(df[\"neighbourhood_group\"].unique())","47feb034":"df[df[\"neighbourhood_group\"] == \"Manhattan\"]","13fc26ac":"neighbour_hood_prices = {c:0 for c in unique_neighbourhood_group}\nfor c in unique_neighbourhood_group:\n    mean_price = df[df[\"neighbourhood_group\"] == c][\"price\"].mean()\n    neighbour_hood_prices[c] = mean_price","1856c605":"list(neighbour_hood_prices.items())","693fdf78":"API_KEY = \"AIzaSyBWjiMw1sVjRUWe5cPgtPOct5SdMp1mrlg\"","bf163d1a":"url = f\"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key={API_KEY}\"","336aea2e":"print(url)","0072d57e":"import urllib.request\n","6fac2f27":"path = \"test.png\"","fc8a65bb":"urllib.request.urlretrieve(url, path)","a296b30e":"from matplotlib import pyplot as plt","bbe96a62":"import random","861c48ba":"def show_image_from_url(url, size):\n    path = f\"{str(random.randint(0,1_000_000))}.png\"\n    urllib.request.urlretrieve(url, path)\n    img = Image.open(path)\n    fg, ax = plt.subplots(figsize=size)\n    ax.imshow(img)","8b071875":"from PIL import Image","faffa4c6":"show_image_from_url(url, (20,10))","e4e9fb45":"r\"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=13&size=600x300&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Clabel:C%7C40.718217,-73.998284&key={API_KEY}\"","c8baa144":"r\"path=color:0x00000000|weight:5|fillcolor:0xFFFF0033|8th+Avenue+%26+34th+St,New+York,NY|\\\n8th+Avenue+%26+42nd+St,New+York,NY|Park+Ave+%26+42nd+St,New+York,NY,NY|\\\nPark+Ave+%26+34th+St,New+York,NY,NY\"","315abb3d":"def get_map(zoom, width, height, paths):\n    return f\"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?center=New+York,NY&zoom={zoom}&size={width}x{height}&path={paths}&maptype=roadmap&key={API_KEY}\"\n    ","099f32dc":"def build_path(color, fillcolor, weight, points):\n    return f\"color:0x{color}|fillcolor:{fillcolor}|{points}\"","7ae030ad":"m_map = get_map(10, 800, 600, build_path(\"FFFFFF\", \"FF000000\", 10, \"40.737102,-73.990318|40.749825,-73.987963|40.752946,-73.987384|40.755823,-73.986397\"))","b26bda14":"def show_map(map_args, image_args):\n    url = get_map(*map_args)\n    show_image_from_url(url, image_args)","bd9278e9":"import requests\nimport bs4","a3885c4e":"city_name = \"Manhattan+New+York \"\nurl = f\"https:\/\/nominatim.openstreetmap.org\/ui\/search.html?q={city_name}\"\nresponse = str(requests.get(url).text)\nstart = response.find(\"details btn btn-outline-secondary btn-sm\")\nend = response.find(\">details\", start)","969e580a":"print(f\"from {start} to {end}\")","2e852502":"response[start:end]","02c1bc92":"#import selenium","0391e0f0":"#from requests_html import HTMLSession","1f8c7b3c":"osm_ids = {\"Manhattan\": \"8398124\",\\\n          \"Queens\": \"9691819\",\\\n           \"Staten Island\": \"962876\",\\\n           \"Bronx\": \"9691916\", \\\n           \"Brooklyn\": \"9691750\"\n          }\n","47f343e0":"def get_polygon(osm):\n    url = f\"http:\/\/polygons.openstreetmap.fr\/get_geojson.py?id={osm}&params=0\"\n    js = requests.get(url).json()\n    return js[\"geometries\"][0][\"coordinates\"]","7489ce74":"city_polys = {k: None for k in osm_ids.keys()}","ed5c4779":"for k in osm_ids.keys():\n    city_polys[k] = get_polygon(osm_ids[k])","4314af3f":"poly = get_polygon(osm_ids[\"Manhattan\"])","9990c704":"poly[0][0]","4a714910":"poly[2]","6d9a6f38":"poly[3]","0c18c9aa":"cords = []\nfor p in poly:\n    cords.extend(p)","76acac30":"cords2 = []\nfor c in cords:\n    cords2.extend(c)","291d1aa7":"cords2","79a387a5":"def draw(fig1, ax1, poly, color):\n    for p in poly:\n        for p2 in p:\n            xs = list(map(lambda x: x[0], p2))\n            ys = list(map(lambda x: x[1], p2))\n            ax1.plot(xs, ys, c= color)\n            ax1.fill(xs, ys, c= color)","d92f7e69":"def get_color(price):\n    return ((price \/ 255), 1 - price \/ 255,0)\n    ","0ce76bbb":"fig1, ax1 = plt.subplots()\nax1.set_title(\"NYC Airbnb Prices\")\nfor city in neighbour_hood_prices.keys():\n    poly = city_polys[city]\n    price = neighbour_hood_prices[city]\n    color = get_color(price)\n    draw(fig1, ax1, poly, color)\n    ","b76dbbef":"neighbour_hood_prices","7b6e8b31":"fig1, ax1 = plt.subplots()\nfor poly in city_polys.values():\n    draw(fig1, ax1, poly, \"green\")","02a2982a":"def average_line(diff):\n    average_points = []\n    for i in range(diff, len(cords2), diff):\n        points = cords2[i-diff:i]\n        xs = list(map(lambda x: x[0], points))\n        ys = list(map(lambda x: x[1], points))\n        \n        xs_av = sum(xs) \/ diff\n        ys_av = sum(ys) \/ diff\n        average_points.append((xs_av, ys_av))\n    return average_points","e37bf6b3":"averages = average_line(10)","d299ce9d":"fig1, ax1 = plt.subplots()\n\n\nxs = list(map(lambda x: x[0], averages))\nys = list(map(lambda x: x[1], averages))\nax1.plot(xs, ys)","aa22fab2":"df.head()","59c7ef57":"len(df[\"neighbourhood\"].unique())","e7b27c6b":"def get_bounds_neighbour_hood(neighbour_hood, group):\n    url = f\"https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address={neighbour_hood},{group}, New York, USA&key=AIzaSyBWjiMw1sVjRUWe5cPgtPOct5SdMp1mrlg\"\n    try:\n        bounds = requests.get(url).json()[\"results\"][0][\"geometry\"][\"bounds\"]\n        ne = bounds[\"northeast\"]\n        sw = bounds[\"southwest\"]\n        ne_lat = ne[\"lat\"]\n        ne_lng = ne[\"lng\"]\n\n        sw_lat = sw[\"lat\"]\n        sw_lng = sw[\"lng\"]\n\n        s = sw_lat\n        w = sw_lng\n\n        n = ne_lat\n        e = ne_lng\n\n\n        # in tuple form (lat, lng)\n        nw = (n, w)\n        se = (s, e)\n\n        ne = (n, e)\n        sw = (s, w)\n        return (nw, ne, se, sw)\n    except:\n        return None","7df631a3":"def get_cords(neighbour_hood, group):\n    url = f\"https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address={neighbour_hood},{group}, New York, USA&key=AIzaSyBWjiMw1sVjRUWe5cPgtPOct5SdMp1mrlg\"\n    try:\n        bounds = requests.get(url).json()[\"results\"][0][\"geometry\"][\"location\"]\n        return bounds[\"lat\"], bounds[\"lng\"]\n    except:\n        return None","36f08ea6":"neighbourhood = \"Midtown\"\ngroup = \"Manhattan\"","22d48121":"get_cords(neighbourhood, group)","9875899b":"get_bounds_neighbour_hood(neighbourhood, group)","aa6db425":"def draw(fig1, ax1, poly, color):\n    xs = list(map(lambda x: x[0], poly))\n    ys = list(map(lambda x: x[1], poly))\n    ax1.plot(xs, ys, c= color)\n    ax1.fill(xs, ys, c= color)","6d42f8f7":"df.head()","54c3639f":"nbhs = df[\"neighbourhood\"].unique()","e9061d6c":"nbg = df[\"neighbourhood_group\"].unique()","b7931795":"nbhs","4a32e399":"nbhs_cost = {}","834f0011":"nbhs_poly = {}","bdaf3ed9":"df.head()","eafbe84e":"def draw_city(fig1, ax1, poly, color, city):\n    for p in poly:\n        for p2 in p:\n            xs = list(map(lambda x: x[0], p2))\n            ys = list(map(lambda x: x[1], p2))\n            ax1.plot(xs, ys, c= color, alpha=0.8)\n            ax1.fill(xs, ys, c= color, alpha=0.3)","cbcf71c8":"def draw(fig1, ax1, poly, color):\n    xs = list(map(lambda x: x[1], poly))\n    ys = list(map(lambda x: x[0], poly))\n    ax1.plot(xs, ys, c= color, alpha=0.5)\n    ax1.fill(xs, ys, c= color, alpha=0.5)","701a9604":"price_nb = df.groupby(['neighbourhood']).mean()[\"price\"]","911a22b1":"df.groupby(['neighbourhood']).mean()","27c10864":"price_nb[\"Allerton\"]","85db7d4f":"for nb in nbhs:\n    nb_df = df[df[\"neighbourhood\"] == nb]\n    group = list(nb_df[\"neighbourhood_group\"])[0]\n    #nbhs_poly[f\"{nb}\"] = get_bounds_neighbour_hood(nb, group)\n    nbhs_cords[nb] = get_cords(nb, group)","e9aaebe8":"nbhs_cords = {}","19903ffa":"nbhs_cost = price_nb","d91fd98a":"fig1, ax1 = plt.subplots()\nax1.set_title(\"NYC Airbnb Prices\")\nfor city in neighbour_hood_prices.keys():\n    poly = city_polys[city]\n    price = neighbour_hood_prices[city]\n    color = get_color(price)\n    draw_city(fig1, ax1, poly, color)\nfig1.show()","b226c5ed":"nbhs_cost.items()","bdac85e6":"xs = []\nys = []\ncolors = []\nfor nb in nbhs:\n    x,y = position = nbhs_cords[nb]\n    cost = nbhs_cost[nb]\n    color = get_color(cost)\n    # yes thats right\n    xs.append(y)\n    ys.append(x)\n    colors.append(color)","c49389cc":"plt.scatter(xs, ys, color = colors)","d8a12e85":"from matplotlib.lines import Line2D","77aa409e":"#fig1, ax1 = plt.subplots()\nfig1, ax1 = plt.subplots(figsize=(20,10))\nax1.set_title(\"NYC Airbnb Prices\")\nfor city in neighbour_hood_prices.keys():\n    poly = city_polys[city]\n    price = neighbour_hood_prices[city]\n    color = get_color(price)\n    draw_city(fig1, ax1, poly, color, city)\n\n\n    \nlegend_elements = [\n                   Line2D([0], [0], marker='o', color='green', label='Cheap',\n                          markerfacecolor='green', markersize=15),\n                    Line2D([0], [0], marker='o', color='red', label='expensive',\n                          markerfacecolor='red', markersize=15)\n]\n\n# Create the figure\nfig, ax = plt.subplots()\nax.legend(handles=legend_elements, loc='center')\nfs = 20    \nax1.text(-74, 40.8, \"Manhattan\", fontsize=fs)\nax1.text(-74.2, 40.6, \"Staten Island\", fontsize=fs)\nax1.text(-74, 40.65, \"Brooklyn\", fontsize=fs)\nax1.text(-73.8, 40.7, \"Queens\", fontsize=fs)\nax1.text(-73.9, 40.9, \"Bronx\", fontsize=fs)\nax1.scatter(xs, ys, color = colors, s=100, alpha=0.5, label=\"Viertel\")\nax1.legend(handles=legend_elements)\nfig1.savefig(\"nyc.png\")","bd8da4db":"\"\"\"for nb in nbhs_cost.keys():\n    cost = nbhs_cost[nb]\n    poly = nbhs_poly[nb]\n    if poly is None:\n        continue\n    draw(fig1, ax1, poly, get_color(cost))\n    \"\"\"","08e83414":"fig1.show()","a685cbad":"def get_color(price):\n    return ((price \/ 1_000), 1 - price \/ 1_000,0)","8db44a9b":"list(nbhs_cost.values)","382b62cb":"fig1, ax1 = plt.subplots()\nax1.boxplot(list(nbhs_cost.values))","e2a9d985":"def red_func(price):\n    return (price ** 0.4) \/ 15","e7355ed9":"from math import log","5c201e05":"log(10000, 2)","36085589":"fig1,ax1 = plt.subplots()\nxs = list(range(1, 1000))\nys = list(map(red_func, xs))\nax1.plot(xs, ys)","a31c3105":"def green_func(price):\n    return  2 - (price ** 0.1)","bbb26de3":"fig1,ax1 = plt.subplots()\nxs = list(range(1, 1000))\nys = list(map(green_func, xs))\nax1.plot(xs, ys)","70e4c974":"def get_color(price):\n    return (red_func(price), green_func(price), 0)","8a1a0932":"COLORS = [\"greenyellow\", \"green\" , \"orange\", \"orangered\", \"red\" \"darkred\"]\nBINS = [50, 100, 150 , 10_000]","223fe561":"def get_color(price): \n    for i in range(len(BINS)):\n        if price < BINS[i]:\n            return COLORS[i]\n            ","3409e51f":"df.head()","6472aad6":"df[\"name\"]","15bdf95e":"list(reversed(sorted(list(nbhs_cost.items()),key=lambda x: x[1])))","a98bbbfe":"##def get_bounds_neighbour_hood(neighbour_hood, group):","7d03d217":"DIe Rechtecke d\u00fcrfen nicht aus den Stadtteilen rausragen\nF\u00fcr jedes Viertel einenPunkt eine Farbe\nDann Farbverlauf, oder welcher Punkt am n\u00e4chsten dran ist bekommt die Farbe\n\n\n\n","73cf0442":"## Neighbourhood groups and the average prices!"}}