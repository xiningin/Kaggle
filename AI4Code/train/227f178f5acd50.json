{"cell_type":{"9f1e7392":"code","ce2d71e0":"code","83a66f39":"code","8f604924":"code","849917be":"code","4709fb29":"code","35827a07":"code","863a30f1":"code","2f0a9936":"code","496415f6":"code","b2210b15":"code","3a14aa6f":"code","c9c8c12c":"code","d9996016":"code","36f22983":"code","d49f9759":"code","990bf8e7":"code","a356fb58":"code","305266ba":"code","94ca7b74":"code","b5797105":"code","888a3445":"code","9bee3f69":"code","568c3fed":"code","75e1255a":"code","bfde6737":"code","8a361e8d":"code","52aa0519":"markdown","6e7a154b":"markdown","84ef881c":"markdown","90e88e6c":"markdown","686568ad":"markdown","c46136ec":"markdown"},"source":{"9f1e7392":"import sys\nimport numpy\nimport pandas\nimport matplotlib\nimport seaborn\nimport scipy\nimport sklearn\n\nprint('Python:{}'.format(sys.version))\nprint('Pandas:{}'.format(pandas.__version__))\nprint('Numpy:{}'.format(numpy.__version__))\nprint('Matplotlib:{}'.format(matplotlib.__version__))\nprint('Seaborn:{}'.format(seaborn.__version__))\nprint('Scipy:{}'.format(scipy.__version__))\nprint('Sklearn:{}'.format(sklearn.__version__))","ce2d71e0":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns","83a66f39":"#load the dataset from the csv file using pandas\ndata=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","8f604924":"#explore the dataset\nprint(data.columns)","849917be":"print(data.shape)","4709fb29":"print(data.describe())","35827a07":"data=data.sample(frac=0.1,random_state=1)\nprint(data.shape)","863a30f1":"#plot histogram of each parameter\ndata.hist(figsize=(20,20),\n         facecolor='yellow',\n       density=True,\n       alpha=0.5)\nplt.show()","2f0a9936":"#determine number of Fraud cases in dataset\nfraud=data[data['Class']==1]\nvalid=data[data['Class']==0]\noutlier_fraction=len(fraud)\/float(len(valid))\nprint(outlier_fraction)","496415f6":"print('Fraud Cases:{}'.format(len(fraud)))\nprint('Valid Cases:{}'.format(len(valid)))","b2210b15":"corrmat=data.corr()\nfig=plt.figure(figsize=(12,9))\nsns.heatmap(corrmat,vmax=0.8,square=True)\nplt.show()","3a14aa6f":"# Get all the column from the Dataframe \ncolumns= data.columns.tolist()\n#filters the columns to remove data we dont want \ncolumns = [c for c in columns if c not in['Class']]\n#Store the variables we'll be predicting on\ntargets='Class'\nX=data[columns]\nY=data[targets]\n#print the Shapes of X & Y\nprint(X.shape)\nprint(Y.shape)","c9c8c12c":"sns.set_style(\"whitegrid\")\nsns.FacetGrid(data, hue=\"Class\", size = 6).map(plt.scatter, \"Time\", \"Amount\").add_legend()\nplt.show()","d9996016":"sns.set_style(\"whitegrid\")\nsns.FacetGrid(data, hue=\"Class\", size = 6).map(plt.scatter, \"Amount\", \"Time\").add_legend()\nplt.show()","36f22983":"FilteredData = data[['Time','Amount', 'Class']]\nFilteredData","d49f9759":"print(FilteredData.shape)","990bf8e7":"FilteredData[\"Class\"].value_counts()","a356fb58":"plt.close();\nsns.set_style(\"whitegrid\");\nsns.pairplot(FilteredData, hue=\"Class\", size=5);\nplt.show()","305266ba":"creditCard_genuine = FilteredData.loc[FilteredData[\"Class\"] == 0]\ncreditCard_fraud = FilteredData.loc[FilteredData[\"Class\"] == 1]\n\nplt.plot(creditCard_genuine[\"Time\"], np.zeros_like(creditCard_genuine[\"Time\"]), \"o\")\nplt.plot(creditCard_fraud[\"Time\"], np.zeros_like(creditCard_fraud[\"Time\"]), \"o\")\n\nplt.show()\n\n#X-axis: Time","94ca7b74":"plt.plot(creditCard_genuine[\"Amount\"], np.zeros_like(creditCard_genuine[\"Amount\"]), \"o\")\nplt.plot(creditCard_fraud[\"Amount\"], np.zeros_like(creditCard_fraud[\"Amount\"]), \"o\")\n\nplt.show()\n#X-axis: Amount","b5797105":"sns.FacetGrid(FilteredData, hue=\"Class\", size=10).map(sns.distplot, \"Time\").add_legend()\nplt.show()","888a3445":"sns.FacetGrid(FilteredData, hue=\"Class\", size=10).map(sns.distplot, \"Amount\").add_legend()\nplt.show()","9bee3f69":"counts, bin_edges = np.histogram(FilteredData['Amount'], bins=10, density = True)\npdf = counts\/(sum(counts))\n\nprint(\"pdf = \",pdf)\nprint(\"\\n\")\nprint(\"Counts =\",counts)\nprint(\"\\n\")\nprint(\"Bin edges = \",bin_edges)\n\ncdf = np.cumsum(pdf)\nplt.plot(bin_edges[1:],pdf)\nplt.plot(bin_edges[1:], cdf)\n\n\n\nplt.show();","568c3fed":"print(\"Means:\")\nprint(\"Mean of transaction amount of genuine transactions: \",np.mean(creditCard_genuine[\"Amount\"]))\nprint(\"Mean of transaction amount of fraud transactions: \",np.mean(creditCard_fraud[\"Amount\"]))","75e1255a":"print(\"Standard Deviation:\")\nprint(\"Std-Deviation of transaction amount of genuine transactions: \", np.std(creditCard_genuine[\"Amount\"]))\nprint(\"Std-Deviation of transaction amount of fraud transactions: \", np.std(creditCard_fraud[\"Amount\"]))","bfde6737":"print(\"Median:\")\nprint(\"Median of transaction amount of genuine transactions: \", np.median(creditCard_genuine[\"Amount\"]))\nprint(\"Median of transaction amount of fraud transactions: \", np.median(creditCard_fraud[\"Amount\"]))","8a361e8d":"print(\"\\nQuantiles:\")\nprint(np.percentile(creditCard_genuine[\"Amount\"],np.arange(0, 100, 25)))\nprint(np.percentile(creditCard_fraud[\"Amount\"],np.arange(0, 100, 25)))","52aa0519":"# **Observations:**\n\nIt can clearly be observed from this 1D scatter plot that the fraud transactions are there only on the transaction amount less than 2500.","6e7a154b":"**Correlation Matrix**","84ef881c":"# **Observations:**\n\nThere is a heavy overlap of genuine and fraud transactions throughout the time and there is no clear distinction.","90e88e6c":"## **Mean, Variance and Std-dev**","686568ad":"# **Observations:**\n\nMost of the transaction have amount less than 2500 approximately and all of the fraud transactions have transaction amount less than 2500. There is no fraud transaction of transaction amount greater than 2500.\n\n**Hence, this is the best histogram we have**","c46136ec":"# **Observations:**\n\nProbability of the points having transaction amount approximately less than 2500 is 1, it means almost all of the transactions have transaction amount less than 2500 and cdf curve verifies this fact."}}