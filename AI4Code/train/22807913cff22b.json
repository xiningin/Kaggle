{"cell_type":{"d76dae3f":"code","48304714":"code","6f9454f4":"code","838507e3":"code","853f549a":"code","fdfcac07":"code","5cb6551a":"code","17f5096f":"code","49fba9bc":"code","18e5a7aa":"code","454019e2":"code","ff72da40":"code","3bd01e96":"code","c41467f0":"code","51764423":"code","a3aa6c7c":"code","bece2f10":"code","027ec305":"code","f73001df":"code","75ddd8e9":"code","c18f0a1b":"code","a3c5aee0":"code","b5ca8a9c":"code","1e502cb7":"code","9346513a":"code","a4c6423b":"code","41f4c333":"code","15450abc":"code","5163c220":"code","dbd685a9":"code","0c9f1332":"code","04e33563":"code","c37338f9":"code","5d1952f4":"code","e6e1cb06":"code","0c725c43":"code","50b79da9":"code","7f2458bf":"code","ed596757":"code","bb8f03ef":"code","4231021e":"code","7cd92dc0":"code","1debde74":"code","9fdb4f2a":"code","90f1a3e2":"code","e13908a8":"code","13b47454":"code","21ef6658":"code","52040ef0":"code","f4c35949":"code","4780e7b0":"code","e240715c":"code","e74fc745":"code","b697f776":"code","4f5d3f99":"code","08ccba45":"code","68106b74":"code","cf643cf9":"code","cb65c1d5":"code","4be62f9f":"code","82411edc":"code","c7feb94e":"code","d05e583b":"code","c90cf224":"markdown","3a831b53":"markdown"},"source":{"d76dae3f":"# importing pandas, os, matplotlib, seaborn modules. \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","48304714":"data = pd.read_csv(\"..\/input\/pokemon-challenge\/pokemon.csv\")","6f9454f4":"data.info()","838507e3":"data.corr()","853f549a":"# visualising a correlation map\n\nf,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True, linewidths =.5, fmt ='.1f',ax=ax)\nplt.show()\n\n# if we did not enter 18x18, it would be a default sized heatmap.\n# annot = annotate numerical values or not\n# linewidth = width of the line between the cells\n# fmt = how many digits after the point.","fdfcac07":"data.head(10)","5cb6551a":"data.tail(10)","17f5096f":"data.columns\n\n# every feature listed.","49fba9bc":"# Line Plot for both Speed and Defense\n\ndata.Defense.plot(color = 'r',label = 'Defense',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\ndata.Speed.plot(kind = 'line', color = 'g',label = 'Speed',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","18e5a7aa":"# Scatter Plot \n\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')\nplt.ylabel('Defence')\nplt.title('Attack & Defense Scatter Plot')  ","454019e2":"# Histogram\n\ndata.Speed.plot(kind = 'hist',bins = 45,figsize = (10,10))\nplt.show()","ff72da40":"# clf() = cleans the code, if written after we enter the plotting code\n\ndata.Speed.plot(kind = 'hist',bins = 50);\nplt.clf()\n\n# as seen, no output","3bd01e96":"series = data['Attack'] # creates a series\ndata_frame = data[['Defense']] # creates a data frame\nprint(data)","c41467f0":"print(series)","51764423":"print(data_frame)","a3aa6c7c":"#  Filtering data using Pandas\n\nx = data['Attack']> 180\ndata[x]\n\n# There exist only 2 series that have Attack > 180 ","bece2f10":"data[np.logical_and(data['Defense']<30, data['Attack']>50)]\n\n# combines both comparisons with an 'and' operator","027ec305":"# demonstrating .value_counts()\n\nprint(data['Type 1'].value_counts(dropna =False))","f73001df":"# what are some pokemon with very little HP?\n\ndata[data['HP']<20]","75ddd8e9":"# what are some legendary class pokemon?\n\ndata[data['Legendary'] == True]","c18f0a1b":"data.all()","a3c5aee0":"# statistical values of our data.\n\ndata.describe()","b5ca8a9c":"# Here,\n# 50% = median\n# 25% = Q1 = lower quartile = 'median' of (min,median)\n# 75% = Q3 = upper quartile = 'median' of (median,max)\n\n# 'median' can be used when outliers make 'mean' deceiving.\n\n# IQR = Interquartile Range = Q1-Q3\n\n# threshold for diagnosing outliers: value < Q1-(1.5)*IQR  - OR - value > Q3+(1.5)*IQR => value = outlier  ","1e502cb7":"# demonstrating box plot\n\ndata.boxplot(column='Attack',by = 'Legendary')","9346513a":"# demonstrating .melt()\n\nmelted_data = pd.melt(frame=data,id_vars= 'Name', value_vars=['Attack','Defense'])\nmelted_data.head()","a4c6423b":"# using .pivot(), essentialy reversing .melt()\n\nmelted_data.pivot(index='Name', columns ='variable', values = 'value')\nmelted_data.head()","41f4c333":"# concatenating data vertically\n\ndata2=data.head(5)\nconcat_data_vert =pd.concat([data,data2], axis=0, ignore_index = True)\nconcat_data_vert.tail(11)","15450abc":"# concatenating data horizontally\n\ndata2=data.head(5)\nconcat_data_horiz =pd.concat([data,data2], axis=1)\nconcat_data_horiz.head(10)","5163c220":"#checking for null values\n\ndata.isnull()","dbd685a9":"# we can see there are null values on bottom right\n# this is because concat_data_vert has data2, which only had 5 rows,\n# so, the remaining 795 rows are NaN\n\nconcat_data_horiz.isnull()","0c9f1332":"# what the features' types are, currently:\n\ndata.dtypes","04e33563":"# .astype helps us convert object types\n\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","c37338f9":"# our new & updated data values\n\ndata.dtypes","5d1952f4":"# how many of each of 'Type 2' are there?\n# INCLUDING NaN\n\ndata[\"Type 2\"].value_counts(dropna =False)\n","e6e1cb06":"# we drop the NaN values from our data\n# and make this our new data\n\ndata1=data\ndata1[\"Type 2\"].dropna(inplace = True)","0c725c43":"# (Line) Plotting Attack, Defense, Speed on the same graph \n\ndata1 = data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()","50b79da9":"# to avoid confusion, we can use subplots\n\ndata1.plot(subplots = True)\nplt.show()\n\n# plt.show removes <AxesSubplot:> as seen on the\n# output of the previous cell","7f2458bf":"# scatter plot to help us see correlations\n\ndata1.plot(kind='scatter', x=\"Attack\", y=\"Speed\")","ed596757":"# a histogram of Speed frequency\n\ndata1.plot(kind=\"hist\", y=\"Speed\", bins = 25, range = (0,200))","bb8f03ef":"# same histogram, normalized\n# meaning, area under curve sums up to 1\n\ndata1.plot(kind=\"hist\", y=\"Speed\", bins = 25, range = (0,200), density=True)\n\n\n# note: density=True used to be normed=True in older Python versions","4231021e":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),density= True,ax = axes[1],cumulative = True)\nplt\n\n# the second historygram is out cumulative distrubitive function, or 'cdf'","7cd92dc0":"data","1debde74":"# Making my index any other COLUMN \/ FEATURE\n\ndata = data.set_index(\"Legendary\")\ndata.head()","9fdb4f2a":"data[\"Attack\"][0]","90f1a3e2":"data.Attack[1]","e13908a8":"# selecting certain columns\n\ndata[[\"#\",\"Attack\", \"HP\", \"Type 2\"]]","13b47454":"print(type(data[\"HP\"]))\n\n# creates Series\n\nprint(type(data[[\"HP\"]]))\n\n# creates Data Frame","21ef6658":"data1","52040ef0":"data1.loc[10:1:-1,\"Attack\":\"Defense\"] ","f4c35949":"data1.loc[5:1:-1,\"Speed\":\"Speed\"] ","4780e7b0":"# from Defense to the last feature\n\ndata1.loc[1:10,\"Defense\":] ","e240715c":"# boolean = series\n\nboolean = data.HP > 200\ndata[boolean]","e74fc745":"# pokemon with hp > 100, defense < 50\n\nhigh_hp = data.HP > 100\nlow_def = data.Defense < 50\ndata[high_hp & low_def]","b697f776":"# pokemon with HP<25 and HP>75\n\nlow_hp = data.HP < 25\ndata[high_hp | low_hp]","4f5d3f99":"specifically_filtered= data[(data[\"Name\"] == \"Jigglypuff\")  | (data['Defense'] == 45)]\nprint(specifically_filtered)","08ccba45":"def div_by_45(n):\n    return n\/45\nmuch_smaller_HP=data.HP.apply(div_by_45)","68106b74":"much_smaller_HP","cf643cf9":"data.HP.apply(lambda n : n\/45)","cb65c1d5":"# combining columns\n\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","4be62f9f":"data.index.name = \"my_index_name\"\ndata.head()","82411edc":"data.index = range(-1,799,1)\ndata.head()","c7feb94e":"data1 = data.set_index([\"Type 1\",\"Type 2\"]) \ndata1.head(100)","d05e583b":"data1 = data.set_index([\"Type 2\",\"Type 1\"]) \ndata1","c90cf224":"And that's about it. I'm pretty new, and this is my first public project on kaggle. Happy coding","3a831b53":"# **Please Note:** This notebook was created by following a tutorial."}}