{"cell_type":{"6873cffc":"code","e60a86c6":"code","765ba4b6":"code","f65d64fe":"code","7c6bd216":"code","60b3e4b3":"code","95c4dcec":"code","355be734":"code","cf4018cc":"code","f4cbea1a":"code","7fe933cd":"markdown","a2f527f0":"markdown","d4593dac":"markdown","105fd67b":"markdown","1c3c19e4":"markdown","b4385a17":"markdown","5301a00d":"markdown","b2178331":"markdown"},"source":{"6873cffc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e60a86c6":"import numpy as np\nimport pandas as pd\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nwarnings.filterwarnings(\"ignore\")\nsns.set_style('dark')","765ba4b6":"movie=pd.read_csv(\"\/kaggle\/input\/u.data\",sep=\"\\t\")\ncolumn=[\"user_id\",\"item_id\",\"rating\",\"timestamp\"]\nmovie.columns=column\nmovie.head()\ndf=pd.read_csv(\"\/kaggle\/input\/u.item\",sep=\"\\|\",header=None)\n#c.columns=[\"item_id\",\"title\"]\nc=df[[0,1]]\nc.columns=[\"item_id\",\"title\"]\nc.head()\ndf=pd.merge(movie,c,on=\"item_id\")\ndf.head()","f65d64fe":"c=df.groupby('title').mean()['rating']\nc.sort_values(ascending=False).head()\nd=df.groupby('title').count()['rating']\nd.sort_values(ascending=False)","7c6bd216":"Rate=pd.DataFrame(df.groupby('title').mean()['rating'])\n\nRate[\"no_of_ratings\"]=pd.DataFrame(df.groupby('title').count()['rating'])\nRate.sort_values(by='rating',ascending=False)","60b3e4b3":"plt.figure(figsize=(10,6))\nplt.hist(Rate['no_of_ratings'],bins=70)\nplt.show()\nplt.figure(figsize=(10,6))\nplt.hist(Rate['rating'],bins=70)\nplt.show()","95c4dcec":"sns.jointplot(x=Rate['rating'],y=Rate['no_of_ratings'],data=Rate,alpha=0.85)\nplt.show()","355be734":"moviemat=df.pivot_table(index='user_id',columns='title',values='rating')","cf4018cc":"def predict_movies(movie_name):\n    movie_user_ratings=moviemat[movie_name]\n    similar_to_movie=moviemat.corrwith(movie_user_ratings)\n    corr_movie=pd.DataFrame(similar_to_movie,columns=['correlation'])\n    corr_movie.dropna(inplace=True)\n    corr_movie=corr_movie.join(Rate['no_of_ratings'])\n    predictions=corr_movie[corr_movie['no_of_ratings']>100].sort_values('correlation',ascending=False)\n    return predictions","f4cbea1a":"predictions=predict_movies('Titanic (1997)')\npredictions.head()","7fe933cd":"Function to call predict function","a2f527f0":"this part is for just estimating how many users have given how much ratings","d4593dac":" Finally **actual prediction function that involves correlation of user ratings that gives movies similar to the watching movie**","105fd67b":"****creating actual data to work upon for recomendation****","1c3c19e4":"****grouping and sorting data on the basis of rating given by users ****","b4385a17":"creating new dataframe which includes only above grouped data","5301a00d":" **IMPORTING ALL REQUIRED MODULES**","b2178331":"creating matrix of user_id and movie titles from the original dataframe"}}