{"cell_type":{"17d8bd6c":"code","0d100666":"code","7d12026d":"code","ac6f9099":"code","a2c09ed8":"code","15a04816":"code","f5ff86fb":"code","a4d326c9":"code","2a55c84f":"code","7a21cab6":"code","eb2d7a13":"code","0e6cf068":"code","b4800e49":"code","952c419e":"code","1bf29d30":"code","aa028488":"code","aeaa529a":"markdown"},"source":{"17d8bd6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d100666":"import zipfile\n\n\n\n# Will unzip the files so that you can see them..\nwith zipfile.ZipFile(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip\",\"r\") as z:\n    z.extractall(\".\")\n    \nwith zipfile.ZipFile(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip\",\"r\") as z:\n    z.extractall(\".\")","7d12026d":"with zipfile.ZipFile(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip\",\"r\") as z:\n    z.extractall(\".\")","ac6f9099":"train_df=pd.read_csv(\".\/train.csv\")\n\ntest_df=pd.read_csv(\".\/test.csv\")\n\ntrain_df.sample(5)","a2c09ed8":"cols_target = ['obscene','insult','toxic','severe_toxic','identity_hate','threat']","15a04816":"train_dfx = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-support\/clean_lemmatized_trained2.csv\")\ntest_dfx = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-support\/clean_lemmatized_test.csv\")","f5ff86fb":"X = train_dfx.comment_text\ntest_X = test_dfx.comment_text","a4d326c9":"print(X.shape, test_X.shape)","2a55c84f":"from sklearn.feature_extraction.text import TfidfVectorizer\nvect = TfidfVectorizer(max_features=5000,stop_words='english')\nvect","7a21cab6":"X_dtm = vect.fit_transform(X.values.astype('U'))\n# examine the document-term matrix created from X_train\nX_dtm","eb2d7a13":"# transform the test data using the earlier fitted vocabulary, into a document-term matrix\ntest_X_dtm = vect.transform(test_X.values.astype('U'))\n# examine the document-term matrix from X_test\ntest_X_dtm","0e6cf068":"# import and instantiate the Logistic Regression model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlogreg = LogisticRegression(C=24.0)\n#clf.fit(X, y)","b4800e49":"from sklearn.naive_bayes import MultinomialNB\nclf = MultinomialNB()","952c419e":"# create submission file\nsubmission_binary1 = pd.read_csv('.\/sample_submission.csv')\n\nfor label in cols_target:\n    print('... Processing {}'.format(label))\n    y = train_df[label]\n    # train the model using X_dtm & y\n    logreg.fit(X_dtm, y)\n    # compute the training accuracy\n    y_pred_X = logreg.predict(X_dtm)\n    print('Training accuracy is {}'.format(accuracy_score(y, y_pred_X)))\n    # compute the predicted probabilities for X_test_dtm\n    test_y_prob = logreg.predict_proba(test_X_dtm)[:,1]\n    submission_binary1[label] = test_y_prob\n","1bf29d30":"# create submission file\nsubmission_binary2 = pd.read_csv('.\/sample_submission.csv')\n\nfor label in cols_target:\n    print('... Processing {}'.format(label))\n    y = train_df[label]\n    # train the model using X_dtm & y\n    clf.fit(X_dtm, y)\n    # compute the training accuracy\n    y_pred_X = clf.predict(X_dtm)\n    print('Training accuracy is {}'.format(accuracy_score(y, y_pred_X)))\n    # compute the predicted probabilities for X_test_dtm\n    test_y_prob = clf.predict_proba(test_X_dtm)[:,1]\n    submission_binary2[label] = test_y_prob","aa028488":"submission_binary1.to_csv('submission_binary_lr.csv',index=False)\nsubmission_binary2.to_csv('submission_binary_mnb.csv',index=False)","aeaa529a":"**Accuracy**\n* LR : *0.96279*\n* MNB : *0.95931*"}}