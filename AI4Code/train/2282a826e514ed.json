{"cell_type":{"ce31246c":"code","bcec2f95":"code","db91c14b":"code","35211bde":"code","38c2542a":"code","5ffd81c5":"code","88aaaae1":"code","e59eb83b":"code","0a1e9b6a":"code","d6743cdd":"code","ec889b4b":"code","cd6750b3":"code","82b2ac7c":"code","84022d93":"code","4dc7f677":"code","aca4ec69":"code","24d69583":"code","44a3cdc8":"code","b7ef7810":"code","7599e4fc":"code","bd3644d1":"code","92f7cef6":"code","7abbd380":"code","2a1cabe8":"code","72e6836d":"code","ba0b51d0":"code","fe13a0df":"code","2fecd6f8":"code","8123e576":"code","04574cc4":"code","2a4d2b0f":"code","0aa7f073":"code","7de10f8e":"code","58ffe29c":"code","23b0fda5":"code","a62db405":"code","7a7eb2fc":"code","d9d6291f":"code","5a4310b3":"code","ee357026":"code","a1a1801b":"code","ffd6e6e1":"code","e4705bf7":"code","5ade4cca":"code","6e36b09d":"code","3b1a745c":"code","d0714c89":"code","e8286d87":"code","b6509ca9":"code","16cd73d4":"code","3bbd265c":"code","90859a72":"code","357c8a41":"code","dc7fd22e":"code","173c1a19":"code","dbfdef89":"code","0a038529":"code","8dd8bc1b":"code","73b2a809":"code","3e3c54f9":"code","6216441a":"code","bc982250":"code","22bd412b":"code","1480fa6f":"code","0dd4bcdb":"code","8b99f758":"code","ec7cd1d6":"code","b5e9c3a0":"code","8ddc349a":"code","00bd6238":"code","c716d60b":"code","830dcb52":"code","c0de91da":"code","0dc644c6":"markdown","b6e5c819":"markdown","c9a1337c":"markdown","d18a650d":"markdown","1add35fc":"markdown","f795e61a":"markdown","7a8fe7cc":"markdown","68df8bd9":"markdown","c95771cb":"markdown","2299bfb3":"markdown","28c91c29":"markdown"},"source":{"ce31246c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcec2f95":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')","db91c14b":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","35211bde":"train.shape,test.shape","38c2542a":"train.head()","5ffd81c5":"train.info()","88aaaae1":"#ratio of null values\ntrain.isnull().sum()\/train.shape[0] *100","e59eb83b":"#ratio of null values\ntest.isnull().sum()\/test.shape[0] *100","0a1e9b6a":"#categorical features\ncategorical = train.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Train Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= train.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Train Set:\",numerical.shape[1])","d6743cdd":"#categorical features\ncategorical = test.select_dtypes(include =[np.object])\nprint(\"Categorical Features in Test Set:\",categorical.shape[1])\n\n#numerical features\nnumerical= test.select_dtypes(include =[np.float64,np.int64])\nprint(\"Numerical Features in Test Set:\",numerical.shape[1])","ec889b4b":"train.isnull().sum()","cd6750b3":"test.isnull().sum()","82b2ac7c":"plt.figure(figsize=(8,5))\nsns.boxplot('Age',data=train)","84022d93":"plt.figure(figsize=(8,5))\nsns.boxplot('Age',data=test)","4dc7f677":"sns.distplot(train['Age'])","aca4ec69":"# Imputing with Mean\ntrain['Age']= train['Age'].fillna(train['Age'].mean())\ntest['Age']= test['Age'].fillna(test['Age'].mean())","24d69583":"train['Age'].isnull().sum(),test['Age'].isnull().sum()","44a3cdc8":"train['Cabin'].isnull().sum(),test['Cabin'].isnull().sum()","b7ef7810":"print(train['Cabin'].value_counts())\nprint('******************************************')\nprint(test['Cabin'].value_counts())","7599e4fc":"#Imputing with Mode\ntrain['Cabin']= train['Cabin'].fillna(train['Cabin'].mode()[0])\ntest['Cabin']= test['Cabin'].fillna(test['Cabin'].mode()[0])","bd3644d1":"train['Cabin'].isnull().sum(),test['Cabin'].isnull().sum()","92f7cef6":"train['Embarked'].isnull().sum(),test['Embarked'].isnull().sum()","7abbd380":"print(train['Embarked'].value_counts())","2a1cabe8":"train['Embarked'].unique()","72e6836d":"train['Embarked']= train['Embarked'].fillna(train['Embarked'].mode()[0])","ba0b51d0":"train['Embarked'].isnull().sum(),test['Embarked'].isnull().sum()","fe13a0df":"train.columns","2fecd6f8":"train.head()","8123e576":"# Survived vs Pclass\nsns.catplot(y=\"Pclass\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train)","04574cc4":"# Survived vs Sex\nsns.catplot(y=\"Sex\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train)","2a4d2b0f":"# Survived vs Age\nsns.catplot(y=\"Age\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train, height=20, aspect=.4)","0aa7f073":"# Survived vs SibSp\nsns.catplot(y=\"SibSp\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train)","7de10f8e":"# Survived vs Parch\nsns.catplot(y=\"Parch\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train)","58ffe29c":"# Survived vs Embarked\nsns.catplot(y=\"Embarked\", hue=\"Survived\", kind=\"count\", palette=\"pastel\", edgecolor=\"0.6\",data=train)","23b0fda5":"plt.figure(figsize=(8,5))\nsns.boxplot('Fare',data=train)","a62db405":"from scipy import stats\nimport numpy as np\nz_fare = np.abs(stats.zscore(train['Fare']))\nprint(z_fare)","7a7eb2fc":"threshold = 3\nprint(np.where(z_fare > 3))","d9d6291f":"train.drop([ 27,  88, 118, 258, 299, 311, 341, 377, 380, 438, 527, 557, 679,\n       689, 700, 716, 730, 737, 742, 779], inplace=True)","5a4310b3":"from scipy import stats\nimport numpy as np\nz_age = np.abs(stats.zscore(train['Age']))\nprint(z_age)","ee357026":"threshold = 3\nprint(np.where(z_age > 3))","a1a1801b":"train.drop([94, 114, 483, 618, 660, 726, 831], inplace=True)","ffd6e6e1":"train.drop(['PassengerId', 'Name',], axis=1, inplace=True)","e4705bf7":"test.drop(['PassengerId', 'Name',], axis=1, inplace=True)","5ade4cca":"var_mod = ['Sex','Ticket','Embarked','Cabin']\nle = LabelEncoder()\nfor i in var_mod:\n    train[i] = le.fit_transform(train[i])","6e36b09d":"var_mod = ['Sex','Ticket','Embarked','Cabin']\nle = LabelEncoder()\nfor i in var_mod:\n    test[i] = le.fit_transform(test[i])","3b1a745c":"train.columns","d0714c89":"train = train.select_dtypes(exclude='object')\ntest = test.select_dtypes(exclude='object')","e8286d87":"# Seperate Features and Target\nX= train.drop(columns = ['Survived'], axis=1)\ny= train['Survived']","b6509ca9":"# 20% data as validation set\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.2,random_state=22)","16cd73d4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC","3bbd265c":"algos = [LogisticRegression(), DecisionTreeClassifier(), RandomForestClassifier(), XGBClassifier(),GaussianNB(),SGDClassifier(),SVC()]\n\nnames = ['Logistic Regression', 'Decision Tree Classifier', 'Random Forest Classifier', 'XG Boost Classifier','GaussianNB','SGDClassifier','SVC']\n\nroc_auc_score_list = []","90859a72":"for name in algos:\n    model = name\n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_valid)\n    ROC_AUC_SCORE= roc_auc_score(y_valid,y_pred)\n    roc_auc_score_list.append(ROC_AUC_SCORE)","357c8a41":"evaluation = pd.DataFrame({'Model': names,\n                           'ROC_AUC_SC': roc_auc_score_list})","dc7fd22e":"evaluation","173c1a19":"NUM_OF_BOOST_ROUND = 20000\nEARLY_STOPPING = 500","dbfdef89":"train.columns","0a038529":"import random","8dd8bc1b":"SEED = 2021\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\nos.environ['PYTHONHASHSEED']=str(SEED)","73b2a809":"from catboost import CatBoostClassifier","3e3c54f9":"params = {\n    'eval_metric': 'AUC',\n    'random_seed': SEED,\n    'n_estimators': NUM_OF_BOOST_ROUND,\n}","6216441a":"bst = CatBoostClassifier(**params, early_stopping_rounds=EARLY_STOPPING)\n_ = bst.fit(X_train, y_train, eval_set=(X_valid,y_valid), plot=True, verbose=False)\n","bc982250":"ypred_cat = bst.predict_proba(X_valid)[:,1]","22bd412b":"roc_auc_score(y_valid, ypred_cat)","1480fa6f":"f_importance_df = pd.DataFrame(bst.get_feature_importance(), columns=['importance'], index=X_valid.columns)\nf_importance_df = f_importance_df.sort_values(by='importance', ascending=False)","0dd4bcdb":"plt.figure(figsize=(10,5))\nsns.barplot(x=f_importance_df.importance[:500], y=f_importance_df.index[:500]);","8b99f758":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","ec7cd1d6":"import lightgbm as lgb","b5e9c3a0":"params = {\n    'metric': 'auc',\n    'seed': SEED,\n    'n_estimators': NUM_OF_BOOST_ROUND\n}","8ddc349a":"clf = lgb.LGBMClassifier(**params)","00bd6238":"clf.fit(X_train, y_train, eval_set=(X_valid, y_valid), early_stopping_rounds=100, verbose=-1)","c716d60b":"ypred_lgb = clf.predict_proba(X_valid)[:,1]","830dcb52":"roc_auc_score(y_valid, ypred_lgb)","c0de91da":"final_predictions = bst.predict(test)\nsubmission['Survived'] = final_predictions\nsubmission.to_csv('my_sub.csv', index=False)","0dc644c6":"#### 3.3: Embarked","b6e5c819":"#### 3.2: Cabin","c9a1337c":"#### 3.1: Age","d18a650d":"### Step 2: Data Inspection","1add35fc":"### Step 4: Exploratory Data Analysis","f795e61a":"### Step 1: Importing the Relevant Libraries","7a8fe7cc":"### Step 3: Data Cleaning","68df8bd9":"* We have 20%, 78%and 0.2% of missing values in Age, Cabin and Embarked respectively.","c95771cb":"### Step 4: Outliers","2299bfb3":"* Age, Cabin and Embarked have some missing values in the data","28c91c29":"* We have 891 rows and 12 columns in Train set whereas Test set has 418 rows and 11 columns."}}