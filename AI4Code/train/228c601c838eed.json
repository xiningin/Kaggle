{"cell_type":{"179fbbbd":"code","cd6f7b5b":"code","31b0f9b8":"code","5cbbfca2":"code","86161fc6":"code","d3e44aa1":"code","7b8094d9":"code","82d5ae2b":"code","b46bc940":"code","50d91065":"code","65d97b11":"code","b16c1800":"code","d13f7fa7":"code","a04244cf":"code","d76f531a":"code","42b205f1":"code","6f0b8866":"code","2766964a":"code","5b6ed661":"code","3a31e77e":"code","bafd4ae0":"code","791e7ca6":"code","e4b4226e":"code","844e70d7":"code","57405656":"code","fa989afb":"code","ca68174c":"code","771ba831":"code","780894f3":"code","77b2f18d":"code","57180785":"code","e2d055f4":"code","7be0cb1e":"code","bc31d1fc":"code","69a6919d":"code","1c1a900d":"code","e53e2abd":"code","6e5aa142":"code","97084a50":"code","ba4374b2":"code","0fd1a12c":"code","5d35c17b":"code","a5a9b894":"code","72aef8c6":"code","a848e107":"code","c9e6318c":"code","0b700a07":"code","22348b9f":"code","4fd8fbf9":"code","0eff30a3":"code","f9f79235":"code","94753517":"markdown","54265309":"markdown","6fe51e6d":"markdown"},"source":{"179fbbbd":"#check this out as well: https:\/\/www.kaggle.com\/leandrovrabelo\/climate-change-forecast-sarima-model\n","cd6f7b5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31b0f9b8":"#climate_data = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv')\n#climate_data.info()","5cbbfca2":"city_temperature = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByMajorCity.csv')\ncity_temperature.head()","86161fc6":"city_temperature.info()","d3e44aa1":"city_temperature.Country.unique()","7b8094d9":"COUNTRY = 'China'\ncountry_set = city_temperature[city_temperature.Country== COUNTRY]\ncountry_set","82d5ae2b":"country_set.info()","b46bc940":"country_set.dropna()","50d91065":"country_set # Set to China","65d97b11":"TIME = '2013-08-01'\ncountry_set_time = country_set[country_set.dt == TIME]\ncountry_set_time","b16c1800":"country_set_time.info()","d13f7fa7":"#city_temperature['Latitude']= city_temperature.Latitude.str.replace('N', '').str.replace('S', '')\n# for north hemisphere, just remove the N and convert to float\ncountry_set_time['Latitude']= country_set_time.Latitude.str.replace('N', '')\ncountry_set_time['Latitude']=country_set_time['Latitude'].astype(float)\n","a04244cf":"country_set_time","d76f531a":"country_set_time.info()","42b205f1":"#city_temperature['Longitude']= city_temperature.Latitude.str.replace('E', '').str.replace('W', '')\n#city_temperature['Longitude'].astype(float)\ncountry_set_time['Longitude']= country_set_time.Longitude.str.replace('E', '')\ncountry_set_time['Longitude']= country_set_time['Longitude'].astype(float)","6f0b8866":"country_set_time.info()","2766964a":"country_set_time # China all major cities in 2013 summer at time of 2013-08-01 ","5b6ed661":"# ghg-emissions = pd.read_csv('..\/input\/ghg-emissions-by-country-and-economic-sector\/historical_emissions.csv')\n# ghg-emissions","3a31e77e":"# Charlie's example how to convert from location name to cordinates using Google Map API: \n# https:\/\/colab.research.google.com\/drive\/1dsd4Nl2BA2RGB52yAnIkzecv4KS0TzRP#scrollTo=Vi0FPuBFCYKz\n# Needed if no cordinates are provided but only names","bafd4ae0":"# Folium\nimport folium\nfrom folium import plugins\n\nChina = folium.Map([39.38, 116.53], zoom_start=5) # Cordinates of Beijing, China, tiles='Stamen Terrain'\nChina","791e7ca6":"country_set_time_lat_lng = country_set_time[['Latitude', 'Longitude']]\ncountry_set_time_lat_lng = country_set_time_lat_lng.values\ncountry_set_time_lat_lng","e4b4226e":"# See folium supported plugins: https:\/\/python-visualization.github.io\/folium\/plugins.html\n#China.add_child(plugins.HeatMap(country_set_time_lat_lng)) \nChina.add_child(plugins.MarkerCluster(country_set_time_lat_lng, popup=True))\nChina # Temperature data collection from these major cities in China","844e70d7":"#Let us look at the world temperature data locations\n#converting latitude and longitude to standard format for plotting (+ for North and East, - for South and West)\ncity_temperature['Lat'] = city_temperature['Latitude'].apply(lambda x: float(x.replace('N','')) if 'N' in x else float(x.replace('S','')) * -1)\ncity_temperature['Lon'] = city_temperature['Longitude'].apply(lambda x: float(x.replace('E','')) if 'E' in x else float(x.replace('W','')) * -1)","57405656":"TIME = '2013-08-01'\nworld_city_time = city_temperature[city_temperature.dt == TIME]\nworld_city_time","fa989afb":"world_city_time_lat_lng = world_city_time[['Lat', 'Lon']]\nworld_city_time_lat_lng = world_city_time_lat_lng.values\nworld_city_time_lat_lng","ca68174c":"#marking on folium: https:\/\/stackoverflow.com\/questions\/52484438\/temperature-numbers-in-map-marker-in-folium\nChina.add_child(plugins.MarkerCluster(world_city_time_lat_lng, popup=True)) #starts from China, it is a world map, popup=Ture, False\nChina # Temperature data collection from these major cities in China","771ba831":"#china_map =pd.read_json('https:\/\/raw.githubusercontent.com\/longwosion\/geojson-map-china\/master\/china.json')#\n","780894f3":"# Using Altair\n!pip install vega_datasets\nimport altair as alt\nfrom vega_datasets import data","77b2f18d":"city_temperature['City'].value_counts()","57180785":"#us_set.dropna()","e2d055f4":"world_city_time # time set to 2013-08-01","7be0cb1e":"import pandas as pd\nimport altair as alt\nimport geopandas as gpd","bc31d1fc":"#ca_map = gpd.read_file('https:\/\/raw.githubusercontent.com\/codeforamerica\/click_that_hood\/master\/public\/data\/california-counties.geojson')\n#us_map = gpd.read_file('')","69a6919d":"# Example: https:\/\/colab.research.google.com\/github\/altair-viz\/altair-tutorial\/blob\/master\/notebooks\/09-Geographic-plots.ipynb","1c1a900d":"#using world map from vega_datasets as background for chart\n# Thanks Bryan for sharing the code\nsource = alt.topo_feature(data.world_110m.url, 'countries')  \n\n#creating background, lightgray,lightblue\nbackground = alt.Chart(source).mark_geoshape(\n    fill = 'lightblue',\n    stroke = 'black'\n).properties(\n     width = 1200,\n     height = 500\n).project('equirectangular')  #available projections are 'equirectangular', 'mercator', 'orthographic', 'gnomonic'\n\nbackground","e53e2abd":"world_city_time.info()","6e5aa142":"world_city_time.rename(columns ={'dt': 'Date'}) # don't know why can't rename the column\nworld_city_time.head()","97084a50":"points = alt.Chart(world_city_time).mark_point().encode(\n    longitude='Lon:Q',\n    latitude='Lat:Q',\n    size=alt.value(20),\n   # color=alt.value('AverageTemperature'),\n    tooltip=('City','Country', 'dt','AverageTemperature')\n)\n\n# alt.Color('AverageTemperature', type='quantitative'), How to add it?\n\nbackground + points # see where temperature data is collected to monitor climate change\n# No data collected from Siberia where it is getting warmer ","ba4374b2":"# add interactive line chart on temperature trend. alt.line\n# https:\/\/altair-viz.github.io\/gallery\/multiline_highlight.html","0fd1a12c":"# Charlie's example to add time series: https:\/\/python-visualization.github.io\/folium\/quickstart.html","5d35c17b":"city = 'Wuhan'\ncity_time_series = city_temperature[city_temperature.City == city]\ncity_time_series2 = city_temperature[city_temperature.City == city]\ncity_time_series2  \n# dropping null value columns to avoid errors \ncity_time_series2.dropna() \n  ","a5a9b894":"# Add year column and convert to int\ncity_time_series2[\"year\"] = city_time_series2[\"dt\"].str[0:4].astype(int)","72aef8c6":"city_time_series2","a848e107":"city_time_series2.info()\n","c9e6318c":"#covert time string to value\n#city_time_series['dt'] = pd.to_datetime(city_time_series['dt'])","0b700a07":"source = city_time_series2\nsource","22348b9f":"# Line chart to show the yearly average temperature trend in a city: Wuhan or Chongqing, a very hot city in China\nalt.Chart(source).mark_line().encode(\n    x='year:Q',\n    # y='average(AverageTemperature):Q',\n    y=alt.Y('average(AverageTemperature):Q', scale=alt.Scale(domain=[15, 20]), title = 'Yearly Average Temperature'),\n    color='City:N',\n    strokeDash='City'\n).properties(\n     width = 1000,\n     height = 500\n)","4fd8fbf9":"chart = alt.Chart(source).mark_point().encode(\n    x=alt.X('year:Q',scale=alt.Scale(domain=[1840, 2020]), title = 'Year'),\n    #y='average(AverageTemperature):Q',\n    #y=alt.Y('average(AverageTemperature):Q', scale=alt.Scale(domain=[15, 20]), title = 'Temperature Trend in Deg C'),\n    y=alt.Y('average(AverageTemperature):Q', scale=alt.Scale(zero=False), title = 'Temperature Trend in Deg C'),\n    \n    color='City:N',\n    strokeDash='City'\n).properties(\n     width = 800,\n     height = 500\n)\nchart","0eff30a3":"# How to print out coef, and rSquared from the linear transformation\n# https:\/\/stackoverflow.com\/questions\/60237871\/altair-access-rsquared-value-in-a-regression\n# alt.Chart customization\n    \nline = chart.transform_regression('year','AverageTemperature').mark_line()\n\nparams = alt.Chart(source).transform_regression(\n    'year', 'AverageTemperature', params=True\n).mark_text(align='left').encode(\n    x=alt.value(20),  # pixels from left\n    y=alt.value(20),  # pixels from top\n    #text='rSquared:N', \n    text= 'coef:N', # Looks like this includes the coef and R2\n    opacity=alt.value(0.8),\n    color=alt.value('black'),\n)\n\nchart + line + params","f9f79235":"# create interactive chart: geo + time series","94753517":"#world_city_time.dropna()","54265309":"# > **CO2 Geo Distribution**\n**Yanmin Tao","6fe51e6d":"**Temperature data collection locations around the world**"}}