{"cell_type":{"03370879":"code","9d096d5f":"code","b90b6302":"code","24b8c303":"code","9e8cefea":"code","fc921749":"code","fc0b3169":"code","67925df7":"code","edb34d79":"code","23b2bfe8":"code","aa517de1":"code","44e89616":"code","dc38662e":"code","ac631605":"code","1436eae7":"code","f46ad06d":"code","d43c2df0":"code","019caaf6":"code","ac08cf87":"code","e0c57b53":"code","b2b489e3":"code","ecbe0d18":"code","357d5227":"code","c635d744":"code","84f74366":"code","749d8cf1":"code","c5ada40d":"code","ec4299d8":"code","8543001e":"code","5e97ac0a":"code","fac835b6":"code","8e1d2c79":"code","a73e5297":"code","e270a169":"code","6624ec79":"code","c07b860b":"code","bd148c02":"code","6115b451":"code","3254158e":"code","88496f1a":"code","24e57f11":"code","ae0daddf":"code","e6a4f499":"code","84e44830":"code","46e5d916":"code","3052d1a6":"code","a3308c61":"code","18deef4b":"code","f5a2335f":"code","b8ae39db":"code","9836e665":"code","7101a911":"code","a21c42d0":"code","13c848ca":"code","6f452c37":"code","5e4bfb08":"code","417f338c":"code","039c21dc":"code","6273f79f":"code","fb9a988d":"code","16e35ed4":"code","f03ce01c":"code","ff0b2d2e":"code","e3d851aa":"code","3b9a5efa":"code","aeb32265":"code","483dbefb":"code","dbe7aa96":"code","9c8093a3":"code","62c7ef86":"code","50145c35":"code","0775e75d":"code","c50c3c82":"code","87ee4ced":"code","52d528f2":"code","8c4cd319":"code","4d9508c5":"code","d1fce3b3":"code","a51ae94e":"code","e678e1b4":"code","cca854ca":"code","19e8b75e":"code","e5bd28ba":"code","de26e75c":"code","7989f9f4":"code","6511987e":"markdown","9c9f4828":"markdown","61afe076":"markdown","0a407b12":"markdown","09906365":"markdown","9aa9814d":"markdown","0489037e":"markdown","780f6555":"markdown","2e976dca":"markdown","ba1aaab3":"markdown","c403b75b":"markdown","98eeca9c":"markdown","1ac176e2":"markdown","56947417":"markdown","0b688bd5":"markdown","17441b68":"markdown","e4475e81":"markdown","90a7d169":"markdown","dbf5ced6":"markdown","cc166307":"markdown","e6982e06":"markdown","203343bb":"markdown","83a218d6":"markdown","ba61fdec":"markdown","37affac5":"markdown","2de98487":"markdown","8189a5bb":"markdown","f28bd821":"markdown","b5f5afbc":"markdown","fdf9d73a":"markdown","65136058":"markdown","7d60fc3d":"markdown","cac07afe":"markdown","c6fc9772":"markdown","46c12983":"markdown","06dbee4f":"markdown","0ca35e84":"markdown","7c1697b4":"markdown","88ab762d":"markdown","c7bd8f0c":"markdown","a49b9fcd":"markdown","45758dcc":"markdown","a3e34511":"markdown"},"source":{"03370879":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d096d5f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df =pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","b90b6302":"train_df.columns","24b8c303":"train_df.head()","9e8cefea":"train_df.describe()","fc921749":"train_df.info()","fc0b3169":"def ba_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} \/n {}\".format(variable,varValue))","67925df7":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor ka in category1:\n    ba_plot(ka)","edb34d79":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \/n\".format(train_df[c].value_counts))","23b2bfe8":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","aa517de1":"numericVar = [\"Age\", \"Fare\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","44e89616":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n","dc38662e":"# Age vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","ac631605":"# SipSb vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","1436eae7":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\", ascending=False)","f46ad06d":"# Embarked vs Survived\ntrain_df[[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by=\"Survived\", ascending=False)\n","d43c2df0":"# Pclass vs Fare\ntrain_df[[\"Pclass\", \"Fare\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Fare\", ascending=False)\n","019caaf6":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","ac08cf87":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","e0c57b53":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","b2b489e3":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis=0).reset_index(drop=False)","ecbe0d18":"train_df.head()","357d5227":"train_df.columns[train_df.isnull().any()]","c635d744":"train_df.isnull().sum()","84f74366":"train_df[train_df[\"Embarked\"].isnull()]","749d8cf1":"train_df.boxplot(\"Fare\", by=\"Embarked\")\nplt.show()","c5ada40d":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","ec4299d8":"train_df[train_df[\"Fare\"].isnull()]","8543001e":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","5e97ac0a":"train_df[train_df[\"Fare\"].isnull()]","fac835b6":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","8e1d2c79":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data= train_df, kind = \"bar\", size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","a73e5297":"g= sns.factorplot(x = \"Parch\", y= \"Survived\", data= train_df, kind=\"bar\", size=7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e270a169":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\", kind=\"bar\", data=train_df, size=7)\ng.set_ylabels(\"Survival Probability\")\nplt.show()","6624ec79":"g = sns.FacetGrid(train_df, col=\"Survived\",size=5)\ng.map(sns.distplot, \"Age\", bins=25)\nplt.show()","c07b860b":"g = sns.FacetGrid(train_df, col=\"Survived\", row=\"Pclass\", size=3)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","bd148c02":"g = sns.FacetGrid(train_df, row=\"Embarked\", size=3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","6115b451":"g = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size=3)\ng.map(sns.barplot,\"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","3254158e":"train_df[train_df[\"Age\"].isnull()]","88496f1a":"sns.factorplot(x = \"Sex\", y = \"Age\", kind=\"box\", data=train_df)\nplt.show()","24e57f11":"sns.factorplot(x = \"Sex\", y = \"Age\", hue=\"Pclass\", kind=\"box\", data=train_df)\nplt.show()","ae0daddf":"sns.factorplot(x = \"Parch\", y = \"Age\",  kind=\"box\", data=train_df)\nsns.factorplot(x = \"SibSp\", y = \"Age\",  kind=\"box\", data=train_df)\nplt.show()","e6a4f499":"#train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","84e44830":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","46e5d916":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","3052d1a6":"train_df[train_df[\"Age\"].isnull()]","a3308c61":"train_df[\"Name\"].head(10)","18deef4b":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\n","f5a2335f":"train_df[\"Title\"].head(19)","b8ae39db":"sns.countplot(x=\"Title\",data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","9836e665":"train_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i== \"Master\"else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i==\"Mr\" else 3  for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(10)","7101a911":"sns.countplot(x= \"Title\",data=train_df)\nplt.show()","a21c42d0":"g = sns.factorplot(x=\"Title\", y=\"Survived\", data = train_df,kind =\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()\n","13c848ca":"train_df.drop(labels =[\"Name\"], axis=1, inplace=True)","6f452c37":"train_df.head(10)","5e4bfb08":"train_df =pd.get_dummies(train_df,columns=[\"Title\"])","417f338c":"train_df.head(10)","039c21dc":"train_df[\"Fsize\"] = (train_df[\"SibSp\"] + train_df[\"Parch\"] + 1)","6273f79f":"train_df.head(10)","fb9a988d":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df, kind=\"bar\",size=6)\ng.set_ylabels(\"Survived\")\nplt.show()","16e35ed4":"train_df[\"family_size\"] = [1 if i==5 else 0 for i in train_df[\"Fsize\"]]","f03ce01c":"train_df.head(10)","ff0b2d2e":"sns.countplot(\"family_size\", data=train_df)\nplt.show()","e3d851aa":"g = sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\", size=7)\ng.set_ylabels(\"Survived\")\nplt.show()","3b9a5efa":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head(10)","aeb32265":"sns.countplot(x=\"Embarked\",data = train_df)\nplt.show()","483dbefb":"train_df= pd.get_dummies(train_df, columns = [\"Embarked\"])\ntrain_df.head()","dbe7aa96":"train_df[\"Ticket\"].head()","9c8093a3":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","62c7ef86":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","50145c35":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","0775e75d":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head(7)\n","c50c3c82":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head(7)\n","87ee4ced":"train_df.drop([\"PassengerId\",\"Cabin\"], axis=1, inplace=True)\n","52d528f2":"train_df.columns","8c4cd319":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","4d9508c5":"train_df_len","d1fce3b3":"test = train_df[train_df_len:]\ntest.drop([\"Survived\"], axis = 1, inplace = True)\ntest.head(10)","a51ae94e":"train = train_df[:train_df_len]\nX_train= train.drop([\"Survived\"], axis=1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.33, random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","e678e1b4":"logreg = LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","cca854ca":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","19e8b75e":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv=StratifiedKFold(n_splits=10), scoring=\"accuracy\", n_jobs=-1, verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","e5bd28ba":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","de26e75c":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","7989f9f4":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","6511987e":"<a id=\"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","9c9f4828":"<a id=\"10\"><\/a><br>\n## Fill Missing Value","61afe076":"<a id=\"14\"><\/a><br>\n## Parch --- Survived","0a407b12":"<a id=\"11\"><\/a><br>\n# Visualization","09906365":"<a id=\"26\"><\/a><br>\n\n## Pclass","9aa9814d":"<a id=\"9\"><\/a><br>\n##  Find Missing Value","0489037e":"<a id=\"7\"><\/a><br>\n\n# Detect Outliers","780f6555":"<a id=\"22\"><\/a><br>\n## Name --- Title","2e976dca":"<a id=\"33\"><\/a><br>\n## Ensemble Learning ","ba1aaab3":"<a id=\"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","c403b75b":"<a id=\"30\"><\/a><br>\n## Train-Test Split","98eeca9c":"<a id=\"34\"><\/a><br>\n## Prediction And Submission","1ac176e2":"<a id=\"25\"><\/a><br>\n## Tickets","56947417":"<a id=\"32\"><\/a><br>\n## Hyperparameter Tuning -- GridSearch -- Cross Validation","0b688bd5":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SipSb - Survived\n* ParCh - Survived\n* Embarked - Survived\n* Pclass - Fare","17441b68":"<a id=\"17\"><\/a><br>\n## Pclass -- Survived -- Age","e4475e81":"small families are survived.","90a7d169":"* pclass is important feature for model training.","dbf5ced6":"Fare feature seems to have correlation with survived feature (0.26).","cc166307":"<a id=\"4\"><\/a><br>\n## Categorical Variable","e6982e06":"<a id=\"20\"><\/a><br>\n## Fill Missing : Age Feature","203343bb":"<a id=\"15\"><\/a><br>\n## Pclass --- Survived","83a218d6":"<a id=\"29\"><\/a><br>\n# Modelling","ba61fdec":"<a id=\"5\"><\/a><br>\n## Numerical Variable","37affac5":"<a id=\"23\"><\/a><br>\n## Family Size","2de98487":"<a id=\"21\"><\/a><br>\n# Feature Engineering","8189a5bb":"<a id=\"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassengerId","f28bd821":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","b5f5afbc":"<a id=\"2\"><\/a><br>\n# Variable Description\n\n1. PassengerId : unique id number to passenger\n1. Survived : passenger survive(1) or died(0)\n1. Pclass : passenger class\n1. Name : name\n1. Sex : gender of passenger\n1. Age : age of passenger\n1. SibSp : number of siblings\/spouses\n1. Parch : number of parents\/children\n1. Ticket : ticket number\n1. Fare : amount of money spent on ticket\n1. Cabin : cabin category\n1. Embarked : port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","fdf9d73a":"<a id=\"8\"><\/a><br>\n\n#  Missing Value\n   * Find Missing Value\n   * Fill Missing Value","65136058":"<a id=\"31\"><\/a><br>\n## Simple Logistic Regression","7d60fc3d":"<a id=\"24\"><\/a><br>\n## Embarked","cac07afe":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training.","c6fc9772":"# Introduction\n\nThe Titanic\n<font color='purple'>\n\nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Detect Outliers](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp --- Survived](#13)\n    * [Parch --- Survived](#14)\n    * [Pclass --- Survived](#15)\n    * [Age --- Survived](#16)\n    * [Pclass --- Survived --- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing : Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name --- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Tickets](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modelling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- GridSearch -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction And Submission](#34)","46c12983":"<a id=\"1\"><\/a><br>\n# Load and Check Data","06dbee4f":"* Female passengers have much better survival rate than males.\n* males have better survival rate in pclass 3 in C.\n* embarked and sex will be used in training.","0ca35e84":" * float64(2)\n * int64(5)\n * object(5)","7c1697b4":"<a id=\"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","88ab762d":"1st class passengers are older than 2nd, and 2nd is older than 3rd class.","c7bd8f0c":"<a id=\"13\"><\/a><br>\n## SibSp --- Survived","a49b9fcd":"<a id=\"28\"><\/a><br>\n## Drop Passenger ID and Cabin\n","45758dcc":"<a id=\"16\"><\/a><br>\n## Age --- Survived","a3e34511":"<a id=\"27\"><\/a><br>\n## Sex"}}