{"cell_type":{"642ed305":"code","6d830e02":"code","303646f7":"code","01240c7a":"code","eea5c4a4":"code","10b2e963":"code","8f6404d7":"code","37bf77cc":"code","3e0c572b":"code","a6290293":"code","e534bfe8":"code","0202c0b7":"code","98b986ac":"code","136dce1a":"code","d64f8f2e":"code","74ed7e10":"code","6d711335":"code","96bcd171":"code","8c6104fa":"code","43fdb4aa":"code","ca63cb9f":"code","05d76df6":"code","921d2ba1":"code","c4b4f62d":"code","6f6f496c":"code","3172ba44":"code","f0c6dd7a":"code","bdec5ae4":"code","6a1f6428":"code","a22f6056":"code","b1ae3947":"code","71be9002":"code","9ed68c8d":"code","776644d3":"code","e1a533b2":"code","3a2385d8":"code","1b76672c":"code","e02202cf":"code","44c64993":"code","da11736a":"code","8e258a34":"code","2c4b6b7d":"code","fcf3b05f":"code","36f7b4ce":"code","495bc83c":"markdown","a3c13a39":"markdown","21bbe6e1":"markdown","451236dc":"markdown","f90da78d":"markdown","bf514a20":"markdown","6011cb4d":"markdown","4ee75f5e":"markdown","015fcf0e":"markdown","ec87c1c9":"markdown","2a865d3b":"markdown","c54c2e16":"markdown","f821792e":"markdown","eea1c18a":"markdown","e8f1a1fb":"markdown","3ffed147":"markdown","c56d7188":"markdown"},"source":{"642ed305":"import pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","6d830e02":"# 1. Load train & test Dataset \ntrain_data = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\n\n# Profile Report on Dataset \n#pfr = pandas_profiling.ProfileReport(train_data)\n#report.to_file(\"DS_Titanic_AF.html\")\n\nprint('train data: %s, test data %s' %(str(train_data.shape), str(test_data.shape)) )\ntrain_data.head()\nprint('_'*40)","303646f7":"train_data.head()","01240c7a":"#### 1. Unique Values:\n#PasengerID : Yes\n#Name :  No\n#---------------------------------------------------\n# Check If PassengerId is Unique \nif (train_data.PassengerId.nunique() == train_data.shape[0]):\n    print('PassengerId is Unique.') \nelse:\n    print('-[Error]Id is not Unique.')    \n    \nif (len(np.intersect1d(train_data.PassengerId.values, test_data.PassengerId.values))== 0 ):\n    print('train and test datasets are Distinct.')\nelse:\n    print('- [Error] train and test datasets are NOT Distinct.')\n","eea5c4a4":"# Check If PassengerId is Unique \nif (train_data.Name.nunique() == train_data.shape[0]):\n    print('Name is Unique.') \nelse:\n    print('[Error]Id is not Unique.')    \n    \nif (len(np.intersect1d(train_data.Name.values, test_data.Name.values))== 0 ):\n    print('train and test datasets Names are Distinct.')\nelse:\n    print('- [Error] train and test datasets Names are NOT Distinct.')","10b2e963":"#### C. Find Missing Values --> DONE\n# Age                 \n# Cabin            \n# Embarked           \n# Fare            \n#---------------------------------------------------\n\n# [AF] From describe() we come to know that Age contains Some Missing Data. We need to fix this.\n# [AF] We will Check All Variables for Missing values in Columns!\n\n# train_data.apply(lambda x: sum(x.isnull().values), axis = 0) # For columns\n\n# Check for missing data & list them \nnas = pd.concat([train_data.isnull().sum(), test_data.isnull().sum()], axis=1, keys=['Train Dataset', 'Test Dataset']) \nprint('Nan in the data sets')\nprint(nas[nas.sum(axis=1) > 0])\n\n# [Extra] A boolean Condition to Check wheather our Dataset have any Missing Value.\n#train_data.isnull().values.any()\n","8f6404d7":"# Fill Missing Values or Ignore Columns --> DONE\n# Age                 \n# Cabin            \n# Embarked           \n# Fare \n# ---------------- Age ----------------\n\n# Fill NaN\ntrain_data['Age'].fillna(train_data['Age'].mean(),inplace=True)\n # convert from float to int\ntrain_data['Age'] = train_data['Age'].astype(int)\n\n# Fill NaN\ntest_data['Age'].fillna(test_data['Age'].mean(),inplace=True)\n # convert from float to int\ntest_data['Age'] = test_data['Age'].astype(int)","37bf77cc":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=10)","3e0c572b":"# ---------------- Cabin ----------------\n# Drop the This not relevent \ntrain_data.drop(['Cabin','Ticket'], axis=1, inplace=True)\ntest_data.drop(['Cabin','Ticket'], axis=1, inplace=True)\n","a6290293":"# ---------------- Embarked ----------------\nprint(test_data['Embarked'].mode())\nprint(test_data['Embarked'].mode()[0])\n#replacing the missing values in the Embarked feature with S\ntrain_data = train_data.fillna({\"Embarked\": train_data['Embarked'].mode()})\n\n\n# TestData doesn't contain Missing Values for Embarked","e534bfe8":"# ---------------- Fare ----------------\n# Fill NaN\ntrain_data['Fare'].fillna(train_data['Fare'].mean(),inplace=True)\n # convert from float to int\ntrain_data['Fare'] = train_data['Fare'].astype(int)\n\n# Fill NaN\ntest_data['Fare'].fillna(test_data['Fare'].mean(),inplace=True)\n # convert from float to int\ntest_data['Fare'] = test_data['Fare'].astype(int)","0202c0b7":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Fare', bins=10)","98b986ac":"print('_'*40)","136dce1a":"\n# Check for missing data & list them \nnas = pd.concat([train_data.isnull().sum(), test_data.isnull().sum()], axis=1, keys=['Train Dataset', 'Test Dataset']) \nprint('Nan in the data sets')\nprint(nas[nas.sum(axis=1) > 0])","d64f8f2e":"print('train data: %s, test data %s' %(str(train_data.shape), str(test_data.shape)) )\ntrain_data.info()","74ed7e10":"train_data.shape","6d711335":"train_data.describe(include=['number'])","96bcd171":"train_data.describe(include=['object'])","8c6104fa":"fig, axes = plt.subplots(2, 4, figsize=(16, 10))\nsns.countplot('Survived',data=train_data,ax=axes[0,0])\nsns.countplot('Pclass',data=train_data,ax=axes[0,1])\nsns.countplot('Sex',data=train_data,ax=axes[0,2])\nsns.countplot('SibSp',data=train_data,ax=axes[0,3])\nsns.countplot('Parch',data=train_data,ax=axes[1,0])\nsns.countplot('Embarked',data=train_data,ax=axes[1,1])\nsns.distplot(train_data['Fare'], kde=True,ax=axes[1,2])\nsns.distplot(train_data['Age'].dropna(),kde=True,ax=axes[1,3])","43fdb4aa":"import seaborn as sns\n\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = train_data.corr()\nsns.heatmap(corr,\n            mask=np.zeros_like(corr, dtype=np.bool), \n            cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)","ca63cb9f":"train_data.head()","05d76df6":"# 4 Sex:\ndef personType(Gender):\n    if Gender == \"female\":\n        return 1\n    elif Gender ==\"male\":\n        return 0\n    \ntrain_data['Sex'] = train_data['Sex'].apply(personType)\n \n# test_data\ntest_data['Sex'] = test_data['Sex'].apply(personType)\n\n","921d2ba1":"# 5 Age:\ndef ageType(passAge):\n    if passAge < 16:\n        return str('Child')\n    else :\n        return str('adult')\n    \n# train_data['ageType'] = train_data['Age'].apply(ageType)\n\nprint('train dataset: %s, test dataset %s' %(str(train_data.shape), str(test_data.shape)) )","c4b4f62d":"\ntrain_data.head()","6f6f496c":"test_data.head()\n","3172ba44":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.distplot(train_data['Age'],bins=15,kde=False)\nplt.ylabel('Count')\nplt.title('Aget Distribution -AF')","f0c6dd7a":"from matplotlib import style\nstyle.use('ggplot')\nplt.figure(figsize=(12,4))\nsns.boxplot(x='Age', data = train_data)\n","bdec5ae4":"print('train dataset: %s, test dataset %s' %(str(train_data.shape), str(test_data.shape)) )","6a1f6428":"train_data.head()","a22f6056":"test_data.head()","b1ae3947":"train_data = train_data.drop(['Name',  'Fare', 'Embarked'],axis=1)\ntest_data = test_data.drop(['Name', 'Fare', 'Embarked'],axis=1)","71be9002":"\n#X_train = train_dataset.drop(\"Survived\",axis=1).as_matrix()\n#Y_train = train_dataset[\"Survived\"].as_matrix()\n#X_test  = test_dataset.drop(\"PassengerId\",axis=1).copy().as_matrix()\n\n\nX_train = train_data.drop(\"Survived\",axis=1)\nY_train = train_data[\"Survived\"]\n\n\nprint(X_train.shape)\nprint(Y_train.shape)\n\n","9ed68c8d":"X_test = test_data.copy()\n\nX_test.shape\nprint(X_test.head())","776644d3":"X_train.head()","e1a533b2":"X_test.head()","3a2385d8":"Y_train.head()","1b76672c":"# machine learning\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Decision Tree\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","e02202cf":"print(Y_pred)","44c64993":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import roc_auc_score\n\n# Classifier \nmodel = RandomForestRegressor(n_estimators=100, oob_score=True, random_state=42)\n# Fit Data\nmodel.fit(X_train,Y_train)\nprint(\"oob_score : \", model.oob_score_)\ny_oob = model.oob_prediction_\nprint(\"C-stat: \", roc_auc_score(Y_train,y_oob))","da11736a":"model.feature_importances_","8e258a34":"feature_importances = pd.Series(model.feature_importances_,index=X_train.columns)\nfeature_importances.sort_values()\nfeature_importances.plot(kind=\"barh\",figsize=(7,6));","2c4b6b7d":"my_submission  = pd.DataFrame({\n    \"PassengerId\":X_test[\"PassengerId\"],\n    \"Survived\":Y_pred\n})\nmy_submission.to_csv(\"afarane_titanic_kaggle.csv\",index=False)","fcf3b05f":"my_submission.head()","36f7b4ce":"my_submission.tail()","495bc83c":"## C. Data Visualisation ","a3c13a39":"#### F. AlphaNumeric Columns:\n* Ticket\n* Cabin\n","21bbe6e1":"## D. ML Model :","451236dc":"### Model Performance ","f90da78d":"### Final Model","bf514a20":"## E Test Data","6011cb4d":"#### D. Numerical Columns:\n#Pclass\n#SibSp\n#Parch\n#Fare\n#---------------- Age ----------------","4ee75f5e":"#### G. dTypes MissMatch:\n* Age - It should be in int but available in float\n* Fare\n","015fcf0e":"## A. Data Overview :","ec87c1c9":"#### H. Enrich Data:\n1. SibSp & Parch relates to Family members there cab be a group of individuals or Families.\n-  Family = Parch + SibSp + Self\n- Individual = Find Alone Travellers.\n2. Sex : We can find how many Male\/ Female survivors are there.\n3. Age: We can find who are Child \/ Adult\/ Old age travellers\n\n3. Pclass & Fare : Will give us an idea about Financial Status of travellers \n4. Cabin & Ticket : Check if we can find some info from Ticket Numeber\n5. Embarked : From which destination travellers borded in ship\n","2a865d3b":"## B. [AF] Data Analysis - First Observation\n\n####  Unique Values:\n#PasengerID Seems to be Unique but we will need to make sure.\n#Name : Can be Unique\n\n####  Missing Values:\n* Cabin  { Need to Check all Columns}\n\n####  Numerical Columns:\n* Pclass\n* SibSp\n* Parch\n* Fare\n\n####  Cateorical Columns:\n* Sex - Male & Female\n* Embarked\n\n####  AlphaNumeric Columns:\n* Ticket\n* Cabin\n\n####  dTypes MissMatch:\n* Age - It should be in int but available in float\n* Fare\n\n####  target Column:\n* Survived \n\n####  Enrich Data:\n1. SibSp & Parch relates to Family members there cab be a group of individuals or Families.\n-  Family = Parch + SibSp + Self\n- Individual = Find Alone Travellers.\n2. Sex : We can find how many Male\/ Female survivors are there.\n3. Age: We can find who are Child \/ Adult\/ Old age travellers\n3. Pclass & Fare : Will give us an idea about Financial Status of travellers \n4. Cabin & Ticket : Check if we can find some info from Ticket Numeber\n5. Embarked : From which destination travellers borded in ship\n","c54c2e16":"**Conclusion**: There are few outliers. There were old guys above 57 age.","f821792e":"### Univariate Analysis","eea1c18a":"## Feature Engineering","e8f1a1fb":"#### E. Cateorical Columns:\n* Name: \n#Sex - Male & Female\n* Embarked\n\n","3ffed147":"## Bivariate EDA","c56d7188":"## B. Data Cleaning\n"}}