{"cell_type":{"f7051f3f":"code","5123af65":"code","319edb9e":"code","66907472":"code","8419e6f0":"code","6fc63e79":"code","5300f6b7":"code","1fe1a511":"code","bc168cb8":"code","bb8614c3":"code","dbd60daf":"code","c1080ec3":"code","1acc892e":"code","564f01ee":"code","63e62e14":"code","00fad99b":"code","ad535973":"code","0696bad6":"code","e3948641":"code","12112d4a":"code","d078805c":"code","731036d6":"code","128e9ef5":"code","0ac34e19":"code","6d57d7c0":"code","2a8f5c8a":"code","012decdc":"code","5bb7dfa4":"code","d84c27f1":"code","3310c11f":"code","1856cc0c":"code","1fbdc893":"code","723d06b5":"code","07b84408":"markdown","ede12533":"markdown","39d3cf65":"markdown","03012eff":"markdown","93aa1043":"markdown","d741528f":"markdown","96af692b":"markdown","bb79e155":"markdown","365892ae":"markdown","2a848638":"markdown","faf3ae81":"markdown","c24f4f20":"markdown","9cd828b2":"markdown","b7cb86d7":"markdown","f4929888":"markdown","5d0a650a":"markdown"},"source":{"f7051f3f":"from __future__ import division, print_function\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import csr_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import roc_auc_score","5123af65":"import os\nprint(os.listdir(\"..\/input\"))\n\n#\u041f\u0430\u043f\u043a\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0434\u0438\u0441\u043a\u0435\nPATH_TO_DATA = '..\/input'\n#\u041f\u0430\u043f\u043a\u0430 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c \u0434\u0438\u0441\u043a\u0435\n#PATH_TO_TEMP_DATA = 'E:\\\\{}'.format(PATH_TO_DATA)","319edb9e":"train = pd.read_csv(os.path.join(PATH_TO_DATA, 'train_sessions.csv'), index_col='session_id')\ntest = pd.read_csv(os.path.join(PATH_TO_DATA, 'test_sessions.csv'), index_col='session_id')","66907472":"sum_data = pd.concat([train, test])","8419e6f0":"site_cols = ['site%d' % i for i in range(1, 11)]\ntime_cols = ['time%d' % i for i in range(1, 11)]\n\nsum_data[site_cols] = sum_data[site_cols].fillna(0).astype(np.int).astype(np.str)\nsum_data[time_cols] = sum_data[time_cols].apply(pd.to_datetime)","6fc63e79":"sum_data.head(5)","5300f6b7":"def join_str(row):\n    return ' '.join(row)\n\nsite_text_data = sum_data[site_cols].apply(join_str, axis=1)\nprint('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0441\u0441\u0438\u0439: {}'.format(site_text_data.shape[0]))","1fe1a511":"from sklearn import feature_extraction\n\nvectorizer = feature_extraction.text.TfidfVectorizer()\nsum_data_site_sparse = vectorizer.fit_transform(site_text_data)","bc168cb8":"print('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c: {}'.format(sum_data_site_sparse.shape))","bb8614c3":"def calc_session_timespan(row):\n    timestamps = row[time_cols].values\n    session_timespan = timestamps.max() - timestamps.min()\n    \n    return session_timespan.total_seconds()\n\ndef calc_unique_sites(row):\n    sites_vals = row[site_cols].values\n    \n    return len(np.unique([a for a in sites_vals if int(a) > 0]))\n    \ndef calc_day_of_week(row):\n    timestamps = row[time_cols].values    \n    return timestamps.min().weekday()\n\ndef calc_start_hour(row):\n    timestamps = row[time_cols].values    \n    return timestamps.min().hour\n\ndef calc_end_hour(row):\n    timestamps = row[time_cols].values    \n    return timestamps.max().hour\n\ndef calc_day_of_month(row):\n    timestamps = row[time_cols].values    \n    return timestamps.min().day\n\ndef calc_month(row):\n    timestamps = row[time_cols].values    \n    return timestamps.min().month\n\ndef calc_is_weekend(row):\n    day_of_week = row['day_of_week']\n    if day_of_week == 6 or day_of_week == 5:\n        return 1\n    \n    return 0","dbd60daf":"%%time\nsum_data['unique_sites'] = sum_data.apply(calc_unique_sites, axis=1)\nsum_data['session_timespan'] = sum_data.apply(calc_session_timespan, axis=1)\nsum_data['day_of_week'] = sum_data.apply(calc_day_of_week, axis=1)\nsum_data['start_hour'] = sum_data.apply(calc_start_hour, axis=1)","c1080ec3":"%%time\nsum_data['end_hour'] = sum_data.apply(calc_end_hour, axis=1)\nsum_data['month'] = sum_data.apply(calc_month, axis=1)\nsum_data['day_of_month'] = sum_data.apply(calc_day_of_month, axis=1)\nsum_data['is_weekend'] = sum_data.apply(calc_is_weekend, axis=1)","1acc892e":"def print_empty_cell(collection, name):\n    total_row = collection.shape[0]\n    data_count = collection.count().sort_values(ascending=True)\n\n    i = 0\n    str_val = []\n    for item, value in data_count.items():\n        if value < total_row:\n            str_val.append(\"{}:{}\".format(item, total_row - value))\n            i += 1\n\n    if i > 0:\n        print(\"--> invalid features in {}:\".format(name))\n        for s in str_val:\n            print(s)\n    else:\n        print(\"--> success data in {}:\".format(name))\n        \nprint_empty_cell(sum_data, 'sum_data')","564f01ee":"sum_data['day_of_week'] = sum_data['day_of_week'].fillna(round(sum_data['day_of_week'].mean())).astype(np.int)\nsum_data['start_hour'] = sum_data['start_hour'].fillna(round(sum_data['start_hour'].mean())).astype(np.int)\nsum_data['end_hour'] = sum_data['end_hour'].fillna(round(sum_data['end_hour'].mean())).astype(np.int)\nsum_data['month'] = sum_data['month'].fillna(round(sum_data['month'].mean())).astype(np.int)\nsum_data['day_of_month'] = sum_data['day_of_month'].fillna(round(sum_data['day_of_month'].mean())).astype(np.int)\nsum_data['session_timespan'] = sum_data['session_timespan'].fillna(round(sum_data['session_timespan'].mean())).astype(np.int)\nsum_data['start_site'] = sum_data['site1'].astype(np.int)\nsum_data['is_weekend'] = sum_data['is_weekend'].fillna(round(sum_data['is_weekend'].mean())).astype(np.int)","63e62e14":"sum_data.head()","00fad99b":"sum_data = pd.get_dummies(sum_data, columns=['day_of_week', 'start_hour', 'end_hour', 'month', 'day_of_month'])","ad535973":"day_of_week_cols = sum_data.filter(like='day_of_week').columns\nstart_hour_cols = sum_data.filter(like='start_hour').columns\nend_hour_cols = sum_data.filter(like='end_hour').columns\nday_of_month_cols = sum_data.filter(like='day_of_month').columns\nmonth_cols = ['month_1','month_2','month_3','month_4','month_5','month_6',\n              'month_7','month_8','month_9','month_10','month_11','month_12']\nprint(day_of_week_cols)\nprint(start_hour_cols)\nprint(end_hour_cols)\nprint(day_of_month_cols)\nprint(month_cols)\n#sum_data.head()","0696bad6":"additional_cols = np.hstack((['unique_sites', 'start_site', 'session_timespan', 'is_weekend'],\n                             day_of_week_cols,\n                             start_hour_cols,\n                             end_hour_cols,\n                             day_of_month_cols,\n                             month_cols\n                            ))","e3948641":"from sklearn.preprocessing import StandardScaler\n\nstandard_scaler = StandardScaler()\nscaler_sum_data_2 = standard_scaler.fit_transform(sum_data[additional_cols])","12112d4a":"additional_data = csr_matrix(scaler_sum_data_2)\nprint('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 additional_data \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c: {}'.format(additional_data.shape))\nprint('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 sum_data_site_sparse \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c: {}'.format(sum_data_site_sparse.shape))","d078805c":"from scipy.sparse import hstack\nfrom sklearn.preprocessing import StandardScaler\n\nsum_data_2 = hstack((sum_data_site_sparse, additional_data))\nprint('\u041c\u0430\u0442\u0440\u0438\u0446\u0430 sum_data_2 \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c: {}'.format(sum_data_2.shape))","731036d6":"X_train = sum_data_2.tocsc()[:train.shape[0]]\ny_train = train['target']\nX_test = sum_data_2.tocsc()[train.shape[0]:]","128e9ef5":"X_train_tmp, X_test_tmp, y_train_tmp, y_test_tmp = train_test_split(X_train, y_train, test_size=0.3, random_state=17) ","0ac34e19":"%%time\nsgd_logit = SGDClassifier(loss='log', random_state=17, n_jobs=-1)\nsgd_logit.fit(X_train_tmp, y_train_tmp)\n\ny_pred = sgd_logit.predict_proba(X_test_tmp)[:, 1]","6d57d7c0":"roc = roc_auc_score(y_test_tmp, y_pred)\nprint('ROC AUC: {}'.format(round(roc, 3)))","2a8f5c8a":"from sklearn.linear_model import LogisticRegression","012decdc":"%%time\nreg_logit = LogisticRegression(random_state=17, n_jobs=-1)\nreg_logit.fit(X_train_tmp, y_train_tmp)\n\ny_pred = reg_logit.predict_proba(X_test_tmp)[:, 1]","5bb7dfa4":"roc = roc_auc_score(y_test_tmp, y_pred)\nprint('ROC AUC: {}'.format(round(roc, 3)))","d84c27f1":"from sklearn.model_selection import GridSearchCV\nimport matplotlib.pyplot as plt \n\ndef show_param_grid(estimator, param_grid, p_name):\n    optimizer = GridSearchCV(estimator=estimator, param_grid=param_grid, cv=3)\n    optimizer.fit(X_train_tmp, y_train_tmp)\n    \n    cv_results = optimizer.cv_results_\n        \n    plt.plot(param_grid[p_name], cv_results['mean_test_score'])\n    plt.show()\n    \n    return optimizer","3310c11f":"reg_logit.get_params().keys()","1856cc0c":"param_grid = {\n    'C': [1, 10, 100]\n}\n\noptimizer = show_param_grid(reg_logit, param_grid, 'C')","1fbdc893":"print('Best score is {} with C {}'.format(optimizer.best_score_, optimizer.best_estimator_.C))","723d06b5":"def write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)\n\noptimizer.best_estimator_.fit(X_train, y_train)\nfinal_y_pred = optimizer.best_estimator_.predict_proba(X_test)[:, 1]\n\nwrite_to_submission_file(final_y_pred, 'final_y_pred.CSV')","07b84408":"**\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438**","ede12533":"**\u0423 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f**","39d3cf65":"**\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443**","03012eff":"**\u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b**","93aa1043":"**\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0432\u0438\u0434\u0435 \"\u043c\u0435\u0448\u043a\u0430 \u0441\u043b\u043e\u0432\" \u043f\u043e \u0441\u0430\u0439\u0442\u0430\u043c**","d741528f":"**\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435**","96af692b":"**\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435**","bb79e155":"**\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430**<br\/><br\/>\n**session_timespan** - \u0434\u043b\u0438\u043d\u0430 \u0441\u0435\u0441\u0441\u0438\u0438<br\/>\n**unique_sites** - \u0447\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0430\u0439\u0442\u043e\u0432 \u0437\u0430 \u0441\u0435\u0441\u0441\u0438\u044e<br\/>\n**day_of_week** - \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0441\u0442\u0430\u0440\u0442\u0430 \u0441\u0435\u0441\u0441\u0438\u0438<br\/>\n**start_hour** - \u0447\u0430\u0441 \u0441\u0442\u0430\u0440\u0442\u0430 \u0441\u0435\u0441\u0441\u0438\u0438<br\/>","365892ae":"**\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","2a848638":"**\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \"\u043c\u0435\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0432\" \u043f\u043e \u0441\u0430\u0439\u0442\u0430\u043c**<br \/><br \/>\n\u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0434\u0432\u0435 \u0440\u0430\u0437\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b:<br \/>\n**sum_data_site_sparse** - \"\u043c\u0435\u0448\u043e\u043a \u0441\u043b\u043e\u0432\" \u043f\u043e \u0441\u0430\u0439\u0442\u0430\u043c<br \/>\n**additional_data** - \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438<br \/>\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445 \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b","faf3ae81":"**\u041e\u0442\u043c\u0430\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","c24f4f20":"**\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c LogisticRegression**","9cd828b2":"# \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u043c \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c","b7cb86d7":"**\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0441 \u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c SGDClassifier**","f4929888":"**\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","5d0a650a":"**\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438**"}}