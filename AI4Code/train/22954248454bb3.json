{"cell_type":{"8a8f8216":"code","1a25f191":"code","da1f3d83":"code","356ebc65":"code","671071d5":"code","940fa276":"code","6d3da181":"code","a9d94450":"code","2a937903":"code","d823812e":"code","b221c980":"code","1d56f235":"code","2b43a942":"code","8f73b499":"code","bb38de5a":"code","4b8194f2":"code","dc369c43":"code","39068f38":"code","a43b7141":"code","c1134c51":"code","6b02874f":"code","a8fbf7af":"code","8d8ad0a1":"code","eea6011a":"code","075387e7":"code","b5a67bd6":"code","67580b17":"code","6aa7d82d":"code","0e6066b3":"code","aba444ba":"code","5b9dec22":"code","71f7e647":"code","7f7d461e":"code","97ff2d6f":"code","410aef86":"code","e2a994ba":"markdown","784d2d59":"markdown","27a71431":"markdown","716330ef":"markdown","f8e5590b":"markdown","75cf55ad":"markdown","7393c7a5":"markdown","6f4dc77b":"markdown","19123c9b":"markdown","565b9b13":"markdown","d9042578":"markdown","303f6dc3":"markdown","7fbc5129":"markdown","e77bf4f3":"markdown","aded091c":"markdown","c9c065bd":"markdown"},"source":{"8a8f8216":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a25f191":"df = pd.read_csv('\/kaggle\/input\/genes-information\/genes_human_58347_used_in_sciPlex2_brief_info_by_mygene_package.csv')","da1f3d83":"df_sort = df.sort_values(by=['count pubmed'], ascending=False)","356ebc65":"words = list(df_sort['name'].str.lower().unique())","671071d5":"words = words[:1000]","940fa276":"!pip install sentence_transformers","6d3da181":"from sentence_transformers import SentenceTransformer, util\nmodel = SentenceTransformer('dmis-lab\/biobert-base-cased-v1.2')","a9d94450":"embeddings = model.encode(words, convert_to_tensor=True)","2a937903":"#embeddings = model.encode(words, batch_size=1, convert_to_tensor=True)","d823812e":"X = embeddings.cpu()","b221c980":"from sklearn.decomposition import PCA\nreducer = PCA(n_components=2)\nr = reducer.fit_transform(embeddings.cpu())","1d56f235":"import time\nt0 = time.time()\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig = plt.figure(figsize = (25,10));  c = 0\nn_x_subplots = 2\n#plt.suptitle(str_data_inf, fontsize = 20)       \n\nc+=1; fig.add_subplot(1,n_x_subplots,c);\n\nfrom sklearn.decomposition import PCA\nreducer = PCA(n_components=2)\nr = reducer.fit_transform(X)\n\nsns.scatterplot(x=r[:,0],y=r[:,1])\nplt.title(str(reducer))\n\nmask = r[:,1] > 2\nprint( np.array(words)[mask] )\n\nmask = r[:,1] > 2\nprint( np.array(words)[mask] )\n\nc+=1; fig.add_subplot(1,n_x_subplots,c);\n\nimport umap\nreducer = umap.UMAP()# PCA(n_components=2)\nr = reducer.fit_transform(X )\n\nsns.scatterplot(x=r[:,0],y=r[:,1])\nplt.title(str(reducer))\n\n\nplt.show()\n\nprint('%.1f seconds passed'%(-t0 + time.time() ) )\n","2b43a942":"!pip install hdbscan --no-build-isolation --no-binary :all:","8f73b499":"import hdbscan\n\nlabels_hdbscan = hdbscan.HDBSCAN(\nmin_samples=1,\nmin_cluster_size=2,\n).fit_predict(r)","bb38de5a":"clustered = (labels_hdbscan >= 0)\nfrom matplotlib.pyplot import figure\nfigure(figsize=(10, 10), dpi=80)\nplt.scatter(r[~clustered, 0],\n            r[~clustered, 1],\n            c=(0.5, 0.5, 0.5),\n            s=10,\n            alpha=0.5)\nplt.scatter(r[clustered, 0],\n            r[clustered, 1],\n            c=(labels_hdbscan[clustered]),\n            s=20,\n            cmap='Spectral')","4b8194f2":"clustered_list = pd.DataFrame(np.column_stack([words, labels_hdbscan]), \n                               columns=['node', 'cluster'])","dc369c43":"clustered_list['cluster'].value_counts()","39068f38":"cosine_scores = util.pytorch_cos_sim(embeddings, embeddings)","a43b7141":"pairs = []\nfor i in range(len(cosine_scores)-1):\n    for j in range(i+1, len(cosine_scores)):\n        pairs.append({'index': [i, j], 'score': cosine_scores[i][j]})","c1134c51":"comb = []\nfor pair in pairs:\n    i, j = pair['index']\n    if i != j:\n        comb.extend((words[i], words[j], float(cosine_scores[i][j])))","6b02874f":"comb_3 = [tuple(comb[i:i+3]) for i in range(0, len(comb), 3)]","a8fbf7af":"len(comb_3)","8d8ad0a1":"comb_3_filtered = [t for t in comb_3 if 1 > t[2] > 0.9]","eea6011a":"len(comb_3_filtered)","075387e7":"import igraph as ig","b5a67bd6":"g = ig.Graph.TupleList(comb_3_filtered, directed = False, weights=True)","67580b17":"g.vcount() , g.ecount()","6aa7d82d":"nbrs = g.neighbors(\"tumor protein p53\", mode=\"out\")\ng.vs[nbrs][\"name\"]","0e6066b3":"clusters = g.community_multilevel()","aba444ba":"community_list = pd.DataFrame(np.column_stack([list({v['name']: v.index for v in list(g.vs)}), \n                                               clusters.membership]), \n                               columns=['node', 'community'])\n\ncommunity_list.community = community_list.community.astype(int)","5b9dec22":"def betweenness(g):\n    betweenness = g.betweenness() \n    df = pd.DataFrame.from_dict({\n        'node': list({v['name']: v.index for v in list(g.vs)}),\n        'betweenness': list(g.betweenness())\n    })\n    return df.sort_values('betweenness', ascending=False)","71f7e647":"def eigenvector(g):\n    eigevector = g.evcent() \n    df = pd.DataFrame.from_dict({\n        'node': list({v['name']: v.index for v in list(g.vs)}),\n        'eigenvector': list(g.evcent())\n    })\n    return df.sort_values('eigenvector', ascending=False)","7f7d461e":"%%time\n\nfrom functools import reduce\n\ndfs = [community_list, betweenness(g), eigenvector(g)]  \ndf_sum = reduce(lambda left,right: pd.merge(left,right,on='node'), dfs)","97ff2d6f":"df_sum = df_sum.sort_values(by=['eigenvector'], ascending=False)","410aef86":"df_sum.head(10)","e2a994ba":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0441\u0435\u0434\u044f\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0439 \u043d\u0430\u0441 \u0432\u0435\u0440\u0448\u0438\u043d\u044b.","784d2d59":"\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0432 \u0432\u0438\u0434\u0435 \u043f\u0435\u0440\u0435\u0447\u043d\u044f \u0438\u0437 \u043f\u043e\u043f\u0430\u0440\u043d\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0432 \u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430. \u0423\u0431\u0435\u0440\u0451\u043c \u043f\u0435\u0442\u043b\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043e\u0434\u043d\u0438\u043c \u0438 \u0442\u0435\u043c \u0436\u0435 \u0441\u043b\u043e\u0432\u043e\u043c.","27a71431":"\u0411\u0435\u0440\u0451\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u0433\u0435\u043d\u0430 \u0447\u0438\u0441\u043b\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0432 PubMed \u0438 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e:","716330ef":"EDA \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b \u0438 \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0449\u0451 \u0434\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430.","f8e5590b":"\u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u043e\u0435 \u043d\u0430\u043c \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u0430 \u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u0435 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0440\u0451\u0431\u0440\u0430\u043c\u0438 \u0432 \u0433\u0440\u0430\u0444\u0435.","75cf55ad":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444.","7393c7a5":"\u0413\u043e\u0442\u043e\u0432\u043e. \u041f\u0440\u0438\u044f\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438!","6f4dc77b":"\u0418\u043d\u043e\u0433\u0434\u0430 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u0430\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0445\u043e\u0434 GPU. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0442\u0447\u0438.","19123c9b":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0441\u0442\u0438 (Louvain).","565b9b13":"\u0414\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0431\u0435\u0440\u0451\u043c \u0442\u043e\u043f\u043e\u0432\u044b\u0435 5000 \u0433\u0435\u043d\u043e\u0432:","d9042578":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u043d\u0430\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044e.","303f6dc3":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438 \u0441\u043b\u043e\u0432 \u0438\u0437 BioBERT c \u043f\u043e\u043c\u043e\u0449\u044c\u044e sentence_transformers:","7fbc5129":"## \u041e \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0435\n\n\u0411\u043b\u043e\u043a\u043d\u043e\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 [\u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e](https:\/\/www.kaggle.com\/visualcomments\/biology-on-graphs) \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0430. \u0422\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0440\u0430\u043d\u044c\u0448\u0435, \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u044c\u044e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u043d\u0430\u043c \u0441\u043f\u0438\u0441\u043a\u0443 \u0441\u043b\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0440\u0445 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0433\u0440\u0430\u0444\u0430. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0440\u0430\u0444\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.\n\n### \u0427\u0442\u043e \u043d\u043e\u0432\u043e\u0433\u043e:\n\n\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043d\u0430\u0448 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 [\u0434\u0430\u0442\u0430\u0441\u0435\u0442](https:\/\/www.kaggle.com\/visualcomments\/biology-on-graphs-w2v) \u043f\u043e\u0442\u0435\u0440\u043f\u0435\u043b [\u043a\u0440\u0443\u0448\u0435\u043d\u0438\u0435](https:\/\/www.kaggle.com\/general\/278769), \u043c\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438\u0441\u044c \u043d\u0430\u0434 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438. \u0422\u0430\u043a \u043e\u0442 word2vec-\u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u044b \u043f\u0435\u0440\u0435\u0448\u043b\u0438 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u044b, \u0442\u043e \u0432\u044b\u0431\u0440\u0430\u043b\u0438 [BioBERT](https:\/\/github.com\/dmis-lab\/biobert) \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u0445 \u043d\u0430\u0441 \u0441\u043b\u043e\u0432 (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0433\u0435\u043d\u043e\u0432).\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 [sentence-transformers](https:\/\/www.sbert.net\/) \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u0434 word2vec, \u0442\u0430\u043a \u043a\u0430\u043a \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0441\u043b\u043e\u0432\u043e\u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u044f\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0438\u0441\u043a\u0430.\n\n\u0412\u043c\u0435\u0441\u0442\u043e NetworkX \u0432 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f python-igraph, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043d\u0430 C++ \u0432 Python-\u043e\u0431\u0451\u0440\u0442\u043a\u0435 \u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0433\u0440\u0430\u0444\u0430.\n\n### \u041d\u0430\u0434 \u0431\u043b\u043e\u043a\u043d\u043e\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438: \n\n[\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440](https:\/\/www.kaggle.com\/alexandervc)\n\n[\u0410\u043d\u0442\u043e\u043d](https:\/\/www.kaggle.com\/visualcomments)\n\n","e77bf4f3":"\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u043c \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0435 \u0441\u043b\u043e\u0432.","aded091c":"\u041c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c [\u0434\u0430\u0442\u0430\u0441\u0435\u0442](https:\/\/www.kaggle.com\/alexandervc\/genes-information) \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0433\u0435\u043d\u0430\u0445, \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0435\u0440\u0448\u0438\u043d \u0433\u0440\u0430\u0444\u0430.","c9c065bd":"\u0418 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044f\u0445 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0442 \u043f\u043e\u0441\u0440\u0435\u0434\u043d\u0438\u043a\u0438 (betweenness) \u0438 \u0438\u043d\u0444\u043b\u044e\u0435\u043d\u0441\u0435\u0440\u044b (eigenvector)."}}