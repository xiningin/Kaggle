{"cell_type":{"34e809c6":"code","1bea190e":"code","2e13bebb":"code","0ccff97c":"code","c38cb2de":"code","9d66f941":"code","b31f9f2a":"code","1db49eaa":"markdown"},"source":{"34e809c6":"print('loading libs...')\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nimport gc\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport xgboost as xgb\nfrom tqdm import tqdm\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nfrom sklearn.metrics import roc_auc_score\nimport time\nprint('done')","1bea190e":"%%time\nprint('loading data...')\ntrain = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/train_df.pkl')\ntest = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/test_df.pkl')\nremove_features = pd.read_pickle('..\/input\/ieee-fe-with-some-eda\/remove_features.pkl')\nsample_submission = pd.read_csv('..\/input\/ieee-fraud-detection\/sample_submission.csv')\nprint('done')\n","2e13bebb":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","0ccff97c":"%%time\nprint('dropping target...')\ny_train = train['isFraud'].copy()\nX_train = train.drop('isFraud', axis=1)\nX_test = test.copy()\ntrain_cols = list(train.columns)\ndel train, test\ngc.collect()\nprint('selecting features...')\nremove_features = list(remove_features['features_to_remove'].values)\nfeatures_columns = [col for col in train_cols if col not in remove_features]\nX_train = X_train[features_columns]\nX_test=X_test[features_columns]\nprint('Done')","c38cb2de":"X_train = reduce_mem_usage(X_train)\nX_test = reduce_mem_usage(X_test)","9d66f941":"params = {\n          'objective':'binary',\n          'boosting_type':'gbdt',\n          'metric':'auc',\n          'n_jobs':-1,\n          'max_depth':-1,\n          'tree_learner':'serial',\n          'min_data_in_leaf':30,\n          'n_estimators':1800,\n          'max_bin':255,\n          'verbose':-1,\n          'seed': 1229,\n          'learning_rate': 0.01,\n          'early_stopping_rounds':200,\n          'colsample_bytree': 0.5,          \n          'num_leaves': 256, \n          'reg_alpha': 0.35, \n         }","b31f9f2a":"%%time\nNFOLDS = 6\nfolds = KFold(n_splits=NFOLDS)\ncolumns = X_train.columns\nsplits = folds.split(X_train, y_train)\ny_preds = np.zeros(X_test.shape[0])\ny_oof = np.zeros(X_train.shape[0])\nscore = 0\n  \nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    X_tr, X_val = X_train[columns].iloc[train_index], X_train[columns].iloc[valid_index]\n    y_tr, y_val = y_train.iloc[train_index], y_train.iloc[valid_index]    \n    dtrain = lgb.Dataset(X_tr, label=y_tr)\n    dvalid = lgb.Dataset(X_val, label=y_val)\n    clf = lgb.train(params, dtrain,  valid_sets = [dtrain, dvalid], verbose_eval=500)        \n    y_pred_valid = clf.predict(X_val)\n    y_oof[valid_index] = y_pred_valid\n    print(f\"Fold {fold_n + 1} | AUC: {roc_auc_score(y_val, y_pred_valid)}\")   \n    score += roc_auc_score(y_val, y_pred_valid) \/ NFOLDS\n    del X_tr, X_val, y_tr, y_val\n    gc.collect() \n    y_preds += clf.predict(X_test) \/ NFOLDS       \nprint(f\"\\nMean AUC = {score}\")\nprint(f\"Out of folds AUC = {roc_auc_score(y_train, y_oof)}\")\n\nprint('submission...')\nsample_submission['isFraud'] = y_preds\nsample_submission.to_csv(\"submission_lgb.csv\", index=False)","1db49eaa":" From notebooks of\n https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s  \n https:\/\/www.kaggle.com\/davidcairuz\/feature-engineering-lightgbm\nhttps:\/\/www.kaggle.com\/kyakovlev\/ieee-fe-with-some-eda"}}