{"cell_type":{"04016906":"code","6447c971":"code","da383c25":"code","382c4459":"code","c7bc73ae":"code","abebb53e":"code","a0109d0d":"code","22a1fe0f":"code","959b97c2":"code","85ba5f17":"code","b397cb5a":"code","24913067":"code","f781adeb":"code","2c2ec140":"code","359ad1a1":"code","d06a0220":"code","254b3cc8":"code","f8a0aab2":"code","4c520f91":"code","a6cb6483":"code","69606219":"code","72267730":"code","0d96e069":"code","5b61a7ee":"code","751248dc":"code","f389b0d1":"markdown","11ee9e37":"markdown","0fc58ad0":"markdown","6b58d198":"markdown","51d51cc5":"markdown","20eb4235":"markdown","49b2b770":"markdown","f7642fe0":"markdown","f1eb9685":"markdown","1966516c":"markdown","edb38532":"markdown","33e5ada0":"markdown"},"source":{"04016906":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfilePaths = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        print(path)\n        filePaths.append(path)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6447c971":"import warnings\nwarnings.filterwarnings('ignore')\ndef viewInfo(table, name=\"Table\"):\n    col = table.index.tolist()\n    row = table.columns.tolist()\n    colLenght = len(col)\n    rowLenght = len(row)\n    print('[------{0}------]\\n[*] Row : {1} | Col {2}'.format(name, rowLenght, colLenght))\n    print(row, '\\n')","da383c25":"import pandas as pd\ncustomer = pd.read_csv(filePaths[0])\nuselog_months = pd.read_csv(filePaths[2])\nviewInfo(customer, \"Customer\")\nviewInfo(uselog_months, \"Uselog Months\")","382c4459":"year_months = list(uselog_months[\"\u5e74\u6708\"].unique())\nprint(\"[+] Userlog months :\", len(uselog_months[\"\u5e74\u6708\"].unique()), \"\\n\", year_months, \"\\n\")\nuselog = pd.DataFrame()\nfor i in range(1, len(year_months)):\n    tmp = uselog_months.loc[uselog_months[\"\u5e74\u6708\"]==year_months[i]]\n    tmp.rename(columns={\"count\":\"count_0\"}, inplace=True)\n    tmp_before = uselog_months.loc[uselog_months[\"\u5e74\u6708\"]==year_months[i-1]]\n    del tmp_before[\"\u5e74\u6708\"]\n    tmp_before.rename(columns={\"count\":\"count_1\"}, inplace=True)\n    tmp = pd.merge(tmp, tmp_before, on=\"customer_id\", how=\"left\")\n    print(i, tmp.shape)\n    uselog = pd.concat([uselog, tmp], ignore_index=True)\nprint(\"\\n\")\nviewInfo(uselog, \"Use Log\")","c7bc73ae":"from dateutil.relativedelta import relativedelta\nexit_customer = pd.DataFrame()\nprint(\"[0] All:\", customer.shape)\nexit_customer = customer.loc[customer[\"is_deleted\"]==1]\nprint(\"[1] is_deleted:\", exit_customer.shape)\nexit_customer[\"exit_date\"] = None\nprint(\"[2] Add col exit_date:\", exit_customer.shape)\nprint(\"[3] to_datetime:\", exit_customer[\"end_date\"].iloc[0], \"-->\", end=\" \")\nexit_customer[\"end_date\"] = pd.to_datetime(exit_customer[\"end_date\"])\nprint(exit_customer[\"end_date\"].iloc[0])\nprint(\"[4] Exit date = End_Date - 1 months\\n###\", exit_customer[\"exit_date\"].iloc[0], '-->', end=' ')\nfor i in range(len(exit_customer)):\n    exit_customer[\"exit_date\"].iloc[i] = exit_customer[\"end_date\"].iloc[i] - relativedelta(months=1)\nprint(exit_customer[\"exit_date\"].iloc[0])\nexit_customer[\"\u5e74\u6708\"] = exit_customer[\"exit_date\"].dt.strftime(\"%Y%m\")\nuselog[\"\u5e74\u6708\"] = uselog[\"\u5e74\u6708\"].astype(str)\nviewInfo(uselog, \"Uselog\")\nviewInfo(exit_customer, \"Exit cus\")\nexit_uselog = pd.merge(uselog, exit_customer, on=[\"customer_id\", \"\u5e74\u6708\"], how=\"left\")\nprint(\"[Merge]\")\nviewInfo(exit_uselog, \"Exit Uselog\")\nexit_uselog.head()","abebb53e":"print(\"[0] Exit_uselog :\", exit_uselog.shape)\nexit_uselog = exit_uselog.dropna(subset=[\"name\"])\nprint(\"[Drop] \", exit_uselog.shape)\nprint(len(exit_uselog[\"customer_id\"].unique()))\nexit_uselog.head()","a0109d0d":"conti_customer = pd.DataFrame()\nconti_customer = customer.loc[customer[\"is_deleted\"]==0]\nconti_uselog = pd.merge(uselog, conti_customer, on=[\"customer_id\"], how=\"left\")\nconti_uselog = conti_uselog.dropna(subset=[\"name\"])\nprint(\"[Info] \", conti_uselog.shape)\nconti_uselog.head()","22a1fe0f":"# X\u00e1o ch\u1ed9n c\u00e1c h\u00e0ng, reset index\nconti_uselog = conti_uselog.sample(frac=1).reset_index(drop=True)\nprint(conti_uselog.head(2))\n# drop duplicates trong c\u1ed9t 'customer_id'\nprint(\"[Conti] \", conti_uselog.shape)\nconti_uselog = conti_uselog.drop_duplicates(subset=\"customer_id\")\nprint(\"[Drop] \", conti_uselog.shape)\nconti_uselog.head()","959b97c2":"print(\"[+] Conti :\", conti_uselog.shape)\nprint(\"[+] Exit :\", exit_uselog.shape)\npredict_data = pd.concat([conti_uselog, exit_uselog],ignore_index=True)\nprint(\"[*] Predict :\", predict_data.shape)\npredict_data.head()","85ba5f17":"# Th\u00eam c\u1ed9t period\nprint(\"[+] Predict :\", predict_data.shape)\npredict_data[\"period\"] = 0\n# Th\u00eam c\u1ed9t now_date\npredict_data[\"now_date\"] = pd.to_datetime(predict_data[\"\u5e74\u6708\"], format=\"%Y%m\")\npredict_data[\"start_date\"] = pd.to_datetime(predict_data[\"start_date\"])\nfor i in range(len(predict_data)):\n    delta = relativedelta(predict_data[\"now_date\"][i], predict_data[\"start_date\"][i])\n    predict_data[\"period\"][i] = int(delta.years*12 + delta.months)\nprint(\"[+] Add two rows 'now_date' and 'period'\")\nprint(\"[+] Predict :\", predict_data.shape)\npredict_data.head()","b397cb5a":"predict_data.isna().sum()","24913067":"predict_data = predict_data.dropna(subset=[\"count_1\"])\npredict_data.isna().sum()","f781adeb":"target_col = [\"campaign_name\", \"class_name\", \"gender\", \"count_1\", \"routine_flg\", \"period\", \"is_deleted\"]\npredict_data_1 = predict_data[target_col]\npredict_data_1.head()","2c2ec140":"predict_data_2 = pd.get_dummies(predict_data_1)\npredict_data_2.head()\n# one hot row","359ad1a1":"_model_demo = predict_data_2\nviewInfo(_model_demo, \"Data\")","d06a0220":"# Training model","254b3cc8":"from sklearn.tree import DecisionTreeClassifier\nimport sklearn.model_selection\n\nexit = _model_demo.loc[_model_demo[\"is_deleted\"]==1]\nconti = _model_demo.loc[_model_demo[\"is_deleted\"]==0].sample(len(exit))\nX = pd.DataFrame()\ny = pd.DataFrame()\nX = pd.concat([exit, conti], ignore_index=True)\ny = X[\"is_deleted\"]\ndel X[\"is_deleted\"]\n# Chia data\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X,y)\n\n# Kh\u1edfi t\u1ea1o model\nmodel = DecisionTreeClassifier(random_state=0)\n# Train model\nmodel.fit(X_train, y_train)\ny_test_pred = model.predict(X_test)\nprint(\"[+] Predict output :\", str(len(y_test_pred)))","f8a0aab2":"results_test = pd.DataFrame({\"y_test\":y_test ,\"y_pred\":y_test_pred })\nresults_test.head()","4c520f91":"correct = len(results_test.loc[results_test[\"y_test\"]==results_test[\"y_pred\"]])\nprint(\"[+] Correct :\", str(correct))\ndata_count = len(results_test)\nprint(\"[+] All :\", str(data_count))\nscore_test = correct \/ data_count\nprint(\"[Score] \", str(score_test))","a6cb6483":"print(model.score(X_test, y_test))\nprint(model.score(X_train, y_train))","69606219":"X = pd.concat([exit, conti], ignore_index=True)\ny = X[\"is_deleted\"]\ndel X[\"is_deleted\"]\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X,y)\n\nmodel = DecisionTreeClassifier(random_state=0, max_depth=5)\nmodel.fit(X_train, y_train)\nprint(\"[+] Test :\", str(model.score(X_test, y_test)))\nprint(\"[+] Train :\", str(model.score(X_train, y_train)))","72267730":"importance = pd.DataFrame({\"feature_names\":X.columns, \"coefficient\":model.feature_importances_})\nimportance","0d96e069":"count_1 = 3\nrouting_flg = 1\nperiod = 10\ncampaign_name = \"\u5165\u4f1a\u8cbb\u7121\u6599\"\nclass_name = \"\u30aa\u30fc\u30eb\u30bf\u30a4\u30e0\"\ngender = \"M\"","5b61a7ee":"if campaign_name == \"\u5165\u4f1a\u8cbb\u534a\u984d\":\n    campaign_name_list = [1, 0, 0]\nelif campaign_name == \"\u5165\u4f1a\u8cbb\u7121\u6599\":\n    campaign_name_list = [0, 1, 0]\nelif campaign_name == \"\u901a\u5e38\":\n    campaign_name_list = [0, 0, 1]\nif class_name == \"\u30aa\u30fc\u30eb\u30bf\u30a4\u30e0\":\n    class_name_list = [1, 0, 0]\nelif campaign_name == \"\u30c7\u30a4\u30bf\u30a4\u30e0\":\n    campaign_name_list = [0, 1, 0]\nelif campaign_name == \"\u30ca\u30a4\u30c8\":\n    campaign_name_list = [0, 0, 1]\nif gender == \"F\":\n    gender_list = [1, 0]\nelif gender == \"M\":\n    gender_list = [0, 1]\ninput_data = [count_1, routing_flg, period]\ninput_data.extend(campaign_name_list)\ninput_data.extend(class_name_list)\ninput_data.extend(gender_list)","751248dc":"print(\"[+] D\u1ef1 \u0111o\u00e1n :\", str(model.predict([input_data])))\n# Fully connect\nprint(\"[+] Fully connect :\", str(model.predict_proba([input_data])))","f389b0d1":"-- Drop NaN 'name'","11ee9e37":"# Th\u00f4ng tin kh\u00e1ch h\u00e0ng hi\u1ec7n t\u1ea1i","0fc58ad0":"# Th\u00f4ng tin c\u1ee7a customer \u0111\u00e3 x\u00f3a\n-- Merge uselog v\u1edbi b\u1ea3ng customer\n-- Ch\u1ec9nh s\u1eeda format ng\u00e0y th\u00e1ng cho ph\u00f9 h\u1ee3p","6b58d198":"# Th\u00f4ng tin c\u1ee7a to\u00e0n b\u1ed9 kh\u00e1ch h\u00e0ng\n- Kh\u00e1ch h\u00e0ng hi\u1ec7n t\u1ea1i\n- Kh\u00e1c h\u00e0ng \u0111\u00e3 delete","51d51cc5":"# one-hot row","20eb4235":"# Th\u00f4ng tin c\u1ee7a kh\u00e1ch h\u00e0ng hi\u1ec7n t\u1ea1i","49b2b770":"# D\u1ef1 \u0111o\u00e1n cho 1 data ng\u1eabu nhi\u00ean","f7642fe0":"# \u0110\u00e1nh gi\u00e1 model","f1eb9685":"# Ch\u1ec9nh s\u1eeda model\n- random_state = 0\n- max-depth = 5","1966516c":"# C\u00e1c bi\u1ebfn \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn m\u00f4 h\u00ecnh","edb38532":"# T\u1ea1o b\u1ea3ng uselog ch\u1ee9a th\u00f4ng tin s\u1ed1 l\u1ea7n \u0111\u0103ng nh\u1eadp c\u1ee7a customer 2 th\u00e1ng tr\u01b0\u1edbc","33e5ada0":"# Lo\u1ea1i b\u1ecf ph\u1ea7n t\u1eed NaN"}}