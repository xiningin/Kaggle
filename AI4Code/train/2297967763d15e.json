{"cell_type":{"ba8c0d76":"code","f36c710c":"code","f3352a52":"code","2fb090e7":"code","b16a478f":"code","e0ba3769":"markdown","62c9b1c6":"markdown","0bad5b0a":"markdown","816914c7":"markdown","665a6ce7":"markdown","ceafefcb":"markdown","2cddea25":"markdown","6d37d97c":"markdown"},"source":{"ba8c0d76":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","f36c710c":"dataset = {'research': [15000, 90000, 250000, 175000, 88000, 210000],\n           'marketing': [5000, 25000, 31000, 44000, 19700, 21111],\n           'city': ['Texas', 'Delaware', 'Florida', 'Texas', 'Delaware','Florida'],\n           'profit': [9999, 5555, 3333, 4444, 1111, 2222]}\n                \ndf = pd.DataFrame(dataset)","f3352a52":"columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [2])], remainder='passthrough')","2fb090e7":"df = np.array(columnTransformer.fit_transform(df), dtype = np.str)","b16a478f":"print(df)","e0ba3769":"Step 1 - Import the library - ColumnTransformer","62c9b1c6":"Step 3 - Create an object of ColumnTransformer class","0bad5b0a":"> **Parameters in ColumnTransformer()**\n\n* 1) transformer\n* name: this is just a name that we pass to the transformer\n* transformer: here we need to pass an estimator that supports fit and transform. Since we want to encode the data, we will be passing OneHotEncoder here.\n* columns: the index of columns that contain the categorical values that we want to convert\n\n* 2) remainder\n* This parameter basically tells the transformer what to do with the remaining columns other than the ones we have mentioned above for converting. The values can be \"drop\" or \"passthrough\". The default value is drop which means only the transformed columns will be returned by the transformer and the remaining columns will be dropped. But if we want the transformer to pass them - we have to use the value \"passthrough\"","816914c7":"Step 2 - Setup the Data","665a6ce7":"# How to convert Categorical variables into Numerical Variables using ColumnTransformer?\n\nWhen we talk about categorical variables, we are talking about non numerical values like Strings or Text. For example, a city name, a store name - for that matter anything that is not a number is a categorical variable. For us humans, it is very easy to interpret and understand text - but for machines it is not the case.\n\nIn Machine Learning, all the algorithms in the sklearn library cannot handle categorical variables so before we give the data to the algorithm for training and predicting - we have to convert it to numbers.\n\nSo this recipe is a short example on how to convert categorical variables into numerical variables. Let's get started.","ceafefcb":"Step 4 - Convert the categorical data with one line of code","2cddea25":"As you can see, we have named the transformer as \"encoder\"\nFor the estimator, we are passing an object of OneHotEncoder\nAnd for columns, we can see from our dataset that the 3rd column is the city column that we want to transform. Since the index start at 0, we are passing value 2 here\nLastly for remainder we are passing \"passthrough\" as we want the transformer to return the remaining columns","6d37d97c":"Step 5 - Lets look at our dataset now"}}