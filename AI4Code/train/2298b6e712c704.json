{"cell_type":{"8e06c7b0":"code","4482f00b":"code","e06f6c0d":"code","ac333142":"code","829cba33":"code","de0e38da":"code","0d4bacf2":"code","78eddc09":"code","3fb7565a":"code","776120b2":"code","07e09c9e":"code","6425f3a1":"code","7114786d":"code","df5e81d5":"code","de27aeb7":"code","a8fb0d1c":"code","67dd53bd":"code","0ff2d7b0":"code","0a74c2b0":"code","d1ec3996":"code","27003b50":"code","96ce098b":"code","18a02cc1":"code","76435d99":"code","3f3e2615":"code","d88a4d8d":"code","bd5cff63":"code","294ca661":"code","abafa2af":"code","416aa984":"code","94bc33e0":"code","c475cfdd":"code","4861af37":"code","58fb267f":"code","7b669108":"code","11169a74":"code","e5ebbea2":"code","2aab6d0d":"code","54d86b33":"code","632b3f6e":"code","92488318":"code","36ed5761":"code","f4bd1d0a":"code","0acd95f4":"code","891324c8":"code","822e708d":"code","9607e9bc":"code","c3f89430":"code","1df093f6":"code","258dbf4b":"code","e54eeee0":"markdown","bef80a02":"markdown","dc74a1f2":"markdown","aa33c21a":"markdown","d4f14442":"markdown","8dc94293":"markdown","549ea463":"markdown","f780032d":"markdown"},"source":{"8e06c7b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler\nsns.set(style='darkgrid')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4482f00b":"train_data = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat\/test.csv\")\nsubm_data = pd.read_csv(\"\/kaggle\/input\/cat-in-the-dat\/sample_submission.csv\")\ntrain_data.head()","e06f6c0d":"train_data.shape","ac333142":"#To CHeck \ntrain_data.isnull().sum().sum()","829cba33":"test_data.isnull().sum().sum()","de0e38da":"#Id column is not necessary \ntrain_data=train_data.drop(['id'], axis = 1)\ntest_data=test_data.drop(['id'], axis = 1)","0d4bacf2":"All_features=train_data.columns.tolist()\nNumerical_features=['bin_0','bin_1','bin_2','ord_0','day','month','target']\ncategorical_features=list(set(All_features) - set(Numerical_features))\nNumerical_features.remove('target')\nprint(categorical_features)\nprint(Numerical_features)","78eddc09":"# to get description of numerical data in dataset\ntrain_data.describe()","3fb7565a":"fig, ax = plt.subplots(2, 3, figsize=(15, 10))\nfor variable, subplot in zip(Numerical_features, ax.flatten()):\n    sns.boxplot(train_data[variable], ax=subplot, color='black')\n    for label in subplot.get_xticklabels():\n        label.set_rotation(0)","776120b2":"for cname in categorical_features:\n    print(cname+\" : \"+str(len(train_data[cname].unique())))","07e09c9e":"train_data.head()","6425f3a1":"binary = {'T': 1,'F': 0}\ntrain_data[\"bin_3\"]= [binary[item] for item in train_data[\"bin_3\"]]\ntest_data[\"bin_3\"]= [binary[item] for item in test_data[\"bin_3\"]]\nbinary = {'Y': 1,'N': 0}\ntrain_data[\"bin_4\"]= [binary[item] for item in train_data[\"bin_4\"]]\ntest_data[\"bin_4\"]= [binary[item] for item in test_data[\"bin_4\"]]\ntrain_data.head()","7114786d":"nominal_col = ['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4']\nordinal_col = ['ord_0', 'ord_1', 'ord_2', 'ord_3']","df5e81d5":"# keeping the ord_5 features aside as it has higher amount of cardinality\n# Importing categorical options of pandas\nfrom pandas.api.types import CategoricalDtype \n\n# seting the orders of our ordinal features\nord_1 = CategoricalDtype(categories=['Novice', 'Contributor','Expert', \n                                     'Master', 'Grandmaster'], ordered=True)\nord_2 = CategoricalDtype(categories=['Freezing', 'Cold', 'Warm', 'Hot',\n                                     'Boiling Hot', 'Lava Hot'], ordered=True)\nord_3 = CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e', 'f', 'g',\n                                     'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o'], ordered=True)\nord_4 = CategoricalDtype(categories=['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\n                                     'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\n                                     'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], ordered=True)","de27aeb7":"# Transforming ordinal Features\ntrain_data.ord_1 = train_data.ord_1.astype(ord_1)\ntrain_data.ord_2 = train_data.ord_2.astype(ord_2)\ntrain_data.ord_3 = train_data.ord_3.astype(ord_3)\ntrain_data.ord_4 = train_data.ord_4.astype(ord_4)\ntrain_data.ord_1 = train_data.ord_1.cat.codes\ntrain_data.ord_2 = train_data.ord_2.cat.codes\ntrain_data.ord_3 = train_data.ord_3.cat.codes\ntrain_data.ord_4 = train_data.ord_4.cat.codes\ntrain_data.head()\n\ntest_data.ord_1 = test_data.ord_1.astype(ord_1)\ntest_data.ord_2 = test_data.ord_2.astype(ord_2)\ntest_data.ord_3 = test_data.ord_3.astype(ord_3)\ntest_data.ord_4 = test_data.ord_4.astype(ord_4)\ntest_data.ord_1 = test_data.ord_1.cat.codes\ntest_data.ord_2 = test_data.ord_2.cat.codes\ntest_data.ord_3 = test_data.ord_3.cat.codes\ntest_data.ord_4 = test_data.ord_4.cat.codes","a8fb0d1c":"print(str(train_data.day.unique())+\" \"+str(train_data.month.unique()))","67dd53bd":"train_data['ord_5_ot'] = 'Others'\ntrain_data.loc[train_data['ord_5'].isin(train_data['ord_5'].value_counts()[:25].sort_index().index), 'ord_5_ot'] = train_data['ord_5']\n\ntest_data['ord_5_ot'] = 'Others'\ntest_data.loc[test_data['ord_5'].isin(test_data['ord_5'].value_counts()[:25].sort_index().index), 'ord_5_ot'] = test_data['ord_5']","0ff2d7b0":"train_data.head()","0a74c2b0":"plt.figure(figsize=(20,5))\nsns.countplot(x='ord_5_ot', data=train_data,\n                   order=list(train_data['ord_5_ot'].value_counts().sort_index().index) ,\n                   color='black') ","d1ec3996":"ord_5_count = train_data['ord_5'].value_counts().reset_index()['ord_5'].values\nplt.figure(figsize=(20,5))\ng = sns.distplot(ord_5_count, bins= 50,color='black')\ng.set_title(\"Frequency\", fontsize=22)\ng.set_xlabel(\"Total\", fontsize=18)\ng.set_ylabel(\"Density\", fontsize=18)\nplt.show()","27003b50":"### Credit of this features to: \n## https:\/\/www.kaggle.com\/gogo827jz\/catboost-baseline-with-feature-importance\nimport string\n# Then encode 'ord_5' using ACSII values\n# Add up the indices of two letters in string.ascii_letters\ntrain_data['ord_5_new'] = train_data['ord_5_ot'].apply(lambda x:sum([(string.ascii_letters.find(letter)+1) for letter in x]))\ntest_data['ord_5_new'] = test_data['ord_5_ot'].apply(lambda x:sum([(string.ascii_letters.find(letter)+1) for letter in x]))\n#train_data['ord_5_new']= train_data['ord_5_new'].astype('float64')\n                                                    ","96ce098b":"train_data=train_data.drop(['ord_5_ot','ord_5'], axis = 1) \ntest_data=test_data.drop(['ord_5_ot','ord_5'], axis = 1) \ntrain_data.head()","18a02cc1":"nominal_col = ['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4']\nfig, ax = plt.subplots(2, 3, figsize=(20, 10))\nfor variable, subplot in zip(nominal_col, ax.flatten()):\n    sns.countplot(train_data[variable], ax=subplot, color='black')\n    for label in subplot.get_xticklabels():\n        label.set_rotation(0)","76435d99":"high_card_feats = ['nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9']\nfor x in high_card_feats:\n    print(x+\"-\"+str(len(train_data[x].unique())))","3f3e2615":"for col in high_card_feats:\n    train_data[f'hash_{col}'] = train_data[col].apply( lambda x: hash(str(x)) % 5000 )\n    test_data[f'hash_{col}'] = test_data[col].apply( lambda x: hash(str(x)) % 5000 )","d88a4d8d":"for col in high_card_feats:\n    enc_nom_1 = (train_data.groupby(col).size()) \/ len(train_data)\n    train_data[f'freq_{col}'] = train_data[col].apply(lambda x : enc_nom_1[x])\n    #df_test[f'enc_{col}'] = df_test[col].apply(lambda x : enc_nom_1[x])","bd5cff63":"from sklearn.preprocessing import LabelEncoder\n\n# Label Encoding\nfor f in ['nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9']:\n    if train_data[f].dtype=='object' or test_data[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(train_data[f].values) + list(test_data[f].values))\n        train_data[f'le_{f}'] = lbl.transform(list(train_data[f].values))\n        test_data[f'le_{f}'] = lbl.transform(list(test_data[f].values))   ","294ca661":"plt.figure(figsize=(25,5))\nsns.countplot(x='le_nom_5', data=train_data,\n                   order=list(train_data['le_nom_5'].value_counts().sort_index().index) ,\n                   color='black') ","abafa2af":"train_data.columns","416aa984":"test_data.columns","94bc33e0":"train_data.drop([ 'hash_nom_5','hash_nom_6', 'hash_nom_7', 'hash_nom_8', 'hash_nom_9','freq_nom_5','freq_nom_6', 'freq_nom_7', 'freq_nom_8', 'freq_nom_9',\n                'nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9'], axis=1, inplace=True)\n\ntest_data.drop([ 'hash_nom_5','hash_nom_6', 'hash_nom_7', 'hash_nom_8', 'hash_nom_9','nom_5', 'nom_6', 'nom_7', 'nom_8', 'nom_9'], axis=1, inplace=True)","c475cfdd":"train_data.head()","4861af37":"# credits to eda-feat-engineering-encode-conquer kernal\ntest_data['target'] = 'test'\ndf = pd.concat([train_data, test_data], axis=0, sort=False )","58fb267f":"print(f'Shape before dummy transformation: {df.shape}')\ndf = pd.get_dummies(df, columns=['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4'],\\\n                          prefix=['nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4'], drop_first=True)\nprint(f'Shape after dummy transformation: {df.shape}')","7b669108":"train_data, test_data = df[df['target'] != 'test'], df[df['target'] == 'test'].drop('target', axis=1)\ndel df","11169a74":"train_data.head()","e5ebbea2":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report","2aab6d0d":"from sklearn.model_selection import train_test_split\nx = train_data.drop([\"target\"], axis=1)\ny = train_data[\"target\"]\ny = y.astype(bool)\ntest_X = test_data.drop([],axis=1)\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)","54d86b33":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 15)             # running RFE with 10 variables as output\nrfe = rfe.fit(x_train,y_train)\nprint(rfe.support_)           # Printing the boolean results\nprint(rfe.ranking_)           # Printing the ranking","632b3f6e":"col = x_train.columns[rfe.support_]\nprint(col)\nUpdatedTrain_X=x_train[col]\nprint(UpdatedTrain_X.shape)\nUpdatedTest_X=x_test[col]\nprint(UpdatedTest_X.shape)","92488318":"import statsmodels.api as sm\ndf_train_rfe = sm.add_constant(UpdatedTrain_X)\nlog_mod_rfe = sm.GLM(y_train,df_train_rfe,family = sm.families.Binomial())\nmod_res_rfe = log_mod_rfe.fit()\nlog_mod_rfe.fit().summary()","36ed5761":"#Predicting the Test Data\nUpdatedTestCoef_X = sm.add_constant(UpdatedTest_X[col])\npredictions = mod_res_rfe.predict(UpdatedTestCoef_X)\nY_pred= predictions.map(lambda x: 1 if x > 0.5 else 0)\nY_pred.head()","f4bd1d0a":"from sklearn import metrics\nprint(metrics.confusion_matrix(y_test, Y_pred), \"\\n\")\nprint(\"accuracy\", metrics.accuracy_score(y_test, Y_pred))\nprint(\"precision\", metrics.precision_score(y_test,Y_pred))\nprint(\"recall\", metrics.recall_score(y_test,Y_pred))\nconfusion=confusion_matrix(y_test,Y_pred)    \nTP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives\n# Let's see the sensitivity of our logistic regression model\nprint(\"Sensitivity\",TP \/ float(TP+FN))\n# positive predictive value \nprint (\"Positive Predection Rate\",TP \/ float(TP+FP))\n# Negative predictive value\nprint (\"Negative Predection rate\",TN \/ float(TN+ FN))\n# Calculate false postive rate - predicting churn when customer does not have churned\nprint(\"False positive Predection Rate\",FP\/ float(TN+FP))","0acd95f4":"k_range = [1,3,5,7,9,10,15]\nscores=[]\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\n    knn.fit(UpdatedTrain_X, y_train)\n    y_pred = knn.predict(UpdatedTest_X)\n    scores.append(metrics.accuracy_score(y_test, y_pred))","891324c8":"plt.plot(k_range, scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Testing Accuracy')","822e708d":"knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean')\nknn.fit(UpdatedTrain_X, y_train)\ny_pred = knn.predict(UpdatedTest_X)\nprint(classification_report(y_test, y_pred))","9607e9bc":"from sklearn import metrics\nprint(\"accuracy\", metrics.accuracy_score(y_test, y_pred))\nprint(\"precision\", metrics.precision_score(y_test,y_pred))\nprint(\"recall\", metrics.recall_score(y_test,y_pred))\nconfusion=confusion_matrix(y_test,y_pred)    \nTP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives\n# Let's see the sensitivity of our logistic regression model\nprint(\"Sensitivity\",TP \/ float(TP+FN))\n# positive predictive value \nprint (\"Positive Predection Rate\",TP \/ float(TP+FP))\n# Negative predictive value\nprint (\"Negative Predection rate\",TN \/ float(TN+ FN))\n# Calculate false postive rate - predicting churn when customer does not have churned\nprint(\"False positive Predection Rate\",FP\/ float(TN+FP))","c3f89430":"sub_data=test_data[col]\ny_pred = knn.predict(sub_data)","1df093f6":"y_pred","258dbf4b":"subm_data['target'] = y_pred\nsubm_data.to_csv('submission.csv')","e54eeee0":"Label ENcoding","bef80a02":"<hr>\n<h3>Working on Numerical Data<\/h3>","dc74a1f2":"we can divide the categorical variables available into 3 sub categories\n1. Binary Categorical variables - Converting them into 1's and 0's\n2. Ordinal Variables - Converting them into numerical data starting from 1 to N\n3. Nominal Variables - One hot encoding\n4. day and month ","aa33c21a":"<h3> We have successfully converted all the ordinal data into numerical data<\/h3>","d4f14442":"All the features are now handled","8dc94293":"No Need of outlier Treatment","549ea463":"**KNN classification alogrithm**","f780032d":"<hr>\n<h3>Working on Categorical Data<\/h3>"}}