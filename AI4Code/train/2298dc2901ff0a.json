{"cell_type":{"592e2d24":"code","0c7a7376":"code","fea80d99":"code","00583c0e":"code","70e95956":"code","6d003e42":"code","240a397c":"code","6f2ad3fe":"code","f073472d":"code","0d19e62b":"code","5b936c7a":"code","8d16473e":"code","26ce3bce":"code","0c39722d":"code","95a9ce63":"code","3435b9e3":"code","0e2b711c":"code","e75feccd":"code","a3f3f620":"markdown","13252987":"markdown","049e93a7":"markdown","4f873c1b":"markdown"},"source":{"592e2d24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        path = os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c7a7376":"# data read\ndf = pd.read_csv(path)\npd.set_option('display.max_columns', None)","fea80d99":"df.head()","00583c0e":"# data collection + prep\ndf = df[[\"datetime\", \"Portland\"]]\ndf[\"datetime\"] = pd.to_datetime(df[\"datetime\"]) # change datatype\ndf = df.dropna() # instead of drop -> linear interpolation\ndf","70e95956":"df.dtypes","6d003e42":"df.count()","240a397c":"df.set_index('datetime').plot()","6f2ad3fe":"# df[0:5000].set_index('datetime').plot()","f073472d":"#df[0:500].set_index('datetime').plot()","0d19e62b":"import matplotlib.pyplot as plt\nfrom sklearn import metrics","5b936c7a":"# Evaluation set\neval_df = df[\"datetime\"]>=\"2016-11-30\"#indexes of dates needed for eval","8d16473e":"def rmse(actual, pred):\n    diffs = (pred - actual).values\n    return np.sqrt((diffs**2).mean())","26ce3bce":"#Baseline\ndf[\"Portland_pred\"] = df[\"Portland\"].shift(1)\nrmse = rmse(df.loc[eval_df,\"Portland\"], df.loc[eval_df,\"Portland_pred\"])\n\ndf = df.drop(columns=\"Portland_pred\")\nprint(rmse)","0c39722d":"# Histogram\ndf.Portland.hist(figsize = (20,5))","95a9ce63":"def movingAverage(data,ma_window):\n    return data.rolling(ma_window).mean()","3435b9e3":"df = df.set_index('datetime')\n\npred = df.copy()\ntrain = df.index <\"2016-11-30\"\ntest = df.index >=\"2016-11-30\"\nma_window = 3\npred[\"Portland\"] = movingAverage(df.Portland, ma_window)\n","0e2b711c":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(df[train], label='Train')\nplt.plot(df[test], label='Test')\nplt.plot(pred['Portland'], label='moving average forecast')\nplt.legend(loc='best')\nplt.title('Simple Moving Average Method')\nplt.show()","e75feccd":"metrics.mean_squared_error(df.loc[test,\"Portland\"], pred.loc[test, \"Portland\"], squared=False)","a3f3f620":"Baseline: 1.0981\u00b0K\n\nEval-range: >=\"2016-11-30\"","13252987":"## Data Exploration","049e93a7":"# Timeseries Forecast","4f873c1b":"### Moving Average"}}