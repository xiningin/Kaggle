{"cell_type":{"91f7f856":"code","97528b05":"code","0474eae3":"code","f5cab503":"code","4e0fc9ad":"code","7befff3c":"code","1412d7f3":"code","e0ef44db":"code","1daa060e":"code","7196b462":"markdown","932fecee":"markdown","4f4d508e":"markdown","cc7c14eb":"markdown","e8fac54a":"markdown","b16bed31":"markdown","059e860b":"markdown","777c816c":"markdown","2e55165a":"markdown","c0ca6571":"markdown","493462b5":"markdown","cc4ca57f":"markdown","4830cf55":"markdown","3d670079":"markdown","bb45a8e5":"markdown","11bb2e9f":"markdown","c748a14d":"markdown","4e29b027":"markdown"},"source":{"91f7f856":"x = [1,2,3,4]\nout = []\nfor item in x:\n    out.append(item**2)\nprint(out)","97528b05":"# vs.\nx = [1,2,3,4]\nout = [item**2 for item in x]\nprint(out)","0474eae3":"# lambda arguments: expression\ndouble = lambda x: x * 2\nprint(double(5))","f5cab503":"# Map\nseq = [1, 2, 3, 4, 5]\nresult = list(map(lambda var: var*2, seq))\nprint(result)","4e0fc9ad":"# Filter\nseq = [1, 2, 3, 4, 5]\nresult = list(filter(lambda x: x > 2, seq))\nprint(result)","7befff3c":"import numpy as np\n# np.arange(start, stop, step)\n# np.arange(3, 7, 2)\n# array([3, 5])","1412d7f3":"# np.linspace(start, stop, num)\n# np.linspace(2.0, 3.0, num=5)\n# array([ 2.0,  2.25,  2.5,  2.75, 3.0])","e0ef44db":"# df.drop('Row A', axis=0)\n# df.drop('Column A', axis=1)","1daa060e":"# df.shape\n# of Rows, # of Columns","7196b462":"**Map and Filter**\n\nOnce you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool.\n\nSpecifically, map takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list type.","932fecee":"**Please UPVOTE for encouragement**","4f4d508e":"Merge combines multiple dataframes on specific, common columns that serve as the primary key.\n\n![2](http:\/\/cdn-images-1.medium.com\/max\/800\/1*Sh3sD7Jmx11uC5pJCw8fYg.png)\n\nJoin, much like merge, combines two dataframes. However, it joins them based on their indices, rather than some specified column.\n\n![1](http:\/\/\/cdn-images-1.medium.com\/max\/800\/1*Uxeddunf3cqsXFZOK0rVuA.png)\n\nCheck out the excellent [Pandas documentation](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.18\/merging.html) for specific syntax and more concrete examples, as well as some special cases that you may run into","cc7c14eb":"**Pivot Tables**\n\nLast but certainly not least is pivot tables. If you\u2019re familiar with Microsoft Excel, then you\u2019ve probably heard of pivot tables in some respect. The Pandas built-in pivot_table function creates a spreadsheet-style pivot table as a DataFrame. Note that the levels in the pivot table are stored in MultiIndex objects on the index and columns of the resulting DataFrame.\n\n(http:\/\/youtu.be\/xPPs59pn6qU)","e8fac54a":"**Concat, Merge, and Join**\n\nIf you\u2019re familiar with SQL, then these concepts will probably come a lot easier for you. Anyhow, these functions are essentially just ways to combine dataframes in specific ways. It can be difficult to keep track of which is best to use at which time, so let\u2019s review it.\n\nConcat allows the user to append one or more dataframes to each other either below or next to it (depending on how you define the axis).","b16bed31":"I find myself looking up the same question, concept, or syntax over and over again when programming. Then i found one article on the same issue. So I want to share these concepts, which also helpful for others... ","059e860b":"[https:\/\/www.youtube.com\/watch?v=cKlnR-CB3tk](http:\/\/)","777c816c":"**Arange and Linspace**\n\nFor creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data science.\n\nArange returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a \u2018cut-off\u2019 value, so it will not be included in the array output.","2e55165a":"**Pandas Apply**\n\nThink of apply as a map function, but made for Pandas DataFrames or more specifically, for Series. If you\u2019re not as familiar, Series are pretty similar to NumPy arrays for the most part.\n\nApply sends a function to every element along a column or row depending on what you specify. You might imagine how useful this can be, especially for formatting and manipulating values across a whole DataFrame column, without having to loop at all.\n\n(http:\/\/youtu.be\/P_q0tkYqvSk)","c0ca6571":"Calling the shape attribute from a Pandas dataframe gives us back a tuple with the first value representing the number of rows and the second value representing the number of columns. If you think about how this is indexed in Python, rows are at 0 and columns are at 1, much like how we declare our axis value. ","493462b5":"**Lambda Functions**\n\nEver get tired of creating function after function for limited use cases? Lambda functions to the rescue! Lambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function, without creating a function.\n\n*The basic syntax of lambda functions is:*","cc4ca57f":"The filter function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering rule.","4830cf55":"Note that lambda functions can do everything that regular functions can do, as long as there\u2019s just one expression. \n\nCheck out the simple example below and the upcoming video to get a better feel for the power of lambda functions:","3d670079":"![3](http:\/\/cdn-images-1.medium.com\/max\/800\/1*buH3hnAmCaGaNuHztJvnfA.png)","bb45a8e5":"**One-Line List Comprehension**\n\nSee the example below for how you would normally go about list comprehension with a for loop vs. creating your list with in one simple line with no loops necessary.","11bb2e9f":"Linspace is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when plotting","c748a14d":"**What Axis Really Means**\n\nYou may have ran into this when dropping a column in Pandas or summing values in NumPy matrix. If not, then you surely will at some point. Let\u2019s use the example of dropping a column for now:\n\nset axis to 1 if you want to deal with columns and set it to 0 if you want rows. ","4e29b027":"[https:\/\/youtu.be\/PtO3t6ynH-8](http:\/\/)"}}