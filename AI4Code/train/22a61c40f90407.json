{"cell_type":{"1ab70782":"code","f8494c66":"code","87677b72":"code","07bd5e11":"code","d991bfa7":"code","d453ad24":"code","6ddc142d":"code","bfac6946":"code","fd1c4d57":"code","030d809b":"code","1b0354bf":"code","76cd97be":"code","8510e148":"code","ce8f068a":"code","62426250":"code","c0e71dde":"code","b310475b":"code","085831c3":"code","c024198b":"code","70443cf3":"code","f3fc325d":"code","71990854":"code","93233c6f":"code","ec660407":"code","df7e74fe":"code","79929ff7":"code","16175e8e":"code","20b8d136":"code","327299e4":"code","ca1910d1":"code","60e19417":"code","dfd88550":"code","93d1d26a":"code","b6796ed6":"code","ae9481c4":"code","aec1837c":"code","f7e3bc31":"code","8a3d2879":"code","e72d46b5":"code","6bc2516c":"code","a7e66900":"code","ee0390e4":"code","a59c0ee4":"code","f0f4d878":"markdown","2126e9de":"markdown","d09ddda2":"markdown","7e0c580e":"markdown","30b28f84":"markdown","041762a3":"markdown","1166f5b7":"markdown","dd2700c7":"markdown","f901b9f7":"markdown","795b2a8f":"markdown","0b33df7a":"markdown","37225263":"markdown","1b3917ce":"markdown","a6dc6670":"markdown","3fe9017f":"markdown"},"source":{"1ab70782":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport math\nimport warnings\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8494c66":"# Let's import to our data and check the basics.\nterror = pd.read_csv('\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv',encoding='ISO-8859-1')","87677b72":"terror.head()","07bd5e11":"terror.columns","d991bfa7":"terror.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','provstate':'state',\n                       'region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed',\n                       'nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type',\n                       'weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)","d453ad24":"# I'm just take important data in whole dataset those I'm using further processing.\nterror=terror[['Year','Month','Day','Country','state','Region','city','latitude','longitude','AttackType','Killed',\n               'Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]","6ddc142d":"# Checking the null velues in data\nterror.isnull().sum()","bfac6946":"terror.info()","fd1c4d57":"print(\"Country with the most attacks:\",terror['Country'].value_counts().idxmax())\nprint(\"City with the most attacks:\",terror['city'].value_counts().index[1]) #as first entry is 'unknown'\nprint(\"Region with the most attacks:\",terror['Region'].value_counts().idxmax())\nprint(\"Year with the most attacks:\",terror['Year'].value_counts().idxmax())\nprint(\"Month with the most attacks:\",terror['Month'].value_counts().idxmax())\nprint(\"Group with the most attacks:\",terror['Group'].value_counts().index[1])\nprint(\"Most Attack Types:\",terror['AttackType'].value_counts().idxmax())","030d809b":"from wordcloud import WordCloud\nfrom scipy import signal\ncities = terror.state.dropna(False)\nplt.subplots(figsize=(10,10))\nwordcloud = WordCloud(background_color = 'white',\n                     width = 512,\n                     height = 384).generate(' '.join(cities))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","1b0354bf":"terror['Year'].value_counts(dropna = False).sort_index()","76cd97be":"x_year = terror['Year'].unique()\ny_count_years = terror['Year'].value_counts(dropna = False).sort_index()\nplt.figure(figsize = (18,10))\nsns.barplot(x = x_year,\n           y = y_count_years,\n           palette = 'rocket')\nplt.xticks(rotation = 45)\nplt.xlabel('Attack Year')\nplt.ylabel('Number of Attacks each year')\nplt.title('Attack_of_Years')\nplt.show()","8510e148":"plt.subplots(figsize=(15,6))\nsns.countplot('Year',data=terror,palette='RdYlGn_r',edgecolor=sns.color_palette(\"YlOrBr\", 10))\nplt.xticks(rotation=45)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","ce8f068a":"pd.crosstab(terror.Year, terror.Region).plot(kind='area',figsize=(15,6))\nplt.title('Terrorist Activities by Region in each Year')\nplt.ylabel('Number of Attacks')\nplt.show()","62426250":"terror['Wounded'] = terror['Wounded'].fillna(0).astype(int)\nterror['Killed'] = terror['Killed'].fillna(0).astype(int)\nterror['casualities'] = terror['Killed'] + terror['Wounded']","c0e71dde":"terror1 = terror.sort_values(by='casualities',ascending=False)[:40]","b310475b":"heat=terror1.pivot_table(index='Country',columns='Year',values='casualities')\nheat.fillna(0,inplace=True)","085831c3":"heat.head()","c024198b":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\ncolorscale = [[0, '#edf8fb'], [.3, '#00BFFF'],  [.6, '#8856a7'],  [1, '#810f7c']]\nheatmap = go.Heatmap(z=heat.values, x=heat.columns, y=heat.index, colorscale=colorscale)\ndata = [heatmap]\nlayout = go.Layout(\n    title='Top 40 Worst Terror Attacks in History from 1982 to 2016',\n    xaxis = dict(ticks='', nticks=20),\n    yaxis = dict(ticks='')\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='heatmap',show_link=False)","70443cf3":"terror.Country.value_counts()[:15]","f3fc325d":"plt.subplots(figsize=(15,6))\nsns.barplot(terror['Country'].value_counts()[:15].index,terror['Country'].value_counts()[:15].values,palette='Blues_d')\nplt.title('Top Countries Affected')\nplt.xlabel('Countries')\nplt.ylabel('Count')\nplt.xticks(rotation= 90)\nplt.show()","71990854":"import folium\nfrom folium.plugins import MarkerCluster \nfilterYear = terror['Year'] == 1970","93233c6f":"filterData = terror[filterYear] # filter data\n# filterData.info()\nreqFilterData = filterData.loc[:,'city':'longitude'] #We are getting the required fields\nreqFilterData = reqFilterData.dropna() # drop NaN values in latitude and longitude\nreqFilterDataList = reqFilterData.values.tolist()\n# reqFilterDataList","ec660407":"map = folium.Map(location = [0, 30], tiles='CartoDB positron', zoom_start=2)\n# clustered marker\nmarkerCluster = folium.plugins.MarkerCluster().add_to(map)\nfor point in range(0, len(reqFilterDataList)):\n    folium.Marker(location=[reqFilterDataList[point][1],reqFilterDataList[point][2]],\n                  popup = reqFilterDataList[point][0]).add_to(markerCluster)\nmap","df7e74fe":"terror.Group.value_counts()[1:15]","79929ff7":"test = terror[terror.Group.isin(['Shining Path (SL)','Taliban','Islamic State of Iraq and the Levant (ISIL)'])]","16175e8e":"test.Country.unique()","20b8d136":"terror_df_group = terror.dropna(subset=['latitude','longitude'])\nterror_df_group = terror_df_group.drop_duplicates(subset=['Country','Group'])\nterrorist_groups = terror.Group.value_counts()[1:8].index.tolist()\nterror_df_group = terror_df_group.loc[terror_df_group.Group.isin(terrorist_groups)]\nprint(terror_df_group.Group.unique())","327299e4":"map = folium.Map(location=[20, 0], tiles=\"CartoDB positron\", zoom_start=2)\nmarkerCluster = folium.plugins.MarkerCluster().add_to(map)\nfor i in range(0,len(terror_df_group)):\n    folium.Marker([terror_df_group.iloc[i]['latitude'],terror_df_group.iloc[i]['longitude']], \n                  popup='Group:{}<br>Country:{}'.format(terror_df_group.iloc[i]['Group'], \n                  terror_df_group.iloc[i]['Country'])).add_to(map)\nmap","ca1910d1":"m1 = folium.Map(location=[20, 0], tiles=\"CartoDB positron\", zoom_start=2)\nmarker_cluster = MarkerCluster(\n    name='clustered icons',\n    overlay=True,\n    control=False,\n    icon_create_function=None\n)\nfor i in range(0,len(terror_df_group)):\n    marker=folium.Marker([terror_df_group.iloc[i]['latitude'],terror_df_group.iloc[i]['longitude']]) \n    popup='Group:{}<br>Country:{}'.format(terror_df_group.iloc[i]['Group'],\n                                          terror_df_group.iloc[i]['Country'])\n    folium.Popup(popup).add_to(marker)\n    marker_cluster.add_child(marker)\nmarker_cluster.add_to(m1)\nfolium.TileLayer('openstreetmap').add_to(m1)\nfolium.TileLayer('Mapbox Bright').add_to(m1)\nfolium.TileLayer('cartodbdark_matter').add_to(m1)\nfolium.TileLayer('stamentoner').add_to(m1)\nfolium.LayerControl().add_to(m1)\n\nm1","60e19417":"terror.head()","dfd88550":"# Total Number of people killed in terror attack\nkillData = terror.loc[:,'Killed']\nprint('Number of people killed by terror attack:', int(sum(killData.dropna())))# drop the NaN values","93d1d26a":"# Let's look at what types of attacks these deaths were made of.\nattackData = terror.loc[:,'AttackType']\n# attackData\ntypeKillData = pd.concat([attackData, killData], axis=1)","b6796ed6":"typeKillData.head()","ae9481c4":"typeKillFormatData = typeKillData.pivot_table(columns='AttackType', values='Killed', aggfunc='sum')\ntypeKillFormatData","aec1837c":"typeKillFormatData.info()","f7e3bc31":"labels = typeKillFormatData.columns.tolist() # convert line to list\ntranspoze = typeKillFormatData.T # transpoze\nvalues = transpoze.values.tolist()\nfig, ax = plt.subplots(figsize=(20, 20), subplot_kw=dict(aspect=\"equal\"))\nplt.pie(values, startangle=90, autopct='%.2f%%')\nplt.title('Types of terrorist attacks that cause deaths')\nplt.legend(labels, loc='upper right', bbox_to_anchor = (1.3, 0.9), fontsize=15) # location legend\nplt.show()","8a3d2879":"#Number of Killed in Terrorist Attacks by Countries\ncountryData = terror.loc[:,'Country']\n# countyData\ncountryKillData = pd.concat([countryData, killData], axis=1)","e72d46b5":"countryKillFormatData = countryKillData.pivot_table(columns='Country', values='Killed', aggfunc='sum')\ncountryKillFormatData","6bc2516c":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0]=25\nfig_size[1]=25\nplt.rcParams[\"figure.figsize\"] = fig_size","a7e66900":"labels = countryKillFormatData.columns.tolist()\nlabels = labels[:50] #50 bar provides nice view\nindex = np.arange(len(labels))\ntranspoze = countryKillFormatData.T\nvalues = transpoze.values.tolist()\nvalues = values[:50]\nvalues = [int(i[0]) for i in values] # convert float to int\ncolors = ['red', 'green', 'blue', 'purple', 'yellow', 'brown', 'black', 'gray', 'magenta', 'orange'] # color list for bar chart bar color \nfig, ax = plt.subplots(1, 1)\nax.yaxis.grid(True)\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0]=25\nfig_size[1]=25\nplt.rcParams[\"figure.figsize\"] = fig_size\nplt.bar(index, values, color = colors, width = 0.9)\nplt.ylabel('Killed People', fontsize=20)\nplt.xlabel('Countries', fontsize = 20)\nplt.xticks(index, labels, fontsize=18, rotation=90)\nplt.title('Number of people killed by countries', fontsize = 20)\n# print(fig_size)\nplt.show()","ee0390e4":"labels = countryKillFormatData.columns.tolist()\nlabels = labels[50:101]\nindex = np.arange(len(labels))\ntranspoze = countryKillFormatData.T\nvalues = transpoze.values.tolist()\nvalues = values[50:101]\nvalues = [int(i[0]) for i in values]\ncolors = ['red', 'green', 'blue', 'purple', 'yellow', 'brown', 'black', 'gray', 'magenta', 'orange']\nfig, ax = plt.subplots(1, 1)\nax.yaxis.grid(True)\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0]=20\nfig_size[1]=20\nplt.rcParams[\"figure.figsize\"] = fig_size\nplt.bar(index, values, color = colors, width = 0.9)\nplt.ylabel('Killed People', fontsize=20)\nplt.xlabel('Countries', fontsize = 20)\nplt.xticks(index, labels, fontsize=18, rotation=90)\nplt.title('Number of people killed by countries', fontsize = 20)\nplt.show()","a59c0ee4":"labels = countryKillFormatData.columns.tolist()\nlabels = labels[152:206]\nindex = np.arange(len(labels))\ntranspoze = countryKillFormatData.T\nvalues = transpoze.values.tolist()\nvalues = values[152:206]\nvalues = [int(i[0]) for i in values]\ncolors = ['red', 'green', 'blue', 'purple', 'yellow', 'brown', 'black', 'gray', 'magenta', 'orange']\nfig, ax = plt.subplots(1, 1)\nax.yaxis.grid(True)\nfig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0]=25\nfig_size[1]=25\nplt.rcParams[\"figure.figsize\"] = fig_size\nplt.bar(index, values, color = colors, width = 0.9)\nplt.ylabel('Killed People', fontsize=20)\nplt.xlabel('Countries', fontsize = 20)\nplt.xticks(index, labels, fontsize=18, rotation=90)\nplt.title('Number of people killed by countries', fontsize = 20)\nplt.show()","f0f4d878":"# ANALYSIS ON CUSTOMIZED DATA\n## Terrorist Attacks of a Particular year and their Locations\n\nLet's look at the terrorist acts in the world over a certain year.","2126e9de":"<center><b>Terrorist acts in the Middle East and northern Africa have been seen to have fatal consequences. The Middle East and North Africa are seen to be the places of serious terrorist attacks. In addition, even though there is a perception that Muslims are supporters of terrorism, Muslims are the people who are most damaged by terrorist attacks. If you look at the graphics, it appears that Iraq, Afghanistan and Pakistan are the most damaged countries. All of these countries are Muslim countries.<\/b><\/center>","d09ddda2":"## Number of Terrorist Activities each Year","7e0c580e":"# DATA VISUALISATION","30b28f84":"## Destructive Feature of data","041762a3":"* There are to many columns, I didn't count them yet. But important things are the columns. Therefore we should look the columns and check what are they.","1166f5b7":"        Terrorist Activities by Region in each Year through Area Plot","dd2700c7":"**<center>Armed assault and bombing\/explosion are seen to be the cause of 77% of the deaths in these attacks. This rate is why these attacks are used so many times in terrorist actions. This is how dangerous weapons and explosives are to the world.<\/center>**","f901b9f7":"**Values are sorted by the top 40 worst terror attacks as to keep the heatmap simple and easy to visualize**","795b2a8f":"# Top Countries affected by Terror Attacks","0b33df7a":"**84% of the terrorist attacks in 1970 were carried out on the American continent. In 1970, the Middle East and North Africa, currently the center of wars and terrorist attacks, faced only one terrorist attack.**","37225263":"# <center>EDA - Terrorim<\/center>\n## Objective:\n\u25cf Perform \u2018Exploratory Data Analysis\u2019 on dataset \u2018Global Terrorism\u2019\n\n\u25cf As a security\/defense analyst, try to find out the hot zone of terrorism.\n\n\u25cf What all security issues and insights you can derive by EDA?","1b3917ce":"**<center>Upvoted Thank you.<\/center>**","a6dc6670":"**The Above map looks untidy even though it can be zoomed in to view the Country in question. Hence in the next chart, I have used Folium's Marker Cluster to cluster these icons. This makes it visually pleasing and highly interactive.**","3fe9017f":"### Now let us check out which terrorist organizations have carried out their operations in each country. A value count would give us the terrorist organizations that have carried out the most attacks. we have indexed from 1 as to negate the value of 'Unknown'"}}