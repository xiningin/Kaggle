{"cell_type":{"13690c74":"code","84725ed6":"code","f3b938cc":"code","63fa2a05":"code","8da18555":"code","a057ebc6":"code","8dcc49e3":"code","948f5457":"code","306c6852":"code","7070c63b":"code","fb5afbf8":"code","ee551e4d":"code","b19a4ec4":"code","ee8d1eb9":"code","c2f04e0e":"code","85f9c671":"code","a0dfbc62":"code","02a4e705":"code","13d60d5a":"code","776f5427":"code","9e38076e":"code","51000999":"code","2f58e94e":"code","dc5ab84d":"code","48f6857d":"code","342fbe06":"code","247cc4d0":"code","58aea9cb":"markdown"},"source":{"13690c74":"import sys\nimport pandas\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import Window\nfrom pyspark.sql.functions import lit, col, sum, isnull, isnan, mean, max, desc, when, unix_timestamp, to_date, regexp_extract\nfrom pyspark.sql.types import DoubleType, LongType","84725ed6":"sp = SparkSession.builder.appName(\"test\").getOrCreate()","f3b938cc":"df = sp.read.csv('..\/input\/Google Play Store Apps\/googleplaystore.csv', inferSchema=True, header=True)","63fa2a05":"df.limit(5).toPandas()\n# df.limit(5).toPandas().head()","8da18555":"df.groupBy('Category').count().collect()","a057ebc6":"df.groupBy('Price').count().collect()","8dcc49e3":"df.printSchema()","948f5457":"df = df.withColumn(\"SizeS\", regexp_extract(col('Size'), '([0-9\\.]+)[Mk]', 1))\ndf = df.withColumn(\"PriceS\", when(col('Price') != '0', regexp_extract(col('Price'), '\\$([0-9\\.]*)', 1)).otherwise(col('Price')))","306c6852":"df = df.withColumn(\"Ratingf\", df[\"Rating\"].cast(DoubleType()))\ndf = df.withColumn(\"Pricef\", df[\"PriceS\"].cast(DoubleType()))\ndf = df.withColumn(\"Reviewsf\", df[\"Reviews\"].cast(LongType()))\ndf = df.withColumn(\"Sizef\", df[\"SizeS\"].cast(DoubleType()))\ndf = df.withColumn(\"Last Updatedf\", to_date(unix_timestamp(col('Last Updated'), 'MMMM dd, yyyy').cast(\"timestamp\")))\ndf.limit(5).collect()","7070c63b":"numeric_cols  = [cols[0] for cols in df.dtypes if cols[1] in ['int', 'long', 'double', 'float', 'decimal.Decimal']]\nnumeric_cols","fb5afbf8":"df = df.withColumn(\"Ratingf\", when(col(\"Ratingf\") == float(\"NaN\"), None).otherwise(col(\"Ratingf\")))","ee551e4d":"df.printSchema()","b19a4ec4":"(df.count(), len(df.columns))","ee8d1eb9":"df_null = df.select(*(sum(isnull(col(column)).cast(\"int\")).alias(column) for column in df.columns))\ndf_null = df_null.withColumn(\"summary\", lit(\"null\"))\n\ndf_nan = df.select(*(sum(isnan(col(column)).cast(\"int\")).alias(column) for column in numeric_cols))\ndf_nan = df_nan.withColumn(\"summary\", lit(\"nan\"))\n\ndf_zero = df.select(*(sum((col(column) == 0).cast(\"int\")).alias(column) for column in numeric_cols))\ndf_zero = df_zero.withColumn(\"summary\", lit(\"zero\"))\n\ndf_neg = df.select(*(sum((col(column) < 0).cast(\"int\")).alias(column) for column in numeric_cols))\ndf_neg = df_neg.withColumn(\"summary\", lit(\"negative\"))\n\ndf_inf_p = df.select(*(sum((col(column) == float(\"Inf\")).cast(\"int\")).alias(column) for column in numeric_cols))\ndf_inf_p = df_inf_p.withColumn(\"summary\", lit(\"infinity_p\"))\n\ndf_inf_n = df.select(*(sum((col(column) == -float(\"Inf\")).cast(\"int\")).alias(column) for column in numeric_cols))\ndf_inf_n = df_inf_n.withColumn(\"summary\", lit(\"infinity_n\"))","c2f04e0e":"df_missing = df_null\ndf_missing_numeric = df_zero.union(df_nan)\ndf_missing_numeric = df_missing_numeric.union(df_inf_p)\ndf_missing_numeric = df_missing_numeric.union(df_inf_n)\ndf_missing_numeric = df_missing_numeric.union(df_neg)","85f9c671":"df_missing.collect()","a0dfbc62":"df_missing_numeric.collect()","02a4e705":"window_spec = Window.partitionBy(df[\"Category\"]).rangeBetween(-sys.maxsize, sys.maxsize)\nprint(window_spec)","13d60d5a":"size_mean = mean(df[\"Sizef\"]).over(window_spec)\nprint(size_mean)\nrating_mean = mean(df[\"Ratingf\"]).over(window_spec)\nprint(rating_mean)\nprice_mean = mean(df[\"Pricef\"]).over(window_spec)\nprint(price_mean)","776f5427":"dfi = df\ndfi = dfi.withColumn('size_mean', size_mean)\ndfi = dfi.withColumn('rating_mean', rating_mean)\ndfi = dfi.withColumn('price_mean', price_mean)","9e38076e":"print(dfi.count(), len(dfi.columns))\ndfi.printSchema()","51000999":"dfi = dfi.withColumn('size_imputed', when(isnull(col('Sizef')), col('size_mean')).otherwise(col('Sizef')))\ndfi = dfi.withColumn('rating_imputed', when(isnull(col('Ratingf')), col('rating_mean')).otherwise(col('Ratingf')))\ndfi = dfi.withColumn('price_imputed', when(isnull(col('Pricef')) & (col('Type') != 'Free'), col('price_mean')).when(isnull(col('Pricef')) & (col('Type') == 'Free'), 0).otherwise(col('Pricef')))                     ","2f58e94e":"dfi.limit(5).collect()","dc5ab84d":"dfi = dfi.dropna(how='all', subset=[\"price_imputed\", \"size_imputed\"])","48f6857d":"dfi.repartition(1).write.csv('google_submission_imputed.csv', header=True)","342fbe06":"check_col = ['rating_imputed', 'size_imputed', 'price_imputed']\ndfi_null = dfi.select(*(sum(isnull(col(column)).cast(\"int\")).alias(column) for column in check_col))\ndfi_null = dfi_null.withColumn(\"summary\", lit(\"null\"))","247cc4d0":"dfi_null.collect()","58aea9cb":"### Data Fill\/Imputation\n* Null: `Sizef`, `Ratingf`, `Pricef`\n\n#### Strategy\n\n1) Sizef: fill as the average of the `Category`\n\n2) Ratingf: fill as average of the `Category`\n\n3) Pricef: fill 0 if `Type` is 'Free' else fill average of the category"}}