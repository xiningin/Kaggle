{"cell_type":{"e2cb09bf":"code","781d93fe":"code","f0c1f64b":"code","e763bac8":"code","967acb00":"code","a0d8aee7":"code","73b8f1ab":"code","dd0eb096":"code","6fdd6ef8":"code","38a47cbf":"code","16196239":"code","9f5c757f":"code","d900ed5d":"code","f407d69c":"code","15f84f61":"code","62e02365":"code","f40905b1":"code","23585a0d":"code","9e7b9594":"code","287f1a37":"code","326f30a2":"code","6486f3a3":"code","74d427b6":"code","b40c7c89":"code","4e778837":"code","cf4105dd":"code","d6848bf2":"code","536104b9":"code","f08ff378":"code","fe408787":"code","fe355e37":"code","d46e56b9":"code","826b829f":"code","16389adf":"code","4d7fae8a":"code","f736642d":"code","afb46d81":"code","e36f7f7b":"code","62ee4b8b":"code","58f0ddeb":"code","9b9cd1c8":"code","d176e93e":"code","78816621":"code","b81ed7c0":"code","429d62ce":"code","7b1fa608":"code","67336133":"code","c54629d2":"code","f42c7974":"code","70f0635a":"code","a7845f18":"code","7ecf3eb6":"code","da81f862":"code","3ffa480b":"code","f90f5db5":"code","55f9cddb":"code","40534871":"markdown","1e007d3e":"markdown","768d9987":"markdown","8ab567ad":"markdown","5779be2c":"markdown","a47f00e8":"markdown"},"source":{"e2cb09bf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","781d93fe":"data = pd.read_csv(\"..\/input\/housing-cal\/housing2 (1) (1).csv\", sep = \",\" , encoding=\"utf-8\")","f0c1f64b":"data","e763bac8":"data.info()","967acb00":"data.isnull().sum()","a0d8aee7":"data.describe()","73b8f1ab":"data.describe(include = \"object\")","dd0eb096":"plt.figure(figsize=(8,6))\nsns.heatmap(data.isnull(), cbar = False)","6fdd6ef8":"plt.figure(figsize=(8,6))\nsns.heatmap(data.corr(), cbar = True, annot = True )","38a47cbf":"data.hist(bins=120 , figsize=(14,16))\nplt.show()","16196239":"data.plot(kind = \"box\" , subplots = True , figsize = (14,8) )\nplt.show()","9f5c757f":"plt.figure(figsize=(8,6))\nplt.scatter(data = data , x=\"longitude\" , y=\"latitude\" , c =data[\"median_house_value\"]  )\nplt.colorbar ()\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()","d900ed5d":"plt.figure(figsize=(8,6))\nplt.scatter(data = data , x=\"longitude\" , y=\"latitude\" , c =data[\"housing_median_age\"]  )\nplt.colorbar ()\nplt.show()","f407d69c":"plt.figure(figsize=(8,6))\nplt.scatter(data = data , x=\"longitude\" , y=\"latitude\" , c =data[\"median_income\"]  )\nplt.colorbar ()\nplt.show()","15f84f61":"data.info()","62e02365":"data['gender'].replace(\"female\", 0 , inplace=True)\ndata['gender'].replace(\"male\", 1, inplace=True)","f40905b1":"plt.figure(figsize=(8,6))\nsns.heatmap(data.corr(), cbar = True, annot = True )","23585a0d":"from sklearn.preprocessing import LabelEncoder","9e7b9594":"ocean_proximity_le =LabelEncoder()","287f1a37":"data['ocean_proximity'] = ocean_proximity_le.fit_transform(data['ocean_proximity'])","326f30a2":"data","6486f3a3":"data['households'].replace(\"no\", np.nan , inplace=True)","74d427b6":"data['households'] = pd.to_numeric(data['households'])","b40c7c89":"data.info()","4e778837":"plt.figure(figsize=(8,6))\nsns.heatmap(data.corr(), cbar = True, annot = True )\n\n# median_income and housing_median_age and total_rooms and latitude are the most important features","cf4105dd":"data.isnull().sum()","d6848bf2":"plt.figure(figsize=(8,6))\nsns.heatmap(data.isnull(), cbar = False)","536104b9":"data = data.dropna(thresh=9)\ndata","f08ff378":"plt.figure(figsize=(8,6))\nsns.heatmap(data.isnull(), cbar = False)","fe408787":"data.isnull().sum()","fe355e37":"#data['housing_median_age'] = data['housing_median_age'].replace(np.nan , data['housing_median_age'].mean())\n#data['population'] = data['population'].replace(np.nan , data['population'].mean())\n","d46e56b9":"data.drop([\"gender\"] , axis = 1 , inplace = True)","826b829f":"data","16389adf":"from sklearn.neighbors import KNeighborsRegressor\n\ndef impute_knn(data):\n    \n    # separate dataframe into numerical\/categorical\n    ldf = data.select_dtypes(include=[np.number])           # select numerical columns in df\n    ldf_putaside = data.select_dtypes(exclude=[np.number])  # select categorical columns in df\n    # define columns w\/ and w\/o missing data\n    cols_nan = ldf.columns[ldf.isna().any()].tolist()         # columns w\/ nan \n    cols_no_nan = ldf.columns.difference(cols_nan).values     # columns w\/o nan \n\n    for col in cols_nan:                \n        imp_test = ldf[ldf[col].isna()]   # indicies which have missing data will become our test set\n        imp_train = ldf.dropna()          # all indicies which which have no missing data \n        model = KNeighborsRegressor(n_neighbors=5)  # KNR Unsupervised Approach\n        knr = model.fit(imp_train[cols_no_nan], imp_train[col])\n        ldf.loc[data[col].isna(), col] = knr.predict(imp_test[cols_no_nan])\n    \n    return pd.concat([ldf,ldf_putaside],axis=1)","4d7fae8a":"data = impute_knn(data)","f736642d":"data.isnull().sum()","afb46d81":"data.hist(bins=120 , figsize=(14,16))\nplt.show()","e36f7f7b":"X = data.drop(\"median_house_value\" , axis = 1).values\ny = data['median_house_value'].values","62ee4b8b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2 , random_state=42)","58f0ddeb":"from sklearn.preprocessing import RobustScaler\nr = RobustScaler ()\nX_train = r.fit_transform(X_train)\nX_test = r.fit_transform(X_test)","9b9cd1c8":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)","d176e93e":"lr.score(X_train,y_train)","78816621":"lr.score(X_test,y_test)","b81ed7c0":"lr.coef_","429d62ce":"lr.intercept_","7b1fa608":"from sklearn.linear_model import Ridge\nrid = Ridge()","67336133":"rid.fit(X_train,y_train)","c54629d2":"rid.score(X_train,y_train)","f42c7974":"rid.score(X_test,y_test)","70f0635a":"y_pred = lr.predict(X_test)","a7845f18":"y_pred2 = rid.predict(X_test)","7ecf3eb6":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test , y_pred)\nr2","da81f862":"import statsmodels.api as sm\nfrom scipy import stats\n","3ffa480b":"X2 = sm.add_constant(X_train)\nest = sm.OLS(y_train,X2)\nest2 = est.fit()\nprint(est2.summary())","f90f5db5":"X2 = sm.add_constant(X_test)\nest = sm.OLS(y_test,X2)\nest2 = est.fit()\nprint(est2.summary())","55f9cddb":"X2 = sm.add_constant(X)\nest = sm.OLS(y,X2)\nest2 = est.fit()\nprint(est2.summary())","40534871":"## model","1e007d3e":"## preprocessing","768d9987":"## EDA","8ab567ad":"## reading data","5779be2c":"#### 1- missing values","a47f00e8":"#### 1- encoding catogrecal data"}}