{"cell_type":{"f564abe3":"code","49e7db6e":"code","76805e03":"code","e462b8dc":"code","be4376eb":"code","b7d3db03":"code","4e3ff2db":"code","d703998a":"code","6ceba390":"code","e1f17dcd":"code","9a71b158":"code","e6be8f1f":"code","8e5a88bd":"code","fdf06f9e":"code","c8f4e340":"code","99b6cf7c":"code","945c91c5":"code","e3d5c801":"code","3d74c2b3":"code","72524d30":"code","561702b4":"code","6ea26c08":"code","1ede5aac":"code","848e0609":"code","3decb1da":"markdown","32c49b0a":"markdown","33d87b44":"markdown","f8a2f2fe":"markdown","e70a4f1b":"markdown","a714e997":"markdown","8f4ad111":"markdown","fd0ccce2":"markdown","94786b07":"markdown","ee444b97":"markdown"},"source":{"f564abe3":"# Import file and packages\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt     # for visualisation\nimport seaborn as sns     # for visualisation\nfrom wordcloud import WordCloud    # for create word cloud\nimport random    # for use in random color in word cloud\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nramen_data = pd.read_csv('\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv')","49e7db6e":"# View head\nramen_data.head()","76805e03":"# Summarise ramen data\nramen_data.describe(include='all')","e462b8dc":"# View the type of Stars column\nprint(ramen_data['Stars'].describe())","be4376eb":"# Convert 'Stars' column to int\nramen_data['Stars'] = pd.to_numeric(ramen_data['Stars'], errors = 'coerce')\nramen_data.describe(include='all')","b7d3db03":"# Convert brand to lower case\nramen_data['Brand'] = ramen_data['Brand'].str.lower()\nramen_data.head()","4e3ff2db":"# Count the amount of brand that got review\nramen_brand = ramen_data.groupby(['Brand','Country']).agg({'Review #':'count'})\nramen_brand = ramen_brand.reset_index() \nramen_brand = ramen_brand.sort_values('Review #', ascending = False)","d703998a":"# Count brand from each country that got review\nramen_coun = ramen_brand.groupby('Country').agg({'Brand':'count'}).reset_index()\nramen_coun = ramen_coun.rename(columns = {'Brand':'Amount of brand'})\nramen_coun = ramen_coun.sort_values(['Amount of brand', 'Country'], ascending = [False, True])","6ceba390":"# View the top 10 countries which have the most amount of ramen brand\nramen_coun.head(10)","e1f17dcd":"# Bar chart of the amount of ramen brands in each country that got review\nplt.figure(figsize=(15, 5))\nplt.bar('Country', 'Amount of brand', data = ramen_coun, color = 'gold')\nplt.title( 'The amount of ramen brands in each country', fontsize=14)\nplt.ylabel('Number of brands')\nplt.xticks(rotation = 90)\nplt.show()","9a71b158":"# Present the variety of each countries that got reviewed\nramen_variety = ramen_data.groupby(['Country']).agg({'Variety':'count'})\nramen_variety = ramen_variety.reset_index() \nramen_variety = ramen_variety.sort_values(['Variety','Country'], ascending = [False, True])\nramen_variety = ramen_variety.rename(columns = {'Variety': 'Country variety'})","e6be8f1f":"# Bar chart of the amount of ramen products in each country that got reviewed\nplt.figure(figsize=(15, 5))\nplt.bar('Country', 'Country variety', data = ramen_variety, color = 'peru')\nplt.title( 'The amount of ramen product in each country', fontsize=14)\nplt.ylabel('Number of product')\nplt.xticks(rotation = 90)\nplt.show()","8e5a88bd":"# Count number of style in each country\nramen_style = ramen_data.groupby(['Country','Style']).agg({'Variety':'count'})\nramen_style = ramen_style.reset_index()\nramen_style.head()","fdf06f9e":"# Find the unique ramen styles\nstyle_name = sorted(ramen_style['Style'].unique())\nprint(style_name)","c8f4e340":"# Not every styles were produce in every countries,thus, those styles were not present in the table\n# Create the index of every styles in each country and add count number 0\n# by create dummie column, merge and fill the NaN with 0\npattern = pd.DataFrame({'dummie' : [0]*266}, \\\n                       index = pd.MultiIndex.from_product([ramen_coun['Country'], style_name], \\\n                       names = ['Country', 'Style']))\nramen_style = pd.merge(ramen_style, pattern, how='outer', on=['Country', 'Style'])\nramen_style = ramen_style[['Country', 'Style', 'Variety']].fillna(0)\n\n# Merge ramen_style with ramen_variety to be able to sort with the amount of brand\nramen_style = pd.merge(ramen_style, ramen_variety, how = 'left', on = 'Country')\nramen_style =ramen_style.sort_values(['Country variety','Country', 'Style'], ascending = [False,True, True])","99b6cf7c":"# Create stack bar chart\nplt.figure(figsize=(15, 5))\nbottom_bar = [0]*38 # for identify the bottom of the bar graph in each style\nbar_color = ['chocolate', 'yellowgreen', 'orange', 'forestgreen', 'peru', 'gold', 'saddlebrown']\n\n# Use for loop for plot bar chart and stack the amount of ramen in each ramen style\nfor i in range(len(style_name)):\n    plt.bar('Country', 'Variety', data = ramen_style[ramen_style['Style'] == style_name[i]], \\\n            bottom = bottom_bar, color = bar_color[i])\n    # change the bottom_bar to the the amount of current style for the next loop\n    bottom_bar = list(np.add(bottom_bar, ramen_style[ramen_style['Style'] == style_name[i]]['Variety']))\n\nplt.title( 'The amount of ramen style in each country', fontsize=14)\nplt.ylabel('Number of ramen')\nplt.xticks(rotation = 90)\nplt.legend(style_name)\nplt.show()","945c91c5":"# Create percentage stack bar chart of countries which have more than or equal to 50 products reviewed\n# Select only countries which have more than or equal to 50 products reviewed\nramen_per = ramen_style[ramen_style['Country variety'] >= 50].reset_index()\n\n# Create percentage column in ramen_style\nramen_per['Percentage'] = ramen_per['Variety'] * 100 \/ ramen_per['Country variety']\n\n# Create percentage stack bar chart\nplt.figure(figsize=(14, 5))\nbottom_bar = [0]*12 # for identify the bottom of the bar graph in each style\nfor i in range(len(style_name)):\n    plt.bar('Country', 'Percentage', data = ramen_per[ramen_per['Style'] == style_name[i]], \\\n            bottom = bottom_bar, color = bar_color[i])\n    bottom_bar = list(np.add(bottom_bar, ramen_per[ramen_per['Style'] == style_name[i]]['Percentage']))\n\nplt.title('The percentage of ramen style in countries which have more than or equal to 50 products reviewed', \\\n          fontsize=14)\nplt.ylabel('Per cent')\nplt.xticks(rotation = 90)\nplt.legend(style_name,bbox_to_anchor=(1.1, 1))    # move legend box to the right of the graph\nplt.show()","e3d5c801":"# Group ramen_data by Country and Brand column \n# and calculate the mean and median of Stars that each brand received\nramen_stars = ramen_data.groupby(['Country','Brand']).agg({'Stars': ['mean', 'median'], 'Review #': 'count'})\nramen_stars = ramen_stars.reset_index()\nramen_stars.columns = ['Country','Brand','Mean Stars', 'Median Stars', 'Review#']\nramen_stars = ramen_stars.sort_values('Median Stars', ascending = False)\n\n# Create new column for label\nramen_stars['Country Brand'] = ramen_stars['Brand'] + ' (' + ramen_stars['Country'] + ')'\nramen_stars.head()","3d74c2b3":"# View the top 5 brands with the highest average stars (sort by mean)\nramen_stars_re = ramen_stars[ramen_stars['Review#'] >= 10].reset_index()\nramen_stars_re = ramen_stars_re.sort_values('Mean Stars', ascending = False)\nramen_stars_re.head()","72524d30":"# View the top 5 brands with the lowest average stars (sort by mean)\nramen_stars_re.tail()","561702b4":"# Create box plot with mean\n# Sort by median of the stars for the order in box plot\nramen_stars_re = ramen_stars_re.sort_values('Median Stars', ascending = False)\n\n# Create boxplot\nramen_box = ramen_data[['Country','Brand','Stars']].reset_index()\nramen_box['Country Brand'] = ramen_box['Brand'] + ' (' + ramen_box['Country'] + ')'\n\n# Select only brand in country that in ramen_stars_re\nramen_box = ramen_box[ramen_box['Country Brand'].isin(ramen_stars_re['Country Brand'])]\n\n# Create boxplot\nfig, ax = plt.subplots(figsize=(5, 20))\nsns.boxplot(x = 'Stars', y = 'Country Brand', data = ramen_box, color = 'yellow',\\\n            order = ramen_stars_re['Country Brand'], showmeans = True,\\\n            meanprops = {'marker': 'o','markerfacecolor': 'saddlebrown', 'markeredgecolor': 'saddlebrown'})\nax.xaxis.tick_top()\nax.xaxis.set_label_position('top') \nplt.title( 'The distribution of the stars in each brand (mean display as brown circles)', \\\n          fontsize=14)\nplt.show()","6ea26c08":"# Rank ramen by Stars column\nramen_sort = ramen_data.sort_values('Stars').dropna(subset = ['Stars'])\n\n# Split into top 100 and bottom 100\nramen_top = ramen_sort.head(100)\nramen_bottom = ramen_sort.tail(100)\nramen_bottom.head()","1ede5aac":"# Join the top 100 ramen product name into a string\nramen_top_str = ramen_top['Variety'].str.cat(sep=',')\n\n# For generate color\ndef orange_color_func(word, font_size, position, orientation, random_state=None,\\\n                    **kwargs):\n    return \"hsl(%d, 100%%, 60%%)\" % random.randint(20, 55)\n\n# Plot word cloud of the top 100\nstopword_list = ['Noodle', 'Noodles', 'Instant Noodle', 'Instant', 'Flavor', 'Flavour', 'Ramen', 'With']\nplt.figure(figsize=(10,6))\ntop_wordcloud = WordCloud(max_font_size= 50, background_color='white', \\\n                      prefer_horizontal = 0.7, stopwords = stopword_list).generate(ramen_top_str)\nplt.imshow(top_wordcloud.recolor(color_func = orange_color_func, random_state = 3), interpolation='bilinear')\nplt.axis('off')\nplt.show()","848e0609":"# Join the bottom 100 ramen product name into a string\nramen_bottom_str = ramen_bottom['Variety'].str.cat(sep=',')\n\n# Plot word cloud of the bottom 100\nplt.figure(figsize=(10,6))\nwordcloud_bottom = WordCloud(max_font_size= 50, background_color='white', \\\n                      prefer_horizontal = 0.7, stopwords = stopword_list).generate(ramen_bottom_str)\nplt.imshow(wordcloud_bottom.recolor(color_func = orange_color_func, random_state = 3), interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","3decb1da":"note: 'Stars' is not numeric","32c49b0a":"### 2. The popular styles of ramen in each country","33d87b44":"**References**\n\nPandas\n* https:\/\/pandas.pydata.org\/Pandas_Cheat_Sheet.pdf\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.MultiIndex.from_product.html#pandas.MultiIndex.from_product\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.reindex_like.html#pandas.DataFrame.reindex_like\n* https:\/\/stackoverflow.com\/questions\/22245171\/how-to-lowercase-a-pandas-dataframe-string-column-if-it-has-missing-values\n* https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23.1\/generated\/pandas.core.groupby.DataFrameGroupBy.agg.html\n* https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.dropna.html\n\nMatplotlib\n* https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.bar.html\n* https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Python_Matplotlib_Cheat_Sheet.pdf\n* https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py\n* https:\/\/matplotlib.org\/3.1.3\/api\/markers_api.html\n* https:\/\/stackoverflow.com\/questions\/14406214\/moving-x-axis-to-the-top-of-a-plot-in-matplotlib\n\nSeaborn\n* https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/Python_Seaborn_Cheat_Sheet.pdf\n* https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html\n* https:\/\/stackoverflow.com\/questions\/43131274\/how-do-i-plot-two-countplot-graphs-side-by-side-in-seaborn\n* https:\/\/stackoverflow.com\/questions\/54132989\/is-there-a-way-to-change-the-color-and-shape-indicating-the-mean-in-a-seaborn-bo\n* https:\/\/stackoverflow.com\/questions\/52487352\/python-seaborn-how-to-add-mean-into-boxplot-visualization\n\n\nWord Cloud creation\n* https:\/\/www.datacamp.com\/community\/tutorials\/wordcloud-python\n* https:\/\/amueller.github.io\/word_cloud\/auto_examples\/a_new_hope.html","f8a2f2fe":"### The objective of this data exploration\n1. Presents the amount of brands from each countries\n2. Presents the popular styles of ramen in each country\n3. Find the average ramen stars in each brand\n4. Create word cloud of product name for the top 100 and the bottom 100 ramen products","e70a4f1b":"### 4. Create word cloud of product name for the top 100 and the bottom 100 ramen products\n\nFind the top 100 and the bottom 100 according to the stars the product received and compare the words that they used to describe the products.","a714e997":"### 3. Find the average ramen stars in each brand","8f4ad111":"To make a fair comparison, the average stars should be compared only within the brand that received at least 10 reviews.","fd0ccce2":"### 1. The amount of brands and varieties from each countries","94786b07":"### View the dataset","ee444b97":"Some brands in the Brand column have inconsistant in upper and lower case."}}