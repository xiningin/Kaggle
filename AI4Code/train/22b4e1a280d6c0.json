{"cell_type":{"c6657ef0":"code","4fec31eb":"code","8129bf12":"code","383f1152":"code","882e06a3":"code","85267ca1":"code","2186f7d8":"code","de89e5c3":"code","3b26a312":"code","a28541bd":"code","b31c7a81":"code","0f498680":"code","1b7253df":"code","da1b68e0":"code","de0b18c0":"code","92e6b1d4":"markdown","33cae845":"markdown","2b3684d7":"markdown","7a27fef9":"markdown","0a46256f":"markdown","2009a5bc":"markdown","e4b56086":"markdown","28b6b9a1":"markdown"},"source":{"c6657ef0":"train_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/\"\nvalid_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\/\"\ntest_dir  = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/\"","4fec31eb":"import numpy as np\nimport cv2\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix","8129bf12":"target_size=(96,96)\nbatch_size = 16","383f1152":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","882e06a3":"valid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator = valid_datagen.flow_from_directory(\n    valid_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","85267ca1":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb', \n    shuffle=False,    \n    class_mode='categorical')","2186f7d8":"num_classes = 2 # WithMask, WithoutMask\ninput_shape = (96,96,3)","de89e5c3":"# Build Model\nmodel = models.Sequential()\n# 1st Conv layer\nmodel.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same', input_shape=input_shape))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 2nd Conv layer\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 3rd Conv layer\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 4th Conv layer\nmodel.add(layers.Conv2D(96, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 5th Conv layer\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# FC layers\nmodel.add(layers.Flatten())\n#model.add(layers.Dense(1024, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(1024))\n#model.add(layers.Dropout(0.2))\n\n#model.add(layers.Dense(64, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(64))\n#model.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel.summary()","3b26a312":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam',  metrics=['accuracy'])","a28541bd":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 50","b31c7a81":"# Train Model\nmodel.fit_generator(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=valid_generator, validation_steps=STEP_SIZE_VALID) #, callbacks=[checkpoint])","0f498680":"models.save_model(model, \"facemask_cnn.h5\")","1b7253df":"score = model.evaluate_generator(test_generator, steps=STEP_SIZE_TEST)\nprint(score)","da1b68e0":"predY=model.predict_generator(test_generator)\ny_pred = np.argmax(predY,axis=1)\n#y_label= [labels[k] for k in y_pred]\ny_actual = test_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","de0b18c0":"# report\nlabels = ['withMask', 'withoutMask']\nprint(classification_report(y_actual, y_pred, target_names=labels))","92e6b1d4":"## Save Model","33cae845":"## Train Model","2b3684d7":"## Build Model","7a27fef9":"## Data Augmentation","0a46256f":"## Evaluate Model","2009a5bc":"# FaceMask Image Classification\n### withMask, withoutMask","e4b56086":"## Confusion Matrix","28b6b9a1":"## [Face Mask 12K images Dataset](https:\/\/www.kaggle.com\/ashishjangra27\/face-mask-12k-images-dataset)\n![image.png](attachment:image.png)"}}