{"cell_type":{"39e2d94a":"code","de6c0e66":"code","3251ac76":"code","dac200e2":"code","57292a7f":"code","5d9f8aaf":"code","184d1c0d":"code","5c03eac7":"code","5578589c":"code","0c70402b":"code","33a2ebd6":"code","1b8fa418":"code","142e2215":"code","6d000621":"code","70e2950c":"code","79403d08":"code","87cdc084":"code","0f186a63":"code","e4eba064":"markdown","b063b7b6":"markdown","d96f0df0":"markdown","9dfccad8":"markdown","2bbb5e10":"markdown","75cc299a":"markdown","d8878645":"markdown","862365f5":"markdown","dd067bd8":"markdown","ca37b9fb":"markdown"},"source":{"39e2d94a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","de6c0e66":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n","3251ac76":"veri = pd.read_csv('..\/input\/data.csv')","dac200e2":"veri.head()","57292a7f":"veri.drop([\"Unnamed: 32\", \"id\"], axis=1, inplace= True)","5d9f8aaf":"M = veri[veri.diagnosis == \"M\"]\nB = veri[veri.diagnosis == \"B\"]\n\nplt.scatter(M.radius_mean,M.texture_mean,color=\"red\",label=\"kotu\",alpha=0.3)\nplt.scatter(B.radius_mean,B.texture_mean,color=\"green\",label=\"iyi\",alpha=0.3)\nplt.xlabel(\"radius_mean\")\nplt.ylabel(\"texture_mean\")\nplt.legend()\nplt.show()","184d1c0d":"veri.head()\n","5c03eac7":"veri.diagnosis = [1 if each == \"M\" else 0 for each in veri.diagnosis]","5578589c":"y = veri.diagnosis.values\nx_data = veri.drop([\"diagnosis\"],axis=1)","0c70402b":"x = (x_data - np.min(x_data))\/(np.max(x_data) - np.min(x_data)).values","33a2ebd6":"x.head()","1b8fa418":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\nx_train, x_validate, y_train, y_validate = train_test_split(x_train,y_train,test_size=0.25, random_state=42)","142e2215":"x_train.head()","6d000621":"x_test.head()","70e2950c":"print(\"x_train: \",x_train.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_test: \",y_test.shape)\nprint(\"x_validate: \",x_test.shape)\nprint(\"y_validate: \",y_test.shape)","79403d08":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)","87cdc084":"y_pred = nb.predict(x_test)\nprint(\"Tahmin Edilen Deger: \",y_pred)","0f186a63":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nprint(\"Confussion Matrisi: \",confusion_matrix(y_test, y_pred))\nprint(\"Dogruluk oran\u0131: \",metrics.accuracy_score(y_test,y_pred))\nprint(\"f1 Score(macro): \",f1_score(y_test, y_pred, average='macro'))\nprint(\"f1 Score(micro): \",f1_score(y_test, y_pred, average='micro'))\nprint(\"f1 Score(Agirliklandirilmis): \",f1_score(y_test, y_pred, average='weighted'))\nprint(\"Kesinlik De\u011feri(macro): \",precision_score(y_test, y_pred, average='macro'))\nprint(\"Kesinlik De\u011feri(micro): \",precision_score(y_test, y_pred, average='micro'))\nprint(\"Kesinlik De\u011feri(Agirliklandirilmis): \",precision_score(y_test, y_pred, average='weighted'))\n","e4eba064":"Veri Setini y\u00fckledi\u011fimizde unnamed32 ad\u0131ndaki feature'in sadece NaN de\u011ferlerini i\u00e7erdi\u011fini g\u00f6r\u00fcyoruz, bu nedenle bu feature'i veri setinden \u00e7\u0131kartabiliriz, benzer \u015fekilde id isimli feature'da \u00f6rneklerin id'sini tutuyor. Yap\u0131lacak analizde id'ye ihtiya\u00e7 olmad\u0131\u011f\u0131ndan bu feature'da \u00e7\u0131kart\u0131yoruz.","b063b7b6":"Bu iki feature \u00e7\u0131kar\u0131ld\u0131 ve veriseti bu \u015fekilde g\u00fcncellendi.","d96f0df0":"G\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere t\u00fcm de\u011ferler 0 ile 1 aral\u0131\u011f\u0131na normalize edildi.","9dfccad8":"1. train_test_split fonksiyonu verisetini random olarak train ve test olarak b\u00f6lmektedir. Yani %60 lik train b\u00f6l\u00fcm\u00fc verisetinin ba\u015f\u0131ndan itibaren %60 l\u0131k b\u00f6l\u00fcm de\u011fildir. T\u00fcm veri i\u00e7erisinde %60'a tekab\u00fcl eden miktard\u0131r. random_state=42 ifadesi ise bu fonksiyonun her \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda ayn\u0131 %60 ve %20 lik b\u00f6l\u00fcmlerin kullan\u0131lmas\u0131n\u0131 sa\u011fl\u0131yor. Bu sayede yap\u0131lan \u00e7al\u0131\u015fma farkl\u0131 ki\u015filer taraf\u0131ndan farkl\u0131 zamanlarda \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda ayn\u0131 \u00e7\u0131kt\u0131lar\u0131 \u00fcretiyor. 42 ifadesi ise Bir Otostop\u00e7unun Galaksi Rehberi kitab\u0131nda hayat\u0131n anlam\u0131 olarak ge\u00e7en say\u0131. 42 yerine 20, 19 da kullan\u0131labilir.","2bbb5e10":"y eksenine diagnosis de\u011ferleri y\u00fcklendi. x eksenine ise diagnosis d\u0131\u015f\u0131ndaki di\u011fer t\u00fcm veriler y\u00fcklendi","75cc299a":"Normalizasyon : veri seti i\u00e7erisinde baz\u0131 feature de\u011ferleri \u00e7ok y\u00fcksek oldu\u011fundan d\u00fc\u015f\u00fck de\u011ferlerdeki feature lar\u0131n etkinli\u011fini bask\u0131layaca\u011f\u0131 i\u00e7in olu\u015fturulan model sa\u011fl\u0131kl\u0131 olmayacakt\u0131r.\nbunu ger\u00e7ekle\u015ftirmek i\u00e7in veriseti normalize edilir.","d8878645":"Bu \u00e7al\u0131\u015fma DATAI Team'a ait Machine Learning E\u011fitiminde anlat\u0131lan \u00f6rnek projenin uygulamas\u0131d\u0131r.\nVeriSeti : https:\/\/archive.ics.uci.edu\/ml\/datasets\/Breast+Cancer+Wisconsin+(Diagnostic) sitesinden al\u0131nm\u0131\u015ft\u0131r","862365f5":"Veri seti train ve test olarak ayr\u0131ld\u0131. %60 train %20 test ve %20 validate olarak ayr\u0131ld\u0131. Bunun i\u00e7in train_test_split fonksiyonu kullan\u0131ld\u0131","dd067bd8":"Veri seti i\u00e7erisinde diagnosis feature da yer alan de\u011ferler M ve B \u015feklinde oldu\u011fundan bu de\u011ferleri 1 ve 0 a \u00e7evirerek object olan veri tipini numerik bir degere donusturuldu. \nM ifadesi tumorun k\u00f6t\u00fc huylu oldu\u011funu B ise iyi huylu oldu\u011funu belirtiyor. Veri setindeki M ler 1 B ler 0 yap\u0131ld\u0131. M:Malignant (K\u00f6t\u00fc huylu t\u00fcm\u00f6r) B:benign (\u0130yi huylu t\u00fcm\u00f6r)","ca37b9fb":"SkitLearn k\u00fct\u00fcphanesinden Naive Bayes Algoritmas\u0131n\u0131 \u00e7a\u011f\u0131rarak x_train  ve y_train de\u011ferleri ile algoritma e\u011fitilir."}}