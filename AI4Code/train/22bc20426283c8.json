{"cell_type":{"905029b0":"code","ce002ee7":"code","42c242ef":"code","4b79cbb0":"code","390cba2d":"code","7c855be3":"code","ebce67cf":"code","0764e7e1":"code","b72d0920":"code","e0ed011c":"code","dcff118b":"code","ded83103":"code","ce1a568a":"code","b58d9867":"code","e2276803":"code","acfed6a7":"code","013d70fa":"code","b3110e7b":"code","0bfe7d2c":"code","64ea2c10":"code","f99e36ec":"code","78c0e650":"code","53c42ff4":"code","ec49d4a6":"code","7bf9da1c":"markdown","25ff9a77":"markdown","413cea3a":"markdown","92195c02":"markdown","ef9c9acc":"markdown","8f3dc231":"markdown","7cbc0385":"markdown"},"source":{"905029b0":"import numpy as np\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns","ce002ee7":"timeSeriesConfirmed = pd.read_csv('..\/input\/covid19\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ntimeSeriesConfirmed","42c242ef":"timeSeriesConfirmed = timeSeriesConfirmed.drop(columns = ['Lat', 'Long'])\ntimeSeriesConfirmed = timeSeriesConfirmed.groupby('Country\/Region').sum().reset_index()\ntimeSeriesConfirmed = timeSeriesConfirmed.rename(columns = {'Country\/Region':'Country'})\ntimeSeriesConfirmed","4b79cbb0":"timeSeriesDailyNew = timeSeriesConfirmed.copy()\n\nfor i in range(len(timeSeriesDailyNew.columns)-2):\n    timeSeriesDailyNew.iloc[:,-1-i] = timeSeriesDailyNew.iloc[:,-1-i] - timeSeriesDailyNew.iloc[:,-2-i]\n    \nfor col in timeSeriesDailyNew.columns:\n    if col != 'Country' :\n        timeSeriesDailyNew[col] = pd.to_numeric(timeSeriesDailyNew[col])\n            \ntimeSeriesDailyNew","390cba2d":"plt.figure(figsize=(12,4))\ntimeSeriesDailyNew[timeSeriesDailyNew.Country == 'US'].iloc[0][1:].plot(kind = 'line')\nplt.xlabel(\"Day #\")\nplt.ylabel(\"Daily New Cases\")","7c855be3":"plt.figure(figsize=(10,5))\nplt.plot(list(np.linspace(1,14,14)), list(timeSeriesDailyNew[timeSeriesDailyNew.Country == 'US'].iloc[0][56:70].values))","ebce67cf":"plt.figure(figsize=(10,5))\npoly = np.polyfit(list(np.linspace(1,14,14)), list(timeSeriesDailyNew[timeSeriesDailyNew.Country == 'US'].iloc[0][56:70].values), 2)\nxp = np.linspace(1,14,200)\nplt.plot(list(np.linspace(1,14,14)), list(timeSeriesDailyNew[timeSeriesDailyNew.Country == 'US'].iloc[0][56:70].values))\nplt.plot(xp, np.polyval(poly,xp), 'r--')","0764e7e1":"def toPolyRegression(country, nDays):\n    timeSeriesCountry = timeSeriesDailyNew[timeSeriesDailyNew.Country == country]\n    daysIntervalnDays = []\n    i = 0\n    while True:\n        try:\n            daysIntervalnDays.append((((i)*nDays), np.polyfit(list(np.linspace((i)*nDays,(i+1)*nDays,nDays)), list(timeSeriesCountry.iloc[0][1 + (i*nDays) : nDays + 1 + (i*nDays)].values), 2)))\n            i = i + 1\n        except:\n            break\n    return daysIntervalnDays\n\ndef toPolyRegressionAbsolute(country, nDays):\n    timeSeriesCountry = timeSeriesDailyNew[timeSeriesDailyNew.Country == country]\n    daysIntervalnDays = []\n    i = 0\n    while True:\n        try:\n            daysIntervalnDays.append((((i)*nDays), np.polyfit(list(np.linspace(1, nDays, nDays)), list(timeSeriesCountry.iloc[0][1 + (i*nDays) : nDays + 1 + (i*nDays)].values), 2)))\n            i = i + 1\n        except:\n            break\n    return daysIntervalnDays","b72d0920":"plt.figure(figsize=(4.5,3))\ncountry = 'US'\npolyUS = toPolyRegression(country, nDays = 14)\ntimeSeriesCountry = timeSeriesDailyNew[timeSeriesDailyNew.Country == country]\ntotalDays = len(timeSeriesCountry.iloc[0][1:].values)\nplt.plot(totalDays, totalDays, timeSeriesCountry.iloc[0][1:].values, 'b:')\nplt.xlim([300, 400])\nplt.xlabel(\"Day #\")\nplt.ylabel(\"Daily New Cases\")\nfor day, poly in polyUS:\n    xp = np.linspace(day, day+14 ,200)\n    plt.plot(xp, np.polyval(poly, xp), 'r-')\nplt.legend(['', 'Numeric Values','Polynimial fits'])","e0ed011c":"def polyRegressionToAB(poly) :\n    AB = []\n    for day, curve in poly:\n        AB.append(list(curve[:2]))\n    return AB\n\ndef getCoeffAccum():\n    temp = []\n    countries = list(timeSeriesDailyNew['Country'])\n    for country in countries:\n        temp = temp + polyRegressionToAB(toPolyRegressionAbsolute(country, 14))\n    return temp","dcff118b":"polyUS","ded83103":"polyRegressionToAB(polyUS)","ce1a568a":"plt.figure(figsize=(15,5))\nplt.xlim([-500, 500])\nplt.ylim([-10000, 10000])\nx = [_[0] for _ in getCoeffAccum()]\ny = [_[1] for _ in getCoeffAccum()]\nplt.scatter(x,y, marker = '.')","b58d9867":"from sklearn.cluster import AffinityPropagation\n\nclustering = AffinityPropagation(verbose = True, damping = 0.9, max_iter = 1000, random_state = 0).fit(np.array(getCoeffAccum()))\nprint('Number of clusters Formed: ', max(clustering.labels_ + 1))","e2276803":"def getClusterLabelsByCountry(counrty):\n    return clustering.predict(polyRegressionToAB(toPolyRegressionAbsolute(country, 14)))\n\ngetClusterLabelsByCountry('US')","acfed6a7":"def getIndexNGram(ng, labels):\n    indices = []\n    for i in range(len(labels) - len(ng)):\n        flag = True\n        for j in range(len(ng)):\n            if ng[j] != labels [j + i]:\n                flag = False\n        if flag:\n            indices.append(i)\n    return indices\n\ndef findProbab(ipNGram, trainingSet):\n    predFrequency = {}\n    total = 0\n    for country, labels in trainingSet.items():\n        indices = getIndexNGram(ipNGram, labels)\n        predLabels = [labels[i+len(ipNGram)] for i in indices]\n        for _ in predLabels:\n            if _ in predFrequency:\n                predFrequency[_] = predFrequency[_] + 1\n            else:\n                predFrequency[_] = 1\n    for _ in predFrequency.values():\n        total = total + _\n    predProbab = {}\n    for a,b in predFrequency.items():\n        predProbab[a] = b*100\/total\n    return predProbab","013d70fa":"countries = list(timeSeriesDailyNew['Country'])\ntrainingClusterLabels = {}\ntestingClusterLabels = {}\nlimits = (20,25)\nfor country in countries:\n    trainingClusterLabels[country] = getClusterLabelsByCountry(country)\n    testingClusterLabels[country] = getClusterLabelsByCountry(country)[limits[0]:limits[1]]","b3110e7b":"testingClusterLabels","0bfe7d2c":"findProbab(testingClusterLabels['Egypt'][-2:], trainingClusterLabels)","64ea2c10":"def plotPrediction(country, testingSet, trainingSet, nDays):\n    probabilityTable = findProbab(testingSet[country][-2:], trainingSet)\n    maxProbabilityLabel = max(probabilityTable, key = probabilityTable.get)\n    plt.figure(figsize=(4.5,3))\n    center = clustering.cluster_centers_[maxProbabilityLabel]\n    plt.plot(list(np.linspace(limits[0]*nDays,limits[1]*nDays,(limits[1]-limits[0])*nDays)), list(timeSeriesDailyNew[timeSeriesDailyNew.Country == country].iloc[0][limits[0]*nDays:limits[1]*nDays].values), 'b-')\n    plt.plot(list(np.linspace(limits[1]*nDays, (limits[1]+1)*nDays,nDays)), list(timeSeriesDailyNew[timeSeriesDailyNew.Country == country].iloc[0][limits[1]*nDays:(limits[1]+1)*nDays].values), 'g:')\n    C = timeSeriesDailyNew[timeSeriesDailyNew.Country == country].iloc[0][limits[1]*nDays]\n    poly = np.array([center[0], center[1], C])\n    xp = np.linspace(1,nDays,100)\n    plt.xlabel(\"Day #\")\n    plt.ylabel(\"Daily New Cases\")\n    plt.title((\"Prediction for: \"+ country))\n    plt.plot(np.linspace(nDays*limits[1],nDays*(limits[1]+1),100), np.polyval(poly, xp), 'r-')\n    plt.legend(['Training data', 'Actual Values', 'Predictied curve'])","f99e36ec":"plotPrediction('US', testingClusterLabels, trainingClusterLabels, 14)","78c0e650":"plotPrediction('India', testingClusterLabels, trainingClusterLabels, 14)","53c42ff4":"plotPrediction('Canada', testingClusterLabels, trainingClusterLabels, 14)","ec49d4a6":"for country in countries:\n    plotPrediction(country, testingClusterLabels, trainingClusterLabels, 14)","7bf9da1c":"# 14-day interval plot","25ff9a77":"# Fitting a curve on said Interval","413cea3a":"**Function to generate polynomial fit for n-day intervals**","92195c02":"# Calculation For Daily new cases","ef9c9acc":"# Plotting DailyNewCases for US","8f3dc231":"# Plotting combined polynomial fits in 14 day intervals ","7cbc0385":"# Attribute Alterations"}}