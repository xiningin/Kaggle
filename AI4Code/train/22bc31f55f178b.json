{"cell_type":{"bb44866f":"code","6c05d43c":"code","4aff6f2f":"code","0d02a556":"code","14a70d5e":"code","2ab5313c":"code","d664a529":"code","3070cb37":"code","f8962084":"code","b07f4da7":"code","0ab40167":"code","c78bf3d8":"code","a927f486":"code","15a68c94":"code","af1cb7e8":"code","efd032af":"code","d15c3e5c":"code","ceffab5d":"code","195d8df8":"code","56c644b4":"code","887239c1":"markdown","3abbf4d0":"markdown","aad16d45":"markdown","a7b197c1":"markdown"},"source":{"bb44866f":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6c05d43c":"!pip install openpyxl","4aff6f2f":"data_leaked = pd.read_excel('\/kaggle\/input\/air-quality-time-series-data-uci\/AirQualityUCI.xlsx')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')","0d02a556":"train[:5]","14a70d5e":"test","2ab5313c":"co = train[\"target_carbon_monoxide\"]\nbenzene = train[\"target_benzene\"]\nnox = train[\"target_nitrogen_oxides\"]\ntrain = train.drop([\"date_time\",\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\"], axis = 1)","d664a529":"test = test.drop(\"date_time\", axis = 1)","3070cb37":"train","f8962084":"test","b07f4da7":"from sklearn.linear_model import LinearRegression\nlr_co = LinearRegression()\nlr_benzene = LinearRegression()\nlr_nox = LinearRegression()","0ab40167":"lr_co.fit(train, co)\nlr_benzene.fit(train, benzene)\nlr_nox.fit(train, nox)","c78bf3d8":"co_pred = lr_co.predict(test)\nbenzene_pred = lr_benzene.predict(test)\nnox_pred = lr_nox.predict(test)","a927f486":"data_leaked","15a68c94":"#data_leaked_f = data_leaked.iloc[:7110]\ndata_leaked_f = data_leaked.iloc[7110:]\ndata_leaked_f.index = np.arange(len(data_leaked_f))\ndata_leaked_f","af1cb7e8":"#df.groupby(['Animal']).mean()\ndata_leaked_f.groupby(['NOx(GT)']).count()","efd032af":"test","d15c3e5c":"leaked_co = np.array(data_leaked_f['CO(GT)'])\nleaked_benzene = np.array(data_leaked_f['C6H6(GT)'])\nleaked_nox = np.array(data_leaked_f['NOx(GT)'])","ceffab5d":"for i in range(len(data_leaked_f)):\n    if leaked_co[i] == -200:\n        leaked_co[i] = co_pred[i]\n    if leaked_benzene[i] == -200:\n        leaked_benzene[i] = benzene_pred[i]\n    if leaked_nox[i] == -200:\n        leaked_nox[i] = nox_pred[i]","195d8df8":"output = pd.DataFrame({'date_time': pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv').date_time,\n                       'target_carbon_monoxide': leaked_co, \n                       'target_benzene': leaked_benzene, \n                       'target_nitrogen_oxides': leaked_nox})\n\noutput.to_csv('submission.csv', index = False)\noutput","56c644b4":"output.describe()","887239c1":"## Fitting leaked data","3abbf4d0":"## Linear regression ","aad16d45":"## Data loading and processing","a7b197c1":"# Notes: \n## This notebook is pretty much based on [this](https:\/\/www.kaggle.com\/alekseyromanovich\/leaked-data)\n## I'm pretty new to Kaggle community. I couldn't deny possible violation to the rules. Let me know if it's the case"}}