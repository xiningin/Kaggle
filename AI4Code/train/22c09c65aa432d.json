{"cell_type":{"8f0541d8":"code","c0d0d092":"code","d7abf3bb":"code","f3db7329":"code","bb6f6a0a":"code","272abdeb":"code","389177e1":"code","8b9432f5":"code","caa079fe":"code","107c8b97":"code","a2542540":"code","6445c8aa":"code","92d5f319":"code","f9afe309":"code","4ee00614":"code","7d36afd6":"code","825ca033":"code","ea66e465":"code","4e1604e8":"code","5725f25a":"code","0dff9dd9":"code","0a648db3":"code","3d5581d0":"code","4a52bb1e":"markdown"},"source":{"8f0541d8":"import cv2\nimport pandas as pd\nimport numpy as np\nimport os","c0d0d092":"labels = {}\ncount = 0\nimg_size = (150,150)\n\nfor i in os.listdir(\"..\/input\/intel-image-classification\/seg_test\/seg_test\"):\n    labels[i] = count \n    count += 1\n\nlabels","d7abf3bb":"def load_train_data():\n    \n    train_path = \"..\/input\/intel-image-classification\/seg_train\/seg_train\"\n    \n    train_images = []\n    train_labels = []\n    \n    for i in os.listdir(train_path):\n        imageList = os.listdir(train_path + \"\/\" + i)\n        for j in imageList:\n            img = cv2.imread(train_path + \"\/\" + i + \"\/\" + j)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = cv2.resize(img, img_size)\n            \n            train_images.append(img)\n            train_labels.append(labels[i])\n            \n    train_images = np.array(train_images, dtype=\"float32\")\n    train_labels = np.array(train_labels, dtype=\"float32\")\n        \n    return (train_images, train_labels)","f3db7329":"def load_test_data():\n    \n    test_path = \"..\/input\/intel-image-classification\/seg_test\/seg_test\"\n    \n    test_images = []\n    test_labels = []\n    \n    for i in os.listdir(test_path):\n        imageList = os.listdir(test_path + \"\/\" + i)\n        for j in imageList:\n            img = cv2.imread(test_path + \"\/\" + i + \"\/\" + j)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = cv2.resize(img, img_size)\n            \n            test_images.append(img)\n            test_labels.append(labels[i])\n            \n    test_images = np.array(test_images, dtype=\"float32\")\n    test_labels = np.array(test_labels, dtype=\"float32\")\n        \n    return (test_images, test_labels)","bb6f6a0a":"x_train, x_test = load_train_data()","272abdeb":"y_train, y_test = load_test_data()","389177e1":"print(\"Train : \", x_train.shape)\nprint(\"Test : \", y_train.shape)","8b9432f5":"from sklearn.utils import shuffle \n\nx_train, x_test = shuffle(x_train, x_test, random_state = 42)","caa079fe":"import matplotlib.pyplot as plt\n_, train_counts = np.unique(x_test, return_counts=True)\n_, test_counts = np.unique(y_test, return_counts=True)\npd.DataFrame({'train': train_counts,\n                    'test': test_counts}, \n             index=labels\n            ).plot.bar()\nplt.show()","107c8b97":"x_train = x_train \/ 255.\ny_train = y_train \/ 255.","a2542540":"from tensorflow.keras.utils import to_categorical\n\nx_test = to_categorical(x_test)","6445c8aa":"from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\n\nmobileNet = MobileNetV2(input_shape=(150,150,3), weights=\"imagenet\", include_top=False)","92d5f319":"for layer in mobileNet.layers:\n    layer.trainable = False","f9afe309":"from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Flatten\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf\n\nmodel = Sequential()\nmodel.add(mobileNet)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(units=len(labels), activation=\"softmax\"))","4ee00614":"from tensorflow.keras.utils import plot_model\n\nplot_model(model, show_layer_names=True, show_shapes =True, to_file='model.png', dpi=350)","7d36afd6":"model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","825ca033":"from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, CSVLogger\n\nmodel_check = ModelCheckpoint('best_model.h5', monitor='val_accuracy', verbose=0, save_best_only=True, mode='max')\n\nearly = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=5, verbose=0, mode='max', restore_best_weights=True)\n\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.001)\n\ncsv_logger = CSVLogger('train_log.csv', separator=',')","ea66e465":"hist = model.fit(x_train, x_test, epochs=50, batch_size=64, validation_split=0.2, callbacks=[model_check, early, reduce_lr, csv_logger])","4e1604e8":"bestModel = tf.keras.models.load_model(\".\/best_model.h5\")","5725f25a":"def plot_accuracy_loss(history):\n    \n    fig = plt.figure(figsize=(10,5))\n\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'],'bo--', label = \"acc\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()","0dff9dd9":"plot_accuracy_loss(hist)","0a648db3":"y_pred = bestModel.predict(y_train)\ny_pred = np.argmax(y_pred, axis=-1)","3d5581d0":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncm = confusion_matrix(y_test, y_pred)\nax = plt.axes()\nsns.heatmap(cm, annot=True, \n           annot_kws={\"size\": 10}, \n           xticklabels=labels, \n           yticklabels=labels, ax = ax)\nax.set_title('Confusion matrix')\nplt.show()","4a52bb1e":"# Prepare Model"}}