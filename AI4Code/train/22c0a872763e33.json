{"cell_type":{"c6971ef1":"code","d148f219":"code","0719d428":"code","02099f90":"code","baa7b3f9":"code","19e40856":"code","79bf6704":"code","a82bbf8f":"code","fb671768":"code","10a03b98":"code","bc262e74":"code","b8cae074":"code","25a649ea":"code","3e015658":"code","8f6a6d07":"code","8beffe4a":"code","2f72326b":"code","28d5bad5":"code","c004114c":"code","dc3513d0":"code","f918239c":"code","880dcf7f":"code","a420a69c":"code","581f720a":"code","731b73fd":"code","4dca28a0":"code","282f564f":"code","90d9486e":"code","1ac50c9b":"code","95581945":"code","099d4aa1":"code","e3dcfd6b":"code","dc382443":"code","b9d176a7":"code","6a943a6d":"code","271f9400":"code","578125f1":"code","8c2efa84":"code","99392f2c":"code","cb1aa2f2":"code","28ca33e9":"markdown","fe3d6b59":"markdown","3f0bdab9":"markdown","78bb3fb6":"markdown","34051cde":"markdown","e936107b":"markdown","7ec39d41":"markdown","c7220807":"markdown","dbcf3b66":"markdown","0557acff":"markdown","11f1b12d":"markdown","1738a6c1":"markdown","1845d8bc":"markdown","3e9ee5a4":"markdown","4996a684":"markdown","41c1a7e9":"markdown","4c5f8506":"markdown"},"source":{"c6971ef1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d148f219":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0719d428":"data = pd.read_csv('\/kaggle\/input\/daily-total-female-births-in-california-1959\/daily-total-female-births-CA.csv', parse_dates=['date'], date_parser=pd.to_datetime)\nf_birth = data.copy()\nf_birth.shape","02099f90":"f_birth.head()","baa7b3f9":"f_birth.set_index('date', inplace=True)","19e40856":"f_birth.head(2)","79bf6704":"f_birth.tail(3)","a82bbf8f":"f_birth.describe()","fb671768":"# let's visualize the data\nplt.figure(figsize=(12,6))\nplt.plot(data['date'], f_birth['births'])  #f_birth.plot()\nplt.title(\"Female births in 1959\")\nplt.show()","10a03b98":"# let's plot the moving average   \n# rolling is nothing, but how much rolling values you want\nf_birth_mean = f_birth.rolling(window=30).mean()","bc262e74":"plt.figure(figsize=(12,6))\nf_birth_mean.plot()\nplt.title(\"Moving Average plot\")\nplt.show()","b8cae074":"series_value = f_birth.births\nvalue = pd.DataFrame(series_value)","25a649ea":"birth_df = pd.concat([value, value.shift(1)], axis=1)\nbirth_df.head()","3e015658":"birth_df.columns = [\"actual_birth\", \"forecast_birth\"]\nbirth_df.head()","8f6a6d07":"#now let's see how is this approach and see the MSE score of it.\nfrom sklearn.metrics import mean_squared_error","8beffe4a":"#before scoring, remove that NAN value.\nbirth_test = birth_df[1:]   #take the value from 1","2f72326b":"birth_error = mean_squared_error(birth_test.actual_birth, birth_test.forecast_birth)\nbirth_error","28d5bad5":"np.sqrt(birth_error)","c004114c":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf","dc3513d0":"#plot_acf for value of Q\n#ARIMA(P,D,Q)\nplot_acf(f_birth);","f918239c":"plot_pacf(f_birth);","880dcf7f":"#let's start with ARIMA model\n#P = 2,3  AND D = 1 AND Q = 3,4\nf_birth.size","a420a69c":"#first lets create the train and test set, simply I am takinng it dummy\nbirth_train = f_birth[0:330]\nbirth_test = f_birth[330:365]","581f720a":"#import arima\nfrom statsmodels.tsa.arima_model import ARIMA\nimport warnings\nwarnings.filterwarnings(\"ignore\")","731b73fd":"birth_model = ARIMA(birth_train, order=(2,1,3))","4dca28a0":"birth_model_fit = birth_model.fit()","282f564f":"birth_model_fit.aic","90d9486e":"birth_forecast = birth_model_fit.forecast(steps=35)[0]\nbirth_forecast","1ac50c9b":"np.sqrt(mean_squared_error(birth_test, birth_forecast))","95581945":"import fbprophet\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot","099d4aa1":"df = data.copy()\ndf.columns = [\"ds\", \"y\"]\ndf.head()","e3dcfd6b":"with warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    model = fbprophet.Prophet(yearly_seasonality=True, daily_seasonality=False,\n                             changepoint_range = 0.9,\n                             changepoint_prior_scale = 0.5,\n                             seasonality_mode = \"multiplicative\")\n    \n    model.fit(df)","dc382443":"future = model.make_future_dataframe(periods=50, freq='d')\nfuture.tail()","b9d176a7":"forecast = model.predict(future)","6a943a6d":"#You can see the components as,\nforecast[[\"ds\",\"yhat\",\"yhat_lower\",\"yhat_upper\"]].tail()","271f9400":"# we can plot the forecast by help of forecast.plot() and pass our dataFrame\nfig1 = model.plot(forecast)\nfig1.show()","578125f1":"fig2 = model.plot_components(forecast)\nfig2.show()","8c2efa84":"from fbprophet.plot import plot_plotly, plot_components_plotly","99392f2c":"#let's plot the forecast\nplot_plotly(model, forecast)","cb1aa2f2":"plot_components_plotly(model, forecast)","28ca33e9":"* 1st values is out of critical limit, we can go with 2 or 3.","fe3d6b59":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. You can get a suitable dataframe that extends into the future a specified number of days using the helper method **`Prophet.make_future_dataframe`**. By default it will also include the dates from the history, so we will see the model fit as well. And Prophet also takes care of your outliers.","3f0bdab9":"**Error of 9**\n\nIf we got a only an error of 9 without any modeelling, that's nice. means if we go an build any model now the error should less then this.","78bb3fb6":"* At level 0, the actual and predicted value is same, so it gives 41, next at level 1 it is slightly related, we can go with the value as 2 or 3 and maximum by 4.","34051cde":"**Now, if you want to see the forecast components on plot, then you can use Prophet.plot_components(). It will plot the trend, yearly seasonality and weekly seasonality. If we provide holidays then, you will see them too.**","e936107b":"**One way we can predict the value is the first day what result we are getting, the same result we wil get on second day. and this can be simpy implemented as. It is simple way to predict.**","7ec39d41":"**Thank You so much.**\n\n### If you enjoyed the time series forecasting with Prophet please, upvote the notebook. It's to appeciating and feels motivating in moving ahead with data science journey and for creating the new Notebooks.","c7220807":"**we got error as 6.85 which is better then the Naive model what we create previously means we are doing a good job.** \n\n**Even better we van do, Now we will go with fbProphet and understand it**","dbcf3b66":"**ARIMA** The oredr equals to 1. what is basically, do is it try to remove trend component and seasonal comp and convert the series into stationary set. this is d=1 or d=2 can also be there.\n\nAR = p and MA = q. we have basically a ACF and PACF plot for this. which checks how well current value is corelated to prev value. when we see corelation is not present then, we go and use it's value. where corelation is there, we not use that means it is d=1 and not use that, because it creates a problem. If not present then, take that value.","0557acff":"The predict mehod wil assign each row a predicted future value which it names as `yhat`. If you pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column yhat with the forecast, as well as columns for components and uncertainty intervals.","11f1b12d":"**when you try diff order, and when you get less aic, you have to choose that**","1738a6c1":"**Now, we can see the high trend, which was not visible in above plot. Thus this is way you can crease a moving average plot of as many past values you want**","1845d8bc":"The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","3e9ee5a4":"**That's great. we are able to clearly visualize the weekly as well yearly seasonality and trend as well**\n\n**To make the more interactive plots of forecast and its components then it can be done using Plotly**","4996a684":"**We have already visualized the data above, and it is having to much variations, So, Now I will create a Phrophet instance to apply the seasonality effects for the task of daily birth forcast with Machine Learning**","41c1a7e9":"**There is lots of variation in data, we can see the peak, low point. very less trend can be observed.**\n\nseries which do not have any trend in it and has constant mean and variance then, series is stationary series, and it is important and the way we do it that to figure out the difference between current term and revious term which is known as d.","4c5f8506":"## FbProphet\nThe library requires the name of datetime and values column name as ds and y. so we will reame it. "}}