{"cell_type":{"e1acb78f":"code","fc55dc63":"code","33525505":"code","5b9f5b2d":"code","9be1905e":"code","1dbb1fde":"code","4ca504df":"code","b818d30b":"code","6ce149b1":"code","a2d4efe5":"code","d919b51c":"code","01176d17":"code","bee65f46":"code","7dd7d9d5":"code","6073409f":"code","5e9e6d35":"code","31eecb67":"code","18ad9a8c":"code","670a1f19":"code","5b78fe3a":"code","8e9ece59":"code","3b4ca87f":"code","1550d8cd":"code","10ad01a7":"code","fccd4cb4":"code","d069481e":"code","06b99515":"code","d3f168d3":"code","bf38aba6":"code","c0e114e2":"code","8c6620ac":"code","03d03b95":"code","67b05342":"code","42258143":"code","48ba78d4":"code","45a914bc":"code","f9d2710f":"code","d2c830d0":"code","a52358c0":"code","a3604b53":"code","65990b1e":"code","4f6dc3a9":"code","3ef8d0c0":"code","a7645ff2":"code","e92141aa":"code","2d9fac32":"code","8f3047d6":"code","d5d6beaf":"markdown","7350800a":"markdown","048d0767":"markdown","0b808103":"markdown","11b0bd13":"markdown","c93e87fd":"markdown","66173c1d":"markdown","a4ea928d":"markdown","2b8b408d":"markdown","39d246ae":"markdown","6244b8df":"markdown","b161456d":"markdown","cac241f0":"markdown","ced3dbf7":"markdown","c1b08e67":"markdown","714ba2e5":"markdown","c78bdd29":"markdown","921af2fe":"markdown"},"source":{"e1acb78f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fc55dc63":"import matplotlib.pyplot as plt\nimport plotly as py\nimport cufflinks as cf\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport math\nimport pandas_profiling\nfrom pandas_profiling import ProfileReport\nfrom plotly.colors import n_colors\n\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","33525505":"# load dataset\nallmovies = pd.read_csv('..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')","5b9f5b2d":"allmovies","9be1905e":"pandas_profiling.ProfileReport(allmovies)","1dbb1fde":"allmovies.info()","4ca504df":"allmovies.isna().sum()","b818d30b":"ottmovies = allmovies.drop(['Unnamed: 0', 'ID', 'Type'], axis=1)","6ce149b1":"ottmovies.dtypes","a2d4efe5":"ottmovies.mean()","d919b51c":"ottmovies.update(ottmovies[['Age']].fillna('all'))\nottmovies.update(ottmovies[['Directors', 'Genres', 'Country', 'Language']].fillna('Others'))\nottmovies.update(ottmovies[['Runtime']].fillna(93))\nottmovies.update(ottmovies[['IMDb']].fillna(5.91))\nottmovies.update(ottmovies[['Rotten Tomatoes']].fillna('50%'))\nottmovies","01176d17":"ottmovies.isna().sum()","bee65f46":"ottmovies.info()","7dd7d9d5":"ottmovies['IMDb'].value_counts()","6073409f":"def round_val(data):\n    if int(data) != 'nan':\n        return round(data)\n    \nottmovies['IMDB'] = ottmovies['IMDb'].apply(round_val)","5e9e6d35":"values = ottmovies['IMDB'].value_counts().sort_index(ascending=True).tolist()\nindex = ottmovies['IMDB'].value_counts().sort_index(ascending=True).index","31eecb67":"values,index","18ad9a8c":"fig = px.bar(x=index, y=values, height = 400, color = index, \n            labels = { 'x' : 'IMDB rating', 'y' : 'Number of movies'})\nfig.show()","670a1f19":"def val_sum(r,c):\n    return ottmovies[c].sum(axis=0)","5b78fe3a":"ott_counts = []\nrow = [ottmovies]\ncol = ['Netflix', 'Hulu', 'Prime Video', 'Disney+']\n\nfor x in row:\n    for y in col:\n        ott_counts.append(val_sum(x,y))","8e9ece59":"ott_counts","3b4ca87f":"labels = ['Netflix', 'Hulu', 'Prime Video', 'Disney+']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=ott_counts, hole=.4)])\nfig.update_layout(title_text = 'Number of movies present in all platform')\nfig.show()","1550d8cd":"def splitting(dataframe, col):\n    result = dataframe[col].str.get_dummies(',')\n    return result\n\nunique_genres = splitting(ottmovies, 'Genres')\nunique_lang = splitting(ottmovies, 'Language')","10ad01a7":"newmovies = pd.concat([ottmovies, unique_genres], axis = 1)\nnewmovies","fccd4cb4":"len(ottmovies['Title'].unique())","d069481e":"def val_sum(r,c):\n    return unique_genres[c].sum(axis=0)","06b99515":"unique_counts = []\nrow = [unique_genres]\ncol = [unique_genres.columns]\n\nfor x in row:\n    for y in col:\n        unique_counts.append(val_sum(x,y))","d3f168d3":"unique_genres.sum()","bf38aba6":"plt.figure(figsize = (20, 10))\nunique_genres.sum().plot(kind=\"bar\")\nplt.ylabel('Genres')\nplt.xlabel('Total number of movies')\nplt.title('Movies and its genres')\nplt.show()","c0e114e2":"long_runtime_movies = newmovies.sort_values('Runtime', ascending=False).head(20)\n\nfig = px.bar(long_runtime_movies, x='Title', y='Runtime', color = 'Runtime', height = 600, \n             title = 'Top 20 long runtime movies')\nfig.show()","8c6620ac":"movies_by_year = newmovies.groupby('Year')['Title'].count().reset_index().rename(columns = {\n    'Title' : 'Number of movies'\n     })\n\nfig = px.bar(movies_by_year, y = 'Year', x = 'Number of movies', color = 'Number of movies', orientation = 'h', \n             title = '1900 to 2020 total number of movies')\nfig.show()","03d03b95":"def sunburst(dataframe, platform, c):\n    dataframe = dataframe.loc[dataframe[platform] == 1]\n    dataframe = dataframe.sort_values('IMDb', ascending = False)\n    rating = dataframe[0:20]\n    fig = px.sunburst(\n    rating, path = ['Title', 'Genres'],\n    values = 'IMDb', color = 'IMDb',\n    color_continuous_scale=c )\n    fig.show()","67b05342":"sunburst(ottmovies, 'Netflix', 'twilight')","42258143":"sunburst(ottmovies, 'Hulu', 'fall')","48ba78d4":"sunburst(ottmovies, 'Prime Video', 'hot')","45a914bc":"sunburst(ottmovies, 'Disney+', 'greens')","f9d2710f":"top_20 = ottmovies.groupby('Country')['Title'].count().reset_index().rename(columns = {'Title':'Number_of_Movies'}).sort_values('Number_of_Movies',ascending = False).head(20)\nfig = px.bar(top_20, x='Country', y='Number_of_Movies', color='Number_of_Movies', height=700,\n            title = 'Total number of movies based on country')\nfig.show()","d2c830d0":"lang_merged = pd.concat([ottmovies, unique_lang], axis = 1, sort = False)\ngenre_merged = pd.concat([ottmovies, unique_genres], axis = 1, sort = False)","a52358c0":"def bar(dataframe,platform,c):\n    dataframe=dataframe.loc[dataframe[platform] == 1]\n    val_counts = dataframe.iloc[:,15:].sum(axis=0).sort_values(ascending=False)\n    val_counts2 = pd.DataFrame(val_counts,columns=['Number of movies'])\n    return val_counts2[0:20].style.bar(subset=[\"Number of movies\",], color=c)","a3604b53":"bar(lang_merged, 'Netflix', '#636EFA')","65990b1e":"bar(genre_merged, 'Netflix', '#EF553B')","4f6dc3a9":"bar(lang_merged, 'Prime Video','#00CC96' )","3ef8d0c0":"bar(genre_merged, 'Prime Video','#AB63FA' )","a7645ff2":"bar(lang_merged, 'Hulu', '#FFA15A')","e92141aa":"bar(genre_merged, 'Hulu', '#19D3F3')","2d9fac32":"bar(lang_merged, 'Disney+', '#FF6692')","8f3047d6":"bar(genre_merged, 'Disney+', '#B6E880')","d5d6beaf":"# Netflix top 20 movies","7350800a":"# Disney+ top 20 movies","048d0767":"**Replacing NaN Values by other values**","0b808103":"***United states only the country releasing high number of movies***","11b0bd13":"**Import necessary libararies**","c93e87fd":"# Total Number of movies based on genre and language in all the platforms","66173c1d":"# **Movies based by IMDB rating**","a4ea928d":"* ***Year 2017 most number of movies released***\n* ***Year 2020 only less number of movies released due to covid academic***","2b8b408d":"***Drama are having more number of movies***","39d246ae":"# **Overall this visualization..we suggest you to watch movies in prime video**","6244b8df":"**Removing unwanted column**","b161456d":"# Hulu top 20 movies","cac241f0":"# CLEANING THE DATA","ced3dbf7":"Detailed report of data that contains all movies in various platform using pandas profiling","c1b08e67":"***This pie chart shows that amazon prime have most number of movies***","714ba2e5":"*We can see here that average number of movies are above rating 6+ in all ott platform*","c78bdd29":"# Prime video top 20 movies","921af2fe":"# **OTT movies Recommendation in various platform (Netflix,HULU,prime,Disney+)**"}}