{"cell_type":{"03dbd7d3":"code","f1652656":"code","53501462":"code","31f66157":"code","31e36822":"code","10e66a73":"markdown","40c65726":"markdown","1771543c":"markdown"},"source":{"03dbd7d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('ggplot')        \n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1652656":"pd.set_option('display.max_columns',85)\npd.set_option('display.max_rows',85)\ndf = pd.read_csv('\/kaggle\/input\/basketball-players-stats-per-season-49-leagues\/players_stats_by_season_full_details.csv')\n#df.info()","53501462":"#Variation of number of teams in top 10 leagues\ndf['League'].value_counts()\nleague_concat_str = (','.join(df['League'])).split(',')\nleague_dict_all = Counter(league_concat_str)\nleague_top10 = league_dict_all.most_common(10)\nleague_lst = [*map(lambda x: x[0],league_top10)]\nseason_list = df['Season'].unique()\nfig,ax = plt.subplots(6,1)\nfig.set_figheight(40)\nfig.set_figwidth(15)\nfor league in league_lst:\n    team_cnt = []\n    player_cnt = []\n    three_point_cnt = []\n    point_cnt = []\n    block_cnt = []\n    foul_cnt = []\n    for season in season_list:\n        filt = ((df['League'] == league) & (df['Season'] == season))\n        team_cnt.append(len(df.loc[filt,'Team'].unique()))\n        player_cnt.append(len(df.loc[filt,'Player'].unique()))\n        three_point_cnt.append(len(df.loc[filt,'3PM'].unique()))\n        point_cnt.append(df.loc[filt,'PTS'].sum())\n        block_cnt.append(df.loc[filt,'BLK'].sum())\n        foul_cnt.append(df.loc[filt,'PF'].sum())\n    ax[0].plot(season_list,team_cnt,label=league,linewidth=2,alpha=1,marker='.')\n    ax[1].plot(season_list,player_cnt,label=league,linewidth=2,alpha=1,marker='.')\n    ax[2].plot(season_list,three_point_cnt,label=league,linewidth=2,alpha=1,marker='.')\n    ax[3].plot(season_list,point_cnt,label=league,linewidth=2,alpha=1,marker='.')\n    ax[4].plot(season_list,block_cnt,label=league,linewidth=2,alpha=1,marker='.')\n    ax[5].plot(season_list,foul_cnt,label=league,linewidth=2,alpha=1,marker='.')\nax[0].set_title('Number of teams in Top10 leagues over the years')\nax[0].set_xlabel('Seasons')\nax[0].set_ylabel('Counts')\nax[0].set_xticklabels(labels = season_list,rotation=90)\nax[0].legend()\nax[1].set_title('Number of players in Top10 leagues over the years')\nax[1].set_xlabel('Seasons')\nax[1].set_ylabel('Counts')\nax[1].set_xticklabels(labels = season_list,rotation=90)\nax[1].legend()\nax[2].set_title('Number of successful 3 pointers  in Top10 leagues over the years')\nax[2].set_xlabel('Seasons')\nax[2].set_ylabel('Counts')\nax[2].set_xticklabels(labels = season_list,rotation=90)\nax[2].legend()\nax[3].set_title('Nubmber of points scored in Top10 leagues over the years')\nax[3].set_xlabel('Seasons')\nax[3].set_ylabel('Counts')\nax[3].set_xticklabels(labels = season_list,rotation=90)\nax[3].legend()\nax[4].set_title('Number of blocks performed in Top10 leagues over the years')\nax[4].set_xlabel('Seasons')\nax[4].set_ylabel('Counts')\nax[4].set_xticklabels(labels = season_list,rotation=90)\nax[4].legend()\nax[5].set_title('Number of personal fouls occured in Top10 leagues over the years')\nax[5].set_xlabel('Seasons')\nax[5].set_ylabel('Counts')\nax[5].set_xticklabels(labels = season_list,rotation=90)\nax[5].legend()\nplt.tight_layout()\nplt.show()","31f66157":"#Variation of points\/3pointers\/fouls\/block scored by a team over the years.\n#Set the team name to see a perticular team stats\nteam = 'MIA'\nthree_point_cnt = []\npoint_cnt = []\nblock_cnt = []\nfoul_cnt = []\nfig,ax = plt.subplots(4,1)\nfig.set_figheight(20)\nfig.set_figwidth(10)\nfor season in season_list:\n    filt = ((df['Team'] == team) & (df['Season'] == season))\n    three_point_cnt.append(df.loc[filt,'3PM'].sum())\n    point_cnt.append(df.loc[filt,'FGM'].sum())\n    block_cnt.append(df.loc[filt,'BLK'].sum())\n    foul_cnt.append(df.loc[filt,'PF'].sum())\nax[0].plot(season_list,three_point_cnt)\nax[0].set_xlabel('Seasons')\nax[0].set_ylabel('Three pointers count')\nax[0].set_xticklabels(labels = season_list,rotation=90)\nax[0].set_title('Plot for three pointers scored by {}'.format(team))\nax[1].plot(season_list,point_cnt)\nax[1].set_xlabel('Seasons')\nax[1].set_ylabel('Points count')\nax[1].set_xticklabels(labels = season_list,rotation=90)\nax[1].set_title('Plot for total points scored by {}'.format(team))\nax[2].plot(season_list,block_cnt)\nax[2].set_xlabel('Seasons')\nax[2].set_ylabel('Blocks count')\nax[2].set_xticklabels(labels = season_list,rotation=90)\nax[2].set_title('Plot for blocks done by {}'.format(team))\nax[3].plot(season_list,foul_cnt)\nax[3].set_xlabel('Seasons')\nax[3].set_ylabel('Fouls count')\nax[3].set_xticklabels(labels = season_list,rotation=90)\nax[3].set_title('Plot for fouls by by {}'.format(team))\nplt.tight_layout()\nplt.show()\ndf.head()","31e36822":"team_list = ['OKC','MIA','LAL']\n","10e66a73":"# # Individual team level analytics\n**Set 'team' variable to get desired team plots**","40c65726":"# League level analytics\n1. Variation of total number of teams,players,points,3 pointers in Top 10 Leagues with seasons.\n\n","1771543c":"# Team level analytics\n**Place 3 team names in team_list to campare their stats**"}}