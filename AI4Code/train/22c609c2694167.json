{"cell_type":{"8586b014":"code","8d77e8e3":"code","2d2263b9":"code","9f19a01c":"code","d7c6bdb7":"code","ba83833a":"code","3c0bb20b":"code","d3ef4f92":"code","f392a610":"code","295789b0":"code","767ef55b":"code","72a1f2a8":"code","89b614ca":"code","ee9a4c1e":"code","183629d5":"code","1e47f576":"code","6434b626":"code","8b2a81d2":"code","88e9eaae":"code","bb844896":"markdown","4ac2d23a":"markdown","27facb46":"markdown","d187e1fc":"markdown","59f1dd53":"markdown","80f1aef8":"markdown","bd740e66":"markdown","3aeecbdc":"markdown","ed4f1b61":"markdown"},"source":{"8586b014":"import pandas as pd\nimport numpy as np\nimport time as time\nimport lightgbm\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\nimport catboost\nimport xgboost","8d77e8e3":"directory = '\/kaggle\/input\/tabular-playground-series-jun-2021\/'\ntrain = pd.read_csv(directory + 'train.csv')\ntest = pd.read_csv(directory + 'test.csv')\nsubmission = pd.read_csv(directory + 'sample_submission.csv')\ntrain, test, submission = train.set_index('id'), test.set_index('id'), submission.set_index('id')\ntrain.sample(3)","2d2263b9":"print(train['target'].value_counts())\nsns.histplot(train['target'])","9f19a01c":"labels = [int(x[-1]) for x in train['target'].values]\nX_train, X_valid, y_train, y_valid = train_test_split(train.drop('target', axis=1).values, labels, shuffle=True, test_size=0.3, random_state=2021)","d7c6bdb7":"start = time.time()\nlgb = lightgbm.LGBMClassifier()\nlgb.fit(X_train, y_train)\nlgb_pred = lgb.predict_proba(X_valid)\nlgb_base_score = log_loss(y_valid, lgb_pred)\nend = time.time()\nprint(f\"lightgbm scored {lgb_base_score} in {end-start} seconds\")","ba83833a":"fig_dims = (20, 20)\nfig, ax = plt.subplots(figsize=fig_dims)\nlightgbm.plot_importance(lgb, ax=ax)","3c0bb20b":"important_features_lgb = list(lgb.feature_importances_)\nfeatures = list(train.drop('target', axis=1).columns)","d3ef4f92":"times = []\nscores = []\nnum_features_counts = []\nfor num_features in tqdm(range(29, 75, 5)):\n    num_features_counts.append(num_features)\n    feature_names = features.copy()\n    features_copy = important_features_lgb.copy()\n    important_features = []\n    for num in range(num_features):\n        important_feature = feature_names[features_copy.index(max(features_copy))]\n        features_copy[features_copy.index(max(features_copy))] = -100\n        important_features.append(important_feature)\n    condensed_train = train[important_features]\n    X_train, X_valid = train_test_split(condensed_train.values, shuffle=True, test_size=0.3, random_state=2021)\n    start = time.time()\n    lgb = lightgbm.LGBMClassifier()\n    lgb.fit(X_train, y_train)\n    lgb_pred = lgb.predict_proba(X_valid)\n    lgb_base_score = log_loss(y_valid, lgb_pred)\n    end = time.time()\n    times.append(end-start)\n    scores.append(lgb_base_score)","f392a610":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=times, y=scores, ax=ax)\nax1.set(xlabel='times', ylabel='scores')\nplt.show()","295789b0":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=scores, ax=ax)\nax1.set(xlabel='number of features', ylabel='scores')\nplt.show()","767ef55b":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=times, ax=ax)\nax1.set(xlabel='number of features', ylabel='times')\nplt.show()","72a1f2a8":"times = []\nscores = []\nnum_features_counts = []\nfor num_features in tqdm(range(29, 75, 5)):\n    num_features_counts.append(num_features)\n    feature_names = features.copy()\n    features_copy = important_features_lgb.copy()\n    important_features = []\n    for num in range(num_features):\n        important_feature = feature_names[features_copy.index(max(features_copy))]\n        features_copy[features_copy.index(max(features_copy))] = -100\n        important_features.append(important_feature)\n    condensed_train = train[important_features]\n    X_train, X_valid = train_test_split(condensed_train.values, shuffle=True, test_size=0.3, random_state=2021)\n    start = time.time()\n    ctb = catboost.CatBoostClassifier()\n    ctb.fit(X_train, y_train, verbose=False)\n    ctb_pred = ctb.predict_proba(X_valid)\n    ctb_base_score = log_loss(y_valid, ctb_pred)\n    end = time.time()\n    times.append(end-start)\n    scores.append(ctb_base_score)","89b614ca":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=times, y=scores, ax=ax)\nax1.set(xlabel='times', ylabel='scores')\nplt.show()","ee9a4c1e":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=scores, ax=ax)\nax1.set(xlabel='number of features', ylabel='scores')\nplt.show()","183629d5":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=times, ax=ax)\nax1.set(xlabel='number of features', ylabel='times')\nplt.show()","1e47f576":"times = []\nscores = []\nnum_features_counts = []\nfor num_features in tqdm(range(29, 75, 5)):\n    num_features_counts.append(num_features)\n    feature_names = features.copy()\n    features_copy = important_features_lgb.copy()\n    important_features = []\n    for num in range(num_features):\n        important_feature = feature_names[features_copy.index(max(features_copy))]\n        features_copy[features_copy.index(max(features_copy))] = -100\n        important_features.append(important_feature)\n    condensed_train = train[important_features]\n    X_train, X_valid = train_test_split(condensed_train.values, shuffle=True, test_size=0.3, random_state=2021)\n    start = time.time()\n    xgb = xgboost.XGBClassifier()\n    xgb.fit(X_train, y_train, verbose=False)\n    xgb_pred = xgb.predict_proba(X_valid)\n    xgb_base_score = log_loss(y_valid, xgb_pred)\n    end = time.time()\n    times.append(end-start)\n    scores.append(xgb_base_score)","6434b626":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=times, y=scores, ax=ax)\nax1.set(xlabel='times', ylabel='scores')\nplt.show()","8b2a81d2":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=scores, ax=ax)\nax1.set(xlabel='number of features', ylabel='scores')\nplt.show()","88e9eaae":"fig_dims = (10, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nax1 = sns.lineplot(x=num_features_counts, y=times, ax=ax)\nax1.set(xlabel='number of features', ylabel='times')\nplt.show()","bb844896":"The following three plots plot the times, scores, and amount of features against one another. ","4ac2d23a":"The main conclusion I can draw from this is that for models like xgboost and catboost, the amount of features used in the dataset heavily increases time for training the model. Perhaps for optimizing the parameters of xgboost or catboost, you can use less features and once you have good parameters, use all the features. I apologize for not adding any infrence and I want to create one for infrence later.","27facb46":"The following code gets the scores and time consumption for training a lightgbm on x features.The minimum amount of features is 29, and the maximum is 74, with increments of 5 after each iteration.","d187e1fc":"With the following plot, we can see that class 6 and 8 are the most frequent in the training set by a large margin. Classes 1, 4, and 5 are very infrequent. ","59f1dd53":"converting the string labels to integers and preparing the data for machine learning:","80f1aef8":"catboost is a significantly slower model and to run cv, or optuna optimization on it, using all the features could take an incredibly large amount of time. The following does the same for xgboost.","bd740e66":"With the trained lightgbm, we can find out which features are the most important and which can be dropped. Lightgbm also allows you to plot the feature importance using seaborn:","3aeecbdc":"For lightgbm, a very quick model, using all the features is probably ok because it finishes quite quickly. The following code does the same but for catboost.","ed4f1b61":"Because there are so many features in the data, time consumption could be a factor in parameter optimization and cv. The following cell measures how long a base lightgbm model performs on all features."}}