{"cell_type":{"bc723069":"code","aacd47cb":"code","16923e20":"code","9db132e0":"code","7c07d663":"code","7b3e5d8f":"code","6a6b395a":"code","50d54ce8":"code","422da534":"code","8844f91b":"code","3ffeb441":"code","1e59cb04":"code","8f2f9e00":"code","ac90f7e5":"code","b764238f":"code","55c40763":"code","08d61375":"code","ba5fc589":"code","56075679":"code","de5f2ac1":"code","408445f6":"code","9ee7b4dc":"code","7a65063f":"markdown","3df8f4e3":"markdown","cb39961f":"markdown","b296e342":"markdown","4f5587a2":"markdown","2133ab91":"markdown","6ffd96d0":"markdown","895edd9e":"markdown","249f3b00":"markdown","a32600b1":"markdown","04dd3477":"markdown","43bb6d4a":"markdown","b9c4ac62":"markdown","ac61c165":"markdown","9778360c":"markdown"},"source":{"bc723069":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aacd47cb":"pd.set_option('display.max_rows',None)\npd.set_option('display.max_columns',None)\npd.set_option('display.width',None)\npd.set_option('display.max_colwidth',None)","16923e20":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder","9db132e0":"housing = pd.read_csv(r\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nhousing.drop(['Id'],axis=1,inplace=True)","7c07d663":"housing.isnull().sum().sort_values(ascending=False)","7b3e5d8f":"# Replacing categorical columns with None\n'''\ncat_columns = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition']\n'''\ndf = housing\ncat_columns = df.select_dtypes(include=['object']).columns\n\nfor col in cat_columns:\n    df[col] = df[col].fillna(\"None\")\n\n#Changing LotFrontage to mean LotFrontage in the same Neighborhood\ndf['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\n#Replacing numerical column null values with 0\nnum_columns = df.select_dtypes(exclude=['object']).columns\nfor col in num_columns:\n    if col is not 'Electrical':\n        df[col] = df[col].fillna(int(0))\n\n#Replacing 'Electrical' with mode\ndf['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])\n\n#Dropping Utilities\ndf = df.drop(['Utilities'],axis=1)","6a6b395a":"#Checking the count of null values again\ndf.isnull().apply(sum).max()","50d54ce8":"df.info()","422da534":"# Removing noisy data which is above 0.999 quantile\nnum_attributes = df[num_columns]\n\nhigh_quant = df.quantile(.999)\n\nfor col in num_columns:\n    df = df.drop(df[col][df[col]>high_quant[col]].index)\n\ndf.info()","8844f91b":"# Removing highly correlated features calculated in the EDA Notebook while viewing scatter plot and corr values\n\nattributes_drop = ['MiscVal', 'MoSold', 'YrSold', 'BsmtFinSF2', 'BsmtHalfBath', 'MSSubClass', 'GarageArea',\n                  'GarageYrBlt', '3SsnPorch']\ndf.drop(attributes_drop, axis=1, inplace=True)\n\n# Removing columns with lots of missing values - PoolQC: 1453, MiscFeature: 1406, Alley: 1369, Fence: 1179\nattributes_drop = ['PoolQC', 'MiscFeature', 'Alley', 'Fence']\ndf.drop(attributes_drop, axis=1, inplace=True)","3ffeb441":"df.select_dtypes(include=['object']).columns","1e59cb04":"# Transforming Categorial variables using OneHotEncoder\ncat_encoder = OneHotEncoder()\ndf_cat_processed = cat_encoder.fit_transform(df)\ndf_cat_processed","8f2f9e00":"#Separate features and target variables\nhousing_X = df.drop('SalePrice', axis=1)\nhousing_y = df['SalePrice']\n\n# Getting list of numerical and categorical values separately\nnum_attributes = housing_X.select_dtypes(exclude=['object'])\ncat_attributes = housing_X.select_dtypes(include=['object'])\n\nnum_attribs = list(num_attributes)\ncat_attribs = list(cat_attributes)\n\n# Numerical pipeline to impute any missing values with the median and scale attributes\nnum_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('std_scaler', StandardScaler())\n])","ac90f7e5":"#Full pipeline that handles both numerical and categorical column's transformation\nfull_pipeline = ColumnTransformer([\n    (\"num\", num_pipeline, num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs)\n])\n\n# Description before applying transforms\nprint(\"housing_y:\\n\",housing_y.describe())\n\n# Applying log transformation to sales price - remember right-skewed data\nhousing_y_prepared = np.log(housing_y)\n\n# Running transformation pipeline on all other attributes\nhousing_X_prepared = full_pipeline.fit_transform(housing_X)\n\n# Description before applying transform\nprint(\"\\nhousing_y_prepared:\\n\",housing_y_prepared)\n\nhousing_X_prepared","b764238f":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","55c40763":"# Splitting train and test set\nX_train, X_test, y_train, y_test = train_test_split(housing_X_prepared, housing_y_prepared, test_size=0.2, random_state=7)","08d61375":"# Training the model on training data\n\n#Training the model on Linear Regression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluating the model\n\nprint(\"Accuracy%:\", model.score(X_test, y_test)*100)","ba5fc589":"from sklearn.metrics import mean_squared_error\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nimport xgboost\n\n# Function to invert target variable array from log scale\ndef inv_y(transformed_y):\n    return np.exp(transformed_y)\n\n# Series to collect RMSE for the different algorithms: \"algortihm name + RMSE\"\nrmse_compare = pd.Series()\nrmse_compare.index.name = \"Model\"\n\n# Series to collect the accuracy for the different algorithms: \"algorithms name + score\"\nscores_compare = pd.Series()\nscores_compare.index.name = \"Model\"\n\n# Model 1: Linear Regression =======================\nlinear_model = LinearRegression()\nlinear_model.fit(X_train, y_train)\n\nlinear_val_predictions = linear_model.predict(X_test)\nlinear_val_rmse = mean_squared_error(inv_y(linear_val_predictions), inv_y(y_test))\nlinear_val_rmse = np.sqrt(linear_val_rmse)\nrmse_compare['LinearRegression'] = linear_val_rmse\n\nlr_score = linear_model.score(X_test, y_test)*100\nscores_compare['LinearRegression'] = lr_score\n\n#Model 2: Decision Tress ===========================\ndtree_model = DecisionTreeRegressor(random_state=5)\ndtree_model.fit(X_train, y_train)\n\ndtree_val_predictions = dtree_model.predict(X_test)\ndtree_val_rmse = mean_squared_error(inv_y(dtree_val_predictions), inv_y(y_test))\ndtree_val_rmse = np.sqrt(dtree_val_rmse)\nrmse_compare['DecisionTreeRegressor'] = dtree_val_rmse\n\ndtree_score = dtree_model.score(X_test, y_test)*100\nscores_compare['DecisionTreeRegressor'] = dtree_score\n\n# Model 3: Random Forest ==========================\nrf_model = RandomForestRegressor(random_state=5)\nrf_model.fit(X_train, y_train)\n\nrf_val_predictions = rf_model.predict(X_test)\nrf_val_rmse = mean_squared_error(inv_y(rf_val_predictions), inv_y(y_test))\nrf_val_rmse = np.sqrt(rf_val_rmse)\nrmse_compare['RandomForest'] = rf_val_rmse\n\nrf_score = rf_model.score(X_test, y_test)*100\nscores_compare['RandomForest'] = rf_score\n\n\n# Model 4: Gradient Boostinf Regression ===========\ngbr_model = GradientBoostingRegressor(n_estimators=300, learning_rate=0.05, max_depth=4, random_state=5)\ngbr_model.fit(X_train, y_train)\n\ngbr_val_predictions = gbr_model.predict(X_test)\ngbr_val_rmse = mean_squared_error(inv_y(gbr_val_predictions), inv_y(y_test))\ngbr_val_rmse = np.sqrt(gbr_val_rmse)\nrmse_compare['GradientBoostingRegression'] = gbr_val_rmse\n\ngbr_score = gbr_model.score(X_test, y_test)*100\nscores_compare['GradientBoostingRegression'] = gbr_score","56075679":"print(\"RMSE values for different algorithms:\")\nrmse_compare.sort_values(ascending=True).round()","de5f2ac1":"print(\"Accuracy scores for different algorithms\")\nscores_compare.sort_values(ascending=False).round(3)","408445f6":"from sklearn.model_selection import cross_val_score\n\n# Performing K fold cross-validation, with K=10 on Linear model\nscores = cross_val_score(linear_model, X_train, y_train,\n                        scoring=\"neg_mean_squared_error\", cv=10)\nlinear_rmse_scores = np.sqrt(-scores)\n\n# Printing results\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard Deviation\", scores.std())\n    \ndisplay_scores(linear_rmse_scores)","9ee7b4dc":"from sklearn.model_selection import cross_val_score\n\n# Performing K fold cross-validation, with K=10 on Randon Forest\nscores = cross_val_score(rf_model, X_train, y_train,\n                        scoring=\"neg_mean_squared_error\", cv=10)\nrf_rmse_scores = np.sqrt(-scores)\n\n# Printing results\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard Deviation\", scores.std())\n    \ndisplay_scores(rf_rmse_scores)","7a65063f":"# 2. Fixing missing values explicitly\n","3df8f4e3":"# 6. Creating and Assessing ML Models","cb39961f":"# 3. Dealing with Outliers","b296e342":"# 5. Handling Text and Categorical Values","4f5587a2":"# a) Trial 1 with Linear Regression","2133ab91":"Conclusion from above 4 models:\n* LinearRegression and Random Forest have better accuracy than the rest but still have high RMSE. This means that either we need to improve the features or the model is underfitting.\n* Decision Tree should be able to form complex non-linear relationships but it seems that this model is overfitting the training set.\n* Random Forest works by training many decision trees on random subsets of features and then averaging the predictions. This is why the accuracy of Random Forest is higher than Decision Tree.","6ffd96d0":"# 4. Dealing with correlated attributes","895edd9e":"# Data Transformation","249f3b00":"# c) Evaluation using Cross-validation","a32600b1":"# Importing Essentials","04dd3477":"# b) Training on multiple ML models to see which fits best","43bb6d4a":"# 6.1 Conclusion 1","b9c4ac62":"# 5. Handling Text and Categorical Values","ac61c165":"RMSE (Root mean sqaure error) will be used and since we took a log of the target variable, we need to inverse it before calculating error","9778360c":"# 1. Dealing with missing values"}}