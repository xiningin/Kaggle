{"cell_type":{"165269d7":"code","21ffb13f":"code","9179fa41":"code","5d0dd406":"code","fd951774":"code","2634bdda":"code","d9d624aa":"code","578860fd":"code","544f05b0":"code","4735b6ab":"code","a7302994":"code","eaac2dc5":"code","c1c05900":"code","3b0c2936":"code","854322cc":"code","36d25474":"code","73b32c53":"code","8ac3a463":"code","80591e83":"code","d3b9adac":"code","ee78b206":"code","d57d95a3":"code","d9807c00":"code","cecfa203":"code","49c32008":"code","c338926b":"code","9132992b":"code","137d145c":"code","7078067e":"code","0f77a24a":"code","70270a27":"code","713f9b3e":"code","f06361b5":"code","9aeacabd":"code","854738b3":"code","2b791479":"code","3bb3e79d":"code","a0bdbbd2":"code","9e335e20":"code","584636c3":"code","6340a218":"code","2e7336ec":"code","0fe19dcb":"code","4ba7a342":"code","a4aa62e9":"code","03f42381":"markdown","a09ec536":"markdown","ffcf5d43":"markdown","89250fd3":"markdown","7133e5a5":"markdown","c7f5a6c2":"markdown","59a033b7":"markdown","1b7c2d3e":"markdown","60b49225":"markdown","29a7216a":"markdown","8abcf862":"markdown","2e135262":"markdown","9f4811eb":"markdown","406ca1e7":"markdown","135e0a3e":"markdown","07f65f92":"markdown","13cabb13":"markdown","66477c64":"markdown"},"source":{"165269d7":"viking_song = \"Spam \" * 4\nprint(viking_song)","21ffb13f":"#abs(x):returns absolute value of int,float,complexnum\nabs(-2),abs(3-4j)","9179fa41":"#any(iterable):takes list,string,dictionary & returns True if at least one element is True else false\nany(''),any('000')#empty iterator, 0(int) is false but '0'(string) is true","5d0dd406":"#all(iterable):if only all the elements of an iterable are true\nall(''),all([1,2,3,4])","fd951774":"#append(list)\nplanets=['a','b']\nplanets.append('pluto')\nplanets","2634bdda":"#ascii(object):It returns a string containing printable representation of an object.\nascii('Pyth\u00f6n is interesting')","d9d624aa":"#bin(num):converts an integer to binary\nbin(5)","578860fd":"#bool(val):false if val is false or null, true if True\ntest = 'Easy string'\nprint(test,'is',bool(test))","544f05b0":"#chr(integer from 0 through 1,114,111):returns a char whose unicode point is the integer\nchr(87),chr(3201)","4735b6ab":"#complex([real[,imag]]):returns a complex number\ncomplex(),complex(2,-3),complex('5-3j')","a7302994":"#delattr(obj,name):deletes name attribute from object obj\n#del obj.name:does the same task\nclass Coordinate:\n  x = 10\n  y = -5\n  z = 0\n\npoint1 = Coordinate()\nprint(point1.x,point1.y,point1.z)\ndelattr(Coordinate, 'z')\ndel Coordinate.y\n#print(point1.x,point1.y,point1.z)\n#uncomment above statement to see the change","eaac2dc5":"#dict(keywarg)     #dict(iterable,keywarg)          #dict(mapping,keywarg)\ndict(),dict(x=5, y=0) , dict([('x', 5), ('y', -5)]),dict({'x': 4, 'y': 5}, z=8)    ","c1c05900":"#dir(obj):returns a list of valid attributes\ndir([1,2,3])","3b0c2936":"#divmod(x,y):returns a tuple of quotient & remainder\ndivmod(9,2)","854322cc":"#enumerate(iterable,start):\ngrocery = ['bread', 'milk', 'butter']\n\nfor item in enumerate(grocery):\n  print(item)\n\nprint('\\n')\nfor count, item in enumerate(grocery):\n  print(count, item)\n\nprint('\\n')\n# changing default start value\nfor count, item in enumerate(grocery, 100):\n  print(count, item)","36d25474":"#filter(func,iterable):filters the given iterable with help of the function\nalphabets = ['a', 'b', 'd', 'e', 'i', 'j', 'o']\n\n# function that filters vowels\ndef filterVowels(alphabet):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    if(alphabet in vowels):\n        return True\n    else:\n        return False\n\nfilteredVowels = filter(filterVowels, alphabets)\n\nprint('The filtered vowels are:')\nfor vowel in filteredVowels:\n    print(vowel)\n    \nprint('\\n')    \n\n#filter() method also works without the filter function\nrandomList = [1, 'a', 0, False, True, '0']\n\nfilteredList = filter(None, randomList)\n\nprint('The filtered elements are:')\nfor element in filteredList:\n    print(element)","73b32c53":"#format(value[,format_spec]): returns a formatted representation of a given value specified by the format specifier\nformat(1234, \"*>+7,d\")\n\n#str.format()\nplanet='Pluto'\nposition=9\n\"{}, you'll always be the {}th planet to me.\".format(planet, position)\n","8ac3a463":"pluto_mass = 1.303 * 10**22\nearth_mass = 5.9722 * 10**24\npopulation = 52910390\n#         2 decimal points   3 decimal points, format as percent     separate with commas\n\"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} Plutonians.\".format(\n    planet, pluto_mass, pluto_mass \/ earth_mass, population,\n)","80591e83":"#help(object):returns with help LOL\nhelp(dict)","d3b9adac":"#input([prompt]):reads a line from input and converts it into a string and returns it\n#input('Enter a string:')","ee78b206":"#iter(obj,sentinel):returns an iterator for the given obj\nvowels = ['a', 'e', 'i', 'o', 'u']\nv_iter=iter(vowels)\nprint(next(v_iter))\nprint(next(v_iter))\nprint(next(v_iter))\nprint(next(v_iter))","d57d95a3":"#list([iterable]):creates a list\nprint(list())\nlist('aeiou'),list(('a','e','i','o','u')),list(['a','b','c','d','e'])","d9807c00":"#list(dictionary):creates a list with the keys of dictionary as items of the list. The order of the elements will be random when the keys are provided without values\nlist({'a', 'e', 'i', 'o', 'u'}),list({'a': 1, 'e': 2, 'i': 3, 'o':4, 'u':5})","cecfa203":"#len(s):returns the number of items of an object\nlen([]),len(''),len(range(1,10)),len(b'Python')","49c32008":"#len(dictionaries,sets)\ntestSet = {1, 2, 3}\nprint(testSet, 'length is', len(testSet))\n\n# Empty Set\ntestSet = set()\nprint(testSet, 'length is', len(testSet))\n\ntestDict = {1: 'one', 2: 'two'}\nprint(testDict, 'length is', len(testDict))\n\ntestDict = {}\nprint(testDict, 'length is', len(testDict))\n\ntestSet = {1, 2}\n# frozenSet:elements can'tbe modified\nfrozenTestSet = frozenset(testSet)\nprint(frozenTestSet, 'length is', len(frozenTestSet))","c338926b":"#max(list):\nprint(max([3,2,5,6,7,8]))\nprint(max([\"Python\", \"C Programming\", \"Java\", \"JavaScript\"]))\n#max(dictionaries):returns the largest key \nsquare = {2: 4, -3: 9, -1: 1, -2: 4}\nprint(max(square))\nprint(max(square,key=lambda k:square[k]))#returns key with largest value\n#min():similiar as max","9132992b":"#map(function,iterable,...):applies a given function to each item of an iterable and returns a list of results\n#The returned value from map() (map object) can then be passed to functions like list() (to create a list), set() (to create a set) and so on.\ndef calculateSquare(n):\n    return n*n\nnumbers = num=(1, 2, 3, 4)\nresult = map(calculateSquare, numbers)\nprint(result)\nprint(set(result))\nprint(list(map(calculateSquare, num)))","137d145c":"#next(iteartor,default):\nrandom = [5, 9, 'cat']\n# converting the list to an iterator\nrandom_iterator = iter(random)\nprint(random_iterator)\n# Output: 5\nprint(next(random_iterator))","7078067e":"#pow(x,y,x):x raised to y modulo z\npow(2,4,3),pow(4,2)","0f77a24a":"#print(*objects, sep=' ',end='\\n', file=sys.stdout, flush=False)\na = 5\nprint(\"a =\", a, sep='00000', end='\\n\\n\\n')\nprint(\"a =\", a, sep='0', end='')\n#print with file parameter\nsourceFile = open('python.txt', 'w')\nprint('Pretty cool, huh!', file = sourceFile)\nsourceFile.close()\n#This program tries to open the python.txt in writing mode. If this file doesn't exist, python.txt file is created and opened in writing mode.\n#Here, we have passed sourceFile file object to the file parameter. The string object 'Pretty cool, huh!' is printed to python.txt file (check it in your system).\n#Finally, the file is closed using close() method.","70270a27":"#range(stop):Returns a sequence of numbers starting from 0 to stop-1\n#range(start, stop[, step]):Returns a sequence of numbers starting from start to stop-1 with an increment of step\nprint(list(range(2,-14,-2)))\nprint(list(range(2,14,-2)))","713f9b3e":"#reversed(sequence)\nseq_string = 'Python'\nprint(list(reversed(seq_string)))","f06361b5":"#round(number,ndigits):return a float rounded to n_digits\nprint(round(10.7))\nprint(round(2.665, 2))\nprint(round(2.675, 2))\n#Note: The behavior of round() for floats can be surprising. Notice round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it's a result of the fact that most decimal fractions can't be represented exactly as a float.\n#When the decimal 2.675 is converted to a binary floating-point number, it's again replaced with a binary approximation, whose exact value is:\n#2.67499999999999982236431605997495353221893310546875: due to this 2.675 is rounded to 2.67\n#consider using the decimal module, which is designed for floating-point arithmetic\nfrom decimal import Decimal\n\n# normal float\nnum = 2.675\nprint(round(num, 2))\n\n# using decimal.Decimal (passed float as string for precision)\nnum = Decimal('2.675')\nprint(round(num, 2))","9aeacabd":"#slice(start, stop, step)\npy_string = 'Python'\n\n# start = -1, stop = -4, step = -1\n# contains indices -1, -2 and -3\nslice_object = slice(-1, -4, -1)\n\nprint(py_string[slice_object])   # noh\n\n#get sublist or subtuple\npy_list = ['P', 'y', 't', 'h', 'o', 'n']\npy_tuple = ('P', 'y', 't', 'h', 'o', 'n')\n\n# contains indices 0, 1 and 2\nslice_object = slice(3)\nprint(py_list[slice_object]) # ['P', 'y', 't']\n\n# contains indices 1 and 3\nslice_object = slice(1, 5, 2)\nprint(py_tuple[slice_object]) # ('y', 'h')    \n\nplanets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanets[0:3],planets[:3],planets[3:],planets[1:-1],planets[-3:]","854738b3":"#sorted(iterable, key=None, reverse=False):sorts the elements of a given iterable in a specific order\ny_list = ['e', 'a', 'u', 'o', 'i']\nprint(sorted(py_list))\n\n# string\npy_string = 'Python'\nprint(sorted(py_string))\n\n# vowels tuple\npy_tuple = ('e', 'a', 'u', 'o', 'i')\nprint(sorted(py_tuple,reverse=True))\n\n# dictionary\npy_dict = {'e': 1, 'a': 2, 'u': 3, 'o': 4, 'i': 5}\nprint(sorted(py_dict, reverse=True))\n\n#Notice that in all cases that a sorted list is returned.\n#Note: A list also has the sort() method which performs the same way as sorted(). The only difference is that the sort() method doesn't return any value and changes the original list.\n\n#Sort the list using sorted() having a key function:\n\n# take the second element for sort\ndef take_second(elem):\n    return elem[1]\n\n\n# random list\nrandom = [(2, 2), (3, 4), (4, 1), (1, 3)]\n\n# sort list with key\nsorted_list = sorted(random, key=take_second)\n\n# print list\nprint('Sorted list:', sorted_list)","2b791479":"# Nested list of student's info in a Science Olympiad\n# List elements: (Student's Name, Marks out of 100, Age)\n\nparticipant_list = [\n    ('Alison', 50, 18),\n    ('Terence', 75, 12),\n    ('David', 75, 20),\n    ('Jimmy', 90, 22),\n    ('John', 45, 12)\n]","3bb3e79d":"##Logic::\n#(1,3) > (1, 4)\n#False\n#(1, 4) < (2,2)\n#True\n#(1, 4, 1) < (2, 1)\n#True","a0bdbbd2":"# Nested list of student's info in a Science Olympiad\n# List elements: (Student's Name, Marks out of 100 , Age)\nparticipant_list = [\n    ('Alison', 50, 18),\n    ('Terence', 75, 12),\n    ('David', 75, 20),\n    ('Jimmy', 90, 22),\n    ('John', 45, 12)\n]\n\n\ndef sorter(item):\n    # Since highest marks first, least error = most marks\n    error = 100 - item[1]\n    age = item[2]\n    return (error, age)\n\n\nsorted_list = sorted(participant_list, key=sorter)\nprint(sorted_list)","9e335e20":"numbers = [2.5, 3, 4, -5]\n\n# start parameter is not provided\nnumbers_sum = sum(numbers)\nprint(numbers_sum)\n\n# start = 10\nnumbers_sum = sum(numbers, 10)\nprint(numbers_sum)","584636c3":"t1 = tuple()\nprint('t1 =', t1)\n\n# creating a tuple from a list\nt2 = tuple([1, 4, 6])\nprint('t2 =', t2)\n\n# creating a tuple from a string\nt1 = tuple('Python')\nprint('t1 =',t1)\n\n# creating a tuple from a dictionary\nt1 = tuple({1: 'one', 2: 'two'})\nprint('t1 =',t1)","6340a218":"def fashionably_late(arrivals, name):\n    \"\"\"Given an ordered list of arrivals to the party and a name, return whether the guest with that\n    name was fashionably late.\n    \"\"\"\n    order = arrivals.index(name)\n    return order >= len(arrivals) \/ 2 and order != len(arrivals) - 1\nparty_attendees = ['Adela', 'Fleda', 'Owen', 'May', 'Mona', 'Gilbert', 'Ford']\nprint(fashionably_late(party_attendees,'Gilbert'))\nprint(fashionably_late(party_attendees,'Ford'))","2e7336ec":"def word_search(documents, keyword):\n    \"\"\"\n    Takes a list of documents (each document is a string) and a keyword. \n    Returns list of the index values into the original list for all documents \n    containing the keyword.\n\n    Example:\n    doc_list = [\"The Learn Python Challenge Casino.\", \"They bought a car\", \"Casinoville\"]\n    >>> word_search(doc_list, 'casino')\n    >>> [0]\n    \"\"\"\n    # list to hold the indices of matching documents\n    indices = [] \n    # Iterate through the indices (i) and elements (doc) of documents\n    for i, doc in enumerate(documents):\n        # Split the string doc into a list of words (according to whitespace)\n        tokens = doc.split()\n        # Make a transformed list where we 'normalize' each word to facilitate matching.\n        # Periods and commas are removed from the end of each word, and it's set to all lowercase.\n        normalized = [token.rstrip('.,').lower() for token in tokens]\n        # Is there a match? If so, update the list of matching indices.\n        if keyword.lower() in normalized:\n            indices.append(i)\n    return indices               \ndoc_list = [\"The Learn Python Challenge\", \"They bought a Casino. car\", \"Casinoville\"]\nword_search(doc_list, 'casino')","0fe19dcb":"[\n    {'name': 'Peach', 'items': ['green shell', 'banana', 'green shell',], 'finish': 3},\n    {'name': 'Bowser', 'items': ['green shell',], 'finish': 1},\n    # Sometimes the racer's name wasn't recorded\n    {'name': None, 'items': ['mushroom',], 'finish': 2},\n    {'name': 'Toad', 'items': ['green shell', 'mushroom'], 'finish': 1},\n]","4ba7a342":"def best_items(racers):\n    \"\"\"Given a list of racer dictionaries, return a dictionary mapping items to the number\n    of times those items were picked up by racers who finished in first place.\n    \"\"\"\n    winner_item_counts = {}\n    for i in range(len(racers)):\n        # The i'th racer dictionary\n        racer = racers[i]\n        # We're only interested in racers who finished in first\n        if racer['finish'] == 1:\n            for i in racer['items']:\n                # Add one to the count for this item (adding it to the dict if necessary)\n                if i not in winner_item_counts:\n                    winner_item_counts[i] = 0\n                winner_item_counts[i] += 1\n\n        # Data quality issues :\/ Print a warning about racers with no name set. We'll take care of it later.\n        if racer['name'] is None:\n            print(\"WARNING: Encountered racer with unknown name on iteration {}\/{} (racer = {})\".format(\n                i+1, len(racers), racer['name'])\n                 )\n    return winner_item_counts\nsample = [\n    {'name': 'Peach', 'items': ['green shell', 'banana', 'green shell',], 'finish': 3},\n    {'name': 'Bowser', 'items': ['green shell',], 'finish': 1},\n    {'name': None, 'items': ['mushroom',], 'finish': 2},\n    {'name': 'Toad', 'items': ['green shell', 'mushroom'], 'finish': 1},\n]\nbest_items(sample)","a4aa62e9":"def hand_total(hand):\n    \n    total = 0\n    # Count the number of aces and deal with how to apply them at the end.\n    aces = 0\n    for card in hand:\n        if card in ['J', 'Q', 'K']:\n            total += 10\n        elif card == 'A':\n            aces += 1\n        else:\n            # Convert number cards (e.g. '7') to ints\n            total += int(card)\n    # At this point, total is the sum of this hand's cards *not counting aces*.\n\n    # Add aces, counting them as 1 for now. This is the smallest total we can make from this hand\n    total += aces\n    # \"Upgrade\" aces from 1 to 11 as long as it helps us get closer to 21\n    # without busting\n    while total + 10 <= 21 and aces > 0:\n        # Upgrade an ace from 1 to 11\n        total += 10\n        aces -= 1\n    return total\n\ndef blackjack_hand_greater_than(hand_1, hand_2):\n    total_1 = hand_total(hand_1)\n    total_2 = hand_total(hand_2)\n    return total_1 <= 21 and (total_1 > total_2 or total_2 > 21)\n    \"\"\"\n    Return True if hand_1 beats hand_2, and False otherwise.\n    \n    In order for hand_1 to beat hand_2 the following must be true:\n    - The total of hand_1 must not exceed 21\n    - The total of hand_1 must exceed the total of hand_2 OR hand_2's total must exceed 21\n    \n    Hands are represented as a list of cards. Each card is represented by a string.\n    \n    When adding up a hand's total, cards with numbers count for that many points. Face\n    cards ('J', 'Q', and 'K') are worth 10 points. 'A' can count for 1 or 11.\n    \n    When determining a hand's total, you should try to count aces in the way that \n    maximizes the hand's total without going over 21. e.g. the total of ['A', 'A', '9'] is 21,\n    the total of ['A', 'A', '9', '3'] is 14.\n    \n    Examples:\n    >>> blackjack_hand_greater_than(['K'], ['3', '4'])\n    True\n    >>> blackjack_hand_greater_than(['K'], ['10'])\n    False\n    >>> blackjack_hand_greater_than(['K', 'K', '2'], ['3'])\n    False\n    \"\"\"","03f42381":"That's it for now Folks!! \n\nI'm currently preparing notebooks like these for Data Pre-processing and Data Visualization.\n\nKudos!!!","a09ec536":"Q4.\nSuppose we wanted to create a new type to represent hands in blackjack. One thing we might want to do with this type is overload the comparison operators like > and <= so that we could use them to check whether one hand beats another. e.g. it'd be cool if we could do this:\n\n hand1 = BlackjackHand(['K', 'A'])\n \n hand2 = BlackjackHand(['7', '10', 'A'])\n \n hand1 > hand2\n \nTrue\n\nWell, we're not going to do all that in this question (defining custom classes is a bit beyond the scope of these lessons), but the code we're asking you to write in the function below is very similar to what we'd have to write if we were defining our own BlackjackHand class. (We'd put it in the __gt__ magic method to define our custom behaviour for >.)\n\nFill in the body of the blackjack_hand_greater_than function according to the docstring.","ffcf5d43":"Sorting with multiple keys:\n","89250fd3":"Tuple(iterable):","7133e5a5":"We want to sort the list in such a way that the student with the highest marks is in the beginning. In case the students have equal marks, they must be sorted so that the younger participant comes first.\n\nWe can achieve this type of sorting with multiple keys by returning tuple instead of a number.\n\nTwo tuples can be compared by comparing their elements starting from first. If there is a tie (elements are equal), the second element is compared, and so on.","c7f5a6c2":"![Screenshot%20from%202020-05-26%2015-02-00.png](attachment:Screenshot%20from%202020-05-26%2015-02-00.png)","59a033b7":"Q3.\nLuigi is trying to perform an analysis to determine the best items for winning races on the Mario Kart circuit. He has some data in the form of lists of dictionaries that look like...","1b7c2d3e":"INTRO:","60b49225":"# **PYTHON**","29a7216a":"Important Exercise Questions:\n","8abcf862":"The Python interpreter has a lot of in-built functions and types that are always availiable. \n\nI have stacked all of the most important ones with examples.\n\nFor the sake of summarization, I've also included some important very basic exercise questions at last.","2e135262":"Sum(iterable, start):\nThe sum() function adds start and items of the given iterable from left to right.","9f4811eb":"Q1.\nA guest is considered 'fashionably late' if they arrived after at least half of the party's guests. However, they must not be the very last guest (that's taking it too far). In the above example, Mona and Gilbert are the only guests who were fashionably late.\n\nComplete the function below which takes a list of party attendees as well as a person, and tells us whether that person is fashionably late.","406ca1e7":"'items' is a list of all the power-up items the racer picked up in that race, and 'finish' was their placement in the race (1 for first place, 3 for third, etc.).\n\nHe wrote the function below to take a list like this and return a dictionary mapping each item to how many times it was picked up by first-place finishers.","135e0a3e":"In-Built FUNCTIONS:","07f65f92":"Operation Precedence :\nPEMDAS - Parentheses, Exponents, Multiplication\/Division, Addition\/Subtraction.","13cabb13":"If you need to add floating-point numbers with exact precision, then you should use math.fsum(iterable) instead.\n\nIf you need to concatenate items of the given iterable (items must be strings), then you can use the join() method.\n'string'.join(sequence)\n","66477c64":"Q2.\nA researcher has gathered thousands of news articles. But she wants to focus her attention on articles including a specific word. Complete the function below to help her filter her list of articles.\n\nYour function should meet the following criteria:\n\nDo not include documents where the keyword string shows up only as a part of a larger word. For example, if she were looking for the keyword \u201cclosed\u201d, you would not include the string \u201cenclosed.\u201d\nShe does not want you to distinguish upper case from lower case letters. So the phrase \u201cClosed the case.\u201d would be included when the keyword is \u201cclosed\u201d\nDo not let periods or commas affect what is matched. \u201cIt is closed.\u201d would be included when the keyword is \u201cclosed\u201d. But you can assume there are no other types of punctuation."}}