{"cell_type":{"e13ad90b":"code","6ecd8f08":"code","17306e42":"code","efdf4c82":"code","c3315a96":"code","49f26877":"code","d29229ed":"code","5eaf6f0c":"code","84055832":"code","7b6d9bf6":"code","bc092eb4":"code","63c56784":"code","9c8a32db":"code","ed2e4f9c":"code","973e869c":"code","698d4b95":"code","7907d837":"code","bc4601ef":"code","90977e93":"code","f466c623":"code","11dc6c7a":"code","203f16ab":"code","0add7b73":"code","8cf7febb":"code","8129945c":"code","d877abfc":"code","ed4636db":"code","ce089488":"code","7247324e":"code","50fcded1":"code","469e03bc":"code","808ee30e":"code","8f50a86a":"code","323208ec":"code","8d877602":"code","67668884":"code","8148f668":"code","4b35598a":"code","40324baa":"code","fd084ce4":"code","2cdce26c":"code","3137a611":"code","6b864863":"code","916b8e37":"code","df008e1c":"code","1f210749":"code","e10a3bec":"code","6c856574":"code","d0edfd03":"code","4dfcbf48":"code","5f9f3877":"code","e5a50c7a":"code","f3b2d531":"code","5a0d5510":"code","8363ac32":"code","c667eee7":"code","2ffdf344":"code","cb80eb2c":"code","533b6d49":"code","4073244b":"code","a3ab8db9":"code","7d736d26":"code","11673f84":"code","0839e7f3":"code","cfd58f4f":"code","95639bd7":"code","a16b3552":"code","582bca16":"code","188e0b50":"code","92c87a74":"code","a6486ae0":"code","72dd1dd9":"code","e7e2143c":"code","5bf3e700":"code","abde3eaf":"code","2f793d0c":"code","3bb8bd73":"code","a37ba2bb":"code","db645ad5":"code","8c79bac0":"code","06ac94f3":"code","a5824b32":"code","a342565d":"code","daf26cd0":"code","8e8f7a08":"code","b79f42d2":"code","376a1e8a":"code","1b364ed4":"code","f8e0ac82":"code","3950bc4a":"code","d646c9a8":"code","39f77805":"code","d30def16":"code","40a11669":"code","a86d1a25":"code","3bb4a731":"code","6bf96c10":"code","c9281fcc":"code","67557b5a":"markdown","61e51e96":"markdown","4137fef6":"markdown","6bd54bad":"markdown","41c56810":"markdown","3a1ee0dc":"markdown","4d8a3eee":"markdown","11fa94cf":"markdown","2eb26b9d":"markdown","4d7c0dd7":"markdown","bdfa6a6b":"markdown","7a58a85f":"markdown","28337ada":"markdown","fb778a24":"markdown","3917419d":"markdown","91e43f0f":"markdown","0b86e5ca":"markdown","2904f78e":"markdown","318c80d5":"markdown","83b479fa":"markdown","1964462a":"markdown","9fca4aca":"markdown","ac8954af":"markdown","daf87941":"markdown","b2a87253":"markdown","661132cd":"markdown","26949dd2":"markdown","39715854":"markdown","7b33546d":"markdown","4d354741":"markdown","a202fda5":"markdown","88035d82":"markdown","91e693e5":"markdown","85b45918":"markdown","a1234deb":"markdown","9dd6e213":"markdown","bb38237b":"markdown","5207ea86":"markdown","a3c638bf":"markdown","087994a0":"markdown","fbbf336c":"markdown","d2d2fc22":"markdown","b1d28bc9":"markdown","1107e1de":"markdown","3dc21ce5":"markdown","40ae3925":"markdown","21495d05":"markdown","3a69b581":"markdown","5dc5c93d":"markdown","2f8bac44":"markdown","6515734c":"markdown","54cab893":"markdown","9220893d":"markdown","462e1513":"markdown","f23042e9":"markdown","5dc6e1b4":"markdown","786a2c45":"markdown","9091e9d6":"markdown","bc33feff":"markdown","75df7214":"markdown","0fdfa144":"markdown","1c327a8c":"markdown","6b0bab89":"markdown","e85fe5e9":"markdown","ccc7c756":"markdown","51cdae28":"markdown","f13b7f22":"markdown","53e8b8c4":"markdown","3781099f":"markdown","7a3ffefd":"markdown","63120cf6":"markdown","9d86f97f":"markdown","87f8f252":"markdown","f4fe6f95":"markdown","ac51f49c":"markdown","9c5c94f0":"markdown","e7eea420":"markdown","89f07b4d":"markdown","fd054fb7":"markdown","8068edeb":"markdown","b08d5a41":"markdown","80b0f12f":"markdown","ce1b3f52":"markdown","b450efd1":"markdown","2b1841f2":"markdown","2e673604":"markdown","215628bb":"markdown"},"source":{"e13ad90b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ecd8f08":"#import Library \nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","17306e42":"#Read data from csv file\ndf_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","efdf4c82":"print('The shape of our training set: ',df_train.shape[0], 'houses', 'and', df_train.shape[1], 'features')\nprint('The shape of our testing set: ',df_test.shape[0], 'houses', 'and', df_test.shape[1], 'features')\nprint('The testing set has 1 feature less than the training set, which is SalePrice, the target to predict  ')","c3315a96":"df_train.head()","49f26877":"df_test.head()","d29229ed":"df_train.describe()","5eaf6f0c":"df_test.describe()","84055832":"#Header name Columns \ndf_train.columns","7b6d9bf6":"df_test.columns","bc092eb4":"numeric = df_train.select_dtypes(exclude='object')\ncategorical = df_train.select_dtypes(include='object')","63c56784":"print(\"\\nNumber of numeric features : \",(len(numeric.axes[1])))\nprint(\"\\n\", numeric.axes[1])","9c8a32db":"print(\"\\nNumber of categorical features : \",(len(categorical.axes[1])))\nprint(\"\\n\", categorical.axes[1])","ed2e4f9c":"# Isolate the numeric features and check his relevance\n\nnum_corr = numeric.corr()\ntable = num_corr['SalePrice'].sort_values(ascending=False).to_frame()\ncm = sns.light_palette(\"green\", as_cmap=True)\ntb = table.style.background_gradient(cmap=cm)\ntb","973e869c":"\nf, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(df_train.corr(),annot=True, linewidths=.1, fmt= '.1f',ax=ax, cmap=\"YlGnBu\")","698d4b95":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = df_train.corr().nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","7907d837":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","bc4601ef":"#missing data in Traing examples\ntotal = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n\nmissing_data.head(20)","90977e93":"na = df_train.shape[0] #na is the number of rows of the original training set\nnb = df_test.shape[0]  #nb is the number of rows of the original test set\ny_train = df_train['SalePrice'].to_frame()\n#Combine train and test sets\nc1 = pd.concat((df_train, df_test), sort=False).reset_index(drop=True)\n#Drop the target \"SalePrice\" and Id columns\nc1.drop(['SalePrice'], axis=1, inplace=True)\nc1.drop(['Id'], axis=1, inplace=True)\nprint(\"Total size for train and test sets is :\",c1.shape)","f466c623":"##msv1 method to visualize missing values per columns\ndef msv1(data, thresh=20, color='black', edgecolor='black', width=15, height=3): \n    \"\"\"\n    SOURCE: https:\/\/www.kaggle.com\/amiiiney\/price-prediction-regularization-stacking\n    \"\"\"\n    \n    plt.figure(figsize=(width,height))\n    percentage=(data.isnull().mean())*100\n    percentage.sort_values(ascending=False).plot.bar(color=color, edgecolor=edgecolor)\n    plt.axhline(y=thresh, color='r', linestyle='-')\n    plt.title('Missing values percentage per column', fontsize=20, weight='bold' )\n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh+12.5, 'Columns with more than %s%s missing values' %(thresh, '%'), fontsize=12, color='crimson',\n         ha='left' ,va='top')\n    plt.text(len(data.isnull().sum()\/len(data))\/1.7, thresh - 5, 'Columns with less than %s%s missing values' %(thresh, '%'), fontsize=12, color='green',\n         ha='left' ,va='top')\n    plt.xlabel('Columns', size=15, weight='bold')\n    plt.ylabel('Missing values percentage')\n    plt.yticks(weight ='bold')\n    \n    return plt.show()","11dc6c7a":"msv1(c1, 20, color=('silver', 'gold', 'lightgreen', 'skyblue', 'lightpink'))","203f16ab":"# drop columns (features ) with > 80% missing vales\nc=c1.dropna(thresh=len(c1)*0.8, axis=1)\nprint('We dropped ',c1.shape[1]-c.shape[1], ' features in the combined set')","0add7b73":"print('The shape of the combined dataset after dropping features with more than 80% M.V.', c.shape)","8cf7febb":"allna = (c.isnull().sum() \/ len(c))*100\nallna = allna.drop(allna[allna == 0].index).sort_values()\n\ndef msv2(data, width=12, height=8, color=('silver', 'gold','lightgreen','skyblue','lightpink'), edgecolor='black'):\n    \"\"\"\n    SOURCE: https:\/\/www.kaggle.com\/amiiiney\/price-prediction-regularization-stacking\n    \"\"\"\n    fig, ax = plt.subplots(figsize=(width, height))\n\n    allna = (data.isnull().sum() \/ len(data))*100\n    tightout= 0.008*max(allna)\n    allna = allna.drop(allna[allna == 0].index).sort_values().reset_index()\n    mn= ax.barh(allna.iloc[:,0], allna.iloc[:,1], color=color, edgecolor=edgecolor)\n    ax.set_title('Missing values percentage per column', fontsize=15, weight='bold' )\n    ax.set_xlabel('Percentage', weight='bold', size=15)\n    ax.set_ylabel('Features with missing values', weight='bold')\n    plt.yticks(weight='bold')\n    plt.xticks(weight='bold')\n    for i in ax.patches:\n        ax.text(i.get_width()+ tightout, i.get_y()+0.1, str(round((i.get_width()), 2))+'%',\n            fontsize=10, fontweight='bold', color='grey')\n    return plt.show()","8129945c":"msv2(c)","d877abfc":"NA=c[allna.index.to_list()]","ed4636db":"NAcat=NA.select_dtypes(include='object')\nNAnum=NA.select_dtypes(exclude='object')\nprint('We have :',NAcat.shape[1],'categorical features with missing values')\nprint('We have :',NAnum.shape[1],'numerical features with missing values')","ce089488":"NAnum.head()","7247324e":"NANUM= NAnum.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nNANUM = NANUM.style.background_gradient(cmap=cm)\nNANUM","50fcded1":"#MasVnrArea: Masonry veneer area in square feet, the missing data means no veneer so we fill with 0\nc['MasVnrArea']=c.MasVnrArea.fillna(0)\n#LotFrontage has 16% missing values. We fill with the median\nc['LotFrontage']=c.LotFrontage.fillna(c.LotFrontage.median())\n#GarageYrBlt:  Year garage was built, we fill the gaps with the median: 1980\nc['GarageYrBlt']=c[\"GarageYrBlt\"].fillna(1980)\n#For the rest of the columns: Bathroom, half bathroom, basement related columns and garage related columns:\n#We will fill with 0s because they just mean that the hosue doesn't have a basement, bathrooms or a garage","469e03bc":"bb=c[allna.index.to_list()]\nnan=bb.select_dtypes(exclude='object')\nN= nan.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nN= N.style.background_gradient(cmap=cm)\nN","808ee30e":"NAcat.head()","8f50a86a":"NAcat1= NAcat.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nNAcat1 = NAcat1.style.background_gradient(cmap=cm)\nNAcat1","323208ec":"fill_cols = ['Electrical', 'SaleType', 'KitchenQual', 'Exterior1st',\n             'Exterior2nd', 'Functional', 'Utilities', 'MSZoning']\n\nfor col in c[fill_cols]:\n    c[col] = c[col].fillna(method='ffill')","8d877602":"dd=c[allna.index.to_list()]\nw=dd.select_dtypes(include='object')\na= w.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\na= a.style.background_gradient(cmap=cm)\na","67668884":"#we will just 'None' in categorical features\n#Categorical missing values\nNAcols=c.columns\nfor col in NAcols:\n    if c[col].dtype == \"object\":\n        c[col] = c[col].fillna(\"None\")\n","8148f668":"#we will just fill 0s in the numerical features \n#Numerical missing values\nfor col in NAcols:\n    if c[col].dtype != \"object\":\n        c[col]= c[col].fillna(0)","4b35598a":"c.isnull().sum().sort_values(ascending=False).head()","40324baa":"\n\n\nFillNA=c[allna.index.to_list()]\n\n\n\nFillNAcat=FillNA.select_dtypes(include='object')\n\nFC= FillNAcat.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nFC= FC.style.background_gradient(cmap=cm)\nFC\n\n\n","fd084ce4":"FillNAnum=FillNA.select_dtypes(exclude='object')\n\nFM= FillNAnum.isnull().sum().to_frame().sort_values(by=[0]).T\ncm = sns.light_palette(\"lime\", as_cmap=True)\n\nFM= FM.style.background_gradient(cmap=cm)\nFM\n\n","2cdce26c":"c.shape","3137a611":"c['TotalArea'] = c['TotalBsmtSF'] + c['1stFlrSF'] + c['2ndFlrSF'] + c['GrLivArea'] +c['GarageArea']\n\nc['Bathrooms'] = c['FullBath'] + c['HalfBath']*0.5 \n\nc['Year average']= (c['YearRemodAdd']+c['YearBuilt'])\/2","6b864863":"#c['MoSold'] = c['MoSold'].astype(str)\nc['MSSubClass'] = c['MSSubClass'].apply(str)\nc['YrSold'] = c['YrSold'].astype(str)","916b8e37":"c.shape","df008e1c":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\nc['HasBsmt'] = pd.Series(len(c['TotalBsmtSF']), index=c.index)\nc['HasBsmt'] = 0 \nc.loc[c['TotalBsmtSF']>0,'HasBsmt'] = 1\n\n#transform data\nc.loc[c['HasBsmt']==1,'TotalBsmtSF'] = np.log(c['TotalBsmtSF'])","1f210749":"cb=pd.get_dummies(c)\nprint(\"the shape of the original dataset\",c.shape)\nprint(\"the shape of the encoded dataset\",cb.shape)\nprint(\"We have \",cb.shape[1]- c.shape[1], 'new encoded features')","e10a3bec":"\nTrain = cb[:na]  #na is the number of rows of the original training set\n                 \nTest = cb[na:]  #testset  after clean missing values and feature engineering and encoder  we do NOT apply outliers on it","6c856574":"print(Train.shape)\nprint(y_train.shape)\nprint(Test.shape)\n","d0edfd03":"fig = plt.figure(figsize=(15,15))\nax1 = plt.subplot2grid((3,2),(0,0))\nplt.scatter(x=df_train['GrLivArea'], y=df_train['SalePrice'], color=('yellowgreen'), alpha=0.5)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Ground living Area- Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(0,1))\nplt.scatter(x=df_train['TotalBsmtSF'], y=df_train['SalePrice'], color=('red'),alpha=0.5)\nplt.axvline(x=5900, color='r', linestyle='-')\nplt.title('Basement Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,0))\nplt.scatter(x=df_train['1stFlrSF'], y=df_train['SalePrice'], color=('deepskyblue'),alpha=0.5)\nplt.axvline(x=4000, color='r', linestyle='-')\nplt.title('First floor Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(1,1))\nplt.scatter(x=df_train['MasVnrArea'], y=df_train['SalePrice'], color=('gold'),alpha=0.9)\nplt.axvline(x=1500, color='r', linestyle='-')\nplt.title('Masonry veneer Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,0))\nplt.scatter(x=df_train['GarageArea'], y=df_train['SalePrice'], color=('orchid'),alpha=0.5)\nplt.axvline(x=1230, color='r', linestyle='-')\nplt.title('Garage Area - Price scatter plot', fontsize=15, weight='bold' )\n\nax1 = plt.subplot2grid((3,2),(2,1))\nplt.scatter(x=df_train['TotRmsAbvGrd'], y=df_train['SalePrice'], color=('tan'),alpha=0.9)\nplt.axvline(x=13, color='r', linestyle='-')\nplt.title('TotRmsAbvGrd - Price scatter plot', fontsize=15, weight='bold' )\nplt.show()","4dfcbf48":"df_train['GrLivArea'].sort_values(ascending=False).head(2)","5f9f3877":"df_train['TotalBsmtSF'].sort_values(ascending=False).head(1)","e5a50c7a":"df_train['MasVnrArea'].sort_values(ascending=False).head(1)","f3b2d531":"df_train['1stFlrSF'].sort_values(ascending=False).head(1)","5a0d5510":"df_train['GarageArea'].sort_values(ascending=False).head(4)","8363ac32":"df_train['TotRmsAbvGrd'].sort_values(ascending=False).head(1)","c667eee7":"train=Train[(Train['GrLivArea'] < 4600) & (Train['MasVnrArea'] < 1500)]\n\nprint('We removed ',Train.shape[0]- train.shape[0],'outliers')","2ffdf344":"target=df_train[['SalePrice']]\ntarget.loc[1298]","cb80eb2c":"target.loc[523]","533b6d49":"#pos = [1298,523, 297, 581, 1190, 1061, 635, 197,1328, 495, 583, 313, 335, 249, 706]\npos = [1298,523, 297]\ntarget.drop(target.index[pos], inplace=True)","4073244b":"print('We make sure that both train and target sets have the same row number after removing the outliers:')\nprint( 'Train: ',train.shape[0], 'rows')\nprint('Target:', target.shape[0],'rows')","a3ab8db9":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.scatter(x=df_train['GrLivArea'], y=df_train['SalePrice'], color=('orchid'), alpha=0.5)\nplt.title('Area-Price plot with outliers',weight='bold', fontsize=18)\nplt.axvline(x=4600, color='r', linestyle='-')\n#first row sec col\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.scatter(x=train['GrLivArea'], y=target['SalePrice'], color='navy', alpha=0.5)\nplt.axvline(x=4600, color='r', linestyle='-')\nplt.title('Area-Price plot without outliers',weight='bold', fontsize=18)\nplt.show()","7d736d26":"print(\"Skewness before log transform: \", df_train['GrLivArea'].skew())\nprint(\"Kurtosis before log transform: \", df_train['GrLivArea'].kurt())","11673f84":"from scipy.stats import skew\n\n#numeric_feats = c.dtypes[c.dtypes != \"object\"].index\n\n#skewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\n#skewed_feats\n#skewed_feats = skewed_feats[skewed_feats > 0.75]\n#skewed_feats = skewed_feats.index\n\n#train[skewed_feats] = np.log1p(train[skewed_feats])","0839e7f3":"print(\"Skewness after log transform: \", train['GrLivArea'].skew())\nprint(\"Kurtosis after log transform: \", train['GrLivArea'].kurt())","cfd58f4f":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,10))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((2,2),(0,0))\nsns.distplot(df_train.GrLivArea, color='plum')\nplt.title('Before: Distribution of GrLivArea',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((2,2),(0,1))\nsns.distplot(df_train['1stFlrSF'], color='tan')\nplt.title('Before: Distribution of 1stFlrSF',weight='bold', fontsize=18)\n\n\nax1 = plt.subplot2grid((2,2),(1,0))\nsns.distplot(train.GrLivArea, color='plum')\nplt.title('After: Distribution of GrLivArea',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((2,2),(1,1))\nsns.distplot(train['1stFlrSF'], color='tan')\nplt.title('After: Distribution of 1stFlrSF',weight='bold', fontsize=18)\nplt.show()","95639bd7":"#histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","a16b3552":"print(\"Skewness before log transform: \", target['SalePrice'].skew())\nprint(\"Kurtosis before log transform: \",target['SalePrice'].kurt())","582bca16":"#log transform the target:\ntarget[\"SalePrice\"] = np.log1p(target[\"SalePrice\"])","188e0b50":"#transformed histogram and normal probability plot\nsns.distplot(target[\"SalePrice\"], fit=norm);\nfig = plt.figure()\nres = stats.probplot(target[\"SalePrice\"], plot=plt)","92c87a74":"plt.style.use('seaborn')\nsns.set_style('whitegrid')\nfig = plt.figure(figsize=(15,5))\n#1 rows 2 cols\n#first row, first col\nax1 = plt.subplot2grid((1,2),(0,0))\nplt.hist(df_train.SalePrice, bins=10, color='mediumpurple',alpha=0.5)\nplt.title('Sale price distribution before normalization',weight='bold', fontsize=18)\n#first row sec col\nax1 = plt.subplot2grid((1,2),(0,1))\nplt.hist(target.SalePrice, bins=10, color='darkcyan',alpha=0.5)\nplt.title('Sale price distribution after normalization',weight='bold', fontsize=18)\nplt.show()","a6486ae0":"print(\"Skewness after log transform: \", target['SalePrice'].skew())\nprint(\"Kurtosis after log transform: \",target['SalePrice'].kurt())","72dd1dd9":"X=train\ny=np.array(target)","e7e2143c":"print(X.shape)    # features variable afte clean and feature engineering and clean outliers\nprint(y.shape)    # target varible afte clean and and scaling using log transform\nprint(Test.shape) # test set after cleaning and feature engineering but Do not apply clean outliers and Scaling on it","5bf3e700":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.simplefilter(action='ignore')\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, KFold, RandomizedSearchCV, train_test_split\nimport math\nimport sklearn.model_selection as ms\nimport sklearn.metrics as sklm","abde3eaf":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y,test_size = .3, random_state=0)","2f793d0c":"from sklearn.preprocessing import RobustScaler\nscaler= RobustScaler()\n# transform \"x_train\"\nx_train = scaler.fit_transform(x_train)\n# transform \"x_test\"\nx_test = scaler.transform(x_test)\n\n#Transform the test set\nX_test= scaler.transform(Test)","3bb8bd73":"from sklearn.linear_model import LinearRegression\n\nlreg=LinearRegression()\nMSEs=ms.cross_val_score(lreg,X , y, scoring='neg_mean_squared_error', cv=5)\nmeanMSE=np.mean(MSEs)\nprint(meanMSE)\nprint('RMSE = '+str(math.sqrt(-meanMSE)))\n","a37ba2bb":"import sklearn.model_selection as GridSearchCV # to get more great Hypert pramater value\nfrom sklearn.linear_model import Ridge\n\nridge=Ridge()\nparameters= {'alpha':[x for x in range(1,101)]}\n\nridge_reg=ms.GridSearchCV(ridge, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nridge_reg.fit(x_train,y_train)\nprint(\"The best value of Alpha is: \",ridge_reg.best_params_)\nprint(\"The best score achieved with Alpha=11 is: \",math.sqrt(-ridge_reg.best_score_))\nridge_pred=math.sqrt(-ridge_reg.best_score_)","db645ad5":"ridge_mod=Ridge(alpha=20)\nridge_mod.fit(x_train,y_train)\ny_pred_train=ridge_mod.predict(x_train)\ny_pred_test=ridge_mod.predict(x_test)\n\nprint('Root Mean Square Error train = ' + str(math.sqrt(sklm.mean_squared_error(y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_pred_test))))  ","8c79bac0":"from sklearn.linear_model import Lasso\n\nparameters= {'alpha':[0.0001,0.0009,0.001,0.002,0.003,0.01,0.1,1,10,100]}\n\n\nlasso=Lasso()\nlasso_reg=ms.GridSearchCV(lasso, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\nlasso_reg.fit(x_train,y_train)\n\nprint('The best value of Alpha is: ',lasso_reg.best_params_)","06ac94f3":"lasso_mod=Lasso(alpha=0.0009)\nlasso_mod.fit(x_train,y_train)\ny_lasso_train=lasso_mod.predict(x_train)\ny_lasso_test=lasso_mod.predict(x_test)\n\nprint('Root Mean Square Error train = ' + str(math.sqrt(sklm.mean_squared_error(y_train, y_lasso_train))))\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_lasso_test))))","a5824b32":"coefs = pd.Series(lasso_mod.coef_, index = X.columns)\n\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\", color='yellowgreen')\nplt.xlabel(\"Lasso coefficient\", weight='bold')\nplt.title(\"Feature importance in the Lasso Model\", weight='bold')\nplt.show()","a342565d":"print(\"Lasso kept \",sum(coefs != 0), \"important features and dropped the other \", sum(coefs == 0),\" features\")","daf26cd0":"from sklearn.linear_model import ElasticNetCV\n\nalphas = [10,1,0.1,0.01,0.001,0.002,0.003,0.004,0.005,0.00054255]\nl1ratio = [0.1, 0.3,0.5, 0.9, 0.95, 0.99, 1]\n\nelastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\nelasticmod = elastic_cv.fit(x_train, y_train.ravel())\nela_pred=elasticmod.predict(x_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, ela_pred))))\nprint(elastic_cv.alpha_)\nprint(elastic_cv.l1_ratio_)","8e8f7a08":"#REGULARIZATION RECAP","b79f42d2":"print(y.shape)\nprint(X.shape)","376a1e8a":"# create a function that would split data into training and testing\ndef split_data(features, target):\n    \n    from sklearn.model_selection import train_test_split\n    \n    x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=1)\n    \n    return x_train, x_test, y_train, y_test","1b364ed4":"# helper function to evaluate different scores\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_squared_log_error\ndef get_score(y_test, y_pred):\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    rmse = mean_squared_error(y_test, y_pred, squared=False)\n    rmsle = mean_squared_log_error(y_test, y_pred) \n    return (r2, mse, rmse, rmsle)","f8e0ac82":"# function to Plot the Actual vs Predicted Sale Prices\ndef plot_data(y_test, y_pred):\n    plt.figure(figsize=(18,12))\n    plt.plot(y_test.values, label='Actual', c='r')\n    plt.plot(y_pred, label='Predicted', c='b')\n    plt.title('Actual vs Predicted Sale Price of the House')\n    plt.ylabel('Sale Price')\n    plt.legend()","3950bc4a":"def regularization(x,y,modelo=Ridge, scaler=RobustScaler):\n    \"\"\"\"\n    Function to automate regression with regularization techniques.\n    x expects the features\n    y expects the target\n    modelo: Ridge(default), Lasso, ElasticNetCV\n    scaler: RobustScaler(default), MinMaxSclaer, StandardScaler\n    SOURCE: https:\/\/www.kaggle.com\/amiiiney\/price-prediction-regularization-stacking\n    Contact: amineyamlahi@gmail.com\n    \"\"\"\n    #Split the data to train\/test\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(x, y,test_size = .3, random_state=0)\n    \n    #Scale the data. RobustSclaer default\n    from sklearn.preprocessing import RobustScaler\n    from sklearn.preprocessing import MinMaxScaler\n    from sklearn.preprocessing import StandardScaler\n    \n    scaler= scaler()\n    # transform \"x_train\"\n    x_train = scaler.fit_transform(x_train)\n    # transform \"x_test\"\n    x_test = scaler.transform(x_test)\n    #Transform the test set\n    X_test= scaler.transform(Test)\n    \n    if modelo != ElasticNetCV:\n        if modelo == Ridge:\n            parameters= {'alpha':[x for x in range(1,101)]}\n        elif modelo == Lasso:\n            parameters= {'alpha':[0.0001,0.0009,0.001,0.002,0.003,0.01,0.1,1,10,100]}\n            \n        model=modelo()\n            \n        model=ms.GridSearchCV(model, param_grid=parameters, scoring='neg_mean_squared_error', cv=15)\n        model.fit(x_train,y_train)\n        y_pred= model.predict(x_test)\n\n        #print(\"The best value of Alpha is: \",model.best_params_)\n        print(\"The best RMSE score achieved with %s is: %s \" %(model.best_params_,\n                  str(math.sqrt(sklm.mean_squared_error(y_test, y_pred)))))\n    elif modelo == ElasticNetCV:\n        alphas = [0.000542555]\n        l1ratio = [0.1, 0.3,0.5, 0.9, 0.95, 0.99, 1]\n\n        elastic_cv = ElasticNetCV(cv=5, max_iter=1e7, alphas=alphas,  l1_ratio=l1ratio)\n\n        elasticmod = elastic_cv.fit(x_train, y_train.ravel())\n        ela_pred=elasticmod.predict(x_test)\n        print(\"The best RMSE score achieved with alpha %s and l1_ratio %s is: %s \"\n              %(elastic_cv.alpha_,elastic_cv.l1_ratio_,\n            str(math.sqrt(sklm.mean_squared_error(y_test, ela_pred)))))\n        \n            \n","d646c9a8":"from xgboost.sklearn import XGBRegressor\n\n#xg_reg = XGBRegressor()\n#xgparam_grid= {'learning_rate' : [0.01],'n_estimators':[2000, 3460, 4000],\n#                                     'max_depth':[3], 'min_child_weight':[3,5],\n#                                     'colsample_bytree':[0.5,0.7],\n#                                     'reg_alpha':[0.0001,0.001,0.01,0.1,10,100],\n#                                    'reg_lambda':[1,0.01,0.8,0.001,0.0001]}\n\n#xg_grid=GridSearchCV(xg_reg, param_grid=xgparam_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\n#xg_grid.fit(x_train,y_train)\n#print(xg_grid.best_estimator_)\n#print(xg_grid.best_score_)","39f77805":"xgb= XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=3, min_child_weight=0, missing=None, n_estimators=4000,\n             n_jobs=1, nthread=None, objective='reg:squarederror', random_state=0,\n             reg_alpha=0.0001, reg_lambda=0.01, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)\nxgmod=xgb.fit(x_train,y_train)\nxg_pred=xgmod.predict(x_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, xg_pred))))","d30def16":"from sklearn.ensemble import VotingRegressor\n\nvote_mod = VotingRegressor([('Ridge', ridge_mod), ('Lasso', lasso_mod), ('Elastic', elastic_cv), \n                            ('XGBRegressor', xgb)])\nvote= vote_mod.fit(x_train, y_train.ravel())\nvote_pred=vote.predict(x_test)\n\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, vote_pred))))","40a11669":"#Gradient Boosting Regressor with Hyperparameters as per Grid Search","a86d1a25":"from mlxtend.regressor import StackingRegressor\n\n\nstregr = StackingRegressor(regressors=[elastic_cv,ridge_mod, lasso_mod, vote_mod], \n                           meta_regressor=xgb, use_features_in_secondary=True\n                          )\n\nstack_mod=stregr.fit(x_train, y_train.ravel())\nstacking_pred=stack_mod.predict(x_test)\n\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, stacking_pred))))","3bb4a731":"final_test=(0.3*vote_pred+0.5*stacking_pred+ 0.2*y_lasso_test)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, final_test))))","6bf96c10":"#VotingRegressor to predict the final Test\nvote_test = vote_mod.predict(X_test)\nfinal1=np.expm1(vote_test)\n\n#StackingRegressor to predict the final Test\nstack_test = stregr.predict(X_test)\nfinal2=np.expm1(stack_test)\n\n#LassoRegressor to predict the final Test\nlasso_test = lasso_mod.predict(X_test)\nfinal3=np.expm1(lasso_test)","c9281fcc":"#Submission of the results predicted by the average of Voting\/Stacking\/Lasso\nfinal=(0.2*final1+0.6*final2+0.2*final3)\n\nfinal_submission = pd.DataFrame({\n        \"Id\": df_test[\"Id\"],\n        \"SalePrice\": final\n    })\nfinal_submission.to_csv(\"final_submission.csv\", index=False)\nfinal_submission.head()","67557b5a":"\nP.S. I didn't drop all the outliers because dropping all of them led to a worst RMSE score. More investigation is needed to filter those outliers.","61e51e96":"Now, we fit the models on the test data and then submit it to the competition\n\n  * We apply np.expm1 to cancel the np.logp1 (we did previously in data processing) and convert the numbers to their original form ","4137fef6":"The table above helps us to locate the categorical features with few missing values.\n\nWe start our cleaning with the features having just few missing value (1 to 4): We fill the gap with forward fill method:","6bd54bad":"# get the best parameters\ngrid_search.best_params_","41c56810":"We sort the columns containing the outliers shown in the graph, we will use the function head() to show the outliers: head(number of outliers or dots shown in each plot)","3a1ee0dc":"#### Note: We start machine learning by setting the features and target:\n\n* Features: x\n* Target: y","4d8a3eee":"# Missing values percentage per column with less than 80 % ","11fa94cf":" Note!! the clean from missing values and apply  Feature Engineering  Required Combine between train and test sets\n and and clean outliers apply only training set","2eb26b9d":"We can safely remove those points.","4d7c0dd7":"### 6.6 Fit the model on test data","bdfa6a6b":"Clean and Edit Dataframes\nWe must combine train and test datasets. Because This processes are must be carried out together","7a58a85f":"\nFeature engineering is very important to improve the model's performance, I will start in this kernel just with the TotalArea, Bathrooms and average year features and will keep updating the kernel by creating new features","28337ada":"### 5.2 Outliers localization:","fb778a24":"1-Split the data to train\/test\n2-Scale the data\n3-Gridsearch for the best hyperparameters\n4-Predict the target\n5-Evaluate the prediction\n\n##### The function takes as input parameters:\n\n* x: the features\n* y: the target\n* modelo: Ridge(default), Lasso, ElasticNetCV\n* scaler: RobustScaler(default), MinMaxScaler, StandardScaler","3917419d":"Nice! The most important feature is the new feature we created \"TotalArea\".\n\nOther features such as neighborhood or overall quality are among the main important features.","91e43f0f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n# warm_start = store and reuse previous fit values\n# n_iter_no_change = used for early stopping, terminates the training process if validation score is not improving for this many iterations\ngrb = GradientBoostingRegressor(warm_start=True, n_iter_no_change=15)\nx_train, x_test, y_train, y_test = split_data(X, y)\n\nnum_estimators = [100, 250, 500]\nlearn_rates = [0.05, 0.1]\ndepths = [3, 5, None]\n\n# test different values of n_estimators to see which one would yield better results\nparams = {'n_estimators': num_estimators, 'max_depth': depths, 'learning_rate': learn_rates}\n\n# cv = 5 -> 5-fold Cross Validation\ngrid_search = GridSearchCV(estimator=grb, param_grid=params, cv=5, return_train_score=True)\ngrid_search.fit(x_train, y_train)","0b86e5ca":"# 2- Data cleaning","2904f78e":"# let's view each model\/parameters in detail\n# total_size = 3*2*3 = 18\nfor i in range(18):\n    print('Parameters:', grid_search.cv_results_['params'][i])\n    print('Mean Test Score:', grid_search.cv_results_['mean_test_score'][i])\n    print('Rank', grid_search.cv_results_['rank_test_score'][i])","318c80d5":"# 6- Machine Learning:","83b479fa":"Next, we try ElasticNet. A regressor that combines both ridge and Lasso. We use cross validation to find:\n\nAlpha\nRatio between Ridge and Lasso, for a better combination of both","1964462a":"y_pred = gbr_model.predict(x_test)\n\nr2, mse, rmse, rmsle = get_score(y_test, y_pred)\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_pred))))\n\n","9fca4aca":"Averaging the 3 best models: Stacking, Voting and Lasso gave the best results: The lowest RMSE\n\nThe coefficients assigned to the 3 models were tested manually, the models combination above gave the best RMSE score","ac8954af":"#### 6.5 Gradient Boosted Regressor","daf87941":"## REGULARIZATION RECAP","b2a87253":" Features with >80% missing values , we will drop ","661132cd":"The skewness and kurtosis values look fine after log transform. We can now move forward to Machine Learning.\n\nP.S.To get our original SalePrice values back, we will apply\n###  np.expm1\nat the end of the study to cancel the log1p transformation after training and testing the models.","26949dd2":"Grid Search for hyperparameter tuning","39715854":"# Gradient Boosting Regressor with Hyperparameters as per Grid Search\n\nhyper_param = grid_search.best_params_\n\ngradient_reg = GradientBoostingRegressor(n_estimators=hyper_param['n_estimators'], max_depth=hyper_param['max_depth'],\n                                         learning_rate=hyper_param['learning_rate'])\n\nx_train, x_test, y_train, y_test = split_data(X, y)\n\ngradient_reg.fit(x_train, y_train)","7b33546d":"#### Lasso regression\n* Next we try Lasso regularization: Similar procedure as ridge regularization but Lasso tends to have a lot of 0 entries in it and just few nonzeros (easy selection). * In other words, lasso drops the uninformative features and keeps just the important ones.\n* As with Ridge regularization, we need to find the alpha parameter that penalizes the error\n* it use L1","4d354741":"We gather all the outliers index positions and drop them from the target dataset","a202fda5":"The outliers are the points in the right that have a larger area or value but a very low sale price. We localize those points by sorting their respective columns\n * Interesting! The outlier in \"basement\" and \"first floor\" features is the same as the first outlier in ground living area: The outlier with index number 1298.","88035d82":" We isolate the missing values from the rest of the dataset to have a good idea of how to treat them ","91e693e5":"#### We use RobustScaler to scale our data because it's powerful against outliers\n#### we already detected some but there must be some other outliers out there","85b45918":"Number of missing values per column in  Categorical features after the drop missing values with > 80%","a1234deb":"\n\n### 4.1 Numerical features:\nWe start with numerical features that are actually categorical, for example \"Month sold\", the values are from 1 to 12, each number is assigned to a month November is number 11 while March is number 3. 11 is just the order of the months and not a given value, so we convert the \"Month Sold\" feature to categorical","9dd6e213":"### 6.3 Regularization:","bb38237b":"## numerical features correlation","5207ea86":"### Positively skewed data:\nIf tail is on the right as that of the second image in the figure, it is right skewed data. It is also called positive skewed data.","a3c638bf":"#### Averaging Regressors","087994a0":"### 6.2 Linear regression","fbbf336c":"We do the same thing with \"SalePrice\" Target values column, we localize those outliers and make sure they are the right outliers to remove.\n\nThey both have the same price range as the detected outliers. So, we can safely drop them.","d2d2fc22":"We stack all the previous models, including the votingregressor with XGBoost as the meta regressor:","b1d28bc9":"### ElasticNet:","1107e1de":"## Log transform skewed numeric features:\nLog transform skewed numeric features:\nWe want our skewness value to be around 0 and kurtosis less than 3. For more information about skewness and kurtosis,I recommend reading this article.\n\nHere are two examples of skewed features: Ground living area and 1st floor SF. We will apply np.log1p to the skewed variables.","3dc21ce5":" # Descriptive statistics ","40ae3925":"So, 18 categorical features and 10 numerical features to clean.\n\nWe start with the numerical features, first thing to do is have a look at them to learn more about their distribution and decide how to clean them:\nMost of the features are going to be filled with 0s because we assume that they don't exist, for example GarageArea, GarageCars with missing values are simply because the house lacks a garage.\nGarageYrBlt: Year garage was built can't be filled with 0s, so we fill with the median (1980).","21495d05":"### 5.1 Outliers visualization:\nThis part of the kernel will be a little bit messy. I didn't want to deal with the outliers in the combined dataset to keep the shape of the original train and test datasets. Dropping them would shift the location of the rows.\n\n* If you know a better solution to this, I will be more than happy to read your recommandations.\n\n* OK. So we go back to our original train dataset to visualize the important features \/ Sale price scatter plot to find outliers","3a69b581":"But before going any further, we start by cleaning the data from missing values. I set the threshold to 80% (red line), all columns with more than 80% missing values will be dropped.","5dc5c93d":"### Then, we split them to train and test sets","2f8bac44":"###### Our goal is to minimize the error, we use regularization methods: Ridge, Lasso and ElasticNet, in order to lower the squared error","6515734c":"y_pred = gradient_reg.predict(x_test)\n\nr2, mse, rmse, rmsle = get_score(y_test, y_pred)\n\nprint('Root Mean Square Error test = ' + str(math.sqrt(sklm.mean_squared_error(y_test, y_pred))))\n","54cab893":"Last thing to do is average our regressors and fit them on the testing dataset","9220893d":"# Before  compelete cleaning the data, we zoom at the features with missing values, those missing values won't be treated equally. Some features have barely 1 or 2 missing values, we will use the forward fill method to fill them.","462e1513":"#### 6.5 ENSEMBLE METHODS:\n   * VOTING REGRESSOR:\n   \n        ** A voting regressor is an ensemble meta-estimator that fits base regressors each on the whole dataset. It, then, averages the individual predictions to form                 a final prediction.    ","f23042e9":"We split them to:\n\n* Categorical features\n* Numerical features","5dc6e1b4":"We will try other kind of regressors, such as XGBRegressor and ExtraTreesRegressor","786a2c45":"#### 6.4 XGB and ExtraTrees regressors:","9091e9d6":"#### STACKING REGRESSOR:","bc33feff":"# Correlation Matrix","75df7214":"We are done with the cleaning and feature engineering. Now, we split the combined dataset to the original train and test sets\nAfter Cleaning and feature engineering to apply outliers on training set ","0fdfa144":"#  Categorical features:","1c327a8c":"# 4- Encoding categorical features:","6b0bab89":"#  Now what do we do in combine data that contains less than 80% missing values ","e85fe5e9":"First thing to do is get rid of the features with more than 80% missing values (figure above). \nFor example the PoolQC's missing values are probably due to the lack of pools in some buildings, which is very logical. But replacing those (more than 80%) missing values with \"no pool\" will leave us with a feature with low variance, and low variance features are uniformative for machine learning models. So we drop the features with more than 80% missing values.","ccc7c756":"If skewness value lies above +1 or below -1, data is highly skewed. If it lies between +0.5 to -0.5, it is moderately skewed. If the value is 0, then the data is symmetric","51cdae28":"### 6.1 Preprocessing","f13b7f22":"### Negatively skewed data:\nIf the tail is to the left of data, then it is called left skewed data. It is also called negatively skewed data.","53e8b8c4":"[codeburst.io\/2-important-statistics-terms-you-need-to-know-in-data-science-skewness-and-kurtosis-388fef94eeaa](http:\/\/)","3781099f":"# 3- Feature engineering:\n\nSince the area is a very important variable,\n we will create a new feature \"TotalArea\"\n that sums the area of all the floors and the basement\n\n * Bathrooms: All the bathroom in the ground floor\n * Year average: The average of the sum of the year the house was built and the year the house was remodeled","7a3ffefd":"# scatter plot","63120cf6":"# baseline Gradient Boosted Regressor\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ngbr_model = GradientBoostingRegressor()\n\nx_train, x_test, y_train, y_test = split_data(X, y)\n\ngbr_model.fit(x_train, y_train)","9d86f97f":"### 4.2 One hot encoding","87f8f252":"We dealt already with small missing values or values that can't be filled with \"0\" such as Garage year built.\nThe rest of the features are mostly basement and garage related with 100s of missing values, \nwe will just fill 0s in the numerical features and 'None' in categorical features, assuming that the houses don't have basements, full bathrooms or garage","f4fe6f95":"# split training data into numeric and categorical data","ac51f49c":"correlation_train=train.corr()\nsb.set(font_scale=2)\nplt.figure(figsize = (50,35))\nax = sb.heatmap(correlation_train, annot=True,annot_kws={\"size\": 25},fmt='.1f',cmap='PiYG', linewidths=.5)","9c5c94f0":"Last thing to do before Machine Learning is to log transform the target as well, as we did with the skewed features.\n\nP.S. Log transoform is only applied on the target in this version, not on the features. I will be applying the log transoform on the features in future versions of this kernel","e7eea420":"# 5- Outliers detection:","89f07b4d":"#### We first start by trying the very basic regression model: Linear regression.\n\n##### We use 5- Fold cross validation for a better error estimate:","fd054fb7":"### before the cleaning data we combine training and test data in order to remain keep the same structure","8068edeb":"#### Ridge regression: \n      * Minimize squared error + a term alpha that penalizes the error\n      * We need to find a value of alpha that minimizes the train and test error (avoid overfitting)\n      * it use L2","b08d5a41":"NOT Skewness basically gives the shape of normal distribution of values.","80b0f12f":"* We check next, the important features that our model used to make predictions\n* The number of uninformative features that were dropped. Lasso give a 0 coefficient to the useless features, we will use the coefficient given to the important feature to plot the graph","ce1b3f52":"define some helper functions, which would be used repeatedly","b450efd1":"# Numerical features:","2b1841f2":"# **1- Exploratory data analysis**\n","2e673604":"##### In regularization we worked with 3 algorithms: Ridge (L2), Lasso (L1) and ElasticNet that is a combination of both L2 and L1 regressors. \n##### Before moving to the next section of this work, I would like to introduce a function that does all the work we did above in details just with one line of code. \n##### The function does all the regression pipeline:","215628bb":"And we have 18 Categorical features with missing values:\nSome features have just 1 or 2 missing values, so we will just use the forward fill method because they are obviously values that can't be filled with 'None's Features with many missing values are mostly basement and garage related (same as in numerical features) so as we did with numerical features (filling them with 0s), we will fill the categorical missing values with \"None\"s assuming that the houses lack basements and garages"}}