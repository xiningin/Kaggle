{"cell_type":{"0a1dcb56":"code","15073a93":"code","da89a8f2":"code","dca1a616":"code","58f4332f":"code","d819cc16":"code","60b8ddf7":"code","cd1c3d1f":"code","bc352f7c":"code","70a7c404":"code","f9b10228":"code","1c77c1c2":"code","0f5644be":"code","2e9b1331":"code","3041c79f":"code","2269f461":"code","3a143ec3":"code","4c5d83a8":"code","c983c5c4":"code","803b0000":"code","ee615b6b":"code","4790ab48":"code","728531c9":"code","5f5317a9":"code","eacf2837":"code","349ceb9a":"code","786acbdb":"code","44384e56":"code","22308bc1":"code","14ae4384":"code","d1c1fd34":"code","041de13b":"code","d8dbd11d":"code","1737b398":"code","ec4cb569":"code","cf6e6bd0":"code","4052dc5e":"code","58f363e5":"code","4b9fe046":"code","74d57f47":"code","73acd641":"code","58533467":"code","ae9420de":"code","a221a294":"code","3cb98650":"code","e33e9ee3":"code","1e5b7da5":"code","d25a85eb":"code","46b019de":"code","2754d500":"code","65728f95":"code","35704877":"code","83b18d0d":"code","6d549fd3":"code","500d195e":"code","c6683b1f":"code","ed3831fe":"code","faf9029f":"code","7b84f3f3":"code","7868801d":"markdown","e620224b":"markdown","0b36fe7e":"markdown","adfc880b":"markdown","bf18ad58":"markdown","34143a77":"markdown","811e1da5":"markdown","11eea808":"markdown","162636cb":"markdown","4411c500":"markdown","bcd8f5d3":"markdown","e35352d7":"markdown","1ada384e":"markdown"},"source":{"0a1dcb56":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\n%matplotlib inline","15073a93":"import warnings\nwarnings.simplefilter(action='ignore', category=Warning)\n\npd.set_option('display.max_columns', None)\nfifa = pd.read_csv(r'..\/input\/fifa19\/data.csv',index_col=0)","da89a8f2":"fifa.head()","dca1a616":"fifa.info()","58f4332f":"fifa.drop(['ID','Photo','Flag','Club Logo','Real Face','Jersey Number','Loaned From'],\n          axis=1,inplace=True)","d819cc16":"#Numerical Features\nfifa['International Reputation'].fillna(fifa['International Reputation'].mean(), inplace = True) \nfifa['Skill Moves'].fillna(fifa['Skill Moves'].mean(), inplace = True)\nfifa['Weak Foot'].fillna(fifa['Weak Foot'].mean(), inplace = True)\nfifa['Crossing'].fillna(fifa['Crossing'].mean(), inplace = True)\nfifa['Finishing'].fillna(fifa['Finishing'].mean(), inplace = True)\nfifa['HeadingAccuracy'].fillna(fifa['HeadingAccuracy'].mean(), inplace = True)\nfifa['ShortPassing'].fillna(fifa['ShortPassing'].mean(), inplace = True)\nfifa['Volleys'].fillna(fifa['Volleys'].mean(), inplace = True)\nfifa['Dribbling'].fillna(fifa['Dribbling'].mean(), inplace = True)\nfifa['Curve'].fillna(fifa['Curve'].mean(), inplace = True) \nfifa['FKAccuracy'].fillna(fifa['FKAccuracy'].mean(), inplace = True)\nfifa['LongPassing'].fillna(fifa['LongPassing'].mean(), inplace = True)\nfifa['BallControl'].fillna(fifa['BallControl'].mean(), inplace = True)\nfifa['Acceleration'].fillna(fifa['Acceleration'].mean(), inplace = True)\nfifa['SprintSpeed'].fillna(fifa['SprintSpeed'].mean(), inplace = True)\nfifa['Agility'].fillna(fifa['Agility'].mean(), inplace = True)\nfifa['Reactions'].fillna(fifa['Reactions'].mean(), inplace = True)\nfifa['Balance'].fillna(fifa['Balance'].mean(), inplace = True)\nfifa['ShotPower'].fillna(fifa['ShotPower'].mean(), inplace = True)\nfifa['Jumping'].fillna(fifa['Jumping'].mean(), inplace = True)\nfifa['Stamina'].fillna(fifa['Stamina'].mean(), inplace = True)\nfifa['Strength'].fillna(fifa['Strength'].mean(), inplace = True)\nfifa['LongShots'].fillna(fifa['LongShots'].mean(), inplace = True)\nfifa['Aggression'].fillna(fifa['Aggression'].mean(), inplace = True)\nfifa['Interceptions'].fillna(fifa['Interceptions'].mean(), inplace = True)\nfifa['Positioning'].fillna(fifa['Positioning'].mean(), inplace = True)\nfifa['Vision'].fillna(fifa['Vision'].mean(), inplace = True)\nfifa['Penalties'].fillna(fifa['Penalties'].mean(), inplace = True)\nfifa['Composure'].fillna(fifa['Composure'].mean(), inplace = True)\nfifa['Marking'].fillna(fifa['Marking'].mean(), inplace = True)\nfifa['StandingTackle'].fillna(fifa['StandingTackle'].mean(), inplace = True)\nfifa['SlidingTackle'].fillna(fifa['SlidingTackle'].mean(), inplace = True)\nfifa['GKDiving'].fillna(fifa['GKDiving'].mean(), inplace = True)\nfifa['GKHandling'].fillna(fifa['GKHandling'].mean(), inplace = True)\nfifa['GKKicking'].fillna(fifa['GKKicking'].mean(), inplace = True)\nfifa['GKPositioning'].fillna(fifa['GKPositioning'].mean(), inplace = True)\nfifa['GKReflexes'].fillna(fifa['GKReflexes'].mean(), inplace = True)","60b8ddf7":"def value_and_wage_conversion(Value):\n    if isinstance(Value,str):\n        out = Value.replace('\u20ac', '')\n        if 'M' in out:\n            out = float(out.replace('M', ''))*1000000\n        elif 'K' in Value:\n            out = float(out.replace('K', ''))*1000\n        return float(out)\n\n\nfifa['Value'] = fifa['Value'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Wage'] = fifa['Wage'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Release Clause'] = fifa['Release Clause'].apply(lambda x: value_and_wage_conversion(x))\nfifa['Release Clause'].fillna(fifa['Release Clause'].mean(), inplace = True)","cd1c3d1f":"fifa['Club'].fillna('No Club', inplace = True)\nfifa['Position'].fillna('unknown',inplace=True)","bc352f7c":"def clean_date(x):\n    l=[]\n    if isinstance(x,str):\n        l=x.split(\", \")\n        x=l[-1]\n    return(x)\n\nfifa['Joined']=fifa['Joined'].replace(np.nan,0)\nfifa['Joined'] = fifa['Joined'].apply(clean_date).astype('str')","70a7c404":"import datetime\nfifa['Contract Valid Until']=pd.to_datetime(fifa['Contract Valid Until'])\nfifa['year'] = pd.DatetimeIndex(fifa['Contract Valid Until']).year.astype(str)\nfifa['Contract Valid Until'].fillna('Not available', inplace = True) ","f9b10228":"def clean_height(x):\n    l=[]\n    s=1\n    if isinstance(x,str):\n        l=x.split(\"'\")\n        i=int(l[0])\n        j=int(l[1])\n        s=((i*12)+j)\/12\n    return(s)\n\n\nfifa['Height'] = fifa['Height'].apply(clean_height)\nfifa['Height'].fillna((fifa['Height'].mean()), inplace = True)","1c77c1c2":"\ndef clean_weight(x):\n    \n    if isinstance(x,str):\n        return(x.replace('lbs', ''))\n    return(x)\n\nfifa['Weight'] = fifa['Weight'].apply(clean_weight).astype('float')\nfifa['Weight'].fillna((fifa['Weight'].mean()), inplace = True) ","0f5644be":"fifa['Work Rate'].value_counts()","2e9b1331":"fifa['Work Rate'].fillna('Medium\/ Medium', inplace = True)","3041c79f":"fifa['Preferred Foot'].value_counts()","2269f461":"fifa['Preferred Foot'].fillna('Right', inplace = True)","3a143ec3":"#Body Type Column\nfifa['Body Type'].value_counts()","4c5d83a8":"fifa['Body Type'][fifa['Body Type'] == 'Messi'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'C. Ronaldo'] = 'Normal'\nfifa['Body Type'][fifa['Body Type'] == 'Neymar'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'Courtois'] = 'Lean'\nfifa['Body Type'][fifa['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\nfifa['Body Type'][fifa['Body Type'] == 'Shaqiri'] = 'Stocky'\nfifa['Body Type'][fifa['Body Type'] == 'Akinfenwa'] = 'Stocky'\nfifa['Body Type'].fillna('Normal', inplace = True)","c983c5c4":"def skillConverter(val):\n    if type(val) == str:\n        s1 = val[0:2]\n        s2 = val[-1]\n        val = int(s1) + int(s2)\n        return val\n    else:\n        return val\n\nskill_columns = ['LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM',\n       'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM', 'CDM', 'RDM',\n       'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']\n\nfor col in skill_columns:\n    fifa[col] = fifa[col].apply(skillConverter)\n    fifa[col].fillna(0.0, inplace = True)","803b0000":"fifa.head()","ee615b6b":"x = fifa['Age']\nplt.figure(figsize=(10,8))\nax = sns.countplot(x,color='#00ffff')\nax.set_xlabel(xlabel = 'Age of the Players', fontsize = 16)\nax.set_title(label = 'Distribution of Age of the Players', fontsize = 20)\nplt.show()","4790ab48":"overall = pd.DataFrame(fifa.groupby([\"Age\"])['Overall'].mean())\npotential = pd.DataFrame(fifa.groupby([\"Age\"])['Potential'].mean())\n\nmerged = pd.merge(overall, potential, on='Age', how='inner')\nmerged['Age']= merged.index\n\nfig, ax = plt.subplots(figsize=(10,8))\n\nmerged.reset_index(drop = True, inplace = True)\n\nplt.plot('Age', 'Overall', data=merged, marker='.', color='#00ffff', lw=1, label =\"Overall\" )\nplt.plot('Age', 'Potential', data=merged, marker='+', color='#0000cc', lw=1, label = \"Potential\")\nplt.xlabel('Overall Rating')\nplt.ylabel('Average Growth Potential by Age')\nplt.legend();","728531c9":"club = fifa.groupby('Club')['Value'].mean().reset_index().sort_values('Value', ascending=True).tail(20)\nfig = px.bar(club, x=\"Value\", y=\"Club\", orientation='h')\nfig.show()","5f5317a9":"club = fifa.groupby('Club')['Overall'].mean().reset_index().sort_values('Overall', ascending=True).tail(20)\nfig = px.bar(club, x=\"Overall\", y=\"Club\", orientation='h')\nfig.show()","eacf2837":"player_features = ['Crossing', 'Finishing', 'HeadingAccuracy',\n       'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'FKAccuracy',\n       'LongPassing', 'BallControl', 'Acceleration', 'SprintSpeed',\n       'Agility', 'Reactions', 'Balance', 'ShotPower', 'Jumping',\n       'Stamina', 'Strength', 'LongShots', 'Aggression', 'Interceptions',\n       'Positioning', 'Vision', 'Penalties', 'Composure', 'Marking',\n       'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']\ndf_postion  = pd.DataFrame()\nfor position_name, features in fifa.groupby(fifa['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    df_postion[position_name] = tuple(top_features)\ndf_postion.head()","349ceb9a":"position = []\nplayer = []\nclub_l = []\nfor col in df_postion.columns:\n    tmp_df = pd.DataFrame()\n    l = [df_postion[col].values]\n    l = l[0]\n    l = list(l)\n    l.append('Name')\n    tmp_df = pd.DataFrame.copy(fifa[fifa['Position'] == col][l])\n    tmp_df['mean'] = np.mean(tmp_df.iloc[: , :-1] , axis = 1)\n    name = tmp_df['Name'][tmp_df['mean'] == tmp_df['mean'].max()].values[0]\n    club = fifa['Club'][fifa['Name'] == str(name)].values[0]\n    position.append(col)\n    player.append(name)\n    club_l.append(club)\n    \ngk = ['GK']\nforward = ['LS', 'ST', 'RS','LF', 'CF', 'RF']\nmidfeilder = ['LW','RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM',\n              'RCM', 'RM', 'LDM', 'CDM', 'RDM' ]\ndefenders = ['LWB','RWB', 'LB', 'LCB', 'CB',]\n\nprint('GoalKeeper : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in gk:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nFORWARD : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in forward:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nMIDFEILDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in midfeilder:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))\nprint('\\nDEFENDER : ')\nfor p , n , c in zip(position , player , club_l):\n    if p in defenders:\n        print('{} [Club : {} , Position : {}]'.format(n , c , p))","786acbdb":"CAM='H. Nakagawa'\nCB='D. God\u00edn'\nCDM='Casemiro'\nCF='S. Giovinco'\nCM='N. Ke\u00efta'\nGK='De Gea'\nLAM='Paulo Daineiro'\nLB='Jordi Alba'\nLCB='G. Chiellini'\nLCM='David Silva'\nLDM='N. Kant\u00e9'\nLF='E. Hazard'\nLM='Douglas Costa'\nLS='J. Mart\u00ednez'\nLW='Neymar Jr'\nLWB='M. Pedersen'\nRAM='J. Cuadrado'\nRB='N\u00e9lson Semedo'\nRCB='Sergio Ramos'\nRCM='L. Modri\u0107'\nRDM='P. Pogba'\nRF='L. Messi'\nRM='Gelson Martins'\nRS='A. Saint-Maximin'\nRW='R. Sterling'\nRWB='M. Millar'\nST='Cristiano Ronaldo' ","44384e56":"def create_football_formation(formation = [] , label_1 = None ,\n                              label_2 = None , label_3 = None ,\n                              label_4 = None,label_4W = None ,\n                              label_5 = None , label_3W = None):\n    \n    plt.scatter(x = [1] , y = [6] , s = 300 , color = 'blue')\n    plt.annotate('De Gea \\n(Manchester United)' , (1 - 0.5 , 6 + 0.5))\n    plt.plot(np.ones((11 , ))*1.5 , np.arange(1 , 12) , 'w-')\n    plt.plot(np.ones((5 , ))*0.5 , np.arange(4 , 9) , 'w-')\n    \n    n = 0\n    for posi in formation:\n        if posi ==  1:\n            n += 3\n            dot = plt.scatter(x = [n]  , y = [6] , s = 400 , color = 'white')\n            plt.scatter(x = [n]  , y = [6] , s = 300 , color = 'red')\n            for i, txt in enumerate(label_1):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, ( n-0.5 , 6+0.5))\n            \n        elif posi == 2:\n            n += 3\n            y = [5 , 7.5]\n            x = [ n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_2):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')') \n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n        elif posi == 3:\n            n+=3\n            y = [3.333 , 6.666 , 9.999]\n            x = [n , n  , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_3):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n            if not label_3W == None:\n                n+=3\n                y = [3.333 , 6.666 , 9.999]\n                x = [n , n  , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_3W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n        elif posi == 4 and not label_4 == None:\n            n+=3\n            y = [2.5 , 5 , 7.5 , 10]\n            x = [n , n  , n , n ]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_4):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n            if not label_4W == None:\n                n+=3\n                y = [2.5 , 5 , 7.5 , 10]\n                x = [n , n  , n , n ]\n                plt.scatter(x  , y , s = 400 , color = 'white')\n                plt.scatter(x  , y , s = 300 , color = 'red')\n                for i, txt in enumerate(label_4W):\n                    txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                    plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n                \n                \n        elif posi == 5:\n            n+=3\n            y = [2 , 4 , 6 , 8 , 10]\n            x = [n , n , n  , n  , n]\n            plt.scatter(x  , y , s = 400 , color = 'white')\n            plt.scatter(x  , y , s = 300 , color = 'red')\n            for i, txt in enumerate(label_5):\n                txt = str(txt+'\\n('+fifa['Club'][fifa['Name'] == txt].values[0]+')')\n                plt.annotate(txt, (x[i] - 0.5, y[i]+0.5))\n            \n    plt.plot(np.ones((5 , ))*(n+0.5) , np.arange(4 , 9) , 'w-')\n    plt.plot(np.ones((11 , ))*(n\/2) , np.arange(1 , 12) , 'w-')\n    plt.yticks([])\n    plt.xticks([])\n    ax = plt.gca()\n    ax.set_facecolor('#28fc03')            ","22308bc1":"plt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('Best Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LAM , LDM , RDM , RAM],\n                         label_2 = [LS , RS],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LDM , RDM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LB , CB , RCB , RB],\n                         label_4W = [LW , LCM , RCM , RW],\n                         label_2 = [CF , ST],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_4W = [LW , LCM , CM , RW],\n                         label_2 = [LF , RF],\n                         )\nplt.title('OR\\nBest Fit for formation 4-4-2')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LF , CAM , RF],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LB , RB , RWB],\n                         label_2 = [LAM , RAM],\n                         label_3 = [LW , CF , RW],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))\ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , CB , RCB , RWB],\n                         label_2 = [CM , CAM],\n                         label_3 = [LF , CM , RF],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\n\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 2 , 3 , 1] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_2 = [LCM , RCM],\n                         label_3 = [LDM , CAM , RDM],\n                         label_1 = [ST])\nplt.title('OR\\nBest Fit for formation 4-2-3-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 5, 4 , 1 ] , \n                         label_5 = [LWB , LCB , CB , RCB , RWB],\n                         label_4 = [LW, LDM , RDM , RW],\n                         label_1 = [ST])\nplt.title('Best Fit for formation 5-4-1')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , LCB , RCB , RWB],\n                         label_3 = [LW, CAM , RW],\n                         label_3W = [LF , ST , RF])\nplt.title('Best Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CM , RAM],\n                         label_3W = [LS , CF , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3 ] , \n                         label_4 = [LB , LCB , RCB , RB],\n                         label_3 = [LDM, CDM , RDM],\n                         label_3W = [LF , CF , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LAM, CAM , RAM],\n                         label_3W = [LS , ST , RS])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n\nplt.figure(1 , figsize = (15 , 7))           \ncreate_football_formation(formation = [ 4 , 3] , \n                         label_4 = [LWB , CB , RB , RWB],\n                         label_3 = [LCM, CAM , RCM],\n                         label_3W = [LF , ST , RF])\nplt.title('OR\\nBest Fit for formation 4-3-3')\nplt.show()\n\n","14ae4384":"#Get a count of Nationalities in the Dataset, make of list of those with over 250 Players (Major Playing Nations)\nnat_counts = fifa[\"Nationality\"].value_counts()\nnat_list = nat_counts[nat_counts > 250].index.tolist()\n\ndef major_nation(df):\n    if (df[\"Nationality\"] in nat_list):\n        return 1\n    else:\n        return 0\n    \nfifa['Major_Nation'] = fifa.apply(major_nation,axis = 1)","d1c1fd34":"#Turn Preferred Foot into a binary indicator variable\ndef right_footed(df):\n    if (df['Preferred Foot'] == 'Right'):\n        return 1\n    else:\n        return 0\nfifa['Right_Foot'] = fifa.apply(right_footed, axis=1)","041de13b":"#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n    \nfifa['Simple_Position'] = fifa.apply(simple_position,axis = 1)","d8dbd11d":"tempwork = fifa[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True) \nfifa[\"WorkRate1\"]= tempwork[0]   \nfifa[\"WorkRate2\"]= tempwork[1]","1737b398":"fifa.drop(['Name','Nationality','Club','Wage','Preferred Foot','Work Rate','Position','Joined',\n          'Contract Valid Until','Release Clause','year'],axis=1,inplace=True)","ec4cb569":"fifa.head()","cf6e6bd0":"fifa['Body Type'].unique()","4052dc5e":"body_type= {\n    'Lean':0,\n           'Normal':1,\n           'Stocky':2\n}\nfifa['Body Type'] = fifa['Body Type'].map(body_type)","58f363e5":"fifa['Simple_Position'].unique()","4b9fe046":"simple_position = {\n    'ST':0,\n    'AM':1,\n    'GK':2,\n    'MF':3,\n    'DF':4,\n    'DM':5,\n    'unknown':6\n}\nfifa['Simple_Position'] = fifa['Simple_Position'].map(simple_position)","74d57f47":"fifa['WorkRate1'].unique()","73acd641":"fifa['WorkRate2'].unique()","58533467":"work_rate ={\n    'Medium':0,\n    'High':1,\n    'Low':2\n}\nfifa['WorkRate1'] = fifa['WorkRate1'].map(work_rate)\nfifa['WorkRate2'] = fifa['WorkRate2'].map(work_rate)","ae9420de":"fifa.drop(['Body Type','Simple_Position', 'WorkRate1','WorkRate2'],axis=1, inplace=True)","a221a294":"fifa.head()","3cb98650":"fifa.columns","e33e9ee3":"X = fifa[['Age','Overall', 'Potential','Special','International Reputation', 'Weak Foot', \n          'Skill Moves', 'Height', 'Weight','Crossing', 'Finishing', 'HeadingAccuracy', \n          'ShortPassing', 'Volleys','Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', \n          'BallControl','Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n          'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n          'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n          'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n          'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes',\n          'Major_Nation', 'Right_Foot']]\ny = np.log1p(fifa['Value'])","1e5b7da5":"sns.distplot(y,kde=False)","d25a85eb":"y_index = y[y>7].index\nX = X.loc[y_index]\ny = y[y>7]\nprint(X.shape, y.shape)","46b019de":"X.head()","2754d500":"X.shape","65728f95":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import MinMaxScaler\nX_norm = MinMaxScaler().fit_transform(X)\n\nsel_ = SelectFromModel(Lasso(alpha=.0001, random_state=42)) \nsel_.fit(X_norm, y)","35704877":"sel_.get_support()","83b18d0d":"selected_feat = X.columns[(sel_.get_support())]\n\n# let's print some stats\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))\nprint('features with coefficients shrank to zero: {}'.format(\n    np.sum(sel_.estimator_.coef_ == 0)))","6d549fd3":"selected_feat","500d195e":"X_model = X[selected_feat]\nX_model.shape","c6683b1f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_model, y, test_size=0.3, random_state=42)","ed3831fe":"print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","faf9029f":"from sklearn.metrics import mean_squared_error, explained_variance_score, r2_score\n\ndef plot_prediction_analysis(y, y_pred, figsize=(10,4), title=''):\n    fig, axs = plt.subplots(1, 2, figsize=figsize)\n    axs[0].scatter(y, y_pred)\n    mn = min(np.min(y), np.min(y_pred))\n    mx = max(np.max(y), np.max(y_pred))\n    axs[0].plot([mn, mx], [mn, mx], c='red')\n    axs[0].set_xlabel('$y$')\n    axs[0].set_ylabel('$\\hat{y}$')\n    rmse = np.sqrt(mean_squared_error(y, y_pred))\n    evs = explained_variance_score(y, y_pred)\n    r2 = r2_score(y, y_pred)\n    axs[0].set_title('rmse = {:.2f}, evs = {:.2f}, r2 = {:,.2f}'.format(rmse, evs, r2))\n    \n    axs[1].hist(y-y_pred, bins=50)\n    avg = np.mean(y-y_pred)\n    std = np.std(y-y_pred)\n    axs[1].set_xlabel('$y - \\hat{y}$')\n    axs[1].set_title('Histrogram prediction error, $\\mu$ = {:.2f}, $\\sigma$ = {:.2f}'.format(avg, std))\n    \n    if title!='':\n        fig.suptitle(title)","7b84f3f3":"from sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\n\nmodel = Pipeline((\n        (\"standard_scaler\", StandardScaler()),\n        (\"poly\", PolynomialFeatures(degree=2)),\n        (\"lin_reg\", Lasso(alpha=0.01))\n    ))\n\nmodel.fit(X_train, y_train)\n\ny_train_pred = model.predict(X_train)\n\nplot_prediction_analysis(y_train, y_train_pred, title='Polynomial Model - Trainingset')\n\ny_test_pred = model.predict(X_test)\nplot_prediction_analysis(y_test, y_test_pred, title='Polynomial Model - Testset')","7868801d":"### Feature Engineering","e620224b":"### Top Features for every Playing Position","0b36fe7e":"### Modeling","adfc880b":"### Eliminating the columns from analysis","bf18ad58":"### Dream Team","34143a77":"### Data Cleaning","811e1da5":"### Dream Team in different Formation","11eea808":"### Top 20 teams with highest player's average value","162636cb":"### Converting Categorical to Numerical columns","4411c500":"### Top 20 teams with highest player's average Overall rating","bcd8f5d3":"### Feature Selection","e35352d7":"#### Distribution of age for each Players","1ada384e":"#### Distribution of Age By Potential and Overall Rating"}}