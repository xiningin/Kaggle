{"cell_type":{"67b27873":"code","14ae7c9f":"code","78c84573":"code","b6c4149f":"code","dfb3441a":"code","1ac4f543":"code","fbe24e19":"code","6f4b0ba3":"code","a99369e3":"code","4e853eba":"code","54dd2402":"code","d414b470":"code","9e01048e":"code","31509e75":"code","f9d0896c":"code","1284c1b2":"code","ee02cbbd":"code","16274126":"code","a078116c":"code","fccdfa41":"code","a84383e7":"code","4101e9cd":"code","01887087":"code","72feacee":"code","aa9f9895":"code","498a27f7":"code","92f59d52":"markdown","3c23f4ca":"markdown","26fb8556":"markdown","45fd1abe":"markdown","bd8bd8fa":"markdown","7b1e39b9":"markdown","cba3df08":"markdown","8c345aea":"markdown","f82bba6d":"markdown","baeb8f94":"markdown","c5caa601":"markdown","aa8c1ea1":"markdown"},"source":{"67b27873":"!pip install POT","14ae7c9f":"# import modules\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport ot","78c84573":"# export dataset locations\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b6c4149f":"# upload map image\nimg = mpimg.imread('\/kaggle\/input\/citymap\/map.png')","dfb3441a":"# bakery information\nbakeries_xy = np.array([\n    [490, 425],\n    [865, 280],\n    [940, 510],\n    [950, 415],\n    [600, 730],\n])\n    \nbakery_p = np.array([33, 40, 24, 15, 12])\nbakery_p = bakery_p\/bakery_p.sum()\n\n# cafe information\ncafes_xy = np.array([\n    [500, 220],\n    [620, 440],\n    [750, 530],\n    [1060, 510]\n])\ncafe_p = np.array([33, 35, 40, 16])\ncafe_p = cafe_p\/cafe_p.sum()","1ac4f543":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# show map\nax.imshow(img, interpolation='bilinear')  # plot the map\n\n# visualize bakery locations - size shows how much goods they have\nax.scatter(bakeries_xy[:, 0], bakeries_xy[:, 1], s=bakery_p * 1500, \n           c='r', ec='k', label='Bakeries')\n\n# visualize cafe locations - size shows how much goods they can receive\nax.scatter(cafes_xy[:, 0], cafes_xy[:, 1],s=cafe_p * 1500,\n           c='b', ec='k', label='Caf\u00e9s')\n\nax.legend(fontsize = 'x-large')\nax.set_title('Ljubljana Bakeries and Caf\u00e9s')\n\nfig.tight_layout()\nplt.show()","fbe24e19":"# calculate the distances between the bakeries and cafes\ncost_matrix = ot.dist(bakeries_xy, cafes_xy)","6f4b0ba3":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(ncols=2, figsize=(25, 12), gridspec_kw={'width_ratios': [3, 1]})\n\n# show the map\nax[0].imshow(img, interpolation='bilinear')  # plot the map\n\n# iterate through the cafes\nfor i in range(len(cafes_xy)):\n    ax[0].text(cafes_xy[i, 0], cafes_xy[i, 1], str(i), color='b',\n            fontsize=24, fontweight='bold', ha='center', va='center')\n    \n# interate through the bakeries\nfor i in range(len(bakeries_xy)):\n    ax[0].text(bakeries_xy[i, 0], bakeries_xy[i, 1], str(i), color='r',\n            fontsize=24, fontweight='bold', ha='center', va='center')\n\n# set the title\nax[0].set_title('Ljubljana Bakeries and Caf\u00e9s')\n\n\n# output distance matrix\nim = ax[1].imshow(cost_matrix)\n\n# show the transport matrix used to transport the goods\nfor i in range(cost_matrix.shape[0]):\n   for j in range(cost_matrix.shape[1]):\n        ax[1].text(j, i, '{0:g}'.format(cost_matrix[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\ncbar = plt.colorbar(im, ax=ax[1], shrink=0.5, use_gridspec=True)\ncbar.ax.set_ylabel(\"cost\", rotation=-90, va=\"bottom\")\n\nax[1].set_xticks(np.arange(len(cafes_xy)))\nax[1].set_yticks(np.arange(len(bakeries_xy)))\n\nax[1].set_title('Cost matrix')\n\nax[1].set_xlabel('Caf\u00e9s')\nax[1].set_ylabel('Bakeries')\n\nfig.tight_layout()\nplt.show()","a99369e3":"# calculate OT with the EMD\not_emd = ot.emd(bakery_p, cafe_p, cost_matrix)","4e853eba":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(ncols=2, figsize=(24, 12))\n\n# output distance matrix\nim = ax[0].imshow(cost_matrix)\n\n# show the transport matrix used to transport the goods\nfor i in range(cost_matrix.shape[0]):\n   for j in range(cost_matrix.shape[1]):\n        ax[0].text(j, i, '{0:g}'.format(cost_matrix[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\ncbar = plt.colorbar(im, ax=ax[0], shrink=0.5, use_gridspec=True)\ncbar.ax.set_ylabel(\"cost\", rotation=-90, va=\"bottom\")\n\nax[0].set_xticks(np.arange(len(cafes_xy)))\nax[0].set_yticks(np.arange(len(bakeries_xy)))\n\nax[0].set_title('Cost matrix')\n\nax[0].set_xlabel('Caf\u00e9s')\nax[0].set_ylabel('Bakeries')\n\nax[1].imshow(ot_emd)\n# show the transport matrix used to transport the goods\nfor i in range(len(bakery_p)):\n   for j in range(len(cafe_p)):\n        ax[1].text(j, i, '{0:g}'.format(ot_emd[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\nax[1].set_xticks(np.arange(len(cafes_xy)))\nax[1].set_yticks(np.arange(len(bakeries_xy)))\n\nax[1].set_title('Transport matrix')\nax[1].set_xlabel('Caf\u00e9s')\nax[1].set_ylabel('Bakeries')\n\nfig.tight_layout()\nplt.show()","54dd2402":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# plot the map\nax.imshow(img, interpolation='bilinear')  \n\n# draw the lines between bakeries and cafes\n# each line shows how much goods will be transported\n# from bakery i to cafe j\nfor i in range(len(bakeries_xy)):\n   for j in range(len(cafes_xy)):\n       ax.plot([bakeries_xy[i, 0], cafes_xy[j, 0]], [bakeries_xy[i, 1], cafes_xy[j, 1]],\n               '-k', lw=3. * ot_emd[i, j] \/ ot_emd.max())\n        \n# label the cafes\nfor i in range(len(cafes_xy)):\n    ax.text(cafes_xy[i, 0], cafes_xy[i, 1], str(i), color='b', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n    \n# label the bakeries\nfor i in range(len(bakeries_xy)):\n    ax.text(bakeries_xy[i, 0], bakeries_xy[i, 1], str(i), color='r', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n\n# set the title\nax.set_title('Ljubljana Bakeries and Caf\u00e9s')\n\nfig.tight_layout()\nplt.show()","d414b470":"reg = 0.1 # regularization\nnit = 100 # number of iterations\n\n\nK = np.exp(-cost_matrix \/ cost_matrix.max() \/ reg)\nu = np.ones((len(bakery_p),))\n\nfor i in range(1, nit):\n    v = cafe_p \/ np.dot(K.T, u)\n    u = bakery_p \/ (np.dot(K, v))\n    \not_sink_algo = np.atleast_2d(u).T * (K * v.T)  # Equivalent to np.dot(np.diag(u), np.dot(K, np.diag(v)))","9e01048e":"# Compute Sinkhorn transport matrix with POT\not_sinkhorn = ot.sinkhorn(bakery_p, cafe_p, reg=reg, M=cost_matrix \/ cost_matrix.max())","31509e75":"# Difference between the 2\ndiff = np.sum(np.power(ot_sink_algo - ot_sinkhorn, 2))\nprint('Difference between algo and ot.sinkhorn = {0:.2g}'.format(diff))","f9d0896c":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(ncols=2, figsize=(20, 10))\n\n# output distance matrix\nim = ax[0].imshow(cost_matrix)\n\n# show the transport matrix used to transport the goods\nfor i in range(cost_matrix.shape[0]):\n   for j in range(cost_matrix.shape[1]):\n        ax[0].text(j, i, '{0:g}'.format(cost_matrix[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\ncbar = plt.colorbar(im, ax=ax[0], shrink=0.5, use_gridspec=True)\ncbar.ax.set_ylabel(\"cost\", rotation=-90, va=\"bottom\")\n\nax[0].set_xticks(np.arange(len(cafes_xy)))\nax[0].set_yticks(np.arange(len(bakeries_xy)))\n\nax[0].set_title('Cost matrix')\n\nax[0].set_xlabel('Caf\u00e9s')\nax[0].set_ylabel('Bakeries')\n\nax[1].imshow(ot_sink_algo)\n# show the transport matrix used to transport the goods\nfor i in range(len(bakery_p)):\n   for j in range(len(cafe_p)):\n        ax[1].text(j, i, '{0:g}'.format(ot_sink_algo[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\nax[1].set_xticks(np.arange(len(cafes_xy)))\nax[1].set_yticks(np.arange(len(bakeries_xy)))\n        \nax[1].set_title('Transport matrix')\nax[1].set_xlabel('Caf\u00e9s')\nax[1].set_ylabel('Bakeries')\n\nfig.tight_layout()\nplt.show()","1284c1b2":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# plot the map\nax.imshow(img, interpolation='bilinear')  \n\n# draw the lines between bakeries and cafes\n# each line shows how much goods will be transported\n# from bakery i to cafe j\nfor i in range(len(bakeries_xy)):\n   for j in range(len(cafes_xy)):\n       ax.plot([bakeries_xy[i, 0], cafes_xy[j, 0]], [bakeries_xy[i, 1], cafes_xy[j, 1]],\n               '-k', lw=3. * ot_sink_algo[i, j] \/ ot_sink_algo.max())\n        \n# label the cafes\nfor i in range(len(cafes_xy)):\n    ax.text(cafes_xy[i, 0], cafes_xy[i, 1], str(i), color='b', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n    \n# label the bakeries\nfor i in range(len(bakeries_xy)):\n    ax.text(bakeries_xy[i, 0], bakeries_xy[i, 1], str(i), color='r', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n\n# set the title\nax.set_title('Ljubljana Bakeries and Caf\u00e9s')\n\nfig.tight_layout()\nplt.show()","ee02cbbd":"# bakery information\nbakeries_xy = np.array([\n    [490, 425],\n    [865, 280],\n    [940, 510],\n    [950, 415],\n    [600, 730],\n])\n    \nbakery_pd = np.array([33, 50, 24, 35, 22])\nbakery_p = bakery_pd\/bakery_pd.sum()\n\n# cafe information\ncafes_xy = np.array([\n    [500, 220],\n    [620, 440],\n    [750, 530],\n    [1060, 510]\n])\ncafe_pd = np.array([33, 35, 40, 16])\ncafe_p = cafe_pd\/cafe_pd.sum()","16274126":"print(\"Bakey goods:\", bakery_pd.sum())\nprint(\"Cafe goods:\", cafe_pd.sum())\nprint(\"Difference:\", bakery_pd.sum() - cafe_pd.sum())","a078116c":"# cafe information\ncafes_xy = np.array([\n    [500, 220],\n    [620, 440],\n    [750, 530],\n    [1060, 510],\n    [0, 0] # the additional cafe\n])\ncafe_pd = np.array([33, 35, 40, 16, 40])\ncafe_p = cafe_pd\/cafe_pd.sum()","fccdfa41":"print(\"Bakey goods:\", bakery_pd.sum())\nprint(\"Cafe goods:\", cafe_pd.sum())\nprint(\"Difference:\", bakery_pd.sum() - cafe_pd.sum())","a84383e7":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# show map\nax.imshow(img, interpolation='bilinear')  # plot the map\n\n# visualize bakery locations - size shows how much goods they have\nax.scatter(bakeries_xy[:, 0], bakeries_xy[:, 1], s=bakery_p * 1500, \n           c='r', ec='k', label='Bakeries')\n\n# visualize cafe locations - size shows how much goods they can receive\nax.scatter(cafes_xy[:, 0], cafes_xy[:, 1],s=cafe_p * 1500,\n           c='b', ec='k', label='Caf\u00e9s')\n\nax.legend(fontsize = 'x-large')\nax.set_title('Ljubljana Bakeries and Caf\u00e9s')\n\nfig.tight_layout()\nplt.show()","4101e9cd":"# calculate the distances between the bakeries and cafes\ncost_matrix = ot.dist(bakeries_xy, cafes_xy)","01887087":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(ncols=2, figsize=(25, 12), gridspec_kw={'width_ratios': [3, 1]})\n\n# show the map\nax[0].imshow(img, interpolation='bilinear')  # plot the map\n\n# iterate through the cafes\nfor i in range(len(cafes_xy)):\n    ax[0].text(cafes_xy[i, 0], cafes_xy[i, 1], str(i), color='b',\n            fontsize=24, fontweight='bold', ha='center', va='center')\n    \n# interate through the bakeries\nfor i in range(len(bakeries_xy)):\n    ax[0].text(bakeries_xy[i, 0], bakeries_xy[i, 1], str(i), color='r',\n            fontsize=24, fontweight='bold', ha='center', va='center')\n\n# set the title\nax[0].set_title('Ljubljana Bakeries and Caf\u00e9s')\n\n\n# output distance matrix\nim = ax[1].imshow(cost_matrix)\n\n# show the transport matrix used to transport the goods\nfor i in range(cost_matrix.shape[0]):\n   for j in range(cost_matrix.shape[1]):\n        ax[1].text(j, i, '{0:g}'.format(cost_matrix[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\ncbar = plt.colorbar(im, ax=ax[1], shrink=0.5, use_gridspec=True)\ncbar.ax.set_ylabel(\"cost\", rotation=-90, va=\"bottom\")\n        \nax[1].set_xticks(np.arange(len(cafes_xy)))\nax[1].set_yticks(np.arange(len(bakeries_xy)))\n\nax[1].set_title('Cost matrix')\n\nax[1].set_xlabel('Caf\u00e9s')\nax[1].set_ylabel('Bakeries')\n\nfig.tight_layout()\nplt.show()","72feacee":"# calculate OT with the EMD\not_emd = ot.emd(bakery_p, cafe_p, cost_matrix)","aa9f9895":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(ncols=2, figsize=(20, 10))\n\n# output distance matrix\nim = ax[0].imshow(cost_matrix)\n\n# show the transport matrix used to transport the goods\nfor i in range(cost_matrix.shape[0]):\n   for j in range(cost_matrix.shape[1]):\n        ax[0].text(j, i, '{0:g}'.format(cost_matrix[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\ncbar = plt.colorbar(im, ax=ax[0], shrink=0.5, use_gridspec=True)\ncbar.ax.set_ylabel(\"cost\", rotation=-90, va=\"bottom\")\n\nax[0].set_xticks(np.arange(len(cafes_xy)))\nax[0].set_yticks(np.arange(len(bakeries_xy)))\n\nax[0].set_title('Cost matrix')\n\nax[0].set_xlabel('Caf\u00e9s')\nax[0].set_ylabel('Bakeries')\n\nax[1].imshow(ot_emd)\n# show the transport matrix used to transport the goods\nfor i in range(len(bakery_p)):\n   for j in range(len(cafe_p)):\n        ax[1].text(j, i, '{0:g}'.format(ot_emd[i, j]),\n                   ha=\"center\", va=\"center\", color=\"w\")\n\nax[1].set_title('Transport matrix')\nax[1].set_xlabel('Caf\u00e9s')\nax[1].set_ylabel('Bakeries')\n\nfig.tight_layout()\nplt.show()","498a27f7":"# visualize the bakery and cafe locations\nfig, ax = plt.subplots(figsize=(20, 20))\n\n# plot the map\nax.imshow(img, interpolation='bilinear')  \n\n# draw the lines between bakeries and cafes\n# each line shows how much goods will be transported\n# from bakery i to cafe j\nfor i in range(len(bakeries_xy)):\n   for j in range(len(cafes_xy)):\n       ax.plot([bakeries_xy[i, 0], cafes_xy[j, 0]], [bakeries_xy[i, 1], cafes_xy[j, 1]],\n               '-k', lw=3. * ot_emd[i, j] \/ ot_emd.max())\n        \n# label the cafes\nfor i in range(len(cafes_xy)):\n    ax.text(cafes_xy[i, 0], cafes_xy[i, 1], str(i), color='b', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n    \n# label the bakeries\nfor i in range(len(bakeries_xy)):\n    ax.text(bakeries_xy[i, 0], bakeries_xy[i, 1], str(i), color='r', \n            fontsize=24, fontweight='bold', ha='center', va='center')\n\n# set the title\nax.set_title('Ljubljana Bakeries and Caf\u00e9s')\n\nfig.tight_layout()\nplt.show()","92f59d52":"### Difference between the two algorithm results","3c23f4ca":"### Solve the Optimal Transport problem\n\nTo solve the OT problem, we are going to use the EMD algorithm.\nThis algoritm requires both distributions (e.g. bakery and cafe \ncapacities) and the cost matrix (e.g. the cost for transporting\nthe goods from one location to another).","26fb8556":"### Solve the Optimal Transport problem\n\nTo solve the OT problem, we are going to use the EMD algorithm.\nThis algoritm requires both distributions (e.g. bakery and cafe \ncapacities) and the cost matrix (e.g. the cost for transporting\nthe goods from one location to another).","45fd1abe":"### Get the Cost Matrix\n\nThe cost matrix is calculated using the Euclid distance between the points.\nIf we would want to have a better aproximation (more realistic) we would need\nto measure the distances via the roads. But since this is an example, Euclid \nwill suffice.","bd8bd8fa":"## Example 2: Bakeries and Cafes with different good amounts\n\nTthis example shows how one can use optimal transport to find the optimal way to move the goods from the bakeries to the cafes.\n**Here, the amount of goods that the bakeries produce is NOT the same as the amount of goods the cafes can take.**","7b1e39b9":"### Sinkhorn algorithm using `ot`","cba3df08":"### Get the Cost Matrix\n\nThe cost matrix is calculated using the Euclid distance between the points.\nIf we would want to have a better aproximation (more realistic) we would need\nto measure the distances via the roads. But since this is an example, Euclid \nwill suffice.","8c345aea":"# Sinkhorn Algorithm\n\nThe sinkhorn algorithm is used for solving Optimal Transport problems using \nregularization. While the algorithm is available in the `ot` package, one can\neasily implement it from scrach.\n\nIn this example, we will show how one can implement the sinkhorn algorithm \non its own.","f82bba6d":"## Example 1: Bakeries and Cafes\n\nIn this example we will show how one can use optimal transport to find the optimal way to move the goods from the bakeries to the cafes.\n\n**NOTE:** Here, the amount of goods that the bakeries produce is the same as the amount of goods the cafes can take.","baeb8f94":"# Optimal Transport Examples\n\nThis notebook contains examples of using optimal transport in different scenarios.\n\nThis notebook requires the following python packages:\n- numpy\n- matplotlib\n- ot\n\nWhile the rest are already available by default, one must install the `ot` package\nusing pip. The `ot` package is part of the Python Optimal Transport library.\n\n**Python Optimal Transport.** This open source libary provide several solvers for \noptimization problems related to Optimal Transport for signal, image processing and\nmachine learning: https:\/\/pythonot.github.io\/","c5caa601":"We can run the same code as before and we will get some solution. But this solution will not reflect the actual problem: **optimal transport algorithms assume that both distributions have the same mass.**\n\nBecause of this, we need to **ADD** an additional cafe that is **FAR AWAY FROM** the bakeries (has a high cost value) and is able to retrieve the difference of the mass, i.e. the 40 goods that bakeries overproduce. This will force the optimal transport algorithm move the excess bakery goods to the new cafe.","aa8c1ea1":"### Manual implementation of the Sinkhorn algorithm"}}