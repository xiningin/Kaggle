{"cell_type":{"59af54c7":"code","6ca4a229":"code","d458219d":"code","1de8a0dd":"code","e8491ae8":"code","021999df":"code","487b4b28":"code","f91bfce3":"code","46dca176":"code","fdd7a1e6":"markdown","76720ed0":"markdown"},"source":{"59af54c7":"import numpy as np\nfrom matplotlib import pyplot as plt","6ca4a229":"def measu(v, k):\n    return np.power((1\/len(v))*(np.sum(np.power(np.abs(v),k))),1\/k)\n\ndef compute_error_list_varying_outlier_value(n_iterations, v, k, n_outliers):\n    \n    v_new = v.copy()\n    measure_values = []\n    for outlier_value in range(0, 30):\n        for n in range(0, n_outliers):\n            v_new[n] = outlier_value\n\n        measure_values.append(measu(v_new, k))\n    return measure_values\n\ndef compute_l1_l2_l3_measure(percentage_outliers, v):\n    l1 = compute_error_list_varying_outlier_value(n_iterations=30, v=v, k=1, n_outliers=int(m*percentage_outliers))\n    l2 = compute_error_list_varying_outlier_value(n_iterations=30, v=v, k=2, n_outliers=int(m*percentage_outliers))\n    l3 = compute_error_list_varying_outlier_value(n_iterations=30, v=v, k=3, n_outliers=int(m*percentage_outliers))\n    \n    return [l1, l2, l3]\n\ndef plot_measure_by_outliers_values(percentage_outliers, v):\n    \n    percentage_outliers = round(percentage_outliers,3)\n    l = compute_l1_l2_l3_measure(percentage_outliers=percentage_outliers, v=v)\n    str_percentage = str(round(100*percentage_outliers,3)) + '%'\n    \n    fig, ax = plt.subplots(figsize=(8, 4), dpi=100)\n\n    \n    print('L2 is ', round(l[1][5]\/l[0][5], 3), ' times L1 for outliers = 5')\n    print('L3 is ', round(l[2][5]\/l[0][5], 3), ' times L1 for outliers = 5')\n    \n    print('L2 is ', round(l[1][20]\/l[0][20], 3), ' times L1 for outliers = 20')\n    print('L3 is ', round(l[2][20]\/l[0][20], 3), ' times L1 for outliers = 20')\n    \n    \n\n    fig.suptitle('{st} of error outliers'.format(st = str_percentage))\n    ax.plot(l[0], label='L1 norm')\n    ax.plot(l[1], label='L2 norm')\n    ax.plot(l[2], label='L3 norm')\n\n    ax.axvline(3, linestyle='--', color='r', label='Not biiiig outliers')\n    ax.axvline(20, linestyle='--', color='b', label='Very big outliers')\n\n    ax.set_xlabel('Outlier value')\n    ax.set_ylabel('Final measure value (L1, L2, L3)')\n\n    ax.legend()","d458219d":"# number of examples to be evaluated\nm = 1000\n\n# The error vector (y - h(x))\nv = np.random.normal(loc=0.0, scale=1.0, size=m)","1de8a0dd":"p = 0\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","e8491ae8":"p = 0.005\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","021999df":"p = 0.02\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","487b4b28":"p = 0.10\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","f91bfce3":"p = 0.30\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","46dca176":"p = 1\nplot_measure_by_outliers_values(percentage_outliers=p, v=v)","fdd7a1e6":"p: percentage of outliers you want to set in the error vector","76720ed0":"## Conclus\u00e3o\n\nQuanto maior o Norm (L3, L2, L1), mais penalizado \u00e9 o erro do exemplo outlier.\n\nConforme o valor dos outliers aumentam e se distanciam da distribui\u00e7\u00e3o normal do erro, mais distante ficam as diferen\u00e7as das m\u00e9tricas l3>l2>l1.\n\nA quantidade de outliers tamb\u00e9m implica nas diferen\u00e7as. Quando n\u00e3o h\u00e1 outliers e o erro est\u00e1 se comportando como uma Gaussiana, l3 \u00e9 naturalmente maior que l2 que \u00e9 naturalmente maior que l1. Com 2% de outliers l3, se torna relativamente bastantes vezes maior que l1.\n\n"}}