{"cell_type":{"c5278105":"code","75329b9d":"code","f6052ae2":"markdown"},"source":{"c5278105":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\n\n# Initialising the CNN\nclassifier = Sequential()\n# Step 1 - Convolution\nclassifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n\n# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n# Adding a second convolutional layer\nclassifier.add(Conv2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n\n# Step 3 - Flattening\nclassifier.add(Flatten())\n# Step 4 - Full connection\nclassifier.add(Dense(units = 128, activation = 'relu'))\nclassifier.add(Dense(units = 1, activation = 'sigmoid'))\n# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n\n# Part 2 - Fitting the CNN to the images\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\nshear_range = 0.2,\nzoom_range = 0.2,\nhorizontal_flip = True)\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntraining_set = train_datagen.flow_from_directory('..\/input\/cat-and-dogs\/dataset\/training_set',\ntarget_size = (64, 64),\nbatch_size = 32,\nclass_mode = 'binary')\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dogs\/dataset\/test_set',\ntarget_size = (64, 64),\nbatch_size = 32,\nclass_mode = 'binary')\nclassifier.fit_generator(training_set,\nsteps_per_epoch = 8000,\nepochs = 10,\nvalidation_data = test_set,\nvalidation_steps = 2000)","75329b9d":"# Part 3 - Making new predictions\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('..\/input\/testingimage\/d1.png', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = classifier.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n    prediction = 'dog'\nelse:\n    prediction = 'cat'\nprint(prediction)","f6052ae2":"# DOG vs CAT"}}