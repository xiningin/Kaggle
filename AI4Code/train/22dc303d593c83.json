{"cell_type":{"eb583981":"code","afa634c0":"code","389097e5":"code","dc900a43":"code","3b5b7126":"code","9491398c":"code","a42d7dde":"code","7ab3a6b5":"code","05182690":"code","b515c168":"code","431f995b":"code","f947aa02":"markdown","536456c0":"markdown","5e6bfeb3":"markdown","13790786":"markdown"},"source":{"eb583981":"import pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\nfrom learntools.core import *\n\niowa_file_path = '..\/input\/train.csv'\niowa_test_file_path = '..\/input\/test.csv'\ntrain_data = pd.read_csv(iowa_file_path)\ntest_data = pd.read_csv(iowa_test_file_path)\n\ny = train_data.SalePrice\ntrain_features = train_data.drop(['Id', 'SalePrice'], axis = 1)\ntest_data_no_id = test_data.drop(['Id'], axis = 1)","afa634c0":"# fill in missing numeric values\nfrom sklearn.impute import SimpleImputer\n\n# impute\ntrain_data_num = train_features.select_dtypes(exclude=['object'])\ntest_data_num = test_data_no_id.select_dtypes(exclude=['object'])\nimputer = SimpleImputer()\ntrain_num_cleaned = imputer.fit_transform(train_data_num)\ntest_num_cleaned = imputer.transform(test_data_num)\n\n# columns rename after imputing\ntrain_num_cleaned = pd.DataFrame(train_num_cleaned)\ntest_num_cleaned = pd.DataFrame(test_num_cleaned)\ntrain_num_cleaned.columns = train_data_num.columns\ntest_num_cleaned.columns = test_data_num.columns","389097e5":"# string columns: transform to dummies\ntrain_data_str = train_data.select_dtypes(include=['object'])\ntest_data_str = test_data_no_id.select_dtypes(include=['object'])\ntrain_str_dummy = pd.get_dummies(train_data_str)\ntest_str_dummy = pd.get_dummies(test_data_str)\ntrain_dummy, test_dummy = train_str_dummy.align(test_str_dummy, \n                                                join = 'left', \n                                                axis = 1)","dc900a43":"# convert numpy dummy tables to pandas DataFrame\ntrain_num_cleaned = pd.DataFrame(train_num_cleaned)\ntest_num_cleaned = pd.DataFrame(test_num_cleaned)","3b5b7126":"# joining numeric (after imputing) and string (converted to dummy) data\ntrain_all_clean = pd.concat([train_num_cleaned, train_dummy], axis = 1)\ntest_all_clean = pd.concat([test_num_cleaned, test_dummy], axis = 1)","9491398c":"# detect NaN in already cleaned test data \n# (there could be completely empty columns in test data)\ncols_with_missing = [col for col in test_all_clean.columns\n                                if test_all_clean[col].isnull().any()]\nfor col in cols_with_missing:\n    print(col, test_all_clean[col].isnull().any())","a42d7dde":"# since there are empty columns in test we need to drop them in train and test data\ntrain_all_clean_no_nan = train_all_clean.drop(cols_with_missing, axis = 1)\ntest_all_clean_no_nan = test_all_clean.drop(cols_with_missing, axis = 1)","7ab3a6b5":"# pipline + cross validation\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import cross_val_score\n\npipe = make_pipeline(XGBRegressor(n_estimators = 1300, learning_rate=0.04, random_state = 1))\nscore = cross_val_score(pipe, train_all_clean_no_nan, y, scoring = \"neg_mean_absolute_error\", cv = 4)\nprint(score)\nprint(\"Mean score: %d\" %(-1 * score.mean()))","05182690":"# To improve accuracy, create a new Random Forest model which you will train on all training data\npipe = make_pipeline(XGBRegressor(n_estimators = 1300, learning_rate=0.04, random_state = 1))\npipe.fit(train_all_clean_no_nan, y)","b515c168":"test_preds = pipe.predict(test_all_clean_no_nan)","431f995b":"output = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","f947aa02":"# Pipeline for XGBoost training and validation","536456c0":"# Missing and categorical values","5e6bfeb3":"# Pipeline for final XGBoost on all training data","13790786":"# Pipeline: make Predictions and submit"}}