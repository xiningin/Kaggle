{"cell_type":{"0683b545":"code","90f7aa4f":"code","b55f6eb4":"code","bcb19f16":"code","f3e8f9e0":"code","1df72f45":"code","128bdbfe":"code","62c2c5f4":"code","244690f6":"code","8eb4af3f":"code","d28c96ee":"code","277a373b":"code","2e779821":"code","7ad29afb":"code","2f69d65b":"code","b2bf797b":"code","c222839d":"code","a64c0977":"code","02014f12":"code","1e08291d":"code","22a5d54d":"code","d76382af":"code","f7ec13c3":"code","85586e58":"code","c2d419c4":"code","de3f5783":"code","41d84243":"code","178e7acf":"code","38277f76":"code","47ac4c18":"code","db75fd27":"code","22e74471":"code","1282a170":"code","a6838eb7":"code","5d68eebc":"code","36273d1d":"code","09907bb9":"code","7f189aea":"code","32a292ba":"code","a1cd9d70":"code","9ddf78d5":"code","0d8a5f2e":"code","a87a4666":"code","974637d8":"code","ae9ee6c1":"code","eba9a032":"code","3c5a77ab":"code","8d9a3bba":"code","878cd213":"code","b5b9355f":"code","6b16cc39":"code","4c7c625b":"code","49c9f311":"code","dae65b26":"code","baf5349a":"code","757be4bf":"code","87dd93dc":"code","4963fbf5":"code","edf2e5c3":"code","ded4e6e5":"code","faaed990":"code","02a9cc58":"code","fb52612a":"code","2668f543":"code","38899a9e":"code","fde24386":"code","bde2a42f":"code","a2f8190f":"code","e60621b4":"code","f1584f2f":"code","f794f62e":"code","af6298ad":"code","619eaa8f":"code","9b6bc9a3":"code","036bba28":"markdown","58e46981":"markdown","ebd0e64d":"markdown","7a0bafb0":"markdown","bc4ea37c":"markdown","5ac40f5a":"markdown","b26e2fc5":"markdown","4064adfa":"markdown","c3b372cb":"markdown","1f58b843":"markdown","f2491e32":"markdown","e8b1fde1":"markdown","27fb8302":"markdown","31a2b0ec":"markdown","f162e285":"markdown","c1e02813":"markdown","d030382e":"markdown","05e2b56c":"markdown","3a71f2c2":"markdown","e83973d6":"markdown","2995bfbd":"markdown","c6fd9995":"markdown","595b996b":"markdown","fa4011c4":"markdown","7e0fe4ba":"markdown","2e9f869e":"markdown","84544f88":"markdown","423faeae":"markdown","733c0db4":"markdown","e0785945":"markdown","6d7f888e":"markdown","b4a934dc":"markdown","0196de16":"markdown","6f06a822":"markdown"},"source":{"0683b545":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport datetime as dt\nimport folium","90f7aa4f":"link = 'https:\/\/raw.githubusercontent.com\/RamiKrispin\/coronavirus-csv\/master\/coronavirus_dataset.csv'","b55f6eb4":"df = pd.read_csv(link)\ndf.head()","bcb19f16":"df.info()","f3e8f9e0":"df.shape","1df72f45":"df.isnull().sum()","128bdbfe":"df.tail()","62c2c5f4":"df = df.rename(columns = {'Province.State': 'state', 'Country.Region': 'country'}) #renaming column names for better usuability","244690f6":"df[df.apply(lambda row: row.astype(str).str.contains('Recovered').any(), axis=1)]","8eb4af3f":"df[df['state'] == 'Recovered']['cases'].sum()","d28c96ee":"df = df[df['state'] != 'Recovered'] #data cleaning\ndf.shape","277a373b":"df = df.fillna('Not Available') #filling null values\ndf.isnull().sum()","2e779821":"df.head()","7ad29afb":"df[df['cases'] < 0]","2f69d65b":"df['cases'] = np.abs(df['cases'])\ndf[df['cases'] < 0]","b2bf797b":"df['date'] = pd.to_datetime(df['date']) #converting the date column to datetime format\ndf","c222839d":"df[df['cases'] == df['cases'].max()]","a64c0977":"df['date'].max()","02014f12":"date_country_total = df.groupby(['date']).sum()\ndate_country_total['cum_f'] = date_country_total['cases'].cumsum()\ndate_country_total.reset_index(inplace = True)\ndate_country_total.tail()","1e08291d":"print(\"Total number of people affected by COVID-19:\", date_country_total['cum_f'].iloc[-1])","22a5d54d":"df2 = df.copy()\ncases = df2.drop(['type', 'Lat', 'Long', 'state'], axis = 1)\ncases = df2[df2['type'] != 'recovered']\ncases = cases.groupby(['country','date']).sum()\ncases.reset_index(inplace = True)\ncou = list(cases['country'].unique())\n\nnew_df = pd.DataFrame()\nfor c in cou:\n    dfc = cases[cases['country'] == c]\n    dfc['cum_f'] = dfc['cases'].cumsum()\n    new_df = new_df.append(dfc, ignore_index = True)\n\n","d76382af":"new_df_50000 = new_df[(new_df['cum_f'] > 50000) & (new_df['country'] != 'China')]\nfig10 = px.line(new_df_50000, x = 'date', y = 'cum_f', color = 'country', title = 'Coronavirus Cases: Individual Countries (>50,000)')\nfig10.show() ","f7ec13c3":"new_df_100 = new_df[new_df['cum_f'] > 100]\nfig10 = px.line(new_df_100, x = 'date', y = 'cum_f', color = 'country', title = 'Coronavirus Cases: Individual Countries')\nfig10.show() ","85586e58":"new_df_100_except_china = new_df[(new_df['cum_f'] > 100) & (new_df['country'] != 'China')]\nfig11 = px.line(new_df_100_except_china, x = 'date', y = 'cum_f', color = 'country', title = 'Coronavirus Cases: Individual Countries (Except China)')\nfig11.show() ","c2d419c4":"px.line(date_country_total, x = 'date', y = 'cum_f', title = 'Coronavirus cases: World')","de3f5783":"px.line(date_country_total.tail(), x = 'date', y = 'cum_f', title = 'Coronavirus cases: World [Past 5 days]')","41d84243":"country_cases = df.groupby(['country', 'Lat', 'Long','type']).sum()\ncountry_cases.reset_index(inplace = True)\ncountry_cases['type'] = country_cases['type'].str.replace('confirmed','1')\ncountry_cases['type'] = country_cases['type'].str.replace('recovered','2')\ncountry_cases['type'] = country_cases['type'].str.replace('death','0')\ncountry_cases['type'] = pd.to_numeric(country_cases['type'])\ncountry_cases","178e7acf":"folium_map = folium.Map(location=[24.7117, 46.7242],\n                            zoom_start=1,\n                            tiles=\"CartoDB dark_matter\"\n                            )\n\nfor index, row in country_cases.iterrows():\n    radius_len = row['cases']\/1400\n    \n    if row['cases'] == 0:\n            color = '#ff0000' #red #death\n            radius = radius_len\n    elif row['type'] == 1:\n        color = '#ffd700' #gold #confirmed\n        radius = radius_len\n    elif row['type'] == 2:\n        color = '#00ff00' #green #recovered\n        radius = radius_len\n\n        \n    folium.CircleMarker(location = (row['Lat'],\n                                   row['Long']),\n                       radius = radius_len,\n                       color = color,\n                       fill = True).add_to(folium_map)\n                        \nfolium_map","38277f76":"#map_f = px.density_mapbox()","47ac4c18":"total_infection_type = df.groupby(['date', 'type']).sum()\ntotal_infection_type.reset_index(inplace = True)\ntotal_infection_type","db75fd27":"#finding the total number of cases for confirmed,recovered and deaths\n\ntotal_infection_type['cases_confirmed'] = total_infection_type[total_infection_type['type'] == 'confirmed']['cases'].cumsum()\ntotal_infection_type['cases_death'] = total_infection_type[total_infection_type['type'] == 'death']['cases'].cumsum()\ntotal_infection_type['cases_recovered'] = total_infection_type[total_infection_type['type'] == 'recovered']['cases'].cumsum()\ntotal_infection_type = total_infection_type.fillna(0)\ntotal_infection_type","22e74471":"#adding the columns to get total cases for each type in one column\ntotal_infection_type['total_cases'] = total_infection_type['cases_confirmed'] + total_infection_type['cases_death']+ total_infection_type['cases_recovered']","1282a170":"total_infection_type = total_infection_type.drop(['cases_confirmed', 'cases_death', 'cases_recovered'], axis = 1) #removing unneeded columns\ntotal_infection_type","a6838eb7":"f= px.line(total_infection_type, x = 'date', y = 'total_cases', color = 'type', title = 'COVID-19 cases: Confirmed Vs. Recovered Vs. Fatal')\nf.update_layout(hovermode = 'x')\nf.show()","5d68eebc":"print('Total number of confirmed cases:', total_infection_type['total_cases'].iloc[-3])\nprint('Total number of death cases:', total_infection_type['total_cases'].iloc[-2])\nprint('Total number of recovered cases:', total_infection_type['total_cases'].iloc[-1])\nprint('Fatality Rate:', round(((total_infection_type['total_cases'].iloc[-2]\/total_infection_type['total_cases'].iloc[-3])*100),2),'%')","36273d1d":"# only_confirmed_cases['cases'] = total_infection_type[total_infection_type['type'] == 'confirmed']\n# # only_confirmed_cases = only_confirmed_cases.drop()\n# only_death_cases = total_infection_type[total_infection_type['type'] == 'death']\n# only_death_cases.head()\n# rate = only_confirmed_cases['total_cases']\/only_death_cases['total_cases']\n# only_confirmed_cases","09907bb9":"infection_type = df.groupby(['country', 'date', 'type']).sum()","7f189aea":"infection_type.reset_index(inplace = True)","32a292ba":"infection_type.head()","a1cd9d70":"china_deaths = infection_type[(infection_type['country'] == 'China') & (infection_type['type'] == 'death')]['cases'].sum()","9ddf78d5":"a = infection_type.copy() \na = a[(a['country'] == 'Italy') & (a['type'] == 'confirmed')]\na['fre'] = a['cases'].cumsum()\na.tail()","0d8a5f2e":"infection_type[(infection_type['country'] == 'Italy') & (infection_type['type'] == 'death')]['cases'].sum()","a87a4666":"date_country = df.groupby(['country', 'date']).sum()\ndate_country.reset_index(inplace = True)\ndate_country","974637d8":"n_deaths = infection_type[infection_type['type'] == 'death']\nn_deaths.head()","ae9ee6c1":"def summary_stats(country):\n    \n    a = infection_type[infection_type['country'] == country].copy()\n    \n    fig2 = px.bar(date_country[(date_country['country'] == country) & date_country['cases'] > 0], x = 'date', y = 'cases', color = 'cases',color_continuous_scale=[\"blue\",\"yellow\",\"red\"], text = 'cases',title = 'Cases per day: {c}'.format(c = country))\n    fig2.update_traces(textposition = 'outside')\n    #fig2.update_layout(uniformtext_minsize=12)\n    \n    fig4 = px.bar(n_deaths[n_deaths['country'] == country], x = 'date', y = 'cases',color = 'cases',color_continuous_scale=[\"blue\",\"yellow\",\"red\"], text = 'cases', title = \"Number of deaths per day: {c}\".format(c = country))\n    fig4.update_traces(textposition = 'outside')\n                           \n\n#     fig2 = px.line(infection_type[(infection_type['country'] == country) & (infection_type['cases'] > 0)], x = 'date', y = 'cases', color = 'type', title = '{c}: Confirmed Vs. Recovered Vs. Deaths'.format(c = country))\n#     fig2.show()\n    \n    cum_freq = infection_type[(infection_type['country'] == country)].copy()\n    cum_freq['total'] = cum_freq['cases'].cumsum()\n    fig1 = px.line(cum_freq, x = 'date', y = 'total', title = 'Total number of people affected in {c}'.format(c = country))\n    \n    print(\"Quick summary for {c}:\".format(c= country))\n    print(\"\")\n    total = infection_type[(infection_type['country'] == country)]['cases'].sum()\n    print('Total number of people affected in {c}'.format(c = country), total)\n    \n    deaths = infection_type[(infection_type['country'] == country) & (infection_type['type'] == 'death')]['cases'].sum()\n    fatality_rate = round((deaths\/total)*100,2)\n    \n    for i in ['confirmed', 'death', 'recovered']:\n        total = infection_type[(infection_type['country'] == country) & (infection_type['type'] == i)]['cases'].sum()\n        print('Total number of {t} cases in {c}:'.format(t = i, c = country), total)\n        a[i] = a[(a['country'] == country) & (a['type'] == i)]['cases'].cumsum()\n    \n\n    print('Fatality Rate for {c}:'.format(c = country), fatality_rate, '%')\n    \n    \n        \n    a = a.fillna(0)\n    a['total'] = a['confirmed'] + a['death'] + a['recovered']\n    a = a.drop(['confirmed','death', 'recovered'], axis = 1)\n    \n    #annotations\n    date1 = a[(a['type'] == 'death') & (a['total'] >= china_deaths)]\n    check = date1.shape[0]\n\n    \n    fig3 = px.line(a, x = 'date', y = 'total', color = 'type', title = '{c}: Confirmed Vs. Recovered Vs. Deaths'.format(c = country))\n    fig3.update_layout(hovermode = 'x')\n        \n    if check > 0:\n        date1 = date1.iloc[0,1]\n        year = int(date1.strftime('%Y'))\n        month = int(date1.strftime('%m'))\n        day = int(date1.strftime('%d'))\n        fig3.update_layout(annotations = [\n            dict(\n            x = dt.date(year, month, day),\n            y = china_deaths,\n            xref = 'x',\n            yref = 'y',\n            showarrow = True,\n            text = \"Total deaths in China\",\n            )\n        ])\n#     ax.annotate('Test', mdates.date2num(date), china_deaths)\n    \n    fig1.show()\n    fig2.show()\n    fig4.show()\n    fig3.show()\n","eba9a032":"summary_stats('India')","3c5a77ab":"#india = pd.read_csv('https:\/\/raw.githubusercontent.com\/sandeshpatkar\/coronavirus-csv\/master\/india.csv')\nindia_data_link = 'https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vSAD0SPvZSXA6TWBih-uaKutfl-m_UewVBqozY-kk3HudlM-23Iput1XiRrzd8VopiQXvK5KoN5_Sl3\/pub?output=csv'\nindia = pd.read_csv(india_data_link)\nindia = india.dropna(axis = 1, how = 'all') #dropping NaN columns\nindia = india.dropna(axis = 0, how = 'all') ##dropping NaN rows\n\nindia.tail()","8d9a3bba":"#renaming columns\ncol = india.columns\n\nindia = india.rename(columns = {col[1]: 'State', col[2]:'confirmed', col[3]:'cured', col[4]:'death', col[5]:'Latitude', col[6]:'Longitude'})\n\nindia = india[:-3]\nindia.tail()","878cd213":"india.info()","b5b9355f":"india[['confirmed', 'cured', 'death']] = india[['confirmed', 'cured', 'death']].astype(float) #changing to numeric columns","6b16cc39":"# india['confirmed'] = india['confirmed_india'] + india['confirmed_other']\n# india.head()","4c7c625b":"map_india = folium.Map(location=[20.5936832, 78.962883],\n                            zoom_start=4,\n                            tiles=\"CartoDB dark_matter\"\n                            )\n\nfor index, row in india.iterrows():\n    radius_confirmed = row['confirmed']\/3\n    radius_death = row['death']\/3\n    radius_cured = row['cured']\/3\n        \n    folium.CircleMarker(location = (row['Latitude'],\n                                   row['Longitude']),\n                       radius = radius_confirmed,\n                       color = '#ffd700', #gold #confirmed\n                       fill = True,\n                       tooltip = row['State'],\n                       popup = 'Confirmed Cases:'+str(row['confirmed'])+'\\n'+'Cured:'+str(row['cured'])+'\\n'+'Deaths:'+str(row['death'])).add_to(map_india)\n    \n    folium.CircleMarker(location = (row['Latitude'],\n                                   row['Longitude']),\n                       radius = radius_cured,\n                       color = '#00ff00', #green #recovered\n                       fill = True,\n                       tooltip = row['State'],\n                       popup = 'Confirmed Cases:'+str(row['confirmed'])+'\\n'+'Cured:'+str(row['cured'])+'\\n'+'Deaths:'+str(row['death'])).add_to(map_india)\n    \n    folium.CircleMarker(location = (row['Latitude'],\n                                   row['Longitude']),\n                       radius = radius_death,\n                       color = '#ff0000',  #red #death\n                       fill = True,\n                       tooltip = row['State'],\n                       popup = 'Confirmed Cases:'+str(row['confirmed'])+'\\n'+'Cured:'+str(row['cured'])+'\\n'+'Deaths:'+str(row['death'])).add_to(map_india)\n\nmap_india","49c9f311":"summary_stats('China')","dae65b26":"summary_stats('Italy')","baf5349a":"summary_stats('Korea, South')","757be4bf":"summary_stats('Iran')","87dd93dc":"summary_stats('France')","4963fbf5":"summary_stats('US')","edf2e5c3":"summary_stats('Spain')","ded4e6e5":"summary_stats('Israel')","faaed990":"summary_stats('Pakistan')","02a9cc58":"summary_stats('Australia')","fb52612a":"def compare_country(c1, c2, case_type = 'confirmed'):\n    \n    df = infection_type.copy()\n    df.reset_index(inplace = True)\n    \n    con1 = df[(df['country'] == c1) & (df['type'] == case_type)].copy() #avoiding SettingWithCopy() warning\n    con1['total_{c}'.format(c = c1)] = con1['cases'].cumsum()\n    con1 = con1.drop(['index', 'Lat', 'Long', 'type'], axis = 1)\n    \n    con2 = df[(df['country'] == c2) & (df['type'] == case_type)].copy() #avoiding SettingWithCopy() warning\n    con2['total_{c}'.format(c = c2)] = con2['cases'].cumsum()\n    con2 = con2.drop(['index', 'Lat', 'Long','type'], axis = 1)\n    \n    #merging dataset\n    merged = con1.merge(con2, on = 'date', suffixes = ('_{}'.format(c1), '_{}'.format(c2)))\n    #print(merged.head())\n    \n    #plotting\n    fig = go.Figure(data = [\n        go.Bar(name = c1, x = merged['date'], y = merged['total_{}'.format(c1)]),\n        go.Bar(name = c2, x = merged['date'], y = merged['total_{}'.format(c2)])\n    ])\n    fig.update_layout(barmode='group')\n    fig.update_layout(hovermode = 'x')\n    fig.update_layout(title  = '{con1} vs. {con2} comparison: {type1}'.format(con1 = c1, con2 = c2, type1 = case_type.title()))\n    fig.show()","2668f543":"compare_country('Italy', 'China', 'death')","38899a9e":"compare_country('Italy', 'China', 'confirmed')","fde24386":"compare_country('Italy', 'Korea, South', 'confirmed')","bde2a42f":"compare_country('Italy', 'US')","a2f8190f":"compare_country('China', 'US')","e60621b4":"compare_country('US', 'United Kingdom')","f1584f2f":"compare_country('US', 'United Kingdom', 'death')","f794f62e":"compare_country('Spain', 'China', 'death')","af6298ad":"compare_country('Spain', 'Germany')","619eaa8f":"compare_country('Spain', 'Germany', 'death')","9b6bc9a3":"compare_country('France', 'Germany')","036bba28":"**Total affected worldwide (Confirmed + recovered + deaths): 2.96 Million**","58e46981":"## Pakistan","ebd0e64d":"## France","7a0bafb0":"## US","bc4ea37c":"## Israel","5ac40f5a":"### Compared to Italy, South Korea has managed to contain coronavirus infection more effectively.","b26e2fc5":"### Number of cases in US is rising sharply | 25th March 2020\n### Update: Number of cases in US surpass total cases in China\/Italy | 26th March 2020","4064adfa":"## Italy","c3b372cb":"### India Map","1f58b843":"### It seems that soon, Italy will overtake China in number of total confirmed cases ","f2491e32":"## Iran","e8b1fde1":"Checking for any more errors","27fb8302":"Due to emerging cases in Europe (especially Italy and Spain) and **US**, there is no flattening of curve.","31a2b0ec":"## China","f162e285":"# COVID-19 Worldwide Cases Analysis\n\nCoronavirus disease 2019 (COVID-19) is an infectious disease caused by the severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The disease has spread globally since 2019, resulting in the 2019\u201320 coronavirus pandemic. Common symptoms include fever, cough and shortness of breath. Muscle pain, sputum production and sore throat are less common symptoms. While the majority of cases result in mild symptoms, some progress to pneumonia and multi-organ failure. The deaths per number of diagnosed cases is estimated at between 1% and 5% but varies by age and other health conditions.[[1]](https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019)\n\nCoronavirus is a disease which originated in China in December 2019. The disease has been spreading through out different countries since then and on **11th March 2020 WHO has declared the COVID-19 as a pandemic**. As of 14th March 2020, **a total of 125 countries have been affected by this virus.**\n\nNew cases of infection are being reported daily. China has been the most affected country with over 140,000+ confirmed cases of the virus. Italy, South Korea and Iran are also badly affected by this virus while numbers of confirmed cases in other countries are increasing daily.\n\n# Summary (as of 17th April 2020)\n\n### Total cases worldwide: 2,966,280 (2.96M)\n### Confirmed cases: 2,240,286 (2.24M)\n### Recovered cases: 572059\n### Fatal cases today: 153935\n### Fatality Rate today: 6.87%","c1e02813":"# Country Wise Deep Dive","d030382e":"### The number of deaths in UK is quite high compared to the number of confirmed cases.\nThis could be due to the fact that initially, very few tests were conducted in UK [[1]](https:\/\/www.telegraph.co.uk\/news\/2020\/03\/23\/coronavirus-tests-uk-testing-how-many-people-tested-compared-countries\/). The number of deaths in UK indicates that there should be more people in UK which are not yet tested.","05e2b56c":"# Upvote if you like :)","3a71f2c2":"### Latest data update","e83973d6":"### On 25th March, Spain overtook China in number of deaths due to COVID-19 pandemic.","2995bfbd":"Since the descrepancies are not very big, we will convert these values to positive values by multiplying by -1","c6fd9995":"France, Spain and Germany also have thousands of confirmed cases of people infected with COVID-19. But, while Germany has 25,000 cases, the number of deaths are very less compared to other countries in Europe.","595b996b":"- Hover over the graph for exact values and more options in top right corner\n- Zoom in\/out using mouse\n- Double-click to select single country","fa4011c4":"## Country comparisons","7e0fe4ba":"## Spain","2e9f869e":"### Total number of people affected by COVID-19","84544f88":"Flattening of the curve here indicates that lesser number of new cases are being reported.","423faeae":"# Total confirmed cases vs. recovered cases vs. fatal cases\n\n- **Confirmed cases: 2,240,286 (2.24M)**\n- **Recovered cases: 572059**\n- **Fatal cases: 153935**\n- **Fatality Rate: 6.87%**","733c0db4":"## India","e0785945":"## Plotting on World Map","6d7f888e":"Data for India is taken from the Ministry of Health and Family Welfare website: https:\/\/www.mohfw.gov.in\/\nIt is updated automatically and is stored in this google sheet: [Google Sheet](bit.ly\/india_data_corona)\n\nTo use the data in your projects as a csv file, use this link: [India Dataset Link](https:\/\/docs.google.com\/spreadsheets\/d\/e\/2PACX-1vSAD0SPvZSXA6TWBih-uaKutfl-m_UewVBqozY-kk3HudlM-23Iput1XiRrzd8VopiQXvK5KoN5_Sl3\/pub?output=csv)\n","b4a934dc":"## South Korea","0196de16":"### On March 19 2020, number of deaths in Italy took over number of deaths in China.","6f06a822":"Converting ```date_country``` column to ```date_countryTime```  type"}}