{"cell_type":{"88c6d05e":"code","57f9dbb4":"code","14d5fdf6":"code","7683d15d":"code","f7d882f1":"code","74533b41":"code","7ca5381b":"code","8d2e7216":"code","d70f7c37":"code","3b78b2f3":"code","029039c9":"code","93e296d0":"code","0cd767df":"code","2c92d7f4":"code","778bf25f":"code","e9af1d4c":"code","e41b61f2":"code","62b49ddc":"code","209f8d8a":"code","a633bbb6":"code","7addc5cc":"code","58ffeda6":"code","b57dc1f2":"code","297bad92":"code","72948fe2":"markdown","2ccb9acb":"markdown","83e8e322":"markdown","ee84ce93":"markdown","22c3474e":"markdown","625761f9":"markdown","d9c32d3d":"markdown","66cc2ecf":"markdown","d79f30a7":"markdown"},"source":{"88c6d05e":"# !pip install pandas\n# !pip install numpy\n!pip install nltk\n# !pip install sklearn\n# !pip install textblob\n# !pip install --upgrade gensim\n# !pip3 install gTTS","57f9dbb4":"import pandas as pd\nimport numpy  as np\n\n# library to clean data \nimport re  \n  \n# Natural Language Tool Kit \nimport nltk  \n  \nnltk.download('stopwords') \n  \n# to remove stopword \nfrom nltk.corpus import stopwords \n  \n# for Stemming purpose  \nfrom nltk.stem.porter import PorterStemmer \n\n# for Lemmatization purpose\nfrom nltk.stem import WordNetLemmatizer \n  \n# Initialize empty array \n# to append clean text  \ncorpus = []  ","14d5fdf6":"# Lets say we have a text,here i have taken random text\n#first step is to get all the sentences in the paragragh and from sentences get all the words\n\ntext_rand = \"\"\"Good Morning Ladies and Gentleman \u2013 I hope this day finds you in the best of spirits.I warmly welcome you all here in today\u2019s speech ceremony on the subject called Leadership. I, Vaishali Rawat, your host for today, will address this topic. Leadership is quite a word in itself and I can very much relate with it because I am myself holding a position of senior manager in my present company. If given a chance, everyone would want to lead and be followed. But has anyone ever realized how difficult this task is and what roles and responsibilities come with it?\nFirst of all, please understand that leadership doesn\u2019t involve domination or subjugation of the weaker sex. The world is already full with such people who have an ardent desire to rule and take charge of other peoples\u2019 lives. But this is not the trait of a good leader.\nThe true leader is someone who earns respect through his rightful actions and mass following without any dictatorship. He inspires others to follow his footsteps and become the guiding light for the humanity. The great leader is someone who carries the torch of wisdom and enlightens the society thereby leading people to the path of progress and growth. Besides, the true meaning of leadership is having the requisite ability to enable people want to follow you while being under no compulsion as such to do so. Leaders are those people who set certain benchmarks and try to achieve those benchmarks by allowing people to judge them according to their actions and endeavors. The goals are set and all might is put towards achieving those goals, but without compromising with the ethics and morals \u2013 this is the true mark of a great leader.\nLeaders who possess great leadership qualities effectively channelize their energy and devote themselves for the growth and progress of humanity. The restrictions or obligations that he\/she imposes on himself\/herself enable him\/her to rise against all odds and never bow down to the circumstances. Always remember that the love of supreme excellence is found in a great leader. Thus, a true leader is someone who is able to establish a connection with the almighty and realizes by faith that he\/she is a mere instrument in the hands of Him and dedicates his entire life to become an inspirer and guide of the higher sentiments and ambitions of the people.\nHe\/she who is a leader in the true sense of the term has to pay the price for his forbearance and moral restraints. He\/she does good to the society selflessly, i.e. without expecting anything in return. This leads to further enhancement or cleansing of his\/her soul and keeping a check on his\/her personal desires, which in turn allows him\/her to become an extraordinary being.\nThere is an old-saying which is, \u201cTo be first in place, one must be first in merit as well.\u201d Thus, an individual actually becomes a leader when he\/she has the ability to lead mankind on the path of progress without any selfish reason.\"\"\"","7683d15d":"# Get all the sentences in a paragraph\nsentences = nltk.sent_tokenize(text_rand)","f7d882f1":"sentences_df = pd.DataFrame(sentences)\nsentences_df.head()","74533b41":"sentences_df.shape","7ca5381b":"# Get all the words in a sentence and remove the special characters using 're' library\nwords = nltk.word_tokenize(text_rand)","8d2e7216":"words","d70f7c37":"len(words)","3b78b2f3":"# Before we look into stemming lets remove the stop words which are not using for NLP analysis\n# Lets have a look at english stopwords\n\nstopwords.words('english')","029039c9":"# Lets remove the stops words and apply stemming on remaining words\n# creating PorterStemmer object to \n# take main stem of each word \n\nsentences = nltk.sent_tokenize(text_rand)\nstemmer = PorterStemmer()\n\n# Stemming\nfor i in range(len(sentences)):\n    sentences[i] = re.sub('[^a-zA-Z]',' ',sentences[i])\n    stem_word = nltk.word_tokenize(sentences[i].lower())\n    stem_word = [stemmer.stem(word) for word in stem_word if word not in set(stopwords.words('english'))]\n    sentences[i] = ' '.join(stem_word)  ","93e296d0":"sentences","0cd767df":"sentences = nltk.sent_tokenize(text_rand)\nlemmatizer = WordNetLemmatizer() \n# Stemming\nfor i in range(len(sentences)):\n    sentences[i] = re.sub('[^a-zA-Z]',' ',sentences[i])\n    lem_word = nltk.word_tokenize(sentences[i].lower())\n    lem_word = [lemmatizer.lemmatize(word) for word in lem_word if word not in set(stopwords.words('english'))]\n    sentences[i] = ' '.join(lem_word)  ","2c92d7f4":"sentences","778bf25f":"ps = PorterStemmer()\nwordnet=WordNetLemmatizer()\nsentences = nltk.sent_tokenize(text_rand)\ncorpus = []\nbow = []\n\n# here you can try both stemming and lemmatization and see the difference\nfor i in range(len(sentences)):\n    sent = re.sub('[^a-zA-Z]', ' ', sentences[i])\n    sent = sent.lower()\n    sent = sent.split()\n#     sent = [ps.stem(word) for word in sent if not word in set(stopwords.words('english'))]\n    sent = [wordnet.lemmatize(word) for word in sent if not word in set(stopwords.words('english'))]\n    bow.append(sent)\n    sent = ' '.join(sent)\n    corpus.append(sent)\n    \n# Creating the Bag of Words model, you can play around with the max_features\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features = 1000)\nBoW_count = cv.fit_transform(corpus).toarray()","e9af1d4c":"corpus","e41b61f2":"flat_list = [word for sub_word in bow for word in sub_word]","62b49ddc":"flat_list","209f8d8a":"# Number of features created for BagOfWords\nlen(flat_list)","a633bbb6":"X_df = pd.DataFrame(BoW_count)\nX_df","7addc5cc":"ps = PorterStemmer()\nwordnet=WordNetLemmatizer()\nsentences = nltk.sent_tokenize(text_rand)\ncorpus_tfidf = []\nfor i in range(len(sentences)):\n    sent = re.sub('[^a-zA-Z]', ' ', sentences[i])\n    sent = sent.lower()\n    sent = sent.split()\n    sent = [wordnet.lemmatize(word) for word in sent if not word in set(stopwords.words('english'))]\n    sent = ' '.join(sent)\n    corpus_tfidf.append(sent)\n    \n# Creating the TF-IDF model\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ncv = TfidfVectorizer()\nX_tfidf = cv.fit_transform(corpus_tfidf).toarray()","58ffeda6":"X_tfidf_df = pd.DataFrame(X_tfidf)\nX_tfidf_df","b57dc1f2":"# gensim library for word embedding\nfrom gensim.models import Word2Vec\n\n# define training data\nsentences = [['this', 'is', 'the', 'first', 'sentence', 'for', 'word2vec'],\n            ['this', 'is', 'the', 'second', 'sentence'],\n            ['yet', 'another', 'sentence'],\n            ['one', 'more', 'sentence'],\n            ['and', 'the', 'final', 'sentence']]\n\n# train model\nmodel = Word2Vec(sentences, min_count=1)\n\n# summarize the loaded model\nprint(model)\n\n# summarize vocabulary\nwords = list(model.wv.vocab)\nprint(words)\n\n# access vector for one word\nprint(model['sentence'])\n\n# save model\nmodel.save('model.bin')\n\n# load model\nnew_model = Word2Vec.load('model.bin')\nprint(new_model)","297bad92":"# lets see the word which has the highest prob of coming after words 'this' and 'is'\n# we can play around with topn variable\nresult = model.most_similar(positive=['this', 'is'], topn=1)\nprint(result)","72948fe2":"# Term Frequency-Inverse Document Frequency (TF-IDF)\n\nTF*IDF is an information retrieval technique that weighs a term\u2019s frequency (TF) and its inverse document frequency (IDF). Each word or term has its respective TF and IDF score. The product of the TF and IDF scores of a term is called the TF*IDF weight of that term.\n\nThe TF*IDF algorithm is used to weigh a keyword in any content and assign the importance to that keyword based on the number of times it appears in the document. More importantly, it checks how relevant the keyword is throughout the web, which is referred to as corpus.\n\nFormula:\n\n**TF : (Number of times a word appears in a sentence) \/ (Total number of words in the sentence).**\n\n**IDF : log_e(Total number of sentences \/ Number of sentences with a word in it)**","2ccb9acb":"# Tokenization\n\nOne common task in NLP (Natural Language Processing) is tokenization. \"Tokens\" are usually individual words (at least in languages like English) and \"tokenization\" is taking a text or set of text and breaking it up into its individual words","83e8e322":"# Word2Vec (Word Embeddings)\n\nWord Embedding is a language modeling technique used for mapping words to vectors of real numbers. It represents words or phrases in vector space with several dimensions. Word embeddings can be generated using various methods like neural networks, co-occurrence matrix, probabilistic models, etc.","ee84ce93":"# BagOfWords\n\nWhenever we apply any algorithm in NLP, it works on numbers. We cannot directly feed our text into that algorithm. Hence, Bag of Words model is used to preprocess the text by converting it into a bag of words, which keeps a count of the total occurrences of most frequently used words.","22c3474e":"Refer the below link to find the difference between stemming and lemmatization and when and where to use\n\nhttps:\/\/stackoverflow.com\/questions\/1787110\/what-is-the-true-difference-between-lemmatization-vs-stemming","625761f9":"# Lemmatization\n\nLemmatization is the process of grouping together the different inflected forms of a word so they can be analysed as a single item. Lemmatization is similar to stemming but it brings context to the words. So it links words with similar meaning to one word.\n\nExamples of lemmatization:\n\n-> rocks : rock\n\n-> corpora : corpus\n\n-> better : good","d9c32d3d":"# Stemming\n\nStemming is the process of producing morphological variants of a root\/base word. Stemming programs are commonly referred to as stemming algorithms or stemmers. A stemming algorithm reduces the words \u201cchocolates\u201d, \u201cchocolatey\u201d, \u201cchoco\u201d to the root word, \u201cchocolate\u201d and \u201cretrieval\u201d, \u201cretrieved\u201d, \u201cretrieves\u201d reduce to the stem \u201cretrieve\u201d.\n\nExample of stemming for root word \"like\" include:\n\n-> \"likes\"\n\n-> \"liked\"\n\n-> \"likely\"\n\n-> \"liking\"","66cc2ecf":"# NLP Sentiment Analysis Part-1\n\n## Installing the neccessary packages","d79f30a7":"# Overview \nIn this notebook we will look at the basics of NLP and steps included for Text analysis\n\n- Tokenization\n- Stemming\n- lemmatization\n- BagofWords\n- TF-IDF\n- Word2Vec\n\n"}}