{"cell_type":{"8da344de":"code","5bd4e6c9":"code","1d20b3b5":"code","2951eece":"code","6de718a3":"code","4da3edc9":"code","dd5b5eee":"code","722f2487":"code","6159a89a":"code","a6799911":"code","47af21cf":"code","82b38952":"code","e9102063":"code","b8fb3631":"code","082c9c56":"code","74f50276":"code","d68147f6":"code","19397cb3":"code","5e8c8f82":"code","6e105ef6":"code","7045ffea":"code","4c354aa1":"code","a01d6ecf":"code","4767f382":"code","88f41f8f":"code","fd2344e7":"code","b6c348e0":"code","1e68f719":"code","762a932e":"code","e7302c5b":"code","37c8153e":"code","f509dd86":"code","7ee98c27":"code","ff075d9e":"code","786a062e":"code","2b36865e":"code","ebcb4ece":"code","01c9ff73":"code","d121dff3":"code","b963e334":"code","c60fe42e":"code","b6e73981":"code","39e51aca":"code","550f982d":"code","49cc815d":"code","0fe1579f":"code","71c1a496":"code","9fc9c169":"code","42c2feaa":"code","3ea86d78":"code","fbd81057":"code","1c8176b2":"code","4c5f7df4":"code","41ce1ab8":"code","4ba4c82a":"code","d5318825":"code","4adaee51":"code","c7b74be5":"code","7868dd30":"code","82f57f9d":"code","5c0d0b1c":"code","521ad94c":"code","0e7b701a":"code","a6772494":"code","62df2fe1":"code","e15708b7":"markdown","71cacc90":"markdown","19ee9038":"markdown","d48363ea":"markdown","0abd15d6":"markdown","e4118e8f":"markdown","f08e3c4d":"markdown","a8820661":"markdown","c0fd273c":"markdown","1167bdab":"markdown","07ab485b":"markdown","c89d7a95":"markdown","284e653f":"markdown","818d6f65":"markdown","004622c5":"markdown","3af71928":"markdown","49428ad5":"markdown","e12a6d59":"markdown","03c2e1d7":"markdown"},"source":{"8da344de":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom collections import Counter\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve\n\nsns.set(style='white', context='notebook', palette='deep')","5bd4e6c9":"df_train=pd.read_csv('..\/input\/cat-in-the-dat-ii\/train.csv')\ndf_test=pd.read_csv('..\/input\/cat-in-the-dat-ii\/test.csv')","1d20b3b5":"df_train.head()\ndf_test.head()","2951eece":"df=pd.concat([df_train.drop(['target'],axis=1),df_test],axis=0,sort=False)\ndf","6de718a3":"df.isnull().sum()","4da3edc9":"g=sns.countplot(df_train['target'])","dd5b5eee":"#first find the the corr between diff col\ndf.corr().abs()","722f2487":"df_train.groupby(['target','bin_0']).count().id","6159a89a":"df_train.groupby(['target','bin_1']).count().id","a6799911":"df_train.groupby(['target','bin_2']).count().id","47af21cf":"print(df['bin_0'].describe())\nprint(df['bin_0'].value_counts())\nprint(df['bin_0'].isnull().sum())\n\n\ng=sns.countplot(df['bin_0'])\n\ndf['bin_0'].fillna(value=0,inplace=True)","82b38952":"print(df['bin_1'].describe())\nprint(df['bin_1'].value_counts())\nprint(df['bin_1'].isnull().sum())\nsns.countplot(df['bin_1'])\ndf['bin_1'].fillna(value=0,inplace=True)","e9102063":"print(df['bin_2'].describe())\nprint(df['bin_2'].value_counts())\nprint(df['bin_2'].isnull().sum())\nsns.countplot(df['bin_2'])\ndf['bin_2'].fillna(value=0,inplace=True)","b8fb3631":"print(df['bin_3'].describe())\nprint(df['bin_3'].value_counts())\nprint(df['bin_3'].isnull().sum())\nsns.countplot(df['bin_3'])\ndf['bin_3'].fillna(value='F',inplace=True)","082c9c56":"print(df['bin_4'].describe())\nprint(df['bin_4'].value_counts())\nprint(df['bin_4'].isnull().sum())\nsns.countplot(df['bin_4'])\ndf['bin_4'].fillna(value='N',inplace=True)","74f50276":"print(df['nom_0'].describe())\nprint(df['nom_0'].value_counts())\nprint(df['nom_0'].isnull().sum())\nsns.countplot(df['nom_0'])\ndf['nom_0'].fillna(value='Red',inplace=True)","d68147f6":"print(df['nom_1'].describe())\nprint(df['nom_1'].value_counts())\nprint(df['nom_1'].isnull().sum())\nsns.countplot(df['nom_1'])\ndf['nom_1'].fillna(value='Triangle',inplace=True)","19397cb3":"print(df['nom_2'].describe())\nprint(df['nom_2'].value_counts())\nprint(df['nom_2'].isnull().sum())\nsns.countplot(df['nom_2'])\ndf['nom_2'].fillna(value='Hamster',inplace=True)","5e8c8f82":"df['nom_2'].unique()","6e105ef6":"print(df['nom_3'].describe())\nprint(df['nom_3'].value_counts())\nprint(df['nom_3'].isnull().sum())\nsns.countplot(df['nom_3'])\ndf['nom_3'].fillna(value='India',inplace=True)","7045ffea":"print(df['nom_4'].describe())\nprint(df['nom_4'].value_counts())\nprint(df['nom_4'].isnull().sum())\nsns.countplot(df['nom_4'])\ndf['nom_4'].fillna(value='Theremin',inplace=True)","4c354aa1":"print(df['nom_5'].describe())\nprint(df['nom_5'].value_counts())\nprint(df['nom_5'].isnull().sum())\n#sns.countplot(df['nom_5'])\ndf['nom_5'].fillna(value='360a16627',inplace=True)","a01d6ecf":"print(df['nom_6'].describe())\nprint(df['nom_6'].value_counts())\nprint(df['nom_6'].isnull().sum())\n#sns.countplot(df['nom_6'])\ndf['nom_6'].fillna(value='9fa481341',inplace=True)","4767f382":"print(df['nom_7'].describe())\nprint(df['nom_7'].value_counts())\nprint(df['nom_7'].isnull().sum())\n#sns.countplot(df['nom_7'])\ndf['nom_7'].fillna(value='86ec768cd',inplace=True)","88f41f8f":"print(df['nom_8'].describe())\nprint(df['nom_8'].value_counts())\nprint(df['nom_8'].isnull().sum())\n#sns.countplot(df['nom_8'])\ndf['nom_8'].fillna(value='d7e75499d',inplace=True)","fd2344e7":"print(df['nom_9'].describe())\nprint(df['nom_9'].value_counts())\nprint(df['nom_9'].isnull().sum())\n#sns.countplot(df['nom_9'])\ndf['nom_9'].fillna(value='8f3276a6e',inplace=True)","b6c348e0":"print(df['ord_0'].describe())\nprint(df['ord_0'].value_counts())\nprint(df['ord_0'].isnull().sum())\nsns.countplot(df['ord_0'])\ndf['ord_0'].fillna(value=1,inplace=True)","1e68f719":"print(df['ord_1'].describe())\nprint(df['ord_1'].value_counts())\nprint(df['ord_1'].isnull().sum())\nsns.countplot(df['ord_1'])\ndf['ord_1'].fillna(value='Novice',inplace=True)","762a932e":"print(df['ord_2'].describe())\nprint(df['ord_2'].value_counts())\nprint(df['ord_2'].isnull().sum())\nsns.countplot(df['ord_2'])\ndf['ord_2'].fillna(value='Freezing',inplace=True)","e7302c5b":"print(df['ord_3'].describe())\nprint(df['ord_3'].value_counts())\nprint(df['ord_3'].isnull().sum())\nsns.countplot(df['ord_3'])\ndf['ord_3'].fillna(value='n',inplace=True)","37c8153e":"print(df['ord_4'].describe())\nprint(df['ord_4'].value_counts())\nprint(df['ord_4'].isnull().sum())\nsns.countplot(df['ord_4'])\ndf['ord_4'].fillna(value='N', inplace=True)","f509dd86":"print(df['ord_5'].describe())\nprint(df['ord_5'].value_counts())\nprint(df['ord_5'].isnull().sum())\n#sns.countplot(df['ord_5'])\ndf['ord_5'].fillna(value='Fl',inplace=True)","7ee98c27":"print(df['day'].describe())\nprint(df['day'].value_counts())\nprint(df['day'].isnull().sum())\nsns.countplot(df['day'])\ndf['day'].fillna(inplace=True,value=3)","ff075d9e":"print(df['month'].describe())\nprint(df['month'].value_counts())\nprint(df['month'].isnull().sum())\nsns.countplot(df['month'])\ndf['month'].fillna(value=8,inplace=True)","786a062e":"df.isnull().sum()","2b36865e":"obj=LabelEncoder()\ndf['bin_3']=obj.fit_transform(df['bin_3'])\ndf['bin_4']=obj.fit_transform(df['bin_4'])\ndf['nom_0']=obj.fit_transform(df['nom_0'])\ndf['nom_2']=obj.fit_transform(df['nom_2'])\ndf['nom_3']=obj.fit_transform(df['nom_3'])\ndf['nom_4']=obj.fit_transform(df['nom_4'])\ndf['nom_5']=obj.fit_transform(df['nom_5'])\ndf['nom_6']=obj.fit_transform(df['nom_6'])\ndf['nom_7']=obj.fit_transform(df['nom_7'])\ndf['nom_8']=obj.fit_transform(df['nom_8'])\ndf['nom_9']=obj.fit_transform(df['nom_9'])\ndf['nom_1']=obj.fit_transform(df['nom_1'])\ndf['ord_2']=obj.fit_transform(df['ord_2'])\n\n\ndf['ord_1']=obj.fit_transform(df['ord_1'])\ndf['ord_3']=obj.fit_transform(df['ord_3'])\ndf['ord_4']=obj.fit_transform(df['ord_4'])\ndf['ord_5']=obj.fit_transform(df['ord_5'])\n\n\n#df['nom_1']=df['nom_1'].map({'Trapezoid':1,'Star':2,'Circle':1,'Triangle':0,'Polygon':0,'Square':2})\n#df['nom_2']=df['nom_2'].map({'Hamster':0,'Axolotl':0,'Lion':1,'Dog':1,'Cat':2,'Sanke':2})\n#df['ord_2']=df['ord_2'].map({'Freezing':0,'Cold':0,'Warm':1,'Boiling Hot':1,'Lava Hot':2,'Hot':2})\n","ebcb4ece":"df.head()\n","01c9ff73":"df.corr().abs()","d121dff3":"#col=['nom_5','nom_6','nom_7','nom_8','nom_9','ord_3','ord_4','ord_5','day','month']\ncol=['bin_0','bin_1', 'bin_2', 'bin_3', 'bin_4', 'nom_0','nom_1',\n       'nom_2', 'nom_3', 'nom_4', 'nom_5','nom_6', 'nom_7', 'nom_8','nom_9' ,\n       'ord_0', 'ord_1', 'ord_2','ord_3', 'ord_4', 'ord_5', 'day', 'month']\nfrom sklearn.preprocessing import StandardScaler\nobj=StandardScaler()\ndf[col]=obj.fit_transform(df[col])","b963e334":"df.describe()","c60fe42e":"dtrain=df[df['id']<600000] # train data\ndtest=df[df['id']>=600000] # test data","b6e73981":"dtrain=dtrain.drop('id',axis=1)\ndtest=dtest.drop('id',axis=1)","39e51aca":"dtrain\ndtest","550f982d":"X=dtrain # divide the train data into two part X_train and X_test\ny=df_train['target']","49cc815d":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,random_state=1,test_size=0.25)","0fe1579f":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","71c1a496":"import xgboost as xgb\nfrom sklearn.metrics import roc_auc_score\nimport pandas as pd\nimport numpy as np","9fc9c169":"model = xgb.XGBClassifier(objective ='binary:logistic',\n                      colsample_bytree = 0,\n                      learning_rate = 0.1,\n                      max_depth = 15,\n                      n_estimators = 400,\n                      scale_pos_weight = 2,\n                      random_state = 2020,\n                      subsample = 0.8)","42c2feaa":"model.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=False,)\n\n","3ea86d78":"preds_val = model.predict_proba(X_test)[:,1]","fbd81057":"score = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))","1c8176b2":"model.fit(X,y)","4c5f7df4":"y_pred = model.predict_proba(dtest)[:,1]","41ce1ab8":"Id=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()","4ba4c82a":"submission.to_csv('submission.csv',index=False)","d5318825":"indices=np.argsort(model.feature_importances_)\nplt.figure(figsize=(10,10))\ng = sns.barplot(y=X_train.columns[indices][:40],x = model.feature_importances_[indices][:40] , orient='h')","4adaee51":"model1=LogisticRegression()\nmodel1.fit(X_train, y_train)\npreds_val = model1.predict_proba(X_test)[:,1]\nscore = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))\nmodel1.fit(X,y)\ny_pred = model1.predict_proba(dtest)[:,1]\nId=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()\nsubmission.to_csv('submission1.csv',index=False)","c7b74be5":"model3=DecisionTreeClassifier()\nmodel3.fit(X_train, y_train)\npreds_val = model3.predict_proba(X_test)[:,1]\nscore = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))\nmodel3.fit(X,y)\ny_pred = model3.predict_proba(dtest)[:,1]\nId=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()\nsubmission.to_csv('submission3.csv',index=False)","7868dd30":"indices=np.argsort(model3.feature_importances_)\nplt.figure(figsize=(10,10))\ng = sns.barplot(y=X_train.columns[indices][:40],x = model3.feature_importances_[indices][:40] , orient='h')","82f57f9d":"model5=RandomForestClassifier()\nmodel5.fit(X_train, y_train)\npreds_val = model5.predict_proba(X_test)[:,1]\nscore = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))\nmodel5.fit(X,y)\ny_pred = model5.predict_proba(dtest)[:,1]\nId=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()\nsubmission.to_csv('submission4.csv',index=False)","5c0d0b1c":"indices=np.argsort(model5.feature_importances_)\nplt.figure(figsize=(10,10))\ng = sns.barplot(y=X_train.columns[indices][:40],x = model5.feature_importances_[indices][:40] , orient='h')","521ad94c":"model6=ExtraTreesClassifier()\nmodel6.fit(X_train, y_train)\npreds_val = model6.predict_proba(X_test)[:,1]\nscore = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))\nmodel6.fit(X,y)\ny_pred = model6.predict_proba(dtest)[:,1]\nId=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()\nsubmission.to_csv('submission6.csv',index=False)","0e7b701a":"indices=np.argsort(model6.feature_importances_)\nplt.figure(figsize=(10,10))\ng = sns.barplot(y=X_train.columns[indices][:40],x = model6.feature_importances_[indices][:40] , orient='h')","a6772494":"model7=GradientBoostingClassifier()\nmodel7.fit(X_train, y_train)\npreds_val = model7.predict_proba(X_test)[:,1]\nscore = roc_auc_score(y_test ,preds_val)\nprint(\"score: %f\" % (score))\nmodel7.fit(X,y)\ny_pred = model7.predict_proba(dtest)[:,1]\nId=pd.Series(range(600000,1000000),name='id')\nId\nsubmission=pd.DataFrame({'id':Id,'target':y_pred})\nsubmission.head()\nsubmission.to_csv('submission7.csv',index=False)","62df2fe1":"indices=np.argsort(model7.feature_importances_)\nplt.figure(figsize=(10,10))\ng = sns.barplot(y=X_train.columns[indices][:40],x = model7.feature_importances_[indices][:40] , orient='h')","e15708b7":"6.1 Simple modeling\n\n\n6.1.1 Cross validate models\n\n\nI compared 10 popular classifiers and evaluate the mean accuracy of each of them by a stratified kfold cross validation procedure.\n\n1. SVC\n2. Decision Tree\n3. AdaBoost\n4. Random Forest\n5. Extra Trees\n6. Gradient Boosting\n7. Multiple layer perceprton (neural network)\n8. KNN\n9. Logistic regression\n10. Linear Discriminant Analysis","71cacc90":"# How we fill such large missing value","19ee9038":"sometime algorithm define priority on the  basis of label value:  \n    item    label\n1.  Red     0\n2.  Blue    1\n3.  Green   2\n\nNow green is considered as highest priority (This can also be calculated usin score value)\n\n2. \nsome column contain huge variation in their value some col contain (max value upto 3)  and other may contain (max value upto 1220) by normalistion it lies b\/w -1 to 1\n\n3. Normalised data is easily and fast process by cpu ","d48363ea":"#  Why Normalisation","0abd15d6":"# from the above observation we conclude :data is linear separable we cannot find any type of outliear\n\n","e4118e8f":"# Gradient Boosting Classifier","f08e3c4d":"# ExtraTreesClassifier","a8820661":"# analysis of data","c0fd273c":"# find important feature \n\nEach algo may be diff feature_importances col on that basis we can set particular threshold value and eliminate weak column","1167bdab":"# Load Dataset","07ab485b":"# Prepare  train  and test data","c89d7a95":"# DecisionTreeClassifier","284e653f":"# RandomForestClassifier","818d6f65":"# check for missing value\n\n***Simple imputer can also be to fill the missing value  \"most-frequent\" parameter\n\n\n\n***simple imputer consume to much time on cpu","004622c5":"# Using Xgboost","3af71928":"******  for Missing Value You can also Use Simple Imputer but it consume too much time\n","49428ad5":"# using Logistic Regression","e12a6d59":"# Import Required Library","03c2e1d7":"# Using SVC"}}