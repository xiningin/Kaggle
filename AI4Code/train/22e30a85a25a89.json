{"cell_type":{"61ae7c61":"code","91dfabb5":"code","d8a82bfb":"code","a4525da9":"code","dd97a839":"code","94c7e0ab":"code","453d1168":"code","d8356e30":"code","b8cf30f4":"code","f31c80ea":"code","2ef0a5f9":"code","7bc2b078":"code","fe735adc":"code","7fffcd92":"code","c8cebda5":"code","18f9d07e":"code","13c60db2":"code","801949c4":"code","181f86ee":"code","e6f6f31e":"code","e897ecf3":"code","d4f8c19a":"code","f221991a":"code","33263247":"code","fad70e97":"code","e744e11e":"code","4abd3421":"code","1eed1031":"code","49eef445":"code","d3f12932":"code","df3a032b":"code","29aa9c84":"code","a3249a4f":"code","511d45d9":"code","2b23a7a4":"code","e8f32faf":"code","71cef537":"code","967436d0":"code","5bd90ee5":"code","4bd36de0":"code","7640ab58":"code","cfc0bac7":"code","6c45719c":"code","77643542":"code","282b895e":"code","d3350f67":"code","27de8fed":"code","097ff498":"code","be00e8c4":"code","9a1e378b":"code","129e509b":"code","b8bfb69a":"code","bc764fc4":"code","d22d574e":"code","89eff8b0":"code","0eeb4db0":"code","8cdbaa10":"code","a4ef9c1f":"code","8588e2bc":"code","2b65432d":"code","2ca8ce59":"code","ad60a2d5":"code","ab25e7c0":"code","4e6c0b82":"code","fc58282c":"code","75ad893b":"code","43c82d04":"code","108022b8":"code","173dab95":"code","0d314c37":"code","99e97189":"code","96ac9839":"code","03aeff0b":"code","9ea790ac":"code","c0f1a852":"code","35d56328":"code","4eefc3a0":"code","14131012":"code","4d89fe56":"code","b4ba8fe6":"code","c833ad3f":"code","a8400042":"code","cbb89c61":"code","46c5a212":"code","3b62ec1e":"code","76e15edd":"code","58289aed":"code","18814712":"code","d3f35ba5":"code","b3d665aa":"code","7cdb7aab":"code","861c017f":"code","13857d34":"code","817a5641":"code","9cb090de":"markdown","c5e50e6c":"markdown","8e692bbf":"markdown","bef80751":"markdown","2c6918c7":"markdown","2f4ab82f":"markdown","9dc2d0d1":"markdown","7406c0c5":"markdown","7248d21d":"markdown","1cb32ab8":"markdown","9ab4a11c":"markdown","3978687b":"markdown","cd023505":"markdown","6fe044f8":"markdown","5e2339b5":"markdown","700cec37":"markdown","dce4e598":"markdown","7696225f":"markdown","fdfd8ec6":"markdown","81709a75":"markdown","56ef5d32":"markdown","7a2ac4a0":"markdown","d96fa64e":"markdown","c4807c39":"markdown","1d70329d":"markdown","34c1d2d0":"markdown","684e0334":"markdown","ded5492e":"markdown","27c22450":"markdown","48a7adf8":"markdown","95527439":"markdown","3092044d":"markdown","c7dd866c":"markdown","264644f4":"markdown","814a61c3":"markdown","13dd88e2":"markdown","14a2ae34":"markdown","2e071f20":"markdown","358c753c":"markdown","a2de12de":"markdown","da3a443e":"markdown","f387e27a":"markdown","9c8bed08":"markdown","626f8f9e":"markdown","2f576762":"markdown","05fb66be":"markdown","58f577a0":"markdown"},"source":{"61ae7c61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","91dfabb5":"root = \"\/kaggle\/input\/unsw-nb15\/\"\ntrain = pd.read_csv(root+\"UNSW_NB15_training-set.csv\")\ntest = pd.read_csv(root+\"UNSW_NB15_testing-set.csv\")\nlist_events = pd.read_csv(root+\"UNSW-NB15_LIST_EVENTS.csv\")\nfeatures = pd.read_csv(root+\"NUSW-NB15_features.csv\", encoding='cp1252')","d8a82bfb":"print(train.shape, test.shape)\nif train.shape[0]<100000:\n    print(\"Train test sets are reversed. Fixing them.\")\n    train, test = test, train","a4525da9":"train['type'] = 'train'\ntest['type'] ='test'\ntotal = pd.concat([train, test], axis=0, ignore_index=True)\ntotal.drop(['id'], axis=1, inplace=True)\n# del train, test","dd97a839":"from pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            # skip datetime type or categorical type\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('object')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","94c7e0ab":"def standardize(df):\n    return (df-df.mean())\/df.std()\n    \ndef min_max(df):\n    return (df-df.min())\/(df.max() - df.min())\n\ndef normalize(df):\n    return pd.Dataframe(preprocessing.normalize(df), columns=df.columns)","453d1168":"total = reduce_mem_usage(total)","d8356e30":"list_events.shape","b8cf30f4":"list_events.head()","f31c80ea":"list_events['Attack category'].unique()","2ef0a5f9":"list_events['Attack subcategory'].unique()","7bc2b078":"features.head(features.shape[0])","fe735adc":"# the Name column has camel case values\nfeatures['Name'] = features['Name'].str.lower()\n# the following 4 columns are address related and not in train dataset\nfeatures = features[~features['Name'].isin(['srcip', 'sport', 'dstip', 'dsport'])].reset_index()\nfeatures.drop(['index', 'No.'], axis=1, inplace=True)","7fffcd92":"normal = train[train['label']==0]\nanomaly = train[train['label']==1]","c8cebda5":"print(sorted(set(train.columns) - set(features['Name'].values)))\nprint(sorted(set(features['Name'].values) - set(train.columns)))","18f9d07e":"fix = {'ct_src_ ltm': 'ct_src_ltm', 'dintpkt': 'dinpkt', 'dmeansz': 'dmean', 'res_bdy_len': 'response_body_len', 'sintpkt': 'sinpkt', 'smeansz': 'smean'}\nfeatures['Name'] = features['Name'].apply(lambda x: fix[x] if x in fix else x)\nfeatures.to_csv('features.csv')","13c60db2":"print(sorted(set(train.columns) - set(features['Name'].values)))\nprint(sorted(set(features['Name'].values) - set(train.columns)))","801949c4":"train.head()","181f86ee":"train.dtypes","e6f6f31e":"def show_correlation(data, method='pearson'):\n    correlation_matrix = data.corr(method='pearson') #  \u2018pearson\u2019, \u2018kendall\u2019, \u2018spearman\u2019\n    fig = plt.figure(figsize=(12,9))\n    sns.heatmap(correlation_matrix,vmax=0.8,square = True) #  annot=True, if fig should show the correlation score too\n    plt.show()\n    return correlation_matrix\n\ndef top_correlations(correlations, limit=0.9):\n    columns = correlations.columns\n    for i in range(correlations.shape[0]):\n        for j in range(i+1, correlations.shape[0]):\n            if correlations.iloc[i,j] >= limit:\n                print(f\"{columns[i]} {columns[j]} {correlations.iloc[i,j]}\")\ndef print_correlations(correlations, col1=None, col2=None):\n    columns = correlations.columns\n    for i in range(correlations.shape[0]):\n        for j in range(i+1, correlations.shape[0]):\n            if (col1 == None or col1==columns[i]) and (col2 == None or col2==columns[j]):\n                print(f\"{columns[i]} {columns[j]} {correlations.iloc[i,j]}\")\n                return\n            elif (col1 == None or col1==columns[j]) and (col2 == None or col2==columns[i]):\n                print(f\"{columns[i]} {columns[j]} {correlations.iloc[i,j]}\")\n                return\n            \ndef find_corr(df1, df2):\n    return pd.concat([df1, df2], axis=1).corr().iloc[0,1]\n\ndef corr(col1, col2='label', df=total):\n    return pd.concat([df[col1], df[col2]], axis=1).corr().iloc[0,1]","e897ecf3":"correlation_matrix = show_correlation(total)","d4f8c19a":"top_correlations(correlation_matrix, limit=0.9)","f221991a":"correlation_matrix = show_correlation(train, method='spearman')","33263247":"top_correlations(correlation_matrix, limit=0.9)","fad70e97":"sns.pairplot(total[['spkts', 'sbytes', 'sloss']])","e744e11e":"sns.pairplot(total[['dpkts', 'dbytes', 'dloss']])","4abd3421":"sns.pairplot(total[['sinpkt', 'is_sm_ips_ports']])","1eed1031":"sns.pairplot(total[['swin', 'dwin']])","49eef445":"def dual_plot(col, data1=normal, data2=anomaly, label1='normal', label2='anomaly', method=None):\n    if method != None:\n        sns.distplot(data1[col].apply(method), label=label1, hist=False, rug=True)\n        sns.distplot(data2[col].apply(method), label=label2, hist=False, rug=True)\n    else:\n        sns.distplot(data1[col], label=label1, hist=False, rug=True)\n        sns.distplot(data2[col], label=label2, hist=False, rug=True)\n    plt.legend()\n    \ndef catplot(data, col):\n    ax = sns.catplot(x=col, hue=\"label\", col=\"type\",data=data, kind=\"count\", height=5, legend=False, aspect=1.4)\n    ax.set_titles(\"{col_name}\")\n    ax.add_legend(loc='upper right',labels=['normal','attack'])\n    plt.show(ax)","d3f12932":"def create_count_df(col, data=total):\n    df = pd.DataFrame(data[col].value_counts().reset_index().values, columns = [col, 'count'])\n    df['percent'] = df['count'].values*100\/data.shape[0]\n    return df.sort_values(by='percent', ascending=False)","df3a032b":"create_count_df('label', train)","29aa9c84":"create_count_df('label', test)","a3249a4f":"col = 'state'\ncreate_count_df(col, train)","511d45d9":"# all other values those were few in train set, have been renamed to 'RST_and_others'\ntotal.loc[~total[col].isin(['FIN', 'INT', 'CON', 'REQ', 'RST']), col] = 'others'\ncatplot(total, col)\n# catplot(total[~total[col].isin(['INT', 'FIN', 'REQ', 'CON'])], col)","2b23a7a4":"col = 'service'\ncreate_count_df(col, train)","e8f32faf":"catplot(total[~total[col].isin(['-', 'dns', 'http', 'smtp', 'ftp-data', 'ftp', 'ssh', 'pop3'])], col)","71cef537":"total.loc[~total[col].isin(['-', 'dns', 'http', 'smtp', 'ftp-data', 'ftp', 'ssh', 'pop3']), col] = 'others'","967436d0":"col = 'proto'\ncreate_count_df(col, normal)","5bd90ee5":"create_count_df(col, anomaly)[:10]","4bd36de0":"# icmp and rtp columns are in test, but not in train data\ntotal.loc[total[col].isin(['igmp', 'icmp', 'rtp']), col] = 'igmp_icmp_rtp'\ntotal.loc[~total[col].isin(['tcp', 'udp', 'arp', 'ospf', 'igmp_icmp_rtp']), col] = 'others'","7640ab58":"catplot(total, 'is_sm_ips_ports')","cfc0bac7":"col = 'is_ftp_login'\nprint(corr('ct_ftp_cmd', col), corr('is_ftp_login', 'label'))\ncatplot(total, col)\ntotal.drop([col], axis=1, inplace=True)","6c45719c":"col = 'ct_state_ttl'\ncatplot(total, col)","77643542":"catplot(total, 'ct_ftp_cmd')\ncorr('ct_ftp_cmd', 'label')","282b895e":"col = 'ct_flw_http_mthd'\ncatplot(total, col)\ncorr(col) # -0.012237160723","d3350f67":"create_count_df(col, total)","27de8fed":"print(find_corr(total['spkts']*total['smean'], total['sbytes'])) # 0.999999\nprint(find_corr(total['dpkts']*total['dmean'], total['dbytes'])) # 0.99999\nprint(corr('sbytes', 'sloss'), corr('dbytes', 'dloss')) # 0.995771577240429, 0.9967111338305503\ntotal.drop(['sbytes', 'dbytes'], axis=1, inplace=True)","097ff498":"dual_plot('smean')","be00e8c4":"dual_plot('dmean')","9a1e378b":"total['smean_log1p'] = total['smean'].apply(np.log1p)\ntotal['dmean_log1p'] = total['dmean'].apply(np.log1p)\n\n# -0.02837244879012871 -0.2951728296856902 -0.05807468815031313 -0.5111549621216057\nprint(corr('smean'), corr('dmean'), corr('smean_log1p'), corr('dmean_log1p'))\n# So we have better correlation with label after applying log1p. \ntotal.drop(['smean', 'dmean'], axis=1, inplace=True)","129e509b":"col = 'spkts'\ndual_plot(col)","b8bfb69a":"dual_plot(col, method=np.log1p)","bc764fc4":"total['spkts_log1p'] = total['spkts'].apply(np.log1p)\ntotal['dpkts_log1p'] = total['dpkts'].apply(np.log1p)\n\n# -0.043040466783819634 -0.09739388286233619 -0.3468819761209388 -0.45005074723539357\nprint(corr('spkts'), corr('dpkts'), corr('spkts_log1p'), corr('dpkts_log1p'))\n# So we have better correlation with label after applying log1p. \ntotal.drop(['spkts', 'dpkts'], axis=1, inplace=True)","d22d574e":"col = 'sttl'\ndual_plot(col) # 0.62408238, after applying log1p 0.61556952425","89eff8b0":"col = 'dttl'\ndual_plot(col) # corr -0.09859087338578788","0eeb4db0":"dual_plot('sloss')","8cdbaa10":"# So log1p makes it easier to differentiate\ndual_plot('sloss', method=np.log1p)","a4ef9c1f":"total['sloss_log1p'] = total['sloss'].apply(np.log1p)\ntotal['dloss_log1p'] = total['dloss'].apply(np.log1p)\n# 0.001828274080103508 -0.07596097807462938 -0.3454351103223904 -0.3701913238787703\nprint(corr('sloss'), corr('dloss'), corr('sloss_log1p'), corr('dloss_log1p') )\ntotal.drop(['sloss', 'dloss'], axis=1, inplace= True)","8588e2bc":"total['swin'].value_counts().loc[lambda x: x>1]","2b65432d":"total['dwin'].value_counts().loc[lambda x: x>1]","2ca8ce59":"print(corr('swin'), corr('dwin'))","ad60a2d5":"dual_plot('swin')","ab25e7c0":"selected = ['swin', 'dwin']\nkbins = preprocessing.KBinsDiscretizer(n_bins=[3, 3], encode='ordinal', strategy='uniform')\ntotal[selected] = pd.DataFrame(kbins.fit_transform(total[selected]), columns=selected)\nprint(corr('swin'), corr('dwin'))","4e6c0b82":"col = 'stcpb'\ndual_plot(col)","fc58282c":"dual_plot(col, method=np.log1p)","75ad893b":"total['stcpb_log1p'] = total['stcpb'].apply(np.log1p)\ntotal['dtcpb_log1p'] = total['dtcpb'].apply(np.log1p)\n# -0.2665849100492664 -0.2635428109654134 -0.33898970769021913 -0.33835676091281974\nprint(corr('stcpb'), corr('dtcpb'), corr('stcpb_log1p'), corr('dtcpb_log1p'))\ntotal.drop(['stcpb', 'dtcpb'], axis=1, inplace= True)","43c82d04":"total.drop(['tcprtt'], axis=1, inplace=True)","108022b8":"dual_plot('synack')","173dab95":"dual_plot('ackdat')","0d314c37":"col = 'trans_depth'\nprint(corr(col)) # -0.0022256544\ncreate_count_df(col, total)","99e97189":"col = 'response_body_len'\ndual_plot(col)","96ac9839":"total[\"response_body_len_log1p\"] = total[\"response_body_len\"].apply(np.log1p)\n\n# slight improve\n# -0.018930127454048158 -0.03261972203078345\nprint(corr('response_body_len'), corr('response_body_len_log1p'))\ntotal.drop(['response_body_len'], axis=1, inplace=True)","03aeff0b":"col = 'ct_srv_src'\nprint(total[col].value_counts())","9ea790ac":"print(corr(col)) # 0.24659616767\ndual_plot(col)","c0f1a852":"col = 'ct_srv_dst'\nprint(total[col].value_counts())\n# graph is same as ct_srv_src\ndual_plot(col)","35d56328":"# 0.2478122357. they are very correlated 0.97946681, need to check whether dropping one benefits\nprint(corr('ct_srv_dst'), corr('ct_srv_src', 'ct_srv_dst'))","4eefc3a0":"col = 'ct_src_ltm'\nprint(corr(col))\ncreate_count_df(col, total)","14131012":"print(corr('ct_dst_ltm'))\ncreate_count_df('ct_dst_ltm', total)","4d89fe56":"corr('ct_src_ltm', 'ct_dst_ltm')","b4ba8fe6":"for col in ['ct_src_dport_ltm', 'ct_dst_sport_ltm']:\n    print(corr(col))\n    print(create_count_df(col, total))","c833ad3f":"corr('ct_src_dport_ltm', 'ct_dst_sport_ltm')","a8400042":"col = 'dur'\nprint(corr(col)) # 0.0290961170, correlation gets worse after log1p\ndual_plot(col)","cbb89c61":"col = 'rate'\nprint(corr(col))\ndual_plot(col) # cor 0.3358, after applying log1p it becomes 0.31581108","46c5a212":"col = 'sinpkt'\ncorr(col, 'is_sm_ips_ports')","3b62ec1e":"print(corr(col)) # corr -0.1554536980863\ndual_plot(col) ","76e15edd":"dual_plot(col, method=np.log1p)","58289aed":"dual_plot('dinpkt')","18814712":"total['sinpkt_log1p'] = total['sinpkt'].apply(np.log1p)\ntotal['dinpkt_log1p'] = total['dinpkt'].apply(np.log1p)\n\n# slight improve in correlation\n# -0.1554536980867726 -0.030136042428744566 -0.16119699304378052 -0.07408113676641241\nprint(corr('sinpkt'), corr('dinpkt'), corr('sinpkt_log1p'), corr('dinpkt_log1p'))\ntotal.drop(['sinpkt', 'dinpkt'], axis=1, inplace= True)","d3f35ba5":"dual_plot('sload')","b3d665aa":"dual_plot('dload')","7cdb7aab":"total['sload_log1p'] = total['sload'].apply(np.log1p)\ntotal['dload_log1p'] = total['dload'].apply(np.log1p)\n# 0.16524867685764016 -0.35216880416636837 0.3397788822586144 -0.5919440288535992\nprint(corr('sload'), corr('dload'), corr('sload_log1p'), corr('dload_log1p'))\ntotal.drop(['sload', 'dload'], axis=1, inplace=True)","861c017f":"dual_plot('sjit')","13857d34":"dual_plot('djit')","817a5641":"features.to_csv('features.csv', index=False)\ntrain = total[total['type']=='train'].drop(['type'], axis=1)\ntest = total[total['type']!='train'].drop(['type'], axis=1)\ntrain.to_csv('train.csv', index=False)\ntest.to_csv('test.csv', index=False)","9cb090de":"# Integer Features\n## ct_state_ttl\nNo. for each state according to specific range of values for source\/destination time to live (sttl\/dttl).","c5e50e6c":"# Data","8e692bbf":"## sbytes & dbytes\n* sbytes: Source to destination transaction bytes \n* dbytes: Destination to source transaction bytes\n\nThese 2 features are higly corelated to number of packets sent (spkts & dpkts). Actually, spkts * smean = sbytes. Also they are closely related to sloss and dloss. So we can drop these 2 here.","bef80751":"# Utils","2c6918c7":"## is_sm_ips_ports\nIf source and destination IP addresses equal and port numbers (sport\/dport)  equal then, this variable takes value 1 else 0. Seems if it is 1, then the connection is always normal. This feature is highly correlated with sinpkt (0.94131890073567).","2f4ab82f":"# Input","9dc2d0d1":"## ct_flw_http_mthd\nNo. of flows that has methods such as Get and Post in http service. Seems 0 has more anomaly values, however the correlation is very small with target.","7406c0c5":"## Spearman","7248d21d":"# List of Events","1cb32ab8":"## Label\n0 for normal and 1 for attack records","9ab4a11c":"Most correlated features are :\n* spkts, sbytes, sloss \n* dpkts, dbytes, dloss\n* sinpkt, is_sm_ips_ports\n* swin, dwin\n* tcprtt, synack\n* ct_srv_src, ct_srv_dst, ct_dst_src_ltm, ct_src_dport_ltm, ct_dst_sport_ltm \n* is_ftp_login ct_ftp_cmd","3978687b":"### tcprtt & synack & ackdat\n* tcprtt is the TCP connection setup round-trip time, the sum of \u2019synack\u2019 and \u2019ackdat\u2019.\n* synack: TCP connection setup time, the time between the SYN and the SYN_ACK packets.\n* ackdat : TCP connection setup time, the time between the SYN_ACK and the ACK packets.\n\nAs tcprtt, is just the sum of other two features, it doesn't add any extra info to our models. So we can just drop it for now.\nApplying preprocessing on synack and ackdat didn't improve much. From graph we can see, anomaly connections generally have values around 0.","cd023505":"# Categorical\nThese four columns are categorical: 'attack_cat', 'state', 'service', 'proto'. Among them 'attack_cat' isn't a feature.\nThese features are categorical but in integer form : 'is_sm_ips_ports', 'ct_state_ttl', 'is_ftp_login'.","6fe044f8":"## State\nIndicates to the state and its dependent protocol, e.g. ACC, CLO, CON, ECO, ECR, FIN, INT, MAS, PAR, REQ, RST, TST, TXD, URH, URN, and (-) (if not used state)","5e2339b5":"* categorical: state, service, proto\n* target  = attack_cat, label\n* integer but categorial = is_sm_ips_ports, ct_state_ttl, is_ftp_login\n* integer = spkts, dpkts, sbytes, dbytes, sttl, dttl, sload, dload, sloss, dloss, swin, dwin, stcpb, dtcpb, smean, dmean, trans_depth, response_body_len, ct_srv_src, ct_state_ttl, ct_dst_ltm, ct_src_dport_ltm, ct_dst_sport_ltm, ct_dst_src_ltm, ct_ftp_cmd, ct_flw_http_mthd, ct_src_ltm, ct_srv_dst, \n* decimal = dur, rate, sinpkt, dinpkt, sjit, djit, tcprtt, synack, ackdat","700cec37":"## Checking data types","dce4e598":"## ct_src_ltm & ct_dst_ltm\nNo. of connections of the same source\/destination address in 100 connections according to the last recorder time.\nValues are well between 0 to 51 and very few values after 48. They are much correlated , but not to the point of dropping one.","7696225f":"## ct_src_dport_ltm & ct_dst_sport_ltm\n* ct_src_dport_ltm : No of connections of the same source address and the destination port in 100 connections according to the last time.\n* ct_dst_sport_ltm: No of connections of the same destination address and the source port in 100 connections according to the last time.","fdfd8ec6":"## rate\nThis feature isn't mentioned is feature list. It has value upto 1M. Anomaly connections are mostly around 0.","81709a75":"## sinpkt & dinpkt\n* sinpkt: Source interpacket arrival time (mSec)\n* dinpkt: Destination interpacket arrival time (mSec)\n\nsinpkt is highly correlated with is_sm_ips_ports (0.9421206). Will dropping one of them benefit ?","56ef5d32":"## ct_srv_src\nNo. of connections that contain the same service and source address in 100 connections according to the last time. Most of the normal connections are within 10. It is highly correlated to ct_srv_dst.","7a2ac4a0":"## stcpb & dtcpb\nTCP base sequence number. It has a really big range, 0 to 5e9. However, anomaly connections are mostly around 0. ","d96fa64e":"## ct_srv_dst\nNo. of connections that contain the same service and destination address in 100 connections according to the last time. It is highly correlated to ct_srv_src too. It has a slight better correlation with label than ct_srv_src. So the other one can be dropped to check for possible improvement.","c4807c39":"## swin & dwin\nTCP window advertisement value. Except 0 and 255 other values(1-254) occur mostly once only. So we can separate them into 3 groups. And we also see after binning their correlation with target remains same.","1d70329d":"## smean & dmean \nMean of the packet size transmitted. However is it just sbytes\/spkts ? The correlation says it is. So we already have this \ninfo from those other features.","34c1d2d0":"## is_ftp_login\nIf the ftp session is accessed by user and password then 1 else 0. In most of the cases session has no user and password. However there are values 2 and 4 which should not be there.\n\nThis feature is totally correlated with ct_ftp_cmd, which counts the number of ftp commands. So dropping this column should be ok.","684e0334":"## ct_ftp_cmd\nNo of flows that has a command in ftp session. It has a very low correlation with target. Also is_ftp_login is highly correlated with it (0.9988554882922012).","ded5492e":"So it seems the dataset is pretty balanced, unlike real world data where attack scenarios are rare. Moreover, here attack connections are more than normal connections.","27c22450":"## response_body_len\nActual uncompressed content size of the data transferred from the server\u2019s http service. \nThe values range between 0 to 5.24M.","48a7adf8":"## sttl & dttl\n* sttl: Source to destination time to live value \n* dttl: Destination to source time to live value\n\nFor sttl most of the anomalies have live values around 65 and 250. Its correlation with the target value is high too.\nHowever, for dttl both types have nearly same distribution. So the correlation with target is very low.","95527439":"# plot utils","3092044d":"# Correlation matrix\nWhy checking correlation is important ? Check these links:\n* [Why Feature Correlation Matters \u2026. A Lot!](https:\/\/towardsdatascience.com\/why-feature-correlation-matters-a-lot-847e8ba439c4) and \n* [Feature selection \u2014 Correlation and P-value](https:\/\/towardsdatascience.com\/feature-selection-correlation-and-p-value-da8921bfb3cf)","c7dd866c":"According to official site [here](https:\/\/www.unsw.adfa.edu.au\/unsw-canberra-cyber\/cybersecurity\/ADFA-NB15-Datasets\/), train and test data have 175341 and 82332 rows respectively.","264644f4":"# Output","814a61c3":"## trans_depth\nRepresents the pipelined depth into the connection of http request\/response transaction. After depth 5 to 172 occurences are few.","13dd88e2":"## proto\nTransaction protocol. Normal connections of train data have only 5 protocols, where anomaly connections have 129. So we'll convert all other protocols into same value.","14a2ae34":"# Decimal Features\n## dur \nrecorded total duration. Normal connections are mostly within 5. However, this feature has a poor correlation with label.\n","2e071f20":"## sload & dload\n* sload: Source bits per second\n* dload: Destination bits per second\n\nThe values are really big and in bits.","358c753c":"## sloss & dloss\n* sloss: Source packets retransmitted or dropped \n* dloss: Destination packets retransmitted or dropped\n\nSloss is highly correlated with spkts and sbytes (more than .91). Similarly dloss is highly correlated with dpkts and dbytes. \nHowever, though packets sent is related loss of packets, this isn't quite linearly related like packet number and size. So we keep both for now.\n\nValues are mostly between 0 to 3. Yet some values are more than several thousands.","a2de12de":"Still there are some differences. `stime` and `ltime` both refers to when the recording stared and lasted. So they shouldn't be valuable in training, hence not being in train set makes sence. `id` is just row number and rate might be something related to packed sending speed or data rate.","da3a443e":"## sjit & djit\nSource and Destination jitter in mSec. Preprocessing didn't improve anything.","f387e27a":"# Features","9c8bed08":"## spkts and dpkts\n* spkts : Source to destination packet count \n* dpkts: Destination to source packet count","626f8f9e":"## Service\nhttp, ftp, smtp, ssh, dns, ftp-data ,irc  and (-) if not much used service. More than half of the service data are of - category. ","2f576762":"## Some difference with features file","05fb66be":"Some of the column names in features file are wrong and we are going to fix them. ","58f577a0":"## Pearson"}}