{"cell_type":{"1aba18fc":"code","64f19c82":"code","e98cc0d9":"code","7d306ec6":"code","a380ec2d":"code","d414bd18":"code","2de73736":"code","c95a5523":"code","9d5c68b4":"code","32ad1c5c":"code","a69ca467":"code","2e54b4e1":"code","14369b80":"code","ec93f840":"code","f998cdf4":"code","fca5ec1e":"code","8b9dcc29":"code","9b516353":"code","c150512f":"code","4ac1be17":"code","08741c21":"code","99e24518":"code","c9700e30":"code","6e478cb9":"code","7176ff24":"code","9abe2487":"code","f7477207":"code","ff4c73af":"code","2cc9f9b9":"code","0ed8cdbb":"code","e762b939":"code","6a9b6322":"code","6a177c6a":"code","5c624d78":"code","0d7046d4":"markdown","1012db00":"markdown","640aac08":"markdown","bb52443d":"markdown","939b0ae0":"markdown","069e7392":"markdown","1b026efe":"markdown"},"source":{"1aba18fc":"!pip install git+https:\/\/github.com\/facebookresearch\/nevergrad","64f19c82":"import os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","e98cc0d9":"import doctest\nimport copy\nimport functools\n# tests help notebooks stay managable\ndef autotest(func):\n    globs = copy.copy(globals())\n    globs.update({func.__name__: func})\n    doctest.run_docstring_examples(\n        func, globs, verbose=True, name=func.__name__)\n    return func","7d306ec6":"%matplotlib inline\nimport h5py\nfrom tqdm import tqdm_notebook\nfrom pathlib import Path\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom IPython.display import clear_output\ngait_lab_root = Path('..\/input') ","a380ec2d":"hdf5_path = gait_lab_root \/ 'all_gait_measurements_dropna.h5'\nwith h5py.File(hdf5_path, 'r') as hf:\n  for k1 in hf.keys():\n    for k2 in hf[k1].keys():\n      for k3 in hf[k1][k2]:\n        print('\/'.join([k1, k2, k3]), hf[k1][k2][k3].shape, 'of', len(hf[k1][k2].keys()))\n    break","d414bd18":"vicon_arc = h5py.File(hdf5_path, 'r')","2de73736":"from scipy.interpolate import interp1d\nimport nevergrad as ng","c95a5523":"print(', '.join(list(vicon_arc.keys())))\nexp_key = 'WALK'\nc_exp_data = vicon_arc[exp_key]\nhp_time = c_exp_data['ml1']['time'].value\nhp_center = c_exp_data['ml1']['headpose'].value\nvc_time = c_exp_data['vicon']['time'].value\nvc_center = c_exp_data['vicon']['headpose'].value\nprint(hp_time.shape, vc_time.shape)\nprint(hp_center.shape, vc_center.shape)","9d5c68b4":"def rotation_matrix(axis, theta):\n    \"\"\"\n    Return the rotation matrix associated with counterclockwise rotation about\n    the given axis by theta radians.\n    \"\"\"\n    axis = np.asarray(axis)\n    axis = axis \/ np.sqrt(np.dot(axis, axis))\n    a = np.cos(theta \/ 2.0)\n    b, c, d = -axis * np.sin(theta \/ 2.0)\n    aa, bb, cc, dd = a * a, b * b, c * c, d * d\n    bc, ad, ac, ab, bd, cd = b * c, a * d, a * c, a * b, b * d, c * d\n    return np.array([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)],\n                     [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)],\n                     [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]])\n  \ndef calc_trans_matrix(rot_mat, offset):\n  trans_mat = np.eye(4)\n  trans_mat[:3, :3] = rot_mat\n  trans_mat[3, :3] = offset\n  return trans_mat","32ad1c5c":"def rotate_xyz(g_center,\n              theta=np.pi\/2, \n              phi=np.pi, \n              omega=np.pi,\n              pos_x=0, \n              pos_y=0, \n              pos_z=0\n              ):\n  g_rot = np.ones((g_center.shape[0], 4))\n  g_rot[:, :3] = g_center\n  rot_mat_1 = rotation_matrix([1, 0, 0], theta)\n  rot_mat_2 = rotation_matrix([0, 1, 0], phi)\n  rot_mat_3 = rotation_matrix([0, 0, 1], omega)\n  comb_rot_mat = np.matmul(np.matmul(rot_mat_1, rot_mat_2), rot_mat_3)\n  full_rot_mat = calc_trans_matrix(comb_rot_mat, [pos_x, pos_y, pos_z])\n  return np.matmul(g_rot, full_rot_mat)[:, :3]","a69ca467":"DEF_OFFSET_S = 1.5 # normally around 1.5s of delay\ndef match_angles(fixed_time, fixed_xyz, moving_time, moving_xyz):\n  rs_fixed = fixed_xyz-np.nanmean(fixed_xyz, 0)\n  \n  rs_moving = np.stack([\n        interp1d(moving_time+fixed_time.min()-moving_time.min()+DEF_OFFSET_S, \n                 moving_xyz[:, i], \n                 bounds_error=False)(fixed_time) \n        for i in range(3)], -1)\n  def _match_func(x_args, verbose=False):\n    theta, phi, omega = x_args\n    rot_view = rotate_xyz(rs_moving, theta, phi, omega, 0, 0, 0)\n    rot_view -= np.nanmean(rot_view, 0)\n    if verbose:\n      print(x_args)\n      fig, m_axs = plt.subplots(3, 1, figsize=(15, 10))\n      for i, (c_ax, ax_n) in enumerate(zip(m_axs, 'xyz')):\n        c_ax.plot(fixed_time, rot_view[:, i], '-', label='Moving')\n        c_ax.plot(fixed_time, rs_fixed[:, i], '-', label='Fixed')\n        c_ax.legend()\n        c_ax.set_title(ax_n)\n    return np.nanmean(np.sum(np.abs(rs_fixed-rot_view), -1))\n    \n  return _match_func\n","2e54b4e1":"x0 = np.array([np.pi\/2, 0*np.pi, 1*np.pi])\ntheta_steps = np.linspace(-np.pi, np.pi, 9).tolist()\nbounds = [theta_steps]*3\nmae_opt_fun = match_angles(hp_time, hp_center, vc_time, vc_center)\nmae_opt_fun([0, 0, 0], True)","14369b80":"import nevergrad as ng\ninstrum_bounds = ng.Instrumentation(*[ng.var.OrderedDiscrete(c_bound) for c_bound in bounds])\noptimizer = ng.optimizers.OnePlusOne(instrumentation=instrum_bounds, budget=100, num_workers=4)\noptimizer","ec93f840":"res_angle = optimizer.minimize(lambda *x: mae_opt_fun(x))","f998cdf4":"mae_opt_fun(res_angle.args, True)","fca5ec1e":"init_x = res_angle.x\nres_angle = gp_minimize(mae_opt_fun, \n                  [(c_x-np.pi\/6, c_x+np.pi\/6) for c_x in res_angle.x], \n                  x0=res_angle.x,\n                  n_calls=100,\n                  n_jobs=4,\n                  n_random_starts=5)\nclear_output()\nprint('init', [int(180\/np.pi*x) for x in init_x])\nprint('final', [int(180\/np.pi*x) for x in res_angle.x])\nmae_opt_fun(res_angle.x, True)","8b9dcc29":"def inter_rotate_match(g_time, \n                 g_center, \n                 theta=np.pi\/2, \n                 phi=np.pi, \n                 omega=np.pi,\n                 time_offset=hp_time.min()+DEF_OFFSET_S,\n                 pos_x=0, \n                 pos_y=0, \n                 pos_z=0):\n  rot_view = rotate_xyz(g_center, theta, phi, omega, pos_x, pos_y, pos_z)\n  def _ifunc(time_vec):\n    return np.stack([\n        interp1d(g_time+time_offset, rot_view[:, i], bounds_error=False)(time_vec) \n        for i in range(3)], -1)\n  return _ifunc\n\ndef prefit_rotate_match(g_time, \n                 g_center, \n                 time_offset=hp_time.min()+DEF_OFFSET_S,\n                 pos_x=0, \n                 pos_y=0, \n                 pos_z=0):\n  theta, phi, omega = res_angle.x\n  return inter_rotate_match(g_time, g_center, \n                            theta=theta, phi=phi, \n                            omega=omega, time_offset=time_offset, \n                            pos_x=pos_x, pos_y=pos_y, pos_z=pos_z)","9b516353":"time_offset = hp_time.min()\n\nbase_offset = np.nanmean(hp_center-\n                         prefit_rotate_match(vc_time, vc_center, \n                                             time_offset, 0, 0, 0)(hp_time), 0)\nx0 = np.array([time_offset+DEF_OFFSET_S, base_offset[0], base_offset[1], base_offset[2]])\nx0","c150512f":"def calc_mae_val(x0_in):\n  g_trans = prefit_rotate_match(vc_time, vc_center, *x0_in)(hp_time)\n  return np.nanmean(np.sum(np.abs(hp_center-g_trans), -1))\ndef show_sync_results(x0):\n  g_trans = prefit_rotate_match(vc_time, vc_center, *x0)(hp_time)\n  fig, m_axs = plt.subplots(3, 1, figsize=(15, 10))\n  for i, (c_ax, ax_n) in enumerate(zip(m_axs, 'xyz')):\n    c_ax.plot(hp_time, g_trans[:, i], label='VICON')\n    c_ax.plot(hp_time, hp_center[:, i], label='HeadPose')\n    c_ax.set_title(ax_n)\n    c_ax.legend()\nshow_sync_results(x0)\nprint(calc_mae_val(x0))","4ac1be17":"%%time\nbounds = [(time_offset-5, time_offset+5)]+\\\n  [(xi-100.0, xi+100.0) for xi in base_offset]\nres = gp_minimize(calc_mae_val, \n                  bounds, \n                  x0=x0.tolist(),\n                  n_calls=100,\n                  n_jobs=4,\n                  n_random_starts=5)\nclear_output()","08741c21":"plt.semilogy(res.func_vals)\nfor s, e in zip(x0, res.x):\n  print('{:2.2f} -> {:2.2f}'.format(s, e))\nprint('MAE: {:2.2f} -> {:2.2f} mm'.format(calc_mae_val(x0), calc_mae_val(res.x)))","99e24518":"show_sync_results(res.x)","c9700e30":"%%time\nres = gp_minimize(calc_mae_val, \n                  bounds, \n                  x0=res.x_iters,\n                  y0=res.func_vals,\n                  n_calls=200,\n                  n_jobs=2,\n                  n_random_starts=3)","6e478cb9":"plt.semilogy(res.func_vals)","7176ff24":"show_sync_results(res.x)\nfor s, e in zip(x0, res.x):\n  print(s, '->', e)","9abe2487":"belt_vec = c_exp_data['vicon']['Belt'].value\nmask = np.any(np.isnan(belt_vec), axis=1)\nbelt_vec[~mask].shape","f7477207":"skip_keys = ['time', 'frame']\nvicon_keys = [k for k in c_exp_data['vicon'].keys() if k not in skip_keys]\nout_dict = {}\nml_time = c_exp_data['ml1']['time'].value\nfor c_key in vicon_keys:\n  m_vec = c_exp_data['vicon'][c_key].value\n  m_vec = m_vec[~np.any(np.isnan(m_vec), axis=1)]\n  trans_chan_func = inter_rotate_match(\n       c_exp_data['vicon']['time'].value,\n       m_vec,\n       theta=res_angle.x[0], \n       phi=res_angle.x[1], \n       omega=res_angle.x[2],\n       time_offset=res.x[0],\n       pos_x=res.x[1], \n       pos_y=res.x[2], \n       pos_z=res.x[3]\n  )\n  try:\n    out_dict['vicon_{}_'.format(c_key)] = trans_chan_func(ml_time)\n  except ValueError as e:\n    print(c_exp_data['vicon']['time'].value.shape, c_exp_data['vicon'][c_key].value.shape, m_vec.shape)\n    print(e)","ff4c73af":"@autotest\ndef nd_to_xyz(k, v):\n  \"\"\"Convert nd columns into multiple columns\n  >>> nd_to_xyz('bob', np.eye(3))\n  {'bobx': array([1., 0., 0.]), 'boby': array([0., 1., 0.]), 'bobz': array([0., 0., 1.])}\n  >>> nd_to_xyz('bob', np.eye(2))\n  {'bob0': array([1., 0.]), 'bob1': array([0., 1.])}\n  >>> nd_to_xyz('dan', [1,2,3])\n  {'dan': [1, 2, 3]}\n  \"\"\"\n  if len(np.shape(v))==1:\n    return {k: v}\n  elif (len(np.shape(v))==2) and (np.shape(v)[1]==3):\n    return {'{}{}'.format(k, ax_name): v[:, i] for i, ax_name in enumerate('xyz')}\n  elif (len(np.shape(v))==2):\n    return {'{}{}'.format(k, i): v[:, i] for i in range(np.shape(v)[1])}\n  else:\n    raise ValueError('Cannot be easily converted: {} -> {}'.format(k, np.shape(v)))","2cc9f9b9":"force_list = [nd_to_xyz('force_{}'.format(k), v) \n             for k, v in c_exp_data['force'].items() if k not in skip_keys]\nforce_list = [{k:interp1d(c_exp_data['force']['time'].value+res.x[0], v, bounds_error=False)(ml_time) \n               for k,v in x.items()} for x in force_list]","0ed8cdbb":"col_list = [nd_to_xyz(k, v) for k,v in out_dict.items()]\ncol_list += [nd_to_xyz('ml1_{}'.format(k), v) for k, v in c_exp_data['ml1'].items()]\ncol_list += force_list\ndef valid_col(col):\n  if 'failure' in col.lower():\n    return False\n  if 'reserve' in col.lower():\n    return False\n  if 'quater' in col.lower():\n    return False\n  if 'status' in col.lower():\n    return False\n  if 'msg_num' in col.lower():\n    return False\n  if 'idx' in col.lower():\n    return False\n  return True\n  \nsynced_df = pd.DataFrame({k.upper(): v for x in col_list for k,v in x.items() if valid_col(k)})\nsynced_df.sample(3)","e762b939":"fig, m_axs = plt.subplots(3, 1, figsize=(15, 5))\nfor c_ax, ax_name in zip(m_axs, 'XYZ'):\n  c_ax.plot(synced_df['ML1_TIME'], 1000*synced_df['ML1_TRANSLATION_{}'.format(ax_name)], label='ML Device')\n  c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_HEADPOSE_{}'.format(ax_name)], label='VICON Googles')\n  c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_BELT_{}'.format(ax_name)], label='VICON Beltpack')\n  c_ax.plot(synced_df['ML1_TIME'], synced_df['VICON_FOOT_LF_{}'.format(ax_name)], label='VICON Foot')\n  c_ax.legend()\n  c_ax.set_ylabel('{} (mm)'.format(ax_name))","6a9b6322":"synced_df.to_csv('{}_example.csv'.format(exp_key), index=False)","6a177c6a":"synced_df.describe().T","5c624d78":"vicon_arc.close()","0d7046d4":"# Clean Up","1012db00":"# Syncronizing Events","640aac08":"# Export","bb52443d":"## 6DoF","939b0ae0":"# Load Data","069e7392":"### Refinement\nRefine the angle selection","1b026efe":"# Setup \/ Install Libraries"}}