{"cell_type":{"8d1dc3d5":"code","1c24eb09":"code","031347c4":"code","46480bbd":"code","5fe1ecfe":"code","4aebb095":"code","6717a23f":"code","99c3da79":"code","9458c28d":"code","2c8ce958":"code","3b367335":"code","978b0632":"code","4a9d239d":"code","0e00c020":"code","9278ad7d":"code","11cf9e08":"code","8887d424":"code","6682d0bd":"code","0831b6a6":"code","68280375":"code","44a4166e":"code","f561d1fe":"markdown","3401556d":"markdown","005dce8a":"markdown","9b1326bf":"markdown","0a7b2208":"markdown","345f6246":"markdown","c674aae8":"markdown","3ab1ca55":"markdown","9dc3711d":"markdown"},"source":{"8d1dc3d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#model selection and evaluation\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score,mean_squared_error\n\n\n# Model libraries\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c24eb09":"data=pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\ndata.head()","031347c4":"data[\"date\"] = pd.to_datetime(data[\"date\"])\ndata[\"date\"]","46480bbd":"data.info()","5fe1ecfe":"data.describe()","4aebb095":"data.isnull().sum()","6717a23f":"data.date=pd.to_datetime(data.date)\ndata.date=pd.to_numeric(data.date)","99c3da79":"data.corr()","9458c28d":"data.columns","2c8ce958":"plt.figure(figsize=(20, 16))\nplt.title('Pearson Correlation Matrix',fontsize=25)\nsns.heatmap(data.corr(),linewidths=0.25,square=True,cmap=\"BuGn\",linecolor='w',annot=True);","3b367335":"data.columns","978b0632":"fig, ax= plt.subplots(figsize=(27,30), ncols=3, nrows=6)\n\nsns.scatterplot(x='bedrooms', y='price', data=data, ax=ax[0][0])\nsns.scatterplot(x='bathrooms', y='price', data=data, ax=ax[0][1])\nsns.scatterplot(x='sqft_living', y='price', data=data, ax=ax[0][2])\nsns.scatterplot(x='sqft_lot', y='price', data=data, ax=ax[1][0])\nsns.scatterplot(x='floors', y='price', data=data, ax=ax[1][1])\nsns.scatterplot(x='waterfront', y='price', data=data, ax=ax[1][2])\nsns.scatterplot(x='view', y='price', data=data, ax=ax[2][0])\nsns.scatterplot(x='condition', y='price', data=data, ax=ax[2][1])\nsns.scatterplot(x='grade', y='price', data=data, ax=ax[2][2])\nsns.scatterplot(x='sqft_above', y='price', data=data, ax=ax[3][0])\nsns.scatterplot(x='sqft_basement', y='price', data=data, ax=ax[3][1])\nsns.scatterplot(x='yr_built', y='price', data=data, ax=ax[3][2])\nsns.scatterplot(x='yr_renovated', y='price', data=data, ax=ax[4][0])\nsns.scatterplot(x='zipcode', y='price', data=data, ax=ax[4][1])\nsns.scatterplot(x='lat', y='price', data=data, ax=ax[4][2])\nsns.scatterplot(x='long', y='price', data=data, ax=ax[5][0])\nsns.scatterplot(x='sqft_living15', y='price', data=data, ax=ax[5][1])\nsns.scatterplot(x='sqft_lot15', y='price', data=data, ax=ax[5][2])\n","4a9d239d":"model_name= [] #Modal name \nMSE_score= []  #Mean squared error\nR2_score=[]    #R^2 Score","0e00c020":"space=data['sqft_living']\nprice=data['price']\n\nx = np.array(space).reshape(-1, 1)\ny = np.array(price)\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=0)\nprint(\"X Train Shape\", x_train.shape)\nprint(\"Y Train Shape\", y_train.shape)\nprint(\"X Test Shape\", x_test.shape)\nprint(\"Y Test Shape\", y_test.shape)\n\nsim_lin=LinearRegression()\nsim_lin.fit(x_train,y_train)\nsim_lin_pred=sim_lin.predict(x_test)\nprint(\"Coefficient of Simple Lin Regression : \",sim_lin.coef_[:])\nprint(\"Intercept of Simple Lin Regression : \",sim_lin.intercept_)\nmodel_name.append(\"Simple Linear Regression\")\nMSE_score.append(mean_squared_error(y_test,sim_lin_pred))\nR2_score.append(r2_score(y_test,sim_lin_pred))\n\nprint('Mean Squared Error',mean_squared_error(y_test,sim_lin_pred))\nprint('R score %0.2f'%r2_score(y_test,sim_lin_pred))\n","9278ad7d":"x=data.drop(['id', 'date', 'price','zipcode'],axis=1)\ny=data['price']\n\nxtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=0)\nprint(\"X Train Shape\", x_train.shape)\nprint(\"Y Train Shape\", y_train.shape)\nprint(\"X Test Shape\", x_test.shape)\nprint(\"Y Test Shape\", y_test.shape)","11cf9e08":"multi_reg=LinearRegression()\nmulti_reg.fit(xtrain,ytrain)\nmulti_pred=multi_reg.predict(xtest)\n\nmodel_name.append('Multi Linear Regression')\nMSE_score.append(mean_squared_error(ytest,multi_pred))\nR2_score.append(r2_score(ytest,multi_pred))\nprint(\"Coefficient of Multi Lin Regression : \",multi_reg.coef_[0:5])\nprint(\"Intercept of Multi Lin Regression : \",multi_reg.intercept_)\nprint('Mean Squared Error',mean_squared_error(ytest,multi_pred))\nprint('R score %0.2f'%r2_score(ytest,multi_pred))\n","8887d424":"ridge=Ridge()\nridge.fit(xtrain,ytrain)\nridge_pred=ridge.predict(xtest)\n\nmodel_name.append('Ridge Regression')\nMSE_score.append(mean_squared_error(ytest,ridge_pred))\nR2_score.append(r2_score(ytest,ridge_pred))\nprint(\"Coefficient of Ridge Regression : \",ridge.coef_[0:5])\nprint(\"Intercept of Ridge Regression : \",ridge.intercept_)\nprint('Mean Squared Error',mean_squared_error(ytest,ridge_pred))\nprint('R score %0.2f'%r2_score(ytest,ridge_pred))","6682d0bd":"lasso_model = Lasso()\nlasso_model.fit(xtrain,ytrain)\nlasso_model_predict = lasso_model.predict(xtest)\n\nmodel_name.append('Lasso Regression')\nMSE_score.append(mean_squared_error(ytest,lasso_model_predict))\nR2_score.append(r2_score(ytest,lasso_model_predict))\nprint(\"Coefficient of Lasso Regression : \",lasso_model.coef_[0:5])\nprint(\"Intercept of Lasso Regression : \",lasso_model.intercept_)\nprint('Mean Squared Error',mean_squared_error(ytest,lasso_model_predict))\nprint('R score %0.2f'%r2_score(ytest,lasso_model_predict))","0831b6a6":"decision_tree = DecisionTreeRegressor()\ndecision_tree.fit(xtrain,ytrain)\ndecision_tree_predict = decision_tree.predict(xtest)\n\nmodel_name.append('Decision Tree Regression')\nMSE_score.append(mean_squared_error(ytest,decision_tree_predict))\nR2_score.append(r2_score(ytest,decision_tree_predict))\nprint('Mean Squared Error',mean_squared_error(ytest,decision_tree_predict))\nprint('R score %0.2f'%r2_score(ytest,decision_tree_predict))","68280375":"plt.subplots(figsize=(15, 5))\nsns.barplot(x=R2_score,y=model_name,palette = sns.cubehelix_palette(len(R2_score)))\nplt.xlabel(\"Score\")\nplt.ylabel(\"Regression Modal\")\nplt.title('Regression Scores')\nplt.show()","44a4166e":"#set ids as Id and predict survival \nids = data['id']\npredict = decision_tree.predict(data.drop([\"id\",\"date\",\"price\",\"zipcode\"],axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'HouseID' : ids, 'Price': predict})\noutput.to_csv('submission.csv', index=False)","f561d1fe":"# **Train and Test Split**\n* Train data is %80 all dataset and test data is %20 for all dataset.","3401556d":"\n# EDA House Sales in King Country Dataset\n\nThis is the dataset eith the given feature:\n\n* id: house id\n* date: date that the house was bought.\n* price: house price\n* bedrooms: number of bedroom\n* bathrooms: number of bathroom\n* sqft_living: Square foot Living\n* sqft_lot: Square foot Lot\n* floors: Number of floor\n* waterfront: waterfront\n* view: Number of view\n* condition: condition\n* grade: grade\n* sqft_above: Square foot above\n* sqft_basement: Square foot basement\n* yr_built: year that house was built\n* yr_renovated: year that house was renovated\n* zipcode: zipcode\n* lat: latitude\n* long: longitude\n* sqft_living15: Square foot Living in 2015\n* sqft_lot15: Square foot Lot in 2015","005dce8a":"In this data set:\n\n**It has total 21 feature.**\n\n* There are no null values present.\n* There are total 15 feature with datatype int64.\n* 5 feature are float64 type.\n* 1 feature is object type.","9b1326bf":"# **Train and Test Split**\n* Train data is %80 all dataset and test data is %20 for all dataset.","0a7b2208":"# Conclusion:\n\n**According to the result,we can observe that compair to all the mobel Decision Tree Modal as performed well.\nThis algorithm modal score is 78% successful.**\n    \n","345f6246":"# **Now let see the correlation between all features with help of corr() function and also we will visualize it by using seaborn**","c674aae8":"***Visualization using Scatter Plot:***","3ab1ca55":"In this above correlation matrix:\n\nWe can observe the correlation with target feature price","9dc3711d":"# Create and Evaluation Model\n\nIn this dataset I used regression model such as:\n\n1. Simple Linear Regression\n2. Multilinear Regression\n3. Ridge Regression\n4. Lasso Regression\n5. Decision Tree Regression"}}