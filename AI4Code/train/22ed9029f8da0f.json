{"cell_type":{"d187eaa3":"code","854959be":"code","55a7edd1":"code","7bc6ecd3":"code","9a243a39":"code","8c37637c":"code","5341bd2c":"code","333d594c":"code","b24c7600":"code","13125682":"code","c1bb6995":"code","788794b7":"code","28d0e070":"markdown","db5696fb":"markdown","5bf6670b":"markdown","8b7f265d":"markdown","8c4a7065":"markdown","b908af28":"markdown","b0301a4f":"markdown","85768b70":"markdown","6619219e":"markdown","5f1d6cb6":"markdown","3264307f":"markdown"},"source":{"d187eaa3":"import bisect\nimport os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib as mpl\n\nfrom scipy.stats import norm\n\n\ndata_path = '..\/input'\ndata_provider = 'beat-the-bookie-worldwide-football-dataset'\ndataset_type = 'closing_odds.csv.gz'\n\ndata_columns = [\n    u'match_id', u'league', u'match_date', u'home_team', u'home_score',\n    u'away_team', u'away_score', u'avg_odds_home_win', u'avg_odds_draw',\n    u'avg_odds_away_win', u'max_odds_home_win', u'max_odds_draw',\n    u'max_odds_away_win', u'top_bookie_home_win', u'top_bookie_draw',\n    u'top_bookie_away_win', u'n_odds_home_win', u'n_odds_draw', u'n_odds_away_win'\n]\n\nstrategy_1 = 'strategy_beatthebookie'\nstrategy_2 = 'strategy_random'\nRESULTS = {\n    strategy_1: {\n        'money': None, \n        'accuracy': None,\n        'max_odds': None, \n        'mean_odds': None, \n        'ids': None\n    },\n    strategy_2: {\n        'money': None, \n        'accuracy': None,\n        'max_odds': None, \n        'mean_odds': None, \n        'ids': None\n    }\n}","854959be":"class WeightedRandomGenerator(object):\n    '''\n    # helper function from: https:\/\/eli.thegreenplace.net\/2010\/01\/22\/weighted-random-generation-in-python\n    '''\n    def __init__(self, weights):\n        self.totals = []\n        running_total = 0\n\n        for w in weights:\n            running_total += w\n            self.totals.append(running_total)\n\n    def next(self):\n        rnd = random.random() * self.totals[-1]\n        return bisect.bisect_right(self.totals, rnd)\n\n    def __call__(self):\n        return self.next()","55a7edd1":"class ExperimentBeatTheBookie(object): \n    \n    def __init__(\n        self, \n        odds_bins=np.arange(0,1,0.0125), \n        min_games=100,\n        bet=50,\n        marg=0.05,\n        n_samples=100,\n        run_strategies=1,\n        n_valid_odds=3\n    ):\n        self.odds_bins = odds_bins #probability bins\n        self.min_games = min_games\n        self.bet = bet # money on each bet\n        self.marg = marg # margin odds above the mean.\n        self.n_samples = n_samples # number of returns to calculate (with replacement) for the random strategy\n        self.run_strategies=run_strategies # 1: run both strategies, 0: load results from disk\n        self.n_valid_odds=n_valid_odds\n        self.data = None\n        self.result = None\n        self.acc_home = []\n        self.acc_draw = []\n        self.acc_away = []\n        self.bin_odds_home_mean = []\n        self.bin_odds_draw_mean = []\n        self.bin_odds_away_mean = []\n        self.n_games = None\n        self.leagues = None\n        self.n_leagues = None\n        self.results = RESULTS\n    \n    def load_data(self):\n        # Fields: \n        # 1. match_table_id: unique identifier of the game\n        # 2. league of the game\n        # 3. match date\n        # 4. home team\n        # 5. 90-minute score of home team\n        # 6. away team\n        # 7. 90-minute score of away team\n        # 8. average closing odds home win\n        # 9. average closing odds draw\n        # 10. average closing odds away win\n        # 11. maximum offered closing odds home win\n        # 12. maximum offered closing odds draw\n        # 13. maximum offered closing odds away win\n        # 14. name of bookmaker offering maximum closing odds for home win\n        # 15. name of bookmaker offering maximum closing odds for draw\n        # 16. name of bookmaker offering maximum closing odds for away win\n        # 17. number of available closing odds for home win\n        # 18. number of available closing odds for draw\n        # 19. number of available closing odds for away win\n        self.data = pd.read_csv(\n            os.path.join(data_path, data_provider, dataset_type), \n            compression='gzip', \n            sep=',', \n            quotechar='\"'\n        )\n        # Mini cleaning\n#         self.data = self.data[\n#             (self.data['avg_odds_home_win'] != 0.0) \n#             & (self.data['avg_odds_draw'] != 0.0) \n#             & (self.data['avg_odds_away_win'] != 0.0)\n#         ]\n        # Calculate basic stats\n        self.n_games = self.data.shape[0]\n        self.leagues = self.data['league']\n        self.n_leagues = pd.unique(self.data['league']).shape[0]\n        \n        self.result = 0 * (self.data['home_score'] > self.data['away_score']) +\\\n            1 * (self.data['home_score'] == self.data['away_score']) +\\\n            2 * (self.data['home_score'] < self.data['away_score'])\n\n    \n    def beatthebookie_strategy(self):\n        earn_margin_home = ((1 \/ self.data['avg_odds_home_win'] - self.marg) * self.data['max_odds_home_win'] - 1) * \\\n                            (self.data['n_odds_home_win'] > self.n_valid_odds)\n        earn_margin_draw = ((1 \/ self.data['avg_odds_draw'] - self.marg) * self.data['max_odds_draw'] - 1) * \\\n                            (self.data['n_odds_draw'] > self.n_valid_odds)\n        earn_margin_away = ((1 \/ self.data['avg_odds_away_win'] - self.marg) * self.data['max_odds_away_win'] - 1) * \\\n                            (self.data['n_odds_away_win'] > self.n_valid_odds)\n\n        max_margin = np.max(\n            pd.concat(\n                [earn_margin_home, earn_margin_draw, earn_margin_away],\n                axis=1\n            ),\n            axis=1\n        )\n        \n        max_arg = pd.concat(\n            [earn_margin_home, earn_margin_draw, earn_margin_away],\n            axis=1\n        ).apply(np.argmax,axis=1)\n        \n        max_margin_max_odd = (max_arg == 0) * self.data['max_odds_home_win'] + \\\n                             (max_arg == 1) * self.data['max_odds_draw'] + \\\n                             (max_arg == 2) * self.data['max_odds_away_win']\n        \n        max_margin_mean_odd = (max_arg == 0) * self.data['avg_odds_home_win'] + \\\n                             (max_arg == 1) * self.data['avg_odds_draw'] + \\\n                             (max_arg == 2) * self.data['avg_odds_away_win']\n\n        should_bet = max_margin > 0\n        bets_outcome = self.bet * (max_margin_max_odd - 1) * (max_arg == self.result) - self.bet * (max_arg != self.result)\n        accuracy = (max_arg == self.result)[should_bet].apply(int)\n        \n        self.results[strategy_1]['money'] = np.cumsum(bets_outcome[should_bet])\n        self.results[strategy_1]['accuracy'] = accuracy\n        self.results[strategy_1]['max_odds'] = max_margin_max_odd[should_bet]\n        self.results[strategy_1]['mean_odds'] = max_margin_mean_odd[should_bet]\n        self.results[strategy_1]['ids'] = max_arg.iloc[np.where(should_bet)]\n    \n    \n    def random_strategy(self, p_home, p_draw, p_away):\n        money = np.zeros([self.n_samples, self.n_games])\n        accuracy = np.zeros([self.n_samples, self.n_games])\n        max_odds = np.zeros([self.n_samples, self.n_games])\n        mean_odds = np.zeros([self.n_samples, self.n_games])\n        ids = np.zeros([self.n_samples, self.n_games])\n\n        wrg = WeightedRandomGenerator([p_home, p_draw, p_away])\n\n        for samp in range(0, self.n_samples):\n            inds = np.random.choice(range(0, self.n_games), (self.n_games), replace=False)\n            sample = self.data.iloc[inds]\n            sample_result = self.result.iloc[inds]\n            bet_side = np.array([wrg.next() for i in range(self.n_games)])\n            sample_max_odds = (bet_side == 0) * sample['max_odds_home_win'] + \\\n                             (bet_side == 1) * sample['max_odds_draw'] + \\\n                             (bet_side == 2) * sample['max_odds_away_win']\n            sample_mean_odds = (bet_side == 0) * sample['max_odds_home_win'] + \\\n                             (bet_side == 1) * sample['max_odds_draw'] + \\\n                             (bet_side == 2) * sample['max_odds_away_win']\n\n            bets_outcome = self.bet * (sample_max_odds - 1) * (sample_result == bet_side) - self.bet * (sample_result != bet_side)\n            money[samp,] = np.cumsum(bets_outcome)\n            accuracy[samp,] = (sample_result == bet_side).apply(int)\n            max_odds[samp,] = sample_max_odds\n            mean_odds[samp,] = sample_mean_odds\n            ids[samp,] = bet_side\n        \n        self.results[strategy_2]['money'] = money\n        self.results[strategy_2]['accuracy'] = accuracy\n        self.results[strategy_2]['max_odds'] = max_odds\n        self.results[strategy_2]['mean_odds'] = mean_odds\n        self.results[strategy_2]['ids'] = ids\n        \n    def print_general_overview(self):\n        prior_home = float(sum(self.data['home_score'] > self.data['away_score'])) \/ self.n_games * 100\n        prior_draw = float(sum(self.data['home_score'] == self.data['away_score'])) \/ self.n_games * 100\n        prior_away = float(sum(self.data['home_score'] < self.data['away_score'])) \/ self.n_games * 100\n\n        print('Total number of Leagues : {}'.format(self.n_leagues));\n        print('Total number of Games   : {}\\n'.format(self.n_games)); \n        \n        print('Proportion of Home wins : {:2.3f}%'.format(prior_home));\n        print('Proportion of Draws     : {:2.3f}%'.format(prior_draw));\n        print('Proportion of Away wins : {:2.3f}%'.format(prior_away));\n        \n    \n    def calculate_accuracy_of_prediction(self):\n        # Calculate accuracy of prediction as a function of the implicit probability \n        # contained in the odds\n\n        # Home victory\n        p_home = 1\/self.data['avg_odds_home_win']\n        p_draw = 1\/self.data['avg_odds_draw']\n        p_away = 1\/self.data['avg_odds_away_win']\n\n        home_score = self.data['home_score']\n        away_score = self.data['away_score']\n \n        for bn in range(0, len(self.odds_bins) - 2):\n            # Get the data from the bin\n            inds_home = np.where((p_home > self.odds_bins[bn]) & (p_home <= self.odds_bins[bn + 1]))[0]\n            inds_draw = np.where((p_draw > self.odds_bins[bn]) & (p_draw <= self.odds_bins[bn + 1]))[0]\n            inds_away = np.where((p_away > self.odds_bins[bn]) & (p_away <= self.odds_bins[bn + 1]))[0]\n            # Get accuracy for home, draw away\n            if (len(inds_home) >= self.min_games):\n                self.acc_home.append(float(sum(home_score[inds_home] > away_score[inds_home])) \/ len(inds_home))\n                self.bin_odds_home_mean.append(np.mean(p_home[inds_home]));\n            if (len(inds_draw) >= self.min_games):\n                self.acc_draw.append(float(sum(home_score[inds_draw] == away_score[inds_draw])) \/ len(inds_draw))\n                self.bin_odds_draw_mean.append(np.mean(p_draw[inds_draw]))\n            if (len(inds_away) >= self.min_games):\n                self.acc_away.append(float(sum(home_score[inds_away] < away_score[inds_away])) \/ len(inds_away))\n                self.bin_odds_away_mean.append(np.mean(p_away[inds_away]))\n\n    def plot_accuracy_of_prediction(self):\n        mpl.pyplot.plot(self.acc_home, self.bin_odds_home_mean,'.k')\n        mpl.pyplot.plot(self.acc_draw, self.bin_odds_draw_mean,'.r')\n        mpl.pyplot.plot(self.acc_away, self.bin_odds_away_mean,'.b')\n        mpl.pyplot.show()","7bc6ecd3":"experiment = ExperimentBeatTheBookie()\nexperiment.load_data()\nexperiment.print_general_overview()","9a243a39":"experiment.calculate_accuracy_of_prediction()\nexperiment.plot_accuracy_of_prediction()","8c37637c":"experiment.beatthebookie_strategy()\np_home = np.mean(experiment.results[strategy_1]['ids'][0:]==0)\np_draw = np.mean(experiment.results[strategy_1]['ids'][0:]==1)\np_away = np.mean(experiment.results[strategy_1]['ids'][0:]==2)\nprint(p_home, p_draw, p_away)","5341bd2c":"experiment.random_strategy(p_home, p_draw, p_away)","333d594c":"mean_s1 = np.mean(experiment.results[strategy_1]['mean_odds'])\nmean_s2 = np.mean(experiment.results[strategy_2]['mean_odds'])\n\nstd_s1 = np.std(experiment.results[strategy_1]['mean_odds'])\nstd_s2 = np.std(experiment.results[strategy_2]['mean_odds'])\n\nprint('Strategy #1: Mean={:5.3f} | Std={:5.3f}'.format(mean_s1, std_s1))\nprint('Strategy #2: Mean={:5.3f} | Std={:5.3f}'.format(mean_s2, std_s2))","b24c7600":"offsets = [-0.034, -0.057, -0.037]\n\ns1_mean_accuracy = np.mean(experiment.results[strategy_1]['accuracy']) * 100\ns1_expected_accuracy = np.mean(\n    pd.concat(\n        [\n            (1 \/ experiment.results[strategy_1]['mean_odds'][experiment.results[strategy_1]['ids']==0]) + offsets[0], \n            (1 \/ experiment.results[strategy_1]['mean_odds'][experiment.results[strategy_1]['ids']==1]) + offsets[1], \n            (1 \/ experiment.results[strategy_1]['mean_odds'][experiment.results[strategy_1]['ids']==2]) + offsets[2], \n        ]\n    )\n) * 100\nprint('Strategy #1: Mean Accuracy={:5.3f}% | Expected Accuracy={:5.3f}%'.format(s1_mean_accuracy, s1_expected_accuracy))","13125682":"s2_expected_accuracies = np.zeros((experiment.n_samples))\nfor m in range(0, experiment.n_samples):\n    odds_home = experiment.results[strategy_2]['mean_odds'][m, experiment.results[strategy_2]['ids'][m, :]==0]\n    odds_draw = experiment.results[strategy_2]['mean_odds'][m, experiment.results[strategy_2]['ids'][m, :]==1]\n    odds_away = experiment.results[strategy_2]['mean_odds'][m, experiment.results[strategy_2]['ids'][m, :]==2]\n    s2_prob = np.concatenate(\n        [\n            (1 \/ odds_home) + offsets[0],\n            (1 \/ odds_draw) + offsets[1], \n            (1 \/ odds_away) + offsets[2]\n        ]\n    )\n    s2_expected_accuracies[m] = np.mean(s2_prob)\n\ns2_mean_accuracy = np.mean(np.mean(experiment.results[strategy_2]['accuracy'])) * 100\ns2_expected_accuracy = np.mean(s2_expected_accuracies) * 100\n\nprint('Strategy #2: Mean Accuracy={:5.3f}% | Expected Accuracy={:5.3f}%'.format(s2_mean_accuracy, s2_expected_accuracy))","c1bb6995":"random_strategy_mean = np.nanmean(experiment.results[strategy_2]['money'][:,-1])\nrandom_strategy_std = np.nanstd(experiment.results[strategy_2]['money'][:,-1])\n\ndelta_sigma = (np.array(experiment.results[strategy_1]['money'])[-1] - random_strategy_mean) \/ random_strategy_std # distance to the mean in standard deviations\n\n#p = norm.cdf(np.array(s1_money)[-1],random_strategy_mean,random_strategy_std)\n# percentage of z values expected to lie above z\u03c3.  CI = (\u2212z\u03c3, z\u03c3)\n#prop = (1 - p);\n#fraction = 1 \/ prop; % expressed as fraction\n\nprint('Mean Odds of Our Strategy       : {:2.3f} (STD={:2.3f})'.format(mean_s1, std_s1))\nprint('Mean Odds of Random Bet Strategy: {:2.3f} (STD={:2.3f})'.format(mean_s2, std_s2))\nprint('Beat The Bookie statistics:');\nprint('\\tTotal bets: {:2.0f} \\n\\tReturn    : {:2.4f}\\n\\tProfit    : {:2.0f}\\n\\tExpected Accuracy: {:2.1f}%\\n\\tMean Accuracy    : {:2.2f}%'.format(\n    experiment.results[strategy_1]['money'].shape[0], \n    np.array(experiment.results[strategy_1]['money'])[-1]\/(experiment.results[strategy_1]['money'].shape[0] * experiment.bet) * 100,\n    np.array(experiment.results[strategy_1]['money'])[-1], \n    s1_expected_accuracy, \n    s1_mean_accuracy\n    ) \n)\n\nprint('Random bet strategy statistics:');\nprint('\\tTotal bets: {:2.0f} \\n\\tReturn    : {:2.4f}\\n\\tProfit    : {:2.0f}\\n\\tExpected Accuracy: {:2.1f}%\\n\\tMean Accuracy    : {:2.2f}%'.format(\n    experiment.results[strategy_2]['money'].shape[1], \n    random_strategy_mean\/(experiment.results[strategy_2]['money'].shape[1] * experiment.bet) * 100,\n    random_strategy_mean, \n    s2_expected_accuracy, \n    s2_mean_accuracy\n    ) \n)","788794b7":"mpl.pyplot.plot(range(experiment.results[strategy_1]['money'].shape[0]), experiment.results[strategy_1]['money'])\nmpl.pyplot.show()","28d0e070":"### Execute the both \"BeatTheBookie\" and \"Random\" strategies","db5696fb":"### Class and Routines definitions","5bf6670b":"### Calculate Expected Accuracy of Random bet Strategy","8b7f265d":"## Experiment details\n\n> Quoted from https:\/\/www.kaggle.com\/ualex1\/that-s-all-forks-or-beat-a-bookie-v-2-0\n\n**Research Description** \n\n1. The following analysis was done thanks to dataset on Kaggle:\n    Link: https:\/\/www.kaggle.com\/austro\/beat-the-bookie-worldwide-football-dataset\n2. The researchers, who shared this dataset, wrote a very interesting article about how to beat a bookie.\n    Link: https:\/\/arxiv.org\/ftp\/arxiv\/papers\/1710\/1710.02824.pdf\n3. Moreover, they did explanation of this method with less mathematic language:\n    Link: http:\/\/www.lisandrokaunitz.com\/index.php\/en\/beat-the-bookies-strategy-explained\/*\n\n    Authors strategy in few words:\n\n    *     Find underestimated bets\n    *     Bet on one outcome\n    *     Win\n","8c4a7065":"## Experiment Execution\n\n### Load data and print general overview","b908af28":"### TODO: Fix the issues, and achieve full reproducibility as an initial https:\/\/www.kaggle.com\/austro\/reproduction-of-winning-strategy-kernel kernel\n","b0301a4f":"## These are are the intercepts obtained in the regression analysis of Figure 1 (see Figure1.py)\n\n### Calculate Expected Accuracy of our strategy","85768b70":"### Calculate accuracy of prediction as a function of the implicit probability contained in the odds","6619219e":"## Final Stats & Plots","5f1d6cb6":"### Import packages","3264307f":"## Mean closing odds and Expected accuracy\n\n### Compute descriptive stats"}}