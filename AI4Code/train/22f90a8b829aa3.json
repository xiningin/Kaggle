{"cell_type":{"470c57d2":"code","e61e1dd4":"code","7e2addc0":"code","74206b9e":"code","76a06e5b":"code","72b10dd1":"code","8991af49":"code","be852080":"code","061b794d":"code","4ae89019":"code","472082dc":"code","7e87fc0c":"code","be7c5959":"code","ed8e1609":"code","30193f77":"code","5dbc8088":"code","ed10ee4e":"code","1a5afa6f":"code","9daefbed":"code","a33a4ca6":"markdown","226ddc98":"markdown","4fcef30a":"markdown","0f5ae009":"markdown","bf122542":"markdown","07f7c903":"markdown","fbc943fa":"markdown","829485be":"markdown","df7b4856":"markdown","79b2b436":"markdown"},"source":{"470c57d2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","e61e1dd4":"df=pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf.head()","7e2addc0":"df.dtypes","74206b9e":"df.isnull().sum()","76a06e5b":"cat_cols = ['sex','exng','caa','cp','fbs','restecg','slp','thall']\ncon_cols = [\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]","72b10dd1":"for col in con_cols:\n    df[col].hist()\n    plt.title(col)\n    plt.show()","8991af49":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf[con_cols] = scaler.fit_transform(df[con_cols]) #only normalize continus data\n\ndf.head()\n","be852080":"x=df.drop(columns=\"output\")\ny=df[\"output\"]","061b794d":"from sklearn.model_selection import train_test_split","4ae89019":"X_train, X_test, y_train, y_test = train_test_split( x, y, test_size=0.2, random_state=4)","472082dc":"from sklearn import svm\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train, y_train) ","7e87fc0c":"yhat = clf.predict(X_test)\nyhat [0:5]","be7c5959":"from sklearn.metrics import classification_report, confusion_matrix\nimport itertools","ed8e1609":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","30193f77":"cnf_matrix = confusion_matrix(y_test, yhat, labels=[0,1])\nnp.set_printoptions(precision=2)\n\nprint (classification_report(y_test, yhat))\n\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=['no heart attack(0)','heart attack(1)'],normalize= False,  title='Confusion matrix')","5dbc8088":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(X_train,y_train)","ed10ee4e":"y_pred = lr.predict(X_test)\ny_pred[0:5]","1a5afa6f":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","9daefbed":"from sklearn.metrics import jaccard_score\njaccard_score(y_test, y_pred,pos_label=1)","a33a4ca6":"## Read File","226ddc98":"# SVM","4fcef30a":"## Evaluation LogisticRegression","0f5ae009":"## Evaluation SVM","bf122542":"## Normalize data","07f7c903":"## LogisticRegression","fbc943fa":"## Predict LogisticRegression","829485be":"## make train and test data","df7b4856":"### Predict SVM","79b2b436":"## check types"}}