{"cell_type":{"610e16df":"code","1ff5beef":"code","e5bb1af6":"code","23dcaaeb":"code","5e29e48f":"code","3f652da2":"code","89b22233":"code","bb92f108":"code","c2ef4db9":"code","b5d4769c":"code","36798378":"code","3ab31c1d":"code","1e61362e":"code","d5752b3a":"code","d06a5a1f":"code","def3786b":"code","0a873786":"code","8eea4751":"code","916da05f":"code","f08679f7":"code","0c2209da":"code","5de387e3":"code","3539f7fb":"code","d3fd7761":"code","0e92a966":"code","c97c0a02":"code","80c17782":"code","82787a2e":"code","49df3df8":"code","9843b678":"code","72379fb1":"code","05420eb1":"code","96654c00":"code","f5c8acf9":"code","99f152fa":"code","f00f04d5":"code","3304479c":"code","2a736147":"code","ff4a50f9":"code","424e94f4":"code","4294c3b4":"code","8122c6a6":"code","7f841576":"code","f25c272b":"code","02e3d070":"code","6b958f88":"code","8497512c":"code","d2fbddf8":"code","3614ef88":"code","8b3c0548":"code","c125a991":"code","4bf9119e":"code","d0281b01":"code","4e63fa24":"code","44cbb04f":"code","65916c61":"code","edd7483d":"code","6acb8c05":"code","8b285d05":"code","014ba3e7":"code","ac64748c":"code","cacc9744":"code","0c015d6b":"code","28e95d36":"code","a4709f36":"code","0f7aba85":"code","1911d767":"code","a912b12c":"code","13557096":"code","d125ab94":"code","59fe9899":"code","e72a7315":"code","518c2028":"code","5fadb7c7":"code","a1ddbdff":"code","7672db38":"code","ff3b52fc":"code","d37f9aee":"code","826d3362":"code","af2a2d2b":"code","16c1adcc":"code","53c85635":"markdown","34121e13":"markdown","3c0e5ee5":"markdown","a6b882a0":"markdown","655c1a06":"markdown","84e19208":"markdown","ad57d70e":"markdown","e07ec874":"markdown","05a4b376":"markdown","beb6745b":"markdown","2f6b0e91":"markdown","9a8ad476":"markdown","e510ca9c":"markdown","a19b8864":"markdown","266e2a24":"markdown","cbc84a4d":"markdown","fe4a1805":"markdown","811f0bf1":"markdown","f2af7e5a":"markdown","be913b2e":"markdown","a99f063f":"markdown","9af0aadc":"markdown","c69974a0":"markdown","78410fe2":"markdown","cc7ba1a6":"markdown","ec9d402f":"markdown","39fef95f":"markdown","809e90f6":"markdown","8020df66":"markdown","30c047c0":"markdown","72b45b15":"markdown","a3768afa":"markdown","8ae144fa":"markdown","7f733da1":"markdown","ce80b162":"markdown","3e00f396":"markdown","1804b5de":"markdown","d28d4b2c":"markdown","7d591933":"markdown","bc08a81f":"markdown","095c492e":"markdown","a75dafe8":"markdown","49e548a4":"markdown","38942fbc":"markdown","be3f36a2":"markdown","4f6267bd":"markdown","53e8027b":"markdown","d1adee5e":"markdown","584af075":"markdown","d572ffd9":"markdown","2e41f155":"markdown","a88ee4d7":"markdown","2cbe26e4":"markdown","ea62c084":"markdown","a87551e4":"markdown","d45412e3":"markdown"},"source":{"610e16df":"!pip install seaborn\n!pip install chart_studio","1ff5beef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\nimport math  \n\n\n# Plotly Packages\nfrom plotly import tools\n# import chart_studio.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5bb1af6":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\ndf.head()","23dcaaeb":"df.info()","5e29e48f":"df.describe()","3f652da2":"# VIEW CORRELATION BETWEEN EACH FEATURE TO THE TARGET VARIABLE (CHARGES)\n\ndf.corr()['charges'].sort_values().to_frame()","89b22233":"# CREATE HEATMAP TO VIEW CORRELATIONS\n\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap='YlGnBu', square=True, ax=ax)","bb92f108":"df['age'] = df['age'].astype('int') #Convert data type of 'age' to int\ndf['children'] = df['children'].astype('int') #Convert data type of 'children' to int\n\n#Create new feature 'age_cat' to categorize values from 'age' colummn\n\ndf['age_cat'] = np.nan \n\nfor col in [df]:\n    col.loc[(col['age'] >= 18) & (col['age'] <= 35), 'age_cat'] = 'young adult'\n    col.loc[(col['age'] > 35) & (col['age'] <= 55), 'age_cat'] = 'middle age'\n    col.loc[col['age'] > 55, 'age_cat'] = 'senior adult'\n\n    \n#Create new feature 'weight_status' to categorize values from 'bmi' colummn\n\ndf[\"weight_status\"] = np.nan\n\nfor col in [df]:\n    col.loc[col[\"bmi\"] < 18.5, \"weight_status\"] = \"underweight\"\n    col.loc[(col[\"bmi\"] >= 18.5) & (col[\"bmi\"] < 24.986), \"weight_status\"] = \"normal weight\"\n    col.loc[(col[\"bmi\"] >= 25) & (col[\"bmi\"] < 29.926), \"weight_status\"] = \"overweight\"\n    col.loc[col[\"bmi\"] >= 30, \"weight_status\"] = \"obese\"\n    \ndf.head()","c2ef4db9":"# Determine the distribution of charges\n\ncharge_dist = df[\"charges\"]\nlogcharge = np.log(df[\"charges\"])\n\ntrace0 = go.Histogram(x=charge_dist,\n                      histnorm='probability',\n                      name=\"Charges Distribution\",\n                      marker = dict(color = '#02919e',)\n                     )\n\ntrace1 = go.Histogram(x=logcharge,\n                      histnorm='probability',\n                      name=\"Charges Distribution using Log\",\n                      marker = dict(color = '#9e2602')\n                     )\n\nfig = make_subplots(rows=2, cols=1,\n                    subplot_titles=('Charge Distribution','Log Charge Distribution'),\n                    print_grid=False)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 2, 1)\n\nfig['layout'].update(showlegend=True, title='Charge Distribution', bargap=0.05)\n\niplot(fig, filename='custom-sized-subplot-with-subplot-titles')","b5d4769c":"df['sex'].shape","36798378":"fig = px.histogram(df, x=\"sex\")\nfig.show()","3ab31c1d":"fig = px.histogram(df, x=\"smoker\", title='SMOKER DISTRIBUTION')\nfig.show()","1e61362e":"print('Percentage of smokers:\\n ', df.smoker.value_counts() \/ len(df))","d5752b3a":"fig = ff.create_distplot([df['age']], ['age'], bin_size=1, colors=['blue'])\nfig.update_layout(title_text=\"Distribution of Age\", title_x=0.5)\nfig.show()","d06a5a1f":"labels = df['age_cat'].unique()\nvalues = df['age_cat'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=labels, \n                             values=values, \n                             hoverinfo='label+percent', \n                             textinfo='value+percent', \n                             textfont=dict(size=14))])\nfig.update_layout(title_text=\"Distribution of Age Categories\", title_x=0.5)\nfig.show()","def3786b":"#DISTRIBUTION OF BODY MASS INDEX\n\nfig = ff.create_distplot([df['bmi']], ['bmi'], bin_size=1, colors=['#c97318'])\nfig.update_layout(title_text=\"Distribution of BMI\", title_x=0.5)\nfig.show()","0a873786":"labels = df['weight_status'].unique()\nvalues = df['weight_status'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=labels, \n                             values=values, \n                             hoverinfo='label+percent', \n                             textinfo='value+percent', \n                             textfont=dict(size=14))])\n\nfig.update_layout(title_text=\"Distribution of Weight Status\", title_x=0.5)\nfig.update_traces(marker=dict(line=dict(color='#000000', width=1)))\n\nfig.show()","8eea4751":"fig = px.histogram(df, x=\"region\")\nfig.show()","916da05f":"labels = df['children'].sort_values().unique()\nvalues = df['children'].value_counts()\n\nfig = go.Figure(data=[go.Pie(labels=labels, \n                             values=values, \n                             hoverinfo='label+percent', \n                             textinfo='value+percent', \n                             textfont=dict(size=14),\n                             pull=[0.00, 0.00, 0.00, 0.00, 0.2, 0.3, 0.1])])\n\nfig.update_layout(title_text=\"Distribution of Children\", title_x=0.5)\nfig.show()","f08679f7":"s_f = df[(df['smoker'] == 'yes') & (df['sex'] == 'female')]\ns_m = df[(df['smoker'] == 'yes') & (df['sex'] == 'male')]\n\nns_f = df[(df['smoker'] == 'no') & (df['sex'] == 'female')]\nns_m = df[(df['smoker'] == 'no') & (df['sex'] == 'male')]\n\nfig = go.Figure(data=[go.Bar(name='Female', x=df['smoker'].unique(), y=[len(s_f), len(ns_f)]),\n                      go.Bar(name='Male', x=df['smoker'].unique(), y=[len(s_m), len(ns_m)]),\n                     ]\n               )\n\n# Change the bar mode\nfig.update_layout(barmode='group', title_text = \"Smoker Status by Sex\")\nfig.show()","0c2209da":"labels = df['smoker'].sort_values().unique()\nvalues_f = df['smoker'].loc[df['sex'] == 'female'].value_counts()\nvalues_m = df['smoker'].loc[df['sex'] == 'male'].value_counts()\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, values=values_f, name='Female Smokers'), 1,1)\nfig.add_trace(go.Pie(labels=labels, values=values_m, name='Male Smokers'), 1,2)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\", textinfo='value+percent')\n\nfig.update_layout(title_text=\"Smokers by Sex\")\nfig.show()","5de387e3":"ages = df['age'].loc[df['smoker'] == 'yes']\n\nfig = ff.create_distplot([ages], ['age'], bin_size=1, colors=['#c97318'])\nfig.update_layout(title_text=\"Distribution of smoker ages\", title_x=0.5)\nfig.show()","3539f7fb":"smoker_age = df.groupby(['age_cat','smoker'])['smoker'].count().to_frame()\nsmoker_age.rename(columns={smoker_age.columns[0]: 'count'}, inplace=True)\nsmoker_age = smoker_age.reset_index()\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='age_cat', y='count', hue='smoker', palette='mako', data=smoker_age)","d3fd7761":"labels = df['smoker'].sort_values().unique()\nvalues_ya = df['smoker'].loc[df['age_cat'] == 'young adult'].value_counts()\nvalues_ma = df['smoker'].loc[df['age_cat'] == 'middle age'].value_counts()\nvalues_sa = df['smoker'].loc[df['age_cat'] == 'senior adult'].value_counts()\n\nfig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}, {'type':'domain'}]],\n                   subplot_titles=['Young Adult', 'Middle Age', 'Senior Adult'])\n\nfig.add_trace(go.Pie(labels=labels, values=values_ya, name='Young Adult Smokers'), 1,1)\nfig.add_trace(go.Pie(labels=labels, values=values_ma, name='Middle Age Smokers'), 1,2)\nfig.add_trace(go.Pie(labels=labels, values=values_sa, name='Senior Adult Smokers'), 1,3)\n\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\", textinfo='value+percent')\n\nfig.update_layout(title_text=\"Smoker Percentages by Age Categories\")\nfig.show()","0e92a966":"smoker_weight = df.groupby(['weight_status','smoker'])['smoker'].count().to_frame()\nsmoker_weight.rename(columns={smoker_weight.columns[0]: 'count'}, inplace=True)\nsmoker_weight = smoker_weight.reset_index()\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='weight_status', y='count', hue='smoker', palette='mako', data=smoker_weight)","c97c0a02":"labels = df['smoker'].sort_values().unique()\nvalues_uw = df['smoker'].loc[df['weight_status'] == 'underweight'].value_counts()\nvalues_nw = df['smoker'].loc[df['weight_status'] == 'normal weight'].value_counts()\nvalues_ow = df['smoker'].loc[df['weight_status'] == 'overweight'].value_counts()\nvalues_ob = df['smoker'].loc[df['weight_status'] == 'obese'].value_counts()\n\nfig = make_subplots(rows=2, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}], [{'type':'domain'}, {'type':'domain'}]],\n                   subplot_titles=['Underweight', 'Normal Weight', 'Overweight', 'Obese'])\n\nfig.add_trace(go.Pie(labels=labels, values=values_uw, name='Underweight Smokers'), 1,1)\nfig.add_trace(go.Pie(labels=labels, values=values_nw, name='Normal Weight Smokers'), 1,2)\nfig.add_trace(go.Pie(labels=labels, values=values_ow, name='Overweight Smokers'), 2,1)\nfig.add_trace(go.Pie(labels=labels, values=values_ob, name='Obese Smokers'), 2,2)\n\nfig.update_traces(hoverinfo=\"label+percent+name\", textinfo='value+percent')\n\nfig.update_layout(title_text=\"Smoker Percentages by Weight Status\")\nfig.show()","80c17782":"regions = df.groupby(['region', 'smoker'])['region'].count().to_frame()\nregions.rename(columns={regions.columns[0]: 'count'}, inplace=True)\nregions = regions.reset_index()\nregions = regions.sort_values(by='count')\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='region', y='count', hue='smoker', palette='magma', data=regions)\nplt.title('Smoker Status by Region', fontsize=22)\n","82787a2e":"smoker_children = df.groupby(['children','smoker'])['smoker'].count().to_frame()\nsmoker_children.rename(columns={smoker_children.columns[0]: 'count'}, inplace=True)\nsmoker_children = smoker_children.reset_index()\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='children', y='count', hue='smoker', palette='mako', data=smoker_children)","49df3df8":"# BODY MASS INDEX AND AGE\n\nfig = px.scatter(df, x='age', y='bmi', color='weight_status')\nfig.update_layout(title='BMI Distribution by Age')\nfig.show()","9843b678":"young_adults = df[\"bmi\"].loc[df[\"age_cat\"] == \"young adult\"].values\nsenior_adult = df[\"bmi\"].loc[df[\"age_cat\"] == \"middle age\"].values\nelders = df[\"bmi\"].loc[df[\"age_cat\"] == \"senior adult\"].values\n\ntrace0 = go.Box(y=young_adults,\n                name = 'Young Adults',\n                boxmean= True,\n                marker = dict(color = 'rgb(214, 12, 140)')\n               )\n\ntrace1 = go.Box(y=senior_adult,\n                name = 'Middle Age',\n                boxmean= True,\n                marker = dict(color = 'rgb(0, 128, 128)')\n               )\n\ntrace2 = go.Box(y=elders,\n                name = 'Senior Adults',\n                boxmean= True,\n                marker = dict(color = 'rgb(247, 186, 166)')\n               )\n\n\ndata = [trace0, trace1, trace2]\n\nlayout = go.Layout(title=\"Body Mass Index by Age Category\", \n                   xaxis=dict(title=\"Age Category\", titlefont=dict(size=16)),\n                   yaxis=dict(title=\"Body Mass Index\", titlefont=dict(size=16)))\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","72379fb1":"print(df['age_cat'].value_counts())\n\nweights = df.groupby(['weight_status','age_cat'])['age_cat'].count().to_frame()\nweights.rename(columns={weights.columns[0]: 'count'}, inplace=True)\nweights = weights.reset_index()\nweights = weights.sort_values(by='count')\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='weight_status', y='count', hue='age_cat', palette='mako', data=weights)\n","05420eb1":"# Obesity per region\nregion_weight = pd.crosstab(df['weight_status'], df['region']).apply(lambda x: x\/x.sum() * 100)\nregion_weight = round(region_weight, 2)\nregion_weight","96654c00":"ne_under = df[(df['weight_status'] == 'underweight') & (df['region'] == 'northeast')]\nne_normal = df[(df['weight_status'] == 'normal weight') & (df['region'] == 'northeast')]\nne_over = df[(df['weight_status'] == 'overweight') & (df['region'] == 'northeast')]\nne_obese = df[(df['weight_status'] == 'obese') & (df['region'] == 'northeast')]\n\nnw_under = df[(df['weight_status'] == 'underweight') & (df['region'] == 'northwest')]\nnw_normal = df[(df['weight_status'] == 'normal weight') & (df['region'] == 'northwest')]\nnw_over = df[(df['weight_status'] == 'overweight') & (df['region'] == 'northwest')]\nnw_obese = df[(df['weight_status'] == 'obese') & (df['region'] == 'northwest')]\n\nse_under = df[(df['weight_status'] == 'underweight') & (df['region'] == 'southeast')]\nse_normal = df[(df['weight_status'] == 'normal weight') & (df['region'] == 'southeast')]\nse_over = df[(df['weight_status'] == 'overweight') & (df['region'] == 'southeast')]\nse_obese = df[(df['weight_status'] == 'obese') & (df['region'] == 'southeast')]\n\nsw_under = df[(df['weight_status'] == 'underweight') & (df['region'] == 'southwest')]\nsw_normal = df[(df['weight_status'] == 'normal weight') & (df['region'] == 'southwest')]\nsw_over = df[(df['weight_status'] == 'overweight') & (df['region'] == 'southwest')]\nsw_obese = df[(df['weight_status'] == 'obese') & (df['region'] == 'southwest')]\n\nfig = go.Figure(data=[go.Bar(name='Underweight', x=df['region'].unique(), y=[len(ne_under), len(nw_under), len(se_under), len(sw_under)]),\n                      go.Bar(name='Normal Weight', x=df['region'].unique(), y=[len(ne_normal), len(nw_normal), len(se_normal), len(sw_normal)]),\n                      go.Bar(name='Overweight', x=df['region'].unique(), y=[len(ne_over), len(nw_over), len(se_over), len(sw_over)]),\n                      go.Bar(name='Obese', x=df['region'].unique(), y=[len(ne_obese), len(nw_obese), len(se_obese), len(sw_obese)])\n                     ]\n               )\n\n# Change the bar mode\nfig.update_layout(barmode='group', title_text = \"Weight Status by Region\")\nfig.show()","f5c8acf9":"bmi_smoker = df[\"bmi\"].loc[(df[\"smoker\"] == \"yes\")].values\nbmi_nonsmoker = df[\"bmi\"].loc[(df[\"smoker\"] == \"no\")].values\n\n# Smokers\nya_smoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"young adult\") & (df[\"smoker\"] == \"yes\")].values\nsa_smoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"middle age\") & (df[\"smoker\"] == \"yes\")].values\ne_smoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"senior adult\") & (df[\"smoker\"] == \"yes\")].values\n\n# Non-Smokers\nya_nonsmoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"young adult\") & (df[\"smoker\"] == \"no\")].values\nsa_nonsmoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"middle age\") & (df[\"smoker\"] == \"no\")].values\ne_nonsmoker = df[\"bmi\"].loc[(df[\"age_cat\"] == \"senior adult\") & (df[\"smoker\"] == \"no\")].values","99f152fa":"x_data = ['Smoker', 'Non-Smoker']\n\ny0 = bmi_smoker\ny1 = bmi_nonsmoker\n\ny_data = [y0,y1]\n\ncolors = ['rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)', \n          'rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)', \n          'rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(y=yd, name=xd, boxpoints='all', jitter=0.5, whiskerwidth=0.2,\n                             fillcolor=cls, marker=dict(size=2,), line=dict(width=1))\n                     )\n\nlayout = go.Layout(title='Body Mass Index of Smokers Status by Age Category',\n                   xaxis=dict(title=\"Smoker Status\", titlefont=dict(size=16)),\n                   yaxis=dict(title=\"Body Mass Index\", autorange=True, showgrid=True, \n                              zeroline=True, dtick=5, gridcolor='rgb(255, 255, 255)',\n                              gridwidth=1, zerolinecolor='rgb(255, 255, 255)', zerolinewidth=2,\n                              titlefont=dict(size=16)),\n                   margin=dict(l=40,r=30,b=80,t=100,),\n                   paper_bgcolor='rgb(255, 255, 255)',\n                   plot_bgcolor='rgb(255, 245, 201)',\n                   showlegend=False\n                  )\n\nfig = go.Figure(data=traces, layout=layout)\niplot(fig)","f00f04d5":"region_age = df.groupby(['region','age_cat'])['age_cat'].count().to_frame()\nregion_age.rename(columns={region_age.columns[0]: 'count'}, inplace=True)\nregion_age = region_age.reset_index()\nregion_age = region_age.sort_values(by='count')\n\nplt.figure(figsize=(14,8))\nsns.barplot(x='region', y='count', hue='age_cat', palette='mako', data=region_age)","3304479c":"x_data = ['Young A. Smoker', 'Young A. Non-Smoker',\n          'Senior A. Smoker', 'Senior A. Non-Smoker',\n          'Elder Smoker', 'Elder Non-Smoker',]\n\ny0 = ya_smoker\ny1 = ya_nonsmoker\ny2 = sa_smoker\ny3 = sa_nonsmoker\ny4 = e_smoker\ny5 = e_nonsmoker\n\ny_data = [y0,y1,y2,y3,y4,y5]\n\ncolors = ['rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)', \n          'rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)', \n          'rgba(251, 43, 43, 0.5)', 'rgba(125, 251, 137, 0.5)']\n\ntraces = []\n\nfor xd, yd, cls in zip(x_data, y_data, colors):\n        traces.append(go.Box(y=yd,\n                             name=xd,\n                             boxpoints='all',\n                             jitter=0.5,\n                             whiskerwidth=0.2,\n                             fillcolor=cls,\n                             marker=dict(size=2,),\n                             line=dict(width=1),\n                            )\n                     )\n\nlayout = go.Layout(title='Body Mass Index of Smokers Status by Age Category',\n                   xaxis=dict(title=\"Status\", titlefont=dict(size=16)),\n                   yaxis=dict(title=\"Body Mass Index\",\n                              autorange=True, \n                              showgrid=True, \n                              zeroline=True,\n                              dtick=5,\n                              gridcolor='rgb(255, 255, 255)',\n                              gridwidth=1,\n                              zerolinecolor='rgb(255, 255, 255)',\n                              zerolinewidth=2,\n                              titlefont=dict(size=16)\n                             ),\n                   margin=dict(l=40,r=30,b=80,t=100,),\n                   paper_bgcolor='rgb(255, 255, 255)',\n                   plot_bgcolor='rgb(255, 245, 201)',\n                   showlegend=False\n                  )\n\nfig = go.Figure(data=traces, layout=layout)\niplot(fig)","2a736147":"fig = px.box(df, x=\"smoker\", y=\"charges\", color='smoker', points=\"all\")\nfig.update_layout(title='CHARGES BY SMOKER STATUS')\nfig.show()","ff4a50f9":"fig = px.box(df, x=\"sex\", y='charges', color='sex', points=\"all\")\nfig.update_layout(title='CHARGES BY SEX')\nfig.show()","424e94f4":"fig = px.violin(df, y=\"charges\", x=\"smoker\", color=\"sex\", box=True, points=\"all\",\n          hover_data=df.columns)\nfig.show()","4294c3b4":"fig = px.scatter(df, x='age', y='charges', color='smoker')\nfig.update_layout(title='Charges Distribution by Age')\nfig.show()","8122c6a6":"# Means\navg_charge_ya = df[\"charges\"].loc[df[\"age_cat\"] == \"young adult\"].mean()\navg_charge_sa = df[\"charges\"].loc[df[\"age_cat\"] == \"middle age\"].mean()\navg_charge_e = df[\"charges\"].loc[df[\"age_cat\"] == \"senior adult\"].mean()\n\n# Median\nmed_charge_ya = df[\"charges\"].loc[df[\"age_cat\"] == \"young adult\"].median()\nmed_charge_sa = df[\"charges\"].loc[df[\"age_cat\"] == \"middle age\"].median()\nmed_charge_e = df[\"charges\"].loc[df[\"age_cat\"] == \"senior adult\"].median()\n\n# Determine the distribution of age according to charge\n\naverage_plot = go.Bar(x=['young adult', 'middle age', 'senior adult'],\n                      y=[avg_charge_ya, avg_charge_sa, avg_charge_e],\n                      name='Mean',\n                      marker=dict(color=\"#18b5c9\")\n                     )\n\nmed_plot = go.Bar(x=['young adult', 'middle age', 'senior adult'],\n                  y=[med_charge_ya, med_charge_sa, med_charge_e],\n                  name='Median',\n                  marker=dict(color=\"#c93318\")\n                 )\n\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]],\n                    subplot_titles=('Average Charge by Age','Median Charge by Age'),\n                    shared_yaxes=True, print_grid=False)\n\nfig.append_trace(average_plot, 1, 1)\nfig.append_trace(med_plot, 1, 2)\n\nfig.update_layout(showlegend=True, \n                  title='MEAN AND MEDIAN CHARGES BY AGE CATEOGRIES', \n                  xaxis=dict(title=\"Age Category\"), \n                  yaxis=dict(title=\"Patient Charges\"), \n                  bargap=0.15)\n\niplot(fig, filename='custom-sized-subplot-with-subplot-titles')","7f841576":"fig = px.box(df, x=\"age_cat\", y=\"charges\", color='age_cat', points=\"all\")\nfig.show()","f25c272b":"fig = px.scatter(df, x='bmi', y='charges', color='smoker')\nfig.update_layout(title='Charges by BMI')\nfig.show()","02e3d070":"# Determine the distribution of charges according to weight status\n\n# Means\navg_charge_uw = df[\"charges\"].loc[df[\"weight_status\"] == \"underweight\"].mean()\navg_charge_nw = df[\"charges\"].loc[df[\"weight_status\"] == \"normal weight\"].mean()\navg_charge_ow = df[\"charges\"].loc[df[\"weight_status\"] == \"overweight\"].mean()\navg_charge_ob = df[\"charges\"].loc[df[\"weight_status\"] == \"obese\"].mean()\n\n# Median\nmed_charge_uw = df[\"charges\"].loc[df[\"weight_status\"] == \"underweight\"].median()\nmed_charge_nw = df[\"charges\"].loc[df[\"weight_status\"] == \"normal weight\"].median()\nmed_charge_ow = df[\"charges\"].loc[df[\"weight_status\"] == \"overweight\"].median()\nmed_charge_ob = df[\"charges\"].loc[df[\"weight_status\"] == \"obese\"].median()\n\n\n\naverage_plot = go.Bar(x=['Underweight', 'Normal Weight', 'Overweight', 'Obese'],\n                      y=[avg_charge_uw, avg_charge_nw, avg_charge_ow, avg_charge_ob],\n                      name='Mean',\n                      marker=dict(color=\"#18b5c9\")\n                     )\n\nmed_plot = go.Bar(x=['Underweight', 'Normal Weight', 'Overweight', 'Obese'],\n                  y=[med_charge_uw, med_charge_nw, med_charge_ow, med_charge_ob],\n                  name='Median',\n                  marker=dict(color=\"#c93318\")\n                 )\n\nfig = make_subplots(rows=1, cols=2, specs=[[{}, {}]],\n                    subplot_titles=('Average Charge by Weight Status','Median Charge by Weight Status'),\n                    shared_yaxes=True, print_grid=False)\n\nfig.append_trace(average_plot, 1, 1)\nfig.append_trace(med_plot, 1, 2)\n\nfig.update_layout(showlegend=True, \n                  title='Weight Status Charges', \n                  xaxis=dict(title=\"Weight Status\"), \n                  yaxis=dict(title=\"Patient Charges\"), \n                  bargap=0.15)\n\niplot(fig, filename='custom-sized-subplot-with-subplot-titles')","6b958f88":"fig = px.box(df, x=\"weight_status\", y=\"charges\", color='weight_status', points=\"all\")\nfig.update_layout(title='ALL CHARGES BY WEIGHT STATUS')\nfig.show()","8497512c":"fig = go.Figure()\n\nfig.add_trace(go.Violin(x=df['age_cat'][ df['smoker'] == 'yes' ],\n                        y=df['charges'][ df['smoker'] == 'yes' ],\n                        legendgroup='Yes', scalegroup='Yes', name='Yes',\n                        side='negative',\n                        line_color='blue')\n             )\n\nfig.add_trace(go.Violin(x=df['age_cat'][ df['smoker'] == 'no' ],\n                        y=df['charges'][ df['smoker'] == 'no' ],\n                        legendgroup='No', scalegroup='No', name='No',\n                        side='positive',\n                        line_color='orange')\n             )\n\nfig.update_traces(box_visible=True, meanline_visible=True)\nfig.update_layout(title='CHARGES BY AGE CATEGORY & SMOKER STATUS', violinmode='group')\nfig.show()","d2fbddf8":"plt.figure(figsize=(14,8))\nsns.barplot(x='age_cat', y='charges', hue='smoker', palette='mako', data=df)","3614ef88":"# Create subpplots\nf, (ax1, ax2) = plt.subplots(ncols=2, figsize=(18,8))\n\nsns.stripplot(x=\"age_cat\", y=\"charges\", hue=\"weight_status\", data=df, ax=ax1, linewidth=1, palette=\"Set2\")\nax1.set_title(\"Relationship of Weight Condition, Age and Charges\")\nax1.legend_.remove()\n\nsns.stripplot(x=\"smoker\", y=\"charges\", hue=\"weight_status\", data=df, ax=ax2, linewidth=1, palette=\"Set2\")\nax2.set_title(\"Relationship between Smokers and Charges\")\n\nplt.show()","8b3c0548":"fig = ff.create_facet_grid(df,\n                           x='age',\n                           y='charges',\n                           color_name='weight_status',\n                           show_boxes=False,\n                           marker={'size': 10, 'opacity': 1.0},\n                           colormap={'underweight': '#cff682', 'normal weight': '#a7f682',\n                                     'overweight': '#fbe8ee', 'obese': '#fd2f1c'}\n                          )\n\nfig['layout'].update(title=\"Weight Status vs Charges\", width=800, height=600, plot_bgcolor='#fbfbfb', \n                     paper_bgcolor='#ffffff')\n\n\niplot(fig, filename='facet - custom colormap')","c125a991":"pointspossmoker = [-0.9,-1.1,-0.6,-0.3]\npointposnonsmoker = [0.45,0.55,1,0.4]\nshowLegend = [True,False,False,False]\ndata = []\n\nfor i in range(0, len(pd.unique(df['weight_status']))):\n    male = {\"type\": 'violin',\n            \"x\": df['weight_status'][ (df['smoker'] == 'yes') & (df['weight_status'] == pd.unique(df['weight_status'])[i]) ],\n            \"y\": df['charges'][ (df['smoker'] == 'yes') & (df['weight_status'] == pd.unique(df['weight_status'])[i]) ],\n            \"legendgroup\": 'Smoker',\n            \"scalegroup\": 'Smoker',\n            \"name\": 'Smoker',\n            \"side\": 'negative',\n            \"box\": {\"visible\": True},\n            \"points\": 'all',\n            \"pointpos\": pointspossmoker[i],\n            \"jitter\": 0,\n            \"scalemode\": 'count',\n            \"meanline\": {\"visible\": True},\n            \"line\": {\"color\": '#DF0101'},\n            \"marker\": {\"line\": {\"width\": 2,\"color\": '#F78181'}},\n            \"span\": [0],\n            \"showlegend\": showLegend[i]\n           }\n    \n    data.append(male)\n    \n    female = {\"type\": 'violin',\n              \"x\": df['weight_status'] [ (df['smoker'] == 'no') & (df['weight_status'] == pd.unique(df['weight_status'])[i]) ],\n              \"y\": df['charges'] [ (df['smoker'] == 'no') & (df['weight_status'] == pd.unique(df['weight_status'])[i]) ],\n              \"legendgroup\": 'Non-Smoker',\n              \"scalegroup\": 'Non-Smoker',\n              \"name\": 'Non-Smoker',\n              \"side\": 'positive',\n              \"box\": {\"visible\": True},\n              \"points\": 'all',\n              \"pointpos\": pointposnonsmoker[i],\n              \"jitter\": 0,\n              \"scalemode\": 'count',\n              \"meanline\": {\"visible\": True},\n              \"line\": {\"color\": '#00FF40'},\n              \"marker\": {\"line\": {\"width\": 2,\"color\": '#81F781'}},\n              \"span\": [0],\n              \"showlegend\": showLegend[i]\n             }\n    \n    data.append(female)\n        \n\nfig = {\"data\": data,\n       \"layout\" : {\"title\": \"Charges Distribution of Obese Patients<br><i>Group by Smoking Status\",\n                   \"yaxis\": {\"zeroline\": False,\n                             \"title\": \"Patient Charges\",\n                             \"titlefont\": {\"size\": 16}\n                            },\n                   \"violingap\": 0,\n                   \"violingroupgap\": 0,\n                   \"violinmode\": \"overlay\"\n                  }\n      }\n\niplot(fig, filename='violin\/advanced', validate = False)","4bf9119e":"chargedist_sm = df[\"charges\"].loc[(df[\"weight_status\"] == \"obese\") & (df[\"smoker\"] == \"yes\")].values\nchargedist_nsm = df[\"charges\"].loc[(df[\"weight_status\"] == \"obese\") & (df[\"smoker\"] == \"no\")].values\n\ntrace0 = go.Box(y=chargedist_sm, name = 'Obese Smokers', marker = dict(color = '#DF0101'))\ntrace1 = go.Box(y=chargedist_nsm, name = 'Obese Non-Smokers', marker = dict(color = '#00FF40'))\n\ndata = [trace0, trace1]\n\nlayout = dict(title=\"Deeper Look into Obese Condition by Smoking status\",\n              xaxis=dict(title=\"Status\", titlefont=dict(size=16)),\n              yaxis=dict(title=\"Patient Charges\",titlefont=dict(size=16))\n             )\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d0281b01":"df_obese = df[df['weight_status'] == 'obese']\ndf_obese\n\nfig = px.scatter(df_obese, x='age', y='charges', color='smoker')\n\nfig.update_layout(title='Charges by BMI with smoker distinction')\nfig.show()","4e63fa24":"region_charges = df.groupby(['region', 'charges'], as_index=False).mean().groupby('region')['charges'].mean().to_frame()\nregion_charges.rename(columns={'charges':'mean'}, inplace=True)\nregion_charges.reset_index()\n\nregion_median = df.groupby(['region', 'charges'], as_index=False).median().groupby('region')['charges'].median().to_frame()\n\nregion_charges['median'] = region_median['charges']\nregion_charges = region_charges.reset_index()\nregion_charges = region_charges.melt(id_vars='region')\n\nfig, ax1 = plt.subplots(figsize=(14, 7))\n\nsns.barplot(x='region', y='value', hue='variable', data=region_charges, ax=ax1)\nplt.title('Mean & Median Charges by Region')\nplt.ylabel('Charges')\nsns.despine(fig)\n","44cbb04f":"weight_region = df.groupby(['region', 'weight_status'], as_index=False)['charges'].mean()\nweight_region.rename(columns={'charges':'mean'}, inplace=True)\nweight_region\n\nsns.set(font_scale=1)  \ng = sns.FacetGrid(weight_region, col=\"region\", col_wrap=2, height=6)\ng.map(sns.barplot, \"weight_status\", \"mean\", alpha=.7)\ng.fig.subplots_adjust(wspace=.1, hspace=.15)\ng.add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('AVERAGE PATIENT CHARGES BY WEIGHT STATUS, ORGANIZED BY REGION')\n","65916c61":"from sklearn.preprocessing import LabelEncoder\n\n# sex, female = 0, male = 1\nle = LabelEncoder()\nle.fit(df.sex.drop_duplicates()) \ndf.sex = le.transform(df.sex)\n\n# smoker\/non-smoker - non-smoker=0, smoker=1\nle.fit(df.smoker.drop_duplicates()) \ndf.smoker = le.transform(df.smoker)\n\n#region - Northeast = 0, Northwest = 1, Southeast = 2, Southwest = 3\nle.fit(df.region.drop_duplicates()) \ndf.region = le.transform(df.region)\n\n","edd7483d":"f, ax = plt.subplots(figsize=(10, 8))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap='YlGnBu', square=True, ax=ax)","6acb8c05":"from sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.preprocessing import StandardScaler","8b285d05":"features = df[['age', 'sex', 'bmi', 'smoker', 'charges']]\ndf_clus = StandardScaler().fit_transform(features)\ndf_clus","014ba3e7":"fig = plt.figure(figsize=(12,8))\n\n# Instantiate the clustering model and visualizer\nmodel = KMeans()\nvisualizer = KElbowVisualizer(model, k=(2,6))\n\nvisualizer.fit(features)    # Fit the data to the visualizer\nvisualizer.poof()  ","ac64748c":"k_means = KMeans(init = \"k-means++\", n_clusters = 3, n_init = 12)\nk_means.fit(features)\nlabels = k_means.labels_\nprint('CLUSTER LABELS: ')\nprint(labels)","cacc9744":"print('CLUSTER CENTERS:')\nprint(k_means.cluster_centers_)","0c015d6b":"features['cluster'] = labels\nfeatures.head()","28e95d36":"features.groupby('cluster').mean()","a4709f36":"fig = plt.figure(figsize=(12,8))\n\nplt.scatter(features['age'], features['charges'], c=k_means.labels_, cmap=\"Set1_r\", s=25)\nplt.scatter(k_means.cluster_centers_[:,0], k_means.cluster_centers_[:,4], color='black', marker=\"x\", s=250)\nplt.title(\"Kmeans Clustering of Patients by Age and Charges\", fontsize=16)\nplt.xlabel('AGE', fontsize=18)\nplt.ylabel('CHARGES', fontsize=16)\nplt.show()","0f7aba85":"import scipy\nfrom scipy import ndimage \nfrom scipy.cluster import hierarchy \nfrom scipy.spatial import distance_matrix \nfrom sklearn import manifold, datasets \nfrom sklearn.cluster import AgglomerativeClustering \nimport pylab\nimport scipy.cluster.hierarchy\nfrom scipy.cluster.hierarchy import fcluster, dendrogram, linkage","1911d767":"#USE THE SAME FEATURES AS THE K-MEANS CLUSTERING - X\n\n# 5% of the data \ndf_sample = df.sample(frac=.05)\n\nfeatures_1 = df_sample[['age', 'sex', 'bmi', 'smoker', 'charges']]\nfeature_mtx = features_1.to_numpy()","a912b12c":"leng = features_1.shape[0]\nD = np.zeros([leng,leng])\n\nfor i in range(leng):\n    for j in range(leng):\n        D[i,j] = scipy.spatial.distance.euclidean(feature_mtx[i], feature_mtx[j])\n        \nfeature_dist = pd.DataFrame(data=D)\nfeature_dist","13557096":"agglom = AgglomerativeClustering(n_clusters = 5, linkage = 'complete')\nagglom.fit(features_1)\n\nlinked = linkage(agglom.children_, 'single')\n\nagglom.labels_\nagglom_labels = pd.DataFrame(data=agglom.labels_)","d125ab94":"plt.style.use(\"Solarize_Light2\")\n\nfig = pylab.figure(figsize=(18,12))\n\n\nplt.scatter(features_1.values[:,2], features_1.values[:,4], c=agglom.labels_, cmap=\"Set1_r\", s=50)\nplt.title(\"Agglomerative Clustering\", fontsize=16)\n\n\nplt.show()","59fe9899":"plt.style.use(\"Solarize_Light2\")\n\nfig = pylab.figure(figsize=(18,12))\n\ndendrogram(linked,  orientation='top', labels=agglom.labels_, distance_sort='descending',\n           show_leaf_counts=False)\n\nplt.title(\"Dendogram of Agglomerative Clustering\")\nplt.show()","e72a7315":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor","518c2028":"X = df.drop(['charges', 'age_cat', 'weight_status', 'region', 'children'], axis = 1)\ny = df.charges\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0)\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\nyhat_train = lr.predict(X_train)\nyhat_lr = lr.predict(X_test)\n\nmse_lr = mean_squared_error(y_test, yhat_lr)\nrmse_lr = math.sqrt(mean_squared_error(y_test, yhat_lr))\nmae_lr = mean_absolute_error(y_test, yhat_lr)\nr2_lr = r2_score(y_test, yhat_lr)\nrss_lr = np.mean((yhat_lr - y_test) * 2)\nevs_lr = lr.score(X_test, y_test)\n\n\nprint('Intercept: ', lr.intercept_)\nprint('Coeficient ', lr.coef_)","5fadb7c7":"from sklearn.linear_model import Ridge\n\nridge = Ridge(alpha=0.5)\nridge.fit(X_train, y_train)\nyhat_ridge = ridge.predict(X_test)\n\nmse_ridge = mean_squared_error(y_test, yhat_ridge)\nrmse_ridge = math.sqrt(mean_squared_error(y_test, yhat_ridge))\nmae_ridge = mean_absolute_error(y_test, yhat_ridge)\nr2_ridge = r2_score(y_test, yhat_ridge)\nrss_ridge = np.mean((yhat_ridge - y_test) * 2)\nevs_ridge = ridge.score(X_test, y_test)\n\n\nprint('Intercept: ', ridge.intercept_)\nprint('Coeficient ', ridge.coef_)","a1ddbdff":"from sklearn.linear_model import Lasso\n\nlasso = Lasso(alpha=0.2, fit_intercept=True, normalize=False, precompute=False, max_iter=1000,\n              tol=0.0001, warm_start=False, positive=False, random_state=None, selection='cyclic')\nlasso.fit(X_train, y_train)\nyhat_lasso = lasso.predict(X_test)\n\nmse_lasso = mean_squared_error(y_test, yhat_lasso)\nrmse_lasso = math.sqrt(mean_squared_error(y_test, yhat_lasso))\nmae_lasso = mean_absolute_error(y_test, yhat_lasso)\nr2_lasso = r2_score(y_test, yhat_lasso)\nrss_lasso = np.mean((yhat_lasso - y_test) * 2)\nevs_lasso = lasso.score(X_test, y_test)\n\nprint('Intercept: ', lasso.intercept_)\nprint('Coeficient ', lasso.coef_)","7672db38":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\nrf = RandomForestRegressor(n_estimators = 100, criterion = 'mse', random_state = 1, n_jobs = -1)\nrf.fit(X_train, y_train)\nyhat_rf = rf.predict(X_test)\n\nmse_rf = mean_squared_error(y_test, yhat_rf)\nrmse_rf = math.sqrt(mean_squared_error(y_test, yhat_rf))\nmae_rf = mean_absolute_error(y_test, yhat_rf)\nr2_rf = r2_score(y_test, yhat_rf)\nrss_rf = np.mean((yhat_rf - y_test) * 2)\nevs_rf = rf.score(X_test, y_test)","ff3b52fc":"from sklearn.preprocessing import PolynomialFeatures\n\n\npol = PolynomialFeatures(degree = 2)\nX_pol = pol.fit_transform(X)\npol_reg = LinearRegression()\npol_reg.fit(X_train, y_train)\n\nyhat_poly = pol_reg.predict(X_test)\n\nmse_poly = mean_squared_error(y_test, yhat_poly)\nrmse_poly = math.sqrt(mean_squared_error(y_test, yhat_poly))\nmae_poly = mean_absolute_error(y_test, yhat_poly)\nr2_poly = r2_score(y_test, yhat_poly)\nrss_poly = np.mean((yhat_poly - y_test) * 2)\nevs_poly = pol_reg.score(X_test, y_test)\n\nprint(pol_reg.intercept_)\nprint(pol_reg.coef_)\nprint(pol_reg.score(X_test, y_test))\nprint('')\n\n","d37f9aee":"#MEAN SQUARED ERROR\nprint('MEAN SQUARED ERROR')\nprint('Linear Regression | Mean Squared Error: %.2f ' % mse_lr)\nprint('Ridge Regression | Mean Squared Error: %.2f ' % mse_ridge)\nprint('Lasso Regression | Mean Squared Error: %.2f ' % mse_lasso)\nprint('Random Forest | Mean Squared Error: %.2f ' % mse_rf)\nprint('Polynomial Regression | Mean Squared Error: %.2f ' % mse_poly)\nprint('')\n\n#ROOT MEAN SQUARED ERROR\nprint('ROOT MEAN SQUARED ERROR')\nprint('Linear Regression | Root Mean Squared Error: %.2f ' % rmse_lr)\nprint('Ridge Regression | Root Mean Squared Error: %.2f ' % rmse_ridge)\nprint('Lasso Regression | Root Mean Squared Error: %.2f ' % rmse_lasso)\nprint('Random Forest | Root Mean Squared Error: %.2f ' % rmse_rf)\nprint('Polynomial Regression | Root Mean Squared Error: %.2f ' % rmse_poly)\nprint('')\n\n#MEAN ABSOLUTE ERROR\nprint('MEAN ABSOLUTE ERROR')\nprint('Linear Regression | Mean Absolute Error: %.2f ' % mae_lr)\nprint('Ridge Regression | Mean Absolute Error: %.2f ' % mae_ridge)\nprint('Lasso Regression | Mean Absolute Error: %.2f ' % mae_lasso)\nprint('Random Forest | Mean Absolute Error: %.2f ' % mae_rf)\nprint('Polynomial Regression | Mean Absolute Error: %.2f ' % mae_poly)\nprint('')\n\n#R2 SCORE\nprint('R2 SCORE')\nprint('Linear Regression | R2 Score: %.4f ' % r2_lr)\nprint('Ridge Regression | R2 Score: %.4f ' % r2_ridge)\nprint('Lasso Regression | R2 Score: %.4f ' % r2_lasso)\nprint('Random Forest | R2 Score: %.4f ' % r2_rf)\nprint('Polynomial Regression | R2 Score: %.4f ' % r2_poly)\nprint('')\n\n#RESIDUAL SUM OF SQUARES\nprint('RESIDUAL SUM OF SQUARES')\nprint('Linear Regression | Residual Sum of Squares %.2f ' % rss_lr)\nprint('Ridge Regression | Residual Sum of Squares %.2f ' % rss_ridge)\nprint('Lasso Regression | Residual Sum of Squares %.2f ' % rss_lasso)\nprint('Random Forest | Residual Sum of Squares %.2f ' % rss_rf)\nprint('Polynomial Regression | Residual Sum of Squares %.2f ' % rss_poly)\nprint('')\n\n#EXPLAINED VARIANCE SCORE\nprint('EXPLAINED VARIANCE SCORE')\nprint('Linear Regression | Explained Variance Score: %.4f ' % evs_lr)\nprint('Ridge Regression | Explained Variance Score: %.4f ' % evs_ridge)\nprint('Lasso Regression | Explained Variance Score: %.4f ' % evs_lasso)\nprint('Random Forest | Explained Variance Score: %.4f ' % evs_rf)\nprint('Polynomial Regression | Explained Variance Score: %.4f ' % evs_poly)\n","826d3362":"import pickle\n\npickle.dump(rf, open('predictor.pkl', 'wb'))","af2a2d2b":"model = pickle.load(open('predictor.pkl', 'rb'))","16c1adcc":"! pip3 freeze > requirements.txt","53c85635":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. LOAD LIBRARIES & PACKAGES<\/a>  \n* <a href='#2'>II. DATA OVERVIEW & INSIGHTS<\/a>  \n* <a href='#3'>III. DATA PREPROCESSING & FEATURE ENGINEERING<\/a>  \n* <a href='#4'>IV. EXPLORATORY DATA ANALYSIS<\/a>  \n    * <a href='#4a'>IVa. Bivariate & Multivariate Exploration<\/a> \n* <a href='#5'>V. FEATURE SELECTION<\/a>  \n* <a href='#6'>VI. CLUSTERING<\/a>  \n* <a href='#7'>VII. MODEL BUILDING<\/a>  \n    * <a href='#7a'>VIIa. Multiple Linear Regression<\/a>\n    * <a href='#7b'>VIIb. Ridge Regression<\/a>\n    * <a href='#7c'>VIIc. Lasso Regression<\/a>\n    * <a href='#7d'>VIId. Random Forest Regression<\/a>\n    * <a href='#7e'>VIIe. Polynomial Regression<\/a>  \n* <a href='#8'>VIII. MODEL EVALUATION<\/a>\n* <a href='#9'>IX. CONCLUSION<\/a>","34121e13":"### MEDIAN AND MEAN CHARGE BY REGION","3c0e5ee5":"# <a id='1'>I. LOAD LIBARARIES AND PACKAGES<\/a>","a6b882a0":"# <a id='3'>III. DATA PREPROCESSING & FEATURE ENGINEERING<\/a>\n\n**Create new feature \"Age Range\" from the Age feature**<br>\n  * young adult: 18 - 35\n  * middle age: 36 - 55\n  * senior adult: 56+\n   \n**Create new feature \"weight status\" from the BMI feature**<br>\n  * underweight\n  * normal weight\n  * overweight\n  * obese","655c1a06":"### DISTRIBUTION OF BMI & WEIGHT STATUS\n\n* Overweight and obese people make up the vast majority of the dataset\n* 52.8% of the population is considered **overweight**\n* 28.8% of the population is considered **obese**\n* Collectively the **normal weight** and **underweight** population make up about 18% of the data","84e19208":"### CHARGES BY SEX\n\n* Females tend to have lower healthcare charges than their male counterparts.","ad57d70e":"## <a id='7a'>VIIa. MULTIPLE LINEAR REGRESSION<\/a>\n","e07ec874":"### DISTRIBUTION OF CHILDREN VARIABLE\n\n* The majority of people have 0 children, while a very small percentage have 4 or more. \n* It doesn't seem likely that number of children will have any significant effect on charges. ","05a4b376":"# INTRODUCTION\n\nIn this notebook we will look at samples of medical costs of hospital patients along with other variables such as age, sex, body mass index, smoker status. \n\nOnce a thorough exploratory data analysis is completed, various machine learning models will be implemented to predict medical costs using the feature variables contained within the dataset. \n\nThank you for taking the time to view this kernel and please offer any feedback.\n\n-Milton Suggs","beb6745b":"# <a id='5'>V. FEATURE ENGINEERING<\/a>\n\nBased on our exploratory data analysis we were able to identify the **smoker**, **bmi**, and **age**, variables as most significant in predicting our target variable. \n\nIn this section we will encode our categorical variables using the LabelEncoder in preparation to run our models. ","2f6b0e91":"### CHARGES VS WEIGHT & SMOKER STATUS ","9a8ad476":"### SMOKER STATUS BY NUMBER OF CHILDREN\n\n* number of children does not appear to have any influence on smoker status","e510ca9c":"## <a id='7c'>VIIc. LASSO REGRESSION<\/a>\n","a19b8864":"### CREATE A DISTANCE MATRIX BASED ON FEATURES","266e2a24":"## DISTRIBUTION OF SMOKER\n\n* The number of **non-smokers (1064)** far outweighs the number of **smokers (274)** with non-smokers accounting for nearly 80% of the dataset to the smokers 20%.\n","cbc84a4d":"# <a id='4'>IV. EXPLORATORY DATA ANALYSIS<\/a>\n\n\nIn this section we'll perform an extensive exploratory data analyisis to visualize each of the feature variables. Starting with the 'charges' column, which is our target variable, we'll look at the distribution of values throughout the dataset. Afterward we'll perform univariate, bivariate, and multivariate data explorations. ","fe4a1805":"### SMOKER STATUS BY REGION","811f0bf1":"### AGE CATEGORIES BY REGION","f2af7e5a":"### AVERAGE PATIENT CHARGES ORGANIZED BY WEIGHT STATUS & REGION","be913b2e":"# <a id='8'>VIII. MODEL EVALUATION & DEPLOYMENT<\/a>\n\n\n* Mean Squared Error\n* Root Mean Squared Error\n* Mean Absolute Error\n* R2 Score\n* Residual Sum of Squares\n* Explained Variance\n\nThe **Random Forest Regression Model** is the model that gives us the best results with an R Squared score of 86% and a lower error scores than the other models. ","a99f063f":"### DISTRIBUTION OF SEX VARIABLE\n\n* There are 1338 total values in the sex column\n* The sex column is divided nearly evenly between male and female with **662 females** and **676 males**","9af0aadc":"## CHARGES CORRELATIONS","c69974a0":"### CHARGES DISTRIBUTION BY AGE\n\n* There is a positive correlation between charges and age as there is a slight increase in charges as the ages get higher. \n* The mean and median charges by age category reflect this correlation.\n* The distinction in charges between smokers and non-smokers is very clear.","78410fe2":"## MODEL DEPLOYMENT","cc7ba1a6":"### DENDOGRAM OF AGGLOMERATIVE CLUSTERING","ec9d402f":"### SMOKER STATUS BY AGE AND AGE CATEGORY\n\n* The number of smokers age 19 appears to be significantly more than those of other ages\n* The percentage of smokers belonging to each age category is between 18% to 21%","39fef95f":"### CHARGES BY SMOKER STATUS AND SEX","809e90f6":"### BODY MASS INDEX AND AGE CATEGORY","8020df66":"### COMPLETE CLUSTER HIERARCHY BASED ON DISTANCE MATRIX","30c047c0":"# <a id='9'>IX. CONCLUSION<\/a>\n\nIn the United States healthcare continues to be a highly contested issue. The rising costs of healthcare puts many people at financial risk for even the smallest of illnesses. Analysis of this dataset has provided great insight to some of the factors that have a profound effect on the cost of healthcare, chief among them being whether or not a person smokes. \n\nWith this information and information that may be gained in the future, one can hope that individuals will make appropriate decisions regarding their health and that as a society we develop ways to better aid each other in the ways that are needed. \n\nThis notebook will continue to be updated, but please feel free to leave feedback!\n\nThanks for stopping by, \n\nMilton","72b45b15":"<img src='https:\/\/github.com\/miltonsuggs\/05-medical-costs-eda-regression\/blob\/main\/medical.jpg?raw=true' alt='MEDICAL COSTS' width=\"750\">","a3768afa":"### VALUE DISTRIBUTION OF CHARGES VARIABLE","8ae144fa":"## <a id='7e'>VIIe. POLYNOMIAL REGRESSION<\/a>\n","7f733da1":"### CHARGES BY AGE CATEGORY & SMOKER STATUS","ce80b162":"# <a id='7'>VII. MODEL DEVELOPMENT<\/a>\n\n\nWe will implement several different models in order to predict our target variable using our selected features.\n\nThe models used will consist of:\n* Multiple Linear Regression\n* Lasso Regression\n* Ridge Regression\n* Random Forest Regression\n* Polynomial Regression ","3e00f396":"<p  style=\"text-align: center;\"><font size=\"12\"><b>MEDICAL COSTS PREDICTION<\/b><\/font><\/p>\n<p  style=\"text-align: center;\"><font size=\"4\">EXPLORATORY DATA ANALYSIS & REGRESSION MODELS<\/font><\/p>\n<p  style=\"text-align: center;\"><font size=\"4\"><b><a href='https:\/\/medical-cost-deployment.herokuapp.com\/'>CLICK HERE FOR MODEL DEPLOYMENT<\/a><\/b><\/font><\/p>","1804b5de":"### CHARGES BY BMI","d28d4b2c":"### BODY MASS INDEX OF SMOKERS","7d591933":"### WEIGHT STATUS AND AGE CATEGORY\n\n* The Young Adult population is slightly more likely to have a normal weight status than the middle age population. \n* The middle age population is slight more lokely to have an obese weight status than the young adult population. \n","bc08a81f":"### SCATTER PLOT OF DATA COLORED BY CLUSTER","095c492e":"# <a id='6'>VI. CLUSTERING<\/a>\n\nIn this section we will use clustering to group similar patients. There are three different clustering algorithms that will be used: \n\n* K-Means Clustering\n* Hierarchical Clustering\n* Density Based Clustering","a75dafe8":"### WEIGHT STATUS PER REGION\n\n* the Northwest region has a significantly higher number of obese people than the other regions","49e548a4":"## <a id='7b'>VIIb. RIDGE REGRESSION<\/a>\n","38942fbc":"## DISTRIBUTION OF REGION\n\nThe four regions **northeast**, **northwest**, **southeast**, **southwest** are fairly evenly distributed throughout the dataset. ","be3f36a2":"<hr>","4f6267bd":"### CHARGES BY SMOKER STATUS\n\n* There is a large difference in charges between smokers and non-smokers\n* There is an approximately 27,000USD difference in median charge for smokers (7,345USD) and non-smokers (34,456USD)","53e8027b":"### SMOKER STATUS BY WEIGHT STATUS\n\n* Obese people are the most present within the dataset while underweight people are the least. \n* In all weight classes, smokers make up about 19% to 25% of the population. ","d1adee5e":"### DISTRIBUTION OF AGE & AGE_CAT VARIABLE\n\n* The majority of samples are in the range of age 36 to 64 years split fairly evenly between the categories \"middle age\" and \"senior adult\". \n* The young adult population is far less 16.1% of the dataset consisting of people ages 35 and below.","584af075":"## <a id='7d'>VIId. RANDOM FOREST REGRESSION<\/a>\n","d572ffd9":"### FEATURE SELECTION","2e41f155":"### K-MEANS CLUSTERING","a88ee4d7":"# <a id='2'>II. DATA OVERVIEW & INSIGHTS<\/a>","2cbe26e4":"### HIERARCHICAL CLUSTERING","ea62c084":"### BMI DISTRIBUTION BY AGE\n\n* Body mass index and weight status appears to be fairly evenly distributed across all age categories. \n* Senior adults tend to have a slightly higher BMI while young adults tend to have a slightly lower BMI","a87551e4":"# <a id='4a'>IVa. BIVARIATE & MULTIVARIATE EXPLORATION<\/a>\n\nIn this section we will visualize correlations between two variables. Becuase the 'smoker' variable is the most highly correlated with the 'charges' variable we will begin by exploring the relationship between 'smoker' and other variables such as 'age', 'bmi' & 'weight status', and 'region'","d45412e3":"### SMOKER STATUS BY SEX\n\n* The number of male smokers (159) outweights the number of female smokers (115)\n* Approx 23.5% of male patients are smokers as compared to 17.4% of female patients"}}