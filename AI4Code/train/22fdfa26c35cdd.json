{"cell_type":{"d385ddb7":"code","6db3b27c":"code","8367c9f9":"code","c6e590d3":"code","70ad4e51":"code","35266e25":"code","d89cc1fd":"code","56cd7a6c":"code","b5809b29":"code","d917cca7":"code","5036d907":"code","b643d9f3":"code","0ae1c002":"code","09c23943":"code","6ace9d99":"code","93d1e5a3":"code","4ae3fb3e":"code","79a23a3c":"code","00401d9e":"code","260878c5":"code","0d4992bc":"code","a2100898":"code","5a562d3a":"code","4f37f4ca":"code","60cd07fd":"markdown","991a2bb8":"markdown","e99d93fb":"markdown","c27e59cf":"markdown"},"source":{"d385ddb7":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\n\n# Keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD, Adam, Adadelta, RMSprop\nimport keras.backend as K\n\n# Train-Test\nfrom sklearn.model_selection import train_test_split\n\n# Scale\nfrom sklearn.preprocessing import StandardScaler\n\n# Classification Report\nfrom sklearn.metrics import classification_report","6db3b27c":"df = pd.read_csv(\"..\/input\/fifa19\/data.csv\")\n\n# Remove Missing Values \nna = pd.notnull(df[\"Position\"])\ndf = df[na]\n\ndf.head()","8367c9f9":"forward = [\"ST\", \"LW\", \"RW\", \"LF\", \"RF\", \"RS\",\"LS\", \"CF\"]\nmidfielder = [\"CM\",\"RCM\",\"LCM\", \"CDM\",\"RDM\",\"LDM\", \"CAM\", \"LAM\", \"RAM\", \"RM\", \"LM\"]\ndefender = [\"CB\", \"RCB\", \"LCB\", \"LWB\", \"RWB\", \"LB\", \"RB\"]","c6e590d3":"df.loc[df[\"Position\"] == \"GK\", \"Position\"] = 0\ndf.loc[df[\"Position\"].isin(defender), \"Position\"] = 1\ndf.loc[df[\"Position\"].isin(midfielder), \"Position\"] = 2\ndf.loc[df[\"Position\"].isin(forward), \"Position\"] = 3","70ad4e51":"df[\"Position\"].value_counts()","35266e25":"df[\"Position\"].unique()","d89cc1fd":"df = df[[\"Position\", 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']]\ndf.head()","56cd7a6c":"x = df.drop(\"Position\", axis = 1)\n\nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n\nx = pd.DataFrame(ss.fit_transform(x))\n\ny = df[\"Position\"]\n\nx.head()","b5809b29":"y.head()","d917cca7":"from keras.utils.np_utils import to_categorical\ny_cat = to_categorical(y)\n\ny_cat[:10]","5036d907":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x.values, y_cat,\n                                                    test_size=0.2)","b643d9f3":"y.shape","0ae1c002":"x.shape","09c23943":"import keras.backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD, Adam, Adadelta, RMSprop","6ace9d99":"K.clear_session()\nmodel = Sequential()\nmodel.add(Dense(60, input_shape = (33,), activation = \"relu\"))\nmodel.add(Dense(15, activation = \"relu\"))\nmodel.add(Dense(4, activation = \"softmax\"))\nmodel.compile(Adam(lr = 0.01), \"categorical_crossentropy\", metrics = [\"accuracy\"])\nmodel.summary()","93d1e5a3":"60 * 33 + 60","4ae3fb3e":"model.fit(x_train, y_train, verbose=1, epochs=10)","79a23a3c":"y_pred_class = model.predict_classes(x_test)","00401d9e":"from sklearn.metrics import confusion_matrix","260878c5":"y_pred = model.predict(x_test)","0d4992bc":"y_test_class = np.argmax(y_test, axis=1)","a2100898":"y_test_class","5a562d3a":"confusion_matrix(y_test_class, y_pred_class)","4f37f4ca":"from sklearn.metrics import classification_report\nprint(classification_report(y_test_class, y_pred_class))","60cd07fd":"# 3. Deep Learning","991a2bb8":"# 2. Data","e99d93fb":"Position Category","c27e59cf":"# 1. Packages"}}