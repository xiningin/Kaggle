{"cell_type":{"15d06bdf":"code","8b9c82dc":"code","ec115c36":"code","c011a026":"code","707f8602":"code","b286dce9":"code","394cdd98":"code","5001de22":"code","858321fa":"code","e557c6ab":"code","30f933a9":"code","eccbbfd5":"code","eb0e0d81":"code","c8d54524":"code","91fd5d87":"code","32a09a8d":"code","1c6d3f08":"code","19d5d26b":"code","2aaaecd8":"code","2b985747":"code","9f868a97":"code","183265f8":"code","7c9bd0a4":"code","9b1ef421":"code","d4bf71aa":"code","7846ec16":"code","2f5d353d":"code","45b895ff":"code","7bfc9891":"code","b026df30":"code","1ea78bce":"code","c7910e18":"markdown","2e88e390":"markdown","79c64def":"markdown","a834f808":"markdown","b6abb0b8":"markdown","84f7b832":"markdown","fa76bb95":"markdown","164e054d":"markdown","52d6fa4c":"markdown","cb8bd182":"markdown"},"source":{"15d06bdf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","8b9c82dc":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport datetime\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n","ec115c36":"missing_values = [\"n\/a\", \"na\", \"-\",\"NaN\"]\ndataset = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv',na_values = missing_values)","c011a026":"dataset.head()","707f8602":"cases_local = {} #dict for local cases\ncases_foreign = {} #dict for foreign patients in india\n\n\n\nfor i in range(446):\n    cases_local[dataset['State\/UnionTerritory'][i]] = dataset['ConfirmedIndianNational'][i]\n    cases_foreign[dataset['State\/UnionTerritory'][i]] = dataset['ConfirmedForeignNational'][i]\nprint(cases_local.values())","b286dce9":"p1 = plt.bar(np.arange(len(cases_local)),list(cases_local.values()), 0.7)\np2 = plt.bar(np.arange(len(cases_local)), list(cases_foreign.values()), 0.7,\n             bottom=list(cases_local.values()))\n\nplt.ylabel('Cases')\nplt.title('Cases by states\/UTs')\nplt.xticks(np.arange(len(cases_local)), cases_local.keys(),rotation='vertical')\nplt.yticks(np.arange(0, 200, 20))\nplt.legend((p1[0], p2[0]), ('Local patient', 'Foreign patient'))\n\nplt.show()","394cdd98":"deaths = {} #dict for deaths\nfor i in range(len(dataset)):\n    deaths[dataset['State\/UnionTerritory'][i]] = int(dataset['Deaths'][i])\n","5001de22":"plt.bar(np.arange(len(deaths)),deaths.values(), 0.7)\nplt.ylabel('Deaths')\nplt.xticks(np.arange(len(deaths)), deaths.keys(),rotation='vertical')\nplt.yticks(np.arange(0, 8, 1))\nplt.title('Deaths in various states\/UTs',bbox={'facecolor':'0.8', 'pad':5})\nplt.show()","858321fa":"cured_per_cases = {}  #percentage of cured per confirmed cases\nfor i in range(len(dataset)):\n    cured_per_cases[dataset['State\/UnionTerritory'][i]] = (dataset['Cured'][i] \/ (dataset['Confirmed'][i]))*100\ncured_per_cases","e557c6ab":"plt.pie([v for v in cured_per_cases.values()],labels = [k for k in cured_per_cases.keys()])\nplt.show()","30f933a9":"start = datetime.datetime.strptime(dataset['Date'][0], \"%d\/%m\/%y\")\nend = datetime.datetime.strptime(dataset['Date'][len(dataset)-1], \"%d\/%m\/%y\")\ndate = pd.date_range(start,end)\ncases_by_date = dataset['Date'].value_counts().to_dict()\n\ncases = []\nlist1 = list(cases_by_date.values())\nlist1.sort()\n\nfor i in range(len(date)):\n    if i==0:\n        cases.append(list1[i])\n        \n    else:\n        cases.append(cases[i-1] + list1[i])\n    \nfig, ax = plt.subplots()\nax.plot(date,cases)\nax.xaxis_date()     # interpret the x-axis values as dates\nfig.autofmt_xdate()\nplt.title('Cases progression by date')\nplt.ylabel('Cases till date')\nplt.show()","eccbbfd5":"samples_tested =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nsamples_tested.head()","eb0e0d81":"individual_tested = {}\npositive_cases = {}\nfor i in range(len(samples_tested)):\n    individual_tested[samples_tested['DateTime'][i]] = samples_tested['TotalIndividualsTested'][i]\n    positive_cases[samples_tested['DateTime'][i]] = samples_tested['TotalPositiveCases'][i]\n    \np1 = plt.bar(np.arange(len(individual_tested)),list(individual_tested.values()), 0.7)\np2 = plt.bar(np.arange(len(positive_cases)), list(positive_cases.values()), 0.7,\n             bottom=list(individual_tested.values()))\n\nplt.ylabel('Samples')\nplt.title('Samples tested')\nplt.xticks(np.arange(len(individual_tested)), individual_tested.keys(),rotation='vertical')\n#plt.yticks(np.arange(0, 200, 20))\nplt.legend((p1[0], p2[0]), ('Individual tested', 'Positive Cases'))\n\nplt.show()","c8d54524":"AgeGroupDetails =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/AgeGroupDetails.csv')\nAgeGroupDetails.head()\n","91fd5d87":"age_percent = {}\nfor i in range(len(AgeGroupDetails)):\n    age_percent[AgeGroupDetails['AgeGroup'][i]] = AgeGroupDetails['Percentage'][i][0:-1]\nage_percent","32a09a8d":"plt.pie(age_percent.values(), labels=age_percent.keys(), autopct='%1.1f%%')\n        \n#draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.75,color='black', fc='white',linewidth=1.25)\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.title('Cases by Age groups')\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nplt.axis('equal')\nplt.show()  ","1c6d3f08":"IndividualDetails =  pd.read_csv('\/kaggle\/input\/covid19-in-india\/IndividualDetails.csv',na_values=missing_values)\nIndividualDetails.head()\n","19d5d26b":"\ndef fill_missing(column):\n    col = column.value_counts().to_dict()\n    prob = random.choices(list(col.keys()), weights = list(col.values()), k=100)\n    null_val = column.isnull()\n    for i in range(len(null_val)):\n        if null_val[i]== True:\n            column[i] = prob[i%100]\n    return column\n            ","2aaaecd8":"print(IndividualDetails.isnull().sum()) #before filling values\n\ndetected_state = IndividualDetails['detected_state']\nage = IndividualDetails['age']\ngender = IndividualDetails['gender']\nstatus = IndividualDetails['current_status']\nnationality = IndividualDetails['nationality']\n\nfill_missing(detected_state)\nfill_missing(age)\nfill_missing(gender)\nfill_missing(status)\nfill_missing(nationality)\n\n\nprint(IndividualDetails.isnull().sum())  #after filling values","2b985747":"for i in range(len(IndividualDetails['age'])):\n    IndividualDetails['age'][i] = int(IndividualDetails['age'][i][:2])\n","9f868a97":"plt.pie(gender.value_counts().to_dict().values(),labels=gender.value_counts().to_dict().keys(),autopct='%1.1f%%')\nplt.show()\n","183265f8":"from datetime import datetime\nfor i in range(len(IndividualDetails['diagnosed_date'])):\n    IndividualDetails['diagnosed_date'][i] = datetime.strptime(IndividualDetails['diagnosed_date'][i], '%d\/%m\/%Y').date()\nIndividualDetails['diagnosed_date']","7c9bd0a4":"weeks = []\nfor i in range(len(IndividualDetails['diagnosed_date'])):\n    weeks.append(int(IndividualDetails['diagnosed_date'][i].strftime(\"%U\")))\nIndividualDetails['weeks'] = weeks\nIndividualDetails.head()","9b1ef421":"X = IndividualDetails.loc[:,['gender','detected_state','nationality','age','weeks']].values\ny = IndividualDetails.loc[:,['current_status']].values\n","d4bf71aa":"X[:,0] = LabelEncoder().fit_transform(X[:,0])\nX[:,1] = LabelEncoder().fit_transform(X[:,1])\nX[:,2] = LabelEncoder().fit_transform(X[:,2])\ny[:,0] = LabelEncoder().fit_transform(y[:,0])\ny=y.astype('int')\n\n\n\n","7846ec16":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2)\nentropy = DecisionTreeClassifier(criterion='entropy')\nentropy.fit(x_train,y_train)","2f5d353d":"y_pred = entropy.predict(x_test)","45b895ff":"accuracy_score(y_test,y_pred)","7bfc9891":"clf = RandomForestClassifier(n_jobs=2,random_state=0)\nclf.fit(x_train,y_train)","b026df30":"y_pred = clf.predict(x_test)","1ea78bce":"accuracy_score(y_test,y_pred)","c7910e18":"> Decision Tree","2e88e390":"> Model fitting","79c64def":"> Accuracy","a834f808":"Assigning weeks to Dates","b6abb0b8":"> Load dataset","84f7b832":"Label Encoding","fa76bb95":"**Fill Missing Values**","164e054d":"> Random Forest","52d6fa4c":"> EDA","cb8bd182":"> Importing libraries"}}