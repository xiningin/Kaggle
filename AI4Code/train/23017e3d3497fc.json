{"cell_type":{"2a4c32a0":"code","1cfb9c35":"code","4e54ec40":"code","efa33fb1":"code","fe4f3cc7":"code","376ef2fb":"code","67fb540d":"code","8ecbf209":"code","2e7b0048":"code","c8bf7be1":"code","eefe84ff":"code","0bc35961":"code","351c3c83":"code","57a756a4":"code","872f7ce7":"code","5d51e2d0":"code","54fff11d":"code","8cb2993d":"code","86b37ea9":"markdown","f4c88e74":"markdown","e5a2599d":"markdown","3b7962af":"markdown","01b96b28":"markdown","760964be":"markdown","fb6e9825":"markdown","26d15b27":"markdown","3b8fab38":"markdown"},"source":{"2a4c32a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1cfb9c35":"from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n","4e54ec40":"data=pd.read_csv(\"..\/input\/Tweets.csv\")\ndata.head()","efa33fb1":"data[\"airline_sentiment\"]=data.airline_sentiment.map({\"neutral\":\"0\",\"positive\":\"1\",\"negative\":\"-1\"})\ndata.head()","fe4f3cc7":"X=data.iloc[:,10]\nprint(X.size)\nY=data.iloc[:,1]\n","376ef2fb":"sentiment=data['airline_sentiment'].value_counts()\n\nlabel=['Negative','Neutral','Positive']\nindex = np.arange(len(label))\n\nplt.bar(index,sentiment)\nplt.xticks(index,label,rotation=45)\nplt.ylabel('Sentimen Count')\nplt.xlabel('Sentiment')\nplt.title('Sentiment')","67fb540d":"def plot_for_each_airline(airline_name):\n        airline_data=data[data['airline']==airline_name]\n        sentiment=airline_data['airline_sentiment'].value_counts()\n        label=['Negative','Neutral','Positive']\n        index = np.arange(len(label))\n        \n        plt.bar(index,sentiment)\n        plt.xticks(index,label,rotation=45)\n        plt.ylabel('Sentimen Count')\n        plt.xlabel('Sentiment')\n        plt.title(airline_name)","8ecbf209":"plot_for_each_airline(\"Virgin America\")","2e7b0048":"plot_for_each_airline(\"American\")","c8bf7be1":"plot_for_each_airline(\"United\")\n","eefe84ff":"plot_for_each_airline(\"Southwest\")\n","0bc35961":"plot_for_each_airline(\"Delta\")","351c3c83":"plot_for_each_airline(\"US Airways\")","57a756a4":"from sklearn.feature_extraction.text import CountVectorizer\n\nvectorizer=CountVectorizer()\nbag_of_words=vectorizer.fit_transform(X)\nvc=vectorizer.get_feature_names\n# uncomment to see bag of words , its lengthy so not showing\n#print(bag_of_words.toarray())\n#print( vectorizer.vocabulary_)","872f7ce7":"X_train,X_test,Y_train,Y_test=train_test_split(bag_of_words,Y,test_size=0.2)\n","5d51e2d0":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train.toarray(),Y_train)\n\npredict=model.predict(X_test.toarray())\nprint(model.score(X_test.toarray(),Y_test))\nprint(model.score(bag_of_words,Y))\n","54fff11d":"def user_defined_sentences(statement):\n    st=[s]\n    vect=vectorizer.transform(st)\n    print(vect.toarray())\n    predict=model.predict(vect.toarray())\n    print(predict)\n    polarity=model.predict_proba(vect.toarray())\n    print(polarity)\n\n    # uncomment to see linear graph\n    # plt.plot(index,polarity.reshape(-1,1))\n    # plt.show()\n    \n    # plotting horizontal bar graph for better demonstration \n    plt.bar(index,polarity[0])\n    plt.ylabel('Probability',fontsize=10)\n    plt.xlabel('Prediction',fontsize=10)\n    plt.xticks(index, label, fontsize=10, rotation=40)\n    plt.title('Sentiment of Sentence')\n    plt.show()\n","8cb2993d":"s=\"Not happy with the flight, too boring and late\"\nuser_defined_sentences(s)\n","86b37ea9":"The accuracy looks good. Now we will create a function to take user input as string and print its sentiment","f4c88e74":"Showing the total count of each sentiments for every airline","e5a2599d":"s=user input , I am taking a negative statement here ","3b7962af":"Display sentiment for each airline seperately ","01b96b28":"So we are sure that its a negative statement","760964be":"Taking two columns **airline_sentiment** and **text** also mapping the **airline_sentiment** column","fb6e9825":"Splitting training data set and test data set after using countvetorizer to construct bag of words","26d15b27":"Using random forest classifier for classifying sentiment into -1,0 and 1  ","3b8fab38":"Reading the dataset"}}