{"cell_type":{"fd9f02b4":"code","0b833ac2":"code","11a72ece":"code","01214c57":"code","f3d5d4fe":"code","47e2157f":"code","95a83627":"code","72f8a3b6":"code","7697c094":"code","cf479d0c":"code","088ac20b":"code","1308d7dd":"code","89178b71":"code","6d6fb1c3":"code","aea23411":"code","b6866e38":"code","a39555b8":"code","ed67687a":"code","eca55499":"code","c97fcab3":"code","5b40c4d0":"code","6d915a72":"code","2f91f12f":"code","48311a4f":"code","cb09650e":"code","e5acf895":"code","c20c7a6f":"code","786b4ba5":"markdown","9e251f33":"markdown","1602b3d2":"markdown","fdffc5f6":"markdown","71ede45a":"markdown","36f0421f":"markdown","f2d61899":"markdown","36e6db39":"markdown","6c7feafb":"markdown","d463ad72":"markdown","f2b73351":"markdown","7da83452":"markdown","54c7a7c8":"markdown","d3552551":"markdown","34448a01":"markdown","da962ec5":"markdown","1a2613ca":"markdown","0177a375":"markdown"},"source":{"fd9f02b4":"import numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom pandas_profiling import ProfileReport\n\n\nwarnings.filterwarnings('ignore')\n\ndef dist_box(df,col):\n    fig,(ax1,ax2)=plt.subplots(2,1)\n    sns.distplot(df[col],ax=ax1)\n    sns.boxplot(df[col],ax=ax2)\n\ndf = pd.read_csv('\/kaggle\/input\/hr-analytics\/HR_comma_sep.csv')\n\ndf = df.rename(columns={'satisfaction_level': 'satisfaction', \n                        'last_evaluation': 'evaluation',\n                        'number_project': 'projects',\n                        'average_montly_hours': 'hours',\n                        'time_spend_company': 'experience',\n                        'Work_accident': 'accident',\n                        'promotion_last_5years': 'promotion',\n                        'Department' : 'department'\n                        })\n\nfront = df['left']\ndf.drop(labels=['left'], axis=1,inplace = True)\ndf.insert(len(df.columns), 'left',front)","0b833ac2":"df.head()","11a72ece":"print(\">>> Shape:\\n\" , df.shape)\nprint(\"\\n>>> Features types:\\n\" , df.dtypes)\n","01214c57":"df.describe().T","f3d5d4fe":"df.groupby('left').mean()","47e2157f":"plt.figure(figsize=(20,20), dpi = 300)\nfor i in range (0,len(df.columns)-1):\n    plt.subplot(5,2,i+1)\n    sns.histplot(df, x=df.columns[i], hue=df.left, bins=17, kde=True)","95a83627":"plt.figure(figsize=(10,10))\np=sns.heatmap(df.corr(), annot=True,cmap ='RdYlGn')","72f8a3b6":"ProfileReport(df)","7697c094":"plt.figure(figsize=(9,9))\nplot=sns.countplot(df['left'])\nplt.xlabel('Target')\nplt.ylabel('Count of target')\nplt.title('Distribution of target')\ntotal = len(df)\nfor p in plot.patches:\n        plot.annotate('{:.1f}%'.format(100*p.get_height()\/len(df)), (p.get_x()+0.33, p.get_height()+100))","cf479d0c":"plt.figure(figsize=(9,9))\nplot=pd.crosstab(df.salary,df.left).plot(kind='bar',figsize=(9,9))\nplt.xlabel('Salary level')\nplt.ylabel('Count of leavers')\nplt.title('Distribution of salary')\ntotal = len(df)\nfor p in plot.patches:\n         plot.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x(), p.get_height()+100))","088ac20b":"plt.figure(figsize=(9,9))\nplot=pd.crosstab(df.department,df.left).plot(kind='bar',figsize=(9,9))\nplt.xlabel('Department name')\nplt.ylabel('Count of leavers')\nplt.title('Distribution of departments')\ntotal = len(df)\nfor p in plot.patches:\n         plot.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x(), p.get_height()+50))","1308d7dd":"column=['satisfaction','evaluation','projects','hours','experience']\ni=1","89178b71":"plt.figure(figsize=(20,3))\nfor j in column:\n    plt.subplot(1,5,i)\n    sns.boxplot(df[j])\n    i=i+1","6d6fb1c3":"#Categorical Encoding\n#salary\ndf['salary'] = df['salary'].astype ('category')\ndf.salary = df.salary.cat.codes\n\n#department\ndepartment_dummies = pd.get_dummies(df.department)\ndepartment_dummies = department_dummies.drop('sales', axis=1)\ndf.drop('department',axis=1,inplace=True)\ndf = pd.concat([df,department_dummies], axis='columns')\n\n\nfront = df['left']\ndf.drop(labels=['left'], axis=1,inplace = True)\ndf.insert(len(df.columns), 'left',front)","aea23411":"df","b6866e38":"# Defininh X and y\nX = df.drop('left', axis=1).values\ny = df.left\n\n# Scaling\nfrom sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit(X).transform(X.astype(float))\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=7)","a39555b8":"print ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","ed67687a":"#ML models\n#DecisionTree\ntest_scores = []\ntrain_scores = []\nn_range = list(range(1,10))\n\nfor i in n_range:\n\n    model = DecisionTreeClassifier(criterion=\"entropy\", max_depth = i)\n    model.fit(X_train,y_train)\n    \n    train_scores.append(model.score(X_train,y_train))\n    test_scores.append(model.score(X_test,y_test))","eca55499":"plt.figure(figsize=(20,5))\np = sns.lineplot(n_range,train_scores,marker='*',label='Train Score')\np = sns.lineplot(n_range,test_scores,marker='o',label='Test Score')","c97fcab3":"dt_model = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 6).fit(X_train,y_train) ","5b40c4d0":"#KNN\ntest_scores = []\ntrain_scores = []\nn_range = list(range(1,10))\n\nfor i in n_range:\n\n    model = KNeighborsClassifier(i)\n    model.fit(X_train,y_train)\n    \n    train_scores.append(model.score(X_train,y_train))\n    test_scores.append(model.score(X_test,y_test))","6d915a72":"plt.figure(figsize=(20,5))\np = sns.lineplot(n_range,train_scores,marker='*',label='Train Score')\np = sns.lineplot(n_range,test_scores,marker='o',label='Test Score')","2f91f12f":"knn_model = KNeighborsClassifier(1).fit(X_train,y_train)","48311a4f":"lr_model = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)","cb09650e":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb_model = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0,max_depth=1, random_state=7).fit(X_train, y_train.ravel())","e5acf895":"print(\"Decision Tree's Accuracy: \", metrics.accuracy_score(y_test, dt_model.predict(X_test)))\nprint(\"KNN's Accuracy: \", metrics.accuracy_score(y_test, knn_model.predict(X_test)))\nprint(\"LR's Accuracy: \", metrics.accuracy_score(y_test, lr_model.predict(X_test)))\nprint(\"GB's Accuracy: \", metrics.accuracy_score(y_test, gb_model.predict(X_test)))","c20c7a6f":"print(\"DT:\", classification_report(y_test,  dt_model.predict(X_test)))\nprint(\"KNN:\", classification_report(y_test,  knn_model.predict(X_test)))\nprint(\"LR:\", classification_report(y_test, lr_model.predict(X_test)))\nprint(\"GB:\", classification_report(y_test, gb_model.predict(X_test)))","786b4ba5":"# Data Frame:","9e251f33":"# BoxPlots:","1602b3d2":"# Data Shape & Types:","fdffc5f6":"# Correlations on Heatmap:","71ede45a":"# Distributions:","36f0421f":"# Churn Rate of Departments:","f2d61899":"## 4- Gradient Boosting","36e6db39":"# Churn Rate of Salary Levels:","6c7feafb":"# Train\/Test split:","d463ad72":"# Total Churn Rate:","f2b73351":"# Categorical Encoding:","7da83452":"# Model Evaluation\n","54c7a7c8":"## 3- Logistic Regression","d3552551":"# Profile Report:","34448a01":"# Left by Groups:","da962ec5":"# Data Frame Description:","1a2613ca":"# ML Models:\n## 1- Decision Tree","0177a375":"## 2- KNN"}}