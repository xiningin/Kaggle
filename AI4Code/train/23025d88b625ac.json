{"cell_type":{"744f71bb":"code","54285786":"code","e8d65810":"code","7de14c67":"code","acea47e3":"code","21e9ed43":"code","9209e37e":"code","3c5facc3":"code","851f271c":"code","5622953e":"code","af513bea":"code","6ae0d271":"code","c7e2ff9c":"code","15f971bf":"code","08191902":"code","13c88cda":"code","e8f26bb4":"code","0f096c9a":"code","217570ca":"code","a32b0714":"code","bc2b9609":"code","915782d9":"code","cccb5cc9":"code","f5d81413":"code","3d21d83b":"code","ff05e77c":"code","02bf375c":"code","0f78684e":"code","9d8c4ee7":"code","b4418bae":"code","6b3452d0":"code","d01a3295":"code","d6fe072b":"code","dfdde4f8":"code","cd696823":"code","e1014c9c":"code","f3e6d7d2":"code","b0a2954b":"code","ad801234":"code","a518c6db":"code","214d8e0d":"code","5f592cf2":"code","3d5c4838":"code","76667666":"code","7a2e2bda":"code","e69eea4b":"code","a1e77367":"code","8647bbe9":"code","32e33bb5":"code","c42813a9":"code","e1d1cf99":"code","6add0082":"code","581f507c":"code","4ca7c96c":"code","351506a4":"code","ce063480":"code","f607468d":"code","16eea96d":"code","947ac941":"code","5fe19524":"code","8e7c8a7c":"code","48d59af5":"code","cdb1758a":"code","5e456573":"code","ec3f18eb":"code","934e898d":"code","a913ae40":"code","07480033":"code","f3d52474":"code","149cf13b":"code","645ff094":"code","908fcb49":"code","b80f3a80":"code","f9cf6761":"code","e048b256":"code","aa692a8a":"code","b037fd20":"code","0927da7d":"code","6935917b":"code","6251625b":"code","ef6a1323":"code","bc93815d":"code","8786e9ce":"code","c7d14ee4":"code","a041608f":"code","32eaf36f":"code","448eadcc":"code","c86fb168":"code","4fb9f28d":"code","055167ae":"code","b4297fe5":"code","ad4eeb00":"code","07a08d45":"code","ace0da4e":"code","d1f63874":"code","39484b14":"code","7a288c0c":"code","cfef53c2":"code","4bd873bf":"code","7b1d6b22":"code","9d0d4666":"code","6428a06c":"code","2986b37f":"code","61ec669e":"code","b4fad6ce":"code","4468bf71":"code","cf7293f5":"code","69633ae9":"code","c0dabba8":"code","143f2893":"code","c2b6ef35":"code","81decab3":"code","cd651cf4":"code","6c0a529c":"code","8bac0ceb":"code","8e5c8837":"code","c0d74f2a":"code","e22ae945":"code","5b1c5e2a":"code","285e5926":"code","7ca34a1c":"code","8216da6e":"code","a9062de0":"code","7f4f1926":"code","9105a9c4":"code","9c80205c":"code","6e636be2":"code","bf8d3629":"code","1dd5068b":"code","95a11b5f":"code","915b7cbe":"code","070a6e0d":"code","e179d25b":"code","0bddf365":"code","243981a5":"code","f7ee0c40":"code","3f3aa48f":"code","258fdc05":"code","07535f2c":"code","f17994cf":"code","2342ba06":"code","8ebc3b34":"code","a9befe80":"code","c2a195f1":"code","bd5aa580":"code","6e5cfa14":"code","33b05c69":"code","31e3aba0":"code","263a6ef9":"code","e27093a5":"code","9be26b2d":"code","ee0e7082":"code","160ce3a0":"code","5d652455":"code","e0158ac4":"code","f201bb84":"code","4374b5fe":"code","6037810e":"code","2158729e":"code","e33f4920":"code","0dc151a1":"code","0750312e":"code","9989e63a":"code","21ac351d":"code","cb92ad66":"markdown","1bedb90b":"markdown","d3b864e3":"markdown","c431c287":"markdown","caf93009":"markdown","1fda0058":"markdown","e12e16c4":"markdown","24d39058":"markdown","79f8e868":"markdown","744f5db6":"markdown","c3e3b11f":"markdown","1eeef221":"markdown","51824426":"markdown","cc3833db":"markdown","d6840986":"markdown","9b34ee98":"markdown","47be5eed":"markdown","5965c762":"markdown","40b90c74":"markdown","65ca7f78":"markdown","667f608e":"markdown","78330038":"markdown","75a15578":"markdown","21c85672":"markdown","771f7a9c":"markdown","4588f82c":"markdown","39a3ee3a":"markdown","00275c33":"markdown","b84c59c1":"markdown","3680b483":"markdown","60dec000":"markdown","57e48dac":"markdown","d02449ef":"markdown","52d283af":"markdown","bb9681a5":"markdown","46a1c7ad":"markdown","57604f0f":"markdown","31e2e544":"markdown","473e32ac":"markdown","4cc5f2f0":"markdown","c4333648":"markdown","9c91cdbf":"markdown","f9885e19":"markdown","adbce783":"markdown","81ce84e1":"markdown","063e2d70":"markdown","43467ee1":"markdown","ac26fa19":"markdown","4f6dd268":"markdown","a21dfebe":"markdown","a8dfd6f2":"markdown","9628ed40":"markdown","0c5aa43c":"markdown","9bed5c3c":"markdown","05465c53":"markdown"},"source":{"744f71bb":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","54285786":"plt.style.use(\"ggplot\")","e8d65810":"import pandas as pd\nimport numpy as np","7de14c67":"import random\nnp.random.seed(1234)\nrandom.seed(1234)","acea47e3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","21e9ed43":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","9209e37e":"train_df.head()","3c5facc3":"train_df.dtypes","851f271c":"train_df[\"MSZoning\"].value_counts()","5622953e":"all_df = pd.concat([train_df, test_df], sort=False).reset_index(drop=True)","af513bea":"all_df","6ae0d271":"all_df[\"SalePrice\"]","c7e2ff9c":"from sklearn.preprocessing import LabelEncoder","15f971bf":"categories = all_df.columns[all_df.dtypes == \"object\"]\nprint(categories)","08191902":"all_df[\"Alley\"].value_counts()","13c88cda":"for cat in categories:\n    le = LabelEncoder()\n    print(cat)\n    \n    all_df[cat].fillna(\"missing\", inplace=True)    \n    le = le.fit(all_df[cat])\n    all_df[cat] = le.transform(all_df[cat])\n    all_df[cat] = all_df[cat].astype(\"category\")","e8f26bb4":"all_df","0f096c9a":"train_df_le = all_df[~all_df[\"SalePrice\"].isnull()]\ntest_df_le = all_df[all_df[\"SalePrice\"].isnull()]","217570ca":"import lightgbm as lgb","a32b0714":"from sklearn.model_selection import KFold\nfolds = 3\nkf = KFold(n_splits=folds)","bc2b9609":"lgbm_params = {\n    \"objective\":\"regression\",\n    \"random_seed\":1234\n}","915782d9":"train_X = train_df_le.drop([\"SalePrice\", \"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice\"]","cccb5cc9":"from sklearn.metrics import mean_squared_error","f5d81413":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(np.log(y_valid), np.log(y_pred)))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","3d21d83b":"sum(rmses)\/len(rmses)","ff05e77c":"for model in models:\n    lgb.plot_importance(model,importance_type=\"gain\", max_num_features=15)","02bf375c":"train_df[\"SalePrice\"].describe()","0f78684e":"train_df[\"SalePrice\"].plot.hist(bins=20)","9d8c4ee7":"np.log(train_df['SalePrice'])","b4418bae":"np.log(train_df['SalePrice']).plot.hist(bins=20)","6b3452d0":"train_df_le[\"SalePrice_log\"] = np.log(train_df_le[\"SalePrice\"])","d01a3295":"train_X = train_df_le.drop([\"SalePrice\",\"SalePrice_log\",\"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice_log\"]","d6fe072b":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","dfdde4f8":"sum(rmses)\/len(rmses)","cd696823":"all_df = pd.concat([train_df, test_df], sort=False).reset_index(drop=True)","e1014c9c":"categories = all_df.columns[all_df.dtypes == \"object\"]\nprint(categories)","f3e6d7d2":"all_df.isnull().sum().sort_values(ascending=False).head(40)","b0a2954b":"all_df.PoolQC.value_counts()","ad801234":"all_df.loc[~all_df[\"PoolQC\"].isnull(), \"PoolQC\"] = 1\nall_df.loc[all_df[\"PoolQC\"].isnull(), \"PoolQC\"] = 0","a518c6db":"all_df.PoolQC.value_counts()","214d8e0d":"all_df.loc[~all_df[\"MiscFeature\"].isnull(), \"MiscFeature\"] = 1\nall_df.loc[all_df[\"MiscFeature\"].isnull(), \"MiscFeature\"] = 0","5f592cf2":"all_df.loc[~all_df[\"Alley\"].isnull(), \"Alley\"] = 1\nall_df.loc[all_df[\"Alley\"].isnull(), \"Alley\"] = 0","3d5c4838":"HighFacility_col = [\"PoolQC\",\"MiscFeature\",\"Alley\"]\nfor col in HighFacility_col:\n    if all_df[col].dtype == \"object\":\n        if len(all_df[all_df[col].isnull()]) > 0:\n            all_df.loc[~all_df[col].isnull(), col] = 1\n            all_df.loc[all_df[col].isnull(), col] = 0","76667666":"all_df[\"hasHighFacility\"] = all_df[\"PoolQC\"] + all_df[\"MiscFeature\"] + all_df[\"Alley\"]","7a2e2bda":"all_df[\"hasHighFacility\"] = all_df[\"hasHighFacility\"].astype(int)","e69eea4b":"all_df[\"hasHighFacility\"].value_counts()","a1e77367":"all_df = all_df.drop([\"PoolQC\",\"MiscFeature\",\"Alley\"],axis=1)","8647bbe9":"all_df.describe().T","32e33bb5":"train_df_num = train_df.select_dtypes(include=[np.number])","c42813a9":"nonratio_features = [\"Id\", \"MSSubClass\", \"OverallQual\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\", \"MoSold\", \"YrSold\"]","e1d1cf99":"num_features = sorted(list(set(train_df_num) - set(nonratio_features)))","6add0082":"num_features","581f507c":"train_df_num_rs = train_df_num[num_features]","4ca7c96c":"for col in num_features:\n    if train_df_num_rs.describe()[col][\"75%\"] == 0:\n        print(col, len(train_df_num_rs[train_df_num_rs[col] == 0]))","351506a4":"for col in num_features:\n    if train_df_num_rs[col].nunique() < 15:\n        print(col, train_df_num_rs[col].nunique())","ce063480":"for col in num_features:\n    tmp_df = train_df_num_rs[(train_df_num_rs[col] > train_df_num_rs[col].mean() + train_df_num_rs[col].std()*3) | \\\n    (train_df_num_rs[col] < train_df_num_rs[col].mean() - train_df_num_rs[col].std()*3)]\n    print(col, len(tmp_df))","f607468d":"all_df.plot.scatter(x=\"BsmtFinSF1\", y=\"SalePrice\")","16eea96d":"all_df[all_df[\"BsmtFinSF1\"] > 5000]","947ac941":"all_df.plot.scatter(x=\"TotalBsmtSF\", y=\"SalePrice\")","5fe19524":"all_df[all_df[\"TotalBsmtSF\"] > 6000]","8e7c8a7c":"all_df.plot.scatter(x=\"GrLivArea\", y=\"SalePrice\")","48d59af5":"all_df[all_df[\"GrLivArea\"] > 5000]","cdb1758a":"all_df.plot.scatter(x=\"1stFlrSF\", y=\"SalePrice\")","5e456573":"all_df[all_df[\"1stFlrSF\"] > 4000]","ec3f18eb":"all_df = all_df[(all_df['BsmtFinSF1'] < 2000) | (all_df['SalePrice'].isnull())]\nall_df = all_df[(all_df['TotalBsmtSF'] < 3000) | (all_df['SalePrice'].isnull())]\nall_df = all_df[(all_df['GrLivArea'] < 4500) | (all_df['SalePrice'].isnull())]\nall_df = all_df[(all_df['1stFlrSF'] < 2500) | (all_df['SalePrice'].isnull())]\nall_df = all_df[(all_df['LotArea'] < 100000) | (all_df['SalePrice'].isnull())]","934e898d":"categories = categories.drop([\"PoolQC\",\"MiscFeature\",\"Alley\"])","a913ae40":"for cat in categories:\n    le = LabelEncoder()\n    print(cat)\n    \n    all_df[cat].fillna(\"missing\", inplace=True)    \n    le = le.fit(all_df[cat])\n    all_df[cat] = le.transform(all_df[cat])\n    all_df[cat] = all_df[cat].astype(\"category\")","07480033":"train_df_le = all_df[~all_df[\"SalePrice\"].isnull()] \ntest_df_le = all_df[all_df[\"SalePrice\"].isnull()] \n\ntrain_df_le[\"SalePrice_log\"] = np.log(train_df_le[\"SalePrice\"])\ntrain_X = train_df_le.drop([\"SalePrice\",\"SalePrice_log\", \"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice_log\"]","f3d52474":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","149cf13b":"sum(rmses)\/len(rmses)","645ff094":"all_df[[\"YearBuilt\",\"YearRemodAdd\",\"GarageYrBlt\",\"YrSold\"]].describe()","908fcb49":"all_df[\"Age\"] = all_df[\"YrSold\"] - all_df[\"YearBuilt\"]","b80f3a80":"train_df_le = all_df[~all_df[\"SalePrice\"].isnull()] \ntest_df_le = all_df[all_df[\"SalePrice\"].isnull()] \n\ntrain_df_le[\"SalePrice_log\"] = np.log(train_df_le[\"SalePrice\"])\ntrain_X = train_df_le.drop([\"SalePrice\",\"SalePrice_log\",\"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice_log\"]","f9cf6761":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","e048b256":"sum(rmses)\/len(rmses)","aa692a8a":"all_df[[\"LotArea\",\"MasVnrArea\",\"BsmtUnfSF\",\"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\", \"LowQualFinSF\", \"GrLivArea\", \"GarageArea\",\"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\", \"LotFrontage\"]].describe()","b037fd20":"all_df[\"TotalSF\"] = all_df[\"TotalBsmtSF\"] + all_df[\"1stFlrSF\"] + all_df[\"2ndFlrSF\"]\nall_df[\"Total_Bathrooms\"] = all_df[\"FullBath\"] + all_df[\"HalfBath\"] + all_df[\"BsmtFullBath\"] + all_df[\"BsmtHalfBath\"]","0927da7d":"all_df[\"Total_PorchSF\"] = all_df[\"WoodDeckSF\"] + all_df[\"OpenPorchSF\"] + all_df[\"EnclosedPorch\"] + all_df[\"3SsnPorch\"] + all_df[\"ScreenPorch\"]","6935917b":"all_df[\"hasPorch\"] = all_df[\"Total_PorchSF\"].apply(lambda x: 1 if x > 0 else 0)\nall_df = all_df.drop(\"Total_PorchSF\",axis=1)","6251625b":"train_df_le = all_df[~all_df[\"SalePrice\"].isnull()] \ntest_df_le = all_df[all_df[\"SalePrice\"].isnull()] \n\ntrain_df_le[\"SalePrice_log\"] = np.log(train_df_le[\"SalePrice\"])\ntrain_X = train_df_le.drop([\"SalePrice\",\"SalePrice_log\",\"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice_log\"]","ef6a1323":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","bc93815d":"sum(rmses)\/len(rmses)","8786e9ce":"import optuna","c7d14ee4":"from sklearn.model_selection import train_test_split","a041608f":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_Y, test_size=0.2, random_state=1234, shuffle=False,  stratify=None)","32eaf36f":"def objective(trial):\n    params = {\n        \"objective\":\"regression\",\n        \"random_seed\":1234,\n        \"learning_rate\":0.05,        \n        \"n_estimators\":1000,        \n        \n        \"num_leaves\":trial.suggest_int(\"num_leaves\",4,64),\n        \"max_bin\":trial.suggest_int(\"max_bin\",50,200),        \n        \"bagging_fraction\":trial.suggest_uniform(\"bagging_fraction\",0.4,0.9),\n        \"bagging_freq\":trial.suggest_int(\"bagging_freq\",1,10),\n        \"feature_fraction\":trial.suggest_uniform(\"feature_fraction\",0.4,0.9),\n        \"min_data_in_leaf\":trial.suggest_int(\"min_data_in_leaf\",2,16),                \n        \"min_sum_hessian_in_leaf\":trial.suggest_int(\"min_sum_hessian_in_leaf\",1,10),\n    }\n    \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(params, lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,)    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    score =  np.sqrt(mean_squared_error(y_valid, y_pred))\n    \n    return score","448eadcc":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=50)\nstudy.best_params","c86fb168":"lgbm_params = {\n    \"objective\":\"regression\",\n    \"random_seed\":1234,\n    \"learning_rate\":0.05, \n    \"n_estimators\":1000,\n    \"num_leaves\":12,\n    \"bagging_fraction\": 0.8319278029616157,\n    \"bagging_freq\": 5,\n    \"feature_fraction\": 0.4874544371547538,    \n    \"max_bin\":189, \n    \"min_data_in_leaf\":13, \n    \"min_sum_hessian_in_leaf\":4\n}","4fb9f28d":"models = []\nrmses = []\noof = np.zeros(len(train_X))\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)    \n              \n    models.append(model_lgb)    \n    rmses.append(tmp_rmse)\n    oof[val_index] = y_pred ","055167ae":"sum(rmses)\/len(rmses)","b4297fe5":"test_X = test_df_le.drop([\"SalePrice\", \"Id\"], axis=1)","ad4eeb00":"preds = []\n\nfor model in models:\n    pred = model.predict(test_X)\n    preds.append(pred)","07a08d45":"preds_array = np.array(preds)\npreds_mean = np.mean(preds_array, axis=0)","ace0da4e":"preds_exp = np.exp(preds_mean)","d1f63874":"len(preds_exp)","39484b14":"submission[\"SalePrice\"] = preds_exp","7a288c0c":"submission.to_csv(\".\/houseprices_submit01.csv\",index=False)","cfef53c2":"from sklearn.ensemble import RandomForestRegressor as rf","4bd873bf":"hasnan_cat = []\nfor col in all_df.columns:\n    tmp_null_count = all_df[col].isnull().sum()\n    if (tmp_null_count > 0) & (col != \"SalePrice\"):\n        print(col, tmp_null_count)\n        hasnan_cat.append(col)","7b1d6b22":"all_df[hasnan_cat].describe()","9d0d4666":"for col in all_df.columns:\n    tmp_null_count = all_df[col].isnull().sum()\n    if (tmp_null_count > 0) & (col != \"SalePrice\"):\n        print(col, tmp_null_count)\n        all_df[col] = all_df[col].fillna(all_df[col].median())","6428a06c":"train_df_le = all_df[~all_df[\"SalePrice\"].isnull()]\ntest_df_le = all_df[all_df[\"SalePrice\"].isnull()]\ntrain_df_le[\"SalePrice_log\"] = np.log(train_df_le[\"SalePrice\"])","2986b37f":"train_X = train_df_le.drop([\"SalePrice\",\"SalePrice_log\",\"Id\"], axis=1)\ntrain_Y = train_df_le[\"SalePrice_log\"]","61ec669e":"folds = 3\nkf = KFold(n_splits=folds)","b4fad6ce":"models_rf = []\nrmses_rf = []\noof_rf = np.zeros(len(train_X))\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n    model_rf = rf(\n        n_estimators=50,\n        random_state=1234\n    )\n    model_rf.fit(X_train, y_train)\n    y_pred = model_rf.predict(X_valid)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)\n    models_rf.append(model_rf)\n    rmses_rf.append(tmp_rmse)\n    oof_rf[val_index] = y_pred","4468bf71":"sum(rmses_rf)\/len(rmses_rf)","cf7293f5":"test_X = test_df_le.drop([\"SalePrice\",\"Id\"], axis=1)","69633ae9":"preds_rf = []\nfor model in models_rf:\n    pred = model.predict(test_X)\n    preds_rf.append(pred)","c0dabba8":"preds_array_rf = np.array(preds_rf)\npreds_mean_rf = np.mean(preds_array_rf, axis=0)\npreds_exp_rf = np.exp(preds_mean_rf)\nsubmission[\"SalePrice\"] = preds_exp_rf","143f2893":"submission.to_csv(\".\/houseprices_submit02.csv\",index=False)","c2b6ef35":"import xgboost as xgb","81decab3":"categories = train_X.columns[train_X.dtypes == \"category\"]","cd651cf4":"for col in categories:\n    train_X[col] = train_X[col].astype(\"int8\")\n    test_X[col] = test_X[col].astype(\"int8\")","6c0a529c":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_Y, test_size=0.2, random_state=1234, shuffle=False,  stratify=None)","8bac0ceb":"def objective(trial):\n    xgb_params = {\n    \"learning_rate\":0.05,\n    \"seed\":1234,        \n    \"max_depth\":trial.suggest_int(\"max_depth\",3,16),\n    \"colsample_bytree\":trial.suggest_uniform(\"colsample_bytree\",0.2,0.9),\n    \"sublsample\":trial.suggest_uniform(\"sublsample\",0.2,0.9),\n    }\n    xgb_train = xgb.DMatrix(X_train, label=y_train)\n    xgb_eval = xgb.DMatrix(X_valid, label=y_valid)\n    evals = [(xgb_train, \"train\"), (xgb_eval, \"eval\")]\n    model_xgb = xgb.train(xgb_params, xgb_train,\n    evals=evals,\n    num_boost_round=1000,\n    early_stopping_rounds=20,\n    verbose_eval=10,)\n    y_pred = model_xgb.predict(xgb_eval)\n    score = np.sqrt(mean_squared_error(y_valid, y_pred))\n    return score","8e5c8837":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=50)\nstudy.best_params","c0d74f2a":"xgb_params = {\n\"learning_rate\":0.05,\n\"seed\":1234,\n\"max_depth\": 6,\n\"colsample_bytree\": 0.330432640328732,\n\"sublsample\": 0.7158427239902707\n}","e22ae945":"models_xgb = []\nrmses_xgb = []\noof_xgb = np.zeros(len(train_X))\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n    xgb_train = xgb.DMatrix(X_train, label=y_train)\n    xgb_eval = xgb.DMatrix(X_valid, label=y_valid)\n    evals = [(xgb_train, \"train\"), (xgb_eval, \"eval\")]\n    model_xgb = xgb.train(xgb_params, xgb_train,\n    evals=evals,\n    num_boost_round=1000,\n    early_stopping_rounds=20,\n    verbose_eval=20,)\n    y_pred = model_xgb.predict(xgb_eval)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)\n    models_xgb.append(model_xgb)\n    rmses_xgb.append(tmp_rmse)\n    oof_xgb[val_index] = y_pred","5b1c5e2a":"sum(rmses_xgb)\/len(rmses_xgb)","285e5926":"xgb_test = xgb.DMatrix(test_X)","7ca34a1c":"preds_xgb = []\nfor model in models_xgb:\n    pred = model.predict(xgb_test)\n    preds_xgb.append(pred)","8216da6e":"preds_array_xgb= np.array(preds_xgb)\npreds_mean_xgb = np.mean(preds_array_xgb, axis=0)\npreds_exp_xgb = np.exp(preds_mean_xgb)\nsubmission[\"SalePrice\"] = preds_exp_xgb","a9062de0":"submission.to_csv(\".\/houseprices_submit03.csv\",index=False)","7f4f1926":"preds_ans = preds_exp_xgb * 0.5 + preds_exp * 0.5","9105a9c4":"submission[\"SalePrice\"] = preds_ans","9c80205c":"submission.to_csv(\".\/houseprices_submit04.csv\",index=False)","6e636be2":"train_df_le_dn = train_df_le.dropna()","bf8d3629":"train_df_le_dn","1dd5068b":"from sklearn import preprocessing","95a11b5f":"train_scaled = preprocessing.scale(train_df_le_dn.drop([\"Id\"],axis=1))","915b7cbe":"train_scaled","070a6e0d":"train_scaled_df = pd.DataFrame(train_scaled)\ntrain_scaled_df.columns = train_df_le_dn.drop([\"Id\"],axis=1).columns","e179d25b":"train_scaled_df","0bddf365":"from sklearn.cluster import KMeans","243981a5":"np.random.seed(1234)","f7ee0c40":"house_cluster = KMeans(n_clusters=4).fit_predict(train_scaled)","3f3aa48f":"train_scaled_df[\"km_cluster\"] = house_cluster","258fdc05":"train_scaled_df[\"km_cluster\"].value_counts()","07535f2c":"cluster_mean = train_scaled_df[[\"km_cluster\",\"SalePrice\",\"TotalSF\",\"OverallQual\",\"Age\",\"Total_Bathrooms\",\"YearRemodAdd\",\"GarageArea\",\n                                \"MSZoning\",\"OverallCond\",\"KitchenQual\",\"FireplaceQu\"]].groupby(\"km_cluster\").mean().reset_index()","f17994cf":"cluster_mean = cluster_mean.T","2342ba06":"cluster_mean","8ebc3b34":"cluster_mean[1:].plot(figsize=(12,10), kind=\"barh\" , subplots=True, layout=(1, 4) , sharey=True)","a9befe80":"from sklearn.decomposition import PCA","c2a195f1":"pca = PCA(n_components=2)\nhouse_pca = pca.fit(train_scaled).transform(train_scaled)","bd5aa580":"house_pca","6e5cfa14":"house_pca_df = pd.DataFrame(house_pca)\nhouse_pca_df.columns = [\"pca1\",\"pca2\"]","33b05c69":"train_scaled_df = pd.concat([train_scaled_df, house_pca_df], axis=1)","31e3aba0":"train_scaled_df","263a6ef9":"my_colors = plt.rcParams['axes.prop_cycle'].by_key()['color']","e27093a5":"for cl in train_scaled_df['km_cluster'].unique():\n    plt.scatter(train_scaled_df.loc[train_scaled_df[\"km_cluster\"] == cl ,'pca1'], train_scaled_df.loc[train_scaled_df[\"km_cluster\"] == cl ,'pca2'], label=cl, c=my_colors[cl], alpha=0.6)\nplt.legend()\nplt.show()","9be26b2d":"pca_comp_df = pd.DataFrame(pca.components_,columns=train_scaled_df.drop([\"km_cluster\",\"pca1\",\"pca2\"],axis=1).columns).T\npca_comp_df.columns = [\"pca1\",\"pca2\"]","ee0e7082":"pca_comp_df","160ce3a0":"train_df_le['SalePrice'].plot.hist(bins=20)","5d652455":"train_df_le['SalePrice'].describe()","e0158ac4":"train_df['SalePrice'].quantile(0.9)","f201bb84":"train_df_le.loc[train_df[\"SalePrice\"] >= 278000, \"high_class\"] = 1","4374b5fe":"train_df_le[\"high_class\"] = train_df_le[\"high_class\"].fillna(0)","6037810e":"train_df_le.head()","2158729e":"!pip install pydotplus","e33f4920":"from sklearn import tree\nimport pydotplus\nfrom six import StringIO","0dc151a1":"tree_x = train_df_le[[\"TotalSF\",\"OverallQual\",\"Age\",\"GrLivArea\",\"GarageCars\",\"Total_Bathrooms\",\"GarageType\",\n\"YearRemodAdd\",\"GarageArea\",\"CentralAir\",\"MSZoning\",\"OverallCond\",\"KitchenQual\",\"FireplaceQu\",\"1stFlrSF\"]]\ntree_y = train_df_le[[\"high_class\"]]","0750312e":"clf = tree.DecisionTreeClassifier(max_depth=4)\nclf = clf.fit(tree_x, tree_y)","9989e63a":"dot_data = StringIO()\ntree.export_graphviz(clf, out_file=dot_data,feature_names=tree_x.columns)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())","21ac351d":"from IPython.display import Image\nImage(graph.create_png())","cb92ad66":"#### \u5916\u308c\u5024\u3092\u542b\u3080\u5909\u6570\u306e\u5206\u5e03\u3092\u78ba\u8a8d","1bedb90b":"#### \u30cf\u30a4\u30af\u30e9\u30b9\u306a\u5bb6\u3092\u8868\u3059\u5909\u6570\u3092\u8ffd\u52a0","d3b864e3":"### \u7d71\u8a08\u624b\u6cd5\u306b\u3088\u308b\u5bb6\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790","c431c287":"### \u5916\u308c\u5024\u306e\u9664\u5916","caf93009":"#### \u6642\u9593\u95a2\u9023\u306e\u7279\u5fb4\u91cf\u751f\u6210","1fda0058":"#### \u76ee\u7684\u5909\u6570\u3092\u5bfe\u6570\u5316\u3057\u305f\u3053\u3068\u3067\u306e\u4e88\u6e2c\u7cbe\u5ea6\u78ba\u8a8d","e12e16c4":"#### k-means\u3067\u30af\u30e9\u30b9\u30bf\u5206\u6790","24d39058":"#### \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7d50\u5408","79f8e868":"#### \u76ee\u7684\u5909\u6570\u3092\u78ba\u8a8d","744f5db6":"## 5. Outlier","c3e3b11f":"## 8. Ensemble","1eeef221":"#### \u591a\u6570\u306e\u30c7\u30fc\u30bf\u304c0\u3067\u3042\u308b\u5909\u6570\u3092\u78ba\u8a8d","51824426":"#### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6570\u5024\u306b\u5909\u63db","cc3833db":"#### \u518d\u3073\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u623b\u3059","d6840986":"### \u8aac\u660e\u5909\u6570\u306e\u524d\u51e6\u7406\/\u6b20\u640d\u5024\u306e\u78ba\u8a8d","9b34ee98":"## 1. Setting & Data Import","47be5eed":"#### optuna\u3067\u306e\u6700\u9069\u5316","5965c762":"#### \u6b20\u640d\u5024\u306e\u6570\u306e\u78ba\u8a8d","40b90c74":"#### \u4fa1\u683c\u306e\u5206\u5e03\u3092\u78ba\u8a8d","65ca7f78":"#### \u5404\u5909\u6570\u3054\u3068\u306b\u5e73\u5747\u304b\u3089\u6a19\u6e96\u504f\u5dee\u00b13\u500d\u4ee5\u4e0a\u306e\u5024\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8","667f608e":"### \u69d8\u3005\u306a\u6a5f\u68b0\u5b66\u7fd2\u624b\u6cd5\u306b\u3088\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb","78330038":"#### \u91cd\u8981\u5ea6\u306e\u9ad8\u3044\u5909\u6570\u306b\u7d5e\u3063\u3066\u6c7a\u5b9a\u6728\u3092\u53ef\u8996\u5316","75a15578":"#### \u30af\u30e9\u30b9\u30bf\u3054\u3068\u306e\u7279\u5fb4\u3092\u53ef\u8996\u5316","21c85672":"#### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u5b66\u7fd2","771f7a9c":"#### XGBoost\u3068LightGBM\u306e\u7d50\u679c\u3092\u7d44\u307f\u5408\u308f\u305b\u308b","4588f82c":"## 6. Feature Engineering","39a3ee3a":"#### XGboost\u3067\u5b66\u7fd2","00275c33":"#### \u6b20\u640d\u5024\u306e\u3042\u308b\u884c\u3092\u524a\u9664","b84c59c1":"### \u76ee\u7684\u5909\u6570\u306e\u524d\u51e6\u7406\/\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u78ba\u8a8d","3680b483":"#### \u4e3b\u6210\u5206\u5206\u6790\u3092\u884c\u3046","60dec000":"#### \u5404\u5909\u6570\u306e\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d","57e48dac":"## 3. Preprocessing(object variable)","d02449ef":"### \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","52d283af":"### \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u4f5c\u6210","bb9681a5":"## 2. Make baseline","46a1c7ad":"### \u30e2\u30c7\u30eb\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d","57604f0f":"#### \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u7b97\u51fa","31e2e544":"## 7. Hyper Parameter Optimization","473e32ac":"### \u30cf\u30a4\u30a8\u30f3\u30c9\u306a\u5bb6\u306e\u7279\u5fb4\u3092\u53ef\u8996\u5316\u3059\u308b","4cc5f2f0":"#### \u30af\u30e9\u30b9\u30bf\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u3092\u78ba\u8a8d","c4333648":"#### \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","9c91cdbf":"#### \u3042\u308b\u7279\u5b9a\u306e\u5024\u3057\u304b\u3068\u3089\u306a\u3044\u5909\u6570\u3092\u78ba\u8a8d","f9885e19":"#### \u5909\u6570\u304b\u3089\u6570\u5024\u30c7\u30fc\u30bf(\u6bd4\u4f8b\u5c3a\u5ea6)\u3092\u62bd\u51fa","adbce783":"#### LightGBM\u3067\u4e88\u6e2c","81ce84e1":"## Appendix1. Cluster analysis","063e2d70":"### \u30c7\u30fc\u30bf\u5206\u6790\u306e\u6e96\u5099","43467ee1":"#### \u30c7\u30fc\u30bf\u306e\u578b\u3092\u78ba\u8a8d","ac26fa19":"## Appendix2. High-end residential","4f6dd268":"#### \u5e83\u3055\u95a2\u9023\u306e\u7279\u5fb4\u91cf\u751f\u6210","a21dfebe":"#### \u76ee\u7684\u5909\u6570\u306e\u5bfe\u6570\u5316","a8dfd6f2":"#### \u76ee\u7684\u5909\u6570\u306e\u5206\u5e03","9628ed40":"#### \u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316","0c5aa43c":"## 4. Preproccesing(Explanatory variable)","9bed5c3c":"### \u8aac\u660e\u5909\u6570\u306e\u78ba\u8a8d\/\u7279\u5fb4\u91cf\u751f\u6210","05465c53":"#### \u6b20\u640d\u5024\u306e\u591a\u3044\u9ad8\u7d1a\u4f4f\u5b85\u8a2d\u5099\u306b\u95a2\u3059\u308b\u5909\u6570\u3092\u307e\u3068\u3081\u308b"}}