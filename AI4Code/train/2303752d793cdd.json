{"cell_type":{"c7d012dd":"code","dd8e88ce":"code","af8bb885":"code","f8cc074a":"code","92249644":"code","450184d4":"code","9fb61778":"code","062871c4":"code","32beccc4":"code","305d4694":"code","3e692121":"code","32f88c94":"code","2ed0848b":"code","f5403fc1":"code","54aad952":"code","84d0e1a4":"code","4efb752b":"code","0e85c334":"code","c1bd41c6":"code","582123dc":"code","5b53eede":"code","fa7e4698":"code","29fcc4c2":"code","90c31d3c":"code","4aebf18b":"code","88b03e0f":"code","a271d14c":"code","8bd6c8e7":"code","01885a92":"code","7a62b9c8":"code","5fa99976":"code","37c8f9df":"code","f2cabe63":"code","4cebabe8":"code","2e483f6e":"code","99fd03a4":"code","779e4b6a":"code","3eaa353c":"markdown","2038723d":"markdown","f8d7723d":"markdown","652d8043":"markdown","e74bdc6a":"markdown","dbce7163":"markdown","53bb39fe":"markdown"},"source":{"c7d012dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot\n\n#Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd8e88ce":"train = pd.read_csv('..\/input\/widsdatathon2022\/train.csv', encoding='utf8')\npd.set_option('display.max_columns', None)\ntrain.head()","af8bb885":"train.isnull().sum()","f8cc074a":"#Correlation map to see how features are correlated with each other and with target\ncorrmat = train.corr(method='kendall')\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True);","92249644":"train[\"january_min_temp\"].plot(figsize=(20,4));","450184d4":"train[\"june_max_temp\"].plot(figsize=(20,4), color='r');","9fb61778":"fig = px.scatter(train, x=\"january_min_temp\", y=\"floor_area\",color_discrete_sequence=['#4257f5'], title=\"Weather influence on energy consumption\/area\" )\nfig.show()","062871c4":"train[train.february_min_temp > 25].info()","32beccc4":"#Code by Clayton Miller https:\/\/www.kaggle.com\/claytonmiller\/getting-started-with-the-bdg2\n\ndef make_color_division(x):\n  if x < 25:\n    return \"Heating\"\n  else:\n    return \"NoHeating\"","305d4694":"train['HeatingStatus'] = train.february_min_temp.apply(lambda x: make_color_division(x))","3e692121":"g = sns.lmplot(x=\"february_min_temp\", y=\"floor_area\", hue=\"HeatingStatus\",\n               truncate=True, data=train)\n\ng.set_axis_labels(\"February Air Temperature\", \"Average Hourly kWH\");","32f88c94":"#Code by Clayton Miller https:\/\/www.kaggle.com\/claytonmiller\/getting-started-with-the-bdg2\n\nfor col in train.columns:\n    if(train[col].dtype == 'O'):\n        data = train[col].fillna('NaN')\n        unique, counts = np.unique(data, return_counts=True)\n        if(len(unique) < 20):  \n            size = [16,4]\n            if(len(unique)==2): \n                size = [16,1]\n            \n            plt.figure(figsize=size)\n            plt.title(col)\n            plt.barh(unique, counts)\n            plt.grid(axis='x')\n            plt.show()","2ed0848b":"#Code by Clayton Miller https:\/\/www.kaggle.com\/claytonmiller\/getting-started-with-the-bdg2\n\nfor col in train.columns:\n    data = train[col]\n    if(data.dtype == 'float64'):\n        data = train[col]\n        plt.figure(figsize=[16,4])\n        plt.plot(data)\n        plt.title(col)\n        plt.grid()\n        plt.show() ","f5403fc1":"# Lets first handle numerical features with nan value\nnumerical_nan = [feature for feature in train.columns if train[feature].isna().sum()>1 and train[feature].dtypes!='O']\nnumerical_nan","54aad952":"train[numerical_nan].isna().sum()","84d0e1a4":"## Replacing the numerical Missing Values\n\nfor feature in numerical_nan:\n    ## We will replace by using median since there are outliers\n    median_value=train[feature].median()\n    \n    train[feature].fillna(median_value,inplace=True)\n    \ntrain[numerical_nan].isnull().sum()","4efb752b":"from sklearn.preprocessing import LabelEncoder\n\n#fill in mean for floats\nfor c in train.columns:\n    if train[c].dtype=='float16' or  train[c].dtype=='float32' or  train[c].dtype=='float64':\n        train[c].fillna(train[c].mean())\n\n#fill in -999 for categoricals\ntrain = train.fillna(-999)\n# Label Encoding\nfor f in train.columns:\n    if train[f].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(train[f].values))\n        train[f] = lbl.transform(list(train[f].values))\n        \nprint('Labelling done.')","0e85c334":"#imports \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import cross_validate","c1bd41c6":"X = train[\"energy_star_rating\"]  # numpy array\ny = train[\"site_eui\"] # numpy array","582123dc":"#Code by Julie Tian  https:\/\/www.kaggle.com\/julietian\/predicting-steam-usage-per-location\n\nmodel = LinearRegression() #instantiate model\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2) #20% for testing \n\n#required reshaping to fit and predict for the model\nX_train_reshape = X_train.values.reshape(-1,1)\nX_test_reshape = X_test.values.reshape(-1,1)","5b53eede":"#proper shape for modelling and predicting \nprint(X_train_reshape.shape)\nprint(y_train.shape)\n\nprint(X_test_reshape.shape)\nprint(y_test.shape)","fa7e4698":"model.fit(X_train_reshape, y_train)","29fcc4c2":"predictions = model.predict(X_test_reshape)","90c31d3c":"for y, y_pred in list(zip(y_test, predictions))[:5]:\n    print(\"Real value: {:.3f} Estimated value: {:.5f}\".format(y, y_pred))","4aebf18b":"#Code by Julie Tian  https:\/\/www.kaggle.com\/julietian\/predicting-steam-usage-per-location\n\nrsq = metrics.r2_score(y_test, predictions)\nprint(f\"the R-squaared score is {rsq}\")\n\nmse = metrics.mean_squared_error(y_test, predictions)\nprint(f\"the Mean Absolute Error is {mse}\")\n\nrmse = np.sqrt(metrics.mean_squared_error(y_test, predictions))\nprint(f\"the Root Mean Squared Error is {rmse}\")","88b03e0f":"results = {} #to store results ","a271d14c":"#Code by Julie Tian  https:\/\/www.kaggle.com\/julietian\/predicting-steam-usage-per-location\n\ndef evaluate_model(estimator, X, y):\n    cv_results = cross_validate(estimator,\n                    X=X,\n                    y=y,\n                    scoring=\"neg_mean_squared_error\",\n                          n_jobs=-1, cv=50,\n                     return_train_score=True)\n    return pd.DataFrame(cv_results).abs().mean().to_dict()","8bd6c8e7":"linreg  = LinearRegression()\ndtree   = DecisionTreeRegressor()\nelastic = ElasticNet()\nlasso   = Lasso()\nridge   = Ridge()","01885a92":"#Code by Julie Tian  https:\/\/www.kaggle.com\/julietian\/predicting-steam-usage-per-location\n\nresults[\"linear reg\"] = evaluate_model(linreg, X_train_reshape, y_train)\nresults[\"tree\"] = evaluate_model(dtree, X_train_reshape, y_train)\nresults[\"elasticnet\"] = evaluate_model(elastic, X_train_reshape, y_train)\nresults[\"lasso\"] = evaluate_model(lasso, X_train_reshape, y_train)\nresults[\"ridge\"] = evaluate_model(ridge, X_train_reshape, y_train)\n\npd.DataFrame.from_dict(results).T","7a62b9c8":"from scipy.stats import norm\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller","5fa99976":"sns.scatterplot(train[\"year_built\"],train[\"energy_star_rating\"] );","37c8f9df":"train_model_data = train[[\"energy_star_rating\"]]\ntrain = train_model_data.iloc[0:(len(train_model_data)-53)].copy()\ntest = train_model_data.iloc[len(train):(len(train_model_data) -1)].copy()","f2cabe63":"train.shape","4cebabe8":"test.shape","2e483f6e":"ax = train.plot(figsize=(25,4))\ntest.plot(ax=ax);","99fd03a4":"sm.graphics.tsa.plot_pacf(train,lags=30)\nplt.show()","779e4b6a":"sm.graphics.tsa.plot_acf(train,lags=50)\nplt.show()","3eaa353c":"#Examining the Categorical Variables","2038723d":"#Acknowledgments\n\nClayton Miller https:\/\/www.kaggle.com\/claytonmiller\/getting-started-with-the-bdg2\n\nhttps:\/\/www.kaggle.com\/claytonmiller\/buildingdatagenomeproject2\n\nhttps:\/\/www.kaggle.com\/claytonmiller\/weather-influence-on-energy-consumption-example\n\nJulie Tian https:\/\/www.kaggle.com\/julietian\/predicting-steam-usage-per-location","f8d7723d":"#Not good at all, as usual. HeatingStatus??? Where did I make it up?","652d8043":"![](https:\/\/www.buildinggreen.com\/sites\/default\/files\/articles\/ASH_ABELCertificate.jpg)https:\/\/www.buildinggreen.com\/newsbrief\/ashrae-unveils-building-energy-label","e74bdc6a":"I'd rather stop here since the results weren't good.  ","dbce7163":"#Examining the Numerical Variables","53bb39fe":"#Weather Influence on Energy Consumption"}}