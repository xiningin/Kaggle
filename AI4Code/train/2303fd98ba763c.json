{"cell_type":{"beebd23d":"code","35efff17":"code","073dd139":"code","87c0dedb":"code","337395de":"code","1344816f":"code","960d95e0":"code","e142a34f":"code","53a2f073":"code","bf098dfa":"code","669944d9":"code","9ed88007":"code","17e7fa29":"code","91d45b8d":"code","f64cd487":"code","97d8ab11":"code","ef773c58":"code","a2df37c1":"code","2d4685eb":"code","d8cca379":"code","6bcaf457":"code","936ed0de":"code","fea02f81":"code","628b746e":"code","9479f63e":"code","5e0d21fb":"code","e93796ae":"code","e827ee7c":"code","46b8a46a":"code","d28b8feb":"markdown","f85b8af3":"markdown","681051a3":"markdown","a8e719c7":"markdown","562b4fa8":"markdown","61f3cd30":"markdown","94341ddf":"markdown","dd9f26f9":"markdown","dbe2073a":"markdown","d8584ee7":"markdown","00966700":"markdown","ac49a6cd":"markdown","a506b827":"markdown","9c88297e":"markdown","975815df":"markdown","bb010663":"markdown","9a0ddf8f":"markdown"},"source":{"beebd23d":"import pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nfrom copy import copy\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go","35efff17":"# Read the stock data file\nstocks_df=pd.read_csv('..\/input\/stocks-data-for-capm\/stocks_dataset.csv')\nstocks_df","073dd139":"# Getting dataframe info\nstocks_df.info()","87c0dedb":"stocks_df.describe()","337395de":"# Function to normalize the prices based on the initial price\ndef normalize(df):\n  x=df.copy()\n  # the column index start from 0, so col 1 indicates the FB\n  for i in x.columns[1:]:\n    x[i]=x[i]\/x[i][0]\n  return x","1344816f":"norm_stocks_df=normalize(stocks_df)\nnorm_stocks_df","960d95e0":"# Function to plot interactive plot\n# visualize both dataframes\ndef interactive_plot(df,title):\n  fig=px.line(title=title)\n  for i in df.columns[1:]:\n    fig.add_scatter(x=df['Date'],y=df[i],name=i)\n  fig.show()\n","e142a34f":"# Plot interactive chart\ninteractive_plot(stocks_df,'Prices')","53a2f073":"# Plot normalized interactive chart\ninteractive_plot(norm_stocks_df,'Prices')","bf098dfa":"stocks_df.head()","669944d9":"# Function to calculate the daily returns \ndef daily_return(df):\n  df_daily_return=df.copy()\n\n  for i in df.columns[1:]:\n    for j in range(1,len(df)):\n      df_daily_return[i][j]=((df[i][j]-df[i][j-1])\/df[i][j-1])*100  \n\n    df_daily_return[i][0]=0\n  return df_daily_return\n\n","9ed88007":"stocks_daily_return=daily_return(stocks_df)\nstocks_daily_return","17e7fa29":"# Select any stock, let's say Apple \nstocks_daily_return['TSLA']","91d45b8d":"# Select the S&P500 (Market)\nstocks_daily_return['sp500']","f64cd487":"# plot a scatter plot between the selected stock and the S&P500 (Market)\nstocks_daily_return.plot(kind='scatter',x='sp500',y='TSLA',color='blue')","97d8ab11":"# Fit a polynomial between the selected stock and the S&P500 (Poly with order = 1 is a straight line)\n\n# beta represents the slope of the line regression line (market return vs. stock return). \n# Beta is a measure of the volatility or systematic risk of a security or portfolio compared to the entire market (S&P500) \n# Beta is used in the CAPM and describes the relationship between systematic risk and expected return for assets \n\n# Beta = 1.0, this indicates that its price activity is strongly correlated with the market. \n# Beta < 1, indicates that the security is theoretically less volatile than the market (Ex: Utility stocks). If the stock is included, this will make the portfolio less risky compared to the same portfolio without the stock.\n# Beta > 1, indicates that the security's price is more volatile than the market. For instance, Tesla stock beta is 1.26 indicating that it's 26% more volatile than the market. \n# Tech stocks generally have higher betas than S&P500 but they also have excess returns\n# MGM is 65% more volatile than the S&P500!\n\n\nbeta, alpha = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return['TSLA'], 1) # order of polynomial =1\nprint('Beta for {} stock is = {} and alpha is = {}'.format('TSLA', beta, alpha))  ","ef773c58":"# Now let's plot the scatter plot and the straight line on one plot\nstocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = 'TSLA', color = 'blue')\n\n# Straight line equation with alpha and beta parameters \n# Straight line equation is y = beta * rm + alpha\nplt.plot(stocks_daily_return['sp500'], beta * stocks_daily_return['sp500'] + alpha, '-', color = 'r')\n","a2df37c1":"beta, alpha = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return['FB'], 1) # order of polynomial =1\nprint('Beta for {} stock is = {} and alpha is = {}'.format('FB', beta, alpha))  ","2d4685eb":"# Now let's plot the scatter plot and the straight line on one plot\nstocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = 'FB', color = 'blue')\n\n# Straight line equation with alpha and beta parameters \n# Straight line equation is y = beta * rm + alpha\nplt.plot(stocks_daily_return['sp500'], beta * stocks_daily_return['sp500'] + alpha, '-', color = 'r')","d8cca379":"beta","6bcaf457":"# Let's calculate the average daily rate of return for S&P500\nstocks_daily_return['sp500'].mean()","936ed0de":"# Let's calculate the annualized rate of return for S&P500 \n# Note that out of 365 days\/year, stock exchanges are closed for 104 days during weekend days (Saturday and Sunday) \n# Check your answers with: https:\/\/dqydj.com\/sp-500-return-calculator\/\nrm=stocks_daily_return ['sp500'].mean()*252\nrm","fea02f81":"# Assume risk free rate is zero\n# Also you can use the yield of a 10-years U.S. Government bond as a risk free rate\nrf=0\n# Calculate return for any security (APPL) using CAPM  \n\n#ER_TSLA= expected return for Tesla\nER_TSLA=rf+beta*(rm-rf)\nER_TSLA","628b746e":"# Let's create a placeholder for all betas and alphas (empty dictionaries)\nbeta = {}\nalpha = {}\n\n# Loop on every stock daily return\nfor i in stocks_daily_return.columns:\n\n  # Ignoring the date and S&P500 Columns \n  if i != 'Date' and i != 'sp500':\n    # plot a scatter plot between each individual stock and the S&P500 (Market)\n    stocks_daily_return.plot(kind = 'scatter', x = 'sp500', y = i, color = 'blue')\n    \n    # Fit a polynomial between each stock and the S&P500 (Poly with order = 1 is a straight line)\n    # a = intercept\n    # b = slope\n    b, a = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return[i], 1)\n    \n    plt.plot(stocks_daily_return['sp500'], b * stocks_daily_return['sp500'] + a, '-', color = 'r')\n    \n    beta[i] = b\n    \n    alpha[i] = a\n    \n    plt.show()","9479f63e":"# Let's view Beta for every stock \nbeta","5e0d21fb":"# plot it more interactive way\n# Explore some wierd points in the dataset: Tesla stock return was at 24% when the S&P500 return was -0.3%!\n\nfor i in stocks_daily_return.columns:\n  \n  if i != 'Date' and i != 'sp500':\n    \n    # Use plotly express to plot the scatter plot for every stock vs. the S&P500\n    fig = px.scatter(stocks_daily_return, x = 'sp500', y = i, title = i)\n\n    # Fit a straight line to the data and obtain beta and alpha\n    b, a = np.polyfit(stocks_daily_return['sp500'], stocks_daily_return[i], 1)\n    \n    # Plot the straight line \n    fig.add_scatter(x = stocks_daily_return['sp500'], y = b*stocks_daily_return['sp500'] + a)\n    fig.show()","e93796ae":"print('rm = ',rm)\nprint('rf = ',rf)","e827ee7c":"ER=[]\nER_name=[]\nfor i, j in beta.items():\n  beta_i=j\n  ER_i=rf+beta_i*(rm-rf)\n  ER.append(ER_i)\n  ER_name.append(i)\n","46b8a46a":"stock_expected_return=pd.DataFrame()\nstock_expected_return['Stock']=ER_name\nstock_expected_return['expected_return']=ER\nstock_expected_return","d28b8feb":"# Simplified Capital Asset Pricing Model for Stocks ","f85b8af3":"- Calculate Beta for FB Stock","681051a3":"# TASK #3: PERFORM DATA SCALING ","a8e719c7":"# TASK #6: CALCULATE BETA FOR TESLA STOCK","562b4fa8":"## Knowledge of CAPM\n* https:\/\/www.investopedia.com\/articles\/06\/capm.asp\n* https:\/\/en.wikipedia.org\/wiki\/Capital_asset_pricing_model\n* An example of CAPM Calculation (https:\/\/corporatefinanceinstitute.com\/resources\/knowledge\/finance\/what-is-capm-formula\/)\n\n![Example of CAPM Calculation](https:\/\/cdn.corporatefinanceinstitute.com\/assets\/capm-formula.png)","61f3cd30":"# TASK #2: IMPORT LIBRARIES\/DATASETS AND PERFORM EXPLORATORY DATA ANALYSIS","94341ddf":"Exploration #1: \n- What is the average price of Netflix?\n- What is the maximum price for S&P500 stock over the specified time period?","dd9f26f9":"# TASK #1: UNDERSTAND THE THEORY AND INTUITION BEHIND CAPITAL ASSET PRICING MODEL (CAPM) ","dbe2073a":"# TASK #4: PERFORM DATA VISUALIZATION","d8584ee7":"### Summary\nER_i = r_f + beta_i (r_m - r_f)\n* ER_i = expected return for this aasset to compensate the volatility\n* beta is calculated from the slope of plot data\n* r_m from (rm=stocks_daily_return ['sp500'].mean()*252)\n* r_f assume to be 0","00966700":"r_i = r_f + beta_i (r_m - r_f)\n\n* r_f : risk free asset return (US treasury bond) - it accounts for the time value of money \n* r_m  - r_f = risk premium (like S&P 500 index. 7-9%)\n* beta : reflects the volatility compare to the market (>1 =1 <1) e.g. 1.26 means the asset is 26% more volatile than the market\n* beta: measure of how much risk the investment will add to a portfolio that looks like the market\\\nIf a stock is riskier than the market, beta > 1\\\nIf a stock has a beta < 1, the formula assumes it will reduce the risk of a portfolio.\n* The goal of the CAPM formula is to:\n evaluate whether a stock is fairly valued when its risk and the time value of money are compared to its expected return.","ac49a6cd":"example \n\n\n1.   stock : AAPL\n2.   r_APPL = 13.7%\n3.   means investor should expect 13.7% return to compensate the risk they are taking\n\n\n\n\n","a506b827":"# TASK #8: CALCULATE BETA FOR ALL STOCKS","9c88297e":"r_i = r_f + beta_i (r_m - r_f)\n\n* beta is already calculated\n* r_m from data\n* r_f assume to be 0","975815df":"# TASK #7: APPLY THE CAPM FORMULA TO AN INDIVIDUAL STOCK ","bb010663":"# TASK #5: DEVELOP A FUNCTION TO CALCULATE DAILY RETURNS","9a0ddf8f":"r_i = r_f + beta_i (r_m - r_f)"}}