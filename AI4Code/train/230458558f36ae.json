{"cell_type":{"cbf3e365":"code","bee6110b":"code","d77a0acf":"code","0b31c56a":"code","20f35ee2":"code","57bdc4a6":"code","5648a72d":"code","51748930":"code","351faf66":"code","14be8300":"code","cac6d2ff":"code","c4d8d4c1":"code","612d49e0":"code","36191001":"code","2ecf64bf":"code","616de8e9":"code","32a94e7c":"code","ec788d93":"code","13912468":"code","1bca23fa":"code","a42a6835":"code","3048506f":"code","5b687930":"code","c66d45f3":"code","e025ed0a":"code","d450ac75":"code","7ee6f655":"code","82aa5d9e":"code","4a64994b":"code","3fa507ec":"code","fa216f4b":"code","22abc852":"code","af98bc56":"code","e722e0e1":"code","34eb54f7":"code","2bb5521f":"code","65d257d5":"code","c3380d4c":"code","a2a8e1c5":"code","cadb4516":"code","19abb382":"code","a13ec934":"code","7ad9d3d1":"code","dd070e7c":"code","a1947de5":"code","608e5c97":"code","2534a8f2":"code","7679bd17":"code","d169becc":"code","de2c0783":"code","b768275b":"code","71a318fd":"code","d7005a68":"code","a47a433a":"code","5d94365b":"code","b2abf2d0":"code","60feb9fb":"code","194158ab":"code","2e0c371a":"code","ebf37665":"code","bca54448":"code","67279eed":"code","09887d5f":"code","5945ab52":"code","28af6080":"code","7e886dae":"code","35187a7f":"code","e94c79fc":"code","3110ad45":"code","34742f49":"code","60341bbb":"code","f8e0406c":"code","feea158b":"code","063eec58":"markdown","0ddd3f66":"markdown","7b8039d9":"markdown","cbb5548e":"markdown","4bbb5a7b":"markdown","13aeb759":"markdown","1b899df5":"markdown","7cd92b34":"markdown","e0297dd9":"markdown","6a1508ae":"markdown","5c00058b":"markdown","2050d44d":"markdown","8a0e1edb":"markdown","ad7f6955":"markdown","72f766ef":"markdown","a3200f54":"markdown","3cae9b0d":"markdown","341bceab":"markdown","9b66926a":"markdown","87baaa71":"markdown","9e7ab05a":"markdown","7e287558":"markdown","1241eb06":"markdown","8c7183c6":"markdown","681d9cf0":"markdown","c71e1474":"markdown","f0fb7a10":"markdown","c0d5155b":"markdown","4e8941f2":"markdown","032d22e6":"markdown","0908523f":"markdown","312a3423":"markdown","7044f0a2":"markdown","8455507a":"markdown"},"source":{"cbf3e365":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib\nimport scipy.stats\nimport datetime\nimport plotly.graph_objs as go\nfrom pandas import DataFrame\nfrom pandas import concat\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime\nfrom datetime import date\n\n\nfrom tensorflow.keras.models import Sequential\n\nfrom tensorflow.keras.layers import Dense\n\nfrom tensorflow.keras.layers import LSTM\n\nfrom tensorflow.keras.layers import Dropout\n\n\n%matplotlib inline","bee6110b":"df = pd.read_csv(\"https:\/\/covid.ourworldindata.org\/data\/owid-covid-data.csv\",parse_dates=['date']).replace(np.nan,0)\n                                       \ndf['date'] = pd.to_datetime(df['date'])\n\ndf.set_index('date', inplace=True)\n\n","d77a0acf":"today = datetime.today().strftime('%Y-%m-%d')\n","0b31c56a":"df_today=df[ df.index=='2021-02-5']","20f35ee2":"df_today","57bdc4a6":"df_top_newcases=df_today.sort_values(by='new_cases',ascending = False)\n","5648a72d":"df2=df.reset_index()\n\n\n\ntotalcases = go.Figure(go.Bar(\n            x=df2.loc[df2['location']=='World']['date'],\n            y=df2.loc[df2['location']=='World']['total_cases'],\n            ))\n\n\ntotalcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=600,\ntitle=\"Total cases - World\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Toal cases\",)\n\ntotalcases.show()","51748930":"\nnewcases = go.Figure(go.Bar(\n            x=df2.loc[df2['location']=='World']['date'],\n            y=df2.loc[df2['location']=='World']['new_cases_smoothed'],\n            ))\n\n\nnewcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=600,\ntitle=\"New cases - World\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"New cases\",)\n\nnewcases.show()","351faf66":"\ntotaldeaths = go.Figure(go.Bar(\n            x=df2.loc[df2['location']=='World']['date'],\n            y=df2.loc[df2['location']=='World']['total_deaths'],\n            ))\n\n\ntotaldeaths.update_layout(\n    autosize=False,\n    width=1500,\n    height=600,\ntitle=\"Total deaths - World\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Toal deaths\",)\n\ntotaldeaths.show()","14be8300":"location_list = df_top_newcases.head(21)['location'].tolist() \n\n\ndf_top_newcases=df2[df2['location'].isin(location_list)]\n\ndf3=df_top_newcases.loc[df_top_newcases['location']!='World']\n\nfig_top_newcases=px.line(df3, x='date', y='new_cases_smoothed', color='location')\nfig_top_newcases.show()\n\n","cac6d2ff":"\n\n\ndf4=df.sort_values(by='date',ascending = True).reset_index().query('continent!=0' )\nfig_newcases = px.choropleth(df4, locations=\"iso_code\",\n                    color=\"new_cases\", \n                    hover_name=\"location\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                     animation_frame =df4['date'].astype(str)\n)\nfig_newcases.show()\n\n","c4d8d4c1":"\nfig_deaths= px.choropleth(df4, locations=\"iso_code\",\n                    color=\"total_deaths\", \n                    hover_name=\"location\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                     animation_frame =df4['date'].astype(str)\n)\nfig_deaths.show()\n","612d49e0":"fig_newdeaths= px.choropleth(df4, locations=\"iso_code\",\n                    color=\"new_deaths\", \n                    hover_name=\"location\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                     animation_frame =df4['date'].astype(str)\n)\nfig_deaths.show()\n","36191001":"\ndf5=df_today[(df_today.new_cases>=3000 )& (df_today.location!='World')]\ndf5=df5.sort_values(by='new_cases',ascending = True)\nfigbar_newcases = go.Figure(go.Bar(\n            x=df5['new_cases'],\n            y=df5['location'],\n            orientation='h'))\n\n\nfigbar_newcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=600, title=\"New cases >3000\")\n\nfigbar_newcases.show()\n\n","2ecf64bf":"df6=df_today[(df_today['new_cases']>=1000) & (df_today['new_cases']<=3000)]\n\nfigbar_newcases = go.Figure(go.Bar(\n            x=df6.sort_values(by='new_cases',ascending = True)['new_cases'],\n            y=df6['location'],\n            orientation='h'))\n\n\nfigbar_newcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=600, title=\"1000<New cases <3000\")\n\nfigbar_newcases.show()\n","616de8e9":"df7=df_today[(df_today['new_cases']!=0) & (df_today['new_cases']<=1000)]\n\n\nfigbar_newcases = go.Figure(go.Bar(\n            x=df7.sort_values(by='new_cases',ascending = True)['new_cases'],\n            y=df7['location'],\n            orientation='h'\n))\n\n\nfigbar_newcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=2000,title=\"1000>New cases >0\"\n)\n\nfigbar_newcases.show()\n","32a94e7c":"df81=df_today[(df_today['total_cases']!=0) & (df_today['total_cases']>=1000000)& (df_today.location!='World')]\n\nfigbar_totalcases = go.Figure(go.Bar(\n            x=df81.sort_values(by='total_cases',ascending = True)['total_cases'],\n            y=df81['location'],\n            orientation='h'))\n\n\nfigbar_totalcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=500,title=\"Total cases >1000000\")\n\nfigbar_totalcases.show()","ec788d93":"df82=df_today[(df_today['total_cases']!=0) & (df_today['total_cases']<=1000000) & (df_today['total_cases']>=100000) ]\n\nfigbar_totalcases = go.Figure(go.Bar(\n            x=df82.sort_values(by='total_cases',ascending = True)['total_cases'],\n            y=df82['location'],\n            orientation='h'))\n\n\nfigbar_totalcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=1200, title=\"1000000>Total cases >10000\")\n\nfigbar_totalcases.show()","13912468":"df83=df_today[(df_today['total_cases']!=0) & (df_today['total_cases']<=100000)& (df_today['total_cases']>=1000) ]\n\n\nfigbar_totalcases = go.Figure(go.Bar(\n            x=df83.sort_values(by='total_cases',ascending = True)['total_cases'],\n            y=df83['location'],\n            orientation='h'))\n\n\nfigbar_totalcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=1500,title=\"100000>Total cases >1000\")\n\nfigbar_totalcases.show()","1bca23fa":"df84=df_today[(df_today['total_cases']!=0) & (df_today['total_cases']<=1000) ]\nfigbar_totalcases = go.Figure(go.Bar(\n            x=df84.sort_values(by='total_cases',ascending = True)['total_cases'],\n            y=df84['location'],\n            orientation='h'))\n\n\nfigbar_totalcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=600,title=\"Total cases <1000\")\n\nfigbar_totalcases.show()","a42a6835":"df_vaccine=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations.csv\").replace(np.nan,0)\ndf_vaccine['date'] = pd.to_datetime(df_vaccine['date'])\n\n","3048506f":"df_vaccine","5b687930":"df_vaccine[df_vaccine.index=='2021-01-16']","c66d45f3":"df_vaccine1=df_vaccine[df_vaccine['people_vaccinated']!=0]","e025ed0a":"df_vaccine_today=(df_vaccine1[ df_vaccine1['date']=='2021-01-24'])\n\n\nvaccine = go.Figure(go.Bar(\n            x=df_vaccine_today.sort_values(by='people_vaccinated',ascending = False)['people_vaccinated'],\n            y=df_vaccine_today['location'],\n            orientation='h',\n))\n\n\nvaccine.update_layout(\n    autosize=False,\n    width=1500,\n    height=1500,\ntitle=\"Vaccinations\",\n    xaxis_title=\"Number of vaccinated\",\n    yaxis_title=\"Location\",\nyaxis=dict(autorange=\"reversed\"))\n\nvaccine.show()","d450ac75":"df_vaccine_today=(df_vaccine1[ df_vaccine1['date']=='2021-01-24'])\n\n\ndf4=df_vaccine_today.sort_values(by='daily_vaccinations',ascending = False)\nvaccine = go.Figure(go.Bar(\n            x=df4['daily_vaccinations'],\n            y=df4['location'],\n            orientation='h',\n))\n\n\nvaccine.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Vaccinations per day\",\n    xaxis_title=\"Number of vaccination per day\",\n    yaxis_title=\"Location\",\n    yaxis=dict(autorange=\"reversed\")\n)\n\nvaccine.show()","7ee6f655":"df_vaccine2=df_vaccine.sort_values(by='date',ascending = True).reset_index()\nfig_vaccine= px.choropleth(df_vaccine2, locations=\"iso_code\",\n                    color=\"people_vaccinated\", \n                    hover_name=\"location\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                     animation_frame =df_vaccine['date'].astype(str)\n)\nfig_vaccine.show()\n##erdo this one the dates are not corectly ordered\n","82aa5d9e":"x=df_vaccine.loc[df_vaccine['location']=='India']['daily_vaccinations']\n","4a64994b":"dfind= df.set_index('location').loc['India']","3fa507ec":"x1=np.array(dfind['new_deaths'].iloc[60:])","fa216f4b":"x2=np.array(dfind['new_cases'].iloc[60:])","22abc852":"scipy.stats.spearmanr(x1, x2)","af98bc56":"df['pct_newcases']=(df['new_cases'].pct_change())","e722e0e1":"df_1=df.sort_values(by='date',ascending = True).iloc[40:]","34eb54f7":"df_pctIND=df_1.reset_index().set_index('location').loc['India']","2bb5521f":"df_pctIND1=df_pctIND.set_index('date').loc['2020-03-03':'2020-04-30']","65d257d5":"\n\npct_newcases = go.Figure(go.Bar(\n            x=df_pctIND1.reset_index()['date'],\n            y=df_pctIND1.reset_index()['pct_newcases']*100,\n            \n))\n\n\npct_newcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in India on and before 2020-04-30\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcases.show()","c3380d4c":"df_pctIND2=df_pctIND.set_index('date').loc['2020-04-30':]","a2a8e1c5":"pct_newcases = go.Figure(go.Bar(\n            x=df_pctIND2.reset_index()['date'],\n            y=df_pctIND2.reset_index()['pct_newcases']*100,\n            \n))\n\n\npct_newcases.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in India on and after 2020-05-01\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcases.show()","cadb4516":"df_pctUSA=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['USA']","19abb382":"pct_newcasesUSA = go.Figure(go.Bar(\n            x=df_pctUSA['date'].loc['2020-01-28':],\n            y=df_pctUSA['pct_newcases']*100,\n            \n))\n\n\npct_newcasesUSA.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in USA\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesUSA.show()","a13ec934":"df_pctUK=df_1.reset_index().set_index('iso_code').loc['GBR']","7ad9d3d1":"pct_newcasesUK = go.Figure(go.Bar(\n            x=df_pctUK['date'],\n            y=df_pctUK['pct_newcases']*100,\n            \n))\n\n\npct_newcasesUK.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in UK\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesUK.show()","dd070e7c":"df_pctCAN=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['CAN']","a1947de5":"pct_newcasesCAN = go.Figure(go.Bar(\n            x=df_pctCAN['date'],\n            y=df_pctCAN['pct_newcases']*100,\n            \n))\n\n\npct_newcasesCAN.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Canada\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesCAN.show()","608e5c97":"df_pctDEU=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['DEU']\npct_newcasesDEU = go.Figure(go.Bar(\n            x=df_pctDEU['date'],\n            y=df_pctDEU['pct_newcases']*100,\n            \n))\n\n\npct_newcasesDEU.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Germany \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesDEU.show()","2534a8f2":"df_pctCHN=df_1.reset_index().set_index('iso_code').loc['CHN']\npct_newcasesCHN = go.Figure(go.Bar(\n            x=df_pctCHN['date'],\n            y=df_pctCHN['pct_newcases']*100,\n            \n))\n\n\npct_newcasesCHN.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in China \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesCHN.show()","7679bd17":"df_pctFRA=df_1.reset_index().set_index('iso_code').loc['FRA']\npct_newcasesFRA = go.Figure(go.Bar(\n            x=df_pctFRA['date'],\n            y=df_pctFRA['pct_newcases']*100,\n            \n))\n\n\npct_newcasesFRA.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in France \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesFRA.show()","d169becc":"df_pctITA=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['ITA']\npct_newcasesITA = go.Figure(go.Bar(\n            x=df_pctITA['date'],\n            y=df_pctITA['pct_newcases']*100,\n            \n))\n\n\npct_newcasesITA.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Italy \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesITA.show()","de2c0783":"df_pctRUS=df_1.loc['2020-03-13':].reset_index().set_index('iso_code').loc['RUS']\n\npct_newcasesRUS = go.Figure(go.Bar(\n            x=df_pctRUS['date'],\n            y=df_pctRUS['pct_newcases']*100,\n            \n))\n\n\npct_newcasesRUS.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Russia \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesRUS.show()","b768275b":"df_pctESP=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['ESP']\n\npct_newcasesESP = go.Figure(go.Bar(\n            x=df_pctESP['date'],\n            y=df_pctESP['pct_newcases']*100,\n            \n))\n\n\npct_newcasesESP.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Spain \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesESP.show()","71a318fd":"df_pctJPN=df_1.loc['2020-03-01':].reset_index().set_index('iso_code').loc['JPN']\n\npct_newcasesJPN = go.Figure(go.Bar(\n            x=df_pctJPN['date'],\n            y=df_pctJPN['pct_newcases']*100,\n            \n))\n\n\npct_newcasesJPN.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Spain \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesJPN.show()","d7005a68":"df_pctBRA=df_1.loc['2020-03-10':].reset_index().set_index('iso_code').loc['BRA']\n\npct_newcasesBRA = go.Figure(go.Bar(\n            x=df_pctBRA['date'],\n            y=df_pctBRA['pct_newcases']*100,\n            \n))\n\n\npct_newcasesBRA.update_layout(\n    autosize=False,\n    width=1500,\n    height=1000,\ntitle=\"Percentage change of new cases in Brazil \",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Percentage change\",\n)\n\npct_newcasesBRA.show()","a47a433a":"#Following code referenced from machinelearningmastery.com\ndef x_input(data, n_in=1, n_out=1, dropnan=True):\n    n_vars = 1 if type(data) is list else data.shape[1]\n    df = DataFrame(data)\n    cols, names = list(), list()\n    #input \n    for i in range(n_in, 0, -1):\n        cols.append(df.shift(i))\n        names += [('x%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n    #forecast   \n    for i in range(0, n_out):\n        cols.append(df.shift(-i))\n        if i == 0:\n            names += [('x%d(t)' % (j+1)) for j in range(n_vars)]\n        else:\n            names += [('x%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n    agg = concat(cols, axis=1)\n    agg.columns = names\n    if dropnan: \n        agg.dropna(inplace=True)\n    return agg\n    ","5d94365b":"df['time']=df.index\ndfn1=df.set_index('location').loc['India']\ndfn=dfn1.iloc[:,3].tolist() #getting data for India new cases from the dataframe","b2abf2d0":"data = x_input(dfn, 20, 1) # Twenty variables are chosen to predict the future trend of new cases. The new cses column is split into 20 columns having a \n#time difference of one day\n\n","60feb9fb":"data","194158ab":"x=data.iloc[50:,:20]\ny1=data.iloc[50:,20:21]","2e0c371a":"print(x)\nprint(y1)","ebf37665":"X = x.iloc[:260]\ny = y1.iloc[:260]\n# model\nmodel = Sequential()\nmodel.add(Dense(100, activation='relu', input_dim=20))\nmodel.add(Dense(200, activation='relu', input_dim=20))\nmodel.add(Dense(100, activation='relu', input_dim=20))\nmodel.add(Dense(50, activation='relu', input_dim=20))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\n\nmodel.fit(X, y, epochs=3000, verbose=0)\n# prediction\nx_input = x.iloc[260:265] # Started predicting from 24-12-2020\n\nyhat = model.predict(x_input, verbose=0)\n","bca54448":"plt.plot(yhat- np.array(y1.iloc[260:265]), 'b')\nf1=plt.show()","67279eed":"model.fit(x.iloc[:265], y1.iloc[:265], epochs=3000, verbose=0)\nx_input = x.iloc[265:271]\nyhat_1 = model.predict(x_input, verbose=0)\nplt.plot(yhat_1- np.array(y1.iloc[265:271]), 'b')\n\n\nmodel.fit(x.iloc[:271], y1.iloc[:271], epochs=3000, verbose=0)\nx_input = x.iloc[271:276]\nyhat_2 = model.predict(x_input, verbose=0)\nplt.plot(yhat_2- np.array(y1.iloc[271:276]), 'red')\n\n\nmodel.fit(x.iloc[:276], y1.iloc[:276], epochs=3000, verbose=0)\nx_input = x.iloc[276:281]\nyhat_3 = model.predict(x_input, verbose=0)\nplt.plot(yhat_3- np.array(y1.iloc[276:281]), 'yellow')\n\n\nmodel.fit(x.iloc[:281], y1.iloc[:281], epochs=3000, verbose=0)\nx_input = x.iloc[281:286]\nyhat_4 = model.predict(x_input, verbose=0)\nplt.plot(yhat_4- np.array(y1.iloc[281:286]), 'black')\n\n\nmodel.fit(x.iloc[:286], y1.iloc[:286], epochs=3000, verbose=0)\nx_input = x.iloc[286:291]\nyhat_5 = model.predict(x_input, verbose=0)\nplt.plot(yhat_5- np.array(y1.iloc[286:291]), 'green')\n","09887d5f":"yhat_0=np.concatenate((yhat, yhat_1, yhat_2, yhat_3, yhat_4, yhat_5))","5945ab52":"dfnt=dfn1.iloc[330:]","28af6080":"yhat_1=pd.DataFrame(yhat_0)\n\n","7e886dae":"dfnt['time'].reset_index(drop=True, inplace=True)","35187a7f":"yhat_In=pd.concat([yhat_1,dfnt['time']], axis=1)\n","e94c79fc":"yhat_In.rename(columns = {0:'prediction'}, inplace = True) ","3110ad45":"y2=pd.DataFrame(yhat_1)[30:]\ny3=y2.iat[0,0]\nx2=data.iloc[289:290]","34742f49":"df_f = DataFrame(index=range(10))\n\nfor i in range(10):\n    for i in range(len(x2)):\n        x2=x2.shift(periods=-1, axis=\"columns\").fillna(pd.DataFrame(y2).iat[0,0])\n        y2 = model.predict(x2.iloc[:,1:21], verbose=0)\n        df_f =df_f.append(pd.DataFrame(y2)).dropna().reset_index(drop=True)\nprint(df_f)","60341bbb":"df_d = pd.DataFrame({'column1':[0,1,2,3,4,5,6,7,8,9]})\n\ndf_d['date'] = pd.date_range(start='25\/1\/2021', periods=len(df_d), freq='D')","f8e0406c":"\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        x=dfn1.iloc[329:]['time'],\n        y=dfn1.iloc[329:]['new_cases'],\n        mode=\"lines\",\n        line=go.scatter.Line(color=\"red\"),\n        showlegend=True,\n    name='Actual new cases')\n)\n\n\nfig.add_trace(\n    go.Scatter(\n        x=yhat_In['time'],\n        y=yhat_In['prediction'],\n        mode=\"lines\",\n        line=go.scatter.Line(color=\"gray\"),\n        showlegend=True,\n    name='Predicted new cases')\n)\n\n\n\nfig.show()","feea158b":"\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(\n        x=df_d['date'],\n        y=df_f[0],\n        mode=\"lines\",\n        line=go.scatter.Line(color=\"black\"),\n        showlegend=True,\n    name='future predicted new cases')\n)\n","063eec58":"Correlation between new deaths and new cases","0ddd3f66":"Future 10 days prediction","7b8039d9":"Bar chart for new cases data for countires having greater than 1000 and les than 3000 new cases","cbb5548e":"Following plot shows data for different countries having total cases larger than 1 million","4bbb5a7b":"Total cases for countries having count less than 1000 have been shown in following graph","13aeb759":"Loading the required libraries","1b899df5":"we will predict only for the coming 5 days in furthur analysis","7cd92b34":"New cases v\/s time graph for top 20 counties (Countries with highest new cases according to the recent data) ","e0297dd9":"World new cases","6a1508ae":"New deaths over time map","5c00058b":"![](http:\/\/![his.org.uk\/media\/2433\/final-covid-19_informationdigitalbanner-with-logos.png ])","2050d44d":"Total vaccinations on latest day","8a0e1edb":"The following plot shows countires having total cases less than 1 million and more than100000","ad7f6955":"Corona virus disease 2019(COVID-19) is a contagious disease which is spread by the novel virus- Severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). Symptoms often include fever, cough, fatigue, breathing difficulties, loss of smell and taste.  \n\nDroplets and aerosols are the mode of transmission of this virus which spread from infected person when they cough, sneeze, speak, sing etc. and others can get infected when virus get into their eye, nose and mouth. \n\nThis notebook visualize the COVID-19 data across the globe. Data have been visualised through various different plots as shown below.\n\nAn artifical neural network is depicted in the later section which can predict various varibales like number of new cases for a prticular country for the future week. \n","72f766ef":"Following is the Artificial neural netwrok for prediction of COVID-19 cases in India","a3200f54":"Getting top countries for above date on the basis of new cases","3cae9b0d":"New cases over time map","341bceab":"New cases for different countires with cases number greater than zero and smaller than 1000","9b66926a":"Concatinating the above predicted values","87baaa71":"The above calculated predicted values through the deep network have significant error when compared to the actual data.\nParameter tuning will be done to make to more accurate.","9e7ab05a":"Following are the bar charts for new cases and total deaths for all countries. Data have been split into different cases based on the magnitude of these categories, since the range of magnitude varies broadly so plotting data for all countires on the same graph does not render good visualisation.","7e287558":"Predicitng the future values for new cases","1241eb06":"Getting latest date data","8c7183c6":"World total deaths","681d9cf0":"Getting the data for vaccine around the globe","c71e1474":"Total deaths over time map","f0fb7a10":"Data for countries having total cases greater than 10000 but less than 100000","c0d5155b":" The data has been obtained from ourworldindata.org","4e8941f2":"Error graph between predicted and actual values","032d22e6":"Bar chart for countires having new cases greater than 3000","0908523f":"Total vaccinations done","312a3423":"Following are the graphs for various countries which shows the percentage change in number of new cases per day, which can give the indication of containment of the disease.","7044f0a2":"World total cases","8455507a":"Error graph for next 26 days. It is calculated in the step of 5 days as stated above feeding the previous dates as input."}}