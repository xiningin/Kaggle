{"cell_type":{"6ba1ad33":"code","91b7eed2":"code","6cef22d5":"code","a5fadb32":"code","20035635":"code","a644015c":"code","1221a9dc":"code","318bcea7":"code","3cc37578":"code","a63d629a":"code","93f660ee":"code","f44f5be6":"code","b259d682":"code","4a6850ed":"code","58d5e0fb":"code","d605ddd5":"code","49230a7c":"code","30669ea9":"code","1e8c3af2":"code","81b92cb5":"code","f3c5a887":"code","94b5e35e":"code","74292d85":"code","e64855f1":"code","10484b1e":"code","33b16c8b":"code","47a3be9c":"code","15e57fe5":"code","a1918529":"code","9da1aa64":"code","cb92ff77":"code","28442a97":"code","efc41854":"markdown","9f09865d":"markdown","a22af21d":"markdown","91e695b0":"markdown","dda4e8de":"markdown"},"source":{"6ba1ad33":"import pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.preprocessing import MinMaxScaler\nfrom wordcloud import WordCloud\nimport seaborn as sns \nimport matplotlib.pyplot as plt \nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples\nfrom matplotlib import cm\nfrom statistics import mean ","91b7eed2":"df = pd.read_csv(\"..\/input\/amazon-product-reviews\/ratings_Electronics (1).csv\", header=None,\n                 names=[\"user_id\", \"product_id\", \"user_rating\", \"timestamp\"], \n                 usecols=[\"user_id\", \"product_id\", \"user_rating\"])\ndf.head()","6cef22d5":"df.isnull().sum()","a5fadb32":"sns.countplot(df.user_rating)","20035635":"\n'''\n\u3042\u307e\u308a\u8cfc\u5165\u3057\u3066\u3044\u306a\u3044\u30e6\u30fc\u30b6\u30fc\u306e\u524a\u9664\n'''\n\nuser = pd.DataFrame(df.user_id.value_counts().values, index=df.user_id.value_counts().index)\nuser = user.reset_index()\nuser.columns = [\"user_id\", \"cnt\"]\n\ndf = pd.merge(df, user, how=\"left\", on=\"user_id\")\ndf = df[df.cnt > 50]\ndf.drop(\"cnt\", axis=1, inplace=True)\ndel user \ndf.shape","a644015c":"\n'''\n\u6570\u56de\u306e\u307f\u306e\u8cfc\u5165\u5c65\u6b74\u306e\u5546\u54c1\u3092\u9664\u53bb\u3059\u308b\n\u30e1\u30e2\u30ea\u524a\u6e1b\u306e\u305f\u3081\u3002\u6975\u7aef\u306b\uff11\u5ea6\u306e\u307f\u3057\u304b\u8cfc\u5165\u3055\u308c\u3066\u3044\u306a\u3044\u5546\u54c1\u306f\u304a\u3059\u3059\u3081\u3067\u304d\u308b\u72b6\u614b\u3068\u3044\u3044\u96e3\u3044\u70ba\u3002\n'''\n\nproduct = pd.DataFrame(df.product_id.value_counts().values, index=df.product_id.value_counts().index)\nproduct = product.reset_index()\nproduct.columns = [\"product_id\", \"cnt\"]\n\ndf = pd.merge(df, product, how=\"left\", on=\"product_id\")\ndf = df[df.cnt > 30]\ndf.drop(\"cnt\", axis=1, inplace=True)\ndel product \ndf.product_id.value_counts()","1221a9dc":"df = df.reset_index()\ndf.drop([\"index\"], axis=1, inplace=True)\ndf.head()","318bcea7":"most_bie_product = df.product_id.value_counts()\nmost_bie_product = pd.DataFrame({\"user_cnt\": most_bie_product.values}, \n                               index=most_bie_product.index)\nmost_rating_product = df.groupby(\"product_id\").mean().loc[:, [\"user_rating\"]]\n\n\nmost_product = pd.merge(most_bie_product, most_rating_product, how=\"outer\", left_index=True, right_index=True)\ndel most_bie_product, most_rating_product","3cc37578":"\n'''\n\u3088\u304f\u8cfc\u5165\u3055\u308c\u3066\u3044\u308b\u5546\u54c1\u4e0a\u4f4d\n'''\n\nmost_product.sort_values(\"user_cnt\", ascending=False)[:10].loc[:, [\"user_cnt\"]]","a63d629a":"\n'''\n\u30e6\u30fc\u30b6\u30fc\u306b\u3088\u308b\u4e0a\u4f4d\u306a\u8a55\u4fa1\u3092\u3057\u305f\u5546\u54c1\n'''\n\nmost_product.sort_values(\"user_rating\", ascending=False)[:10].loc[:, [\"user_rating\"]]","93f660ee":"\n'''\n\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u306e\u7528\u610f\n'''\n\npiv = df.pivot_table(values=[\"user_rating\"], columns=[\"product_id\"], index=[\"user_id\"], fill_value=0)\npiv.head()","f44f5be6":"\n'''\n\u30b9\u30d1\u30fc\u30b9\u30c7\u30fc\u30bf\u304b\u3089\u5546\u54c1\u3001\u30e6\u30fc\u30b6\u30fc\u540c\u58eb\u306e\u305d\u308c\u305e\u308c\u306e\u985e\u4f3c\u5ea6\u3092\u6c42\u3081\u3066\u3044\u304f\u5143\u3068\u306a\u308b\u30c6\u30fc\u30d6\u30eb  \n\u5358\u306b\u4e0a\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u30b9\u30b1\u30fc\u30eb\u52a0\u5de5\u3057\u305f\u3082\u306e\n'''\n\ns = MinMaxScaler(feature_range=(0.0, 1.0))\npiv_scaler = s.fit_transform(piv)\npiv_scaler = pd.DataFrame(piv_scaler, index=piv.index, columns=piv.columns)\npiv_scaler.head()","b259d682":"piv_sparse = sp.sparse.csr_matrix(piv_scaler.values)\ncol = [c for _, c in piv.columns]\nproduct = cosine_similarity(piv_sparse.T)\nproduct = pd.DataFrame(product, columns=col, index=col)\nuser = cosine_similarity(piv_sparse)\nuser = pd.DataFrame(user, columns=piv.index, index=piv.index)","4a6850ed":"product.head() # product x product ","58d5e0fb":"user.head() # user x user ","d605ddd5":"\n'''\n\u4f3c\u3066\u3044\u308b\u5546\u54c1\u3092\u62bd\u51fa\u3059\u308b\n'''\n\ndef find_similar_product(product_name: str, n=10):\n    sim_product = product[product_name].sort_values(ascending=False)[1:n+1]\n    df = pd.DataFrame(sim_product.values, index=sim_product.index, columns=[\"cosine_similar\"])\n    df.index.name = \"product_id\"\n    return df \n\n'''\n\u4f3c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u62bd\u51fa\u3059\u308b\n'''\n\ndef find_similar_user(user_id: str, n=10):\n    sim_user = user[user_id].sort_values(ascending=False)[1:n+1]\n    df = pd.DataFrame(sim_user.values, index=sim_user.index, columns=[\"cosine_similar\"])\n    df.index.name = \"user_id\"\n    return df ","49230a7c":"random_product_name = np.random.choice(product.index, 1)[0]\nfind_similar_product(random_product_name)","30669ea9":"random_user_id = np.random.choice(user.index, 1)[0]\nfind_similar_user(random_user_id)","1e8c3af2":"\n'''\n\u4f3c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u4e0a\u8a18\u306e\u95a2\u6570\u304b\u3089\u53d6\u5f97\u3059\u308b\u3002\n\u7d9a\u3044\u3066\u3001\u62bd\u51fa\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u304c\u8cfc\u5165\u3057\u3066\u3044\u308b\u5546\u54c1\u3092\u5143\u30c7\u30fc\u30bf\u3088\u308a\u53d6\u5f97\u3057\u3066\u96c6\u8a08\u3059\u308b\u3002\n\u96c6\u8a08\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6700\u3082\u30ab\u30a6\u30f3\u30c8\u306e\u591a\u3044\u5546\u54c1\u306b\u7d5e\u3063\u3066\u8fd4\u3059\u95a2\u6570\u3002\n\n\u3064\u307e\u308a\u3001\u4f3c\u305f\u30e6\u30fc\u30b6\u30fc\u304c\u305f\u304f\u3055\u3093\u8cfc\u5165\u3057\u3066\u3044\u308b\u5546\u54c1\u3002\n'''\n\ndef recommend(user_id: str, n=10):\n    sim_user_df = find_similar_user(user_id, n)\n    product2count = {}\n    for sim, sim_user in zip(sim_user_df.cosine_similar, sim_user_df.index):\n        product = df[df.user_id == sim_user][\"product_id\"].values\n        for p in product:\n            if p not in product2count:\n                product2count[p] = 1 \n            else:\n                product2count[p] += 1\n    df_ = pd.DataFrame({\"product\": [k for k, _ in product2count.items()], \n                      \"recommend\": [v for _, v in product2count.items()]}).sort_values(\"recommend\", ascending=False)[:n]\n    return df_.groupby(\"product\").sum().sort_values(\"recommend\", ascending=False)\n\n\n'''\n\u4f3c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u4e0a\u8a18\u95a2\u6570\u304b\u3089\u53d6\u5f97\u3059\u308b\u3002\n\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u6700\u3082\u9ad8\u3044\u8a55\u4fa1\u3092\u3057\u305f\u5546\u54c1\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30e6\u30fc\u30b6\u30fc\u9593\u306e\u985e\u4f3c\u5ea6\u3068\u8a55\u4fa1\u5024\u304b\u3089\u4e88\u6e2c\u3055\u308c\u308b\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u8a55\u4fa1\u5024\u3092\u6c42\u3081\u308b\u3002\n\n\u304a\u3059\u3059\u3081\u5546\u54c1\u3092\u8cfc\u5165\u3057\u305f\u3068\u304d\u306e\u30e6\u30fc\u30b6\u8a55\u4fa1\u3002\n'''\n\ndef predict_recommend_rating(user_id: str, n=10):\n    sim_user_df = find_similar_user(user_id, n)\n    df_list = []\n    for sim, sim_user in zip(sim_user_df.cosine_similar, sim_user_df.index):\n        most_product = piv.loc[sim_user, :].sort_values(ascending=False)\n        # \u3053\u3053\u3067\u306f\u6700\u3082\u8a55\u4fa1\u306e\u9ad8\u3044\u5546\u54c1\u3092\uff11\u3064\u3060\u3051\u3067\u8a08\u7b97\u3057\u3066\u3044\u308b\u304c\n        # \u8907\u6570\u500b\u3067\u533a\u5206\u3051\u3057\u305f\u65b9\u304c\u6b63\u78ba\u3060\u3068\u601d\u308f\u308c\u308b\n        most_product_id = most_product.index[0][1]\n        most_product_rating = most_product.values[0]\n        # \u8a55\u4fa1\u5024\u306e\u4e88\u6e2c\n        predict_rating = (sim*most_product_rating)\/sim \n        df_list.append({\"product_id\": most_product_id, \"predict_rating\": predict_rating})\n    df_ = pd.DataFrame(df_list).sort_values(\"predict_rating\", ascending=False)[:n]\n    # \u5168\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u5e73\u5747\u3092\u3068\u308b\n    return df_.groupby(\"product_id\").mean().sort_values(\"predict_rating\", ascending=False)\n        ","81b92cb5":"recommend(random_user_id)","f3c5a887":"predict_recommend_rating(random_user_id)","94b5e35e":"# \u4f7f\u7528\u3059\u308b\u30c6\u30fc\u30d6\u30eb\npiv_scaler.head()","74292d85":"tsne = TSNE(n_components=2, random_state=0).fit_transform(piv_scaler)\nplt.scatter(tsne[:, 0], tsne[:, 1], c=(0, 0, 0))\nplt.show()","e64855f1":"km = KMeans(n_clusters=8, init='k-means++', n_init=10,\n            max_iter=300, tol=1e-04, random_state=0)\ny_km = km.fit_predict(tsne)\ncluster_labels = np.unique(y_km)       # y_km\u306e\u8981\u7d20\u306e\u4e2d\u3067\u91cd\u8907\u3092\u7121\u304f\u3059\nn_clusters=cluster_labels.shape[0]     # \u914d\u5217\u306e\u9577\u3055\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u3053\u3053\u3067\u306f n_clusters\u3067\u6307\u5b9a\u3057\u305f3\u3068\u306a\u308b\n\n# \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u3092\u8a08\u7b97\nsilhouette_vals = silhouette_samples(tsne,y_km,metric='euclidean')  # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf, \u30af\u30e9\u30b9\u30bf\u30fc\u756a\u53f7\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u8ddd\u96e2\u3067\u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u8a08\u7b97\ny_ax_lower, y_ax_upper= 0,0\nyticks = []\n\nfor i,c in enumerate(cluster_labels):\n        c_silhouette_vals = silhouette_vals[y_km==c]      # cluster_labels\u306b\u306f 0,1,2\u304c\u5165\u3063\u3066\u3044\u308b\uff08enumerate\u306a\u306e\u3067i\u306b\u30820,1,2\u304c\u5165\u3063\u3066\u308b\uff08\u305f\u307e\u305f\u307e\uff09\uff09\n        c_silhouette_vals.sort()\n        y_ax_upper += len(c_silhouette_vals)              # \u30b5\u30f3\u30d7\u30eb\u306e\u500b\u6570\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u3054\u3068\u306b\u8db3\u3057\u4e0a\u3052\u3066y\u8ef8\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n        color = cm.jet(float(i)\/n_clusters)               # \u8272\u306e\u5024\u3092\u4f5c\u308b\n        plt.barh(range(y_ax_lower,y_ax_upper),            # \u6c34\u5e73\u306e\u68d2\u30b0\u30e9\u30d5\u306e\u3092\u63cf\u753b\uff08\u5e95\u8fba\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\uff09\n                         c_silhouette_vals,               # \u68d2\u306e\u5e45\uff081\u30b5\u30f3\u30d7\u30eb\u3092\u8868\u3059\uff09\n                         height=1.0,                      # \u68d2\u306e\u9ad8\u3055\n                         edgecolor='none',                # \u68d2\u306e\u7aef\u306e\u8272\n                         color=color)                     # \u68d2\u306e\u8272\n        yticks.append((y_ax_lower+y_ax_upper)\/2)          # \u30af\u30e9\u30b9\u30bf\u30e9\u30d9\u30eb\u306e\u8868\u793a\u4f4d\u7f6e\u3092\u8ffd\u52a0\n        y_ax_lower += len(c_silhouette_vals)              # \u5e95\u8fba\u306e\u5024\u306b\u68d2\u306e\u5e45\u3092\u8ffd\u52a0\n\nsilhouette_avg = np.mean(silhouette_vals)                 # \u30b7\u30eb\u30a8\u30c3\u30c8\u4fc2\u6570\u306e\u5e73\u5747\u5024\nplt.axvline(silhouette_avg,color=\"red\",linestyle=\"--\")    # \u4fc2\u6570\u306e\u5e73\u5747\u5024\u306b\u7834\u7dda\u3092\u5f15\u304f \nplt.yticks(yticks,cluster_labels + 1)                     # \u30af\u30e9\u30b9\u30bf\u30ec\u30d9\u30eb\u3092\u8868\u793a\nplt.ylabel('Cluster')\nplt.xlabel('silhouette coefficient')\nplt.show()","10484b1e":"center = km.cluster_centers_\n\nfig, axes = plt.subplots(2, 4 , figsize=(15, 6))\nax = axes.ravel()\nfor i in range(8):\n    ax[i].scatter(x=tsne[:, 0],y =tsne[:, 1], c=(0, 0, 0), alpha=0.1)\n    ax[i].scatter(x=tsne[:, 0][y_km == i], y=tsne[:, 1][y_km == i], c=(0, 0, 0), alpha=0.5)\n    ax[i].plot(center[i, 0], center[i, 1], \"bo\", c=\"r\")\n    ax[i].set_title(f\"cluster{i+1}\")\nplt.tight_layout()","33b16c8b":"cluster = pd.DataFrame({\"user_id\": piv_scaler.index, \"cluster\": y_km})\ndf = pd.merge(df, cluster, how=\"left\", on=\"user_id\")\ndf.head()","47a3be9c":"\n'''\n\u983b\u51fa\u3059\u308b\u5546\u54c1ID\u306e\u63cf\u753b\n'''\n\ndef show_cloud(product, name):\n    word = WordCloud().generate_from_frequencies(product)\n    plt.imshow(word)\n    plt.axis(\"off\")\n    plt.title(f\"cluster: {str(name)}\")\n    plt.show()\n    plt.savefig(f\"cluster{str(name)}.png\")\n\n    \n'''\n\u30af\u30e9\u30b9\u30bf\u9593\u306e\u5546\u54c1\u8cfc\u5165\u6570\u306e\u7d2f\u8a08\u3068\u8a55\u4fa1\u5e73\u5747\n\u5546\u54c1\u540d\u306e\u30c6\u30fc\u30d6\u30eb\u304c\u3042\u308c\u3070\u3088\u308a\u89e3\u91c8\u6027\u304c\u5897\u3059\u3002\n'''    \n\ndef cluster_analysis(cluster, names=0):\n    product = cluster[\"product_id\"].tolist()\n    rating = cluster[\"user_rating\"].tolist()\n    product2count = {}\n    mean_rating = []\n    for p, r in zip(product, rating):\n        p = p.strip()\n        if p not in product2count:\n            product2count[p] = 1\n        else:\n            product2count[p] += 1 \n        mean_rating.append(r)\n        \n    show_cloud(product2count, names)\n    return {\"user_rating\": mean(mean_rating)}","15e57fe5":"c0 = df[df.cluster == 0].drop(\"cluster\", axis=1)\nc1 = df[df.cluster == 1].drop(\"cluster\", axis=1)\nc2 = df[df.cluster == 2].drop(\"cluster\", axis=1)\nc3 = df[df.cluster == 3].drop(\"cluster\", axis=1)\nc4 = df[df.cluster == 4].drop(\"cluster\", axis=1)\nc5 = df[df.cluster == 5].drop(\"cluster\", axis=1)\nc6 = df[df.cluster == 6].drop(\"cluster\", axis=1)\nc7 = df[df.cluster == 7].drop(\"cluster\", axis=1)","a1918529":"cluster_analysis(c0, 0)","9da1aa64":"cluster_analysis(c1, 1)","cb92ff77":"cluster_analysis(c2, 2)","28442a97":"cluster_analysis(c3, 7)","efc41854":"## \u57fa\u672c\u7684\u306a\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\n---","9f09865d":"## \u30b3\u30f3\u30c6\u30f3\u30c4\u30d9\u30fc\u30b9\n---  \n\n\u5546\u54c1\u9593\u306e\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\u3059\u308b\u3053\u3068\u3067\u3001\u540c\u3058\u3088\u3046\u306a\u5546\u54c1\u3092\u63a8\u85a6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002  \n\u305f\u3060\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u540c\u58eb\u306e\u95a2\u4fc2\u6027\u306f\u8003\u616e\u3055\u308c\u306a\u3044\u305f\u3081\u7cbe\u5ea6\u306b\u554f\u984c\u304c\u3042\u308b\u3002","a22af21d":"## \u30c7\u30fc\u30bf\u306e\u6574\u5f62\n---  \n\u7d2f\u8a08\u8cfc\u5165\u6570\u304c50\u672a\u6e80\u306e\u30e6\u30fc\u30b6\u30fc\u3001\u8cfc\u5165\u3055\u308c\u305f\u56de\u6570\u304c30\u672a\u6e80\u306e\u5546\u54c1\u3092\u9664\u304f\u3002  \n\u3053\u308c\u4ee5\u964d\u3067\u306f\u524a\u9664\u3057\u305f\u30c6\u30fc\u30d6\u30eb\u3092\u57fa\u306b\u5206\u6790\u3092\u9032\u3081\u308b","91e695b0":"## \u5354\u8abf\u6027\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n---  \n\n\u985e\u4f3c\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u7279\u9577\u304b\u3089\u5546\u54c1\u3092\u63a8\u85a6\u3059\u308b\u3002  \n\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u304c\u5c11\u306a\u3044\u521d\u671f\u72b6\u614b\u306b\u304a\u3044\u3066\u30b3\u30fc\u30eb\u30c9\u30b9\u30bf\u30fc\u30c8\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3002","dda4e8de":"## \u30af\u30e9\u30b9\u30bf\u5206\u6790\n---  \n\u30e6\u30fc\u30b6\u30fc\u3068\u5546\u54c1\u306e\u8a55\u4fa1\u5024\u306e\u95a2\u4fc2\u6027\u304b\u3089\u975e\u7dda\u5f62\u306b\u3088\u308b\u6b21\u5143\u524a\u6e1b\u3092\u3059\u308b\u3002  \n\u975e\u7dda\u5f62\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u5404\u30af\u30e9\u30b9\u30bf\u306e\u5546\u54c1\u8cfc\u5165\u6570\u3092\u7d2f\u8a08\u3059\u308b\u3002"}}