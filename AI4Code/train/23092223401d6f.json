{"cell_type":{"531e05b1":"code","7adc7282":"code","b3797db9":"code","5d48ded7":"code","b3e6fefa":"code","f121e56a":"code","222c20f4":"code","5d62f433":"markdown","a5edcf7f":"markdown","b954980e":"markdown","7d5296c2":"markdown","49cec1f5":"markdown"},"source":{"531e05b1":"from IPython.display import clear_output\n!pip3 install rx\nclear_output()","7adc7282":"import rx \nfrom rx import of,operators as op\nfrom rx.subject import ReplaySubject","b3797db9":"BUFFER_COUNT = 2\nDATA1 = \"apple\"\nDATA2 = \"orange\"\nDATA3 = \"melon\"\nDATA4 = \"kiwi\"\nDATA5 = \"banana\"","5d48ded7":"subject = ReplaySubject(BUFFER_COUNT);\nsubject.subscribe(\n   lambda x: print(\"Subscriber Kim: {0}\".format(x))\n)\nprint(\"publish data1\")\nsubject.on_next(DATA1)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Lee : {0}\".format(x))\n)\n\nprint(\"publish data2\")\nsubject.on_next(DATA2)\nprint(\"\")","b3e6fefa":"subject = ReplaySubject(BUFFER_COUNT);\nsubject.subscribe(\n   lambda x: print(\"Subscriber Kim: {0}\".format(x))\n)\nprint(\"publish data1\")\nsubject.on_next(DATA1)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Lee : {0}\".format(x))\n)\n\nprint(\"publish data2\")\nsubject.on_next(DATA2)\nprint(\"\")\n\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Park : {0}\".format(x))\n)\n\nprint(\"publish data3\")\nsubject.on_next(DATA3)\nprint(\"\")","f121e56a":"subject = ReplaySubject(BUFFER_COUNT);\nsubject.subscribe(\n   lambda x: print(\"Subscriber Kim: {0}\".format(x))\n)\nprint(\"publish data1\")\nsubject.on_next(DATA1)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Lee : {0}\".format(x))\n)\n\nprint(\"publish data2\")\nsubject.on_next(DATA2)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Park : {0}\".format(x))\n)\n\nprint(\"publish data3\")\nsubject.on_next(DATA3)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Choi : {0}\".format(x))\n)\n\nprint(\"publish data4\")\nsubject.on_next(DATA4)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Hong : {0}\".format(x))\n)\n\nprint(\"publish data5\")\nsubject.on_next(DATA5)\nprint(\"\")","222c20f4":"BUFFER_COUNT = 3\n\nsubject = ReplaySubject(BUFFER_COUNT);\nsubject.subscribe(\n   lambda x: print(\"Subscriber Kim: {0}\".format(x))\n)\nprint(\"publish data1\")\nsubject.on_next(DATA1)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Lee : {0}\".format(x))\n)\n\nprint(\"publish data2\")\nsubject.on_next(DATA2)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Park : {0}\".format(x))\n)\n\nprint(\"publish data3\")\nsubject.on_next(DATA3)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Choi : {0}\".format(x))\n)\n\nprint(\"publish data4\")\nsubject.on_next(DATA4)\nprint(\"\")\n\nsubject.subscribe(\n   lambda x: print(\"Subscriber Hong : {0}\".format(x))\n)\n\nprint(\"publish data5\")\nsubject.on_next(DATA5)\nprint(\"\")","5d62f433":"### subject (observable + observer)\n\nA subject is an observable sequence, as well as, an observer.","a5edcf7f":"A replaysubject is similar to behavior subject, wherein, \n\nit can buffer the values \n\nand replay the same to the new subscribers","b954980e":"# ReplaySubject","7d5296c2":"# buffer count == 3","49cec1f5":"# buffer count == 2"}}