{"cell_type":{"fd33a7c0":"code","90282013":"code","6dd2b985":"code","df4ee686":"code","e8860eb1":"code","c963473b":"code","7eec176c":"code","1643576e":"code","2b035237":"code","105efbf7":"code","6631205f":"code","899f1a1c":"code","01b38abc":"code","36d43ba9":"code","1984a014":"markdown","22c1c474":"markdown","0c2bede0":"markdown","ec453357":"markdown"},"source":{"fd33a7c0":"%matplotlib inline\n\nfrom PIL import Image\nfrom io import BytesIO\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport torch\nimport torch.optim as optim\nimport requests\nfrom torchvision import transforms, models","90282013":"vgg = models.vgg19(pretrained=True).features\n\nfor param in vgg.parameters():\n    param.requires_grad_(False)","6dd2b985":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nvgg.to(device)","df4ee686":"def load_image(img_path, max_size=400, shape=None):\n    ''' Load in and transform an image, making sure the image\n       is <= 400 pixels in the x-y dims.'''\n    image = Image.open(img_path).convert('RGB')\n    \n    if max(image.size) > max_size:\n        size = max_size\n    else:\n        size = max(image.size)\n        \n    if shape is not None:\n        size = shape\n        \n    in_transform = transforms.Compose([\n                        transforms.Resize(size),\n                        transforms.ToTensor(),\n                        transforms.Normalize((0.485, 0.456, 0.406), \n                                             (0.229, 0.224, 0.225))])\n    \n    image = in_transform(image)[:3,:,:].unsqueeze(0)\n    \n    return image\n    ","e8860eb1":"content = load_image('..\/input\/style-transfer-images\/janelle.png').to(device)\nstyle = load_image('..\/input\/style-transfer-images\/delaunay.jpg', shape=content.shape[-2:]).to(device)","c963473b":"def im_convert(tensor):\n    \"\"\" Display a tensor as an image. \"\"\"\n    \n    image = tensor.to('cpu').clone().detach()\n    image = image.numpy().squeeze()\n    image = image.transpose(1,2,0)\n    image = image * np.array((0.229, 0.224, 0.225)) + np.array((0.485, 0.456, 0.406))\n    image = image.clip(0, 1)\n    \n    return image","7eec176c":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nax1.imshow(im_convert(content))\nax2.imshow(im_convert(style))","1643576e":"vgg","2b035237":"def get_features(image, model, layers=None):\n    \"\"\" Run an image forward through a model and get the features for \n        a set of layers.\n    \"\"\"\n    if layers is None:\n        layers = {'0': 'conv1_1',\n                  '5': 'conv2_1',\n                  '10': 'conv3_1',\n                  '19': 'conv4_1',\n                  '21': 'conv4_2', ## content representation\n                  '28': 'conv5_1'}\n    \n    features = {}\n    x = image\n    for name, layer in model._modules.items():\n        x = layer(x)\n        if name in layers:\n            features[layers[name]] = x\n            \n    return features        ","105efbf7":"def gram_matrix(tensor):\n    batch_size, d, h, w = tensor.size()\n    tensor = tensor.view(d, h * w)\n    gram = torch.mm(tensor, tensor.t())\n    \n    return gram","6631205f":"content_features = get_features(content, vgg)\nstyle_features = get_features(style, vgg)\n\n# calculate the gram matrices for each layer of our style representation\nstyle_grams = {layer: gram_matrix(style_features[layer]) for layer in style_features}\n\n# taget image is a copy of content image\ntarget = content.clone().requires_grad_(True).to(device)","899f1a1c":"style_weights = {'conv1_1': 1.,\n                 'conv2_1': 0.75,\n                 'conv3_1': 0.2,\n                 'conv4_1': 0.2,\n                 'conv5_1': 0.1}\n\ncontent_weight = 1 # alpha\nstyle_weight = 1e6 # beta","01b38abc":"show_every = 400\n\noptimizer = optim.Adam([target], lr=0.003)\nsteps = 2000\n\nfor i in range(1, steps+1):\n    target_features = get_features(target, vgg)\n    content_loss = torch.mean((target_features['conv4_2'] - content_features['conv4_2'])**2)\n    \n    style_loss = 0\n    \n    for layer in style_weights:\n        target_feature = target_features[layer]\n        target_gram = gram_matrix(target_feature)\n        \n        batch_size, d, h, w = target_feature.shape\n        style_gram = style_grams[layer]\n        layer_style_loss = style_weights[layer] * torch.mean((target_gram - style_gram)**2)\n        \n        style_loss += layer_style_loss \/ (d * w * h)\n        \n    total_loss = content_weight * content_loss + style_weight * style_loss\n    \n    optimizer.zero_grad()\n    total_loss.backward()\n    optimizer.step()\n    \n    if i % show_every == 0:\n        print('Total loss:', total_loss.item())\n        plt.imshow(im_convert(target))\n        plt.show()","36d43ba9":"# display content and final, target image\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\nax1.imshow(im_convert(content))\nax2.imshow(im_convert(target))","1984a014":"### Load in Content and Style Images","22c1c474":"## Display the Target Image","0c2bede0":"### Gram Matrix","ec453357":"### Load in VGG19 (features)"}}