{"cell_type":{"40717434":"code","c91a86f4":"code","6958d8ac":"code","dcfc104a":"code","6e1ca667":"code","6962d507":"code","969fe04b":"code","c66d09a4":"code","a1b04ad8":"code","bf463442":"code","9ed27054":"code","83bafc44":"code","c470a1ae":"code","171f048f":"code","fb76d0e1":"code","1fe15c45":"code","e77e3605":"code","d331f1b0":"code","636a0f95":"code","a2082b1e":"code","444c1ffd":"code","d92e7235":"code","4d54f335":"markdown","1babbd14":"markdown","a84ee62e":"markdown","08c39c91":"markdown","4a3d86c0":"markdown","a886f594":"markdown","18ed6035":"markdown","34b8ddb9":"markdown","2866cef3":"markdown","90035780":"markdown","a8cd44e2":"markdown","ef85324d":"markdown","22ac80ac":"markdown"},"source":{"40717434":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","c91a86f4":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfilepath = \"..\/input\/enron-email-dataset\/emails.csv\"\nemails = pd.read_csv(filepath, skiprows=lambda x:x%2)\n# >>> this file is too big(around 0.5M rows) and take much time in our analysis\n# so if you are begineer then only extract half of data using given skiprows parameter\nemails.shape\ncols = emails.columns\nemails.head(3)","6958d8ac":"print(emails.loc[0][\"message\"])\n# >>> We can see lots of fields into message, but we only need some useful fields for our model. \n# so lets see which kind of fields a email contain","dcfc104a":"import email\nmessage = emails.loc[0][\"message\"]\ne = email.message_from_string(message)\ne.items()\n\ne.get(\"Date\")\n# >>> below are fields and corresponding value of those, \n# keep in mind here message text isn't extract into this var e\n# we need only \"Date\", \"Subject\", \"X-Folder\", \"X-From\", \"X-To\"","6e1ca667":"# show message body\ne.get_payload()","6962d507":"# now we add those fields into our emails DataFrame\ndef get_field(field, messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get(field))\n    return column","969fe04b":"emails[\"date\"] = get_field(\"Date\", emails[\"message\"])\nemails[\"subject\"] = get_field(\"Subject\", emails[\"message\"])\nemails[\"X-Folder\"] = get_field(\"X-Folder\", emails[\"message\"])\nemails[\"X-From\"] = get_field(\"X-From\", emails[\"message\"])\nemails[\"X-To\"] = get_field(\"X-To\", emails[\"message\"])\nemails.head(3)","c66d09a4":"def body(messages):\n    column = []\n    for message in messages:\n        e = email.message_from_string(message)\n        column.append(e.get_payload())\n    return column\n\nemails[\"body\"] = body(emails[\"message\"])\nemails.head(3)","a1b04ad8":"emails[\"file\"][:10]\n# >>> see row 0, allen-p is user name who sent email\n# we will add column named employee into emails","bf463442":"def employee(file):\n    column = []\n    for string in file:\n        column.append(string.split(\"\/\")[0])\n    return column\n\nemails[\"employee\"] = employee(emails[\"file\"])\nemails.head(3)","9ed27054":"\"number of folders: \", emails.shape[0]\n\"number of unique folders: \", emails[\"X-Folder\"].unique().shape[0]\n\n# >>>>> means there are lots of same X-Folder used by employee","83bafc44":"unique_emails = pd.DataFrame(emails[\"X-Folder\"].value_counts())\nunique_emails.reset_index(inplace=True)\nunique_emails.columns = [\"folder_name\", \"count\"]\nunique_emails","c470a1ae":"sns.barplot(x=\"count\", y=\"folder_name\", data=unique_emails.iloc[:20, :])\nplt.xlabel(\"count\")\nplt.ylabel(\"folder_name\")\nplt.show();","171f048f":"# let's see top 20 highest email sender employee\n\ntop_20 = pd.DataFrame(emails[\"employee\"].value_counts()[:20])\ntop_20.reset_index(inplace=True)\ntop_20.columns = [\"employee_name\", \"count\"]\ntop_20","fb76d0e1":"sns.barplot(y=\"employee_name\", x=\"count\", data=top_20)\nplt.xlabel(\"Number of emails send\")\nplt.ylabel(\"Employee Name\")\nplt.show();","1fe15c45":"# let's convert date column type(which is string) to date type\n# for this we will use dateutil module : http:\/\/labix.org\/python-dateutil#head-a23e8ae0a661d77b89dfb3476f85b26f0b30349c\n\nimport datetime\nfrom dateutil import parser\n\n# this is sample example\nx = parser.parse(\"Fri, 4 May 2001 13:51:00 -0700 (PDT)\")\nprint(x.strftime(\"%Y-%m-%d %H:%M\"))","e77e3605":"def change_type(dates):\n    column = []\n    for date in dates:\n        column.append(parser.parse(date).strftime(\"%Y-%m-%d %H:%M\"))\n    return column\n\nemails[\"date\"] = change_type(emails[\"date\"])\nemails.head(3)\n\n# Alternative way of doing (but takes more time :< )\n# emails[\"date\"] = pd.to_datetime(emails[\"date\"])\n# emails.head(3)","d331f1b0":"emails[\"X-Folder\"][0]\n# we only want last folder name\nemails[\"X-Folder\"][0].split(\"\\\\\")[-1]","636a0f95":"def preprocess_folder(folders):\n    column = []\n    for folder in folders:\n        if(folder is None or folder == \"\"):\n            column.append(np.nan)\n        else:\n            column.append(folder.split(\"\\\\\")[-1].lower())\n    return column\n\nemails[\"X-Folder\"] = preprocess_folder(emails[\"X-Folder\"])\nemails.head(3)","a2082b1e":"# emails[\"X-Folder\"].unique()[:10]\n\n# # Folders we can filter out\n# unwanted_folders = [\"all documents\", \"deleted items\", \"discussion threads\", \"sent\", \"deleted Items\", \"inbox\",\n#                    \"sent items\", \"'sent mail\", \"untitled\", \"notes inbox\", \"junk file\", \"calendar\"]\n\n# emails[\"X-Folder\"] = emails.loc[~emails[\"X-Folder\"].isin(unwanted_folders)][\"X-Folder\"]\n# emails.head(3)\n# # >>>>> It will add NaN where unwanted_folder names occured","444c1ffd":"emails.isnull().sum()","d92e7235":"emails.dropna(inplace=True)\nemails.isnull().sum()","4d54f335":"### A sample e-mail ","1babbd14":"### Extract headers ","a84ee62e":"### Extract message body ","08c39c91":"### Importing neccessary libraries ","4a3d86c0":"### column : date","a886f594":"### Look into X-Folder","18ed6035":"## Data Cleaning and Transforming ","34b8ddb9":"### Some Analysis ","2866cef3":"## First Turn On Multiline comment so that we don't need to use print() everytime :)","90035780":"### Column : X-Folder ","a8cd44e2":"### Employee names ","ef85324d":"## Firstly Explore the Data ","22ac80ac":"### Missing Vlaues "}}