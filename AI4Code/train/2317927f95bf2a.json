{"cell_type":{"0b8a60c5":"code","229db792":"code","aeaa1cc2":"code","f669902a":"code","c9856b37":"code","d841d40d":"code","fa08b655":"code","8d8a1694":"code","ee8f60fa":"code","a2f2eb0f":"code","6edb3948":"code","ac72c909":"code","b3c91bab":"code","ce4d3851":"code","fe0d5c99":"code","6d02efd1":"code","59fab3f7":"code","2e965a68":"code","c39a598d":"code","602bdc3f":"code","85646c8f":"code","3ed3d883":"code","10f5109e":"code","29760f6f":"code","cbcf2996":"code","68496082":"code","be3f0348":"code","b9b4030a":"code","72198730":"code","2df0100a":"code","6cbcef1b":"code","e4e060cb":"code","bda875c4":"code","74259a23":"code","140018fa":"code","115d3cc3":"code","b23dec0c":"code","07f08a32":"code","53998da9":"code","bd19c0c3":"code","b6cbd76a":"code","c37cfac1":"code","cda95f44":"markdown","072878b7":"markdown","cd6e6a8a":"markdown","04be79fc":"markdown","fc088de2":"markdown","b3e1f982":"markdown","e3c2993a":"markdown","9cbd5c82":"markdown","04a32c77":"markdown","e6a285cf":"markdown","048a1a1b":"markdown","4d710dd0":"markdown","c5e1dc77":"markdown","0fa56b99":"markdown","4ac03642":"markdown","d6414bf6":"markdown","dc073672":"markdown","43a11070":"markdown","dc97b581":"markdown","3d8305bd":"markdown","d531f79c":"markdown","e71dd0a4":"markdown","37ef0c73":"markdown","f385178d":"markdown","5e730c83":"markdown","b4b6c4df":"markdown","f5403e9f":"markdown","4655009d":"markdown","70631256":"markdown","30e6d9bd":"markdown","2d093789":"markdown"},"source":{"0b8a60c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","229db792":"dataset = pd.read_csv(\"\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","aeaa1cc2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom  matplotlib.pyplot import subplot\n%matplotlib inline\n\nfrom sklearn import svm\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix,mean_squared_error","f669902a":"dataset.head()","c9856b37":"dataset.shape","d841d40d":"dataset.info()","fa08b655":"dataset.describe()","8d8a1694":"dataset.quality.value_counts()","ee8f60fa":"dataset.isnull().sum()","a2f2eb0f":"sns.countplot(dataset['quality'])","6edb3948":"plt.figure(figsize=(20,10))\nsns.heatmap(dataset.corr(), annot=True,cmap='Blues')\nplt.show()","ac72c909":"dataset.corr()","b3c91bab":"sns.barplot(y='fixed acidity', x='quality', data=dataset)","ce4d3851":"sns.barplot(y='volatile acidity', x='quality', data=dataset)","fe0d5c99":"sns.barplot(y='citric acid', x='quality', data=dataset)","6d02efd1":"sns.barplot(y='residual sugar', x='quality', data=dataset)","59fab3f7":"sns.barplot(y='chlorides', x='quality', data=dataset)","2e965a68":"sns.barplot(y='free sulfur dioxide', x='quality', data=dataset)","c39a598d":"sns.barplot(y='total sulfur dioxide', x='quality', data=dataset)","602bdc3f":"sns.barplot(y='density', x='quality', data=dataset)","85646c8f":"sns.barplot(y='pH', x='quality', data=dataset)","3ed3d883":"sns.barplot(y='sulphates', x='quality', data=dataset)","10f5109e":"sns.barplot(y='alcohol', x='quality', data=dataset)","29760f6f":"dataset['quality'].min()","cbcf2996":"dataset['quality'].max()","68496082":"values = (2, 6, 9)\nqual = ['bad', 'good']\ndataset['quality'] = pd.cut(dataset['quality'], bins = values, labels = qual)\ndataset.head()","be3f0348":"dataset['quality'].value_counts()","b9b4030a":"label_enc = LabelEncoder()\ndataset['quality']=label_enc.fit_transform(dataset['quality'])","72198730":"X = dataset.drop('quality',axis=1)\ny = dataset['quality']","2df0100a":"xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=0.2,random_state=42)","6cbcef1b":"std_scale = StandardScaler()\nxtrain = std_scale.fit_transform(xtrain)\nxtest = std_scale.fit_transform(xtest)","e4e060cb":"model = svm.SVC()\nmodel.fit(xtrain,ytrain)\ny0_pred = model.predict(xtest)\nprint(accuracy_score(ytest,y0_pred))","bda875c4":"rf = RandomForestClassifier()\nrf.fit(xtrain,ytrain)\ny1_pred = rf.predict(xtest)\nprint(accuracy_score(ytest,y1_pred))","74259a23":"xgb = XGBClassifier(max_depth=3,n_estimators=200,learning_rate=0.5)\nxgb.fit(xtrain,ytrain)\ny2_pred = xgb.predict(xtest)\nprint(accuracy_score(ytest,y2_pred))","140018fa":"print(confusion_matrix(ytest,y2_pred))","115d3cc3":"x=dataset.drop('quality', axis = 1)\ny= dataset['quality']","b23dec0c":"from sklearn.preprocessing import MinMaxScaler","07f08a32":"scaler = MinMaxScaler(feature_range = (0,1))\nscaler.fit_transform(x)\n\nx.head()","53998da9":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)","bd19c0c3":"from sklearn.linear_model import LogisticRegression\nclassifier_log = LogisticRegression()\nmodel = classifier_log.fit(xtrain,ytrain)\n\ny_pred_log = classifier_log.predict(xtest)\n\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_pred_log, ytest)*100)","b6cbd76a":"from sklearn.tree import DecisionTreeClassifier\n\n# doing pruning to avoid overfitting\nclassifier_tree=DecisionTreeClassifier(criterion ='gini', splitter = 'random',\n                         max_leaf_nodes = 10, min_samples_leaf = 5, \n                         max_depth = 6)\nmodel = classifier_tree.fit(xtrain, ytrain)\n\ny_pred_tree = classifier_tree.predict(xtest)\n\nprint(accuracy_score(y_pred_tree, ytest)*100)","c37cfac1":"print(classification_report(ytest,y2_pred))","cda95f44":"# **CONCLUSION**","072878b7":"# **IMPORTING THE REQUIRED LIBRARIES**","cd6e6a8a":"**2. RANDOM FOREST**","04be79fc":"# **INTRODUCTION**","fc088de2":"**Check the relationship between each variables**","b3e1f982":"# **CLASSIFICATION MODELS**","e3c2993a":"# **DATA VISUALIZATION**","9cbd5c82":"**XGBoost classifier model has a 90.3% accuracy score which is higher than the other 2 models.**","04a32c77":"Normalize using MinMaxScaler to constrain values to between 0 and 1.","e6a285cf":"# **DECISION TREE CLASSIFIER**","048a1a1b":"# **WHAT CAN WE SAY FROM THIS ?**","4d710dd0":"**3. XGBoost CLASSIFIER**","c5e1dc77":"# **SPLITTING TRAINING AND TESTING DATA**","0fa56b99":"# **LOGISTIC REGRESSION**","4ac03642":"    1. SVM (Support Vector Machine) = 0.875 = 87.5%\n    2. Random Forest = 0.8875 = 88.75%\n    3. XGBoost = 0.903125 = 90.3%\n    4. Logistic Regression 0.875 = 87.5%\n    5. Decision Tree Classifier = 0.871875 = 87.1875%","d6414bf6":"1. All are numerical fields\n2. Quaity is the dependent variable(discrete). All other fields are continuous.\n3. Data is free from missing values","dc073672":"**Now, we have 2 groups i.e. good quality and bad quality wine. This helps us with label encoding to classify data better.**","43a11070":"Happy learning ;))","dc97b581":"records with wine quality 5 & 6 are more","3d8305bd":"**Checking the minimum and maximum value of quality**","d531f79c":"**1. SVM (SUPPORT VECTOR MACHINE)**","e71dd0a4":"# **LET US NOW START PRE-PROCESSING OUR DATA**","37ef0c73":"# **IMPORTING THE DATASET**","f385178d":"We have 9 + 22 = 31 false predictions!!!","5e730c83":"# **DIGGING DEEP INTO THE DATASET**","b4b6c4df":"# **ACCURACY OF THE DIFFERENT CLASSIFICATION MODELS THAT WE'VE USED**","f5403e9f":"Hope y'all find this notebook useful. If you like this notebook, then please do upvote!","4655009d":"Hello all !!! This is my first notebook in Kaggle. Here I have used the Red Wine Quality Dataset to analyse and predict using few classification methods like : \n\n1. SVM (Support Vector Machine)\n2. Random Forest\n3. XGBoost\n4. Logistic Regression\n5. Decision Tree Classifier","70631256":"    1. SVM (Support Vector Machine)\n    2. Random Forest\n    3. XGBoost classifier","30e6d9bd":"# **CONFUSION MATRIX**","2d093789":"**Now, let us start by scaling the data and normalizing it to a particular range of values**"}}