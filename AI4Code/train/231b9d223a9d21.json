{"cell_type":{"10f2b02e":"code","b5cc1453":"code","87c082fd":"code","9f457c52":"code","747299d6":"code","bd54043b":"code","b7687458":"markdown","146ed00b":"markdown","7702aed1":"markdown","58a576ee":"markdown","3f6d0b8a":"markdown"},"source":{"10f2b02e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5cc1453":"# Create a 1D ndarray that contains only integers\nx = np.array([1, 2, 3, 4, 5])\nprint('x = ', x) # x = [1 2 3 4 5]\nprint('x has dimensions:', x.shape) # x has dimensions: (5,)\nprint('The elements in x are of type:', x.dtype) # The elements in x are of type: int64\n\n# Create a rank 2 ndarray that only contains integers\nY = np.array([[1,2,3],[4,5,6],[7,8,9], [10,11,12]])\nprint('Y has dimensions:', Y.shape) # Y has dimensions: (4, 3)\nprint('Y has a total of', Y.size, 'elements') # Y has a total of 12 elements\nprint('Y is an object of type:', type(Y)) # Y is an object of type: class 'numpy.ndarray'\nprint('The elements in Y are of type:', Y.dtype) # The elements in Y are of type: int64","87c082fd":"# Specify the dtype when creating the ndarray\nx = np.array([1.5, 12.2, 35.7, 46.0, 59.9], dtype = np.int64)\nprint(x)","9f457c52":"# Create ndarray using built-in functions\n# 5 x 4 ndarray full of zeros\n# np.zeros(shape)\nX = np.zeros((5,4))\nprint(X)","747299d6":"# a 4 x 2 ndarray full of ones\n# np.ones(shape)\nX = np.ones((4,2))\nprint(X)","bd54043b":"# 2 x 3 ndarray full of fives\n# np.full(shape, constant value)\nX = np.full((2,3), 5)\nprint(X)","b7687458":"# 4. 4x2 ndarray","146ed00b":"# 3. Build-in functions","7702aed1":"# 5. 2x3 ndarray","58a576ee":"# 2. Specifying the dtype","3f6d0b8a":"# 1. Creating 1D array"}}