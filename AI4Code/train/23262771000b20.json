{"cell_type":{"faafc71b":"code","3c1bb802":"code","53c04169":"code","cf891cea":"code","e8eb75e7":"code","ae36d642":"code","d04bffbd":"code","fea9a383":"code","0f600458":"code","5dc625bd":"code","cb56e706":"code","41bac200":"code","d2de86d6":"markdown"},"source":{"faafc71b":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#import requests\n#from bs4 import BeautifulSoup\nimport nltk\nnltk.download() ","3c1bb802":"\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom collections import Counter\nimport urllib.request\nimport json\nfrom tqdm import tqdm\nimport collections\nimport matplotlib.pyplot as plt\n","53c04169":"def my_parser(text):\n    tokens = word_tokenize(text)\n    words = [word for word in tokens if word.isalpha()]\n    stop_words = set(stopwords.words('english'))\n    words = [w for w in words if not w in stop_words]\n    porter = PorterStemmer()\n    stemmed = [porter.stem(word) for word in words]\n    return Counter(stemmed)\n   ","cf891cea":"\nbigtext = []\npath = '\/kaggle\/input\/CORD-19-research-challenge\/document_parses\/pdf_json'\njsons = os.listdir(path)\nfor i in tqdm(jsons):\n    with open(path + '\/' + i, 'r') as file:\n        j = json.load(file)\n        study = j['abstract']\n        #print(j['metadata']['title'])\n        smalltext = []\n        if study:\n            for i in study:\n                smalltext.append(i['text'])\n            #print(smalltext)\n            bigtext.append(smalltext)\n\n           ","e8eb75e7":"flat_list = [item for sublist in bigtext for item in sublist]\nstring = ' '.join([str(item) for item in flat_list])","ae36d642":"mydict = my_parser(string)\ndel mydict['the']\ndel mydict['We']","d04bffbd":"mydict2 = sorted(mydict.items(), key=lambda x: x[1], reverse = True)[:100]","fea9a383":"print(mydict2)","0f600458":"wc = pd.DataFrame(mydict2, columns=['word', 'count'])","5dc625bd":"print(wc)","cb56e706":"fig, ax = plt.subplots(figsize=(6, 15))\nax.barh( wc['word'], wc['count'],  align='center', linewidth = 0.2)\nax.set_yticks(wc['word'])\nbar_size = 0.25\npadding = 0.25\nax.set_xlabel('Counts')\nax.set_title('Words')\nax.invert_yaxis() \n\nplt.show()","41bac200":"\u041d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b 100 \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438\u0437 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043e\u0432 \u0441\u0442\u0430\u0442\u0435\u0439 \u043f\u043e \u043a\u043e\u0440\u043e\u043d\u0430\u0432\u0438\u0440\u0443\u0441\u0443. \n\u0412\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u043f\u0430\u0446\u0435\u0438\u043d\u0442\u043e\u0432, \u0438\u0445 \u0441\u0438\u043c\u043f\u0442\u043e\u043c\u0430\u043c. \n\u0422\u0430\u043a\u0436\u0435 \u0432 \u044d\u0442\u043e\u0439 \u0441\u043e\u0441\u0442\u043d\u0435 \u0435\u0441\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432\u0438\u0440\u0443\u0441\u0430 \u0432 \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u0438","d2de86d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n"}}