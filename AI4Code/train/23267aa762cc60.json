{"cell_type":{"6a811a46":"code","0338920a":"code","1dcf0e0c":"code","76e3b5b3":"code","7130af81":"code","b6ec75a7":"code","23bf0d0f":"code","e287d8dd":"code","a465c28c":"code","1fc69eb1":"code","2c8fc244":"code","02bf3343":"code","68b0d617":"code","80072f28":"code","9cce8a86":"code","14215c44":"code","e0fabf9f":"markdown","d8b8d5b9":"markdown","958857ad":"markdown","dc02339d":"markdown","d027900b":"markdown","9c5be35e":"markdown","41b2ec89":"markdown","f70a2e86":"markdown","45b046da":"markdown","972041e4":"markdown","8e70d83d":"markdown","cb456d7d":"markdown","b69fd67b":"markdown","4b374e83":"markdown"},"source":{"6a811a46":"# Interactive Mode\n2+3\n# Halt interactive session by pressing Ctrl-D(Mac or Unix) or Ctrl-Z(Windows)\n\n#print(2 plus three) #Syntax Error\n\n#print(2 +\n\n2+3 #print 2+3 - comments - ignored by python system - mainly for human reader","0338920a":"# addition\n50 + 10","1dcf0e0c":"# subtraction\n50 - 10","76e3b5b3":"# multiplication\n50 * 10","7130af81":"# exponentiation\n2 ** 3","b6ec75a7":"# division\n5\/2","23bf0d0f":"# integer division\n5\/\/2","e287d8dd":"# modulo operator\n9 % 2","a465c28c":"# Built-in Types \/ Scalar\n\n# Integer - Counting numbers (positive or negative)\n# Python does not place an upper bound on size of integers\n#  L in output for Long result\n\n\nprint(\"Integers\")\nprint(9999999999+1)\n\n# Floating point - decimal oint and fractional part\n2.4+3.7\n\n# Scientific notation  (e or E) integer represents power of 10\nprint(2.3e3)\nprint(2.3e47+5.2e46)\nprint(1.0+2.3e47)\n\n\n# For Integers, result part is quotienst and remainder is thrown away\nprint(5\/2)\nprint(5\/\/2)\n\nprint(\"Float\")\n# For Floating point, result part is Floating point\nprint(5.0\/2.0)\n\n# When one argument is Integer and other is float,\n# then result is converted to Float\nprint(5.0\/2)\nprint(5\/2.0)\n\n\n### Numeric Types\n\n#Types int and float\n#A type is a set of **values** and **operations** that can be performed on those values.\n\n#Two of Python's numeric types:\n\n#**int: integer**\n#For example: 3, 4, 894, 0, -3, -18\n\n#**float: floating point number (an approximation to a real number)**\n#For example: 5.6, 7.342, 53452.0, 0.0, -89.34, -9.5\n\n\nprint(\"String\")\n# It can use either single quotes or double quotes,\n# which is useful when a String must use Quotation marks\n\nprint(\"hello\")\nprint('hi there')\nprint(\"dont't do that\")\nprint('I said, \"Stop right now\"')\n\n\nprint(\"Boolean\")\n# True and False are Boolean constants,\n# Boolean value is produced by relational operators\n\nprint(17<21)\n\nprint((2\/3)<(3\/5))\n\n# Logical operators (and,or,not) work with Boolean valued expressions\nprint(True and False)\nprint(True or False)\n\n\n\n# Other Built-in types\n# Complex numbers(J instead of i for square root of -1)\n\n# Lists, Tuples, Dictionaries, functions and classes","1fc69eb1":"# Names (Variables)\n# Computers manipulate lot of information ,\n# So name can be associated with value by assignment Statement\n\n\n# Name must begin with a letter or underscore and\n# can include any number of letters, digts and underscores\n\n# Name cannot begin with a digit and\n# it cannot include any caharacters other than letters, digts and underscores\n\nname = 'Fred'\ncount = 7\n\nprint(name)\nprint(count)\n\nname = \"Sally\" #name gets value Sally\ncount = count+2\nprint(name)\nprint(count)\n\nname = 5.0\/2\nprint(name)\n\n# We use names for functions,programs, modules and other objects\n# Name  must be short, easy and evocative of the purpose of values they\n# represent.\n","2c8fc244":"# Operators\n# Built-in types bring with it a set of operators\n\n# Binary operators appear between 2 arguments as in 2+3\n\n# + - * ** \/ \/\/ %\n# << >>\n# & | ^\n# < >  <= >= != <>\n\nprint('abc'*3)\n\n# Unary operators\n# + - ~\nx=1\nprint(~x) #arithmetic inverse of value stored  in variable x\n\n# precedence rules - oreder in which opeartors are evaluated (overridden by ())\n# associativity rules - two opearators with same precedence are used one after other\nprint(9-(5-2))\nprint((9-5)-2)\nprint((12\/2)*3)\nprint(12\/(2*3))\n\n# Operators with text name\n\n#Logical operations\n# and, or , not\nprint((3<7) and (4<5))\nprint((3<2) or (6>4))\nprint(not(3<7))\n\n# in = Whether a character value is found in string\nprint('a' in 'abc')\nprint('z' in 'abc')\n\n# Function calls (Built-in)\n# OperatorName(arg1,arg2)","02bf3343":"# 3) + 2 * 4 # uncomment and execute this code to find error","68b0d617":"89.4\/0","80072f28":"# Program to find greatest among three numbers. Assume they all are unequal numbers using input function.","9cce8a86":"num1\u00a0= int(input('enter\u00a0number\u00a01'))\nnum2\u00a0=\u00a0int(input('enter\u00a0number\u00a02;'))\nnum3\u00a0=\u00a0int(input('enter\u00a0number\u00a03;'))","14215c44":"\nif\u00a0(num1\u00a0>\u00a0num2)\u00a0and\u00a0(num1\u00a0>\u00a0num3):\n\u00a0\u00a0\u00a0\u00a0largest=\u00a0num1\nelif\u00a0(num2\u00a0>\u00a0num1)\u00a0and\u00a0(num2\u00a0>\u00a0num3):\n\u00a0\u00a0\u00a0\u00a0largest=\u00a0num2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nelse:\n\u00a0\u00a0\u00a0\u00a0largest=\u00a0num3\u00a0","e0fabf9f":"# Python Operators","d8b8d5b9":"# References\n1. Book \"Exploring Python TATA McGRAW-HILL EDITION\" by Timothy A. Budd","958857ad":"#### Arithmetic Operators","dc02339d":"1.Download and install Python 3 from https:\/\/www.python.org\/\n\n\n2.Linux users: use your package manager to install Python 3.4.3.\nWindows users: choose the \"Windows x86 MSI Installer\" from the downloads page.\nMac users: choose the \"Mac OS X 64-bit\/32-bit installer\" from the downloads page. Also install ActiveTCL 8.6.4.\n\n3.Bookmark the Python Standard Library, which contains descriptions of many Python features. \n\n\n\nThe programming environment we use is IDLE, the software we use to write Python programs. IDLE comes with Python.\n","d027900b":"# Python Variables \/ Names","9c5be35e":"A semantic error occurs when an instruction with invalid semantics is executed. For example:","41b2ec89":"## Python as a calculator","f70a2e86":"#### Arithmetic Operator Precedence\n\nWhen multiple operators are combined in a single expression, the operations are evaluated in order of precedence.\n\nOperator                        Precedence\n============================= \n**                              highest\n-  (negation)                   next\n*, \/, \/\/, %                     next\n+ (addition), - (subtraction)   lowest\n","45b046da":"# Getting started","972041e4":"# Introduction","8e70d83d":"## Steps to download and install Python ","cb456d7d":"# Python Data Types ","b69fd67b":"### Syntax and Semantics\n\n**Syntax**: the rules that describe valid combinations of Python symbols\n\n**Semantics**: the meaning of a combination of Python symbols is the meaning of an instruction \u2014 what a particular combination of symbols does when you execute it.\n\n**Errors**\nA syntax error occurs when we an instruction with invalid syntax is executed. For example:","4b374e83":"# Interactive mode"}}