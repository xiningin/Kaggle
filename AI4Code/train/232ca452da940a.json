{"cell_type":{"25f25f33":"code","2ac618f9":"code","3d68db62":"code","198aa240":"code","0f502a83":"code","89cadd34":"code","5b8d8f26":"code","6de8fb0e":"markdown","aad14437":"markdown","44cb8bd9":"markdown","855e2155":"markdown","2f7730a1":"markdown","ec2fd3df":"markdown"},"source":{"25f25f33":"import pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\nimport catboost as cb\n\n\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","2ac618f9":"df_train = pd.read_csv(TRAIN_CSV)\ndf_train.head()","3d68db62":"df_asset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\ndf_asset_details","198aa240":"# Two new features from the competition tutorial\ndef upper_shadow(df):\n    return df['High'] - np.maximum(df['Close'], df['Open'])\n\ndef lower_shadow(df):\n    return np.minimum(df['Close'], df['Open']) - df['Low']\n\n# A utility function to build features from the original df\n# It works for rows to, so we can reutilize it.\ndef get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feat['upper_Shadow'] = upper_shadow(df_feat)\n    df_feat['lower_Shadow'] = lower_shadow(df_feat)\n    df_feat[\"high_div_low\"] = df_feat[\"High\"] \/ df_feat[\"Low\"]\n    #df_feat[\"open_sub_close\"] = df_feat[\"Open\"] - df_feat[\"Close\"]\n    df_feat['trade']=df_feat['Close']-df_feat['Open']\n    df_feat['gtrade']=df_feat['trade']\/df_feat['Count']\n    df_feat['shadow1']=df_feat['trade']\/df_feat['Volume']\n    #df_feat['shadow2']=df_feat['upper_Shadow']\/df['Low']\n    df_feat['shadow3']=df_feat['upper_Shadow']\/df['Volume']\n    #df_feat['shadow4']=df_feat['lower_Shadow']\/df['High']\n    df_feat['shadow5']=df_feat['lower_Shadow']\/df['Volume']\n    return df_feat\n\ndef get_Xy_and_model_for_asset(df_train, asset_id):\n    df = df_train[df_train[\"Asset_ID\"] == asset_id]\n    \n    # TODO: Try different features here!\n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n    \n    # TODO: Try different models here!\n    model =LGBMRegressor(n_estimators=10000,num_leaves=750,learning_rate=0.09)\n    model.fit(X, y)\n    return X, y, model","0f502a83":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y, model = get_Xy_and_model_for_asset(df_train, asset_id)    \n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model","89cadd34":"# Check the model interface\nx = get_features(df_train.iloc[1])\ny_pred = models[0].predict([x])\ny_pred[0]","5b8d8f26":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = get_features(row)\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)","6de8fb0e":"# Import and load dfs\n\nReferences: [Tutorial to the G-Research Crypto Competition](https:\/\/www.kaggle.com\/cstein06\/tutorial-to-the-g-research-crypto-competition)","aad14437":"## Loop over all assets","44cb8bd9":"## Utility functions to train a model for one asset","855e2155":"# \ud83e\ude99 G-Research Crypto - Starter LGBM Pipeline\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/30894\/logos\/header.png)\n\n\n### Just a simple pipeline going from zero to a valid submission\n\nWe train one `LGBMRegressor` for each asset over a very very naive set of features (the input dataframe `['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']`), we get the predictions correctly using the iterator and we submit. No validation for now, no cross validation... nothing at all lol: just the bare pipeline!\n\n\n## Please _DO_ upvote if you find this useful!\n\n## References:\n* [Detailed API Introduction](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)\n* [Basic Submission Template](https:\/\/www.kaggle.com\/sohier\/basic-submission-template)\n* [Tutorial to the G-Research Crypto Competition](https:\/\/www.kaggle.com\/cstein06\/tutorial-to-the-g-research-crypto-competition)\n\n\n\n__Changelog__\n\n__V5__: Added two non-timely features from the tutorial: `Upper_Shadow` and `Lower_Shadow`","2f7730a1":"# Training","ec2fd3df":"# Predict & submit\n\nReferences: [Detailed API Introduction](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)\n\nSomething that helped me understand this iterator was adding a pdb checkpoint inside of the for loop:\n\n```python\nimport pdb; pdb.set_trace()\n```\n\nSee [Python Debugging With Pdb](https:\/\/realpython.com\/python-debugging-pdb\/) if you want to use it and you don't know how to.\n"}}