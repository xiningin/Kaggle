{"cell_type":{"561ab128":"code","d133bdeb":"code","632e9648":"code","c531495a":"code","b5234016":"code","40ec6a6b":"code","10ffd054":"code","1fa6d7b3":"code","92f06b3b":"code","9375dfaf":"code","2b6547de":"code","01077dc0":"code","e67be017":"code","46043164":"code","da5195f4":"code","cd3e0ef4":"code","8618c917":"code","0b097366":"code","92403c93":"code","0b3f0fe7":"code","50dad94b":"code","283a37c2":"code","8493adbd":"code","1bd505d6":"code","3506c22f":"code","71900d94":"code","2822439e":"code","a91cb130":"markdown","7c82780d":"markdown","4e7223f9":"markdown","d01f53d0":"markdown","7a2bf1b8":"markdown","d77c135a":"markdown","3db411ea":"markdown","0ecbde37":"markdown","93e44ff4":"markdown","d55c743b":"markdown","a57c8951":"markdown","57e6d98d":"markdown","483d1612":"markdown","8a440bdb":"markdown","2bb0ef03":"markdown","ea00ef95":"markdown","5732c684":"markdown","4536a424":"markdown","72a2c1c1":"markdown","f9d40fd2":"markdown"},"source":{"561ab128":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","d133bdeb":"df = pd.read_csv(\"..\/input\/telecom_churn.csv\")\ndf.head()","632e9648":"df.info()","c531495a":"df.nunique()","b5234016":"Analyze the values displaying in boolean columns","40ec6a6b":"df['Churn'].value_counts()","10ffd054":"df['Churn'].value_counts(normalize=True)","1fa6d7b3":"df.describe(include=['object','bool'])","92f06b3b":"df.sort_values(by='Total day charge',ascending=False).head()","9375dfaf":"df.sort_values(by=['Total day charge','Total night charge','Total intl charge'],\n               ascending=[True,False,True]).reset_index().head(10)","2b6547de":"avg_day_charge = df[df['Churn'] == False].mean()['Total day charge']\n","01077dc0":"df[(df['Churn'] == True) & (df['Total day charge'] > avg_day_charge)]","e67be017":"df[df['Churn'] == 1].mean()","46043164":"df.loc[0:5,'State':'Area code']","da5195f4":"df.iloc[0:6,0:3]","cd3e0ef4":"df.iloc[:1]","8618c917":"df[:1]","0b097366":"df[-1:]","92403c93":"df.iloc[-1:]","0b3f0fe7":"df.apply(np.max)","50dad94b":"df.max()","283a37c2":"df[df['State'].apply(lambda x:x[0:1]=='W')].head()","8493adbd":"d = {'No' : False, 'Yes' : True}\ndf['International plan'] = df['International plan'].map(d)\ndf.head()","1bd505d6":"df = df.replace({'Voice mail plan': d})\ndf.head()","3506c22f":"df.groupby(['State','Area code','International plan','Voice mail plan'])['Number vmail messages','Total day minutes'].sum().head(20)","71900d94":"df.groupby(['State','Area code','International plan','Voice mail plan'])['Number vmail messages','Total day minutes'].agg([np.mean,np.min,np.max]).head(20)","2822439e":"df.groupby(['State','Area code','International plan','Voice mail plan'])['Number vmail messages','Total day minutes'].agg([np.mean,np.min,np.max]).reset_index().head(20)","a91cb130":"Average value of dataframe for churn =1","7c82780d":"Get the datatype of each column, number of rows, columns and missing values in each column","4e7223f9":"DataFrames can be indexed by column name (label) or row name (index) or by the serial number of a row. The loc method is used for indexing by name, while iloc() is used for indexing by number.\n\nIn the first case below, we say \"give us the values of the rows with index from 0 to 5 (inclusive) and columns labeled from State to Area code (inclusive)\". In the second case, we say \"give us the values of the first five rows in the first three columns\" (as in a typical Python slice: the maximal value is not included).","d01f53d0":"Here we applied only sum function to the columns to show","7a2bf1b8":"To display the result of aggregate function in table format.","d77c135a":"Sorting with Multiple columns","3db411ea":"Exploring data retrieval","0ecbde37":"Get the unique values available in each columns. it helps to identify which column can be a categorical one.","93e44ff4":"To find maximum value in each column","d55c743b":"import the dataset","a57c8951":"The map method can be used to replace values in a column by passing a dictionary of the form {old_value: new_value} as its argument:\n\nSeries.map(arg, na_action=None)[source]\nMap values of Series according to input correspondence.\n\nUsed for substituting each value in a Series with another value, that may be derived from a function, a dict or a Series.","57e6d98d":"**We can create a summary, by 3 different functions.**\n1. Group By\n2. Cross tab\n3. Pivot\nPlease refer the following page https:\/\/pbpython.com\/pandas-crosstab.html to get more insight. Now we will discuss each.","483d1612":"If we need the first or the last line of the data frame, we can use the df[:1] or df[-1:] construct:","8a440bdb":"There are 298 churn users who paid more than non churn user","2bb0ef03":"To explore the sorting function","ea00ef95":"Grouping\nIn general, grouping data in Pandas works as follows:\n\ndf.groupby(by=grouping_columns)[columns_to_show].function()\n\nFirst, the groupby method divides the grouping_columns by their values. They become a new index in the resulting dataframe.\n\nThen, columns of interest are selected (columns_to_show). If columns_to_show is not included, all non groupby clauses will be included.\n\n","5732c684":"The apply method can also be used to apply a function to each row. To do this, specify axis=1. Lambda functions are very convenient in such scenarios. For example, if we need to select all states starting with W, we can do it like this:","4536a424":"The same thing can be done with the replace method:","72a2c1c1":"If we want to display more aggregate function in each columns, we need to apply them explicitly by using numpy function","f9d40fd2":"Applying Functions to Cells, Columns and Rows\nTo apply functions to each column, use apply():"}}