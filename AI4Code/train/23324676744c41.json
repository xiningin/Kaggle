{"cell_type":{"5c9ef2c9":"code","8a96d469":"code","bdd7724a":"code","63f7d9de":"code","29078db2":"code","b955d4ed":"code","d5c0b1aa":"code","88566d00":"code","3bd26f49":"code","66ca8361":"code","08fc8578":"code","8f0a52a1":"code","64e97c0d":"code","018246ab":"code","8b61dd49":"code","29a5e63d":"code","c780ac65":"code","474b622f":"code","129d96c6":"code","c968881b":"code","3d07b0a9":"code","8aa078a4":"code","7a67d455":"code","7de32f32":"code","f7b11690":"code","1ba3a23f":"code","37194f6a":"code","3ce50fa7":"markdown","baaf021c":"markdown","3b3bdff0":"markdown","84d75747":"markdown","414fc358":"markdown","11b82625":"markdown","9c284d8e":"markdown","9474af3a":"markdown","96a02638":"markdown","7f2cf270":"markdown","9ff98b25":"markdown","c35011b2":"markdown","6e095386":"markdown"},"source":{"5c9ef2c9":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pandas_profiling import ProfileReport\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8a96d469":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv')","bdd7724a":"train.head()","63f7d9de":"test.head()","29078db2":"submission","b955d4ed":"train.shape","d5c0b1aa":"test.shape","88566d00":"train_profile = ProfileReport(train, title='Pandas Profiling Report', html={'style':{'full_width':True}})\ntrain_profile","3bd26f49":"test_profile = ProfileReport(test, title='Pandas Profiling Report', html={'style':{'full_width':True}})\ntest_profile","66ca8361":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n#for_modeling\nimport lightgbm as lgb\n\n#for_plot\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\n\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nimport gc","08fc8578":"train['month'] = train['Date'].str.extract(r'[0-9]+[-]([0-9]+)[-]')\ntrain['day'] = train['Date'].str.extract(r'[0-9]+[-][0-9]+[-]([0-9]+)')\ntrain = train.drop('Date', axis = 1)\n\ntest['month'] = test['Date'].str.extract(r'[0-9]+[-]([0-9]+)[-]')\ntest['day'] = test['Date'].str.extract(r'[0-9]+[-][0-9]+[-]([0-9]+)')\ntest = test.drop('Date', axis = 1)","8f0a52a1":"def get_seed(x):\n    return int(x[0:2])\ntrain['month'] = train['month'].map(lambda x: get_seed(x))\ntrain['day'] = train['day'].map(lambda x: get_seed(x))\n\n\ndef get_seed(x):\n    return int(x[0:2])\ntest['month'] = test['month'].map(lambda x: get_seed(x))\ntest['day'] = test['day'].map(lambda x: get_seed(x))","64e97c0d":"x_train_drop = train.drop(['Province\/State','Country\/Region','ConfirmedCases','Fatalities'],axis=1)\ny_train_drop = train.drop(['Province\/State','Country\/Region','Id','Province\/State','Country\/Region','Lat','Long','month','day'],axis=1)","018246ab":"test_drop = test.drop(['Province\/State','Country\/Region'],axis=1)","8b61dd49":"x_train_drop","29a5e63d":"y_train_drop","c780ac65":"import lightgbm as lgb\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nimport numpy as np","474b622f":"import lightgbm as lgb\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.multioutput import MultiOutputRegressor\n\n\nimport numpy as np","129d96c6":"X_train, X_test, y_train, y_test = train_test_split(x_train_drop, y_train_drop)\n\n# Train the model with the above parameters\n# model = MultiOutputRegressor(lgb.LGBMRegressor()) #def\nmodel = MultiOutputRegressor(lgb.LGBMRegressor(num_leaves=100, max_depth=-1,n_estimators=200,learning_rate=0.01))\nmodel.fit(X_train, y_train)\n\n\n# Predict divided learning data\ny_pred = []\ny_pred = model.predict(X_test)\n\n# RMSE \nmse = mean_squared_error(y_test, y_pred)\nrmse = np.sqrt(mse)\nprint(rmse)","c968881b":"from sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\nr2","3d07b0a9":"# testdata Precict\nsubmission_pred = []\nsubmission_pred = model.predict(test_drop)","8aa078a4":"submission_drop = submission.drop(['ConfirmedCases','Fatalities'],axis=1)","7a67d455":"import pandas as pd\nfrom pandas import Series, DataFrame","7de32f32":"submission_drop_df = DataFrame(submission_drop)\nsubmission_pred_df = DataFrame(submission_pred)","f7b11690":"submission_pred_df.columns = ['ConfirmedCases', 'Fatalities']\nsubmission_pred_df","1ba3a23f":"submission_df = pd.merge(submission_drop_df, submission_pred_df,left_index=True,right_index=True)\nsubmission_df","37194f6a":"submission_df.to_csv(\"submission.csv\", index=False)","3ce50fa7":"Time series data will be digitized so that LGBM can process it.","baaf021c":" ##\u3000Time series processing","3b3bdff0":"Train Summary\nData shape **16188**\n\nCountry\/Region\nDistinct count\t**163**\n\n\nWhen arranged in descending order<p>\nUS\t: **2494** <p>\nChina :\t **1419** <p>\nCanada :\t **473** <p>\nAustralia :\t **387** <p>\nFrance :\t**344** <p>  other","84d75747":"# 4.Predict (lightgbm\/MultiOutputRegressor)","414fc358":"#  3.EDA\nPandas-profiling performs exploratory data analysis with a single line of code. \nThe following are mainly organized: Statistics, histograms, occurrences.","11b82625":"# Summary\nThis is one of the two complementary forecasting tasks to predict COVID-19 spread.<p>\nPerid:March 25 and April 22 by region<p>\nTaget:Global forecasting confirmed cases and fatalities<p>\n*The primary goal isn't to produce accurate forecasts. ","9c284d8e":"1. ![2020-03-20_11h03_58.png](attachment:2020-03-20_11h03_58.png)","9474af3a":"Thank you for watching.\nIf you like it, please \"UPVOTE\". I am very encouraged. Let's all look forward to Kaggle!","96a02638":"#  1.Import","7f2cf270":"ProfileReport takes a long time to execute.","9ff98b25":"#### 4.Predict","c35011b2":"Algorithm considerations\n\nThere are several ways to output other labels in regression prediction.\n\nIdea 1. Adopt Regressor which originally \nThis is simple.Scikit-learn's RandomForest is typical, but there are some that originally support other label output.\nIf this is used, it is okay to give data with multiple labels as learning data.\n\nIdea 2. Using a neural network\nSince the number of hidden layers and output layers can be changed in a neural network, multi-label output is possible by changing the number of output layers.\n\nIdea 3. Using MultiOutputRegressor of scikit-learn\nIf you use this, you can also output Regressor that does not support multi-label output\n\nThis time, we use Idea3, which has few Notebooks.","6e095386":"#  2.Read data"}}