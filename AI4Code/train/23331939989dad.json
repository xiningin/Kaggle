{"cell_type":{"8bd153c6":"code","05e298a2":"code","b593977f":"code","46f7b2cd":"code","1a5ca5ba":"code","bb48752e":"code","ad9ffc24":"code","c9f86ba1":"code","7b7db9ef":"code","68e804db":"code","83a9d437":"code","5abebc49":"code","5e1945ed":"code","4b2a3690":"code","8589cf3b":"code","c51c664e":"code","5cbf2337":"code","37426a75":"code","f177ab71":"code","225032a4":"code","1ec5f358":"code","d2d47b6a":"code","f3ca2d97":"code","30f48fd0":"code","e18eb72b":"code","f3670d49":"code","92fb1a62":"code","664d1190":"code","78823d2e":"code","917d4dd3":"code","721088f9":"code","25a4fcd8":"code","01f6023c":"code","e8e7f46f":"code","0ec59fba":"code","57ba0c92":"code","a629665e":"code","64f9f776":"code","dd0eafbd":"code","6892a148":"code","00ab0a41":"code","b8b3bbc5":"code","1850b8fe":"code","d54b43f4":"code","cfaf8541":"code","5c09519c":"code","a91cc8ed":"code","049f3abb":"markdown","25144d96":"markdown","fe2d27be":"markdown","851bd0f9":"markdown","10a697c3":"markdown","c950ec67":"markdown","5911e1d2":"markdown","8d061322":"markdown","27bc6013":"markdown","fb9edf60":"markdown","7af92f5a":"markdown","d204e928":"markdown","9b5bafb5":"markdown","438d8a4d":"markdown","5dc8f22e":"markdown","48948862":"markdown","dc9d790e":"markdown","32519a58":"markdown","b8371af7":"markdown"},"source":{"8bd153c6":"%matplotlib inline\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score","05e298a2":"titanic_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntitanic_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntitanic_gen = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n","b593977f":"df1 = pd.concat([titanic_test, titanic_gen['Survived']],  axis=1)\ndf2 = titanic_train\ndf = pd.concat([df1, df2])\ndf.info()","46f7b2cd":"titanic_train.info()\n\nprint('****'*30)\n\ntitanic_test.info()","1a5ca5ba":"titanic_train.head()","bb48752e":"titanic_test.head()","ad9ffc24":"print(titanic_train.shape)\nprint(titanic_test.shape)","c9f86ba1":"titanic_train.info()","7b7db9ef":"titanic_test.info()","68e804db":"titanic_train.describe()","83a9d437":"titanic_test.describe()","5abebc49":"# function to identify missing value from all features\n\ndef missing_data(dataset):\n    total = dataset.isnull().sum().sort_values(ascending=False)\n    percent = (dataset.isnull().sum()\/dataset.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total,percent], axis=1, keys=['Total','Percent'])\n    return missing_data\n\nprint(' # Missing values from titanic_train dataset')\n\nmissing_data_train = missing_data(titanic_train)\nprint(missing_data_train)","5e1945ed":"\n\n\nprint(' # Missing values from titanic_test dataset')\n\nmissing_data_test1 = missing_data(titanic_test)\nprint(missing_data_test1)","4b2a3690":"# function to drop missing value \ndef drop_missing(dataset, missing, values):\n    dataset = dataset.drop((missing[missing['Percent'] > values]).index, axis = 1)\n    print(dataset.isnull().sum().sort_values(ascending = False))\n    return dataset\n\ntitanic_train = drop_missing(titanic_train, missing_data_train, 0.60)","8589cf3b":"titanic_test = drop_missing(titanic_test, missing_data_test1, 0.60)","c51c664e":"# fuction to identify numeric feature\ndef numeric_features(dataset):\n    numeric_col = dataset.select_dtypes(include=np.number).columns.tolist()\n    return dataset[numeric_col].head()\n\nnumeric_col= numeric_features(titanic_train)\nprint(\"Numeric features for train:\")\nprint(numeric_col)","5cbf2337":"numeric_col1= numeric_features(titanic_test)\nprint(\"Numeric features for test:\")\nprint(numeric_col1)","37426a75":"# fuction to identify categorial feature\ndef categorial_features(dataset):\n    categorial_col = dataset.select_dtypes(exclude=np.number).columns.tolist()\n    return dataset[categorial_col].head()\n\n\ncategorial_col = categorial_features(titanic_train)\nprint(\"categorial features for train:\")\nprint(categorial_col)","f177ab71":"categorial_col1 = categorial_features(titanic_test)\nprint(\"categorial features for test:\")\nprint(categorial_col1)","225032a4":"def check_datatypes(dataset):\n    return dataset.dtypes\n\ncheck_datatypes(titanic_train)","1ec5f358":"check_datatypes(titanic_test)","d2d47b6a":"# to impute null value\ntitanic_train['Age'] = titanic_train['Age'].fillna(titanic_train['Age'].mean() )\ntitanic_test['Age'] = titanic_train['Age'].fillna(titanic_test['Age'].mean() )\ntitanic_test['Fare'] = titanic_train['Fare'].fillna(titanic_test['Fare'].mean() )","f3ca2d97":"titanic_train['Embarked'].value_counts(normalize = True)","30f48fd0":"titanic_train['Embarked'].fillna('s', inplace= True)","e18eb72b":"# find the relationship on titanic_train dataset\nplt.figure(figsize=(15,6))\nsns.heatmap(titanic_train.corr(), annot=True)","f3670d49":"sns.pairplot(titanic_train)","92fb1a62":"titanic_train.drop([\"Name\",\"Ticket\"], axis=1, inplace=True)\ntitanic_test.drop([\"Name\",  \"Ticket\"], axis=1, inplace=True)","664d1190":"from sklearn import preprocessing \nlb = preprocessing.LabelEncoder()\ntitanic_train['Embarked'] = lb.fit_transform(titanic_train['Embarked'])\ntitanic_train['Sex'] = lb.fit_transform(titanic_train['Sex'])\ntitanic_train.head()","78823d2e":"titanic_test['Embarked'] = lb.fit_transform(titanic_test['Embarked'])\ntitanic_test['Sex'] = lb.fit_transform(titanic_test['Sex'])\ntitanic_test.head()","917d4dd3":"df1 = pd.concat([titanic_test, titanic_gen['Survived']],  axis=1)\ndf2 = titanic_train\ndf = pd.concat([df1, df2])\ndf.info()","721088f9":"df['Age'].plot.hist()","25a4fcd8":"sns.countplot('Sex', data=df).set_title('male_female_count')\n","01f6023c":"sns.countplot('SibSp', data=df).set_title('SibSp')","e8e7f46f":"sns.countplot('Pclass', data=df).set_title('Pclass')","0ec59fba":"sns.countplot('Parch', data=df).set_title('Parch')","57ba0c92":"sns.countplot('Embarked', data=df).set_title('Embarked')","a629665e":"sns.countplot('Survived', data=df).set_title('survived_count')","64f9f776":"sns.jointplot(x='Age',y='Survived',data=df,color='red',kind='kde');","dd0eafbd":"titanic_train = pd.DataFrame(titanic_train)\ntitanic_test = pd.DataFrame(titanic_test)\n\n# dependent and independent variable\nx_titanic_train = titanic_train.drop(['PassengerId', 'Survived'], axis = 1)\ny_titanic_train = titanic_train['Survived']\n\nx_titanic_test = titanic_test.drop(['PassengerId'], axis=1)\ny_test = titanic_gen.drop(['PassengerId'], axis =1)\n\n\n\n\nx_titanic_train.shape, y_titanic_train.shape, x_titanic_test.shape, y_test.shape","6892a148":"classifier = LogisticRegression(solver = 'liblinear', random_state=0)\nclassifier.fit(x_titanic_train,y_titanic_train)","00ab0a41":"y_pred = classifier.predict(x_titanic_test)","b8b3bbc5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import  VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\nlr = classifier\nrf = RandomForestClassifier()\nsv = SVC()\n\nvc = VotingClassifier(estimators=[('lr', classifier), ('rf' ,rf), ('sv', sv), ('dt', dt)], voting='hard')\nvc.fit(x_titanic_train,y_titanic_train)","1850b8fe":"# here we calculate accuracy rate of our model\nfor clf in ( lr,rf, sv, dt, vc):\n    clf.fit(x_titanic_train,y_titanic_train)\n    y_pred = clf.predict(x_titanic_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))","d54b43f4":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_pred, y_test))\nprint('MSE:', metrics.mean_squared_error(y_pred, y_test))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_pred, y_test)))","cfaf8541":"confusion_matrix(y_test, y_pred)","5c09519c":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","a91cc8ed":"ids = titanic_gen[['PassengerId']]\nids2 = pd.DataFrame({ 'Survived' : y_pred})\nids['Survived'] = ids2\nsubmission_file = ids\n\nsubmission_file.to_csv('.\/submission_file.csv' , index=False)","049f3abb":"# Change categorial features into  Numeric Feature","25144d96":"# Identify Categorial Feature","fe2d27be":"# Package Import","851bd0f9":"# kaggle competition : Titanic Disaster","10a697c3":"# Submission_File","c950ec67":"# Identify Missing Value","5911e1d2":"# Project Requirement\n1. IDE : Google Colab \/ Jupyter Notebook\n2. Language : Python","8d061322":"# Identify Numeric Feature","27bc6013":"# content\n1. Introduction\n2. Project Requirement\n3. package import\n4. load and prepare data\n5. Identify Missing Value\n6. Dropping missing values\n7. Identify Numeric Feature\n8. Identify Categorial Feature\n9. Check DataType Of Features\n10. Fill null values in continuous features\n11. Correlation of Features and Feature Selection\n12. Change categorial features into Numeric Feature\n13. Building Model\n14. classification model\n15. Evaluation\n16. Submission_File","fb9edf60":"# visualiztion","7af92f5a":"# Evaluation","d204e928":"# Correlation of Features and  Feature Selection","9b5bafb5":"# Building Model","438d8a4d":"# Dropping missing values\nThere are two methods of dealing with missing data\n\n- Dropping them\n- Imputing them.\nDepending on the case we can allow a specific proportion of missing values, beyond which we might want to drop the variable from analysis.","5dc8f22e":"# classification model","48948862":"# Introduction\nThe sinking of Titanic is one of the most infamous shipwreck in history. Here we will build Machine learning Model that predicts which passengers survived in Titanic shipwreck.","dc9d790e":"# Fill null values in continuous features","32519a58":"# Load and prepare the data\n- In this task, we'll load the dataframe in pandas, drop the unnecessary columns and display the top five rows of the dataset.","b8371af7":"# Check Data Type Of Features"}}