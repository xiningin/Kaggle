{"cell_type":{"aae2eedd":"code","0cd55955":"code","ab4a5f00":"code","06a673f0":"code","7eb66953":"code","4c67de9a":"code","1aaca965":"code","7800aa81":"code","c6f534df":"code","56056d91":"code","9c8e79e1":"code","e440f8db":"code","afa6ee84":"code","3c467307":"code","2e7b4119":"code","4d78f765":"code","c65beafc":"code","3cc9d780":"code","ea13354f":"markdown","9bd8792c":"markdown","2735143b":"markdown","6b2496e2":"markdown","e4cc9b7f":"markdown","b3fe3e29":"markdown","9e16f4ee":"markdown","51d01350":"markdown","51378e48":"markdown","fc226b1a":"markdown","e9639e4c":"markdown","5e63a83a":"markdown","cf730b64":"markdown","ee64fc3e":"markdown","33b5c69c":"markdown","13884450":"markdown"},"source":{"aae2eedd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cd55955":"import pandas as pd\ndf_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","ab4a5f00":"df_train[0:5]","06a673f0":"df_test[0:5]","7eb66953":"X = df_train.drop(columns = ['label'])\ny = df_train['label']","4c67de9a":"X = X\/255","1aaca965":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nX_train.shape,y_train.shape, X_test.shape,y_test.shape ","7800aa81":"import tensorflow as tf","c6f534df":"tf.random.set_seed(42)\n\nmodel = tf.keras.Sequential([\n    \n    tf.keras.layers.Dense(1000, activation=\"relu\"),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(784, activation=\"relu\"),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(400, activation=\"relu\"),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(200, activation=\"relu\"),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10, activation=\"softmax\")\n    \n])\n\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n                 optimizer=tf.keras.optimizers.Adam(lr=0.001), # ideal learning rate (same as default)\n                 metrics=[\"accuracy\"])\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    epochs=30,\n    validation_data=(X_test, y_test)\n)","56056d91":"pd.DataFrame(history.history).plot()","9c8e79e1":"model.evaluate(X_test, y_test)","e440f8db":"predictions = model.predict(X_test)\ny_preds = predictions.argmax(axis =1)","afa6ee84":"# Note: The following confusion matrix code is a remix of Scikit-Learn's \n# plot_confusion_matrix function - https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.plot_confusion_matrix.html\n# and Made with ML's introductory notebook - https:\/\/github.com\/GokuMohandas\/MadeWithML\/blob\/main\/notebooks\/08_Neural_Networks.ipynb\nimport itertools\nfrom sklearn.metrics import confusion_matrix\n\n# Our function needs a different name to sklearn's plot_confusion_matrix\ndef make_confusion_matrix(y_true, y_pred, classes=None, figsize=(10, 10), text_size=15): \n  \"\"\"Makes a labelled confusion matrix comparing predictions and ground truth labels.\n\n  If classes is passed, confusion matrix will be labelled, if not, integer class values\n  will be used.\n\n  Args:\n    y_true: Array of truth labels (must be same shape as y_pred).\n    y_pred: Array of predicted labels (must be same shape as y_true).\n    classes: Array of class labels (e.g. string form). If `None`, integer labels are used.\n    figsize: Size of output figure (default=(10, 10)).\n    text_size: Size of output figure text (default=15).\n  \n  Returns:\n    A labelled confusion matrix plot comparing y_true and y_pred.\n\n  Example usage:\n    make_confusion_matrix(y_true=test_labels, # ground truth test labels\n                          y_pred=y_preds, # predicted labels\n                          classes=class_names, # array of class label names\n                          figsize=(15, 15),\n                          text_size=10)\n  \"\"\"  \n  # Create the confustion matrix\n  cm = confusion_matrix(y_true, y_pred)\n  cm_norm = cm.astype(\"float\") \/ cm.sum(axis=1)[:, np.newaxis] # normalize it\n  n_classes = cm.shape[0] # find the number of classes we're dealing with\n\n  # Plot the figure and make it pretty\n  fig, ax = plt.subplots(figsize=figsize)\n  cax = ax.matshow(cm, cmap=plt.cm.Blues) # colors will represent how 'correct' a class is, darker == better\n  fig.colorbar(cax)\n\n  # Are there a list of classes?\n  if classes:\n    labels = classes\n  else:\n    labels = np.arange(cm.shape[0])\n  \n  # Label the axes\n  ax.set(title=\"Confusion Matrix\",\n         xlabel=\"Predicted label\",\n         ylabel=\"True label\",\n         xticks=np.arange(n_classes), # create enough axis slots for each class\n         yticks=np.arange(n_classes), \n         xticklabels=labels, # axes will labeled with class names (if they exist) or ints\n         yticklabels=labels)\n  \n  # Make x-axis labels appear on bottom\n  ax.xaxis.set_label_position(\"bottom\")\n  ax.xaxis.tick_bottom()\n\n  # Set the threshold for different colors\n  threshold = (cm.max() + cm.min()) \/ 2.\n\n  # Plot the text on each cell\n  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, f\"{cm[i, j]} ({cm_norm[i, j]*100:.1f}%)\",\n             horizontalalignment=\"center\",\n             color=\"white\" if cm[i, j] > threshold else \"black\",\n             size=text_size)","3c467307":"class_names = ['0', '1', '2', '3', '4', \n               '5', '6', '7', '8', '9']","2e7b4119":"import matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix\n\nmake_confusion_matrix(y_true=y_test, \n                      y_pred=y_preds,\n                      classes=class_names,\n                      figsize=(15, 15),\n                      text_size=10)","4d78f765":"df_test = df_test \/ 225\n\npredictions = model.predict(df_test)\n\ny_preds = predictions.argmax(axis =1)\n\n#all_results = pd.DataFrame(ImageId, y_preds)\ny_preds.transpose()","c65beafc":"a_list = list(range(1, 28001))\nall_results = pd.DataFrame(y_preds)","3cc9d780":"def create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\nfrom IPython.display import HTML\nimport base64\ncreate_download_link(all_results)","ea13354f":"# Create the data for the model and labels","9bd8792c":"# Predict the values for the test data from test.csv file","2735143b":"# Print the test data","6b2496e2":"# Custom Confusion Matrix Function","e4cc9b7f":"# Import TensorFlow","b3fe3e29":"# Load the Data","9e16f4ee":"# Normalize the data for better accuracy","51d01350":"# Buid the model and train it for 30 epochs","51378e48":"# BOOM! Got 97.935% Accuracy on Test Dataset","fc226b1a":"# Evaluate the model","e9639e4c":"# Print the train data","5e63a83a":"# Split the dataset for train and val","cf730b64":"# Plot the Accuracy and Loss Graphs","ee64fc3e":"# Downloading the values as the CSV file","33b5c69c":"# Predict the values of the test dataset","13884450":"# Plot the Matrix for clear understanding"}}