{"cell_type":{"b6602444":"code","0a8df12c":"code","e08c4558":"code","2746b15e":"code","31196599":"code","211f239d":"code","371e092c":"code","a5d8e1e9":"code","8b58b132":"code","2fd757a1":"code","9f8247b5":"code","e3f17a37":"code","dfa7993c":"code","cbd2ae01":"code","bf9bef59":"code","a8fe8d1e":"code","4f6aa8a9":"code","92decf41":"code","2444c08e":"code","50a63a54":"code","e0514293":"code","18992474":"code","80565cff":"code","0044b2e8":"code","1dc8ddec":"code","6a2074f4":"code","3dee8479":"code","c4f5a72e":"code","a69797ba":"code","5ae04565":"code","4b264461":"code","cb2d575a":"code","a9ed4e89":"code","55d3f35b":"code","f47e6e24":"markdown"},"source":{"b6602444":"import numpy as np \nimport pandas as pd \nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.pylab as plt\nfrom matplotlib.pylab import rcParams\nfrom datetime import datetime","0a8df12c":"data=pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ndata.head()","e08c4558":"data1= data.groupby(['Date','Country_Region'])[['ConfirmedCases','Fatalities']].sum().reset_index()\ndata2= data1[data1['Country_Region']=='Bangladesh']\ndata2.drop(data2[data2['ConfirmedCases']==0].index,inplace=True)\ndata2['Newcases']=data2['ConfirmedCases']-data2['ConfirmedCases'].shift(1)\ndata2['New']= data2['Newcases'].rolling(window=3).mean()\ndata2.drop(data2[data2['Date']<='2020-03-14'].index,inplace=True)\nbd_data=data2.drop(['Country_Region','ConfirmedCases','Fatalities','Newcases'], axis = 1)\nbd_data.head()\n","2746b15e":"bd_data['Date']= pd.to_datetime(bd_data['Date'])\ndata_fi=bd_data.set_index('Date')\nplt.xlabel('Date')\nplt.ylabel('NewCases')\nplt.plot(data_fi['New'])","31196599":"data_fi.dropna(inplace=True)\nrolmean = data_fi['New'].rolling(window=4).mean()\nrolstd = data_fi['New'].rolling(window =4).std()","211f239d":"from statsmodels.tsa.stattools import adfuller\nprint('Dicky fuller taste')\ndftest = adfuller(data_fi['New'],autolag='AIC')\ndfout = pd.Series(dftest[0:4],index=['Test statistics','P-value','Lags used','Number of observations'])\nfor key,values in dftest[4].items():\n    dfout['Critical values(%s)'%key]=values\nprint(dfout)","371e092c":"train2_logscale = np.log(data_fi['New'])\ntrain2_logscale.dropna(inplace=True)\nplt.plot(train2_logscale)","a5d8e1e9":"movingAverage = train2_logscale.rolling(window=4).mean()\nmovingSTD = train2_logscale.rolling(window =4).std()\nplt.plot(train2_logscale)\nplt.plot(movingAverage,color='red')","8b58b132":"tm_log_avg = train2_logscale-movingAverage\ntm_log_avg.dropna(inplace=True)\ndef test_stationary(timeseries):\n    movingAverage =timeseries.rolling(window=2).mean()\n    movingSTD = timeseries.rolling(window=2).std()\n    orig = plt.plot(timeseries,color='blue',label='Orginal')\n    avg = plt.plot(movingAverage,color='black',label='Moving Average')\n    std = plt.plot(movingSTD,color='red',label='Rollong std')\n    plt.legend(loc='best')\n    plt.title('Rolling mean and rolling std')\n    plt.show()\n    \n    print('Dicky fuller taste')\n    dftest = adfuller(data_fi['New'],autolag='AIC')\n    dfout = pd.Series(dftest[0:4],index=['Test statistics','P-value','#Lags used','Number of observations'])\n    for key,values in dftest[4].items():\n        dfout['Critical values(%s)'%key]=values\n        print(dfout)","2fd757a1":"test_stationary(tm_log_avg)","9f8247b5":"exponential= train2_logscale.ewm(halflife=1,min_periods=0,adjust=True).mean()\nplt.plot(train2_logscale)\nplt.plot(exponential, color='red')\n","e3f17a37":"mexponential = train2_logscale-exponential\nmexponential.head(12)\ntest_stationary(mexponential)\n","dfa7993c":"datashifting = train2_logscale-train2_logscale.shift(1)\nplt.plot(datashifting)","cbd2ae01":"datashifting.dropna(inplace=True)\ntest_stationary(datashifting)","bf9bef59":"train2_logscale.dropna(inplace=True)\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nimport statsmodels.api as sm\n\ndecompose = seasonal_decompose(train2_logscale)\n\ntrend = decompose.trend\nseasonal=decompose.seasonal\nresidual=decompose.resid\n\nplt.subplot(411)\nplt.plot(train2_logscale,label='original')\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend,label='trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal,label='seasonal')\nplt.legend(loc='best')\nplt.subplot(414)\nplt.plot(residual,label='residual')\nplt.legend(loc='best')\nplt.tight_layout()\n\ndecomposelog= residual\ndecomposelog.dropna(inplace=True)\ntest_stationary(decomposelog)","a8fe8d1e":"decomposedlogdata = residual\ndecomposedlogdata.dropna(inplace=True)\ntest_stationary(decomposedlogdata)","4f6aa8a9":"from statsmodels.tsa.stattools import acf, pacf\n\nlag_acf=acf(datashifting, nlags=20)\nlag_pacf=pacf(datashifting, nlags=20, method='ols')\n\nplt.figure(figsize=(20,10))\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='green')\nplt.axhline(y=-1.96\/np.sqrt(len(datashifting)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(datashifting)),linestyle='--',color='green')\nplt.title('Autocorrelation Function')\n\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='green')\nplt.axhline(y=-1.96\/np.sqrt(len(datashifting)),linestyle='--',color='green')\nplt.axhline(y=1.96\/np.sqrt(len(datashifting)),linestyle='--',color='green')\nplt.title('Partial Autocorrelation Function')","92decf41":"from statsmodels.tsa.arima_model import ARIMA\nmodel =ARIMA(train2_logscale,order=(2,1,1))\nresults_ARIMA=model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_ARIMA.fittedvalues,color='red')\nplt.title('RSS:%4F'%sum(results_ARIMA.fittedvalues - datashifting**2))\nprint('Plotting AR model')","2444c08e":"from statsmodels.tsa.arima_model import ARIMA\nmodel =ARIMA(train2_logscale,order=(2,1,0))\nresults_AR=model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_AR.fittedvalues,color='red')\nplt.title('RSS:%4F'%sum(results_AR.fittedvalues - datashifting**2))\nprint('Plotting AR model')","50a63a54":"from statsmodels.tsa.arima_model import ARIMA\nmodel =ARIMA(train2_logscale,order=(2,2,1))\nresults_MA=model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results_MA.fittedvalues,color='red')\nplt.title('RSS:%4F'%sum(results_MA.fittedvalues - datashifting**2))\nprint('Plotting AR model')","e0514293":"from statsmodels.tsa.arima_model import ARIMA\nmodel =ARIMA(train2_logscale,order=(2,0,1))\nresults=model.fit(disp=-1)\nplt.plot(datashifting)\nplt.plot(results.fittedvalues,color='red')\nplt.title('RSS:%4F'%sum(results.fittedvalues - datashifting**2))\nprint('Plotting AR model')","18992474":"predictions_ARIMA_diff= pd.Series(results_ARIMA.fittedvalues,copy=True)\nprint(predictions_ARIMA_diff.head())","80565cff":"prediction_ARIMA_log=pd.Series(train2_logscale.ix[0],index= train2_logscale.index)\nprediction_ARIMA_log=prediction_ARIMA_log.add(predictions_ARIMA_diff,fill_value=0)\nprediction_ARIMA_log.head()","0044b2e8":"sns.set(rc={'figure.figsize':(16, 8)})\npredictions_ARIMA = np.exp(prediction_ARIMA_log)\nplt.plot(data_fi)\nplt.plot(predictions_ARIMA)","1dc8ddec":"predictions_ARIMA_diff= pd.Series(results_AR.fittedvalues,copy=True)\nprediction_ARIMA_log=pd.Series(train2_logscale.ix[0],index= train2_logscale.index)\nprediction_ARIMA_log=prediction_ARIMA_log.add(predictions_ARIMA_diff,fill_value=0)\nsns.set(rc={'figure.figsize':(16, 8)})\npredictions_ARIMA = np.exp(prediction_ARIMA_log)\nplt.plot(data_fi)\nplt.plot(predictions_ARIMA)","6a2074f4":"predictions_ARIMA_diff= pd.Series(results_MA.fittedvalues,copy=True)\nprediction_ARIMA_log=pd.Series(train2_logscale.ix[0],index= train2_logscale.index)\nprediction_ARIMA_log=prediction_ARIMA_log.add(predictions_ARIMA_diff,fill_value=0)\nsns.set(rc={'figure.figsize':(16, 8)})\npredictions_ARIMA = np.exp(prediction_ARIMA_log)\nplt.plot(data_fi)\nplt.plot(predictions_ARIMA)","3dee8479":"predictions_ARIMA_diff= pd.Series(results_ARIMA.fittedvalues,copy=True)\nprint(predictions_ARIMA_diff.head())","c4f5a72e":"predictions_ARIMA_diff= pd.Series(results.fittedvalues,copy=True)\nprediction_ARIMA_log=pd.Series(train2_logscale.ix[0],index= train2_logscale.index)\nprediction_ARIMA_log=prediction_ARIMA_log.add(predictions_ARIMA_diff,fill_value=0)\nsns.set(rc={'figure.figsize':(16, 8)})\npredictions_ARIMA = np.exp(prediction_ARIMA_log)\nplt.plot(data_fi)\nplt.plot(predictions_ARIMA)","a69797ba":"results.plot_predict(1,70)\nx=results.forecast(steps=70)\n","5ae04565":"values0=x[0][::-1]\nvalues0=np.exp(values0)\nvalues1=x[1]\nvalues1=np.exp(values1)\nvalues= np.concatenate((values1,values0)) \nvalues","4b264461":"x0=np.array(x[0])\nx1=np.array(x[1])\nx2=np.array(x[2])\n\nx1=np.exp(x1)\nx0=np.exp(x0)\nx2=np.exp(x2)","cb2d575a":"def date_to_value(m,d):\n   if m==4:\n      x=d-13\n   elif m==5:\n       x=d+17\n   elif m==6:\n       x=+30+17\n   else:\n       x=0    \n   return x    \n\n\ndef get_forcating(x0,x1,x2,i):\n  if i==0:\n    print('Out of range')\n  else:  \n      v=x0[i]+x1[i]+x2[i,1]+x2[i,0]\n      v1=v\/4\n      return v1\n","a9ed4e89":"n1=date_to_value(5,25)\nprint(\"the numeric value for the date is %d\"%n1)","55d3f35b":"y=get_forcating(x0,x1,x2,n1)\nprint(\"The projected cases for  25-5-2020 is %d\"%int(y))","f47e6e24":"# ****If we want to predict cases in a specific  day providing day(d) and month (m) we will convert date into a number to get prediction on that day"}}