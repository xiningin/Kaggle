{"cell_type":{"2eda860c":"code","aeff411e":"code","8cdbacaf":"code","797b704f":"code","42a7689b":"code","780e231f":"code","f804c5cd":"code","d2679c8a":"code","8d810fe5":"code","18cf04a3":"code","2490f715":"code","162f8425":"code","58134cf0":"code","84e52691":"markdown"},"source":{"2eda860c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aeff411e":"import numpy as np\nimport random\nimport pandas as pd\nfrom matplotlib.pylab import rc\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport os \nfrom scipy import stats\n\nimport sklearn\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Embedding, Dense, LSTM\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, LSTM, concatenate, Activation\nfrom keras.layers import Conv1D, BatchNormalization, GlobalAveragePooling1D, Permute, Dropout\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom sklearn.model_selection import train_test_split \n## csv:\ndata_path = \"\/kaggle\/input\/itkg-version1\/\"\nmyfile_vertices = \"node_md5.csv\"\nmyfile_edges = \"relation_md5.csv\"\n\npd.set_option('display.max_rows', 15)","8cdbacaf":"nodes = pd.read_csv(data_path + myfile_vertices, delimiter= \",\")\nedges = pd.read_csv(data_path + myfile_edges, delimiter = \",\")\n# read properties:\nproperty_file_names = []\nfor file in os.listdir(data_path):\n    if \"property\" in file:\n        property_file_names.append(file)\nproperty_file_names = np.array(property_file_names)\n\n# nodes[\"entity:ID\"].loc[nodes[\"entity:ID\"] == \"144804e2a84605044cb4cbbe50683f7b\"].index\nnames = nodes[\":LABEL\"].value_counts().index.to_list()\nrelation_names = edges[\":TYPE\"].value_counts().index.to_list()\nclass_idx = {}\nrelation_idx = {}\nfor i in range(len(names)):\n    class_idx[names[i]] = i\n    \nfor i in range(len(relation_names)):\n    relation_idx[relation_names[i]] = i\n    \ntemp = []\nfor i in range(nodes.shape[0]):\n    temp.append(names.index(nodes.loc[i][\":LABEL\"]))\nnodes[\"label\"] = temp\nclass_idx\n\nid_to_ind = {}\nfor i in range(nodes.shape[0]):\n    id_to_ind[nodes[\"entity:ID\"][i]] = i\n    \n# adjacency matrix\nadjacency_matrix = np.zeros((nodes.shape[0], nodes.shape[0]))\nfor i in range(edges.shape[0]):\n    m = id_to_ind[edges[\":START_ID\"][i]]\n    n = id_to_ind[edges[\":END_ID\"][i]]\n    adjacency_matrix[m, n] = 1\n    \n## add relation type:\nnode_features_relation = np.ones(nodes.shape[0])\nfor i in range(edges.shape[0]):\n    m = id_to_ind[edges[\":START_ID\"][i]]\n    n = id_to_ind[edges[\":END_ID\"][i]]\n    node_features_relation[m] = relation_idx[edges[\":TYPE\"][i]]\nnode_features_relation = np.array(node_features_relation)\n\n\n# Create an edges array (sparse adjacency matrix) of shape [2, num_edges].\nedges_idx = []\nfor i in range(edges.shape[0]):\n    edges_idx.append([id_to_ind[edges[\":START_ID\"][i]],id_to_ind[edges[\":END_ID\"][i]]])\nedges_idx = np.array(edges_idx).T\nedges_idx = tf.cast(edges_idx, dtype=tf.dtypes.int32)\n# Create an edge weights array of ones: may update it later:\nedge_weights = tf.ones(shape=edges_idx.shape[1])\n\n\n# Create a node features array of shape [num_nodes, num_features].\nnode_features = np.zeros((nodes.shape[0], 10))\nnode_features[:, 0] = np.nansum(adjacency_matrix, axis = 1)\n# node_features[:, 1] = node_features_relation\n## Optional to add relation type\n# add relation type:\nnode_features[:, 1] = node_features_relation\n\nnode_features = tf.cast(node_features , dtype=tf.dtypes.float32)\n\n# Create graph info tuple with node_features, edges, and edge_weights.\nmax_node = max(np.array(edges_idx).ravel()) + 1\ngraph_info = (node_features[:max_node], edges_idx, edge_weights)\n\n# node_id\nnode_id = []\nfor i in range(max_node):\n    node_id.append(id_to_ind[nodes[\"entity:ID\"][i]])\nnode_id = np.array(node_id, dtype = int)\n","797b704f":"X = np.c_[adjacency_matrix, node_features]\ny = adjacency_matrix\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, shuffle=True)\n\n","42a7689b":"# traditional Auto-encoder classifier:\n# This model will tell whether the adjacency unit is 0 or 1:\n\n# pending\nprint(\"traditional Auto-encoder classifier\")\n# traditional Auto-encoder\n# This is an auto-encoder regressor: This will output continuous values\n\nn_hidden = 512\ndropout = 0.3\nearly_stopping = keras.callbacks.EarlyStopping(\n        monitor=\"mean_squared_error\", patience=50, restore_best_weights=True)\n\ndef build_model(x_dim, y_dim):\n    \"\"\"\n    kernel_regularizer=tf.keras.regularizers.L1(0.01),\n    activity_regularizer=tf.keras.regularizers.L2(0.01)\n    \n    \"\"\"\n    ip = Input(shape=(x_dim,))\n    x = ip\n    #x = Dense(4 * n_hidden, activation='relu')(x)\n    #x = Dropout(0.8)(x)\n    x = BatchNormalization()(x)\n    x = Dense(2 * n_hidden, activation='relu')(x)\n    x = Dropout(0.8)(x)\n\n    x = BatchNormalization()(x)\n    x = Dense(n_hidden, activation='relu')(x)\n    x = Dropout(0.8)(x)\n\n    x = BatchNormalization()(x)\n    out = Dense(y_dim, activation='sigmoid')(x)\n\n    model = Model(ip, out)\n    return model\n","780e231f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, shuffle=True)\n","f804c5cd":"\nmodel = build_model(X_train.shape[1],y_train.shape[1])\nmodel.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=False), optimizer='adam')\n","d2679c8a":"model.summary()","8d810fe5":"n_epoch = 500\nbatch_size = 128\nearly_stopping = keras.callbacks.EarlyStopping(\n        monitor=\"val_loss\", patience=50, restore_best_weights=True)\n\nhistory = model.fit(X_train, y_train, epochs=n_epoch, batch_size=batch_size, verbose=0, validation_split=0.15, callbacks = [early_stopping], shuffle= True)","18cf04a3":"# Predict the adjacency matrix:\n\ny_pred = model.predict(X_test, verbose=0)\nthreshold = 0.5\nmask = y_pred > threshold\ny_pred[mask] = 1\ny_pred[~mask] = 0\n\n## link prediction accuracy: (not for evaluation since acc doesn't mean anything for ultra imbalance sample)\nmask = y_pred == y_test\nmask = np.array(mask,dtype=int)\n\nprint(\"link prediction accuracy %.4f percent for %d possible links\"%(100 * np.nansum(mask)\/len(mask.ravel()), len(mask.ravel())))\nprint(\"%d links are predicted as wrong links\"%(int((1- np.nansum(mask)\/len(mask.ravel()))*len(mask.ravel()))))","2490f715":"## Maybe we should use F1 score since it's an ultra imbalance problem:\n\nf1 = sklearn.metrics.f1_score(y_pred.ravel(), y_test.ravel())\nprecision = sklearn.metrics.precision_score(y_pred.ravel(), y_test.ravel())\nrecall = sklearn.metrics.recall_score(y_pred.ravel(), y_test.ravel())\nprint(\"F1 score = %.2f precision = %.2f recall = %.2f\"%(f1, precision, recall))","162f8425":"# Predict the adjacency matrix:\n\ny_pred = model.predict(X_train, verbose=0)\nthreshold = 0.5\nmask = y_pred > threshold\ny_pred[mask] = 1\ny_pred[~mask] = 0\n\n## link prediction accuracy: (not for evaluation since acc doesn't mean anything for ultra imbalance sample)\nmask = y_pred == y_train\nmask = np.array(mask,dtype=int)\nprint(\"Training set\")\nprint(\"link prediction accuracy %.4f percent for %d possible links\"%(100 * np.nansum(mask)\/len(mask.ravel()), len(mask.ravel())))\nprint(\"%d links are predicted as wrong links\"%(int((1- np.nansum(mask)\/len(mask.ravel()))*len(mask.ravel()))))\n\n## Maybe we should use F1 score since it's an ultra imbalance problem:\n\nf1 = sklearn.metrics.f1_score(y_pred.ravel(), y_train.ravel())\nprecision = sklearn.metrics.precision_score(y_pred.ravel(), y_train.ravel())\nrecall = sklearn.metrics.recall_score(y_pred.ravel(), y_train.ravel())\nprint(\"F1 score = %.2f precision = %.2f recall = %.2f\"%(f1, precision, recall))","58134cf0":"plt.plot(np.log10(history.history[\"loss\"]),label = \"loss\")\nplt.plot(np.log10(history.history[\"val_loss\"]),label = \"val_loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"log10 (loss)\")\nplt.legend()","84e52691":"## Apply GAE to learn the spatial structure of graph:\n### target: predict adjacency matrix as accurate as possible:\n### Evaluation: Link prediction accuracy:\n### reference: <br>\n[1] Wang, Yingfeng, et al. \"A simple training strategy for graph autoencoder.\" Proceedings of the 2020 12th International Conference on Machine Learning and Computing. 2020. <br>\n[2] Kipf, Thomas N., and Max Welling. \"Variational graph auto-encoders.\" arXiv preprint arXiv:1611.07308 (2016).\n\n### VGAE pending\n"}}