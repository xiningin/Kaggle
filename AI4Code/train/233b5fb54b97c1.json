{"cell_type":{"5226b178":"code","480e7fe6":"code","997a9669":"code","de55b0c9":"code","2a165086":"code","d5deaca2":"code","cd570d3f":"code","389cbdcd":"code","182d55e4":"code","424546c7":"code","7571315e":"code","94a084f8":"code","063b4753":"code","95755ba7":"code","2487e3e5":"code","3f0907be":"code","88916cde":"code","b742e429":"code","487ac10c":"code","5a5df2ef":"code","f482c27e":"code","3131354a":"code","be429c2d":"code","43e80419":"code","48ad652a":"code","c19d7f08":"code","a9d65d6f":"code","61e5ffc6":"code","7f199c22":"code","d75f311e":"code","164b5cc4":"code","475f2506":"code","d4286763":"code","ce1e1c3a":"code","567c534f":"code","2b341882":"code","30b280e6":"code","5a67f296":"code","2923b00e":"code","9fd7c6bb":"code","f41389ad":"code","f7536bf5":"code","017b9d0d":"code","1682c3e4":"code","12585e7b":"code","c5083d9a":"code","2277af0f":"code","297ad7aa":"code","75035427":"code","0642b978":"code","a420f268":"code","2c5ff596":"code","040a137c":"code","6f4bffe7":"code","83c9a909":"code","0f902a3f":"code","35d2b120":"code","c260a7df":"code","de6ace07":"code","718456c3":"code","fafa6929":"code","fdd3153c":"code","a3dcce0b":"code","37a5435b":"code","43938608":"code","b627e9d1":"code","272e3abb":"code","aaa5054a":"code","1bb87d1f":"code","49ceb797":"code","78eb2746":"code","ed5cc8bc":"code","5c3b768d":"code","046f07a1":"code","e6049da9":"code","3ca15e42":"code","f07763df":"code","9b449488":"code","2a509d85":"code","198ed9c2":"code","83929055":"code","c000bb20":"code","fb3ebc98":"code","45347831":"code","bcf03763":"code","8f6d08b1":"code","14aa1b2f":"code","48c193c2":"code","0eece4e9":"code","8bea30d4":"code","2e05d893":"code","a66c3c22":"code","0427db27":"code","e01a860f":"code","6eb1f4fd":"code","5af11440":"code","2abc015d":"markdown","b6deb63d":"markdown","dc0cff8d":"markdown","fe701c1d":"markdown","80ef197b":"markdown","48abbacd":"markdown","1fc68b7f":"markdown","f0132d86":"markdown","5a3c9010":"markdown","ce56cd24":"markdown","b551b91c":"markdown","afd7373d":"markdown","c964af28":"markdown","117bfe4c":"markdown","d7c8542c":"markdown","570456fd":"markdown","5511bf55":"markdown","f3a8e31f":"markdown","01f8b62c":"markdown","eb18c49b":"markdown","dedd32c8":"markdown","01ef78bf":"markdown","9b848c8a":"markdown","2b12939a":"markdown","2dec9c6d":"markdown","d25a7255":"markdown","82ecd33a":"markdown","5b1a050f":"markdown","666872a3":"markdown","2e368c1d":"markdown","e3cbcec8":"markdown","bb2e627a":"markdown","6fe6402f":"markdown","bb5f0c6a":"markdown","681a89ee":"markdown","de77bc2d":"markdown","0ee5171e":"markdown","c5a47cec":"markdown","21edef70":"markdown","edc417b8":"markdown","9a070003":"markdown","994b123e":"markdown","e832b752":"markdown","9ce43685":"markdown","555ec7fa":"markdown","24c185cb":"markdown","93e18c40":"markdown","2b87b3f2":"markdown","6f595391":"markdown","69564e70":"markdown","58776e31":"markdown","1d81ed9b":"markdown","3f4cabfc":"markdown"},"source":{"5226b178":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling # display summury of data\nimport matplotlib.pyplot as plt # Plot library\nimport seaborn as sns # Plot library\nfrom sklearn.model_selection import train_test_split # Split library to help dividing data to train and validation.\nfrom sklearn.metrics import mean_absolute_error # Error metric to measure performance \nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer # Imputation Library\nfrom sklearn.ensemble import ExtraTreesRegressor # IterativeImputer estimator parameter.\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","480e7fe6":"train_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","997a9669":"train_data.info()","de55b0c9":"train_data.isnull().sum()","2a165086":"survive_overall = train_data['Survived'].value_counts()\nprint(\"Survival Number : \", survive_overall[0])\nprint(\"Not Survival Number: \", survive_overall[1])","d5deaca2":"survive_overall_rate = survive_overall.loc[1]\/(survive_overall.loc[0] + survive_overall.loc[1]) * 100\nprint(\"Overall Survival Rate is : {}%\".format(survive_overall_rate))","cd570d3f":"survive_by_sex = train_data.groupby(by='Sex').Survived.value_counts()\nprint(\"Female Survival Number: \", survive_by_sex.loc['female', 1])\nprint(\"Female Not Survival Number: \", survive_by_sex.loc['female', 0])\nprint(\"Male Survival Number: \", survive_by_sex.loc['male', 1])\nprint(\"Male Not Survival Number: \", survive_by_sex.loc['male', 0])","389cbdcd":"survive_by_sex.index","182d55e4":"survive_female_rate = survive_by_sex.loc['female', 1]\/(survive_by_sex.loc['female', 1] + survive_by_sex.loc['female', 0])*100\nsurvive_male_rate = survive_by_sex.loc['male', 1]\/(survive_by_sex.loc['male', 1] + survive_by_sex.loc['male', 0])*100\nprint(\"Female survival rate: \",\"%.2f\" % survive_female_rate,\"%\")\nprint(\"Male survival rate: \",\"%.2f\" % survive_male_rate,\"%\")","424546c7":"labels = ['Male', 'Female']\nsurvived = [survive_by_sex.loc['male', 1], survive_by_sex.loc['female', 1]]\nnot_survived = [survive_by_sex.loc['male', 0], survive_by_sex.loc['female', 0]]\n\n\nplt.figure(figsize = (10, 5), dpi = 100)\nwidth = 0.1  # the width of the bars\n\nbar1 = plt.bar([0, 0.3], width=width, height=survived, color='blue', align='edge')\nbar2 = plt.bar([0.1, 0.4], width=width, height=not_survived, color='red', align='edge')\nplt.bar_label(container=bar1, padding=3, labels=survived)\nplt.bar_label(container=bar2, padding=3, labels=not_survived)\nplt.xticks([0.1, 0.4], labels)\nplt.xlabel('Sex')\nplt.ylabel('Counts')\nplt.title('Number of Survival by Sex')\nplt.legend(['Survived', 'Not Survived'])\nplt.show()","7571315e":"male_x = [survive_by_sex.loc['male', 1], survive_by_sex.loc['male', 0]]\nfemale_x = [survive_by_sex.loc['female', 1], survive_by_sex.loc['female', 0]]\nfig, ax = plt.subplots(1, 2, figsize=(10,10), dpi=100)\n\nax[0].pie(male_x, colors=['Blue', 'Red'], autopct='%1.1f%%', textprops=dict(size=15, color=\"white\"))\nax[0].legend(['Survived', 'Not Survived'])\nax[0].set(title='Male Survival Rate')\n\nax[1].pie(female_x, colors=['Blue', 'Red'], autopct='%1.1f%%', textprops=dict(size=15, color=\"white\"))\nax[1].legend(['Survived', 'Not Survived'])\nax[1].set(title='Female Survival Rate')\nplt.show()","94a084f8":"print('Oldest passanger age is: ',train_data.Age.max())\nprint('Yougest passager age is: ',train_data.Age.min())","063b4753":"ax = plt.subplots(figsize = (80,8))\nax = sns.countplot(x='Age', hue='Survived', data=train_data)","95755ba7":"age_group = pd.cut(train_data['Age'], bins=[0, 11, 16, 40, 62, 90], labels=['Child', 'Young', 'Young Adult', 'Adult', 'Old']) # Divide group to each bins.\ntrain_data_with_age_group = train_data.copy()\ntrain_data_with_age_group['AgeGroup'] = age_group","2487e3e5":"plt.figure(figsize = (10, 5), dpi = 100)\nax = sns.countplot(x='AgeGroup', hue='Survived', palette= [\"b\", \"r\"], data=train_data_with_age_group)\n\n# Display values on the plot\nfor p in ax.patches:\n    ax.annotate(text=p.get_height(), xy=(p.get_x()+0.2, p.get_height()+1000), horizontalalignment='center', verticalalignment='top', color='black', size=10)\n\nplt.title(\"Number of Survival by Age Group\", fontsize=20)    \nplt.xlabel('Age Group', fontsize=15)\nplt.ylabel('Counts', fontsize=15)\nplt.legend(['Survived', 'Not Survived'], fontsize=15)\nplt.show()","3f0907be":"survival_rate_age_group = train_data_with_age_group.groupby(by='AgeGroup').Survived.value_counts()\nsurvival_child_rate = survival_rate_age_group.loc['Child',1]\/(survival_rate_age_group.loc['Child',1]+survival_rate_age_group.loc['Child',0])*100\nsurvival_young_rate = survival_rate_age_group.loc['Young',1]\/(survival_rate_age_group.loc['Young',1]+survival_rate_age_group.loc['Young',0])*100\nsurvival_young_adult_rate = survival_rate_age_group.loc['Young Adult',1]\/(survival_rate_age_group.loc['Young Adult',1]+survival_rate_age_group.loc['Young Adult',0])*100\nsurvival_adult_rate = survival_rate_age_group.loc['Adult',1]\/(survival_rate_age_group.loc['Adult',1]+survival_rate_age_group.loc['Adult',0])*100\nsurvival_old_rate = survival_rate_age_group.loc['Old',1]\/(survival_rate_age_group.loc['Old',1]+survival_rate_age_group.loc['Old',0])*100\nprint(\"Child Survival rate is: {:.2f}%\".format(survival_child_rate))\nprint(\"Young Survival rate is: {:.2f}%\".format(survival_young_rate))\nprint(\"Young Adult Survival rate is: {:.2f}%\".format(survival_young_adult_rate))\nprint(\"Adult Survival rate is: {:.2f}%\".format(survival_adult_rate))\nprint(\"Old Survival rate is: {:.2f}%\".format(survival_old_rate))","88916cde":"temp = train_data_with_age_group.groupby(by=['Sex', 'AgeGroup']).Survived.value_counts()\nmale_survive_by_age_group = temp.loc[temp.index.get_level_values('Sex') == 'male']\nfemale_survive_by_age_group = temp.loc[temp.index.get_level_values('Sex') == 'female']\n\nprint(male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 0])\nprint(\"\\n\")\nprint(female_survive_by_age_group.loc[female_survive_by_age_group.index.get_level_values(level=2) == 0])","b742e429":"fig, ax = plt.subplots(1, 2, figsize=(18,5), dpi=100)\nplt.suptitle(\"Survival Number by Age Group And Sex\", fontsize=20) # Set Overall title for figure\nwidth = 0.1  # the width of the bars\n\nbar1 = ax[0].bar([0, 0.3, 0.6, 0.9, 1.2], width=width, height=male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 0], color='blue', align='edge')\nbar2 = ax[0].bar([0.1, 0.4, 0.7, 1.0, 1.3], width=width, height=male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 1], color='red', align='edge')\nplt.sca(ax[0]) # Choose what subplot selected to apply option.\nplt.bar_label(container=bar1, padding=3, labels=male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 0])\nplt.bar_label(container=bar2, padding=3, labels=male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 1])\nplt.xticks([0.1, 0.4, 0.7, 1.0, 1.3], ['Child', 'Young', 'Young Adult', 'Adult', 'Old'])\n# plt.title('Survival vs Age Group')\nplt.xlabel('Male')\nplt.ylabel('Counts')\nplt.legend(['Survived', 'Not Survived'])\n\n\nbar3 = ax[1].bar([0, 0.3, 0.6, 0.9, 1.2], width=width, height=female_survive_by_age_group.loc[female_survive_by_age_group.index.get_level_values(level=2) == 0], color='blue', align='edge')\nbar4 = ax[1].bar([0.1, 0.4, 0.7, 1.0, 1.3], width=width, height=female_survive_by_age_group.loc[female_survive_by_age_group.index.get_level_values(level=2) == 1], color='red', align='edge')\nplt.sca(ax[1]) # Choose what subplot selected to apply option.\nplt.bar_label(container=bar3, padding=3, labels=female_survive_by_age_group.loc[female_survive_by_age_group.index.get_level_values(level=2) == 0])\nplt.bar_label(container=bar4, padding=3, labels=female_survive_by_age_group.loc[female_survive_by_age_group.index.get_level_values(level=2) == 1])\nplt.xticks([0.1, 0.4, 0.7, 1.0, 1.3], ['Child', 'Young', 'Young Adult', 'Adult', 'Old'])\n# plt.title('Survival vs Age Group')\nplt.xlabel('Female')\nplt.ylabel('Counts')\nplt.legend(['Survived', 'Not Survived'])\n\nplt.show()","487ac10c":"survival_rate_age_group_by_sex = train_data_with_age_group.groupby(by=['AgeGroup', 'Sex']).Survived.value_counts()\n\nchild_female_rate = survival_rate_age_group_by_sex.loc['Child','female',1]\/(survival_rate_age_group_by_sex.loc['Child','female',1] + survival_rate_age_group_by_sex.loc['Child','female',0])*100\nchild_male_rate = survival_rate_age_group_by_sex.loc['Child','male',1]\/(survival_rate_age_group_by_sex.loc['Child','male',1] + survival_rate_age_group_by_sex.loc['Child','male',0])*100\n\nyoung_female_rate = survival_rate_age_group_by_sex.loc['Young','female',1]\/(survival_rate_age_group_by_sex.loc['Young','female',1] + survival_rate_age_group_by_sex.loc['Young','female',0])*100\nyoung_male_rate = survival_rate_age_group_by_sex.loc['Young','male',1]\/(survival_rate_age_group_by_sex.loc['Young','male',1] + survival_rate_age_group_by_sex.loc['Young','male',0])*100\n\nyoung_adult_female_rate = survival_rate_age_group_by_sex.loc['Young Adult','female',1]\/(survival_rate_age_group_by_sex.loc['Young Adult','female',1] + survival_rate_age_group_by_sex.loc['Young Adult','female',0])*100\nyoung_adult_male_rate = survival_rate_age_group_by_sex.loc['Young Adult','male',1]\/(survival_rate_age_group_by_sex.loc['Young Adult','male',1] + survival_rate_age_group_by_sex.loc['Young Adult','male',0])*100\n\nadult_female_rate = survival_rate_age_group_by_sex.loc['Adult','female',1]\/(survival_rate_age_group_by_sex.loc['Adult','female',1] + survival_rate_age_group_by_sex.loc['Adult','female',0])*100\nadult_male_rate = survival_rate_age_group_by_sex.loc['Adult','male',1]\/(survival_rate_age_group_by_sex.loc['Adult','male',1] + survival_rate_age_group_by_sex.loc['Adult','male',0])*100\n\nold_female_rate = survival_rate_age_group_by_sex.loc['Old','female',1]\/(survival_rate_age_group_by_sex.loc['Old','female',1] + survival_rate_age_group_by_sex.loc['Old','female',0])*100\nold_male_rate = survival_rate_age_group_by_sex.loc['Old','male',1]\/(survival_rate_age_group_by_sex.loc['Old','male',1] + survival_rate_age_group_by_sex.loc['Old','male',0])*100","5a5df2ef":"print(\"Female Child Survival rate is: {:.2f}%\".format(child_female_rate))\nprint(\"Male Child Survival rate is: {:.2f}%\".format(child_male_rate))\nprint(\"Female Young Survival rate is: {:.2f}%\".format(young_female_rate))\nprint(\"Male Young Survival rate is: {:.2f}%\".format(young_male_rate))\nprint(\"Female Adult Young Survival rate is: {:.2f}%\".format(young_adult_female_rate))\nprint(\"Male Adult Young Survival rate is: {:.2f}%\".format(young_adult_male_rate))\nprint(\"Female Adult Survival rate is: {:.2f}%\".format(adult_female_rate))\nprint(\"Male Adult Survival rate is: {:.2f}%\".format(adult_male_rate))\nprint(\"Female Old Survival rate is: {:.2f}%\".format(old_female_rate))\nprint(\"Male Old Survival rate is: {:.2f}%\".format(old_male_rate))","f482c27e":"female_survival_rate = [child_female_rate, young_female_rate, young_adult_female_rate, adult_female_rate, old_female_rate]\nmale_survival_rate = [child_male_rate, young_male_rate, young_adult_male_rate, adult_male_rate, old_male_rate]\nage_group = ['Child', 'Young', 'Young Adult', 'Adult', 'Old']\n\nplt.figure(figsize = (10, 5), dpi = 100)\nplt.plot(age_group, male_survival_rate, label=\"Male\")\nplt.plot(age_group, female_survival_rate, label=\"Female\")\nplt.legend()\nplt.title(\"Survival Rate by Age Group\", fontsize=20)\nplt.xlabel('Age Group', fontsize=20)\nplt.ylabel('Survival Rate(%)', fontsize=20)\nplt.yticks([10, 20, 30, 40, 50, 60, 70, 80, 90])\n# plt.ylim(bottom=15, top=80)\n\n#Display number on top of the line\nfor i, v in enumerate(male_survival_rate):\n    plt.text(i, v+1, \"%d\" %v, ha=\"center\", fontsize=15)\nfor i, v in enumerate(female_survival_rate):\n    plt.text(i, v+1, \"%d\" %v, ha=\"center\", fontsize=15)\nplt.grid()\nplt.legend(fontsize=15)\nplt.show()","3131354a":"train_data_group_by_pclass = train_data.groupby(by='Pclass').Survived.value_counts()\n# train_data.groupby(by='Pclass').Survived.count()\n\nplt.figure(figsize = (8, 5), dpi = 100)\nplt.axes([0,0,1,1])\nplt.axis('equal')\npclass = ['First', 'Second', 'Third']\npassengers = [train_data.groupby(by='Pclass').Survived.count().loc[1], train_data.groupby(by='Pclass').Survived.count().loc[2], train_data.groupby(by='Pclass').Survived.count().loc[3]]\nplt.pie(passengers, labels = pclass, autopct='%.2f%%', textprops={'fontsize':15})\nplt.title(\"Population Ratio by Class\", fontsize=20)\nplt.legend(fontsize=15)\nplt.show()","be429c2d":"plt.figure(figsize = (10, 8), dpi = 100)\nax = sns.countplot(x='Pclass', hue='Survived', palette= [\"r\", \"b\"], data=train_data)\n# Display values on the plot\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+1000), ha='center', va='top', color='black', size=15)\n\nplt.title(\"Number of Survival by Class\", fontsize=20)\nplt.xlabel('Class', fontsize=20)\nplt.ylabel('Counts', fontsize=20)\nplt.legend(('Not Survived', 'Survived'), fontsize=15)\nplt.show()","43e80419":"survival_first_rate = train_data_group_by_pclass.loc[1, 1]\/(train_data_group_by_pclass.loc[1, 1]+train_data_group_by_pclass.loc[1, 0])*100\nsurvival_second_rate = train_data_group_by_pclass.loc[2, 1]\/(train_data_group_by_pclass.loc[2, 1]+train_data_group_by_pclass.loc[2, 0])*100\nsurvival_third_rate = train_data_group_by_pclass.loc[3, 1]\/(train_data_group_by_pclass.loc[3, 1]+train_data_group_by_pclass.loc[3, 0])*100\nsurvival_rate_by_class = [survival_first_rate, survival_second_rate, survival_third_rate]\nprint('First Class survival rate is : {:.2f}%'.format(survival_first_rate))\nprint('Second Class survival rate is : {:.2f}%'.format(survival_second_rate))\nprint('Third Class survival rate is : {:.2f}%'.format(survival_third_rate))","48ad652a":"plt.figure(figsize = (10, 5), dpi = 100)\nplt.plot(['First', 'Second', 'Third'], survival_rate_by_class, color='blue', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nfor i, v in enumerate(survival_rate_by_class):\n    plt.text(i+0.12, v, \"{:.2f}%\".format(v), ha=\"center\", fontsize=12)\nplt.title(\"Survival Rate by Class\", fontsize=20)\nplt.ylabel('Survival Rate(%)', fontsize=20)\nplt.grid()\nplt.show()","c19d7f08":"train_data.groupby(by=['Sex', 'Pclass']).Survived.value_counts()","a9d65d6f":"temp = train_data.groupby(by=['Sex', 'Pclass']).Survived.count()\npclass = ['First', 'Second', 'Third']\nmale_passengers = [temp.loc['male',1], temp.loc['male',2], temp.loc['male',3]]\nfemale_passengers = [temp.loc['female',1], temp.loc['female',2], temp.loc['female',3]]\n\nplt.figure(figsize = (10, 5), dpi = 100)\n\nplt.plot(['First', 'Second', 'Third'], male_passengers, color='green', marker='*', linestyle='-', linewidth=2, markersize=12)\nfor i, v in enumerate(male_passengers):\n    plt.text(i+0.12, v, \"{:,d}\".format(v), ha=\"center\", fontsize=12)\nplt.plot(['First', 'Second', 'Third'], female_passengers, color='pink', marker='o', linestyle='-', linewidth=2, markersize=12)\nfor i, v in enumerate(female_passengers):\n    plt.text(i+0.12, v, \"{:,d}\".format(v), ha=\"center\", fontsize=12)\n\nplt.title(\"Class\", fontsize=20)\nplt.ylabel('Number of Passengers', fontsize=20)\nplt.xticks(fontsize=15)\nformat_change = lambda x: \"{:,d}\".format(x) # Labmda fuction to change displya yticks format.\nyticks = [12000, 14000, 16000, 18000, 20000, 22000, 24000, 26000, 28000]\nplt.yticks(yticks, [format_change(i) for i in yticks], fontsize=15)\nplt.legend(['Male', 'Female'])\nplt.grid()\nplt.show()","61e5ffc6":"temp = train_data_with_age_group.groupby(by=['Sex', 'AgeGroup', 'Pclass']).Survived.count()\n# male_survive_by_age_group.loc[male_survive_by_age_group.index.get_level_values(level=2) == 0]\nmale_temp = temp.loc[temp.index.get_level_values(level=0) == 'male']\nfemale_temp = temp.loc[temp.index.get_level_values(level=0) == 'female']\n\n# print(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Child'])\n# temp.loc[temp.index.get_level_values(level=2) == 3]\n\nfig, ax = plt.subplots(1, 2, figsize=(15,8), dpi=100)\nplt.suptitle(\"Number of Passenger by Age Group & Class\", fontsize=20) # Set Overall title for figure\n\nax[0].plot(['First', 'Second', 'Third'], male_temp.loc[male_temp.index.get_level_values(level=1) == 'Child'], marker='8', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(male_temp.loc[female_temp.index.get_level_values(level=1) == 'Child']):\n    ax[0].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[0].plot(['First', 'Second', 'Third'], male_temp.loc[male_temp.index.get_level_values(level=1) == 'Young'], marker='s', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(male_temp.loc[male_temp.index.get_level_values(level=1) == 'Young']):\n    ax[0].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[0].plot(['First', 'Second', 'Third'], male_temp.loc[male_temp.index.get_level_values(level=1) == 'Young Adult'], marker='p', linestyle='dashdot', linewidth=3, markersize=15)\nfor i, v in enumerate(male_temp.loc[male_temp.index.get_level_values(level=1) == 'Young Adult']):\n    ax[0].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[0].plot(['First', 'Second', 'Third'], male_temp.loc[male_temp.index.get_level_values(level=1) == 'Adult'], marker='P', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(male_temp.loc[male_temp.index.get_level_values(level=1) == 'Adult']):\n    ax[0].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[0].plot(['First', 'Second', 'Third'], male_temp.loc[male_temp.index.get_level_values(level=1) == 'Old'], marker='*', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(male_temp.loc[male_temp.index.get_level_values(level=1) == 'Old']):\n    ax[0].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\nplt.sca(ax[0]) # Choose what subplot selected to apply option.\nplt.title('Number of Male Passenger by Class')\nplt.ylabel('Counts')\nplt.xlabel('Male')\nplt.legend(['Child', 'Young', 'Young Adult', 'Adult', 'Old'])\n\n\nax[1].plot(['First', 'Second', 'Third'], female_temp.loc[female_temp.index.get_level_values(level=1) == 'Child'], marker='8', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Child']):\n    ax[1].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[1].plot(['First', 'Second', 'Third'], female_temp.loc[female_temp.index.get_level_values(level=1) == 'Young'], marker='s', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Young']):\n    ax[1].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[1].plot(['First', 'Second', 'Third'], female_temp.loc[female_temp.index.get_level_values(level=1) == 'Young Adult'], marker='p', linestyle='dashdot', linewidth=3, markersize=15)\nfor i, v in enumerate(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Young Adult']):\n    ax[1].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[1].plot(['First', 'Second', 'Third'], female_temp.loc[female_temp.index.get_level_values(level=1) == 'Adult'], marker='P', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Adult']):\n    ax[1].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\n    \nax[1].plot(['First', 'Second', 'Third'], female_temp.loc[female_temp.index.get_level_values(level=1) == 'Old'], marker='*', linestyle='dotted', linewidth=2, markersize=12)\nfor i, v in enumerate(female_temp.loc[female_temp.index.get_level_values(level=1) == 'Old']):\n    ax[1].text(i-0.11, v, \"{:,d}\".format(v), ha=\"center\", fontsize=8)\nplt.sca(ax[1]) # Choose what subplot selected to apply option.\nplt.title('Number of Female Passenger by Class')\nplt.ylabel('Counts')\nplt.xlabel('Female')\nplt.legend(['Child', 'Young', 'Young Adult', 'Adult', 'Old'])\n\nplt.show()","7f199c22":"plt.figure(figsize = (10, 8), dpi = 100)\nax = sns.countplot(x='Embarked', hue='Survived', palette= [\"r\", \"b\"], data=train_data)\n# Display values on the plot\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+1500), ha='center', va='top', color='black', size=15)\n\nplt.title(\"Number of Survival by Embarked\", fontsize=20)\nplt.xlabel('Embarkred', fontsize=20)\nplt.ylabel('Counts', fontsize=20)\nplt.legend(('Not Survived', 'Survived'), fontsize=15)\nplt.show()","d75f311e":"temp = train_data.groupby(by='Embarked').Survived.value_counts()\nS_rate_C = temp.loc['C', 1] \/ (temp.loc['C', 1] + temp.loc['C',0]) * 100\nS_rate_S = temp.loc['S', 1] \/ (temp.loc['S', 1] + temp.loc['S',0]) * 100\nS_rate_Q = temp.loc['Q', 1] \/ (temp.loc['Q', 1] + temp.loc['Q',0]) * 100\nS_rate_by_Embarked = [S_rate_C, S_rate_S, S_rate_Q]\n\nprint('C survival rate is : {:.2f}%'.format(S_rate_by_Embarked[0]))\nprint('S survival rate is : {:.2f}%'.format(S_rate_by_Embarked[1]))\nprint('Q survival rate is : {:.2f}%'.format(S_rate_by_Embarked[2]))","164b5cc4":"plt.figure(figsize = (10, 5), dpi = 100)\nplt.plot(['C', 'S', 'Q'], S_rate_by_Embarked, color='blue', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nfor i, v in enumerate(S_rate_by_Embarked):\n    plt.text(i+0.12, v, \"{:.2f}%\".format(v), ha=\"center\", fontsize=12)\nplt.title(\"Survival Rate by Embarked\", fontsize=20)\nplt.ylabel('Survival Rate(%)', fontsize=20)\nplt.grid()","475f2506":"temp = train_data.groupby(by='Embarked').Sex.value_counts()\nprint(temp)","d4286763":"fig, ax = plt.subplots(1, 3, figsize=(20,5), dpi=100)\ngender = ['Female', 'Male']\n\nplt.suptitle(\"Sex Ratio by Embarked\", fontsize=15) # Set Overall title for figure\nC_passengers = [temp.loc['C', 'female'], temp.loc['C', 'male']]\nax[0].pie(C_passengers, labels = gender, autopct='%.2f%%', textprops={'fontsize':15})\nax[0].set_title(\"Sex Ratio on Embarked at C\", fontsize=12)\nax[0].legend(fontsize=15)\n\nS_passengers = [temp.loc['S', 'female'], temp.loc['S', 'male']]\nax[1].pie(S_passengers, labels = gender, autopct='%.2f%%', textprops={'fontsize':15})\nax[1].set_title(\"Sex Ratio on Embarked at S\", fontsize=12)\nax[1].legend(fontsize=15)\n\n\nQ_passengers = [temp.loc['Q', 'female'], temp.loc['Q', 'male']]\nax[2].pie(Q_passengers, labels = gender, autopct='%.2f%%', textprops={'fontsize':15})\nax[2].set_title(\"Sex Ratio on Embarked at Q\", fontsize=12)\nax[2].legend(fontsize=15)\n\nplt.show()","ce1e1c3a":"temp = train_data.groupby(by=['Embarked', 'Sex']).Survived.value_counts()\n\nMale_S_rate_C = temp.loc['C', 'male',1] \/ (temp.loc['C', 'male', 1] + temp.loc['C', 'male', 0]) * 100\nMale_S_rate_S = temp.loc['S', 'male',1] \/ (temp.loc['S', 'male', 1] + temp.loc['S', 'male', 0]) * 100\nMale_S_rate_Q = temp.loc['Q', 'male',1] \/ (temp.loc['Q', 'male', 1] + temp.loc['Q', 'male', 0]) * 100\nMale_S_rate_by_Embarked = [Male_S_rate_C, Male_S_rate_S, Male_S_rate_Q]\n\nFemale_S_rate_C = temp.loc['C', 'female',1] \/ (temp.loc['C', 'female', 1] + temp.loc['C', 'female', 0]) * 100\nFemale_S_rate_S = temp.loc['S', 'female',1] \/ (temp.loc['S', 'female', 1] + temp.loc['S', 'female', 0]) * 100\nFemale_S_rate_Q = temp.loc['Q', 'female',1] \/ (temp.loc['Q', 'female', 1] + temp.loc['Q', 'female', 0]) * 100\nFemale_S_rate_by_Embarked = [Female_S_rate_C, Female_S_rate_S, Female_S_rate_Q]","567c534f":"plt.figure(figsize = (10, 5), dpi = 100)\n\nplt.plot(['C', 'S', 'Q'], Male_S_rate_by_Embarked, color='blue', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nfor i, v in enumerate(Male_S_rate_by_Embarked):\n    plt.text(i+0.12, v, \"{:.2f}%\".format(v), ha=\"center\", fontsize=12)\n\nplt.plot(['C', 'S', 'Q'], Female_S_rate_by_Embarked, color='pink', marker='*', linestyle='dashed', linewidth=2, markersize=12)\nfor i, v in enumerate(Female_S_rate_by_Embarked):\n    plt.text(i+0.12, v, \"{:.2f}%\".format(v), ha=\"center\", fontsize=12)\n    \nplt.title(\"Survival Rate by Embarked And Sex\", fontsize=20)\nplt.ylabel('Survival Rate(%)', fontsize=20)\nplt.grid()","2b341882":"train_data.hist(column='Age', by=['Embarked', 'Sex'], layout=(2,4), figsize=(20,10))\nplt.show()","30b280e6":"temp = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']]\n\n# Transform Sex categorical columns to numeric columns.\n# I will use survival rate from by Sex and AgeGroup to transform data.\n# temp.loc[(temp.Sex == 'male') & (temp.AgeGroup  == 'Child'), 'AgeGroupRate'] = 0.2103\n# temp.loc[(temp.Sex == 'male') & (temp.AgeGroup  == 'Young'), 'AgeGroupRate'] = 0.2021\n# temp.loc[(temp.Sex == 'male') & (temp.AgeGroup  == 'Young Adult'), 'AgeGroupRate'] = 0.1766\n# temp.loc[(temp.Sex == 'male') & (temp.AgeGroup  == 'Adult'), 'AgeGroupRate'] = 0.2416\n# temp.loc[(temp.Sex == 'male') & (temp.AgeGroup  == 'Old'), 'AgeGroupRate'] = 0.2179\n# temp.loc[(temp.Sex == 'female') & (temp.AgeGroup  == 'Child'), 'AgeGroupRate'] = 0.5910 \n# temp.loc[(temp.Sex == 'female') & (temp.AgeGroup  == 'Young'), 'AgeGroupRate'] = 0.7680\n# temp.loc[(temp.Sex == 'female') & (temp.AgeGroup  == 'Young Adult'), 'AgeGroupRate'] = 0.6980\n# temp.loc[(temp.Sex == 'female') & (temp.AgeGroup  == 'Adult'), 'AgeGroupRate'] =  0.7475\n# temp.loc[(temp.Sex == 'female') & (temp.AgeGroup  == 'Old'), 'AgeGroupRate'] = 0.7415\n# transform_numerics = {'Sex' : {'male': 0.2058, 'female': 0.7115}}\n# temp_numerics = temp.replace(transform_numerics)\n# temp_numerics.drop(['AgeGroup'], axis=1, inplace=True)\n# temp_numerics.rename(columns={'AgeGroupRate': 'AgeGroup'}, inplace=True)","5a67f296":"temp.groupby(by=['SibSp', 'Sex']).Age.agg(['min', 'max', 'mean', 'median'])","2923b00e":"temp.hist(column='Age', by=['SibSp', 'Sex'], layout=(7,2), figsize=(20,15))\nplt.show()","9fd7c6bb":"plt.figure(figsize=(15,8))\nbox_plot = sns.boxplot(x='SibSp', y='Age', hue='Sex', showmeans=True, data=temp)\n# Every graphic element's information are stored in line2D.\n# I am still confusing to find out correct line segment from lines list.\n# I manually put the value and changed linestyle to check the what it is.\n# Midean value can be calculated using Pandas.\nlines = box_plot.get_lines()\nlines[4].set_linestyle('-.')\nlines[11].set_linestyle('--')\n# lines[18].set_linestyle('==')\n# lines[5].set_marker('*')\n# lines[5].set_markersize(15)\nbox_plot.tick_params(axis='both', labelsize=15)\nbox_plot.set_xlabel(box_plot.get_xlabel(), fontsize=15)\nbox_plot.set_ylabel(box_plot.get_ylabel(), fontsize=15)\nplt.title('Boxplot by SibSp and Sex', fontsize=15)\n\nplt.show()","f41389ad":"lines[4].get_ydata() # SibSp is 0 and male median value.","f7536bf5":"temp.groupby(by=['Parch', 'Sex']).Age.agg(['min', 'max', 'mean', 'median'])","017b9d0d":"temp.hist(column='Age', by=['Parch', 'Sex'], layout=(4,4), figsize=(15,10))\nplt.show()","1682c3e4":"plt.figure(figsize=(15,8))\nbox_plot = sns.boxplot(x='Parch', y='Age', hue='Sex', data=temp)\nbox_plot.tick_params(axis='both', labelsize=15)\nbox_plot.set_xlabel(box_plot.get_xlabel(), fontsize=15)\nbox_plot.set_ylabel(box_plot.get_ylabel(), fontsize=15)\nplt.title('Boxplot by Parch and Sex', fontsize=15)\n\nplt.show()","12585e7b":"temp.groupby(by=['Pclass', 'Sex']).Age.agg(['min', 'max', 'mean', 'median'])","c5083d9a":"temp.hist(column='Age', by=['Pclass', 'Sex'], layout=(3,2), figsize=(15,8))\nplt.show()","2277af0f":"plt.figure(figsize=(15,8))\nbox_plot = sns.boxplot(x='Pclass', y='Age', hue='Sex', data=temp)\n\nbox_plot.tick_params(axis='both', labelsize=15)\nbox_plot.set_xlabel(box_plot.get_xlabel(), fontsize=15)\nbox_plot.set_ylabel(box_plot.get_ylabel(), fontsize=15)\nplt.title('Boxplot by Class and Sex', fontsize=15)\nplt.legend(fontsize=13)\n\nplt.show()","297ad7aa":"train_data.info()","75035427":"imp_train_input = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]","0642b978":"transform_numerics = {'Sex' : {'male': 0, 'female': 1}, 'Embarked': {'S': 0, 'Q': 1, 'C': 2}}\nimp_train_input = imp_train_input.replace(transform_numerics)","a420f268":"imp_train_input.head()","2c5ff596":"imp_train_input.info()","040a137c":"imp_train_input = imp_train_input.convert_dtypes()","6f4bffe7":"imp_train_input.info()","83c9a909":"imp_train_input = imp_train_input.astype({'Pclass': np.int8, 'Sex': np.int8, 'Age': np.float32, 'SibSp': np.int8, 'Parch': np.int8, 'Fare': np.float32, 'Embarked': np.int8}, errors='ignore')","0f902a3f":"# imp_train_input.Embarked = pd.to_numeric(imp_train_input.Embarked, downcast='integer')\n# imp_train_input.Fare = pd.to_numeric(imp_train_input.Fare, downcast='float')\n# imp_train_input.Age = pd.to_numeric(imp_train_input.Age, downcast='float')","35d2b120":"imp_train_input.info()","c260a7df":"imp_age = IterativeImputer(estimator=ExtraTreesRegressor(random_state=0), random_state=0)\nimp_age_train_output = imp_age.fit_transform(imp_train_input[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch']])","de6ace07":"imp_train_output_df = pd.DataFrame(imp_age_train_output, columns=['Pclass', 'Sex', 'Age', 'SibSp', 'Parch'])","718456c3":"imp_train_input.Age = imp_train_output_df.Age","fafa6929":"imp_train_input.info()","fdd3153c":"imp_fare = IterativeImputer(estimator=ExtraTreesRegressor(random_state=0), random_state=0)\nimp_fare_train_output = imp_fare.fit_transform(imp_train_input[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']])","a3dcce0b":"imp_train_output_df = pd.DataFrame(imp_fare_train_output, columns=['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare'])","37a5435b":"imp_train_input.Fare = imp_train_output_df.Fare","43938608":"imp_train_input.info()","b627e9d1":"imp_embarked = IterativeImputer(estimator=ExtraTreesRegressor(random_state=0), random_state=0)\nimp_embarked_train_output = imp_embarked.fit_transform(imp_train_input)","272e3abb":"imp_train_output_df = pd.DataFrame(imp_embarked_train_output, columns=['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'])","aaa5054a":"imp_train_input.Embarked = imp_train_output_df.Embarked","1bb87d1f":"imp_train_input.Embarked.loc[(imp_train_input.Embarked >= 1.5)] = 2.0\nimp_train_input.Embarked.loc[(imp_train_input.Embarked <1.5) & (imp_train_input.Embarked >= 0.5)] = 1.0\nimp_train_input.Embarked.loc[(imp_train_input.Embarked <0.5)] = 0.0","49ceb797":"imp_train_input = imp_train_input.astype({'Pclass': np.int8, 'Sex': np.int8, 'Age': np.float32, 'SibSp': np.int8, 'Parch': np.int8, 'Fare': np.float32, 'Embarked': np.int8}, errors='ignore')","78eb2746":"imp_train_input.info()","ed5cc8bc":"imp_train_input['Survived'] = train_data.Survived","5c3b768d":"imp_train_input.to_csv('final_input.csv', index=False)","046f07a1":"y = imp_train_input.Survived\nX = imp_train_input.copy()\nX.drop(['Survived'], axis=1, inplace=True)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","e6049da9":"X.head()","3ca15e42":"from xgboost import XGBRegressor\n\n# Define the model\nmy_model_1 = XGBRegressor(random_state=0)\n\n# Fit the model\nmy_model_1.fit(X_train, y_train)","f07763df":"predictions_1 = my_model_1.predict(X_valid)\n\n# Calculate MAE\nmae_1 = mean_absolute_error(y_valid, predictions_1)\n\nprint(\"Mean Absolute Error:\" , mae_1)","9b449488":"temp = test_data.Name.str.split(pat=',', expand=True)\ntemp.rename(columns={0: 'F_name', 1:'L_name'}, inplace=True)\ntemp.F_name = temp.F_name.str.strip()\ntemp.L_name = temp.L_name.str.strip()","2a509d85":"name = test_data.columns.to_list()\nb = temp.columns.to_list()\nname.extend(b)\nname","198ed9c2":"# test_data_with_name = test_data.copy()\ntest_data_with_name = pd.concat([test_data, temp], ignore_index=True, axis=1)\ntest_data_with_name.rename(columns={0: 'PassengerId', 1:'Pclass', 2:'Name',3:'Sex', 4:'Age', 5:'SibSp', 6:'Parch', 7:'Ticket', 8:'Fare', 9:'Cabin', 10:'Embarked', 11:'F_name', 12:'L_name'}, inplace=True)\ntest_data_with_name","83929055":"test_data_with_name.groupby(by='L_name').count()","c000bb20":"test_data_with_name.L_name.loc[test_data_with_name.Age.isnull()].unique()","fb3ebc98":"test_data_with_name.groupby(by='F_name').get_group(name='Mcmullen')","45347831":"train_data_with_age_group.info()","bcf03763":"temp_age_null = train_data_with_age_group.loc[train_data_with_age_group.Age.isnull()]","8f6d08b1":"temp_age_null.info()","14aa1b2f":"transform_numerics = {'Sex' : {'male': 0, 'female': 1}, 'Age_group': {'Child': 0, 'Young': 1, 'Young Adult': 2, 'Adult': 3, 'Old': 4}}\ntemp_numerics = train_data_with_age_group.replace(transform_numerics)","48c193c2":"temp_numerics[['Pclass', 'Sex', 'Age_group', 'SibSp', 'Parch','Fare']].corr()","0eece4e9":"temp = train_data_with_age_group['Ticket'].value_counts().nlargest(10)\ntemp","8bea30d4":"train_data_with_age_group.Ticket = train_data_with_age_group.Ticket.str.strip()","2e05d893":"temp_index = (train_data_with_age_group['Ticket'] == 'A\/5')\ntemp = train_data_with_age_group[['Pclass', 'Age group', 'Sex', 'Fare']].loc[temp_index]\ntemp2 = temp.groupby(by=['Pclass', 'Age_group', 'Sex']).Fare.agg(['count','min', 'max', 'mean'])\ntemp2","a66c3c22":"temp_index = (train_data_with_age_group['Ticket'] == 'C.A.')\ntemp = train_data_with_age_group[['Pclass', 'Age group', 'Sex', 'Fare']].loc[temp_index]\ntemp2 = temp.groupby(by=['Pclass', 'Age_group', 'Sex']).Fare.agg(['count','min', 'max', 'mean'])\ntemp2","0427db27":"temp_index = (train_data_with_age_group['Ticket'] == 'SOTON\/O.Q.')\ntemp = train_data_with_age_group[['Pclass', 'Age group', 'Sex', 'Fare']].loc[temp_index]\ntemp2 = temp.groupby(by=['Pclass', 'Age_group', 'Sex']).Fare.agg(['count','min', 'max', 'mean'])\ntemp2","e01a860f":"train_data_with_age_group['Fare'].agg(['min', 'max', 'mean'])","6eb1f4fd":"plt.figure(figsize=(10,5), dpi=100)\nsns.boxplot(x='Fare', data=train_data_with_age_group)\nplt.title('Fare Diversity')\nplt.grid()\nplt.show()","5af11440":"# pandas_profiling.ProfileReport(data)","2abc015d":"## Plot: Survival Number by Embarked","b6deb63d":"## Survival Rate by Age Group & Sex","dc0cff8d":"## Number of Passenger by Pclass & Sex","fe701c1d":"## Correlation Analysis (experimental)","80ef197b":"### Remove PassengerId, Survived, Name, Ticket, Cabin columns","48abbacd":"### Check Points\n   1. 'Pclass' and 'Fare' might have correlation. Normally, higher class seat is more expensive than lower class seat.\n   2.  Same ticket number might have same fare.\n   3. Cabin number also have correlation with fare but there is too many missing values.\n\n### ***This link explain about Cabins in cruise [Explain Cabin](https:\/\/www.cruisecritic.com\/articles.cfm?ID=77)***","1fc68b7f":"# 1. Set Up Environment","f0132d86":"Let's check data overview.","5a3c9010":"### Check Points\n1. Thrid class survival rate is lowest since only Third class has more male passenger than female also number diffence is huge.\n2. Thrid class survival rate is lowest since Thrid calss has most 'Young Adult' age group people.","ce56cd24":"# 0. Overview\nThis is case study for getting used to Python, Pandas, Matplot and Seaborn.\n\nSource Data from Kaggle **\"Tabular Playground Series - Apr 2021\"**","b551b91c":"### Check Points\n1. Somehow Embarked column has large variation for survival rate.\n2. Logically, Survival rate can be affected by Class, Sex, and Age.\n3. It is reasonable to check the Sex and Class and Age distribution by Embarked.\n4. **Sex Ration on Embared at C and Q are almost same, but survival rate is differ by more than 10%.**","afd7373d":"### Check Points\n 1. Univariate feature imputation such as 'SimpleImputer' is not a good choice on this data set since 'Pclass', 'Age Group', and 'Sex' columns are somewhat correlated.\n 2. Nearest Neighbors imputation (KNN) is not a good choice since KNN is sensitive to outliers. 'Fare Diversity' plot shows that Fare column wide diversity.\n 3. Multivariate feature imputation such as 'IterativeImputer' with 'ExtraTreesRegressor' will be good choice.","c964af28":"## Survival Number and Rate by Sex","117bfe4c":"### Check Points\n   1. **Cabin column in test_data have 70,831 mising values, it would be better to ignore this column since there is 70.8% of information is missing. Also training data have 67.8% of information is missing. It is better to ignore the column.**","d7c8542c":"## Plot: Survival Number by Age Group","570456fd":"## Plot: Survival Rate by Pclass","5511bf55":"### Check Points\n   1. Age distributions are differ by Pclass, Parch, SibSp, Embarked, and Sex\n   2. Mean imputation for Age is not good for this case since each plot show that skewness and different distribution.\n   3. Median imputation might be better choice for skewed data.\n   4. I think the best imputation method would be **IterativeImputer with ExtraTreeRegressor estimator**.","f3a8e31f":"## Plot: Number of Passenger Ratio by Embarked","01f8b62c":"## Survival Rate by Age Group","eb18c49b":"## Survival Rate by Embarked","dedd32c8":"## Plot: Number of Passenger by Pclass & Sex","01ef78bf":"# 3. Exploratory Data Analysis","9b848c8a":"## Survival Number by Age Group & Sex","2b12939a":"### **Check Points**\n1. There are 3 data types in file: Float64, int64, object.\n2. Total number of entries are 100,000.\n3. Column names are PassengerId, Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked.\n3. There are missing value in Age: 3,292, Ticket: 4,623, Fare: 134, Cabin: 67,866, Embarked: 250 columns.","2dec9c6d":"## Overall Survival number and Rate","d25a7255":"### Using Last name to predict values","82ecd33a":"## Plot: Passenger Ratio by Pclass","5b1a050f":"### Check Points\n1. Age range is 0.08 - 87.0\n2. How can I divide age groups?","666872a3":"## Plot: Survival Rate by Age Group & Sex","2e368c1d":"## Survival Rate by Pclass","e3cbcec8":"## Plot: Number of Passenger by Age Group & Pclass","bb2e627a":"## Plot: Survival Number by Age Group & Sex","6fe6402f":"### ***Questions***\n1. ***Is it true that Sex and Age Group doesn't correlate with Fare?***","bb5f0c6a":"### Check Points\n1. Third class passgers are largest population.\n2. Survival rates are ranked from Frist, Second, and Third order.","681a89ee":"## Number of Passenger by Sex & Embarked","de77bc2d":"### Check Points\n   1. Fare and Pclass has weak correlation but others doesn't have correlation with Fare.","0ee5171e":"### Check Points\n1. Male survival rate is significantly lower than female survival rate.","c5a47cec":"### **Column information**\n1. PassengerID - Unique number for each passenger\n2. Survived - Survival : 0 = No, 1 = Yes\n3. pclass - Ticket class : 1 = 1st, 2 = 2nd, 3 = 3rd\n4. Name - Name\n5. Sex - Sex\n6. Age - Age in years\n7. Sibsp - Number of siblings \/ spouses aboard the Titanic\n8. Parch - Number of parents \/ children aboard the Titanic\n9. Ticket - Ticket number\n10. Fare - Passenger fare\n11. Cabin - Cabin number\n12. Embarked - Port of Embarkation : C = Cherbourg, Q = Queenstown, S = Southampton","21edef70":"## Plot: Survival Rate by Embark & Sex","edc417b8":"### Check Points\n1. Only 42,774 people survived out of 100,000\n2. The survival rate is 42.774%.","9a070003":"## Plot: Survival Number and Rate by Sex","994b123e":"## Survival Number by Age Group","e832b752":"### Check Points\n1. Female has 71.15% survival rate.\n2. Male has 20.58% survival rate","9ce43685":"### Check Points\n1. Survival rate among age group are various by sex.\n2. All age group in Female, survival rates are higher than male group.\n\n### ***Stereotype thinking***\n1. Male help people to escape from siking titanic.\n2. Male young adult is most active group to help people.\n\n### ***Questions***\n   1. *Why Child and Old age groups in male also significantly lower survival rate than female group?*\n   2. *Why Child age group in female has a lowest survival rate among female age groups?*","555ec7fa":"# 6. Appendix","24c185cb":"# 2. Import Data","93e18c40":"# 4. Imputation\n1. Run out of memory problem to using IterativeImputer.\n2. Try to reduce the memory usage by changing Dtype of columns.\n3. Still has memory problem so I break the step. \n4. This is not a practical and correct example.\n5. I wanted to wrap up the processing.\n","2b87b3f2":"### Check Points\n1. Survival rates are different by age groups.\n2. Group together 0-11, 11-16, 16-40, 40-62, and 62-90 since survival rate trend is overturned on those points.\n### ***Intentionally dividing the age group might not be a good idea. It might introduce the bias to analysis.***","6f595391":"### Don\u2019t use a sample size less than 30.\n### It has been statistically proven that 30 is the smallest sample size where an average result of a sample starts to represent the average result of a population.\n### **If your maching learning model doesn't requrie nuemric input, you don't need to transformed categorical varibales to numeric variables.**","69564e70":"### Check Points\n1. Young Adult age groups has work survival rate.\n2. Compare to other groups, Child and Young Adult groups has very low survival rate. ","58776e31":"## Plot: Survival Rate by Embarked","1d81ed9b":"## Plot: Survival Number by Pclass","3f4cabfc":"# 5. Prediction using XGBoost"}}