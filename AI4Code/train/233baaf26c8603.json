{"cell_type":{"afebb7eb":"code","417f48e2":"code","05b1e464":"code","17ff47ee":"code","e6eb3ce6":"code","6cd12d25":"code","54156375":"code","e1b32c04":"code","4edb6949":"code","ebd006b4":"code","240a85b5":"code","36706a83":"code","157f44b0":"code","a3b9e8ce":"code","c20d4307":"code","0db01901":"code","20f85cc7":"code","46b4981c":"code","2ac2e11c":"code","d5bc9ebf":"code","7a1aff11":"code","7d7a74c1":"code","896c4ba3":"code","7e2bb4af":"code","43bd3d09":"code","cdf44d59":"code","47c7e120":"code","9fb1aa12":"code","327d9da9":"markdown"},"source":{"afebb7eb":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","417f48e2":"!pip install pycaret","05b1e464":"%%time\n# import big dtda\nimport datatable as dt\ntrain = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas()\ntest = dt.fread('..\/input\/tabular-playground-series-oct-2021\/test.csv').to_pandas()\nss = dt.fread('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv').to_pandas()\nprint(\"train.shape\",train.shape)\nprint(\"test.shape\",test.shape)","17ff47ee":"import random\n\ndata_ratio = 0.0001\n\nsample_number=int(train.shape[0] * data_ratio)\nidx=random.sample(range(train.shape[0]),sample_number)\ntrain=train.iloc[idx]\nprint(\"number_of_training_dataset:\",sample_number)","e6eb3ce6":"import sys\nprint(\"{}{: >25}{}{: >10}{}\".format('|','Variable Name','|','Memory','|'))\nprint(\" ------------------------------------ \")\nfor var_name in dir():\n    if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > 10000: #\u3053\u3053\u3060\u3051\u30a2\u30ec\u30f3\u30b8\n        print(\"{}{: >25}{}{: >10}{}\".format('|',var_name,'|',sys.getsizeof(eval(var_name)),'|'))","6cd12d25":"test.info()","54156375":"for c, dtype in zip(train.columns, train.dtypes):\n    if dtype == np.float64:\n        train[c] = train[c].astype(np.float32)\n    elif dtype == np.int64:\n        train[c] = train[c].astype(np.int32)","e1b32c04":"for c, dtype in zip(test.columns, test.dtypes):\n    if dtype == np.float64:\n        test[c] = test[c].astype(np.float32)\n    elif dtype == np.int64:\n        test[c] = test[c].astype(np.int32)","4edb6949":"display(train.info())\ndisplay(test.info())","ebd006b4":"train.head()","240a85b5":"from pycaret.classification import *","36706a83":"clf1 = setup(data = train, \n             target = 'target',\n             ignore_low_variance = True,\n             remove_multicollinearity = True,\n             multicollinearity_threshold = 0.95,\n             silent = True)","157f44b0":"# compare_models()","a3b9e8ce":"%%time\ncatboost = create_model('catboost')","c20d4307":"%%time\ntuned_cat = tune_model(catboost,optimize = 'AUC')","0db01901":"print(tuned_cat.get_all_params())","20f85cc7":"evaluate_model(tuned_cat)","46b4981c":"# finalize a model\ncat_final = finalize_model(tuned_cat)","2ac2e11c":"%%time\ngbc = create_model('gbc')","d5bc9ebf":"%%time\ntuned_gbc = tune_model(gbc,optimize = 'AUC')","7a1aff11":"blender_specific = blend_models(estimator_list = [tuned_cat,tuned_gbc], method = 'soft')","7d7a74c1":"print(cat_final.best_score_)\n\n# print(cat_final.best_params_)","896c4ba3":"# generate predictions on unseen data\npredictions = predict_model(blender_specific, data = test)","7e2bb4af":"predictions['Label']","43bd3d09":"submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\n\nsubmission['target'] = predictions['Label'].replace({'True':1,'False':0})\nsubmission.to_csv(\"submission_Blend_OCT.csv\", index=False)\nsubmission","cdf44d59":"# !echo \"qid,prediction\" > submission.csv","47c7e120":"from IPython.display import FileLink\nFileLink('submission_Blend_OCT.csv')","9fb1aa12":"# %%time\n# from IPython.display import HTML\n\n# submission.to_csv('submission.csv', index=False)\n\n# def create_download_link(title = \"Download CSV file\", filename = \"data.csv\"):  \n#     html = '<a href={filename}>{title}<\/a>'\n#     html = html.format(title=title,filename=filename)\n#     return HTML(html)\n\n# # create a link to download the dataframe which was saved with .to_csv method\n# create_download_link(filename='submission.csv')","327d9da9":"Now we minimized train and test data"}}