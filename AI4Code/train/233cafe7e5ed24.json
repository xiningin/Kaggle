{"cell_type":{"c1e61c7a":"code","03a48701":"code","469be7db":"code","0fabba56":"code","48a805b7":"code","94fc0f87":"code","248865b2":"code","7c0844c6":"code","a28ffc56":"code","e63eeaa8":"code","96105b0c":"code","657c9865":"code","2baf201f":"code","d7bb6d56":"code","21ff8d21":"code","a063cfc3":"code","00ee0bb5":"code","bd028f68":"code","3eb30ad7":"code","6deafb2a":"code","56e31fe9":"code","6081994d":"code","5c5c0c3c":"code","a8579137":"code","5db6a474":"code","564f3a61":"code","6b3c25cc":"code","a5a7697b":"code","b21f54e4":"code","3a21690c":"code","99ceecec":"code","78fb4702":"code","7a2447d9":"code","0c8ab633":"code","bdb9c19c":"code","45666760":"markdown","4e65d3a3":"markdown","751faa41":"markdown","8af97874":"markdown","27d2af41":"markdown","e3a5b5de":"markdown","60dd1580":"markdown","54ac3b0a":"markdown","818dc340":"markdown","5ee3df25":"markdown","3423099c":"markdown"},"source":{"c1e61c7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport folium\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03a48701":"df = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")\naus_town_gps = pd.read_csv(\"..\/input\/aus-town-gps\/aus_town_gps.csv\",sep=\",\")\nclimatsaus = pd.read_csv(\"..\/input\/climatsaus\/climatsAUS.csv\",sep=\";\")","469be7db":"# Pour simplifier, on regroupe les climats en 4 cat\u00e9gories : chaud&humide, froid, sec et m\u00e9diterran\u00e9en. On pourra ainsi faire des visualisations plus facilement\n\nclimats_type = {'tropical':'hot_hum', \n                'subtropical':'hot_hum', \n                'montagnard':'cold', \n                'tempere':'cold', \n                'aride':'dry', \n                'semi_aride':'dry', \n                'mediterraneen':'med'}\n\nclimatsaus['Clim_type']=climatsaus['Climat'].map(climats_type)","0fabba56":"#Fusion des dataframes\n\ndf = pd.merge(df, aus_town_gps, how='left', left_on=\"Location\",right_on=\"Location\")\ndf = pd.merge(df, climatsaus, how='left', left_on=\"Location\",right_on=\"Location\")\ndf.head(10)","48a805b7":"df.info()","94fc0f87":"#cr\u00e9ation de quelques variables de date raintoday\ndf['RainToday_Num'] = (df['RainToday'] ==  'Yes')*1\ndf['RainTomorrow_Num'] = (df['RainTomorrow'] ==  'Yes')*1\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['Mois'] = df['Date'].dt.month\ndf['Trimestre'] = df['Date'].dt.quarter\ndf['Annee'] = df['Date'].dt.year","248865b2":"#D\u00e9compte des valeurs manquantes\npercent_na = df.isna().sum() * 100 \/ len(df)\npercent_na.sort_values()","7c0844c6":"#cette m\u00e9thode (ffill) permet de propager la derni\u00e8re observation valide => tri important au d\u00e9but\ndf= df.sort_values([\"Location\",\"Date\"])\ndf[\"MinTemp1\"] = df[\"MinTemp\"].interpolate(method='ffill', limit_direction='forward')\ndf[\"Sunshine1\"] = df[\"Sunshine\"].interpolate(method='ffill', limit_direction='forward')","a28ffc56":"#verification sur Sunshine\ndf[\"Sunshine_lag1\"] = df[\"Sunshine\"].shift(1)\ndf[\"Sunshine_lag2\"] = df[\"Sunshine\"].shift(2)\n\ntemp = df[[\"Sunshine\",\"Sunshine1\",\"Sunshine_lag1\",\"Sunshine_lag2\"]]\ntemp[temp[\"Sunshine\"].isna()]","e63eeaa8":"df[\"MinTemp_lag1\"] = df[\"MinTemp\"].shift(1)\ndf[\"MinTemp_lag2\"] = df[\"MinTemp\"].shift(2)\n\ntemp = df[[\"MinTemp\",\"MinTemp1\",\"MinTemp_lag1\",\"MinTemp_lag2\"]]\ntemp[temp[\"MinTemp\"].isna()]","96105b0c":"sns.displot(data=df,x=\"Sunshine\",kind=\"kde\")\nsns.displot(data=df,x=\"Sunshine1\",kind=\"kde\")","657c9865":"sns.displot(data=df,x=\"MinTemp\",kind=\"kde\")\nsns.displot(data=df,x=\"MinTemp1\",kind=\"kde\")","2baf201f":"#sns.histplot(data=df, x=\"MinTemp\",hue=\"RainTomorrow\")\n\ndf[\"LogRainfall\"] = np.log(df[\"Rainfall\"])\ndf[\"LogEvaporation\"] = np.log(df[\"Evaporation\"])\n\nplt.figure(figsize=(20,5))\nplt.subplot(151)\nsns.histplot(data=df, x=\"Sunshine\",hue=\"RainTomorrow\",bins=20, multiple=\"layer\", thresh=None)\nplt.subplot(152)\nsns.histplot(data=df, x=\"MinTemp\",hue=\"RainTomorrow\",bins=20, thresh=None)\nplt.subplot(153)\nsns.histplot(data=df, x=\"Humidity3pm\",hue=\"RainTomorrow\",bins=20)\nplt.subplot(154)\nsns.histplot(data=df, x=\"LogRainfall\",hue=\"RainTomorrow\",bins=20)\nplt.subplot(155)\nsns.histplot(data=df, x=\"LogEvaporation\",hue=\"RainTomorrow\",bins=20)\n","d7bb6d56":"temp = df[[\"RainTomorrow\",\"LogEvaporation\"]]\ntemp.describe()","21ff8d21":"fig = plt.figure(figsize=(20,5))\nax1 = fig.add_subplot(151)\nax1.set_title(\"Sunshine\")\ng = sns.violinplot(ax=ax1,data=df,x=\"RainTomorrow\", y=\"Sunshine\",palette=\"Set1\")\n\nax2 = fig.add_subplot(152)\nax2.set_title(\"MinTemp\")\ng = sns.violinplot(ax=ax2,data=df,x=\"RainTomorrow\", y=\"MinTemp\",palette=\"Set1\")\n\nax3 = fig.add_subplot(153)\nax3.set_title(\"Humidity3pm\")\ng = sns.violinplot(ax=ax3,data=df,x=\"RainTomorrow\", y=\"Humidity3pm\",palette=\"Set1\")\n\nax4 = fig.add_subplot(154)\nax4.set_title(\"LogRainfall\")\ntemp = df[df['LogRainfall'] > -2 ]\ng = sns.violinplot(ax=ax4,data=temp,x=\"RainTomorrow\", y=\"LogRainfall\",palette=\"Set1\")\n\nax4 = fig.add_subplot(155)\nax4.set_title(\"LogEvaporation\")\ntemp = df[df['LogEvaporation'] > -2 ]\ng = sns.violinplot(ax=ax4,data=temp,x=\"RainTomorrow\", y=\"LogEvaporation\",palette=\"Set1\")","a063cfc3":"plt.figure( figsize= (10, 10) )\ndataplot = sns.heatmap(df.corr(), cmap=\"YlGnBu\")\nplt.show()","00ee0bb5":"f = plt.figure( figsize= (20, 5) )\nax1 = f.add_subplot(121)\nax2 = f.add_subplot(122)\n\ncorr = df.corr()\n\nax1.title.set_text('Correlations de RainTomorrow')\ntemp = corr[[\"RainTomorrow_Num\"]].loc[abs(corr[\"RainTomorrow_Num\"]) > 0.2].sort_values(by=\"RainTomorrow_Num\",ascending=False)\nsns.heatmap(temp, cmap=\"YlGnBu\",annot=True,ax=ax1)\n\nax2.title.set_text('Correlations de Sunshine')\ntemp = corr[[\"Sunshine\"]].loc[abs(corr[\"Sunshine\"]) > 0.2].sort_values(by=\"Sunshine\",ascending=False)\nsns.heatmap(temp , cmap=\"YlGnBu\",annot=True,ax=ax2)","bd028f68":"Contour_Aus = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\nContour_Aus = Contour_Aus[Contour_Aus[\"name\"] == \"Australia\"]\n\nstats = df.drop(columns=['Annee', 'Mois','Trimestre'],axis=0).groupby(['Location','Latitude','Longitude','Clim_type']).mean().reset_index()\n\nListCrit = ['MinTemp','MaxTemp','Rainfall','Evaporation','Sunshine','WindGustSpeed','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm','RainToday_Num']       \nfor i in ListCrit:\n    stats[i] = stats[i].map('{:,.3f}'.format)\nstats\n\ngeometry = [Point(xy) for xy in zip(stats['Longitude'], stats['Latitude'])]\ngeo_df = gpd.GeoDataFrame(stats, geometry=geometry)","3eb30ad7":"geo_df.columns","6deafb2a":"df1 = df.groupby('Clim_type')['RainTomorrow'].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('pourcentage').reset_index()\n\ng = sns.catplot(x='Clim_type',y='pourcentage',hue='RainTomorrow',kind='bar',data=df1)\ng.ax.set_ylim(0,100)\n\nfor p in g.ax.patches:\n    txt = str(p.get_height().round(2)) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt)","56e31fe9":"Comptage = df[['Clim_type','RainToday']].groupby(['Clim_type','RainToday']).size().reset_index(name='counts')\nComptage\n\nComptage['RainToday_ratio'] = Comptage.groupby(['Clim_type'])['counts'].transform(lambda x: x*100\/x.sum())\nComptage\n\ng = sns.barplot(x=\"Clim_type\", y=\"RainToday_ratio\",hue=\"RainToday\", data=Comptage)\n\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()\/4), \n                   ha = 'center', va = 'center', \n                   size=15,\n                   xytext = (0, 0), \n                   textcoords = 'offset points')","6081994d":"Comptage = df[['Clim_type','RainToday','RainTomorrow']].groupby(['Clim_type','RainToday','RainTomorrow']).size().reset_index(name='counts')\nComptage\nsns.barplot(x=\"Clim_type\", y=\"counts\",hue=\"RainToday\", data=Comptage)","5c5c0c3c":"fig = plt.figure(constrained_layout=True, figsize=(20, 8))\nsubfigs = fig.subfigures(1, 2, wspace=0.07)\n\nax=subfigs[0].subplots(1, 1)\nContour_Aus.plot(ax=ax,color=\"None\",edgecolor=\"Black\")  \nax.title.set_text('Stations M\u00e9t\u00e9o selon le climat')\ngeo_df.plot(ax=ax,markersize=50, cmap='coolwarm', column=\"Clim_type\",legend=True);\n\nax2 = subfigs[1].subplots(2, 1)\n\nax2[0].title.set_text(\"Distribution annuelle des pluies par climat\")\nsns.lineplot(ax=ax2[0],data=df, x=\"Mois\", y=\"Rainfall\", hue=\"Clim_type\")\n\n#sns.countplot(ax=ax2[1],x=\"RainTomorrow\", data=df.loc[df.RainToday=='No'], hue='Clim_type') \n#ax2[1].title.set_text('RainToday = No')\nsns.countplot(ax=ax2[1],x=\"Clim_type\",  data=df, hue='RainToday')  ","a8579137":"f = plt.figure(figsize=(20,10))\nax = f.add_subplot(221)\nax2 = f.add_subplot(222)\nax3 = f.add_subplot(223)\nax4 = f.add_subplot(224)\n\nContour_Aus.plot(ax=ax,color=\"None\",edgecolor=\"Black\")  \nax.title.set_text('Part des jours de pluie')\ngeo_df.plot(ax=ax, markersize=50, cmap='coolwarm', column=\"RainToday_Num\",legend=True,scheme=\"percentiles\",k=10);\n\nContour_Aus.plot(ax=ax2,color=\"None\",edgecolor=\"Black\")  \nax2.title.set_text('Moyenne des pr\u00e9cipiations')\ngeo_df.plot(ax=ax2, markersize=50, cmap='coolwarm', column=\"Rainfall\",legend=True,scheme=\"percentiles\",k=10);\n\nContour_Aus.plot(ax=ax3,color=\"None\",edgecolor=\"Black\")  \nax3.title.set_text('Moyenne des temp\u00e9ratures minimales')\ngeo_df.plot(ax=ax3, markersize=50, cmap='coolwarm', column=\"MinTemp\",legend=True,scheme=\"percentiles\",k=10);\n\nContour_Aus.plot(ax=ax4,color=\"None\",edgecolor=\"Black\")  \nax4.title.set_text('Moyenne des temp\u00e9ratures maximales')\ngeo_df.plot(ax=ax4, markersize=50, cmap='coolwarm', column=\"MaxTemp\",legend=True,scheme=\"percentiles\",k=10);","5db6a474":"m = Contour_Aus.explore(\n        color = \"None\",\n        width = 800,\n        height = 500,\n        highlight = False,\n        popup = False,\n        control_scale=False\n)\n\ngeo_df.explore(\n      m=m,\n    width = 800,        \n    height = 500,\n     column=\"Rainfall\",  # make choropleth based on \"BoroName\" column\n     cmap=\"coolwarm\",\n     scheme=\"quantiles\",  # use mapclassify's natural breaks scheme\n     legend=True, # show legend\n     k=10, # use 10 bins\n     #legend_kwds=dict(colorbar=False), # do not use colorbar\n     marker_kwds=dict(radius=8)\n)\nm","564f3a61":"fig = plt.figure(figsize=(20,10))\n\nax1 = fig.add_subplot(241)\nax1.set_title(\"Temp\u00e9rature Minimale\")\ng = sns.violinplot(ax=ax1,data=df,x=\"RainTomorrow\", y=\"MinTemp\",palette=\"Set2\")\n\nax2 = fig.add_subplot(242)\nax2.set_title(\"Temp\u00e9rature Maximale\")\ng = sns.violinplot(ax=ax2,data=df,x=\"RainTomorrow\", y=\"MaxTemp\",palette=\"Set2\")\n\nax3 = fig.add_subplot(243)\nax3.set_title(\"Temp\u00e9rature 9am\")\ng = sns.violinplot(ax=ax3,data=df,x=\"RainTomorrow\", y=\"Temp9am\",palette=\"Set2\")\n\nax4 = fig.add_subplot(244)\nax4.set_title(\"Temp\u00e9rature 3pm\")\ng = sns.violinplot(ax=ax4,data=df,x=\"RainTomorrow\", y=\"Temp9am\",palette=\"Set2\")\n\n\nax5 = fig.add_subplot(245)\nax5.set_title(\"Sunshine\")\ng = sns.violinplot(ax=ax5,data=df,x=\"RainTomorrow\", y=\"Sunshine\",palette=\"Set2\")\n\nax6 = fig.add_subplot(246)\nax6.set_title(\"Rainfall\")\ng = sns.violinplot(ax=ax6,data=df,x=\"RainTomorrow\", y=\"Rainfall\",palette=\"Set2\")\n\nax7 = fig.add_subplot(247)\nax7.set_title(\"Evaporation\")\ng = sns.violinplot(ax=ax7,data=df,x=\"RainTomorrow\", y=\"Evaporation\",palette=\"Set2\")\n\nax8 = fig.add_subplot(248)\nax8.set_title(\"Humidity9am\")\ng = sns.violinplot(ax=ax8,data=df,x=\"RainTomorrow\", y=\"Humidity9am\",palette=\"Set2\")","6b3c25cc":"fig = plt.figure(figsize=(20,4))\nax1 = fig.add_subplot(141)\nax1.set_title(\"Humidity3pm\")\ng = sns.violinplot(ax=ax1,data=df,x=\"RainTomorrow\", y=\"Humidity3pm\",palette=\"Set2\")\n\nax2 = fig.add_subplot(142)\nax2.set_title(\"WindGustSpeed\")\ng = sns.violinplot(ax=ax2,data=df,x=\"RainTomorrow\", y=\"WindGustSpeed\",palette=\"Set2\")\n\nax3 = fig.add_subplot(143)\nax3.set_title(\"WindSpeed9am\")\ng = sns.violinplot(ax=ax3,data=df,x=\"RainTomorrow\", y=\"WindSpeed9am\",palette=\"Set2\")\n\nax4 = fig.add_subplot(144)\nax4.set_title(\"WindSpeed3pm\")\ng = sns.violinplot(ax=ax4,data=df,x=\"RainTomorrow\", y=\"WindSpeed3pm\",palette=\"Set2\")","a5a7697b":"fig = plt.figure(figsize=(20,4))\nax1 = fig.add_subplot(141)\nax1.set_title(\"Pressure9am\")\ng = sns.violinplot(ax=ax1,data=df,x=\"RainTomorrow\", y=\"Pressure9am\",palette=\"Set2\")\n\nax2 = fig.add_subplot(142)\nax2.set_title(\"Pressure3pm\")\ng = sns.violinplot(ax=ax2,data=df,x=\"RainTomorrow\", y=\"Pressure3pm\",palette=\"Set2\")\n\nax3 = fig.add_subplot(143)\nax3.set_title(\"Cloud9am\")\ng = sns.violinplot(ax=ax3,data=df,x=\"RainTomorrow\", y=\"Cloud9am\",palette=\"Set2\")\n\nax4 = fig.add_subplot(144)\nax4.set_title(\"Cloud3pm\")\ng = sns.violinplot(ax=ax4,data=df,x=\"RainTomorrow\", y=\"Cloud3pm\",palette=\"Set2\")","b21f54e4":"print(\"99e centile de Rainfall\",df['Rainfall'].quantile(.99))\nprint(\"99e centile de Evaporation\",df['Evaporation'].quantile(.99))\n\ndf['Rainfall_Ecr'] = df[\"Rainfall\"].apply(lambda x: x if x < 37.4 else 37.4 )\ndf['Evaporation_Ecr'] = df[\"Evaporation\"].apply(lambda x: x if x < 18.4 else 18.4 )\n\nfig = plt.figure(figsize=(20,4))\nax1 = fig.add_subplot(121)\nax1.set_title(\"Rainfall_Ecr\")\ng = sns.violinplot(ax=ax1,data=df,x=\"RainTomorrow\", y=\"Rainfall_Ecr\",palette=\"Set2\")\n\nax2 = fig.add_subplot(122)\nax2.set_title(\"Evaporation_Ecr\")\ng = sns.violinplot(ax=ax2,data=df,x=\"RainTomorrow\", y=\"Evaporation_Ecr\",palette=\"Set2\")\n","3a21690c":"df= df.sort_values([\"Location\",\"Date\"])\ndf[\"RainToday_Num_lag1\"] = df[\"RainToday_Num\"].shift(1)\ndf[\"RainToday_Num_lag2\"] = df[\"RainToday_Num\"].shift(2)\ndf[\"RainToday_Num_lag3\"] = df[\"RainToday_Num\"].shift(3)\ndf[\"RainToday_Num_lag4\"] = df[\"RainToday_Num\"].shift(4)\n\ndf[\"Nbjourspluies_3J\"] = df[\"RainToday_Num\"] + df[\"RainToday_Num_lag1\"] + df[\"RainToday_Num_lag2\"]\ndf[\"Nbjourspluies_5J\"] = df[\"RainToday_Num\"] + df[\"RainToday_Num_lag1\"] + df[\"RainToday_Num_lag2\"] + df[\"RainToday_Num_lag3\"] + df[\"RainToday_Num_lag4\"]\n\n#sns.countplot(x=\"Nbjourspluies_5J\", data=df, hue='Trimestre') \nsns.lineplot(data=df, x=\"Mois\", y=\"Nbjourspluies_5J\", hue=\"Clim_type\")\n#sns.catplot(data=df, y=\"Nbjourspluies_5J\", x=\"RainTomorrow\", col=\"Clim_type\", palette='Set1')","99ceecec":"Comptage = df[['Clim_type','RainTomorrow',\"Nbjourspluies_5J\",\"RainToday_Num\"]].groupby(['Clim_type','RainTomorrow']).mean([\"Nbjourspluies_5J\",\"RainToday_Num\"]).reset_index()\nComptage\nsns.barplot(x=\"Clim_type\", y=\"RainToday_Num\",hue=\"RainTomorrow\", data=Comptage)\n#sns.barplot(x=\"Clim_type\", y=\"Nbjourspluies_5J\",hue=\"RainTomorrow\", data=Comptage)","78fb4702":"Villes =[\"Sydney\",\"Perth\",\"Darwin\",\"AliceSprings\"]\ntemp = df[df[\"Location\"].isin(Villes)]\n\nfig = plt.figure(figsize=(20,8))\nax1 = fig.add_subplot(211)\nax1.set_title(\"Sunshine\")\ng = sns.violinplot(ax=ax1,data=temp,x=\"Location\", y=\"Sunshine\",hue=\"RainTomorrow\",scale=\"count\")\n\nax2 = fig.add_subplot(212)\nax2.set_title(\"Pressure9am\")\ng = sns.violinplot(ax=ax2,data=temp,x=\"Location\", y=\"Pressure9am\",hue=\"RainTomorrow\",scale=\"count\")","7a2447d9":"Villes =[\"Sydney\",\"Perth\",\"Darwin\",\"AliceSprings\"]\ntemp = df[df[\"Location\"].isin(Villes)]\n\nsns.displot(data=temp, x=\"RainToday_Num\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"Rainfall\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"MinTemp\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"MaxTemp\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"Sunshine\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"Pressure3pm\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")\nsns.displot(data=temp, x=\"Pressure9am\", col=\"Location\",hue=\"RainTomorrow\",kind=\"kde\")","0c8ab633":"from geopy.distance import geodesic\n\n#Calcul de la distance entre 2 stations m\u00e9t\u00e9o\naus_town_gps['key'] = 0\nDistVilles = aus_town_gps.merge(aus_town_gps, how='outer',on = 'key')\nDistVilles[\"distance\"] = DistVilles.apply(lambda row: geodesic((row[\"Latitude_x\"],row[\"Longitude_x\"]), (row[\"Latitude_y\"],row[\"Longitude_y\"])).km,axis=1)\nDistVilles.sort_values([\"Location_x\",\"distance\"]);\n","bdb9c19c":"DistVilles[DistVilles[\"Location_x\"] == \"Sydney\"].sort_values(\"distance\")","45666760":"- Quelles sont les variables les plus corr\u00e9l\u00e9es \u00e0 RainTomorrow ?\n    - Ensoleillement : Sunshine\n    - Humidit\u00e9 : 3pm et 9am\n    - Couverture nuageuse : 3pm et 9am\n    - Pluie du jour : RainToday\n    - Pression atmosph\u00e9rique : Pressure3pm et Pressure9am\n\n\n- L'ensoleillement (Sunshine) est corr\u00e9l\u00e9 \u00e0 RainTomoroww_num malgr\u00e9 que presque 50% de NA pour cette variable. Quand on regarde les corr\u00e9lations, on peut imaginer de traiter les NA en r\u00e9gressant Sunshine sur les crit\u00e8res les plus corr\u00e9l\u00e9s, \u00e0 savoir :\n    - Couverture nuageuse : 3pm et 9am\n    - Humidit\u00e9 : 3pm et 9am\n    - Temp\u00e9rature : Temp3pm, MaxTemp, Temp9am\n  ","4e65d3a3":"# Gestion des NA - en cours","751faa41":"# Decouverte du dataframe","8af97874":"# Corr\u00e9lations","27d2af41":"# Influence pour pr\u00e9dire la pluie","e3a5b5de":"# Calcul de distance","60dd1580":"La distribution de MinTemp1 est similaire de celle de celle de MinTemp (peu de valeurs manquantes)","54ac3b0a":"## Import des fichiers de travail","818dc340":"La distribution de Sunshine1 est bien diff\u00e9rente de celle de celle de Sunshine","5ee3df25":"# Influence pour la pr\u00e9vision de pluie selon des villes","3423099c":"# Repr\u00e9sentation cartographique"}}