{"cell_type":{"9eff08ca":"code","8f4e1387":"code","bfccd9f8":"code","7bcc9f03":"code","c4ad26cd":"code","67b27d72":"code","536c6d73":"code","b9318e4d":"code","3c60d103":"code","b69580f1":"code","75240eb1":"code","a0523b18":"code","0f07b97f":"code","66cb7133":"code","21615da8":"code","2ef8dd90":"code","27e6f8c5":"code","6ff3de78":"code","182d5d1b":"code","f9c85095":"code","de9f7441":"code","ad03cbdb":"code","ac6ca8b8":"code","45261950":"code","bf2dad36":"code","80447b7a":"code","b543f059":"code","c704b9be":"code","7de87139":"code","3cda62df":"code","403f8374":"code","e2a3b5cf":"code","5b08fbf7":"code","431636dd":"code","a2eb031a":"code","4f11f9aa":"code","09038dab":"code","8f2b5f40":"code","1ca4fefd":"code","a340caa1":"code","c0735809":"code","b28469dc":"code","ba305025":"code","e72ad3b0":"code","655b70e1":"code","c1f847f6":"code","79d3f028":"code","44b3fbeb":"code","09062f6c":"code","43e5e09f":"code","e3d341f3":"code","a3e0815f":"code","ff85399b":"code","5281faaa":"code","c86c2c0d":"code","72d8e503":"code","7f4cadcc":"code","40e8682c":"code","a8831a67":"code","ef21bcf5":"code","e726e325":"code","bf75180a":"code","e0ff1b8f":"code","13a12242":"code","ffb6397d":"code","8250fc9d":"code","7e248f3e":"code","c677164d":"code","d64e0199":"code","93928f19":"code","a11535b8":"code","93d5d442":"code","2d3c0893":"code","aa7fcc82":"markdown","15e2ff7c":"markdown","c3e4c4cf":"markdown","12293879":"markdown","daf38edf":"markdown","a0d1bfa7":"markdown","7feaeaa2":"markdown","dd4aeb9a":"markdown","dfde31e4":"markdown","1faf7839":"markdown","d1689834":"markdown","6e666745":"markdown","e657e4c9":"markdown","7f704cae":"markdown","2adb81b8":"markdown","eea88352":"markdown","d10bff11":"markdown","e9c58c76":"markdown","d5e5b105":"markdown","d594748e":"markdown","67c5fe75":"markdown","8a4bc51d":"markdown","c508e9ce":"markdown","6a9db91b":"markdown","6006f669":"markdown","7d196646":"markdown","d8c12ce0":"markdown","83eedfe7":"markdown","e5d3706e":"markdown","4cc814f1":"markdown","0c374aee":"markdown","943fa49d":"markdown","75730777":"markdown","62f25372":"markdown","8da89d79":"markdown","05d774c6":"markdown","74e751f1":"markdown","971aa54d":"markdown","d4505f1a":"markdown"},"source":{"9eff08ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport warnings\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom scipy.stats import skew\nfrom scipy import stats\nfrom scipy.stats.stats import pearsonr\nfrom scipy.stats import norm\nfrom collections import Counter\nfrom sklearn.linear_model import LinearRegression,LassoCV, Ridge, LassoLarsCV,ElasticNetCV\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, learning_curve\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, ExtraTreesRegressor, GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler, Normalizer, RobustScaler\nwarnings.filterwarnings('ignore')\nsns.set(style='white', context='notebook', palette='deep')\n%config InlineBackend.figure_format = 'retina' #set 'png' here when working on notebook\n%matplotlib inline\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8f4e1387":"filename1 = \"\/kaggle\/input\/brasilian-houses-to-rent\/houses_to_rent.csv\"\nfilename2 = \"\/kaggle\/input\/brasilian-houses-to-rent\/houses_to_rent_v2.csv\"","bfccd9f8":"df = pd.read_csv(filename2)\n\n# take a look at the dataset\ndf.head()","7bcc9f03":"cities = df['city'].unique()\ncities","c4ad26cd":"df['total (R$)'].describe().apply(lambda x: format(x, 'f'))","67b27d72":"sns.distplot(df['total (R$)']);","536c6d73":"big_price = df[df['total (R$)'] > 50000]\nbig_price","b9318e4d":"df_clean = df.drop(big_price.index)","3c60d103":"df_clean['total (R$)'].describe()","b69580f1":"sns.distplot(df_clean['total (R$)']);","75240eb1":"sns.distplot(df_clean['total (R$)'], fit=norm);\n\n(mu, sigma) = norm.fit(df_clean['total (R$)'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('total (R$) distribution')\n\nfig = plt.figure()\nres = stats.probplot(df_clean['total (R$)'], plot=plt)\nplt.show()\n\nprint(\"Skewness: %f\" % df_clean['total (R$)'].skew())\nprint(\"Kurtosis: %f\" % df_clean['total (R$)'].kurt())","a0523b18":"# Create a figure and axes. Then plot the data\n#fig, ax = plt.subplots()\n#sns.distplot(df['fmr_1'], ax=ax)\n\n# Customize the labels and limits\n#ax.set(xlabel=\"1 Bedroom Fair Market Rent\", xlim=(100,1500), title=\"US Rent\")\n\n# Add vertical lines for the median and mean\n#ax.axvline(x=median, color='m', label='Median', linestyle='--', linewidth=2) #shows the median)\n#ax.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2) #shows the mean\n\n# Show the legend and plot the data\n#ax.legend()\n#plt.show()","0f07b97f":"total = df_clean.isnull().sum().sort_values(ascending=False)\npercent = (df_clean.isnull().sum()\/df_clean.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","66cb7133":"df_clean['floor'].value_counts()","21615da8":"df_floor = df_clean[df_clean['floor'] == '-']\ndf_floor['total (R$)'].describe()","2ef8dd90":"sns.distplot(df_floor['total (R$)']);","27e6f8c5":"df_clean['area'].describe()","6ff3de78":"big_area = df_clean[df_clean['area'] > 1200]\nbig_area","182d5d1b":"df_clean.select_dtypes(include=['object']).columns","f9c85095":"df_clean.select_dtypes(include=['int64','float64']).columns","de9f7441":"sns.relplot(x = 'area',y='total (R$)',data=df_clean,kind='scatter',size='total (R$)')","ad03cbdb":"df_clean_v2 = df_clean.drop(big_area.index)","ac6ca8b8":"sns.relplot(x = 'area',y='total (R$)',data=df_clean_v2,kind='scatter',size='total (R$)')","45261950":"var = 'city'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","bf2dad36":"var = 'rooms'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","80447b7a":"plt.figure()\nsns.countplot(x='city', hue='animal', data=df, palette='RdBu')\nplt.xticks([0,1,2,3,4], cities)\nplt.show()\n#gostara de fazer um gr\u00e1fico barra de cada cidade escrevendo numero de aceita\u00e7\u00f5es e n\u00e3 aceita\u00e7\u00f5es","b543f059":"var = 'animal'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","c704b9be":"plt.figure()\nsns.countplot(x='city', hue='furniture', data=df, palette='RdBu')\nplt.xticks([0,1,2,3,4], cities)\nplt.show()","7de87139":"var = 'furniture'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","3cda62df":"var = 'bathroom'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","403f8374":"var = 'parking spaces'\ndata = pd.concat([df_clean_v3['total (R$)'], df_clean_v3[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"total (R$)\", data=df_clean_v3)\nfig.axis(ymin=0, ymax=35000);","e2a3b5cf":"cols = ['total (R$)', 'rooms', 'bathroom', 'area']\nsns.pairplot(df_clean_v3[cols], size = 4);","5b08fbf7":"corrmat = df_clean_v3.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","431636dd":"df_sp = df_clean_v2[df_clean_v2['city'] == 'S\u00e3o Paulo']\ndf_sp.head(5)","a2eb031a":"df_bh = df_clean_v2[df_clean_v2['city'] == 'Belo Horizonte']\ndf_bh.head(5)","4f11f9aa":"df_poa = df_clean_v2[df_clean_v2['city'] == 'Porto Alegre']\ndf_poa.head(5)","09038dab":"df_camp = df_clean_v2[df_clean_v2['city'] == 'Campinas']\ndf_camp.head(5)","8f2b5f40":"df_rj = df_clean_v2[df_clean_v2['city'] == 'Rio de Janeiro']\ndf_rj.head(5)","1ca4fefd":"df_clean_v3[\"total (R$)\"] = np.log1p(df_clean_v3[\"total (R$)\"])\n\nsns.distplot(df_clean_v3[\"total (R$)\"] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(df_clean_v3[\"total (R$)\"])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\nfig = plt.figure()\nres = stats.probplot(df_clean_v3[\"total (R$)\"], plot=plt)\nplt.show()\n\ny_train = df_clean_v3['total (R$)'].values\n\nprint(\"Skewness: %f\" % df_clean_v3[\"total (R$)\"].skew())\nprint(\"Kurtosis: %f\" % df_clean_v3[\"total (R$)\"].kurt())","a340caa1":"x = df_clean_v3['area']\ny = df_clean_v3['total (R$)']\n\nx = (x - x.mean()) \/ x.std()\nx = np.c_[np.ones(x.shape[0]), x] ","c0735809":"x.shape","b28469dc":"def loss(h, y):\n  sq_error = (h - y)**2\n  n = len(y)\n  return 1.0 \/ (2*n) * sq_error.sum()","ba305025":"import unittest\n\nclass TestLoss(unittest.TestCase):\n\n  def test_zero_h_zero_y(self):\n    self.assertAlmostEqual(loss(h=np.array([0]), y=np.array([0])), 0)\n\n  def test_one_h_zero_y(self):\n    self.assertAlmostEqual(loss(h=np.array([1]), y=np.array([0])), 0.5)\n\n  def test_two_h_zero_y(self):\n    self.assertAlmostEqual(loss(h=np.array([2]), y=np.array([0])), 2)\n    \n  def test_zero_h_one_y(self):\n    self.assertAlmostEqual(loss(h=np.array([0]), y=np.array([1])), 0.5)\n    \n  def test_zero_h_two_y(self):\n    self.assertAlmostEqual(loss(h=np.array([0]), y=np.array([2])), 2)","e72ad3b0":"def run_tests():\n  unittest.main(argv=[''], verbosity=1, exit=False)\n\nrun_tests()","655b70e1":"class LinearRegression:\n  \n  def predict(self, X):\n    return np.dot(X, self._W)\n  \n  def _gradient_descent_step(self, X, targets, lr):\n\n    predictions = self.predict(X)\n    \n    error = predictions - targets\n    gradient = np.dot(X.T,  error) \/ len(X)\n\n    self._W -= lr * gradient\n      \n  def fit(self, X, y, n_iter=100000, lr=0.01):\n\n    self._W = np.zeros(X.shape[1])\n\n    self._cost_history = []\n    self._w_history = [self._W]\n    for i in range(n_iter):\n      \n        prediction = self.predict(X)\n        cost = loss(prediction, y)\n        \n        self._cost_history.append(cost)\n        \n        self._gradient_descent_step(x, y, lr)\n        \n        self._w_history.append(self._W.copy())\n    return self","c1f847f6":"class TestLinearRegression(unittest.TestCase):\n\n    def test_find_coefficients(self):\n      clf = LinearRegression()\n      clf.fit(x, y, n_iter=2000, lr=0.01)\n      np.testing.assert_array_almost_equal(clf._W, np.array([180921.19555322,  56294.90199925]))","79d3f028":"run_tests()","44b3fbeb":"clf = LinearRegression()\nclf.fit(x, y, n_iter=2000, lr=0.01)","09062f6c":"clf._W","43e5e09f":"plt.title('Cost Function J')\nplt.xlabel('No. of iterations')\nplt.ylabel('Cost')\nplt.plot(clf._cost_history)\nplt.show()","e3d341f3":"x = df_clean_v3[['rooms', 'bathroom', 'area']]\n\nx = (x - x.mean()) \/ x.std()\nx = np.c_[np.ones(x.shape[0]), x] ","a3e0815f":"clf = LinearRegression()\nclf.fit(x, y, n_iter=2000, lr=0.01)","ff85399b":"clf._W","5281faaa":"#check for null values\ndf.isnull().sum()","c86c2c0d":"#check correlation\ndf.corr().style.background_gradient(cmap = 'coolwarm')","72d8e503":"cdf = df[['area','rooms','bathroom','parking spaces','total (R$)']]\ncdf.head(9)","7f4cadcc":"viz = cdf[['rooms','bathroom','parking spaces']]\nviz.hist()\nplt.show()","40e8682c":"cdf['totalprice'] = cdf['total (R$)']","a8831a67":"cdf.head()","ef21bcf5":"plt.scatter(cdf.rooms, cdf.totalprice,  color='blue')\nplt.xlabel(\"Number of rooms\")\nplt.ylabel(\"Total Price\")\nplt.show()","e726e325":"plt.scatter(cdf.bathroom, cdf.totalprice,  color='blue')\nplt.xlabel(\"Number of Bathrooms\")\nplt.ylabel(\"Total Price\")\nplt.show()","bf75180a":"plt.scatter(cdf['parking spaces'], cdf.totalprice,  color='blue')\nplt.xlabel(\"Number of Bathrooms\")\nplt.ylabel(\"Total Price\")\nplt.show()","e0ff1b8f":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","13a12242":"plt.scatter(train.rooms, train.totalprice,  color='blue')\nplt.xlabel(\"Rooms\")\nplt.ylabel(\"Price\")\nplt.show()","ffb6397d":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['rooms']])\ntrain_y = np.asanyarray(train[['totalprice']])\nregr.fit (train_x, train_y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","8250fc9d":"plt.scatter(train.rooms, train.totalprice,  color='blue')\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')\nplt.xlabel(\"Rooms\")\nplt.ylabel(\"Price\")","7e248f3e":"from sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['rooms']])\ntest_y = np.asanyarray(test[['totalprice']])\ntest_y_ = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y_ , test_y) )","c677164d":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\nx = np.asanyarray(train[['rooms','bathroom','parking spaces']])\ny = np.asanyarray(train[['totalprice']])\nregr.fit (x, y)\n# The coefficients\nprint ('Coefficients: ', regr.coef_)","d64e0199":"y_hat= regr.predict(test[['rooms','bathroom','parking spaces']])\nx = np.asanyarray(test[['rooms','bathroom','parking spaces']])\ny = np.asanyarray(test[['totalprice']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","93928f19":"import statsmodels.formula.api as smf\n\n# Add a new column with educ squared\ngss['educ2'] = gss['educ']**2\n\n# Run a regression model with educ, educ2, age, and age2\nresults = smf.ols('realinc ~ educ + educ2 + age + age2',data = gss).fit()\n\n# Print the estimated parameters\nprint(results.params)","a11535b8":"# Run a regression model with educ, educ2, age, and age2\nresults = smf.ols('realinc ~ educ + educ2 + age + age2', data=gss).fit()\n\n# Make the DataFrame\ndf = pd.DataFrame()\ndf['educ'] = np.linspace(0,20)\ndf['age'] = 30\ndf['educ2'] = df['educ']**2\ndf['age2'] = df['age']**2\n\n# Generate and plot the predictions\npred = results.predict(df)\nprint(pred.head())","93d5d442":"# Plot mean income in each age group\nplt.clf()\ngrouped = gss.groupby('educ')\nmean_income_by_educ = grouped['realinc'].mean()\nplt.plot(mean_income_by_educ,'o',alpha=0.5)\n\n# Plot the predictions\npred = results.predict(df)\nplt.plot(df['educ'], pred, label='Age 30')\n\n# Label axes\nplt.xlabel('Education (years)')\nplt.ylabel('Income (1986 $)')\nplt.legend()\nplt.show()\n","2d3c0893":"# Adjust to add subgroups based on \"Interested in Pets\"\ng = sns.catplot(x=\"Gender\",\n                y=\"Age\", data=survey_data, \n                kind=\"box\", hue='Interested in Pets')","aa7fcc82":"# Rio de Janeiro","15e2ff7c":"## Missing data","c3e4c4cf":"# Machine Learning","12293879":"We have 2461 a strange value '-'","daf38edf":"### City vs Price","a0d1bfa7":"# Campinas","7feaeaa2":"<h2 id=\"prediction\">Prediction<\/h2>","dd4aeb9a":"# Belo Horizonte","dfde31e4":"Again, here we have some problems, there are some strange data. Let's find and drop them.","1faf7839":"Lets select some features to explore more.","d1689834":"### Bathrooms vs Price","6e666745":"## Motivation\nThis notebook is going to be focused on solving the problem of predicting house rent in five cities of Brazil.\n\nA house value is simply more than location and square footage. We are going to take advantage of all of the feature variables available to use and use it to analyze and predict house rent prices.\n\nWe are going to break everything into logical steps that allow us to ensure the cleanest, most realistic data for our model to make accurate predictions from.","e657e4c9":"# S\u00e3o Paulo","7f704cae":"No missing data! But is it true?","2adb81b8":"### Animal vs Price","eea88352":"## Unique cities","d10bff11":"You might\u2019ve expected that larger living area should mean a higher price.","e9c58c76":"### Correlation matrix","d5e5b105":"Looks like a normal distribution? Not quite! Looking at the kurtosis score, we can see that there is a very nice peak. However, looking at the skewness score, we can see that the sale prices deviate from the normal distribution. Going to have to fix this later! We want our data to be as \"normal\" as possible.","d594748e":"It seems a very strange price distribuiton. Existe pre\u00e7os muito altos, pr\u00e9m s\u00e3o pre\u00e7os 'fora da curva'. Vamos identifica-los","67c5fe75":"As mentioned before, __Coefficient__ and __Intercept__ , are the parameters of the fit line. \nGiven that it is a multiple linear regression, with 3 parameters, and knowing that the parameters are the intercept and coefficients of hyperplane, sklearn can estimate them from our data. Scikit-learn uses plain Ordinary Least Squares method to solve this problem.\n\n#### Ordinary Least Squares (OLS)\nOLS is a method for estimating the unknown parameters in a linear regression model. OLS chooses the parameters of a linear function of a set of explanatory variables by minimizing the sum of the squares of the differences between the target dependent variable and those predicted by the linear function. In other words, it tries to minimizes the sum of squared errors (SSE) or mean squared error (MSE) between the target variable (y) and our predicted output ($\\hat{y}$) over all samples in the dataset.\n\nOLS can find the best parameters using of the following methods:\n    - Solving the model parameters analytically using closed-form equations\n    - Using an optimization algorithm (Gradient Descent, Stochastic Gradient Descent, Newton\u2019s Method, etc.)","8a4bc51d":"### Rooms vs Price","c508e9ce":"### Area vs Price","6a9db91b":"Claramente, S\u00e3o paulo tem uma m\u00e9dia de pre\u00e7o maior que as outras cidade","6006f669":"## Prices","7d196646":"## Understanding the Client and their Problem\n\nA benefit to this study is that we can have two clients at the same time! (Think of being a divorce lawyer for both interested parties) However, in this case, we can have both clients with no conflict of interest!\n\nClient Housebuyer: This client wants to find their next dream home with a reasonable price tag. They have their locations of interest ready. Now, they want to know if the house price matches the house value. With this study, they can understand which features (ex. Number of bathrooms, location, etc.) influence the final price of the house. If all matches, they can ensure that they are getting a fair price.\n\nClient Houseseller: Think of the average house-flipper. This client wants to take advantage of the features that influence a house price the most. They typically want to buy a house at a low price and invest on the features that will give the highest return. For example, buying a house at a good location but small square footage. The client will invest on making rooms at a small cost to get a large return.\nData\n\nOur data comes from a Kaggle competition named \u201cbrazilian_houses_to_rent\u201d, which is a dataset houses to rent in diferents cities in Brazil.\nIt contains 10962 training data points and 13 features that might help us predict the selling price of a house.","d8c12ce0":"Vemos que s\u00e3o apenas 7 casa. Al\u00e9m disso, 255 e 6979 parecem ser o mesmo dado. Vamos retirar esses 7 dados da tabela","83eedfe7":"### Parking spaces vs Price","e5d3706e":"## Kind of Data","4cc814f1":"Now, lets plot each of these features vs price, to see how linear is their relation:","0c374aee":"# Variables ","943fa49d":"we can plot each of these features:","75730777":"## Loading Data and Packages","62f25372":"### Furniture vs Price","8da89d79":"## Creating train and test dataset\n\nTrain\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.\n\nThis means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing.","05d774c6":"### Summary","74e751f1":"# Porto Alegre","971aa54d":"As you can see above, apart from the (R$) values the features that make the most impact are rooms, bathrooms and parking spaces.\n\nTo further check the correlation of the features and the features that are most important to determine the Total, let us take the approach of Backward Elimination Algorithm by using the Ordinary Least Square method to find the summary of the dataset.","d4505f1a":"# Brazilian rent price: Data analysis"}}