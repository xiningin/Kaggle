{"cell_type":{"eefe727f":"code","8b65ac0d":"code","ddd81bbb":"code","871f07d9":"code","c6cae0f1":"code","f158b5d8":"code","15be649c":"code","9ca0e475":"code","4b94ab35":"code","0152a443":"code","ff3f1ce0":"code","9112bcf9":"code","a1fd73c4":"code","776b7471":"code","bcad19db":"code","e29afcd2":"code","6324e831":"code","e71124c0":"code","76cacd4d":"code","d5aee14a":"code","b38a1498":"code","271bc7a6":"code","c711adb3":"code","13c21f46":"code","c877dfb9":"code","a833f54b":"code","1cd1cd33":"code","543662d2":"code","f193a6af":"code","4c984a44":"code","6e6a61e7":"markdown","dd97f7a4":"markdown","e8e7e974":"markdown","2c0fdf7a":"markdown","f546cc82":"markdown","c9b776f6":"markdown","19a8fb29":"markdown","fe8de219":"markdown","0664ef0c":"markdown","5bf4d0e3":"markdown","2a36d224":"markdown","019e1fd4":"markdown","f422071f":"markdown","3c56ce2e":"markdown","a45fd2f3":"markdown","7b36909f":"markdown","6610e516":"markdown","a466432b":"markdown","b2d12e92":"markdown","98a072ea":"markdown"},"source":{"eefe727f":"# Imports\nimport cv2\nimport tqdm\nimport pydicom\nimport pylab as pl\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pylab as plt\n%matplotlib inline\n\nimport skimage\nfrom skimage import feature, filters\n\nimport os\nfrom os import listdir\nfrom os.path import isfile, join","8b65ac0d":"pathLabels = \"..\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_labels.csv\"\nclassInfoPath = \"..\/input\/rsna-pneumonia-detection-challenge\/stage_2_detailed_class_info.csv\"\n\nlabels = pd.read_csv(pathLabels)\nclassInfo = pd.read_csv(classInfoPath)","ddd81bbb":"merged = pd.merge(left = classInfo, right = labels, how = 'left', on = 'patientId') # Merge\nmerged = merged.drop_duplicates() # Remove duplicates\n\nmerged.head()","871f07d9":"a = merged.loc[merged['class'] == \"No Lung Opacity \/ Not Normal\"]\n\na['Target'].value_counts()","c6cae0f1":"# How many unique features?\nprint(f\"Unique features: \\n{merged.nunique()}\")","f158b5d8":"neg, pos = merged[\"Target\"].value_counts()\n\nprint(f'How many people have pneumonia vs do not: \\n{merged[\"Target\"].value_counts()}\\n')\n\nprint(f'This is roughly {round(pos\/(pos+neg)*100, 2)}% having pneumonia within this training data')","15be649c":"# See how many people with pneumonia vs non-pneumonia\nmerged['Target'].hist()","9ca0e475":"# Look at the amounts in each of the different classes\nmerged['class'].hist();","4b94ab35":"boxNums = merged.dropna()[['x', 'y', 'width', 'height']].copy() # Make a copy of just the boxes\n\n# Calculate x2 & y2 coordinates\nboxNums['x2'] = boxNums['x'] + boxNums['width']\nboxNums['y2'] = boxNums['y'] + boxNums['height']\n\n# Calculate x2 & y2 centres\nboxNums['xCentre'] = boxNums['x'] + boxNums['width']\/2\nboxNums['yCentre'] = boxNums['y'] + boxNums['height']\/2\n\n# Calculate area of the box\nboxNums['boxArea'] = boxNums['width'] * boxNums['height']","0152a443":"boxNums.head(3)","ff3f1ce0":"# Look at the correlations between x, y, x2, y2, width, height and the centres\n\npairs = [(boxNums['x'], boxNums['y']), (boxNums['x2'], boxNums['y2']), (boxNums['width'], boxNums['height']), \n         (boxNums['xCentre'], boxNums['yCentre'])]\n\naxis = [(0, 0), (0, 1), (1, 0), (1,1)]\n\nfig, axs = plt.subplots(2, 2, figsize=(10, 10))\n\nfor i in range(4):\n    axs[axis[i][0], axis[i][1]].hist2d(pairs[i][0], pairs[i][1], bins=30)\n\n# Set titles\naxs[0,0].set_title('X vs Y')\naxs[0,1].set_title('X2 vs Y2')\naxs[1,0].set_title('Width vs Height')\naxs[1,1].set_title('X Centre vs Y Centre')\n\nplt.show()   ","9112bcf9":"# Take a look at the distribution of box area\nboxNums['boxArea'].plot(kind='hist',\n                        bins=25,  \n                        figsize=(14,4), \n                        title='Area Distribution of boxes for a Positive target')","a1fd73c4":"# Get two patients (one who has pneumonia & one who doesnt)\npatient0 = merged['patientId'][0] # Doesn't have pneumonia\npatient1 = merged['patientId'][4] # Has pneumonia\n\npatients = [(patient0, \"Doesn't Have Pneumonia\"), (patient1, \"Has Pneumonia\")]\npatients","776b7471":"# Plot the images side by side for visual comparison\nimgsPath = \"..\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_images\/\"\nfig, ax = plt.subplots(1, 2, figsize=(7,7))\n\nfor i in range(2):\n    \n    patientID, title = patients[i][0], patients[i][1] # Extract patient data\n    \n    dcmFile = f\"{imgsPath}{patientID}.dcm\" # Get path\n    dcmData = pydicom.read_file(dcmFile) # Read file\n    \n    img = dcmData.pixel_array # Get the pixel array\n    \n    ax[i].imshow(img, cmap=pl.cm.gist_gray) # Plot\n    ax[i].set_title(title) # Set title\n    ax[i].axis('off') # Remove axis","bcad19db":"p = merged.loc[merged['patientId'] == patient1]\np","e29afcd2":"# We want to create a Data parser to group a patients boxes with its image\ndef parseData(df):\n\n    newData = {}\n    \n    for n, row in df.iterrows():\n        \n        patientID = row['patientId'] # Initialise patient\n        \n        # If patient is not in the dict, add them\n        if patientID not in newData:\n            newData[patientID] = {\n                'dicom': f\"{imgsPath}{patientID}.dcm\",\n                'classifier': row['Target'],\n                'boxes': []}\n\n        # Add box if the patient has pneumonia\n        if newData[patientID]['classifier'] == 1:\n            newData[patientID]['boxes'].append([row['x'], row['y'], row['width'], row['height']])\n\n    return newData","6324e831":"parsedData = parseData(merged)\n\n# Check patient 1 which we know has pneumonia\nparsedData[patient1]","e71124c0":"parsedData[merged['patientId'][0]]","76cacd4d":"\"\"\"\nCredit for @peterchang77 for these 2 functions\n\"\"\"\n\n# This function will allow us to overlay a box\ndef overlayBox(im, box, rgb, stroke=1):\n\n    # --- Convert coordinates to integers\n    box = [int(b) for b in box]\n    \n    # --- Extract coordinates\n    x, y, width, height = box\n    y2 = y + height\n    x2 = x + width\n\n    im[y:y + stroke, x:x2] = rgb\n    im[y2:y2 + stroke, x:x2] = rgb\n    im[y:y2, x:x + stroke] = rgb\n    im[y:y2, x2:x2 + stroke] = rgb\n\n    return im\n\ndef drawBox(data):\n    \n    d = pydicom.read_file(data['dicom']) # Open and read the file\n    im = d.pixel_array\n\n    # Convert to 3 RGB\n    im = np.stack([im] * 3, axis=2)\n\n    # Add the boxes with random colours\n    for box in data['boxes']:\n        \n        rgb = np.floor(np.random.rand(3) * 256).astype('int') # Get rgb\n        \n        im = overlayBox(im=im, box=box, rgb=rgb, stroke=6) # Overlay the box\n\n    pl.imshow(im, cmap=pl.cm.gist_gray) # Show the image\n    pl.axis('off') # Remove axis","d5aee14a":"drawBox(parsedData[patient1])","b38a1498":"# Get all patients with no pneumonia\npatients0 = [(row['patientId']) for n, row in merged.iterrows() if row['Target'] == 0]","271bc7a6":"fig = plt.figure(figsize=(20, 10))\n \ncolumns = 6\nrows = 4\n\nfor i in range(1, columns*rows +1):\n    \n    fig.add_subplot(rows, columns, i) # Add the subplot\n    drawBox(parsedData[patients0[i]]) # Draw the box","c711adb3":"# Get all patients with pneumonia\npatients1 = [(row['patientId']) for n, row in merged.iterrows() if row['Target'] == 1]","13c21f46":"fig = plt.figure(figsize=(20, 10))\n \ncolumns = 6\nrows = 4\n\nfor i in range(1, columns*rows +1):\n    \n    fig.add_subplot(rows, columns, i) # Add the subplot\n    drawBox(parsedData[patients1[i]]) # Draw the box","c877dfb9":"def readImage(pId):\n        \n    patient = parsedData[pId]\n    path = patient['dicom']\n\n    img = pydicom.read_file(path).pixel_array # Read & Convert to pixels\n    \n    return img","a833f54b":"noPne = readImage(patients0[1])\npne = readImage(patients1[1])","1cd1cd33":"def printTwoImgs(img1, img2, title1, title2):\n    \n    fig, ax = plt.subplots(1, 2, figsize=(12,12))\n\n    ax[0].imshow(img1, cmap=\"gray\")\n    ax[1].imshow(img2, cmap=\"gray\")\n    \n    ax[0].set_title(title1)\n    ax[1].set_title(title2)\n    \n    ax[0].axis('off')\n    ax[1].axis('off')","543662d2":"printTwoImgs(noPne, pne, \"No Pneumonia - Normal Image\", \"Pneumonia - Normal Image\")","f193a6af":"equ1 = cv2.equalizeHist(noPne)\nequ2 = cv2.equalizeHist(pne)\n\nprintTwoImgs(equ1, equ2, \"No Pneumonia\", \"Pneumonia\") # Print images","4c984a44":"hpf_kernel = np.full((3, 3), -1)\nhpf_kernel[1,1] = 9\n\nimHP = cv2.filter2D(equ1, -1, hpf_kernel)\nimUS = skimage.filters.unsharp_mask(equ1) # use unsharpen mask filter\n\nimHP2 = cv2.filter2D(equ2, -1, hpf_kernel)\nimUS2 = skimage.filters.unsharp_mask(equ2) # use unsharpen mask filter\n\nprintTwoImgs(imHP, imHP2, \"No Pneu - High Pass\", \"Pneu - High Pass\") # Print images\n\nprintTwoImgs(imUS, imUS2, \"No Pneu - Unsharpen Mask\", \"Pneu - Unsharpen Mask\") # Print images","6e6a61e7":"### Pneumonia = 1","dd97f7a4":"### Check out pneumonia classifying boxes","e8e7e974":"##### We can see that over 20,000 people are classified as not having pneumonia, whereas around 10,000 people do\n\n##### This tells us that we have an imbalanced dataset\n\n##### To deal with this, we need to assign the class with less appeareances (i.e: having pneumonia) with a higher weight to even this imbalance out. We will do this by using a compute weight function, that we will use in our Modelling file","2c0fdf7a":"##### It seems that the amount is spread evenly between the 3 classes with roughly 2\/3s being either classified as Normal or no lung opacity\/not normal","f546cc82":"##### We can see that we have saved the file path, the classifier and the array of boxes for that person\n\n##### Now check someone we know that doesnt have pneumonia","c9b776f6":"### Format of Data\n\n- <b><i>patientId_<\/i><\/b>- A patientId. Each patientId corresponds to a unique image.\n- <b><i>x_<\/i><\/b> - the upper-left x coordinate of the bounding box.\n- <b><i>y_<\/i><\/b> - the upper-left y coordinate of the bounding box.\n- <b><i>width_<\/i><\/b> - the width of the bounding box.\n- <b><i>height_<\/i><\/b> - the height of the bounding box.\n- <b><i>Target_<\/i><\/b> - the binary Target, indicating whether this sample has evidence of pneumonia. (1 = true, 0 = false)\n\n### Notes\n\n- A pneumonia opacity is a part of the lungs that looks darker on a radiograph and has a shape that indicates that pneumonia is (or may be) present.\n- Since the goal is to detect & then draw a bounding box on each pneumonia opacities (where each image can have 0 or many), and the training set is already classified:\n    - It can be analysed as a supervised learning statistical multilabel classification\n","19a8fb29":"## Part 0.5: Some Feature Analysis for Standard Models","fe8de219":"## Part 0.1: Merge ClassInfo & Labels","0664ef0c":"### Hist Equalisation","5bf4d0e3":"### Create a function that allows us to draw the boxes over the images","2a36d224":"## Part 0.2: Some Numerical Analysis","019e1fd4":"### Image Sharpening","f422071f":"##### Important Note: A given patientId may have multiple boxes if more than one area of pneumonia is detected (see above).\n##### We can see that this particular patient (patient #5) has pneumonia, and has 2 entries, with 2 different boxes","3c56ce2e":"## Part 0.3: Let's take a look at the Dicom Images ","a45fd2f3":"##### We can see that the patient with pneumonia appears to have a much less opaque scan","7b36909f":"##### We can see the dark opacities in the image were boxed, indicating the pnemonia","6610e516":"##### Taking a look at the heatmap, we can see that the centres seems to have more density for x, x2 and y, y2","a466432b":"## Part 0: Pneumonia Exploratory Data Analysis","b2d12e92":"### Pneumonia = 0","98a072ea":"## Part 0.4: Viewing side-by-side of people having and not having Pneumonia"}}