{"cell_type":{"f22e761e":"code","c23b04bf":"code","6057b23c":"code","fa07da19":"code","bf77b0bc":"code","052e224c":"code","10264b5c":"code","5c4c3ab3":"code","367649c2":"code","0735670a":"code","d2920f2c":"code","b78977c1":"code","9301e49c":"code","92e34585":"code","092c37df":"code","9650d113":"code","9b28d07d":"code","b11bc985":"code","7a578bac":"code","52ab39b8":"code","d964fb4c":"code","955eb20d":"code","aa49bfd3":"code","2eff0f2d":"code","abccf50c":"code","ce1432f4":"code","a66aa2d8":"markdown","5571ac0f":"markdown","db01bff3":"markdown","a477cd43":"markdown","6dd6754d":"markdown","5daf5df1":"markdown","b8cb62c7":"markdown","122e5777":"markdown","6e56123d":"markdown","135cb675":"markdown","e96050a2":"markdown"},"source":{"f22e761e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c23b04bf":"data = pd.read_csv('..\/input\/iris\/Iris.csv')","6057b23c":"import matplotlib.pyplot as plt\nimport seaborn as sns","fa07da19":"data.info()","bf77b0bc":"data.head(10)","052e224c":"data.isnull().sum()","10264b5c":"data.shape","5c4c3ab3":"data.describe()","367649c2":"sns.pairplot(data,hue='Species')","0735670a":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score ","d2920f2c":"X = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values","b78977c1":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33,random_state=0)","9301e49c":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train,y_train)\nprediction = classifier.predict(X_test)","92e34585":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","092c37df":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train,y_train)\npred = nb.predict(X_test)","9650d113":"print(accuracy_score(y_test,pred))\nprint(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","9b28d07d":"from sklearn.svm import SVC\nclassifier = SVC()\nclassifier.fit(X_train,y_train)\nprediction = classifier.predict(X_test)","b11bc985":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","7a578bac":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=9)\nclassifier.fit(X_train, y_train)\nprediction = classifier.predict(X_test)","52ab39b8":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","d964fb4c":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\nprediction = classifier.predict(X_test)","955eb20d":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","aa49bfd3":"from sklearn.linear_model import SGDClassifier\nclassifier = SGDClassifier(loss = 'modified_huber',shuffle = True,random_state=101)\nclassifier.fit(X_train, y_train)\nprediction = classifier.predict(X_test)","2eff0f2d":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","abccf50c":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nclassifier.fit(X_train, y_train)\nprediction = classifier.predict(X_test)","ce1432f4":"print(accuracy_score(y_test,prediction))\nprint(classification_report(y_test,prediction))\nprint(confusion_matrix(y_test,prediction))","a66aa2d8":"# Random Forest","5571ac0f":"# **Data Visualization**","db01bff3":"# Decision Tree","a477cd43":"# Applying all Classification Models","6dd6754d":"# K-Nearest Neighbors","5daf5df1":"# Naive Bayes","b8cb62c7":"# Stochastic Gradient Descent","122e5777":"If you have any doubt reagrding any part of the notebook, feel free to comment your doubt in the comment box.\n\nLearnt something new do give a upvote.\n\nThank you!!","6e56123d":"# Dataset Preprocessing","135cb675":"# Support Vector Machine","e96050a2":"# Logistic Regression"}}