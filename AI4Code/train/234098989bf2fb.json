{"cell_type":{"a0df22c3":"code","38418303":"code","939eb397":"code","2c620a19":"code","ff869dbf":"code","3ff76483":"code","001c51c2":"code","de04b388":"code","15b4fe62":"code","61d61b04":"code","bd996c16":"code","938cc671":"code","c2a19f5d":"markdown","04035634":"markdown"},"source":{"a0df22c3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nimport torch\nimport pprint\nfrom torchvision import models, transforms\nimport tensorflow as tf\n\nimport random\nfrom tqdm.notebook import tqdm\n\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom keras.layers import Conv2D, Dense, Reshape, Input, LSTM\nfrom keras import Model, backend\nimport tensorflow as tf\n\nimport seaborn as sns\n","38418303":"trade_ex = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\nbook_ex = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')","939eb397":"book_ex","2c620a19":"trade_ex","ff869dbf":"samples = [\"bid_price1\",\"bid_price2\",\"ask_price1\",\"ask_price2\"]\n\ntime_id = trade_ex[\"time_id\"].unique()\n\nfor i,id in enumerate(time_id):\n    plt.ioff()\n    plt.figure(figsize=(20,5))\n    \n    book_test = book_ex[book_ex[\"time_id\"]==id]\n    trade_test = trade_ex[trade_ex[\"time_id\"]==id]\n    for num,a in enumerate(samples):\n        if num<2:\n            plt.plot(book_test[\"seconds_in_bucket\"],book_test[a],label=a,color = 'green')\n        else: \n            plt.plot(book_test[\"seconds_in_bucket\"],book_test[a],label=a,color = 'red')\n\n    plt.axis('off')\n    plt.plot(trade_test[\"seconds_in_bucket\"],trade_test[\"price\"],label=\"trade_parquet\",lw=10)\n    plt.savefig(os.path.join('stock_'+str(i)+'.png')) #plt.saveig()\u3067\u30b0\u30e9\u30d5\u3092\u4fdd\u5b58\n    plt.close()","3ff76483":"from IPython.display import Image\nImage(\"stock_0.png\")","001c51c2":"from keras.preprocessing.image import load_img, img_to_array, array_to_img\nfrom keras.applications.vgg16 import preprocess_input, VGG16, decode_predictions\nimport tensorflow as tf\n\nfrom keras.preprocessing.image import load_img, img_to_array, array_to_img\nfrom keras.preprocessing.image import random_rotation, random_shift, random_zoom\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Dense\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Flatten\nfrom keras.models import Sequential\nfrom keras.models import model_from_json\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.optimizers import Adam\nfrom keras.utils import np_utils","de04b388":"for i,id_ in enumerate(time_id):\n    img_pil = load_img(f'stock_{i}.png', target_size=(224, 224))\n    img = img_to_array(img_pil)\n    img = img[tf.newaxis, ...]\n    img_preprocessed = preprocess_input(img)\n    if i == 0:\n        img_array = img_preprocessed\n    else:\n        img_array = np.vstack((img_array, img_preprocessed))","15b4fe62":"#\u30e9\u30d9\u30eb\u306e\u30b5\u30f3\u30d7\u30eb\ny_train = np.random.rand(img_array.shape[0])\ny_train","61d61b04":"img_array.shape","bd996c16":"##https:\/\/qiita.com\/mako0715\/items\/b6605a77467ac439955b\u3092\u53c2\u7167\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(224, 224, 3)),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n  tf.keras.layers.MaxPooling2D(2,2),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(16, activation='relu'),\n  tf.keras.layers.Dense(1, activation='softmax')\n])\n# \u4efb\u610f\u306e\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3068\u640d\u5931\u95a2\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u30e2\u30c7\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5404\u5c64\u306e\u51fa\u529b\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b\nmodel.summary()\n# \u30e2\u30c7\u30eb\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3059\u308b\nmodel.fit(img_array, y_train, epochs=5)","938cc671":"def rmspe(y_true, y_pred):\n    _=np.sqrt(np.mean(((y_pred - y_true) \/ y_true)**2))*100\n    return _","c2a19f5d":"## \u5b66\u7fd2\u306e\u305f\u3081\u306e\u524d\u51e6\u7406\u301c\u5b66\u7fd2","04035634":"# stock_id=0\u3092time_id\u3054\u3068\u306b\u753b\u50cf\u5909\u63db\u3059\u308b"}}