{"cell_type":{"796a9deb":"code","28627c9c":"code","a6f6b093":"code","1ca013cc":"code","39c9bd39":"code","a8c7b7f4":"code","b5d4be68":"code","b733f7cb":"code","3a681e1f":"code","51e0da9c":"code","4f964698":"code","5febfd8b":"code","ba88699e":"code","bb11c9f1":"code","67e49fe5":"code","99bffac6":"code","0b4c4778":"code","bb9af82b":"code","1b68f54e":"code","fcbeda08":"code","2eff3e20":"code","89431739":"code","5769f2ef":"code","c86034c8":"code","bf917655":"code","ecd1115b":"code","e331df5d":"code","798288f5":"code","6f80477b":"code","fada36ea":"code","974141f9":"code","5aa09450":"code","fb30a1e7":"code","eca8947b":"code","84cce979":"code","799ceda1":"code","0c8a0414":"code","e3519349":"markdown","e3d22ff3":"markdown"},"source":{"796a9deb":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nfrom glob import glob as gb","28627c9c":"#list all the directories\ndirs=os.listdir(\"..\/input\/zomato_data\/\")\ndirs","a6f6b093":"len(dirs)","1ca013cc":"#storing all the files from every directory\nli=[]\nfor dir1 in dirs:\n    files=os.listdir(r\"..\/input\/zomato_data\/\"+dir1)\n    #reading each file from list of files from previous step and creating pandas data fame    \n    for file in files:\n        \n        df_file=pd.read_csv(\"..\/input\/zomato_data\/\"+dir1+\"\/\"+file,quotechar='\"',delimiter=\"|\")\n#appending the dataframe into a list\n        li.append(df_file.values)","39c9bd39":"len(li)","a8c7b7f4":"#numpys vstack method to append all the datafames to stack the sequence of input vertically to make a single array\ndf_np=np.vstack(li)","b5d4be68":"#no of rows is represents the total no restaurants ,now of coloumns(12) is columns for the dataframe\ndf_np.shape","b733f7cb":"#creating final dataframe from the numpy array\ndf_final=pd.DataFrame(df_np)","3a681e1f":"#adding the header columns\ndf_final=pd.DataFrame(df_final.values, columns =[\"NAME\",\"PRICE\",\"CUSINE_CATEGORY\",\"CITY\",\"REGION\",\"URL\",\"PAGE NO\",\"CUSINE TYPE\",\"TIMING\",\"RATING_TYPE\",\"RATING\",\"VOTES\"])","51e0da9c":"#displaying the dataframe\ndf_final","4f964698":"#header column \"PAGE NO\" is not required ,i used it while scraping the data from zomato to do some sort of validation,lets remove the column\ndf_final.drop(columns=[\"PAGE NO\"],axis=1,inplace=True)","5febfd8b":"#display the dataframe again\ndf_final","ba88699e":"#lets count how many unique cities are there \n\ndf_final[\"CITY\"].unique()","bb11c9f1":"# import json and requests library to use googl apis to get the longitude ant latituide values\nimport requests\nimport json\n\n#creating a separate array with all city names as elements of array\ncity_name=df_final[\"CITY\"].unique()\nli1=[]\n\n#googlemap api calling url \ngeo_s ='https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json'\n#iterating through a for loop for each city names \nfor i in range(len(city_name)):\n\n#i have used my own google map api, please use ypur own api     \n param = {'address': city_name[i], 'key': 'AIzaSyD-kYTK-8FQGueJqA2028t2YHbUX96V0vk'}\n \n response = requests.get(geo_s, params=param)\n \n response=response.text\n\n data=json.loads(response)\n\n#setting up the variable with corresponding city longitude and latitude\n lat=data[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n lng=data[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n\n#creating a new data frame with city , latitude and longitude as columns\n df2=pd.DataFrame([[city_name[i],lat,lng]])\n li1.append(df2.values)","67e49fe5":"#numpys vstack method to append all the datafames to stack the sequence of input vertically to make a single array\ndf_np=np.vstack(li1)","99bffac6":"#creating a second dataframe with city name, latitude and longitude\ndf_sec=pd.DataFrame(df_np,columns=[\"CITY\",\"lat\",\"lng\"])","0b4c4778":"#display the second dataframe contents\ndf_sec","bb9af82b":"#merge this data frame to the existing df_final data frame using merge and join features from pandas,and creating a new data frame\ndf_final2=df_final.merge(df_sec,on=\"CITY\",how=\"left\")","1b68f54e":"#display the contents , it will have longitude and latitude now\ndf_final2","fcbeda08":"#creating pandas series to hold the citynames and corresponding count of restuarnats in ascending order\nli2=df_final[\"CITY\"].value_counts().sort_values(ascending=True)","2eff3e20":"li2","89431739":"#creating a empty dictionary\ndc={}\n\n#setting dictionary values as city name , count of restuarnat and key will city names as well\nfor i,j in li2.items():\n    x=i + \",\" +str(j)\n    dc.update({i:[i,j]})","5769f2ef":"#displaying the dictionary\ndc","c86034c8":"#creating another data frame from the above dictionary\ndf_map=pd.DataFrame.from_dict(dc,orient=\"index\",columns=[\"CITY\",\"COUNT\"])","bf917655":"#displaying the data frame\ndf_map","ecd1115b":"#merging this data frame with df_sec data frame(which we created using city names,longitude and latitude)\ndf_map_final=df_map.merge(df_sec,on=\"CITY\",how=\"left\")","e331df5d":"#displaying the new data frame this frame will be used for map ploting\ndf_map_final","798288f5":"#importing the libraries for map ploting\nfrom matplotlib import cm\nfrom matplotlib.dates import date2num\nfrom mpl_toolkits.basemap import Basemap\n\n# for date and time processing\nimport datetime","6f80477b":"#lets take one data frame for top 20 cities with most retaurants counts \ndf_plot_top=df_map_final.tail(20)","fada36ea":"#displaying the data frame\ndf_plot_top","974141f9":"#lets plot this inside the map corresponding to the cities exact co-ordinates which we received from google api \n#plt.subplots(figsize=(20,50))\nplt.figure(figsize=(50,60))\nmap=Basemap(width=120000,height=900000,projection=\"lcc\",resolution=\"l\",llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawcountries()\nmap.drawmapboundary(color='#f2f2f2')\n\nmap.drawcoastlines()\n\n\n\nlg=np.array(df_plot_top[\"lng\"])\nlat=np.array(df_plot_top[\"lat\"])\npt=np.array(df_plot_top[\"COUNT\"])\ncity_name=np.array(df_plot_top[\"CITY\"])\n\nx,y=map(lg,lat)\n\n#using lambda function to create different sizes of marker as per thecount \n\np_s=df_plot_top[\"COUNT\"].apply(lambda x: int(x)\/2)\n\n#plt.scatter takes logitude ,latitude, marker size,shape,and color as parameter in the below , in this plot marker color is always blue.\nplt.scatter(x,y,s=p_s,marker=\"o\",c='BLUE')\nplt.title(\"TOP 20 INDIAN CITIES RESTAURANT COUNTS PLOT AS PER ZOMATO\",fontsize=30,color='RED')","5aa09450":"#lets plot this inside the map corresponding to the cities exact co-ordinates which we received from google api ,here marker color will be different as per marker size\n#plt.subplots(figsize=(20,50))\nplt.figure(figsize=(50,60))\nmap=Basemap(width=120000,height=900000,projection=\"lcc\",resolution=\"l\",llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawcountries()\nmap.drawmapboundary(color='#f2f2f2')\n\nmap.drawcoastlines()\n\n\n\nlg=np.array(df_plot_top[\"lng\"])\nlat=np.array(df_plot_top[\"lat\"])\npt=np.array(df_plot_top[\"COUNT\"])\ncity_name=np.array(df_plot_top[\"CITY\"])\n\nx,y=map(lg,lat)\n\n#using lambda function to create different sizes of marker as per thecount \n\np_s=df_plot_top[\"COUNT\"].apply(lambda x: int(x)\/2)\n\n#plt.scatter takes logitude ,latitude, marker size,shape,and color as parameter in the below , in this plot marker color is different.\nplt.scatter(x,y,s=p_s,marker=\"o\",c=p_s)\nplt.title(\"TOP 20 INDIAN CITIES RESTAURANT COUNTS PLOT AS PER ZOMATO\",fontsize=30,color='RED')","fb30a1e7":"#lets plot with the city names inside the map corresponding to the cities exact co-ordinates which we received from google api ,here marker color will be different as per marker size\n#plt.subplots(figsize=(20,50))\nplt.figure(figsize=(50,60))\nmap=Basemap(width=120000,height=900000,projection=\"lcc\",resolution=\"l\",llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawcountries()\nmap.drawmapboundary(color='#f2f2f2')\n\nmap.drawcoastlines()\n\n\n\nlg=np.array(df_plot_top[\"lng\"])\nlat=np.array(df_plot_top[\"lat\"])\npt=np.array(df_plot_top[\"COUNT\"])\ncity_name=np.array(df_plot_top[\"CITY\"])\n\nx,y=map(lg,lat)\n\n#using lambda function to create different sizes of marker as per thecount \n\np_s=df_plot_top[\"COUNT\"].apply(lambda x: int(x)\/2)\n\n#plt.scatter takes logitude ,latitude, marker size,shape,and color as parameter in the below , in this plot marker color is different.\nplt.scatter(x,y,s=p_s,marker=\"o\",c=p_s)\n\nfor a,b ,c,d in zip(x,y,city_name,pt):\n    #plt.text takes x position , y position ,text ,font size and color as arguments\n    plt.text(a,b,c,fontsize=30,color=\"r\")\n   \n    \n    \nplt.title(\"TOP 20 INDIAN CITIES RESTAURANT COUNTS PLOT AS PER ZOMATO\",fontsize=30,color='RED')","eca8947b":"#lets plot with the city names and restaurants count inside the map corresponding to the cities exact co-ordinates which we received from google api ,here marker color will be different as per marker size\n#plt.subplots(figsize=(20,50))\nplt.figure(figsize=(50,60))\nmap=Basemap(width=120000,height=900000,projection=\"lcc\",resolution=\"l\",llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawcountries()\nmap.drawmapboundary(color='#f2f2f2')\n\nmap.drawcoastlines()\n\n\n\nlg=np.array(df_plot_top[\"lng\"])\nlat=np.array(df_plot_top[\"lat\"])\npt=np.array(df_plot_top[\"COUNT\"])\ncity_name=np.array(df_plot_top[\"CITY\"])\n\nx,y=map(lg,lat)\n\n#using lambda function to create different sizes of marker as per thecount \n\np_s=df_plot_top[\"COUNT\"].apply(lambda x: int(x)\/2)\n\n#plt.scatter takes logitude ,latitude, marker size,shape,and color as parameter in the below , in this plot marker color is different.\nplt.scatter(x,y,s=p_s,marker=\"o\",c=p_s)\n\nfor a,b ,c,d in zip(x,y,city_name,pt):\n    #plt.text takes x position , y position ,text(city name) ,font size and color as arguments\n    plt.text(a,b,c,fontsize=30,color=\"r\")\n    #plt.text takes x position , y position ,text(restaurant counts) ,font size and color as arguments, like above . but only i have changed the x and y position to make it more clean and easier to read\n    plt.text(a+60000,b+30000,d,fontsize=30)\n   \n    \n    \nplt.title(\"TOP 20 INDIAN CITIES RESTAURANT COUNTS PLOT AS PER ZOMATO\",fontsize=30,color='RED')","84cce979":"#lets take one data frame for bottom 15 cities with minimum retaurants counts \ndf_plot_bottom=df_map_final.head(15)","799ceda1":"#displaying the data frame\ndf_plot_bottom","0c8a0414":"#lets plot with the city names and restaurants count inside the map corresponding to the cities exact co-ordinates which we received from google api ,here marker color will be different as per marker size\n#plt.subplots(figsize=(20,50))\nplt.figure(figsize=(50,50))\nmap=Basemap(width=120000,height=900000,projection=\"tmerc\",resolution=\"l\",llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=20,lon_0=88)\nmap.drawcountries()\nmap.drawmapboundary(color='#f2f2f2')\n\nmap.drawcoastlines()\n\n\n\nlg=np.array(df_plot_bottom[\"lng\"])\nlat=np.array(df_plot_bottom[\"lat\"])\npt=np.array(df_plot_bottom[\"COUNT\"])\ncity_name=np.array(df_plot_bottom[\"CITY\"])\n\nx,y=map(lg,lat)\n\n#using lambda function to create different sizes of marker as per thecount \n\np_s=df_plot_bottom[\"COUNT\"].apply(lambda x: int(x)*50)\n\n#plt.scatter takes logitude ,latitude, marker size,shape,and color as parameter in the below , in this plot marker color is different.\nplt.scatter(x,y,s=p_s,marker=\"o\",c=p_s)\n\nfor a,b ,c,d in zip(x,y,city_name,pt):\n    #plt.text takes x position , y position ,text(city name) ,font size and color as arguments\n    plt.text(a-3000,b,c,fontsize=30,color=\"r\")\n    #plt.text takes x position , y position ,text(restaurant counts) ,font size and color as arguments, like above . but only i have changed the x and y position to make it more clean and easier to read\n    plt.text(a+60000,b+30000,d,fontsize=30)\n   \n    \n    \nplt.title(\"BOTTOM 15 INDIAN CITIES MINIMUM RESTAURANT COUNTS PLOT AS PER ZOMATO\",fontsize=30,color='RED')","e3519349":"# CITY VS RESTAURANTS COUNT PLOTING INSIDE INDIAN MAP USING BASEMAP LIBRARY ,I WILL BE USING THE ZOMATO DATA SET ONLY WHICH I USED IN MY LAST KERNAL. \n# THE CODE WILL BE A BIT COMPLEX AS I WILL USE SOME ADDITONAL APIS FROM GOOGLE FOR FINIDING THE LONGITUDE AND LATITUDES OF DIFFERENT CITIES TO SET AND PLOT THE CITY LOCATIONS \n# STAY TUNE FOR MORE UPDATES AND DONT FORGET TO SUBSCRIBE TO OUR YOUTUBE CHANNEL https:\/\/www.youtube.com\/channel\/UCYtH9iBldgQo4ns2xI1PHhw?view_as=subscriber","e3d22ff3":"#thats all guys , please let me know , if you like my work , will be coming up with more kernels from this dataset \n#dont forget to subscribe to my youtube channel https:\/\/www.youtube.com\/channel\/UCYtH9iBldgQo4ns2xI1PHhw?view_as=subscriber\n"}}