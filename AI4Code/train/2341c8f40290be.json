{"cell_type":{"08499e50":"code","5735d75e":"code","9542c0a7":"code","64ff230e":"code","948d923e":"code","b91bca2d":"code","85b668d7":"code","9f34afa3":"code","154716e9":"code","9a45f998":"code","b19c38eb":"code","04fed279":"code","042fbe16":"code","cd9c55eb":"code","aba7d6b5":"code","789b9624":"code","a40f1128":"code","e9d8673f":"code","ccca6c20":"code","a988bd81":"code","162b2919":"code","4395b1a7":"code","83f06054":"code","76b67e9d":"code","c2efdabd":"code","b471023a":"code","c5e2a49c":"markdown","354a1618":"markdown","4865e36d":"markdown","e6d831b8":"markdown","36bdafdc":"markdown","eb2e2514":"markdown","b1649122":"markdown","ef01b1cf":"markdown","0460bc32":"markdown","17bab783":"markdown","e948f8c0":"markdown","d0e75c08":"markdown","91617049":"markdown","6026cebe":"markdown","7f8ee3a5":"markdown","e2f4e75b":"markdown","df832eda":"markdown","457043e3":"markdown","fdd2a4c0":"markdown","37643e17":"markdown","941103d6":"markdown","521f44fc":"markdown","26126289":"markdown","39a77b4d":"markdown","d01d6d6a":"markdown","769a347b":"markdown","8737b51c":"markdown","87203e9a":"markdown"},"source":{"08499e50":"from sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom keras.layers import BatchNormalization\nfrom keras.models import Sequential\nfrom keras.layers import Dropout\nfrom keras.layers import Dense\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport collections\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5735d75e":"data = pd.read_csv(\"..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv\",sep=',')","9542c0a7":"data.head()","64ff230e":"data.dtypes","948d923e":"data[\"TotalCharges\"] = pd.to_numeric(data[\"TotalCharges\"],errors=\"coerce\")","b91bca2d":"data.isnull().sum()","85b668d7":"summary = data.describe(include=[\"O\"])\nsummary","9f34afa3":"data.dropna(how=\"any\",inplace=True)","154716e9":"data.isnull().sum()","9a45f998":"data_cont = ['tenure','MonthlyCharges', 'TotalCharges']\ndata_cat = ['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n            'PhoneService', 'MultipleLines', 'InternetService',\n            'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n            'TechSupport','StreamingTV','StreamingMovies',\n            'Contract', 'PaperlessBilling','PaymentMethod']","b19c38eb":"sns.catplot(x=\"Churn\", kind=\"count\", data=data,orient='h')","04fed279":"fig , ax = plt.subplots(4,4,figsize=(20,20))\nsns.set(style=\"ticks\", color_codes=True)\nfor axis,col in zip(ax.flat,data_cat):\n    sns.countplot(x=data[\"Churn\"],hue=data[col],ax=axis)","042fbe16":"fig,ax = plt.subplots(1, 3, figsize=(20,5))\nsns.boxplot(x=data[\"tenure\"], orient=\"h\", color=\"purple\",ax=ax[0])\nsns.boxplot(x=data[\"MonthlyCharges\"], orient=\"h\", color=\"olive\",ax=ax[1])\nsns.boxplot(x=data[\"TotalCharges\"] , orient=\"h\", color=\"green\",ax=ax[2])","cd9c55eb":"fig,ax = plt.subplots(1,3,figsize=(15,5))\n\nsns.distplot(data[\"tenure\"],bins=10,kde=False,color=\"purple\",ax=ax[0])\nsns.distplot(data[\"MonthlyCharges\"],bins=10,kde=False,color=\"olive\",ax=ax[1])\nsns.distplot(data[\"TotalCharges\"],bins=10,kde=False,color=\"green\",ax=ax[2])","aba7d6b5":"NumHistTenure = sns.FacetGrid(data,col=\"Churn\",height=6,aspect=1)\nNumHistTenure = NumHistTenure.map(plt.hist, \"tenure\",bins=20,color=\"purple\")","789b9624":"NumHistMC = sns.FacetGrid(data,col=\"Churn\",height=6,aspect=1)\nNumHistMC = NumHistMC.map(plt.hist, \"MonthlyCharges\",bins=20,color=\"olive\")","a40f1128":"NumHistTC = sns.FacetGrid(data,col=\"Churn\",height=6,aspect=1)\nNumHistTC = NumHistTC.map(plt.hist, \"TotalCharges\",bins=20,color=\"green\")","e9d8673f":"scaler = StandardScaler()\ndata_continuous = scaler.fit_transform(data[data_cont])","ccca6c20":"for cols in data_cat:\n    data.loc[:,cols] = LabelEncoder().fit_transform(data.loc[:,cols])\n\nonehotencoder = OneHotEncoder(sparse=False)\ndata_categorical = onehotencoder.fit_transform(data[data_cat])","a988bd81":"features = np.concatenate([data_continuous, data_categorical], axis=1)\n\ntarget = data.iloc[:,20:].values\ntarget = LabelEncoder().fit_transform(target)","162b2919":"X_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.2, random_state = 0)","4395b1a7":"classifier = Sequential()\nclassifier.add(Dense(units=6,kernel_initializer=\"uniform\",activation=\"relu\",input_shape=(46,)))\nclassifier.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True))\nclassifier.add(Dense(units=6,kernel_initializer=\"uniform\",activation=\"relu\"))\nclassifier.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True))\nclassifier.add(Dense(units=6,kernel_initializer=\"uniform\",activation=\"relu\"))\nclassifier.add(BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True))\nclassifier.add(Dropout(0.2))\nclassifier.add(Dense(units=1,kernel_initializer=\"uniform\",activation=\"sigmoid\"))\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","83f06054":"classifier.fit(X_train, y_train, batch_size = 100, nb_epoch = 100)","76b67e9d":"y_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)","c2efdabd":"print(classification_report(y_test,y_pred))","b471023a":"cm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm.T,square=True, annot=True, fmt='d', cbar=False,xticklabels=['No','Yes'],yticklabels=['No','Yes'] )\nplt.xlabel('true label')\nplt.ylabel('predicted label')","c5e2a49c":"####  Rechecking for any null values in the dataset","354a1618":"Gender,Partner,Dependents,PhoneService,MultipleLines,InternetService,OnlineSecurity,OnlineBackup,\nDeviceProtection,TechSupport,StreamingTV,StreamingMovies,Contract,PaperlessBilling,PaymentMethod ","4865e36d":"#### Training the classifier","e6d831b8":"#### Splitting data to test and train","36bdafdc":"### Building a sequential model","eb2e2514":"#### Dropping rows with any null value","b1649122":"#### Correlation between churn and numerical variables","ef01b1cf":"#### Splitting Continuous And Categorical Variables","0460bc32":"#### Instantiating an encoder and encoding the data.","17bab783":"#### Checking For Outliers In Numeric Variables","e948f8c0":"#### Genreating a confusion matrix to evaluate the results","d0e75c08":"Clearly there are no outliers in the data","91617049":"### Building a churn model using an ANN.","6026cebe":"#### Checking the datatype of all the features","7f8ee3a5":"#### Changing the datatype of the column from string to float","e2f4e75b":"#### Prediciting churn","df832eda":"#### Concatenate Processed Continuous And Categorical Columns Back Together","457043e3":"#### Viewing the data","fdd2a4c0":"#### Plotting Distribution Of The Data","37643e17":"#### Loading the data","941103d6":"#### To check the number of null values in the dataset","521f44fc":"#### Classification Report","26126289":"#### Instantiating a scalar and scaleing the data.","39a77b4d":"# Objective","d01d6d6a":"#### Vizualizing the Numeric variables","769a347b":"#### Count Plot Of All Categorical Variables With Churn","8737b51c":"#### From the summary table,it is clear that the following features are categorical:","87203e9a":"#### Summary of the data"}}