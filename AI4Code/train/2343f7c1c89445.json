{"cell_type":{"d0974524":"code","2a8b8de3":"code","799ce71b":"code","421d5f83":"markdown","77d19067":"markdown","1c9f0812":"markdown"},"source":{"d0974524":"import pandas as pd\nimport numpy as np\ndef funcy(a1,a2,a1m,a2m):\n    m=(sum(a1*a2)-len(a1)*a1m*a2m)\/(sum(a1**2)-len(a1)*(a1m**2))\n    c=a2m-(m*a1m)\n    return(m,c)\ndef errorid(a2,slop,inter):\n    ycap=(slop*a1)+inter\n    s=np.sqrt((sum((a2-ycap)**2))\/len(a2))\n    return(s,ycap)   \na1=np.array([4,9,10,14,4,7,12,22,1,17])\na2=np.array([31,58,65,73,37,44,60,91,21,84])\na1m=np.mean(a1)\na2m=np.mean(a2)\nprint(\"---------Eqaution for linear regression---------\")\nslop,inter=funcy(a1,a2,a1m,a2m)\nprint(f' y = {slop} x + {inter}')\nprint(\"---------Root of Mean Square Error---------\")\nl,ycap=errorid(a2,slop,inter) #I am using the metric RMSE(Root Mean Square Error) for understanding the model\nprint(l)","2a8b8de3":"import matplotlib.pyplot as plt\n%matplotlib inline","799ce71b":"plt.scatter(a1,a2,color='red')\nplt.plot(a1,ycap)","421d5f83":"Blue line is the best fit line for the linear regression model","77d19067":"> ***This notebook shows the model to solve linear regression using first principle also plotting of same model using matplotlib library, I will share next time how we can create model using  sklearn****\n>***Linear Regression shown below is used for bivariant type of data***\n> ***We use linear regression when corelation is not equal to zero ***\n","1c9f0812":"****Linear Regression - Using first principle****\n"}}