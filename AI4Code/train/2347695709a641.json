{"cell_type":{"f42a4b94":"code","3c19ea36":"code","5850f99c":"code","ffe78742":"code","f9c3787b":"code","2417c064":"code","7665260b":"markdown","285b354d":"markdown","4ae9ca96":"markdown","41b604b3":"markdown","730558d7":"markdown","1cfd9895":"markdown","12a35464":"markdown"},"source":{"f42a4b94":"##### This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pyarrow.parquet as pq\nimport matplotlib.pyplot as plt\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3c19ea36":"!pip install --user seasonal\nfrom seasonal import fit_seasons, adjust_seasons","5850f99c":"praq = pq.read_pandas('..\/input\/train.parquet', columns=[str(i) for i in range(1000)]).to_pandas()\nsignals = praq.T.values.astype(float)\nmetadata = pd.read_csv('..\/input\/metadata_train.csv', nrows=1000)\ntargets = metadata['target']","ffe78742":"pos_indices = []\nneg_indices = []\nfor i in range(len(targets)):\n    if targets[i] == 0:\n        neg_indices.append(i)\n    else:\n        pos_indices.append(i)\n\nindices = [index for index in range(signals.shape[1]) if index % 20 == 0]\nneg_signals = signals[neg_indices]\npos_signals = signals[pos_indices]","f9c3787b":"s = time.time()\nfor i in range(50):\n    signal = neg_signals[i]\n    short_signal = signal[indices]\n    seasons, trend = fit_seasons(short_signal)\n    e = time.time()\n    print(\"SIGNAL SAMPLE {}\".format(i+1))\n    print(\"Total time : {}\".format(str(e - s) + \" s\"))\n    \n    color = 'g'\n    plt.plot(short_signal, color)\n    plt.show()\n    print(\"Trend\")\n    plt.plot(trend, color)\n    plt.show()\n    print(\"Noise\")\n    plt.plot(short_signal - trend, color)\n    plt.show()","2417c064":"s = time.time()\nfor i in range(50):\n    signal = pos_signals[i]\n    short_signal = signal[indices]\n    seasons, trend = fit_seasons(short_signal)\n    e = time.time()\n    print(\"SIGNAL SAMPLE {}\".format(i+1))\n    print(\"Total time : {}\".format(str(e - s) + \" s\"))\n    \n    color = 'r'\n    plt.plot(short_signal, color)\n    plt.show()\n    print(\"Trend\")\n    plt.plot(trend, color)\n    plt.show()\n    print(\"Noise\")\n    plt.plot(short_signal - trend, color)\n    plt.show()","7665260b":"**Load a small part of the training data**","285b354d":"**Divide the data based on class**","4ae9ca96":"## One can clearly see the potential discharges in the noise graphs of the faulty cases. But, please feel free to share any other insights you can find from these plots.","41b604b3":"**Visualize the actual signals and noises for non-faulty cases**","730558d7":"**Install seasonal**","1cfd9895":"**Visualize the actual signals and noises for faulty cases**","12a35464":"## In this kernel, I will show a way to extract the actual underlying trend in the voltage signal using the [seasonal](https:\/\/github.com\/welch\/seasonal) package (which uses scipy periodograms). Then, the noise in the time series can be obtained by subtracting the trend from the noisy time series."}}