{"cell_type":{"61e74c8c":"code","d1bf41ad":"code","2aa0620f":"code","0b7a1a95":"code","afe66e35":"code","c5570653":"code","5001e916":"code","74bc926b":"code","a47eb9ca":"code","9158ecdd":"code","3540557d":"code","7ed8e544":"code","df9b2578":"code","6f914bc0":"code","b176a0eb":"code","14b9aabd":"code","f27c8ae1":"code","2fc8f964":"code","fde7fe92":"code","7232b5f8":"code","1c592cd6":"code","602ac936":"markdown"},"source":{"61e74c8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1bf41ad":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndat = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndat.dataframeName = 'german.csv'\nnRow, nCol = dat.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndat.head()","2aa0620f":"!pip install scorecardpy","0b7a1a95":"import scorecardpy as sc","afe66e35":"dt_s = sc.var_filter(dat, y=\"Creditability\")","c5570653":"dt_s.head()","5001e916":"X = dt_s.loc[:,dt_s.columns != 'Creditability']\ny = dt_s.loc[:,dt_s.columns == 'Creditability']","74bc926b":"train, test = sc.split_df(dt_s, 'Creditability').values()","a47eb9ca":"print(train.shape)\nprint(test.shape)","9158ecdd":"bins = sc.woebin(dt_s, y=\"Creditability\")","3540557d":"sc.woebin_plot(bins)","7ed8e544":"train_woe = sc.woebin_ply(train, bins)\ntest_woe = sc.woebin_ply(test, bins)","df9b2578":"y_train = train_woe.loc[:,'Creditability']\nX_train = train_woe.loc[:,train_woe.columns != 'Creditability']\ny_test = test_woe.loc[:,'Creditability']\nX_test = test_woe.loc[:,train_woe.columns != 'Creditability']","6f914bc0":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(penalty='l1', C=0.9, solver='saga', n_jobs=-1)\nlr.fit(X_train, y_train)\nprint(lr.coef_)\nprint(lr.intercept_)","b176a0eb":"train_pred = lr.predict_proba(X_train)[:,1]\ntest_pred = lr.predict_proba(X_test)[:,1]","14b9aabd":"train_perf = sc.perf_eva(y_train, train_pred, title = \"train\")\ntest_perf = sc.perf_eva(y_test, test_pred, title = \"test\")","f27c8ae1":"card = sc.scorecard(bins, lr, X_train.columns)\n# \u8bc4\u5206\ntrain_score = sc.scorecard_ply(train, card, only_total_score=False, print_step=0, replace_blank_na=True, var_kp = None)\ntest_score = sc.scorecard_ply(test, card, only_total_score=False, print_step=0, replace_blank_na=True, var_kp = None)\nscore = sc.scorecard_ply(dat, card, only_total_score=False, print_step=0, replace_blank_na=True, var_kp = None)","2fc8f964":"print('\u8bc4\u5206\u5361:',end='\\n')\ncard","fde7fe92":"# \u5c55\u793a\u603b\u4f53\u6570\u636e\u96c6\u8bc4\u5206\nscore","7232b5f8":"sc.perf_psi(\n  score = {'train':train_score, 'test':test_score},\n  label = {'train':y_train, 'test':y_test}\n)","1c592cd6":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here' )","602ac936":"#Scorecardpy  \n\nAuthor: Schichen Xie\n\nThis package is python version of R package scorecard. Its goal is to make the development of traditional credit risk scorecard model easier and efficient by providing functions for some common tasks.\n\ndata partition (`split_df`)\n\nvariable selection (iv, `var_filter`)\n\nweight of evidence (woe) binning (woebin, `woebin_plot`, `woebin_adj`, `woebin_ply`)\n\nscorecard scaling (scorecard, `scorecard_ply`)\n\nperformance evaluation (`perf_eva`, `perf_psi`)\n\nhttps:\/\/github.com\/ShichenXie\/scorecardpy\/blob\/master\/scorecardpy\/scorecard.py\n\nhttps:\/\/pypi.org\/project\/scorecardpy\/"}}