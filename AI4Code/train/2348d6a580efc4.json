{"cell_type":{"e1a52243":"code","9af1daa9":"code","6f2add3f":"code","936a4ce7":"code","1ede4124":"code","5dfc27b9":"code","59c47bc6":"code","f9c4c3ef":"code","826e5eba":"code","abeaa029":"code","3363e0c8":"code","82627736":"code","8f0af618":"code","67c96bad":"code","118a99e3":"code","af6650e7":"code","65404e90":"code","aea12c57":"code","14797f96":"code","96076542":"code","e5110c76":"code","4f76c2ea":"code","bc2fd4a3":"code","7c3bcc20":"code","3d6d3359":"code","82a740a5":"code","fb432bbe":"code","d015a1b9":"code","c76f05c4":"code","3be3cbf2":"code","1505aabc":"code","870bbb23":"code","37ad2935":"code","807e97de":"code","8af45077":"code","9a1d3392":"code","8fee1cd8":"code","807e4ad3":"code","5a04103d":"code","f36096b4":"code","53b93f70":"code","821b1fe5":"markdown","e65c10ae":"markdown","d8237e3c":"markdown","e4f14337":"markdown","3229acd3":"markdown","f24c6a37":"markdown","6f741e00":"markdown","9e20dd95":"markdown","9502421d":"markdown","1cda0ccd":"markdown","545c2151":"markdown","5d2bd8c2":"markdown","415d6fe6":"markdown","d91d9181":"markdown","d994f139":"markdown","6daca665":"markdown","1332e5f5":"markdown","ea770c77":"markdown","b140c661":"markdown","48acf5fd":"markdown","31d168d0":"markdown","46995180":"markdown","b90c12a8":"markdown","31dc163a":"markdown","38c7e0bf":"markdown","94406bd5":"markdown","b8170393":"markdown"},"source":{"e1a52243":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier, AdaBoostClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9af1daa9":"train = pd.read_csv(\"..\/input\/flight-delays-fall-2018\/flight_delays_train.csv.zip\", compression='zip')\ntest = pd.read_csv(\"..\/input\/flight-delays-fall-2018\/flight_delays_test.csv.zip\", compression='zip')\n","6f2add3f":"train.head()","936a4ce7":"test.head()","1ede4124":"train.info()\nprint('-'*45)\ntest.info()","5dfc27b9":"train.describe()","59c47bc6":"# list of columns with missing values apart from target within test set\ntrain.columns[train.isna().any()]","f9c4c3ef":"all_data = pd.concat([train, test], ignore_index=True)","826e5eba":"# change target name to make it easier\ntrain = train.rename(columns={'dep_delayed_15min':'delayed'})\nall_data = all_data.rename(columns={'dep_delayed_15min':'delayed'})","abeaa029":"# change target to numerical N-->0 & Y-->1\ntrain.loc[(train.delayed == 'N'), 'delayed'] = 0\ntrain.loc[(train.delayed == 'Y'), 'delayed'] = 1\nall_data.loc[(all_data.delayed == 'N'), 'delayed'] = 0\nall_data.loc[(all_data.delayed == 'Y'), 'delayed'] = 1","3363e0c8":"train.Month = train.Month.str.slice(start=2).astype(int)\nall_data.Month = all_data.Month.str.slice(start=2).astype(int)","82627736":"fig, ax = plt.subplots(1, 2, figsize=(18,5))\nsns.countplot('Month', data=train, ax=ax[0])\nax[0].set_title('Nb of flights by month')\nsns.countplot('Month', hue='delayed', data=train, ax=ax[1])\nax[1].set_title('Delayed\/Not delayed flights by month')\nplt.figure(figsize=(18,5))\nsns.barplot('Month', 'delayed', data=train)\nplt.show()","8f0af618":"train.DayofMonth = train.DayofMonth.str.slice(start=2).astype(int)\nall_data.DayofMonth = all_data.DayofMonth.str.slice(start=2).astype(int)","67c96bad":"fig, ax = plt.subplots(3, 1, figsize=(15,15))\nsns.countplot('DayofMonth', data=train, ax=ax[0])\nax[0].set_title('Nb of flights by day of month')\nsns.countplot('DayofMonth', hue='delayed', data=train, ax=ax[1])\nax[1].set_title('Delayed\/not Delayed flight by day of month')\nsns.barplot('DayofMonth', 'delayed', data=train, ax=ax[2])\nax[2].set_title('Rate of delayed flights by day of month')","118a99e3":"train.DayOfWeek = train.DayOfWeek.str.slice(start=2).astype(int)\nall_data.DayOfWeek = all_data.DayOfWeek.str.slice(start=2).astype(int)","af6650e7":"fig, ax = plt.subplots(1, 3, figsize=(15,5))\nsns.countplot('DayOfWeek', data=train, ax=ax[0])\nax[0].set_title('Nb of flights by day of week')\nsns.countplot('DayOfWeek', hue='delayed', data=train, ax=ax[1])\nax[1].set_title('Delayed or not flights by day of week')\nsns.barplot('DayOfWeek', 'delayed', data=train, ax=ax[2])\nax[2].set_title('Rate of delayed flights by day of week')\n","65404e90":"plt.hist(train.DepTime)\nplt.xlabel('Departure Time')","aea12c57":"# Nb of unique values\nlen(set(train.UniqueCarrier))","14797f96":"fig, ax = plt.subplots(3, 1, figsize=(15,15))\nsns.countplot('UniqueCarrier', data=train, ax=ax[0])\nax[0].set_title('Nb of flights per unique carrier')\nsns.countplot('UniqueCarrier', hue='delayed', data=train, ax=ax[1])\nax[1].set_title('Nb of delayed\/not flights by unique carrier')\nsns.barplot('UniqueCarrier', 'delayed', data=train, ax=ax[2])\nax[2].set_title('Rate of delayed flights by unique carrier')","96076542":"# Nb of unique values\nprint(len(set(train.Origin)))\nprint(len(set(train.Dest)))","e5110c76":"plt.hist(train.Distance)\nplt.xlabel('Distance')","4f76c2ea":"all_data['Route'] = all_data['Origin'] + all_data['Dest']","bc2fd4a3":"all_data['UniqueCarrier_Origin'] = all_data['UniqueCarrier'] + \"_\" + all_data['Origin']\nall_data['UniqueCarrier_Dest'] = all_data['UniqueCarrier'] + \"_\" + all_data['Dest']","7c3bcc20":"all_data['is_weekend'] = (all_data['DayOfWeek'] == 6) | (all_data['DayOfWeek'] == 7)","3d6d3359":"# Hour and minute\nall_data['hour'] = all_data['DepTime'] \/\/ 100\nall_data.loc[all_data['hour'] == 24, 'hour'] = 0\nall_data.loc[all_data['hour'] == 25, 'hour'] = 1\nall_data['minute'] = all_data['DepTime'] % 100","82a740a5":"# give more importance to hour variable\nall_data['hour_sq'] = all_data['hour'] ** 2\nall_data['hour_sq2'] = all_data['hour'] ** 4","fb432bbe":"all_data['summer'] = (all_data['Month'].isin([6, 7, 8]))\nall_data['autumn'] = (all_data['Month'].isin([9, 10, 11]))\nall_data['winter'] = (all_data['Month'].isin([12, 1, 2]))\nall_data['spring'] = (all_data['Month'].isin([3, 4, 5]))","d015a1b9":"all_data['DayTime'] = 0\nall_data.loc[all_data.DepTime <= 600 , 'DepTime_bin'] = 'Night'\nall_data.loc[(all_data.DepTime > 600) & (all_data.DepTime <= 1200), 'DepTime_bin'] = 'Morning'\nall_data.loc[(all_data.DepTime > 1200) & (all_data.DepTime <= 1800), 'DepTime_bin'] = 'Afternoon'\nall_data.loc[(all_data.DepTime > 1800) & (all_data.DepTime <= 2600), 'DepTime_bin'] = 'Evening'\n","c76f05c4":"all_data['DepTime_bin'] = 0\nall_data.loc[all_data.DepTime <= 600 , 'DepTime_bin'] = 'vem'\nall_data.loc[(all_data.DepTime > 600) & (all_data.DepTime <= 900), 'DepTime_bin'] = 'm'\nall_data.loc[(all_data.DepTime > 900) & (all_data.DepTime <= 1200), 'DepTime_bin'] = 'mm'\nall_data.loc[(all_data.DepTime > 1200) & (all_data.DepTime <= 1500), 'DepTime_bin'] = 'maf'\nall_data.loc[(all_data.DepTime > 1500) & (all_data.DepTime <= 1800), 'DepTime_bin'] = 'af'\nall_data.loc[(all_data.DepTime > 1800) & (all_data.DepTime <= 2100), 'DepTime_bin'] = 'n'\nall_data.loc[(all_data.DepTime > 2100) & (all_data.DepTime <= 2400), 'DepTime_bin'] = 'nn'\nall_data.loc[all_data.DepTime > 2400, 'DepTime_bin'] = 'lm'\nall_data = all_data.drop(['DepTime'], axis=1)","3be3cbf2":"all_data['Dist_bin'] = 0\nall_data.loc[all_data.Distance <= 500 , 'Dist_bin'] = 'vshort'\nall_data.loc[(all_data.Distance > 500) & (all_data.Distance <= 1000), 'Dist_bin'] = 'short'\nall_data.loc[(all_data.Distance > 1000) & (all_data.Distance <= 1500), 'Dist_bin'] = 'mid'\nall_data.loc[(all_data.Distance > 1500) & (all_data.Distance <= 2000), 'Dist_bin'] = 'midlong'\nall_data.loc[(all_data.Distance > 2000) & (all_data.Distance <= 2500), 'Dist_bin'] = 'long'\nall_data.loc[all_data.Distance > 2500, 'Dist_bin'] = 'vlong'\nall_data = all_data.drop(['Distance'], axis=1)","1505aabc":"new_train = all_data.iloc[:100000]\nnew_test = all_data.iloc[100000:]","870bbb23":"feature_columns = list(new_train.columns)\nfeature_columns.remove('delayed')","37ad2935":"X = new_train[feature_columns]\ny = new_train.delayed\n\n#split data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size= 0.2, random_state=1)","807e97de":"all_data.head()","8af45077":"feature_columns","9a1d3392":"model_ctb = CatBoostClassifier(iterations=3000, loss_function='Logloss',\n                               l2_leaf_reg=0.8, od_type='Iter',\n                               random_seed=17, silent=True)\n#model_ctb = GridSearchCV(model_ctb, {'learning_rate':[0.5, 0.1], 'n_estimators':[500, 1000]})\nmodel_ctb.fit(X_train, y_train.astype(int), cat_features=[2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20])\npredictions = model_ctb.predict_proba(X_val)[:, 1]\naccuracy = roc_auc_score(y_val.astype(int), predictions)\nprint('Accuracy Catboost: ', accuracy)","8fee1cd8":"model_ctb.fit(X, y.astype(int), cat_features=[2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20])","807e4ad3":"sample = pd.read_csv(\"..\/input\/flight-delays-fall-2018\/sample_submission.csv.zip\", compression='zip')\nsample.head()","5a04103d":"predictions = model_ctb.predict_proba(new_test[feature_columns])[:, 1]","f36096b4":"submission = pd.DataFrame({'id':range(100000),'dep_delayed_15min':predictions})\nsubmission.head(900)","53b93f70":"filename = 'flight_delay.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","821b1fe5":"* First let's format the variable","e65c10ae":"* Again it's hard to say if there is much of a difference between the days of the month. However, we can say that in the last days of the month the delay rate is higher","d8237e3c":"## 1- Month","e4f14337":"## Catboost","3229acd3":"# Results","f24c6a37":"#### Departure Time","6f741e00":"## 4- Departure Time","9e20dd95":"## 5- Unique Carrier","9502421d":"* Again, let's first format the variable","1cda0ccd":"## 7- Distance","545c2151":"* We can see that the number of flights and delays are pretty much the same for all months. However there is a slightly higher rate of delays in June, July and December maybe due to vacation time\n* We will also try to reformat this variable into 1-12 instead of c1-c12 and int type","5d2bd8c2":"* Let's first change the format of the variable to an int","415d6fe6":"* We can see that most of the flights are short in distance and less than 1000 miles\n* Would it be a good idea to normalize and\/or scale this variable or is the difference more meaningful this way?\n* Maybe bin this variable?","d91d9181":"# Exploratory Data Analysis & Data Cleaning","d994f139":"## 1- New features","6daca665":"* We will come back to this variable once we bin it because of the large spectrum of values","1332e5f5":"* Here we can see that Thursday and Friday have the highest rates of delayed flights where as Tuesday, Wednesday and Saturday have the lowest","ea770c77":"#### Season","b140c661":"#### Distance","48acf5fd":"* We can see that the Unique carrier variable can have a good role in the delays","31d168d0":"# Feature Engineering","46995180":"## 2- Day of Month","b90c12a8":"## 6- Origin\/Destination","31dc163a":"* Too many categorical values to plot. Maybe it would be a good idea to create a variable with routes Origin - Destination","38c7e0bf":"# Predictive Modeling","94406bd5":"## 2- Binning","b8170393":"## 3- Day of Week"}}