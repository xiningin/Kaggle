{"cell_type":{"b6fafcaf":"code","38bf0c28":"code","d7b7d9ba":"code","a3a18d40":"markdown","f2797dad":"markdown"},"source":{"b6fafcaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport itertools\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nprint(\"Imported depending packages\")","38bf0c28":"# \u521d\u59cb\u5316\u4e0a\u9762\u7684\u4f8b\u5b50\n\nu = np.array([\"x1\", \"x2\", \"x3\", \"x4\", \"x5\", \"x6\", \"x7\"])\na = np.array([\"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\"])\nd = np.array([\"d\"])\ni = np.array([[1, 0, 0, 0, 0, 1, 0, 0, 1],\n              [1, 0, 0, 0, 0, 1, 1, 0, 1],\n              [1, 1, 0, 0, 0, 1, 1, 0, 1],\n              [0, 1, 0, 0, 1, 1, 1, 1, 3],\n              [1, 0, 1, 0, 1, 0, 0, 0, 2],\n              [1, 1, 1, 0, 1, 0, 0, 0, 2],\n              [0, 1, 1, 1, 0, 0, 0, 0, 3],\n             ])\nprint(u,a,d,i)","d7b7d9ba":"# \u6784\u9020\u8fa8\u8bc6\u77e9\u9635\ndiscernMat = []\nfor xa in range(0, len(u)):\n    dRow = []\n    for xb in range(0, len(u)):\n        dBlock = []\n        for attr in range(0, len(a)):\n            if i[xa][attr] == 1 and i[xb][attr] != 1 and i[xb][8] != i[xa][8]:\n                dBlock.append(a[attr])\n        dRow.append(dBlock)\n    discernMat.append(dRow)\n\nprint(discernMat)\ndMat = discernMat\n\ndef contain(array1, array2):\n    for x in array2:\n        if x not in array1:\n            return False\n    return True\n\ndList = []\nfor y in dMat:\n    for x in y:\n        if x not in dList:\n            dList.append(x)\ndList.remove([])\nprint()\nprint(dList)\n\nremoveList = []\nfor aList in dList:\n    for aListCompare in dList:\n        if aListCompare != aList:\n            if contain(aListCompare,aList):\n                if aListCompare not in removeList:\n                    removeList.append(aListCompare)\nfor q in removeList:\n    dList.remove(q)\nprint(dList)\nprint(\"\u7c92\u7ea6\u7b80\uff1a\")\nfor item in itertools.product(*dList):\n    print(item)","a3a18d40":"## \u7c92\u534f\u8c03\u51b3\u7b56\u5f62\u5f0f\u80cc\u666f\u7684\u5c5e\u6027\u7ea6\u7b80\n\n> \u300c\u7c92\u534f\u8c03\u51b3\u7b56\u5f62\u5f0f\u80cc\u666f\u7684\u5c5e\u6027\u7ea6\u7b80\u4e0e\u89c4\u5219\u878d\u5408\u300d\u7b97\u6cd5 1\n\n- Input\uff1a*F=(U, A, I, D, G)*\n- Output\uff1a*B*\n\n### \u7b97\u6cd5\n\n1. \u5df2\u77e5 *F* \u4e3a\u7c92\u534f\u8c03\u5f62\u5f0f\u80cc\u666f\n2. \u6784\u9020 *F* \u7684\u8fa8\u8bc6\u77e9\u9635\n3. \u63d0\u53d6\u8fa8\u8bc6\u77e9\u9635\u4e2d\u7684\u6240\u6709\u96c6\u5408\n4. \u53bb\u91cd\u5e76\u5220\u9664\u7a7a\u96c6\n5. \u5220\u9664\u5b58\u5728\u5305\u542b\u5173\u7cfb\u7684\u96c6\u5408\n6. \u5bf9\u5269\u4f59\u96c6\u5408\u6c42\u7b1b\u5361\u5c14\u79ef\n7. \u8f93\u51fa *B* \u5373\u4e3a\u8be5\u5f62\u5f0f\u80cc\u666f\u7684\u7c92\u7ea6\u7b80\n\n## \u4f8b\u5b50\n\n\u5bf9\u4e8e *F=(U, A, I, D, G)*\n\n| **U** | a1 | a2 | a3 | a4 | a5 | a6 | a7 | a8 | d |\n|---|----|----|----|----|----|----|----|----|---|\n| **x1** | 1 | \u2212 | \u2212 | \u2212 | \u2212 | 1 | \u2212 | \u2212 | 1 |\n| **x2** | 1 | \u2212 | \u2212 | \u2212 | \u2212 | 1 | 1 | - | 1 |\n| **x3** | 1 | 1 | \u2212 | \u2212 | \u2212 | 1 | 1 | - | 1 |\n| **x4** | - | 1 | \u2212 | \u2212 | 1 | 1 | 1 | 1 | 3 |\n| **x5** | 1 | \u2212 | 1 | \u2212 | 1 | - | - | - | 2 |\n| **x6** | 1 | 1 | 1 | \u2212 | 1 | - | - | - | 2 |\n| **x7** | - | 1 | 1 | 1 | - | - | - | - | 3 |\n\n*U = {x1, x2, x3, x4, x5, x6, x7}*\n\n*A = {a1,a2,a3,a4,a5,a6,a7,a8}*","f2797dad":"## \u51b3\u7b56\u4fe1\u606f\u7cfb\u7edf\n\n- \u6761\u4ef6\u5c5e\u6027\n- \u51b3\u7b56\u5c5e\u6027"}}