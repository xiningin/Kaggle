{"cell_type":{"9d4a7b86":"code","766086ef":"code","f67e08b4":"code","9129b53d":"code","f1538982":"code","12e518f0":"code","b56b4972":"code","0d57afb2":"code","77b52a59":"code","aaa1ae70":"code","585a2724":"code","f1bbfbe9":"code","465acd10":"code","ca25be6b":"code","618ee4d0":"code","b4c5d513":"code","fe066d8e":"code","aa3c3a00":"code","91362961":"code","0ee7199f":"code","e58538fe":"code","dc186496":"code","72a2fb72":"code","8d2149fd":"code","ebd260c8":"code","19b5ed7f":"code","64a3fdf9":"code","12145191":"code","0635a37a":"code","2a89157d":"code","88f38cec":"code","96c4bc27":"code","f66031c7":"code","41ae3088":"code","b1bd08b3":"code","cda38b28":"code","860b3ccb":"code","93fda257":"code","c2f3057a":"code","fb93bdb2":"code","8ae793d5":"code","d9dbabd7":"code","fa108d0b":"code","f8352cf1":"code","f51649fd":"code","ffd3e18a":"code","77b0f0cb":"code","88d648cf":"code","29851c1e":"code","774e1e7a":"code","3111c3e7":"code","b9d5c003":"code","33d96fdf":"code","e1db1b56":"code","b5a6accf":"code","95636e88":"markdown","e93fc57b":"markdown","88e29ef4":"markdown","6e323682":"markdown","0136e936":"markdown","08b2307a":"markdown","c621186e":"markdown","3d6daed7":"markdown","db332ad7":"markdown","3b453c41":"markdown","9c8ca481":"markdown","f32f2758":"markdown","882ea777":"markdown","ae7ea115":"markdown","bc29efea":"markdown","fda65a10":"markdown","7aad5ebc":"markdown","ad20f958":"markdown","245a3cca":"markdown","815bbb76":"markdown","bf910ff8":"markdown","f074243d":"markdown","9691c213":"markdown","9c42e2d7":"markdown","09931411":"markdown","0b9c4e16":"markdown","1b170a06":"markdown","6dd8527d":"markdown","eea20e16":"markdown","fb4ae9d0":"markdown","d6ca2264":"markdown","ada89436":"markdown","c2900df7":"markdown"},"source":{"9d4a7b86":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nwarnings.simplefilter(\"ignore\")","766086ef":"covid = pd.read_csv('..\/input\/corona-symptoms-datasets\/corona_tested_individuals_ver_006.english.csv', low_memory=False)","f67e08b4":"covid.head()","9129b53d":"covid.describe()","f1538982":"covid.shape","12e518f0":"covid.isnull().sum()","b56b4972":"covid.duplicated().sum()","0d57afb2":"# check the column datatypes of the dataset\n# for model development, int datatype is best suited. \n# We will effect this once the data wrangling is complete just before model development.\n\ncovid.dtypes","77b52a59":"# check gender column\n\ncovid['gender'].value_counts()","aaa1ae70":"# drop data with gender as none.\n\ncovid.drop(covid.index[covid['gender'] == 'None'], inplace = True)\ncovid['gender'].value_counts()","585a2724":"# figure to display gender column\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(covid[\"gender\"]);","f1bbfbe9":"# pie chart to display gender column\n\nlabels = ['Female', 'Male']\nsize = covid['gender'].value_counts()\ncolors = ['lightgreen', 'orange']\nexplode = [0, 0.1]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Gender', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","465acd10":"# check corona_result column\n\ncovid['corona_result'].value_counts()","ca25be6b":"# drop data with corona_result as other.\n\ncovid.drop(covid.index[covid['corona_result'] == 'other'], inplace = True)\ncovid['corona_result'].value_counts()","618ee4d0":"# figures to display corona_result column\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(covid[\"corona_result\"]);","b4c5d513":"# pie chart for corona_result column\n\nlabels = ['Negative', 'Positive']\nsize = covid['corona_result'].value_counts()\ncolors = ['lightgreen', 'orange']\nexplode = [0, 0.3]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('Corona Result', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","fe066d8e":"#check cough column\n\ncovid['cough'].value_counts()","aa3c3a00":"#  Change none to 0\n\ncovid['cough'] = covid['cough'].map({'0': 0, '1': 1, 'None': 0})\n\n# display changes\ncovid['cough'].value_counts()","91362961":"#check fever column\n\ncovid['fever'].value_counts()","0ee7199f":"#  Change none to 0\n\ncovid['fever'] = covid['fever'].map({'0': 0, '1': 1, 'None': 0})\n\n# display changes\ncovid['fever'].value_counts()","e58538fe":"# check sore_throat column\n\ncovid['sore_throat'].value_counts()","dc186496":"# check shortness_of_breath column\n\ncovid['shortness_of_breath'].value_counts()","72a2fb72":"# check headache column\n\ncovid['head_ache'].value_counts()","8d2149fd":"# check age_60_and_above column\n\ncovid['age_60_and_above'].value_counts()","ebd260c8":"# figure to display age_60_and_above column\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(covid[\"age_60_and_above\"]);","19b5ed7f":"# pie chart for age indication\n\nlabels = ['None', 'No', 'Yes']\nsize = covid['age_60_and_above'].value_counts()\ncolors = ['lightgreen', 'orange', 'lightblue']\nexplode = [0, 0, 0.3]\n\nplt.rcParams['figure.figsize'] = (9, 9)\nplt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')\nplt.title('age_60_and_above', fontsize = 20)\nplt.axis('off')\nplt.legend()\nplt.show()","64a3fdf9":"# check test indication column\ncovid['test_indication'].value_counts()","12145191":"#  Change other and abroad to 0, Contact with confirmed to 1\ncovid['test_indication'] = covid['test_indication'].map({'Other': 0, 'Abroad': 0, 'Contact with confirmed': 1})","0635a37a":"covid['gender'] = covid['gender'].map({'male': 1, 'female': 0})\n\ncovid['gender'].value_counts()","2a89157d":"#make corona_result column numerical\n# positive : 1 , negative : 0\ncovid['corona_result'] = covid['corona_result'].map({'positive': 1, 'negative': 0})\n\ncovid['corona_result'].value_counts()","88f38cec":"# check dataset datatypes\n\ncovid.dtypes","96c4bc27":"# change columns that will be used for training the model to int datatype\n# these are: \n\ncovid = covid.astype({\"cough\": int, \"fever\": int, \"sore_throat\": int, \"shortness_of_breath\": int, \"head_ache\": int, \"test_indication\": int})","f66031c7":"# check dataset datatypes\n\ncovid.dtypes","41ae3088":"covid.head()","b1bd08b3":"# x data\nx = covid.drop(labels = [\"test_date\", \"corona_result\", \"age_60_and_above\"], axis=1)\nx.head()","cda38b28":"# y data\ny = covid[\"corona_result\"]\ny.head()","860b3ccb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=42)","93fda257":"# here we can see the number of columns in the input data\n\nlen(X_train), len(X_test)","c2f3057a":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","fb93bdb2":"# Here, we fit the model on the input data and test data for training purposes\n\nrf.fit(X_train, y_train)","8ae793d5":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nRandomForestClassifierScore = rf.score(X_test,y_test)\nprint(\"Accuracy obtained by RandomForestClassifier model:\", RandomForestClassifierScore*100)","d9dbabd7":"from sklearn.linear_model import LogisticRegression\nlg = LogisticRegression()","fa108d0b":"# Here, we fit the model on the input data and test data for training purposes\n\nlg.fit(X_train, y_train)","f8352cf1":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nLogisticRegressionScore = lg.score(X_test,y_test)\nprint(\"Accuracy obtained by Logistic Regression model:\",LogisticRegressionScore*100)","f51649fd":"import catboost\n\nfrom catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations=10)\n\n# Here, we fit the model on the input data and test data for training purposes\ncat.fit(X_train, y_train);","ffd3e18a":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nCatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","77b0f0cb":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\n\n# Here, we fit the model on the input data and test data for training purposes\ntree.fit(X_train,y_train)","88d648cf":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nDecisionTreeClassifierScore = tree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","29851c1e":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\n\n# Here, we fit the model on the input data and test data for training purposes\ngb.fit(X_train, y_train)","774e1e7a":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nGradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","3111c3e7":"from sklearn.svm import SVC\nsv = SVC()\n\n# Here, we fit the model on the input data and test data for training purposes\nsv.fit(X_train, y_train)","b9d5c003":"# Then, we use the 20% of sample data for testing to measure the accuracy of the model\n\nSVCScore = sv.score(X_test,y_test)\nprint(\"Accuracy obtained by SVC model:\",SVCScore*100)","33d96fdf":"x = [\"LogisticRegression\", \"Decision Tree Classifier\", \"RandomForestClassifier\", \"CatBoost Classifier\", \"Gradient Boosting Classifier\", \"SVC\"]\ny = [LogisticRegressionScore, DecisionTreeClassifierScore, RandomForestClassifierScore, CatBoostClassifierScore, GradientBoostingClassifierScore, SVCScore]\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"plasma\");\nplt.xlabel(\"Models\")\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\");","e1db1b56":"model = lg\ncough = int(input('Cough (Yes:1 \/ No:0): '))\nfever = int(input('Fever (Yes:1 \/ No:0): '))\nsore_throat = int(input('Sore throat (Yes:1 \/ No:0): '))\nshortness_of_breath = int(input('Shortness of breath (Yes:1 \/ No:0): '))\nheadache = int(input('Headache (Yes:1 \/ No:0): '))\ngender = int(input('Gender (male: 1\/ female:0): '))\ncontact = int(input('Contact with confirmed (Yes:1 \/ No:0): '))\n\npredicted = model.predict([[cough, fever, sore_throat, shortness_of_breath, headache, gender, contact]])\n\nif predicted == 0:\n    output = 'Negative'\nelse:\n    output = 'Positive'\n\nprint('')\nprint(f'The COVID status of the patient is {output}')","b5a6accf":"model = sv\ncough = int(input('Cough (Yes:1 \/ No:0): '))\nfever = int(input('Fever (Yes:1 \/ No:0): '))\nsore_throat = int(input('Sore throat (Yes:1 \/ No:0): '))\nshortness_of_breath = int(input('Shortness of breath (Yes:1 \/ No:0): '))\nheadache = int(input('Headache (Yes:1 \/ No:0): '))\ngender = int(input('Gender (male: 1\/ female:0): '))\ncontact = int(input('Contact with confirmed (Yes:1 \/ No:0): '))\n\npredicted = model.predict([[cough, fever, sore_throat, shortness_of_breath, headache, gender, contact]])\n\nif predicted == 0:\n    output = 'Negative'\nelse:\n    output = 'Positive'\n\nprint('')\nprint(f'The COVID status of the patient is {output}')","95636e88":"In this case, we shall use the Logistic Regression model.\n\nWe shall enable the user to input the symptoms and save them in an array, then get to see the predicted result.","e93fc57b":"**Next we explore the columns and see if they hold useful information for the model to process.**\n\nIf not, the 'useless' data will be dropped","88e29ef4":"# CatBoost Classifier","6e323682":"# Training the models","0136e936":"View a sample of the dataset to get an idea","08b2307a":"# Processing data for model development","c621186e":"Find out the number of records and columns in the dataset","3d6daed7":"# Splitting the data into training and test datasets","db332ad7":"# Random Forest Classifier","3b453c41":"# Decision Tree Classifier","9c8ca481":"As we can  see, some records are filled in as 'None'. \n\nLet us assume that this meant that the patients had no cough symptoms, thus change the attribute from None to 0.","f32f2758":"# Gradient Boosting Classifier","882ea777":"# Comparing the performance of the models","ae7ea115":"Here, we are trying to predict whether the patient has a corona or not using the given data.\n\nHence, the corona_result will be the y label and rest of the data (excluding date, test indication and age) will be the X or the input data.","bc29efea":"With the symptoms provided, the patient above has tested Positive for COVID.","fda65a10":"Get a basic description of the dataset's columns to understand the information it holds.","7aad5ebc":"With the symptoms provided, this patient has tested Negative for COVID.","ad20f958":"# Prediction application that accepts symptoms as input, and ouputs the predicted covid result.","245a3cca":"# Splitting the data into X train, X test and y train, y test\n\nThe test_size=0.2 implies that 80% of the sample will be used to train the model, and 20% will be used to test the model's accuracy.\n\nThe random_state is set so that the results are reproducible, that is every time we run the code, the same instances will be included in the training and testing sets respectively.","815bbb76":"We are going to use the covid dataset to go through the machine learning techniques in preparing the data for modelling.\n\nAfter model creation, evaluation and selection, we will use the best model to predict whether or not a patient has COVID based on his\/her symptoms.","bf910ff8":"In the fever column, we see the same case as in the cough column. Therefore, we shall follow the same steps as before.","f074243d":"Read the file containing the data and call it 'covid'","9691c213":"As we could already tell, all the models have the same accuracy of **~96%** in predicting the COVID status of the patient\nbased on their symptoms.\n\nAs all models perform the same way, any of them is eligible for use in creating out prediction app.","9c42e2d7":"# Logistic Regression","09931411":"# Example 1","0b9c4e16":"Check for any duplicated rows.","1b170a06":"As we can see above, a majority of the records appear as duplicates.\n\nBut we have to keep in mind that these records all represent individual patients.\n\nTherefore, in this case, we shall not drop any records.","6dd8527d":"# Exploratory data analysis","eea20e16":"# SVC","fb4ae9d0":"# Example 2","d6ca2264":"Check if there are any null values.","ada89436":"Make gender column numerical\n\nmale : 1 , female : 0","c2900df7":"# COVID 19 Analysis and Prediction based on symptoms"}}