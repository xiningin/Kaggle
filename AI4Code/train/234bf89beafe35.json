{"cell_type":{"efd76521":"code","a5c6d714":"code","d989acb7":"code","00bd540b":"code","c9c29b0d":"code","1b3e5e1b":"code","9e5f1c76":"code","df0179fa":"code","5f0aded1":"code","51411c10":"code","253786ca":"code","0cfc3ecd":"code","c053acd4":"code","3cdd6abf":"code","6997c875":"code","d44da3b0":"code","fc98ce6d":"code","ade4c01b":"code","fec48052":"code","57bc0e4f":"code","099df8d1":"code","7a9358f3":"code","58d301d5":"code","f8a1431f":"code","3dda14dc":"code","f88ada37":"code","cfde7a70":"code","e1b96e75":"code","a8062049":"code","ff489a9b":"code","008eff0b":"code","075dbcf2":"code","1820caaa":"code","424f915f":"markdown","722ff1cb":"markdown","5ffd9e36":"markdown","a47e01ee":"markdown","ab02c912":"markdown","187af32a":"markdown"},"source":{"efd76521":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a5c6d714":"# Set your own project id here\nPROJECT_ID = 'geotabintersection'\n\nfrom google.cloud import bigquery\nclient = bigquery.Client(project=PROJECT_ID, location=\"US\")\ndataset = client.create_dataset('bqml_geotab', exists_ok=True)\n\nfrom google.cloud.bigquery import magics\nfrom kaggle.gcp import KaggleKernelCredentials\nmagics.context.credentials = KaggleKernelCredentials()\nmagics.context.project = PROJECT_ID","d989acb7":"from google.cloud.bigquery.magics import _run_query \nimport json\n%load_ext google.cloud.bigquery","00bd540b":"with open('..\/input\/bigquery-geotab-intersection-congestion\/submission_metric_map.json', 'rt') as myfile:\n     sub_lab = json.load(myfile)\nlabels = {val:key for key, val in sub_lab.items()}","c9c29b0d":"# create a reference to our table\ntr_table = client.get_table(\"kaggle-competition-datasets.geotab_intersection_congestion.train\")\n\n# look at five rows from our dataset\nclient.list_rows(tr_table, max_results=5).to_dataframe()","1b3e5e1b":"# create a reference to our table\nte_table = client.get_table(\"kaggle-competition-datasets.geotab_intersection_congestion.test\")\n\n# look at five rows from our dataset\nclient.list_rows(te_table, max_results=5).to_dataframe()","9e5f1c76":"for field in tr_table.schema:\n    print(field.name, field.field_type)","df0179fa":"%%bigquery\nSELECT\n    COUNT(*) AS totalrowsTrain\nFROM `kaggle-competition-datasets.geotab_intersection_congestion.train`","5f0aded1":"%%bigquery\nSELECT\n    *\nFROM `kaggle-competition-datasets.geotab_intersection_congestion.train`\nWHERE RowId = 0","51411c10":"# create a reference to our table\ntest = client.get_table(\"kaggle-competition-datasets.geotab_intersection_congestion.test\")\n\n# look at five rows from our dataset\nclient.list_rows(test, max_results=5).to_dataframe()","253786ca":"%%bigquery\nSELECT COUNT(*) AS totalrowsTest\nFROM  `kaggle-competition-datasets.geotab_intersection_congestion.test`","0cfc3ecd":"%%bigquery\nSELECT\n    *\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.test`\nWHERE RowId = 0","c053acd4":"%%bigquery Avg_time_df\nSELECT\n    AVG(TotalTimeStopped_p20) As Avg_t_p20,\n    AVG(TotalTimeStopped_p40) As Avg_t_p40,\n    AVG(TotalTimeStopped_p50) As Avg_t_p50,\n    AVG(TotalTimeStopped_p60) As Avg_t_p60,\n    AVG(TotalTimeStopped_p80) As Avg_t_p80,\n    City\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train`\nGroup By City","3cdd6abf":"%matplotlib inline\nimport matplotlib.pyplot as plt\nAvg_time_df.plot(kind = 'bar' , x ='City' , y = ['Avg_t_p20','Avg_t_p40','Avg_t_p50','Avg_t_p60','Avg_t_p80'],figsize =(12,6))","6997c875":"%%bigquery sttudf\nSELECT\n    CASE WHEN (EntryHeading = ExitHeading) THEN 'S' ELSE 'T' END AS straightOrTurn,\n    AVG(TotalTimeStopped_p20) As Avg_t_p20,\n    AVG(TotalTimeStopped_p40) As Avg_t_p40,\n    AVG(TotalTimeStopped_p50) As Avg_t_p50,\n    AVG(TotalTimeStopped_p60) As Avg_t_p60,\n    AVG(TotalTimeStopped_p80) As Avg_t_p80,\n    City\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train`\nGroup By straightOrTurn,City","d44da3b0":"%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,5))\nsttudf.plot(kind='bar', stacked =True, figsize =(15,6))\n#sttudf.plot(kind = 'barh' , x ='straightOrTurn', y = ['Avg_t_p20','Avg_t_p40','Avg_t_p50','Avg_t_p60','Avg_t_p80'])","fc98ce6d":"%%bigquery\nCREATE OR REPLACE PROCEDURE bqml_geotab.GetEmpl(r_id INT64, OUT inter_id INT64)\nBEGIN\n  DECLARE cr_rows_id INT64 DEFAULT r_id;\n    SET inter_id = (\n      SELECT IntersectionId FROM `kaggle-competition-datasets.geotab_intersection_congestion.train`\n      WHERE RowId = r_id\n    );\nEND;","ade4c01b":"%%bigquery\nDECLARE r_id INT64 DEFAULT 2079854;\nDECLARE inter_id INT64;\n-- Call the stored procedure to get the hierarchy for this employee ID.\nCALL bqml_geotab.GetEmpl(r_id, inter_id);\n  -- Show the hierarchy for the employee.\nSELECT inter_id;","fec48052":"def make_query(query_text, job_config=None, **kwargs):\n    query = _run_query(\n        client, query_text.format(**kwargs),\n        job_config=job_config)\n    return query.to_dataframe()","57bc0e4f":"select_q = \"\"\"\n        CAST(IntersectionId AS string) AS IntersectionId,\n        ST_GEOHASH(ST_GEOGPOINT(Longitude, Latitude), 10) AS geohash,\n        CONCAT(EntryHeading,ExitHeading) AS enexit,\n        CASE WHEN (EntryHeading = ExitHeading) THEN 'S' \n        WHEN (EntryHeading = 'N' AND (ExitHeading = 'E' OR ExitHeading = 'NE')) THEN 'R'\n        WHEN (EntryHeading = 'N' AND (ExitHeading = 'W' OR ExitHeading = 'NW')) THEN 'L'\n        WHEN (EntryHeading = 'S' AND (ExitHeading = 'SW' OR ExitHeading = 'S')) THEN 'R'\n        WHEN (EntryHeading = 'S' AND (ExitHeading = 'SE' OR ExitHeading = 'E')) THEN 'L'\n        WHEN (EntryHeading = 'E' AND (ExitHeading = 'SE' OR ExitHeading = 'S')) THEN 'R'\n        WHEN (EntryHeading = 'E' AND (ExitHeading = 'NE' OR ExitHeading = 'N')) THEN 'L'\n        WHEN (EntryHeading = 'W' AND (ExitHeading = 'NW' OR ExitHeading = 'N')) THEN 'R'\n        WHEN (EntryHeading = 'W' AND (ExitHeading = 'SW' OR ExitHeading = 'S')) THEN 'L'\n        WHEN (EntryHeading = 'NE' AND (ExitHeading = 'E' OR ExitHeading = 'SE')) THEN 'R'\n        WHEN (EntryHeading = 'NE' AND (ExitHeading = 'N' OR ExitHeading = 'NW')) THEN 'L'\n        WHEN (EntryHeading = 'SE' AND (ExitHeading = 'S' OR ExitHeading = 'SW')) THEN 'R'\n        WHEN (EntryHeading = 'SE' AND (ExitHeading = 'E' OR ExitHeading = 'NE')) THEN 'L'\n        WHEN (EntryHeading = 'SW' AND (ExitHeading = 'W' OR ExitHeading = 'NW')) THEN 'R'\n        WHEN (EntryHeading = 'SW' AND (ExitHeading = 'S' OR ExitHeading = 'SE')) THEN 'L'\n        WHEN (EntryHeading = 'NW' AND (ExitHeading = 'N' OR ExitHeading = 'NE')) THEN 'R'\n        WHEN (EntryHeading = 'NW' AND (ExitHeading = 'W' OR ExitHeading = 'SW')) THEN 'L'\n        ELSE '0' END AS Sorturns,        \n        CAST(Hour AS string) AS Hour, \n        CAST(Weekend AS string) AS Weekend,\n        CAST(Month AS string) As Month,\n        PATH,\n        City\n    FROM\n    \"\"\"","099df8d1":"experimental = False\nif experimental:\n    create_stmt = \"CREATE OR REPLACE MODEL\"\nelse: \n    create_stmt = \"CREATE MODEL IF NOT EXISTS\"\ncreate_model_template = \"\"\"\n{is_experimental} `{model_name}`\n    OPTIONS(MODEL_TYPE = 'LINEAR_REG',\n    LS_INIT_LEARN_RATE = @init_lr,\n            MAX_ITERATIONS = 10 ) AS\nSELECT\n    {label_name} as label,\n    {select_q}\n      `kaggle-competition-datasets.geotab_intersection_congestion.train`\nWHERE\n    RowId < 2600000\n    AND {label_name} < @tmp_value\n\"\"\"","7a9358f3":"#bigquery.ScalarQueryParameter(\"reg_value\", \"INT64\", 10),\n#bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.1), \n#_REG = @rL2eg_value,","58d301d5":"\nconfigs= {\n    \"bqml_geotab.model_20_0\":[   \n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 200)\n    ],\n    \"bqml_geotab.model_50_1\":[    \n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 300)\n    ],\n    \"bqml_geotab.model_80_2\":[   \n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 500)\n    ],\n    \"bqml_geotab.model_20_3\": [    \n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 1500)\n    ],\n    \"bqml_geotab.model_50_4\": [    \n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 2400)\n    ],\n    \"bqml_geotab.model_80_5\": [\n        bigquery.ScalarQueryParameter(\"init_lr\", \"FLOAT64\", 0.05),\n        bigquery.ScalarQueryParameter(\"tmp_value\", \"INT64\", 3700)\n    ]\n}","f8a1431f":"for key, value in labels.items():\n    #print(key, value)\n    lab = key\n    labv = lab[-2:]+'_'+value\n    model_name = 'bqml_geotab.model_'+labv\n    model_name=model_name\n    label_name=lab\n    job_config = bigquery.QueryJobConfig()\n    job_config.query_parameters = configs[model_name]\n    _ = make_query(create_model_template, \n            job_config=job_config,\n            model_name=model_name,\n            label_name=label_name,\n            select_q = select_q,\n            is_experimental=create_stmt)\n        \n    print(model_name, \"is complete\")\n","3dda14dc":"for model in client.list_models('geotabintersection.bqml_geotab'):\n    print(model.path)","f88ada37":"eval_train = \"\"\"\nSELECT\n  *\nFROM\n  ML.TRAINING_INFO(MODEL `{model_name}`) \nORDER BY iteration \n\"\"\"\neval_model=\"\"\"\nSELECT\n  *\nFROM ML.EVALUATE(MODEL `{model_name}`, (\n  SELECT\n    {label_name} as label,\n    {select_q}\n  `kaggle-competition-datasets.geotab_intersection_congestion.train`\nWHERE\n    RowId >= 2600000\n    ))\n\"\"\"\n","cfde7a70":"feature2loss = {}\nfor key, value in labels.items():\n    #print(key, value)\n    lab = key\n    labv = lab[-2:]+'_'+value\n    model_name = 'bqml_geotab.model_'+labv\n    model_name=model_name\n    label_name=lab \n    # evaluating model\n    train_info = make_query(\n            eval_train,\n            model_name=model_name,\n            label_name=label_name)\n    eval_info = make_query(\n            eval_model,\n            model_name=model_name,\n            label_name=label_name,\n            select_q = select_q\n        )\n    feature2loss[value] = {'eval': eval_info, \n                       'train':train_info.loc[train_info['iteration'].idxmax(),\n                                              ['loss', 'eval_loss']]}\n    print(value, \"train_loss (train, eval)= \",\n              *train_info.loc[\n            train_info['iteration'].idxmax(),\n            ['loss', 'eval_loss']])","e1b96e75":"\npredict_model=\"\"\"\nSELECT\n  RowId,\n  predicted_label AS {label_name}\nFROM\n  ML.PREDICT(MODEL `{model_name}`,\n    (\n    SELECT\n        RowId,\n        {select_q}\n      `kaggle-competition-datasets.geotab_intersection_congestion.test`))\n    ORDER BY RowId ASC\n\"\"\"","a8062049":"def change_columns(df, model_num):\n    df['RowId'] = df['RowId'].apply(str) + '_%s'%(model_num)\n    df.rename(columns={'RowId': 'TargetId', \n                       sub_lab[model_num]: 'Target'}, \n              inplace=True)","ff489a9b":"results = []\nfor key, value in labels.items():\n    #print(key, value)\n    lab = key\n    labv = lab[-2:]+'_'+value\n    model_name = 'bqml_geotab.model_'+labv\n    model_name=model_name\n    label_name=lab \n    var = \"df_t\"+value\n    print(var)\n    df = make_query(\n            predict_model,\n            model_name=model_name,\n            label_name=label_name,\n            select_q = select_q)\n    results.append((label_name, df))\n    #return results\n#results = make_queries(predict_model)","008eff0b":"predictions = [vframe.copy(deep=True) for _, vframe in results]\nkeys = [k for k, _ in results]\nfor k, frame in zip(keys, predictions):\n    change_columns(frame, labels[k])\ndf = pd.concat(predictions)","075dbcf2":"submission = pd.read_csv('..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv')","1820caaa":"df.to_csv('bqml_submission.csv', index=False)","424f915f":"This means for Atlanta 80percntile of the people have to stop on an average 27.89 min or so and Boston 26.22 . Hope this inference is right","722ff1cb":"Get Total rows in the training data","5ffd9e36":"## <center>Traffic Congestion <\/center>\n![Traffic Congestion](http:\/\/i.4pcdn.org\/pol\/1407750704541.jpg)\n\n### Objective: \nPredict traffic congestion, based on an aggregate measure of stopping distance and waiting times, at intersections in 4 major US cities: Atlanta, Boston, Chicago & Philadelphia using [BigQuery](https:\/\/cloud.google,com\/bigquery), a data warehouse for manipulating, joining, and querying large scale tabular datasets. BigQuery also offers [BigQuery ML](https:\/\/cloud.google.com\/bigquery-ml\/docs\/bigqueryml-intro), an easy way for users to create and run machine learning models to generate predictions through a SQL query interface.\n","a47e01ee":"Get the column names for the training set","ab02c912":"The BigQuery client library provides a cell magic, %%bigquery, which runs a SQL query and returns the results as a Pandas DataFrame. Once you use this command the rest of your cell will be treated as a SQL command. (Note that tab complete won't work for SQL code written in this way.)","187af32a":"Just testing creating a stored procedure and executing"}}