{"cell_type":{"abcec05c":"code","cec61802":"code","971afdf5":"code","12fa8fac":"code","e7361dc7":"code","24792c4e":"code","8b4699f2":"code","92e8a06a":"code","78bb7546":"code","0c25b95f":"code","78bb1bb9":"code","390f2268":"code","73bc44db":"code","3cce7b6e":"code","beaa9c1b":"code","50675d98":"code","0d7de125":"code","dfa927d7":"markdown","596c17b0":"markdown"},"source":{"abcec05c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cec61802":"# \u8bbe\u7f6e\u57fa\u672c\u53c2\u6570\nbatch_size=32\nepochs=20\nnum_classes=10\ninput_shape=(28,28,1)","971afdf5":"# \u5bfc\u5165\u6d4b\u8bd5\u96c6\u7684\u6570\u636e\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","12fa8fac":"# train \u4e3a 42000 * 785\u77e9\u9635\uff0cX_train \u53d6\u540e784\u5217\uff0cY_train \u53d6\u7b2c\u4e00\u5217\uff08\u5373\u6807\u7b7e\uff09\n# test \u4e3a 28000 * 784\u77e9\u9635\nX_train = train.iloc[:, 1:].values\nY_train = train.iloc[:, 0].values\nX_test = test.values","e7361dc7":"# \u8282\u7ea6\u5c11\u8bb8\u5185\u5b58\u5f00\u9500\uff08\u7ea6400M\uff09\ndel train, test","24792c4e":"# \u5c06\u4e8c\u7ef4\u77e9\u9635 42000 * 784\n# \u8f6c\u6362\u6210\u56db\u7ef4\u77e9\u9635\uff0c42000 * 28 * 28 * 1\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)","8b4699f2":"# \u5c06 0-255 \u7684\u6570\u636e\uff0c\u5f52\u5316\u4e3a 0-1 \u7684\u6570\u636e\nX_train = np.divide(X_train, 255.)\nX_test = np.divide(X_test, 255.)","92e8a06a":"import tensorflow as tf\nfrom tensorflow import keras\n\n# \u6253\u5370\u7248\u672c\u53f7\nprint(tf.__version__)\nprint(keras.__version__)","78bb7546":"from sklearn.model_selection import train_test_split\n\n# \u5c06 Y_train \u4e5f\u53732\u7ef4\u7684 42000 * 1 \u77e9\u9635\uff0c\u6309 one-shot \u7f16\u7801\u4e3a 42000 * 10\u7684\u77e9\u9635\n# \u539f\u503c 0-9 \u7684\u6570\u503c\u8f6c\u6362\u4e3a 1 * 10 \u7684\u5217\u5bf9\u5e94\u4e3a1\uff0c\u5176\u4f59\u4e3a0\nY_train = keras.utils.to_categorical(Y_train, num_classes)\n\n# \u5c06\u6837\u672c 42000 \u5207\u5206\u4e3a\u8bad\u7ec3\u7ec4 train \u548c\u6821\u9a8c\u7ec4 val \u4e24\u7ec4\u6570\u636e\n# \u53c2\u6570 train_size \/ test_size \u65e2\u53ef\u6309\u6bd4\u4f8b\u5207\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6307\u5b9a\u6570\u91cf\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 2000)","0c25b95f":"# define a model with tensorflow.keras\nmodel = keras.Sequential()\n\n# \u586b\u5145\u65b9\u5f0f same \u6216 valid\uff0c\u5927\u5c0f\u5199\u654f\u611f\uff01\nmodel.add(keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu', padding='same',\n                              input_shape=input_shape))\nmodel.add(keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'))\nmodel.add(keras.layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(keras.layers.Dropout(rate=0.25))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(units=128, activation='relu'))\nmodel.add(keras.layers.Dropout(rate=0.5))\nmodel.add(keras.layers.Dense(units=10, activation='softmax'))","78bb1bb9":"# \u7528\u4ee5\u751f\u6210\u4e00\u4e2abatch\u7684\u56fe\u50cf\u6570\u636e\uff0c\u652f\u6301\u5b9e\u65f6\u6570\u636e\u63d0\u5347\ndatagen = keras.preprocessing.image.ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image\n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images","390f2268":"# \u4fee\u6539\u5b66\u4e60\u7387\nlearning_rate_reduction = keras.callbacks.ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=2,factor=0.5,min_lr=0.00001)","73bc44db":"# \u7f16\u8bd1\u6a21\u578b\noptimizer=keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])","3cce7b6e":"# \u8bad\u7ec3\u6a21\u578b\nhistory = model.fit_generator(datagen.flow(X_train, Y_train, batch_size=batch_size),\n                              epochs =epochs, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size+1,\n                              callbacks=[learning_rate_reduction])","beaa9c1b":"# \u6d4b\u8bd5\u6a21\u578b\nloss, accuracy = model.evaluate(X_val, Y_val, steps=batch_size)\nloss, accuracy","50675d98":"# \u4f5c\u51fa\u9884\u6d4b\npredicted = model.predict(X_test)\n\n# \u5c06\u9884\u6d4b\u7ed3\u679c 28000 * 10 \u5904\u7406\u6210 28000 * 1\n# \u7b97\u6cd5\u662f\u53d6 10 \u4e2a\u503c\u4e2d\u7684\u6700\u5927\u503c\nresults = np.argmax(predicted, axis=1)","0d7de125":"# \u5c06\u9884\u6d4b\u503c\u4fdd\u5b58\u6210\u7ade\u8d5b\u8981\u6c42\u7684\u683c\u5f0f\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission[\"Label\"] = results\nsubmission.to_csv('tf_keras.csv', index=False)","dfa927d7":"\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u5728 Kaggle \u4e0a\u201c\u624b\u5199\u201d\u4ee3\u7801\u3002\n\n\u672c\u6b21\u5c1d\u8bd5\u4f7f\u7528 TensorFlow \u5b9e\u73b0\u7684  Keras API \u89c4\u8303\u4ee3\u7801\u5e93\uff0c\u800c\u975e\u76f4\u63a5\u4f7f\u7528 Keras \u4ee3\u7801\u5e93\u3002\n\n\u5173\u4e8e TensorFlow \u5b9e\u73b0\u7684  Keras API \u89c4\u8303\u4ee3\u7801\u5e93\uff0c\u8be6\u89c1\u5176\u7f51\u7ad9\u3002\n\n\u6587\u6863\u7f51\u5740\u4e3a\uff1ahttps:\/\/www.tensorflow.org\/guide\/keras\n\n**\u5bfc\u5165\u6570\u636e\u3001\u89c4\u8303\u6570\u636e**","596c17b0":"**\u4e09\u6b65\u8d70\uff1a\u8bad\u7ec3\u6a21\u578b\u3001\u9a8c\u8bc1\u6a21\u578b\u3001\u4f5c\u51fa\u9884\u6d4b**"}}