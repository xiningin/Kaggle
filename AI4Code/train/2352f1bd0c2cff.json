{"cell_type":{"d831610a":"code","94629963":"code","42abae5e":"code","d6426940":"code","73f15135":"code","741c50c7":"code","b13ba7a0":"code","ed6c4eea":"code","e6df0a34":"code","539afe10":"code","28ee344e":"code","d43339aa":"code","77ba449b":"code","b6ae1a43":"code","268408f4":"code","adfc9d8f":"code","1cd5d7ad":"code","0f351095":"markdown","686a0909":"markdown","3b70af62":"markdown","e993146b":"markdown","3c99d37d":"markdown","41b1553a":"markdown"},"source":{"d831610a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","94629963":"data = pd.read_csv('..\/input\/weatherww2\/Summary of Weather.csv')\ndata.head()","42abae5e":"data.info()","d6426940":"sns.pairplot(data[['MinTemp','MaxTemp']]) # Strong Correlation Between Min and Max Temps","73f15135":"data_new = data[['MinTemp', 'MaxTemp']] # Select columns needed","741c50c7":"# Prep Train and Test Data\ntrain_data = data_new.sample(frac=0.8,random_state=42) \ntest_data = data_new.drop(train_data.index)","b13ba7a0":"# Get Stats on Train Data\ntrain_stats = train_data.describe()\ntrain_stats.pop(\"MaxTemp\")\ntrain_stats = train_stats.transpose()\ntrain_stats","ed6c4eea":"# Create Labels needed for TF model\ntrain_labels = train_data.pop('MaxTemp')\ntest_labels = test_data.pop('MaxTemp')","e6df0a34":"def norm(x):\n  return (x - train_stats['mean']) \/ train_stats['std']\nnormed_train_data = norm(train_data)\nnormed_test_data = norm(test_data)","539afe10":"def build_model():\n  model = tf.keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=[len(train_data.keys())]),\n    layers.Dense(64, activation='relu'),\n    layers.Dense(1)\n  ])\n\n  optimizer = tf.keras.optimizers.RMSprop(0.001)\n  model.compile(loss='mse',optimizer=optimizer, metrics=['mae', 'mse'])\n\n  return model","28ee344e":"model = build_model()\nmodel.summary()","d43339aa":"# Check an example\nexample_batch = normed_train_data[:10]\nexample_result = model.predict(example_batch)\nexample_result","77ba449b":"# Train the data\n# Added early stopping to avoid overfitting\n\nepochs = 25\nhistory = model.fit(normed_train_data, train_labels, epochs=epochs, validation_split = 0.2, \n                    verbose=0, \n                    callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)])","b6ae1a43":"hist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist.tail()","268408f4":"test_predictions = model.predict(normed_test_data).flatten()\n\na = plt.axes(aspect='equal')\nplt.scatter(test_labels, test_predictions)\nplt.xlabel('True Values [MaxTemp]')\nplt.ylabel('Predictions [MaxTemp]')\nlims = [0, 50]\nplt.xlim(lims)\nplt.ylim(lims)\n_ = plt.plot(lims, lims)","adfc9d8f":"error = test_predictions - test_labels\nplt.hist(error, bins = 25)\nplt.xlabel(\"Prediction Error [Max Temp]\")\n_ = plt.ylabel(\"Count\")","1cd5d7ad":"print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_labels, test_predictions)))","0f351095":"### Model","686a0909":"**Simple Linear Regression Model**\n- Using Tensorflow\n- On Weather Conditions in World War Two Dataset\n\n**Goal :** To predict MaxTemp given MinTemp","3b70af62":"### Summary\n\nHere we saw a simple Linear Regression Model using Tensorflow. ","e993146b":"### Model Evaluation","3c99d37d":"**Contents**\n* Import Libraries\n* Load Data\n* Build Model\n* Evaluate\n* Summary","41b1553a":"### Normalize the Data"}}