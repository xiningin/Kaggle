{"cell_type":{"8da9330d":"code","e4a83c3e":"code","03cd04c1":"code","1387d675":"code","46493ba4":"code","ef52699d":"code","9c77ebfd":"code","a0ae7323":"code","4cd125e3":"code","303b0120":"code","9b0997d8":"markdown","79835802":"markdown","d0d9e8bd":"markdown"},"source":{"8da9330d":"import pandas as pd\nEdgesGraph = pd.read_csv(\"..\/input\/french-twitter-graph-csv-complete-all-edges\/clean_complete.csv\", names = ['id', 'friend', 'sequence'])\nEdgesGraph[EdgesGraph['friend'] == 4295443043]\nimport gc\nEdgesGraphSmaller = EdgesGraph[['id', 'friend']]\ndel EdgesGraph\ngc.collect()\nnodeDetails = pd.read_csv('..\/input\/detailsonfrenchtwitterpopulation\/allnodesdetails.csv')","e4a83c3e":"import igraph as ig\nrecords = EdgesGraphSmaller.to_records(index=False)","03cd04c1":"del EdgesGraphSmaller\ngc.collect()","1387d675":"records = records[:int(len(records)*1\/4)]\n","46493ba4":"testGrph = ig.Graph.TupleList(records, directed=False, weights=False)\ngiant = testGrph.components().giant()\ndel testGrph\ngc.collect()\ntotalCommunities = giant.community_multilevel()\ngiant.modularity(totalCommunities)","ef52699d":"whichCommunity = 3\nprint(len(totalCommunities[whichCommunity]))\ntest = []\nfor i, j in zip(allCommunities[whichCommunity].vs.degree(), allCommunities[whichCommunity].vs):\n    \n    if i >= 500 or j['name'] == 80820758 or j['name'] == 801822323825410049:\n        try:\n            name = nodeDetails[nodeDetails['id'] == j['name']]['screen_name'].values[0]\n            test.append((j['name'], i, name))\n        except:\n            pass\nprint(sorted(test, key=lambda x: x[1]))","9c77ebfd":"annotated = pd.read_csv('..\/input\/dataset-for-french\/profilesmanualannotation.csv')\nannotated.head()","a0ae7323":"psSet = set(annotated.loc[annotated['party'] == 'ps']['UserId'])\nfnSet = set(annotated.loc[annotated['party'] == 'fn']['UserId'])\nlrSet = set(annotated.loc[annotated['party'] == 'lr']['UserId'])\nfiSet = set(annotated.loc[annotated['party'] == 'fi']['UserId'])\nemSet = set(annotated.loc[annotated['party'] == 'em']['UserId'])\nemPSSet = set(annotated.loc[annotated['party'] == 'em\/ps']['UserId'])\nfnLRSet = set(annotated.loc[annotated['party'] == 'fn\/lr']['UserId'])\nemFISet = set(annotated.loc[annotated['party'] == 'em\/fi']['UserId'])\nemLRSet = set(annotated.loc[annotated['party'] == 'em\/lr']['UserId'])\nfiPSSet = set(annotated.loc[annotated['party'] == 'fi\/ps']['UserId'])\nfiFNSet = set(annotated.loc[annotated['party'] == 'fi\/fn']['UserId'])\nfiLRSet = set(annotated.loc[annotated['party'] == 'fi\/lr']['UserId'])\nfnPSSet = set(annotated.loc[annotated['party'] == 'fn\/ps']['UserId'])\nlrPSSet = set(annotated.loc[annotated['party'] == 'lr\/ps']['UserId'])\nemFNSet = set(annotated.loc[annotated['party'] == 'em\/fn']['UserId'])","4cd125e3":"import random\n#allCommunities = totalCommunities.subgraphs()\ncommunityCount = []\n#dataFrameWithCommunities = pd.DataFrame(communityCount, columns = ['ps', 'lr', 'fi', 'em', 'fn'])\ncounter = 1\nfor i in allCommunities:\n    addendum = [0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0]\n    Community = counter\n    for j in i.vs:\n        number = random.randrange(0, 100, 1)\n        myName = j['name']\n        if myName in psSet:\n            addendum[0] = addendum[0] + 1\n        elif myName in lrSet:\n            addendum[1] = addendum[1] + 1\n        elif myName in fiSet:\n            addendum[2] = addendum[2] + 1\n        elif myName in emSet:\n            addendum[3] = addendum[3] + 1\n        elif myName in fnSet:\n            addendum[4] = addendum[4] + 1\n        elif myName in emPSSet:\n            addendum[5] = addendum[5] + 1\n        elif myName in fnLRSet:\n            addendum[6] = addendum[6] + 1\n        elif myName in emFISet:\n            addendum[7] = addendum[7] + 1\n        elif myName in emLRSet:\n            addendum[8] = addendum[8] + 1\n        elif myName in fiPSSet:\n            addendum[9] = addendum[9] + 1\n        elif myName in fiFNSet:\n            addendum[10] = addendum[10] + 1\n        elif myName in fiLRSet:\n            addendum[11] = addendum[11] + 1\n        elif myName in fnPSSet:\n            addendum[12] = addendum[12] + 1\n        elif myName in lrPSSet:\n            addendum[13] = addendum[13] + 1\n        elif myName in emFNSet:\n            addendum[14] = addendum[14] + 1\n    addendum.append(i.vcount())\n    communityCount.append(addendum)\n        #if (number == 55 or number == 56) and annotated.loc[annotated['UserId'] == j['name']]['party'].size > 0:\n        #    temp = [j['name'], annotated.loc[annotated['UserId'] == j['name']]['party'].values[0],Community]\n        #    print(temp)\n             \n    counter = counter + 1\ndataFrameWithCommunities = pd.DataFrame(communityCount, columns = ['ps', 'lr', 'fi', 'em', 'fn', 'em\/ps', 'fn\/lr', 'em\/fi',\n       'em\/lr', 'fi\/ps', 'fi\/fn', 'fi\/lr', 'fn\/ps', 'lr\/ps', 'em\/fn', 'total'])","303b0120":"dataFrameWithCommunities","9b0997d8":"In order to inspect each of the communities, I will select the value of variable 'whichCommunity' accordingly","79835802":"This notebook takes a quarter of French Twitter network and runs a community detection algorithm to find out the structure of french political network on twitter. ","d0d9e8bd":"Kaggle has a limited memory, so it's only feasible to analyse 1\/4th of the data"}}