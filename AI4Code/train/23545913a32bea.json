{"cell_type":{"0c43ad53":"code","f2b3d0c5":"code","4108c40a":"code","d2c9044f":"code","2f07664f":"code","6561e077":"code","88037bf8":"code","65f780ac":"code","4251cca4":"code","25df791b":"code","ccf532c7":"code","befe770e":"code","2da5b323":"code","4b41ae28":"code","51c06150":"code","50f6a882":"code","e8e5acae":"code","52838d90":"code","e076a4b6":"code","01636d09":"code","63a30def":"code","d6ff3db4":"code","2f11259e":"code","ca250f5a":"code","df08c7aa":"code","bb169831":"code","2c3d82d0":"code","7b8c2670":"code","0894d09c":"code","7d8d5929":"code","66050933":"code","2feb9fa2":"code","91536231":"code","68a75b04":"code","b095d888":"code","d5a54e4b":"code","ffee5656":"code","82eda8cc":"code","b037ca9c":"code","8de66d7a":"code","79b2d495":"code","294196d6":"code","fe4f7d58":"code","5424755d":"code","b6bfac96":"code","5dac3397":"code","6d1be905":"code","9b5c4777":"code","b19fdf8c":"code","f1790699":"code","d04a3ccd":"code","b60cdcc7":"code","d582dc1d":"code","bf185c89":"code","fd0fba93":"code","e1efb0e1":"code","4a8e6e12":"code","2b88c244":"code","04301c72":"markdown","9b8e3893":"markdown","fb87b871":"markdown","9919e11d":"markdown","420a5fbb":"markdown","5d818075":"markdown","69457534":"markdown","303bf967":"markdown","d13bdce5":"markdown","efb34002":"markdown","c2156039":"markdown","ee0e1abe":"markdown","40bdb143":"markdown","6e01ec67":"markdown"},"source":{"0c43ad53":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Pretty display for notebooks\n%matplotlib inline\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix,precision_recall_curve, auc, roc_auc_score,plot_roc_curve,roc_curve, recall_score, classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble    import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom imblearn.over_sampling import RandomOverSampler\nfrom collections import Counter","f2b3d0c5":"#Reading Data\ndata = pd.read_csv(\"..\/input\/classification\/Task_Classification.csv\")\ndata.head()","4108c40a":"data.tail()","d2c9044f":"#Data about Data\ndata.info()","2f07664f":"data['page_source_path'].unique()","6561e077":"data['page_source_path'].value_counts()","88037bf8":"data['link_url'].value_counts()","65f780ac":"data['link_domain_name'].unique()","4251cca4":"data.duplicated().sum()","25df791b":"data.drop_duplicates(inplace=True)","ccf532c7":"data['link_domain_name'].value_counts()","befe770e":"data.drop(['link_id'] , axis=1 ,inplace=True)\ndata.head()","2da5b323":"data.info()","4b41ae28":"data.isnull().sum()","51c06150":"data.drop(['trans_content_name' , 'alt_content_names'] , axis=1 , inplace=True)","50f6a882":"data.head()","e8e5acae":"data.info()","52838d90":"data.isnull().sum()\n#Now Null Data in class ","e076a4b6":"#drop 10 row has NAN in column class\ndata.dropna(inplace=True)","01636d09":"#Check all rows do not has Null \ndata.isnull().sum().sum()","63a30def":"data.info()","d6ff3db4":"#encoding objects column\npsp_label     = LabelEncoder()\nlink_label    = LabelEncoder()\ndomain_label  = LabelEncoder()\ncontent_label = LabelEncoder()\ncampaign_label= LabelEncoder()\nclass_label   = LabelEncoder()\n#_______________________________________________________________________________\ndata['page_source_path']   =psp_label.fit_transform(data['page_source_path'])\ndata['link_url']       =link_label.fit_transform(data['link_url'])\ndata['link_domain_name'] =domain_label.fit_transform(data['link_domain_name'])\ndata['content_name']  =content_label.fit_transform(data['content_name'])\ndata['campaign_name']      =campaign_label.fit_transform(data['campaign_name'])\ndata['class']              =class_label.fit_transform(data['class'])","2f11259e":"data['link_domain_name'].value_counts()","ca250f5a":"data.info()","df08c7aa":"data.head()","bb169831":"data.corr().style.background_gradient(cmap='inferno')","2c3d82d0":"corr  = data.corr()\nf = plt.figure(figsize = (16,8))\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    ax1 = sns.heatmap(corr, annot=True, mask=mask, cbar_kws={'label': 'correlation heatmap'})","7b8c2670":"#drop path feature as has low correlation with all features\ndata.drop(['page_source_path'] , inplace=True,axis=1)","0894d09c":"data.head()","7d8d5929":"sns.pairplot(data, hue='class')","66050933":"data['class'].value_counts()","2feb9fa2":"#Features\nX = data.drop(['class'] ,axis=1)\n#Target\nY = data['class']\n","91536231":"X.head()","68a75b04":"Y.head()","b095d888":"#Apply scaler \ndata_scaler = MinMaxScaler()\ndata = data_scaler.fit_transform(X)\ndata","d5a54e4b":"df = pd.DataFrame(data , columns=['link_url' ,'link_domain_name' ,\n                                  'content_name','campaign_name', 'number_of_episodes' ])","ffee5656":"df.head()","82eda8cc":"Y.value_counts()","b037ca9c":"print(\"percent of sample class 1: \",100* (5588 \/float (df.shape[0] ) ))\nprint(\"percent of sample class 0: \",100* (2397 \/float (df.shape[0] ) ))","8de66d7a":"ros = RandomOverSampler(random_state=0)\nX_resampled, y_resampled = ros.fit_resample(X, Y)\nprint(sorted(Counter(y_resampled).items()))","79b2d495":"#from imblearn.under_sampling import RandomUnderSampler\n#rus = RandomUnderSampler(random_state=0)\n#X_resampled, y_resampled = rus.fit_resample(X, Y)\n#from collections import Counter\n#print(sorted(Counter(y_resampled).items()))","294196d6":"#Splitting Data\nx_train_res ,x_test , y_train_res , y_test = train_test_split(X_resampled, y_resampled,test_size=0.2 , random_state=33)\nprint(\"X_train dataset: \", x_train_res.shape)\nprint(\"y_train dataset: \", y_train_res.shape)\nprint(\"X_test dataset: \", x_test.shape)\nprint(\"y_test dataset: \", y_test.shape)","fe4f7d58":"# using linear kernel, C=1, default value of gamma\nmodel_linear = SVC(kernel='linear')\nmodel_linear.fit(x_train_res , y_train_res)\n# predict\ny_pred_linear = model_linear.predict(x_test)\nprint ('y_prediction' , y_pred_linear) \n#accuracy\nprint(\"accuracy of Training Data: \" ,metrics.accuracy_score(y_train_res ,model_linear.predict(x_train_res)),'\\n' )\nprint(\"accuracy of Testing  Data: \" ,metrics.accuracy_score(y_test ,model_linear.predict(x_test)),'\\n' )\nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=y_pred_linear),'\\n' )","5424755d":"# cm\nCM = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_linear)\n#drawing confusion matrix\nsns.heatmap(CM, center = True)\nprint(classification_report(y_test , y_pred_linear , target_names=['0','1']))","b6bfac96":"#Model with Gaussian Radial Basis Function (RBF)\nmodel_linear = SVC(kernel='rbf')\nmodel_linear.fit(x_train_res , y_train_res)\n# predict\ny_pred_linear = model_linear.predict(x_test)\nprint ('y_prediction' , y_pred_linear) \nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=y_pred_linear),'\\n' )\n# cm\nCM = metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_linear)\nCM\n#drawing confusion matrix\nsns.heatmap(CM, center = True)\nprint(classification_report(y_test , y_pred_linear , target_names=['0','1']))","5dac3397":"GaussianNBModel = GaussianNB()\nGaussianNBModel.fit(x_train_res , y_train_res)\n\n#Calculating Score for training and Testing\nprint('GaussianNBModel Train Score is : ' , GaussianNBModel.score(x_train_res, y_train_res))\nprint('GaussianNBModel Test Score is : ' , GaussianNBModel.score(x_test , y_test))","6d1be905":"#Calculating Prediction\n\ny_prediction = GaussianNBModel.predict(x_test)\ny_prediction_propabilaty= GaussianNBModel.predict_proba(x_test)\nprint('predicted value for GaussianNBModel is :' ,y_prediction[:10])\nprint('prdicted Value for GaussianNBModel is : ' ,y_prediction_propabilaty[:5])\nprint('-------------------------------------------------')\nprint('prediction value for GaussianNBModel is :' , y_prediction_propabilaty[6:10])","9b5c4777":"#Calculate Confusion Matrix\nCM = confusion_matrix(y_test, y_prediction)\nprint('Confusion Matrix is : \\n' , CM)\n#drawing confusion matrix\nsns.heatmap(CM, center = True)\nprint(classification_report(y_test , y_pred_linear , target_names=['0','1']))","b19fdf8c":"dt = DecisionTreeClassifier(max_depth=15 , criterion='entropy' ,random_state=10)\ndt.fit(x_train_res , y_train_res)\ny_pred_dt = dt.predict(x_test)\nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=y_pred_dt),'\\n' )\ncm = confusion_matrix(y_test , y_pred_dt)\nprint('Confusion Matrix is : \\n' , cm)\n#drawing confusion matrix\nsns.heatmap(cm, center = True)\nprint(classification_report(y_test , y_pred_dt , target_names=['0','1']))","f1790699":"plot_roc_curve( dt, x_test , y_test)","d04a3ccd":"#Fitting Model\nrf=RandomForestClassifier(max_depth=4 ,max_features=5 )\nrf.fit(x_train_res , y_train_res)\n#Training Score\nrf_train_score = rf.score(x_train_res , y_train_res)\n#Test Score\nrf_test_predict = rf.predict(x_test)\nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=rf_test_predict),'\\n' )\ncm = confusion_matrix(y_test , y_pred_dt)\nprint('Confusion Matrix is : \\n' , cm)\n#drawing confusion matrix\nsns.heatmap(cm, center = True)\nprint(classification_report(y_test , rf_test_predict , target_names=['0','1']))","b60cdcc7":"#Creat object from model\nmodel = KNeighborsClassifier(n_neighbors=3)\n#Train the model using the training sets\nmodel.fit(x_train_res , y_train_res)\n#Training Score\nknn_train_score = model.score(x_train_res , y_train_res)\n#Testing Score\nknn_test_score = model.score(x_test , y_test)\n#Predict Output\nknn_predict= model.predict(x_test)\nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=knn_predict),'\\n' )\ncm = confusion_matrix(y_test ,knn_predict)\nprint('Confusion Matrix is : \\n' , cm)\n#drawing confusion matrix\nsns.heatmap(cm, center = True)\nprint(classification_report(y_test , knn_predict , target_names=['0','1']))\n","d582dc1d":"plot_roc_curve(model , x_test , y_test)","bf185c89":"#Fit Model\nGBC_Model = GradientBoostingClassifier(n_estimators=100 , max_depth=3 , random_state=44)\nGBC_Model.fit(x_train_res, y_train_res)\n#Training Score\nGBC_train_score = GBC_Model.score(x_train_res , y_train_res)\n#Testing Score\nGBC_test_score = GBC_Model.score(x_test , y_test)\n#Test Predict\nGBC_Test_predict = GBC_Model.predict(x_test)\nGBC_Model.feature_importances_\nprint(\"accuracy: \" ,metrics.accuracy_score(y_true = y_test , y_pred=GBC_Test_predict),'\\n' )\ncm = confusion_matrix(y_test ,GBC_Test_predict)\nprint('Confusion Matrix is : \\n' , cm)\n#drawing confusion matrix\nsns.heatmap(cm, center = True)\nprint(classification_report(y_test , GBC_Test_predict , target_names=['0','1']))","fd0fba93":"roc_curve(y_test , GBC_Test_predict)","e1efb0e1":"# AUC.\nauc = metrics.roc_auc_score(y_test , GBC_Test_predict)\nprint('AUC  = {}'.format(np.round(auc,3)))","4a8e6e12":"plot_roc_curve(GBC_Model, x_test, y_test)","2b88c244":"#Area under curve  with Decision Tree Classifier\nplot_roc_curve( dt, x_test , y_test)","04301c72":"# Model Building","9b8e3893":"**Over fitting & F-score is low**","fb87b871":"**Decision Tree Classifier**","9919e11d":"# ROC & AUC curve","420a5fbb":"**SVC**","5d818075":"**K Neighbors Classifier**","69457534":"# After applying random over sample\n# big area under the curve is the best auc and best f1-score >>give us the best threshpld\n# Accuracy is 85% with Decision Tree Classifier","303bf967":"**naive_bayes**","d13bdce5":"# Random Over Sampler","efb34002":"**Random Forest Classifier**","c2156039":"**Gradient Boosting Classifier**","ee0e1abe":"# Data Preprocessing","40bdb143":"**from paitplot data is inbalanced \nin class 1 more than class 0**","6e01ec67":"# Important libraries"}}