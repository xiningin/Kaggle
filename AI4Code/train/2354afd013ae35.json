{"cell_type":{"1b79b5fc":"code","8de7c3ee":"code","471a2e28":"code","f2d5356c":"code","7a7a1506":"code","89ce7183":"markdown","4905636a":"markdown","f4f2abb4":"markdown","93cd655a":"markdown","2a59eeda":"markdown","8a8a4dee":"markdown","51d91fc8":"markdown","d1f473af":"markdown","f8c74a98":"markdown","a49a7d5c":"markdown","6eb0018d":"markdown","3c7f4579":"markdown","23154f38":"markdown","f52393f8":"markdown","58bab2d0":"markdown"},"source":{"1b79b5fc":"from IPython.display import Image\nImage(\"..\/input\/image1\/Picture1.png\")\n","8de7c3ee":"## variables declared inside Controller().__init__()\n\n# epsilon: used as a lever to switch inbetween explore and exploit\nself.EPSILON = .4\n\n# search range: used as a search parameter for neighbours halite\nself.SEARCH_RANGE = 4","471a2e28":"def get_neighbour_halite(self, point1, search_range, board):\n    \"\"\"get a list of halite from neighbours within a search_range\"\"\"\n    point_x_neighbours = np.arange(max(0, point1.x-search_range), min(point1.x+search_range+1,20))\n    point_y_neighbours = np.arange(max(0, point1.y-search_range), min(point1.y+search_range+1, 20))    \n    neighbour_list = np.array( np.meshgrid(point_x_neighbours, point_y_neighbours)).reshape(-1,2)\n    halite_list = [board.cells[i[0], i[1]].halite for i in neighbour_list]\n    return neighbour_list, halite_list\n\ndef find_large_halite(self, neighbour_list, halite_list ):\n    \"\"\"Find the cell with the largest halite \"\"\"\n    if halite_list.index(np.max(halite_list)):\n        return Point(neighbour_list[halite_list.index(np.max(halite_list))][0], \\\n                    neighbour_list[halite_list.index(np.max(halite_list))][1])\n    else:\n        result =  choice(neighbour_list)\n        return Point(result[0], result[1])\n\ndef getDirTo(self, fromPos, toPos, size):\n    \"\"\"from https:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-halite\"\"\"\n    fromX, fromY = divmod(fromPos[0],size), divmod(fromPos[1],size)\n    toX, toY = divmod(toPos[0],size), divmod(toPos[1],size)\n    if fromY < toY: return ShipAction.NORTH\n    if fromY > toY: return ShipAction.SOUTH\n    if fromX < toX: return ShipAction.EAST\n    if fromX > toX: return ShipAction.WEST\n\n#### explore option\ndef explore(self, ship, current_prob):\n    \"\"\"explore the surrounding area and move towards the largest halite neighbour\"\"\"\n    if current_prob < self.EPSILON:\n        # get list of neighbours and halites within a search range\n        neighbours, halites = self.get_neighbour_halite(ship.position, self.SEARCH_RANGE, self.board)\n        # get the destination from the cells with the largest halites\n        destination = self.find_large_halite(neighbours, halites)\n        # if this largest cell is not ship's position\n        if destination and destination != ship.position:          \n            direction = self.getDirTo(ship.position, destination, BOARD_SIZE)\n            d_cell = ship.cell.neighbor(direction.to_point())\n            # Check if direction is safe\n            if (self.clear(d_cell) and not self.hostile_ship_near(d_cell, ship.halite)):\n                self.move(ship, direction)\n                return True\n        # if it is the current ship's position\n        elif destination and destination == ship.position:\n            if self.stay_on_cell(ship):\n                return True\n    return False\n\n#### exploit option\ndef exploit(self, ship, current_prob):\n    # check lever\n    if current_prob >= self.EPSILON:\n        # if current position has halite, then stay\n        if self.board[ship.position].halite > 0:\n            if self.stay_on_cell(ship):\n                return True\n    return False\n","f2d5356c":"def actions_of_ships(self):\n    \"\"\" Next actions of every ship \"\"\"\n    for ship in self.player.ships:\n\n\n        # Act according to first acceptable tactic\n        if self.endgame(ship):\n            continue\n        if self.build_shipyard(ship):\n            continue\n        if self.safety_convert(ship):\n            continue\n        if self.crash_shipyard(ship):\n            continue\n        if self.unload_halite(ship):\n            continue\n\n        # USE epsilon to choose between explore and exploit\n        current_prob = uniform(0, 1)\n        if self.explore(ship, current_prob):\n            #print(\"EXPLORE\")\n            continue  \n        if self.exploit(ship, current_prob):\n            #print(\"EXPLOIT\")\n            continue\n\n        # Default random action\n        self.move(ship, choice(DIRECTIONS + [None]))","7a7a1506":"Image(\"..\/input\/image2\/Picture2.jpg\")\n","89ce7183":"## Table of Content\n\n* [Credits](#tag1)\n\n\n* [Idea](#tag2)\n\n\n* [Helper functions](#tag3)\n\n\n* [Execution](#tag4)\n\n\n* [Improvement](#tag5)\n\n","4905636a":"<a id='tag1'><\/a>","f4f2abb4":"<a id='tag2'><\/a>","93cd655a":"## Credits to...","2a59eeda":"<a id='tag5'><\/a>","8a8a4dee":"## Idea\n\nLots of algorithms in reinforcement learning are derived from the idea of **balancing between exploration and exploitation**(https:\/\/en.wikipedia.org\/wiki\/Multi-armed_bandit). In this game, there are advantages and distadvantages of both strategies:\n\n* Exploration: the ship can look up the surrounding area and find the cells with larger number of halites, but it costs time to travel to the desired area, also it risks getting collision with other ships\n* Exploitation: the ship choose to either stay at the current position to mine or move a little bit to the surround area, but it might find nothing by just looking around aimlessly\n\nThere are differeny ways to achieve the transition between exploration and exploitation, here I used a probability paramter EPSILON to decide which way to go. It is a bit similar with [epsilon-greedy algorithm](https:\/\/imaddabbura.github.io\/post\/epsilon-greedy-algorithm\/)","51d91fc8":"## Execution","d1f473af":"<a id='tag3'><\/a>","f8c74a98":"* [Swarm Intelligence with SDK](https:\/\/www.kaggle.com\/kwabenantim\/swarm-intelligence-with-sdk) I used the Controller() class except a few changes in assigning the actions for the agents. I like its organized structure and the way it keeps track of cells to avoid collision is very smart. Please make sure to check it out!\n* [Getting started with halite](https:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-halite) I used functions from this notebook as well.","a49a7d5c":"## Improvement\n\n* Compute a reward function: find the future reward and number of steps to get the reward, use it to decide explore or exploit\n\n* Dynamic epsilon: depending on the steps of the game, at the early stage have a higher Epsilon (agents tend to explore more) and the late stage a lower Epsilon (agents tend to exploit).","6eb0018d":"<a id='tag4'><\/a>","3c7f4579":"## Helper function","23154f38":"Again, this is just minor changes in the Controller class in order to call explore() and exploit() function ","f52393f8":"#### Please comment, feedback & upvote if you like it ","58bab2d0":"These functions are all under the Controller() class from [this notebook](https:\/\/www.kaggle.com\/kwabenantim\/swarm-intelligence-with-sdk). So if you want to test the agent you can just plug them in. "}}