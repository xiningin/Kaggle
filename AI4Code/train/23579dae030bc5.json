{"cell_type":{"d29db6f1":"code","a3b24b07":"code","e5ea226e":"code","7fb2b8cf":"code","a469bb2b":"code","cb81dbc7":"code","e948f2ef":"code","fbef524b":"code","23d70715":"code","fd263907":"code","7c242f54":"code","372c721e":"code","14a0bec6":"code","c86109f0":"code","a98b49a5":"code","0969d9a1":"code","323b8293":"code","e1aa53bd":"code","6217fc49":"code","8d14c027":"markdown","b64fbb0e":"markdown","d7b63969":"markdown","bf060e3a":"markdown","930a73b1":"markdown","4af8608f":"markdown","ee24e264":"markdown","b4b83301":"markdown","d25baa69":"markdown","b86dabe0":"markdown","2536afcd":"markdown"},"source":{"d29db6f1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\nimport tensorflow as tf\nfrom keras.datasets import cifar10\nimport numpy as np\nimport pandas as pd \n","a3b24b07":"# loading dateset\n(x_train, y_train),(x_test,y_test) = cifar10.load_data() ","e5ea226e":"# Checking loaded data \nprint('Total number of Images in the Dataset:', len(x_train) + len(x_test))\nprint('Number of train images:', len(x_train))\nprint('Number of test images:', len(x_test))\nprint('Shape of training dataset:',x_train.shape)\nprint('Shape of testing dataset:',x_test.shape)\n      ","7fb2b8cf":"# This piece of code shows a random images and labels for given set of inputs \n\ndef showImages(num_row,num_col,X,Y):\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n\n    from sklearn.utils import shuffle\n    (X_rand, Y_rand) = shuffle(X, Y)\n    \n    fig, axes = plt.subplots(num_row,num_col,figsize = (12,12))\n    axes = axes.ravel()\n    for i in range(0, num_row*num_col):\n        axes[i].imshow(X_rand[i])\n        axes[i].set_title(\"{}\".format(labels[Y_rand.item(i)]))\n        axes[i].axis('off')\n        plt.subplots_adjust(wspace =1)\n        \n    return\n    ","a469bb2b":"labels = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']","cb81dbc7":"num_row = 10\nnum_col = 10\nshowImages(num_row,num_col,X =x_train,Y = y_train)\n","e948f2ef":"# Data visulization with seaborn  \n# class count in train and test data\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\nfigure, axis = plt.subplots( 1, 2 , figsize = (18,6))\nsns.countplot(y_train.ravel(),ax = axis[0])\naxis[0].set_title('Distribution of training data')\naxis[0].set_xlabel('Classes')\n# Count plot for testing set\nsns.countplot(y_test.ravel(), ax=axis[1])\naxis[1].set_title('Distribution of Testing data')\naxis[1].set_xlabel('Classes')\nplt.show()","fbef524b":"x_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train = x_train\/ 255\nx_test = x_test\/255\n","23d70715":"#keras.utils.to_cotegorical(y, num_of_classes) convert the label \n#data into (m, num_of class) array from (m, 1) input \nimport keras\n\ny_train_one_hot = keras.utils.to_categorical(y_train, 10) #as classes = 10\ny_test_one_hot = keras.utils.to_categorical(y_test, 10)","fd263907":"print('The one hot label is: ', y_train_one_hot[1])\nprint(y_train_one_hot.shape)","7c242f54":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D","372c721e":"#Building model computational graph\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3), activation = 'relu', padding = 'same', input_shape = (32,32,3)))\nmodel.add(Conv2D(32, (3,3), activation = 'relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size = (2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3,3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(64, (3,3), activation = 'relu', padding = 'same'))\nmodel.add(MaxPooling2D(pool_size = (2,2),strides=(2,2)))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.8))\nmodel.add(Dense(10, activation = 'softmax'))\n","14a0bec6":"#Description about parameters and layers\nmodel.summary()","c86109f0":"# Flow chart of the model \n\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\n\nplot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","a98b49a5":"#compiling model with loss, opt, metrics\nloss = 'categorical_crossentropy'\nopt = tf.keras.optimizers.Adam(learning_rate=0.0009,beta_1=0.9, beta_2=0.999,epsilon=1e-07)\nmetrics = ['accuracy']\n\nmodel.compile(loss = loss, optimizer = opt, metrics = metrics)","0969d9a1":"# fitting the model for training dataset\nhist = model.fit(x_train, y_train_one_hot, batch_size = 64 , epochs = 100, validation_split = 0.2)\n","323b8293":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Val'], loc='upper right')\nplt.show()\n","e1aa53bd":"plt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Val'], loc='lower right')\nplt.show()","6217fc49":"model.evaluate(x_test, y_test_one_hot)[1]","8d14c027":"## Loading and Preprocessing data: ","b64fbb0e":"Above figure gives the details of the architecure we are building here. Input image is of (32 x 32 x 3) and output is a (1,10) array for single image. Network consts of two blocks of 2 conv_layers followed by maxPool_layer, and dropout_layer. After, that ouput is flattened out and passed through dropout layer followed by fully connected layer with sigmoid activation. Relu activation is used in all convlayers except in the last output layer. let's began the coding with importing libraries required.\n","d7b63969":"#### Preprocessing data:\nNow we have to prepare the data for fiting into the convoultional neural network. First step is to convert the data's data type to float32 and second have to normailize it by dividing pixel value of 255. later,implement one hot encoding to y labels to get a (m, class) array. m - is number of images ","bf060e3a":"All right! Both the training and testing sets are ready for preprocessing. \nBefore procceding furthur lets have a look at images from traing set. \nThis image shows various classes in the dataset.\n\n![1_6qJdPhPfO0ag_45PT4i5SQ.png](attachment:1_6qJdPhPfO0ag_45PT4i5SQ.png)\n","930a73b1":"![cnn.png](attachment:cnn.png)","4af8608f":"### Training The Model\n\n","ee24e264":"## Building Vanila CNN architecure ","b4b83301":"# Image classification with Vanilla CNN architecture\nIn this nothbook, an attempt was made to build an  image classifer with classic vanilla CNN architectue on standard CIFAR-10 dataset. Tensorflow and keras libraries were used to construct the model and traied model with a kaggle gpu for rapid training. \n## Introduction:\nThe CIFAR-10 dataset contains 60,000 color images of 32 x 32 pixels in 3 channels divided into 10 classes. Each class contains 6,000 images. The training set contains 50,000 images, while the test sets provides 10,000 images.This is a classification problem with 10 classes(muti-label    classification). We can take a view on this image for more comprehension of the dataset.\n\nThis image taken from the CIFAR repository.\n(https:\/\/www.cs.toronto.edu\/~kriz\/cifar.html). I have loaded this dataset from keras datasets for this classification problem.","d25baa69":"Sneak peaking into the traing set with this piece of code given below. ","b86dabe0":"With above piece of code all the required libraries were imported for dataset loading and preprocessing.","2536afcd":"In this dataset, total 10 classes are presents whose labels are taken as an array. This categoical classes are maped with numeric label in the dataset. labels array is going tobe useful for mapping y labels with there classes."}}