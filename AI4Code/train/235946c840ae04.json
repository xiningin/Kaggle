{"cell_type":{"48347d4f":"code","761c48e9":"code","0d1f9855":"code","c545598a":"code","5d71b67e":"code","364ee315":"code","97976349":"code","8176102b":"code","292162dc":"code","c5331c2a":"code","675257e8":"code","6e3982c8":"code","a2addf8b":"code","ad9c835f":"code","7774e8e0":"code","1f8bf8cd":"code","bb8dbf30":"code","94b1c4ea":"code","928c5013":"code","d9aee4fe":"code","345689d8":"code","ba161cfe":"code","a174439f":"code","d3a2a6ad":"code","d7e1e541":"code","cae6482e":"code","048e7a57":"code","cf63cdd4":"code","6d041283":"markdown","1d3ac7fd":"markdown","d7cd0b02":"markdown","2ff26756":"markdown","bc687ae1":"markdown","e2600751":"markdown","0d7dfd41":"markdown"},"source":{"48347d4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","761c48e9":"dataset = pd.read_csv('\/kaggle\/input\/natural-gas-price-forecasting\/daily_csv.csv')","0d1f9855":"dataset.head()","c545598a":"dataset.info()","5d71b67e":"dataset['year'] = pd.DatetimeIndex(dataset['Date']).year\ndataset['month'] = pd.DatetimeIndex(dataset['Date']).month\ndataset['day'] = pd.DatetimeIndex(dataset['Date']).day","364ee315":"dataset","97976349":"dataset.drop('Date', axis=1, inplace=True)","8176102b":"dataset.isnull().any()","292162dc":"dataset.isnull().sum()","c5331c2a":"dataset['Price'].fillna(dataset['Price'].mean(),inplace=True)","675257e8":"dataset.isnull().any()","6e3982c8":"#import the matplotlib library\nimport matplotlib.pyplot as plt\n#plot size\nfig=plt.figure(figsize=(5,5))\nplt.scatter(dataset['day'],dataset['Price'],color='blue')\n#Set the label for the x-axis.\nplt.xlabel('Day')\n#Set the label for the y-axis.\nplt.ylabel('Price')\n#Set a title for the axes.\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF DAYS OF A MONTH')\n#Place a legend on the axes.\nplt.legend()","a2addf8b":"import matplotlib.pyplot as plt\nplt.bar(dataset['month'],dataset['Price'],color='green')\nplt.xlabel('Month')\nplt.ylabel('Price')\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF MONTHS OF A YEAR')\nplt.legend()","ad9c835f":"import seaborn as sns\nsns.lineplot(x='year',y='Price',data=dataset,color='red')","7774e8e0":"import seaborn as sns\nsns.lineplot(x='month',y='Price',data=dataset,color='red')","1f8bf8cd":"import seaborn as sns\nsns.lineplot(x='day',y='Price',data=dataset,color='red')","bb8dbf30":"fig=plt.figure(figsize=(8,4))\nplt.scatter(dataset['year'],dataset['Price'],color='purple')\nplt.xlabel('Month')\nplt.ylabel('Price')\nplt.title('PRICE OF NATURAL GAS ON THE BASIS OF MONTHS OF A YEAR')\nplt.legend()","94b1c4ea":"import seaborn as sns\nsns.pairplot(dataset)\nplt.show()","928c5013":"x=dataset.iloc[:,1:4].values #inputs\ny=dataset.iloc[:,0:1].values #output price only","d9aee4fe":"x","345689d8":"y","ba161cfe":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","a174439f":"x_train.shape","d3a2a6ad":"y_train.shape","d7e1e541":"#import decision tree regressor\nfrom sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor()\n#fitting the model or training the model\ndtr.fit(x_train,y_train)","cae6482e":"y_pred=dtr.predict(x_test)\ny_pred","048e7a57":"from sklearn.metrics import r2_score\naccuracy=r2_score(y_test,y_pred)\naccuracy","cf63cdd4":"y_p=dtr.predict([[1997,1,7]])\ny_p","6d041283":"# **Handling Missing values**","1d3ac7fd":"Split data into train and test","d7cd0b02":"# Droping Columns","2ff26756":"Now, Split the dataset into X(independent variable) and Y(dependent variable)","bc687ae1":"# Data Visualization","e2600751":"# Reading dataset","0d7dfd41":"# Checking for null values"}}