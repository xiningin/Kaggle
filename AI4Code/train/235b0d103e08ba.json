{"cell_type":{"d0ed8f06":"code","ae1a9375":"code","4a2d4b92":"code","b944c86a":"code","51bfd8b7":"code","13967a78":"code","d6b43a6a":"code","b91ea365":"code","7a73c14d":"code","860c9cf3":"code","97d19592":"markdown","f19226d9":"markdown","24faffd1":"markdown","d2077018":"markdown","5771b87c":"markdown"},"source":{"d0ed8f06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n#other libraries\nimport warnings\nimport itertools\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'\n\n# Any results you write to the current directory are saved as output.","ae1a9375":"df = pd.read_csv(\"..\/input\/wheat_200910-201803.csv\")\ndf.dtypes\ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month\ndf.head(5)","4a2d4b92":"#Time series data\ndfts = df[['date','close']]\ndfts['date']=pd.to_datetime(dfts['date'])\ndfts=dfts.set_index('date')\ndfts = dfts['close'].resample('MS').mean()\ndfts['2017':]","b944c86a":"#Visualizing \ndfts.plot(figsize=(15, 6))\nplt.show()","51bfd8b7":"#Time Series Decomposition \nfrom pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\ndecomposition = sm.tsa.seasonal_decompose(dfts, model='additive')\nfig = decomposition.plot()\nplt.show()","13967a78":"#ARIMA - checking based on AIC\n\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(dfts,\n                                        order=param,\n                                        seasonal_order=param_seasonal,\n                                        enforce_stationarity=False,\n                                        enforce_invertibility=False)\n\n            results = mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue","d6b43a6a":"#Fitting ARIMA Model\nmod = sm.tsa.statespace.SARIMAX(dfts,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 0, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","b91ea365":"#Model diagnostics\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","7a73c14d":"#Real vs Forecast\npred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = dfts['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","860c9cf3":"#MSE\ny_forecasted = pred.predicted_mean\ny_truth = dfts['2017-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","97d19592":"**The smaller the MSE, the closer we are to finding the line of best fit**","f19226d9":"**The plot above clearly shows that wheat prices are unstable, along with its obvious seasonality.**","24faffd1":"**model residuals are near normally distributed**","d2077018":"**SARIMAX(0, 1, 1)x(0, 1, 1, 12)12 yields the lowest AIC value of 796. Therefore we should consider this to be optimal option.**","5771b87c":"In This Notebook we will try to predict the closing price of Wheat Commodity!, using ARIMA Model. \n\nRefrence blogpost used for this notebook -> https:\/\/towardsdatascience.com\/an-end-to-end-project-on-time-series-analysis-and-forecasting-with-python-4835e6bf050b .Thanks Susan for such a wonderful blog post."}}