{"cell_type":{"dc42e57c":"code","aed237cc":"code","f56e6a11":"code","b778bdb1":"code","915b757e":"code","4172647d":"code","95e43e3c":"code","fe783475":"code","769b82c5":"code","1d5d075f":"code","c94830c4":"code","7fa66072":"code","1bd52da9":"code","45dc4803":"code","71c3d7c4":"code","eeebced3":"code","c553e754":"code","d0eb4b52":"code","2fde3a96":"code","efc8071f":"code","57428ad6":"code","28232b0b":"code","7976b170":"markdown","a8ba3a36":"markdown","7a3222b1":"markdown","9bdd0104":"markdown","075e6c3a":"markdown"},"source":{"dc42e57c":"import glob\nimport random\nimport base64\nimport pandas as pd\n\nfrom PIL import Image\nfrom io import BytesIO\nfrom IPython.display import HTML","aed237cc":"train_image_dir = '..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/'","f56e6a11":"pd.set_option('display.max_colwidth', -1)\n\ndef get_thumbnail(path):\n    i = Image.open(path)\n    i.thumbnail(size=(150, 150), resample=Image.LANCZOS)\n#     i.thumbnail(size=(150, 150))\n    return i\n\ndef image_base64(im):\n    if isinstance(im, str):\n#         print('Inside isinstance')\n        im = get_thumbnail(im)\n#         print('got im')\n    with BytesIO() as buffer:\n#         print('inside with block, and saving the file')\n        im.save(buffer, 'jpeg')\n#         print(base64.b64encode(buffer.getvalue()).decode())\n        return base64.b64encode(buffer.getvalue()).decode()\n\ndef image_formatter(im):\n    return f'<img src=\"data:image\/jpeg;base64,{image_base64(im)}\">'","b778bdb1":"train_df = pd.read_csv('..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train.csv')","915b757e":"df = train_df.sample(20)\ndf.head()","4172647d":"img = Image.open('..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/4658f64184.jpg')\nimg","95e43e3c":"print('im object: ',  img)\nprint('format   : ' , img.format)\nprint('size     : ' , img.size) \nprint('mode     : ' , img.mode)\nprint('filename : ' , img.filename) \nprint('width    : ' , img.width) \nprint('height   : ' , img.height) \nprint('info     : ' , img.info)","fe783475":"# df.file.map(lambda f: get_thumbnail(f))","769b82c5":"# image_formatter('<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=128x96 at 0x7F105CC9D2D0>')\n# image_formatter('..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/7708302918.jpg')\n# image_base64('..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/7708302918.jpg')\n\n# import io\n\n\n\n# with open(\"..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/7708302918.jpg\", \"rb\") as img_file:\n#     my_string = base64.b64encode(img_file.read())\n    \n#     my_string2 = base64.b64encode(img_file.read()).decode()\n    \n#     stream_str = io.BytesIO(my_string)\n# #     print(stream_str.getvalue())\n    \n# #     im = get_thumbnail(img_file)\n# #     im.save(buffer, 'jpg')\n#     my_string2 = base64.b64encode(stream_str.getvalue()).decode()\n#     my_string3 = f'<img src=\"data:image\/jpg;base64,{my_string2}\">'\n    \n# print('**'*30)\n# print(my_string)\n# print('**'*30)\n# print(my_string2)\n# print('**'*30)\n# print(my_string3)","1d5d075f":"df['file'] = df.image_id.map(lambda id: f'..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/{id}.jpg')\ndf['image'] = df.file.map(lambda f: get_thumbnail(f)) \ndf.head()","c94830c4":"df","7fa66072":"img = df['image'][:1]\nimg\n# img.show()","1bd52da9":"# displaying PIL.Image objects embedded in dataframe\nHTML(df[['breed', 'image']].to_html(formatters={'image': image_formatter}, escape=False))","45dc4803":"# display images specified by path\nHTML(df[['breed', 'file']].to_html(formatters={'file': image_formatter}, escape=False))","71c3d7c4":"import random, os\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\n# Image manipulation.\nimport PIL.Image\nfrom IPython.display import display","eeebced3":"train_image_dir = '..\/input\/hackerearth-deep-learning-identify-the-snake-breed\/dataset\/train\/'  ","c553e754":"image1 = train_image_dir + '0002023e6f.jpg'\nimage1","d0eb4b52":"img = mpimg.imread(image1)\nimgplot = plt.imshow(img)\nplt.show()","2fde3a96":"# show some random images\nplt.figure(figsize=(12,12))\n\nfor k in range(28):\n    randomImg = random.choice(\n    [\n        x for x in os.listdir(train_image_dir)\n        if os.path.isfile(os.path.join(train_image_dir, x))\n    ]\n)\n    \n    imageFilename = train_image_dir + str(randomImg) \n    \n    plt.subplot(4,7,k+1); \n    \n    plt.imshow(mpimg.imread(imageFilename), cmap='gray')\n\n    plt.axis('off')","efc8071f":"import cv2 \n\nnew_width = 28\nnew_height = 28","57428ad6":"def append_ext(fn):\n    return fn+\".jpg\"\n\ntrain_df[\"image_id\"]=train_df[\"image_id\"].apply(append_ext)\ntrain_df.head()","28232b0b":"fig = plt.figure(figsize = (20, 15))\nfor idx, img_name in enumerate(train_df[train_df['breed'] == 'thamnophis-sirtalis']['image_id'][:12]):\n    y = fig.add_subplot(3, 4, idx+1)\n    img = cv2.imread(os.path.join(train_image_dir,img_name))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n#     y.set_xlabel(img_name)\n#     y.set_xlabel(train_df.loc[train_df['image_id'] == img_name]['breed'])\n    y.imshow(img)\n\nplt.show()","7976b170":"# 2. Images from Folder - One Image","a8ba3a36":"# 4. Random images based on csv file.","7a3222b1":"# 3. Images from Folder - Random x Images","9bdd0104":"# 1. View in HTML format using csv file","075e6c3a":"There are various ways to visulaize the images, and various tool such as PIL; CV2; Matplotlibl HTML etc.\n\nWill see few of them here. "}}