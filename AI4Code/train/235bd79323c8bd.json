{"cell_type":{"c01d2aa8":"code","027bee38":"code","d680257b":"code","7d081672":"code","78746091":"code","35eecd07":"code","7ff36141":"code","35c2e359":"code","a958b2f9":"code","d7cdb203":"code","86f5c78d":"code","cc6c5900":"code","91be49be":"code","5fe7bc39":"code","e1674966":"code","517b1c40":"code","481cfeef":"code","d79a547b":"code","85829541":"code","7fbabd65":"code","860b4f13":"code","e2068826":"code","67baf77a":"code","d489b808":"code","d53d7153":"code","956b28c2":"code","7ad80030":"code","2e6f149f":"code","ef954620":"code","8526f963":"code","7061e90e":"code","460a3ff7":"code","c8c1511f":"code","38217b48":"code","3b885208":"code","98b220fb":"code","ebc704e3":"code","930abe79":"code","03494d40":"code","28df52a9":"code","ab15c9a7":"code","e60038ea":"code","f8e39e90":"code","b2543ded":"code","caff642a":"code","3f0c2e6d":"code","2743dd17":"code","4fe7f344":"code","ee5b8a75":"code","9c19aeca":"code","6dfcea54":"code","4cd6c070":"code","e3a30943":"code","4547627f":"code","5c2f7917":"code","acfb5274":"code","a2f2d782":"code","79ce05b1":"code","a79b3a92":"code","5d5aed01":"code","d357a928":"code","8a9ed942":"code","9388504d":"code","a6828a57":"code","6290d2d9":"code","e188e716":"code","34c8fc85":"code","f484b045":"code","dc245c54":"code","fcedce3b":"code","4540882b":"code","b5dc1aaf":"code","875227fe":"code","6c4aaf15":"code","bd0b5fef":"code","e04744aa":"code","83b9f47c":"code","c33bc9aa":"code","f259dc10":"code","411a1ced":"code","0f69b68c":"markdown","85bc5609":"markdown","c436152a":"markdown","c54f5761":"markdown","3b9a09f1":"markdown","60cef7c8":"markdown","bb0fdedf":"markdown","596451dd":"markdown","84a2e44d":"markdown","5b290819":"markdown","d815a4c9":"markdown","f9cc2eaa":"markdown","a4ace980":"markdown","5373b35b":"markdown","1d558118":"markdown","2b2a3e54":"markdown","5336477b":"markdown"},"source":{"c01d2aa8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","027bee38":"pd.pandas.set_option('display.max_columns', None)\n\ndata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata.head()","d680257b":"data.shape","7d081672":"data.isnull().sum()","78746091":"data = data.drop(['Id','Alley','FireplaceQu', 'PoolQC', 'Fence','MiscFeature' ], axis=1)","35eecd07":"missNum = [f for f in data if data[f].isnull().sum()>0 and data[f].dtype!='O']","7ff36141":"missNum_mean = data[missNum].mean()","35c2e359":"missNum_mean","a958b2f9":"data[missNum] = data[missNum].fillna(missNum_mean)","d7cdb203":"data","86f5c78d":"missCat = [f for f in data if data[f].isnull().sum()>0 and data[f].dtype == 'O' ]","cc6c5900":"missCat","91be49be":"missCat_mode = data[missCat].mode().sum()","5fe7bc39":"missCat_mode","e1674966":"data[missCat] = data[missCat].fillna(missCat_mode)","517b1c40":"data[missCat].isnull().sum()","481cfeef":"plt.figure(figsize=(10,8))\nsns.heatmap(data.isnull())","d79a547b":"numerical_r = [f for f in data if data[f].dtype !='O']","85829541":"for f in numerical_r:\n    dataNr = data.copy()\n    plt.scatter(dataNr[f], data['SalePrice'])\n    plt.xlabel(f)\n    plt.show()\n    ","7fbabd65":"data.describe()","860b4f13":"categorical =[f for f in data if data[f].dtype == 'O']","e2068826":"data[categorical].shape","67baf77a":"for f in categorical:\n    dataCat = data.copy()\n    dataCat.groupby(f)['SalePrice'].mean().plot.bar()\n    plt.show()","d489b808":"sale_price = data['SalePrice']","d53d7153":"data = data.drop(['SalePrice'], axis=1)","956b28c2":"numerical = [f for f in data if data[f].dtype !='O']","7ad80030":"numerical","2e6f149f":"year = [f for f in numerical if 'Year' in f or 'Yr' in f]\ndata[year].head()","ef954620":"data = data.drop(['YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold'], axis=1)","8526f963":"numerical = [f for f in data if data[f].dtype !='O']","7061e90e":"for f in numerical:\n    dataC = data.copy()\n    data[f].hist()\n    plt.xlabel(f)\n    plt.show()","460a3ff7":"dataT = np.log(data[numerical]+1)","c8c1511f":"dataT.describe()","38217b48":"for f in numerical:\n    dataC = dataT.copy()\n    dataC[f].hist()\n    plt.xlabel(f)\n    plt.show()","3b885208":"maxTh = dataT.quantile(0.95)","98b220fb":"maxTh[1:32]","ebc704e3":"minTh = dataT.quantile(0.05)","930abe79":"minTh[1:32]","03494d40":"df2  = dataT[(dataT<maxTh) & (dataT>minTh)]","28df52a9":"df2","ab15c9a7":"df2.isnull().sum()","e60038ea":"df3 = df2.drop(['BsmtFinSF2', '2ndFlrSF', 'LowQualFinSF', 'BsmtFullBath', \n               'BsmtHalfBath', 'FullBath', 'HalfBath', 'KitchenAbvGr', 'Fireplaces',\n               'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n               'MiscVal'], axis=1)","f8e39e90":"df3.isnull().sum()","b2543ded":"df3 = df3.drop(['MasVnrArea', 'BedroomAbvGr'], axis=1)","caff642a":"numMissN = [f for f in df3 if df3[f].isnull().sum()>1]","3f0c2e6d":"numMissN = df3[numMissN].mean()","2743dd17":"numMissN","4fe7f344":"df4 = df3.fillna(numMissN)","ee5b8a75":"df4.isnull().sum()\ndf4","9c19aeca":"for f in df4:\n    dataL = df4.copy()\n    dataL[f].hist()\n    plt.show()","6dfcea54":"df_cat = data[categorical]","4cd6c070":"df6 = pd.concat([df_cat, df4], axis=1)","e3a30943":"df6.shape","4547627f":"df6","5c2f7917":"cat_features = [f for f in df6 if df6[f].dtype == 'O']\ncat_features","acfb5274":"from sklearn.preprocessing import LabelEncoder","a2f2d782":"df7= df6[cat_features].apply(LabelEncoder().fit_transform)","79ce05b1":"df7","a79b3a92":"df8 = pd.concat([df7, df4], axis=1)","5d5aed01":"df8","d357a928":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Ridge","8a9ed942":"#independent features\n\nX = df8","9388504d":"X","a6828a57":"#dependent feature\n\ny = sale_price","6290d2d9":"y","e188e716":"from sklearn.model_selection import train_test_split","34c8fc85":"xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3)","f484b045":"xtrain.shape","dc245c54":"ytrain.shape","fcedce3b":"model1 = LinearRegression()\nmodel1.fit(xtrain, ytrain)","4540882b":"print(\"Train Accuracy:\",model1.score(xtrain, ytrain))\nprint(\"Test Accuracy:\",model1.score(xtest, ytest))","b5dc1aaf":"model1.predict([[3, 1,3,3,0,4,0,5,2,2,0,5,1,1,12,13,1,2,4,2,2,3,3,2,5,1,0,1,4,2,6,1,1,4,4,2,8,4,4.110874,4.189655,9.042040,2.079442,1.791759,6.561031,5.017280,6.753438,6.753438,7.444833,2.197225,1.098612,6.308098,1.934685]])","875227fe":"model2 = RandomForestRegressor(n_estimators=250)","6c4aaf15":"model2.fit(xtrain, ytrain)","bd0b5fef":"print(\"Train Accuracy:\",model2.score(xtrain, ytrain))\nprint(\"Test Accuracy:\",model2.score(xtest, ytest))","e04744aa":"model2.predict([[3, 1,3,3,0,4,0,5,2,2,0,5,1,1,12,13,1,2,4,2,2,3,3,2,5,1,0,1,4,2,6,1,1,4,4,2,8,4,4.110874,4.189655,9.042040,2.079442,1.791759,6.561031,5.017280,6.753438,6.753438,7.444833,2.197225,1.098612,6.308098,1.934685]])","83b9f47c":"model3 = Ridge(max_iter=100)\nmodel3.fit(xtrain, ytrain)","c33bc9aa":"print(\"Train Accuracy:\",model3.score(xtrain, ytrain))\nprint(\"Test Accuracy:\",model3.score(xtest, ytest))","f259dc10":"model3.predict([[3, 1,3,3,0,4,0,5,2,2,0,5,1,1,12,13,1,2,4,2,2,3,3,2,5,1,0,1,4,2,6,1,1,4,4,2,8,4,4.110874,4.189655,9.042040,2.079442,1.791759,6.561031,5.017280,6.753438,6.753438,7.444833,2.197225,1.098612,6.308098,1.934685]])","411a1ced":"plt.figure(figsize=(12,8))\nsns.heatmap(df8.corr())","0f69b68c":"## Categorical Features","85bc5609":"## Categorical Features","c436152a":"# - Ridge Regression","c54f5761":"# Concatinate Categorical and Numerical Features","3b9a09f1":"# Handling Missing Values","60cef7c8":"# House Price Prediction (Regression)  ","bb0fdedf":"## Numeric Features","596451dd":"# Encoding Categorical Features","84a2e44d":"# - Linear Regression","5b290819":"## Separating Year Features","d815a4c9":"# Bulid Model\n\n### - Linear Regression\n### - Random Forest Regressor \n### - Ridge Regressor","f9cc2eaa":"## Detecting and Removing Outliers","a4ace980":"# Feature Engineering","5373b35b":"## Numerical Features","1d558118":"# - Random Forest Regressor","2b2a3e54":"## Splittind into train and test data","5336477b":"# Distribution of Numerical Features After removing Outliers"}}