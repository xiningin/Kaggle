{"cell_type":{"f52d15f0":"code","477e5dc4":"code","6f147cda":"code","3892b4c1":"code","22968047":"code","fbeadd57":"code","3a5d6dc2":"code","5ef13567":"code","69cebeb2":"code","aef57849":"code","d9f5c58d":"code","6654a566":"code","942cef48":"code","1c89fe2f":"code","829d2a1d":"code","aa4ae5b5":"code","d12caeaf":"code","ba206e07":"code","1c521be2":"code","3c949259":"code","9a08cec5":"code","ce56a5f2":"code","88833015":"code","657baa96":"code","16e4f5db":"code","008432cb":"code","e81b8090":"code","1d8dc18a":"code","f19fc5f2":"code","82cd7b62":"code","46be6e5c":"code","b69ac74f":"code","f17a440b":"code","a91cf368":"code","d424a1de":"code","1273b451":"code","52991d58":"code","24f0c732":"code","025c1407":"code","3f827ab0":"code","99f5289c":"code","3e7b1737":"markdown","c04fc5d9":"markdown","99fa874e":"markdown","f0ce2911":"markdown","5099d000":"markdown","ec5c6455":"markdown","82b3c57e":"markdown","65c175f8":"markdown","f01e70ec":"markdown","5d60c5d3":"markdown","817260f3":"markdown","64abee2e":"markdown","ee78f170":"markdown","def6be9b":"markdown","5511043b":"markdown","a773df08":"markdown","53a4db95":"markdown","12feb94a":"markdown","8e2fa4a9":"markdown","fa6a2f22":"markdown","d656e41f":"markdown","323542a7":"markdown","6eafaa75":"markdown","fa3c1470":"markdown","ff62a1cb":"markdown","9cd68b40":"markdown","3af37ef9":"markdown","634e1ee2":"markdown","253b9531":"markdown","2b834b30":"markdown","bf1632c3":"markdown","502ac612":"markdown","8c6a7e3a":"markdown","faadca43":"markdown","12857938":"markdown","e5dbc651":"markdown","b180e203":"markdown","00a12d1a":"markdown","1212c0bf":"markdown","b768c233":"markdown","702d47ea":"markdown","435d94e6":"markdown","e09bc5f1":"markdown","043ef231":"markdown"},"source":{"f52d15f0":"#import de bibliotecas\nimport  numpy as np\nimport pandas as pd\n\n#graficos\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#treino\/teste\nfrom sklearn.model_selection import train_test_split\n\n#modelos\nfrom sklearn.linear_model import LogisticRegression\n\n#avaliar o modelo\nfrom sklearn import metrics\n","477e5dc4":"#carregando os dados\ndados = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","6f147cda":"#visualizando as primeiras linhas\ndados.head()","3892b4c1":"#verificando o tamanho\ndados.shape","22968047":"#verificando as colunas\ndados.columns","fbeadd57":"#verificando o tipo de dados\ndados.dtypes","3a5d6dc2":"#veficando os dados estatisticos da base\ndados.describe(include='all').T.round(2)","5ef13567":"#verificando se temos dados nulos\ndados.isna().sum()","69cebeb2":"#outra forma de ver as informa\u00e7\u00f5es\ndados.info()","aef57849":"#verificando a corre\u00e7\u00e3o em forma de tabela\ndados.corr()","d9f5c58d":"#verificando a correla\u00e7\u00e3o entre as vari\u00e1veis de forma gr\u00e1fica \/ visual\nplt.figure(figsize=(15,10))\nmascara=np.triu(np.ones(dados.corr().shape)).astype(np.bool)\nsns.heatmap(dados.corr().round(2), annot=True, cmap=\"BuPu\", mask = mascara)\nplt.show()","6654a566":"#conhecendo a variabilidade das variaveis\ndados.nunique()","942cef48":"#criando uma fun\u00e7\u00e3o para gerar os graficos\ndef f_grafico(df, coluna, target):\n    #df\n    dados=df\n    \n    #target\n    #target='Outcome'\n    target=target\n    \n    #coluna\n    #coluna='Pregnancies'\n    coluna=coluna\n\n    #nome da analise\n    analise=dados[coluna]\n    #cria os graficos\n    f, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={\"height_ratios\": (.20, .80)}, figsize=(15,5))\n    #titulo do grafico\n    f.suptitle(pd.DataFrame(analise).columns[0])\n    #faz o grafico\n    sns.boxplot(analise, ax=ax_box)\n    sns.distplot(analise, ax=ax_hist, bins=3, color=\"g\" )\n    #remove o nome do grafico no boxplot\n    ax_box.set(xlabel='')\n    #exibe o grafico\n    plt.show()\n    #exibe tabela com os dados\n    #pd.DataFrame(analise).describe().round(2).T\n\n    plt.figure(figsize=(15, 10))\n    #plt.title('Pregnancies', fontsize=20)\n    #plt.title(pd.DataFrame(analise).columns[0], fontsize=20)\n    #sns.distplot(dados[\"Pregnancies\"]) #,  bins=20\n    sns.distplot(analise)\n    plt.show()\n    #dados[[\"Pregnancies\"]].describe().round(2).T\n\n    g = sns.FacetGrid(dados, col=target,height=(5))\n    g = g.map(sns.distplot, coluna, kde=False, color='c')\n\n    #exibe tabela com os dados\n    print(pd.DataFrame(analise).describe().round(2).T)","1c89fe2f":"f_grafico(dados,'Pregnancies','Outcome')","829d2a1d":"f_grafico(dados,'Glucose','Outcome')","aa4ae5b5":"f_grafico(dados,'BloodPressure','Outcome')","d12caeaf":"f_grafico(dados,'SkinThickness','Outcome')","ba206e07":"f_grafico(dados,'Insulin','Outcome')","1c521be2":"f_grafico(dados,'BMI','Outcome')","3c949259":"f_grafico(dados,'DiabetesPedigreeFunction','Outcome')","9a08cec5":"f_grafico(dados,'Age','Outcome')","ce56a5f2":"dados['total']=1\ndados.groupby('Outcome', as_index=False)['total'].count()","88833015":"dados['total']=1\nx=dados.groupby('Outcome', as_index=False)['total'].count()\nx['Outcome'].tolist()","657baa96":"dados['total']=1\nx=dados.groupby('Outcome', as_index=False)['total'].count()\n#x=dados.groupby('Outcome', as_index=False).count()\nlabels = x['Outcome'].tolist()\nsizes = x['total'].tolist()\n\n# Plot\nplt.figure(figsize=(15,5))\nplt.title('Outcome')\nplt.pie(sizes, labels=labels, autopct='%1.0f%%', shadow=False, startangle=15)\nplt.legend(labels, loc=\"best\")\nplt.axis('equal')\nplt.show()","16e4f5db":"dados['total']=1\ndados.groupby(by='Outcome')['total'].count().plot.bar()\nplt.title('Outcome')\nplt.show()\ntemp=dados.groupby('Outcome', as_index=False)['total'].count()\ntemp.rename(columns={'Outcome':'Quantidade'}, inplace=True)\ntemp['Percentual']=temp['total']\/dados.shape[0]*100\ntemp","008432cb":"#Visualizando todos os graficos simultaneamente\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(20, 10))\n\nax.set_facecolor('#fafafa')\n#ax.set(xlim=(-10, 200))\nplt.ylabel('Variaveis')\nplt.title(\"Vis\u00e3o Geral\")\nax = sns.boxplot(data = dados, \n  orient = 'h', \n  palette = 'Set2')","e81b8090":"#definindo o target\ntarget=dados['Outcome']\n\ntarget","1d8dc18a":"explicativas=dados.drop('Outcome', axis=1)\nexplicativas","f19fc5f2":"#separando em treino e teste\nx_treino, x_teste, y_treino, y_teste = train_test_split(explicativas, target, test_size=0.3, random_state=42)","82cd7b62":"#Criando o modelo de regress\u00e3o logistica\nmodelo_log=LogisticRegression(random_state=42, max_iter=400) \n\n#o valore default para o max_iter \u00e9 100, mas para n\u00e3o gerar erro, alteramos para 400.","46be6e5c":"#treinando o modelo\nmodelo_log.fit(x_treino, y_treino)","b69ac74f":"#criando as predi\u00e7\u00f5es\npredict_log=modelo_log.predict(x_teste)","f17a440b":"#criando a matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_teste, predict_log)\ncm","a91cf368":"#desenhando a matrix\nplt.figure(figsize = (10, 6))\nsns.heatmap(cm, annot = True, fmt='1.3g')\nplt.xlabel(\"Valor Real\")\nplt.ylabel(\"Valor Predito\")","d424a1de":"#acuracia\nacuracia = round(metrics.accuracy_score(y_teste, predict_log)*100,2)\nacuracia","1273b451":"fpr_logreg, tpr_logreg, thresholds_logreg = metrics.roc_curve(y_teste, predict_log)\n\nplt.plot(fpr_logreg, tpr_logreg, label = 'ACC = %0.2f' % acuracia, color = 'orange')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.plot([0, 1], [0, 1],'r--')\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve - Receiver Operator Characteristic \\n')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.legend(loc=\"lower right\", fontsize=10)\nplt.grid(True)","52991d58":"precisao = round(metrics.precision_score(y_teste, predict_log)*100,2)\nprecisao","24f0c732":"recall = metrics.recall_score(y_teste, predict_log)\nrecall","025c1407":"average_precision = metrics.average_precision_score(y_teste, predict_log)\ndisp = metrics.plot_precision_recall_curve(modelo_log, x_teste, y_teste)\ndisp.ax_.set_title('2-class Precision-Recall curve: '\n                   'AP={0:0.2f}'.format(average_precision))","3f827ab0":"f1 = metrics.f1_score(y_teste, predict_log)\nf1","99f5289c":"print(metrics.classification_report(y_teste, predict_log))","3e7b1737":"## Conhecendo as vari\u00e1veis, uma de cada vez...","c04fc5d9":"## Infer\u00eancia estat\u00edstica","99fa874e":"## Variabilidade","f0ce2911":"### Age","5099d000":"##### Acuracia\n\nMedida que diz o quanto o nosso modelo consegue acertar com base na nossa amostra(normalmente o teste).\n<br>\nVerdadeiros Positivos + Verdadeiros Negativos \/ TUDO !\n<br>\n<br>\n(TP +TN) \/ (TP + TN + FP +FN)\n<br><br>\n*Accuracy = (True Positives + True Negatives)\/(True Positives + False Positives + False Negatives + True Negatives)*","ec5c6455":"## Visualizando as primeiras linhas","82b3c57e":"## Nulos","65c175f8":"### BloodPressure","f01e70ec":"## Gerando o Modelo","5d60c5d3":"##### Precis\u00e3o\n\nMedida utilizada para indicar o quanto o nosso modelo acertou os valores positivos.\n<br>\n<br>\nTP \/ (TP + FP)\n","817260f3":"### DiabetesPedigreeFunction","64abee2e":"\n\n---\n\n## Import das bibliotecas","ee78f170":"Temos nesta base 768 registros com 9 colunas","def6be9b":"## Treino e Teste","5511043b":"### BMI","a773df08":"# An\u00e1lise Explorat\u00f3ria de dados","53a4db95":"#### Matriz de Confus\u00e3o\n\nTambem conhecida como matrix de erro, permite visualizar a performance de um algoritmo.\n<br>\n* Accuracy : (TP +TN) \/ (TP + TN + FP +FN)\n* Precision : TP \/ (TP + FP)\n* Recall : TP \/ (TP + FN)\n* F1 score : 2 x ((Precision x Recall) \/ (Precision + Recall))\n\n","12feb94a":"## Origem dos dados:\n\n- Context:\n\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n- Content:\n\nThe datasets consists of several medical predictor variables and one target variable, Outcome. Predictor variables includes the number of pregnancies the patient has had, their BMI, insulin level, age, and so on.\n\n- Acknowledgements:\n\nSmith, J.W., Everhart, J.E., Dickson, W.C., Knowler, W.C., & Johannes, R.S. (1988). Using the ADAP learning algorithm to forecast the onset of diabetes mellitus. In Proceedings of the Symposium on Computer Applications and Medical Care (pp. 261--265). IEEE Computer Society Press.\n\n- Link original:\nhttps:\/\/www.kaggle.com\/uciml\/pima-indians-diabetes-database","8e2fa4a9":"## Tipos de dados","fa6a2f22":"## Correla\u00e7\u00e3o","d656e41f":"### Treinando","323542a7":"## Dicion\u00e1rio de dados:\n\n- Pregnancies ( Number of times pregnant )\n- Glucose ( Plasma glucose concentration a 2 hours in an oral glucose tolerance test)\n- BloodPressure (Diastolic blood pressure (mm Hg))\n- SkinThickness (Triceps skin fold thickness (mm))\n- Insulin (2-Hour serum insulin (mu U\/ml))\n- BMI (Body mass index (weight in kg\/(height in m)^2))\n- DiabetesPedigreeFunction (Diabetes pedigree function)\n- Age (Age (years))\n- Outcome (Class variable (0 or 1) 268 of 768 are 1, the others are 0)","6eafaa75":"###### ROC\nRepresenta\u00e7\u00e3o grafica da acuracia do modelo","fa3c1470":"# MODELO PREDITIVO - DIABETES","ff62a1cb":"## Objetivo:\n\nEstudo de caso da base de dados de diabetes para criar um modelo preditivo, afim de definir qual a probabilidade de ter ou n\u00e3o diabetes.","9cd68b40":"## Colunas","3af37ef9":"## Informa\u00e7\u00f5es da base","634e1ee2":"### Vis\u00e3o Geral","253b9531":"## Explicativas","2b834b30":"# Criando a Baseline","bf1632c3":"### Predizendo","502ac612":"##### Classification Report\n\nTabela com as m\u00e9tricas","8c6a7e3a":"##### Recall\n\nMedida utilizada para indicar o quanto no modelo acertou dentre os valores positivos\n<br>\n<br>\nTP \/ (TP + FN)","faadca43":"## Verificando o tamanho","12857938":"### Glucose","e5dbc651":"##### F1 score\n\nMedida utilizada para calcular a m\u00e9dia ponderada do modelo, buscando obter o valor 1 como valor \u00f3timo.\n<br>\n<br>\n2 x ((Precision x Recall) \/ (Precision + Recall))","b180e203":"### Outcome","00a12d1a":"### SkinThickness","1212c0bf":"## Target","b768c233":"# Andr\u00e9 Ricardo\n*03-09-2020*\n\n[www.andrericardo.com.br](https:\/\/www.andrericardo.com.br)","702d47ea":"### Pregnancies","435d94e6":"### Avaliando o modelo","e09bc5f1":"### Insulin","043ef231":"## Conhecendo nossa base"}}