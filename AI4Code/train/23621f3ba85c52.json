{"cell_type":{"e4505e4a":"code","f84cbea3":"code","220584eb":"code","3ddbda55":"code","0307551b":"code","2606d39a":"code","851d7991":"code","92e3c15c":"code","6a04c2d1":"code","e787b52c":"code","3d6a0a86":"code","69963005":"code","432bf4d0":"code","c0479920":"code","bba6e60e":"code","0e0261b1":"code","576bdfaf":"code","226fb8ac":"code","7341cfdf":"code","a7ab79cd":"code","45029f8b":"code","30914aa0":"code","096fd62f":"code","0e3a4b9e":"code","f52eb188":"code","10e3287e":"code","cc6a5aa8":"code","330506de":"code","deca8d54":"code","f6f52545":"code","61b7a9ca":"code","c5b10d11":"code","b9ffb90f":"code","2392bdde":"code","5c73c565":"code","059d5b70":"markdown","42ee846d":"markdown","ea68890a":"markdown","d3d564f7":"markdown","794feb32":"markdown","7b23168f":"markdown","56697467":"markdown","364aae6c":"markdown","e137d5c3":"markdown","5f822795":"markdown"},"source":{"e4505e4a":"# Importing Libraries\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport ast\nimport calendar\nimport matplotlib.pyplot as plt","f84cbea3":"# Plotly\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.figure_factory import create_distplot\nimport plotly.express as px\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\npio.templates.default = \"draft\"","220584eb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3ddbda55":"data = pd.read_csv('\/kaggle\/input\/spotify-daily-top-200-songs-with-genres-20172021\/data.csv', sep=\"#\")","0307551b":"data.head()","2606d39a":"data.info()","851d7991":"data.isna().sum()","92e3c15c":"data.loc[pd.isnull(data['Track Name'])]","6a04c2d1":"# Removing all rows containing a NaN  value\ndata.dropna(inplace=True) ","e787b52c":"def get_keyword_separator(s):\n    if \"featuring\" in s.lower():\n        return \"featuring\"\n    elif \"feat\" in s.lower():\n        return \"feat\"\n    else:\n        return \"with\"\n    \ndef check_if_song_is_featured(song_name):\n    keyword = get_keyword_separator(song_name)\n    idx_if_exists = song_name.lower().find(keyword)\n    if idx_if_exists != -1:\n        feat = song_name[idx_if_exists + len(keyword) + 1:-1]\n        sep = \"&\" if \"&\" in feat else \",\"\n        return [x.strip() for x in feat.split(sep)]\n    else:\n        return \"None\"\n    \ndef get_number_of_singers(feat):\n    if isinstance(feat, list):\n        return len(feat) + 1\n    else:\n        return 1\n    \ndef get_song_name_only(song_name):\n    sep = 'feat' if 'feat' in song_name.lower() else \"with\"\n    idx = song_name.lower().find(sep)\n    if idx != -1:\n        return song_name[:idx-1].strip() # -1 to skip the \")\"\n    else:\n        return song_name","3d6a0a86":"data[\"Year\"] = data[\"Date\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\").year)\ndata[\"Month\"] = data[\"Date\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\").month)\ndata[\"DayOfWeek\"] = data[\"Date\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%d\").isoweekday())","69963005":"data[\"Featuring\"] = data[\"Track Name\"].apply(lambda x: check_if_song_is_featured(x))\ndata['Number Of Singers'] = data['Featuring'].apply(lambda x: get_number_of_singers(x))","432bf4d0":"data[\"Track Name\"] = data['Track Name'].apply(lambda x: get_song_name_only(x))","c0479920":"data['In Top 5'] = data['Position'].apply(lambda x: int(x<=5))\ndata['In Top 10'] = data['Position'].apply(lambda x: int(x<=10))\ndata['In Top 50'] = data['Position'].apply(lambda x: int(x<=50))\ndata['In Top 100'] = data['Position'].apply(lambda x: int(x<=100))","bba6e60e":"data[\"Genre\"] = data['Genre'].apply(lambda x: ast.literal_eval(x))","0e0261b1":"# Checking if there are incorrect Genre names\ndata[\"Genre Max Length\"] = data['Genre'].apply(lambda x : max([len(xi) for xi in x]))","576bdfaf":"data['Genre Max Length'].value_counts().plot(kind='bar', title='Genre Name Max Lengths Distribution',\n                                         figsize=(14,7), xlabel='Max Length', ylabel='Count')\nplt.show()","226fb8ac":"data.loc[data['Genre Max Length']>30, 'Genre'] = [\"Not Precised\"]*len(data.loc[data['Genre Max Length']>30, 'Genre'])\ndata.drop(columns=['Genre Max Length'], inplace=True)","7341cfdf":"data.reset_index(drop=True,inplace=True)","a7ab79cd":"data","45029f8b":"track_names = [\"Bodak Yellow\", \"Taki Taki\", \"Despacito\", \"Shape of You\", \"All I Want for Christmas Is You\",\n               \"bad guy\", \"One Kiss\", \"Dance Monkey\", \"Peaches\", \"Se\u00f1orita\", \"thank u, next\"]","30914aa0":"fig = go.Figure()\n\nfor name in track_names:\n    fig.add_trace(go.Bar(x=data.loc[data['Track Name'] == name, 'Date'],\n                         y=data.loc[data['Track Name'] == name, 'Position'],\n                         visible=name==track_names[0]))\n    \nfig.update_layout(title=f\"<b>{track_names[0]}<\/b> - Evolution of Position in Spotify\",\n                  xaxis_title=\"Date\", yaxis_title=\"Position\")\n    \nbuttons = []\nfor name in track_names:\n    buttons.append(dict(method=\"update\",\n                        label=name,\n                        args=[{\"visible\":[n==name for n in track_names]},\n                              {\"title\":f\"<b>{name}<\/b> - Evolution of Position in Spotify\"}]\n                       ))\n\nfig.update_layout(updatemenus=[{\"buttons\":buttons, \"active\":0, \"showactive\":False, \"direction\":\"down\",\n                               \"x\":0.1, \"y\":1.5}])\n    \nfig.show()","096fd62f":"first_position_occurences = data.loc[data['Position']==1].groupby('Track Name').count()\nfirst_position_occurences = first_position_occurences.sort_values(by=\"Position\", ascending=False).reset_index()[:10]","0e3a4b9e":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x=first_position_occurences['Track Name'],\n                     y=first_position_occurences['Position']))\n    \nfig.update_layout(title=\"Spotify Top 10 Tracks Lasting in First Position\",\n                  xaxis_title=\"Track Name\", yaxis_title=\"Number of Days\")\n    \n    \nfig.show()","f52eb188":"fig = go.Figure()\n\ntop_positions_idxs = [5, 10, 50, 100]\n\nfor t in top_positions_idxs:\n    top_positions_occurences = data.loc[data[f'In Top {t}']==1].groupby('Track Name').count()\n    top_positions_occurences = top_positions_occurences.sort_values(by=\"Position\", ascending=False).reset_index()[:10]\n\n    fig.add_trace(go.Bar(x=top_positions_occurences['Track Name'],\n                         y=top_positions_occurences['Position'],\n                         visible=t==top_positions_idxs[0]))\n    \nfig.update_layout(title=f\"Spotify Top 10 Tracks Most Lasting in Top {top_positions_idxs[0]} Positions\",\n                  xaxis = go.layout.XAxis(tickangle=15, title=\"Track Name\"), yaxis_title=\"Number of Days\", )\n\nbuttons = []\nfor t in top_positions_idxs:\n    buttons.append(dict(method=\"update\",\n                        label=f\"Top {t}\",\n                        args=[{\"visible\":[idx==t for idx in top_positions_idxs]},\n                              {\"title\":f\"Spotify Top 10 Tracks Most Lasting In Top {t} Positions\"}]\n                       ))\n    \nfig.update_layout(updatemenus=[{\"buttons\":buttons, \"active\":0, \"showactive\":False, \"direction\":\"down\",\n                               \"x\":0.1, \"y\":1.5}])\n\nfig.show()","10e3287e":"most_streamed_tracks = data.groupby('Track Name').sum().sort_values(by='Streams', ascending=False).reset_index()\nmost_streamed_tracks = most_streamed_tracks[['Track Name', 'Streams']][:10]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=most_streamed_tracks['Track Name'],\n                     y=most_streamed_tracks['Streams']))\n    \nfig.update_layout(title=\"Spotify Top 10 Most Streamed Tracks\",\n                  xaxis_title=\"Track Name\", yaxis_title=\"Streams\")\n    \n    \nfig.show()","cc6a5aa8":"yearly_streams = data.groupby(['Year', 'Track Name']).sum().reset_index()\nyearly_streams = yearly_streams.sort_values(by=['Year', 'Streams'], ascending=False)\n\nyears = data.Year.unique()\n\nfig = go.Figure()\n\nfor year in years:\n    year_data = yearly_streams.loc[yearly_streams.Year == year].reset_index(drop=True)[:10]\n    fig.add_trace(go.Bar(x=year_data['Track Name'],\n                         y=year_data['Streams'],\n                         visible=year==years[0]))\n    \nfig.update_layout(title=f\"Spotify Top 10 Most Streamed Tracks in {years[0]}\",\n                  xaxis = go.layout.XAxis(tickangle=15, title=\"Track Name\"), yaxis_title=\"Streams\")\n    \nbuttons = []\nfor year in years:\n    buttons.append(dict(method=\"update\",\n                        label=str(year),\n                        args=[{\"visible\":[y==year for y in years]},\n                              {\"title\":f\"Spotify Top 10 Most Streamed Tracks in {year}\"}]\n                       ))\n    \nfig.update_layout(updatemenus=[{\"buttons\":buttons, \"active\":0, \"showactive\":False, \"direction\":\"down\",\n                               \"x\":0.1, \"y\":1.5}])\n    \n    \nfig.show()","330506de":"monthly_streams = data.groupby(['Month', 'Track Name']).sum().reset_index()\nmonthly_streams = monthly_streams.sort_values(by=['Month', 'Streams'], ascending=False)\n\nmonths = data.Month.unique()\n\nfig = go.Figure()\n\nfor month in months:\n    month_data = monthly_streams.loc[monthly_streams.Month == month].reset_index(drop=True)[:10]\n    fig.add_trace(go.Bar(x=month_data['Track Name'],\n                         y=month_data['Streams'],\n                         visible=month==months[0]))\n    \nfig.update_layout(title=f\"Spotify Top 10 Most Streamed Tracks in {calendar.month_name[months[0]]}\",\n                  xaxis = go.layout.XAxis(tickangle=15, title=\"Track Name\"), yaxis_title=\"Streams\")\n    \nbuttons = []\nfor month in months:\n    buttons.append(dict(method=\"update\",\n                        label=calendar.month_name[month],\n                        args=[{\"visible\":[m==month for m in months]},\n                              {\"title\":f\"Spotify Top 10 Most Streamed Tracks in {calendar.month_name[month]}\"}]\n                       ))\n    \nfig.update_layout(updatemenus=[{\"buttons\":buttons, \"active\":0, \"showactive\":False, \"direction\":\"down\",\n                               \"x\":0.1, \"y\":1.5}])\n    \n    \nfig.show()","deca8d54":"daily_records = data.groupby('Track Name')['Streams'].max().reset_index().sort_values(by='Streams', ascending=False)[:10]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=daily_records['Track Name'],\n                     y=daily_records['Streams']))\n    \nfig.update_layout(title=\"Spotify Top 10 Most Streamed-In-a-Day Tracks\",\n                  xaxis_title=\"Track Name\", yaxis_title=\"Streams\")\n    \n    \nfig.show()","f6f52545":"daily_records_by_year = data.groupby(['Year', 'Track Name'])['Streams'].max().reset_index()\ndaily_records_by_year = daily_records_by_year.sort_values(by=['Year', 'Streams'], ascending=False)\n\nfig = go.Figure()\n\nyears = data.Year.unique()\n\nfig = go.Figure()\n\nfor year in years:\n    daily_records_year = daily_records_by_year.loc[daily_records_by_year.Year == year].reset_index(drop=True)[:10]\n    fig.add_trace(go.Bar(x=daily_records_year['Track Name'],\n                         y=daily_records_year['Streams'],\n                         visible=year==years[0]))\n    \nfig.update_layout(title=f\"Spotify Top 10 Most Streamed-in-a-Day Tracks - {years[0]}\",\n                  xaxis = go.layout.XAxis(tickangle=15, title=\"Track Name\"), yaxis_title=\"Streams\")\n    \nbuttons = []\nfor year in years:\n    buttons.append(dict(method=\"update\",\n                        label=str(year),\n                        args=[{\"visible\":[y==year for y in years]},\n                              {\"title\":f\"Spotify Top 10 Most Streamed-in-a-Day Tracks - {year}\"}]\n                       ))\n    \nfig.update_layout(updatemenus=[{\"buttons\":buttons, \"active\":0, \"showactive\":False, \"direction\":\"down\",\n                               \"x\":0.1, \"y\":1.5}])\n    \n    \nfig.show()","61b7a9ca":"most_streamed_artists = data.groupby('Artist').sum()['Streams'].reset_index().sort_values(by=\"Streams\", ascending=False)[:10]\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(x=most_streamed_artists['Artist'],\n                     y=most_streamed_artists['Streams']))\n    \nfig.update_layout(title=f\"Spotify Top 10 Streamed Artists\",\n                  xaxis_title=\"Artist\", yaxis_title=\"Streams\")\n    \n    \nfig.show()","c5b10d11":"yearly_artist_streams = data.groupby(['Year', 'Artist']).sum()['Streams']\nyearly_artist_streams = yearly_artist_streams.reset_index().sort_values(by=['Year', 'Streams'], ascending=False)\n\ndf = pd.DataFrame()\nfor year in sorted(yearly_artist_streams.Year.unique()):\n    df = pd.concat([df , yearly_artist_streams.loc[yearly_artist_streams.Year==year][:10]])\n\nfig = px.bar(data_frame=df, x='Artist', y='Streams', animation_frame=\"Year\")\n\nfig.update_layout(title=\"Spotify Most Streamed Artists By Year\", xaxis_title=\"Artist\", yaxis_title=\"Yearly Streams\")\n\nfig.show()","b9ffb90f":"top_10_artists_data = data.loc[data.Artist.isin(most_streamed_artists.Artist.unique())]\ntop_10_artists_data = top_10_artists_data.groupby(['Artist', 'Date']).sum()['Streams'].reset_index()\ntop_10_artists_data = top_10_artists_data.sort_values(by=['Artist','Date'])\n\nfig = go.Figure()\n\nfor artist in top_10_artists_data.Artist.unique():\n    artist_data = top_10_artists_data.loc[top_10_artists_data.Artist == artist]\n    fig.add_trace(go.Scatter(x=artist_data['Date'], y=artist_data['Streams'], name=artist))\n\nfig.update_layout(xaxis_title=\"Date\", yaxis_title=\"Daily Streams\", title=\"Daily Streams Evolution of Spotify Top 10 Artists\")\n\nfig.show()","2392bdde":"cumsum_streams_data = data.groupby(['Artist', 'Date']).sum().reset_index()\ncumsum_streams_data['Cummulative Streams'] = 0\nfor artist in cumsum_streams_data.Artist.unique():\n    artist_df = cumsum_streams_data.loc[cumsum_streams_data.Artist==artist]\n    cumsum_streams_data.loc[cumsum_streams_data.Artist==artist, 'Cummulative Streams'] = artist_df['Streams'].cumsum()","5c73c565":"top_10_cumsum_data = cumsum_streams_data.loc[cumsum_streams_data.Artist.isin(top_10_artists_data.Artist.unique())]\ntop_10_cumsum_data = top_10_cumsum_data.sort_values(by=['Artist', 'Date'])\n\nfig = go.Figure()\n\nfor artist in top_10_cumsum_data.Artist.unique():\n    artist_data = top_10_cumsum_data.loc[top_10_cumsum_data.Artist == artist]\n    fig.add_trace(go.Scatter(x=artist_data['Date'], y=artist_data['Cummulative Streams'], name=artist))\n\nfig.update_layout(xaxis_title=\"Date\", yaxis_title=\"Streams\", title=\"Cumulative Streams Evolution of Spotify Top 10 Artists\")\n\nfig.show()","059d5b70":"## Tracks","42ee846d":"# Features Engineering","ea68890a":"### Most Streamed Artists","d3d564f7":"### Most Streamed Tracks","794feb32":"### Example of Tracks Position Evolution","7b23168f":"## Artists","56697467":"# Processing NaN Values","364aae6c":"### Most Lasting in Top Positions","e137d5c3":"# Exploratory Data Analysis","5f822795":"# Reading Data"}}