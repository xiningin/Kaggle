{"cell_type":{"28102d9f":"code","3f2fc754":"code","3c931da9":"code","2c7231a4":"code","14af5887":"code","829b825c":"code","1523de7b":"code","725f2827":"code","10368949":"code","8d09fb28":"code","ff4cc616":"code","265a7eb4":"code","684018ea":"code","ebcbc76f":"code","6da75041":"code","343ab48a":"code","76ac1d92":"code","1dbe481b":"code","d54882e9":"code","93f2feec":"code","7cba2be0":"code","3163a7ab":"code","4426720a":"code","1cdc9b79":"code","515c2210":"code","f20d2c82":"code","d64e4679":"code","c7a84a18":"code","e9d27455":"code","b8d9d93d":"code","a72d1e0b":"code","b4f96202":"code","bbdf952e":"code","652306bd":"code","061c2ab7":"code","4e46c7ed":"code","8d9b90b1":"code","79d9cc42":"code","4ccb7276":"code","14b298f6":"code","d38cbdd9":"code","6624f37b":"code","769e5416":"code","10037fef":"markdown"},"source":{"28102d9f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3f2fc754":"data = pd.read_csv(\"..\/input\/youtube-new\/USvideos.csv\")\n","3c931da9":"data.info()\n# Info about data","2c7231a4":"data.corr()\n#comment_count and views \n#views and likes\n#comment_count and dislikes ","14af5887":"#Corr map\nData_Corr_Map = plt.subplots(figsize=(15,15))\nsns.heatmap(data.corr(), annot = True, linewidths = 5, fmt= '.2f')\nplt.show()\n# Heat map for finding correlations \n# If corr. close to 1 it is right proportion\n# If corr. close to -1 it is inverse proportion\n# If corr. close to 0 there are no proportions\n","829b825c":"data.columns\n# Features of the data\n\n","1523de7b":"data.head(10)\n# First 10 videos features","725f2827":"# Line Plot\ndata.views.plot(kind = 'line', color = 'red', label = 'Views', linewidth = 1, alpha = 0.3,\n               grid = True, linestyle = ':')\ndata.likes.plot(kind = 'line', color = 'g', label = 'likes', linewidth = 1, alpha = 0.3,\n                 linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()\n\n\n","10368949":"# Scatter Plot\nplt.scatter(data.likes, data.dislikes, alpha = 0.1, color = \"red\")\nplt.xlabel('Likes')\nplt.ylabel('Dislikes')\nplt.title('Likes & Dislikes Plot')\nplt.show()","8d09fb28":"# Histogram\ndata.likes.plot(kind = 'hist', bins =100, figsize = (10,10))\nplt.show()","ff4cc616":"# Filtering\nx = data['likes'] > 1000000\ndata[x]\ndata[(data['likes'] > 1000000) & (data['views'] > 30000000)]","265a7eb4":"# While and For Loops\n\n# While\ni = 2\nwhile i < 20:\n    print('i : ', i)\n    i = i**2\n    print('i is bigger than 20')\n    \n# For\nliste = [\"ahmet\",\"mehmet\",\"ali\",\"ayse\",\"veli\"]\nfor each in liste:\n    if(len(each) >= 4):\n        print(each)\n \ndictionary1 = {'FB':'Fenerbahce','GS':'Galatasaray','BJK':'Besiktas'}\nfor key,value in dictionary1.items():\n    print(key,\" : \",value)\nprint('')\n","684018ea":"# Functions:\n\n# User Defined Func:\n\n\ndef vucut_index(kilo,boy):\n    \"\"\" input = boy and kilo\n        output = body index \"\"\"\n    output = kilo \/ boy**2\n    print(\"Vucud Kitle Indeksiniz :\", output)\n\nprint(vucut_index(20,2))\n\nfrom math import sqrt\n\ndef hipotenus_hesaplama(a,b):\n    c = sqrt((a**2 + b**2))\n    print(\"hipotenus\", c)\n\nprint(hipotenus_hesaplama(5,12))    \n    ","ebcbc76f":"# Nested Func:\ndef saglik_hesaplama(k,b,y,s):\n    \n    def vucut_index(k,b):\n        \"\"\" input = boy and kilo\n        output = body indeks \"\"\"\n    \n        vucut_index = k \/ b**2\n    \n        return vucut_index\n    \n    def yas_spor(y,s):\n        \"\"\" input = yas and spor per day (hour)\n        output = healt situation \"\"\"\n        \n        if(y<15 and s>1):\n             c = 1\n        elif( 15 <y< 35 and s>=2):\n             c = 1\n        elif(35<y<65 and 3>s>1):\n             c = 1\n        elif(y>65 and s == 1):\n             c = 1\n        else:\n             c = 0\n        return c\n    \n    \n        \n    if(18,5< vucut_index(k,b) <29,9 & yas_spor(y,s) == 1):\n        \n        sonuc = \"saglikli\"\n    else:\n        sonuc = \"sagliksiz\"\n        \n\n    print(\"Saglik Durumunuz :\", sonuc)\n     \nprint(saglik_hesaplama(80,180,17,2))\n            \n                 \n    \n    \n    ","6da75041":"# Default and Flexible Func:\n\ndef yas_hesaplama(dt, yil=2020):\n    yas = yil-dt\n    return yas\n\nprint(yas_hesaplama(2003,2020))\n\nprint(yas_hesaplama(2003,2021))\n    ","343ab48a":"def hafiza_testi(*args):\n    ''' Input = Bildiginiz Asal Sayilar\n    Output = Matematik Yeterliligi '''\n\n    if len(args)>50: \n        print(\"Matematiginiz Cok iyi\")\n    elif len(args)>= 25:\n        print(\"Matematiginiz iyi\")\n    else:\n        print(\"Matematiginiz yetersiz\")\n        \n\n        \n        ","76ac1d92":"# Lambda Func:\nucgen_alan = lambda a,h: a*h\/2\n\nprint(ucgen_alan(5,6))","1dbe481b":"# Anonymous Func:\nlist3 = [5,13,42,54,90]\ny = map(lambda x:x%5, list3)\nprint(list(y))\n","d54882e9":"#Iterators\n\ncity = \"Berlin\"\niterator1 = iter(city)\nprint(next(iterator1))\nprint(*iterator1)\n","93f2feec":"# List Comprehension\n\nliste1 = [50,43,23,35,23,65,72,98,104,3443]\nliste2 = [i\/5 if i%5 == 0 else i**2\/10 if len(str(i))>=3 else \"bu sayi 2k\" if i%2 == 0 else i for i in liste1]\nprint(liste2)","7cba2be0":"data.info() \ndata.head()","3163a7ab":"# List Comprehension w\/Data\nortalama = sum(data.views)\/len(data.views)\nprint(ortalama)\ndata[\"Mean_Lvl\"] = [\"High\" if i > ortalama else \"low\" for i in data.views]\ndata.loc[:5,[\"Mean_Lvl\",\"views\"]]","4426720a":"# Exploratory Data Analysis\nprint(data.channel_title.value_counts(dropna =False))\n# Hangi kanalin kac videosu oldugunu gosterir.\n","1cdc9b79":"# Visual Exploratory\n\ndata.boxplot(column='dislikes', by = 'comments_disabled')\nplt.show()\n# Yorumlar acik ve kapaliykenki dislike oranlari (mediana gore)\n# Gorunuse gore yorumlari kapali videolar like dislikei da kapali videolar","515c2210":"# Melting\n\ndata_melting = data.head(10)  \nmelted_data = pd.melt(frame=data_melting, id_vars = 'title', value_vars= ['likes','dislikes'])\nmelted_data\n# id_vars == degismemesini istedigin veri\n# value_vars == degismesini istedigin veriler\n","f20d2c82":"# Pivoting \n# Melted veriyi eski haline getirir\n\nmelted_data.pivot(index='title', columns = 'variable',values= 'value')","d64e4679":"# Concatenating Data\n\ndata1 = data.likes.head()\ndata2 = data.dislikes.head()\nconcated_data = pd.concat([data1,data2],axis =1)\nconcated_data","c7a84a18":"# Changing Data Types\n\ndata.dtypes\ndata.category_id = data.category_id.astype('float')\ndata.dtypes\n","e9d27455":"# Assert\n# Assert dogru mu degil mi diye kontrol amaciyla kullanilir\nassert 25\/5==5\n# Dogruysa error vermez yanlis ise error verir","b8d9d93d":"# Building Data Frames\n\nName = [\"Rekkles\",\"BrokenBlade\",\"Faker\"]\nTeam = [\"Fnatic\",\"TSM\",\"T1\"]\nRole = [\"Bottom\",\"Top\",\"Mid\"]\nTear = [\"High\",\"Mid\",\"Legendary\"] \nlist_label = [\"Name\",\"Team\",\"Role\",\"Tear\"]\nlist_col = [Name,Team,Role,Tear]\nzipped = list(zip(list_label,list_col))\ndata_dic = dict(zipped)\ndf = pd.DataFrame(data_dic)\ndf\n\n","a72d1e0b":"# Adding new column\ndf[\"Best Champs\"] = [\"Tristana\",\"Irelia\",\"Ryze\"]\ndf","b4f96202":"# Yeni bir feature olusturmak tek degerle tum datalara\n\ndf[\"Gender\"] = \"Male\"\ndf","bbdf952e":"data.head()","652306bd":"data.head()","061c2ab7":"data.info()","4e46c7ed":"# Hangi kanalin kac videosu var\ndata.channel_title.value_counts()","8d9b90b1":"# Amac = Videolarinin izlenmesine gore top 15 kanal\n\nortalama_list = []\ndeneme_data = data\nlist_kanallar = list(deneme_data.channel_title.unique()) \n\nfor i in list_kanallar:\n    datax = data[data['channel_title'] == i] \n    print(datax.head())\n    ortalama = round(sum(datax.views)\/len(datax))\n    ortalama_list.append(ortalama)\n    \ndfx = pd.DataFrame({\"kanal adi: \": list_kanallar, \"Ortalama Izlenme \": ortalama_list }).sort_values(by=[\"Ortalama Izlenme \"],ascending=False)\ndfx = dfx.head(15)\n   ","79d9cc42":"plt.figure()\nsns.barplot(x= dfx[\"kanal adi: \"], y= dfx[\"Ortalama Izlenme \"], palette = sns.cubehelix_palette(15))\nplt.xticks(rotation= 90) # X ekseninde 90 derecelik aciyla statesleri yazd\nplt.xlabel('Kanallar')\nplt.ylabel('Ortalama')\nplt.title('Video Ortalamasina Gore Top 15 Kanal') \nplt.show()","4ccb7276":"# Hangi kanalin max likei var\nlike_list = []\nlist_kanallar = list(deneme_data.channel_title.unique())\ndeneme_data = data\n\nfor i in list_kanallar:\n    data_like = data[data['channel_title'] == i] \n    likes = sum(data_like.likes)\n    #print(data_like.head())\n    like_list.append(likes)\n    \ndf_like = pd.DataFrame({\"Kanallar\": list_kanallar,\"Like Sayisi\": like_list}).sort_values(by=[\"Like Sayisi\"],ascending=False)    \ndf_like = df_like.head(15)\n\nplt.figure()\nsns.barplot(x= df_like[\"Kanallar\"], y= df_like[\"Like Sayisi\"], palette = sns.cubehelix_palette(15), )\nplt.xticks(rotation= 90) # X ekseninde 45 derecelik aciyla statesleri yazd\nplt.xlabel('Kanallar')\nplt.ylabel('Toplam Begenme Sayisi')\nplt.title('Begenme Sayilarina Gore Top 15 Kanal') \nplt.show()\n\n\n","14b298f6":"data.head()","d38cbdd9":"max(data.views)\ndata2","6624f37b":"dislikes","769e5416":"# Max Izlenen 15 videonun like disslike ve yorum sayisi \n\nsorted_data = data.views.sort_values(ascending=False)\ndata1 = sorted_data.head(15)\nnew_index = data1.index.values\ndata2 = data.reindex(new_index)\nvideo_list = list(data2.trending_date)\nlikes = []\ndislikes = []\ncomments = []\n\nfor i in video_list:\n    x = data2[data2.trending_date == i]\n    likes.append(x.likes)\n    dislikes.append(x.dislikes)\n    comments.append(x.comment_count)\n    \nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=likes,y=video_list,color='blue',alpha= 0.5, label='Likes')\nsns.barplot(x=dislikes,y=video_list,color='red',alpha= 0.5, label='Dislikes')\nsns.barplot(x=comments,y=video_list,color='yellow',alpha= 0.5, label='Comments')\n\n    \n    \n\n\n\n\n\n\n","10037fef":"# Visual Exploratory\n\n#Subplots\ndata1 = data.loc[:,[\"views\",\"comment_count\",\"dislikes\"]]\ndata1.plot()\n\n\n# Scatter Plot\ndata1.plot(kind=\"scatter\",x=\"views\", y=\"comment_count\")\nplt.show()\n\n# Histogram Plot\ndata1.plot(kind=\"hist\",y= \"likes\" ,bins = 20, range=(0,100),normed= True)\n"}}