{"cell_type":{"1da71da1":"code","0735d7e5":"code","f8193688":"code","166088a0":"code","f1251155":"code","5be0325f":"code","47dc55c4":"code","6f4c04a8":"code","6b0054c9":"code","f687e8a2":"code","2bef1204":"code","3c03802a":"code","3644d452":"code","684554ff":"code","32c8abd3":"code","883ec05b":"code","1eeafb34":"code","09eaf9ad":"code","6d568a13":"code","9584a378":"code","c737eaed":"code","1bb4d039":"code","37759530":"code","f8ed5aac":"code","352bb765":"code","c76bb2e0":"code","b432fa42":"code","af11b907":"code","e52c25e3":"code","966e54fa":"code","77b35a98":"code","efdb0e9b":"code","0477f139":"code","b087b798":"code","f3eefa29":"code","2bfbc480":"code","212780c2":"code","4e8097fe":"code","5250792a":"code","477a818c":"code","716e5bfe":"code","e1542ddb":"markdown","34de2a65":"markdown","8204960f":"markdown","d5fc0df7":"markdown","48a88868":"markdown","11054070":"markdown","60561104":"markdown"},"source":{"1da71da1":"import os  #you can read the currently directory\nimport pandas as pd\nfrom pandas import ExcelWriter\nfrom pandas import ExcelFile\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime\n# IMPORT AND CLEANING THE DATA FROM EXCEL\n\ndf_PI = pd.read_excel('..\/input\/italian-stocks-bonds\/italian_stocks_bonds.xlsx', sheet_name='stocks', converters= {'Name': pd.to_datetime},)\n\ntype(df_PI)\n                      ","0735d7e5":"print(os.getcwd())","f8193688":"df_PI.info()","166088a0":"df_PI.columns=([\"Date\", \"FTSEMIB Index\", \"FCA\", \"UCG\", \"ISP\", \"ENI\", \"LUX\"])\ndf_PI.head(20)","f1251155":"df_PI.drop([0,1,2,3,4], inplace= True)\ndf_PI.head(20)","5be0325f":"df_PI.info()","47dc55c4":"df_PI[[\"FTSEMIB Index\", \"FCA\", \"UCG\", \"ISP\", \"ENI\", \"LUX\"]] = df_PI[[\"FTSEMIB Index\", \"FCA\", \"UCG\", \"ISP\", \"ENI\", \"LUX\"]].astype(float)\ndf_PI","6f4c04a8":"df_dataindex= df_PI.set_index([\"Date\"])\ndf_PI= df_dataindex\ndf_PI","6b0054c9":"df_PI.info()","f687e8a2":"# I am creating daily returns for the stock index and for the stocks\n# I am assuming continous coumpounding\ndf_PI[\"FTSEMIB DAILY RET\"]=np.log(df_PI[\"FTSEMIB Index\"]\/ df_PI[\"FTSEMIB Index\"].shift(1))\ndf_PI[\"FCA DAILY RET\"]=np.log(df_PI[\"FCA\"]\/ df_PI[\"FCA\"].shift(1))\ndf_PI[\"UCG DAILY RET\"]=np.log(df_PI[\"UCG\"]\/ df_PI[\"UCG\"].shift(1))\ndf_PI[\"ISP DAILY RET\"]=np.log(df_PI[\"ISP\"]\/ df_PI[\"ISP\"].shift(1))\ndf_PI[\"ENI DAILY RET\"]=np.log(df_PI[\"ENI\"]\/ df_PI[\"ENI\"].shift(1))\ndf_PI[\"LUX DAILY RET\"]=np.log(df_PI[\"LUX\"]\/ df_PI[\"LUX\"].shift(1))\n\ndf_PI[[\"FTSEMIB DAILY RET\",\"FCA DAILY RET\", \"UCG DAILY RET\", \"ISP DAILY RET\",\"ENI DAILY RET\", \"LUX DAILY RET\"]].tail()  \ndf_PI","2bef1204":"# Plotting the return\n\ndf_PI[\"FTSEMIB DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), lw=4) #FTSEMIB_return\ndf_PI[\"FCA DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), color = 'red') #FCA_return\ndf_PI[\"UCG DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), color = 'green') #UCG_return\ndf_PI[\"ISP DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), color = 'purple') #ISP_return\ndf_PI[\"ENI DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), color = 'yellow') #ENI_return\ndf_PI[\"LUX DAILY RET\"].cumsum().plot(subplots=True, figsize = (10,6), color = 'orange') #LUX_return\nplt.xlabel('Date')\nplt.ylabel('return')\nplt.title('return of main indexes of FTSEMIB')\nplt.legend()","3c03802a":"# DataFrame with: SKEW and KURTOSIS\ndf_df = pd.DataFrame([(df_PI.iloc[:,0].skew(),\n                       df_PI.iloc[:,1].skew(),\n                       df_PI.iloc[:,2].skew(),\n                       df_PI.iloc[:,3].skew(),\n                       df_PI.iloc[:,4].skew(),\n                       df_PI.iloc[:,5].skew()),\n                      (df_PI.iloc[:,0].kurtosis(), \n                      df_PI.iloc[:,1].kurtosis(),\n                      df_PI.iloc[:,2].kurtosis(),\n                      df_PI.iloc[:,3].kurtosis(),\n                      df_PI.iloc[:,4].kurtosis(),\n                      df_PI.iloc[:,5].kurtosis())],\n                     columns = ['FTSEMIB', 'FCA', 'UNICREDIT', 'ISP', 'ENI', 'LUX'], \n                     index = ['SKEW', 'KURTOSIS'])\n\ndf_df","3644d452":"#Plotting the distributions of returns\n\ngrid = plt.GridSpec(2,3, wspace = 0.4, hspace=0.3)\nplt.figure(figsize=(10,6))\n\nplt.subplot(grid[0,0]).hist(df_PI.iloc[:,6], color = 'black', bins=55)\nplt.title('FTSEMIB')\nplt.ylabel('frequency')\n\nplt.subplot(grid[0,1]).hist(df_PI.iloc[:,7], color = 'blue', bins=55)\nplt.title('FCA')\nplt.ylabel('frequency')\n\nplt.subplot(grid[0,2]).hist(df_PI.iloc[:,8], color = 'green', bins=55)\nplt.title('UCG')\nplt.ylabel('frequency')\n\nplt.subplot(grid[1,0]).hist(df_PI.iloc[:,9], color = 'brown', bins=55)\nplt.title('ISP')\nplt.xlabel('Price')\nplt.ylabel('frequency')\n\nplt.subplot(grid[1,1]).hist(df_PI.iloc[:,10], color = 'red', bins=55)\nplt.title('ENI')\nplt.xlabel('Price')\nplt.ylabel('frequency')\n\nplt.subplot(grid[1,2]).hist(df_PI.iloc[:,11], color = 'yellow', bins=25)\nplt.title('LUX')\nplt.xlabel('Price')\nplt.ylabel('frequency')","684554ff":"#how about the correletions...\naxes = ['FTSEMIB', 'FCA', 'UCG', 'ISP', 'ENI', 'LUX']\n\nharvest = np.array(round(df_PI.iloc[:,6:].corr(),2))\n\nfig, ax = plt.subplots()\nim = ax.imshow(harvest) #colors change based on the values\n\n#set the tickets\nax.set_xticks(np.arange(len(axes)))\nax.set_yticks(np.arange(len(axes)))\n\n#give label to the axes\nax.set_xticklabels(axes)\nax.set_yticklabels(axes)\n\n#setting the labels\nplt.setp(ax.get_xticklabels(), rotation = 45, ha = 'right', rotation_mode = 'anchor')\n\n#loop over data dimension and create text annotations\nfor i in range(len(axes)):\n    for j in range(len(axes)):\n        text = ax.text(j,i, harvest[i,j],\n                      ha = 'center', va = 'center', color = 'w', size=13)","32c8abd3":"#mean of returns computed over a rolling window of 60 days\ndf_PI['FTSEMIB 60days'] = df_PI[\"FTSEMIB DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\ndf_PI['FCA 60days'] = df_PI[\"FCA DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\ndf_PI['UCG 60days'] = df_PI[\"UCG DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\ndf_PI['ISP 60days'] = df_PI[\"ISP DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\ndf_PI['ENI 60days'] = df_PI[\"ENI DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\ndf_PI['LUX 60days'] = df_PI[\"LUX DAILY RET\"].rolling(window=60,center=False).mean() # 60 days average\n\ndf_PI[['FTSEMIB 60days','FCA 60days','UCG 60days','ISP 60days','ENI 60days','LUX 60days']].plot(figsize=(10,5))\nplt.xlabel(\"Date\")\nplt.ylabel(\"return\")\nplt.title(\"Returnd of indexes\")\nplt.legend()","883ec05b":"#standard deviation computed over a rolling window of 60 days\ndf_PI['FTSEMIB vol'] = df_PI['FTSEMIB DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\ndf_PI['FCA vol'] = df_PI['FCA DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\ndf_PI['UCG vol'] = df_PI['UCG DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\ndf_PI['ISP vol'] = df_PI['ISP DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\ndf_PI['ENI vol'] = df_PI['ENI DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\ndf_PI['LUX vol'] = df_PI['LUX DAILY RET'].rolling(window=60,center=False).std() # 60 days volatility\n\n\ndf_PI[['FTSEMIB vol','FCA vol','UCG vol','ISP vol','ENI vol','LUX vol']].plot(subplots = True,style = 'b', \n                                                                              figsize=(10,5))\n\n","1eeafb34":"df_DR= df_PI[1:] [[\"FTSEMIB DAILY RET\",\"FCA DAILY RET\", \"UCG DAILY RET\", \"ISP DAILY RET\",\"ENI DAILY RET\", \"LUX DAILY RET\"]]\ndf_DR","09eaf9ad":"df_DR.plot(subplots=True,grid=True,style='b',figsize=(8,6))","6d568a13":"#1st regression\nimport numpy as np\nimport statsmodels.formula.api as smf\nmod = smf.ols( \"Q('FCA DAILY RET') ~ Q('FTSEMIB DAILY RET')\", df_DR).fit()\nprint(mod.summary())","9584a378":"print(mod.params) # print coefficients","c737eaed":"#2th regression\nimport numpy as np\nimport statsmodels.formula.api as smf\nmod = smf.ols( \"Q('UCG DAILY RET') ~ Q('FTSEMIB DAILY RET')\", df_DR).fit()\nprint(mod.summary())","1bb4d039":"print(mod.params) # print coefficients","37759530":"#3th  regression\nimport numpy as np\nimport statsmodels.formula.api as smf\nmod = smf.ols( \"Q('ISP DAILY RET') ~ Q('FTSEMIB DAILY RET')\", df_DR).fit()\nprint(mod.summary())","f8ed5aac":"print(mod.params) # print coefficients","352bb765":"#4th reggression\nimport numpy as np\nimport statsmodels.formula.api as smf\nmod = smf.ols( \"Q('ENI DAILY RET') ~ Q('FTSEMIB DAILY RET')\", df_DR).fit()\nprint(mod.summary())","c76bb2e0":"print(mod.params) # print coefficients","b432fa42":"#5th regression\nimport numpy as np\nimport statsmodels.formula.api as smf\nmod = smf.ols( \"Q('LUX DAILY RET') ~ Q('FTSEMIB DAILY RET')\", df_DR).fit()\nprint(mod.summary())","af11b907":"print(mod.params) # print coefficients","e52c25e3":"del df_DR[\"FTSEMIB DAILY RET\"]\ndf_DRmean=df_DR.mean()\ndf_DRmean","966e54fa":"beta=[1.396233, 1.468434, 1.297887, 0.798773, 0.276803, ]\n","77b35a98":"col=[\"red\", \"green\", \"blue\", \"yellow\",\"orange\"]\nplt.scatter(beta,df_DRmean, color= col)\n\nplt.xlabel(\"\u03b2 of each stock\")\nplt.ylabel(\"Average daily stock returns\")\n\nplt.text(1.396233,-0.000100, \"FCA\")\nplt.text(1.468434, -0.000716,  \"UCG\")\nplt.text(1.297887,-0.000490,  \"ISP\")\nplt.text(0.798773,-0.000058,  \"ENI\")\nplt.text(0.276803,-0.000009, \"LUX\")\n\nplt.grid(True)\nplt.show()","efdb0e9b":"df_bonds = pd.read_excel('..\/input\/italian-stocks-bonds\/italian_stocks_bonds.xlsx', sheet_name='bonds', converters= {'Name': pd.to_datetime})\n\ntype(df_bonds)","0477f139":"df_bonds.info()","b087b798":"df_bonds.columns=([\"Date\", \"3M\",\"1Y\", \"2Y\", \"5Y\", \"10Y\"])\ndf_bonds.drop([0,1,2,3,4], inplace= True)\ndf_bonds[[\"3M\",\"1Y\", \"2Y\", \"5Y\", \"10Y\"]] = df_bonds[[\"3M\",\"1Y\", \"2Y\", \"5Y\", \"10Y\"]].astype(float)\ndf_bonds\n\ndf_index= df_bonds.set_index([\"Date\"])\ndf_bonds= df_index\ndf_bonds","f3eefa29":"df_bonds.info()","2bfbc480":"df_bmean= df_bonds.mean()\ndf_bmean","212780c2":"df_bonds.iloc[0,0:]","4e8097fe":"df_bonds.iloc[48,0:]","5250792a":"meanyield = df_bmean\n\nplt.figure(figsize=(8,5))\ndf_bonds.iloc[0,0:].plot(style='r',lw=2)\ndf_bonds.iloc[48,0:].plot(style='b--',lw=2)\nmeanyield.plot(style='m-.',lw=2)\nplt.axis ('tight')\nplt.legend(['30\/10\/2015','31\/10\/2019','meanyield'])\nplt.title('yield curve')\n\nplt.ylabel('%')","477a818c":"import scipy.interpolate as spi\nx = [3,12,24,60,120]\nxx= np.linspace(3,120,25)\n\nipo = spi.splrep(x,meanyield,k=3)\niy = spi.splev(xx,ipo)\nplt.figure(figsize=(10,6))\nplt.plot(x,meanyield,'r.',label='data points',markersize=20)\nplt.plot(xx,iy,'b--',label='cubic spline', lw=3)\nplt.plot(x,meanyield,'k',label='linear', color = 'green', lw=2)\nplt.axis ('tight')\nplt.legend(['data points','cubic spline','linear'])\nplt.title('Yield Curve')\nplt.xlabel('months')\nplt.ylabel('%')","716e5bfe":"df_bonds_copy = df_bonds.copy()\ndf_bonds_copy.iloc[:,1] = 100\/(1+df_bonds.iloc[:,1]\/100)**(3\/12)\ndf_bonds_copy.iloc[:,1].mean()","e1542ddb":"Consider the spreadsheet bonds. It contains monthly yield to maturities of Italian sovereign zerocoupon bonds with maturities 3-months, 1-year, 2-year, 5-year, and 10-year.\n\nI plot the yield curve for the \ufb01rst and last available dates, along the average yield curve (recall: the yield curve is a plot of the yield to maturities as function of the zero-coupon bond maturities).\nLet's see if the the average yield curve \ufb02at, or is it positive\/negative sloped","34de2a65":"As we can see the average yield curve is positive sloped. Basically, the yield curve reflect the assumption that in short-term the yield is lower than in the long-term.","8204960f":"for each of the \ufb01ve stock, I estimated a OLS regression where the dependent variable are the daily stock returns and the independent variables are the daily returns on the stock index (and a constant). I called the OLS coe\ufb03cient on the stock index \u03b2. I reported the \u03b2, and the associated p-values at 5% signi\ufb01cance level.","d5fc0df7":"I plot the \u03b2 of each stock (x-axis) against the average daily stock returns (y-axis).","48a88868":"I compute the monthly zero-coupon bond prices implied by the yield to maturity on the zerocoupon bond (recall: for the 1-year bond the following relation holds P(12) t = 100\/(1+y(12) t ), where the superscript denotes the months to maturity).","11054070":"plot the mean and standard deviation of returns computed over a rolling window of 60 days.","60561104":"Additional descriptive statistics that you think are useful (i.e., skewness, kurtosis, etc.)."}}