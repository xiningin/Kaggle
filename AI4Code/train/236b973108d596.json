{"cell_type":{"80e8bc72":"code","156e2254":"code","fd0f12fd":"code","659b496e":"code","92f81865":"code","8e28f452":"code","c4d2a577":"code","dd7bf941":"code","b789082f":"code","df76155a":"code","91392e6a":"code","80b20a4f":"code","c4e770a3":"code","17945a5f":"code","e1f47316":"code","26c1e67d":"code","b9d69e21":"code","429830c0":"code","894e5d3f":"code","99116f23":"code","0b9f316b":"code","a245ef18":"code","e469c1a7":"code","a574d22b":"code","53e45f53":"code","06cd88e3":"code","865ab0a5":"code","7e677ed6":"code","430a6e64":"code","b9ed4118":"code","84ac0ed6":"code","7006d6b6":"code","4a1ccdf9":"code","be1e6c8b":"code","af422359":"code","f66318c9":"code","b8c23a5b":"code","28eab53e":"code","8cd02d9e":"code","2ceacd9e":"code","e85a3d50":"code","7e9df781":"code","cb3e13f0":"code","dab86a02":"code","34c4b82e":"code","6699e24a":"code","298f7afd":"code","813732a2":"code","7c5e66c2":"code","2113b214":"code","1ef7dccd":"code","3705b953":"code","eb1945e4":"code","605b642f":"code","990562b9":"code","1236a7b8":"code","5cb46370":"code","c4f7d366":"code","dd642034":"code","7590982e":"code","2619e814":"code","828cfb8e":"code","cbd5dd22":"code","e880bf1b":"code","b1f5191c":"code","92da50af":"code","bf3b233d":"code","46fd2f9e":"code","eb8a4a5d":"code","8874c407":"code","701164f7":"code","6633508f":"code","9be79810":"code","cd24ccf9":"code","09f005b2":"code","fd30adf6":"code","3a447ed5":"code","527ce741":"code","2d1df5c7":"code","81b5e020":"code","5e5d145d":"code","1bbb3954":"code","25ed38da":"markdown","8e8c1f30":"markdown","f6edc602":"markdown","ba761613":"markdown","341b3dbf":"markdown","ef266923":"markdown","e1a394b7":"markdown","ad075ea7":"markdown","dabb64cb":"markdown","212f0951":"markdown","1219cf9b":"markdown","a8e65374":"markdown","2f326736":"markdown","fa4dcb43":"markdown","e83db80a":"markdown","73652bdb":"markdown","381ddf47":"markdown","4427c52e":"markdown","e6576108":"markdown","121b8440":"markdown","49932b79":"markdown","e9bbfadf":"markdown","a0267dbf":"markdown","703c5db1":"markdown","fa67a13c":"markdown","a7265ea8":"markdown","70267f22":"markdown","0785439e":"markdown"},"source":{"80e8bc72":"!pip install ycimpute","156e2254":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom ycimpute.imputer import knnimput\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import plot_confusion_matrix\n\n\nfrom scipy.stats import friedmanchisquare\nfrom statsmodels.stats.contingency_tables import mcnemar","fd0f12fd":"data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndata.head(10)","659b496e":"data.info()","92f81865":"data.describe(include='all').T","8e28f452":"stroke = data[\"stroke\"]\nstroke","c4d2a577":"stroke.describe()","dd7bf941":"# correlation matrix\ncorrmat = data.corr()\ncorrmat","b789082f":"plt.subplots(figsize=(10,7))\nsns.heatmap(corrmat, vmax=1,cmap=\"GnBu\", square=True)","df76155a":"corr_stroke = data.corrwith(stroke, axis=0)\ncorr_stroke = pd.DataFrame(corr_stroke)\ncorr_stroke.rename (columns = {0: 'stroke'}, inplace = True)\n\n#Olu\u015fturulan korelasyon matrisinin g\u00f6rselle\u015ftirilmesi\nplt.subplots(figsize=(10,7))\nsns.set(font_scale=1.1)\nsns.heatmap(corr_stroke, vmax=1, cmap=\"GnBu\",fmt='.4f',annot=True);","91392e6a":"fig = plt.figure(figsize=(14,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\ngender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='gender', hue='stroke', data=data, ax=gender_stroke, palette=\"Set2\")\nsns.despine()\n\ngender_stroke = fig.add_subplot(gs[:2,2:4], sharey=gender_stroke)\nsns.countplot(x='stroke', hue='gender', data=data, ax=gender_stroke, palette=\"Set2\")\nsns.despine()\n\nplt.show()","80b20a4f":"data.groupby('gender')[\"stroke\"].count()","c4e770a3":"data.groupby(['gender', 'stroke'])['stroke'].count()","17945a5f":"fig = plt.figure(figsize=(14,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='work_type', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='work_type', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\n\nplt.show()","e1f47316":"fig = plt.figure(figsize=(14,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='Residence_type', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='Residence_type', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\n\nplt.show()","26c1e67d":"data.groupby(['Residence_type', 'stroke'])['stroke'].count()","b9d69e21":"fig = plt.figure(figsize=(14,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='ever_married', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='ever_married', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nplt.show()","429830c0":"data.groupby(['ever_married', 'stroke'])['stroke'].count()","894e5d3f":"fig = plt.figure(figsize=(16,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='smoking_status', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='smoking_status', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nplt.show()","99116f23":"data['smoking_status'].value_counts()","0b9f316b":"data.groupby(['smoking_status', 'stroke'])['stroke'].count()","a245ef18":"f,ax = plt.subplots(1,2, figsize=(20,10));\n\ndata.loc[data['stroke'] ==0]['age'].plot.hist(ax=ax[0], bins=20, edgecolor='black', color='lightsteelblue');\nax[0].set_title('stroke = 0');\nax1 = list(range(0, 85, 5));\nax[0].set_xticks(ax1);\n\ndata[data['stroke']==1]['age'].plot.hist(ax=ax[1], color='salmon', bins=20, edgecolor='black');\nax[1].set_title('stroke=1');\nx2=list(range(0, 85, 5));\nax[1].set_xticks(x2);\nplt.show();","e469c1a7":"fig = plt.figure(figsize=(16,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='hypertension', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='hypertension', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\n\nplt.show()","a574d22b":"data['hypertension'].value_counts()","53e45f53":"data.groupby(['hypertension', 'stroke'])['stroke'].count()","06cd88e3":"fig = plt.figure(figsize=(16,11))\ngs = fig.add_gridspec(3,4)\nsns.set_style(\"white\")\nsns.set_context(\"poster\", font_scale = 0.5)\n\nax_gender_stroke = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='heart_disease', hue='stroke', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nax_gender_stroke = fig.add_subplot(gs[:2,2:4], sharey=ax_gender_stroke)\nsns.countplot(x='stroke', hue='heart_disease', data=data, ax=ax_gender_stroke, palette='Set2')\nsns.despine()\n\nplt.show()","865ab0a5":"data['heart_disease'].value_counts()","7e677ed6":"data.groupby(['heart_disease', 'stroke'])['stroke'].count()","430a6e64":"sns.kdeplot('avg_glucose_level', data=data, shade=True,color=\"salmon\")\nsns.set_style(\"white\")\nsns.despine()","b9ed4118":"f,ax = plt.subplots(1,2, figsize=(20,10))\n\ndata.loc[data['stroke'] ==0]['avg_glucose_level'].plot.hist(ax=ax[0], bins=20, edgecolor='black', color='lightsteelblue')\nax[0].set_title('stroke = 0')\nax1 = list(range(30, 300, 10))\nax[0].set_xticks(ax1)\n\ndata.loc[data['stroke']==1]['avg_glucose_level'].plot.hist(ax=ax[1], color='salmon', bins=20, edgecolor='black')\nax[1].set_title('stroke=1')\nx2= list(range(30, 300, 10))\nax[1].set_xticks(x2)\nplt.show()","84ac0ed6":"f,ax = plt.subplots(1,2, figsize=(15,7))\n\ndata.loc[data['stroke'] ==0]['bmi'].plot.hist(ax=ax[0], bins=20, edgecolor='black', color='lightsteelblue')\nax[0].set_title('stroke = 0')\nax1 = list(range(0, 70, 5))\nax[0].set_xticks(ax1)\n\ndata.loc[data['stroke']==1]['bmi'].plot.hist(ax=ax[1], color='salmon', bins=20, edgecolor='black')\nax[1].set_title('stroke=1')\nx2= list(range(0, 70, 5))\nax[1].set_xticks(x2)\nplt.show()","7006d6b6":"data = data.drop(\"id\", axis=\"columns\")\ndata.head()","4a1ccdf9":"data_delete = data[data['gender'] == 'Other'].index\ndata.drop(data_delete)","be1e6c8b":"smoking_status = data['smoking_status']\nsmoking_status","af422359":"for index in range(smoking_status.size):\n    if smoking_status.iloc[index] == \"Unknown\":\n        smoking_status.iloc[index] = np.nan\n\nsmoking_status","f66318c9":"total = data.isnull().sum().sort_values(ascending=False)\n\nmissing_data = pd.concat([total], axis=1, keys=['Toplam'])\nmissing_data = missing_data\nmissing_data.head(12)","b8c23a5b":"ever_married = data[\"ever_married\"]\never_married","28eab53e":"for index in range(ever_married.size):\n    if ever_married.iloc[index] == \"Yes\":\n        ever_married.iloc[index] = 1\n    else:\n        ever_married.iloc[index] = 0\n\ndata[\"ever_married\"] = ever_married","8cd02d9e":"data[\"ever_married\"].value_counts()","2ceacd9e":"total = data.isnull().sum().sort_values(ascending=False)\n\nmissing_data = pd.concat([total], axis=1, keys=['Toplam'])\nmissing_data = missing_data\nmissing_data.head(12)","e85a3d50":"data_copy = data.copy()\n\nnumeric_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ncategorial_cols = []\n\nfor col in data_copy.columns:\n    if data_copy[col].dtype not in numeric_dtypes:\n        categorial_cols.append(col)\n    else:\n        continue\n\ndata_dummy = pd.get_dummies(data_copy[categorial_cols])\ndata_copy = data.drop(categorial_cols, axis='columns')\ndata_dummy  = pd.concat([data_copy,data_dummy], axis=1)\n\ndata_dummy.head()","7e9df781":"var_names = list(data_dummy)\narray_data = np.array(data_dummy)\ndata_dummy = knnimput.KNN(k = 4).complete(array_data)\ndata_dummy = pd.DataFrame(data_dummy, columns = var_names)","cb3e13f0":"data_dummy.head(10)","dab86a02":"total = data_knn_dummy.isnull().sum().sort_values(ascending=False)\n\nmissing_data = pd.concat([total], axis=1, keys=['Toplam'])\nmissing_data = missing_data\nmissing_data.head(12)","34c4b82e":"X = data_dummy\ny = stroke\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)\nX_train","6699e24a":"rf_model = RandomForestClassifier()\n\nrf_params = {\"max_depth\": [2,5],\n             \"max_features\": [2,3],\n             \"n_estimators\": [2,5,10,15],\n             \"min_samples_split\": [2,3]}\n\nrf_cv_model = GridSearchCV(rf_model, rf_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)","298f7afd":"print(\"Best Parameters: \" + str(rf_cv_model.best_params_))","813732a2":"data_grid_rf = pd.DataFrame(rf_cv_model.cv_results_)\ndata_grid_rf","7c5e66c2":"rf_best_model=rf_cv_model.best_estimator_\n\n#Best model score\n\nrf_crossVal = rf_cv_model.best_score_\nrf_crossVal","2113b214":"rf_best_model.fit(X_train, y_train)","1ef7dccd":"rf_best_model.score(X_test, y_test)","3705b953":"y_pred_rf = rf_best_model.predict(X_test)\ny_pred_rf","eb1945e4":"svc_model = SVC()\n\nsvc_params = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-6],'C': [2, 10,25]}]\n\nsvc_cv_model = GridSearchCV(svc_model, svc_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)\n","605b642f":"print(\"Best parameters: \" + str(svc_cv_model.best_params_))","990562b9":"data_grid_svc = pd.DataFrame(svc_cv_model.cv_results_)\ndata_grid_svc","1236a7b8":"svc_best_model = svc_cv_model.best_estimator_\n\nsvc_crossVal = svc_cv_model.best_score_\nsvc_crossVal","5cb46370":"svc_best_model.fit(X_train, y_train)","c4f7d366":"svc_best_model.score(X_test, y_test)","dd642034":"y_pred_svc = svc_best_model.predict(X_test)\ny_pred_svc","7590982e":"lg_model = LogisticRegression()\n\nlg_params = {\"C\":np.logspace(-3,-4,4,3,7), \"penalty\":[\"l1\",\"l2\"]}\n\n\nlg_cv_model = GridSearchCV(lg_model, lg_params, cv=10, n_jobs=-1, verbose=2).fit(X_train,y_train)","2619e814":"print(\"Best Parameters: \" + str(lg_cv_model.best_params_))","828cfb8e":"data_grid_lg = pd.DataFrame(lg_cv_model.cv_results_)\ndata_grid_lg","cbd5dd22":"lg_best_model = lg_cv_model.best_estimator_\n\nlg_crossVal = lg_cv_model.best_score_\nlg_crossVal","e880bf1b":"lg_best_model.fit(X_train, y_train)","b1f5191c":"lg_best_model.score(X_test, y_test)","92da50af":"y_pred_lg = lg_best_model.predict(X_test)\ny_pred_lg","bf3b233d":"models = [rf_best_model,svc_best_model,lg_best_model]\n\nfor model in models:\n    name = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*40)\n    print(name + \":\" )\n    print(\"Test Accuracy: {:.4%}\".format(accuracy))\n    plot_confusion_matrix(model,X_test,y_test)\n    plt.show()\n    print(classification_report(y_test,y_pred))","46fd2f9e":"seeds=np.arange(10**4)\nnp.random.shuffle(seeds)\nseeds","eb8a4a5d":"seeds=seeds[:35]\nseeds","8874c407":"accuracy_rf = []\naccuracy_svc = []\naccuracy_lg = []\n\nfor i in seeds:\n    X_train,X_test,y_train,y_tets=train_test_split(X,y,\n                                                  test_size=0.30,\n                                                  random_state=i,\n                                                  stratify=y)\n    rf_best_model.fit(X_train,y_train)\n    rf_i_acc = rf_best_model.score(X_test,y_test)\n    accuracy_rf.append(rf_i_acc)\n    \n    \n    svc_best_model.fit(X_train,y_train)\n    svc_i_acc = svc_best_model.score(X_test,y_test)\n    accuracy_svc.append(svc_i_acc)\n    \n    lg_model.fit(X_train,y_train)\n    lg_acc = lg_model.score(X_test,y_test)\n    accuracy_lg.append(lg_acc)","701164f7":"accuracy_rf","6633508f":"accuracy_svc","9be79810":"accuracy_lg","cd24ccf9":"d = {'rf_accuracy': accuracy_rf, 'svc_accuracy': accuracy_svc,'lg_accuracy': accuracy_lg}\naccuracies = pd.DataFrame(data=d)\naccuracies","09f005b2":"accuracies.describe().T","fd30adf6":"sns.boxplot(data = accuracies, orient=\"h\", palette=\"Set2\")","3a447ed5":"stat, p = friedmanchisquare(accuracy_rf, accuracy_svc ,accuracy_lg)\nprint('Statistics = %.3f, p=%.3f' % (stat, p))\n\nalpha = 0.05\nif p > alpha:\n    print('Same proportions of errors (fail to reject H0)')\nelse:\n    print('Different proportions of errors (reject H0)')","527ce741":"final_model = RandomForestClassifier(max_depth = 5, max_features = 3, n_estimators = 2)\nfinal_tuned = final_model.fit(X_train,y_train)\n\ny_pred_test = final_tuned.predict(X_test)\ny_pred_test","2d1df5c7":"print('Training Accuracy: ',accuracy_score(y_train,final_model.predict(X_train)))\nprint('Test Accuracy: ',accuracy_score(y_test,final_model.predict(X_test)))","81b5e020":"rf_Importance = pd.DataFrame({\"Importance\":final_tuned.feature_importances_*100},index = X_train.columns)\n\ns = rf_Importance.sort_values(by = \"Importance\", axis=0, ascending = False)\ns\n","5e5d145d":"new_train_columns = []\n\nfor index, row in rf_Importance.iterrows():\n    if(row[\"Importance\"] >= 0.06):\n        new_train_columns.append(index)\n    \nnew_train = X_train[new_train_columns]\n\nX_train = new_train\nX_test = X_test[new_train_columns]\nrf_model = RandomForestClassifier(max_depth = 5, max_features = 3, n_estimators = 2)\nrf_tuned = rf_model.fit(X_train,y_train)\n\ny_pred = rf_tuned.predict(X_test)\ny_pred","1bbb3954":"print('Training Accuracy: ',accuracy_score(y_train,rf_model.predict(X_train)))\nprint('Test Accuracy: ',accuracy_score(y_test,rf_model.predict(X_test)))","25ed38da":"**FEATURE SELECTION BY IMPORTANCE**","8e8c1f30":"**Smoking & Stroke**","f6edc602":"People living in rural areas  less prone to stroke than urban residents. It can be said that air pollution in cities may be related to having a stroke.","ba761613":"There is a greater chance of stroke among people who have been married. It can be a meaningful feature.","341b3dbf":"**Hypertension & Stroke**","ef266923":"The \"other\" attribute in the gender column was deleted as an outlier.","e1a394b7":"**LOGISTIC REGRESSION**","ad075ea7":"# MODEL","dabb64cb":"**SUPPORT VECTOR MACHINE**","212f0951":"* **Categorical :** gender, ever_married, work_type, residence_type, smoking_status\n\n* **Numerical :** age, hypertension, heart_disease, avg_glucose_level, bmi\n\nhyoertension & heart_disease have int dtypes, but we can check out that they are in categorical style","1219cf9b":"**Residence & Stroke**","a8e65374":"**BMI**","2f326736":"# DATA CLEANING AND EXAMINATION OF MISSING DATA","fa4dcb43":"Features of hypertension and heart disease have been found to be correlation with stroke.\n\n**Glucose_level**","e83db80a":"Body mass index (BMI) can be defined as the measurement of a person's weight in proportion to his or her weight. In other words, it is obtained by dividing the person's weight in kilograms by the square of their height in meters.\n\nBMI = body weight (kg) \/ (height(m) x height(m))\n\nWe will use KNN to complete the missing data in the BMI column, the first we will create dummy data","73652bdb":"# DATA CHECK\n\n* **id:** unique identifier\n* **gender:** \"Male\", \"Female\" or \"Other\"\n* **age:** age of the patient\n* **hypertension:** 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* **heart_disease:** 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* **ever_married:** \"No\" or \"Yes\"\n* **work_type:** \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* **Residence_type:** \"Rural\" or \"Urban\"\n* **avg_glucose_level:** average glucose level in blood\n* **bmi:** body mass index\n* **smoking_status:** \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"\n* **stroke:** 1 if the patient had a stroke or 0 if not\n* **Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient**","381ddf47":"**BEST MODEL SELECT**","4427c52e":"**Gender & Stroke**","e6576108":"# Exploratory Data Analysis(EDA)\n\nFirst of all, we will look at features based on the target values ( 'stroke').","121b8440":"It can be said that the correlation between stroke and smoking status is low, since the rate of stroke survivors is close between different smoking situations.\n\n**Age & Stroke**","49932b79":"**RANDOM FOREST**","e9bbfadf":"**Ever Married & Stroke**","a0267dbf":"It is seen that the risk of stroke increases with age","703c5db1":"**Heart Disease & Stroke**","fa67a13c":"**Worktype & Stroke**","a7265ea8":"There is a significant difference between the algorithms. Random forest was chosen as the best model because it is the random forest algorithm with the highest average of the prediction values\n\n**FINAL MODEL**","70267f22":"# STROKE PREDICTION\n\nStroke, also known as \"paralysis\", is a sudden interruption or decrease in blood flow to the brain. As a result, brain cells are damaged due to insufficient oxygenation and nutrition in the brain. Brain cells begin to die rapidly.\n\nAccording to the World Health Organization, 15 million people have a stroke each year. Of these, 5 million die and 5 million are permanently disabled, making stroke the second most common cause of death and a major cause of disability.\n\nIf the stroke patient can come to the hospital within the first four and a half hours, one out of 3-9 patients can be saved with thrombolytic (vasodilation) treatment, according to the early admission rate, but this situation cannot be achieved, so the patient is lost or \tbecome permanently disabled. Therefore, it is very important that the risk of stroke can be predicted.","0785439e":"When the graphs above are examined, it is not possible for children to have a stroke. The number of stroke  in private and self-employed groups is similar. However, the probability of people coming under government administration (govt_job) not having a stroke is higher than both classes. Perhaps this can be explained by the degree of pressure felt by the workers."}}