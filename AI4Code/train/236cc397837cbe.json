{"cell_type":{"00c363bb":"code","a93acd3c":"code","aa3f7e9c":"code","9aad28b4":"code","7f361e01":"code","486e9203":"code","3e147103":"code","2b765dde":"code","cfd63d87":"code","e507f15f":"code","0cbfa603":"code","ecdda880":"code","a9bd8bb8":"code","b74fb1d4":"code","4d16abec":"code","5830ee8e":"code","b62bf4dc":"code","879cc92a":"markdown","e1819a69":"markdown","7bc2d845":"markdown","41bc26a3":"markdown","a1fbef38":"markdown","7fc307ca":"markdown","3317ce17":"markdown","d2a28082":"markdown","93020581":"markdown","274ede99":"markdown","0030584a":"markdown","a57a1d5c":"markdown","7d467ef6":"markdown","2db6f79d":"markdown","fd5bd240":"markdown","8cb92a7b":"markdown","d7570caa":"markdown"},"source":{"00c363bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a93acd3c":"import keras\nimport plotly.express as px\nfrom keras import backend as K\nfrom keras.optimizers import Adam\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom keras.models import Sequential\nfrom keras.layers import Activation\nfrom keras.layers.core import Dense,Flatten\nfrom keras.metrics import categorical_crossentropy\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator","aa3f7e9c":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_train.describe()","9aad28b4":"df_train_x = df_train.drop('label',axis =1)\ndf_train_y = df_train[['label']]","7f361e01":"np_train_x = df_train_x.to_numpy().reshape(-1,28,28,1)\nnp_train_y = df_train_y.to_numpy()\nx_train,x_test,y_train,y_test = train_test_split(np_train_x, np_train_y,test_size=0.10,random_state=42)","486e9203":"datagen = ImageDataGenerator(\n    featurewise_center=False,\n    featurewise_std_normalization=False,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.1,\n    horizontal_flip=False,\n    vertical_flip=False,\n    brightness_range = [0.8,1.])\ndatagen.fit(x_train)","3e147103":"model  = Sequential()\nmodel.add(Flatten(input_shape = (28,28,1)))\nmodel.add(Dense(1000,activation = 'relu'))\nmodel.add(Dense(10,activation = 'softmax'))\nmodel.compile(Adam(lr = 0.0001),loss = 'sparse_categorical_crossentropy',\n              metrics = ['accuracy'])\nkeras.utils.plot_model(model, \"Neural_Network.png\", show_shapes=True)","2b765dde":"model.summary()","cfd63d87":"model.fit_generator(datagen.flow(x_train,y_train,batch_size = 30),\n                    steps_per_epoch = 1000,validation_data = (x_test,y_test),\n                    epochs = 50,verbose = 2)","e507f15f":"plot = pd.DataFrame()\nplot['Validation Accuracy'] = model.history.history['val_accuracy']\nplot['Training Accuracy'] = model.history.history['accuracy']\nplot['Validation Loss'] = model.history.history['val_loss']\nplot['Training Loss'] = model.history.history['loss']\nplot['Epoch'] = plot.reset_index()['index']+1\nplot","0cbfa603":"fig = go.Figure()\nfig.add_trace(go.Scatter(x = plot['Epoch'],\n                         y = plot['Training Accuracy'].to_numpy()\/\/.0001\/100,\n                         mode = 'lines+markers',name = 'Training Accuracy',\n                         hovertemplate='The Training Accuracy is: %{y}%<br>'+\n                                   'The Epochs run are: %{x}<extra><\/extra>'))\nfig.add_trace(go.Scatter(x = plot['Epoch'],\n                         y = plot['Validation Accuracy']\/\/.0001\/100,\n                         mode = 'lines+markers',name = 'Validation Accuracy',\n                         hovertemplate='The Validation Accuracy is: %{y}%'+\n                               '<br>The Epochs run are: %{x}<extra><\/extra>'))\nfig.update_layout(title  = 'Change in validation and training accuracy over the epochs',\n                  xaxis_title = 'Epochs run',yaxis_range = [70,100],\n                  yaxis_title = 'Acuuracy (In percentage)')\nfig.show()","ecdda880":"predictions = model.predict_classes(x_test)\ny_test = y_test\nclasses = [0,1,2,3,4,5,6,7,8,9]\n\n\nconfusion_mat = np.zeros((len(classes),len(classes)))\nfor i in range(len(predictions)):\n    confusion_mat[classes.index(predictions[i])][classes.index(y_test[i])]+=1\nconfusion_mat = confusion_mat.T\nconfusion_mat_norm = confusion_mat\/len(y_test)\nconfusion_mat_norm = (confusion_mat_norm\/\/0.0001)\/10000\n\nfig = ff.create_annotated_heatmap(confusion_mat_norm, x=classes, y=classes, \n              annotation_text=confusion_mat_norm,\n              colorscale='Viridis',text = confusion_mat,\n              hovertemplate='Expected Value: %{y}<br>Predicted Value: %{x}'\n                            +'<br>No. of datapoints in this category are:'\n                            +' %{text}<extra><\/extra>')\nfig.update_layout(title_text='<b>Confusion Matrix for the dataset:<\/b>',\n                  xaxis = {'title':'Predicted Values'},width = 900,\n                  yaxis = {'title':'Expected Values','autorange':'reversed'})\nfig.update_traces(showscale = True)\nfig.show()","a9bd8bb8":"df_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndf_test.describe()","b74fb1d4":"np_test = df_test.to_numpy().reshape(-1,28,28,1)\n","4d16abec":"df_test['label'] = model.predict_classes(np_test)","5830ee8e":"a = []\nfor i in range(28000):\n    a.append(i+1)\ndf_test['ImageId'] = a\ndf_test.describe()","b62bf4dc":"df_test[['ImageId','label']].to_csv('submission.csv',index=False)","879cc92a":"## Predicting over test set","e1819a69":"**If you like my notebook, please upvote my work!**\n\n**If you use parts of this notebook in your scripts\/notebooks, giving some kind of credit for instance link back to this notebook would be very much appreciated. Thanks in advance! :)**\n\nThankyou! :) Hope you like my work!","7bc2d845":"## Defining the layers and metrics for the Neural Network","41bc26a3":"## Plotting the confusion matrix","a1fbef38":"## Training the Neural Network","7fc307ca":"## Plotting the training vs testing accuracy","3317ce17":"# Predicting output over the testset.","d2a28082":"## Splitting data into train and test set ","93020581":"## Defining the Image generator function","274ede99":"# Splitting the target and predictor variables.","0030584a":"# Importing important libraries.","a57a1d5c":"## Exporting output to csv","7d467ef6":"We can see that the confusion matrix shows higher values for digits that look similar and might be confusiong to distinguish between and lower values for the digits that are easy to distinguish between.","2db6f79d":"## Processing of the test file ","fd5bd240":"## Reading test file","8cb92a7b":"# Loading the Dataset.","d7570caa":"# Machine Learning Model."}}