{"cell_type":{"8d6e2bfa":"code","991aacc1":"code","7781188c":"code","e9c62f55":"code","093014d2":"code","2ca8e389":"code","7fe78746":"code","3c78f45a":"code","57b7b669":"code","dc468d2f":"code","620ead2b":"code","4633c775":"code","d2f534f5":"code","79bbf73c":"code","591f5b28":"code","2c7366c0":"code","b629bc1b":"code","0af74214":"code","9d7ca678":"code","eac6701e":"code","fdfc3a9d":"code","504031d6":"code","774572e2":"code","9fbe35da":"code","1509a0a9":"code","39a23196":"code","0f5175d3":"code","c9a562c6":"code","07e636b7":"markdown","e6936eac":"markdown","d441abc7":"markdown","7dd256ef":"markdown"},"source":{"8d6e2bfa":"import os\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nimport tensorflow as tf\n\nimport warnings\nwarnings.filterwarnings('ignore')","991aacc1":"image_dir = Path('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')\n\n# Get filepaths and labels\nfilepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepaths').astype(str)\nlabels = pd.Series(labels, name='Labels')\n\n# Concatenate filepaths and labels\nimage_df = pd.concat([filepaths, labels], axis=1)\n\n# Drop GT images\nimage_df = image_df[image_df['Labels'].apply(lambda x: x[-2:] != 'GT')]\n\n# Shuffle the DataFrame and reset index\nimage_df = image_df.sample(frac=1).reset_index(drop = True)\n\n# Show the result\nimage_df.head()","7781188c":"# Separate in train and test data\ntrain_df, test_df = train_test_split(image_df, train_size=0.85, shuffle=True, random_state=1)","e9c62f55":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.15\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","093014d2":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepaths',\n    y_col='Labels',\n    target_size=(120, 120),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=2,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)","2ca8e389":"val_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepaths',\n    y_col='Labels',\n    target_size=(120, 120),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=2,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)","7fe78746":"test_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepaths',\n    y_col='Labels',\n    target_size=(120, 120),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=2,\n    shuffle=False\n)","3c78f45a":"from keras.models import Sequential, Model\nfrom keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D","57b7b669":"input_shape = (224, 224, 3)\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=input_shape ),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(9, activation='softmax')\n])\n\nmodel.summary()","dc468d2f":"from tensorflow.keras.optimizers import Adam\nmodel.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=[\"accuracy\"])\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=4)\n\nhistory = model.fit(train_images, validation_data=val_images, epochs=5, callbacks=callback)","620ead2b":"!pip install -q -U keras-tuner","4633c775":"import kerastuner as kt\nfrom keras_tuner import RandomSearch, BayesianOptimization\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, BatchNormalization, Activation,Dropout\nfrom tensorflow.keras.losses import sparse_categorical_crossentropy\nfrom tensorflow.keras.optimizers import Adam","d2f534f5":"def build_model(hp):\n    # create model object\n    model = keras.Sequential()\n    model.add(Conv2D(64, (3,3), activation='relu', input_shape=input_shape))\n    for i in range(hp.Int(\"num_layers\", 1, 3)): \n        model.add(Conv2D(64, (3,3), activation='relu',strides=(2, 2)))\n        \n    model.add(Flatten())\n    model.add(Dense(128))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n    model.add(Dense(9, activation = 'softmax'))\n     \n    learning_rate = hp.Float(\"lr\", min_value=1e-5, max_value=1e-2, sampling=\"log\")\n    model.compile(optimizer=keras.optimizers.Adam(learning_rate),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n    return model","79bbf73c":"tuner =  BayesianOptimization(\n    build_model,\n    objective=\"val_accuracy\",\n    max_trials=10,\n    executions_per_trial=1,    overwrite=True,)","591f5b28":"tuner.search(train_images,\n                validation_data = val_images,epochs=4)","2c7366c0":"models = tuner.get_best_models(num_models=5)","b629bc1b":"pred1 = []\nfor i in range(5):\n  y=models[i].predict(test_images)\n  pred1.append(y)\n  ","0af74214":"pred1 = []\nfor i in range(5):\n  y=models[i].evaluate(test_images)\n  pred1.append(y)","9d7ca678":"pred1 = []\nfor i in range(5):\n  y=models[i].predict(test_images)\n  pred1.append(y)","eac6701e":"predictions= np.mean(pred1,axis=0)\npredict=np.argmax(predictions,axis=1)","fdfc3a9d":"import sklearn.metrics\nfrom sklearn.metrics import accuracy_score","504031d6":"accuracy_score(test_images.labels,predict)","774572e2":"from bayes_opt import BayesianOptimization","9fbe35da":"pbounds = {'lr': (0.0, 0.1),\n           'totalnumlay': (1, 5)\n           }\n","1509a0a9":"input_shape = (120, 120, 3)","39a23196":"def generate_model(totalnumlay):\n\n    model = Sequential()\n    model.add(Conv2D(64, (3,3), activation='relu', input_shape=input_shape))\n    layer = 0\n    while  layer< int(totalnumlay):\n        # The first (0th) layer needs an input input_dim(neuronCount)\n        model.add(Conv2D(64, (3,3), activation='relu', input_shape=input_shape))\n        layer += 1\n    model.add(Flatten())\n    model.add(Dense(512,activation='relu'))\n    model.add(Dense(9,activation='softmax')) # Output\n    return model","0f5175d3":"def evaluate_network(totalnumlay,lr):\n        model = generate_model(totalnumlay)\n        model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=lr),metrics=['accuracy'])\n\n        \n        model.fit(train_images, validation_data=val_images, epochs=2, verbose = 0)\n\n\n        # Predict on the out of boot (validation)\n        pred = model.evaluate(x_test)\n        m1 = 1-pred        \n        tensorflow.keras.backend.clear_session()\n        return (m1)","c9a562c6":"optimizer = BayesianOptimization(\n    f=evaluate_network,\n    pbounds=pbounds,\n      # verbose = 1 prints only when a maximum \n    # is observed, verbose = 0 is silent\n    random_state=1,\n)\noptimizer.maximize(init_points=2, n_iter=2,)","07e636b7":"Bayesian Optimisation","e6936eac":"Vanilla CNN","d441abc7":"Bayesopt TF","7dd256ef":"Hyperparameter tuner "}}