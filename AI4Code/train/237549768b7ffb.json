{"cell_type":{"f5189930":"code","ade09181":"code","ed153c5b":"code","3eb6df71":"code","44492392":"code","af39e067":"code","d730cd1a":"code","8a22f97a":"code","1789bae6":"code","b4604750":"code","1b42c405":"code","5cc74bab":"code","a12d73f4":"code","9308fd4e":"code","b29b60e2":"code","62a84000":"markdown","19a0989d":"markdown","8dd8ed83":"markdown","c49805c1":"markdown","80fdd119":"markdown","b1b7667f":"markdown","efa2a0b1":"markdown","bee2b47c":"markdown","8c44f52a":"markdown","637853d7":"markdown","47ad3242":"markdown","0cbe4846":"markdown","175ba136":"markdown","eadb1f74":"markdown","5bf562fe":"markdown","76f73e0a":"markdown"},"source":{"f5189930":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","ade09181":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ed153c5b":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","3eb6df71":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","44492392":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","af39e067":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Deliveries.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Deliveries.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Deliveries.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d730cd1a":"df1.head(5)","8a22f97a":"plotPerColumnDistribution(df1, 10, 5)","1789bae6":"plotCorrelationMatrix(df1, 8)","b4604750":"plotScatterMatrix(df1, 20, 10)","1b42c405":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Matches.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Matches.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'Matches.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","5cc74bab":"df2.head(5)","a12d73f4":"plotPerColumnDistribution(df2, 10, 5)","9308fd4e":"plotCorrelationMatrix(df2, 8)","b29b60e2":"plotScatterMatrix(df2, 15, 10)","62a84000":"### Let's check 2nd file: \/kaggle\/input\/Matches.csv","19a0989d":"Scatter and density plots:","8dd8ed83":"Correlation matrix:","c49805c1":"## Introduction\n\nAnalyzing the IPL records of the major teams \ud83c\udfcf\n\nThe\u00a0Indian Premier League\u00a0(IPL) is a professional\u00a0Twenty20 cricket\u00a0league in\u00a0India\u00a0contested during March or April and May of every year by eight teams representing eight different cities in India.\u00a0The league was founded by the\u00a0Board of Control for Cricket in India\u00a0(BCCI) in 2008. The IPL has an exclusive window in\u00a0ICC Future Tours Programme.\nThe Dataset includes all Indian Premier League Cricket matches between 2008 and 2017 and contains files \u2013      \nmatches.csv - contains details related to the match such as location, contesting teams, umpires, results, etc.  \ndeliveries.csv - contains ball-by-ball data of all the IPL matches including data of the batting team, batsman, bowler, non-striker, runs scored, etc.","80fdd119":"### Let's check 1st file: \/kaggle\/input\/Deliveries.csv","b1b7667f":"Let's take a quick look at what the data looks like:","efa2a0b1":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made.","bee2b47c":"Scatter and density plots:","8c44f52a":"There are 2 csv files in the current version of the dataset:\n","637853d7":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","47ad3242":"## Conclusion\nThis concludes starter analysis!","0cbe4846":"Let's take a quick look at what the data looks like:","175ba136":"Now you're ready to read in the data and use the plotting functions to visualize the data.","eadb1f74":"Correlation matrix:","5bf562fe":"Distribution graphs (histogram\/bar graph) of sampled columns:","76f73e0a":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}