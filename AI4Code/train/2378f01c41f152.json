{"cell_type":{"d69af802":"code","917c47c7":"code","c06f3442":"code","dce75166":"code","7e5d9824":"code","ef9ee50f":"code","229e543e":"code","9f3fa773":"code","39c23347":"code","4f4bf124":"code","2bcdc42b":"code","bbd3f48b":"code","2747c175":"code","6746500d":"code","abd856bb":"code","c068933c":"code","a4645ceb":"code","602ef468":"code","3a8790e7":"code","4bbd86b8":"code","ac2f379e":"code","d0063e1c":"code","5ac19b2a":"code","32d50d49":"code","37881fa3":"code","7949a04a":"code","6d80bf26":"code","e9d2b12b":"code","585beba5":"code","a91d7e02":"code","d7d6b599":"code","d094435e":"code","f90f8dce":"code","602a2509":"code","3f7ceefe":"markdown","36d406b7":"markdown","26aa87bf":"markdown","f151966f":"markdown","f97afccb":"markdown","613620ab":"markdown","ddc322a3":"markdown","f9d79f53":"markdown","91f467c8":"markdown","0ee9dec2":"markdown","b693cd12":"markdown","ac0a9ed3":"markdown","7a66d9ab":"markdown","a51f48c1":"markdown","f55685a7":"markdown","b9b34011":"markdown","d4cf6839":"markdown","5329a6a7":"markdown"},"source":{"d69af802":"%matplotlib inline","917c47c7":"## Load necessary packages ##\n\nimport os\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom scipy.spatial.distance import pdist,squareform\nfrom scipy.stats import chisquare\nfrom tqdm.autonotebook import tqdm\nfrom matplotlib import pyplot as plt\nfrom matplotlib import cm\nfrom glob import glob\nfrom tqdm.autonotebook import tqdm\nfrom datetime import timedelta\nfrom shapely.geometry import LineString, Point\nfrom toolz.itertoolz import sliding_window\nfrom itertools import combinations\n\nsns.set_style('darkgrid')","c06f3442":"# distance to mph\ndis2mph = 10 * 3600 \/ 1760 ","dce75166":"## Read in auxiliary data ##\n\nreview = pd.read_csv('..\/input\/video_review.csv')\nplayers = pd.read_csv('..\/input\/player_punt_data.csv').drop_duplicates('GSISID').set_index('GSISID')['Position']\nplayers_all = pd.read_csv('..\/input\/player_punt_data.csv')\nroles = pd.read_csv('..\/input\/play_player_role_data.csv')","7e5d9824":"## Group the roles ##\n\nroles['RoleGroup'] = ''\nroles.loc[roles.Role == 'P','RoleGroup'] = 'P'\nroles.loc[roles.Role == 'PR','RoleGroup'] = 'PR'\nroles.loc[roles.Role == 'PFB','RoleGroup'] = 'PFB'\nroles.loc[roles.Role.str[0] == 'G','RoleGroup'] = 'G'\nroles.loc[roles.Role.str[0] == 'V','RoleGroup'] = 'V'\nroles.loc[roles.RoleGroup == '','RoleGroup'] = 'Line'\n\nroles.head()","ef9ee50f":"review.Player_Activity_Derived.value_counts().plot.bar()\nplt.show()","229e543e":"review.Friendly_Fire.value_counts().plot.bar()\nplt.show()","9f3fa773":"review.Turnover_Related.value_counts().plot.bar()\nplt.show()","39c23347":"review.Primary_Impact_Type.value_counts().plot.bar()\nplt.show()","4f4bf124":"review.Primary_Partner_Activity_Derived.value_counts().plot.bar()\nplt.show()","2bcdc42b":"## Add player information to the review data ##\n\nreview = pd.read_csv('..\/input\/video_review.csv')\nreview = review.merge(players.reset_index(), on='GSISID', how='inner')\nreview = review.merge(roles, on=['Season_Year','GameKey','PlayID','GSISID'], how='inner')\nreview.head()","bbd3f48b":"review.Role.value_counts().plot.bar()\nplt.figure()\nreview.RoleGroup.value_counts().plot.bar()\nplt.show()","2747c175":"rcounts = pd.DataFrame(roles.groupby(['Season_Year','GameKey','PlayID','RoleGroup'])['Role'].count()).reset_index()\nrave = pd.DataFrame(rcounts.groupby(['RoleGroup'])['Role'].mean()).reset_index()\nrave['Expected'] = rave.Role\/22*review.shape[0]\n\nEC = pd.DataFrame(review.RoleGroup.value_counts()).reset_index()\nEC.columns = ['RoleGroup','Observed']\n\nrave = rave.merge(EC, on='RoleGroup', how='inner')\n\nXstat, Xp = chisquare(rave.Observed, f_exp=rave.Expected)\nprint('Goodnees of fit p-value = %3f' %Xp)\n\nrave","6746500d":"review['Possible_Cause'] = ['pushed from behind','engaged','poor tackling','poor tackling','pushed from side','poor blocking',\\\n                           'poor blocking','engaged friendly fire','pile up','','','collision',\\\n                           'poor tackling','illegal hit','turnover','poor blocking','poor tackling','engaged',\\\n                           'friendly fire','poor tackling','poor blocking','poor blocking','friendly cross fire','collision',\\\n                           'poor tackling','collision','poor tackling','poor blocking','friendly fire','collision',\\\n                            'poor blocking','poor blocking','poor tackling','poor blocking','collision','poor blocking',\\\n                           'poor tackling']\nreview['Blindsided'] = ['No','Yes','No','No','Yes','No',\\\n                       'No','Yes','No','','','Yes',\\\n                       'No','Yes','No','No','No','Yes',\\\n                       'No','No','No','Yes','No','Yes',\\\n                       'No','No','No','Yes','No','No',\\\n                        'Yes','No','No','Yes','No','No',\\\n                       'No']\n\n## Note: Mislabeling exists on the player jersey number and friendly fire was missed when a player was pushed into another\n\nreview[['GameKey', 'PlayID', 'Possible_Cause', 'Blindsided']]\n#review","abd856bb":"## Summary table of hand curated labels\n\npd.crosstab(review.Possible_Cause, review.Blindsided, margins=True)","c068933c":"pos = ['DE', 'DT', 'NT', 'LB', 'ILB', 'OLB', 'MLB', 'CB', 'S', 'FS', 'SS', \\\n       'QB', 'RB', 'FB', 'WR', 'TE', 'OL', \\\n       'K', 'P', 'LS']\nwgt = [283.1, 312.8, 312.8, 246.0, 246.0, (283.1+246.0)\/2, 246.0, 200.2, 200.2, 200.2, 200.2, \\\n       224.1, 220.2, 220.2, 222.4, 222.4, 314.0, \\\n       202.3, 213.2, 245.3]\n\nsuppl = pd.DataFrame(pos)\nsuppl.columns = ['position']\nsuppl['weight'] = wgt\n\nsuppl","a4645ceb":"def viz_play(iplay, gamekey, playid):\n    prole = roles.query('GameKey == @gamekey and PlayID == @playid')\n    long_snapper = prole.query('Role == \"PLS\"').GSISID.iloc[0]\n    punter = prole.query('Role == \"P\"').GSISID.iloc[0]\n    iplay = iplay.query('GSISID in @prole.GSISID')\n    assert len(iplay.GSISID.unique()) <= 22\n    iplay.Time = pd.to_datetime(iplay.Time)\n    iplay = iplay.sort_values('Time')\n\n    scrimmage = iplay.query('GSISID == @long_snapper and Event == \"ball_snap\"').x.iloc[0]\n\n    flip = 1\n    punter = iplay.query('GSISID == @punter and Event == \"ball_snap\"').x.iloc[0]\n    if punter > scrimmage:\n        flip = -1\n\n    rplay = review.query('GameKey == @gamekey and PlayID == @playid')\n\n    snap = iplay.query('Event == \"ball_snap\"').Time.iloc[0]\n    end = iplay.query('Event in [\"tackle\", \"punt_downed\", \"out_of_bounds\", \"fair_catch\", \"touchdown\"]').Time.iloc[-1] + timedelta(seconds=1.5)\n\n    iplay = iplay[iplay.Time.between(snap, end)]\n\n    for x, player in iplay.groupby('GSISID'):\n        viridis = cm.viridis(np.linspace(0, 1, player.shape[0]))\n        plasma = cm.plasma(np.linspace(0, 1, player.shape[0]))\n        cividis = cm.cividis(np.linspace(0, 1, player.shape[0]))\n        inferno = cm.inferno(np.linspace(0, 1, player.shape[0]))\n        colors = cividis\n        alpha = 0.1\n        zorder = 0\n        if int(rplay.iloc[0].GSISID) == x:\n            colors = viridis\n            alpha = .6\n            zorder = 2\n        if (rplay.Primary_Partner_GSISID.notnull().iloc[0]\n            and rplay.Primary_Partner_GSISID.iloc[0] != 'Unclear' \n            and int(rplay.Primary_Partner_GSISID.iloc[0]) == x):\n            colors = plasma\n            alpha = .6\n            zorder = 1\n        plt.scatter(-flip * player.y + (flip > 0) * 53.3, flip * (player.x - scrimmage), c=colors, alpha=alpha, zorder=zorder)\n    plt.xlim(-3, 55)\n    plt.title(f'gamekey {gamekey} playid {playid}')\n    plt.tight_layout()","602ef468":"def get_collisions(play, gamekey, playid, start, end, prole):\n    total = (end - start).total_seconds() \/ 0.1 - 1\n    data = []\n    blocks = []\n    timepoints = 2\n    prev = set()\n    for ts in tqdm(sliding_window(timepoints, play[play.Time.between(start, end)].Time.unique()), total=total, leave=False):\n        new_prev = set()\n        rev = review.query('GameKey == @gamekey and PlayID == @playid')\n        try:\n            injpair = set([int(rev.GSISID), int(rev.Primary_Partner_GSISID)])\n        except ValueError:\n            injpair = -1\n        iframe = play.query('Time == @ts[1]').sort_values('GSISID')\n        gsis_s = iframe.GSISID.values.astype(int)\n        pairs = squareform(pdist(iframe[['x', 'y']])) < 5\n        for i, j in zip(*pairs.nonzero()):\n            if i >= j:\n                continue\n            gsis1 = gsis_s[i]\n            gsis2 = gsis_s[j]\n            assert gsis1 < gsis2\n\n            locs1 = play.query('Time in @ts and GSISID == @gsis1')\n            if locs1.shape[0] != timepoints:\n                continue\n            locs2 = play.query('Time in @ts and GSISID == @gsis2')\n            if locs2.shape[0] != timepoints:\n                continue\n            x1 = locs1[['x', 'y']].values\n            nx1 = locs1[['nx', 'ny']].values\n            # sometimes players slow down so need 2x diff e.g game 448 play 2792\n            #ls1 = LineString(np.append(x1[-1], np.diff(x1, axis=0) + x1[-1, :], 0))\n            ls1 = LineString(np.c_[x1[-1], 2*np.diff(x1, axis=0).ravel() + x1[-1, :]].T)\n            x2 = locs2[['x', 'y']].values\n            nx2 = locs2[['nx', 'ny']].values\n            #ls2 = LineString(np.append(x2[-1], np.diff(x2, axis=0) + x2[-1, :], 0))\n            ls2 = LineString(np.c_[x2[-1], 2*np.diff(x2, axis=0).ravel() + x2[-1, :]].T)\n            if ((Point(x1[0]).distance(Point(x2[0])) < 1.5)\n                and ((np.abs(np.diff(x1, axis=0) - np.diff(x2, axis=0))).sum() < 0.25)):\n                spd1 = locs1.iloc[0].dis * dis2mph\n                spd2 = locs2.iloc[0].dis * dis2mph\n                ang1 = np.rad2deg(np.arctan2(*locs1.iloc[:2][['x', 'y']].diff().iloc[1].values))\n                ang2 = np.rad2deg(np.arctan2(*locs2.iloc[:2][['x', 'y']].diff().iloc[1].values))\n                x = ang1 - ang2\n                diffa = min(x % 360, abs((x % 360) - 360) % 360)\n                pos1 = players.loc[gsis1]\n                pos2 = players.loc[gsis2]\n                    \n                blocks.append({\n                    'gamekey': gamekey,\n                    'playid': playid,\n                    'x': np.mean([x2[-1, 0], x1[-1, 0]]),\n                    'y': np.mean([x2[-1, 1], x1[-1, 1]]),\n                    'nx': np.mean([nx2[-1, 0], nx1[-1, 0]]),\n                    'ny': np.mean([nx2[-1, 1], nx1[-1, 1]]),\n                    'gsis1': gsis1,\n                    'role1': prole.loc[gsis1, 'Role'],\n                    'position1': pos1,\n                    'gsis2': gsis2,\n                    'role2': prole.loc[gsis2, 'Role'],\n                    'position2': pos2,\n                    'spd1': spd1,\n                    'spd2': spd2,\n                    'time': pd.to_datetime(ts[1]),\n                    'angle1': ang1,\n                    'angle2': ang2,\n                    'angle_diff': diffa,\n                })\n            if ls1.distance(ls2) < 0.5 and Point(x1[0]).distance(Point(x2[0])) > 1.0:\n                new_prev.add((gsis1, gsis2))\n                if (gsis1, gsis2) not in prev:\n                \n                    spd1 = locs1.iloc[0].dis * dis2mph\n                    spd2 = locs2.iloc[0].dis * dis2mph\n                    ang1 = np.rad2deg(np.arctan2(*locs1.iloc[:2][['x', 'y']].diff().iloc[1].values))\n                    ang2 = np.rad2deg(np.arctan2(*locs2.iloc[:2][['x', 'y']].diff().iloc[1].values))\n                    x = ang1 - ang2\n                    diffa = min(x % 360, abs((x % 360) - 360) % 360)\n                    #ix = ls1.intersection(ls2)\n\n                    pos1 = players.loc[gsis1]\n                    pos2 = players.loc[gsis2]\n\n    #                 if set([gsis1, gsis2]) == injpair:\n    #                     print(list(ls1.coords()))\n\n                    data.append({\n                        'gamekey': gamekey,\n                        'playid': playid,\n                        'x': np.mean([x2[-1, 0], x1[-1, 0]]),\n                        'y': np.mean([x2[-1, 1], x1[-1, 1]]),\n                        'nx': np.mean([nx2[-1, 0], nx1[-1, 0]]),\n                        'ny': np.mean([nx2[-1, 1], nx1[-1, 1]]),\n                        'gsis1': gsis1,\n                        'role1': prole.loc[gsis1, 'Role'],\n                        'position1': pos1,\n                        'gsis2': gsis2,\n                        'role2': prole.loc[gsis2, 'Role'],\n                        'position2': pos2,\n                        'spd1': spd1,\n                        'spd2': spd2,\n                        'time': pd.to_datetime(ts[1]),\n                        'angle1': ang1,\n                        'angle2': ang2,\n                        'angle_diff': diffa,\n                        'injury': set([gsis1, gsis2]) == injpair\n                    })\n        prev = new_prev\n    data = pd.DataFrame(data)\n    blocks = pd.DataFrame(blocks)\n    return data, blocks","3a8790e7":"## Vizualize motion ##\n\nplays = pd.read_csv('..\/input\/NGS-2016-reg-wk13-17.csv')\ngamekey, playid = 281, 1526\nviz_play(plays.query('GameKey == @gamekey and PlayID == @playid'), gamekey, playid)","4bbd86b8":"all_blocks = []\nall_collisions = []\nfor ngs in tqdm(glob('..\/input\/NGS*.csv')):\n    plays = pd.read_csv(ngs)\n    for (gamekey, playid), play in tqdm(plays.merge(review[['GameKey', 'PlayID']]).groupby(['GameKey', 'PlayID']), leave=False):\n        if play.empty:\n            continue\n        play.Time = pd.to_datetime(play.Time)\n        \n        \n        prole = roles.query('GameKey == @gamekey and PlayID == @playid')\n        long_snapper = prole.query('Role == \"PLS\"').GSISID.iloc[0]\n        punter = prole.query('Role == \"P\"').GSISID.iloc[0]\n        scrimmage = play.query('GSISID == @long_snapper and Event == \"ball_snap\"').x.iloc[0]\n\n        flip = 1\n        punter = play.query('GSISID == @punter and Event == \"ball_snap\"').x.iloc[0]\n        if punter > scrimmage:\n            flip = -1\n            \n        play['nx'] = -flip * play.y + (flip > 0) * 53.3\n        play['ny'] = flip * (play.x - scrimmage)\n            \n        start = play.query('Event == \"ball_snap\"').Time.iloc[0]\n        end = play.query('Event in [\"tackle\", \"punt_downed\", \"out_of_bounds\", \"fair_catch\", \"touchdown\"]').Time.iloc[-1] + timedelta(seconds=1.5)\n\n        prole = roles.query('GameKey == @gamekey and PlayID == @playid')[['GSISID', 'Role']]\n        play = play.merge(prole, on=('GSISID'))\n        prole = prole.set_index('GSISID')\n        #play = play.sort_values(by=('Time', 'GSISID'))\n        play = play.sort_values(['Time', 'GSISID'])\n\n        a, b = get_collisions(play, gamekey, playid, start, end, prole)\n        all_collisions.append(a)\n        all_blocks.append(b)","ac2f379e":"collisions = pd.concat(all_collisions, ignore_index=True)\n#blocks = pd.concat(all_blocks, ignore_index=True)","d0063e1c":"## Data Engineering ##\ncollisions['sumspd'] = collisions.spd1 + collisions.spd2\ncollisions['maxspd'] = collisions[['spd1','spd2']].max(axis=1)\ncollisions['position'] = collisions.position1 + '-' + collisions.position2\ncollisions['role'] = collisions.role1 + '-' + collisions.role2\n\n## Add auxiliary information ##\npunt = collisions.merge(review, left_on=['gamekey','playid'], right_on=['GameKey','PlayID'], how='inner')","5ac19b2a":"print(punt.shape)\nprint('%i concussion collisions detected' %sum(punt.injury))\npunt.head()","32d50d49":"punt_wgt = punt.merge(suppl, left_on='position1', right_on='position', how='outer')\npunt_wgt = punt_wgt.merge(suppl, left_on='position2', right_on='position', how='outer')\npunt_wgt['weight_diff'] = abs(punt_wgt.weight_y - punt_wgt.weight_x)\n\npunt_wgt = punt_wgt.dropna(subset=['angle1', 'angle2'])\npunt_wgt = punt_wgt.reset_index(drop=True)\n\nprint(punt_wgt.shape)\npunt_wgt.tail()","37881fa3":"sns.scatterplot(x='angle_diff', y='maxspd', hue='injury', style='injury', data=punt, s=100)\nplt.ylabel('Maximum Speed')\nplt.xlabel('Angle Difference')\nplt.show()","7949a04a":"sns.scatterplot(x='angle_diff', y='sumspd', hue='injury', style='injury', data=punt, s=100)\nplt.ylabel('Combined Speed')\nplt.xlabel('Angle Difference')\nplt.show()","6d80bf26":"sns.scatterplot(data=punt_wgt, x='angle_diff', y='sumspd', size='weight_diff', style='injury', hue='injury')\nplt.xlabel('Angle Difference')\nplt.ylabel('Combined Speed')\nplt.show()","e9d2b12b":"X = np.vstack((punt.angle_diff, punt.sumspd, punt.angle_diff*punt.sumspd)).T\ny = punt.injury\nalpha = 0.1\n\nprint(X.shape, y.shape)","585beba5":"clf_cv = LogisticRegressionCV(cv=5, random_state=0).fit(X, y)\n\n\n#inj_clf_cv = clf_cv.predict(X)\ninj_clf_cv = clf_cv.predict_proba(X)[:,1] > alpha\n\n\nprint(classification_report(y,inj_clf_cv))\nprint(confusion_matrix(y,inj_clf_cv))","a91d7e02":"# Parameters\nn_classes = 2\nplot_colors = \"ryb\"\nplot_step = 0.02\n\nplt.figure(figsize=(6,5))\n\nx_min, x_max = X[:, 0].min() - .1, X[:, 0].max() + .1\ny_min, y_max = X[:, 1].min() - .1, X[:, 1].max() + .1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step))\n\n\nZ = clf_cv.predict(np.c_[xx.ravel(), yy.ravel(), xx.ravel()*yy.ravel()])\nZ = clf_cv.predict_proba(np.c_[xx.ravel(), yy.ravel(), xx.ravel()*yy.ravel()])[:,1] > alpha\nZ = Z.reshape(xx.shape)\ncs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\n\nplt.ylabel('Speed')\nplt.xlabel('Angle')\n\n\n\n# Plot the training points\nfor i, color in zip(range(n_classes), plot_colors):\n    idx = np.where(y == i)\n    plt.scatter(X[idx, 0], X[idx, 1], c=color, cmap=plt.cm.RdYlBu, edgecolor='black', s=15)\n\nplt.grid(True)\nplt.ylabel(\"Combined Speed\")\nplt.xlabel(\"Angle Difference\")\nplt.title('Concussion Probability Regions')\nplt.show()","d7d6b599":"punt_sub = punt.query('Possible_Cause != \"poor tackling\" & Possible_Cause != \"poor blocking\" & Possible_Cause != \"illegal hit\" & Possible_Cause != \"pushed from behind\" & Possible_Cause != \"pushed from side\"')\nprint('%i concussion collisions detected' %sum(punt_sub.injury))\npunt_sub.shape","d094435e":"X = np.vstack((punt_sub.angle_diff, punt_sub.sumspd, punt_sub.angle_diff*punt_sub.sumspd)).T\ny = punt_sub.injury\nalpha = 0.1\n\nprint(X.shape, y.shape)\n\nclf_cv = LogisticRegressionCV(cv=5, random_state=0).fit(X, y)\n\n\n#inj_clf_cv = clf_cv.predict(X)\ninj_clf_cv = clf_cv.predict_proba(X)[:,1] > alpha\n\n\nprint(classification_report(y,inj_clf_cv))\nprint(confusion_matrix(y,inj_clf_cv))","f90f8dce":"# Parameters\nn_classes = 2\nplot_colors = \"ryb\"\nplot_step = 0.02\n\nplt.figure(figsize=(6,5))\n\nx_min, x_max = X[:, 0].min() - .1, X[:, 0].max() + .1\ny_min, y_max = X[:, 1].min() - .1, X[:, 1].max() + .1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, plot_step), np.arange(y_min, y_max, plot_step))\n\n\nZ = clf_cv.predict(np.c_[xx.ravel(), yy.ravel(), xx.ravel()*yy.ravel()])\nZ = clf_cv.predict_proba(np.c_[xx.ravel(), yy.ravel(), xx.ravel()*yy.ravel()])[:,1] > alpha\nZ = Z.reshape(xx.shape)\ncs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\n\nplt.ylabel('Speed')\nplt.xlabel('Angle')\n\n\n\n# Plot the training points\nfor i, color in zip(range(n_classes), plot_colors):\n    idx = np.where(y == i)\n    plt.scatter(X[idx, 0], X[idx, 1], c=color, cmap=plt.cm.RdYlBu, edgecolor='black', s=15)\n\nplt.grid(True)\nplt.ylabel(\"Combined Speed\")\nplt.xlabel(\"Angle Difference\")\nplt.title('Concussion Probability Regions')\nplt.show()","602a2509":"sns.scatterplot(x='nx', y='ny', data=collisions.query('injury == False'), color='blue', s=70, alpha=0.5, label='normal')\nsns.scatterplot(x='nx', y='ny', data=collisions.query('injury == True'), color='red', s=70, alpha=1.0, label='injury')\nplt.title('Relative location of injuries')\nplt.ylabel('distance down field')\nplt.xlabel('width of field')\nplt.show()","3f7ceefe":"### Observation 2\n\nAnother highly likely cause for concussion is being blindsided (11\/35). The remaining causes vary but tend to be the result of routine collisions or unavoidable contact. Players are taught to \"keep their head on a swivel\", but not everyone is adept at this. \n\nSince a concussion is caused from a blow to the head, in extreme cases causing the brain to be jolted within the skull, it seems that the best way to prevent concussions is the reduce the likelihood of these violent hits. What makes a hit violent is the amount of force exerted on the hit, so following this logic, we should consider the speed, direction, and mass of players involved in collisions.\n","36d406b7":"## Data Augmentation\n\nSince the descriptions for the incidents are not particularly informative, I reviewed each video individually to assess whether I could determine the primary reason for the concussion. My hand labels are provided below. When I could not determine where or how the concussion occurred, the entry was left blank.\n\nSome basic definitions:\n- Collision = standard hit, nothing unusual observed\n- Engaged = the would-be tackler is being blocked by one opponent when another opponent delivers and extra hit\n- Friendly Fire = hit by a teammate, likely difficult to avoid\n- Pile up = another tackler adding to the tackle once the returner is\/appears to be down or going down\n- Poor blocking\/tackling = technique that would endanger the blocker\/blocked\/tackler\/tackled, especially hits to the head\n- Pushed from behind\/side = the player is pushed into a concussion by the opponent, either from behind (illegal) or from the side","26aa87bf":"Note that not all concussion hits could be detected using the heuristic algorithm developed above. However, I was able to locate 31\/37 such hits.","f151966f":"To create more interesting slices of the data, we grouped the punt and punt return formations into the following categories:\n- Punter (P)\n- Punt Returner (PR)\n- PFB\n- Gunners (G)\n- Corners (V)\n- Players along or near the line (Line)","f97afccb":"### Observation 3\n\nTo reduce the rate of concussion on punt returns, we need to reduce the potential for violent hits, here defined as large speeds from significantly different angles of motion. But how and where do these hits occurs?\n\nBelow is a plot of all collisions and their relative location to the line of scrimmage. Although all positions are susceptible to a violent hit, it is obvious that these hits typically occur down field in a region near to the returner. The best approach to improving player safety, therefore, is reduce contact with or near the returner.\n\nNote that this plot also supports the previously suggested rule change of having the Down Judge and Line Judge monitor more activity down field.","613620ab":"### Rule Change 2\n\nFair Catch: Rule 10. Section 2. Article 1.\nAward the receiving team an additional 5 yards from the spot of reception if a fair catch is called for and successfully received. Optional: Do not award the additional 5 yards if the punt is received within a team's own 5 yard line.\n\n#### Motivation\n\nThis will reduce the number of punt plays where a return happens. The returner is incentivized to take the fair catch because he is guaranteed 5 yards. The returner will only return the ball when he has plenty of cushion and thus is not in danger of getting hit immediately. Injuries are dramatically less likely when the return doesn\u2019t happen.\n\n\n\n### Rule Change 3\n\nPunt Out of Bounds: Rule 9. Section 4. Article 4.\nAward the kicking team the shorter of 5 yards or half the distance to the goal line if the punt travels out of bounds.\n\n#### Motivation\n\nThis will reduce the number of punt plays where a return happens. The punter is incentivized to kick the ball out of bounds because the kicking team will receive an extra five yards and guaranteed no return yards. Punts without returns have dramatically lower probability of resulting in injuries.\n\n\n\n\n## Conclusion\n\nAdding a potential 5 yard reward for both the kicking and receiving teams will not improve player safety, but add a layer of intrigue to the punt return. Instead of the common concerns fans have while watching the punt returns, namely injuries, penalties, and turnovers, the precision of punters will be on full display, testing how close a punter can put the ball to the sideline without entering the field of play. The returner will be challenged to make tip-toe sideline catches in order to gain the extra 5 yards and will need to think carefully about not catching the ball when it sails beyond their own 10 yard line.\n\nIn the event that a punt returner decides to catch and return the punt, however, the added support of sideline judges near the action should help catch unnecessary roughness and, hopefully, increase the rate of safe and clean play. Also, by excluding fair catches within a team's own 5 yard line, the excitement of a punt downed near the goal line and the potential for a safety will remain.\n","ddc322a3":"The plot below includes the size of the point scaled by the estimated difference in weight between the two players. There does not appear to be any obvious trend with respect to the weight differential between colliding players, so we will not include this factor in any additional modeling.","f9d79f53":"## Angle and Speed at Collisions\n\nThe following code is designed to extract the angle and speed of colliding players at the time of collisions using the RFID data.","91f467c8":"### Observation 1\n\nAlthough the sample size is limited, especially when 2 video clips are inconclusive, the most common trend is poor tackling\/blocking (19\/35). Players on punt and punt return teams are often predominantly reserves and so usually have less experience and are trying to make \"splash plays\" to get noticed. Continuing to promote \"heads up\" tackling is likely the best strategy to minimize these plays and perhaps a re-emphasis on avoiding unnecessary roughness (Rule 12, Section 2, Article 6i).\n\n\n### Rule Change 1\n\nHowever, in terms of a rule change, one option is to better position referees to notice and call unnecessary roughness. On many of the plays observed, no yellow flag was thrown for unnecessary roughness. While this may be due to a referee's unwillingness to throw a flag on a questionable hit, I also noticed that there may not be adequate attention paid to blocking during a punt. According to the \"official responsibilities\", as outlined by NFL operations, only the Field Judge is responsible for enforcing rules on blocking during a punt. Of the seven referees on the field at any time, only three will be near the returner where the most vicious hits occur. However, the Down Judge and Line Judge are only responsible for the line of scrimmage. After players begin to move down the field, these judges could run alongside and look for infractions regarding blocking, which would include unnecessary roughness. This would better enforce the rules without the need of adding extra officials.\n","0ee9dec2":"Whether comparing angle to maximum speed or combined speed of the colliding player, there appears to be some evidence that the combination of high speeds and angle between perpendicular and head on leads to an increase in concussion risk.","b693cd12":"Looking for trends in player roles within the formation, it isn't immediately obvious that there are any trends aside from punt returners are the most likely to be concussed.","ac0a9ed3":"## Add Player Weight by Position\n\nWithout building a complicated physics model that quantifies the transfer of force between to moving players, we can at least assess whether or not the weight of a player has an impact. While the player weight isn't immediately available in this data, we can use a rudimentary form of imputation as a sanity check.\n\nThe average weight for each position was collected from https:\/\/public.tableau.com\/en-us\/s\/gallery\/height-and-weight-nfl. It is from 2015, but I am assuming that these averages haven't changed significantly since then. Note: OLB is taken as the average between DE and LB, since a 3-4 OLD tends to be larger than your typical ILB or MLB.","7a66d9ab":"## Logistic Regression\n\nTo test this theory, I fit a logistic regression model to the data with the sum of the players' speed, the difference in the angle of their trajectories during collision, and the interaction of these two factors. The maximum speed was also tested, but the sum of the speeds was more predictive of concussion.\n\nFive-fold cross-validation was used to ensure reproducibility of results. Given the imbalance in the data, summary metrics such as F1-score are misleading. For the purposes of this exercise, we want to increase the recall as much as possible while maintaining a fairly high precision (above 0.95).","a51f48c1":"# NFL Punt Analytics Competition\n\nThis notebook documents my submission to a Kaggle competition aimed at reducing the rate of concussions during punt plays.\n\n- Author: Karl Pazdernik\n- Date: 2018\/01\/09","f55685a7":"To determine if any position group is more likely to be concussed, we can build an data frame with both observed and expected concussions given player group. Using the \"roles\" data, can obtain the average number of players within each position group across all plays. If we assume that each player has an equally likely chance of being concussed on the play, we can test the hypothesis that the observed concussion counts match our expection.\n\nA formal chi-squared goodness-of-fit test suggests that even in this small dataset, there is moderate statistical evidence (p-value close to 0.05) that the observed counts of concussion for each position group does not match expectation. In particular, we see that the punt returner is a particularly risky position, the gunner is somewhat risky, and the corners tend to be fairly safe.","b9b34011":"To visualize this pattern, I plotted the regions of higher risks of concussion in blue and lower risk of concussion in red. As expected, the combination of high speeds and large angle differential leads to higher rates of concussion.","d4cf6839":"More important is likely the distinction between illegal hits and unavoidable contact. So, we removed the hits that could have been prevented by better technique or that were simply illegal.\n\nBy removing these preventable concussions, we see that the remaining injuries are most likely due to the interaction between speed and angle of collision.","5329a6a7":"## Data Exploration\n\nThere are 37 concussion plays provided with a variety of auxiliary information. First we check to see if there are any obvious factors that correlate with concussion.\n\nThe major finding is that concussions are predominantly because of a multi-player collisions from opposite teams involving the helmet, i.e. not simply caused by hitting the ground.\n\nNote, although none of the injuries are listed as been related to a turnover, that does not mean that they are not related to turnover worthy plays. For example, the concussion in game 274 play 3609 was caused by the punter running on a fake punt, losing control of the ball while untouched and then being hit high to ensure that the ball would remain loose. Upon reviewing the play-by-play information, Seattle recovered the ball, so it wasn't officially listed as a turnover but it would possess the same behavior as if Seattle had lost the ball."}}