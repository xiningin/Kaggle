{"cell_type":{"1a00f0ef":"code","7701dd59":"code","00f7c8a6":"code","676d598c":"code","62b3a354":"code","89121981":"code","4396293c":"code","6ff7b2f0":"code","d1a3aae1":"code","f28bad83":"code","9e9c1c2b":"code","b57c01cb":"code","036f08a6":"code","2a93982f":"code","1ddfee36":"code","d67f8c13":"code","72d28cd4":"code","9da07002":"code","75f57c7a":"code","9ad03fab":"code","40047bb2":"code","51e5cf55":"code","10bc4073":"code","0e2d9c79":"code","2c513ce9":"code","82c08692":"code","bb1a582a":"code","3002e0e5":"code","6f5bb77d":"code","a30c0254":"code","5aab3151":"code","f1337456":"code","978eb1f8":"code","aeeb1537":"code","dd112329":"code","d71d04c6":"code","f85cb197":"code","67c4ed10":"code","5e6eb878":"code","51b9d528":"code","eda9e4ed":"code","354c1f55":"code","08483c06":"code","6aee3822":"code","0059634d":"code","543a2ef0":"code","a8fb2552":"code","a1227664":"code","ecb7ef05":"code","18ed6eb0":"code","4c008107":"code","30e00bcb":"code","852c9134":"code","4cfc8cd2":"code","73df844e":"code","1066aff2":"code","80ac02c8":"markdown","13730672":"markdown","b23ce564":"markdown","6c62d650":"markdown","ad41bb0e":"markdown","e09ac197":"markdown","18334f4f":"markdown","693eff37":"markdown","86c0b1f2":"markdown","65384f5d":"markdown","76e09403":"markdown","7256678d":"markdown","e38304c8":"markdown","202ce3f6":"markdown"},"source":{"1a00f0ef":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport re, string\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7701dd59":"train = pd.read_csv(\"..\/input\/womens-ecommerce-clothing-reviews\/Womens Clothing E-Commerce Reviews.csv\", index_col=0)","00f7c8a6":"train.head()","676d598c":"train.describe()","62b3a354":"train.info()","89121981":"train.isnull().sum()","4396293c":"plt.figure(figsize=(7,7))\nsns.heatmap(train.isnull())","6ff7b2f0":"train[train['Review Text'].isnull()].head()","d1a3aae1":"none = train[train['Division Name'].isnull()]\nnone","f28bad83":"none['Clothing ID'].unique()","9e9c1c2b":"train.fillna('none', inplace=True)","b57c01cb":"plt.figure(figsize=(6,6))\nplt.title('Rating Counts')\nsns.countplot(train['Rating'])","036f08a6":"objectcol = train.select_dtypes(include='object')\nfor col in objectcol.columns:\n    print(f'{col}: {train[col].nunique()}')","2a93982f":"train.sort_values(by='Positive Feedback Count', ascending = False).head()","1ddfee36":"train.sort_values(by='Positive Feedback Count', ascending = False)['Review Text'][0]","d67f8c13":"train.sort_values(by='Positive Feedback Count', ascending = False)['Review Text'][2]","72d28cd4":"train.sort_values(by='Positive Feedback Count', ascending = False)['Review Text'][1]","9da07002":"department = train[['Department Name', 'Rating']].groupby('Department Name').mean().sort_values(by='Rating', ascending = False)","75f57c7a":"def autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = round(float(rect.get_height()),2)\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')","9ad03fab":"fig, ax = plt.subplots(figsize=(10,6))\nrect1 = ax.bar(x=department.index, height=department['Rating'])\nplt.title('Rating by department')\nplt.ylabel('Rating %')\nplt.xlabel('Department')\nautolabel(rect1)","40047bb2":"class_name = train[['Class Name', 'Rating']].groupby('Class Name').mean().sort_values(by='Rating', ascending = False)\nplt.figure(figsize=(10,10))\nplt.title('Rating by Class')\nsns.barplot(y=class_name.index, x=class_name['Rating'])","51e5cf55":"plt.figure(figsize=(7,7))\nplt.title('Age distribution')\ntrain['Age'].hist()\nplt.xlabel('Age')","10bc4073":"age = train[['Class Name','Age']].groupby('Class Name').mean().sort_values(by='Age', ascending = False)\nage\nplt.figure(figsize=(10,10))\nplt.title('Class by Age')\nsns.barplot(y=age.index, x=age['Age'])","0e2d9c79":"def get_text(text):\n    text = text.lower()\n\n    text = re.sub(\"I'm\",'I m',text)\n    text = re.sub(\":\", \" \", text)\n    text = re.sub(\"He's\",\"he is\", text)\n    text = re.sub(r\"i'm\", \"i am\", text)\n    text = re.sub(r\"he's\", \"he is\", text)\n    text = re.sub(r\"she's\", \"she is\", text)\n    text = re.sub(r\"that's\", \"that is\", text)        \n    text = re.sub(r\"what's\", \"what is\", text)\n    text = re.sub(r\"where's\", \"where is\", text) \n    text = re.sub(r\"\\'ll\", \" will\", text)  \n    text = re.sub(r\"\\'ve\", \" have\", text)  \n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"\\'d\", \" would\", text)\n    text = re.sub(r\"\\'ve\", \" have\", text)\n    text = re.sub(r\"won't\", \"will not\", text)\n    text = re.sub(r\"don't\", \"do not\", text)\n    text = re.sub(r\"did't\", \"did not\", text)\n    text = re.sub(r\"can't\", \"can not\", text)\n    text = re.sub(r\"it's\", \"it is\", text)\n    text = re.sub(r\"couldn't\", \"could not\", text)\n    text = re.sub(r\"have't\", \"have not\", text)\n    text = re.sub(r\"[,.\\\"!@#$%^&*(){}?\/;`~:<>+=-]\", \"\", text)\n    text = re.sub(r\"[00-99]\", \"\", text)\n    text = re.sub(r\"none\", \"\", text)\n\n    nopunc = [char for char in text if char not in string.punctuation] # del punctuation\n    nopunc = \"\".join(nopunc)\n    \n    clean = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]   # or get_stop_words('english')\n    clean = \" \".join(clean)\n    \n    clean2 = [word for word in clean.split() if len(word) > 1] # get len more than 1 (del A, I, s, d)\n    clean2 = \" \".join(clean2)\n    return clean2","2c513ce9":"train['Review Text1'] = train['Review Text'].apply(get_text)\ntrain['Title1'] = train['Title'].apply(get_text)","82c08692":"lista = []\nfor word in train['Review Text1']:\n    word = word.split()\n    for n in word:\n        lista.append(n)\n        \nlista = \" \".join(lista)","bb1a582a":"wordcloud = WordCloud(width=1600, height=650, margin=0).generate(lista)\n\nplt.figure(figsize=(15,15))\nplt.title('Most written words in Review Text')\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","3002e0e5":"lista1 = []\nfor word in train['Title1']:\n    word = word.split()\n    for n in word:\n        lista1.append(n)\nlista1 = \" \".join(lista1)","6f5bb77d":"wordcloud1 = WordCloud(width=1600, height=650, margin=0).generate(lista1)\nplt.figure(figsize=(15,15))\nplt.title('Most written words in Title Words')\nplt.imshow(wordcloud1, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","a30c0254":"recommended = train[train['Recommended IND']==1]\nrecommended_list = []\nfor word in recommended['Review Text1']:\n    word = word.split()\n    for n in word:\n        recommended_list.append(n)\nrecommended_list = \" \".join(recommended_list)","5aab3151":"not_recommended_list = []\nnot_recommended = train[train['Recommended IND']==0]\nfor word in not_recommended['Review Text1']:\n    word = word.split() \n    for n in word:\n        not_recommended_list.append(n)\nnot_recommended_list = \" \".join(not_recommended_list)","f1337456":"recomendedcloud = WordCloud(width=1600, height=650, margin=0).generate(recommended_list)\nnotrecomendedcloud = WordCloud(width=1600, height=650, margin=0).generate(not_recommended_list)","978eb1f8":"plt.figure(figsize=(15,15))\nrecomendedcloud\nplt.imshow(recomendedcloud, interpolation='bilinear')\nplt.title('Most written words in Recommended IND')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()\n\n","aeeb1537":"plt.figure(figsize=(15,15))\nnotrecomendedcloud\nplt.imshow(notrecomendedcloud, interpolation='bilinear')\nplt.title('Most written words in not Recommended IND')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()","dd112329":"x=train['Review Text1']\ny=train['Recommended IND']","d71d04c6":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform(x)","f85cb197":"from sklearn.model_selection import train_test_split\nxtrain, xtest,ytrain,ytest = train_test_split(X,y, random_state = 42)","67c4ed10":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report\nmodel_rf = RandomForestClassifier(random_state=42)\nmodel_rf.fit(xtrain,ytrain)\npredict_rf = model_rf.predict(xtest)","5e6eb878":"scoretest_rf = model_rf.score(xtest,ytest)\nprint(f' Score Test: {scoretest_rf}')\nprint(classification_report(ytest,predict_rf))","51b9d528":"from sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(xtrain,ytrain)\nnb_predict = nb.predict(xtest)","eda9e4ed":"scoretest_nb = nb.score(xtest,ytest)\nprint(f' Score Test: {scoretest_nb}')\nprint(classification_report(ytest,nb_predict))","354c1f55":"from sklearn.metrics import confusion_matrix\nrandom_forest_matrix = confusion_matrix(ytest,predict_rf)\nrandom_forest_matrix","08483c06":"nb_matrix = confusion_matrix(ytest,nb_predict)\nnb_matrix","6aee3822":"fig,ax=plt.subplots(1,2,figsize=(18,8))\nax[0] = sns.heatmap(random_forest_matrix, annot=True, ax=ax[0])\nax[0].set_title('Confusion Matrix Random Forest')\nax[1] = sns.heatmap(nb_matrix,annot=True, ax=ax[1])\nax[1].set_title('Confusion Matrix Naive Bayes')","0059634d":"def get_all(col):\n    review_text = col[0]\n    title = col[1]\n    text = str(review_text) + str(title)\n    return text\n\n\ntrain['full'] = train[['Review Text1', 'Title1']].apply(lambda x: get_all(x), axis=1)","543a2ef0":"train.head()","a8fb2552":"xbest=train['full']\ny=train['Recommended IND']","a1227664":"cv = CountVectorizer()\nXbest = cv.fit_transform(xbest)\nxtrain, xtest,ytrain,ytest = train_test_split(Xbest,y, random_state = 42)","ecb7ef05":"model_rf_full = RandomForestClassifier(random_state=42)\nmodel_rf_full.fit(xtrain,ytrain)\npredict_rf_full = model_rf_full.predict(xtest)","18ed6eb0":"scoretest_rf_full = model_rf_full.score(xtest,ytest)\nprint(f' Score Test: {scoretest_rf_full}')\nprint(classification_report(ytest,predict_rf_full))","4c008107":"nb_full = MultinomialNB()\nnb_full.fit(xtrain,ytrain)\nnb_predict_full = nb_full.predict(xtest)","30e00bcb":"nb_score_test = nb_full.score(xtest,ytest)\nprint(f' Score Test: {nb_score_test}')\nprint(classification_report(ytest,nb_predict_full))","852c9134":"rf_matrix_full = confusion_matrix(ytest,predict_rf_full)\nrf_matrix_full","4cfc8cd2":"nb_matrix_full = confusion_matrix(ytest,nb_predict_full)\nnb_matrix_full","73df844e":"fig,ax=plt.subplots(1,2,figsize=(18,8))\nax[0] = sns.heatmap(rf_matrix_full, annot=True, ax=ax[0])\nax[0].set_title('Confusion Matrix Random Forest')\nax[1] = sns.heatmap(nb_matrix_full,annot=True, ax=ax[1])\nax[1].set_title('Confusion Matrix Naive Bayes')","1066aff2":"print(f' First NB test: {scoretest_nb}')\nprint(f' First RF test: {scoretest_rf}')\nprint(f' Second NB test: {nb_score_test}')\nprint(f' Second RF test: {scoretest_rf_full}')","80ac02c8":"We can see that all 'Division Name', 'Department', and Class Name are null values...\nInteresting that we have repeated values in 'Clothing ID'\n\nSo probably its a store registration error, and should be fixed by the E-Commerce.\nHere, I'm going to fill everything with \"none\".","13730672":"So, we have Title with 3800 null cells, and Review Text with 845.\nI can just drop null cels or fill with something.\n\nFirst: My target will be Recommended IND\nMy X will be just Recommended IND or Recommended IND + Title\n\nLet's see what is missing in Review Text:\nProbably just filled 'Rating' and Recommended IND and who filled did not want to fill another option.","b23ce564":"Almost all of them are 4 or 5 and how many uniques objects we have in each object column?","6c62d650":"We have more nun values.. let's see:","ad41bb0e":"Let's see how many ratings we have in each \"class rating\"","e09ac197":"We got a best score with multinominal, but with new feature we did not improve so much.\n\nIf you like this notebook please upvote","18334f4f":"**MODEL AND TRAIN SPLIT**\n\nFirst test x = 'review text1'\n           y = 'Recommended IND'\n          \n Models:\n*  Random Forest\n*  MultinomialNB","693eff37":"**MODEL WITH NEW FEATURE**","86c0b1f2":"Next, we can see which of them have more Positive Feedback Count?\nIt's important because if someone make a bad feedback, and a lot of people see, people can stop to by just because of this Review.. so, let's see something about it","65384f5d":"If you like this notebook please upvoted","76e09403":"We can see the first, second and third with more counts...\nThe first is rating 3,\nsecond is rating 5,\nand last one is rating 1\n","7256678d":"Which class have the best rating? \n\nIn this chart we see that Casual Bottons get the best rating, in next chart we see that younger people buy more Casual Bottoms than older people","e38304c8":"Now, I going to create a new feature:\n    'Review Text' + 'Title'","202ce3f6":"Now I'll clean the reviews and create another column with the new text.\nI will create a list with Review Text words and Title words "}}