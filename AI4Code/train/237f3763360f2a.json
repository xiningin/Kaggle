{"cell_type":{"43d1c703":"code","9f7a3da0":"code","931870b9":"code","87e25ed8":"code","4e927029":"code","9747cc98":"code","622e7365":"code","54a3e646":"code","ecae55df":"code","0d3feea1":"code","ba87320a":"code","d5219d5f":"code","38f0c3f1":"code","ed467ab9":"code","fd8b267d":"code","637cb75c":"markdown","9ebc13ad":"markdown","1b4ce50f":"markdown","2b44e54e":"markdown","bad53e6d":"markdown","23e58a2c":"markdown","8c17c790":"markdown","59d7cac9":"markdown","3ac6a1a9":"markdown","fd4669bb":"markdown","45f5855f":"markdown","4c3d858d":"markdown","85dbf3b3":"markdown","aaab1320":"markdown","f9569648":"markdown","8c4fed22":"markdown","e9fd3f93":"markdown","83e3ac57":"markdown","c02b024c":"markdown","07cd36b1":"markdown","2fed4f0d":"markdown"},"source":{"43d1c703":"from fastai import *\nfrom fastai.vision import *\nfrom sklearn.metrics import f1_score","9f7a3da0":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything(43)","931870b9":"train = pd.read_csv('..\/input\/clabscvcomp\/data\/train.csv')\ntest_df = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\n\ntrain.head() ## Shows the first five rows of data frame","87e25ed8":"sorted(train.genres.unique()) ## Shows all classes in the dataframe","4e927029":"train.genres.value_counts(normalize=False) ## Distribution of dataset","9747cc98":"sz = (512,512) ## Image rescaled into (128 128 3)\nbs = 48 ## Batch size\ntfms = get_transforms( ## Transformation to apply on Train data\n    do_flip=True, ## Horizontal flip\n    flip_vert=False, ## Vertical flip\n    max_rotate=45, ## Rotation\n    max_zoom=2.0, ## Center zoom\n    max_lighting=0.8, ## lighting\n)","622e7365":"data = (\n    ImageList.from_df(df=train, path='', folder='..\/input\/clabscvcomp\/data\/train_data\/', cols='id', suffix = '.jpg') ## define data path\n    .split_by_rand_pct(valid_pct=0.2) ## validation split\n    .label_from_df(cols='genres') ## load labels from\n    .transform(tfms, size=sz)\n    .databunch(bs=bs, num_workers=6) \n    .normalize(imagenet_stats)\n    )","54a3e646":"test_data = ImageList.from_df(test_df, path='..\/input\/clabscvcomp\/data\/test_data\/', cols='id', suffix = '.jpg')\ndata.add_test(test_data)","ecae55df":"data.show_batch(2)","0d3feea1":"def F1(y_pred, y):\n    y_pred = y_pred.softmax(dim=1) \n    y_pred = y_pred.argmax(dim=1)\n    return torch.tensor(f1_score(y.cpu(), y_pred.cpu(), labels=list(range(10)), average='weighted'),device='cuda:0')","ba87320a":"learn = cnn_learner(\n                    data, ## DataBunch\n                    models.resnet50, ## Resnet50 \n                    metrics=[F1, accuracy], ## Matrices\n                    callback_fns=ShowGraph ## Allows us to visualize training\n                   )","d5219d5f":"learn.freeze() \nlearn.fit_one_cycle(3) ##no. of epochs","38f0c3f1":"learn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot(suggestion=True)","ed467ab9":"learn.fit_one_cycle(6, max_lr=slice(1e-5, 1e-4))","fd8b267d":"preds = learn.get_preds(ds_type=DatasetType.Test) ## get prediction in test data\npreds = np.argmax(preds[0].numpy(),axis = 1)   ##gives index of  maximum  value\ncategories = sorted(train.genres.unique().astype('str'))\nfinal_preds = []\nfor idx in preds:\n    final_preds.append(categories[idx])\nfinal_submit = pd.read_csv('..\/input\/clabscvcomp\/data\/sample_submission.csv')\nfinal_submit.genres = final_preds\nfinal_submit.head()\nfinal_submit.to_csv('submission.csv',index = False)","637cb75c":"# Lets start training!!","9ebc13ad":"###### Freeze all layers but last layer and training some epochs with one-cycle policy\nRead more: [1-cycle policy basics](https:\/\/sgugger.github.io\/the-1cycle-policy.html), [Documentation](https:\/\/docs.fast.ai\/callbacks.one_cycle.html)","1b4ce50f":"# Define F1 metric","2b44e54e":"# Defining DataBunch for FastAI\nRead more about it [here](https:\/\/docs.fast.ai\/vision.data.html#ImageDataBunch.from_df)","bad53e6d":"# Importing all Libraries\nPS - FastAI imports all necessary libraries for you","23e58a2c":"# Defining FastAI's Learner \nLearner is an integration of DataBunch + Model + callbacks\nMore about it can be found [here](https:\/\/docs.fast.ai\/vision.learner.html)","8c17c790":"Now lets add test data to the DataBunch","59d7cac9":"## Reading CSV","3ac6a1a9":"###### Continue training","fd4669bb":"## NOTE: Turn on the Internet and GPU for this kernal before starting ","45f5855f":"# Things to try next:\n* Try different architectures, optimizers, loss functions etc.\n* Think of ways of tackling data imbalance problem.  ### change image size\n* Try different image size\n* Try Ensembling methods.\n* Apply semi supervised learning.","4c3d858d":"# EDTA","85dbf3b3":"## Now click on the \"Commit\" to submit the notebook. This notebook generates 'submission.csv' which can be check how the model performed. \n## After the notebook is commited successfully. Click on the Output button. This will bring you to a screen with an option to Submit to Competition. Hit that and you will see how your model performed.\n## NOTE: We expect everyone to generate such notebooks for your final submission. Only the teams with notebook submitted against their final submission will be considered for prize money!","aaab1320":"# Seed everything for reproducibility\nYou may like to read more about it at [link](https:\/\/medium.com\/@ODSC\/properly-setting-the-random-seed-in-ml-experiments-not-as-simple-as-you-might-imagine-219969c84752).","f9569648":"# How to add dataset to the kernal\n* Click on \"Add Data\" \n* Search \"CLabsCVcomp\"\n* Click on \"Add\"\n* Done\n","8c4fed22":"## Predicting for test data","e9fd3f93":"Dataset looks very imbalanced. Try to read more about it. This blog post might be a good read [link](https:\/\/www.analyticsvidhya.com\/blog\/2017\/03\/imbalanced-classification-problem\/)","83e3ac57":"###### Notebook created by: Arnav Chavan (@[carnav0400](https:\/\/www.kaggle.com\/carnav0400)), Udbhav Bamba (@[ubamba98](https:\/\/www.kaggle.com\/ubamba98))","c02b024c":"# Visualizing dataset","07cd36b1":"# PS: This competition is hosted to promote learning. So we request you to publish your baseline models via Kaggle kernels and discuss on the discussion tab to help others learn. Thanks!","2fed4f0d":"![](http:\/\/)###### Unfreeze all layers and find best learning rate"}}