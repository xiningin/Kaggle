{"cell_type":{"4009e104":"code","e279be47":"code","130501ba":"code","c0995a8f":"code","637adf4e":"code","9d0e5fd1":"code","fe77630f":"code","ba78595f":"code","cf39e7a2":"code","e2a17254":"code","0aa170d0":"code","74c00905":"code","0fe82b76":"code","d26139f7":"code","27e16f79":"code","9e96ab5b":"code","e5d96fb6":"code","8aa8af84":"code","0831c0e0":"code","b5db28e3":"code","199ee3c0":"code","036db7fa":"code","b47c5d97":"code","ffd6a94e":"code","6532bc09":"code","e76b6d05":"code","d8b4c44e":"code","b4ae01ae":"code","82410863":"code","16616c19":"code","85a51e19":"code","f7b2521f":"code","90bcce7a":"code","a5604f19":"code","e86177d2":"code","c3294098":"markdown","751a704c":"markdown","1ddd2672":"markdown","5391a1d5":"markdown","b41a8f4c":"markdown","103ca0f2":"markdown","02ece9f1":"markdown","fc989716":"markdown","51ded872":"markdown","3ee6fa63":"markdown","f660a8b6":"markdown","bd7d721a":"markdown"},"source":{"4009e104":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e279be47":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\nall_data = pd.concat([train, test])\n\nall_data.columns","130501ba":"train.info()\ntrain.isnull().sum()","c0995a8f":"test.info()\ntest.isnull().sum()","637adf4e":"all_data.info()\nall_data.isnull().sum()","9d0e5fd1":"sns.countplot(data = all_data, x = 'Survived', hue='Sex')","fe77630f":"numerical_data = train[['Age', 'SibSp', 'Parch', 'Fare']]\ncategorical_data = train[['Survived','Pclass','Sex','Ticket','Cabin','Embarked']]","ba78595f":"for i in numerical_data.columns:\n    plt.hist(numerical_data[i])\n    plt.title(i)\n    plt.show()","cf39e7a2":"plt.figure(figsize=(10,6))\nsns.heatmap(data = all_data[['Pclass', 'SibSp', 'Parch', 'Fare']].corr(), annot=True)","e2a17254":"pd.pivot_table(train, index = 'Survived', values = ['Age','SibSp','Parch','Fare'])","0aa170d0":"for i in categorical_data.columns:\n    sns.barplot(categorical_data[i].value_counts().index, categorical_data[i].value_counts()).set_title(i)\n    plt.show()","74c00905":"train['name_title'] = train.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\ntrain['name_title'].value_counts()","0fe82b76":"train.head()","d26139f7":"all_data['name_title'] = all_data.Name.apply(lambda x: x.split(',')[1].split('.')[0].strip())\nall_data['name_title'] = all_data['name_title'].apply(lambda x : x if x in ['Mr', 'Mrs', 'Miss', 'Master'] else 'Other')\nall_data['name_title'].unique()","27e16f79":"all_data.isna().sum()","9e96ab5b":"all_data = all_data.drop('Cabin', axis=1)","e5d96fb6":"all_data['Age'] = all_data['Age'].fillna(train['Age'].median())\nall_data['Fare'] = all_data['Fare'].fillna(train['Fare'].median())\n\nall_data.dropna(subset=['Embarked'], inplace=True)\n\nall_data.isna().sum()","8aa8af84":"dummies = pd.get_dummies(all_data[['Pclass','Sex','SibSp','Parch','Embarked','name_title']], drop_first=True)\nall_data.drop(['Pclass', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Embarked', 'name_title'], axis=1, inplace=True)\nall_data = pd.concat([all_data, dummies], axis=1)\nall_data.head()","0831c0e0":"all_data.info()","b5db28e3":"train = all_data[0:889].copy()\ntest = all_data[889:].copy()\n\ntrain.shape, test.shape","199ee3c0":"X_train = train.drop(['PassengerId','Survived'], axis = 1)\ny_train = train['Survived']\n\nX_train.shape, y_train.shape","036db7fa":"X_test = test.drop(['PassengerId','Survived'], axis = 1)\n\nX_test.shape","b47c5d97":"from sklearn.preprocessing import StandardScaler\n\nstd_scaler = StandardScaler()\n\nX_train_stds = std_scaler.fit_transform(X_train)\nX_test_stds = std_scaler.fit_transform(X_test)","ffd6a94e":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV, KFold\nfrom sklearn.metrics import accuracy_score, make_scorer","6532bc09":"lr = LogisticRegression(max_iter=50)\n\ncv_lr = cross_val_score(lr, X_train_stds, y_train, cv = 5)\n\nprint(cv_lr, '\\n', round(cv_lr.mean() *100, 2))","e76b6d05":"rfc = RandomForestClassifier(n_estimators=100, random_state=1)\n\ncv_rfc = cross_val_score(rfc, X_train_stds, y_train, cv = 5)\n\nprint(cv_rfc, '\\n', round(cv_rfc.mean() *100, 2))","d8b4c44e":"knc = KNeighborsClassifier()\n\ncv_knc = cross_val_score(knc, X_train_stds, y_train, cv = 5)\n\nprint(cv_knc, '\\n', round(cv_knc.mean() *100, 2))","b4ae01ae":"tuned_lr = LogisticRegression()\n\nparam_grid = [\n    {\n        'penalty' : ['l1', 'l2', 'elasticnet'],\n        'C' : np.logspace(-4, 4, 20),\n        'solver' : ['lbfgs', 'newton-cg', 'sag', 'saga'],\n        'max_iter' : [100, 150, 200, 250 ,300]\n    }\n]","82410863":"gs_cv = GridSearchCV(tuned_lr, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)","16616c19":"final_train = gs_cv.fit(X_train_stds, y_train)\nfinal_train.best_estimator_","85a51e19":"final_train.best_params_","f7b2521f":"best_lr = LogisticRegression(C=4.281332398719396, max_iter=100, solver='lbfgs', penalty = 'l2')","90bcce7a":"best_lr.fit(X_train_stds, y_train)","a5604f19":"final_pred = best_lr.predict(X_test_stds)","e86177d2":"output_df = pd.DataFrame({'PassengerId' : test['PassengerId'],'Survived' : final_pred.astype(int)})\noutput_df.to_csv('my_submission.csv', index=False)","c3294098":"**Logistic Regression**","751a704c":"**KNeighbours Classifier**","1ddd2672":"# **Model building**","5391a1d5":"One hot encoding the categorical columns","b41a8f4c":"We'll extract the title and categorize them. Since Mr, Miss, Mrs and Master occur the most, we'll categorize the rest of the titles as 'Other'","103ca0f2":"**Random Forest Classifier**","02ece9f1":"Read the train and test and combine them to perform data cleaning and preprocessing together","fc989716":"# **Exploratory Data Analysis**","51ded872":"Tuning Logistic regression","3ee6fa63":"**Splitting the combined dataframe to their coresponding training and testing dataframes**","f660a8b6":"**Missing values**\n\nSince most of the value for Cabin is missing, we'll drop the column.\nAge and Fare can be filled in with mean or median(Embarked can be filled in with the most occuring embarkment place).","bd7d721a":"**Visualizing the numerical and categorical data separately**"}}