{"cell_type":{"c8bb877d":"code","6511c054":"code","35018162":"code","357b4994":"code","0ae4193f":"code","5abc5d1f":"code","a42c6d64":"code","e67d680c":"code","5f9a0d45":"code","56cd4a1c":"code","7f07806e":"code","c029a55f":"code","8794629e":"code","1dcfbe11":"code","a6d26cac":"code","f5d25b81":"code","451750ea":"code","eaf27037":"code","085640c2":"code","b43e7cf1":"code","3bc0a51f":"code","6e09142a":"code","8edde63d":"code","0ce47659":"code","500bbebd":"code","8f42a313":"code","97407fb7":"code","80a672a1":"code","ce5a3138":"code","9669d437":"code","9d45adfc":"code","e5d09519":"code","e6eaf9d8":"code","aa572f65":"code","8a996d06":"code","232af3c5":"code","f30333fb":"code","9a25dbfd":"code","2e6115dc":"code","40366b34":"code","584252d5":"code","27cb1b2a":"code","529befe1":"code","3c2e40c1":"code","476b347b":"code","ec08e099":"code","ff1d3a24":"code","677cf3ce":"code","77cb675a":"code","d28e995c":"code","0540a3c2":"code","332085f6":"code","f0de2cce":"code","216dc382":"code","55bb906b":"code","7afcdfa3":"code","afa7e770":"code","c9b38689":"code","1f2b0b36":"code","0304ed6c":"code","fdb049f2":"code","44d2fce4":"code","079ea97c":"code","faabea2f":"code","b01c4b18":"code","1c28e5f9":"code","ffd0def8":"code","2866cd21":"code","625fd84d":"code","80430464":"code","37b39913":"code","343413b4":"code","a160d28e":"code","403de603":"code","5d96877c":"code","a2c42cbc":"code","f33b69ef":"code","f4dc9cf8":"code","6a8d0090":"code","58edfdf5":"code","530160e7":"code","1c061ed8":"code","c6e06a89":"code","da501ca1":"code","f048dd46":"code","a66f250c":"code","35310f05":"code","311d7d22":"code","58238042":"code","1cc0f279":"code","076285bf":"code","397bc40c":"code","436083bd":"code","1a879352":"code","b032c7ca":"code","4a2b7307":"code","0fe72698":"code","039619cb":"code","f63fab4b":"code","6be9a81b":"markdown","ad2383dc":"markdown","45f00d26":"markdown","bf341bba":"markdown","8415d2d2":"markdown","72911d91":"markdown","7571501a":"markdown","12c7e50b":"markdown","b38110aa":"markdown","c8bc7879":"markdown","13eb272b":"markdown","80af17f1":"markdown","9cc7f6f2":"markdown","beac84c1":"markdown","9fbcb6b4":"markdown","eff37513":"markdown","c7bcfce4":"markdown","9a0cabb2":"markdown","00518de1":"markdown","73d12ab7":"markdown","88bb60fd":"markdown","ffe0086e":"markdown","858593fe":"markdown","90c1acea":"markdown","d5551867":"markdown","bbaf96ad":"markdown"},"source":{"c8bb877d":"import pandas as pd\nimport numpy as np\nimport operator \nimport re\nimport gc\nimport keras\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')\nimport math\n\n\n\nfrom keras.models import Sequential\nfrom keras.layers import CuDNNLSTM, Dense, Bidirectional, Dropout\nfrom keras.callbacks import Callback\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score","6511c054":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ndf = pd.concat([train ,test])","35018162":"print(\"Number of texts: \", df.shape[0])","357b4994":"def load_embed(file):\n    def get_coefs(word,*arr): \n        return word, np.asarray(arr, dtype='float32')\n    \n    if file == '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec':\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file) if len(o)>100)\n    else:\n        embeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(file, encoding='latin'))\n        \n    return embeddings_index","0ae4193f":"glove = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'","5abc5d1f":"print(\"Extracting GloVe embedding\")\nembed_glove = load_embed(glove)","a42c6d64":"def build_vocab(texts):\n    sentences = texts.apply(lambda x: x.split()).values\n    vocab = {}\n    for sentence in sentences:\n        for word in sentence:\n            try:\n                vocab[word] += 1\n            except KeyError:\n                vocab[word] = 1\n    return vocab","e67d680c":"def check_coverage(vocab, embeddings_index):\n    known_words = {}\n    unknown_words = {}\n    nb_known_words = 0\n    nb_unknown_words = 0\n    for word in vocab.keys():\n        try:\n            known_words[word] = embeddings_index[word]\n            nb_known_words += vocab[word]\n        except:\n            unknown_words[word] = vocab[word]\n            nb_unknown_words += vocab[word]\n            pass\n\n    print('Found embeddings for {:.3%} of vocab'.format(len(known_words) \/ len(vocab)))\n    print('Found embeddings for  {:.3%} of all text'.format(nb_known_words \/ (nb_known_words + nb_unknown_words)))\n    unknown_words = sorted(unknown_words.items(), key=operator.itemgetter(1))[::-1]\n\n    return unknown_words","5f9a0d45":"vocab = build_vocab(df['question_text'])","56cd4a1c":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","7f07806e":"df['lowered_question'] = df['question_text'].apply(lambda x: x.lower())","c029a55f":"def add_lower(embedding, vocab):\n    count = 0\n    for word in vocab:\n        if word in embedding and word.lower() not in embedding:  \n            embedding[word.lower()] = embedding[word]\n            count += 1\n    print(f\"Added {count} words to embedding\")","8794629e":"print(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)\nadd_lower(embed_glove, vocab)\noov_glove = check_coverage(vocab, embed_glove)","1dcfbe11":"oov_glove[:10]","a6d26cac":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }","f5d25b81":"def known_contractions(embed):\n    known = []\n    for contract in contraction_mapping:\n        if contract in embed:\n            known.append(contract)\n    return known","451750ea":"print(\"- Known Contractions -\")\nprint(\"   Glove :\")\nprint(known_contractions(embed_glove))","eaf27037":"def clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text","085640c2":"df['treated_question'] = df['lowered_question'].apply(lambda x: clean_contractions(x, contraction_mapping))","b43e7cf1":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","3bc0a51f":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'","6e09142a":"def unknown_punct(embed, punct):\n    unknown = ''\n    for p in punct:\n        if p not in embed:\n            unknown += p\n            unknown += ' '\n    return unknown","8edde63d":"print(\"Glove :\")\nprint(unknown_punct(embed_glove, punct))","0ce47659":"punct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }","500bbebd":"def clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text","8f42a313":"df['treated_question'] = df['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","97407fb7":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","80a672a1":"oov_glove[:100]","ce5a3138":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization', 'pok\u00e9mon': 'pokemon'}","9669d437":"def correct_spelling(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x","9d45adfc":"df['treated_question'] = df['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","e5d09519":"vocab = build_vocab(df['treated_question'])\nprint(\"Glove : \")\noov_glove = check_coverage(vocab, embed_glove)","e6eaf9d8":"len(vocab)","aa572f65":"vocab['and']","8a996d06":"vocab_filter={}\nfor i in vocab.keys():\n    if vocab[i]>20:\n        vocab_filter[i]=vocab[i]","232af3c5":"len(vocab_filter)","f30333fb":"del oov_glove, df, vocab, vocab_filter\ngc.collect()","9a25dbfd":"train.info()","2e6115dc":"test.info()","40366b34":"# Lowering\ntrain['treated_question'] = train['question_text'].apply(lambda x: x.lower())\n# Contractions\ntrain['treated_question'] = train['treated_question'].apply(lambda x: clean_contractions(x, contraction_mapping))\n# Special characters\ntrain['treated_question'] = train['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))\n# Spelling mistakes\ntrain['treated_question'] = train['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","584252d5":"# Lowering\ntest['treated_question'] = test['question_text'].apply(lambda x: x.lower())\n# Contractions\ntest['treated_question'] = test['treated_question'].apply(lambda x: clean_contractions(x, contraction_mapping))\n# Special characters\ntest['treated_question'] = test['treated_question'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))\n# Spelling mistakes\ntest['treated_question'] = test['treated_question'].apply(lambda x: correct_spelling(x, mispell_dict))","27cb1b2a":"train.info()","529befe1":"p=[len(s) for s in train['treated_question']]\nprint(np.mean(p))","3c2e40c1":"# now let us check in the number of Percentage\nCount_Normal_transacation = len(train[train[\"target\"]==0]) # normal transaction are repersented by 0\nCount_insincere_transacation = len(train[train[\"target\"]==1]) # fraud by 1\nPercentage_of_Normal_transacation = Count_Normal_transacation\/(Count_Normal_transacation+Count_insincere_transacation)\nprint(\"percentage of normal transacation is\",Percentage_of_Normal_transacation*100)\nPercentage_of_insincere_transacation= Count_insincere_transacation\/(Count_Normal_transacation+Count_insincere_transacation)\nprint(\"percentage of fraud transacation\",Percentage_of_insincere_transacation*100)","476b347b":"# insincere_indices= np.array(train[train.target==1].index)\n# normal_indices = np.array(train[train.target==0].index)\n# # now let us a define a function for make undersample data with different proportion\n# #different proportion means with different proportion of normal classes of data\n# def undersample(normal_indices,insincere_indices,times):#times denote the normal data = times*fraud data\n#     Normal_indices_undersample = np.array(np.random.choice(normal_indices,(times*Count_insincere_transacation),replace=False))\n#     print(len(Normal_indices_undersample))\n#     undersample_data= np.concatenate([insincere_indices,Normal_indices_undersample])\n\n#     undersample_data = train.iloc[undersample_data,:]\n#     #print(undersample_data)\n#     print(len(undersample_data))\n\n#     print(\"the normal transacation proportion is :\",len(undersample_data[undersample_data.target==0])\/len(undersample_data))\n#     print(\"the fraud transacation proportion is :\",len(undersample_data[undersample_data.target==1])\/len(undersample_data))\n#     print(\"total number of record in resampled data is:\",len(undersample_data))\n#     return(undersample_data)","ec08e099":"# Undersample_data = undersample(normal_indices,insincere_indices,4)\n","ff1d3a24":"# Undersample_data.info()","677cf3ce":"questions=train.iloc[:,3].values.tolist()\nlabels=train.iloc[:,2].values.tolist()","77cb675a":"len_voc = 90000\nmax_len = 70","d28e995c":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences","0540a3c2":"test['treated_question'][1]","332085f6":"def make_data(X):\n    t = Tokenizer(num_words=len_voc)\n    t.fit_on_texts(X)\n    X = t.texts_to_sequences(X)\n    X = pad_sequences(X, maxlen=max_len)\n    return X, t.word_index","f0de2cce":"X, word_index = make_data(questions)","216dc382":"X_test, word_index_test=make_data(test['treated_question'])","55bb906b":"# def make_treated_data(X):\n#     t = Tokenizer(num_words=len_voc, filters='')\n#     t.fit_on_texts(X)\n#     X = t.texts_to_sequences(X)\n#     X = pad_sequences(X, maxlen=max_len)\n#     return X, t.word_index","7afcdfa3":"# X_treated, word_index_treated = make_data(train['treated_question'])","afa7e770":"from sklearn.model_selection import train_test_split","c9b38689":"y = labels","1f2b0b36":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=420)","0304ed6c":"#X_t_train, X_t_val, _, _ = train_test_split(X_treated, y, test_size=0.1, random_state=420)","fdb049f2":"print(f\"Training on {X_val.shape[0]} texts\")","44d2fce4":"type(y_train)","079ea97c":"Count_Normal = np.sum(y_val)# normal transaction are repersented by 0","faabea2f":"Count_Normal","b01c4b18":"def make_embed_matrix(embeddings_index, word_index, len_voc):\n    all_embs = np.stack(embeddings_index.values())\n    emb_mean,emb_std = all_embs.mean(), all_embs.std()\n    embed_size = all_embs.shape[1]\n    word_index = word_index\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (len_voc, embed_size))\n    \n    for word, i in word_index.items():\n        if i >= len_voc:\n            continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None: \n            embedding_matrix[i] = embedding_vector\n    \n    return embedding_matrix","1c28e5f9":"embedding = make_embed_matrix(embed_glove, word_index, len_voc)\n\ndel word_index\ngc.collect()","ffd0def8":"#  embedding_test = make_embed_matrix(embed_glove, word_index_test, len_voc)\ndel word_index_test\ngc.collect()","2866cd21":"# batch_size = 128\n\n# def batch_gen(train_df,y):\n#     n_batches = math.ceil(len(train_df) \/ batch_size)\n#     while True: A\n#         #train_df = train_df.sample(frac=1.)  # Shuffle the data.\n#         for i in range(n_batches):\n#             texts = train_df[i*batch_size:(i+1)*batch_size]\n#             text_arr = np.array([text for text in texts])\n#             yield text_arr, np.array(y[i*batch_size:(i+1)*batch_size])","625fd84d":"from keras import backend as K","80430464":"def f1(y_true, y_pred):\n    def recall(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    \n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n","37b39913":"from keras.models import Model, Sequential\nfrom keras.layers import Dense, Embedding, Bidirectional, CuDNNGRU, GlobalAveragePooling1D, GlobalMaxPooling1D, concatenate, Input, Dropout, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras import regularizers\n\n","343413b4":"def make_model(embedding_matrix, embed_size=300, loss='binary_crossentropy'):\n    inp    = Input(shape=(max_len,))\n    x      = Embedding(len_voc, embed_size, weights=[embedding_matrix], trainable=False)(inp)\n    x      = Bidirectional(CuDNNGRU(128, return_sequences=True))(x)\n    x      = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\n    avg_pl = GlobalAveragePooling1D()(x)\n    max_pl = GlobalMaxPooling1D()(x)\n    concat = concatenate([avg_pl, max_pl])\n    dense  = Dense(64, activation=\"relu\")(concat)\n    drop   = Dropout(0.1)(concat)\n    output = Dense(1, activation=\"sigmoid\")(concat)\n    \n    model  = Model(inputs=inp, outputs=output)\n    model.compile(loss=loss, optimizer=Adam(lr=0.0001), metrics=['accuracy', f1])\n    return model","a160d28e":"model = make_model(embedding)","403de603":"#model_treated = make_model(embedding_treated)","5d96877c":"model.summary()","a2c42cbc":"from keras.callbacks import ModelCheckpoint, ReduceLROnPlateau","f33b69ef":"checkpoints = ModelCheckpoint('weights.hdf5', monitor=\"val_f1\", mode=\"max\", verbose=True, save_best_only=True)\n#checkpoints2 = ModelCheckpoint('weights2.hdf5', monitor=\"val_loss\", mode=\"max\", verbose=True, save_best_only=True)\n\nreduce_lr = ReduceLROnPlateau(monitor='val_f1', factor=0.1, patience=2, verbose=1, min_lr=0.000001)","f4dc9cf8":"#checkpoints_treated = ModelCheckpoint('treated_weights.hdf5', monitor=\"val_f1\", mode=\"max\", verbose=True, save_best_only=True)\n#reduce_lr_treated = ReduceLROnPlateau(monitor='val_f1', factor=0.1, patience=2, verbose=1, min_lr=0.000001)","6a8d0090":"epochs = 5\nbatch_size = 512","58edfdf5":"history = model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, \n                    validation_data=[X_val, y_val], callbacks=[checkpoints, reduce_lr])","530160e7":" plt.figure(figsize=(12,8))\n plt.plot(history.history['acc'], label='Train Accuracy')\n plt.plot(history.history['val_acc'], label='Test Accuracy')\n plt.show()","1c061ed8":"# history = model_treated.fit(X_t_train, y_train, batch_size=batch_size, epochs=epochs, \n                            #validation_data=[X_t_val, y_val], callbacks=[checkpoints_treated, reduce_lr_treated])","c6e06a89":"# plt.figure(figsize=(12,8))\n# plt.plot(history.history['acc'], label='Train Accuracy')\n# plt.plot(history.history['val_acc'], label='Test Accuracy')\n# plt.show()","da501ca1":" model.load_weights('weights.hdf5')\n# model_treated.load_weights('treated_weights.hdf5')","f048dd46":"# model2 = Sequential([\n#     Embedding(len_voc, 300, input_length=max_len,dropout=0.2,weights=[embedding]),\n#     #BatchNormalization(),\n#     #Dropout(0.5),\n#     Bidirectional(LSTM(300,activation='relu',recurrent_dropout=0.2,consume_less='gpu')),\n#     #BatchNormalization(),\n#     Dropout(0.5),\n#     Dense(1, activation='sigmoid')])\n# model2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# model2.summary()","a66f250c":"type(y_train)","35310f05":"# history = model2.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, \n#                     validation_data=[X_val, y_val], callbacks=[checkpoints2, reduce_lr])","311d7d22":" pred_val = model.predict(X_val, batch_size=512, verbose=1)\n# pred_t_val = model_treated.predict(X_t_val, batch_size=512, verbose=1)","58238042":"pred_test= model.predict(X_test, batch_size=512, verbose=1)","1cc0f279":"pred_test[0:20]","076285bf":"# pred_test2[0:10]","397bc40c":" from sklearn.metrics import f1_score","436083bd":"def tweak_threshold(pred, truth):\n    thresholds = []\n    scores = []\n    for thresh in np.arange(0.1, 0.501, 0.01):\n        thresh = np.round(thresh, 2)\n        thresholds.append(thresh)\n        score = f1_score(truth, (pred>thresh).astype(int))\n        scores.append(score)\n        return np.max(scores), thresholds[np.argmax(scores)]","1a879352":"score_val, threshold_val = tweak_threshold(pred_val, y_val)\n\nprint(f\"Scored {round(score_val, 4)} for threshold {threshold_val} with treated texts on validation data\")","b032c7ca":"pred_val[0:10]","4a2b7307":"y_val[0:10]","0fe72698":"submission = test[['qid']].copy()\nsubmission['prediction'] = (pred_test > 0.6).astype(int)\n","039619cb":"submission.to_csv('submission.csv', index=False)","f63fab4b":"!head submission.csv\n","6be9a81b":"#### If you apply lowerization, you lost a bit of informations on other embeddings :\n> Therer are words known that are known with upper letters and unknown without. Let us fix that :\n- word.lower() takes the embedding of word if word.lower() doesn't have an embedding","ad2383dc":"## Contractions","45f00d26":"###  Callbacks","bf341bba":"### Embeddings\nI use GloVe here, because I got better results with it than with others. But feel free to change that.","8415d2d2":"#### Treated text\nSame thing, but with no filters.","72911d91":"#### F1 Scores","7571501a":"## Model","12c7e50b":"#### Not a lot of contractions are known. (FastText knows none)\n> We use the map to replace them","b38110aa":"#### First faults appearing are : \n- Contractions \n- Words with punctuation in them\n\n> Let us correct that.","c8bc7879":"## f1 metric for Keras","13eb272b":"# Part 2 : Checking the improvement\n\n## Applying treatment\n\nI only treat train data here, because I do not intend to submit my results.","80af17f1":"#### Some characters are unknown.\n> We use a map to replace unknown characters with known ones.\n\n> We make sure there are spaces between words and punctuation\n","9cc7f6f2":"#### Apply lowerization (necessary if using paragram)\n> Fasttext and GloVe understand capitalization, but you still win a bit.","beac84c1":"#### Splitting","9fbcb6b4":"## Starting point","eff37513":"### What's still missing ? \n- Unknown words\n- Acronyms\n- Spelling mistakes\n\n## We can correct manually most frequent mispells\n\n#### For example, here are some mistakes and their frequency\n- qoura : 85 times\n- mastrubation : 38 times\n- demonitisation : 30 times\n- \u2026","c7bcfce4":"## Results\n### Predictions","9a0cabb2":"## Data for the network\n### Texts\n#### Parameters\nI took the same for both models. len_voc can de reduced for the treated model.","00518de1":"## Now, let us deal with special characters","73d12ab7":"## Loading data","88bb60fd":" Note that we have two embedding matrices, one for each pre-treatment.","ffe0086e":"### Fitting","858593fe":"## Vocabulary and Coverage functions\n> Again, check Dieter's work if you haven't, those are his.","90c1acea":"## Loading embeddings\n#### In this v2, I am using GloVe only, for memory usage purposes mostly.","d5551867":"#### Untreated text\nWe apply a standard tokenizer and padding.","bbaf96ad":"### What's wrong ?"}}