{"cell_type":{"c8878bdc":"code","21ddf25f":"code","7262ac28":"code","4a0d5265":"code","66f4a067":"code","8eef30db":"code","a92d5dea":"code","c5b83d32":"code","7c7e149e":"code","adcdfd74":"code","62b76f68":"code","4893b375":"code","7c51fb49":"code","e8a1e38f":"code","6f7c8d47":"code","86169352":"code","7c875f79":"code","6a3ff864":"markdown","a6135a4b":"markdown","d7eca138":"markdown","c6a2ead1":"markdown","92ca75e0":"markdown","adfc9278":"markdown","2d7984e0":"markdown","1f0132c0":"markdown","3e8bcfaf":"markdown","a2d442d5":"markdown"},"source":{"c8878bdc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n# import torch\n# import torch.nn as nn\n# import torch.nn.functional as F\n# from torch.utils.data import TensorDataset,DataLoader\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import *\n# import xgboost as xgb\n\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')","21ddf25f":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","7262ac28":"train.head()","4a0d5265":"feature_cols = [col for col in train.columns if col.startswith('f')]\n\ntrain['f100'] = train[feature_cols].max(axis=1)\ntest['f100'] = test[feature_cols].max(axis=1)\n\ntrain['f101'] = train[feature_cols].min(axis=1)\ntest['f101'] = test[feature_cols].min(axis=1)\n\ntrain['f102'] = train[feature_cols].median(axis=1)\ntest['f102'] = test[feature_cols].median(axis=1)\n\nfeature_cols = [col for col in train.columns if col.startswith('f')]","66f4a067":"X = train[feature_cols].values\ny = train.target.values\n\ntest = test[feature_cols].values","8eef30db":"xtrain,xvalid,ytrain,yvalid = train_test_split(X,y,test_size=0.2,random_state=1234)","a92d5dea":"print(f'No of train samples: {xtrain.shape[0]}')\nprint(f'No of validation samples: {xvalid.shape[0]}')\nprint(f'No of test samples: {test.shape[0]}')","c5b83d32":"def apply_transformations(transformer=False):\n    data = xvalid\n    if transformer:\n        transformer.fit(data)\n        data = transformer.transform(data)\n        \n    pcaData = PCA(n_components=50).fit(data)\n    transformedData = pcaData.fit_transform(data)\n    \n    varianceExplained = np.sum(100*pcaData.explained_variance_ratio_)\n    \n    fig,ax = plt.subplots(1,2,figsize=(20,8))\n\n    for lab in range(2):\n        ax[0].plot(transformedData[yvalid==lab,0],transformedData[yvalid==lab,1],'o',markersize=3,alpha=.4)\n    ax[0].set_xlabel('PC1 projection')\n    ax[0].set_ylabel('PC2 projection')\n    ax[0].legend(range(2))\n    ax[0].set_title(f'PCA of data\\n\\nPercent variance explained: {varianceExplained:.2f}%')\n    \n    ax[1].plot(100*pcaData.explained_variance_ratio_,'ms--')\n    ax[1].set_xlabel('Components')\n    ax[1].set_ylabel('Percent variance explained')\n    ax[1].set_title('PCA scree plot')\n    ax[1].legend()\n    \n    \n    plt.show()","7c7e149e":"apply_transformations()","adcdfd74":"apply_transformations(StandardScaler())","62b76f68":"apply_transformations(PowerTransformer())","4893b375":"apply_transformations(MinMaxScaler())","7c51fb49":"apply_transformations(Binarizer())","e8a1e38f":"apply_transformations(MaxAbsScaler())","6f7c8d47":"apply_transformations(QuantileTransformer())","86169352":"apply_transformations(OrdinalEncoder())","7c875f79":"apply_transformations(Normalizer())","6a3ff864":"## Apply PowerTransformer() with default parameters","a6135a4b":"## Apply Normalizer()","d7eca138":"## Apply OrdinalEncoder()","c6a2ead1":"## Apply Binarizer() with default parameters","92ca75e0":"## Apply MinMaxScaler()","adfc9278":"## Apply MaxAbsScaler()","2d7984e0":"## WIthout any transformations","1f0132c0":"## Apply StandardScaler()","3e8bcfaf":"## Perform PCA. \n### In here,\n - We will fit `PCA` with 50 components\n - Then we plot data points against top two components of the PCA ","a2d442d5":"## Apply QuantileTransformer()"}}