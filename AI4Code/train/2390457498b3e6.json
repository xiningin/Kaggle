{"cell_type":{"aad01014":"code","5d2679ca":"code","a1607a21":"code","6050d644":"code","dd723522":"code","138af19e":"code","d9d423bf":"code","e0320e42":"code","98df24f7":"code","53551715":"code","fcb86953":"code","3abfb6b2":"code","e5b172db":"code","26fbda90":"code","f688e4d9":"code","bf516e17":"code","cb6ef526":"code","31598a3e":"code","821bca87":"code","3c4f2f10":"code","f23f44f1":"code","ca1a8d14":"code","78b81a53":"code","b1ce7bb0":"code","b8b1056e":"code","aa8a11bc":"code","19a9b779":"code","154485aa":"code","d44b4ebe":"markdown","da9f2e9c":"markdown","88bbfe2f":"markdown","393ebaa8":"markdown","67c86d6a":"markdown","780bcf60":"markdown","0930e4d9":"markdown","197a8f83":"markdown","3b81a427":"markdown","1c24a8c3":"markdown","be97621a":"markdown","38c527ea":"markdown","8f3b9f13":"markdown","33f2ceca":"markdown","f1c47e0f":"markdown","10ae3d65":"markdown","9478570f":"markdown","87bff581":"markdown"},"source":{"aad01014":"#import libraries\nimport numpy as np\nprint('numpy: {}'.format(np.__version__))\nimport matplotlib\nimport matplotlib.pyplot as plt\nprint('matplotlib: {}'.format(matplotlib.__version__))\nimport pandas as pd\nprint('pandas: {}'.format(pd.__version__))\nimport sklearn \nprint('sklearn: {}'.format(sklearn.__version__))\nimport seaborn as sns\nprint('seaborn: {}'.format(sns.__version__))","5d2679ca":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a1607a21":"#Load datasets\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","6050d644":"train","dd723522":"submission","138af19e":"test","d9d423bf":"sns.distplot(train['SalePrice']);","e0320e42":"var = 'OverallQual'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(14, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","98df24f7":"target = train.SalePrice\ntrain = train.drop(['SalePrice'], axis=1)\ntrain","53551715":"combi = train.append(test)\ncombi","fcb86953":"combi = combi.drop(['Id'], axis = 1)\ncombi","3abfb6b2":"total = combi.isnull().sum().sort_values(ascending=False)\npercent = (combi.isnull().sum()\/combi.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","e5b172db":"# fill up missing values with the not listed or median\ncombi['MSZoning'] = combi['MSZoning'].fillna('Not Listed')\ncombi['Alley'] = combi['Alley'].fillna('Not Listed')\ncombi['Utilities'] = combi['Utilities'].fillna('Not Listed')\ncombi['Exterior1st'] = combi['Exterior1st'].fillna('Not Listed')\ncombi['Exterior2nd'] = combi['Exterior2nd'].fillna('Not Listed')\ncombi[\"MasVnrType\"] = combi[\"MasVnrType\"].fillna('Not Listed')\ncombi[\"MasVnrArea\"] = combi[\"MasVnrArea\"].fillna(combi['MasVnrArea'].median())\ncombi['Electrical'] = combi['Electrical'].fillna('Not Listed')\ncombi['KitchenQual'] = combi['KitchenQual'].fillna('Not Listed')\ncombi['FireplaceQu'] = combi['FireplaceQu'].fillna('Not Listed')\ncombi['PoolQC'] = combi['PoolQC'].fillna('Not Listed')\ncombi['MiscFeature'] = combi['MiscFeature'].fillna('Not Listed')\ncombi['Fence'] = combi['Fence'].fillna('Not Listed')\ncombi['Functional'] = combi['Functional'].fillna('Not Listed')\ncombi['LotFrontage'] = combi['LotFrontage'].fillna(combi['LotFrontage'].median())\ncombi['SaleType'] = combi['SaleType'].fillna('Not Listed')\ncombi['GarageType'] = combi['GarageType'].fillna('Not Listed')\ncombi['GarageFinish'] = combi['GarageFinish'].fillna('Not Listed')\ncombi['GarageQual'] = combi['GarageQual'].fillna('Not Listed')\ncombi['GarageCond'] = combi['GarageCond'].fillna('Not Listed')\ncombi['BsmtFinSF1'] = combi['BsmtFinSF1'].fillna(combi['BsmtFinSF1'].median())\ncombi['BsmtFinSF2'] = combi['BsmtFinSF2'].fillna(combi['BsmtFinSF2'].median())\n\n\n   \n# for these columns, NA = No Basement\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n   combi[col] = combi[col].fillna('None')\n\n   # for these columns, NA is likely to be 0 due to no basement\nfor col in ('BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n   combi[col] = combi[col].fillna(0)\n\n# as there is no garage, NA value for this column is set to zero\nfor col in ('GarageArea', 'GarageCars', 'GarageYrBlt'):\n    combi[col] = combi[col].fillna(0)","26fbda90":"# checking for any null value left\ncombi.isnull().sum().sum()","f688e4d9":"#ordinal encoder\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder\n\nenc = OrdinalEncoder()\n\ncombi.MSZoning = enc.fit_transform(combi.MSZoning.values.reshape(-1,1))\ncombi.Street = enc.fit_transform(combi.Street.values.reshape(-1,1))\ncombi.Alley = enc.fit_transform(combi.Alley.values.reshape(-1,1))\ncombi.LotShape = enc.fit_transform(combi.LotShape.values.reshape(-1,1))\ncombi.LandContour = enc.fit_transform(combi.LandContour.values.reshape(-1,1))\ncombi.Utilities = enc.fit_transform(combi.Utilities.values.reshape(-1,1))\ncombi.LotConfig = enc.fit_transform(combi.LotConfig.values.reshape(-1,1))\ncombi.LandSlope = enc.fit_transform(combi.LandSlope.values.reshape(-1,1))\ncombi.Neighborhood = enc.fit_transform(combi.Neighborhood.values.reshape(-1,1))\ncombi.Condition1 = enc.fit_transform(combi.Condition1.values.reshape(-1,1))\ncombi.Condition2 = enc.fit_transform(combi.Condition2.values.reshape(-1,1))\ncombi.BldgType = enc.fit_transform(combi.BldgType.values.reshape(-1,1))\ncombi.HouseStyle = enc.fit_transform(combi.HouseStyle.values.reshape(-1,1))\ncombi.RoofStyle = enc.fit_transform(combi.RoofStyle.values.reshape(-1,1))\ncombi.RoofMatl = enc.fit_transform(combi.RoofMatl.values.reshape(-1,1))\ncombi.Exterior1st = enc.fit_transform(combi.Exterior1st.values.reshape(-1,1))\ncombi.Exterior2nd = enc.fit_transform(combi.Exterior2nd.values.reshape(-1,1))\ncombi.MasVnrType = enc.fit_transform(combi.MasVnrType.values.reshape(-1,1))\ncombi.ExterQual = enc.fit_transform(combi.ExterQual.values.reshape(-1,1))\ncombi.ExterCond = enc.fit_transform(combi.ExterCond.values.reshape(-1,1))\ncombi.Foundation = enc.fit_transform(combi.Foundation.values.reshape(-1,1))\ncombi.BsmtQual = enc.fit_transform(combi.BsmtQual.values.reshape(-1,1))\ncombi.BsmtCond = enc.fit_transform(combi.BsmtCond.values.reshape(-1,1))\ncombi.BsmtExposure = enc.fit_transform(combi.BsmtExposure.values.reshape(-1,1))\ncombi.BsmtFinType1 = enc.fit_transform(combi.BsmtFinType1.values.reshape(-1,1))\ncombi.BsmtFinSF1 = enc.fit_transform(combi.BsmtFinSF1.values.reshape(-1,1))\ncombi.BsmtFinType2 = enc.fit_transform(combi.BsmtFinType2.values.reshape(-1,1))\ncombi.BsmtFinSF2 = enc.fit_transform(combi.BsmtFinSF2.values.reshape(-1,1))\ncombi.Heating = enc.fit_transform(combi.Heating.values.reshape(-1,1))\ncombi.HeatingQC = enc.fit_transform(combi.HeatingQC.values.reshape(-1,1))\ncombi.CentralAir = enc.fit_transform(combi.CentralAir.values.reshape(-1,1))\ncombi.Electrical = enc.fit_transform(combi.Electrical.values.reshape(-1,1))\ncombi.KitchenQual = enc.fit_transform(combi.KitchenQual.values.reshape(-1,1))\ncombi.Functional = enc.fit_transform(combi.Functional.values.reshape(-1,1))\ncombi.FireplaceQu = enc.fit_transform(combi.FireplaceQu.values.reshape(-1,1))\ncombi.GarageType = enc.fit_transform(combi.GarageType.values.reshape(-1,1))\ncombi.GarageFinish = enc.fit_transform(combi.GarageFinish.values.reshape(-1,1))\ncombi.GarageQual = enc.fit_transform(combi.GarageQual.values.reshape(-1,1))\ncombi.GarageCond = enc.fit_transform(combi.GarageCond.values.reshape(-1,1))\ncombi.PavedDrive = enc.fit_transform(combi.PavedDrive.values.reshape(-1,1))\ncombi.PoolQC = enc.fit_transform(combi.PoolQC.values.reshape(-1,1))\ncombi.Fence = enc.fit_transform(combi.Fence.values.reshape(-1,1))\ncombi.MiscFeature = enc.fit_transform(combi.MiscFeature.values.reshape(-1,1))\ncombi.SaleType = enc.fit_transform(combi.SaleType.values.reshape(-1,1))\ncombi.SaleCondition = enc.fit_transform(combi.SaleCondition.values.reshape(-1,1))","bf516e17":"combi = (combi - combi.min()) \/ (combi.max() - combi.min())\ncombi","cb6ef526":"y = target\n\nX = combi[: len(train)]\nX_test = combi[len(train) :]","31598a3e":"from sklearn.model_selection import train_test_split\n\n# Split into validation and training data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=1, shuffle=True)\n\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","821bca87":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=3, random_state=1).fit(X_train)\n\nX_train = pca.transform(X_train)\nX_val = pca.transform(X_val)\nX_test = pca.transform(X_test)\n\nX_train.shape, X_val.shape, X_test.shape","3c4f2f10":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression().fit(X_train,y_train)\nprint(model.score(X_train, y_train))","f23f44f1":"y_pred = model.predict(X_val)\ny_pred = y_pred.astype(int)\nprint(model.score(X_val, y_val))","ca1a8d14":"from sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_val, y_pred, squared=True)\nrmse","78b81a53":"df=pd.DataFrame({'Actual': y_val, 'Predicted':y_pred})\ndf","b1ce7bb0":"plt.figure(figsize=(10,10))\nplt.scatter(y_val, y_pred, c='crimson')\nplt.yscale('log')\nplt.xscale('log')\n\np1 = max(max(y_pred), max(y_val))\np2 = min(min(y_pred), min(y_val))\nplt.plot([p1, p2], [p1, p2], 'b-')\nplt.xlabel('Actual Values', fontsize=15)\nplt.ylabel('Predictions', fontsize=15)\nplt.axis('equal')\nplt.show()\n","b8b1056e":"final_labels = model.predict(X_test)\nfinal_labels = final_labels.astype(int)\nfinal_labels","aa8a11bc":"final_result = pd.DataFrame({'Id': test['Id'], 'SalePrice': final_labels})","19a9b779":"final_result.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","154485aa":"#upload submission\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","d44b4ebe":"Drop ID","da9f2e9c":"Check for null values","88bbfe2f":"Problem Statement\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.\n\nAcknowledgments\n\nThe Ames Housing dataset was compiled by Dean De Cock for use in data science education. It's an incredible alternative for data scientists looking for a modernized and expanded version of the often cited Boston Housing dataset.","393ebaa8":"PCA","67c86d6a":"Submit predictions","780bcf60":"Graph","0930e4d9":"Describe target variable","197a8f83":"Read files","3b81a427":"Combine Train and test","1c24a8c3":"Predict on validation set","be97621a":"Define model","38c527ea":"Define X, y and X_test variables","8f3b9f13":"Ordinal encode","33f2ceca":"Predict on test set","f1c47e0f":"Split train dataset for training and testing","10ae3d65":"Impute null values","9478570f":"Import standard libraries","87bff581":"Normalise"}}