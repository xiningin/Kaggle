{"cell_type":{"bc351b7e":"code","5692b519":"code","d91f01bd":"code","0b0f9705":"code","2b433dbd":"code","54393e62":"code","42732b3e":"code","8ec638af":"code","73753397":"code","e52d0568":"code","582c6af0":"code","9425d8e0":"code","eb9c23d1":"code","a1edbaaa":"code","8c2b25b6":"code","50a5c938":"code","610f1174":"code","4e6beb90":"code","fbd611c4":"code","de327366":"code","a198022e":"code","22724ad6":"markdown","bd0e3f79":"markdown","29eb4aa7":"markdown","8bdec566":"markdown","834770f9":"markdown","27bb457e":"markdown","90155386":"markdown","c2db3dc4":"markdown","5f2af3fc":"markdown","d4cf125b":"markdown","7f1f9447":"markdown","2df774aa":"markdown","016fef22":"markdown","cf2703de":"markdown","14156bec":"markdown","fa347bac":"markdown","c86b06b0":"markdown"},"source":{"bc351b7e":"import pandas as pd\nimport numpy as np","5692b519":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d91f01bd":"df1 = pd.read_csv(\"\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv\")","0b0f9705":"df1.head()","2b433dbd":"df2 = pd.read_csv(\"\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv\")","54393e62":"df2.head()","42732b3e":"# Making a new dataframe genre containing only artists and genre. Cleaning the dataframe df1.\n\ngenre=df1[[\"genres\",\"artists\"]]\ngenre=genre[genre[\"genres\"]!=\"[]\"]\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"'\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"[\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"]\", \"\")","8ec638af":"# Exploring Genre dataframe\ngenre.head(50)","73753397":"# Cleaning the dataframe df2 that contains song details.\ndf2.head()\nsongs = df2\nsongs[\"artists\"]=songs[\"artists\"].str.replace(\"[\", \"\")\nsongs[\"artists\"]=songs[\"artists\"].str.replace(\"]\", \"\")\nsongs[\"artists\"]=songs[\"artists\"].str.replace(\"'\", \"\")\nsongs.head()","e52d0568":"merged=pd.merge(genre, songs)","582c6af0":"merged.head()","9425d8e0":"rock_or_punk_merged = merged[merged[\"genres\"].str.contains(\"rock|punk\")]\nrock_or_punk_merged.head()","eb9c23d1":"rocknrun_150_165bpm = rock_or_punk_merged[(rock_or_punk_merged.tempo >= 150)&(rock_or_punk_merged.tempo <=165)]\nrocknrun_150_165bpm.head()","a1edbaaa":"top200 = rocknrun_150_165bpm.sort_values(['popularity'], ascending=False).head(200)\ntop200_rocknrun_150_165bpm = top200[[\"artists\",\"name\"]]","8c2b25b6":"top200_rocknrun_150_165bpm.rename(columns={'artists':'ARTIST','name': 'TITLE'}).to_csv(r'top200_rocknrun_150_165bpm.csv')","50a5c938":"rocknrun_165_170bpm = rock_or_punk_merged[(rock_or_punk_merged.tempo > 165)&(rock_or_punk_merged.tempo <=170)]\nrocknrun_165_170bpm.head()","610f1174":"top200 = rocknrun_165_170bpm.sort_values(['popularity'], ascending=False).head(200)\ntop200_rocknrun_165_170bpm = top200[[\"artists\",\"name\"]]","4e6beb90":"top200_rocknrun_165_170bpm.rename(columns={'artists':'ARTIST','name': 'TITLE'}).to_csv(r'top200_rocknrun_165_170bpm.csv')","fbd611c4":"rocknrun_170_185bpm = rock_or_punk_merged[(rock_or_punk_merged.tempo > 170)&(rock_or_punk_merged.tempo <=185)]\nrocknrun_170_185bpm.head()","de327366":"top200 = rocknrun_170_185bpm.sort_values(['popularity'], ascending=False).head(200)\ntop200_rocknrun_170_185bpm = top200[[\"artists\",\"name\"]]","a198022e":"top200_rocknrun_170_185bpm.rename(columns={'artists':'ARTIST','name': 'TITLE'}).to_csv(r'top200_rocknrun_170_185bpm.csv')","22724ad6":"Having the lists in csv, I used Nick Wanders' amazing and free [CSV Playlist Import Tool](https:\/\/nickwanders.com\/projects\/ng-spotify-importer\/) to convert them into Spotify playlists.  \nGet creative and make your own playlists fit to your music tastes and needs!!! Have fun!!","bd0e3f79":"## Read me\n\nUsing the public data called Spotify Dataset 1921-2020, 160+ Tracks, available at Kaggle, I created playlists based in some conditions:\n\n* I filtered only songs classified as genre: rock | punk  \n* Then I filtered songs with 150-165 BPM, 165-170 BPM and 170-185 BPM  \n* Ordered the songs by popularity and got the top 200 songs in each group.  \n* Created clean dataframes with only two columns each: \"artist\" and \"title\"  \n* Exported them as csv files  \n\nHaving the lists in csv, I used Nick Wanders' amazing and free [CSV Playlist Import Tool](https:\/\/nickwanders.com\/projects\/ng-spotify-importer\/) to convert them into Spotify playlists  \nTo listen to the final playlists created:\n\nRock Run 150-165 BPM: https:\/\/open.spotify.com\/playlist\/2PBhmp7YrS4Rfrtv8umMes?si=HH4AKuGfSz-k86gWBeeITg\n\nRock Run 160-175 BPM: https:\/\/open.spotify.com\/playlist\/0XTYYFSi5iahCSrb4jlYhb?si=osW1kVzAReuKMMr_HxAbsg\n\nRock Run 170-185 BPM: https:\/\/open.spotify.com\/playlist\/1x4zx7jTgCIfTZSvM08rP8?si=yUr6di_3QPKoZs-Ad6kCpw","29eb4aa7":"## 1. Importing csv files","8bdec566":"## 6c. Renaming columns and exporting to csv","834770f9":"## Step 2: Make dictionary of artists and corresponding genre.","27bb457e":"# The end!","90155386":"# Repeat steps 4, 5, 6 to create different playlists with other BPM ranges","c2db3dc4":"## 6. Renaming columns and exporting to csv","5f2af3fc":"## 3. Get only the artists from genres rock or punk","d4cf125b":"## 6b. Renaming columns and exporting to csv","7f1f9447":"## 4b. Select only songs within 165-170 BPM","2df774aa":"## 4. Select only songs within 150-165 BPM","016fef22":"## 4c. Select only songs within 170-185 BPM","cf2703de":"## 5b. Sort by popularity and get only the top 200 more popular","14156bec":"The data I needed was separated in two tables: \n1. `data_w_genres.csv`: has columns `artists` and `genre`\n2. `data.csv`: has columns `artists`, `songs`, `BPM` and popularity\n\nThe following steps have been followed from Music trends 1921-2020 EDA [notebook](https:\/\/www.kaggle.com\/capricode2512\/music-trends-1921-2020-eda) to make a dataframe having all the information in a single table.","fa347bac":"## 5c. Sort by popularity and get only the top 200 more popular","c86b06b0":"## 5. Sort by popularity and get only the top 200 more popular"}}