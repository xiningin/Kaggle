{"cell_type":{"09d473b6":"code","d72f4d48":"code","6789e0e1":"code","074fb6a2":"code","a98ca3a7":"code","b9926c47":"code","87eab481":"code","25da7530":"code","1141f998":"code","deaeba5c":"code","8566a157":"code","612dc285":"code","84757a63":"code","51998e01":"code","56408d5d":"code","7d41b6d4":"code","e65274b1":"code","feceb1a1":"code","8ee8a97c":"code","fd49385b":"code","62b6316e":"code","666f81b3":"code","cf106ad6":"code","29ecb02e":"code","0e5a4eff":"code","e9fee710":"code","6d7d7aa4":"code","7fb30f04":"code","0e142bfa":"code","01a27c84":"code","e7b636f2":"code","36bf8fb3":"code","55772377":"code","285f9609":"code","4c7e86cd":"code","05852872":"code","46c6e7b1":"code","1c045167":"code","e6aad505":"code","e79f1f45":"code","3569a3a9":"code","1f50efbc":"code","660e5e4a":"code","eb0f94cf":"code","e00bcaa3":"code","7badd8bc":"code","bdc21f2d":"code","3af992d9":"code","a8e5d634":"code","911f63a0":"code","3d370b62":"code","421740b3":"code","a3c79769":"code","4c928efd":"code","5566a52a":"code","183c9c86":"code","915ad2cf":"code","ff541d9e":"code","3cfcb3fe":"code","b3f03ca9":"code","7cdbb8b6":"code","3f87cace":"code","c89d2a19":"code","04b3fe3d":"code","55342b83":"code","72ef4d8c":"code","56c91e2e":"code","72d9f134":"markdown","13bcf783":"markdown","35af1d8a":"markdown","e654a0f2":"markdown","74e480d4":"markdown","dee498fc":"markdown","a6619471":"markdown","6bfd874f":"markdown","db302d05":"markdown","4896553c":"markdown","2c58df80":"markdown","a9c9ee2f":"markdown","8954c1af":"markdown","5354dc05":"markdown","452c82aa":"markdown","e0860c30":"markdown","4be91f8e":"markdown","0f21b7de":"markdown","a32ffc93":"markdown","f632f0e1":"markdown","eadc3eaf":"markdown","3d97900e":"markdown","97b75934":"markdown","6c1b0eda":"markdown","17b876f7":"markdown","8f8ffa42":"markdown","e96ba205":"markdown","7a7f758e":"markdown","dc18d593":"markdown","e906b1f4":"markdown","01df8bb1":"markdown","8def44ff":"markdown","d7b9ff42":"markdown","43d0ea03":"markdown"},"source":{"09d473b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d72f4d48":">>> 8 + 9\n","6789e0e1":">>> 45 - 6*7","074fb6a2":">>> (21 - 3*4)","a98ca3a7":">>> 7 \/ 4 # la division siempre retorna un un n\u00famero de punto flotante","b9926c47":">>> 15 \/ 4 # la divisi\u00f3n cl\u00e1sica retorna un punto flotante","87eab481":">>> 15 \/\/ 4 # la division entera descarta la parte fraccional","25da7530":">>> 15 % 4 # el operador % retorna el resto de la divisi\u00f3n","1141f998":">>> 3 * 4 +3 # resultado * divisi\u00f3n + resta","deaeba5c":">>> 4 ** 3 # 4 al cubo","8566a157":">>> 5 ** 6 # 5 a la potencia de 6","612dc285":">>> ancho = 15\n>>> largo = 2 * 6\n>>> ancho * largo","84757a63":">>> n  # tratamos de acceder a una variable no definida\n Traceback(most recent call last): \n    File \"<stdin>\", line 1, in <module>\n    NameError: name 'n' is not defined","51998e01":">>> 3 * 5.18 -1","56408d5d":">>> impuesto = 20.2\/ 100\n>>> precio = 100.50\n>>> precio * impuesto","7d41b6d4":">>> precio + _","e65274b1":">>> 'frutas y verduras' # comillas simples","feceb1a1":">>> 'didn\u00b4t' # usa \\'para escapar comillas simples...","8ee8a97c":">>> \" didn't\" # ... o de lo contrario usa comillas doblas","fd49385b":">>> '\"si,\"le dijo.'","62b6316e":">>> \"\\'si,\\' le dijo \"","666f81b3":">>> '\"Doesn\\'t,\" he cry.'","cf106ad6":">>> print('\"Doesn\\'t,\" he cry.')","29ecb02e":">>> s = 'Primera linea.\\nSegunda l\u00ednea.'  # \\n significa nueva l\u00ednea\n>>> s  # sin print(), \\n es inclu\u00eddo en la salida","0e5a4eff":">>> print(s)  # con print(), \\n produce una nueva l\u00ednea","e9fee710":" >>> print('C:\\algo\\nuevo')  # aqu\u00ed \\n significa nueva l\u00ednea!","6d7d7aa4":">>> print(r'C:\\algo\\nuevo')  # Nota la r antes de la comilla","7fb30f04":"print(\"\"\"\\\nUso: algo [OPTIONS]    \n-h                        Muestra el mensaje de uso    \n-H nombrehost             Nombre del host al cual conectarse\n\"\"\")","0e142bfa":">>> # 4 veces 'tu', seguido de lum\n>>> 4 * 'tu' + 'lum'","01a27c84":">>> 'note' 'book'","e7b636f2":"Esto solo funciona con dos literales, no con variables ni expresiones:","36bf8fb3":">>> prefix = 'note'\n>>> prefix 'book'  # no se puede concatenar una variable y una cadena literal","55772377":">>> prefix = 'note'\n>>> prefix + 'book'","285f9609":">>> texto = ('Pon\u00e9 muchas cadenas dentro de par\u00e9ntesis '    \n             'para que ellas sean unidas juntas.')\n>>> texto","4c7e86cd":">>> palabra = 'Programa'\n>>> palabra [2] # caracter en la posicion 2","05852872":">>> palabra [5]","46c6e7b1":">>> palabra [-1]","1c045167":">>> palabra [-4]","e6aad505":">>> palabra [ 0:4] # caracteres desde la posicion 1 (incluida) hasta la posici\u00f3n 4 (excluida)","e79f1f45":">>> palabra [ 4:7 ]","3569a3a9":">>> palabra[:2] + palabra[2:]","1f50efbc":">>> palabra[:4] + palabra [4:]","660e5e4a":">>> palabra[:2]  # caracteres desde el principio hasta la posici\u00f3n 2 (excluida)","eb0f94cf":">>> palabra[3:] # caracateres desde la posicion 4 (incluida) hasta el final","e00bcaa3":">>> palabra[-2:] # caracteres desde la ante-ultima (incluida) hasta el final","7badd8bc":">>> palabra[28]","bdc21f2d":">>> palabra [5:28]","3af992d9":">>> palabra [48:]","a8e5d634":">>> 'C' + palabra [1:]","911f63a0":">>> palabra [:2] + 'imo'","3d370b62":">>> s = 'archirequerecontrarico'\n>>> len (s)","421740b3":">>> pares = [ 2, 4, 6, 8,10]\n>>> pares","a3c79769":">>> pares [0]","4c928efd":">>> pares [-1]","5566a52a":">>> pares [-4:]","183c9c86":">>> pares [:]","915ad2cf":">>> pares + [ 12, 14, 16, 18, 20 ]","ff541d9e":">>> impares = [ 1, 3, 5, 7, 8, 11]\n>>> impares [4] = 9\n>>> impares","3cfcb3fe":">>> impares.append(13)\n>>> impares.append(13+ 2)\n>>> impares","b3f03ca9":">>> letras =['l','m','n','o','p','q']\n>>> letras","7cdbb8b6":">>> # reemplazar algunos valores\n>>> letras[3:] = ['O','P','Q']\n>>> letras","3f87cace":">>> # borrar valores\n>>> letras[3:] = []\n>>> letras","c89d2a19":">>> # borrar la lista reemplzando todos los elementos por una lista vac\u00eda\n>>> letras[:] = []\n>>> letras","04b3fe3d":">>> vocales = ['a','e','i','o','u']\n>>> len(vocales)","55342b83":">>> a = ['a', 'e', 'i', 'o', 'u']\n>>> n = [1, 2, 3, 4, 5]\n>>> x = [a,n]\n>>> x","72ef4d8c":">>> x[0]","56c91e2e":">>> x[0][2]","72d9f134":"Los n\u00fameros enteros (por ejemplo 2, 4, 20) son de tipo int, aquellos con una parte fraccional (por ejemplo 5.0, 1.6) sonde tipo float. Vamos a ver m\u00e1s sobre tipos de n\u00fameros luego en este tutorial.La  divisi\u00f3n  (\/)  siempre  retorna  un  punto  flotante.  Para  hacer  floor  division  y  obtener  un  resultado  entero  (descartandocualquier resultado fraccional) pod\u00e9s usar el operador \/\/; para calcular el resto pod\u00e9s usar ","13bcf783":"Los \u00edndices de las rebanadas tienen valores por defecto \u00fatiles; el valor por defecto para el primer \u00edndice es cero, el valor pordefecto para el segundo \u00edndice es la longitud de la cadena a rebanas:","35af1d8a":"Nota que -0 es lo mismo que 0, los \u00edndice negativos comienzan desde -1.Adem\u00e1s  de  los  \u00edndices,  las  rebanadas  tambi\u00e9n  est\u00e1n  soportadas.  Mientras  que  los  \u00edndices  son  usados  para  obtenercaracteres individuales, las rebanadas te permiten obtener sub-cadenas:","e654a0f2":"El  signo  igual  (=)  es  usado  para  asignar  un  valor  a  una  variable.  Luego,  ning\u00fan  resultado  es  mostrado  antes  del  pr\u00f3ximoprompt","74e480d4":"Sin embargo, \u00edndices fuera de rango en rebanadas son manejados satisfactoriamente:","dee498fc":" Mi primer cuaderno ","a6619471":"Las  cadenas  de  texto  literales  pueden  contener  m\u00faltiples  l\u00edneas.  Una  forma  es  usar  triple  comillas:  \"\"\"...\"\"\"  o'''...'''. Los fin de l\u00ednea son inclu\u00eddos autom\u00e1ticamente, pero es posible prevenir esto agregando una \\ al final de lal\u00ednea. Por ejemplo:","6bfd874f":"Nota como el primero es siempre inclu\u00eddo, y que el \u00faltimo es siempre exclu\u00eddo. Esto asegura que s[:i] + s[i:] siempresea igual a s:","db302d05":"Esta caracter\u00edstica es particularmente \u00fatil cuando quer\u00e9s separar cadenadas largas:","4896553c":"La funci\u00f3n incorporada len() devuelve la longitud de una cadena de texto:","2c58df80":"Si  no  quer\u00e9s  que  los  caracteres  antepuestos  por  \\ sean  interpretados  como  caracteres  especiales,  pod\u00e9s  usar  cadenascrudas agregando una r antes de la primera comilla:","a9c9ee2f":"En el int\u00e9prete interactivo, la salida de cadenas est\u00e1 encerrada en comillas y los caracteres especiales son escapados conbarras  invertidas.  Aunque  esto  a  veces  luzca  diferente  de  la  entrada  (las  comillas  que  encierran  pueden  cambiar),  las  doscadenas  son  equivalentes.  La  cadena  se  encierra  en  comillas  dobles  si  la  cadena  contiene  una  comilla  simple  y  ningunadoble, de lo contrario es encerrada en comillas simples. La funci\u00f3n print() produce una salida m\u00e1s legible, omitiendo lascomillas que la encierran e imprimiendo caracteres especiales y escapados:","8954c1af":"Hay soporte completo de punto flotante; operadores que operando mezclados convertiran los enteros a punto flotante.","5354dc05":"Si una variable no est\u00e1 \"definida\" (con un valor asignado), intentar usarla producir\u00e1 un error","452c82aa":"La funci\u00f3n predefinida len() tambi\u00e9n sirve para las listas:","e0860c30":"En  el  modo  interactivo,  la  \u00faltima  expresi\u00f3n  impresa  es  asignada  a  la  variable  _.  Esto  significa  que  cuando  est\u00e9s  usandoPython como una calculadora de escritorio, es m\u00e1s f\u00e1cil seguir calculando, por ejemplo","4be91f8e":"Dos o m\u00e1s cadenas literales (aquellas encerradas entre comillas) una al lado de la otra son autom\u00e1ticamente concatenadas:","0f21b7de":"Tambi\u00e9n pod\u00e9s agregar nuevos \u00edtems al final de la lista, usando el m\u00e9todo append() ","a32ffc93":"Tambi\u00e9n es posible asignar a una rebanada, y esto incluso puede cambiar la longitud de la lista o vaciarla totalmente:","f632f0e1":"Si quer\u00e9s concatenar variables o una variable con un literal, us\u00e1 +:","eadc3eaf":"Todas  las  operaciones  de  rebanado  devuelven  una  nueva  lista  conteniendo  los  elementos  pedidos.  Esto  significa  que  lasiguiente rebanada devuelve una copia superficial de la lista:","3d97900e":"Las cadenas de texto pueden ser concatenadas (pegadas juntas) con el operador + y repetidas con *:","97b75934":"Python tiene varios tipos de datos compuestos, usados para agrupar otros valores. El m\u00e1s vers\u00e1til es la lista, la cual puedeser  escrita  como  una  lista  de  valores  separados  por  coma  (\u00edtems)  entre  corchetes.  Las  listas  pueden  contener  \u00edtems  dediferentes tipos, pero usualmente los \u00edtems son del mismo tipo:","6c1b0eda":"Los \u00edndices quiz\u00e1s sean n\u00fameros negativos, para empezar a contar desde la derechecha:","17b876f7":"Las  cadenas  de  Python  no  pueden  ser  modificadas  --  son  immutable.  Por  eso,  asignar  a  una  posici\u00f3n  indexada  de  lacadena resulta en un error.\nSi necesit\u00e1s una cadena diferente, deber\u00edas crear una nueva","8f8ffa42":"Las cadenas de texto se pueden indexar (sub\u00edndices), el primer car\u00e1cter de la cadena tiene el \u00edndice 0. No hay un tipo dedato para los caracteres; un car\u00e1cter es simplemente una cadena de longitud uno:","e96ba205":"Intentar usar un \u00edndice que es muy grande resultar\u00e1 en un error:","7a7f758e":"Las listas tambi\u00e9n soportan operaciones como concatenaci\u00f3n:","dc18d593":" N\u00fameros . El  int\u00e9rprete  act\u00faa  como  una  simple  calculadora;  pod\u00e9s  ingresar  una  expresi\u00f3n  y  este  escribir\u00e1  los  valores.  La  sintaxis  essencilla:  los  operadores  +,  -,  *  y  \/  funcionan  como  en  la  mayor\u00eda  de  los  lenguajes  (por  ejemplo,  Pascal  o  C);  lospar\u00e9ntesis (()) pueden ser usados para agrupar. Por ejemplo:","e906b1f4":"Con Python, es posible usar el operador ** para calcular potencias 2:","01df8bb1":"A diferencia de las cadenas de texto, que son immutable, las listas son un tipo mutable, es posible cambiar un su contenido:","8def44ff":"Es posible anidar listas (crear listas que contengan otras listas), por ejemplo:","d7b9ff42":"Como las cadenas de caracteres (y todos los otros tipos sequence integrados), las listas pueden ser indexadas y rebanadas:","43d0ea03":"Adem\u00e1s  de  n\u00fameros,  Python  puede  manipular  cadenas  de  texto,  las  cuales  pueden  ser  expresadas  de  distintas  formas.Pueden estar encerradas en comillas simples ('...') o dobles (\"...\") con el mismo resultado 3. \\ puede ser usado paraescapar comillas:"}}