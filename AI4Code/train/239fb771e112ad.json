{"cell_type":{"ee233a86":"code","2101de09":"code","c167e533":"code","49b66743":"code","f9ea8e92":"code","4cde3b4e":"code","7682764d":"code","ed6d307e":"code","83aa92c4":"code","0715e06a":"code","743cd653":"code","d5b3289c":"code","460d7967":"code","3d90bc22":"code","9ad6bd43":"code","e156ba17":"code","990c66ef":"code","6bfdfc0f":"code","832c5f82":"code","dbd6b611":"code","62fca59b":"code","27755b20":"markdown","2e97ce54":"markdown","06598148":"markdown","a1fc2004":"markdown","4a46cf99":"markdown","23cd9878":"markdown","274bf18f":"markdown","569a09a2":"markdown","ec32330a":"markdown","d48aa5cf":"markdown"},"source":{"ee233a86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2101de09":"import nltk\nnltk.download('punkt') \nnltk.download('wordnet') \nnltk.download('stopwords')\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem.porter import PorterStemmer","c167e533":"text=\"\"\"Mike and Morris lived in the same village. While Morris owned the largest jewelry shop in the village, Mike was a poor farmer. Both had large families with many sons, daughters-in-law and grandchildren.\nOne fine day, Mike, tired of not being able to feed his family, decided to leave the village and move to the city where he was certain to earn enough to feed everyone. Along with his family, he left the village for the city. At night, they stopped under a large tree. There was a stream running nearby where they could freshen up themselves. He told his sons to clear the area below the tree, he told his wife to fetch water and he instructed his daughters-in-law to make up the fire and started cutting wood from the tree himself. They didn\u2019t know that in the branches of the tree, there was a thief hiding. He watched as Mike\u2019s family worked together and also noticed that they had nothing to cook. Mike\u2019s wife also thought the same and asked her husband \u201d Everything is ready but what shall we eat?\u201d. Mike raised his hands to heaven and said \u201d Don\u2019t worry.He is watching all of this from above. He will help us.\u201d\nThe thief got worried as he had seen that the family was large and worked well together. Taking advantage of the fact that they did not know he was hiding in the branches, he decided to make a quick escape. \nHe climbed down safely when they were not looking and ran for his life. But, he left behind the bundle of stolen jewels and money which dropped into Mike\u2019s lap. Mike opened it and jumped with joy when he saw the contents. The family gathered all their belongings and returned to the village. There was great excitement when they told everyone how they got rich.\nMorris thought that the tree was miraculous and this was a nice and quick way to earn some money. He ordered his family to pack some clothes and they set off as if on a journey. They also stopped under the same tree and Morris started commanding everyone as Mike had done. But no one in his family was willing to obey his orders. Being a rich family, they were used to having servants all around. So, the one who went to the river to fetch water enjoyed a nice bath. The one who went to get wood for fire went off to sleep. Morris\u2019s wife said \u201d Everything is ready but what shall we eat ?\u201d Morris raised his hands and said, \u201d Don\u2019t worry. He is watching all of this from above. He will help us.\u201d\nAs soon as he finished saying, the thief jumped down from the tree with a knife in hand. Seeing him, everyone started running around to save their lives. The thief stole everything they had and Morris and his family had to return to the village empty handed, having lost all their valuables that they had taken with them.\"\"\"","49b66743":"sentences = sent_tokenize(text) \ntotal_documents = len(sentences)\nsentences","f9ea8e92":"def frequency_matrix(sentences):\n    freq_matrix = {}\n    stopWords = set(stopwords.words(\"english\"))\n    ps = PorterStemmer()\n\n    for sent in sentences:\n        freq_table = {}\n        words = word_tokenize(sent)\n        for word in words:\n            word = word.lower()\n            word = ps.stem(word)\n            if word in stopWords:\n                continue\n\n            if word in freq_table:\n                freq_table[word] += 1\n            else:\n                freq_table[word] = 1\n\n        freq_matrix[sent[:10]] = freq_table\n\n    return freq_matrix","4cde3b4e":"def term_frequency_matrix(freq_matrix):\n    tf_matrix = {}\n\n    for sent, f_table in freq_matrix.items():\n        tf_table = {}\n\n        no_of_words_in_sentence = len(f_table)\n        for word, count in f_table.items():\n            tf_table[word] = count \/ no_of_words_in_sentence\n\n        tf_matrix[sent] = tf_table\n\n    return tf_matrix","7682764d":"def documents_per_words(freq_matrix):\n    word_per_doc_table = {}\n\n    for sent, f_table in freq_matrix.items():\n        for word, count in f_table.items():\n            if word in word_per_doc_table:\n                word_per_doc_table[word] += 1\n            else:\n                word_per_doc_table[word] = 1\n\n    return word_per_doc_table","ed6d307e":"def _create_idf_matrix(freq_matrix, count_doc_per_words, total_documents):\n    idf_matrix = {}\n\n    for sent, f_table in freq_matrix.items():\n        idf_table = {}\n\n        for word in f_table.keys():\n            idf_table[word] = math.log10(total_documents \/ float(count_doc_per_words[word]))\n\n        idf_matrix[sent] = idf_table\n\n    return idf_matrix","83aa92c4":"def _create_tf_idf_matrix(tf_matrix, idf_matrix):\n    tf_idf_matrix = {}\n\n    for (sent1, f_table1), (sent2, f_table2) in zip(tf_matrix.items(), idf_matrix.items()):\n\n        tf_idf_table = {}\n\n        for (word1, value1), (word2, value2) in zip(f_table1.items(),\n                                                    f_table2.items()):  # here, keys are the same in both the table\n            tf_idf_table[word1] = float(value1 * value2)\n\n        tf_idf_matrix[sent1] = tf_idf_table\n\n    return tf_idf_matrix","0715e06a":"def _score_sentences(tf_idf_matrix): \n    \n\n    sentenceValue = {}\n\n    for sent, f_table in tf_idf_matrix.items():\n        total_score_per_sentence = 0\n\n        total_no_of_words_in_sentence = len(f_table)\n        for word, score in f_table.items():\n            total_score_per_sentence += score\n\n        sentenceValue[sent] = total_score_per_sentence \/ total_no_of_words_in_sentence\n\n    return sentenceValue","743cd653":"def _average_score(sentenceValue):\n    \n    \n    sumValues = 0\n    for entry in sentenceValue:\n        sumValues += sentenceValue[entry]\n\n    average = (sumValues \/ len(sentenceValue))\n\n    return average","d5b3289c":"def _generate_summary(sentences, sentenceValue, threshold):\n    sentence_count = 0\n    summary = ''\n\n    for sentence in sentences:\n        if sentence[:10] in sentenceValue and sentenceValue[sentence[:10]] >= (threshold):\n            summary += \" \\n\" + sentence\n            sentence_count += 1\n\n    return summary","460d7967":"#1 create the sentences by using sent_tokenize\nsentences = sent_tokenize(text) \ntotal_documents = len(sentences)\n","3d90bc22":"import math\n# 2 Create the Frequency matrix of the words in each sentence.\nfreq_matrix = frequency_matrix(sentences)\nprint(freq_matrix)","9ad6bd43":"# 3 Calculate TermFrequency and generate a matrix\ntf_matrix = term_frequency_matrix(freq_matrix)\nprint(tf_matrix)","e156ba17":"# 4 creating table for documents per words\ncount_doc_per_words = documents_per_words(freq_matrix)\nprint(count_doc_per_words)","990c66ef":"# 5 Calculate IDF and generate a matrix\nidf_matrix = _create_idf_matrix(freq_matrix, count_doc_per_words, total_documents)\nprint(idf_matrix)","6bfdfc0f":"# 6 Calculate TF-IDF and generate a matrix\ntf_idf_matrix = _create_tf_idf_matrix(tf_matrix, idf_matrix)\nprint(tf_idf_matrix)","832c5f82":"# 7 Important Algorithm: score the sentences\nsentence_scores = _score_sentences(tf_idf_matrix)\nprint(sentence_scores)","dbd6b611":"# 8 Find the threshold\nthreshold = _average_score(sentence_scores)\nprint(threshold)","62fca59b":"# 9 Important Algorithm: Generate the summary\nsummary = _generate_summary(sentences,sentence_scores,threshold)\nprint(summary)","27755b20":"sentence scoring by\n adding the TF frequency of every non-stop word in a sentence divided by total no of words in a sentence.","2e97ce54":"Creating freq_matrix for a word within sentences","06598148":"defining a function for summary","a1fc2004":"creating tf_idf matrix","4a46cf99":"defining function which gives no of documents contain the word","23cd9878":"# Text_summerization using tf_idf Algo\n","274bf18f":"Term frequency (TF) is how often a word appears in a document, divided by how many words there are.\n### TF(t) = (Number of times term t appears in a document) \/ (Total number of terms in the document)\nTerm frequency is how common a word is, inverse document frequency (IDF) is how unique or rare a word is.\n### IDF(t) = log_e(Total number of documents \/ Number of documents with term t in it) \nExample,\nConsider a document containing 100 words wherein the word apple appears 5 times. The term frequency (i.e., TF) for apple is then (5 \/ 100) = 0.05.\nNow, assume we have 10 million documents and the word apple appears in one thousand of these. Then, the inverse document frequency (i.e., IDF) is calculated as log(10,000,000 \/ 1,000) = 4.\nThus, the TF-IDF weight is the product of these quantities: 0.05 * 4 = 0.20.","569a09a2":"TF(t) = (Number of times term t appears in a document) \/ (Total number of terms in the document)","ec32330a":" Tokenizing into sentences","d48aa5cf":"IDF(t) = log_e(Total number of documents \/ Number of documents with term t in it) "}}