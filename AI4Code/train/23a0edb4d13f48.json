{"cell_type":{"7b328c5f":"code","71dd5361":"code","b25d4f11":"code","cea3dd23":"code","bdaa9fc4":"code","925c6d76":"code","bab4fdc8":"code","4304dfe6":"code","90d48280":"markdown"},"source":{"7b328c5f":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\nfrom datetime import datetime\ndatetime.now().strftime(\"%Y\/%m\/%d %H:%M:%S\")","71dd5361":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import rcParams \nimport seaborn as sns\n\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport optuna\n\ndef matplotlib_config():\n    rcParams['font.family'] = 'sans-serif'\n    rcParams['font.sans-serif'] = \\\n            ['Hiragino Maru Gothic Pro', 'Yu Gothic', 'Meirio', 'Takao', 'IPAexGothic', 'IPAPGothic', 'VL PGothic', 'Noto Sans CJK JP']\n    rcParams['figure.figsize'] = 12, 8\n    rcParams[\"font.size\"] = 12\n\nmatplotlib_config()","b25d4f11":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\ndf_train.head()","cea3dd23":"fillnas = {\n    'Age': df_train['Age'].median(),\n    'Fare': df_train['Fare'].median(),\n    'Cabin': 'Unknown',\n    'Embarked': df_train['Embarked'].mode(),\n}\n\ndef preprocess(df, is_test=False):\n    x = df.copy()\n    \n    for k, v in fillnas.items():\n        x[k].fillna(v, inplace=True)\n\n    def to_age_group(x):\n        if x < 5:\n            return 0\n        elif x < 18:\n            return 1\n        elif 60 <= x:\n            return 2\n        else:\n            return 3\n        \n    x['Age Group'] = x['Age'].map(to_age_group)\n    \n    x['is male'] = x['Sex']=='male'\n    \n    x['Family Size'] = x['SibSp'] + x['Parch'] + 1\n    \n    def to_family_type(x):\n        if x == 1:\n            return 0\n        elif x <= 4:\n            return 1\n        else:\n            return 2\n    \n    x['Family Type'] = x['Family Size'].map(to_family_type)\n    x.drop(columns='Family Size', inplace=True)\n    \n    x['Cabin Unkown'] = x['Cabin']=='Unknown'\n    \n    df_embarked = pd.get_dummies(x['Embarked'])\n    for col in df_embarked:\n        x[f'Embarked_{col}'] = df_embarked[col]\n    \n    x.drop(columns=['PassengerId', 'Name', 'Sex', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'Embarked'], inplace=True)\n    \n    if is_test:\n        return x\n    else:\n        y = x['Survived']\n        x.drop(columns='Survived', inplace=True)\n        return x, y\n\ntrain_x, train_y = preprocess(df_train)\ntest_x = preprocess(df_test, is_test=True)\ntrain_x.head()\ntest_x.head()","bdaa9fc4":"%%time\nmode = optuna.logging.WARNING # optuna.logging.DEBUG, optuna.logging.INFO or optuna.logging.WARNING\noptuna.logging.set_verbosity(mode)\n\ndef objective(trial):\n    n_estimators = trial.suggest_int('n_estimators', 100, 400)\n    min_samples_split = trial.suggest_int('min_samples_split', 2, 10)\n    clf = RandomForestClassifier(\n        n_estimators=n_estimators,\n        min_samples_split=min_samples_split,\n    )\n    scores = cross_val_score(clf, train_x, train_y, cv=5)\n    return 1 - scores.mean()\n\n\nstudy = optuna.create_study()\nstudy.optimize(objective, n_trials=100)","925c6d76":"study.trials_dataframe()\nprint(study.best_params, 1 - study.best_value)","bab4fdc8":"clf = RandomForestClassifier(\n    n_estimators=study.best_params['n_estimators'],\n    min_samples_split=study.best_params['min_samples_split'],\n)\n\n_ = clf.fit(train_x, train_y)\npred = clf.predict(test_x)","4304dfe6":"sub = pd.DataFrame(df_test['PassengerId'])\nsub['Survived'] = list(map(int, pred))\nsub.to_csv('submission.csv', index=False)","90d48280":"## Setting config and Loading data"}}