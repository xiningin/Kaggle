{"cell_type":{"4b975967":"code","98f59bee":"code","9718eb36":"code","bd545a93":"code","e7328e56":"code","e8700f67":"code","9b06f37b":"code","31a104c3":"code","ba091a9d":"code","f6cc748e":"code","42343c85":"code","59b3777e":"code","00be42b2":"code","c029f606":"code","f77d0dab":"code","116c4605":"code","b60af874":"code","4e0c2acd":"code","e7ab0632":"code","b1e60120":"code","11ad7381":"code","c7fd2ed1":"code","9824f160":"code","1d7a3ceb":"code","3de73619":"code","479c5060":"code","7598a296":"code","e26b7839":"code","f0dd72e0":"code","1ef6b9f7":"code","c577d96c":"code","dd04b5a4":"code","f7048cf1":"code","85ad71ac":"code","c722a66e":"code","b76ad23f":"code","b1a99f39":"code","a03a0509":"code","d44f8511":"code","7de431e1":"code","90ae8dc0":"code","40c55255":"code","2a0d642c":"code","4a8d5cac":"code","0a85aea8":"code","be50e7a7":"code","9c4d9e33":"code","592b565e":"code","6e2c0739":"code","eec698e9":"code","3e2fa6a5":"code","88b16f91":"code","c7ca1b88":"code","d6c05362":"code","fa0d4af2":"code","11e66e6e":"code","7a520f05":"code","32e2078e":"code","feb2b005":"code","e88e27e1":"code","405caa5e":"code","18099ea7":"code","83b63645":"code","c936eb58":"code","723e3ee6":"code","0bbda7a8":"code","f5b9a8f2":"code","1c3167f5":"code","9e3e23f2":"code","60c0e191":"code","8b074db2":"code","b22a7087":"code","08d2c86c":"code","d93c8388":"code","dd3777ba":"code","c47e9239":"code","e7eb9fa6":"code","ecb7dad4":"code","43540684":"code","487a0005":"code","40b63f58":"code","2c71d19a":"markdown","7a3000fd":"markdown","befdf0aa":"markdown","700a61d4":"markdown","2851e5b2":"markdown","466ebbca":"markdown","1e73ad47":"markdown","b6fc3dd8":"markdown","45fa510c":"markdown","17db081e":"markdown","c985924c":"markdown","e224aa5f":"markdown","94034e10":"markdown","c0a92994":"markdown","60f16fa7":"markdown","3200bfe3":"markdown","1da2a888":"markdown","b0206563":"markdown","f1416807":"markdown","b60d081a":"markdown","f5ff662c":"markdown","499e93c8":"markdown","d08906fb":"markdown","d8669bf3":"markdown","1b45348e":"markdown","1a11b5be":"markdown","40c1aae5":"markdown","c87d0c7b":"markdown","57febbd8":"markdown","fccf9ebb":"markdown","80ca8bfe":"markdown","f1a90425":"markdown","6c6745fb":"markdown","2772cee2":"markdown","06db06f6":"markdown","723fff2f":"markdown","b651f56b":"markdown","0c2dd7d2":"markdown","4beeb5f5":"markdown","04fed9e5":"markdown","30fa6fca":"markdown","608eeea8":"markdown","93ab3079":"markdown","648d03fa":"markdown","3e03fa14":"markdown"},"source":{"4b975967":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn","98f59bee":"training_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","9718eb36":"training_data.head(10)","bd545a93":"training_data.describe(include = \"all\").T","e7328e56":"training_data.info()","e8700f67":"testing_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","9b06f37b":"testing_data.head(10)","31a104c3":"testing_data.describe(include = \"all\").T","ba091a9d":"testing_data.info()","f6cc748e":"print(\"Training data shape: \",training_data.shape)\nprint(\"Testing data shape: \",testing_data.shape)","42343c85":"# train_id = training_data[\"Id\"]\ntest_id = testing_data[\"Id\"]","59b3777e":"test_id","00be42b2":"# now droping \"ID\" column since it's unneccessary for the prediction process\ntraining_data.drop(\"Id\", axis = 1, inplace = True)\ntesting_data.drop(\"Id\", axis = 1, inplace = True)","c029f606":"#check again the data size after dropping the \"Id\" variable\nprint(\"Training data shape: \",training_data.shape)\nprint(\"Testing data shape: \",testing_data.shape)","f77d0dab":"fig, ax = plt.subplots()\nax.scatter(x = training_data[\"GrLivArea\"], y = training_data[\"SalePrice\"])\nplt.xlabel(\"GrLiveArea\", fontsize = 15)\nplt.ylabel(\"SalePrice\", fontsize = 15)\nplt.show()","116c4605":"fig, ax = plt.subplots()\nax.scatter(x = training_data[\"GrLivArea\"], y = training_data[\"SalePrice\"])\nplt.xlabel(\"GrLiveArea\", fontsize = 15)\nplt.ylabel(\"SalePrice\", fontsize = 15)\nplt.show()","b60af874":"sns.set(rc = {'figure.figsize':(15,8)})\n\nsns.distplot(training_data[\"SalePrice\"], fit = norm, color = \"red\")\n\n# Now Fitted the paramters used by the function\n(mu, sigma) = norm.fit(training_data[\"SalePrice\"])\nprint('\\n mu = {:.2f} and sigma = {:.2f}\\n'. format(mu,sigma))\n\nplt.legend(['Normal dist. ($\\mu = $ {:.2f} and $\\sigma = $ {:.2f})'.format(mu,sigma)], loc = 'best')\nplt.xlabel(\"Frequency\", fontsize = 15)\nplt.ylabel(\"SalePrice Distribution\", fontsize = 15)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nresult = stats.probplot(training_data[\"SalePrice\"], plot = plt)\nax.get_lines()[0].set_marker('h')\nax.get_lines()[0].set_markerfacecolor('c')\nax.get_lines()[0].set_markersize(12.0)\nax.get_lines()[1].set_linewidth(12.0)\nplt.show()\n","4e0c2acd":"training_data[\"SalePrice\"] = np.log1p(training_data[\"SalePrice\"])","e7ab0632":"# Now checking the new distribution\nsns.distplot(training_data[\"SalePrice\"], fit = norm, color = \"red\");\n\n# Now Fitted the paramters used by the function\n(mu, sigma) = norm.fit(training_data[\"SalePrice\"])\nprint('\\n mu = {:.2f} and sigma = {:.2f}\\n'. format(mu,sigma))\n\nplt.legend(['Normal dist. ($\\mu = $ {:.2f} and $\\sigma = $ {:.2f})'.format(mu,sigma)], loc = 'best')\nplt.xlabel(\"Frequency\", fontsize = 15)\nplt.ylabel(\"SalePrice Distribution\", fontsize = 15)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nresult = stats.probplot(training_data[\"SalePrice\"], plot = plt)\nax.get_lines()[0].set_marker('h')\nax.get_lines()[0].set_markerfacecolor('c')\nax.get_lines()[0].set_markersize(12.0)\nax.get_lines()[1].set_linewidth(12.0)\nplt.show()","b1e60120":"n_train = training_data.shape[0]\nn_test = testing_data.shape[0]\ny_train = training_data.SalePrice.iloc[1:]\nall_data = pd.concat((training_data,testing_data)).reset_index(drop = True)\nall_data.drop(['SalePrice'],axis = 1, inplace =  True)\nprint('All Data size: {}'.format(all_data.shape))","11ad7381":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({\"Missing Ratio\" : all_data_na})\nmissing_data.head(30)","c7fd2ed1":"f, ax = plt.subplots(figsize = (10,8))\nplt.xticks(rotation = '90')\nsns.barplot(y = all_data_na.index, x = all_data_na)\nplt.xlabel(\"Features\", fontsize = 15)\nplt.ylabel(\"Percent of missing values\", fontsize = 15)\nplt.title(\"Percent missing data by feature\",fontsize = 15)\nplt.show()","9824f160":"#correlation map to see how features are correlated with sale price\ncor = training_data.corr()\nplt.subplots(figsize = (60,30))\nsns.heatmap(cor, vmax = 0.9, square = True, annot = True)\nplt.show()","1d7a3ceb":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","3de73619":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","479c5060":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","7598a296":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","e26b7839":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","f0dd72e0":"# Now groupby neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","1ef6b9f7":"col = (\"GarageType\" , \"GarageFinish\" , \"GarageQual\" ,\"GarageCond\")\nfor c in col:\n    all_data[c] = all_data[c].fillna(\"None\")","c577d96c":"col2 = (\"GarageYrBlt\" , \"GarageArea\" , \"GarageCars\")\nfor c2 in col2:\n    all_data[c2] = all_data[c2].fillna(0)","dd04b5a4":"col3 = (\"BsmtFinSF1\" , \"BsmtFinSF2\" , \"BsmtUnfSF\", \"TotalBsmtSF\" ,\n\"BsmtFullBath\" , \"BsmtHalfBath\")\nfor c3 in col3:\n    all_data[c3] = all_data[c3].fillna(0) ","f7048cf1":"col4 = (\"BsmtQual\" , \"BsmtCond\", \"BsmtExposure\" , \"BsmtFinType1\" , \"BsmtFinType2\")\nfor c4 in col4:\n    all_data[c4] = all_data[c4].fillna(\"None\")","85ad71ac":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","c722a66e":"all_data[\"MSZoning\"] = all_data[\"MSZoning\"].fillna(all_data[\"MSZoning\"].mode()[0])","b76ad23f":"all_data = all_data.drop(['Utilities'], axis = 1)","b1a99f39":"all_data[\"Functional\"] = all_data['Functional'].fillna('Typ')","a03a0509":"all_data[\"Electrical\"] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","d44f8511":"all_data[\"KitchenQual\"] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","7de431e1":"all_data[\"Exterior1st\"] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data[\"Exterior2nd\"] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","90ae8dc0":"all_data[\"SaleType\"] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","40c55255":"all_data[\"MSSubClass\"] = all_data['MSSubClass'].fillna(\"None\")","2a0d642c":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending = False)\nmissing_data = pd.DataFrame({\"Missing Ratio\" : all_data_na})\nmissing_data.head(30)","4a8d5cac":"#MSSubClass = The Building class\nall_data[\"MSSubClass\"] = all_data[\"MSSubClass\"].apply(str)","0a85aea8":"#changing Overallcond into a categorical variable\nall_data[\"OverallCond\"] = all_data[\"OverallCond\"].astype(str)","be50e7a7":"#Year and Month sold are transformed into categorical features\nall_data[\"YrSold\"] = all_data[\"YrSold\"].astype(str)\nall_data[\"MoSold\"] = all_data[\"MoSold\"].astype(str)","9c4d9e33":"all_data.columns","592b565e":"from sklearn.preprocessing import LabelEncoder","6e2c0739":"# columns = ('FireplaceQu','BsmtQual','BsmtCond','GarageQual','ExterQual','ExterCond','HeatingQC',\n#           'PoolQC','KitchenQual','BsmtFinType1','BsmtFinType2','Functional','Fence','BsmtExposure',\n#           'GarageFinish','LandSlope','LotShape','PavedDrive','Street','Alley','CentralAir','MSSubClass',\n#           'OverallCond','YrSold','MoSold')\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')","eec698e9":"#process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(all_data[c].values))\n    all_data[c] = lbl.transform(list(all_data[c].values))","3e2fa6a5":"#Shape\nprint(\"Shape all_data: {}\" .format(all_data.shape))","88b16f91":"# all_data[\"TotalBsmtSF\"] = all_data[\"TotalBsmtSF\"].replace(\"None\", 856)","c7ca1b88":"# Adding total sqfootage feature\n# all_data[\"TotalSF\"] = all_data[\"TotalBsmtSF\"].abs() + all_data[\"1stFlrSF\"] + all_data[\"2ndFlrSF\"]\nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","d6c05362":"# numeric_feats = all_data.dtypes[all_data.dtypes != 'object'].index\n\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index","fa0d4af2":"#checking the skew of all the numeric features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","11e66e6e":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    all_data[feat] = boxcox1p(all_data[feat], lam)","7a520f05":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","32e2078e":"train = all_data[1:n_train]\ntest = all_data[n_train:]","feb2b005":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error","e88e27e1":"  # create regressor object\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\n  \n# fit the regressor with x and y data\nregressor.fit(train, y_train)  ","405caa5e":"Y_pred = regressor.predict(test)\nY_pred","18099ea7":"  \n# create a regressor object\nregressor = DecisionTreeRegressor(random_state = 0) \n  \n# fit the regressor with X and Y data\nregressor.fit(train, y_train)","83b63645":"y_pred = regressor.predict(test)\n  \n# print the predicted price\nprint(\"Predicted price: \", y_pred) ","c936eb58":"ft = pd.DataFrame({\"Actual\" : y_train,\"predict\" : y_pred})\nft","723e3ee6":"from xgboost import XGBRegressor","0bbda7a8":"xgb_clf = XGBRegressor(n_estimators=1000, learning_rate=0.05)\n\nxgb_clf.fit(train, y_train)","f5b9a8f2":"from sklearn.model_selection import cross_val_score\nxgb_clf_cv = cross_val_score(xgb_clf,train, y_train, cv=10)\nprint(xgb_clf_cv.mean())","1c3167f5":"xgb_clf = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nxgb_clf.fit(train, y_train)","9e3e23f2":"xgb_predictions_test = xgb_clf.predict(test) # shape(1459, 221)\n# xgb_predictions_test","60c0e191":"ft1 = pd.DataFrame({\"Actual\" : y_train,\"predict\" : xgb_predictions_test})","8b074db2":"ft1","b22a7087":"from sklearn.metrics import mean_squared_error","08d2c86c":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","d93c8388":"import lightgbm as lgb\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nmodel_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","dd3777ba":"ft2 = pd.DataFrame({\"Actual\" : y_train,\"predict\" : lgb_pred})","c47e9239":"ft2","e7eb9fa6":"submission = pd.DataFrame({\"Id\" : test_id, \"SalePrice\" : lgb_pred})","ecb7dad4":"submission.to_csv(\"sub.csv\",index = False)","43540684":"# **feature importance**","487a0005":"print(xgb_clf.feature_importances_)\nfrom matplotlib import pyplot\nf, ax = plt.subplots(figsize=(16, 8))\npyplot.bar(range(len(xgb_clf.feature_importances_)), xgb_clf.feature_importances_)\npyplot.show()","40b63f58":"from xgboost import plot_importance\nfig_size = plt.rcParams[\"figure.figsize\"] \nfig_size[0]=16.0\nfig_size[1]=30.0\nplot_importance(xgb_clf)\npyplot.show()","2c71d19a":"**Adding one more important feature**","7a3000fd":"# **Train Test  data shape**","befdf0aa":"Electrical : It has one NA value. Since this feature has mostly 'SBrkr',\nwe can set that for the missing value","700a61d4":"MSSubClass : Na most likely means No building class. We can replace missing value with None","2851e5b2":"We impute them by proceeding sequentially through features with missing values.\nPoolQC: data description says NA means \"NO Pool\". That make sense, given the huge ratio of \nmissing value (+99%) and majority of houses have no Pool at in all general","466ebbca":"SaleType : Fill in again with most frequent which is \"WD\"","1e73ad47":"Since area related feature are very important to determine house prices, we can add one more feature\nwhich is the total area of basement, first and second floor areas of each house.","b6fc3dd8":"**More features engineering Transforming some numerical variables that are really categorical**","45fa510c":"KitchenQual : Only one NA value, and same as Electrical, we set 'TA'(which is the most frrequent) \nfor the missing value in KitchenQual","17db081e":"# **Dummy Variables**","c985924c":"# **Log-transformation of the target variable**","e224aa5f":"Alley: data description says NA means \"No Alley acess\"","94034e10":"# **Saving the Id column**","c0a92994":"# **Importing the libraries**","60f16fa7":"# **Featre Enginnering**","3200bfe3":"# **Skewed Features**","1da2a888":"Fence: data description says NA means \"No Fence\"","b0206563":"GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with None","f1416807":"lotFrontage: Since the area of each street connected to the house property\nmost likely have a similar area to other houses in its neighborhood, we can fill\nin missing values by the median lotFrontage of the neighborhood.","b60d081a":"BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2 : for all these categorical\nbasement-related features, NaN means that there is no basement","f5ff662c":"MasVnrArea and MasVnrType : NA most likely means no massonry veneer for these houses. \nWe can fill 0 for the area and None for the type","499e93c8":"Utilities : for this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA.\nSince the house with 'NoSewa' is in the training set, this feature won't help in predictive modeling. We can then safely remove it.","d08906fb":"## **Estimating house prices**","d8669bf3":"MiscFeature: data description says NA means \"No Misc feature\"","1b45348e":"MSZoning (the general zoning classification): 'Rl' is by far the most common value. So we can fill in missing values with 'RL'","1a11b5be":"we will use numpy log function for transformation of target variable","40c1aae5":"The target variable is right skewed. As (linear) models love normally distributed data,\nwe need to transform this variable and make it more normally distributed","c87d0c7b":"BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : missing values \nare likely zero for having no basement","57febbd8":"Exterior1st and Exterior2nd :  Again both have only one missing value. We will just subsutitute in the most common string","fccf9ebb":"# ***House Prices: Advanced Regression Techniques***","80ca8bfe":"# **Submission**","f1a90425":"We use the scipy funstion boxcox1p which computes the Box-Cox transformation of 1+x.\nNote that setting \u03bb = 0 is equivalent to log1p used above for the target variable","6c6745fb":"# **Target Variable**","2772cee2":"GarageYrBlt, GarageArea and GarageCars :  Replacing missing data with None","06db06f6":"**Label encoding some categorical variables that may contain information in their ordering set**","723fff2f":"FireplaceQu: data description says NA means \"No Fireplace\"","b651f56b":"# **Imputing the missing values**","0c2dd7d2":" **Checking the remaining missing value ratio**","4beeb5f5":"SalePrice is the variable we need to predict. So let's do some analysis on this \nvariable first.","04fed9e5":"# **Dropping ID column** ","30fa6fca":"# **Box Cox Transformation of (highly) skewed features**","608eeea8":"It means no missing values","93ab3079":"Functional : data description sayes NA means typical","648d03fa":"# **Data Preprocessing**","3e03fa14":"# **Data Correlation** "}}