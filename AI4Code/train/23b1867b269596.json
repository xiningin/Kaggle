{"cell_type":{"f836c672":"code","f376a2f4":"code","5efe6d0d":"code","506471f8":"code","a2ea7039":"code","50688401":"code","b50c667b":"code","64ca7a0f":"code","2ea2271c":"code","43f797b8":"code","6704fb3f":"code","756e78fb":"code","37568a8b":"code","9c57f504":"code","dc0e5c03":"code","b1d83e71":"code","4c135655":"code","3c738d01":"code","7260a3d6":"code","dee7666a":"code","c4cc0099":"code","4822b861":"code","01ec3616":"code","1894a4d2":"code","6c0cfa53":"code","b95cf241":"code","a466eaff":"code","2e616f83":"code","e977449e":"code","ee1d1c08":"code","e64ddc1c":"code","eb449ff4":"code","9c629672":"code","8dfb07a3":"code","e8619454":"code","9775e03b":"code","a9b1feda":"code","5789315a":"code","8abd4e23":"code","4fb30ead":"code","04eb889c":"code","f926d99f":"code","7fd79b80":"code","86c288b4":"code","97928454":"code","af5fd7f7":"markdown","43f3b54a":"markdown","f81456e8":"markdown","18c9525d":"markdown","eb414d95":"markdown","f58f908d":"markdown","e54995eb":"markdown","6931a7ca":"markdown","365b435e":"markdown","38622f14":"markdown","95a351e6":"markdown","666991b5":"markdown","ce3a6e10":"markdown","c357e8d5":"markdown","2a5f445c":"markdown","64980ec5":"markdown","ee8ad23a":"markdown","b369af05":"markdown","6cf01549":"markdown","0557db45":"markdown","25a1fb77":"markdown","7456ae2e":"markdown","3be27079":"markdown","4045bf1f":"markdown","23c76fa3":"markdown","5be6b2d3":"markdown","fce88c48":"markdown","9e56b1df":"markdown","10d287cf":"markdown","131807fa":"markdown","85f4330e":"markdown","c89f9e71":"markdown","bf787f07":"markdown","d9c0b6e2":"markdown","3a3e50eb":"markdown"},"source":{"f836c672":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f376a2f4":"UberData = pd.read_csv(\"..\/input\/uber-request-data\/Uber Request Data.csv\")","5efe6d0d":"UberData.head()","506471f8":"UberData.tail()","a2ea7039":"UberData.shape","50688401":"UberData.info()","b50c667b":"UberData.Status.value_counts()","64ca7a0f":"UberData.dtypes.value_counts()","2ea2271c":"UberData.select_dtypes(include=['object']).columns","43f797b8":"UberData.duplicated().sum()","6704fb3f":"UberData.isna().sum()","756e78fb":"NA = UberData.isna().sum()\/len(UberData)\nNA[NA > 0].sort_values()","37568a8b":"UberData[UberData['Driver id'].isna()]['Status'].unique()","9c57f504":"UberData[UberData['Drop timestamp'].isna()]['Status'].unique()","dc0e5c03":"UberData.drop(columns=['Driver id', 'Drop timestamp'],inplace = True)","b1d83e71":"UberData.columns = [i.replace(' ', '_').lower() for i in UberData.columns]","4c135655":"UberData['request_timestamp'] = pd.to_datetime(UberData['request_timestamp'])","3c738d01":"UberData['request_weekday'] = UberData[['request_timestamp']].apply(lambda x: dt.datetime.strftime(x['request_timestamp'], '%A'), axis=1)","7260a3d6":"UberData['request_weekday'].unique()","dee7666a":"UberData['request_month'] = UberData[['request_timestamp']].apply(lambda x: dt.datetime.strftime(x['request_timestamp'], '%B'), axis=1)","c4cc0099":"UberData['request_month'].unique()","4822b861":"UberData['request_year'] = UberData[['request_timestamp']].apply(lambda x: dt.datetime.strftime(x['request_timestamp'], '%Y'), axis=1)","01ec3616":"UberData['request_year'].unique()","1894a4d2":"UberData.drop(columns=['request_year'],inplace = True)","6c0cfa53":"UberData['Request_Hour'] = UberData['request_timestamp'].dt.round('H').dt.hour","b95cf241":"UberData.rename(columns={\"Request_Hour\": \"request_hour\"}, inplace = True)","a466eaff":"UberData['request_hour'].unique()","2e616f83":"def get_hr(hr):\n    if(hr >= 0 and hr <= 6):\n        return 'Early Morning'\n    elif(hr >= 7 and hr < 12):\n        return 'Morning'\n    elif(hr >= 12 and hr < 16):\n        return 'Afternoon'\n    elif(hr >= 16 and hr < 19):\n        return 'Evening'\n    elif(hr >= 19 and hr < 22):\n        return 'Night'\n    elif(hr >= 22):\n        return 'Late Night'","e977449e":"UberData['time_of_day'] = UberData['request_hour'].apply(lambda x : get_hr(x))","ee1d1c08":"UberData.head()","e64ddc1c":"def make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)\n    return my_autopct\n\nUberData['pickup_point'].value_counts().plot.pie(autopct=make_autopct(UberData['pickup_point'].value_counts()))\nplt.show()","eb449ff4":"UberData[UberData.pickup_point == \"City\"]['status'].value_counts().plot.pie(autopct=make_autopct(UberData[UberData.pickup_point == \"City\"]['status'].value_counts()))\nplt.show()","9c629672":"UberData[UberData.pickup_point == \"Airport\"]['status'].value_counts().plot.pie(autopct=make_autopct(UberData[UberData.pickup_point == \"Airport\"]['status'].value_counts()))\nplt.show()","8dfb07a3":"plt.hist(UberData[UberData.pickup_point == \"Airport\"]['request_hour'], bins=len(UberData['request_hour'].unique()))\nplt.title(\"Airport\")\nplt.xlabel(\"Request hour\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","e8619454":"plt.hist(UberData[(UberData.pickup_point == \"Airport\") & (UberData.status == \"No Cars Available\")]['request_hour'], bins=len(UberData['request_hour'].unique()))\nplt.title(\"Cars unavailabe at the Airport\")\nplt.xlabel(\"Request hour\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","9775e03b":"plt.hist(UberData[UberData.pickup_point == \"City\"]['request_hour'], bins=len(UberData['request_hour'].unique()))\nplt.title(\"City\")\nplt.xlabel(\"Request hour\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","a9b1feda":"plt.hist(UberData[(UberData.pickup_point == \"City\") & (UberData.status == \"No Cars Available\")]['request_hour'], bins=len(UberData['request_hour'].unique()))\nplt.title(\"Cars unavailable in City\")\nplt.xlabel(\"Request hour\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","5789315a":"plt.hist(UberData[(UberData.pickup_point == \"City\")]['request_weekday'], bins=len(UberData['request_weekday'].unique()))\nplt.title(\"City\")\nplt.xlabel(\"Request Weekday\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","8abd4e23":"plt.hist(UberData[(UberData.pickup_point == \"City\") & (UberData.status == \"No Cars Available\")]['request_weekday'], bins=len(UberData['request_weekday'].unique()))\nplt.title(\"No Cars Available in City\")\nplt.xlabel(\"Request Weekday\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","4fb30ead":"plt.hist(UberData[(UberData.pickup_point == \"Airport\")]['request_weekday'], bins=len(UberData['request_weekday'].unique()))\nplt.title(\"Airport\")\nplt.xlabel(\"Request Weekday\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","04eb889c":"plt.hist(UberData[(UberData.pickup_point == \"Airport\") & (UberData.status == \"No Cars Available\")]['request_weekday'], bins=len(UberData['request_weekday'].unique()))\nplt.title(\"No Cars Available in Airport\")\nplt.xlabel(\"Request Weekday\")\nplt.ylabel(\"No. of Requests\")\nplt.show()","f926d99f":"tdgrp = UberData[(UberData.pickup_point == \"City\")].groupby('time_of_day')['request_id'].count().reset_index(name='# of request').sort_values(by=[\"# of request\"], ascending = False)\nsns.barplot(x=\"time_of_day\", y=\"# of request\", data=tdgrp)\nplt.show()\n\ntdgrp = UberData[(UberData.pickup_point == \"City\") & (UberData.status == \"No Cars Available\")].groupby('time_of_day')['request_id'].count().reset_index(name='# of request').sort_values(by=[\"# of request\"], ascending = False)\nsns.barplot(x=\"time_of_day\", y=\"# of request\", data=tdgrp)\nplt.show()","7fd79b80":"tdgrp = UberData[(UberData.pickup_point == \"Airport\")].groupby('time_of_day')['request_id'].count().reset_index(name='# of request').sort_values(by=[\"# of request\"], ascending = False)\nsns.barplot(x=\"time_of_day\", y=\"# of request\", data=tdgrp)\nplt.show()\ntdgrp = UberData[(UberData.pickup_point == \"Airport\") & (UberData.status == \"No Cars Available\")].groupby('time_of_day')['request_id'].count().reset_index(name='# of request').sort_values(by=[\"# of request\"], ascending = False)\nsns.barplot(x=\"time_of_day\", y=\"# of request\", data=tdgrp)\nplt.show()","86c288b4":"fig, axes = plt.subplots(3, 1, figsize=(15, 11))\nUberData[(UberData.status == \"Cancelled\") & (UberData.pickup_point == \"City\")].groupby(['time_of_day','status'])['request_id'].count().unstack().plot.bar(ax = axes[0],legend=True, rot=0)\nUberData[(UberData.status == \"Cancelled\") & (UberData.pickup_point == \"City\")].groupby(['request_weekday','status'])['request_id'].count().unstack().plot.bar(ax = axes[1],legend=True, rot=0)\nUberData[(UberData.status == \"Cancelled\") & (UberData.pickup_point == \"City\")].groupby(['request_hour','status'])['request_id'].count().unstack().plot.bar(ax = axes[2],legend=True, rot=0)\nfig.tight_layout() \n","97928454":"UberData[UberData.pickup_point == \"Airport\"].groupby(['request_weekday','time_of_day','status'])['request_id'].count().unstack().plot.bar(legend=True, figsize=(30,10))\nplt.title(\"Airport\")\nplt.show()\n\nUberData[UberData.pickup_point == \"City\"].groupby(['request_weekday','time_of_day','status'])['request_id'].count().unstack().plot.bar(legend=True, figsize=(30,10))\nplt.title(\"City\")\nplt.show()","af5fd7f7":"# 7. A Quick Look on to EDA Package","43f3b54a":"Notice that our data set doesnt have data for Tuesday and the weekends.\nWe can infer logically that ourdata set may be a subset of the actual day as it is not possible to have 0 rides on any day\nTHough this might no affect our analysis it is best to communicate this to the stakeholders for clarity","f81456e8":"From the above charts we see that Wednesday is the busiest day for inbound and outbound travels and that is when the demand is high","18c9525d":"**Summarizing the Stats by Status**","eb414d95":"Since our dataset concentrates on rides from and to the Airport we see that the requests made from City to Airport is slightly higher","f58f908d":"# 0.Introduction","e54995eb":"**Renaming the columns to remove blank space and make the casing uniform**","6931a7ca":"When compared to Airport, City has lesser supplu demand gap","365b435e":"# 6. Summary","38622f14":"**Requests made on various days and time**","95a351e6":"# 2. Checking for Duplicates and NULL values","666991b5":"Most ofter cars are not available when requested from the Airport\nMost rides that gets canceled are from City where as the rate is much lower for the requests made from Airport","ce3a6e10":"Our dataset is the requests made in the year 2016. Since it is just one year lets drop this feature","c357e8d5":"Purpose of our analysis to identify the possible reason for rides not being completed due to unavailability of cars.\nLooking at the columns available we know that DriverID and Drop timestamp is not going to be useful for this analysis.","2a5f445c":"From the above we notice that Driver ID is not available for rides that were not initiated\nDrop timestamp has missing values if the ride was not initiated or if the ride was cancelled for some reason.\nWe do not have to worry about the NAs in these two fields as they are intended to be that way.","64980ec5":"# 3. Feature selection","ee8ad23a":"**Quick Summary on Cancelled Rides**","b369af05":"Most requests are made in the late evening till mid-night. And cars are unavailable during this peak time.","6cf01549":"In contrary to Airports rides most people prefer heading to the airport early in the morning till 10 am and this is the time where cars are unavailable","0557db45":"# 5. Observation","25a1fb77":"Looking at s subset of the data and the definition of the features we notice:\n1. Status contains categorical values\n2. There are 6,745 rows with missing data in DriverID and Drop timestamp\n3. Both Request timestamp and Drop timestamp are of type object which needs to be casted\n4. DriverID is fload which needs to be integer\n5. This is a small dataset so we do not require further analysis on performance","7456ae2e":"**Lets add some new features which will perform detailed analysis**","3be27079":"**Our dataframe with new features**","4045bf1f":"There are no duplicated rows in our dataset","23c76fa3":"Only during Morning - Noon the supply demand gap is less","5be6b2d3":"**# of rides being requested in each PickUp Point**","fce88c48":"**Check these 2 columns further to find any patteren and determine the best way to fill these NA**","9e56b1df":"# 1. Loading and visual analysis of the dataset","10d287cf":"# 4. Feature Engineering","131807fa":"Notice that our data set has data only for July, November and December.\nIt is best to communicate this to the stakeholders for clarity","85f4330e":"It is to be noted on some days-slot most of the rides are cancelled. This needs to be further investigated by looking at the reason and who initiated the cancellation","c89f9e71":"**Problems obsorver:**\n1. Requests made from Airport to City and vice versa are almost the same with a slightly more request at the City\n2. About half the rides are not completed due to cancellation or unavailability\n3. Most unavailability are at the Airport comparing to the city and most cancellation happen at the city\n4. Peak time & unavailability is at Airport in the evening vs in city it is in the morning\n5. Peak time & unavailability is on Wednesdays\n\n**Suggested solutions**\n1. Special insentives can be given to drivers on Wednesdays and who pickup rides to Airpot at night & who pickup passengers from City to Airport in the Morning.\n2. A dedicated fleet service that handels only Airport rides can be set up to meet the demand.\n3. Van service that can accomodate more than 1 passenger can be introdiced to meet the supply-demand gap will lesser vehicles.\n4. Drivers making a Airport pickup at night can be encouraged to wait for requests in the early-mid mornings at City for Airport pickup. Having less Airport-City requests in the morning and vice versa can be a reason for this gap. Business can come up with bonus, extra commission etc to encourage drivers to bridge this gap","bf787f07":"We are going to explore the Uber Request Data to identify & suggest solutions for Incomplete requests.\nRequests that are not completed doesnt generate revenue to the company.\nWe are provided with the data of requests made between the Airport and the City.","d9c0b6e2":"**Fixing the datatype**","3a3e50eb":"We see that Driver id and Drop timestamp are missing data"}}