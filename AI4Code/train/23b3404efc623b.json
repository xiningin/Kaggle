{"cell_type":{"bf72e2c2":"code","1b1fc4f2":"code","130a1a70":"code","faaa5c06":"code","8f5fc180":"code","612c3668":"code","c6b45746":"code","75e66544":"code","80eb8ebe":"code","b33fe227":"code","3e21d209":"code","20aca1da":"code","a294fd27":"code","3477ad78":"code","ccb46107":"code","f75376fc":"code","381e67f1":"code","4cbe762b":"code","ebde3cdb":"code","513247a4":"code","d9d7f0eb":"markdown","e8b73ac8":"markdown","083d6fb2":"markdown","ccefb373":"markdown","e3e69526":"markdown","96125989":"markdown","f9516bf7":"markdown","17d4b276":"markdown","436b1a48":"markdown","cd7d60b5":"markdown","8ee13314":"markdown","6e156a34":"markdown","36744f2c":"markdown","a7629b48":"markdown","bf07bfe3":"markdown","b1c9197a":"markdown","e9f1a2df":"markdown","07fa1294":"markdown","ef69169d":"markdown","5db361df":"markdown","c6b0670c":"markdown","e5a32021":"markdown"},"source":{"bf72e2c2":"my_list = [1,2,3,4,5,6,7,8,9,10]\n\n0 in my_list","1b1fc4f2":"my_dict = {\"name\": \"Joe\",\n           \"age\": 10, \n           \"city\": \"Paris\"}\n\nprint(my_dict)","130a1a70":"my_dict[\"name\"]","faaa5c06":"my_dict[\"new_key\"] = \"new_value\"\n\nprint(my_dict)","8f5fc180":"del my_dict[\"new_key\"]\n\nprint(my_dict)","612c3668":"\nlen(my_dict)","c6b45746":"\"name\" in my_dict","75e66544":"my_dict.keys()","80eb8ebe":"my_dict.values()","b33fe227":"my_dict.items()","3e21d209":"my_table_dict = {\"name\": [\"Joe\", \"Bob\", \"Harry\"],\n                 \"age\": [10,15,20] , \n                 \"city\": [\"Paris\", \"New York\", \"Tokyo\"]}","20aca1da":"my_set = {1,2,3,4,5,6,7}\n\ntype(my_set)","a294fd27":"my_set.add(8)\n\nmy_set","3477ad78":"my_set.remove(7)\n\nmy_set","ccb46107":"6 in my_set","f75376fc":"set1 = {1,3,5,6}\nset2 = {1,2,3,4}\n\nset1.union(set2)          # Get the union of two sets","381e67f1":"set1.intersection(set2)   # Get the intersection of two sets","4cbe762b":"set1.difference(set2)     # Get the difference between two sets","ebde3cdb":"set1.issubset(set2)       # Check whether set1 is a subset of set2","513247a4":"my_list = [1,2,2,2,3,3,4,5,5,5,6]\n\nset(my_list)","d9d7f0eb":"Sets are unordered, mutable collections of immutable objects that cannot contain duplicates. Sets are useful for storing and performing operations on data where each value is unique.\nCreate a set with a comma separated sequence of values within curly braces:","e8b73ac8":"Sets do not support indexing, but they do support basic sequence functions like len(), min(), max() and sum(). You can also check membership and non-membership as usual with in:","083d6fb2":"Delete existing key: value pairs with del:","ccefb373":"Check whether a certain key exists with \"in\":","e3e69526":"Notice that in the printed dictionary, the items don't appear in the same order as when we defined it, since dictionaries are unordered. Index into a dictionary using keys rather than numeric indexes:","96125989":"## Dictionaries","f9516bf7":"Check the number of items in a dict with len():","17d4b276":"## Wrap Up","436b1a48":"Sequence data types like lists, tuples and strings are ordered. Ordering can be useful in some cases, such as if your data is sorted or has some other natural sense of ordering, but it comes at a price. When you search through sequences like lists, your computer has to go through each element one at a time to find an object you're looking for.\n\nConsider the following code:","cd7d60b5":"Add new items to an existing dictionary with the following syntax:","8ee13314":"Add and remove items from a set with add() and remove() respectively:","6e156a34":"# Python for Data 7: Dictionaries and Sets\n[back to index](https:\/\/www.kaggle.com\/hamelg\/python-for-data-analysis-index)","36744f2c":"## Sets","a7629b48":"A [dictionary](https:\/\/docs.python.org\/3.7\/tutorial\/datastructures.html#dictionaries) or dict is an object that maps a set of named indexes called keys to a set of corresponding values. Dictionaries are mutable, so you can add and remove keys and their associated values. A dictionary's keys must be immutable objects, such as ints, strings or tuples, but the values can be anything.\n\nCreate a dictionary with a comma-separated list of key: value pairs within curly braces:","bf07bfe3":"Dictionaries are general-purpose data structures capable of encoding both tabular and non-tabular data. As basic built in Python data structures, however, they lack many of the conveniences we'd like when working with tabular data, like the ability to look at summary statistics for each column and transform the data quickly and easily. In the next two lessons, we'll look at data structures available in Python packages designed for data analysis: numpy arrays and pandas DataFrames.","b1c9197a":"You can convert a list into a set using the set() function. Converting a list to a set drops any duplicate elements in the list. This can be a useful way to strip unwanted duplicate items or count the number of unique elements in a list. I can also be useful to convert a list to a set if you plan to lookup items repeatedly, since membership lookups are faster with sets than lists.","e9f1a2df":"You can access all the keys, all the values or all the key: value pairs of a dictionary with the keys(), value() and items() functions respectively:","07fa1294":"When running the code above, Python has to search through the entire list, one item at a time before it returns that 0 is not in the list. This sequential searching isn't much of a concern with small lists like this one, but if you're working with data that contains thousands or millions of values, it can add up quickly.\n\nDictionaries and sets are unordered Python data structures that solve this issue using a technique called [hashing](https:\/\/en.wikipedia.org\/wiki\/Hash_function). We won't go into the details of their implementation, but dictionaries and sets let you check whether they contain objects without having to search through each element one at a time, at the cost of having no order and using a bit more system memory.","ef69169d":"## Next Lesson: [Python for Data 8: Numpy Arrays](https:\/\/www.kaggle.com\/hamelg\/python-for-data-8-numpy-arrays)\n[back to index](https:\/\/www.kaggle.com\/hamelg\/python-for-data-analysis-index)","5db361df":"Real world data often comes in the form tables of rows and columns, where each column specifies a different data feature like name or age and each row represents an individual record. We can encode this sort of tabular data in a dictionary by assigning each column label a key and then storing the column values as a list.\n\nConsider the following table:\n\nname  &nbsp; &nbsp;&nbsp;age      &nbsp;&nbsp;&nbsp;city  <br>\nJoe  &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;10     &nbsp;&nbsp;&nbsp;&nbsp; Paris <br>\nBob   &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;15     &nbsp; &nbsp;&nbsp;&nbsp;New York <br>\nHarry  &nbsp;&nbsp; &nbsp;20      &nbsp;&nbsp;&nbsp; Tokyo\n\nWe can store this data in a dictionary like so:","c6b0670c":"One of the main purposes of sets is to perform set operations that compare or combine different sets. Python sets support many common mathematical set operations like union, intersection, difference and checking whether one set is a subset of another:","e5a32021":"Certain data formats like XML and Json have a non-tabular, nested structure. Python dictionaries can contain other dictionaries, so they can mirror this sort of nested structure, providing a convenient interface for working with these sorts of data formats in Python. (We'll cover loading data into Python in a future lesson.)."}}