{"cell_type":{"6108b84d":"code","fad095fb":"code","d4b4b09d":"code","82a10e07":"code","0acd46c5":"code","55837ba8":"code","1d087f8e":"code","32f6fd74":"code","b36d9288":"code","4f910b62":"code","ebf6bfb5":"code","3af64886":"code","f69d9993":"code","3a3a2634":"code","29f10c7d":"code","ac6bd029":"code","e906d45c":"code","cb78c7d0":"code","b81550be":"code","3dfa89f8":"code","08dda9a3":"code","b79b37f2":"code","36689fd7":"markdown","5fc2f61f":"markdown","9be6ec83":"markdown"},"source":{"6108b84d":"# import the libraries\nimport numpy as np\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import Dropout\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Activation\nfrom keras.optimizers import RMSprop\nfrom keras.layers.normalization import BatchNormalization","fad095fb":"# for re-producible keras results\nimport numpy as np\nimport tensorflow as tf\nimport random as rn\nimport os\nos.environ['PYTHONHASHSEED'] = '0'\nnp.random.seed(42)\nrn.seed(42)\ntf.set_random_seed(42)\nfrom keras import backend as K\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)","d4b4b09d":"train_df = pd.read_csv('..\/input\/gameofdl\/train.csv')\ntest_df = pd.read_csv('..\/input\/gameofdl\/test.csv')","82a10e07":"train_df.head(2)\ntrain_df['category'] = train_df['category'].astype('str')","0acd46c5":"from keras.preprocessing.image import ImageDataGenerator","55837ba8":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.20,\n                                   zoom_range=0.20,\n                                   #validation_split=0.20,   \n                                   horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","1d087f8e":"img_sz = 350","32f6fd74":"train_generator = train_datagen.flow_from_dataframe(dataframe=train_df,\n                                                    directory='..\/input\/gameofdl\/train\/',\n                                                    x_col='image',\n                                                    y_col='category',\n                                                    has_ext=True,\n                                                    seed=42,\n                                                    target_size=(img_sz, img_sz),\n                                                    batch_size=16,\n                                                    #subset='training',    \n                                                    shuffle=True,\n                                                    class_mode='categorical')","b36d9288":"test_generator = test_datagen.flow_from_dataframe(dataframe=test_df,\n                                                  directory='..\/input\/gameofdl\/test\/test_images\/',\n                                                  x_col='image',\n                                                  y_col=None,\n                                                  has_ext=True,\n                                                  target_size=(img_sz, img_sz),\n                                                  class_mode=None,\n                                                  batch_size=1,\n                                                  shuffle=False, \n                                                  seed=42)","4f910b62":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\n#STEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\ntrain_generator.n, STEP_SIZE_TRAIN, \n#valid_generator.n, STEP_SIZE_VALID","ebf6bfb5":"from keras.applications import InceptionResNetV2, Xception \nconv_base = Xception(include_top=False, input_shape=(img_sz,img_sz,3))","3af64886":"import keras\nfrom keras.models import Sequential\nfrom keras import regularizers, initializers\nfrom keras import optimizers\nfrom keras.preprocessing import image\nfrom keras.models import Model\nfrom keras.layers import Dense, Dropout, Flatten, GlobalAveragePooling2D\nfrom keras import backend as K\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras_tqdm import TQDMCallback, TQDMNotebookCallback\n\nmodel = Sequential()\nmodel.add(conv_base)\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu', \n                kernel_initializer=initializers.he_uniform(seed=None),\n                kernel_regularizer=regularizers.l2(0.01)))  \nmodel.add(Dense(5, activation='softmax'))","f69d9993":"model.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.RMSprop(lr=0.0001,rho=0.9, epsilon=None, decay=0.0),\n              metrics=['acc'])","3a3a2634":"history = model.fit_generator(train_generator,\n                              steps_per_epoch=train_generator.samples\/train_generator.batch_size,\n                              epochs=7,\n                              shuffle=True,\n                              #callbacks=[earlystopper,checkpointer,reduce_lr],\n                              #validation_data=valid_generator,\n                              #validation_steps=valid_generator.samples\/valid_generator.batch_size,\n                              verbose=1)","29f10c7d":"test_generator.reset()\npred = model.predict_generator(test_generator, steps=2680, verbose=1)","ac6bd029":"predicted_class_indices = np.argmax(pred, axis=1)\n\nlabels = train_generator.class_indices\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","e906d45c":"test_df['category'] = pd.DataFrame(data=predictions)","cb78c7d0":"test_df.head()","b81550be":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\ndef create_download_link(df, title = \"Download CSV file\", filename = \"submission.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ntest_df['category'] = pd.DataFrame(data=predictions)\n\n# create a link to download the dataframe\ncreate_download_link(test_df)","3dfa89f8":"import cv2\nimport os\n\nheight = []\nweight = []\nfor filename in os.listdir('..\/input\/gameofdl\/test\/test_images\/'):\n    img = cv2.imread(os.path.join('..\/input\/gameofdl\/test\/test_images\/',filename))\n    height.append(img.shape[0])\n    weight.append(img.shape[1])","08dda9a3":"max(height), max(weight)","b79b37f2":"min(height), min(weight)","36689fd7":"### Predict on test set","5fc2f61f":"valid_generator = train_datagen.flow_from_dataframe(dataframe=train_df,\n                                                    directory='..\/input\/gameofdl\/train',\n                                                    x_col='image',\n                                                    y_col='category',\n                                                    has_ext=True,\n                                                    seed=42,\n                                                    target_size=(299, 299),\n                                                    batch_size=16,\n                                                    subset='validation',    \n                                                    shuffle=True,\n                                                    class_mode='categorical')","9be6ec83":"import keras\nimport keras_applications\nconv_base = keras_applications.resnext.ResNeXt101(include_top = False, weights = 'imagenet', input_shape=(224,224,3),\n                                                 backend = keras.backend, layers = keras.layers, models = keras.models, \n                                                 utils = keras.utils)"}}