{"cell_type":{"16a254f2":"code","e490f096":"code","af25bf70":"code","aa3c2b1c":"code","afc9d29f":"code","5804ba4b":"code","bf484a9e":"code","b1810a30":"code","a66a58b7":"code","bed09d45":"code","d3309cd6":"code","961dee33":"code","bdcbf68c":"code","a402a6c5":"code","51ab6ca2":"code","93d79aea":"code","44654796":"code","64f6955b":"code","0e85c2d1":"code","3420032f":"code","17cd1b72":"code","689e0b38":"code","6eaa8235":"code","6e415ab4":"code","c704adcf":"code","299968fd":"code","f1c68579":"code","41575a2f":"code","a22131e7":"code","e5608d4b":"code","55584365":"code","6846faa2":"code","a65e778e":"code","fe2fb615":"code","3fb7ed4f":"code","012d14cf":"code","7ea78865":"code","af2fe6b2":"code","ab353e29":"code","07503e54":"code","7606922d":"code","56e883b6":"code","8b0835b5":"code","5ce4570c":"code","362b1def":"code","bfc713bd":"code","53ac57b2":"code","7bdc1677":"code","a1ce5a59":"code","780ca223":"code","bb4eaf03":"code","c8d546f5":"code","a31f6dc5":"code","e55e4857":"code","bff4f38e":"code","843e976e":"code","a443db7a":"code","168bbd60":"code","619df56b":"code","367c1388":"code","fbaec1d1":"code","e41ae55b":"code","ed2df8ee":"code","379651da":"code","c8240b8d":"code","9d5bb3ed":"code","666ea0e4":"code","5142aff6":"code","2d5c96ef":"code","7303476e":"code","68167166":"code","b3ead12c":"code","3d7498c7":"code","64037ed4":"code","8a45c735":"code","ff12f042":"code","dd6d5009":"code","768c1400":"code","9bed838c":"code","505b19f3":"code","cc6d5efe":"code","b21518a6":"code","949afef0":"code","3af16e31":"code","72b9c912":"code","4d755b19":"code","d9c04677":"code","3951c60a":"code","20103c5f":"code","138b246f":"code","c324007d":"code","32ca5b8d":"code","86fc67f3":"code","63a01ad8":"code","85e8915a":"code","f34a813a":"code","8fc96d64":"code","cd6aa17c":"code","b4558138":"code","88229d82":"code","c032cae7":"code","bd03e7b9":"code","9c1d2fed":"code","5783d04e":"code","576372c2":"code","e42570c5":"code","32a16b50":"code","a4409add":"code","10a5feaa":"code","4d93abef":"code","81b4da3b":"code","cc745f03":"code","21a9851b":"code","2058c248":"code","3d065ad9":"code","17031b0d":"code","ad5535a8":"code","9f170643":"code","dfa6770e":"code","18538924":"code","0289a1dd":"code","b59f5e30":"code","b593becb":"code","46a23ed8":"code","8f80f549":"code","d1e1500e":"code","ed3e34fc":"code","f3c1f82a":"code","b063d9e0":"code","cb03fa93":"code","23067ba9":"code","5c7f385b":"code","8e360c3e":"code","2f657baa":"code","9a9acafd":"code","05ca3067":"code","0233fd8f":"code","d7cf5f71":"code","002d78af":"code","709c7c14":"code","56059bdc":"code","04a5244a":"code","72fd31d6":"code","8911ac0c":"code","1a508b78":"code","19e9c3a0":"code","10496f25":"code","f56a008b":"code","30145dd5":"code","79a4db9e":"code","cc25f989":"code","b97795bb":"code","71779137":"code","a5c33139":"code","1b372f24":"code","aa5dadce":"code","c47801ab":"markdown","a2b04f11":"markdown","f1d52d72":"markdown","5e8eb034":"markdown","7adef7f2":"markdown","4b79819a":"markdown","98759742":"markdown","11123cb1":"markdown","1f4d27f6":"markdown","70d85206":"markdown","42121f91":"markdown","56989e3f":"markdown","d64ae170":"markdown","fdbf75e0":"markdown","1abdbd0e":"markdown","a9685d0c":"markdown","1175cefd":"markdown","9aa087e0":"markdown","9f596265":"markdown","e2589dea":"markdown","7cad351e":"markdown","fd8b0784":"markdown","ac7ffae8":"markdown","36800c6f":"markdown","5204192e":"markdown","736dcab7":"markdown","74cedaf4":"markdown","80adc660":"markdown","f7349f32":"markdown","39faf791":"markdown","f8eec52f":"markdown","a6e9fbd0":"markdown","0e9ec098":"markdown","0734286d":"markdown","f7970596":"markdown","15b59683":"markdown","d5ff7261":"markdown","41bff27f":"markdown","b75f11a0":"markdown","72aedf3b":"markdown","71b341e2":"markdown","9548971d":"markdown","f28290a6":"markdown","e46f6a97":"markdown","d344cdc9":"markdown","6d4982a4":"markdown","e81ec84c":"markdown","06906fab":"markdown","1a325d7c":"markdown","4b5e2e6b":"markdown","96e939cb":"markdown","06f5a846":"markdown","72222bbc":"markdown","4b127f26":"markdown","5c7aabf6":"markdown","38203e4f":"markdown","24fa9dfb":"markdown","f4be56d3":"markdown","98c3c7ad":"markdown","ad127048":"markdown","8aa3ed97":"markdown","a7014163":"markdown","5e390570":"markdown","a2713bfc":"markdown","b7d21920":"markdown","af2ecbc4":"markdown","21f3e50f":"markdown","a294885a":"markdown","4ffc0aa7":"markdown","fd0940c5":"markdown","db27c4ce":"markdown","3d4bc87e":"markdown","ab1c8fe7":"markdown","53884e03":"markdown","2241f795":"markdown","86e8beb0":"markdown","3fbabc6e":"markdown","ab3d5ffa":"markdown","f6c8cfde":"markdown","fdbf4b66":"markdown","4fbd91d3":"markdown","9ee21924":"markdown","3e09067f":"markdown","03751b9e":"markdown","a7fddc1a":"markdown","f0e72085":"markdown","1395719e":"markdown","feef37dc":"markdown","ca87bb89":"markdown","222a7761":"markdown","4f847e50":"markdown","23ae675f":"markdown","45db6a58":"markdown","adbeb5be":"markdown","9cfe53f5":"markdown","6a5e26dd":"markdown"},"source":{"16a254f2":"#with single word\nprint('hello world')","e490f096":"#with 2 words\nprint(\"hello\", 'world')","af25bf70":"#concatination inside\nprint(\"hello world\" + \"!\")","aa3c2b1c":"#with sep and end parameters\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\";\")","afc9d29f":"# with next statement print\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\";\")\nprint(\"data science\")","5804ba4b":"# end with new line(by default its already there '\\n')\nprint(\"welcome\", \"to\", \"python\", sep=\"_\", end=\"\\n\") \nprint(\"data science\")","bf484a9e":"# this statement will print the statement inside in it\nprint(\"welcome to data science\")","b1810a30":"t = True","a66a58b7":"type(t)","bed09d45":"False","d3309cd6":"i = 4 \ntype(i)","961dee33":"f = 3.45 \ntype(f)","bdcbf68c":"cmp = 3+4j\ntype(cmp)","a402a6c5":"cmp.real","51ab6ca2":"cmp.imag","93d79aea":"1 + 1","44654796":"1 * 3","64f6955b":"1 \/ 2","0e85c2d1":"print(7+8)\nprint(4*6)\n2 ** 4","3420032f":"4 % 2","17cd1b72":"5 % 2","689e0b38":"(2 + 3) * (5 + 5)","6eaa8235":"3+3\/3","6e415ab4":"(3+3)\/3","c704adcf":"((((13+5)*2)-4)\/2)-13\n# How did that happen? Let\u2019s work it out.\n# 13+5 gives us 18\n# 18*2 gives us 36\n# 36-4 gives us 32\n# 32\/2 gives us 16.0 #Note that division gives us floats!\n# 16-13 gives us 3.0","299968fd":"import datetime\n\nx = datetime.datetime.now()\nprint(x)","f1c68579":"print(x.year)","41575a2f":"# strftime is a method for formatting date objects into readable strings.\nprint(x.strftime(\"%A\"))\n# it takes one parameter called format\n# http:\/\/strftime.org\/","a22131e7":"# Create a date object\nx = datetime.datetime(2020, 5, 17)\nprint(x)","e5608d4b":"st = 'data science and machine learning with python'","55584365":"type(st)","6846faa2":"# positive indexing\nprint(st[0])\nprint(st[1])\nprint(st[2])","a65e778e":"# negative indexing\nprint(st[-1])\nprint(st[-2])\nprint(st[-3])","fe2fb615":"print(st[0:4])\nprint(st[:4])\nprint(st[4:])\nprint(st[5:9])\nprint(st[::2]) # step 2\nprint(st[::3]) # step 2\nprint(st[2:12:4]) # \nprint(st[::-1])  # reverse the string\nprint(st[::-2])  # reverse the string with step 1","3fb7ed4f":"s= \"hello world\" # using double quotes","012d14cf":"s= 'hello world' # using single quotes","7ea78865":"# Multi-line Strings\nto_you = \"\"\"Stranger, if you passing meet me and desire to speak to me, why\n  should you not speak to me?\nAnd why should I not speak to you?\"\"\"\n\nprint(to_you)","af2fe6b2":"s.index('d')","ab353e29":"s.capitalize()","07503e54":"s.count('o')","7606922d":"value = \"cat ppicture is cat picture\"\n\n# Find first index of this string.\ni = value.find(\"p\")\nprint(i)\n\n# Find first index (of this string) after previous index.\nb = value.find(\"p\", i + 1)\nprint(b)\n\n\nb = value.find(\"p\", i + 2)\nprint(b)","56e883b6":"s.title()","8b0835b5":"s.upper()","5ce4570c":"s.islower()","362b1def":"s= \"HELLO WORLD\"","bfc713bd":"s.islower()","53ac57b2":"s.capitalize()","7bdc1677":"s.lower()","a1ce5a59":"s = \"HeLlO WoRlD\"","780ca223":"s.swapcase()","bb4eaf03":"s = \" Hello world how are you \"","c8d546f5":"s = \"hello world how are you\"","a31f6dc5":"s.capitalize()","e55e4857":"s.title()","bff4f38e":"s.upper()","843e976e":"\"H\" in s","a443db7a":"\"h\" in s","168bbd60":"len(s)","619df56b":"s = ' hello world how are you'","367c1388":"s.strip()","fbaec1d1":"min(s.strip())","e41ae55b":"max(s)","ed2df8ee":"s","379651da":"s.isspace()","c8240b8d":"s.strip()","9d5bb3ed":"greeting = 'Hello, world!'\nnew_greeting = 'J' + greeting[1:]\nprint(new_greeting)\nprint(greeting)","666ea0e4":"name = \"sumendar\"\ngreeting = \"My name is {}\".format(name)\ngreeting","5142aff6":"print(\"happy\" + \" \" + \"birthday\")\nprint(\"my name is \" + \"john\")","2d5c96ef":"print('This string contains a single quote (') character.')\n# gives a syntaxError","7303476e":"print('This string contains a single quote (\\') character.')\nprint(\"This string contains a double quote (\\\") character.\")","68167166":"print('a,\n      b,\n      c)    # if we press Enter will gives SyntaxError after each letter","b3ead12c":"print('a\\\nb\\\nc')\n\nprint('a\\\nb\\\nc')","3d7498c7":"print('foo\\\\bar') # o include a literal backslash in a string, escape it with a backslash","64037ed4":"print(r'foo\\bar') # o include a literal backslash in a string, escape it with a letter r ","8a45c735":"print('foo\\tbar')\nprint(\"a\\tb\")\nprint(\"a\\141\\x61\")\nprint(\"a\\nb\")\nprint('\\u2192 \\N{rightwards arrow}')","ff12f042":"print('foo\\nbar')","dd6d5009":"print(r'foo\\nbar')","768c1400":"print('foo\\\\bar')","9bed838c":"print(r'foo\\\\bar')","505b19f3":"print('''This string has a single (') and a double (\") quote.''')","cc6d5efe":"print(\"\"\"This is a\nstring that spans\nacross several lines\"\"\")\n# this also allows for multiline strings:","b21518a6":"[1,2,3]","949afef0":"['hi',1,[1,2]]","3af16e31":"my_list = ['a','b','c']","72b9c912":"my_list.append('d')","4d755b19":"my_list","d9c04677":"my_list[0]","3951c60a":"my_list[1]","20103c5f":"my_list[1:]","138b246f":"my_list[:1]","c324007d":"my_list[0] = 'NEW'","32ca5b8d":"my_list","86fc67f3":"mylist = ['Rhino', 'Grasshopper', 'Flamingo', 'Bongo']\nB = len(mylist) # This will return the length of the list which is 3. The index is 0, 1, 2, 3.\nprint (mylist[1]) # This will return the value at index 1, which is 'Grasshopper'\nprint (mylist[0:2]) # This will return the first 2 elements in the list.","63a01ad8":"nest = [1,2,3,[4,5,['target']]]","85e8915a":"nest[3]","f34a813a":"nest[3][2]","8fc96d64":"nest[3][2][0]","cd6aa17c":"# assign data to a specific element of the list using an index into the list.\nmylist = [0, 1, 2, 3]\nmylist[0] = 'Rhino'\nmylist[1] = 'Grasshopper'\nmylist[2] = 'Flamingo'\nmylist[3] = 'Bongo'\nprint (mylist[1])","b4558138":"a = [1, 2, 3]\nb = [4, 5, 6]\nc = a + b  # \nprint(c)","88229d82":" \n[0] * 4","c032cae7":"[1, 2, 3] * 3  # The first example repeats [0] four times. The second example repeats the list [1, 2, 3] three times.","bd03e7b9":"a = 'banana'\nb = 'banana'\na is b","9c1d2fed":"a = [1, 2, 3]\nb = [1, 2, 3]\na is b","5783d04e":"l = [1,2,3,4,5]\nl[::-1] # reverse the order of list","576372c2":"x = [True, True, False]\nif any(x):\n    print(\"At least one True\")\nif all(x):\n    print(\"Not one False\")\nif any(x) and not all(x):    \n    print(\"At least one True and one False\")","e42570c5":"l1 = [1,2,3,4]\nl2 = l1\nprint(id(l1))\nprint(id(l2))","32a16b50":"l1.append(999)\nprint(l2)","a4409add":"l1 = [1,2,3,4]\nl2 = l1.copy()\nprint(id(l1))\nprint(id(l2))","10a5feaa":"l1.append(999)\nprint(l2)","4d93abef":"t = (1,2,3)","81b4da3b":"# real world example\n# works better in spyder tool\n\"\"\" Where's My Mouse? \"\"\"\nimport tkinter\n\ndef mouse_click(event):\n\n    # retrieve XY coords as a tuple\n    coords = root.winfo_pointerxy()\n    print('coords: {}'.format(coords))\n    print('X: {}'.format(coords[0]))\n    print('Y: {}'.format(coords[1]))\n    print(type(coords))\n\nroot = tkinter.Tk()\nroot.bind('<Button>', mouse_click)\nroot.mainloop()","cc745f03":"room_num = {'john': 425, 'tom': 212}\nroom_num['john'] = 645  # set the value associated with the 'john' key to 645","21a9851b":"print(room_num)","2058c248":"room_num['james'] = 925","3d065ad9":"print(room_num)","17031b0d":"room_num.keys()","ad5535a8":"room_num.values()\n","9f170643":"room_num.items()","dfa6770e":"room_num.pop('james') # takes key as parameter and return corresponding value ","18538924":"room_num","0289a1dd":"room_num.popitem() # doesn't take any parameter and gives some arbitrary element as (key, value) tuple ","b59f5e30":"room_num","b593becb":"room_num['isaac'] = 345 # Add a new key 'isaac' with the associated value\nprint (room_num.keys()) # print out a list of keys in the dictionary\nprint ('isaac' in room_num) # test to asee if 'issac' is in the dictionary.  This returns true.","46a23ed8":"d = {'key1':'value1','key2':'value2'}","8f80f549":"d","d1e1500e":"d['key1']","ed3e34fc":"author = {\n   \"first_name\": \"Jonathan\",\n   \"last_name\": \"Hsu\",\n   \"username\": \"jhsu98\"\n}","f3c1f82a":"print(author['middle_initial']) # KeyError: 'middle_initial'","b063d9e0":"author = {\n   \"first_name\": \"Jonathan\",\n   \"last_name\": \"Hsu\",\n   \"username\": \"jhsu98\"\n}\nprint(author.get('username')) # jhsu98\nprint(author.get('middle_initial', None)) # None","cb03fa93":"author = {\n   \"first_name\": \"Jonathan\",\n   \"last_name\": \"Hsu\",\n   \"username\": \"jhsu98\"\n}\nprint(author.setdefault('username')) # jhsu98\nprint(author.setdefault('middle_initial', None)) # None","23067ba9":"print(author) # ","5c7f385b":"{1,2,3}","8e360c3e":"# creating a set\na = {1, 3, 5, 7, 11, 13}\nb = set([1, 3, 5, 7, 11, 13])","2f657baa":"# Union\nA = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\nprint ( A | B)","9a9acafd":"# Intersection\nA = {1, 2, 3, 4}\nB = {3, 4, 5, 6}\nprint ( A & B )","05ca3067":"# Difference\nA = {1, 2, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\nprint(A - B)","0233fd8f":"# Symmetric Difference\nA = {1, 2, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\nprint(A ^ B)","d7cf5f71":"a.add(8)\nprint(a)\nb.update([5,2,14,7])\nprint(b)","002d78af":"# initialize my_set\nmy_set = {1,3}\nprint(my_set)\n\n# add list and set\n# Output: {1, 2, 3, 4, 5, 6, 8}\nmy_set.update([4,5], {1,6,8})\nprint(my_set)\n\n# if you uncomment below line\n# you will get an error\n# TypeError: 'set' object does not support indexing\n\n#my_set[0]","709c7c14":"num = {13,12,21,43,16,25}","56059bdc":"num.discard(3)","04a5244a":"num","72fd31d6":"num.remove(5)","8911ac0c":"num","1a508b78":"num = {13,12,21,43,16,25}","19e9c3a0":"num.pop()","10496f25":"num = {13,12,21,43,16,25}","f56a008b":"num.clear()","30145dd5":"num","79a4db9e":"S = frozenset([1,2,3])\nprint(S)","cc25f989":"\"\"\" A Queue of Groceries to Put Away \"\"\"\n# queue is a not built-in datatype\n# create a new queue object\nimport queue \nq = queue.Queue() # create a new object by calling new Queue() custroctor\nprint(q.empty())\n\n# put bags into the queue\nq.put('bag1')\nprint(q.empty())\nq.put('bag2')\nq.put('bag3')\n\n# get bags from the queue in FIFO order\nprint(q.get())\nprint(q.get())\nprint(q.get())\n# q.get() # causes an error: blocking method, the program will wait until method completes before continuiing execution\n# (restart the shell) \n\n# create a new queue to hold two items\nq = queue.Queue(2)\nprint(q.empty())\n\n# put two bags into the two-item queue\nq.put('bag1')\nprint(q.full())\nq.put('bag2')\nprint(q.full())\n\n# try to put an extra bag into the queue\nq.put_nowait('bag3') # causes an error\n","b97795bb":"\"\"\" A Stack of Bills to Pay \"\"\"\n# python doesn't has built-n stack module, we can use list instead\n# create a list to use as the stack\nstack = list()\n\n# add some bills to the stack\nstack.append('bill1')\nstack.append('bill2')\n\n# remove the top bill to pay it\nprint(stack.pop())\n\n# add two more bills to the stack\nstack.append('bill3')\nstack.append('bill4')\n\n# remove bills from top to bottom\nprint(stack.pop())\nprint(stack.pop())\nprint(stack.pop())\nstack.pop() # causes Indexerror exception\n","71779137":"int1 = 4\nfloat1 = int1 + 2.1 # 4 converted to float\n# str1 = \"My int:\" + int1 # Error: no implicit type conversion from int to string\nint2 = 4 + True # 5: bool is implicitly converted to int","a5c33139":"str1 = \"My int:\" + str(int1)\nv1 = int(2.7) # 2\nv2 = int(-3.9) # -3\nv3 = int(\"2\") # 2\nv4 = int(\"11\", 16) # 17, base 16\nv5 = long(2) # this supports only in python 2 vesion\nv6 = float(2) # 2.0\nv7 = float(\"2.7\") # 2.7\nv8 = float(\"2.7E-2\") # 0.027\nv9 = float(False) # 0.0\nvA = float(True) # 1.0\nvB = str(4.5) # \"4.5\"\nvC = str([1, 3, 5]) # \"[1, 3, 5]\"\nvD = bool(0) # False; bool fn since Python 2.2.1\nvE = bool(3) # True\nvF = bool([]) # False - empty list\nvG = bool([False]) # True - non-empty list\nvH = bool({}) # False - empty dict; same for empty tuple\nvI = bool(\"\") # False - empty string\nvJ = bool(\" \") # True - non-empty string\nvK = bool(None) # False\nvL = bool(len) # True\nvM = set([1, 2])\nvN = list(vM)\nvO = list({1: \"a\", 2: \"b\"}) # dict -> list of keys\nvP = tuple(vN)\nvQ = list(\"abc\") # ['a', 'b', 'c']\nprint v1, v2, v3, type(v1), type(v2), type(v3)","1b372f24":"#\n# Read and write files using the built-in Python file methods\n#\n#def main():  \n  # Open a file for writing and create it if it doesn't exist\n# f = open(\"..\/input\/textfile.txt\",\"w+\")\n  \n#   # Open the file for appending text to the end\n#   # f = open(\"textfile.txt\",\"a+\")\n\n#   # write some lines of data to the file\n# for i in range(10):\n#     f.write(\"This is line %d\\r\\n\" % (i+1))\n  \n#       # close the file when done\n# f.close()","aa5dadce":"  # Open the file back up and read the contents\nf = open(\"..\/input\/textfile.txt\",\"r\")\nif f.mode == 'r': # check to make sure that the file was opened\n    # use the read() function to read the entire file\n    contents = f.read()\n    print (contents)\n    \nfl = f.readlines() # readlines reads the individual lines into a list\nfor x in fl:\n      print (x)\n    \n# w --> write\n# r --> read\n# r+ --> read and write\n# a --> append\n\n#https:\/\/www.pythonforbeginners.com\/systems-programming\/python-file-handling\u00a0b","c47801ab":"**Built-in Functions with List**\n","a2b04f11":"| Operators (Decreasing order of precedence) | Operators (Decreasing order of precedence)        |\n|--------------------------------------------|---------------------------------------------------|\n| `**`                                       | Exponent                                          |\n| `+, -, *, \/, \/\/, %`                        | Addition, Subtraction, Multiplication, Division, Floor division, Modulus |\n| `< > <= >= == !=`                          | Comparison operators                              |\n| `= %= \/= \/\/= -= += *= **=`                 | Assignment Operators                              |\n| `is is not`                                | Identity operators                                |\n| `in not in`                                | Membership operators                              |\n| `not or and`                               | Logical operators                                 |\n\n<span style=\"color:red; font-family:centurygothic \">Continue...<\/span><a href=\"https:\/\/www.guru99.com\/python-operators-complete-tutorial.html\" target=\"_blank\">https:\/\/www.guru99.com\/python-operators-complete-tutorial.html<\/a>  ","f1d52d72":"https:\/\/developers.google.com\/edu\/python\/lists  \nhttp:\/\/thepythonguru.com\/python-lists\/  \nhttps:\/\/www.tutorialspoint.com\/python\/python_lists.htm","5e8eb034":"**Adding Elements to a Set**  \n* sets are mutable \u2013 but since they are unordered, indexes would not make any sense to it. We will not be able to access or update an element based on the index of an element in a set, as set does not support both indexing and slicing.   \n* we can use the `add()` method to add a single element if we need to add more than one element to a set, we can use the `update()` method","7adef7f2":"* A raw string literal is preceded by r or R.  \n* Escape sequences in the associated string are not translated. The backslash character is left in the string:","4b79819a":"t[0]\n\n`t[0] = 'NEW' # not mutable for tuples`\n```{python}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-212-9650bd97cc9a> in <module>()\n----> 1 t[0] = 'NEW' # not mutable for tuples\n\nTypeError: 'tuple' object does not support item assignment\n```","98759742":"* Each item is a pair of a key and value\n* It holds word-meaning pairs just like real dictionaries \n* Un ordered\n* Dictionaries are not sorted\n* Access to the list of keys or values independently.\n* To declare a dictionary, we use curly braces.\n* Better to use this object for unordered storage of values which are associated with some keys ","11123cb1":"#### integer","1f4d27f6":"print(author['username']) # jhsu98","70d85206":"https:\/\/medium.com\/edureka\/file-handling-in-python-e0a6ff96ede9  \nhttps:\/\/python-reference.readthedocs.io\/en\/latest\/docs\/file\/index.html  ","42121f91":"**String.format()**  ","56989e3f":"**Set Operations on Sets**","d64ae170":"**Escape Sequences in Strings**","fdbf75e0":"* string is a ordered sequence of characters. \n* A string is contained within two quotes or single quotes. \n* A string can be spaces or digits. \n* A string can also be special characters. \n* Positive \/ Negative indexing applicable\n* Strings are immutable(we cannot change inplace but we can create another string from it)","1abdbd0e":"**strings immutable nature **","a9685d0c":"https:\/\/www.tutorialspoint.com\/python\/python_dictionary.htm  \nhttp:\/\/thepythonguru.com\/python-dictionaries\/    \nhttps:\/\/realpython.com\/python-dicts\/    ","1175cefd":"`remove()`\n\nLike the discard() method, remove() deletes an item from the set.\n* deleting an item that doesn\u2019t exist in the set, remove() gives an error","9aa087e0":"* Immutable (we cannot change its content after creation)\n* Better for fixed data\n* useful to share the data with someone but not allow them to manipulate\n* use the data values for arithmatic operations, however the changes is not reflected in the original data\n* contain any type of objects (heterogeneous container for items) \n* similar to arrays\n* faster compare with the lists\n* sequencey type\n* To declare tuples we use parentheses.\n* Unlike Python lists, tuples does not have methods such as `append()`, `remove()`, `extend()`, `insert()` and `pop()` due to its immutable nature. However, there are many other built-in methods to work with tuple \n* Better to use this object for a list of values which order really matters when there is no need to add\/delete those items","9f596265":"`discard()`    \nThis method takes the item to delete as an argument.\n* deleting an item that doesn\u2019t exist in the set, discard() ignores it","e2589dea":"### Date and Time\n\nA date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.","7cad351e":"`clear()`\n* It empties the set in Python.","fd8b0784":"**Python list Methods**","ac7ffae8":"https:\/\/towardsdatascience.com\/useful-string-methods-in-python-5047ea4d3f90  ","36800c6f":"## Data types Tree","5204192e":"The + operator concatenates lists:","736dcab7":"A = [ ] # This is a blank list variable\nB = [1, 23, 45, 67] # this list creates an initial list of 4 numbers.\nC = [2, 4, 'john'] # lists can contain different variable types.","74cedaf4":"#### Tuples","80adc660":"**Python Syntax:**  \nhttps:\/\/www.codecademy.com\/learn\/learn-python-3\/modules\/learn-python3-syntax\/reference  ","f7349f32":"### Composite Data Types (*Mappings*)\n\n","39faf791":"https:\/\/realpython.com\/python-sets\/  \nhttps:\/\/www.programiz.com\/python-programming\/set  \nhttps:\/\/stackabuse.com\/sets-in-python\/  ","f8eec52f":"### Implicit type conversion","a6e9fbd0":"Python has many native datatypes. Here are the important ones:\n\n* Booleans are either True or False.\n* Numbers can be integers (1 and 2), floats (1.1 and 1.2), fractions (1\/2 and 2\/3), or even complex numbers.\n* Strings are sequences of Unicode characters, e.g. an html document.\n* Lists are ordered sequences of values.\n* Dictionaries are unordered bags of key-value pairs.\n* Tuples are ordered, sequences of values and immutable (cannot be modified inplace)\n* Sets are unordered bags of values.","0e9ec098":"## Queues(FIFO) and Stacks(LIFO)","0734286d":"The `index()` method is similar to `find()` method for strings. The only difference is that `find()` method returns -1 if the substring is not found, whereas `index()` throws an exception.","f7970596":"#### complex","15b59683":"### Booleans","d5ff7261":"![Imgur](https:\/\/i.imgur.com\/VXwzhyT.jpg)","41bff27f":"#### Lists","b75f11a0":"**Number Calculations**  \n(Operator Precedence)  \n\n* PEMDAS(parenthesis, exponents, multiplication, division, addition, subtraction)","72aedf3b":"* backslash (\\) character is used in some strings to be treated one or more characters specially. \n* This is referred to as an escape sequence, because `the backslash causes the subsequent character sequence to \u201cescape\u201d` its usual meaning.","71b341e2":"https:\/\/data-flair.training\/blogs\/python-operator-precedence\/","9548971d":"| Function    | Description                                                                                       |\n|-------------|---------------------------------------------------------------------------------------------------|\n| any()       | Return True if any element of the list is true. If the list is empty, return False.               |\n| all()       | Returns `True` if all elements of an iterable are true                  \t                      |\n| len()       |   Return the length (the number of items) in the list.                                            |\n| list()      | Convert an iterable (tuple, string, set, dictionary) to a list.                                   |\n| max()       | Return the largest item in the list.                                                              |\n| min()       | Return the smallest item in the list                                                              |\n| sorted()    |   Return a new sorted list (does not sort the list itself).                                       |\n| reversed()  | Returns a reverse iterator                                              \t|                     \n| sum()       | Return the sum of all elements in the list.                                                       |","f28290a6":"We can also remove all items from a set using `clear()`.","e46f6a97":"### comment with `#` symbol: ","d344cdc9":"### Numbers","6d4982a4":"| Methods       | Functions                                                |\n|---------------|----------------------------------------------------------|\n| append()      | to add element to the end of the list                    |\n| extend()      | to extend all elements of a list to the another list     |\n| insert()      | to insert an element at the another index                |\n| remove()      | to remove an element from the list                       |\n| pop()         | to remove elements return element at the given index     |\n| clear()       | to remove all elements from the list                     |\n| index()       | to return the index of the first matched element         |\n| count()       | to count of number of elements passed as an argument     |\n| sort()        | to sort the elements in ascending order by default       |\n| reverse()     | to reverse order element in a list                       |\n| copy()        | to return a copy of elements in a list                   |","e81ec84c":"**String Methods:**","06906fab":"`.setdefault()` differs from `.get()` is that the term and definition are now part of the dictionary","1a325d7c":"**Slicing:**","4b5e2e6b":"\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Basics\" data-toc-modified-id=\"Basics-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Basics<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#print()-function:\" data-toc-modified-id=\"print()-function:-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span><code>print()<\/code> function:<\/a><\/span><\/li><li><span><a href=\"#comment-with-#-symbol:\" data-toc-modified-id=\"comment-with-#-symbol:-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>comment with <code>#<\/code> symbol:<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Operators\" data-toc-modified-id=\"Operators-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Operators<\/a><\/span><\/li><li><span><a href=\"#Primitive-Data-Types\" data-toc-modified-id=\"Primitive-Data-Types-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Primitive Data Types<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Booleans\" data-toc-modified-id=\"Booleans-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;<\/span>Booleans<\/a><\/span><\/li><li><span><a href=\"#Numbers\" data-toc-modified-id=\"Numbers-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;<\/span>Numbers<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#integer\" data-toc-modified-id=\"integer-3.2.1\"><span class=\"toc-item-num\">3.2.1&nbsp;&nbsp;<\/span>integer<\/a><\/span><\/li><li><span><a href=\"#float\" data-toc-modified-id=\"float-3.2.2\"><span class=\"toc-item-num\">3.2.2&nbsp;&nbsp;<\/span>float<\/a><\/span><\/li><li><span><a href=\"#complex\" data-toc-modified-id=\"complex-3.2.3\"><span class=\"toc-item-num\">3.2.3&nbsp;&nbsp;<\/span>complex<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Date-and-Time\" data-toc-modified-id=\"Date-and-Time-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;<\/span>Date and Time<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Data-Structures\" data-toc-modified-id=\"Data-Structures-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Data Structures<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Composite-Data-Types-(Sequences)\" data-toc-modified-id=\"Composite-Data-Types-(Sequences)-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Composite Data Types (<em>Sequences<\/em>)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Strings\" data-toc-modified-id=\"Strings-4.1.1\"><span class=\"toc-item-num\">4.1.1&nbsp;&nbsp;<\/span>Strings<\/a><\/span><\/li><li><span><a href=\"#Lists\" data-toc-modified-id=\"Lists-4.1.2\"><span class=\"toc-item-num\">4.1.2&nbsp;&nbsp;<\/span>Lists<\/a><\/span><\/li><li><span><a href=\"#Tuples\" data-toc-modified-id=\"Tuples-4.1.3\"><span class=\"toc-item-num\">4.1.3&nbsp;&nbsp;<\/span>Tuples<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Composite-Data-Types-(Mappings)\" data-toc-modified-id=\"Composite-Data-Types-(Mappings)-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Composite Data Types (<em>Mappings<\/em>)<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Dictionaries\" data-toc-modified-id=\"Dictionaries-4.2.1\"><span class=\"toc-item-num\">4.2.1&nbsp;&nbsp;<\/span>Dictionaries<\/a><\/span><\/li><li><span><a href=\"#Sets\" data-toc-modified-id=\"Sets-4.2.2\"><span class=\"toc-item-num\">4.2.2&nbsp;&nbsp;<\/span>Sets<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Data-types-Tree\" data-toc-modified-id=\"Data-types-Tree-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Data types Tree<\/a><\/span><\/li><li><span><a href=\"#Queues(FIFO)-and-Stacks(LIFO)\" data-toc-modified-id=\"Queues(FIFO)-and-Stacks(LIFO)-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Queues(FIFO) and Stacks(LIFO)<\/a><\/span><\/li><li><span><a href=\"#Type-conversion\" data-toc-modified-id=\"Type-conversion-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>Type conversion<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Implicit-type-conversion\" data-toc-modified-id=\"Implicit-type-conversion-7.1\"><span class=\"toc-item-num\">7.1&nbsp;&nbsp;<\/span>Implicit type conversion<\/a><\/span><\/li><li><span><a href=\"#Explicit-type-conversion\" data-toc-modified-id=\"Explicit-type-conversion-7.2\"><span class=\"toc-item-num\">7.2&nbsp;&nbsp;<\/span>Explicit type conversion<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#File-handling-:-Working-with-files---Reading-and-Writing\" data-toc-modified-id=\"File-handling-:-Working-with-files---Reading-and-Writing-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;<\/span>File handling : Working with files - Reading and Writing<\/a><\/span><\/li><\/ul><\/div>","96e939cb":"#### Sets","06f5a846":"\n`my_string = \"abc\"`  \n`my_string[0] = \"d\"`  \n```{py}\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-f26f28798517> in <module>()\n      1 my_string = \"abc\"\n----> 2 my_string[0] = \"d\"\n\nTypeError: 'str' object does not support item assignment\n```","72222bbc":"follow along:  https:\/\/dbader.org\/blog\/difference-between-is-and-equals-in-python  \nhttps:\/\/medium.com\/@tyastropheus\/tricky-python-i-memory-management-for-mutable-immutable-objects-21507d1e5b95  ","4b127f26":"#### Strings","5c7aabf6":"**String concatenation**","38203e4f":"## Operators","24fa9dfb":"**Using the `.get()` Method**","f4be56d3":"**Adding element\/s to a set**","98c3c7ad":"Similarly, the * operator repeats a list a given number of times:","ad127048":"**Applying Special Meaning to Characters**","8aa3ed97":"**Triple-Quoted Strings**","a7014163":"> **Example:** \n* List of employees in your department\n* List of stocks you want to analyze","5e390570":"1. ## Basics","a2713bfc":"**Raw Strings**","b7d21920":"https:\/\/data-flair.training\/blogs\/python-tuples-syntax-examples\/   \nhttp:\/\/thepythonguru.com\/python-tuples\/  ","af2ecbc4":"## Type conversion","21f3e50f":"* General purpose\n* Most widely used data structures\n* contain any type of objects\n* similar to arrays\n* can be extended or reduce the size as we needed\n* Sequence type\n* sortable\n* declare them using square brackets separated with commas of each value\/item\n* Better to use this object for list of values which we need some flexibility to add\/remove\/sort\/reverse\/delete...etc operations.","a294885a":"#### float","4ffc0aa7":"* Python set is much like a mathematical set theory in that it has well-defined collection of distinct objects\n* The objects of a set are called its \u201celements\u201d.\n* Sets are unordered collections of unique elements. Duplicates are not allowed.\n* very fast access vs lists\n* A set itself may be modified, but the elements contained in the set must be of an immutable type (eg. it might be a tuple but not a list type).\n* Python provides us with a list of functions and methods like `discard()`, `pop()`, `clear()`, `remove()`, `add()`, and more. Functions like `len()` and `max()` also apply on sets.\n* It is sequenced (automatically while printing), but does not support indexing.\n* To declare a set, write a sequence of items separated with commas, inside curly braces.\n* Better to use this object a collection of sets which needs to membership or mapping really matters","fd0940c5":"**Using the `.setdefault()` Method**","db27c4ce":"**`copy()` method vs direct assignment**","3d4bc87e":"* Union\n* Intersection\n* Difference\n* Symmetric Difference","ab1c8fe7":"**`bytearray()`**: `bytearray()` method returns a bytearray object which is an array of the given bytes, The `bytearray()` method returns a bytearray object which is a mutable (can be modified) sequence of integers in the range 0 <=x < 256.    \n https:\/\/www.programiz.com\/python-programming\/methods\/built-in\/bytearray   \n**`bytes()`**: immutable bytes object initialized with the given size  \nhttps:\/\/www.programiz.com\/python-programming\/methods\/built-in\/bytes ","53884e03":"## Primitive Data Types","2241f795":"### Composite Data Types (*Sequences*)\n","86e8beb0":"Non-primitive types are the sophisticated members of the data structure family. They don't just store a value, but rather a collection of values in various formats.","3fbabc6e":"## File handling : Working with files - Reading and Writing","ab3d5ffa":"### Explicit type conversion","f6c8cfde":"**Remove Elements From a Set**","fdbf4b66":"#### Dictionaries","4fbd91d3":"<span style=\"color:red; font-family:Comic Sans MS\">References<\/span>  \n<a href=\"https:\/\/www.programiz.com\" target=\"_blank\">https:\/\/www.programiz.com<\/a>  \nhttps:\/\/realpython.com\/python-data-types\/#strings  ","9ee21924":"### `print()` function:","3e09067f":"**The Difference Between \u201cis\u201d and \u201c==\u201d in Python**","03751b9e":"**What does [::-1} do?**","a7fddc1a":"**Indexing:**","f0e72085":"**frozensets**  \n(creating immutable sets)  ","1395719e":"`pop()`\n* here, it does not take an argument. Because a set doesn\u2019t support indexing\n* it pops out an arbitrary item. \n* we will not be able to determine which element of the set will be removed using the `pop()` method. In case of list, the last element of the list gets popped when the pop() method is used. ","feef37dc":"nest[3][2][0].upper()","ca87bb89":"## Data Structures \n(Non-primitive data structures)","222a7761":"**problem with square bracket notation**","4f847e50":"* Escape sequences still work in triple-quoted strings, but single quotes, double quotes, and newlines can be included without escaping them. \n* This provides a convenient way to create a string with both single and double quotes in it:","23ae675f":"https:\/\/www.guru99.com\/date-time-and-datetime-classes-in-python.html  \nhttps:\/\/dzone.com\/articles\/python-101-working-with-dates-and-time  ","45db6a58":"> **Example:** \n* List of months, or weekdays..etc\n* List of top 10 sales regions in a quarter","adbeb5be":"> **Examples:** \n* Employee name associated with Employee ID   \n* Order status of online food","9cfe53f5":"<span style=\"color:red; font-family:brandon\">Further  Resources<\/span>  \n<a href=\"https:\/\/realpython.com\/python-variables\/\" target=\"_blank\">https:\/\/realpython.com\/python-variables\/<\/a>  \n<a href=\"https:\/\/realpython.com\/python-data-types\/\" target=\"_blank\">https:\/\/realpython.com\/python-data-types\/<\/a>  \n<a href=\"https:\/\/realpython.com\/python-operators-expressions\/\" target=\"_blank\">https:\/\/realpython.com\/python-operators-expressions\/<\/a>  \n<a href=\"https:\/\/realpython.com\/python-strings\/\" target=\"_blank\">https:\/\/realpython.com\/python-strings\/<\/a>  \n  \n<a href=\"https:\/\/www.datacamp.com\/community\/tutorials\/data-structures-python\" target=\"_blank\">https:\/\/www.datacamp.com\/community\/tutorials\/data-structures-python<\/a>  ","6a5e26dd":"*strings are immutable, which means you can't change an existing string (inplace). The best you can do is create a new string that is a variation on the original:*"}}