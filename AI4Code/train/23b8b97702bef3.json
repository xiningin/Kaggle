{"cell_type":{"e13831a7":"code","b74de3ab":"code","8ee38ebb":"code","d44f9f05":"code","70c1d030":"code","a99743ac":"code","80ea2d1b":"code","950fb59a":"code","50805eba":"code","316ebcb6":"code","206351e1":"code","6508eb89":"code","69c153f1":"code","2a399cbb":"code","193d249f":"code","2a27f566":"code","47e1018c":"code","79539a5e":"code","ce0c8634":"code","a42da698":"code","6d828cda":"code","409d9256":"code","0b4e865e":"code","bc5e69e8":"code","47b6aade":"code","19d3da84":"code","abeb5b92":"code","feb453c4":"code","c743e4d9":"code","8a265897":"code","35f89710":"code","fdba3a24":"code","79ed9de8":"code","1b58bf7e":"code","44d2afb5":"code","865364d1":"code","5b854794":"code","a0c6fe46":"code","75754033":"code","10f359fc":"code","d9595284":"code","5743424a":"code","397d23f7":"code","ed5586e8":"code","27b7db3e":"code","929456db":"code","00a22e1d":"code","fed26304":"code","3c71c8cd":"code","d617c28c":"code","0c8efb84":"code","26c37b68":"code","e05ae0b4":"code","339d50e4":"code","e928b4d1":"code","751c1abe":"code","7fe7ad31":"code","9c71e155":"code","cff4b1c2":"code","00fc0aeb":"code","6680a99c":"code","34e32c63":"code","5eacb48b":"code","fdd15f5b":"code","c106ef13":"code","3da8f4b0":"code","fa6aef9a":"code","90370fa0":"code","c89ead27":"code","34af5285":"code","448defc6":"code","4723da3d":"code","9b29ef36":"code","e24b27d2":"code","0178248c":"code","354a7018":"code","73b12dbe":"markdown","7e0d77c6":"markdown","b63589fb":"markdown","ee70a662":"markdown","b5db614b":"markdown","f59a05e6":"markdown","a01f9b68":"markdown","24c2244a":"markdown","2f882af4":"markdown","2065a2eb":"markdown","778da37d":"markdown","2f33f093":"markdown","394f115e":"markdown","ff0beec7":"markdown","c0b09185":"markdown","81f2837f":"markdown","c2bc9edc":"markdown","9e02b629":"markdown","a064287d":"markdown","1b44863c":"markdown","9e12937f":"markdown","9110357e":"markdown","a3ac2fb9":"markdown","18cd3a71":"markdown","ab390575":"markdown","110b3351":"markdown","c49d09c7":"markdown","4a21543e":"markdown","496e27d6":"markdown","83d96479":"markdown","b33f5b6d":"markdown","4ab12ead":"markdown","75e5dd34":"markdown","ce082608":"markdown","24d34648":"markdown","c9804af3":"markdown","e01509bf":"markdown","83921564":"markdown"},"source":{"e13831a7":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\n#from gensim.models import Word2Vec\n#from gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\nimport os\n\n#from plotly import plotly\n#import plotly.offline as offline\n#import plotly.graph_objs as go\n#offline.init_notebook_mode()\nfrom collections import Counter","b74de3ab":"project_data = pd.read_csv('..\/input\/donors-choose-elysian\/train_data.csv')\nresource_data = pd.read_csv('..\/input\/donors-choose-elysian\/resources.csv')","8ee38ebb":"print(\"Number of data points in train data\", project_data.shape)\nprint('-'*50)\nprint(\"The attributes of data :\", project_data.columns.values)","d44f9f05":"print(\"Number of data points in train data\", resource_data.shape)\nprint(resource_data.columns.values)\nresource_data.head(2)","70c1d030":"# how to replace elements in list python: https:\/\/stackoverflow.com\/a\/2582163\/4084039\ncols = ['Date' if x=='project_submitted_datetime' else x for x in list(project_data.columns)]\n\n\n#sort dataframe based on time pandas python: https:\/\/stackoverflow.com\/a\/49702492\/4084039\nproject_data['Date'] = pd.to_datetime(project_data['project_submitted_datetime'])\nproject_data.drop('project_submitted_datetime', axis=1, inplace=True)\nproject_data.sort_values(by=['Date'], inplace=True)\n\n\n# how to reorder columns pandas python: https:\/\/stackoverflow.com\/a\/13148611\/4084039\nproject_data = project_data[cols]\n\n\nproject_data.head(2)","a99743ac":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())\n    \nproject_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)\n\nfrom collections import Counter\nmy_counter = Counter()\nfor word in project_data['clean_categories'].values:\n    my_counter.update(word.split())\n\ncat_dict = dict(my_counter)\nsorted_cat_dict = dict(sorted(cat_dict.items(), key=lambda kv: kv[1]))\n","80ea2d1b":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())\n\nproject_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)\n\n# count of all the words in corpus python: https:\/\/stackoverflow.com\/a\/22898595\/4084039\nmy_counter = Counter()\nfor word in project_data['clean_subcategories'].values:\n    my_counter.update(word.split())\n    \nsub_cat_dict = dict(my_counter)\nsorted_sub_cat_dict = dict(sorted(sub_cat_dict.items(), key=lambda kv: kv[1]))","950fb59a":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","50805eba":"project_data.head(2)","316ebcb6":"#### 1.4.2.3 Using Pretrained Models: TFIDF weighted W2V","206351e1":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\nimport re\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","6508eb89":"sent = decontracted(project_data['essay'].values[20000])\nprint(sent)\nprint(\"=\"*50)","69c153f1":"# \\r \\n \\t remove from string python: http:\/\/texthandler.com\/info\/remove-line-breaks-python\/\nsent = sent.replace('\\\\r', ' ')\nsent = sent.replace('\\\\\"', ' ')\nsent = sent.replace('\\\\n', ' ')\nprint(sent)","2a399cbb":"#remove spacial character: https:\/\/stackoverflow.com\/a\/5843547\/4084039\nsent = re.sub('[^A-Za-z0-9]+', ' ', sent)\nprint(sent)","193d249f":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\", \"nannan\"]","2a27f566":"from nltk.tokenize import word_tokenize \n\ndef remove_stopwords(senta):\n    # tokenizing the string ,and removing the stop words.\n    example_sent = senta\n    stop_words = set(stopwords) \n    word_tokens = word_tokenize(example_sent) \n\n    filtered_sentence = [w for w in word_tokens if not w in stop_words] \n\n    filtered_sentence = [] \n\n    for w in word_tokens: \n        if w not in stop_words: \n            filtered_sentence.append(w) \n    # concatinating the list to form a string again because the decontracted() accepts strings.\n    s = \" \"\n    for word in filtered_sentence:\n\n        s = s + str(word) + str(\" \")\n    return s","47e1018c":"from nltk.tokenize import word_tokenize \n\nnumber_of_words_in_essays = [] \ndef count_words(string):\n    word_tokens = word_tokenize(string)\n    number_of_words_in_essays.append(len(word_tokens))\n    \n    ","79539a5e":"count_words(sent)\nnumber_of_words_in_essays","ce0c8634":"# Combining all the above stundents \nfrom tqdm import tqdm\npreprocessed_essays = []\n# tqdm is for printing the status bar\nfor sentance in tqdm(project_data['essay'].values):\n    sentance = sentance.lower()\n    sentance = remove_stopwords(sentance)\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_essays.append(sent.lower().strip())","a42da698":"# after preprocesing\npreprocessed_essays[20000]","6d828cda":"preprocessed_essays[20001]","409d9256":"project_data[\"project_title\"]\n# copy pasted the code above and changed the column\npreprocessed_titles = []\nfor sentance in tqdm(project_data['project_title'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_titles.append(sent.lower().strip())","0b4e865e":"len(preprocessed_titles)\n","bc5e69e8":"# filling the nan values with \"Mr.\" because the average value of the prefixes is closer to the category \"Mr.\"\n\nproject_data[\"teacher_prefix\"]= project_data[\"teacher_prefix\"].fillna(\"Mr.\")\n\nproject_data[\"teacher_prefix\"]\n# copy pasted the code above and changed the column\npreprocessed_teacher_prefix = []\nfor sentance in tqdm(project_data['teacher_prefix'].values):\n    sent = decontracted(sentance)\n    sent = sent.replace('\\\\r', ' ')\n    sent = sent.replace('\\\\\"', ' ')\n    sent = sent.replace('\\\\n', ' ')\n    sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n    # https:\/\/gist.github.com\/sebleier\/554280\n    sent = ' '.join(e for e in sent.split() if e not in stopwords)\n    preprocessed_teacher_prefix.append(sent.lower().strip())\n","47b6aade":"len(preprocessed_teacher_prefix)","19d3da84":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","abeb5b92":"price_data = resource_data.groupby('id').agg({'price':'sum'}).reset_index()\nproject_data3 = pd.merge(project_data, price_data, on='id', how='left')\n\nlen(project_data3['price'])\n\n","feb453c4":"final_data = project_data[[\"id\",\n                                  \"school_state\",\n                                  \"Date\",\n                                  \"project_grade_category\",\n                                  \"clean_categories\",\n                                  \"clean_subcategories\",\n                                  \"teacher_number_of_previously_posted_projects\",\n                                  \"project_is_approved\"]]\n\nfinal_data[\"price\"]= project_data3[\"price\"]\nfinal_data[\"preprocessed_teacher_prefix\"]=preprocessed_teacher_prefix\nfinal_data[\"preprocessed_titles\"]=preprocessed_titles\nfinal_data[\"preprocessed_essays\"]=preprocessed_essays\n\nfinal_data.shape\nfinal_data[final_data[\"project_is_approved\"] == 0].shape\n","c743e4d9":"final_data = final_data.sample(n = 45000)","8a265897":"final_data1 = final_data\nfinal_data1.shape","35f89710":"final_data1.sort_values(by=['Date'], inplace=True)\nli =final_data1[\"project_is_approved\"].value_counts()\nli\nfor val in li:\n    print(\"percentage of values for class labels are: \",(val\/len(final_data1[\"project_is_approved\"])))","fdba3a24":"# time based splitting \n# since the data in the final_data is alredy sorted according to the time, we can use this fact\n# for splitting our data into train, cv and test.\n# we will divide the 109248 into the ratio 6:2:2\n# \nX_train = final_data1[:40000]\nX_train = X_train.drop([\"project_is_approved\"], axis =1 )\ny_train = final_data1[\"project_is_approved\"][:40000]\n\n\nX_test = final_data1[40000:]\nX_test = X_test.drop([\"project_is_approved\"], axis =1 )\ny_test = final_data1[\"project_is_approved\"][40000:]\n","79ed9de8":"X_train.shape","1b58bf7e":"y_train.shape","44d2afb5":"X_test.shape","865364d1":"y_test.shape","5b854794":"X_train.columns","a0c6fe46":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding \n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# make sure you featurize train and test data separatly\n\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","75754033":"# one hot encoding for  clean_categories\n\n# we use count vectorizer to convert the values into one hot encoded features \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_categories'].values)\n#print(vectorizer.get_feature_names())\n#print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\nX_train_clean_categories_OHE = vectorizer.transform(X_train[\"clean_categories\"].values)\n#X_train_cv_clean_categories_OHE = vectorizer.transform(X_train_cv[\"clean_categories\"].values)\nX_test_clean_categories_OHE = vectorizer.transform(X_test[\"clean_categories\"].values)\n\nprint(\"After Vectorizations\")\nprint(X_train_clean_categories_OHE.shape)\n#print(X_train_cv_clean_categories_OHE.shape)\nprint(X_test_clean_categories_OHE.shape)\nprint(vectorizer.get_feature_names())\nfeature_names_clean_categories = vectorizer.get_feature_names()\nfeature_names_clean_categories","10f359fc":"# one hot encoding for  clean_subcategories\n\n# we use count vectorizer to convert the values into one hot encoded features \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['clean_subcategories'].values)\n#print(vectorizer.get_feature_names())\n#print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\nX_train_clean_subcategories_OHE = vectorizer.transform(X_train[\"clean_subcategories\"].values)\n#X_train_cv_clean_subcategories_OHE = vectorizer.transform(X_train_cv[\"clean_subcategories\"].values)\nX_test_clean_subcategories_OHE = vectorizer.transform(X_test[\"clean_subcategories\"].values)\n\nprint(\"After Vectorizations\")\nprint(X_train_clean_subcategories_OHE.shape)\n#print(X_train_cv_clean_subcategories_OHE.shape)\nprint(X_test_clean_subcategories_OHE.shape)\nprint(vectorizer.get_feature_names())\nfeature_names_clean_subcategories = vectorizer.get_feature_names()\nfeature_names_clean_subcategories","d9595284":"#school_state \n# one hot encoding for  school_state\n\n# we use count vectorizer to convert the values into one hot encoded features \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['school_state'].values)\n#print(vectorizer.get_feature_names())\n#print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\nX_train_school_state_OHE = vectorizer.transform(X_train[\"school_state\"].values)\n#X_train_cv_school_state_OHE = vectorizer.transform(X_train_cv[\"school_state\"].values)\nX_test_school_state_OHE = vectorizer.transform(X_test[\"school_state\"].values)\n\nprint(\"After Vectorizations\")\nprint(X_train_school_state_OHE.shape)\n#print(X_train_cv_school_state_OHE.shape)\nprint(X_test_school_state_OHE.shape)\nprint(vectorizer.get_feature_names())\nfeature_names_school_state = vectorizer.get_feature_names()\nfeature_names_school_state","5743424a":"#preprocessed_teacher_prefix\n\n# one hot encoding for  preprocessed_teacher_prefix\n\n# we use count vectorizer to convert the values into one hot encoded features \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lowercase=False, binary=True)\nvectorizer.fit(X_train['preprocessed_teacher_prefix'].values)\n#print(vectorizer.get_feature_names())\n#print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\nX_train_preprocessed_teacher_prefix_OHE = vectorizer.transform(X_train[\"preprocessed_teacher_prefix\"].values)\n#X_train_cv_preprocessed_teacher_prefix_OHE = vectorizer.transform(X_train_cv[\"preprocessed_teacher_prefix\"].values)\nX_test_preprocessed_teacher_prefix_OHE = vectorizer.transform(X_test[\"preprocessed_teacher_prefix\"].values)\n\nprint(\"After Vectorizations\")\nprint(X_train_preprocessed_teacher_prefix_OHE.shape)\n#print(X_train_cv_preprocessed_teacher_prefix_OHE.shape)\nprint(X_test_preprocessed_teacher_prefix_OHE.shape)\nprint(vectorizer.get_feature_names())\nfeature_names_preprocessed_teacher_prefix = vectorizer.get_feature_names()\nfeature_names_preprocessed_teacher_prefix","397d23f7":"#project_grade_category \n\n# one hot encoding for  project_grade_category\n\n# we use count vectorizer to convert the values into one hot encoded features \nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(vocabulary= list(X_train[\"project_grade_category\"].unique()),\n                             lowercase=False,\n                             binary=True)\n\nvectorizer.fit(X_train['project_grade_category'].values)\n#print(vectorizer.get_feature_names())\n#print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\nX_train_project_grade_category_OHE = vectorizer.transform(X_train[\"project_grade_category\"].values)\n#X_train_cv_project_grade_category_OHE = vectorizer.transform(X_train_cv[\"project_grade_category\"].values)\nX_test_project_grade_category_OHE = vectorizer.transform(X_test[\"project_grade_category\"].values)\n\nprint(\"After Vectorizations\")\nprint(X_train_project_grade_category_OHE.shape)\n#print(X_train_cv_project_grade_category_OHE.shape)\nprint(X_test_project_grade_category_OHE.shape)\nprint(vectorizer.get_feature_names())\nfeature_names_project_grade_category = vectorizer.get_feature_names()\nfeature_names_project_grade_category","ed5586e8":"from sklearn.preprocessing import Normalizer\nnormalizer = Normalizer()\n# normalizer.fit(X_train['price'].values)\n# this will rise an error Expected 2D array, got 1D array instead: \n# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n# Reshape your data either using \n# array.reshape(-1, 1) if your data has a single feature \n# array.reshape(1, -1)  if it contains a single sample.\nnormalizer.fit(X_train['price'].values.reshape(-1,1))\n\nX_train_price_norm = normalizer.transform(X_train['price'].values.reshape(-1,1))\n#X_cv_price_norm = normalizer.transform(X_cv['price'].values.reshape(-1,1))\nX_test_price_norm = normalizer.transform(X_test['price'].values.reshape(-1,1))\n\nprint(\"After vectorizations\")\nprint(X_train_price_norm.shape, y_train.shape)\n#print(X_cv_price_norm.shape, y_cv.shape)\nprint(X_test_price_norm.shape, y_test.shape)\nprint(\"=\"*100)\nfeature_names_price = [\"price\"]","27b7db3e":"from sklearn.preprocessing import Normalizer\nnormalizer = Normalizer()\n# normalizer.fit(X_train['teacher_number_of_previously_posted_projects'].values)\n# this will rise an error Expected 2D array, got 1D array instead: \n# array=[105.22 215.96  96.01 ... 368.98  80.53 709.67].\n# Reshape your data either using \n# array.reshape(-1, 1) if your data has a single feature \n# array.reshape(1, -1)  if it contains a single sample.\nnormalizer.fit(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n\nX_train_teacher_number_of_previously_posted_projects_norm = normalizer.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n#X_cv_teacher_number_of_previously_posted_projects_norm = normalizer.transform(X_cv['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\nX_test_teacher_number_of_previously_posted_projects_norm = normalizer.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))\n\nprint(\"After vectorizations\")\nprint(X_train_teacher_number_of_previously_posted_projects_norm.shape, y_train.shape)\n#print(X_cv_teacher_number_of_previously_posted_projects_norm.shape, y_cv.shape)\nprint(X_test_teacher_number_of_previously_posted_projects_norm.shape, y_test.shape)\nprint(\"=\"*100)\nfeature_names_teacher_number_of_previously_posted_projects = [\"teacher_number_of_previously_posted_projects\"]","929456db":"#vectorizing text data \n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=10, max_features = 5000)\nvectorizer.fit(X_train['preprocessed_essays'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_essay_bow = vectorizer.transform(X_train['preprocessed_essays'].values)\n#X_train_cv_essay_bow = vectorizer.transform(X_train_cv['preprocessed_essays'].values)\nX_test_essay_bow = vectorizer.transform(X_test['preprocessed_essays'].values)\n\nprint(\"After vectorizations\")\nprint(X_train_essay_bow.shape, y_train.shape)\n#print(X_train_cv_essay_bow.shape, y_train_cv.shape)\nprint(X_test_essay_bow.shape, y_test.shape)\nprint(\"=\"*100)\nfeature_names_essay_bow = vectorizer.get_feature_names()\nfeature_names_essay_bow","00a22e1d":"x2 = X_train_essay_bow[ [ i for i in range(0,5000)], :]\nx3 = x2.toarray()","fed26304":"X_train_essay_bow_5kf = x3","3c71c8cd":"# you can vectorize the title also \n# before you vectorize the title make sure you preprocess it\n\n#vectorizing text data \n\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(min_df=10)\nvectorizer.fit(X_train['preprocessed_titles'].values) # fit has to happen only on train data\n\n# we use the fitted CountVectorizer to convert the text to vector\nX_train_title_bow = vectorizer.transform(X_train['preprocessed_titles'].values)\n#X_train_cv_title_bow = vectorizer.transform(X_train_cv['preprocessed_titles'].values)\nX_test_title_bow = vectorizer.transform(X_test['preprocessed_titles'].values)\n\nprint(\"After vectorizations\")\nprint(X_train_title_bow.shape, y_train.shape)\n#print(X_train_cv_title_bow.shape, y_train_cv.shape)\nprint(X_test_title_bow.shape, y_test.shape)\nprint(\"=\"*100)\nfeature_names_title_bow = vectorizer.get_feature_names()\nfeature_names_title_bow\n","d617c28c":"x2 = X_train_title_bow[ [ i for i in range(0,5000)], :]\nx3 = x2.toarray()","0c8efb84":"X_train_title_bow_5kf = x3 ","26c37b68":"X_train_title_bow_5kf.shape","e05ae0b4":"l1 = [1,2,32,34,24 ]\nl2 = [23,4,5,6,7]\nl3 = l1 + l2\nl3","339d50e4":"# making a list of all the vectorized features for SET_1 \nlist_of_vectorized_features_SET_1 =  (feature_names_clean_categories +\n                                feature_names_clean_subcategories +\n                                feature_names_school_state + \n                                feature_names_preprocessed_teacher_prefix +\n                                feature_names_project_grade_category +\n                                feature_names_essay_bow +\n                                feature_names_title_bow +\n                                feature_names_price+\n                                feature_names_teacher_number_of_previously_posted_projects)\n                                \nlen(list_of_vectorized_features_SET_1)                                ","e928b4d1":"# SET_1 \n# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_SET_1 = hstack((X_train_clean_categories_OHE,\n            X_train_clean_subcategories_OHE,\n            X_train_school_state_OHE,\n            X_train_preprocessed_teacher_prefix_OHE,\n            X_train_project_grade_category_OHE,\n            X_train_essay_bow,\n            X_train_title_bow,\n            X_train_price_norm,\n            X_train_teacher_number_of_previously_posted_projects_norm))\nX_train_SET_1.shape","751c1abe":"# SET_1 but only 5000 features \n# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_train_SET_1_5000 = hstack((X_train_clean_categories_OHE[:5000],\n            X_train_clean_subcategories_OHE[:5000],\n            X_train_school_state_OHE[:5000],\n            X_train_preprocessed_teacher_prefix_OHE[:5000],\n            X_train_project_grade_category_OHE[:5000],\n            X_train_essay_bow_5kf,\n            X_train_title_bow_5kf,\n            X_train_price_norm[:5000],\n            X_train_teacher_number_of_previously_posted_projects_norm[:5000]))\nX_train_SET_1_5000.shape","7fe7ad31":"X_train_SET_1_5000.shape","9c71e155":"y_train_SET_1 = y_train\ny_train_SET_1.shape","cff4b1c2":"# merge two sparse matrices: https:\/\/stackoverflow.com\/a\/19710648\/4084039\nfrom scipy.sparse import hstack\n# with the same hstack function we are concatinating a sparse matrix and a dense matirx :)\nX_test_SET_1 = hstack((X_test_clean_categories_OHE,\n            X_test_clean_subcategories_OHE,\n            X_test_school_state_OHE,\n            X_test_preprocessed_teacher_prefix_OHE,\n            X_test_project_grade_category_OHE,\n            X_test_essay_bow,\n            X_test_title_bow,\n            X_test_price_norm,\n            X_test_teacher_number_of_previously_posted_projects_norm))\n\nX_test_SET_1.shape","00fc0aeb":"y_test_SET_1 = y_test\ny_test_SET_1.shape","6680a99c":"from sklearn.feature_selection import SelectKBest\n\nfeature_selector = SelectKBest(k=5000)\nfeature_selector.fit(X_train_SET_1, y_train_SET_1)\nX_train_SET_1_5k = feature_selector.transform(X_train_SET_1)\nX_test_SET_1_5k = feature_selector.transform(X_test_SET_1)\n\nX_train_SET_1_5k.shape\nX_test_SET_1_5k.shape","34e32c63":"X_train_SET_1_5k.shape\n","5eacb48b":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","fdd15f5b":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding \n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# make sure you featurize train and test data separatly\n\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","c106ef13":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# make sure you featurize train and test data separatly\n\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","3da8f4b0":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","fa6aef9a":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","90370fa0":"\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.cluster import KMeans\n\nKC_SET_1 = KMeans()\nn_clusters_range = [2,5,8,10,12,15,20]\ninertia_range = []\n\nfor clusters in n_clusters_range:\n    kmeans = KMeans(n_clusters=clusters, n_jobs = -1).fit(X_train_SET_1_5k)\n    inertia_range.append(kmeans.inertia_)\n    \n","c89ead27":"inertia_range","34af5285":"import matplotlib.pyplot as plt\n\nplt.plot(n_clusters_range , inertia_range , label='inertia')\n\n#plt.legend()\nplt.xlabel(\"n_cluster_range\")\nplt.ylabel(\"inertia\")\nplt.title(\" n_cluster_range Vs inertia \") # try changing socring = \"roc_auc\" to  socring = \"accuracy \" so as to get the real ERROR plots \nplt.grid()\nplt.show()\n","448defc6":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","4723da3d":"from sklearn.cluster import AgglomerativeClustering\n\nX_train_SET_1_5000 = X_train_SET_1_5000.toarray()\n\nclustering = AgglomerativeClustering(n_clusters = 2).fit(X_train_SET_1_5000)\ncluster_2 = clustering.labels_\n","9b29ef36":"clustering = AgglomerativeClustering(n_clusters = 5).fit(X_train_SET_1_5000)\ncluster_5 = clustering.labels_\n","e24b27d2":"# please write all the code with proper documentation, and proper titles for each subsection\n# go through documentations and blogs before you start coding\n# first figure out what to do, and then think about how to do.\n# reading and understanding error messages will be very much helpfull in debugging your code\n# when you plot any graph make sure you use \n    # a. Title, that describes your plot, this will be very helpful to the reader\n    # b. Legends if needed\n    # c. X-axis label\n    # d. Y-axis label","0178248c":"from sklearn.cluster import DBSCAN\nimport numpy as np\nX = np.array([[1, 2], [2, 2], [2, 3],\n              [8, 7], [8, 8], [25, 80]])\nclustering = DBSCAN(eps=3, min_samples=2).fit(X)\nclustering.labels_\n","354a7018":"clustering.core_sample_indices_","73b12dbe":"### Notes on the Essay Data\n\n<ul>\nPrior to May 17, 2016, the prompts for the essays were as follows:\n<li>__project_essay_1:__ \"Introduce us to your classroom\"<\/li>\n<li>__project_essay_2:__ \"Tell us more about your students\"<\/li>\n<li>__project_essay_3:__ \"Describe how your students will use the materials you're requesting\"<\/li>\n<li>__project_essay_3:__ \"Close by sharing why your project will make a difference\"<\/li>\n<\/ul>\n\n\n<ul>\nStarting on May 17, 2016, the number of essays was reduced from 4 to 2, and the prompts for the first 2 essays were changed to the following:<br>\n<li>__project_essay_1:__ \"Describe your students: What makes your students special? Specific details about their background, your neighborhood, and your school are all helpful.\"<\/li>\n<li>__project_essay_2:__ \"About your project: How will these materials make a difference in your students' learning and improve their school lives?\"<\/li>\n<br>For all projects with project_submitted_datetime of 2016-05-17 and later, the values of project_essay_3 and project_essay_4 will be NaN.\n<\/ul>\n","7e0d77c6":"# DonorsChoose","b63589fb":"<h2>2.1 Splitting data into Train and cross validation(or test): Stratified Sampling<\/h2>","ee70a662":"<h2>2.1 Choose the best data matrix on which you got the best AUC<\/h2>","b5db614b":"<h2>2.2 Make Data Model Ready: encoding numerical, categorical features<\/h2>","f59a05e6":"<h2><font> 1.4 Preprocessing of `project_title`<\/font><\/h2>","a01f9b68":"len(price_standardized)","24c2244a":"### 1.5.1 Vectorizing Categorical data","2f882af4":"<h2>2.4 Dimensionality Reduction on the selected features <\/h2>","2065a2eb":"# Assignment 10: Clustering","778da37d":"<h2><font > 1.4 Preprocessing of `project_teacher_prefix`<\/font><\/h2>","2f33f093":"project_data.columns","394f115e":"## 1.3 preprocessing of `project_subject_subcategories`","ff0beec7":"## 1.2 preprocessing of `project_subject_categories`","c0b09185":"<h2>2.6 Apply AgglomerativeClustering<\/h2>","81f2837f":"<h2>2.5 Apply Kmeans<\/h2>","c2bc9edc":"from sklearn.preprocessing import StandardScaler\nprice_scalar = StandardScaler()\nprice_scalar.fit(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1))# finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\nX_train_previous_projects_standardized = price_scalar.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1, 1))\n#X_train_cv_previous_projects_standardized = price_scalar.transform(X_train_cv['teacher_number_of_previously_posted_projects'].values.reshape(-1, 1))\nX_test_previous_projects_standardized = price_scalar.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(-1, 1))\n\nprint(\"After vectorizations\")\nprint(X_train_previous_projects_standardized.shape, y_train.shape)\n#print(X_train_cv_previous_projects_standardized.shape, y_train_cv.shape)\nprint(X_test_previous_projects_standardized.shape, y_test.shape)\nprint(\"=\"*100)\n","9e02b629":"<h2>2.3 Make Data Model Ready: encoding eassay, and project_title<\/h2>","a064287d":"### 1.5.2 Vectorizing Text data","1b44863c":"## 1.3 Text preprocessing","9e12937f":"- we need to merge all the numerical vectors i.e catogorical, text, numerical vectors","9110357e":"## 1.1 Reading Data","a3ac2fb9":"#### 1.5.2.1 Bag of words","18cd3a71":"### 1.5.3 Vectorizing Numerical features","ab390575":"## 1.5 Preparing data for models","110b3351":"we are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data (optinal)\n       \n       - quantity : numerical (optinal)\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","c49d09c7":"from sklearn.preprocessing import StandardScaler\nprice_scalar = StandardScaler()\nprice_scalar.fit(X_train['price'].values.reshape(-1,1))# finding the mean and standard deviation of this data\nprint(f\"Mean : {price_scalar.mean_[0]}, Standard deviation : {np.sqrt(price_scalar.var_[0])}\")\n\nX_train_price_standardized = price_scalar.transform(X_train['price'].values.reshape(-1, 1))\n#X_train_cv_price_standardized = price_scalar.transform(X_train_cv['price'].values.reshape(-1, 1))\nX_test_price_standardized = price_scalar.transform(X_test['price'].values.reshape(-1, 1))\n\nprint(\"After vectorizations\")\nprint(X_train_price_standardized.shape, y_train.shape)\n#print(X_train_cv_price_standardized.shape, y_train_cv.shape)\nprint(X_test_price_standardized.shape, y_test.shape)\nprint(\"=\"*100)\n","4a21543e":"## About the DonorsChoose Data Set\n\nThe `train.csv` data set provided by DonorsChoose contains the following features:\n\nFeature | Description \n----------|---------------\n**`project_id`** | A unique identifier for the proposed project. **Example:** `p036502`   \n**`project_title`**    | Title of the project. **Examples:**<br><ul><li><code>Art Will Make You Happy!<\/code><\/li><li><code>First Grade Fun<\/code><\/li><\/ul> \n**`project_grade_category`** | Grade level of students for which the project is targeted. One of the following enumerated values: <br\/><ul><li><code>Grades PreK-2<\/code><\/li><li><code>Grades 3-5<\/code><\/li><li><code>Grades 6-8<\/code><\/li><li><code>Grades 9-12<\/code><\/li><\/ul>  \n **`project_subject_categories`** | One or more (comma-separated) subject categories for the project from the following enumerated list of values:  <br\/><ul><li><code>Applied Learning<\/code><\/li><li><code>Care &amp; Hunger<\/code><\/li><li><code>Health &amp; Sports<\/code><\/li><li><code>History &amp; Civics<\/code><\/li><li><code>Literacy &amp; Language<\/code><\/li><li><code>Math &amp; Science<\/code><\/li><li><code>Music &amp; The Arts<\/code><\/li><li><code>Special Needs<\/code><\/li><li><code>Warmth<\/code><\/li><\/ul><br\/> **Examples:** <br\/><ul><li><code>Music &amp; The Arts<\/code><\/li><li><code>Literacy &amp; Language, Math &amp; Science<\/code><\/li>  \n  **`school_state`** | State where school is located ([Two-letter U.S. postal code](https:\/\/en.wikipedia.org\/wiki\/List_of_U.S._state_abbreviations#Postal_codes)). **Example:** `WY`\n**`project_subject_subcategories`** | One or more (comma-separated) subject subcategories for the project. **Examples:** <br\/><ul><li><code>Literacy<\/code><\/li><li><code>Literature &amp; Writing, Social Sciences<\/code><\/li><\/ul> \n**`project_resource_summary`** | An explanation of the resources needed for the project. **Example:** <br\/><ul><li><code>My students need hands on literacy materials to manage sensory needs!<\/code<\/li><\/ul> \n**`project_essay_1`**    | First application essay<sup>*<\/sup>  \n**`project_essay_2`**    | Second application essay<sup>*<\/sup> \n**`project_essay_3`**    | Third application essay<sup>*<\/sup> \n**`project_essay_4`**    | Fourth application essay<sup>*<\/sup> \n**`project_submitted_datetime`** | Datetime when project application was submitted. **Example:** `2016-04-28 12:43:56.245`   \n**`teacher_id`** | A unique identifier for the teacher of the proposed project. **Example:** `bdf8baa8fedef6bfeec7ae4ff1c15c56`  \n**`teacher_prefix`** | Teacher's title. One of the following enumerated values: <br\/><ul><li><code>nan<\/code><\/li><li><code>Dr.<\/code><\/li><li><code>Mr.<\/code><\/li><li><code>Mrs.<\/code><\/li><li><code>Ms.<\/code><\/li><li><code>Teacher.<\/code><\/li><\/ul>  \n**`teacher_number_of_previously_posted_projects`** | Number of project applications previously submitted by the same teacher. **Example:** `2` \n\n<sup>*<\/sup> See the section <b>Notes on the Essay Data<\/b> for more details about these features.\n\nAdditionally, the `resources.csv` data set provides more data about the resources required for each project. Each line in this file represents a resource required by a project:\n\nFeature | Description \n----------|---------------\n**`id`** | A `project_id` value from the `train.csv` file.  **Example:** `p036502`   \n**`description`** | Desciption of the resource. **Example:** `Tenor Saxophone Reeds, Box of 25`   \n**`quantity`** | Quantity of the resource required. **Example:** `3`   \n**`price`** | Price of the resource required. **Example:** `9.95`   \n\n**Note:** Many projects require multiple resources. The `id` value corresponds to a `project_id` in train.csv, so you use it as a key to retrieve all resources needed for a project:\n\nThe data set contains the following label (the value you will attempt to predict):\n\nLabel | Description\n----------|---------------\n`project_is_approved` | A binary flag indicating whether DonorsChoose approved the project. A value of `0` indicates the project was not approved, and a value of `1` indicates the project was approved.","496e27d6":"<h1>2. Naive Bayes <\/h1>","83d96479":"<h1>3. Cocnlusions<\/h1>\n<br> Please write down few lines of your observations on this assignment.","b33f5b6d":"<h2>2.3 Make Data Model Ready: encoding eassay, and project_title<\/h2>","4ab12ead":"X_test_price_standardized","75e5dd34":"<h2>2.7 Apply DBSCAN<\/h2>","ce082608":"## 1.5.4 Merging all the above features","24d34648":"<h2>2.2 Make Data Model Ready: encoding numerical, categorical features<\/h2>","c9804af3":"<h1>2. Clustering <\/h1>","e01509bf":"- <font color='red'>step 1<\/font>: Choose any vectorizer (data matrix) that you have worked in any of the assignments, and got the best AUC value.\n- <font color='red'>step 2<\/font>: Choose any of the <a href='https:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html'>feature selection<\/a>\/<a href='https:\/\/scikit-learn.org\/stable\/modules\/decomposition.html'>reduction algorithms<\/a> ex: selectkbest features, pretrained word vectors, model based feature selection etc and reduce the number of features to 5k features\n- <font color='red'>step 3<\/font>: Apply all three kmeans, Agglomerative clustering, DBSCAN\n    - <strong>K-Means Clustering:<\/strong> <br>\n        \u25cf Find the best \u2018k\u2019 using the elbow-knee method (plot k vs inertia_)<br>\n    - <strong>Agglomerative Clustering: <\/strong><br>\n        \u25cf Apply <a href='https:\/\/stackabuse.com\/hierarchical-clustering-with-python-and-scikit-learn\/'>agglomerative algorithm<\/a> and try a different number of clusters like 2,5 etc. <br>\n        \u25cf You can take less data points (as this is very computationally expensive one) to perform hierarchical clustering because they do take a considerable amount of time to run. <br>\n    - <strong>DBSCAN Clustering: <\/strong><br>\n        \u25cf Find the best \u2018eps\u2019 using the <a href='https:\/\/stackoverflow.com\/a\/48558030\/4084039'>elbow-knee method<\/a>.<br>\n        \u25cf You can take a smaller sample size for this as well.\n- <font color='red'>step 4<\/font>: Summarize each cluster by manually observing few points from each cluster.\n- <font color='red'>step 5<\/font>: You need to plot the word cloud with essay text for each cluster for each of algorithms mentioned in <font color='red'>step 3<\/font>.","83921564":"<p>\nDonorsChoose.org receives hundreds of thousands of project proposals each year for classroom projects in need of funding. Right now, a large number of volunteers is needed to manually screen each submission before it's approved to be posted on the DonorsChoose.org website.\n<\/p>\n<p>\n    Next year, DonorsChoose.org expects to receive close to 500,000 project proposals. As a result, there are three main problems they need to solve:\n<ul>\n<li>\n    How to scale current manual processes and resources to screen 500,000 projects so that they can be posted as quickly and as efficiently as possible<\/li>\n    <li>How to increase the consistency of project vetting across different volunteers to improve the experience for teachers<\/li>\n    <li>How to focus volunteer time on the applications that need the most assistance<\/li>\n    <\/ul>\n<\/p>    \n<p>\nThe goal of the competition is to predict whether or not a DonorsChoose.org project proposal submitted by a teacher will be approved, using the text of project descriptions as well as additional metadata about the project, teacher, and school. DonorsChoose.org can then use this information to identify projects most likely to need further review before approval.\n<\/p>"}}