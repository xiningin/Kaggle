{"cell_type":{"aa6c2ee4":"code","0a04eb2e":"code","bd70b79c":"code","0524e7da":"code","9d18fef9":"code","a754cad0":"code","30a1baff":"code","bdca3af4":"code","70569ef2":"code","b534d022":"code","216b712c":"code","85ad6def":"code","af7ff3b4":"code","7b7f5076":"code","2c50ff43":"code","6e858a27":"markdown","55f02867":"markdown","7d2e351b":"markdown","3ca53470":"markdown","d1bc568e":"markdown","0d154ea5":"markdown","ebb6905e":"markdown","b11382be":"markdown","c34b3f66":"markdown","5d4461f3":"markdown","bd72cbfd":"markdown","0014cccd":"markdown","91a1bb93":"markdown","71b8db2d":"markdown","c4061294":"markdown","4cdbaee6":"markdown","da6ffb8e":"markdown","51584083":"markdown","9cdc3226":"markdown"},"source":{"aa6c2ee4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import product\nimport seaborn as sns\nimport sys, os\n\nimport keras\nimport keras.backend as K\nfrom keras.models import Model, Sequential\nfrom keras.layers import *\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n\nfrom warnings import filterwarnings\n\nfilterwarnings('ignore')","0a04eb2e":"data = np.load('\/kaggle\/input\/captchadlutils\/repository\/Vykstorm-CaptchaDL-utils-a8458b5\/chars.npz')\nX, y = data['X'], data['y']\nalphabet = np.load('\/kaggle\/input\/reading-captcha-dataset-part-1\/preprocessed-data.npz')['alphabet']","bd70b79c":"X.shape[0]","0524e7da":"indices = np.random.choice(np.arange(0, X.shape[0]), size=10)\nX_batch, y_batch = X[indices], y[indices]\n\nfig, ax = plt.subplots(2, 5, figsize=(12, 5))\nfor i, j in product(range(0, 2), range(0, 5)):\n    k = i * 3 + j\n    plt.sca(ax[i, j])\n    plt.imshow(X_batch[k, :, :, 0], cmap='gray')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title('\"{}\"'.format(alphabet[y_batch[k].argmax()]))","9d18fef9":"num_classes = len(alphabet)\n\nt_in = Input(shape=(X.shape[1:]))\n\nx = t_in\n\nx = Conv2D(32, kernel_size=(5, 5), kernel_initializer='he_normal', padding='same')(x)\nx = MaxPool2D((2, 2))(x)\n\nx = Conv2D(64, kernel_size=(3, 3), kernel_initializer='he_normal', activation='relu', padding='same')(x)\nx = MaxPool2D((2, 2))(x)\n\nx = Conv2D(32, kernel_size=(3, 3), kernel_initializer='he_normal', activation='relu', padding='same')(x)\nx = MaxPool2D((2, 2))(x)\n\nx = Flatten()(x)\nx = Dense(96, activation='relu')(x)\nx = Dense(num_classes, activation='softmax')(x)\n\nt_out = x\nmodel = Model([t_in], [t_out])","a754cad0":"model.summary()","30a1baff":"model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])","bdca3af4":"X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.15, stratify=y.argmax(axis=1))","70569ef2":"epochs = 8\ncallbacks = [\n    EarlyStopping(min_delta=0.01, monitor='val_loss', mode='min', patience=1),\n    ModelCheckpoint('weights.hdf5', monitor='val_loss', save_weights_only=True, mode='min')\n]\nresult = model.fit(X_train, y_train, batch_size=8, epochs=epochs, verbose=True, validation_split=0.1, callbacks=callbacks)\nhistory = result.history","b534d022":"fig, ax = plt.subplots(1, 2, figsize=(11, 4))\n\nplt.sca(ax[0])\nplt.plot(history['loss'], color='red')\nplt.plot(history['val_loss'], color='blue')\nplt.legend(['Loss', 'Val. Loss'])\nplt.xlabel('Epoch')\nplt.title('Loss')\nplt.tight_layout()\n\nplt.sca(ax[1])\nplt.plot(history['acc'], color='red')\nplt.plot(history['val_acc'], color='blue')\nplt.legend(['Accuracy', 'Val. Accuracy'])\nplt.xlabel('Epoch')\nplt.title('Accuracy')\n\nplt.suptitle('Model performance on training')\n\nplt.tight_layout()\nplt.subplots_adjust(top=0.85)","216b712c":"model.load_weights('weights.hdf5')","85ad6def":"y_test_pred = model.predict(X_test, verbose=True)\ny_test_labels = y_test.argmax(axis=1)\ny_test_labels_pred = y_test_pred.argmax(axis=1)\n","af7ff3b4":"print('Accuracy on test set: {}'.format(np.round(accuracy_score(y_test_labels, y_test_labels_pred), 4)))\n","7b7f5076":"plt.figure(figsize=(10, 8))\nsns.heatmap(confusion_matrix(y_test_labels, y_test_labels_pred), annot=True, fmt='d',\n                            xticklabels=alphabet, yticklabels=alphabet)\nplt.title('Confusion matrix of eval predictions');","2c50ff43":"print(classification_report(y_test_labels, y_test_labels_pred, target_names=alphabet))","6e858a27":"In this notebook i will show how to build a very simple convolutional neuronal network using Keras to classify single characters extracted from the captcha dataset images <br\/>\nYou can find more code & notebooks in my repository: https:\/\/github.com\/Vykstorm\/CaptchaDL","55f02867":"If you check the 'precision' score and the confusion matrix graphic, you can see that the worst results are raised when we predict 'm' is an 'n'. This is because of 'm' being cut sometimes when we split the image and is transformed to an 'n'. That means for that samples the label is wrong","7d2e351b":"## Split the dataset in train & test sets","3ca53470":"## Import data","d1bc568e":"The next cell prints different metric scores of our predictions (for each target class)","0d154ea5":"\nCompile the model","ebb6905e":"Evaluate the model on the test set","b11382be":"## Train the model","c34b3f66":"I saved the model weights in https:\/\/github.com\/Vykstorm\/CaptchaDL\/blob\/master\/models\/.char-classifier-weights.hdf5?raw=true so you can download it and build the model without training <br\/>\nSet the model weights using model.load_weights()","5d4461f3":"## Build the model","bd72cbfd":"We will build a deep learning model with the next layers: <br\/>\n* (Convolutional layers + Max Pool layers) * 3\n* Flatten layer to convert image features into a vector\n* 2 dense layers (the last one with softmax activation and 19 units) ","0014cccd":"Here i use a generated dataset which consists of 50k samples of single char images of size 40x40 pixels extracted from the captcha dataset (as indicated in the part 2 notebook)","91a1bb93":"Set the weights which gave the model lower validation loss in the training phase","71b8db2d":"## Evaluate the model","c4061294":"Print performance scores during the training phase","4cdbaee6":"Despite that, we can see that the model generalizes well and shows good results (accuracy over 0.9) with only a few training iterations","da6ffb8e":"## Import statements","51584083":"The next graphic shows the confusion matrix of the predictions","9cdc3226":"## Conclusions"}}