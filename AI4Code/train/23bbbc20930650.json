{"cell_type":{"ce4757b9":"code","8e8954d1":"code","5d516e95":"code","300b7c93":"code","a046dfe7":"code","00522402":"code","308f594e":"code","d1faba69":"code","3771311c":"code","e61e6ca6":"code","269d90f0":"code","9dca3177":"code","347e474e":"code","e33dddcb":"code","ce3bc54a":"code","e7696efa":"code","8548eefe":"code","5cb38588":"code","648fc69e":"code","8878b9a7":"code","d689e62c":"code","b14bde08":"code","f0965570":"code","f43fd4ad":"code","c5913e44":"code","8ae6dc36":"code","004dea25":"code","3999b53c":"code","c8c1073d":"code","8d31e97b":"code","95a6d08a":"code","fee06f1d":"code","e35e893f":"code","5aec92d6":"code","b51dbf57":"code","4cbfe4b2":"code","5c9b8baf":"code","fc8747c3":"code","85d441db":"code","6e149d8b":"code","9d195073":"code","74a61458":"code","c8d96c93":"code","8ec3701f":"code","52766e61":"markdown","de2eda2b":"markdown","bcc7eedd":"markdown","3430bffa":"markdown","d857e80a":"markdown","782c2b9e":"markdown","b422b097":"markdown","4b7b320b":"markdown","c112ef36":"markdown","0f893a02":"markdown","19663441":"markdown","54851b55":"markdown","2321178c":"markdown","0ea0f821":"markdown","c8480507":"markdown","5a0a242f":"markdown","0a90d599":"markdown","474cbffb":"markdown","6becb5af":"markdown","e953b6e4":"markdown","66bf231b":"markdown","7981426f":"markdown","056f3141":"markdown"},"source":{"ce4757b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# import all the required packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8e8954d1":"# Read the train.csv file and store the data in pandas dataframe\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.head()","5d516e95":"# Read the test.csv file and store the data in pandas dataframe\ntest_df = pd.read_csv('..\/input\/test.csv')\ntest_df.head()       ","300b7c93":"# visually access the data by looking at the random samples from all two dataframes\ntrain_df.sample(10)","a046dfe7":"# visually access the test data\ntest_df.sample(10)","00522402":"train_df.info()","308f594e":"train_df.describe()","d1faba69":"# Create a copy of dataframe before cleaning\ntrain_df_clean = train_df.copy()\ntest_df_clean = test_df.copy()\ntest_df_clean.shape","3771311c":"# Name is in format (Lastname, title. Firstname) - Separate this information in 3 different columns for tidiness\ntrain_df_clean['last_name'] = train_df_clean.Name.str.split(',').str[0]\ntrain_df_clean['title'] = train_df_clean.Name.str.split(',').str[1].str.split('.').str[0]\ntrain_df_clean['first_name'] = train_df_clean.Name.str.split(',').str[1].str.split('.').str[1]\n\ntest_df_clean['last_name'] = test_df_clean.Name.str.split(',').str[0]\ntest_df_clean['title'] = test_df_clean.Name.str.split(',').str[1].str.split('.').str[0]\ntest_df_clean['first_name'] = test_df_clean.Name.str.split(',').str[1].str.split('.').str[1]","e61e6ca6":"# Ticket column has alphabets and numbers and is of type string\n# As ticket will not be used for analysis, we will drop it\ntrain_df_clean.drop('Ticket',axis=1,inplace=True)\ntest_df_clean.drop('Ticket',axis=1,inplace=True)","269d90f0":"# Survived column should be a category type\ntrain_df_clean.Survived = train_df_clean.Survived.astype('category')","9dca3177":"# Age, cabin, Embarked has missing values\n# Drop cabin column\ntrain_df_clean.drop('Cabin',axis=1,inplace=True)\ntest_df_clean.drop('Cabin',axis=1,inplace=True)\n\n# Embarked, Age, Fare (in Test dataset) has missing values, the rows will be imputed\n\n# We will check from which station most the passengers boarded the Ship\ntrain_df_clean.Embarked.value_counts()","347e474e":"# From above list, the station is set to 'S' for missing stations\ntrain_df_clean.Embarked.fillna('S', inplace=True)\n# As there are passengers from various age groups and data from age is missing in many rows, these rows will be dropped\ntrain_df_clean.dropna(inplace=True)","e33dddcb":"# We will fill missing values from Fare column of Test dataset with median value of Fare\ntest_df_clean.Fare.fillna(test_df_clean.Fare.median(), inplace=True)\n# We will the missing age values with average age of passengers in both train and test dataset\ntest_df_clean.Age.fillna(test_df_clean.Age.mean(), inplace=True)","ce3bc54a":"# Count of Family members is divided in two columns Sibsp and Parch\ntrain_df_clean['family_members'] = train_df_clean.SibSp + train_df_clean.Parch\ntest_df_clean['family_members'] = test_df_clean.SibSp + test_df_clean.Parch","e7696efa":"# Remove the columns that are not needed for analysis (cabin) \n# Drop the columns SibSp, Parch, Name\ntrain_df_clean.drop(['SibSp','Parch','Name'],axis=1,inplace=True)\ntest_df_clean.drop(['SibSp','Parch','Name'],axis=1,inplace=True)","8548eefe":"# Convert all column names to lower case to meet python coding standards\ntrain_df_clean.columns = [x.lower() for x in train_df_clean.columns]\ntest_df_clean.columns = [x.lower() for x in test_df_clean.columns]","5cb38588":"train_df_clean.describe()","648fc69e":"# Check for duplicates in the data\nsum(train_df_clean.duplicated()) ","8878b9a7":"train_df_clean.age.hist(bins=20,figsize=(6,5));\nplt.title('Histogram of passeger Age');","d689e62c":"train_df_clean[train_df_clean.age < 1]","b14bde08":"train_df_clean.fare.hist(bins=20,figsize=(6,5));\nplt.title('Histogram of passeger Fare');","f0965570":"# The passengers who have paid higher Fare\ntrain_df_clean.query(\"fare > 300\") ","f43fd4ad":"# Fare histogram after removing outliers\ntrain_df_clean.query(\"fare < 200\")['fare'].hist(figsize=(6,5));","c5913e44":"plt.figure(figsize=(6,5),dpi=80)\nsns.countplot(x='family_members', data=train_df_clean)\nplt.title('Plot of passenger count vs family members')\nplt.xlabel('Family Members')\nplt.ylabel('Count');","8ae6dc36":"# passenger count accross various titles\ntrain_df_clean.title.value_counts()","004dea25":"# plot of count of passengers for each type of gender category\nplt.figure(figsize=(6,5),dpi=80)\ngender_count = train_df_clean.groupby('sex')['passengerid'].count()\ngender_category = ['Female', 'Male']\nsns.barplot(gender_category, gender_count)\nplt.title('Plot of passenger count for each gender')\nplt.xlabel('Gender Category')\nplt.ylabel('Count');","3999b53c":"# plot of count of passengers for each type of class\nplt.figure(figsize=(6,5),dpi=80)\nclass_count = train_df_clean.groupby('pclass')['passengerid'].count()\nclass_category = [1,2,3]\nsns.barplot(class_category, class_count)\nplt.title('Plot of passengers count for each class')\nplt.xlabel('Passenger Class')\nplt.ylabel('Passenger Count');","c8c1073d":"# plot of count of passengers for each starting station\nplt.figure(figsize=(6,5),dpi=80)\nembarked_count = train_df_clean.groupby('embarked')['passengerid'].count()\nembarked_category = ['Cherbourg','Queenstown','Southampton']\nsns.barplot(embarked_category, embarked_count)\nplt.title('Plot of passengers count stating from different stations')\nplt.xlabel('Start station')\nplt.ylabel('Passenger Count'); ","8d31e97b":"# plot of count of survived passengers for each type of gender category\ngender_count = train_df_clean.groupby(['survived','sex'])['passengerid'].count().unstack('survived');\nax = gender_count.plot(kind='bar', rot=0, stacked=True, figsize=(6,5));\ngender_category = ['Female', 'Male']\nplt.title('Plot of survived passengers count for each gender category')\nplt.xlabel('Gender Category')\nplt.ylabel('Passenger Count');\nplt.legend(['Not Survived','Survived'],loc = 6, bbox_to_anchor = (1.0, 0.5));\nplt.xticks([0,1],gender_category);","95a6d08a":"# plot of count of passengers for each type of class\nclass_count = train_df_clean.groupby(['survived','pclass'])['passengerid'].count().unstack('survived');\nclass_category = [1,2,3]\nax = class_count.plot(kind='bar', rot=0, stacked=True, figsize=(6,5));\nplt.title('Plot of passengers count for each class')\nplt.xlabel('Passenger Class')\nplt.legend(['Not Survived','Survived'],loc = 6, bbox_to_anchor = (1.0, 0.5));\nplt.ylabel('Passenger Count');","fee06f1d":"plt.figure(figsize=(6,4), dpi = 100)\nsns.boxplot(data = train_df_clean, x = 'survived', y = 'age', hue = 'sex')\nplt.legend(loc = 6, bbox_to_anchor = (1.0, 0.5)) # legend to right of figure\nplt.xticks(rotation = 0)\nplt.title('Box plot for duration vs gender and user type')\nplt.xlabel('Gender');\nplt.ylabel('Age (years)');\nplt.xticks([0,1],['Not Survived','Survived']);","e35e893f":"train_df_clean.head()","5aec92d6":"train_df_clean.loc[train_df_clean[\"sex\"] == \"male\", \"sex\"] = 0\ntrain_df_clean.loc[train_df_clean[\"sex\"] == \"female\", \"sex\"] = 1\n\ntrain_df_clean.loc[train_df_clean[\"embarked\"] == \"C\", \"embarked\"] = 0\ntrain_df_clean.loc[train_df_clean[\"embarked\"] == \"Q\", \"embarked\"] = 1\ntrain_df_clean.loc[train_df_clean[\"embarked\"] == \"S\", \"embarked\"] = 2\n\ntest_df_clean.loc[test_df_clean[\"sex\"] == \"male\", \"sex\"] = 0\ntest_df_clean.loc[test_df_clean[\"sex\"] == \"female\", \"sex\"] = 1\n\ntest_df_clean.loc[test_df_clean[\"embarked\"] == \"C\", \"embarked\"] = 0\ntest_df_clean.loc[test_df_clean[\"embarked\"] == \"Q\", \"embarked\"] = 1\ntest_df_clean.loc[test_df_clean[\"embarked\"] == \"S\", \"embarked\"] = 2","b51dbf57":"train_df_clean.head()","4cbfe4b2":"test_df_clean.head()","5c9b8baf":"# importing required sklearn modules\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score \nfrom sklearn.model_selection import train_test_split","fc8747c3":"# Remove the columns not needed to train the model\nx_all = train_df_clean.drop(['survived','title','first_name','last_name'], axis=1)\ny_all = train_df_clean['survived']\n\n# Remove the columns not needed for prediction\nx_prob = test_df_clean.drop(['title','first_name','last_name'], axis=1)","85d441db":"# Split the training dataset into train and test data into 80:20 ratio\nx_train, x_test, y_train, y_test = train_test_split(x_all, y_all, test_size=0.2, random_state=0)","6e149d8b":"clf = LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial') # create the classifier\nclf.fit(x_train, y_train) # fit the classifier\ny_pred = clf.predict(x_test) # predict the values for test set","9d195073":"# Check accuracy score of the predictions\naccuracy_score(y_test, y_pred)","74a61458":"# predict the values for problem set\ny_prob = clf.predict(x_prob)","c8d96c93":"# Store the predictions into a dataframe\ndf_sub = pd.DataFrame()\ndf_sub['PassengerId'] = x_prob.passengerid\ndf_sub['Survived'] = y_prob\ndf_sub.shape","8ec3701f":"# Save the dataframe to a csv file\ndf_sub.to_csv('submission.csv', index=False)","52766e61":"### Statistical information about the dataset\n\n1. Total 891 passenger information in recorded in the dataset. They are numbered from 1 to 891.\n2. Passenger have tickets from class 1 to 3\n3. The average age of passengers travelling is around 30 yrs. with minimum of 0.42 (represents the age in fraction) and maximum age of 80 yrs.\n4. The average fare paid is 32.30 units with maximum fare of 512.32 units. \n\n### Quality and Tidiness issues in the dataset\n\n1. Name is in format (Lastname, title. Firstname)\n2. Ticket column has alphabets and numbers and is of type string\n3. Survived column should be a category type\n4. Age, Cabin, Embarked has missing values \n5. Count of Family members is divided in two columns Sibsp and Parch\n6. Remove the columns that are not needed for analysis (cabin) \n7. Convert all column names to lower case to meet python coding standards\n\n## C. Clean the data","de2eda2b":"The results are interesting !!! If we look at the ratio of survivours, more female passengers survived compared to Male passengers. \n\nWe will extend the analysis to count of passengers survived in each class.\n","bcc7eedd":"## Dataset information\n\nThe dataset for this analysis consists of two datasets:\n\n1. training set (train.csv)\n2. test set (test.csv)\n\nData Dictionary:\n1. Survived\t- Survival Status \t1 = Yes and 0 = No \n2. pclass\t    - Ticket class\t    1 = 1st, 2 = 2nd or 3 = 3rd\n3. sex\t        - Gender of the passenger\t\n4. Age\t        - Age in years\t\n5. sibsp\t    - # of siblings \/ spouses aboard the Titanic\t\n6. parch\t    - # of parents \/ children aboard the Titanic\t\n7. ticket\t    - Ticket number\t\n8. fare\t    - Passenger fare\t\n9. cabin\t    - Cabin number\t\n10. embarked\t- Starting station\tC = Cherbourg, Q = Queenstown, S = Southampton\n11. PassengerId - Passenger Id allocated to each passenger\n12. Name        - Passenger Name","3430bffa":"From this data we can see that, for some of the passengers, the title is recorded wrongly for e.g. Rev, Mlle, Mme, etc.\n\nWe will not look at the categorical variables such as sex, pclass, survived and embarked.","d857e80a":"After looking at the age and fare, let us look at the newly added feature family_members which records the family member count for each passenger.","782c2b9e":"We need all the records from the Test dataset, hence we cannot drop the rows having missing values.","b422b097":"We can see that, most of the passengers have paid fare below 20 units. Also we can see that there are outliers between 200 to 300 and around 500. Let us investigate the outliers.","4b7b320b":"From the plot of age we can see that, most of the passenger onboard Titanic were of age group 18 to 35 years. Also from the plot it is clear that there were many children below age of 8. Also, from the statistical data we can see there are children below 1 year of age.","c112ef36":"Most of the passengers started the journey from Southampton, followed by Cherbourg and leat from Queenstown.\n\nNow we will add one more variable survived status to our plot of passenger count for each gender category.","0f893a02":"## 5. Conclusion\n\nThe titanic data available was wrangled and made ready for analysis. Then, basic statistical analysis was performed and visualization were created to look at the relations between variables. To perform prediction of survivors on the cleaned data, I have selected logistic regression technique as in this case we have a binary outcome (survived or not survived). \n\nWhile imputing the age column, I have used two techniques, first I have filled the missing values with average age of passengers and the accuracy obtained for logistic regression was around 0.7912. Then, I decided to remove the rows having missing data, the model was re-trained with this new data and the accuracy obtained is 0.8251. Hence, I decided to go ahead with the removal of missing data. \n\nFurther exploration can be done using different ML techniques and performance and accuracy can be compared. ","19663441":"End of Data Gathering step.\n\nSteps taken to gather the data from various sources\n1. Getting data from local file (train.csv) and reading csv file using pandas\n2. Getting data from local file (test.csv) and reading csv file using pandas","54851b55":"## Analyzing and visualizing the cleaned data\n\nThe cleaned data has total 712 rows and 12 columns. This data will be saved to a master dataframe for analysis purpose.\n\nThe primary variables of iterest for analysis are Age, Sex, Fare, Pclass.","2321178c":"In the dataset, age and fare are numerical values, other values are obtained using encoding.\n\n## 4. Modelling and predication","0ea0f821":"It can be seen that, more passengers from 1st class have survived. \n\nNow we will look at age of survived and not survived passengers for both genders.","c8480507":"After finishing the Udacity Data Analyst Nanodegree program, I have selected the Titanic Dataset for my first practice project.\n\nThe steps taken for completing the project are:\n1. Data wrangling:\n    1. Gathering data\n    2. Assessing data\n    3. Cleaning data\n2. Exploratory Data Analysis - Storing, analyzing, and visualizing the cleaned data\n3. Feature Engineering\n4. Modelling and predication\n5. Conclusion\n\nThe outcome of this project will be a csv file for Kaggle submission \n1. submissision.csv","5a0a242f":"## 1. Data wrangling\n\n## A. Gather Data","0a90d599":"## Importing required libraries","474cbffb":"## B. Assess the data (Visual and programatic assessment of data)","6becb5af":"The average of survived male and female passengers are almost equal and around 28 years. \n\nFinally we will use pairplot to see relations between different features.\n\n## 3. Feature Engineering","e953b6e4":"We can see that Male passengers were more compared to Female passengers. \n\nNow, we will see passengers booked on each type of class.","66bf231b":"Maximum passengers were travelling in class 3. \n\nNow, we will see passengers starting from different embarkment stations.","7981426f":"It is evident that, most of the passengers were solo travellers and few passengers were travelling in group.\n\nWe will also look at the titles of passengers travelling on titanic.","056f3141":"The columns sex and embarked are categorical values we will represent these as numerical values. This is needed for classification models. "}}