{"cell_type":{"0b61a94d":"code","e6a0499d":"code","5285d8ff":"code","7f4c0e93":"code","758e1657":"code","a5a603d5":"code","3cf0127d":"code","22fb8464":"code","b8ad19a8":"code","577da871":"code","58ada768":"code","d82e6d82":"code","1af90bc7":"code","603c96bb":"code","75ce8a9d":"code","4dbf0090":"code","5668b30c":"code","8998bfca":"code","3e57bccf":"code","d88ebd8b":"code","785438a1":"code","ef6b9eb2":"code","3dd66c0e":"code","dd6be691":"code","7ec58f4a":"code","e55aa7cc":"code","8d28352b":"code","3f20dd48":"code","4cc17219":"code","17deec20":"code","6d2fbd74":"code","aea238cf":"code","b440bb8e":"code","eb801d71":"code","409febb0":"code","a7c84fe9":"code","493d6d8f":"code","bbf3da98":"code","6dde28b1":"code","eee29b9c":"code","7b9b71d4":"code","d645556f":"code","562d7b8d":"code","0392848e":"code","883ad2c2":"code","e0a1d924":"code","bfa5a5ab":"code","34530ed4":"code","72315941":"code","8ddefcf5":"code","031c10b0":"code","c26f29fa":"code","da69e438":"code","6a13419a":"code","41940526":"code","35294eec":"code","62693825":"code","adf8c3f9":"code","27b8375e":"code","71ba5a27":"code","e18b774c":"code","4e6d6a7e":"code","b9d4ba6c":"code","cb9d2e59":"code","ce727714":"code","56340326":"code","d65b34ef":"code","aa9389e0":"code","69ee94fc":"code","9d00807a":"code","705d2a27":"code","d08610fe":"code","35169a48":"code","26f043f1":"code","a5b05470":"code","446cad85":"code","dc03a800":"code","9eb8f995":"code","668b2bd0":"code","7d8c67a7":"code","4eefaec8":"code","b41d7f86":"code","aeff3681":"code","0256fdb5":"code","94c65c4a":"code","d0352c96":"code","1b0180f7":"code","d13df0ed":"code","a0fb94b9":"code","735eade9":"code","883c2314":"code","6b2659ee":"code","8e9f5f26":"code","d12438e0":"code","b2095e28":"code","37fbbda7":"code","f41d9610":"code","1aa4b1e9":"code","f674a446":"code","eca63761":"code","af65a813":"code","b2320528":"code","47817965":"code","fb17bbea":"code","55204e83":"code","50bd96df":"code","c64b53b0":"code","cf1cf11a":"code","4cfd0ab5":"code","815779b0":"code","30492900":"code","85e4793a":"code","8474eacb":"code","5b1f68f6":"code","d2693482":"code","489be5c4":"code","c83e9ee0":"code","4d79b364":"code","f7a10335":"code","57c8dc98":"code","2554ed0c":"code","b3855a14":"code","fc9486e9":"code","563ed367":"code","d62278c0":"code","b1a334fa":"code","da7d91c4":"code","3ed41898":"code","1da3e761":"code","a6b300c8":"code","6e94f7d7":"code","e1dafb9f":"code","fecdb56a":"code","c81ef83e":"code","13a787c8":"code","253fa5de":"code","d256c151":"code","a17ddc2d":"code","196e48b8":"code","0e593ccd":"code","580819ae":"code","ec81973f":"code","c73fd788":"code","99ee2e54":"code","ed13e500":"code","159a21d4":"code","e53d4d01":"code","b4dd30e7":"code","c7c60eef":"code","b07d3825":"code","19403947":"code","9cf58522":"code","0020eb51":"code","64d80b4f":"code","33f93181":"code","c6f78862":"code","575c9e75":"code","5f7e042a":"code","a96ed338":"code","e7784e70":"code","d7cf2822":"code","58294df7":"code","87c72fb4":"code","fc4fdeba":"code","7524270d":"code","921c3aed":"code","027a45ea":"code","305c7f5a":"code","eec921d2":"code","854a9014":"code","5aa200b1":"code","7a276516":"code","8bc97180":"code","81b3f487":"code","4a6464bc":"code","e4db5d4e":"code","978ea90c":"code","b4ff66f9":"code","ce67cb0c":"code","86c15649":"code","cb33695c":"code","d255a8b4":"code","576370fa":"markdown","d3f7ee20":"markdown","6b8e562a":"markdown","11885bea":"markdown","ac894748":"markdown","e66d669f":"markdown","2112a936":"markdown","d2ec0ade":"markdown","3b12df87":"markdown","464a0d41":"markdown","a600582c":"markdown","2f57387b":"markdown","df5da762":"markdown","7611db5f":"markdown","03ca9eb5":"markdown","08ef7695":"markdown","385575bc":"markdown","d40b9f1b":"markdown","735cc6d7":"markdown"},"source":{"0b61a94d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e6a0499d":"train=pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","5285d8ff":"test=pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","7f4c0e93":"gender_submission=pd.read_csv(\"..\/input\/gender_submission.csv\")\ngender_submission.head()","758e1657":"train.info()","a5a603d5":"test.info()","3cf0127d":"df=pd.concat([train,test],ignore_index=True)\ndf.info()","22fb8464":"#identify columns with null value\ndf.isnull().sum()","b8ad19a8":"import matplotlib.pyplot as plt\nfig, axes = plt.subplots(figsize=(20,5),nrows=1,ncols=4)\n\ndf[df['Age'].isnull() & df['Cabin'].isnull()][['Fare']].hist(ax=axes[0],bins=100), axes[0].set_title('Fare Distribution with Missing Age & Cabin')\ndf[df['Age'].notnull() & df['Cabin'].isnull()][['Fare']].hist(ax=axes[1],bins=100),axes[1].set_title('Fare Distribution with Missing Cabin Only')\ndf[df['Age'].isnull() & df['Cabin'].notnull()][['Fare']].hist(ax=axes[2],bins=100),axes[2].set_title('Fare Distribution with Missing Age Only')\ndf[df['Embarked'].isnull()][['Fare']].hist(ax=axes[3],bins=100),axes[3].set_title('Fare Distribution with Missing Embarked Only')\n","577da871":"df[(df['Fare'].isnull())|(df['Embarked'].isnull())]","58ada768":"#identify numbers of unique cabin numbers in the train dataset\n\ncabin_df=df.groupby('Cabin').count()['PassengerId'].reset_index()\ncabin_df.rename(columns={'PassengerId': 'PassengerCount'}, inplace=True)\ncabin_df.info()","d82e6d82":"cabin_df.groupby('PassengerCount').count().plot.bar(figsize=(20,5))","1af90bc7":"cabin_df.groupby('PassengerCount').count()","603c96bb":"cabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==1,1,'')\ncabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==2,2,cabin_df['CabinOccupancy'])\ncabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==3,3,cabin_df['CabinOccupancy'])\ncabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==4,4,cabin_df['CabinOccupancy'])\ncabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==5,5,cabin_df['CabinOccupancy'])\ncabin_df['CabinOccupancy']=np.where(cabin_df['PassengerCount']==6,6,cabin_df['CabinOccupancy'])\ncabin_df['CabinOccupancy']=cabin_df['CabinOccupancy'].astype(str)\ncabin_df.tail()","75ce8a9d":"#merge to original train dataset for further analysis\ndf=pd.merge(df,cabin_df[['Cabin','CabinOccupancy']],how='left',on='Cabin')\ndf.head()","4dbf0090":"#segragate cabin by block\nblock=df['Cabin'].str.split('([A-Za-z]+)(\\d+)', expand=True)\n\n#extract value \nblock['block']=np.where(block[1].isnull(),block[3],block[1])\nblock['block']=np.where(block['block'].isnull(),block[5],block['block'])\nblock['block']=np.where(block['block'].isnull(),block[7],block['block'])\nblock['block']=np.where(block['block'].isnull(),block[9],block['block'])\nblock['block']=np.where(block['block'].isnull(),block[11],block['block'])\n\nblock.head()","5668b30c":"df=pd.merge(df,block,how='outer',left_index=True,right_index=True)\ndf=df.drop([0,1,2,3,4,5,6,7,8,9,10,11,12], axis=1)\ndf.head()","8998bfca":"#observation if correlation exist between age and fare for each block\n\nfig, axes = plt.subplots(figsize=(20,5),nrows=2, ncols=4)\n\ndf[df['block']=='A'].plot.scatter(x='Age',y='Fare',ax=axes[0,0]);df[df['block']=='B'].plot.scatter(x='Age',y='Fare',ax=axes[0,1]);\ndf[df['block']=='C'].plot.scatter(x='Age',y='Fare',ax=axes[0,2]);df[df['block']=='D'].plot.scatter(x='Age',y='Fare',ax=axes[0,3]);\ndf[df['block']=='E'].plot.scatter(x='Age',y='Fare',ax=axes[1,0]);df[df['block']=='F'].plot.scatter(x='Age',y='Fare',ax=axes[1,1]);\ndf[df['block']=='G'].plot.scatter(x='Age',y='Fare',ax=axes[1,2]);","3e57bccf":"#extract titles from name\ntitles=df['Name'].str.split(',',expand=True)[1].str.split('.',expand=True)\ntitles.rename(columns={0: 'Titles'}, inplace=True)\ntitles=titles.drop(columns=[1,2])\ntitles.head()","d88ebd8b":"#merge title with df\ndf=pd.merge(df,titles,how='outer',left_index=True,right_index=True)\ndf.head()","785438a1":"fig, axes = plt.subplots(figsize=(20,10),nrows=2,ncols=3)\n\ndf.groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[0,0],title='all passengers')\ndf[df['block'].isnull() & df['Age'].isnull()].groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[0,1],title='missing block & age')\ndf[df['Age'].isnull() & df['block'].notnull()].groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[0,2],title='missing age only')\ndf[df['block'].isnull() & df['Age'].notnull()].groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[1,0],title='missing block only')\ndf[df['Fare'].isnull()].groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[1,1],title='missing fare')\ndf[df['Embarked'].isnull()].groupby('Titles').count()['PassengerId'].plot.barh(ax=axes[1,2],title='missing embarked')","ef6b9eb2":"fig, axes = plt.subplots(figsize=(20,5),nrows=1,ncols=3)\n\ndf[df['Pclass']==1]['Fare'].hist(ax=axes[0]);axes[0].set_title('Fare Distribution for Passenger Class 1')\ndf[df['Pclass']==2]['Fare'].hist(ax=axes[1]);axes[1].set_title('Fare Distribution for Passenger Class 2')\ndf[df['Pclass']==3]['Fare'].hist(ax=axes[2]);axes[2].set_title('Fare Distribution for Passenger Class 3')","3dd66c0e":"fig, axes = plt.subplots(figsize=(20,15),nrows=3,ncols=3)\n\ndf[df['block']=='A']['Fare'].hist(ax=axes[0,0]);axes[0,0].set_title('Fare Distribution for Passenger Block A')\ndf[df['block']=='B']['Fare'].hist(ax=axes[0,1]);axes[0,1].set_title('Fare Distribution for Passenger Block B')\ndf[df['block']=='C']['Fare'].hist(ax=axes[0,2]);axes[0,2].set_title('Fare Distribution for Passenger Block C')\ndf[df['block']=='D']['Fare'].hist(ax=axes[1,0]);axes[1,0].set_title('Fare Distribution for Passenger Block D')\ndf[df['block']=='E']['Fare'].hist(ax=axes[1,1]);axes[1,1].set_title('Fare Distribution for Passenger Block E')\ndf[df['block']=='F']['Fare'].hist(ax=axes[1,2]);axes[1,2].set_title('Fare Distribution for Passenger Block F')\ndf[df['block']=='G']['Fare'].hist(ax=axes[2,0]);axes[2,0].set_title('Fare Distribution for Passenger Block G')","dd6be691":"fig, axes = plt.subplots(figsize=(20,5),nrows=1,ncols=3)\n\ndf[df['Pclass']==1].groupby('block').count()['PassengerId'].plot.barh(ax=axes[0],title='class 1')\ndf[df['Pclass']==2].groupby('block').count()['PassengerId'].plot.barh(ax=axes[1],title='class 2')\ndf[df['Pclass']==3].groupby('block').count()['PassengerId'].plot.barh(ax=axes[2],title='class 3')","7ec58f4a":"fig, axes = plt.subplots(figsize=(20,5),nrows=1,ncols=3)\n\ndf[df['Pclass']==1].groupby('Embarked').count()['PassengerId'].plot.barh(ax=axes[0],title='class 1')\ndf[df['Pclass']==2].groupby('Embarked').count()['PassengerId'].plot.barh(ax=axes[1],title='class 2')\ndf[df['Pclass']==3].groupby('Embarked').count()['PassengerId'].plot.barh(ax=axes[2],title='class 3')","e55aa7cc":"df.info()","8d28352b":"#case 1a : missing fare\ndf[df['Fare'].isnull()].head()","3f20dd48":"#to find y_fare_test , use df with no null value for age,embarked,parck,pclass,sex,sibsp,titles as the train data\nnonull_df=df[(df['Age'].notnull()) & (df['Age'].notnull()) & (df['Embarked'].notnull()) & (df['block'].notnull()) & (df['CabinOccupancy'].notnull()) ]\nnonull_df.head()","4cc17219":"nonull_df.count()['PassengerId']","17deec20":"#deal with categorical data for case 1a\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train[['Age','Fare','Parch','Pclass_1','Pclass_2','Pclass_3','SibSp','Embarked_S','Sex_male','Titles_ Mr']]\nnonull_df_train.head()\n","6d2fbd74":"X_nonull_df_train = nonull_df_train.drop('Fare',axis=1)\ny_nonull_df_train = nonull_df_train['Fare']","aea238cf":"#extract case 1a as test data\nnullfare=df[df['Fare'].isnull()]\nnullfare","b440bb8e":"nullfare=df[df['Fare'].isnull()]\ncat_feats=['Embarked','Sex','block','Titles','Pclass']\nnullfare_test = pd.get_dummies(nullfare,columns=cat_feats,drop_first=False)\nnullfare_test=nullfare_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived','CabinOccupancy'])\nnullfare_test.head()\n","eb801d71":"X_nullfare_test = nullfare_test","409febb0":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Pclass_1','Pclass_2'])\nX_nullfare_test=X_nullfare_test.drop(columns=['Fare'])\n","a7c84fe9":"#train\nfrom sklearn.tree import DecisionTreeRegressor\ndtreeReg = DecisionTreeRegressor()\ndtreeReg.fit(X_nonull_df_train,y_nonull_df_train)","493d6d8f":"#predict fare value\npredictions_nullfare = dtreeReg.predict(X_nullfare_test)\npredictions_nullfare","bbf3da98":"#updating data for null fare value case 1a\n\nnullfare['Fare']=np.where(nullfare['Fare'].isnull(),93.5,nullfare['Fare'])\nnullfare.head()","6dde28b1":"#updating df for case 1a\n\ndf['Fare']=np.where(df['Fare'].isnull(),93.5,df['Fare'])\ndf[df['PassengerId']==1044].head()","eee29b9c":"#case 1b : missing block\n\n#deal with categorical data for case 1b\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train[['Age','Fare','Parch','SibSp',\n                                 'Embarked_S','Sex_male','Titles_ Mr',\n                                 'block_A','block_B','block_C','block_D',\n                                'block_E','block_F','block_G','Pclass_1','Pclass_2','Pclass_3']]\nnonull_df_train.head()\n\n#multi-label classification problem","7b9b71d4":"X_nonull_df_train = nonull_df_train.drop(['block_A','block_B','block_C','block_D','block_E','block_F','block_G'],axis=1)\ny_nonull_df_train = nonull_df_train[['block_A','block_B','block_C','block_D','block_E','block_F','block_G']]","d645556f":"nullblock=nullfare #using the updated data from case 1.a for test data case 1.b\ncat_feats=['Embarked','Sex','block','Titles']\nnullblock_test = pd.get_dummies(nullblock,columns=cat_feats,drop_first=False)\nnullblock_test=nullblock_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullblock_test.head()\n","562d7b8d":"X_nullblock_test = nullblock_test","0392848e":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Pclass_1','Pclass_2'])\nX_nullblock_test=X_nullblock_test.drop(columns=['CabinOccupancy'])\n","883ad2c2":"from sklearn.tree import DecisionTreeClassifier\ndtreeClass = DecisionTreeClassifier()\ndtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","e0a1d924":"#predict cabin value\npredictions_nullblock = dtreeClass.predict(X_nullblock_test)\npredictions_nullblock","bfa5a5ab":"#updating data for null block value case 1b\nnullblock['block']=np.where(nullfare['block'].isnull(),'C',nullblock['block'])\nnullblock.head()","34530ed4":"#updating df for case 1b\n\ndf['block']=np.where((df['block'].isnull()) & (df['PassengerId']==1044) ,'C',df['block'])\ndf[df['PassengerId']==1044].head()","72315941":"#case 1c : missing cabin occupancy\n\n#deal with categorical data for case 1c , train\ncat_feats=['Embarked','Sex','Titles','block','Pclass','CabinOccupancy']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train[['Age','Fare','Parch','Pclass_1','Pclass_2','Pclass_3','SibSp',\n                                 'Embarked_S','Sex_male','block_C','Titles_ Mr','CabinOccupancy_1',\n                                 'CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6']]\nnonull_df_train.head()\n","8ddefcf5":"X_nonull_df_train = nonull_df_train.drop(columns=['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6'],axis=1)\ny_nonull_df_train = nonull_df_train[['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6']]","031c10b0":"nullocc=nullfare #using the updated data from case 1.b for test data case 1.c\ncat_feats=['Embarked','Sex','block','Titles','Pclass']\nnullocc_test = pd.get_dummies(nullocc,columns=cat_feats,drop_first=False)\nnullocc_test=nullocc_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullocc_test.head()\n","c26f29fa":"X_nullocc_test = nullocc_test","da69e438":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Pclass_1','Pclass_2'])\nX_nullocc_test=X_nullocc_test.drop(columns=['CabinOccupancy'])","6a13419a":"dtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","41940526":"#predict cabin occupancy\npredictions_nullocc = dtreeClass.predict(X_nullocc_test)\npredictions_nullocc","35294eec":"#updating data for null block value case 1c\nnullocc['CabinOccupancy']=np.where(nullocc['CabinOccupancy'].isnull(),'2',nullocc['CabinOccupancy'])\nnullocc.head()","62693825":"#updating df for case 1c\n\ndf['CabinOccupancy']=np.where((df['CabinOccupancy'].isnull()) & (df['PassengerId']==1044) ,'2',df['CabinOccupancy'])\ndf[df['PassengerId']==1044].head()","adf8c3f9":"#updating nonull_df\nnonull_df=df[(df['Fare'].notnull()) & (df['Age'].notnull()) & (df['Embarked'].notnull()) & (df['block'].notnull()) & (df['CabinOccupancy'].notnull())]\nnonull_df.count()['PassengerId']","27b8375e":"#case 2 : missing embarked\nnullembark=df[df['Embarked'].isnull()]\nnullembark.head()","71ba5a27":"#using the previous nonull df as the training dataset\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train = nonull_df_train[['Age','Fare','Parch','Pclass_1','Pclass_2','Pclass_3','SibSp','CabinOccupancy',\n                                 'Embarked_S','Embarked_Q','Embarked_C','Sex_female','Titles_ Miss','Titles_ Mrs','block_B']]\nnonull_df_train.head()","e18b774c":"X_nonull_df_train = nonull_df_train.drop(['Embarked_S','Embarked_Q','Embarked_C'],axis=1)\ny_nonull_df_train = nonull_df_train[['Embarked_S','Embarked_Q','Embarked_C']]","4e6d6a7e":"cat_feats=['Embarked','Sex','block','Titles','Pclass']\nnullembark_test = pd.get_dummies(nullembark,columns=cat_feats,drop_first=False)\nnullembark_test=nullembark_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullembark_test.head()\n","b9d4ba6c":"X_nullembark_test = nullembark_test","cb9d2e59":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Pclass_1','Pclass_2'])\n#X_nullembark_test=X_nullembark_test.drop(columns=[''])","ce727714":"from sklearn.tree import DecisionTreeClassifier\ndtreeClass = DecisionTreeClassifier()\ndtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","56340326":"#predict embarking point\npredictions_nullembark = dtreeClass.predict(X_nullembark_test)\npredictions_nullembark","d65b34ef":"#updating df for case 2\n\ndf['Embarked']=np.where((df['PassengerId']==62) | (df['PassengerId']==830) & (df['Embarked'].isnull()),'S',df['Embarked'])\ndf[(df['PassengerId']==830) | (df['PassengerId']==62)].head()","aa9389e0":"#updating nonull_df\nnonull_df=df[(df['Fare'].notnull()) & (df['Age'].notnull()) & (df['Embarked'].notnull()) & (df['block'].notnull()) ]\nnonull_df.count()['PassengerId']","69ee94fc":"#case 3 : missing age only\ndf[df['Age'].isnull() & df['block'].notnull()].head()","9d00807a":"#deal with categorical data for case 3\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","705d2a27":"X_nonull_df_train = nonull_df_train.drop(['Age'],axis=1)\ny_nonull_df_train = nonull_df_train[['Age']]","d08610fe":"X_nonull_df_train.head()","35169a48":"nullage=df[df['Age'].isnull() & df['block'].notnull()] #extract data for case 3\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullage_test = pd.get_dummies(nullage,columns=cat_feats,drop_first=False)\nnullage_test=nullage_test.drop(columns=['Age','Name','Ticket','PassengerId','Cabin','Survived'])\nnullage_test.head()\n","26f043f1":"X_nullage_test = nullage_test","a5b05470":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Col','Titles_ Dona','Titles_ Dr','Titles_ Lady','Titles_ Major','Titles_ Master',\n                                         'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess','block_G'])\n#X_nullage_test=X_nullage_test.drop(columns=[''])","446cad85":"dtreeReg.fit(X_nonull_df_train,y_nonull_df_train)","dc03a800":"#predict age for case 3\npredictions_nullage = dtreeReg.predict(X_nullage_test)\npredictions_nullage\n","9eb8f995":"#drop exist null column for case 3 df\nnullage.drop(columns=['Age'])\n\n#merge predicted column for case  3 df\nnullage['Age']=predictions_nullage\n\nnullage.head()","668b2bd0":"#updating df for case 3\ndf['Age']=np.where(((df['Age'].isnull()) & (df['block'].notnull())),(df['Age'].fillna(nullage['Age'])),(df['Age']))","7d8c67a7":"#updating nonull_df\nnonull_df=df[(df['Fare'].notnull()) & (df['Age'].notnull()) & (df['Embarked'].notnull()) & (df['block'].notnull()) ]\nnonull_df.count()['PassengerId']","4eefaec8":"#case 4 : missing block & age\ndf[df['block'].isnull() & df['Age'].isnull()].head()","b41d7f86":"#deal with categorical train data for case 4\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","aeff3681":"X_nonull_df_train = nonull_df_train.drop(['Age'],axis=1)\ny_nonull_df_train = nonull_df_train[['Age']]","0256fdb5":"#extract testdata for case 4.a , age\nnullageblk=df[df['block'].isnull() & df['Age'].isnull()] \ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullageblk_test = pd.get_dummies(nullageblk,columns=cat_feats,drop_first=False)\nnullageblk_test=nullageblk_test.drop(columns=['Age','Name','Ticket','PassengerId','Cabin','Survived'])\nnullageblk_test.head()\n","94c65c4a":"X_nullageblk_test = nullageblk_test","d0352c96":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Col','Titles_ Dona','Titles_ Lady','Titles_ Major',\n                                         'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess','block_G',\n                                         'block_A','block_B','block_C','block_D','block_E','block_F','CabinOccupancy'])\nX_nullageblk_test=X_nullageblk_test.drop(columns=['CabinOccupancy','Titles_ Ms'])","1b0180f7":"dtreeReg.fit(X_nonull_df_train,y_nonull_df_train)","d13df0ed":"#predict age for case 4.a\npredictions_nullageblk = dtreeReg.predict(X_nullageblk_test)\npredictions_nullageblk","a0fb94b9":"#drop exist null column for case 4.a df\nnullageblk.drop(columns=['Age'])\n\n#merge predicted column for case  4.a df\nnullageblk['Age']=predictions_nullageblk\n\nnullageblk","735eade9":"#deal with categorical train data for case 4.b, cabin occupancy\ncat_feats=['Embarked','Sex','Titles','block','Pclass','CabinOccupancy']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","883c2314":"X_nonull_df_train = nonull_df_train.drop(columns=['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6'],axis=1)\ny_nonull_df_train = nonull_df_train[['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6']]","6b2659ee":"#extract test data for case 4.b , cabin occ\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullageblk_test = pd.get_dummies(nullageblk,columns=cat_feats,drop_first=False)\nnullageblk_test=nullageblk_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullageblk_test.head()\n","8e9f5f26":"X_nullageblk_test = nullageblk_test","d12438e0":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Col','Titles_ Dona','Titles_ Lady','Titles_ Major',\n                                         'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess','block_G',\n                                         'block_A','block_B','block_C','block_D','block_E','block_F'])\nX_nullageblk_test=X_nullageblk_test.drop(columns=['Titles_ Ms','CabinOccupancy'])","b2095e28":"dtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","37fbbda7":"#predict age for case 4.b\npredictions_nullageblk = dtreeClass.predict(X_nullageblk_test)\npredictions_nullageblk","f41d9610":"predictions_nullageblk=pd.DataFrame(predictions_nullageblk, columns=['1','2','3','4','5','6'])\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['1']==1,'1','')\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['2']==1,'2',predictions_nullageblk['CabinOccupancy'])\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['3']==1,'3',predictions_nullageblk['CabinOccupancy'])\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['4']==1,'4',predictions_nullageblk['CabinOccupancy'])\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['5']==1,'5',predictions_nullageblk['CabinOccupancy'])\npredictions_nullageblk['CabinOccupancy']=np.where(predictions_nullageblk['6']==1,'6',predictions_nullageblk['CabinOccupancy'])\npredictions_nullageblk.head()","1aa4b1e9":"predictions_nullageblk=predictions_nullageblk['CabinOccupancy'].values","f674a446":"#drop exist null column for case 4.b df\nnullageblk.drop(columns=['CabinOccupancy'])\n\n#merge predicted column for case  4.b df\nnullageblk['CabinOccupancy']=predictions_nullageblk\n\nnullageblk","eca63761":"#deal with categorical data for case 4.c\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","af65a813":"X_nonull_df_train = nonull_df_train.drop(['block_A','block_B','block_C','block_D','block_E','block_F','block_G'],axis=1)\ny_nonull_df_train = nonull_df_train[['block_A','block_B','block_C','block_D','block_E','block_F','block_G']]","b2320528":"#extract test data for case 4.c , cabin block\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullageblk_test = pd.get_dummies(nullageblk,columns=cat_feats,drop_first=False)\nnullageblk_test=nullageblk_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullageblk_test.head()\n","47817965":"X_nullageblk_test=nullageblk_test","fb17bbea":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Col','Titles_ Dona','Titles_ Lady','Titles_ Major',\n                                         'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess'])\n\nX_nullageblk_test=X_nullageblk_test.drop(columns=['Titles_ Ms'])","55204e83":"dtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","50bd96df":"#predict block for case 4.c\npredictions_nullageblk = dtreeClass.predict(X_nullageblk_test)\npredictions_nullageblk","c64b53b0":"predictions_nullageblk=pd.DataFrame(predictions_nullageblk, columns=['block_A','block_B','block_C','block_D','block_E','block_F','block_G'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_A']==1,'A','')\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_B']==1,'B',predictions_nullageblk['block'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_C']==1,'C',predictions_nullageblk['block'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_D']==1,'D',predictions_nullageblk['block'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_E']==1,'E',predictions_nullageblk['block'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_F']==1,'F',predictions_nullageblk['block'])\npredictions_nullageblk['block']=np.where(predictions_nullageblk['block_G']==1,'G',predictions_nullageblk['block'])\n\npredictions_nullageblk.head()","cf1cf11a":"predictions_nullageblk=predictions_nullageblk['block'].values","4cfd0ab5":"#drop exist null column for case 4.c df\nnullageblk.drop(columns=['block'])\n\n#merge predicted column for case  4.c df\nnullageblk['block']=predictions_nullageblk\n\nnullageblk","815779b0":"#updating df for case 4 by filling empty field for age, cabin occupancy and block using predicted value for 4a, 4b & 4c\n\ndf['Age'] = df['Age'].mask(df['Age'].eq(0)).fillna(df['PassengerId'].map(nullageblk.set_index('PassengerId')['Age']))\ndf['CabinOccupancy'] = df['CabinOccupancy'].mask(df['CabinOccupancy'].eq(0)).fillna(df['PassengerId'].map(nullageblk.set_index('PassengerId')['CabinOccupancy']))\ndf['block'] = df['block'].mask(df['block'].eq(0)).fillna(df['PassengerId'].map(nullageblk.set_index('PassengerId')['block']))\n","30492900":"#check 1 sample if updated\ndf[df['PassengerId']==6]","85e4793a":"#updating nonull_df\nnonull_df=df[(df['Fare'].notnull()) & (df['Age'].notnull()) & (df['Embarked'].notnull()) & (df['block'].notnull()) ]\nnonull_df.count()['PassengerId']\n","8474eacb":"#case 5: missing block only\ndf[df['block'].isnull() & df['Age'].notnull()].head()","5b1f68f6":"#deal with categorical data for case 5.a , CabinOccupancy\ncat_feats=['Embarked','Sex','Titles','block','Pclass','CabinOccupancy']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","d2693482":"X_nonull_df_train = nonull_df_train.drop(columns=['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6'],axis=1)\ny_nonull_df_train = nonull_df_train[['CabinOccupancy_1','CabinOccupancy_2','CabinOccupancy_3','CabinOccupancy_4','CabinOccupancy_5','CabinOccupancy_6']]","489be5c4":"#extract test data for case 5.a \nnullblk=df[df['block'].isnull() & df['Age'].notnull()]\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullblk_test = pd.get_dummies(nullblk,columns=cat_feats,drop_first=False)\nnullblk_test=nullblk_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullblk_test.head()\n","c83e9ee0":"X_nullblk_test=nullblk_test","4d79b364":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Dona','Titles_ Lady','Titles_ Major',\n                                             'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess',\n                                             'block_A','block_B','block_C','block_D','block_E','block_F','block_G'])\n\nX_nullblk_test=X_nullblk_test.drop(columns=['CabinOccupancy','Titles_ Jonkheer','Titles_ Don','Titles_ Rev'])","f7a10335":"X_nonull_df_train.head(1)","57c8dc98":"X_nullblk_test.head(1)","2554ed0c":"dtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","b3855a14":"#predict occupancy for case 5a\npredictions_nullblk = dtreeClass.predict(X_nullblk_test)\npredictions_nullblk","fc9486e9":"predictions_nullblk=pd.DataFrame(predictions_nullblk, columns=['1','2','3','4','5','6'])\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['1']==1,'1','')\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['2']==1,'2',predictions_nullblk['CabinOccupancy'])\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['3']==1,'3',predictions_nullblk['CabinOccupancy'])\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['4']==1,'4',predictions_nullblk['CabinOccupancy'])\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['5']==1,'5',predictions_nullblk['CabinOccupancy'])\npredictions_nullblk['CabinOccupancy']=np.where(predictions_nullblk['6']==1,'6',predictions_nullblk['CabinOccupancy'])\n\npredictions_nullblk.head()","563ed367":"predictions_nullblk=predictions_nullblk['CabinOccupancy'].values","d62278c0":"#drop exist null column for case 5.a \nnullblk.drop(columns=['CabinOccupancy'])\n\n#merge predicted column for case  5.a\nnullblk['CabinOccupancy']=predictions_nullblk\n\nnullblk","b1a334fa":"#deal with categorical train data for case 5.b\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnonull_df_train = pd.get_dummies(nonull_df,columns=cat_feats,drop_first=False)\nnonull_df_train=nonull_df_train.drop(columns=['Cabin','Name','PassengerId','Survived','Ticket'])\nnonull_df_train.head()\n","da7d91c4":"X_nonull_df_train = nonull_df_train.drop(['block_A','block_B','block_C','block_D','block_E','block_F','block_G'],axis=1)\ny_nonull_df_train = nonull_df_train[['block_A','block_B','block_C','block_D','block_E','block_F','block_G']]","3ed41898":"#test data for case 5b\ncat_feats=['Embarked','Sex','Titles','block','Pclass']\nnullblk_test = pd.get_dummies(nullblk,columns=cat_feats,drop_first=False)\nnullblk_test=nullblk_test.drop(columns=['Name','Ticket','PassengerId','Cabin','Survived'])\nnullblk_test.head()\n","1da3e761":"X_nullblk_test=nullblk_test","a6b300c8":"#drop X train and X test feature to standardize matrix size\n\nX_nonull_df_train=X_nonull_df_train.drop(columns=['Titles_ Capt','Titles_ Dona','Titles_ Lady','Titles_ Major',\n                                             'Titles_ Mlle','Titles_ Mme','Titles_ Sir','Titles_ the Countess'])\n\nX_nullblk_test=X_nullblk_test.drop(columns=['Titles_ Jonkheer','Titles_ Don','Titles_ Rev'])","6e94f7d7":"dtreeClass.fit(X_nonull_df_train,y_nonull_df_train)","e1dafb9f":"#predict block for case 5.b\npredictions_nullblk = dtreeClass.predict(X_nullblk_test)\npredictions_nullblk","fecdb56a":"predictions_nullblk=pd.DataFrame(predictions_nullblk, columns=['block_A','block_B','block_C','block_D','block_E','block_F','block_G'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_A']==1,'A','')\npredictions_nullblk['block']=np.where(predictions_nullblk['block_B']==1,'B',predictions_nullblk['block'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_C']==1,'C',predictions_nullblk['block'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_D']==1,'D',predictions_nullblk['block'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_E']==1,'E',predictions_nullblk['block'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_F']==1,'F',predictions_nullblk['block'])\npredictions_nullblk['block']=np.where(predictions_nullblk['block_G']==1,'G',predictions_nullblk['block'])\n\npredictions_nullblk.head()","c81ef83e":"predictions_nullblk=predictions_nullblk['block'].values","13a787c8":"#drop exist null column for case 5b \nnullblk.drop(columns=['block'])\n\n#merge predicted column for case  5b\nnullblk['block']=predictions_nullblk\n\nnullblk","253fa5de":"#updating df for case 5 by filling empty field for cabin occupancy and block using predicted value for 5a, 5b\n\ndf['CabinOccupancy'] = df['CabinOccupancy'].mask(df['CabinOccupancy'].eq(0)).fillna(df['PassengerId'].map(nullblk.set_index('PassengerId')['CabinOccupancy']))\ndf['block'] = df['block'].mask(df['block'].eq(0)).fillna(df['PassengerId'].map(nullblk.set_index('PassengerId')['block']))\n","d256c151":"#check 1 sample if updated\ndf[df['PassengerId']==9]","a17ddc2d":"#check df for nan value on important fields\n\ndf.info()","196e48b8":"train.info()","0e593ccd":"#updating empty train dataset for age, cabin occupancy and block using df\n\ntrain['Age'] = train['Age'].mask(train['Age'].eq(0)).fillna(train['PassengerId'].map(df.set_index('PassengerId')['Age']))\ntrain['Embarked'] = train['Embarked'].mask(train['Embarked'].eq(0)).fillna(train['PassengerId'].map(df.set_index('PassengerId')['Embarked']))\n\ntrain=pd.merge(train,df[['PassengerId','CabinOccupancy','block','Titles']],how='left',on='PassengerId')","580819ae":"train.info()","ec81973f":"#observed survived and association with other category , also use Cramer's for numerical indication\n\nfig, axes = plt.subplots(figsize=(20,15),nrows=2,ncols=3)\n\ntrain.groupby(['Survived','Sex']).size().unstack().plot(ax=axes[0,0],kind='bar', stacked=True)\ntrain.groupby(['Survived','Pclass']).size().unstack().plot(ax=axes[0,1],kind='bar', stacked=True)\ntrain.groupby(['Survived','block']).size().unstack().plot(ax=axes[0,2],kind='bar', stacked=True)\ntrain.groupby(['Survived','Embarked']).size().unstack().plot(ax=axes[1,0],kind='bar', stacked=True)\ntrain.groupby(['Survived','Titles']).size().unstack().plot(ax=axes[1,1],kind='bar', stacked=True)\ntrain.groupby(['Survived','CabinOccupancy']).size().unstack().plot(ax=axes[1,2],kind='bar', stacked=True)","c73fd788":"import scipy\nimport scipy.stats as ss #for cramer's v function on categorical correlation\nfrom scipy.stats import pearsonr #categorical correlation\nfrom scipy import stats #categorical - numerical correlation Point Biserial\n","99ee2e54":"#source function from https:\/\/stackoverflow.com\/questions\/46498455\/categorical-features-correlation\ndef cramers_v(confusion_matrix):\n    \"\"\" calculate Cramers V statistic for categorial-categorial association.\n        uses correction from Bergsma and Wicher,\n        Journal of the Korean Statistical Society 42 (2013): 323-328\n    \"\"\"\n    chi2 = ss.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum()\n    phi2 = chi2 \/ n\n    r, k = confusion_matrix.shape\n    phi2corr = max(0, phi2 - ((k-1)*(r-1))\/(n-1))\n    rcorr = r - ((r-1)**2)\/(n-1)\n    kcorr = k - ((k-1)**2)\/(n-1)\n    return np.sqrt(phi2corr \/ min((kcorr-1), (rcorr-1)))","ed13e500":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"Sex\"]).as_matrix()\ncramers_v(confusion_matrix)","159a21d4":"scipy.stats.spearmanr(train[\"Survived\"], train[\"Sex\"]) #compare result with spearman method","e53d4d01":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"Pclass\"]).as_matrix()\ncramers_v(confusion_matrix)","b4dd30e7":"scipy.stats.spearmanr(train[\"Survived\"], train[\"Pclass\"]) #compare result with spearman method","c7c60eef":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"block\"]).as_matrix()\ncramers_v(confusion_matrix)","b07d3825":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"Embarked\"]).as_matrix()\ncramers_v(confusion_matrix)","19403947":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"Titles\"]).as_matrix()\ncramers_v(confusion_matrix)","9cf58522":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"CabinOccupancy\"]).as_matrix()\ncramers_v(confusion_matrix)","0020eb51":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"SibSp\"]).as_matrix()\ncramers_v(confusion_matrix)","64d80b4f":"confusion_matrix = pd.crosstab(train[\"Survived\"], train[\"Parch\"]).as_matrix()\ncramers_v(confusion_matrix)","33f93181":"scipy.stats.pointbiserialr(train[\"Survived\"], train[\"Age\"]) #correlation between categorical and conti value","c6f78862":"scipy.stats.pointbiserialr(train[\"Survived\"], train[\"Fare\"]) #correlation between categorical and conti value","575c9e75":"#drop features not require for ML\ntrain_=train.drop(columns=['PassengerId','Name','Ticket','Cabin',\n                           'Fare','Age','Parch','SibSp','CabinOccupancy',\n                          'Embarked'])\ntrain_.info()","5f7e042a":"cat_feats=['Sex','block','Titles','Pclass']","a96ed338":"#deal with categorical train data\ntrain_ = pd.get_dummies(train_,columns=cat_feats,drop_first=False)","e7784e70":"test.info()","d7cf2822":"#updating empty test dataset for age, cabin occupancy and block using df\n\ntest['Age'] = test['Age'].mask(test['Age'].eq(0)).fillna(test['PassengerId'].map(df.set_index('PassengerId')['Age']))\ntest['Fare'] = test['Fare'].mask(test['Fare'].eq(0)).fillna(test['PassengerId'].map(df.set_index('PassengerId')['Fare']))\n\ntest=pd.merge(test,df[['PassengerId','CabinOccupancy','block','Titles']],how='left',on='PassengerId')\ntest.info()","58294df7":"#drop features not require for ML\ntest_=test.drop(columns=['PassengerId','Name','Ticket','Cabin',\n                           'Fare','Age','Parch','SibSp','CabinOccupancy',\n                          'Embarked'])\ntest_.info()","87c72fb4":"#deal with categorical test data\ntest_ = pd.get_dummies(test_,columns=cat_feats,drop_first=False)","fc4fdeba":"X_train = train_.drop('Survived',axis=1)\ny_train = train_['Survived']\n","7524270d":"X_train.head(1)","921c3aed":"X_test=test_","027a45ea":"X_test.head(1)","305c7f5a":"#drop X train and X test feature to standardize matrix size\n\nX_train=X_train.drop(columns=['Titles_ the Countess','Titles_ Sir','Titles_ Mme',\n                              'Titles_ Mlle','Titles_ Major','Titles_ Lady','Titles_ Jonkheer',\n                             'Titles_ Don','Titles_ Capt'])\n\nX_test=X_test.drop(columns=['Titles_ Dona'])","eec921d2":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)","854a9014":"predictions_dtree = dtree.predict(X_test)","5aa200b1":"predictions_dtree","7a276516":"#load y_test to observed accuracy\ny_test=gender_submission['Survived'].values","8bc97180":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions_dtree))","81b3f487":"print(confusion_matrix(y_test,predictions_dtree))","4a6464bc":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=300)\nrfc.fit(X_train,y_train)","e4db5d4e":"predictions_rfc = rfc.predict(X_test)","978ea90c":"predictions_rfc","b4ff66f9":"print(classification_report(y_test,predictions_rfc))","ce67cb0c":"print(confusion_matrix(y_test,predictions_rfc))","86c15649":"#merge predicted column in test data\ntest['Survived']=predictions_rfc\n\ntest.head()","cb33695c":"predictions=test[['PassengerId','Survived']]","d255a8b4":"predictions.to_csv('output.csv', index=False)","576370fa":"**No indication of correlation between age and fare, therefore name titles and age to be observed**","d3f7ee20":"**The above indicate a total of 186 unique cabin within the dataframe**","6b8e562a":"# Data Cleaning","11885bea":"## Case 5 : Missing Block & Cabin Occupancy","ac894748":"## Training Random Forest Model","e66d669f":"**There are total number of 186 cabin within the dataframe. Cabin occupancy category (1,2,3,4,5,6) to be tagged to the dataframe**","2112a936":"# Prepare Train & Test Data","d2ec0ade":"# Source Data Loading","3b12df87":"## Evaluate Random Forest Model","464a0d41":"**Methodology of prediction for columns with empty value is crucial for high accuracy** ","a600582c":"## Case 1 : Missing Fare,Block & Cabin Occupancy","2f57387b":"## Case 4 : Missing Age, Block & Cabin Occupancy","df5da762":"## Case 3 : Missing Age Only","7611db5f":"# Prediction","03ca9eb5":"# Data Exploration","08ef7695":"## Feature Selection","385575bc":"## Training Decision Tree Model","d40b9f1b":"## Evaluate Decision Tree Model","735cc6d7":"## Case 2 : Missing embarked"}}