{"cell_type":{"9e0daedc":"code","3bdf07e7":"code","5247952f":"code","1bdee6d6":"code","321b7347":"code","8382e265":"code","f380b849":"code","f9e93def":"code","89621dd1":"code","13cfa693":"code","38cf8a30":"code","cc6371f4":"code","eed7423d":"code","01cf209b":"code","c9508bd8":"code","bd0bdd3a":"code","ab94edcb":"code","6adc57c5":"code","12b4fd3d":"code","69ae6ba3":"code","0c7f5889":"markdown","3defff20":"markdown","ed58b49b":"markdown","30d3ac0d":"markdown","099894e7":"markdown"},"source":{"9e0daedc":"%matplotlib inline\nimport pandas as pd\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\npd.set_option('display.max_columns', 99)\npd.set_option('display.max_rows', 99)\nimport os\nimport numpy as np\nfrom tqdm import tqdm\nimport datetime as dt","3bdf07e7":"import matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\nimport seaborn as sns\nsns.set_palette(sns.color_palette('tab20', 20))\n\nimport plotly.express as px\nimport plotly.graph_objects as go","5247952f":"def to_log(x):\n    return np.log(x + 1)\n\n\ndef to_exp(x):\n    return np.exp(x) - 1\n\nstart = dt.datetime.now()\n\nlb_periods = {\n    1: ('2020-03-26', '2020-04-23'),\n    2: ('2020-04-02', '2020-04-30'),\n    3: ('2020-04-09', '2020-05-07'),\n    4: ('2020-04-16', '2020-05-14')\n}","1bdee6d6":"def get_competition_data(week):\n    train = pd.read_csv(f'..\/input\/covid19-global-forecasting-week-{week}\/train.csv')\n    test = pd.read_csv(f'..\/input\/covid19-global-forecasting-week-{week}\/test.csv')\n    \n    if 'Province\/State' in test.columns:\n        test = test.rename(columns={'Province\/State': 'Province_State', 'Country\/Region': 'Country_Region'})\n        train = train.rename(columns={'Province\/State': 'Province_State', 'Country\/Region': 'Country_Region'})\n    train['Location'] = train['Country_Region'] + '-' + train['Province_State'].fillna('')\n    test['Location'] = test['Country_Region'] + '-' + test['Province_State'].fillna('')\n    train = train[['Date', 'Location', 'ConfirmedCases', 'Fatalities']]\n    return train, test","321b7347":"def get_actual(skip_nova_scotia=False):\n    #     actual, _ = get_competition_data(week=4)\n    actual = pd.read_csv(f'..\/input\/covid-19-forecasting-ongoing-data-updates\/train.csv')\n    actual.ConfirmedCases = actual.ConfirmedCases.clip(0, None)\n    actual.Fatalities = actual.Fatalities.clip(0, None)\n    actual['Location'] = actual['Country_Region'] + '-' + actual['Province_State'].fillna('')\n    actual = actual[['Date', 'Location', 'ConfirmedCases', 'Fatalities']]\n    if skip_nova_scotia:\n        actual = actual[actual.Location != 'Canada-Nova Scotia']\n    return actual","8382e265":"actual = get_actual(skip_nova_scotia=False)\nactual[actual.Location=='Canada-Nova Scotia'].tail(10)\nactual[actual.Location=='US-New York'].tail(40)","f380b849":"def get_submissions(week):\n    submission_path = f'..\/input\/covid19-global-forecasting-submissions\/week_{week}'\n    submission_files = os.listdir(submission_path)\n    submissions_list = []\n\n    for f in tqdm(submission_files):\n        submission = pd.read_csv(os.path.join(submission_path, f))\n        submission.insert(0, 'SubmissionId', int(f[:-4]))\n        submissions_list.append(submission)\n\n    submissions = pd.concat(submissions_list, ignore_index=True, sort=False)\n    \n    submissions = submissions[['SubmissionId', 'ForecastId', 'ConfirmedCases', 'Fatalities']]\n    \n    submissions.ConfirmedCases = submissions.ConfirmedCases.clip(0, None)\n    submissions.Fatalities = submissions.Fatalities.clip(0, None)\n    \n    _, test = get_competition_data(week)\n    submissions = submissions.merge(test, on='ForecastId', how='left')\n    \n    submissions = submissions.loc[submissions.Date >= lb_periods[week][0]]\n    \n    actual = get_actual()\n    submissions = submissions.merge(actual, how='left', on=['Date', 'Location'], suffixes=['', 'Actual'])\n    \n    return submissions","f9e93def":"# actual, _ = get_competition_data(week=4)\nactual = get_actual()\nprint(f'Actual last day: {actual.Date.max()}')\nactual.describe()\nweek = 1\nsubmissions = get_submissions(week)\n\n\nsubmissions.head()\nsubmissions.shape","89621dd1":"def add_errors(submissions):\n    submissions.loc[:,'FatalitiesSLE'] = (to_log(submissions.Fatalities) - to_log(submissions.FatalitiesActual)) ** 2\n    submissions.loc[:,'ConfirmedCasesSLE'] = (to_log(submissions.ConfirmedCases) - to_log(submissions.ConfirmedCasesActual)) ** 2\n    return submissions\n\ndef calculate_lb(submissions):\n    lb = submissions[['SubmissionId', 'FatalitiesSLE', 'ConfirmedCasesSLE']].groupby('SubmissionId').mean().reset_index()\n    lb.loc[:, 'FatalatiesRMSLE'] = np.sqrt(lb['FatalitiesSLE'])\n    lb.loc[:, 'ConfirmedCasesRMSLE'] = np.sqrt(lb['ConfirmedCasesSLE'])\n    lb.loc[:, 'RMSLE'] = (lb['FatalatiesRMSLE'] + lb['ConfirmedCasesRMSLE']) \/ 2.0\n    lb = lb.sort_values(by='RMSLE')\n    lb['Rank'] = np.arange(len(lb))\n    return lb","13cfa693":"submissions = add_errors(submissions)\n\nlb = calculate_lb(submissions)\nsubmissions = submissions.merge(lb[['SubmissionId', 'RMSLE', 'Rank']], on='SubmissionId')\nsubmissions.head()\nlb.head()","38cf8a30":"def get_ensemble(submissions, k=10):\n    submissions['LogCC'] = to_log(submissions.ConfirmedCases)\n    submissions['LogF'] = to_log(submissions.Fatalities)\n\n    ensemble = submissions[submissions.Rank < k].groupby(['Date', 'Location'])[['LogCC', 'LogF']].mean()\n    ensemble['ConfirmedCases'] = to_exp(ensemble.LogCC)\n    ensemble['Fatalities'] = to_exp(ensemble.LogF)\n    ensemble = ensemble.reset_index()\n\n    ensemble = ensemble.merge(actual, how='left', on=['Date', 'Location'], suffixes=['', 'Actual'])\n    ensemble = add_errors(ensemble)\n    return ensemble","cc6371f4":"def calculate_lb_and_ensemble(week, top_ranks=10):\n    submissions = get_submissions(week)\n    submissions = add_errors(submissions)\n\n    lb = calculate_lb(submissions)\n    submissions = submissions.merge(lb[['SubmissionId', 'RMSLE', 'Rank']], on='SubmissionId')\n\n    ens = get_ensemble(submissions, k=10)\n    np.sqrt((ens.FatalitiesSLE.mean() + ens.ConfirmedCasesSLE.mean() ) \/ 2.0)\n\n    daily_error = submissions[submissions.Rank < top_ranks].groupby(['SubmissionId', 'Date']).mean().reset_index()\n    daily_error['Daily RMSLE'] = np.sqrt(0.5 * daily_error.FatalitiesSLE + 0.5 * daily_error.ConfirmedCasesSLE)\n    daily_error['LB Score'] = '#' + daily_error.Rank.astype(str) + ' - ' + daily_error.RMSLE.round(5).astype(str) + ' - ' + daily_error.SubmissionId.astype(str)\n    daily_error = daily_error.sort_values(by=['Rank', 'Date'])\n    fig = px.line(daily_error, x='Date', y='Daily RMSLE', color='LB Score')\n    _ = fig.update_layout(\n        title_text=f'COVID-19 Daily Prediction Error (Week {week})'\n    )\n\n    return submissions, lb, ens, daily_error, fig\n    ","eed7423d":"week = 1\nsubmissions, lb, ens1, daily_error, fig = calculate_lb_and_ensemble(week)\nlb.head()\nfig.show()","01cf209b":"week = 2\nsubmissions, lb, ens2, daily_error, fig = calculate_lb_and_ensemble(week)\nlb.head()\nfig.show()","c9508bd8":"week = 3\nsubmissions, lb, ens3, daily_error, fig = calculate_lb_and_ensemble(week)\nlb.head()\nfig.show()","bd0bdd3a":"week = 4\nsubmissions, lb, ens4, daily_error, fig = calculate_lb_and_ensemble(week, top_ranks=16)\nlb.head()\nfig.show()","ab94edcb":"ens1['Week'] = 1\nens2['Week'] = 2\nens3['Week'] = 3\nens4['Week'] = 4\n\nens1['Days'] = (pd.to_datetime(ens1.Date) - pd.to_datetime(ens1.Date).min()).dt.days\nens2['Days'] = (pd.to_datetime(ens2.Date) - pd.to_datetime(ens2.Date).min()).dt.days\nens3['Days'] = (pd.to_datetime(ens3.Date) - pd.to_datetime(ens3.Date).min()).dt.days\nens4['Days'] = (pd.to_datetime(ens4.Date) - pd.to_datetime(ens4.Date).min()).dt.days\nensembles = pd.concat([ens1, ens2, ens3, ens4])\n\ndaily_error = ensembles.groupby(['Week', 'Date']).mean().reset_index()\ndaily_error['Daily RMSLE'] = np.sqrt(0.5 * daily_error.FatalitiesSLE + 0.5 * daily_error.ConfirmedCasesSLE)\n\nfig = px.line(daily_error, x='Date', y='Daily RMSLE', color='Week')\n_ = fig.update_layout(\n    title_text=f'COVID-19 Ensemble Daily Prediction Error'\n)\nfig.show()","6adc57c5":"fig = px.line(daily_error, x='Days', y='Daily RMSLE', color='Week')\n_ = fig.update_layout(\n    title_text=f'COVID-19 Ensemble Daily Prediction Error',\n    width = 1600,\n    height = 800,\n)\nfig.show()","12b4fd3d":"'Difficult Locations'\nensembles.groupby(['Week', 'Location']).mean().reset_index().sort_values(by='ConfirmedCasesSLE', ascending=False).head(10)\n'Easiest Locations'\nensembles.groupby(['Week', 'Location']).mean().reset_index().sort_values(by='ConfirmedCasesSLE', ascending=False).dropna().tail(10)","69ae6ba3":"end = dt.datetime.now()\nprint('Finished', end, (end - start).seconds, 's')","0c7f5889":"# Week 2 Top Submissions","3defff20":"# Week 4 Top Submissions","ed58b49b":"# Week 3 Top Submissions","30d3ac0d":"# Ensemble Performance","099894e7":"# Week 1 Top Submissions"}}