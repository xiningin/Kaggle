{"cell_type":{"2a1dad5d":"code","0ffcbd46":"code","54c3ceb2":"code","c5f205a6":"code","db92fe30":"code","6d69509d":"code","33a456de":"code","288908a5":"code","57692aac":"code","e81cf12f":"code","01d88d5c":"code","9e9996fb":"code","8d545aed":"code","19855f37":"code","959d0b8e":"code","a2dcb499":"markdown","d7146dd6":"markdown","6da4d35b":"markdown","6e088234":"markdown","124a66f7":"markdown","1891ad26":"markdown"},"source":{"2a1dad5d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ffcbd46":"from matplotlib import pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nimport graphviz","54c3ceb2":"data = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\ndata.head()","c5f205a6":"data.info()","db92fe30":"# check missing value\ndata.isnull().sum()","6d69509d":"# check data inconsistency\nnon_numerical_data = ['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope']\nfor col in non_numerical_data:\n    print(col, \": \\n\\n\", data[col].unique())","33a456de":"# check duplicates\ndata.duplicated().sum()","288908a5":"encoder = LabelEncoder()\nnew_data = data.copy()\nfor col in non_numerical_data:\n    new_data[col] = encoder.fit_transform(data[col])\nnew_data.head()","57692aac":"X = new_data.drop(labels = ['HeartDisease'], axis = 1)\nX.head()","e81cf12f":"y = new_data['HeartDisease']\ny.head()","01d88d5c":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\nprint('Train Size: \\n', x_train.shape)\nprint('Test Size: \\n', x_test.shape)","9e9996fb":"dtc = DecisionTreeClassifier(criterion = 'entropy')\nmodel = dtc.fit(x_train, y_train)","8d545aed":"prediction = dtc.predict(x_test)\nprint('Accuracy: ', metrics.accuracy_score(y_test, prediction))","19855f37":"metrics.confusion_matrix(y_test, prediction)","959d0b8e":"dot_data = tree.export_graphviz(dtc,filled=True)\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph","a2dcb499":"# Import Dataset","d7146dd6":"# Split for Training and Testing","6da4d35b":"# Data Preprocessing","6e088234":"# Model - Decision Tree(Information Gain)","124a66f7":"# Required Librabries","1891ad26":"# Visualize Tree"}}