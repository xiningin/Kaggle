{"cell_type":{"5cb57c10":"code","b3a30a73":"code","55de0d07":"code","43a93528":"code","3f21189f":"code","b89f63be":"code","b714492d":"code","82e68c4c":"code","bf389cac":"code","d4a361c8":"code","eb3f7368":"code","c124e19d":"code","e007e4c0":"code","350a2a40":"code","78513b4a":"code","b8092f92":"code","a28357c1":"code","19cc88e6":"code","8bc93877":"code","e2e1de5e":"code","d5566a48":"code","51e2d6cb":"code","c5146e72":"code","ec0b857a":"code","667ee7c4":"code","48782d19":"code","63e027a7":"code","07dc3fa2":"code","1ecdcf5f":"code","febf7a9c":"code","3e8f9fd7":"code","0fb35662":"code","a93dc7df":"code","a7954e8b":"code","2a864d9c":"code","80b80736":"code","d654f97b":"code","3d5202fe":"code","a9ff7049":"code","7434ca09":"code","8ba784e4":"code","e950fc33":"code","df3b42b9":"code","a24ab82b":"code","97fe97f4":"code","e3aefdd7":"code","429d19e7":"code","0ed498e8":"code","ec86e3a5":"code","ff81c9d9":"code","19919b0a":"code","c1fc6852":"code","bf4d83b8":"code","29bb000c":"code","45a1b111":"code","b787c7c0":"code","dcae49e7":"code","7d476c9a":"code","70c0a84c":"code","7117ce5d":"code","d2fdd0b8":"code","d4b46de0":"code","493045be":"code","4fc7d360":"code","b83a90c4":"code","6cc89a0d":"code","839f6190":"code","f7794642":"code","69d83fcb":"code","1027fe30":"code","65c6dd90":"code","23ea6500":"code","ae60eb40":"code","4f53f23b":"code","dace0df9":"code","0cc5469a":"code","97f9a0ca":"code","9ca374a1":"code","654b5d8a":"code","0064700d":"code","f30bef0a":"code","0b15553e":"code","70cd6157":"code","c7a26f0d":"markdown","81e3ff8c":"markdown","5a6f7bc7":"markdown","08469643":"markdown","c9a6cc06":"markdown","4d42ecba":"markdown","daad80a7":"markdown","f4068627":"markdown","7578cd62":"markdown","0e4480c8":"markdown","6b16ad16":"markdown","9ae9efc3":"markdown","85ab5b29":"markdown","5eb0212f":"markdown","86480635":"markdown","ebf6f06a":"markdown","72d95a41":"markdown","b5d45d62":"markdown","053067b1":"markdown","eab7f14d":"markdown","648c831e":"markdown"},"source":{"5cb57c10":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator \nplt.style.use('fivethirtyeight')\n%matplotlib inline","b3a30a73":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/07-20-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/07-20-2020.csv')","55de0d07":"latest_data.head()","43a93528":"confirmed_df.head()","3f21189f":"us_medical_data.head()","b89f63be":"cols = confirmed_df.keys()","b714492d":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","82e68c4c":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\nrecovery_rate = [] \ntotal_recovered = [] \ntotal_active = [] \n\nchina_cases = [] \nitaly_cases = []\nus_cases = [] \nspain_cases = [] \nfrance_cases = [] \ngermany_cases = [] \nuk_cases = [] \nrussia_cases = [] \nbrazil_cases = []\nindia_cases = []\nperu_cases = [] \n\nchina_deaths = [] \nitaly_deaths = []\nus_deaths = [] \nspain_deaths = [] \nfrance_deaths = [] \ngermany_deaths = [] \nuk_deaths = [] \nrussia_deaths = []\nbrazil_deaths = [] \nindia_deaths = []\nperu_deaths = []\n\nchina_recoveries = [] \nitaly_recoveries = []\nus_recoveries = [] \nspain_recoveries = [] \nfrance_recoveries = [] \ngermany_recoveries = [] \nuk_recoveries = [] \nrussia_recoveries = [] \nbrazil_recoveries = [] \nindia_recoveries = [] \nperu_recoveries = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    \n    # confirmed, deaths, recovered, and active\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    total_recovered.append(recovered_sum)\n    total_active.append(confirmed_sum-death_sum-recovered_sum)\n    \n    # calculate rates\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n    # case studies \n    china_cases.append(confirmed_df[confirmed_df['Country\/Region']=='China'][i].sum())\n    italy_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Italy'][i].sum())\n    us_cases.append(confirmed_df[confirmed_df['Country\/Region']=='US'][i].sum())\n    spain_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Spain'][i].sum())\n    france_cases.append(confirmed_df[confirmed_df['Country\/Region']=='France'][i].sum())\n    germany_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Germany'][i].sum())\n    uk_cases.append(confirmed_df[confirmed_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Russia'][i].sum())\n    brazil_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Brazil'][i].sum())\n    india_cases.append(confirmed_df[confirmed_df['Country\/Region']=='India'][i].sum())\n    peru_cases.append(confirmed_df[confirmed_df['Country\/Region']=='Peru'][i].sum())\n    \n    # moving average for case studies \n    china_deaths.append(deaths_df[deaths_df['Country\/Region']=='China'][i].sum())\n    italy_deaths.append(deaths_df[deaths_df['Country\/Region']=='Italy'][i].sum())\n    us_deaths.append(deaths_df[deaths_df['Country\/Region']=='US'][i].sum())\n    spain_deaths.append(deaths_df[deaths_df['Country\/Region']=='Spain'][i].sum())\n    france_deaths.append(deaths_df[deaths_df['Country\/Region']=='France'][i].sum())\n    germany_deaths.append(deaths_df[deaths_df['Country\/Region']=='Germany'][i].sum())\n    uk_deaths.append(deaths_df[deaths_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_deaths.append(deaths_df[deaths_df['Country\/Region']=='Russia'][i].sum())\n    brazil_deaths.append(deaths_df[deaths_df['Country\/Region']=='Brazil'][i].sum())\n    india_deaths.append(deaths_df[deaths_df['Country\/Region']=='India'][i].sum())\n    peru_deaths.append(deaths_df[deaths_df['Country\/Region']=='Peru'][i].sum())\n    \n    china_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='China'][i].sum())\n    italy_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Italy'][i].sum())\n    us_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='US'][i].sum())\n    spain_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Spain'][i].sum())\n    france_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='France'][i].sum())\n    germany_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Germany'][i].sum())\n    uk_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='United Kingdom'][i].sum())\n    russia_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Russia'][i].sum())\n    brazil_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Brazil'][i].sum())\n    india_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='India'][i].sum())\n    peru_recoveries.append(recoveries_df[recoveries_df['Country\/Region']=='Peru'][i].sum())","bf389cac":"def daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n\ndef moving_average(data, window_size):\n    moving_average = []\n    for i in range(len(data)):\n        if i + window_size < len(data):\n            moving_average.append(np.mean(data[i:i+window_size]))\n        else:\n            moving_average.append(np.mean(data[i:len(data)]))\n    return moving_average\n\n# window size\nwindow = 14\n\n# confirmed cases\nworld_daily_increase = daily_increase(world_cases)\nworld_confirmed_avg= moving_average(world_cases, window)\nworld_daily_increase_avg = moving_average(world_daily_increase, window)\n\nchina_daily_increase = daily_increase(china_cases)\nitaly_daily_increase = daily_increase(italy_cases)\nus_daily_increase = daily_increase(us_cases)\nspain_daily_increase = daily_increase(spain_cases)\nfrance_daily_increase = daily_increase(france_cases)\ngermany_daily_increase = daily_increase(germany_cases)\nuk_daily_increase = daily_increase(uk_cases)\nrussia_daily_increase = daily_increase(russia_cases)\nbrazil_daily_increase = daily_increase(brazil_cases)\nindia_daily_increase = daily_increase(india_cases)\nperu_daily_increase = daily_increase(peru_cases)\n\n# deaths\nworld_daily_death = daily_increase(total_deaths)\nworld_death_avg = moving_average(total_deaths, window)\nworld_daily_death_avg = moving_average(world_daily_death, window)\n\nchina_daily_death = daily_increase(china_deaths)\nitaly_daily_death = daily_increase(italy_deaths)\nus_daily_death = daily_increase(us_deaths)\nspain_daily_death = daily_increase(spain_deaths)\nfrance_daily_death = daily_increase(france_deaths)\ngermany_daily_death = daily_increase(germany_deaths)\nuk_daily_death = daily_increase(uk_deaths)\nrussia_daily_death = daily_increase(russia_deaths)\nbrazil_daily_death = daily_increase(brazil_deaths)\nindia_daily_death = daily_increase(india_deaths)\nperu_daily_death = daily_increase(peru_deaths)\n\n\n# recoveries\nworld_daily_recovery = daily_increase(total_recovered)\nworld_recovery_avg = moving_average(total_recovered, window)\nworld_daily_recovery_avg = moving_average(world_daily_recovery, window)\n\nchina_daily_recovery = daily_increase(china_recoveries)\nitaly_daily_recovery = daily_increase(italy_recoveries)\nus_daily_recovery = daily_increase(us_recoveries)\nspain_daily_recovery = daily_increase(spain_recoveries)\nfrance_daily_recovery = daily_increase(france_recoveries)\ngermany_daily_recovery = daily_increase(germany_recoveries)\nuk_daily_recovery = daily_increase(uk_recoveries)\nrussia_daily_recovery = daily_increase(russia_recoveries)\nbrazil_daily_recovery = daily_increase(brazil_recoveries)\nindia_daily_recovery = daily_increase(india_recoveries)\nperu_daily_recovery = daily_increase(peru_recoveries)\n\n# active \nworld_active_avg = moving_average(total_active, window)","d4a361c8":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","eb3f7368":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","c124e19d":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","e007e4c0":"# slightly modify the data to fit the model better (regression models cannot pick the pattern)\nX_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22[50:], world_cases[50:], test_size=0.12, shuffle=False) ","350a2a40":"# # use this to find the optimal parameters for SVR\n# c = [0.01, 0.1, 1]\n# gamma = [0.01, 0.1, 1]\n# epsilon = [0.01, 0.1, 1]\n# shrinking = [True, False]\n# degree = [3, 4, 5]\n\n# svm_grid = {'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking, 'degree': degree}\n\n# svm = SVR(kernel='poly')\n# svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=30, verbose=1)\n# svm_search.fit(X_train_confirmed, y_train_confirmed)","78513b4a":"# svm_search.best_params_","b8092f92":"# svm_confirmed = svm_search.best_estimator_\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=3, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","a28357c1":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","19cc88e6":"# transform our data for polynomial regression\npoly = PolynomialFeatures(degree=5)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed = bayesian_poly.fit_transform(X_train_confirmed)\nbayesian_poly_X_test_confirmed = bayesian_poly.fit_transform(X_test_confirmed)\nbayesian_poly_future_forcast = bayesian_poly.fit_transform(future_forcast)","8bc93877":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","e2e1de5e":"print(linear_model.coef_)","d5566a48":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","51e2d6cb":"# bayesian ridge polynomial regression\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian = BayesianRidge(fit_intercept=False)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(bayesian_poly_X_train_confirmed, y_train_confirmed)","c5146e72":"bayesian_search.best_params_","ec0b857a":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(bayesian_poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","667ee7c4":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])","48782d19":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(adjusted_dates, world_confirmed_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['World Cases', 'Moving Average 14 Days'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_deaths)\nplt.plot(adjusted_dates, world_death_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['World Deaths', 'Moving Average 14 Days'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_recovered)\nplt.plot(adjusted_dates, world_recovery_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Recoveries Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['World Recoveries', 'Moving Average 14 Days'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_active)\nplt.plot(adjusted_dates, world_active_avg, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Active Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Active Cases', size=30)\nplt.legend(['World Active Cases', 'Moving Average 14 Days'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","63e027a7":"plt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_increase)\nplt.plot(adjusted_dates, world_daily_increase_avg, color='orange')\nplt.title('World Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average 14 Days', 'World Daily Increase in COVID-19 Cases'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_death)\nplt.plot(adjusted_dates, world_daily_death_avg, color='orange')\nplt.title('World Daily Increases in Confirmed Deaths', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average 14 Days', 'World Daily Increase in COVID-19 Deaths'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.bar(adjusted_dates, world_daily_recovery)\nplt.plot(adjusted_dates, world_daily_recovery_avg, color='orange')\nplt.title('World Daily Increases in Confirmed Recoveries', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Moving Average 14 Days', 'World Daily Increase in COVID-19 Recoveries'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","07dc3fa2":"plt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(world_cases))\nplt.title('Log of # of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(total_deaths))\nplt.title('Log of # of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, np.log10(total_recovered))\nplt.title('Log of # of Coronavirus Recoveries Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","1ecdcf5f":"def country_plot(x, y1, y2, y3, y4, country):\n    # window is set as 14 in in the beginning of the notebook \n    confirmed_avg = moving_average(y1, window)\n    confirmed_increase_avg = moving_average(y2, window)\n    death_increase_avg = moving_average(y3, window)\n    recovery_increase_avg = moving_average(y4, window)\n    \n    plt.figure(figsize=(16, 10))\n    plt.plot(x, y1)\n    plt.plot(x, confirmed_avg, color='red')\n    plt.legend(['{} Confirmed Cases'.format(country), 'Moving Average 14 Days'], prop={'size': 20})\n    plt.title('{} Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y2)\n    plt.plot(x, confirmed_increase_avg, color='red')\n    plt.legend(['Moving Average 14 Days', '{} Daily Increase in Confirmed Cases'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y3)\n    plt.plot(x, death_increase_avg, color='red')\n    plt.legend(['Moving Average 14 Days', '{} Daily Increase in Confirmed Deaths'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Deaths'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n\n    plt.figure(figsize=(16, 10))\n    plt.bar(x, y4)\n    plt.plot(x, recovery_increase_avg, color='red')\n    plt.legend([ 'Moving Average 14 Days', '{} Daily Increase in Confirmed Recoveries'.format(country)], prop={'size': 20})\n    plt.title('{} Daily Increases in Recoveries'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","febf7a9c":"country_plot(adjusted_dates, china_cases, china_daily_increase, china_daily_death, china_daily_recovery, 'China')","3e8f9fd7":"country_plot(adjusted_dates, italy_cases, italy_daily_increase, italy_daily_death, italy_daily_recovery, 'Italy')","0fb35662":"country_plot(adjusted_dates, us_cases, us_daily_increase, us_daily_death, us_daily_recovery, 'United States')","a93dc7df":"country_plot(adjusted_dates, spain_cases, spain_daily_increase, spain_daily_death, spain_daily_recovery, 'Spain')","a7954e8b":"country_plot(adjusted_dates, france_cases, france_daily_increase, france_daily_death, france_daily_recovery, 'France')","2a864d9c":"country_plot(adjusted_dates, germany_cases, germany_daily_increase, germany_daily_death, germany_daily_recovery, 'Germany')","80b80736":"country_plot(adjusted_dates, uk_cases, uk_daily_increase, uk_daily_death, uk_daily_recovery, 'UK')","d654f97b":"country_plot(adjusted_dates, russia_cases, russia_daily_increase, russia_daily_death, russia_daily_recovery, 'Russia')","3d5202fe":"country_plot(adjusted_dates, brazil_cases, brazil_daily_increase, brazil_daily_death, brazil_daily_recovery, 'Brazil')","a9ff7049":"country_plot(adjusted_dates, india_cases, india_daily_increase, india_daily_death, india_daily_recovery, 'India')","7434ca09":"country_plot(adjusted_dates, peru_cases, peru_daily_increase, peru_daily_death, peru_daily_recovery, 'Peru')","8ba784e4":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, china_cases)\nplt.plot(adjusted_dates, italy_cases)\nplt.plot(adjusted_dates, us_cases)\nplt.plot(adjusted_dates, russia_cases)\nplt.plot(adjusted_dates, brazil_cases)\nplt.plot(adjusted_dates, india_cases)\n\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['China', 'Italy', 'US', 'Russia', 'Brazil', 'India'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, china_deaths)\nplt.plot(adjusted_dates, italy_deaths)\nplt.plot(adjusted_dates, us_deaths)\nplt.plot(adjusted_dates, russia_deaths)\nplt.plot(adjusted_dates, brazil_deaths)\nplt.plot(adjusted_dates, india_deaths)\n\nplt.title('# of Coronavirus Deaths', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['China', 'Italy', 'US', 'Russia', 'Brazil', 'India'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, china_recoveries)\nplt.plot(adjusted_dates, italy_recoveries)\nplt.plot(adjusted_dates, us_recoveries)\nplt.plot(adjusted_dates, russia_recoveries)\nplt.plot(adjusted_dates, brazil_recoveries)\nplt.plot(adjusted_dates, india_recoveries)\n\nplt.title('# of Coronavirus Recoveries', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['China', 'Italy', 'US', 'Russia', 'Brazil', 'India'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","e950fc33":"def plot_predictions(x, y, pred, algo_name, color):\n    plt.figure(figsize=(16, 10))\n    plt.plot(x, y)\n    plt.plot(future_forcast, pred, linestyle='dashed', color=color)\n    plt.title('# of Coronavirus Cases Over Time', size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.legend(['Confirmed Cases', algo_name], prop={'size': 20})\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","df3b42b9":"plot_predictions(adjusted_dates, world_cases, svm_pred, 'SVM Predictions', 'purple')","a24ab82b":"plot_predictions(adjusted_dates, world_cases, linear_pred, 'Polynomial Regression Predictions', 'orange')","97fe97f4":"plot_predictions(adjusted_dates, world_cases, bayesian_pred, 'Bayesian Ridge Regression Predictions', 'green')","e3aefdd7":"# Future predictions using SVM \nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'SVM Predicted # of Confirmed Cases Worldwide': np.round(svm_pred[-10:])})\nsvm_df","429d19e7":"# Future predictions using polynomial regression\nlinear_pred = linear_pred.reshape(1,-1)[0]\nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Polynomial Predicted # of Confirmed Cases Worldwide': np.round(linear_pred[-10:])})\nsvm_df","0ed498e8":"# Future predictions using Bayesian Ridge \nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Bayesian Ridge Predicted # of Confirmed Cases Worldwide': np.round(bayesian_pred[-10:])})\nsvm_df","ec86e3a5":"mean_mortality_rate = np.mean(mortality_rate)\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Mortality Rate of Coronavirus Over Time', size=30)\nplt.legend(['mortality rate', 'y='+str(mean_mortality_rate)], prop={'size': 20})\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Mortality Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","ff81c9d9":"mean_recovery_rate = np.mean(recovery_rate)\nplt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, recovery_rate, color='blue')\nplt.axhline(y = mean_recovery_rate,linestyle='--', color='black')\nplt.title('Recovery Rate of Coronavirus Over Time', size=30)\nplt.legend(['recovery rate', 'y='+str(mean_recovery_rate)], prop={'size': 20})\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('Recovery Rate', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","19919b0a":"plt.figure(figsize=(16, 10))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","c1fc6852":"plt.figure(figsize=(16, 10))\nplt.plot(total_recovered, total_deaths)\nplt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)\nplt.xlabel('# of Coronavirus Recoveries', size=30)\nplt.ylabel('# of Coronavirus Deaths', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","bf4d83b8":"unique_countries =  list(latest_data['Country_Region'].unique())","29bb000c":"country_confirmed_cases = []\ncountry_death_cases = [] \ncountry_active_cases = []\ncountry_recovery_cases = []\ncountry_mortality_rate = [] \n\nno_cases = []\nfor i in unique_countries:\n    cases = latest_data[latest_data['Country_Region']==i]['Confirmed'].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \n# sort countries by the number of confirmed cases\nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_data[latest_data['Country_Region']==unique_countries[i]]['Confirmed'].sum()\n    country_death_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Deaths'].sum())\n    country_recovery_cases.append(latest_data[latest_data['Country_Region']==unique_countries[i]]['Recovered'].sum())\n    country_active_cases.append(country_confirmed_cases[i] - country_death_cases[i] - country_recovery_cases[i])\n    country_mortality_rate.append(country_death_cases[i]\/country_confirmed_cases[i])","45a1b111":"country_df = pd.DataFrame({'Country Name': unique_countries, 'Number of Confirmed Cases': country_confirmed_cases,\n                          'Number of Deaths': country_death_cases, 'Number of Recoveries' : country_recovery_cases, \n                          'Number of Active Cases' : country_active_cases,\n                          'Mortality Rate': country_mortality_rate})\n# number of cases per country\/region\n\ncountry_df.style.background_gradient(cmap='Greens')","b787c7c0":"unique_provinces =  list(latest_data['Province_State'].unique())","dcae49e7":"province_confirmed_cases = []\nprovince_country = [] \nprovince_death_cases = [] \nprovince_recovery_cases = []\nprovince_mortality_rate = [] \n\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)\n    \nunique_provinces = [k for k, v in sorted(zip(unique_provinces, province_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_provinces)):\n    province_confirmed_cases[i] = latest_data[latest_data['Province_State']==unique_provinces[i]]['Confirmed'].sum()\n    province_country.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Country_Region'].unique()[0])\n    province_death_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Deaths'].sum())\n    province_recovery_cases.append(latest_data[latest_data['Province_State']==unique_provinces[i]]['Recovered'].sum())\n    province_mortality_rate.append(province_death_cases[i]\/province_confirmed_cases[i])","7d476c9a":"# number of cases per province\/state\/city\nprovince_df = pd.DataFrame({'Province\/State Name': unique_provinces, 'Country': province_country, 'Number of Confirmed Cases': province_confirmed_cases,\n                          'Number of Deaths': province_death_cases, 'Number of Recoveries' : province_recovery_cases,\n                          'Mortality Rate': province_mortality_rate})\n# number of cases per country\/region\n\nprovince_df.style.background_gradient(cmap='Greens')","70c0a84c":"nan_indices = [] \n\n# handle nan if there is any, it is usually a float: float('nan')\n\nfor i in range(len(unique_provinces)):\n    if type(unique_provinces[i]) == float:\n        nan_indices.append(i)\n\nunique_provinces = list(unique_provinces)\nprovince_confirmed_cases = list(province_confirmed_cases)\n\nfor i in nan_indices:\n    unique_provinces.pop(i)\n    province_confirmed_cases.pop(i)","7117ce5d":"us_confirmed = latest_data[latest_data['Country_Region']=='US']['Confirmed'].sum()\noutside_us_confirmed = np.sum(country_confirmed_cases) - us_confirmed\nplt.figure(figsize=(16, 9))\nplt.barh('United States', us_confirmed)\nplt.barh('Outside United States', outside_us_confirmed)\nplt.title('# of Coronavirus Confirmed Cases', size=20)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","d2fdd0b8":"print('Outside United States {} cases:'.format(outside_us_confirmed))\nprint('United States {} cases'.format(us_confirmed))\nprint('Total: {} cases'.format(us_confirmed+outside_us_confirmed))","d4b46de0":"# Only show 15 countries with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[15:])\n\nfor i in range(len(country_confirmed_cases[:15])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n    \nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","493045be":"def plot_bar_graphs(x, y, title):\n    plt.figure(figsize=(16, 12))\n    plt.barh(x, y)\n    plt.title(title, size=20)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","4fc7d360":"plot_bar_graphs(visual_unique_countries, visual_confirmed_cases, '# of Covid-19 Confirmed Cases in Countries\/Regions')","b83a90c4":"log_country_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases]\nplot_bar_graphs(visual_unique_countries, log_country_confirmed_cases, 'Common Log # of Coronavirus Confirmed Cases in Countries\/Regions')","6cc89a0d":"# Only show 15 provinces with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_provinces = [] \nvisual_confirmed_cases2 = []\nothers = np.sum(province_confirmed_cases[15:])\nfor i in range(len(province_confirmed_cases[:15])):\n    visual_unique_provinces.append(unique_provinces[i])\n    visual_confirmed_cases2.append(province_confirmed_cases[i])\n\nvisual_unique_provinces.append('Others')\nvisual_confirmed_cases2.append(others)","839f6190":"plot_bar_graphs(visual_unique_provinces, visual_confirmed_cases2, '# of Coronavirus Confirmed Cases in Provinces\/States')","f7794642":"log_province_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases2]\nplot_bar_graphs(visual_unique_provinces, log_province_confirmed_cases, 'Log of # of Coronavirus Confirmed Cases in Provinces\/States')","69d83fcb":"def plot_pie_charts(x, y, title):\n    c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\n    plt.figure(figsize=(20,15))\n    plt.title(title, size=20)\n    plt.pie(y, colors=c)\n    plt.legend(x, loc='best', fontsize=15)\n    plt.show()","1027fe30":"plot_pie_charts(visual_unique_countries, visual_confirmed_cases, 'Covid-19 Confirmed Cases per Country')","65c6dd90":"plot_pie_charts(visual_unique_provinces, visual_confirmed_cases2, 'Covid-19 Confirmed Cases per State\/Province\/Region')","23ea6500":"# Plotting countries with regional data using a pie chart \n\ndef plot_pie_country_with_regions(country_name, title):\n    regions = list(latest_data[latest_data['Country_Region']==country_name]['Province_State'].unique())\n    confirmed_cases = []\n    no_cases = [] \n    for i in regions:\n        cases = latest_data[latest_data['Province_State']==i]['Confirmed'].sum()\n        if cases > 0:\n            confirmed_cases.append(cases)\n        else:\n            no_cases.append(i)\n\n    # remove areas with no confirmed cases\n    for i in no_cases:\n        regions.remove(i)\n\n    # only show the top 5 states\n    regions = [k for k, v in sorted(zip(regions, confirmed_cases), key=operator.itemgetter(1), reverse=True)]\n\n    for i in range(len(regions)):\n        confirmed_cases[i] = latest_data[latest_data['Province_State']==regions[i]]['Confirmed'].sum()  \n    \n    # additional province\/state will be considered \"others\"\n    \n    if(len(regions)>5):\n        regions_5 = regions[:5]\n        regions_5.append('Others')\n        confirmed_cases_5 = confirmed_cases[:5]\n        confirmed_cases_5.append(np.sum(confirmed_cases[5:]))\n        plot_pie_charts(regions_5,confirmed_cases_5, title)\n    else:\n        plot_pie_charts(regions,confirmed_cases, title)","ae60eb40":"plot_pie_country_with_regions('US', 'COVID-19 Confirmed Cases in the United States')","4f53f23b":"plot_pie_country_with_regions('China', 'COVID-19 Confirmed Cases in China')","dace0df9":"plot_pie_country_with_regions('Canada', 'COVID-19 Confirmed Cases in Canada')","0cc5469a":"plot_pie_country_with_regions('Australia', 'COVID-19 Confirmed Cases in Australia')","97f9a0ca":"plot_pie_country_with_regions('Italy', 'COVID-19 Confirmed Cases in Italy')","9ca374a1":"plot_pie_country_with_regions('Germany', 'COVID-19 Confirmed Cases in Germany')","654b5d8a":"plot_pie_country_with_regions('France', 'COVID-19 Confirmed Cases in France')","0064700d":"plot_pie_country_with_regions('Brazil', 'COVID-19 Confirmed Cases in Brazil')","f30bef0a":"plot_pie_country_with_regions('Peru', 'COVID-19 Confirmed Cases in Peru')","0b15553e":"plot_pie_country_with_regions('Mexico', 'COVID-19 Confirmed Cases in Mexico')","70cd6157":"# Replace nan with 0\nus_medical_data.fillna(value=0, inplace=True)\n\ndef plot_us_medical_data():\n    states = us_medical_data['Province_State'].unique()\n    testing_number = []\n    hospitalization_number = [] \n    testing_rate = []\n    hospitalization_rate = []\n    \n    for i in states:\n        testing_number.append(us_medical_data[us_medical_data['Province_State']==i]['People_Tested'].sum())\n        hospitalization_number.append(us_medical_data[us_medical_data['Province_State']==i]['People_Hospitalized'].sum())\n        testing_rate.append(us_medical_data[us_medical_data['Province_State']==i]['Testing_Rate'].max())\n        hospitalization_rate.append(us_medical_data[us_medical_data['Province_State']==i]['Hospitalization_Rate'].max())\n    \n    # only show the top 15 states\n    testing_states = [k for k, v in sorted(zip(states, testing_number), key=operator.itemgetter(1), reverse=True)]\n    hospitalization_states = [k for k, v in sorted(zip(states, hospitalization_number), key=operator.itemgetter(1), reverse=True)]\n    testing_rate_states = [k for k, v in sorted(zip(states, testing_rate), key=operator.itemgetter(1), reverse=True)]\n    hospitalization_rate_states = [k for k, v in sorted(zip(states, hospitalization_rate), key=operator.itemgetter(1), reverse=True)]\n    \n    for i in range(len(states)):\n        testing_number[i] = us_medical_data[us_medical_data['Province_State']==testing_states[i]]['People_Tested'].sum()\n        hospitalization_number[i] = us_medical_data[us_medical_data['Province_State']==hospitalization_states[i]]['People_Hospitalized'].sum()\n        testing_rate[i] = us_medical_data[us_medical_data['Province_State']==testing_rate_states[i]]['Testing_Rate'].sum()\n        hospitalization_rate[i] = us_medical_data[us_medical_data['Province_State']==hospitalization_rate_states[i]]['Hospitalization_Rate'].sum()\n    \n    plot_bar_graphs(testing_states[:30], testing_number[:30], 'Total Testing per State (Top 30)')\n    plot_bar_graphs(hospitalization_states[:30], hospitalization_number[:30], 'Total Hospitalization per State (Top 30)')\n    plot_bar_graphs(testing_rate_states[:30], testing_rate[:30], 'Testing Rate per 100,000 People (Top 30)')\n    plot_bar_graphs(hospitalization_rate_states[:30], hospitalization_rate[:30], 'Hospitalization Rate per State (Top 30)')\n    \nplot_us_medical_data()","c7a26f0d":"# Country Specific Graphs\n<a id='country_graphs'><\/a>","81e3ff8c":"Future forcasting","5a6f7bc7":"Convert integer into datetime for better visualization","08469643":"Mortality Rate (worldwide) **susceptible to change **","c9a6cc06":"Model for predicting # of confirmed cases. I am using support vector machine, bayesian ridge , and linear regression in this example. ","4d42ecba":"Import the data (make sure you update this on a daily basis)","daad80a7":"# Data table\n<a id='data_table'><\/a>","f4068627":"Plotting the number of deaths against the number of recoveries","7578cd62":"***Visual Representations*** (bar charts and pie charts)","0e4480c8":"\nGet all the dates for the outbreak","6b16ad16":"<font face = \"Verdana\" size =\"5\">Coronavirus is a family of viruses that are named after their spiky crown. The novel coronavirus, also known as SARS-CoV-2, is a contagious respiratory virus that first reported in Wuhan, China. On 2\/11\/2020, the World Health Organization designated the name COVID-19 for the disease caused by the novel coronavirus. This notebook aims at exploring COVID-19 through data analysis and projections.\n \n   <br><br>Data is provided by <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>Johns Hopkins University<\/a>\n   <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>WHO<\/a>\n   <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>CDC<\/a>\n   <br>Map Visualizations from  <a href='https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6'>JHU CCSE Dashboard<\/a>\n   <br>Source code is on <a href='https:\/\/github.com\/therealcyberlord'>my Github<\/a>\n   \n   <font face = \"Verdana\" size =\"4\">\n   <br>Feel free to provide me with feedbacks. \n    <br> Last update: 7\/21\/2020 12:09 PM ET\n    <br><i> New Updates: data update for 7\/20 and added moving averages for countries.<\/i>\n   <\/font>\n       <br>\n   <font face = \"Verdana\" size =\"4\"> *Prediction models are trained from a later starting date (3\/13\/2020). Therefore, earlier dates might not be accurate. <\/font>\n   <font face = \"Verdana\" size =\"1\">\n    <center><img src='https:\/\/www.statnews.com\/wp-content\/uploads\/2020\/02\/Coronavirus-CDC-645x645.jpg'>\n     Source: https:\/\/www.statnews.com\/wp-content\/uploads\/2020\/02\/Coronavirus-CDC-645x645.jpg <\/center> \n    <\/font>\n <font face = \"Verdana\" size =\"4\"> Keep strong, world! Stay safe and healthy. <\/font>\n\n<br>\n<font face = \"Verdana\" size =\"5\"> Sections <\/font>\n* <a href='#world_wide_graphs'>Exploring Global Coronavirus Cases<\/a>\n* <a href='#country_graphs'>Exploring Coronavirus Cases From Different Countries<\/a>\n* <a href='#prediction'>Worldwide Confirmed Cases Prediction<\/a>\n* <a href='#data_table'>Data Table<\/a>\n* <a href='#bar_charts'>Pie Charts<\/a>\n* <a href='#pie_charts'>Bar Charts<\/a>\n* <a href='#hospital_testing'>Hospitalization and Testing Data<\/a>","9ae9efc3":"#  Graphing the number of confirmed cases, active cases, deaths, recoveries, mortality rate (CFR), and recovery rate\n <a id='world_wide_graphs'><\/a>","85ab5b29":"Getting information about countries\/regions that have confirmed coronavirus cases","5eb0212f":"# Predictions for confirmed coronavirus cases worldwide\n<a id='prediction'><\/a>","86480635":"<a id='pie_charts'><\/a>\n# Pie Chart Visualizations for COVID-19","ebf6f06a":"Recovery Rate (worldwide) **suceptible to change **","72d95a41":"Graphing deaths against recoveries","b5d45d62":"<a id='bar_charts'><\/a>\n# Bar Chart Visualizations for COVID-19","053067b1":"Getting the latest information about provinces\/states that have confirmed coronavirus cases","eab7f14d":"<a id='hospital_testing'><\/a>\n# US Medical Data on Testing and Hosptialization","648c831e":"Getting daily increases and moving averages"}}