{"cell_type":{"4e8297e8":"code","15c55c9a":"code","c9749857":"code","cd6e69c2":"code","5d947ec3":"code","8f38ef37":"code","b2e70cad":"code","950f4edf":"code","a07e3582":"code","c5cdfe38":"code","4f4781a0":"code","6360047a":"code","325c778d":"code","eced6a8a":"code","80b0262c":"code","3e3a12a7":"code","1cc4f593":"markdown","f8ade55a":"markdown","9cdba1f6":"markdown","576dbdfd":"markdown","57294103":"markdown","8715153f":"markdown","730f1b1b":"markdown","720eb360":"markdown"},"source":{"4e8297e8":"import numpy as np\nimport pandas as pd\nimport datatable as dt\n\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler # ver 19\n\nimport gc\nimport janestreet\nimport warnings\nwarnings.filterwarnings(action='ignore')","15c55c9a":"# def reduce_memory_usage(df):\n    \n#     start_memory = df.memory_usage().sum() \/ 1024**2\n#     print(f\"Memory usage of dataframe is {start_memory} MB\")\n    \n#     for col in df.columns:\n#         col_type = df[col].dtype\n        \n#         if col_type != 'object':\n#             c_min = df[col].min()\n#             c_max = df[col].max()\n            \n#             if str(col_type)[:3] == 'int':\n#                 if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n#                     df[col] = df[col].astype(np.int8)\n#                 elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n#                     df[col] = df[col].astype(np.int16)\n#                 elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n#                     df[col] = df[col].astype(np.int32)\n#                 elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n#                     df[col] = df[col].astype(np.int64)\n            \n#             else:\n#                 if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n#                     df[col] = df[col].astype(np.float32)\n#                 else:\n#                     pass\n#         else:\n#             df[col] = df[col].astype('category')\n    \n#     end_memory = df.memory_usage().sum() \/ 1024**2\n#     print(f\"Memory usage of dataframe after reduction {end_memory} MB\")\n#     print(f\"Reduced by {100 * (start_memory - end_memory) \/ start_memory} % \")\n#     return df","c9749857":"path = '\/kaggle\/input\/jane-street-market-prediction\/'\ntrain = dt.fread(path+'train.csv')\ntrain = train.to_pandas()","cd6e69c2":"# train = reduce_memory_usage(train)\n# train.fillna(train.mean(),inplace=True)","5d947ec3":"train['resp'] = (((train['resp'].values)*train['weight']) > 0).astype(int)\ntrain['resp_1'] = (((train['resp_1'].values)*train['weight']) > 0).astype(int)\ntrain['resp_2'] = (((train['resp_2'].values)*train['weight']) > 0).astype(int)\ntrain['resp_3'] = (((train['resp_3'].values)*train['weight']) > 0).astype(int)\ntrain['resp_4'] = (((train['resp_4'].values)*train['weight']) > 0).astype(int)","8f38ef37":"#f_mean = train.mean()\nfeatures = ['feature_{}'.format(i) for i in range(0,130)]\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp']","b2e70cad":"train_df = train[train['date']>85]\n#train_df = train_df[train_df['weight'] != 0]\ntrain_data = train_df[features]\ntrain_target = np.stack([(train_df[c] > 0).astype('int') for c in resp_cols]).T\ndel train, train_df","950f4edf":"train_data.head()","a07e3582":"rb = RobustScaler().fit(train_data)\ntrain_data = pd.DataFrame(rb.transform(train_data), columns=train_data.columns)","c5cdfe38":"train_data","4f4781a0":"lgb_models = []","6360047a":"lgb_params = {\n    'n_jobs':-1,\n    'num_leaves':300,\n    'learning_rate':0.1,\n    'n_estimators':1500,\n    'objective':'binary',\n    'subsample':0.52,\n    'colsample_bytree':0.52,\n    'metric':'auc',\n    'max_bin':450,\n    'boosting': 'goss'\n}","325c778d":"for i in range(train_target.shape[1]):\n    x_tr,x_val,y_tr,y_val = train_test_split(train_data ,train_target[:,i],test_size=0.2, stratify=train_target[:,i], random_state=i)\n    lgb_clf = LGBMClassifier(**lgb_params)\n    lgb_clf.fit(x_tr, y_tr, eval_set=[(x_tr, y_tr),(x_val,y_val)], eval_metric='auc', early_stopping_rounds=100, verbose=50)\n    lgb_models.append(lgb_clf)","eced6a8a":"print('average CV score:',np.mean([model.best_score_['valid_1']['auc'] for model in lgb_models]))","80b0262c":"th = 0.5\nenv = janestreet.make_env()","3e3a12a7":"for (test_df, pred_df) in env.iter_test():\n    if test_df['weight'].item() > 0:\n        x_tt = test_df[features]\n        #x_tt.fillna(f_mean, inplace=True)\n        x_tt = pd.DataFrame(rb.transform(x_tt), columns=x_tt.columns)\n        \n        pred = np.median([model.predict_proba(x_tt)[:,1] for model in lgb_models]).T\n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","1cc4f593":"# Defining functions","f8ade55a":"references\n\nhttps:\/\/www.kaggle.com\/kamalnaithani\/lightgbm-stock-prediction-1-1","9cdba1f6":"# packages","576dbdfd":"# Submission","57294103":"# Modeling","8715153f":"# Preprocessing data","730f1b1b":"* version 12: without weight==0, fillna - None, cv: 0.6625 - time out\n* version 13: without weight==0, fillna - Mean, cv: 0.6622 - time out\n* version 15: with weight==0, fillna - None, cv: 0.6856 - time out\n* version 16: ver15 + not reduce mem, num leaves 450, n_estimators 1000, cv: 0.6764 - 5457.310\n* version 17: ver16 + num leaves 300, learning rate 0.12, cv: 0.6799 - 5510.777\n* version 18: ver17 + metric auc, max_bin 450, cv: 0.6807 - time out\n* version 20: ver18 + RobustScaler, cv: 0.6822\n* version 21: ver20 + modified params(learning rate, cs, ss), cv: 0.6865\n* version 22: ver21 + boosting 'goss'","720eb360":"# Loading files"}}