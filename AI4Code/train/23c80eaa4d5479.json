{"cell_type":{"2d80cfce":"code","ec10cbba":"code","a85c9a30":"code","3030058f":"code","b1951b27":"code","1d5d859d":"code","686ee285":"code","25a4c57b":"code","f828dfd3":"code","5f2e2586":"code","dd9511e7":"code","d84c98bb":"code","31e17ad5":"code","4b2bb1c9":"code","d5ca1d40":"code","4e4decae":"code","fbf6473f":"code","cbbad6f7":"code","c140bafb":"code","339eecf4":"code","76b3dbe4":"code","800f9151":"code","560847e8":"code","015a2ad1":"code","375e1bd0":"code","a3846f64":"code","a77c4bb5":"code","4ace9333":"code","fa9a2dd1":"code","796a7624":"code","18ee26c6":"code","4c7ac6ae":"code","d18fa62a":"code","798c3842":"markdown","61650541":"markdown","bc738162":"markdown","0c19f25c":"markdown","e6aeec10":"markdown","ba78815a":"markdown","08857d3e":"markdown","b12262fc":"markdown","430e6fad":"markdown","143b43dd":"markdown","7fd65192":"markdown","de22691a":"markdown","aa17ab0c":"markdown","f6e3ccfc":"markdown","3c5d86a2":"markdown","c07548f0":"markdown","7609753b":"markdown","570b189c":"markdown","dbe959b4":"markdown","f3c6f34a":"markdown","3de09e2f":"markdown"},"source":{"2d80cfce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec10cbba":"import matplotlib.pyplot as plt \nimport seaborn as sns\nimport sklearn\nimport xgboost as xgb\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nplt.rcParams[\"font.size\"] = 18","a85c9a30":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","3030058f":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff08\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\uff09\ntrain","b1951b27":"# \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\uff08\u7279\u5fb4\u91cf\uff09\ntest","1d5d859d":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\uff08\u76ee\u7684\u5909\u6570\u306b\u306f\u9069\u5f53\u306a\u5024\u304c\u5165\u3063\u3066\u3044\u308b\uff09\nsample_submission","686ee285":"train.info()\nprint('=' * 70)\ntest.info()","25a4c57b":"train['date_time'] = pd.to_datetime(train['date_time'], format = \"%Y-%m-%d %H:%M:%S\")\ntest['date_time'] = pd.to_datetime(test['date_time'], format= \"%Y-%m-%d %H:%M:%S\")\ntarget_name = train.columns[-3:].values # \u76ee\u7684\u5909\u6570\u540d\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\ntarget_name","f828dfd3":"def makeFeatures(df):\n    # \u6e29\u5ea6\u306en\u65e5\u524d\u3068\u306e\u5dee\u5206\n    df[\"temp-3\"] = df[\"deg_C\"] - df[\"deg_C\"].shift(periods=3, fill_value=0)\n    df[\"temp-6\"] = df[\"deg_C\"] - df[\"deg_C\"].shift(periods=6, fill_value=0)\n    df[\"temp-24\"] = df[\"deg_C\"] - df[\"deg_C\"].shift(periods=24, fill_value=0)\n    \n    # \u7d76\u5bfe\u6e7f\u5ea6\u306en\u65e5\u524d\u3068\u306e\u5dee\u5206\n    df[\"abs-3\"] = df[\"absolute_humidity\"] - df[\"absolute_humidity\"].shift(periods=3, fill_value=0)\n    df[\"abs-6\"] = df[\"absolute_humidity\"] - df[\"absolute_humidity\"].shift(periods=6, fill_value=0)\n    df[\"abs-24\"] = df[\"absolute_humidity\"] - df[\"absolute_humidity\"].shift(periods=24, fill_value=0)\n    \n    # \u76f8\u5bfe\u6e7f\u5ea6\u306en\u65e5\u524d\u3068\u306e\u5dee\u5206\n    df[\"rel-3\"] = df[\"relative_humidity\"] - df[\"relative_humidity\"].shift(periods=3, fill_value=0)\n    df[\"rel-6\"] = df[\"relative_humidity\"] - df[\"relative_humidity\"].shift(periods=6, fill_value=0)\n    df[\"rel-24\"] = df[\"relative_humidity\"] - df[\"relative_humidity\"].shift(periods=24, fill_value=0)\n    \n    # \u30bb\u30f3\u30b5\u306en\u65e5\u524d\u3068\u306e\u5dee\u5206\n    df[\"s1-3\"] = df[\"sensor_1\"] - df[\"sensor_1\"].shift(periods=3, fill_value=0)\n    df[\"s2-3\"] = df[\"sensor_2\"] - df[\"sensor_2\"].shift(periods=3, fill_value=0)\n    df[\"s3-3\"] = df[\"sensor_3\"] - df[\"sensor_3\"].shift(periods=3, fill_value=0)\n    df[\"s4-3\"] = df[\"sensor_4\"] - df[\"sensor_4\"].shift(periods=3, fill_value=0)\n    df[\"s5-3\"] = df[\"sensor_5\"] - df[\"sensor_5\"].shift(periods=3, fill_value=0)\n    df[\"s1-6\"] = df[\"sensor_1\"] - df[\"sensor_1\"].shift(periods=6, fill_value=0)\n    df[\"s2-6\"] = df[\"sensor_2\"] - df[\"sensor_2\"].shift(periods=6, fill_value=0)\n    df[\"s3-6\"] = df[\"sensor_3\"] - df[\"sensor_3\"].shift(periods=6, fill_value=0)\n    df[\"s4-6\"] = df[\"sensor_4\"] - df[\"sensor_4\"].shift(periods=6, fill_value=0)\n    df[\"s5-6\"] = df[\"sensor_5\"] - df[\"sensor_5\"].shift(periods=6, fill_value=0)\n    df[\"s1-24\"] = df[\"sensor_1\"] - df[\"sensor_1\"].shift(periods=24, fill_value=0)\n    df[\"s2-24\"] = df[\"sensor_2\"] - df[\"sensor_2\"].shift(periods=24, fill_value=0)\n    df[\"s3-24\"] = df[\"sensor_3\"] - df[\"sensor_3\"].shift(periods=24, fill_value=0)\n    df[\"s4-24\"] = df[\"sensor_4\"] - df[\"sensor_4\"].shift(periods=24, fill_value=0)\n    df[\"s5-24\"] = df[\"sensor_5\"] - df[\"sensor_5\"].shift(periods=24, fill_value=0)\n    \n    # \u30bb\u30f3\u30b5\u540c\u58eb\u306e\u5dee\u5206\n    df['S1-S2']=df['sensor_1']-df['sensor_2']\n    df['S1-S3']=df['sensor_1']-df['sensor_3']\n    df['S1-S4']=df['sensor_1']-df['sensor_4']\n    df['S1-S5']=df['sensor_1']-df['sensor_5']\n    df['S2-S3']=df['sensor_2']-df['sensor_3']\n    df['S2-S4']=df['sensor_2']-df['sensor_4']\n    df['S2-S5']=df['sensor_2']-df['sensor_5']\n    df['S3-S4']=df['sensor_3']-df['sensor_4']\n    df['S3-S5']=df['sensor_3']-df['sensor_5']\n    df['S4-S5']=df['sensor_4']-df['sensor_5']\n    \n    df[\"SMC\"] = (df[\"absolute_humidity\"] * 100) \/ df[\"relative_humidity\"]\n    \n    # \u6642\u9593\u306b\u95a2\u3059\u308b\u7279\u5fb4\u91cf\n    df[\"month\"] = df[\"date_time\"].dt.month # \u6708\n    df[\"day_of_week\"] = df[\"date_time\"].dt.dayofweek # \u66dc\u65e5\uff08\u6708\u66dc\u59cb\u307e\u308a\uff09\n    df[\"day_of_year\"] = df[\"date_time\"].dt.dayofyear # 1\u67081\u65e5\u304b\u3089\u6570\u3048\u3066\u4f55\u65e5\u76ee\u304b\n    df[\"hour\"] = df[\"date_time\"].dt.hour # \u6642\n    df[\"quarter\"] = df[\"date_time\"].dt.quarter # \u56db\u534a\u671f\n    df[\"week_of_year\"] = df[\"date_time\"].dt.isocalendar().week.astype(int) # 1\u67081\u65e5\u304b\u3089\u6570\u3048\u3066\u4f55\u9031\u76ee\u304b\n    df[\"is_sprint\"] = df[\"month\"].isin([3, 4, 5]).astype(int) # \u6625\n    df[\"is_summer\"] = df[\"month\"].isin([6, 7, 8]).astype(int) # \u590f\n    df[\"is_autumn\"] = df[\"month\"].isin([9, 10, 11]).astype(int) # \u79cb\n    df[\"is_winter\"] = df[\"month\"].isin([1, 2, 12]).astype(int) # \u51ac\n    df[\"working_hours\"] =  df[\"hour\"].isin(np.arange(8, 19, 1)).astype(int) # \u52e4\u52d9\u6642\u9593(8\u6642\uff5e19\u6642)\n    df[\"is_weekend\"] = (train[\"date_time\"].dt.dayofweek >= 5).astype(int) # \u9031\u672b\n    return df","5f2e2586":"train = makeFeatures(train)\ntest = makeFeatures(test)","dd9511e7":"train['date_time'] = train['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\ntest['date_time'] = test['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9","d84c98bb":"columns = test.columns\nX_train = train[columns].values\n\ntarget0 = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget1 = train['target_benzene'].values.reshape(-1,1)\ntarget2 = train['target_nitrogen_oxides'].values.reshape(-1,1)\ntarget = np.concatenate([target0, target1, target2], 1)\n\nX_test = test","31e17ad5":"stdscaler = StandardScaler()\nX_train_transed = stdscaler.fit_transform(X_train)\nX_test_transed = stdscaler.transform(X_test)","4b2bb1c9":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff08\u7279\u5fb4\u91cf\uff09\nX_train_transed_df = pd.DataFrame(data=X_train_transed, columns=columns)\nX_train_transed_df","d5ca1d40":"# \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\uff08\u7279\u5fb4\u91cf\uff09\nX_test_transed_df = pd.DataFrame(data=X_test_transed, columns=columns)\nX_test_transed_df","4e4decae":"# \u76ee\u7684\u5909\u6570\ntarget_df = pd.DataFrame(data=target, columns=target_name)\ntarget_df","fbf6473f":"train.info()\nprint('=' * 50)\ntest.info()","cbbad6f7":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff1a{train.shape[0]}\u884c{train.shape[1]}\u5217\")\nprint(f\"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u6570\uff1a{train.shape[0]}\u500b\")\nprint()\nprint(f\"\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\uff1a{X_train_transed.shape[0]}\u884c{X_train_transed.shape[1]}\u5217\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u6570\uff1a{X_train_transed.shape[1]}\u500b\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u540d\u524d\uff1a{columns.values}\")\nprint()\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u30c7\u30fc\u30bf\uff1a{target.shape[0]}\u884c{target.shape[1]}\u5217\")\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u6570\uff1a{target.shape[1]}\u500b\")\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u540d\u524d\uff1a{target_name}\")","c140bafb":"# \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\uff1a{test.shape[0]}\u884c{test.shape[1]}\u5217\")\nprint(f\"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u6570\uff1a{test.shape[0]}\u500b\")\nprint()\nprint(f\"\u7279\u5fb4\u30c7\u30fc\u30bf\uff1a{X_test_transed.shape[0]}\u884c{X_test_transed.shape[1]}\u5217\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u6570\uff1a{X_test_transed.shape[1]}\u500b\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u7a2e\u985e\uff1a{columns.values}\")","339eecf4":"# \u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\uff1a{sample_submission.shape[0]}\u884c{sample_submission.shape[1]}\u5217\")\nprint(f\"\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u6570\uff1a{sample_submission.shape[0]}\u500b\")","76b3dbe4":"\"\"\"feature_num = X_train_transed.shape[1]\nnrows = feature_num \/\/ 2 if feature_num % 2 == 0 else feature_num \/\/ 2 + 1\n\nplt.figure(figsize=(16, nrows * 4))\nplt.subplots_adjust(hspace=0.4)\nvalues = columns.values\nfor i, col in enumerate(values, start=1):\n    plt.subplot(nrows, 2, i)\n    plt.hist(train[col], bins=50)\n    plt.title(col)\"\"\"","800f9151":"\"\"\"feature_num = X_test_transed.shape[1]\nnrows = feature_num \/\/ 2 if feature_num % 2 == 0 else feature_num \/\/ 2 + 1\n\nplt.figure(figsize=(16, nrows * 4))\nplt.subplots_adjust(hspace=0.4)\nvalues = columns.values\nfor i, col in enumerate(values, start=1):\n    plt.subplot(nrows, 2, i)\n    plt.hist(test[col], bins=50)\n    plt.title(col)\"\"\"","560847e8":"feature_num = X_train_transed.shape[1]\nnrows = feature_num \/\/ 2 if feature_num % 2 == 0 else feature_num \/\/ 2 + 1\n\nplt.figure(figsize=(16, nrows * 4))\nplt.subplots_adjust(hspace=0.4)\nvalues = columns.values\nfor i, col in enumerate(values, start=1):\n    plt.subplot(nrows, 2, i)\n    plt.hist(train[col], bins=50, density=True)\n    plt.hist(test[col], bins=50, alpha=0.7, density=True)\n    plt.title(col)","015a2ad1":"feature_num = X_test_transed.shape[1]\nnrows = len(target_name)\n\n# \u30b0\u30e9\u30d5\u3092\u7528\u610f\nplt.figure(figsize=(16, 12))\nplt.subplots_adjust(hspace=0.4)\nfor i, col in enumerate(target_name, start=1):\n    plt.subplot(nrows, 1, i)\n    plt.hist(target_df[col], bins=50)\n    plt.title(col)","375e1bd0":"plt.figure(figsize=(18, 18)) \nsns.heatmap(pd.concat([X_train_transed_df, target_df], axis=1).corr(), square=True, vmax=1, vmin=-1, center=0, cbar_kws={\"shrink\": 0.82})","a3846f64":"boosting = [0] * 3\nfor i in range(3):\n    boosting[i] = xgb.XGBRegressor(n_estimators = 50,\n                                   eta = 0.1,\n                                   max_depth = 5, \n                                   random_state = 1,\n                                   subsample = 0.8\n                                  )","a77c4bb5":"def print_results(results):\n    print('BEST PARAMS: {}\\n'.format(results.best_params_))\n    rank = results.cv_results_['rank_test_score']\n    arg = np.argsort(rank)\n    rank = np.sort(rank)\n    means = results.cv_results_['mean_test_score'][arg]\n    stds = results.cv_results_['std_test_score'][arg]\n    params = np.array(results.cv_results_['params'])[arg]\n\n    for r, mean, std, param in zip(rank, means, stds, params):\n        print('No{} : {} (+\/-{}) for {}'.format(r, round(mean, 3), round(std * 2, 3), param))\n\ndef gridSearch(model, X_train, y_train):\n    paramters = {\n        'n_estimators': [50, 100],\n        'max_depth':[4], \n        'learning_rate': [0.3],\n        'gamma': [0.1], \n        'min_child_weight': [0.8, 1, 1.2], \n        'subsample': [0.8], \n        'colsample_bytree': [0.8],\n    }\n    \n    grid = GridSearchCV(\n        estimator = model,\n        param_grid = paramters,\n        scoring = 'neg_root_mean_squared_error',\n        cv = 5,\n        verbose = 2\n    )\n    grid.fit(X_train, y_train)\n    print_results(grid)","4ace9333":"#gridSearch(boosting[0], X_train_transed, target[:, 0])","fa9a2dd1":"for i, boost in enumerate(boosting):\n    y = target[:, i]\n    boost.fit(X_train_transed, y)","796a7624":"for i, boost in enumerate(boosting):\n    pred = boost.predict(X_test_transed)\n    sample_submission[sample_submission.columns[i + 1]] = pred\nsample_submission.head()","18ee26c6":"sample_submission.to_csv('submission.csv', index=False)","4c7ac6ae":"for i, boost in enumerate(boosting):\n    print(f'{target_name[i]} = {boost.score(X_train_transed, target[:, i])}')","d18fa62a":"plt.figure(figsize=(15, 20))\nfor i, name in enumerate(target_name):\n    plt.subplot(3, 1, i + 1)\n    plt.plot(target[2000:3000, i], label='True')\n    plt.plot(boosting[i].predict(X_train_transed)[2000:3000], label='Predict')\n    plt.title(name)\n    plt.legend(loc='upper right')","798c3842":"## \u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\uff08XGboost\uff09\u306b\u3088\u308b\u5b66\u7fd2","61650541":"\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u306b\u3088\u3063\u3066\u3001\u30b9\u30b1\u30fc\u30eb\u304c\u5168\u304f\u9055\u3046\u306e\u3067\u6a19\u6e96\u5316\u306b\u3088\u3063\u3066\u5e73\u57470\u3001\u5206\u65631\u306b\u5909\u63db\u3059\u308b\u3002  \n($\\mu$\uff1a\u5e73\u5747, $\\sigma$\uff1a\u6a19\u6e96\u504f\u5dee)\n$$z =  \\frac{x - \\mu}{\\sigma}$$","bc738162":"\u7279\u5fb4\u91cf\u306e\u4e00\u3064\u3001date_time\u3092str\u578b\uff08\u6587\u5b57\u5217\u578b\uff09\u304b\u3089datetime\u578b\u306b\u5909\u63db\u3059\u308b","0c19f25c":"## \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n","e6aeec10":"\u5b66\u7fd2\u7528\u3001\u30c6\u30b9\u30c8\u7528\u3001\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c\u8aad\u307f\u8fbc\u3080","ba78815a":"XGboost\u306e\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u3002\u305f\u3060\u3057\u3001\u76ee\u7684\u5909\u6570\u304c3\u3064\u3042\u308b\u305f\u30813\u3064\u306e\u30e2\u30c7\u30eb\u3092\u751f\u6210\u3059\u308b\u3002","08857d3e":"\u7279\u5fb4\u91cf\u6bce\u306e\u5206\u5e03\u3092\u8abf\u3079\u308b\u305f\u3081\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3059\u308b\u3002  \n\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u9752\u8272\uff08\u6fc3\u3044\uff09\u3001\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u30aa\u30ec\u30f3\u30b8\uff08\u8584\u3044\uff09\u3067\u8868\u3057\u3066\u3044\u308b\u3002","b12262fc":"\u5404\u7279\u5fb4\u91cf\u3001\u76ee\u7684\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u8abf\u3079\u308b\u305f\u3081\u306b\u3001\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u8868\u793a\u3059\u308b\u3002  \n\u767d\u8272\u306b\u8fd1\u3044\u307b\u3069\u6b63\u3084\u8ca0\u306e\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u304f\u3001\u9ed2\u8272\u306b\u8fd1\u3044\u307b\u3069\u76f8\u95a2\u95a2\u4fc2\u304c\u5f31\u3044","430e6fad":"## \u5b66\u7fd2\u7d50\u679c","143b43dd":"XGboost\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u3081\u308b\u305f\u3081\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u884c\u3044\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u3002\u307e\u305f\u30015\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u904e\u5b66\u7fd2\u3092\u9632\u304e\u6b63\u3057\u304f\u7cbe\u5ea6\u3092\u8a55\u4fa1\u3059\u308b\u3002","7fd65192":"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306f\u76ee\u7684\u5909\u6570\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3059\u308b\u3002","de22691a":"\u5b66\u7fd2\u3057\u305fXGboost\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u4e88\u6e2c\u3059\u308b\u3002","aa17ab0c":"datetime\u578b\u306e\u7279\u5fb4\u91cf\u3092\u5b66\u7fd2\u306b\u7528\u3044\u308b\u305f\u3081\u3001int\u578b\uff08\u6574\u6570\u578b\uff09\u306b\u5909\u63db\u3059\u308b","f6e3ccfc":"\u4e0e\u3048\u3089\u308c\u305f\u7279\u5fb4\u91cf\u304b\u3089\u3001\u65b0\u305f\u306b\u3055\u307e\u3056\u307e\u306a\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3059\u308b","3c5d86a2":"\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b","c07548f0":"## \u524d\u51e6\u7406\u5f8c\u306e\u30c7\u30fc\u30bf\u78ba\u8a8d","7609753b":"\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u8abf\u3079\u308b\u305f\u3081\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u751f\u6210\u3059\u308b\u3002","570b189c":"\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6c17\u8c61\u30c7\u30fc\u30bf\u304b\u3089\u3001carbon monoxide\uff08\u4e00\u9178\u5316\u70ad\u7d20\uff09\u3001benzene\uff08\u30d9\u30f3\u30bc\u30f3\uff09\u3001nitrogen oxides\uff08\u7a92\u7d20\u9178\u5316\u7269\uff09\u306e3\u3064\u306e\u91cf\u3092\u4e88\u6e2c\u3059\u308b\u3002","dbe959b4":"\u5b9f\u969b\u306bXGboost\u3067\u5b66\u7fd2\u3059\u308b\u3002","f3c6f34a":"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306f3\u3064\u306e\u9805\u76ee\uff08target_carbon_monoxide, target_benzene, target_nitrogen_oxides\uff09\u304c\u76ee\u7684\u5909\u6570\u3068\u306a\u3063\u3066\u3044\u3066\u3001\u306e\u3053\u308a\u304c\u7279\u5fb4\u91cf\uff08\u8aac\u660e\u5909\u6570\uff09\u3068\u306a\u3063\u3066\u3044\u308b\u3002  \n\u307e\u305f\u3001\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u304b\u30893\u3064\u306e\u76ee\u7684\u5909\u6570\u3092\u9664\u3044\u305f\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002  \n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\n\n* \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u304b\u3089\u7279\u5fb4\u91cf\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\uff08X_train\uff09\n* \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u304b\u3089\u76ee\u7684\u5909\u6570\u3060\u3051\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\uff08target\uff09\n* \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\uff08X_test\uff09\n\n\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002","3de09e2f":"## \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d"}}