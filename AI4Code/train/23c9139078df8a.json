{"cell_type":{"5e967b58":"code","7472afa6":"code","e5df6c7e":"code","5c34c06f":"code","bec2faf2":"code","e53c7c0f":"code","a04d5632":"code","2cca1148":"code","39b1d79e":"code","a0855fbd":"code","8a3dc650":"code","d3ab4cbd":"code","790aca62":"code","4d4f6ff9":"code","5d11c3eb":"code","c779b3c0":"code","81ad3378":"code","7cf4e0c1":"code","91a14f97":"code","0ff572e3":"code","8715f056":"code","f7e2cc9b":"code","b6fb560a":"code","2ee0c739":"code","e7d6aee6":"code","fe6f5dc4":"code","caead141":"code","c238baaa":"markdown","920cd1be":"markdown","b1ddae24":"markdown","86fbb56f":"markdown","bd002fff":"markdown","c84e957b":"markdown","094a15d0":"markdown"},"source":{"5e967b58":"#import library\nimport pickle\nimport pandas_profiling\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom xgboost import XGBClassifier\nimport xgboost\nimport math\nfrom sklearn import metrics","7472afa6":"df = pd.read_csv('..\/input\/bmidataset\/bmi.csv')","e5df6c7e":"df.shape","5c34c06f":"df.head()","bec2faf2":"df.describe()","e53c7c0f":"df.info()","a04d5632":"#correlation of each variable\ndf.corr()","2cca1148":"df['Index'].value_counts()","39b1d79e":"df['Gender'].value_counts()","a0855fbd":"#transform index column\ndf.Index[df['Index'] == 0] = 'Extremely Weak'\ndf.Index[df['Index'] == 1] = 'Weak'\ndf.Index[df['Index'] == 2] = 'Normal'\ndf.Index[df['Index'] == 3] = 'Overweight'\ndf.Index[df['Index'] == 4] = 'Obesity'\ndf.Index[df['Index'] == 5] = 'Extremely Obesity'\ndf.head()","8a3dc650":"#analyze of index based on gender, height and weight\npd.pivot_table(df, index = ['Index', 'Gender'], values = ['Height', 'Weight'], \n               aggfunc = {'Height' : np.mean, 'Weight' : np.mean}).sort_values(['Height', 'Weight'], ascending = False)","d3ab4cbd":"#analyze the factor of BMI\nchart = df.boxplot(column = ['Height', 'Weight'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 0)\nplt.title('The Factor of Body Mass Index', fontsize = 15, color = 'maroon', pad = 12)\nplt.xlabel('Factors')\nplt.ylabel('Count')\nplt.show()","790aca62":"#visualize average of height based on index and gender\nchart = df.groupby(['Index', 'Gender'])['Height'].mean().unstack().plot(kind = 'bar')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title('Average of Height based on Index and Gender', fontsize = 15, pad = 12, color = 'maroon')\nplt.xlabel('Index')\nplt.ylabel('Average of Height')\nplt.legend(bbox_to_anchor = (1.02, 1), loc = 2, borderaxespad = 0.)\nplt.show()","4d4f6ff9":"#visualize average of weight based on index and gender\nchart = df.groupby(['Index', 'Gender'])['Weight'].mean().unstack().plot(kind = 'bar')\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.title('Average of Weight based on Index and Gender', fontsize = 15, pad = 12, color = 'maroon')\nplt.xlabel('Index')\nplt.ylabel('Average of Weight')\nplt.legend(bbox_to_anchor = (1.02, 1), loc = 2, borderaxespad = 0.)\nplt.show()","5d11c3eb":"#distribution of each variable\ndf.hist()\nplt.show()","c779b3c0":"#profile report of each variable\npandas_profiling.ProfileReport(df)","81ad3378":"#handling categorical data\nle = LabelEncoder()\ndf['Gender'] = le.fit_transform(df['Gender'])\ndf['Index'] = le.fit_transform(df['Index'])","7cf4e0c1":"#split data\nX = df.drop('Index', axis = 1)\ny = df['Index']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","91a14f97":"#prepare models\nclassifiers = [\n    KNeighborsClassifier(n_neighbors = 5),\n    LinearSVC(),\n    DecisionTreeClassifier(criterion = 'gini', max_depth = 3),\n    RandomForestClassifier(random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1),\n    XGBClassifier(),\n    AdaBoostClassifier(),\n    GaussianNB(),\n    QuadraticDiscriminantAnalysis()]","0ff572e3":"#report models\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog = pd.DataFrame(columns = log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    print(\"=\" * 30)\n    print(name)\n    print('****Results****')\n    \n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\".format(acc))\n    print(\"\\n\")\n    \n    log_entry = pd.DataFrame([[name, acc * 100]], columns = log_cols)\n    log = log.append(log_entry)\n    \nprint(\"=\" * 30)","8715f056":"#visualize accuracy models\nplt.figure(figsize = (10,6))\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"lime\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy Score of Classification Model')\nplt.show()","f7e2cc9b":"#fitting model\nqda = QuadraticDiscriminantAnalysis()\n%time qda.fit(X_train, y_train)","b6fb560a":"#prediction\ny_pred = qda.predict(X_test)\nprint(y_pred)","2ee0c739":"#check of MSE & RMSE \nmse = metrics.mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error : '+ str(mse))\nrmse = math.sqrt(metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error : '+ str(rmse))","e7d6aee6":"#confusion matrix\nmatrix = pd.DataFrame((metrics.confusion_matrix(y_test, y_pred)), \n                      ('Extremely Weak', 'Weak', 'Normal', 'Overweight', 'Obesity', 'Extremely Obesity'), \n                      ('Extremely Weak', 'Weak', 'Normal', 'Overweight', 'Obesity', 'Extremely Obesity'))\nprint(matrix)\n\n#visualize confusion matrix\nplt.figure(figsize = (8,6))\nheatmap = sns.heatmap(matrix, annot = True, annot_kws = {'size': 14}, fmt = 'd', cmap = 'YlGnBu')\nheatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation = 0, ha = 'right', fontsize = 14)\nheatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation = 45, ha = 'right', fontsize = 14)\n\nplt.title('Confusion Matrix\\n(Quadratic Discriminant Analysis)', fontsize = 18, color = 'darkblue')\nplt.ylabel('True label', fontsize = 14)\nplt.xlabel('Predicted label', fontsize = 14)\nplt.show()","fe6f5dc4":"#classification report\nreport = metrics.classification_report(y_test, y_pred)\nprint('Classification Report of Quadratic Discriminant Analysis : \\n')\nprint(report)","caead141":"#deploy the model\nqda.fit(X, y)\npickle.dump(qda, open('quadratic_discriminant_analysis.pkl', 'wb'))","c238baaa":"# Data Extraction","920cd1be":"# Deployment","b1ddae24":"Variable of index :\n- 0 -> Extremely Week\n- 1 -> Weak\n- 2 -> Normal\n- 3 -> Overweight\n- 4 -> Obesity\n- 5 -> Extremely Obesity","86fbb56f":"Quadratic Discriminant Analysis is very suitable model to predict index from BMI (Body Mass Index) because has good accuracy score on 89%","bd002fff":"# Classification Model","c84e957b":"# BMI Prediction","094a15d0":"# Exploratory Data Analysis (EDA)"}}