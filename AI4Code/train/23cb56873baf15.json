{"cell_type":{"e41e9aba":"code","f3036183":"code","306ee833":"code","9c4d4e5c":"code","c97427b7":"code","70607edb":"code","e27d4078":"code","4d75318c":"code","dea1e2df":"code","03939a3b":"code","f56b982f":"code","cf60f095":"code","479e0b01":"code","859a41e1":"code","f7b0def7":"code","1922fa04":"code","0c6ff6ac":"markdown","6d3f484a":"markdown","d6f1f443":"markdown","98987e3d":"markdown","80efaf43":"markdown","ca2974be":"markdown","01b56722":"markdown","fb8e95ac":"markdown","9a07dbf5":"markdown"},"source":{"e41e9aba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3036183":"train_path = os.path.join(os.path.abspath(os.sep), 'kaggle', 'input', 'titanic', 'train.csv')\ntrain_df = pd.read_csv(train_path, dtype={\n                            'Pclass': 'int', 'Sex': 'category', 'Embarked': 'category',\n                            'Parch': 'int', 'Cabin': 'object', 'Age': 'float'})\ntrain_labels = train_df['Survived']\ntrain_input = train_df.drop('Survived', axis='columns')\ntrain_df.head()","306ee833":"%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\ndef plot_survival_rate(ax, cat_series, cat_names, xlabel=''):    \n    ax.set_xlim(0, len(cat_names))\n    ax.set_ylim(0, 1)\n    ax.set_ylabel('Survival rate')\n    ax.set_xticks([i+0.5 for i in range(len(cat_names))])\n    ax.set_xticklabels(cat_names)\n    ax.set_xlabel(xlabel)\n    \n    for i in range(len(cat_names)):\n        ax.add_patch(plt.Rectangle((i+0.1, 0), 0.8, (cat_series[i] & (train_labels==1)).sum()\/cat_series[i].sum(), fc=(0.5, 0.5, 0.5)))\n        \ndef plot_histo(ax, cat_series, cat_names, xlabel='', norm=False):\n    ax.set_xlim(0, len(cat_names))\n    if norm:\n        ax.set_ylabel('Fraction of total')\n        ax.set_ylim(0, 1)\n    else:\n        ax.set_ylabel('Count')\n    ax.set_xticks([i+0.5 for i in range(len(cat_names))])\n    ax.set_xticklabels(cat_names)\n    ax.set_xlabel(xlabel)\n    \n    for i in range(len(cat_names)):\n        if norm:\n            cat_series[i] = cat_series[i]\/cat_series[i].count()\n        ax.add_patch(plt.Rectangle((i+0.1, 0), 0.8, (cat_series[i]).sum(), fc=(0.5, 0.5, 0.5)))","9c4d4e5c":"# Survival as a function of sex\nfig, ax = plt.subplots(figsize=(4, 4))\n\nsex_series = [train_input['Sex']==sex for sex in ['male', 'female']]\nsex_labels = ['Male', 'Female']\n\nplot_survival_rate(ax, sex_series, sex_labels, 'Sex')","c97427b7":"# Survival vs. Age\nage_groups=[0, 5, 12, 18, 24, 30, 60]\nage_series=[(train_input['Age']>=left) & (train_input['Age']<right)\n                for (left, right) in zip(age_groups[:-1], age_groups[1:])]\\\n          +[train_input['Age']>=age_groups[-1]]\nage_labels=['<'+str(age) for age in age_groups[1:]]+['>='+str(age_groups[-1])]\n\nfig, ax=plt.subplots(figsize=(12, 4))\n\nplot_survival_rate(ax, age_series, age_labels, 'Age')","70607edb":"# Survival vs. sex and age, just to check\nsex_age_series = [age_serie & sex_serie\n                     for age_serie in age_series for sex_serie in sex_series]\nsex_age_labels = [ sex+age_label\n                      for age_label in age_labels for sex in ['M', 'F']]\n\nfig, ax=plt.subplots(figsize=(12, 4))\n\nplot_survival_rate(ax, sex_age_series, sex_age_labels, 'Sex, age')","e27d4078":"# Survival vs. sex and class\nclass_series = [train_input['Pclass']==i for i in range(1, 4)]\nsex_class_series = [sex_serie & class_serie\n                       for class_serie in class_series for sex_serie in sex_series]\nsex_class_labels = [sex+', '+str(i)\n                      for i in range(1, 4) for sex in ['M', 'F']]\n\nfig, ax=plt.subplots(figsize=(6, 4))\n\nplot_survival_rate(ax, sex_class_series, sex_class_labels, 'Sex, class')","4d75318c":"# Survival vs. fare\nfare_groups = [10*i for i in range(11)]\nfare_series=[(train_input['Fare']>=left) & (train_input['Fare']<right)\n                 for (left, right) in zip(fare_groups[:-1], fare_groups[1:])]\\\n            +[train_input['Age']>=age_groups[-1]]\nfare_labels=['<'+str(fare) for fare in fare_groups[1:]]+['>='+str(fare_groups[-1])]\n\nfig, ax=plt.subplots(figsize=(12, 4))\n\nplot_survival_rate(ax, fare_series, fare_labels, 'Fare')","dea1e2df":"# Survival vs. Sibblings aboard\nsib_series = [train_input['SibSp']==i for i in range(0, 5)]\nsib_labels = [str(i) for i in range(0, 5)]\n\nfig, ax = plt.subplots(figsize=(6, 4))\n\nplot_survival_rate(ax, sib_series, sib_labels, 'Sibblings aboard')","03939a3b":"# Survival vs. parent\/children\npc_series = [train_input['Parch']==i for i in range(0, 5)]\npc_labels = [str(i) for i in range(0, 5)]\n\nfig, ax = plt.subplots(figsize=(6, 4))\n\nplot_survival_rate(ax, pc_series, pc_labels, 'Parents\/children aboard')","f56b982f":"# And those two combined\nrels_series = [train_input['SibSp']+train_input['Parch']==i for i in range(0, 8)]\nrels_labels = [str(i) for i in range(0, 8)]\n\nfig, ax = plt.subplots(figsize=(10, 4))\n\nplot_survival_rate(ax, rels_series, rels_labels, 'Relatives aboard')","cf60f095":"# Let's see titles\ntrain_input['Title']=train_input['Name'].apply(lambda s: s.split(',')[1][1:].split('.')[0])\ntrain_input['Title']=train_input['Title'].apply(lambda s, vc=train_input['Title'].value_counts(): 'Rare' if vc[s]<6 else s)\ntrain_input['Title']=train_input['Title'].apply(lambda s: 'Rare' if s=='Dr' else s)\n\ntitle_series = [train_input['Title']==title for title in train_input['Title'].unique()]\ntitle_labels = train_input['Title'].unique()\n\nfig, ax = plt.subplots(figsize=(6, 4))\n\nplot_survival_rate(ax, title_series, title_labels, 'Title')","479e0b01":"# Title and sex?\nsex_title_series = [sex_serie & title_serie\n                       for title_serie in title_series for sex_serie in sex_series]\nsex_title_labels = [sex+', '+title\n                       for title in title_labels for sex in ['M', 'F']]\n\n\nfig, ax = plt.subplots(figsize=(12, 4))\n\nplot_survival_rate(ax, sex_title_series, sex_title_labels, 'Sex, title')","859a41e1":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass NumericalSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, combine_relatives=False):\n        self.combine_relatives=combine_relatives\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        X=X[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Name']].copy()\n        X['Title']=X['Name'].apply(lambda s: s.split(',', 1)[1][1:].split('.', 1)[0])\n        X['Age']=X.groupby(['Pclass', 'Title', 'Sex']).transform(lambda x: x.fillna(x.mean()))\n        if self.combine_relatives:\n            X['Sibs']=X['Parch']+X['SibSp']\n            return X[['Age', 'Sibs']].values\n        return X[['Age', 'SibSp', 'Parch']].values\n\nclass CategoricalSelector(BaseEstimator, TransformerMixin):\n    def rare_if_rare(self, s):\n        if s in ['Mr', 'Mrs', 'Miss', 'Master', 'Rev']:\n            return s\n        return 'Rare'\n    \n    def __init__(self, keep_sex=False, split_rares=True, combine_married=False):\n        self.keep_sex=keep_sex\n        self.split_rares=split_rares\n        self.combine_married=combine_married\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        X=X[['Pclass', 'Sex', 'Name']].copy()\n        X['Title']=X['Name'].apply(lambda s: s.split(',', 1)[1][1:].split('.', 1)[0])\n        X.drop(['Name'], axis='columns', inplace=True)\n        X['Title']=X['Title'].apply(self.rare_if_rare)\n        if self.split_rares:\n            X['Title'].mask((X['Title']=='Rare') & (X['Sex']=='male'),\n                             'Rare male', inplace=True)\n            X['Title'].mask((X['Title']=='Rare') & (X['Sex']=='female'),\n                             'Rare female', inplace=True)\n        if self.combine_married:\n            X['Title'].mask(X['Title']=='Miss', 'Mrs', inplace=True)\n        if not self.keep_sex:\n            X.drop(['Sex'], axis='columns', inplace=True)\n        return X.values","f7b0def7":"from sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nnum_pipeline = Pipeline([\n    ('num_selector', NumericalSelector(combine_relatives=True)),\n    ('std_scaler', StandardScaler())\n])\n\ncat_pipeline = Pipeline([\n    ('cat_selector', CategoricalSelector(keep_sex=False, split_rares=False, combine_married=False)),\n    ('onehot', OneHotEncoder(sparse=False))\n])\n\nfull_pipeline = FeatureUnion(transformer_list=[\n    ('num_pipeline', num_pipeline),\n    ('cat_pipeline', cat_pipeline)\n])","1922fa04":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {'combine_relatives': [False, True]...}\ngrid_search = GridSearchCV(full_pipeline, )","0c6ff6ac":"Maybe split them by sex?","6d3f484a":"### Pipeline time! I plotted the pairs before but it didn't quite enlighten me. Will probably check other people's insight later","d6f1f443":"Checked what happened with the abnormal 50-60 box. Turns out it can be explained by passenger class alone","98987e3d":"### Plotting stuff for insight","80efaf43":"### Plotting helper","ca2974be":"### Load data","01b56722":"I also checked embarkment place in the other notebook, found it not so relevant","fb8e95ac":"Mixing those two is probably a bad idea, right?","9a07dbf5":"# TODO: try everything"}}