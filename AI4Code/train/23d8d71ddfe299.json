{"cell_type":{"bad4d929":"code","9d6d4a38":"code","c84b7791":"code","c6496680":"code","bae1a6d5":"code","66daeecb":"code","56959b23":"code","8378abbd":"code","8cd8cc03":"code","221d4adb":"code","6a6f7df0":"code","c248798f":"code","d001d1a5":"code","4cf288c2":"code","b47c78a2":"markdown","5bbc3c57":"markdown","b056d16c":"markdown","6aaaf0c5":"markdown","3e3dbb4f":"markdown","e5d5cfd5":"markdown","d5d7cbde":"markdown","bfe5abe1":"markdown","bf01cb1b":"markdown","591a11dc":"markdown"},"source":{"bad4d929":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d6d4a38":"# importing libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c84b7791":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv')","c6496680":"train.head()","bae1a6d5":"test.head()","66daeecb":"print('N. of missing values in train data:')\nprint('------')\nprint(train.isnull().sum())","56959b23":"print('N. of missing values in test data:')\nprint('------')\nprint(test.isnull().sum())","8378abbd":"train.dtypes","8cd8cc03":"cat_columns = list(train.select_dtypes('object').columns)\nnum_columns = list(train.select_dtypes('float64').columns)","221d4adb":"for i in cat_columns:\n    plt.figure(figsize=(20,4))\n    train[i].value_counts().plot(kind='bar')\n    plt.title(i)\n    plt.grid()\n    plt.show()","6a6f7df0":"# Categorical features distribution (thanks to @hamzaghanmi for this cell)\ni = 1\nplt.figure()\nfig, ax = plt.subplots(10, 2,figsize=(28, 44))\nfor feature in cat_columns:\n    plt.subplot(10, 2,i)\n    sns.histplot(train[feature],color=\"blue\", label='train')\n    sns.histplot(test[feature],color=\"olive\", label='test')\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()\n\n","c248798f":"for i in num_columns:\n    plt.figure(figsize=(20,4))\n    train[i].plot(kind='hist', bins=100)\n    plt.title(i)\n    plt.grid()\n    plt.show()","d001d1a5":"# Numerical features distribution (thanks to @hamzaghanmi for this cell)\n\n\ni = 1\nplt.figure()\nfig, ax = plt.subplots(6, 2,figsize=(20, 24))\nfor feature in num_columns:\n    plt.subplot(6, 2,i)\n    sns.histplot(train[feature],color=\"blue\", kde=True,bins=100, label='train')\n    sns.histplot(test[feature],color=\"olive\", kde=True,bins=100, label='test')\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()\n\n","4cf288c2":"corr = train[num_columns+['target']].corr()\ncorr.style.background_gradient(cmap='viridis').set_precision(2)","b47c78a2":"### Categorical Columns plotting","5bbc3c57":"Check for cardinality of each categorical column","b056d16c":"We have both categorical and numerical columns, let's start by splitting them and analize the categoricals one","6aaaf0c5":"Check which type of data are in the dataset","3e3dbb4f":"# Exploratory Data Analysis","e5d5cfd5":"### Check for missing values","d5d7cbde":"There are no missing value neither in train nor in test.","bfe5abe1":"Visualize the first rows of train and test","bf01cb1b":"### Correlation Map","591a11dc":"### Numerical columns plotting"}}