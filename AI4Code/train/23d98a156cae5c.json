{"cell_type":{"f2b0facc":"code","cee774d1":"code","0b088839":"code","0bc8ecb2":"code","c7dae9eb":"code","d21bf4b2":"code","9eba9ed7":"code","87ca98f2":"code","d12466b0":"code","265ebb15":"code","5749092b":"code","62637e08":"code","92749dba":"code","64d3f804":"code","a0ad08fe":"code","80c27bc8":"code","0ec01246":"code","2c652385":"code","e1782662":"code","434db427":"markdown","7cd3d602":"markdown","64d07139":"markdown","71b35a18":"markdown","da47c761":"markdown","4a9ebdfe":"markdown","5c0f6c47":"markdown","be4c0192":"markdown","0890d2eb":"markdown"},"source":{"f2b0facc":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom google.cloud import bigquery","cee774d1":"client = bigquery.Client()\n\ndataset_ref = client.dataset('google_analytics_sample', project='bigquery-public-data')\n\ndataset = client.get_dataset(dataset_ref)","0b088839":"tables = list(client.list_tables(dataset))\n\nlist_of_tables = [table.table_id for table in tables]\n\nprint(list_of_tables)","0bc8ecb2":"last_table_ref = dataset_ref.table('ga_sessions_20170801')\n\nlast_table = client.get_table(last_table_ref)\n\nclient.list_rows(last_table, max_results=5).to_dataframe()","c7dae9eb":"q1 = '''\n     SELECT date, COUNT(hits) AS hits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n     GROUP BY date\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq1_job = client.query(q1, job_config=safe_config)\n\nq1_results = q1_job.to_dataframe()\n\nprint(q1_results)","d21bf4b2":"q2 = '''\n     SELECT geoNetwork AS place\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq2_job = client.query(q2, job_config=safe_config)\n\nq2_results = q2_job.to_dataframe()\n\ncontinent_lst = []\nfor x in q2_results['place']:\n    x = x['continent']\n    continent_lst.append(x)\nq2_results['continents'] = continent_lst\n\ncontinent_count = {'Americas': 0, 'Asia': 0, 'Europe': 0, 'Oceania': 0, 'Africa': 0}\nfor continent in q2_results['continents']:\n    if continent == 'Americas':\n        continent_count['Americas'] += 1\n    if continent == 'Asia':\n        continent_count['Asia'] += 1\n    if continent == 'Europe':\n        continent_count['Europe'] += 1\n    if continent == 'Oceania':\n        continent_count['Oceania'] += 1\n    if continent == 'Africa':\n        continent_count['Africa'] += 1\n    ","9eba9ed7":"labels = continent_count.keys()\ndata = continent_count.values()\nexplode = (0.05, 0, 0,0,0)\n\nplt.figure(figsize=(5,5))\nplt.pie(data, labels=labels, explode=explode, autopct='%1.1f%%', startangle=55)\nplt.title('Visits per Continent')\nplt.axis('equal') \n\nplt.show()","87ca98f2":"q3 = '''\n     SELECT date, a.channelGrouping AS channel, COUNT(a.channelGrouping) AS total\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801` AS a\n     GROUP BY date, a.channelGrouping\n     UNION ALL\n     SELECT date, b.channelGrouping AS channel, COUNT(b.channelGrouping) AS total\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170731` AS b\n     GROUP BY date, b.channelGrouping\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq3_job = client.query(q3, job_config=safe_config)\n\nq3_results = q3_job.to_dataframe()\n\nprint(q3_results)","d12466b0":"day1_lst = []\nfor x in q3_results['total'][0:7]:\n    day1_lst.append(x)\n    \nday2_lst = []\nfor x in q3_results['total'][7:14]:\n    day2_lst.append(x)    \n    \nN = 7\nind = np.arange(N)\nwidth = 0.35\n\nfig, ax = plt.subplots()\n\nday1_bars = ax.bar(ind, day1_lst, width)\nday2_bars = ax.bar(ind + width, day2_lst, width)\n\nax.set_ylabel('Total')\nax.set_title('2-Day Channel Comparison')\nax.set_xticks(ind + width \/ 2)\nax.set_xticklabels(('Organic Search', 'Direct', 'Referral', 'Display', 'Paid Search', 'Affiliates', 'Social'), rotation='vertical')\n\nax.legend((day1_bars[0], day2_bars[0]), ('2017\/07\/31', '2017\/08\/01'))\n\nplt.show()","265ebb15":"q4 = '''\n     SELECT fullVisitorId,\n         COUNT(visitNumber)OVER(\n                                PARTITION BY visitId\n                                ORDER BY visitNumber DESC\n                                ROWS BETWEEN 1 PRECEDING AND CURRENT ROW\n                               )as repeat_visitor\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n     WHERE visitNumber >= 2\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq4_job = client.query(q4, job_config=safe_config)\n\nq4_results = q4_job.to_dataframe()\n\nprint(q4_results)","5749092b":"returning_visitors = 684\nnew_visitors = 2556 - returning_visitors\n\nlabels = ['Returning Visitor', 'New Visitor']\ndata = [returning_visitors, new_visitors]\n\nplt.figure(figsize=(5,5))\nplt.pie(data, labels=labels, autopct='%1.1f%%', startangle=130)\nplt.title('Returning vs New Visitors (2017-08-01)')\nplt.axis('equal') \n\nplt.show()","62637e08":"print(last_table.schema[6])","92749dba":"q5 = '''\n     SELECT trafficSource.source AS source, COUNT(trafficSource) as counts\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`\n     GROUP BY source\n     HAVING counts >= 10\n     ORDER BY counts DESC\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq5_job = client.query(q5, job_config=safe_config)\n\nq5_results = q5_job.to_dataframe()\n\nprint(q5_results)","64d3f804":"category_names = q5_results['source']\nresults = {\n    'counts': q5_results['counts']\n          }\n\n\ndef survey(results, category_names):\n   \n    labels = list(results.keys())\n    data = np.array(list(results.values()))\n    data_cum = data.cumsum(axis=1)\n    category_colors = plt.get_cmap('RdYlGn')(\n        np.linspace(0.15, 0.85, data.shape[1]))\n\n    fig, ax = plt.subplots(figsize=(13, 2.5))\n    ax.invert_yaxis()\n    ax.xaxis.set_visible(False)\n    ax.set_xlim(0, np.sum(data, axis=1).max())\n\n    for i, (colname, color) in enumerate(zip(category_names, category_colors)):\n        widths = data[:, i]\n        starts = data_cum[:, i] - widths\n        ax.barh(labels, widths, left=starts, height=0.5,\n                label=colname, color=color)\n        xcenters = starts + widths \/ 2\n\n    ax.legend(ncol=len(category_names), bbox_to_anchor=(0, 1),\n              loc='lower left', fontsize='large')\n\n    return fig, ax\n\n\nsurvey(results, category_names)\nplt.show()","a0ad08fe":"print(category_names)","80c27bc8":"print(last_table.schema[5])","0ec01246":"print(last_table.schema[10])","2c652385":"q6 = '''\n     SELECT hits.hour AS hour, SUM(totals.visits) AS visits\n     FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`, UNNEST(hits) AS hits\n     GROUP BY hour\n     ORDER BY hour\n     '''\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nq6_job = client.query(q6, job_config=safe_config)\n\nq6_results = q6_job.to_dataframe()\n\nprint(q6_results)","e1782662":"x = q6_results['hour']\ny = q6_results['visits']\n\nplt.figure(figsize=(15,10))\nplt.bar(x, y, width=1)\nplt.title('Visits per Hour of Day')\nplt.xlabel('Hour')\nplt.xticks(q6_results.index, q6_results['hour'])\nplt.ylabel('Visits')\n\n\nplt.show()","434db427":"1. #### First Query: Finding total hits for 2017-08-01","7cd3d602":"#### Third Query: 2-day channel comparison ","64d07139":"#### Viewing Tables","71b35a18":"#### Fourth Query: Finding repeat visitors for one day","da47c761":"#### Sixth Query: Finding total visits per hour of day","4a9ebdfe":"#### Fifth Query: Finding traffic sources with count larger than 10","5c0f6c47":"#### Second Query: Visits per Continent","be4c0192":"#### Viewing columns inside the last table","0890d2eb":"#### Retrieving Dataset"}}