{"cell_type":{"b13e6fd3":"code","d6e83629":"code","8c643b77":"code","bb36aeb0":"code","ca794441":"code","fef4135b":"code","3516d8fe":"code","a17d5a6d":"code","807cf2f1":"code","5970b0d2":"code","d4ea1302":"code","242e4a2c":"code","6e8dd3ea":"code","5b301abe":"code","78968e48":"code","56c9514c":"code","85ede695":"code","8f0b9346":"markdown","84a24bb6":"markdown","a3832d50":"markdown","10ba4165":"markdown","cefe08ef":"markdown","9c5c96e2":"markdown","a3314ad1":"markdown","c4f31a8a":"markdown","3693d292":"markdown","2c2a051f":"markdown","3aafb8c3":"markdown","71204bf5":"markdown","7a82154b":"markdown","295655ae":"markdown","79d09bf7":"markdown","70bddb7d":"markdown","9ec1a01b":"markdown","ed4f3573":"markdown","36f876ca":"markdown"},"source":{"b13e6fd3":"import pandas as pd\nimport numpy as np\n\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix \nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nfrom sklearn.neural_network import MLPClassifier\n\nimport seaborn as sn\nimport pandas as pd\nimport matplotlib.pyplot as plt","d6e83629":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","8c643b77":"df_freq = df.count()\nvariables = df_freq.loc[df_freq>0.1*df.shape[0]].index\ndf = df[variables]","bb36aeb0":"df2 = df.copy()\ndf2.drop(['Patient addmited to regular ward (1=yes, 0=no)','Patient addmited to semi-intensive unit (1=yes, 0=no)','Patient addmited to intensive care unit (1=yes, 0=no)'],axis=1,inplace=True)\ndf2['SARS-Cov-2 exam result'] = df2['SARS-Cov-2 exam result'].map(lambda x: 1 if x == 'positive' else 0)\ncorrs = df2.corr()['SARS-Cov-2 exam result']\ncont_out = list(corrs.loc[(corrs<0.1)|(corrs>-0.1)].index)\ncont_vars = list(corrs.loc[(corrs>=0.1)|(corrs<=-0.1)].index)","ca794441":"corrs[cont_vars]","fef4135b":"cont_vars = list(set(cont_vars)-set(['SARS-Cov-2 exam result','Patient addmited to regular ward (1=yes, 0=no)']))\nvariables = [var for var in variables if var not in cont_out]\ncat_vars = list(set(variables) - set(cont_vars)-set(['Patient ID','Patient addmited to regular ward (1=yes, 0=no)','Patient addmited to semi-intensive unit (1=yes, 0=no)','Patient addmited to intensive care unit (1=yes, 0=no)']))\nvariables = cont_vars+cat_vars\nyCol = ['SARS-Cov-2 exam result']\ndf = df[variables+yCol]","3516d8fe":"cont_vars","a17d5a6d":"cat_vars","807cf2f1":"df = df.loc[~df[cont_vars].isna().all(axis=1)]\ndf[cat_vars] = df[cat_vars].replace(np.nan,'not_tested')\ndf_dummies = pd.get_dummies(df[cat_vars])\n\ndumm_col = list(df_dummies.columns)\ncols = []\nfor col in dumm_col:\n    if \"not_tested\" not in col:\n        cols.append(col)\ndf_dummies = df_dummies[cols]\n\ndf = pd.concat([df,df_dummies],axis=1)\ndf.drop(columns=cat_vars,axis=1,inplace=True)\nvariables = list(set(df.columns)-set(yCol))\n\ndf.dropna(inplace=True)\ndf.shape","5970b0d2":"scaler = MinMaxScaler(copy=False, feature_range=(0, 1))\ndf[variables] = scaler.fit_transform(df[variables])\n\ndf[yCol] = df[yCol].replace('negative',0)\ndf[yCol] = df[yCol].replace('positive',1)\n\nx = df[variables]\ny = df[yCol]\nrus = RandomUnderSampler(random_state=42)\nx_rus, y_rus = rus.fit_resample(x, y)\n\nx_train, x_test, y_train, y_test = train_test_split(x_rus, y_rus, test_size=0.20, random_state=1)","d4ea1302":"clf = MLPClassifier(solver='lbfgs', activation='logistic', alpha=1e-3,\n                    hidden_layer_sizes=(28, 2), random_state=1)\n\nclf.fit(x_train, y_train)\ny_pred_nn1 = clf.predict(x_test)\n\nclf = MLPClassifier(solver='lbfgs', activation='logistic', alpha=1e-3,\n                    hidden_layer_sizes=(32, 2), random_state=1)\n\nclf.fit(x_train, y_train)\ny_pred_nn2 = clf.predict(x_test)\n\nclf = MLPClassifier(solver='lbfgs', activation='logistic', alpha=1e-3,\n                    hidden_layer_sizes=(36, 2), random_state=1)\n\nclf.fit(x_train, y_train)\ny_pred_nn3 = clf.predict(x_test)\n\nclf = MLPClassifier(solver='lbfgs', activation='logistic', alpha=1e-3,\n                    hidden_layer_sizes=(40, 2), random_state=1)\n\nclf.fit(x_train, y_train)\ny_pred_nn4 = clf.predict(x_test)\n\nclf = MLPClassifier(solver='lbfgs', activation='logistic', alpha=1e-3,\n                    hidden_layer_sizes=(44, 2), random_state=1)\n\nclf.fit(x_train, y_train)\ny_pred_nn5 = clf.predict(x_test)","242e4a2c":"df_ensemble = pd.DataFrame(columns=['class_nn1','class_nn2','class_nn3','class_nn4','class_nn5','y_true'])\ndf_ensemble['class_nn1'] = y_pred_nn1\ndf_ensemble['class_nn2'] = y_pred_nn2\ndf_ensemble['class_nn3'] = y_pred_nn3\ndf_ensemble['class_nn4'] = y_pred_nn4\ndf_ensemble['class_nn5'] = y_pred_nn5\ny_test.reset_index(inplace=True,drop=True)\ndf_ensemble['y_true'] = y_test\ndf_ensemble['y_pred'] = df_ensemble[['class_nn1','class_nn2','class_nn3','class_nn4','class_nn5']].mode(axis=1)","6e8dd3ea":"cm = confusion_matrix(df_ensemble['y_true'],df_ensemble['y_pred'])\n\ndf_cm = pd.DataFrame(cm, index = ['negative','positive'],\n                  columns = ['negative','positive'])\nsn.set(font_scale=1.4) # for label size\nsn.heatmap(df_cm, annot=True, annot_kws={\"size\": 16}) # font size","5b301abe":"accuracy_score(df_ensemble['y_true'],df_ensemble['y_pred'])","78968e48":"precision_score(df_ensemble['y_true'],df_ensemble['y_pred'])","56c9514c":"recall_score(df_ensemble['y_true'],df_ensemble['y_pred'])","85ede695":"f1_score(df_ensemble['y_true'],df_ensemble['y_pred'], average='macro')","8f0b9346":"Categorical variables (no feature selection is held on them):","84a24bb6":"## 3. Train and test","a3832d50":"### Confusion Matrix","10ba4165":"### Recall","cefe08ef":"# Task 1 - Identify if a pacient is SARS-Cov-2 positive","9c5c96e2":"## 4. Conclusions","a3314ad1":"### 1.2. Selection of continuous variables\nNow it is checked the correlation of the continuous variables compared to our target (Covid exam result).\nHere, it is selected only the variables with |c|>=0.1, which is not a high correlation, but it has a minimum significance.","c4f31a8a":"### F1 Score","3693d292":"Albert Einstein Hospital in S\u00e3o Paulo, Brazil has provided a dataset of its pacients with a number of exams and tests and the SARS-Cov-2 exam result.\nThe idea of this notebook is to provide a model that identify if a pacient is SARS-Cov-2 positive based on the other exams results.\nThe greatest challenges here are:\n\n1) To handle with missing values, since the set of exams held for each pacient is different, and a lot of missing values are present;\n\n2) To present good results with unbalanced classes (there are much more negative results)","2c2a051f":"Correlations (after feature selection):","3aafb8c3":"The model presents very interesting results regarding accuracy, precision, recal and F1, which means that the model, along with the undersample, handled well with the class unbalance.\n\nI hope this could be helpful somehow!","71204bf5":"Set of continuous variables:","7a82154b":"### 1.1 Selection of variables with at least 10% non NaN values","295655ae":"The dataframe has 598 entries, which is a good number to handle with!","79d09bf7":"First, data normalization is held, followed by a random under sampling (I do not want to over sample and evaluate the model over inferred data), in order to balance classes. After that, train-test split (20% testing) is performed.\n\nIt is used an ensemble of 5 MLP classifiers, with 2 hidden layers each and different number of neurons:\n- MLP1: 2 hidden layers with 28 neurons each\n- MLP2: 2 hidden layers with 32 neurons each\n- MLP3: 2 hidden layers with 36 neurons each\n- MLP4: 2 hidden layers with 40 neurons each\n- MLP5: 2 hidden layers with 44 neurons each\n\nThe predicted class is a majority voting of each network predicted label.","70bddb7d":"### Accuracy","9ec1a01b":"## 1. Feature Selection","ed4f3573":"### Precision","36f876ca":"## 2. Data preparation (handling missing values)\n\nI do not infer anything about missing data, so data preparation is made according the following steps:\n\n1) For the continuous variables, any row with missing data is deleted\n\n2) For the categorical variables, missing data is filled with \"not_tested\"\n\n3) One hot encoding of categorical data\n\n4) not_tested dummy columns are deleted\n\nSo, missing data in categorical variables are handled as a sequence of zeros in one hot encoding.\nExample:\n\n| Influenza_A_detected | Influenza_A_not_detected |\n| --- | --- |\n| 0 | 0 |"}}