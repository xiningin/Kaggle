{"cell_type":{"233ada9d":"code","00efa673":"code","d339d058":"code","94b61b2f":"code","4796a564":"code","cee189d3":"code","846e225f":"code","529ed8ab":"code","9498e72b":"code","92045a7f":"code","b0c85b92":"code","c7aac430":"code","65d2fff7":"code","e71c7d3f":"code","d94a276b":"code","72c02fc5":"code","f4c3d920":"code","b5aece73":"code","bf8bd29d":"code","5a6bf7eb":"code","b8622baf":"code","0da0da8f":"code","ecd8bbaf":"code","50935744":"code","3c7cc6ad":"code","00368400":"code","1113dae9":"code","beb85bba":"code","7a2b41d5":"code","7d697277":"code","272c5742":"code","72d3fab2":"code","1bfaa5c0":"code","6ded60d1":"code","d56dbc91":"code","f430ad58":"code","d1569326":"code","bcc0f553":"code","73327771":"code","a2041a5f":"code","15a42b29":"code","34ff15c2":"code","d9c37738":"code","0dc09eef":"code","1ed298dc":"code","a85b0af7":"code","62529834":"code","3456e7ee":"code","1bc3b09e":"code","f8c5836e":"code","d46005ca":"code","4eca217b":"code","bb6aee44":"code","a84429b4":"code","cb1b8b60":"markdown","d14ec9ca":"markdown","7e5027bd":"markdown","59671451":"markdown","0267cd41":"markdown","e95aa21d":"markdown","4e47f5f1":"markdown","685dd9f6":"markdown","0889f9a4":"markdown","ec02dd48":"markdown","4b5e165b":"markdown","90787091":"markdown"},"source":{"233ada9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00efa673":"############################################\n# Veri \u00d6n \u0130\u015fleme\n############################################\n\n!pip install mlxtend\n!pip install openpyxl\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', 500)\n# \u00e7\u0131kt\u0131n\u0131n tek bir sat\u0131rda olmas\u0131n\u0131 sa\u011flar.\npd.set_option('display.expand_frame_repr', False)\nfrom mlxtend.frequent_patterns import apriori, association_rules","d339d058":"df_ = pd.read_excel(\"\/kaggle\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\n","94b61b2f":"df = df_.copy()","4796a564":"df.info()","cee189d3":"df.head()","846e225f":"# ayk\u0131r\u0131 de\u011ferleri yakalama\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1 #kabul edilebilir aralal\u0131k\n    up_limit = quartile3 + 1.5 * interquantile_range #\u00fcst limit\n    low_limit = quartile1 - 1.5 * interquantile_range #alt limit\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\n    # veriyi haz\u0131rlama \ndef retail_data_prep(dataframe):\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe","529ed8ab":"# S\u0131k kullan\u0131lan baz\u0131 ihtiya\u00e7lar\u0131m\u0131za g\u00f6re genel resmi \u00e7\u0131karak bir fonksiyon yazal\u0131m.\ndef check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n","9498e72b":"check_df(df)","92045a7f":"############################################\n# G\u00f6rev 1: Veri \u00d6n \u0130\u015fleme \u0130\u015flemlerini Ger\u00e7ekle\u015ftiriniz\n############################################\n\n# from helpers.helpers import check_df, retail_data_prep\n# check_df(df)\n#veriyi temizledikten sonraki hali.\ndf = retail_data_prep(df)\ncheck_df(df)","b0c85b92":"#\u00fclke olarak Germany se\u00e7tik\ndf_de = df[df['Country'] == \"Germany\"]","c7aac430":"# genel bir resmi g\u00f6relim.\ncheck_df(df_de)","65d2fff7":"# herbir sat\u0131r bir sepet yani bir fatura\n# bir fatura i\u00e7indeki \u00fcr\u00fcnler\n# faturalara g\u00f6re ve tan\u0131mlara g\u00f6re grupla, yani hangi \u00fcr\u00fcnden ka\u00e7ar tane sat\u0131lm\u0131\u015f\n# bir faturada bir \u00fcr\u00fcn var m\u0131 yok mu bu k\u0131s\u0131m beni ilgilendiriyor?\ndf_de.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).head(20)","e71c7d3f":"\n# unstack ile  pivot table yapt\u0131m. yukar\u0131da de\u011fi\u015fkenler\ndf_de.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().iloc[0:10, 0:5]\n# e\u011fer bir \u00fcr\u00fcn bir sepette ise, h\u00fccrelerde ka\u00e7 tane oldu\u011funu g\u00f6steriyor.\n# 24 say\u0131s\u0131 acaba ger\u00e7ekten var m\u0131?","d94a276b":"# var ya da yok nas\u0131l yaz\u0131l\u0131?\ndf_de.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().fillna(0).iloc[0:5, 0:5]\n#bo\u015f olanlara s\u0131f\u0131r ile doldur\n","72c02fc5":"# say\u0131lar\u0131n oldu\u011fu yerde 1 olmayan yerlerde s\u0131f\u0131r, yani sepette var m\u0131 yok mu\ndf_de.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().fillna(0).applymap(\n    lambda x: 1 if x > 0 else 0).iloc[0:5, 0:5]\n\n# bir \u00fcr\u00fcn var m\u0131  yok mu? var 1 yok 0","f4c3d920":"# s\u0131f\u0131rdan b\u00fcy\u00fck bir de\u011fer varsa, \ndf_de.groupby(['Invoice', 'Description']). \\\n    agg({\"Quantity\": \"sum\"}). \\\n    unstack(). \\\n    fillna(0). \\\n    applymap(lambda x: 1 if x > 0 else 0).iloc[0:5, 0:5]\n# applymap b\u00fct\u00fcn g\u00f6zlem birimlerine iyice geziyor.\n#","b5aece73":"# seyrek matrisler\n\n############################################\n# ARL Veri Yap\u0131s\u0131n\u0131 Haz\u0131rlama (Invoice-Product Matrix)\n############################################\n\ndef create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)","bf8bd29d":"# id arg\u00fcman\u0131n\u0131 girersen, stock kodu g\u00f6sterir, girmezsen description g\u00f6steriri\nde_inv_pro_df = create_invoice_product_df(df_de)\nde_inv_pro_df.head()","5a6bf7eb":"# invoice ve stok kodunna bak\u0131l\u0131r.\n#biinary \nde_inv_pro_df = create_invoice_product_df(df_de, id=True)\nde_inv_pro_df.head()\n#invoce faturad\u0131r. \n#hangi ID hangi \u00fcr\u00fcne ait? ","b8622baf":"# hangi id hangi \u00fcr\u00fcne ait?\n# bana id ile \u00fcr\u00fcn ismini getirir.\ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)\n\n# \u00f6rnek bir datay\u0131 deneyim, id \u00fczerinden gidilir.\ncheck_id(df_de, 10002)","0da0da8f":"# \u00f6rnek bir datay\u0131 deneyim, id \u00fczerinden gidilir.\ncheck_id(df_de, 21987)","ecd8bbaf":"# \u00f6rnek bir datay\u0131 deneyim, id \u00fczerinden gidilir.\ncheck_id(df_de, 23235)","50935744":"# \u00f6rnek bir datay\u0131 deneyim, id \u00fczerinden gidilir.\ncheck_id(df_de, 22747)","3c7cc6ad":"############################################\n# G\u00f6rev 2: Germany m\u00fc\u015fterileri \u00fczerinden birliktelik kurallar\u0131 \u00fcretiniz\n# Birliktelik Kurallar\u0131n\u0131n \u00c7\u0131kar\u0131lmas\u0131\n############################################\n\n# T\u00fcm olas\u0131 \u00fcr\u00fcn birlikteliklerinin olas\u0131l\u0131klar\u0131\nfrequent_itemsets = apriori(de_inv_pro_df, min_support=0.01, use_colnames=True)\nfrequent_itemsets.sort_values(\"support\", ascending=False).head(20)\n#suppporta g\u00f6re s\u0131ralanmam\u0131\u015f \n#post problemli bir de\u011ferr.\n#\u00fcr\u00fcnlerin tek ba\u015flar\u0131na g\u00f6z\u00fckme oranlar\u0131\n\n# support, \u00fcr\u00fcn\u00fcn tek ba\u015f\u0131na g\u00f6r\u00fcnme olas\u0131l\u0131\u011f\u0131","00368400":"check_id(df_de, 21987)","1113dae9":"check_id(df_de, 23235)","beb85bba":"check_id(df_de, 22747)","7a2b41d5":"# Birliktelik kurallar\u0131n\u0131n \u00e7\u0131kar\u0131lmas\u0131:\nrules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\nrules.sort_values(\"support\", ascending=False).head()\n\n#suppart g\u00f6re s\u0131rala\n#confidence, birisi al\u0131nd\u0131\u011f\u0131nda di\u011ferini al\u0131nd\u0131\u011f\u0131nda\n\n#leverage, lift, daha az s\u0131kl\u0131klara ra\u011fmen gizli ili\u015fkileri fark ediyor.\n\n# antecedents: \u00f6nceki \u00fcr\u00fcn\n#'consequents', :sonraki \u00fcr\u00fcn\n#'antecedent support', \u00f6nceki \u00fcr\u00fcn\u00fcn tek ba\u015f\u0131na olas\u0131l\u0131\u011f\u0131\n# 'consequent support',sonraki \u00fcr\u00fcn\u00fcn tek ba\u015f\u0131na olas\u0131l\u0131\u011f\u0131\n# 'support', iki \u00fcr\u00fcn\u00fcn birlikteki olasl\u0131\u011f\u0131, buna g\u00f6re s\u0131ralad\u0131k\n#'confidence', birisi al\u0131nd\u0131\u011f\u0131nda di\u011ferinin al\u0131nma olasl\u0131\u011f\u0131\n#'lift', x al\u0131nd\u0131\u011f\u0131nda, y ka\u00e7 kart artar, gizli ili\u015fkileri yakal\u0131yor.\n# 'leverage', kald\u0131ra\u00e7, supportun y\u00fcksek olana \u00f6ncelik veriyor.\n#'conviction'","7d697277":"# Birliktelik kurallar\u0131n\u0131n \u00e7\u0131kar\u0131lmas\u0131: \n#lifte g\u00f6re s\u0131ralarsam nas\u0131l olur acaba?\nrules.sort_values(\"lift\", ascending=False).head(30)\n# lifte g\u00f6re s\u0131ralayay\u0131m\n# confidence, kullanbilir. \n\n#acaba iki \u00fc\u00e7 metri\u011fin kesi\u015fimi kullan\u0131l\u0131r\u0131, supportu \u015fundan b\u00fcy\u00fck, lifti \u015fundan b\u00fcy\u00fck olan filtrele.\n\n#kritik tablolu, kullan\u0131c\u0131 login oldu\u011funda sepetine \u00fcr\u00fcn ekledi\u011finde, spetindenki \u00fcr\u00fcn\u00fc idsine ilgili \u00fcr\u00fcn\u00fc \u00f6nermek gerekiyor.\n\n","272c5742":"# de\u011fi\u015fken adlar\u0131n\u0131 \u00f6\u011frenme\nrules.columns","72d3fab2":"# idleri liste i\u00e7ine al, \nproductsIDs = [21987, 23235, 22747]\nfor product_id in productsIDs:\n    print(product_id, check_id(df, product_id))","1bfaa5c0":"import pandas as pd\n\npd.set_option('display.max_columns', None)\nfrom mlxtend.frequent_patterns import apriori, association_rules\n#from helpers.helpers import retail_data_prep\n\n\ndef create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n\n\ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)\n\ndef create_rules(dataframe, id=True, country=\"Germany\"):\n    dataframe = dataframe[dataframe['Country'] == country]\n    dataframe = create_invoice_product_df(dataframe, id)\n    frequent_itemsets = apriori(dataframe, min_support=0.01, use_colnames=True)\n    rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\n    return rules","6ded60d1":"df_ = pd.read_excel(\"\/kaggle\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\n","d56dbc91":"df = df_.copy()","f430ad58":"df = retail_data_prep(df)\nrules = create_rules(df)","d1569326":"# \u00f6rnek olarak ba\u015fka bir \u00fclkeye g\u00f6re yapal\u0131m.\nrules_grm = create_rules(df, country=\"Germany\")\nrules_grm.sort_values(\"lift\", ascending=False).head(50)","bcc0f553":"# \u00d6rnek:\n# Kullan\u0131c\u0131 \u00f6rnek \u00fcr\u00fcn id: 21987\n\nproduct_id = 21987\n#bu ki\u015fiye ne tavsiye edersin?","73327771":"check_id(df, product_id)\n#product id buluyorsam, \n\n#enumarete geliyor, index ve de\u011fer gerekiyor.","a2041a5f":"check_id(df, 23235)\n#product id buluyorsam, \n\n#enumarete geliyor, index ve de\u011fer gerekiyor.","15a42b29":"check_id(df, 22747)\n#product id buluyorsam, \n\n#enumarete geliyor, index ve de\u011fer gerekiyor.","34ff15c2":"sorted_rules = rules.sort_values(\"lift\", ascending=False)\nsorted_rules.head()","d9c37738":"# bo\u015f liste tan\u0131mlad\u0131m.\n#tavsiye ettiklerini listeye ekleme\nrecommendation_list = []\n\n#s\u0131ralanm\u0131\u015f ilk \u00fcr\u00fcnleri gez.\n#\nfor i, product in enumerate(sorted_rules[\"antecedents\"]):\n    for j in list(product):\n        if j == product_id:\n            recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n#\u00f6nerid\u011fi ilk iki \u00fcr\u00fcn\u00fc getirdi.\nrecommendation_list[0:2]\n#sepetini ald\u0131 \u00fcr\u00fcn\u00fc\n# en tepedeki \u00fcr\u00fcnleri bana getir.","0dc09eef":"arl_recommender(rules, 23235, 5)\n","1ed298dc":"arl_recommender(rules, 22747, 5)","a85b0af7":"check_id(df, 22556)\n","62529834":"#tavsiye etti\u011fi liste kontrol edelim\ncheck_id(df, recommendation_list[0])","3456e7ee":"# bu ihtiya\u00e7 i\u00e7in yaz\u0131lm\u0131\u015f fonksiyon\ndef arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    for i, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n    return recommendation_list[0:rec_count]","1bc3b09e":"arl_recommender(rules, 21987, 6)\n","f8c5836e":"arl_recommender(rules, 23235, 6)\n","d46005ca":"arl_recommender(rules, 22747, 6)","4eca217b":"for product_id in arl_recommender(rules, 21987, 5):\n    print(product_id, check_id(df, product_id))","bb6aee44":"for product_id in arl_recommender(rules, 23235,5):\n    print(product_id, check_id(df, product_id))","a84429b4":"for product_id in arl_recommender(rules, 22747, 5):\n    print(product_id, check_id(df, product_id))","cb1b8b60":"############################################\n## G\u00f6rev 3:\n### Sepetteki kullan\u0131c\u0131lar i\u00e7in \u00fcr\u00fcn \u00f6nerisi yap\u0131n\u0131z.\n############################################\n\n\n1.  Kullan\u0131c\u0131 1 \u00fcr\u00fcn id'si: 21987\n1.  Kullan\u0131c\u0131 2 \u00fcr\u00fcn id'si: 23235\n1.  Kullan\u0131c\u0131 3 \u00fcr\u00fcn id'si: 22747","d14ec9ca":"############################################\n# ASSOCIATION RULE LEARNING (B\u0130RL\u0130KTEL\u0130K KURALI \u00d6\u011eREN\u0130M\u0130)\n############################################\n\n Amac\u0131m\u0131z online retail II veri setine birliktelik analizi uygularak\n kullan\u0131c\u0131lara \u00fcr\u00fcn sat\u0131n alma s\u00fcrecinde \u00fcr\u00fcn \u00f6nermek.\n\n 1. Veri \u00d6n \u0130\u015fleme\n 2. ARL Veri Yap\u0131s\u0131n\u0131 Haz\u0131rlama (Invoice-Product Matrix)\n 3. Birliktelik Kurallar\u0131n\u0131n \u00c7\u0131kar\u0131lmas\u0131\n 4. \u00c7al\u0131\u015fman\u0131n Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n 5. Sepet A\u015famas\u0131ndaki Kullan\u0131c\u0131lara \u00dcr\u00fcn \u00d6nerisinde Bulunmak","7e5027bd":"############################################\n# Birliktelik Kurallar\u0131n\u0131n \u00c7\u0131kar\u0131lmas\u0131\n###  ASSOCIATION RULE LEARNING\n############################################","59671451":"## G\u00f6rev 4\nSepetteki kullan\u0131c\u0131lar i\u00e7in \u00fcr\u00fcn \u00f6nerisi yap\u0131n\u0131z.\n","0267cd41":"############################################\n# \u00c7al\u0131\u015fman\u0131n Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n############################################","e95aa21d":"## G\u00f6rev 5\nSepetteki kullan\u0131c\u0131lar i\u00e7in \u00fcr\u00fcn \u00f6nerisi yap\u0131n\u0131z.\n\n1. [\"POPPY'S PLAYHOUSE BATHROOM\"]\n2. ['STORAGE TIN VINTAGE LEAF']\n3. [\"POPPY'S PLAYHOUSE BATHROOM\"]\n","4e47f5f1":"############################################\n# Sepet A\u015famas\u0131ndaki Kullan\u0131c\u0131lara \u00dcr\u00fcn \u00d6nerisinde Bulunmak\n############################################","685dd9f6":"1. yayg\u0131n kullan\u0131lan ilk 11 \u00fcr\u00fcn haz\u0131rda bekler, indexlenmi\u015ftir \u00fcr\u00fcnler. \n2. en \u00e7ok sat\u0131lan \u00fcr\u00fcnler, haz\u0131rda bekler, indexleri getirir asl\u0131nda.","0889f9a4":"## G\u00f6rev 1:\n* \u00d6nemli not! \n        2010-2011 verilerilerini se\u00e7iniz ve t\u00fcm veriyi \u00f6n i\u015flemeden ge\u00e7iriniz.\n        Germany se\u00e7imi sonraki basamakta olacakt\u0131r","ec02dd48":"1. *  antecedent support: Tek ba\u015f\u0131na X olas\u0131l\u0131\u011f\u0131\n1. *  consequent support: Tek ba\u015f\u0131na Y olas\u0131l\u0131\u011f\u0131\n1. *  support: \u0130kisinin birlikte g\u00f6r\u00fclme olas\u0131l\u0131\u011f\u0131\n1. *  confidence: X al\u0131nd\u0131\u011f\u0131nda Y al\u0131nma olas\u0131l\u0131\u011f\u0131.\n1. *  lift: X al\u0131nd\u0131\u011f\u0131nda Y al\u0131nma olas\u0131l\u0131\u011f\u0131 .. kat artar.\n1. * conviction: Y olmadan X'in beklenen frekans\u0131","4b5e165b":"## G\u00f6rev 3:\n* Kullan\u0131c\u0131 1 \u00fcr\u00fcn id'si: 21987\n* Kullan\u0131c\u0131 2 \u00fcr\u00fcn id'si: 23235\n* Kullan\u0131c\u0131 3 \u00fcr\u00fcn id'si: 22747","90787091":"Invoice"}}