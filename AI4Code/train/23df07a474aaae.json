{"cell_type":{"7ffbfa23":"code","e021f9fa":"code","40b596dd":"code","5822d66b":"code","041e0ae4":"code","091b213b":"code","719c1453":"code","400a5f57":"code","5bf5cf6f":"code","999fe7b4":"code","8e4238fc":"code","6e5e17c0":"code","03716265":"code","5c373648":"code","5071c718":"code","ff4f6806":"code","08db1fdd":"code","edf78ea2":"code","13bb7d0f":"code","1eac0f78":"code","c8c26419":"code","c7494efb":"code","09e9de9d":"code","578e87a9":"code","5ebf8741":"code","41adb9df":"code","a4a3fd73":"code","c532c797":"code","8f735e9c":"code","efbfc3cd":"code","30474af6":"markdown","ab68c5a4":"markdown","930b31fa":"markdown","81010610":"markdown","fa2b104f":"markdown","c9d9bed7":"markdown","f85f6b5f":"markdown","46ff866b":"markdown","e378889f":"markdown","4580662b":"markdown","bc5b4059":"markdown","ebc04b66":"markdown","48be7501":"markdown","50ffcf2b":"markdown","b1ed0a13":"markdown","dfa42310":"markdown","57183121":"markdown","6295c692":"markdown","3dfe0741":"markdown","b41d23fb":"markdown","d683b72d":"markdown","9a0a4f09":"markdown","19559b4b":"markdown"},"source":{"7ffbfa23":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Library for mathematical computation\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Library for modelling\nfrom sklearn.preprocessing import LabelEncoder #Encodes Categorical Data into Numerical\nfrom sklearn.model_selection import train_test_split #For spliting data into training and testing sets\nfrom sklearn.linear_model import LinearRegression #Linear Regression model\nfrom sklearn.linear_model import Lasso #Lasso regression model\nfrom sklearn.linear_model import Ridge #Ridge Regression Model\nfrom sklearn.ensemble import RandomForestRegressor#Random Forest Regression Model\nfrom sklearn.metrics import mean_absolute_error \n\n#Libraries for Deep Learning\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Flatten\n\n#Library for Data Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e021f9fa":"#Reading CSV Data\ndataset=pd.read_csv(\"\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv\")\ndataset.head(10)","40b596dd":"#Displaying metadata\/information about the dataset\ndataset.info()","5822d66b":"#loading Clean Data\ncleaned_data=pd.read_csv(\"..\/input\/spotify-cleaned-data\/Spotify_Dataset_Cleaned.csv\")\ncleaned_data.head()","041e0ae4":"#Displaying Cleaned Data info\ncleaned_data.info()","091b213b":"#Displaying Stats of Cleaned_data\ncleaned_data.describe()","719c1453":"#Sorting by Streams\nsort_streams=cleaned_data.sort_values(by=['Streams'],ascending=False)\n#Plotting Barchart about top 10 Genres and their total Streams\nplt.figure(figsize=(20,8))\nplt.title(\"Top 10 Streamed Genres\")\nsns.barplot(x='Genre',y='Streams',data=sort_streams.head(10))","400a5f57":"#Plotting Barchart about artist and their total streams\nplt.figure(figsize=(20,8))\nplt.title(\"Top 10 Most Streamed Artists\")\nsns.barplot(x='Artist',y='Streams',data=sort_streams.head(10))","5bf5cf6f":"#Sorting the dataset by Highest Charting Position\nsort_chart=cleaned_data.sort_values(by=['Highest Charting Position'],ascending=True)\nsort_chart\n#Plotting Barchart about artist and their followers\nplt.figure(figsize=(20,8))\nplt.title(\"Top 10 Highest Charted Songs\")\nsns.barplot(x='Number of Times Charted',y='Song Name',data=sort_chart.head(10))","999fe7b4":"#Scatterplot of Popularity of Genres based on Loudness\nplt.figure(figsize=(10,8))\nplt.title(\"Popularity based on Loudness\")\nsns.scatterplot(x='Popularity',y='Loudness',data=cleaned_data)","8e4238fc":"#Calculating Correlation\ncorr=cleaned_data.corr()\n\n#Plotting Correlation\nplt.figure(figsize=(12,12))\nsns.heatmap(corr,annot=True,cmap=\"GnBu\")","6e5e17c0":"#Dropping the data columns \ncleaned_data = cleaned_data.drop([\"Artist\", \"Song Name\", \"Release Date\"], axis=1)\ncleaned_data.head()","03716265":"#Encoding Genre\ngenre_encoder = LabelEncoder()\ncleaned_data['Genre'] = genre_encoder.fit_transform(cleaned_data['Genre'])\ncleaned_data.head()","5c373648":"training_data, testing_data = train_test_split(cleaned_data, test_size=0.2, random_state=25)\n\nprint(f\"No. of training examples: {training_data.shape[0]}\")\nprint(f\"No. of testing examples: {testing_data.shape[0]}\")\n\ntesting_data","5071c718":"#Dropping Stream Column From Test data\ntesting_data_stream=testing_data['Streams']\ntesting_data=testing_data.drop('Streams', axis=1)\ntesting_data.head()","ff4f6806":"#Setting training data into x_train and y_train\nx_train=training_data.drop('Streams',axis=1)\ny_train=training_data['Streams']\n\n#Shapes of x_train,y_train and test data\nx_train.shape, y_train.shape, testing_data.shape","08db1fdd":"#Linear Regression Modelling and Training\nlinear_model=LinearRegression()\nlinear_model.fit(x_train,y_train)\nprint(linear_model.score(x_train,y_train))\n\n#testing the model and Displaying the output\nlinear_predict=linear_model.predict(testing_data)\nl_output=pd.DataFrame({'Id':testing_data.index,'Predicted Streams':linear_predict,'Actual Stream':testing_data_stream})\nprint(l_output)","edf78ea2":"#Random Forest Regression\nr_model=RandomForestRegressor(n_estimators=50)\nr_model.fit(x_train,y_train)\nprint(r_model.score(x_train,y_train))\n\n#Making predictions on test set \nr_predict=r_model.predict(testing_data)\n\nr_output=pd.DataFrame({'Id':testing_data.index,'Predicted Streams':r_predict,'Actual Stream':testing_data_stream})\nprint(r_output)","13bb7d0f":"#Building the model in Ridge Regression Model\nridge_model=Ridge(alpha=1.0)\nridge_model.fit(x_train,y_train)\nprint(ridge_model.score(x_train,y_train))\n\n#Testing the model\nridge_predict=ridge_model.predict(testing_data)\n\n#Creating dataframe to store ID with prediction\nridge_output=pd.DataFrame({'Id':testing_data.index,'Predicted Streams':ridge_predict,'Actual Stream':testing_data_stream})\nprint(ridge_output)","1eac0f78":"#Building the model in Lasso Regression Model \nlasso_model=Lasso(alpha=1.0)\nlasso_model.fit(x_train,y_train)\nprint(lasso_model.score(x_train,y_train))\n\n#Testing the model\nlasso_predict=lasso_model.predict(testing_data)\n\n#Creating dataframe to store ID with prediction\nlasso_output=pd.DataFrame({'Id':testing_data.index,'Predicted Streams':lasso_predict,'Actual Stream':testing_data_stream})\nprint(lasso_output)","c8c26419":"sns.pairplot(l_output)","c7494efb":"sns.pairplot(r_output)","09e9de9d":"sns.pairplot(ridge_output)","578e87a9":"sns.pairplot(lasso_output)","5ebf8741":"NN_model = Sequential()\n\n# The Input Layer :\nNN_model.add(Dense(128, kernel_initializer='normal',input_dim = x_train.shape[1], activation='relu'))\n\n# The Hidden Layers :\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\nNN_model.add(Dense(256, kernel_initializer='normal',activation='relu'))\n\n# The Output Layer :\nNN_model.add(Dense(1, kernel_initializer='normal',activation='linear'))\n\n# Compile the network :\nNN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_absolute_error'])\nNN_model.summary()","41adb9df":"checkpoint_name = 'Weights-{epoch:03d}--{val_loss:.5f}.hdf5' \ncheckpoint = ModelCheckpoint(checkpoint_name, monitor='val_loss', verbose = 1, save_best_only = True, mode ='auto')\ncallbacks_list = [checkpoint]","a4a3fd73":"NN_model.fit(x_train, y_train, epochs=500, batch_size=32, validation_split = 0.2, callbacks=callbacks_list)","c532c797":"DNN_predict=NN_model.predict(testing_data)","8f735e9c":"#Creating dataframe to store ID with prediction\nDNN_output=pd.DataFrame({'Id':testing_data.index,'Predicted Streams':DNN_predict[:,0],'Actual Stream':testing_data_stream})\nprint(DNN_output)","efbfc3cd":"sns.pairplot(DNN_output)","30474af6":"# Cleaning Data\n\nAs the dataset is small, Microsoft Excel was used to clean the data.\nThe Following steps were taken to clean the dataset.\n1. Changing Datatypes of Data Columns\n2. Removing values with more than 80% Null values\n3. Removing Data Columns that are Irrelevant to the analysis.\n","ab68c5a4":"**Visualising the output**","930b31fa":"# Prediction on Streams","81010610":"# Conclusion","fa2b104f":"**Splitting the data into Training and Testing Sets**","c9d9bed7":"**Ridge Regression**","f85f6b5f":"**Define a checkpoint callback**","46ff866b":"**Lasso Regression**","e378889f":"**Linear Regression**","4580662b":"# Training and Testing Models","bc5b4059":"**Random Forest Regression**","ebc04b66":"**Building the Model**","48be7501":"So, this is the Streaming prediction based on different features like artist followers, genre and other features using 4 different regression models. Among this models, it seems Random Forest Regression had the prediction more closer to the actual streams.\n\nThank you for visiting my notebook and Any suggestions will be Appreciated. ","50ffcf2b":"**Predicting the Streams**","b1ed0a13":"Now we must encode Genre into Numerical value, as Model cannot train having string value","dfa42310":"First we are going to drop some data columns such as Artist Name, Song Name and Release Date as they are not relevant for prediction.","57183121":"**Linear Regression**","6295c692":"**Preparation for the Modelling**","3dfe0741":"**Training Model**","b41d23fb":"# Correlations","d683b72d":"# Visualising Predicted and Actual Streams","9a0a4f09":"# Using Deep Learning to Predict Streams","19559b4b":"# Data Visualisation\n\nVisualization Includes\n* Top 10 Streames Genres\n* Top 10 Most Followed Artist\n* Top 10 Highest Charting Songs\n* Popularity based on Loudness"}}