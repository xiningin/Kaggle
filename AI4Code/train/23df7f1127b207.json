{"cell_type":{"0ddcd5eb":"code","0d53f095":"code","fdde0b84":"code","152d2ac1":"code","47850aac":"code","cc3e5529":"code","9bc4966a":"code","343e2cd4":"code","e378179f":"code","326859ad":"code","d588e75f":"code","791f65c9":"code","3014687c":"code","7eeec211":"code","b0e35813":"code","ac3c3fe7":"code","d071bda2":"code","26d3580f":"code","4d47a6b4":"code","708f13a0":"code","8d67e113":"code","14cf498b":"code","03f87f60":"code","9d593e00":"code","6c8aaf85":"code","13cceffa":"code","b8e5ff28":"code","d7a3fef3":"code","39ceb96f":"code","5995fdad":"code","fbe9ff37":"code","1c5223b3":"code","28ac54d9":"code","73269b7e":"code","59ff2337":"code","67f75fd8":"code","f683eb06":"code","f2812b0a":"code","5689d028":"code","a5728baa":"code","561b72a4":"code","7f2c487e":"code","6b2bcc29":"code","a6e49390":"code","a05ad3d5":"code","1a07af6f":"code","5e50c878":"code","8b97671a":"code","ce6c1ea7":"markdown","14c8f5c0":"markdown","48231ed5":"markdown","9aa2a8a6":"markdown","6d1e8d1c":"markdown","0b2a8fc3":"markdown","11f896e2":"markdown","714404e1":"markdown","e6f42270":"markdown","78ff05cd":"markdown","5d364c5f":"markdown","d32974d5":"markdown","902b24c9":"markdown"},"source":{"0ddcd5eb":"import pandas as pd\nimport os","0d53f095":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf1 = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df1.shape))\n\ndf1.head()","fdde0b84":"#Discovring How many zero values in \"Distance(mi)\" column  \nzero_dist_rows = df1[df1[\"Distance(mi)\"] == 0]['ID'].count()\nprint(\"Distance(mi) \",zero_dist_rows)\n\n#Discovring How many zero values in \"Bump\" column  \nprint(\"Bump \", df1[df1[\"Bump\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Crossing\" column  \nprint(\"Crossing \",df1[df1[\"Crossing\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Give_Way\" column  \nprint(\"Give_Way \",df1[df1[\"Give_Way\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Junction\" column  \nprint(\"Junction \",df1[df1[\"Junction\"] == False]['ID'].count())\n\n#Discovring How many False values in \"No_Exit\" column  \nprint(\"No_Exit\", df1[df1[\"No_Exit\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Railway\" column \nprint(\"Railway \",df1[df1[\"Railway\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Roundabout\" column  \nprint(\"Roundabout \", df1[df1[\"Roundabout\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Stop\" column  \nprint(\"Stop \",df1[df1[\"Stop\"] == False]['ID'].count())\n\n#Discovring How many False values in \"Amenity\" column  \nprint(\"Amenity\", df1[df1[\"Amenity\"] == False]['ID'].count())\n\nprint(\"conclusion from previous analysis we will drop Bump, No_Exist, Give_way, and Roundabout because they didn't give fair info almost all of it's rows values = False\")","152d2ac1":"#Dropping  \"Bump\", \"No_Exist\", \"Give_way\", \"id\", and \"Roundabout\"  columns\ndf2 = df1.drop(columns = [ 'Bump', 'Give_Way', 'No_Exit', 'Roundabout'])","47850aac":"#Convert Railaway, crossing, stop, Junction, and Amentiy columns into zeros and ones \ndf2['Crossing'] = df2['Crossing'] * 1\ndf2['Junction'] = df2['Junction'] * 1\ndf2['Railway'] = df2['Railway'] * 1\ndf2['Stop'] = df2['Stop'] * 1\ndf2['Amenity'] = df2['Amenity'] * 1","cc3e5529":"#Convert side column R to 1, L to 0\nmapping_1 = {'R': 1, 'L': 0}\ndf2 = df2.replace({'Side': mapping_1})","9bc4966a":"#Replace Zeros values in Distance(mi) column into the mean of the distance\ndistance_mean = df2['Distance(mi)'].mean()\ndf2.loc[df2[\"Distance(mi)\"] == 0, \"Distance(mi)\"] = distance_mean","343e2cd4":"print(type(df2['timestamp'][0]))","e378179f":"#change timestamp column type to Timestamp\ndf2[\"timestamp_date_type\"] = pd.to_datetime(df2['timestamp'])\n#split date, hour, day, month\ndf2[\"date\"] = df2[\"timestamp_date_type\"].apply(pd.Timestamp.date)\ndf2[\"hour\"] = df2[\"timestamp_date_type\"].dt.hour\ndf2[\"day\"] = df2[\"timestamp_date_type\"].dt.day\ndf2[\"month\"] = df2[\"timestamp_date_type\"].dt.month","326859ad":"#To merge weather data_set and training data_Set together make same column in both to merge on it \n# make modified_date column which contain  'year', 'month', 'day', 'hour'\n# to match with weather data_set date_column\ndf2[\"year\"] = df2['timestamp_date_type'].dt.year\ndf2['modified_date'] = pd.to_datetime(df2[['year', 'month', 'day', 'hour']])\n\n#drop unwanted columns from df2\ndf3 = df2.copy()\ndf3 = df3.drop(columns = ['timestamp_date_type', 'date', 'hour', 'day', 'year'])","d588e75f":"df3","791f65c9":"#preprosessing on wether dataset\ndf_weather = pd.read_csv(\"\/kaggle\/input\/car-crashes-severity-prediction\/weather-sfcsv.csv\")\nprint(df_weather.info())\ndf_weather_2 = df_weather.copy()","3014687c":"display(df_weather_2)","7eeec211":"# fill nan values in numerical columns with it's mean accordiing to it's month \ndf_weather_2 = df_weather_2.fillna(df_weather_2.groupby('Month').transform('mean'))","b0e35813":"df_weather_3 = df_weather_2.copy()\n# Normalize 'Wind_Chill(F)', 'Precipitation(in)', 'Temperature(F)', 'Humidity(%)', 'Wind_Speed(mph)', 'Visibility(mi)' \n\nwind_chill_min = df_weather_3[\"Wind_Chill(F)\"].min()\nwind_chill_max = df_weather_3[\"Wind_Chill(F)\"].max()\nwind_chill_min_max = wind_chill_max - wind_chill_min\ndf_weather_3[\"Wind_Chill(F)\"] = (df_weather_3[\"Wind_Chill(F)\"] - wind_chill_min) \/ wind_chill_min_max\n\n#Precip_min = df_weather_3[\"Precipitation(in)\"].min()\n#Precip_max = df_weather_3[\"Precipitation(in)\"].max()\n#Precip_min_max = Precip_max - Precip_min\n#df_weather_3[\"Precipitation(in)\"] = (df_weather_3[\"Precipitation(in)\"] - Precip_min) \/ Precip_min_max\n\nTemp_min = df_weather_3[\"Temperature(F)\"].min()\nTemp_max = df_weather_3[\"Temperature(F)\"].max()\nTemp_min_max = Temp_max - Temp_min\ndf_weather_3[\"Temperature(F)\"] = (df_weather_3[\"Temperature(F)\"] - Temp_min) \/ Temp_min_max\n\nHumid_min = df_weather_3[\"Humidity(%)\"].min()\nHumid_max = df_weather_3[\"Humidity(%)\"].max()\nHumid_min_max = Humid_max - Humid_min\ndf_weather_3[\"Humidity(%)\"] = (df_weather_3[\"Humidity(%)\"] - Humid_min) \/ Humid_min_max\n\nWind_Speed_min = df_weather_3[\"Wind_Speed(mph)\"].min()\nWind_Speed_max = df_weather_3[\"Wind_Speed(mph)\"].max()\nWind_Speed_min_max = Wind_Speed_max - Wind_Speed_min\ndf_weather_3[\"Wind_Speed(mph)\"] = (df_weather_3[\"Wind_Speed(mph)\"] - Wind_Speed_min) \/ Wind_Speed_min_max\n\nVisibility_min = df_weather_3[\"Visibility(mi)\"].min()\nVisibility_max = df_weather_3[\"Visibility(mi)\"].max()\nVisibility_min_max = Visibility_max - Visibility_min\ndf_weather_3[\"Visibility(mi)\"] = (df_weather_3[\"Visibility(mi)\"] - Visibility_min) \/ Visibility_min_max","ac3c3fe7":"df_weather_3.describe()","d071bda2":"df_weather_4 = df_weather_3.copy()","26d3580f":"#craeting Date column to merge weathre_dataset with traing_dataset\ndf_weather_4[\"date\"] = pd.to_datetime(df_weather_4[['Year', 'Month', 'Day']])","4d47a6b4":"df_weather_4['modified_date'] = pd.to_datetime(df_weather_4[['Year', 'Month', 'Day', 'Hour']])","708f13a0":"df_weather_5 = df_weather_4.copy()\ndf_weather_5 = df_weather_5.drop(columns = ['Selected', 'Day', 'Month', 'Hour'])","8d67e113":"# Factorizing Weather_Condition coulmn, then normalize it \ndf_weather_5['Weather_Condition'] = pd.factorize(df_weather_5['Weather_Condition'])[0]","14cf498b":"# Normalize Weather_Condition after Factorizing it \nmin_weather = df_weather_5['Weather_Condition'].min()\nmax_weather = df_weather_5['Weather_Condition'].max()\nmin_max_weather = max_weather - min_weather\ndf_weather_5['Weather_Condition'] = (df_weather_5['Weather_Condition'] - min_weather) \/ min_max_weather","03f87f60":"df_weather_5.describe()","9d593e00":"#Merginig weather data set with trainig data_set to get the whoole dataset\n#Merging on modified_date in weather and modified_date in traing dataset\n#whole_df = df3.merge(df_weather_5, on = 'modified_date', how='left')\nwhole_df = pd.merge(df3, df_weather_5, how='left', left_on = \"modified_date\", right_on = 'modified_date')\nprint(whole_df.shape)\nwhole_df_2 = whole_df.drop_duplicates(\"ID\")\nprint(whole_df_2.shape)","6c8aaf85":"whole_df_2.columns","13cceffa":"# Extracting holiday column from holiday dataset \nfrom xml.dom import minidom\nfrom datetime import datetime \n\nholidays_file = minidom.parse(\"\/kaggle\/input\/car-crashes-severity-prediction\/holidays.xml\")\ndates = holidays_file.getElementsByTagName('date')\n\nmonth_day_list = []\nmonth_list = []\nday_list = []\n\nfor d in dates:\n    month_day_list.append(d.firstChild.data[5:])\n    month_list.append(int(d.firstChild.data[5:7]))\n    day_list.append(int(d.firstChild.data[8:]))\n    \nwhole_df_2[\"month_day\"] = whole_df_2[\"timestamp\"].apply(lambda x: x[5:10])\nholiday_list = []\n\n# creating holiday column\nfor md in whole_df_2[\"month_day\"]:\n    if md in month_day_list:\n        holiday_list.append(1)\n    else:\n        holiday_list.append(0)\n        \nwhole_df_2[\"holiday\"] = holiday_list","b8e5ff28":"print(whole_df_2.shape)\nprint(whole_df_2.columns)","d7a3fef3":"whole_df_2['month'].unique()","39ceb96f":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(whole_df_2, test_size=0.2, random_state=42) # Try adding `stratify` here\n\nX_train = train_df.drop(columns=['Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['Severity'])\ny_val = val_df['Severity']\n","5995fdad":"whole_df_2.columns","fbe9ff37":"# This cell is used to select the numerical features. IT SHOULD BE REMOVED AS YOU DO YOUR WORK.\nX_train = X_train[['Lat', 'Lng', 'Distance(mi)', 'Junction', 'Railway', 'Stop', 'Amenity', 'holiday','Side', 'Weather_Condition', 'Wind_Chill(F)', 'Precipitation(in)',\n       'Temperature(F)', 'Humidity(%)', 'Wind_Speed(mph)', 'Visibility(mi)','Year']]\n\nX_val = X_val[['Lat', 'Lng', 'Distance(mi)', 'Junction', 'Railway', 'Stop', 'Amenity', 'holiday','Side', 'Weather_Condition', 'Wind_Chill(F)', 'Precipitation(in)',\n       'Temperature(F)', 'Humidity(%)', 'Wind_Speed(mph)', 'Visibility(mi)','Year']]\n","1c5223b3":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\n\n# Train the classifier\nclassifier = classifier.fit(X_train, y_train)","28ac54d9":"print(\"The accuracy of the classifier on the validation set is \", (classifier.score(X_val, y_val)))","73269b7e":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df.head()","59ff2337":"#Dropping  \"Bump\", \"No_Exist\", \"Give_way\", \"id\", and \"Roundabout\"  columns\ntest_df_2 = test_df.drop(columns = [ 'Bump', 'Give_Way', 'No_Exit', 'Roundabout'])","67f75fd8":"#Convert Railaway, crossing, stop, Junction, and Amentiy columns into zeros and ones \ntest_df_2['Crossing'] = test_df_2['Crossing'] * 1\ntest_df_2['Junction'] = test_df_2['Junction'] * 1\ntest_df_2['Railway'] = test_df_2['Railway'] * 1\ntest_df_2['Stop'] = test_df_2['Stop'] * 1\ntest_df_2['Amenity'] = test_df_2['Amenity'] * 1","f683eb06":"#Convert side column R to 1, L to 0\nmapping_1 = {'R': 1, 'L': 0}\ntest_df_2 = test_df_2.replace({'Side': mapping_1})","f2812b0a":"#Replace Zeros values in Distance(mi) column into the mean of the distance\ndistance_mean = test_df_2['Distance(mi)'].mean()\ntest_df_2.loc[test_df_2[\"Distance(mi)\"] == 0, \"Distance(mi)\"] = distance_mean","5689d028":"#change timestamp column type to Timestamp\ntest_df_2[\"timestamp_date_type\"] = pd.to_datetime(df2['timestamp'])","a5728baa":"#split date, hour, day, month\ntest_df_2[\"date\"] = test_df_2[\"timestamp_date_type\"].apply(pd.Timestamp.date)\ntest_df_2[\"hour\"] = test_df_2[\"timestamp_date_type\"].dt.hour\ntest_df_2[\"day\"] = test_df_2[\"timestamp_date_type\"].dt.day\ntest_df_2[\"month\"] = test_df_2[\"timestamp_date_type\"].dt.month","561b72a4":"#To merge weather data_set and training data_Set together make same column in both to merge on it \n# make modified_date column which contain  'year', 'month', 'day', 'hour'\n# to match with weather data_set date_column\ntest_df_2[\"year\"] = test_df_2['timestamp_date_type'].dt.year\ntest_df_2['modified_date'] = pd.to_datetime(test_df_2[['year', 'month', 'day', 'hour']])","7f2c487e":"#drop unwanted columns from df2\ntest_df_3 = test_df_2.copy()\ntest_df_3 = test_df_2.drop(columns = ['timestamp_date_type', 'date', 'hour', 'day', 'year'])\n","6b2bcc29":"#Merginig weather data set with trainig data_set to get the whoole dataset\n#Merging on modified_date in weather and modified_date in traing dataset\n#whole_df = df3.merge(df_weather_5, on = 'modified_date', how='left')\nwhole_test_df = pd.merge(test_df_3, df_weather_5, how='left', left_on = \"modified_date\", right_on = 'modified_date')\nprint(whole_test_df.shape)","a6e49390":"whole_test_df_2 = whole_test_df.drop_duplicates(\"ID\")\nprint(whole_test_df_2.shape)","a05ad3d5":"# creating holiday column\nwhole_test_df_2[\"month_day\"] = whole_df_2[\"timestamp\"].apply(lambda x: x[5:10])\n\nholiday_test_list = []\nfor md in whole_test_df_2[\"month_day\"]:\n    if md in month_day_list:\n        holiday_test_list.append(1)\n    else:\n        holiday_test_list.append(0)\n        \nwhole_test_df_2[\"holiday\"] = holiday_test_list","1a07af6f":"whole_test_df_2","5e50c878":"X_test = whole_test_df_2.drop(columns=['ID'])\n\n# You should update\/remove the next line once you change the features used for training\nX_test = X_test[['Lat', 'Lng', 'Distance(mi)', 'Junction', 'Railway', 'Stop', 'Amenity', 'holiday','Side', 'Weather_Condition', 'Wind_Chill(F)', 'Precipitation(in)',\n       'Temperature(F)', 'Humidity(%)', 'Wind_Speed(mph)', 'Visibility(mi)','Year']]\n\ny_test_predicted = classifier.predict(X_test)\n\nwhole_test_df_2['Severity'] = y_test_predicted\n\nwhole_test_df_2.head()","8b97671a":"whole_test_df_2[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","ce6c1ea7":"## Exploratory Data Analysis\nIn this step, one should load the data and analyze it. However, I'll load the data and do minimal analysis. You are encouraged to do thorough analysis!\n\nLet's load the data using `pandas` and have a look at the generated `DataFrame`.","14c8f5c0":"## Submission File Generation\n\nWe have built a model and we'd like to submit our predictions on the test set! In order to do that, we'll load the test set, predict the class and save the submission file. \n\nFirst, we'll load the data.","48231ed5":"As pointed out eariler, I'll use the numerical features to train the classifier. **However, you shouldn't use the numerical features only to make the final submission if you want to make it to the top of the leaderboard.** ","9aa2a8a6":"## Model Training\n\nLet's train a model with the data! We'll train a Random Forest Classifier to demonstrate the process of making submissions. ","6d1e8d1c":"Now we're ready to generate the submission file. The submission file needs the columns `ID` and `Severity` only.","0b2a8fc3":"Well. That's a good start, right? A classifier that predicts all examples' `Severity` as 2 will get around 0.63. You should get better score as you add more features and do better data preprocessing.","11f896e2":"Now let's test our classifier on the validation dataset and see the accuracy.","714404e1":"Note that the test set has the same features and doesn't have the `Severity` column.\nAt this stage one must **NOT** forget to apply the same processing done on the training set on the features of the test set.\n\nNow we'll add `Severity` column to the test `DataFrame` and add the values of the predicted class to it.\n\n**I'll select the numerical features here as I did in the training set. DO NOT forget to change this step as you change the preprocessing of the training data.**","e6f42270":"\nThe remaining steps is to submit the generated file and are as follows. \n\n1. Press `Save Version` on the upper right corner of this notebook.\n2. Write a `Version Name` of your choice and choose `Save & Run All (Commit)` then click `Save`.\n3. Wait for the saved notebook to finish running the go to the saved notebook.\n4. Scroll down until you see the output files then select the `submission.csv` file and click `Submit`.\n\nNow your submission will be evaluated and your score will be updated on the leaderboard! CONGRATULATIONS!!","78ff05cd":"## Import the libraries\n\nWe'll use `pandas` to load and manipulate the data. Other libraries will be imported in the relevant sections.","5d364c5f":"## Conclusion\n\nIn this notebook, we have demonstrated the essential steps that one should do in order to get \"slightly\" familiar with the data and the submission process. We chose not to go into details in each step to keep the welcoming notebook simple and make a room for improvement.\n\nYou're encourged to `Fork` the notebook, edit it, add your insights and use it to create your submission.","d32974d5":"We've got 6407 examples in the dataset with 14 featues, 1 ID, and the `Severity` of the crash.\n\nBy looking at the features and a sample from the data, the features look of numerical and catogerical types. What about some descriptive statistics?","902b24c9":"## You're here! \nWelcome to your first competition in the [ITI's AI Pro training program](https:\/\/ai.iti.gov.eg\/epita\/ai-engineer\/)! We hope you enjoy and learn as much as we did prepairing this competition.\n\n\n## Introduction\n\nIn the competition, it's required to predict the `Severity` of a car crash given info about the crash, e.g., location.\n\nThis is the getting started notebook. Things are kept simple so that it's easier to understand the steps and modify it.\n\nFeel free to `Fork` this notebook and share it with your modifications **OR** use it to create your submissions.\n\n### Prerequisites\nYou should know how to use python and a little bit of Machine Learning. You can apply the techniques you learned in the training program and submit the new solutions! \n\n### Checklist\nYou can participate in this competition the way you perefer. However, I recommend following these steps if this is your first time joining a competition on Kaggle.\n\n* Fork this notebook and run the cells in order.\n* Submit this solution.\n* Make changes to the data processing step as you see fit.\n* Submit the new solutions.\n\n*You can submit up to 5 submissions per day. You can select only one of the submission you make to be considered in the final ranking.*\n\n\nDon't hesitate to leave a comment or contact me if you have any question!"}}