{"cell_type":{"e5d06b19":"code","5280c5a4":"code","a66f46d7":"code","19730e29":"code","1f156e08":"code","36dd83f8":"code","7c1560b9":"code","db0fefc1":"code","89057c2e":"code","5ed6fc92":"code","2a72fc8a":"code","a95b235c":"code","6a567c5b":"code","03d5a930":"code","a185571a":"code","126fe3e5":"code","23380595":"code","98d69b45":"code","6152544f":"code","ef8864f2":"code","37cb1c57":"code","0354c87f":"code","9c9b828a":"code","f420eccd":"code","39525f1c":"code","41e08eff":"code","6cdfffe9":"code","e1a46bb9":"code","96ab03d6":"code","6389f50c":"code","9f10f758":"code","83aa60bf":"code","fd32271a":"code","3b9a4e1f":"code","b1ea7c8c":"code","2b65c74f":"code","00ce806f":"code","9ce3a2aa":"code","e033b317":"code","4f948723":"code","7170a643":"code","4a42a911":"code","8e883537":"code","9597bab2":"markdown","ce7e83c5":"markdown","b1fb135a":"markdown","89eb11b0":"markdown","63d0050d":"markdown","5f5df08e":"markdown","6ac100d0":"markdown","229dffb6":"markdown","3e153514":"markdown","8c1031c4":"markdown","b783e6c7":"markdown","bb17e6e1":"markdown","cac1b0d4":"markdown","eeeaef58":"markdown","8864e6a2":"markdown","c42c0e41":"markdown","ea15ee7d":"markdown","d07a9ff7":"markdown","ff5e409a":"markdown","c955a0fa":"markdown","a40b38af":"markdown","7f197721":"markdown","93bdd549":"markdown","9366c6c5":"markdown","6d34cfa5":"markdown","14c65995":"markdown","9353f064":"markdown","eeb8b67e":"markdown","9b33f649":"markdown","0794b607":"markdown","c5fac040":"markdown","a5b9fe43":"markdown"},"source":{"e5d06b19":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nimport xgboost as xgb\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nimport catboost as cb\nimport lightgbm as lgb","5280c5a4":"df = pd.read_csv('..\/input\/insurance\/insurance.csv')","a66f46d7":"df.head()","19730e29":"df.shape\n","1f156e08":"df.describe()\n","36dd83f8":"df.isnull().sum()\n","7c1560b9":"sns.set()\nplt.figure(figsize=(6,6))\nplt.hist(df['age'])\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Number of patient')\nplt.plot()","db0fefc1":"sns.set()\nplt.figure(figsize=(25,6))\nsns.barplot(x=df['age'] , y=df['charges'])\nplt.title('Age vs Charges')\nplt.xlabel('Age')\nplt.ylabel('Charges')\nplt.plot()","89057c2e":"sns.set()\nplt.figure(figsize=(6,6))\nsns.countplot(x=df['sex'])\nplt.title('Male and Female count')\nplt.plot()","5ed6fc92":"sns.set()\nplt.figure(figsize=(6,6))\nsns.barplot(x=df['sex'] , y = df['charges'])\nplt.title('Sex vs Charges')\nplt.plot()","2a72fc8a":"sns.set()\nplt.figure(figsize=(6,6))\nsns.countplot(x=df['smoker'])\nplt.title('Count of Smoker')\nplt.plot()","a95b235c":"plt.figure(figsize=(6,6))\nsns.barplot(x = df['smoker'] , y = df['charges'],hue=df['sex'])\nplt.title('Smoker men and Women vs Charges')\nplt.show()","6a567c5b":"sns.set()\nplt.figure(figsize=(10,6))\nsns.distplot(df['bmi'])\nplt.title('BMI distribution')\nplt.plot()","03d5a930":"sns.set()\nplt.figure(figsize=(10,10))\nsns.scatterplot(x = df['bmi'] , y = df['charges'],hue=df['sex'])\nplt.title('Mens and Womens BMI vs Charges')\nplt.plot()","a185571a":"sns.set()\nplt.figure(figsize=(6,6))\nsns.countplot(df['children'])\nplt.title('Count of patients with number of children')\nplt.show()","126fe3e5":"plt.figure(figsize=(6,6))\nsns.barplot(x = df['children'] , y = df['charges'])\nplt.title('No. of Childrens vs Charges')\nplt.show()","23380595":"sns.set()\nplt.figure(figsize = (6,6))\nsns.countplot(x=df['region'])\nplt.title('Number of patients in each region')\nplt.plot()","98d69b45":"sns.set()\nplt.figure(figsize=(6,6))\nsns.barplot(x = df['region'] , y=df['charges'])\nplt.title('Region vs Charges')\nplt.plot()","6152544f":"sns.set()\nplt.figure(figsize=(6,6))\nsns.distplot(df['charges'])\nplt.title('Charges distribution')\nplt.plot()","ef8864f2":"trf = ColumnTransformer([\n    ('trf',OneHotEncoder(sparse=False,drop='first'),['sex','smoker','region'])\n]\n,remainder='passthrough')\n","37cb1c57":"x = df.drop(['charges'], axis = 1)\ny = df.charges\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2 ,random_state = 0 )","0354c87f":"x_train.shape,y_train.shape","9c9b828a":"x_test.shape,y_test.shape","f420eccd":"models = [\n    ('Linear Regression', LinearRegression()),\n    ('XGBoost Regressor' , xgb.XGBRegressor()),\n    ('Random Forest' , RandomForestRegressor()),\n    ('Decision Tree',DecisionTreeRegressor()),\n    ('Cat Boost' , cb.CatBoostRegressor(verbose= 0)),\n    ('Light GBM',lgb.LGBMRegressor())\n]","39525f1c":"result = dict()\nfor name,model in models:\n    pipe = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',model)\n    ])\n\n    pipe.fit(x_train,y_train)\n    y_test_pred = pipe.predict(x_test)\n    result[name] = r2_score(y_test,y_test_pred)","41e08eff":"result = pd.DataFrame([result]).T\nresult.rename(columns={0:'R2 Score'},inplace=True)\nresult = result.sort_values(by = 'R2 Score',ascending=False)\nresult","6cdfffe9":"sns.set()\nplt.figure(figsize=(20,5))\nplt.bar(x = result.index , height = result['R2 Score'],width=0.6)\nplt.xlabel('Models')\nplt.ylabel('R2 Score')\nplt.show()","e1a46bb9":"import optuna\ndef objective_cat(trial):\n    param={\n    'iterations' : trial.suggest_int('iterations',100,200),\n    'depth' : trial.suggest_int('depth' , 2,8),\n    'learning_rate' : trial.suggest_float('learning_rate',0.03,0.1),\n    'verbose': 0,\n    'l2_leaf_reg' : trial.suggest_categorical('l2_leaf_reg',[0.2,0.5,1,3])\n    }\n    \n    pipe = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',cb.CatBoostRegressor(**param))\n    ])\n    \n    pipe.fit(x_train,y_train)\n    \n    y_pred = pipe.predict(x_test)\n    \n    return r2_score(y_test,y_pred)\n\n    ","96ab03d6":"study_cat= optuna.create_study(direction = 'maximize')\nstudy_cat.optimize(objective_cat, n_trials=50)","6389f50c":"best_param_cat = study_cat.best_params","9f10f758":"def objective_xgb(trial):\n     \n    n_estimators = trial.suggest_int(\"n_estimators\", 1000, 5000)\n    max_depth = trial.suggest_int(\"max_depth\", 1, 10)\n    learning_rate = trial.suggest_float(\"learning_rate\", 1e-6, 1e-1, log=True)\n    gamma = trial.suggest_float(\"gamma\", 0.1, 1.0, step=0.1)\n    min_child_weight = trial.suggest_int(\"min_child_weight\", 1, 7, step=2)\n    subsample = trial.suggest_float(\"subsample\", 0.5, 1.0, step=0.1)\n    colsample_bytree = trial.suggest_float(\"colsample_bytree\", 0.5, 1.0, step=0.1)\n    reg_alpha = trial.suggest_float(\"reg_alpha\", 0., 1.0, step=0.1)\n    reg_lambda = trial.suggest_float(\"reg_lambda\", 0., 1.0, step=0.1)\n    \n    \n    model = xgb.XGBRegressor(n_estimators=n_estimators,\n                         max_depth=max_depth,\n                         learning_rate=learning_rate,\n                         gamma=gamma,\n                         min_child_weight=min_child_weight,\n                         colsample_bytree=colsample_bytree,\n                         subsample=subsample,\n                         reg_alpha=reg_alpha,\n                         reg_lambda=reg_lambda,\n                         n_jobs=-1\n                         )\n    \n    pipe = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',model)\n    ])\n    \n    pipe.fit(x_train,y_train)\n    \n    y_pred = pipe.predict(x_test)\n    \n    return r2_score(y_test,y_pred)\n\n    ","83aa60bf":"study_xgb = optuna.create_study(direction = 'maximize')\nstudy_xgb.optimize(objective_xgb, n_trials=100)","fd32271a":"best_param_xgb = study_xgb.best_params","3b9a4e1f":"def objective_rf(trial):\n    param={\n        \n        'max_depth' : trial.suggest_int('max_depth',2,10),\n        'n_estimators' : trial.suggest_int('n_estimators',100,3000)\n        \n    }\n    pipe = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',RandomForestRegressor(**param))\n    ])\n    \n    pipe.fit(x_train,y_train)\n    \n    y_pred = pipe.predict(x_test)\n    \n    return r2_score(y_test,y_pred)\n    ","b1ea7c8c":"study_rf = optuna.create_study(direction = 'maximize')\nstudy_rf.optimize(objective_rf, n_trials=100)\n","2b65c74f":"best_param_rf = study_rf.best_params","00ce806f":"pipe_cat = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',cb.CatBoostRegressor(**best_param_cat,verbose=0))\n    ])","9ce3a2aa":"pipe_xgb = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',xgb.XGBRegressor(**best_param_xgb))\n    ])","e033b317":"pipe_rf = pipe = Pipeline(steps=[\n        ('step1',trf),\n        ('step2',StandardScaler()),\n        ('step3',RandomForestRegressor(**best_param_rf))\n    ])\n\n","4f948723":"pipe_cat.fit(x_train,y_train)\npipe_xgb.fit(x_train,y_train)\npipe_rf.fit(x_train,y_train)\n\ny_pred_cat = pipe_cat.predict(x_test)\ny_pred_xgb = pipe_xgb.predict(x_test)\ny_pred_rf = pipe_rf.predict(x_test)","7170a643":"print(f'cat {r2_score(y_test,y_pred_cat)}')\nprint(f'XGB {r2_score(y_test,y_pred_xgb)}')\nprint(f'RF {r2_score(y_test,y_pred_rf)}')","4a42a911":"y_final = (6*y_pred_cat + 2.5*y_pred_xgb+ 1.5*y_pred_rf)\/10","8e883537":"print(f'final {r2_score(y_test,y_final)}')","9597bab2":"Creating pipeline for each model with best parameters","ce7e83c5":"* Splitting train and test state. We have made 80 - 20 split.","b1fb135a":"# Exploratory Data Analysis","89eb11b0":"R2_Score of each pipeline","63d0050d":"People who are old have record of large medical costs which is not surprising.","5f5df08e":"It is suprisingly clear that there are more number of teen patients of age around 20-22. Lets see what are the charges like for each age group. ","6ac100d0":"As can be seen from above snippet , Catboost, LightGBM , RandomForest and XGBoost are the top performing models. We can visualize the same as below.","229dffb6":"Medical cost for mens is slighlt higher as compared to womens but there is no significant difference. Let's check how many smoker mens and womens are there.\n\nFirst let's see how many smoking and non smoking patients are there.","3e153514":"Lets see how many Mens and womens counts are there in our dataset.","8c1031c4":"From above graph it can be seen that, medical cost for smokers men and women is almost 3 times as compared to non smoker men and women.\n\nLet's check relation between BMI and medical cost.","b783e6c7":"There are almost equal count of mens and womens. Lets check if there is any relation between sex and charges.","bb17e6e1":"We have 3 categorical columns - Sex , Smoker and Region. We are using Onehotencoder to transform this categorical features into numerical features. \n\nWe are not fitting or transforming features right now. We have just made one transformer which does job as we have specified which is onehotencoding specified features. We will be using this created transformer 'trf' in pipeline ahead.","cac1b0d4":"Now lets analyse each column of the dataset and see if we get any hidden information or is there any correlation with target feature.","eeeaef58":"# Model Building  - Optuna tuning - Bleding","8864e6a2":"* Blendin all the 3 pipleines by weighted average. Here we have given more weightage to CatBoost model as it is giving high accuracy.","c42c0e41":"fitting and predicting using all the 3 pipelines","ea15ee7d":"There are almost same number of patients from each region but slightly greater in southeast region. Let's see what is relation between region and charges.","d07a9ff7":"From above plot it is clear that, mens with BMI in range (30 - 45) have hight medical cost as compared to women.","ff5e409a":"Finally , let's check how charges are distributed.","c955a0fa":"Above graph describes number of patients with children count = 0,1,2,3,4,5. Let's check if number of childrens affect the medical cost.","a40b38af":"We will be using CatBoost , XGBoost and RandomForestRegressor .\n\nHyperparameters are tuned for each model using optuna as shown below.","7f197721":"# Importing required libraries and dataset.","93bdd549":"There is no any significant difference in medical cost based on number of children patient has. ","9366c6c5":"Converting dictionary 'result' into dataframe.","6d34cfa5":"Let's check how many number of patients belong to which region.","14c65995":"**Yay !! No Null Values !**","9353f064":"Now here we have made one list containing tuple, where each tuple contains model name and model itself. \n\nWe will be using this **models** list to fit and predict using each model and find top 3 models based on R2_score for blending and tuning.","eeb8b67e":"In below snippet we have created pipeline which contains 3 steps - \n\n1. Transformer that we have created earlier which is encoding categorical features\n2. Standard scaler used for standardizing all features as there are some features which have wide value range i.e age (18-64) and features which have small value range i.e children (0-5).\n3. model used.\n\nThis pipeline is fitted and used for prediction with each model from 'models' list and r2_score for each model is stored in result dictionary.","9b33f649":"Thats it from my side. Thanks for reading till here. If you have read it till here then i hope you liked it.\n\nIf you find this notebook interesting or helpful then please consider dropping a comment.\n\nIf you want to add anything related to this notebook , feel free to reach out to me.\n\nThanks and peace out !\n\n\n\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBUVFBcVFRUYGBcZGRkZGhkXGiEgIBkZFxcZGRkaGiAjICwjGiAoIBkZJDUkKC0vMjIyGSI4PTgxPCwxMi8BCwsLDw4PHBERHTEoICgxMTExMTExMTExMjExMTEzMTExMTExMTExMTExMTExMTExMTExMTEvMTExMTExMTExMf\/AABEIALcBEwMBIgACEQEDEQH\/xAAcAAAABwEBAAAAAAAAAAAAAAAAAQIDBAUGBwj\/xABMEAACAQICAwsHCAgGAgIDAAABAgMAEQQSBSExBhMiQVFhcYGRobEHFDJCUsHRYnKCkqKy0uEVIzNDU5PC02Nzo+Lw8YPDs+MkRFT\/xAAZAQADAQEBAAAAAAAAAAAAAAAAAQIDBAX\/xAAtEQACAgEEAQIEBQUAAAAAAAAAAQIRAwQSITFBE1EiYYGRFHGhwdEFMkKx8f\/aAAwDAQACEQMRAD8Av2ibiKAcgZR96MGgIn4lHTmDdytUk4uIesnUo9y0w+KgbUdfQsnurhOgSJnH8T6sijtCmh50vrPl5izH7yCiZYfVLj5qyfho1UcUk3Y34aBh76W2DN9S3ZmvTTYKM62hT6KN3lSaeMd9sjn50ZbxWiEYGzL0mBfw0AMDCxjZHIvRLIo7CRTUsEJ1MWB5yj\/eBvUxteosp\/8AFbw10Xm6nVfryyjwNADugNGxCRmW7cCxDxxgDMQb8FRyHVVpiNBQOLNHb\/Ld4\/uMtI0BhVRXIvwiB6\/qg+2T7XFVtavMzzksjplroojuXg9VpR\/5pD4vTEu5k+rKx5i8g7w58K0lqKpWfIvI6RjptzE51Z1I\/wA6Wok25eUbQpHF+slNuw663lC9aLVTXaQtpzmXQ4U8IwqflLIfFqCYCxGWSEX40wpJ7c3urorHiqLJo+JvSiQ8+UeNqtaxeUG0yLYMtqbEyW5EiCjvU0saKi43lf51h4Fa0n6IhvcRgdBI99U+Kx+DjbLvwBGo2VmseQkXArSOqxv3+xcMOSbqKb\/LkYhwmGXZGpPPY\/eZqeEyJ6MKjnUDuCgVMiwauoZJA4OxhbX3Gj\/R3KgPUn4L1os+J9NGcoSj2iG2Pb2T1o591NtpN1OpY\/DxNWIwCcUVuoDwAp1MM3EPtN\/cFbLnoiyrj0qxO23RkPgb1LXFSn0WbsHwqacOeMA9p8ZKaaEeyvWF\/Oq2sVjO+y8ebqVtfYtqQzyHiPWT71qXvI9pOwU8iD2l7x4U6CyozSbc3VvgHjQSWTjL\/wA1PjVy1+Jh2t8KRl5X7\/iaNoWV+WQ7GbtU\/wBVKXDyH1m7PzqcLD1+786WD8ofU\/KjaFkA4aTlP1fyoxhZONvsGp5I42+zSHePlPfT2oVkVcK3KOtGo2wjfJ+rbxU08Jo+Q9h+FKGIHP2CikFsieZvyL\/z6NCpm\/8AT2ChRSHZQKjH2R9Ij3tTyRSH1gehgf8A11W73LtDgj5KqfFaaOJkBsW2cqAeCVjZRcNHINpX\/nRlpDSkbXA6n\/uVTHSpB9KK\/Og8f+qbOmpBclYyOUKPzp2FF0JQT+0N+a48SacRlOrO\/ap9xqswOM3ziF+YfAVPM4UcIHt\/KlY6JKJzself9tFIiDW1h0yAVAfHxnVr6v8AqwqO6xnjk18Vh8Ke4VGz0WoEa5dhudt73PL0AVLzU1BEERUGxVVR9EAUuvEyT3TbNUhYNHam6F6lTHQsUVJvR56NyCgyKK1C9BjT7AqN0srJhnKnKTlW\/shmCseoE1iJMBh95kmExzKVVEIALNqvquTlsdurYeiug6Uw2+xOntKQL8vF32rkmMvGxV0YMDYiw29tbYaVqrPe\/pNODW7a07dVyuOCXgdJNAQ6tbhDMt9TA6iLbLjbeuhaG0qJr6rEaiOcVyVM0ji4sq\/86zW\/3GwNmZ+I1GoxJU\/Iv6rsb3Ls2OWgUFKUUeWsotrlHhMb3pTxUN6Xk8fjTlC1bxz5I9SYtqG97tsA7W+Jpp2ceqD0MfjUk0RraOsyrumR6aK6bFFdsZ6QCfA1BfTEd7GwPJwr\/eq+KU1Oi5SzWIUEm\/IBetY66XlC2IrIMbG2wX+k495FP77GNodehmPurOYKRlUMTfjtmPvpxMS0ra8vWL9VwRXe5URRoxZhwHbrzVCmdx65HFtPxp5c6JdQt7cV\/jVVjsQ+vZ2E\/lSchpC5MZIDbP12PvJp3BYt3OsXHLltWfbEgWudp4R2e41dNisq2S1ratY7aW4dFp5wnIfqihWWOPb2u9fjQo3BtBNBFtCsvOJB8KSJCNkkv1kfxIqdJGoXNmzDkjVPGkq0ZsSL9at\/RSGQXNzrLnphQ+DUhMFGTchj0RyDwktViVQ68gI58o\/ppMhiUXKjsv4C9AEP9GptCEc4EgPfejbDkC2+SdBaTw3u1SI8bE2rIT1N+VGmLiGre7dX50AQXRydcg+khJ74qm6JwjNNEN8UjOCVEYFwvCI9DkHKKS+NhGrJfpVdlW+5iRJJSViy5VJvlXaSF1Ec16zytRg2BpyKKlmitXjbTSxAFC1YjdbuRxmIxBxEGM3uyKI0LOuUj0grJsBPCvbabbAKocVpjTuCjYzIskYH7VkVwl9QbNGQdvtiumOkU0ts1ft1\/wBJeSu0dVtQIrl+5zynqsYTGCR5AT+sjVNanWMygrYjZqGvVWx0fuywM2pMTGpvbLJdDc8QzgX6r0smjywdNfYFkiy8aiD0tbEXGsHYRsPQaQUrmacTRcgLVW6W0NHOLsBm5SKsstGBUtlwnKDuLpmPXcgb63FuQaq1OBwixIEXip+1Falb8jnklPti6O9NilU1IzoOjpINGDVJhQZFFQLUV6e5CoOqrdPPveDnJOW8ZS\/IZCIx3sKtKz+7Sa0CIBfPKoIvbUoL37VWtcHxTivmTLhGW0c7BBaZOhiR94WqXeQbFQ\/MlS\/Zf3U9g0IH7O\/QVN+1qkCAHbBq6IzXsMzIY0hOmspKBzqzDtFEdNRsLSKBykNY9jAVNfBptEFuhQO8WoPgyRqEgHS2rvtRQWVMsUchukgHzlbX1i4PbTuGhlQZQY5E4gDr6tfdrqW2i1J1qSedYz969GNFRj1W+qgHdSodle8Os\/qpR0Lq6tdCrHzFOR+0\/ioU6CygglkUXCIp5VJXuUqO6pEmPlt6eY8hQNfobKLdpq5Ohl9p\/wCWfw0htBJz9af7ae0LKjDzs9s6ZDyrIvgST2UtjckFEdeVh3Wvc9N6thoOMC9l6479+WlDRkd\/RQj\/ACj7hS2hZSmCHbZFPyGHhc+FQ5JFVtVyOUKR16xY1qDgI\/Zj\/luD3UpcItra+pZV\/qp0KzPwY64ILEj5mvqAW9arcLh7JNJZuE4UZ1ykhFvccou5181RRg0HrMOnffDPWp0XEEiQDjGbj9Y349fGK5tU6hXuVHsl0k0qiNeWWJrE+VjG73gCnHLJGn0VJkJ\/0wOutua5f5TScTjsFggTrsWt\/jOEv0hEJ+lXTpIJ5Vfjn7EZH8Jqdze5+HzDDRzQxyERq5DorENJeRto1G7nsqHpHyaYGS+VJISf4bm31XzC3RatRpPHJh4ZJXKqsaE6yBsBKqOUm1gOOsP5Hlc4fESuztnlA4RJ4SoC7a+Ni4uePKOSrjLJtlkUmufvZLStRokbmNw0uCxQePFloLNmjylS5KlQGAYobEg5tvBtatw1YrSO6af9MQ4KJl3uyiVSoJYsjSMc20ZUCkWtrJvfi1WldIxYeNpZnCIvGdpJ2Ko2sx4gKjULLJxcuW1wXBxV0SrUFWqLc1urw+NLrFnVk1lJFAJUmwYWJBF+fVcctXzMALkgDlOoa9QrmlilCW2S5KUk1aDtSbUsiiNTQ7GyKIinLURFS4jsRajo6BqaCxBoUq1ERUtDBesjuycNLDGUL5VZ7fOIUE\/VbtrXAVg9NYxzjpAiZsgjTaNfADnbzuR1V26CDeW\/ZMjI+CwwSQ2\/ZRX5GU\/lUqaSNdkEfTvfgSCO+oA0jKBrhYj50fhnFNHGsT+wkX5rRj\/2169mVC30yFP7BLc6KPcKSunWvqiiXkORfe1Gcbq4UDn5zxf3LVExaROLjDPfmePxElFsC5w0kkmvfVF+JI1v41JMBH71m6FjH9JrDS4KS90jkXm3wHwapEK44eiJDzE5vE0WBrN9A45OyP8At0Kz+\/4\/+H9lfjQothSNT59yhOoRe9qScV8wdO9D31BeKU\/u4z82UH3UFhl\/gn6Mg+FVbFRNEx5Yu2OlHFH\/AA+1PcpqvJkH7mQ9P\/VAyTH0cNbq19+qlYUWkeNB4l6tf9FOtjgNZyjpa3ioqgZsUTbezbksB4PTY0bOxvvRH\/PnGnuYUX40rGSAGW5NhYqdZ5qvrWrMaH0U4kVnUWBvr4raxxctagiuHWSbaRcUEaKlWoVw0UJtXLNyn\/5mmsRij6EWfLzfuYx1oGa3KK6nTEGEjjLFI0Qu2Zyihc7cbNYcI85rXFk2Rkq5ar+SZK2jD+WCWMYJFb0zMpj17MqNnY8oym3Swqk0duAx6RRyYfGb27ojsmZ48rMoJUlCwYi9tYGyujaa0Bh8XvfnEYk3tiy6yLXtmBsRdTlFwdthVpW8NT6eNRh87sThbtnJPJjDJLpDETzPvjxoVZyb3dmEYa+rVlRxe2w1V6d09DpDHqJ5TFgoyQhAYkqNrWUGzOfWIsq24xrdw2jsbgcDilaCQPiJIocy8IhFEpdgFvqbNkB+WeMC+x3ObgMMMHGmKhDzNw5DcqyFrWQMrA2UWFr2uGPHXZOeOMt7fyVV9WjJJtUig3DiL9NT+b5d5EcmTJ6JUGIauUX11D8ruk8+JTDg3WJMzi+rfH4WsbLhMuv5ZqV5NdHxjSWLIuFgEixgnYplKa+NrKLa+XlqNuZwJ0jPpOfbnjkWO42NMSYvqrGB106isrm\/CX6hzto2OC3S73oePGNw2SFUsfWkVt519Li55r1M0TujZ9GnGzIqssckmVbgPkLBctySA2UWuTtrjzaaZ9HR4JblvOWcD5BQZF5Dd3c9QrovlHcYTRcWET1jHF9CJc7HnuyJf51Yz08VJRrmTf2KUnV+yLvcLpubG4UzTIitvjIuS4VlULrsSSLEsu31a0ZFch0Lu4ljw0ODwOELyKnCZgzkszFnZUTXbMxsS3JcVodzeidLPiUxOMxBRFJJhzDhggixjXgAa9pJbUOOsM2lqUpOorwio5OEjfZaK1LIorVw7DWxFFal2oWo2jsSq1zjBqss0sm+EB5XIseLMcuxhxWroGlMTvcMsnsRu46VUkd9YXcvgA0Yvvii3tX+8DXo6GFKUvoZZHyi5TAxkftH\/wBQ+D04mAQejJbpWT3k01icIEH7T6yx+5arDpQIbWiPKQD7hXZaEW7Ya2sTjrJH3kNEMI7fvQfpL\/bqLh9LBrcEdIbUPChisWo2sluXM34rUWgJ3mj+3HbncfgFNPhGP8Lszf1iq6DFBzZcwHtJlYd6e+pchy6ziB9IIPACi0FCjgJfZj\/lf\/ZQqL5+fajPW3uoUcAWbJHb9n25lpotHxBOpz8KZVYL3vbomYd1PrEltUsn8xW8QaBCTGh\/dsefN8TSkgj41YfSU9wob0PbHWqHwUGmnDfxAPokeDigY88EXtP1IT\/TTORB+8lH0CPAUkIeN\/8A5P7hFOb2w15u5j4k0AWegIgXZg7tZbWbVbMduweye2r2qzQMRWMkm5ZjxW1CwtsHHerM15mo5mykCiNHQtWNFFbpfTMGERXxEgRWYIpIJuxBOwAm1hcnYKsL1kfKdooz4B2VbtCwlAG0qoKyfYZm+jT3k800MTgo9f6yILFIL67oLI3PmUA35cw4q2eJelvXvT\/Yjd8VGmoUusfpvdiYsfDgoYxIzsglNzdM52LbVdV4ZvqsRz2zhilN1EpyS7NdehejtQtUUMp8ToGMJijh0SKbEI6tIBtd1YBjycI3Nht16zUHcFudfA4Zo3KmR5C7ZCSoGVVVQSATYLfZtY1phQrX1Z7XG+\/2J2q7ObnyduNJLOrJ5tvomKknMCGz72Fy2Izcd\/RPKKh7tT57pfD4NdaR5Q\/S1pJv9NVHTfq6pVPhNzmHixUmLRCJZQQxLEjhEFio2AkgXPhc1vDVO90u0qX5kuHhHPLnQ2leTCYjsVGbxjY9OQ\/KrrNUG7Tc4MdhzGCFkQ54nbYG2FWtrysNR5NRsbWqXuZwMsOEiincO8a5Sy7LAnItyATlXKt7a7VOacckIy\/y6f8AI4pxdeC0oUKFcxYdqKhRimBnt3WIyYKQXF3aOMX47uCw+qrVhsNPOFtHktb1ZVB7DatN5R5rjDRAjhSPJr\/w1C6\/5vdUbR0HBF2TtH4ddenp41jXzMm\/iK2DDsSDPFM3OuV\/BjqqSyIvoxsvzoG8TGfGrgwoOOP6o8clIMMZ2ZL9I\/BWlDIGdbcMSE8RI4I7ADVfiXYE5N7U8oAB676++r7zWxuAvd+EUsRnjVeokeBFKh2Y2TEYgnXJccgdffVhgZItskUjf+SMjsLVoGg5APrH+5SDhjyfab+7RQiHlwn8Ijqi\/FQqT5oeT7Tf3qFOgsmmaPl7Glot+S3F\/MYeIp14+TezzOlj2rYCozLyxMPlJZ18L07ELzA7Mn80fClNbVwU\/mJ7xUN9epQG+yew2NR8RhXtcAjmZmB6tdKx0WeccSr1SxULMf3N+iVPw1RNG66yotzsfe9KwlnkSPKAGZV4JU+kQL8tG4KOh4GPLGgtbgi422J1kX49ZNPUdqKvLk7bZQKBoUKkYK5FpXDSaFxwxEQLYSYkFBxA8Ix8gZdbIeQEe1frtZDyj6Yw0WEeKZd8eVSI4wbG42SX9QKbG\/KLa9ddGmk1LbVp8NETXFg3U7t4cNhUliZZXmTNCvFb23G0Kp1W1EkW1ayKjcFoLzdJNJY1gsjhmBkNjGjm7O\/I7k7NoBttYgVfk73DFimLxaWQWaKJh6Z2iRxxLxheMm51bXt32KlxuPi0ZE2VQVLk7C5j3wsfaCR6wOUnmt0KEE3jg\/m38vYi32\/oXx8p2Az5by2v6e98HptfPb6NazA4xJkWSJleNhdWU3B12PQQQQQdYItWck3HYCHBskkUZCROWmdVEmoEly4FwRxWPEBWc8lukTDo7Fyv6ETM4+cIlZlHSQvW1ZSxY5Qcsd8OufNlKTT5Omqw12IJGo8x5DSq5v5HsK5jxOKcktLIFJPrFAXd+clnIvzGpuk90GJj0zDhs4MEirwMo9dXGYm182Zb7bW4ttRLT1OUE+lY9\/Fmyx+KEUUsra1ijeQgcYRSxHdVRuN3RefwNLve9lZGjK5swuFR7g2HE44uKovlIxu9aOm165MsQ587AN9gPR+TfBb1o6C4sZA0p\/8AI5K\/YyUljXouT7ukG57qNRQoVit2u7cYVxh8OglxLWFrEiMt6IIGt3NxZByi\/EDnjxSm6iU5Jdm0tRVy\/e90IAnLXykNvP6u7C\/olFFiLbRmDW56N92+lcPwsVgRvY2kRugH07uo6xW34ST\/ALZJ\/Un1F5R0+1GKz25jdfhsaMsZKSgXaKTU1uVTscc42argXrRKKweKUZU1yVuTVo5xu5xt8ciWuI4l49jOzMeMcWSpGG0mtrFftsP6qotIYppNIYl1YW30oL2t+qAi4x8ir\/D4mS3oxHpC+61erW2KiZx55HVxsRNitj\/msf6DTqGIj0mH0kPigNIDX2xR\/Rcj+qmTAL6omHJllX3g0FE1QgGppB0xg+CkU2TGNki3+UhHuFQXwx273KL8eeM+4U22Cc7DKOlEb+sUgLJI2PomI9ZH9VKbDTA6olPzWf8A6qpXR0nP1wL7np1IJFO3X81195o5Al+bS\/wT\/MP4aOo++y+0frv8KFOwH0UerPHzAlv6jbupQLbTNCese4ipCb2w9CC\/Qp9wNPWiX93Hf5Kn3UgI+Zj7D9DDwLGmnSQbIQB8lyO5VF6kPiIPWjv\/AM+dUOWbCA64mvygn3PRwAp2YazE3Ul+8i5qVoKKN51O9WKgtmKAW1W1G227Cqg4zCA6opOkM48HrR7kGjcSPGri1l4Ts3OQLsbcVRkdQbGaSiNA0K80YRoUKFUBQbr900WAhztZpWuIo7+kRtJ5EGq56BtNY3cduXlxkv6Rx5L5iGijcenb0WZfVjHqpx7Tq9KyG4ubEaSkxOOKPCjfqkBuHVWJjVltwUUG7A+kxO0E1v66HOOKG2Hb7f7IzpydsFc63ZbmcWuMXSGBGaWwzpquGVMmYBjZlZLKVGvVfjuOiEUKxx5Xjdotqzk2KwmmdJ5Yp083hBBe6lFNje5UsXkI2gDg3A2bRod1mhlwmhZYIASq5Cx9ZrzIXdrcvHxADkFbekyRK6sjqGVgVZWFwykWII4wRWv4ltrikndInYZLyb4qFdFxHfFAi3zfSxA3tjI7nPyCxBBPFaszudmOkdNPi1B3mAXUkeqEZIxzFiWk5rEVNxfknjMpMWJaOIkExlMzCxvZWzAG19RYEjnrcaC0JDg4hFCtlGssdbOx2s5trOrmA2AAVpPJjjulB25fpfZKTdJ+DA+VnEtLLhMCh4TsHPzpG3qPxc9ldJw0CxokaCyoqoo5FRQqjsArHR7lpn0w2NlKmFADHY67iMIqlbast2a\/LblNbes80ltjCL6V\/VlR7bKzdHpUYTCyzmxKLwQfWdiFQdbEdV6xPkr0GGVtITcOWR33tm1kC5EknzmbOL8gPtGrDyuK3mAy7BPEX+blkA+2Upg7ro8Bo7R7CIyLJGinKwXLkRd94jdsxNhq2HWKvHGXo\/B23X0E2t3PguNzg0n5zOcYYxBrESrk25+CUy8LLkvfPrvbnqTpHTzR4yDCrhpHWVbtKL5U1sLeiQbZbtciwYbavEYEAg3BAIPKDsNKrBzTdtL6cF0cs8oe58YRo9IYQb0yyLnVNSqxvkcDiBPBZRqOYatbX6PorSSy4ePE7FeNZCPZuuZh1ax1VjvK9pFY8GsNxnlkU2+RGc7N9YIOup2MU4PQZRzldMKIzyiSUBCOppO6ulJzxwcu7r6GfTdGC0HNK5MmUlnJc2A2uSx9YcZrX4aSa3oW6R8JKx+hdI5VFlJ+kqjvq3bTB\/hrbnlv4CumXZUejRrPMOL7J\/uUHxkwHonsb41nRpeS\/BjU\/WbwpaaUm9hLfMP46i2VRcHGz\/w7\/Rf4022JmJ\/Z6v8ALfwN6rTpGbXwUvx\/q\/8A7NdRpdLyL6sd\/mkf+ymBdiWX+CP5R+FO+dSj9yOpLe6s6unpTqyIe3X0cO1SotMSbRCBy69vYppWBc+dy\/wv+dlCq\/8ATj\/wm7\/wUKLCiA26mRzYRRP0XPuNqWmnpv8A+VbcxYDrsKaOigpuqzKf8Nww5vTQE9tLG\/gZWluONZIY28JAeyikA+dNyn\/9ZP5x99\/ClfpNjYeafVkTX9moDwlDcCI86xyjwDijeVj6q6uMNIvd5uKKGTHljb0sDN0qVbwIrcbk8PGmGUxxtGJGZyr+le+TXrPEgrnLTkD9mp1HUWc95grrGAw+9xxx+yir1gAHvrnztqNCJFFQoVxjBQoChVCBQoUKABRUdCpAKgKOhToYKqd1DYgYSY4UEzZbIBa+tgGK39YKWI5wKtqFVF00xMyfk7TGDCnzwyZjISgmuXCWHp34XpZrBtYHNatXQoU8k90m6ElSK\/TmjFxWHkgfUJEK39ltqN9Fgp6q5DoySPeZdE49t4aOQvDK3oxya7q3yGzFg2whybjgmu3VSbody+Fxg\/XR8MCyyocsijXYX9YaybMCNeytsGZQW2XX+mTKN9HPtG4\/TWCjESQDERLqR1Rply8WRo2By8gbYNWoahDG6bFxYkYrGzEMgYLhI3AzXBAV0UlYlu1yz8PULA6iLiXySrc5MYyodoaIEnpIdQeyr3QXk5wWHYO4adxrG+WyA8oQCx+lmrpebDTfbfsidsjP7k9AT6QxA0jjfQurRJawfKbrlX1YlOse0deu5JvvKticuCSPbvsyAjX6KK0h2a\/SVO2toK5v5UZw2IwsWY8FJJCB\/iMqqTr\/AMNu2s8M3lyJ+F0vYclSM3o3RylRdTbkBcjvi99Sn0eLgqGBB1eiPvOPCr\/Q2FjyjhuNXIbfeq1XRybRIfqH8VdErspGWKSkW4J52Zb\/AGSbU08LbCEb5rNt5yFNa5cHbZJ0Wj\/OlHDP\/E\/0x33pUOzJ4Z5VHBiXpy3v9lSaW2\/fwSOdQAO9tVaX9Hjjdb86L+GmxgF5YiecDwEdFBZRJI66zCefhIO2nPPjYgwKekqT25hVwNHX2CDrzE\/dFBdGyDbvH2\/hSodma87P8JPrL\/doVpv0e\/LH9Y\/GhRtCxlMGm3NP9n3CnGwUbcc3b\/uFNFOO6HoiUjtItTiQk7TFb5UKUrQURm0co2b716+8vTJhUbWk6MgP9dWOSO\/Ckg\/lKD4UTRRe0hPyYVP9NMBnRsEbyxrd\/SGsrqsNZvw9XfXQKwjxJbZ\/op7wKqtI74oO9NInPHkU\/ZbVWc8XqNcibo6eDQtXDW3Q6SibgYiSw4pFV+0kE99TsP5SscnpxQyDmDKe3MR3Vm9FLw0yfUR2ShXMsL5WV\/e4R1543DdzBfGrrCeU3R72zu8Z5JI21dJTMO+pemyLwG9GzNCqvBbpcHLYJioWJ2Lvihvqkg91Wy6xcaxyjZWTg12irEULUq1C1RQWJoUZFFaigBQo6K1FBYVqFHQoaCwqK1HRWqaGJpVChRQAFcp3TuJdKyg7IhFED0IHPH7UjV1dBrri2jcUJcXNLe++SyODa\/BLtl+zau\/RRq2RM6LovAx5B7yfxVY+aLzntqswmOCqBr7h4mlPpLmHWQfeK6m0KmWJgHI3h7qMYYfL7fyqEmkjyMehR+dGcXIdgcdR+IotBTJnmanapPWPhQOjoz6h7bVWvPJxuR0kDxamWmk43Hafdei0FMuhgl5G+t+dF5inIfrGqZHI9J1+s\/wFPLMB6x6sx\/r91Lch0yx8xT2fH40Kh+epyt9T\/bQp7ohTMpiJX2M0UfTrPa1lo4kTUWZ37cvdde8U3HAgNi7a+IOEB6N7Ve4mnHOHjPCSLUdkjZ2HOc12HXWJoSI5kOpGUW4hlv3b6fCn0SS3oseq335B9ymY9KqwtGqkdNgOwW7xQ\/SDHVnHRGpY+OXvpiJASQbeCfnsD2IijvpEmDzC7OTzBfe5alqkh1kOo\/xJN7B+jrvRjDqNbOPoqT3ubdlNCID6JjN7Fj1r\/RaokugF9hvpX\/qNX0Lg3yo7AcbMcvXrCinYcUo1DeweRLOe0ADvqlImjIPuavsQHoF\/AGoc25VvYt06vEiugl82tgelzq7vC9OLhgbXVbc6gffuT1VamJxOUz7lzzd350xHoaeI3jkkjPLGzL921dhfCR21+OrxHhUSTCwHZYnm199vfVbidpziDT+lYtS4uRgP4mWTvcE99WmH8pOkY7b5FDIOO6MpPWr2H1a1UmjUOxPH4VAn0Ip9UdZ\/Kk4wfaQUxrDeVgfvcG688cgbuZV8atsL5TtHv6Zli\/zIifuF6z0+50H1R1f91W4nc2PZtUPBifgLkdOwm6rAyWyYyEk7A0gUnqaxq4RgwupBHKDcdorhE25m+oDqqINBSxnMheNuVCVPaKzekj4Yb2eg7UVq4TDpjSkPo4uYj\/EOe31w1qscN5RtJJ6Swy225oyp+wygHqrKWjfhoe87LaitXMsN5WiP2uDYDjaOS\/2WUeNXGD8qOAf09+iPy47jqyFqylpci8Fb0bWhVHhN2Oj5fRxcQ5pG3s9j5TV3DIri6MrDlUgjtFYyxyj2ik0Q9NYrecNPLxxxSuOlUJHfauMblMOCAARcAbbX766X5TcTvejZRexkaOIfSkUsPqK1c\/3OYNiAUJvzf8vXfplWJsh8yNfHIyixJ6gvxNNpiCjBiWZeMZRe3RtpQkmVbSR5h1g9v5U229HWQyHpuL07LLNscJFvEwPNexHSLaqbSdB+0tf5RHvqraBSbpIp5iwzeF6ZZMQutSx+dwh2GlYUXEs9jqIA5V1nqp1MSnGbn5a\/HXVAcZIBw4tfLZk7w1qdTSQ9ZZOgEMPtUWMujO3EV6FQe6kridfDBtzhqqBi1OwkcxRfcwoLiANe+EdRt97VRbAvvPIeT7JoVR\/pRfa72\/FR0WFFcA2wOTfblJFxzgBc3WTTyQZdeQ7doC3+0za+qhQpiJMcebizczux7gFFSgHFgpyj5KKOwhge2hQoAcXAyHXck87Dv1A99Px6NcC5EYPGcgb7xahQq0IcfDj1mzEctyB0DUKGHVdir9UAeJuO2joUgJiYRwbhNftFgT2kk99OlG42Reok+BoUKpCEbwp2yE9THs1i1PrhkHtnosO+96FCqQCfNV4o3PS\/++k+brxwsPpg+LUKFIBp4YuNGXs\/EajnCRkcGQ2+UL92WhQpAhifQzEXGQjs7sp8arcRg2QcK1vlC\/gb0KFIBoYIEXyjpB+NRn0ZEx2C\/WD4WoUKabCiDidz669g6RfvHwqrn3LX1ix6D8QKFCqTYmkVku5+2oEdB\/5aoh0PIhuvBI2FWyntBoUKtMTSHZpsS6iOaeZ0VgwV5CyggEAgMTY2YjrrQaIgQAfrAp+XHfvW5oUKifQQ7NTaeNc4bge0ALW6C1+6q79OG+sofnR8vKQb0KFYmg6+JiZczRqR7SMw7iKOGKBx+rZgTyg8fPehQqShcmGZQSJZAOUObA9BHuqIZZhskv8AOA\/CaFCgCNNpORNqRnpF\/hUcaV5Y0+p\/voUKaEF+lb\/uk7PzoUKFOkB\/\/9k=)","0794b607":"Large number of patients are non smoker","c5fac040":"# Plan of Attack\n\n* Dataset contains 7 columns as follows\n\n - age: age of primary beneficiary\n\n - sex: insurance contractor gender, female, male\n\n - bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,\n - objective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n\n - children: Number of children covered by health insurance \/ Number of dependents\n\n - smoker: Smoking\n\n - region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n\n - charges: Individual medical costs billed by health insurance\n\n* Our aim is to predict medical cost of patient given his\/her details like age, sex, bmi and so on. This model will be useful to insurance company to predict the medical cost they might need to pay while giving insurance to customer.\n\n* In this notebook \n\n1. We are going to make analysis of each feature and its relation with target variable which is 'charges'.\n2. We will be trying various regression models like LinearRegression , RandomForestRegressor , XGBOOST , CatBoost , LightGBM etc.\n3. We will be using Optuna to fine tune the hyperparametrs of our model.\n4. Finally, blending top 3 models based on R2_Score.\n","a5b9fe43":"There are 3 categorical features in this dataset - Sex, Smoker and region. Rest of the columns are numeric features."}}