{"cell_type":{"9fe999f1":"code","eefeae34":"code","017b47c9":"code","493421b1":"code","0664ed67":"code","d80fc08f":"code","60093878":"code","9a4973c7":"code","7cdf3588":"code","f3c5c381":"code","bf346c94":"code","60cf26f5":"code","49720193":"code","0dc59f4b":"code","036379e8":"code","78f3b9e9":"code","8eb11315":"code","78251e52":"code","cb5cec55":"code","6b91a7bd":"code","6718a595":"code","7783be1e":"code","f2f35aad":"code","e012fd7b":"code","4a288a91":"code","787cefc1":"code","893ecfbf":"code","8d5aee25":"code","57434876":"code","ca3345dd":"code","a131997a":"code","868f2dd0":"code","5e5d2615":"code","bc8698f9":"code","a5b4153b":"code","9d501b05":"code","956bb67f":"code","bd311eb8":"code","737f95d6":"code","076b2776":"code","7801db06":"code","6a0147e3":"code","b5cf07b3":"code","fdc10ad8":"code","b35c8464":"code","888ce6e2":"code","c5df67be":"code","f1f16922":"code","5dae5d21":"code","42366469":"code","718f674e":"code","dca4227d":"code","b6ad9e90":"code","2634ddd2":"code","bb55cfc0":"code","8b652f12":"code","2aca64de":"code","159b9cf2":"code","81454133":"code","dbc64a26":"code","0965242a":"code","26499997":"code","4f89e0ff":"code","4058f48b":"code","38ead59f":"code","cd6171e8":"code","ea035e18":"code","c7477772":"code","486a77f1":"code","fce0e562":"code","7ec0a26b":"code","8d1de2e5":"code","860e2716":"code","cc24b126":"markdown","b281465f":"markdown","13db3cb8":"markdown","6750163f":"markdown","f04d693d":"markdown","04c45dac":"markdown","44585482":"markdown","6464e2eb":"markdown","905f3581":"markdown"},"source":{"9fe999f1":"!pip install dataprep","eefeae34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport dataprep\nfrom dataprep.eda import create_report\nfrom dataprep.eda import plot\nfrom dataprep.eda import plot_correlation\nfrom dataprep.eda import plot_missing\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","017b47c9":"df = pd.read_csv('\/kaggle\/input\/pokemon\/Pokemon.csv')\ndf.head(10)","493421b1":"df.describe()","0664ed67":"df.info()","d80fc08f":"df.isnull().sum()","60093878":"df['Type 2'].fillna('none',inplace = True)","9a4973c7":"df.isnull().sum()","7cdf3588":"pokemon_duplicate_check = df['Name'].duplicated().any()\npokemon_duplicate_check","f3c5c381":"df.head()","bf346c94":"def f(data, a, b, title):\n    pokemon_dist = data.groupby(a)[b].count()\n    pie,ax = plt.subplots(figsize=[10,10])\n    labels = pokemon_dist.keys()\n    plt.pie(x = pokemon_dist, autopct = '%.1f%%', explode = [0.05]*labels.nunique(), labels = labels, pctdistance = 0.5)\n    plt.title(title)\n    plt.show()","60cf26f5":"f(data = df, a = 'Generation', b = 'Name', title = 'Distribution of Pokemon for each Generation')","49720193":"f(data = df, a = 'Type 1', b = 'Name', title = 'Pokemon Type 1 Distribution')","0dc59f4b":"f(data = df[df['Generation']==1], a = 'Type 1', b = 'Name', title = 'Generation 1 Pokemon Type 1 Distribution')","036379e8":"f(data = df[df['Generation']==2], a = 'Type 1', b = 'Name', title = 'Generation 2 Pokemon Type 1 Distribution')","78f3b9e9":"f(data = df[df['Generation']==3], a = 'Type 1', b = 'Name', title = 'Generation 3 Pokemon Type 1 Distribution')","8eb11315":"f(data = df[df['Generation']==4], a = 'Type 1', b = 'Name', title = 'Generation 4 Pokemon Type 1 Distribution')","78251e52":"f(data = df[df['Generation']==5], a = 'Type 1', b = 'Name', title = 'Generation 5 Pokemon Type 1 Distribution')","cb5cec55":"f(data = df[df['Generation']==6], a = 'Type 1', b = 'Name', title = 'Generation 6 Pokemon Type 1 Distribution')","6b91a7bd":"f(data = df, a = 'Type 2', b = 'Name', title = 'Pokemon Type 2 Distribution')","6718a595":"f(data = df[df['Generation']==1], a = 'Type 2', b = 'Name', title = 'Generation 1 Pokemon Type 2 Distribution')","7783be1e":"f(data = df[df['Generation']==2], a = 'Type 2', b = 'Name', title = 'Generation 2 Pokemon Type 2 Distribution')","f2f35aad":"f(data = df[df['Generation']==3], a = 'Type 2', b = 'Name', title = 'Generation 3 Pokemon Type 2 Distribution')","e012fd7b":"f(data = df[df['Generation']==3], a = 'Type 2', b = 'Name', title = 'Generation 3 Pokemon Type 2 Distribution')","4a288a91":"f(data = df[df['Generation']==4], a = 'Type 2', b = 'Name', title = 'Generation 4 Pokemon Type 2 Distribution')","787cefc1":"f(data = df[df['Generation']==5], a = 'Type 2', b = 'Name', title = 'Generation 5 Pokemon Type 2 Distribution')","893ecfbf":"f(data = df[df['Generation']==6], a = 'Type 2', b = 'Name', title = 'Generation 6 Pokemon Type 2 Distribution')","8d5aee25":"df.head()","57434876":"def f(generation):\n    status = ['Total','Attack','Defense','Sp. Atk','Sp. Def','Speed']\n    df_gen = df[df['Generation']==generation]\n    print('Generation ',generation,' Pokemon Max Status')\n    for i in status:\n        maxstats = df_gen.loc[df_gen[i]==df_gen[i].max(),'Name']\n        print('Max ',i,' : ',maxstats.values,df_gen[i].max())","ca3345dd":"f(1)","a131997a":"f(2)","868f2dd0":"f(3)","5e5d2615":"f(4)","bc8698f9":"f(5)","a5b4153b":"f(6)","9d501b05":"df.head()","956bb67f":"df['Type 1 + Type 2'] = df['Type 1'] +' '+ df['Type 2']\ndf.head()","bd311eb8":"df['Average'] = (df['Total']\/6).round(1)\ndf.head()","737f95d6":"def a(generation, color):\n    f, ax = plt.subplots(figsize=(20,20))\n    df_gen = df[df['Generation']==generation]\n    n = 1\n    c = 'tab:'+ color\n    print('Generation ',generation,' Pokemon Status Distribution')\n    for i in ['Total','HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','Average']:\n        plt.subplot(4,2,n)\n        x = df_gen[i]\n        ax = sns.distplot(x, bins=10,color=c)\n        n = n + 1\n    ","076b2776":"a(1,color = 'red')","7801db06":"a(2,'blue')","6a0147e3":"a(3,'green')","b5cf07b3":"a(4,'purple')","fdc10ad8":"a(5,'orange')","b35c8464":"a(6,'grey')","888ce6e2":"df.head()","c5df67be":"stats_df = df.drop(['Total', 'Legendary', 'Generation', '#','Average'], axis=1)\nplt.figure(figsize=(15,10))\nsns.boxplot(data=stats_df)","f1f16922":"plt.figure(figsize=(20,80))\nn = 1\nfor i in [1,2,3,4,5,6]:\n    df_gen = df[df['Generation']==i]\n    stats_df = df_gen.drop(['Total', 'Legendary', 'Generation', '#'], axis=1)\n    plt.subplot(6,1,n)\n    sns.boxplot(data=stats_df)\n    plt.title('Generation '+ str(i) +' Pokemon Status Boxplot', size = 14)\n    n = n + 1","5dae5d21":"df.head()","42366469":"type1_2 = pd.DataFrame({'count' : df.groupby( [ \"Generation\", \"Type 1\",'Type 2'] ).size()}).reset_index()\ntype1_2.head()","718f674e":"fig = px.treemap(type1_2, names = 'Type 2', values = 'count', path = ['Generation', 'Type 1', 'Type 2'], \n                 color_discrete_sequence = px.colors.qualitative.Set1, width = 1500, height = 1000)\nfig.show()","dca4227d":"plt.figure(figsize=(15,10))\nsns.countplot(x='Type 1', data=df,order = df['Type 1'].value_counts().index)\nplt.xticks(rotation = 45)\nplt.show()","b6ad9e90":"plt.figure(figsize=(15,10))\nsns.countplot(x='Type 2', data=df,order = df['Type 2'].value_counts().index)\nplt.xticks(rotation = 45)\nplt.show()","2634ddd2":"sns.lmplot(x='Attack', y='Defense', data=df, line_kws={'color': 'red'}, hue = 'Legendary')","bb55cfc0":"sns.lmplot(x='Attack', y='Sp. Atk', data=df, line_kws={'color': 'red'},hue='Legendary')","8b652f12":"sns.lmplot(x='Defense', y='Sp. Def', data=df, line_kws={'color': 'red'},hue = 'Legendary')","2aca64de":"sns.lmplot(x='Attack', y='HP', data=df, line_kws={'color': 'red'},hue='Legendary')","159b9cf2":"sns.lmplot(x='Defense', y='HP', data=df, line_kws={'color': 'red'}, hue = 'Legendary')","81454133":"sns.lmplot(x='Attack', y='Speed', data=df, line_kws={'color': 'red'}, hue = 'Legendary')","dbc64a26":"sns.lmplot(x='Defense', y='Speed', data=df, line_kws={'color': 'red'}, hue = 'Legendary')","0965242a":"sns.lmplot(x='HP', y='Speed', data=df, line_kws={'color': 'red'}, hue = 'Legendary')","26499997":"sns.pairplot(df, vars = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed'],kind = 'reg',hue='Legendary')","4f89e0ff":"plot(df,'Total')","4058f48b":"plot(df,'HP')","38ead59f":"plot(df,'Attack')","cd6171e8":"plot(df,'Defense')","ea035e18":"plot(df,'Sp. Atk')","c7477772":"plot(df,'Sp. Def')","486a77f1":"plot(df,'Speed')","fce0e562":"plot(df,'Average')","7ec0a26b":"plot(df,'Type 1')","8d1de2e5":"plot(df, \"Type 2\")","860e2716":"plot(df, 'Type 1 + Type 2')","cc24b126":"## Data Preparation","b281465f":"## Data Prep for Pokemon Data Statistics","13db3cb8":"## Pokemon Type Countplot","6750163f":"## Pokemon Status Distribution (Density Chart)","f04d693d":"## Linear Regression for Pokemon Statuses","04c45dac":"## Max Status of Each Pokemon Generation","44585482":"## Boxplot for Pokemon Status","6464e2eb":"## Pokemon Type Population grouped by Generation","905f3581":"## Pokemon Distribution with Piechart"}}