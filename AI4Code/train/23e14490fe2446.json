{"cell_type":{"365702dd":"code","c2be00ac":"code","ad645677":"code","0ef8c901":"code","034f1528":"code","d9575fa1":"code","aea65c52":"code","d29de0a3":"code","3520aeac":"code","daa8fdc0":"markdown","dc9d1a96":"markdown"},"source":{"365702dd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pylab as plt\nimport tensorflow as tf\n\nnp.set_printoptions(precision=4, suppress=True, floatmode='fixed')\n\nSEED = 123                 # to be able to rerun the same NN\nnp.random.seed(SEED)\ntf.set_random_seed(SEED)\n\n%matplotlib inline","c2be00ac":"data = np.load(\"..\/input\/mnist.npz\")\n\nx_train = data['x_train']\ny_train = data['y_train']\nx_test = data['x_test']\ny_test = data['y_test']\n\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0","ad645677":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\n\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28,28)))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='sigmoid'))","0ef8c901":"model.summary()","034f1528":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy']\n              )\n\nmodel.fit(x_train, y_train, epochs=10, validation_split=0.1)","d9575fa1":"score = model.evaluate(x_test, y_test, verbose=0)\nprint('Test score:', score[0])\nprint('Test accuracy:', score[1])","aea65c52":"res = model.predict(x_test)\nres = pd.DataFrame({'true':y_test, 'guess':np.argmax(res, axis=1), 'trust':np.max(res, axis=1)})","d29de0a3":"bad = res[y_test != res.guess].sort_values('trust', ascending=False)\nbad.head(10)","3520aeac":"i = bad.index.values[0]\nres = model.predict(x_test[i][None,:,:])  # None allows to add a dimension, Error messages told me to do that :-)\nprint(\"Image\", i)\nprint(f\"Model says it is a {np.argmax(res)} while it is a {y_test[i]}\")\nprint(\"Stats are\", np.array(res))\nplt.imshow(x_test[i])","daa8fdc0":"MNIST is one of the most known example of database on which CNN do a very good job (the first useful success thanks to <a href=\"http:\/\/yann.lecun.com\/exdb\/lenet\/\">LeNet<\/a> of Yann LeCun).\nHere is a nice <a href=\"https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\">introduction to Keras to solve MNIST<\/a> with a accuracy of 99.7%.\n\nHowever MNIST is not such a good example for CNN since we can do it without convolution layers. In some way it is too simple, a simple dense network gives also very good results, 98.2% accuracy without data augmenatation.\n\nNote that the last activation function is a `sigmoid` and not a `softmax` as it is usualy.","dc9d1a96":"Let's find cases where model is the most confident but wrong."}}