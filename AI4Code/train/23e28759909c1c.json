{"cell_type":{"bccf7d7e":"code","f007f7f6":"code","0d5fe8d3":"code","d2dec25c":"code","ab9c7740":"code","2bce19b7":"code","2771c876":"code","fba5853c":"code","45dd2828":"code","eb4982ef":"code","bffd844c":"code","9c6088ee":"code","872bd45a":"code","24b4786b":"code","5bdd2aba":"code","341534d3":"code","3310d559":"code","c275f836":"code","120641f7":"code","d8d22b2f":"code","7db4f990":"code","7e3c8706":"code","322e43a2":"code","11f83f5a":"code","3c4498e6":"code","f21dcd4f":"code","6f34603f":"markdown","9e2deb12":"markdown","28b789f3":"markdown","60d912f2":"markdown","4cf46c95":"markdown","aefbed6c":"markdown","c435649a":"markdown","92b5b51e":"markdown","6d8feb90":"markdown","a2e203d5":"markdown","5746e225":"markdown","8c5ae310":"markdown"},"source":{"bccf7d7e":"import numpy as np\nimport pandas as pd\n\nimport io\nimport missingno\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n","f007f7f6":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")","0d5fe8d3":"df.shape\ndf.describe()\ndf.info() \ndf.isna().sum()\n","d2dec25c":"df.director.fillna('missing', inplace=True)\ndf.cast.fillna('missing', inplace=True)\ndf.country.fillna('missing', inplace=True)\ndf.isna().sum()","ab9c7740":"df.dropna(subset=['date_added'], inplace = True)\ndf.dropna(subset=['rating'], inplace = True)\ndf.isna().sum()","2bce19b7":"df.head()","2771c876":"df['added_month'] = np.nan\ndf['added_date'] = np.nan\ndf['added_year'] = np.nan","fba5853c":"for i in range(len(df)):\n    df['added_month'][i] = df.date_added.iloc[i].split(' ')[0]\n\nfor i in range(len(df)):\n    df['added_date'][i] = df.date_added.iloc[i].split(' ')[1][:-1]\n\nfor i in range(len(df)):\n    df['added_year'][i] = df.date_added.iloc[i].split(' ')[2]","45dd2828":"df.drop('date_added', axis=1, inplace=True)","eb4982ef":"listed_in = []\nfor i in range(len(df)):\n    listed_in.extend(df.listed_in.iloc[i].split(','))","bffd844c":"listed_dic = {}\nfor i in listed_in:\n    listed_dic[i] = listed_in.count(i)\n\nprint(listed_dic)","9c6088ee":"listed_dic = sorted(listed_dic.items(), key=lambda item: item[1], reverse=True)\nprint(listed_dic)","872bd45a":"listed_dic = dict(listed_dic)","24b4786b":"plt.barh(df.type.unique(), df.type.value_counts(), color = \"#003f5c\")\n\n# Show graphic\n\nplt.title('Most Uploaded Content',fontsize=20, fontweight='bold') \nplt.show()","5bdd2aba":"data = df.groupby('type')['director'].value_counts()['Movie'][1: 20]\ndata = pd.DataFrame(data)\n\nplt.barh(data.index, data.director, color= \"#003f5c\")\n\n\n#plot title \nplt.title('Most Popular Director for Movies',fontsize=20, fontweight='bold') \n\n# Show graphic\nplt.show()","341534d3":"data = df.groupby('type')['director'].value_counts()['TV Show'][1: 20]\ndata = pd.DataFrame(data)\n\nplt.barh(data.index, data.director, color= \"#bc5090\")\n\n\n#plot title \nplt.title('Most Popular Director for TV shows',fontsize=20, fontweight='bold') \n\n# Show graphic\nplt.show()","3310d559":"height = list(listed_dic.values())[:10]\n\nbars = list(listed_dic.keys())[:10]\ny_pos = np.arange(len(bars))\n\n# Create Graph\nplt.bar(y_pos, height,color = \"#003f5c\")\n\n# Create names on the x-axis\nplt.xticks(y_pos, bars)\n\n#x-axis labels \nplt.xlabel('Categories') \n\n# Rotate labels\nplt.xticks(rotation=90)\n\n#y-axis labels \nplt.ylabel('Records founds') \n\n#plot title \nplt.title('Most Popular category',fontsize=20, fontweight='bold') \n\n# Show graphic\nplt.show()\n","c275f836":"# Create horizontal bars\nplt.barh(y_pos, height,color = \"#bc5090\")\n \n# Create names on the x-axis\nplt.yticks(y_pos, bars)\n\n#x-axis labels \nplt.ylabel('Categories') \n\n#y-axis labels \nplt.xlabel('Records founds') \n# Show graphic\n\nplt.title('Most Popular category',fontsize=20, fontweight='bold') \nplt.show()","120641f7":"bar = list(df.added_month.unique()[:-2])\n\nheight = list(df.added_month.value_counts()[:-1])\n\nplt.barh(bar, height, color = \"#003f5c\" )\n\nplt.title('Content uploaded in perticulor month',fontsize=20, fontweight='bold') \nplt.show()","d8d22b2f":"movie = df.groupby('type')['release_year'].value_counts()['Movie']\n\nmovie= pd.DataFrame(movie.sort_values(ascending=False)[:20])\n\nplt.bar(movie.index, movie.release_year, color = \"#003f5c\" )\n\nplt.title('Movies uploaded in perticulor year',fontsize=20, fontweight='bold') \nplt.show()","7db4f990":"TV = df.groupby('type')['release_year'].value_counts()['TV Show']\n\nTV = pd.DataFrame(TV.sort_values(ascending=False)[:20])\n\nplt.bar(TV.index, TV.release_year, color = \"#bc5090\" )\n\nplt.title('TV Content uploaded in perticulor year' ,fontsize=20, fontweight='bold') \nplt.show()","7e3c8706":"bar = list(df.rating.unique()[:])\n\nheight = list(df.rating.value_counts()[:])\n\nplt.barh(bar, height, color = \"#003f5c\")\n\nplt.title('Content uploaded with Rating',fontsize=20, fontweight='bold') \nplt.show()","322e43a2":"data = df.groupby('type')['rating'].value_counts()['TV Show'][0:5]\ndata = pd.DataFrame(data)\n\nplt.barh(data.index, data.rating, color= \"#bc5090\")\n\n\n#plot title \nplt.title('Maximum TV shows With Rating',fontsize=20, fontweight='bold') \n\n# Show graphic\nplt.show()","11f83f5a":"data = df.groupby('type')['rating'].value_counts()['Movie'][0:5]\ndata = pd.DataFrame(data)\n\nplt.barh(data.index, data.rating, color= \"#003f5c\")\n\n\n#plot title \nplt.title('Maximum Movies With Rating',fontsize=20, fontweight='bold') \n\n# Show graphic\nplt.show()","3c4498e6":"plt.plot(df.duration.value_counts().index.to_list()[3: 20], df.duration.value_counts()[3:20], color='#003f5c')\nplt.xticks(rotation='90')\nplt.title('Duration Of content', fontsize=20, fontweight='bold')\nplt.show()\n","f21dcd4f":"plt.figure(figsize=(8, 6))\nlabels=['1 Season', '2 Season', '3 Season']\n_, _, texts = plt.pie(df.duration.value_counts()[:3], labels=labels, autopct='%1.2f%%', startangle=90, \n                      explode=(0.0, 0.1, 0.2), colors=['#003f5c', '#bc5090', '#ffa600'])\nplt.axis('equal')\nplt.title('Seasons Available on Netflix', fontsize=20, fontweight='bold');\nfor text in texts:\n    text.set_color('white')","6f34603f":"**Droping records that have missing Date_added and missing rating values.**","9e2deb12":"---\nNow, Dataset is ready for **Exploratory Data Analysis.**\n---\nExploratory data analysis is an approach to analyzing data sets to summarize their main characteristics.\n\nThe purpose of exploratory data analysis is to:\n\n\n1. Check for **missing data and other mistakes**. \n\n2. Gain **maximum insight** into the data set and its underlying structure. \n\n3. **Uncover a parsimonious model**, one which explains the data with a minimum number of predictor variables.\n\nMost used **Data visualization libraries** are:\n\n1.  Matplotlib                     \n2.  Seaborn \n3.  ggplot\n4.  Bokeh\n5.  pygal\n6.  Plotly\n7.  geoplotlib\n8.  Gleam\n9.  missingno\n10. Leather\n\nI am using Matplotlib and seaborn for visualzation.","28b789f3":"---\nFrom listed_in feature we have to extract categories. \n---\n\n*   Firstly we will split each listing.\n*   Then we count each category.\n\nLastly We will Sort and save it as dictionary.","60d912f2":"For Exploratory analysis  we should first Understand the dataset basic information such as **Shape of data, Missing data, number of abservations etc.**\n\nLets Begin with knowing details about data.\n---","4cf46c95":"As we have extracted date month and year therefore we don't need date_added field.","aefbed6c":"\n**Importing dataset**\n---","c435649a":"**Importing Libraries**\n---","92b5b51e":"**NETFLIX**\n---\n**Netflix, Inc.** is an American over-the-top content platform and production company . **Netflix is a subscription-based streaming service that allows our members to watch TV shows and movies without commercials on an internet-connected device.** You can also download TV shows and movies to your iOS, Android, or Windows 10 device and watch without an internet connection.\n\n\n\n![](https:\/\/assets.nflxext.com\/ffe\/siteui\/allow-robots\/contentSampling\/seo-watch-free-link-preview.jpg)\n","6d8feb90":"---\nNow dataset is ready for **Feature Engineering**.\n---\n\nWe can extract **date month year** from **date_added field.**\n\nWe can extract **Different categories that show is listed** from **listed_in field.**\n\nLets Begin with **date_added field**.","a2e203d5":"**Initial Findings On Netflix Dataset**\n---\n1. Maximum of content added on netflix platform belongs to  **TV Show type**. \n\n2. Most polular director on netflix platform is the **Alastair Fothergill**.\n3. We can see that **form 2013 to 2020 content added** on netflix platform is **increased For TV shows** but somehow, there is **decrease in volume of content of movies from 2017**. It can be a start for changed watching behaviour of user.\n\n4. Most of the content is listed in  **International TV Shows**. and published duration of 1 Season.\n5. Netflix **have maximum content of TV-MA Rating that is followed by TV-14 For both types** i.e. For Movies as well as TV series.\n6. Interesting is , **content Rating R fall on number 3 for Movies but there are very less TV shows Published with Rating R.**There are very less TV series with content rating R.\n\nThank you For Your Valuable Time.\n---\nIf You have come this far, then Please Upfork  the NoteBook.\n---","5746e225":"**Handing missing values**\n\ni have handled missing values by just inserting 'missing' keyword whenever data is not available.","8c5ae310":"The Goal of this Notebook is To Present information in understandable format with minimal code.\n---\n**Note:- As, In Programming one aspect can be done is multiple ways, your way of programming may differ from mine but ultimatly result will be same.**\n\n\nThen Lets start,\n---"}}