{"cell_type":{"4198699d":"code","5dafca76":"code","8c6d5c5d":"code","4e716463":"code","80891617":"code","416fb522":"code","25f38a98":"code","a0f87e1f":"code","eff220ba":"code","dc26da52":"code","14908bd1":"code","34f8efc6":"code","41f58b9f":"markdown","27add528":"markdown","a7eb4cd4":"markdown","af0763fb":"markdown","67a3278e":"markdown","5bcc2c0a":"markdown","50872718":"markdown"},"source":{"4198699d":"import numpy as np \nimport pandas as pd \nimport keras\nfrom keras.layers.core import Dense, Activation\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential\nimport matplotlib.pyplot as plt","5dafca76":"df_train = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train.csv\")\ndf_test = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test.csv\")","8c6d5c5d":"print(\"Training data sample view:\")\nprint(df_train.head())\n\nprint(\"Test data sample view:\")\nprint(df_test.head())","4e716463":"print(\"Describing Training data:\")\nprint(df_train.describe())\n\nprint(\"Describing Test data:\")\nprint(df_test.describe())","80891617":"print(\"Training data info:\")\ndf_train.info()\n\nprint(\"Test data info:\")\ndf_test.info()","416fb522":"'''Converting train\/test data-frame to numpy array'''\n\ntrain_x = df_train[df_train.columns[1::]].to_numpy()           \ntrain_y = df_train[df_train.columns[0]].to_numpy()             #training label set [0 - 25]\n\ntest_x = df_test[df_test.columns[1::]].to_numpy() \ntest_y = df_test[df_test.columns[0]].to_numpy()                #test label set [0 - 25]\n\nprint(\"SUMMARY OF DATA:\")\n\nprint(\"train_x shape: \" + str(train_x.shape))\nprint(\"train_y shape: \" + str(train_y.shape))\nprint(\"test_x shape: \" + str(test_x.shape))\nprint(\"test_y shape: \" + str(test_y.shape))","25f38a98":"'''Normalizing the train\/tets data'''\n\ntrain_x = train_x\/255\ntest_x = test_x\/255","a0f87e1f":"index = 121\nplt.imshow(train_x[index].reshape(28, 28))\nplt.show()\nprint(train_y[index])","eff220ba":"'''Making sequential deep learning model using keras\n   input layer: shape -- (784, number of examples)\n   layer 1: shape -- (128, number of examples) with \"relu\" activation\n   layer 2: shape -- (64, number of examples) with \"relu\" activation\n   layer 3: shape -- (64, number of examples) with \"relu\" activation\n   layer 4: shape -- (32, number of examples) with \"relu\" activation\n   layer 5: shape -- (26, number of examples) with \"softmax\" activation. This layer is the ouput layer'''\n\nmodel = Sequential()\n\nmodel.add(Dense(input_shape = (784, ), units = 128, activation = \"relu\"))\nmodel.add(Dense(units = 64, activation = \"relu\"))\nmodel.add(Dense(units = 64, activation = \"relu\"))\nmodel.add(Dense(units = 32, activation = \"relu\"))\nmodel.add(Dense(units = 26, activation = \"softmax\"))\n\n'''using \"Adam\" optimizer'''\n\nopt = Adam(learning_rate = 0.001, beta_1 = 0.9, beta_2 = 0.999)\n\n'''Compiling the model using the \"sparse_categorical_crossentropy\" loss function'''\n\nmodel.compile(optimizer = opt, loss = \"sparse_categorical_crossentropy\", metrics = [\"accuracy\"])","dc26da52":"'''Fitting the model using training set'''\n\nsign_language_model = model.fit(train_x, train_y, epochs = 50, validation_split = 0.1)","14908bd1":"plt.figure(figsize=(15, 5))\n\nplt.subplot(1,2,1)\n\nplt.plot(sign_language_model.history[\"accuracy\"], label = \"training set\")\nplt.plot(sign_language_model.history[\"val_accuracy\"], label = \"validation set\")\nplt.title(\"accuracy versus epochs curve\")\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend(loc='best')\n\nplt.subplot(1,2,2)\n\nplt.plot(sign_language_model.history[\"loss\"], label = \"training set\")\nplt.plot(sign_language_model.history[\"val_loss\"], label = \"validation set\")\nplt.title(\"loss versus epochs curve\")\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend(loc='best')\n\nplt.show()","34f8efc6":"model_acc = (model.evaluate(test_x, test_y))[1]*100\n\nprint(\"Test set accuracy is: \" + str(model_acc) + \" %\")","41f58b9f":"# *Reading data files from the folder named \"sign-language-mnist\"*","27add528":"# *Model evaluation using test set*","a7eb4cd4":"# *Visualizing Training data image*","af0763fb":"# *Deep learning Model*","67a3278e":"# *About Data*","5bcc2c0a":"# *Learning curves of the model*","50872718":"# *Preprocessing train\/test data*"}}