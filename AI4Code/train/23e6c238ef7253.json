{"cell_type":{"6c8f601c":"code","6ef0f8e7":"code","704e99c3":"code","95ebe492":"code","69ed5cc8":"code","981368b7":"code","bcda8577":"code","3a1c3dae":"code","6bbcba5e":"code","e6f01d2e":"code","ed8dae08":"code","2abc3d02":"code","c59ce293":"code","c60e3484":"code","1bdf2cde":"code","24b6e291":"code","3cd1cfd0":"code","a9047358":"code","58cef901":"code","d324557d":"code","60508d52":"code","cb15f177":"code","73e497b2":"code","8e550d22":"code","4b1c61a7":"code","4668d0b8":"code","4ae57ede":"code","a71983eb":"code","fa2995a3":"markdown","9341a4d8":"markdown","43f288a6":"markdown","5d6b6902":"markdown","6f65946c":"markdown","da7967ea":"markdown","a2f832ba":"markdown","d9c1d62f":"markdown","3e0943df":"markdown","14e9060d":"markdown","894bcc30":"markdown","9d8d8278":"markdown","14f6da7c":"markdown"},"source":{"6c8f601c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6ef0f8e7":"import numpy as np\nimport pandas as pd","704e99c3":"train_df = pd.read_csv('\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_values.csv', index_col='building_id')\ntest_df = pd.read_csv('\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/test_values.csv',  index_col='building_id')","95ebe492":"target_df = pd.read_csv('\/kaggle\/input\/richters-predictor-modeling-earthquake-damage\/train_labels.csv', index_col='building_id')","69ed5cc8":"train_df.head()","981368b7":"target_df.head()","bcda8577":"cat_features = ['geo_level_1_id', 'geo_level_2_id', 'geo_level_3_id', 'land_surface_condition', 'foundation_type', 'roof_type', \n                    'ground_floor_type', 'other_floor_type', 'position', 'plan_configuration', 'legal_ownership_status']\nnum_features = ['count_floors_pre_eq', 'age', 'area_percentage', 'height_percentage', 'count_families']","3a1c3dae":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass TargetEncoder(BaseEstimator, TransformerMixin):\n    \"\"\"Target encoder.\n    \n    Replaces categorical column(s) with the mean target value for\n    each category.\n\n    \"\"\"\n    \n    def __init__(self, cols=None):\n        \"\"\"Target encoder\n        \n        Parameters\n        ----------\n        cols : list of str\n            Columns to target encode.  Default is to target \n            encode all categorical columns in the DataFrame.\n        \"\"\"\n        if isinstance(cols, str):\n            self.cols = [cols]\n        else:\n            self.cols = cols\n        \n        \n    def fit(self, X, y):\n        \"\"\"Fit target encoder to X and y\n        \n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n        y : pandas Series, shape = [n_samples]\n            Target values.\n            \n        Returns\n        -------\n        self : encoder\n            Returns self.\n        \"\"\"\n        \n        # Encode all categorical cols by default\n        if self.cols is None:\n            self.cols = [col for col in X \n                         if str(X[col].dtype)=='object']\n\n        # Check columns are in X\n        for col in self.cols:\n            if col not in X:\n                raise ValueError('Column \\''+col+'\\' not in X')\n\n        # Encode each element of each column\n        self.maps = dict() #dict to store map for each column\n        for col in self.cols:\n            tmap = dict()\n            uniques = X[col].unique()\n            for unique in uniques:\n                tmap[unique] = y[X[col]==unique].mean()\n            self.maps[col] = tmap\n            \n        return self\n\n        \n    def transform(self, X, y=None):\n        \"\"\"Perform the target encoding transformation.\n        \n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n            \n        Returns\n        -------\n        pandas DataFrame\n            Input DataFrame with transformed columns\n        \"\"\"\n        Xo = X.copy()\n        for col, tmap in self.maps.items():\n            vals = np.full(X.shape[0], np.nan)\n            for val, mean_target in tmap.items():\n                vals[X[col]==val] = mean_target\n            Xo[col] = vals\n        return Xo\n            \n            \n    def fit_transform(self, X, y=None):\n        \"\"\"Fit and transform the data via target encoding.\n        \n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n        y : pandas Series, shape = [n_samples]\n            Target values (required!).\n\n        Returns\n        -------\n        pandas DataFrame\n            Input DataFrame with transformed columns\n        \"\"\"\n        return self.fit(X, y).transform(X, y)","6bbcba5e":"from sklearn.model_selection import KFold \n\nclass TargetEncoderCV(TargetEncoder):\n    \"\"\"Cross-fold target encoder.\n    \"\"\"\n    \n    def __init__(self, n_splits=3, shuffle=True, cols=None):\n        \"\"\"Cross-fold target encoding for categorical features.\n        \n        Parameters\n        ----------\n        n_splits : int\n            Number of cross-fold splits. Default = 3.\n        shuffle : bool\n            Whether to shuffle the data when splitting into folds.\n        cols : list of str\n            Columns to target encode.\n        \"\"\"\n        self.n_splits = n_splits\n        self.shuffle = shuffle\n        self.cols = cols\n        \n\n    def fit(self, X, y):\n        \"\"\"Fit cross-fold target encoder to X and y\n        \n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n        y : pandas Series, shape = [n_samples]\n            Target values.\n            \n        Returns\n        -------\n        self : encoder\n            Returns self.\n        \"\"\"\n        self._target_encoder = TargetEncoder(cols=self.cols)\n        self._target_encoder.fit(X, y)\n        return self\n\n    \n    def transform(self, X, y=None):\n        \"\"\"Perform the target encoding transformation.\n\n        Uses cross-fold target encoding for the training fold,\n        and uses normal target encoding for the test fold.\n\n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n\n        Returns\n        -------\n        pandas DataFrame\n            Input DataFrame with transformed columns\n        \"\"\"\n\n        # Use target encoding from fit() if this is test data\n        if y is None:\n            return self._target_encoder.transform(X)\n\n        # Compute means for each fold\n        self._train_ix = []\n        self._test_ix = []\n        self._fit_tes = []\n        kf = KFold(n_splits=self.n_splits, shuffle=self.shuffle)\n        for train_ix, test_ix in kf.split(X):\n            self._train_ix.append(train_ix)\n            self._test_ix.append(test_ix)\n            te = TargetEncoder(cols=self.cols)\n            if isinstance(X, pd.DataFrame):\n                self._fit_tes.append(te.fit(X.iloc[train_ix,:],\n                                            y.iloc[train_ix]))\n            elif isinstance(X, np.ndarray):\n                self._fit_tes.append(te.fit(X[train_ix,:],\n                                            y[train_ix]))\n            else:\n                raise TypeError('X must be DataFrame or ndarray')\n\n        # Apply means across folds\n        Xo = X.copy()\n        for ix in range(len(self._test_ix)):\n            test_ix = self._test_ix[ix]\n            if isinstance(X, pd.DataFrame):\n                Xo.iloc[test_ix,:] = \\\n                    self._fit_tes[ix].transform(X.iloc[test_ix,:])\n            elif isinstance(X, np.ndarray):\n                Xo[test_ix,:] = \\\n                    self._fit_tes[ix].transform(X[test_ix,:])\n            else:\n                raise TypeError('X must be DataFrame or ndarray')\n        return Xo\n\n            \n    def fit_transform(self, X, y=None):\n        \"\"\"Fit and transform the data via target encoding.\n        \n        Parameters\n        ----------\n        X : pandas DataFrame, shape [n_samples, n_columns]\n            DataFrame containing columns to encode\n        y : pandas Series, shape = [n_samples]\n            Target values (required!).\n\n        Returns\n        -------\n        pandas DataFrame\n            Input DataFrame with transformed columns\n        \"\"\"\n        return self.fit(X, y).transform(X, y)","e6f01d2e":"te_cv = TargetEncoderCV(cols = cat_features, n_splits=5).fit(train_df, target_df)\ntrain_df_te_cv = te_cv.transform(train_df)\ntest_df_te_cv = te_cv.transform(test_df)","ed8dae08":"train_df_te_cv['land_surface_condition+foundation_type'] = train_df['land_surface_condition'] + train_df['foundation_type']\ntest_df_te_cv['land_surface_condition+foundation_type'] = test_df['land_surface_condition'] + test_df['foundation_type']","2abc3d02":"te_cv = TargetEncoderCV(cols = ['land_surface_condition+foundation_type'], n_splits=5).fit(train_df_te_cv, target_df)\ntrain_df_te_cv_new = te_cv.transform(train_df_te_cv)\ntest_df_te_cv_new = te_cv.transform(test_df_te_cv)","c59ce293":"X_train = train_df_te_cv_new\nX_test = test_df_te_cv_new\ny_train = target_df['damage_grade'].values","c60e3484":"from sklearn.model_selection import train_test_split\nX_train_split, X_valid_split, y_train_split, y_valid_split = train_test_split(X_train, y_train, train_size=0.8, random_state=42)","1bdf2cde":"from catboost import CatBoostClassifier\nmodel = CatBoostClassifier(\n    iterations=100,\n    learning_rate=0.1,\n    random_seed=42,\n    loss_function='MultiClass',\n    eval_metric = 'TotalF1',\n    border_count=32, \n    depth=9,\n    early_stopping_rounds=10\n)","24b6e291":"model.fit(\n    X_train_split, y_train_split,\n    eval_set=(X_valid_split, y_valid_split),\n    verbose=10,\n    plot=False\n)","3cd1cfd0":"y_pred = model.predict(X_valid_split)","a9047358":"from sklearn.metrics import f1_score\nf1_score(y_valid_split, y_pred, average='micro')","58cef901":"X_train = train_df\nX_test = test_df\ny_train = target_df","d324557d":"model = CatBoostClassifier(\n    iterations=100,\n    learning_rate=0.1,\n    random_seed=42,\n    loss_function='MultiClass',\n    eval_metric = 'TotalF1',\n    border_count=32, \n    depth=9,\n    #early_stopping_rounds=10\n)","60508d52":"from sklearn.model_selection import KFold\n\nkf = KFold(n_splits=5)\n\nresults = []\n\nfor train_idx, test_idx in kf.split(X_train):\n    \n    X_train_cv, X_test_cv = X_train.iloc[train_idx], X_train.iloc[test_idx]\n    y_train_cv, y_test_cv = y_train.iloc[train_idx], y_train.iloc[test_idx]\n    \n    te_cv = TargetEncoderCV(cols = cat_features, n_splits=5).fit(X_train_cv, y_train_cv)\n    X_train_te_cv = te_cv.transform(X_train_cv)\n    X_test_te_cv = te_cv.transform(X_test_cv)\n    \n    model.fit(\n    X_train_te_cv, y_train_cv,\n    eval_set=(X_test_te_cv, y_test_cv),\n    verbose=10,\n    plot=False)\n    \n    results.append(model.get_best_score())\n","cb15f177":"learn_scores = []\n\nfor result in results:\n    learn_scores.append(result['learn']['TotalF1'])\n\nprint('best train cv score is: {}'.format(np.max(learn_scores)))\nprint('mean train cv score is: {}'.format(np.mean(learn_scores)))\nprint('std train cv score is: {}'.format(np.std(learn_scores)))","73e497b2":"valid_scores = []\n\nfor result in results:\n    valid_scores.append(result['validation']['TotalF1'])\n\nprint('best valid cv score is: {}'.format(np.max(valid_scores)))\nprint('mean valid cv score is: {}'.format(np.mean(valid_scores)))\nprint('std valid cv score is: {}'.format(np.std(valid_scores)))","8e550d22":"np.mean(learn_scores) - np.mean(valid_scores)","4b1c61a7":"te_cv = TargetEncoderCV(cols = cat_features, n_splits=5).fit(train_df, target_df)\ntrain_df_te_cv = te_cv.transform(train_df)\ntest_df_te_cv = te_cv.transform(test_df)\n\nX_train = train_df_te_cv\nX_test = test_df_te_cv\ny_train = target_df['damage_grade'].values\n\nmodel.fit(\n    X_train, y_train,\n    verbose=10,\n    plot=False)","4668d0b8":"y_pred = model.predict(X_test)","4ae57ede":"predicted_df = pd.DataFrame(y_pred.astype(np.int8), index = test_df.index, columns=['damage_grade'])\npredicted_df.to_csv('baseline.csv')","a71983eb":"#LB result \u2013 0.7324","fa2995a3":"\u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0437\u0434\u0430\u043d\u0438\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u044f\u0434 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0435, \u043f\u043e\u0441\u0442\u0440\u0430\u0434\u0430\u0432\u0448\u0435\u043c \u043e\u0442 \u0437\u0435\u043c\u043b\u0435\u0442\u0440\u044f\u0441\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 Gorkha.\n\n\u0412 \u044d\u0442\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u0435\u0442\u0441\u044f 39 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0433\u0434\u0435 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 `building_id` \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c. \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 38 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0438\u0436\u0435. \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0431\u044b\u043b\u0438 \u043e\u0431\u0444\u0443\u0441\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438. \u041f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u043d\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.","9341a4d8":" **\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e Target Encoding**","43f288a6":"**Intro**","5d6b6902":"\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0448\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 **F1**, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0440\u0430\u0432\u043d\u043e\u0432\u0435\u0448\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u043b\u043d\u043e\u0442\u0443 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430. \u0422\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u043e, \u043e\u0446\u0435\u043d\u043a\u0430 F1 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430, \u043d\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0440\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043c\u0435\u0442\u043a\u0438, \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 **\u043c\u0438\u043a\u0440\u043e-\u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u043d\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439 F1** (micro averaged F1 score).","6f65946c":"**\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Target Encoding \u0441 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439**","da7967ea":"**\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438**","a2f832ba":"**\u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433**","d9c1d62f":"\u041c\u044b \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0443\u0449\u0435\u0440\u0431\u0430 (`damage_grade`) \u043e\u0442 1 \u0434\u043e 3. \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0443\u0449\u0435\u0440\u0431\u0430 \u2013 \u044d\u0442\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0430\u044f, \u0447\u0442\u043e \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u0430\u0436\u0435\u043d. \u042d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438. (\u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0438\u043d\u043e\u0433\u0434\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0447\u0442\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439.)","3e0943df":"**\u041a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u0438 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c Target Encoding**","14e9060d":"\u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u044b:\n\n- **geo_level_1_id**, **geo_level_2_id**, **geo_level_3_id** (type: int): \u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u0435\u0433\u0438\u043e\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u0440\u0443\u043f\u043d\u043e\u0433\u043e (level 1) \u0434\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0440\u0435\u0433\u0438\u043e\u043d\u0430 (level 3). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: level 1: 0-30, level 2: 0-1427, level 3: 0-12567.\n- **count_floors_pre_eq** (type: int): \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u043e \u0437\u0435\u043c\u043b\u0435\u0442\u0440\u044f\u0441\u0435\u043d\u0438\u044f.\n- **age** (\u0442\u0438\u043f: int): \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u0433\u043e\u0434\u0430\u0445.\n- **area_percentage** (type: int): \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0434\u0430\u043d\u0438\u044f.\n- **height_percentage** (\u0442\u0438\u043f: int): \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u0437\u0434\u0430\u043d\u0438\u044f.\n- **land_surface_condition** (type: categorical): \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0440\u0445\u043d\u043e\u0441\u0442\u0438 \u0437\u0435\u043c\u043b\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0437\u0434\u0430\u043d\u0438\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: n, o, t.\n- **foundation_type** (type: categorical): \u0442\u0438\u043f \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043f\u0440\u0438 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: h, i, r, u, w.\n- **roof_type** (type: categorical): \u0442\u0438\u043f \u043a\u0440\u044b\u0448\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043f\u0440\u0438 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: n, q, x.\n- **ground_floor_type** (type: categorical): \u0442\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: f, m, v, x, z.\n- **other_floor_type** (type: categorical): \u0442\u0438\u043f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0445 \u044d\u0442\u0430\u0436\u0430\u0445 (\u043a\u0440\u043e\u043c\u0435 \u043a\u0440\u043e\u0432\u043b\u0438). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: j, q, s, x.\n- **position** (type: categorical): \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0437\u0434\u0430\u043d\u0438\u044f. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: j, o, s, t.\n- **plan_configuration** (type: categorical): \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043f\u043b\u0430\u043d\u0430 \u0437\u0434\u0430\u043d\u0438\u044f. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: a, c, d, f, m, n, o, q, s, u.\n- **has_superstructure_adobe_mud** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u0438\u0437 \u0441\u044b\u0440\u0446\u043e\u0432\u043e\u0433\u043e \u043a\u0438\u0440\u043f\u0438\u0447\u0430 \u0438\u0437 \u0433\u043b\u0438\u043d\u044b \u0438 \u0440\u0435\u0437\u0430\u043d\u043e\u0439 \u0441\u043e\u043b\u043e\u043c\u044b.\n- **has_superstructure_mud_mortar_stone** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u0433\u0440\u044f\u0437\u0435\u0432\u043e\u0433\u043e \u0440\u0430\u0441\u0442\u0432\u043e\u0440\u0430 \u0438 \u043a\u0430\u043c\u043d\u044f.\n- **has_superstructure_stone_flag** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u043a\u0430\u043c\u043d\u044f.\n- **has_superstructure_cement_mortar_stone** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u0446\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0442\u0432\u043e\u0440\u0430 \u0438 \u043a\u0430\u043c\u043d\u044f.\n- **has_superstructure_mud_mortar_brick** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u0433\u0440\u044f\u0437\u0435\u0432\u043e\u0433\u043e \u0440\u0430\u0441\u0442\u0432\u043e\u0440\u0430 \u0438 \u043a\u0438\u0440\u043f\u0438\u0447\u0430.\n- **has_superstructure_cement_mortar_brick** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u0446\u0435\u043c\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0442\u0432\u043e\u0440\u0430 \u0438 \u043a\u0438\u0440\u043f\u0438\u0447\u0430.\n- **has_superstructure_timber** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u0438\u0437 \u0434\u0435\u0440\u0435\u0432\u0430.\n- **has_superstructure_bamboo** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0434\u0435\u043b\u0430\u043d\u0430 \u0438\u0437 \u0431\u0430\u043c\u0431\u0443\u043a\u0430.\n- **has_superstructure_rc_non_engineered** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0436\u0435\u043b\u0435\u0437\u043e\u0431\u0435\u0442\u043e\u043d\u0430.\n- **has_superstructure_rc_engineered** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0433\u043e \u0436\u0435\u043b\u0435\u0437\u043e\u0431\u0435\u0442\u043e\u043d\u0430.\n- **has_superstructure_other** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0431\u044b\u043b\u0430 \u043b\u0438 \u043d\u0430\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430.\n- **legal_ownership_status** (type: categorical): \u043f\u0440\u0430\u0432\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0437\u0435\u043c\u043b\u044e, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0437\u0434\u0430\u043d\u0438\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: a, r, v, w.\n- **count_families** (\u0442\u0438\u043f: int): \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u043c\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0436\u0438\u0432\u0443\u0442 \u0432 \u0437\u0434\u0430\u043d\u0438\u0438.\n- **has_secondary_use** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439.\n- **has_secondary_use_agriculture** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u0441\u0435\u043b\u044c\u0441\u043a\u043e\u0445\u043e\u0437\u044f\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0446\u0435\u043b\u044f\u0445.\n- **has_secondary_use_hotel** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u043a \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u0430.\n- **has_secondary_use_rental** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438 \u0432 \u0430\u0440\u0435\u043d\u0434\u0443.\n- **has_secondary_use_institution** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0430\u043a\u043e\u0433\u043e-\u043b\u0438\u0431\u043e \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f.\n- **has_secondary_use_school** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u0430\u043a \u0448\u043a\u043e\u043b\u0430.\n- **has_secondary_use_industry** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0445 \u0446\u0435\u043b\u044f\u0445.\n- **has_secondary_use_health_post** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430.\n- **has_secondary_use_gov_office** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f.\n- **has_secondary_use_use_police** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u043b\u0438\u0446\u0435\u0439\u0441\u043a\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0430.\n- **has_secondary_use_other** (type: binary): \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f-\u0444\u043b\u0430\u0433, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u043b\u0438 \u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0446\u0435\u043b\u0435\u0439.","894bcc30":"**Data Downloading and Transformation**","9d8d8278":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0437\u0434\u0430\u043d\u0438\u044f, \u0432\u0430\u0448\u0430 \u0446\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u0440\u043e\u0432\u043d\u044f \u0443\u0449\u0435\u0440\u0431\u0430, \u043d\u0430\u043d\u0435\u0441\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0434\u0430\u043d\u0438\u044f\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0435\u043c\u043b\u0435\u0442\u0440\u044f\u0441\u0435\u043d\u0438\u044f \u0432 \u0413\u043e\u0440\u0445\u0435 \u0432 \u041d\u0435\u043f\u0430\u043b\u0435 \u0432 2015-\u043c \u0433\u043e\u0434\u0443.","14f6da7c":"$$F1_{micro} = \\frac{2 \\cdot P_{micro} \\cdot R_{micro}}{P_{micro} + R_{micro}},$$\n\u0433\u0434\u0435 $P_{micro}=\\frac {\\sum_{k=1}^{3}TP_k} {\\sum_{k=1}^{3}(TP_k+FP_k)}$, $R_{micro}=\\frac {\\sum_{k=1}^{3}TP_k} {\\sum_{k=1}^{3}(TP_k+FN_k)}$"}}