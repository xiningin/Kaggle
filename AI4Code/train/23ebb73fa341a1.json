{"cell_type":{"f557fac5":"code","29a9873d":"code","ec4e1e68":"code","177f85ab":"code","175259fb":"code","5e113280":"code","550d214a":"code","ce792262":"code","23924c4a":"code","3fcdd61e":"code","1342181e":"code","8dd10bfc":"code","72d35490":"code","83a5d6c1":"code","c257cfa9":"code","37c9f9e9":"code","8ce0719b":"code","49ecd16f":"code","98a582ce":"code","8ac94197":"code","7ba4d066":"code","4f36990b":"code","14fc56bb":"code","75230bcd":"code","596b1b59":"code","dbcc9ebe":"code","59d60a37":"code","ba8ad2a2":"code","7a1a5b27":"code","6c9f4e55":"code","9e23e63a":"code","1bd1cdfa":"code","a8caa3c6":"markdown","7a4a6718":"markdown","d8abc031":"markdown","a178c659":"markdown","2ca1c2b2":"markdown","07fba609":"markdown","07452e11":"markdown","71876c80":"markdown","fecbc4fb":"markdown","42586efa":"markdown","521bbc90":"markdown","f168f36f":"markdown","68b45fa9":"markdown","b565ab29":"markdown","4378b1bf":"markdown","55cdc817":"markdown","aa5df2bb":"markdown","c6463ae0":"markdown","d7813ffe":"markdown","8f5e7387":"markdown","eea3cfcc":"markdown","ad193b71":"markdown","cd725644":"markdown","2c430c73":"markdown","b14f9236":"markdown","e302e88a":"markdown","31d2500a":"markdown"},"source":{"f557fac5":"import numpy as np\nimport pandas as pd","29a9873d":"import matplotlib.pyplot as plt","ec4e1e68":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier","177f85ab":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import auc, roc_curve\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_recall_fscore_support","175259fb":"from sklearn.preprocessing import StandardScaler as ss","5e113280":"from sklearn.decomposition import PCA","550d214a":"from sklearn.model_selection import train_test_split","ce792262":"from sklearn import preprocessing","23924c4a":"data = pd.read_csv(\"..\/input\/data.csv\")\nprint(\"Information of data columns and data type:\")\nprint(data.info())","3fcdd61e":"print(\"Quick Glance of the data: \")\nprint(data.head())","1342181e":"print(\"Data Information: \")\nprint(data.describe())","8dd10bfc":"print(\"Shape of the Data: \")\nprint(data.shape)","72d35490":"print(\"Original Values in the diagnosis column and their count: \")\nprint(data['diagnosis'].value_counts())\n","83a5d6c1":"\nlb = preprocessing.LabelBinarizer()\ndata['diagnosis'] = lb.fit_transform(data['diagnosis'])","c257cfa9":"print(\"Looking for the data categories: \")\nprint(lb.classes_)","37c9f9e9":"print(\"Check the bindarized data: \")\nprint(data['diagnosis'].value_counts())","8ce0719b":"data = data.drop([\"id\", \"Unnamed: 32\"], axis=1)","49ecd16f":"X = data.drop(\"diagnosis\", axis=1)\ny = data[\"diagnosis\"].values\nprint(X.shape)\nprint(y.shape)","98a582ce":"scale = ss()\nX = scale.fit_transform(X)\nprint(X.shape)\nprint(X[:5,:])","8ac94197":"pca = PCA(n_components = 0.95)\nX = pca.fit_transform(X)\nprint(X.shape)\nprint(X[:5,:])","7ba4d066":"print(pca.explained_variance_ratio_)\nprint(pca.explained_variance_ratio_.cumsum())","4f36990b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, shuffle = True )","14fc56bb":"dt = DecisionTreeClassifier()\nrf = RandomForestClassifier(n_estimators=100)\netc = ExtraTreesClassifier(n_estimators=100)\nknc = KNeighborsClassifier()\nxg = XGBClassifier(learning_rate=0.5, reg_alpha= 5, reg_lambda= 0.1)\ngbm = GradientBoostingClassifier()","75230bcd":"dt1 = dt.fit(X_train,y_train)\nrf1 = rf.fit(X_train,y_train)\netc1 = etc.fit(X_train,y_train)\nknc1 = knc.fit(X_train,y_train)\nxg1 = xg.fit(X_train,y_train)\ngbm1 = gbm.fit(X_train,y_train)","596b1b59":"y_pred_dt = dt1.predict(X_test)\ny_pred_rf = rf1.predict(X_test)\ny_pred_etc= etc1.predict(X_test)\ny_pred_knc= knc1.predict(X_test)\ny_pred_xg= xg1.predict(X_test)\ny_pred_gbm= gbm1.predict(X_test)","dbcc9ebe":"y_pred_dt_prob = dt1.predict_proba(X_test)\ny_pred_rf_prob = rf1.predict_proba(X_test)\ny_pred_etc_prob = etc1.predict_proba(X_test)\ny_pred_knc_prob = knc1.predict_proba(X_test)\ny_pred_xg_prob = xg1.predict_proba(X_test)\ny_pred_gbm_prob= gbm1.predict_proba(X_test)","59d60a37":"print(\"DecisionTreeClassifier: {0}\".format(accuracy_score(y_test,y_pred_dt)))\nprint(\"RandomForestClassifier: {0}\".format(accuracy_score(y_test,y_pred_rf)))\nprint(\"ExtraTreesClassifier: {0}\".format(accuracy_score(y_test,y_pred_etc)))\nprint(\"KNeighborsClassifier: {0}\".format(accuracy_score(y_test,y_pred_knc)))\nprint(\"XGBClassifier: {0}\".format(accuracy_score(y_test,y_pred_xg)))\nprint(\"GradientBoostingClassifier: {0}\".format(accuracy_score(y_test,y_pred_gbm)))","ba8ad2a2":"print(\"DecisionTreeClassifier: \")\nprint(confusion_matrix(y_test,y_pred_dt))\nprint(\"RandomForestClassifier: \")\nprint(confusion_matrix(y_test,y_pred_rf))\nprint(\"ExtraTreesClassifier: \")\nprint(confusion_matrix(y_test,y_pred_etc))\nprint(\"GradientBoostingClassifier: \")\nprint(confusion_matrix(y_test,y_pred_gbm))\nprint(\"KNeighborsClassifier: \")\nprint(confusion_matrix(y_test,y_pred_knc))\nprint(\"XGBClassifier: \")\nprint(confusion_matrix(y_test,y_pred_xg))","7a1a5b27":"fpr_dt, tpr_dt, thresholds = roc_curve(y_test, y_pred_dt_prob[: , 1], pos_label= 1)\nfpr_rf, tpr_rf, thresholds = roc_curve(y_test, y_pred_rf_prob[: , 1], pos_label= 1)\nfpr_etc, tpr_etc, thresholds = roc_curve(y_test, y_pred_rf_prob[: , 1], pos_label= 1)\nfpr_knc, tpr_knc, thresholds = roc_curve(y_test, y_pred_rf_prob[: , 1], pos_label= 1)\nfpr_xg, tpr_xg, thresholds = roc_curve(y_test, y_pred_xg_prob[: , 1], pos_label= 1)\nfpr_gbm, tpr_gbm,thresholds = roc_curve(y_test, y_pred_gbm_prob[: , 1], pos_label= 1)","6c9f4e55":"print(\"DecisionTreeClassifier: {0}\".format(auc(fpr_dt,tpr_dt)))\nprint(\"RandomForestClassifier: {0}\".format(auc(fpr_rf,tpr_rf)))\nprint(\"ExtraTreesClassifier: {0}\".format(auc(fpr_etc,tpr_etc)))\nprint(\"GradientBoostingClassifier: {0}\".format(auc(fpr_gbm,tpr_gbm)))\nprint(\"KNeighborsClassifier: {0}\".format(auc(fpr_knc,tpr_knc)))\nprint(\"XGBClassifier: {0}\".format(auc(fpr_xg,tpr_xg)))","9e23e63a":"print(\"DecisionTreeClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_dt))\nprint(\"RandomForestClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_rf))\nprint(\"ExtraTreesClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_etc))\nprint(\"GradientBoostingClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_gbm))\nprint(\"KNeighborsClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_knc))\nprint(\"XGBClassifier: \")\nprint(precision_recall_fscore_support(y_test,y_pred_xg))\n","1bd1cdfa":"# Plot ROC curve now\nfig = plt.figure(figsize=(12,10))\nax = fig.add_subplot(111)\n\n# Connect diagonals\nax.plot([0, 1], [0, 1], ls=\"--\")   # Dashed diagonal line\n\n# Labels etc\nax.set_xlabel('False Positive Rate')\nax.set_ylabel('True Positive Rate')\nax.set_title('ROC curve for models')\n\n# Set graph limits\nax.set_xlim([0.0, 1.0])\nax.set_ylim([0.0, 1.0])\n\n# Plot each graph now\nax.plot(fpr_dt, tpr_dt, label = \"dt\")\nax.plot(fpr_rf, tpr_rf, label = \"rf\")\nax.plot(fpr_etc, tpr_etc, label = \"etc\")\nax.plot(fpr_knc, tpr_knc, label = \"knc\")\nax.plot(fpr_xg, tpr_xg, label = \"xg\")\nax.plot(fpr_gbm, tpr_gbm, label = \"gbm\")\n\n# Set legend and show plot\nax.legend(loc=\"lower right\")\nplt.show()","a8caa3c6":"Scale the data","7a4a6718":"Train data","d8abc031":"Get probability values","a178c659":"Explained Variance","2ca1c2b2":"1.1 Pandas and Numpy","07fba609":"1.2 For plotting","07452e11":"Data importing and viewing the data","71876c80":"1.3 For modeling","fecbc4fb":"Precision\/Recall\/F-score for each label (0,1)","42586efa":"Data Binarization M = 1 , B = 0","521bbc90":"Get AUC values","f168f36f":"1.6 Import PCA class","68b45fa9":"1.4 For performance measures","b565ab29":"Splitting the Features and Target Data into X and y","4378b1bf":"1.5 Import the Data Scaler","55cdc817":"Apply PCA","aa5df2bb":"Make predictions","c6463ae0":"Droppping the unwanted columns","d7813ffe":"Split and shuffle data","8f5e7387":"1.1 Plot ROC curve now","eea3cfcc":"1.8 Data Preprocessor for binarization","ad193b71":"Calculate accuracy","cd725644":"1.7 For data splitting","2c430c73":"Binarizing now","b14f9236":"Calculate Confusion Matrix","e302e88a":"Calculate ROC graph","31d2500a":"Create default classifiers"}}