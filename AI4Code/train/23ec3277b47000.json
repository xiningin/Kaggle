{"cell_type":{"53c40632":"code","83d926dc":"code","37870b4a":"code","fd95a669":"code","1dc6f967":"code","09f2e5cd":"code","17807a40":"code","9a92d23a":"code","4427f4ff":"code","f499010f":"code","ccf0239c":"code","b8cd971f":"code","2a46ec87":"code","55cd1d9b":"code","41384654":"code","69e1f539":"code","00df1bba":"code","0ee77d40":"code","35886eee":"code","80d254e6":"code","153be165":"code","788351c2":"code","615a4ace":"code","721b9c94":"code","d1cde0d8":"code","b51ec80c":"code","29d80f1d":"code","3a1f7b13":"code","49116431":"code","f649b8b4":"code","040b5551":"markdown","94d6508d":"markdown","bae84c6f":"markdown","f9e885cb":"markdown"},"source":{"53c40632":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83d926dc":"data = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndata.head(15)\n","37870b4a":"data.corr()#Lookin for correlation","fd95a669":"ax = sns.heatmap(data.corr(), annot=True, fmt=\" .1f\")#Corr EDA","1dc6f967":"#data[\"death\"] = [\"death\" if i > 0 else \"alive\" for i in data.DEATH_EVENT]","09f2e5cd":"trace1 = go.Bar(\n                x = data.sex,\n                y = data.DEATH_EVENT,\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","17807a40":"counter_data_sex = Counter(data.sex)\ndata_most_common_sex = counter_data_sex.most_common(2)\ndata_most_common_sex = pd.DataFrame(data_most_common_sex)\ndata_most_common_sex.columns = [\"a\",\"b\"]\ndata_most_common_sex","9a92d23a":"labels = data_most_common_sex.a\ncolors = ['blue','red']\nexplode = [0,0]\nsizes = data_most_common_sex.b\n\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes,  explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Genders',color = 'blue',fontsize = 15)","4427f4ff":"trace1 = go.Bar(\n                x = data.smoking,\n                y = data.DEATH_EVENT,\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","f499010f":"trace1 = go.Bar(\n                x = data.diabetes,\n                y = data.DEATH_EVENT,\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","ccf0239c":"trace1 = go.Bar(\n                x = data.anaemia,\n                y = data.DEATH_EVENT,\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                )\n\ndata1 = [trace1]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data1, layout = layout)\niplot(fig)","b8cd971f":"counter_data_time = Counter(data.time)\ndata_most_common_time = counter_data_time.most_common(10)\ndata_most_common_time = pd.DataFrame(data_most_common_time)\ndata_most_common_time.columns = [\"a\",\"b\"]\ndata_most_common_time","2a46ec87":"labels = data_most_common_time.a\ncolors = ['blue','red','green','cyan','purple','gray','orange','yellow','black','pink']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = data_most_common_time.b\n\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes,  explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Time',color = 'blue',fontsize = 15)","55cd1d9b":"counter_data_serum_sodium = Counter(data.serum_sodium)\ndata_most_common_serum_sodium = counter_data_serum_sodium.most_common(10)\ndata_most_common_serum_sodium = pd.DataFrame(data_most_common_serum_sodium)\ndata_most_common_serum_sodium.columns = [\"a\",\"b\"]\ndata_most_common_serum_sodium","41384654":"labels = data_most_common_serum_sodium.a\ncolors = ['blue','red','green','cyan','purple','gray','orange','yellow','black','pink']\nexplode = [0,0,0,0,0,0,0,0,0,0]\nsizes = data_most_common_serum_sodium.b\n\n\nplt.figure(figsize = (7,7))\nplt.pie(sizes,  explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Time',color = 'blue',fontsize = 15)","69e1f539":"data.describe()","00df1bba":"y = data.DEATH_EVENT.values\nx_data = data.drop([\"DEATH_EVENT\"],axis=1)","0ee77d40":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values #Normalize data","35886eee":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 42)\n\n#x_train = x_train.T\n#x_test = x_test.T\n#y_train = y_train.T\n#y_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","80d254e6":"#from sklearn.linear_model import LogisticRegression\n#lr = LogisticRegression()\n#lr.fit(x_train.T,y_train.T)\n#print(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))\n","153be165":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 7) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\" {} nn score: {} \".format(7,knn.score(x_test,y_test)))","788351c2":"# find k value\nscore_list = []\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,15),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n","615a4ace":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"test accuracy {}\".format(lr.score(x_test,y_test)))\n","721b9c94":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(x_train,y_train)\n\nprint(\"decision tree score: \", dt.score(x_test,y_test))","d1cde0d8":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 100,random_state = 1)\nrf.fit(x_train,y_train)\nprint(\"random forest algo result: \",rf.score(x_test,y_test))\n","b51ec80c":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(\"print accuracy of naive bayes algo: \",nb.score(x_test,y_test))","29d80f1d":"from scipy.cluster.hierarchy import linkage, dendrogram #We are using dendogram for finding best value\n\nmerg = linkage(data,method=\"ward\")\ndendrogram(merg,leaf_rotation = 90)\nplt.xlabel(\"data points\")\nplt.ylabel(\"euclidean distance\")\nplt.show()","3a1f7b13":"from sklearn.cluster import AgglomerativeClustering\n\nhiyerartical_cluster = AgglomerativeClustering(n_clusters = 3,affinity= \"euclidean\",linkage = \"ward\")\ncluster = hiyerartical_cluster.fit_predict(data)\n\ndata[\"label\"] = cluster\n\nplt.scatter(data.platelets[data.label == 0 ],data.age[data.label == 0],color = \"red\")\nplt.scatter(data.platelets[data.label == 1 ],data.age[data.label == 1],color = \"green\")\nplt.scatter(data.platelets[data.label == 2 ],data.age[data.label == 2],color = \"blue\")\nplt.show()\n\n","49116431":"from sklearn.cluster import KMeans #We are choosing elbow value\nwcss = []\n\nfor k in range(1,15):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(data)\n    wcss.append(kmeans.inertia_)\n    \nplt.plot(range(1,15),wcss)\nplt.xlabel(\"number of k (cluster) value\")\nplt.ylabel(\"wcss\")\nplt.show()\n","f649b8b4":"kmeans2 = KMeans(n_clusters=3)\nclusters = kmeans2.fit_predict(data)\n\ndata[\"label\"] = clusters\n\nplt.scatter(data.platelets[data.label == 0 ],data.age[data.label == 0],color = \"red\")\nplt.scatter(data.platelets[data.label == 1 ],data.age[data.label == 1],color = \"green\")\nplt.scatter(data.platelets[data.label == 2 ],data.age[data.label == 2],color = \"blue\")\nplt.scatter(kmeans2.cluster_centers_[:,0],kmeans2.cluster_centers_[:,1],color = \"yellow\")\nplt.show()\n","040b5551":"<a id=\"1\"><\/a> <br>\n# Data analysis and EDA","94d6508d":"# Thats some basic EDA and machine learning of this dataset. Please give your advices on comments because I am newbie","bae84c6f":"<a id=\"2\"><\/a> <br>\n# 8. MACHINE LEARNING (ML)","f9e885cb":"# EDA AND MACHINE LEARNING\nIn this kernel we have some EDA and machine learning\n1. [Data analysis and EDA](#1)\n1. [Machine Learning](#2)"}}