{"cell_type":{"42836538":"code","e75ca78d":"code","e767debe":"code","08848498":"code","3138c2ae":"code","de6b5b96":"code","5aac8d7a":"code","1355125a":"code","39cf44b6":"code","86d92512":"code","8e670774":"code","2393a103":"code","ae03b299":"code","a0384aba":"code","0bf42fc7":"code","d18c7afd":"code","eea55b83":"code","b233bbcf":"code","587444a5":"code","20e48d74":"code","b9a95dab":"code","8b9b4668":"code","c7782106":"code","204f233d":"code","3cfad09d":"code","78eee5cc":"code","7807b4b7":"code","8d219b89":"code","88b29600":"code","470b3c76":"code","b77c4add":"code","1218b567":"code","0aa6bdbe":"code","e9229b84":"code","e6f75a35":"code","24850f2f":"code","83036b44":"code","f84adb4f":"code","109cf6a2":"code","6806c5d3":"code","27b2417d":"code","1b5018e9":"code","1a7f8901":"code","95305e8b":"code","52837438":"code","e110c619":"code","786331fb":"code","5c9ba92d":"markdown","1ffbbd0a":"markdown","ef732d25":"markdown","8672fed6":"markdown","3f143f04":"markdown","036a5a1b":"markdown","90e763e6":"markdown","a24e98ba":"markdown","de373f82":"markdown","7cf28d38":"markdown","e0a6d578":"markdown","654eceea":"markdown"},"source":{"42836538":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\n%matplotlib inline ","e75ca78d":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')","e767debe":"confirmed_df.head()","08848498":"cols = confirmed_df.keys()","3138c2ae":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","de6b5b96":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","5aac8d7a":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","1355125a":"days_in_future = 5\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)","39cf44b6":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\nadjusted_dates = future_forcast_dates[:-5]","86d92512":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.2, shuffle=False) ","8e670774":"kernel = ['linear', 'rbf', 'poly', 'sigmoid']\nc = [0.01, 0.1, 1, 10]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","2393a103":"svm_search.best_params_","ae03b299":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","a0384aba":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","0bf42fc7":"linear_model = LinearRegression(normalize=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","d18c7afd":"linear_model.coef_","eea55b83":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)","b233bbcf":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time in Days', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","587444a5":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast_dates, svm_pred, linestyle='dashed')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time in Days', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(rotation=50, size=15)\nplt.show()","20e48d74":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast_dates, linear_pred, linestyle='dashed', color='red')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time in Days', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(rotation=50, size=15)\nplt.show()","b9a95dab":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-5:], svm_pred[-5:]))","8b9b4668":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-5:])","c7782106":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Deaths', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","204f233d":"mean_mortality_rate = np.mean(mortality_rate)\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Mortality Rate of Coronavirus Over Time', size=30)\nplt.legend(['mortality rate', 'y='+str(mean_mortality_rate)])\nplt.xlabel('Time', size=30)\nplt.ylabel('Mortality Rate', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","3cfad09d":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.title('# of Coronavirus Cases Recovered Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","78eee5cc":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","7807b4b7":"plt.figure(figsize=(20, 12))\nplt.plot(total_recovered, total_deaths)\nplt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)\nplt.xlabel('# of Coronavirus Recoveries', size=30)\nplt.ylabel('# of Coronavirus Deaths', size=30)\nplt.xticks(size=15)\nplt.show()","8d219b89":"latest_confirmed = confirmed_df[dates[-1]]\nlatest_deaths = deaths_df[dates[-1]]\nlatest_recoveries = recoveries_df[dates[-1]]","88b29600":"unique_countries =  list(confirmed_df['Country\/Region'].unique())","470b3c76":"country_confirmed_cases = []\nno_cases = []\nfor i in unique_countries:\n    cases = latest_confirmed[confirmed_df['Country\/Region']==i].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)","b77c4add":"# number of cases per country\/region\nfor i in range(len(unique_countries)):\n    print(f'{unique_countries[i]}: {country_confirmed_cases[i]} cases')","1218b567":"unique_provinces =  list(confirmed_df['Province\/State'].unique())","0aa6bdbe":"province_confirmed_cases = []\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)","e9229b84":"# number of cases per province\/state\/city\n\nfor i in range(len(unique_provinces)):\n    print(f'{unique_provinces[i]}: {province_confirmed_cases[i]} cases')","e6f75a35":"nan_indices = [] \n\n# handle nan if there is any, it is usually a float: float('nan')\n\nfor i in range(len(unique_provinces)):\n    if type(unique_provinces[i]) == float:\n        nan_indices.append(i)\n\nunique_provinces = list(unique_provinces)\nprovince_confirmed_cases = list(province_confirmed_cases)\n\nfor i in nan_indices:\n    unique_provinces.pop(i)\n    province_confirmed_cases.pop(i)","24850f2f":"plt.figure(figsize=(32, 18))\nplt.barh(unique_countries, country_confirmed_cases)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions')\nplt.xlabel('# of Covid19 Confirmed Cases')\nplt.show()","83036b44":"outside_mainland_china_confirmed = np.sum(country_confirmed_cases[1:])\nplt.figure(figsize=(16, 9))\nplt.barh(unique_countries[0], country_confirmed_cases[0])\nplt.barh('Outside Mainland China', outside_mainland_china_confirmed)\nplt.title('# of Coronavirus Confirmed Cases')\nplt.show()","f84adb4f":"# lets look at it in a logarithmic scale \nlog_country_confirmed_cases = [math.log10(i) for i in country_confirmed_cases]\nplt.figure(figsize=(32, 18))\nplt.barh(unique_countries, log_country_confirmed_cases)\nplt.title('Log of Common Log # of Coronavirus Confirmed Cases in Countries\/Regions')\nplt.show()","109cf6a2":"plt.figure(figsize=(32, 18))\nplt.barh(unique_provinces, province_confirmed_cases)\nplt.title('# of Coronavirus Confirmed Cases in Provinces\/States')\nplt.show()","6806c5d3":"log_province_confirmed_cases = [math.log10(i) for i in province_confirmed_cases]\nplt.figure(figsize=(32, 18))\nplt.barh(unique_provinces, log_province_confirmed_cases)\nplt.title('Log of # of Coronavirus Confirmed Cases in Provinces\/States')\nplt.show()","27b2417d":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases per Country')\nplt.pie(country_confirmed_cases, colors=c)\nplt.legend(unique_countries, loc='best')\nplt.show()","1b5018e9":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases per State\/Province\/Region')\nplt.pie(province_confirmed_cases, colors=c)\nplt.legend(unique_provinces, loc='best')\nplt.show()","1a7f8901":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in Countries Outside of Mainland China')\nplt.pie(country_confirmed_cases[1:], colors=c)\nplt.legend(unique_countries[1:], loc='best')\nplt.show()","95305e8b":"us_regions = list(confirmed_df[confirmed_df['Country\/Region']=='US']['Province\/State'].unique())\nus_confirmed_cases = []\nno_cases = [] \nfor i in us_regions:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        us_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    us_regions.remove(i)","52837438":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in the United States')\nplt.pie(us_confirmed_cases, colors=c)\nplt.legend(us_regions, loc='best')\nplt.show()","e110c619":"china_regions = list(confirmed_df[confirmed_df['Country\/Region']=='Mainland China']['Province\/State'].unique())\nchina_confirmed_cases = []\nno_cases = [] \nfor i in china_regions:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        china_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    china_confirmed_cases.remove(i)","786331fb":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in the Mainland China')\nplt.pie(china_confirmed_cases, colors=c)\nplt.legend(china_regions, loc='best')\nplt.show()","5c9ba92d":"Getting the latest information about provinces\/states that have confirmed coronavirus cases","1ffbbd0a":"***Visual Representations*** (bar charts and pie charts)","ef732d25":"Import the data (make sure you update this on a daily basis)","8672fed6":"Model for predicting # of confirmed cases. I am using support vector machine, random forest, and linear regression in this example. ","3f143f04":" Graphing the number of confirmed cases, deaths, and the mortality rate over time, as well as the number of recoveries","036a5a1b":"Future forcasting","90e763e6":"<h1>This notebook tracks the spread of the novel coronavirus, also known as SARS-CoV-2. It is a contagious respiratory virus that first started in Wuhan in December 2019. On 2\/11\/2020, the disease is officially named COVID-19 by the World Health Organization. \n    <br>Data: <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>https:\/\/github.com\/CSSEGISandData\/COVID-19<\/a>. A big thank you to Johns Hopkins for providing the data.\n    <br>\n    <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>WHO<\/a>\n    <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>CDC<\/a>\n    <br>Map Visualizations from  <a href='https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6'>Johns Hopkins<\/a>\n    <br>Feel free to provide me with feedbacks. \n    <br> Last update: 3\/7\/2020 7:49 PM\n    <br> Make sure you run the notebook to see the graphs better. Some diagrams are hard to see in the default view. \n    <br> <a href='https:\/\/github.com\/therealcyberlord'>Source code is on my Github<\/a>\n    \n<\/h1>\n\n<center><img src='https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg'>\n* Source: https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg <\/center>\n\n<h1>Keep strong, world!<\/h1>\n\n\n\n\n","a24e98ba":"Get all the dates for the outbreak","de373f82":"Getting information about countries\/regions that have confirmed coronavirus cases","7cf28d38":"Convert integer into datetime for better visualization","e0a6d578":"Plotting the number of deaths against the number of recoveries","654eceea":"Graphing the number of deaths and the number of recoveries"}}