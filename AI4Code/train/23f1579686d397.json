{"cell_type":{"a0fc3f37":"code","61cd337a":"code","8b485529":"code","3f60bc75":"code","53587a67":"code","85896fb8":"markdown","ec9ce1f8":"markdown","35be533a":"markdown"},"source":{"a0fc3f37":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\npd.options.mode.chained_assignment = None\n\n# Read the data\nus_data_path = \"\/kaggle\/input\/covid19-in-usa\/\"\nus_df = pd.read_csv(us_data_path + \"us_covid19_daily.csv\")\nus_states_df = pd.read_csv(us_data_path + \"us_states_covid19_daily.csv\")\nus_df[\"date\"] = pd.to_datetime(us_df[\"date\"], format=\"%Y%m%d\")\nus_states_df = us_states_df.reindex(index=us_states_df.index[::-1])\nus_states_df[\"date\"] = pd.to_datetime(us_states_df[\"date\"], format=\"%Y%m%d\").dt.date.astype(str)\n#us_states_df.head()\n\n# US state code to name mapping\nstate_map_dict = {'AL': 'Alabama',\n 'AK': 'Alaska',\n 'AS': 'American Samoa',\n 'AZ': 'Arizona',\n 'AR': 'Arkansas',\n 'CA': 'California',\n 'CO': 'Colorado',\n 'CT': 'Connecticut',\n 'DE': 'Delaware',\n 'DC': 'District of Columbia',\n 'D.C.': 'District of Columbia',\n 'FM': 'Federated States of Micronesia',\n 'FL': 'Florida',\n 'GA': 'Georgia',\n 'GU': 'Guam',\n 'HI': 'Hawaii',\n 'ID': 'Idaho',\n 'IL': 'Illinois',\n 'IN': 'Indiana',\n 'IA': 'Iowa',\n 'KS': 'Kansas',\n 'KY': 'Kentucky',\n 'LA': 'Louisiana',\n 'ME': 'Maine',\n 'MH': 'Marshall Islands',\n 'MD': 'Maryland',\n 'MA': 'Massachusetts',\n 'MI': 'Michigan',\n 'MN': 'Minnesota',\n 'MS': 'Mississippi',\n 'MO': 'Missouri',\n 'MT': 'Montana',\n 'NE': 'Nebraska',\n 'NV': 'Nevada',\n 'NH': 'New Hampshire',\n 'NJ': 'New Jersey',\n 'NM': 'New Mexico',\n 'NY': 'New York',\n 'NC': 'North Carolina',\n 'ND': 'North Dakota',\n 'MP': 'Northern Mariana Islands',\n 'OH': 'Ohio',\n 'OK': 'Oklahoma',\n 'OR': 'Oregon',\n 'PW': 'Palau',\n 'PA': 'Pennsylvania',\n 'PR': 'Puerto Rico',\n 'RI': 'Rhode Island',\n 'SC': 'South Carolina',\n 'SD': 'South Dakota',\n 'TN': 'Tennessee',\n 'TX': 'Texas',\n 'UT': 'Utah',\n 'VT': 'Vermont',\n 'VI': 'Virgin Islands',\n 'VA': 'Virginia',\n 'WA': 'Washington',\n 'WV': 'West Virginia',\n 'WI': 'Wisconsin',\n 'WY': 'Wyoming'}\n\nstate_code_dict = {v:k for k, v in state_map_dict.items()}\nstate_code_dict[\"Chicago\"] = 'Illinois'\n\ndef correct_state_names(x):\n    try:\n        return state_map_dict[x.split(\",\")[-1].strip()]\n    except:\n        return x.strip()\n    \ndef get_state_codes(x):\n    try:\n        return state_code_dict[x]\n    except:\n        return \"Others\"\n\ncovid_19_df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nus_covid_df = covid_19_df[covid_19_df[\"Country\/Region\"]==\"US\"]\nus_covid_df[\"Province\/State\"] = us_covid_df[\"Province\/State\"].apply(correct_state_names)\nus_covid_df[\"StateCode\"] = us_covid_df[\"Province\/State\"].apply(lambda x: get_state_codes(x))\n\ncumulative_df = us_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Confirmed\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Deaths\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of deaths due to COVID-19 in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of death cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\ncumulative_df[\"ConfirmedNew\"] = cumulative_df[\"Confirmed\"].diff() \nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()","61cd337a":"import datetime\n\ncumulative_df = us_covid_df.groupby([\"StateCode\", \"ObservationDate\"])[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\ncumulative_df[\"ObservationDate\"] = pd.to_datetime(cumulative_df[\"ObservationDate\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"ObservationDate\").reset_index(drop=True)\nstart_date = datetime.date(2020, 2, 25)\ncumulative_df = cumulative_df[cumulative_df[\"ObservationDate\"]>=start_date]\ncumulative_df[\"ObservationDate\"] = cumulative_df[\"ObservationDate\"].astype(str)\n\nfig = px.choropleth(locations=cumulative_df[\"StateCode\"],\n                    color=cumulative_df[\"Confirmed\"], \n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    animation_frame=cumulative_df[\"ObservationDate\"],\n                    color_continuous_scale='Reds',\n                    range_color=[0,600000]\n                    #autocolorscale=False,\n                   )\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Cumulative count of COVID-19 cases in US states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n)\n\nfig.update_layout(layout)\nfig.show()","8b485529":"cumulative_df = us_covid_df.groupby([\"StateCode\", \"ObservationDate\"])[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\ncumulative_df[\"ObservationDate\"] = pd.to_datetime(cumulative_df[\"ObservationDate\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"ObservationDate\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"ObservationDate\"]>=start_date]\ncumulative_df[\"ObservationDate\"] = cumulative_df[\"ObservationDate\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"ObservationDate\", animation_group=\"StateCode\",\n           size=\"Confirmed\", color=\"StateCode\", hover_name=\"StateCode\",\n           log_x=False, size_max=55, range_x=[0,400000], range_y=[0,40000])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & death cases over time in US states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()","3f60bc75":"fig = px.bar(us_df, x=\"date\", y=\"total\")\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Cumulative number of Total COVID-19 testing over time in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of covid-19 testings\"\n)\n\nfig.update_layout(layout)\nfig.show()","53587a67":"# import plotly.express as px\n\n# us_states_df[\"positive\"] = us_states_df[\"positive\"].fillna(0)\n\n# fig = px.scatter(us_states_df, x=\"total\", y=\"positive\", animation_frame=\"date\", animation_group=\"state\",\n#            size=\"positive\", color=\"state\", hover_name=\"state\",\n#            log_x=False, size_max=55, range_x=[0,3000000], range_y=[0,600000])\n\n# layout = go.Layout(\n#     title=go.layout.Title(\n#         text=\"Total testing counts Vs Positive Counts over time\",\n#         x=0.5\n#     ),\n#     font=dict(size=14),\n# #     width=800,\n# #     height=500,\n#     xaxis_title = \"Total number of tests\",\n#     yaxis_title = \"Number of positive tests\"\n# )\n\n# fig.update_layout(layout)\n# fig.show()","85896fb8":"### Objective\n\nObjective of this notebook is to explore the COVID-19 data of US and its states. \n\n### Number of COVID-19 cases in US\n\nIn this section, let us first see the cumulative number of cases and the number of new cases over time in US.","ec9ce1f8":"### Number of COVID-19 Testings\n\nIn this section, let us look at the plots of number of COVID-19 testings over time. \n\nFirst, let us look at the number of testings at the whole country level.","35be533a":"### Map showing cumulative count of confirmed COVID-19 cases over time "}}