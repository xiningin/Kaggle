{"cell_type":{"bf755d82":"code","c621a91c":"code","6b5743fe":"code","8da2726c":"code","65d1a90c":"code","088a2bf8":"code","42417e9c":"code","7ecb086c":"code","fb326064":"code","07ebe561":"code","ecfd8ce8":"code","102d2c01":"code","d1358972":"code","3ecb01c9":"code","2aeb7114":"code","8eb1dc71":"markdown","a31d9352":"markdown","47cac5c4":"markdown","d235e291":"markdown","30f1a91d":"markdown","c89edad9":"markdown","263a6ff3":"markdown","0acf77f8":"markdown","813700ca":"markdown","33594517":"markdown","77d05db5":"markdown","dcbe3f12":"markdown","f16bddf9":"markdown"},"source":{"bf755d82":"!pip install --upgrade category_encoders","c621a91c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport category_encoders as ce \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import recall_score, precision_score, accuracy_score, plot_confusion_matrix, classification_report, f1_score","6b5743fe":"data = pd.read_csv(\"..\/input\/car-evaluation-data-set\/car_evaluation.csv\",header=None)\ndata.head()","8da2726c":"# Changing column names for betterment\ncol_names = ['buying','maint','doors','persons','lug_boot','safety','class']\ndata.columns = col_names\ndata.head()","65d1a90c":"data.info()","088a2bf8":"def show(data):\n  for i in data.columns[1:]:\n    print(\"Feature: {} with {} Levels\".format(i,data[i].unique()))\n\nshow(data)","42417e9c":"data.isnull().sum() ","7ecb086c":"%%HTML\n<div class='tableauPlaceholder' id='viz1637670871760' style='position: relative'><noscript><a href='#'><img alt='Car Evaluation Exploratory Data Analysis ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ED&#47;EDAonCarEvaluation&#47;Dashboard1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='EDAonCarEvaluation&#47;Dashboard1' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;ED&#47;EDAonCarEvaluation&#47;Dashboard1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en-US' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1637670871760');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.height='1677px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","fb326064":"data.dtypes","07ebe561":"encoder = ce.OrdinalEncoder(cols = ['buying','maint','doors','persons','lug_boot','safety','class'])\ndata = encoder.fit_transform(data)\ndata.head()","ecfd8ce8":"x = data.drop(['class'], axis = 1)\ny = data['class']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)\nprint(\"X_train: {}\".format(x_train.shape))\nprint(\"X_test: {}\".format(x_test.shape))\nprint(\"Y_train: {}\".format(y_train.shape))\nprint(\"Y_test: {}\".format(y_test.shape))","102d2c01":"def evaluation_parametrics(y_train,yp_train,y_test,yp_test):\n  print(\"--------------------------------------------------------------------------\")\n  print(\"Classification Report for Train Data\")\n  print(classification_report(y_train, yp_train))\n  print(\"Classification Report for Test Data\")\n  print(classification_report(y_test, yp_test))\n  print(\"--------------------------------------------------------------------------\")\n  # Accuracy\n  print(\"Accuracy on Train Data is: {}\".format(round(accuracy_score(y_train,yp_train),2)))\n  print(\"Accuracy on Test Data is: {}\".format(round(accuracy_score(y_test,yp_test),2)))\n  print(\"--------------------------------------------------------------------------\")\n  # Precision\n  print(\"Precision on Train Data is: {}\".format(round(precision_score(y_train,yp_train,average = \"weighted\"),2)))\n  print(\"Precision on Test Data is: {}\".format(round(precision_score(y_test,yp_test,average = \"weighted\"),2)))\n  print(\"--------------------------------------------------------------------------\")\n  # Recall \n  print(\"Recall on Train Data is: {}\".format(round(recall_score(y_train,yp_train,average = \"weighted\"),2)))\n  print(\"Recall on Test Data is: {}\".format(round(recall_score(y_test,yp_test,average = \"weighted\"),2)))\n  print(\"--------------------------------------------------------------------------\")\n  # F1 Score\n  print(\"F1 Score on Train Data is: {}\".format(round(f1_score(y_train,yp_train,average = \"weighted\"),2)))\n  print(\"F1 Score on Test Data is: {}\".format(round(f1_score(y_test,yp_test,average = \"weighted\"),2)))\n  print(\"--------------------------------------------------------------------------\")","d1358972":"lr = LogisticRegression(max_iter = 1000,random_state = 48)\nlr.fit(x_train,y_train)\n\nyp_train = lr.predict(x_train)\nyp_test = lr.predict(x_test)\n\nevaluation_parametrics(y_train,yp_train,y_test,yp_test)","3ecb01c9":"dt = DecisionTreeClassifier(max_depth = 7,random_state = 48) # Keeping max_depth = 7 to avoid overfitting\ndt.fit(x_train,y_train)\n\nyp_train = dt.predict(x_train)\nyp_test = dt.predict(x_test)\n\nevaluation_parametrics(y_train,yp_train,y_test,yp_test)","2aeb7114":"rf = RandomForestClassifier(max_depth = 7,random_state = 48) # Keeping max_depth = 7 same as DT\nrf.fit(x_train,y_train)\n\nyp_train = rf.predict(x_train)\nyp_test = rf.predict(x_test)\n\nevaluation_parametrics(y_train,yp_train,y_test,yp_test)","8eb1dc71":"### Data Modeling","a31d9352":"##### 1. Logistics Regression","47cac5c4":"### Conclusion","d235e291":"##### 2. Decision Tree","30f1a91d":"### Dataset\n\nCar Evaluation Data: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Car+Evaluation \n\n* Rows: 1728\n* Features: 7\n* Target Feature: class\n\n","c89edad9":"##### 3. Random Forest","263a6ff3":"\n1. Implemented Logistic Regression, Decision Tree & Random Forest models.\n2. Evaluated Evaluation Metrics (Confusion Matrix, Precision, Recall, Accuracy & F1-Score).\n3. Random Forest performed slightly better out of the 3 models.\n\n![Best Model.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAx4AAAB8CAIAAABojPGlAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAABtrSURBVHhe7Z3ZleTGrkXlxLXh+iCDyo37+z7bmrak\/2SMHmJgEIiBzAHMBIGzF5aUMTKAQ0Shq0uqv\/4Fvvi\/v\/4Dg8FgMBjsW4bSyhV\/\/vzpBIbBYDAYDPZJQ2nljU5gGAwGg8FgnzSUVt5o0tY28AX0dQzE9Q30dU+TGKWVN5q0tQ18AX0dA3F9A33d0yRGaeWNJm1tA19AX8dAXN9AX\/c0iVFaeaNJW9vAF9DXMRDXN9DXPU1ilFbeaNLWNvAF9HUMxPUN9HVPkxillTeatLUdgn9+\/f3XX3\/\/+qc2R04n3IaQ+j7H759da\/7ZPhDXN9DXPU1ilFbeaNLWtg1yacP4+V0HdEBpZZ3+BbhSDJRWl1FlVE7fMBjXd0hSmTopl4615xu4uG2fp0mM0sobTdratkHKuT3Xco4GTb13sanvKfnS3W\/lcgdf9BUapdVVpGj+\/KR\/oLZ6BeP6yluaw2qmpfR5TltOrZA3fJMYpZU3mrS1bYMuaWUWgiewqe8pWXF+K+fy+pqv0CitLiJXVr+3f4GnMa5vd0s3tut6SGLBvVLtKprEKK280aStbRv0ScvSsFzU6Z9Em1PbGZmvOb8rYnprsBntHhATCL6LvC7KefZx+fSvY1PfU3I8+zCL0D6pOMFX8L351sNjTGNb3BTLHOZJUFcazfr7d6HXa7gNarPAX6LZ\/nmymMT3\/y629c3BPApUL5xkDPzO7DXI8AG5Om33zNcFIzSJUVp5o0lb2zbokjYnVG3XZGFZJTOYz5WN1GKbjB\/ThLoP7y2P3B+Ym3KwDYt1FrCp7ylS0y7k3agQWTRSq36mHVbruWbm9DvEtLgplPOsWGm06JdqjXrt2ZegnrZFt3S+f7d9\/7RvYlrfEqo91iMnoczDRL9F7h9kIrLY+3652eaNb4J8vNzVDE1ilFbeaNLWtg1SHvDkYjnT5Vfp4O3cURaLbTj7FP6RwXplhmbS6NaVPrPR+Xbfw6a+pxTNdwaBn1VcIjTlklmT7xjD4sqsEWFdaXTUv0qx9Fm+CxK+9qH9+4d9FcP6JnKsOF10H4jlvkVbm7oeeQ0Irv7wJqQOMZ2\/N2ZoEqO08kaTtrZt0CUtT4g+Y7qplbxikowVnmXbBiLr2IQhRYn1MN\/ZAjb1PYVLVwTaY\/yS4pNl2zwumTX5jrErbi8Ei+tKo6V2B3vlz\/2ahdDL\/fnIetI3sKtvJgXrKFkeDmaeWKcuF82kZq9CP1z37DCX201ilFbeaNLWtg0OknaaQrNUPBpiKVlJPYk6fZ8w3YQdojvPuPN3sanvKV3URVRfUTwP7LqIeXxza\/IdY1bcHN+RHPGVRsfasYFeL7EmT54Kvdyf2LY8mvMFzOpbSNE6SpZnopkUyHNXi6b9TP7+TTAm5YomMUorbzRpa9sGB0k7XKbbtThhOTQfYNnIJqSPXY7y5ekzG53v\/D1s6ntKfzEKEQ5ivBjqtxNtvsaafMdYFbcPd2JXcBXjZezTANuNz+uGDoVe7k+Usd8025L6VvWtpOAehWv2GqzY565kSv3dbnxq+ixGV\/vYokmM0sobTdratsFB0g4pVLKSzaYZW0sOUat+3tOOPrXdWDKyj2UT9sw0Jhex8\/CFFrCp7yk55lxmoaSUNQd9PkSt8llolhuyua2wJt8xRsUVwW7svQuNHuqv2m2zUlM8STy7Tt6aq\/0Tdeo+bAGj+m6keB7FK8d7eA8qFPB9bZ65TV3JJCYRQurcks+S+3RPtEKTGKWVN5q0tW2DlBWLNBhTiChZV5EL+VAbSZtsjZyhFZGofB8+ST6gO0+\/8NvY1PeUrJqQubson1Vc9Jb\/SHvbnktmTb5jbIqbYii1K\/D+uUbL\/r2bOlOD69U9ai00sXruNiL7vo1NfRtcCA4P8sbkfRDTZmIUxEh+hzaGkeEhB48wQpMYpZU3mrS1DXwBfR0DcfXIX4WNffWFvu5pEqO08kaTtraBL6CvYyCuGrmymnxr5atAX\/c0iVFaeaNJW9vAF9DXMRBXC\/6XlXaAvu5pEqO08kaTtraBL6CvY4KK+7\/\/1g\/eiahvGHELTWKUVq5ousJgPoyu5q4H5swgsWMLK+5ff\/786bpgsHsZrmbHBnHdGyR2bHFLK3yrA3Z3w9Xs2CCue4PEjg2lFcyb5b8hjEGkv84Pp+\/\/\/vvnz5\/62TvhxC3gZ60cEyl\/iSaxKK3KGLg1EdVEaeUYlFbuQWnlGJRWZGUM3JqIaqK0cgxKK\/egtHIMSiuyMgZuTUQ1UVo5BqWVe1BaOQalFVkZA7cmopoorRyD0so9KK0cg9KKrIwFJP2vex\/4bVMPTvsuxtT8yG\/yQmn1Na7XF6XVN0H+ahJRX5RWZGXMLPktWP3C6\/obtF97SVBaSbZIjzz9qyPudTUrOn4V4fTVvJqt66shLnErfYkw+RtR30j5SzSJ71haTd6Eg6FHQGm15BY+X\/GnXhXHL4heOH0v+lOvSX2VxSXs60uEyd+I+kbKX6JJfLvS6udX\/qesUdPI379+vRynByNs\/zUmlNW8hc8orV7Gvr4ord7Bvr4ESquXsa8vSiuyMmaWUlr9rv+qnYkaoCFO7XtZma4cS7MLP7\/7lfuY6B8eYBFlNWc+p74SNBYfHjMea75BWbjLohXMT17N3E8+zl624r0IiJ6v4fT98NXM\/eTjH9FXWVxi5maRqZ5\/GxTuIH+7gCj5GlHfSPlLNIlvWFq1f2+UF6IPdo7cPis32ygfrDHfxuTuubUNyQcYRVnNmc85er0E+yQZQb6BXDjb+jU+dTWv3w0+m\/q3OXouNsLp+8Gr+ev6KotLzE6Y+naZEtSzT\/qwvkSY\/I2ob6T8JZrEdyythkAd9jbScO3qI8ra6aNY143xZSZRVnPmc+rrgisQwecbpM9snVo8P3Q1d8fncxauqHm4E07fz13N3fH5nIUrOh7uKItLzE6Y+uzoS4TJ34j6Rspfokl8z9KKhSR11uDwOKXP\/cvVxsWrlZDbjUweYBZlNWc+z4I7BG6bwDfoFqrF8zNX8+G7sQ3KJWoe7oTT92NXswF9lcUlZifsZMp8T18iTP5G1DdS\/hJN4puWVjkm6TOPDfvMpzbSeO4bRveV04Ub\/GFmUVZz5nML5EaO2j5LBJFv0C1Ui+cHr+bVu1FIixIz55UIp+9nr+bv6qssLjE7Yeqzoy8RJn8j6hspf4km8V1Lq9r44e8Cj1OOoQwzG+4jejDEORozg7KaM59TH49t\/05\/NnWJD\/6Fwvl5ufdqHu6E0\/ezf6Fwft4r9VUWl5idMPXZ0ZcIk78R9Y2Uv0ST+LalVWmJ+knEqQzLwb3JW\/nzvjIvZOGm4a0lHmAVZTVnPqe+PbJEDuHWkxuyyQPIFvKht\/jQ1bx+N+hD84svlK+sCuH0\/dzV\/H19lcUlZm6mPnHo1CEE\/aS+RJj8jahvpPwlmsT3La1K8\/BNSB2NToayug6kBhvfxwjWPzzAIspqznxOfd37yENW\/rvfbQLfoFs42\/slPnU1E0fvxgaPTevvAvYy4fT94NVMfFdfZXGJmZupz46+RJj8jahvpPwlmsR3Kq3AI0RU84qr2Srh9L3oajZJOHELYfI3or6R8pdoEqO08kZENVFaOQallXtQWjkGpRVZGQO3JqKaKK0cg9LKPSitHIPSiqyMgVsTUU2UVo5BaeUelFaOQWlFVsbArYmoJkorx6C0cg9KK8eELa3I7daAwe5olL1dD8yNQVz3BokdW1hxxXetYLA7Gq5mxwZx3RskdmworWCwuxquZscGcd0bJHZsKK2Spb8qBDcnopr4WSvH4Get3IOftXIMfoydrIyBWxNRTZRWjkFp5R6UVo5BaUVWxsCtiagmSivHoLRyD0orx6C0Iitj4NZEVBOllWNQWrkHpZVjUFqRlbGLyb8\/8blf+vjCkltwiV+fVdMGKK0cg9LKPSitHIPSiqyMTdD5FdiFT5RWeQHHZl12m9JKxPPwV4TzXzA+ca0Ma\/2S8Yb21WzZX6v6ihFNjy+4ms36e4W4hGl9CYv5C32ViJS\/RJP486XVA7z9uBz6PVxFCc3XxTDnaj5Jjl6TI7+Ri1DKsdzaZWTpoK6E6tVs3F+T+qY95ICe09pXs2V\/1cUlrOtLmMtf6KvjbyJS\/hJN4hClVR9k15yr+Ry9GENsG\/0Ib+fPtM169TtoXs3W\/bWpr2BzvjbfRPlqNu2vtriEeX0Je\/kr0PM3or6R8pdoEr9dWuVjNeTB5VgijYvN2JSyNo0yysTu+Xzf6bHyBH6WwQH+GDGwPvPP77qozV9tMjiVmHX2x5IP7x34+b2PizMLztV8ivxIfpLitejZkO6MK4lp59soXs3m\/bWtbyaPrN\/QJ9G9mm37qywuYdvfit38zej5G1HfSPlLNInfK606r3Jzmyc84RPZZnxfms9ni8d189gotcTMgnh2ffo+TY7y\/cRIXsXOvLcS6026w5Y5007RK55H5KYcFMdpQx3naj7F+CjpuaQck+aXD+Oso8Wvo3g1m\/fXtr6ZPKjmtO7VbNtfZXEJ2\/5W7OZvRs\/fiPpGyl+iSfxOaTXxiR0yfdwH2Q7zj5yhm3Wkh06WSPLJGOKQabOho2wph9hT00ex6GST4YTTTt57HMz8mY3Ot8ucq\/kU45OOXmUinzozm3Oy+EW+djUTn\/bXtr5EnrB4OV\/hm1cz8VF\/lcUlbPtbsZu\/hKa\/EfWNlL9Ek\/id0ir19sfdZwqP8\/Frg2+WJw2eDY9b7LqEzyqP2Jdsj5Q8cGb+1KNN2qBwYdrJHO2fkFgPs5GeczWfYnySCJKg+FiGqr\/9vPXid\/jS1fwVf23rm\/dbvZqv8b2r+fP+KotL2NeXsJu\/0PdtIuUv0SR+o7SaupRmCl829onjZtk9NmeYsXes48jpZon9jnY4PDNf88AxeqcyXeeJX+yp3QH2hQPnaj7FeLDVs\/NMMZBmdk49ELgXULyazftrWd\/cMVv7DrpXs21\/lcUl7OtLWM1fdX8j6hspf4km8bvftZJesonJsfmh55vxkA0zWMd8dUcf\/7Sotdc7HJ9ZePrQMYZzZFgn20UcscCf0R3g4PHnaj5H\/6ipT4nRg8nU5eq3ULyazftrVt88rutrRvdqtu2vtriEaX8rJvP3Cn8j6hspf4km8Vs\/xp6Pyg4nnCknZ2wb7JvRJ+HoNmOI1jDYDkOt9nln2EAskjvk3WsrPUewzUoDfL+DTejD6NS0U3wsG7KHpDG5iB2AL+w4V\/NJ8kHEKduTxVDXqm126ERe3\/W9j+bVbN1fm\/rmdfrCJpSvZtP+qotLWPa3Yi9\/oa8akfKXaBI\/XloJ9gOLIeZHPjw7+h6DtGKbyFdzP1t\/6eRLiBKXAn9kI08Qcdsfvzc3ZPfyzGK\/xGKTuVPLTu4AnyQG+gP0Cxnnaj4PP9dw3qUD\/MQiVpUhoC+jejUTlv01qW\/XX+AL30D7aibM+nuFuIRZfyvm8vcqfyPqGyl\/iSbxY6XV8+QvLc2TxNhjjTueeeQKNa2jfTVbJpy+F1zNZgknbiFM\/kbUN1L+Ek3iS0srXpXkOtF2lXLHM49coaZ1UFo5BqWVe1BaOQalFVkZ06JUKg2lby9eyx3P3HGRmqZBaeUYlFbuQWnlGJRWZGUM3JqIaqK0cgxKK\/egtHIMSiuyMgZuTUQ1UVo5BqWVe1BaOSZsaUVutwZ9BncnoJole4MQTV+I6544EgfUN1T+Ek1ifNfKGxHVxHetHBPpT73hxC3gu1aOiZS\/RJMYpZU3IqqJ0soxKK3cg9LKMSityMoYuDUR1URp5RiUVu5BaeUYlFZkZQzcmohqorRyDEor96C0cgxKK7IyBm5NRDVRWjkGpZV7UFo5BqUVWRkDtyaimiitHIPSyj0orRyD0oqsjNkm\/\/\/Sj\/4v6acTnHMrNZVAaeUYlFbuQWnlGJRWZGVMke73xhBv1zwfLq1GDzas\/m7BK9QUUTh0nP9KcS7C+KvGNeOnfTW\/72\/nsaKz4fS94Go2q+8V4hLI3xXQt3ChvpHyl2gSf6C0YscuIZEu3oakxQ2Orq5mFq05nt\/IxZsoxnJDLLsueKpXs4a\/aY+2KI+s9niacPpqX82W9VUXl7CuLxEmfyPqGyl\/iSbxZ0srQgbmTlz49mmirWbv9kTTwqAsX3lt8DSvZh1\/BarvfDh9la9m0\/pqi0uY15cIk78R9Y2Uv0ST+OOlVfGQd+Z2RfqXl1faiAgQm9F2nMa+wU+TZv783sePo9vvmyg7pH\/y5bWd6VYcDCmhrOYoYXahF5UY+vnSNHiNvwnFq1nJX0Ee0PI+nL66V7NtfZXFJezrS4TJ34j6Rspfokn8hdKKOyInCBelv9Sqn9lLwN8HmlD3EW9JF9\/clINtWKybMBuXOyTOPJoPKaKs5ui1dGNn7Gdra6A2lP1WvJqV\/BVk5yc7vEQ4fXWvZiV\/Bdl5FX2VxSWU\/M0u7mjqS4TJ34j6Rspfokn8hdKKeZg+LZxPS6cCs\/iwjwzWO3l+Gt260mc2Ot+uMRvmu2W6LfmqgyFNlNUcD7l6lcvAPjc3Zw4uB17mK1fzo\/6mHRW9Dafvt67mR\/3V1FdZXMK+vkSY\/I2ob6T8JZrEX\/2uVXG2Zx+axUvEdttABIZNSB\/7TdbDfOcJs+H+AWceDRw870WU1Ry9XktTZjd+frro7JyE+lm+czUT5\/7mGZoqh9P3a1czce5vnqGmr7K4hLa\/hXHXtwiTvxH1jZS\/RJP4qz9rdRCU9dAY2y1+dfo+Yfl4NpMNjzsLZsPdDq95pIuymuOxT8K0k5YuJqY9FIOheDWr+pvdfGjt44TTV\/dqtq2vsriEfX2JMPkbUd9I+Us0iT9eWuWuzZuDqCyH5gPsSWxCDp18Pl+ePrPR+c6N2XC3w+EeJ9troa1mf+yJpnPGN7khXgIFFK9mPX\/TRo+tfIpw+upezbb11RaXMK8vESZ\/I+obKX+JJvFnS6vc5v71GpK7W0sOUat+3kNLn9reLODsY33gfoI0Jhex0\/GFE2bD3Q7Ewx6JIUXU1Uw+LnwQQwI5j1psVh7rwvYemlezhr9X+LgRTl\/lq9m0vuriEtb1JcLkb0R9I+Uv0ST+QGklGJ0Rc2RY+JAI39bIoay0nfmEBJ8kH5BG2IH6hR2z4W6HwoMeHT3rDa5Qk4eQnzr3tw6ptgiLHJq8Be+hejUTb\/vLN2jo6B1OX+2rmTCr7xXiEqb1JcLkb0R9I+Uv0SS+trQCnyeimtpXs2XC6XvB1WyWcOIWwuRvRH0j5S\/RJEZp5Y2IaqK0cgxKK\/egtHIMSiuyMgZuTUQ1UVo5BqWVe1BaOQalFVkZA7cmopoorRyD0so9KK0cg9KKrIyBWxNRTZRWjkFp5R6UVo4JW1qR263x779UacHubRHVTFfz0OnUwukLcd1bGIkj6hspf8maxNTgpbSYBLujRVQTX30dG8R1byitHBtKK7JuEuyOFlFNfPV1bBDXvaG0cmworci6SbA7WkQ18dXXsUFc94bSyrGhtCLrJsHuaBHVxFdfxwZx3RtKK8eG0oqsmwS7o0VUE199HRvEdW8orRwbSiuybhLsjhZRTXz1dWwQ172htHJsKK3IukkGLf1axb\/\/+mfohzW7kZpqhq++jg3iujeUVo4NpRVZN+lZ++dX\/RXSjV\/\/9HPetKtLq9GFv3\/1c4yblprcRFh++lFu8neSb\/3\/kGgTfn7vC98y7ex9119mdSu9lzacvhdczWb1vUJcMtP6koXJ34j6RspfsiYxNZRLq9+yqZZ+2VKkri6trtx\/ab9TrFQqUS01mxUd29nSu7p4m8t7XF+A7NH0bSbrXpV3TTV7Nf3Nd9aP6ksbTt9rvu7a1FddXDLr+pKFyd+I+kbKX7ImMTWuKq3IDtx+zVKwrix9kgtX7r+0LHx7Xd4xLTWbpZCzN3KZdfk15TMPxFJ+MVSzV9HfX3+nCbovVTh9ta9my\/qqi0tmXV+yMPkbUd9I+UvWJKbGtaVV71uDKZf6f+ryhPRzX\/UzRCeHr8G\/QzbfM1cwiUUoj6J89qx6zra8PYtYnLlssjuY4RF7wbTUrJZPK771mP2afDNy6B\/fB96vUkdWU8xePX9b8+ilet7C6at7NdvWV1lcMuQv9F30f0jfSPlL1iSmxlWlVakYmkLU3IsGGaBaW2zFFrXazDJU9iz771HoYpeb3UK+Z9ecVjDLKD\/zLLIuFFQdt235o6m\/zskbqrzNWmpWGw82vtyr\/oVTKRosVgqmmL1a\/rLRi1K363\/R7OurezXb1ldZXDL7+pKFyd+I+kbKX7ImMTUu+zH2Q3m4fqk0YZNTc1aIdEPjG1BKnFKs8JmnzWa9C5sS589ihRQZdaxETU8eq7rFW\/6CaalZ7fFXuUSJRTU1R6fyhtPlr9tXruZDf9Mrsb0wF6Vu1\/+i2df3W1fzN\/RVFpfMvr5kYfI3or6R8pesSUyNS75rVT53DhffdjbfuJ+1WVwdorYPjeULGYs7n3nabLaK8vmz2PnLsUfK5BKZ1qw2vjGvmpaa1Z55lckoEo3044Gy4iTrXncd+9LVTDb3N2\/SHL8odbv+F82+vt+7msk+rK+yuGT29SULk78R9Y2Uv2RNYmpc+ReC7MSdZqn5Tmk1DSgLWff042azeZQfedZQWq3ELpaWZGq4xjfmVdNSs9roy8NHnQQzrz2OzCummL0a\/jZxO6Z\/B\/2shdNX92q2ra+yuGTIX+i7MORvh+79TI3Lfoyd6zRE5KHSKled3OFuSBQ0cpR\/Pm02m7xt2c6fJUfT4KlOPCYPvx+npqVms86XXuW1kcRdEFKgHlv7nKlmr6K\/xVYv1WsWTl\/dq9m2vuriklnXlyxM\/kbUN1L+kjWJqXFZaZWdaYdOqvFaqmuy0iQ1t1Vc7LpqGyqP28s1WXHzTU6bzVZRPn+WLK3K\/L1UovllW\/rQZvJyaizGXzUtNZuVsPNzthdUDEnj0leTazVNNXvV\/N1s9VK9ZuH01b6aLeurLi6ZdX3JwuRvRH0j5S9Zk5gaF5ZWpYdHoVL+VwUPlFZkKSgZimAfhVydNHhMu02Om82Oonz8LFlakRXfK92jN3gt1frfLLC01OTGz8xzr\/S3UDSlEkNAymTlPxIVuyZ7Cy\/72+zopXrewumrLS6ZWX2vEJfMtL5kYfI3or6R8pesSUwNtdIKZsEiqnlB9pq1cPpCXPcWRuKI+kbKX7ImMTVQWrmyiGriq69jg7juDaWVY0NpRdZNgt3RIqqJr76ODeK6N5RWjg2lFVk3CXZHi6gmvvo6Nojr3lBaOTaUVmTdJNgdLaKa+Orr2CCue0Np5djCllbtEwx2U6Ps7XpgbgziujdI7NjCiovSCgaD2TV83YXB7mtxS6t\/AQAAAACACv\/++\/99vKOKqqx0FwAAAABJRU5ErkJggg==)\n","0acf77f8":"### Exploratory Data Analysis using Tableau","813700ca":"##### Creating Evaluation Parametric Function","33594517":"### Splitting Data into Train Test","77d05db5":"### Feature Engineering","dcbe3f12":"### Loading the Following Libraries & Data\n\n","f16bddf9":"Tableau Link: https:\/\/public.tableau.com\/views\/EDAonCarEvaluation\/Dashboard1?:language=en-US&:display_count=n&:origin=viz_share_link"}}