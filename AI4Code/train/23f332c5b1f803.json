{"cell_type":{"2c4dcfb7":"code","1fddbc2a":"code","c2efd412":"code","f6b36286":"code","55255581":"code","8634111a":"code","422d804d":"code","0a0486dc":"code","c5061878":"code","bdad85ee":"code","8d257193":"code","c58e4c86":"code","2b19879f":"code","2723a041":"code","ae6119d6":"code","c69ab56e":"code","c95b8504":"code","fb2c6085":"code","5f26ffbd":"code","cea89a63":"code","f1d1d91c":"code","4bb7fe9c":"code","1c9a29e1":"code","60cbe958":"code","8e2bc134":"code","fee7df0f":"code","9e33ac0c":"code","158ebd56":"code","0f9afb9a":"code","2b1e4102":"code","963d77a3":"code","70a6ba6e":"code","67bc1139":"code","0ca13f4a":"code","8f7d8195":"code","649ec897":"code","58dbe360":"code","342992f0":"code","a5fd5443":"code","827ba09f":"code","f0c441b1":"code","db84da5e":"code","0d93f01b":"code","520a4d06":"markdown","0eb8c8c8":"markdown","b6514299":"markdown","5165453c":"markdown","cfb90ddd":"markdown","73c44a56":"markdown","52935797":"markdown","9e7d037e":"markdown","3b3aaa51":"markdown","78fd604a":"markdown","fd6867c9":"markdown","d3e70ad3":"markdown","5f6ef35c":"markdown","92413712":"markdown","f0cba92f":"markdown","f7394120":"markdown","fe921d86":"markdown","92c86be5":"markdown","466db606":"markdown","9920d9e8":"markdown","708672cc":"markdown","68bc65f5":"markdown","cc942630":"markdown","a9118750":"markdown","65c96904":"markdown","c032bd9c":"markdown"},"source":{"2c4dcfb7":"#Let's define the essential libraries required.\nimport numpy as np                                   #for array\nimport pandas as pd                                  #for dataframe\nimport matplotlib.pyplot as plt                      #for visualization\n%matplotlib inline\nimport seaborn as sns                                #for visualization\nimport warnings ; warnings.filterwarnings('ignore')  #for warnings->codes run smoother\nimport math","1fddbc2a":"#we read the data and save it as a dataframe\niris = pd.read_csv('..\/input\/iris\/Iris.csv')\n\n#Let's see the first 5 rows of data.\niris.head()","c2efd412":"#Let's see the last 5 rows of data.\niris.tail()","f6b36286":"print(\"Dataset Dimensions: \" , iris.shape)\nprint(\"*************************\")\nprint(\"Dataset Column List: \" , iris.columns.tolist())\nprint(\"*************************\")\nprint(\"Dataset Data Types: \" , iris.dtypes)","55255581":"iris.describe().T","8634111a":"iris.skew()","422d804d":"#DECISION INQUIRY\nx=iris[(iris['SepalWidthCm']>3 )& (iris['SepalLengthCm']<5)]\nx.head()","0a0486dc":"#Is there a NULL VALUES in the dataset?\niris.isnull().sum()   #iris.isna().sum\n#Answer: No, there is no missing data.","c5061878":"    #Hard Core: Filtered and checked\ndata=iris[iris[\"SepalLengthCm\"].isnull() | iris[\"PetalWidthCm\"].isnull()]\ndata[[\"Species\",\"PetalLengthCm\"]]\n#if there was missing data there would be rows","bdad85ee":"def missing_percent(iris):\n    nan_percent= 100*(iris.isnull().sum()\/len(iris))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent\nmissing_percent(iris)","8d257193":"iris.dropna(inplace=True)","c58e4c86":"#Imputation by average value (MEAN)\navg_SepalLengthCm = iris[\"SepalLengthCm\"].astype(\"float\").mean(axis=0)\niris[\"SepalLengthCm\"].replace(np.nan, \"avg_SepalLengthCm\", inplace=True)\n\n#Imputation by most frequent (MODE)\nfrom scipy import stats\nmode_SepalLengthCm = stats.mode(iris[\"SepalLengthCm\"])\niris[\"SepalLengthCm\"].replace(np.nan, \"mode_SepalLengthCm\", inplace=True)","2b19879f":"# ELIMINAT\u0130NG OUR BLANK DATA : this is SAMPLE CODE ONLY\n#iris = iris[~iris['SepalLengthCm'].str.contains(' ')]","2723a041":"index = iris[iris[\"PetalLengthCm\"] > 6 ].index\niris.drop(index, axis = 0, inplace=True)","ae6119d6":"#  ????? z score ile kuantil ile kodlar\u0131 yaz.\noutliers =[]\ndef detect_outliers(data):\n    threshold = 100\n    mean =np.mean(data)\n    std = np.std(data)\n    \n    for i in data:\n        z_score = (i - mean) \/ std\n        if np.abs(z_score) > threshold:\n            outliers.append(i)\n    return outliers","c69ab56e":"outliers_pt = detect_outliers(data[\"PetalLengthCm\"])\noutliers_pt","c95b8504":"iris.corr()","fb2c6085":"sns.heatmap(iris.corr(),annot=True,cmap='coolwarm')","5f26ffbd":"list_cat = []\nlist_num = []\nfor i in iris.columns.tolist():\n    if iris[i].dtypes == 'O':\n        list_cat.append(i)\n    else:\n        list_num.append(i)\n        \n#example : show categorical variables\nlist_cat","cea89a63":"iris.select_dtypes(\"object\").tail(2)","f1d1d91c":"# floating our data  \niris['SepalLengthCm'] = iris.loc[:,'SepalLengthCm'].astype('float')","4bb7fe9c":"#What are the unique values \u200b\u200bin the column?\niris[\"Species\"].unique()","1c9a29e1":"#How many unique values \u200b\u200bare in the column?\niris[\"Species\"].nunique()","60cbe958":"iris[\"Species\"].count()","8e2bc134":"#Let's see how many of each unique value there are\niris[\"Species\"].value_counts()","fee7df0f":"iris[\"Species\"]=iris.Species.str.replace(\"Iris-\",\"\")\niris[\"Species\"].head()","9e33ac0c":"pd.get_dummies(iris,columns=[\"Species\"]).head(3)","158ebd56":"iris[\"SepalLengthCm\"].max()  #min,mean,std ....","0f9afb9a":"#Group by species and observe other values\niris.groupby(\"Species\").mean().head().T.drop(\"Id\")","2b1e4102":"#Now let's graph the variables in the dataframe.\nsns.pairplot(iris)","963d77a3":"#This chart is very IMPORTANT.\n\n#A pairplot that makes more sense to us.\nsns.pairplot(iris.drop(\"Id\",axis=1),hue = 'Species')","70a6ba6e":"iris.hist(figsize=(8,8) , color =\"purple\")\nplt.show()","67bc1139":"sns.countplot(x=\"Species\",data=iris)","0ca13f4a":"plt.figure(dpi=100)\nsns.countplot(y=\"Species\" , hue = \"SepalWidthCm\", data =iris)\nplt.xlabel(\"SepalWidthCm\")\nplt.ylabel(\"Species\")\nplt.title(\"EXAMPLE PLOT\")\nplt.show()","8f7d8195":"plt.scatter(iris[\"SepalWidthCm\"],iris[\"SepalLengthCm\"])","649ec897":"sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris)","58dbe360":"sns.FacetGrid(iris, hue=\"Species\").map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\").add_legend()","342992f0":"sns.set(style='ticks')\nplt.figure(figsize=(12,12))\nplt.subplot(2,2,1)\nsns.boxplot(data=iris,x='Species',y = 'PetalLengthCm')\nplt.subplot(2,2,2)\nsns.boxplot(data=iris,x='Species',y = 'PetalWidthCm')\nplt.subplot(2,2,3)\nsns.boxplot(data=iris,x='Species',y = 'SepalWidthCm')\nplt.subplot(2,2,4)\nsns.boxplot(data=iris,x='Species',y = 'PetalLengthCm')","a5fd5443":"sns.boxplot(data=iris,x='Species',y = 'PetalLengthCm')\nsns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=iris, jitter=True, edgecolor=\"gray\")","827ba09f":"sns.violinplot(x=\"Species\", y=\"PetalLengthCm\", data=iris, size=6)","f0c441b1":"sns.distplot(iris[\"SepalWidthCm\"],bins=16,color=\"purple\")    \n#bins = how much will it be divided","db84da5e":"sns.jointplot(x=iris[\"SepalLengthCm\"],y=iris[\"SepalWidthCm\"],kind=\"hex\")","0d93f01b":"from scipy.stats import binom \nprob = 1-binom.cdf(170 ,350, 0.5)\nprint(str(round(prob*100,1)) +\"%\")","520a4d06":"# Group By\n","0eb8c8c8":"**WITH HUE**","b6514299":"**Astype()**","5165453c":"**get_dummies**","cfb90ddd":"And others","73c44a56":"* [Hypothesis testing in Machine learning using Python](https:\/\/towardsdatascience.com\/hypothesis-testing-in-machine-learning-using-python-a0dc89e169ce)\n* [Statitistic in Python](https:\/\/scipy-lectures.org\/packages\/statistics\/index.html)","52935797":"**Separate our categorical variables and numeric variables**","9e7d037e":"# HYPOTHESIS","3b3aaa51":"***1. Removing***","78fd604a":"# Max,Min,Std,Mean....","fd6867c9":"**If there were null values, we can fix null(missing) values in 3 steps:**\n> 1. Removing\n> 2.Imputing\n> 3.Masking","d3e70ad3":"**Replace**","5f6ef35c":"**create dummy variables**","92413712":"<img src=\"https:\/\/www.researchgate.net\/profile\/Nabin-Basnet-4\/publication\/321962400\/figure\/fig4\/AS:573832927944704@1513823839218\/Diagram-of-boxplot-components-including-mean-median-1st-and-3rd-quartiles-outliers-and.png\" width=\"400\">","f0cba92f":"**BoxPlot and its meaning**","f7394120":"**3. Masking ****\n* [more](https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/)","fe921d86":"# **Categorical Data**","92c86be5":"![](https:\/\/miro.medium.com\/max\/1040\/1*TTMOaNG1o4PgQd-e8LurMg.png)","466db606":"**Violin Plot**","9920d9e8":"***2. Imputing***","708672cc":"# Visualization","68bc65f5":"dataName[\"Column_Name\"] = dataName.ColumnName.map({'future1' : 0 , 'future2': 1 , .....})","cc942630":"# **Correlation**\n> [\"Information about correlation\"](https:\/\/www.jmp.com\/en_au\/statistics-knowledge-portal\/what-is-correlation.html)","a9118750":"**Let's take a closer look at the data**","65c96904":"# Missing Data","c032bd9c":"#  Outliers"}}