{"cell_type":{"3eb54dbf":"code","0ed9b57f":"code","fe7f9fe3":"code","662d1ef6":"code","71f74d16":"code","861795fb":"code","cc4f3228":"code","a3a823d6":"code","2a5d45ae":"code","5eb4d15a":"code","3f3e9621":"code","a10e29ad":"code","c4708dab":"code","b835f6ee":"code","a3526491":"code","9880c675":"code","89e581b2":"code","0a6f0bd5":"code","3c430d3c":"markdown","5a062178":"markdown"},"source":{"3eb54dbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ed9b57f":"att_df = pd.read_csv('..\/input\/bankruptcy-homework\/Bankruptcy_att.csv', header=None, names=['x1','x2'])\natt_df['bias'] = np.ones(len(att_df))\natt_df","fe7f9fe3":"cls_df = pd.read_csv('..\/input\/bankruptcy-homework\/Bankruptcy_class.csv', header=None, names=['class'])\ncls_df","662d1ef6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n%matplotlib inline\n\nplt.figure(figsize=(10,5))\nsns.scatterplot(x=att_df['x1'], y=att_df['x2'], hue=cls_df['class'], palette=['red','blue'], s=75)","71f74d16":"wgts = []\ndef PLA(initial_w1):\n    etha = 1\n    wgt = np.squeeze(np.asarray(initial_w1))\n\n    for i in range(len(att_df)):\n        x = att_df.loc[att_df.index == i]\n        x = np.squeeze(np.asarray(x))\n\n        if (np.dot(wgt, x) >= 0):\n            prd_y = 1\n        else:\n            prd_y = -1\n\n        y = cls_df['class'][i]\n        if prd_y != y:\n            wgts.append(list(wgt))\n            for j in range(len(wgt)):\n                wgt[j] = wgt[j] + (etha*y*x[j])\n            PLA(wgt)\n        else:\n            wgt = wgt\n\n    return [len(wgts), list(wgt)]","861795fb":"intl_w1 = [5.1, 2.3, 0.2]\nitr_num1, final_w1 = PLA(intl_w1)[0] , PLA(intl_w1)[1]\nprint(itr_num1, final_w1)","cc4f3228":"intl_w2 = [1.0, 1.0, 1.0]\nitr_num2, final_w2 = PLA(intl_w2)[0] , PLA(intl_w2)[1]\nprint(itr_num2, final_w2)","a3a823d6":"def visualizer(final_w):\n    \n    plt.figure(figsize=(10,5))\n    sns.scatterplot(x=att_df['x1'], y=att_df['x2'], hue=cls_df['class'], palette=['red','blue'], s=75)\n\n    x_val = att_df['x1']\n    y_val = ((-1* final_w[0])*x_val + (-1* final_w[2])) \/ final_w[1]\n    plt.plot(x_val, y_val)\n    plt.show()","2a5d45ae":"visualizer(final_w1)","5eb4d15a":"visualizer(final_w2)","3f3e9621":"att_df.loc[len(att_df)] = [5, 1, 1]\natt_df.loc[len(att_df)] = [3, 1.5, 1]\natt_df","a10e29ad":"cls_df.loc[len(cls_df)] = [-1]\ncls_df.loc[len(cls_df)] = [-1]\ncls_df['prd_y'] = 0\ncls_df","c4708dab":"plt.figure(figsize=(10,5))\nsns.scatterplot(x=att_df['x1'], y=att_df['x2'], hue=cls_df['class'], palette=['red','blue'], s=75)","b835f6ee":"def pocket(initial_w):\n    \n    accuracy = []\n    weights = []\n    etha = 1\n    \n    for i in range(2000):\n        cor_num = 0\n        sgn1 = 0\n        sgn2 = 0\n\n        if sgn1 == 0:\n            for j in range(len(att_df)):\n                x = att_df.loc[att_df.index == j]\n                x = np.squeeze(np.asarray(x))\n                initial_w = np.squeeze(np.asarray(initial_w))\n\n                if(np.dot(initial_w, x) >= 0):\n                    cls_df['prd_y'][j] = 1\n                else:\n                    cls_df['prd_y'][j] = -1\n                \n                if(cls_df['class'][j] == cls_df['prd_y'][j]):\n                    cor_num += 1  \n\n                if j == (len(att_df)-1):\n                    sgn1 = 1\n                    \n        if sgn1 == 1:\n            accuracy.append(cor_num \/ len(cls_df))\n            weights.append(list(initial_w))\n            if sgn2 == 0:\n                y_temp = 0\n                x_temp = 0            \n                for j in range(len(cls_df)):  \n                    if (cls_df['class'][j] != cls_df['prd_y'][j]):\n                        y = cls_df['class'][j]\n                        x_temp = j\n                        sgn2 = 1\n                        break\n                        \n            if sgn2 == 1:          \n                x = att_df.loc[att_df.index == x_temp]\n                x = np.squeeze(np.asarray(x))\n                for k in range(len(initial_w)):\n                    initial_w[k] = initial_w[k] + (etha*y*x[k])\n                sgn1 = 0\n                \n    return [max(accuracy) , weights[accuracy.index(max(accuracy))]]","a3526491":"intl_w1 = [5.1, 2.3, 0.2]\nacc1, final_w1 = pocket(intl_w1)[0], pocket(intl_w1)[1]\nprint(acc1,final_w1)","9880c675":"intl_w2 = [1.0, 1.0, 1.0]\nacc2, final_w2 = pocket(intl_w2)[0], pocket(intl_w2)[1]\nprint(acc2,final_w2)","89e581b2":"visualizer(final_w1)","0a6f0bd5":"visualizer(final_w2)","3c430d3c":"# Pocket Algorithm","5a062178":"# Perceptron Learning Algorithm (PLA)"}}