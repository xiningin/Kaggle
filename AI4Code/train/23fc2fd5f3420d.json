{"cell_type":{"108d686d":"code","f72a4e44":"code","7bad2655":"code","06158904":"code","a34a27fc":"code","bdba4497":"code","3193c2ee":"code","3d5a205c":"code","5c2b426f":"code","521cb0fc":"code","d6a846ea":"code","6d8c7018":"code","f2f9e555":"code","3b59ca68":"code","ccbc1e75":"code","a079b274":"code","e04d206d":"code","3ac8db15":"markdown","09ff3fe8":"markdown","cba2906a":"markdown","90867fc6":"markdown","51582870":"markdown","1c035353":"markdown","035f93d7":"markdown","c2b94ec4":"markdown","4ccb7af3":"markdown","606401be":"markdown"},"source":{"108d686d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f72a4e44":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme()","7bad2655":"vm = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv\")\nbmw = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/bmw.csv\")\nvm[\"Car_class\"]=\"VM\"\nbmw[\"Car_class\"]=\"BMW\"\ndataset = pd.concat([vm, bmw])\ndataset[\"car_age\"] = 2020 - dataset[\"year\"]","06158904":"dataset.head()","a34a27fc":"dataset.isnull().values.any()","bdba4497":"dataset.isnull().sum()","3193c2ee":"sns.catplot(x = \"car_age\",hue=\"transmission\", col= \"Car_class\", data=dataset, kind=\"count\", height=6, aspect=2)","3d5a205c":"sns.countplot(y = \"model\", data=vm).set_title(\"VM cars by Model\")","5c2b426f":"sns.countplot(y = \"model\", data=bmw).set_title(\"BMW cars by Model\")","521cb0fc":"sns.pairplot(dataset, hue=\"Car_class\")","d6a846ea":"data = dataset.drop(columns = [\"year\"])\nsns.heatmap(data.corr(), annot= True)","6d8c7018":"sns.relplot(data=vm, x=\"mileage\", y=\"price\", hue=\"model\",col =\"transmission\", row = \"fuelType\" )","f2f9e555":"sns.relplot(data=bmw, x=\"mileage\", y=\"price\", hue=\"model\",col =\"transmission\", row = \"fuelType\" )","3b59ca68":"plt.figure(figsize=(15,10)) \nsns.scatterplot(data = dataset, x= \"mileage\", y=\"price\", hue = \"car_age\").set(title = \"Mileage per price\")","ccbc1e75":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom time import time\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\ndataset_trans = dataset.apply(le.fit_transform)\n\nprint(dataset_trans.head())\n\nfeatures = dataset_trans.drop(columns = [\"year\",\"price\"])\ntarget = dataset_trans[\"price\"]\n\nfeature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.2, random_state=42)\nprint(f\"feature_train: {feature_train.shape} \\n target_train:{target_train.shape} \\n feature_test:{feature_test.shape} \\n target_test:{target_test.shape}  \")\n","a079b274":"ols = linear_model.LinearRegression()\nolsfit = time()\nols.fit(feature_train, target_train)\nolsfitT = round(time()-olsfit, 3)\nolspred = time()\nols_price_pred = ols.predict(feature_test)\nolspredT = round(time()-olspred, 3)\nols_coef = ols.coef_\nols_mse = mean_squared_error(target_test,ols_price_pred )\nols_r2 = r2_score(target_test,ols_price_pred)\nols_score = ols.score(feature_test, target_test)\n\nprint(f\"Mean Squared Error:{ols_mse}, R squared error: {ols_r2}, Score: {ols_score}, Train time: {olsfitT}, Prediction time: {olspredT}\")\n\n\n","e04d206d":"ols_rst=pd.DataFrame()\nols_rst[\"year\"] = 2020 - feature_test[\"car_age\"]\nols_rst[\"price\"] = target_test\nols_rst[\"predicted\"] = ols_price_pred\nols_rst.plot(x='year', y=['price', 'predicted'], figsize=(25,15), grid=True, title=\"Predicted vs Actual using Ordinarl Least square\")\n","3ac8db15":"#### Data Exploration","09ff3fe8":"#### Ordinary Least Squares","cba2906a":"From the relational chart shown below, it can be seen that there is a negative relationship between price and mileage. As mileage increases, price reduces.","90867fc6":"#### Check whether the dataset contains null values","51582870":"The dataset doesnt have any null value","1c035353":"#### Explore relationship between Price and Mileage given transmission and fuel type","035f93d7":"## Loading the dataset and doing basic EDA","c2b94ec4":"## Data Modelling\n#### Data Preparation\n\nConvert categorical data to numeric using LabelEncoder and spliting data","4ccb7af3":"#### Loading BMW and WM dataset","606401be":"For this work, "}}