{"cell_type":{"d0a744bd":"code","9532a570":"code","673842a0":"code","d5be3e80":"code","c9aa47d3":"code","af675634":"code","0949c83d":"code","b450ef57":"code","9be48b63":"code","118c4cfc":"code","a7f69fb7":"code","52ab8612":"code","9e0d4af8":"code","cbc6d0c4":"code","8ff545b5":"code","1bc93bfb":"code","ea8cc022":"code","7e859dbc":"code","8e4a500a":"code","d07ece2e":"code","ee4e1725":"code","8fddb123":"code","4d612560":"code","74e8fb3a":"code","968b3343":"code","0565364b":"code","88fde0fc":"code","78ebeda9":"code","7da06c91":"markdown","91ec38d4":"markdown","97acd5b7":"markdown","0030f171":"markdown","35e21343":"markdown","8829e422":"markdown","7c408d82":"markdown","d36e4cf7":"markdown","8863cdb3":"markdown","4bd38b05":"markdown","cd1e11ab":"markdown","740f9b79":"markdown","428321eb":"markdown","28af4a9a":"markdown","26dadc9a":"markdown","7b782e47":"markdown","e2039e75":"markdown","3c0b4dd3":"markdown","9891fa9b":"markdown","353b1352":"markdown","53d30cdb":"markdown","61fdfdb3":"markdown","bb69e987":"markdown","f2bfbd4d":"markdown","37caf307":"markdown","1f89e74f":"markdown","edaa96bb":"markdown","181a1bed":"markdown","7e265136":"markdown"},"source":{"d0a744bd":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os","9532a570":"dataset=pd.read_csv('\/kaggle\/input\/mobile-price-classification\/train.csv')\n","673842a0":"dataset.head()","d5be3e80":"dataset.info()","c9aa47d3":"dataset.columns","af675634":"dataset.describe()","0949c83d":"corr=dataset.corr(method='pearson')\nplt.figure(figsize=(19, 6))\nsns.heatmap(corr,cmap=\"YlGnBu\",annot=True)","b450ef57":"sns.catplot(x='price_range',y='ram',data=dataset)","9be48b63":"sns.catplot(x='price_range',y='int_memory',kind='swarm',data=dataset)","118c4cfc":"from matplotlib.pyplot import pie\nvalues=dataset['three_g'].value_counts().values\npie(values,labels=['3G Supported','3G Not Supported'],autopct='%1.1f%%' ,shadow=True,startangle=90)","a7f69fb7":"values=dataset['four_g'].value_counts().values\npie(values,labels=['4G Supported','4G Not Supported'],autopct='%1.1f%%' ,shadow=True,startangle=90)","52ab8612":"sns.boxplot(x='price_range',y='battery_power',data=dataset)","9e0d4af8":"X=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1].values","cbc6d0c4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 0)\n","8ff545b5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nX_train\nX_test","1bc93bfb":"from sklearn.neighbors import KNeighborsClassifier\nKNNclassifier=KNeighborsClassifier(n_neighbors=10)\nKNNclassifier.fit(X_train,y_train)\ny_pred = KNNclassifier.predict(X_test)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)*100","ea8cc022":"from sklearn.model_selection import cross_val_score\n# Creating odd list K for KNN\nneighbors = list(range(1,30))\n# empty list that will hold cv scores\ncv_scores = [ ]\n#perform 10-fold cross-validation\nfor K in neighbors:\n    knn = KNeighborsClassifier(n_neighbors = K)\n    scores = cross_val_score(knn,X_train,y_train,cv = 10,scoring =\n    \"accuracy\")\n    cv_scores.append(scores.mean())","7e859dbc":"# Changing to mis classification error\nmse = [1-x for x in cv_scores]\n# determing best k\noptimal_k = neighbors[mse.index(min(mse))]\nprint(\"The optimal no. of neighbors is {}\".format(optimal_k))","8e4a500a":"mismatch=[]\nfor i in range(1,30):\n    classifier=KNeighborsClassifier(n_neighbors=i)\n    classifier.fit(X_train,y_train)\n    y_pred=classifier.predict(X_test)\n    mismatch.append(np.sum(y_pred != y_test))\n    ","d07ece2e":"plt.plot(range(1,30),mismatch)\nplt.show()","ee4e1725":"from sklearn.neighbors import KNeighborsClassifier\nKNNclassifier=KNeighborsClassifier(n_neighbors=22)\nKNNclassifier.fit(X_train,y_train)\ny_pred = KNNclassifier.predict(X_test)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)*100","8fddb123":"from sklearn.svm import SVC\nSVMlinear=SVC(kernel='linear')\nSVMlinear.fit(X_train,y_train)\nSVMlinear_predict=SVMlinear.predict(X_test)\ny_pred = SVMlinear.predict(X_test)\naccuracy_score(y_test,y_pred)*100\n","4d612560":"from sklearn.svm import SVC\nSVMrbf=SVC(kernel='rbf')\nSVMrbf.fit(X_train,y_train)\nSVMrbf_predict=SVMrbf.predict(X_test)\ny_pred = SVMrbf.predict(X_test)\naccuracy_score(y_test,y_pred)*100","74e8fb3a":"from sklearn.naive_bayes import GaussianNB\nNB=GaussianNB()\nNB.fit(X_train,y_train)\nNB_predict=NB.predict(X_test)\ny_pred = NB.predict(X_test)\naccuracy_score(y_test,y_pred)*100","968b3343":"from sklearn.tree import DecisionTreeClassifier\nDecisionTree=DecisionTreeClassifier(criterion='entropy',random_state=0)\nDecisionTree.fit(X_train,y_train)\nDecisionTree_predict=DecisionTree.predict(X_test)\ny_pred = DecisionTree.predict(X_test)\naccuracy_score(y_test,y_pred)*100","0565364b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\ntrees = list(range(1,20))\n# empty list that will hold cv scores\ncv_scores = [ ]\n#perform 10-fold cross-validation\nfor n in trees:\n    RFC = RandomForestClassifier(n_estimators = n,criterion='entropy',random_state=0)\n    scores = cross_val_score(RFC,X_train,y_train,cv = 10,scoring =\n    \"accuracy\")\n    cv_scores.append(scores.mean())","88fde0fc":"# Changing to mis classification error\nmse = [1-x for x in cv_scores]\n# determing best n\noptimal_n = trees[mse.index(min(mse))]\nprint(\"The optimal no. of trees is {}\".format(optimal_n))","78ebeda9":"from sklearn.ensemble import RandomForestClassifier\nRFC=RandomForestClassifier(n_estimators=19,criterion='entropy',random_state=0)\nRFC.fit(X_train,y_train)\nRFC_predict=RFC.predict(X_test)\ny_pred = RFC.predict(X_test)\naccuracy_score(y_test,y_pred)*100","7da06c91":"<font size=\"3\">KNN with K=22, accuracy increased by 4%<\/font>","91ec38d4":"<font size=\"4\">SVM Model(kernel=rbf)<\/font>","97acd5b7":"<font size=\"4\">Finding Optimum value for No. of trees using K-fold cross validation<\/font>","0030f171":"<font size=\"5\">Conclusion:<\/font>\n<font size=\"5\">Linear SVM Classifier fits best for this model with 96% Accuracy<\/font>","35e21343":" <font size=\"5\">Please do Vote up if you like my work,any help to upgrade this is appreciated.<\/font>\n* Linkedin : https:\/\/www.linkedin.com\/in\/pratikrandad\/**","8829e422":"<font size=\"4\">Most Models like KNN work on Euclidean Distance, larger values will impact the result,hence scaling is required.<\/font>","7c408d82":"<font size=\"4\">Finding Optimum value of K<\/font>","d36e4cf7":"<font size=\"4\">Training and Test Data Split<\/font>","8863cdb3":"<font size=\"3\">K value using Elbow Method<\/font>\n* Finding K value so that mis match between actual and predicted values is least","4bd38b05":"<font size=\"3\"> USE:<\/font>\n\n* This kind of prediction will help companies estimate price of mobiles to give tough competion to other mobile manufacturer\n* Also it will be usefull for Consumers to verify that they are paying best price for a mobile.\n<font size=\"3\">Applied Models:<\/font>\n\n* KNN Classifier\n* SVM(kernel=linear)\n* SVM(kernel=rbf)\n* Decision tree\n* Random forest","cd1e11ab":"<font size=\"3\">KNN with K=10<\/font>","740f9b79":"<font size=\"4\">SVM Model(kernel=linear)<\/font>","428321eb":"<font size=\"4\">RAM vs Price<\/font>","28af4a9a":"<font size=\"3\">AIM:<\/font>\n\nIn this Project,On the basis of the mobile Specification like Battery power, 3G enabled , wifi ,Bluetooth, Ram etc we are predicting Price range of the mobile","26dadc9a":"<font size=\"4\">Decision Tree Model<\/font>","7b782e47":"<font size=\"3\">X & Y matrix<\/font>","e2039e75":"**<font size=\"4\">Load Data<\/font>**","3c0b4dd3":"<font size=\"4\">3G Phones vs Non 3G Phones<\/font>","9891fa9b":"<font size=\"3\">RAM has the highest co-relation with phone price<\/font>","353b1352":"<font size=\"4\">Internal_memory vs Price<\/font>","53d30cdb":"<font size=\"3\">Data:<\/font>\n\n* id:ID\n* battery_power:Total energy a battery can store in one time measured in mAh\n* blue:Has bluetooth or not\n* clock_speed:speed at which microprocessor executes instructions\n* dual_sim:Has dual sim support or not\n* fc:Front Camera mega pixels\n* four_g:Has 4G or not\n* int_memory:Internal Memory in Gigabytes\n* m_dep:Mobile Depth in cm\n* mobile_wt:Weight of mobile phone\n* n_cores:Number of cores of processor\n* pc:Primary Camera mega pixels\n* px_height:Pixel Resolution Height\n* px_width:Pixel Resolution Width\n* ram:Random Access Memory in Megabytes\n* sc_h:Screen Height of mobile in cm\n* sc_w:Screen Width of mobile in cm\n* talk_time:longest time that a single battery charge will last when you are\n* three_g:Has 3G or not\n* touch_screen:Has touch screen or not\n* wifi:Has wifi or not\n","61fdfdb3":"<font size=\"4\">K-fold Cross Validation<\/font>","bb69e987":"<font size=\"4\">Data Pre-processing<font>","f2bfbd4d":"<font size=\"4\">Battery Power vs Price Range<\/font>","37caf307":"**<font size=\"4\">Data Visualisation<\/font>**","1f89e74f":"<font size=\"4\">Naive Bayes Model<\/font>","edaa96bb":"<font size=\"4\">4G Phones vs Non 4G Phones<\/font>","181a1bed":"<font size=\"4\">KNN<\/font>","7e265136":"**<font size=\"4\">Data Analysis<\/font>**"}}