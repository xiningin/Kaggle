{"cell_type":{"cfa8c208":"code","546ef234":"code","84b65357":"code","23f05df6":"code","1be8b9e7":"code","ce3363da":"code","d31098d5":"code","17fe3474":"code","0516b4c7":"code","e24e7d17":"code","3481fde9":"code","ed8eb24f":"code","da55558c":"code","50bb3d7b":"code","8ae1fb22":"code","50e6c271":"code","c412006c":"code","00dd4947":"code","a4383da2":"code","87ebcc41":"code","3075d3b3":"code","13f78256":"code","019c1245":"code","9a592464":"code","5bdec9f8":"code","8833db60":"code","a13074e4":"code","5799892c":"code","a5e8bafe":"code","99e17c58":"code","f42ef0c1":"code","163300b6":"code","77f93ab4":"code","34a801e1":"code","70268427":"code","dc7c4dcb":"code","d102abe5":"code","04e82327":"code","c25e282a":"code","82e1169b":"code","2a6c09f6":"code","1e0e4d97":"code","c953ccd9":"code","0da935f4":"markdown"},"source":{"cfa8c208":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","546ef234":"#importing packages\nimport pandas as pd #datapreprocessing , csv file uploading\nimport numpy as np #linear algebra\nimport seaborn as sns #for plots\nimport matplotlib.pyplot as plt #for plot\n%matplotlib inline","84b65357":"#loading train and test datas\ntrain = pd.read_csv(\"\/kaggle\/input\/bda-2019-ml-test\/Train_Mask.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bda-2019-ml-test\/Test_Mask_Dataset.csv\")","23f05df6":"#displaying first 5 rows of train data\ntrain.head()","1be8b9e7":"#displaying the size\ntrain.shape","ce3363da":"#assigning the dependent variable to target variable\ntarget = train[\"flag\"]","d31098d5":"#checking number of each values\ntrain[\"flag\"].value_counts()","17fe3474":"#displaying first 5 rows of test data\ntest.head()","0516b4c7":"#checking missing values\ntrain.isnull().sum()","e24e7d17":"#train data information\ntrain.info()","3481fde9":"#scatter plot showing the distribution\nplt.scatter(train[\"flag\"],train[\"currentBack\"])","ed8eb24f":"#boxplot for showing outliers\nsns.boxplot(train['motorTempBack'])","da55558c":"#calculating quantiles\nQ1 = np.array(train[\"motorTempBack\"].quantile(0.25))\nQ3 = np.array(train[\"motorTempBack\"].quantile(0.75))\n#Inter quartile range\nIQR = Q3 - Q1\n#finding the lower whisker\nmin_limit = Q1 - (1.5*IQR)\nprint(\"miniimum=\",min_limit)","50bb3d7b":"#removing extreme values to na\ntrain.loc[train['motorTempBack'] < 31,'motorTempBack']=np.nan","8ae1fb22":"#checking number of na values\ntrain['motorTempBack'].isnull().sum()","50e6c271":"#filling na values\nna_values = np.array(train[\"motorTempBack\"].quantile(0.05))\nna_values\ntrain['motorTempBack'].fillna(na_values ,inplace=True)","c412006c":"#applying log  transformation\ntrain[\"positionBack\"] = np.log(train[\"positionBack\"])","00dd4947":"#applying log  transformation\ntrain[\"refPositionBack\"] = np.log(train[\"refPositionBack\"])","a4383da2":"#applying log  transformation\ntrain[\"refVelocityBack\"] = np.log(train[\"refVelocityBack\"])","87ebcc41":"#applying log  transformation\ntrain[\"trackingDeviationBack\"] = np.log(train[\"trackingDeviationBack\"])","3075d3b3":"#applying log  transformation\ntrain[\"velocityBack\"] = np.log(train[\"velocityBack\"])","13f78256":"#scatter plot shwoing the distribution\nplt.scatter(train[\"flag\"],train[\"currentFront\"])","019c1245":"##boxplot for showing outliers\nsns.boxplot(train[\"motorTempFront\"])","9a592464":"#calculating quantiles\nQ1 = np.array(train[\"motorTempFront\"].quantile(0.25))\nQ3 = np.array(train[\"motorTempFront\"].quantile(0.75))\n#Inter quartile range\nIQR = Q3 - Q1\n#finding the lower whisker\nmin_limit = Q1 - (1.5*IQR)\nprint(\"minimum=\",min_limit)","5bdec9f8":"#removing extreme values to na\ntrain.loc[train['motorTempFront'] <34 ,'motorTempFront']=np.nan","8833db60":"#checking number of na values\ntrain['motorTempFront'].isnull().sum()","a13074e4":"#filling na values\nna_values = np.array(train[\"motorTempFront\"].quantile(0.05))\nna_values\ntrain['motorTempFront'].fillna(na_values ,inplace=True)","5799892c":"#applying log  transformation\ntrain[\"positionFront\"] = np.log(train[\"positionFront\"])","a5e8bafe":"#applying log  transformation\ntrain[\"refPositionFront\"] = np.log(train[\"refPositionFront\"])","99e17c58":"#applying log  transformation\ntrain[\"refVelocityFront\"] = np.log(train[\"refVelocityFront\"])","f42ef0c1":"#applying log  transformation\ntrain[\"trackingDeviationFront\"] = np.log(train[\"trackingDeviationFront\"])","163300b6":"#applying log  transformation\ntrain[\"velocityFront\"] = np.log(train[\"velocityFront\"])","77f93ab4":"#Initializing X and y\nX = train.drop([\"timeindex\",\"flag\"],axis = 1)\ny = target","34a801e1":"#spliting X and y into train and test\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","70268427":"#fitting and predicting the model\nfrom sklearn.ensemble import RandomForestClassifier\n\ncl = RandomForestClassifier(n_estimators=70, random_state=0)\ncl.fit(X_train, y_train)\ny_pred = cl.predict(X_test)","dc7c4dcb":"#checking the accuracy\nfrom sklearn import metrics\nprint(metrics.accuracy_score(y_test, y_pred))\nprint(metrics.f1_score(y_test, y_pred))","d102abe5":"#droping the same columns which were dropped from the train data\ntest = test.drop([\"timeindex\"],axis = 1)","04e82327":"#applying log transformation\ntest[\"positionBack\"] = np.log(test[\"positionBack\"])\ntest[\"refPositionBack\"] = np.log(test[\"refPositionBack\"])\ntest[\"refVelocityBack\"] = np.log(test[\"refVelocityBack\"])\ntest[\"trackingDeviationBack\"] = np.log(test[\"trackingDeviationBack\"])\ntest[\"velocityBack\"] = np.log(test[\"velocityBack\"])\ntest[\"positionFront\"] = np.log(test[\"positionFront\"])\ntest[\"refPositionFront\"] = np.log(test[\"refPositionFront\"])\ntest[\"refVelocityFront\"] = np.log(test[\"refVelocityFront\"])\ntest[\"trackingDeviationFront\"] = np.log(test[\"trackingDeviationFront\"])\ntest[\"velocityFront\"] = np.log(test[\"velocityFront\"])","c25e282a":"#predicting the test data\npred = cl.predict(test)","82e1169b":"#loading sample submission.csv\nsample = pd.read_csv(\"\/kaggle\/input\/bda-2019-ml-test\/Sample Submission.csv\")","2a6c09f6":"#assigning predicted values of test data to sample submission data \nsample[\"flag\"] = pred","1e0e4d97":"#displaying last five rows\nsample.head()","c953ccd9":"#converting the sample submission file to csv\nsample.to_csv(\"submit_11.csv\",index=False)","0da935f4":"This project is done on packaging for anomaly detection.First we load the train and test datasets.The train dataset contains 11227 rows and 16 columns.\"flag\" is the dependent variable from the dataset.As we look into the dataset we can see that,there are no missing values present, but lots of outliers present.Therefore we have to do proper preprocessing.I have done log transformation and replacement of values over certain columns(using quantiles).Then, we splitted the train data for further training ,testing procedure and fitted the model using Random Forest Classifier and got f1 score of 85.37% .Then we applied preprocessing for test data and predicted the value using the model.Then replaced the the column value \"flag\" of submission data with the predicted values and converted the data into csv file and upload it."}}