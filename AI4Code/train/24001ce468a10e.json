{"cell_type":{"85426743":"code","1e8ebbfa":"code","6760bdd4":"code","936eddb2":"code","279913ca":"code","f13ac658":"code","9ed83455":"code","f15625b4":"code","ebec3fca":"code","986c06b3":"code","d3ead521":"code","34363476":"code","ac65cf5c":"markdown","94e87557":"markdown","cc34dc18":"markdown","4a7b9383":"markdown","d962e5d0":"markdown","ef9752a4":"markdown"},"source":{"85426743":"# The sqlAlchemy datamodel from\n# https:\/\/github.com\/ylchan87\/HKCourtList\/blob\/master\/dataModel.py\n\nimport sqlalchemy\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\n\nfrom sqlalchemy import Column, Integer, String, DateTime\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import relationship\n\nfrom sqlalchemy import Table\n\nglobal session\nsession = None\ndef init(sqlPath='sqlite:\/\/\/:memory:', echo=False):\n    engine = create_engine(sqlPath, echo=echo)\n    Base.metadata.create_all(engine)\n    Session = sessionmaker(bind=engine)\n    global session\n    session = Session()\n    return session\n\ndef get_or_create(cls, **kwargs):\n    if not session: \n        print('db not init\/connected yet')\n        return None\n\n    instance = session.query(cls).filter_by(**kwargs).first()\n    if not instance:\n        instance = cls(**kwargs)\n        session.add(instance)\n        session.flush([instance])\n    return instance\n\n# association table for many to many relationships\nevents_judges = Table('events_judges', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('judge_id', ForeignKey('judges.id'), primary_key=True)\n)\n\nevents_cases = Table('events_cases', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('case_id', ForeignKey('cases.id'), primary_key=True)\n)\n\nevents_tags = Table('events_tags', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('tag_id', ForeignKey('tags.id'), primary_key=True)\n)\n\nevents_lawyers = Table('events_lawyers', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('lawyer_id', ForeignKey('lawyers.id'), primary_key=True)\n)\n\nevents_lawyers_atk = Table('events_lawyers_atk', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('lawyer_id', ForeignKey('lawyers.id'), primary_key=True)\n)\n\nevents_lawyers_def = Table('events_lawyers_def', Base.metadata,\n    Column('event_id', ForeignKey('events.id'), primary_key=True),\n    Column('lawyer_id', ForeignKey('lawyers.id'), primary_key=True)\n)\n\nclass Event(Base):\n    __tablename__ = 'events'\n    id = Column(Integer, primary_key=True)\n    category = Column(String)\n    court = Column(String)\n\n    judges = relationship(\"Judge\", \n                          secondary=events_judges,\n                          back_populates='events')\n\n    datetime = Column(DateTime(), nullable=True)\n\n    #sometimes a event can have 2 cases\n    cases = relationship(\"Case\", \n                          secondary=events_cases,\n                          back_populates='events')\n\n    parties = Column(String)\n    parties_atk = Column(String)\n    parties_def = Column(String)\n\n    tags = relationship(\"Tag\", \n                          secondary=events_tags,\n                          back_populates='events')\n\n    lawyers = relationship(\"Lawyer\", \n                          secondary=events_lawyers,\n                          back_populates='events')\n\n    lawyers_atk = relationship(\"Lawyer\", \n                          secondary=events_lawyers_atk,\n                          back_populates='events_atk')\n    \n    lawyers_def = relationship(\"Lawyer\", \n                          secondary=events_lawyers_def,\n                          back_populates='events_def')\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        return get_or_create(cls, **kwargs)\n\n    def __repr__(self):\n        return \"<Event(category='%s', datetime='%s')>\" % (\n                            self.category, self.datetime)\n    \n    def fullDesc(self):\n        print(\"category   :\", self.category   )\n        print(\"court      :\", self.court      )\n        print(\"judges     :\", self.judges     )\n        print(\"datetime   :\", self.datetime   )\n        print(\"cases      :\", self.cases      )\n        print(\"parties    :\", self.parties    )\n        print(\"parties_atk:\", self.parties_atk)\n        print(\"parties_def:\", self.parties_def)\n        print(\"tags       :\", self.tags       )\n        print(\"lawyers    :\", self.lawyers    )\n        print(\"lawyers_atk:\", self.lawyers_atk)\n        print(\"lawyers_def:\", self.lawyers_def)\n\nclass Judge(Base):\n    __tablename__ = 'judges'\n    id = Column(Integer, primary_key=True)\n    name_zh = Column(String, unique=False)\n    name_en = Column(String, unique=False)\n\n    events = relationship(\"Event\", \n                          secondary=events_judges,\n                          back_populates='judges')\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        return get_or_create(cls, **kwargs)\n\n    def __repr__(self):\n        return \"<Judge(name_zh='%s', name_en='%s')>\" % (\n                            self.name_zh, self.name_en)\n\nclass Case(Base):\n    __tablename__ = 'cases'\n    id = Column(Integer, primary_key=True)\n    caseNo = Column(String, unique=True)\n    description = Column(String)\n    events = relationship(\"Event\", \n                          secondary=events_cases,\n                          back_populates='cases')\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        return get_or_create(cls, **kwargs)\n    \n    def __repr__(self):\n        return \"<Case(caseNo='%s', description='%s')>\" % (\n                            self.caseNo, self.description)\n\nclass Tag(Base):\n    \"\"\"\n    This correspond to 'Offence' 'Offence\/Nature' and 'Hearing' column\n    \"\"\"\n    __tablename__ = 'tags'\n    id = Column(Integer, primary_key=True)\n    name_zh = Column(String, unique=False)\n    name_en = Column(String, unique=False)\n\n    events = relationship(\"Event\", \n                          secondary=events_tags,\n                          back_populates='tags')\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        return get_or_create(cls, **kwargs)\n\n    def __repr__(self):\n        return \"<Tag(name_zh='%s', name_en='%s')>\" % (\n                            self.name_zh, self.name_en)\n\nclass Lawyer(Base):\n    __tablename__ = 'lawyers'\n    id = Column(Integer, primary_key=True)\n    name_zh = Column(String, unique=False) # '\u5b56\u58eb\u6253\u5f8b\u5e2b\u884c' = 'Mayer Brown' also 'Mayer Brown JSM'...\n    name_en = Column(String, unique=False)\n    \n    events = relationship(\"Event\", \n                          secondary=events_lawyers,\n                          back_populates='lawyers')\n\n    events_atk = relationship(\"Event\", \n                          secondary=events_lawyers_atk,\n                          back_populates='lawyers_atk')\n    \n    events_def = relationship(\"Event\", \n                          secondary=events_lawyers_def,\n                          back_populates='lawyers_def')\n\n    @classmethod\n    def get_or_create(cls, **kwargs):\n        return get_or_create(cls, **kwargs)\n    \n    def __repr__(self):\n        return \"<Lawyer(name_zh='%s', name_en='%s')>\" % (\n        self.name_zh, self.name_en)","1e8ebbfa":"# download file with \"requests\"\n# https:\/\/stackoverflow.com\/questions\/16694907\/download-large-file-in-python-with-requests\nimport requests\nimport shutil\n\ndef download_file(url, local_filename):\n    r = requests.get(url, stream=True)\n    with open(local_filename, 'wb') as f:\n        shutil.copyfileobj(r.raw, f)","6760bdd4":"# plotly standard imports\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks\n\n# Data science imports\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.offline import iplot\ncufflinks.go_offline()","936eddb2":"download_file(\"https:\/\/morph.io\/ylchan87\/HKCourtList\/data.sqlite?key=tujNIuYznWUaPWxO8ltL\", \"data.sqlite\")","279913ca":"session = init(\"sqlite:\/\/\/data.sqlite\") #init sqlAlchemy datamodel","f13ac658":"events = session.query(Event).all()\nevents[0].fullDesc()","9ed83455":"cs = session.query(Case).filter_by(description=\"\u5a5a\u59fb\u8a34\u8a1f\").all()\nlawyers_count = {}\nfor c in cs:\n    case_lawyers = set()\n    for e in c.events:\n        for l in e.lawyers + e.lawyers_atk + e.lawyers_def: case_lawyers.add(l)\n    for l in case_lawyers:\n        try:\n            lawyers_count[l]+=1\n        except KeyError:\n            lawyers_count[l]=1","f15625b4":"df = (pd.DataFrame([ [l.name_zh, l.name_en, c] for l,c in lawyers_count.items()], columns = [\"name_zh\", \"name_en\", \"count\"])\n      .sort_values(\"count\", ascending=False)\n     )\ndf.head(10)","ebec3fca":"df.iplot(kind='pie', labels=\"name_en\", values=\"count\", title=\"Lawyers employed in case of type \u5a5a\u59fb\u8a34\u8a1f\")","986c06b3":"lawyers = session.query(Lawyer).all()\ndf = (pd.DataFrame([ [l.name_zh, l.name_en, len(l.events)] for l in lawyers], columns=[\"name_zh\",\"name_en\",\"nEvents\"])\n      .sort_values(\"nEvents\",ascending=False)\n     )\ndf.head(10)","d3ead521":"aLawyer = session.query(Lawyer).filter_by( name_en=\"Yip, Tse & Tang\").first()","34363476":"df = pd.DataFrame([e.category for e in aLawyer.events])\ncat_counts = df[0].value_counts()\ncat_counts = pd.DataFrame(cat_counts).reset_index()\ncat_counts.columns = ['courtType','count']\ncat_counts.iplot(kind='pie', labels='courtType', values='count', title=\"Court type of cases by lawyer '%s'\" % aLawyer.name_en)","ac65cf5c":"## Which laywer deals with marriage related case?","94e87557":"## What type of court do that lawyer deal with?","cc34dc18":"## Which lawyer take most court events?","4a7b9383":"# Preparations:\n1. Import the sqlAlchemy data model\n2. Code to download the data set\n3. Import ploting libs and basic data science related libs","d962e5d0":"# Look around\n## Fields in an event","ef9752a4":"# Setup things"}}