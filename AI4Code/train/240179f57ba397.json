{"cell_type":{"c6c5a561":"code","3c877cca":"code","cea0071e":"code","c848caf6":"code","112c2222":"markdown","617e5e23":"markdown","66ac2cfb":"markdown"},"source":{"c6c5a561":"# Set the response and predictor variables and set up regression models with train and test datasets.\nY = \"default_loan\"\n\ncategoricals = [\"phi_term_month\", \"home_ownership\", \"purpose\", \"addr_state\", \"verification_status\", \"application_type\"]\nnumerics = [\"CRI\", \"phi_loan_amnt\", \"phi_emp_length\", \"phi_annual_inc\", \"phi_dti\", \"phi_delinq_2yrs\", \"phi_revol_util\", \"phi_total_acc\", \"phi_credit_length_in_years\", \"phi_int_rate\"]\nX = categoricals + numerics\n\n# now we can save the valid to use it as an imput data for our final model","3c877cca":"# (1) define the model function\n# to build Grid of GLM models and Standardization + CrossValidation\n\nimport sklearn.metrics as metrics\nimport pandas as pd\nfrom plotnine import *\nfrom plotnine.data import meat\nfrom mizani.breaks import date_breaks\nfrom mizani.formatters import date_format\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StandardScaler, StringIndexer, OneHotEncoder, Imputer, VectorAssembler\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\nfrom pyspark.ml.tuning import CrossValidator, ParamGridBuilder\nimport mlflow\nimport mlflow.spark\nfrom pyspark.mllib.evaluation import BinaryClassificationMetrics\nfrom pyspark.ml.linalg import Vectors\n\n# setting the parameters\nmaxIter = 10\nelasticNetParam = 0.99\nregParam = 0.3\n  \n  ## we start with mlflow.start_run() which essentially start tracking what we are doing in this notebook in databricks\nwith mlflow.start_run():\n    labelCol = \"default_loan\"\n    indexers = list(map(lambda c: StringIndexer(inputCol=c, outputCol=c+\"_idx\", handleInvalid = \"keep\"), categoricals))\n    ohes = list(map(lambda c: OneHotEncoder(inputCol=c + \"_idx\", outputCol=c+\"_class\"), categoricals))\n    imputers = Imputer(inputCols = numerics, outputCols = numerics)\n    featureCols = list(map(lambda c: c+\"_class\", categoricals)) + numerics\n    model_matrix_stages = indexers + ohes + \\\n                          [imputers] + \\\n                          [VectorAssembler(inputCols=featureCols, outputCol=\"features\"), \\\n                           StringIndexer(inputCol= labelCol, outputCol=\"label\")]\n    \n    scaler = StandardScaler(inputCol=\"features\",\n                            outputCol=\"scaledFeatures\",\n                            withStd=True,\n                            withMean=True)\n    \n    ## here, we build the logistic regression model with parameters equal to variables for elasticNet regression\n    lr = LogisticRegression(maxIter=maxIter, elasticNetParam=elasticNetParam, regParam=regParam, featuresCol = \"scaledFeatures\")\n    \n    ##now, we define a pipline which includes everything from standardazing the data, imputing missing values and encoding for categorical columns\n    pipeline = Pipeline(stages=model_matrix_stages+[scaler]+[lr])\n    \n    glm_model = pipeline.fit(train)\n    \n    ## Log Params and Model\n    ## The important part for mlflow of model tracking and reproduceability of the input parameters that we may want to review and take an action.  \n    mlflow.log_param(\"algorithm\", \"SparkML_GLM_regression\") # we put a name for the algorithm that we used\n    mlflow.log_param(\"regParam\", regParam)\n    mlflow.log_param(\"maxIter\", maxIter)\n    mlflow.log_param(\"elasticNetParam\", elasticNetParam)\n    mlflow.spark.log_model(glm_model, \"glm_model\")           # here we log the model itself\n    \n    ##Evaluate and Log ROC Curve\n    lr_summary = glm_model.stages[len(glm_model.stages)-1].summary\n    roc_pd = lr_summary.roc.toPandas()\n    fpr = roc_pd[\"FPR\"]\n    tpr = roc_pd[\"TPR\"]\n    roc_auc = metrics.auc(roc_pd[\"FPR\"], roc_pd[\"TPR\"])\n   \n    ## Set Max F1 Threshold  (for predicting the loan default with a balance between true-positives and false-positives)\n    fMeasure = lr_summary.fMeasureByThreshold\n    maxFMeasure = fMeasure.groupBy().max(\"F-Measure\").select(\"max(F-Measure)\").head()\n    madFMeasure = maxFMeasure[\"max(F-Measure)\"]\n    fMeasure = fMeasure.toPandas()\n    bestThreshold = float ( fMeasure[ fMeasure[\"F-Measure\"] == maxFMeasure] [\"threshold\"])\n    lr.setThreshold(bestThreshold)\n    \n    \n     ## Evaluate and Log Metrics  (here we score the customers)\n    def extract(row):\n      return (row.remain,) + tuple(row.probability.toArray().tolist()) + (row.label,) + (row.prediction,)\n\n    def score(model,data):\n      pred = model.transform(data).select(\"remain\", \"probability\", \"label\", \"prediction\")\n      pred = pred.rdd.map(extract).toDF([\"remain\", \"p0\", \"p1\", \"label\", \"prediction\"])\n      return pred\n\n    def auc(pred):\n      metric = BinaryClassificationMetrics(pred.select(\"p1\", \"label\").rdd)\n      return metric.areaUnderROC\n    \n   \n    glm_train = score(glm_model, train)\n    glm_valid = score(glm_model, valid)\n    \n    glm_train.registerTempTable(\"glm_train\")\n    glm_valid.registerTempTable(\"glm_valid\")\n    \n    print( \"GLM Training AUC :\" + str( auc(glm_train)))\n    print( \"GLM Validation AUC :\" + str(auc(glm_valid)))\n    \n    ## here we log the auc values and the area under the curve for the models metrics as we defined before for training as well as validation dataset\n    mlflow.log_metric(\"train_auc\", auc(glm_train))\n    mlflow.log_metric(\"valid_auc\", auc(glm_valid))","cea0071e":"pandas_df = glm_valid.toPandas()\r\ntxt = 'This table represents the \"CONFUSION MATRIX\" from Lasso Regression'\r\nprint(txt.title())\r\npd.crosstab(pandas_df.label, pandas_df.prediction, values=pandas_df.remain, aggfunc=\"count\").round(2)","c848caf6":"pandas_df_sum_net = glm_valid.groupBy(\"label\", \"prediction\").agg((sum(col(\"remain\"))).alias(\"sum_net\")).toPandas()\r\ntxt = 'This table represents the \"SUM NET\" from Lasso Regression'\r\nprint(txt.title())\r\npd.crosstab(pandas_df_sum_net.label, pandas_df_sum_net.prediction, values=pandas_df_sum_net.sum_net , aggfunc=\"sum\").round(2)","112c2222":"# Lasso regression ","617e5e23":"# Machine Learning Codes for Credit Scoring - Lasso regression !\n\nFor citation: https:\/\/doi.org\/10.1016\/j.eswa.2021.114835 (Journal - Expert Systems with Applications.)\n\nAsk for full-text in [ResearchGate](https:\/\/www.researchgate.net\/profile\/Afshin-Ashofteh-2)\n\nAfshin Ashofteh [email](aashofteh@novaims.unl.pt)\n\nSubject: Credit Risk and Credit Scoring.\n\nDatasource: loan.csv - Each loan includes applicant information provided by the applicant as well as current loan status (Current, Late, Fully Paid, etc.) and latest payment information.\n\n\n","66ac2cfb":"Links: \n*[ResearchGate](https:\/\/www.researchgate.net\/profile\/Afshin-Ashofteh-2)\n*[Kaggle](https:\/\/www.kaggle.com\/aashofteh)\n*[Google Scholar](https:\/\/scholar.google.com\/citations?user=oIa1W0gAAAAJ&hl=en)\n*[Data Science Discussion Group](https:\/\/www.linkedin.com\/groups\/12420006)\n*[email](aashofteh@novaims.unl.pt)"}}