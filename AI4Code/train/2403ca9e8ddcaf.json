{"cell_type":{"a26f0b86":"code","6b33c788":"code","ae48fd09":"code","a08adc14":"code","00404f61":"code","d1d1c03f":"code","e0564559":"code","f103e32b":"code","04368593":"code","99b87f2d":"code","db65ab18":"code","d45a6cae":"code","b345fdb5":"code","fd7ea63c":"code","47f4cf33":"code","5f33977b":"code","0c34d5c9":"code","2b59fc2d":"code","79032676":"code","661c4c2f":"code","622b86b4":"code","64a09243":"code","b281656e":"code","86e9ce6e":"code","a93ac9d9":"code","c0393e51":"code","b55ba7ae":"code","a6fc50fc":"code","bafc7eae":"code","cca56ebb":"code","44edf2d2":"code","8d150132":"code","df1fd677":"code","f3ac2c59":"markdown","733b1eb9":"markdown","27f43488":"markdown","998a6a70":"markdown","a1fd42c7":"markdown","e513cf37":"markdown","5e01e7d8":"markdown","4eb44932":"markdown","a8dc3cca":"markdown","0aab6bc4":"markdown","931f0863":"markdown"},"source":{"a26f0b86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nimport plotly as py # visualization library\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","6b33c788":"#Read and Clean Data\ndata=pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\ndata_review=pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv\")\ndata.drop_duplicates(subset='App', inplace=True)\ndata = data[data['Android Ver'] != np.nan]\ndata = data[data['Android Ver'] != 'NaN']\ndata = data[data['Installs'] != 'Free']\ndata = data[data['Installs'] != 'Paid']\ndata.columns=['App', 'Category', 'Rating', 'Reviews', 'Size', 'Installs', 'Type',\n       'Price', 'Content_Rating', 'Genres', 'Last_Updated', 'Current_Ver',\n       'Android_Ver']","ae48fd09":"data.info()","a08adc14":"data_review.info()","00404f61":"data['Installs'] = data['Installs'].apply(lambda x: x.replace('+', '') if '+' in str(x) else x)\ndata['Installs'] = data['Installs'].apply(lambda x: x.replace(',', '') if ',' in str(x) else x)\ndata['Installs'] = data['Installs'].apply(lambda x: int(x))\n\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace('Varies with device', 'NaN') if 'Varies with device' in str(x) else x)\n\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace('M', '') if 'M' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: str(x).replace(',', '') if 'M' in str(x) else x)\ndata['Size'] = data['Size'].apply(lambda x: float(str(x).replace('k', '')) \/ 1000 if 'k' in str(x) else x)\n\n\ndata['Size'] = data['Size'].apply(lambda x: float(x))\ndata['Installs'] = data['Installs'].apply(lambda x: float(x))\n\ndata['Price'] = data['Price'].apply(lambda x: str(x).replace('$', '') if '$' in str(x) else str(x))\ndata['Price'] = data['Price'].apply(lambda x: float(x))\n\ndata['Reviews'] = data['Reviews'].apply(lambda x: int(x))\n\n\nx = data['Rating'].dropna()\ny = data['Size'].dropna()\nz = data['Installs'][data.Installs!=0].dropna()\np = data['Reviews'][data.Reviews!=0].dropna()\nt = data['Type'].dropna()\nprice = data['Price']\nCategory=data[\"Category\"]\nAPP=data[\"App\"]\nContent=data[\"Content_Rating\"]\n","d1d1c03f":"data.info()","e0564559":"f,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","f103e32b":"log=pd.DataFrame(list(zip(APP,Category,x, y, np.log(z), np.log10(p), t, price)))\nlog.columns=[\"App\",\"Category\",\"Rating\",\"size\",\"Installs\",\"Reviews\",\"Type\", \"Price\"]\nlog\n","04368593":"#Installs VS Reviews of app\nlog.Installs.plot(color = 'r',label = 'Installs',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nlog.Reviews.plot(color = 'b',label = 'Reviews',linewidth=1, alpha = 0.5,grid = True,linestyle = \"dotted\")\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","99b87f2d":"log.plot(kind='scatter', x='size', y='Rating',alpha = 0.5,color = 'red')\nplt.xlabel('Size')              \nplt.ylabel('Rating')\nplt.title('How do Sizes impact the app rating?')          \nplt.show()\n","db65ab18":"log.Rating.plot(kind = 'hist',label=\"Rating\", bins = 5,figsize = (8,8))\nplt.title(\"Rating-Histogram\")\nplt.show()","d45a6cae":"data['Category'].unique()\n","b345fdb5":"area_list=list(log['Category'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = log[log['Category']==i]\n    area_poverty_rate = sum(x.Rating)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata1 = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data1['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data1.reindex(new_index)\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('APP Categories')\nplt.ylabel('Rating')\nplt.title('Customer Rating of App Categories')\nplt.show()","fd7ea63c":"log.head(5)","47f4cf33":"log.info()","5f33977b":"area_list = list(log['Category'].unique())\nRating = []\nsize = []\nInstalls = []\nReviews = []\nPrice = []\nfor i in area_list:\n    x = log[log['Category']==i]\n    Rating.append(sum(x.Rating)\/len(x))\n#     size.append(sum(x.size) \/ len(x))\n    Installs.append(sum(x.Installs) \/ len(x))\n    Reviews.append(sum(x.Reviews) \/ len(x))\n    Price.append(sum(x.Price) \/ len(x))\n# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Rating,y=area_list,color='green',alpha = 0.5,label='Rating' )\nsns.barplot(x=Installs,y=area_list,color='cyan',alpha = 0.6,label='Installs')\nsns.barplot(x=Reviews,y=area_list,color='yellow',alpha = 0.6,label='Review')\nsns.barplot(x=Price,y=area_list,color='red',alpha = 0.6,label='Price')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Races', ylabel='States',title = \"Percentage of Categorical situtation According to numerical values in Data \")","0c34d5c9":"\nlog.head(10).boxplot(column='Installs',by = 'Rating')\nplt.show()","2b59fc2d":"melted = pd.melt(frame=log,id_vars = 'App', value_vars= ['Rating','Installs'])\npivot=melted.pivot(index = 'App', columns = 'variable',values='value')\nthreshold = pivot.Rating.mean()\npivot[\"Rating_level\"] = [\"High\" if i > threshold else \"Low\" for i in pivot.Rating]\npivot\n","79032676":"sns.countplot(pivot.Rating_level)\nplt.title(\"Rating Level\",color = 'blue',fontsize=15)\nplt.show()","661c4c2f":"log.head()","622b86b4":"plt.figure(figsize=(20,15))\nnew_df=pd.DataFrame([log.groupby('Category')['Reviews'].mean().index,log.groupby('Category')['Reviews'].mean().values])\nnew_df = new_df.transpose()\nnew_df.columns=[\"Category\", \"Reviews_means\"]\nsns.barplot(x=new_df.sort_values(by=['Reviews_means'], ascending=False).Category,y=new_df.sort_values(by=['Reviews_means'], ascending=False).Reviews_means)\nplt.title(\"Reviews Means of Each Category\")\nplt.xlabel(\"Category\")\nplt.ylabel(\"Reviews_means\")\nplt.xticks(rotation=90)\nplt.show()","64a09243":"data_review.info()\n","b281656e":"data_review_log=data_review.copy()\ndata_review_log=data_review_log[data_review_log[\"Sentiment_Polarity\"]>0]\ndata_review_log.info()\n# data_review_log[\"App\"]=pd.DataFrame(data_review[\"App\"])","86e9ce6e":"data_review_log=data_review_log.sort_values(by=['Sentiment_Polarity'], ascending=False)\ndata_review_log1=pd.DataFrame()\ndata_review_log1[\"Sentiment_Polarity\"]=data_review_log.groupby('App')['Sentiment_Polarity'].mean().values\ndata_review_log1[\"App\"]=data_review_log.groupby('App')['Sentiment_Polarity'].mean().index\ndata_review_log1[\"Sentiment_Subjectivity\"]=data_review_log.groupby('App')['Sentiment_Subjectivity'].mean().values\n\n# # visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x=\"App\",y=\"Sentiment_Polarity\",data=data_review_log1.loc[:50],color='lime',alpha=0.8)\nsns.pointplot(x='App',y='Sentiment_Subjectivity',data=data_review_log1.loc[:50],color='red',alpha=0.8)\nplt.text(4,0.2,'Sentiment_Polarity',color='red',fontsize = 17,style = 'italic')\nplt.text(4,0.1,'Sentiment_Subjectivity',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('Applications',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.xticks(rotation=90)\nplt.title('Sentiment_polarity  rate vs sentiment_subjectivity rate of each App',fontsize = 20,color='blue')\nplt.grid()","a93ac9d9":"log.head()","c0393e51":"a=log.sort_values(by=['Price'], ascending=False)\na=a[a[\"Type\"]==\"Paid\"]\ng = sns.jointplot(a.Price, a.Installs, kind=\"scatter\", size=7)\nplt.savefig('graph.png')\nplt.show()","b55ba7ae":"sns.swarmplot(x=\"Installs\", y=\"Type\",hue=\"Price\", data=log.loc[:1000])\nplt.show()","a6fc50fc":"Translated_Review_df=pd.DataFrame(data_review_log.Translated_Review.value_counts())\nTranslated_Review_df=Translated_Review_df[Translated_Review_df[\"Translated_Review\"]>70]\nTranslated_Review_df\n","bafc7eae":"labels = Translated_Review_df.index\ncolors = ['grey','blue','red','yellow','green']\nexplode = [0,0,0,0,0]\nsizes = Translated_Review_df.Translated_Review\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Translated Reviews of All Applications ',color = 'blue',fontsize = 15)\nplt.show()","cca56ebb":"pivot.head()","44edf2d2":"# Installs\tRating\tRating_level\n# prepare data frame\ndf = pivot.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.Rating_level,\n                    y = df.Installs,\n                    mode = \"lines\",\n                    name = \"Installs\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.index)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.Rating_level,\n                    y = df.Rating,\n                    mode = \"lines+markers\",\n                    name = \"Reviews\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.index)\ndata = [trace1, trace2]\nlayout = dict(title = 'Installs and Reviews vs Rating of Top 100 Applications',\n              xaxis= dict(title= 'RATING',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","8d150132":"pivot.head()","df1fd677":"# prepare data frames\ndfhigh = pivot[pivot.Rating_level == \"High\"].iloc[:100,:]\ndflow = pivot[pivot.Rating_level == \"Low\"].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# creating trace1\ntrace1 =go.Scatter(\n                    x = dfhigh.Installs,\n                    y = dfhigh.Rating,\n                    mode = \"markers\",\n                    name = \"High\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= dfhigh.index)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = dflow.Installs,\n                    y = dflow.Rating,\n                    mode = \"markers\",\n                    name = \"Low\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= dflow.index)\n# # creating trace3\n# trace3 =go.Scatter(\n#                     x = df2016.world_rank,\n#                     y = df2016.citations,\n#                     mode = \"markers\",\n#                     name = \"2016\",\n#                     marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n#                     text= df2016.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Instals vs Rating of top 100 App with their Rating_level',\n              xaxis= dict(title= 'Installs',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Rating',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","f3ac2c59":"showing distribution of Rating","733b1eb9":"* Read datas\n* Installs VS Reviews of app\n* How do Sizes impact the app rating?\n* distribution of Rating\n* Rating rate of each Category\n* Percentage of Categorical situtation According to numerical values in Data\n* Installs distribution according to Rate\n* Rating_level (high-grater than means of Rating, low-lower dan means of Raring)\n* Rate of Reviews according to Category\n* user_reviews properties according to Sentiment\n* Installs Rate according to Price\n* according to payment type value Price and Installs\n* Translated Reviews of All Applications\n","27f43488":"Correlation of Data","998a6a70":"Cleaned data.info","a1fd42c7":"Data Cleaning\nConvert all app sizes to MB\nRemove '+' from 'Number of Installs' to make it numeric\nSize : Remove 'M', Replace 'k' and divide by 10^-3\ndata['Size'] = data['Size'].fillna(0)","e513cf37":"create new DataFrame for graphich","5e01e7d8":"Rating rate of each Category","4eb44932":"Percentage of Categorical situtation According to numerical values in Data ","a8dc3cca":"according to payment type value Price and Installs","0aab6bc4":"How do Sizes impact the app rating?","931f0863":"Sentiment_polarity  rate vs sentiment_subjectivity rate of each App"}}