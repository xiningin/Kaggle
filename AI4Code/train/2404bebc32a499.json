{"cell_type":{"803cda5a":"code","2497c560":"code","d4d35254":"code","7f7fcece":"code","cf5d8c41":"code","c44138cb":"code","71aa70b8":"code","a6e77d9d":"code","e96338e9":"code","4eb1a537":"code","24bd9c8a":"code","bbcea4e1":"code","1af47b78":"code","09639196":"code","4b8d2158":"code","ab0694e5":"code","9c9d6153":"code","e667176b":"code","df673879":"code","90bdcd59":"code","18bf81ad":"code","431fbf34":"code","836ac934":"code","ea2ee674":"code","9f4a6e26":"code","e13ee551":"code","9274f378":"code","899f60dd":"code","f301b05c":"code","b344fcc5":"code","7eda1d3f":"code","17afb821":"code","50ccb3fa":"code","d44325e1":"code","96e40863":"code","d6ebabd0":"code","b07f17e8":"code","f8329b95":"code","27d2f083":"code","3aab79be":"markdown"},"source":{"803cda5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2497c560":"import nltk\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d4d35254":"import chardet\nfile = '\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv'\nwith open(file, 'rb') as rawdata:\n    result = chardet.detect(rawdata.read(100000))\nresult","7f7fcece":"df = pd.read_csv(file,encoding='Windows-1252',index_col=0)","cf5d8c41":"df.head()","c44138cb":"sns.heatmap(df.isnull(), cbar=False)","71aa70b8":"df = df.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'], axis=1)","a6e77d9d":"df.reset_index(inplace=True)","e96338e9":"df.head()","4eb1a537":"df = df.rename(columns=({'v1':'label','v2':'message'}))","24bd9c8a":"df.head()","bbcea4e1":"df.describe()","1af47b78":"df.groupby('label').describe()","09639196":"#Adding a new column called length, to find the relation between length and label of the messages\ndf['length'] = df['message'].apply(len)","4b8d2158":"df.head()","ab0694e5":"plt.figure(figsize=(10,7))\nsns.histplot(df['length'],bins=100)","9c9d6153":"df.hist(column='length',by='label',bins=100,figsize=(12,6))\n#Visualising the relation between length and type of messages","e667176b":"import string\nfrom nltk.corpus import stopwords","df673879":"\"\"\"\nCreating A Funtion Convert The Messages For Tokenization\n\nStep 1: Remove Punctuation\nStep 2: Remove Stop Words\nStep 3: Return a list of Clean words\"\"\"\n\ndef remove_punctuation_and_stopwords(sms):\n    sms_no_punctuation = [ch for ch in sms if ch not in string.punctuation]\n    sms_no_punctuation = \"\".join(sms_no_punctuation).split()\n    sms_no_punctuation_no_stopwords = [word.lower() for word in sms_no_punctuation if word.lower() not in stopwords.words(\"english\")]\n    return sms_no_punctuation_no_stopwords","90bdcd59":"df['message'].apply(remove_punctuation_and_stopwords).head()","18bf81ad":"df","431fbf34":"#Use count vectorizer from sklearn to convert data into a sparcity matrix\nfrom sklearn.feature_extraction.text import CountVectorizer","836ac934":"bag_of_words = CountVectorizer(analyzer=remove_punctuation_and_stopwords).fit(df['message'])","ea2ee674":"messge_bow = bag_of_words.transform(df['message'])","9f4a6e26":"messge_bow.shape","e13ee551":"from sklearn.feature_extraction.text import TfidfTransformer","9274f378":"tifdf_transformer = TfidfTransformer().fit(messge_bow)","899f60dd":"message_tfidf = tifdf_transformer.transform(messge_bow)","f301b05c":"from sklearn.naive_bayes import MultinomialNB","b344fcc5":"spam_or_ham_model = MultinomialNB().fit(message_tfidf,df['label'])","7eda1d3f":"from sklearn.model_selection import train_test_split","17afb821":"X_train, X_test, y_train, y_test = train_test_split(df['message'],df['label'],test_size=0.25)","50ccb3fa":"from sklearn.pipeline import Pipeline","d44325e1":"pipeline = Pipeline([\n    ('bow',CountVectorizer(analyzer=remove_punctuation_and_stopwords)),\n    ('tfidf',TfidfTransformer()),\n    ('classifier',MultinomialNB())\n])","96e40863":"pipeline.fit(X_train,y_train)","d6ebabd0":"predict = pipeline.predict(X_test)","b07f17e8":"from sklearn.metrics import classification_report,confusion_matrix","f8329b95":"print(classification_report(predict,y_test))","27d2f083":"print(confusion_matrix(predict,y_test))","3aab79be":"All almost the values in unnamed:2,3,4 is nana, so drop them"}}