{"cell_type":{"fe712385":"code","1526fc8c":"code","8bff66c7":"code","143c75f6":"code","ab693feb":"code","df448f18":"code","af530255":"code","435e7461":"code","1e6eb472":"code","6b53017f":"code","ae87bec4":"markdown","8afbeda1":"markdown","c69834f2":"markdown","4839473e":"markdown","39a8d0fc":"markdown"},"source":{"fe712385":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix, classification_report","1526fc8c":"data = pd.read_csv('..\/input\/predicting-pulsar-starintermediate\/pulsar_data_train.csv')","8bff66c7":"data","143c75f6":"data.info()","ab693feb":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Fill missing values\n    for column in df.columns:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Split df into X and y\n    y = df['target_class']\n    X = df.drop('target_class', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","df448f18":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","af530255":"X_train","435e7461":"y_train","1e6eb472":"def evaluate_model(model, X_test, y_test):\n    acc = model.score(X_test, y_test)\n    print(\"Test Accuracy: {:.2f}%\".format(acc * 100))\n    \n    y_pred = model.predict(X_test)\n    cm = confusion_matrix(y_test, y_pred)\n    clr = classification_report(y_test, y_pred, target_names=[\"NORMAL\", \"PULSAR\"])\n    \n    plt.figure(figsize=(6, 6))\n    sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\n    plt.xticks(np.arange(2) + 0.5, [\"NORMAL\", \"PULSAR\"])\n    plt.yticks(np.arange(2) + 0.5, [\"NORMAL\", \"PULSAR\"])\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"Actual\")\n    plt.title(\"Confusion Matrix\")\n    plt.show()\n    \n    print(\"Classification Report:\\n---------------------\\n\", clr)","6b53017f":"model = LogisticRegression(\n    class_weight={\n        0: 1.0,\n        1: 3.0\n    }\n)\nmodel.fit(X_train, y_train)\n\nevaluate_model(model, X_test, y_test)","ae87bec4":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/H_QNyFF4lBo","8afbeda1":"# Task for Today  \n\n***\n\n## Rare Star Prediction  \n\nGiven *data about stars*, let's try to predict if a given star is a **pulsar star** or not.  \n  \nWe will use a logistic regression model to make our predictions.","c69834f2":"# Training\/Results","4839473e":"# Getting Started","39a8d0fc":"# Preprocessing"}}