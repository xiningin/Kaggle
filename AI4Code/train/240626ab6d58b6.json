{"cell_type":{"0022d6c1":"code","1c88a57c":"code","f33123f6":"code","e7903f7a":"code","9766d7a4":"code","c0c83c66":"code","b509323d":"code","7dff2d5e":"code","4088048d":"code","3245ca12":"code","6e239250":"code","fcd5601d":"code","2c7d3757":"code","6aadf7f0":"code","ed764a00":"code","7b15874c":"code","1d95e18e":"code","84c87753":"code","1ec1fbc0":"code","f83666f9":"code","e1079d4b":"code","a4e648bc":"code","a6145363":"code","ccc5b3ca":"code","61b0bf66":"code","2f2060fa":"markdown"},"source":{"0022d6c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c88a57c":"#import pandas as pd\n#import geopandas as gpd\n\nfrom shapely.geometry import LineString\n\n#from learntools.core import binder\n#binder.bind(globals())\n#from learntools.geospatial.ex2 import *","f33123f6":"birds_df = pd.read_csv(\"..\/input\/geospatial-learn-course-data\/purple_martin.csv\" , parse_dates=['timestamp'])","e7903f7a":"birds_df.head()","9766d7a4":"birds_df['tag-local-identifier'].unique() #there are 11 different birds since these are uniquely identified by tag-local-identifier","c0c83c66":"import geopandas as gpd","b509323d":"\nbirds = gpd.GeoDataFrame(birds_df , geometry = gpd.points_from_xy(birds_df[\"location-long\"] , birds_df[\"location-lat\"]))\n\nbirds.crs = {'init':'epsg:4326'}\n","7dff2d5e":"# Create the GeoDataFrame\nbirds = gpd.GeoDataFrame(birds_df, geometry=gpd.points_from_xy(birds_df[\"location-long\"], birds_df[\"location-lat\"]))\n\n# Set the CRS to {'init': 'epsg:4326'}\nbirds.crs = {'init' :'epsg:4326'}","4088048d":"world_path = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_path)\namericas = world.loc[world.continent.isin(['North America','South America'])]\n","3245ca12":"americas.head()","6e239250":"ax=americas.plot(figsize=(10,10),edgecolor='black',color='white',linestyle=':')\nbirds.plot(ax=ax , markersize=10)","fcd5601d":"# GeoDataFrame showing path for each bird\npath_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\n# GeoDataFrame showing starting point for each bird\nstart_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\n# Show first five rows of GeoDataFrame\nstart_gdf.head()","2c7d3757":"path_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_df","6aadf7f0":"end_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry)\nend_gdf.crs = {'init' :'epsg:4326'}\nend_gdf.head()","ed764a00":"ax=americas.plot(figsize=(10,10),color='white',edgecolor='black',linestyle=':')\npath_gdf.plot(ax=ax , markersize = 10)\n\nstart_gdf.plot(ax=ax , markersize = 15,color='green')\n\nend_gdf.plot(ax=ax , markersize = 20 , color='red')","7b15874c":"protected_filepath = \"..\/input\/geospatial-learn-course-data\/SAPA_Aug2019-shapefile\/SAPA_Aug2019-shapefile\/SAPA_Aug2019-shapefile-polygons.shp\"\nprotected_areas = gpd.read_file(protected_filepath)\n","1d95e18e":"south_america = americas.loc[americas['continent']=='South America']\nax=south_america.plot(figsize=(10,10),color='white',edgecolor='black')\nprotected_areas.plot(ax=ax , alpha = 0.4 )","84c87753":"protected_areas['REP_AREA'] #total area","1ec1fbc0":"protected_areas['REP_M_AREA'].describe() #marine area","f83666f9":"P_Area = sum(protected_areas['REP_AREA']-protected_areas['REP_M_AREA'])\nprint(\"South America has {} square kilometers of protected areas.\".format(P_Area))","e1079d4b":"south_america.head()","a4e648bc":"#Total AREA of southamerica\ntotalArea = sum(south_america.geometry.to_crs(epsg=3035).area)\/10**6\n#units in square kilometers\n#caluculated by summing up the area of each country and converting in square kilomtrs","a6145363":"#    % south america is protected \npercentage_protected = P_Area\/totalArea\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected*100, 2)))","ccc5b3ca":"protected_areas[protected_areas['MARINE']!=2]","61b0bf66":"ax = south_america.plot(figsize=(10,10), color='white', edgecolor='gray')\nprotected_areas[protected_areas['MARINE']!='2'].plot(ax=ax, alpha=0.4, zorder=1)\nbirds[birds.geometry.y < 0].plot(ax=ax, color='red', alpha=0.6, markersize=10, zorder=2)","2f2060fa":"Determining the percentage of south america is protected"}}