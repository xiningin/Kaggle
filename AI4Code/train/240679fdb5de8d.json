{"cell_type":{"e67fc28d":"code","56af0826":"code","52dc3377":"code","5dadd501":"code","2e7514e6":"code","cb915d75":"code","24c5233f":"code","78bb386f":"code","4a8bf664":"code","4d2896a2":"code","6d2d7397":"code","80867d16":"code","bda731e3":"code","7d1a3ce5":"code","896cb194":"code","724e30d8":"code","f199c45a":"code","f0cffd8f":"code","6c96471a":"code","cf0cd366":"code","88265f4f":"code","275dd453":"code","df82a885":"code","31a57771":"code","5ca16ddd":"code","008a62a7":"code","24fc0cd8":"code","3dd39fea":"code","7255e7f6":"code","a0d44eba":"code","59bbfbf4":"code","d8675bdf":"code","605bbad0":"code","d72626b6":"code","144d504f":"code","b39d311a":"code","dab6d7d4":"code","74a6aab1":"code","bc8ab436":"code","2c27bec1":"code","7fc6023e":"code","9032d2ee":"code","7a917772":"code","3e54098c":"code","53c0ba76":"code","32093c22":"code","7b7fac24":"code","a1f9a6a7":"code","6e07da35":"code","9b3849d7":"code","efb103be":"code","51b39bf1":"code","7e6f8a42":"code","7607f7e7":"code","9ed4a701":"code","538a8b56":"code","3e303070":"code","10b00555":"code","1672df7e":"code","672e9bb8":"code","6d180845":"code","576667f6":"code","82a543ae":"code","730c52b0":"code","005e9a5b":"code","21731874":"markdown","7ba3be83":"markdown","49f9886f":"markdown","3ce7baef":"markdown","f65d4df8":"markdown","a252f43f":"markdown","eeb20662":"markdown","ae211fec":"markdown","1e0c2f42":"markdown","7c78ad80":"markdown"},"source":{"e67fc28d":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sys\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","56af0826":"#Python version\nversion = sys.version\nprint(f\"Python version is {version}\")","52dc3377":"#Import data\npath_file = \"..\/input\/house-price\/House-Price.csv\"\ndata_original = pd.read_csv(path_file)\ndata_original.sample(5)","5dadd501":"#Copy original data\ndf = data_original.copy()","2e7514e6":"df.shape","cb915d75":"df.info()","24c5233f":"df.describe()","78bb386f":"#find null values\ndf.isnull().sum()","4a8bf664":"df.nunique()","4d2896a2":"#Covert date to datetime format\ndf['date'] = pd.to_datetime(df.date, format = '%d-%m-%Y %H.%M')","6d2d7397":"df.dtypes","80867d16":"#Create a new column \"age\" = Age of Houses\ndf[\"age\"] = 2021 - df[\"yr_built\"]","bda731e3":"df.sample(5)","7d1a3ce5":"#Remove columns\ndf = df.drop([\"date\", \"street\", \"statezip\", \"country\"], axis = 1)","896cb194":"df.head()","724e30d8":"sns.displot(df['price']);","f199c45a":"#skewness and kurtosis\nprint(\"Skewness: %.2f\" % df['price'].skew())\nprint(\"Kurtosis: %.2f\" % df['price'].kurt())","f0cffd8f":"#Create function to plot boxplot\ndef plot_boxplot(df, column):\n    outlier = [column]\n    plt.figure(figsize = (10, 8))\n    sns.set_style(\"whitegrid\")\n    sns.boxplot(data = df[outlier], orient = \"v\", palette = \"Set3\", saturation = 1, whis = 1.5, width = 0.9);\n    plt.title(\"Outier Variable Distribution\", fontweight = \"bold\", fontsize = 15)\n    plt.ylabel(\"Price Range\", fontweight = \"bold\")","6c96471a":"plot_boxplot(df, 'price')","cf0cd366":"# Define function called 'outlier' which returns a list of index outliers\n# IQR = Q3 - Q1\n# +\/- 1.5 *IQR\ndef outlier(data, col):\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    \n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    ls = df.index[(data[col] < lower_bound) | (data[col] > upper_bound)]\n    \n    return ls","88265f4f":"# create an empty list to store the output\nindex_list = []\n\nfor feature in [\"price\"]:\n    index_list.extend(outlier(df, feature))","275dd453":"index_list","df82a885":"#define a function called 'remove' which return a cleaned dataframe without outliers\ndef remove(data, ls):\n    \n    ls = sorted(set(ls))\n    data = data.drop(ls)\n    return data","31a57771":"df_cleaned = remove(df, index_list)","5ca16ddd":"df_cleaned[\"price\"].shape","008a62a7":"plot_boxplot(df_cleaned, \"price\")","24fc0cd8":"df_cleaned[\"price\"].to_frame().sort_values(by = \"price\", ascending = True)","3dd39fea":"#Drop rows that price < 10000\ndf_cleaned = df_cleaned.drop(df_cleaned[df_cleaned[\"price\"] < 10000].index)","7255e7f6":"df_cleaned[\"price\"].to_frame().sort_values(by = \"price\", ascending = True)","a0d44eba":"sns.displot(df_cleaned['price']);","59bbfbf4":"#After clean outlier\nprint(\"Skewness: %f\" % df_cleaned['price'].skew())\nprint(\"Kurtosis: %f\" % df_cleaned['price'].kurt())","d8675bdf":"df_cleaned.shape","605bbad0":"df_cleaned[\"city\"].value_counts(normalize = True)","d72626b6":"df_cleaned['city'].value_counts(normalize = True).index","144d504f":"#plot graph Number House of City\nplt.figure(figsize = (12, 8))\nsns.set_style(\"whitegrid\")\nsns.countplot(y = \"city\",\n              data = df_cleaned,\n              order = df_cleaned[\"city\"].value_counts().index)\nplt.xlabel(\"Count House\")\nplt.title(\"Number of house each city\", fontweight = \"bold\", fontsize = 15)\nplt.show()","b39d311a":"df_cleaned['floors'].value_counts().to_frame()","dab6d7d4":"df_cleaned = df_cleaned.drop(df_cleaned[df_cleaned['floors'] > 2].index)","74a6aab1":"df_cleaned['floors'].value_counts().to_frame().index","bc8ab436":"plt.figure(figsize = (12, 8))\nsns.set_style('darkgrid')\nsns.countplot(x = 'floors', \n              data = df_cleaned,\n              order = df_cleaned['floors'].value_counts().to_frame().index)\nplt.title(\"Number of floors each house\", fontweight = 'bold', fontsize = 15)\nplt.show()","2c27bec1":"df_cleaned['bedrooms'].value_counts().to_frame()","7fc6023e":"df_cleaned.drop(df_cleaned[(df_cleaned['bedrooms'] > 5) | (df_cleaned['bedrooms'] == 1) | (df_cleaned[\"bedrooms\"] == 0)].index, inplace = True)","9032d2ee":"df_cleaned['bedrooms'].value_counts().to_frame().index","7a917772":"plt.figure(figsize = (12, 8))\nsns.set_style(\"darkgrid\")\nsns.countplot(x = df_cleaned['bedrooms'],\n              data = df_cleaned,\n              order = df_cleaned['bedrooms'].value_counts().to_frame().index)\nplt.title(\"Number of bedrooms each house\", fontweight = 'bold', fontsize = 15)\nplt.show()","3e54098c":"#Relationship between bedrooms and price\nroom = 'bedrooms'\ndata = pd.concat([df_cleaned['price'],\n                 df_cleaned[room]],\n                 axis = 1)\ndata.plot.scatter(x = room,\n                  y = 'price');","53c0ba76":"#Relationship between bedrooms and sqft_living\nliving = 'sqft_living'\ndata = pd.concat([df_cleaned['price'],\n                  df_cleaned[living]],\n                 axis = 1)\ndata.plot.scatter(x = living,\n                  y = 'price');","32093c22":"#Relationship between bedrooms and sqft_lot\nlot = 'sqft_lot'\ndata = pd.concat([df_cleaned['price'],\n                  df_cleaned[lot]],\n                 axis = 1)\ndata.plot.scatter(x = lot,\n                  y = 'price');","7b7fac24":"#Relationship between bedrooms and sqft_above\nsns.regplot(x=\"sqft_above\", y=\"price\", data=df_cleaned)\nplt.ylim(0,);","a1f9a6a7":"#Relationship between bedrooms and sqft_living\nsns.regplot(x=\"sqft_living\", y=\"price\", data=df_cleaned)\nplt.ylim(0,);","6e07da35":"correlation = df_cleaned.corr()","9b3849d7":"#plot heatmap to see correlation\nplt.figure(figsize = (20, 10))\nsns.heatmap(correlation, cbar = True, square = True, fmt = '.2f', annot = True, annot_kws = {'size': 10}, cmap = 'Blues');","efb103be":"from scipy.stats import norm\nfrom scipy import stats\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score","51b39bf1":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)\n    print('__________________________________')\n    \ndef evaluate(true, predicted):\n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    return mae, mse, rmse, r2_square","7e6f8a42":"#OneHotEncoding\ndf_one = pd.get_dummies(df_cleaned)\ndf_one.head()","7607f7e7":"from sklearn.model_selection import train_test_split","9ed4a701":"X = df_one.drop(['price'], axis = 1)\nY = df_one['price']","538a8b56":"#train_test_split data\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 4)","3e303070":"print(f\"X_train : {X_train.shape}\")\nprint(f\"X_test : {X_test.shape}\")\nprint(f\"Y_train : {Y_train.shape}\")\nprint(f\"Y_test : {Y_test.shape}\")","10b00555":"#Import libraries\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.neighbors import KNeighborsRegressor","1672df7e":"r2 = []\nmodel = []\nRMSE = []\nreg = [LinearRegression(), Ridge(), Lasso(), KNeighborsRegressor(), XGBRegressor()]\nfor tar in reg:\n    model_name = type(tar).__name__\n    tar.fit(X_train, Y_train)\n    predict = tar.predict(X_test)\n    r2.append(r2_score(Y_test, predict))\n    model.append(model_name)\n    RMSE.append(mean_squared_error(Y_test, predict, squared = False))\nmodels = pd.DataFrame({\"Model\": model, 'R2' : r2, 'RMSE' : RMSE})\nprint(models)","672e9bb8":"#linearRegression\n\nreg = LinearRegression()\n\nreg.fit(X_train, Y_train)","6d180845":"#Intercept\nprint(reg.intercept_)","576667f6":"coeffcients = pd.DataFrame([X_train.columns,reg.coef_]).T\ncoeffcients = coeffcients.rename(columns={0: 'Attribute', 1: 'Coefficients'}).sort_values(by = 'Coefficients', ascending = False)\nprint(coeffcients)","82a543ae":"#prediction on training data\nY_pred = reg.predict(X_test) ","730c52b0":"#R2 = 7231675723605586\n\nprint_evaluate(Y_test, Y_pred)","005e9a5b":"plt.figure(figsize = (12, 8))\nplt.scatter(Y_test, Y_pred)\nplt.plot(Y_test, Y_test,color='red', linewidth=3)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"Actual Prices vs Predicted prices\")\nplt.show()","21731874":"**Exploratory Data Analysis**","7ba3be83":"**Model LinearRegression**","49f9886f":"> **date** : Date house was sold\n> \n> **price** : Price is prediction target\n> \n> **bedrooms** : Number of Bedrooms\/House\n> \n> **bathrooms** : Number of bathrooms\/bedrooms\n> \n> **sqft_living** : square footage of the home\n> \n> **sqft_lot**: square footage of the lot\n> \n> **floors** : Total floors (levels) in house\n> \n> **waterfront** : House which has a view to a waterfront\n> \n> **view** : Has been viewed\n> \n> **condition** : How good the condition is Overall\n> \n> **sqft_above** : square footage of house apart from basement\n> \n> **sqft_basement** : square footage of the basement\n> \n> **yr_built** : Built Year\n> \n> **yr_renovated** : Year when house was renovated\n\n","3ce7baef":"This is my first notebook and project. If you guys have any ideas please comment, That would be great to me and the beginner who interest in Data project.","f65d4df8":"**Model Training**","a252f43f":"**Train Test Split**","eeb20662":"**IMPORT LIBRALIES**","ae211fec":"**Data prep**","1e0c2f42":"**Cleaning data**","7c78ad80":"**IMPORT DATA AND EXPLORE**"}}