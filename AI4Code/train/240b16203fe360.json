{"cell_type":{"362b3d81":"code","57543aa0":"code","fd5967e0":"code","54b87848":"code","4474cf28":"code","5652c7a0":"code","366287ca":"code","32705e68":"code","fa6cca17":"code","08809c80":"code","8ff99538":"code","f63cc7b9":"code","a192fea3":"code","82c2b175":"code","bdca5c8b":"code","b73e1eec":"code","bd6f6b03":"code","6b596f7f":"code","6b535589":"code","36b4ddd7":"code","7888ebec":"code","b09c8bea":"code","8c64ee86":"code","d95381f7":"code","e53646bd":"code","17e3a0d5":"code","53f0e5b8":"code","e398517a":"code","fff2a4ba":"code","62754687":"code","412c01d3":"code","775af449":"code","5f227e2b":"code","ecece53f":"code","a8871c7a":"code","54d307c1":"code","d08775a7":"code","0408f30e":"code","32362dda":"code","c1d6393c":"code","36d1bb42":"code","bc4be59c":"code","a897d1d5":"code","ccfa84f6":"code","6a407a2e":"code","1f34aa22":"code","65999fb4":"code","ad992842":"code","fe32b45a":"code","2e010fef":"code","226c23bf":"code","4a41e1d6":"code","780106e3":"code","9c4d40b2":"code","659dc4e9":"code","59e3c590":"code","e0ed5a0d":"code","c1e18296":"code","f9f2594e":"code","6f7c478b":"code","793a7ad9":"code","226ffc4c":"code","3325e3e1":"code","8ca9feec":"code","9faa4912":"code","4cc86dab":"code","a5386592":"code","a705446e":"code","dca87a68":"code","b05d5643":"code","68157a06":"code","febeea7b":"code","30e4225f":"code","b6a35b64":"markdown","5fdd4e87":"markdown","672e145f":"markdown","a1a17525":"markdown","601f32f8":"markdown","20df4752":"markdown","d64fe5d6":"markdown","00a11616":"markdown","6c94b56f":"markdown","8e73673c":"markdown","560c678f":"markdown","5225ab73":"markdown","26c3a420":"markdown","b99dcef5":"markdown","e690b786":"markdown","674cdf0b":"markdown","da789ff0":"markdown","cacee973":"markdown","9bfb3ba1":"markdown","df449729":"markdown","1500040f":"markdown"},"source":{"362b3d81":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport shap\n\nfrom sklearn.datasets import load_iris, load_wine\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier, DistanceMetric\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay","57543aa0":"pd.options.display.max_columns = None","fd5967e0":"sns.set(font_scale=1.4)\nsns.set_style({'font.family': 'serif',\n               'fontname': 'Times New Roman'})","54b87848":"mpl.rcParams['figure.dpi'] = 100","4474cf28":"titanic_df = sns.load_dataset('titanic')\ntitanic_df.head()","5652c7a0":"titanic_df.dropna(subset=['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare'], inplace=True)\ntitanic_df.shape","366287ca":"titanic_df.drop(columns=['who', 'deck', 'embark_town', \n                         'alive', 'embarked', 'class', \n                         'alone', 'adult_male'], inplace=True)\ntitanic_df.head()","32705e68":"ax = sns.pairplot(titanic_df, hue='survived', height=3)\nplt.show()","fa6cca17":"label_encoder = LabelEncoder()\ntitanic_df['sex'] = label_encoder.fit_transform(list(titanic_df['sex'].values))\n\ntitanic_df.head()","08809c80":"ax = sns.pairplot(titanic_df, hue='survived', height=3)\nplt.show()","8ff99538":"X = titanic_df.loc[:,'pclass':'fare'].to_numpy()\ny = titanic_df['survived'].to_numpy()","f63cc7b9":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y,\n                                                    stratify = y,\n                                                    test_size=0.25, \n                                                    random_state=0)","a192fea3":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","82c2b175":"knn_model = KNeighborsClassifier(n_neighbors=7)\n\nknn_model.fit(X_train, y_train)","bdca5c8b":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, knn_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, knn_model.predict(X_test)), 2)}')","b73e1eec":"print(classification_report(y_test, knn_model.predict(X_test), target_names=['No', 'Yes']))","bd6f6b03":"fig, ax = plt.subplots(figsize=(5,5))\n\ncm = confusion_matrix(y_test, knn_model.predict(X_test), labels=knn_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(knn_model.classes_).map({0: 'No', 1: 'Yes'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","6b596f7f":"explainer = shap.Explainer(knn_model.predict, X_test)\nshap_values = explainer(X_train)","6b535589":"plt.figure(figsize = (15,8))\n\nax = shap.summary_plot(shap_values, \n                       titanic_df.columns,\n                       plot_type='bar')\n\nplt.show()","36b4ddd7":"tree_model = DecisionTreeClassifier(criterion='entropy',\n                                    max_depth=3,\n                                    min_samples_split=2,\n                                    random_state=0)\n\ntree_model.fit(X_train, y_train)","7888ebec":"plt.figure(figsize=(18,10))\n\nax = plot_tree(tree_model,\n               max_depth=3,\n               fontsize=12,\n               feature_names=titanic_df.columns[1:])\n\nplt.show()","b09c8bea":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, tree_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, tree_model.predict(X_test)), 2)}')","8c64ee86":"print(classification_report(y_test, tree_model.predict(X_test), target_names=['No', 'Yes']))","d95381f7":"fig, ax = plt.subplots(figsize=(5,5))\n\ncm = confusion_matrix(y_test, tree_model.predict(X_test), labels=tree_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(tree_model.classes_).map({0: 'No', 1: 'Yes'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","e53646bd":"explainer = shap.Explainer(tree_model.predict, X_test)\nshap_values = explainer(X_train)","17e3a0d5":"plt.figure(figsize = (15,8))\n\nax = shap.summary_plot(shap_values, \n                       titanic_df.columns,\n                       plot_type='bar')\n\nplt.show()","53f0e5b8":"android_malwares_df = pd.read_csv('..\/input\/android-apps-malware-and-benign\/benign_and_malware_android_applications.csv')\nandroid_malwares_df.head()","e398517a":"android_malwares_df.shape","fff2a4ba":"plt.figure(figsize = (8,5))\n\nax = sns.countplot(x = 'FAMILY', \n                   data = android_malwares_df, \n                   order = android_malwares_df['FAMILY'].value_counts().index)\n\nax.set_title('Aplicativos Android')\nax.set_xlabel('Tipo')\nax.set_ylabel('Qtd. de aplicativos')\n\nplt.show()","62754687":"X = android_malwares_df.drop(['FAMILY'], axis = 1).to_numpy()\ny = android_malwares_df['FAMILY'].to_numpy()","412c01d3":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y,\n                                                    stratify = y,\n                                                    test_size=0.25, \n                                                    random_state=0)","775af449":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","5f227e2b":"### Continua\u00e7\u00e3o ###","ecece53f":"iris_data = load_iris()","a8871c7a":"iris_df = pd.DataFrame(iris_data['data'], \n                       columns=iris_data['feature_names'])","54d307c1":"iris_df['TYPE'] =  iris_data['target']","d08775a7":"iris_df['SPC'] = iris_df['TYPE'].map({0: 'Iris-Setosa', \n                                      1: 'Iris-Versicolour',\n                                      2: 'Iris-Virginica'})","0408f30e":"iris_df.head()","32362dda":"ax = sns.pairplot(iris_df.drop(columns=['TYPE']), hue='SPC', height=3)\n\nplt.show()","c1d6393c":"X = iris_df.loc[:,'sepal length (cm)':'petal width (cm)'].to_numpy()\ny = iris_df['TYPE'].to_numpy()","36d1bb42":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","bc4be59c":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","a897d1d5":"knn_model = KNeighborsClassifier(n_neighbors=5)\n\nknn_model.fit(X_train, y_train)","ccfa84f6":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, knn_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, knn_model.predict(X_test)), 2)}')","6a407a2e":"print(classification_report(y_test, knn_model.predict(X_test), target_names=['Iris-Setosa', 'Iris-Versicolour', 'Iris-Virginica']))","1f34aa22":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, knn_model.predict(X_test), labels=knn_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(knn_model.classes_).map({0: 'Iris-Setosa', 1: 'Iris-Versicolour',2: 'Iris-Virginica'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","65999fb4":"tree_model = DecisionTreeClassifier(criterion='entropy',\n                                    max_depth=10,\n                                    min_samples_split=4,\n                                    random_state=0)\n\ntree_model.fit(X_train, y_train)","ad992842":"plt.figure(figsize=(25,10))\n\nax = plot_tree(tree_model,\n               max_depth=3,\n               fontsize=12,\n               feature_names=iris_df.columns[:-1])\n\nplt.show()","fe32b45a":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, tree_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, tree_model.predict(X_test)), 2)}')","2e010fef":"print(classification_report(y_test, tree_model.predict(X_test), target_names=['Iris-Setosa', 'Iris-Versicolour', 'Iris-Virginica']))","226c23bf":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, tree_model.predict(X_test), labels=tree_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(tree_model.classes_).map({0: 'Iris-Setosa', 1: 'Iris-Versicolour',2: 'Iris-Virginica'}))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","4a41e1d6":"wine_data = load_wine()","780106e3":"print(wine_data.DESCR)","9c4d40b2":"wine_df = pd.DataFrame(wine_data['data'], \n                       columns=wine_data['feature_names'])\nwine_df['TYPE'] =  wine_data['target']\nwine_df.head()","659dc4e9":"X = wine_df.loc[:,'alcohol':'proline'].to_numpy()\ny = wine_df['TYPE'].to_numpy()","59e3c590":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","e0ed5a0d":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","c1e18296":"knn_model = KNeighborsClassifier(n_neighbors=7)\n\nknn_model.fit(X_train, y_train)","f9f2594e":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, knn_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, knn_model.predict(X_test)), 2)}')","6f7c478b":"print(classification_report(y_test, knn_model.predict(X_test)))","793a7ad9":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, knn_model.predict(X_test), labels=knn_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(knn_model.classes_))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","226ffc4c":"tree_model = DecisionTreeClassifier(criterion='entropy',\n                                    max_depth=10,\n                                    min_samples_split=4,\n                                    random_state=0)\n\ntree_model.fit(X_train, y_train)","3325e3e1":"plt.figure(figsize=(25,10))\n\nax = plot_tree(tree_model,\n               max_depth=3,\n               fontsize=12,\n               feature_names=wine_df.columns[:-1])\n\nplt.show()","8ca9feec":"print(f'Acur\u00e1cia (Treino): {round(accuracy_score(y_train, tree_model.predict(X_train)), 2)}')\nprint(f'Acur\u00e1cia (Teste): {round(accuracy_score(y_test, tree_model.predict(X_test)), 2)}')","9faa4912":"print(classification_report(y_test, tree_model.predict(X_test)))","4cc86dab":"fig, ax = plt.subplots(figsize=(8,8))\n\ncm = confusion_matrix(y_test, tree_model.predict(X_test), labels=tree_model.classes_)\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm,\n                              display_labels=pd.Series(tree_model.classes_))\n\ndisp.plot(cmap=plt.cm.Blues, ax=ax)\n\nplt.show()","a5386592":"android_families_df = pd.read_csv('..\/input\/android-apps-malware-and-benign\/malware_families.csv')\nandroid_families_df.head()","a705446e":"android_families_df.shape","dca87a68":"plt.figure(figsize = (20,5))\n\nax = sns.countplot(x = 'FAMILY', \n                   data = android_families_df, \n                   order = android_families_df['FAMILY'].value_counts().index)\n\nax.set_title('Aplicativos Android')\nax.set_xlabel('Fam\u00edlia de Malware')\nax.set_ylabel('Qtd. de aplicativos')\n\nplt.show()","b05d5643":"X = android_families_df.drop(['FAMILY'], axis = 1).to_numpy()\ny = android_families_df['FAMILY'].to_numpy()","68157a06":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.25, \n                                                    random_state=0)","febeea7b":"print('Amostras de treino:')\nprint(f' * X_train: {X_train.shape}')\nprint(f' * y_train: {y_train.shape}')\n\nprint('Amostras de teste:')\nprint(f' * X_test: {X_test.shape}')\nprint(f' * y_test: {y_test.shape}')","30e4225f":"### Continua\u00e7\u00e3o ###","b6a35b64":"#### Avalia\u00e7\u00e3o do modelo","5fdd4e87":"#### Avalia\u00e7\u00e3o do modelo","672e145f":"#### Avalia\u00e7\u00e3o do modelo\n\n* [accuracy_score](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html?highlight=accuracy_score#sklearn.metrics.accuracy_score)\n* [classification_report](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.classification_report.html)\n* [confusion_matrix](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.confusion_matrix.html?highlight=confusion_matrix#sklearn.metrics.confusion_matrix)\n* [ConfusionMatrixDisplay](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.ConfusionMatrixDisplay.html?highlight=confusionmatrixdisplay#sklearn.metrics.ConfusionMatrixDisplay)","a1a17525":"---\n\n### 2.7) Desafio: Fam\u00edlias de Android Botnets\n\n* Fonte de dados: [Android Botnet dataset](https:\/\/www.unb.ca\/cic\/datasets\/android-botnet.html)","601f32f8":"### 2.2) k-vizinhos mais pr\u00f3ximos (KNN)","20df4752":"#### Avalia\u00e7\u00e3o do modelo","d64fe5d6":"### 1.2) k-vizinhos mais pr\u00f3ximos (KNN)\n\n* [KNeighborsClassifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier)","00a11616":"### 1.1) Base de dados: Titanic","6c94b56f":"#### Pr\u00e9-processamento dos dados\n\n* [LabelEncoder](http:\/\/https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html?highlight=labelencoder#sklearn.preprocessing.LabelEncoder)","8e73673c":"#### Avalia\u00e7\u00e3o do modelo","560c678f":"### 2.5) k-vizinhos mais pr\u00f3ximos (KNN)","5225ab73":"### 2.3) \u00c1rvores de decis\u00e3o","26c3a420":"---\n\n### 2.4) Base de dados: Wine","b99dcef5":"---\n\n### 1.4) Desafio: Aplicativos Android malignos e benignos\n\n* Fonte de dados: [Android Botnet dataset](https:\/\/www.unb.ca\/cic\/datasets\/android-botnet.html)\n\n![image.png](attachment:dbe7d7ac-faef-4201-bc1f-5a8b528e0ac2.png)","e690b786":"# k-vizinhos mais pr\u00f3ximos (KNN) e \u00c1rvores de decis\u00e3o\n\n* T\u00f3picos abordados:\n    * Problemas de classifica\u00e7\u00e3o em aprendizagem de m\u00e1quina;\n    * Pr\u00e9-processamento de dados;\n    * k-vizinhos mais pr\u00f3ximos (KNN);\n    * \u00c1rvores de decis\u00e3o;\n    * M\u00e9tricas para avalia\u00e7\u00e3o de modelos:\n        * Acur\u00e1cia\n        * F1\n        * Precis\u00e3o\n        * Revoca\u00e7\u00e3o","674cdf0b":"#### Avalia\u00e7\u00e3o do modelo","da789ff0":"## 1. Classifica\u00e7\u00e3o bin\u00e1ria","cacee973":"### 2.6) \u00c1rvores de decis\u00e3o","9bfb3ba1":"### 2.1) Base de dados: Iris","df449729":"### 1.3) \u00c1rvores de decis\u00e3o\n\n* [DecisionTreeClassifier](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html#sklearn-tree-decisiontreeclassifier)\n* [plot_tree](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.plot_tree.html#sklearn.tree.plot_tree)","1500040f":"## 2. Classifica\u00e7\u00e3o multiclasse"}}