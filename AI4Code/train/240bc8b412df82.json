{"cell_type":{"b0957889":"code","ba49a9b1":"code","8ef6fd03":"code","c7af2ea4":"code","5c5acaff":"code","f23ffa7e":"code","82740262":"code","e20a1d4f":"code","7938c60a":"code","fdc79393":"code","dc7d1880":"code","c07af302":"code","c96cc922":"code","14c10e72":"code","741468d5":"code","b9b147d9":"code","46997365":"code","dd50a601":"code","5ec836cd":"code","7fffc126":"code","41a9ba5a":"code","f6e42f03":"code","9fe3ef36":"code","f1030df8":"code","5aa63074":"code","2e4229cf":"code","1af5cca8":"code","3f66d1c0":"code","f15a6865":"code","2a4e68f8":"code","a314dc68":"code","55cfd5d0":"code","29126529":"code","ec8b37f2":"code","e9184116":"code","07e12b16":"code","e43099d9":"code","88bab1be":"code","454087db":"code","69bd1c2d":"code","81e95676":"code","c5d71aad":"code","9ab0149c":"code","742391b0":"code","b7422ae3":"code","10fd70e8":"code","e1aaabc7":"code","39addf9e":"code","e9a1d6ba":"markdown"},"source":{"b0957889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba49a9b1":"df=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsubmit=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","8ef6fd03":"df.head()","c7af2ea4":"features = [feature for feature in df.columns if df[feature].dtypes!='O']\nfeatures","5c5acaff":"import matplotlib.pyplot as plt\nfor column in features:\n    plt.plot(df[column])\n    plt.title(column)\n    plt.show()\n","f23ffa7e":"import datetime\ndf['date_time']=pd.to_datetime(df['date_time'])\ndf[\"day\"] = df['date_time'].map(lambda x: x.day)\ndf[\"month\"] = df['date_time'].map(lambda x: x.month)\ndf[\"year\"] = df['date_time'].map(lambda x: x.year)\ndf[\"hour\"] = df['date_time'].map(lambda x: x.hour)","82740262":"df.head()","e20a1d4f":"import seaborn as sns\nsns.heatmap(df.corr())","7938c60a":"target=df.iloc[:,9:12]\ntarget","fdc79393":"df.head()","dc7d1880":"#X_features = [feature for feature in df.columns if 'target' not in feature]\nX_features = [feature for feature in df.columns if 'target' not in feature ]","c07af302":"X=df[X_features]\nX.head()","c96cc922":"X=X.drop('date_time', axis=1)\nX.head()","14c10e72":"y_co=df['target_carbon_monoxide']\ny_be=df['target_benzene']\ny_no=df['target_nitrogen_oxides']","741468d5":"# Creating Train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, yco_train, yco_test = train_test_split(X,y_co, test_size=0.3, random_state=0)","b9b147d9":"import datetime\ntest['date_time']=pd.to_datetime(test['date_time'])\ntest[\"day\"] = test['date_time'].map(lambda x: x.day)\ntest[\"month\"] = test['date_time'].map(lambda x: x.month)\ntest[\"year\"] = test['date_time'].map(lambda x: x.year)\ntest[\"hour\"] = test['date_time'].map(lambda x: x.hour)","46997365":"test.head()","dd50a601":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)\ntest=test.drop('date_time', axis=1)\ntest=sc.transform(test)","5ec836cd":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\n!pip install -q -U keras-tuner\nimport keras_tuner as kt","7fffc126":"def model_builder(hp):\n  model = keras.Sequential()\n  for i in range(hp.Int('num_layers',2,20)):\n    model.add(keras.layers.Dense(units=hp.Int('units_' + str(i),\n                                            min_value=32,\n                                            max_value=512,\n                                            step=32),\n                               activation='relu'))\n  # Tune the number of units in the first Dense layer\n  # Choose an optimal value between 32-512\n  model.add(keras.layers.Dense(1, activation='linear'))\n  # Tune the learning rate for the optimizer\n  # Choose an optimal value from 0.01, 0.001, or 0.0001\n  hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n  model.compile(optimizer=keras.optimizers.Adam(learning_rate=hp_learning_rate),\n                loss='mean_squared_error',\n                metrics=['mean_squared_error'])\n\n  return model","41a9ba5a":"from keras_tuner import RandomSearch\ntuner = RandomSearch(\n    model_builder,\n    objective='val_mean_squared_error',\n    max_trials=5,\n    executions_per_trial=5,\n    directory='co',\n    project_name='Co')","f6e42f03":"tuner.search_space_summary","9fe3ef36":"tuner.search(X_train, yco_train,\n             epochs=50,\n             validation_data=(X_test, yco_test))","f1030df8":"tuner.results_summary()","5aa63074":"best_model = tuner.get_best_models(num_models=1)[0]\nloss, mse = best_model.evaluate(X_test, yco_test)","2e4229cf":"#Predict values for CO test\nY_CO=best_model.predict(X_test)","1af5cca8":"Y_CO.shape","3f66d1c0":"yco_test.shape","f15a6865":"#Calculating rmse on test set\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nrms_co = sqrt(mean_squared_error(yco_test, Y_CO))\nrms_co #1.38 when 10epochs, 5 trails, 3 exe","2a4e68f8":"#Predicting actual test X using the best model\nco_sub=best_model.predict(test)\nco_sub","a314dc68":"#Creating a dir for Benzene in the similar way\nfrom keras_tuner import RandomSearch\ntuner_be = RandomSearch(\n    model_builder,\n    objective='val_mean_squared_error',\n    max_trials=5,\n    executions_per_trial=5,\n    directory='be',\n    project_name='Be')","55cfd5d0":"# Creating Train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, ybe_train, ybe_test = train_test_split(X,y_be, test_size=0.3, random_state=4)\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","29126529":"tuner_be.search(X_train, ybe_train,\n             epochs=50,\n             validation_data=(X_test, ybe_test))\ntuner_be.results_summary()","ec8b37f2":"tuner_be.results_summary()","e9184116":"best_model_be = tuner_be.get_best_models(num_models=1)[0]\nloss, mse = best_model_be.evaluate(X_test, ybe_test)","07e12b16":"#Predicted value for benzene\nY_benzene=best_model_be.predict(X_test)","e43099d9":"#Calculating Accuracy\nrms_be = sqrt(mean_squared_error(ybe_test, Y_benzene))\nrms_be #1.12 when 50epochs, 5 trails, 5 exe","88bab1be":"be_sub=best_model_be.predict(test)\nbe_sub","454087db":"#Creating a dir for Nitrogen in the similar way\nfrom keras_tuner import RandomSearch\ntuner_no = RandomSearch(\n    model_builder,\n    objective='val_mean_squared_error',\n    max_trials=5,\n    executions_per_trial=5,\n    directory='no',\n    project_name='No')","69bd1c2d":"# Creating Train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, yno_train, yno_test = train_test_split(X,y_no, test_size=0.3, random_state=0)\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)","81e95676":"tuner_no.search(X_train, yno_train,\n             epochs=50,\n             validation_data=(X_test, yno_test))\ntuner_no.results_summary()","c5d71aad":"best_model_no = tuner_no.get_best_models(num_models=1)[0]\nloss, mse = best_model_no.evaluate(X_test, yno_test)","9ab0149c":"#Predicted value for NO\nY_NO=best_model_no.predict(X_test)\n#Calculating Accuracy\nrms_no = sqrt(mean_squared_error(yno_test, Y_NO))\nrms_no #83.93 when 10epochs, 5 trails, 3 exe","742391b0":"# Predicting actual test X for Nitrogen\nno_sub=best_model_no.predict(test)\nno_sub\n","b7422ae3":"submit.head()","10fd70e8":"# Coverting the predictions to a dataframe\ny_sub_co=pd.DataFrame(co_sub, columns=['target_carbon_monoxide'])\ny_sub_co\ny_sub_benz=pd.DataFrame(be_sub, columns=['target_benzene'])\nprint(y_sub_benz)\ny_sub_NO=pd.DataFrame(no_sub, columns=['target_nitrogen_oxides'])\ny_sub_NO","e1aaabc7":"sub=pd.concat([submit['date_time'], y_sub_co, y_sub_benz, y_sub_NO], axis=1)\nsub","39addf9e":"#Downloading the file\nsub.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","e9a1d6ba":"## Creating Submission"}}