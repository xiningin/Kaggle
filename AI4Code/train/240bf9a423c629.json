{"cell_type":{"6c9ac672":"code","e15fec3d":"code","1cef5863":"code","aa0b3ee3":"code","aec7dee6":"code","56fe37cb":"code","a54dd10d":"code","a7dfda23":"code","a928e3b7":"code","3a7abdff":"code","845f4e5f":"code","9f144186":"code","c9bb5011":"code","00a5bdfb":"code","3629fc3f":"code","5b63e106":"code","1946321b":"code","b9434ae0":"code","cd8d49a1":"code","749c5038":"code","9654c6e4":"code","8cf908a9":"code","5d9a68dd":"code","62a0db19":"markdown","2a6efeec":"markdown","6f000ba3":"markdown","686b244e":"markdown","d8e2702d":"markdown","de0aecbc":"markdown"},"source":{"6c9ac672":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","e15fec3d":"import os\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2\nfrom tqdm import tqdm\nfrom glob import glob\nfrom PIL import Image\nfrom skimage.transform import resize\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","1cef5863":"tf.__version__","aa0b3ee3":"path = \"..\/input\/ultrasound-nerve-segmentation\/train\/\"\nfile_list = os.listdir(path)\nfile_list[:20]","aec7dee6":"train_image = []\ntrain_mask = glob(path + '*_mask*')\n\nfor i in train_mask:\n    train_image.append(i.replace('_mask', ''))\n        \nprint(train_image[:10],\"\\n\" ,train_mask[:10])","56fe37cb":"# Display the first image and mask of the first subject.\nimage1 = np.array(Image.open(path+\"1_1.tif\"))\nimage1_mask = np.array(Image.open(path+\"1_1_mask.tif\"))\nimage1_mask = np.ma.masked_where(image1_mask == 0, image1_mask)\n\nfig, ax = plt.subplots(1,3,figsize = (16,12))\nax[0].imshow(image1, cmap = 'gray')\n\nax[1].imshow(image1_mask, cmap = 'gray')\n\nax[2].imshow(image1, cmap = 'gray', interpolation = 'none')\nax[2].imshow(image1_mask, cmap = 'jet', interpolation = 'none', alpha = 0.7)","a54dd10d":"width = 128\nheight = 128","a7dfda23":"from tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import Input, Activation, BatchNormalization, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","a928e3b7":"def dice_coef(y_true, y_pred, smooth = 1.):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\n\ndef dice_coef_loss(y_true, y_pred):\n    return -dice_coef(y_true, y_pred)\n\ndef iou(y_true, y_pred, smooth = 1.):\n    intersection = K.sum(y_true * y_pred)\n    sum_ = K.sum(y_true) + K.sum(y_pred)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return jac\n\ndef sensitivity(y_true, y_pred):\n    s = K.sum(y_true, axis=(1,2,3))\n    y_true_c = s \/ (s + K.epsilon())\n    s_ = K.sum(y_pred, axis=(1,2,3))\n    y_pred_c = s_ \/ (s_ + K.epsilon())\n   \n    true_positives = K.sum(K.round(K.clip(y_true_c * y_pred_c, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true_c, 0, 1)))\n    return true_positives \/ (possible_positives + K.epsilon())\n\ndef specificity(y_true, y_pred):\n    s = K.sum(y_true, axis=(1,2,3))\n    y_true_c = s \/ (s + K.epsilon())\n    s_ = K.sum(y_pred, axis=(1,2,3))\n    y_pred_c = s_ \/ (s_ + K.epsilon())\n    \n    true_negatives = K.sum(K.round(K.clip((1-y_true_c) * (1-y_pred_c), 0, 1)))\n    possible_negatives = K.sum(K.round(K.clip(1-y_true_c, 0, 1)))\n    return true_negatives \/ (possible_negatives + K.epsilon())","3a7abdff":"def unet(input_size=(128, 128, 3)):\n    inputs = Input(input_size)\n    \n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same')(inputs)\n    conv1 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n\n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(pool1)\n    conv2 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)\n\n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same')(pool2)\n    conv3 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)\n\n    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same')(pool3)\n    conv4 = Conv2D(512, (3, 3), activation='relu', padding='same')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)\n\n    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same')(pool4)\n    conv5 = Conv2D(1024, (3, 3), activation='relu', padding='same')(conv5)\n\n    up6 = concatenate([Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same')(conv5), conv4], axis=3)\n    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same')(up6)\n    conv6 = Conv2D(512, (3, 3), activation='relu', padding='same')(conv6)\n\n    up7 = concatenate([Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(conv6), conv3], axis=3)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same')(up7)\n    conv7 = Conv2D(256, (3, 3), activation='relu', padding='same')(conv7)\n\n    up8 = concatenate([Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(conv7), conv2], axis=3)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same')(up8)\n    conv8 = Conv2D(128, (3, 3), activation='relu', padding='same')(conv8)\n\n    up9 = concatenate([Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(conv8), conv1], axis=3)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same')(up9)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same')(conv9)\n\n    conv10 = Conv2D(1, (1, 1), activation='sigmoid')(conv9)\n\n    return Model(inputs=[inputs], outputs=[conv10])","845f4e5f":"def train_generator(data_frame, batch_size, train_path, aug_dict,\n        image_color_mode=\"rgb\",\n        mask_color_mode=\"grayscale\",\n        image_save_prefix=\"image\",\n        mask_save_prefix=\"mask\",\n        save_to_dir=None,\n        target_size=(256,256),\n        seed=1):\n    '''\n    can generate image and mask at the same time use the same seed for\n    image_datagen and mask_datagen to ensure the transformation for image\n    and mask is the same if you want to visualize the results of generator,\n    set save_to_dir = \"your path\"\n    '''\n    image_datagen = ImageDataGenerator(**aug_dict)\n    mask_datagen = ImageDataGenerator(**aug_dict)\n    \n    image_generator = image_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"filename\",\n        class_mode = None,\n        color_mode = image_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = image_save_prefix,\n        seed = seed)\n\n    mask_generator = mask_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"mask\",\n        class_mode = None,\n        color_mode = mask_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = mask_save_prefix,\n        seed = seed)\n\n    train_gen = zip(image_generator, mask_generator)\n    \n    for (img, mask) in train_gen:\n        img, mask = adjust_data(img, mask)\n        yield (img,mask)\n\ndef adjust_data(img,mask):\n    img = img \/ 255\n    mask = mask \/ 255\n    mask[mask > 0.5] = 1\n    mask[mask <= 0.5] = 0\n    \n    return (img, mask)","9f144186":"pos_mask = []\npos_img = []\nneg_mask = []\nneg_img = []\n\nfor mask_path, img_path in zip(train_mask, train_image):\n    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n    if np.sum(mask) == 0:\n        neg_mask.append(mask_path)\n        neg_img.append(img_path)\n    else:\n        pos_mask.append(mask_path)\n        pos_img.append(img_path)","c9bb5011":"!mkdir generated\n!mkdir generated\/img","00a5bdfb":"def flip_up_down(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 0)\n\ndef flip_right_left(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 1)","3629fc3f":"gen_img = []\ngen_mask = []\n\nfor (img_path, mask_path) in tqdm(zip(pos_img, pos_mask)):\n    image_name = img_path.split('\/')[-1].split('.')[0]\n\n    uf_img_path = 'generated\/img\/'+image_name+'_uf.jpg'\n    uf_mask_path = 'generated\/img\/'+image_name+'_uf_mask.jpg'\n    rf_img_path = 'generated\/img\/'+image_name+'_rf.jpg'\n    rf_mask_path = 'generated\/img\/'+image_name+'_rf_mask.jpg'\n\n    img = cv2.imread(img_path)\n    mask = cv2.imread(mask_path)\n\n    uf_img = flip_up_down(img)\n    uf_mask = flip_up_down(mask)\n    rf_img = flip_right_left(img)\n    rf_mask = flip_right_left(mask)\n\n    cv2.imwrite(uf_img_path, uf_img)\n    cv2.imwrite(uf_mask_path, uf_mask)\n    cv2.imwrite(rf_img_path, rf_img)\n    cv2.imwrite(rf_mask_path, rf_mask)\n    \n    gen_img.append(uf_img_path)\n    gen_mask.append(uf_mask_path)\n    gen_img.append(rf_img_path)\n    gen_mask.append(rf_mask_path)","5b63e106":"aug_img = gen_img + train_image\naug_mask = gen_mask + train_mask\n\ndf_ = pd.DataFrame(data={\"filename\": aug_img, 'mask' : aug_mask})\ndf = df_.sample(frac=1).reset_index(drop=True)\n\nkf = KFold(n_splits = 5, shuffle=False)","1946321b":"histories = []\nlosses = []\naccuracies = []\ndicecoefs = []\nious = []\n\ntrain_generator_args = dict(rotation_range=0.2,\n                            width_shift_range=0.05,\n                            height_shift_range=0.05,\n                            shear_range=0.05,\n                            zoom_range=0.05,\n                            horizontal_flip=True,\n                            fill_mode='nearest')\n\nEPOCHS = 120\nBATCH_SIZE = 32\n\nfor k, (train_index, test_index) in enumerate(kf.split(df)):\n    train_data_frame = df.iloc[train_index]\n    test_data_frame = df.iloc[test_index]\n    \n    train_gen = train_generator(train_data_frame, BATCH_SIZE,\n                                None,\n                                train_generator_args,\n                                target_size=(height, width))\n\n    test_gener = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n\n    model = unet(input_size=(height,width, 3))\n    model.compile(optimizer=Adam(lr=5e-6), loss=dice_coef_loss, \\\n                      metrics=[iou, dice_coef, sensitivity, specificity, 'binary_accuracy'])\n\n    model_checkpoint = ModelCheckpoint(str(k+1) + '_unet_ner_seg.hdf5', \n                                       verbose=1, \n                                       save_best_only=True)\n\n    history = model.fit_generator(train_gen,\n                                  steps_per_epoch=len(train_data_frame) \/\/ BATCH_SIZE, \n                                  epochs=EPOCHS, \n                                  callbacks=[model_checkpoint],\n                                  validation_data = test_gener,\n                                  validation_steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    \n    model = load_model(str(k+1) + '_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'iou': iou, 'dice_coef': dice_coef, 'sensitivity': sensitivity, 'specificity': specificity})\n    \n    test_gen = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n    results = model.evaluate_generator(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    results = dict(zip(model.metrics_names,results))\n    \n    histories.append(history)\n    accuracies.append(results['binary_accuracy'])\n    losses.append(results['loss'])\n    dicecoefs.append(results['dice_coef'])\n    ious.append(results['iou'])\n    \n    break","b9434ae0":"import cv2\nfrom sklearn import metrics\n\ntest_gen = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\npred = model.predict(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)\npred = np.sum(pred, axis=(1,2,3))      # onno model e pred[0] er jaygay pred hobe\npred[pred>0] = 1\n\ntrue = []\nfor i in test_data_frame['mask']:\n    img = cv2.imread(i, cv2.IMREAD_GRAYSCALE)\n    s = np.sum(img)\n    if s > 0:\n        true.append(1)\n    else:\n        true.append(0)\n\ntrue = np.array(true)\n\ncm = metrics.confusion_matrix(true, pred)\n\nTP = cm[1][1]\nTN = cm[0][0]\nFP = cm[0][1]\nFN = cm[1][0]\n\n# calculate the sensitivity\nconf_sensitivity = (TP \/ float(TP + FN))    \n# calculate the specificity\nconf_specificity = (TN \/ float(TN + FP))\n\nprint('Sensitivity', conf_sensitivity)\nprint('Specificity', conf_specificity)","cd8d49a1":"import pickle\n\nfor h, history in enumerate(histories):\n\n    keys = history.history.keys()\n    fig, axs = plt.subplots(1, len(keys)\/\/2, figsize = (25, 5))\n    fig.suptitle('No. ' + str(h+1) + ' Fold Results', fontsize=30)\n\n    for k, key in enumerate(list(keys)[:len(keys)\/\/2]):\n        training = history.history[key]\n        validation = history.history['val_' + key]\n\n        epoch_count = range(1, len(training) + 1)\n\n        axs[k].plot(epoch_count, training, 'r--')\n        axs[k].plot(epoch_count, validation, 'b-')\n        axs[k].legend(['Training ' + key, 'Validation ' + key])\n            \n    with open(str(h+1) + '_nuclei_trainHistoryDict', 'wb') as file_pi:\n        pickle.dump(history.history, file_pi)","749c5038":"print('accuracies : ', accuracies)\nprint('losses : ', losses)\nprint('dicecoefs : ', dicecoefs)\nprint('ious : ', ious)\n\nprint('-----------------------------------------------------------------------------')\nprint('-----------------------------------------------------------------------------')\n\nprint('average accuracy : ', np.mean(np.array(accuracies)))\nprint('average loss : ', np.mean(np.array(losses)))\nprint('average dicecoefs : ', np.mean(np.array(dicecoefs)))\nprint('average ious : ', np.mean(np.array(ious)))\nprint()\n\nprint('standard deviation of accuracy : ', np.std(np.array(accuracies)))\nprint('standard deviation of loss : ', np.std(np.array(losses)))\nprint('standard deviation of dicecoefs : ', np.std(np.array(dicecoefs)))\nprint('standard deviation of ious : ', np.std(np.array(ious)))","9654c6e4":"selector = np.argmin(abs(np.array(ious) - np.mean(ious)))\nmodel = load_model(str(selector+1) + '_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'iou': iou, 'dice_coef': dice_coef})","8cf908a9":"for i in range(20):\n    index=np.random.randint(0,len(test_data_frame.index))\n    print(i+1, index)\n    img = cv2.imread(test_data_frame['filename'].iloc[index])\n    img = cv2.resize(img, (height, width))\n    img = img[np.newaxis, :, :, :]\n    img = img \/ 255\n    pred = model.predict(img)\n\n    plt.figure(figsize=(12,12))\n    plt.subplot(1,3,1)\n    plt.imshow(np.squeeze(img))\n    plt.title('Original Image')\n    plt.subplot(1,3,2)\n    plt.imshow(np.squeeze(cv2.resize(cv2.imread(test_data_frame['mask'].iloc[index]), (height, width))))\n    plt.title('Original Mask')\n    plt.subplot(1,3,3)\n    plt.imshow(np.squeeze(pred) > .5)\n    plt.title('Prediction')\n    plt.show()","5d9a68dd":"!rm -r generated                                                                          ","62a0db19":"## How to deal with train_masks.csv ?","2a6efeec":"**Sort the file list in ascending order and seperate it into images and masks**<br\/>\nEach file has the form of either \"subject_imageNum.tif\" or \"subject_imageNum_mask.tif\", so we can extract `subject` and `imageNum` from each file name by using regular expression. `\"[0-9]+\"` means to find the first consecutive number.<br\/>","6f000ba3":"Let's modularize this work.","686b244e":"Let's check that I did well","d8e2702d":"Now, I try to load all image files and store them variables X and y. Afther doing this, I recognize that it takes very much memory.<br\/>\nPlease let me know if there are several efficient ways to store image file","de0aecbc":"## Building the training dataset.\nLet's look at the train image list"}}