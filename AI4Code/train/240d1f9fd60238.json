{"cell_type":{"834a2030":"code","fa034128":"code","02a35783":"code","c77a0ea9":"code","50fad6b4":"code","fe9ba467":"code","80466802":"code","bb1c515d":"code","f4aeb54f":"code","ac5f565e":"code","214170bc":"code","3228d765":"code","9362fd00":"code","11217ff5":"code","a49edf3a":"code","467f3c83":"code","d1749a35":"code","06e147e8":"code","2df7d0c4":"code","bc10566d":"code","7b5eaa64":"code","2efde1b2":"code","1c648d51":"code","95767181":"code","77ba2778":"code","96d48463":"code","56895179":"code","88e4eb02":"code","2df758da":"code","838aa68f":"code","97074590":"code","f508a2c4":"code","12b0b870":"code","376931cf":"code","7a314679":"code","2defbbdf":"code","2dc407e7":"code","9706c3b6":"code","eaaa429f":"code","e1684c2b":"code","50632851":"code","1be4c4ec":"code","41658821":"code","fb136bff":"code","5dfa97b3":"code","c529e297":"code","eb7c4535":"code","318b8b6d":"code","9d8057c6":"code","88f8e870":"code","adffac53":"code","52f9e236":"code","09db6f1e":"code","248deb79":"code","c14088c1":"code","67772a4a":"code","d229106f":"code","043dc3c7":"code","745bb4ba":"code","539240b6":"code","063617b5":"code","6c5afbf6":"code","1a5c7301":"code","5d031e33":"code","5fdbb1bd":"code","b556ac50":"code","77e67277":"code","7d6e9d0d":"markdown","70425130":"markdown","45c786d5":"markdown","5e8f9cc6":"markdown","d7b9cad7":"markdown","d093616f":"markdown","878eaaa1":"markdown"},"source":{"834a2030":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa034128":"!pip install watermark","02a35783":"from platform import python_version\n\nprint('Vers\u00e3o python neste Jupyter Notebook:', python_version())","c77a0ea9":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport warnings\nimport math\nfrom scipy.stats import norm, skew\n\nwarnings.filterwarnings(\"ignore\")","50fad6b4":"%reload_ext watermark\n\n%watermark -a \"Rafael Gallo\" --iversions","fe9ba467":"sns.set_palette(\"Accent\")\nsns.set(style=\"whitegrid\", color_codes=True, font_scale=1.5)\ncolor = sns.color_palette()","80466802":"df = pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\ndf","bb1c515d":"df.head()","f4aeb54f":"df.tail()","ac5f565e":"df.shape","214170bc":"df.info()","3228d765":"df.dtypes","9362fd00":"df.drop(\"id\", axis = 1, inplace = True)\ndf.drop(\"date\", axis = 1, inplace = True)\ndf.drop(\"zipcode\", axis = 1, inplace = True)\ndf.drop(\"yr_renovated\", axis = 1, inplace = True)\ndf.head()","11217ff5":"df.isnull().sum()","a49edf3a":"df = df.dropna()\ndf","467f3c83":"df.isna().sum()","d1749a35":"df.notnull().sum()","06e147e8":"df.var()","2df7d0c4":"df.duplicated()","bc10566d":"df = df.reset_index().drop(\"index\", axis = 1)\ndf","7b5eaa64":"print(df.price.count())\nprint(df.price.max())\nprint(df.price.min())","2efde1b2":"mean_data = df['price'] = np.log1p(df['price'])\nmean_data","1c648d51":"plt.figure(figsize=(18.2, 8))\n\nax = sns.distplot(df['price']);\nplt.title(\"Distribui\u00e7\u00e3o\", fontsize=20)\nplt.axvline(df['price'].mean(), color='k')\nplt.axvline(df['price'].median(), color='r')\nplt.axvline(df['price'].mode()[0], color='g');","95767181":"plt.figure(figsize=(18.2, 8))\n\nax = sns.distplot(df['price'], fit=norm);","77ba2778":"plt.figure(figsize=(18.2, 8))\n\nboxplot = sns.boxplot(df[\"price\"]);","96d48463":"plt.figure(figsize=(18.2, 8))\n\nbox = sns.boxplot(x = \"yr_built\", y = \"price\", data = df)","56895179":"df.describe()","88e4eb02":"corr = df.corr()\ncorr","2df758da":"plt.figure(figsize=(20,11))\n\nax = sns.heatmap(corr, vmin=0, vmax=8000, cmap=\"YlGnBu\", linewidths=.5, annot=True ,annot_kws={'size':14} ,fmt=\".1f\")\nplt.yticks(rotation=0)\nplt.show()","838aa68f":"plt.figure(figsize=(18.2, 8))\n\nplt.hist(df[\"yr_built\"]);","97074590":"plt.figure(figsize=(18.2, 8))\n\nax = sns.distplot(df[\"price\"])","f508a2c4":"plt.figure(figsize=(18.2, 8))\n\nax = sns.distplot(df[\"sqft_above\"])","12b0b870":"plt.figure(figsize=(18.2, 8))\n\nax = sns.distplot(df[\"yr_built\"])","376931cf":"df.hist(bins = 40, figsize=(20.2, 20))\nplt.show()","7a314679":"fig1 , axes = plt.subplots(nrows=3,ncols=3 , figsize = (20,20))\n\nsns.distplot(df[\"bedrooms\"] , ax=axes[0, 0])\nsns.distplot(df[\"bathrooms\"] ,  ax=axes[0, 1])\nsns.distplot(df[\"sqft_living\"] , ax=axes[0, 2])\nsns.distplot(df[\"sqft_lot\"], ax=axes[1, 0] )\nsns.distplot(df[\"floors\"] , ax=axes[1, 1] )\nsns.distplot(df[\"sqft_above\"] , ax=axes[1, 2] )\nsns.distplot(df[\"yr_built\"] , ax=axes[2, 0])\nsns.distplot(df[\"price\"], ax=axes[2, 1])\n\nplt.show()","2defbbdf":"plt.figure(figsize=(18, 8))\n\nax = sns.scatterplot(x=\"price\", y=\"sqft_living\", data = df)","2dc407e7":"plt.figure(figsize=(18, 8))\n\nax = sns.scatterplot(x=\"lat\", y=\"long\", data = df, hue = \"price\")","9706c3b6":"x = df.drop('price', axis=1)\ny = df['price']","eaaa429f":"x.shape","e1684c2b":"y.shape","50632851":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler_x = scaler.fit_transform(x)\nscaler_x","1be4c4ec":"scaler_x.shape","41658821":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 26)","fb136bff":"x_train.shape","5dfa97b3":"y_train.shape","c529e297":"x_test.shape","eb7c4535":"y_test.shape","318b8b6d":"from sklearn.ensemble import RandomForestRegressor\n\nmodel_random_forest_regressor = RandomForestRegressor(max_depth=2, random_state=0)\nmodel_random_forest_regressor_fit = model_random_forest_regressor.fit(x_train, y_train)\nmodel_random_forest_regressor_pred = model_random_forest_regressor.predict(x_test)\nmodel_random_forest_regressor_pred","9d8057c6":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nRMSE = mean_squared_error(y_test, model_random_forest_regressor_pred)\nMAE = mean_absolute_error(y_test, model_random_forest_regressor_pred)\nMSE = mean_squared_error(y_test, model_random_forest_regressor_pred)\nR2 = r2_score(y_test, model_random_forest_regressor_pred)\n\nmetricas = pd.DataFrame({\n    \"Metricas\" :[\"RMSE\",\n                 \"MAE\", \"MSE\",\n                 \"R2\"],\n    \"Resultados\":[RMSE, \n                  MAE, MSE, R2]})\n\nmetricas.sort_values(by = \"Resultados\", ascending = False)","88f8e870":"from sklearn.neighbors import KNeighborsRegressor\n\nmodelo_KNN_regressor = KNeighborsRegressor(n_neighbors = 10, metric = 'euclidean')\nmodelo_KNN_regressor_fit = modelo_KNN_regressor.fit(x_train, y_train)\nmodelo_KNN_regressor_pred = modelo_KNN_regressor.predict(x_test)\nmodelo_KNN_regressor_pred","adffac53":"RMSE = mean_squared_error(y_test, modelo_KNN_regressor_pred)\nMAE = mean_absolute_error(y_test, modelo_KNN_regressor_pred)\nMSE = mean_squared_error(y_test, modelo_KNN_regressor_pred)\nR2 = r2_score(y_test, modelo_KNN_regressor_pred)\n\nmetricas = pd.DataFrame({\n    \"Metricas\" :[\"RMSE\",\n                 \"MAE\", \"MSE\",\n                 \"R2\"],\n    \"Resultados\":[RMSE, \n                  MAE, MSE, R2]})\n\nmetricas.sort_values(by = \"Resultados\", ascending = False)","52f9e236":"from sklearn.tree import DecisionTreeRegressor\n\nmodel_decision_tree_regressor = DecisionTreeRegressor(random_state = 30)\nmodel_decision_tree_regressor_fit = model_decision_tree_regressor.fit(x_train, y_train)\nmodel_decision_tree_regressor_pred = model_decision_tree_regressor.predict(x_test)\nmodel_decision_tree_regressor_pred","09db6f1e":"RMSE = mean_squared_error(y_test, model_decision_tree_regressor_pred)\nMAE = mean_absolute_error(y_test, model_decision_tree_regressor_pred)\nMSE = mean_squared_error(y_test, model_decision_tree_regressor_pred)\nR2 = r2_score(y_test, model_decision_tree_regressor_pred)\n\nmetricas = pd.DataFrame({\n    \"Metricas\" :[\"RMSE\",\n                 \"MAE\", \"MSE\",\n                 \"R2\"],\n    \"Resultados\":[RMSE, \n                  MAE, MSE, R2]})\n\nmetricas.sort_values(by = \"Resultados\", ascending = False)","248deb79":"from sklearn.linear_model import LinearRegression\n\nmodel_linear_regression = LinearRegression()\nmodel_linear_regression_fit = model_linear_regression.fit(x_train, y_train)\nmodel_linear_regression_pred = model_linear_regression.predict(x_train)\nmodel_linear_regression_pred","c14088c1":"model_linear_regression.coef_","67772a4a":"model_linear_regression.intercept_","d229106f":"model_linear_regression.coef_ * 27.74456356 + model_linear_regression.intercept_","043dc3c7":"predict = model_linear_regression.predict(x_train)\npredict","745bb4ba":"y_predict = model_linear_regression.predict(x_test)\ny_predict","539240b6":"predicts = y_train - predict\npredicts","063617b5":"plt.figure(figsize=(18, 8))\nplt.scatter(predict, y_train)\nplt.plot(predict, model_linear_regression.predict(x_train), color = \"red\")\nplt.title(\"Grafico de regress\u00e3o linear\", fontsize = 20)\nplt.xlabel(\"Valor\")\nplt.ylabel(\"Valor do im\u00f3vel\")\nplt.legend([\"Valor\", \"Im\u00f3vel\"])","6c5afbf6":"ax = sns.distplot(predict)\nax.figure.set_size_inches(20, 8)\nax.set_title('Distribui\u00e7\u00e3o de Frequ\u00eancias dos Res\u00edduos', fontsize=18)\nax.set_xlabel('Im\u00f3vel', fontsize=14)\nax","1a5c7301":"RMSE = mean_squared_error(y_test, y_predict)\nMAE = mean_absolute_error(y_test, y_predict)\nMSE = mean_squared_error(y_test, y_predict)\nR2 = r2_score(y_test, y_predict)\n\nmetricas = pd.DataFrame({\n    \"Metricas\" :[\"RMSE\",\n                 \"MAE\", \"MSE\",\n                 \"R2\"],\n    \"Resultados\":[RMSE, \n                  MAE, MSE, R2]})\n\nmetricas.sort_values(by = \"Resultados\", ascending = False)","5d031e33":"x_test[0:1]\na1 = x_test[0: 1]\npred = model_linear_regression.predict(a1)[0]\npred","5fdbb1bd":"bedrooms = 4\nbathrooms = 3.2\nsqft_living = 1223\nsqft_lot = 1112\nfloors = 2.2\nwaterfront = 1\nview = 2\ncondition = 3\ngrade = 2\nsqft_above = 3\nsqft_basement = 3\t\nyr_built = 1976\n\nlat = 47.4404 \nlong = -122.191\n\nsqft_living15 = 1985\nsqft_lot15 = 10200\n\na1 = [[bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, lat, long, sqft_living15, sqft_lot15]]\n\nprint(\"{0:.2f} Valor do im\u00f3vel\". format(model_linear_regression.predict(a1)[0]))","b556ac50":"import plotly.express as px\n\napt = df[[\"lat\", \"long\", \"price\"]]\n\nfig = px.scatter_mapbox(apt,\n                       lat = \"lat\",\n                       lon = \"long\",\n                       size = \"price\",\n                       color_continuous_scale = px.colors.cyclical.IceFire, \n                       size_max = 15, \n                       zoom = 10)\n\nfig.update_layout(\n    title = \"Mapa de imoveis a venda\",\n)\n\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","77e67277":"import pickle\n\nsaida = open(\"model_linear_regression_pred\", \"wb\")\npickle.dump(model_linear_regression_pred, saida)\nsaida.close()\n\nsaida = open(\"model_random_forest_regressor_pred\", \"wb\")\npickle.dump(model_random_forest_regressor_pred, saida)\nsaida.close()\n\nsaida = open(\"model_decision_tree_regressor_pred\", \"wb\")\npickle.dump(model_decision_tree_regressor_pred, saida)\nsaida.close()\n\nsaida = open(\"modelo_KNN_regressor_pred\", \"wb\")\npickle.dump(modelo_KNN_regressor_pred, saida)\nsaida.close()","7d6e9d0d":"**Data Exploration**","70425130":"**Salvando modelo**","45c786d5":"**Modelo 03 - Decision Tree Regressor**","5e8f9cc6":"**Modelo 02 - K-NN Regressor**","d7b9cad7":"**Modelo 04 - Regress\u00e3o linear**","d093616f":"**Modelo 01 - Random Forest Regressor**","878eaaa1":"**Previs\u00e3o do imovel**"}}