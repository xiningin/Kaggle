{"cell_type":{"54549b61":"code","45fcbafe":"code","9d72cd24":"code","9ca9fa28":"code","c15562fb":"code","11db53c8":"code","942fe0f1":"code","0af8ead1":"code","dcb9827c":"code","4707e96c":"code","b464cbd9":"code","2223f2d9":"code","4ebbb1de":"code","91be7d6e":"code","e4ab41a4":"code","0e999ffb":"code","09fd46bf":"code","eb9c8fa1":"code","44d2cd3f":"code","deef2e83":"code","f2413140":"code","d2bd0203":"code","e87309d7":"code","fba674fb":"code","8ae7bbd7":"code","67a152fd":"code","c3ab7839":"code","950da757":"code","8d56ff20":"code","4db36531":"code","ac7b1172":"code","d8bca46c":"code","5cb58a66":"code","1eba13a3":"code","59cd97a9":"code","ab170c16":"code","c3d1a78c":"code","64145ebd":"code","8a4a9431":"code","75401d5f":"code","7c1b703b":"code","f5de7927":"code","1a1cf564":"code","07dacbf2":"code","62371698":"code","341640b6":"code","0a46b22c":"code","a3a6902e":"code","79024154":"code","a3203d15":"code","bb4fd044":"code","924a5f57":"code","876ae0a2":"code","14efea12":"code","fc813f4d":"code","53a7550a":"code","d53897db":"markdown","4574a72f":"markdown","0e347573":"markdown","b3226f3a":"markdown","2fde1d48":"markdown","4526e9c9":"markdown","b8b3fdd7":"markdown","053c7e7f":"markdown","e4ff9dd0":"markdown","4c4f2107":"markdown","05266aa8":"markdown","67375e12":"markdown","899565a7":"markdown","83a7f6e7":"markdown","726d5cd7":"markdown","7ea0772c":"markdown","4b1eb818":"markdown","ea941718":"markdown"},"source":{"54549b61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport json\nimport matplotlib\nfrom collections import Counter\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","45fcbafe":"credits_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","9d72cd24":"credits_df.head(2)","9ca9fa28":"movies_df.head(2)","c15562fb":"print(credits_df.shape)\nprint(credits_df.columns)","11db53c8":"print(movies_df.shape)\nprint(movies_df.columns)","942fe0f1":"movies_df.describe()","0af8ead1":"cm_df = movies_df.merge(credits_df, how = 'left', left_on = 'id', right_on= 'movie_id')","dcb9827c":"cm_df.drop(columns= ['original_title', 'title_x', 'movie_id'], inplace = True)","4707e96c":"cm_df.columns","b464cbd9":"cm_df.rename(columns= {'title_y':'Title',\n                      'budget' : 'Budget',\n                      'genres' : 'Genres',\n                      'homepage': 'Website',\n                      'id': 'Id',\n                      'keywords' : 'Keywords',\n                      'original_language': 'Language',\n                      'overview': 'Overview',\n                      'popularity': 'Popularity',\n                      'production_companies': 'Prod_Company',\n                      'production_countries':'Prod_Country',\n                      'release_date': 'Release_Date',\n                      'revenue':'Revenue',\n                      'runtime': 'Duration',\n                      'spoken_languages': 'Spoken_Language',\n                      'status': 'Status',\n                      'tagline':'Tagline',\n                      'vote_average':'Average_Vote',\n                      'vote_count':'Vote_Count',\n                      'cast':'Cast',\n                      'crew':'Crew'}, inplace = True)","2223f2d9":"cm_df['Release_Date'] = pd.to_datetime(cm_df['Release_Date'])\ncm_df['Release_Year'] = cm_df['Release_Date'].apply(lambda x: x.year)","4ebbb1de":"cm_df['Genres'] = cm_df['Genres'].apply(json.loads)","91be7d6e":"for index, i in zip(cm_df.index, cm_df['Genres']):\n    genres_list = []\n    for j in range(len(i)):\n        genres_list.append(i[j]['name'])\n    cm_df.loc[index, 'Genres'] = str(genres_list)","e4ab41a4":"cm_df['Keywords'] = cm_df['Keywords'].apply(json.loads)","0e999ffb":"for index, i in zip(cm_df.index, cm_df['Keywords']):\n    keywords_list = []\n    for j in range(len(i)):\n        keywords_list.append(i[j]['name'])\n    cm_df.loc[index , 'Keywords'] = str(keywords_list)","09fd46bf":"cm_df['Prod_Company'] = cm_df['Prod_Company'].apply(json.loads)","eb9c8fa1":"for index, i in zip(cm_df.index, cm_df['Prod_Company']):\n    prod_comp_list = []\n    for j in range(len(i)):\n        prod_comp_list.append(i[j]['name'])\n    cm_df.loc[index , 'Prod_Company'] = str(prod_comp_list)","44d2cd3f":"cm_df['Prod_Country'] = cm_df['Prod_Country'].apply(json.loads)","deef2e83":"for index, i in zip(cm_df.index, cm_df['Prod_Country']):\n    prod_comp_list = []\n    for j in range(len(i)):\n        prod_comp_list.append(i[j]['name'])\n    cm_df.loc[index , 'Prod_Country'] = str(prod_comp_list)","f2413140":"cm_df['Spoken_Language'] = cm_df['Spoken_Language'].apply(json.loads)","d2bd0203":"for index, i in zip(cm_df.index, cm_df['Spoken_Language']):\n    prod_comp_list = []\n    for j in range(len(i)):\n        prod_comp_list.append(i[j]['name'])\n    cm_df.loc[index , 'Spoken_Language'] = str(prod_comp_list)","e87309d7":"cm_df['Cast'] = cm_df['Cast'].apply(json.loads)","fba674fb":"for index, i in zip(cm_df.index, cm_df['Cast']):\n    cast_name_list = []\n    cast_character_list = []\n    cast_gender_list = []\n    for j in range(len(i)):\n        cast_name_list.append(i[j]['name'])\n        cast_character_list.append(i[j]['character'])\n        cast_gender_list.append(i[j]['gender'])\n    cm_df.loc[index, 'Caste_Name'] = str(cast_name_list)\n    cm_df.loc[index, 'Caste_Char'] = str(cast_character_list)\n    cm_df.loc[index, 'Caste_Gender'] = str(cast_gender_list)","8ae7bbd7":"cm_df['Crew']  =cm_df['Crew'].apply(json.loads)","67a152fd":"for index, i in zip(cm_df.index, cm_df['Crew']):\n    crew_dept_list = []\n    crew_gender_list = []\n    crew_job_list = []\n    crew_name_list = []\n    for j in range(len(i)):\n        crew_dept_list.append(i[j]['department'])\n        crew_gender_list.append(i[j]['gender'])\n        crew_job_list.append(i[j]['job'])\n        crew_name_list.append(i[j]['name'])\n    cm_df.loc[index, 'Crew_Dept'] = str(crew_dept_list)\n    cm_df.loc[index, 'Crew_Gender'] = str(crew_gender_list)\n    cm_df.loc[index, 'Crew_Job'] = str(crew_job_list)\n    cm_df.loc[index, 'Crew_Name'] = str(crew_name_list)","c3ab7839":"cm_df['Genres'] = cm_df['Genres'].str.strip('[]').str.replace(\"'\", \"\").str.replace(' ','').str.split(',')","950da757":"genres_list = []\nfor i in cm_df['Genres']:\n    for j in i:\n        genres_list.append(j)","8d56ff20":"plt.figure(figsize = (10,20))\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=0.5, colormap= matplotlib.cm.viridis_r).generate(' '.join(genres for genres in genres_list))\nplt.title('Types of Movies', fontdict = {'size':20, 'weight':'bold'})\nplt.imshow(wordcloud, interpolation ='bilinear')\nplt.tight_layout(pad = 0)\nplt.axis('off')\nplt.show()","4db36531":"cm_df['Keywords'] = cm_df['Keywords'].str.strip('[]').str.replace(\"'\",\"\").str.replace(' ','').str.split(',')","ac7b1172":"keywords_list = []\nfor i in cm_df['Keywords']:\n    for j in i:\n        keywords_list.append(j)","d8bca46c":"plt.figure(figsize = (10,20))\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=1, colormap = matplotlib.cm.viridis_r).generate(' '.join(keywords for keywords in keywords_list))\nplt.imshow(wordcloud, interpolation ='bilinear',  aspect = \"equal\")\nplt.title('Leading keywords in movies', fontdict = {'size':20, 'weight':'bold'})\nplt.tight_layout(pad = 0)\nplt.axis('off')\nplt.show()","5cb58a66":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = keywords_list, order = pd.Series([keyword for keyword in keywords_list if keyword != '' ]).value_counts().iloc[:40].index, palette= 'viridis')\nax.set_title('Keywords Count', fontdict = {'size':'20', 'weight':'bold'})\nax.set_xlabel('Keywords', fontdict = {'size':'15', 'weight':'bold'})\nax.set_ylabel('Count', fontdict = {'size':'15', 'weight':'bold'})\nax.grid(color = 'black')\nplt.xticks(rotation = 90)\nplt.tick_params(labelsize = 15)\nplt.show()","1eba13a3":"cm_df['Prod_Country'] = cm_df['Prod_Country'].str.strip('[]').str.replace(\"'\",\"\").str.replace(' ','').str.split(',')","59cd97a9":"country_list = []\nfor i in cm_df['Prod_Country']:\n    for j in i:\n        country_list.append(j)","ab170c16":"plt.figure(figsize = (10,20))\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=0.2, colormap = matplotlib.cm.magma).generate(' '.join(country for country in country_list))\nplt.imshow(wordcloud, interpolation ='bilinear',  aspect = \"equal\")\nplt.title('Countries in which movie is produced', fontdict = {'size':20, 'weight':'bold'})\nplt.tight_layout(pad = 0)\nplt.axis('off')\nplt.show()","c3d1a78c":"cm_df['Caste_Name'] = cm_df['Caste_Name'].str.strip('[]').str.replace(\"'\",\"\").str.replace(' ','').str.split(',')","64145ebd":"cm_df['Caste_Gender'] = cm_df['Caste_Gender'].str.strip('[]').str.replace(\"'\",\"\").str.replace(' ','').str.split(',')","8a4a9431":"cast_name_list = []\nfor i in cm_df['Caste_Name']:\n    for j in i:\n        cast_name_list.append(j)","75401d5f":"plt.figure(figsize = (10,20))\nstopwords = ['Jean']\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=0.2, colormap = matplotlib.cm.magma,stopwords = stopwords ).generate(' '.join(str(name).replace(' ','') for name in cast_name_list))\nplt.imshow(wordcloud, interpolation ='bilinear',  aspect = \"equal\")\nplt.title('Stars who were played a role in most of the movies', fontdict = {'size':20, 'weight':'bold'})\nplt.tight_layout(pad = 0)\nplt.axis('off')\nplt.show()","7c1b703b":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = cast_name_list, order = pd.Series([name for name in cast_name_list if name != '' ]).value_counts().iloc[:40].index, palette= 'magma_r')\nax.set_title('Cast Count', fontdict = {'size':'20', 'weight':'bold'})\nax.set_xlabel('Cast', fontdict = {'size':'15', 'weight':'bold'})\nax.set_ylabel('Count', fontdict = {'size':'15', 'weight':'bold'})\nax.grid(color = 'black')\nplt.xticks(rotation = 90)\nplt.tick_params(labelsize = 15)\nplt.show()","f5de7927":"name_df= pd.DataFrame(cm_df.loc[:,['Id', 'Caste_Name']])\n\nname_df= name_df['Caste_Name']\\\n        .apply(pd.Series)\\\n        .merge(name_df, left_index = True, right_index = True)\\\n        .drop(['Caste_Name'], axis = 1)\\\n        .melt(id_vars = ['Id'], value_name = 'Cast_Name')\\\n        .drop('variable', axis = 1)\\\n        .dropna()\nname_df.sort_values(['Id']).head(10)","1a1cf564":"gender_df= pd.DataFrame(cm_df.loc[:,['Id','Caste_Gender']])\n# gender_df.head()\ngender_df= gender_df['Caste_Gender']\\\n        .apply(pd.Series)\\\n        .merge(gender_df, left_index = True, right_index = True)\\\n        .drop(['Caste_Gender'], axis = 1)\\\n        .melt(id_vars = ['Id'], value_name = 'Cast_Gender')\\\n        .drop('variable', axis = 1)\\\n        .dropna()","07dacbf2":"cast_name_gender = name_df.merge(gender_df, left_index = True, right_index = True)\\\n                            .drop(['Id_y'],axis = 1)\\\n                            .rename(columns = {'Id_x':'Id'})","62371698":"plt.figure(figsize = (10,20))\nstopwords = ['Jean']\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=0.2, colormap = matplotlib.cm.magma,stopwords = stopwords )\\\n            .generate(' '.join(male for male in list(cast_name_gender[cast_name_gender['Cast_Gender']=='2']['Cast_Name'])))\nplt.title('Male Actors', fontdict = {'size':'20','weight':'bold'})\nplt.title('Male Actors playing role in most of the movies', fontdict = {'size':20, 'weight':'bold'})\nplt.tight_layout(pad = 0)\nplt.imshow(wordcloud, interpolation ='bilinear',  aspect = \"equal\")\nplt.axis('off')\nplt.show()","341640b6":"plt.figure(figsize = (10,20))\nstopwords = ['Jean']\nwordcloud = WordCloud(background_color= 'white', max_font_size= 500, collocations= False, relative_scaling=0.2, colormap = matplotlib.cm.magma,stopwords = stopwords )\\\n            .generate(' '.join(female for female in list(cast_name_gender[cast_name_gender['Cast_Gender'] =='1']['Cast_Name'])))\nplt.title('Female Actors', fontdict = {'size':'20','weight':'bold'})\nplt.imshow(wordcloud, interpolation ='bilinear',  aspect = \"equal\")\nplt.axis('off')\nplt.show()","0a46b22c":"plt.figure(figsize = (20,10))\nax = sns.countplot(x = cast_name_gender.loc[(cast_name_gender['Cast_Gender'] == '1'), 'Cast_Name'],\n                   order = pd.Series([female for female in cast_name_gender.loc[(cast_name_gender['Cast_Gender'] == '1'), 'Cast_Name'] if female != '' ])\\\n                                                                           .value_counts()\\\n                                                                            .iloc[:40].index, palette= 'magma_r')\nax.set_title('Female Actors Count', fontdict = {'size':'20', 'weight':'bold'})\nax.set_xlabel('Female Actors', fontdict = {'size':'15', 'weight':'bold'})\nax.set_ylabel('Count', fontdict = {'size':'15', 'weight':'bold'})\nax.grid(color = 'black')\nplt.xticks(rotation = 90)\nplt.tick_params(labelsize = 15)\nplt.show()","a3a6902e":"corr = cm_df.drop(['Id', 'Average_Vote','Duration'], axis = 1).corr()","79024154":"mask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,\n            mask = mask,\n            cmap= matplotlib.cm.magma_r,\n            square= True,\n            annot= True)","a3203d15":"plt.figure(figsize = (10,10))\nax = sns.scatterplot(x= cm_df[cm_df['Revenue']>800000000]['Revenue'], y = cm_df[cm_df['Vote_Count']>8000]['Vote_Count'], alpha= 0.7, color = 'red')\nax = sns.scatterplot(x= cm_df[cm_df['Revenue']<800000000]['Revenue'], y = cm_df[cm_df['Vote_Count']<8000]['Vote_Count'], alpha= 0.7, color = 'blue')\nax.set_title('Finding outliers in Revenue and VoteCount',fontdict = {'size':20, 'weight':'bold'})\nax.set_xlabel('Revenue',fontdict = {'size':15, 'weight':'bold'})\nax.set_ylabel('Number of Votes',fontdict = {'size':15, 'weight' : 'bold'})","bb4fd044":"from sklearn.cluster import KMeans\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","924a5f57":"X = cm_df.loc[:,['Revenue', 'Vote_Count']].values","876ae0a2":"kmeans = KMeans(n_clusters = 4, max_iter= 1500, n_init= 100, algorithm= 'auto')\nlabel = kmeans.fit_predict(X)","14efea12":"plt.figure(figsize = (10,10))\nax = sns.scatterplot(x = X[label==0, 0], y = X[label == 0,1], label = '1')\nax = sns.scatterplot(x = X[label==1, 0], y = X[label == 1,1], label = '2')\nax = sns.scatterplot(x = X[label==2, 0], y = X[label == 2,1], label = '3')\nax = sns.scatterplot(x = X[label==3, 0], y = X[label == 3,1], label = '4')\nsns.scatterplot(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=200, label = 'Centroids')\nax.set_title('Finding clusters in Revenue and VoteCount using KMeans',fontdict = {'size':20, 'weight':'bold'})\nax.set_xlabel('Revenue',fontdict = {'size':15, 'weight':'bold'})\nax.set_ylabel('Number of Votes',fontdict = {'size':15, 'weight' : 'bold'})","fc813f4d":"cm_df.head(2)","53a7550a":"cm_df.to_csv(r'..\/output\/mysub.csv')","d53897db":"## Star Names playing role in most of the movies","4574a72f":"## Get the year data from Release Date","0e347573":"## Frequent Tags in each Movie","b3226f3a":"## Male Actors playing lead role in most movies","2fde1d48":"## Correlation between variables","4526e9c9":"## Import Packages","b8b3fdd7":"## Rename the Columns","053c7e7f":"## Most prominent Genres","e4ff9dd0":"## Import Data","4c4f2107":"The TMDB dataset contains arround 5000 movies and TV Series data. This notebook aims at analysing the data, finding reationship between data and fitting a model if there is strong relationship between any of the movies attributes.","05266aa8":"## Production Countries","67375e12":"## Merge Movies and Credits Dataset","899565a7":"## Names of Female Actors","83a7f6e7":"## Converting JSON","726d5cd7":"## Explore Data","7ea0772c":"## Scatterplot between Revenue and Vote Count","4b1eb818":"---","ea941718":"This notebook is organised as follows:\n<ol>\n<li> Import Packages\n<li> Import Data\n<li> Exploration\n<li> Merging Datasets\n<li> Cleaning Data\n<li> Converting JSON to DataFrame\n<li> Data Visualization\n<li> Correlation between the Variables\n<\/ol>"}}