{"cell_type":{"90dde475":"code","9080e19d":"code","84ffcb42":"code","449b02a6":"code","27e95a2c":"code","be72ed32":"code","2f3f577c":"code","3116e831":"code","ebf231db":"code","4a02aae0":"code","2f563833":"code","2c7e84c8":"code","c750edee":"code","83b0d2d1":"code","15e34881":"code","4fc8efb1":"code","2c621b95":"code","809647e4":"code","a8bf42a3":"code","eea2fd39":"code","3ea1fa58":"markdown","c1d8a9b6":"markdown","fc827c9e":"markdown","d0578bb5":"markdown","99d5df68":"markdown","684c06a7":"markdown","61de43bc":"markdown","d3c5330f":"markdown","77a926d1":"markdown","52eea827":"markdown","fd3c66e0":"markdown","c954ad3d":"markdown","0fb53472":"markdown","9a5b0754":"markdown","be7ed2ac":"markdown","61370967":"markdown"},"source":{"90dde475":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9080e19d":"train = pd.read_csv(\"\/kaggle\/input\/carinsurance\/carInsurance_train.csv\")\ntrain.head()","84ffcb42":"train.columns","449b02a6":"train.describe()","27e95a2c":"train.isnull().sum() \/ len(train)","be72ed32":"import seaborn as sns\n\nsns.pairplot(data = train, hue = \"CarInsurance\")","2f3f577c":"yeni_degiskenler = []\n\ni = 0\n\nwhile i < 4001:\n    \n    if train[\"LastContactMonth\"][i] == \"jan\":\n        yeni_degiskenler.append(1)\n    elif train[\"LastContactMonth\"][i] == \"feb\":\n        yeni_degiskenler.append(1)\n    elif train[\"LastContactMonth\"][i] == \"mar\":\n        yeni_degiskenler.append(1)\n    elif train[\"LastContactMonth\"][i] == \"apr\":\n        yeni_degiskenler.append(2)\n    elif train[\"LastContactMonth\"][i] == \"may\":\n        yeni_degiskenler.append(2)\n    elif train[\"LastContactMonth\"][i] == \"jun\":\n        yeni_degiskenler.append(2)\n    elif train[\"LastContactMonth\"][i] == \"jul\":\n        yeni_degiskenler.append(3)\n    elif train[\"LastContactMonth\"][i] == \"aug\":\n        yeni_degiskenler.append(3)\n    elif train[\"LastContactMonth\"][i] == \"sep\":\n        yeni_degiskenler.append(3)\n    elif train[\"LastContactMonth\"][i] == \"oct\":\n        yeni_degiskenler.append(4)\n    elif train[\"LastContactMonth\"][i] == \"nov\":\n        yeni_degiskenler.append(4)\n    elif train[\"LastContactMonth\"][i] == \"dec\":\n        yeni_degiskenler.append(4)\n        \n    i += 1","3116e831":"len(yeni_degiskenler)","ebf231db":"konusma = pd.to_datetime(train[\"CallEnd\"]) - pd.to_datetime(train[\"CallStart\"])\n\nkonusma = pd.to_numeric(konusma) \/ 1000000000\nkonusma = pd.DataFrame(konusma)\n\na = pd.concat([train.CarInsurance, konusma], names = (\"sonuc\", \"saniye\"), axis = 1)\n\nsns.pairplot(data = a, hue = \"CarInsurance\")\n\nkonusma.loc[(konusma[0] >= 0) & (konusma[0] <= 126), \"dakika\"] = 1\nkonusma.loc[(konusma[0] > 126) & (konusma[0] <= 232), \"dakika\"] = 2\nkonusma.loc[(konusma[0] > 232) & (konusma[0] <= 460), \"dakika\"] = 3\nkonusma.loc[(konusma[0] > 460) & (konusma[0] <= 3253), \"dakika\"] = 4","4a02aae0":"dakika = pd.DataFrame(konusma[\"dakika\"])\nyeni_degiskenler = pd.DataFrame(yeni_degiskenler, columns = [\"quarter\"])\n\nyeni_degiskenler = pd.concat([yeni_degiskenler, dakika], axis = 1)\nyeni_degiskenler.head()","2f563833":"i = 0\nyas = []\n\nwhile i < 4000:\n    \n    if train[\"Age\"][i] > 0 and train[\"Age\"][i] < 26:\n        yas.append(1)\n    elif train[\"Age\"][i] >=26 and train[\"Age\"][i] < 35:\n        yas.append(2)\n    elif train[\"Age\"][i] >= 35 and train[\"Age\"][i] < 45:\n        yas.append(3)\n    elif train[\"Age\"][i] >= 45:\n        yas.append(4)\n        \n    i += 1\n\nyas = pd.DataFrame(yas, columns = [\"yas\"])\nyeni_degiskenler = pd.concat([yeni_degiskenler, yas], axis = 1)\nyeni_degiskenler.head()","2c7e84c8":"train = pd.concat([yeni_degiskenler, train], axis = 1)\ntrain.head()","c750edee":"management = train.loc[train[\"Job\"] == \"management\" ]\nblue_collar = train.loc[train[\"Job\"] == \"blue-collar\"]\ntechnician = train.loc[train[\"Job\"] == \"technician\"]\nadmin = train.loc[train[\"Job\"] == \"admin.\"]\nservices = train.loc[train[\"Job\"] == \"services\"]\nretired = train.loc[train[\"Job\"] == \"retired\"]\nself_employed = train.loc[train[\"Job\"] == \"self-employed\"]\nstudent = train.loc[train[\"Job\"] == \"student\"]\n\nmanagement[\"Education\"].value_counts() # tertiary 751 \/ secondary 94 \/ primary 22     \nblue_collar[\"Education\"].value_counts() # secondary 430 \/ primary 281 \/ tertiary 17\ntechnician[\"Education\"].value_counts() # secondary 446 \/ tertiary 177 \/ primary 16\nadmin[\"Education\"].value_counts() # secondary 374 \/ tertiary 62 \/ primary 9            \nservices[\"Education\"].value_counts() # secondary 269 \/ primary 27 \/ tertiary 25      \nretired[\"Education\"].value_counts() # secondary 100 \/ primary 93 \/ tertiary 37\nself_employed[\"Education\"].value_counts() # tertiary 84 \/ secondary 43 \/ primary 6\nstudent[\"Education\"].value_counts() # secondary 67 \/ tertiary 31 \/ primary 8\n\nmanagement[\"Age\"].mean() #40\nblue_collar[\"Age\"].mean() #40\ntechnician[\"Age\"].mean() #39\nadmin[\"Age\"].mean() # 39\nservices[\"Age\"].mean() # 38\nretired[\"Age\"].mean() #63\nself_employed[\"Age\"].mean() # 41\nstudent[\"Age\"].mean() #25\n\ntrain[\"Education\"] = train[\"Education\"].replace(np.nan, \"?\")\n\n\ni = 0\n\nwhile i < 4000:\n    if train[\"Age\"][i] >= 35 and train[\"Job\"][i] == \"management\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"tertiary\")\n    elif train[\"Age\"][i] < 35 and train[\"Job\"][i] == \"management\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"secondary\")\n    i += 1\n\ni = 0\n\nwhile i < 4000:\n    if train[\"Job\"][i] == \"admin.\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"secondary\")\n    \n    i += 1\n\ni = 0\n\nwhile i < 4000:\n    if train[\"Job\"][i] == \"services\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"secondary\")\n    \n    i += 1\n\ni = 0\n\nwhile i < 4000:\n    if train[\"Job\"][i] == \"services\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"secondary\")\n    \n    i += 1\n\ni = 0\n\nwhile i < 4000:\n    if train[\"Age\"][i] >= 28 and train[\"Job\"][i] == \"student\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"tertiary\")\n    elif train[\"Age\"][i] < 28 and train[\"Job\"][i] == \"student\" and train[\"Education\"][i] == \"?\":\n        train[\"Education\"][i] = train[\"Education\"][i].replace(\"?\", \"secondary\")\n    i += 1\n\ntrain[\"Education\"] = train[\"Education\"].replace(\"?\", \"secondary\")","83b0d2d1":"train.isnull().sum()","15e34881":"train[\"Communication\"] = train[\"Communication\"].fillna(\"cellular\")\ntrain.isnull().sum()","4fc8efb1":"train = train.drop(\"Outcome\", axis = 1)\ntrain = train.drop(\"CallEnd\", axis = 1)\ntrain = train.drop(\"CallStart\", axis = 1)\ntrain = train.drop(\"Id\", axis = 1)\n\ntrain = train.dropna()\ntrain.isnull().sum()","2c621b95":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ncols = [\"Job\", \"Marital\", \"Education\", \"Communication\", \"LastContactMonth\"]\n\nfor i in cols:\n    train[i] = le.fit_transform(train[i])\n\n\nx = train.iloc[:, 0:17]\ny = train.iloc[:, 17:18]\n\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 42)\n","809647e4":"from sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(x_train, y_train)\nrf_tahmin = rf.predict(x_test)\n\nrf_skor = accuracy_score(y_test, rf_tahmin)\nrf_skor","a8bf42a3":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier()\nxgb.fit(x_train, y_train)\nxgb_tahmin = xgb.predict(x_test)\naccuracy_score(y_test, xgb_tahmin)","eea2fd39":"from lightgbm import LGBMClassifier\n\nlgb = LGBMClassifier()\nlgb.fit(x_train, y_train)\nlgb_tahmin = lgb.predict(x_test)\naccuracy_score(y_test, lgb_tahmin)","3ea1fa58":"Education i\u00e7indeki bo\u015f verileri doldurmak i\u00e7in ya\u011ft\u0131\u011f\u0131m \u015fey \u015fu benim elimde ki\u015filerin meslekleri ve ya\u015flar\u0131 var e\u011fer ayn\u0131 mesle\u011fe sahip insalar\u0131 datadan \u00e7ekersem bunlar\u0131n a\u011f\u0131rl\u0131kl\u0131 olarak hangi e\u011fitim d\u00fczeyinde olduklar\u0131 ve e\u011fitim d\u00fczeyinin ya\u015flara da\u011f\u0131l\u0131m\u0131 gibi \u00f6nemli bilgileri el edebilirim \u00f6rne\u011fin i\u015fi manager olanlar\u0131n b\u00fcy\u00fck \u00e7o\u011funlu\u011fu tertiary seviyesinde e\u011fitime sahip olduklar\u0131n\u0131 varsay\u0131l\u0131m (ki \u00f6yle) fakat bir yandan da ya\u015f\u0131 25-30 olup e\u011fitimi tertiary bile olsa mesle\u011fi manager olamayacak (\u00e7\u00fcnk\u00fc hen\u00fcz gen\u00e7ler) insanlar olacakt\u0131r veya ayn\u0131 \u015fekilde ya\u015f\u0131 65 olanlar genellikle tertiary e\u011fitim durumu olsa bile retired olarak kar\u015f\u0131m\u0131za \u00e7\u0131kacaklar bunun i\u00e7in education s\u00fct\u00fcnundaki bo\u015fluklar\u0131 hem meslek hemde ya\u015f bilgileri ile beraber doldurman\u0131n daha do\u011fru olaca\u011f\u0131na inan\u0131yorum.","c1d8a9b6":"\u015eimdi de ya\u015flar\u0131 skala edelim.","fc827c9e":"Elimizdeki data da Id numaralar\u0131 dahil 20 de\u011fi\u015fken var bu de\u011fi\u015fkenler ya\u015f, medeni durum, e\u011fitim durumu, g\u00f6r\u00fc\u015fme ba\u015flama ve biti\u015f zamanlar\u0131 gibi detayl\u0131 bilgiler dataset'in a\u00e7\u0131klamalar\u0131nda mevcut. Elimizdeki de\u011fi\u015fkenleri g\u00f6rmek ve bu de\u011fi\u015fkenler hakk\u0131nda basit bilgilere sahip olmak i\u00e7in;","d0578bb5":"Asl\u0131nda buras\u0131 bize \u00f6nemli bir \u015fey s\u00f6yl\u00fcyor. Alttaki grafikte g\u00f6r\u00fclen \u015fey e\u011fer konu\u015fma s\u00fcresi k\u0131sa ise hedef de\u011fi\u015fken cevab\u0131 0 olmas\u0131 daha muhtemel tersi yani konu\u015fma s\u00fcresi uzun ise cevab\u0131n 1 olmas\u0131 daha muhtemel gibi.","99d5df68":"Aylar\u0131 d\u00f6nemlere \u00e7evirdikten sonra konu\u015fma s\u00fcrelerini hesaplamak i\u00e7in:","684c06a7":"Merhaba!\n\nBu \u00e7al\u0131\u015fma sayfas\u0131nda verilen \u00e7e\u015fitli m\u00fc\u015fteri bilgilerine dayanarak m\u00fc\u015fterilerin kasko sigortas\u0131 al\u0131p almayaca\u011f\u0131n\u0131 tahmin etmeye \u00e7al\u0131\u015faca\u011f\u0131m.\n\nFikir ve yorumlar\u0131n\u0131z benim i\u00e7in de\u011ferlidir.\n","61de43bc":"LIGHTGBM","d3c5330f":"Communacation de\u011fi\u015fkenindeki bo\u015flar\u0131 doldurmak i\u00e7in daha basit bir yol izleyece\u011fim \u00e7\u00fcnk\u00fc bakt\u0131\u011f\u0131m zaman \u015f\u00f6yle bir sonu\u00e7 \u00e7\u0131k\u0131yor.\n\nGenel olarak telefon kullan\u0131lm\u0131yor h\u00fccresel veri daha fazla ve telefonu ya\u015fl\u0131lar daha fazla kullan\u0131yor fakat bu kullan\u0131m oran\u0131 ya\u015fl\u0131larda bile az ya\u015fl\u0131lar\u0131n %60'\u0131ndan fazlas\u0131 cellular kullan\u0131yor. Bu y\u00fczden mant\u0131kl\u0131 bir ayr\u0131m bulamad\u0131\u011f\u0131m i\u00e7in t\u00fcm bo\u015fluklara cellular yerle\u015ftirdim ve job k\u0131sm\u0131ndaki 19 bo\u015f sat\u0131r\u0131 ve outcome, \u0131d gibi geresiz de\u011fi\u015fkenleri datadan \u00e7\u0131kard\u0131m.","77a926d1":"Art\u0131k bo\u015f veri kalmad\u0131 yeni de\u011fi\u015fkenler bulup bunlar\u0131 dataya ekledik \u015fimdi model kurmak i\u00e7in haz\u0131rl\u0131klar\u0131 yapabilirim.","52eea827":"XGBOOOST","fd3c66e0":"**AYLAR**","c954ad3d":"**MODELLER**","0fb53472":"Veride en fazla bo\u015f sat\u0131rlar Outcome de\u011fi\u015fkeninde var model kurmadan \u00f6nce veriyi daha iyi hale getirmek i\u00e7in a\u015fa\u011f\u0131daki ad\u0131mlar\u0131 uygulayaca\u011f\u0131m.\n\n 1- \u00d6nce aylar\u0131n bulundu\u011fu LastContactMonth de\u011fi\u015fkenini ayl\u0131klardan d\u00f6nemlere \u00e7evirece\u011fim bir \u015fekilde mevsimsellik var m\u0131 yok mu hangi mevsimlerde ortalama sat\u0131\u015f artm\u0131\u015f veya azalm\u0131\u015f g\u00f6rmek i\u00e7in.\n \n 2- Konu\u015fma ba\u015flama ve biti\u015f s\u00fcrelerini birbirlerinden \u00e7\u0131kar\u0131p bir skala haline getirece\u011fim. Konu\u015fma s\u00fcresinin kasko sigortas\u0131na etkisi var m\u0131 yok mu konu\u015fma uzad\u0131k\u00e7a hedef de\u011fi\u015fkenim ne oluyor g\u00f6rmek i\u00e7in. Bunu yapt\u0131ktan sonra bu iki de\u011fi\u015fkeni datadan ataca\u011f\u0131m.\n \n 3- Ya\u015flar\u0131 ayn\u0131 \u015fekilde bir skalaya getirip gen\u00e7, orta ya\u015fl\u0131, ya\u015fl\u0131 vs gibi gruplayaca\u011f\u0131m.\n \n 4- Outcome de\u011fi\u015fkenini datadan \u00e7\u0131karaca\u011f\u0131m \u00e7\u00fcnk\u00fc %76's\u0131 bo\u015f, Job de\u011fi\u015fkeni bo\u015f olanlar\u0131 silebilirim \u00e7\u00fcnk\u00fc az miktarda bir veri fakat education i\u00e7in hem ya\u015f hemde meslek bilgilerini kullanarak ki\u015filerin e\u011fitim durumu tahmin etmem daha iyi olur.\n \n 5- T\u00fcm de\u011fi\u015fkenleri encode edip veriyi ba\u011f\u0131ml\u0131 ba\u011f\u0131ms\u0131z de\u011fi\u015fken olarak b\u00f6l\u00fcp modellemeye haz\u0131r hale getirece\u011fim.\n \n Bu i\u015flmelere ge\u00e7meden \u00f6nce data hakk\u0131nda daha fazla bilgiye sahip olmak i\u00e7in pairplot grafi\u011fine bak\u0131labilir.\n \n ","9a5b0754":"RANDOM FOREST","be7ed2ac":"\u00c7\u0131kar\u0131lan bu 3 yeni de\u011fi\u015fkeni train'in i\u00e7ine koyma","61370967":"E\u011fer modele yeni de\u011fi\u015fkenler eklemeyip sadece oldu\u011fu gibi bir model kursayd\u0131k %66 - %70 aras\u0131 bir accuracy elde etmi\u015f olacakt\u0131k ama yeni de\u011fi\u015fkenler ve bo\u015f sat\u0131rlar\u0131 doldurma i\u015flmeleri ile tune etmeden dahai %83 gibi skorlar elde edebiliyoruz.\n\nModel ba\u015far\u0131s\u0131n\u0131 daha da artt\u0131kmak i\u00e7in:\n\nTune i\u015flemi denenebilir.\nYeni de\u011fi\u015fkenlerin skalalar\u0131 de\u011fi\u015ftirilerek denenebilir.\nFeature Selection i\u015flemi yap\u0131labilir. \u00d6rnek i\u00e7in --> [https:\/\/www.kaggle.com\/alpertemel\/mobile-price-classification-atemel](http:\/\/)\n\nOkudu\u011funuz i\u00e7in te\u015fekk\u00fcrler.\nTekrar g\u00f6r\u00fc\u015fmek \u00fczere :))"}}