{"cell_type":{"37d6c1cd":"code","451941af":"code","57dae402":"code","211ca627":"code","3681ba78":"code","fc346b7e":"code","7e11c3f3":"code","be6c7e96":"code","18d1e01e":"code","128c4e6f":"code","52bb5eb6":"code","1a28dcb0":"markdown","2fdf7ee0":"markdown","9359259c":"markdown","0fc773bb":"markdown","7645632c":"markdown","81dad613":"markdown","5e593903":"markdown","9c55f36e":"markdown","3964aa17":"markdown","70ea9a7b":"markdown","d9696adc":"markdown"},"source":{"37d6c1cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","451941af":"import pandas as pd\n\n#Examine the first few rows of ad_clicks.\nad_clicks = pd.read_csv('\/kaggle\/input\/ad-clicks\/ad_clicks.csv')\nprint(ad_clicks.head())\n\n\n\n","57dae402":"most_views = ad_clicks.groupby('utm_source').count().user_id.reset_index()\nprint(most_views)","211ca627":"ad_clicks['is_click'] = ~ad_clicks['ad_click_timestamp'].isnull()\nprint(ad_clicks.head())\n","3681ba78":"clicks_by_source = ad_clicks.groupby(['utm_source','is_click']).user_id.count().reset_index()\nprint(clicks_by_source)\n","fc346b7e":"clicks_pivot =clicks_by_source.pivot(\n  columns ='is_click',\n  index ='utm_source',\n  values='user_id'\n).reset_index()\nprint(clicks_pivot)","7e11c3f3":"clicks_pivot['percent_clicked'] = clicks_pivot[True] \/ (clicks_pivot[True] +  clicks_pivot[False])*100\nprint(clicks_pivot)","be6c7e96":"print(ad_clicks.groupby('experimental_group').user_id.count().reset_index())\n","18d1e01e":"print(ad_clicks.groupby(['experimental_group','is_click']).user_id.count().reset_index().pivot(\n  columns = 'is_click',\n  index ='experimental_group',\n  values ='user_id'\n).reset_index())","128c4e6f":"a_clicks = ad_clicks[ad_clicks.experimental_group == 'A']\nb_clicks = ad_clicks[ad_clicks.experimental_group == 'B']\n","52bb5eb6":"\na_clicks_pivot= a_clicks.groupby(['is_click','day']).user_id.count().reset_index().pivot(\n  columns = 'is_click',\n  index ='day',\n  values = 'user_id'\n).reset_index()\n\na_clicks_pivot['percentage']=a_clicks_pivot[True]\/(a_clicks_pivot[True]+a_clicks_pivot[False])\nprint(a_clicks_pivot)\n\nb_clicks_pivot= b_clicks.groupby(['is_click','day']).user_id.count().reset_index().pivot(\n  columns = 'is_click',\n  index ='day',\n  values = 'user_id'\n).reset_index()\n\nb_clicks_pivot['percentage']=b_clicks_pivot[True]\/(b_clicks_pivot[True]+b_clicks_pivot[False])\nprint(b_clicks_pivot)","1a28dcb0":"# The Product Manager for the A\/B test thinks that the clicks might have changed by day of the week.\n\n## Start by creating two DataFrames: a_clicks and b_clicks, which contain only the results for A group and B group, respectively.","2fdf7ee0":"# Q. Your manager wants to know which ad platform is getting you the most views.\n\n## How many views (i.e., rows of the table) came from each utm_source?\n","9359259c":"# By comparing the above table we can say that Experiment A is more effective than experiment B","0fc773bb":"# Analyzing an A\/B Test\n## The column experimental_group tells us whether the user was shown Ad A or Ad B.\n\n## Were approximately the same number of people shown both adds?","7645632c":"# Create a new column in clicks_pivot called percent_clicked which is equal to the percent of users who clicked on the ad from each utm_source.\n\n## Was there a difference in click rates for each source?","81dad613":"# Using the column is_click that we defined earlier, check to see if a greater percentage of users clicked on Ad A or Ad B.","5e593903":"# For each group (a_clicks and b_clicks), calculate the percent of users who clicked on the ad by day.","9c55f36e":"# Now let\u2019s pivot the data so that the columns are is_click (either True or False), the index is utm_source, and the values are user_id.\n\n## Save your results to the variable clicks_pivot.","3964aa17":"# Q. If the column ad_click_timestamp is not null, then someone actually clicked on the ad that was displayed. \n## Create a new column called is_click, which is True if ad_click_timestamp is not null and False otherwise.","70ea9a7b":"# Compare the results for A and B. What happened over the course of the week?\n\n## Do you recommend that your company use Ad A or Ad B?\n","d9696adc":"# Q. We want to know the percent of people who clicked on ads from each utm_source.Start by grouping by utm_source and is_click and counting the number of user_id\u2018s in each of those groups. Save your answer to the variable clicks_by_source."}}