{"cell_type":{"7d9e890f":"code","0e02b7ad":"code","2420ed5c":"code","37aa436b":"code","bfe99c7a":"code","de41f4e5":"code","2b7b87cf":"code","c39148f7":"code","2dac4b40":"code","04f9deab":"code","38d5432a":"code","e97b2d2f":"code","6313b90e":"code","1098c7cd":"code","1851d281":"code","4f599efc":"code","5dbb169f":"code","cf54eb6a":"code","3bc4a5be":"code","936b09ac":"code","c6efc3a0":"code","4c662d38":"code","50dd4dd7":"code","2d08b8ae":"code","14a3a883":"code","2cbe5da9":"code","a80b45e8":"markdown","27f4d9a5":"markdown","ce911dce":"markdown","278be324":"markdown","72d562f5":"markdown","a61860ee":"markdown","bb567f4a":"markdown","370c43aa":"markdown","378df8fb":"markdown","28018aab":"markdown","4e9940d9":"markdown"},"source":{"7d9e890f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nlist_fn = []\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        list_fn.append(os.path.join(dirname, filename))\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e02b7ad":"#create df\ndf_stocks = pd.read_csv(list_fn[0])\ndf_prices = pd.read_csv(list_fn[1])","2420ed5c":"df_stocks","37aa436b":"df_prices","bfe99c7a":"# df_stocks analysis\nprint(df_stocks.keys())\n# get numeric data\nnum_cols = df_stocks._get_numeric_data().columns\nprint(num_cols) #no numeric columns in df_stocks\n\n#df_prices analysis\nprint(df_prices.keys())\n# get numeric data\nnum_cols = df_prices._get_numeric_data().columns\nprint(num_cols) #open,close,adj_close,low,high,volume are num_cols\ncat_cols = list(set(df_prices.columns) - set(num_cols))\nprint(cat_cols) #date,ticker are cat_cols","de41f4e5":"# of missing data in df_stocks\nprint(\"df_stocks\")\nprint(df_stocks.isnull().sum().sort_values(ascending=False))\nprint()\nprint(\"% data missing\")\nprint(df_stocks.isnull().sum().sort_values(ascending=False)\/len(df_stocks)*100)\n\nprint()\nprint(\"df_prices\")\nprint(df_prices.isnull().sum().sort_values(ascending=False))\nprint()\nprint(\"% data missing\")\nprint(df_prices.isnull().sum().sort_values(ascending=False)\/len(df_prices)*100)","2b7b87cf":"# create df with missing values\ndf_null = df_stocks[df_stocks.isnull().any(axis=1)]\ndf_null\n\n","c39148f7":"# Look at unique values in each df\nprint(\"df_stocks\")\nfor i in df_stocks.keys():\n    print(i, \": \", len(pd.unique(df_stocks[i])))\nprint()\nprint(\"df_prices\")\nfor i in cat_cols: #cat_cols is categorical values in df_prices\n    print(i, \": \", len(pd.unique(df_prices[i])))","2dac4b40":"#find common tickers\ncommon_tickers = list(set(df_stocks.ticker) & set(df_prices.ticker))\nprint(len(common_tickers))\n\n#all tickers in df_prices are in df_stocks","04f9deab":"# decades to look at\n# 1970-1980 = 1\n# 1981-1990 = 2\n# 1991-2000 = 3\n# 2001-2010 = 4\n# 2011-2018 = 5\n\n# convert date column to datetime\ndf_prices['date'] = pd.to_datetime(df_prices['date'])\n\n# boolean mask to find rows that are in start date and end date range\n# create 5 different dfs from each decade of interest for df_prices\nmask = (df_prices['date'] > '1970-01-01') & (df_prices['date'] <= '1980-12-31')\ndf_prices1 = df_prices.loc[mask]\n\nmask = (df_prices['date'] > '1981-01-01') & (df_prices['date'] <= '1990-12-31')\ndf_prices2 = df_prices.loc[mask]\n\nmask = (df_prices['date'] > '1991-01-01') & (df_prices['date'] <= '2000-12-31')\ndf_prices3 = df_prices.loc[mask]\n\nmask = (df_prices['date'] > '2001-01-01') & (df_prices['date'] <= '2010-12-31')\ndf_prices4 = df_prices.loc[mask]\n\nmask = (df_prices['date'] > '2011-01-01') & (df_prices['date'] <= '2018-12-31')\ndf_prices5 = df_prices.loc[mask]\n\n\n","38d5432a":"print(df_prices1)\nprint(df_prices2)\nprint(df_prices3)\nprint(df_prices4)\nprint(df_prices5)","e97b2d2f":"# common tickers\n#print(common_tickers)\n","6313b90e":"common_tickers = pd.Series(common_tickers)\ncommon_tickers.index += 1","1098c7cd":"df_prices1.loc[df_prices1['ticker']=='AAPL','close']\ndf_prices1.loc[df_prices1['ticker']=='AAPL','date']","1851d281":"import matplotlib.pyplot as plt\ntotal_tickers = pd.unique(df_prices1['ticker'])\ntotal_tickers_num = len(pd.unique(df_prices1['ticker']))\n'''fig=plt.figure(figsize=(30,400))\ncolumns=5\nrows=76\nfor i in range(1,columns*rows+1): #total number of tickers\n    ticker = common_tickers[i]\n    fig.add_subplot(rows,columns,i)\n    x = df_prices1.loc[df_prices1['ticker']== ticker,'date']\n    y = df_prices1.loc[df_prices1['ticker']== ticker,'close']\n    plt.plot(x,y,label = ticker)\n    plt.xticks(rotation = 45)\n    plt.legend(loc='best')\nplt.savefig('df_prices1.png')'''","4f599efc":"'''fig=plt.figure(figsize=(30,400))\ncolumns=5\nrows=76\nfor i in range(1,columns*rows+1): #total number of tickers\n    ticker = common_tickers[i]\n    fig.add_subplot(rows,columns,i)\n    x = df_prices2.loc[df_prices2['ticker']== ticker,'date']\n    y = df_prices2.loc[df_prices2['ticker']== ticker,'close']\n    plt.plot(x,y,label = ticker)\n    plt.xticks(rotation = 45)\n    plt.legend(loc='best')'''","5dbb169f":"'''fig=plt.figure(figsize=(30,400))\ncolumns=5\nrows=76\nfor i in range(1,columns*rows+1): #total number of tickers\n    ticker = common_tickers[i]\n    fig.add_subplot(rows,columns,i)\n    x = df_prices3.loc[df_prices3['ticker']== ticker,'date']\n    y = df_prices3.loc[df_prices3['ticker']== ticker,'close']\n    plt.plot(x,y,label = ticker)\n    plt.xticks(rotation = 45)\n    plt.legend(loc='best')'''","cf54eb6a":"'''fig=plt.figure(figsize=(30,400))\ncolumns=5\nrows=76\nfor i in range(1,columns*rows+1): #total number of tickers\n    ticker = common_tickers[i]\n    fig.add_subplot(rows,columns,i)\n    x = df_prices4.loc[df_prices4['ticker']== ticker,'date']\n    y = df_prices4.loc[df_prices4['ticker']== ticker,'close']\n    plt.plot(x,y,label = ticker)\n    plt.xticks(rotation = 45)\n    plt.legend(loc='best')'''","3bc4a5be":"'''fig=plt.figure(figsize=(30,400))\ncolumns=5\nrows=76\nfor i in range(1,columns*rows+1): #total number of tickers\n    ticker = common_tickers[i]\n    fig.add_subplot(rows,columns,i)\n    x = df_prices5.loc[df_prices5['ticker']== ticker,'date']\n    y = df_prices5.loc[df_prices5['ticker']== ticker,'close']\n    plt.plot(x,y,label = ticker)\n    plt.xticks(rotation = 45)\n    plt.legend(loc='best')'''","936b09ac":"import numpy as np\nprint(df_prices1['close'].max())\nprint(df_prices1['close'].idxmax())\nprint(df_prices1.loc[[14259171]])\n","c6efc3a0":"df_stocks.loc[df_stocks['ticker'] == 'SPB']","4c662d38":"# Look at 75th percentile first\n# Find growth of stocks (% increase) in 75th percentile and above\n#1970s\nprices1_1970 = df_prices1[df_prices1.date < '1970-12-31']\nprices1_1980 = df_prices1[df_prices1.date > '1979-12-31']\ncommon_tickers1 = list(set(prices1_1970.ticker) & set(prices1_1980.ticker))\nprint(common_tickers1)\n\n","50dd4dd7":"#print(prices1_1970[prices1_1970.ticker.isin(common_tickers1)])\n#print(prices1_1980[prices1_1980.ticker.isin(common_tickers1)].close)\n\ncommon_tickers1_1970 = np.array(prices1_1970[prices1_1970.ticker.isin(common_tickers1)].close)\ncommon_tickers1_1980 = np.array(prices1_1980[prices1_1980.ticker.isin(common_tickers1)].close)\ngrowth1 = (common_tickers1_1980-common_tickers1_1970)\/common_tickers1_1970\np75 = np.percentile(growth1,75) #1.41 --> 141% growth\np25 = np.percentile(growth1,25) #-0.067 --> - 6.7% decrease\ngrowth1_df = pd.Series(growth1)\np75_growth1 = growth1_df[growth1>=p75]\np75_growth1_tickers = prices1_1980[prices1_1980.ticker.isin(common_tickers1)].iloc[p75_growth1.index].ticker.unique()\nprint(p75_growth1_tickers)","2d08b8ae":"# find their industries\ndf_stocks.loc[df_stocks.ticker.isin(p75_growth1_tickers)]","14a3a883":"#prices1_1980.iloc[p75_growth1.index]\n# who had greatest growth?\nprint(growth1_df.max())\nprint(growth1_df.idxmax())\nprint(prices1_1970[prices1_1970.ticker.isin(common_tickers1)].iloc[4936])\nprint(prices1_1980[prices1_1980.ticker.isin(common_tickers1)].iloc[4936])\n# BA (Boeing) had greatest amount of growth --> 1273%","2cbe5da9":"#print(prices1_1970[prices1_1970.ticker.isin(common_tickers1)].loc[prices1_1970['ticker']=='MO'])\n#print(prices1_1980[prices1_1980.ticker.isin(common_tickers1)].loc[prices1_1980['ticker']=='MO'])","a80b45e8":"### df_stocks provide ticker symbol, exchange, full name, sector, and industry[](http:\/\/)","27f4d9a5":"### Look at growth for each of those companies.","ce911dce":"### Look at 1970-1980 data","278be324":"## Look for missing data","72d562f5":"### Run some statistics. Look at growth of stocks over the decades. Isolate and focus on growth in 75th and 100th percentile.","a61860ee":"### df_stocks has 1440 sector and industry values missing \n### df_prices has 0 values missing","bb567f4a":"### Now lets look at df_prices and % of growth in closing price vs adjusted closing price of every ticker in each decade","370c43aa":"### df_stocks has 5 attributes\n### df_prices has 8 attributes, 2 of which are categorical and 6 are numerical\n","378df8fb":"### Stocks that had more than 140% growth from 1970 to 1980 were: XOM, MCD, CAT, CVX, HON, HPQ, UTX, MO, BA","28018aab":"### df_prices shows ticker symbol, open, close, adjusted closing price, low, high, volume for each day\n\n#### <span style=\"color:blue\"> adjusted closing price = closing price analyzes the stock's dividends, stock splits and new stock offerings to determine an adjusted value. The adjusted closing price reflects the change in stock value caused by new offerings from the corporation<\/span>\n\n#### <span style=\"color:red\"> volume = how much of a given financial asset has traded in a period of time<\/span>","4e9940d9":"#### number of unique tickers in df_stocks and df_prices do not match\n#### need to create df with matching tickers in both df_stocks and df_prices"}}