{"cell_type":{"bffe8a9a":"code","403680ca":"code","12888046":"code","eddca1c3":"code","d55c7f03":"code","859754f1":"code","f76c6039":"code","1de05128":"code","2c0c2dd1":"code","cec51a41":"code","758464ff":"code","dc33671e":"code","20042c75":"code","9311b1df":"code","5acc4460":"code","35d3d81c":"code","6c974fea":"code","42be1e72":"code","d2bb39c2":"code","88fdde1f":"code","44a392cb":"code","7e33d24f":"markdown","754e0f2a":"markdown","c96b3028":"markdown","20708894":"markdown","93e95534":"markdown","589ff0d6":"markdown","e2c56ef2":"markdown","046875bd":"markdown","d184102b":"markdown","fd6d9552":"markdown","1b41a5ba":"markdown","55d1a1bf":"markdown","9affa504":"markdown","238f03d5":"markdown","391a29c4":"markdown","f0eea91f":"markdown"},"source":{"bffe8a9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","403680ca":"url_models_list=['https:\/\/auto.ru\/cars\/bmw\/02\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/1er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/2er\/used\/',       \n'https:\/\/auto.ru\/cars\/bmw\/2activetourer\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/2grandtourer\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/2000_c_cs\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/3er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/3_15\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/321\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/326\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/340\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/4\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/5er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/6er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/7er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/8er\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/e3\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/i3\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/i8\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/m2\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/m3\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/m4\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/m5\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/m6\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x1\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x2\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x3\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x3_m\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x4\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x4_m\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x5\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x5_m\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x6\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x6_m\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/x7\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/z1\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/z3\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/z3m\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/z4\/used\/',\n'https:\/\/auto.ru\/cars\/bmw\/z8\/used\/']","12888046":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438.\n\nfrom bs4 import BeautifulSoup    \nimport requests\n\ndef numPage(adress):\n    response=requests.get(adress)\n    page=BeautifulSoup(response.text, 'html.parser')\n    total =  page.find_all(class_=\"Button Button_color_whiteHoverBlue Button_size_s Button_type_link Button_width_default ListingPagination-module__page\")\n    if total == []:\n        return 1\n    else:\n        ccc = str(total[-1])\n        ppp = ccc.find('<span class=\"Button__text\">')\n        uuu = ccc.find('<\/span>')\n        return int(ccc[ppp+27:uuu])","eddca1c3":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 url \u0442\u0435\u043a\u0443\u0445\u0438\u0449 \u043c\u0430\u0448\u0438\u043d BMW \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0445\u0441\u044f \u0432 \u043f\u0440\u043e\u0434\u0430\u0436\u0435.\n\nurl_list=[]\n\ndef allCarsUrls(adress):\n    print(adress)\n    num = numPage(adress)\n    for i in range(1,num):\n        if i% 5 == 0: print(i)\n        adress2 = adress+'?page=' +str(i)\n        response=requests.get(adress2)\n        page=BeautifulSoup(response.text, 'html.parser')\n        total =  page.find_all(class_=\"Link ListingItemTitle-module__link\")\n        for i in total:\n            car=str(i)\n            b = (car.find('href=\"'))\n            c = (car.find('target=\"'))\n            url_list.append(car[b+6:c-2])\n\nfor j in url_models_list:\n    allCarsUrls(j)","d55c7f03":"url_list_df = pd.DataFrame(url_list)\nurl_list_df.to_csv('all_urls.csv',encoding='utf-8-sig', index=False)\n# url_list = (pd.read_csv('all_urls.csv'))\n# url_list = url_list.values.tolist()\n\n# for i in range(len(url_list)):\n#     pppp =  str(url_list[i]).replace(\"['\",'')\n#     pppp = pppp.replace(\"']\",'')\n#     url_list[i] = pppp","859754f1":"from bs4 import BeautifulSoup    \nimport requests\n\ndfForTraining = pd.DataFrame(columns=['bodyType','color','fuelType','model','name','productionDate','vehicleTransmission',\n                                                     'engineDisplacement','enginePower','mileage','\u041f\u0440\u0438\u0432\u043e\u0434','\u0420\u0443\u043b\u044c','\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435',\n                                                     '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u041f\u0422\u0421','\u0422\u0430\u043c\u043e\u0436\u043d\u044f','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435','Price'])\n\n# dfForTraining = pd.read_csv('training_new18000.csv')\n\ndef carsData(adress):\n    dfForFill = pd.DataFrame(index=range(1),columns=['bodyType','color','fuelType','model','name','productionDate','vehicleTransmission',\n                                                     'engineDisplacement','enginePower','mileage','\u041f\u0440\u0438\u0432\u043e\u0434','\u0420\u0443\u043b\u044c','\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435',\n                                                     '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u041f\u0422\u0421','\u0422\u0430\u043c\u043e\u0436\u043d\u044f','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435','Price'])\n    response=requests.get(adress)\n    response.encoding = 'utf-8'\n    page=BeautifulSoup(response.text, 'html.parser')\n    \n    if (page.find_all(class_=\"CardInfo__row CardInfo__row_bodytype\"))!=-1:\n    \n        # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0442\u0438\u043f \u043a\u0443\u0437\u043e\u0432\u0430\n        bodyType = page.find_all(class_=\"CardInfo__row CardInfo__row_bodytype\")\n        bodyType = str(bodyType)\n        b1 = bodyType.find('\/\">')\n        if b1!=-1:\n            b2 = bodyType.find(\"<\/a>\")\n            dfForFill.bodyType = str.lower(bodyType[b1+3:b2])\n\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0446\u0432\u0435\u0442 \u0430\u0432\u0442\u043e\n            color = page.find_all(class_=\"CardInfo__row CardInfo__row_color\")\n            color = str(color)\n            b1 = color.find('\/\">')\n            b2 = color.find(\"<\/a>\")\n            dfForFill.color = str.lower(color[b1+3:b2])\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0442\u043e\u043f\u043b\u0438\u0432\u043e \u0438 \u043b.\u0441.\n            fuelType = page.find_all(class_=\"CardInfo__row CardInfo__row_engine\")\n            fuelType = str(fuelType)\n            if (fuelType.find('\u042d\u043b\u0435\u043a\u0442\u0440\u043e')==-1 and fuelType.find('\u044d\u043b\u0435\u043a\u0442\u0440\u043e')==-1 ):\n                b1 = fuelType.find('\/\">')\n                b2 = fuelType.find(\"<\/a>\")\n                dfForFill.fuelType = str.lower(fuelType[b1+3:b2])\n                c1 = fuelType.find('<div>')\n                pp = fuelType[c1:]\n                c2 = pp.find('\/')\n                dfForFill.engineDisplacement = pp[5:c2-3]\n                ppp = pp[c2+2:]\n                c3 = ppp.find('\/')\n                if c3!=-1:\n                    dfForFill.enginePower = int(ppp[:c3-5])\n                else: dfForFill.enginePower = int('0')\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\n            all_items = page.find_all(class_='Link Link_color_gray CardBreadcrumbs__itemText')\n            model = str(all_items[1])\n            pp1 = model.find('\">')\n            pp2 = model.find('<!--')\n            dfForFill.model = model[pp1+2:pp2]\n            name = str(all_items[4])\n            pp1 = name.find('\">')\n            pp2 = name.find('<!--')\n            dfForFill.name = name[pp1+2:pp2]\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\n            productionDate = page.find_all(class_=\"CardInfo__row CardInfo__row_year\")\n            productionDate = str(productionDate)\n            b1 = productionDate.find('\/\">')\n            b2 = productionDate.find(\"<\/a>\")\n            dfForFill.productionDate = int(productionDate[b1+3:b2])\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0442\u0438\u043f \u0442\u0440\u0430\u043d\u0441\u043c\u0438\u0441\u0441\u0438\u0438\n            vehicleTransmission = page.find_all(class_=\"CardInfo__row CardInfo__row_transmission\")\n            vehicleTransmission = str(vehicleTransmission)\n            b1 = vehicleTransmission.rfind('CardInfo__cell')\n            b2 = vehicleTransmission.rfind('<\/span>')\n            dfForFill.vehicleTransmission = str.lower(vehicleTransmission[b1+16:b2])\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u0433\n            mileage = page.find_all(class_=\"CardInfo__row CardInfo__row_kmAge\")\n            mileage = str(mileage)\n            b1 = mileage.rfind('CardInfo__cell')\n            b2 = mileage.rfind('<\/span>')\n            mileage2 = mileage[b1+16:b2-3]\n            pp = mileage2.split()\n            if len(pp)>1:\n                cc=mileage2[len(pp[0])]\n                dfForFill.mileage = int(mileage2.replace(cc,''))\n            else: \n                dfForFill.mileage = int(mileage2)\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u041f\u0440\u0438\u0432\u043e\u0434\n            \u041f\u0440\u0438\u0432\u043e\u0434 = page.find_all(class_=\"CardInfo__row CardInfo__row_drive\")\n            \u041f\u0440\u0438\u0432\u043e\u0434 = str(\u041f\u0440\u0438\u0432\u043e\u0434)\n            b1 = \u041f\u0440\u0438\u0432\u043e\u0434.rfind('CardInfo__cell')\n            b2 = \u041f\u0440\u0438\u0432\u043e\u0434.rfind('<\/span>')\n            dfForFill.\u041f\u0440\u0438\u0432\u043e\u0434 = str.lower((\u041f\u0440\u0438\u0432\u043e\u0434[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0420\u0443\u043b\u044c\n            \u0420\u0443\u043b\u044c = page.find_all(class_=\"CardInfo__row CardInfo__row_wheel\")\n            \u0420\u0443\u043b\u044c = str(\u0420\u0443\u043b\u044c)\n            b1 = \u0420\u0443\u043b\u044c.rfind('CardInfo__cell')\n            b2 = \u0420\u0443\u043b\u044c.rfind('<\/span>')\n            dfForFill.\u0420\u0443\u043b\u044c = str.lower((\u0420\u0443\u043b\u044c[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n            \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 = page.find_all(class_=\"CardInfo__row CardInfo__row_state\")\n            \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 = str(\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435)\n            b1 = \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.rfind('CardInfo__cell')\n            b2 = \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435.rfind('<\/span>')\n            dfForFill.\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 = str.lower((\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u043e\u0432\n            \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = page.find_all(class_=\"CardInfo__row CardInfo__row_ownersCount\")\n            if \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b != []:\n                \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = str(\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b)\n                b1 = \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.rfind('CardInfo__cell')\n                b2 = \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.rfind('<\/span>')\n                \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b2 = \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b[b1+16:b2-3]\n                if \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b2[2]=='\u0432':\n                    dfForFill.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = int(\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b2[0])\n                else: \n                    dfForFill.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = int('4')\n            else: dfForFill.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = int('0')\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u041f\u0422\u0421\n            \u041f\u0422\u0421 = page.find_all(class_=\"CardInfo__row CardInfo__row_pts\")\n            \u041f\u0422\u0421 = str(\u041f\u0422\u0421)\n            b1 = \u041f\u0422\u0421.rfind('CardInfo__cell')\n            b2 = \u041f\u0422\u0421.rfind('<\/span>')\n            dfForFill.\u041f\u0422\u0421 = str.lower((\u041f\u0422\u0421[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0438\u043d\u0444\u043e \u043f\u043e \u0442\u0430\u043c\u043e\u0436\u043d\u0435\n            \u0422\u0430\u043c\u043e\u0436\u043d\u044f = page.find_all(class_=\"CardInfo__row CardInfo__row_customs\")\n            \u0422\u0430\u043c\u043e\u0436\u043d\u044f = str(\u0422\u0430\u043c\u043e\u0436\u043d\u044f)\n            b1 = \u0422\u0430\u043c\u043e\u0436\u043d\u044f.rfind('CardInfo__cell')\n            b2 = \u0422\u0430\u043c\u043e\u0436\u043d\u044f.rfind('<\/span>')\n            dfForFill.\u0422\u0430\u043c\u043e\u0436\u043d\u044f = str.lower((\u0422\u0430\u043c\u043e\u0436\u043d\u044f[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0438\u043d\u0444\u043e \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\n            \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 = page.find_all(class_=\"CardInfo__row CardInfo__row_owningTime\")\n            if (\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435==[]):\n                dfForFill.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 = np.NaN                \n            else:\n                \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 = str(\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435)\n                b1 = \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.rfind('CardInfo__cell')\n                b2 = \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435.rfind('<\/span>')\n                dfForFill.\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 = str.lower((\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435[b1+16:b2]))\n\n            # \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u0426\u0435\u043d\u0443\n            Price = page.find_all(class_=\"OfferPriceCaption__price\")\n            if (Price==[]):\n                dfForFill.Price = np.NaN  \n            else:\n                Price = str(Price)\n                Price = (Price[40:Price.find('<\/span>')-2])\n                if len(Price.split())==1:\n                    dfForFill.Price = int(Price)\n                else:\n                    aa = Price.find('\\xa0')\n                    dfForFill.Price = int(Price.replace(Price[aa],''))\n\n        return(dfForFill)\n    else: return(dfForFill)\n\nfor i in range(len(dfForTraining),len(url_list)):\n    if i%100==0: print(i)\n    ppp = carsData(url_list[i])\n    dfForTraining = dfForTraining.append(ppp, ignore_index=True)\n    if i %1000 ==0:\n        dfForTraining.to_csv(('training_new'+str(i)+'.csv'),encoding='utf-8-sig', index=False)","f76c6039":"dfForTraining.dropna(subset=['bodyType','fuelType','Price'],axis=1,inplace = True)\n\ndef modifyFeat(line):\n    if pd.isna(line):\n        return line\n    else:\n        if line.rfind('>')==-1:\n            return line\n        else:\n            pp = line.rfind('>')\n            return(line[pp+1:])\n        \nfor i in dfForTraining.columns:\n    print(i)\n    print(dfForTraining[i].unique())\n            \n            \ndfForTraining.bodyType = dfForTraining.bodyType.apply(modifyFeat)\ndfForTraining.fuelType = dfForTraining.fuelType.apply(modifyFeat)","1de05128":"dfForTraining.to_csv('training_last_new.csv',encoding='utf-8-sig', index=False)","2c0c2dd1":"dfForTraining = pd.read_csv('training_last_new.csv')\n\ndef first(line):\n    return(line.split(' ')[0])\n\ndef ch3to4(line):\n    if line==4: return 3\n    else: return line\n\ndef mult10(line):\n    return(line*10)\n    \ndef preprocTrain(df):\n    df.name = df.name.apply(first)\n    df.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = df.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.apply(ch3to4)\n    df.drop('model',axis = 1, inplace=True)\n    df.engineDisplacement= df.engineDisplacement.apply(mult10)\n    for feature in ['productionDate', 'enginePower','engineDisplacement','mileage', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','Price']:\n        df[feature]=df[feature].astype('int32')\n    return df\n\ndfForTraining = preprocTrain(dfForTraining)\n\n# dfForTraining.head()\ndfForTraining.info()","cec51a41":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nle = LabelEncoder()\n\nle.fit(dfForTraining['bodyType'])\ndfForTraining['bodyType Code'] = le.transform(dfForTraining['bodyType'])\ndfForTraining.drop(['bodyType'],axis = 1, inplace = True)\n\n\nle.fit(dfForTraining['color'])\ndfForTraining['Color Code'] = le.transform(dfForTraining['color'])\ndfForTraining.drop(['color'],axis = 1, inplace = True)\n\nle = LabelEncoder()\nle.fit(dfForTraining['fuelType'])\ndfForTraining['Fuel Code'] = le.transform(dfForTraining['fuelType'])\ndfForTraining.drop(['fuelType'],axis = 1, inplace = True)\n\nle = LabelEncoder()\nle.fit(dfForTraining['name'])\ndfForTraining['name Code'] = le.transform(dfForTraining['name'])\ndfForTraining.drop(['name'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['vehicleTransmission'])\ndfForTraining['Transmission Code'] = le.transform(dfForTraining['vehicleTransmission'])\ndfForTraining.drop(['vehicleTransmission'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['\u041f\u0440\u0438\u0432\u043e\u0434'])\ndfForTraining['\u041f\u0440\u0438\u0432\u043e\u0434 Code'] = le.transform(dfForTraining['\u041f\u0440\u0438\u0432\u043e\u0434'])\ndfForTraining.drop(['\u041f\u0440\u0438\u0432\u043e\u0434'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['\u0420\u0443\u043b\u044c'])\ndfForTraining['\u0420\u0443\u043b\u044c Code'] = le.transform(dfForTraining['\u0420\u0443\u043b\u044c'])\ndfForTraining.drop(['\u0420\u0443\u043b\u044c'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'])\ndfForTraining['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Code'] = le.transform(dfForTraining['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'])\ndfForTraining.drop(['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['\u041f\u0422\u0421'])\ndfForTraining['\u041f\u0422\u0421 Code'] = le.transform(dfForTraining['\u041f\u0422\u0421'])\ndfForTraining.drop(['\u041f\u0422\u0421'],axis = 1, inplace = True)\n\nle.fit(dfForTraining['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'])\ndfForTraining['\u0422\u0430\u043c\u043e\u0436\u043d\u044f Code'] = le.transform(dfForTraining['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'])\ndfForTraining.drop(['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'],axis = 1, inplace = True)","758464ff":"def spl(stra):\n    return(stra.split()[0])\n\nimport pandas as pd\nimport numpy as np\n\npd.set_option('display.max_columns', 500)\n\ndfForTest = pd.read_csv('test.csv')\n\ndef preprocTest(df):\n    df.at[823,'engineDisplacement']='2.0'\n    df.engineDisplacement = df.engineDisplacement.apply(spl).astype('float64')\n    df.engineDisplacement= df.engineDisplacement.apply(mult10)\n    df.enginePower = df.enginePower.apply(spl).astype('float64')\n    df.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b = df.\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b.apply(spl).astype('float64')\n    df.name = df.name.apply(first)\n    df.drop(['brand'], axis = 1, inplace = True)\n    df.drop(['modelDate'], axis = 1, inplace = True)\n    df.drop(['numberOfDoors'], axis = 1, inplace = True)\n    df.drop(['vehicleConfiguration'], axis = 1, inplace = True)\n    df.drop(['description'], axis = 1, inplace = True)\n    df.drop(['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'], axis = 1, inplace = True)\n    df.drop(['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'], axis = 1, inplace = True)\n    df.drop(['id'], axis = 1, inplace = True)\n    for feature in ['productionDate', 'enginePower','engineDisplacement','mileage', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']:\n        df[feature]=df[feature].astype('int32')\n    \n    return df\n\ndfForTest = preprocTest(dfForTest)\ndfForTest.info()","dc33671e":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nle = LabelEncoder()\n\nle.fit(dfForTest['bodyType'])\ndfForTest['bodyType Code'] = le.transform(dfForTest['bodyType'])\ndfForTest.drop(['bodyType'],axis = 1, inplace = True)\n\n\nle.fit(dfForTest['color'])\ndfForTest['Color Code'] = le.transform(dfForTest['color'])\ndfForTest.drop(['color'],axis = 1, inplace = True)\n\nle = LabelEncoder()\nle.fit(dfForTest['fuelType'])\ndfForTest['Fuel Code'] = le.transform(dfForTest['fuelType'])\ndfForTest.drop(['fuelType'],axis = 1, inplace = True)\n\nle = LabelEncoder()\nle.fit(dfForTest['name'])\ndfForTest['name Code'] = le.transform(dfForTest['name'])\ndfForTest.drop(['name'],axis = 1, inplace = True)\n\nle.fit(dfForTest['vehicleTransmission'])\ndfForTest['Transmission Code'] = le.transform(dfForTest['vehicleTransmission'])\ndfForTest.drop(['vehicleTransmission'],axis = 1, inplace = True)\n\nle.fit(dfForTest['\u041f\u0440\u0438\u0432\u043e\u0434'])\ndfForTest['\u041f\u0440\u0438\u0432\u043e\u0434 Code'] = le.transform(dfForTest['\u041f\u0440\u0438\u0432\u043e\u0434'])\ndfForTest.drop(['\u041f\u0440\u0438\u0432\u043e\u0434'],axis = 1, inplace = True)\n\nle.fit(dfForTest['\u0420\u0443\u043b\u044c'])\ndfForTest['\u0420\u0443\u043b\u044c Code'] = le.transform(dfForTest['\u0420\u0443\u043b\u044c'])\ndfForTest.drop(['\u0420\u0443\u043b\u044c'],axis = 1, inplace = True)\n\nle.fit(dfForTest['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'])\ndfForTest['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Code'] = le.transform(dfForTest['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'])\ndfForTest.drop(['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'],axis = 1, inplace = True)\n\nle.fit(dfForTest['\u041f\u0422\u0421'])\ndfForTest['\u041f\u0422\u0421 Code'] = le.transform(dfForTest['\u041f\u0422\u0421'])\ndfForTest.drop(['\u041f\u0422\u0421'],axis = 1, inplace = True)\n\nle.fit(dfForTest['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'])\ndfForTest['\u0422\u0430\u043c\u043e\u0436\u043d\u044f Code'] = le.transform(dfForTest['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'])\ndfForTest.drop(['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'],axis = 1, inplace = True)","20042c75":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics \n\nfrom catboost import CatBoostRegressor\n\nVAL_SIZE   = 0.33\nN_FOLDS    = 10\n\n# CATBOOST\nITERATIONS = 4000\nLR         = 0.05\n\nRANDOM_SEED = 42\nVERSION=3\n\nX = dfForTraining.drop(['Price'],axis=1)\ny = dfForTraining.Price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size = VAL_SIZE, random_state=RANDOM_SEED)\n\ncat_features_ids = np.where(X_train.apply(pd.Series.nunique) < 3000)[0].tolist()\n\nmodel = CatBoostRegressor(iterations = ITERATIONS,\n                          learning_rate = LR,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE']\n                         )\nmodel.fit(X_train, y_train,\n         cat_features=cat_features_ids,\n         eval_set=(X_test, y_test),\n         verbose_eval=100,\n         use_best_model=True,\n         plot=True\n         )","9311b1df":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.\n# \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u0441\u0435 \u0432\u0435\u0441\u044c\u043c\u0430 \u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u043c\u0435\u043d\u044f. \u0414\u0430\u0442\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0435\u0441\u0442\u0435, \u0435\u0441\u043b\u0438 \u0431\u044b \u0431\u044b\u043b\u0430 \u0434\u0430\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u043e \u0431\u044b \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0435\u0449\u0435 \u043b\u0443\u0447\u0448\u0435, \n# \u043d\u043e \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u044d\u0442\u043e\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0431\u044b\u043b\u043e (\u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 auto.ru \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438,\n# \u043d\u043e \u043a\u0430\u043a \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u043e\u0441\u044c \u0432\u044b\u0448\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 :-( ).\n\nfeatures_importances = pd.DataFrame(data = model.feature_importances_, index = X.columns, columns = ['FeatImportant'])\nfeatures_importances.sort_values(by = 'FeatImportant', ascending = False).head(20)","5acc4460":"predict_submission = model.predict(dfForTest)\npredict_submission\nsample_submission = pd.read_csv('sample_submission.csv')\nsample_submission['price'] = predict_submission\nsample_submission.to_csv(f'submission_v3.csv', index=False)\nsample_submission.head(10)","35d3d81c":"def cat_model(y_train, X_train, X_test, y_test):\n    model = CatBoostRegressor(iterations = ITERATIONS,\n                              learning_rate = LR,\n                              eval_metric='MAPE',\n                              random_seed = RANDOM_SEED,)\n    model.fit(X_train, y_train,\n              cat_features=cat_features_ids,\n              eval_set=(X_test, y_test),\n              verbose=False,\n              use_best_model=True,\n              plot=False)\n    \n    return(model)\n\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))\n\nsubmissions = pd.DataFrame(0,columns=[\"sub_1\"], index=sample_submission.index) # \u043a\u0443\u0434\u0430 \u043f\u0438\u0448\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u044b \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nscore_ls = []\nsplits = list(KFold(n_splits=N_FOLDS, shuffle=True, random_state=RANDOM_SEED).split(X, y))\n\nfor idx, (train_idx, test_idx) in tqdm(enumerate(splits), total=N_FOLDS,):\n    # use the indexes to extract the folds in the train and validation data\n    X_train, y_train, X_test, y_test = X.iloc[train_idx], y[train_idx], X.iloc[test_idx], y[test_idx]\n    # model for this fold\n    model = cat_model(y_train, X_train, X_test, y_test,)\n    # score model on test\n    test_predict = model.predict(X_test)\n    test_score = mape(y_test, test_predict)\n    score_ls.append(test_score)\n    print(f\"{idx+1} Fold Test MAPE: {mape(y_test, test_predict):0.3f}\")\n    # submissions\n    submissions[f'sub_{idx+1}'] = model.predict(dfForTest)\n    model.save_model(f'catboost_fold_{idx+1}.model')\n    \nprint(f'Mean Score: {np.mean(score_ls):0.3f}')\nprint(f'Std Score: {np.std(score_ls):0.4f}')\nprint(f'Max Score: {np.max(score_ls):0.3f}')\nprint(f'Min Score: {np.min(score_ls):0.3f}')\n","6c974fea":"sample_submission = pd.read_csv('sample_submission.csv')\nsubmissions['blend'] = (submissions.sum(axis=1))\/len(submissions.columns)\nsample_submission['price'] = submissions['blend'].values\nsample_submission.head(10)\nsample_submission.price = round(sample_submission.price\/10000,0)*10000*0.92\nsample_submission.to_csv(f'submission_blend_v3.csv', index=False)\nsample_submission.head(10)","42be1e72":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom collections import defaultdict\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true))\n\ndef print_regression_metrics(y_true, y_pred):\n    mse = mean_squared_error(y_true, y_pred)\n    rmse = np.sqrt(mse)\n    r2 = r2_score(y_true, y_pred)\n    mae = mean_absolute_error(y_true, y_pred)\n    mape = mean_absolute_percentage_error(y_true, y_pred)\n    print(f'RMSE = {rmse:.2f}, MAE = {mae:.2f}, R-sq = {r2:.2f}, MAPE = {mape:.2f} ')","d2bb39c2":"from sklearn.base import clone\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import ExtraTreeRegressor\n\ndef compute_meta_feature(clf, X_train, X_test, y_train, cv):\n\n    X_meta_train = np.zeros_like(y_train, dtype = np.float32)\n    X_meta_test = np.zeros(len(X_test), dtype=np.float32)\n    for train_fold_index, predict_fold_index in cv.split(X_train):\n        X_fold_train, X_fold_predict = X_train.iloc[train_fold_index], X_train.iloc[predict_fold_index]\n        y_fold_train = y_train[train_fold_index]\n        folded_clf = clone(clf)\n        \n        if type(clf).__name__ == 'CatBoostRegressor':\n            folded_clf.fit(X_fold_train, y_fold_train, cat_features=cat_features_ids, verbose_eval = 100)\n        else:\n            folded_clf.fit(X_fold_train, y_fold_train)\n            \n        X_meta_train[predict_fold_index] = folded_clf.predict(X_fold_predict)\n        print_regression_metrics(X_meta_train[predict_fold_index], y_train.iloc[predict_fold_index])\n        X_meta_test += folded_clf.predict(X_test)\n    X_meta_test = X_meta_test \/ cv.n_splits\n\n    return X_meta_train, X_meta_test\n\n\n\ndef generate_meta_features(classifiers, X_train, X_test, y_train, cv):\n    features = [\n        compute_meta_feature(clf, X_train, X_test, y_train, cv)\n        for clf in tqdm(classifiers)\n    ]\n\n    stacked_features_train = np.stack([\n        features_train for features_train, features_test in features\n        ],axis=-1)\n\n    stacked_features_test = np.stack([\n        features_test for features_train, features_test in features\n        ],axis=-1)\n\n    return stacked_features_train, stacked_features_test","88fdde1f":"X = dfForTraining.drop(['Price'],axis=1)\ny = dfForTraining.Price\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size = VAL_SIZE, random_state=RANDOM_SEED)\n\ncv = KFold(n_splits=5, shuffle=True, random_state=42)\nmodel_rf = RandomForestRegressor(n_estimators=10, random_state=RANDOM_SEED)\nmodel_bet = BaggingRegressor(ExtraTreeRegressor(random_state=RANDOM_SEED))\nmodel_cb = CatBoostRegressor( \n#                           learning_rate = 0.1,\n                          random_seed = 42,\n                          eval_metric='MAPE')\nX_train.reset_index(drop=True,inplace = True)\ny_train.reset_index(drop=True, inplace = True)\nstacked_features_train, stacked_features_test = generate_meta_features([model_rf,model_bet, model], X_train, \n                                                                       dfForTest, y_train, cv)\n\n\nfrom sklearn.linear_model import Ridge\nfinal_model = Ridge(alpha=20).fit(stacked_features_train, y_train)\ny_pred = np.round((final_model.predict(stacked_features_test)\/1000))*1000\n\ndisplay(len(y_pred))\n# print_regression_metrics(y_test, y_pred)","44a392cb":"y_pred_stck = np.round((final_model.predict(stacked_features_test)\/1000))*1000\n\nsample_submission = pd.read_csv('sample_submission.csv')\nsample_submission['price'] =  y_pred_stck\nsample_submission.to_csv(f'submission_stack_v1.csv', index=True)\n\nsample_submission.head(10)","7e33d24f":"\u041d\u0443 \u0438 \u043a \u0421\u0442\u0430\u043a\u0438\u043d\u0433\u0443.","754e0f2a":"\u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u0441\u0435 url. \u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0444\u0430\u0439\u043b \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0438\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u043d\u0435\u0442 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u043f\u0430\u0440\u0441\u0438\u043d\u0433.\n\u0410 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 url \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u043b\u0433\u043e\u0435 \u0432\u0440\u0435\u043c\u044f.","c96b3028":"\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043a \u0434\u043e\u0431\u044b\u0447\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \n\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \"\u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c\". \u0418\u0445 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443.\n\n\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u044b\u0439, \u0438 \u043f\u0435\u0440\u0435\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0432\u0438\u0441\u0430\u0435\u0442 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0437-\u0437\u0430 \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f). \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b, \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u0430\u043d\u0443\u0442\u044c \u043d\u0435 \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430. ","20708894":"\u0417\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b. \u0418 \u0434\u0430\u043b\u0435\u0435 \u0443\u0436\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c, \u0438 \u044d\u0442\u0430\u043f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u043c.","93e95534":"\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u0412 \u0441\u0438\u043b\u0443 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e CatBoost \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 str \u0438 int, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u0442\u043e\u043c\u0443 \u0438\u043b\u0438 \u0438\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443.","589ff0d6":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \n\n\u0411\u0435\u0437 CV \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 15-16%. \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c....","e2c56ef2":"\u041f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a CatBoost.","046875bd":"\u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 str \u0432 int, \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e int.","d184102b":"\u041f\u043e\u0441\u043b\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438\u0437\u0443\u0447\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e, \u0447\u0442\u043e \u043a\u0430\u043a\u0438\u0435\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438\u0441\u044c \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430. \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443.","fd6d9552":"\u0421\u0438\u043b\u044c\u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043b\u0438\u0441\u044c. \u041d\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043f\u043e \u0421\u0442\u0430\u043a\u0438\u043d\u0433\u0443. \u041c\u041e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u043d\u0435 \u0431\u044b\u043b\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","1b41a5ba":"15% \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e. \u041f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c Baseline, \u0447\u0442\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u043e). \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u0430\u043c.","55d1a1bf":"\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u0432\u0438\u0434\u0443 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u043c\u0443 \u043d\u0430\u0448\u0435\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435. \u041f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\n\u0412\u043f\u043e\u043b\u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u044b\u043b \u0431\u044b \u043b\u0443\u0447\u0448\u0435, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0438 \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e \u043d\u0435 \u0431\u044b\u043b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d. \u0414\u0430 \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0436\u043d\u043e \u0441\u043f\u0430\u0440\u0441\u0438\u0442\u044c.\n\n\u0412 \u0441\u0438\u043b\u0443 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e CatBoost \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 str \u0438 int, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u0442\u043e\u043c\u0443 \u0438\u043b\u0438 \u0438\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443.\n\n\u0422\u0430\u043a \u0436\u0435 \u0432 engineDisplacement \u0431\u044b\u043b \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u043e\u0434\u0438\u043d \u0432\u044b\u0431\u0440\u043e\u0441, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0435\u0433\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.","9affa504":"# \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0430\u0432\u0442\u043e \u0432\u044b\u0433\u043e\u0434\u043d\u043e:\n\n\u041d\u0430\u0447\u043d\u0435\u043c \u0441\u043e \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0435\u0448\u0438\u043b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0434\u043b\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438.\n\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u0438\u0434\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d \u0441 \u0441\u0430\u0439\u0442\u0430 auto.ru (\u043e\u0447\u0435\u043d\u044c \u043f\u043e\u0445\u043e\u0436 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432).\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e \u0435\u0433\u043e \u0438 \u0431\u0443\u0434\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u0442\u044c.\n\u0427\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u0438 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0443\u0436\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c BMW, \u0438\u043c\u0438 \u0438 \u0437\u0430\u0439\u043c\u0435\u043c\u0441\u044f.\n\n\u0421\u043f\u0435\u0440\u0432\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a url \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u044f\u043c BMW, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u043d\u0430\u0447\u0435 \u043d\u0430 auto.ru \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0435 99 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 (\u043d\u0435 \u043d\u0430\u0448\u0435\u043b \u043a\u0430\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438).","238f03d5":"\u0414\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 str \u0432 int, \u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e int. ","391a29c4":"\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a CV.","f0eea91f":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \n\n\u0415\u0449\u0435 \u0446\u0435\u043d\u044b \u0431\u044b\u043b\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b (\u043a\u043e\u044d\u0444\u0444 0.92 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435). \u042d\u0442\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435, \u043d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u0418 \u043f\u0440\u0438 \u0440\u0430\u0437\u043d\u0438\u0446\u0435 \u0432 \u043f\u0430\u0440\u0443 \u043c\u0435\u0441\u044f\u0446\u0435\u0432  \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0441\u043a\u0430\u0447\u043a\u0438 \u0446\u0435\u043d (\u0432 \u0440\u0443\u0431\u043b\u044f\u0445) \u0432\u043f\u043e\u043b\u043d\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b.  \n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 12%. \u0421V \u043d\u0435 \u043f\u043b\u043e\u0445 :-)"}}