{"cell_type":{"3532b32b":"code","1f41322e":"code","b39b7253":"code","b09cb826":"code","4cd33343":"code","62b79ee0":"code","0cc62eba":"code","51ac95b1":"code","55be331a":"code","c7417d97":"code","cd9be66d":"code","1b12a0b0":"code","a36622ff":"code","c8377529":"code","a52806d9":"code","0ae9f4cb":"code","db6360b1":"code","84db1979":"code","a784b42f":"code","155e8dc2":"code","bf119a2c":"code","ffdd25fe":"code","8e344d6f":"code","80b66e6c":"code","c8c8444a":"code","54347713":"code","79c2cb9b":"code","9d219870":"code","6b29af4c":"code","8f9b464e":"code","5863cd3c":"code","f6aebbf0":"code","7e05ff3e":"code","0c259c12":"code","f59e4f75":"code","74d47a45":"code","b5df3982":"code","34fcfa5e":"code","bc521b4c":"code","772da075":"code","82c88961":"code","a420f02c":"code","41a8fd64":"code","4dcb5325":"code","2037c844":"code","dbe6c86b":"code","697b3de0":"code","32b0b1a9":"code","e60c9fd2":"code","472754e2":"code","eb34b992":"code","aacebd0a":"code","811a5b09":"code","97dff55a":"code","79d4fee6":"code","e4a38340":"code","20d0a4d0":"code","abcbebcf":"code","c74d971e":"code","f712325e":"code","7759f365":"code","ea5dce39":"code","38fde9d5":"markdown","0abff39d":"markdown","39edf945":"markdown","cd010485":"markdown","0c62494b":"markdown","925ea689":"markdown","94a347d8":"markdown","2b738e8d":"markdown","a99232c8":"markdown","65ae6cd9":"markdown","4e9f57ac":"markdown","78718226":"markdown","9356db4d":"markdown","a016e485":"markdown","769bd2ec":"markdown","3f169d77":"markdown","123b01c0":"markdown","7401ac0b":"markdown","00ebe7c3":"markdown","f519bbf1":"markdown","c1c1e107":"markdown","e96295ce":"markdown","4ea318b3":"markdown","644f7700":"markdown","b5b3df4e":"markdown","330ed91d":"markdown","5289c312":"markdown","1795bdac":"markdown","1268b1b4":"markdown"},"source":{"3532b32b":"import pandas as pd\nimport numpy as np\nimport pickle\nimport itertools","1f41322e":"sample_submission = pd.read_csv('..\/input\/mts-ml-summer-school\/sample_submission.csv')","b39b7253":"interactions = pd.read_csv('..\/input\/mts-ml-summer-school\/interactions.csv')\ninteractions","b09cb826":"duplicates = interactions.duplicated(subset=['user_id', 'item_id'], keep=False)\ninteractions_duplicates = interactions[duplicates].sort_values(by=['user_id', 'start_date'])\ninteractions = interactions[~duplicates]\n\ninteractions_duplicates = interactions_duplicates.groupby(['user_id', 'item_id']).agg({\n    'progress': 'max',\n    'rating': 'max',\n    'start_date': 'min'})\n\ninteractions = interactions.append(interactions_duplicates.reset_index(), ignore_index=True)","4cd33343":"interactions = interactions.drop(columns='start_date')","62b79ee0":"interactions","0cc62eba":"interactions.to_csv('interactions_preprocessed.csv', index=False)","51ac95b1":"items = pd.read_csv('..\/input\/mts-ml-summer-school\/items.csv')\nitems","55be331a":"items = items.drop(columns=['authors', 'title'])","c7417d97":"unique_items = []\n    \nfor item in items['genres'].unique():\n    if not pd.isna(item):\n        unique_items.extend(item.lower().split(','))\n    else:\n        unique_items.append('unknown')\nunique_items = sorted(list(set(unique_items)))\n    \ngenres_mapping = dict([(v, k) for k, v in enumerate(unique_items)])   \n\ngenres_file = open('genres_mapping.pkl', 'wb')\npickle.dump(genres_mapping, genres_file)\ngenres_file.close()","cd9be66d":"mappings = []\nfor i in range(len(items['genres'])):\n    mapping = []\n    if not pd.isna(items['genres'][i]):\n        for item in items['genres'][i].lower().split(','):\n            mapping.append(genres_mapping[item])\n        mappings.append(mapping)\n    else:\n        mappings.append([genres_mapping['unknown']])\nitems['genres'] = mappings","1b12a0b0":"for i in range(len(items['year'])):\n    try:\n        century = int(items['year'][i][:2]) + 1\n        if century > 21:\n            century = 'bc'\n        else:\n            century = str(century)\n        items['year'][i] = century\n    except:\n        items['year'][i] = 'unknown'\n        \nitems = items.rename(columns={'year': 'century'})","a36622ff":"items_rating = {}\nfor i, item in enumerate(items['id']):\n    try:\n        items_rating[item] = int(interactions[interactions['item_id'] == item]['rating'].mean(skipna=True))\n    except:\n        items_rating[item] = 'unknown'\n        \nitems['mean_rating'] = items_rating.values()","c8377529":"items","a52806d9":"items['century'].unique(), items['mean_rating'].unique()","0ae9f4cb":"items.to_csv('items_preprocessed.csv', index=False)","db6360b1":"users = users = pd.read_csv('..\/input\/mts-ml-summer-school\/users.csv')\nusers","84db1979":"users['sex'].replace(1.0, '1', inplace=True)\nusers['sex'].replace(0.0, '0', inplace=True)\nusers['age'].fillna('unknown', inplace=True)\nusers['sex'].fillna('unknown', inplace=True)","a784b42f":"diff = np.setdiff1d(users['user_id'], interactions['user_id'].unique())\nnum_users = len(users['user_id'])\nfor i, user_id in enumerate(users['user_id']):\n    if user_id in diff:\n        users = users.drop(i)","155e8dc2":"diff = np.setdiff1d(interactions['user_id'].unique(), users['user_id'])\nunknowns = ['unknown' for _ in range(len(diff))]\nusers_with_interactions = pd.DataFrame(list(zip(diff, unknowns, unknowns)),\n                                       columns=users.columns)\nusers = users.append(users_with_interactions)","bf119a2c":"num_interactions = []\nfor user in users['user_id']:\n    num_interactions.append(len(interactions[interactions['user_id'] == user]))\nusers['num_its'] = num_interactions","ffdd25fe":"users","8e344d6f":"users.to_csv('users_preprocessed.csv', index=False)","80b66e6c":"len(interactions) \/ (interactions['user_id'].unique().shape[0] * interactions['item_id'].unique().shape[0]) * 100","c8c8444a":"np.setdiff1d(sample_submission['Id'].unique(), users['user_id'].unique())","54347713":"items_already_seen = pd.DataFrame(columns=['user_id', 'items_id'])\nitems_already_seen['user_id'] = interactions['user_id'].unique()\n\nusers_interacts = []\nfor user in items_already_seen['user_id']:\n    users_interacts.append(list(interactions[interactions['user_id'] == user]['item_id']))\nitems_already_seen['items_id'] = users_interacts","79c2cb9b":"items_already_seen","9d219870":"users_already_seen = pd.DataFrame(columns=['item_id', 'users_id'])\nusers_already_seen['item_id'] = interactions['item_id'].unique()\n\nitems_interacts = []\nfor item in users_already_seen['item_id']:\n    items_interacts.append(list(interactions[interactions['item_id'] == item]['user_id']))\nusers_already_seen['users_id'] = items_interacts","6b29af4c":"users_already_seen","8f9b464e":"users_already_seen.to_csv('users_already_seen.csv', index=False)\nitems_already_seen.to_csv('items_already_seen.csv', index=False)","5863cd3c":"def genres_from_id(genres, mapping):\n    str_genres = []\n    for genre in genres:\n        str_genres.append(list(mapping.keys())[list(mapping.values()).index(genre)])\n    return str_genres","f6aebbf0":"interactions = pd.read_csv('.\/\/interactions_preprocessed.csv')\nitems = pd.read_csv('.\/\/items_preprocessed.csv')\nusers = pd.read_csv('.\/\/users_preprocessed.csv')","7e05ff3e":"users_already_seen = pd.read_csv('.\/\/users_already_seen.csv')\nitems_already_seen = pd.read_csv('.\/\/items_already_seen.csv')","0c259c12":"with open('.\/\/genres_mapping.pkl', 'rb') as handle:\n    genres_mapping = pickle.load(handle) ","f59e4f75":"import torch\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.optim as optim\nimport torch.nn as nn","74d47a45":"class UI_Dataset(Dataset):\n    def __init__(self, interactions, items, users, users_as, items_as, \n                 num_genres):\n        self.interactions = interactions\n    \n        self.items = items\n        self.users = users\n        \n        self.items_as = items_as\n        self.users_as = users_as\n        \n        \n        self.items_mapping = self.make_mapping(items['id'].unique())\n        self.users_mapping = self.make_mapping(interactions['user_id'].unique())\n        \n        self.sex_mapping = self.make_mapping(users['sex'].unique())\n        self.age_mapping = self.make_mapping(users['age'].unique())\n        \n        self.century_mapping = self.make_mapping(items['century'].unique())\n        self.rating_mapping = self.make_mapping(items['mean_rating'].unique())\n        \n        self.genres_mapping = dict([(k, v) for k, v in enumerate(range(num_genres))])\n        \n    def __len__(self):\n        return len(self.users)\n        \n    def make_mapping(self, data):\n        return dict([(v, k) for k, v in enumerate(data)])\n    \n    \n    def to_one_hot(self, values, mapping):\n        one_hot_vec = np.zeros(len(mapping))\n        for value in values:\n            one_hot_vec[mapping[value]] = 1.\n        return one_hot_vec\n    \n    def from_one_hot(self, vec, mapping):\n        values = []\n        indexes = np.where(vec == 1.)\n        for i in indexes[0]:\n            value = list(mapping.keys())[list(mapping.values()).index(i)]\n            values.append(value)\n        return np.array(values)\n    \n    \n    def __getitem__(self, index):\n        user = np.random.choice(dataset.users['user_id'].unique())\n        \n        item = np.random.choice(interactions[interactions['user_id'] == user]['item_id'])\n        data_1 = [self.pair_to_sample(user, item), torch.Tensor([1.])]\n        \n        item = np.random.choice(dataset.items['id'].unique())\n        data_0_0 = [self.pair_to_sample(user, item), torch.Tensor([0.])]\n        \n        item = np.random.choice(dataset.items['id'].unique())\n        data_0_1 = [self.pair_to_sample(user, item), torch.Tensor([0.])]\n        \n        return data_1, data_0_0, data_0_1\n    \n    def pair_to_sample(self, user, item):\n        item_r = self.to_one_hot(np.random.choice(\n            [int(list(dataset.items_as[dataset.items_as['user_id'] == user]['items_id'].item()[1:-1].split(', '))[0])], \n            1, replace=False),\n            self.items_mapping)\n        user_r = self.to_one_hot(np.random.choice(\n            [int(list(self.users_as[self.users_as['item_id'] == item]['users_id'].item()[1:-1].split(', '))[0])], \n            1, replace=False),\n            self.users_mapping)\n        \n        sex = self.to_one_hot([self.users[self.users['user_id'] == user]['sex'].item()],\n                              self.sex_mapping)\n        age = self.to_one_hot([self.users[self.users['user_id'] == user]['age'].item()],\n                              self.age_mapping)\n        \n        century = self.to_one_hot([self.items[self.items['id'] == item]['century'].item()],\n                                  self.century_mapping)\n        rating = self.to_one_hot([self.items[self.items['id'] == item]['mean_rating'].item()],\n                                 self.rating_mapping)\n        genres = self.to_one_hot(map(int, self.items[self.items['id'] == item]['genres'].item()[1:-1].split(', ')),\n                                 self.genres_mapping)\n        \n        user = self.to_one_hot([user], self.users_mapping)\n        item = self.to_one_hot([item], self.items_mapping)\n        \n        return [[torch.Tensor(user), torch.Tensor(item_r), \n                torch.Tensor(age), torch.Tensor(sex)],\n                  \n                [torch.Tensor(item), torch.Tensor(user_r), \n                torch.Tensor(century), torch.Tensor(rating), torch.Tensor(genres)]]","b5df3982":"dataset = UI_Dataset(interactions, items, users, \n                     users_already_seen, items_already_seen,\n                     len(genres_mapping))","34fcfa5e":"class DNN(nn.Module):\n    def __init__(self, len_user, len_item,\n                 len_age, len_sex,\n                 len_genres, len_century, len_rating):\n        super(DNN, self).__init__()\n        \n        self.user_embedding = nn.Sequential(nn.Linear(len_user, 512),\n                                            nn.BatchNorm1d(512),\n                                            nn.ReLU())\n        self.item_embedding = nn.Sequential(nn.Linear(len_item, 512),\n                                            nn.BatchNorm1d(512),\n                                            nn.ReLU())\n        \n        self.age_process_unit = nn.Sequential(nn.Linear(len_age, 64),\n                                              nn.BatchNorm1d(64),\n                                              nn.ReLU())\n        self.sex_process_unit = nn.Sequential(nn.Linear(len_sex, 64),\n                                              nn.BatchNorm1d(64),\n                                              nn.ReLU())\n        \n        self.genres_process_unit = nn.Sequential(nn.Linear(len_genres, 64),\n                                                 nn.BatchNorm1d(64),\n                                                 nn.ReLU())\n        self.century_process_unit = nn.Sequential(nn.Linear(len_century, 32),\n                                                  nn.BatchNorm1d(32),\n                                                  nn.ReLU())\n        self.rating_process_unit = nn.Sequential(nn.Linear(len_rating, 32),\n                                                 nn.BatchNorm1d(32),\n                                                 nn.ReLU())\n        \n        self.user_process_unit = nn.Sequential(nn.Linear(1152, 1024),\n                                               nn.BatchNorm1d(1024),\n                                               nn.ReLU())\n        self.item_process_unit = nn.Sequential(nn.Linear(1152, 1024),\n                                               nn.BatchNorm1d(1024),\n                                               nn.ReLU())\n        \n        self.concatenated_process_unit = nn.Sequential(nn.Linear(2048, 1024),\n                                                       nn.BatchNorm1d(1024),\n                                                       nn.ReLU(),\n                                                       \n                                                       nn.Dropout(0.2),\n                                                       \n                                                       nn.Linear(1024, 256),\n                                                       nn.BatchNorm1d(256),\n                                                       nn.ReLU(),\n                                                       \n                                                       nn.Dropout(0.2))\n        \n        self.output_unit = nn.Sequential(nn.Linear(256, 1),\n                                         nn.Sigmoid())\n        \n        \n    def forward(self, inputs):\n        user = inputs[0][0]\n        item_r = inputs[0][1]\n        age = inputs[0][2]\n        sex = inputs[0][3]\n\n        item = inputs[1][0]\n        user_r = inputs[1][1]\n        century = inputs[1][2]\n        rating = inputs[1][3]\n        genres = inputs[1][4]\n        \n        \n        user_input = self.user_embedding(user)\n        user_r_input = self.user_embedding(user_r)\n        users_input = torch.cat([user_input, user_r_input], axis=1)\n        \n        item_input = self.item_embedding(item)\n        item_r_input = self.item_embedding(item_r)\n        items_input = torch.cat([item_input, item_r_input], axis=1)\n        \n        age_input = self.age_process_unit(age)\n        sex_input = self.sex_process_unit(sex)\n        \n        genres_input = self.genres_process_unit(genres)\n        century_input = self.century_process_unit(century)\n        rating_input = self.rating_process_unit(rating)\n        \n        users_processed = torch.cat([users_input, age_input, sex_input], axis=1)\n        users_processed = self.user_process_unit(users_processed)\n        \n        items_processed = torch.cat([items_input, genres_input, century_input, rating_input], axis=1)\n        items_processed = self.item_process_unit(items_processed)\n        \n        \n        processed = torch.cat([users_processed, items_processed], axis=1)\n        processed = self.concatenated_process_unit(processed)\n        \n        output = self.output_unit(processed)\n        \n        return output","bc521b4c":"model = DNN(len(dataset.users_mapping), len(dataset.items_mapping),\n            len(dataset.age_mapping), len(dataset.sex_mapping),\n            len(dataset.genres_mapping), len(dataset.century_mapping), len(dataset.rating_mapping))\nmodel = model.cuda()","772da075":"loss_fc = nn.BCELoss()","82c88961":"optimizer = optim.Adam(model.parameters(), lr=3e-4)","a420f02c":"def data_to_cuda(data):\n    for i in range(len(data[0])):\n        for j in range(len(data[0][i])):\n            data[0][i][j] = data[0][i][j].cuda()\n    data[1] = data[1].cuda()\n    \n    return data[0], data[1]","41a8fd64":"b_size = 128\ndata_loader = DataLoader(dataset, batch_size=b_size, shuffle=True)","4dcb5325":"losses = []","2037c844":"model.train()\n\nfor i, data in enumerate(data_loader):\n    for data_i in data:\n        optimizer.zero_grad()\n        \n        samples, targets = data_to_cuda(data_i)\n        preds = model(samples)\n    \n        loss = loss_fc(preds, targets)\n        loss.backward()\n        optimizer.step()\n    \n    loss_value = loss.mean().item()\n    losses.append(loss_value)\n        \n    print(f'Batch: {i + 1} Samples: {(i + 1) * b_size} Loss: {loss_value}', end='')\n    print('\\r', end='')\n    if i % 500 == 0:\n        torch.save(model, 'model.pt')\ntorch.save(model, 'model.pt')    ","dbe6c86b":"import plotly.graph_objects as go","697b3de0":"fig = go.Figure(\n    data=go.Scatter(x=list(range(len(losses))), y=losses),\n    layout=go.Layout(\n        title=go.layout.Title(text='Loss')\n    )\n)\nfig.show()\n","32b0b1a9":"class Popular_Recommender():\n    def __init__(self, max_K=100, days=30, item_column='item_id', dt_column='date'):\n        self.max_K = max_K\n        self.days = days\n        self.item_column = item_column\n        self.dt_column = dt_column\n        self.recommendations = []\n        \n    def fit(self, df):\n        min_date = pd.to_datetime(df[self.dt_column]).max().normalize() - pd.DateOffset(days=self.days)\n        self.recommendations = df.loc[pd.to_datetime(df[self.dt_column]) > min_date, self.item_column].value_counts().head(self.max_K).index.values\n    \n    def recommend(self, users=None, N=10):\n        recs = self.recommendations[:N]\n        if users is None:\n            return recs\n        else:\n            return list(islice(cycle([recs]), len(users)))","e60c9fd2":"iteracts_for_pops = pd.read_csv('..\/input\/mts-ml-summer-school\/interactions.csv')\n\npop_rec = Popular_Recommender(days=20, dt_column='start_date')\npop_rec.fit(iteracts_for_pops)","472754e2":"pop_recs = list(pop_rec.recommendations[:10])","eb34b992":"dropped_users = []\n\nfor user in sample_submission['Id']:\n    if user not in users['user_id'].unique():\n        dropped_users.append(user)\n    elif users[users['user_id'] == user]['num_its'].item() < 5:\n        dropped_users.append(user)","aacebd0a":"users_to_pred = users[users['user_id'].isin(np.setdiff1d(sample_submission['Id'], dropped_users))]","811a5b09":"from implicit.nearest_neighbours import BM25Recommender\nimport scipy.sparse as sp","97dff55a":"def get_coo_matrix(interactions, \n                   users_mapping, \n                   items_mapping,\n                   user_col='user_id', \n                   item_col='item_id', \n                   weight_col=None):\n    if weight_col is None:\n        weights = np.ones(len(interactions), dtype=np.float32)\n    else:\n        weights = interactions[weight_col].astype(np.float32)\n\n    interaction_matrix = sp.coo_matrix((\n        weights, \n        (\n            interactions[user_col].map(users_mapping.get), \n            interactions[item_col].map(items_mapping.get)\n        )\n    ))\n    return interaction_matrix\n\ninteractions_matrix = get_coo_matrix(interactions, \n                                     users_mapping=dataset.users_mapping, \n                                     items_mapping=dataset.items_mapping).tocsr()","79d4fee6":"imp_model = BM25Recommender(K=12)\nimp_model.fit(interactions_matrix.T) ","e4a38340":"top_n = 12\nitems_inv_mapping = dict({(v, k) for k, v in dataset.items_mapping.items()})\nimp_preds = {}\nfor user in users_to_pred['user_id']:\n    recs = imp_model.recommend(dataset.users_mapping[user], interactions_matrix, \n                               N=top_n, filter_already_liked_items=True)\n    recs = [items_inv_mapping[rec[0]] for rec in recs]\n    \n    imp_preds[user] = recs","20d0a4d0":"model = torch.load('model.pt')\nmodel = model.cuda().eval()","abcbebcf":"total_preds = {}\n\nfor idx, user in enumerate(users_to_pred['user_id']):\n    preds = {}\n    \n    for item in imp_preds[user]:\n        sample = dataset.pair_to_sample(user, item)\n        sample = data_to_cuda([sample, torch.Tensor([0.])])[0]\n        \n        for i in range(len(sample)):\n            for j in range(len(sample[i])):\n                sample[i][j] = sample[i][j].unsqueeze(0)\n    \n        preds[item] = model(sample).item()\n\n    total_preds[user] = list({k: v for k, v in sorted(preds.items(), key=lambda it: it[1])}.keys())[-10:][::-1]\n    \n    print(f'{idx + 1}', end='')\n    print('\\r', end='')","c74d971e":"for user in dropped_users:\n    total_preds[user] = pop_recs","f712325e":"submission = pd.DataFrame({'Id': sample_submission['Id']})\nsub_preds = [total_preds[user] for user in submission['Id']]\nsubmission['Predicted'] = list(sub_preds)\nsubmission['Predicted'] = submission['Predicted'].apply(lambda x: ' '.join(map(str, x)))","7759f365":"submission","ea5dce39":"submission.to_csv('submission.csv', index=False)","38fde9d5":"\u041a \u044e\u0437\u0435\u0440\u0430\u043c \u0440\u0435\u0448\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 users, \u043d\u043e \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0446\u0438\u044f\u0445, \u0447\u0442\u043e\u0431\u044b \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0444\u0438\u0447\u0438 \u0432 \u0441\u0435\u0442\u044c.\n\n\u0421\u0430\u043c\u0438 \u0444\u0438\u0447\u0438 \u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435 \u0441\u0442\u0430\u043b - \u0432 \u0441\u0435\u0442\u044c \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u043b \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442.","0abff39d":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0438\u0447\u0438 \u043f\u0440\u0438\u0448\u043b\u043e \u0432 \u0433\u043e\u043b\u043e\u0432\u0443 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0432 \u0441\u0435\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0441 \u0430\u0439\u0442\u0435\u043c\u043e\u043c, \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0430\u0439\u0442\u0435\u043c, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u044e\u0437\u0435\u0440. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u044d\u043c\u0431\u0435\u0434\u0434\u0435\u043d\u0433\u0438 (\u043e\u0434\u0438\u043d \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430, \u043e\u0434\u0438\u043d \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0430\u0439\u0442\u0435\u043c\u0430 \u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0430\u0439\u0442\u0435\u043c\u0430). \u0422\u0430\u043a\u0436\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0431\u044b\u043b\u0430 \u044d\u0442\u0430 \u0438\u0434\u0435\u044f.","39edf945":"\u0426\u0438\u043a\u043b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","cd010485":"\u0422\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0449\u0443\u0449\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0433\u043e\u0434\u0430\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0432\u0435\u043a\u0430\u0445, \u0437\u0430\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0441\u0442\u0430\u043d\u0435\u0442 \u0432 \u0440\u0430\u0437\u044b \u043c\u0435\u043d\u044c\u0448\u0435.","0c62494b":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0434\u0430\u0442\u0430\u0445, \u0442.\u043a. \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u0447\u0435\u0439 \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0443\u0442.","925ea689":"\u0420\u0435\u0448\u0438\u043b \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0437\u0430\u043d\u043e\u0432\u043e \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","94a347d8":"\u041e\u0442\u0431\u043e\u0440 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432.","2b738e8d":"\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u0430\u043c\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u0430\u044f. \u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0441\u043b\u043e\u0438, \u0431\u0430\u0442\u0447 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u0440\u0435\u043b\u0443, \u0434\u0440\u043e\u043f\u0430\u0443\u0442, \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0438\u0433\u043c\u043e\u0438\u0434\u0430.\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0444\u0438\u0447\u0438, \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u0443\u0435\u0442 \u0432 \u0434\u0432\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0444\u0438\u0447\u0438 \u044e\u0437\u0435\u0440\u043e\u0432 \u0438 \u0444\u0438\u0447\u0438 \u0430\u0439\u0442\u0435\u043c\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u044d\u0442\u0438 \u0434\u0432\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0441\u043b\u043e\u0438.","a99232c8":"\u0422\u0443\u0442 \u0432\u0441\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e - \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u0440\u043e\u043a.","65ae6cd9":"\u0421\u0435\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0443 \u044d\u043f\u043e\u0445\u0443.\n\u041b\u043e\u0441\u0441 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435...","4e9f57ac":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u044e\u0437\u0435\u0440\u0430\u043c. \u0412\u044b\u0434\u0430\u0435\u0442 \u0442\u0440\u0438 \u0441\u0435\u043c\u043f\u043b\u0430 \u0437\u0430 \u0440\u0430\u0437: \n\u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0435\u043c\u043f\u043b - \u044e\u0437\u0435\u0440 \u0438 \u0430\u0439\u0442\u0435\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u0410\u0439\u0442\u0435\u043c, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e; \n\u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0442\u0440\u0435\u0442\u0438\u0439 \u0441\u0435\u043c\u043f\u043b\u044b - \u044e\u0437\u0435\u0440 \u0438 \u0430\u0439\u0442\u0435\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f (\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e). \u0410\u0439\u0442\u0435\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0430\u0439\u0442\u0435\u043c\u043e\u0432, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0430\u0438\u0432\u043d\u044b\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c (\u0430\u0439\u0442\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a\u0438\u043c, \u043a\u0430\u043a\u043e\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043b\u0438\u0431\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0430\u0440\u0435 \u0438\u0437 interactions \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430).\n\u0422\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u0435\u0433\u043e \u0441\u0435\u043c\u043f\u043b\u0430 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0444\u0438\u0447\u0438 \u0438 \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u0440\u0433\u0435\u0442 1 \u0438 0 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u041c\u0438\u043d\u0443\u0441 \u0442\u0430\u043a\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u044f \u043d\u0435 \u0432\u0438\u0436\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u043d\u0430 train\/test\/val. \u0425\u043e\u0442\u044f, \u043a\u0430\u043a \u043c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f, \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u044d\u0442\u043e \u043d\u0435 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u043d\u043e.","78718226":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u0447\u0435\u0439 \u0434\u043b\u044f items \u0440\u0435\u0448\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u0442\u0443 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f, \u0436\u0430\u043d\u0440\u044b \u0438 \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433.\n\u0410\u0432\u0442\u043e\u0440\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e, \u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u0441\u0435\u0442\u044c \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043c\u043d\u0435 \u0441\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438.","9356db4d":"\u041d\u0443 \u0438 \u043d\u0430\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u043a \u0440\u0435\u0448\u0438\u043b, \u0447\u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0444\u0438\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u043d\u0438\u0433\u0438.","a016e485":"\u0421 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u043d\u0430 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0446\u0438\u0439 \u0438 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438 \u0440\u0435\u0448\u0438\u043b, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u0431\u0440\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0430 \u0438 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u044b\u0439 \u0430\u0439\u0442\u0435\u043c \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0442\u0430\u0440\u0433\u0435\u0442 0 (\u0445\u043e\u0442\u044f \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d, \u0432\u0435\u0440\u043d\u043e\u0435 \u043b\u0438 \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435).","769bd2ec":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435.","3f169d77":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.","123b01c0":"\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0437\u0430\u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043b\u043e\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u0442\u043e, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0432 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430\u0445, \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u0432\u0441\u0435\u0433\u043e \u0434\u043d\u044f 3-4. \u0420\u0435\u0448\u0438\u043b \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c. \n\n\u0414\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f PyTorch. \u0412 \u043e\u0431\u0449\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a: \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432\u0435\u043a\u0442\u043e\u0440 \u044e\u0437\u0435\u0440\u0430, \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u0444\u0438\u0447\u0435\u0439 \u044e\u0437\u0435\u0440\u0430,\n\u0432\u0435\u043a\u0442\u043e\u0440 \u0430\u0439\u0442\u0435\u043c\u0430, \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u0444\u0438\u0447\u0435\u0439 \u0430\u0439\u0442\u0435\u043c\u0430, \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0441\u0442\u0432\u0438\u044f (\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0441\u0435\u043c\u043f\u043b\u044b \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c 1 - \u044d\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0440\u0435\u0439\u043c\u0430 interactions, \u0441 \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c 0 - \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u044e\u0437\u0435\u0440\u043e\u0432 \u0438 \u0430\u0439\u0442\u0435\u043c\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 interactions). \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438.","7401ac0b":"\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0436\u0430\u043d\u0440\u0430\u0445 \u0440\u0435\u0448\u0438\u043b \u0441\u0440\u0430\u0437\u0443 \u0432 \u043b\u0435\u0439\u0431\u043b\u0430\u0445.","00ebe7c3":"\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 one-hot \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u044e\u0437\u0435\u0440\u043e\u0432, \u0430\u0439\u0442\u0435\u043c\u043e\u0432 \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u044e\u0437\u0435\u0440\u043e\u0432, \u0430\u0439\u0442\u0435\u043c\u043e\u0432 (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0432\u0435\u0441\u0430.","f519bbf1":"\u0414\u043b\u044f \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u0445, \u043a\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.","c1c1e107":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u0430 \u0434\u043b\u044f \u0436\u0430\u043d\u0440\u043e\u0432.","e96295ce":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0441\u0435\u0442\u0438.","4ea318b3":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0441\u0435\u0442\u044c\u044e \u0432\u0441\u0435 60\u041a \u043a\u043d\u0438\u0433 \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u043f\u0430\u043c\u044f\u0442\u0438. \u0422\u0435\u043c \u0431\u043e\u043b\u0435\u0435, \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0431\u044b\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \nUPD: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c LightFM \u0434\u043b\u044f \u043e\u0442\u0431\u043e\u0440\u0430 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u043b\u043e\u0445\u043e\u0439 \u0438\u0434\u0435\u0435\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f BM25Recommneder, \u0441\u0430\u043c \u043f\u043e \u0441\u0435\u0431\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0435\u043f\u043b\u043e\u0445\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","644f7700":"# DNN Recommender System","b5b3df4e":"\u0418\u0437-\u0437\u0430 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u044b.","330ed91d":"\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043d\u0438\u0433\u0438. \u041a\u043e\u0434 \u0432\u0437\u044f\u0442 \u0438\u0437 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d\u0430, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 days \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u043d\u0430 20. ","5289c312":"\u041a\u043e\u043b\u043e\u043d\u043a\u0430 genres - \u043f\u043e \u0441\u0443\u0442\u0438 \u043d\u0430\u0431\u043e\u0440 \u0438\u0437 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0436\u0430\u043d\u0440\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0439\u0442\u0435\u043c\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e. \n\u0412\u0441\u0435\u0433\u043e \u0438\u0445 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c 659. \u0420\u0435\u0448\u0438\u043b, \u0447\u0442\u043e \u0442\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 one-hot \u0432\u0435\u043a\u0442\u043e\u0440\u0430.","1795bdac":"\u041d\u0430 \u044d\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0430, \u0434\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.","1268b1b4":"\u042d\u0442\u0438\u043c \u043f\u043e\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043d\u0438\u0433\u0438..."}}