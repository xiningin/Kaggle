{"cell_type":{"4ffc1bd4":"code","70c49d50":"code","42c56c81":"code","a8185112":"code","c9878534":"code","b9bd72b5":"code","703574eb":"code","bce71652":"code","69373f06":"code","73bd5136":"code","ce39fb99":"code","b2e1704c":"code","aec387b1":"code","54bbc23f":"code","9853c911":"code","45636730":"code","b95bc715":"code","8250c9f0":"code","bd871d7a":"code","396b9234":"code","ffcd6292":"code","2c79c87d":"code","1ed06fbe":"code","8134958e":"code","6ce174cd":"code","91437c35":"code","a629f060":"code","0fd0da3d":"code","8b651b30":"code","6aadfe07":"code","a4b6e8d0":"code","21c58ec9":"code","12e3371c":"code","39f0df04":"code","10344a4f":"code","ae9f2bae":"code","263f6c19":"code","027c4095":"code","2b6951a4":"code","e6b0a223":"code","31457150":"code","cdcb7231":"code","fbe10762":"code","0bb71757":"code","513a9760":"code","c6bb16c2":"code","1db02f72":"code","00f01d74":"code","ed8d2c8b":"code","1e5e6de5":"code","3c9172a5":"code","dfc92ebe":"code","26caee22":"code","680da9ba":"code","d54e52d6":"code","673de1ec":"code","0bbab24c":"markdown","74947704":"markdown","dc361c84":"markdown","cbfcbb96":"markdown","6df40ee3":"markdown","23370f41":"markdown","2cd2e098":"markdown","d5ad906d":"markdown","317cf1bc":"markdown","d61ee515":"markdown","8f9e2f62":"markdown","de45b41f":"markdown","266bad19":"markdown","382d831e":"markdown","db6fb03e":"markdown","d3714d70":"markdown","240e4230":"markdown","d48d8a07":"markdown"},"source":{"4ffc1bd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport json\nimport re\nfrom datetime import datetime\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70c49d50":"credits_df=pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\nmovies_df=pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","42c56c81":"credits_df.head()","a8185112":"movies_df.head()","c9878534":"movies_df.isna().sum()","b9bd72b5":"movies_df['release_date'].isna().sum()","703574eb":"movies_df.dropna(subset=['release_date'],inplace=True)","bce71652":"movies_df['release_date'].isna().sum()","69373f06":"movies_df[movies_df['overview'].isna()]","73bd5136":"movies_df.dropna(subset=['overview'],inplace=True)","ce39fb99":"movies_df.isna().sum()","b2e1704c":"movies_df[movies_df['tagline'].isna()].head()","aec387b1":"credits_df.isna().sum()","54bbc23f":"all_movies_df=pd.merge(left=movies_df,right=credits_df,left_on='id',right_on='movie_id',\n                      suffixes=('_left','_right'))\nall_movies_df.drop(['id','title_left'],axis=1,inplace=True)\nall_movies_df=all_movies_df.rename(columns={'title_right':\"title\"})\nall_movies_df = all_movies_df[['movie_id', 'budget', 'title', 'original_title', 'status', 'tagline', 'release_date', 'runtime', \n               'genres', 'production_companies', 'production_countries', 'popularity', 'revenue', 'vote_average',\n               'vote_count', 'cast', 'crew', 'homepage', 'keywords', 'original_language', 'overview', 'spoken_languages'\n             ]]\nallm = all_movies_df.copy()\n\n","9853c911":"json_columns=['genres', 'keywords', 'production_countries', 'spoken_languages']\nfor column in json_columns:\n    all_movies_df[column] = all_movies_df[column].apply(json.loads, encoding=\"utf-8\")\n\nseperate_cols_array_json=[\"cast\",\"crew\",\"production_companies\"]\nfor columns in seperate_cols_array_json:\n    all_movies_df[columns]=all_movies_df[columns].apply(json.loads,encoding=\"utf-8\")\n    \n    ","45636730":"cast_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['cast']],axis=1)\ncrew_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['crew']],axis=1)\nproduction_companies_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['production_companies']],axis=1)\nkeywords_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['keywords']],axis=1)\ngenres_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['genres']],axis=1)\nproduction_countries_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['production_countries']],axis=1)\nspoken_languages_df=pd.concat([all_movies_df[\"movie_id\"],all_movies_df['spoken_languages']],axis=1)","b95bc715":"cast_columns=[\"cast_id\",\"character\",\"credit_id\",\"gender\",\"id\",\"name\",\"order\"]\ncrew_columns=[\"credit_id\",\"department\",\"gender\",\"id\",\"job\",\"name\"]\nprod_columns=[\"name\",\"id\"]\nlanguages_columns=[\"iso_639_1\",\"name\"]\nproduction_countries_columns=[\"iso_3166_1\",\"name\"]\n\n","8250c9f0":"def process_cast(df):\n    rows_list=[]\n    for index,x  in zip(cast_df.index,cast_df[\"cast\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in cast_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=cast_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    cast_df_new=pd.DataFrame(rows_list)\n    return cast_df_new\n","bd871d7a":"def process_production_companies(df):\n    rows_list=[]\n    for index,x  in zip(production_companies_df.index,production_companies_df[\"production_companies\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in prod_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    df=pd.DataFrame(rows_list)\n    return df\n","396b9234":"def process_keywords(df):\n    rows_list=[]\n    for index,x  in zip(keywords_df.index,keywords_df[\"keywords\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in prod_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    df=pd.DataFrame(rows_list)\n    return df\n","ffcd6292":"def process_spoken_languages(df):\n    rows_list=[]\n    for index,x  in zip(spoken_languages_df.index,spoken_languages_df[\"spoken_languages\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in languages_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    df=pd.DataFrame(rows_list)\n    return df\n","2c79c87d":"def process_genres(df):\n    rows_list=[]\n    for index,x  in zip(genres_df.index,genres_df[\"genres\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in prod_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    df=pd.DataFrame(rows_list)\n    return df\n","1ed06fbe":"def process_crew(df):\n    rows_list=[]\n    for index,x  in zip(crew_df.index,crew_df[\"crew\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in crew_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    crew_df_new=pd.DataFrame(rows_list)\n    return crew_df_new\n","8134958e":"def process_production_countries(df):\n    rows_list=[]\n    for index,x  in zip(production_countries_df.index,production_countries_df[\"production_countries\"]):\n        for i in range(len(x)):\n            data={}\n            for column_name in production_countries_columns:\n                data[column_name]=x[i][column_name]\n    #         print(len(data))\n            data[\"movie_id\"]=crew_df.loc[index,\"movie_id\"]\n            rows_list.append(data)\n    df=pd.DataFrame(rows_list)\n    return df\n","6ce174cd":"cast_df_new=process_cast(all_movies_df)\n\ncrew_df_new=process_crew(all_movies_df)","91437c35":"production_df_companies_new=process_production_companies(all_movies_df)\nkey_df_new=process_keywords(all_movies_df)\ngenres_df_new=process_genres(all_movies_df)","a629f060":"spoken_df_new=process_spoken_languages(all_movies_df)\nproduction_countries_df_new=process_production_countries(all_movies_df)\n","0fd0da3d":"allmovienew=all_movies_df.copy()","8b651b30":"#Drop cols\nall_movies_df.drop([\"genres\",\"production_companies\",\"production_countries\",\"keywords\",\"spoken_languages\",\"cast\",\"crew\"],axis=1,inplace=True)","6aadfe07":"genres_df_new.head()","a4b6e8d0":"all_movies_df.head()","21c58ec9":"# def genre_comparisons():\ngenre=pd.merge(left=all_movies_df,right=genres_df_new,left_on='movie_id',right_on='movie_id',\n                      suffixes=('_left','_right'))\n#name here refers to genre name\ngenre_budget_group_by=genre.groupby('name').agg({'budget':'sum'})\n#     pass","12e3371c":"plt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nplt.title(\"Count of Movies by Genre\")\nsns.countplot(data=genre,x=\"name\")","39f0df04":"genre_total_votes_group_by=genre.groupby('name').agg({'vote_count':'sum'})\nplt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nplt.title(\"Total Vote Count By Genre\")\nsns.barplot(data=genre_total_votes_group_by,x=genre_total_votes_group_by.index,y=\"vote_count\")","10344a4f":"genre_avg_votes_group_by=genre.groupby('name').agg({'vote_average':'sum'})\nplt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nplt.title(\"Average Votes By Genre\")\nsns.barplot(data=genre_avg_votes_group_by,x=genre_avg_votes_group_by.index,y=\"vote_average\")","ae9f2bae":"genre.corr()","263f6c19":"genre_revenue_group_by=genre.groupby('name').agg({'revenue':'sum'})\nplt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nplt.title(\"Revenue By Genre\")\nsns.barplot(data=genre_revenue_group_by,x=genre_revenue_group_by.index,y=\"revenue\")","027c4095":"all_movies_df['release_date']=pd.to_datetime(all_movies_df['release_date'])","2b6951a4":"all_movies_df['release_year']=all_movies_df['release_date'].dt.year\nall_movies_df['release_month']=all_movies_df['release_date'].dt.month","e6b0a223":"all_movies_df.head(2)","31457150":"after_date_time=all_movies_df.copy()","cdcb7231":"genre.head()","fbe10762":"genre_popularity_group_by=genre.groupby('name').agg({'popularity':'mean'})\nplt.figure(figsize=(10,10))\nplt.xticks(rotation=45)\nplt.title(\"Popularity By Genre\")\nsns.barplot(data=genre_popularity_group_by,x=genre_popularity_group_by.index,y=\"popularity\")","0bb71757":"genre=pd.merge(left=all_movies_df,right=genres_df_new,left_on='movie_id',right_on='movie_id',\n                      suffixes=('_left','_right'))\n#name here refers to genre name","513a9760":"genre.dtypes","c6bb16c2":"genre.head()","1db02f72":"genre_names=genre['name'].unique()\n","00f01d74":"g = sns.FacetGrid(genre, col=\"name\",col_wrap=2)\ng.map(sns.lineplot, \"release_year\", \"popularity\")\ng.add_legend();","ed8d2c8b":"spoken_df_new.head()","1e5e6de5":"all_movies_df.head()","3c9172a5":"#Join\nspoken_df=pd.merge(left=all_movies_df,right=spoken_df_new,left_on='movie_id',right_on='movie_id',\n                      suffixes=('_left','_right'))","dfc92ebe":"spoken_df.head()","26caee22":"\"\"\"This method returns the top 10 languages based on the number of movies they are used in\"\"\"\ndef most_popular_languages():\n    counts=spoken_df.groupby('name').agg({'movie_id':'count'})\n    top_10_languages=counts.nlargest(10,\"movie_id\")\n    top_10_languages.rename(columns={'movie_id':'count'},inplace=True)\n    top_10_languages=top_10_languages.reset_index()\n    return top_10_languages\n\n    ","680da9ba":"top_10_languages=most_popular_languages()","d54e52d6":"top_10_languages","673de1ec":"fig,ax=plt.subplots(1,2)\nplt.tight_layout()\nplt.subplot_tool()\nplt.xlabel(\"Movie Languages and Budget Allocations\")\nsns.barplot(x=\"name\",y=\"revenue\",data=spoken_df[spoken_df['name'].isin(top_10_languages['name'])],ax=ax[0])\nsns.barplot(x=\"name\",y=\"budget\",data=spoken_df[spoken_df['name'].isin(top_10_languages['name'])],ax=ax[1])\nfor tick in ax[0].get_xticklabels():\n    tick.set_rotation(90)\nfor tick in ax[1].get_xticklabels():\n    tick.set_rotation(90)","0bbab24c":"Lets check how budget and revenue vary by language","74947704":"Action and Adventure bring in the highest revenue","dc361c84":"Most of the info is missing for these 3 records. Lets drop them","cbfcbb96":"Drama has the highest voting average followed by comedy. Despite receiving maximum votes, the action genre falls behind once it comes to avg votes. Lets see the correlations","6df40ee3":"Action and Drama receive high vote counts","23370f41":"Since we have so many so many dataframes, we will tackle it slowly,one at a time. \nLets take genres.","2cd2e098":"The important correlations seem to be:\n1. Vote count and budget are positively correlated\n1. Popularity and vote count are +ted\n1. Revenue and vote count are +ted\n","d5ad906d":"What can we infer? Adventure and action show rise over time. Nobody seems to care about foreign movies and tv movies. Enough of genres for now.","317cf1bc":"Genre and Popularity","d61ee515":"Nothing Missing ! Great.","8f9e2f62":"We will look at these text missing data later. Now lets look at credits","de45b41f":"Check null values\n","266bad19":"Maximum number of movies belong to the genre of drama","382d831e":"Loading the two datasets","db6fb03e":"We cannot look at 62 languages. Lets look at top 10 languages by most no of movies","d3714d70":" DFS We Have Now:\n1. all_movies_df\n1. spoken_df_new\n1. production_countries_df_new\n1. crew_df_new\n1. production_df_companies_new\n1. key_df_new\n1. genres_df_new\n1. cast_df_new\n","240e4230":"Year Wise Trend in Category For Popularity","d48d8a07":"First lets analyze movie credits"}}