{"cell_type":{"ba99330f":"code","823380c5":"code","e86bac3d":"code","db6dbc39":"code","b62e446f":"code","752bfdec":"code","d750e8dc":"code","b7e6915c":"code","237f902d":"code","d7d71e28":"code","597fd1a1":"code","59d41524":"code","297a4c89":"code","5c7367c8":"code","b7761f50":"code","f8e50ab9":"code","a5ae71e9":"code","0e7277de":"code","d7305411":"code","c40d2537":"code","c8ea4411":"code","c97a420c":"code","3f8164e7":"code","d120c1a9":"code","b89f7c53":"code","25095ef2":"code","aae7f8d2":"code","0292efe8":"code","74a41fbc":"code","16498f58":"code","174d36e6":"code","cceb4ec3":"markdown","78cc770e":"markdown","53273e8b":"markdown","7d3275ba":"markdown","75155a94":"markdown","565cdb3a":"markdown","6ffa1f5a":"markdown","7e763bb4":"markdown","a96086d1":"markdown","0c8cff2b":"markdown"},"source":{"ba99330f":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.model_selection import train_test_split\n#from sklearn.cross_validation import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nimport os\nprint(os.listdir(\"..\/input\"))\nnp.random.seed(0)","823380c5":"train = pd.read_csv(\"..\/input\/train.csv\",index_col='PassengerId')\ntest = pd.read_csv(\"..\/input\/test.csv\",index_col='PassengerId')#","e86bac3d":"train.shape,test.shape","db6dbc39":"train[(train['Age'].isna())].head(12)","b62e446f":"train[(train['SibSp']==0) & (train['Parch']==0) &(train['Embarked']=='Q')&(train['Sex']=='male')].head(5)","752bfdec":"train.head(5)","d750e8dc":"def replaceGen(sex):\n    gen =0\n    if sex=='male':\n        gen=0\n    elif sex=='female':\n        gen=1\n    return gen\n    ","b7e6915c":"train['Sex'] = train['Sex'].apply(replaceGen)\ntest['Sex'] = test['Sex'].apply(replaceGen)","237f902d":"train['Age'].hist(figsize=(10, 4));","d7d71e28":"train['Age'].fillna(train['Age'].mean(), inplace=True)\ntest['Age'].fillna(test['Age'].mean(), inplace=True)","597fd1a1":"test[test['Fare'].isna()]","59d41524":"Age_mean = train[(train['Pclass']==3) & (train['Embarked']=='S') & (train['Age']>55) & (train['Sex']==0)]['Fare'].mean()","297a4c89":"test['Fare'].fillna(Age_mean, inplace=True)","5c7367c8":"X =train.drop(['Survived','Name','Ticket','Cabin','Embarked'],axis=1)\ny =pd.DataFrame(train['Survived'])\ntest_f =test.drop(['Name','Ticket','Cabin','Embarked'],axis=1)","b7761f50":"X.shape,y.shape","f8e50ab9":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","a5ae71e9":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.33, random_state=42)","0e7277de":"model1 = DecisionTreeClassifier()\nmodel1.fit(x_train, y_train)\nval_pred1=pd.DataFrame(model1.predict(x_val))\ntest_pred1=pd.DataFrame(model1.predict(x_test))\n\nmodel2 = KNeighborsClassifier()\nmodel2.fit(x_train,y_train)\nval_pred2=pd.DataFrame(model2.predict(x_val))\ntest_pred2=pd.DataFrame(model2.predict(x_test))\n\nmodel3 = RandomForestClassifier()\nmodel3.fit(x_train,y_train)\nval_pred3=pd.DataFrame(model3.predict(x_val))\ntest_pred3=pd.DataFrame(model3.predict(x_test))\n\nmodel4 = GradientBoostingClassifier()\nmodel4.fit(x_train,y_train)\nval_pred4=pd.DataFrame(model4.predict(x_val))\ntest_pred4=pd.DataFrame(model4.predict(x_test))","d7305411":"x_val.head()","c40d2537":"df_val=pd.concat([x_val.reset_index(drop=True), val_pred1.reset_index(drop=True),val_pred2.reset_index(drop=True),val_pred3.reset_index(drop=True),val_pred4.reset_index(drop=True)],axis=1)\ndf_test=pd.concat([x_test.reset_index(drop=True), test_pred1.reset_index(drop=True),test_pred2.reset_index(drop=True),test_pred3.reset_index(drop=True),test_pred4.reset_index(drop=True)],axis=1)\n","c8ea4411":"df_val.head()","c97a420c":"model = LogisticRegression()\nmodel.fit(df_val,y_val)\nmodel.score(df_test,y_test)","3f8164e7":"x_train, x_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=42)","d120c1a9":"model1 = DecisionTreeClassifier()\nmodel1.fit(x_train, y_train)\nval_pred1=pd.DataFrame(model1.predict(x_val))\ntest_pred1=pd.DataFrame(model1.predict(test_f))\n\nmodel2 = KNeighborsClassifier()\nmodel2.fit(x_train,y_train)\nval_pred2=pd.DataFrame(model2.predict(x_val))\ntest_pred2=pd.DataFrame(model2.predict(test_f))\n\nmodel3 = RandomForestClassifier()\nmodel3.fit(x_train,y_train)\nval_pred3=pd.DataFrame(model3.predict(x_val))\ntest_pred3=pd.DataFrame(model3.predict(test_f))\n\nmodel4 = GradientBoostingClassifier()\nmodel4.fit(x_train,y_train)\nval_pred4=pd.DataFrame(model4.predict(x_val))\ntest_pred4=pd.DataFrame(model4.predict(test_f))","b89f7c53":"x_val.head()","25095ef2":"df_val=pd.concat([x_val.reset_index(drop=True), val_pred1.reset_index(drop=True),val_pred2.reset_index(drop=True),val_pred3.reset_index(drop=True),val_pred4.reset_index(drop=True)],axis=1)\ndf_test=pd.concat([test_f.reset_index(drop=True), test_pred1.reset_index(drop=True),test_pred2.reset_index(drop=True),test_pred3.reset_index(drop=True),test_pred4.reset_index(drop=True)],axis=1)","aae7f8d2":"df_val.head()","0292efe8":"model = LogisticRegression()\nmodel.fit(df_val,y_val)\ny_target = model.predict(df_test)","74a41fbc":"test_salida = pd.DataFrame( { 'PassengerId': test_f.index , 'Survived': y_target } )","16498f58":"#Show Output\ntest_salida.head(20)","174d36e6":"test_salida.to_csv( 'titanic_pred.csv' , index = False )","cceb4ec3":"i count data missing and count dataset","78cc770e":"Split the Dataset in Train and test and data validation\n\n![Explained](https:\/\/s3-ap-south-1.amazonaws.com\/av-blog-media\/wp-content\/uploads\/2018\/05\/image-7-300x226.png)","53273e8b":"Show my Dataset","7d3275ba":"\n\n\n\nRun model with all Dataset","75155a94":"Upload dataset","565cdb3a":"Show the accuracy in the model of second level","6ffa1f5a":"We test the models and its accuracy","7e763bb4":"## Engineer Features\nWe work in the features Dataset, this example is about Stacking, and it's not important to deep in the feature","a96086d1":"This Kernel es a basic example of implementation about Stacking, this technique is very import for understand techniques more avanzed ","0c8cff2b":"## Advanced Ensemble Techniques Blending\nthis Kernel is built in base to this documents: https:\/\/www.analyticsvidhya.com\/blog\/2018\/06\/comprehensive-guide-for-ensemble-models\/ \nIf I help you please upvote"}}