{"cell_type":{"34dc97d5":"code","81d61a26":"code","44f753ce":"code","2af0a609":"code","e45934b7":"code","093b7420":"code","8d112549":"code","55083add":"code","89d7b61f":"code","978a0da6":"code","09df4013":"code","aa65e05f":"code","a2ad4076":"code","ed07cff0":"code","b30c2e1f":"code","6278fd2c":"code","5a21db23":"code","4e77c37c":"code","e0939879":"code","3b6e1513":"code","fd8f5df3":"code","a4b96901":"code","07c40e5d":"code","43e8b7df":"code","4365c677":"code","6e57a752":"code","7e40ce7d":"code","77f9d071":"code","1a7eade1":"code","d1eb9929":"code","7d0e76c9":"code","0af382a2":"code","74abf348":"code","e47de116":"code","d1d40d78":"code","91f8172d":"code","2df33e29":"code","8a435499":"code","30cfd513":"code","ead24065":"code","650992a7":"code","868a1c5a":"code","c19c6894":"code","b17efb22":"code","3bd32346":"code","bac09968":"code","f6c793c0":"code","1c6f5fc2":"code","0ba096ac":"code","3b48c9bf":"code","2e529ffd":"code","aaa28032":"code","cf384622":"code","ff955b04":"code","421c53c3":"code","bfa45a60":"code","e1a0e66a":"code","d37817ad":"code","341e28f3":"code","f40edd0c":"code","7b6dddad":"code","f6936058":"code","85a3f877":"code","e386eb3c":"code","eda1eb37":"code","dea568d9":"code","1aad8418":"code","9985cc3f":"code","98c5ef9a":"code","54b7eca8":"code","daefc386":"markdown","2db3ece9":"markdown","858f17a0":"markdown","8b1bf14d":"markdown","ff2dccf6":"markdown","a6e104bd":"markdown","4b1c9c2a":"markdown","fd47b2f5":"markdown","ef310ba4":"markdown","becf3ce8":"markdown","b69d97ad":"markdown","a94b7429":"markdown","ce796797":"markdown","08f656b8":"markdown","17878848":"markdown","462d4119":"markdown","22057623":"markdown","b58c8473":"markdown","d8f48482":"markdown","d2dbaefb":"markdown","cb7ae2cb":"markdown","449b3954":"markdown","3efb07ff":"markdown","6614ce4c":"markdown","e8d7ee88":"markdown","7ae9b7fd":"markdown","8d081739":"markdown","020fc770":"markdown","a340e83f":"markdown","6791b6b2":"markdown","aa968ba7":"markdown","f52e4547":"markdown","6164f997":"markdown","261ac2e0":"markdown","e8ee086f":"markdown","34cbed11":"markdown","10b928b9":"markdown","932c1585":"markdown","04b447c0":"markdown","0d1e2d63":"markdown","39fc67c0":"markdown","67527e94":"markdown","68e43315":"markdown","027885c3":"markdown","82447e70":"markdown","23ecb4e0":"markdown","59430e03":"markdown","bebc8dc5":"markdown","3078c497":"markdown"},"source":{"34dc97d5":"import pandas as pd\nimport numpy as np\n\n# visualization\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n%matplotlib inline\n\nimport imblearn\nfrom imblearn import over_sampling\n\n# pre-processing\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder, LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split ","81d61a26":"# import model evaluation\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.metrics import roc_auc_score, accuracy_score, f1_score, precision_score, recall_score","44f753ce":"# import classifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","2af0a609":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport scipy\nfrom scipy.stats import uniform","e45934b7":"print('Pandas:', pd.__version__)\nprint('Numpy:', np.__version__)\nprint('Matplotlib:', matplotlib.__version__)\nprint('Seaborn:', sns.__version__)\nprint('Imblearn:', imblearn.__version__)\nprint('Scikit-Learn:', sklearn.__version__)\nprint('XGBoost:', xgboost.__version__)\nprint('Scipy:', scipy.__version__)","093b7420":"sns.set_style(\"whitegrid\")\nsns.color_palette(\"dark\")\nplt.style.use(\"fivethirtyeight\")","8d112549":"data_modeling = pd.read_csv('..\/input\/insurance-cross-selling-pre-processing-eda\/data_oversampling.csv')\ndata_modeling","55083add":"data_modeling.info()","89d7b61f":"X = data_modeling[[\n    'Gender_Male', 'Gender_Female',\n    'Age_log',\n    'Driving_License',\n    'Region_Code_Encoding',\n    'Previously_Insured',\n    'Vehicle_Age_Encoding',\n    'Vehicle_Damage_Encoding',\n    'Annual_Premium',\n    'Policy_Sales_Channel_Encoding',\n    'Vintage'\n]]\n\ny = data_modeling['Response']","978a0da6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","09df4013":"X_train","aa65e05f":"y_train","a2ad4076":"X_test","ed07cff0":"y_test","b30c2e1f":"col_name = [\n    'Gender_Male', 'Gender_Female',\n    'Age_log',\n    'Driving_License',\n    'Region_Code_Encoding',\n    'Previously_Insured',\n    'Vehicle_Age_Encoding',\n    'Vehicle_Damage_Encoding',\n    'Annual_Premium',\n    'Policy_Sales_Channel_Encoding',\n    'Vintage'\n]","6278fd2c":"scaler = StandardScaler().fit(X_train.values)","5a21db23":"std_means = scaler.mean_\nprint('Standardization Mean:', std_means)\n\nstd_vars = scaler.var_\nprint('Standardization Var:', std_vars)","4e77c37c":"X_train_scaled = scaler.transform(X_train.values)","e0939879":"X_train_scaled","3b6e1513":"X_test_scaled = scaler.transform(X_test.values)","fd8f5df3":"X_test_scaled","a4b96901":"rf = RandomForestClassifier(random_state = 42)\nrf = rf.fit(X_train_scaled, y_train)\nrf","07c40e5d":"test_predicted_rf = rf.predict(X_test_scaled)","43e8b7df":"print('\\033[1mRandom Forest\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_rf))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_rf))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_rf))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_rf, digits = 6))","4365c677":"train_predicted_rf = rf.predict(X_train_scaled)","6e57a752":"print('\\033[1mRandom Forest\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_rf))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_rf))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_rf))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_rf, digits = 6))","7e40ce7d":"feature_importances = pd.Series(rf.feature_importances_, index = X.columns)\n\nplt.figure(figsize = (20.7, 12))\nax = feature_importances.nlargest(11).plot(kind = 'barh')\nax.invert_yaxis()\n\nplt.xticks(fontsize = 16)\nplt.yticks(fontsize = 16)\nplt.xlabel('score', fontsize = 14)\nplt.ylabel('feature', fontsize = 14)\nplt.title('Random Forest\\nFeature Importance Score', fontsize = 24, fontweight = 'bold')\n\nplt.tight_layout()","77f9d071":"dt = DecisionTreeClassifier(random_state = 42)\ndt = dt.fit(X_train_scaled, y_train)\ndt","1a7eade1":"test_predicted_dt = dt.predict(X_test_scaled)","d1eb9929":"print('\\033[1mDecision Tree\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_dt))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_dt))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_dt))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_dt, digits = 6))","7d0e76c9":"train_predicted_dt = dt.predict(X_train_scaled)","0af382a2":"print('\\033[1mDecision Tree\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_dt))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_dt))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_dt))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_dt, digits = 6))","74abf348":"feature_importances = pd.Series(dt.feature_importances_, index = X.columns)\n\nplt.figure(figsize = (20.7, 12))\nax = feature_importances.nlargest(11).plot(kind = 'barh')\nax.invert_yaxis()\n\nplt.xticks(fontsize = 16)\nplt.yticks(fontsize = 16)\nplt.xlabel('score', fontsize = 14)\nplt.ylabel('feature', fontsize = 14)\nplt.title('Decision Tree\\nFeature Importance Score', fontsize = 24, fontweight = 'bold')\n\nplt.tight_layout()","e47de116":"xgb = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False)\nxgb = xgb.fit(X_train_scaled, y_train)\nxgb","d1d40d78":"test_predicted_xgb = xgb.predict(X_test_scaled)","91f8172d":"print('\\033[1mXGBoost\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_xgb))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_xgb))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_xgb))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_xgb, digits = 6))","2df33e29":"train_predicted_xgb = xgb.predict(X_train_scaled)","8a435499":"print('\\033[1mXGBoost\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_xgb))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_xgb))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_xgb))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_xgb, digits = 6))","30cfd513":"feature_importances = pd.Series(xgb.feature_importances_, index = X.columns)\n\nplt.figure(figsize = (20.7, 12))\nax = feature_importances.nlargest(11).plot(kind = 'barh')\nax.invert_yaxis()\n\nplt.xticks(fontsize = 16)\nplt.yticks(fontsize = 16)\nplt.xlabel('score', fontsize = 14)\nplt.ylabel('feature', fontsize = 14)\nplt.title('XGBoost\\nFeature Importance Score', fontsize = 24, fontweight = 'bold')\n\nplt.tight_layout()","ead24065":"logreg = LogisticRegression(random_state = 42)\nlogreg = logreg.fit(X_train_scaled, y_train)\nlogreg","650992a7":"test_predicted_logreg = logreg.predict(X_test_scaled)","868a1c5a":"print('\\033[1mLogistic Regression\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_logreg))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_logreg))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_logreg))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_logreg, digits = 6))","c19c6894":"train_predicted_logreg = logreg.predict(X_train_scaled)","b17efb22":"print('\\033[1mLogistic Regression\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_logreg))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_logreg))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_logreg))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_logreg, digits = 6))","3bd32346":"knn = KNeighborsClassifier(n_jobs = -1)\nknn = knn.fit(X_train_scaled, y_train)\nknn","bac09968":"test_predicted_knn = knn.predict(X_test_scaled)","f6c793c0":"print('\\033[1mK-Nearest Neighbors\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_knn))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_knn))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_knn))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_knn, digits = 6))","1c6f5fc2":"train_predicted_knn = knn.predict(X_train_scaled)","0ba096ac":"print('\\033[1mK-Nearest Neighbors\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_knn))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_knn))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_knn))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_knn, digits = 6))","3b48c9bf":"model = [\n    'Random Forest',\n    'Decision Tree',\n    'XGBoost',\n    'Logistic Regression',\n    'K-Nearest Neighbors'\n]\n\nmodel_train = [\n    train_predicted_rf,\n    train_predicted_dt,\n    train_predicted_xgb,\n    train_predicted_logreg,\n    train_predicted_knn\n]\n\nmodel_test = [\n    test_predicted_rf,\n    test_predicted_dt,\n    test_predicted_xgb,\n    test_predicted_logreg,\n    test_predicted_knn\n]\n\nmodels_evaluation = pd.DataFrame(columns = [\n    'Model',\n    'roc_auc_score TRAIN',\n    'roc_auc_score TEST',\n    'f1 TRAIN',\n    'f1 TEST',\n    'precision TRAIN',\n    'precision TEST',\n    'recall TRAIN',\n    'recall TEST',\n    'accuracy TRAIN',\n    'accuracy TEST'\n])\nmodels_evaluation","2e529ffd":"for i in range(len(model)):\n    models_evaluation = models_evaluation.append({\n        'Model' : model[i],\n        'roc_auc_score TRAIN' : roc_auc_score(y_train, model_train[i]),\n        'roc_auc_score TEST' : roc_auc_score(y_test, model_test[i]),\n        'f1 TRAIN' : f1_score(y_train, model_train[i]),\n        'f1 TEST' : f1_score(y_test, model_test[i]),\n        'precision TRAIN' : precision_score(y_train, model_train[i]),\n        'precision TEST' : precision_score(y_test, model_test[i]),\n        'recall TRAIN' : recall_score(y_train, model_train[i]),\n        'recall TEST' : recall_score(y_test, model_test[i]),\n        'accuracy TRAIN' : accuracy_score(y_train, model_train[i]),\n        'accuracy TEST' : accuracy_score(y_test, model_test[i])\n    }, ignore_index = True)\n\nmodels_evaluation","aaa28032":"models_evaluation.to_csv('.\/model_performance-TARGET ENCODING.csv', index = False)","cf384622":"plt.figure(figsize = (15, 10))\n\nlegend_elements = [\n    Line2D([0], [0], color = '#df2f2f', lw = 4, label = 'Model Performance on Test Dataset')\n]\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TEST'],\n    color = '#df2f2f',\n    label = 'TEST'\n)\n\nax = sns.scatterplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TEST'],\n    color = '#df2f2f',\n    s = 150\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nax.legend(handles = legend_elements, fontsize = 16)\n\nax.annotate(\n    text = 'Best Model', xy = (1.8, 0.927), xycoords = 'data', fontsize = 20, xytext = (-150, 0),\n    textcoords = 'offset points', horizontalalignment = 'center', verticalalignment = 'center',\n    arrowprops = dict(color = 'black')\n)\n\nax.plot('XGBoost', 0.925, 'o', ms = 60, mec = 'black', mfc = 'none', mew = 2)\n\nplt.ylabel('ROC-AUC Score', fontsize = 16)\nplt.xlabel('Model', fontsize = 16)\nplt.yticks(fontsize = 20)\nplt.xticks(fontsize = 20)","ff955b04":"plt.figure(figsize = (18, 10))\n\nax = sns.barplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TRAIN'],\n    color = '#c2c2c2',\n    label = 'TRAIN'\n)\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TEST'],\n    color = '#df2f2f',\n    label = 'TEST',\n    marker = 'o',\n    markersize = 15\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = ax.legend(loc = 0, fontsize = 20)\n\nax.annotate(\n    text = 'Best Model', xy = (2.04, 0.95), xycoords = 'data', fontsize = 20, xytext = (100, 60),\n    textcoords = 'offset points', horizontalalignment = 'center', verticalalignment = 'center',\n    arrowprops = dict(color = 'black')\n)\n\nplt.ylabel('ROC-AUC Score', fontsize = 16)\nplt.xlabel('Model', fontsize = 16)\nplt.yticks(fontsize = 20)\nplt.xticks(fontsize = 20)","421c53c3":"plt.figure(figsize = (15, 10))\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TRAIN'],\n    color = '#c2c2c2',\n    label = 'TRAIN',\n    marker = 'o',\n    markersize = 15\n)\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TEST'],\n    color = '#df2f2f',\n    label = 'TEST',\n    marker = 'o',\n    markersize = 15\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nplt.fill_between(models_evaluation['Model'], models_evaluation['roc_auc_score TRAIN'], models_evaluation['roc_auc_score TEST'], color = '#df2f2f', alpha = 0.6)\n\nL = ax.legend(loc = 0, fontsize = 20)\n\nax.annotate(\n    text = 'Best Model', xy = (2.2, 0.937), xycoords = 'data', fontsize = 20, xytext = (100, 60),\n    textcoords = 'offset points', horizontalalignment = 'center', verticalalignment = 'center',\n    arrowprops = dict(color = 'black')\n)\n\nax.plot('XGBoost', 0.925, 'o', ms = 60, mec = 'black', mfc = 'none', mew = 2)\n\nplt.ylabel('ROC-AUC Score', fontsize = 16)\nplt.xlabel('Model', fontsize = 16)\nplt.yticks(fontsize = 20)\nplt.xticks(fontsize = 20)","bfa45a60":"plt.figure(figsize = (15, 10))\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TRAIN'],\n    color = '#c2c2c2',\n    label = 'TRAIN',\n    marker = 'o',\n    markersize = 15\n)\n\nax = sns.lineplot(\n    x = models_evaluation['Model'],\n    y = models_evaluation['roc_auc_score TEST'],\n    color = '#df2f2f',\n    label = 'TEST',\n    marker = 'o',\n    markersize = 15\n)\n\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nL = ax.legend(loc = 0, fontsize = 20)\n\nax.annotate(\n    text = 'Best Model', xy = (2.2, 0.937), xycoords = 'data', fontsize = 20, xytext = (100, 60),\n    textcoords = 'offset points', horizontalalignment = 'center', verticalalignment = 'center',\n    arrowprops = dict(color = 'black')\n)\n\nax.plot('XGBoost', 0.925, 'o', ms = 60, mec = 'black', mfc = 'none', mew = 2)\n\nplt.ylabel('ROC-AUC Score', fontsize = 16)\nplt.xlabel('Model', fontsize = 16)\nplt.yticks(fontsize = 20)\nplt.xticks(fontsize = 20)","e1a0e66a":"hyperparameters = {\n    'learning_rate' : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30],\n    'max_depth' : [3, 4, 5, 6, 8, 10, 12, 15],\n    'min_child_weight' : [1, 3, 5, 7],\n    'gamma' : [0.0, 0.1, 0.2 , 0.3, 0.4 ],\n    'colsample_bytree' : [0.3, 0.4, 0.5 , 0.7],\n    'eta' : [.3, .2, .1, .05, .01, .005]\n}","d37817ad":"xgb = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False)\n\nclf = RandomizedSearchCV(xgb, hyperparameters, cv = 10, scoring = 'roc_auc')","341e28f3":"best_model = clf.fit(X_train_scaled, y_train)","f40edd0c":"print('Best learning_rate:', best_model.best_estimator_.get_params()['learning_rate'])\nprint('\\nBest max_depth:', best_model.best_estimator_.get_params()['max_depth'])\nprint('\\nBest min_child_weight:', best_model.best_estimator_.get_params()['min_child_weight'])\nprint('\\nBest gamma:', best_model.best_estimator_.get_params()['gamma'])\nprint('\\nBest colsample_bytree:', best_model.best_estimator_.get_params()['colsample_bytree'])\nprint('\\nBest eta:', best_model.best_estimator_.get_params()['eta'])","7b6dddad":"# xgb_best = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False, learning_rate = 0.1, max_depth = 12, min_child_weight = 1, gamma = 0.4, colsample_bytree = 0.4, eta = 0.01)","f6936058":"# xgb_best = xgb_best.fit(X_train_scaled, y_train)","85a3f877":"test_predicted_best_model = best_model.predict(X_test_scaled)","e386eb3c":"print('\\033[1mBest Model:\\033[0;0m')\nprint('\\033[1mXGBoost\\033[0;0m')\n\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, test_predicted_best_model))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, test_predicted_best_model))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, test_predicted_best_model))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, test_predicted_best_model, digits = 6))","eda1eb37":"train_predicted_best_model = best_model.predict(X_train_scaled)","dea568d9":"print('\\033[1mBest Model:\\033[0;0m')\nprint('\\033[1mXGBoost\\033[0;0m')\n\nprint('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_best_model))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_best_model))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_best_model))\n\nprint('\\nClassification Report: Training Data\\n', classification_report(y_train, train_predicted_best_model, digits = 6))","1aad8418":"np.unique(train_predicted_best_model, return_counts=True)","9985cc3f":"np.unique(y_train, return_counts=True)","98c5ef9a":"np.unique(test_predicted_best_model, return_counts=True)","54b7eca8":"np.unique(y_test, return_counts=True)","daefc386":"#### Train","2db3ece9":"### Predict Testing Data","858f17a0":"#### Test","8b1bf14d":"### Model Evaluation","ff2dccf6":"### Predict Testing Data","a6e104bd":"#### Test","4b1c9c2a":"# Modeling","fd47b2f5":"# Standardization Scaling","ef310ba4":"## Model Performance Visualization","becf3ce8":"#### Test","b69d97ad":"### Feature Importance","a94b7429":"### Feature Importance","ce796797":"### Fit Training Data","08f656b8":"## Random Forest","17878848":"## K-Nearest Neighbors","462d4119":"### Predict Testing Data","22057623":"### Model Evaluation","b58c8473":"#### Train","d8f48482":"### Predict Testing Data","d2dbaefb":"## Chosen Model: XGBoost","cb7ae2cb":"### Fit Training Data","449b3954":"#### Test","3efb07ff":"## Evaluation Summary","6614ce4c":"**XGBoost** the performance of xgboost is the highest in terms of auc-roc score (~0.92), this model also performed well on the test dataset and **not overfitted** neither underfitted.","e8d7ee88":"#### Train","7ae9b7fd":"#### Best Parameters","8d081739":"https:\/\/www.analyticsvidhya.com\/blog\/2016\/03\/complete-guide-parameter-tuning-xgboost-with-codes-python\/","020fc770":"## XGBoost","a340e83f":"### Fit Training Data","6791b6b2":"### Dataset Train","aa968ba7":"#### Train","f52e4547":"### Dataset Test","6164f997":"### Predict Testing Data","261ac2e0":"## Decision Tree","e8ee086f":"#### Train","34cbed11":"### Model Evaluation","10b928b9":"# Load Data\n- From stage 1","932c1585":"#### Predict Testing Data","04b447c0":"## Logistic Regression","0d1e2d63":"### Fit Training Data","39fc67c0":"### Fit Training Data","67527e94":"#### Test","68e43315":"### Model Evaluation","027885c3":"# Train Test Split","82447e70":"#### Fit Training Data","23ecb4e0":"### Model Evaluation","59430e03":"### Hyperparameter Tuning","bebc8dc5":"- We will split the dataset before scaling to avoid data leakage","3078c497":"### Feature Importance"}}