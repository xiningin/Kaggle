{"cell_type":{"c279beec":"code","4e5ff315":"code","ed772cc8":"code","df3cdfd1":"code","f99c3cc6":"code","500623a7":"code","66b527fe":"code","d7db0844":"code","d937f699":"code","a236018d":"code","d7ee8981":"code","9e5569cc":"code","8c32189e":"code","f8c50528":"code","7db1e5b6":"code","9ec42c44":"code","800d5dfd":"code","52ef8ac3":"code","486054dd":"code","99c3fa34":"code","3ea06aff":"markdown","0f46f236":"markdown","247912b6":"markdown","05ea8d29":"markdown","e8e14906":"markdown","9410b271":"markdown","6a9fb20e":"markdown","14594819":"markdown"},"source":{"c279beec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4e5ff315":"df = pd.read_csv(\"..\/input\/tmdb_movies_data.csv\")\ndf.info()","ed772cc8":"df.head()","df3cdfd1":"df.tail(2)","f99c3cc6":"df.describe()","500623a7":"#this dataset contains null value also \n#lets find out the null value\ndf.isna().sum()","66b527fe":"#fill the null values with 0\ndf.fillna(0)\n","d7db0844":"#finding duplicate rows\nsum(df.duplicated())","d937f699":"#Dropping duplicate row\ndf.drop_duplicates(inplace = True)\n#After Dropping\nprint(\"After Dropping Table(Rows, Col) :\", df.shape)","a236018d":"#Changing Format Of Release Date Into Datetime Format\ndf['release_date'] = pd.to_datetime(df['release_date'])","d7ee8981":"df['release_date'].head()","9e5569cc":"#lets remove these coloumn\ndf.drop(['budget_adj','revenue_adj','overview','imdb_id','homepage','tagline'],axis =1,inplace = True)","8c32189e":"print(\"(rows,cols): \",df.shape)","f8c50528":"#checking with 0 values in budget and revenew columns\nprint(\"Budget col having 0 value :\",df[(df['budget']==0)].shape[0])\nprint(\"Revenue col having 0 value :\", df[(df['revenue']==0)].shape[0])","7db1e5b6":"import seaborn as sns\nimport matplotlib.pyplot as plt","9ec42c44":"# Counting the number of movies in each year \ndata = df.groupby('release_year').count()['id']\nprint(data.tail())","800d5dfd":"#grouping the data a\/q to release year and counting movies\n\nsns.set(rc={'figure.figsize':(10,5)})\nsns.set_style(\"darkgrid\")\ndf.groupby('release_year').count()['id'].plot(xticks = np.arange(1960,2016,5))\nplt.title(\"Year Vs Number Of Movies\",fontsize = 14)\nplt.xlabel('Release year',fontsize = 13)\nplt.ylabel('Number Of Movies',fontsize = 13)","52ef8ac3":"df['Profit'] = df['revenue'] - df['budget']\ndef find_minmax(x):\n    #use the function 'idmin' to find the index of lowest profit movie.\n    min_index = df[x].idxmin()\n    #use the function 'idmax' to find the index of Highest profit movie.\n    high_index = df[x].idxmax()\n    high = pd.DataFrame(df.loc[high_index,:])\n    low = pd.DataFrame(df.loc[min_index,:])\n    \n    #print the movie with high and low profit\n    print(\"Movie Which Has Highest \"+ x + \" : \",df['original_title'][high_index])\n    print(\"Movie Which Has Lowest \"+ x + \"  : \",df['original_title'][min_index])\n    return pd.concat([high,low],axis = 1)\n\n#call the find_minmax function.\nfind_minmax('Profit')","486054dd":"#make a plot which contain top 10 movies which earn highest profit.\n#sort the 'Profit' column in decending order and store it in the new dataframe,\ninfo = pd.DataFrame(df['Profit'].sort_values(ascending = False))\ninfo['original_title'] = df['original_title']\ndata = list(map(str,(info['original_title'])))\nx = list(data[:10])\ny = list(info['Profit'][:10])\n\n#make a plot usinf pointplot for top 10 profitable movies.\nax = sns.pointplot(x=y,y=x)\n\n#setup the figure size\nsns.set(rc={'figure.figsize':(10,5)})\n#setup the title and labels of the plot.\nax.set_title(\"Top 10 Profitable Movies\",fontsize = 15)\nax.set_xlabel(\"Profit\",fontsize = 13)\nsns.set_style(\"darkgrid\")","99c3fa34":"df['budget'] = df['budget'].replace(0,np.NAN)\nfind_minmax('budget')","3ea06aff":"![](http:\/\/)**Let's Observe this DataSet**\n<br>\nby getiing summary of the dataset<\/br>","0f46f236":"**Data Cleaning**","247912b6":"**Exploratory Data Analysis**","05ea8d29":"## **Data Wrangling**     \n<br>\n> We will be using the relevant data only and removing the unused data\n<\/br>","e8e14906":"**Let's Find out Which movies has highest or lowest profit**","9410b271":"**Removing column which are not going to be used**","6a9fb20e":" **Dropping rows which contain incorrect or inappropriate values**","14594819":"**Movies with highest and lowest budget**"}}