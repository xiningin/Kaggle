{"cell_type":{"8b85534d":"code","2bb616ce":"code","980beae5":"code","c187f31f":"code","40c9c285":"code","16b6679b":"code","38293298":"code","60620bba":"code","535023a2":"code","911eed6c":"code","55d6d4e6":"code","4dde3c32":"code","d4169b8c":"code","dc2c1a1f":"code","8afb5767":"code","bbfcbc80":"code","0889ab8b":"code","e121504c":"code","b68a0d9f":"code","beaafba2":"code","72f0b563":"code","b4fe8ad8":"markdown","3081f555":"markdown","4b6451c2":"markdown","8b0cf8b7":"markdown","f865e52c":"markdown","7bd3b33d":"markdown","9ef5a68d":"markdown","4bd0d896":"markdown","1acdc1e6":"markdown"},"source":{"8b85534d":"import tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D,Dense,Dropout\nfrom tensorflow.keras.models  import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","2bb616ce":"import matplotlib.pyplot as plt\ndef plot_imgs(item_dir, top=10):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:5]\n  \n    plt.figure(figsize=(10, 10))\n  \n    for idx, img_path in enumerate(item_files):\n        plt.subplot(5, 5, idx+1)\n    \n        img = plt.imread(img_path)\n        plt.tight_layout()         \n        plt.imshow(img, cmap='gray') ","980beae5":"import os\nprint(os.listdir('..\/input\/garbage-classification\/garbage classification\/Garbage classification'))","c187f31f":"data_path = '..\/input\/garbage-classification\/garbage classification\/Garbage classification'","40c9c285":"plot_imgs(data_path+'\/cardboard')","16b6679b":"plot_imgs(data_path+'\/glass')","38293298":"plot_imgs(data_path+'\/paper')","60620bba":"plot_imgs(data_path+'\/plastic')","535023a2":"plot_imgs(data_path+'\/metal')","911eed6c":"plot_imgs(data_path+'\/trash')","55d6d4e6":"batch_size = 32","4dde3c32":"# Data Generator\ntrain=ImageDataGenerator(horizontal_flip=True, vertical_flip=True,validation_split=0.1,rescale=1.\/255,\n                         shear_range = 0.1,zoom_range = 0.1,\n                         width_shift_range = 0.1,\n                         height_shift_range = 0.1,)\n\ntest=ImageDataGenerator(rescale=1.\/255,validation_split=0.1)\n\ntrain_generator=train.flow_from_directory(data_path,target_size=(512,384),batch_size=batch_size,class_mode='categorical',subset='training')\n\ntest_generator=test.flow_from_directory(data_path,target_size=(512,384),batch_size=batch_size,class_mode='categorical',subset='validation')","d4169b8c":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\nprint(labels)","dc2c1a1f":"num_classes = 6","8afb5767":"# Build Model\nmodel = Sequential()\n   \nmodel.add(Conv2D(32,(3,3), padding='same', input_shape=(512,384,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2))) \nmodel.add(Conv2D(64,(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2))) \nmodel.add(Conv2D(32,(3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2))) \nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes,activation='softmax'))\n\nmodel.summary()","bbfcbc80":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","0889ab8b":"model_path=\"garbage_cnn.h5\"\n#checkpoint1 = ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\n#callbacks_list = [checkpoint1]","e121504c":"num_epochs = 200\nstep_size_train=train_generator.n\/\/train_generator.batch_size\nstep_size_test =test_generator.n\/\/test_generator.batch_size","b68a0d9f":"# Train Model\nhistory = model.fit_generator(train_generator, epochs=num_epochs, steps_per_epoch=step_size_train,validation_data=test_generator,\n                    validation_steps=step_size_test)#,callbacks=callbacks_list)","beaafba2":"# Evaluate Model\nscore = model.evaluate_generator(test_generator, steps=step_size_test)\nprint(score)","72f0b563":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,train,test): \n    plt.plot(hisData.history[train])\n    plt.plot(hisData.history[test])\n    plt.title('Training History')\n    plt.ylabel(train)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'test'], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","b4fe8ad8":"## Paper: [Comparative Analysis of Multiple Deep CNN Models for Waste Classification](https:\/\/arxiv.org\/pdf\/2004.02168.pdf)\n### ResNet18 performance is best (accuracy=87%)\n![image.png](attachment:image.png)\n","3081f555":"## Data Generator","4b6451c2":"# Garbage Classification","8b0cf8b7":"## Dataset: [TrashNet](https:\/\/www.kaggle.com\/asdasdasasdas\/garbage-classification) ","f865e52c":"## Train Model","7bd3b33d":"## Evaluate Model","9ef5a68d":"## Paper: [Fine-Tuning Models Comparisons on Garbage Classification for Recyclebility](https:\/\/arxiv.org\/ftp\/arxiv\/papers\/1908\/1908.04393.pdf)\n\n![image.png](attachment:image.png)","4bd0d896":"## Training History","1acdc1e6":"## Build Model"}}