{"cell_type":{"9ac90a0b":"code","78323c1c":"code","d0c71e0d":"code","e4cd6d19":"code","833ef151":"code","049c7f01":"code","2122b0e2":"code","7f2608ce":"code","af6a4b91":"code","0b2416eb":"code","2816c235":"code","121dda90":"code","65fb3809":"code","92a080ad":"code","96789d1c":"code","d2707b04":"code","8ad47ada":"markdown","926e9f30":"markdown","a5f91c5d":"markdown","9f9fcd69":"markdown","4f8da315":"markdown","49787f8d":"markdown","8e64cc41":"markdown","759edd30":"markdown","b73826f9":"markdown","e5c2b5ad":"markdown","88142676":"markdown","d8383cfb":"markdown","a5fbf737":"markdown","7c6526c8":"markdown","347a4ca8":"markdown","04df7882":"markdown","ad49a535":"markdown","2d307fe9":"markdown","928131d4":"markdown","0ce4ae1f":"markdown","1e2621c2":"markdown","dd429f42":"markdown"},"source":{"9ac90a0b":"# Pandas for managing datasets\nimport pandas as pd","78323c1c":"# Matplotlib for additional customization\n\nfrom matplotlib import pyplot as plt\n\n%matplotlib inline","d0c71e0d":"# install seaborn\n\n!pip install seaborn","e4cd6d19":"# Seaborn for plotting and styling\nimport seaborn as sns","833ef151":"# Read dataset\nPokemon_df = pd.read_csv('..\/input\/Pokemon_2.csv')","049c7f01":"# Display first 5 observations\nPokemon_df.head()","2122b0e2":"# Recommended way to draw a Scatter Plot from a Dataframe\n\nsns.lmplot(x='Attack', y='Defense', data=Pokemon_df)","7f2608ce":"# Scatterplot arguments\nsns.lmplot(x='Attack', y='Defense', \n           data=Pokemon_df,\n           fit_reg=False, # No regression line\n           hue='Stage')   # Color by evolution stage","af6a4b91":"# Scatterplot arguments\nsns.lmplot(x='Attack', y='Defense', \n           data=Pokemon_df,\n           fit_reg=False, # No regression line\n           hue='Stage')   # Color by evolution stage\n\n# Tweak using Matplotlib\nplt.title('Scatter Plot using Seaborn Package')","0b2416eb":"# Boxplot\n\nplt.figure(figsize=(14,7))\n\nsns.boxplot(data=Pokemon_df)\n\n","2816c235":"# Set theme\n\nplt.figure(figsize=(14,7))\n\nsns.set_style('whitegrid')\n \n# Violin plot\nsns.violinplot(x='Stage', y='Attack', data=Pokemon_df)","121dda90":"# Swarm plot with Pokemon color palette\n\npkmn_type_colors = ['#78C850',  # Stage 1 \n                    '#F08030',  # Stage 2\n                    '#6890F0'   # Stage 3\n                   ]\n\nplt.figure(figsize=(14,7))\n\nsns.swarmplot(x='Stage', y='Attack', data=Pokemon_df, \n              palette=pkmn_type_colors)","65fb3809":"# Set figure size with matplotlib\nplt.figure(figsize=(10,6))\n \n# Create plot\nsns.violinplot(x='Stage',\n               y='Attack', \n               data=Pokemon_df, \n               inner=None, # Remove the bars inside the violins\n               palette=pkmn_type_colors)\n \nsns.swarmplot(x='Stage', \n              y='Attack', \n              data=Pokemon_df, \n              color='k', # Make points black\n              alpha=0.7) # and slightly transparent\n \n# Set title with matplotlib\nplt.title('Attack by Stage')","92a080ad":"# Calculate correlations\ncorr = Pokemon_df.corr()\n\nplt.figure(figsize=(14,7))\n\n# Heatmap\nsns.heatmap(corr)","96789d1c":"# Distribution Plot (a.k.a. Histogram)\n\nplt.figure(figsize=(14,7))\n\nsns.distplot(Pokemon_df.Attack)\n","d2707b04":"# Count Plot (a.k.a. Bar Plot)\n\nplt.figure(figsize=(14,7))\n\nsns.countplot(x='Stage', \n              data=Pokemon_df, \n              palette=pkmn_type_colors)\n \n# Rotate x-labels\nplt.xticks(rotation=-45)","8ad47ada":"#### Overlaying Plots \n\nIt's pretty straightforward to overlay plots using Seaborn, and it works the same way as with Matplotlib. Here's what we'll do:\n\n    First, we'll make our figure larger using Matplotlib.\n    Then, we'll plot the violin plot. However, we'll set inner=None to remove the bars inside the violins.\n    Next, we'll plot the swarm plot. This time, we'll make the points black so they pop out more.\n    Finally, we'll set a title using Matplotlib.","926e9f30":"#### Swarm plot \n\nThis visualization will show each point, while \"stacking\" those with similar values:","a5f91c5d":"Tip: we gave each of our imported libraries an alias. Later, we can invoke Pandas with pd, Matplotlib with plt, and Seaborn with sns.","9f9fcd69":"Now , lets ingest the Data ( pokeman.csv ) into our Python Script \/ Kernel .\n\nTip: The argument  index_col=0 simply means we'll treat the first column of the dataset as the ID column.\n","4f8da315":"### Seaborn Themes \n\nAnother advantage of Seaborn is that it comes with decent style themes right out of the box. The default theme is called 'darkgrid'.\n\nNext, we'll change the theme to 'whitegrid' while making a violin plot.\n\nViolin plots are useful alternatives to box plots.\nThey show the distribution (through the thickness of the violin) instead of only the summary statistics.\nFor example, we can visualize the distribution of Attack by Pok\u00e9mon's primary type:","49787f8d":"Some of us who are alreayd familiar with Matplotlib for visualization , might have a question on why do we need another visualization package , when we do already have Matplotlib.\n\nAnswer to that excllent question is -\n\nFor those who\u2019ve tinkered with Matplotlib before, you may have wondered, \u201cwhy does it take 10 lines of code just to make a decent-looking histogram?\u201d\n\nWell, if you\u2019re looking for a simpler way to plot attractive charts, then you\u2019ve come to right package - Seaborn. ","8e64cc41":"## Python : Seaborn for Visualization\n\n\nPriyaranjan Mohanty","759edd30":"### Installing Seaborn \n\nNote - Seaborn is not shipped with base Python package and thus has to be installed before it can be used.","b73826f9":"### Objective of this Kernel \n\nObjective of this kernel is to explore & explain the Seaborn package for Visualization.","e5c2b5ad":"#### Import Pandas Package","88142676":"#### Barplot \n\nBar plots help you visualize the distributions of categorical variables.\n\n","d8383cfb":"Lets check next , what role Pandas play with seaborn package\n\n\nEven though this is a Seaborn guide, Pandas actually plays a very important role. You see, Seaborn's plotting functions benefit from a base DataFrame that's reasonably formatted.\n\nFor example, let's say we wanted to make a box plot for our Pok\u00e9mon's combat stats:","a5fbf737":"### Drawing a Scatter Plot .\n\nIn Seaborn , a scatter plot is just one line of code using the lmplot() function.\n\nThere are two ways you can do so.\n\n    The first way (recommended) is to pass your DataFrame to the data= argument, while passing column names to the axes arguments, x= and y=.\n\n    The second way is to directly pass in Series of data to the axes arguments.\n    \nFor example, let's compare the Attack and Defense stats for our Pok\u00e9mon:","7c6526c8":"#### Histogram\n\nHistograms allow you to plot the distributions of numeric variables.","347a4ca8":"#### import Matplotlib, which will help us customize our plots further.\n\nTip: In Jupyter Notebook, you can also include %matplotlib inline to display your plots inside your notebook.","04df7882":"How can we customize the above plot ......\n\nRemember, Seaborn is a high-level interface to Matplotlib. From our experience, Seaborn will get you most of the way there, but you'll sometimes need to bring in Matplotlib.","ad49a535":"Lets see the content of the Dataset just read into Python","2d307fe9":"By the way, Seaborn doesn't have a dedicated scatter plot function, which is why you see a diagonal line. We actually used Seaborn's function for fitting and plotting a regression line.\n\nThankfully, each plotting function has several useful options that you can set. Here's how we can tweak the lmplot():\n\n    First, we'll set fit_reg=False to remove the regression line, since we only want a scatter plot.\n    \n    Then, we'll set hue='Stage' to color our points by the Pok\u00e9mon's evolution stage. This hue argument is very useful because it allows you to express a third dimension of information using color.","928131d4":"#### Install & import seaborn","0ce4ae1f":"Let's import all the required packages for this Kernel","1e2621c2":"#### Heatmap \n\nUsing the Correlation Matric as input","dd429f42":"### Seaborn\n\nSeaborn provides a high-level interface to Matplotlib, a powerful but sometimes unwieldy Python visualization library.\n\nOn Seaborn\u2019s official website, they state:\n\n    If matplotlib \u201ctries to make easy things easy and hard things possible\u201d, seaborn tries to make a well-defined set of hard things easy too.\n\nAbove description is a pretty good summary of Seaborn\u2019s strengths. \n\nIn practice, the \u201cwell-defined set of hard things\u201d includes:\n\n    Using default themes that are aesthetically pleasing.\n    Setting custom color palettes.\n    Making attractive statistical plots.\n    Easily and flexibly displaying distributions.\n    Visualizing information from matrices and DataFrames.\n    Those last three points are why Seaborn is our tool of choice for Exploratory Analysis. \n    It makes it very easy to \u201cget to know\u201d your data quickly and efficiently.\n\nHowever, Seaborn is a complement, not a substitute, for Matplotlib. \n\nThere are some tweaks that still require Matplotlib, and we shall cover the same in this kernel."}}