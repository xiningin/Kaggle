{"cell_type":{"fdb8ca20":"code","0783806a":"code","a9f5cad9":"code","8cebde80":"code","71795282":"code","cef0bfda":"code","b1fc81dd":"code","10de3b40":"code","291a6cdd":"code","4bd5c61b":"code","abe47cb6":"code","05bcabe3":"code","f79207e3":"code","752e3ea1":"code","86ff02e3":"code","7ad95a8a":"code","4a7c8fac":"code","be39135f":"code","5406ae97":"code","2d2bcc9e":"code","9c45a873":"code","58bc99f4":"code","4f129f0f":"code","b0040133":"code","ef4c46ec":"markdown","1f989420":"markdown","740fbc18":"markdown","51af6d3a":"markdown"},"source":{"fdb8ca20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0783806a":"#read the train set\ntrain = pd.read_csv('..\/input\/train.csv')\nprint(train.shape)\ntrain.head()","a9f5cad9":"train.info()","8cebde80":"train.describe()","71795282":"# read the test set\ntest= pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\ntest.head()","cef0bfda":"Y_train=train[\"label\"]\nX_train=train.drop([\"label\"],axis=1)","b1fc81dd":"# visualize number of digits classes\nplt.figure(figsize=(15,7))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\nY_train.value_counts()","10de3b40":"X_train=X_train\/255.0\ntest=test\/255.0\nprint(\"X_train shape :\" ,X_train.shape)\nprint(\"Test shape :\",test.shape)","291a6cdd":"print(type(X_train))","4bd5c61b":"#reshape \nX_train=X_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","abe47cb6":"#label encoding\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train=to_categorical(Y_train,num_classes=10)","05bcabe3":"from sklearn.model_selection import train_test_split\nX_train,X_val,Y_train,Y_val=train_test_split(X_train,Y_train,test_size=0.2,random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","f79207e3":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(64, kernel_size = (5,5),padding = 'same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(32,kernel_size=(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),padding=\"same\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(32,kernel_size=(5,5),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),padding=\"same\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(16,kernel_size=(2,2),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2),padding=\"same\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64,activation = \"relu\"))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10, activation = \"softmax\"))\n","752e3ea1":"model.summary()","86ff02e3":"# Define the optimizer\noptimizer=Adam(lr=0.003,beta_1=0.9,beta_2=0.999)","7ad95a8a":"#compile model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n","4a7c8fac":"# data augmentation I dont use it now\n\ndatagen = ImageDataGenerator(\n    \"\"\"\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\"\"\"\n    )\ndatagen.fit(X_train)\n","be39135f":"#Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=256),\n                              epochs = 20, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0]\/\/256)\n","5406ae97":"test_x = pd.read_csv('..\/input\/test.csv')\ntest_x = test_x.values.reshape(-1,28,28,1)\ntest_x = test_x \/ 255.0","2d2bcc9e":"predictions=model.predict(test_x)","9c45a873":"predictions[100]","58bc99f4":"predictions= np.argmax(predictions, axis=1)","4f129f0f":"submission=pd.DataFrame({'ImageId':range(1,len(test_x)+1),'Label':predictions})\nsubmission.to_csv(\"cnn_results3.csv\",index=False)","b0040133":"submission.head(7)\n","ef4c46ec":"# Load the data\n","1f989420":"## Implementing with Keras\n","740fbc18":"# Normalization","51af6d3a":"# Splitting\n\n"}}