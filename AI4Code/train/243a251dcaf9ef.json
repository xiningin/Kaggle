{"cell_type":{"89d958bd":"code","97a0b17f":"code","66bf1e2c":"code","c96a079e":"code","fb204a24":"code","107e9818":"code","5f866634":"code","a92df284":"code","d1ed72e1":"code","108269be":"code","0fa0335e":"code","d2a1dda2":"code","6eef175e":"code","84bfff31":"code","ddfed1b5":"code","2e438bed":"code","14b5aec8":"code","054a95f9":"code","0b218bed":"code","ef93592e":"code","eef529fa":"code","2a0f0670":"code","2f7e2189":"markdown","1f682b01":"markdown","408be9f5":"markdown","9ab7ec2c":"markdown","eac2d277":"markdown"},"source":{"89d958bd":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sbn\n\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split\n\n","97a0b17f":"train_data = pd.read_csv('..\/input\/train.csv',)\ntest_data = pd.read_csv('..\/input\/test.csv')\n","66bf1e2c":"train_data.head()","c96a079e":"test_data.head()","fb204a24":"label_df = train_data['label']\ntrain_data.drop(['label'],inplace=True,axis=1)\ntrain_labels = pd.get_dummies(label_df,columns= ['label'])\n\ntrain_labels[train_labels.columns] = train_labels[train_labels.columns].\\\n                                        astype(np.float)","107e9818":"print(f\"shape of train_labels = {train_labels.shape}\")\nprint(f\"shape of train_data = {train_data.shape}\")\nprint(f\"shape of test_data = {test_data.shape}\")","5f866634":"#images = train_data.iloc[:,1:].values\nimages = train_data.astype(np.float)\n\nimages = np.multiply(images,1.0\/255)\ntest_images = np.multiply(test_data, 1.0 \/ 255.0)\ntest_images = test_images.astype(np.float)\nprint(f\"dimensions of the images dataframe {images.shape}\")\nprint(f\"dimensions of the images dataframe {test_images.shape}\")","a92df284":"image_height = image_width = np.ceil(np.sqrt(images.shape[1])).astype(np.uint8)\n","d1ed72e1":"print(f\"height of the image {image_height}\")\nprint(f\"width of each image {image_width}\")","108269be":"x_train,x_test,y_train,y_test = train_test_split(images,\n                                                 train_labels,\n                                                 test_size = 0.20, \n                                                 random_state = 42\n                                                )\nx_train = x_train.reset_index(drop=True)\nx_test = x_test.reset_index(drop = True)\ny_test = y_test.reset_index(drop = True)\ny_train = y_train.reset_index(drop = True)\n\n\n","0fa0335e":"print(f\"shape of train_x = {x_train.shape}, y_train = {y_train.shape}\")\nprint(f\"shape of test_x = {x_test.shape}, y_test= {y_test.shape}\")\n","d2a1dda2":"x_train.head()","6eef175e":"epochs_completed = 0\nindex_in_epoch = 0\nnum_examples = x_train.shape[0]\n\ndef next_batch(batch_size):\n    \n    global x_train\n    global y_train\n    global index_in_epoch\n    global epochs_completed\n    \n    start = index_in_epoch\n    index_in_epoch += batch_size\n    \n    # when all trainig data have been already used, it is reorder randomly    \n    if index_in_epoch > num_examples:\n        # finished epoch\n        epochs_completed += 1\n        # shuffle the data\n        perm = np.arange(num_examples)\n        np.random.shuffle(perm)\n        x_train = x_train.iloc[perm]\n        y_train = y_train.iloc[perm]\n        # start next epoch\n        start = 0\n        index_in_epoch = batch_size\n        assert batch_size <= num_examples\n    end = index_in_epoch\n    return x_train[start:end], y_train[start:end]","84bfff31":"x = tf.placeholder('float',shape=[None,784])\ny_ = tf.placeholder('float',shape=[None,10])\nbatch_size = tf.placeholder('float')\nkeep_prob = tf.placeholder('float')\n\nw = tf.Variable(tf.zeros([784,10]),name='Weights')\nb = tf.Variable(tf.zeros([10]),name= 'bias')\n\ny = tf.nn.softmax(tf.matmul(x,w)+b)\n\ncros_entropy = tf.reduce_mean(\n                tf.nn.softmax_cross_entropy_with_logits_v2(labels = y_,\n                                                      logits = y))\n","ddfed1b5":"train_step = tf.train.\\\n            GradientDescentOptimizer(0.5).\\\n            minimize(cros_entropy)    \n\ncorrect_prediction = tf.equal(tf.argmax(y_,1),tf.argmax(y,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction,'float'))\n\ninit = tf.initialize_all_variables()\nsess = tf.InteractiveSession()\n\nsess.run(init)\n","2e438bed":"# # visualisation variables\n# train_accuracies = []\n# validation_accuracies = []\n# x_range = []\n# TRAINING_ITERATIONS = 1000\n# DROPOUT = 0.5\n\n# display_step = 1\n# for i in range(TRAINING_ITERATIONS):\n\n#     #get new batch\n#     batch_xs, batch_ys = next_batch(BATCH_SIZE)        \n\n    \n#     if i%display_step == 0 or (i+1) == TRAINING_ITERATIONS:\n        \n#         train_accuracy = accuracy.eval(feed_dict={x:batch_xs, \n#                                                   y_: batch_ys, \n#                                                   keep_prob: 1.0})       \n#         if(i%100 == 0):\n#             validation_accuracy = accuracy.eval(feed_dict={ x: x_test[0:BATCH_SIZE], \n#                                                             y_: y_test[0:BATCH_SIZE], \n#                                                             keep_prob: 1.0})                                  \n#             print('training_accuracy \/ validation_accuracy => %.2f \/ %.2f for step %d'%(train_accuracy, validation_accuracy, i))\n            \n#             validation_accuracies.append(validation_accuracy)\n            \n#         else:\n#              print('training_accuracy => %.4f for step %d'%(train_accuracy, i))\n#         train_accuracies.append(train_accuracy)\n#         x_range.append(i)\n        \n#         # increase display_step\n#         if i%(display_step*10) == 0 and i:\n#             display_step *= 10\n#     # train on batch\n#     sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys, keep_prob: DROPOUT})","14b5aec8":"x_image = tf.reshape(x,[-1,28,28,1],name='x_image')","054a95f9":"def weight_variable(dim):\n    w_init = tf.truncated_normal(dim,stddev=0.1)\n    return tf.Variable(w_init)\n\ndef bias_variable(dim):\n    b_init = tf.constant(0.2, shape = dim,)\n    \n    return tf.Variable(b_init)\n","0b218bed":"def conv_mnist(x,W):\n    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')\ndef max_pool_mnist(x):\n    return tf.nn.max_pool(x,ksize=[1,2,2,1],\n                         strides= [1,2,2,1], padding = 'SAME')","ef93592e":"keep_prob = tf.placeholder('float')\nBATCH_SIZE = 50\nLEARNING_RATE = 1e-3\n\nW_con1 = weight_variable([5,5,1,32])\nb_con1 = bias_variable([32])\n\nh_conv1 = tf.nn.relu(conv_mnist(x_image,W_con1)+b_con1)\nh_pool1= max_pool_mnist(h_conv1)\n\nW_con2 = weight_variable([5,5,32,64])\nb_con2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv_mnist(h_pool1,W_con2)+b_con2)\nh_pool2= max_pool_mnist(h_conv2)\n\n\nW_con3 = weight_variable([7*7*64,1024])\nb_con3 = bias_variable([1024])\n\nh_pool_flat1 = tf.reshape(h_pool2,[-1,7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool_flat1,W_con3)+b_con3)\n\nh_fc_drop = tf.nn.dropout(h_fc1,keep_prob)\n\nW_con_fin = weight_variable([1024,10])\nb_con_fin = bias_variable([10])\n\n\ny_conv = tf.matmul(h_fc_drop,W_con_fin) + b_con_fin\n\ncros_entropy = tf.reduce_mean(\n                tf.nn.softmax_cross_entropy_with_logits_v2(labels = y_,\n                                                      logits = y_conv))\n\ntrain_step = tf.train.AdamOptimizer(LEARNING_RATE).minimize(cros_entropy)    \n\ncorrect_prediction = tf.equal(tf.argmax(y_,1),tf.argmax(y_conv,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction,'float'))\n\ninit = tf.initialize_all_variables()\nsess = tf.InteractiveSession()\n\nsess.run(init)\n","eef529fa":"# visualisation variables\ntrain_accuracies = []\nvalidation_accuracies = []\nx_range = []\nTRAINING_ITERATIONS = 3000\nDROPOUT = 0.2\n\ndisplay_step = 1\nfor i in range(TRAINING_ITERATIONS):\n\n    #get new batch\n    batch_xs, batch_ys = next_batch(BATCH_SIZE)        \n\n    \n    if i%display_step == 0 or (i+1) == TRAINING_ITERATIONS:\n        \n        train_accuracy = accuracy.eval(feed_dict={x:batch_xs, \n                                                  y_: batch_ys, \n                                                  keep_prob: 1.0})       \n        if(i%100 == 0):\n            validation_accuracy = accuracy.eval(feed_dict={ x: x_test[0:BATCH_SIZE], \n                                                            y_: y_test[0:BATCH_SIZE], \n                                                            keep_prob: 1.0})                                  \n            print('training_accuracy \/ validation_accuracy => %.2f \/ %.2f for step %d'%(train_accuracy, validation_accuracy, i))\n            \n            validation_accuracies.append(validation_accuracy)\n            \n        else:\n             print('training_accuracy => %.4f for step %d'%(train_accuracy, i))\n        train_accuracies.append(train_accuracy)\n        x_range.append(i)\n        \n        # increase display_step\n        if i%(display_step*10) == 0 and i:\n            display_step *= 10\n    # train on batch\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys, keep_prob: DROPOUT})","2a0f0670":"# using batches is more resource efficient\npredict = tf.argmax(y_conv,1)\npredicted_lables = np.zeros(test_images.shape[0])\n\nfor i in range(0,test_images.shape[0]\/\/BATCH_SIZE):\n    predicted_lables[i*BATCH_SIZE : (i+1)*BATCH_SIZE] = predict.eval(feed_dict={x: test_images[i*BATCH_SIZE : (i+1)*BATCH_SIZE], \n                                                                                keep_prob: 1.0})\n\n\nprint('predicted_lables({0})'.format(len(predicted_lables)))\n\n\n# save results\nnp.savetxt('results.csv', \n           np.c_[range(1,len(test_images)+1),predicted_lables], \n           delimiter=',', \n           header = 'ImageId,Label', \n           comments = '', \n           fmt='%d')\n","2f7e2189":"**Test helper functions**","1f682b01":"Lets start with Deeplearning","408be9f5":"# Digit recognition using Neural Networks","9ab7ec2c":"Please if you like this kernel give some encouragement by an upvote.","eac2d277":"set the intial hyper parameters"}}