{"cell_type":{"694b97e9":"code","610f5353":"code","32e8edea":"code","e1380d8d":"code","ec360059":"code","174a4510":"code","0a5ba9c9":"code","f177257d":"code","cc48ecc6":"code","f4ffdf7e":"code","98fa657b":"code","c76e3605":"code","5c638b1e":"code","8318ecba":"code","81f2b2a4":"code","5dd3e618":"code","ecbdc439":"code","cbc540c1":"code","5f1cb0b2":"code","e5b045f1":"code","aa17f079":"code","8d4ddbe8":"code","d7e2c286":"code","43bb0841":"code","f50a0f9d":"code","8f14b8f9":"code","993061e4":"code","ee846200":"code","f4c3ed8b":"code","dcc0dbb9":"code","824f1d06":"code","76bc4dd5":"code","53b4de69":"code","de69f405":"code","19b396c8":"code","3c4d9698":"code","5e1d5a5b":"code","b87dbb42":"code","2c8c25eb":"code","a1f3b1ab":"code","58c30e2d":"code","7eee1dcb":"code","8361fc9d":"code","36b28df9":"code","ca372939":"code","60bfd0fc":"code","c25d55f5":"code","ec3213fb":"code","8688a9a9":"code","590ba201":"code","bf150362":"code","5549ffcf":"code","f01e75af":"code","406dc3fd":"code","e6215852":"code","7d869189":"code","685b8694":"code","ebbb6ea9":"code","bededdf1":"code","99c8800e":"code","ea730172":"code","134cf89e":"code","d1bab91e":"code","781167d0":"code","bd45ab7b":"code","c5c862ae":"code","9d56cf29":"code","aff91c84":"code","fc6035c3":"code","10323003":"code","8c9ac1d1":"code","6e417466":"code","d7010b9d":"code","cb1f7a76":"code","b927612a":"code","1ff80228":"code","534c0629":"code","6cfa208d":"code","da008699":"code","e8e8febd":"code","26a71859":"code","2b020759":"code","04e62066":"code","69364326":"code","b14ebc1f":"code","789dc548":"code","b814c503":"code","6330630d":"code","6b82770f":"code","b6099b20":"code","02445f3a":"code","8b00afe3":"code","ce89460b":"code","95457c80":"code","05d61ea4":"code","b972d49a":"code","a58d3632":"code","a2b36b1f":"code","a1aef823":"code","8c71431c":"code","8680b0bf":"code","c69173e7":"code","96130fd5":"code","da127bce":"code","fa70a26e":"code","7d1b9077":"code","71418e30":"code","c199cb88":"code","07d2e75b":"code","933963c7":"code","a779e64e":"code","ec7bec6b":"code","323fbad9":"code","36951698":"code","ab2d37a4":"code","8006e0ea":"code","03228de7":"code","ecf4fcc8":"code","9c953515":"code","110e39b2":"code","a0f20947":"markdown","7cf49fc6":"markdown","da9adf25":"markdown","3e6c4582":"markdown","cfc2cf4d":"markdown","70a4db5e":"markdown","9b4f6683":"markdown","a7170cb0":"markdown","8e1b0c9e":"markdown","32642df7":"markdown","c63a90af":"markdown","2b00caae":"markdown","ba4f7b92":"markdown","a5330b7b":"markdown","c6c52e1f":"markdown","e79ca6d8":"markdown","2220ebfb":"markdown","92b233fb":"markdown","54389e9b":"markdown","b71d04e1":"markdown","dca8beef":"markdown","47fc4d83":"markdown","cbd62c74":"markdown","be4a3eec":"markdown","3754fa16":"markdown"},"source":{"694b97e9":"# Data Analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nfrom scipy import stats\nfrom sklearn.preprocessing import LabelEncoder\n\n# Other Imports\nimport re\nimport warnings\n\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\n%matplotlib inline\n# Machine Learning\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn import metrics\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","610f5353":"warnings.filterwarnings('ignore')","32e8edea":"# Loading the datasets\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","e1380d8d":"train_df.head()","ec360059":"test_df.head()","174a4510":"train_df.info()","0a5ba9c9":"# Null values train dataset\ntrain_df.isna().sum()","f177257d":"# Null values test dataset\ntest_df.isna().sum()","cc48ecc6":"train_df['source'] = 'train'\ntest_df['source'] = 'test'","f4ffdf7e":"dataset = pd.concat([train_df, test_df], ignore_index=True)","98fa657b":"dataset.isnull().sum()","c76e3605":"train_df.isnull().sum()","5c638b1e":"plt.figure(figsize=(10,4))\nplt.subplot(121)\nsns.distplot(train_df['Age'].dropna())\nplt.title('Age Distribution')\n\nplt.subplot(122)\nsns.distplot(train_df['Fare'].dropna())\nplt.title('Fare Distribution')","8318ecba":"train_df['Survived'].value_counts()","81f2b2a4":"train_df.Parch.value_counts()","5dd3e618":"train_df.SibSp.value_counts()\/891*100","ecbdc439":"train_df.Pclass.value_counts()\/train_df.shape[0]*100","cbc540c1":"grid = sns.FacetGrid(train_df, col='Survived')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False, color='green')","5f1cb0b2":"grid_pivot1 = train_df.pivot_table(columns='Survived', values='Age', aggfunc='mean')","e5b045f1":"grid_pivot1","aa17f079":"sns.pointplot(x=train_df['Survived'].dropna(), y=train_df['Age'].dropna())","8d4ddbe8":"grid = sns.FacetGrid(train_df, col='Survived', row='Sex')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False, color='green')","d7e2c286":"# sns.pointplot(x=train_df['Survived'].fillna(-1), y=train_df['Age'].fillna(-1), hue=train_df['Sex'].fillna(-1)) ","43bb0841":"grid_pivot2 = train_df.pivot_table(index='Sex', columns='Survived', values='Age', aggfunc='mean')\ngrid_pivot2","f50a0f9d":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False,rug=True, color='red')","8f14b8f9":"grid_pivot3 = train_df.pivot_table(index='Pclass',columns='Survived', values='Age')","993061e4":"grid_pivot3","ee846200":"grid = sns.FacetGrid(train_df, col='Survived', row='SibSp')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='pink')","f4c3ed8b":"grid = sns.FacetGrid(train_df, col='Survived', row='Parch')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='green')","dcc0dbb9":"grid = sns.FacetGrid(train_df, col='Survived', row='Embarked')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='black')","824f1d06":"grid = sns.FacetGrid(train_df, row='Embarked')\ngrid.map(sns.pointplot, 'Pclass', 'Survived','Sex', palette='deep')\ngrid.add_legend()","76bc4dd5":"train_df.pivot_table(index=['Embarked','Pclass'], columns='Sex', values='Survived')","53b4de69":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived')\ngrid.map(sns.barplot, 'Sex', 'Fare', ci=None)","de69f405":"def extract_titles(name):\n    tit = re.findall(' ([A-Za-z]+)\\.', name)\n    return tit[0]","19b396c8":"dataset['Title'] = dataset['Name'].apply(lambda x: extract_titles(x))","3c4d9698":"# train_df['Title'] = train_df['Name'].apply(lambda x: extract_titles(x))\n\n# test_df['Title'] = test_df['Name'].apply(lambda x: extract_titles(x))","5e1d5a5b":"dataset[dataset['source'] == 'train'].isnull().sum()","b87dbb42":"dataset[dataset['source'] == 'test'].isnull().sum()","2c8c25eb":"dataset['Title'] = dataset['Title'].replace(['Don', 'Rev', 'Dr','Major', 'Lady', 'Sir','Col', 'Capt', 'Countess',\n       'Jonkheer', 'Dona'], 'Rare')\ndataset['Title'] = dataset['Title'].replace(['Ms', 'Mlle'], 'Miss')\ndataset['Title'] = dataset['Title'].replace('Mme','Mrs')","a1f3b1ab":"dataset[dataset['source'] == 'train'].Title.value_counts()","58c30e2d":"dataset[dataset['source'] == 'train'].pivot_table(index='Title', values='Survived')","7eee1dcb":"dataset[dataset['source'] == 'train'].pivot_table(index='Title', columns='Survived', values='Age')","8361fc9d":"# dataset[dataset['source'] == 'train'] = dataset[dataset['source'] == 'train'].drop(['Name','PassengerId'], axis=1)\n\n# dataset[dataset['source'] == 'train'].isnull().sum()\n\n# train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\n\n# test_df = test_df.drop(['Ticket', 'Cabin'], axis=1)","36b28df9":"dataset[dataset['source'] == 'train'].head()","ca372939":"sex_dummy = pd.get_dummies(dataset['Sex'])","60bfd0fc":"sex_dummy.shape","c25d55f5":"dataset.shape","ec3213fb":"# train_df = pd.concat([train_df, sex_dummy], sort=False)\ndataset = dataset.join(sex_dummy)","8688a9a9":"dataset.head()","590ba201":"grid = sns.FacetGrid(dataset[dataset['source'] == 'train'], row='Pclass', col='Sex')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False)","bf150362":"# train_df['Sex'] = train_df['Sex'].astype(int)","5549ffcf":"grid_pivot = dataset[dataset['source'] == 'train'].pivot_table(index='Pclass',columns='Sex', values='Age', aggfunc='median')","f01e75af":"grid_pivot","406dc3fd":"# def fage(x):\n#     age_med = grid_pivot.loc[x['Pclass'], x['Sex']]\n#     return age_med","e6215852":"# dataset[dataset['source'] == 'train']['Age'].isna().sum()","7d869189":"# dataset.isna().sum()","685b8694":"# dataset['Age'].fillna(dataset[dataset['Age'].isnull()].apply(fage, axis=1), inplace=True)","ebbb6ea9":"guess_ages = np.zeros((2,3))\nguess_ages\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        guess_df = dataset[(dataset['Sex'] == i) & \\\n                              (dataset['Pclass'] == j+1)]['Age'].dropna()\n        age_guess = guess_df.median()\n        \n        # Convert random age float to nearest .5 age\n        #guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                'Age'] = guess_ages[i,j]","bededdf1":"dataset['AgeBand'] = pd.cut(dataset['Age'], 5)","99c8800e":"dataset.AgeBand.value_counts()","ea730172":"dataset['AgeBand'] = dataset['AgeBand'].astype(str)","134cf89e":"dataset.loc[dataset['source'] == 'train'].pivot_table(index='AgeBand', values='Survived')","d1bab91e":"# train_df.head()","781167d0":"# train_df.loc[train_df['Age'] <= 16, 'Age'] = 0\n# train_df.loc[(train_df['Age'] > 16) & (train_df['Age'] <= 32), 'Age'] = 1\n# train_df.loc[(train_df['Age'] > 32) & (train_df['Age'] <= 48), 'Age'] = 2\n# train_df.loc[(train_df['Age'] > 48) & (train_df['Age'] <= 64), 'Age'] = 3\n# train_df.loc[(train_df['Age'] > 64), 'Age'] = 4\n","bd45ab7b":"# train_df.head()","c5c862ae":"def ageclass(x):\n    if x <= 16:\n        return 0\n    elif x > 16 and x <= 32:\n        return 1\n    elif x > 32 and x <= 48:\n        return 2\n    elif x > 48 and x <= 64:\n        return 3\n    else:\n        x > 64\n        return 4","9d56cf29":"dataset['AgeClass'] = dataset['Age'].apply(ageclass)","aff91c84":"dataset.head()","fc6035c3":"dataset['Family_Size']  = dataset['Parch'] + dataset['SibSp'] + 1","10323003":"dataset.pivot_table(index='Family_Size', values='Survived').sort_values(by='Survived',ascending=False )","8c9ac1d1":"def isalone(x):\n    if x == 1:\n        return 1\n    else:\n        return 0","6e417466":"dataset['IsAlone'] = dataset['Family_Size'].apply(isalone)","d7010b9d":"dataset[dataset['source']=='train'].pivot_table(index='IsAlone', values='Survived')","cb1f7a76":"dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)","b927612a":"dataset.isnull().sum()","1ff80228":"embarked_dummy = pd.get_dummies(dataset['Embarked'])","534c0629":"dataset = dataset.join(embarked_dummy)","6cfa208d":"dataset.head()","da008699":"dataset['Fare'].fillna(dataset['Fare'].median(), inplace=True)","e8e8febd":"le = LabelEncoder()","26a71859":"dataset['FareBand'] = pd.qcut(dataset['Fare'], 4)","2b020759":"dataset['FareClass'] = le.fit_transform(dataset['FareBand'])","04e62066":"dataset.pivot_table(index='FareClass', values='Survived').sort_values(by='Survived', ascending=False)","69364326":"# def fareclass(x):\n#     if x <= 7.896 :\n#         return 0\n#     elif x > 7.896 and x <= 14.454:\n#         return 1\n#     elif x > 14.454 and x <= 31.275 :\n#         return 2\n#     elif x > 31.275 and x <= 512.329:\n#         return 3","b14ebc1f":"# dataset['FareClass'] = dataset['Fare'].apply(fareclass)","789dc548":"# dataset['FareClass'] = dataset['Fare'].apply(fareclass)\n\n# dataset['FareClass'] = dataset['FareClass'].astype(int)\n\n# test_df['FareClass'] = test_df['Fare'].apply(fareclass).astype(int)","b814c503":"dataset.keys()","6330630d":"dataset['Title'] = le.fit_transform(dataset['Title'])","6b82770f":"dataset['Age*Class'] = dataset['AgeClass'] * dataset['Pclass']","b6099b20":"dataset.head()","02445f3a":"drop_these = 'Age Cabin Embarked Fare Name Parch Ticket Sex SibSp AgeBand Family_Size FareBand'.split(' ')","8b00afe3":"drop_these","ce89460b":"dataset = dataset.drop(drop_these, axis=1)","95457c80":"dataset.head()","05d61ea4":"train_cleaned = dataset[dataset['source'] == 'train']\ntest_cleaned = dataset[dataset['source'] == 'test']","b972d49a":"train_cleaned['Survived'] = train_cleaned['Survived'].astype(int)","a58d3632":"train_cleaned.keys()","a2b36b1f":"'Pclass', 'Survived', 'source', 'Title', 'female','male', 'AgeClass', 'IsAlone', 'C', 'Q', 'S', 'FareClass', 'Age*Class'","a1aef823":"def predict_model(dtrain, dtest, predictor, outcome, model):\n    model.fit(dtrain[predictor], dtrain[outcome])\n    dtrain_pred = model.predict(dtest[predictor])\n    score = model.score(dtrain[predictor], dtrain[outcome])*100\n    return score, dtrain_pred","8c71431c":"predictors_var = ['Pclass','Title', 'female','male', 'AgeClass', 'IsAlone', 'C', 'Q', 'S', 'FareClass', 'Age*Class']\noutcome_var = 'Survived'\n# model_name = logreg\ntraindf = train_cleaned\ntestdf = test_cleaned","8680b0bf":"logreg = LogisticRegression()","c69173e7":"predict_model(traindf, testdf, predictors_var, outcome_var, logreg)","96130fd5":"coef1 = pd.Series(logreg.coef_[0], predictors_var).sort_values()","da127bce":"coef1.sort_values(ascending=False)","fa70a26e":"svc = SVC()","7d1b9077":"predict_model(traindf, testdf, predictors_var, outcome_var, svc)","71418e30":"coef2 = pd.Series(svc.coef_[0], predictors_var).sort_values()\n\ncoef2.sort_values(ascending=False)","c199cb88":"knn = KNeighborsClassifier(n_neighbors=3)","07d2e75b":"predict_model(traindf, testdf, predictors_var, outcome_var, knn)","933963c7":"gaussian = GaussianNB()","a779e64e":"predict_model(traindf, testdf, predictors_var, outcome_var, gaussian)","ec7bec6b":"decision_tree = DecisionTreeClassifier()","323fbad9":"predict_model(traindf, testdf, predictors_var, outcome_var, decision_tree)","36951698":"coef4 = pd.Series(decision_tree.feature_importances_, predictors_var).sort_values()\n\ncoef4.sort_values(ascending=False)","ab2d37a4":"random_forest = RandomForestClassifier(n_estimators=100)","8006e0ea":"predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)","03228de7":"predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)[1]","ecf4fcc8":"results = predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)[1]","9c953515":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": results\n    })","110e39b2":"submission.to_csv('submission_updated.csv', index=False)","a0f20947":"# EDA and Predictive Modeling of the titanic dataset","7cf49fc6":"__Data Wrangling__ <br>\nCorrecting, Completing and Creating Goals <br>\nHere we will start modifying out dataset","da9adf25":"__Categorical Features__","3e6c4582":"__Creating__ new features extracting from existing features","cfc2cf4d":"__K Neighbour Classifier__","70a4db5e":"# Univariate Analysis (Categorical Variables)","9b4f6683":"__Create new features by combining existing ones__","a7170cb0":"__Random Forest__","8e1b0c9e":"__Logistic Regression__","32642df7":"__GaussianNB__","c63a90af":"__Categorical and Numerical__","2b00caae":"* Most people were travelling alone\n* Very less chance of survival if with family","ba4f7b92":"# Univariate Analysis (Numerical Variables)","a5330b7b":"__Support Vector Machine__","c6c52e1f":"__**Categorical and Numerical**__","e79ca6d8":"**Types of features**\n* Categorical Features = Pclass, Sex, Sibsp, Parch, Cabin, Embarked\n* Numerical Features = Age, Fare\n* Others = Name, Ticket, PassengerID","2220ebfb":"__Decision Tree__","92b233fb":"* survival:    Survival \n* PassengerId: Unique Id of a passenger. \n* pclass:    Ticket class     \n* sex:    Sex     \n* Age:    Age in years     \n* sibsp:    # of siblings \/ spouses aboard the Titanic     \n* parch:    # of parents \/ children aboard the Titanic     \n* ticket:    Ticket number     \n* fare:    Passenger fare     \n* cabin:    Cabin number     \n* embarked:    Port of Embarkation\n* Categorical: Survived, Sex, and Embarked. Ordinal: Pclass.\n* Continous: Age, Fare. Discrete: SibSp, Parch","54389e9b":"* Categorical Variables = Pclass, Sex, Sibsp, Parch, Cabin, Embarked\n* Numerical Variables = Age, Fare\n* Others = Name, Ticket, PassengerID","b71d04e1":"__Converting categorical features__","dca8beef":"# Model Predict","47fc4d83":"* Pclass 1 has the highest survival rate\n* Pclass 3 has most passengers however majority of them didn't survive\n* Infants of Pclass 2 & 3 were mostly survived","cbd62c74":"__Dropping features__","be4a3eec":"* Most people embarked from C\n","3754fa16":"# Bivariate Analysis"}}