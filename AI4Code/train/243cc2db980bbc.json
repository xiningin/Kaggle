{"cell_type":{"471393c6":"code","196a2fa2":"code","955f77c1":"code","17abc395":"code","105509ce":"code","10504c80":"code","95656b37":"code","758815f7":"code","b516bcdd":"code","cc01363b":"code","0035caaa":"code","358d9203":"code","7c1771ae":"code","1c789c1f":"code","8ddbf03d":"code","7d182581":"code","ad886f1a":"code","c394e64e":"code","27f5a017":"code","bd0bf3d1":"code","34549bc2":"code","1dbf6d60":"code","09b30459":"code","38d2e9cc":"code","4354d177":"code","513f04ef":"code","1a3bfe56":"code","e013c8de":"code","f4d23349":"code","f2ae3e8c":"code","3283f561":"code","99eab13f":"code","8c53a0cc":"code","01f8716a":"code","b00dcd0e":"code","092e31f9":"code","bdb50c29":"code","e959ea14":"code","ffdc7f1b":"code","9340c651":"code","2c41ec96":"code","d383a642":"code","5f4da0df":"code","c0ffb0b8":"code","dc9b726b":"code","6a5f755a":"code","b0f371cb":"code","f11f6571":"code","1fea3ecf":"code","e20daab3":"code","79bd21a2":"code","0dd61cac":"code","d589e0a5":"code","3a9cfd4c":"code","d404fd3f":"code","38ceaf91":"code","a9920c4b":"code","b5f66657":"code","8e195b6b":"code","f202fc3d":"code","1261f846":"code","ad9e63de":"code","d9539a7e":"code","9a292c9f":"code","4d230493":"code","6dfcf4b3":"code","a4cf8086":"code","f2c9ae85":"code","5ac075bf":"code","6b24eba9":"code","87eff153":"code","c27c1f36":"code","f3c2959a":"code","2f9596d4":"code","bd7c001c":"code","00caf49e":"code","484b2ab1":"code","812919aa":"code","27685893":"code","23e1717f":"code","127b7e6d":"code","d946f1bf":"code","49839bd5":"code","bc3c8c5c":"code","1bec37ac":"code","f77e61d4":"code","dddd6dc2":"code","170500b4":"code","9b186121":"code","f9efa60b":"markdown","64992eec":"markdown","86d919ce":"markdown","5f3f37f5":"markdown","c1d8f02f":"markdown","84f48403":"markdown","5816f914":"markdown","57006f6f":"markdown","5dac92a0":"markdown","33e604c0":"markdown","3b2d0fbc":"markdown","50f420eb":"markdown","9ddd0ef3":"markdown","617a788c":"markdown","0828ec1f":"markdown"},"source":{"471393c6":"import numpy as np\nimport pandas as pd\nimport warnings\nimport json\nimport glob\nimport matplotlib.pyplot as plt","196a2fa2":"practices = pd.read_csv('..\/input\/general-practice-prescribing-data\/practices.csv', \\\n                        names=['practice', 'name', 'address1', 'address2', 'city', 'county', 'postcode'])\npractices.head()","955f77c1":"practices.info()","17abc395":"# Count the number of unique counties\nlen(practices['county'].unique())","105509ce":"# Display the first 10 unique counties\npractices['county'].unique()[0:10]","10504c80":"# The list above is NOT all counties. Many are cities (e.g. Hartlepool) and towns (e.g. Yarm) which tends to suggest that\n# the practice addresses are not uniformly categorised into 'city' and 'county' but spread inconsistently over 4 columns, i.e. address1, address2, city and county","95656b37":"# How many practices in the 'county' column are in Bradford?\npractices[practices['county'] == 'BRADFORD']\n\n# There appears to be 3","758815f7":"# How many practices in the 'city' column are in Bradford?\npractices[practices['city'] == 'BRADFORD']\n\n# There appears to be 110","b516bcdd":"# How many practices have a Bradford postcode 'BD'?\npractices[practices['postcode'].str.startswith('BD')]\n\n# There are 167 practices with a Bradford postcode\n# The Bradford postcode, 'BD', extends beyond Bradford to other towns in Bradford Metropolitan \n# Council District (e.g. Skipton, Keighley, Ilkley)","cc01363b":"# I live near Ilkley, West Yorkshire - so lets take a closer look at all GP practices in my LS29 postcode area\npractices[practices['postcode'].str.startswith('LS29')]","0035caaa":"# Load the first batch of prescribing data for May 2016\n# Need to supress known Numpy error 'FutureWarning'. \n# See https:\/\/stackoverflow.com\/questions\/40659212\/futurewarning-elementwise-comparison-failed-returning-scalar-but-in-the-futur\n\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(action='ignore', category=FutureWarning)\n    bnf_2016_05 = pd.read_csv('..\/input\/general-practice-prescribing-data\/T201605PDPI+BNFT.csv')\n    \nbnf_2016_05.head()    ","358d9203":"def extract_json(json_filename, node):\n    '''Extract simple json'''\n\n    # \n    with open(json_filename, encoding='utf-8') as data_file:\n        data = json.loads(data_file.read())\n\n    return data[node]","7c1771ae":"# Extract Preparation name \n\nfile = '..\/input\/general-practice-prescribing-data\/column_remapping.json'\n\nbnf_name = extract_json(file, 'bnf_name')\n\ndf_bnf_name = pd.DataFrame.from_dict(bnf_name, orient='index', columns=['bnf_name'])","1c789c1f":"print(df_bnf_name.head())","8ddbf03d":"# Extract Preparation BNF code \n\nfile = '..\/input\/general-practice-prescribing-data\/column_remapping.json'\n\nbnf_code = extract_json(file, 'bnf_code')\n\ndf_bnf_code = pd.DataFrame.from_dict(bnf_code, orient='index', columns=['bnf_code'])","7d182581":"print( df_bnf_code.head())","ad886f1a":"# Concatenate all prescribing files for 2017 vertically [COMMENTED OUT]\n\n# path = r'..\/input\/general-practice-prescribing-data' # use your path\n# all_files = glob.glob(path + \"\/T2017*.csv\")\n\n# li = []\n\n# for filename in all_files:\n#     df = pd.read_csv(filename, index_col=None, header=0)\n#     li.append(df)\n\n# df_2017 = pd.concat(li, axis=0, ignore_index=True)","c394e64e":"# There are approximately 50 million rows of prescribed items in the 2017 datasets  [COMMENTED OUT]\n\n# df_2017.info()","27f5a017":"# [COMMENTED OUT]\n\n# df_2017.head()","bd0bf3d1":"# Use the 50 million prescribed items in the 2017 data to get a representative DataFrame of all unique, official, bnf_code --> bnf_name mappings\n# [COMMENTED OUT]\n\n# df_bnf_mapping = df_2017[['bnf_code', 'bnf_name']].drop_duplicates()\n# df_bnf_mapping.info()","34549bc2":"# [COMMENTED OUT]\n\n# df_bnf_mapping.head()","1dbf6d60":"# Using the table above, get the BNF preparation name from it's bnf_name id number [COMMENTED OUT]\n\n# df_bnf_name.iloc[2697]","09b30459":"# Get the associated BNF Code of the preparation it is mapped to above\n# The bnf_code for 'Propranolol HCL_Cap 80mg M\/R' is in Chapter 2, Section 4, Subsection 0 (bnf_code = 020400) which is 'Beta-adrenoreceptor blocking drugs'\n# [COMMENTED OUT]\n\n# df_bnf_code.iloc[2237]","38d2e9cc":"# Save the mapping file  [COMMENTED OUT]\n#df_bnf_mapping.to_csv('remapping.csv', index=False)","4354d177":"# Create a new column in the bnf_name and bnf_code DataFrames from their index converted to an integer from a string. [COMMENTED OUT]\n# Use this column as the new index and drop the original column\n# This allows both DataFrames to be joined with the df_bnf_mapping DataFrame as they have the same data type (int).\n\n# df_bnf_name['id'] = df_bnf_name.index.astype(int)\n# df_bnf_name.set_index('id', drop=True, inplace=True)\n# df_bnf_code['id'] = df_bnf_code.index.astype(int)\n# df_bnf_code.set_index('id', drop=True, inplace=True)\n\n# df_bnf_name","513f04ef":"# Inner join the df_bnf_mapping DataFrame to the df_bnf_name DataFrame [COMMENTED OUT]\n\n# df_bnf_merge = pd.merge(df_bnf_mapping, df_bnf_name, left_on='bnf_name', right_on='id', suffixes=('_no', ''))\n# df_bnf_merge.info()","1a3bfe56":"# [COMMENTED OUT]\n\n# df_bnf_merge.head()","e013c8de":"# Inner join the merged mapping+name DataFrame to the df_bnf_code DataFrame [COMMENTED OUT]\n\n# df_bnf = pd.merge(df_bnf_merge, df_bnf_code, left_on='bnf_code', right_on='id', suffixes=('_no', ''))\n# df_bnf.info()","f4d23349":"# [COMMENTED OUT]\n\n# df_bnf.head()","f2ae3e8c":"# [NOT USED] Rename the column headers of the df_bnf mapping DataFrame\n#df_bnf.rename(columns={'bnf_code_x':'code_id', 'bnf_name_x':'name_id', 'bnf_code_y':'bnf_code', 'bnf_name_y':'bnf_name' }, inplace=True)\n#df_bnf.head()","3283f561":"# [COMMENTED OUT]\n# Export the df_bnf DataFrame\n# df_bnf.to_csv('full_mapping.csv')\n","99eab13f":"# Read in the file created using the commented-out code above\nfile = '..\/input\/full-bnf-mapping\/full_mapping.csv'\n\ndf_bnf = pd.read_csv(file, usecols=[1,2,3,4])","8c53a0cc":"df_bnf.head()","01f8716a":"# Retrieve all preparations in BNF Chapter 1, Section 1, Subsection 1 (Antacids and Simethicone)\n\ndf_bnf[df_bnf['bnf_code'].str.startswith('010101')].head(10)","b00dcd0e":"# Problems finding the file BNF file to read into a DataFrame\n# Turns out the folder in which it resides is lower case and each word is separated by hyphens (and not as it appears\n# in the right sidebar)\n\nimport os\nprint(os.listdir(\"..\/input\"))","092e31f9":"\nBNF = pd.read_csv(\"..\/input\/bnf-chapter-mapping\/BNF.csv\", dtype={'ChapterNumber':str})\nBNF.head()","bdb50c29":"# Create a column for the BNF Chapter Number\nBNF['chapter_no'] = BNF.apply(lambda row: row.ChapterNumber[0:2], axis=1)","e959ea14":"# Create a column for the BNF Chapter and Section Number\nBNF['section_no'] = BNF.apply(lambda row: row.ChapterNumber[0:4], axis=1)","ffdc7f1b":"# Create a column for the BNF Chapter, Section and Subsection Number\nBNF['subsection_no'] = BNF.apply(lambda row: row.ChapterNumber[0:6], axis=1)","9340c651":"# Create a column for the BNF Chapter, Section, Subsection and Subsubsection Number\nBNF['subsubsection_no'] = BNF.apply(lambda row: row.ChapterNumber[0:7], axis=1)","2c41ec96":"BNF.head()","d383a642":"# View all UK practice prescribing for May 2016\nbnf_2016_05.head()","5f4da0df":"burley_practice_id = practices[practices['practice'] == 'B83019'].index[0]\n\nburley_practice_id","c0ffb0b8":"# My local GP practice is in Burley In Wharfedale (practice# B83019, index# 629)\n\n# Get the index value of the Burley GP practice from the practices dataframe\nburley_practice_id = practices[practices['practice'] == 'B83019'].index[0]\n\n# Use the index value to get all prescribing data for Burley GP practice in May 2016\nburley_practice = bnf_2016_05[bnf_2016_05['practice'] == burley_practice_id]\nburley_practice","dc9b726b":"#burley_practice['total_cost'] = burley_practice['act_cost'] * burley_practice['quantity']\n#burley_practice.head()","6a5f755a":"# Join the Burley practice prescribing info to the BNF\nburley_practice_prescribing = pd.merge(burley_practice, df_bnf, left_on='bnf_code', right_on='bnf_code_no', suffixes=('_x', ''))\nburley_practice_prescribing.drop(['bnf_code_x', 'bnf_name_x'], axis='columns', inplace=True)\nburley_practice_prescribing.tail()","b0f371cb":"# Create a new column in the prescribing data for the 7 digit BNF code prefix\n# This prefix indicates the drugs hierarchical position in the BNF, i.e. Chapter > Section > Subsection > Sub-subsection, e.g. 1.3.2.1 or 0103021\nburley_practice_prescribing['bnf_code_prefix'] = burley_practice_prescribing.apply(lambda row: row.bnf_code[0:7], axis=1)","f11f6571":"burley_practice_prescribing","1fea3ecf":"# Extract all prescribing figures for Angiotensin Converting Enzyme (ACE) inhibitors in the Burley practice, May 2017\n# ACE inhibitors are in Chapter 2, Section 5, Subsection 5 Sub-subsection 1 of the BNF. Hence their BNF code begins with '0205051'\nburley_practice_prescribing[burley_practice_prescribing['bnf_code'].str.startswith('0205051')]","e20daab3":"# Combine the Burley prescribing DataFrame with the BNF DataFrame so drugs can be categorised \n# into therapeutic\/pharmaceutical groups (BNF Chapters, Sections etc.) and the total cost per group calculated \nburley_practice_sections = pd.merge(burley_practice_prescribing, BNF, left_on='bnf_code_prefix', right_on='subsubsection_no')","79bd21a2":"burley_practice_sections.head()","0dd61cac":"#burley_practice_sections.info()","d589e0a5":"# Create a DataFrame showing the total cost of all drugs prescribed under the root-level parent Chapter numbers\n#pd.options.display.float_format = '\u00a3{:20,.2f}'.format\nburley_chapter = burley_practice_sections.groupby('chapter_no')[['act_cost']].sum()\nburley_chapter.head(20).style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","3a9cfd4c":"# Combine the Chapter results above with the BNF DataFrame (on chapter_no) then filter out their children to get total costs by Chapter\n# Include a vertical bar chart to visualise the relative costs\n#pd.options.display.float_format = '\u00a3{:20,.2f}'.format\nburley_chapter_total = pd.merge(burley_chapter, BNF, left_on='chapter_no', right_on='chapter_no', how='left')\ndf_chapter = burley_chapter_total[burley_chapter_total['Chapter'].str.count('\\.') == 0][['Chapter', 'ChapterTitle', 'act_cost', 'Order']]\ndf_chapter.style.bar(subset=['act_cost'], color='#d65f5f').format({\"act_cost\": \"\u00a3{:20,.0f}\"})","d404fd3f":"# Create a DataFrame showing the total cost of all drugs prescribed under each second-level section number\nburley_section = burley_practice_sections.groupby('section_no')[['act_cost']].sum()\n\n# Combine the Section results above with the BNF DataFrame (on section_no) then filter out their children to get total costs by Section\nburley_section_total = pd.merge(burley_section, BNF, left_on='section_no', right_on='section_no', how='left')\ndf_section = burley_section_total[burley_section_total['Chapter'].str.count(\"\\.\") == 1][['Chapter', 'ChapterTitle', 'act_cost', 'Order']]\n#df_section.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})\n","38ceaf91":"# Create a DataFrame showing the total cost of all drugs prescribed under each third-level subsection number\n\nburley_subsection = burley_practice_sections.groupby('subsection_no')[['act_cost']].sum()\n\n# Combine the Subsection results above with the BNF DataFrame (on subsection_no) then filter out their children to get total costs by Subsection\nburley_subsection_total = pd.merge(burley_subsection, BNF, left_on='subsection_no', right_on='subsection_no', how='left')\ndf_subsection = burley_subsection_total[burley_subsection_total['Chapter'].str.count(\"\\.\") == 2][['Chapter', 'ChapterTitle', 'act_cost', 'Order']]\n#df_subsection.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","a9920c4b":"# Create a DataFrame showing the total cost of all drugs prescribed under each forth-level subsubsection (bad name sorry!) number\n\nburley_subsubsection = burley_practice_sections.groupby('subsubsection_no')[['act_cost']].sum()\n\n# Combine the Subsubsection results above with the BNF DataFrame (on subsection_no) then filter out their children to get total costs by Subsubsection\nburley_subsubsection_total = pd.merge(burley_subsubsection, BNF, left_on='subsubsection_no', right_on='subsubsection_no', how='left')\ndf_subsubsection = burley_subsubsection_total[burley_subsubsection_total['Chapter'].str.count(\"\\.\") == 3][['Chapter', 'ChapterTitle', 'act_cost', 'Order']]\n#df_subsubsection.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","b5f66657":"# Default value of display.max_rows is 10 i.e. at max 10 rows will be printed.\n# Set it None to display all rows in the dataframe\npd.set_option('display.max_rows', None)","8e195b6b":"# Concatenate the 4 DataFrames above to get total costs for all Chapters,Section, Subsections and Sub-subsections\n# This table shows the cost of all prescribed drugs by BNF classification\n# Note: Parents of sub-sections show the total cost of all child subsection, e.g. 'Chapter 1: Gastro-intestinal system' at \u00a32,990 is the sum of all\n# sub-section totals beneath it, i.e. 1.2 + 1.3 + 1.3.1 etc.\ndf_burley_may16 = pd.concat([df_chapter, df_section, df_subsection, df_subsubsection], ignore_index=True).sort_values('Order', ascending=True)\ndf_burley_may16.reset_index(drop=True)\ndf_burley_may16.style.bar(subset=['act_cost'], color='#d65f5f').format({\"act_cost\": \"\u00a3{:20,.0f}\"})","f202fc3d":"# Import file containing a numerical breakdown of patients registered at each GP practice in March 2020\nimport pandas as pd\npractice_patients = pd.read_csv(\"..\/input\/patients-registered-at-a-gp-practice-march-2020\/gp-reg-pat-prac-quin-age.csv\", dtype={'ORG_CODE':str})\npractice_patients.head()","1261f846":"# Import file that maps GP practice code to its ONS_CCG_CODE\nimport pandas as pd\npractice_mapping = pd.read_csv(\"..\/input\/gp-practice-mapping\/gp-reg-pat-prac-map.csv\")\npractice_mapping.head()","ad9e63de":"# Get the Burley practice ONS code from its Practice Code\nBurley_ONS_CODE = practice_mapping[practice_mapping['PRACTICE_CODE'] == 'B83019']['ONS_CCG_CODE'].iloc[0]\nBurley_ONS_CODE","d9539a7e":"# Use the Burley ONS code to get patient numbers for the Burley practice\nburley_patients = practice_patients[practice_patients['ONS_CODE'] == Burley_ONS_CODE]\nburley_patients.head()","9a292c9f":"# Get the total number of patients in Grange Park Surgery, Burley In Wharfedale\nburley_total_patients = burley_patients[burley_patients['AGE_GROUP_5'] == 'ALL']['NUMBER_OF_PATIENTS'].iloc[0]\nburley_total_patients","4d230493":"# Get the number of female patients by age group\nburley_females = burley_patients[(burley_patients['SEX'] == 'FEMALE') & (burley_patients['AGE_GROUP_5'] != 'ALL')][['AGE_GROUP_5', 'NUMBER_OF_PATIENTS']]\nburley_females","6dfcf4b3":"# Get the number of male patients by age group\nburley_males = burley_patients[(burley_patients['SEX'] == 'MALE') & (burley_patients['AGE_GROUP_5'] != 'ALL')][['AGE_GROUP_5', 'NUMBER_OF_PATIENTS']]","a4cf8086":"# Plot age range vs number of patients for each gender\nwidth = 15\nheight = 5\nplt.rcParams['figure.figsize'] = [width, height]\nplt.plot(burley_females['AGE_GROUP_5'], burley_females['NUMBER_OF_PATIENTS'], label='Females')\nplt.plot(burley_males['AGE_GROUP_5'], burley_males['NUMBER_OF_PATIENTS'], label='Males')\nplt.xlabel('Age Range')\nplt.ylabel('No of patients')\nplt.title('Grange Park Surgery: Number of patients by age group')\nplt.legend()\nplt.show()","f2c9ae85":"# Identify all NHS regions\npractice_mapping['COMM_REGION_NAME'].unique()","5ac075bf":"practice_mapping[practice_mapping['PRACTICE_NAME'].str.startswith('GRANGE PARK')]","6b24eba9":"# Join all GP practices with the May 2016 prescribing data DataFrame\ndf_may2016 = pd.merge(practices, bnf_2016_05, left_index=True, right_on='practice', how='inner', suffixes=('_code', '_y'))\ndf_may2016.drop(['practice', 'practice_y', 'name', 'address1', 'address2', 'city', 'county', 'postcode'], axis='columns', inplace=True)\ndf_may2016.head()","87eff153":"# Join the May 2016 prescribing\/practice DataFrame with the practice mapping DataFrame to allow aggregation by region\ndf_may2016_regions = pd.merge(df_may2016, practice_mapping, left_on='practice_code', right_on='PRACTICE_CODE', how='inner')\ndf_may2016_regions.drop(['PRACTICE_CODE', 'PRACTICE_NAME', 'PRACTICE_POSTCODE', 'PUBLICATION', 'STP_CODE', 'STP_NAME'], axis='columns', inplace=True)\ndf_may2016_regions.head()","c27c1f36":"# Join the May 2016 regional prescribing DataFrame with the BNF mapping DataFrame\ndf_may2016_regions_prescribing = pd.merge(df_may2016_regions, df_bnf, left_on='bnf_code', right_on='bnf_code_no', suffixes=('_x', ''))\ndf_may2016_regions_prescribing.drop(['bnf_code_x', 'bnf_name_x'], axis='columns', inplace=True)\ndf_may2016_regions_prescribing.tail()","f3c2959a":"# Create a new column in the prescribing data for the 7 digit BNF code prefix\n# This prefix indicates the drugs hierarchical position in the BNF, i.e. Chapter > Section > Subsection > Sub-subsection, e.g. 1.3.2.1 or 0103021\ndf_may2016_regions_prescribing['bnf_code_prefix'] = df_may2016_regions_prescribing.apply(lambda row: row.bnf_code[0:7], axis=1)\ndf_may2016_regions_prescribing.info()","2f9596d4":"# Combine the all prescribing DataFrame with the BNF DataFrame so drugs can be categorised \n# into therapeutic\/pharmaceutical groups (BNF Chapters, Sections etc.) and the total cost per group calculated \ndf_all_practice_prescribing = pd.merge(df_may2016_regions_prescribing, BNF, left_on='bnf_code_prefix', right_on='subsubsection_no')","bd7c001c":"df_all_practice_prescribing.head()","00caf49e":"# For each English region calculate the total cost of drugs in each BNF chapter in May 2016 \ndf_regional_prescribing = df_all_practice_prescribing.groupby(['COMM_REGION_NAME', 'chapter_no'])[['act_cost']].sum()\n\n#df_regional_prescribing.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","484b2ab1":"# Remove levels from the multi-index dataframe above\ndf_regional_prescribing.reset_index(inplace=True)  \n#df_regional_prescribing.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","812919aa":"# Calculate the total cost of all GI System drugs (BNF Chapter 1) in each English region in May 2016\n\ndf_regional_gastro = df_regional_prescribing[df_regional_prescribing['chapter_no'] == '01']\ndf_regional_gastro.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","27685893":"# Plot a bar chart of GI system drug costs (BNF Chapter 1) for each English region in May 2016\nwidth = 15\nheight = 5\nplt.rcParams['figure.figsize'] = [width, height]\nplt.bar(df_regional_gastro['COMM_REGION_NAME'], df_regional_gastro['act_cost'])\nplt.xticks(rotation=45)\nplt.xlabel('COMM REGION')\nplt.ylabel('Actual Cost (\u00a3)')\nplt.title('Actual Cost of GI System drugs by region May 2016')\n#plt.legend()\nplt.show()","23e1717f":"# For each English region calculate the total cost of drugs in each BNF subsection in May 2016 \ndf_regional_prescribing_subsection = df_all_practice_prescribing.groupby(['COMM_REGION_NAME', 'subsection_no'])[['act_cost']].sum()\n#df_regional_prescribing_subsection.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","127b7e6d":"# Remove levels from the multi-index dataframe above\ndf_regional_prescribing_subsection.reset_index(inplace=True)  \n#df_regional_prescribing_subsection.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","d946f1bf":"# Calculate the total cost of all Laxative drugs (BNF Chapter 1) in each English region in May 2016\n\ndf_regional_laxative = df_regional_prescribing_subsection[df_regional_prescribing_subsection['subsection_no'].str.contains('010601|010602|010603|010604|010605|010606|010607', regex=True)]\n#df_regional_laxative.style.format({\"act_cost\": \"\u00a3{:20,.0f}\"})","49839bd5":"# Plot a chart of Laxative costs by category(BNF Chapter 1.6) for each English region in May 2016\nwidth = 15\nheight = 10\nplt.rcParams['figure.figsize'] = [width, height]\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010601']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010601']['act_cost'], label='Bulk-forming', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010602']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010602']['act_cost'], label='Stimulant', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010603']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010603']['act_cost'], label='Faecal Softeners', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010604']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010604']['act_cost'], label='Osmotic', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010605']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010605']['act_cost'], label='Bowel cleansing preps', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010606']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010606']['act_cost'], label='Peripheral Opioid-Receptor Antagonists', marker='o')\nplt.plot(df_regional_laxative[df_regional_laxative['subsection_no'] == '010607']['COMM_REGION_NAME'], \\\n        df_regional_laxative[df_regional_laxative['subsection_no'] == '010607']['act_cost'], label='5HT4-receptor agonists', marker='o')\nplt.xticks(rotation=45)\nplt.xlabel('COMM REGION')\nplt.ylabel('Total Cost (\u00a3)')\nplt.title('Total Cost of laxative drugs by type for each English region in May 2016')\nplt.legend()\nplt.show()","bc3c8c5c":"# Join practice patient population and practice region DataFrames\n\npractice_patient_totals = practice_patients[(practice_patients['SEX'] == 'ALL') & (practice_patients['ORG_TYPE'] == 'GP') ]\ndf_region_patients_org = pd.merge(practice_patient_totals, practice_mapping, left_on='ORG_CODE', right_on='PRACTICE_CODE')","1bec37ac":"# Calculate the total number of patients per region and remove levels from index\n\ndf_patients_by_region = df_region_patients_org.groupby('COMM_REGION_NAME')[['NUMBER_OF_PATIENTS']].sum()\ndf_patients_by_region.reset_index(inplace=True)","f77e61d4":"df_patients_by_region","dddd6dc2":"# Calculate the cost of each laxative type (per 1,000 patients) in each region\n\ndf_region_patients_lax = pd.merge(df_patients_by_region, df_regional_laxative, left_on='COMM_REGION_NAME', right_on='COMM_REGION_NAME')\ndf_region_patients_lax['cost_per_1000'] = (df_region_patients_lax['act_cost']\/df_region_patients_lax['NUMBER_OF_PATIENTS']) * 1000\n#df_region_patients_lax.style.format({\"act_cost\": \"\u00a3{:20,.2f}\", \"cost_per_1000\": \"\u00a3{:20,.2f}\"})","170500b4":"# Plot a chart of Laxative costs (per 1,000 patients) by category(BNF Chapter 1.6) for each English region in May 2016\nwidth = 15\nheight = 10\nplt.rcParams['figure.figsize'] = [width, height]\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010601']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010601']['cost_per_1000'], label='Bulk-forming', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010602']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010602']['cost_per_1000'], label='Stimulant', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010603']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010603']['cost_per_1000'], label='Faecal Softeners', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010604']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010604']['cost_per_1000'], label='Osmotic', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010605']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010605']['cost_per_1000'], label='Bowel cleansing preps', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010606']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010606']['cost_per_1000'], label='Peripheral Opioid-Receptor Antagonists', marker='o')\nplt.plot(df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010607']['COMM_REGION_NAME'], \\\n        df_region_patients_lax[df_region_patients_lax['subsection_no'] == '010607']['cost_per_1000'], label='5HT4-receptor agonists', marker='o')\nplt.xticks(rotation=45)\nplt.xlabel('COMM REGION')\nplt.ylabel('Total Cost per 1000 patients (\u00a3)')\nplt.title('Total Cost of laxative drugs (per 1000 patients) by type for each English region in May 2016')\nplt.legend()\nplt.show()","9b186121":"# In the above graph, the North West appears to prescribe approximately 20% more \n# Osmotic and Stimulant Laxatives than other regions. ","f9efa60b":"## Data: [UK Patients registered at a GP practice - March 2020](https:\/\/digital.nhs.uk\/data-and-information\/publications\/statistical\/patients-registered-at-a-gp-practice\/march-2020)","64992eec":"### Find all counties","86d919ce":"## Useful links\n### [Glossary of terms](https:\/\/digital.nhs.uk\/data-and-information\/areas-of-interest\/prescribing\/practice-level-prescribing-in-england-a-summary\/practice-level-prescribing-glossary-of-terms#practice-code-and-names)","5f3f37f5":"The following sections are used to create the '**full_mapping.csv**' file in the '**input > full-bnf-mapping**' folder\nIt has been commented out because it is very CPU intensive and uses a large proportion of the allocated 16GB of RAM\nThe output is now read into the df_bnf variable for use in subsequent scripts","c1d8f02f":"## GP Practices","84f48403":"### Investigate the 'column_remapping.json' file","5816f914":"### Load the GP Practice data","57006f6f":"Not all [postcodes in Bradford Metropolitan Council district](https:\/\/www.geopunk.co.uk\/council\/Bradford-District-(B)) start with BD.\n","5dac92a0":"The data provided by the NHS in the '**General Practice Prescribing**' dataset covers the entire UK and is of good quality. However, it lacks a few files that would make any analysis more insightful. I have generated and\/or added these files to this notebook. These include:\n\n- **BNF.csv** - [The BNF](https:\/\/www.bnf.org\/) (British National Formulary) is the definitive guide to all medicines that are generally prescribed in the UK. The original book version categorised drugs into [hierarchical Chapters, Sections, Subsections](https:\/\/openprescribing.net\/bnf\/) etc. by their therapeutic use and pharmaceutical classification. This has since changed but the original classification is still used widely and is very useful for aggregating usage figures and total costs under each category. The unique BNF Code given to each drug\/preparation (e.g. 0401010Z0AAAAAA for Zopiclone Tablets 7.5mg) has a 7 digit prefix (0401010) that identifies the Chapter, Section, Subsection and Subsubsection (bad naming sorry!) under which the drug was placed in the BNF, i.e. Chapter 4.1.1 Hypnotics ... or more specifically:\n\n        4: Central Nervous System\n          4.1: Hypnotics & Anxiolytics\n            4.1.1: Hypnotics\n\n- **[gp-reg-pat-prac-quinn-age.csv](https:\/\/digital.nhs.uk\/data-and-information\/publications\/statistical\/patients-registered-at-a-gp-practice)** - This file describes the population profile of patients registered at every GP practice in the UK. The total patients registered as well as subtotals by gender and age range (in 5 year increments) are also included.\n \n- **[gp-reg-pat-prac-map.csv](https:\/\/digital.nhs.uk\/data-and-information\/publications\/statistical\/patients-registered-at-a-gp-practice\/metadata#gp-reg-pat-prac-map)** - This file enables the population profile csv file above to be mapped to the practice and prescribing files provided by the NHS using ONS codes --> Practice Codes\n\n- **full-bnf-mapping.csv** - This file enables the bnf name and code numbers used in the NHS prescribing files to be mapped to the actual BNF preparation name and BNF code respectively. The code used to generate this file is commented out within the notebook as it is very CPU intensive and uses a lot of the available RAM.\n\n I've made a start on the NHS dataset doing some initial exploratory data analysis and intend to continue developing this notebook. So far I have investigated just one GP practice (the one in my village) but the data is there to do extensive comparisons of costs and prescribing usage by geographical boundaries, disease states and population demographics (with additional government datasets).\n   \n And finally .... I'm new to Kaggle and would appreciate any comments, queries or __votes__ ... thank you!","33e604c0":"The graph above is skewed by the differing patient populations in each region. To correct for this, find the patient population in each region and adjust the total costs to be per 1000 patients.","3b2d0fbc":"### Regional Statistics","50f420eb":"### Data: [A full list of BNF Chapters](https:\/\/openprescribing.net\/bnf\/)","9ddd0ef3":"## Introduction","617a788c":"# Exploratory Data Analysis","0828ec1f":"### Prescribing data"}}