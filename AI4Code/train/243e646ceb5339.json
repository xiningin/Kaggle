{"cell_type":{"84074f4b":"code","91d6c945":"code","092d226d":"code","88ae44a0":"code","0a5063b3":"code","edc040eb":"code","405f473b":"code","b22e54cb":"markdown"},"source":{"84074f4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91d6c945":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\n\nimport warnings\nwarnings.simplefilter('ignore')","092d226d":"word_to_ix = {\"hello\": 0, \"world\": 1}\nembeds = nn.Embedding(2, 5)  # 2 words in vocab, 5 dimensional embeddings\n\nlookup_tensor = torch.tensor([word_to_ix[\"hello\"]], dtype=torch.long)\nhello_embed = embeds(lookup_tensor)\nprint(hello_embed)","88ae44a0":"lookup_tensor = torch.tensor([word_to_ix[\"world\"]], dtype=torch.long)\nhello_embed = embeds(lookup_tensor)\nprint(hello_embed)","0a5063b3":"CONTEXT_SIZE = 2\nEMBEDDING_DIM = 10\n# I am using an article that I wrote\n\ntest_sentence = \"\"\"This section should tell what are the possible applications \nof your research and whether you have implemented it in a real-life scenario.\nYou can also mention some setbacks and future work here. This will lead the other researchers \nto start from where you have stopped or to come with another solution based upon your work.\nMake it a good and positive ending.\"\"\".split()\n\n\n\ntrigrams = [([test_sentence[i], test_sentence[i + 1]], test_sentence[i + 2])\n            for i in range(len(test_sentence) - 2)]\n\nprint(trigrams[:3])\n\nvocab = set(test_sentence)\nword_to_ix = {word: i for i, word in enumerate(vocab)}\n\n\nclass NGramLanguageModeler(nn.Module):\n\n    def __init__(self, vocab_size, embedding_dim, context_size):\n        super(NGramLanguageModeler, self).__init__()\n        self.embeddings = nn.Embedding(vocab_size, embedding_dim)\n        self.linear1 = nn.Linear(context_size * embedding_dim, 128)\n        self.linear2 = nn.Linear(128, vocab_size)\n\n    def forward(self, inputs):\n        embeds = self.embeddings(inputs).view((1, -1))\n        out = F.relu(self.linear1(embeds))\n        out = self.linear2(out)\n        log_probs = F.log_softmax(out, dim=1)\n        return log_probs\n\n\nlosses = []\nloss_function = nn.NLLLoss()\nmodel = NGramLanguageModeler(len(vocab), EMBEDDING_DIM, CONTEXT_SIZE)\noptimizer = optim.SGD(model.parameters(), lr=0.001)\n\nfor epoch in range(600):\n    total_loss = 0\n    for context, target in trigrams:\n\n       \n        context_idxs = torch.tensor([word_to_ix[w] for w in context], dtype=torch.long)\n        model.zero_grad()\n        \n        log_probs = model(context_idxs)\n        loss = loss_function(log_probs, torch.tensor([word_to_ix[target]], dtype=torch.long))\n\n       \n        loss.backward()\n        optimizer.step()\n\n    \n        total_loss += loss.item()\n    print('epoch',epoch,'loss:',total_loss)\n    losses.append(total_loss)","edc040eb":"print(losses)  ","405f473b":"print(model.embeddings.weight[word_to_ix[\"solution\"]])","b22e54cb":"This notebook is a replica for practicing code for NLP and to infer the Output. I created this notebook specifically for learning NLP with PyTorch. \n\nCredits to PyTorch Tutorials\n\nLink: hhttps:\/\/pytorch.org\/tutorials\/beginner\/nlp\/word_embeddings_tutorial.html#sphx-glr-beginner-nlp-word-embeddings-tutorial-py"}}