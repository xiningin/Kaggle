{"cell_type":{"ef7eaa30":"code","e5bb9a6b":"code","f87a1977":"code","e74e0e61":"code","081adee8":"code","f8a328fd":"code","3bcb0c7a":"code","0eb654ae":"code","c64fbdcd":"code","15b3de98":"code","d13fbd1e":"code","5b180fb7":"code","53a569c0":"code","98f67c2d":"code","734a6bc4":"code","386307ab":"code","c0cfd1c0":"code","2a1acdde":"code","c3a1ddc7":"code","9199a295":"code","4ccd2d88":"code","eaf69cda":"code","b87b3728":"code","6cdf9621":"code","5f772d5a":"code","492d2722":"code","c5c1986d":"code","7f1a4357":"code","f47ae265":"code","97a5b493":"code","401d1a23":"code","980a1e81":"code","b4335175":"code","a00f87e2":"code","995c65bb":"code","a05b5b99":"code","efe57ef1":"code","0a6fa53a":"code","980dc803":"code","c7031684":"code","c2049556":"code","33dee5f3":"code","72e6efd7":"code","d5ec23c5":"code","8e991559":"code","fc1f3a1a":"code","639e797f":"code","b7085cdc":"code","0e23e552":"code","9deb9bdf":"code","be08d15f":"code","612ee6d1":"markdown","19b3d5c5":"markdown","0cfed5a7":"markdown","687be5d7":"markdown","f4bfe4f0":"markdown","d3506c20":"markdown","79c5b2e7":"markdown","1ed6d168":"markdown","a0027820":"markdown","b9479693":"markdown","de4db727":"markdown","29950ba4":"markdown","31fdc8fa":"markdown","d5a1a595":"markdown","26db5a59":"markdown","5348bdd6":"markdown","5f6a9b7f":"markdown","a5338727":"markdown","d15811dd":"markdown"},"source":{"ef7eaa30":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5bb9a6b":"import warnings\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score, roc_curve, auc, accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport torch\nimport torch.nn as nn\nimport xgboost as xgb\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\nplt.style.use(style='ggplot')\n%matplotlib inline","f87a1977":"train = pd.read_csv('..\/input\/amazon-employee-access-challenge\/train.csv')\ntest = pd.read_csv('..\/input\/amazon-employee-access-challenge\/test.csv')\nsample = pd.read_csv('..\/input\/amazon-employee-access-challenge\/sampleSubmission.csv')\ntest_id = test['id']","e74e0e61":"print(train.shape)\ntrain.head()","081adee8":"print(test.shape)\ntest.head()","f8a328fd":"sample.head()","3bcb0c7a":"print(train.shape)\nprint(train.isnull().sum())\ntrain.info()","0eb654ae":"print(test.shape)\nprint(test.isnull().sum())\ntest.info()","c64fbdcd":"print(\"----------Box Plots for detecting outliers---------\")\ncols = train.columns\nfor i in cols:\n    plt.figure()\n    sns.boxplot(train[i])","15b3de98":"# Resource\nsns.boxplot(test['RESOURCE'])","d13fbd1e":"# Role Rollup 1\nsns.boxplot(test['ROLE_ROLLUP_1'])","5b180fb7":"# Role Rollup 2\nsns.boxplot(test['ROLE_ROLLUP_2'])","53a569c0":"# Role Code\nsns.boxplot(test['ROLE_CODE'])","98f67c2d":"# resource_outliers = train[train['RESOURCE'] > 150000]\n# role_rollup_1_outliers1 = train[train['ROLE_ROLLUP_1'] > 150000]  \n# role_rollup_1_outliers2 = train[train['ROLE_ROLLUP_1'] < 100000]\n# role_rollup_1_outliers = pd.concat([role_rollup_1_outliers1, role_rollup_1_outliers2], axis=0)\nrole_rollup_2_outliers1 = train[train['ROLE_ROLLUP_2'] > 200000]\n# role_rollup_2_outliers2 = train[train['ROLE_ROLLUP_2'] < 100000]\n# role_rollup_2_outliers = pd.concat([role_rollup_2_outliers1, role_rollup_2_outliers2], axis=0)\n# role_deptname_outliers = train[train['ROLE_DEPTNAME'] < 100000]\n# role_code_outliers = train[train['ROLE_CODE'] > 200000]\n# print(\"Rsource outliers:\", len(resource_outliers))\n# print(\"Role Rollup 1 outliers:\", len(role_rollup_1_outliers))\nprint(\"Role Rollup 2 outliers:\", len(role_rollup_2_outliers1))\n# print(\"Role detname outliers:\", len(role_deptname_outliers))\n# print(\"Role code outliers:\", len(role_code_outliers))","734a6bc4":"# print(train.shape)\n# lst = [resource_outliers, role_rollup_1_outliers, role_rollup_2_outliers, role_deptname_outliers, role_code_outliers]\n# for i in lst:\n#     todrop = list(i.index)\n#     try:\n#         train.drop(todrop, axis=0, inplace=True)\n#     except Exception as e:\n#         print(len(i))\n#         print(e)\n#         continue\n# print(train.shape)","386307ab":"print(train.shape)\ntodrop = list(role_rollup_2_outliers1.index)\ntrain.drop(todrop, axis=0, inplace=True)\nprint(train.shape)","c0cfd1c0":"train.reset_index(drop=True)","2a1acdde":"train.describe().T","c3a1ddc7":"plt.figure(figsize=(10, 8))\nsns.heatmap(train.corr(), annot=True)","9199a295":"train['RESOURCE'][:10]","4ccd2d88":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'RESOURCE', data=train)","eaf69cda":"train['MGR_ID'][:10]","b87b3728":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'MGR_ID', data=train)","6cdf9621":"temp = pd.DataFrame(columns=['is_MGR_ID_BiggerThan150000'], dtype=np.float32)\ntrain = pd.concat([train, temp], axis=1)\nfor i in range(train.shape[0]):\n    try:\n        if train['MGR_ID'][i] > 150000:\n            train['is_MGR_ID_BiggerThan150000'][i] = 1\n        else:\n            train['is_MGR_ID_BiggerThan150000'][i] = 0\n    except Exception:\n        train['is_MGR_ID_BiggerThan150000'][i] = 0\n        pass\n    \n    \ntemp = pd.DataFrame(columns=['is_MGR_ID_BiggerThan150000'], dtype=np.float32)\ntest = pd.concat([test, temp], axis=1)\nfor i in range(test.shape[0]):\n    try:\n        if test['MGR_ID'][i] > 150000:\n            test['is_MGR_ID_BiggerThan150000'][i] = 1\n        else:\n            test['is_MGR_ID_BiggerThan150000'][i] = 0\n    except Exception:\n        test['is_MGR_ID_BiggerThan150000'][i] = 0\n        pass","5f772d5a":"train['ROLE_ROLLUP_1'][:10]","492d2722":"plt.figure(figsize=(12, 12))\nsns.catplot('ACTION', 'ROLE_ROLLUP_1', data=train)","c5c1986d":"temp = pd.DataFrame(columns=['is_ROLE_ROLLUP_1_BiggerThan150000'], dtype=np.float32)\ntrain = pd.concat([train, temp], axis=1)\nfor i in range(train.shape[0]):\n    try:\n        if train['ROLE_ROLLUP_1'][i] > 150000:\n            train['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 1\n        else:\n            train['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 0\n    except Exception:\n        train['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 0\n        pass\n    \ntemp = pd.DataFrame(columns=['is_ROLE_ROLLUP_1_BiggerThan150000'], dtype=np.float32)\ntest = pd.concat([test, temp], axis=1)\nfor i in range(test.shape[0]):\n    try:\n        if test['ROLE_ROLLUP_1'][i] > 150000:\n            test['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 1\n        else:\n            test['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 0\n    except Exception:\n        test['is_ROLE_ROLLUP_1_BiggerThan150000'][i] = 0\n        pass","7f1a4357":"train['ROLE_ROLLUP_2'][:10]","f47ae265":"train['ROLE_ROLLUP_2'].value_counts()","97a5b493":"sns.catplot('ACTION', 'ROLE_ROLLUP_2', data=train)","401d1a23":"temp = pd.DataFrame(columns=['is_ROLE_ROLLUP_2_BiggerThan140000'], dtype=np.float32)\ntrain = pd.concat([train, temp], axis=1)\nfor i in range(train.shape[0]):\n    try:\n        if train['ROLE_ROLLUP_2'][i] > 140000:\n            train['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 1\n        else:\n            train['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 0\n    except Exception:\n        train['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 0\n        pass\n    \ntemp = pd.DataFrame(columns=['is_ROLE_ROLLUP_2_BiggerThan140000'], dtype=np.float32)\ntest = pd.concat([test, temp], axis=1)\nfor i in range(test.shape[0]):\n    try:\n        if test['ROLE_ROLLUP_2'][i] > 140000:\n            test['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 1\n        else:\n            test['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 0\n    except Exception:\n        test['is_ROLE_ROLLUP_2_BiggerThan140000'][i] = 0\n        pass","980a1e81":"train['ROLE_DEPTNAME'][:10]","b4335175":"train['ROLE_DEPTNAME'].value_counts()","a00f87e2":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'ROLE_DEPTNAME', data=train)","995c65bb":"len(train[train['ROLE_DEPTNAME'] < 100000])","a05b5b99":"train['ROLE_TITLE'][:10]","efe57ef1":"train['ROLE_TITLE'].value_counts()","0a6fa53a":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'ROLE_TITLE', data=train)","980dc803":"train['ROLE_FAMILY_DESC'][:10]","c7031684":"train['ROLE_FAMILY_DESC'].value_counts()","c2049556":"plt.figure(figsize=(9, 7))\nsns.catplot('ACTION', 'ROLE_FAMILY_DESC', data=train)","33dee5f3":"train['ROLE_FAMILY'][:10]","72e6efd7":"train['ROLE_FAMILY'].value_counts()","d5ec23c5":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'ROLE_FAMILY', data=train)","8e991559":"train['ROLE_CODE'][:10]","fc1f3a1a":"train['ROLE_CODE'].value_counts()","639e797f":"plt.figure(figsize=(9, 6))\nsns.catplot('ACTION', 'ROLE_CODE', data=train)","b7085cdc":"temp = pd.DataFrame(columns=['is_ROLE_CODE_BiggerThan200000'], dtype=np.float32)\ntrain = pd.concat([train, temp], axis=1)\nfor i in range(train.shape[0]):\n    try:\n        if train['ROLE_CODE'][i] > 140000:\n            train['is_ROLE_CODE_BiggerThan200000'][i] = 1\n        else:\n            train['is_ROLE_CODE_BiggerThan200000'][i] = 0\n    except Exception:\n        train['is_ROLE_CODE_BiggerThan200000'][i] = 0\n        pass\n    \ntemp = pd.DataFrame(columns=['is_ROLE_CODE_BiggerThan200000'], dtype=np.float32)\ntest = pd.concat([test, temp], axis=1)\nfor i in range(test.shape[0]):\n    try:\n        if test['ROLE_CODE'][i] > 140000:\n            test['is_ROLE_CODE_BiggerThan200000'][i] = 1\n        else:\n            test['is_ROLE_CODE_BiggerThan200000'][i] = 0\n    except Exception:\n        test['is_ROLE_CODE_BiggerThan200000'][i] = 0\n        pass","0e23e552":"train['is_ROLE_CODE_BiggerThan200000'].value_counts()","9deb9bdf":"train.isnull().sum()","be08d15f":"train[train['is_MGR_ID_BiggerThan150000'].isnull()]\ntrain.drop(32768, axis=0, inplace=True)","612ee6d1":"Not enough to generate some feature for it","19b3d5c5":"# Modelling Advice\nYour main goal here is to avoid overfitting, I recommend you build a Neural Network (using Pytorch\/TF\/Keras) and use Dropout(for Regularization) because it's very effective. This is how you get the best results.\nHere is a good introduction for Dropoutt (https:\/\/machinelearningmastery.com\/dropout-for-regularizing-deep-neural-networks\/).","0cfed5a7":"### ROLE_DEPTNAME","687be5d7":"### ROLE_ROLLUP_2","f4bfe4f0":"We could generate a new feature here called 'is_ROLE_ROLLUP_1_BiggerThan150000'","d3506c20":"### ROLE_ROLLUP_1","79c5b2e7":"### ROLE_FAMILY","1ed6d168":"### ROLE_CODE","a0027820":"- I guess it's gonna be better if we do nothing with ('resource', 'role rollup 1', 'role_detpname', 'role_code') columns\n- We handle the rest of the outliers","b9479693":"### ROLE_FAMILY_DESC","de4db727":"We could generate a new feature here called 'is_MGR_ID_BiggerThan150000'","29950ba4":"### ROLE_TITLE","31fdc8fa":"# Exploration","d5a1a595":"We could generate a new feature here called 'is_ROLE_CODE_BiggerThan200000'","26db5a59":"We could generate a new feature here called 'is_ROLE_ROLLUP_2_BiggerThan140000'","5348bdd6":"ACTION: ACTION is 1 if the resource was approved, 0 if the resource was not.\n\nRESOURCE: An ID for each resource.\n\nMGR_ID: The EMPLOYEE ID of the manager of the current EMPLOYEE ID record; an employee may have only one manager at a time.\n\nROLE_ROLLUP_1: Company role grouping category id 1 (e.g. US Engineering).\n\nROLE_ROLLUP_2: Company role grouping category id 2 (e.g. US Retail).\n\nROLE_DEPTNAME: Company role department description (e.g. Retail).\n\nROLE_TITLE: Company role business title description (e.g. Senior Engineering Retail Manager).\n\nROLE_FAMILY_DESC: Company role family extended description (e.g. Retail Manager, Software Engineering).\n\nROLE_FAMILY: Company role family description (e.g. Retail Manager).\n\nROLE_CODE: Company role code; this code is unique to each role (e.g. Manager).","5f6a9b7f":"### MGR_ID","a5338727":"### Resource","d15811dd":"# EDA"}}