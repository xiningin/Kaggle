{"cell_type":{"7e39136f":"code","05c326c9":"code","ac07b7e0":"code","c420872d":"code","485c6d0b":"code","f50410b4":"code","2bc77b1f":"code","2eaa1b25":"code","48ff0fc4":"code","cdf28f3e":"code","8ebfcc5a":"code","c794db91":"code","634cbca0":"code","adf3caed":"code","3b24937b":"code","99069c31":"code","bcd58456":"code","8f5a4f85":"code","615c4238":"code","623fe572":"code","d2db4c66":"code","70841bc9":"code","c716b4f7":"code","d79f262e":"code","3c45cc97":"code","bb6a33db":"code","e9a5e096":"code","7846b597":"code","dee60acb":"code","fec5e01f":"code","9b5e752f":"code","61fa8583":"code","10d63282":"code","3b4a4079":"code","ceb30af5":"code","12a0ba1c":"code","5d0bd15b":"code","bf5675b9":"code","3de19c24":"code","947d1ab4":"code","4a399bb2":"code","6583c64d":"code","26c72303":"code","13fc23b8":"code","b96bdc30":"code","8f6b4e1f":"code","226d704f":"code","6c122f53":"code","7b1c8f1b":"code","1fd7709b":"code","b64cb714":"code","ff5af59f":"code","771acfd2":"code","e058d92e":"code","72629184":"code","b743aacf":"code","54af47bd":"code","9db65977":"code","901e4d59":"code","0dbac919":"code","4baabbd6":"code","040a28b5":"code","4dbdaf18":"code","74ec417b":"code","3cd14641":"code","fb9c39f3":"code","0d42ccfd":"code","11aa632a":"code","5c1e303f":"code","60181fb0":"code","de998e9c":"code","bce57c7b":"code","03953929":"code","164e6b7b":"code","7bc66011":"code","c18bd49f":"code","64390f1b":"code","d213a4e6":"code","09e7baad":"code","c27d0d30":"code","eb37cfe0":"code","e8da1039":"code","2c98fd18":"code","35f8d6b1":"code","f3f23eb7":"code","2d8671b8":"code","3219c705":"code","45524712":"code","e9b5ac4d":"code","68aa2bc5":"code","19d1ffe1":"code","dcc5a50f":"code","a5224fcc":"code","23feb8cf":"code","dd0501b2":"code","72435aa9":"code","9d035abc":"code","4f605869":"code","68005518":"markdown","d6cad352":"markdown","0c80cc42":"markdown","04fdd6c6":"markdown","c5593e69":"markdown","c8f5b068":"markdown","c5491dd1":"markdown","1a053754":"markdown","c1e3ca57":"markdown","71eda7d6":"markdown","794ff51b":"markdown","e9df8376":"markdown","82d3503e":"markdown","eebac18d":"markdown","e4fe6e67":"markdown","f289b250":"markdown","976ba91a":"markdown","36a9fff4":"markdown","a48124f6":"markdown","f8da9bac":"markdown","7196d8fa":"markdown","d99e6dc5":"markdown","7401c18c":"markdown","7da2910d":"markdown","44bcbdc9":"markdown","f9b9df0c":"markdown","e2587206":"markdown","5df4aac1":"markdown","5e38924a":"markdown","9f218532":"markdown","3fba33b7":"markdown","e74e7f9d":"markdown","ba210151":"markdown","e8a9ee59":"markdown","8ab3d844":"markdown","d0644101":"markdown"},"source":{"7e39136f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05c326c9":"import numpy as np \nimport pandas as pd\nimport calendar\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport squarify\nimport gc\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport time\nimport datetime\nfrom datetime import datetime\nimport calendar\n\nfrom sklearn import model_selection # model assesment and model selection strategies\nfrom sklearn import metrics # model evaluation metrics\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.tree import export_graphviz\nimport graphviz\nfrom sklearn.preprocessing import LabelEncoder,MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\n\n\nsns.set_style('white')\n\npd.options.display.float_format = '{:,.2f}'.format","ac07b7e0":"def calcula_diferencias_mensuales (dataset, variable):\n    dataset[variable+'_pm']  = dataset.groupby('pk_cid')[variable].shift(1)\n    dataset['dif_'+variable] = dataset[variable] - dataset[variable+'_pm']\n    #dataset['dif_'+variable]  = dataset.groupby('pk_cid')[variable].diff()\n    dataset.drop(variable+'_pm',axis=1,inplace=True)\n","c420872d":"products_file = '\/kaggle\/input\/easymoney\/products_df.csv'\nproducts = pd.read_csv(products_file)\nproducts.drop('Unnamed: 0', axis=1, inplace=True)\n\nsd_file = '\/kaggle\/input\/easymoney\/sociodemographic_df.csv'\nsociodemographic = pd.read_csv(sd_file)\nsociodemographic.drop('Unnamed: 0',axis=1, inplace=True)\n\nca_file = '\/kaggle\/input\/easymoney\/commercial_activity_df.csv'\ncommercial = pd.read_csv(ca_file)\ncommercial.drop('Unnamed: 0',axis=1, inplace=True)","485c6d0b":"df_= pd.merge(products,commercial, how=\"inner\",on=['pk_cid','pk_partition' ])\ndf=pd.merge(df_,sociodemographic, how=\"inner\",on=['pk_cid','pk_partition'])","f50410b4":"#df_sorted = pd.read_pickle('\/kaggle\/input\/easymoney\/EasyMoney_base.pkl',compression='zip')","2bc77b1f":"df_sorted = df.sort_values(by=['pk_cid', 'pk_partition'])","2eaa1b25":"del products, sociodemographic, commercial, df","48ff0fc4":"gc.collect()","cdf28f3e":"productos_easymoney=['loans',\n 'mortgage',\n 'funds',\n 'securities',\n 'long_term_deposit',\n 'em_account_pp',\n 'credit_card',\n 'payroll',\n 'pension_plan',\n 'payroll_account',\n 'emc_account',\n 'debit_card',\n 'em_account_p',\n 'em_acount']","8ebfcc5a":"for x in productos_easymoney:\n    calcula_diferencias_mensuales (df_sorted, x)","c794db91":"# las ponemos a 2019-02-28\ndf_sorted.loc[ (df_sorted['entry_date']=='2019-02-29'), \n              'entry_date']='2019-02-28'\ndf_sorted.loc[ (df_sorted['entry_date']=='2015-02-29'), \n              'entry_date']='2015-02-28'","634cbca0":"# Vamos a ponerlos como fechas\nfor i in [\"pk_partition\",\"entry_date\"]:\n    df_sorted[i]=pd.to_datetime(df_sorted[i], format='%Y-%m-%d')","adf3caed":"# Vamos a restar las dos y lo ponemos en mesess:\ndf_sorted['mesesAlta']=(df_sorted['pk_partition']-df_sorted['entry_date'])\/np.timedelta64(1,'M')\n","3b24937b":"# Creamos el campo isNewClient\ndf_sorted['isNewClient']=((df_sorted['mesesAlta'] < 1) & \n                          (df_sorted['mesesAlta'] > 0)).astype(int)","99069c31":"# Cuando es usuario nuevo todos los campos diff de ses mes estan a 0. Pero el puede haber contratado \n# algo en ese mismo mes y no estaria recogido en el campo diff. \n# Para las altas nuevas igualamos los dif con los contadores del producto\nfor x in productos_easymoney:\n    df_sorted.loc[ (df_sorted['isNewClient']==1) &\n                   (df_sorted['dif_'+x].isnull()==True), \n                  'dif_'+x]=df_sorted[x]","bcd58456":"df_sorted['isActive']=((df_sorted['loans']==0) &\n                        (df_sorted['mortgage']==0) &\n                        (df_sorted['funds']==0) &\n                        (df_sorted['securities']==0) &\n                        (df_sorted['long_term_deposit']==0) &\n                        (df_sorted['em_account_pp']==0) &\n                        (df_sorted['credit_card']==0) &\n                        (df_sorted['payroll']==0) &\n                        (df_sorted['pension_plan']==0) &\n                        (df_sorted['payroll_account']==0) &\n                        (df_sorted['emc_account']==0) &\n                        (df_sorted['debit_card']==0) &\n                        (df_sorted['em_account_p']==0) &\n                        (df_sorted['em_acount']==0)).astype(int)\n# pero nos queda al reves, hacemos la negacion\ndf_sorted['isActive']=(df_sorted['isActive']!=1).astype(int)","8f5a4f85":"#df_sorted.to_pickle('.\/dataset_base.pkl')","615c4238":"#df_sorted =pd.read_pickle('.\/dataset_base.pkl')","623fe572":"df_sorted.info(verbose=False)","d2db4c66":"# Easymoney product list\nproductos_easymoney=['loans',\n 'mortgage',\n 'funds',\n 'securities',\n 'long_term_deposit',\n 'em_account_pp',\n 'credit_card',\n 'payroll',\n 'pension_plan',\n 'payroll_account',\n 'emc_account',\n 'debit_card',\n 'em_account_p',\n 'em_acount']","70841bc9":"df_assets=df_sorted.melt(id_vars=['pk_partition','pk_cid'],\n              value_vars=productos_easymoney,\n              var_name='Product',\n              value_name='Count')","c716b4f7":"df_assets=df_assets.groupby(['pk_partition','pk_cid']).agg({'Count':np.sum}).reset_index(drop=False)","d79f262e":"df_assets.rename(columns={'Count':'totalAssets'}, inplace=True)","3c45cc97":"len(df_sorted),len(df_assets)","bb6a33db":"df_sorted=pd.merge(df_sorted,df_assets, how=\"inner\",on=['pk_cid','pk_partition'])","e9a5e096":"del df_assets","7846b597":"# Leememos directamente todo lo anterior del pickle generado en el notebook: Easymoney_first_steps:\ndf_sorted = pd.read_pickle('\/kaggle\/input\/easymoney\/EasyMoney_base.pkl',compression='zip')","dee60acb":"df_sorted.isnull().sum()","fec5e01f":"df_sorted['payroll'].fillna(0,inplace=True)","9b5e752f":"df_sorted['pension_plan'].fillna(0,inplace=True)","61fa8583":"df_sorted","10d63282":"vars_colums=['pk_cid','pk_partition',\n'entry_date',             \n'entry_channel',                 \n'active_customer',              \n'segment',                     \n'country_id',                  \n'region_code',                  \n'gender',                         \n'age',                            \n'deceased',              \n'salary',  \n'mesesAlta',                   \n'isNewClient',                    \n'isActive',\n'em_acount',\n'totalAssets']\n#'debit_card'] ","3b4a4079":"delta_productos_easymoney=[\n 'dif_em_acount']","ceb30af5":"df_altas=df_sorted.melt(id_vars=vars_colums,\n              value_vars=delta_productos_easymoney,\n              var_name='Product',\n              value_name='Count')","12a0ba1c":"df_altas.isnull().sum()","5d0bd15b":"del df_sorted","bf5675b9":"gc.collect()","3de19c24":"lista_fechas=['2018-01-28',\n'2018-02-28',\n'2018-03-28',\n'2018-04-28',\n'2018-05-28',\n'2018-06-28',\n'2018-07-28',\n'2018-08-28',\n'2018-09-28',\n'2018-10-28',\n'2018-11-28',\n'2018-12-28',\n'2019-01-28',\n'2019-02-28',\n'2019-03-28',\n'2019-04-28',\n'2019-05-28',             \n'2019-06-28']","947d1ab4":"# Solo clientes activos el ultimo mes:\nlista_clientes=df_altas[(df_altas['isActive']==1) & \n                        (df_altas['pk_partition']=='2019-05-28')][\"pk_cid\"].unique().tolist()","4a399bb2":"# Solo uno por razones de memoria del Kernel\nlista_productos=['dif_em_acount']","6583c64d":"cartesian_product = pd.MultiIndex.from_product([lista_fechas, \n                                                lista_clientes , \n                                                lista_productos], names = [\"pk_partition\", \"pk_cid\", \"Product\"])\nlen(cartesian_product)","26c72303":"cartesian_product","13fc23b8":"full_df = pd.DataFrame(index = cartesian_product).reset_index()\nfull_df.tail()","b96bdc30":"# Ponemos el campo pk_partition a tipo fecha\nfull_df['pk_partition']=pd.to_datetime(full_df['pk_partition'], format='%Y-%m-%d')","8f6b4e1f":"full_df.groupby('pk_partition')['pk_cid'].size()","226d704f":"full_df = pd.merge(full_df, df_altas, on = [\"pk_partition\", \"pk_cid\", \"Product\"], how = 'left')","6c122f53":"del df_altas","7b1c8f1b":"full_df.groupby('pk_partition')['pk_cid'].size()","1fd7709b":"# Borramos todos los nulos que se generan por el producto cartesiano:\nfull_df.drop (full_df[ (full_df['pk_partition']!='2019-06-28') &\n                       (full_df['entry_date'].isnull()) ].index, axis=0, inplace=True)","b64cb714":"# Comprobamos el borrado:\nfull_df.groupby('pk_partition')['pk_cid'].size()","ff5af59f":"len(full_df)","771acfd2":"full_df.drop(full_df[(full_df['isNewClient']==0) &\n                        (full_df['isActive']==0) & \n                       (full_df['em_acount']==0) &\n                       (full_df['Count']==0) ].index ,axis=0, inplace=True)","e058d92e":"full_df.groupby('pk_partition')['pk_cid'].size()","72629184":"full_df[(full_df['pk_cid']==1231342)]","b743aacf":"full_df.info(verbose=False)","54af47bd":"lista_actualizar=['entry_date',\n #'entry_channel',\n 'active_customer',\n #'segment',\n #'country_id',\n 'region_code',\n #'gender',\n 'age',\n #'deceased',\n 'salary']\n #'mesesAlta']","9db65977":"# Rellenamos entry_date y los campos anteriores para el ultimo mes 06\/2019:\nfor x in lista_actualizar:\n    print(x)\n    full_df.loc[(full_df['pk_partition']=='2019-06-28'),\n                x]=full_df[full_df['pk_partition']=='2019-06-28']['pk_cid'].map(full_df[['pk_cid',x]].groupby('pk_cid')[x].max())","901e4d59":"full_df[(full_df['pk_cid']==1231342) & (full_df['pk_partition']=='2019-06-28')]","0dbac919":"# Solo hay nulos en el ultimo mes ,el mes a predecir:\nfull_df.isnull().sum()","4baabbd6":"#full_df.to_pickle('.\/full_df_antesFe.pkl')","040a28b5":"#full_df =pd.read_pickle('.\/full_df_antesFe.pkl')","4dbdaf18":"gc.collect()","74ec417b":"# Solo 5 meses hacia atras por razones de memoria del kernel\nfor x in [1,2,3,4,5]:\n    full_df['Count_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['Count'].shift(x)\n    full_df['em_acount_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['em_acount'].shift(x)\n    full_df['isActive_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['isActive'].shift(x)\n    full_df['isNewClient_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['isNewClient'].shift(x)\n    full_df['active_customer_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['active_customer'].shift(x)\n    full_df['totalAssets_shift_'+str(x)]=full_df.groupby(['pk_cid','Product'])['totalAssets'].shift(x)","3cd14641":"# La borro xq no aporta mucho y hacemos espacio:\nfull_df.drop('country_id',axis=1,inplace=True)","fb9c39f3":"full_df.fillna(-999, inplace=True)","0d42ccfd":"full_df[\"year\"] = full_df[\"pk_partition\"].dt.year\nfull_df[\"month\"] = full_df[\"pk_partition\"].dt.month","11aa632a":"full_df[\"entry_date_year\"] = full_df[\"entry_date\"].dt.year\nfull_df[\"entry_date_month\"] = full_df[\"entry_date\"].dt.month","5c1e303f":"dummy_dataset = pd.get_dummies(full_df['gender'],prefix='gender')","60181fb0":"dummy_dataset.head()","de998e9c":"full_df = pd.concat([full_df,dummy_dataset],axis=1)","bce57c7b":"del dummy_dataset","03953929":"gc.collect()","164e6b7b":"full_df.isnull().sum().sum()","7bc66011":"#full_df.to_pickle('.\/full_df_antesFe.pkl')","c18bd49f":"train_index = sorted(list(full_df[\"pk_partition\"].unique()))[6:-3]\n\nvalida_index = [sorted(list(full_df[\"pk_partition\"].unique()))[-3]]\n\ntest_index = [sorted(list(full_df[\"pk_partition\"].unique()))[-2]]","64390f1b":"variables_borrar= ['Count' ,\n\"pk_partition\",\n'pk_cid',\n'Product',\n'segment',\n'gender', \n'deceased',\n'mesesAlta',\n'entry_date',\n#'country_id',\n'entry_channel',\n'em_acount',\n#'debit_card',\n'isNewClient',\n'isActive',\n'active_customer',\n'totalAssets']","d213a4e6":"X_train = full_df[full_df[\"pk_partition\"].isin(train_index)].drop(variables_borrar, axis=1)\nY_train = full_df[full_df[\"pk_partition\"].isin(train_index)]['Count']\n\nX_valida = full_df[full_df[\"pk_partition\"].isin(valida_index)].drop(variables_borrar, axis=1)\nY_valida = full_df[full_df[\"pk_partition\"].isin(valida_index)]['Count']\n\nX_test = full_df[full_df[\"pk_partition\"].isin(test_index)].drop(variables_borrar, axis=1)\nY_test = full_df[full_df[\"pk_partition\"].isin(test_index)]['Count']","09e7baad":"del full_df","c27d0d30":"gc.collect()","eb37cfe0":"dt = DecisionTreeClassifier(max_depth=7,random_state=42)","e8da1039":"dt.fit(X_train,Y_train)","2c98fd18":"score_train=dt.score(X_train, Y_train)\nscore_test=dt.score(X_valida, Y_valida)\nprint('Resultados para: Train: {} - Test: {}'.format(score_train,score_test))\n","35f8d6b1":"y_valida_pred = pd.DataFrame(dt.predict(X_valida), index=Y_valida.index, columns=['CountPrediction'])","f3f23eb7":"results_df = Y_valida.to_frame().join(y_valida_pred)","2d8671b8":"results_df[results_df['Count']!=0].sample(40)","3219c705":"results_df['error']=results_df['Count']-results_df['CountPrediction']","45524712":"results_df['error'].hist()","e9b5ac4d":"results_df[results_df['Count']==0]['error'].hist()","68aa2bc5":"results_df[results_df['Count']==-1]['error'].hist()","19d1ffe1":"results_df[results_df['Count']==1]['error'].hist()","dcc5a50f":"results_df[results_df['Count']!=0]['error'].value_counts()","a5224fcc":"top_features = pd.Series(dt.feature_importances_, index=X_train.columns).sort_values(ascending=False).head(20)","23feb8cf":"top_features","dd0501b2":"len(results_df)","72435aa9":"results_df[results_df['Count']==0]['error'].value_counts()","9d035abc":"results_df[results_df['Count']==-1]['error'].value_counts()","4f605869":"results_df[results_df['Count']==1]['error'].value_counts()","68005518":"Vamos a entrenar con todos los meses excepto los dos ultimos. Validamos con el penultimo y test en el ultimo. Todavia nos quedaria el del mes 06\/2019 que seria del que ya realmente no tenemos datos. Quito los primeros meses del entrenamiento donde las variables lags son nulas (-999)","d6cad352":"# Creamos campo es usuario nuevo:","0c80cc42":"Hace:mos el merge de los datos ","04fdd6c6":"# Variable totalAssest","c5593e69":"> ![](http:\/\/)Las altas mucho mejor. Cazamos 3475 altas y fallamos 552. Lo que nos da un 84% de acierto en las altas. [](http:\/\/)","c8f5b068":"Hay que volver sobre este punto porque podemos poblar mas campos, con datos antiguos. ","c5491dd1":"Parece un Score muy bueno, pero si lo vemos en detalle es muy pobre","1a053754":"Debido al producto cartesiano se nos generra muchos clientes inactivos en las fechas posteriores. Asi que procedo a borrar los clientes de \"relleno\" en los meses que no existian y que no nos aportan informacion. De hecho sin hacer este paso, el desempe\u00f1o del modelo es muy, muy malo. ","c1e3ca57":"Para poder hacer predicciones para el mes 06\/2019 del que no tenemos datos, vamos a cambiar de forma al dataset. Vamos a pasar todas las columnas dif_ con los incrementos mensuales a solo dos columnas \"producto\" y \"count\" mediante un melt del dataset. Dejamos em_acount y el debit_card para luego poder sacar mejor las variables LAG. Hacemos el melt solo para dos productos por limitaciones de memoria","71eda7d6":"Caza muy pocas bajas!!!!!!!!!!!!!!!!!!!!! Solo unas pocas mas de 200","794ff51b":"Comprobamos que se han borado clientes en los meses antiguos","e9df8376":"# Obtenemos las diferencias por meses:","82d3503e":"De los casos que son 0 (Se queda como esta), se aciertan 321419 y se fallan 1369","eebac18d":"Vamos a tratar de hacer la prediccion de altas\/bajas solo para los clientes activos en el ultimo mes del que tenemos datos y solo para el producto em_acount por limitaciones de memoria. A\u00f1adimos el mes 2019-06-28 a la lista de fechas para tener datos de ese mes","e4fe6e67":"# Cargamos directamente el dataset anterior del pickle","f289b250":"Hot encoding con el genero","976ba91a":"# Cargamos las funciones necesarias","36a9fff4":"Ordenamos el Dataset y llamamos a la funci\u00f3n calcula_diferencias_mensuales","a48124f6":"Vamos a sacar variables LAG con los valores de los meses anteriores que son las que deberemos de usar de forma mayoritaria para entrenar al modelo","f8da9bac":"Se los casos que son baja, se aciertan 272 y se fallan 1707","7196d8fa":"Borramos los meses en que no pasa nada, para que el modleo aprenda emjor los cambios:","d99e6dc5":"# Entrenar modelo","7401c18c":"Definimos la funcion que nos hara las diferencias mensuales entre los productos EasyMoney","7da2910d":"Borramos las variables que hacen referencia al mes en curso y solo entrenamos el modelo con las LAGS y con las propias del cliente","44bcbdc9":"Hacemos el producto cartesiano:","f9b9df0c":"Cargamos los tres dataset Necesarios","e2587206":"# Vamos a hacer el producto cartesiano para predecir\nSolo clientes activos(Con producto) el ultimo mes","5df4aac1":"Vemos que el modelo parece cazar bien los 0 y los 1, pero no las bajas. ","5e38924a":"\ndelta_productos_easymoney=['dif_loans',\n 'dif_mortgage',\n 'dif_funds',\n 'dif_securities',\n 'dif_long_term_deposit',\n 'dif_em_account_pp',\n 'dif_credit_card',\n 'dif_payroll',\n 'dif_pension_plan',\n 'dif_payroll_account',\n 'dif_emc_account',\n 'dif_debit_card',\n 'dif_em_account_p',\n 'dif_em_acount']","9f218532":"Sacos variables de la fecha del mes en curso","3fba33b7":"# Creamos campo es usuario activo:","e74e7f9d":"De los que son altas de una nueva cuenta se aciertan 3379 y se fallan 552.","ba210151":"Los unimos de forma adecuada:","e8a9ee59":"Vemos que esta OK, con 331588 clientes en cada mes. ","8ab3d844":"En el mes a predecir la informaci\u00f3n relativa al cliente esta toda a NAN, como es logico. La repoblamos en la medida de  lo posible con los datos de meses anteriores:","d0644101":"# Feature engeniering"}}