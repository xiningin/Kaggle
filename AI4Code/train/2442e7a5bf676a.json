{"cell_type":{"aa8e2c37":"code","a97d72bd":"code","d6eec455":"code","0bc17b41":"code","44695306":"code","4914d865":"code","d08c20d7":"code","5a685c80":"code","0b0d5dfe":"code","95fefa29":"code","9c031b3f":"code","918ebd3b":"code","dc82b99b":"code","8dc29c9f":"code","2ffda1b7":"code","6afa0758":"code","fb5b2d3f":"code","30901f56":"code","dfedeb3a":"code","0f561d9e":"code","52a602aa":"code","4d9eb94c":"code","b4ea2574":"code","2d17bd0a":"code","dc9cc54a":"code","7f9c9c9e":"code","f6243d62":"code","166779af":"markdown","990ca76a":"markdown","8e34ca22":"markdown","b1373e0d":"markdown"},"source":{"aa8e2c37":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\ncolor = sns.color_palette()\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n%matplotlib inline\nfrom sklearn.feature_selection import RFE, f_regression\nfrom sklearn.linear_model import (LinearRegression, Ridge, Lasso, RandomizedLasso)\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import preprocessing","a97d72bd":"attendance_valuation_elo_df = pd.read_csv(\"..\/input\/nba_2017_att_val_elo.csv\");attendance_valuation_elo_df.head()","d6eec455":"salary_df = pd.read_csv(\"..\/input\/nba_2017_salary.csv\");salary_df.head()\n","0bc17b41":"pie_df = pd.read_csv(\"..\/input\/nba_2017_pie.csv\");pie_df.head()","44695306":"plus_minus_df = pd.read_csv(\"..\/input\/nba_2017_real_plus_minus.csv\");plus_minus_df.head()","4914d865":"br_stats_df = pd.read_csv(\"..\/input\/nba_2017_br.csv\");br_stats_df.head()","d08c20d7":"\nplus_minus_df.rename(columns={\"NAME\":\"PLAYER\", \"WINS\": \"WINS_RPM\"}, inplace=True)\nplayers = []\nfor player in plus_minus_df[\"PLAYER\"]:\n    plyr, _ = player.split(\",\")\n    players.append(plyr)\nplus_minus_df.drop([\"PLAYER\"], inplace=True, axis=1)\nplus_minus_df[\"PLAYER\"] = players\nplus_minus_df.head()","5a685c80":"\nnba_players_df = br_stats_df.copy()\nnba_players_df.rename(columns={'Player': 'PLAYER','Pos':'POSITION', 'Tm': \"TEAM\", 'Age': 'AGE', \"PS\/G\": \"POINTS\"}, inplace=True)\nnba_players_df.drop([\"G\", \"GS\", \"TEAM\"], inplace=True, axis=1)\nnba_players_df = nba_players_df.merge(plus_minus_df, how=\"inner\", on=\"PLAYER\")\nnba_players_df.head()","0b0d5dfe":"\npie_df_subset = pie_df[[\"PLAYER\", \"PIE\", \"PACE\", \"W\"]].copy()\nnba_players_df = nba_players_df.merge(pie_df_subset, how=\"inner\", on=\"PLAYER\")\nnba_players_df.head()","95fefa29":"salary_df.rename(columns={'NAME': 'PLAYER'}, inplace=True)\nsalary_df[\"SALARY_MILLIONS\"] = round(salary_df[\"SALARY\"]\/1000000, 2)\nsalary_df.drop([\"POSITION\",\"TEAM\", \"SALARY\"], inplace=True, axis=1)\nsalary_df.head()","9c031b3f":"nba_players_with_salary_df = nba_players_df.merge(salary_df); ","918ebd3b":"# import wiki data\nwiki_df = pd.read_csv(\"..\/input\/nba_2017_player_wikipedia.csv\");wiki_df.head()\nwiki_df.rename(columns={'names': 'PLAYER', \"pageviews\": \"PAGEVIEWS\"}, inplace=True)","dc82b99b":"median_wiki_df = wiki_df.groupby(\"PLAYER\").median()\nmedian_wiki_df_small = median_wiki_df[[\"PAGEVIEWS\"]]\nmedian_wiki_df_small = median_wiki_df_small.reset_index()\n# merge with wikipageviews\nnba_players_with_salary_wiki_df = nba_players_with_salary_df.merge(median_wiki_df_small)\nnba_players_with_salary_wiki_df.head()","8dc29c9f":"# import twitter data\ntwitter_df = pd.read_csv(\"..\/input\/nba_2017_twitter_players.csv\");twitter_df.head()","2ffda1b7":"# merge with twitter data\nnba_players_with_salary_wiki_twitter_df = nba_players_with_salary_wiki_df.merge(twitter_df)\nnba_players_with_salary_wiki_twitter_df.head()","6afa0758":"# drop strings\nnba_players_with_salary_wiki_twitter_df.drop(['Rk','PLAYER','POSITION','TEAM'],inplace=True, axis=1)\nnba_players_with_salary_wiki_twitter_df.head()","fb5b2d3f":"# exam missing values\nnba_players_with_salary_wiki_twitter_df.describe()","30901f56":"# drop columns with missing values\nnba_players_with_salary_wiki_twitter_df.dropna(axis=0,inplace=True)\nnba_players_with_salary_wiki_twitter_df.head()","dfedeb3a":"# define training features and training labels\ntrain_labels = nba_players_with_salary_wiki_twitter_df['SALARY_MILLIONS']\ntrain_features = nba_players_with_salary_wiki_twitter_df.drop(['SALARY_MILLIONS'], axis=1)\n# Store the column\/feature names into a list \"colnames\"\ncolnames = train_features.columns","0f561d9e":"# Normalize features\ntrain_features = pd.DataFrame(preprocessing.normalize(train_features,axis=0),columns= colnames)\ntrain_features.head()","52a602aa":"# exam shapes\nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\n#print('Testing Features Shape:', test_features.shape)\n#print('Testing Labels Shape:', test_labels.shape)","4d9eb94c":"# Define dictionary to store our rankings\nranks = {}\n# Create our function which stores the feature rankings to the ranks dictionary\ndef ranking(ranks, names, order=1):\n    minmax = MinMaxScaler()\n    ranks = minmax.fit_transform(order*np.array([ranks]).T).T[0]\n    ranks = map(lambda x: round(x,2), ranks)\n    return dict(zip(names, ranks))","b4ea2574":"# Using Linear Regression\nlr = LinearRegression(normalize=True)\nlr.fit(train_features, train_labels)\nranks[\"LinReg\"] = ranking(np.abs(lr.coef_), colnames)\n\n# Using Ridge \nridge = Ridge(alpha = 7)\nridge.fit(train_features, train_labels)\nranks['Ridge'] = ranking(np.abs(ridge.coef_), colnames)\n\n# Using Lasso\nlasso = Lasso(alpha=.05)\nlasso.fit(train_features, train_labels)\nranks[\"Lasso\"] = ranking(np.abs(lasso.coef_), colnames)","2d17bd0a":"# random forest feature ranking\nrf = RandomForestRegressor(n_jobs=-1, n_estimators=50, verbose=3)\nrf.fit(train_features, train_labels)\nranks[\"RF\"] = ranking(rf.feature_importances_, colnames);","dc9cc54a":"# Create empty dictionary to store the mean value calculated from all the scores\nr = {}\nfor name in colnames:\n    r[name] = round(np.mean([ranks[method][name] \n                             for method in ranks.keys()]), 2)\n \nmethods = sorted(ranks.keys())\nranks[\"Mean\"] = r\nmethods.append(\"Mean\")\n \nprint(\"\\t%s\" % \"\\t\".join(methods))\nfor name in colnames:\n    print(\"%s\\t%s\" % (name, \"\\t\".join(map(str, \n                         [ranks[method][name] for method in methods]))))","7f9c9c9e":"# Put the mean scores into a Pandas dataframe\nmeanplot = pd.DataFrame(list(r.items()), columns= ['Feature','Mean Ranking'])\n\n# Sort the dataframe\nmeanplot = meanplot.sort_values('Mean Ranking', ascending=False)","f6243d62":"# Let's plot the ranking of the features\nsns.factorplot(x=\"Mean Ranking\", y=\"Feature\", data = meanplot, kind=\"bar\", \n               size=14, aspect=1.9, palette='coolwarm')","166779af":"##  Linear Model Feature Ranking","990ca76a":"# Exploration of How  Winning Metrics and Social Media Predict Salary","8e34ca22":"## Model Training","b1373e0d":"## Objective\n\nIn this notebook, we explore how winning metrics of NBA players in year 2016-2017 and social media data can be used to predict their salary.\n\nWe first normalized all variables, and then built multiple models to predict salary. Based on the means of variable coefficients , we selected the three variables that have biggest prediction effect on salary. Because salary is based upon a lot of factors other than historical performance, this notebook is not aimed at predicting reasonable salary for purchasing players, rather, it's suggesting top factors to take into consideration."}}