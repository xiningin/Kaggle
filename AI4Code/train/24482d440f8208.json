{"cell_type":{"6ac2ec3c":"code","38a02428":"code","517384b3":"code","234a2934":"code","a47c8689":"code","e8c52029":"code","3f651b25":"code","f2be12b1":"code","516b7a7c":"code","5e82fdd0":"markdown"},"source":{"6ac2ec3c":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","38a02428":"import tensorflow as tf","517384b3":"CSV_COLUMN_NAMES = [\"Age\", \"Sex\", \"RestingBloodPressure\", \"Cholesterol\", \"FastingBloodSugar\", \"MaxHeartRate\", \"Probability\"]\nPROBABILITY_HA = [\"Low\", \"High\"]\n\ntrain = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ntrain.drop([\"cp\", \"restecg\", \"oldpeak\", \"slp\", \"caa\", \"thall\", \"exng\"], axis = 1, inplace=True)\ntrain.columns = CSV_COLUMN_NAMES\ntrain_y = train.pop('Probability')","234a2934":"# Input Func\ndef input_fn(features, labels, training, batch_size=256):\n    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))\n    if training:\n        dataset = dataset.shuffle(1000).repeat()\n    return dataset.batch(batch_size)","a47c8689":"my_feature_columns = []\nfor key in train.keys():\n    my_feature_columns.append(tf.feature_column.numeric_column(key=key, dtype=tf.uint32))\n\nclassifier = tf.estimator.DNNClassifier(\n    feature_columns=my_feature_columns,\n    hidden_units=[300, 100],\n    n_classes=3)\n\nclassifier.train(\n    input_fn=lambda: input_fn(train, train_y, training=True),\n    steps=10000)","e8c52029":"# Second Input Func\ndef input_fn2(features, batch_size=256):\n    return tf.data.Dataset.from_tensor_slices(dict(features)).batch(batch_size)","3f651b25":"features = [\"Age\", \"Sex\", \"RestingBloodPressure\", \"Cholesterol\", \"FastingBloodSugar\", \"MaxHeartRate\"]\npredict = {}","f2be12b1":"# Get necessary data\nprint(\"Please type numeric values as prompted.\")\nfor feature in features:\n    valid = True\n    while valid: \n        val = input(feature + \": \")\n        if val.isdigit(): valid = False\n    predict[feature] = [float(val)]","516b7a7c":"# Write prediction\npredictions = classifier.predict(input_fn=lambda: input_fn2(predict))\nfor pred_dict in predictions:\n    class_id = pred_dict['class_ids'][0]\n    probability = pred_dict['probabilities'][class_id]\n    print('Prediction is \"{}\" ({:.1f}%)'.format(\n        PROBABILITY_HA[class_id], 100 * probability))","5e82fdd0":"# Important Note\n*This is an artificial intelligence prediction application. It can make wrong guesses because of little data. If you believe you are at risk for a heart attack, consult your doctor instead of relying on this program.*"}}