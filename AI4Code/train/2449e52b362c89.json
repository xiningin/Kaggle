{"cell_type":{"498d7a78":"code","a29d41a6":"code","0bfddb24":"code","4adf64de":"code","5d0d6971":"code","0117364b":"code","828f0b26":"code","21cb87f0":"code","2ec5bcb3":"code","9478ba37":"code","9a17b18e":"code","5af4a674":"code","40db1e0d":"code","82765eeb":"code","16ca5075":"code","d85635c7":"code","51418e46":"code","91af77f8":"code","f1533774":"code","a7c8411e":"code","74f6585f":"code","aef13c7a":"code","e94bd482":"code","acbfd45d":"code","1dd6a826":"code","9e362426":"code","4f8e2748":"markdown","b4c7c7ca":"markdown","f62122d2":"markdown","962eaa84":"markdown","612028b5":"markdown","8a6e6109":"markdown","90122b33":"markdown","bdc7bf5b":"markdown"},"source":{"498d7a78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a29d41a6":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport os \nimport cv2\nimport random","0bfddb24":"train_path = '\/kaggle\/input\/digit-recognizer\/train.csv'\ntest_path = '\/kaggle\/input\/digit-recognizer\/test.csv'\nsubmission_path = '\/kaggle\/input\/digit-recognizer\/sample_submission.csv'","4adf64de":"train_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\nsubmissions = pd.read_csv(submission_path)","5d0d6971":"train_df.head()","0117364b":"def show_sample_images(dataframe):\n    dataframe = dataframe.copy()\n    label_df = []\n    random_indexes = random.sample(range(test_df.shape[0]), 9)\n    if 'label' in dataframe.columns:\n        label_df = dataframe['label']\n        dataframe.drop('label',axis=1,inplace=True)\n        \n    for i in range(9):\n        img = dataframe.loc[random_indexes[i]].to_numpy().reshape(28, 28)\n        if len(label_df)!=0:\n            label = label_df.loc[random_indexes[i]]\n        plt.subplot(3, 3, i+1)\n        plt.grid(False);\n        plt.axis(False);\n        plt.imshow(img);\n        if(len(label_df) != 0):\n            plt.title(f'Actual Class: {label}');\n","828f0b26":"show_sample_images(train_df)","21cb87f0":"show_sample_images(test_df)","2ec5bcb3":"# Split data into train test set using sklearn's train_test_split \nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(train_df.drop('label',axis=1),\n                                                 train_df['label'], \n                                                 test_size=0.15, \n                                                 shuffle=True)\nlen(X_train),len(X_test),len(y_train),len(y_test)","9478ba37":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train,y_train)","9a17b18e":"# Evaluate accuracy score\nfrom sklearn.metrics import accuracy_score\npreds = model.predict(X_test)\nsvc_score = accuracy_score(y_test,preds)\nsvc_score","5af4a674":"from sklearn.decomposition import PCA\n\nX_train_decom = X_train.copy()\nX_test_decom = X_test.copy()\n\npca = PCA(n_components=0.95) #--> Here we are selection n_components as 0.95 which assures that we preserve 95% variance in data\nX_train_decom = pca.fit_transform(X_train_decom)\nX_test_decom  = pca.transform(X_test_decom)","40db1e0d":"X_train_decom.shape","82765eeb":"model_2 = SVC()\nmodel_2.fit(X_train_decom, y_train)","16ca5075":"model_2_preds = model_2.predict(X_test_decom)\nmodel_2_score = accuracy_score(y_test, model_2_preds)\nmodel_2_score","d85635c7":"from sklearn.cluster import KMeans\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline","51418e46":"X_train_KMeans = X_train.copy()\nX_test_KMeans = X_test.copy()","91af77f8":"pipeline = Pipeline(steps = [\n    ('KMeans',KMeans(n_clusters=99)), \n    ('SVC_clf',SVC())\n])\npipeline.fit(X_train_KMeans,y_train)","f1533774":"pipeline_preds = pipeline.predict(X_test)\npipeline_score = accuracy_score(y_test,pipeline_preds)\npipeline_score","a7c8411e":"accuracy_df = pd.DataFrame.from_dict({\n    'svc_model': [svc_score],\n    'PCA_SVC': [model_2_score],\n    'KMeans_SVC': [pipeline_score]\n})\naccuracy_df = accuracy_df.transpose()\naccuracy_df = accuracy_df.sort_values(by=0,ascending=False)","74f6585f":"accuracy_df.plot(kind='bar',legend=True)","aef13c7a":"test_df = pca.transform(test_df)","e94bd482":"final_preds = model_2.predict(test_df)","acbfd45d":"final_preds[:10]","1dd6a826":"submissions['Label'] = final_preds","9e362426":"submissions.to_csv(\"submission.csv\",index=False)","4f8e2748":"# Yey!! we managed to decrease number of features to 154 let's train model in new dataset","b4c7c7ca":"Hmm 97.5% accuracy on baseline model, great !! ","f62122d2":"# Let's create baseline model using Support Vector Classifier\n","962eaa84":"# Let's try another methods that can improve training time and accuracy ","612028b5":"## Given data is in pandas dataframe format let's create a function that reads dataframe and plot random images from dataset.","8a6e6109":"# Lets try one more model where we perform preprocessing with unsupervised technique i.e. KMeans ","90122b33":"## Wow we managed to get accuracy of 97.9% with only 154 features in 1\/3rd training time ","bdc7bf5b":"From above graph we can conclude that our PCA model performs best from all 3 models so let's go with PCA predictions for submission"}}