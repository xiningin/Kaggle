{"cell_type":{"e2d1d145":"code","c1de2242":"code","bbe2154b":"code","7443f73d":"code","ef599720":"code","c6960f37":"code","215ea3e5":"code","22b29c8e":"code","4fc68e5e":"code","720320ed":"code","7f91a4ed":"code","f0f24c50":"code","e497f5fb":"code","edcb0e6e":"code","0f5f6ddb":"code","73069105":"code","dd3cce43":"code","57db25ef":"code","b85b3c6b":"code","2c8b62d4":"code","ff15c0c6":"code","4b344988":"code","c5034090":"code","1ee5f72a":"code","e00f9f4a":"code","cba74999":"code","bd5ee4e0":"code","b9ae55f0":"code","87626553":"code","98dfdea9":"code","9900fdee":"code","7b8bcf5b":"code","48fd41c7":"code","17a41d3f":"code","244a16d5":"code","90784aa5":"code","27adaba3":"code","4859d9e9":"code","df7d2aef":"code","b44e6aaf":"code","2eea0187":"code","437b5414":"code","d53d74b3":"code","3ac1fea7":"code","53317572":"code","29d34a1e":"code","71c9b9ff":"code","a1b09edb":"code","0dd8dabb":"code","a7757a28":"code","69203296":"code","37320e48":"code","8f55bf49":"code","986dec92":"code","b9c89dd9":"code","acbca1e8":"code","63c4d39e":"code","d2340bb5":"markdown","851c2454":"markdown","b9b7f454":"markdown","e62cbe6a":"markdown","40dbeffc":"markdown","79dbcb6e":"markdown","fc93b87e":"markdown","bb7b36eb":"markdown","07bc754f":"markdown","03c8fe99":"markdown","375b80cd":"markdown","b8651290":"markdown","89abc359":"markdown","8574625a":"markdown","a93ecccb":"markdown","c7b7ee05":"markdown","dafe0a38":"markdown","56d0a114":"markdown","65a7840c":"markdown","6bb0a01a":"markdown","fd3a1b00":"markdown","f2d9bd05":"markdown","60763c71":"markdown","c52f789c":"markdown"},"source":{"e2d1d145":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import preprocessing\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, roc_curve, accuracy_score, confusion_matrix, log_loss, plot_roc_curve, auc, precision_recall_curve\nfrom sklearn.model_selection import RandomizedSearchCV\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"white\", color_codes=True)\nsns.set_style('ticks')\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","c1de2242":"train = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ntest = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')\nsample_submission = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/sample_submission.csv')","bbe2154b":"print('Rows and Columns in train dataset:', train.shape)\nprint('Rows and Columns in test dataset:', test.shape)\nprint('The shape of sample submission dataset: ', sample_submission.shape)","7443f73d":"train.head()","ef599720":"train.info()","c6960f37":"test.head()","215ea3e5":"test.info()","22b29c8e":"sample_submission.head()","4fc68e5e":"print('Missing value in train dataset:', sum(train.isnull().sum()))\nprint('Missing value in test dataset:', sum(test.isnull().sum()))","720320ed":"plt.figure(figsize=(6, 4))\nsns.barplot(train.target.value_counts().index.astype(int),\n            train.target.value_counts().values, palette='bwr')\nplt.ylabel('Number of rows', fontsize=12)\nplt.xlabel('Target', fontsize=12)\nplt.show();","7f91a4ed":"plt.figure(figsize=(6, 4))\nsns.countplot(train.gender, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Gender', fontsize=12)\nplt.show();","f0f24c50":"plt.figure(figsize=(6, 4))\nsns.countplot(train.relevent_experience, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Experience', fontsize=12)\nplt.show();","e497f5fb":"plt.figure(figsize=(6, 4))\nsns.countplot(train.experience, palette='bwr', hue=train.target.astype(int),\n              order=train.experience.value_counts().index)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Experienca', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","edcb0e6e":"def experience(x):\n    if x=='<1'      :   return '<1'\n    if x=='1'       :   return '1-10' \n    if x=='2'       :   return '1-10' \n    if x=='3'       :   return '1-10' \n    if x=='4'       :   return '1-10' \n    if x=='5'       :   return '1-10'\n    if x=='6'       :   return '1-10' \n    if x=='7'       :   return '1-10' \n    if x=='8'       :   return '1-10'  \n    if x=='9'       :   return '1-10'  \n    if x=='10'      :   return '1-10'  \n    if x=='11'      :   return '11-20'\n    if x=='12'      :   return '11-20'\n    if x=='13'      :   return '11-20' \n    if x=='14'      :   return '11-20' \n    if x=='15'      :   return '11-20' \n    if x=='16'      :   return '11-20'\n    if x=='17'      :   return '11-20'\n    if x=='18'      :   return '11-20'\n    if x=='19'      :   return '11-20' \n    if x=='20'      :   return '11-20' \n    if x=='>20'     :   return '>20'\n\ntrain_experince = train.copy()\ntrain_experince['experience'] = train_experince['experience'].apply(experience) ","0f5f6ddb":"plt.figure(figsize=(6, 4))\nsns.countplot(train_experince.experience, palette='bwr', hue=train.target.astype(int),\n              order=train_experince.experience.value_counts().index)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Experienca', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","73069105":"plt.figure(figsize=(6, 4))\nsns.countplot(train.enrolled_university, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Enrolled', fontsize=12)\nplt.show();","dd3cce43":"plt.figure(figsize=(6, 4))\nsns.countplot(train.education_level, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Education', fontsize=12)\nplt.show();","57db25ef":"# pie chart\n\nlabels = train.education_level.value_counts().keys()\nsizes = train.education_level.value_counts()\n\n#add colors\ncolors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#f0f8ff']\n\n#explsion\nexplode = (0.05, 0.05, 0.05, 0.05, 0.05)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',\n        startangle=10, pctdistance=0.85, explode=explode,\n        labeldistance=1.1)\n\ncentre_circle = plt.Circle((0, 0), 0.75, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.show()","b85b3c6b":"plt.figure(figsize=(6, 4))\nsns.countplot(train.major_discipline, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Major discipline', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","2c8b62d4":"plt.figure(figsize=(6, 4))\nsns.countplot(train.company_type, palette='bwr', hue=train.target.astype(int))\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Company type', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","ff15c0c6":"plt.figure(figsize=(6, 4))\nsns.countplot(train.company_size, palette='bwr',\n              hue=train.target.astype(int),\n              order=train.company_size.value_counts().index)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Company type', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","4b344988":"# pie chart\n\nlabels = train.last_new_job.value_counts().keys()\nsizes = train.last_new_job.value_counts()\n\n#add colors\ncolors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#f0f8ff', '#E38C79']\n\n#explsion\nexplode = (0.05, 0.05, 0.05, 0.05, 0.05, 0.05)\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',\n        startangle=10, pctdistance=0.85, explode=explode,\n        labeldistance=1.1)\n\ncentre_circle = plt.Circle((0, 0), 0.75, fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.show()","c5034090":"plt.figure(figsize=(6, 4))\nsns.countplot(train.last_new_job, palette='bwr',\n              hue=train.target.astype(int),\n              order=train.last_new_job.value_counts().index)\nplt.ylabel('Count', fontsize=12)\nplt.xlabel('Number of years', fontsize=12)\nplt.xticks(rotation=45)\nplt.show();","1ee5f72a":"plt.figure(figsize=(16, 5))\nsns.distplot(train.training_hours, color='#202020')\nplt.title('Distribution of training hours')\nplt.xlabel('Hours', fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.tight_layout()\nplt.show()","e00f9f4a":"train = train.drop(['enrollee_id', 'city', 'city_development_index', 'training_hours'], axis=1)\ntest = test.drop(['enrollee_id', 'city', 'city_development_index', 'training_hours'], axis=1)\n\ntrain.experience = train.experience.apply(experience)\ntest.experience = test.experience.apply(experience) ","cba74999":"print('Train NA values: \\n', train.isnull().sum())\nprint('Test NA values: \\n', test.isnull().sum())","bd5ee4e0":"def impute_nan_most_frequent_category(DataFrame, ColName):\n    # .mode()[0] - gives first category name\n    most_frequent_category = DataFrame[ColName].mode()[0]\n\n    # replace nan values with most occured category\n    DataFrame[ColName].fillna(most_frequent_category, inplace=True)","b9ae55f0":"for i in train.select_dtypes(include = \"object\").columns:\n    impute_nan_most_frequent_category(train, i)\n\nfor i in test.select_dtypes(include = \"object\").columns:\n    impute_nan_most_frequent_category(test, i)","87626553":"print('Train NA values: \\n', train.isnull().sum())\nprint('Test NA values: \\n', test.isnull().sum())","98dfdea9":"train.info()","9900fdee":"test.info()","7b8bcf5b":"objList = train.select_dtypes(include = \"object\").columns\nprint('Categorical columns: ', objList)","48fd41c7":"le = preprocessing.LabelEncoder()\ntrain_encoded = train.copy()\ntest_encoded = test.copy()\nfor feat in objList:\n    train_encoded[feat] = le.fit_transform(train[feat].astype(str))\n    test_encoded[feat] = le.fit_transform(test[feat].astype(str))","17a41d3f":"train_encoded.info()","244a16d5":"test_encoded.info()","90784aa5":"X = train_encoded.drop('target', axis=1)\ny = train_encoded.target","27adaba3":"plt.figure(figsize=(6, 4))\nsns.barplot(y.value_counts().index.astype(int),\n            y.value_counts().values, palette='bwr')\nplt.ylabel('Number of rows', fontsize=12)\nplt.xlabel('Target', fontsize=12)\nplt.title('Before sampling')\nplt.show()","4859d9e9":"oversample = SMOTE()\nsmote = SMOTE(random_state = 0)\nX_smote, y_smote = smote.fit_resample(X,y)","df7d2aef":"plt.figure(figsize=(6, 4))\nsns.barplot(y_smote.value_counts().index.astype(int),\n            y_smote.value_counts().values, palette='bwr')\nplt.ylabel('Number of rows', fontsize=12)\nplt.xlabel('Target', fontsize=12)\nplt.title('After sampling')\nplt.show()","b44e6aaf":"#apply SelectKBest class to extract top 10 best features\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nbestfeatures = SelectKBest(score_func=f_classif, k=9)\nfit = bestfeatures.fit(X_smote,y_smote)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(10,'Score'))  #print 10 best features","2eea0187":"X_smote = X_smote.drop(['company_type', 'gender',\n                        'relevent_experience'],\n                       axis=1)\n\ntest_encoded = test_encoded.drop(['company_type', 'gender',\n                                  'relevent_experience'],\n                                 axis=1)","437b5414":"X_train, X_test, y_train, y_test = train_test_split(X_smote,\n                                                    y_smote,\n                                                    test_size=0.2,\n                                                    random_state=42)","d53d74b3":"rf_pipe = Pipeline(steps =[ ('scale',StandardScaler()), (\"RF\",RandomForestClassifier(random_state=42)) ])\nada_pipe = Pipeline(steps =[ ('scale',StandardScaler()), (\"RF\",AdaBoostClassifier(random_state=42,learning_rate=0.7)) ])\nsvm_pipe = Pipeline(steps =[ ('scale',StandardScaler()), (\"RF\",SVC(random_state=42,kernel='rbf')) ])\nxgb_pipe = Pipeline(steps =[ ('scale',StandardScaler()), (\"RF\",XGBClassifier(random_state=42, n_jobs = 2)) ])\n\nrf_roc_auc_cross_val_scores = cross_val_score(rf_pipe,X_train,y_train,cv=5,scoring='roc_auc')\nada_roc_auc_cross_val_scores=cross_val_score(ada_pipe,X_train,y_train,cv=5,scoring='roc_auc')\nsvm_roc_auc_cross_val_scores=cross_val_score(svm_pipe,X_train,y_train,cv=5,scoring='roc_auc')\nxgb_roc_auc_cross_val_scores=cross_val_score(xgb_pipe,X_train,y_train,cv=5,scoring='roc_auc')","3ac1fea7":"print('Rndmforest validation score: ', rf_roc_auc_cross_val_scores.max())\nprint('Ada validation score: ', ada_roc_auc_cross_val_scores.max())\nprint('SVM validation score: ', svm_roc_auc_cross_val_scores.max())\nprint('Xgb validation score: ', xgb_roc_auc_cross_val_scores.max())","53317572":"plt.subplot(3,1,1)\nax = sns.lineplot(x=range(0,len(rf_roc_auc_cross_val_scores)),y=rf_roc_auc_cross_val_scores)\nax.set_title('Random Forest Cross Val Scores')\nax.set_xticks([i for i in range(0,len(rf_roc_auc_cross_val_scores))])\nax.set_xlabel('Fold Number')\nax.set_ylabel('Roc_auc Score')\nplt.show()\n\nplt.subplot(3,1,2)\nax = sns.lineplot(x=range(0,len(ada_roc_auc_cross_val_scores)),y=ada_roc_auc_cross_val_scores)\nax.set_title('Adaboost Cross Val Scores')\nax.set_xticks([i for i in range(0,len(ada_roc_auc_cross_val_scores))])\nax.set_xlabel('Fold Number')\nax.set_ylabel('Roc_auc Score')\nplt.show()\n\nplt.subplot(3,1,3)\nax = sns.lineplot(x=range(0,len(svm_roc_auc_cross_val_scores)),y=svm_roc_auc_cross_val_scores)\nax.set_title('SVM Cross Val Scores')\nax.set_xticks([i for i in range(0,len(svm_roc_auc_cross_val_scores))])\nax.set_xlabel('Fold Number')\nax.set_ylabel('Roc_auc Score')\nplt.show()\n\nplt.subplot(3,1,3)\nax = sns.lineplot(x=range(0,len(xgb_roc_auc_cross_val_scores)),y=xgb_roc_auc_cross_val_scores)\nax.set_title('XGB Cross Val Scores')\nax.set_xticks([i for i in range(0,len(xgb_roc_auc_cross_val_scores))])\nax.set_xlabel('Fold Number')\nax.set_ylabel('Roc_auc Score')\nplt.show()","29d34a1e":"rf_pipe.fit(X_train, y_train)\nrf_prediction = rf_pipe.predict(X_test)\n\nada_pipe.fit(X_train, y_train)\nada_prediction = ada_pipe.predict(X_test)\n\nsvm_pipe.fit(X_train, y_train)\nsvm_prediction = svm_pipe.predict(X_test)\n\nxgb_pipe.fit(X_train, y_train)\nxgb_prediction = xgb_pipe.predict(X_test)\n\nprint('Roc_auc Score of Random Forest Model On Test Set - {}'.format(roc_auc_score(rf_prediction, y_test)))\nprint('Roc_auc Score of AdaBoost Model On Test Set - {}'.format(roc_auc_score(ada_prediction, y_test)))\nprint('Roc_auc Score of SVM Model On Test Set - {}'.format(roc_auc_score(svm_prediction, y_test)))\nprint('Roc_auc Score of XGB Model On Test Set - {}'.format(roc_auc_score(xgb_prediction, y_test)))","71c9b9ff":"forest  = RandomForestClassifier(random_state = 42)\n\nparams = {\n        'n_estimators' : [100, 300, 500, 800, 1200],\n        'max_depth' : [5, 8, 15, 25, 30],\n        'min_samples_split' : [2, 5, 10, 15, 100],\n        'min_samples_leaf' : [1, 2, 5, 10] \n        }\n\ngridF = RandomizedSearchCV(forest, params, cv = 5, verbose = 1)","a1b09edb":"clf_grid = gridF.fit(X_train, y_train)","0dd8dabb":"clf_grid.best_params_","a7757a28":"best_est = clf_grid.best_estimator_","69203296":"y_pred = best_est.predict(X_test)","37320e48":"print('Roc_auc Score of Random Forest Model On Test Set - {}'.format(roc_auc_score(y_pred, y_test)))","8f55bf49":"model = RandomForestClassifier(n_estimators=800,\n                               min_samples_split=12,\n                               min_samples_leaf=2, \n                               max_depth=15)","986dec92":"model.fit(X_smote, y_smote)","b9c89dd9":"prediction = model.predict(test_encoded)","acbca1e8":"sample_submission.target = prediction","63c4d39e":"sample_submission.head()","d2340bb5":"<b>3.1 General Analysis<\/b>","851c2454":"#### <p style=\"text-align: center; font-size: 20px\">4. Data Upsampling Using SMOTE<\/p>","b9b7f454":"Number of years between last and current job","e62cbe6a":"Gender","40dbeffc":"Company type","79dbcb6e":"Enrolled university","fc93b87e":"#### <p style=\"text-align: center; font-size: 20px\">8. Tuning Hyperparameters <\/p>","bb7b36eb":"Target \n- 0 - Not looking for job change\n- 1 \u2013 Looking for a job change\n  \nAs you can see, here we have imbalanced data.","07bc754f":"#### <p style=\"text-align: center; font-size: 20px\">1. Setup<\/p>","03c8fe99":"Training hours","375b80cd":"#### <p style=\"text-align: center; font-size: 20px\">9. Prediction <\/p>","b8651290":"\n#### <p style=\"text-align: center; font-size: 20px\">5. Feature selection<\/p>","89abc359":"#### <p style=\"text-align: center; font-size: 20px\">6. Model Selection<\/p>","8574625a":"Label Encoding","a93ecccb":"Education level","c7b7ee05":"#### <p style=\"text-align: center; font-size: 20px\">7. Model Evaluation<\/p>","dafe0a38":"#### <p style=\"text-align: center; font-size: 20px\">2. Loading data<\/p>","56d0a114":"#### <p style=\"text-align: center; font-size: 20px\">4. Data Preprocessing<\/p>","65a7840c":"#### <p style=\"text-align: center; font-size: 20px\">3. Exploratory Data Analysis<\/p>","6bb0a01a":"Company size","fd3a1b00":"<b>3.2 Features and Target Distribution<\/b>","f2d9bd05":"Experience\n\n<span style=\"font-size:10px\">Experience in years<\/span>","60763c71":"Major discipline","c52f789c":"Drop na and columns"}}