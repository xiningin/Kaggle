{"cell_type":{"c9169ff4":"code","437c2457":"code","1b76352f":"code","e67e7419":"code","a5aa86c7":"code","840c7fff":"code","2254603b":"code","7dfd1f4f":"code","39979c0b":"code","06365aa5":"code","0b76b31b":"code","5a954200":"code","a5c79f57":"code","11bc08ed":"code","6ad4eec8":"code","7e384ecb":"code","4b719b8d":"code","c3a63615":"code","d1e63b7e":"code","951da09b":"code","ccdb63bb":"code","fdecde61":"code","c0dafde6":"code","54a0ca2c":"code","81c2542c":"code","4609bcc0":"code","23a0ea1f":"code","f452a429":"code","b2eafb6a":"code","d0fb01e0":"code","4125837d":"code","fb7751c5":"code","f9796a8f":"code","b681e11e":"code","f16d599d":"code","bee1f379":"code","5387d2a1":"code","5675ad3e":"code","23209744":"code","93976f21":"code","8574bb4e":"code","1deab132":"code","d094c8b8":"code","4453f4f6":"code","498c3841":"code","c78b77a9":"code","45cc2f91":"code","de141067":"code","e37ca1fa":"code","fefa6aa3":"code","5e37e2b7":"code","31813ec4":"code","0710841c":"code","fef8c7a1":"code","691954d4":"code","69ffc1e9":"code","787774c1":"code","579ecea7":"code","30c04596":"code","78f1b347":"code","913ab526":"code","304e5756":"code","4e73406b":"code","5d36d3e9":"code","764ae208":"code","ad73f168":"code","dc1d4011":"code","6e9e3973":"code","cade2c06":"code","1cbe1c11":"code","fedcef66":"code","0c6f6866":"code","cccf8db0":"code","6c5e46c2":"code","52ed4ea6":"code","6b64b222":"code","0f487d39":"code","b56e65d8":"code","77d5e37b":"code","dd2c704c":"code","6aea2cd0":"code","22739a0c":"code","28e64867":"code","088811e6":"code","10983cd2":"code","1ab6b710":"code","020a1a16":"code","9928cf01":"code","336e4c16":"code","f6604b8f":"code","cc4d1255":"code","0b5849ac":"code","f247f1af":"code","bec88f0a":"code","3dd27eff":"code","67df8f01":"code","fe8b19cd":"code","7880e55d":"code","d0cafed5":"code","ca3fb4b2":"code","efb8ac67":"code","6fc677b4":"code","edce5ca8":"code","b16530b9":"code","b87db639":"code","1e787afa":"code","b3fc734f":"code","64bd6647":"code","6439d466":"code","82fa162f":"code","3b0e0dad":"code","8ad36193":"code","0020b6b4":"markdown","2b1d16f3":"markdown","5deea4b5":"markdown","7ceabfe2":"markdown","98ec98e7":"markdown","65233a80":"markdown","20787b95":"markdown","878d426e":"markdown","89863860":"markdown","e41fa18a":"markdown","001cc8bb":"markdown","700fe991":"markdown","60e0916a":"markdown","fcb424c2":"markdown"},"source":{"c9169ff4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","437c2457":"import matplotlib.pyplot as plt\nimport seaborn as sns","1b76352f":"df_all = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv\")","e67e7419":"df_copy = df_all.copy()","a5aa86c7":"df_all.head()","840c7fff":"df_all.columns","2254603b":"df_all[['GameId', 'PlayId', 'Team', 'X', 'Y', 'S', 'A',\n        'Dis', 'Orientation', 'Dir', 'NflId', 'DisplayName', 'JerseyNumber']].head()","7dfd1f4f":"df_all[['Season', 'YardLine', 'Quarter', 'GameClock', \n        'PossessionTeam', 'Down', 'Distance', 'FieldPosition']].head()","39979c0b":"df_all[['HomeScoreBeforePlay', 'VisitorScoreBeforePlay',\n       'NflIdRusher', 'OffenseFormation', 'OffensePersonnel',\n       'DefendersInTheBox', 'DefensePersonnel']].head()","06365aa5":"df_all[['PlayDirection', 'TimeHandoff','TimeSnap', 'Yards']].head()","0b76b31b":"df_all[['PlayerHeight', 'PlayerWeight', 'PlayerBirthDate',\n       'PlayerCollegeName', 'Position', 'HomeTeamAbbr', 'VisitorTeamAbbr']].head()","5a954200":"df_all[['Week', 'Stadium', 'Location', 'StadiumType', 'Turf', 'GameWeather',\n       'Temperature', 'Humidity', 'WindSpeed', 'WindDirection']].head()","a5c79f57":"# \u9078\u624b\u4e00\u4eba\u6bce\u306e\u60c5\u5831\u304c\u3042\u308b\u5217\n# \u4ed6\u306e\u5217\u306f\u540c\u4e00PlayId\u5185\u3067\u306f\u540c\u3058\npersonal_columms = ['X', 'Y', 'S', 'A', 'Dis', 'Orientation', 'Dir', \n                    'NflId', 'DisplayName', 'JerseyNumber', \n                   'PlayerHeight', 'PlayerWeight', 'PlayerBirthDate','PlayerCollegeName', 'Position']","11bc08ed":"df_all.shape","6ad4eec8":"pd.set_option(\"display.max_columns\", 80)","7e384ecb":"df_all.describe()","4b719b8d":"# \u30c1\u30fc\u30e0\u540d\u306f\uff12\u5e74\u3068\u3082\u540c\u3058\nprint(sorted(df_all[df_all[\"Season\"]==2017]['PossessionTeam'].unique()))\nprint(sorted(df_all[df_all[\"Season\"]==2018]['PossessionTeam'].unique()))","c3a63615":"# \u5217\u306b\u3088\u308a\u30c1\u30fc\u30e0\u540d\u306e\u8868\u8a18\u63fa\u308c\nprint(sorted(df_all['PossessionTeam'].unique()))\nprint(sorted(df_all['HomeTeamAbbr'].unique()))\nprint(sorted(df_all['VisitorTeamAbbr'].unique()))\n","d1e63b7e":"df_all['FieldPosition'].unique()\n# 50 yards \u306b\u3044\u308b\u6642\u306f nan","951da09b":"# wikipedia \u306b\u3042\u308b\u30c1\u30fc\u30e0\u540d\n# [\"ARI\", \"ATL\", \"BAL\", \"BUF\", \"CAR\", \"CHI\", \"CIN\", \"CLE\", \"DAL\", \"DEN\", \"DET\", \"GB\",\"HOU\", \"IND\", \"JAX\", \n# \"KC\", \"LAC\", \"LAR\", \"MIA\", \"MIN\", \"NE\", \"NO\", \"NYG\", \"NYJ\", \"OAK\", \"PHI\", \"PIT\", \"SEA\", \"SF\", \"TB\",\n# \"TEN\", \"WAS\" ]\n\n# ARZ=ARI, BLT=BAL, CLV=CLE, HST=HOU","ccdb63bb":"# \u98a8\u901f\u306e\u8868\u8a18\u3044\u308d\u3044\u308d\ndf_all[\"WindSpeed\"].unique()","fdecde61":"import re","c0dafde6":"def is_float(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False","54a0ca2c":"# \u829d\u306e\u7a2e\u985e\u306e\u8868\u8a18\u3044\u308d\u3044\u308d\ndf_all[\"Turf\"].unique()","81c2542c":"def preprocess(df):\n#    df=pd.get_dummies(df,columns=['Team','PlayDirection','OffenseFormation','Position'])\n    df=pd.get_dummies(df,columns=['OffenseFormation'], drop_first=True)\n    df=df[(df['StadiumType']!='Cloudy') & (df['StadiumType']!='Bowl')]\n#    df=df.drop('FieldPosition', axis=1)\n    \n    # SadiumType:\u5c4b\u5185\u30fb\u5c4b\u5916\u306e\uff12\u5206\u985e\u306b\n    outdoor=['Outdoor', 'Outdoors','Open','Indoor, Open Roof','Outdoor Retr Roof-Open', 'Oudoor',\n             'Ourdoor','Retr. Roof-Open','Outdor',\n               'Retr. Roof - Open', 'Domed, Open', 'Domed, open', 'Outside','Heinz Field']\n    indoor=['Indoors', 'RetractableRoof', 'Indoor','Retr. Roof-Closed','Dome', 'Domed, closed',\n            'Indoor, Roof Closed', 'Retr. Roof Closed','Closed Dome','Dome, closed','Domed']\n    df['stadiumtype']=(df['StadiumType'].isin(outdoor)*1)\n    \n    # \u5929\u5019\uff1a\u96e8\u304b\u5426\u304b\n    rain=['Light Rain', 'Showers','Cloudy with periods of rain, thunder possible. Winds shifting to WNW,10-20 mph.',\n          'Rain', 'Heavy lake effect snow','Snow', 'Cloudy, Rain','Rain shower','Rainy']\n    df['weather']=(~df['GameWeather'].isin(rain)*1)\n    \n    # \u829d\uff1a\u5929\u7136\u304b\u5426\u304b\n    natural_turf = ['Grass', 'Natural Grass', 'Artificial', 'Natural grass', 'grass', \n        'Natural', 'Naturall Grass',  'natural grass']\n    df_all[\"natural_turf\"] = df_all[\"Turf\"].isin(natural_turf)\n    \n    # \u8eab\u9577(feet-inch)\u3001\u6642\u8a08\uff1afloat\u306b\n    df['PlayerHeight']= df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    df['gameclock']=[ pd.Timedelta(val).total_seconds() for val in df['GameClock']]\n    \n    # \u30c1\u30fc\u30e0\u540d\u306e\u8868\u8a18\u63fa\u308c\u4fee\u6b63\n    df = df.replace({'ARZ':'ARI', 'BLT':'BAL', 'CLV':'CLE', 'HST':'HOU'})\n    \n    # \u98a8\u901f\u3092\u6570\u5024\u306b\n#    df[\"WindSpeed\"] = df[\"WindSpeed\"].replace({ 'SSW':np.nan, '11-17':14, \"14-23\":18.5, '13 MPH':13, \n#                             '12-22':17, '4 MPh':4, '15 gusts up to 25':15, '10MPH':10, '10mph':10,\n#                             'E':np.nan, '7 MPH':7, 'Calm':0, '6 mph':6, 'SE':np.nan, '10-20':15})\n#    df[\"WindSpeed\"] = df[\"WindSpeed\"].astype(float)\n    df[\"WindSpeed\"] = df[\"WindSpeed\"].apply(lambda value : \n                            np.mean([ float(oo) for oo in re.split('[^0-9.]+', str(value)) if is_float(oo) ]))\n    # \u5c4b\u5185\u306f\u7121\u98a8\u306e\u306f\u305a\n    df.loc[ df['StadiumType'].isin(indoor), \"WindSpeed\" ] == 0\n\n    return df","4609bcc0":"df_all = preprocess(df_all)","23a0ea1f":"df_all[\"WindSpeed\"].unique()","f452a429":"# \u30dc\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u9078\u624b\u306e\u884c\u306e\u307f\u3092\u9078\u629e\ndf_play = df_all[df_all[\"NflId\"]==df_all[\"NflIdRusher\"]].copy()","b2eafb6a":"# \u30dc\u30fc\u30eb\u3092\u6301\u3064\u306e\u306f\u307b\u307cRB\ndf_play[\"Position\"].value_counts()\n\n# \u5b88\u5099\u9078\u624b\uff08DT, DE\uff09\u304c\u6301\u3063\u3066\u3044\u308b\u306e\u306f\u3069\u3046\u3044\u3046\u30b1\u30fc\u30b9\uff1f","d0fb01e0":"df_play[\"Yards\"].hist(range=(-20,50),bins=70)","4125837d":"df_all[\"Position\"].unique()","fb7751c5":"# \u30aa\u30d5\u30a7\u30f3\u30b9\u30c1\u30fc\u30e0\n# QB\n# RB\uff08FB\u3001HB\u3001TB\uff09\n# WR\uff08SE\u3001FL\u3001SB\u3001WB\uff09\n# TE\n# OL\uff08C\u3001G\u3001T\u3001E\uff09\n# \u30c7\u30a3\u30d5\u30a7\u30f3\u30b9\u30c1\u30fc\u30e0\n# DL\uff08DT\uff08NT\uff09\u3001DE\uff09\n# LB\uff08ILB\uff08MLB\uff09\u3001OLB\uff08LOLB\u3001ROLB\u3001SLB\u3001WLB\uff09\uff09\n# DB\uff08CB\u3001S\uff08SS\u3001FS\uff09\uff09\n# \u30b9\u30da\u30b7\u30e3\u30eb\u30c1\u30fc\u30e0\n# K\u3001P\u3001LS\u3001H\u3001KR\/PR\n\noffence_position = ['WR', 'TE', 'T', 'QB', 'RB', 'G', 'C', 'FB', 'HB',  'OT', 'OG', ]\n#OL_position = ['T', 'G', 'C', 'OT', 'OG']\n#RB_position = ['RB', 'FB', 'HB']\n\ndefence_position = ['SS', 'DE', 'ILB', 'FS', 'CB', 'DT', 'OLB', 'NT', 'MLB', 'LB', 'S', 'DL', 'DB', 'SAF']\n#DL_position = ['DL', 'DT', 'DE']\n#LB_position = ['LB', 'ILB', ]","f9796a8f":"df_all.loc[:, \"offence\"] = 0\ndf_all.loc[df_all[\"Position\"].isin(offence_position), \"offence\"] = 1","b681e11e":"# position_count=df_all.groupby([\"PlayId\", \"Position\"]).count()","f16d599d":"# df_position = position_count[\"GameId\"].unstack().fillna(0).astype(int)","bee1f379":"def count_position(df_play):\n    # \u6587\u5b57\u5217\u3000\u2192 { \"\u30dd\u30b8\u30b7\u30e7\u30f3\":\u4eba\u6570 } \u306e\u8f9e\u66f8\n    df_play.loc[:, \"OffensePersonnel\"] = df_play[\"OffensePersonnel\"].apply(\n        lambda x : { i.split(\" \")[-1]:int(i.split(\" \")[-2]) for i in x.split(\",\")} )\n    df_play.loc[:, \"DefensePersonnel\"] = df_play[\"DefensePersonnel\"].apply(\n        lambda x : { i.split(\" \")[-1]:int(i.split(\" \")[-2]) for i in x.split(\",\")} )\n\n    # \u30dd\u30b8\u30b7\u30e7\u30f3\u6bce\u306e\u4eba\u6570\n    for position in [\"DL\", \"LB\", \"DB\"]:\n        df_play.loc[:, position] = [ d[position] for d in df_play[\"DefensePersonnel\"]]\n    for position in [\"RB\", \"TE\", \"WR\"]:\n        df_play.loc[:, position] = [ d[position] for d in df_play[\"OffensePersonnel\"]]\n\n    return df_play","5387d2a1":"df_play = count_position(df_play)","5675ad3e":"def team_name(df_play):\n    # rusher\u9078\u624b\u306e\u6240\u5c5e\u30c1\u30fc\u30e0\u540d\n    df_play.loc[:, \"PlayerTeamAbbr\"] = df_play[\"HomeTeamAbbr\"]\n    df_play.loc[ df_play[\"Team\"]==\"away\", \"PlayerTeamAbbr\"] = df_play[\"VisitorTeamAbbr\"]\n    \n    # defence\u5074\u306e\u30c1\u30fc\u30e0\u540d\n    df_play.loc[:, \"DefenceTeamAbbr\"] = df_play[\"HomeTeamAbbr\"]\n    df_play.loc[ df_play[\"Team\"]==\"home\", \"DefenceTeamAbbr\"] = df_play[\"VisitorTeamAbbr\"]\n    \n    return df_play","23209744":"# df_play.groupby([\"Season\", \"Team\", \"PlayerTeamAbbr\"]).std()[[\"Yards\"]].hist()","93976f21":"def average_yards(df_play):\n\n    # \u30c1\u30fc\u30e0\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\uff08home\/away\u5225, \u5e74\u5ea6\u5225\uff09\n    team_yards_df = df_play.groupby([\"Season\", \"Team\", \"PlayerTeamAbbr\"]).mean()[[\"Yards\"]]\n    team_yards_df = team_yards_df.unstack(level=0)[\"Yards\"]\n\n    \n    # \u30c1\u30fc\u30e0\u6bce\u306e\u5e73\u5747\u640d\u5931\u30e4\u30fc\u30c9\uff08home\/away\u5225, \u5e74\u5ea6\u5225\uff09\n    # \"Team\" \u306b\u5165\u3063\u3066\u3044\u308b\u306e\u306f\u653b\u6483\u5074(rusher)\u304chome\u304baway\u304b\n    defence_yards_df = df_play.groupby([\"Season\", \"Team\", \"DefenceTeamAbbr\"]).mean()[[\"Yards\"]]\n    defence_yards_df = defence_yards_df.unstack(level=0)[\"Yards\"]\n        \n    # \u9078\u624b\u6bce\u306e\u5e73\u5747\u7372\u5f97\u30e4\u30fc\u30c9\n    personal_yards = df_play.groupby([\"Season\", \"NflId\"]).agg([\"mean\", \"std\", \"count\"])[\"Yards\"]\n    personal_yards = personal_yards.unstack(level=0)\n    \n    # \u65b0\u4eba\u306e\u524d\u5e74\u6210\u7e3e\u306b\u306f\u5e73\u5747\u5024\u3092\u5165\u308c\u3066\u304a\u304f\n    personal_yards.fillna({'mean': personal_yards[\"mean\"].mean(),\n                                            'std': personal_yards[\"std\"].mean(), 'count': 0}, inplace=True)\n    personal_yards = personal_yards.swaplevel(0, 1, axis=1)\n    \n    return team_yards_df, defence_yards_df, personal_yards","8574bb4e":"df_play = team_name(df_play)\nteam_yards_df, defence_yards_df, personal_yards = average_yards(df_play)","1deab132":"team_yards_df.head()","d094c8b8":"defence_yards_df.head()","4453f4f6":"personal_yards","498c3841":"# average_yards\u95a2\u6570\u3067\u4f5c\u3063\u305f\uff13\u3064\u3092\u3001\u5143\u306e\u30c7\u30fc\u30bf\u3068merge\ndef merge_lastYearAv(df_play, team_yards_df, defence_yards_df, personal_yards, year):\n    last_year = year-1\n    df = team_yards_df[[last_year]]\n    df.columns = [\"team_yards_av\"]\n    df_year = df_play[df_play[\"Season\"]==year].merge(df, on=[\"Team\",\"PlayerTeamAbbr\"], how=\"left\")\n\n    df = defence_yards_df[[last_year]]\n    df.columns = [\"def_yards_av\"]\n    df_year = df_year.merge(df, on=[\"Team\",\"DefenceTeamAbbr\"], how=\"left\")\n    \n    df_year = df_year.merge(\n        personal_yards[last_year].rename(columns={'mean': 'player_yards_av', 'std': 'player_yards_std',\n                                                 'count': 'player_yards_count'}), \n        on=\"NflId\", how=\"left\")   \n    \n    return df_year","c78b77a9":"# average_yards\u95a2\u6570\u3067\u4f5c\u3063\u305f\uff13\u3064\u3092\u3001\u5143\u306e\u30c7\u30fc\u30bf\u3068merge\ndef merge_anotherYearAv(df_play, team_yards_df, defence_yards_df, personal_yards):\n    df = team_yards_df[[2017]]\n    df.columns = [\"team_yards_av\"]\n    df_2018 = df_play[df_play[\"Season\"]==2018].merge(df, on=[\"Team\",\"PlayerTeamAbbr\"], how=\"left\")\n\n    df = defence_yards_df[[2017]]\n    df.columns = [\"def_yards_av\"]\n    df_2018 = df_2018.merge(df, on=[\"Team\",\"DefenceTeamAbbr\"], how=\"left\")\n    \n    df_2018 = df_2018.merge(\n        personal_yards[2017].rename(columns={'mean': 'player_yards_av', 'std': 'player_yards_std',\n                                                 'count': 'player_yards_count'}), \n        on=\"NflId\", how=\"left\") \n    \n    \n    df = team_yards_df[[2018]]\n    df.columns = [\"team_yards_av\"]\n    df_2017 = df_play[df_play[\"Season\"]==2017].merge(df, on=[\"Team\",\"PlayerTeamAbbr\"], how=\"left\")\n\n    df = defence_yards_df[[2018]]\n    df.columns = [\"def_yards_av\"]\n    df_2017 = df_2017.merge(df, on=[\"Team\",\"DefenceTeamAbbr\"], how=\"left\")\n    \n    df_2017 = df_2017.merge(\n        personal_yards[2018].rename(columns={'mean': 'player_yards_av', 'std': 'player_yards_std',\n                                                 'count': 'player_yards_count'}), \n        on=\"NflId\", how=\"left\")  \n    \n    return pd.concat([df_2017, df_2018])","45cc2f91":"def get_team_score(df_play):\n    # \u653b\u6483\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    df_play.loc[df_play[\"Team\"]==\"home\", \"rusherTeamScore\"] = df_play[\"HomeScoreBeforePlay\"]\n    df_play.loc[df_play[\"Team\"]==\"away\", \"rusherTeamScore\"] = df_play[\"VisitorScoreBeforePlay\"]\n\n    # \u5b88\u5099\u30c1\u30fc\u30e0\u306e\u5f97\u70b9\n    df_play.loc[df_play[\"Team\"]==\"home\", \"defenceTeamScore\"] = df_play[\"VisitorScoreBeforePlay\"]\n    df_play.loc[df_play[\"Team\"]==\"away\", \"defenceTeamScore\"] = df_play[\"HomeScoreBeforePlay\"]\n\n    # \u5f97\u70b9\u5dee\n    df_play.loc[:, \"diffScore\"] = df_play[\"rusherTeamScore\"] - df_play[\"defenceTeamScore\"]\n    \n    return df_play","de141067":"df_play = get_team_score(df_play)","e37ca1fa":"def average_personal_data(df_play, df_all):\n    # \u653b\u6483,\u5b88\u5099\u30c1\u30fc\u30e0\u5e73\u5747 \u4f53\u91cd, \u8eab\u9577, S, A\uff08PlayId\u304c\u30ad\u30fc\uff09\n    offence_av = df_all.loc[df_all[\"offence\"]==1, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    defence_av = df_all.loc[df_all[\"offence\"]==0, [\"PlayerHeight\", \"PlayerWeight\", \"S\", \"A\", \"PlayId\"]].groupby(\"PlayId\").mean()\n    offence_av.columns = ['PlayerHeight_offence', 'PlayerWeight_offence', 'S_offence', 'A_offence']\n    defence_av.columns = ['PlayerHeight_defence', 'PlayerWeight_defence', 'S_defence', 'A_defence']\n\n    df_play = df_play.merge(offence_av, on=\"PlayId\", how=\"left\").merge(defence_av, on=\"PlayId\", how=\"left\")\n\n    return df_play","fefa6aa3":"df_play = average_personal_data(df_play, df_all)","5e37e2b7":"def add_last_yards(df_play):\n    # \u30bf\u30c3\u30c1\u30c0\u30a6\u30f3\u307e\u3067\u4f55\u30e4\u30fc\u30c9\n    df_play[\"yardsToTouchdown\"] = df_play[\"YardLine\"]\n    df_play.loc[ df_play[\"PossessionTeam\"] == df_play[\"FieldPosition\"], \"yardsToTouchdown\"\n                        ] = 100-df_play[\"YardLine\"]\n    return df_play\n    ","31813ec4":"df_play = add_last_yards(df_play)","0710841c":"# \u5225\u5e74\u5ea6\u306e\u5e73\u5747\u3092\u7d50\u5408\ndf_year = merge_anotherYearAv(df_play, team_yards_df, defence_yards_df, personal_yards)","fef8c7a1":"# \u6b20\u6e2c\u78ba\u8a8d\ndf_year.isnull().sum().sort_values().tail(10)","691954d4":"def select_columns(df):\n    # \u6b20\u6e2c\u3042\u308a\u5217\u306e\u3046\u3061\u3001\u4f7f\u7528\u3057\u306a\u3044\u3082\u306e\n    df_u = df.drop([\"FieldPosition\", \"StadiumType\", \"GameWeather\", \"WindDirection\"], axis=1)\n    # Humidity\u3001Temperature, WindSpeed\u3000\u306e\u6b20\u6e2c\u306f\u5e73\u5747\u3067\u57cb\u3081\u308b\n#    mean_cols = [\"Humidity\", \"Temperature\", \"WindSpeed\"]\n#    df_u[mean_cols].fillna(df_u[mean_cols].mean(), inplace=True)\n    df_u = df_u.fillna(df_u.mean())\n    \n#    df_use.loc[:, \"Yards_class\"] = df_use[\"Yards\"]\n#    df_use.loc[df_use[\"Yards\"]>=20, \"Yards_class\"] = 20\n#    df_use.loc[df_use[\"Yards\"]<=-5, \"Yards_class\"] = -5\n#'Yards' 'HomeTeamAbbr_x' 'HomeTeamAbbr_y' 'over20' 'touchdown'\n        \n    df_X = df_u.drop([ ## \u6587\u5b57\u5217\n                        \"Team\", \"DisplayName\", \"PossessionTeam\", \n                        \"OffensePersonnel\", \"DefensePersonnel\", \"PlayDirection\", \n                        \"PlayerBirthDate\", \"PlayerCollegeName\", \n                        \"Position\", \"HomeTeamAbbr\", \"VisitorTeamAbbr\", \n                        \"Stadium\", \"Location\", \"Turf\", \"PlayerTeamAbbr\", \"DefenceTeamAbbr\", \n                        # \u6642\u523bor\u6642\u9593\n                        \"GameClock\", \"TimeHandoff\", \"TimeSnap\", \n                       # \u30ad\u30fc\u3001\u756a\u53f7\n                       \"GameId\", \"PlayId\", \"NflId\", \"JerseyNumber\", \"NflIdRusher\"\n                       ], axis=1)\n    \n\n\n    \n    return df_X\n\ndef drop_columns(df_X):\n# \u52b9\u3044\u3066\u3044\u306a\u3044\u7279\u5fb4\u91cf\u3092\u843d\u3068\u3059\n    df_X = df_X.drop(['Temperature', 'Humidity', 'diffScore', 'VisitorScoreBeforePlay',\n       'PlayerHeight', 'PlayerHeight_defence', 'WindSpeed', 'Week', 'DB',\n       'Down', 'DL', 'Quarter', 'LB', 'OffenseFormation_I_FORM', 'TE',\n       'OffenseFormation_SHOTGUN', 'OffenseFormation_SINGLEBACK',\n       'OffenseFormation_EMPTY', 'stadiumtype', 'OffenseFormation_JUMBO', 'RB',\n       'OffenseFormation_PISTOL', 'weather', 'OffenseFormation_WILDCAT'\n       ], axis=1)\n    \n    return df_X\n\n","69ffc1e9":"# pd.set_option(\"display.max_rows\", 100)","787774c1":"df_X = select_columns(df_year)\ntrain_df=df_X.iloc[:0,:]\ndf_X = drop_columns(df_X)\n\ndf_y = df_X[\"Yards\"]\ndf_X = df_X.drop([\"Yards\"], axis=1)","579ecea7":"# \u5206\u985e\u3067\u4f7f\u3046\u30e4\u30fc\u30c9\u6570\u306e\u6700\u5927\u6700\u5c0f\nmax_yards = 25\nmin_yards = -5","30c04596":"print( len(df_y.loc[df_y>=max_yards]) )\nprint( len(df_y.loc[df_y<=min_yards]) )","78f1b347":"#df_use.loc[:, \"Yards_class\"] = df_use[\"Yards\"]\ndf_y.loc[df_y>=max_yards] = max_yards\ndf_y.loc[df_y<=min_yards] = min_yards","913ab526":"df_y.unique()","304e5756":"# from sklearn.ensemble import RandomForestRegressor\nfrom tqdm import tqdm\nfrom sklearn.ensemble import RandomForestClassifier as classifier\nfrom sklearn.model_selection import train_test_split\n","4e73406b":"from sklearn.model_selection import GridSearchCV","5d36d3e9":"\n# GridSearchCV \u306b\u3088\u308b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\nsearch_params = {\n    'n_estimators'      : [100],\n    'max_features'      : [10, 30], #,'auto'\n    #'random_state'      : [1],\n    #'n_jobs'            : [1],\n    'min_samples_split' : [10, 20, 30],\n    'max_depth'         : [3, 5, 10]\n}\n \ngsr = GridSearchCV(\n    classifier(),\n    search_params,\n    cv = 3,\n    n_jobs = -1,\n    verbose=True\n)\n","764ae208":"# gsr.fit(df_X, df_y)","ad73f168":"'''\nsearch_params = {\n    'n_estimators'      : [100],\n    'max_features'      : [3,10,30], #,'auto'\n    #'random_state'      : [1],\n    #'n_jobs'            : [1],\n    'min_samples_split' : [10, 30],\n    'max_depth'         : [3, 10, 20]\n{'max_depth': 10, 'max_features': 30, 'min_samples_split': 30, 'n_estimators': 100}\u30000.1479300190542179\n{'max_features': 30, 'min_samples_split': 10, 'max_depth': 3}\u30000.011617082679846237\n'''","dc1d4011":"'''\nsearch_params = {\n    'n_estimators'      : [100],\n    'max_features'      : [30], #,'auto'\n    #'random_state'      : [1],\n    #'n_jobs'            : [1],\n    'min_samples_split' : [10, 20, 30],\n    'max_depth'         : [3, 5, 10, 15]\n}\n{'max_features': 30, 'min_samples_split': 30, 'max_depth': 3} 0.011455803585085578\n'''","6e9e3973":"# feature_importance_ \u304c\u4f4e\u3044\u3082\u306e\u3092\u9664\u5916\u5f8c\n'''\nsearch_params = {\n    'n_estimators'      : [100],\n    'max_features'      : [10, 30], #,'auto'\n    #'random_state'      : [1],\n    #'n_jobs'            : [1],\n    'min_samples_split' : [10, 20, 30],\n    'max_depth'         : [3, 5, 10]\n}\n0.011924821549978504\n{'max_features': 10, 'min_samples_split': 10, 'max_depth': 3}\n'''","cade2c06":"#print(gsr.best_score_)\n#print(gsr.best_estimator_)\n#print(gsr.best_params_)","1cbe1c11":"# train_X, test_X, train_y, test_y = train_test_split(df_X, df_y, test_size=0.3)","fedcef66":"# clf = gsr.best_estimator_\n# clf.fit(train_X, train_y)","0c6f6866":"def calc_score(pred_y, test_y):\n    pred_df = pd.DataFrame(pred_y)\n    pred_df.columns = [ \"Yards\"+str(n) for n in range(min_yards,max_yards+1)]\n    \n    pred_df_all = pd.DataFrame(pred_df,columns=[ \"Yards\"+str(n) for n in range(-99,100)])\n    pred_df_all.fillna(0, inplace=True)\n    pred_df_all = pred_df_all.cumsum(axis=1)\n#    features.loc[:, :\"Yards-6\"] = 0\n#    features.loc[:, \"Yards21\":] = 1\n    \n    test_df = pd.DataFrame(np.array([(i >= test_y)*1 for i in range(-99,100)]).T,\n                           columns=pred_df_all.columns)\n    \n    CRPS=((pred_df_all-test_df)**2).mean().mean()\n    return CRPS","cccf8db0":"'''\nbest_score = 1.0\nfor features in tqdm(search_params['max_features']):\n    for min_samp in tqdm(search_params['min_samples_split']):\n        for depth in search_params['max_depth']:\n            scores = []\n            for i in range(3):\n                train_X, test_X, train_y, test_y = train_test_split(df_X, df_y, test_size=0.3)\n                clf = classifier(n_estimators=100, max_depth=20, min_samples_split=10)\n                clf.fit(train_X, train_y)\n                \n                pred_y = clf.predict_proba(test_X)\n                score = calc_score(pred_y, test_y)\n                scores.append(score)\n            av_score = np.mean(scores)\n            if av_score < best_score:\n                best_score = av_score\n                best_params = {'max_features':features, 'min_samples_split':min_samp, 'max_depth':depth}\n'''                \n","6c5e46c2":"# print(best_score)\n# print(best_params)","52ed4ea6":"# best_params","6b64b222":"#clf = classifier(n_estimators=100, \n#                 max_features = best_params[\"max_features\"], \n#                 max_depth = best_params[\"max_depth\"], \n#                 min_samples_split = best_params[\"min_samples_split\"], random_state=777)","0f487d39":"clf = classifier(n_estimators=100, \n                 max_features = 10, \n                 max_depth = 3, \n                 min_samples_split = 10, random_state=777)","b56e65d8":"clf.fit(df_X, df_y)","77d5e37b":"feat_imp = pd.DataFrame( clf.feature_importances_, index=df_X.columns )","dd2c704c":"feat_imp.sort_values(0, ascending=False).index","6aea2cd0":"feat_imp.sort_values(0, ascending=False)","22739a0c":"from kaggle.competitions import nflrush","28e64867":"env = nflrush.make_env()","088811e6":"#iter_test = env.iter_test()","10983cd2":"means = df_X.mean()","1ab6b710":"# train_df=df_X.iloc[:0,:]","020a1a16":"# stopstop","9928cf01":"import warnings\nwarnings.simplefilter('ignore')","336e4c16":"train_df = train_df.drop(\"Yards\", axis=1)","f6604b8f":"df_X.columns","cc4d1255":"for (test_df, sample_prediction_df) in tqdm(env.iter_test()):\n    df_a = preprocess(test_df)\n\n    df_ = df_a.loc[df_a[\"NflId\"]==df_a[\"NflIdRusher\"], :]\n\n    df_a[\"offence\"] = 0\n    df_a.loc[df_a[\"Position\"].isin(offence_position), \"offence\"] = 1\n\n    df_ = team_name(df_)\n\n    df_ = get_team_score(df_)\n    df_ = average_personal_data(df_, df_a)\n    df_ = add_last_yards(df_)\n\n    df_year = merge_lastYearAv(df_, team_yards_df, defence_yards_df, personal_yards, 2019)\n    test_X = select_columns(df_year)\n\n    # \u7121\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u57cb\u3081\u308b\n    test_X=pd.concat([train_df,test_X],sort=False)\n    test_X = test_X.fillna(0)\n    \n    test_X = drop_columns(test_X)\n\n    pred520 = clf.predict_proba(test_X)[0]\n    pred100 = np.concatenate([ np.zeros(99+min_yards), pred520.cumsum(), np.ones(99-max_yards) ])\n    sample_prediction_df.iloc[0] = pred100\n\n    # cumsum \u3067\uff11\u3092\u50c5\u304b\u306b\u8d85\u3048\u308b\u5834\u5408\u304c\u3042\u308b\n    sample_prediction_df[sample_prediction_df>1.0] = 1.0\n    \n    env.predict(sample_prediction_df)\n    \n    ","0b5849ac":"clf.classes_","f247f1af":"# test_df[\"WindSpeed\"]","bec88f0a":"# re.split('[^0-9.]+', \"6mph\")","3dd27eff":"env.write_submission_file()","67df8f01":"import os\nprint([filename for filename in os.listdir('\/kaggle\/working') if '.csv' in filename])","fe8b19cd":"owariowari","7880e55d":"(test_df, sample_prediction_df) = next(env.iter_test())","d0cafed5":"df_all = preprocess(test_df)","ca3fb4b2":"df_ = df_all[df_all[\"NflId\"]==df_all[\"NflIdRusher\"]]","efb8ac67":"df_all[\"offence\"] = 0\ndf_all.loc[df_all[\"Position\"].isin(offence_position), \"offence\"] = 1","6fc677b4":"df_ = team_name(df_)\n# df_ = count_position(df_)\n# team_yards_df, defence_yards_df, personal_yards = average_yards(df_)","edce5ca8":"df_ = get_team_score(df_)\ndf_ = average_personal_data(df_, df_all)\ndf_ = add_last_yards(df_)","b16530b9":"df_year = merge_lastYearAv(df_, team_yards_df, defence_yards_df, personal_yards, 2019)","b87db639":"test_X = select_columns(df_year)","1e787afa":"test_X.columns","b3fc734f":"test_X=pd.concat([train_df,test_X],sort=False)\ntest_X = test_X.fillna(0)","64bd6647":"pred_df = pd.DataFrame(clf.predict_proba(test_X), columns=[ \"Yards\"+str(i) for i in clf.classes_])\npred_df = pred_df.cumsum(axis=1)","6439d466":"import warnings\nwarnings.simplefilter('ignore')","82fa162f":"df_a = preprocess(test_df)\n\ndf_ = df_a.loc[df_a[\"NflId\"]==df_a[\"NflIdRusher\"], :]\n\ndf_a[\"offence\"] = 0\ndf_a.loc[df_a[\"Position\"].isin(offence_position), \"offence\"] = 1\n\ndf_ = team_name(df_)\n\ndf_ = get_team_score(df_)\ndf_ = average_personal_data(df_, df_a)\ndf_ = add_last_yards(df_)\n\ndf_year = merge_lastYearAv(df_, team_yards_df, defence_yards_df, personal_yards, 2019)\ntest_X = select_columns(df_year)\n\n# \u7121\u3044\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\u3092\u57cb\u3081\u308b\ntest_X=pd.concat([train_df,test_X],sort=False)\ntest_X = drop_columns(test_X)\ntest_X = test_X.fillna(0)\n\npred520 = clf.predict_proba(test_X)[0]\npred100 = np.concatenate([ np.zeros(99+min_yards), pred520.cumsum(), np.ones(99-max_yards) ])\nsample_prediction_df.iloc[0] = pred100\n#pred_df = pd.DataFrame(clf.predict_proba(test_X), columns=[ \"Yards\"+str(i) for i in clf.classes_])\n#pred_df = pred_df.cumsum(axis=1)\n\n#sample_prediction_df.iloc[0, 95:121] = pred_df.iloc[0, :]\n#sample_prediction_df.loc[:, :\"Yards-6\"] = 0\n#sample_prediction_df.loc[:, \"Yards21\":] = 1","3b0e0dad":"sample_prediction_df","8ad36193":"sample_prediction_df.loc[:, \"Yards-7\":]","0020b6b4":"# \u8ffd\u52a0\u306e\u7279\u5fb4\u91cf","2b1d16f3":"# \u30c6\u30b9\u30c8","5deea4b5":"### \u30c1\u30fc\u30e0\u540d\u78ba\u8a8d","7ceabfe2":"## \u30dd\u30b8\u30b7\u30e7\u30f3\u6bce\u306e\u4eba\u6570","98ec98e7":"# Yard\u6570\u306e\u5206\u985e\u30e2\u30c7\u30eb\u3068\u3057\u3066\u5b66\u7fd2","65233a80":"### \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u7d42\u308f\u308a","20787b95":"## \u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u5206\u985e","878d426e":"# \u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u9078\u3076","89863860":"### \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","e41fa18a":"## \u30c7\u30fc\u30bf\u78ba\u8a8d","001cc8bb":"### \u8aad\u307f\u8fbc\u307f","700fe991":"# submission data \u4f5c\u6210","60e0916a":"# \u524d\u51e6\u7406","fcb424c2":"## \u9078\u624b\u30fb\u30c1\u30fc\u30e0\u306e\u5e73\u5747\u60c5\u5831\u8ffd\u52a0"}}