{"cell_type":{"b4e2c677":"code","53f22864":"code","5a25ccef":"code","2e3dd9de":"code","439e31cb":"code","6f02ff99":"code","eadb1749":"code","86924058":"code","7e09a4a3":"code","210fa5e7":"code","151ba3eb":"code","cfeea355":"code","bf0eb34c":"code","25681f75":"code","f6a44f57":"code","9c3f7a4c":"code","31088a07":"code","3558683c":"code","c7f6352f":"code","0ae15e10":"code","7fde4ff2":"code","491c1aa5":"code","aa766b21":"code","12fb1211":"code","44c9a158":"code","4d6bb566":"code","a7e1d382":"code","6e438bf7":"code","43c9a482":"code","b9ed8cb1":"code","8061b1cb":"code","ee80b0fe":"code","3ee9ba1c":"code","dd2a15a7":"code","86056fda":"code","98bf6da8":"code","f1582522":"code","059577bf":"code","c7db23f1":"code","7d766f14":"code","c8e2b9d5":"code","cb66839e":"code","36793468":"code","f2748a0a":"code","77e55229":"code","5050a09f":"code","2f3b23f5":"code","35371201":"code","2e2f664b":"code","8227ea27":"code","73c439e1":"code","df9f7576":"code","d0545ff0":"code","3db8b48d":"code","691c903b":"code","ca50d4d6":"code","9119769e":"code","ef7da87e":"code","36b55457":"code","f3910479":"code","67ed074c":"code","b3a17a1f":"code","e6448e20":"code","d23a3fb0":"code","76cdb9fb":"code","7c248531":"code","a3999346":"code","fe892b39":"code","fb6340c7":"code","b9ffc9ec":"code","09098991":"markdown","d3626dce":"markdown","6a323a59":"markdown","aca3819a":"markdown","6bc68f69":"markdown","43048dc4":"markdown","d68e68b6":"markdown","bff7b13c":"markdown","ed12b99f":"markdown","8ef0fe76":"markdown","a21b1676":"markdown","29534947":"markdown","7882c907":"markdown","b89e0ccd":"markdown","5ca6c44c":"markdown","75c6c4e0":"markdown","50eb8715":"markdown","2524f098":"markdown","9fc252a2":"markdown","22683314":"markdown","a7842cb1":"markdown","e993187a":"markdown","0e2c4de6":"markdown","e349c710":"markdown","6ee02643":"markdown","bb74ed63":"markdown","026ea305":"markdown","8e4e143f":"markdown","672037e9":"markdown","1a681869":"markdown","54fc0ed4":"markdown","59d331c5":"markdown","64d28aed":"markdown","057324ab":"markdown","39c3d3b1":"markdown","e82d1322":"markdown","25882bb2":"markdown","f5c8995d":"markdown","9cd8b1fa":"markdown","1389d968":"markdown","4035fbba":"markdown","bfd5217b":"markdown","b7e6bfd3":"markdown","20afca64":"markdown","4f0a2729":"markdown","3426ca4f":"markdown","4781621c":"markdown","a67cadce":"markdown","9121ec15":"markdown","c9770528":"markdown","22f32b18":"markdown","24a83bad":"markdown","5736413a":"markdown","63a55b64":"markdown","6572b062":"markdown","f08c6889":"markdown","7c2383aa":"markdown","163ac5eb":"markdown","de6eb2b3":"markdown"},"source":{"b4e2c677":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","53f22864":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport statsmodels\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","5a25ccef":"# Read the csv\ncarprice = pd.read_csv(\"..\/input\/car-price-dataset\/CarPrice_Assignment.csv\")","2e3dd9de":"# Read the head\ncarprice.head()","439e31cb":"# 205 rows and 26 columns\ncarprice.shape","6f02ff99":"carprice.info()","eadb1749":"carprice.describe()","86924058":"# Checking Null values%\nround(100*(carprice.isnull().sum()\/len(carprice.index)),2)\n# There are no NULL values","7e09a4a3":"# Drop the car_ID column as to does not hold any significance for developing the model\ncarprice.drop(['car_ID'], axis = 1, inplace = True)","210fa5e7":"# Convert CarName to lower string\ncarprice['CarName'] = carprice['CarName'].str.lower()\n\n# Create a new column called company from the first word in CarName Values\ncarprice['company'] = carprice['CarName'].str.split(' ').str[0]\n\nprint(carprice['company'].value_counts())","151ba3eb":"# Perform corrections in the company names\ncarprice['company'].replace(to_replace=\"vokswagen\", value = 'volkswagen', inplace=True)\ncarprice['company'].replace(to_replace=\"vw\", value = 'volkswagen', inplace=True)\ncarprice['company'].replace(to_replace=\"toyouta\", value = 'toyota', inplace=True)\ncarprice['company'].replace(to_replace=\"porcshce\", value = 'porsche', inplace=True)\ncarprice['company'].replace(to_replace=\"maxda\", value = 'mazda', inplace=True)\n\nprint(carprice['company'].value_counts())","cfeea355":"# Drop the CarName column now as we have created a new column of company which will be used in analysis and modeling\ncarprice.drop(['CarName'], axis = 1, inplace = True)","bf0eb34c":"print(carprice['enginelocation'].value_counts(),\"\\n\")","25681f75":"# Almost all the values of enginelocation are front; hence dropping that column\ncarprice.drop(['enginelocation'], axis = 1, inplace = True)","f6a44f57":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(carprice.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=carprice.price)\n\nplt.show()\ncarprice.price.describe()","9c3f7a4c":"print(carprice['company'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"company\").price.mean().sort_values(ascending=False))\n\nplt.figure(figsize=(16, 8))\n\nplt.subplot(2,1,1)\nax1 = sns.countplot(y=\"company\", data = carprice)\nax1.set(ylabel='Car Company', xlabel='Count of Cars')\n\nplt.subplot(2,1,2)\nax2 = sns.barplot(y=\"company\", x = \"price\" , data = carprice)\nax2.set(ylabel='Car Company', xlabel='Average Car Price')\n\nplt.show()","31088a07":"print(carprice['symboling'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"symboling\").price.mean())\n\nplt.figure(figsize=(12, 6))\n\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"symboling\", data = carprice)\nax1.set(xlabel='Insurance Risk Rating', ylabel='Count of Cars')\n\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"symboling\", y = \"price\" , data = carprice)\nax2.set(xlabel='Insurance Risk Rating', ylabel='Average Car Price')\n\nplt.show()","3558683c":"print(carprice['fueltype'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"fueltype\").price.mean())\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"fueltype\", data = carprice)\nax1.set(xlabel='Type of Fuel', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"fueltype\", y = \"price\" , data = carprice)\nax2.set(xlabel='Type of Fuel', ylabel='Average Car Price')\nplt.show()","c7f6352f":"print(carprice['aspiration'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"aspiration\").price.mean())\nplt.figure(figsize=(10, 5))\nax = sns.barplot(x=\"aspiration\", y = \"price\" , data = carprice)\nax.set(xlabel='Aspiration', ylabel='Average Car Price')\nplt.show()","0ae15e10":"print(carprice['doornumber'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"doornumber\").price.mean())\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"doornumber\", data = carprice)\nax1.set(xlabel='Number of Doors', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"doornumber\", y = \"price\" , data = carprice)\nax2.set(xlabel='Number of Doors', ylabel='Average Car Price')\nplt.show()","7fde4ff2":"print(carprice['carbody'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"carbody\").price.describe())\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"carbody\", data = carprice)\nax1.set(xlabel='Car Body', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"carbody\", y = \"price\" , data = carprice)\nax2.set(xlabel='Car Body', ylabel='Average Car Price')\nplt.show()","491c1aa5":"# Based upon data visualization of car body, replace hardtop and convertible values to a single value\ncarprice['carbody'].replace(to_replace=\"hardtop\", value = 'hardtop_or_convertible', inplace=True)\ncarprice['carbody'].replace(to_replace=\"convertible\", value = 'hardtop_or_convertible', inplace=True)\nprint(carprice['carbody'].value_counts(),\"\\n\")","aa766b21":"print(carprice['cylindernumber'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"cylindernumber\").price.mean().sort_values(ascending=False))\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"cylindernumber\", data = carprice)\nax1.set(xlabel='Number of cylinders', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"cylindernumber\", y = \"price\" , data = carprice)\nax2.set(xlabel='Number of cylinders', ylabel='Average Car Price')\nplt.show()","12fb1211":"print(carprice['enginetype'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"enginetype\").price.mean().sort_values(ascending=False))\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"enginetype\", data = carprice)\nax1.set(xlabel='Engine Type', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"enginetype\", y = \"price\" , data = carprice)\nax2.set(xlabel='Engine Type', ylabel='Average Car Price')\nplt.show()","44c9a158":"print(carprice['fuelsystem'].value_counts(),\"\\n\")\nprint(carprice.groupby(\"fuelsystem\").price.mean().sort_values(ascending=False))\n\nplt.figure(figsize=(12, 6))\nplt.subplot(1,2,1)\nax1 = sns.countplot(x=\"fuelsystem\", data = carprice)\nax1.set(xlabel='Fuel System', ylabel='Count of Cars')\nplt.subplot(1,2,2)\nax2 = sns.barplot(x=\"fuelsystem\", y = \"price\" , data = carprice)\nax2.set(xlabel='Fuel System', ylabel='Average Car Price')\nplt.show()","4d6bb566":"# Derive a new column that is Fuel economy from citympg and highwaympg\ncarprice['fueleconomy'] = (0.55 * carprice['citympg']) + (0.45 * carprice['highwaympg'])\n\n# Drop both citympg and highwaympg\ncarprice.drop(['citympg','highwaympg'], axis = 1, inplace = True)","a7e1d382":"def pp(x,y,z):    \n    sns.pairplot(carprice, x_vars=[x,y,z], y_vars='price',size=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('carwidth', 'carlength', 'curbweight')\npp('carheight','enginesize', 'boreratio' )\npp('stroke','compressionratio', 'horsepower')\npp('peakrpm','wheelbase', 'fueleconomy')","6e438bf7":"plt.figure(figsize = (14, 8))\nsns.heatmap(carprice.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","43c9a482":"# Create a new column called company category having values Budget, Mid_Range and Luxury based upon \n# company average price of their cars.\n# If company average price < 10000 then Budget\n# Else If company average price >= 10000 and < 20000 then Mid_Range\n# Else If company average price > 20000 then Luxury\ncarprice[\"company_average_price\"] = round(carprice.groupby('company')[\"price\"].transform('mean'))\n\ncarprice['company_category'] = carprice[\"company_average_price\"].apply(lambda x : \"budget\" if x < 10000\n                                                                       else (\"mid_range\" if 10000 <= x < 20000\n                                                                       else \"luxury\"))\nplt.figure(figsize=(12, 6))\nsns.boxplot(x = 'company_category', y = 'price', data = carprice)\nplt.show()\n\nprint(carprice.groupby(\"company_category\").company.count())","b9ed8cb1":"# Drop company and company_average_price after deriving company_category which will be used for modeling\ncarprice.drop(['company','company_average_price'], axis = 1, inplace = True)","8061b1cb":"# Based upon data visualization of drivewheel, derive a single numeric column of drivewheel_rwd where if 1 then it implies \n# rwd else 4wd or fwd\ncarprice[\"drivewheel_rwd\"] = np.where(carprice[\"drivewheel\"].str.contains(\"rwd\"), 1, 0)\n\n# Drop drivewheel column\ncarprice.drop(['drivewheel'], axis = 1, inplace = True)","ee80b0fe":"# Based upon data visualization, derive a single numeric column of cylindernumber_four where if 1 then it implies \n# 4 cylinders car else not\ncarprice[\"cylindernumber_four\"] = np.where(carprice[\"cylindernumber\"].str.contains(\"four\"), 1, 0)\n\n# Drop cylindernumber column\ncarprice.drop(['cylindernumber'], axis = 1, inplace = True)","3ee9ba1c":"# Based upon data visualization, derive a single numeric column of enginetype_ohc where if 1 then it implies ohc\n# cylinder type else not\ncarprice[\"enginetype_ohc\"] = np.where(carprice[\"enginetype\"].str.contains(\"ohc\"), 1, 0)\n\n# Drop enginetype column\ncarprice.drop(['enginetype'], axis = 1, inplace = True)","dd2a15a7":"print(carprice.shape)\n# Right now we have 23 columns\ncarprice.head(10)","86056fda":"# Create dummy variables for the remaining categorical variables\ncarprice_dummy = carprice.loc[:, ['company_category','doornumber','fueltype','aspiration','carbody','fuelsystem']]\ncarprice_dummy.head()\ndummy = pd.get_dummies(carprice_dummy, drop_first = True)\nprint(dummy.shape)\ndummy.head(10)","98bf6da8":"# Concatenate carprice and dummy data frames\ncarprice = pd.concat([carprice, dummy], axis = 1)\n\n# Drop the original categorical columns once we have the corresponding derived numerical columns\ncarprice.drop(['company_category','doornumber','fueltype','aspiration','carbody','fuelsystem'], axis = 1, inplace = True)","f1582522":"carprice.head(10)","059577bf":"# Now we have 32 columns and all are numeric which can be used for modeling\ncarprice.shape","c7db23f1":"carprice.info()","7d766f14":"# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\n\ndf_train, df_test = train_test_split(carprice, train_size = 0.7, test_size = 0.3, random_state = 100)","c8e2b9d5":"scaler = MinMaxScaler()","cb66839e":"# Apply scaler() to all the columns except the dummy variables and target variable\nnum_vars = ['wheelbase', 'carlength','carwidth','carheight','curbweight', 'enginesize', 'boreratio', \n            'stroke','compressionratio','horsepower','peakrpm','fueleconomy']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n\ndf_train.head()","36793468":"# Set y_train to the target column\ny_train = df_train.pop('price')\n# Set X_train to the independent variables\nX_train = df_train","f2748a0a":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","77e55229":"# Running RFE with the output number of the variable equal to 12\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 12) # running RFE\nrfe = rfe.fit(X_train, y_train)","5050a09f":"(list(zip(X_train.columns,rfe.support_,rfe.ranking_)))","2f3b23f5":"col = X_train.columns[rfe.support_]\ncol","35371201":"# Create function definitions to build model and check VIF\ndef build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    \ndef checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","2e2f664b":"# Creating X_train_rfe dataframe with RFE selected variables\nX_train_rfe = X_train[col]\n\n#Build model and check VIF\nX_train_lm = build_model(X_train_rfe,y_train)\ncheckVIF(X_train_lm)","8227ea27":"X_train_lm = X_train_lm.drop([\"fuelsystem_idi\"], axis = 1)\nprint(X_train_lm.columns)\n\n#Build model and check VIF\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","73c439e1":"X_train_lm = X_train_lm.drop([\"carlength\"], axis = 1)\nprint(X_train_lm.columns)\n\n# Build model and check VIF\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","df9f7576":"X_train_lm = X_train_lm.drop([\"fueleconomy\"], axis = 1)\nprint(X_train_lm.columns)\n\n# Build model and check VIF\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","d0545ff0":"X_train_lm = X_train_lm.drop([\"fueltype_gas\"], axis = 1)\nprint(X_train_lm.columns)\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","3db8b48d":"X_train_lm = X_train_lm.drop([\"curbweight\"], axis = 1)\nprint(X_train_lm.columns)\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","691c903b":"X_train_lm = X_train_lm.drop([\"peakrpm\"], axis = 1)\nprint(X_train_lm.columns)\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","ca50d4d6":"X_train_lm = X_train_lm.drop([\"carbody_sedan\"], axis = 1)\nprint(X_train_lm.columns)\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","9119769e":"X_train_lm = X_train_lm.drop([\"carbody_wagon\"], axis = 1)\nprint(X_train_lm.columns)\nX_train_lm = build_model(X_train_lm,y_train)\ncheckVIF(X_train_lm)","ef7da87e":"lm = sm.OLS(y_train,X_train_lm).fit()\n\ny_train_pred = lm.predict(X_train_lm)\n\nresidual = y_train_pred - y_train","36b55457":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot(residual, bins = 20)\nfig.suptitle('Train Data Distribution of Error Terms')                  # Plot heading \nplt.xlabel('Errors')       ","f3910479":"# Plot the scatter plot of the error terms\nfig = plt.figure()\nsns.scatterplot(y_train, residual)\nfig.suptitle('Train Data Scatter Plot of Error Terms')\nplt.ylabel('Errors') ","67ed074c":"num_vars = ['wheelbase', 'carlength','carwidth','carheight','curbweight', 'enginesize', 'boreratio', \n            'stroke','compressionratio','horsepower','peakrpm','fueleconomy']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","b3a17a1f":"y_test = df_test.pop('price')\nX_test = df_test","e6448e20":"# Now let's use our model to make predictions.\nX_train_lm = X_train_lm.drop(['const'], axis=1)\n\n# Creating X_test_new dataframe by dropping variables from X_test using the final X_train_lm.columns\nX_test_new = X_test[X_train_lm.columns]\n\n# Adding a constant variable \nX_test_new = sm.add_constant(X_test_new)","d23a3fb0":"# Making predictions\ny_test_pred = lm.predict(X_test_new)\nprint(y_test_pred)","76cdb9fb":"from sklearn.metrics import r2_score\nr2_score(y_train, y_train_pred)","7c248531":"from sklearn.metrics import r2_score\nr2_score(y_test, y_test_pred)","a3999346":"#Returns the mean squared error; we'll take a square root\nprint(np.sqrt(mean_squared_error(y_train, y_train_pred)))\nnp.sqrt(mean_squared_error(y_test, y_test_pred))","fe892b39":"# Plotting y_test and y_test_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_train,y_train_pred)\nfig.suptitle('y_train vs y_train_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_train', fontsize=18)                          # X-label\nplt.ylabel('y_train_pred', fontsize=16)                     # Y-label\n\nfig = plt.figure()\nplt.scatter(y_test,y_test_pred)\nfig.suptitle('y_test vs y_test_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_test_pred', fontsize=16)                     # Y-label","fb6340c7":"# Final Model Summary\nlm.summary()","b9ffc9ec":"residual = y_test - y_test_pred\nfig = plt.figure()\nsns.distplot(residual, bins = 20)\nfig.suptitle('Test Data Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)","09098991":"### Rescaling the features","d3626dce":"### Rebuilding the model after dropping carbody_wagon (High P value)","6a323a59":"### Rebuilding the model after dropping curbweight (High VIF, all P values lower than 0.05)","aca3819a":"### Analysis of Numeric Columns vs Car Price\n","6bc68f69":"Summary:\n\nMost of cars seem to have 4 cylinders.\n\nAverage car price is highest for 8 and 12 cylinders cars.","43048dc4":"Summary:\n\nThere is almost no variance of average price by the number of doors category.\n\nAlso note that there are decent number of observations for both 2 and 4 number of doors.","d68e68b6":"### Plot the histogram of the test data error terms","bff7b13c":"Summary:\n\nMost of the cars seem to get 0 or 1 insurance rating.\n\nVery few cars have got -2 rating.","ed12b99f":"### Building model using statsmodel, for the detailed statistics","8ef0fe76":"## Step 9: Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","a21b1676":"### RMSE of train and test data","29534947":"### We can see that the equation of our best fitted line is:\n\nprice = 0.3957 carwidth + 0.4402 horsepower + 0.2794 company_category_luxury - 0.0414 carbody_hatchback - 0.0824\n\nF-statistic is also high that is 308 -  overall model fit is significant.","7882c907":"## Step 5: Splitting the Data into Training and Testing Sets\n\nFirst basic step for regression is performing a train-test split.","b89e0ccd":"Summary:\n\nTurbo cars have higher average price than standard cars.","5ca6c44c":"### Dividing X_test and y_test","75c6c4e0":"Summary:\n\nSedan and hatchback are the top 2 most common cars.\n\nHard top and convertible cars are more expensive than other type of cars.\n\nBased upon the analyis, also we replaced the hard top and convertible values to a single value hardtop_or_convertible.","50eb8715":"### r2 score of test data","2524f098":"Summary:\n\ncarwidth, carlength, curbweight, boreratio seems to have a positive correlation with price.\n\ncarheight doesn't show any significant trend with price.\n\nenginesize and horsepower - seem to have a significant positive correlation with price.\n\nfueleconomy - seem to have a significant negative correlation with price.","9fc252a2":"### Now we have a final model with all variables of low P value and low VIF","22683314":"## Step 1: Reading and Understanding the Data","a7842cb1":"### Rebuilding the model after dropping carbody_sedan (High VIF, all P values lower than 0.05)","e993187a":"### Plot y_train vs y_train_pred and y_test vs y_test_pred","0e2c4de6":"### Analysis of Symboling vs Car Price","e349c710":"### Derived Variables","6ee02643":"### Rebuilding the model after dropping fueleconomy (High P value and High VIF)","bb74ed63":"Summary:\n\nThe plot is right-skewed, meaning that the most prices in the dataset are low(Below 15,000). The data points are far spread out from the mean, which indicates a high variance in the target columns that is car prices.(75% of the prices are below 16,503, whereas the remaining 25% are between 16,502 and 45,400)","026ea305":"## Step 2: Data Cleaning","8e4e143f":"## Step 6: Building a linear model","672037e9":"### Analysis of Car Body vs Car Price","1a681869":"### Rebuilding the model after dropping fuelsystem_idi (High P value and High VIF)","54fc0ed4":"### Rebuilding the model after dropping peakrpm (High P value)","59d331c5":"### Rebuilding the model after dropping carlength (High P value and High VIF)","64d28aed":"### Analysis of Aspiration vs Car Price","057324ab":"### Plot of Target Column -  Price","39c3d3b1":"Summary:\n\nPrice is positively correlated with curbweight, car length, car width, engine size and horse power.\n\nPrice is negatively correlated with fuel economy (-0.70).\n\ncar length and car width are themselves correlated (0.84).\n\nAlso curb weight is correlated with car length and car width.","e82d1322":"### Analysis of Number of Doors vs Car Price","25882bb2":"### Check the correlation coefficients to see which variables are highly correlated","f5c8995d":"### Analysis of Car Company vs Car Price","9cd8b1fa":"### Dividing into X and Y sets for the model building","1389d968":"Summary:\n\nAverage Car Price is higher for diesel cars as compared to non diesel cars.\n\nAlso note that number of observations of diesel cars is quite less as compared to non diesel cars.","4035fbba":"## Business Goal","bfd5217b":"## Step 8: Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the final model.","b7e6bfd3":"You are required to model the price of cars with the available independent variables.\n\nIt will be used by the management to understand how exactly the prices vary with the independent variables.\nThey can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. \n\nFurther, the model will be a good way for management to understand the pricing dynamics of a new market. ","20afca64":"## Step 4: Data Preparation For Modeling","4f0a2729":"### Dummy Variables","3426ca4f":"A Chinese automobile company aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts. \n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n1. Which variables are significant in predicting the price of a car\n\n2. How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the Americal market.\n","4781621c":"Summary:\n\nMost cars are of ohc engine type.\n\ndohcv car type is the most expensive but there is jut once observation.","a67cadce":"## Problem Statement","9121ec15":"### Analysis of Number of Cylinders vs Car Price","c9770528":"### Analysis of Fuel System vs Car Price","22f32b18":"Summary:\n\nToyoto seems to be the prefered company.\n\nJaguar, Buick and Porsche are the top3 companies in terms of average price.","24a83bad":"## Step 7: Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","5736413a":"### Analysis of Engine Type vs Car Price","63a55b64":"### RFE","6572b062":"### Analysis of Fuel Type vs Car Price","f08c6889":"## Step 3: Visualizing the Data","7c2383aa":"### r2 score of train data","163ac5eb":"Summary:\n\nmpfi and 2bbl are most common type of fuel systems. \n\nmpfi and idi having the highest price range. ","de6eb2b3":"Note : There is a variable named CarName which is comprised of two parts - the first word is the name of 'car company' and the second is the 'car model'. For example, chevrolet impala has 'chevrolet' as the car company name and 'impala' as the car model name."}}