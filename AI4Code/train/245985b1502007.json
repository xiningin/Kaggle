{"cell_type":{"6b4f2628":"code","9a6d38d8":"code","2d840217":"code","1ebbed0d":"code","2c5c9585":"code","94c02294":"code","02fe1123":"code","a4af13ca":"code","72d0f18f":"code","2095d5cd":"code","53f48740":"code","ae48aa5c":"code","ddd74efc":"code","f2d49a40":"code","95a36465":"code","0f4468a1":"code","7de4e71e":"code","c22446c6":"code","2570ad4f":"code","3b0eac10":"code","292ea4cc":"code","e6f00844":"code","40ca8873":"code","ca36bcff":"code","d66ca62a":"code","9a057678":"code","0e350e97":"code","e499c222":"code","807fb67a":"code","a41eec44":"code","812db63a":"code","5490b1fa":"code","c1bb22aa":"code","4c236682":"code","718ca75f":"code","6d001727":"code","642e8195":"code","048500f6":"code","bf86384a":"code","b36c2edd":"code","e012c7a5":"code","56894307":"code","90a76958":"code","3e50ca4c":"code","81c0e0cb":"code","d9985885":"code","1f77864a":"code","b9c368dd":"code","35ec336a":"code","50d07026":"code","ece2e467":"code","ca12dfbd":"code","13414b1e":"code","48697687":"code","8bf12772":"code","fe756813":"code","2ceea031":"code","29171b3d":"markdown","c48bcc70":"markdown","3b6ef883":"markdown","d26f2772":"markdown","699b219d":"markdown","070b3fc7":"markdown","acca9e54":"markdown","8b83d5fa":"markdown","a8595a06":"markdown","108a292c":"markdown","64812c55":"markdown","58628a86":"markdown","3be13ebd":"markdown","cf117d41":"markdown","59d6ab62":"markdown","35fac670":"markdown","fe92bd00":"markdown","aced2824":"markdown","aa32e906":"markdown","dc57c976":"markdown","deced0ba":"markdown","49b08094":"markdown","fffd2065":"markdown","1521b097":"markdown","016a4342":"markdown","ccba9c8f":"markdown","d3ce9e0a":"markdown","3390d5ad":"markdown","03870e65":"markdown","55407a77":"markdown","6f9b42d9":"markdown","5ac52421":"markdown","c0e7c2e8":"markdown","144f6068":"markdown","b5e35ba0":"markdown","e3aa3545":"markdown","3a88b05f":"markdown","48b1123a":"markdown","e05220b0":"markdown","dbc6567a":"markdown","b1fd8429":"markdown","f34bcc7f":"markdown"},"source":{"6b4f2628":"import numpy as np # Numpy (numerical arrays in Python)\nimport pandas as pd\nimport scipy ","9a6d38d8":"scalar = 2\nscalar","2d840217":"# Lets check if the about is a scalar variable\nprint(np.isscalar(scalar), type(scalar))","1ebbed0d":"# we can construct a vector from a python list\nvector_list = [24, 16, 45, 50]\nvector_list","2c5c9585":"# we can construct from a numpy arrays\nvector_np = np.array([24, 16, 45, 50])\nvector_np","94c02294":"# This will return the shape of the matrix\nvector_np.shape","02fe1123":"# With numpy, we easily change the dimension of the vector.\n# With the function .reshape, the 1 x 4 matrix was changed to a 4 x 1 matrix\nvector_reshaped = vector_np.reshape(4, 1)\nvector_reshaped","a4af13ca":"A = vector_np\nB = 32\nA + B","72d0f18f":"A","2095d5cd":"vector_reshaped + B","53f48740":"# here, we can see the effect of of matrix multiplication (m x n . n x p = m x p)\nmult = vector_reshaped * A\nmult","ae48aa5c":"# 2 X 2 matrix\nA_list = [[-1, 2],\n     [4, 3]]\nA_list","ddd74efc":"print(A_list[0][0])","f2d49a40":"B_list = [[-7, 4],\n     [4, 0]]\nB_list","95a36465":"# there is an error here because, unlike numpy, you can not multiply python list easily this way.\nprint(A_list * B_list)","0f4468a1":"A_np = np.matrix([[-1, 2],\n              [4, 3]])\nA_np","7de4e71e":"B_np = np.matrix([[-7, 4],\n     [4, 0]])\nB_np","c22446c6":"sum_A_B = A_np * B_np\nsum_A_B","2570ad4f":"A = np.matrix([[-1, 2],\n              [4, 3]])\n\nB = np.matrix([[-7, 4],\n     [4, 0]])","3b0eac10":"A_inverse = np.linalg.inv(A_np)\nA_inverse","292ea4cc":"# Multiply the Inverse by B to get X\nX = A_inverse * B_np\nX","e6f00844":"X = np.linalg.solve(A_np, B_np)\nX","40ca8873":"matrix = np.matrix([[-1, 2],\n              [4, 3]])\ndet = np.linalg.det(matrix)\ndet","ca36bcff":"matrix = np.matrix([[-1, 2],\n              [4, 3]])\ninverse = np.linalg.inv(matrix)\ninverse","d66ca62a":"# for a 2 x 2 matrix\ntranspose = np.transpose(matrix)\ntranspose","9a057678":"# for a 3 x 4 matrix\n\nmatrix = np.matrix([[1,5,3,6],\n                   [2,9,3,0],\n                   [5,2,8,6]])\nprint(np.transpose(matrix))","0e350e97":"matrix = np.matrix([[-1, 2],\n              [4, 3]])\neigvals = np.linalg.eigvals(matrix)\nprint(\"The eigen values are\", eigvals[0], \" and \", eigvals[1])","e499c222":"# This will return of ones matrix\nx = np.ones((3,3))\nx","807fb67a":"# this will return a range of numbers \nx = np.arange(5) \nx","a41eec44":"#This will return randoms number\ny = np.random.rand(2, 2)\ny","812db63a":"import scipy.misc","5490b1fa":"import matplotlib.pyplot as plt\n%matplotlib inline","c1bb22aa":"img = scipy.misc.imread(\"..\/input\/images\/ladiKwali.jpg\")\nimg2 = plt.imread(\"..\/input\/images\/ladiKwali.jpg\")","4c236682":"# do you know this woman? Read about Ladi Kwali\nplt.imshow(img2)","718ca75f":"#the image ia actually a tensor consisting of pixel values. \n#this is waht makes computer vision possible\nimg.shape","6d001727":" img","642e8195":"# import pandas as pd\n# import numpy as np\n\n#Create a Dictionary of series\nd = {'Name':pd.Series(['Teju','Stanley','George','Bisi','Francis','Okoro','Abebe',\n   'Tola','Fela','Udeme','Betina','Andres']),\n   'Age':pd.Series([25,26,25,23,30,29,23,34,40,30,51,46]),\n   'Rating':pd.Series([4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65])}\n\n#Create a DataFrame\ndf = pd.DataFrame(d)\ndf\n\n#OR\n\n# dd = {'Name':['Teju','Stanley','George','Bisi','Francis','Okoro','Abebe',\n#    'Tola','Fela','Udeme','Betina','Andres'],\n#    'Age':[25,26,25,23,30,29,23,34,40,30,51,46],\n#    'Rating':[4.23,3.24,3.98,2.56,3.20,4.6,3.8,3.78,2.98,4.80,4.10,3.65]}\n\n# dff = pd.DataFrame(dd, columns= ['Name', 'Age', 'Rating'])\n# dff","048500f6":"df.to_csv(r'class.csv')","bf86384a":"df.head()","b36c2edd":"# dff = pd.read_csv('class.csv')\n# dff","e012c7a5":"print (df.sum())","56894307":"print (df.mean())","90a76958":"print (df.std())","3e50ca4c":"print (df.describe())","81c0e0cb":"print (df. describe(include='all'))","d9985885":"df.groupby('Name')['Age'].first().plot.bar()","1f77864a":"df.groupby('Name')['Age'].first().plot.pie()","b9c368dd":"def xPwr(x, pwr):\n    return x ** pwr\n\ndef getDeriv(func, x, n):\n    h = 0.0001\n    return (func(x+h, n) - func(x, n))\/h","35ec336a":"x = 3\npower = 2\nderivative = getDeriv(xPwr, x, power)","50d07026":"derivative","ece2e467":"def actual(x, n):\n    power = n-1\n    var = n * x\n    return print(var**power)","ca12dfbd":"actual = actual(3, 2)\nactual","13414b1e":"from sympy import *\nx, y, z = symbols('x y, z')\ninit_printing(use_unicode=True)","48697687":"print(diff(cos(x), x)) #the stand-alone-'x' means the variable should be differentiated once","8bf12772":"print(diff(exp(x**2), x))","fe756813":"print(diff(x**4, x, x, x)) ","2ceea031":"print(diff(x**4, x, 3))","29171b3d":"A large number of methods collectively compute descriptive statistics and other related operations on DataFrame. \n\nMost of these are aggregations like sum(), mean(), but some of them, like sumsum(), produce an object of the same size. \n\nGenerally speaking, these methods take an axis argument, just like ndarray.{sum, std, ...}, but the axis can be specified by name or integer\n\n> **Lets generate data using dictionaries**","c48bcc70":"**Formula Method as described in the above picture**","3b6ef883":"diff can take multiple derivatives at once. To take multiple derivatives, pass the variable as many times as you wish to differentiate, or pass a number after the variable. For example, both of the following find the third derivative of x4.","d26f2772":"### **Matrix Quantities**","699b219d":"**Class Exercise**\n> Create  any 3 x 3 matrix of your choice using list and numpy","070b3fc7":"## **Class Exercise**\n\n> A = [21, 30, 18]\n\n> B = [14, 19, 1]\n\n> C = [2]\n\n> D = [12, 3]\n\n**SOLVE**\n- A + B\n- A * B\n- A - B\n- A + C\n- A * C\n- A + D\n- A * D\n- A * (B-reshaped)\n- A * (D-reshaped)\n\n> *hint: convert the list (A, B, C, D) to numpy arrays*","acca9e54":"## Statistics","8b83d5fa":"Lets Try Something Interesting with images","a8595a06":"**Class Excercise**\n> - Multiply matrix A and B\n> - Create two 3 x 3 matrix and +, -, x ","108a292c":"To take derivatives, use the diff function.","64812c55":"> - A matrix is a 2-D array (2-D tensor) of numbers, symbols, expressions, arranged in rows and columns\n> - It is a A real-valued matrix has a height m and width n,\n> - It can be integers, rational number, real numbers, natural numbers etc\n","58628a86":"**Finding Eigenvalues**","3be13ebd":"## **Derivatives**","cf117d41":"### **mean()**\nReturns the average value","59d6ab62":"### **sum()**\nReturns the sum of the values for the requested axis. By default, axis is index (axis=0).","35fac670":"> CLASS DISCUSSION\n\nWhat do you think happen there?","fe92bd00":"# AI Saturdays Lagos - 3rd Cohort - Week 1","aced2824":"find the inverse of A","aa32e906":"### **Statistics**","dc57c976":"**Other Functions & Description**\n![image.png](attachment:image.png)","deced0ba":"#### ** Vector Addition **\nWith numpy, we can add vectors to scalars and vectors with vectors easily.","49b08094":"## **Calculus**","fffd2065":"![image.png](attachment:image.png)","1521b097":"### Plotting ","016a4342":"### **Vector Quantities**\nIn machine learning, a vector is used to represent columns or row in a dataset. Each column(features) can denote particular features .\n\n> For example, consider column Age below that denotes the age of 4 users in our dataset.","ccba9c8f":"You need to know some basic calculus in order to understand how functions change over time (derivatives), and to calculate the total amount of a quantity that accumulates over a time period (integrals). The language of calculus will allow you to speak precisely about the properties of functions and better understand their behaviour.\n\nNormally taking a calculus course involves doing lots of tedious calculations by hand, but having the power of computers on your side can make the process much more fun. This section describes the key ideas of calculus which you\u2019ll need to know to understand machine learning concepts.","d3ce9e0a":"### **Scalar Quantities**\n* A Scalar is just a single number usually represented in lowercase italics, * x*. \n* It has only magnitude\n* It is a 0-dimensional tensor \n* It can be integers, rational number, real numbers, natural numbers etc\n","3390d5ad":"## Linear Algebra","03870e65":"> The topic, concepts and codes that we will explore are relevant for machine learning and deep learning. Please attempt all exercise.","55407a77":"**Finding the determinant of a matrix**","6f9b42d9":"1. Excercise:\n    - Test - [2]","5ac52421":"**Finding the Inverse of a Matrix**","c0e7c2e8":"**Adding two matricies**","144f6068":"### **Summarizing Data**\nThe describe() function computes a summary of statistics pertaining to the DataFrame columns.","b5e35ba0":"Others functions you can explore","e3aa3545":"#### ** Finding the Transpose of Matrix**","3a88b05f":"## Linear Algebra, Probability and Statistics, Calculus","48b1123a":"** importing an external dataset **","e05220b0":"**Importation of necessary libraries needed.**\n* pandas is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.\n* NumPy is a module that supports vectors and matrices in an optimised way.\n* SciPy (pronounced \u201cSigh Pie\u201d) is a Python-based ecosystem of open-source software for mathematics (including statistics, science, and engineering.","dbc6567a":"### **std()**\nReturns the Bressel standard deviation of the numerical columns.","b1fd8429":"** Using Scipy to compute **\n\nWith scipy, you can make the computation much faster","f34bcc7f":"### **Solving a Matrix equation such as:**\n>  Let assume an equation * AX = B*\n \n *A and B is a matrix*\n\n>  How do we find the value of X"}}