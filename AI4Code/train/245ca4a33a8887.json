{"cell_type":{"75ea1b0f":"code","b839c217":"code","0d1e837e":"code","aa54c66b":"code","835388f9":"code","b45ab8e8":"code","5e0ddbc0":"code","ad2b34e7":"code","d323cdca":"code","4290452c":"code","3093ba8d":"code","31906192":"code","109caea5":"code","7137b0d9":"code","1b699773":"code","9cb25c50":"code","368e1791":"code","5098d557":"code","1ee77f81":"code","900fe7f3":"code","968f331f":"code","ef583dae":"code","afe556ca":"code","fc3441ca":"code","c1289d04":"code","295cb1ef":"code","a462412d":"code","978e9b03":"code","cc4031a7":"code","4d9e1eb2":"code","ae4b22f2":"code","4e8259de":"code","fc514d1b":"code","cbec248b":"code","3f616c71":"code","1427a1c4":"code","b364176b":"code","95988f36":"code","8c5f0ca0":"code","f094ffbd":"code","2a107c1b":"code","598458ee":"code","6bd9c694":"code","1e8c2e99":"code","66a60aff":"markdown","7b1811d2":"markdown","df705fe4":"markdown","5379c68c":"markdown","b3e70098":"markdown","b09d1bc0":"markdown"},"source":{"75ea1b0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b839c217":"import sys\nimport nltk\nimport sklearn\nimport pandas\nimport numpy\nprint('Python: {}'.format(sys.version))\nprint('NLTK: {}'.format(nltk.__version__))\nprint('Scikit-learn: {}'.format(sklearn.__version__))\nprint('Pandas: {}'.format(pandas.__version__))\nprint('Numpy: {}'.format(numpy.__version__))","0d1e837e":"## import pandas and numpy \nimport pandas as pd\nimport numpy as np","aa54c66b":"# load the dataset of SMS messages\ndf = pd.read_table('..\/input\/SMSSpamCollection', header=None, encoding='utf-8') # don't use latin-1","835388f9":"df.info()","b45ab8e8":"df.describe() ## describe the data\n## i am explaining the data, it has two columns and 5572 rows. Every msg is either Ham or Spam. So it has two unique values.","5e0ddbc0":"print(df.shape)\n#show some data from the top of dataset \nprint(df.head())","ad2b34e7":"print(df.head()[0])\nprint(df.head()[1])","d323cdca":"df.columns","4290452c":"df[1][2]","3093ba8d":"# check class distribution\nclasses = df[0]\nprint(classes.value_counts())","31906192":"from sklearn.preprocessing import LabelEncoder\n# so convert spam to 1 and ham tabso 0\nencoder = LabelEncoder()\ny = encoder.fit_transform(classes)\n","109caea5":"# see what changes are made by the label encoder\n# list(y)\n# for i in y:\n#     print(i, end =\" \")\nprint(y)\nprint(type(y))","7137b0d9":"text_messages = df[1]\nprint(text_messages[:10])","1b699773":"# Replace email addresses with 'email'\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = text_messages.str.replace(r'^.+@[^\\.].*\\.[a-z]{2,}$',\n                                 'emailaddress')\n# Replace URLs with 'webaddress'\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = processed.str.replace(r'^http\\:\/\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\/\\S*)?$',\n                                  'webaddress')\n# Replace money symbols with 'moneysymb' (\u00a3 can by typed with ALT key + 156)\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = processed.str.replace(r'\u00a3|\\$', 'moneysymb')\n    \n# Replace 10 digit phone numbers (formats include paranthesis, spaces, no spaces, dashes) with 'phonenumber'\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = processed.str.replace(r'^\\(?[\\d]{3}\\)?[\\s-]?[\\d]{3}[\\s-]?[\\d]{4}$',\n                                  'phonenumbr')\n# Replace numbers with 'numbr'\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = processed.str.replace(r'\\d+(\\.\\d+)?', 'numbr')\n# Remove punctuation\n# you can use any regex expression they are basically taken from the wikipedia\n\nprocessed = processed.str.replace(r'[^\\w\\d\\s]', ' ')\n\n# Replace whitespace between terms with a single space\nprocessed = processed.str.replace(r'\\s+', ' ')\n\n# Remove leading and trailing whitespace\nprocessed = processed.str.replace(r'^\\s+|\\s+?$', '')\n","9cb25c50":"#as HORse horse Horse are same SO conver are letters to lower case\nprocessed = processed.str.lower()","368e1791":"processed # here is the data after proessing....","5098d557":"# Now you have to remove stopwords, these are common words, use in every sentence and make nosense in prediction\nnltk.download('stopwords')","1ee77f81":"from nltk.corpus import stopwords\ns = stopwords.words('english')\n#print(set(s))","900fe7f3":"processed = processed.apply(lambda x: ' '.join(\n    term for term in x.split() if term not in s))","968f331f":"# Remove word stems using a Porter stemmer\nps = nltk.PorterStemmer() # it removes the synonyms and similar sounding words..\n\nprocessed = processed.apply(lambda x: ' '.join(\n    ps.stem(term) for term in x.split()))","ef583dae":"# for i in processed:\n#     print(i) # just checking everything at this point\n    # here you can see effects of stemming\n    # crazy -> crazi\n    #early, earli, earlii -> earli","afe556ca":"nltk.download('punkt')","fc3441ca":"from nltk.tokenize import word_tokenize\n","c1289d04":"all_words = []\n\nfor message in processed:\n    words = word_tokenize(message)\n    for w in words:\n        all_words.append(w)\n\nall_words = nltk.FreqDist(all_words)","295cb1ef":"print(len(all_words))\nprint(all_words.most_common(100)) ## most common 100 words in bag of words","a462412d":"#visualizing the most common 20 words ...\n\nimport matplotlib.pyplot as plt\nx = []\ner = []\nfor i in all_words.most_common(20):\n    x.append(i[0])\nfor i in all_words.most_common(20):\n    er.append(i[1])\n\nplt.figure(figsize=(60, 8))\nplt.subplot(131)\nplt.xlabel(\"FREQUENCY\")\nplt.ylabel(\"WORDS\")\nplt.title(\"20 most common words from bag of words\")\nplt.bar(x, er)","978e9b03":"# now word featured\nword_features = list(all_words.keys()) #using all most common words as features to increase accuracy","cc4031a7":"def find_features(msg):\n    words = word_tokenize(msg)\n    features = {}\n    for word in word_features:\n        features[word] = (word in words)\n    return features","4d9e1eb2":"messages = zip(processed, y)","ae4b22f2":"type(processed)\nprint(y[0:10])\nprint(processed[5])","4e8259de":"# Now lets do it for all the messages \n# just merge the processed data and label Encoder o\/p together\nmessages = zip(processed, y)\n\n# define a seed for reproducibility\nseed = 1\nnp.random.seed = seed\n#np.random.shuffle(messages)\n\n# call find_features function for each SMS message\nfeaturesets = [(find_features(text), label) for (text, label) in messages]","fc514d1b":"from sklearn import model_selection\ntraining, testing = model_selection.train_test_split(featuresets, test_size = 0.20, random_state = seed)","cbec248b":"print(len(training)) # length of training data\nprint(len(testing)) #length oftesting data","3f616c71":"from nltk.classify.scikitlearn import SklearnClassifier","1427a1c4":"#SVM classsifier (support vector machine)\nfrom sklearn.svm import SVC\nmodel1 = SklearnClassifier(SVC(kernel = 'linear'))\nmodel1.train(training)","b364176b":"accuracy = nltk.classify.accuracy(model1, testing)","95988f36":"#import math\nprint(\"SVC Classifier accuracy {}%\".format(round(accuracy * 100,4)))","8c5f0ca0":"from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\ntxt_features, labels = zip(*testing)\nprediction = model1.classify_many(txt_features)\nprint(classification_report(prediction,labels))","f094ffbd":"import pickle\nPkl_Filename = \"Spam_Model.pkl\"  \nwith open(Pkl_Filename, 'wb') as file:  \n    pickle.dump(model1, file)","2a107c1b":"with open(Pkl_Filename, 'rb') as file:  \n    my_model = pickle.load(file)\n\nmy_model","598458ee":"#saved_model = pickle.dumps(model1) ","6bd9c694":"#model1 = pickle.loads(saved_model) ","1e8c2e99":"#model1.classify_many(txt_features)","66a60aff":"## bag-of-words","7b1811d2":"## Importing neccessary Libraries","df705fe4":"## Processing the data","5379c68c":"So here are 4825 ham messages and 747 spam msg in data.","b3e70098":"### Loading the dataset\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/sms+spam+collection\n","b09d1bc0":"## ***Now there are some common things in msg, that are phone numbers, email, websites that are need to be replaced by the common words or need to be removed, because they makes no sense here***"}}