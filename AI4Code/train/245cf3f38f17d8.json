{"cell_type":{"2ae235c5":"code","786df0ef":"code","4acf81d0":"code","1b9a106d":"code","8e392b9a":"code","1cb283f4":"code","8c79e172":"code","74e07431":"code","8e894003":"code","b3e34251":"code","0a5384b2":"code","84b24f72":"code","4ac0ec17":"code","3bfdbc86":"code","6132066b":"code","7d6c416f":"code","60350605":"code","0a22310c":"code","cc757b89":"code","275f7924":"code","7dd1444d":"code","da028624":"code","72ae8b8f":"code","83b5f838":"code","303f39e3":"code","945b68f5":"code","bcbab5d5":"code","576accc5":"code","67a548d3":"code","ab3ff61a":"code","cf9c6360":"code","3141662f":"code","7b2d5421":"code","e11e6e4e":"code","d500240d":"code","e5105bed":"code","41b81d99":"code","f9806de9":"code","d1d3dafa":"code","64a385bf":"code","b82df89c":"code","e8066c93":"code","5c82050e":"code","8561f071":"code","37c8d23c":"code","b88e4438":"markdown","86f2592e":"markdown","8bd51cd8":"markdown","3e76e740":"markdown","e1ab6347":"markdown","30322b12":"markdown","26577fd0":"markdown","519aa270":"markdown","3f7349ea":"markdown","aa2ccd13":"markdown","88a2ca69":"markdown","6df43d37":"markdown","01ba3c95":"markdown","d0cfd659":"markdown","600a748c":"markdown","c97d2887":"markdown","ffcb20a3":"markdown","46b009a8":"markdown","6ff6ffd1":"markdown"},"source":{"2ae235c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","786df0ef":"!pip install datatable","4acf81d0":"%%time\n\n# reading the dataset from raw csv file\nimport datatable as dt\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n#df = dt.fread(\"..\/input\/riiid-test-answer-prediction\/train.csv\").to_pandas()\ndf = pd.read_csv('..\/input\/riiid-test-answer-prediction\/train.csv',nrows = 1000000)\nprint(df.shape)","1b9a106d":"df.head(10)","8e392b9a":"df.info()","1cb283f4":"d = {'row_id':'int64',\n 'timestamp':'int64',\n 'user_id':'object',\n 'content_id':'object',\n 'content_type_id':'int64',\n 'task_container_id':'object',\n 'user_answer':'object',\n 'answered_correctly':'int64',\n 'prior_question_elapsed_time':'float64',\n 'prior_question_had_explanation':'object'}\n","8c79e172":"df.head(100000).astype(d).describe(include='all')","74e07431":"user_profile = df[df['answered_correctly']!=-1].groupby(\n    'user_id',as_index = False\n    ).agg(age_as_learner = pd.NamedAgg(column = 'timestamp', aggfunc=max),\n          num_contents = pd.NamedAgg(column = 'content_id', aggfunc=pd.Series.nunique),\n          num_events = pd.NamedAgg(column = 'row_id', aggfunc = 'count'),\n          num_true_answers = pd.NamedAgg(column = 'answered_correctly', aggfunc = sum),\n          perc_true_answers = pd.NamedAgg(column = 'answered_correctly', aggfunc = 'mean'),\n          std_true_answers = pd.NamedAgg(column = 'answered_correctly', aggfunc = 'std'),\n          #skew_true_answers = pd.NamedAgg(column = 'answered_correctly', aggfunc = 'skew'),\n          avg_prior_question_elapsed_time = pd.NamedAgg(column = 'prior_question_elapsed_time', aggfunc = 'mean'),\n          std_prior_question_elapsed_time = pd.NamedAgg(column = 'prior_question_elapsed_time', aggfunc = 'std'),\n          )\nuser_profile['user_id'] = user_profile['user_id'].astype('object')\nuser_profile.age_as_learner \/=(60*60*24*1000*365)\nuser_profile.avg_prior_question_elapsed_time \/= 60*60*24\nuser_profile.std_prior_question_elapsed_time \/= 60*60*24\nprint('Number of Users: ', len(user_profile))\nuser_profile.describe()","8e894003":"pd.plotting.scatter_matrix(user_profile.select_dtypes(include='number'),alpha = 0.1, figsize = (30,30))","b3e34251":"n = len(df.content_type_id)\na,b = df.content_type_id.value_counts()\nprint('The number of lecture events is : {} ({}%)'.format(b,100*b\/n))\nprint('The number of question events is : {} ({}%)'.format(a,100*a\/n))","0a5384b2":"user_profile.sort_values(by='age_as_learner',ascending = False).head(10)","84b24f72":"user_profile.sort_values(by='num_contents',ascending = False).head(10)","4ac0ec17":"user_profile.sort_values(by='num_true_answers',ascending = False).head(10)","3bfdbc86":"user_profile[user_profile.std_true_answers.notnull()].sort_values(by='perc_true_answers',ascending = False).head(10)","6132066b":"#user_series = df.groupby(['user_id','timestamp']).agg({'answered_correctly':'sum','row_id':'count'})\n#user_series = user_series.groupby(level=0).agg({'answered_correctly':'cumsum','row_id':'cumsum'}).reset_index()\n#user_series['avg_correct'] = user_series.answered_correctly.div(user_series.row_id, axis = 0)\nuser_series","7d6c416f":"questions = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')#,nrows = 1000000)","60350605":"questions.head(10)","0a22310c":"questions.info()","cc757b89":"questions[questions.tags.isnull()]","275f7924":"dq = {\n    'question_id':'object',\n    'bundle_id':'object',\n    'correct_answer':'object',\n    'part':'object'\n}\n\nquestions.astype(dq).describe()","7dd1444d":"(questions.correct_answer.value_counts()\/len(questions)).plot.bar()","da028624":"(questions.part.value_counts()\/len(questions)).plot.bar()","72ae8b8f":"questions.fillna('-1', inplace = True)","83b5f838":"from collections import Counter\n\ntags = Counter(questions.tags.str.split(' ')[0])\nfor tag in questions.tags.str.split(' '):\n    try:\n        tags.update(tag)\n    except:\n        print('Found exception: tags field equal to ', tag)","303f39e3":"tags = pd.DataFrame.from_dict(dict(tags),orient='index').reset_index().sort_values(by=0, ascending = False)\ntags.columns = ['tag','count_tag']","945b68f5":"tags.head(20).plot.bar()","bcbab5d5":"from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\n\ntags_of_parts = pd.DataFrame(mlb.fit_transform(questions.tags.str.split(' ')), columns = mlb.classes_, index = questions.question_id)","576accc5":"tags_of_parts.info()","67a548d3":"test = pd.merge(questions[['question_id','part']],tags_of_parts, on = 'question_id').drop(['question_id'], axis = 1).groupby('part').sum()","ab3ff61a":"import seaborn as sns\n\nf, ax = plt.subplots(figsize=(34, 5))\n\nax = sns.heatmap(test)","cf9c6360":"test.reset_index().melt(id_vars = ['part'], var_name = 'tag',value_name = 'count').astype('int64')","3141662f":"import nltk, re\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.cluster import KMeans\n\n\ndef tokenize_and_stem(text):\n    tokens = [word for sent in nltk.sent_tokenize(text) for word in nltk.word_tokenize(sent)]\n    filtered_tokens = []\n    for token in tokens:\n        if re.search('[0-9]', token):\n            filtered_tokens.append(token)\n    return filtered_tokens\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#define vectorizer parameters\ntfidf_vectorizer = TfidfVectorizer(max_df=1.0, max_features=200000,\n                                 min_df=0.0,use_idf=True, tokenizer=tokenize_and_stem, ngram_range=(1,3))\n\n%time tfidf_matrix = tfidf_vectorizer.fit_transform(questions.tags) #fit the vectorizer to synopses\n\nprint(tfidf_matrix.shape)\n\ntags = tfidf_vectorizer.get_feature_names()\n\n\ndist = 1 - cosine_similarity(tfidf_matrix)","7b2d5421":"sse = {}\nfor k in range(2,30,3):\n    km = KMeans(n_clusters=k)\n    #print('Number of cluster: {}'.format(k))\n    #%time \n    km.fit(tfidf_matrix)\n    sse[k] = km.inertia_\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"SSE\")\nplt.show()\nsse.keys()","e11e6e4e":"NUM_CLUSTERS = 11\n\n\nkm = KMeans(n_clusters=NUM_CLUSTERS)\n\n%time km.fit(tfidf_matrix)\n\nclusters = km.labels_.tolist()\n\nn_words = 5\n\norder_centroids = km.cluster_centers_.argsort()[:, ::-1] \n\nfor i in range(NUM_CLUSTERS):\n    print(\"Cluster %d words:\" % i, end='')\n    \n    for ind in order_centroids[i, :n_words]: \n        print(' %s' % tags[ind], end=' ')\n    print() #add whitespace\n    \nquestions['kmean_cluster'] = clusters","d500240d":"questions.head(10)","e5105bed":"dq['kmean_cluster']='object'\nquestions.astype(dq).info()","41b81d99":"questions.kmean_cluster.value_counts()\/len(questions)","f9806de9":"(pd.pivot_table(\n    questions, \n    values = 'question_id', \n    index = ['kmean_cluster'], \n    columns = ['part'],aggfunc='count')\n).fillna(0).astype('int64')","d1d3dafa":"questions.groupby('bundle_id').agg({\n    'question_id':'count',\n    'part':pd.Series.nunique,\n    'kmean_cluster':pd.Series.nunique}).describe()","64a385bf":"(questions.groupby('bundle_id').agg({\n    'question_id':'count',\n    'part':pd.Series.nunique,\n    'kmean_cluster':pd.Series.nunique})[['question_id','kmean_cluster']]).hist()","b82df89c":"lectures = pd.read_csv('..\/input\/riiid-test-answer-prediction\/lectures.csv')#,nrows = 1000000)\nprint(lectures.info())\nlectures.head(10)","e8066c93":"print(pd.pivot_table(\n    lectures,\n    values = 'lecture_id', \n    index = ['type_of'], \n    columns = ['part'],aggfunc='count'    \n).fillna(0))\nprint()\n(lectures.part.value_counts()).plot.bar()","5c82050e":"(lectures.type_of.value_counts()).plot.bar()","8561f071":"print(lectures.groupby('tag').agg({'lecture_id':'count'}).sort_values(by='lecture_id',ascending=False)[:25].plot.bar())","37c8d23c":"print(lectures.groupby('tag').agg({'lecture_id':'count'}).hist())","b88e4438":"## Lectures\n\n> lectures.csv: metadata for the lectures watched by users as they progress in their education.\n>\n> lecture_id: foreign key for the train\/test content_id column, when the content type is lecture (1).\n> part: top level category code for the lecture.\n> tag: one tag codes for the lecture. The meaning of the tags will not be provided, but these codes are sufficient for clustering the lectures together.\n> type_of: brief description of the core purpose of the lecture\n\nIts content is similar to questions.csv. We will provide similar analysis.","86f2592e":"### To Do:\n\n* Lectures have impact on performances? explanations too?\n* Build timeseries to track students performance\n* Track impact of lectures on students' performance","8bd51cd8":"The questions' answers seems to be fair and balanced so that if a student use choosing answers randomly is not a good strategy. ","3e76e740":"Which is the relationship with part field?","e1ab6347":"Let's see who are the students who have answered more questions","30322b12":"I've spent a bit of time to change the questions.tags structure in a proper manner. At the end I've found my strategy thanks to [this post on brandonrose.org](http:\/\/brandonrose.org\/clustering?ref=dzone#K-means-clustering).","26577fd0":"Which are the most common tags?","519aa270":"Every bundle is associated to a single part, while at least the 75% is composed by a single question or associated to a single cluster.","3f7349ea":"We try to detect students performance with question type content. For this reason, we exclude lectures.","aa2ccd13":"We now study the tags. Remember to fill the na values.","88a2ca69":"Be aware there's a troublesome missing tag value. ","6df43d37":"How is bundle related to the other attributes?","01ba3c95":"Using the elbow method, it seems that 11 or 23 are good candidates. However, I prefert to fix the number of cluster to 11 and reduce the number of values make the following analysis much simpler to read. \n\nBe aware that results could slightly change at every run. ","d0cfd659":"This is a cool finding even if the plot is not the best one probably. It seems there are tags strongly related to specific parts. ","600a748c":"## Questions\n\n>* question_id: foreign key for the train\/test content_id column, when the content type is question (0).\n>* bundle_id: code for which questions are served together.\n\n*The  bundle_id key should be added to the train.csv dataset.*\n\n>* correct_answer: the answer to the question. Can be compared with the train user_answer column to check if the user was right.\n>* part: the relevant section of the TOEIC test.\n>* tags: one or more detailed tag codes for the question. The meaning of the tags will not be provided, but these codes are sufficient for clustering the questions together.\n\n*This tags field seems interesting.*","c97d2887":"# Introduction\n\nIn this notebook I want to provide an explaration data analysis. We retrieve the data from the train.csv file and its connection with questions.csv and lectures.csv files. \nIt seems they are some kind of database extractions with a \"star\" schema model. \n\n## Train.csv\n\nFrom the challange description, we get the following infos:\n\n>* row_id: ID code for the row. \n\n*It is an index column for the dataset*\n\n>* timestamp: the time between this user interaction and the first event completion from that user. \n\n*I should check if it is in milliseconds.*\n\n>* user_id: ID code for the user. \n>* content_id: ID code for the user interaction\n>* content_type_id: 0 if the event was a question being posed to the user, 1 if the event was the user watching a lecture.\n\n*The content_type_id can be used as an integer even if it is an id. I can use it as one-hot column for lectures.*\n\n>* task_container_id: Id code for the batch of questions or lectures. For example, a user might see three questions in a row before seeing the explanations for any of them. Those three would all share a task_container_id.\n>* user_answer: the user's answer to the question, if any. Read -1 as null, for lectures.\n>* answered_correctly: if the user responded correctly. Read -1 as null, for lectures.\n>* prior_question_elapsed_time: The average time it took a user to answer each question in the previous question bundle, ignoring any lectures in between. Is null for a user's first question bundle or lecture. Note that the time is the average time a user took to solve each question in the previous bundle.\n\n*I should again check if it is in milliseconds.*\n\n>* prior_question_had_explanation: (bool) Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Typically the first several questions a user sees were part of an onboarding diagnostic test where they did not get any feedback.\n\nThe first step is to understand what we have in the Train dataset.","ffcb20a3":"### To Do:\n\n* Cluster of Tags (LDA approach)\n* Sankey Plot of Tags and Parts\n* Improve charts layout","46b009a8":"I'm not sure but it seems that timestamp is in milliseconds while the elapsed time is in seconds. I rescale it so that we get respectively years and days. \nIn the following we get a scatter matrix to have an overall picture of our dataset and hidden patterns. ","6ff6ffd1":"Let's see who are the \"oldest\" students and how they are characterized"}}