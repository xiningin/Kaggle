{"cell_type":{"13e60bf3":"code","8529e498":"code","60b17852":"code","a7394265":"code","ad625aa4":"code","ec9835e8":"code","3406b340":"code","0b6a11c0":"code","b529b8e2":"code","c90c7923":"code","77014aa7":"code","08f007d7":"code","33ceba87":"code","0181dfd3":"code","7d860f87":"code","65862f36":"code","de5a650f":"code","0771973a":"code","abed53b5":"code","6ca0b309":"code","5aab86e9":"code","f1011a65":"code","d7e3d7b7":"code","fdaf6ac0":"code","3445e6b8":"markdown","98eb47d2":"markdown","9e725394":"markdown","254590ec":"markdown","3552d8e9":"markdown","f5db0919":"markdown","4740e2b1":"markdown","35b493c3":"markdown","14b592f9":"markdown","ef5fb88b":"markdown","3329f7a3":"markdown","ad799bbd":"markdown","dd167cb3":"markdown","51aca581":"markdown","a491f00b":"markdown","17e05d21":"markdown","53d980f3":"markdown","c830bdde":"markdown","1d3a35bc":"markdown","03f4773a":"markdown","f121ad0b":"markdown","023b9992":"markdown","39f84f90":"markdown","64100fda":"markdown","7275c9fb":"markdown","d1e9b7f7":"markdown","48c628f3":"markdown","c54e3651":"markdown","f4ca8756":"markdown","0038dcd2":"markdown"},"source":{"13e60bf3":"import pandas as pd\nimport numpy as np\nfrom sqlalchemy import create_engine\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8529e498":"df = pd.read_csv('..\/\/input\/pokemon\/Pokemon.csv')\n# df.head()","60b17852":"engine = create_engine('sqlite:\/\/', echo=False)\n\ndf.to_sql('pokemon', engine, if_exists='replace', index=False)","a7394265":"df.info()","ad625aa4":"df.columns = df.columns\\\n                .str.replace(' ', '')\\\n                .str.replace('.', '')\\\n                .str.replace('#', 'NdexID')\n\nprint(df.columns)\n\n# replace SQL database:\ndf.to_sql('pokemon', engine, if_exists='replace', index=False)","ec9835e8":"pd.read_sql_query(\"\"\"SELECT COUNT(*) row_count \n                     FROM pokemon\"\"\", engine)","3406b340":"pd.read_sql_query(\"\"\"SELECT * \n                     FROM pokemon \n                     LIMIT 5\"\"\", engine)","0b6a11c0":"df.isna().sum()","b529b8e2":"df[df.isnull().any(axis=1)].sort_values('Name')","c90c7923":"pd.read_sql_query(\"\"\"SELECT * \n                     FROM pokemon\n                     WHERE Type1 = '???'\n                         OR Type1 LIKE '%glitch%'\n                         OR Name = 'Arceus'\"\"\", engine)","77014aa7":"pd.read_sql_query(\"\"\"SELECT name,\n                         COUNT(*) count\n                     FROM pokemon\n                     GROUP BY 1\n                     HAVING count > 1\"\"\", engine)","08f007d7":"df['TypeConcat'] = df[['Type1', 'Type2']]\\\n                    .apply(lambda x:\n                           '{}-{}'.format(x[0],x[1])\n                           if pd.notnull(x[1])\n                           else x[0],\n                           axis=1)\n\ndf.TypeConcat","33ceba87":"df.to_sql('pokemon', engine, if_exists='replace', index=False)","0181dfd3":"pd.read_sql_query(\"\"\"SELECT TypeConcat Type,\n                         ROUND(\n                             AVG(Total), 1\n                         ) AvgTotalStats,\n                         COUNT(*) Count\n                     FROM pokemon\n                     GROUP BY 1\n                     ORDER BY 2 DESC\n                     LIMIT 10\"\"\", engine)","7d860f87":"pd.read_sql_query(\"\"\"SELECT TypeConcat Type,\n                         ROUND(\n                             AVG(Total), 1\n                         ) AvgTotalStats,\n                         COUNT(*) Count\n                     FROM pokemon\n                     WHERE Legendary = 0\n                         AND Name NOT LIKE '%Mega %'\n                     GROUP BY 1\n                     ORDER BY 2 DESC\n                     LIMIT 10\"\"\", engine)","65862f36":"strongest_type = pd.read_sql_query(\"\"\"\n                    SELECT Type1,\n                        ROUND(\n                            AVG(total), 1\n                        ) AvgTotalStats,\n                        COUNT(*) Count\n                    FROM pokemon\n                    GROUP BY 1 \n                    ORDER BY 2 DESC\"\"\", engine)\nstrongest_type","de5a650f":"plt.figure(figsize=(15,8))\n\ntype1_stats = sns.boxplot(data=df, x='Type1', y='Total')\ntype1_stats.axes.set_title('Total Stats for Primary Types', fontsize=15)\ntype1_stats.set_xlabel('Primary Type', fontsize=15)\ntype1_stats.set_ylabel('Total Stats', fontsize=15)\ntype1_stats.tick_params(labelsize=15)\n\nplt.tight_layout()\n\nplt.show()","0771973a":"pd.read_sql_query(\"\"\"SELECT Generation,\n                         ROUND(\n                             AVG(total), 1\n                         ) AvgTotalStats\n                     FROM pokemon\n                     GROUP BY 1\n                     ORDER BY 2 DESC\"\"\", engine)","abed53b5":"plt.clf()\n\nsns.violinplot(x=df['Generation'], y=df['Total'])\n\nplt.show()","6ca0b309":"pd.read_sql_query(\"\"\"SELECT Generation,\n                         ROUND(\n                             AVG(total), 1\n                         ) AvgTotalStats\n                     FROM pokemon\n                     WHERE Name NOT LIKE '%Mega %'\n                     GROUP BY 1\n                     ORDER BY 2 DESC\"\"\", engine)","5aab86e9":"pd.read_sql_query(\"\"\"SELECT *\n                     FROM (\n                         SELECT\n                             Generation,\n                             RANK() OVER (\n                                 PARTITION BY Generation\n                                 ORDER BY Total DESC\n                             ) Rank,\n                             Name,\n                             CASE \n                                 WHEN Legendary = 1 THEN \"Yes\" ELSE \"No\" \n                             END Legendary,\n                             Total,\n                             HP,\n                             Attack Atk,\n                             Defense Def,\n                             SpAtk,\n                             SpDef,\n                             Speed\n                         FROM pokemon\n                     )\n                     WHERE Rank <= 3\n                     ORDER BY Generation, Rank\"\"\", engine)","f1011a65":"pd.read_sql_query(\"\"\"SELECT *\n                     FROM (\n                         SELECT\n                             Generation,\n                             RANK() OVER (\n                                 PARTITION BY Generation\n                                 ORDER BY Total DESC\n                             ) Rank,\n                             Name,\n                             CASE \n                                 WHEN Legendary = 1 THEN \"Yes\" ELSE \"No\" \n                             END Legendary,\n                             Total,\n                             HP,\n                             Attack Atk,\n                             Defense Def,\n                             SpAtk,\n                             SpDef,\n                             Speed\n                         FROM pokemon\n                         WHERE Name NOT LIKE '%Mega %'\n                     )\n                     WHERE Rank <= 3\n                     ORDER BY Generation, Rank\"\"\", engine)","d7e3d7b7":"pd.read_sql_query(\"\"\"SELECT *\n                     FROM (\n                         SELECT\n                             Generation,\n                             RANK() OVER (\n                                 PARTITION BY Generation\n                                 ORDER BY Total DESC\n                             ) Rank,\n                             Name,\n                             Total,\n                             HP,\n                             Attack Atk,\n                             Defense Def,\n                             SpAtk,\n                             SpDef,\n                             Speed\n                         FROM pokemon\n                         WHERE Legendary = 0\n                             AND Name NOT LIKE '%Mega %'\n                     )\n                     WHERE Rank <= 3\n                     ORDER BY Generation, Rank\"\"\", engine)","fdaf6ac0":"pd.read_sql_query(\"\"\"SELECT Generation,\n                         ROUND(AVG(Total), 1) AvgTotalStats,\n                         ROUND(AVG(HP), 1) AvgHP,\n                         ROUND(AVG(Attack), 1) AvgAtk,\n                         ROUND(AVG(Defense), 1) AvgDef,\n                         ROUND(AVG(SpAtk), 1) AvgSpAtk,\n                         ROUND(AVG(SpDef), 1) AvgSpDef,\n                         ROUND(AVG(Speed), 1) AvgSpeed,\n                         COUNT(*) Count\n                     FROM pokemon\n                     WHERE Legendary = 1\n                         AND Name NOT LIKE '%Mega %'\n                     GROUP BY 1\n                     ORDER BY 2 DESC\"\"\", engine)","3445e6b8":"Number of rows:","98eb47d2":"### Reading in CSV & creating SQL database","9e725394":"#### Have Pokemons become more powerful with newer Generations?","254590ec":"## Inspecting & Cleaning","3552d8e9":"### Duplication\nChecking for duplicated Pokemon names:","f5db0919":"Excluding Legendary Pokemons and Mega Evolutions:","4740e2b1":"Note that the sample size is quite small for each concatenated type.","35b493c3":"#### Top 10 Strongest Pokemon types - Primary & Secondary Types combined","14b592f9":"Excluding Mega Evolutions:","ef5fb88b":"Note that in Generation 6, \"Mega Evolutions\" were introduced, but are recorded as earlier Generations in the `pokemon` dataset here. \n\nMega Evolved Pokemons have +100 `Total` stat points and could overestimate earlier Generations' Pokemon stats.","3329f7a3":"## Setup\n### Importing packages","ad799bbd":"Excluding Mega Evolution Pokemons:","dd167cb3":"### Missing","51aca581":"Replacing existing SQL database:","a491f00b":"# Pokemon EDA\nUsing SQL & Python to conduct Exploratory Data Analysis (EDA) on Pokemon data ([Kaggle](https:\/\/www.kaggle.com\/abcsds\/pokemon)).\n\n**GitHub: [henrylin03](https:\/\/github.com\/henrylin03\/)**\n\n![Pokemons](https:\/\/external-preview.redd.it\/NXrR_qnMRHrwUoE8pbeiX26fq4mNctFsmdEghRVApSQ.jpg?auto=webp&s=b18e1b0df84f417036d4e1ac0affb6245a071ebf)","17e05d21":"#### Which generation had the strongest Legendary Pokemons?","53d980f3":"#### Top 3 Strongest Pokemons (by `Total` stats) of each generation","c830bdde":"### Concatenating Primary & Secondary Types, where available\nFrom above, some Pokemons have a secondary type (`Type2`), which is an important attribute that differentiate them from Pokemons with the same primary type (`Type1`) in terms of available moves and weaknesses.","1d3a35bc":"Visualising distribution of `Total` stats for Primary Types:","03f4773a":"#### By Primary Type only","f121ad0b":"Visualised:","023b9992":"### Pokemon types","39f84f90":"### Generations","64100fda":"Excluding Mega Evolutions:","7275c9fb":"Excluding Legendary & Mega Evolution Pokemons:","d1e9b7f7":"Cleaning column names by:\n1. Removing spaces and dots, and\n2. Describing \"#\" as the \"National Pokedex number\"","48c628f3":"## Insights","c54e3651":"Because `Type 2` represents secondary types of Pokemons, with many Pokemons only being assigned a primary type (`Type 1`), this value cannot be imputed. A Pokemon's secondary type (if any) is an important attribute for the Pokemon's moves, and thus should not be removed.","f4ca8756":"First 5 rows:","0038dcd2":"Finding 'Glitch' type or '???' type Pokemons (e.g. Arceus):"}}