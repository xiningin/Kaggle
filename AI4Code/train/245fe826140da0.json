{"cell_type":{"3edc9f66":"code","4eca34d6":"code","bf3f18a0":"code","47f56038":"code","98d5af0b":"code","14663765":"code","79086fa2":"code","4ad6652b":"code","8e4e6bf9":"code","d77c9b0c":"code","9718d3ec":"code","4822980e":"code","f06f78f3":"code","b1d7e9ba":"code","3410c6de":"code","2b50ef67":"code","b06d3710":"code","d23b7e24":"code","ea831071":"code","8eeb6631":"code","34f9c582":"code","6bb3f787":"code","51e8b9fc":"code","ec707426":"code","5a1ce177":"code","39defb3e":"code","198203ef":"code","ce2d98f8":"code","33952daa":"code","51f07002":"code","eee93fb1":"code","8cdc96eb":"code","e78f7b3a":"code","080c5e01":"code","14ac898f":"code","f57f8ce4":"code","e913a417":"code","14f60816":"code","3444ac23":"code","c0365d5d":"code","4f7d354e":"code","b848e12d":"code","f8d9ce5a":"code","b185adf8":"code","15578b3e":"code","bce6fce8":"code","d2f82b38":"code","c19e1782":"code","bc533609":"code","a71b19df":"code","9a05809c":"code","3b148ecf":"code","79a2d6b5":"code","52bbc1df":"code","baaae5b3":"code","9d6dd4b7":"markdown","2031a9fc":"markdown","f25654fa":"markdown","937d1aaf":"markdown","24dc21f3":"markdown","19b8f492":"markdown","01b329dc":"markdown","6cf7068c":"markdown","811c55df":"markdown","e018a879":"markdown","d0b5a581":"markdown","fe1e9d3f":"markdown","c82dc305":"markdown","2189e577":"markdown","0d4ff8e0":"markdown","a58a8998":"markdown","21a6ba1c":"markdown","95a505c3":"markdown","2b7be770":"markdown","67412793":"markdown","d2c25c19":"markdown","be6d5c0c":"markdown","71017e57":"markdown","22dfa45e":"markdown","b4e30cad":"markdown","13b900e2":"markdown","d41b5eb5":"markdown","9a30552f":"markdown","6ac97f40":"markdown","f095f379":"markdown","722c457a":"markdown","ca423705":"markdown","62fc43cd":"markdown","2618540b":"markdown"},"source":{"3edc9f66":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4eca34d6":"# Chart drawing init\nimport plotly as py\nimport plotly.io as pio\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n# Show charts when running kernel\ninit_notebook_mode(connected=True)\n\n# Change default background color for all visualizations\nlayout=go.Layout(paper_bgcolor='rgba(255,255,2555,0.5)', plot_bgcolor='rgba(250,250,250,0.8)', autosize=True)#, width=1200, height=800)\nfig = go.Figure(layout=layout)\ntemplated_fig = pio.to_templated(fig)\npio.templates['my_template'] = templated_fig.layout.template\npio.templates.default = 'my_template'\n\n\nimport plotly.io as pio","bf3f18a0":"distance = lambda x1, y1, x2, y2:np.sqrt(np.abs(x1-x2)**2 + np.abs(y1-y2)**2)","47f56038":"files = ['..\/input\/hashcode-drone-delivery\/busy_day.in']\n\n\nfile_name = files[0]\nwith open(file_name) as file:\n    lines = file.read().splitlines()\nline_list = [[int(n) for  n in ll.split()] for ll in lines]\n\n#line_list","98d5af0b":"# Params\nR = line_list[0][0]\nC = line_list[0][1]\nn_drones = line_list[0][2]\nT = line_list[0][3]\npayload = line_list[0][4]\n\nprint(\"Periods : \", T)\nprint(\"Payload : \", payload)\nprint(\"Drones : \", n_drones)\nprint(\"Grid : (\", R,\",\", C, ')')\n\n# Products\nn_products = line_list[1][0]\nproduct_weight = line_list[2]\nassert n_products == len(product_weight)\n\nprint(\"Product types : \", n_products)\n\n# Warehouses\nn_warehouses = line_list[3][0]\n\nwarehouses = []\nwh_stocks = []\n\nprint(\"There is \", n_warehouses, \" warehouses for \", T, \" rounds\")\n\nfor i in np.arange(4, 2*(n_warehouses) + 4, 2):\n    warehouses.append( (line_list[i][0], line_list[i][1]) )\n    wh_stocks.append( line_list[i+1] )\n    end_wh = i+2\n    \n# print(\"end \", end_wh)\n\nassert len(warehouses) == n_warehouses\nassert len(warehouses) == len(wh_stocks)","14663765":"# Orders\norder_startline = 2*(n_warehouses+1)+2 # last list of wh + 2 line \nprint(end_wh, order_startline)\nassert order_startline == end_wh\n\nn_order = line_list[end_wh][0]\nprint(\"There is : \", n_order, \" orders\")\n\norder_delivery = []\norder_n_items = []\norder_quantity_items = []\n\nprint(3*(n_order) + (order_startline+1))\n\nend_order = 3*(n_order) + (order_startline+1)\n\nfor i in np.arange(order_startline+1, 3*(n_order) + (order_startline+1), 3):  \n    order_delivery.append(line_list[i])\n    order_n_items.append(line_list[i+1][0])\n    order_quantity_items.append(line_list[i+2])\n    end_o = i+3\n    \n\nprint(len(order_quantity_items))\nassert n_order == len(order_n_items)\nassert n_order == len(order_delivery)\nassert n_order == len(order_quantity_items)\n\nassert order_n_items[32] == len(order_quantity_items[32])","79086fa2":"print(\"Information : \")\nprint(\"Grid : (\", R, \",\", C, \")\")\nprint(\"Drones : \", n_drones, \" with payload \", payload)\nprint(\"Warehouses : \", n_warehouses)\nprint(\"orders : \", n_order)","4ad6652b":"# 2 dataframes : orders and warehouses","8e4e6bf9":"d_wh = {\n    \"warehouse\" : [i for i in range(0, n_warehouses)],\n    \"x\" : [i[0] for i in warehouses],\n    \"y\" : [i[1] for i in warehouses],\n}\n\n\n# init\nfor i in range(n_products):\n    p_id = 'prod_'+str(i)\n    d_wh[p_id] = []\n\nfor j in range(n_warehouses):\n    for i in range(n_products):\n        p_id = 'prod_'+str(i)\n        d_wh[p_id].append(wh_stocks[j][i])\n\ndf_wh = pd.DataFrame(d_wh)\n\ndf_wh.head()","d77c9b0c":"d_order = {\n    \"order\" :        [i for i in range(0, n_order)],\n    \"items\" :        order_n_items,\n    \"total_weight\" : [0]*n_order,\n    \"x\":             [order[0] for order in order_delivery],\n    \"y\" :            [order[1] for order in order_delivery],\n}\n\n# init\nfor i in range(n_products):\n    p_id = 'prod_'+str(i)\n    d_order[p_id] = [0]*n_order\n\nfor j in range(0, n_warehouses):\n    d_order[\"wh_\"+str(j)] = [0]*n_order\n    d_order[\"dist_\"+str(j)] = [0]*n_order\n\n    \nfor k in range(n_order): \n    w = 0\n    for i in order_quantity_items[k]:\n        p_id = 'prod_'+str(i)\n        d_order[p_id][k] += 1\n        w += product_weight[i]\n           \n        \n        for j in range(0, n_warehouses):\n            if df_wh[p_id][j] > 0:\n                d_order[\"wh_\"+str(j)][k] += 1\n            else:\n                d_order[\"wh_\"+str(j)][k] += 0\n            \n    \n        # nearest wh\n        for j in range(0, n_warehouses):\n            d_order[\"dist_\"+str(j)][k] = distance(d_order['x'][k], d_order['y'][k],\n                                                 df_wh['x'][j], df_wh['y'][j])\n            \n    \n    d_order[\"total_weight\"][k] += w\n    \n\n\ndf_order = pd.DataFrame(d_order)\ndf_order['nearest_wh'] = df_order[['dist_'+str(i) for i in range(0, n_warehouses)]].T.idxmin().apply(lambda x: x.split('_')[1])\n\ndf_order.head()","9718d3ec":"# df_order = df_order.query('items == 1').reset_index()\n# n_order = df_order.shape[0]","4822980e":"n = 1150\norder_quantity_items[n].sort()\norder_quantity_items[n]\n\nfor p in order_quantity_items[n]:\n    assert int(df_order[df_order.order == n]['prod_'+str(p)]) > 0","f06f78f3":"df_order.describe()","b1d7e9ba":"pd.Series(product_weight).plot.box()","3410c6de":"import plotly.express as px\n\nfig = make_subplots(rows=1, cols=1)\n\nfig.add_trace(go.Scatter(x=df_wh['x'], y=df_wh['y'],\n                         name='warehouses',marker_size=15,\n                         marker_color='red', mode='markers', text=df_wh['warehouse']), row=1, col=1)\n\n\n\nfig.add_trace(go.Scatter(x=df_order['x'], y=df_order['y'],\n                         name='orders',marker_size=3,\n                         marker_color='blue', mode='markers'), row=1, col=1)\n\n\nfig.show()","2b50ef67":"fig = make_subplots(rows=1, cols=1)\n\nfig.add_trace(go.Histogram(x=df_order['nearest_wh'], name='Nearest warehouse distribution', marker_color=\"purple\"), row=1, col=1)\n\n\nfig.show()","b06d3710":"df_wh.T.sample(5)","d23b7e24":"# product availability by warehouse\n\nfig = make_subplots(rows=10, cols=2)\n\nfor i in range(0, 10):\n    col = 1 if i%2 == 0 else 2\n    row = i+1 if i%2 == 0 else i\n    fig.add_trace(go.Histogram(x=df_wh.T[i], name='wh'+str(i)), row=row, col=col)\n\nfig.show()","ea831071":"df_order.sample(5)","8eeb6631":"fig = make_subplots(rows=2, cols=2)\n\n\nfig.add_trace(go.Histogram(x=df_order.total_weight, name='order weight', marker_color=\"blue\"), row=1, col=1)\n\n\nfig.add_trace(go.Histogram(x=df_order['items'], name='items per order', marker_color=\"purple\"), row=1, col=2)\n\n\nfor i in range(1, 7):\n    fig.add_trace(go.Scatter(x=[i*payload, i*payload], y=[0, 100], name=str(i)+\"x payload\", marker_color='red'), row=1, col=1)\n\n\nfig.add_trace(go.Histogram(x=product_weight, name='product weight', marker_color=\"green\"),\n        row=2, col=1)\n    \nfig.show()","34f9c582":"%%time\nfor i in range(0, 10):\n    print(df_order[['order', 'items', 'wh_'+str(i), 'dist_'+str(i), 'nearest_wh']].query(\"nearest_wh == \"+str(i)+\" and wh_\"+str(i)+\" == items\").shape)","6bb3f787":"%%time\n\ncount = 0\nfor i in range(0, 10):\n    n = df_order[['order', 'items', 'wh_'+str(i), 'dist_'+str(i), 'nearest_wh']].query(\"wh_\"+str(i)+\" == items\").shape[0]\n    print('Number of order which could be supplid by warehouse '+str(i)+' only: ',n,' \/ '+str(n_order))\n    count += n\n\n\nprint(\"\\nBy assigning orders to warehouses we could supply \", count, ' \/ '+str(n_order), '\\n')","51e8b9fc":"! pip install pulp\n\nfrom pulp import * ","ec707426":"df_order.sample(5)","5a1ce177":"# %%time\n\n\n# Stock of item k in warehouse j\nstock = [[0]*n_products]*n_warehouses\nfor wh in range(n_warehouses):\n    for prod in range(n_products):\n        stock[wh][prod] = wh_stocks[wh][prod]\nstock = np.array(stock)\n\n\n# Stock of item k in warehouse j\n# cols = ['prod_'+str(i) for i in range(n_products)]\n# stock = np.array(df_wh[cols]).astype('int32')\n# assert stock.shape == (n_warehouses, n_products)\n# assert stock[0][10] == 4\n# assert stock[2][7] == 36\n\n\n# Number of item k in order i\n# demand = np.array(df_order[cols].T)\n# assert demand.shape == (n_products, n_order)\n# assert demand[6][0] == 1\n# assert demand[18][4] == 1\n\n\n# Number of item k in order i\ndemand = np.array([[0]*n_order]*n_products)\nfor order in range(n_order):\n    for prod in order_quantity_items[order]:\n        demand[prod][order] += 1\ndemand = np.array(demand)\n\n\n\n# min(stock[k][j],\n# Variable product k from warehouse j is for order i\nx = [[[LpVariable(\"x_\"+str(k)+\"_\"+str(i)+\"_\"+str(j), 0,  min(1, demand[k][i]), LpInteger) \n       for j in range(n_warehouses)] \n      for i in range(n_order) ] \n     for k in range(n_products) ] \n\n\n\n\n# distance between order i and warehouse j \ncols0 = ['dist_'+str(j) for j in range(n_warehouses)]\ndist = np.array(df_order[cols0]).astype('float32')","39defb3e":"stock = [[0]*n_products]*n_warehouses\nfor wh in range(n_warehouses):\n    for prod in range(n_products):\n        stock[wh][prod] += wh_stocks[wh][prod]\n\nstock = np.array(stock)","198203ef":"%%time \n\n# Problem\nprob = LpProblem(\"assign_product_to_order\", LpMinimize)\n\n\nprob += lpSum(dist[i][j] * x[k][i][j] for k in range(n_products) for i in range(n_order) for j in range(n_warehouses)), \"obj\"\n\n\n# Order Availability            \nfor k in range(n_products): \n    prob += lpSum(x[k][i][j] for i in range(n_order) for j in range(n_warehouses) ) <= lpSum(stock[j][k] for j in range(n_warehouses)), \"Stock cst\"+str(k)#+\"_\"+str(j)\n\n\nfor i in range(n_order): \n    for k in range(n_products):\n        prob += lpSum( x[k][i][j] for j in range(n_warehouses) ) == demand[k][i], \"demand cst\"+str(k)+\"_\"+str(i)\n\n\n\n# Write the problem as an LP file\nprob.writeLP(\"ass_order_item_prob.lp\")\n\nprint('ok')","ce2d98f8":"%%time\n\n\n# Solve the problem using the default solver\nprob.solve()\n\n# Print the status of the solved LP\nprint(\"Status:\", LpStatus[prob.status])\n\n# Print the value of the variables at the optimum\n# for v in prob.variables():\n#     print(v.name, \"=\", v.varValue)\n\n# Print the value of the objective\nprint(\"objective=\", value(prob.objective))","33952daa":"%%time\n\n\nz = np.array([[0]*n_warehouses]*n_order).astype('int32')\ndf_assign = pd.DataFrame(columns = ['warehouse', 'order', 'product_id', 'quantity', 'total_weight'])\n\n\nfor k in range(n_products):\n    for i in range(n_order):\n        for j in range(n_warehouses):\n            if x[k][i][j].varValue > 0:\n                z[i][j] = 1\n                \n                df_assign = df_assign.append({\n                    'warehouse':    j,\n                    'order':        i,\n                    'product_id':   k,\n                    'quantity' :    int(x[k][i][j].varValue), \n                    'total_weight': int(x[k][i][j].varValue) * product_weight[k]\n                }, ignore_index=True)\n                \n                \nprint(df_assign.shape)\n\n\n\n# little check for post processing\n\norder = 10\ntmp = df_assign.sort_values('warehouse').query('order == '+str(order))\nprods = tmp.product_id\n\nfor p in order_quantity_items[10]:\n    assert np.isin(p, prods)\n\n\n# df_assign.head()","51f07002":"df_assign.sort_values('warehouse').query('quantity > 2').head()","eee93fb1":"%%time\n\nfor i in range(n_order):\n    if sum(z[i]) > 1:\n        print(\"more than 1 wh \",i, \", sum =  \", sum(z[i]))\n    if sum(z[i]) == 0:\n        print(\"0 wh\", i)\n     \n    \nfor j in range(n_warehouses):\n    df_order['assign_'+str(j)] = z.T[j]","8cdc96eb":"df_order[['order', 'items']+['assign_'+str(j) for j in range(n_warehouses) ]].sample(5)","e78f7b3a":"import plotly.express as px\n\nfig = make_subplots(rows=1, cols=1)\n\n\nref_color = ['red','blue',  'brown', 'purple', 'orange', 'cyan', 'black', 'yellow', 'pink', 'green']\n\nfor i in range(n_warehouses):\n    tmp = df_wh.iloc[i]\n    color = ref_color[i]\n    fig.add_trace(go.Scatter(x=[tmp['x']], y=[tmp['y']],\n                             name='warehouse '+str(i),\n                             marker_size=15,\n                             marker_color=color,\n                             mode='markers', \n                            text='warehouse '+str(i)\n                            ), row=1, col=1)\n\n\n    tmp_ord = df_order.query(\"assign_\"+str(i)+\" >= 1.0\")\n    print(tmp_ord.shape[0], \" orders for warehouse \"+str(i), ' colorized in ', color)\n    \n    fig.add_trace(go.Scatter(x=tmp_ord['x'], y=tmp_ord['y'],\n                            name='orders for warehouse '+str(i),\n                            marker_size=3,\n                            marker_color=color,\n                            mode='markers'), row=1, col=1)\n\nfig.show()","080c5e01":"df_assign.sample(5, random_state=89)","14ac898f":"warehouse_order = []\nwh_order_dist = []\n\nfor j in range(n_warehouses):\n    tmp = df_assign.query(\"warehouse == \"+str(j))\n    warehouse_order.append(tmp)\n    print('Warehouse ', j,' : ', tmp.shape[0], 'products to deliver')\n    \n    #distances\n    wh_order_dist.append([0] + df_order['dist_'+str(j)].tolist())\n    ","f57f8ce4":"wh = 1\nn_drone_per_wh = n_drones\/\/10\n\ndf = df_assign.query(\"warehouse == \"+str(wh)).sort_values('order')\n\norder_list = list(df.order) # -1 for the warehouse (index = 0)\nprint(len(order_list))\n\ndf.head()","e913a417":"%%time\n\n# demands : weight of each product ordered \ndemands = df['total_weight'].tolist()+ [0]\nproducts = df['product_id'].tolist()+[0]\nlen(demands )\n\n\n# define distances \nX = np.array(d_order['x'])   \nY = np.array(d_order['y'])\n         \nref_dist = np.array([[ distance(X[i], Y[i], X[j], Y[j]) for j in range(n_order)] for i in range(n_order)])\n\n\n\ntmp = pd.DataFrame(np.array([[ref_dist[i][j] for j in order_list] for i in order_list]))\n\n\n# last row and first column: distance with the warehouse 0\n\ntmp[tmp.shape[0]] = pd.Series([df_order.iloc[i]['dist_'+str(wh)] for i in order_list]+[0])\ntmp = tmp.append(pd.Series([df_order.iloc[i]['dist_'+str(wh)] for i in order_list]+[0]),  ignore_index=True)\ndistance_ = np.array(tmp)\n\nprint(distance_.shape)\n\ndistance_","14f60816":"print(distance_.shape)\nprint(len(demands))\n\npd.DataFrame(distance_).tail(5)","3444ac23":"turns = 30 # nb travels per drones\nn_drone_per_wh = 10 * turns","c0365d5d":"turns = [30, 30, 30, 100, 100, 100, 40, 40, 30]\n\n\ndef create_data_model(wh=0):\n    \"\"\"Stores the data for the problem.\"\"\"\n    \n   #  wh = 1\n    n_drone_per_wh = n_drones\/\/10\n    df = df_assign.query(\"warehouse == \"+str(wh)).sort_values('order')\n    order_list = list(df.order)\n   \n    # demands : weight of each product ordered \n    demands = df['total_weight'].tolist()+[0]\n    products = df['product_id'].tolist()+[0]\n    len(demands )\n\n\n    # define distances \n    X = np.array(d_order['x'])   \n    Y = np.array(d_order['y'])\n\n    ref_dist = np.array([[ distance(X[i], Y[i], X[j], Y[j]) for j in range(n_order)] for i in range(n_order)])\n    tmp = pd.DataFrame(np.array([[ref_dist[i][j] for j in order_list] for i in order_list]))\n\n\n    # last row and first column: distance with the warehouse 0\n    tmp[tmp.shape[0]] = pd.Series([df_order.iloc[i]['dist_'+str(wh)] for i in order_list]+[0])\n    tmp = tmp.append(pd.Series([df_order.iloc[i]['dist_'+str(wh)] for i in order_list]+[0]),  ignore_index=True)\n    distance_ = np.array(tmp)\n\n    # print(distance_.shape)\n    turns = [30, 30, 30, 2000, 400, 100, 100, 100, 100,100]\n    turns = turns[wh] # nb travels per drones\n    n_drone_per_wh = 10 * turns\n    \n    \n    data = {}\n    data['distance_matrix'] = distance_\n    data['demands'] = demands\n    data['vehicle_capacities'] = [payload]*n_drone_per_wh\n    data['num_vehicles'] = n_drone_per_wh\n    data['depot'] = tmp.shape[0]-1 # last one is the warehouse\n    \n    data['products'] = products\n    data['order_list'] = order_list+[0]\n    \n    # not used yet\n    data['time_matrix'] = distance_\n    data['vehicle_load_time'] = 1\n    data['vehicle_unload_time'] = 1\n    data['time_windows'] = [(0, T)]*len(demands)\n    data['depot_capacity'] = n_drone_per_wh\n\n    return data","4f7d354e":"%%time \na = create_data_model(3)","b848e12d":"# \"\"\"Capacited Vehicles Routing Problem (CVRP).\"\"\"\n\nfrom ortools.constraint_solver import routing_enums_pb2\nfrom ortools.constraint_solver import pywrapcp\n\n\ndef print_solution(data, manager, routing, solution):\n    \"\"\"Prints solution on console.\"\"\"\n    # Display dropped nodes.\n    dropped_nodes = 'Dropped nodes:'\n    for node in range(routing.Size()):\n        if routing.IsStart(node) or routing.IsEnd(node):\n            continue\n        if solution.Value(routing.NextVar(node)) == node:\n            dropped_nodes += ' {}'.format(manager.IndexToNode(node))\n    print(len(dropped_nodes.split(' ')))\n    print(dropped_nodes)\n   \n    \n    total_distance = 0\n    total_load = 0\n    count = 0\n    for vehicle_id in range(data['num_vehicles']):\n        index = routing.Start(vehicle_id)\n        plan_output = 'Route for vehicle {}:\\n'.format(vehicle_id)\n        route_distance = 0\n        route_load = 0\n        \n        while not routing.IsEnd(index):\n            node_index = manager.IndexToNode(index)\n            route_load += data['demands'][node_index]\n            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)\n            previous_index = index\n            index = solution.Value(routing.NextVar(index))\n            route_distance += routing.GetArcCostForVehicle(\n                previous_index, index, vehicle_id)\n        plan_output += ' {0} Load({1})\\n'.format(manager.IndexToNode(index),\n                                                 route_load)\n        plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\n        plan_output += 'Load of the route: {}\\n'.format(route_load)\n        \n        \n        if route_load > 0:\n            print(plan_output)\n            count += 1\n        \n        total_distance += route_distance\n        total_load += route_load\n    print('Total needed rounds : {} '.format(count\/\/10))\n    print('Total distance of all routes: {}m'.format(total_distance))\n    print('Total load of all routes: {}'.format(total_load))","f8d9ce5a":"def main(wh=0, print_solution=False):\n    \"\"\"Solve the CVRP problem.\"\"\"\n    # Instantiate the data problem.\n    data = create_data_model(wh)\n\n    # Create the routing index manager.\n    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']), data['num_vehicles'], data['depot'])\n\n    # Create Routing Model.\n    routing = pywrapcp.RoutingModel(manager)\n\n\n    # Create and register a transit callback.\n    def distance_callback(from_index, to_index):\n        \"\"\"Returns the distance between the two nodes.\"\"\"\n        # Convert from routing variable Index to distance matrix NodeIndex.\n        from_node = manager.IndexToNode(from_index)\n        to_node = manager.IndexToNode(to_index)\n        return data['distance_matrix'][from_node][to_node]\n\n    transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n\n    # Define cost of each arc.\n    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n\n\n    # Add Capacity constraint.\n    def demand_callback(from_index):\n        \"\"\"Returns the demand of the node.\"\"\"\n        # Convert from routing variable Index to demands NodeIndex.\n        from_node = manager.IndexToNode(from_index)\n        return data['demands'][from_node]\n\n    demand_callback_index = routing.RegisterUnaryTransitCallback(\n        demand_callback)\n    \n    \n    # Add Time Windows constraint.\n#     time = 'Time'\n#     routing.AddDimension(\n#         transit_callback_index,\n#         30,  # allow waiting time\n#         30,  # maximum time per vehicle\n#         False,  # Don't force start cumul to zero.\n#         time)\n#     time_dimension = routing.GetDimensionOrDie(time)\n#     # Add time window constraints for each location except depot.\n#     for location_idx, time_window in enumerate(data['time_windows']):\n#         if location_idx == data['depot']:\n#             continue\n#         index = manager.NodeToIndex(location_idx)\n#         time_dimension.CumulVar(index).SetRange(int(time_window[0]), int(time_window[1]))\n#     # Add time window constraints for each vehicle start node.\n#     for vehicle_id in range(data['num_vehicles']):\n#         index = routing.Start(vehicle_id)\n#         time_dimension.CumulVar(index).SetRange(data['time_windows'][0][0], data['time_windows'][0][1])\n                        \n    \n                                                \n    routing.AddDimensionWithVehicleCapacity(\n        demand_callback_index,\n        0,  # null capacity slack\n        data['vehicle_capacities'],  # vehicle maximum capacities\n        True,  # start cumul to zero\n        'Capacity')\n\n    # Allow to drop nodes.\n    penalty = 15000\n    for node in range(1, len(data['distance_matrix'])):\n        routing.AddDisjunction([manager.NodeToIndex(node)], penalty)\n\n    \n    \n    # Setting first solution heuristic.\n    search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n    search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n    # search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.AUTOMATIC)\n    search_parameters.local_search_metaheuristic = (routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)\n    # search_parameters.local_search_metaheuristic = (routing_enums_pb2.LocalSearchMetaheuristic.GREEDY_DESCENT)\n    search_parameters.log_search = True\n    search_parameters.time_limit.FromSeconds(1200) # 15 minutes \n\n\n    # Solve the problem.\n    solution = routing.SolveWithParameters(search_parameters)\n\n    print(\"Solver status: \", routing.status())\n    # Print solution on console.\n    # solution = True\n    if print_solution:\n        if solution:\n            print_solution(data, manager, routing, solution)\n    \n    return (data, manager, routing, solution)","b185adf8":"%%time\n\n# (data, manager, routing, solution) = main(3)","15578b3e":"def main_df(wh=0):\n    (data, manager, routing, solution) = main(wh, False)\n    \n    dropped_nodes = 'Dropped nodes:'\n    for node in range(routing.Size()):\n        if routing.IsStart(node) or routing.IsEnd(node):\n            continue\n        if solution.Value(routing.NextVar(node)) == node:\n            dropped_nodes += ' {}'.format(manager.IndexToNode(node))\n    print(len(dropped_nodes.split(' ')))\n    print(dropped_nodes)\n\n\n    # Display dropped nodes.\n    dropped_nodes = 'Dropped nodes:'\n    for node in range(routing.Size()):\n        if routing.IsStart(node) or routing.IsEnd(node):\n            continue\n        if solution.Value(routing.NextVar(node)) == node:\n            dropped_nodes += ' {}'.format(manager.IndexToNode(node))\n    print(len(dropped_nodes.split(' ')))\n    print(dropped_nodes)\n\n    total_distance = 0\n    total_load = 0\n    count = 0\n\n    # Solution Dataframe\n    df_route = pd.DataFrame(columns=['warehouse', 'route', 'order', 'product', 'load'])\n\n    for vehicle_id in range(data['num_vehicles']):\n        index = routing.Start(vehicle_id)\n        plan_output = 'Route for vehicle {}:\\n'.format(vehicle_id)\n        route_distance = 0\n        route_load = 0\n\n        while not routing.IsEnd(index):\n            node_index = manager.IndexToNode(index)\n            route_load += data['demands'][node_index]\n            prod = data['products'][node_index]\n\n            plan_output += ' {0} Load({1} - product: {2} ) -> '.format(data['order_list'][node_index], route_load, prod)\n\n            tmp_data = {'warehouse': wh, \n                        'route': vehicle_id, \n                        'product': prod, \n                        'order': data['order_list'][node_index], \n                        'load': route_load }\n            #print(tmp_data)\n            df_route = df_route.append(tmp_data, \n                                       ignore_index=True)\n            #print(df_route.head(3))\n\n            previous_index = index\n            index = solution.Value(routing.NextVar(index))\n            route_distance += routing.GetArcCostForVehicle(previous_index, index, vehicle_id)\n\n    \n        # Possibility to improve by taking the nearest warehouse\n#         prod = data['products'][node_index]\n#         plan_output += ' {0} Load({1} - product: {2} ) \\n '.format(node_index, route_load, prod)\n#         df_route = df_route.append({'warehouse': 0, 'route': vehicle_id, \n#                                     'product': prod, \n#                                     'order': data['order_list'][node_index], #node_index, \n#                                     'load': route_load }, ignore_index=True)\n\n        plan_output += 'Distance of the route: {}m\\n'.format(route_distance)\n        plan_output += 'Load of the route: {}\\n'.format(route_load)\n\n        if route_load > 0:\n            print(plan_output)\n            count += 1\n        total_distance += route_distance\n        total_load += route_load\n        \n    print('Total needed rounds : {} '.format(count\/\/10))\n    print('Total distance of all routes: {}m'.format(total_distance))\n    print('Total load of all routes: {}'.format(total_load))\n    \n    return df_route","bce6fce8":"%%time\n\n#df_route = main_df(3)","d2f82b38":"%%time \n\nwarehouses = [0, 1, 2, 5, 6, 7, 8, 9 ]\n\n\ntmp_list = []\ndf_route = pd.DataFrame()\nfor wh in warehouses:# range(n_warehouses):\n    print(\"\\n\\nWarehouse : \", wh)\n    tmp = main_df(wh)\n    tmp_list.append(tmp)","c19e1782":"df_route = pd.concat(tmp_list)\n\n# test \norder = 121\ntmp = df_route.query('order == '+str(order))\n\nfor prod in order_quantity_items[order]:\n    assert np.isin(prod, tmp['product'])\n    \n\ndf_route.shape","bc533609":"df_route = df_route.query('load != 0')\nprint(\"instruction for warehouse 1 : \", df_route.query(\"warehouse == \"+str(1)).shape[0] )","a71b19df":"fig = make_subplots(rows=1, cols=1)\n\nref_color = ['red','blue',  'brown', 'yellow', 'cyan', 'orange', 'black', 'purple', 'pink', 'green']\n\n\nfor wh in warehouses: #range(n_warehouses):\n    # wh = 0\n    tmp = df_wh.iloc[wh]\n    color = ref_color[wh]\n    fig.add_trace(go.Scatter(x=[tmp['x']], y=[tmp['y']],\n                             name='warehouse '+str(wh),\n                             marker_size=15,\n                             marker_color=color,\n                             mode='markers', \n                            text='warehouse '+str(wh)\n                            ), row=1, col=1)\n\n\n    tmp_wh = df_wh.iloc[wh]\n\n    # print(\"Order : \", order)\n    \n    orders = list(df_route.query(\"warehouse == \"+str(wh)).order.unique())\n    order_x = df_order.query(\"order in \"+str(orders))['x']\n    order_y = df_order.query(\"order in \"+str(orders))['y']\n\n    #print(tmp_ord.shape[0], \" orders for warehouse \"+str(order), ' colorized in ', color)\n\n    fig.add_trace(go.Scatter(x=order_x, y=order_y,\n                            name='orders for warehouse '+str(wh),\n                            marker_size=6,\n                            marker_color=color,\n                            mode='markers'), row=1, col=1)\n\n\n    # line\n    for r in df_route.query(\"warehouse == \"+str(wh)).route.unique()[:60]: \n        route = df_route.query('warehouse == '+str(wh)+' and route == '+str(r))\n        pre_node = (tmp_wh['x'], tmp_wh['y'])\n        for i in range(route.shape[0]):\n            if i != 0:\n                order = route.iloc[i]['order']\n\n                x = df_order['x'][order]\n                y = df_order['y'][order]\n                fig.add_trace(go.Scatter(x=(pre_node[0], x) , y=(pre_node[1], y), name=\"route \"+str(r),marker_size=1, marker_color=color), row=1, col=1)\n                pre_node = (x, y)\n\n        fig.add_trace(go.Scatter(x=[pre_node[0], int(tmp_wh['x'])  ] , y=[pre_node[1], tmp_wh['y'] ], name=\"route \"+str(r),marker_size=1, marker_color=color), row=1, col=1)\n\n\nfig.show()","9a05809c":"df_route['qty'] = [1]*df_route.shape[0]\ndf_route.groupby(['warehouse', 'route', 'product'])['qty'].sum().reset_index().query('qty > 1 and product != 0')","3b148ecf":"%%time\n\ndef submit(df_route):\n    instruction = \"\"\n\n    #wh = 1\n    time = [T]*n_drones\n    fleet_per_wh = n_drones\/\/n_warehouses\n\n    instruction = []\n    for wh in warehouses : #range(2):\n        print(\"warehouse : \", wh)\n        routes = set(df_route.query('warehouse == '+str(wh)).route)\n\n        # time[drone] -= distance(df_wh['x'][0], df_wh['y'][0], \n        #                        df_wh['x'][wh], df_wh['y'][wh] ) # starting time, from wh to assigned wh\n        \n        for turn in range(len(routes)):\n            instruction_d = [] # delivery\n            instruction_l = [] # load\n\n            drone = fleet_per_wh*wh + turn%fleet_per_wh  # drone id\n            # drone = turn\n            # print(\"Drone : \", drone)\n\n            #r = routes.pop(0)\n            r = turn\n            route = df_route.query(\"route == \"+str(r)+\" and warehouse == \"+str(wh))\n            prec = (int(df_wh['x'][wh]), int(df_wh['y'][wh]))\n            \n            for line in range(route.shape[0]):\n                if line > 0:\n                    # load phase\n                    product = route.iloc[line]['product']\n                    qty = 1 # to edit to improve\n                    order = route.iloc[line]['order']\n\n                    # Loading phase\n                    instruction_l.append(\"{0} L {1} {2} {3} \\n\".format(drone, wh, product, qty))\n                    time[drone] -= 1\n\n                    # delivery phase\n                    instruction_d.append(\"{0} D {1} {2} {3} \\n\".format(drone, order, product, qty) )\n                    time[drone] -= distance(prec[0], prec[1], df_order['x'][order], df_order['y'][order]) \n\n                    prec = (df_order['x'][order], df_order['y'][order])  \n\n            # back to warehouse, as mentioned, a better tactic would be to take the nearest warehouse\n            time[drone] -= distance(prec[0], prec[1], df_wh['x'][wh], df_wh['y'][wh] ) \n            instruction += instruction_l + instruction_d\n    print(time)\n    return instruction","79a2d6b5":"instruction = submit(df_route)\nprint(len(instruction))\ninstruction[:6]","52bbc1df":"# Write file\n\nfile1 = open(\"submission.csv\",\"w\") # append mode \nfile1.write(str(len(instruction))+'\\n')\nfor line in instruction:\n    file1.write(line) \nfile1.close() ","baaae5b3":"order_quantity_items[121]","9d6dd4b7":"## 3. Assign drone to Order and schedule delivery","2031a9fc":"## Order and warehouses","f25654fa":"### => The clustering linear program seems to be good ","937d1aaf":"**=> most of order are close to warehouse 4 (330) and 3 (267)**","24dc21f3":"# Conclusion ","19b8f492":"Some products such as 399 or 395 are available in wh_5 and wh_6. this information is important whether an heuristic is create ","01b329dc":"# Analysis","6cf7068c":"### How many warehouses are needed to supply the orders ?","811c55df":"### Problem definition:\n* i is order index $i \\in Orders$\n* j is warehouse index $ j \\in warehouses$\n* k is product index $ k \\in products$\n* $dist_{ij}$ is the distance between the order i and the warehouse j\n* $demand_{ki}$ defines the demand of product k from the order i (basically 1 or 0 in the case)\n* $x_{ij}^k$ quantity of product k for the order i from the warehouse j\n\n\n\nmin $\\sum\\limits_{k,i,j} x_{ij}^k . dist_{ij}$\n\nSubject to \n\n1. $\\sum\\limits_{j \\in warehouses}  \\sum\\limits_{i \\in Orders} demand_{k,i} . x_{ij}^k \\leq \\sum\\limits_{j \\in warehouses} Stock_{j, k}$  $\\forall k \\in products $ *(Respect of stock)*\n2. $\\sum\\limits_{j \\in warehouses}  x_{ij}^k = demand_{k,i}$ $\\forall i \\in orders$  *(Every order have at leat one warehouse)*","e018a879":"## Product availability distribution by warehouses","d0b5a581":"**=> nobody could be totaly supplied by its nearest warehouse**","fe1e9d3f":"# Submission","c82dc305":"# Solution in graph","2189e577":"## Nearest warehouse distribution","0d4ff8e0":"# Imports","a58a8998":"## 1. From each warehouse, assign product to order based on demand","21a6ba1c":"## Aggregation","95a505c3":"## Parsing ","2b7be770":"# Routing heuristic","67412793":"## 1.Assign orders to warehouses\n\nTo solve this subProblem we're going to PuLP to solve the Linear Program","d2c25c19":"## 3 Steps \n\n1. Assign order to warehouse based on warehouse stocks\n2. Assign a fleet of drone for each warehouse ( example : 10 drones per warehouse)\n3. foreach warehouse apply a Routing algorithm (CVRP with capacity constraint)","be6d5c0c":"# Status \n\n* Parsing Input ( OK )\n* Data Analysis, find opportunities (OK)\n* first optimization algorithm : orders for warehouses (OK)\n* second optimization algorithmn : Routing (OK) \n* Postprocessing and output writing (In progress)\n* Write a conclusion\n\n\n# Libraries\n\n* **Pandas** : To handle data\n* **PuLP** : Linear programing library. it is used to solve the assignment problem (order fo warehouse)\n* **Google or-tools** : constraint programming library. It is used to solve the routing problem  \n* **PyPlot** : Plotting graph\n","71017e57":"## Order distribution : Order weight and item per Order","22dfa45e":"#### Test","b4e30cad":"## CVRP : Example with warehouse 0","13b900e2":"## Product weight ","d41b5eb5":"### Let's start with warehouse 0 and 10 drones","9a30552f":"# Linear Programming","6ac97f40":"## LP Postprocessing ","f095f379":"### => A strategy could be to handle these 977 orders only","722c457a":"# Input Data","ca423705":"## Result in graph","62fc43cd":"Now we know which warehouse has to handle which order.\n\nTo simplify, we will give **10 drones per warehouses**. ( for sure, we could create a repartition based on the total weight to manage per warehouse).\n\nFor each, warehouse a routing algorithm will be applied (**CVRP** with capacity. a time window constraint based on the distance could be applied to improve the score).\n\n\nFortunately, it exists very good routing problem solver such as the one in **OR-Tools**. we'll use it. https:\/\/developers.google.com\/optimization\/routing","2618540b":"## Map : Orders and warahouses in Grid"}}