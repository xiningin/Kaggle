{"cell_type":{"0a7a93a6":"code","870c8b1c":"code","6a30e6d5":"code","be9c573d":"code","a353f817":"code","6ec01751":"code","6bb6844e":"code","91605bc3":"code","ebf548c1":"code","0bd29513":"markdown","4cff9248":"markdown","0e18972e":"markdown","e0ee0cb0":"markdown","a5905649":"markdown","a9cdfd93":"markdown"},"source":{"0a7a93a6":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datatable as dt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'","870c8b1c":"def create_row_features(df):\n    df['row_sum'] = df.sum(axis=1)\n    df['row_mean'] = df.mean(axis=1)\n    df['row_std'] = df.std(axis=1)\n    return df","6a30e6d5":"from sklearn.preprocessing import StandardScaler\n\n### load dataframes\ndf_train = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ndf_test = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()\n\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\n\n### split into X, y\nX = df_train.drop(columns=['id','target']).copy()\ny = df_train['target'].copy()\n\nX_test = df_test.drop(columns='id').copy()\n\n### get row features\nX = create_row_features(X)\nX_test = create_row_features(X_test)\n\n### standardize data\nscaler = StandardScaler()\n\nX = pd.DataFrame(columns=X.columns, data=scaler.fit_transform(X))\nX_test = pd.DataFrame(columns=X_test.columns, data=scaler.transform(X_test))","be9c573d":"### check gpu before training\nprint(\"Tensorflow Number of GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","a353f817":"from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n### define callbacks\nearly_stopping = EarlyStopping(\n    monitor='val_loss', \n    min_delta=0, \n    patience=20, \n    verbose=0,\n    mode='min', \n    baseline=None, \n    restore_best_weights=True\n)\n\nreduce_lr = ReduceLROnPlateau(\n    monitor='val_loss', \n    factor=0.2,\n    patience=5,\n    mode='min'\n)","6ec01751":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, InputLayer, Dropout\n\n### create baseline-model\ndef get_model(name:str):\n    model = Sequential(name=name)\n\n    model.add(InputLayer(input_shape=(X.shape[1])))\n    model.add(Flatten())\n\n    model.add(Dense(300, activation='relu'))\n    model.add(Dropout(rate=0.3))\n    \n    model.add(Dense(200, activation='relu'))\n    model.add(Dropout(rate=0.3))\n    \n    model.add(Dense(100, activation='relu'))\n\n    model.add(Dense(1, activation='sigmoid'))\n    \n    return model","6bb6844e":"from sklearn.model_selection import StratifiedKFold\n\n### cross-validation \ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n\nscores = {fold:None for fold in range(cv.n_splits)}\npredictions = []\n\nfor fold, (idx_train, idx_valid) in enumerate(cv.split(X, y)):\n    X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n    X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n\n    model = get_model(name='Baseline')\n    \n    model.compile(\n        optimizer='adam',\n        loss='binary_crossentropy',\n        metrics=['AUC']\n    )\n\n    print('**'*20)\n    print(f\"Fold {fold+1} || Training\")\n    print('**'*20)\n    \n    history = model.fit(\n        X_train, y_train,\n        validation_data=(X_valid, y_valid),\n        batch_size=1024,\n        epochs=1500,\n        verbose=0,\n        callbacks=[\n            early_stopping,\n            reduce_lr\n        ]\n    )\n    \n    scores[fold] = (history.history)\n    \n    print(f\"Fold {fold+1} || Mean Validation AUC: {np.mean(scores[fold]['val_auc'])}\")\n    \n    prediction = model.predict(X_test).reshape(1,-1)[0]\n    predictions.append(prediction)","91605bc3":"### plot train and valid loss over number of epochs\nfig, ax = plt.subplots(1, 5, tight_layout=True, figsize=(20,2.5))\nax = ax.flatten()\n\nfor fold in range(cv.n_splits):\n    df_eval = pd.DataFrame({'train_loss': scores[fold]['loss'], 'valid_loss': scores[fold]['val_loss']})\n\n    mean_train = np.round(np.mean(df_eval['train_loss']),5)\n    mean_valid = np.round(np.mean(df_eval['valid_loss']),5)\n    delta = np.round(mean_valid - mean_train,5)\n    \n    sns.lineplot(\n        x=df_eval.index,\n        y=df_eval['train_loss'],\n        label='train_loss',\n        ax = ax[fold]\n    )\n\n    sns.lineplot(\n        x=df_eval.index,\n        y=df_eval['valid_loss'],\n        label='valid_loss',\n        ax = ax[fold]\n    )\n    \n    ax[fold].set_ylabel('')\n    ax[fold].set_xlabel(f\"Fold {fold+1}\\nmean_train: {mean_train}\\nmean_valid: {mean_valid}\\ndelta: {delta}\", fontstyle='italic')\n\nsns.despine()","ebf548c1":"### average predictions over each fold and create submission file\nsample_submission['target'] = np.mean(np.column_stack(predictions), axis=1)\nsample_submission.to_csv('.\/nn_baseline.csv', index=False)","0bd29513":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Evaluation<\/span>","4cff9248":"<div style=\"font-size: 1em; font-family: Verdana\">\n    <b>Hi,<\/b><br><br>\n    I just wanted to share my baseline-model with you guys.<br>\n    I've just recently started getting into 'deep learning' and read a lot of basics.<br>\n    This is the reason why I decided to use this month competition to get some practice with Neural-Networks.<br><br>\n    Also make sure to check out my EDA for TPS November 2021 <a href=\"https:\/\/www.kaggle.com\/mlanhenke\/tps-11-simple-basic-eda\">here<\/a>. <br><br>\n    <em>If you like this notebook or copy any parts of it please make sure to leave an upvote...<\/em><br><br>\n    <em><b>Thanks for taking some time to stop by and read my notebook!<\/b><\/em>\n<\/div>\n\n","0e18972e":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Import Data & Pre-Processing<\/span>","e0ee0cb0":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Introduction<\/span>","a5905649":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Submission<\/span>","a9cdfd93":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Modeling<\/span>"}}