{"cell_type":{"77fc19cc":"code","68b870e5":"code","926cab38":"code","47f98e6a":"code","7ed4da84":"code","f2af168c":"markdown"},"source":{"77fc19cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","68b870e5":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')\n\n#y_train = train.values[:,0]\n#y_test = train.values[0:5000,0]\n#x_test = test.values[:,1:]\n#x_train = train.values[: , 1:]","926cab38":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\n\nx = train.values[:,1:]\ny = train.values[:,0]\nx_train,x_test,y_train,y_test = train_test_split(x, y,test_size=0.2)\n\nclf = DecisionTreeClassifier()\n# Train Decision Tree Classifer\nclf = clf.fit(x_train,y_train)\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)\nacc1 = metrics.accuracy_score(y_test, y_pred)\nmatrix=confusion_matrix(y_test,y_pred)","47f98e6a":"acc1","7ed4da84":"from sklearn.ensemble import RandomForestClassifier\n#Create a Gaussian Classifier\nclf=RandomForestClassifier()\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(x_train,y_train)\ny_pred2=clf.predict(x_test)\nacc2 = metrics.accuracy_score(y_test, y_pred2)\nmatrix2=confusion_matrix(y_test,y_pred2)","f2af168c":"acc2"}}