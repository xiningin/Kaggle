{"cell_type":{"08638d85":"code","de1c6476":"code","7068cd0c":"code","a9af7e90":"code","974eb363":"code","d15e64c7":"code","ef27e5c6":"code","3fa977bb":"code","62ae38cc":"code","61be9d16":"code","aca77282":"code","2167c0e9":"code","1bfb689b":"code","745e2635":"code","72d242ae":"code","d1da3bc1":"code","06cae69a":"code","eebeb01a":"code","228004ce":"code","01f5877b":"code","5d8b5633":"code","a4a257fc":"markdown","605d19f5":"markdown"},"source":{"08638d85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","de1c6476":"import pandas as pd\nkc_house_data = pd.read_csv(\"..\/input\/housesalesprediction\/kc_house_data.csv\", index_col = \"id\")","7068cd0c":"kc_house_data.head()","a9af7e90":"from xgboost import XGBRegressor","974eb363":"#prepare for predictors data and target data\nX = kc_house_data.copy()\nX.dropna(axis = 0, subset = [\"price\"], inplace=True)\ny = X[\"price\"]\nX.drop([\"price\"], axis = 1, inplace=True)","d15e64c7":"X.shape","ef27e5c6":"X_full, X_test, y_full, y_test = train_test_split(X, y, train_size=0.8, test_size = 0.2, random_state = 1)","3fa977bb":"print(X_full.shape)\nprint(X_full.columns)","62ae38cc":"for i in X_full.columns:\n    print(i, X_full[i].dtype)","61be9d16":"#change the date type of X_full[\"date\"] from object to date object\nfor i in range(X_full.shape[0]):\n    X_full[\"date\"].iloc[i] = X_full[\"date\"].iloc[i][0:8]\n# print(pd.to_datetime(X_full[\"date\"].iloc[0:5],format='%Y%m%d', errors='ignore'))","aca77282":"X_full[\"date\"] = pd.to_datetime(X_full[\"date\"], format = \"%Y%m%d\", errors = \"ignore\")","2167c0e9":"pd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","1bfb689b":"plt.figure(figsize=(16,6))\nsns.lineplot(x = X_full[\"date\"], y=y_full)","745e2635":"cols_with_missing = [col for col in X_full.columns if X_full[col].isnull().any()]\nprint(cols_with_missing)","72d242ae":"print(X_full.columns)\nX_full.head()","d1da3bc1":"sns.scatterplot(x=X_full[\"zipcode\"], y=y_full)","06cae69a":"X_full_nodate = X_full.copy()\nX_full_nodate = X_full_nodate.drop(\"date\", axis=1)\nprint([\"{}:{}\".format(col,X_full_nodate[col].dtype) for col in X_full_nodate.columns])\nX_full_nodate.head()","eebeb01a":"from sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_absolute_error\nX_train, X_valid, y_train, y_valid = train_test_split(X_full_nodate, y_full, train_size=0.8, test_size = 0.2, random_state = 0)\nmodel = XGBRegressor(n_estimators=500, learning_rate=0.05, n_jobs=4)\nmodel.fit(X_train, y_train, early_stopping_rounds=15, eval_set=[(X_valid, y_valid)], verbose=False)\npreds = model.predict(X_valid)\nscore = mean_absolute_error(y_valid, preds)","228004ce":"print(score)","01f5877b":"def gridsearch(n=1000, l=0.05):\n    model = XGBRegressor(n_estimators=n, learning_rate = l, n_jobs=4)\n    model.fit(X_train, y_train, early_stopping_rounds=20, eval_set=[(X_valid, y_valid)], verbose=False)\n    preds = model.predict(X_valid)\n    score = mean_absolute_error(y_valid, preds)\n    return score\n\nscores =[]\nfor i in [1000, 1100, 1200, 1300, 1400, 1500]:\n    score = gridsearch(n=i)\n    scores.append([i, score])\nfor i in scores:\n    print(\"{}:{}\".format(i[0], i[1]))","5d8b5633":"best = [1200, 0.05] #[n_estimeter, learning_rate]\nmodel = XGBRegressor(n_estimators=best[0], learning_rate=best[1], n_jobs=4)\nmodel.fit(X_train, y_train, early_stopping_rounds=20, eval_set=[(X_valid, y_valid)], verbose=False)\nX_test_copy = X_test.copy()\nX_test_copy = X_test_copy.drop(\"date\", axis=1)\npreds=model.predict(X_test_copy)\nprint(mean_absolute_error(y_test, preds))","a4a257fc":"There is no columns with missing value","605d19f5":"The date data seems to be irrevalent to the price of house"}}