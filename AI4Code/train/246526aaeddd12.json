{"cell_type":{"b56ac31b":"code","057a0053":"code","39e490dc":"code","1d14c6d6":"code","7e969e12":"code","d4b0a41c":"code","b74ea485":"code","ed256e55":"code","f894bf62":"code","839d680c":"code","0b7bf164":"code","500fd040":"code","ded97179":"code","cdec4abe":"code","f0469eae":"code","4e962a62":"code","b1724de6":"code","7ef140fc":"code","543858c7":"code","55c81a78":"code","58bef360":"code","290f65b0":"code","59750546":"code","bf2d970e":"code","f80814dd":"code","df4037fa":"code","e504ede2":"code","659957fd":"code","367885d2":"code","7be95b13":"code","fb308805":"code","d9ae75fe":"code","a5ad6620":"code","68179dfa":"code","7249be8e":"code","9143154e":"code","bba706be":"code","d32c6f64":"code","8e3a78fc":"code","bb3fb18e":"code","62b7c6ca":"code","8a711636":"code","08236b82":"code","b3c2fe19":"code","974d1c33":"code","5e28f50d":"code","6f300219":"code","f805d6d9":"code","3bf4717a":"code","b811cefc":"code","3eaf610f":"code","e7bf0c78":"code","3cb13cf9":"code","4152bb19":"code","e98c9920":"code","1e6b8c1f":"code","bdb67d83":"code","5b286790":"code","cd6734b5":"code","b7269705":"code","2155769d":"code","deb62459":"code","701817cf":"code","97c77104":"code","c0e0e27d":"code","9af4a889":"markdown","555253a4":"markdown","8e24bb31":"markdown","05344d26":"markdown","9baa195e":"markdown","b8016261":"markdown","40c20f26":"markdown","a724b2ca":"markdown","c374638f":"markdown","f3882875":"markdown","caade8f5":"markdown","87f9a84c":"markdown","fb497f22":"markdown","9961dd20":"markdown","6883000e":"markdown","f123103a":"markdown","f360faee":"markdown","cfcc55b2":"markdown","cd4740b3":"markdown","93f47d2c":"markdown","e47c0c31":"markdown","2f2e1594":"markdown","4470e0fa":"markdown","c068afcb":"markdown","41dc2c9d":"markdown","9861d06f":"markdown","8e360ec5":"markdown","28f50c2a":"markdown","ba13204d":"markdown","61e490ac":"markdown","a2f9fb7e":"markdown","ec29b025":"markdown","4d51f786":"markdown","2872a175":"markdown","e83112e0":"markdown","c1c1a415":"markdown","7572030b":"markdown","23e1a8d6":"markdown","09ba59a4":"markdown","362fe0fb":"markdown","4bddd4ae":"markdown","b12db99d":"markdown","9188ee5f":"markdown","a0c47b71":"markdown","95bb83e6":"markdown","b2ecd54f":"markdown","026fd809":"markdown","8e935358":"markdown","4a8b6497":"markdown","3763163c":"markdown","17509074":"markdown","944d757e":"markdown","ed87800e":"markdown","30375222":"markdown","313f3430":"markdown"},"source":{"b56ac31b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\n!pip install chart_studio\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.graph_objects as go\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","057a0053":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","39e490dc":"data.head()","1d14c6d6":"data.describe()","7e969e12":"data.columns","d4b0a41c":"data.info()","b74ea485":"plt.figure(figsize = (10,6))\nvar = data['class']\nvar_values = var.value_counts()\nplt.bar(var_values.index, var_values)\nplt.show()","ed256e55":"def plot_hist(variable):\n    \n    \n    var = data[variable]\n    \n    #visualiez\n    \n    plt.figure(figsize = (10,3))\n    plt.hist(var,bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} Distrubiton with Histogram\".format(variable))\n    plt.show()","f894bf62":"numerical_variables = ['pelvic_incidence', 'pelvic_tilt numeric', 'lumbar_lordosis_angle','sacral_slope', 'pelvic_radius', 'degree_spondylolisthesis']\n\nfor each in numerical_variables:\n    plot_hist(each)","839d680c":"data.head()","0b7bf164":"data[[\"pelvic_incidence\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'pelvic_incidence', ascending = False)","500fd040":"data[[\"pelvic_tilt numeric\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'pelvic_tilt numeric', ascending = False)","ded97179":"data[[\"lumbar_lordosis_angle\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'lumbar_lordosis_angle', ascending = False)","cdec4abe":"data[[\"sacral_slope\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'sacral_slope', ascending = False)","f0469eae":"data[[\"pelvic_radius\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'pelvic_radius', ascending = False)","4e962a62":"data[[\"degree_spondylolisthesis\",\"class\"]].groupby([\"class\"], as_index = False).mean().sort_values(by = 'degree_spondylolisthesis', ascending = False)","b1724de6":"from collections import Counter\ndef detect_outliers(data,features):\n    outlier_indices = []\n    \n    for i in features:\n        \n        Q1 = np.percentile(data[i],25)\n        Q3 = np.percentile(data[i],75)\n        \n        IQR = Q3-Q1\n        \n        outlier_step = IQR*1.5\n        \n        outlier_list_cols = data[(data[i] < Q1-outlier_step) | (data[i]>Q3+outlier_step)].index\n        \n        outlier_indices.extend(outlier_list_cols)\n        \n        \n    outlier_indices = Counter(outlier_indices)\n    \n    multiple_outliers = list(c for c,k in outlier_indices.items() if k>2)\n    \n    return multiple_outliers","7ef140fc":"data.loc[detect_outliers(data,['pelvic_incidence','pelvic_tilt numeric','lumbar_lordosis_angle','sacral_slope','pelvic_radius','degree_spondylolisthesis'])]","543858c7":"data = data.drop(detect_outliers(data,['pelvic_incidence','pelvic_tilt numeric','lumbar_lordosis_angle','sacral_slope','pelvic_radius','degree_spondylolisthesis']), axis=0).reset_index(drop = True)","55c81a78":"data.loc[detect_outliers(data,['pelvic_incidence','pelvic_tilt numeric','lumbar_lordosis_angle','sacral_slope','pelvic_radius','degree_spondylolisthesis'])]","58bef360":"data.columns[data.isnull().any()]","290f65b0":"data.corr()","59750546":"data = data.replace({'Abnormal':0 , 'Normal':1 })\ndata.head()","bf2d970e":"f,ax = plt.subplots(figsize = (13,13))\nsns.heatmap(data.corr(), annot=True, fmt='.2f')\nplt.show()","f80814dd":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"pelvic_radius\", bins = 20)\nplt.show()","df4037fa":"fig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"class\", y=\"pelvic_incidence\", data=data, ax=ax,size=9)\nplt.show()","e504ede2":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"pelvic_incidence\", bins = 20)\nplt.show()","659957fd":"fig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"class\", y=\"pelvic_tilt numeric\", data=data, ax=ax,size=9)\nplt.show()","367885d2":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"pelvic_tilt numeric\", bins = 20)\nplt.show()","7be95b13":"fig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"class\", y=\"lumbar_lordosis_angle\", data=data, ax=ax,size=9)\nplt.show()","fb308805":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"lumbar_lordosis_angle\", bins = 20)\nplt.show()","d9ae75fe":"g = sns.lmplot(x=\"sacral_slope\", y=\"class\", data=data, y_jitter=.02, logistic=True, truncate=False,size=8)\ng.set(xlim=(9, 82), ylim=(-0.1, 1.1))\nplt.show()","a5ad6620":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"sacral_slope\", bins = 20)\nplt.show()","68179dfa":"fig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"class\", y=\"sacral_slope\", data=data, ax=ax,size=9)\nplt.show()","7249be8e":"g = sns.lmplot(x=\"degree_spondylolisthesis\", y=\"class\", data=data, y_jitter=.02, logistic=True, truncate=False,size=8)\ng.set(xlim=(-20, 150), ylim=(-0.1, 1.1))\nplt.show()","9143154e":"g = sns.FacetGrid(data, col = \"class\",size=5)\ng.map(sns.distplot, \"degree_spondylolisthesis\", bins = 20)\nplt.show()","bba706be":"fig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"class\", y=\"degree_spondylolisthesis\", data=data, ax=ax,size=9)\nplt.show()","d32c6f64":"data1 = data[data[\"class\"] == 1] #Creating data contains only normal people\nx = np.array(data1.loc[:,'pelvic_incidence']).reshape(-1,1) #pelvic_incidence is our feature\ny = np.array(data1.loc[:,'sacral_slope']).reshape(-1,1)  #Sacral slope is our target\n\n#Visualize\nplt.figure(figsize=(10,10))\nplt.scatter(x,y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","8e3a78fc":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\npredict_space = np.linspace(min(x), max(x),num=208).reshape(-1,1)\n#Fit\nlr.fit(x,y)\n#Predict\npredicted = lr.predict(predict_space)\n#Visualize\nplt.subplots(figsize=(9,7))\nplt.plot(predict_space, predicted, color='black', linewidth=3)\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()\n#R^2 Score\nprint('R^2 score: ',lr.score(x, y))\n","bb3fb18e":"results = {}","62b7c6ca":"data.head()","8a711636":"y = data['class'].values\nx_data = data.drop([\"class\"],axis=1)","08236b82":"#Normalization\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))","b3c2fe19":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=1)\n","974d1c33":"# KNN MODEL\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(x_train,y_train)\nresults[\"KNN: \"] = knn.score(x_test, y_test)","5e28f50d":"score_list = []\nfor each in range(1,30):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test, y_test))\n\n#plotting    \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=np.arange(1,30),y=score_list))\nfig.update_layout(title = \"KNN Classification Scores by Number of Neighbours\", xaxis_title='Number of Neighbours',yaxis_title='Score')\nfig.show()\n    \n    ","6f300219":"print(\"Accuracy of KNN Algorithm: {:.2f} % \".format(100*knn.score(x_test,y_test)))","f805d6d9":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\nprint(\"Test Accuracy {:.2f} %\".format(100*lr.score(x_test,y_test)))\n\nresults[\"LogisticRegression: \"] = lr.score(x_test,y_test)\n","3bf4717a":"from sklearn.svm import SVC\nsvm = SVC(random_state=1)\nsvm.fit(x_train, y_train)\nresults[\"SuperVectorMachine:\"] = svm.score(x_test,y_test)","b811cefc":"print(\"Accuracy of SVM Algorithm: {:.2f} %\".format(100*svm.score(x_test,y_test)))","3eaf610f":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\n\nnb.fit(x_train,y_train)\n\nresults[\"NaiveBayes: \"] = nb.score(x_test,y_test)","e7bf0c78":"print(\"Accuracy of Naive Bayes: {:.2f} %\".format(100*nb.score(x_test,y_test)))","3cb13cf9":"from sklearn.tree import DecisionTreeClassifier\n\ndtc = DecisionTreeClassifier()\n\ndtc.fit(x_train,y_train)\n\nresults[\"DecissionTree: \"] = dtc.score(x_test,y_test)","4152bb19":"print(\"Accuracy of Decision Tree: {:.2f} %\".format(100*dtc.score(x_test,y_test)))","e98c9920":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators = 17, random_state = 1)\n\nrfc.fit(x_train,y_train)\n\nresults[\"RandomForest: \"] = rfc.score(x_test,y_test)","1e6b8c1f":"print(\"Accuracy of Random Forest: {:.2f} %\".format(100*rfc.score(x_test,y_test)))","bdb67d83":"score_list = []\nfor each in np.arange(1,60):\n    rfc2 = RandomForestClassifier(n_estimators = each, random_state = 1)\n\n    rfc2.fit(x_train,y_train)\n    score_list.append(rfc2.score(x_test, y_test))\n\n#plotting    \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=np.arange(1,60),y=score_list))\nfig.update_layout(title = \"Random Forest Classification Scores by Number of Estimators\", xaxis_title='Number of Estimators',yaxis_title='Score')\nfig.show()\n    ","5b286790":"for a,b in results.items():\n    print(\"Score of {}: {:.4f} % \".format(a,100*b))\n    \nprint(\"*\"*50)\nprint(\"Best Score => {} : {} \".format(max(results, key=results.get),max(results.values())))\nprint(\"*\"*50)","cd6734b5":"y_pred = knn.predict(x_test)\ny_true = y_test","b7269705":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)","2155769d":"#Visualize of Confussion Matrix\nf,ax = plt.subplots(figsize=(12,10))\nsns.set(font_scale=1.5)\nax =sns.heatmap(cm,annot=True,fmt='.0f')\nax.tick_params(labelsize=25)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","deb62459":"f,ax = plt.subplots(figsize =(9,4))\nx=data[\"pelvic_radius\"]\ny=data[\"degree_spondylolisthesis\"]\nplt.scatter(x,y)\nplt.show()","701817cf":"data2 = data.loc[:,[\"pelvic_radius\",\"degree_spondylolisthesis\"]]\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters = 2)\nkmeans.fit(data2)\nlabels = kmeans.predict(data2)\n\ncdict = {0:'green',1:'purple'}\narrayim = []\nfor i in labels:\n    arrayim.append(cdict[i])\n\nf,ax = plt.subplots(figsize =(9,4))\nplt.scatter(data['pelvic_radius'],data['degree_spondylolisthesis'],color=arrayim)\nplt.xlabel('pelvic_radius')\nplt.ylabel('degree_spondylolisthesis')\nplt.show()","97c77104":"df = pd.DataFrame({'labels':labels,\"class\":data['class']})\nct = pd.crosstab(df['labels'],df['class'])\nprint(ct)","c0e0e27d":"inertia_list = np.empty(8)\n\nfor i in range(1,8):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(data2)\n    inertia_list[i] = kmeans.inertia_\n    \n    \nplt.plot(range(0,8),inertia_list, '-o')\nplt.xlabel(\"Number of Cluster\")\nplt.ylabel(\"Inertia\")\nplt.show()","9af4a889":"All the columns are float but class, it is object.","555253a4":"# INTRODUCTION\n<font color = 'blue'>\nContent\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n1. [Visualization of Basic Data Analysis](#9)\n    * [Correlation Map](#10)\n    * [class--pelvic_radius](#11)\n    * [class--pelvic_incidence](#12)\n    * [class--pelvic_tilt numeric](#13)\n    * [class--lumbar_lordosis_angle](#14)\n    * [class--sacral_slope](#15)\n    * [class--degree_spondylolisthesis](#16)\n1. [Machine Learning](#17) \n    1. [Supervised Learning](#100)\n         1. [Regression](#18)\n         2. [K-Nearest Neighbors (KNN)](#19)\n         3. [Logistic Regression](#20)\n         4. [Super Vector Machine (SVM)](#21)\n         5. [Naive Bayes](#22)\n         6. [Decission Tree](#23)\n         7. [Random Forest](#24)\n         8. [Result and Comparison of Supervised Learning Algorithms](#25)\n         9. [Confusion Matrix](#26)\n    2. [Unsupervised Learning](#27)\n         1. [KMEANS](#28)","8e24bb31":"<a id = '21'><\/a><br>\n## Super Vector Machine (SVM)","05344d26":"<a id = '26'><\/a><br>\n## Confusion Matrix","9baa195e":"I want to see correlations between our features and class. To accomplish that I will assing 1 to Normal, and 0 to Abnormal.","b8016261":"I want to plot the score by number of nearest neighbour to see which number of neighbour gives higher score.\n","40c20f26":"10 number of neighbours give the higher score as %87 .","a724b2ca":"* degree_spondylolisthesis > 20 people are Abnormal\n* We can use this feature for training.","c374638f":"<a id = '17'><\/a><br>\n# Machine Learning","f3882875":"<a id = '20'><\/a><br>\n## Logistic Regression","caade8f5":"* Pelvic_incidence between 40-60 value more likely belong to people who are Normal,\n* People who has higher pelvic_incidence value like >95 are Abnormal","87f9a84c":"<a id = '10'><\/a><br>\n## Correlation Map","fb497f22":"<a id = '6'><\/a><br>\n# Basic Data Analysis\n* pelvic_incidence vs class          \n* pelvic_tilt numeric vs class\n* lumbar_lordosis_angle vs class\n* sacral_slope vs class\n* pelvic_radius vs class\n* degree_spondylolisthesis vs class","9961dd20":"### class","6883000e":"<a id = '28'><\/a><br>\n## KMEANS","f123103a":"* Possitive Correlated = class--pelvic_radius,\n* Negative Correlated = class--pelvic_incidence, class--pelvic_tilt numeric, class--lumbar_lordosis_angle, class--sacral_slope, class--degree_spondylolisthesis","f360faee":"<a id = '13'><\/a><br>\n## class--pelvic_tilt numeric","cfcc55b2":"Luckily we do not have any missing values.","cd4740b3":"<a id = '5'><\/a><br>\n## Numerical Variable","93f47d2c":"<a id = '9'><\/a><br>\n# Visualization of Basic Data Analysis","e47c0c31":"How to find number of cluster if it is unknown ?","2f2e1594":"* People who has pelvic_tilt numeric values more than 30 are Abnormal,\n","4470e0fa":"Abnormal people have higher values in every features but in pelvic_radius.","c068afcb":"After normalization we can split our datas as train and test.","41dc2c9d":"In order to add classification algorithm's score, I will create an empty dictionary.","9861d06f":"<a id = '23'><\/a><br>\n## Decission Tree","8e360ec5":"<a id = '18'><\/a><br>\n## Regression","28f50c2a":"* Plotting Random Forest Classification Scores by Number of Estimators","ba13204d":"<a id = '24'><\/a><br>\n## Random Forest","61e490ac":"Now we are ready to create our KNN Model","a2f9fb7e":"No outliers anymore.","ec29b025":"<a id = '14'><\/a><br>\n## class--lumbar_lordosis_angle","4d51f786":"Best number of estimator is 17.","2872a175":"<a id = '27'><\/a><br>\n## Unsupervised Learning","e83112e0":"We need to normalize the x features because we do not want any feature dominate the other features.","c1c1a415":"<a id = '25'><\/a><br>\n## Result and Comparison of Supervised Learning Algorithms","7572030b":"<a id = '1'><\/a><br>\n# Load and Check Data\n","23e1a8d6":"Each patient is represented in the data set by six biomechanical attributes derived from the shape and orientation of the pelvis and lumbar spine (each one is a column):\n\n* pelvic incidence\n* pelvic tilt\n* lumbar lordosis angle\n* sacral slope\n* pelvic radius\n* grade of spondylolisthesis\n* class = Patient's class whether normal or abnormal","09ba59a4":"<a id = '22'><\/a><br>\n## Naive Bayes","362fe0fb":"<a id = '8'><\/a><br>\n# Missing Value","4bddd4ae":"* sacral_slope and class are negative correlated. Means that if sacral_slope increase people becoming Abnormal.\n* sacral_slope > 68 people are Abnormal.","b12db99d":"<a id = '11'><\/a><br>\n## class--pelvic_radius","9188ee5f":"<a id = '19'><\/a><br>\n## K-Nearest Neighbors (KNN)","a0c47b71":"* lumbar_lordosis_angle > 80 means to high chance to be Abnormal","95bb83e6":"<a id = '7'><\/a><br>\n# Outlier Detection","b2ecd54f":"Abnormal people have higher pelvic_incidence than Normal people.","026fd809":"<a id = '4'><\/a><br>\n## Categorical Variable","8e935358":"<a id = '16'><\/a><br>\n## class--degree_spondylolisthesis","4a8b6497":"We need to drop these outlier's to analys data correctly.","3763163c":"<a id = '15'><\/a><br>\n## class--sacral_slope","17509074":"* pelvic_radius < 100 and pelvic_radius > 150 people are more likely to be Abnormal","944d757e":"<a id = '3'><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable Analysis : class\n* Numerical Variable Analysis : pelvic_incidence, pelvic_tilt numeric, lumbar_lordosis_angle,sacral_slope, pelvic_radius, degree_spondylolisthesis","ed87800e":"<a id = '100'><\/a><br>\n## Supervised Learning","30375222":"<a id = '12'><\/a><br>\n## class--pelvic_incidence","313f3430":"<a id = '2'><\/a><br>\n# Variable Description"}}