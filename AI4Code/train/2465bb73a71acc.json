{"cell_type":{"3a556abf":"code","ce12b7fd":"code","1f9cb428":"code","0f86f589":"code","c9b9e1cc":"code","50323cd5":"code","66317ce2":"code","62f07bfc":"code","68f01930":"code","2d868f62":"code","e08664bc":"code","b2dfc077":"code","1c88ce3b":"code","03320c1f":"code","598353f1":"code","acfa1d62":"code","ab855e1f":"code","2c796f73":"code","652399a7":"code","bb62b5cb":"code","a4def63b":"code","4c5ca41f":"code","537a9ca7":"code","8994879e":"code","5210f8c1":"code","e4d9e3d2":"code","e23f5e3d":"code","488257c5":"code","495c71df":"code","a04eb735":"code","c9f99bbe":"code","81019102":"code","65df723d":"code","cec4a290":"code","ff70c5dd":"code","f4d8a125":"code","fe136532":"code","00b36a92":"code","1b9b0c71":"code","8f5bcd87":"code","0753863c":"code","71d94a31":"code","48bd6dd0":"code","8483091a":"code","ef138491":"code","f34674c5":"code","5e2636d6":"code","977ed396":"code","ee74ebd8":"code","7924cfea":"code","b64bff44":"code","0f16da2f":"code","f55e8dfb":"code","4a19f2eb":"code","f2f5b74f":"code","27994032":"code","5bc7b5a3":"code","649ba087":"code","3b5064ab":"code","5d4aa83a":"code","88adf9c3":"code","9e127209":"code","3df22463":"code","001842e2":"code","cfa2ebbf":"code","16188420":"code","74562553":"code","ed3ac8eb":"code","de3136ac":"code","01b74b24":"code","24da09c6":"code","99dfd678":"markdown","30312372":"markdown","9c375da1":"markdown","4a2a3c5d":"markdown","6cff863b":"markdown","629319bc":"markdown","d66bb250":"markdown","a9e75c08":"markdown","16dfc5e4":"markdown","c7cf4d01":"markdown","8a130b7e":"markdown","ca03c389":"markdown","a594ac7a":"markdown","bc3cb38f":"markdown","0dc694de":"markdown","48c1e50f":"markdown","c5a96df7":"markdown","6e04aa2a":"markdown","401d506a":"markdown","58dba5fa":"markdown","8a36573e":"markdown","bc2be080":"markdown","9f6ff7e4":"markdown","df168e9c":"markdown","4ba24270":"markdown","96fa699b":"markdown","2dc945ab":"markdown","0ed2f020":"markdown","d5c62564":"markdown","53f9e40f":"markdown","b129c029":"markdown","f126138e":"markdown","8bfc825a":"markdown","6176fea7":"markdown","2681ebef":"markdown"},"source":{"3a556abf":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import chi2_contingency\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split, GridSearchCV \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Ridge, Lasso, MultiTaskLasso\nfrom sklearn.metrics import r2_score\n%matplotlib inline","ce12b7fd":"df = pd.read_csv('..\/input\/video-game-sales-with-ratings\/Video_Games_Sales_as_at_22_Dec_2016.csv')","1f9cb428":"df.isna().sum()","0f86f589":"df.rename(columns={'Name': 'name',\n                    'Platform': 'platform',\n                    'Year_of_Release': 'year',\n                    'Genre': 'genre',\n                    'Publisher': 'publisher',\n                    'NA_Sales': 'na_sales',\n                    'EU_Sales': 'eu_sales',\n                    'JP_Sales': 'jp_sales',\n                    'Other_Sales': 'other_sales',\n                    'Global_Sales': 'global_sales',\n                    'Critic_Score': 'critic_score',\n                    'Critic_Count': 'critic_count',\n                    'User_Score': 'user_score',\n                    'User_Count': 'user_count',\n                    'Developer': 'developer',\n                    'Rating': 'rating'},inplace=True)","c9b9e1cc":"df.columns","50323cd5":"cat = ['platform','genre','publisher','developer','rating']\nnum = ['year','na_sales',\n       'eu_sales', 'jp_sales', 'other_sales', 'global_sales', 'critic_score',\n       'critic_count', 'user_score', 'user_count']","66317ce2":"corr_matrix = df[num].corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr_matrix,annot=True)","62f07bfc":"df['global_sales'].describe()","68f01930":"# sns.lmplot(x='critic_count',y='global_sales', data=df)\nvalues = df[~df['global_sales'].isna()]['global_sales']\nvalues = shuffle(values)\nx = list(range(len(values)))\nplt.figure(figsize=(20,20))\nplt.plot(x, values, 'D')\nplt.show()","2d868f62":"df = df[df['global_sales']<50]","e08664bc":"values = df[~df['na_sales'].isna()]['na_sales']\nvalues = shuffle(values)\nx = list(range(len(values)))\nplt.figure(figsize=(20,20))\nplt.plot(x, values, 'D')\nplt.show()","b2dfc077":"df = df[df['na_sales']<16]","1c88ce3b":"values = df[~df['eu_sales'].isna()]['eu_sales']\nvalues = shuffle(values)\nx = list(range(len(values)))\nplt.figure(figsize=(20,20))\nplt.plot(x, values, 'D')\nplt.show()","03320c1f":"df = df[df['eu_sales']<10]","598353f1":"values = df[~df['jp_sales'].isna()]['jp_sales']\nvalues = shuffle(values)\nx = list(range(len(values)))\nplt.figure(figsize=(20,20))\nplt.plot(x, values, 'D')\nplt.show()","acfa1d62":"df = df[df['jp_sales']<6]","ab855e1f":"values = df[~df['other_sales'].isna()]['other_sales']\nvalues = shuffle(values)\nx = list(range(len(values)))\nplt.figure(figsize=(20,20))\nplt.plot(x, values, 'D')\nplt.show()","2c796f73":"df = df[df['other_sales']<4]","652399a7":"sns.pairplot(df[['na_sales','eu_sales','jp_sales','other_sales']])","bb62b5cb":"name_sales = ['na_sales','eu_sales','jp_sales','other_sales','global_sales']","a4def63b":"result = {sale_name : {c_name: chi2_contingency(pd.crosstab(df[sale_name], df[c_name]))[1] for c_name in cat} for sale_name in name_sales}","4c5ca41f":"result","537a9ca7":"df['na_sales']","8994879e":"# plt.figure(figsize=(10,10))\n\n# sns.distplot(df['na_sales'])\n# # sns.distplot(df['eu_sales'])\n# # sns.distplot(df['jp_sales'])","5210f8c1":"df[df['name'].isna()]","e4d9e3d2":"df = df[~df['name'].isna()]","e23f5e3d":"df['name'].isna().sum()","488257c5":"df[df['year'].isna()]","495c71df":"df.loc[:,'year'] = df.loc[:,'year'].fillna(df['year'].median())","a04eb735":"df['year'].isna().sum()","c9f99bbe":"df['publisher'].isna().sum()","81019102":"df.loc[:,'publisher'] = df.loc[:,'publisher'].fillna(df['publisher'].mode()[0])","65df723d":"df['publisher'].isna().sum()","cec4a290":"df['critic_score'].isna().sum()","ff70c5dd":"df.loc[:,'critic_score'] = df.loc[:,'critic_score'].fillna(df['critic_score'].median())","f4d8a125":"df['critic_score'].isna().sum()","fe136532":"df['critic_count'].isna().sum()","00b36a92":"df.loc[:,'critic_count'] = df.loc[:,'critic_count'].fillna(df['critic_count'].median())","1b9b0c71":"df['critic_count'].isna().sum()","8f5bcd87":"df['user_score'].isna().sum()","0753863c":"df['user_score'].describe()","71d94a31":"df.loc[:,'user_score'] = df.loc[:,'user_score'].apply(lambda x: None if x=='tbd' else x)","48bd6dd0":"df['user_score'] = df['user_score'].astype('float')","8483091a":"df.loc[:,'user_score'] = df.loc[:,'user_score'].fillna(df['user_score'].median())","ef138491":"df['user_score'].isna().sum()","f34674c5":"df['user_count'].isna().sum()","5e2636d6":"df['user_count'].describe()","977ed396":"df.loc[:,'user_count'] = df.loc[:,'user_count'].fillna(df['user_count'].median())","ee74ebd8":"df['user_count'].isna().sum()","7924cfea":"df['developer'].isna().sum()","b64bff44":"df.loc[:,'developer'] = df.loc[:,'developer'].fillna('Unknown')","0f16da2f":"df['developer'].isna().sum()","f55e8dfb":"df['rating'].isna().sum()","4a19f2eb":"df['rating'].describe()","f2f5b74f":"df['rating'].value_counts()","27994032":"df.loc[:,'rating'] = df.loc[:,'rating'].fillna(df['rating'].mode()[0])","5bc7b5a3":"df['rating'].isna().sum()","649ba087":"df_model = df.drop(['name','publisher','developer','other_sales','global_sales'],axis=1)","3b5064ab":"df_model = pd.get_dummies(df_model)","5d4aa83a":"df_model","88adf9c3":"corr_matrix = df[['na_sales',\n       'eu_sales', 'jp_sales', 'other_sales']].corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr_matrix,annot=True)","9e127209":"def prepare_data(y_name):    \n    labels = df_model[y_name].to_numpy()\n    if y_name!='jp_name':   \n        features = df_model.drop([y_name],axis=1)\n    else:\n        features = df_model.drop([y_name,'na_sales'],axis=1)\n    features_names = list(features.columns)\n    features = features.to_numpy()\n    train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size=0.25, random_state=42)\n    return train_features, test_features, train_labels, test_labels","3df22463":"# # Create the parameter grid based on the results of random search \n# param_grid = {\n#     'bootstrap': [True],\n#     'max_depth': [80, 90, 100, 110],\n#     'max_features': [2, 3],\n#     'min_samples_leaf': [3, 4, 5],\n#     'min_samples_split': [8, 10, 12],\n#     'n_estimators': [100, 200, 300, 1000]\n#     }\n# # Create a based model\n# rf = RandomForestRegressor()\n# # Instantiate the grid search model\n# grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n#                           cv = 3,  verbose = 2)","001842e2":"predict_values_names = ['na_sales','eu_sales','jp_sales']","cfa2ebbf":"param_grid_rfr = {'bootstrap': [True],\n 'max_depth': [90],\n 'max_features': [3],\n 'min_samples_leaf': [3],\n 'min_samples_split': [8],\n 'n_estimators': [100]}\n\n\nparam_grid_lin = {'alpha': [0.01+i*0.05 for i in range(20)]}\nmodels = {\n            'Lasso': GridSearchCV(estimator = Lasso(), param_grid = param_grid_lin, cv = 3),\n            'Ridge': GridSearchCV(estimator = Ridge(), param_grid = param_grid_lin, cv = 3),\n            'RFR': GridSearchCV(estimator = RandomForestRegressor(), param_grid = param_grid_rfr, cv = 3)\n         }","16188420":"result = {}\nfor predict_name in predict_values_names:\n    result[predict_name] = {}\n    train_features, test_features, train_labels, test_labels = prepare_data(predict_name)\n    for key in models.keys():\n        models[key].fit(train_features, train_labels)\n        result[predict_name][key] = {}\n        result[predict_name][key]['r^2 train data'] = r2_score(train_labels,models[key].best_estimator_.predict(train_features))\n        predictions = models[key].best_estimator_.predict(test_features)\n        result[predict_name][key]['r^2 test data'] = r2_score(test_labels,predictions)\n        se_predict = predictions.std()\/len(predictions)**0.5\n        result[predict_name][key]['confidence_interval'] =  [predictions.mean()-1.96*se_predict,predictions.mean()+1.96*se_predict]\n        result[predict_name][key]['test_mean'] = test_labels.mean()","74562553":"# grid_search.fit(train_features, train_labels)\n# grid_search.best_params_\n# # best_grid = grid_search.best_estimator_\n# # grid_accuracy = evaluate(best_grid, test_features, test_labels)","ed3ac8eb":"result_list = []\nfor key in result.keys():\n    \n    result_list.append((key,pd.DataFrame(result[key])))","de3136ac":"print(result_list[0][0])\nresult_list[0][1]\n","01b74b24":"print(result_list[1][0])\nresult_list[1][1]","24da09c6":"print(result_list[2][0])\nresult_list[2][1]","99dfd678":"Correlation","30312372":"check otlier in jp sales","9c375da1":"We will fill na with median","4a2a3c5d":"Work with missing values in user_count","6cff863b":"We predict na, eu, jp and other sales. ","629319bc":"Check outlier in other sales","d66bb250":"delete otlier","a9e75c08":"We will fill na by mode","16dfc5e4":"Work with missing values Year of release","c7cf4d01":"Check outlier in na_sales","8a130b7e":"Work with critic_count","ca03c389":"Delete outlier","a594ac7a":"Check chi2 for outher categorical variables","bc3cb38f":"Check outlier in eu_sales","0dc694de":"We fill na with median","48c1e50f":"Work with missing values critic score","c5a96df7":"Check outlier in global_sales","6e04aa2a":"Delete outlier","401d506a":"make df to predict global_sales","58dba5fa":"The next step, check correlation between na, eu, jp and other sales.","8a36573e":"Vizualizations","bc2be080":"Check and fill missing values","9f6ff7e4":"Work with missing values in rating","df168e9c":"Check corr matrix ","4ba24270":"Delete outlier","96fa699b":"Fill missing values median","2dc945ab":"Work with missing values Name","0ed2f020":"Build prediction model ","d5c62564":"We can say that platform, genre, rating have smaller p-value than 0.05. So we can reject our null hypothesis","53f9e40f":"Delete otlier","b129c029":"Conclution: The best result show a randomforestregressor and this case \n\nWe can say that with a probability of 95% the true estimate is in this range. it should be noted that then we try to predict jp_sales, only in one case test_mean in confidence interval. And this case is randomforest regresor\n\n","f126138e":"Work with missing values in developer. In my prediction model, we don't use this variable, so i will fill na values by string 'unknown'","8bfc825a":"Work with publisher missing values","6176fea7":"Delete these 2 rows from our dataframe","2681ebef":"Work with user_score missing values"}}