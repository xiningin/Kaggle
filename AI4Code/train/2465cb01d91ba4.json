{"cell_type":{"f7ab0e93":"code","cce629cf":"code","04b21405":"code","7be6f2f2":"code","166df53b":"markdown","ab174feb":"markdown","1c2f147f":"markdown","57bfb779":"markdown","8f1954f4":"markdown"},"source":{"f7ab0e93":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport pystan\nimport matplotlib.pyplot as plt\nimport random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Loading data\ndat = pd.read_csv(\"..\/input\/results.csv\")\n\n# Splitting train and test data\ntrain = dat[(pd.to_datetime(dat.date) < pd.to_datetime(\"14-Jun-2018\")) & (pd.to_datetime(dat.date) > pd.to_datetime(\"2010\"))] # Need to think about\ntest = dat[(dat.tournament == \"FIFA World Cup\") & (dat.country == \"Russia\")]\n\n# Create home and away\ntrain[\"homei\"] = 1 - train[\"neutral\"]\ntrain[\"homej\"] = 0\n\n# Create margin\ntrain[\"margin\"] = train[\"home_score\"] - train[\"away_score\"]\n\n# Filter to needed columns and rename\ntrain = train[[\"date\", \"home_team\", \"home_score\", \"away_team\", \"away_score\", \"margin\", \"homei\", \"homej\"]]\ntrain = train.rename(columns={'home_team'  : 'teami',\n                          'home_score' : 'scorei', \n                          'away_team'  : 'teamj', \n                          'away_score' : 'scorej'})\n\n# Create a game id\ntrain[\"gameid\"] = train['teami'].astype(str) + \"_\" + train['teamj']\n\n# Set up team id mapping\nteam_key = pd.DataFrame(np.array([train.teami.append(train.teamj).unique()]).transpose(),\n                        columns = ['teamname']).reset_index()\nteam_key[\"index\"] = team_key[\"index\"] + 1\n\n# Recoding ids to be between 1 and 276\ntrain = train.merge(team_key, left_on = \"teami\" , right_on = \"teamname\")\ntrain = train.drop(columns = [\"teami\", \"teamname\"])\ntrain = train.rename(index = str, columns = {\"index\" : \"teami\"})\ntrain = train.merge(team_key, left_on = \"teamj\" , right_on = \"teamname\")\ntrain = train.drop(columns = [\"teamj\", \"teamname\"])\ntrain = train.rename(index = str, columns = {\"index\" : \"teamj\"})\n\n# Final dataset for modeling\nnames = [\"N\", \"y\", \"h_i\", \"h_j\", \"team_i\", \"team_j\", \"N_g\"]\nvalues = [len(train.index), train.margin, train.homei, train.homej, train.teami, train.teamj, 276]\n\ntrain = dict(zip(names, values))","cce629cf":"model = \"\"\"\ndata {\n    int N;\n    vector[N] y;\n    int team_i[N];\n    int team_j[N];\n    int h_i[N];\n    int h_j[N];\n    int N_g;\n}\nparameters {\n    vector[N_g] alpha_raw;\n    vector[N_g] theta_raw;\n    real eta;\n    real<lower=0> tau_theta;\n    real<lower=0> tau_alpha;\n    real<lower=0> sigma;\n}\ntransformed parameters {\n    vector[N_g] alpha;\n    vector[N_g] theta;\n    alpha = eta + alpha_raw*tau_alpha;\n    theta = theta_raw*tau_theta;\n}\nmodel {\n    \/\/ vector for conditional mean storage\n    vector[N] mu;\n\n    \/\/ priors\n    tau_theta ~ cauchy(0,1)T[0,];\n    tau_alpha ~ cauchy(0,.25)T[0,];\n    sigma ~ cauchy(0,1)T[0,];\n    eta ~ normal(.33,1);\n    theta_raw ~ normal(0,1);\n    alpha_raw ~ normal(0,1);\n\n    \/\/ define mu for the Gaussian\n    for( t in 1:N ) {\n    mu[t] = (theta[team_i[t]] + alpha[team_i[t]]*h_i[t]) - \n    (theta[team_j[t]] + alpha[team_j[t]]*h_j[t]);\n}\n\n    \/\/ the likelihood\n    y ~ normal(mu,sigma);\n}\n\"\"\"\n\nsm = pystan.StanModel(model_code = model)\nfit = sm.sampling(data = train, \n                  iter = 1500, \n                  warmup = 750,\n                  refresh = 100,\n                  control = dict(adapt_delta = 0.9))","04b21405":"# Extracting team skill levels\ntheta = pd.DataFrame(fit.extract()[\"theta\"])\nalpha = pd.DataFrame(fit.extract()[\"alpha\"])\nsigma = fit.extract()[\"sigma\"]\nalpha.columns = team_key.teamname\ntheta.columns = team_key.teamname\n\n# Filtering to top 25 teams\ntheta25 = theta[theta.median().nlargest(25).index]\ntheta25 = theta25[theta25.columns[::-1]]\n\n# Creating the plot\ntheta25.boxplot(grid = False, vert = False, showfliers = False, figsize=(12, 8))\nplt.title('Team Power Rankings (2010 to Tournament)')\nplt.xlabel('Skill Level')\nplt.ylabel('Teams')","7be6f2f2":"# Setting seed\nrandom.seed(1865)\n\n# Defining compare function\ndef compare(i, j, th= theta, a = alpha, sig = sigma, homei = 0, homej = 0, reps = 1000):\n    win_prob = []\n    \n    # Simulating specified number of games\n    for r in range(1, reps):\n        win_prob.append(\n            np.mean(\n                \n                # Ability difference\n                th[i] - th[j] +\n                \n                # Adjusting for home court\n                a[i]*homei - a[j]*homej +\n                \n                # Team performance variance\n                np.random.normal(0, \n                                 sig[random.randrange(len(sig))], \n                                 len(th.index)\n                ) > 0\n            )\n        )\n    \n    # Averaging game results\n    win_prob = np.mean(win_prob)\n    \n    # Displaying results\n    print(i + \" has a \" + str(round(win_prob*100, 2)) + \"% chance of beating \" + j)\n    \n# Looking at final game\ncompare(\"France\", \"Croatia\")","166df53b":"# Trying to Predict Results\n\nLet's take a look at what we expect the final to look like (more predictions yet to come).","ab174feb":"### Training the Model\n\nNow time to train the model on past games.","1c2f147f":"**This kernal is still in development. Please give an upvote if you liked or leave a comment if you want to see something in this kernal!**\n\nItems planned:\n\n* More predictions\n* Evaluation of model\n* Explaination of how the model works","57bfb779":"# World Cup 2018 Predictions\n\nTime to create a model that predicts international mens soccer. We'll use the 2018 World cup as our test case.\n\n## Data Cleaning\n\nHere I make the training data used for the model.\n\nPart of the beauty of the model is in its simplicity, taking only scoring margin and home and away as features. As such, there is only some filtering, name changing, and light feature creation to be done on the training set.","8f1954f4":"# Ranking the Teams\n\nLet's take a look at the teams in the top 25 (between 2010 and the tournament)."}}