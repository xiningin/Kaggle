{"cell_type":{"d2cb49a8":"code","ff554795":"code","855adf96":"code","fae741c7":"code","1475dd83":"code","59fd8e83":"code","6bf88a06":"code","e43340e3":"code","723bf333":"code","4bf8ebec":"code","bd95fdba":"code","f6ca53ff":"code","e014f319":"code","c12b7310":"code","43fd35ef":"code","68c95b28":"code","356ba3d7":"code","6f093dbc":"code","9ab89f72":"code","8340e09f":"code","57e57488":"code","e001d0e8":"code","04ca0de1":"code","d6431e3e":"code","c2aef63c":"markdown","7f0c5f7d":"markdown","b71a6bae":"markdown","4c5aa425":"markdown"},"source":{"d2cb49a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ff554795":"a = np.array([1, 2, 3])\nprint(type(a))\nprint(a.shape)\nprint(a[0], a[1], a[2])\na[0] = 5\nprint(a)\n","855adf96":"np.ones((3,1))","fae741c7":"np.random.random()","1475dd83":"print(a.sum())\nprint(a.min())\nprint(a.max())","59fd8e83":"a.mean()","6bf88a06":"b = np.array([[1, 2, 3], [4, 5, 6]])\nprint(b.shape)\nprint(b[0, 0], b[0, 1], b[1, 0])\nprint(b)","e43340e3":"#transpose of 3,2 matrix\nb.T","723bf333":"len([[1,2],[3,4],[5,6]])\nc = np.array([[1,2],[3,4],[5,6]])\nprint(c)\nprint(c.ndim)\nprint(c.dtype)\nprint(c.size)\nprint(c.shape)\n\n","4bf8ebec":"#create array with datatype\nc = np.array([1,2,3,4,], dtype=np.float64)\nprint(c)\nprint(c.dtype)\nprint(c.itemsize)\n\nc = np.array([1,2,3,4,], dtype=np.int32)\nprint(c)\nprint(c.ndim)\nprint(c.dtype)\nprint(c.itemsize) #4 bytes\n\nc = np.array([1,2,3,4,], dtype=np.int16)\nprint(c.itemsize) #2 bytes\n\nc = np.array([1,2,3,4,], dtype=np.int8)\nprint(c.itemsize) #1 bytes\n\n# Note: 8 = 1 bytes, 16 = 2 bytes, 32 = 4 bytes, 64 = 8 bytes\n# we dont have less than int8 or float8 (1 bytes)","bd95fdba":"# ndarray.ndim\narr1  = np.array([1,2,3,4])\narr2  = np.array([[1,2,3],[4,5,6]])\n\nprint(arr1)\nprint(arr1.ndim)\n\nprint(arr2)\nprint(arr2.ndim)","f6ca53ff":"#ndarray.shape\nprint(arr1.shape)\nprint(arr2.shape)","e014f319":"# ndarray.size; product of shape\nprint(arr1.size)\nprint(arr2.size)","c12b7310":"#return type of element of array\narr3 = np.array([[1.0,2.1,3.1],[4.1,5.2,6.0]])\narr3_1 = np.array([[1.0,2.1,3.1],[4.1,5.2,6.0]], dtype = np.float32)\n\n\nprint(arr1.dtype)\nprint(arr2.dtype)\nprint(arr3.dtype)\nprint(arr3_1.dtype)","43fd35ef":"#Return size in byte of each element of array (dtype\/8, 64\/8, 32\/8 bytes)\nprint(arr1.itemsize)\nprint(arr3.itemsize)\nprint(arr3_1.itemsize)","68c95b28":"# ndarray.data : \nprint(arr1.data)\nprint(arr2.data)\n\n","356ba3d7":"#\narr1  = np.array([1,2,3,4])\narr1_1  = np.array([1.0,2.1,3.1])\n\narr2  = np.array([[1,2,3],[4,5,6]], dtype = np.int32)\narr3  = np.array([[1,2,3],[4,5,6]])\narr4 = np.array([(1.5,2,3), (4,5,6)])\narr5 = np.array( [ [1,2], [3,4] ], dtype=complex )\n","6f093dbc":"# The function zeros creates an array full of zeros, \n# the function ones creates an array full of ones, and the function empty creates an array \n# whose initial content is random and depends on the state of the memory. \n# By default, the dtype of the created array is float64.\nprint(np.zeros( (3,4) ))\nprint(\"=====2D=== ones===\")\nprint(np.ones((2,3), dtype=np.int16))\nprint(\"=====3D======\")\nprint(np.ones((2,3,4), dtype=np.int16))\nprint(\"=====empty=======\")\nprint(np.empty( (2,3) ))\nprint(\"======full========\")\nprint(np.full([2,3], \"MA\"))\nprint(np.full([3], 2))\nprint(np.full([3,3], 10, dtype= float))\nprint(\"========arange======\")\nprint(np.arange(10))\nprint(\"==============\")\nprint(np.arange( 10, 30, 5 ))\nprint(\"==============\")\nprint(np.arange( 0, 2, .5 ))\nprint(\"======linspace========\")\nprint(np.linspace( 0, 2, 9 )) # 9 numbers from 0 to 2\nprint(np.linspace( 0, 2 * 3.14, 100))\nprint(\"======random.rand(tuple)========\")\nprint(np.random.rand(3,2))\nprint(\"======random.randint(low,high,size=tuple)========\")\nprint(np.random.randint(5, size=(2,3)))\nprint(np.random.randint(5, size=[2,3]))#will work\nprint(np.random.randint(5, size=(5)))\nprint(np.random.randint(5, 10, size=(5)))\n      \nprint(\"======random.random_sample(size=tuple)========\")\nprint(np.random.random_sample(size=4))\nprint(np.random.random_sample(size=(4,4)))\nprint(np.random.random_sample((4,4)))\nprint(np.random.random_sample(size=[4,2]))#will work\n\n\n","9ab89f72":"# Refer: array, zeros, zeros_like, ones, ones_like, empty, empty_like, arange, \n# linspace, numpy.random.RandomState.rand, numpy.random.RandomState.randn, fromfunction, fromfile\n\nprint(\"========zeros_like===================\")\nx = np.arange(6)\nprint(np.zeros_like(x))\n# with shape\nprint(np.zeros_like(x.reshape(2,3)))\n\nprint(np.zeros_like(x,dtype=np.float))\nprint(np.zeros_like(x,dtype=float))\n\nprint(\"=======Ones_like====================\")\nprint(np.ones_like(x))\nprint(np.ones_like(x, dtype = float))\nprint(np.ones_like(x.reshape(2,3), dtype = float))\n\nprint(\"=======empty_like====================\")\nprint(np.empty_like(x))\nprint(\"==Int==\")\nprint(np.empty_like(x, dtype = int))\nprint(\"==float==\")\nprint(np.empty_like(x.reshape(2,3), dtype=float))\nprint(np.empty_like(x, dtype = float))\n\nprint(\"=========full_like(shape_like, value, dtype)=================\")\nprint(np.full_like(x, 1))\nprint(np.full_like(x.reshape(2,3), 2))\nprint(np.full_like(x, 10, dtype= float))\nprint(np.full_like([1,2,3,4], 8, dtype = float))\n","8340e09f":"#practising it\narr1.ndim\narr2.shape\narr2.size\narr2.dtype\narr2.itemsize\n\na = np.array([1,2,3,4])\nnp.zeros((2,2), dtype=int)\nnp.ones((2,2), dtype=float)\nnp.empty((3,3))\nnp.arange(10)\nnp.arange(10, dtype=float)\nnp.arange(5, 10, dtype=float)\nnp.arange(5, 10, 2, dtype=float)\nnp.linspace(5, 10, 10, dtype=float)\nnp.full((2,2), 10)\nnp.full((2,3,1), 10, dtype=float)\nnp.full_like(np.linspace(5, 10, 10, dtype=float), 3, dtype=float)\n\nnp.random.rand(2,2)#defouylt type is float\nnp.random.randint(5, 10, size=(5))\nnp.random.random_sample(size=(5,5))\nnp.full([2,3], \"MA\")\nnp.full([2,3], \"2\").astype('int')\nnp.full([2,3], 2.2).astype('int')\nnp.array([2.2, 3.1, 2]).astype('int')\nnp.array([2.2, 3, 2. ]).astype('int')\nnp.array([2, 3, '2' ]).astype('int')\nnp.array([2.5, 3, 2.1 ]).astype('str')\nnp.array([2.5, 3, '2.1' ]).astype('float')\n\n","57e57488":"# Create a boolean array\narr2d_b = np.array([1, 0, 10], dtype='bool')\narr2d_b\n","e001d0e8":"# Create an object array to hold numbers as well as strings\narr1d_obj = np.array([1, -1.2 ,'a'], dtype=object)\narr1d_obj","04ca0de1":"# Convert an array back to a list\nprint(arr1d_obj.tolist())\nprint(arr2)\nprint(arr2.tolist())","d6431e3e":"np.arange(12)**2       ","c2aef63c":"**Fancy indexing and index tricks**","7f0c5f7d":"**Array Creation**","b71a6bae":"**Attributes of an ndarray object are:**","4c5aa425":"Array"}}