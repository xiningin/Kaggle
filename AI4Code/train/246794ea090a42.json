{"cell_type":{"a2a51b14":"code","d2b6a8b6":"code","876d72e3":"code","7b509aec":"code","ca99fbc1":"code","acbdc2c9":"code","e6517a53":"code","18e11ffb":"code","77426b9c":"code","fe31b2ec":"code","3767b7b4":"code","fb15a6ed":"code","bac3dda4":"code","1f2145b6":"code","08e9221a":"code","d5205e00":"code","bb9bb71f":"code","af2492a9":"code","021b9431":"code","c114d89b":"code","a6f888a9":"code","2d3ea495":"code","2013a202":"code","bfb23678":"code","bd7ceba3":"code","c20ee831":"code","f5160daf":"code","0db05a59":"code","5e0291da":"code","f6c1826a":"code","2809bcaa":"code","324e1c4d":"code","0ae4f24f":"code","b6a8d7f2":"code","e1bb74f0":"code","07397113":"code","a2cb76c3":"code","f93e96e4":"code","a08512d7":"code","cebd0994":"code","896ff57b":"code","70800eaf":"code","8cfc7f46":"code","ea0ac774":"markdown","63973243":"markdown","b53c6b51":"markdown","67274857":"markdown","4f49d6d4":"markdown","4bda0236":"markdown","7e6fa8af":"markdown","80d4f62e":"markdown","95c4438a":"markdown","6fa79053":"markdown","9f15efb2":"markdown","b02906b8":"markdown","9cec3c60":"markdown","f5429ef0":"markdown","0ee99b9b":"markdown","90c052c8":"markdown","2ba6b837":"markdown","9daa00d7":"markdown","7280b579":"markdown","c234ced9":"markdown","30a5481a":"markdown","b3452986":"markdown"},"source":{"a2a51b14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d2b6a8b6":"## Importing Python libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nfrom datetime import datetime","876d72e3":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')\n","7b509aec":"train.head()","ca99fbc1":"train.info()","acbdc2c9":"train_confm_date=train.groupby('Date')['ConfirmedCases','Fatalities'].sum()","e6517a53":"train_confm_date.head()","18e11ffb":"plt.figure(figsize=(16,10))\ntrain_confm_date.plot()\nplt.title('Globally COnfirmed case and Fatalities')\nplt.xticks(rotation=60)","77426b9c":"train_confirm_country=train.groupby('Country\/Region')['ConfirmedCases','Fatalities'].sum().reset_index().sort_values('ConfirmedCases',ascending=False)","fe31b2ec":"train_confirm_country.head()","3767b7b4":"plt.figure(figsize=(12,6))\nplt.bar(train_confirm_country['Country\/Region'][:10],train_confirm_country['ConfirmedCases'][:10])\nplt.bar(train_confirm_country['Country\/Region'][:10],train_confirm_country['Fatalities'][:10])\nplt.legend([' Blue Color: Confirmed cases and Yellow Color : Fatality'])","fb15a6ed":"train_confirm_country['Fatality rate in %']=train_confirm_country['Fatalities']\/train_confirm_country['ConfirmedCases']","bac3dda4":"train_confirm_country.sort_values('Fatality rate in %', ascending=False).head(10)","1f2145b6":"train_confirm_country.head(10)","08e9221a":"plt.figure(figsize=(12,6))\nplt.bar(train_confirm_country['Country\/Region'][:10],train_confirm_country['Fatality rate in %'][:10])","d5205e00":"df_top_10=train_confirm_country[:10]\ndf_top_10.head(5)\n","bb9bb71f":"sns.barplot(y='Country\/Region',x='Fatality rate in %',data=df_top_10)","af2492a9":"train_daily_report=train.groupby('Date').sum()\n\ntrain_daily_report.head()","021b9431":"plt.figure(figsize=(18,10))\ntrain_daily_report[['ConfirmedCases','Fatalities']].plot()\nplt.xticks(rotation=60)","c114d89b":"train_daily_report_china=train[train['Country\/Region']=='China']\ntrain_daily_report_china_sort=train_daily_report_china.groupby('Date')['ConfirmedCases','Fatalities'].sum()\nplt.figure(figsize=(18,8))\ntrain_daily_report_china_sort.plot()\nplt.ylabel('No.of confirmed cases')\nplt.legend(['China: COnfirmed cases till 2020-03-22'])\nplt.xticks(rotation=60)","a6f888a9":"train_daily_report_india=train[train['Country\/Region']=='India']\ntrain_daily_report_india_sort=train_daily_report_india.groupby('Date')['ConfirmedCases','Fatalities'].sum()\nplt.figure(figsize=(12,6))\ntrain_daily_report_india_sort.plot()\nplt.ylabel('No.of confirmed cases')\nplt.legend(['India: COnfirmed cases till 2020-03-22'])\nplt.xticks(rotation=60)","2d3ea495":"train_daily_report_italy=train[train['Country\/Region']=='Italy']\ntrain_daily_report_italy_sort=train_daily_report_italy.groupby('Date')['ConfirmedCases','Fatalities'].sum()\nplt.figure(figsize=(12,6))\ntrain_daily_report_italy_sort.plot()\nplt.ylabel('No.of confirmed cases')\nplt.legend(['Italy: COnfirmed cases till 2020-03-22'])\nplt.xticks(rotation=60)\n","2013a202":"train_daily_report_iran=train[train['Country\/Region']=='Iran']\ntrain_daily_report_iran_sort=train_daily_report_iran.groupby('Date')['ConfirmedCases','Fatalities'].sum()\nplt.figure(figsize=(12,6))\ntrain_daily_report_iran_sort.plot()\nplt.ylabel('No.of confirmed cases')\nplt.legend(['Iran: COnfirmed cases till 2020-03-22'])\nplt.xticks(rotation=60)","bfb23678":"train.head()","bd7ceba3":"test = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/test.csv')\ntest.head()","c20ee831":"sns.heatmap(train.isnull(),yticklabels=False, cbar=False)","f5160daf":"sns.heatmap(test.isnull(),yticklabels=False, cbar=False)","0db05a59":"## Since we have Lat and long, we can drop province and country from the the dataset\ntrain.drop(['Province\/State','Country\/Region'],axis=1,inplace=True)","5e0291da":"test.drop(['Province\/State','Country\/Region'],axis=1,inplace=True)\ndisplay(train.info())\ndisplay(test.info())","f6c1826a":"train[\"Date\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntrain['Date']=train['Date'].astype(int)\ntrain.info()","2809bcaa":"test[\"Date\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest[\"Date\"]  = test[\"Date\"].astype(int)\ntest.info()","324e1c4d":"X_train=train.drop(['Id','ConfirmedCases','Fatalities'],axis=1)\ny_confrm=train[['ConfirmedCases']]\ny_fat=train[['Fatalities']]\n","0ae4f24f":"X_test=test.drop('ForecastId',axis=1)\nX_test.head()","b6a8d7f2":"from sklearn.ensemble import RandomForestRegressor\nrand_reg = RandomForestRegressor(random_state=42)\nrand_reg.fit(X_train,y_confrm)\n\npred_grid1 = rand_reg.predict(X_test)\npred_grid1 = pd.DataFrame(pred_grid1).round()\npred_grid1.columns = [\"ConfirmedCases_prediction\"]\npred_grid1.head()","e1bb74f0":"rand_reg.fit(X_train,y_fat)\n\npred_grid2 = rand_reg.predict(X_test)\npred_grid2 = pd.DataFrame(pred_grid2).round()\npred_grid2.columns = [\"Fatality_prediction\"]\npred_grid2.head()","07397113":"sample=pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/submission.csv')","a2cb76c3":"submission=sample[['ForecastId']]\nsubmission.head()","f93e96e4":"from sklearn.tree import DecisionTreeRegressor\ntree_reg=DecisionTreeRegressor(random_state=42)\ntree_reg.fit(X_train,y_confrm)","a08512d7":"y_tree_conf=tree_reg.predict(X_test)\ny_tree_conf=pd.DataFrame(y_tree_conf)\ny_tree_conf.columns=['Confrmed_prediction']\ny_tree_conf.head()","cebd0994":"from sklearn.tree import DecisionTreeRegressor\ntree_reg=DecisionTreeRegressor(random_state=42)\ntree_reg.fit(X_train,y_fat)\n\ny_tree_fat=tree_reg.predict(X_test)\ny_tree_fat=pd.DataFrame(y_tree_fat).round()\ny_tree_fat.columns=['fatality_prediction']\ny_tree_fat.head()","896ff57b":"final_sub_tree=pd.concat([submission,y_tree_conf,y_tree_fat],axis=1)\nfinal_sub_tree.head()","70800eaf":"final_sub_tree.columns=[['ForecastId','ConfirmedCases', 'Fatalities']]\nfinal_sub_tree.head()","8cfc7f46":"final_sub_tree.to_csv(\"submission.csv\",index=False)","ea0ac774":"from sklearn.ensemble import RandomForestRegressor\nrand_reg = RandomForestRegressor(n_estimators=100,max_depth=2,random_state=42)\nrand_reg.fit(X_train,y_confrm)\n\npred_ra1 = rand_reg.predict(X_test)\npred_ra1 = pd.DataFrame(pred_ra1)\npred_ra1.columns = [\"ConfirmedCases_prediction\"]\npred_ra1.head()","63973243":"grid.best_params_","b53c6b51":"from sklearn.model_selection import GridSearchCV\nparam_grid={\n    'n_estimators':[3,10,20,30],\n    'max_depth':[1,2,3,4]\n    \n}","67274857":"final_sub.info()","4f49d6d4":"final_sub.columns=[['ForecastId','ConfirmedCases', 'Fatalities']]\nfinal_sub.head()","4bda0236":"## Phase-2: Prediction Using Random Forest Regressor + GridSearch for optimal parameters","7e6fa8af":"final_sub=pd.concat([submission,pred_grid1,pred_grid2],axis=1)\nfinal_sub.head()","80d4f62e":"Now we will see the Fatality rate for each country","95c4438a":"### Grid search for optimal parameter","6fa79053":"final_sub.to_csv(\"submission.csv\",index=False)","9f15efb2":"Let us see top 10 no of confirm case countries fatality rate in %","b02906b8":"grid = GridSearchCV(RandomForestRegressor(),param_grid,refit=True,verbose=3)","9cec3c60":"rand_reg.fit(X_train,y_fat)\n\npred_ra2 = rand_reg.predict(X_test)\npred_ra2 = pd.DataFrame(pred_ra2)\npred_ra2.columns = [\"Fatality_prediction\"]\npred_ra2.head()","f5429ef0":"We have seen from the above graph that highest no. of confirmed cases has been registered in China and followed by Italy and Iran. However , no of fatality  of China is comparatively low than Italy","0ee99b9b":"from the above table we found that Sudan is having high Fatality rate that is 10 death oout of 15 confirmed case","90c052c8":"grid.fit(X_train,y_confrm)","2ba6b837":"##  Loading the sample_submission\n","9daa00d7":"From the above graph, we can see that 12th March onward, the rate of confirm cases is increase exponialtially since other countries are also contributing to the cases.","7280b579":"Observation: We see that the fatality rate in China is very less even though the no. of confirmed is very high. Itality is having Fatality rate of around 0.08%.","c234ced9":"## Creating train and Test dataset ","30a5481a":"## Applying ML RandomForestRegression","b3452986":"We saw that both the cases in train and test dataset , missing entries are observed only in Province\/State column"}}