{"cell_type":{"67a028fe":"code","86457cd0":"code","2c6afcc9":"code","87238385":"code","3c0e2b22":"code","78ed433e":"code","2df06517":"code","4b6dd229":"code","c9007216":"code","c64d1387":"code","d3f451e3":"code","f457c1e4":"code","2bd39800":"markdown","e02694c4":"markdown","70ba149b":"markdown","392d207b":"markdown","7bcbc077":"markdown","5b8ba4fc":"markdown"},"source":{"67a028fe":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport keras\nfrom keras.preprocessing import timeseries_dataset_from_array","86457cd0":"BTC_df = pd.read_csv(\"\/kaggle\/input\/high-frequency-crypto-limit-order-book-data\/BTC_1min.csv\")","2c6afcc9":"BTC_df.head()","87238385":"BTC_df.drop(\"Unnamed: 0\", inplace = True, axis = 1)\nBTC_df.drop(\"system_time\", inplace = True, axis = 1)","3c0e2b22":"BTC_df.shape","78ed433e":"data_length = BTC_df.shape[0]\n\ntrain_length = round(0.8*data_length)\ntrain_length","2df06517":"mean_df = BTC_df[:train_length].mean()\nstd_df = BTC_df[:train_length].std()\n\nnormalized_df = (BTC_df - mean_df) \/ std_df","4b6dd229":"# Set window size\nwindow_size = 30\n\n# Windows for training dataset\nwindows_train = timeseries_dataset_from_array(normalized_df[:(train_length)], normalized_df[\"midpoint\"][window_size:(train_length+window_size)], window_size, sequence_stride=1, sampling_rate=1,\n    batch_size=64, shuffle=False, seed=None, start_index=None, end_index=None\n)\n\n\n# Windows for test dataset\nwindows_test = timeseries_dataset_from_array(normalized_df[train_length:(data_length-window_size)], normalized_df[\"midpoint\"][train_length + window_size:], 30, sequence_stride=1, sampling_rate=1,\n    batch_size=64, shuffle=False, seed=None, start_index=None, end_index=None\n)","c9007216":"model_dense = keras.models.Sequential([\n    keras.layers.Flatten(input_shape=[30, 154]),\n    keras.layers.Dense(16),\n    keras.layers.Dense(1)\n    ])\n    \nmodel_dense.compile(loss=\"mse\", optimizer=\"adam\", metrics=[\"mse\"])\nhistory = model_dense.fit(windows_train, epochs=10,verbose=1)","c64d1387":"# Predict\npreds_dense = model_dense.predict(windows_test)\n\n# Remove standardization from predictions\n\npreds_dense_unstd = preds_dense * std_df[\"midpoint\"] + mean_df[\"midpoint\"]\n\n\n# Plot \nplt.plot(preds_dense_unstd, label = \"Prediction\")\nplt.plot(BTC_df[\"midpoint\"][train_length + window_size:].reset_index(drop = True), label = \"True Price\")\nplt.legend(loc=\"upper right\")","d3f451e3":"model_lstm = keras.models.Sequential([\n    keras.layers.LSTM(16, input_shape=[30, 154]),\n    keras.layers.Dense(1)\n    ])\n    \nmodel_lstm.compile(loss=\"mse\", optimizer=\"adam\", metrics=[\"mse\"])\nhistory = model_lstm.fit(windows_train, epochs=10,verbose=1)","f457c1e4":"# Predict\npreds_lstm = model_lstm.predict(windows_test)\n\n# Remove standardization from predictions\n\npreds_lstm_unstd = preds_lstm * std_df[\"midpoint\"] + mean_df[\"midpoint\"]\n\n\n# Plot \nplt.plot(preds_lstm_unstd, label = \"Prediction\")\nplt.plot(BTC_df[\"midpoint\"][train_length + window_size:].reset_index(drop = True), label = \"True Price\")\nplt.legend(loc=\"upper right\")","2bd39800":"### Split data in to train and test","e02694c4":"### LSTM Model","70ba149b":"### Create Sliding Windows","392d207b":"### Dense Model","7bcbc077":"### Load Data ","5b8ba4fc":"### Standardize by mean and std in training data"}}