{"cell_type":{"b3918291":"code","cc5c1ac6":"code","027f9453":"code","d86ef844":"code","813c0379":"code","88cf52b5":"markdown","03a9c34d":"markdown","5903c649":"markdown","35e12f69":"markdown"},"source":{"b3918291":"import numpy as np # linear algebra\nimport itertools\nimport math\nimport collections\nimport matplotlib.pyplot as plt\n#This is the best superpermutation of 1-7 (from others)\nbestnelements=['1','2','3','4','5','6','7']\n#check length expecting 5906\nlen(best)\n","cc5c1ac6":"all_perms={}\nfor perm in itertools.permutations(elements):\n  all_perms[''.join(perm)]=1\n\ndef gen_permutations(s,a1,a2):\n  #generate a list of all the permutations of length n from the string s\n  #Preserves the order of the permutations\n  assert a1 and a2\n  ret=[]\n  for k in range(len(s)-6):\n    p = s[k:k+7]\n    if (is_perm(p)) & (p not in ret):\n      ret.append(p)\n  return ret\n\ndef is_perm(x):\n  #is the string of length 7 a permutation?\n  return x in all_perms\n\ndef mandatory_by(a1,a2):\n  #generate mandatory ones given a1, a2 are the first 2 required - e.g. '1','2'\n  #returns a string, list of mandatory ones\n  el=list(elements)\n  el.remove(a1)\n  el.remove(a2)\n  mandatory_list = [a1+a2+''.join(x) for x in itertools.permutations(el, 5)]\n  return mandatory_list","027f9453":"adjust1=10  #takes away from group1\nadjust2=1   #takes away from group3\n#the mandatory symbols\nm1='2'\nm2='4'\nprint(len(best)\/3)\nadd=6   # need to add chars at end to finish the perms\nstr1=best[:1969+add]\nstr2=best[1969:2*1969+add]\nstr3=best[2*1969:]\nstrings=[str1,str2,str3]\n#Now generate the permutations from each\ngroups=[gen_permutations(g,m1,m2) for g in strings]\nx=[len(p) for p in groups]\nprint(x, sum(x))","d86ef844":"#Now calculate the costs from permutation to the next, and then analyze distribution\nN=7\ndef distance(a,b):\n  #count the number of characters needed to have perm a followed by perm b\n  #Or, the number of characters you have to append to a to get a string containing b\n  #E.g.  '1234567' and '6712345'  would be distance of 5 because you have add '12345', len=5 to get\n  #the second permutation\n  #Assume both a,b are length N\n  for n in range(N+1):\n    if a[n:] == b[:N-n]:\n      return n   ","813c0379":"fig,axs=plt.subplots(3,1)\nfor group,ax in zip(groups,axs):\n    costs=[]\n    for i in range(len(group)-1):\n        costs.append(distance( group[i],group[i+1]))\n    ax.hist(x=costs,bins=[1,2,3],align='left')\n    ax.set_xticks([1,2,3])\n    print(f'average cost {sum(costs)\/len(costs)}')\nfig.suptitle('Distribution of costs')","88cf52b5":"This notebook will analyze the distribution of costs in the best known superpermutation of 7 elements","03a9c34d":"Conclusions:\n1.  There are no costs larger 2\n2.  Most of the costs are 1 with an average of 1.17; that is, on average it is 1.17 elements added per permutation.\n3.  It would be interesting to see how this looks with the mandatory perms added and then optimized via a TSP solver.","5903c649":"We now pick the mandatory 2 symbols.  We are free to choose these as any two symbols, which will be mapped to \ud83c\udf85 and \ud83e\udd36 in the final submission.  Various other notebooks show how to search over these, I will just pick some possibly good ones here.","35e12f69":"Following the excellent notebook from Chris Deotte, we take this superpermutation and create lists of each permutation it contains, in order.  We then break it into 3 groups of permutations, approximately in third.  The adjust constants allow us to try to make things even at the end, but not worrying about that for now.  Some helper functions first - generate a dict of all possible permutations so we can easily test if something is a permutation, and then a function to create all the permutations from a string."}}