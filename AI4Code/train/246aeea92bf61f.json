{"cell_type":{"7075e8ec":"code","35c58d36":"code","d68cc4b1":"code","50fa457b":"code","62c077c4":"code","bcbac105":"code","a5e41219":"code","0b8fd9d0":"code","860ff478":"code","8a8ee07a":"code","21316391":"code","59e9851a":"code","65718251":"code","3c93df9f":"code","041013e8":"code","566209d9":"code","e0358119":"code","16a43c87":"code","b3445df8":"code","8f3684e1":"code","e54eb85c":"code","0d5f0fea":"code","bce9aa0a":"code","918bfed6":"code","0ac86948":"code","f5f44ad6":"markdown","0cea30b7":"markdown"},"source":{"7075e8ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35c58d36":"pip install pandas-alive\n","d68cc4b1":"pip install bar_chart_race\n","50fa457b":"pip install quickda","62c077c4":"# Get Data\ndata = pd.read_csv('\/kaggle\/input\/world-covid-vaccination-progress\/Covid_vaccinated_in_the_world.csv')\n\n","bcbac105":"data.info()","a5e41219":"data.describe()","0b8fd9d0":"data.mean()","860ff478":"data.mode()\n","8a8ee07a":"#Standard Deviation\nstd = np.std(data)\nprint(std)","21316391":"#Coefficient of Variation\ncv = np.std(data) \/ np.mean(data)\nprint(cv)","59e9851a":"#Variance\nvar_full = np.var(data)\nprint(var_full)","65718251":"import pandas_profiling\nreport = pandas_profiling.ProfileReport(data)\nfrom IPython.display import display\ndisplay(report)","3c93df9f":"sns.pairplot(data,palette='bright')\n%time","041013e8":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(data, kind=\"reg\", plot_kws={'line_kws':{'color':'red'}})\nplt.show()\n%time","566209d9":"# Importing libraries\nfrom quickda.explore_data import *\nfrom quickda.clean_data import *\nfrom quickda.explore_numeric import *\nfrom quickda.explore_categoric import *\nfrom quickda.explore_numeric_categoric import *\nfrom quickda.explore_time_series import *","e0358119":"eda_num(data)","16a43c87":"eda_num(data, method=\"correlation\")","b3445df8":"#Add Geocoding\n!pip install geopy==1.22.0\nimport math\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\nimport folium\nfrom folium import Marker,Circle\nfrom folium.plugins import MarkerCluster\nfrom geopandas.tools import geocode\nresult = geocode(\"The Great Pyramid of Giza\", provider=\"nominatim\")\nresult","8f3684e1":"point = result.geometry.iloc[0]\nprint(\"Latitude:\", point.y)\nprint(\"Longitude:\", point.x)","e54eb85c":"def my_geocoder(row):\n    try:\n        point = geocode(row, provider='nominatim').geometry.iloc[0]\n        return pd.Series({'Latitude': point.y, 'Longitude': point.x, 'geometry': point})\n    except:\n        return None\n\ndata[['Latitude', 'Longitude', 'geometry']] = data.apply(lambda x: my_geocoder(x['country']), axis=1)\n\nprint(\"{}% of addresses were geocoded!\".format(\n    (1 - sum(np.isnan(data[\"Latitude\"])) \/ len(data)) * 100))\n\n# Drop data that were not successfully geocoded\ndata = data.loc[~np.isnan(data[\"Latitude\"])]\ndata = gpd.GeoDataFrame(data, geometry=data.geometry)\ndata.crs = {'init': 'epsg:4326'}\ndata.head()","0d5f0fea":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['vaccinated_in_percentage'])+\" vaccinated_in_percentage\"))\nv_map.add_child(mc)\n\n# Display the map\nv_map","bce9aa0a":"# Create a Bubble base map\n#Agenda = blue-good , yellow - average , red - bad\nm_bubble_focus = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val >= 30.0:\n        return 'blue'\n    if val >= 11 and val<= 30:\n        return 'yellow'\n    else:\n        return 'red'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['vaccinated_in_percentage'])).add_to(m_bubble_focus)\n\n# Display the map\nm_bubble_focus","918bfed6":"# Create the map\nv_map = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2) \n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows(): \n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(Marker(location=[row['Latitude'], row['Longitude']],\n                            tooltip=str(row['doses_per100'])+\" doses_per100\"))\nv_map.add_child(mc)\n\n# Display the map\nv_map","0ac86948":"# Create a Bubble base map\n#Agenda = blue-good , yellow - average , red - bad\nm_bubble_focus = folium.Map(location=[39.760982,10.00065], tiles='cartodbpositron', zoom_start=2)\n\ndef color_producer(val):\n    if val >= 49.0:\n        return 'blue'\n    if val >= 3 and val<= 49:\n        return 'yellow'\n    else:\n        return 'red'\n\n# Add a bubble map to the base map\nfor i in range(0,len(data)):\n    Circle(\n        location=[data.iloc[i]['Latitude'], data.iloc[i]['Longitude']],\n        radius=20,\n        color=color_producer(data.iloc[i]['doses_per100'])).add_to(m_bubble_focus)\n\n# Display the map\nm_bubble_focus","f5f44ad6":"# Supply and Demand Maps","0cea30b7":"# Percentage Vaccinated Maps"}}