{"cell_type":{"b7105b8c":"code","0386fc49":"code","7ff1b5d9":"code","c3443ecd":"code","09c487b0":"code","98ad4714":"code","cc706ded":"code","658e1efb":"code","0e90a1ab":"code","66751526":"code","77badfb7":"code","cd942216":"code","050eefd8":"code","6723d5a7":"code","6a70001c":"code","520a2fb7":"code","07c5048d":"code","cf3d327b":"code","c828372f":"code","c666c773":"code","5c2cf5d3":"code","4f33cc54":"code","6b2afbbe":"code","1e00ea97":"code","9176ee32":"code","5aa9ce80":"code","f16fe277":"code","c2828853":"code","c8ac0f8c":"code","0cd577cb":"code","4540f012":"code","080280ab":"code","69e0213f":"code","8416c6ca":"code","a22ae89b":"code","feffb035":"code","d7c94361":"code","83189d22":"code","4f11a9f7":"code","2351a1ff":"code","2f2f3d19":"code","16bf5b9c":"code","febd99f3":"code","9521084c":"code","3aafcb69":"code","860d4f0c":"code","62780e19":"code","62e961ca":"code","c69f51b3":"code","17921a05":"code","52d2e397":"code","881be119":"code","1e9c9e63":"code","ebd73c11":"code","4fbfabd2":"code","ae86d5ae":"code","c692f9ba":"code","f0541023":"markdown","c1947d57":"markdown","02339b3b":"markdown","9deeb196":"markdown","25b6bb00":"markdown","ff5206ff":"markdown","a02b6605":"markdown","1281d2b9":"markdown","f2447fd1":"markdown","83d85a68":"markdown","4b4444b6":"markdown","7d7e73f2":"markdown","2adcd32c":"markdown","3d081cf0":"markdown","716e9b1d":"markdown","887a5f83":"markdown","937a5fa3":"markdown","f8be4d59":"markdown","440cc736":"markdown","2b492038":"markdown","7e906350":"markdown","b7ef52b7":"markdown","bd0b58b1":"markdown","c543d26f":"markdown","c17fcd30":"markdown","0ffe8ae6":"markdown"},"source":{"b7105b8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0386fc49":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib\nmpl.rcParams['figure.figsize'] = (8,6)\nmpl.rcParams['axes.grid'] = False\npd.get_option(\"display.max_columns\")","7ff1b5d9":"dataframe = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')","c3443ecd":"df = dataframe.copy()","09c487b0":"print(\"Total Features : \",df.shape[1])\nprint(\"Total Data     : \",df.shape[0])","98ad4714":"print(\"Featues : \",df.columns.tolist())","cc706ded":"df.info()","658e1efb":"df.describe()","0e90a1ab":"axis = sns.heatmap(df.isnull(),cbar=False,cmap='viridis')\naxis.set_title('Heatmap for Null Values', size=18)\naxis.set_xlabel('Features', size=14)\naxis.set_ylabel('Count', size=14)\nplt.show()","66751526":"df.head(2)","77badfb7":"axis=sns.histplot(x='charges',kde=True,data=df)\naxis.set_title('Distribution of the Expense variable.', size=18)\naxis.set_xlabel('Medical Cahrges', size=14)\naxis.set_ylabel('Count', size=14)\nplt.show()","cd942216":"cat_feat = [feature for feature in df.columns if df[feature].dtype=='O']\nprint(\"Categorical Features : \",cat_feat)","050eefd8":"for feature in cat_feat:\n    print(\"Unique variables : \",df[feature].unique())","6723d5a7":"for feature in cat_feat:\n    axis=sns.countplot(x=feature,palette='tab10',data=df)\n    for patch in axis.patches:\n        axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n             s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n             ha = 'center', size = 25, rotation = 0, weight = 'bold',\n             color = 'black')\n    plt.xlabel(feature, size=14)\n    plt.ylabel('Count', size=14)\n    plt.xticks(rotation=90)\n    plt.show()","6a70001c":"num_feat = [feature for feature in df.columns if df[feature].dtype!='O']\nprint(\"Numerical Features : \",num_feat)","520a2fb7":"for feature in num_feat:\n    plt.figure(figsize=(18,8))\n    axis=sns.histplot(x=feature,palette='rocket',kde=True,bins=20,data=df)\n    for patch in axis.patches:\n        axis.text(x = patch.get_x() + patch.get_width()\/2, y = patch.get_height()\/2,\n             s = f\"{np.round(patch.get_height()\/len(df)*100, 1)}%\",\n             ha = 'center', size = 15, rotation = 0, weight = 'bold',\n             color = 'black')\n    plt.xlabel(feature, size=14)\n    plt.ylabel('Count', size=14)\n    plt.xticks(rotation=90)\n    plt.show()","07c5048d":"plt.figure(figsize=(12,8))\naxis=sns.scatterplot(x='age', y='charges',data=df)\naxis.set_xlabel('age', size=14)\naxis.set_ylabel('Charges', size=14)\nplt.show()","cf3d327b":"plt.figure(figsize=(12,8))\naxis=sns.scatterplot(x='bmi', y='charges',data=df)\naxis.set_xlabel('BMI', size=14)\naxis.set_ylabel('Charges', size=14)\nplt.show()","c828372f":"fig, ax = plt.subplots(3, 1, figsize=(6, 12))\nfor var, subplot in zip(cat_feat, ax.flatten()):\n    sns.boxplot(x=var, y='charges', data=df, ax=subplot)","c666c773":"df.head(3)","5c2cf5d3":"df['sex'] = df['sex'].replace('female',0)\ndf['sex'] = df['sex'].replace('male',1)","4f33cc54":"df['smoker'] = df['smoker'].replace('no',0)\ndf['smoker'] = df['smoker'].replace('yes',1)","6b2afbbe":"region = pd.get_dummies(df['region'])\nregion","1e00ea97":"df = pd.concat([df,region],axis=1)","9176ee32":"drop_columns = ['region']","5aa9ce80":"df.drop(drop_columns,axis=1,inplace=True)","f16fe277":"df.head(2)","c2828853":"plt.figure(figsize=(10,8))\naxis = sns.heatmap(df.corr(),cmap='coolwarm',cbar=True,annot=True)\naxis.set_title('correlation Heatmap', size=18)\nplt.show()","c8ac0f8c":"X = df.drop('charges',axis=1)\ny = df['charges']","0cd577cb":"from sklearn.model_selection import train_test_split","4540f012":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=101)","080280ab":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score","69e0213f":"selector = SelectFromModel(Lasso(alpha=0.05,random_state=101))","8416c6ca":"selector.fit(X_train,y_train)","a22ae89b":"selector.get_support()","feffb035":"lr_regressor = LinearRegression()\nlr_regressor.fit(X_train,y_train)\nlr_y = lr_regressor.predict(X_test)","d7c94361":"sns.distplot(lr_y-y_test)","83189d22":"print('Coefficient o R^2 <-- on train data : {}'.format(lr_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(lr_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(lr_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(lr_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(lr_y,y_test)))","4f11a9f7":"svr_regressor = SVR()\nsvr_regressor.fit(X_train,y_train)\nsvr_y = svr_regressor.predict(X_test)","2351a1ff":"sns.distplot(svr_y-y_test)","2f2f3d19":"print('Coefficient o R^2 <-- on train data : {}'.format(svr_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(svr_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(svr_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(svr_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(svr_y,y_test)))","16bf5b9c":"knn_regressor = KNeighborsRegressor()\nknn_regressor.fit(X_train,y_train)\nknn_y = knn_regressor.predict(X_test)","febd99f3":"sns.distplot(knn_y-y_test)","9521084c":"print('Coefficient o R^2 <-- on train data : {}'.format(knn_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(knn_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(knn_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(knn_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(knn_y,y_test)))","3aafcb69":"dt_regressor = DecisionTreeRegressor()\ndt_regressor.fit(X_train,y_train)\ndt_y = dt_regressor.predict(X_test)","860d4f0c":"sns.distplot(dt_y-y_test)","62780e19":"print('Coefficient o R^2 <-- on train data : {}'.format(dt_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(dt_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(dt_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(dt_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(dt_y,y_test)))","62e961ca":"rf_regressor = RandomForestRegressor()\nrf_regressor.fit(X_train,y_train)\nrf_y = rf_regressor.predict(X_test)","c69f51b3":"sns.distplot(rf_y-y_test)","17921a05":"print('Coefficient o R^2 <-- on train data : {}'.format(rf_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(rf_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(rf_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(rf_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(rf_y,y_test)))","52d2e397":"xgb_regressor = XGBRegressor()\nxgb_regressor.fit(X_train,y_train)\nxgb_y = xgb_regressor.predict(X_test)","881be119":"sns.distplot(xgb_y-y_test)","1e9c9e63":"print('Coefficient o R^2 <-- on train data : {}'.format(xgb_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(xgb_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(xgb_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(xgb_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(xgb_y,y_test)))","ebd73c11":"adab_regressor = AdaBoostRegressor()\nadab_regressor.fit(X_train,y_train)\nadb_y = adab_regressor.predict(X_test)","4fbfabd2":"sns.distplot(adb_y-y_test)","ae86d5ae":"print('Coefficient o R^2 <-- on train data : {}'.format(adab_regressor.score(X_train,y_train)))\nprint('Coefficient o R^2 <-- on test data : {}'.format(adab_regressor.score(X_test,y_test)))\nprint(\"Mean absolute Error : \",mean_absolute_error(adb_y,y_test))\nprint(\"Mean squared Error : \",mean_squared_error(adb_y,y_test))\nprint(\"Root Mean Squared Error : \",np.sqrt(mean_squared_error(adb_y,y_test)))","c692f9ba":"lr_df = pd.DataFrame(data=[lr_regressor.score(X_train,y_train),lr_regressor.score(X_test, y_test), mean_absolute_error(y_test, lr_y), mean_squared_error(y_test, lr_y), np.sqrt(mean_squared_error(y_test, lr_y))], \n             columns=['Linear Regression'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\nsvr_df = pd.DataFrame(data=[svr_regressor.score(X_train,y_train),svr_regressor.score(X_test, y_test), mean_absolute_error(y_test, svr_y),mean_squared_error(y_test, svr_y), np.sqrt(mean_squared_error(y_test, svr_y))], \n             columns=['Support Vector Regressor'],index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\nknn_df = pd.DataFrame(data=[knn_regressor.score(X_train,y_train),knn_regressor.score(X_test, y_test), mean_absolute_error(y_test, knn_y), mean_squared_error(y_test, knn_y), np.sqrt(mean_squared_error(y_test, knn_y))], \n             columns=['K Nearest Neighbour'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\n\ndt_df = pd.DataFrame(data=[dt_regressor.score(X_train,y_train),dt_regressor.score(X_test, y_test), mean_absolute_error(y_test, dt_y), mean_squared_error(y_test, dt_y), np.sqrt(mean_squared_error(y_test, dt_y))], \n             columns=['Decision Tree'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\nrf_df = pd.DataFrame(data=[rf_regressor.score(X_train,y_train),rf_regressor.score(X_test, y_test), mean_absolute_error(y_test, rf_y), mean_squared_error(y_test, rf_y), np.sqrt(mean_squared_error(y_test,rf_y))], \n             columns=['Random Forest Score'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\nxgb_df = pd.DataFrame(data=[xgb_regressor.score(X_train,y_train),xgb_regressor.score(X_test, y_test), mean_absolute_error(y_test, xgb_y), mean_squared_error(y_test, xgb_y), np.sqrt(mean_squared_error(y_test,xgb_y))], \n             columns=['XGBoost'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\nadb_df = pd.DataFrame(data=[adab_regressor.score(X_train,y_train),adab_regressor.score(X_test, y_test), mean_absolute_error(y_test, adb_y), mean_squared_error(y_test, adb_y), np.sqrt(mean_squared_error(y_test,adb_y))], \n             columns=['AdaBoost'], index=[\"R2 Score Train\",\"R2 Score Test\", \"Root Mean Absolute Error\", \"Mean Square Error\", \"Root Mean Square Error\"])\n\n\ndf_models = round(pd.concat([lr_df,svr_df,knn_df,dt_df,rf_df,xgb_df,adb_df], axis=1),3)\ncolors = [\"bisque\",\"ivory\",\"sandybrown\",\"steelblue\",\"lightsalmon\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nbackground_color = \"white\"\n\nfig = plt.figure(figsize=(18,26)) # create figure\ngs = fig.add_gridspec(4, 2)\ngs.update(wspace=0.1, hspace=0.5)\nax0 = fig.add_subplot(gs[0, :])\n\nsns.heatmap(df_models.T, cmap=colormap,annot=True,fmt=\".1%\",vmin=0,vmax=0.95, linewidths=2.5,cbar=False,ax=ax0,annot_kws={\"fontsize\":16})\nfig.patch.set_facecolor(background_color) # figure background color\nax0.set_facecolor(background_color) \n\nax0.text(0,-0.5,'Model Comparison',fontsize=20,fontweight='bold',fontfamily='serif')\nplt.show()","f0541023":"## **Decision Tree**","c1947d57":"## **Linear Regression**","02339b3b":"**Performace Metrics for Adaboost**","9deeb196":"**Most of the expenses are lies between 0-15000 mostly severe cases require large amount of money to treat**","25b6bb00":"## **K Nearest Neighbour**","ff5206ff":"**Performace Metrics for SVR**","a02b6605":"**Categorical Features**","1281d2b9":"**From the above Histogram**\n* Age is uniformly distributed most probably it will not affect our dependent variable but we will check its corelation with our dependent variable later.\n* BMI is forming a nice bell curve meaning the data is normally distributed.\n* Children data is Left skewed if it is significant with our dependent data we will transform the data into normal distribution.\n* Charges is our dependent variable which we will going to figure it out.","f2447fd1":"**We have the data for young and old too, we can see childrens from 0 to 5 but from data we came to know most probably larger population has 1 children.**","83d85a68":"**Somehow medical charges increases with the increase in age but we also have some cases were in low age we have large medical expenses.**","4b4444b6":"## **Random Forest**","7d7e73f2":"## **XGBoost Regressor**","2adcd32c":"**Performace Metrics for XGBost Regressor**","3d081cf0":"**We can see charges for mid range BMI peoples are quite higher than the people having low and high BMI and of course we still have some exceptions.**","716e9b1d":"**Performace Metrics for Linear Regression**","887a5f83":"**Performace Metrics for Decision Tree**","937a5fa3":"**We have Data :-**\n* Gender is in the ratio approx 50%.\n* Smokers are in the ratio 20% : 80%.\n* Almost equivalent cases from all the four regions.","f8be4d59":"**We don't have any null values in our dataset**","440cc736":"**We have only 2 String features and 4 are numeric features**","2b492038":"**Unique values in our categorical features**","7e906350":"**Performace Metrics for Random Forest**","b7ef52b7":"# **Performance Metrics**","bd0b58b1":"## **SVR**","c543d26f":"## **Adaboost**","c17fcd30":"**From the above subplots, Boxplots We can find:-**\n* Average charges for male is higher than the female.\n* Charges for smokers are veru high than the non smokers.\n* The average charges for southease region is higher than all the regions and we also conclude that the southwest region has may me low cases or only minor cases.\n","0ffe8ae6":"**Performace Metrics for KNN**"}}