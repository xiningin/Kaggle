{"cell_type":{"0be16ae2":"code","22bff85d":"code","718d62fc":"code","a7c8c829":"code","b07c3fca":"code","c23413e8":"code","3451030c":"code","a4ff9998":"code","2ace2a15":"code","c453c433":"code","8882b836":"code","b7dc8b2c":"code","d19be514":"code","2d21a0d3":"code","49aee6b1":"code","a47921c5":"code","414d653f":"markdown"},"source":{"0be16ae2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22bff85d":"train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain.head()","718d62fc":"plt.figure(figsize=(15,7))\nplt.title('Number of digit classes')\ng=sns.countplot(train.label,palette='icefire')\ng.set(xlabel='Numbers', ylabel='Count')\nplt.show()","a7c8c829":"x_train=train.drop(labels='label',axis=1)\ny_train=train.label","b07c3fca":"arr=np.array(x_train.iloc[245])\narr=arr.reshape((28,28))\narr2=np.array(x_train.iloc[167])\narr2=arr2.reshape((28,28))","c23413e8":"plt.subplot(1,2,1)\nplt.axis('off')\nplt.title(y_train[245])\nplt.imshow(arr,cmap='gray');\n\nplt.subplot(1,2,2)\nplt.axis('off')\nplt.title(y_train[167])\nplt.imshow(arr2,cmap='gray');","3451030c":"#Normalize Data for images\nx_train=x_train\/255.0\ntest=test\/255.0\nprint('x_train',x_train.shape)\nprint('test',test.shape)","a4ff9998":"#Reshape\nx_train=x_train.values.reshape(-1,28,28,1)\ntest=test.values.reshape(-1,28,28,1)\nprint('x_train',x_train.shape)\nprint('test',test.shape)","2ace2a15":"#Label Encoding\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\ny_train=to_categorical(y_train,num_classes=10)","c453c433":"y_train[245]","8882b836":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val = train_test_split(x_train,y_train, test_size=0.1,random_state=2)\n\nprint('x_train shape',x_train.shape)\nprint('x_value shape',x_val.shape)\nprint('y_train shape',y_train.shape)\nprint('y_value shape',y_val.shape)","b7dc8b2c":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5), padding = 'Same',\n                 activation = 'relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), padding = 'Same',\n                 activation = 'relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3), padding = 'Same',\n                 activation = 'relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.25))\n#fully connected\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n","d19be514":"### Define Optimizer\n# Learning Rate'i de\u011fi\u015ftirerek \u00f6\u011frenmeyi optimize eder\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\n\n### Compile model\n# e\u011fer 2 li s\u0131n\u0131fland\u0131rma var ise binary_crossentropy, daha fazla ise categorical_crossentropy\nmodel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n\n### Epochs and Batch Size\n#\u00d6r: 10 resmimiz var ve batch size'\u0131  2 olarak belirledik. 10\/2 =5 \n#5 defa batch yapacak demektir. Her batch'te 2 resim i\u00e7in forward ve backward yapacak\n#epoch'da bu i\u015flemi ka\u00e7 kere yapaca\u011f\u0131d\u0131r.\nepochs=35\nbatch_size=250\n\n### Data augmentation\n#Data ile oynayarak \u00e7e\u015fitlendiriyor\n\ndatagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    rotation_range=0.5, #Rotasyonu %5 derece de\u011fi\u015ftirir \n    zoom_range = 0.5,   #zoom'u %5 derece de\u011fi\u015ftirir\n    width_shift_range=0.5, #Sa\u011fa sola %5 kayd\u0131r\u0131r\n    height_shift_range=0.5, #Sa\u011fa sola %5 kayd\u0131r\u0131r\n    horizontal_flip=False,\n    vertical_flip=False)\ndatagen.fit(x_train)\n\n### Fit the Model\nhistory = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs=epochs, validation_data = (x_val,y_val), steps_per_epoch=x_train.shape[0]\/\/batch_size)\n\n\n\n\n\n","2d21a0d3":"prd=model.predict_classes(test)\nprd=to_categorical(prd,num_classes=10)\notn=np.array([0,1,2,3,4,5,6,7,8,9])\notn.reshape(10,1)\nprd2=np.dot(prd,otn)\nimgl=np.arange(1,28001,1)","49aee6b1":"label=pd.Series(imgl,name='ImageId').astype(int)\nprd3=pd.Series(prd2,name='Label').astype(int)\nresults2 = pd.concat([label,prd3],axis=1)\nresults2.to_csv('digit2.csv',index=False)","a47921c5":"results2","414d653f":"## Implementing with Keras\n### Create Model\n conv > max_pool > drop out > conv > max_pooling > fully connected\n \n Drop out is randomly delete neurons"}}