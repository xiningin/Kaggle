{"cell_type":{"774d3983":"code","81f6ff05":"code","f098b3df":"code","bb5f90f9":"code","6738f36e":"code","ae3c9ba4":"code","0691ecb3":"code","8ad39e8a":"code","051a5cee":"code","b7751050":"code","c993e078":"code","f4b203b0":"code","6c0d1a36":"code","56bb71d0":"code","0c0510d1":"code","5c6b4a27":"code","ca1ea112":"code","9615078b":"code","46d69566":"code","c23c2651":"code","a611671e":"code","cf02e35f":"code","cf68444e":"code","5ea228f4":"code","f2f5eccc":"code","8f3fe310":"code","ab90af5f":"code","19e57767":"code","a9228de8":"code","e9b2c8ae":"code","875dafed":"code","3d55cf8f":"code","bafa61dd":"markdown","080ec88d":"markdown","30b54ff6":"markdown","193716f4":"markdown","4903b8fa":"markdown","536cb243":"markdown","76ccfc87":"markdown","939ea182":"markdown","bc08613b":"markdown","83281582":"markdown","3c4b277d":"markdown","72061c44":"markdown","c6f88630":"markdown","b2230609":"markdown","6bf684f0":"markdown","90ee48db":"markdown","38691736":"markdown","1895e5d8":"markdown","e3a96650":"markdown","4e63e715":"markdown"},"source":{"774d3983":"!conda install -c conda-forge folium=0.5.0 --yes # comment\/uncomment if not yet installed.\n!conda install -c conda-forge geopy --yes        # comment\/uncomment if not yet installed\n\nimport numpy as np # library to handle data in a vectorized manner\nimport pandas as pd # library for data analsysis\n\n# Numpy and Pandas libraries were already imported at the beginning of this notebook.\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport json # library to handle JSON files\nfrom geopy.geocoders import Nominatim # convert an address into latitude and longitude values\nfrom pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n# Matplotlib and associated plotting modules\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\n# import k-means from clustering stage\nfrom sklearn.cluster import KMeans\nimport folium # map rendering library\n\nimport requests # library to handle requests\nimport lxml.html as lh\nimport bs4 as bs\nimport urllib.request\n\nprint('Libraries imported.')","81f6ff05":"data_area=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/shayy07\/Coursera_Capstone\/master\/OfficeArea.csv\")\ndata_area","f098b3df":"MyLM=data_area[\"Landmark\"]\nMyLM","bb5f90f9":"# confidential\ngoogle_key=\"AIzaSyBkPw7COxbYTtvc4gTXDMRyxbYdxHHSo3M\"\ncid=\"R0A4V12LCTHAPQXIP5103KSSIWCCLOLSTZB3PRJUGMSPJNRN\"\ncsecret=\"20SFFWC52FAZJEMZBRE450QB1H05F4YJL5QRGTK0I0F4ANRR\"","6738f36e":"data_area['Latitude'] = 0.0\ndata_area['Longitude'] = 0.0\n\nfor idx,area in data_area['Landmark'].iteritems():\n    area=area + ' ' + 'Singapore'\n    url = 'https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address={}&key={}'.format(area,google_key)\n    #url='https:\/\/maps.googleapis.com\/maps\/api\/place\/findplacefromtext\/json?input={}&key={}.format(area,google_key)\n    lat = requests.get(url).json()[\"results\"][0][\"geometry\"][\"location\"]['lat']\n    lng = requests.get(url).json()[\"results\"][0][\"geometry\"][\"location\"]['lng']\n    data_area.loc[idx,'Latitude'] = lat\n    data_area.loc[idx,'Longitude'] = lng","ae3c9ba4":"geo = Nominatim(user_agent='My-IBMNotebook')\naddress = 'Singapore'\nlocation = geo.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\n\n# create map\nmap_area = folium.Map(location=[latitude, longitude], tiles=\"Openstreetmap\", zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(7)\nys = [i+x+(i*x)**2 for i in range(7)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\ncluster=0\nfor lat, lon, poi, cat in zip(data_area['Latitude'], data_area['Longitude'], data_area['Area'], data_area['Landmark']):\n    cluster=cluster+1\n    label = folium.Popup(str(cat) + '-' + str(poi), parse_html=True)\n    folium.Marker(\n        [lat, lon],\n        popup=label).add_to(map_area)\n       \nmap_area","0691ecb3":"url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore'\nvenue_list=[]","8ad39e8a":"for idx,lat in data_area['Latitude'].iteritems():\n    lng=data_area.loc[idx,'Longitude']\n    name=data_area.loc[idx,'Area']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=300,\n      limit=80,\n      query='food'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Other Food\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","051a5cee":"for idx,lat in data_area['Latitude'].iteritems():\n    lng=data_area.loc[idx,'Longitude']\n    name=data_area.loc[idx,'Area']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=300,\n      limit=80,\n      query='Caf\u00e9'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Caf\u00e9\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","b7751050":"for idx,lat in data_area['Latitude'].iteritems():\n    lng=data_area.loc[idx,'Longitude']\n    name=data_area.loc[idx,'Area']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=300,\n      limit=80,\n      query='gym'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Gym\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","c993e078":"nearby_venues = pd.DataFrame([item for venue_list in venue_list for item in venue_list])\nnearby_venues.columns = ['Area','Area_Latitude','Area_Longitude','Venue_Main_Category','Venue_ID','Venue','Venue_Latitude','Venue_Longitude','Venue_Category']\n\nnearby_venues.head()","f4b203b0":"nearby_venues.groupby(['Venue_Main_Category'])['Venue_Category'].value_counts(normalize=False)","6c0d1a36":"nearby_venues_clean=nearby_venues.copy()\n\nlist_cafe_filter=['Bar','Fast Food Restaurant']\nindexNames = nearby_venues_clean[ (nearby_venues_clean['Venue_Main_Category'] == 'Caf\u00e9') & (nearby_venues_clean['Venue_Category'].isin(list_cafe_filter)) ].index\nnearby_venues_clean.drop(indexNames , inplace=True)\n\nlist_Gym_filter=['Hotel','Residential Building (Apartment \/ Condo)','Martial Arts Dojo','Building','Hotel Pool','Track']\nindexNames = nearby_venues_clean[ (nearby_venues_clean['Venue_Main_Category'] == 'Gym') & (nearby_venues_clean['Venue_Category'].isin(list_Gym_filter)) ].index\nnearby_venues_clean.drop(indexNames , inplace=True)\n\nlist_Food_filter=['Caf\u00e9']\nindexNames = nearby_venues_clean[ (nearby_venues_clean['Venue_Main_Category'] == 'Other Food') & (nearby_venues_clean['Venue_Category'].isin(list_Food_filter)) ].index\nnearby_venues_clean.drop(indexNames , inplace=True)\n\n\nfor idx,cat_m in nearby_venues_clean['Venue_Main_Category'].iteritems():\n    cat=nearby_venues_clean.loc[idx,'Venue_Category']\n    if cat_m=='Caf\u00e9' or cat_m=='Gym':\n        nearby_venues_clean.loc[idx,'Final_Category']=cat_m\n    else:\n        nearby_venues_clean.loc[idx,'Final_Category']=cat\n    \nnearby_venues_clean.head()\n#nearby_venues_clean[nearby_venues_clean['Area']=='Raffles Place Area'].groupby(['Venue_Main_Category'])['Venue_Category'].value_counts(normalize=False)","56bb71d0":"venue_freq=pd.crosstab(nearby_venues_clean.Area,nearby_venues_clean.Venue_Main_Category,margins=False)\nvenue_freq.sort_values('Gym',ascending=False)","0c0510d1":"from scipy.stats import pearsonr\n# calculate Pearson's correlation\ncorr, _ = pearsonr(venue_freq[\"Caf\u00e9\"], venue_freq[\"Gym\"])\nprint('Pearsons correlation: %.3f' % corr)","5c6b4a27":"shenton=nearby_venues_clean[nearby_venues_clean['Area']=='Shenton Way Area']\nshenton.head()","ca1ea112":"geo = Nominatim(user_agent='My-IBMNotebook')\naddress = 'Singapore'\nlocation = geo.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\n\n# create map\nmap_shenton = folium.Map(location=[latitude, longitude], tiles=\"Openstreetmap\", zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(3)\nys = [i+x+(i*x)**2 for i in range(3)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\ncluster=0\nfor lat, lon, poi, cat in zip(shenton['Venue_Latitude'], shenton['Venue_Longitude'], shenton['Venue'], shenton['Venue_Main_Category']):\n    if cat=='Gym':\n        cluster=0\n        color='green'\n    elif cat=='Caf\u00e9':\n        cluster=1\n        color='red'\n    else:\n        cluster=2\n        color='yellow'\n        \n    label = folium.Popup(str(cat) + '-' + str(poi), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=6,\n        popup=label,\n        color=color,\n        #color=rainbow[cluster-1],\n        fill=True,\n        fill_color=color,\n        #fill_color=rainbow[cluster-1],\n        fill_opacity=1).add_to(map_shenton)\n       \nmap_shenton","9615078b":"shenton_gym=shenton[shenton['Venue_Main_Category']=='Gym']\nvenue_list=[]","46d69566":"for idx,lat in shenton_gym['Venue_Latitude'].iteritems():\n    lng=shenton_gym.loc[idx,'Venue_Longitude']\n    name=shenton_gym.loc[idx,'Venue']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=50,\n      query='Caf\u00e9'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Caf\u00e9\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","c23c2651":"for idx,lat in shenton_gym['Venue_Latitude'].iteritems():\n    lng=shenton_gym.loc[idx,'Venue_Longitude']\n    name=shenton_gym.loc[idx,'Venue']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=50,\n      query='food'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Other food\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","a611671e":"for idx,lat in shenton_gym['Venue_Latitude'].iteritems():\n    lng=shenton_gym.loc[idx,'Venue_Longitude']\n    name=shenton_gym.loc[idx,'Venue']\n    sll=str(lat) + ',' + str(lng)\n    params = dict(\n      client_id=cid,\n      client_secret=csecret,\n      v='20180323',\n      ll=sll,\n      radius=50,\n      query='Gym'\n    )\n    resp = requests.get(url=url, params=params).json()[\"response\"]['groups'][0]['items']\n    main_category=\"Gym\"\n    venue_list.append([(name,lat,lng,main_category,v['venue']['id'],v['venue']['name'],v['venue']['location']['lat'],v['venue']['location']['lng'],v['venue']['categories'][0]['name']) for v in resp])","cf02e35f":"nearby_shenton = pd.DataFrame([item for venue_list in venue_list for item in venue_list])\nnearby_shenton.columns = ['Venue','Gym_Latitude','Gym_Longitude','Venue_Main_Category','Venue_ID','Sub_Venue','Venue_Latitude','Venue_Longitude','Venue_Category']\n\nnearby_shenton.head()","cf68444e":"nearby_shenton.groupby(['Venue_Main_Category'])['Venue_Category'].value_counts(normalize=False)","5ea228f4":"indexNames = nearby_shenton[ (nearby_shenton['Venue_Category'] == 'Residential Building (Apartment \/ Condo)')].index\nnearby_shenton.drop(indexNames , inplace=True)\nnearby_shenton.groupby(['Venue_Main_Category'])['Venue_Category'].value_counts(normalize=False)\n\nlist_Food_filter=['Caf\u00e9']\nindexNames = nearby_shenton[ (nearby_shenton['Venue_Main_Category'] == 'Other Food') & (nearby_shenton['Venue_Category'].isin(list_Food_filter)) ].index\nnearby_shenton.drop(indexNames , inplace=True)","f2f5eccc":"nearby_shenton.head()","8f3fe310":"shenton_gym_freq=pd.crosstab(nearby_shenton.Venue,nearby_shenton.Venue_Main_Category,margins=False)\nshenton_gym_freq.sort_values('Gym',ascending=False)","ab90af5f":"shenton_gym[['Venue','Venue_Latitude','Venue_Longitude']]","19e57767":"shenton_gym_freq2=pd.merge(shenton_gym_freq,shenton_gym[['Venue','Venue_Latitude','Venue_Longitude']],on='Venue',how='left')\nshenton_gym_freq2","a9228de8":"shenton_gym_freq3=shenton_gym_freq2.drop('Venue', 1)","e9b2c8ae":"kclusters = 4\n# run k-means clustering\nkmeans = KMeans(n_clusters=kclusters, random_state=1).fit(shenton_gym_freq3)\n\n# check cluster labels generated for each row in the dataframe\nprint(kmeans.labels_[0:30])\nprint(len(kmeans.labels_))","875dafed":"shenton_gym_freq2['Cluster_Labels'] = kmeans.labels_\nshenton_gym_freq2.sort_values('Cluster_Labels',ascending=False)","3d55cf8f":"shenton=shenton_gym_freq2\ngeo = Nominatim(user_agent='My-IBMNotebook')\naddress = 'Singapore'\nlocation = geo.geocode(address)\nlatitude = location.latitude\nlongitude = location.longitude\n\n# create map\nmap_shenton2 = folium.Map(location=[latitude, longitude], tiles=\"Openstreetmap\", zoom_start=11)\n\n# set color scheme for the clusters\nx = np.arange(4)\nys = [i+x+(i*x)**2 for i in range(4)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(shenton['Venue_Latitude'], shenton['Venue_Longitude'], shenton['Venue'], shenton['Cluster_Labels']):        \n    label = folium.Popup(str(poi) + ' cluster:' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=8,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=1).add_to(map_shenton2)\n       \nmap_shenton2","bafa61dd":"2. Clean data","080ec88d":"This is my first capstone on machine learning and python. <br>\nThank you for IBM data science course. It opens the magic door of machine learning to me.<br>\nI'd like to learn more on machine learning.","30b54ff6":"So, let's focus on Shenton Way Area.","193716f4":"<b>Data Acquisition<\/b><br>\nI.\tTarget business area in Singapore: https:\/\/www.corporateservicessingapore.com\/7-popular-business-locations-singapore\/ <br>\nSo, we can get below starting points<br>\n1.\tRaffles Place Area<br>\n2.\tMarina Bay Area<br>\n3.\tTanjong Pagar \/ Anson Road<br>\n4.\tOrchard Road Area<br>\n5.\tShenton Way Area<br>\n6.\tRiver Valley<br>\n7.\tSuntec City<br>\n<br>\n\nUploaded datafile to GitHub as a start.","4903b8fa":"Here's my final presentation report: <br>\n[Cousera Capstone Report - Battle of Neighbourhoods.pdf](https:\/\/github.com\/shayy07\/Coursera_Capstone\/raw\/master\/Cousera%20Capstone%20Report%20-%20Battle%20of%20Neighbourhoods%20v3.pdf)","536cb243":"# Healthy Caf\u00e9 Location Selection in Singapore","76ccfc87":"Remove venues which are not in our considerations. Or remove some venues under wrong categories.","939ea182":"**II.\tHealthy Caf\u00e9 Concept**<br><br>\n**Target customers:** Office clericals who care about healthy lifestyle but don\u2019t have time to prepare food for lunch or rush for dinner due to overtime.<br>\n**Food Service:** Coffee with sugar level choices and different types of milk (e.g. non-fat, skimmed milk, soya milk, etc). Food with nutrition label, and different size options to match and mix.","bc08613b":"III.\tCollect location data from Foursquare website: https:\/\/developer.foursquare.com\/<br>\n1.\tLocation of Venues","83281582":"Search all the restraurants near each business centers.","3c4b277d":"Relatively cluster 2 is gym indensitive and less Cafe around area. It is recomended.","72061c44":"**Conclusion**<br>\nThere are most Gyms in Shenton Way Area. So, relatively we can say people near Shenton Way Area have more healthy awareness.\nThere're always cafe near gym. It's not easy to find a place without competitors. \nBased on the density of competitor and gyms, relatively Shenton Way Area is ideal.","c6f88630":"**III.\tObjective**<br>\nTo find out suitable locations in Singapore<br>\na.\tNear business area<br>\nb.\tAres with high density of gyms (To filter those areas passed by more people with healthy concept)<br>\nc.\tDistribution of restaurants (types and density) \u2013 to understand competitor distribution<br>","b2230609":"**Introduction<br>\nI.\tBackground**\n\nAbout 400,000 Singaporeans are diabetes and one in three has lifetime risk of developing the disease. And if nothing is done, the number of diabetes under age 70 is expected to rise to 670,000 by 2030 and one million by 2050.\n<br><br>\nSingapore government adopts a multi-pronged strategy to encourage Singaporeans to eat healthily and reduce their sugar intake from foods and drinks.<br>\nCoffee is one of the common sugar intakes for Singaporean. We are going to open a caf\u00e9 to server coffee with less sugar and food with balanced nutrition.","6bf684f0":"Search all cafes near each business centres.","90ee48db":"Finally, we have the list of all venues.","38691736":"Do a simple check, our assumption is correct. The correlation between the density of caf\u00e9 and gyms are positive.","1895e5d8":"IMB Data Science Capstone Project \u2013 The Battles of Neighbourhoods","e3a96650":"Now, let's get the summary of the venues near each business centres.","4e63e715":"Search all the gyms near each business centres."}}