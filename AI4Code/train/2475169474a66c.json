{"cell_type":{"6fbb1405":"code","f57fcc91":"code","25cbcbd6":"code","a8186fa8":"code","e3dc0327":"code","222f5478":"code","fca7fbea":"code","0b01d514":"code","481092fe":"code","347b09cc":"code","a8f44e8c":"code","ffbe3ee7":"code","9e1e2d45":"code","795844be":"code","7be07708":"code","3a48db6f":"code","398b6303":"code","1bddc18f":"code","3cebee56":"code","41bf6cda":"code","1d55c9d4":"code","e857a897":"code","f0b18a99":"code","40449888":"code","d285c7e7":"code","108f84d5":"code","490a97d7":"code","593024e8":"markdown","9ee88d87":"markdown","3d40bb68":"markdown","5598dadb":"markdown","c1c6d38e":"markdown","4eb08117":"markdown","c24bfdba":"markdown","20a33a2b":"markdown","f671ce5f":"markdown"},"source":{"6fbb1405":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom subprocess import check_output\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nfrom pandas.plotting import lag_plot\nfrom pandas import datetime\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error","f57fcc91":"warnings.filterwarnings('ignore')","25cbcbd6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nprint(os.listdir(\"..\/input\"))\n\nprint(check_output([\"ls\", \"..\/input\/Data\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","a8186fa8":"#print(check_output([\"ls\", \"..\/input\/Data\/Stocks\"]).decode(\"utf8\"))","e3dc0327":"df = pd.read_csv(\"..\/input\/Data\/Stocks\/tsla.us.txt\")\ndf.head()","222f5478":"print(df.head())\nprint(df.shape)\nprint(df.columns)","fca7fbea":"df[['Close']].plot()\nplt.title(\"Tesla\")\nplt.show()","0b01d514":"# Comulative Return\ndr = df.cumsum()\ndr.plot()\nplt.title('Tesla Cumulative Returns')","481092fe":"plt.figure(figsize=(10,10))\nlag_plot(df['Open'], lag=5)\nplt.title('Tesla Autocorrelation plot')","347b09cc":"df['Date'][1857]","a8f44e8c":"train_data, test_data = df[0:int(len(df)*0.8)], df[int(len(df)*0.8):]\nplt.figure(figsize=(12,7))\nplt.title('Tesla Prices')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(df['Open'], 'blue', label='Training Data')\nplt.plot(test_data['Open'], 'green', label='Testing Data')\nplt.xticks(np.arange(0,1857, 300), df['Date'][0:1857:300])\nplt.legend()","ffbe3ee7":"def smape_kun(y_true, y_pred):\n    return np.mean((np.abs(y_pred - y_true) * 200\/ (np.abs(y_pred) + np.abs(y_true))))","9e1e2d45":"train_ar = train_data['Open'].values\ntest_ar = test_data['Open'].values\n\n# https:\/\/machinelearningmastery.com\/arima-for-time-series-forecasting-with-python\/\nhistory = [x for x in train_ar]\nprint(type(history))\npredictions = list()\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)","795844be":"plt.figure(figsize=(12,7))\nplt.plot(df['Open'], 'green', color='blue', label='Training Data')\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.title('Tesla Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,1857, 300), df['Date'][0:1857:300])\nplt.legend()","7be07708":"#test_data['Date'][0:1856:10]","3a48db6f":"plt.figure(figsize=(12,7))\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.xticks(np.arange(1486,1856, 60), df['Date'][1486:1856:60])\nplt.title('Tesla Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.legend()","398b6303":"df = pd.read_csv(\"..\/input\/Data\/Stocks\/msft.us.txt\").fillna(0)\ndf.head()","1bddc18f":"df[['Close']].plot()\nplt.title(\"Microsoft\")\nplt.show()","3cebee56":"# Comulative Return\ndr = df.cumsum()\ndr.plot()\nplt.title('Microsoft Cumulative Returns')","41bf6cda":"plt.figure(figsize=(10,10))\nlag_plot(df['Open'], lag=5)\nplt.title('Microsoft Autocorrelation plot')","1d55c9d4":"df['Date'][7982]","e857a897":"train_data, test_data = df[0:int(len(df)*0.8)], df[int(len(df)*0.8):]\nplt.figure(figsize=(12,7))\nplt.title('Microsoft Prices')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.plot(df['Open'], 'blue', label='Training Data')\nplt.plot(test_data['Open'], 'green', label='Testing Data')\nplt.xticks(np.arange(0,7982, 1300), df['Date'][0:7982:1300])\nplt.legend()","f0b18a99":"def smape_kun(y_true, y_pred):\n    return np.mean((np.abs(y_pred - y_true) * 200\/ (np.abs(y_pred) + np.abs(y_true))))","40449888":"train_ar = train_data['Open'].values\ntest_ar = test_data['Open'].values\n\n# https:\/\/machinelearningmastery.com\/arima-for-time-series-forecasting-with-python\/\nhistory = [x for x in train_ar]\nprint(type(history))\npredictions = list()\nfor t in range(len(test_ar)):\n    model = ARIMA(history, order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    output = model_fit.forecast()\n    yhat = output[0]\n    predictions.append(yhat)\n    obs = test_ar[t]\n    history.append(obs)\n    #print('predicted=%f, expected=%f' % (yhat, obs))\nerror = mean_squared_error(test_ar, predictions)\nprint('Testing Mean Squared Error: %.3f' % error)\nerror2 = smape_kun(test_ar, predictions)\nprint('Symmetric mean absolute percentage error: %.3f' % error2)","d285c7e7":"plt.figure(figsize=(12,7))\nplt.plot(df['Open'], 'green', color='blue', label='Training Data')\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.title('Microsoft Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(0,7982, 1300), df['Date'][0:7982:1300])\nplt.legend()","108f84d5":"#test_data['Date'][0:1856:10]","490a97d7":"plt.figure(figsize=(12,7))\nplt.plot(test_data.index, predictions, color='green', marker='o', linestyle='dashed', \n         label='Predicted Price')\nplt.plot(test_data.index, test_data['Open'], color='red', label='Actual Price')\nplt.title('Microsoft Prices Prediction')\nplt.xlabel('Dates')\nplt.ylabel('Prices')\nplt.xticks(np.arange(6386,7982, 300), df['Date'][6386:7982:300])\nplt.legend()","593024e8":"In this notebook will be performed:\n1. Importing Libraries\n2. Preprocessing\n3. Tesla Stock Market Analyis\n4. Tesla ARIMA (AutoRegressive Integrated Moving Average) Time Series Prediction\n5. Microsoft Stock Market Analyis\n6. Microsoft ARIMA (AutoRegressive Integrated Moving Average) Time Series Prediction","9ee88d87":"**Thank you for looking at this notebook, if you have any suggestion, please do not hesitate to comment below!**","3d40bb68":"# Preprocessing","5598dadb":"# Microsoft Stock Market Analyis","c1c6d38e":"# Tesla Stock Market Analyis","4eb08117":"# Importing Libraries","c24bfdba":"## ARIMA (AutoRegressive Integrated Moving Average) for Time Series Prediction","20a33a2b":"# Huge Stock Market Dataset","f671ce5f":"## ARIMA (AutoRegressive Integrated Moving Average) for Time Series Prediction"}}