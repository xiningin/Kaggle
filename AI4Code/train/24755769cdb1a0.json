{"cell_type":{"57a31452":"code","b915dbe4":"code","f8055e44":"code","ee7f6826":"code","e0cf5258":"code","288dd16e":"code","b5cf58e2":"code","745e9b01":"code","1b9f89f8":"code","9a0290a0":"code","174091ff":"code","2b4c0115":"code","5b7bc37f":"code","e8676586":"code","a9dd1740":"code","434edd29":"code","f613eade":"code","dbd66270":"code","1ceecd71":"code","287cec24":"code","e7964e8a":"code","0ec2d4a6":"code","59114142":"code","67cc4fcd":"code","a9b5507b":"code","1f376b81":"code","b916e654":"code","78f266b1":"code","994eec54":"code","59d1aec9":"code","98449683":"code","0e94589d":"code","950cc671":"code","62f3a4a5":"code","7084a1a7":"markdown","2df28731":"markdown","2e7e8e1b":"markdown","4fbc7287":"markdown","186a5ff7":"markdown","91933003":"markdown","46fbb718":"markdown","ce28b8ac":"markdown","4feaa56f":"markdown","041d91fb":"markdown","6cc029de":"markdown","e24e2bd0":"markdown","afb50717":"markdown","7df1f09f":"markdown"},"source":{"57a31452":"#Have to update version of mlxtend on Colab\nimport mlxtend as ml\nprint(ml.__version__)","b915dbe4":"##\n##import matplotlib\n##matplotlib.use('Agg')","f8055e44":"#This line of code to upgrade library \n#!pip install mlxtend --upgrade","ee7f6826":"import pandas as pd\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom prettytable import PrettyTable\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules,fpgrowth,fpmax","e0cf5258":"data = pd.read_csv('..\/input\/groceries-dataset\/Groceries_dataset.csv')  ","288dd16e":"# looking up thats in data frame\ndata.head()\ndata.shape","b5cf58e2":"data.head()","745e9b01":"# Get all the transactions as a list of lists\nall_transactions = [transaction[1]['itemDescription'].tolist() \nfor transaction in list(data.groupby(['Member_number', 'Date']))]","1b9f89f8":"# Transactions in the transactional dataset\nlen(all_transactions)","9a0290a0":"# Look at the 15 first transactions\nall_transactions[0:15]","174091ff":"# The following instructions transform the dataset into the required format \ntrans_encoder = TransactionEncoder() # Instanciate the encoder\ntrans_encoder_matrix = trans_encoder.fit(all_transactions).transform(all_transactions)\ntrans_encoder_matrix = pd.DataFrame(trans_encoder_matrix, columns=trans_encoder.columns_)","2b4c0115":"trans_encoder_matrix.head()","5b7bc37f":"# To compute time of algorithm running time.\ndef perform_rule_calculation(transact_items_matrix, rule_type, min_support=0.001):\n    \"\"\"\n    excution time for the corresponding algorithm\n        \n    \"\"\"\n    start_time = 0\n    total_execution = 0\n\n    if(rule_type==\"fpmax\"):\n        start_time = time.time()\n        rule_items = fpmax(transact_items_matrix, \n                       min_support=min_support, \n                       use_colnames=True)\n        total_execution = time.time() - start_time\n        print(\"Computed Fp max! \")\n        print(rule_type)\n        \n    if(rule_type==\"apriori\"):\n        start_time = time.time()\n        rule_items =apriori(transact_items_matrix, \n                       min_support=min_support, \n                       use_colnames=True)\n        total_execution = time.time() - start_time\n        print(\"Computed Apriori !\")\n        print(rule_type)\n        \n    if(rule_type == \"Fpgrowth\"):\n        start_time = time.time()\n        rule_items = fpgrowth(transact_items_matrix, \n                       min_support=min_support, \n                       use_colnames=True)\n        total_execution = time.time() - start_time\n        print(\"Computed Fp Growth !\")\n        print(rule_type)\n    \n    rule_items['number_of_items'] = rule_items['itemsets'].apply(lambda x: len(x))\n    \n    return rule_items, total_execution","e8676586":"#Function for association rule\ndef compute_association_rule(rule_matrix, metric=\"lift\", min_thresh=1):\n    \"\"\"\n    Compute the final association rule\n \n        rule_matrix: the corresponding algorithms matrix\n        metric: the metric to be used (default is lift)\n        min_thresh: the minimum threshold (default is 1)\n        \n    Returns\n        Rules:: Information for each transaction satisfying the given metric & threshold\n    \"\"\"\n    rules = association_rules(rule_matrix, \n                              metric=metric, \n                              min_threshold=min_thresh)\n    \n    return rules","a9dd1740":"# Plot Lift Vs confidence\n\ndef plot_metrics_relationship(rule_matrix, col1, col2):\n    \"\"\"\n    shows the relationship between the two input columns \n   \n    \"\"\"\n    fit = np.polyfit(rule_matrix[col1], rule_matrix[col2], 1)\n    fit_funt = np.poly1d(fit)\n    plt.plot(rule_matrix[col1], rule_matrix[col2], 'yo', rule_matrix[col1], \n    fit_funt(rule_matrix[col1]))\n    plt.xlabel(col1)\n    plt.ylabel(col2)\n    plt.title('{} vs {}'.format(col1, col2))","434edd29":"#Comapring algorithms run time and plotting bar chart\n\ndef compare_time_exec(algo1=list, algo2=list, algo3=list):\n    \"\"\"\n        - Algo1 list contains first algo details.\n            \n        - Algo2 list having the details of second algorithm\n        \n        - Algo3 list have the data of third algorithm\n    \"\"\"\n    \n    execution_times = [algo1[1], algo2[1], algo3[1]]\n    algo_names = (algo1[0], algo2[0] , algo3[0])\n    y=np.arange(len(algo_names))\n    \n    plt.bar(y,execution_times,color=['orange', 'blue', 'red'])\n    plt.xticks(y,algo_names)\n    plt.xlabel('Algorithms')\n    plt.ylabel('Time')\n    plt.title(\"Execution Time (seconds) Comparison\")\n    plt.show()\n    print(\"Fianls Results\")","f613eade":"val = {'name':12}\nvalue = list(val.items())[0]","dbd66270":"value","1ceecd71":"fpgrowth_matrix, fp_growth_exec_time = perform_rule_calculation(trans_encoder_matrix, rule_type='Fpgrowth') # Run the algorithm\nprint(\"Fp Growth execution took: {} seconds\".format(fp_growth_exec_time))","287cec24":"fpgrowth_matrix.head()","e7964e8a":"fpgrowth_matrix.tail()","0ec2d4a6":"fp_growth_rule_lift = compute_association_rule(fpgrowth_matrix)","59114142":"fp_growth_rule_lift.head()","67cc4fcd":"fp_growth_rule = compute_association_rule(fpgrowth_matrix, metric=\"confidence\", min_thresh=1)\nfp_growth_rule.head()","a9b5507b":"apriori_matrix, apriori_exec_time = perform_rule_calculation(trans_encoder_matrix, rule_type=\"apriori\")\nprint(\"Apriori Execution took: {} seconds\".format(apriori_exec_time))","1f376b81":"apriori_matrix.head()","b916e654":"apriori_matrix.tail()","78f266b1":"apriori_rule_lift = compute_association_rule(apriori_matrix)","994eec54":"apriori_rule_lift.head()","59d1aec9":"plot_metrics_relationship(apriori_rule_lift, col1='lift', col2='confidence')","98449683":"apripri_rule = compute_association_rule(apriori_matrix, metric=\"confidence\", min_thresh=0.2)\napripri_rule.head()","0e94589d":"fpmax_matrix , fpmax_exec_time = perform_rule_calculation(trans_encoder_matrix, rule_type=\"fpmax\")\nprint(\"fpmax Execuation took: {} seconds\".format(fpmax_exec_time))\n","950cc671":"fmax =  fpmax(trans_encoder_matrix, min_support=0.01, use_colnames=True)\nfmax.head()","62f3a4a5":"algo1 = ['Fp Growth', fp_growth_exec_time]\nalgo2 = ['Apriori', apriori_exec_time]\nalgo3 = ['Fpmax', fpmax_exec_time]\n\ncompare_time_exec(algo1, algo2, algo3)","7084a1a7":"## Frequent Pattern Mining\n\n#### This kernel is a comprehensive overview focused on the comparative analysis between Apriori ,Fpmax and Frequent Pattern Growth algorithms. These are all association rule algorithms.\n\n#### This kernal is about frequent pattern minning of different algorithms.\n\n","2df28731":"##  Fpmax Algo","2e7e8e1b":"##  Fp Growth Algorithm","4fbc7287":"### Functions made ","186a5ff7":"###Lift","91933003":"### Data Preparation for association rules\n","46fbb718":"## Comparision of algorihms time execution ","ce28b8ac":"##  Apriori Algorithm with execuation time","4feaa56f":"####  Confidence Fpgrowth","041d91fb":"#### We will be covering the following topics:\n\n","6cc029de":"### Impelementation of Assosiatoion rule","e24e2bd0":"### Comparitave Analysis of Algos\n\n","afb50717":"####  lift Fpgrowth","7df1f09f":"## Confidence Apriori Algorithm"}}