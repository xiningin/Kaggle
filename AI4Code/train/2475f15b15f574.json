{"cell_type":{"e1c86fb1":"code","a96b4804":"code","8d248f04":"code","14d38919":"code","54c28348":"code","6a5da4d2":"code","db4c6cb3":"code","78b29b33":"code","3f811720":"code","b21c7a39":"code","31863e12":"code","a5de3618":"code","3d380f7e":"code","5d3b1872":"code","ed761d14":"code","a2c719b4":"code","2dc1dbe5":"code","bbe1e194":"code","cdad6cb9":"code","256257bc":"markdown","fcedbfe6":"markdown","4e23bae1":"markdown"},"source":{"e1c86fb1":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.utils import shuffle\n\n%matplotlib inline","a96b4804":"DATASET_ROOT = \"..\/input\"\n\nX_train, y_train = shuffle(np.load(f'{DATASET_ROOT}\/x_train.npy'), np.load(f'{DATASET_ROOT}\/y_train.npy'))\nX_test = np.load(f'{DATASET_ROOT}\/x_test.npy')","8d248f04":"size = 80\nshape =  2 * (size,)\nwidth, height = 8, 8\n\nplt.figure(figsize=(16, 20))\nfor n, (image, name) in enumerate(zip(X_train, y_train), 1):\n    if n > width * height:\n        break\n        \n    plt.subplot(height, width, n)\n    plt.title(name)\n    plt.imshow(image.reshape(shape), cmap='gray')","14d38919":"from skimage import exposure\nfrom skimage.feature import hog\n\nfrom sklearn.preprocessing import StandardScaler\n\nstd_scaler = StandardScaler()","54c28348":"img_shape = (80, 80)\ndef preprocess_images(*image_sets, concat=False):\n    result = list(map(exposure.equalize_hist,\n                      [img.reshape(img_shape) for img in np.concatenate(image_sets)]))\n    result = [img.reshape((1, 6400)) for img in result]\n    result = np.sqrt(result)\n                  \n    return np.concatenate(result) if concat else result","6a5da4d2":"X_train_pp = preprocess_images(X_train)\nX_test_pp  = preprocess_images(X_test)","db4c6cb3":"img = X_train[170]\n\nfd, hog_image = hog(image.reshape(img_shape), orientations=5, pixels_per_cell=(10, 10), \n                    visualise=True, cells_per_block=(3, 3), block_norm='L2-Hys')\n\nplt.figure(figsize=(8,4))\nplt.subplot(1,2,1)\nplt.imshow(img.reshape((80,80)), cmap='gray')\nplt.subplot(1,2,2)\nplt.imshow(hog_image)\nprint(fd.shape)","78b29b33":"img_shape = (80, 80)\norientations, p_p_c, c_p_b = 3, (8,) * 2, (3,) * 2  \n\ndef apply_hog(*image_sets):\n    result = []\n    for i in range(len(image_sets)):\n        image_set = image_sets[i]\n        result.append(\n            np.array(\n                [hog(img.reshape(img_shape), orientations=orientations, \n                     pixels_per_cell=p_p_c, cells_per_block=c_p_b, block_norm='L2-Hys') \n                 for img in image_set]))\n        print(f'\\r{i + 1}\\t\/\\t{len(image_sets)}', end='')\n    std_scaler.fit(np.concatenate(result))\n    \n    return list(map(std_scaler.transform, result))","3f811720":"train_hog_fts, test_hog_fts = apply_hog(X_train_pp, X_test_pp)","b21c7a39":"from sklearn.decomposition import PCA","31863e12":"pca = PCA(n_components=360)\npca.fit(np.concatenate([train_hog_fts, test_hog_fts]))","a5de3618":"data_for_PCA_test = pca.transform(np.concatenate([train_hog_fts, test_hog_fts]))","3d380f7e":"explained_variance = pca.explained_variance_\nexplained_variance_ratio = pca.explained_variance_ratio_\nplt.plot(np.cumsum(explained_variance))\nprint(np.sum(explained_variance), np.sum(explained_variance_ratio))","5d3b1872":"train_hog_pca = pca.transform(train_hog_fts)\ntest_hog_pca  = pca.transform(test_hog_fts)\n\nstd_scaler.fit(np.concatenate([train_hog_pca, test_hog_pca]))\ntrain_hog_pca = std_scaler.transform(train_hog_pca)\ntest_hog_pca = std_scaler.transform(test_hog_pca)","ed761d14":"from sklearn.neighbors import KNeighborsClassifier, RadiusNeighborsClassifier\nfrom sklearn.neighbors.nearest_centroid import NearestCentroid\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import cross_val_score","a2c719b4":"classifier = VotingClassifier(n_jobs=-1, voting='hard', weights=None, \n                              estimators=[\n                                  ('nc', NearestCentroid(metric='cosine', shrink_threshold=0.15)), \n                                  ('rnc', RadiusNeighborsClassifier(metric='cosine', radius=0.9, weights='distance', outlier_label=1)),\n                                  ('knn', KNeighborsClassifier(metric='cosine', n_neighbors=18, weights='distance'))\n                              ]\n                             )","2dc1dbe5":"cv_score = cross_val_score(estimator=classifier, X=train_hog_pca, cv=5, y=y_train, n_jobs=-1, verbose=0)\n(cv_score, cv_score.mean())","bbe1e194":"classifier.fit(train_hog_pca, y_train)","cdad6cb9":"import pandas as pd\n\npred = classifier.predict(test_hog_pca)\n\npd.DataFrame({'Id': np.arange(1, len(pred)+1), 'Name': pred}).to_csv('prediction_kaggle_kernel.csv', index=False)","256257bc":"# Dimensionality Reduction","fcedbfe6":"# Preprocessing","4e23bae1":"# KNN Classifier"}}