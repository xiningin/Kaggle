{"cell_type":{"b9f947f7":"code","5a0aa6a5":"code","4e1e8c94":"code","231d6dd4":"code","68992381":"code","4a863686":"code","74cb1bcf":"code","5fa8d6f0":"code","b8e70ce8":"code","4ecba147":"code","313dca3c":"code","c770e946":"code","3e7bb1cf":"code","479eb247":"code","e0d2f37d":"code","260b42d1":"code","56c6fff0":"code","b35a5edc":"markdown","d54c0fc9":"markdown","855c7f52":"markdown","07dd92fb":"markdown","ab5421d5":"markdown","16227daf":"markdown","1888b1ee":"markdown","1e7ca1ed":"markdown","83d68ef8":"markdown","c0755eb9":"markdown","6bea62fb":"markdown","7a2cb7b8":"markdown"},"source":{"b9f947f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a0aa6a5":"tr_path = '..\/input\/ml2021spring-hw1\/covid.train.csv'  # path to training data\ntt_path = '..\/input\/ml2021spring-hw1\/covid.test.csv'   # path to testing data\n\n!gdown --id '19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF' --output covid.train.csv\n!gdown --id '1CE240jLm2npU-tdz81-oVKEF3T2yfT1O' --output covid.test.csv","4e1e8c94":"# PyTorch\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset, DataLoader\n\n# For data preprocess\nimport numpy as np\nimport csv\nimport os\n\n# For plotting\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\nmyseed = 42069  # set a random seed for reproducibility\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\nnp.random.seed(myseed)\ntorch.manual_seed(myseed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed_all(myseed)","231d6dd4":"def get_device():\n    ''' Get device (if GPU is available, use GPU) '''\n    return 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndef plot_learning_curve(loss_record, title=''):\n    ''' Plot learning curve of your DNN (train & dev loss) '''\n    total_steps = len(loss_record['train'])\n    x_1 = range(total_steps)\n    x_2 = x_1[::len(loss_record['train']) \/\/ len(loss_record['dev'])]\n    figure(figsize=(6, 4))\n    plt.plot(x_1, loss_record['train'], c='tab:red', label='train')\n    plt.plot(x_2, loss_record['dev'], c='tab:cyan', label='dev')\n    plt.ylim(0.0, 5.)\n    plt.xlabel('Training steps')\n    plt.ylabel('MSE loss')\n    plt.title('Learning curve of {}'.format(title))\n    plt.legend()\n    plt.show()\n\n\ndef plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):\n    ''' Plot prediction of your DNN '''\n    if preds is None or targets is None:\n        model.eval()\n        preds, targets = [], []\n        for x, y in dv_set:\n            x, y = x.to(device), y.to(device)\n            with torch.no_grad():\n                pred = model(x)\n                preds.append(pred.detach().cpu())\n                targets.append(y.detach().cpu())\n        preds = torch.cat(preds, dim=0).numpy()\n        targets = torch.cat(targets, dim=0).numpy()\n\n    figure(figsize=(5, 5))\n    plt.scatter(targets, preds, c='r', alpha=0.5)\n    plt.plot([-0.2, lim], [-0.2, lim], c='b')\n    plt.xlim(-0.2, lim)\n    plt.ylim(-0.2, lim)\n    plt.xlabel('ground truth value')\n    plt.ylabel('predicted value')\n    plt.title('Ground Truth v.s. Prediction')\n    plt.show()","68992381":"class COVID19Dataset(Dataset):\n    ''' Dataset for loading and preprocessing the COVID19 dataset '''\n    def __init__(self,\n                 path,\n                 mode='train',\n                 target_only=False):\n        self.mode = mode\n\n        # Read data into numpy arrays\n        with open(path, 'r') as fp:\n            data = list(csv.reader(fp))\n            data = np.array(data[1:])[:, 1:].astype(float)\n        \n        if not target_only:\n            feats = list(range(93))\n        else:\n            # TODO: Using 40 states & 2 tested_positive features (indices = 57 & 75)\n            pass\n\n        if mode == 'test':\n            # Testing data\n            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))\n            data = data[:, feats]\n            self.data = torch.FloatTensor(data)\n        else:\n            # Training data (train\/dev sets)\n            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))\n            target = data[:, -1]\n            data = data[:, feats]\n            \n            # Splitting training data into train & dev sets\n            if mode == 'train':\n                indices = [i for i in range(len(data)) if i % 10 != 0]\n            elif mode == 'dev':\n                indices = [i for i in range(len(data)) if i % 10 == 0]\n            \n            # Convert data into PyTorch tensors\n            self.data = torch.FloatTensor(data[indices])\n            self.target = torch.FloatTensor(target[indices])\n\n        # Normalize features (you may remove this part to see what will happen)\n        self.data[:, 40:] = \\\n            (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \\\n            \/ self.data[:, 40:].std(dim=0, keepdim=True)\n\n        self.dim = self.data.shape[1]\n\n        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'\n              .format(mode, len(self.data), self.dim))\n\n    def __getitem__(self, index):\n        # Returns one sample at a time\n        if self.mode in ['train', 'dev']:\n            # For training\n            return self.data[index], self.target[index]\n        else:\n            # For testing (no target)\n            return self.data[index]\n\n    def __len__(self):\n        # Returns the size of the dataset\n        return len(self.data)","4a863686":"def prep_dataloader(path, mode, batch_size, n_jobs=0, target_only=False):\n    ''' Generates a dataset, then is put into a dataloader. '''\n    dataset = COVID19Dataset(path, mode=mode, target_only=target_only)  # Construct dataset\n    dataloader = DataLoader(\n        dataset, batch_size,\n        shuffle=(mode == 'train'), drop_last=False,\n        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader\n    return dataloader","74cb1bcf":"class NeuralNet(nn.Module):\n    ''' A simple fully-connected deep neural network '''\n    def __init__(self, input_dim):\n        super(NeuralNet, self).__init__()\n\n        # Define your neural network here\n        # TODO: How to modify this model to achieve better performance?\n        self.net = nn.Sequential(\n            nn.Linear(input_dim, 64),\n            nn.ReLU(),\n            nn.Linear(64, 1)\n        )\n\n        # Mean squared error loss\n        self.criterion = nn.MSELoss(reduction='mean')\n\n    def forward(self, x):\n        ''' Given input of size (batch_size x input_dim), compute output of the network '''\n        return self.net(x).squeeze(1)\n\n    def cal_loss(self, pred, target):\n        ''' Calculate loss '''\n        # TODO: you may implement L2 regularization here\n        return self.criterion(pred, target)","5fa8d6f0":"def train(tr_set, dv_set, model, config, device):\n    ''' DNN training '''\n\n    n_epochs = config['n_epochs']  # Maximum number of epochs\n\n    # Setup optimizer\n    optimizer = getattr(torch.optim, config['optimizer'])(\n        model.parameters(), **config['optim_hparas'])\n\n    min_mse = 1000.\n    loss_record = {'train': [], 'dev': []}      # for recording training loss\n    early_stop_cnt = 0\n    epoch = 0\n    while epoch < n_epochs:\n        model.train()                           # set model to training mode\n        for x, y in tr_set:                     # iterate through the dataloader\n            optimizer.zero_grad()               # set gradient to zero\n            x, y = x.to(device), y.to(device)   # move data to device (cpu\/cuda)\n            pred = model(x)                     # forward pass (compute output)\n            mse_loss = model.cal_loss(pred, y)  # compute loss\n            mse_loss.backward()                 # compute gradient (backpropagation)\n            optimizer.step()                    # update model with optimizer\n            loss_record['train'].append(mse_loss.detach().cpu().item())\n\n        # After each epoch, test your model on the validation (development) set.\n        dev_mse = dev(dv_set, model, device)\n        if dev_mse < min_mse:\n            # Save model if your model improved\n            min_mse = dev_mse\n            print('Saving model (epoch = {:4d}, loss = {:.4f})'\n                .format(epoch + 1, min_mse))\n            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path\n            early_stop_cnt = 0\n        else:\n            early_stop_cnt += 1\n\n        epoch += 1\n        loss_record['dev'].append(dev_mse)\n        if early_stop_cnt > config['early_stop']:\n            # Stop training if your model stops improving for \"config['early_stop']\" epochs.\n            break\n\n    print('Finished training after {} epochs'.format(epoch))\n    return min_mse, loss_record","b8e70ce8":"def dev(dv_set, model, device):\n    model.eval()                                # set model to evalutation mode\n    total_loss = 0\n    for x, y in dv_set:                         # iterate through the dataloader\n        x, y = x.to(device), y.to(device)       # move data to device (cpu\/cuda)\n        with torch.no_grad():                   # disable gradient calculation\n            pred = model(x)                     # forward pass (compute output)\n            mse_loss = model.cal_loss(pred, y)  # compute loss\n        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss\n    total_loss = total_loss \/ len(dv_set.dataset)              # compute averaged loss\n\n    return total_loss","4ecba147":"def test(tt_set, model, device):\n    model.eval()                                # set model to evalutation mode\n    preds = []\n    for x in tt_set:                            # iterate through the dataloader\n        x = x.to(device)                        # move data to device (cpu\/cuda)\n        with torch.no_grad():                   # disable gradient calculation\n            pred = model(x)                     # forward pass (compute output)\n            preds.append(pred.detach().cpu())   # collect prediction\n    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array\n    return preds","313dca3c":"device = get_device()                 # get the current available device ('cpu' or 'cuda')\nos.makedirs('models', exist_ok=True)  # The trained model will be saved to .\/models\/\ntarget_only = False                   # TODO: Using 40 states & 2 tested_positive features\n\n# TODO: How to tune these hyper-parameters to improve your model's performance?\nconfig = {\n    'n_epochs': 3000,                # maximum number of epochs\n    'batch_size': 270,               # mini-batch size for dataloader\n    'optimizer': 'SGD',              # optimization algorithm (optimizer in torch.optim)\n    'optim_hparas': {                # hyper-parameters for the optimizer (depends on which optimizer you are using)\n        'lr': 0.001,                 # learning rate of SGD\n        'momentum': 0.9              # momentum for SGD\n    },\n    'early_stop': 200,               # early stopping epochs (the number epochs since your model's last improvement)\n    'save_path': 'models\/model.pth'  # your model will be saved here\n}","c770e946":"tr_set = prep_dataloader(tr_path, 'train', config['batch_size'], target_only=target_only)\ndv_set = prep_dataloader(tr_path, 'dev', config['batch_size'], target_only=target_only)\ntt_set = prep_dataloader(tt_path, 'test', config['batch_size'], target_only=target_only)","3e7bb1cf":"model = NeuralNet(tr_set.dataset.dim).to(device)  # Construct model and move to device","479eb247":"model_loss, model_loss_record = train(tr_set, dv_set, model, config, device)","e0d2f37d":"plot_learning_curve(model_loss_record, title='deep model')","260b42d1":"del model\nmodel = NeuralNet(tr_set.dataset.dim).to(device)\nckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model\nmodel.load_state_dict(ckpt)\nplot_pred(dv_set, model, device)  # Show prediction on the validation set","56c6fff0":"def save_pred(preds, file):\n    ''' Save predictions to specified file '''\n    print('Saving results to {}'.format(file))\n    with open(file, 'w') as fp:\n        writer = csv.writer(fp)\n        writer.writerow(['id', 'tested_positive'])\n        for i, p in enumerate(preds):\n            writer.writerow([i, p])\n\npreds = test(tt_set, model, device)  # predict COVID-19 cases with your model\nsave_pred(preds, 'pred.csv')         # save prediction file to pred.csv","b35a5edc":"# Setup Hyper-parameters","d54c0fc9":"# Some Utilities","855c7f52":"# Download Data","07dd92fb":"# Testing","ab5421d5":"# Dataset","16227daf":"# **Homework 1: COVID-19 Cases Prediction (Regression)**","1888b1ee":"# Deep Neural Network","1e7ca1ed":"# Train\/Dev\/Test","83d68ef8":"# Load data and model","c0755eb9":"# Start Training!","6bea62fb":"# Import Some Packages","7a2cb7b8":"# DataLoader"}}