{"cell_type":{"428f41a5":"code","044449ec":"code","cde34844":"code","80fb1b7e":"code","b9513cbb":"code","000db57e":"code","8966bce4":"code","053e94b6":"code","69d55363":"code","7c43b834":"code","07b9aff8":"code","40b6e679":"code","73bbdf41":"code","e077b41b":"code","25f1f078":"code","e232e0f1":"code","d2608559":"code","c2448d77":"code","8064835a":"code","307831da":"code","7c6045b7":"markdown","a068142e":"markdown","8d878aa3":"markdown","de173d72":"markdown","08677a64":"markdown","69533060":"markdown","8e42018e":"markdown","99b466ac":"markdown","83cc8b59":"markdown","3755e30a":"markdown","65edda7f":"markdown","65832278":"markdown","9de48881":"markdown"},"source":{"428f41a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","044449ec":"# load of test and training data\ntrain_raw_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_raw_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","cde34844":"# Exploring and understand the data set\ntrain_raw_data.head()","80fb1b7e":"# Scan training data, null data count\nprint(\"Train data\")\ntrain_raw_data.isnull().sum()","b9513cbb":"# Mapping unique values from Embarked\nlookup_Embarked_values = dict(zip(train_raw_data.Embarked.unique(), train_raw_data.Embarked.unique()))   \nlookup_Embarked_values","000db57e":"# Clean data process \ndef clean_data(df):\n    # Fill de Nan Valuen in Fare an Age \n    df[\"Fare\"]=df[\"Fare\"].fillna(df[\"Fare\"].dropna().median())\n    # Fill the Nan values in Age Column\n    df[\"Age\"]=df[\"Age\"].fillna(df[\"Age\"].dropna().median())\n    #Clear NaN values from embarked:\n    df.dropna(subset=['Embarked'],inplace=True)\n    #Drop Columns no used to do the analsis\n    df.drop(['Cabin','Name','PassengerId','Ticket'],axis=1,inplace=True)\n    #Change Male and female por numeric values\n    df.Sex = [1 if each == \"male\" else 0 for each in df.Sex]\n    #Change Embarked por numeric values\n    df.loc[df[\"Embarked\"]==\"S\",\"Embarked\"]=0\n    df.loc[df[\"Embarked\"]==\"C\",\"Embarked\"]=1\n    df.loc[df[\"Embarked\"]==\"Q\",\"Embarked\"]=2\n    \n    return df\n     \nclean_train_data = clean_data(train_raw_data)      \nclean_train_data.isnull().sum()","8966bce4":"clean_train_data","053e94b6":"#Split de train clean data in X(data) y Y(Label):\nX = clean_train_data.drop('Survived', axis=1)\ny = clean_train_data.get('Survived')","69d55363":"#Split clean_train_data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)","7c43b834":"# Create classifier object\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 10)","07b9aff8":"# Train the classifier (fit the estimator) using the training data\nknn.fit(X_train, y_train)","40b6e679":"# Estimate the accuracy of the classifier on future data, using the test data\nknn.score(X_test, y_test)","73bbdf41":"test_raw_data.head()","e077b41b":"#Exploraci\u00f3n y limpieza de los datos de prueba:\nprint(\"Test data\")\ntest_raw_data.isnull().sum()","25f1f078":"# Clean data process \ndef clean_data(df):\n    # Fill de Nan Valuen in Fare an Age \n    df[\"Fare\"]=df[\"Fare\"].fillna(df[\"Fare\"].dropna().median())\n    # Fill the Nan values in Age Column\n    df[\"Age\"]=df[\"Age\"].fillna(df[\"Age\"].dropna().median())\n    #Clear NaN values from embarked:\n    df.dropna(subset=['Embarked'],inplace=True)\n    #Drop Columns no used to do the analsis\n    df.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)\n    #Change Male and female por numeric values\n    df.Sex = [1 if each == \"male\" else 0 for each in df.Sex]\n    #Change Embarked por numeric values\n    df.loc[df[\"Embarked\"]==\"S\",\"Embarked\"]=0\n    df.loc[df[\"Embarked\"]==\"C\",\"Embarked\"]=1\n    df.loc[df[\"Embarked\"]==\"Q\",\"Embarked\"]=2\n    \n    return df","e232e0f1":"clean_test_data = clean_data(test_raw_data)\nclean_test_data.isnull().sum()","d2608559":"clean_test_data","c2448d77":"# Add the column ['predicted_survived'] to data set\nclean_test_data['predicted_survived'] = knn.predict(clean_test_data.drop('PassengerId',axis=1))","8064835a":"clean_test_data.head()","307831da":"submission = pd.DataFrame({\n        \"PassengerId\": clean_test_data['PassengerId'],\n        \"Survived\": clean_test_data['predicted_survived']\n    })\nsubmission.to_csv('submission.csv',index=False)","7c6045b7":"**Exploring the test data set**","a068142e":"**Clean the training data set**\n\nTo clean the test data the first thing that will be done is:\n1. Fill in the null age and fare data using the median\n2. Drop the null values from the 'Embarked' column\n3. Drop the columns ['Cabin','Name','Ticket']\n4. Change the sex data to numerical data, 1 for male and 0 for female\n5. Change Embarked by numeric values","8d878aa3":"**Create the shipping documents of the competition**\n\nUse the dataset to extract the columns of ['PassengerId] and ['predicted_survived'] and generates the .cvs file, which contains the answer to the problem","de173d72":"**Titanic ML competition with annotations**\n\nThe competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.","08677a64":"**Create the KNeighbors Classifier**","69533060":"**Load training and test data**\nThe first step is to load the data that will be used to solve the problem proposed in the competition, these will be saved in the variables:\n* *train_raw_data*\n* *test_raw_data*","8e42018e":"**Split de train_clean_data**\n\nSplit 'clean train data' to get the data and tags that are saved in the DataFrame:\n\n* The data is found in the columns:['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'] and will be saved in the variable x\n* The tags are found in the columns: ['Survived'] and will be saved in the variable y","99b466ac":"**Exploring the training data set**","83cc8b59":"**Score the train KNeighbors Classifier**","3755e30a":"**Use the clean_test_data in the KNeighbors Classifier created earlier**","65edda7f":"**Clean the training data set**\n\nTo clean the training data the first thing that will be done is:\n1. Fill in the null age and fare data using the median\n2. Drop the two null values from the 'Embarked' column\n3. Drop the colunms ['Cabin','Name','PassengerId','Ticket']\n4. Change the sex data to numerical data, 1 for male and 0 for female\n5. Change Embarked by numeric values","65832278":"**Create train-test split for fit and score the KNeighbors Classifier**","9de48881":"**Fit the KNeighbors Classifier**"}}