{"cell_type":{"4703e638":"code","cea83638":"code","7d8c3f61":"code","5d7d136c":"code","d267cff3":"code","d7970606":"code","dcaa289d":"code","826eaea4":"code","615c8999":"code","6539aebe":"code","a5dd1194":"code","da53dda0":"code","ffd2e5e9":"code","bd7c3fb6":"code","8d526a5c":"code","378680b5":"code","1986929e":"code","a1d4689b":"markdown","ba2b974b":"markdown","bdb74355":"markdown","e99248cf":"markdown","e26a35c3":"markdown","6e16fac7":"markdown","6a46cfd7":"markdown"},"source":{"4703e638":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cea83638":"url='..\/input\/tiktok-trending-tracks\/tiktok.csv'\ndf=pd.read_csv(url)\ndf","7d8c3f61":"px.bar(df['track_name'].value_counts().nlargest(20))","5d7d136c":"px.bar(df['artist_name'].value_counts().nlargest(50))","d267cff3":"px.bar(df['genre'].value_counts().nlargest(20))","d7970606":"du=df.drop_duplicates(subset=['track_id']).copy()\ndu","dcaa289d":"du.groupby('genre').describe()","826eaea4":"du.columns","615c8999":"@interact\ndef filter(regex_pat='.'):\n    return du[\n        (df['track_name'].str.contains(regex_pat, regex=True, case=False)) \n        ].sort_values('track_name', ascending=False)","6539aebe":"cols=[\n#     'duration', \n      'popularity', 'danceability', 'energy',\n       'key', 'loudness', 'mode', 'speechiness', 'acousticness',\n       'instrumentalness', 'liveness', 'valence', 'tempo']\n\n@interact(indicator=cols)\ndef plot_chart(indicator):\n    # interactive plotly express only work with Jupyter Notebook not VSCode\n    fig=px.box(df, x=indicator)\n    fig.show()\n\n#     fig=px.box(df, x=cols)\n#     fig.show()\n\n    # interactive seaborn works well in both Jupyter Notebook and VSCode\n#     plt.figure(figsize=(4, 6))\n#     ax = sns.boxplot(data=df, y=indicator)\n#     plt.grid()  # show grid line","a5dd1194":"du","da53dda0":"du.columns","ffd2e5e9":"var_cols=['track_id', 'track_name', \n#           'artist_id', 'artist_name', 'album_id',\n#        'duration', \n          'popularity', 'danceability', 'energy',\n#        'key', \n          'loudness', \n#           'mode', \n          'speechiness', 'acousticness',\n#        'instrumentalness', \n          'liveness', 'valence', 'tempo', \n#           'playlist_id', 'playlist_name', \n          'duration_mins', \n#           'genre'\n         ]\ndm=pd.melt(du[var_cols], id_vars=['track_id', 'track_name'])\ndm","bd7c3fb6":"corr=du.drop(columns=['track_id', 'track_name', 'duration']).corr()\ncorr","8d526a5c":"px.imshow(corr, color_continuous_scale='piyg', color_continuous_midpoint=0)","378680b5":"fig = px.box(dm, x=\"value\", facet_col=\"variable\", color=\"variable\", facet_col_wrap=4, facet_row_spacing=0.12,\n    facet_col_spacing=0.07,)\nfig.update_yaxes(matches=None, showticklabels=True,)\nfig.update_xaxes(matches=None, showticklabels=True,)\n\nfig","1986929e":"fig = px.violin(dm, y=\"value\", facet_col=\"variable\", color=\"variable\", facet_col_wrap=4, facet_row_spacing=0.12,\n    facet_col_spacing=0.07,)\nfig.update_yaxes(matches=None, showticklabels=True,)\nfig.update_xaxes(matches=None, showticklabels=True,)\n\nfig","a1d4689b":"### genre","ba2b974b":"## read data","bdb74355":"## Unique tracks","e99248cf":"## interactive chart","e26a35c3":"### top tracks","6e16fac7":"### top artists","6a46cfd7":"## interactive dataframe"}}