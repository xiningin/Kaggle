{"cell_type":{"6a924c31":"code","9a3bbe57":"code","e500d7d9":"code","019ef414":"code","557291b5":"code","cfdd4ef0":"code","7b3759e1":"code","0af59f84":"code","1697d953":"code","6415104e":"code","84ddc325":"code","9747c459":"code","18d17d87":"code","45e73d49":"markdown","4cc4350c":"markdown","e83ee7e8":"markdown","87301292":"markdown","5e0b9b66":"markdown","c61d167c":"markdown"},"source":{"6a924c31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a3bbe57":"# Seed Everything\nimport random\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything()","e500d7d9":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')","019ef414":"train.head()","557291b5":"train.info()","cfdd4ef0":"train.columns[train.isnull().sum() > 0]","7b3759e1":"# Nothing to do at this time.","0af59f84":"# Train-Test Split\nfrom sklearn.model_selection import train_test_split\n\nX = train.drop('target', axis=1)\ny = train['target']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)","1697d953":"from lightgbm import LGBMRegressor\nlgbm = LGBMRegressor(\n    metric='auc'\n)\nlgbm.fit(X_train, y_train)","6415104e":"from sklearn.metrics import roc_auc_score\n\nroc_auc_score(y_valid, lgbm.predict(X_valid))","84ddc325":"# Fit with all data\nlgbm.fit(X, y)","9747c459":"# Predict\ny_pred = lgbm.predict(test)\ny_pred","18d17d87":"# Submit\nsubmission = pd.DataFrame({\n    'id': test['id'],\n    'target': y_pred\n})\nsubmission.to_csv('submission.csv', index=False)","45e73d49":"# Workflow\n1. Load Dataset\n1. EDA\n1. Feature Engineering\n1. Modeling\n1. Submit","4cc4350c":"# Submit","e83ee7e8":"# EDA","87301292":"# Modeling","5e0b9b66":"# Feature Engineering","c61d167c":"# Load Dataset"}}