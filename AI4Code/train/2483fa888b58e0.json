{"cell_type":{"84e2f052":"code","810f0b3a":"code","20f60dd2":"code","fc17ba71":"code","6edd6c4e":"code","1e333148":"code","40da92a3":"code","a755ee98":"code","e41c1af4":"code","746ecb31":"code","ac9c94cf":"code","9257b280":"code","b131ce36":"code","075deddb":"code","3ef8a536":"code","f17747f0":"code","c951b6e5":"code","81dd0c36":"code","97c7f5bb":"code","53a04d83":"code","6439e11b":"code","4da71848":"code","5e8a837e":"code","30835861":"code","a0656b8a":"code","3c28555b":"code","db6ffaf7":"code","8b98cb70":"code","6989b8c5":"markdown","158b7649":"markdown","11dfc3d7":"markdown","a3837022":"markdown","fa9d179f":"markdown","97ed9995":"markdown","28c12073":"markdown","1ad09fa2":"markdown","95baf25a":"markdown","2bdbf730":"markdown","1557a738":"markdown","90f7c268":"markdown","461d1c48":"markdown","dd4499bd":"markdown","d0dc85de":"markdown","7e4267a7":"markdown","0e3bed16":"markdown"},"source":{"84e2f052":"!curl https:\/\/topcs.blob.core.windows.net\/public\/FlightData.csv -o flightdata.csv","810f0b3a":"import pandas as pd\n\ndf = pd.read_csv('flightdata.csv')\ndf.head()","20f60dd2":"df.shape","fc17ba71":"df.isnull().sum()","6edd6c4e":"df = df.drop('Unnamed: 25', axis=1)\ndf.isnull().sum()","1e333148":"df = df[[\"MONTH\", \"DAY_OF_MONTH\", \"DAY_OF_WEEK\", \"ORIGIN\", \"DEST\", \"CRS_DEP_TIME\", \"ARR_DEL15\"]]\ndf.isnull().sum()","40da92a3":"df = df.fillna({'ARR_DEL15': 1})\n","a755ee98":"df","e41c1af4":"df.isnull().sum()","746ecb31":"import math\n\nfor index, row in df.iterrows():\n    df.loc[index, 'CRS_DEP_TIME'] = math.floor(row['CRS_DEP_TIME'] \/ 100)\ndf.head()","ac9c94cf":"df = pd.get_dummies(df, columns=['ORIGIN', 'DEST'])\ndf.head()","9257b280":"from sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(df.drop('ARR_DEL15', axis=1), df['ARR_DEL15'], test_size=0.2, random_state=42)","b131ce36":"train_x.shape","075deddb":"test_x.shape","3ef8a536":"train_y.shape","f17747f0":"test_y.shape","c951b6e5":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(random_state=30)\nmodel.fit(train_x, train_y)","81dd0c36":"predicted = model.predict(test_x)\nmodel.score(test_x, test_y)","97c7f5bb":"from sklearn.metrics import roc_auc_score\nprobabilities = model.predict_proba(test_x)\nprobabilities","53a04d83":"roc_auc_score(test_y, probabilities[:, 1])","6439e11b":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(test_y, predicted)","4da71848":"from sklearn.metrics import precision_score\n\ntrain_predictions = model.predict(train_x)\nprecision_score(train_y, train_predictions)","5e8a837e":"from sklearn.metrics import recall_score\n\nrecall_score(train_y, train_predictions)","30835861":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()","a0656b8a":"from sklearn.metrics import roc_curve\n\nfpr, tpr, _ = roc_curve(test_y, probabilities[:, 1])\nplt.plot(fpr, tpr)\nplt.plot([0, 1], [0, 1], color='grey', lw=1, linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')","3c28555b":"def predict_delay(departure_date_time, origin, destination):\n    from datetime import datetime\n\n    try:\n        departure_date_time_parsed = datetime.strptime(departure_date_time, '%d\/%m\/%Y %H:%M:%S')\n    except ValueError as e:\n        return 'Error parsing date\/time - {}'.format(e)\n\n    month = departure_date_time_parsed.month\n    day = departure_date_time_parsed.day\n    day_of_week = departure_date_time_parsed.isoweekday()\n    hour = departure_date_time_parsed.hour\n\n    origin = origin.upper()\n    destination = destination.upper()\n\n    input = [{'MONTH': month,\n              'DAY': day,\n              'DAY_OF_WEEK': day_of_week,\n              'CRS_DEP_TIME': hour,\n              'ORIGIN_ATL': 1 if origin == 'ATL' else 0,\n              'ORIGIN_DTW': 1 if origin == 'DTW' else 0,\n              'ORIGIN_JFK': 1 if origin == 'JFK' else 0,\n              'ORIGIN_MSP': 1 if origin == 'MSP' else 0,\n              'ORIGIN_SEA': 1 if origin == 'SEA' else 0,\n              'DEST_ATL': 1 if destination == 'ATL' else 0,\n              'DEST_DTW': 1 if destination == 'DTW' else 0,\n              'DEST_JFK': 1 if destination == 'JFK' else 0,\n              'DEST_MSP': 1 if destination == 'MSP' else 0,\n              'DEST_SEA': 1 if destination == 'SEA' else 0 }]\n\n    return model.predict_proba(pd.DataFrame(input))[0][0]","db6ffaf7":"predict_delay('1\/10\/2018 21:45:00', 'JFK', 'ATL')","8b98cb70":"import numpy as np\n\nlabels = ('Oct 1', 'Oct 2', 'Oct 3', 'Oct 4', 'Oct 5', 'Oct 6', 'Oct 7')\nvalues = (predict_delay('1\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('2\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('3\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('4\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('5\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('6\/10\/2018 21:45:00', 'JFK', 'ATL'),\n          predict_delay('7\/10\/2018 21:45:00', 'JFK', 'ATL'))\nalabels = np.arange(len(labels))\n\nplt.bar(alabels, values, align='center', alpha=0.5)\nplt.xticks(alabels, labels)\nplt.ylabel('Probability of On-Time Arrival')\nplt.ylim((0.0, 1.0))","6989b8c5":"# Binning the departure times","158b7649":"The probability is 0.82","11dfc3d7":"**Roc < Accuracy because data is skewed**","a3837022":"![image.png](attachment:image.png)","fa9d179f":"# Taking only the features that are necessary","97ed9995":"# Building Model","28c12073":"**The below function takes as input a date and time, an origin airport code, and a destination airport code, and returns a value between 0.0 and 1.0 indicating the probability that the flight will arrive at its destination on time.**","1ad09fa2":"# Column Details","95baf25a":"Table of contents\n* [Data Cleaning](#section-three)\n* [Data Modelling](#section-ten)\n* [Data Validation](#section-fifteen)\n* [Probability of on-time arrivals for an evening flight from JFK to ATL over a range of days](#section-eighteen)\n* [Summary](#section-twenty)","2bdbf730":"The 26th column (\"Unnamed: 25\") contains 11,231 missing values, which equals the number of rows in the dataset.So it can be removed.","1557a738":"# Cleaning and preparing data","90f7c268":"**Lets check for 1 value**","461d1c48":"# Summary","dd4499bd":"# Probability of on-time arrivals for an evening flight from JFK to ATL over a range of days","d0dc85de":"![image.png](attachment:image.png)\n","7e4267a7":"Things done in this notebook :\n\nImport data using curl, \nUse Pandas to clean and prepare data, \nUse scikit-learn to build a machine-learning model, \nUse Matplotlib to visualize the results","0e3bed16":"![image.png](attachment:image.png)"}}