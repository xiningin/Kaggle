{"cell_type":{"559b9698":"code","b59e517c":"code","4c366582":"code","f5db36d4":"code","7609f434":"code","fe0b3147":"code","14f4b556":"code","1dc78162":"code","5291f1e2":"code","a72e3968":"code","51aa64ea":"code","d87c8ec7":"code","4ef32767":"code","72a5ad0f":"code","c26dd8cb":"code","db639bba":"code","2d77085d":"code","ae521f5f":"code","d0a96dd2":"code","7586e74a":"code","72c0740f":"code","f83c8c1c":"code","e8a72201":"code","b0b0d894":"code","5461e45d":"code","0a4cd7d5":"code","1e5d2eff":"code","afd4661b":"markdown","7740c114":"markdown","ae01f790":"markdown","2a152ab1":"markdown","e22c53ef":"markdown","492eded5":"markdown"},"source":{"559b9698":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","b59e517c":"\nscoutingData = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')\n# tracking2018 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\n# tracking2019 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2019.csv')\n# tracking2020 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')","4c366582":"\nprint('The shape of dataset for Scouting :', scoutingData.shape)\n# print('The shape of dataset for 2018 Season :', tracking2018.shape)\n# print('The shape of dataset for 2019 Season :', tracking2019.shape)\n# print('The shape of dataset for 2020 Season :', tracking2020.shape)","f5db36d4":"players = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/players.csv')\nprint('data loading complete...')\nprint('*'*50)\nprint('The shape of dataset for players :', players.shape)\nprint('*'*50)\ndisplay(players.head().T)\nprint('*'*50)\ndisplay(players.tail().T)\nprint('*'*50)\nprint('Unique values in player height :', players['height'].unique())\nprint('*'*50)\n\nheight = []\n\nfor i in players['height']:\n    i = i.split('-')\n    \n    if len(i) == 1:\n        height.append(int(i[0]))\n        \n    else:\n        height.append((int(i[0])*12) + int(i[1]))\n        \nplayers['height'] = height\n\nprint('Height in inches of all players :', players['height'].unique())\nprint('*'*50)\n\nprint('Total Number of Colleges : ', players['collegeName'].nunique())\nprint('*'*50)\nprint('Top 20 Colleges contributing to player pool : \\n', players['collegeName'].value_counts()[:20])\nprint('*'*50)\nplayers['Position'].value_counts()\n\n# Fixing the dates\nplayers['birthDate'] = pd.to_datetime(players.birthDate)\nplayers['birthDate'] = players['birthDate'].dt.strftime('%Y-%m-%d')\ndisplay(players.tail(10).T)\n\n# Extracting Birthyear\nplayers['birthYear'] = pd.DatetimeIndex(players['birthDate']).year","7609f434":"college = players.groupby('collegeName').size().sort_values(0, ascending = False).reset_index()\ncollege.columns = ['Name', 'Count']","fe0b3147":"f, axs = plt.subplots(3,2, figsize = (20,15))\n\nplt.subplots_adjust(left=0.1,bottom=0.5,right=0.9, top=2, wspace=0.4)\n\n\nsns.histplot(players['height'],  binwidth = 1, kde = True, ax = axs[0,0])\naxs[0,0].set_xlabel('Height(in inches)')\n\nsns.histplot(players['weight'],  binwidth = 1, kde = True, ax = axs[0,1])\naxs[0,1].set_xlabel('Weight(in pounds)')\n\nsns.histplot(players['birthYear'],  binwidth = 1, kde = True, ax = axs[1,0])\naxs[1,0].set_xlabel('Year of Birth')\n\nsns.barplot( x = 'Name', y = 'Count', data = college[:20],  ax = axs[1,1])\naxs[1,1].set_xlabel('Top 20 colleges')\naxs[1,1].set_xticklabels(college['Name'][:20], rotation = 50)\n\nsns.histplot(players['Position'],  binwidth = 1, kde = True, ax = axs[2,0])\naxs[2,0].set_xlabel('Field Position')\naxs[2,0].set_xticklabels(players['Position'], rotation = 50)","14f4b556":"games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/games.csv')\nprint('The shape of dataset for games :', games.shape)","1dc78162":"games['gameDate'] = pd.to_datetime(games.gameDate)\ngames['gameDate'] = games['gameDate'].dt.strftime('%Y-%m-%d')\ngames['dayofweek'] = pd.to_datetime(games.gameDate).dt.dayofweek\ngames['gameMonth'] = pd.to_datetime(games.gameDate).dt.month\ndisplay(games.head().T)\ndisplay(games.tail().T)","5291f1e2":"fig , ax = plt.subplots(figsize = (10,10))\nsns.countplot(games['season'])\nfor p in ax.patches:\n    ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+0.5),ha='center', va='top', color='black', size=14)","a72e3968":"fig , ax = plt.subplots(2,1, figsize = (20,20))\n\nsns.countplot(games['homeTeamAbbr'], ax = ax[0])\nax[0].set_xlabel('Teams Hosting')\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+0.5),ha='center', va='top', color='black', size=14)\n    \nsns.countplot(games['visitorTeamAbbr'], ax = ax[1])\nax[1].set_xlabel('Teams Visiting')\nfor p1 in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p1.get_height()), (p1.get_x()+0.4, p1.get_height()+0.5),ha='center', va='top', color='black', size=14)\n","51aa64ea":"fig , ax = plt.subplots(3, 1, figsize = (20,20))\n\nfig.suptitle('Games on different days of the week')\n\nsns.countplot(x= 'dayofweek', data = games.loc[games['season'] == 2018], ax = ax[0])\nax[0].set_xlabel('Season 2018')\nax[0].set_xticklabels(['Monday','Thursday','Saturday','Sunday'])\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+9),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'dayofweek', data = games.loc[games['season'] == 2019], ax = ax[1])\nax[1].set_xlabel('Season 2019')\nax[1].set_xticklabels(['Monday','Thursday','Saturday','Sunday'])\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+9),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'dayofweek', data = games.loc[games['season'] == 2020], ax = ax[2])\nax[2].set_xlabel('Season 2020')\nax[2].set_xticklabels(['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+9),ha='center', va='top',\\\n                   color='black', size=14)","d87c8ec7":"fig , ax = plt.subplots(3, 1, figsize = (20,20))\n\nfig.suptitle('Games on different months')\n\nsns.countplot(x= 'gameMonth', data = games.loc[games['season'] == 2018], ax = ax[0])\nax[0].set_xlabel('Season 2018')\nax[0].set_xticklabels(['September','October','November','December'])\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+3),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'gameMonth', data = games.loc[games['season'] == 2019], ax = ax[1])\nax[1].set_xlabel('Season 2019')\nax[1].set_xticklabels(['September','October','November','December'])\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+3),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'gameMonth', data = games.loc[games['season'] == 2020], ax = ax[2])\nax[2].set_xlabel('Season 2020')\nax[2].set_xticklabels(['January','September','October','November','December'])\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+3),ha='center', va='top',\\\n                   color='black', size=14)","4ef32767":"fig , ax = plt.subplots(figsize = (20,10))\n\nsns.countplot(games['week'])\nax.set_xlabel('Games per week of the season')\nfor p in ax.patches:\n    ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+1),ha='center', va='top',\\\n                   color='black', size=14)","72a5ad0f":"fig , ax = plt.subplots(3, 1, figsize = (20,20))\n\nfig.suptitle('Games Timings during different seasons')\n\nsns.countplot(x= 'gameTimeEastern', data = games.loc[games['season'] == 2018], ax = ax[0])\nax[0].set_xlabel('Season 2018')\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+5),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'gameTimeEastern', data = games.loc[games['season'] == 2019], ax = ax[1])\nax[1].set_xlabel('Season 2019')\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+5),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'gameTimeEastern', data = games.loc[games['season'] == 2020], ax = ax[2])\nax[2].set_xlabel('Season 2020')\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+5),ha='center', va='top',\\\n                   color='black', size=14)","c26dd8cb":"plays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/plays.csv')\nprint('The shape of dataset for plays :', plays.shape)","db639bba":"#merge data with games data to extract more information\nplays = plays.merge(games, on = 'gameId')","2d77085d":"homeTeam = []\nfor i,j in zip(plays['homeTeamAbbr'], plays['possessionTeam']):\n    if i == j:\n        homeTeam.append(1)\n    else:\n        homeTeam.append(0)\n    \nplays['HomeTeamPossesion'] = homeTeam\nplays.head().T","ae521f5f":"fig , ax = plt.subplots(3, 1, figsize = (20,20))\n\nfig.suptitle('Number of plays per Quater')\n\nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2018], ax = ax[0])\nax[0].set_xlabel('Season 2018')\n# ax[0].set_xticklabels(['September','October','November','December'])\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+10),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2019], ax = ax[1])\nax[1].set_xlabel('Season 2019')\n# ax[1].set_xticklabels(['September','October','November','December'])\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+10),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2020], ax = ax[2])\nax[2].set_xlabel('Season 2020')\n# ax[2].set_xticklabels(['January','September','October','November','December'])\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+10),ha='center', va='top',\\\n                   color='black', size=14)","d0a96dd2":"fig , ax = plt.subplots(figsize = (20,10))\n\nsns.countplot(y = plays['possessionTeam'], order = plays['possessionTeam'].value_counts().index)\nax.set_xlabel('Number of plays')\nax.set_ylabel('Team in Possession')\n# for p in ax.patches:\n#     ax.annotate('{:.1f}'.format(p.get_x()), (p.get_height()+1, p.get_x()+0.4),\\\n#                    color='black', size=14)\n\n","7586e74a":"fig , ax = plt.subplots(3, 1, figsize = (25,20))\n\nfig.suptitle('Plays made by teams per season')\n\nsns.countplot(x= 'possessionTeam', data = plays.loc[plays['season'] == 2018],ax = ax[0])\nax[0].set_xlabel('Season 2018')\n# ax[0].set_xticklabels(['September','October','November','December'])\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'possessionTeam', data = plays.loc[plays['season'] == 2019], ax = ax[1])\nax[1].set_xlabel('Season 2019')\n# ax[1].set_xticklabels(['September','October','November','December'])\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'possessionTeam', data = plays.loc[plays['season'] == 2020], ax = ax[2])\nax[2].set_xlabel('Season 2020')\n# ax[2].set_xticklabels(['January','September','October','November','December'])\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)","72c0740f":"fig , ax = plt.subplots(3, 1, figsize = (20,20))\n\nfig.suptitle('Number of plays per Quater')\n\nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2018], hue = 'HomeTeamPossesion',ax = ax[0])\nax[0].set_xlabel('Season 2018')\n# ax[0].set_xticklabels(['September','October','November','December'])\nfor p in ax[0].patches:\n    ax[0].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2019], hue = 'HomeTeamPossesion', ax = ax[1])\nax[1].set_xlabel('Season 2019')\n# ax[1].set_xticklabels(['September','October','November','December'])\nfor p in ax[1].patches:\n    ax[1].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)\n    \nsns.countplot(x= 'quarter', data = plays.loc[plays['season'] == 2020], hue = 'HomeTeamPossesion', ax = ax[2])\nax[2].set_xlabel('Season 2020')\n# ax[2].set_xticklabels(['January','September','October','November','December'])\nfor p in ax[2].patches:\n    ax[2].annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+8),ha='center', va='top',\\\n                   color='black', size=14)","f83c8c1c":"fig , ax = plt.subplots(figsize = (20,10))\n# , order = plays['yardlineNumber'].value_counts().index\nsns.histplot( plays['yardlineNumber'], kde = True)\nax.set_xlabel('Number of plays')\nax.set_ylabel('Team in Possession')\nfor p in ax.patches:\n    ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.5, p.get_height()+250),ha='center', va='top',\\\n                   color='black', size=14)\n","e8a72201":"plays['specialTeamsResult'].unique()","b0b0d894":"fig , ax = plt.subplots(figsize = (20,10))\n\nsns.countplot(x = plays['specialTeamsResult'], order = plays['specialTeamsResult'].value_counts().index)\nax.set_xlabel('Result of the play')\nax.set_ylabel('Count of Plays')\nax.set_xticklabels(['Touchback', 'Return', 'Kick Attempt Good', 'Fair Catch', 'Downed','Muffed', 'Kick Attempt No Good',\\\n                    'Out of Bounds','Non-Special Teams Result', 'Blocked Kick Attempt', 'Blocked Punt',\\\n                    'Kickoff Team Recovery'],rotation = 50)\nfor p in ax.patches:\n    ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.4, p.get_height()+140),ha='center', va='top',\\\n                   color='black', size=14)\n","5461e45d":"fig , ax = plt.subplots(figsize = (20,10))\n# , order = plays['yardlineNumber'].value_counts().index\nsns.histplot( plays['kickLength'], kde = True)\nax.set_xlabel('Distance of Kicks')\nax.set_ylabel('Count')\n# for p in ax.patches:\n#     ax.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.5, p.get_height()+100),ha='center', va='top',\\\n#                    color='black', size=14)","0a4cd7d5":"print('Total Number of Plays :', len(plays['passResult']))\nprint('*'*50)\nprint('Total Number of non pass plays :', plays['passResult'].isnull().sum())","1e5d2eff":"# tracking2018 = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv')\n# print('The shape of dataset for 2018 Season :', tracking2018.shape)\n# print('*'*50)\n# tracking2018.head().T","afd4661b":"## Processing and Exploring Games data","7740c114":"## Processing and Exploring Player data","ae01f790":"## Processing Games and Exploring plays data","2a152ab1":"## Processing 2018 Tracking data","e22c53ef":"- x : 0 to 120 (in yards)\n- y : 0 to 53.3 (in yards)\n- s : yards\/sec\n- a : acc\/sec^2\n- dis : Distance travelled from pervious point (in yards)\n- o : player Orientation (degree)\n- dir : Direction of movement (degree) ","492eded5":"Game data: The games.csv contains the teams playing in each game. The key variable is gameId.\n\nPlay data: The plays.csv file contains play-level information from each game. The key variables are gameId and playId.\n\nPlayer data: The players.csv file contains player-level information from players that participated in any of the tracking data files. The key variable is nflId.\n\nTracking data: Files tracking[season].csv contain player tracking data from season [season]. The key variables are gameId, playId, and nflId.\n\nPFF Scouting data: The PFFScoutingData.csv file contains play-level scouting information for each game. The key variables are gameId and playId."}}