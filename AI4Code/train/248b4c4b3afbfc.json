{"cell_type":{"e63f88c5":"code","e0615cd3":"code","0b7c5aa7":"code","a8169945":"code","48b79735":"code","d697cc6b":"code","54a89ea9":"code","78f8d8db":"code","1e7eb98f":"code","089d0869":"markdown","94ea6c85":"markdown","ec893989":"markdown","e9112cd5":"markdown","d581b6f1":"markdown","1bf9b03a":"markdown","c11e422b":"markdown","cd54f641":"markdown","9fb6ff0f":"markdown","3b5404fe":"markdown"},"source":{"e63f88c5":"import pandas as pd\nimport numpy as np\npd.options.mode.chained_assignment = None \npd.options.display.max_rows= 20\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom scipy.sparse import hstack,csr_matrix\nfrom sklearn.linear_model import RidgeCV\n\nnhl_pbp = pd.read_csv('\/kaggle\/input\/nhl-playbyplay-data-from-2007\/hockey_scraper_data\/pbp\/nhl_pbp20182019.csv')\nnhl_pbp = nhl_pbp[nhl_pbp['Game_Id'] < 30000 ] #Regular season only","e0615cd3":"nhl_pbp['poss_time'] = pd.to_numeric(nhl_pbp['Seconds_Elapsed']).diff().fillna(0).clip(lower=0)\n\nnhl_pbp['home_shot'] = 0\nnhl_pbp['away_shot'] = 0\n\nnhl_pbp.loc[((nhl_pbp['Event'] == 'SHOT') | (nhl_pbp['Event'] == 'MISS') | (nhl_pbp['Event'] == 'GOAL')) & ((nhl_pbp[['homePlayer1_id','homePlayer2_id','homePlayer3_id','homePlayer4_id','homePlayer5_id','homePlayer6_id']].isin(nhl_pbp['p1_ID']).any(1))),'home_shot'] = 1\nnhl_pbp.loc[((nhl_pbp['Event'] == 'SHOT') | (nhl_pbp['Event'] == 'MISS') | (nhl_pbp['Event'] == 'GOAL')) & ((nhl_pbp[['awayPlayer1_id','awayPlayer2_id','awayPlayer3_id','awayPlayer4_id','awayPlayer5_id','awayPlayer6_id']].isin(nhl_pbp['p1_ID']).any(1))),'away_shot'] = 1\n\nnhl_pbp.loc[(nhl_pbp['Event'] == 'BLOCK' ) & ((nhl_pbp[['awayPlayer1_id','awayPlayer2_id','awayPlayer3_id','awayPlayer4_id','awayPlayer5_id','awayPlayer6_id']].isin(nhl_pbp['p1_ID']).any(1))),'home_shot'] = 1\nnhl_pbp.loc[(nhl_pbp['Event'] == 'BLOCK' ) & ((nhl_pbp[['homePlayer1_id','homePlayer2_id','homePlayer3_id','homePlayer4_id','homePlayer5_id','homePlayer6_id']].isin(nhl_pbp['p1_ID']).any(1))),'away_shot'] = 1\n\nnhl_pbp.loc[(nhl_pbp['home_shot'] == 0 ) & ((nhl_pbp['Event'] == 'SHOT') | (nhl_pbp['Event'] == 'MISS') | (nhl_pbp['Event'] == 'GOAL')) & (nhl_pbp['Home_Zone'] == 'Off'), 'home_shot'] = 1\nnhl_pbp.loc[(nhl_pbp['away_shot'] == 0 ) & ((nhl_pbp['Event'] == 'SHOT') | (nhl_pbp['Event'] == 'MISS') | (nhl_pbp['Event'] == 'GOAL')) & (nhl_pbp['Home_Zone'] == 'Def'), 'away_shot'] = 1\n\nnhl_pbp.loc[(nhl_pbp['home_shot'] == 0 ) & (nhl_pbp['Event'] == 'BLOCK') & (nhl_pbp['Home_Zone'] == 'Def'), 'home_shot'] = 1\nnhl_pbp.loc[(nhl_pbp['away_shot'] == 0 ) & (nhl_pbp['Event'] == 'BLOCK') & (nhl_pbp['Home_Zone'] == 'Off'), 'away_shot'] = 1","0b7c5aa7":"nhl_pbp['faceoff'] = (np.select(condlist=[((nhl_pbp['Event'] == 'FAC') & (nhl_pbp['Ev_Zone'] == 'Neu')), ((nhl_pbp['Event'] == 'FAC') & (nhl_pbp['Ev_Zone'] == 'Off')),((nhl_pbp['Event'] == 'FAC') & (nhl_pbp['Ev_Zone'] == 'Def'))], \n           choicelist=[0,1,-1], default=np.nan))\n\nnhl_pbp['faceoff'] = nhl_pbp['faceoff'].ffill().fillna(0)","a8169945":"nhl_pbp.loc[nhl_pbp['homePlayer6_id'].astype(str) == '', 'homePlayer6_id'] ='home,SH_1'\nnhl_pbp.loc[nhl_pbp['homePlayer5_id'].astype(str) == '', 'homePlayer5_id'] ='home,SH_2'\n\n\nnhl_pbp.loc[nhl_pbp['awayPlayer6_id'].astype(str) == '', 'awayPlayer6_id'] ='away,SH_1'\nnhl_pbp.loc[nhl_pbp['awayPlayer5_id'].astype(str) == '', 'awayPlayer5_id'] ='away,SH_2'\n\nnhl_pbp = nhl_pbp[(nhl_pbp.Home_Players >= 4) & (nhl_pbp.Away_Players >= 4)]","48b79735":"nhl_pbp.loc[nhl_pbp['Home_Goalie_Id'] == nhl_pbp['homePlayer6_id'], 'homePlayer6_id'] = 'goalie'\nnhl_pbp.loc[nhl_pbp['Home_Goalie_Id'] == nhl_pbp['homePlayer5_id'], 'homePlayer5_id'] = 'goalie'\nnhl_pbp.loc[nhl_pbp['Home_Goalie_Id'] == nhl_pbp['homePlayer4_id'], 'homePlayer4_id'] = 'goalie'\n\nnhl_pbp.loc[nhl_pbp['Away_Goalie_Id'] == nhl_pbp['awayPlayer6_id'], 'awayPlayer6_id'] = 'goalie'\nnhl_pbp.loc[nhl_pbp['Away_Goalie_Id'] == nhl_pbp['awayPlayer5_id'], 'awayPlayer5_id'] = 'goalie'\nnhl_pbp.loc[nhl_pbp['Away_Goalie_Id'] == nhl_pbp['awayPlayer4_id'], 'awayPlayer4_id'] = 'goalie'","d697cc6b":"home_offense = nhl_pbp[nhl_pbp.poss_time > 0][['homePlayer1_id','homePlayer2_id','homePlayer3_id','homePlayer4_id','homePlayer5_id','homePlayer6_id',\n                       'awayPlayer1_id','awayPlayer2_id','awayPlayer3_id','awayPlayer4_id','awayPlayer5_id','awayPlayer6_id','faceoff',\n                                               'home_shot','poss_time']]\n\nhome_offense.columns =  home_offense.columns.str.replace('home', 'offense')\nhome_offense.columns =  home_offense.columns.str.replace('away', 'defense')\nhome_offense.columns =  home_offense.columns.str.replace('home_shot', 'shot')\nhome_offense['Home'] = 1\n\naway_offense = nhl_pbp[nhl_pbp.poss_time > 0][['homePlayer1_id','homePlayer2_id','homePlayer3_id','homePlayer4_id','homePlayer5_id','homePlayer6_id',\n                       'awayPlayer1_id','awayPlayer2_id','awayPlayer3_id','awayPlayer4_id','awayPlayer5_id','awayPlayer6_id','faceoff',\n                                               'away_shot','poss_time']]\naway_offense.columns =  away_offense.columns.str.replace('away', 'offense')\naway_offense.columns =  away_offense.columns.str.replace('home', 'defense')\naway_offense.columns =  away_offense.columns.str.replace('away_shot', 'shot')\n\naway_offense['Home'] = 0\naway_offense['faceoff'] = -away_offense['faceoff']\n\nstint_df = pd.concat([home_offense,away_offense]).reset_index()\nstint_df = stint_df.groupby(['offensePlayer1_id','offensePlayer2_id','offensePlayer3_id','offensePlayer4_id','offensePlayer5_id','offensePlayer6_id','defensePlayer1_id','defensePlayer2_id','defensePlayer3_id','defensePlayer4_id','defensePlayer5_id','defensePlayer6_id','faceoff']).sum().reset_index()\n\nstint_df['faceoff_str'] = np.nan\nstint_df.loc[stint_df.faceoff == 1, 'faceoff_str'] = 'Off'\nstint_df.loc[stint_df.faceoff == -1, 'faceoff_str'] = 'Def'","54a89ea9":"stint_df['combined_off_player'] = stint_df[['offensePlayer1_id','offensePlayer2_id','offensePlayer3_id','offensePlayer4_id','offensePlayer5_id','offensePlayer6_id']].astype(str).values.tolist()\nstint_df['combined_def_player'] = stint_df[['defensePlayer1_id','defensePlayer2_id','defensePlayer3_id','defensePlayer4_id','defensePlayer5_id','defensePlayer6_id']].astype(str).values.tolist()\n\noff_mlb = MultiLabelBinarizer(sparse_output=True)\noff_array = off_mlb.fit_transform(stint_df['combined_off_player'] )\ndef_mlb = MultiLabelBinarizer(sparse_output=True)\ndef_array = def_mlb.fit_transform(stint_df['combined_def_player'] )\n\nstint_array = hstack([off_array,def_array*-1,csr_matrix(stint_df['faceoff'].values).transpose(),csr_matrix(stint_df['Home'].values).transpose()])\n","78f8d8db":"clf = RidgeCV(alphas=[1e3,1e4,1e5])\nclf.fit(csr_matrix(stint_array),3600*stint_df['offense_shot']\/stint_df['poss_time'],sample_weight=stint_df['poss_time']) ","1e7eb98f":"player_df = pd.DataFrame({'player_id':nhl_pbp[['homePlayer1_id','homePlayer2_id','homePlayer3_id','homePlayer4_id','homePlayer5_id','homePlayer6_id', 'awayPlayer1_id','awayPlayer2_id','awayPlayer3_id','awayPlayer4_id','awayPlayer5_id','awayPlayer6_id']].values.flatten(),\n                         'player_name':nhl_pbp[['homePlayer1','homePlayer2','homePlayer3','homePlayer4','homePlayer5','homePlayer6', 'awayPlayer1','awayPlayer2','awayPlayer3','awayPlayer4','awayPlayer5','awayPlayer6']].values.flatten()})\nplayer_df = player_df.drop_duplicates().dropna()\nplayer_df['player_id'] = player_df['player_id'].astype(str)\n\nclass_list = ['{}|{}'.format(a, 'offense')for a in off_mlb.classes_] + ['{}|{}'.format(a, 'defense')for a in def_mlb.classes_] + ['faceoff', 'home']\nrapm_df = pd.DataFrame({'class':class_list,'coef':clf.coef_})\nrapm_df['player_id'] = rapm_df['class'].str.split('|').str[0]\nrapm_df['offense'] = rapm_df['class'].str.split('|').str[1]\n\nrapm_df = pd.merge(rapm_df[['player_id','offense','coef']], player_df,on='player_id',how='inner').dropna()\nrapm_df['player_name'] = rapm_df['player_name'].replace('', np.nan)\nrapm_df = rapm_df.dropna()\nrapm_df.loc[rapm_df['offense'] == 'defense', 'coef'] *= -1\nrapm_df = rapm_df[(rapm_df.player_id != 'goalie') & (rapm_df.player_id != 'NA')].sort_values(by='coef',ascending=False)\nrapm_df.head(10)","089d0869":"Here is a example of how to calculate Regularized Plus-Minus (RAPM) in hockey, which essentially is a ridge regression model of player performance. The code is inspired by [Brian McDonald's work](https:\/\/arxiv.org\/pdf\/1201.0317.pdf) on calculating player rating using similar data, in particular the Corsi (shot attempt in hockey) version. The data is collected by scraping NHL website using [scraper developed by Harry Shomer.](https:\/\/github.com\/HarryShomer\/Hockey-Scraper)","94ea6c85":"Similarly players are better off during powerplay when one or two players in opponent team are forced to sit during a penalty and we need to account for it as well ","ec893989":"After cleaning up the data what to do next is to collect all players player on the ice at the same time and group by them. It is often called as a \"stint\" in sports","e9112cd5":"In hockey players will have an advantage in starting at offensive zone, so we need to clean up faceoff data","d581b6f1":"Using [Scikit-learn's multilabel binarizer](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MultiLabelBinarizer.html) we can retrived a matrix base on identity of players, i.e. +1 for offense player, -1 for defense player and 0 for players not on the ice. Together with offensive zone and home court advantage, we are now ready to calculate RAPM.","1bf9b03a":"We can see Sidney Crosby who is one of the most decorated player in NHL is ranked pretty highly in RAPM. It is not the perfectly metric but still somewhat capture the individual player ability in the league.","c11e422b":"First we have to parsed the data to retrieve shots by home and away teams","cd54f641":"In RAPM the target varaible is player performance normalized by time played by player. Here in Corsi version of RAPM, shot attempts by player per 60 minutes\/3600 seconds (length of a hockey game) is used and the model is fit by [scikit-learn's RidgeCV](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.RidgeCV.html) in order to find the best regularization strength with player time on ice as sample weight.","9fb6ff0f":"Finally we can get the player name and merge with multilabel binarizer class name to get a dataframe as output","3b5404fe":"Hokcey goalie or goal keeper would usually play the full game or majority of the time and it will cause collinear issue during ridge regression. Therefore removing goalie's identity is needed, but also we need to distinguish empty goal situation"}}