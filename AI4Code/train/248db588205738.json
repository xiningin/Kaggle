{"cell_type":{"3ba3ead2":"code","b1cdd175":"code","961313ae":"code","ffa263af":"code","35cab4ba":"code","6e41257f":"code","ccabc548":"code","fa5384df":"code","18b1cc5e":"code","d69cd38d":"code","62def93b":"code","1c7a46c9":"code","432c2381":"code","a1df7f55":"code","448f9369":"code","2e478896":"code","ec474798":"code","46e00932":"code","1f220f94":"code","2139f640":"code","872ae2e9":"code","c57be010":"code","95e5f1fe":"code","42f10a05":"code","c42bd9bd":"code","7cdfdf02":"code","5316292f":"code","fbd3c7f8":"code","4e9c06cc":"code","edcae136":"code","b26e43c9":"code","f492f7fe":"code","5d7702fd":"code","5251941a":"code","2a7d951a":"code","6fb1e4af":"code","f82fc4a7":"code","81dd73f8":"code","3212ecf6":"code","9a603821":"code","dacad884":"markdown","3eadef4d":"markdown","0a50c6a6":"markdown","5e76aa92":"markdown","00dd88f7":"markdown","f7944299":"markdown","4f8cd2ac":"markdown","80885d22":"markdown","f5ef994a":"markdown","9ec24d80":"markdown","705922a1":"markdown"},"source":{"3ba3ead2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1cdd175":"#supress warning\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","961313ae":"#save file path\nreal_estate_file_path = '\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv'\n#read data and store data\nreal_estate = pd.read_csv(real_estate_file_path)\n#summary of real_estate data\nreal_estate.head()","ffa263af":"#inspect various aspect of dataframe\n\nreal_estate.shape","35cab4ba":"real_estate.info()","6e41257f":"#to check the null values\nreal_estate.isnull().sum()","ccabc548":"#describe the data\nreal_estate.describe()","fa5384df":"#There is no need of 'No' column and 'Date' column, hence we can drop it without afftecting our predictions.\nreal_estate.drop(['No'], axis=1, inplace=True)\nreal_estate.drop(['X1 transaction date'],axis=1, inplace=True)","18b1cc5e":"#check dataset after dropping 'No' col\nreal_estate.head()","d69cd38d":"#import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Visualising all numeric variable\nplt.figure(figsize=(6,12))\nsns.pairplot(real_estate)\nplt.show()","62def93b":"from matplotlib import style \nstyle.use(\"dark_background\")\nsns.heatmap(real_estate.corr(),annot=True,cmap=\"winter\")","1c7a46c9":"sns.jointplot(x=\"X2 house age\",y=\"Y house price of unit area\",data=real_estate,kind='kde')","432c2381":"sns.scatterplot(x=\"X5 latitude\",y=\"Y house price of unit area\",data=real_estate)","a1df7f55":"sns.distplot(real_estate[\"Y house price of unit area\"])","448f9369":"# pair plot in dark theme\nsns.pairplot(real_estate)","2e478896":"# checking the columns before moving to plit data into train and test\nreal_estate.columns","ec474798":"#importing required libraries from scikit learn to spilt in train - test\nfrom sklearn.model_selection import train_test_split,KFold,cross_val_score\n\nnp.random.seed(0)\n\ndf_train,df_test = train_test_split(real_estate, train_size=0.70, test_size=0.30,random_state=100)\nprint(df_train.head())\nprint(df_test.head())\n","46e00932":"#Dividing X and y sets for model building\ny_train = df_train.pop('Y house price of unit area')\nX_train = df_train\nprint(y_train.head())\nprint(X_train.head())","1f220f94":"#import Linear regression\nfrom sklearn.linear_model import LinearRegression","2139f640":"#fit the model\nlm = LinearRegression()\nlm.fit(X_train, y_train)","872ae2e9":"lm.coef_","c57be010":"#The coefficient of all independent variable are as follows\ncoeff = pd.DataFrame(lm.coef_, X_train.columns, columns=['coefficient'])\ncoeff","95e5f1fe":"import statsmodels.api as sm\nX_train_new = sm.add_constant(X_train)\n\nlm_1 = sm.OLS(y_train, X_train).fit()\nprint(lm_1.summary())","42f10a05":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nX = X_train_new\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\n#vif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c42bd9bd":"y_train_price = lm_1.predict(X_train)","7cdfdf02":"from sklearn.metrics import r2_score\nr2_score(y_true=y_train,y_pred=y_train_price)","5316292f":"#plot histogram of error terms\nfig = plt.figure()\nsns.distplot((y_train-y_train_price), bins=20)\nfig.suptitle('Error Terms',fontsize = 20)\nplt.xlabel('Error',fontsize=17)","fbd3c7f8":"#residual error scatter plot of error terms\n\nresidual = y_train-y_train_price\n\nfig, ax = plt.subplots(figsize=(6,2.5))\n_ = ax.scatter(residual, y_train_price)","4e9c06cc":"y_test = df_test.pop('Y house price of unit area')\nX_test = df_test","edcae136":"y_test_pred = lm_1.predict(X_test)","b26e43c9":"#import library\nfrom sklearn.metrics import r2_score\n#Evaluate r2\nr2_score(y_true=y_test,y_pred=y_test_pred)","f492f7fe":"df = pd.DataFrame({'Actual':y_test,'Predictions':y_test_pred})\ndf['Predictions']= round(df['Predictions'])\ndf.head()","5d7702fd":"sns.regplot('Actual','Predictions',data=df)","5251941a":"from sklearn import metrics\n\n#Mean absolute error(MAE)\nprint('MAE',metrics.mean_absolute_error(y_test,y_test_pred))\n#Mean squared error(MSE)\nprint('MSE',metrics.mean_squared_error(y_test,y_test_pred))\n#Root mean squared error(RMSE)\nprint('RMSE',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","2a7d951a":"from lightgbm import LGBMRegressor\nmodel=LGBMRegressor(n_estimators=1000)\nmodel.fit(X_train,y_train)\nkfold=KFold(n_splits=10)\nprint(model)\nres=cross_val_score(model,X_train,y_train,cv=kfold)\nprint(res.mean()*100)","6fb1e4af":"yp=model.predict(X_train)\n\nimport statsmodels.api as sm\nmodel1= sm.WLS(y_train,X_train).fit()\nmodel1.params","f82fc4a7":"model1.summary()","81dd73f8":"yp1=model1.predict(X_test)\n\n#import library\nfrom sklearn.metrics import r2_score\n#Evaluate r2\nr2_score(y_true=y_test,y_pred=yp1)","3212ecf6":"df = pd.DataFrame({'Actual':y_test,'Predictions':yp1})\ndf['Predictions']= round(df['Predictions'])\ndf.head()","9a603821":"from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score\n\nprint(mean_absolute_error(y_test,yp1))\nprint(mean_squared_error(y_test,yp1))","dacad884":"# Using LightGBM for Predicting Prices","3eadef4d":"# Data splitting to Training and Testing model","0a50c6a6":"There is no null value present in dataset.","5e76aa92":"Here error terms has come in normal error distribution","00dd88f7":"# Making Prediction on Final model","f7944299":"Data Visualization","4f8cd2ac":"# Evaluating Model performance","80885d22":"# Residual Analysis of train data","f5ef994a":"Calculating R2 Value now","9ec24d80":"All features p-value is significant and vif is less than 5. Hence no need to remove any feature.","705922a1":"# Data Modelling and Evaluation"}}