{"cell_type":{"8537a5c0":"code","5314d718":"code","9b8e7031":"code","211bd1da":"code","4e9499c0":"code","839ecfa4":"code","8e756fdd":"code","fd21ea46":"code","d5bc9e4b":"code","4c0e53bd":"code","dbb0d312":"code","25797207":"code","ef546e9f":"markdown"},"source":{"8537a5c0":"!pip install pycocotools","5314d718":"import cv2","9b8e7031":"import torchvision\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection.mask_rcnn import MaskRCNNPredictor\n\n      \ndef get_instance_segmentation_model(num_classes):\n    # load an instance segmentation model pre-trained on COCO\n    model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)\n\n    # get the number of input features for the classifier\n    in_features = model.roi_heads.box_predictor.cls_score.in_features\n    # replace the pre-trained head with a new one\n    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\n\n    # now get the number of input features for the mask classifier\n    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels\n    hidden_layer = 256\n    # and replace the mask predictor with a new one\n    model.roi_heads.mask_predictor = MaskRCNNPredictor(in_features_mask,\n                                                       hidden_layer,\n                                                       num_classes)\n\n    return model","211bd1da":"import os\nimport numpy as np\nimport torch\nimport torch.utils.data\nfrom PIL import Image\nimport pandas as pd\nfrom tqdm import tqdm\nimport collections\nfrom torchvision import transforms\n\nclass SevDataset(torch.utils.data.Dataset):\n    def __init__(self, image_dir, df_path, transforms=None):\n        #self.root = root\n        self.image_dir = image_dir\n        self.transforms = transforms\n        self.df = pd.read_csv(df_path)\n        self.df =  self.df[self.df['EncodedPixels'].notnull()]\n        self.df = self.process(self.df)\n    def process(self, df):\n        df['ImageId'] = df['ImageId_ClassId'].apply(lambda x: x.split('_')[0])\n        df['ClassId'] = df['ImageId_ClassId'].apply(lambda x: x.split('_')[1])\n\n        #print(df.shape)\n        return df\n    def __getitem__(self, idx):\n        # load images ad masks\n        img_path = os.path.join(self.image_dir,self.df.iloc[idx][\"ImageId\"])\n        img = Image.open(img_path)\n        image = cv2.imread(img_path)\n        rle = self.df.iloc[idx][\"EncodedPixels\"]\n        shape = (1600,256)\n        mask = self.rle2mask(rle, 256,1600)\n        mask = np.array(mask)\n        obj_ids = np.unique(mask)\n        obj_ids = obj_ids[1:]\n        masks = mask == obj_ids[:, None, None]\n        num_objs = len(obj_ids)\n\n        box=[]\n        pos = np.where(mask)\n        xmin = np.min(pos[1])\n        xmax = np.max(pos[1])\n        ymin = np.min(pos[0])\n        ymax = np.max(pos[0])\n        box.append([0, 0, 256, 256])\n        boxes = torch.as_tensor(box, dtype=torch.float32)\n        labels = torch.ones((1,), dtype=torch.int64)\n        #index_lab = int(self.df.iloc[idx]['ClassId'])\n        #labels[0] = index_lab\n        masks = torch.as_tensor(mask, dtype=torch.uint8)\n        image_id = torch.tensor([idx])\n        area = (boxes[:,3] - boxes[:, 1])*(boxes[:, 2]-boxes[:,0])\n        iscrowd = torch.zeros((1,), dtype = torch.int64)\n        target={}\n        target[\"boxes\"] = boxes\n        target[\"labels\"] = labels\n        target[\"masks\"]  = masks\n        target[\"image_id\"] = image_id\n        target[\"area\"] = area\n        target[\"iscrowd\"] = iscrowd\n        \n        if self.transforms is not None:\n            img, target = self.transforms(img, target)\n\n        return img, target\n      \n    def rle2mask(self,rle, width, height):\n        mask= np.zeros(width* height)\n        array = np.asarray([int(x) for x in rle.split()])\n        starts = array[0::2]\n        lengths = array[1::2]\n\n        current_position = 0\n        for index, start in enumerate(starts):\n            current_position += start\n            mask[current_position:current_position+lengths[index]] = 1\n            current_position += lengths[index]\n\n        return mask.reshape(width, height)\n\n    def __len__(self):\n        return (self.df.shape[0])","4e9499c0":"dataset_train = SevDataset(\"..\/input\/severstal-steel-defect-detection\/train_images\/\", \"..\/input\/severstal-steel-defect-detection\/train.csv\")","839ecfa4":"import math\nimport sys\nimport time\nimport torch\n\nimport torchvision.models.detection.mask_rcnn\n\n#from coco_utils_py import get_coco_api_from_dataset\nfrom coco_eval import CocoEvaluator\nimport utils_py\n\n\ndef train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq):\n    model.train()\n    metric_logger = utils_py.MetricLogger(delimiter=\"  \")\n    metric_logger.add_meter('lr', utils_py.SmoothedValue(window_size=1, fmt='{value:.6f}'))\n    header = 'Epoch: [{}]'.format(epoch)\n\n    lr_scheduler = None\n    if epoch == 0:\n        warmup_factor = 1. \/ 1000\n        warmup_iters = min(1000, len(data_loader) - 1)\n\n        lr_scheduler = utils_py.warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor)\n\n    for images, targets in metric_logger.log_every(data_loader, print_freq, header):\n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        loss_dict = model(images, targets)\n\n        losses = sum(loss for loss in loss_dict.values())\n\n        # reduce losses over all GPUs for logging purposes\n        loss_dict_reduced = utils_py.reduce_dict(loss_dict)\n        losses_reduced = sum(loss for loss in loss_dict_reduced.values())\n\n        loss_value = losses_reduced.item()\n\n        if not math.isfinite(loss_value):\n            print(\"Loss is {}, stopping training\".format(loss_value))\n            print(loss_dict_reduced)\n            sys.exit(1)\n\n        optimizer.zero_grad()\n        losses.backward()\n        optimizer.step()\n\n        if lr_scheduler is not None:\n            lr_scheduler.step()\n\n        metric_logger.update(loss=losses_reduced, **loss_dict_reduced)\n        metric_logger.update(lr=optimizer.param_groups[0][\"lr\"])\n\n\ndef _get_iou_types(model):\n    model_without_ddp = model\n    if isinstance(model, torch.nn.parallel.DistributedDataParallel):\n        model_without_ddp = model.module\n    iou_types = [\"bbox\"]\n    if isinstance(model_without_ddp, torchvision.models.detection.MaskRCNN):\n        iou_types.append(\"segm\")\n    if isinstance(model_without_ddp, torchvision.models.detection.KeypointRCNN):\n        iou_types.append(\"keypoints\")\n    return iou_types\n\n\n@torch.no_grad()\ndef evaluate(model, data_loader, device):\n    n_threads = torch.get_num_threads()\n    # FIXME remove this and make paste_masks_in_image run on the GPU\n    torch.set_num_threads(1)\n    cpu_device = torch.device(\"cpu\")\n    model.eval()\n    metric_logger = utils_py.MetricLogger(delimiter=\"  \")\n    header = 'Test:'\n\n    coco = get_coco_api_from_dataset(data_loader.dataset)\n    iou_types = _get_iou_types(model)\n    coco_evaluator = CocoEvaluator(coco, iou_types)\n\n    for image, targets in metric_logger.log_every(data_loader, 100, header):\n        image = list(img.to(device) for img in image)\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        torch.cuda.synchronize()\n        model_time = time.time()\n        outputs = model(image)\n\n        outputs = [{k: v.to(cpu_device) for k, v in t.items()} for t in outputs]\n        model_time = time.time() - model_time\n\n        res = {target[\"image_id\"].item(): output for target, output in zip(targets, outputs)}\n        evaluator_time = time.time()\n        coco_evaluator.update(res)\n        evaluator_time = time.time() - evaluator_time\n        metric_logger.update(model_time=model_time, evaluator_time=evaluator_time)\n\n    # gather the stats from all processes\n    metric_logger.synchronize_between_processes()\n    print(\"Averaged stats:\", metric_logger)\n    coco_evaluator.synchronize_between_processes()\n\n    # accumulate predictions from all images\n    coco_evaluator.accumulate()\n    coco_evaluator.summarize()\n    torch.set_num_threads(n_threads)\n    return coco_evaluator","8e756fdd":"import transforms_py as T","fd21ea46":"import utils_py","d5bc9e4b":"def get_transform(train):\n    transforms = []\n    # converts the image, a PIL image, into a PyTorch Tensor\n    transforms.append(T.ToTensor())\n    if train:\n        # during training, randomly flip the training images\n        # and ground-truth for data augmentation\n        transforms.append(T.RandomHorizontalFlip(0.5))\n    return T.Compose(transforms)","4c0e53bd":"# use our dataset and defined transformations\n# dataset = PennFudanDataset('PennFudanPed', get_transform(train=True))\n# dataset_test = PennFudanDataset('PennFudanPed', get_transform(train=False))\ndataset_train = SevDataset(\"..\/input\/severstal-steel-defect-detection\/train_images\/\", \"..\/input\/severstal-steel-defect-detection\/train.csv\", get_transform(train=True))\ndataset_test = SevDataset(\"..\/input\/severstal-steel-defect-detection\/train_images\/\", \"..\/input\/severstal-steel-defect-detection\/train.csv\", get_transform(train=False))\n# split the dataset in train and test set\ntorch.manual_seed(1)\nindices = torch.randperm(len(dataset_train)).tolist()\ndataset = torch.utils.data.Subset(dataset_train, indices[:-2350])\ndataset_test = torch.utils.data.Subset(dataset_test, indices[-2350:])\n\n# define training and validation data loaders\ndata_loader = torch.utils.data.DataLoader(\n    dataset, batch_size=2, shuffle=True, num_workers=4,\n    collate_fn=utils_py.collate_fn)\n\ndata_loader_test = torch.utils.data.DataLoader(\n    dataset_test, batch_size=1, shuffle=False, num_workers=4,\n    collate_fn=utils_py.collate_fn)","dbb0d312":"device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n\n# our dataset has two classes only - background and person\nnum_classes = 2\n\n# get the model using our helper function\nmodel = get_instance_segmentation_model(num_classes)\n# move model to the right device\nmodel.to(device)\n\n# construct an optimizer\nparams = [p for p in model.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=0.005,\n                            momentum=0.9, weight_decay=0.0005)\n\n# and a learning rate scheduler which decreases the learning rate by\n# 10x every 3 epochs\nlr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer,\n                                               step_size=3,\n                                               gamma=0.1)","25797207":"# let's train it for 10 epochs\nnum_epochs = 1\n\nfor epoch in range(num_epochs):\n    # train for one epoch, printing every 10 iterations\n    train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq=10)\n    # update the learning rate\n    lr_scheduler.step()\n    # evaluate on the test dataset\n    evaluate(model, data_loader_test, device=device)","ef546e9f":"### engines"}}