{"cell_type":{"4bf81bf9":"code","457b6b89":"code","ad485422":"code","257ac7f4":"code","e4673619":"code","7510e314":"code","62421c08":"code","3a4c810c":"code","f5cd6f87":"code","e149e075":"code","22a63292":"code","80d9c824":"code","eea0b93a":"markdown","7b902339":"markdown","9fd73439":"markdown","4f61d1f3":"markdown","cad1b6a7":"markdown","d05093c5":"markdown"},"source":{"4bf81bf9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","457b6b89":"#getting the data\ntrueData = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\nfalseData = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')\n\ntrueTitles = trueData['title']\nfalseTitles = falseData['title']\n\ntrueTitlesArr = trueTitles.to_numpy()\nfalseTitlesArr = falseTitles.to_numpy()\n\ntrueDataY = np.ones(len(trueTitles))\nfalseDataY = np.zeros(len(falseTitles))\n\ndataX = np.concatenate([trueTitles, falseTitles])\ndataY = np.concatenate([trueDataY, falseDataY])\n\naux = list(zip(list(dataX), list(dataY)))\n\nrandom.shuffle(aux)\n\ndataX, dataY = zip(*aux)","ad485422":"from tensorflow.keras.layers.experimental.preprocessing import TextVectorization","257ac7f4":"vectorizer = TextVectorization(output_mode=\"int\")\n\nvectorizer.adapt(dataX)\n\ninteger_data = vectorizer(dataX)\nprint(integer_data)","e4673619":"from tensorflow.keras import layers","7510e314":"inputs = keras.Input(shape=(43))\nx = layers.Dense(100, activation='relu')(inputs)\nx = layers.Dense(100, activation='relu')(x)\nx = layers.Dense(50, activation='relu')(x)\nx = layers.Dense(10, activation='relu')(x)\noutputs = layers.Dense(1)(x)\nmodel = keras.Model(inputs, outputs)\nmodel.summary()","62421c08":"model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\")","3a4c810c":"import tensorflow_datasets as tfds","f5cd6f87":"batch_size = 1000\n\nx_train = tfds.as_numpy(integer_data)\nx_train = list(x_train)\nx_train = x_train[:int(len(x_train)\/100*80)]\ny_train = list(dataY)\n\nfor i in range(len(y_train)):\n    if y_train[i] == 1:\n        y_train[i] = 0.999999\n\ny_train = y_train[:int(len(dataY)\/100*80)]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nhistory = model.fit(x_train, y_train, batch_size=batch_size, epochs=10)","e149e075":"model.save('path_to_my_model.h5')","22a63292":"new_model = keras.models.load_model('path_to_my_model.h5')","80d9c824":"new_predictions = new_model.predict(x_train[0])\nprint(new_predictions, y_train[0])","eea0b93a":"# Predictions","7b902339":"# Getting vectorization","9fd73439":"# Creating model","4f61d1f3":"# Saving Models","cad1b6a7":"# Loading models","d05093c5":"# Getting working datasets"}}