{"cell_type":{"22f1392e":"code","35e2db2d":"code","cf6a721a":"code","824575ea":"code","e18a2a46":"code","6924866b":"code","33a7d00a":"code","858e32c7":"code","06d03e56":"code","bd64a779":"code","6826695e":"code","2007630d":"code","47d5d39c":"code","2225f2e2":"code","817084f0":"code","b8695f48":"code","96ac8976":"code","7069526b":"code","9e1121d1":"code","faddbfd9":"code","63fa0f3b":"code","219c029c":"code","88a0f31c":"code","8c097dab":"code","aa32b9f9":"code","e391e89d":"code","95dec573":"code","ef7585cb":"code","31531ade":"code","92497880":"code","b3c9f73a":"code","0ba212ee":"code","cda04975":"code","147907cd":"code","4d3c8a7c":"code","5a45ada4":"code","3dd9a899":"code","2dbd2488":"code","5ac8b444":"code","8431839d":"code","f2141763":"code","a59acfb4":"code","30c53af5":"code","7b600756":"code","50881246":"code","2dd54061":"code","65bb8810":"code","9ff82ea1":"code","2a794581":"code","d4ec5872":"code","aa9a9fba":"code","31733fcf":"code","3cf12cfe":"code","dcf256e8":"code","a52e8db9":"code","8919859d":"code","a549a0d3":"markdown","1254b5db":"markdown","39678fff":"markdown","1e71f120":"markdown","ef3eadce":"markdown","38b964e8":"markdown","8244f647":"markdown","ded8e70c":"markdown","eb90c19e":"markdown","e41bfab7":"markdown","08716ffa":"markdown","1787eeb3":"markdown"},"source":{"22f1392e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","35e2db2d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns; sns.set()\nimport matplotlib.ticker as mtick\n\n%matplotlib inline","cf6a721a":"#Display the table relationship diagram\nimg=mpimg.imread('..\/input\/table_relationships.JPG')\nimgplot = plt.imshow(img)\nplt.show()","824575ea":"#Read in all CSV files from repository\ngame = pd.read_csv('..\/input\/game.csv')\ngame_goalie_stats = pd.read_csv('..\/input\/game_goalie_stats.csv')\ngame_plays = pd.read_csv('..\/input\/game_plays.csv')\ngame_plays_players = pd.read_csv('..\/input\/game_plays_players.csv')\ngame_shifts = pd.read_csv('..\/input\/game_shifts.csv')\ngame_skater_stats = pd.read_csv('..\/input\/game_skater_stats.csv')\ngame_teams_stats = pd.read_csv('..\/input\/game_teams_stats.csv')\nplayer_info = pd.read_csv('..\/input\/player_info.csv')\nteam_info = pd.read_csv('..\/input\/team_info.csv')","e18a2a46":"#create dataframe of goalie with team name and player name\ngoalie_team = pd.merge(game_goalie_stats, team_info, on = 'team_id')\ngoalie_team = pd.merge(goalie_team, player_info, on = 'player_id')\n#create dataframe of player with team name and player name\nskater_team = pd.merge(game_skater_stats, team_info, on = 'team_id')\nskater_team = pd.merge(skater_team, player_info, on = 'player_id')","6924866b":"#merge the game home_team_id to the game_plays\ngame_plays = pd.merge(game_plays, game, on = 'game_id')","33a7d00a":"skater_name_stats = pd.merge(game, game_skater_stats, on='game_id', how='outer')\nskater_name_stats = pd.merge(skater_name_stats, player_info, on='player_id', how='outer')","858e32c7":"skater_name_stats['game_category'] = 'NA'\n\nskater_name_stats.loc[(skater_name_stats['home_team_id'] == skater_name_stats['team_id']) & \n                   (skater_name_stats['home_goals'] > skater_name_stats['away_goals']),'game_category'] = 'Home Win'\n\nskater_name_stats.loc[(skater_name_stats['home_team_id'] == skater_name_stats['team_id']) & \n                   (skater_name_stats['home_goals'] < skater_name_stats['away_goals']),'game_category'] = 'Home Loss'\n\nskater_name_stats.loc[(skater_name_stats['away_team_id'] == skater_name_stats['team_id']) & \n                   (skater_name_stats['away_goals'] > skater_name_stats['home_goals']),'game_category'] = 'Away Win'\n\nskater_name_stats.loc[(skater_name_stats['away_team_id'] == skater_name_stats['team_id']) & \n                   (skater_name_stats['home_goals'] > skater_name_stats['away_goals']),'game_category'] = 'Away Loss'","06d03e56":"#Define how we will rank the players\nskater_name_stats['rank']=skater_name_stats['goals']+skater_name_stats['assists']","bd64a779":"#Create the list of the top 50 players\ntop_50_players = skater_name_stats.fillna(0)\ntop_50_players = top_50_players.groupby('player_id').sum()\ntop_50_players.sort_values('rank', ascending=False)\ntop_50_players = top_50_players[-50:]\ntop_50_players = top_50_players.reset_index()['player_id']\ntop_50_players = list(top_50_players)","6826695e":"skater_name_stats = skater_name_stats[skater_name_stats['player_id'].isin(top_50_players)]","2007630d":"df = skater_name_stats.groupby(['player_id','game_category']).agg({'timeOnIce':['std','mean'],\n                                                        'assists':['std','mean'],\n                                                       'goals':['std','mean'],\n                                                       'shots':['std','mean'],\n                                                        'hits':['std','mean'],\n                                                        'powerPlayGoals':['std','mean'],\n                                                       'powerPlayAssists':['std','mean'],\n                                                       'penaltyMinutes':['std','mean'],\n                                                        'penaltyMinutes':['std','mean'],\n                                                       'faceOffWins':['std','mean'],\n                                                       'faceoffTaken':['std','mean'],\n                                                       'takeaways':['std','mean'],\n                                                       'giveaways':['std','mean'],\n                                                        'shortHandedGoals':['std','mean'],\n                                                        'shortHandedAssists':['std','mean'],\n                                                        'blocked':['std','mean'],\n                                                        'plusMinus':['std','mean'],\n                                                        'evenTimeOnIce':['std','mean'],\n                                                        'shortHandedTimeOnIce':['std','mean'],\n                                                       'powerPlayTimeOnIce':['std','mean']})","47d5d39c":"#Eliminate players without the game_category data\ndf = df.reset_index()\ndf = df[(df['game_category'] != 'NA')]","2225f2e2":"def create_boxplot_with_points(df, variable):\n    plt.clf()\n    sns.boxplot(x=\"game_category\", y=(variable,'mean'), data=df.reset_index(), color='white', width=.5)\n    ax = sns.swarmplot(x=\"game_category\", y=(variable,'mean'), data=df.reset_index(), color=\"grey\")\n    ax.set_ylabel('Mean '+variable.title())\n    ax.set_xlabel('')\n    ax.set_title(('Mean '+variable+' compared to Game Category').title())\n    #plt.ylim(0,)\n    plt.savefig('\/player_'+variable+'.jpg')\n    pass","817084f0":"#Create the player plots\ncreate_boxplot_with_points(df,'timeOnIce')\ncreate_boxplot_with_points(df,'assists')\ncreate_boxplot_with_points(df,'goals')\ncreate_boxplot_with_points(df,'hits')\ncreate_boxplot_with_points(df,'powerPlayGoals')\ncreate_boxplot_with_points(df,'powerPlayAssists')\ncreate_boxplot_with_points(df,'penaltyMinutes')\ncreate_boxplot_with_points(df,'faceOffWins')\ncreate_boxplot_with_points(df,'faceoffTaken')\ncreate_boxplot_with_points(df,'takeaways')\ncreate_boxplot_with_points(df,'giveaways')\ncreate_boxplot_with_points(df,'shortHandedGoals')\ncreate_boxplot_with_points(df,'shortHandedAssists')\ncreate_boxplot_with_points(df,'blocked')\ncreate_boxplot_with_points(df,'plusMinus')\ncreate_boxplot_with_points(df,'evenTimeOnIce')\ncreate_boxplot_with_points(df,'shortHandedTimeOnIce')\ncreate_boxplot_with_points(df,'powerPlayTimeOnIce')","b8695f48":"#merge the game home_team_id to the game_plays\ngame_and_stats = pd.merge(game, game_teams_stats, on = 'game_id', how='outer')\ngame_and_stats = pd.merge(game_and_stats, team_info, on = 'team_id', how='inner')","96ac8976":"#Find stats for home wins, losses and away wins and losses by team","7069526b":"game_and_stats['game_category'] = 'NA'\n\ngame_and_stats.loc[(game_and_stats['home_team_id'] == game_and_stats['team_id']) & \n                   (game_and_stats['home_goals'] > game_and_stats['away_goals']),'game_category'] = 'Home Win'\n\ngame_and_stats.loc[(game_and_stats['home_team_id'] == game_and_stats['team_id']) & \n                   (game_and_stats['home_goals'] < game_and_stats['away_goals']),'game_category'] = 'Home Loss'\n\ngame_and_stats.loc[(game_and_stats['away_team_id'] == game_and_stats['team_id']) & \n                   (game_and_stats['away_goals'] > game_and_stats['home_goals']),'game_category'] = 'Away Win'\n\ngame_and_stats.loc[(game_and_stats['away_team_id'] == game_and_stats['team_id']) & \n                   (game_and_stats['home_goals'] > game_and_stats['away_goals']),'game_category'] = 'Away Loss'","9e1121d1":"df = game_and_stats.groupby(['teamName','game_category']).agg({'home_goals':['std','mean'],\n                                                        'away_goals':['std','mean'],\n                                                       'shots':['std','mean'],\n                                                       'hits':['std','mean'],\n                                                        'powerPlayOpportunities':['std','mean'],\n                                                        'powerPlayGoals':['std','mean'],\n                                                       'faceOffWinPercentage':['std','mean'],\n                                                       'giveaways':['std','mean'],\n                                                       'takeaways':['std','mean']})","faddbfd9":"def create_boxplot_with_points(df, variable):\n    plt.clf()\n    sns.boxplot(x=\"game_category\", y=(variable,'mean'), data=df.reset_index(), color='white', width=.5)\n    ax = sns.swarmplot(x=\"game_category\", y=(variable,'mean'), data=df.reset_index(), color=\"grey\")\n    ax.set_ylabel('Mean '+variable.title())\n    ax.set_xlabel('')\n    ax.set_title(('Mean '+variable+' compared to Game Category').title())\n    #plt.ylim(0,)\n    plt.savefig('game_'+variable+'jpg')\n    pass","63fa0f3b":"#Create the game plots\ncreate_boxplot_with_points(df,'hits')\ncreate_boxplot_with_points(df,'shots')\ncreate_boxplot_with_points(df,'powerPlayOpportunities')\ncreate_boxplot_with_points(df,'powerPlayGoals')\ncreate_boxplot_with_points(df,'giveaways')\ncreate_boxplot_with_points(df,'takeaways')\ncreate_boxplot_with_points(df,'faceOffWinPercentage')","219c029c":"create_boxplot_with_points(df,'hits')","88a0f31c":"create_boxplot_with_points(df,'shots')","8c097dab":"create_boxplot_with_points(df,'powerPlayOpportunities')","aa32b9f9":"create_boxplot_with_points(df,'powerPlayGoals')","e391e89d":"create_boxplot_with_points(df,'giveaways')","95dec573":"create_boxplot_with_points(df,'takeaways')","ef7585cb":"create_boxplot_with_points(df,'faceOffWinPercentage')","31531ade":"corr = df.groupby('game_category').corr()","92497880":"def make_mask(data):\n    mask = np.zeros_like(data, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    return mask","b3c9f73a":"sns.set(style = 'white')\ng = sns.FacetGrid(corr.reset_index(), row = \"game_category\", margin_titles=True, size=8, aspect=2)\ng.map_dataframe(lambda data, color: sns.heatmap(data.corr(), linewidths=0, mask=make_mask(data.corr()),annot=True))\nplt.subplots_adjust(top=0.96)\ng.fig.suptitle('Correlation by Game Type')\nplt.savefig('heatmap_by_category.jpg')\n\npass","0ba212ee":"#Remove nan x positions\ngame_plays_position = game_plays[np.isfinite(game_plays['x'])]\n\n#Convert a column to a datetime object\ngame_plays_position['dateTime'] = pd.to_datetime(game_plays_position['dateTime'])\n#Create column of years from datetime Series\ngame_plays_position['year'] = game_plays_position['dateTime'].dt.year","cda04975":"#Free up some memory\ndel game_shifts\ndel game_plays\ndel game_plays_players","147907cd":"#lets only look at hits\ngame_plays_goals = game_plays_position[game_plays_position['event'] == 'Goal'] \ngame_plays_hits = game_plays_position[game_plays_position['event'] == 'Hit']","4d3c8a7c":"#Seems like there is some issue with data type per some reading online.  Needs to be float not an object\ncols = ['x', 'y']\ngame_plays_position[cols] = game_plays_position[cols].astype(float)","5a45ada4":"season_scores = game_plays_position.groupby(['year', 'game_id'])[['goals_home', 'goals_away']].max()\nseason_scores.groupby('year')[['goals_home', 'goals_away']].mean()","3dd9a899":"#Let's look at where all the Goals have occurred on the ice during regular game play time only (periods 1 - 3)\nreg_time = game_plays_goals[game_plays_goals['period'] <=3]\n\n#This took forever to run on my computer but eventually showed up!\nsns.set(style = 'white')\ng = sns.FacetGrid(reg_time, col = \"year\", row = 'period', margin_titles=True)\ng.map(sns.kdeplot, 'x', 'y')\n\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Player Position When Scoring Regular time')\nplt.savefig('kde_position_plot.jpg')","2dbd2488":"#Add team name to scoring team goals\ngoals_by_team = pd.merge(game_plays_goals, team_info, how='inner', left_on='team_id_for', right_on='team_id')\n\n#Only keep the max number of goals (game ending scores)\ngoals_by_team = goals_by_team.groupby(['teamName','game_id']).max()\n\n#Look at mean goal differential as well as plus 1 standard deviation and minus 1 standard deviation\ngoals_by_team_summarized = goals_by_team.groupby('teamName').agg({'goals_home':['std','mean'],\n                                                                   'goals_away':['std','mean']})\ngoals_by_team_summarized['goal_differential'] = goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_away']['mean']\n\ngoals_by_team_summarized['goal_differential_p1std'] = (goals_by_team_summarized['goals_home']['mean'] + goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] + goals_by_team_summarized['goals_away']['std'])\n\ngoals_by_team_summarized['goal_differential_m1std'] = (goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] - goals_by_team_summarized['goals_away']['std'])\n\n#Sort by goal differential\ngoals_by_team_summarized = goals_by_team_summarized.sort_values('goal_differential', ascending=False)\ngoals_by_team_summarized = goals_by_team_summarized[['goal_differential_m1std','goal_differential','goal_differential_p1std']]","5ac8b444":"#Create the long version dataframe to see a line for each team\ndf = goals_by_team_summarized.reset_index()\ndf_long = df.melt(id_vars=['teamName'], var_name='goal_differential')\n\n#Create a plot of team & goal differentials\nsns.set(style = 'white')\nax = sns.pointplot(x=\"value\", y=\"teamName\", hue = \"teamName\", data=df_long, join=False, size=8, aspect = 2)\nax.set(xlabel='Home vs Away Goal Differential', ylabel='Team Name', title = 'Home Team Advantage')\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.savefig('goal_differential_by_team.jpg')\npass","8431839d":"#Add team name to scoring team goals\ngoals_by_team = pd.merge(game_plays_goals, team_info, how='inner', left_on='team_id_for', right_on='team_id')\n\n#Only keep the max number of goals (game ending scores)\ngoals_by_team = goals_by_team.groupby(['teamName','game_id']).max()\n\n#Look at mean goal differential as well as plus 1 standard deviation and minus 1 standard deviation\ngoals_by_team_summarized = goals_by_team.groupby(['teamName','year']).agg({'goals_home':['std','mean'],\n                                                                   'goals_away':['std','mean']})\n\ngoals_by_team_summarized['goal_differential'] = goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_away']['mean']\n\ngoals_by_team_summarized['goal_differential_p1std'] = (goals_by_team_summarized['goals_home']['mean'] + goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] + goals_by_team_summarized['goals_away']['std'])\n\ngoals_by_team_summarized['goal_differential_m1std'] = (goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] - goals_by_team_summarized['goals_away']['std'])\n\n#Sort by goal differential\ngoals_by_team_summarized = goals_by_team_summarized.sort_values('goal_differential', ascending=False)\ngoals_by_team_summarized = goals_by_team_summarized[['goal_differential_m1std','goal_differential','goal_differential_p1std']]","f2141763":"#Create the long version dataframe to see a line for each team\ndf = goals_by_team_summarized.reset_index()\ndf_long = df.melt(id_vars=['teamName','year'], var_name='var_name')","a59acfb4":"sns.set(style = 'white')\nsns.set_context(\"paper\") \ng = sns.FacetGrid(df_long, col = \"year\", margin_titles=True, size=6, aspect=2, sharey=False, sharex=False, col_wrap=3)\ng.map(sns.pointplot, 'value', 'teamName')\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Home Team Advantage by Season')\naxes = g.axes\nfor plot in axes:\n    plot.set_xlim(-0.5,1.5)\nplt.savefig('team_advantage_by_season.jpg')\npass","30c53af5":"sns.set(style = 'white')\ng = sns.FacetGrid(df_long, col = \"teamName\", col_wrap=6, margin_titles=True, size=3, aspect=2)\ng.map(sns.pointplot, 'year', 'value')\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Home Team Advantage by Season')\nplt.savefig('goal_differential_by_season.jpg')\npass","7b600756":"#Penguins Advantage by Year\nsns.boxplot(x=\"year\", y=\"value\",\n            hue=\"teamName\",\n            data=df_long[(df_long['teamName']=='Penguins') | (df_long['teamName']=='Bruins') | (df_long['teamName']=='Blackhawks')])\nplt.savefig('pens_bruins_blackhawks.jpg')\npass","50881246":"#We will now look at differences in time zones\nvenue_by_team = pd.merge(game_plays_goals, team_info, how='inner', left_on='home_team_id', right_on='team_id')\n#venue_by_team = pd.merge(venue_by_team, team_info, how='inner', left_on='home_team_id', right_on='team_id')\n\n#Add in the venue of the away team as well\ngoals_by_team = pd.merge(game_plays_goals, team_info, how='inner', left_on='away_team_id', right_on='team_id')","2dd54061":"#Find the venue for each team\nvenue_by_team = venue_by_team.groupby(['teamName','venue_time_zone_offset']).sum().reset_index()[['teamName','venue_time_zone_offset']]","65bb8810":"goals_by_team = pd.merge(goals_by_team, venue_by_team, left_on='teamName', right_on='teamName')","9ff82ea1":"goals_by_team['timezone_diff'] = goals_by_team['venue_time_zone_offset_x'] - goals_by_team['venue_time_zone_offset_y']","2a794581":"#Only keep the max number of goals (game ending scores)\ngoals_by_team = goals_by_team.groupby(['teamName','game_id']).max()\n\n#Look at mean goal differential as well as plus 1 standard deviation and minus 1 standard deviation\ngoals_by_team_summarized = goals_by_team.groupby(['timezone_diff','year']).agg({'goals_home':['std','mean'],\n                                                                   'goals_away':['std','mean']})\n\ngoals_by_team_summarized['goal_differential'] = goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_away']['mean']\n\ngoals_by_team_summarized['goal_differential_p1std'] = (goals_by_team_summarized['goals_home']['mean'] + goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] + goals_by_team_summarized['goals_away']['std'])\n\ngoals_by_team_summarized['goal_differential_m1std'] = (goals_by_team_summarized['goals_home']['mean'] - goals_by_team_summarized['goals_home']['std']) - \\\n    (goals_by_team_summarized['goals_away']['mean'] - goals_by_team_summarized['goals_away']['std'])\n\n#Sort by goal differential\ngoals_by_team_summarized = goals_by_team_summarized.sort_values('goal_differential', ascending=False)\ngoals_by_team_summarized = goals_by_team_summarized[['goal_differential_m1std','goal_differential','goal_differential_p1std']]","d4ec5872":"#Create the long version dataframe to see a line for each team\ndf = goals_by_team_summarized.reset_index()\ndf_long = df.melt(id_vars=['timezone_diff','year'], var_name='var_name')","aa9a9fba":"sns.set(style = 'white')\ng = sns.FacetGrid(df_long, col = \"timezone_diff\", margin_titles=True, col_wrap=3,size=4, aspect=2)\ng.map(sns.pointplot, 'year', 'value')\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Home Team Advantage by Time Zone Difference')\nplt.savefig('goal_differential_by_time_zone_diff.jpg')\npass","31733fcf":"home_goals_by_team = goals_by_team[goals_by_team['home_team_id']==goals_by_team['team_id_for']]\naway_game_plays_goals = goals_by_team[goals_by_team['away_team_id']==goals_by_team['team_id_for']]","3cf12cfe":"#Split into home and away goals\nhome_game_plays_goals = game_plays_goals[game_plays_goals['home_team_id']==game_plays_goals['team_id_for']]\naway_game_plays_goals = game_plays_goals[game_plays_goals['away_team_id']==game_plays_goals['team_id_for']]","dcf256e8":"home_game_plays_goals.head()","a52e8db9":"#Let's look at where all the Goals have occurred on the ice FOR HOME TEAM during regular play\nhome_reg_time = home_game_plays_goals[game_plays_goals['period'] <=3]\n\n#This took forever to run on my computer but eventually showed up!\nsns.set(style = 'white')\ng = sns.FacetGrid(home_reg_time, col = \"year\", row = 'period', margin_titles=True)\ng.map(sns.kdeplot, 'x', 'y')\n\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Home Player Position When Scoring Regular time')\nplt.savefig('player_position_regular_scoring_kdeplot.jpg')\npass","8919859d":"#Let's look at where all the Goals have occurred on the ice FOR AWAY TEAM\naway_reg_time = away_game_plays_goals[game_plays_goals['period'] <=3]\n\n#This took forever to run on my computer but eventually showed up!\nsns.set(style = 'white')\ng = sns.FacetGrid(away_reg_time, col = \"year\", row = 'period', margin_titles=True)\ng.map(sns.kdeplot, 'x', 'y')\n\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Away Player Position When Scoring Regular time')\nplt.savefig('away_player_position_regular_scoring_kdeplot.jpg')\npass","a549a0d3":"# Power Play Goals vs Game Category","1254b5db":"# Power Play Opportunities vs Game Category","39678fff":"# What if we look for advantage by year?","1e71f120":"# Faceoff Wins vs Game Category","ef3eadce":"# Let's look at the top 50 players and how they perform in these various categories","38b964e8":"# Giveaways vs Game Category","8244f647":"# Create home goals vs away goals by team ","ded8e70c":"# Shots vs Game Category","eb90c19e":"# Takeaways vs Game Category","e41bfab7":"# How does advantage work when we examine different venues?","08716ffa":"# Hits vs Game Category","1787eeb3":"# Lets look at some Team stats for faceoff wins, hits, goals"}}