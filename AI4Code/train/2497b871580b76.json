{"cell_type":{"d8b79c64":"code","6e1acd62":"code","608334a3":"code","7f26afaa":"code","82da465d":"code","bde7c5c6":"code","4e0b8637":"code","a15098da":"code","74d2ebce":"code","afaa14bc":"code","c393cd27":"code","87ee72e0":"code","31de2ee6":"code","f7a2d59f":"code","e073ea94":"code","530a6de1":"code","5737dc25":"code","372f558b":"code","fe8dae7f":"code","a541fc8c":"code","16eedd74":"code","0d31f3e8":"code","04fcf6cb":"code","f7f0c3ea":"code","9a4595e0":"code","38e00066":"code","c55c29fa":"code","f705a1d6":"code","c149786e":"markdown","62796967":"markdown"},"source":{"d8b79c64":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport keras","6e1acd62":"train_path= '..\/input\/intel-image-classification\/seg_train\/'\ntest_path= '..\/input\/intel-image-classification\/seg_test\/'\nprediction_path ='..\/input\/intel-image-classification\/seg_pred\/'","608334a3":"#Counting the number of images in each folder in training dataset\nfor folder in  os.listdir(train_path + 'seg_train') : \n    files = gb.glob(pathname= str( train_path +'seg_train\/\/' + folder + '\/*.jpg'))\n    print(f'For training data , found {len(files)} in folder {folder}')","7f26afaa":"#Counting the number of images in each folder in testing dataset\nfor folder in  os.listdir(test_path +'seg_test') : \n    files = gb.glob(pathname= str( test_path +'seg_test\/\/' + folder + '\/*.jpg'))\n    print(f'For testing data , found {len(files)} in folder {folder}')","82da465d":"#Counting the number of images in testing dataset\nfiles = gb.glob(pathname= str(prediction_path +'seg_pred\/*.jpg'))\nprint(f'For Prediction data , found {len(files)}')","bde7c5c6":"#Defining a function that checks images and retreive the codes and categories\ncode = {'buildings':0 ,'forest':1,'glacier':2,'mountain':3,'sea':4,'street':5}\n\ndef getcode(n) : \n    for x , y in code.items() : \n        if n == y : \n            return x    ","4e0b8637":"#traing data\nsize = []\nfor folder in  os.listdir(train_path +'seg_train') : \n    files = gb.glob(pathname= str( train_path +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","a15098da":"#test data\nsize = []\nfor folder in  os.listdir(test_path +'seg_test') : \n    files = gb.glob(pathname= str( test_path +'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = plt.imread(file)\n        size.append(image.shape)\npd.Series(size).value_counts()","74d2ebce":"#prediction data\nsize = []\nfiles = gb.glob(pathname= str(prediction_path +'seg_pred\/*.jpg'))\nfor file in files: \n    image = plt.imread(file)\n    size.append(image.shape)\npd.Series(size).value_counts()","afaa14bc":"#image size\ns=100","c393cd27":"X_train = []\ny_train = []\nfor folder in  os.listdir(train_path +'seg_train') : \n    files = gb.glob(pathname= str( train_path +'seg_train\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_train.append(list(image_array))\n        y_train.append(code[folder])","87ee72e0":"print(f'we have {len(X_train)} items in X_train')","31de2ee6":"#showing some random pictures from train dataset\nplt.figure(figsize=(15,15))\nfor n , i in enumerate(list(np.random.randint(0,len(X_train),25))) : \n    plt.subplot(5,5,n+1)\n    plt.imshow(X_train[i])   \n    plt.axis('off')\n    plt.title(getcode(y_train[i]))","f7a2d59f":"X_test = []\ny_test = []\nfor folder in  os.listdir(test_path +'seg_test') : \n    files = gb.glob(pathname= str(test_path + 'seg_test\/\/' + folder + '\/*.jpg'))\n    for file in files: \n        image = cv2.imread(file)\n        image_array = cv2.resize(image , (s,s))\n        X_test.append(list(image_array))\n        y_test.append(code[folder])","e073ea94":"print(f'we have {len(X_test)} items in X_test')","530a6de1":"#showing some random pictures from test dataset\nplt.figure(figsize=(15,15))\nfor n , i in enumerate(list(np.random.randint(0,len(X_test),25))) : \n    plt.subplot(5,5,n+1)\n    plt.imshow(X_test[i])    \n    plt.axis('off')\n    plt.title(getcode(y_test[i]))","5737dc25":"X_pred = []\nfiles = gb.glob(pathname= str(prediction_path + 'seg_pred\/*.jpg'))\nfor file in files: \n    image = cv2.imread(file)\n    image_array = cv2.resize(image , (s,s))\n    X_pred.append(list(image_array))       ","372f558b":"print(f'we have {len(X_pred)} items in X_pred')","fe8dae7f":"#showing some random pictures from prediction dataset\nplt.figure(figsize=(15,15))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),25))) : \n    plt.subplot(5,5,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')","a541fc8c":"#converting data into arrays\nX_train = np.array(X_train)\nX_test = np.array(X_test)\nX_pred_array = np.array(X_pred)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","16eedd74":"#building CNN model\nKerasModel = keras.models.Sequential([\n        keras.layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(s,s,3)),\n        keras.layers.Conv2D(150,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Conv2D(120,kernel_size=(3,3),activation='relu'),    \n        keras.layers.Conv2D(80,kernel_size=(3,3),activation='relu'),\n        keras.layers.MaxPool2D(4,4),\n        keras.layers.Flatten() ,    \n        keras.layers.Dense(120,activation='relu') ,    \n        keras.layers.Dense(100,activation='relu') ,            \n        keras.layers.Dropout(rate=0.5) ,            \n        keras.layers.Dense(6,activation='softmax') ,    \n        ])","0d31f3e8":"KerasModel.compile(optimizer ='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","04fcf6cb":"print('Model Details are : ')\nprint(KerasModel.summary())","f7f0c3ea":"epochs = 50\nThisModel = KerasModel.fit(X_train, y_train, epochs=epochs,batch_size=64,verbose=1)","9a4595e0":"#Calculating loss and accuracy in test data\nModelLoss, ModelAccuracy = KerasModel.evaluate(X_test, y_test)\n\nprint('Test Loss is {}'.format(ModelLoss))\nprint('Test Accuracy is {}'.format(ModelAccuracy ))","38e00066":"y_pred = KerasModel.predict(X_test)\n\nprint('Prediction Shape is {}'.format(y_pred.shape))","c55c29fa":"y_result = KerasModel.predict(X_pred_array)\n\nprint('Prediction Shape is {}'.format(y_result.shape))","f705a1d6":"#showing some random pictures from prediction dataset and check the accuracy of its labels\nplt.figure(figsize=(15,15))\nfor n , i in enumerate(list(np.random.randint(0,len(X_pred),25))) : \n    plt.subplot(5,5,n+1)\n    plt.imshow(X_pred[i])    \n    plt.axis('off')\n    plt.title(getcode(np.argmax(y_result[i])))","c149786e":"# Importing Libraries","62796967":"# Model Building"}}