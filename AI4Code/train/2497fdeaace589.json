{"cell_type":{"73da4c89":"code","c5c8c12b":"code","83e9c8a2":"code","c5d5567c":"code","315ef70f":"code","720e0e6c":"code","e24942dc":"code","5f872131":"code","b56f6c35":"code","28d6441c":"code","7b52da9e":"code","4db242e7":"code","5f35a1af":"code","62a58f27":"code","789aebba":"code","f299bebe":"code","0e56ca74":"code","d0deaafb":"code","0536ae16":"code","0eb69e4e":"code","91dea285":"code","4bd3c741":"code","977f0538":"code","76532f18":"code","58a8e4d6":"code","3b5e69a4":"code","25488e87":"code","5034a04b":"code","17d952c1":"code","0bf4345a":"code","63edc5d1":"code","7f76f6cf":"code","e75e3d7a":"code","c993c9d8":"code","75eea154":"code","3b9941bc":"markdown","4f5c9dca":"markdown","9fa3ec7a":"markdown","ff15abf2":"markdown","5a5fb1f7":"markdown","2eb36a3f":"markdown","8674d9ff":"markdown","bcde9f7a":"markdown","f4356252":"markdown","871c04dd":"markdown","25edbd8c":"markdown","58be86ec":"markdown","4ae5529f":"markdown"},"source":{"73da4c89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5c8c12b":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","83e9c8a2":"print(train.info())\nprint(test.info())\nprint(train.shape,test.shape)","c5d5567c":"women = train.loc[train.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","315ef70f":"men = train.loc[train.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","720e0e6c":"sns.scatterplot(x='Age',y='Fare',hue='Pclass',data=train)","e24942dc":"sns.catplot(x='Embarked',y='Survived',hue='Sex',col='Pclass',kind='bar',data=train,palette='rainbow')","5f872131":"sns.catplot(x='Embarked',y='Survived',hue='Sex',col='Pclass',kind='violin',data=train,palette='rainbow')","b56f6c35":"sns.catplot(x='Embarked',y='Age',hue='Survived',col='Pclass',kind='violin',data=train,palette='Spectral')","28d6441c":"sns.countplot(x='Embarked',data=train,hue='Survived')","7b52da9e":"sns.countplot(x='Embarked',data=test)","4db242e7":"sns.catplot(x='Parch',y='Survived',hue='Sex',kind='bar',data=train)","5f35a1af":"sns.catplot(x='SibSp',y='Survived',hue='Sex',kind='bar',data=train)","62a58f27":"survived_ages = train[train.Survived == 1][\"Age\"]\nnot_survived_ages = train[train.Survived == 0][\"Age\"]\nplt.subplot(1, 2, 1)\nsns.distplot(survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Survived\")\nplt.ylabel(\"Proportion\")\nplt.subplot(1, 2, 2)\nsns.distplot(not_survived_ages, kde=False)\nplt.axis([0, 100, 0, 100])\nplt.title(\"Didn't Survive\")\nplt.show()","789aebba":"sns.pairplot(train)","f299bebe":"g = sns.heatmap(train.corr(),annot=True,cmap='coolwarm')","0e56ca74":"figure, fare = plt.subplots(figsize=(10, 4.5))\nsns.kdeplot(data=train.loc[(train['Survived'] == 0),'Fare'], kernel='gau', ax=fare, color=\"Red\", shade=True, legend=True)\n\nsns.kdeplot(data=train.loc[(train['Survived'] == 1),'Fare'], kernel='gau', ax=fare, color=\"Blue\", shade=True, legend=True)\n\n\nfare.set_xlabel(\"Fare\")\nfare.set_ylabel(\"Probability Density\")\nfare.legend([\"Not Survived\", \"Survived\"], loc='upper right')\nfare.set_title(\"Graph for Fare\")","d0deaafb":"figure, fare = plt.subplots(figsize=(10, 4.5))\nsns.kdeplot(data=train.loc[(train['Survived'] == 0),'Age'], kernel='gau', ax=fare, color=\"Red\", shade=True, legend=True)\n\nsns.kdeplot(data=train.loc[(train['Survived'] == 1),'Age'], kernel='gau', ax=fare, color=\"Blue\", shade=True, legend=True)\n\n\nfare.set_xlabel(\"Age\")\nfare.set_ylabel(\"Probability Density\")\nfare.legend([\"Not Survived\", \"Survived\"], loc='upper right')\nfare.set_title(\"Graph for Age\")","0536ae16":"sns.countplot(x='Parch',data=train,hue='Survived')","0eb69e4e":"sns.countplot(x='SibSp',data=train,hue='Survived')","91dea285":"print(train.Embarked.unique(),test.Embarked.unique())\ndata_combined = [train,test]\nfor data in data_combined:\n    data['Title'] = data.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])\nprint(train['Title'].unique())","4bd3c741":"for data in data_combined:\n    data['Title'] = data['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    data['Title'] = data['Title'].replace('Mlle', 'Miss')\n    data['Title'] = data['Title'].replace('Ms', 'Miss')\n    data['Title'] = data['Title'].replace('Mme', 'Mrs')\n    \ntrain[['Title','Survived']].groupby(['Title'],as_index=False).mean()\ntrain.Title.unique()","977f0538":"for data in data_combined:\n    data['Title'] = data['Title'].map({'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Rare':5})\n    \ntrain.head()","76532f18":"for data in data_combined:\n    for sex in data.Sex.unique():\n        for pclass in data.Pclass.unique():\n            age_data = data[(data['Pclass'] == pclass) & (data['Sex']==sex)]['Age'].dropna()\n            data.loc[(data.Age.isnull()) & (data.Sex == sex) & (data.Pclass == pclass),'Age'] = age_data.median()","58a8e4d6":"train['AgeBand'] = pd.cut(train['Age'],5)\nprint(train[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True))\ntrain.head()\n","3b5e69a4":"for data in data_combined:\n    data.loc[data['Age'] <= 16,'Age'] = 0\n    data.loc[(data['Age'] > 16) & (data['Age'] <= 32),'Age'] = 1\n    data.loc[(data['Age'] > 32) & (data['Age'] <= 48),'Age'] = 2\n    data.loc[(data['Age'] > 48) & (data['Age'] <= 64),'Age'] = 3\n    data.loc[(data['Age'] > 64),'Age'] = 4\n\ntrain = train.drop('AgeBand',axis=1)\nprint(train.head())\n\ndata_combined = [train,test] #Reinitializing because of the above mess :(","25488e87":"#From the graph 'S' is the most frequently used port, filling NA in Embarked with 'S'\nfor data in data_combined:\n    data['Embarked'] = data['Embarked'].fillna('S')\ntrain[['Embarked','Survived']].groupby('Embarked',as_index=False).mean().sort_values(by='Survived',ascending=False)\n","5034a04b":"for data in data_combined:\n    data['Embarked'] = data['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\n    ","17d952c1":"test['Fare'].fillna(test['Fare'].dropna().median(),inplace=True)\n\n\ntrain['FareBand'] = pd.cut(train['Fare'],4)\ntrain[['FareBand','Survived']].groupby('FareBand',as_index=False).mean().sort_values(by='FareBand', ascending=True)\nfor data in data_combined:\n    data.loc[ data['Fare'] <= 7.91, 'Fare'] = 0\n    data.loc[(data['Fare'] > 7.91) & (data['Fare'] <= 14.454), 'Fare'] = 1\n    data.loc[(data['Fare'] > 14.454) & (data['Fare'] <= 31), 'Fare']   = 2\n    data.loc[ data['Fare'] > 31, 'Fare'] = 3\n    data['Fare'] = data['Fare'].astype(int)\n\ntrain = train.drop(['FareBand'], axis=1)\ndata_combined = [train, test]","0bf4345a":"for data in data_combined:\n    data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n    data['IsAlone'] = 0\n    data.loc[data['FamilySize'] == 1,'IsAlone'] = 1\n    data['Age*Class'] = data.Age * data.Pclass\n","63edc5d1":"for data in data_combined:\n    data['Sex'] = data['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","7f76f6cf":"train.head()","e75e3d7a":"#Features you want to use in the model\nfeatures = ['Pclass','Sex','Fare','Age','Embarked','SibSp','IsAlone','Parch']","c993c9d8":"#Import stuff for encoding and preprocessing pipeline\nfrom sklearn.model_selection import train_test_split,GridSearchCV,KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\n\nX_train = train.copy()\nX_test = test.copy()\ny = X_train.pop('Survived')\nX_train = X_train[features]\nX_test = X_test[features]\n# X_train = pd.get_dummies(X_train[features])\n# X_test = pd.get_dummies(X_test[features])\nstd_scaler = StandardScaler()\nX = std_scaler.fit_transform(X_train)\nX_test = std_scaler.transform(X_test)\n\nrfc = RandomForestClassifier(max_depth=10, n_estimators=100)\nparam_grid = { \n    \"n_estimators\": [5, 10, 15, 20, 25,50,100,200], \n    \"max_depth\": [3, 5, 7, 9, 11, 13],\n}\n# grid_rfc = GridSearchCV(estimator=rfc, param_grid=param_grid, cv= 5,verbose=True,n_jobs=-1,scoring='balanced_accuracy',)\nacc_random_forest = 0\niteration_count = 0\nbest_overall_model = None\nwhile (1):\n    temp = acc_random_forest\n    kf = KFold(n_splits=3,shuffle = True)\n    for train_idx,val_idx in kf.split(X):\n        #Random forest algorithm\n        best_rfc = rfc.fit(X[train_idx], y[train_idx])\n        Y_pred = best_rfc.predict(X[val_idx])\n        best_rfc.score(X[train_idx], y[train_idx])\n        acc_random_forest = round(best_rfc.score(X[train_idx], y[train_idx]) * 100, 2)\n        \n    print(acc_random_forest)\n    iteration_count += 1\n    if(acc_random_forest > temp):\n        temp = acc_random_forest\n        best_overall_model = best_rfc\n    else:\n        break\n#     print(\"Best Params: \",best_rfc.best_params_)\n#     print(\"Best Score: \",best_rfc.best_score_)\nprint(\"Number of iterations\",iteration_count,acc_random_forest)","75eea154":"Y_pred = best_overall_model.predict(X_test)\nprint(Y_pred)\noutput = pd.concat([test['PassengerId'],pd.DataFrame( Y_pred,columns=['Survived'])],axis=1)\n\noutput.to_csv('ja_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\nprint(output.loc[output['Survived']==1,'Survived'].count())","3b9941bc":"From the above grapsh we can see that people with less number or SibSp\/Parch have a better chance of suvival.","4f5c9dca":"Survived vs SibSp:","9fa3ec7a":"# EDA","ff15abf2":"We can see the positive correlations between Parch, SibSp, ","5a5fb1f7":"# Feature Selection","2eb36a3f":"# Feature Engineering","8674d9ff":"# Init","bcde9f7a":"Since some values are missing in Age column we can get the replace null with the median value. This is determined based on the Pclass and Embarked data as described in the violin plot above.","f4356252":"We can see that women had a better chance of survival.","871c04dd":"From the below graph we can see that women from all classes had a better chance of survival.","25edbd8c":"# Load Data","58be86ec":"# Model training and predictions","4ae5529f":"Checking the columns and the type of data each column holds."}}