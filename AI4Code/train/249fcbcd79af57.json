{"cell_type":{"c98c4051":"code","8bcfdac0":"code","878dbc2d":"code","6a01ef44":"code","45f39c3a":"code","cece5766":"code","115f8de5":"code","9aeced93":"code","2915ffd4":"code","4c3e4f3c":"code","8e951d85":"code","26fffcc5":"code","c3816bd3":"code","6e63b186":"code","c8ede2c9":"code","951a0712":"markdown","7aa23d75":"markdown","3ddca6a9":"markdown","80c1473d":"markdown"},"source":{"c98c4051":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom scipy import stats\n\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nfrom sklearn.metrics import roc_auc_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler, QuantileTransformer, KBinsDiscretizer\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.cluster import KMeans\nfrom sklearn.impute import KNNImputer, SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nimport os, glob, math, cv2, gc, logging, warnings, random\n\nfrom umap import UMAP\n\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport shap\nwarnings.filterwarnings(\"ignore\")","8bcfdac0":"train = pd.read_csv('..\/input\/gdsc-nsut-recruitment\/final_train.csv')\ntest = pd.read_csv('..\/input\/gdsc-nsut-recruitment\/final_test.csv')\n\nsample_submission = pd.read_csv(\"..\/input\/gdsc-nsut-recruitment\/sample_submission.csv\")","878dbc2d":"feature_cols = test.columns.tolist()\ncat_cols = [\"id\"]\ncnt_cols = [col for col in feature_cols if col not in cat_cols]","6a01ef44":"plt.figure(figsize=(25, 10))\nfor i, col in enumerate(cnt_cols):\n    plt.subplot(3, 5, i+1)\n    sns.violinplot(data=train, x='target', y=col)\n    plt.title(col)\n    plt.xlabel(\"\")\n    plt.ylabel(\"\")\nplt.show()","45f39c3a":"plt.figure(figsize=(20, 10))\nsns.heatmap(train.corr(), annot=True)\nplt.show()","cece5766":"sc = MinMaxScaler()\ntrain[cnt_cols] = sc.fit_transform(train[cnt_cols])\ntest[cnt_cols] = sc.transform(test[cnt_cols])","115f8de5":"train","9aeced93":"def add_feature(df):\n    df[\"new_f1\"] = df['feature_0'] + df['feature_1']\n    df[\"new_f2\"] = df['feature_0'] + df['feature_2']\n    df[\"new_f3\"] = df['feature_0'] + df['feature_3']\n    df[\"new_f4\"] = df['feature_0'] + df['feature_4']\n    return df\n\ntrain = add_feature(train)\ntest = add_feature(test)","2915ffd4":"new_features = [\"new_f1\", \"new_f2\", \"new_f3\", \"new_f4\"]\nfeature_cols += new_features\ncnt_cols += new_features\n","4c3e4f3c":"scores = []\nfolds = 5\ntrain[\"kfold\"] = -1\nkf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=42)\n\nfor fold, (train_indicies, valid_indicies) in enumerate(kf.split(train,train[\"target\"])):\n    train.loc[valid_indicies, \"kfold\"] = fold","8e951d85":"from sklearn.ensemble import RandomForestClassifier\n","26fffcc5":"train['preds'] = 0\ntest['preds'] = 0","c3816bd3":"%%time\n\nfor fold in range(5):\n    x_train = train[train.kfold != fold].copy()\n    x_valid = train[train.kfold == fold].copy()\n    x_test  = test[feature_cols].copy()\n    \n    y_train = x_train['target']\n    y_valid = x_valid['target']\n    \n    x_train = x_train[feature_cols]\n    x_valid = x_valid[feature_cols]\n\n\n    lr_model = RandomForestClassifier(n_estimators = 60, criterion = 'entropy', random_state = 0)\n    lr_model.fit(x_train,y_train)\n    preds_train = lr_model.predict_proba(x_train)[:,1]\n    preds_valid = lr_model.predict_proba(x_valid)[:,1]\n    auc_train = roc_auc_score(y_train, preds_train)\n    auc = roc_auc_score(y_valid, preds_valid)\n    print(f\"| Fold {fold+1} | train: {auc_train:.5f} | valid: {auc:.5f} |\")\n    print(\"|--------|----------------|----------------|\")\n    scores.append(auc)\n    \n    preds_test = lr_model.predict_proba(x_test)[:,1]\n    train[\"preds\"].loc[x_valid.index] = preds_valid\n    test[\"preds\"] += preds_test\n    \ntest[\"preds\"] \/= folds\nprint(\"\\nAVG AUC:\",np.mean(scores))","6e63b186":"sample_submission['target'] = test['preds']\nsample_submission.to_csv(\"submission.csv\", index=False)\nsample_submission.head()","c8ede2c9":"plt.figure(figsize=(10,5))\nsns.histplot(sample_submission[\"target\"], kde=True, color=\"blue\")\nplt.title(\"Predictions\")\nplt.show()","951a0712":"# Submission","7aa23d75":"# Add New Features","3ddca6a9":"# Explore and Preprocess Data","80c1473d":"# Load Data"}}