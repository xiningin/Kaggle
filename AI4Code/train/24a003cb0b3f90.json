{"cell_type":{"ac7c988e":"code","0c33c700":"code","c8eb2fc3":"code","1b65b774":"code","8389d3a0":"code","0cc5810d":"code","f812fbc6":"code","93d301b4":"code","be30810f":"code","977faa38":"code","d07f7ba2":"code","1efa5229":"code","11a62c8e":"code","7bbec180":"code","cab04886":"code","1ce8aa63":"markdown","93cd051c":"markdown","a3eb65b6":"markdown","6949ab2a":"markdown","c2947b82":"markdown","11fcf0aa":"markdown","a93fce37":"markdown","d10078d5":"markdown","2f5cfaae":"markdown"},"source":{"ac7c988e":"import os\n\nif os.environ.get(\"KAGGLE_KERNEL_RUN_TYPE\") is None:\n    ON_KAGGLE = False\nelse:\n    ON_KAGGLE = True\n    \nprint(ON_KAGGLE)","0c33c700":"import time\n\nfrom contextlib import contextmanager\n\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    yield\n    print(f'[{name}] done in {time.time() - t0:.0f} s')","c8eb2fc3":"def wait(sec: float):\n    time.sleep(sec)\n\n\nwith timer(\"wait\"):\n    wait(2.0)","1b65b774":"import psutil\nimport os\nimport time\nimport sys\nimport math\nfrom contextlib import contextmanager\n\n@contextmanager\ndef trace(title):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    yield\n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    print(f\"[{m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec] {title} \", file=sys.stderr)","8389d3a0":"with trace('title'):\n    pass","0cc5810d":"import os\nimport random\n\nimport numpy as np\nimport tensorflow as tf\nimport torch\n\ndef fix_seed(seed=2020):\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    torch.manual_seed(seed)\n\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False","f812fbc6":"random_seed = 22\nfix_seed(random_seed)","93d301b4":"import numpy as np\nimport pandas as pd\n\ndef reduce_mem_usage(df):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","be30810f":"# df = reduce_mem_usage(df)","977faa38":"import types\n\n\ndef imports():\n    for name, val in globals().items():\n        # module imports\n        if isinstance(val, types.ModuleType):\n            yield name, val\n\n        # functions \/ callables\n        if hasattr(val, \"__call__\"):\n            yield name, val\n\n\ndef noglobal(f):\n    return types.FunctionType(\n        f.__code__, dict(imports()), f.__name__, f.__defaults__, f.__closure__\n    )\n","d07f7ba2":"a = 1\n\n\n@noglobal\ndef test(b, c=3):\n    try:\n        print(a)\n    except NameError:\n        pass\n\n    print(b, c)\n\n\ntest(2)","1efa5229":"def df_stats(df):\n    stats = []\n    for col in df.columns:\n        stats.append(\n            (\n                col,\n                df[col].nunique(),\n                df[col].value_counts().index[0],\n                df[col].value_counts().values[0],\n                df[col].isnull().sum() * 100 \/ df.shape[0],\n                df[col].value_counts(normalize=True, dropna=False).values[0] * 100,\n                df[col].dtype,\n            )\n        )\n    return pd.DataFrame(\n        stats, columns=[\"\u30ab\u30e9\u30e0\u540d\", \"\u30ab\u30e9\u30e0\u3054\u3068\u306e\u30e6\u30cb\u30fc\u30af\u5024\u6570\", \"\u6700\u3082\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u5024\", \"\u6700\u3082\u51fa\u73fe\u983b\u5ea6\u306e\u9ad8\u3044\u5024\u306e\u51fa\u73fe\u56de\u6570\", \"\u6b20\u640d\u640d\u5024\u306e\u5272\u5408\", \"\u6700\u3082\u591a\u3044\u30ab\u30c6\u30b4\u30ea\u306e\u5272\u5408\", \"Type\"]\n    )","11a62c8e":"# df_stats(df)","7bbec180":"import sys\n\ndef display_memory_size_of_variables(threshold=1000000):\n    print(f\"|{'Variable Name': <25}|{'Memory Size': >12}|\")\n    print(\"-\" * 40)\n    for var_name in dir():\n        if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > threshold:\n            print(f\"|{var_name: <25}|{sys.getsizeof(eval(var_name)): >12}|\")","cab04886":"# display_memory_size_of_variables()","1ce8aa63":"# Basic stats","93cd051c":"# Table of Contents\n\n- Check if run on Kaggle\n- Timer\n- Display current memory usage\n- Fix seed\n- Reduce memory usage\n- No gloval variables\n- Basic stats\n- Memory size of variables","a3eb65b6":"# Timer","6949ab2a":"# Display current memory usage","c2947b82":"# Check if run on Kaggle","11fcf0aa":"# Memory size of variables","a93fce37":"# No gloval variables","d10078d5":"# Reduce memory usage","2f5cfaae":"# Fix seed"}}