{"cell_type":{"61fb4fd0":"code","4e2113da":"code","0031ef67":"code","93a78904":"code","49a05c4a":"code","a22cd819":"code","7ec4ecab":"code","95e6abda":"code","92849b36":"code","2fd2b67c":"code","3a98031d":"code","d5cc1e3d":"code","499af2e6":"code","0051d330":"code","97e872c1":"code","5274923e":"code","7fbf59f2":"code","ed3d1b53":"code","6a550680":"code","807d6f3a":"code","4493082f":"code","0969d0e4":"code","11db2075":"code","9438d77f":"code","003bff82":"code","b5ef214f":"code","9ded3261":"code","5980847e":"code","d0a271c6":"code","12679a1e":"code","7f1290cb":"code","f2246813":"code","c3b4c6e0":"code","66caf3bc":"code","1ba1bdde":"code","c9808033":"code","5f5f7c70":"code","a4881dcc":"code","38a31ef4":"code","667de4d6":"code","d6f16415":"code","df7d3ba9":"code","b296362a":"code","f2d3bfad":"code","df0d6f2e":"code","0537485b":"code","ebf05c5e":"code","655cfc77":"code","50a9ac87":"code","4299e83e":"code","a154fa3f":"code","306fe1c5":"code","fb9e7740":"code","e6f16bd6":"code","bdf93fa1":"code","a542d966":"code","b86c6aa3":"code","07162443":"code","87e467c9":"code","0150c057":"code","768d1e38":"code","1244677b":"code","7626e5d8":"code","51f1990f":"code","4742f081":"code","9f16f1c6":"code","328522bc":"code","fd154467":"code","d962e86a":"code","7b652fc4":"code","86db8caf":"code","d59de96a":"code","2886354d":"code","e2d094aa":"code","92d8f316":"code","70df611b":"code","ce403d51":"code","d7d857fd":"code","abc90a8a":"code","d96b2ca1":"code","9eff4a0a":"code","93213230":"code","f4e1ca2f":"code","a38e45c2":"code","a070deb4":"code","561fcfb7":"code","1802ed21":"code","d2727eb1":"code","6aa2b0b1":"code","2cef7849":"code","53e37e82":"code","c58103ca":"code","7d7aaf4e":"code","8774c0fc":"code","e003c948":"code","cf102686":"code","5adb4d8b":"code","83088611":"code","3c9afaf6":"code","4958738c":"code","1be3b366":"code","f5f925d6":"code","c3a271e5":"code","74161b52":"code","56894eec":"code","a2828864":"code","c72ef286":"code","3e979983":"code","f42af975":"code","b8f68d75":"code","51e33fa4":"code","8e9cc5ea":"code","e6c13e6e":"code","c85ac812":"code","6ab43de2":"code","0498cef6":"code","62372130":"code","a7a3058c":"code","db0d10d8":"code","57729721":"code","c3694e08":"code","91c54bc9":"code","b297419c":"code","e2a0a3bd":"code","94975dee":"code","e10f9d59":"code","2eed2ddf":"code","d6196d34":"code","96b12fe5":"code","8a1075e8":"code","ee17a4fb":"code","4ef7a5cb":"code","1f2ce0cf":"code","ccf09b91":"code","fcee16eb":"code","65011565":"code","155eb8e7":"code","4df058fa":"code","81a9018c":"code","0071ed98":"code","b2d205e9":"code","e210f58f":"code","37c8f838":"code","e4ee034d":"code","a1b88742":"code","e29b48b2":"code","ec9ccafa":"code","69e9e916":"code","5bb4e85b":"code","3921af91":"code","e987c054":"code","3a7c12d3":"code","ed342167":"code","d050a66c":"code","fbef45ef":"code","62e1bad6":"code","641287a7":"code","cb9d7631":"code","bdbc5c60":"code","87404cb6":"code","3783784e":"code","867fc5a9":"code","342037c2":"code","b7127125":"code","11614510":"code","1d9bdfdd":"code","8c225a75":"code","07254c2d":"code","dd7cad04":"code","91b05824":"code","271c81c4":"code","750c4970":"code","bb882db8":"code","87e80fa7":"code","fe69daa5":"code","9a8dc4a5":"code","1da1c953":"code","8db238c7":"code","b95e7fe3":"code","6b67c980":"code","c80fc6b2":"code","a1b08152":"code","1cc6a7c3":"code","7bb00e6d":"code","f6476d41":"markdown","acd00dd8":"markdown","0c0f6a02":"markdown","234b3c52":"markdown","0f954466":"markdown","7e0d44c5":"markdown","4cf3354f":"markdown","79f83d24":"markdown","70f5e8e0":"markdown","1fd3e8d9":"markdown","e02dfed2":"markdown","7baa561e":"markdown","37365e85":"markdown","f66b282c":"markdown","6027cbf0":"markdown","ef8430d7":"markdown","97a9cb56":"markdown","b64ad5e3":"markdown","13c578ca":"markdown","7f3b60cf":"markdown","5064323f":"markdown","de110823":"markdown","7e782f25":"markdown","c8197492":"markdown","c1427322":"markdown","b4f482b7":"markdown","c3caf105":"markdown","343ff617":"markdown","6a4baf09":"markdown","c2b1aeac":"markdown","f74d2875":"markdown","42887b7d":"markdown","1fa3e73c":"markdown","c529456c":"markdown","7b6dece1":"markdown","761550f5":"markdown","edb5725b":"markdown","7d0c0e24":"markdown","8c2e5a1c":"markdown","672592d4":"markdown","4016815b":"markdown","c73bc255":"markdown","528e550c":"markdown","ec9376cc":"markdown","3843facd":"markdown","01877a4b":"markdown","fa4761bf":"markdown","3cc80588":"markdown","f21af78b":"markdown","9eafd19e":"markdown","7b2f8501":"markdown","e5e7b7bd":"markdown","7ce6619c":"markdown","9d56f575":"markdown","2067b890":"markdown","a49edda3":"markdown","47d73bb6":"markdown","b95103a1":"markdown","4ddf0780":"markdown","9553182b":"markdown","f103ff33":"markdown"},"source":{"61fb4fd0":"!pip install chart_studio","4e2113da":" !pip install --upgrade pip","0031ef67":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport chart_studio.plotly as py\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93a78904":"\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)","49a05c4a":"\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","a22cd819":"train.head()","7ec4ecab":"test.head()","95e6abda":"train.columns","92849b36":"train.describe().T","2fd2b67c":"train.info()","3a98031d":"f, ax =plt.subplots(figsize=(50,30))\nsns.heatmap(train.corr(),annot=True, fmt=\"1f\", ax=ax)\nplt.show()","d5cc1e3d":"train_data=train[[\"Id\",\"OverallQual\" , \"YearBuilt\" , \"YearRemodAdd\", \"TotalBsmtSF\", \"1stFlrSF\", \n                  \"GrLivArea\", \"FullBath\" , \"TotRmsAbvGrd\", \"GarageCars\", \"GarageArea\",\"MasVnrArea\",\"Fireplaces\",\"SalePrice\"]]","499af2e6":"train_data.head()","0051d330":"train_data.isnull().sum()","97e872c1":"train_data.describe().T","5274923e":"train_data=train_data.rename(columns={\"1stFlrSF\":\"FstFlrSF\"})","7fbf59f2":"train_data.columns","ed3d1b53":"train_data.info()","6a550680":"train_data= train_data.astype(float)\ntrain_data.info()","807d6f3a":"convert={\"Id\": int,\n            \"SalePrice\": int}\ntrain_data=train_data.astype(convert)\ntrain_data.info()\n","4493082f":"train_data.MasVnrArea.describe()    ","0969d0e4":"def plot_hist(variable):\n    plt.figure(figsize=(7,3))\n    plt.hist(train_data[variable],bins=30)\n    plt.xlabel(variable)\n    plt.title(\"{} abcde \".format(variable))\n    plt.show()\n    \n","11db2075":"numeric=[ 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF',\n       'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'GarageCars', 'GarageArea',\n       'MasVnrArea', 'Fireplaces', 'SalePrice', 'FstFlrSF'   ]\nfor n in numeric:\n    plot_hist(n)","9438d77f":"train_data[train_data[\"MasVnrArea\"].isnull()]","003bff82":"sns.catplot(x=\"OverallQual\",y=\"MasVnrArea\",data=train_data, kind=\"box\", height=10)\nplt.show()","b5ef214f":"train_data.groupby('OverallQual', as_index=False)['MasVnrArea'].mean()","9ded3261":"sns.catplot(x=\"YearBuilt\", y= \"MasVnrArea\", data=train_data, kind=\"box\",height=10)\nplt.show()","5980847e":"sns.catplot(x=\"TotRmsAbvGrd\",y=\"MasVnrArea\",data=train_data, kind=\"box\",height=10)\nplt.show()","d0a271c6":"sns.catplot(x=\"Fireplaces\",y=\"MasVnrArea\",data=train_data, kind=\"box\",height=10)\nplt.show()","12679a1e":"corrdata=train_data[[ \"MasVnrArea\",\"OverallQual\",\"GarageCars\",\"TotRmsAbvGrd\",\"Fireplaces\"]]\ncorrdata","7f1290cb":"\nf, ax= plt.subplots(figsize=(20,20))\nsns.heatmap(train_data[[ \"MasVnrArea\",\"OverallQual\",\"GarageCars\",\"TotRmsAbvGrd\",\"Fireplaces\"]].corr(),annot=True, fmt=\"1f\",ax=ax)\nplt.show()","f2246813":"trace0=go.Box(\n    x=train_data.OverallQual,\n    y=train_data.MasVnrArea,\n    name=\"ps\",\n    marker=dict(color=\"rgb(12,15,18)\",))\ndata=[trace0]\niplot(data)","c3b4c6e0":"train_data['MasVnrArea']","66caf3bc":"train_data['MasVnrArea'] = train_data.apply(\n    lambda row: 103 if np.isnan(row['MasVnrArea']) and row['OverallQual']== 6 else\n                106 if np.isnan(row['MasVnrArea']) and row ['OverallQual']== 7 else\n                211 if np.isnan(row['MasVnrArea']) and row ['OverallQual']== 8 else\n                539 if np.isnan(row['MasVnrArea']) and row ['OverallQual']== 10 else\n                 row['MasVnrArea'],\n    axis=1\n)\n","1ba1bdde":"train_data[train_data['MasVnrArea'].isnull()]","c9808033":"train_data.iloc[[234]]","5f5f7c70":"train_data.loc[(train_data['OverallQual']==6) & (train_data['MasVnrArea']== 103)]","a4881dcc":"train_data[[\"OverallQual\",\"SalePrice\"]].groupby([\"OverallQual\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\n","38a31ef4":"plt.figure(figsize=(7,3))\nplt.hist(train_data[\"OverallQual\"],bins=30)\nplt.show()\n    ","667de4d6":"df=train_data[[\"OverallQual\",\"SalePrice\"]].groupby([\"OverallQual\"], as_index=False).mean()","d6f16415":"import plotly.express as px\nfig = px.scatter(train_data,x=\"SalePrice\", y=\"OverallQual\")\nfig.show()","df7d3ba9":"import plotly.express as px\nfig = px.scatter(df,x=\"SalePrice\", y=\"OverallQual\")\nfig.show()","b296362a":"train_data[\"OverallQual\"].head(10)","f2d3bfad":"\ntrain_data[train_data.OverallQual==1]","df0d6f2e":"train_data[\"OverallQual\"]=[2 if i == 1 else i if i == i else i for i in train_data[\"OverallQual\"]]","0537485b":"train_data[\"OverallQual\"].head(10)","ebf05c5e":"test[test.OverallQual==1]","655cfc77":"test[\"OverallQual\"]=[2 if i == 1 else i if i == i else i for i in test[\"OverallQual\"]]","50a9ac87":"test[test.OverallQual==1]","4299e83e":"\ndf=train_data[[\"OverallQual\",\"SalePrice\"]].groupby([\"OverallQual\"], as_index=False).mean()\n\nimport plotly.express as px\nfig = px.scatter(df,x=\"SalePrice\", y=\"OverallQual\")\nfig.show()","a154fa3f":"trace0=go.Box(\n    y=train_data.OverallQual,\n    name=\"OverallQual\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","306fe1c5":"train_data[[\"YearBuilt\",\"SalePrice\"]].groupby([\"YearBuilt\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")","fb9e7740":"df1 = train_data[[\"YearBuilt\",\"Id\"]].groupby([\"YearBuilt\"], as_index=False).count()\ndf1","e6f16bd6":"import plotly.express as px\nfig = px.scatter(df1,x=\"YearBuilt\", y=\"Id\")\nfig.show()","bdf93fa1":"import plotly.express as px\nfig = px.histogram(df1, x=\"YearBuilt\", y=\"Id\")\nfig.show()","a542d966":"df1=train_data[[\"YearBuilt\",\"SalePrice\"]].groupby([\"YearBuilt\"], as_index=False).mean()","b86c6aa3":"import plotly.express as px\nfig = px.scatter(df1,x=\"YearBuilt\", y=\"SalePrice\")\nfig.show()","07162443":"import plotly.express as px\nfig = px.line(df1,x=\"YearBuilt\", y=\"SalePrice\")\nfig.show()","87e467c9":"train_data[train_data.YearBuilt==1982 ]","0150c057":"train_data[train_data.YearBuilt==1983 ]","768d1e38":"\nf, ax= plt.subplots(figsize=(10,10))\nsns.heatmap(train_data[[ \"YearRemodAdd\",\"YearBuilt\"]].corr(),annot=True, fmt=\"1f\",ax=ax)\nplt.show()","1244677b":"df2=train_data[[\"YearRemodAdd\",\"SalePrice\"]].groupby([\"YearRemodAdd\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf2","7626e5d8":"df2=train_data[[\"YearRemodAdd\",\"SalePrice\"]].groupby([\"YearRemodAdd\"], as_index=False).mean()\nimport plotly.express as px\nfig = px.scatter(df2,x=\"YearRemodAdd\", y=\"SalePrice\")\nfig.show()","51f1990f":"\nimport plotly.express as px\nfig = px.line(df2,x=\"YearRemodAdd\", y=\"SalePrice\")\nfig.show()","4742f081":"df3=train_data[[\"FstFlrSF\",\"SalePrice\"]].groupby([\"FstFlrSF\"], as_index=False).mean().sort_values(by=\"FstFlrSF\",ascending=\"True\")\ndf3","9f16f1c6":"fig=px.histogram(df3,x=\"FstFlrSF\",y=\"SalePrice\", histfunc=\"avg\")\nfig.show()","328522bc":"fig=px.histogram(df3,x=\"FstFlrSF\",y=\"SalePrice\", histfunc=\"count\")\nfig.show()","fd154467":"trace0=go.Box(\n    y=train_data.FstFlrSF,\n    name=\"FstFlrSF\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","d962e86a":"train_data[train_data.FstFlrSF>4000]","7b652fc4":"train_data1=train_data.drop(1298).reset_index(drop=True)","86db8caf":"train_data1[train_data1.Id==1299]","d59de96a":"df4=train_data1[[\"TotalBsmtSF\",\"SalePrice\"]].groupby([\"TotalBsmtSF\"], as_index=False).mean().sort_values(by=\"TotalBsmtSF\",ascending=\"True\")\ndf4","2886354d":"fig=px.histogram(df4,x=\"TotalBsmtSF\",y=\"SalePrice\", histfunc=\"avg\")\nfig.show()","e2d094aa":"fig=px.histogram(df4,x=\"TotalBsmtSF\",y=\"SalePrice\", histfunc=\"count\")\nfig.show()","92d8f316":"trace0=go.Box(\n    y=train_data1.TotalBsmtSF,\n    name=\"TotalBsmtSF\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","70df611b":"df5=train_data1[[\"GrLivArea\",\"SalePrice\"]].groupby([\"GrLivArea\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf5","ce403d51":"fig=px.histogram(df5,x=\"GrLivArea\",y=\"SalePrice\", histfunc=\"avg\")\nfig.show()","d7d857fd":"fig=px.histogram(df5,x=\"GrLivArea\",y=\"SalePrice\", histfunc=\"count\")\nfig.show()","abc90a8a":"train_data1[train_data1.GrLivArea>4000]","d96b2ca1":"trace0=go.Box(\n    y=train_data1.GrLivArea,\n    name=\"TotalBsmtSF\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","9eff4a0a":"train_data2=train_data1.drop(523).reset_index(drop=True)\ntrain_data2=train_data2.drop(690).reset_index(drop=True)\ntrain_data2=train_data2.drop(1180).reset_index(drop=True)","93213230":"train_data2[train_data2.GrLivArea>4000]","f4e1ca2f":"f, ax= plt.subplots(figsize=(10,10))\nsns.heatmap(train_data1[[ \"FstFlrSF\",\"TotalBsmtSF\",\"GrLivArea\",\"SalePrice\"]].corr(),annot=True, fmt=\"1f\",ax=ax)\nplt.show()","a38e45c2":"df6=train_data2[[\"FullBath\",\"SalePrice\"]].groupby([\"FullBath\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf6","a070deb4":"sns.catplot(x=\"FullBath\", y=\"SalePrice\", kind=\"bar\", data=df6)","561fcfb7":"sns.catplot(x=\"FullBath\", kind=\"count\", palette=\"ch:.25\", data=train_data2)","1802ed21":"train_data2[\"FullBath\"]=[1 if i == 0 else i if i == i else i for i in train_data2[\"FullBath\"]]\ntest[\"FullBath\"]=[1 if i == 0 else i if i == i else i for i in test[\"FullBath\"]]","d2727eb1":"train_data2[train_data2.FullBath==0]","6aa2b0b1":"df7=train_data2[[\"TotRmsAbvGrd\",\"SalePrice\"]].groupby([\"TotRmsAbvGrd\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf7","2cef7849":"df8=train_data1[[\"TotRmsAbvGrd\",\"SalePrice\"]].groupby([\"TotRmsAbvGrd\"], as_index=False).count().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf8","53e37e82":"sns.catplot(x=\"TotRmsAbvGrd\", y=\"SalePrice\", kind=\"bar\", data=df7)","c58103ca":"sns.catplot(x=\"TotRmsAbvGrd\", y=\"SalePrice\", kind=\"bar\", data=df8)","7d7aaf4e":"train_data2[train_data2.TotRmsAbvGrd>10].sort_values(by=\"TotRmsAbvGrd\",ascending=\"True\")","8774c0fc":"trace0=go.Box(\n    y=train_data1.TotRmsAbvGrd,\n    name=\"TotRmsAbvGrd\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","e003c948":"train_data2=train_data2.drop(634).reset_index(drop=True)","cf102686":"train_data2[train_data2.TotRmsAbvGrd>11]","5adb4d8b":"df8=train_data2[[\"GarageCars\",\"SalePrice\"]].groupby([\"GarageCars\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf8","83088611":"fig=px.histogram(train_data2,x=\"GarageCars\",y=\"SalePrice\", histfunc=\"avg\", nbins=50)\nfig.show()","3c9afaf6":"df9=train_data2[[\"GarageCars\",\"SalePrice\"]].groupby([\"GarageCars\"], as_index=False).count().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf9","4958738c":"fig=px.histogram(train_data2,x=\"GarageCars\",y=\"SalePrice\", histfunc=\"count\")\nfig.show()","1be3b366":"train_data2[train_data2.GarageCars>3]","f5f925d6":"trace0=go.Box(\n    y=train_data2.GarageCars,\n    name=\"GarageCars\",\n    marker=dict(color=\"rgb(12,15,18)\",))\n\ndata=[trace0]\niplot(data)","c3a271e5":"df10=train_data2[[\"GarageArea\",\"SalePrice\"]].groupby([\"GarageArea\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf10","74161b52":"fig=px.histogram(train_data2,x=\"GarageArea\",y=\"SalePrice\", histfunc=\"avg\", nbins=50)\nfig.show()","56894eec":"train_data2[train_data2.GarageArea>1200]","a2828864":"fig=px.histogram(train_data2,x=\"GarageArea\",y=\"SalePrice\", histfunc=\"count\", nbins=50)\nfig.show()","c72ef286":"trace0=go.Box(\n    y=train_data2.GarageArea,\n    name=\"GarageArea\",\n    marker=dict(color=\"rgb(30,5,80)\",))\n\ndata=[trace0]\niplot(data)","3e979983":"train_data2 = train_data2.drop(train_data2[(train_data2.GarageArea >1199)].index)","f42af975":"train_data2[train_data2.GarageArea>1000]","b8f68d75":"f, ax= plt.subplots(figsize=(10,10))\nsns.heatmap(train_data1[[ \"GarageArea\",\"GarageCars\",\"SalePrice\"]].corr(),annot=True, fmt=\"1f\",ax=ax)\nplt.show()","51e33fa4":"train_data2.info()","8e9cc5ea":"train_data2.Fireplaces.head(20)","e6c13e6e":"train_data2","c85ac812":"df12=train_data2[[\"Fireplaces\",\"SalePrice\"]].groupby([\"Fireplaces\"], as_index=False).count().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf12","6ab43de2":"fig=px.histogram(train_data2,x=\"Fireplaces\",y=\"SalePrice\", histfunc=\"count\", nbins=50)\nfig.show()","0498cef6":"df13=train_data2[[\"Fireplaces\",\"SalePrice\"]].groupby([\"Fireplaces\"], as_index=False).mean().sort_values(by=\"SalePrice\",ascending=\"True\")\ndf13","62372130":"fig=px.histogram(train_data2,x=\"Fireplaces\",y=\"SalePrice\", histfunc=\"avg\", nbins=50)\nfig.show()","a7a3058c":"train_data2.columns\n","db0d10d8":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","57729721":"print(\"test\",len(test))\nprint(\"train\",len(train_data2))","c3694e08":"train= train_data2.drop(labels=[\"YearBuilt\",\"TotalBsmtSF\",\"FstFlrSF\",\"GarageCars\",\"MasVnrArea\"], axis=1 )\ntest1= test","91c54bc9":"train.columns","b297419c":"test.head()\n","e2a0a3bd":"test.head()\n","94975dee":"x_train=train.drop(labels=\"SalePrice\",axis=1)\ny_train=train[[\"SalePrice\"]]","e10f9d59":"y_train.head()","2eed2ddf":"x_train.info()","d6196d34":"y_train.info()","96b12fe5":"plt.scatter(x_train.OverallQual,y_train.SalePrice)\nplt.show()","8a1075e8":"x=x_train.OverallQual.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)","ee17a4fb":"linregbest = LinearRegression()\nlinregbest.fit(x,y)\nb0_=linregbest.intercept_\nb1_=linregbest.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linregbest.score(x,y))","4ef7a5cb":"plt.scatter(x_train.YearRemodAdd,y_train.SalePrice)\nplt.show()\nx=x_train.YearRemodAdd.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","1f2ce0cf":"plt.scatter(x_train.GrLivArea,y_train.SalePrice)\nplt.show()\nx=x_train.GrLivArea.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","ccf09b91":"plt.scatter(x_train.FullBath,y_train.SalePrice)\nplt.show()\nx=x_train.FullBath.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","fcee16eb":"plt.scatter(x_train.TotRmsAbvGrd,y_train.SalePrice)\nplt.show()\nx=x_train.TotRmsAbvGrd.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","65011565":"plt.scatter(x_train.GarageArea,y_train.SalePrice)\nplt.show()\nx=x_train.GarageArea.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","155eb8e7":"plt.scatter(x_train.Fireplaces,y_train.SalePrice)\nplt.show()\nx=x_train.Fireplaces.values.reshape(-1,1)\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))","4df058fa":"x_train.columns","81a9018c":"\nx=x_train.iloc[:,1:8].values\ny=y_train.SalePrice.values.reshape(-1,1)\nprint(x.shape)\nprint(y.shape)\nlinreg = LinearRegression()\nlinreg.fit(x,y)\nb0_=linreg.intercept_\nb1_=linreg.coef_\nprint(\"b0_ :\",b0_)\nprint(\"b1_ ;\", b1_)\nprint(\"R_2 score :\", linreg.score(x,y))\n","0071ed98":"import statsmodels.api as sm\n\nX5 = x_train.drop(\"Id\", axis=1)\ny5 = y_train\nX5=sm.add_constant(X5)\n\n# Note the difference in argument order\nmodel = sm.OLS(y5, X5).fit()\npredictions = model.predict(X5) # make the predictions by the model\n\n# Print out the statistics\nmodel.summary()","b2d205e9":"print(\"Intercept: \", linreg.intercept_)\nprint(\"Coefficients:\")\nlist(zip(x, linreg.coef_))","e210f58f":"X6= X5.drop(\"FullBath\", axis=1)\n# Note the difference in argument order\nmodel = sm.OLS(y5, X6).fit()\npredictions = model.predict(X6) # make the predictions by the model\n\n# Print out the statistics\nmodel.summary()","37c8f838":"X7= X6.drop(\"TotRmsAbvGrd\", axis=1)\n# Note the difference in argument order\nmodel = sm.OLS(y5, X7).fit()\npredictions = model.predict(X7) # make the predictions by the model\n\n# Print out the statistics\nmodel.summary()","e4ee034d":"from sklearn.metrics import r2_score\nr2_score(y5,predictions)\n\n","a1b88742":"test_data= test[[\"OverallQual\",\"YearRemodAdd\",\"GrLivArea\",\"GarageArea\",\"Fireplaces\"]]\ntest_data","e29b48b2":"test_data=test[[\"OverallQual\" , \"YearRemodAdd\", \"GrLivArea\",\"GarageArea\",\"Fireplaces\"]]\ntest_data=sm.add_constant(test_data)\ntest_data","ec9ccafa":"test_pred = model.predict(test_data)\ntest_pred\n","69e9e916":"results_mlr = pd.concat([test, test_pred],axis = 1)\nresults_mlr.to_csv(\"hp.csv\", index = False)","5bb4e85b":"results_mlr","3921af91":"X5.drop(\"const\",inplace=True, axis=1)\nX5","e987c054":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn import tree\ntree_reg = DecisionTreeRegressor()\n","3a7c12d3":"tree_m= tree_reg.fit(X5,y5)\nprint(\"score: \",tree_reg.score(X5,y5))\ntree_reg.predict(X5)","ed342167":"\ntree_reg4 = DecisionTreeRegressor(max_depth= 4)\ntree_m4= tree_reg4.fit(X5,y5)\nprint(\"score: \",tree_reg4.score(X5,y5))\n","d050a66c":"fig, ax = plt.subplots(figsize=(150, 75))\ntree.plot_tree(tree_m4,fontsize=40)  ","fbef45ef":"from sklearn.model_selection import train_test_split,KFold, GridSearchCV","62e1bad6":"regression = DecisionTreeRegressor()\ndt_param_grid={ \"max_depth\":range(1,10,1)}\n","641287a7":"from sklearn.model_selection import GridSearchCV\nregression_d=GridSearchCV(regression, dt_param_grid, n_jobs=-1,cv=4)\nregression_d.fit(X5,y5)\n","cb9d7631":"print(\" Best prametres: \\n\",regression_d.best_params_)\nprint(\" Best scores: \\n\",regression_d.best_score_)","bdbc5c60":"print('Best score: ', regression_d.best_score_)\nbest = regression_d.best_estimator_\nprint('R2: ', r2_score(y_pred = best.predict(X5), y_true = y5))","87404cb6":"\nresuults=pd.DataFrame(regression_d.cv_results_)[['params','mean_test_score']]\nresuults","3783784e":"tree_reg5 = DecisionTreeRegressor(max_depth= 8)\ntree_m5= tree_reg5.fit(X5,y5)\nprint(\"score: \",tree_reg5.score(X5,y5))","867fc5a9":"X6=X5\ny6=y5\n","342037c2":"X6","b7127125":"from sklearn.ensemble import RandomForestRegressor","11614510":"regression_r=RandomForestRegressor()\nrf_param_grid={\"n_estimators\": range(5,60,1),\n              \"max_depth\": range(1,10,1),\n              \"min_samples_leaf\": range(1,10,1) }","1d9bdfdd":"from sklearn.model_selection import GridSearchCV\nregression_rf=GridSearchCV(regression_r, rf_param_grid, n_jobs=-1,cv=4)\nregression_rf.fit(X6,y6.values.ravel())","8c225a75":"pred=regression_rf.predict(X6)\npred","07254c2d":"\nresuults2=pd.DataFrame(regression_rf.cv_results_)[['params','mean_test_score']]\nresuults2","dd7cad04":"print(\" Best prametres: \\n\",regression_rf.best_params_)\nprint(\" Best scores: \\n\",regression_rf.best_score_)\n","91b05824":"rf4 = RandomForestRegressor(n_estimators = 55, max_depth = 9, min_samples_leaf = 1)\nrf4_m= rf4.fit(X6,y6.values.ravel())\nprint(\"score: \",rf4.score(X6,y6))\n\n","271c81c4":"pred2=rf4.predict(X6)\nprint(\"r2:\", r2_score(y_true=y6,y_pred=pred2))","750c4970":"test_data","bb882db8":"test_data.head()","87e80fa7":"test_data.isnull().sum()","fe69daa5":"test_data.isnull().sum()","9a8dc4a5":"X6.head()","1da1c953":"test_data_rf= test[[\"OverallQual\",\"YearRemodAdd\",\"GrLivArea\",\"FullBath\",\"TotRmsAbvGrd\",\"GarageArea\",\"Fireplaces\"]]\ntest_data_rf","8db238c7":"test_data_rf['GarageArea'] = test_data_rf['GarageArea'].fillna(test_data_rf['GarageArea'].mode()[0])","b95e7fe3":"test_pred_rf_p = rf4.predict(test_data_rf)\ntest_pred_rf_p = pd.Series(test_pred_rf_p) \ntest_pred_rf_p","6b67c980":"results_rf = pd.concat([test, test_pred_rf_p],axis = 1)\n\n","c80fc6b2":"results_rf.head()","a1b08152":"results_rf2=results_rf[[\"Id\",0]]","1cc6a7c3":"results_rf2=results_rf2.rename(columns={0:\"SalePrice\"})\nresults_rf2","7bb00e6d":"results_rf2.to_csv(\"hp.csv\", index = False)","f6476d41":"TotRmsAbvGrd is removed","acd00dd8":"# Variable Types","0c0f6a02":"FullBath is removed","234b3c52":"### Outlier Analysis","0f954466":"<a id=\"11\"><\/a><br >\n## TotalBsmtSF ve SalePrice","7e0d44c5":"<a id=\"13\"><\/a><br >\n## FullBath ve SalePrice","4cf3354f":"<a id=\"2\"><\/a><br >\n# Corelation analysis with dependent variable\n\n\n","79f83d24":"### Data summary","70f5e8e0":"<a id=\"8\"><\/a><br >\n## YearBuilt ve SalePrice","1fd3e8d9":"### Changed the name of variable with  a numeric value in its name","e02dfed2":" <a id=\"17\"><\/a><br >\n ## Fireplaces and SalePrice","7baa561e":"\nOverallQual\tMasVnrArea\n0\t1.0\t0.000000\n1\t2.0\t0.000000\n2\t3.0\t17.000000\n3\t4.0\t14.008621\n4\t5.0\t44.030227\n5\t6.0\t103.354839\n6\t7.0\t105.707937\n7\t8.0\t211.538922\n8\t9.0\t345.720930\n9\t10.0\t539.235294","37365e85":"### FullBath Manipulation \n* Values 0 and 1 were combined because their mean was close.","f66b282c":"<a id=\"10\"><\/a><br >\n## FstFlrSF ve SalePrice","6027cbf0":"### OverallQuall Manipulation\n* 1st and 2nd group combined","ef8430d7":"    <a id=\"4\"><\/a><br >\n    # Converted data type","97a9cb56":"<a id=\"15\"><\/a><br >\n## GarageCars and SalePrice","b64ad5e3":"\n### YearBuilt Manipulation\n* YearRemodAdd YearBuilt same variable and have a corelation . YearRemodAdd choosen beacuse of has a more straight line than YearBuilt","13c578ca":"<a id=\"14\"><\/a><br >\n##  TotRmsAbvGrd ve SalePrice","7f3b60cf":"<a id=\"3\"><\/a><br >\n# Null Observation Check\n* Masarea has a null","5064323f":"<a id=\"22\"><\/a><br >\n# Decission Tree","de110823":"coefficient is meaning, explanatory power is bad","7e782f25":"# Introduction\n\n    Estimating the sales values of homes with given features\n    \n    ### Content :\n    \n*      [Load and Check Data](#1)\n*     [Corelation analysis with dependent variable](#2)\n*      [Null Observation Check](#3)\n*    [Converted data type](#4)\n*     [Analysis for filling null value](#5)\n*     [Basic Data Analysis and Visualization](#6)\n     *        [OverallQuall and Sale Pricee](#7)   \n    *      [YearBuilt ve SalePrice](#8)\n    *    [ YearRemodAdd ve SalePrice](#9)\n    *     [FstFlrSF ve SalePrice](#10)\n    *     [TotalBsmtSF ve SalePrice](#11)\n    *     [GrLivArea ve SalePrice](#12)\n    *     [FullBath ve SalePrice](#13)\n    *     [TotRmsAbvGrd ve SalePrice](#14)\n    *     [GarageCars and SalePrice](#15)\n    *     [GarageArea and SalePrice](#16)\n    *     [Fireplaces and SalePrice](#17)\n* [Selected Variables](#18) \n* [Modelling](#19)\n    * [Lineer Regresyon(a variable)](#20)\n    *   [Multiple Lineer Regression](#21) \n    *   [Decission Tree](#22) \n    *   [Random Forest](#23) ","c8197492":"coefficient is meaning, explanatory power is enough","c1427322":"<a id=\"19\"><\/a><br >\n# Modelling","b4f482b7":"### Data Removed","c3caf105":"* All coefficient is meaning and in line with expectations\n* Explanatory power is good\n* The data isn't normally distributed(JB)\n* No first order autocorrelation(DW).","343ff617":"Over-fitting problem","6a4baf09":"###  TotRmsAbvGrd Manipulation\n* Data with 14 rooms is removed","c2b1aeac":"<a id=\"1\"><\/a><br >\n# Load and Check Data","f74d2875":"### Null values is filled by OVerallQual median values","42887b7d":"coefficient is meaning, explanatory power is bad\n\n","1fa3e73c":"<a id=\"20\"><\/a><br >\n# Lineer Regresyon(a variable)","c529456c":"test.drop(labels = [\"SalePrice\"],axis = 1, inplace = True)","7b6dece1":"## Results :\n* Simple Lineer Regression : 0.6417205292680421\n* Multi Lineer REgression  : 0.7869154317393346\n* Decision Tree            : 0.9283017027889219\n* Random Forest            : 0.9511387740980288                     ","761550f5":"coefficient is meaning, explanatory power is good","edb5725b":"\nresults_rf","7d0c0e24":"coefficient is meaning, explanatory power is bad","8c2e5a1c":"### OverallQuall best single variable","672592d4":"Teker teker yap\u0131lmak istenirse\ntrain_data2 = train_data\ntrain_data2.OverallQual=train_data2.OverallQual.astype(\"float\")\ntrain_data2.info()","4016815b":"coefficient is meaning, explanatory power is enough","c73bc255":"# Seleceted Variables\n### To be continued with appropriate variables\n    * OverallQuall : Overall material and finish quality - Genel malzeme ve kaplama kalitesi                                 * YearRemondAdd : Remodel date -Tadilate tarihi                                           \n    * GriLivArea: Above grade (ground) living area square feet - Zemin \u00fcst\u00fc ya\u015fam alan\u0131 fit kare\n    * FullBath : Full bathrooms above grade - Tam donan\u0131ml\u0131 banyolar \n    * TotRmsAbvGrd :  Total rooms above grade (does not include bathrooms) -Toplam oda                                       * GarageArea :  Size of garage in square feet - Fit kare cinsinden garaj boyutu\n    * Fireplaces :  Number of fireplaces - \u015e\u00f6mine say\u0131s\u0131","528e550c":"<a id=\"16\"><\/a><br >\n## GarageArea and SalePrice","ec9376cc":"<a id=\"5\"><\/a><br >\n# Analysis for filling null value","3843facd":"<a id=\"12\"><\/a><br >\n## GrLivArea ve SalePrice","01877a4b":"<a id=\"7\"><\/a><br >\n## OverallQuall and Sale Pricee","fa4761bf":"### >%50 Corelation  \n* OverallQuall : Genel malzeme ve kaplama kalitesi\n* YearBuilt : yap\u0131m tarihi\n* YearRemondAdd : Tadilate tarihi\n* TotalBsmtSF: Bodrum alan\u0131n\u0131n toplam fit kare\n* 1stFirSF : Birinci Kat fit kare\n* GriLivArea: Zemin \u00fcst\u00fc ya\u015fam alan\u0131 fit kare\n* FullBath : Tam donan\u0131ml\u0131 banyolar\n* TotRmsAbvGrd : Toplam oda\n* GarageCars : Araba kapasitesindeki garaj boyutu\n* GarageArea : Fit kare cinsinden garaj boyutu\n* MasVnrArea: Fit kare cinsinden duvar kaplama alan\u0131\n* Fireplaces : \u015e\u00f6mine say\u0131s\u0131","3cc80588":"## Outlier Analysis","f21af78b":"### Determination of columns","9eafd19e":"<a id=\"9\"><\/a><br >\n## YearRemodAdd ve SalePrice","7b2f8501":"results_rf=results_rf.rename(columns={0:\"SalePrice\"})\nresults_rf= test[[\"Id\",\"SalePrice\"]]\n\nresults_rf.to_csv(\"hp.csv\", index = False)\n","e5e7b7bd":"<a id=\"23\"><\/a><br >Random Forest\n# Random Forest","7ce6619c":"<a id=\"21\"><\/a><br >\n# Multiple Lineer Regression","9d56f575":"<a id=\"6\"><\/a><br >\n# Basic Data Analysis and Visualization ","2067b890":"### controlling","a49edda3":"### First review","47d73bb6":"### Summary analysis","b95103a1":"### Outlier Analysis","4ddf0780":"coefficient is meaning, explanatory power is bad","9553182b":" <a id=\"18\"><\/a><br >\n# Seleceted Variables\n### To be continued with appropriate variables\n    * OverallQuall : Overall material and finish quality - Genel malzeme ve kaplama kalitesi                                 * YearRemondAdd : Remodel date -Tadilate tarihi                                           \n    * GriLivArea: Above grade (ground) living area square feet - Zemin \u00fcst\u00fc ya\u015fam alan\u0131 fit kare\n    * FullBath : Full bathrooms above grade - Tam donan\u0131ml\u0131 banyolar \n    * TotRmsAbvGrd :  Total rooms above grade (does not include bathrooms) -Toplam oda                                       * GarageArea :  Size of garage in square feet - Fit kare cinsinden garaj boyutu\n    * Fireplaces :  Number of fireplaces - \u015e\u00f6mine say\u0131s\u0131\n\n### Removed\n    *  YearBuilt : Original construction date - yap\u0131m tarihi\n    * TotalBsmtSF: Total square feet of basement area -Bodrum alan\u0131n\u0131n toplam fit kare\n    * 1stFirSF : First Floor square feet- Birinci Kat fit kare\n    * GarageCars : Size of garage in car capacity - Araba kapasitesindeki garaj boyutu","f103ff33":"### Index Determined"}}