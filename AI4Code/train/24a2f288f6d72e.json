{"cell_type":{"4f75af36":"code","28521005":"code","f9c87ebd":"code","581ebc74":"code","9eca3f3d":"code","1de40b90":"code","d30e11d0":"code","3071e139":"code","28b0380b":"code","9621b5df":"code","602c632f":"code","2f7d1f29":"code","12190efb":"code","1b37494e":"code","a8416b43":"code","7dcae0d1":"code","b91f478e":"code","0c99f2f4":"code","8c480f5c":"code","de8580f2":"code","2041877f":"code","9eb740f3":"code","af78b58c":"code","6305c1c3":"code","0fb6aebe":"code","f277f4b8":"code","2f51ea6b":"code","937d3237":"markdown","cc034ac0":"markdown","dd257b39":"markdown","49f4d7f1":"markdown","4cad98b8":"markdown","fee7492c":"markdown","9929f4d2":"markdown","a487d55f":"markdown","44dc3dba":"markdown","59cec340":"markdown","5a72efd9":"markdown","d5676e8b":"markdown","911c5f2b":"markdown","b8c108ee":"markdown","a42d00bb":"markdown","557e3d82":"markdown","ca0287dc":"markdown"},"source":{"4f75af36":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","28521005":"ratings_df = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/ratings_small.csv')\nmovies_df = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')","f9c87ebd":"ratings_df.head()","581ebc74":"ratings_df.info()","9eca3f3d":"movies_df.head()","1de40b90":"movies_df.info()","d30e11d0":"plt.figure(figsize=(10,5))\nax = sns.countplot(data=ratings_df, x='rating')\nlabels = (ratings_df['rating'].value_counts().sort_index())\nplt.title('Distribution of Ratings')\nplt.xlabel('Ratings')\n\nfor i,v in enumerate(labels):\n    ax.text(i, v+100, str(v), horizontalalignment='center', size=14, color='black')\nplt.show()","3071e139":"title_mask = movies_df['title'].isna()","28b0380b":"movies_df = movies_df.loc[title_mask == False]","9621b5df":"movies_df = movies_df.astype({'id': 'int64'})","602c632f":"df = pd.merge(ratings_df, movies_df[['id', 'title']], left_on='movieId', right_on='id')\ndf.head()","2f7d1f29":"df.drop(['timestamp', 'id'], axis=1, inplace=True)","12190efb":"df = df.drop_duplicates(['userId','title'])","1b37494e":"df_pivot = df.pivot(index='userId', columns='title', values='rating').fillna(0)","a8416b43":"df_pivot = df_pivot.astype('int64')","7dcae0d1":"def encode_ratings(x):\n    if x<=0:\n        return 0\n    if x>=1:\n        return 1\n\ndf_pivot = df_pivot.applymap(encode_ratings)","b91f478e":"df_pivot.head()","0c99f2f4":"from mlxtend.frequent_patterns import apriori\n\nfrequent_itemset = apriori(df_pivot, min_support=0.07, use_colnames=True)","8c480f5c":"frequent_itemset.head()","de8580f2":"from mlxtend.frequent_patterns import association_rules\n\nrules = association_rules(frequent_itemset, metric=\"lift\", min_threshold=1)","2041877f":"rules.head()","9eb740f3":"df_res = rules.sort_values(by=['lift'], ascending=False)\ndf_res.head()","af78b58c":"df_MIB = df_res[df_res['antecedents'].apply(lambda x: len(x) ==1 and next(iter(x)) == 'Men in Black II')]","6305c1c3":"df_MIB = df_MIB[df_MIB['lift'] > 2]","0fb6aebe":"df_MIB.head()","f277f4b8":"movies = df_MIB['consequents'].values\n\nmovie_list = []\nfor movie in movies:\n    for title in movie:\n        if title not in movie_list:\n            movie_list.append(title)","2f51ea6b":"movie_list[0:10]","937d3237":"You need to convert the ratings to 0 or 1 and also convert all float values to int.","cc034ac0":"You would also like to merge the two dataframes so that you have a dataframe having userId and the title of the movie watched by the user. If you know SQL, you might be familiar with the concept of join. You can merge the two dataframe on a common column -> movieId. As a result, you will have the records of ratings dataframe concatenated with the corresponding details of the movie from the movies dataframe and the way it gets to know the corresponding record is by using the common column movieId.\n\nBefore merging you need to convert the string datatype of id column of movies dataframe to int as that in the ratings dataframe.","dd257b39":"The ratings dataframe contains information of userId, the movieId of the movie watched by that user, the rating given by the user and timestamp.\n\nThe movies dataframe contains the information of the movies like movieId, title, genre and so on.","49f4d7f1":"Great! You have the top 10 movies that the user is most likely to watch. The result looks convincing to me.\n\nWe have a our own recommendation system now.","4cad98b8":"# Load the data","fee7492c":"The apriori algorithm has given you the support, using association_rules you can compute the other paramters like confidence and lift.","9929f4d2":"# Train the Model\n\nThe apriori model calculates the probability to determine how likely a user will watch movie M2 if he has already watched a movie M1. It does so by computing support, confidence and lift for different combinations of movies.\n\nSupport of a movie M1 is like the probability of users watching movie M1. It is given as -\n\n![support.png](attachment:support.png)\n\nSupport computes, out of the total users, how much percentage of users have movie M1 in their watchlist.\n\n*Note: Here M1 can be a single movie or a group of movies.*\n\nConfidence of a movie is out of the total users having watched movie M1, how many have also watched movie M2. It is denoted as Confidence(M1 -> M2) and computed as -\n\n![confidence.png](attachment:confidence.png)\n\nLift is the ratio of confidence and support.\n\n![lift.png](attachment:lift.png)\n\nFrom the definition of support, you know that Support(M2) is the likelihood of users watching movie M2 if you recommend it to all the users.\n\nWhile Confidence(M1 -> M2), is the likelihood of users watching movie M2 if you recommend it to only the users who have already watched movie M1. In confidence you recommend the movie to a subset of population.\n\nLift then by definition is the measure of increase in likelihood of users watching the movie M2 when we recommend it to the subset than when we recommend it to entire population. So a high lift suggests there is some relation between the two movies and most of the users who have watched movie M1 are also likely to watch movie M2.\n\nThis is for just one pair, the model has to compute this for every possible combination of movies to recommend the movies that the user will most likely watch.\n\nLooks like your model has to do a lot of computation.\n\nYou can ease its job by using a threshold for a minimum support. As you have seen that movies with low rating have less number of reviews. So, you don't want to bother the model to recommend such movies which users don't like. Setting a minimum support ensures that atleast some percentage of users have watched that movie.","a487d55f":"Id column is repeated and the timestamp is not important for this problem. So, you can drop the two.","44dc3dba":"# Movie Recommendation\n\nThe dataset at hand contains records of movies watched by users and their ratings. Your job is to extract relations of the movies watched by a user and recommend movies to a user based on the previously watched movies. This is same as youtube recommending videos to you saying people who watched this video also watched this, or maybe like Netflix or Amazon prime recommending you other movies or series based on your watch history and of others who have watched the same movies as you.\n\nLet's begin creating a recommendation system for movies.","59cec340":"# Interpret the Results\n\nLet's sort the result by descending order of lift. So that the most likely movie that the user will watch is recommended first.","5a72efd9":"The ratings distribution shows that there are relatively fewer movies that are lower rated. This can be because most of the users who didn't like the movie, didn't care enough to rate the movie. You should note this, it can be useful later. As you wouldn't want to recommend movies with relatively low number of ratings as users probably didn't like them.","d5676e8b":"You have a bunch of recommendation there. Let's have a list of unique movies in the order of descending lift.","911c5f2b":"The apriori model needs data in a format such that the userId forms the index, the columns are the movie titles and the values can be 1 or 0 depending on whether that user has watched the movie of the corresponding column. The resulting data is like a user's watchlist, for each userId, having 1 in columns of the movies that the user has watched and 0 otherwise.\n\nYou can achieve this by using pivot on the dataframe. To do so you need to first make sure there are no duplicate records for the combination of userId and title.","b8c108ee":"Let's see what your model recommends to someone who has watched the **Men in Black II**.","a42d00bb":"# Clean the Data\n\nYou can see that in the movies dataframe, there are few records with Nan title. This doesn't serve your purpose as you cannot recommend movies without title. You can remove these records","557e3d82":"***I hope you liked my attempt at presenting the concepts in a way that I find intuitive to understand. I would love to read your suggestions or feedback below.***","ca0287dc":"Your data looks to be ready now."}}