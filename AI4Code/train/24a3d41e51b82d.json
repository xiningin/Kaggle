{"cell_type":{"aa47998c":"code","7464b80b":"code","c9554d22":"code","1dc8bbd7":"code","82d09bb0":"code","2e461c6c":"code","de677550":"code","f75a467e":"markdown","0a736502":"markdown","7feab12f":"markdown","9c0a637c":"markdown","b476e37b":"markdown","822b1018":"markdown","73bd4b70":"markdown"},"source":{"aa47998c":"import pandas as pd\nimport matplotlib\nfrom itertools import combinations\nimport networkx as nx # the main libary we will use\nfrom networkx.algorithms import bipartite\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit \nimport pandas as pd\nimport matplotlib","7464b80b":"df = pd.read_json('..\/input\/data.txt',lines=True)\ndf.sample(5,random_state=12228)","c9554d22":"df.year.hist(bins=200)","1dc8bbd7":"df = df[df['year'].between(2014,2018)]\ndf['cast_coup']=df['cast'].apply(lambda L: [comb for comb in combinations(L, 2)])\ndf['title_tup']=df['title'].apply(lambda x: (x,))\ndf['year_tup']=df['year'].apply(lambda x: (str(x),))\n\ndef generate_touples(tup,row):\n    return tup+row['title_tup']+row['year_tup']\n\ndf['cast_coup_step2']=df.apply(lambda row: [generate_touples(tup,row) for tup in row['cast_coup']],axis=1)\nfinal_tup_list = df['cast_coup_step2'].apply(pd.Series).stack().reset_index(True)[0].tolist()\ndf = pd.DataFrame(final_tup_list, columns=['Player1', 'Player2', 'Movie_name','Year'])\ndf.sample(5,random_state =6)","82d09bb0":"G = nx.from_pandas_edgelist(df,'Player1','Player2',edge_attr = ['Year','Movie_name'], create_using=nx.Graph())\nprint (nx.info(G))","2e461c6c":"def Bacon_number(G,Player1,Player2):\n        length =nx.shortest_path_length(G,Player1,Player2)\n        path = nx.shortest_path(G,Player1,Player2) # get the length of shortest path between 2 nodes (d)\n        attr_year = nx.get_edge_attributes(G,'Year')\n        attr_name = nx.get_edge_attributes(G,'Movie_name')\n        print('%s Bacon number to actor %s is %d' %(Player1,Player2,length))\n        for edge in range(length):\n            try:\n                print('At the year of %s, %s and %s Played in a movie called %s' %(str(attr_year[(path[edge],path[edge+1])])[:-2],path[edge],path[edge+1], attr_name[(path[edge],path[edge+1])]))\n            except:\n                print('At the year of %s, %s and %s Played in a movie called %s' %(str(attr_year[(path[edge+1],path[edge])])[:-2],path[edge],path[edge+1], attr_name[(path[edge+1],path[edge])]))\n            #attr_year[(path[edge],path[edge+1])],attr_name[(path[edge],path[edge+1])]\n\nBacon_number(G,'Brad Pitt', 'Gal Gadot')","de677550":"Bacon_number(G,'Gal Gadot', 'William Shatner')","f75a467e":"# The majority of our movies are millenials ","0a736502":"#  Goal - find out who are the \"new Bacons\", or - who are the most linked actors in the industry ","7feab12f":"https:\/\/oracleofbacon.org\/","9c0a637c":"#  We will import our dataset from a Wikipedia scraper that is also used to calculate the Bacon numbers\nlink: https:\/\/oracleofbacon.org\/how.php\nsize: 15 Mb","b476e37b":"# Preprocessing makes the tables ready for a network representation -\n* Nodes - actors\n* Edges - played together in a movie","822b1018":"#  Building our first netowork with Movie name and year as edge attributes ","73bd4b70":"#  What's a Bacon number?"}}