{"cell_type":{"02911861":"code","741741f2":"code","20438032":"code","094c2f08":"code","00b35669":"code","ace7a6c9":"code","cee656fc":"code","146d98f0":"code","b21083a9":"code","284a1056":"code","358f63bd":"code","a9bc9527":"code","c1ad30f8":"code","bda98119":"code","1926296b":"code","88417353":"code","e5c5da2e":"code","acb8e896":"code","c01c8ec2":"code","31d606d9":"code","b097c299":"code","0aba456b":"code","682d2d33":"code","874fe61b":"code","cbb58486":"code","aa4cf11d":"code","f65a51f7":"code","f21be21b":"code","43fc2499":"markdown"},"source":{"02911861":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","741741f2":"data_path = '\/kaggle\/input\/dwdm-petrol-prices\/Petrol Prices.csv' # Path to data file\ndata = pd.read_csv(data_path)\ndata","20438032":"# Displaying the first 7 records\ndata.head(7)","094c2f08":"# Displaying the last 4 records\ndata.tail(4)","00b35669":"# Number of records that exist for each month in the data set\nmonthly_count = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%B').value_counts()\nmonthly_count","ace7a6c9":"monthly_count.plot(kind='bar', title =\"Number of records that exist for each month in the data set\", figsize=(15, 10))\nplt.show()","cee656fc":"data['Month'] = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%B')\ndata['Month']","146d98f0":"data['Day'] = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%d')\ndata['Day']","b21083a9":"data['Year'] = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%Y')\ndata['Year']","284a1056":"data","358f63bd":"# data['Timestamp'] = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')\ndata['Timestamp'] = pd.to_datetime(data['Date'], errors='coerce').dt.strftime('%Y-%m-%d')\ndata['Timestamp']","a9bc9527":"data2 = data[['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery', 'Timestamp', 'Day', 'Month', 'Year']].copy()\ndata2","c1ad30f8":"data2.plot(kind='line', x='Timestamp', title=\"Comparsion of Gas Prices\", figsize=(15, 10))\nplt.show()","bda98119":"data2['Butane'].pct_change(periods= 4,fill_method='ffill')","1926296b":"data2['Butane'].pct_change(periods= 4,fill_method='ffill').plot( title=\"Percentage Change of Butane\", figsize=(15, 10))","88417353":"data3 = data2[['Butane', 'Propane', 'Year']]\ndata3","e5c5da2e":"cluster_data = data2[['Butane', 'Propane']]\ncluster_data","acb8e896":"missing_data_results = cluster_data.isnull().sum()\nprint(missing_data_results)\n\n# perform imputation with median values\ncluster_data = cluster_data.fillna( data.median() )\nprint(cluster_data)","c01c8ec2":"data_values = cluster_data.iloc[ :, :].values\ndata_values","31d606d9":"# Use the Elbow method to find a good number of clusters using WCSS (within-cluster sums of squares)\nwcss = []\nfor i in range( 1, 15 ):\n    kmeans = KMeans(n_clusters=i, init=\"k-means++\", n_init=10, max_iter=300) \n    kmeans.fit_predict( data_values )\n    wcss.append( kmeans.inertia_ )\n    \nplt.plot( wcss, 'ro-', label=\"WCSS\")\nplt.title(\"Computing WCSS for KMeans++\")\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","b097c299":"kmeans = KMeans(n_clusters=2, init=\"k-means++\", n_init=10, max_iter=300) \ncluster_data[\"cluster\"] = kmeans.fit_predict( data_values )\ncluster_data","0aba456b":"cluster_data['cluster'].value_counts()","682d2d33":"cluster_data['cluster'].value_counts().plot(kind='bar',title='Distribution of Customers across groups')","874fe61b":"sns.pairplot( cluster_data, hue=\"cluster\")","cbb58486":"grouped_cluster_data = cluster_data.groupby('cluster')\ngrouped_cluster_data","aa4cf11d":"grouped_cluster_data.describe()","f65a51f7":"grouped_cluster_data.plot(subplots=True,)","f21be21b":"# What is the average price per year of each gas type (\u201cinteresting column\u201d) before you clustered the data?\ndata3.groupby('Year').mean()","43fc2499":"**What can you say about each cluster?**\nData in cluster 1 was more expensive. While data in cluster 0 was cheaper.\n\n\n**Name ONE (1) time series forecasting method and explain how it works (be sure to include a citation)**\nSmoothing is a technique applied to time series to remove the fine-grained variation between time steps.\n\nThe hope of smoothing is to remove noise and better expose the signal of the underlying causal processes. Moving averages are a simple and common type of smoothing used in time series analysis and time series forecasting.\n\nCalculating a moving average involves creating a new series where the values are comprised of the average of raw observations in the original time series.\n\nA moving average requires that you specify a window size called the window width. This defines the number of raw observations used to calculate the moving average value.\n\nThe \u201cmoving\u201d part in the moving average refers to the fact that the window defined by the window width is slid along the time series to calculate the average values in the new series.\n\nThere are two main types of moving average that are used: Centered and Trailing Moving Average.\n\nInformation taken from: https:\/\/machinelearningmastery.com\/moving-average-smoothing-for-time-series-forecasting-python\/"}}