{"cell_type":{"2de91dfb":"code","95602702":"code","fcadf7b2":"code","73cc1a0d":"code","d47d2a7e":"code","caa48af0":"code","d9e9f0fa":"code","7a022d9a":"code","03f86e44":"code","4e0a035b":"code","9fef1717":"code","bce64da7":"code","80d9f067":"code","24525101":"markdown","dafeff59":"markdown","498e6a59":"markdown","89bb2434":"markdown","88548b55":"markdown"},"source":{"2de91dfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n# credit: https:\/\/gist.github.com\/soply\/f3eec2e79c165e39c9d540e916142ae1\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef show_images(images, cols = 1, titles = None):\n    \"\"\"Display a list of images in a single figure with matplotlib.\n    \n    Parameters\n    ---------\n    images: List of np.arrays compatible with plt.imshow.\n    \n    cols (Default = 1): Number of columns in figure (number of rows is \n                        set to np.ceil(n_images\/float(cols))).\n    \n    titles: List of titles corresponding to each image. Must have\n            the same length as titles.\n    \"\"\"\n    assert((titles is None)or (len(images) == len(titles)))\n    n_images = len(images)\n    if titles is None: titles = ['Image (%d)' % i for i in range(1,n_images + 1)]\n    fig = plt.figure()\n    for n, (image, title) in enumerate(zip(images, titles)):\n        a = fig.add_subplot(cols, np.ceil(n_images\/float(cols)), n + 1)\n        if image.ndim == 2:\n            plt.gray()\n        plt.imshow(image)\n        a.set_title(title)\n    fig.set_size_inches(np.array(fig.get_size_inches()) * n_images)\n    plt.show()","95602702":"train_df = pd.read_csv(\"..\/input\/global-wheat-detection\/train.csv\")","fcadf7b2":"# 147,793 training bounding boxes, on 3,373 images\ntrain_df.shape, len(train_df.image_id.unique())\nprint(\"There are {} unique bounding boxes on {} unique training images (with boxes) from {} different sources. \".format(train_df.shape[0], len(train_df.image_id.unique()),len(train_df.source.unique()) ))","73cc1a0d":"# Shape of training images\ntrain_df.height.unique(), train_df.width.unique()\n# All images are the same width and height, and more importanntly square which could help with certain object detector types","d47d2a7e":"#Distribution of source images is somewhat skewed, lets see if there are any visual differences by region\n#(or if the average size of the bounding box varies by region)\ntrain_df[[\"image_id\", \"source\"]].groupby(\"source\").count().sort_values(\"image_id\", ascending = False).reset_index()","caa48af0":"### How many bounding boxes do images have?\ndf_by_id = train_df[[\"image_id\",\"bbox\"]].groupby(\"image_id\").count().reset_index()\nboxplot = df_by_id.boxplot(column=['bbox'])\nprint(\"The image with the most bboxes has {} and the one with the least (besides the ones with zero) has {}\".format(df_by_id.bbox.max(), df_by_id.bbox.min()))","d9e9f0fa":"import random\nfrom matplotlib import image","7a022d9a":"img_subset = train_df[train_df[\"source\"]==\"ethz_1\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","03f86e44":"img_subset = train_df[train_df[\"source\"]==\"arvalis_1\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","4e0a035b":"img_subset = train_df[train_df[\"source\"]==\"rres_1\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","9fef1717":"img_subset = train_df[train_df[\"source\"]==\"arvalis_3\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","bce64da7":"img_subset = train_df[train_df[\"source\"]==\"usask_1\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","80d9f067":"img_subset = train_df[train_df[\"source\"]==\"inrae_1\"]\nimg_subset_imageids = img_subset.image_id.unique()\nrandom.shuffle(img_subset_imageids)\nrs = [\"..\/input\/global-wheat-detection\/train\/{}.jpg\".format(i) for i in img_subset_imageids[:5]]\n\nimage_list = []\nfor i in rs:\n    img = image.imread(i)\n    image_list.append(img)\n    \nshow_images(image_list)","24525101":"### Checking some images from different sources:","dafeff59":"* The train set contains 3422 images, so that means there are 49 images in the set that contain 0 bounding boxes.","498e6a59":"* Keep this in mind for when you start to look for patterns in detection accuracy or mAP by source as some regions are under represented in teh train set.  \n","89bb2434":"* Median number of bounding boxes in each image seems to be around 42. Let's keep this is mind in case your detector uses anchors and there might be a need to recalculate anchors that are smaller than perhaps ImageNet (if you plan on using pre trained weights)\n\n* There are **49 images in the train set without bounding boxes.**\n\n* Keep in mind some detectors are better\/worse for small objects and some detectors might have performance issues around grid if they use a grid at the detection stage. ","88548b55":"#### Regions"}}