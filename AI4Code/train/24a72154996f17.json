{"cell_type":{"94c8cf4d":"code","ab5239ae":"code","464b23dd":"code","f8df6a1d":"code","34209b50":"code","d358ba07":"code","700ce561":"code","470e1af4":"code","3f906adf":"code","5cbd50bd":"code","11a7ea04":"code","a95a8b08":"code","abf57697":"code","79a7183d":"code","60e020c1":"code","66e0a61f":"code","ecbeb3d0":"code","27caa6ab":"markdown","47251bdb":"markdown","d8238bab":"markdown","b3df30c4":"markdown"},"source":{"94c8cf4d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt","ab5239ae":"#crear los datos para analizar\ndatos={'empleados':[1,2,4,5,6,8,10,11],'horas':[20,19,17,15,15,12,10,8]}\ndf=pd.DataFrame(data=datos)\ndf","464b23dd":"#usamos el ols para seleccionar el DataFrame y elegir que parametros (x, y) vamos a graficar\n#fit para ajustar el modelo de datos para la estimacion\nlinear_model = smf.ols(formula = 'horas ~ empleados', data=df ).fit()","f8df6a1d":"#graficamos los puntos \ndf.plot(kind='scatter', x='empleados', y = 'horas')\n\n","34209b50":"print('Los valores para la funcion lineal son \\n',\nlinear_model.params)","d358ba07":"#obtenemos la prediccion de los valores para la regresion lineal\ny_predict= linear_model.predict(pd.DataFrame(df['empleados']))\ny_predict","700ce561":"#graficamos la recta con la preciccion que hicimos anteriormente y_predict\ndf.plot(kind='scatter', x='empleados', y = 'horas')\nplt.plot(df['empleados'],y_predict, c = 'red')","470e1af4":"print('El coeficiente de determinacion es: ',linear_model.rsquared)","3f906adf":"#se agregaran 3 valores nuevos para ver como se modifica la recta\ndatos_nuevos={'empleados':[1,2,4,5,6,8,10,11,13,6,4],'horas':[20,19,17,15,15,12,10,8,12,8,8]}\n\ndf2=pd.DataFrame(data=datos_nuevos)\ndf2","5cbd50bd":"linear_model2 = smf.ols(formula = 'horas ~ empleados', data=df2 ).fit()\n\n","11a7ea04":"#graficamos los puntos\ndf2.plot(kind='scatter', x='empleados', y = 'horas')","a95a8b08":"#obtenemos la prediccion de los valores para la regresion lineal\ny_predict2= linear_model2.predict(pd.DataFrame(df2['empleados']))\ny_predict2","abf57697":"#graficamos los puntos las dos funciones para ver las diferencias\n#1\u00b0\ndf.plot(kind='scatter', x='empleados', y = 'horas')\nplt.plot(df['empleados'],y_predict, c = 'red', linewidth=1)\n\n#2\u00b0\ndf2.plot(kind='scatter', x='empleados', y = 'horas')\nplt.plot(df2['empleados'],y_predict2, c = 'red', linewidth=1)\n","79a7183d":"print('1\u00b0 R cuadrado ',linear_model.rsquared)\nprint('2\u00b0 R cuadrado ',linear_model2.rsquared)","60e020c1":"\nprint('La 1\u00b0 funcion quedaria de la siguiente manera Y= -1.17 X + 21.38')\nprint('La 2\u00b0 funcion quedaria de la siguiente manera Y= -0.74 X + 17.79')","66e0a61f":"linear_model.params\n","ecbeb3d0":"linear_model2.params","27caa6ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47251bdb":"Esta tabla representa la cantidad de horas que se tardan en realizar el trabajo en base a la cantidad de empleados","d8238bab":"![image.png](attachment:405d2a72-f11b-4812-b1a9-4c7d908880fa.png)","b3df30c4":"![image.png](attachment:d7746752-b362-4690-90ab-edb7d58c9448.png)\n\n![image.png](attachment:57816f12-bf4b-4852-8ce9-cddf48d6ef1d.png)\n\n"}}