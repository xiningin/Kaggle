{"cell_type":{"c18f89b9":"code","807e261a":"code","fa6ecfa8":"code","b8805ee7":"code","b7af9ad0":"code","2f0ae8e9":"code","a7bdd7c5":"code","f5f968ca":"code","4149a76d":"code","52bba248":"code","af910802":"code","5cb5509c":"code","025279b1":"code","9a5ff841":"code","204ea285":"code","f66441a5":"code","10de5282":"code","81a98a6c":"code","2737bbcc":"code","fd7616fe":"code","404371c1":"code","516439c5":"code","1e0e11ec":"code","e2dcb727":"code","f20977ac":"code","bb6546ef":"code","53a93366":"code","2ae304da":"code","3d94b193":"code","690e2bb6":"code","fa848bb6":"code","5d6f4481":"code","42485849":"code","0f622302":"code","8743371a":"code","79a05622":"code","dfe47521":"code","58c82d00":"code","842cc557":"code","11e23106":"code","e41e29ce":"code","fa1a4566":"code","61731c4e":"code","41e35c8d":"code","1cc16daa":"code","93c1bf7c":"code","cca32c21":"code","aa29d98b":"code","47942011":"code","e57a6662":"code","3724ebd0":"code","3fd284ad":"code","11dd5133":"code","a72f3039":"code","1c969570":"code","b256e94c":"code","477889f2":"code","a75c1a6d":"code","f377c5e0":"markdown","982dcaad":"markdown","9a3b01b5":"markdown","209cbe13":"markdown","81e48d1c":"markdown","f458964a":"markdown","90b22528":"markdown","c453bfdb":"markdown","00f1b2e2":"markdown","e5b99573":"markdown","e0e3d2d1":"markdown","7920dc11":"markdown","122ee780":"markdown","b9f21914":"markdown","f0df46f6":"markdown","5f9097a5":"markdown","eda79c09":"markdown","5fcdc5c9":"markdown","e2cfe3cc":"markdown","47405cb1":"markdown","fa2d4887":"markdown","47106e27":"markdown","c13542bf":"markdown","b6a79fac":"markdown","55385a8f":"markdown","14b232ac":"markdown","05355966":"markdown","6931d107":"markdown","f2101abd":"markdown","85b02589":"markdown","cb4747b2":"markdown"},"source":{"c18f89b9":"!pip install opencv-python==3.4.2.17\n!pip install opencv-contrib-python==3.4.2.17","807e261a":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\nimport tensorflow as tf\nimport random\nimport albumentations as A\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense,Activation,Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.cm as cm\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\ntf.random.set_seed(0)","fa6ecfa8":"from plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","b8805ee7":"train_image_path = '..\/input\/plant-pathology-2021-fgvc8\/train_images\/'\ntest_image_path = '..\/input\/plant-pathology-2021-fgvc8\/test_images'\ntrain_df_path = '..\/input\/plant-pathology-2021-fgvc8\/train.csv'\ntest_df_path = '..\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv'","b7af9ad0":"df_train = pd.read_csv(train_df_path)\ndf_test = pd.read_csv(test_df_path)","2f0ae8e9":"df_train.head()","a7bdd7c5":"df_test","f5f968ca":"df_train.labels.value_counts()","4149a76d":"plt.figure(figsize=(15,12))\nlabels = sns.barplot(df_train.labels.value_counts().index,df_train.labels.value_counts())\nfor item in labels.get_xticklabels():\n    item.set_rotation(45)","52bba248":"def batch_visualize(df,batch_size,path):\n    sample_df = df_train.sample(9)\n    image_names = sample_df[\"image\"].values\n    labels = sample_df[\"labels\"].values\n    plt.figure(figsize=(16, 12))\n    \n    for image_ind, (image_name, label) in enumerate(zip(image_names, labels)):\n        plt.subplot(3, 3, image_ind + 1)\n        image = cv2.imread(os.path.join(path, image_name))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        plt.imshow(image)\n        plt.title(f\"{label}\", fontsize=12)\n        plt.axis(\"off\")\n    plt.show()\n    \nbatch_visualize(df_train,9,train_image_path)","af910802":"def batch_visualize_with_label(df,batch_size,path,label): \n    sample_df = df_train[df_train[\"labels\"]==label].sample(9)\n    image_names = sample_df[\"image\"].values\n    labels = sample_df[\"labels\"].values\n    plt.figure(figsize=(16, 12))\n    \n    for image_ind, (image_name, label) in enumerate(zip(image_names, labels)):\n        plt.subplot(3, 3, image_ind + 1)\n        image = cv2.imread(os.path.join(path, image_name))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        plt.imshow(image)\n        plt.axis(\"off\")\n    plt.show()","5cb5509c":"batch_visualize_with_label(df_train,9,train_image_path,'healthy')","025279b1":"batch_visualize_with_label(df_train,9,train_image_path,'scab')","9a5ff841":"batch_visualize_with_label(df_train,9,train_image_path,'frog_eye_leaf_spot')","204ea285":"batch_visualize_with_label(df_train,9,train_image_path,'rust')","f66441a5":"batch_visualize_with_label(df_train,9,train_image_path,'complex')","10de5282":"batch_visualize_with_label(df_train,9,train_image_path,'powdery_mildew')","81a98a6c":"SAMPLE_LEN = 100\n\ndef load_image(file_path):\n    image = cv2.imread(train_image_path + file_path)\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\ntrain_images = df_train[\"image\"][:SAMPLE_LEN].progress_apply(load_image)","2737bbcc":"red_values = [np.mean(train_images[idx][:, :, 0]) for idx in range(len(train_images))]\ngreen_values = [np.mean(train_images[idx][:, :, 1]) for idx in range(len(train_images))]\nblue_values = [np.mean(train_images[idx][:, :, 2]) for idx in range(len(train_images))]\nvalues = [np.mean(train_images[idx]) for idx in range(len(train_images))]","fd7616fe":"fig = ff.create_distplot([values], group_labels=[\"Channels\"], colors=[\"purple\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","404371c1":"fig = ff.create_distplot([red_values], group_labels=[\"R\"], colors=[\"red\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of red channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","516439c5":"fig = ff.create_distplot([green_values], group_labels=[\"G\"], colors=[\"green\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of green channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","1e0e11ec":"fig = ff.create_distplot([blue_values], group_labels=[\"B\"], colors=[\"blue\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of blue channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","e2dcb727":"fig = go.Figure()\n\nfor idx, values in enumerate([red_values, green_values, blue_values]):\n    if idx == 0:\n        color = \"Red\"\n    if idx == 1:\n        color = \"Green\"\n    if idx == 2:\n        color = \"Blue\"\n    fig.add_trace(go.Box(x=[color]*len(values), y=values, name=color, marker=dict(color=color.lower())))\n    \nfig.update_layout(yaxis_title=\"Mean value\", xaxis_title=\"Color channel\",\n                  title=\"Mean value vs. Color channel\", template=\"plotly_white\")","f20977ac":"fig = ff.create_distplot([red_values, green_values, blue_values],\n                         group_labels=[\"R\", \"G\", \"B\"],\n                         colors=[\"red\", \"green\", \"blue\"])\nfig.update_layout(title_text=\"Distribution of red channel values\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.data[1].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[1].marker.line.width = 0.5\nfig.data[2].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[2].marker.line.width = 0.5\nfig","bb6546ef":"df_train['healthy'] = [1 if 'healthy' in x.split(' ') else 0 for x in df_train['labels']]\ndf_train['rust'] = [1 if 'rust' in x.split(' ') else 0 for x in df_train['labels']]\ndf_train['scab'] = [1 if 'scab' in x.split(' ') else 0 for x in df_train['labels']]\ndf_train['frog_eye_leaf_spot'] = [1 if 'frog_eye_leaf_spot' in x.split(' ') else 0 for x in df_train['labels']]\ndf_train['powdery_mildew'] = [1 if 'powdery_mildew' in x.split(' ') else 0 for x in df_train['labels']]\ndf_train['complex'] = [1 if 'complex' in x.split(' ') else 0 for x in df_train['labels']]","53a93366":"df_train_drop_labels = df_train.drop('labels', axis=1)\ndf_train_drop_labels.head()","2ae304da":"# prepare data\ndf_train[\"Healthy\"] = df_train[\"healthy\"].apply(bool).apply(str)\n\ntrue = df_train[\"Healthy\"][df_train.Healthy == 'True']\nfalse = df_train[\"Healthy\"][df_train.Healthy == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"Healthy\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"Unhealthy\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Healthy distribution',\n                   xaxis=dict(title='Healthy'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3d94b193":"# prepare data\ndf_train[\"Scab\"] = df_train[\"scab\"].apply(bool).apply(str)\n\ntrue = df_train[\"Scab\"][df_train.Scab == 'True']\nfalse = df_train[\"Scab\"][df_train.Scab == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"True\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"False\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Scab distribution',\n                   xaxis=dict(title='Scab'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","690e2bb6":"# prepare data\ndf_train[\"Rust\"] = df_train[\"rust\"].apply(bool).apply(str)\n\ntrue = df_train[\"Rust\"][df_train.Rust == 'True']\nfalse = df_train[\"Rust\"][df_train.Rust == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"True\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"False\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Rust distribution',\n                   xaxis=dict(title='Rust'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","fa848bb6":"# prepare data\ndf_train[\"Frogeye\"] = df_train[\"frog_eye_leaf_spot\"].apply(bool).apply(str)\n\ntrue = df_train[\"Frogeye\"][df_train.Frogeye == 'True']\nfalse = df_train[\"Frogeye\"][df_train.Frogeye == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"True\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"False\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Frogeye leaf spot distribution',\n                   xaxis=dict(title='Frogeye'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5d6f4481":"# prepare data\ndf_train[\"Powdery\"] = df_train[\"powdery_mildew\"].apply(bool).apply(str)\n\ntrue = df_train[\"Powdery\"][df_train.Powdery == 'True']\nfalse = df_train[\"Powdery\"][df_train.Powdery == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"True\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"False\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Powdery mildew distribution',\n                   xaxis=dict(title='Powdery mildew'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","42485849":"# prepare data\ndf_train[\"Complex\"] = df_train[\"complex\"].apply(bool).apply(str)\n\ntrue = df_train[\"Complex\"][df_train.Complex == 'True']\nfalse = df_train[\"Complex\"][df_train.Complex == 'False']\n\ntrace1 = go.Histogram(\n    x=true,\n    opacity=0.75,\n    name = \"True\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=false,\n    opacity=0.75,\n    name = \"False\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title='Complex distribution',\n                   xaxis=dict(title='Complex'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","0f622302":"img = cv2.imread('..\/input\/plant-pathology-2021-fgvc8\/train_images\/800113bb65efe69e.jpg', 0)\nplt.imshow(img, cmap='gray')\nplt.axis(\"off\")\nplt.show()","8743371a":"# convert image to floats and do dft saving as complex output\ndft = cv2.dft(np.float32(img), flags = cv2.DFT_COMPLEX_OUTPUT)\n\n# apply shift of origin from upper left corner to center of image\ndft_shift = np.fft.fftshift(dft)\n\nmagnitude_spectrum = np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\nfig = plt.figure(figsize=(8,8))\nplt.imshow(magnitude_spectrum, cmap='gray')\nplt.axis(\"off\")\nplt.show()","79a05622":"def frequency_visualize_by_label(df,batch_size,path,label): \n    sample_df = df_train[df_train[\"labels\"]==label].sample(9)\n    image_names = sample_df[\"image\"].values\n    labels = sample_df[\"labels\"].values\n    plt.figure(figsize=(16, 12))\n    \n    for image_ind, (image_name, label) in enumerate(zip(image_names, labels)):\n        plt.subplot(3, 3, image_ind + 1)\n        img = cv2.imread(os.path.join(path, image_name), 0)\n        # convert image to floats and do dft saving as complex output\n        dft = cv2.dft(np.float32(img), flags = cv2.DFT_COMPLEX_OUTPUT)\n\n        # apply shift of origin from upper left corner to center of image\n        dft_shift = np.fft.fftshift(dft)\n\n        magnitude_spectrum = np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n        plt.imshow(magnitude_spectrum, cmap = 'gray')\n        plt.axis(\"off\")\n    plt.show()","dfe47521":"frequency_visualize_by_label(df_train,9,train_image_path,'healthy')","58c82d00":"frequency_visualize_by_label(df_train,9,train_image_path,'rust')","842cc557":"frequency_visualize_by_label(df_train,9,train_image_path,'powdery_mildew')","11e23106":"frequency_visualize_by_label(df_train,9,train_image_path,'scab')","e41e29ce":"frequency_visualize_by_label(df_train,9,train_image_path,'frog_eye_leaf_spot')","fa1a4566":"frequency_visualize_by_label(df_train,9,train_image_path,'complex')","61731c4e":"import skimage\nimport copy\n\nimg = cv2.imread('..\/input\/plant-pathology-2021-fgvc8\/test_images\/ad8770db05586b59.jpg')\n\nscale_percent = 40 # percent of original size\nwidth = int(img.shape[1] * scale_percent \/ 100)\nheight = int(img.shape[0] * scale_percent \/ 100)\ndim = (width, height)\n \n# resize image\nresized = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)\n\nfd, hog_image = skimage.feature.hog(resized, orientations=8, pixels_per_cell=(16, 16),\n                                    cells_per_block=(1, 1), visualize=True, multichannel=True)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharex=True, sharey=True)\n\nax1.axis('off')\nax1.imshow(resized, cmap=plt.cm.gray)\nax1.set_title('Input image')\n\n# Rescale histogram for better display\nhog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 5))\n\nax2.axis('off')\nax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)\nax2.set_title('Histogram of Oriented Gradients')\nplt.show()","41e35c8d":"def hog_visualize_by_label(df,batch_size,path,label): \n    sample_df = df_train[df_train[\"labels\"]==label].sample(9)\n    image_names = sample_df[\"image\"].values\n    labels = sample_df[\"labels\"].values\n    plt.figure(figsize=(16, 12))\n    \n    for image_ind, (image_name, label) in enumerate(zip(image_names, labels)):\n        plt.subplot(3, 3, image_ind + 1)\n        img = cv2.imread(os.path.join(path, image_name))\n        \n        scale_percent = 40 # percent of original size\n        width = int(img.shape[1] * scale_percent \/ 100)\n        height = int(img.shape[0] * scale_percent \/ 100)\n        dim = (width, height)\n\n        # resize image\n        resized = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)\n        \n        fd, hog_image = skimage.feature.hog(resized, orientations=8, pixels_per_cell=(16, 16), \n                                            cells_per_block=(1, 1), visualize=True, multichannel=True)\n        \n        # Rescale histogram for better display\n        hog_image_rescaled = skimage.exposure.rescale_intensity(hog_image, in_range=(0, 10))\n        \n        plt.imshow(hog_image_rescaled, cmap=plt.cm.gray)\n        plt.axis(\"off\")\n    plt.show()","1cc16daa":"hog_visualize_by_label(df_train,9,train_image_path,'healthy')","93c1bf7c":"hog_visualize_by_label(df_train,9,train_image_path,'rust')","cca32c21":"hog_visualize_by_label(df_train,9,train_image_path,'powdery_mildew')","aa29d98b":"hog_visualize_by_label(df_train,9,train_image_path,'scab')","47942011":"hog_visualize_by_label(df_train,9,train_image_path,'frog_eye_leaf_spot')","e57a6662":"hog_visualize_by_label(df_train,9,train_image_path,'complex')","3724ebd0":"import cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/plant-pathology-2021-fgvc8\/train_images\/8002cb321f8bfcdf.jpg')\n\nscale_percent = 20 # percent of original size\nwidth = int(img.shape[1] * scale_percent \/ 100)\nheight = int(img.shape[0] * scale_percent \/ 100)\ndim = (width, height)\n \n# resize image\nresized = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)\n\ngray = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.xfeatures2d.SIFT_create()\n\nkp, des = sift.detectAndCompute(gray,None)\n\n#img=cv2.drawKeypoints(gray,kp,img)\nimg=cv2.drawKeypoints(gray,kp,img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\n#img_final = cv2.drawKeypoints(img, keypoint, None, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\nplt.figure(figsize=(8, 4))\nplt.imshow(img)\nplt.axis('off')\nplt.show","3fd284ad":"def sift_visualize_by_label(df,batch_size,path,label): \n    sample_df = df_train[df_train[\"labels\"]==label].sample(9)\n    image_names = sample_df[\"image\"].values\n    labels = sample_df[\"labels\"].values\n    plt.figure(figsize=(16, 12))\n    \n    for image_ind, (image_name, label) in enumerate(zip(image_names, labels)):\n        plt.subplot(3, 3, image_ind + 1)\n        img = cv2.imread(os.path.join(path, image_name))\n        \n        scale_percent = 40 # percent of original size\n        width = int(img.shape[1] * scale_percent \/ 100)\n        height = int(img.shape[0] * scale_percent \/ 100)\n        dim = (width, height)\n\n        # resize image\n        resized = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)\n        \n        gray = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)\n        \n        sift = cv2.xfeatures2d.SIFT_create()\n\n        kp, des = sift.detectAndCompute(gray,None)\n\n        img = cv2.drawKeypoints(gray, kp, img, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n        \n        plt.imshow(img, cmap=plt.cm.gray)\n        plt.axis(\"off\")\n    plt.show()","11dd5133":"sift_visualize_by_label(df_train,9,train_image_path,'healthy')","a72f3039":"sift_visualize_by_label(df_train,9,train_image_path,'rust')","1c969570":"sift_visualize_by_label(df_train,9,train_image_path,'powdery_mildew')","b256e94c":"sift_visualize_by_label(df_train,9,train_image_path,'scab')","477889f2":"sift_visualize_by_label(df_train,9,train_image_path,'frog_eye_leaf_spot')","a75c1a6d":"sift_visualize_by_label(df_train,9,train_image_path,'complex')","f377c5e0":"### Blue channel values","982dcaad":"## Visualize with color histogram","9a3b01b5":"### Histogram of Gradient (HoG)","209cbe13":"### Batch label visualize","81e48d1c":"### Scale-Invariant Feature Transform (SIFT)","f458964a":"#### Visualize by label","90b22528":"### Visualise healthy leaves","c453bfdb":"#### Random an image","00f1b2e2":"### All channel values","e5b99573":"# 2. About Dataset","e0e3d2d1":"### Visualise complex leaves","7920dc11":"## Visualize targets","122ee780":"> \ud83d\udccc**Note**:\n* `train.csv` contains information about the image files available in `train_images`. It contains 18632 rows(images) with 2 columns i.e (image , labels )\n* `test.csv` The test set images. This competition has a hidden test set: only three images are provided here as samples while the remaining 5,000 images will be available to your notebook once it is submitted.","b9f21914":"#### Random an image","f0df46f6":"# 1. Problem Statement \uff1f\n\nApples are one of the most important temperate fruit crops in the world. Foliar (leaf) diseases pose a major threat to the overall productivity and quality of apple orchards. The current process for disease diagnosis in apple orchards is based on manual scouting by humans, which is time-consuming and expensive.\n\nThe main objective of the competition is to develop machine learning-based models to accurately classify a given leaf image from the test dataset to a particular disease category, and to identify an individual disease from multiple disease symptoms on a single leaf image.\n","5f9097a5":"### Visualise powdery_mildew leaves","eda79c09":"## Visualize frequency map","5fcdc5c9":"## Batch visualisation with labels","e2cfe3cc":"### Visualise rust leaves ","47405cb1":"## Batch Visualisation of Images ","fa2d4887":"## Local Features","47106e27":"> \ud83d\udccc**Note**:\n* We have multiple labels for eg. label can be **scab** or **scab and rust**\n* Main labels are - **scab** , **healthy** , **frog_eye_leaf_spot** , **rust** , **complex** and **powdery_mildew**","c13542bf":"### All channels together","b6a79fac":"### Visualise frog_eye_leaf_spot  leaves","55385a8f":"### Red channel values","14b232ac":"### Green channel values","05355966":"#### HoG by label","6931d107":"### Visualise scab leaves ","f2101abd":"### Random one image","85b02589":"<h1><center> \ud83c\udf4e Classify foliar diseases in apple trees<\/center><\/h1>","cb4747b2":"## libraries "}}