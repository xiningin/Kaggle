{"cell_type":{"c9df1e33":"code","78dfff46":"code","0b802aa3":"code","4c4b4cc4":"code","cdb5266b":"code","80d5c023":"code","cc7f24e5":"code","f9b19311":"code","c61088bb":"code","7e9a8d0c":"code","de796407":"code","5cc82070":"code","93267874":"code","5fa73086":"code","321c3591":"code","0f117e69":"code","6b188878":"code","79260349":"code","e1f8a019":"code","6054d3c0":"code","0a72e909":"code","bcd5d9b7":"code","83dfa50d":"code","9e2034a6":"code","e0a4677a":"code","46515692":"code","ab49b880":"code","1a96f526":"markdown","02c9442e":"markdown","1f410956":"markdown","701e4321":"markdown","6984fab9":"markdown","fa24ab5b":"markdown","25eca747":"markdown","b345a41c":"markdown","ff684580":"markdown","88da224e":"markdown","ae6900c9":"markdown","595e421d":"markdown","dbcd0dc1":"markdown","f74a21ca":"markdown","0f6e4eb2":"markdown","f370efae":"markdown","ca286fcc":"markdown","dbe53f31":"markdown","51f35091":"markdown","57e862de":"markdown","b37fbf2b":"markdown","cdfdf585":"markdown","ca140dce":"markdown","a239006a":"markdown","257ac431":"markdown","cb5b2fd8":"markdown","45f54f4b":"markdown","31a13c6c":"markdown","9f1de7af":"markdown","5bc64221":"markdown","d5dabb6b":"markdown","96fe4a64":"markdown","a4578f93":"markdown","b1f40743":"markdown","affc13d7":"markdown","9fe5be6d":"markdown"},"source":{"c9df1e33":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\n\nimport warnings\n\nwarnings.simplefilter(\"ignore\")","78dfff46":"data = pd.read_csv(\"..\/input\/19560-indian-takeaway-orders\/restaurant-1-orders.csv\")\ndata","0b802aa3":"data.shape","4c4b4cc4":"data.info()","cdb5266b":"data.describe()","80d5c023":"data.isnull().sum()","cc7f24e5":"data[\"Order Date\"] = pd.to_datetime(data[\"Order Date\"])","f9b19311":"data[\"Total Price\"] = data[\"Product Price\"] * data[\"Quantity\"]\ndata","c61088bb":"grouper = pd.Grouper(key=\"Order Date\", freq=\"Y\")\ndata.groupby(grouper).sum().reset_index()","7e9a8d0c":"data = data[data[\"Order Date\"].dt.year != 2015]","de796407":"data = data.sort_values(\"Order Number\")","5cc82070":"order_price = data.groupby(\"Order Number\")[[\"Total Price\",\n                                            \"Quantity\"]].sum().reset_index()\ntemp_data = data.drop_duplicates(subset=[\"Order Number\"],\n                                 keep=\"first\").reset_index()\norder_price[\"Order Date\"] = temp_data[\"Order Date\"]\norder_price","93267874":"final_ = [order_price[\"Total Price\"].min()] + list(np.linspace(\n    10, 100, 10)) + [order_price[\"Total Price\"].max()]\npd.cut(order_price[\"Total Price\"], bins=final_).value_counts().sort_index()","5fa73086":"order_price[\"Total Price\"].plot(kind=\"density\", color=\"teal\")\nplt.xlabel(\"Total Price\")\nplt.xlim(-10, 85)\nplt.show()","321c3591":"print(\"\u6bcf\u4e2a\u8ba2\u5355\u7684\u5e73\u5747\u4ef7\u683c\u4e3a\uff1a\", order_price[\"Total Price\"].mean())","0f117e69":"grouper = pd.Grouper(key=\"Order Date\", freq=\"Y\")\nYear_Total_Price = data.groupby(grouper).sum().reset_index()\nplt.figure(figsize=(10, 6))\nplt.plot(Year_Total_Price[\"Order Date\"],\n         Year_Total_Price[\"Total Price\"],\n         label=\"Year_TotalPrice_Curve\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Total Price\")\nplt.legend()\nplt.show()\n","6b188878":"condition = data[\"Item Name\"].value_counts()[:5].index\ndf = data[data[\"Item Name\"].apply(lambda x: x in condition)]\ndf[\"Order Date\"] = df[\"Order Date\"].dt.year\nsns.countplot(data=df, x=\"Item Name\", hue=\"Order Date\")\nplt.show()","79260349":"def show_data_by_condition(df: pd.DataFrame, title: str, colname: str=\"Total Price\", method: str=\"sum\"):\n    \"\"\"[summary]\n\n    Args:\n        df ([type]): [dataframe]\n        title (str): [the title of graph]\n        colname (str, optional): [the column name]. Defaults to \"Total Price\".\n        method (str, optional): [the function]. Defaults to \"sum\".\n    \"\"\"\n    def transform(df: pd.DataFrame):\n        return df.groupby(\"Order Date\")[colname].agg(method)\n\n    res = df.groupby(\"Item Name\").apply(transform)\n    width = 0.1\n    plt.figure(figsize=(14, 7))\n    for index, column_name in enumerate(res):\n        plt.bar(np.arange((len(res.index))) + index * width,\n                res[column_name],\n                width=width,\n                label=str(column_name) + \" \" + colname + \"  change\")\n    plt.xticks(\n        np.arange((len(res.index))) + (width * (len(res.columns) - 1)) \/ 2,\n        res.index)\n    plt.title(title)\n    plt.xlabel(\"Year\")\n    plt.ylabel(title)\n    plt.legend()\n    plt.show()\n\n\n# \u5bf9\u6bd4Total Price\u7684\u53d8\u5316\nshow_data_by_condition(df, \"Total Price\")","e1f8a019":"# \u603b\u5356\u51fa\u53bb\u7684\u4ea7\u54c1\u603b\u6570\u7684\u53d8\u5316\nshow_data_by_condition(df,\n                       \"Total Products\",\n                       colname=\"Total products\",\n                       method=\"sum\")","6054d3c0":"counts = order_price[\"Order Date\"].dt.hour.value_counts()[:5]\nplt.bar(counts.index, counts)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Counts\")\nplt.show()","0a72e909":"order_price[\"Order Date\"].dt.hour.mean()  # \u4e0b\u5355\u65f6\u95f4\u7684\u5e73\u5747\u503c","bcd5d9b7":"plt.pie(x=counts, labels=counts.index, shadow=True)\nplt.show()","83dfa50d":"temp_order_data = order_price.copy()\ntemp_order_data[\"Order Date\"] = order_price[\"Order Date\"].dt.hour\nplt.scatter(temp_order_data[\"Order Date\"][:50], temp_order_data[\"Total Price\"][:50],s= temp_order_data[\"Total Price\"][:50]*50, alpha=0.5, c=\"red\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Total Price\")\nplt.show()","9e2034a6":"Ttpro = df.groupby(\"Item Name\")[\"Total products\"].sum()\nTtcout = df[\"Item Name\"].value_counts()\nplt.barh(y=Ttpro.index, width=Ttpro)\nplt.show()","e0a4677a":"sns.regplot(data=order_price, x=\"Quantity\", y=\"Total Price\")\nplt.show()","46515692":"from sklearn.model_selection import train_test_split, learning_curve\nfrom sklearn.linear_model import LinearRegression\n\nX = order_price[\"Quantity\"].tolist()\nX = np.array(X).reshape(-1, 1)\ny = order_price[\"Total Price\"]\nX_train, X_test, y_train, y_test = train_test_split(X,\n                                                    y,\n                                                    test_size=0.3,\n                                                    random_state=0)\nmodel = LinearRegression()\nmodel = model.fit(X_train, y_train)\nmodel.score(X_test, y_test)","ab49b880":"train_sizes, train_loss, test_loss = learning_curve(\n    LinearRegression(), X, y, train_sizes=[0.1, 0.25, 0.5, 0.75, 1])\ntrain_mean = np.mean(train_loss, axis=1)\ntest_mean = np.mean(test_loss, axis=1)\nplt.plot(train_sizes, train_mean, label=\"Training\")\nplt.plot(train_sizes, test_mean, label=\"Cross-validation\")\nplt.xlabel(\"Training sizes\")\nplt.ylabel(\"score\")\nplt.legend()\nplt.show()","1a96f526":"## \u770b\u770b\u4ea7\u54c1\u6570\u91cf\u548c\u603b\u4ef7\u683c\u6709\u65e0\u5173\u7cfb","02c9442e":"## \u603b\u7684\u4ef7\u683c\u5206\u5e03","1f410956":"## \u4e0b\u5355\u7684\u603b\u4ef7\u548c\u65f6\u95f4\u6709\u6ca1\u6709\u5173\u7cfb\uff1f","701e4321":"# \u7b80\u5355\u7684\u9884\u6d4b","6984fab9":"### \u9009\u53d6\u9700\u8981\u5206\u6790\u7684\u6570\u636e","fa24ab5b":"## \u987e\u5ba2\u4e00\u822c\u90fd\u5728\u4ec0\u4e48\u65f6\u5019\u4e0b\u5355\uff1f","25eca747":"### \u5c06\u65e5\u671f\u8f6c\u5316\u4e3adatetime64\u7c7b\u578b","b345a41c":"## \u5bf9\u6bd4\u9500\u91cf\u524d\u4e94\u7684\u4ea7\u54c1\u5728\u4e0d\u540c\u5e74\u7684\u9500\u91cf","ff684580":"\u679c\u7136\u5356\u7684\u8d8a\u591a\u603b\u4ea7\u91cf\u8d8a\u591a","88da224e":"## \u6570\u636e\u5904\u7406","ae6900c9":"\u53ef\u89c1\u987e\u5ba2\u4e00\u822c\u90fd\u662f\u5728\u4e0b\u5348\u516d\u70b9\u5de6\u53f3\u4e0b\u5355\uff0c\u8bf4\u660e\u8fd9\u5bb6\u996d\u5e97\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u65e9\u9910\u5e97\u3002","595e421d":"## \u8ba1\u7b97\u6bcf\u4e2a\u8ba2\u5355\u7684\u5e73\u5747\u4ef7\u683c","dbcd0dc1":"## \u7ebf\u6027\u56de\u5f52\u6a21\u578b\u9884\u6d4b","f74a21ca":"## \u5bfc\u5165\u5e93","0f6e4eb2":"\u89c2\u5bdf\u53d1\u73b02015\u5e74\u7684\u6570\u636e\u5e76\u4e0d\u5b8c\u6574\uff0c\u56e0\u6b64\u53bb\u9664\u4e0d\u4f5c\u4e3a\u5206\u6790\u7684\u5bf9\u8c61\u3002","f370efae":"\u7531\u4e8e\u76f8\u540c\u7684\u8ba2\u5355\u5e76\u4e0d\u5728\u540c\u4e00\u884c\uff0c\u56e0\u6b64\u9700\u8981\u5408\u5e76\u8fd9\u4e9b\u8ba2\u5355\uff0c\u5e76\u8ba1\u7b97\u51fa\u603b\u9500\u552e\u989d","ca286fcc":"\u7528\u997c\u56fe\u53ef\u4ee5\u770b\u7684\u66f4\u52a0\u76f4\u89c2","dbe53f31":"### \u5408\u5e76\u8ba2\u5355","51f35091":"## \u81ea\u5b9a\u4e49\u53ef\u89c6\u5316","57e862de":"\u53ef\u89c1\u8ba2\u5355\u603b\u4ef7\u4e0e\u4e0b\u5355\u65f6\u95f4\u6ca1\u6709\u592a\u5927\u5173\u7cfb\uff0c\u57fa\u672c\u4e0a\u5403\u996d\u82b1\u7684\u94b1\u90fd\u662f\u5dee\u4e0d\u591a\u7684","b37fbf2b":"\u53ef\u4ee5\u770b\u5230\u4ef7\u683c\u57fa\u672c\u4e0a\u90fd\u572820-40\u4e4b\u95f4\uff0c\u753b\u56fe\u66f4\u80fd\u76f4\u89c2\u7684\u611f\u53d7\u5230\u3002","cdfdf585":"\u6570\u636e\u6765\u81eakaggle [https:\/\/www.kaggle.com\/henslersoftware\/19560-indian-takeaway-orders](https:\/\/www.kaggle.com\/henslersoftware\/19560-indian-takeaway-orders)","ca140dce":"# \u6570\u636e\u5206\u6790","a239006a":"### \u8ba1\u7b97\u603b\u4ef7\u683c","257ac431":"## \u7ed8\u5236\u5b66\u4e60\u66f2\u7ebf","cb5b2fd8":"\u53ef\u89c1\u51c6\u786e\u5ea6\u67090.6\uff0c\u8fd8\u662f\u4e0d\u9519\u7684","45f54f4b":"\u53ef\u4ee5\u770b\u5230\u4ea7\u54c1\u4ef7\u683c\u4e0e\u603b\u4ef7\u683c\u5448\u73b0\u7ebf\u6027\u5173\u7cfb\uff0c\u7b49\u4f1a\u53ef\u4ee5\u505a\u7b80\u5355\u7684\u9884\u6d4b","31a13c6c":"## \u8bfb\u53d6\u6570\u636e\u5e76\u4f5c\u7b80\u5355\u7684\u4e86\u89e3","9f1de7af":"\u53ef\u4ee5\u770b\u51fa\u9500\u91cf\u57fa\u672c\u4e0a\u57282018\u5e74\u8fbe\u5230\u4e86\u5dc5\u5cf0\u3002Pilau Rice\u7684\u9500\u91cf\u4e00\u76f4\u6700\u9ad8\uff0c\u8fd9\u4e5f\u770b\u51fa\u6765\u4e86\u5403\u996d\u4e3b\u98df\u662f\u5fc5\u9700\u54c1","5bc64221":"\u53ef\u89c1\u9500\u552e\u989d\u57282016-2019\u5e74\u90fd\u662f\u7a33\u6b65\u589e\u957f\uff0c\u4f46\u57282019\u5e74\u672b\u4e0b\u964d\u3002","d5dabb6b":"# \u6570\u636e\u5bfc\u5165\u4ee5\u53ca\u5904\u7406","96fe4a64":"## \u524d\u4e94\u6570\u91cf\u7684\u4ea7\u54c1\u7684\u603b\u4ea7\u91cf","a4578f93":"\u603b\u4ef7\u683c\u4e3a$ Product Price * Quantity $","b1f40743":"\u53ef\u80fd\u662f\u6570\u636e\u91cf\u592a\u5c0f\u7684\u539f\u56e0\uff0c\u6548\u679c\u4e0d\u592a\u7406\u60f3","affc13d7":"\u53d1\u73b0\u6ca1\u6709\u7f3a\u5931\u503c\uff0c\u8bf4\u660ekaggle\u4e0a\u9762\u7684\u6570\u636e\u96c6\u8d28\u91cf\u8fd8\u662f\u4e0d\u9519\u7684","9fe5be6d":"## \u5e74\u5ea6\u9500\u552e\u989d\u66f2\u7ebf"}}