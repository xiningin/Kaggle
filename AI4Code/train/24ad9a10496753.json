{"cell_type":{"15300993":"code","e79f7364":"code","66c74277":"code","22c67cfe":"code","458c4abf":"code","a9ba1687":"code","89a8c159":"code","0b4f2a62":"code","e42d7d3b":"code","ed579f26":"code","30297fb6":"markdown","eb595de4":"markdown","79014168":"markdown","fc6fa94f":"markdown","e9302d93":"markdown","893bcc37":"markdown","127a642c":"markdown"},"source":{"15300993":"def reset():\n    global str1, str2, str3, WILDCARD_POS, wildcards, appends\n    str1=\"126374521637452613745263174526371452637415263741254673126475312657431256473126547321654732615473265147326541732654713265471236547127563412567341273564127354612573462157346251734625713462573146257341625734125643721564372516437256143725641372564317256431275643217564327156432751643275614327564132756412346571243657214365724136572431657243615724365172436512743652174365271436527413652743165274361527436124753612437651273465217346527134652731465273416527346152734612574362157436251743625714362574136257431625743126534712635471236574126375412736542173654271365427316542736154273651427365124367512634752163475261347526314752634175263471526347125364721536472513647253164725361472536417253641275436127534612753641257364215736425173642571364257316425736142573612457631247365126437521643752614375264137526431752643715264371254637215463725146372541637254613725463172546312754632175463271546327514632754163275461327546123475612457361253476125346712543671253674126537412537641276435127634512674531257463125634721563472516347256134725631472563417256341257643125763412563741267534216753426175342671534267513426753142675312746351235467123547612356471235674123574612357641236457123674512367541237465126743521674352617435267143526741352674315267431254763127456321745632714563274156327451632745613274561237456123476512743561253746215374625137462531746253714625374162537412657342165734261573426517342657134265731426573241657324615732465173246571324657124657321465732614573264157326451732645713264571264573216457326127345612547362154736251473625417362547136254731625473126453712465371245673124537612437562143756241375624317562437156243751624375126435712634571246357214635724163572461357246315724635172463512647352164735261473526417352647135264731526473126543712475631247635124563712453672145367241536724513672453167245361724536124735621473562417356247135624731562473516247351246735124675312435762143576241357624315762435176243571624357125437621543762514376254137625431762543716254371256743127654321765432716543276154327651432765413276541273645126734512673541263574216357426135742631574263517426357142635712364752136475231647523614752364175236471523647123467512345761234567124356721435672413567243156724351672435617243561274536127653412675431276354217635427163542761354276315427635142763512476531274653217465327146532741653274615327465132746512375641237546123764512376542137654231765423716542376154237651423765124637512764532176453271645327614532764153276451327645\"\n    strn    strn    WILDCARD_POS = 0\n\n    # Wildcards[i][j] is a permutation (tuple with elements from 1 to 7) that will have a wildcard on the i-th string (j = 0 or 1)\n    wild1 = ((1, 2, 4, 6, 5, 7, 3), (1, 2, 6, 4, 5, 7, 3))\n    wild2 = ((1, 2, 7, 5, 3, 4, 6), (1, 2, 6, 7, 3, 4, 5))\n    wild3 = ((1, 2, 3, 5, 6, 4, 7), (1, 2, 7, 3, 5, 6, 4))\n    wildcards = [wild1,wild2,wild3]\n    \n    # This allows to create larger blocks adjacent to wildcards.\n    # appends[string][wildcard][0] is a list that gets appended before the wildcards\n    # appends[string][wildcard][1] is a list that gets appended after the wildcards\n    #\n    # For example, if wildcards[0][0] is (1<->8,2,3,4,5,6,7), and wildcards[0][0][0] is [1,2],\n    # and wildcards[0][0][1] is [3,4], then the block (1,2,1<->8,2,3,4,5,6,7,3,4) is created and\n    # replaces all the permutations included within the block.\n    appends = [[[[],[]],[[],[]]] ,[[[1],[]],[[1],[]]],[[[1],[]],[[1],[]]]]\n    \nreset()\n\ndef switch(a,b):\n    global str1, str2, str3, wildcards, appends\n    appends[a],appends[b] = appends[b],appends[a]\n    wildcards[a],wildcards[b] = wildcards[b],wildcards[a]\n    strings = [str1, str2, str3]\n    strings[a],strings[b] = strings[b],strings[a]\n    str1, str2, str3 = strings","e79f7364":"TIME_LIMIT = 30 # Total runtime of the notebook is TIME_LIMIT * 3 seconds","66c74277":"import itertools\nimport numpy as np\nimport pandas as pd\nimport random\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz\n!tar xvfz LKH-3.0.7.tgz\n!cd LKH-3.0.7; make clean; make; cp LKH ..","22c67cfe":"def perm_dist_no_wildcards(p, q, wildcard=False):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n        \n    if p==q:\n        return 0\n    \n    # Nope\n    if 8 in q and 8 in p:\n        # Dist between 1238567 and 1278543 or reverse\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(1,8):\n                if p[j:]==q2[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(1,8):\n                if p2[j:]==q[:-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\n\ndef perm_dist(p, q, string_number, use_wildcards=True):\n    \"\"\"\n    Computes overlapping distance between two lists of integer\n    between 1 and 7. 8 is wildcard\n    \"\"\"\n    p = list(p)\n    q = list(q)\n    \n    \n    if p==q:\n        return 0\n    \n    if use_wildcards:\n        # Apply wildcards\n        for j in range(2):\n            if p == list(appends[string_number][j][0])+list(wildcards[string_number][j])+list(appends[string_number][j][1]):\n                p[len(appends[string_number][j][0])+WILDCARD_POS] = 8\n            if q == list(appends[string_number][j][0])+list(wildcards[string_number][j])+list(appends[string_number][j][1]):\n                q[len(appends[string_number][j][0])+WILDCARD_POS] = 8 \n    \n    # Nope\n    if 8 in q and 8 in p:\n        return 7\n    \n    if 8 in q:\n        min_dist = 8\n        for i in range(1,8):\n            q2 = list(q)\n            q2[q2.index(8)] = i\n            for j in range(0,8):\n                if p[len(p)-7+j:]==q2[:7-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist + len(q)-7\n                \n    if 8 in p:\n        min_dist = 8\n        for i in range(1,8):\n            p2 = list(p)\n            p2[p2.index(8)] = i\n            for j in range(0,8):\n                if p2[len(p)-7+j:]==q[:7-j]:\n                    if min_dist > j:\n                        min_dist = j\n                        break\n        return min_dist + len(q)-7\n            \n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef perms_to_string(perms, string_number, use_wildcards=True):\n    \"\"\"\n    Given list of permutations, compacts them to string\n    via removing overlaps\n    \"\"\"\n    perms = list(perms)\n    s = [*perms[0]]\n    for p, q in zip(perms, perms[1:]):\n        d = perm_dist(p, q, string_number, use_wildcards)\n        s.extend(q[-d:])\n        if use_wildcards:\n            if list(q) == list(appends[string_number][0][0])+list(wildcards[string_number][0])+list(appends[string_number][0][1]):\n                s[-(7-WILDCARD_POS+len(appends[string_number][0][1]))] = 8\n            elif list(q) == list(appends[string_number][1][0])+list(wildcards[string_number][1])+list(appends[string_number][1][1]):\n                s[-(7-WILDCARD_POS+len(appends[string_number][1][1]))] = 8\n    return s\n\ndef distances_matrix(perms, string_number, depot=False, use_wildcards=True):\n    \"\"\"\n    Computes distance matrix for TSP\n    \"\"\"\n    if depot:\n        m = np.zeros((len(perms)+1, len(perms)+1), dtype='int8')\n    else:\n        m = np.zeros((len(perms), len(perms)), dtype='int8')\n    for i, p in enumerate(perms):\n        for j, q in enumerate(perms):\n            if depot:\n                m[i+1, j+1] = perm_dist(p,q, string_number, use_wildcards) \n            else:\n                m[i,j] = perm_dist(p,q, string_number, use_wildcards)\n    if depot:\n        m[0,:]=0\n        m[:,0]=0\n    return m\n\ndef distances_matrix_ctsp(perms, depot=False):\n    \"\"\"\n    Computes distance matrix for TSP\n    \"\"\"\n    if depot:\n        m = np.zeros((len(perms)+1, len(perms)+1), dtype='int8')\n    else:\n        m = np.zeros((len(perms), len(perms)), dtype='int8')\n    for i, p in enumerate(perms):\n        for j, q in enumerate(perms):\n            if 0 <= i < 120:\n                string_number = 0\n            elif 120 <= i < 240:\n                string_number = 1\n            else:\n                if 0 <= j < 120:\n                    string_number = 0\n                elif 120 <= j < 240:\n                    string_number = 1\n                else:\n                    string_number = 2\n            if depot:\n                m[i+1, j+1] = perm_dist(p[-7:], q[:7], string_number) + len(q) - 7\n            else:\n                m[i,j] = perm_dist(p[-7:], q[:7], string_number) + len(q) - 7\n    if depot:\n        m[0,:]=0\n        m[:,0]=0\n    return m\n\ndef sym_distances_matrix(matrix, constant=True):\n    \"\"\"\n    Given an N x N distance matrix for ATSP, obtains a 2N x 2N matrix for\n    SymTSP, where the extra N nodes are \"virtual\" and should be ommitted\n    from the resulting circuit.\n    paper: http:\/\/home.eng.iastate.edu\/~rkumar\/PUBS\/atsp.pdf\n    \"\"\"\n    if constant:\n        # Obtain D prime\n        d_max = np.max(matrix)\n        np.fill_diagonal(matrix, 100)\n        d_min = np.min(matrix)\n        np.fill_diagonal(matrix, 0)\n        if d_max \/ d_min < 4\/3:\n            Dprime = matrix\n        else:\n            Dprime = matrix + 3*d_max - 4*d_min + 1\n            np.fill_diagonal(Dprime, 0)\n    else:\n        Dprime = matrix\n    \n    # Obtain D bar\n    Dbar = np.empty((Dprime.shape[0]*2, Dprime.shape[1]*2))\n    Dbar[:Dprime.shape[0], :Dprime.shape[0]] = 100\n    Dbar[Dprime.shape[0]:, :Dprime.shape[0]] = Dprime\n    Dbar[:Dprime.shape[0], Dprime.shape[0]:] = np.transpose(Dprime)\n    Dbar[Dprime.shape[0]:, Dprime.shape[0]:] = 100\n    \n    # Add depot\n    Dbar2 = np.empty((Dbar.shape[0]+1, Dbar.shape[1]+1))\n    Dbar2[1:,1:] = Dbar\n    Dbar2[0, :] = 0\n    Dbar2[:, 0] = 0\n    Dbar = Dbar2\n    \n    np.round(Dbar, 0)\n    Dbar = Dbar.astype(int)\n    return Dbar\n\ndef find_remaining(l):\n    \"\"\"\n    Given 6 different numbers from 1 to 7, returns\n    the remaining one.\n    \"\"\"\n    s = {1,2,3,4,5,6,7}\n    return list(s - set(l))[0]\n\ndef reduce_perms(perms, factor=2, exclude_mandatory=True, seed=397):\n    \"\"\"\n    Given a list of permutations and a reduction factor, \n    returns a list of \"glued permutations\" with smaller size.\n    \"\"\"\n    seen = set()\n    result = set()\n    perms = list(perms)\n    random.Random(seed).shuffle(perms)\n    for perm in perms:\n        if (exclude_mandatory and perm[1]==1 and perm[2]==2):\n            seen.add(perm)\n            result.add(perm)\n        if perm in seen:\n            continue\n        seen.add(perm)\n        l = list(perm)\n        for _ in range(factor-1):\n            remaining = find_remaining(l[-6:])\n            l.append(remaining)\n            if(tuple(l[-7:]) in seen) or (exclude_mandatory and l[-7]==1 and l[-6]==2):\n                l.pop()\n                break\n            seen.add(tuple(l[1:]))\n        l = tuple(l)\n        result.add(l)\n    return result    \n\ndef write_params_file(name=\"mtsp\"):\n    \"\"\"\n    Sets solver parameters. If multi == True, attempts a multi-solve\n    \"\"\"\n    with open(f'{name}.par', 'w') as f:\n        print(f'PROBLEM_FILE = {name}.mtsp', file=f)\n        print(f'TOUR_FILE = {name}.txt', file=f)\n        print(f'INITIAL_TOUR_FILE = {name}.txt', file=f)\n        #print('INITIAL_TOUR_ALGORITHM = MTSP', file=f)\n        print('PATCHING_C = 3', file=f)\n        print('PATCHING_A = 2', file=f)\n        print('SPECIAL',file=f)\n        print('GAIN23 = YES', file=f)\n        print('MAX_TRIALS=10000000', file=f)\n        print('SEED = 69', file=f)\n        print(f'TIME_LIMIT = {TIME_LIMIT}', file=f) #seconds\n        print('TRACE_LEVEL = 1', file=f)\n\n\ndef write_problem_file(distances,name=\"mtsp\"):\n    \"\"\"\n    Writes problem.\n    \"\"\"\n    with open(f'{name}.mtsp', 'w') as f:\n        print('TYPE: ATSP', file=f)\n        print(f'DIMENSION: {len(distances)}', file=f)\n        print('EDGE_WEIGHT_TYPE: EXPLICIT', file=f)\n        print('EDGE_WEIGHT_FORMAT: FULL_MATRIX\\n', file=f)\n        print('EDGE_WEIGHT_SECTION', file=f)\n        for row in distances:\n            print(' '.join(str(_) for _ in row), file=f)\n            \ndef write_initial_tour_file(perms):\n    \"\"\"\n    Writes starting tour\n    \"\"\"\n    with open('initial_tour.txt', 'w') as f:\n        print('TOUR_SECTION', file=f)\n        print(' '.join(str(_) for _ in range(1, len(perms)+1)), -1, file=f)\n\ndef read_output_tour(perms,name=\"best_tour\"):\n    \"\"\"\n    Reads resulting tour\n    \"\"\"\n    perms = list(perms)\n    with open(f'{name}.txt') as f:\n        lines = f.readlines()\n    tour = lines[lines.index('TOUR_SECTION\\n')+2:-2]\n    #print([(perms[int(tour[i]) - 2],perm_dist(perms[int(tour[i]) - 2],perms[int(tour[(i+1)%len(tour)]) - 2],string_number=0)) for i in range(len(tour))])\n    return [perms[int(_) - 2] for _ in tour]\n\ndef read_output_tour_mtsp(perms, filename):\n    \"\"\"\n    Reads resulting tour, returning 3-tuple of tour indices\n    \"\"\"\n    perms = list(perms)\n    tour = [[],[],[]]\n    dimension = 1 + len(perms)\n    with open(filename) as f:\n        lines = f.readlines()\n    i=-1\n    for node_tag in lines[lines.index('TOUR_SECTION\\n')+1:-2]:\n        tag = int(node_tag)\n        if tag == 1 or tag == dimension+1 or tag == dimension+2:\n            i+=1\n        else:\n            tour[i].append(perms[tag-2]) # Sub extra to ignore depot\n    return tuple(tour)\n\ndef read_output_tour_ctsp(perms, filename, flip=False):\n    \"\"\"\n    Reads resulting tour, returning 3-tuple of tour indices\n    \"\"\"\n    perms = list(perms)\n    tour = [[],[],[]]\n    dimension = 1 + 2*len(perms)\n    prev = None\n    with open(filename) as f:\n        lines = f.readlines()\n    i=-1\n    L = lines[lines.index('TOUR_SECTION\\n')+1:-2]\n    for node_tag in L:\n        tag = int(node_tag)\n        if tag == 1 or tag == dimension+1 or tag == dimension+2:\n            i+=1\n        else:\n            if tag >=2 and (perms[(tag-2)%len(perms)] not in tour[i]):\n                tour[i].append(perms[(tag-2)%len(perms)]) # Sub extra to ignore depot\n        if tag > 1+len(perms) and tag != prev+len(perms):\n            continue\n            print(f\"Careful with {tag}\")\n        elif tag <= 1+len(perms):\n            prev = tag\n    return tuple(tour)\n    \ndef solve_atsp(perms, name=\"santa.par\"):\n    \n    # Run LKH-3 to solve ATSP instance\n    !touch lkh.log\n    !.\/LKH $name >> lkh.log\n    #tour = read_output_tour(perms)\n    #return perms_to_string(tour)\ndef check_validity(str1, str2, str3):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\n\n    strings_perms = [perms_in_string(str1), perms_in_string(str2), perms_in_string(str3)]\n    for i, s in enumerate(strings_perms):\n        if mandatory_perms - s:\n            print(f'String #{i} is missing {mandatory_perms - s}.')\n            return False\n    if all_perms - set.union(*strings_perms):\n        print(f\"missing:{len(all_perms - set.union(*strings_perms))}\")\n        print(f'Strings are missing {all_perms - set.union(*strings_perms)}.')\n        return False\n    return True\n\ndef perms_in_string_list(string_as_list):\n    perms = []\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.append(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.append(tuple(perm2))\n                \n    return perms\n\n\ndef perms_in_string(string_as_list,index=None):\n    perms = set()\n    for i in range(len(string_as_list)):\n        perm = tuple(string_as_list[i:i+7])\n        if len(set(perm))==7:\n            if 8 not in perm:\n                perms.add(perm)\n            else:\n                if perm.count(8) > 1:\n                    continue\n                for i in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = i\n                    if len(set(perm2))==7:\n                        perms.add(tuple(perm2))\n                        \n    # Appends            \n    if index is not None:\n        for i in range(2):\n            if wildcards[index][i] in perms:\n                extended = list(appends[index][i][0]) + list(wildcards[index][i]) + list(appends[index][i][1])\n                extended[len(appends[index][i][0]) + WILDCARD_POS] = 8\n                perm_remove = perms_in_string(extended)\n                was_there = [perm in perms for perm in perm_remove]\n                perms = perms - perm_remove\n                extended = list(appends[index][i][0]) + list(wildcards[index][i]) + list(appends[index][i][1])\n                perms.add(tuple(extended))\n                print(\"Correctly added: \", tuple(extended))\n                print(\"This removed: \", perm_remove, was_there)\n                \n    return perms\ndef concat_perms(perms):\n    perms_flat = []\n    for e in perms:\n        for i in e:\n            perms_flat.append(i)\n    return perms_flat","458c4abf":"perm_dist((1,7, 2, 6, 4, 3, 5),(1,1, 2, 6, 4, 3, 5, 7,1), string_number=0)","a9ba1687":"def string_to_tour(string, perms, name=\"tour\", index=None):\n    seen = set()\n    perms = list(perms)\n    dimension = len(perms)+1\n    lines = [f\"DIMENSION: {dimension}\\nTYPE: TOUR\\nTOUR_SECTION\\n1\\n\"]\n    for j in range(len(string)-6):\n        perm = tuple(string[j:j+7])\n        if perm.count(8) == 1:\n            if index is not None and perm.index(8)==WILDCARD_POS:\n                for k in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = k\n                    if tuple(perm2) in wildcards[index]:\n                        perm3 = tuple(perm2)\n                        break\n                for i in range(2):\n                    if perm3 == wildcards[index][i]:\n                        perm = tuple(list(appends[index][i][0])+list(perm3)+list(appends[index][i][1]))\n                        print(\"Wrote to tour:\",perm)\n                        break\n            else:\n                for k in range(1,8):\n                    perm2 = list(perm)\n                    perm2[perm2.index(8)] = k\n                    if tuple(perm2) in perms:\n                        perm = tuple(perm2)\n                        break\n        else:\n            for i in range(2):\n                if perm == wildcards[index][i]:\n                    perm = tuple(list(appends[index][i][0])+list(perm)+list(appends[index][i][1]))\n                    print(\"Wrote to tour:\",perm)\n                    break\n        if perm not in seen and perm in perms:\n            seen.add(perm)\n            lines.append(f\"{perms.index(perm)+2}\\n\")\n    lines.append(\"-1\\nEOF\")\n    with open(f\"{name}.txt\", \"w\") as f:\n        f.writelines(lines)","89a8c159":"all_perms = set(itertools.permutations(range(1, 8), 7))\nmandatory_perms = set((1, 2) +  _ for _ in itertools.permutations(range(3, 8), 5))\nnon_mandatory_perms = all_perms - mandatory_perms\nctsp_perms = list(mandatory_perms) + list(mandatory_perms) + list(mandatory_perms) + list(non_mandatory_perms)","0b4f2a62":"reset()\n\n# Convert\nstr1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]\n\n\nprint(f\"OPTIMIZING STR1\")\nperms1 = perms_in_string(str1, index=0)\nwrite_params_file(\"str1\")\nwrite_problem_file(distances_matrix(perms1, 0, depot=True), \"str1\")\nstring_to_tour(str1,perms1,name=\"str1\",index=0)\nsolve_atsp(perms1, name=\"str1.par\")\ntour1=read_output_tour(perms1,name=\"str1\")\nstr1 = perms_to_string(tour1,0)\nprint(f\"STR1 CHANGED TO {len(str1)}\")\n\n# Optimize str2\nperms1 = perms_in_string(str1,index=0)\nperms2 = perms_in_string(str2,index=1)\nperms2 = perms2 - (perms1-mandatory_perms)\nprint(f\"OPTIMIZING STR2\")\nwrite_params_file(\"str2\")\nwrite_problem_file(distances_matrix(perms2, 1, depot=True), \"str2\")\nstring_to_tour(str2,perms2,name=\"str2\",index=1)\nsolve_atsp(perms2, name=\"str2.par\")\ntour2=read_output_tour(perms2,name=\"str2\")\nstr2 = perms_to_string(tour2,1)\nprint(f\"STR2 CHANGED TO {len(str2)}\")\n\n# Optimize str3\nperms1 = perms_in_string(str1,index=0)\nperms2 = perms_in_string(str2,index=1)\nperms3 = perms_in_string(str3,index=2)\nperms3 = perms3 - (perms3.intersection(perms1.union(perms2)) - mandatory_perms)\nprint(f\"OPTIMIZING STR3\")\nwrite_params_file(\"str3\")\nwrite_problem_file(distances_matrix(perms3, 2, depot=True), \"str3\")\nstring_to_tour(str3,perms3,name=\"str3\",index=2)\nsolve_atsp(perms3, name=\"str3.par\")\ntour3=read_output_tour(perms3,name=\"str3\")\nstr3 = perms_to_string(tour3,2)\nprint(f\"STR3 CHANGED TO {len(str3)}\")","e42d7d3b":"str1 = [int(e) for e in str1]\nstr2 = [int(e) for e in str2]\nstr3 = [int(e) for e in str3]\nif not check_validity(str1, str2, str3):\n    print(\"UNVALID STRINGS\")\nelse:\n    print(\"VALID STRINGS\")\nprint(len(perms_in_string(str1)),len(perms_in_string(str2)),len(perms_in_string(str3)))\nprint(len(str1),len(str2),len(str3))\nprint(wildcards)\nprint(\"=\"*50)\nprint(\"str1=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str1),\"\\\"\",sep=\"\")\nprint(\"str2=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str2),\"\\\"\",sep=\"\")\nprint(\"str3=\",end=\"\")\nprint(\"\\\"\",''.join(str(e) for e in str3),\"\\\"\",sep=\"\")","ed579f26":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nstrings = [str1, str2, str3]\nsub = pd.DataFrame()\nsub['schedule'] = [''.join(LETTERS[x] for x in s) for s in strings]\nsub_name = f'submission.csv'\nsub.to_csv(sub_name, index=False)","30297fb6":"## Summary","eb595de4":"Note the \"appends\" variable which allows the expansion of wildcard patterns, in addition to what was done in the notebook linked above.","79014168":"## Process","fc6fa94f":"As I explained at the very end of my original [wildcard insertion notebook](https:\/\/www.kaggle.com\/miguelgonzalez2\/santa-2021-wildcard-insertion-lkh), it might be beneficial to allow longer wildcard patterns instead of adding a wildcard to a single permutation. This is beacuse of the following:\n\nPermutations immediately before and after the one with the wildcard determine which number the \"wildcard\" becomes. In other words, suppose that we have permutation **1234567** with wildcard on the first position, and **1723456** before it:\n\n**...-1723456-1234567-...**\n\nNotice that the distance of that edge is 1 because of the wildcard. However, for the permutation that goes before **1723456**, the wildcard \"doesn't exist\" and it is forced to be a **7**, which is the value used by **1723456** as a wildcard. This is a limitation that can't be modelled as a TSP problem.\n\nIn order to circumvent this issue, this code that merges the permutations as one big group\/pattern (in our example, **17234567** with the wildcard in the first \"7\"), which attempts to fix the problem. \n\nWith this modification we still didn't improve 2430, but we hope the example presented here can illustrate what we mean.\n\nThe whole procedure is similar to the notebook linked above, which I suggest you check to learn the basics of what's being done. Other than that, whenever a large pattern is created, all the permutations it can represent are removed from the string.","e9302d93":"## INPUT","893bcc37":"### Show and store","127a642c":"## Utilities"}}