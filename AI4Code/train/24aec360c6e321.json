{"cell_type":{"ba0bbbf1":"code","ef3f5126":"code","dc1f6584":"code","d007bb5c":"code","d95c4937":"code","ff44921a":"code","c3c942cf":"code","5df97299":"code","a39979a9":"code","c2f5e042":"code","c15c3b21":"code","cd263e99":"code","31a68dca":"code","a2f15e6b":"code","d49756b9":"code","30281bd8":"code","6bd057b1":"code","7091bd10":"code","c8272066":"code","b9790692":"code","eccf576f":"code","9b874997":"code","40c8ecfd":"code","b804a12e":"code","926e0a87":"code","5779823f":"code","d982f5d2":"code","fe7b06c5":"code","8240ac03":"code","1a2b2b0f":"code","34e25bd3":"code","2367cc81":"code","17d19f1e":"markdown","58e3c40e":"markdown","5c1af7af":"markdown","ff2dff72":"markdown","d669f111":"markdown","a0c198b1":"markdown","59225f6a":"markdown","0f17ac6d":"markdown","f08c80db":"markdown","50af0ca1":"markdown","30dae8b7":"markdown","547b98f2":"markdown","33b06062":"markdown","bfd399a7":"markdown","d4626cf1":"markdown","bd428a7c":"markdown","f9b451c5":"markdown","d5ae29fe":"markdown","33bc6ff3":"markdown"},"source":{"ba0bbbf1":"# Work with Data - the main Python libraries\nimport pandas as pd\n\nimport numpy as np\nfrom datetime import date, timedelta, datetime\n\n# For import data from API\nimport requests\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\n\nimport warnings\nwarnings.simplefilter('ignore')","ef3f5126":"# Download data via API from the Portal of RNBO of Ukraine: https:\/\/api-covid19.rnbo.gov.ua\/\n# https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\ncode_region = 4907  # \"Vinnytsia region\"\nprint(f'Download daily data from the Portal of RNBO of Ukraine')\nmyfile = requests.get(f'https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine&country={code_region}')\nopen('data', 'wb').write(myfile.content)\ndf_data = pd.read_json('data')\ndf_data","dc1f6584":"# Display the last 10 rows of the dataframe \"df_data\"\ndf_data.tail(10)","d007bb5c":"# Calculation daily data for number of confirmed cases\ndf_data['n_confirmed'] = df_data['confirmed'].diff()\n#df_data['n_confirmed'] = df_data['confirmed']","d95c4937":"# Filtering the missing data\ndata = df_data[['dates','n_confirmed']].dropna().reset_index(drop=True)\ndata['n_confirmed'] = data['n_confirmed'].astype('int')\ndata.tail(4)","ff44921a":"# Delete the last zero value\ndata = data[:-1]\ndata.tail(3)","c3c942cf":"# Build the plot\ndata['n_confirmed'].plot()","5df97299":"# Prepairing data for modeling with Prophet\ndata.columns = ['ds', 'y']\ndata.tail()","a39979a9":"# Removing zero values\ndata = data[data['y'] > 0].reset_index(drop=True)\ndata","c2f5e042":"# The smallest increase in value\ndata.loc[303:305]","c15c3b21":"# Selection data with the biggest wave\ndf2 = data[304:].reset_index(drop=True)\ndf2","cd263e99":"df2.plot()","31a68dca":"# Build Prophet model\nmodel = Prophet()\n\n# Training model for all data\nmodel.fit(data)","a2f15e6b":"# Build Prophet model with parameters ans structure \n# from the notebook https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting \n# but without holidays\nmodel2 = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.3)\nmodel2.add_seasonality(name='weekly', period=7, fourier_order=12, \n                      mode = 'multiplicative', prior_scale = 0.24)\nmodel2.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.15)\n\n# Training model for df2\nmodel2.fit(df2)","d49756b9":"# Make a forecast for 7 days ahead\nfuture = model.make_future_dataframe(periods = 7)\nforecast = model.predict(future)\n\n# Make values integer, and replace negative values with zero\nfeature_all = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast[feature_all] = forecast[feature_all].astype('int')\nfor feature in feature_all:\n    forecast.loc[forecast[feature] < 0, feature] = 0","30281bd8":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = 'Number of confirmed cases')","6bd057b1":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component = model.plot_components(forecast)","7091bd10":"# Ouput the prediction for the next 7 days\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(7)","c8272066":"# Make a forecast for 7 days ahead\nfuture2 = model2.make_future_dataframe(periods = 7)\nforecast2 = model2.predict(future2)\n\n# Make values integer, and replace negative values with zero\nforecast2[feature_all] = forecast2[feature_all].astype('int')\nfor feature in feature_all:\n    forecast2.loc[forecast2[feature] < 0, feature] = 0","b9790692":"# Draw plot of the values with forecasting data\nfigure2 = model2.plot(forecast2, xlabel = 'Date', ylabel = 'Number of confirmed cases')","eccf576f":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component2 = model2.plot_components(forecast2)","9b874997":"# Ouput the prediction for the next 7 days\nforecast2[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(7)","40c8ecfd":"def merge(list1, list2):\n    for d in list2:\n        list1[d] = list2[d]\n        for i in range(len(list2[d])):\n            list1[d][i] = list2[d][i]\n    return list1","b804a12e":"def eval_error(forecast_df, title):\n    # Evaluate forecasts with validation set val_df and calculaction and printing with title the relative error\n    forecast_df[forecast_df['yhat'] < 0]['yhat'] = 0\n    result_df = forecast_df[(pd.to_datetime(forecast_df['ds']) >= pd.to_datetime(first_forecasted_date))]\n    result_val_df = result_df\n    result_val_df['rel_diff'] = (result_val_df['y'] - result_val_df['yhat'].round()).abs()\n    return (result_val_df['rel_diff'].sum())*100\/y_real_sum","926e0a87":"days_to_forecast = 14 # in future (after training data)\ndays_to_forecast_for_evalution = 14 # on the latest training data - for model training\nfirst_forecasted_date = sorted(list(set(data['ds'].values)))[-days_to_forecast_for_evalution]\nend_forecasted_date = (datetime.strptime(data['ds'].max(), \"%Y-%m-%d\")+timedelta(days = days_to_forecast)).strftime(\"%Y-%m-%d\")\nfirst_data_date = data['ds'].min()\n\nprint('The first date of data for modeling is: ' + first_data_date)\nprint('The first date to perform forecasts for evaluation is: ' + first_forecasted_date)\nprint('The end date to perform forecasts in future for is: ' + end_forecasted_date)","5779823f":"# Remove last 2 weeks in order to check accuracy\ndata_quality = data[:-14]\nmodel_quality = Prophet()\nmodel_quality.fit(data_quality)\ndata_quality","d982f5d2":"# Make a forecast for 14 days ahead (till today for quality check)\nfuture_quality = model_quality.make_future_dataframe(periods = 14)\nforecast_quality = model_quality.predict(future_quality)\n\n# Make values integer, and replace negative values with zero\nfeature_all_q = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast_quality[feature_all_q] = forecast_quality[feature_all_q].astype('int')\nfor future_quality in feature_all_q:\n    forecast_quality.loc[forecast_quality[future_quality] < 0, future_quality] = 0\n    \nforecast_quality[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(14)","fe7b06c5":"# Check accuracy\ncmp_df = merge(forecast_quality.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']], data)\ncmp_df['y'] = cmp_df['y'].astype('int')\ny_real_sum = data.tail(14)['y'].sum()\nrelative_error = eval_error(cmp_df, 'Simple method')\ncmp_df.tail(14)\nprint('Relative error of first model', relative_error)","8240ac03":"# Remove last 2 weeks in order to check accuracy\ndf2_quality = df2[:-14]\nmodel2_quality = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.3)\nmodel2_quality.add_seasonality(name='weekly', period=7, fourier_order=12, \n                      mode = 'multiplicative', prior_scale = 0.24)\nmodel2_quality.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.15)\nmodel2_quality.fit(df2_quality)\ndf2_quality","1a2b2b0f":"# Make a forecast for 14 days ahead\nfuture2_quality = model2_quality.make_future_dataframe(periods = 14)\nforecast2_quality = model2_quality.predict(future2_quality)\n\n# Make values integer, and replace negative values with zero\nforecast2_quality[feature_all_q] = forecast2_quality[feature_all_q].astype('int')\nfor feature in feature_all_q:\n    forecast2_quality.loc[forecast2_quality[feature] < 0, feature] = 0\n    \nforecast2_quality[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(14)","34e25bd3":"# Check accuracy\ncmp_df = merge(forecast2_quality.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']], df2)\ncmp_df['y'] = cmp_df['y'].astype('int')\ny_real_sum = df2.tail(14)['y'].sum()\nrelative_error2 = eval_error(cmp_df, 'Simple method')\ncmp_df.tail(14)\nprint('Relative error of second model', relative_error2)","2367cc81":"if (relative_error2 < relative_error):\n    print(\"So the second method has less relative error rate (\", relative_error2, \"). So the accuracy is bigger\")\nelse:\n    print(\"So the first method has less relative error rate (\", relative_error, \"). So the accuracy is bigger\")","17d19f1e":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","58e3c40e":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","5c1af7af":"<a class=\"anchor\" id=\"0\"><\/a>\n# COVID-19 in Vinnytsia region of Ukraine","ff2dff72":"### For the biggest wave - df2","d669f111":"The adequacy of a more complex model is much better.","a0c198b1":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","59225f6a":"The adequacy of a simple model is very poor!","0f17ac6d":"### All list of API parameters\nhttps:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\n\n### Retrieving information about region \"Vinnytsia oblast\"\ncode_region = 4907","f08c80db":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","50af0ca1":"### For all data","30dae8b7":"### For the biggest wave - df2","547b98f2":"## Acknowledgements\n\n### Datasets:\n- official data of Ukraine (https:\/\/covid19.rnbo.gov.ua\/) - via API\n- dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data) - for the next commits\n\n### Notebooks:\n* [AI-ML-DS Training. L1A : COVID in UA - Prophet](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l1t-covid-in-ua-prophet?scriptVersionId=63736090)\n* [COVID in UA: Prophet with 4, Nd seasonality](https:\/\/www.kaggle.com\/vbmokin\/covid-in-ua-prophet-with-4-nd-seasonality)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [EDA for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/eda-for-tabular-data-advanced-techniques)\n* [COVID-19 in Ukraine: EDA & Forecasting](https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting)\n* [COVID-19 in 67 countries: daily Prophet forecast](https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-67-countries-daily-prophet-forecast)\n* [COVID-19 UA: one region forecasting](https:\/\/www.kaggle.com\/vbmokin\/covid-19-ua-one-region-forecasting)\n* [COVID-19 new cases in 70 countries - FB Prophet](https:\/\/www.kaggle.com\/vbmokin\/covid-19-new-cases-in-70-countries-fb-prophet)\n\n### Libraries from GitHub:\n- https:\/\/facebook.github.io\/prophet\/\n- https:\/\/facebook.github.io\/prophet\/docs\/\n- https:\/\/github.com\/facebook\/prophet\n- https:\/\/github.com\/dr-prodigy\/python-holidays","33b06062":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","bfd399a7":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","d4626cf1":"### For all data","bd428a7c":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","f9b451c5":"### Selection data with the biggest wave","d5ae29fe":"## Dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data)","33bc6ff3":"## Thanks to <a href=\"https:\/\/www.kaggle.com\/vbmokin\">@vbmokin<\/a>"}}