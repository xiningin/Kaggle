{"cell_type":{"3ffd2d28":"code","84b8a2a7":"code","467c562b":"code","b45e7913":"code","1b490d06":"code","cf90bf3f":"code","394a576d":"code","e32601e8":"code","6f66ca00":"code","b210eae1":"code","bf26a8a9":"code","f930c922":"code","3b1e5be4":"code","8aa65d8a":"code","0a94f30b":"code","2a1d0ad9":"code","d5cc834b":"code","43c147da":"code","c1b568c6":"code","a1f29801":"code","41d0e92d":"code","df94ae72":"code","17ebf9a1":"code","88d8ed98":"code","4e289a92":"code","e825e931":"code","636cd24b":"code","39c9cdf6":"code","13477a73":"code","e777287b":"code","270168bc":"code","4adcb6db":"code","1578a592":"code","63a03378":"code","585d2203":"code","323801d5":"code","fdff4e99":"code","99f4a54e":"code","05e52831":"code","aff838c4":"code","59e0b6b2":"code","2876e917":"code","ea34da5f":"code","76c08bac":"code","90906cfc":"code","9cb801e9":"code","118785b6":"code","741221f7":"code","a364123d":"code","e55093c8":"code","0263cc29":"code","ff1d84d4":"code","ee5fda04":"code","853b35f5":"code","785f0e18":"code","45873786":"code","fbd1c610":"code","40b57085":"code","5eee69c9":"code","841a8519":"code","22c8e43e":"code","48628393":"code","ce8c2807":"code","da55a2ea":"code","5ba857eb":"code","45fc25c9":"markdown","170f0b8b":"markdown","79cf0351":"markdown","3e6d8306":"markdown","81359940":"markdown","08934576":"markdown","3e3a5c88":"markdown","cfb14c1b":"markdown","02da1f23":"markdown","d7816d54":"markdown","13e047b9":"markdown","b93194dc":"markdown","bb3b5dc7":"markdown","b44f5b89":"markdown","197a9a94":"markdown","b1efe100":"markdown","37ed081d":"markdown","9d4ad661":"markdown","1d7f0443":"markdown","91449a44":"markdown","3d3b5749":"markdown","4e2fb7c7":"markdown","53bb8b46":"markdown","79a81fd6":"markdown","0b6e4c44":"markdown","3521844a":"markdown"},"source":{"3ffd2d28":"import numpy as np\nimport pandas as pd ","84b8a2a7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nfrom plotly.offline import iplot, plot, download_plotlyjs, init_notebook_mode\nfrom plotly.graph_objs import graph_objs as go\nimport cufflinks as cf","467c562b":"init_notebook_mode(connected = True)\ncf.go_offline(connected = True)","b45e7913":"import os\nprint(os.listdir(\"..\/input\/fifa19\"))","1b490d06":"fifa_data = pd.read_csv('..\/input\/fifa19\/data.csv')","cf90bf3f":"fifa_data.columns","394a576d":"fifa_data['Growth'] = fifa_data['Potential'] - fifa_data['Overall']","e32601e8":"fifa_data.isnull().sum()[fifa_data.isnull().sum() > 8000]","6f66ca00":"fifa_data.drop('Loaned From', axis = 1, inplace = True)","b210eae1":"fifa_data.drop('Release Clause', axis = 1, inplace = True)","bf26a8a9":"fifa_data.drop(['Club', 'Jersey Number', 'Contract Valid Until', 'Joined'], axis = 1, inplace = True)","f930c922":"fifa_data.drop(['Photo', 'Flag', 'Club Logo', 'Real Face'], axis = 1, inplace = True)","3b1e5be4":"fifa_data.drop(index = fifa_data[fifa_data['Preferred Foot'].isna()].index, inplace = True)","8aa65d8a":"fifa_data.drop(index = fifa_data[fifa_data['Position'].isna()].index, inplace = True)","0a94f30b":"fifa_data.drop(index = fifa_data[fifa_data['RB'].isna()].index, inplace = True )","2a1d0ad9":"def convertValue(value) :\n    if value[-1] == 'M' :\n        value = value[1:-1]\n        value = float(value) * 1000000\n        return value\n    \n    if value[-1] == 'K' :\n        value = value[1:-1]\n        value = float(value) * 1000\n        return value","d5cc834b":"fifa_data['Wage'] = fifa_data['Wage'].apply(lambda x : convertValue(x))","43c147da":"fifa_data['Value'] = fifa_data['Value'].apply(lambda x : convertValue(x))","c1b568c6":"fifa_data.select_dtypes(include = object).columns","a1f29801":"fifa_data['Body Type'][fifa_data['Body Type'] == 'Messi'] = 'Normal'\nfifa_data['Body Type'][fifa_data['Body Type'] == 'C. Ronaldo'] = 'Normal'\nfifa_data['Body Type'][fifa_data['Body Type'] == 'Neymar'] = 'Lean'\nfifa_data['Body Type'][fifa_data['Body Type'] == 'PLAYER_BODY_TYPE_25'] = 'Normal'\nfifa_data['Body Type'][fifa_data['Body Type'] == 'Shaqiri'] = 'Stocky'\nfifa_data['Body Type'][fifa_data['Body Type'] == 'Akinfenwa'] = 'Stocky'","41d0e92d":"def convertWeight(weight) :\n    weight = weight[0:3]\n    return weight","df94ae72":"def convertHeight(height) :\n    height = height.split(\"'\")\n    height = float(height[0]) * 30.48 + float(height[1]) * 2.54 \n    \n    return height","17ebf9a1":"fifa_data['Weight'] = fifa_data['Weight'].apply(lambda x : convertWeight(x))\nfifa_data['Height'] = fifa_data['Height'].apply(lambda x : convertHeight(x))","88d8ed98":"def convertPosition(val) :\n    \n    if val == 'RF' or val == 'ST' or val == 'LW' or val == 'LF' or val == 'RS' or val == 'LS' or val == 'RM' or val == 'LM' or val == 'RW' or val == 'CF' :\n        return 'Forward'\n    \n    elif val == 'GK' :\n        return 'GoalKeeper'\n    \n    elif val == 'RCM' or val == 'LCM' or val == 'LDM' or val == 'CAM' or val == 'CDM' or val == 'LAM' or val == 'RDM' or val == 'CM' or val == 'RAM' :\n        return 'MidFielder'\n    \n    return 'Defender'\n","4e289a92":"fifa_data['Position'] = fifa_data['Position'].apply(lambda x : convertPosition(x))","e825e931":"temp_columns =['LS', 'ST', 'RS', 'LW', 'LF', 'CF',\n               'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB',\n               'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB']","636cd24b":"def convertRatings(rating) :\n    rating = rating.split('+')\n    rating = int(rating[0]) + int(rating[1])\n    return rating","39c9cdf6":"for column in temp_columns :\n    fifa_data[column] = fifa_data[column].apply(lambda x : convertRatings(x))","13477a73":"def getTOP10(feature) :\n   return fifa_data.sort_values(by = feature, ascending = False)[['Name', feature]].head(10)","e777287b":"getTOP10('RW')","270168bc":"Player_Count = fifa_data.groupby('Nationality').size().reset_index()","4adcb6db":"Player_Count.columns = ['Country', 'Count']","1578a592":"data1 = go.Choropleth(locationmode = 'country names', locations = Player_Count['Country'],\n                     z =  Player_Count['Count'], colorscale = 'oranges', )","63a03378":"layout1 = go.Layout(title = 'Players Count Per Country') ","585d2203":"graphPlayerCountPerCountry = go.Figure(data = data1, layout = layout1)","323801d5":"graphPlayerCountPerCountry","fdff4e99":"graphPlayerAge = fifa_data['Age'].iplot(kind = 'histogram', title = 'Player Age Distribution', xTitle = 'Age',\n                                        yTitle = 'Count', theme = 'pearl', )","99f4a54e":"plt.figure(figsize =(30,15))\ngraphPlayerHeightWeight = sns.boxplot(x = 'Weight', y = 'Height', data = fifa_data, )","05e52831":"data2 = go.Pie(labels = fifa_data['Position'].value_counts().index.values, values = fifa_data['Position'].value_counts().values, \n               hole = 0.3)","aff838c4":"layout2 = go.Layout(title = 'Player Position Distribution')","59e0b6b2":"graphPlayerPosition = go.Figure(data = data2, layout = layout2)","2876e917":"graphPlayerPosition","ea34da5f":"graphPlayerOverall = fifa_data['Overall'].iplot(kind = 'histogram', title = 'Player Overall Distribution', \n                                                xTitle = 'Overall Rating', yTitle ='Count')","76c08bac":"data3 = go.Pie(labels = fifa_data['Preferred Foot'].value_counts().index.values, values = fifa_data['Preferred Foot'].value_counts().values, \n               hole = 0.3)","90906cfc":"layout3 = go.Layout(title = 'Player Preferred Foot Distribution')","9cb801e9":"graphPlayerPreferredFoot = go.Figure(data = data3, layout = layout3)","118785b6":"graphPlayerPreferredFoot","741221f7":"from sklearn.linear_model import LinearRegression","a364123d":"from sklearn.model_selection import train_test_split","e55093c8":"fifa_data['Value'] = fifa_data['Value'].apply(lambda x  : x\/1000000)","0263cc29":"x = fifa_data[['Potential', 'Value', 'LS', 'ST', 'RS', 'LW',\n       'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM',\n       'RM', 'LWB', 'LDM', 'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB',\n       'Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'Growth']]","ff1d84d4":"y = fifa_data['Overall']","ee5fda04":"x.fillna(value = 0, inplace = True)\ny.fillna(value = 0, inplace = True)","853b35f5":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 101)","785f0e18":"from sklearn.model_selection import GridSearchCV","45873786":"paramlist = {'n_jobs' : [0.1 , 1, 10, 100 ]}","fbd1c610":"gridSearch = GridSearchCV(estimator = LinearRegression(), param_grid = paramlist, verbose = 5)","40b57085":"gridSearch.fit(x_train,y_train)","5eee69c9":"gridSearch.best_params_","841a8519":"model = LinearRegression(n_jobs = 0.1)","22c8e43e":"model.fit(x_train, y_train)","48628393":"predictions = model.predict(x_test)","ce8c2807":"from sklearn.metrics import mean_absolute_error, mean_squared_error","da55a2ea":"mean_absolute_error(y_true = y_test, y_pred = predictions)","5ba857eb":"mean_squared_error(y_true = y_test, y_pred = predictions)","45fc25c9":"Splitting the Data into Training and Test Set","170f0b8b":"Plotting the Graph to show the Preferred Foot Distribution among the Players","79cf0351":"Plotting the Graph to show the Position Distribution of the Players","3e6d8306":"Converting the Position Column","81359940":"Data Cleaning","08934576":"Finding and Removing the Null Values","3e3a5c88":"Function to get the top 10 Players Feature Wise","cfb14c1b":"Working on the 'Body Type' Column","02da1f23":"Converting all the Rating Columns","d7816d54":"Converting the Data Points of the Value and Wage Column","13e047b9":"Converting the Height and Weight Column","b93194dc":"Importing the Libraries for Data Visualization","bb3b5dc7":"Finding the Players with highest Growth Potential","b44f5b89":"Initializing the parameters","197a9a94":"Plotting the Graph to show the Age Distribution among the Players","b1efe100":"Plotting the Geographical Map for the count of players","37ed081d":"Import the Performance metrics","9d4ad661":"Importing the DataSet","1d7f0443":"Importing the Libraries","91449a44":"Predicting the Overall of the Player Using Linear Regression Model","3d3b5749":"Training the Model","4e2fb7c7":"Converting the Data Values into ML understandable format","53bb8b46":"Applying Machine Learning","79a81fd6":"Importing the GridSearchCV to find out the optimal value of the parameters of the model","0b6e4c44":"Plotting the Graph to show the Height and Weight Distribution among the Players","3521844a":"Plotting the Graph to show the Overall Rating Distribution among the Players"}}