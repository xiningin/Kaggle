{"cell_type":{"708bcf66":"code","7f4ceec9":"code","52556f91":"code","72132bca":"code","1b00f084":"code","93587c93":"code","fb0cafbb":"code","0cdabbab":"code","25af0ede":"code","b71ae9d7":"code","e6017da2":"code","9416dc7d":"code","ad3d1182":"code","7c062eae":"code","564ee522":"code","b1f08288":"code","0e3e52d4":"code","397cc0f9":"code","53077332":"code","4c184b03":"code","a8dee537":"code","bf41b581":"code","10b2483a":"code","9c875842":"code","35014f2f":"code","c3f230bf":"code","af7d0008":"code","0734305e":"code","e3ac53c3":"code","80540f9d":"code","fb064ce3":"code","27dbce37":"code","32d2a6c5":"code","7a250d6e":"code","875f5d63":"code","0af8896c":"code","597632b0":"code","89a6f8e4":"code","c2b9dbf1":"code","566b1718":"code","e8998000":"code","ddbdfb86":"code","b5635e2d":"code","52cba7e6":"code","2d828ad4":"code","fa382caa":"code","575491f7":"code","72dfa583":"code","b7b1b038":"code","63ff6f84":"code","87466e0d":"code","3af81bd1":"code","d45669dd":"code","864c6785":"code","351c4463":"code","c82fb438":"code","cef1f87a":"code","712eb40f":"markdown","1813632f":"markdown"},"source":{"708bcf66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f4ceec9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error \nfrom keras.layers import LSTM, Dense\nfrom keras.models import Sequential\nimport time\nfrom datetime import datetime\nfrom sklearn.ensemble import GradientBoostingRegressor","52556f91":"Water_Spring_Lupa = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Lupa.csv')","72132bca":"print(\"Data shape :\" ,Water_Spring_Lupa.shape)","1b00f084":"Water_Spring_Lupa.info()","93587c93":"sns.heatmap(Water_Spring_Lupa.isnull())","fb0cafbb":"Water_Spring_Lupa_1 = Water_Spring_Lupa.copy()","0cdabbab":"Water_Spring_Lupa_1['Day'] = Water_Spring_Lupa_1['Date'].str.split('\/').str[0]\nWater_Spring_Lupa_1['Month'] = Water_Spring_Lupa_1['Date'].str.split('\/').str[1]\nWater_Spring_Lupa_1['Year'] = Water_Spring_Lupa_1['Date'].str.split('\/').str[2]","25af0ede":"Water_Spring_Lupa_1['Date'] = Water_Spring_Lupa_1.Date.apply(lambda x: pd.Timestamp(x))                   \nWater_Spring_Lupa_1['Date'] = Water_Spring_Lupa_1.Date.values.astype(np.int64)\/\/10 ** 9","b71ae9d7":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"])\nplt.title(\"Flow_Rate_Lupa\")","e6017da2":"Water_Spring_Lupa_1.info()","9416dc7d":"Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"] = Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"].replace({0:np.nan, 0:np.nan})","ad3d1182":"Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"].interpolate(method ='pchip', limit_direction ='forward', inplace=True)","7c062eae":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"])\nplt.title(\"Flow_Rate_Lupa\")","564ee522":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Lupa_1[\"Rainfall_Terni\"])\nplt.title(\"Rainfall_Terni\")","b1f08288":"Water_Spring_Lupa_1 = Water_Spring_Lupa_1.iloc[:4025]","0e3e52d4":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Lupa_1[\"Rainfall_Terni\"])\nplt.title(\"Rainfall_Terni\")","397cc0f9":"plt.figure(figsize = (12,6))\nplt.bar(Water_Spring_Lupa_1['Month'],Water_Spring_Lupa_1[\"Rainfall_Terni\"])\nplt.xlabel('Month')\nplt.ylabel('Rainfall_Terni')","53077332":"plt.figure(figsize = (12,6))\nplt.bar(Water_Spring_Lupa_1['Month'],Water_Spring_Lupa_1[\"Flow_Rate_Lupa\"])\nplt.xlabel('Month')\nplt.ylabel('Flow_Rate_Lupa')","4c184b03":"Water_Spring_Lupa_1.info()","a8dee537":"Water_Spring_Lupa_1.dropna(inplace = True)","bf41b581":"Water_Spring_Madonna_di_Canneto = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Madonna_di_Canneto.csv')","10b2483a":"print(\"Data shape :\" ,Water_Spring_Madonna_di_Canneto.shape)","9c875842":"Water_Spring_Madonna_di_Canneto.info()","35014f2f":"sns.heatmap(Water_Spring_Madonna_di_Canneto.isnull())","c3f230bf":"Water_Spring_Madonna_di_Canneto_1 = Water_Spring_Madonna_di_Canneto.copy()","af7d0008":"Water_Spring_Madonna_di_Canneto_1['Day'] = Water_Spring_Madonna_di_Canneto_1['Date'].str.split('\/').str[0]\nWater_Spring_Madonna_di_Canneto_1['Month'] = Water_Spring_Madonna_di_Canneto_1['Date'].str.split('\/').str[1]\nWater_Spring_Madonna_di_Canneto_1['Year'] = Water_Spring_Madonna_di_Canneto_1['Date'].str.split('\/').str[2]","0734305e":"Water_Spring_Madonna_di_Canneto_1['Date'] = Water_Spring_Madonna_di_Canneto_1.Date.apply(lambda x: pd.Timestamp(x))                   \nWater_Spring_Madonna_di_Canneto_1['Date'] = Water_Spring_Madonna_di_Canneto_1.Date.values.astype(np.int64)\/\/10 ** 9","e3ac53c3":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Madonna_di_Canneto_1[\"Flow_Rate_Madonna_di_Canneto\"])\nplt.title(\"Flow_Rate_Madonna_di_Canneto\")","80540f9d":"Water_Spring_Madonna_di_Canneto_1 = Water_Spring_Madonna_di_Canneto_1.iloc[1550:]","fb064ce3":"Water_Spring_Madonna_di_Canneto_1[\"Flow_Rate_Madonna_di_Canneto\"].interpolate(method ='pchip', limit_direction ='forward', inplace=True)","27dbce37":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Madonna_di_Canneto_1[\"Flow_Rate_Madonna_di_Canneto\"])\nplt.title(\"Flow_Rate_Madonna_di_Canneto\")","32d2a6c5":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Madonna_di_Canneto_1[\"Rainfall_Settefrati\"])\nplt.title(\"Rainfall_Settefrati\")","7a250d6e":"plt.figure(1,figsize = (10,5))\nplt.plot(Water_Spring_Madonna_di_Canneto_1[\"Temperature_Settefrati\"])\nplt.title(\"Temperature_Settefrati\")","875f5d63":"Water_Spring_Madonna_di_Canneto_1.dropna(inplace = True)","0af8896c":"sns.heatmap(Water_Spring_Madonna_di_Canneto_1.isnull())","597632b0":"Water_Spring_Amiata = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Amiata.csv')","89a6f8e4":"print(\"Data shape :\" ,Water_Spring_Amiata.shape)","c2b9dbf1":"Water_Spring_Amiata.info()","566b1718":"sns.heatmap(Water_Spring_Amiata.isnull())","e8998000":"Water_Spring_Amiata_1 = Water_Spring_Amiata.copy()","ddbdfb86":"sns.heatmap(Water_Spring_Amiata_1.corr());","b5635e2d":"Water_Spring_Amiata_1.drop([\"Rainfall_S_Fiora\",\"Rainfall_Vetta_Amiata\",\"Depth_to_Groundwater_S_Fiora_8\",\"Depth_to_Groundwater_S_Fiora_11bis\",\"Temperature_Abbadia_S_Salvatore\",\"Temperature_Laghetto_Verde\"], axis=1,inplace = True)","52cba7e6":"Water_Spring_Amiata.iloc[5478:].head()","2d828ad4":"Water_Spring_Amiata_1 = Water_Spring_Amiata_1.iloc[5750:]","fa382caa":"Water_Spring_Amiata_1['Day'] = Water_Spring_Amiata_1['Date'].str.split('\/').str[0]\nWater_Spring_Amiata_1['Month'] = Water_Spring_Amiata_1['Date'].str.split('\/').str[1]\nWater_Spring_Amiata_1['Year'] = Water_Spring_Amiata_1['Date'].str.split('\/').str[2]","575491f7":"Water_Spring_Amiata_1['Date'] = Water_Spring_Amiata_1.Date.apply(lambda x: pd.Timestamp(x))                   \nWater_Spring_Amiata_1['Date'] = Water_Spring_Amiata_1.Date.values.astype(np.int64)\/\/10 ** 9","72dfa583":"sns.heatmap(Water_Spring_Amiata_1.isnull())","b7b1b038":"Water_Spring_Amiata_1.interpolate(method ='pchip', limit_direction ='forward', inplace=True)","63ff6f84":"sns.heatmap(Water_Spring_Amiata_1.isnull())","87466e0d":"Water_Spring_Amiata_1.info()","3af81bd1":"col = Water_Spring_Amiata_1.columns\n\n\nfor c in col[1:-3]:\n    plt.figure(figsize = (10,5))\n    plt.plot(Water_Spring_Amiata_1[c])\n    plt.title(c)","d45669dd":"Water_Spring_Amiata_1.dropna(inplace = True)","864c6785":"Water_Spring_Amiata_1[\"Flow_Rate_Arbure\"] = Water_Spring_Amiata_1[\"Flow_Rate_Arbure\"].replace({0:np.nan, 0:np.nan})\nWater_Spring_Amiata_1[\"Flow_Rate_Ermicciolo\"] = Water_Spring_Amiata_1[\"Flow_Rate_Ermicciolo\"].replace({0:np.nan, 0:np.nan})\nWater_Spring_Amiata_1[\"Flow_Rate_Galleria_Alta\"] = Water_Spring_Amiata_1[\"Flow_Rate_Galleria_Alta\"].replace({0:np.nan, 0:np.nan})","351c4463":"Water_Spring_Amiata_1.interpolate(method ='pchip', limit_direction ='forward', inplace=True)","c82fb438":"for c in col[-7:-3]:\n    plt.figure(figsize = (10,5))\n    plt.plot(Water_Spring_Amiata_1[c])\n    plt.title(c)","cef1f87a":"sns.heatmap(Water_Spring_Amiata_1.corr());","712eb40f":"# Madonna_di_Canneto","1813632f":"# Amiata"}}