{"cell_type":{"25c91186":"code","fbebc389":"code","de454add":"code","956e54ac":"code","32531b32":"code","ddd1de46":"code","e8d7e175":"code","ddbe6fb2":"code","2fa33100":"code","8cc21c6b":"code","a1929572":"code","d3263084":"code","aebe3c73":"code","806f5c3e":"code","0555a041":"code","b81bf72b":"code","12828462":"code","1e8190fa":"code","99b06dd1":"code","6120981b":"code","3800a7da":"code","e66da218":"code","07f05e29":"code","2791f6ae":"code","93225069":"code","57bea228":"code","09b2bc44":"code","765fa8ab":"code","376b3079":"code","0f9688e6":"code","3665a85b":"code","8f5d83ae":"code","53dcd0e9":"code","de75b7a2":"code","d4151fe9":"code","6cbe8e74":"code","ff296d68":"code","1c44e2ff":"code","bf42675d":"code","fa20e6ff":"code","9a1b2cd9":"code","2d4e815e":"code","9077701c":"code","f749aff1":"code","8765feed":"markdown","105ab4ba":"markdown","6b1b06da":"markdown","84695d91":"markdown","7e42f12f":"markdown"},"source":{"25c91186":"#importing library\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.simplefilter(\"ignore\")\n%matplotlib inline","fbebc389":"data = pd.read_csv(\"..\/input\/bmi-and-life\/bmi_and_life_expectancy.csv\")","de454add":"data.head(2)","956e54ac":"data.shape","32531b32":"data.isnull().any()","ddd1de46":"data.describe()","e8d7e175":"plt.figure(figsize=(7,7))\nsns.boxplot(x= 'variable', y = 'value', data = pd.melt(data[['Life expectancy', 'BMI']]))","ddbe6fb2":"# Plotting the heatmap of correlation between features\nplt.figure(figsize=(7,7))\nsns.heatmap(data.corr(), cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':10}, cmap='Greys')","2fa33100":"data.plot.hist(grid=True, bins=20, rwidth=0.9)","8cc21c6b":"sns.distplot(data['BMI'])\nplt.title(\"Histogram of BMI\")\nplt.xlabel(\"BMI\")\nplt.ylabel(\"Frequency\")\nplt.show()","a1929572":"sns.distplot(data['Life expectancy'])\nplt.title(\"Histogram for Life Expectancy \")\nplt.xlabel(\"Life expectancy\")\nplt.ylabel(\"Frequency\")\nplt.show()","d3263084":"#spliting the data\nfrom sklearn.model_selection import train_test_split","aebe3c73":"X = data['Life expectancy']\ny = data['BMI']","806f5c3e":"X = X.values.reshape(-1,1)\ny = y.values.reshape(-1,1)","0555a041":"#scaling the data\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_scaled = sc.fit_transform(X)","b81bf72b":"X_train, X_test, y_train, y_test = train_test_split(X ,y, test_size = 0.3, random_state = 100)","12828462":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","1e8190fa":"lr = LinearRegression()\nlr.fit(X_train, y_train)","99b06dd1":"y_pred_lr = lr.predict(X_test)","6120981b":"dtr = DecisionTreeRegressor()\ndtr.fit(X_train, y_train)","3800a7da":"y_pred_dtr = dtr.predict(X_test)","e66da218":"rfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)","07f05e29":"y_pred_rfr = rfr.predict(X_test)","2791f6ae":"xgr = XGBRegressor()\nxgr.fit(X_train, y_train)","93225069":"y_pred_xgr = xgr.predict(X_test)","57bea228":"X_train, X_test, y_train, y_test = train_test_split(X_scaled,y, test_size = 0.3, random_state = 100)","09b2bc44":"lr = LinearRegression()\nlr.fit(X_train, y_train)","765fa8ab":"y_pred_lrs = lr.predict(X_test)","376b3079":"rfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)","0f9688e6":"y_pred_rfrs = rfr.predict(X_test)","3665a85b":"dtr = DecisionTreeRegressor()\ndtr.fit(X_train, y_train)","8f5d83ae":"y_pred_dtrs = dtr.predict(X_test)","53dcd0e9":"xgr = XGBRegressor()\nxgr.fit(X_train, y_train)","de75b7a2":"y_pred_xgrs = xgr.predict(X_test)","d4151fe9":"from sklearn.metrics import r2_score","6cbe8e74":"R2_score_LR = r2_score(y_test, y_pred_lr)","ff296d68":"R2_score_DTR =  r2_score(y_test, y_pred_dtr)","1c44e2ff":"R2_score_RFR = r2_score(y_test, y_pred_rfr)","bf42675d":"R2_score_xgr = r2_score(y_test, y_pred_xgr)","fa20e6ff":"R2_score_LRs = r2_score(y_test, y_pred_lrs)","9a1b2cd9":"R2_score_DTRs = r2_score(y_test, y_pred_dtrs)","2d4e815e":"R2_score_RFRs = r2_score(y_test, y_pred_rfrs)","9077701c":"R2_score_xgrs = r2_score(y_test, y_pred_xgrs)","f749aff1":"models = pd.DataFrame({\n    'Model': ['Linear Regression', 'Random Forest', 'XGBoost', 'Decision Tree'],\n    'R-square(Non-scaled)': [R2_score_LR*100, R2_score_RFR*100, R2_score_xgr*100, R2_score_DTR*100],\n    'R-square(Scaled)': [R2_score_LRs*100, R2_score_RFRs*100, R2_score_xgrs*100, R2_score_DTRs*100]})\nmodels.sort_values(by = 'Model',ascending=False)","8765feed":"#### Evaluating Models (Scaled Data)","105ab4ba":"#### Regression on Non0-scaled Data","6b1b06da":"### THE END!!!","84695d91":"#### Regression on Scaled Data","7e42f12f":"#### Evaluating Models (Non-scaled Data)"}}