{"cell_type":{"1831ab50":"code","7feb3192":"code","f67106da":"code","29f4c049":"code","6e28abed":"code","e4935142":"code","5bc40960":"code","47115153":"code","1b4f8bc4":"code","8495af1f":"code","f819eed5":"code","31f66d61":"code","c323abd2":"code","b34c18e1":"code","b7728910":"code","b5c5b52d":"code","2a2e805a":"code","78653dea":"code","8288f491":"code","24002067":"code","bff3ca4a":"code","66c3818e":"code","834bfd50":"code","5b1e2303":"code","1110be11":"code","e9c11441":"code","f5ec4884":"code","483e7032":"code","24986c32":"code","325f56e3":"code","f8113f1b":"code","7ebe6d17":"code","253b1318":"code","709115f6":"code","cd075c34":"code","dea5bed6":"code","a81f98ec":"code","4532cc37":"code","646ea398":"code","587f9143":"code","b3225a6f":"code","dad5eeb5":"code","90713904":"code","2cbe14c5":"code","7524dae0":"code","fe78579c":"code","ec6f08d3":"code","a2718d18":"code","389b241b":"code","16fc0bc7":"code","9d90c828":"code","222f2139":"code","0de69f2a":"code","819049b9":"code","960ed911":"code","1460838a":"code","da785b9a":"code","1117b819":"code","de8c849d":"code","4a85cde7":"code","53287377":"code","6966bf76":"code","ad41ec6b":"markdown","ca46983a":"markdown","244f1d4a":"markdown","537132f7":"markdown","ad348582":"markdown","38aab659":"markdown","5e6547cc":"markdown","cb653b6e":"markdown","06579a20":"markdown","dc9d66ca":"markdown","420d6630":"markdown","37818088":"markdown","34e7302b":"markdown","c9d990d0":"markdown","aadbf132":"markdown","ef11972a":"markdown","229f9b79":"markdown","8b3ab04a":"markdown","902ab456":"markdown","4b247b82":"markdown","5f45b95a":"markdown","d1610ff9":"markdown","f8146e78":"markdown","4b60c998":"markdown","08bc53a5":"markdown","fbc7cef6":"markdown","4d48ad8f":"markdown","253d54ad":"markdown","78c0e7b7":"markdown","0ca1d5ea":"markdown","c66ceb94":"markdown","0b5022f1":"markdown","e1c49cd2":"markdown","947ecdd4":"markdown","1f28fcc5":"markdown","4a7e4165":"markdown","ba41ef59":"markdown","5aad5046":"markdown","7998e3b6":"markdown"},"source":{"1831ab50":"#import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom IPython.display import HTML,display\nfrom wordcloud import WordCloud\nfrom tqdm import tqdm\n\nimport mlxtend\nfrom mlxtend.preprocessing import standardize\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score,roc_curve,auc\nfrom sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV\n","7feb3192":"#Visualization settings\nsns.set_style(style='white')\nsns.set(rc={\n    'figure.figsize': (12,7),\n    'axes.facecolor': 'white',\n    'axes.grid': True,\n    'grid.color': '.9',\n    'axes.linewidth': 1.0,\n    'grid.linestyle': u'-'},\n    font_scale=1.5)\ncustom_colors=[\"#3498db\", \"#95a5a6\",\"#34495e\", \"#2ecc71\", \"#e74c3c\"]\nsns.set_palette(custom_colors)","f67106da":"#For kaggle environment, enter the default input path here.\ninput_dir='..\/input\/hr-analytics-job-change-of-data-scientists\/'","29f4c049":"df_train=pd.read_csv(input_dir+'aug_train.csv')\ndf_test=pd.read_csv(input_dir+'aug_test.csv')\n#Store the enrollee id for the future use.\ntest_file_column_id=df_test.enrollee_id\nprint (f\"Training data loaded with {df_train.shape[0]} rows and columns {df_train.shape[1]}\")\nprint (f\"Test data loaded with {df_test.shape[0]} rows and columns {df_test.shape[1]}\")\nprint (\"Sampledata training data frame:\")\ndf_train.head(3)","6e28abed":"print (\"Sampledata test dataframe:\")\ndf_test.head(3)","e4935142":"col_tags=\"<ol><b>\" + \"\".join([f\"<li>{col}<\/li>\" for col in df_train.columns]) + \"<\/b><\/ol>\"\ndisplay(HTML(\"<b><u>Feature names<\/u><\/b>\"))\ndisplay(HTML(col_tags))\nprint (\"Dataset summary\")\ndf_train.info()","5bc40960":"val=df_train.isnull().sum()\nval.sort_values(inplace=True,ascending=False)\ndf=pd.DataFrame(columns=[\"Features\",\"NullCount\"])\ndf[\"Features\"]=val.index\ndf[\"NullCount\"]=val.values\ndf.drop(df[df[\"NullCount\"]==0].index,inplace=True)\nprint (df)\nsns.barplot(data=df,x=\"Features\",y=\"NullCount\")\nplt.xticks(rotation=90)\nplt.title(\"Features having missing values\");","47115153":"#Discrete feature analysis\ndef analyze_discrete_feature(fld):\n    df=pd.DataFrame({\"Value\": fld.value_counts().index,\n                 \"Count\":fld.value_counts().values})\n    print (\"Null value count : \", fld.isnull().sum())\n    unique_list=fld.unique().tolist()\n    print (\"\\nUnique values: \", unique_list)\n    print (\"\\n Unique values count: \", len(unique_list))\n    print (\"\\nValue counts:\\n\",    df)\n    plt.subplots(figsize=(25,10))\n    plt.subplot(2,2,1)\n    plt.pie(fld.value_counts(),labels=fld.value_counts().index,autopct=lambda x: f'{x: .2f}%');\n    plt.xticks(rotation=90)\n    plt.subplot(2,2,2)\n    \n    sns.barplot(data=df, x=\"Value\",y=\"Count\");\n    plt.xticks(rotation=90);\n    plt.suptitle(fld.name + \" -distribution\");\n    plt.show()\n    plt.close()\n    display(HTML(\"<h4 style='background-color:yellow'>Discrete variable<\/h4>\"))","1b4f8bc4":"#Continuous feature analysis\ndef analyze_continuous_feature(fld):\n    print (\"Null value count : \", fld.isnull().sum())\n    print (\"\\n\", fld.describe())\n    plt.subplots(figsize=(25,10))\n    plt.subplot(2,2,1)\n    plt.hist(fld)\n    plt.subplot(2,2,2)\n    sns.boxplot(fld)\n    plt.suptitle(\"fld.name + -distribution\")\n    plt.show()\n    plt.close()\n    display(HTML(\"<h4 style='background-color:yellow'>Continuous variable<\/h4>\"))\n    ","8495af1f":"df_train.enrollee_id.describe()","f819eed5":"wc=WordCloud(background_color='white').generate(str(df_train.city.values))\nplt.figure(figsize=(10,10),facecolor=None)\nplt.imshow(wc,interpolation='bilinear');\nplt.axis('off')\nplt.tight_layout(pad=0)\nplt.show()","31f66d61":"analyze_discrete_feature(df_train.city)","c323abd2":"analyze_continuous_feature(df_train.city_development_index)","b34c18e1":"analyze_discrete_feature(df_train.gender)","b7728910":"analyze_discrete_feature(df_train.relevent_experience)","b5c5b52d":"analyze_discrete_feature(df_train.enrolled_university)","2a2e805a":"analyze_discrete_feature(df_train.education_level)","78653dea":"analyze_discrete_feature(df_train.major_discipline)","8288f491":"analyze_discrete_feature(df_train.experience)","24002067":"analyze_discrete_feature(df_train.company_size)","bff3ca4a":"analyze_discrete_feature(df_train.company_type)","66c3818e":"analyze_discrete_feature(df_train.last_new_job)","834bfd50":"analyze_continuous_feature(df_train.training_hours)","5b1e2303":"analyze_discrete_feature(df_train.target)","1110be11":"plt.subplots(figsize=(20,15))\nplt.suptitle(\"Gender presence\");\nplt.subplots_adjust(hspace=1.5);\n\nplt.subplot(2,2,1)\nsns.countplot(data=df_train,x=\"company_type\",hue=\"gender\",palette=['#add8e6',\"#FFC0CB\",\"#808080\"]);\nplt.xticks(rotation=90)\nplt.title(\"In Companies\");\n\nplt.subplot(2,2,2)\nsns.countplot(data=df_train,x=\"education_level\",hue=\"gender\",palette=['#add8e6',\"#FFC0CB\",\"#808080\"]);\nplt.xticks(rotation=90);\nplt.title(\"In Education\");\n\nplt.subplot(2,2,3);\nsns.countplot(data=df_train,x=\"major_discipline\",hue=\"gender\",palette=['#add8e6',\"#FFC0CB\",\"#808080\"]);\nplt.xticks(rotation=90)\nplt.title(\"In Major Discipline\");\n\nplt.subplot(2,2,4);\nsns.countplot(data=df_train,x=\"company_size\",hue=\"gender\",palette=['#add8e6',\"#FFC0CB\",\"#808080\"]);\nplt.xticks(rotation=90)\nplt.title(\"Company Size\");","e9c11441":"df=df_train.loc[:,[\"company_type\",\"education_level\"]]\ndf=pd.crosstab(df.company_type,df.education_level)","f5ec4884":"sns.heatmap(df,annot=True,fmt=\"g\",cmap='Reds',cbar=False);\nplt.title(\"Graduation levels vs. Company type\");","483e7032":"del(df)\ndf=df_train.copy()","24986c32":"df['experience'].replace(['<1','>20'],[0,21],inplace=True)\ndf[\"experience\"]=pd.to_numeric(df.experience, errors='coerce')","325f56e3":"def assign_experience_bin (fld):\n    if fld <=5:\n        return \"beginer\"\n    elif (fld >5 and fld <=10):\n        return \"ascociate\"\n    elif (fld >10 and fld <=15):\n        return \"senior\"\n    elif (fld >15 and fld <=20):\n        return \"supersenior\"\n    elif fld > 20:\n        return \"experienced\"\n            ","f8113f1b":"df[\"experience_bin\"]=df['experience'].apply(assign_experience_bin)\ndf1=df.loc[:,['experience_bin','target','gender']]","7ebe6d17":"sns.catplot(data=df1,\n           y=\"experience_bin\",\n           hue=\"target\",\n           kind=\"count\",\n           col=\"gender\");","253b1318":"del([df,df1])","709115f6":"def process_imputation(df):\n    cmpny_type_mode=df['company_type'].mode()[0]\n    df['company_type'].fillna(cmpny_type_mode,inplace=True)\n    print (f\"company_type missing values filled with: {cmpny_type_mode}\\n\")\n    unique_cmpny_type=df.company_type.unique()\n    group_cmpny_type=df.groupby('company_type')\n    for cmpny in unique_cmpny_type:\n        df_group=group_cmpny_type.get_group(cmpny)\n        company_size_mode=df_group['company_size'].mode()[0]\n        idx=df_group[pd.isnull(df_group[\"company_size\"])].index\n        df.loc[idx,\"company_size\"]=company_size_mode\n        print (f\"For company type {cmpny}, missing values for company size filled with: {company_size_mode}\\n\")\n        \n    gender_mod = df[\"gender\"].mode()[0]\n    df[\"gender\"].fillna(gender_mod,inplace=True)\n    print (f\"Missing values for gender filled with: {gender_mod}\\n\")\n    \n    major_disciplie_mode=df[\"major_discipline\"].mode()[0]\n    df[\"major_discipline\"].fillna(major_disciplie_mode,inplace=True)\n    print (f\"Missing values for major_discipline filled with: {major_disciplie_mode}\\n\")\n    \n    education_lvl_mod=df[\"education_level\"].mode()[0]\n    df['education_level'].fillna(education_lvl_mod,inplace=True)\n    print(f\"Missing values for education level filled with: {education_lvl_mod}\\n\")\n    \n    last_new_job_mode=df[\"last_new_job\"].mode()[0]\n    df[\"last_new_job\"].fillna(last_new_job_mode,inplace=True)\n    print (f\"Missing values for last_new_job filled with: {last_new_job_mode}\\n\")\n    \n    enrolled_university_mode=df[\"enrolled_university\"].mode()[0]\n    df[\"enrolled_university\"].fillna(enrolled_university_mode,inplace=True)\n    print(f\"Missing values for enrolled_university filled with: {enrolled_university_mode}\\n\")\n    \n    experience_mode=df[\"experience\"].mode()[0]\n    df[\"experience\"].fillna(experience_mode,inplace=True)\n    print(f\"Missing values for experience filled with {experience_mode}\\n\")\n    return df","cd075c34":"#Process imputation for training data\ndf_train=process_imputation(df_train)","dea5bed6":"print (\"Is there any missing values in training data?\")\ndf_train.isnull().any()","a81f98ec":"#Process imputation for testing data\ndf_test=process_imputation(df_test)","4532cc37":"print (\"Is there any missing values in testing data?\")\ndf_test.isnull().any()","646ea398":"def wrangle_data(df):\n    #Drop below feature since its not contributing much to model training.\n    drop_features=[\"enrollee_id\"]\n    df.drop(drop_features,axis=1,inplace=True)\n\n    #Create 3 major bins for city_development_index using the city_development_index\n    #bin names : poor,average,high\n    def get_bin(inp):\n        bin_range=np.linspace(start=0,stop=1,num=4)\n        if inp <= bin_range[1]:\n            return 1\n        elif bin_range[2] >= inp > bin_range[1]:\n            return 2\n        elif inp <= bin_range[3]:\n            return 3\n    df[\"city_development_index_bin\"]=df[\"city_development_index\"].apply(get_bin)\n    df.drop(\"city_development_index\",inplace=True,axis=1)\n    \n    df['experience'].replace(['>20','<1'],[21,0],inplace=True)\n    df['experience']=df['experience'].apply(pd.to_numeric)\n    \n    df['company_size'].replace(['<10','10\/49','50-99','100-500','500-999','1000-4999','5000-9999','10000+'],\n                              [1,2,3,4,5,6,7,8],inplace=True)\n    \n    df['last_new_job'].replace(['never','1','2','3','4','>4'],list(range(0,6)),inplace=True)\n    \n    #Standardize continuous features\n    df['training_hours']=standardize(df['training_hours'])\n   \n    df=pd.get_dummies(df)\n\n    return df\n    ","587f9143":"#Changing the index of df_test, for creating a total dataframe by appending to training data frame.\n#It's better to include the test dataframe while wrangling data for considering label encoding for entire train + test data\nstart_index=df_train.index.max()+1\nend_index=df_test.index.max()+1\nnew_index_list=list(range(start_index,start_index+end_index))\n\n#Assigning new index, which is starting from end of training index.\ndf_test.index=new_index_list","b3225a6f":"#df_total=df_train + df_test\ndf_total=pd.concat([df_train,df_test],axis=0)\nprint (f\"Shape total data frame:{df_total.shape}\")","dad5eeb5":"#Process wrangling on the total data frame.\ndf_total=wrangle_data(df_total)","90713904":"print (\"Column names in df_total:\\n\")\ndf_total.columns","2cbe14c5":"#df_total.describe().to_csv(\"dummy.csv\")","7524dae0":"#Drop the test data frame from df_input\ndf_train=df_total.drop(new_index_list,axis=0)\nprint (f\"Shape of df_train:{df_train.shape}\")\ndf_test=df_total.loc[new_index_list]\ndf_test.drop(\"target\",axis=1,inplace=True)\nprint (f\"Shape of df_test:{df_test.shape}\")","fe78579c":"x=df_train.drop('target',axis=1)\ny=df_train.target\nprint (f\"Shape of independent features {x.shape} \\nShape of dependent feature {y.shape}\")","ec6f08d3":"#Function for getting the classification report, confusion matrix Area under curve AOC,ROC details\ndef get_perfomance_details(y_pred,y_test):\n    #Classification report\n    print (\"Classification Report:\\n\")\n    print (classification_report(y_true=y_test,y_pred=y_pred))\n    \n    #Draw confusion matrix\n    sns.reset_defaults()\n    plt.figure(figsize=(7,4));\n    sns.heatmap(confusion_matrix(y_test,y_pred),annot=True,cmap=\"GnBu\",fmt=\"g\",cbar=False);\n    plt.title(\"Confusion Matrix\");\n    plt.show()\n    \n    #Find the Area under the curve\n    print (\"\\n----------------\\nAOC ROC details\\n----------------\\n\")\n    rocauc_score=roc_auc_score(y_pred,y_test)\n    #ROC curve\n    fpr,tpr,_=roc_curve(y_test,y_pred)\n    roc_aoc=auc(fpr,tpr)\n    print (f\"AUC score: {rocauc_score}\\nTrue positive rate: {tpr}\\nFalse postive rate: {fpr}\")\n\n    #Draw the ROC curve\n    plt.figure(figsize=(4,4));\n    lw=2\n    plt.plot(fpr,tpr,\n             color='green',\n             lw=lw,\n             label='ROC curve (area=%0.4f)' % roc_aoc);\n    \n    #plot diagonal line  from (0,0) to (1,1), represents fpt=tpr\n    plt.plot([0,1],[0,1],color='lightgrey',lw=lw,linestyle='--');\n    plt.xlim([0.0,1.0]);\n    plt.ylim([0.0,1.0]);\n    plt.xlabel(\"False Positive Rate\");\n    plt.ylabel(\"True Postive Rate\");\n    plt.title(\"Reciever operating characteristic for training data\");\n    plt.legend(loc='lower right')\n    plt.show()","a2718d18":"df_model_results=pd.DataFrame(columns=[\"ModelName\",\"TrainScore\"])\n\ndef store_model_results(modl_name,train_score):\n    global df_model_results\n    row_loc=df_model_results.shape[0]+1\n    df_model_results.loc[row_loc,[\"ModelName\",\"TrainScore\"]]=[modl_name,train_score]\n","389b241b":"df_model_results=df_model_results.iloc[0:0]\n#Since this training set takes some time for training, included pregress bar using tqdm library\nfor model in  tqdm([LogisticRegression(), \n               SVC(),\n               DecisionTreeClassifier(),\n               RandomForestClassifier(),\n               KNeighborsClassifier(),\n               XGBClassifier()]):\n    store_model_results(model.__class__.__name__,\n                       cross_val_score(model,x,y,cv=3).mean())\ndf_model_results.sort_values(\"TrainScore\",ascending=False,inplace=True)\nselected_model=df_model_results.head(1)[\"ModelName\"].values[0]\ndisplay(HTML('<h3>Selected_model: '+ selected_model + '<\/h3>'))\ndf_model_results","16fc0bc7":"print (\"Train Test file splitting..\")\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=1)\nprint (f\"File shapes \\nx_train:{x_train.shape} y_train:{y_train.shape}\\nx_test:{x_test.shape} y_test:{y_test.shape}\")","9d90c828":"model=SVC()\nmodel.fit(x_train,y_train)\nprint (\"Predicting..\")\ny_pred=model.predict(x_test)\nprint (\"prediction completed.\")","222f2139":"get_perfomance_details(y_pred,y_test)","0de69f2a":"#Lets find best hyper parameter for SVC\nparam_grid={'C':[100,1000,10000],\n           'gamma':[0.001,0.0001,0.00001]}\n","819049b9":"grid=GridSearchCV(SVC(),param_grid=param_grid,refit=True,verbose=True,n_jobs=10)","960ed911":"grid.fit(x_train,y_train)\nprint (\"Best parameters from GridSearch: \",grid.best_params_)","1460838a":"y_pred=grid.predict(x_test)\nprint (\"Prediction completed.\")","da785b9a":"get_perfomance_details(y_pred,y_test)","1117b819":"print (f\"Shape of the test file {df_test.shape}\")","de8c849d":"x=df_test\nprint (f\"Shape of independent features {x.shape}\")","4a85cde7":"y_pred=grid.predict(x)","53287377":"y_pred=pd.DataFrame({\"enrollee_id\":test_file_column_id,\n                   \"target\":pd.Series(y_pred)})","6966bf76":"y_pred.to_csv('submission.csv',index=False)\nprint (\"Exported result\")","ad41ec6b":"### 3. Experince vs. chances of job swich.","ca46983a":"### 4. Gender","244f1d4a":"<h4 style='background-color:yellow'>\n    In all company firms , Male dominance is more.<br>\n    Private companies have more male population.<br>\n    In all the education levels male dominance is more. <br>\n    Females tends to work with company having 50-99 employee strength.<br>\n<\/h4>","537132f7":"#  <center>Model evaluation<\/center>","ad348582":"<i>\nPrecision tp\/(tp+fp) : measures the ability of a classifier to identify only the correct instances for each class.<br>\nRecall tp\/(tp+fn) : is the ability of the classifier to find all correct instances per class.<br>\nF1 Score = 2 (precision recall)\/ (precision + recall)<br>\nF1 score is considered a better indicator of the classifier's performance than the regular accuracy measure.<br>\nSupport is the number of actual occurances of the class in the test data set.<br>\n    <\/i>","38aab659":"<h4 style='background-color:yellow'>\nTarget data is more favouring towards 0 class.\n<\/h4>","5e6547cc":"### 8. major_discipline","cb653b6e":"#  <center> Test file prediction <\/center>","06579a20":"#  <center>Dataset description<\/center>","dc9d66ca":"### 2. City","420d6630":"<h4 style='background-color:yellow'>\nMost of the candidates having the experience.\n<\/h4>\n","37818088":"### 10. Company_Size","34e7302b":"### 6. enrolled_university","c9d990d0":"#  <center>Data wrangling    <\/center>","aadbf132":"<h4 style='background-color:yellow'>\nInteger feature. <br>\nIdentifier of the rows.\n<\/h4>","ef11972a":"### 12. last_new_job","229f9b79":"<h4 style='background-color:yellow'>\n2 float <br>\n2 integer<br>\n10 string features\n<\/h4>","8b3ab04a":"#   Model tuning ","902ab456":"### 3. city_development_index","4b247b82":"### 1. enrollee Id","5f45b95a":"### 2. Educational qualifications hold by different types of company types.","d1610ff9":"#  <center> Data Imputation<\/center>","f8146e78":"<h3 style=\"background-color:yellow\">\nMissing values removed from training and test dataset.\n    <\/h3>","4b60c998":"### 14. target (Target Feature)","08bc53a5":"### 5. relevent_experience","fbc7cef6":"<h4 style='background-color:yellow'>\nMost of the people with all kinds of education levels tends to join in Private firms.<br>\n<\/h4>","4d48ad8f":"### 11. company_type","253d54ad":"#### Since the Area under the curve is better than the initial model, we can use this model for further prediction.","78c0e7b7":"### 7. education_level","0ca1d5ea":"<h4 style='background-color:yellow'>\nMost of the people are graduates.<br>\nVery less people having Ph.D\n<\/h4>","c66ceb94":"#  <center> Feature relationships<\/center>","0b5022f1":"#  <center>Exploratory Data Analysis<\/center>","e1c49cd2":"### 13. training_hours","947ecdd4":"#  <center> HR Analytics: Job change of Data scientists<\/center>\n<center>Predict who will move to a new job.<\/center>\n<a href=https:\/\/www.kaggle.com\/arashnic\/hr-analytics-job-change-of-data-scientists>Kaggle link <\/a><br>\n<b>Features<\/b>\n<ul>\n<li>enrollee_id : Unique ID for candidate<\/li>\n<li>city: City code<\/li>\n<li>city_ development _index : Developement index of the city (scaled)<\/li>\n<li>gender: Gender of candidate<\/li>\n<li>relevent_experience: Relevant experience of candidate<\/li>\n<li>enrolled_university: Type of University course enrolled if any<\/li>\n<li>education_level: Education level of candidate<\/li>\n<li>major_discipline :Education major discipline of candidate<\/li>\n<li>experience: Candidate total experience in years<\/li>\n<li>company_size: No of employees in current employer's company<\/li>\n<li>company_type : Type of current employer<\/li>\n<li>lastnewjob: Difference in years between previous job and current job<\/li>\n<li>training_hours: training hours completed<\/li>\n<li>target: 0 \u2013 Not looking for job change, 1 \u2013 Looking for a job change<\/li>\n    <\/ul>","1f28fcc5":"<h3 style='background-color:yellow'>\n    People with experience level 0-15 tends to switch the job mostly. <br>\n    People with experience level 25-20 will less likely switch the job compared to other experience level categories.\n<\/h3>","4a7e4165":"### 9. experience","ba41ef59":"<h4 style='background-color:yellow'>\n    Most of the candidates are from STEM (Science Technology Engineering and Mathematics) background.\n<\/h4>\n","5aad5046":"<h4 style='background-color:yellow'>\n    Majority is the male candidates.\n<\/h4>","7998e3b6":"### 1. Gender preference for company types"}}