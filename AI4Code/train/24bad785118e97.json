{"cell_type":{"646f56ee":"code","9a0f36cc":"code","ea94cafe":"code","c0190830":"code","ff229dfe":"code","7f841a51":"code","989fa0bc":"code","04f7de29":"code","8ca676c4":"code","a2f0be18":"code","badb4bac":"code","9db883ac":"code","7cda6e18":"code","2a92d632":"code","3049413e":"code","013d7cf2":"code","89a0b333":"code","ec8adfab":"code","f3c0c458":"code","ff9d44db":"code","bf7eb1f5":"code","bd876124":"code","d8518b80":"code","c3858ecf":"code","1ce72979":"code","db07f490":"code","68468555":"code","2497a025":"code","d7b391ff":"code","d6a58e7f":"code","e6cc4fb9":"code","fc925c8a":"code","bc64f3e7":"code","e646e4ff":"code","52092e92":"code","71f3b276":"code","035b50f8":"code","b85cf23d":"code","06b65d06":"code","ad8c07a0":"code","abc4127f":"markdown","8736b620":"markdown","b8498b63":"markdown","85546847":"markdown","c3416b09":"markdown","c3574858":"markdown","807c15ea":"markdown","7430b8b2":"markdown","2a7e7b8a":"markdown"},"source":{"646f56ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9a0f36cc":"#Importing dataset\ndf = pd.read_csv('..\/input\/heart.csv')\ndf.head()","ea94cafe":"df.shape","c0190830":"df.info()","ff229dfe":"#Dataset has 14 columns consisting of 13 independant parameters and target as dependent variable\ndf.describe()","7f841a51":"#Grouping data with respect to target and calculating mean\ndf.groupby('target').mean()","989fa0bc":"df.target.value_counts()","04f7de29":"sns.countplot(x = 'target', data = df)\nplt.title('People having disease')\nplt.xlabel('People')\nplt.ylabel('Count')\nplt.xticks([0,1], ['Not having disease', 'Having Disease'])\nplt.show()","8ca676c4":"count_having_disease = df.target[df.target == 1].count()\ncount_not_having_disease = df.target[df.target == 0].count()\npercentage_having_disease = (count_having_disease\/df.target.count())*100\npercentage_not_having_disease = (count_not_having_disease\/df.target.count())*100\nprint('Percentage of people having heart disease = {:.2f}%'.format(percentage_having_disease))\nprint('Percentage of people not having heart disease = {:.2f}%'.format(percentage_not_having_disease))","a2f0be18":"df.sex.value_counts()","badb4bac":"sns.countplot(x = 'sex', data = df)\nplt.title('Sex')\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.xticks([0,1], ['Female', 'Male'])\nplt.show()","9db883ac":"males = df.sex[df.sex == 1].count()\nfemales = df.sex[df.sex == 0].count()\nper_males = (males\/df.sex.count())*100\nper_females = (females\/df.sex.count())*100\nprint('Percentage of males = {:.2f}%'.format(per_males))\nprint(' Percentage of females = {:.2f}%'.format(per_females))","7cda6e18":"pd.crosstab(df.sex, df.target).plot(kind='bar')\nplt.title('Disease vs Sex')\nplt.legend(['Not Having Disease', 'Having Disease'])\nplt.ylabel('No. of persons having disease')\nplt.xlabel('Sex')\nplt.xticks((0,1),['Female', 'Male'], rotation =0)","2a92d632":"male_having_disease = (df.sex[(df.sex ==1) & (df.target ==1)].count()\/df.sex[df.sex == 1].count()) * 100\nfemale_having_disease = (df.sex[(df.sex ==0) & (df.target ==1)].count()\/df.sex[df.sex == 0].count()) * 100\nprint('There are {:.2f}% male and {:.2f}% female having heart disease.'.format(male_having_disease, female_having_disease))","3049413e":"pd.crosstab(df.thalach, df.target).plot(kind = 'bar',figsize = (20,12))\nplt.title('Thalach vs Disease')\nplt.xlabel('Thalach Value')\nplt.ylabel('Count')\nplt.legend(['Not having disease', 'Havving disease'])\nplt.show()","013d7cf2":"#Visualing the maximum heart rate along with age\nplt.scatter(df.age[df.target == 1], df.thalach[df.target == 1], c = 'red')\nplt.scatter(df.age[df.target == 0], df.thalach[df.target == 0])\nplt.xlabel('Age')\nplt.ylabel('Maximum Heart Rate')\nplt.title('Maximum Heart Rate vs Age')\nplt.legend(['Having Disease', 'Not Having Disease'])","89a0b333":"pd.crosstab(df.cp, df.target).plot(kind='bar')\nplt.title('Chest Pain and Disease')\nplt.xlabel('Chest Pain Type')\nplt.ylabel('Count')\nplt.legend(['Not Having Disease', 'Having Disease'])\nplt.xticks((0,1,2,3), ['Typical Angina', 'Atypical Angina', 'Non-Anginal Pain', 'Asymptotic'], rotation=90)\nplt.show()","ec8adfab":"chestpain = []\nfor i in range(0,4):\n    chestpain.append((df.cp[(df.cp == i) & (df.target == 1)].count()\/df.cp[df.cp == i].count())*100)\nchestpain","f3c0c458":"total_no_people_having_type_cp = []\nfor i in range(0,4):\n    total_no_people_having_type_cp.append(df.cp[df.cp == i].count())\n\ntotal_people_having_disease_with_cp_type = []\nfor i in range(0,4):\n    total_people_having_disease_with_cp_type.append(df.cp[(df.cp == i) & (df.target == 1)].count())","ff9d44db":"CP = pd.DataFrame({'Total No. of People having Chest Pain':total_no_people_having_type_cp,\n                  'Total No. of People having disease with Chest Pain':total_people_having_disease_with_cp_type,\n                  'Percentage':chestpain})\nCP","bf7eb1f5":"indices = ['Typical Angina', 'Atypical Angina', 'Non-Anginal Pain', 'Asymptotic']\nCP.set_index(pd.Index(indices), inplace=True)\nCP","bd876124":"pd.crosstab(df.fbs, df.target).plot(kind='bar')\nplt.title('Fasting Blood Sugar vs Disease')\nplt.xlabel('Fasting blood Sugar')\nplt.ylabel('Count')\nplt.xticks((0,1), ['<120 mg\/dl', '>120 mg\/dl'], rotation = 0)\nplt.legend(['Not Having Disease', 'Having Disease'])\nplt.show()","d8518b80":"pd.crosstab(df.slope, df.target).plot(kind='bar')\nplt.title('Slope vs Disease')\nplt.xlabel('Slope Type')\nplt.ylabel('Count')\nplt.legend(['Not Having Disease', 'Having Disease'])\nplt.show()","c3858ecf":"#In this data Chest pain(cp), Slope and thal are actually categorical data\n#Conveting the categoraical values in dummy variable\nchest = pd.get_dummies(df.cp, prefix='cp', drop_first= True) #Exluding first column in dummy varaible to avoid Dummy varaible trap \nth = pd.get_dummies(df.thal, prefix='thal', drop_first=True)\nsl = pd.get_dummies(df.slope, prefix='slope', drop_first=True)","1ce72979":"#Adding the all the parameters\nmerged = pd.concat([df, chest, th, sl], axis = 1)\nmerged.head()","db07f490":"#Dropping thal,cp,slope for data\nmerged.drop(['thal', 'cp', 'slope'], axis = 1, inplace=True)\nmerged.head()","68468555":"#Splitting data into independant and dependant variables\nX = merged.drop('target', axis = 1)\ny = merged.target\nprint(X.head(), y.head())","2497a025":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)","d7b391ff":"#Splitting dataset into traing and test set\n#We will split 80% data into training set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 0)","d6a58e7f":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\nlog_reg_acc = lr.score(X_test, y_test)\nprint('Logistic regression accuracy is{}'.format(lr.score(X_test, y_test)))","e6cc4fb9":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train, y_train)\nknn_acc = knn.score(X_test, y_test)\nprint('2-nn Classifier accuracy is {}'.format(knn.score(X_test, y_test)))","fc925c8a":"#Checking the number of neighbors with max accuracy\nscore_list = []\nfor i in range(1, 20):\n    knnn = KNeighborsClassifier(n_neighbors=i)\n    knnn.fit(X_train, y_train)\n    score_list.append(knnn.score(X_test, y_test))\nscore_list","bc64f3e7":"plt.bar(np.arange(1,20), score_list)\nplt.xticks(np.arange(1,20))\nplt.yticks(np.arange(0,1,.1))","e646e4ff":"print('Maximum score of KNN is {} and for index {}'.format(max(score_list), score_list.index(max(score_list))))","52092e92":"knn_acc = .8688","71f3b276":"from sklearn.svm import SVC\nsv = SVC(random_state=0)\nsv.fit(X_train, y_train)\nsvm_acc = sv.score(X_test, y_test)\nprint('SVC Accuracy is {}'.format(sv.score(X_test, y_test)))","035b50f8":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion='entropy', random_state=0)\ndt.fit(X_train, y_train)\ndt_acc = dt.score(X_test, y_test)\nprint('Decision Tree Accuracy is {}'.format(dt.score(X_test, y_test)))","b85cf23d":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=1000, criterion='entropy', random_state=0)\nrfc.fit(X_train, y_train)\nrfc_acc = rfc.score(X_test, y_test)\nprint('RFC Accuracy is {}'.format(rfc.score(X_test, y_test)))","06b65d06":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)\nnb_acc = nb.score(X_test, y_test)\nprint('NaiveBayes Accuracy is {}'.format(nb.score(X_test, y_test)))","ad8c07a0":"models = ['Logistic Regression', 'KNN', 'SVM', 'Decision Tree', 'Random Forest', 'Naive Bayes']\naccuracy = [log_reg_acc, knn_acc, svm_acc, dt_acc, rfc_acc, nb_acc]\ncolors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nplt.figure(figsize=(16,5))\nplt.ylabel(\"Accuracy \")\nplt.xlabel(\"Algorithms\")\nplt.yticks(np.arange(0,2,.1))\nplt.grid()\nsns.barplot(x=models, y=accuracy, palette=colors)\nplt.show()","abc4127f":"**Building machine learning models**","8736b620":"6. **Naive Bayes Model**","b8498b63":"2. **KNN Model**","85546847":"4. **Decision Tree Model**","c3416b09":"**Comparing Models**","c3574858":"5. **Random Forest Classification Model**","807c15ea":"1. **Logistic Regression Model**","7430b8b2":"KNN has max accuracy of 86.88% for 8, 18 and 19 neighbors","2a7e7b8a":"3. **SVM Model**"}}