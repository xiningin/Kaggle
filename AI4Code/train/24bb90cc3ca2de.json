{"cell_type":{"2ac2549b":"code","b4e2ac8d":"code","6135a325":"code","ffb0120c":"code","b6f0b9f2":"code","9ce04288":"code","c2ecf56a":"code","23beb0eb":"code","2b26cfb0":"code","fdcae627":"code","0a698490":"code","e4dac2cc":"code","e36e3393":"code","1e4d0328":"code","c6762db9":"code","64ba4fba":"code","11c5301f":"code","27706bcd":"code","105d3d44":"code","e25cd54d":"code","1ba75e13":"code","bdab577e":"code","3294a512":"code","8fa7dec9":"code","7f28bfc5":"code","27e95f13":"code","58838068":"markdown","e7296c0f":"markdown","94cfea47":"markdown","92be1030":"markdown","13d99314":"markdown","63cd2f3f":"markdown","693be575":"markdown","b659c052":"markdown","15356d80":"markdown","569cc7c0":"markdown"},"source":{"2ac2549b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b4e2ac8d":"#Importing the traing_dataset \ntrain = pd.read_csv(\"..\/input\/train.csv\")\n\n#Importign the Testing dataset\ntest = pd.read_csv(\"..\/input\/test.csv\")","6135a325":"#reading the top 5 lines in the data \n\ntrain.head()","ffb0120c":"#reading the last 5 lines in the train dataset\ntrain.tail()","b6f0b9f2":"#we can check the dimensions of the dataset\n\ntrain.shape\nprint(\"There are {} rows & {} columns in the train dataset.\".format(train.shape[0], train.shape[1]))","9ce04288":"train.dtypes #datatypes in the dataset","c2ecf56a":"train.describe() # we can use **describe** function to get the description of the numeric data","23beb0eb":"import seaborn as  sns\nimport plotly \nimport plotly.offline as pyoff\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot, plot # saving file (plot), plotting (iplot)\\n\",\nimport plotly.graph_objs as go\nimport squarify #for tree  maps\\n\",\n%matplotlib inline","2b26cfb0":"import plotly_express as px \n","fdcae627":"#to check the sum of missing values \nprint(\"The no.of missing values in the traing datset are {}\\n\".format(train.isnull().sum()))","0a698490":"#we can use the Imputaion methods or fillna methods over here to fill missing values \nfrom sklearn.preprocessing import Imputer\n\ntrain['Age'].fillna(method= 'pad', inplace=True)\n\nprint(\"The no.of missing values in Age column after filling missing values {}\\n\" .format(train['Age'].isnull().sum()))","e4dac2cc":"train.describe()","e36e3393":"train.dtypes","1e4d0328":"train.head()","c6762db9":"# Functions that returns the title from a name. All the name in the dataset has the format \"Surname, Title. Name\"\ndef get_title(name):\n    if '.' in name:\n        return name.split(',')[1].split('.')[0].strip()\n    else:\n        return 'Unknown'\n\n# A list with the all the different titles\ntitles = sorted(set([x for x in train.Name.map(lambda x: get_title(x))]))\nprint('Different titles found on the dataset:')\nprint(len(titles), ':', titles)\nprint()\n\n# Normalize the titles, returning 'Mr', 'Master', 'Miss' or 'Mrs'\ndef replace_titles(x):\n    title = x['Title']\n    if title in ['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Rev', 'Sir']:\n        return 'Mr'\n    elif title in ['the Countess', 'Mme', 'Lady']:\n        return 'Mrs'\n    elif title in ['Mlle', 'Ms']:\n        return 'Miss'\n    elif title =='Dr':\n        if x['Sex']=='male':\n            return 'Mr'\n        else:\n            return 'Mrs'\n    else:\n        return title\n\n# Lets create a new column for the titles\ntrain['Title'] = train['Name'].map(lambda x: get_title(x))\n# train.Title.value_counts()\n# train.Title.value_counts().plot(kind='bar')\n\n# And replace the titles, so the are normalized to 'Mr', 'Miss' and 'Mrs'\ntrain['Title'] = train.apply(replace_titles, axis=1)\n\n# Check that the number of Mr, Mrs and Miss are the same that 'male' and 'female'\nprint('Title column values. Males and females are the same that for the \"Sex\" column:')\nprint(train.Title.value_counts())\n\n# Plot the result\ntrain.Title.value_counts().plot(kind='bar')","64ba4fba":"train.describe()","11c5301f":"cat_cols  = ['Pclass','Sex','SibSp','Parch','Embarked','Title']","27706bcd":"def int_to_object(data, col_names):\n    for i in col_names:\n        data[i].astype(str)\n        \n    return(data.dtypes)","105d3d44":"int_to_object(data=train, col_names= cat_cols) #passing the function created with the columns to convert.\n\ntrain['Age'].astype('int64')","e25cd54d":"final_data = pd.get_dummies(data= train, columns=cat_cols, drop_first=True)\nfinal_data.shape","1ba75e13":"drop_cols = ['PassengerId','Cabin','Name','Ticket']\n\nfinal = final_data.drop(columns=drop_cols, axis=1, inplace=True)","bdab577e":"final_data.describe()","3294a512":"final_data['Age'] = pd.qcut(final_data['Age'], 5)\nfinal_data['Fare'] = pd.cut(final_data['Fare'],4)","8fa7dec9":"final_data.shape","7f28bfc5":"final_data.head()","27e95f13":"#splitting into train and test \n\nx= final_data.loc[:, 1:]","58838068":"* **Numeric Descriptive stats**","e7296c0f":"* Understanding the Distribution of the data.\n    \n**Univariate-Analysis**","94cfea47":"In this kernel we'll learn how to build a model.\n\nWe'll start by reading the files of the dataset. \n\n**Objective**: To predict the survials in the titanic tragedy. \nAs we know it is an classification problem.","92be1030":"* **We should do hot label encoding for the categorical**","13d99314":"* We can observe that the passengers are more between AGE 18-32.","63cd2f3f":"* Intrepreataing the descriptive stats:\n    - PassengerId: This is just the numbers of the tickets in the data. All are unique values.\n    - Survived : It is our target feature.  '1'- Survived, '0'- Not-survived.\n    - Age : No outliars in the age & max aged is 80.\n    - Pclass : Cann't get anything from this since this is an Class of categories. \n    - Fare : It is the fare of the passeneger for eah ticket.","693be575":"This Includes : \n* **Dealing with Missing values**","b659c052":"* **Pre-Processing the data**","15356d80":"We can observe that here are many missing values in the Age column & Cabin column. \n","569cc7c0":"* EXPLORATORY DATA ANALYSIS & VISUALISATION**"}}