{"cell_type":{"27c1bce6":"code","206eddf2":"code","a2de6bc4":"code","3f8365bd":"code","fec489b0":"code","caba3e7a":"code","eb382103":"code","1c41293f":"code","44f7d89c":"code","d41e8e35":"code","8254a1ce":"code","21d7677a":"code","08bbd991":"code","4b42b988":"code","51a5fa16":"code","8b2a0069":"code","2c39bf51":"code","e7211668":"code","3836f845":"code","b45dcb68":"code","57453272":"code","8d8af7c0":"code","925cce17":"code","ef568ae3":"code","24f7ff32":"code","c3fed5e8":"code","70b34b08":"code","4a6b460d":"code","4cd10539":"code","b4d26571":"code","a14ac1ed":"code","509c8792":"code","add95bfc":"code","8c8b5b20":"code","c05d36ab":"code","75ba7727":"code","12692efd":"code","910eca62":"code","c75ccd09":"markdown","23f9bba0":"markdown","d9a26278":"markdown","245ab713":"markdown","2b584380":"markdown","fc21abd1":"markdown","b5d581bf":"markdown","4ce982cb":"markdown","5a4fd078":"markdown","f0201eae":"markdown","7962519d":"markdown","80527ba5":"markdown","0cd0ae3f":"markdown"},"source":{"27c1bce6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","206eddf2":"train_set = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_set = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","a2de6bc4":"train_set.head()","3f8365bd":"train_set = train_set.set_index('PassengerId')","fec489b0":"train_set.head()","caba3e7a":"train_set.info()","eb382103":"train_set.describe()","1c41293f":"plt.bar(train_set['Pclass'].unique(), train_set['Pclass'].value_counts())","44f7d89c":"bar = plt.bar(train_set['Sex'].unique(), train_set['Sex'].value_counts())\nbar[0].set_color('blue')\nbar[1].set_color('pink')\nplt.show()","d41e8e35":"train_set['Age'].hist()","8254a1ce":"df = pd.DataFrame({'Gender': train_set['Sex'], 'Survived': train_set['Survived']})\ntotal_counts = df.groupby(['Survived', 'Gender']).size()\ntotal_counts.plot.bar(rot=0)","21d7677a":"def correlation_heatmap(train):\n    correlations = train.corr()\n    \n    fig, ax = plt.subplots(figsize=(16,16))\n    sb.heatmap(correlations, vmax=1.0, center=0, fmt='.2f', square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\":.70})\n    plt.show()\ncorrelation_heatmap(train_set)","08bbd991":"def values_drop(set):\n    set = set.drop('Name', axis=1)\n    set = set.drop('Ticket', axis=1)\n    set = set.drop('Cabin', axis=1)\n    set = set.dropna()\n    return set\ndef values_drop_test(set):\n    set = set.drop('Name', axis=1)\n    set = set.drop('Ticket', axis=1)\n    set = set.drop('Cabin', axis=1)\n    return set\ntrain_set = values_drop(train_set)\ntest_set = values_drop_test(test_set)","4b42b988":"test_set = test_set.replace(np.nan, 0)","51a5fa16":"train_set.head()","8b2a0069":"survived = train_set[['Survived']]\ntrain_set = train_set.drop(\"Survived\", axis=1)","2c39bf51":"sex_cat = train_set[[\"Sex\"]]\nemb_cat = train_set[[\"Embarked\"]]","e7211668":"from sklearn.preprocessing import OneHotEncoder\nOHE = OneHotEncoder()\nsex_cat_encoded = OHE.fit_transform(sex_cat)\nsex_cat_encoded.toarray()","3836f845":"emb_cat_encoded = OHE.fit_transform(emb_cat)\nemb_cat_encoded.toarray()","b45dcb68":"train_num = train_set.drop([\"Sex\", \"Embarked\"], axis=1)","57453272":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nnum_attribs = list(train_num)\ncat_attribs = [\"Sex\", \"Embarked\"]\n\nfull_pipeline = ColumnTransformer([\n    (\"num\", StandardScaler(), num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs)\n])\ntrain_prepared = full_pipeline.fit_transform(train_set)","8d8af7c0":"test_prepared = full_pipeline.fit_transform(test_set)","925cce17":"X = train_prepared\nY = survived","ef568ae3":"from sklearn.linear_model import SGDClassifier\nSGDclf = SGDClassifier()\nSGDclf.fit(X, Y.values.ravel())","24f7ff32":"from sklearn.metrics import mean_squared_error\ntitanic_pred = SGDclf.predict(X)\nsgd_mse = mean_squared_error(Y, titanic_pred)\nsgd_rmse = np.sqrt(sgd_mse)\nsgd_rmse","c3fed5e8":"from sklearn.svm import LinearSVC\nsvcclf = LinearSVC(max_iter=5000)\nsvcclf.fit(X, Y.values.ravel())","70b34b08":"svc_pred = svcclf.predict(X)\nsvc_mse = mean_squared_error(Y, svc_pred)\nsvc_rmse = np.sqrt(svc_mse)\nsvc_rmse","4a6b460d":"from sklearn.tree import DecisionTreeClassifier\ntree_clf = DecisionTreeClassifier()\ntree_clf.fit(X, Y.values.ravel())","4cd10539":"tree_pred = tree_clf.predict(X)\ntree_mse = mean_squared_error(Y, tree_pred)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","b4d26571":"from sklearn.ensemble import RandomForestClassifier\nrand_tree = RandomForestClassifier(random_state=42)\nrand_tree.fit(X, Y.values.ravel())","a14ac1ed":"rand_pred = rand_tree.predict(X)\nrand_mse = mean_squared_error(Y, rand_pred)\nrand_rmse = np.sqrt(rand_mse)\nrand_rmse","509c8792":"from sklearn.model_selection import GridSearchCV\nparam_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}\ngrid_search = GridSearchCV(rand_tree, param_grid, cv=5)\ngrid_search.fit(X, Y.values.ravel())","add95bfc":"grid_search.best_params_","8c8b5b20":"rand_tree_best = RandomForestClassifier(random_state=42, max_features='sqrt', n_estimators= 500, max_depth=8, criterion='gini')","c05d36ab":"rand_tree_best.fit(X, Y.values.ravel())","75ba7727":"rand_pred = rand_tree_best.predict(X)\nrand_mse = mean_squared_error(Y, rand_pred)\nrand_rmse = np.sqrt(rand_mse)\nrand_rmse","12692efd":"final_model = rand_tree_best\nfinal_pred = final_model.predict(test_prepared)\nfinal_pred","910eca62":"output = pd.DataFrame({'PassengerId': test_set.PassengerId, 'Survived': final_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","c75ccd09":"# Titanic Survival Prediction\nThe reason for this analysis and model is to predict wether or not a person on the titanic will survive or not based on various features such as age, class, sex and where they embarked.","23f9bba0":"I am going to change the index to Passenger ID as this is the same as the index we have already making the column redundent.","d9a26278":"## Bi-variate Analysis\nNow I will compare features against each other to try and find some correlation between them.","245ab713":"## Variable Identification\nFirst I will explore each variable first, I want to find out the data type of each and how many null entries I have in the dataset.","2b584380":"## Encode Categorical features\nNow I will use One Hot Encoding to chnage the Sex and Embarked columns to be continuous variables.","fc21abd1":"I will use Grid Search to find the best parameters with the decision tree model as this has the best RMSE out of all my models that I compared.","b5d581bf":"This shows that you are more likely to survive if you are a woman as they were sent of the ship first and over 5 times more likley to not survive if you are a man.","4ce982cb":"This shows we have a few text columns and quite a big handful of null entries. Also Cabin has a huge amount of null entires so I will have to do something about this.","5a4fd078":"## Univariate Analysis\nNow I will visualize some features to try and find some outliers and see if we can find some interesting stats.","f0201eae":"Final predictions on the test set.","7962519d":"## Train Models\nNow I will train a few models and compare them","80527ba5":"Here I create a full pipeline of transformations so I can easily call it on new entries and exisitng ones.","0cd0ae3f":"## Missing Values\nNow I will treat the missing values by first removing the redundant columns like Name, Ticket and Cabin aswel as removing the little handful of null rows."}}