{"cell_type":{"f383f311":"code","3234fa09":"code","04e079dd":"code","5df16f87":"code","fb59f8c0":"code","b477c83a":"code","3f3dd02e":"markdown","7df8c79b":"markdown","3e838260":"markdown","15db0bc9":"markdown","50cce231":"markdown","44a07093":"markdown","cdee76ce":"markdown","199d9e85":"markdown","33596036":"markdown","cfcfa586":"markdown","dae73c1e":"markdown","9bdf8a73":"markdown","2acc1ddc":"markdown","9b5a8150":"markdown","495a7925":"markdown","9d5e3a2e":"markdown","7cea481a":"markdown","d811b968":"markdown","5621ca1d":"markdown","3e6a5c9d":"markdown","c0e8e122":"markdown","53394b69":"markdown"},"source":{"f383f311":"# Placer ici vos imports pour la totalit\u00e9 du TP\nimport math\nimport pandas as pd\nimport random as rd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import neighbors","3234fa09":"# param\u00e8tres globaux\n","04e079dd":"def separation(x,y):\n    if (y < (x\/3)*(2+(math.cos(x\/6)))) :\n        return 'A'\n    else :\n        return 'B'\n    \ndef donneesSimples(n,f):\n    abscisse = np.random.random(n)*100\n    ordonnee = np.random.random(n)*100\n    d = pd.DataFrame({\"abscisse\":abscisse,\"ordonnee\":ordonnee})\n    d[\"classe\"] = d.apply(lambda ligne:f(ligne[\"abscisse\"],ligne[\"ordonnee\"]),axis = 1)\n    return d\n\nd = donneesSimples(300,separation)\nd.head(10)","5df16f87":"\ndef representation(d):\n    sns.scatterplot(d[\"abscisse\"],d[\"ordonnee\"],hue=d[\"classe\"])\n    \nrepresentation(d)\n","fb59f8c0":"def creerBases(d):\n    classe = d[\"classe\"]\n    points = d.loc[:,[\"abscisse\",\"ordonnee\"]]\n    train_X, test_X, train_Y, test_Y = train_test_split(points,classe,test_size = 0.2,train_size = 0.8,stratify = None)\n    return train_X, test_X, train_Y, test_Y\n\ntrain_X, test_X, train_Y, test_Y = creerBases(d)","b477c83a":"def knn(k,xtrain,ytrain):\n    knn = neighbors.KNeighborsClassifier(n_neighbors=k)\n    knn.fit(xtrain, ytrain)\n        \ndef ColorationPlan(classifieur,NbPts):\n    fig, axes = plt.subplots(1,figsize=(20,12))\n    axes.set_ylim([0,100])\n    axes.set_xlim([0,100])\n    sns.scatterplot(x =\"abscisse\", y =\"ordonnee\",data=train_X)\n","3f3dd02e":"\n## Expliquer la raison de la diff\u00e9rence observ\u00e9e","7df8c79b":"## Cr\u00e9ation d'un bruit\nEtudier et expliquer le code suivant :\n```{.python}\ndef genere_separation_bruit(mu, sigma):\n  def separation_bruit(x,y ):\n    classe = 'A' if y<f(x) else 'B'\n    if abs(y-f(x)) <norm.ppf(np.random.rand(),mu, sigma):\n        classe = 'A' if classe == 'B' else 'B'\n    return classe\n  return lambda x,y: separation_bruit(x,y)\n```","3e838260":"---\n# Construction d'un jeu de donn\u00e9es simple\n---","15db0bc9":"---\n# Effet du bruit\nDans cette partie on va examiner la r\u00e9sistance au bruit de l'algorithme, et son influence sur le choix du nombre de voisins.\n---","50cce231":"......","44a07093":"Explications : ....","cdee76ce":"# Repr\u00e9senter la surface de s\u00e9paration en fonction du nombre de voisins\n## Fonction de coloration\nEcrire une fonction ```colorationPlan``` qui produit une repr\u00e9sentation [0 ; 100]x[0 ; 100] color\u00e9e en fonction de la classe attribu\u00e9e par votre classifieur.\nen fonction de la classe attribu\u00e9e par votre classifieur \u00e0 chacun de ses points.\n- Entr\u00e9es : \n    - ```classifieur``` une fonction de classification\n    - ```NbPts``` nombre de points \u00e0 prendre dans chaque direction pour discr\u00e9tiser [0 ; 100]x[0 ; 100]\n- Affichage : la coloration du carr\u00e9 demand\u00e9e en utilisant par exemple un ```scatterplot```\n\n## Observer et analyser l'influence du choix de 'k' sur la classification obtenue\nPour diff\u00e9rentes valeurs de ```k``` dans le classifieur, utiliser la fonction ```colorationPlan``` en superposant sur le graphique la ligne de s\u00e9paration th\u00e9orique (l'\u00e9quation du d\u00e9but) en utilisant par exemple un ```lineplot```\n","199d9e85":"# Passez temporairement le nombre d'\u00e9chantillons de la base de donn\u00e9es de d\u00e9part \u00e0 100 puis \u00e0 700\n- Observer l'influence de la quantit\u00e9 de donn\u00e9es sur les valeurs optimales des param\u00e8tres, expliquer\n- Observer l'influence de la quantit\u00e9 de donn\u00e9es sur la qualit\u00e9 du r\u00e9sultat obtenu, expliquer\n- Observer l'influence de la quantit\u00e9 de donn\u00e9es sur le temps de calcul, expliquer","33596036":"## Analyser l'effet de la force du bruit sur les meilleurs param\u00e8tres du mod\u00e8le","cfcfa586":"....","dae73c1e":"# Observer la dif\u00e9rence de qualit\u00e9 entre :\n- Apprendre en utilisant toutes les observations (x, y, u1, u2, u3, u4, u5)\n- Apprendre en n'utilisant que les observations (x,y)","9bdf8a73":"## G\u00e9n\u00e9ration des donn\u00e9es\nUtiliser le code pr\u00e9c\u00e9dent pour g\u00e9n\u00e9rer 500 donn\u00e9es bruit\u00e9es, et analyser \u00e0 l'aide de graphiques l'effet du param\u00e8tre ```et```","2acc1ddc":"---\n# Influence des corr\u00e9lations entre les attributs\n---\n    On travaille \u00e0 nouveau sur une base de onn\u00e9es non bruit\u00e9e. Ajouter 5 colonnes d\u00e9finies par :\n- U1 :   $+30 \\times X + 0.1 \\times Y$\n- U2 :   $-400 \\times X - 0.01 \\times Y$\n- U3 :   $-70 \\times X + 0.12 \\times Y$\n- U4 :   $-28 \\times X + 1.5 \\times Y$\n- U3 :   $+510 \\times X - 1.2 \\times Y$  \n\nRemettre la colonne ```classe``` en derni\u00e8re colonne.","9b5a8150":"## Conclure, et v\u00e9rifier l'importance des autres param\u00e8tres","495a7925":"## En utilisant scikit-learn, s\u00e9parer ```donnees``` en deux ensembles\nEcrire la fonction , fonction ```creerBases``` qui s\u00e9pare la base de donn\u00e9es en :\n- apprentissage (et validation) : 80%\n- test 20%  \n \n**NB** : l'ensemble d'apprentissage servira \u00e9galement d'ensemble de validation puisqu'on utilisera une validation crois\u00e9e","9d5e3a2e":"## Ecrire une fonction ```separation```\n- Entr\u00e9e :  un couple (x, y) de flottants\n- Sortie : 'A' si y<f(x)  et 'B' sinon, o\u00f9 $f(x) = \\frac{x}{3}*\\left(2+\\cos\\left(\\frac{x}{6}\\right)\\right)$\n\n## Ecrire une fonction ```donneesSimples``` \n- Entr\u00e9e : \n    - ```N``` un entier \n    - ```f``` une fonction prenant en entr\u00e9e deux flottants\n- Sortie : un dataframe de ```N``` \u00e9chantillons de 3 attributs :\n  - ```abscisse``` : tir\u00e9 en al\u00e9atoire uniforme dans [0 ; 100], flottant\n  - ```ordonnee``` : tir\u00e9 en al\u00e9atoire uniforme dans [0 ; 100], flottant\n  - ```classe = f(abscisse, ordonn\u00e9e)```\n- vous *devez* utiliser un apply de la fonction s\u00e9paration\n  \n## Ecrire une fonction ```representation```\nCette fonction g\u00e9n\u00e8re une repr\u00e9sentation graphique des donn\u00e9es dans le plan\n\n## Cr\u00e9er une BD ```donnees``` de 300 donn\u00e9es\n- par application de ```donneesSimples(300, separation)```\n\n\n## Repr\u00e9senter la base de donn\u00e9e graphiquement","7cea481a":"# Th\u00e9orie et sa mise en pratique dans sklearn\n- Rappeler le fonctionnement de la classification par knn\n- Expliquer les variations propos\u00e9es par 'algorithm'\n- Expliquer l'influence de 'p' dans la distance de Minkowski (exemples \u00e0 l'appui)\n- Expliquer l'influence de 'weight' (exemples \u00e0 l'appui)","d811b968":"---\n# Merci d'avoir suivi ce TP, j'esp\u00e8re qu'il vous a aid\u00e9 \u00e0 mieux appr\u00e9hender l'utilisation de knn, et vous a permis de faire quelques pas dans le domaine *passionnant* de l'apprentissage artificiel","5621ca1d":"## Recherche des param\u00e8tres optimaux\n- utiliser une gridsearch pour d\u00e9terminer les meilleurs param\u00e8tres, expliquer la valeur de cv\n- valider votre apprentissage sur l'ensemble de validation\n- ne pas oublier de comparer la qualit\u00e9 obtenue sur l'ensemble de test et sur l'ensemble de validation","3e6a5c9d":"## Utiliser un preprocessing adapt\u00e9 sur les donn\u00e9es afin que la qualit\u00e9 obtenue en apprenant sur le jeu de donn\u00e9es (x, y, u1, u2, u3, u4, u5) soit comparable \u00e0 celle obtenue en n'utilisant que (x, y)... expliquer\n","c0e8e122":"## Commenter\n- Essayer d'expliquer les r\u00e9sultats obtenus\n- Entre deux r\u00e9sultats \u00e9quivalents pour deux valeurs de 'k' diff\u00e9rentes, lequel choisir ?","53394b69":"# Introduction \u00e0 knn\n---\nLe but de ce TP est de mieux appr\u00e9hender l'apprentissage via une m\u00e9thode type 'plus proches voisins'. \n--- \n\n## Conseils\n- Pour chaque question, essayer d'\u00e9crire des fonctions plut\u00f4t que des scripts\n- Eviter d'avoir deux fonctions qui portent le m\u00eame nom (red\u00e9finition de la fonction), pr\u00e9f\u00e9rer ajouter un param\u00e8tre de choix"}}