{"cell_type":{"bb45291c":"code","afa71fa4":"code","26b4d324":"code","9667721a":"code","95494ce5":"code","a17f2aaa":"code","1ef28d0a":"code","d62b09d3":"code","390949e7":"code","31d5d01d":"code","b92ca302":"code","ab64304d":"code","36ce7d6f":"code","719df1a8":"code","c24e43fb":"code","ae11814a":"code","cc6861a2":"code","002ad925":"code","9774feab":"code","a57e3aae":"code","ad5c0463":"code","0c33751a":"code","d9660c54":"code","aed786a2":"code","547a47d9":"code","dc6d52df":"code","fe4e6adf":"code","d4ee692d":"code","b92b04b5":"code","b59ac515":"code","dd8b98d0":"code","d1f3c0bb":"code","f5f0f73a":"code","a150e298":"code","bf149ca1":"code","d702fdd1":"code","292d20a7":"code","56ddf037":"code","d1f9f6ef":"code","e5e2f055":"markdown","96d36c1e":"markdown","5edb5b29":"markdown","a8ced1cd":"markdown","10082919":"markdown","6d043307":"markdown","c1b1974e":"markdown","6ca812d9":"markdown","e3316f8f":"markdown","0fe3fc92":"markdown","30a0e596":"markdown","afa1466a":"markdown","51e6e34b":"markdown","b97ee6c0":"markdown","d0aa1f3f":"markdown","dafa5e15":"markdown"},"source":{"bb45291c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afa71fa4":"data = pd.read_csv(\"\/kaggle\/input\/student-performance-data-set\/student-por.csv\")\ndata.head()","26b4d324":"data.columns","9667721a":"data.shape","95494ce5":"data.info()","a17f2aaa":"data[\"school\"].value_counts()","1ef28d0a":"from sklearn.model_selection import StratifiedShuffleSplit\n\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2)\nfor train_index, test_index in split.split(data, data[\"school\"]):\n    strat_train_set = data.loc[train_index]\n    strat_test_set = data.loc[test_index]","d62b09d3":"strat_test_set[\"school\"].value_counts()\/len(strat_test_set)","390949e7":"data[\"school\"].value_counts()\/len(data)","31d5d01d":"train = strat_train_set.copy()","b92ca302":"train.head()","ab64304d":"train.describe()","36ce7d6f":"numeric = ['age', 'Medu', 'Fedu', 'traveltime', 'studytime','failures', 'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2', 'G3']\n\ntrain[numeric].hist(figsize=(20,17))","719df1a8":"fig, ax = plt.subplots(figsize=(15,15))  \nsns.heatmap(train.corr(), annot=True, vmin=-1, ax=ax)","c24e43fb":"categorical = []\n\nfor column in train.columns:\n    if column not in numeric:\n        categorical.append(column)\n        \ncategorical","ae11814a":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.compose import ColumnTransformer\n\ncat = ColumnTransformer([('check', OrdinalEncoder(), categorical)],remainder='passthrough')","cc6861a2":"train_tr = cat.fit_transform(train)\ntrain_tr = pd.DataFrame(train_tr, columns=(categorical + numeric))","002ad925":"fig, ax = plt.subplots(figsize=(25, 25))  \nsns.heatmap(train_tr.corr(), annot=True, vmin=-1, ax=ax)","9774feab":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler","a57e3aae":"nominal = ['Mjob', 'Fjob', 'reason', 'guardian']\nbinary = []\n\nfor cat in categorical:\n    if cat not in nominal:\n        binary.append(cat)\nbinary","ad5c0463":"to_scale = ['age', 'absences', 'G1', 'G2']\n\ntrain_x = train.drop(['G3'], axis=1)\ntrain_labels = train['G3'].copy()","0c33751a":"full_pipeline = ColumnTransformer([(\"bin\", OrdinalEncoder(), binary),\n                                   (\"cat\", OneHotEncoder(), nominal),\n                                  (\"num\", StandardScaler(), to_scale)], remainder='passthrough')\n\ntrain_encoded = full_pipeline.fit_transform(train_x)","d9660c54":"train_enc = pd.DataFrame(train_encoded)\ntrain_enc.describe()","aed786a2":"X = train_encoded\nm = X.shape[0]\n\nX_b = np.c_[np.ones((m, 1)), X]\nX_b","547a47d9":"y = train_labels\n#best_theta = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\nbest_theta = np.linalg.pinv(X_b).dot(y)  #used pseudoinverse instead of inverse\nbest_theta","dc6d52df":"test = strat_test_set\n\ntest_x = train.drop(['G3'], axis=1)\ntest_labels = train['G3'].copy()","fe4e6adf":"test_encoded = full_pipeline.transform(test_x)\ntest_encoded","d4ee692d":"X_bT = np.c_[np.ones((m, 1)), test_encoded]\nX_bT","b92b04b5":"y_predict = X_bT.dot(best_theta)\ny_predict","b59ac515":"from sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(test_labels, y_predict)\nrmse = np.sqrt(mse)\nrmse","dd8b98d0":"from sklearn.linear_model import LinearRegression","d1f3c0bb":"lin = LinearRegression()\nlin.fit(train_encoded, train_labels)","f5f0f73a":"lin.intercept_, lin.coef_","a150e298":"predictions = lin.predict(test_encoded)","bf149ca1":"mse_lin = mean_squared_error(test_labels, predictions)\nrmse_lin = np.sqrt(mse_lin)\nrmse_lin","d702fdd1":"alpha = 0.01 # learning rate\nn_iterations = 20000\nn = X_b.shape[1]","292d20a7":"y = y.to_numpy().reshape(519,1)\n\ndef gradient_descent(alpha, x, y, numIterations):\n    m = x.shape[0] # number of samples\n    theta = np.random.randn(n,1)\n    x_transpose = x.transpose()\n    for iter in range(0, numIterations):\n        hypothesis = np.dot(x, theta)\n        loss = hypothesis - y\n        \n        gradient = np.dot(x_transpose, loss) \/ m         \n        theta = theta - alpha * gradient  # update\n    return theta","56ddf037":"theta = gradient_descent(alpha, X_b, y, n_iterations)\ntheta","d1f9f6ef":"y_predict = X_bT.dot(theta)\n\nmse_gd = mean_squared_error(test_labels, y_predict)\nrmse_gd = np.sqrt(mse_gd)\nrmse_gd","e5e2f055":"In case of Linear Regression all three approaches give us the same result. Even though the LinearRegression model from sklearn is a lot easier to use.","96d36c1e":"This dataset was published by:\nP. Cortez and A. Silva. Using Data Mining to Predict Secondary School Student Performance. In A. Brito and J. Teixeira Eds., Proceedings of 5th FUture BUsiness TEChnology Conference (FUBUTEC 2008) pp. 5-12, Porto, Portugal, April, 2008, EUROSIS, ISBN 978-9077381-39-7.","5edb5b29":"There are no missing values, that makes the preparation of this dataset much easier. But still there are a lot of features that have to be properly encoded. Before I start to learn more about this dataset I'm going to put the test set aside.","a8ced1cd":"The full pipeline includes:\n* OrdinalEncoder to encode binary categorical variables\n* OneHotEncoder to encode nominal categorical variables\n* StandardScaler to standardize numerical variables, not encoded ordinal variables though","10082919":"# Attribute Information:\n\n\n* 1 school - student's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)\n* 2 sex - student's sex (binary: 'F' - female or 'M' - male)\n* 3 age - student's age (numeric: from 15 to 22)\n* 4 address - student's home address type (binary: 'U' - urban or 'R' - rural)\n* 5 famsize - family size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)\n* 6 Pstatus - parent's cohabitation status (binary: 'T' - living together or 'A' - apart)\n* 7 Medu - mother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n* 8 Fedu - father's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n* 9 Mjob - mother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n* 10 Fjob - father's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n* 11 reason - reason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')\n* 12 guardian - student's guardian (nominal: 'mother', 'father' or 'other')\n* 13 traveltime - home to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)\n* 14 studytime - weekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)\n* 15 failures - number of past class failures (numeric: n if 1<=n<3, else 4)\n* 16 schoolsup - extra educational support (binary: yes or no)\n* 17 famsup - family educational support (binary: yes or no)\n* 18 paid - extra paid classes within the course subject (Math or Portuguese) (binary: yes or no)\n* 19 activities - extra-curricular activities (binary: yes or no)\n* 20 nursery - attended nursery school (binary: yes or no)\n* 21 higher - wants to take higher education (binary: yes or no)\n* 22 internet - Internet access at home (binary: yes or no)\n* 23 romantic - with a romantic relationship (binary: yes or no)\n* 24 famrel - quality of family relationships (numeric: from 1 - very bad to 5 - excellent)\n* 25 freetime - free time after school (numeric: from 1 - very low to 5 - very high)\n* 26 goout - going out with friends (numeric: from 1 - very low to 5 - very high)\n* 27 Dalc - workday alcohol consumption (numeric: from 1 - very low to 5 - very high)\n* 28 Walc - weekend alcohol consumption (numeric: from 1 - very low to 5 - very high)\n* 29 health - current health status (numeric: from 1 - very bad to 5 - very good)\n* 30 absences - number of school absences (numeric: from 0 to 93)\n\n \n* 31 G1 - first period grade (numeric: from 0 to 20)\n* 31 G2 - second period grade (numeric: from 0 to 20)\n* 32 G3 - final grade (numeric: from 0 to 20, output target)\n\n","6d043307":"The RMSE of both models is almost identical. Now I want to try out the Batch Gradient Descent. It's result should be the same as the previous two.","c1b1974e":"I want to compare different approaches to find parameters that minimize the cost function. The first approach is normal equation. We calculate the best possible vector of parameters directly for the global minimum (only minimum) of the cost function.\n","6ca812d9":"Next I've used LinearRegression model from sklearn, it implements SVD","e3316f8f":"As we can see below the proportions of students from both schools are almost identical in the full set and in the test set. That means that our sample is representative.","0fe3fc92":"We have a small dataset, so I think that random sampling is not that good idea. I will use 'school' feature to separate the dataset into two strata and perform stratified sampling.","30a0e596":"Most so called numerical variables in this dataset are actually ordinal. Realy numerical are only 'age', 'absences', 'G1', 'G2' and 'G3'. If I'm going to use Gradient Descent to find parameters, than I have to standardize numerical values to make it work faster.","afa1466a":"I hope this notebook can be interesting to anyone, I'm happy to hear how I could improve this project and get more interesting insights:)","51e6e34b":"G1 and G2 are highly correlated with G3. Ideally we should be able to predict G3 without G1 and G2, so I guess I have to test combinations of features to find more information, so that I don't need G1 and G2 that much to predict G3.\n\nAt first I want to encode all non-numerical features and look if there is more correlation. ","b97ee6c0":"So we can get additional information from our categorical variables. Most correlation G3 has with interest in higher education, school, sex, address, internet access and mother's job. I will prepare a total pipeline to encode nominal varables and binary variables separately with OneHotEncoder and OrdinalEncoder. Otherwise we introduce some order to nominal categories, which can lead to mistakes of our model.","d0aa1f3f":"Let's make some predictions and look how good such a simple model can be.","dafa5e15":"Now I am going to work on the training set."}}