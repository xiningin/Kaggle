{"cell_type":{"15c1e185":"code","0b828dfc":"code","8de91ddd":"code","925c8f47":"code","4501f882":"code","91554f31":"code","d8911fb1":"code","ae98eb1c":"code","ea847aa4":"code","afed1c09":"code","ef971646":"code","13f52ea7":"code","98612b4d":"code","5eaa66ad":"code","dda19005":"code","c5918b2d":"code","487e0471":"code","2a80c88e":"code","6f4bdbd8":"code","79a4662a":"code","a6b2e2a0":"code","d1f6b877":"code","84789de0":"code","6280c672":"code","089de974":"code","92854391":"code","0feaf4f3":"code","25e54491":"code","6f1ad9e7":"code","2b5d971c":"code","f9016308":"code","6a62f16f":"code","26a53600":"code","6c2c8268":"code","3437c2b0":"code","c1d1781f":"code","f02eb437":"code","43f4a793":"code","78218513":"code","f01ea77c":"code","e14138c9":"code","68b092b9":"code","e1ec0cde":"code","083fee8c":"code","a23634bb":"code","741a8d97":"code","2354252f":"code","6293b730":"code","9d308834":"code","8d063660":"code","2d3933fa":"code","f45bafca":"code","3bcbe119":"code","88224e8d":"code","d9859c38":"code","442f9290":"code","4a542e75":"code","08f44230":"code","77087de8":"code","82d9db40":"code","8466fecc":"markdown","6d828c54":"markdown","efb404d3":"markdown","40bd1d1e":"markdown","7e31dac7":"markdown","f3d7387c":"markdown","d0d2b5c8":"markdown","f438a050":"markdown","b6744bd5":"markdown","2c133535":"markdown","d9188043":"markdown","8c522268":"markdown","821cdcdb":"markdown","319e3885":"markdown"},"source":{"15c1e185":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0b828dfc":"df = pd.read_csv('\/kaggle\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv')\ndf.head()","8de91ddd":"df.columns","925c8f47":"df.describe()","4501f882":"df.corrwith(df['Price'])","91554f31":"df.dtypes","d8911fb1":"print(df.select_dtypes([\"object\"]).columns)","ae98eb1c":"#Count Number of rows before deleting duplicates\n\ndf.shape[0]","ea847aa4":"df.duplicated().sum()","afed1c09":"df.drop_duplicates(keep = False , inplace= True)","ef971646":"#Count Number of rows after deleting duplicates\ndf.shape[0]\n","13f52ea7":"df.isnull().sum()","98612b4d":"fig, ax = plt.subplots(figsize=(15,7))\nsns.heatmap(df.isnull(), yticklabels=False,cmap=\"viridis\")","5eaa66ad":"df.dropna(subset=['CouncilArea','Lattitude', 'Longtitude', 'Regionname', 'YearBuilt'], inplace= True)","dda19005":"df['Price'].fillna(df['Price'].mean(), inplace= True)\ndf['Bathroom'].fillna(df['Bathroom'].value_counts().index[0], inplace= True)\ndf['Car'].fillna(df['Car'].value_counts().index[0], inplace= True)\ndf['Landsize'].fillna(df['Landsize'].mean(), inplace= True)\ndf['BuildingArea'].fillna(df['BuildingArea'].mean(), inplace= True)","c5918b2d":"#now all the null values has been deleted\ndf.isnull().sum()","487e0471":"df.dtypes","2a80c88e":"# changing all object data types to category - This step is necessary to be able to plot categorical data for our analysis\n\ndfobj = df.select_dtypes([\"object\"]).columns\ndf[dfobj] = df[dfobj].astype(\"category\")\n","6f4bdbd8":"df.dtypes","79a4662a":"# looking at data information above, we can notice that \"Date\" is also converted to category.\n# in this step we will cast date to datetime\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])","a6b2e2a0":"# it can be noticed that Postcode is also being treated as numerical data.\n#Since we know that Postcode is a catergorical data, we will be casting it to category\n\ndf[\"Postcode\"] = df[\"Postcode\"].astype(\"category\")","d1f6b877":"# Some of colums are in float but those column represent int data\n# so we change those columns\ndf[\"Bathroom\"] = df[\"Bathroom\"].astype(\"int64\")\ndf[\"Bedroom2\"] = df[\"Bedroom2\"].astype(\"int64\")\ndf[\"Car\"] = df[\"Car\"].astype(\"int64\")\n","84789de0":"df.info()","6280c672":"df.describe()","089de974":"plt.hist(df['Price'])","92854391":"sns.countplot(x='Rooms',data=df)","0feaf4f3":"#Top 5 Seller Name\ndf['SellerG'].value_counts().head(5)","25e54491":" plt.subplots(figsize=(15,11))\nsns.heatmap(df.corr(), annot=True , cmap = \"RdYlGn\")","6f1ad9e7":"fig, ax= plt.subplots(figsize=(15,15), ncols=3, nrows=4)\nsns.scatterplot(x=\"Rooms\", y=\"Price\",data=df, ax=ax[0][0])\nsns.scatterplot(x=\"Distance\", y=\"Price\",data=df, ax=ax[0][1])\nsns.scatterplot(x=\"Postcode\", y=\"Price\",data=df, ax=ax[0][2])\nsns.scatterplot(x=\"Bedroom2\", y=\"Price\",data=df, ax=ax[1][0])\nsns.scatterplot(x=\"Bathroom\", y=\"Price\",data=df, ax=ax[1][1])\nsns.scatterplot(x=\"Car\", y=\"Price\",data=df, ax=ax[1][2])\nsns.scatterplot(x=\"Landsize\", y=\"Price\",data=df, ax=ax[2][0])\nsns.scatterplot(x=\"BuildingArea\", y=\"Price\",data=df, ax=ax[2][1])\nsns.scatterplot(x=\"YearBuilt\", y=\"Price\",data=df, ax=ax[2][2])\nsns.scatterplot(x=\"Lattitude\", y=\"Price\",data=df, ax=ax[3][0])\nsns.scatterplot(x=\"Longtitude\", y=\"Price\",data=df, ax=ax[3][1])\nsns.scatterplot(x=\"Propertycount\", y=\"Price\",data=df, ax=ax[3][2])\nplt.show();","2b5d971c":"df.info()","f9016308":"# Defining a function to get the Ranges\ndef minmax(val_list):\n    min_val = min(val_list)\n    max_val = max(val_list)\n\n    return (min_val, max_val)\nprint('The Range of Number of Room ',minmax(df['Rooms']))\nprint('The Range of Price ',minmax(df['Price']))\nprint('The Range of Distance ',minmax(df['Distance']))\nprint('The Range of Landsize ',minmax(df['Landsize']))\nprint('The Range of YearBuilt ',minmax(df['YearBuilt']))\n","6a62f16f":"# Outliers in Room\n# From Scatterplot it is clear that, Rooms greater than 8 are outliers\n# So we delete all the rows which have rooms greater than 8\n\ndf = df[df['Rooms']<=8]\n","26a53600":"df.shape","6c2c8268":"# Outliers in Bathroom\n# From scatterplot, some of the house has 0 bathroom and high price so we deleted those rows\n# And Some have more than 6 bathroom and low price so we also delete those rows\n\ndf = df[df['Bathroom']>0]\ndf = df[df['Bathroom']<=6]","3437c2b0":"df.shape","c1d1781f":"# Outliers in BuildingArea\n# From scatterplot, some of the house has 0 Building area and that is not possible\n\ndf = df[df['BuildingArea']>0]","f02eb437":"# Outliers in Bedroom\n# From scatterplot, Some have more than 6 Bedrooms and low price so we also delete those rows  \n\ndf = df[df['Bedroom2']>0]","43f4a793":"# Outliers in Cars\n# From scatterplot, Some have more than 8 Cars and low price so we also delete those rows  \ndf = df[df['Bedroom2']<=8]\n","78218513":"df.shape\n","f01ea77c":"#import Linear regression\nfrom sklearn.linear_model import LinearRegression # Logistic Regression\nfrom sklearn.model_selection import train_test_split #for split the data\nfrom sklearn.metrics import accuracy_score #for accuracy_score\nfrom sklearn.metrics import confusion_matrix #for confusion matrix\nfrom sklearn import metrics\nfrom sklearn.model_selection import cross_val_score #score evaluation\nfrom sklearn.model_selection import cross_val_predict #prediction\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score","e14138c9":"df1=df.copy()","68b092b9":"df1.drop(['Date', 'Address'], axis=1, inplace=True)","e1ec0cde":"df1 = pd.get_dummies(df1, columns = ['Suburb', 'Rooms', 'Type', 'Method', 'SellerG','CouncilArea', 'Regionname'], drop_first=True)","083fee8c":"#Split the Data Set\nX = df1.drop('Price', axis=1).values\ny = df1['Price'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)","a23634bb":"# Fitting Multiple Linear Regression to the Training set\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","741a8d97":"# Compare predicted and actual values\ncomp = pd.DataFrame({'Actual': np.round(y_test, 2), \n                   'Predicted': np.round(y_pred, 2)})\ncomp.head(10)","2354252f":"print(\"MAE:\", metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","6293b730":"df2=df.copy()","9d308834":"df2.select_dtypes(['float64', 'int64']).columns","8d063660":"X= df2[['Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize','BuildingArea', 'Lattitude', 'Longtitude','Propertycount']]\ny = df2['Price']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)","2d3933fa":"# Fitting Multiple Linear Regression to the Training set\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","f45bafca":"# Compare predicted and actual values\ncomp = pd.DataFrame({'Actual': np.round(y_test, 2), \n                   'Predicted': np.round(y_pred, 2)})\ncomp.head(10)","3bcbe119":"print(\"MAE:\", metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","88224e8d":"df3=df.copy()","d9859c38":"df3.drop(['Date', 'Address','Suburb', 'SellerG', 'Postcode'], axis=1, inplace=True)","442f9290":"df3 = pd.get_dummies(df3, columns = [ 'Type', 'Method','CouncilArea', 'Regionname'], drop_first=True)","4a542e75":"#Split the dataset\nX = df3.drop('Price', axis=1).values\ny = df3['Price'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)","08f44230":"lr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","77087de8":"# Compare predicted and actual values\ncomp = pd.DataFrame({'Actual': np.round(y_test, 2), \n                   'Predicted': np.round(y_pred, 2)})\ncomp.head(10)","82d9db40":"print(\"MAE:\", metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","8466fecc":"We convert those Categorical columns which are more impactfull in predicting Price","6d828c54":"###  Find out the number of:\n*  a.) Numeric attributes:\n*  b.) Categorical attributes:\n\n\n","efb404d3":"## Melbourne Housing Market Data Science Project\n\n### Introduction\n\nThis is an exploration of the Melbourne housing market dataset. The goal of this notebook is to get an in depth understanding of the data before creating a model to predict house prices.\n\n**Suburb**: Suburb\n**Rooms**: Number of rooms\n**Price**: Price in dollars\n\n**Method**: Status of property sale -\n* S - property sold; \n* SP - property sold prior; \n* PI - property passed in; \n* PN - sold prior not disclosed; \n* SN - sold not disclosed; \n* VB - vendor bid; \n* W -  withdrawn prior to auction; \n* SA - sold after auction; \n* SS - sold after auction price not disclosed.\n\n**Type**: Type of house -\n* h - house,cottage,villa, semi,terrace; \n* u - unit, duplex; \n* t - townhouse;\n\n**SellerG**: Real Estate Agent\n\n**Date**: Date sold\n\n**Distance**: Distance from CBD\n\n**Regionname**: General Region (West, North West, North, North east \u2026etc)\n\n**Propertycount**: Number of properties that exist in the suburb.\n\n**Bedroom2**: Number of Bedrooms\n\n**Bathroom**: Number of Bathrooms\n\n**Car**: Number of carspots\n\n**Landsize**: Land Size\n\n**YearBuilt**: Year the house was built\n\n","40bd1d1e":"### Linear Regression Using Both Categorical & Numerical Data","7e31dac7":"## Linear Regression Using only Numerical Data","f3d7387c":"###  Import the data set in Python.","d0d2b5c8":"### Data Preparation : Data Cleaning","f438a050":"### Machine Learning Algorithims\nNow we apply Linear Regression algorithms to predict the House price","b6744bd5":"## Linear Regression Using only Categorical Data\n\nFirst we convert the categorical data into Dummies","2c133535":"### Outliers\n\nIn this section we delete outliers, an outlier is a data point that differs significantly from other observations","d9188043":"\n\nColums with Dtype = Object are categorical and rest other columns are numerical","8c522268":"###  View the dataset","821cdcdb":"###  Data Validation","319e3885":"### See the structure and the summary of the dataset to understand the data"}}