{"cell_type":{"0aac5c3a":"code","ce56c0bf":"code","01167fb5":"code","06a46a41":"code","9284350a":"code","04dead23":"code","d3feeae0":"markdown","ec5cfebe":"markdown","4d6227d1":"markdown","50f12d17":"markdown","1de8fafc":"markdown","991f7df2":"markdown"},"source":{"0aac5c3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce56c0bf":"# Load packages \nimport timeit\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport logging\nimport time\nimport importlib\n\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, f1_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nlogging.basicConfig(format='[%(asctime)s %(levelname)8s] %(message)s', level=logging.INFO, datefmt='%m-%d %H:%M:%S')\n\nimport tensorflow_hub as hub \nimport tensorflow as tf \nfrom tqdm.notebook import tqdm ","01167fb5":"\n\n\ndef transfrom(text_train, text_test):\n    large_use = 'https:\/\/tfhub.dev\/google\/universal-sentence-encoder-large\/5'\n    embed = hub.load(large_use)\n\n    vector_train = [tf.reshape(embed([line]), [-1]).numpy() for line in tqdm(text_train)]\n    vector_test = [tf.reshape(embed([line]), [-1]).numpy() for line in tqdm(text_test)]\n\n    return vector_train, vector_test\n    ","06a46a41":"train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nvector_train, vector_test = transfrom(train.text, test.text)\n","9284350a":"model = svm.SVC()\nX_train, X_val, y_train, y_val = train_test_split(vector_train, train.target, test_size=0.2, random_state=2020)\nmodel.fit(X_train, y_train)\n\npreds = model.predict(X_val)\nprint('Accuracy score', accuracy_score(y_val, preds))\nprint('f1_score', f1_score(y_val, preds))\n","04dead23":"final_preds = model.predict(vector_test)\nsub = pd.read_csv(f\"..\/input\/nlp-getting-started\/sample_submission.csv\")\nsub['target'] = final_preds\nsub.to_csv('submission.csv', index=False)\n\n","d3feeae0":"This is a very simple kernel showing how to use SVM to predict disaster tweets. Potential improvements include: \n1. `GridSearchCV` to find better parameters for the model\n2. considering using **keywords** and **location** information\n3. use `predict_proba` instead of `predict` and find the best threshold to maximum `f1_score`\n4. data cleaning, e.g., remove urls, punctuations, etc. \n","ec5cfebe":"## Step 4: predict and export results","4d6227d1":"Now transform texts into vectors","50f12d17":"## Step 2: Transfrom\nA [Universal Sentence Encoders](https:\/\/tfhub.dev\/google\/universal-sentence-encoder-large\/5) encodes text into high dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks.\n\nThere is a [Universal Sentence Encoders family](https:\/\/tfhub.dev\/google\/collections\/universal-sentence-encoder\/1), we choose the large one. ","1de8fafc":"## Step 1: load packages\n","991f7df2":"## Step 3: build model and train"}}