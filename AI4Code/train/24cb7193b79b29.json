{"cell_type":{"2e03a2d7":"code","50da4128":"code","7fabba77":"code","3fa25db2":"code","80c7a51b":"code","bf9ce62b":"markdown","25ccc829":"markdown"},"source":{"2e03a2d7":"from concorde.tsp import TSPSolver\nfrom matplotlib import collections as mc\nimport numpy as np\nimport pandas as pd\nimport time\nimport pylab as pl","50da4128":"cities = pd.read_csv('..\/input\/cities.csv')","7fabba77":"# Instantiate solver\nsolver = TSPSolver.from_data(\n    cities.X * 1000,\n    cities.Y * 1000,\n    norm=\"EUC_2D\"\n)\n\nt = time.time()\ntour_data = solver.solve(time_bound = 60.0, verbose = True, random_seed = 42)\nprint(time.time() - t)\nprint(tour_data.found_tour)","3fa25db2":"pd.DataFrame({'Path': np.append(tour_data.tour,[0])}).to_csv('submission.csv', index=False)","80c7a51b":"# Plot tour\nlines = [[(cities.X[tour_data.tour[i]],cities.Y[tour_data.tour[i]]),(cities.X[tour_data.tour[i+1]],cities.Y[tour_data.tour[i+1]])] for i in range(0,len(cities)-1)]\nlc = mc.LineCollection(lines, linewidths=2)\nfig, ax = pl.subplots(figsize=(20,20))\nax.set_aspect('equal')\nax.add_collection(lc)\nax.autoscale()","bf9ce62b":"Concorde's EUC_2D norm rounds the distances between cities to the nearest integer ([source](https:\/\/github.com\/matthelb\/concorde\/blob\/master\/UTIL\/edgelen.c#L299)) whereas competition metric doesn't. This significantly hurts quality as you get closer to TSP optimum. Simply scaling the coordinates up by a few orders of magnitude lets you get quite a bit better solution.","25ccc829":"* This kernel hands off the cities to the very fast Concorde TSP solver\n* Ignores the prime twist on this problem\n* You must have https:\/\/github.com\/jvkersch\/pyconcorde installed in Kernels to run this\n"}}