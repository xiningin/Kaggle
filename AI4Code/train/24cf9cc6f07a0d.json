{"cell_type":{"02661f39":"code","8956f568":"code","7a974213":"code","15b43522":"code","87568075":"code","5e690088":"code","60126827":"code","bc43aba2":"code","99525e1b":"code","801e551c":"code","10a78550":"code","7a43bb6a":"code","638ee9a5":"code","128459ae":"code","5570531e":"code","4ad2c638":"code","7be09ee7":"markdown","cc02b92b":"markdown","259932a6":"markdown","04076cc0":"markdown","0d14e482":"markdown","6674cd61":"markdown","e44bea3a":"markdown","81283b1c":"markdown","04db420e":"markdown","567eda75":"markdown","285201a9":"markdown","16996c8f":"markdown","f8ed9d71":"markdown"},"source":{"02661f39":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/train.csv')\ntrain","8956f568":"train.info()","7a974213":"train.duplicated().sum()","15b43522":"def resumetable(df):\n    '''function to create feature summary'''\n    print(f'Shape: {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns={'index': 'Features'})\n    summary['Num of Null Value'] = df.isnull().sum().values\n    summary['Num of Unique Value'] = df.nunique().values\n    summary['1st Value'] = df.loc[0].values\n    summary['2nd Value'] = df.loc[1].values\n    summary['3rd Value'] = df.loc[2].values\n    return summary","87568075":"resumetable(train)","5e690088":"def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","60126827":"train = downcast(train)","bc43aba2":"import ast\n\n# Convert String to List Type\ntrain['annotations'] = train['annotations'].apply(ast.literal_eval)\n\n# Get the number of bounding boxes for each image\ntrain['num_bboxes'] = train['annotations'].apply(lambda x: len(x))","99525e1b":"train.head()","801e551c":"train[train['num_bboxes'] > 0]","10a78550":"from os import listdir\nfrom PIL import Image\nDATA_PATH = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\ndef verify_images(video_id):\n    path = DATA_PATH + f'train_images\/video_{video_id}\/'    \n    for filename in listdir(path):\n        if filename.endswith('.jpg'):\n            try:\n                img = Image.open(path + filename)\n                img.verify() # Verify it is in fact an image\n            except (IOError, SyntaxError) as e:\n                print('Bad file:', filename) # Print out the names of corrupt files\n    print(f'Video {video_id} has all valid images. Verified!')\n\nfor video_id in range(3):\n    verify_images(video_id)","7a43bb6a":"import numpy as np\nfrom PIL import ImageDraw\n\ndef fetch_image(df, video_id, frame_id):\n    # get frame\n    frame = df[(df['video_id'] == video_id) & (df['video_frame'] == frame_id)].iloc[0]\n    # get bounding_boxes\n    bounding_boxes = frame['annotations']\n    # open image\n    img = Image.open(DATA_PATH + f'train_images\/video_{video_id}\/{frame_id}.jpg')\n\n    for box in bounding_boxes:\n        x0, y0, x1, y1 = (box['x'], box['y'], box['x']+box['width'], box['y']+box['height'])\n        draw = ImageDraw.Draw(img)\n        draw.rectangle( (x0, y0, x1, y1), outline=180, width=5)\n    return img\n\ndef fetch_image_list(df, video_id, num_images, start_frame_idx):\n    image_list = [np.array(fetch_image(df, video_id, start_frame_idx + index)) for index in range(num_images)]\n\n    return image_list","638ee9a5":"images = fetch_image_list(train, video_id=0, num_images=80, start_frame_idx=25)\n\nprint(f'Number of images: {len(images)}')","128459ae":"import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec \n\ngrid = gridspec.GridSpec(4, 2) \nplt.figure(figsize=(18, 20))\n\nidx_list = [0, 5, 10, 15, 20, 25, 30, 35] \n\nfor i, idx in enumerate(idx_list): \n    ax = plt.subplot(grid[i])\n    plt.imshow(images[idx], interpolation='nearest')\n    ax.set_title(f'frame index {idx}')\n    plt.axis('off')","5570531e":"from matplotlib import animation, rc\nrc('animation', html='jshtml')\n\ndef create_animation(imgs, frame_interval=130):\n    fig = plt.figure(figsize=(7, 4))\n    plt.axis('off')\n    img = plt.imshow(imgs[0])\n\n    def animate(i):\n        img.set_array(imgs[i])\n        return [img]\n\n    return animation.FuncAnimation(fig, animate, frames=len(imgs), interval=frame_interval)","4ad2c638":"frame_interval = 130 # set smaller number if you want to play fast, otherwise set bigger\n\ncreate_animation(images, frame_interval=frame_interval)","7be09ee7":"## \u5411\u4e0b\u8f6c\u6362","cc02b92b":"#\u5bfc\u5165\u6570\u636e","259932a6":"# \u57fa\u7840\u5de5\u7a0b","04076cc0":"## \u68c0\u67e5\u91cd\u590d\u6570\u636e","0d14e482":"# \u9a8c\u8bc1\u662f\u5426\u6709\u635f\u574f\u7684\u6570\u636e","6674cd61":"# \u7528\u8fb9\u6846\u7ed8\u5236\u5e27\u56fe\u50cf","e44bea3a":"## \u52a0\u8f7d\u5e26\u6709\u6ce8\u91ca\u7684\u56fe\u50cf\u5e8f\u5217","81283b1c":"# \u56fe\u50cf\u52a8\u753b","04db420e":"## \u5217\u8f66\u6570\u636e\u57fa\u672c\u4fe1\u606f","567eda75":"## \u529f\u80fd\u6982\u62ec","285201a9":"## \u68c0\u67e5\u5e26\u6709\u8fb9\u6846\u7684\u5e27\u6570","16996c8f":"# \u89c2\u5bdf\u6570\u636e","f8ed9d71":"## \u7279\u5f81\u5de5\u7a0b"}}