{"cell_type":{"4f6558d7":"code","5563a0d7":"code","727a2c93":"code","6539249b":"code","bbd92d71":"code","037c1199":"code","bed301ec":"code","2c49f802":"code","901c263f":"code","d1ff1877":"code","e2c2fea3":"code","20e0fc11":"code","b40a14da":"code","7d4f1a6c":"code","693ca11b":"code","31c1d29c":"markdown","496f0da5":"markdown","63f6ccbd":"markdown","bc7b38ef":"markdown","6959a74a":"markdown","0bfbceb6":"markdown","019ddd58":"markdown","986e52fd":"markdown","22f91173":"markdown","876b04d8":"markdown","9f17ba40":"markdown","6a2f032d":"markdown","8bc9a04a":"markdown","2984adbf":"markdown","364153ea":"markdown","baa606b6":"markdown","922ca354":"markdown","e412f8d4":"markdown","488df56b":"markdown","29480010":"markdown","6430de4f":"markdown","2d5af5ba":"markdown","f2071cbe":"markdown"},"source":{"4f6558d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5563a0d7":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint('Libraries Imported')","727a2c93":"#importing data\nlink='\/kaggle\/input\/bike-sharing-dataset-for-linear-regression\/bike_sharing_data.txt'\ndata=pd.read_csv(link)\ndata.head()","6539249b":"\nprint('The dimensions of data are:{}'.format(data.shape))","bbd92d71":"print('Duplicated values:{}'.format(data.duplicated().sum()))","037c1199":"print('NULL values:{}'.format(data.isnull().sum()))","bed301ec":"print('Schema of dataset: \\n',data.info())","2c49f802":"print(' Descriptive analysis of data:')\ndata.describe()","901c263f":"print('Correlation between the columns: ')\ndata.corr()\n","d1ff1877":"%matplotlib inline\nplt.scatter(x='Population',y='Profit',data=data)\nplt.title('Population vs Profit')","e2c2fea3":"x=data['Population'].to_numpy()\ny=data['Profit'].to_numpy()\nx=x.reshape(-1,1)\ny=y.reshape(-1,1)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=0)","20e0fc11":"#Training the model\nfrom sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\nprint('Model Trained')","b40a14da":"%matplotlib inline\nline=model.coef_*x+model.intercept_\nplt.plot(line,y,'r')\nplt.scatter(x_train,y_train)\nplt.title('Model vs Actual')\nplt.show()","7d4f1a6c":"y_pred=model.predict(x_test)\ndf=pd.DataFrame(data={'y_test':y_test.flatten(),'y_pred':y_pred.flatten()})\ndf","693ca11b":"#Calculating Mean Absolute Error(MAE)\nfrom sklearn.metrics import mean_absolute_error\nmae=mean_absolute_error(y_test,y_pred)\nprint('The mean absolute error of the data is ',mae)","31c1d29c":"### From here we understand that the actual value and the predicted value will have a difference of 2.1830522903040017 approximately. Which means it may be 2.1830522903040017 units more or less than the actual value.","496f0da5":"##### From the graph above we can see that the model represents the data quite correctly, so we can use this model for making predictions.","63f6ccbd":"#### As we can see both the columns have the right data type so we don't need to change that.","bc7b38ef":"#### Spliting the data to training and test data.","6959a74a":"# Aim \n## Prediction of profit based on the total buyers.\n### by Vikram Jeet Singh","0bfbceb6":"### Checking the dimensions of data","019ddd58":"#### Checking for NULL values in the data.","986e52fd":"### Let's use this relationship and make a machine learning model from the data.","22f91173":"## Hence, we can use the model above to make prediction of Profit based on the population buying the bike.","876b04d8":"### Looking for duplicate values in data.","9f17ba40":"#### Describing correlation of data","6a2f032d":"#### Now let's see how much our model's predictions match with the actual values, graphically.","8bc9a04a":"## Analyzing the data","2984adbf":"#### Let's use this model and see how much its predictions resemble with y_test.","364153ea":"## Visualizing the data","baa606b6":"#### So, our data has 97 rows and 2 columns.","922ca354":"#### Now let's see what is the mean absolute error in the prediction.","e412f8d4":"##### So, there are no NULL values in both the columns.","488df56b":"##### From here we can observe that the coefficient of correlation is having a positive value, which means, there is a direct relationship between the profit and the population.","29480010":"#### Checking for data types of both the columns.","6430de4f":"##### From observation, we can see that there is some relationship between the Population and profit and it seems to be a direct one.","2d5af5ba":"#### Descriptive analysis of data","f2071cbe":"##### Hence, there are no duplicate values in our data."}}