{"cell_type":{"3648ecbf":"code","1d21d85b":"code","68c7af6d":"code","553e339d":"code","fbcfb498":"code","f3502905":"code","66c1ecb2":"code","cf07a5cb":"code","96654622":"code","03238f53":"code","9c109c4b":"code","7fa2414f":"code","1d64dfc1":"code","d4d503dd":"code","2220a84d":"code","3316a6f8":"code","1cc55bde":"code","3447958f":"code","78fa3cfe":"code","dfaeeb23":"code","95d874f1":"code","9bfafb2f":"code","75c71f34":"code","77c7b27a":"code","c531b184":"code","32ae4720":"code","5726f831":"code","f21ad145":"code","2f06cf7f":"code","80af5bf7":"code","73de71d6":"code","3f2dcd84":"code","525d962a":"code","e13361cc":"code","0449fef8":"code","75489e87":"code","dce743c7":"code","b1614847":"code","e5952a3e":"code","66e84a97":"code","35e5065d":"code","d0b462da":"code","f0f2c8b9":"code","83ee9fdd":"code","b6cf7d65":"code","bbaa6752":"code","d68693da":"code","d57765db":"code","7c74e5f0":"code","a8d86e0e":"code","57aab5b1":"code","fe5e6ef4":"code","d6fd653f":"code","64e2c0ab":"code","cb235e9a":"code","0099fe27":"code","aee00fa8":"code","8bb4f3dc":"code","3b18983e":"code","b934ddaa":"code","9138bcf4":"code","dc15ffc5":"code","2046a24f":"code","b467d0e7":"code","a7867b84":"code","df8ae5f0":"code","2611a9cb":"code","0ccd0b61":"code","1c816717":"code","b4185a99":"code","6fe112b3":"code","b287430d":"code","fff56237":"code","884d3e92":"code","4cace44e":"code","a328492e":"code","0abecbe8":"code","1688b1da":"code","40045e06":"code","5656042a":"code","b9fa2bfe":"code","68e7368b":"code","59fb2f90":"code","4f3ce65c":"code","706f9f0e":"code","1c885f91":"code","a8ca50af":"code","f548b06e":"code","f4a3d50c":"code","38909272":"markdown","0612b445":"markdown","2acf00e8":"markdown","b692116b":"markdown","7c933cee":"markdown","6be0c8b8":"markdown","42ca7d52":"markdown","aa3d7201":"markdown","785d68a3":"markdown","25fd78ff":"markdown","4794e770":"markdown","bdf41c33":"markdown","8f94bde0":"markdown","295f5555":"markdown","33e86805":"markdown","cd498963":"markdown","fe3a93d3":"markdown","5e632e88":"markdown","9383f264":"markdown","ab105ca7":"markdown","8d77dff7":"markdown","8aed2ec6":"markdown","3bd94de4":"markdown","d21a15ff":"markdown","bffb33c2":"markdown","1b9ff4af":"markdown"},"source":{"3648ecbf":"## Importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Analysing datetime\nimport datetime as dt\nfrom datetime import datetime \n\n# Plotting geographical data\nimport folium\nimport rasterio as rio\n\n# File system manangement\nimport os\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')","1d21d85b":"# Checking out number of global power plants in Puerto Rico\ngpp_df = pd.read_csv('..\/input\/ds4g-environmental-insights-explorer\/eie_data\/gppd\/gppd_120_pr.csv')","68c7af6d":"gpp_df.head()","553e339d":"# Transposing the table of global power plants\ngpp_df.head().T","fbcfb498":"# Looking the shape of dataframe\ngpp_df.shape","f3502905":"import pandas_profiling\npandas_profiling.ProfileReport(gpp_df)","66c1ecb2":"#to indicate if any value is missing. Any missing values?\ngpp_df.isnull().values.any()","cf07a5cb":"# Total missing values for each feature\ngpp_df.isnull().sum()","96654622":"# replacing numerical variables missing values by 0\nglobal_power_plants = gpp_df.fillna(0)","03238f53":"global_power_plants.isnull().sum()","9c109c4b":"# List the global power plants which are used primary fuel.\nsns.barplot(x=global_power_plants['primary_fuel'].value_counts().index,y=global_power_plants['primary_fuel'].value_counts())\nplt.title(\"Global power plants which are used Primary fuel\")\nplt.ylabel('Count')","7fa2414f":"print(global_power_plants['commissioning_year'].value_counts(normalize=True))","1d64dfc1":"fig = plt.gcf()\nfig.set_size_inches(8,5)\ncolors = [\"aquamarine\", \"plum\", \"orchid\", \"fuchsia\", \"goldenrod\", \"lavender\", \"olive\", \"lime\", \"turquoise\"]\nglobal_power_plants['owner'].value_counts(ascending=True).plot(kind='bar', color = colors)","d4d503dd":"# Overall capacity of the plants\noverall_capacity = global_power_plants['capacity_mw'].sum()\nprint('Overall Capacity: '+'{:.4f}'.format(overall_capacity) + ' MW')","2220a84d":"capacity = (global_power_plants.groupby(['primary_fuel'])['capacity_mw'].sum()).to_frame()\ncapacity = capacity.sort_values('capacity_mw',ascending=False)\ncapacity['percentage_of_total'] = (capacity['capacity_mw']\/overall_capacity)*100\ncapacity['percentage_of_total'].plot(kind='bar',color=['orange', 'yellow', 'black', 'orange','cyan','blue'])\ncapacity","3316a6f8":"# Overall estimation of the plants\nest_power_gen_gwh = global_power_plants['estimated_generation_gwh'].sum()\nprint('Total Estimated Capacity in Year: '+'{:.4f}'.format(est_power_gen_gwh) + ' MW')","1cc55bde":"generation = (global_power_plants.groupby(['primary_fuel'])['estimated_generation_gwh'].sum()).to_frame()\ngeneration = generation.sort_values('estimated_generation_gwh',ascending=False)\ngeneration['percentage_of_total'] = (generation['estimated_generation_gwh']\/est_power_gen_gwh)*100\ngeneration['percentage_of_total'].plot(kind='bar',color=['orange', 'yellow', 'black', 'orange','cyan','blue'])\ngeneration","3447958f":"def split_column_into_new_columns(dataframe,column_to_split,new_column_one,begin_column_one,end_column_one):\n    for i in range(0, len(dataframe)):\n        dataframe.loc[i, new_column_one] = dataframe.loc[i, column_to_split][begin_column_one:end_column_one]\n    return dataframe","78fa3cfe":"def plot_points_on_map(dataframe,begin_index,end_index,latitude_column,latitude_value,longitude_column,longitude_value,zoom):\n    df = dataframe[begin_index:end_index]\n    location = [latitude_value,longitude_value]\n    plot = folium.Map(location=location,zoom_start=zoom, tiles= 'Stamen Terrain')\n    color={ 'Hydro' : 'lightblue', 'Solar' : 'orange', 'Oil' : 'darkblue', 'Coal' : 'black', 'Gas' : 'lightgray', 'Wind' : 'green' }\n    for i in range(0,len(df)):\n        popup = folium.Popup(str(df.primary_fuel[i:i+1]))        \n        folium.Marker([df[latitude_column].iloc[i],\n                       df[longitude_column].iloc[i]],\n                       popup=popup,icon=folium.Icon(icon_color='red',icon ='bolt',prefix='fa',color=color[df.primary_fuel.iloc[i]])).add_to(plot)\n        \n    return(plot)","dfaeeb23":"global_power_plants = split_column_into_new_columns(global_power_plants,'.geo','latitude',50,66)\nglobal_power_plants = split_column_into_new_columns(global_power_plants,'.geo','longitude',31,48)\nglobal_power_plants['latitude'] = global_power_plants['latitude'].astype(float)\na = np.array(global_power_plants['latitude'].values.tolist()) \nglobal_power_plants['latitude'] = np.where(a < 10, a+10, a).tolist() \n\nlat=18.200178; lon=-66.664513 # Puerto Rico's co-ordinates\nplot_points_on_map(global_power_plants,0,425,'latitude',lat,'longitude',lon,9)","95d874f1":"global_power_plants_df = global_power_plants.sort_values('capacity_mw',ascending=False).reset_index()\nglobal_power_plants_df[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh']]","9bfafb2f":"power_plants_df = global_power_plants.sort_values('capacity_mw',ascending=False).reset_index()","75c71f34":"global_power_plants[\"capacity_factor\"] = global_power_plants[\"estimated_generation_gwh\"]\/(global_power_plants[\"capacity_mw\"]*24*365\/1000)","77c7b27a":"global_power_plants[['name','owner','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh', 'capacity_factor']]","c531b184":"global_power_plants['prod_hrs_per_day']=global_power_plants.estimated_generation_gwh*1000\/(global_power_plants.capacity_mw*365)","32ae4720":"global_power_plants['prod_hrs_per_hour']=global_power_plants.estimated_generation_gwh*1000\/(global_power_plants.capacity_mw*365)*24","5726f831":"global_power_plants['prod_hrs_per_minutes']=global_power_plants.estimated_generation_gwh*1000\/(global_power_plants.capacity_mw*365)*24*60","f21ad145":"global_power_plants[['name','owner','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh', 'capacity_factor', 'prod_hrs_per_day', 'prod_hrs_per_hour', 'prod_hrs_per_minutes']]","2f06cf7f":"global_power_plants[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh', 'capacity_factor', 'prod_hrs_per_day','prod_hrs_per_hour','prod_hrs_per_minutes']].groupby(['primary_fuel']).head(2)","80af5bf7":"global_power_plants.groupby(['primary_fuel']).agg({'capacity_mw' : ['nunique', 'sum', 'mean', 'max', 'min']}).reset_index()","73de71d6":"global_power_plants.groupby(['primary_fuel']).agg({'estimated_generation_gwh': ['nunique', 'sum', 'mean', 'max', 'min']}).reset_index()","3f2dcd84":"global_power_plants[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh', 'owner']][power_plants_df['owner']=='PREPA'].sort_values('estimated_generation_gwh', ascending = False).groupby(['primary_fuel','capacity_mw']).head()","525d962a":"from ast import literal_eval\n\ndef get_lon_from_geo(str_):\n    dict_ = literal_eval(str_)\n    coordinates = dict_['coordinates']\n    lon = coordinates[0]\n    return lon\n\ndef get_lat_from_geo(str_):\n    dict_ = literal_eval(str_)\n    coordinates = dict_['coordinates']\n    lat = coordinates[1]\n    return lat","e13361cc":"global_power_plants['lon'] = global_power_plants['.geo'].map(get_lon_from_geo)\nglobal_power_plants['lat'] = global_power_plants['.geo'].map(get_lat_from_geo)\nglobal_power_plants.drop(columns=['.geo'], inplace=True)","0449fef8":"# https:\/\/stackoverflow.com\/questions\/9835762\/how-do-i-find-the-duplicates-in-a-list-and-create-another-list-with-them\nfeatures = global_power_plants[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh','gppd_idnr','name','owner','primary_fuel','source','url','wepp_id']].columns.values\nunique_max = []\nfor feature in features:\n    values = global_power_plants[feature].value_counts()\n    unique_max.append([feature, values.max(), values.idxmax()])","75489e87":"np.transpose((pd.DataFrame(unique_max, columns=['Feature', 'Max duplicates', 'Value'])).sort_values(by = 'Max duplicates', ascending=False).head(50))","dce743c7":"global_power_plants[\"gppd_idnr\"].unique()","b1614847":"global_power_plants[\"name\"].unique()","e5952a3e":"to_drop = [\"generation_gwh_2013\", \"generation_gwh_2014\", \"generation_gwh_2015\", \"generation_gwh_2016\",\"generation_gwh_2017\", \n           \"other_fuel1\",\"other_fuel2\",\"other_fuel3\",\n           \"geolocation_source\",\"year_of_capacity_data\",\n           \"country\", \"country_long\"]\npower_plants_df = global_power_plants.drop(to_drop, axis=1)","66e84a97":"def overlay_image_on_puerto_rico(file_name,band_layer,lat,lon,zoom):\n    band = rio.open(file_name).read(band_layer)\n    m = folium.Map([lat, lon], zoom_start=zoom)\n    folium.raster_layers.ImageOverlay(\n        image=band,\n        bounds = [[18.6,-67.3,],[17.9,-65.2]],\n        colormap=lambda x: (1, 0, 0, x),\n    ).add_to(m)\n    return m","35e5065d":"import rasterio as rio\nimport folium\nimport tifffile as tiff\n\nimage = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180701T161259_20180707T175356.tif'\nlatitude=18.1429005246921; longitude=-65.4440010699994\noverlay_image_on_puerto_rico(image,band_layer=7,lat=latitude,lon=longitude,zoom=8)","d0b462da":"average_no2_emission = [np.average(tiff.imread(image))]\nprint('Average NO2 emissions value: ', average_no2_emission)","f0f2c8b9":"image = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180706T161914_20180712T200737.tif'\noverlay_image_on_puerto_rico(image,band_layer=7,lat=latitude,lon=longitude,zoom=8)","83ee9fdd":"# Likewise you might want to limit the data to only the region of interest\naverage_no2_emission = [np.average(tiff.imread(image))]\nprint('Average NO2 emissions value: ', average_no2_emission)","b6cf7d65":"image = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/s5p_no2_20180704T165720_20180710T184641.tif'\noverlay_image_on_puerto_rico(image,band_layer=7,lat=latitude,lon=longitude,zoom=8)","bbaa6752":"average_no2_emission = [np.average(tiff.imread(image))]\nprint('Average NO2 emissions value: ', average_no2_emission)","d68693da":"tiff.imread(image).shape","d57765db":"# only consider pollute fuel types\nfossil_fuels = ['Coal', 'Oil', 'Gas']\nfossil_fuel_df = global_power_plants[global_power_plants['primary_fuel'].isin(fossil_fuels)]\n# sum the electricity generation\nfossil_fuel_sum = fossil_fuel_df['estimated_generation_gwh'].sum()","7c74e5f0":"# sum the pollution of the last satellite picture\nsum_No2_emission = np.sum(tiff.imread(image)[:, :, 0 : 4])\n# consider 14% of pollution is made from power plants electricity\nsum_No2_emission_oe = sum_No2_emission * 0.14","a8d86e0e":"# use the simplified emission factor formula\nfactor = sum_No2_emission_oe \/ fossil_fuel_sum\nprint(f'Simplified emissions factor for Puerto Rico is {factor} mol * h \/ m^2 * gw')","57aab5b1":"import glob\n\nno2_path = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/s5p_no2\/*'\nno2_pictures_path = glob.glob(no2_path)\nlen(no2_pictures_path)\nprint('We have {} pictures of the Copernicus Sentinel'.format(len(no2_pictures_path)))","fe5e6ef4":"from tqdm import tqdm_notebook as tqdm\n\n\n# https:\/\/www.kaggle.com\/ragnar123\/exploratory-data-analysis-and-factor-model-idea\n# this function will help us extract the no2 emission data in a tabular way\ndef read_s5p_no2_pictures_data(only_no2_emissions = True):\n    s5p_no2_pictures = []\n    for num, i in tqdm(enumerate(no2_pictures_path), total = 387):\n        temp_s5p_no2_pictures = {'start_date': [], 'end_date': [], 'data': []}\n        temp_s5p_no2_pictures['start_date'] = no2_pictures_path[num][76:84]\n        temp_s5p_no2_pictures['end_date'] = no2_pictures_path[num][92:100]\n        # only no2 emissions\n        if only_no2_emissions:\n            temp_s5p_no2_pictures['data'] = tiff.imread(i)[:, :, 0 : 4]\n            temp_s5p_no2_pictures['no2_emission_sum'] = np.sum(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_mean'] = np.average(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_std'] = np.std(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_max'] = np.max(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_min'] = np.min(tiff.imread(i)[:, :, 0 : 4])\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n        # all Copernicus data\n        else:\n            temp_s5p_no2_pictures['data'] = tiff.imread(i)\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n    s5p_no2_pictures = pd.DataFrame(s5p_no2_pictures)\n    s5p_no2_pictures['start_date'] = pd.to_datetime(s5p_no2_pictures['start_date'])\n    s5p_no2_pictures['end_date'] = pd.to_datetime(s5p_no2_pictures['end_date'])\n    s5p_no2_pictures.sort_values('start_date', inplace = True)\n    s5p_no2_pictures.reset_index(drop = True, inplace = True)\n    return s5p_no2_pictures\n\ns5p_no2_pictures_df = read_s5p_no2_pictures_data()","d6fd653f":"s5p_no2_pictures_stats = s5p_no2_pictures_df[[col for col in s5p_no2_pictures_df.columns if col not in ['data']]]\ns5p_no2_pictures_data = s5p_no2_pictures_df[['data']]\ndel s5p_no2_pictures_df\ns5p_no2_pictures_stats.head()","64e2c0ab":"def check_arrays(df, row = 1):\n    band1 = pd.DataFrame(s5p_no2_pictures_data['data'][row][:, :, 0])\n    band2 = pd.DataFrame(s5p_no2_pictures_data['data'][row][:, :, 1])\n    band3 = pd.DataFrame(s5p_no2_pictures_data['data'][row][:, :, 2])\n    band4 = pd.DataFrame(s5p_no2_pictures_data['data'][row][:, :, 3])\n    \n    def check_nan(df):\n        df_nan = df.isnull().values.sum()\n        return df_nan\n    \n    band1_nan = check_nan(band1)\n    band2_nan = check_nan(band2)\n    band3_nan = check_nan(band3)\n    band4_nan = check_nan(band4)\n    \n    print('From row {} we have {} nan values for band1'.format(row, band1_nan))\n    print('From row {} we have {} nan values for band2'.format(row, band2_nan))\n    print('From row {} we have {} nan values for band3'.format(row, band3_nan))\n    print('From row {} we have {} nan values for band4'.format(row, band4_nan))\n\n    return band1, band2, band3, band4\n\nband1, band2, band3, band4 = check_arrays(s5p_no2_pictures_data, row = 4)","cb235e9a":"# this function ignore nan values from the images\ndef read_s5p_no2_pictures_data_ignore_nan(only_no2_emissions = True):\n    s5p_no2_pictures = []\n    for num, i in tqdm(enumerate(no2_pictures_path), total = 387):\n        temp_s5p_no2_pictures = {'start_date': [], 'end_date': [], 'data': []}\n        temp_s5p_no2_pictures['start_date'] = no2_pictures_path[num][76:84]\n        temp_s5p_no2_pictures['end_date'] = no2_pictures_path[num][92:100]\n        # only no2 emissions\n        if only_no2_emissions:\n            temp_s5p_no2_pictures['data'] = tiff.imread(i)[:, :, 0 : 4]\n            temp_s5p_no2_pictures['no2_emission_sum'] = np.nansum(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_mean'] = np.nanmean(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_std'] = np.nanstd(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_max'] = np.nanmax(tiff.imread(i)[:, :, 0 : 4])\n            temp_s5p_no2_pictures['no2_emission_min'] = np.nanmin(tiff.imread(i)[:, :, 0 : 4])\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n        # all Copernicus data\n        else:\n            temp_s5p_no2_pictures['data'] = tiff.imread(i)\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n    s5p_no2_pictures = pd.DataFrame(s5p_no2_pictures)\n    s5p_no2_pictures['start_date'] = pd.to_datetime(s5p_no2_pictures['start_date'])\n    s5p_no2_pictures['end_date'] = pd.to_datetime(s5p_no2_pictures['end_date'])\n    s5p_no2_pictures.sort_values('start_date', inplace = True)\n    s5p_no2_pictures.reset_index(drop = True, inplace = True)\n    return s5p_no2_pictures\n\ns5p_no2_pictures_df_ig_nan = read_s5p_no2_pictures_data_ignore_nan()","0099fe27":"# https:\/\/stackoverflow.com\/questions\/14940743\/selecting-excluding-sets-of-columns-in-pandas\ns5p_no2_pictures_stats_ig_nan = s5p_no2_pictures_df_ig_nan[[col for col in s5p_no2_pictures_df_ig_nan.columns if col not in ['data']]]\ndel s5p_no2_pictures_df_ig_nan\ns5p_no2_pictures_stats_ig_nan.head()","aee00fa8":"# Using plotly.express\nimport plotly.express as px\nfig = px.line(s5p_no2_pictures_stats_ig_nan, x='start_date', y='no2_emission_sum')\nfig.show()","8bb4f3dc":"import matplotlib.pyplot as plt\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\nimport plotly.graph_objs as go\n\ndef line_plot_check_nan(df1, df2, x, y, title, width, height):\n    \n    trace1 = go.Scatter(\n        x = df1[x],\n        y = df1[y],\n        mode='lines',\n        name='with_nans',\n        marker = dict(\n            color = '#1E90FF', \n        ), \n    )\n    \n    df3 = df2.dropna()\n    trace2 = go.Scatter(\n        x = df3[x],\n        y = df3[y],\n        mode='markers',\n        name='no_nans',\n        marker = dict(\n            color = 'red', \n        ), \n    )\n    \n    layout = go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5\n        ),\n        font = dict(size = 14),\n        width = width,\n        height = height,\n    )\n    \n    data = [trace1, trace2]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig, filename = 'line_plot')\nline_plot_check_nan(s5p_no2_pictures_stats_ig_nan, s5p_no2_pictures_stats, 'start_date', 'no2_emission_sum', 'NO2 emission by date', 1400, 600)","3b18983e":"n_duplicates_dates = s5p_no2_pictures_stats_ig_nan.shape[0] - s5p_no2_pictures_stats_ig_nan.drop_duplicates(subset = ['start_date', 'end_date']).shape[0]\nprint(f'We have {n_duplicates_dates} duplicate days')","b934ddaa":"# this function will help us extract the no2 emission data in a tabular way\ndef read_s5p_no2_pictures_data_fill(only_no2_emissions = True):\n    s5p_no2_pictures = []\n    for num, i in tqdm(enumerate(no2_pictures_path), total = 387):\n        temp_s5p_no2_pictures = {'start_date': [], 'end_date': [], 'data': []}\n        temp_s5p_no2_pictures['start_date'] = no2_pictures_path[num][76:84]\n        temp_s5p_no2_pictures['end_date'] = no2_pictures_path[num][92:100]\n        # only no2 emissions\n        if only_no2_emissions:\n            image = tiff.imread(i)[:, :, 0 : 4]\n            band1 = pd.DataFrame(image[: ,: , 0]).interpolate()\n            band1.fillna(band1.mean(), inplace = True)\n            band2 = pd.DataFrame(image[: ,: , 1]).interpolate()\n            band2.fillna(band2.mean(), inplace = True)\n            band3 = pd.DataFrame(image[: ,: , 2]).interpolate()\n            band3.fillna(band3.mean(), inplace = True)\n            band4 = pd.DataFrame(image[: ,: , 3]).interpolate()\n            band4.fillna(band4.mean(), inplace = True)\n            image = np.dstack((band1, band2, band3, band4))\n            temp_s5p_no2_pictures['data'] = image\n            temp_s5p_no2_pictures['no2_emission_sum'] = np.sum(image)\n            temp_s5p_no2_pictures['no2_emission_mean'] = np.average(image)\n            temp_s5p_no2_pictures['no2_emission_std'] = np.std(image)\n            temp_s5p_no2_pictures['no2_emission_max'] = np.max(image)\n            temp_s5p_no2_pictures['no2_emission_min'] = np.min(image)\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n        # all Copernicus data\n        else:\n            temp_s5p_no2_pictures['data'] = tiff.imread(i)\n            s5p_no2_pictures.append(temp_s5p_no2_pictures)\n    s5p_no2_pictures = pd.DataFrame(s5p_no2_pictures)\n    s5p_no2_pictures['start_date'] = pd.to_datetime(s5p_no2_pictures['start_date'])\n    s5p_no2_pictures['end_date'] = pd.to_datetime(s5p_no2_pictures['end_date'])\n    s5p_no2_pictures.sort_values('start_date', inplace = True)\n    s5p_no2_pictures.reset_index(drop = True, inplace = True)\n    return s5p_no2_pictures\n\ns5p_no2_pictures_df_fill = read_s5p_no2_pictures_data_fill()","9138bcf4":"s5p_no2_pictures_stats_fill = s5p_no2_pictures_df_fill[[col for col in s5p_no2_pictures_df_fill.columns if col not in ['data']]]\ndel s5p_no2_pictures_df_fill\ns5p_no2_pictures_stats_fill.head()","dc15ffc5":"# drop nan values and check again for duplicate columns\ns5p_no2_pictures_stats_fill = s5p_no2_pictures_stats_fill[s5p_no2_pictures_stats_fill['start_date']!='2019-04-15'].dropna()\n# drop 2019-04-15 (probably an outlier or a rare event that can affect our factor calculation)\nduplicate_columns = s5p_no2_pictures_stats_fill.shape[0] - s5p_no2_pictures_stats_fill.drop_duplicates(subset = ['start_date', 'end_date']).shape[0]\nprint(f'We have {duplicate_columns} duplicate columns')\nprint('We have {} days of data'.format(s5p_no2_pictures_stats_fill['start_date'].nunique()))","2046a24f":"def line_plot(df, x, y, title, width, height):\n    trace = go.Scatter(\n        x = df[x],\n        y = df[y],\n        mode='lines',\n        name='lines',\n        marker = dict(\n            color = '#1E90FF', \n        ), \n    )\n    \n    layout = go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5\n        ),\n        font = dict(size = 14),\n        width = width,\n        height = height,\n    )\n    \n    data = [trace]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig, filename = 'line_plot')","b467d0e7":"line_plot(s5p_no2_pictures_stats_fill, 'start_date', 'no2_emission_sum', 'NO2 emission by date', 1400, 800)","a7867b84":"# get the mean NO2 emission between 2018\/07\/01 and 2019\/06\/29\nsum_no2_emission = s5p_no2_pictures_stats_fill['no2_emission_sum'].mean()\n# consider 14% of pollution is made from power plants electricity\nsum_no2_emission_oe = sum_no2_emission * 0.14\n# use the simplified emission factor formula (sum of estimated generation from Caol, Oil and Gas plants)\nfactor = sum_no2_emission_oe \/ fossil_fuel_sum\nprint(f'Simplified emissions factor for Puerto Rico is {factor} mol * h \/ m^2 * gw')","df8ae5f0":"weather_path_data = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/gfs\/*'\nweather_pictures_path = glob.glob(weather_path_data)\nlen(weather_pictures_path)\nprint('We have {} pictures of the global forecast system'.format(len(weather_pictures_path)))","2611a9cb":"tiff.imread(weather_pictures_path[0]).shape","0ccd0b61":"# this function will help us extract weather pictures in a tabular way\ndef read_weather_data():\n    weather_pictures = []\n    for num, i in tqdm(enumerate(weather_pictures_path), total = len(weather_pictures_path)):\n        temp_weather_pictures = {'date': [], 'temperature_2m_above_ground': [], 'specific_humidity_2m_above_ground': [], 'relative_humidity_2m_above_ground': [], \n                                 'u_component_of_wind_10m_above_ground': [], 'v_component_of_wind_10m_above_ground': [], 'total_precipitation_surface': []}\n        temp_weather_pictures['date'] = weather_pictures_path[num][68:-6]\n        temp_weather_pictures['date'] = weather_pictures_path[num][68:-6]\n        image = tiff.imread(i)\n        temp_weather_pictures['temperature_2m_above_ground'] = image[ : , : , 0]\n        temp_weather_pictures['specific_humidity_2m_above_ground'] = image[ : , : , 1]\n        temp_weather_pictures['relative_humidity_2m_above_ground'] = image[ : , : , 2]\n        temp_weather_pictures['u_component_of_wind_10m_above_ground'] = image[ : , : , 3]\n        temp_weather_pictures['v_component_of_wind_10m_above_ground'] = image[ : , : , 4]\n        temp_weather_pictures['total_precipitation_surface'] = image[ : , : , 5]\n        temp_weather_pictures['temperature_2m_above_ground_mean'] = np.average(image[ : , : , 0])\n        temp_weather_pictures['specific_humidity_2m_above_ground_mean'] = np.average(image[ : , : , 1])\n        temp_weather_pictures['relative_humidity_2m_above_ground_mean'] = np.average(image[ : , : , 2])\n        temp_weather_pictures['u_component_of_wind_10m_above_ground_mean'] = np.average(image[ : , : , 3])\n        temp_weather_pictures['v_component_of_wind_10m_above_ground_mean'] = np.average(image[ : , : , 4])\n        temp_weather_pictures['total_precipitation_surface_mean'] = np.average(image[ : , : , 5])\n        \n        weather_pictures.append(temp_weather_pictures)\n    \n    weather_pictures = pd.DataFrame(weather_pictures)\n    weather_pictures['date'] = pd.to_datetime(weather_pictures['date'], infer_datetime_format  = True)\n    weather_pictures.sort_values('date', inplace = True)\n    weather_pictures.reset_index(drop = True, inplace = True)\n    return weather_pictures\n\nweather_pictures_df = read_weather_data()","1c816717":"weather_pictures_df.head()","b4185a99":"# check missing values\nimage_columns = ['temperature_2m_above_ground', 'specific_humidity_2m_above_ground', 'relative_humidity_2m_above_ground', \n               'u_component_of_wind_10m_above_ground', 'v_component_of_wind_10m_above_ground', 'total_precipitation_surface']\nweather_pictures_df[[col for col in weather_pictures_df.columns if col not in image_columns]].isnull().sum()","6fe112b3":"weather_pictures_df_stats = weather_pictures_df[[col for col in weather_pictures_df.columns if col not in image_columns]]\nn_duplicates = weather_pictures_df_stats.shape[0] - weather_pictures_df_stats['date'].nunique()\nprint(f'We have {n_duplicates} observations that belongs to a date with one or more records')","b287430d":"weather_pictures_df_stats = weather_pictures_df_stats.groupby('date').mean().reset_index()\nprint('We have data for {} days'.format(weather_pictures_df_stats['date'].nunique()))\nprint('Our data start on {} and finish in {}'.format(weather_pictures_df_stats['date'].min(), weather_pictures_df_stats['date'].max()))\nline_plot(weather_pictures_df_stats, 'date', 'temperature_2m_above_ground_mean', 'Temperature by Date', 1400, 800)","fff56237":"no2_weather = s5p_no2_pictures_stats_fill[['start_date', 'no2_emission_sum']].merge(weather_pictures_df_stats, left_on = 'start_date', right_on = 'date', how = 'left')\nno2_tem_corr = no2_weather[['no2_emission_sum', 'temperature_2m_above_ground_mean']].corr().loc['no2_emission_sum', 'temperature_2m_above_ground_mean']\nprint(f'NO2 and temeprature have a correlation of: {no2_tem_corr}')","884d3e92":"no2_weather.columns","4cace44e":"line_plot(weather_pictures_df_stats, 'date', 'specific_humidity_2m_above_ground_mean', 'Specific Humidity by Date', 1400, 800)","a328492e":"line_plot(weather_pictures_df_stats, 'date', 'relative_humidity_2m_above_ground_mean', 'Relative Humidity by Date', 1400, 800)","0abecbe8":"line_plot(weather_pictures_df_stats, 'date', 'u_component_of_wind_10m_above_ground_mean', 'U Component of Wind by Date', 1400, 800)","1688b1da":"line_plot(weather_pictures_df_stats, 'date', 'v_component_of_wind_10m_above_ground_mean', 'V Component of Wind by Date', 1400, 800)","40045e06":"line_plot(weather_pictures_df_stats, 'date', 'total_precipitation_surface_mean', 'Total Precipitation Surface by Date', 1400, 800)","5656042a":"plt.figure(figsize = (14, 8))\nsns.heatmap(no2_weather.corr(), annot = True, cmap = 'coolwarm')","b9fa2bfe":"reg_dataset = no2_weather[['date', 'temperature_2m_above_ground_mean', 'specific_humidity_2m_above_ground_mean', 'relative_humidity_2m_above_ground_mean', 'u_component_of_wind_10m_above_ground_mean', \n                               'v_component_of_wind_10m_above_ground_mean', 'total_precipitation_surface_mean', 'no2_emission_sum']]\nreg_dataset['month'] = reg_dataset['date'].dt.month\nreg_dataset['dayofweek'] = reg_dataset['date'].dt.dayofweek\n\nreg_dataset = pd.get_dummies(reg_dataset, columns = ['dayofweek'])\nreg_dataset['no2_emission_sum_t1'] = reg_dataset['no2_emission_sum'].shift(1)\nreg_dataset['no2_emission_sum_t2'] = reg_dataset['no2_emission_sum'].shift(2)\nreg_dataset['no2_emission_sum_t3'] = reg_dataset['no2_emission_sum'].shift(3)\nreg_dataset['no2_emission_rolling_mean_t1t3'] = (reg_dataset['no2_emission_sum_t1'] + reg_dataset['no2_emission_sum_t2'] + reg_dataset['no2_emission_sum_t3']) \/ 3","68e7368b":"reg_dataset.head()","59fb2f90":"reg_dataset.mean()","4f3ce65c":"reg_dataset.fillna(reg_dataset.mean()).head(5)","706f9f0e":"!pip install dabl","1c885f91":"import dabl\nfrom dabl import plot\n\nplot(reg_dataset, 'no2_emission_sum')\nplt.show()","a8ca50af":"ec = dabl.SimpleClassifier(random_state=0).fit(reg_dataset, target_col=\"month\")","f548b06e":"reg_dataset_df = reg_dataset[['date','no2_emission_sum']]\n\n#Set Date column as the index column.\nreg_dataset_df.set_index('date', inplace=True)\nreg_dataset_df.head()","f4a3d50c":"plt.figure(figsize=(15, 5))\nplt.ylabel(\"no2_emission_sum\")\nplt.xlabel(\"date\")\nplt.plot(reg_dataset_df)\nplt.show()","38909272":"Temperature is falling down in the month of October 2018. Need to check the correlation in between temperature and No2.","0612b445":"Now calculating the production capacity of plant on the basis of days, hour and minute.","2acf00e8":"From this graph, this peak might be the missing values in images. 15 April, 2019 is an outlier among in the data.","b692116b":"Preprocessing the data","7c933cee":"When we look into this shape of the image, that is in three dimension. The last dimension states to the band. https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/COPERNICUS_S5P_OFFL_L3_NO2","6be0c8b8":"Checking how many duplicate values are present per columns","42ca7d52":"the model needs to reproduce an annual average historical grid-level electricity emissions factor (based on rolling 12-months of data from July 2018 - July 2019) for Puerto Rico.","aa3d7201":"From the above observation, there is no red region means there may be nan value.","785d68a3":"**Analysing the images by using the the Rasterio module**\n\nRasterio is a module for reading and writing several different raster formats in Python.\n\nA raster image is an image file format that is defined by a pixel that has one or more numbers associated with it. The number defines the location, size, or color of the pixels. Raster images are commonly .BMP, .GIF, .JPEG, .PNG, and .TIFF files. Today, almost all of the images you see on the Internet and images taken by a digital camera are raster images.\n\n**Exploring the NO2 data**","25fd78ff":"**Exploring the weather data**","4794e770":"Weather image data do not have missing values.","bdf41c33":"More than 97% of Fossil fuel, are mostly used for generation of power in Puerto Rico than renewable energy about 1.03%.","8f94bde0":"PROJECT OVERVIEW:\n\nDevelop a methodology to calculate an average historical emissions factor of electricity generated for a sub-national region, using remote sensing data and techniques.","295f5555":"From the observation, we can see the Capacity Factor is 113 for that coal Power Plant, which is not possible.\n\nAlso, the capacity factor for the hydro, wind and solar Power Plants is 5.2 0.05 & 0.02, which again seems not possible. However, this is much less important since those are very low capacity plants as compared to Oil and Coal Power Plants.","33e86805":"From this value counts of global power plants, most of the plants did not commission. The power plants are as old as 1915 and the recent belongs to 2012.\n\n\n\nWho owns the power plants? Let's check it out.","cd498963":"PROBLEM STATEMENT:\n\nTo develop a methodology to calculate an average historical emissions factor for electricity generation in a sub-national region.","fe3a93d3":"https:\/\/www.eia.gov\/state\/analysis.php?sid=RQ#25 Puerto Rico's electricity is supplied by the Puerto Rico Electric Power Authority (PREPA, also known as Autoridad de Energ\u00eda El\u00e9ctrica, or AEE), a government agency that owns the electricity transmission and distribution systems for the main island, Vieques, and Culebra, as well as 80% of the electricity generating capacity\n\nOverall capacity of power plants\n\nWhen it comes to generation capacity, think maximum power output. Capacity is the amount of electricity a generator can produce when it\u2019s running at full blast. This maximum amount of power is typically measured in megawatts (MW) or kilowatts and helps utilities project just how big of an electricity load a generator can handle.","5e632e88":"**Simple factor model**","9383f264":"DATA PROVIDED\n\nInitial list of datasets covering the geographic boundary of Puerto Rico to serve as the foundation for this analysis. As an island, there are fewer confounding factors from nearby areas. Calculate the annual historical emission factor\n\nBonus points will be awarded for smaller time slices of the average historical emissions factors, such as one per month for the 12-month period Additional bonus points will be awarded for participants that develop methodologies for calculating marginal emissions factors for the sub-national region.\n\nAn emissions factor is a representative value that attempts to relate the quantity of a pollutant released to the atmosphere with an activity associated with the release of that pollutant. These factors are usually expressed as the weight of pollutant divided by a unit weight, volume, distance, or duration of the activity emitting the pollutant (e.g., kilograms of particulate emitted per megagram of coal burned).\n\nSuch factors facilitate estimation of emissions from various sources of air pollution. In most cases, these factors are simply averages of all available data of acceptable quality, and are generally assumed to be representative of long-term averages for all facilities in the source category (i.e., a population average).\n\nThe general equation for emissions estimation is:\n\nE = A x EF x (1-ER\/100)\n\nwhere:\n\nE = emissions;\n\nA = activity rate;\n\nEF = emission factor, and\n\nER =overall emission reduction efficiency, %","ab105ca7":"From the above observation, Oil as primary fuel add up to 68.33% for generation more power in Puerto Rico and 17.97% to Gas. Coal found as fuel to 7.38% and on the other hand, renewable energy generates the power around 6.30%.\n\n**Estimated Power Generation in GigaWatt.**\n\nOn the other hand, estimated power generation refers to the amount of electricity that is produced over period of specific time. That is generally measured in kW\/hr, MW\/hr or GW\/hr.","8d77dff7":"Please upvote this notebook. If any suggestion, let me know. Thank you.....","8aed2ec6":"Here we are getting nan values in the NO2 emission bands. Ignoring them for just know.","3bd94de4":"From heatmap, temerature and No2 are correlated with each other.","d21a15ff":"Emission factor slightly dropped down the previous one if we treat on nan and duplicate values which found in the weather data.","bffb33c2":"**Exploring the dataset**\n\nThe given gppd_120_pr.csv consists of all the power plants which belongs to the Puerto Rico, an unincorporated territory of the United States located in the northeast Caribbean Sea.The latitude of Puerto Rico is 18.200178, and the longitude is -66.664513. The island has been chosen for the analysis since there are fewer confounding factors from nearby areas. Puerto Rico also offers a unique fuel mix and distinctive energy system layout that should make it easier to isolate pollution attributable to power generation in the remote sensing data.","1b9ff4af":"from the above dimension of images of weather, there are 6 bands.\n\n**Preprocess the weather data:**"}}