{"cell_type":{"9963193d":"code","2d20fcb8":"code","3d34ae2d":"code","05de189f":"code","a00ddc2a":"code","a1864985":"code","072443fe":"code","85667827":"code","da4237e9":"code","dd1d459c":"code","cbe46f2f":"markdown","ffa2ef58":"markdown","a11f949e":"markdown","1f2dd067":"markdown","ddc1f971":"markdown","d57e2c75":"markdown","90e75ffd":"markdown","250d7d95":"markdown","2fbdae26":"markdown"},"source":{"9963193d":"#------------------ util function ------------------\n# credit to : https:\/\/www.kaggle.com\/freeman89\/eda-can-you-see-the-pneumothorax\n\ndef bounding_box(img):\n    rows = np.any(img, axis=1)\n    cols = np.any(img, axis=0)\n    rmin, rmax = np.where(rows)[0][[0, -1]]\n    cmin, cmax = np.where(cols)[0][[0, -1]]\n\n    return rmin, rmax, cmin, cmax\n\n# ---------------------------\n# from mask_functions import rle2mask\n# ---------------------------\ndef rle2mask(rle, width, height):\n    mask= np.zeros(width* height)\n    array = np.asarray([int(x) for x in rle.split()])\n    starts = array[0::2]\n    lengths = array[1::2]\n\n    current_position = 0\n    for index, start in enumerate(starts):\n        current_position += start\n        mask[current_position:current_position+lengths[index]] = 255\n        current_position += lengths[index]\n\n    return mask.reshape(width, height)\n\n\ndef plot_pixel_array(dataset, figsize=(10,10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n    \ndef plot_with_mask_and_bbox(dataset, mask_encoded, figsize=(20,10)):\n    mask_decoded = rle2mask(mask_encoded, 1024, 1024).T\n    fig, ax = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(20,10))\n    rmin, rmax, cmin, cmax = bounding_box(mask_decoded)\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[0].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[0].imshow(mask_decoded, alpha=0.3, cmap=\"Reds\")\n    ax[0].add_patch(patch)\n    ax[0].set_title('With Mask')\n\n    patch = patches.Rectangle((cmin,rmin),cmax-cmin,rmax-rmin,linewidth=1,edgecolor='r',facecolor='none')\n    ax[1].imshow(dataset.pixel_array, cmap=plt.cm.bone)\n    ax[1].add_patch(patch)\n    ax[1].set_title('Without Mask')\n    plt.show()\n\ndef show_image(img_full_path): \n    image_name= img_full_path.split('\/')[-1][:-4]\n    dataset = pydicom.dcmread(img_full_path)\n#     show_dcm_info(dataset, image_name)\n    \n    mask_encoded = train_rle.set_index('ImageId').loc[image_name].values[0]\n    if '-' in mask_encoded:    \n        plot_pixel_array(dataset)\n    else:\n        plot_with_mask_and_bbox(dataset, mask_encoded)\n        \n\ndef absoluteFilePaths(directory):\n    ls =[]\n    for dirpath,_,filenames in os.walk(directory):\n        for f in filenames:\n            ls.append(os.path.abspath(os.path.join(dirpath, f)))\n    return ls","2d20fcb8":"import os\nimport glob\n\nimport pydicom\n\nfrom matplotlib import cm\nfrom matplotlib import pyplot as plt\nfrom matplotlib import patches as patches\n\nimport pandas as pd\nimport numpy as np\npd.options.mode.chained_assignment = None  \nimport sys  \n\nROOT_PATH=  '..\/input\/siim-train-test\/siim\/'\nIMAGE_PATH = ROOT_PATH +'dicom-images-train\/'\nIMAGE_MEDIA_TYPE = '.dcm'\nIMAGE_SIZE = 1024\nlist_of_all_dicom_files= absoluteFilePaths(IMAGE_PATH)","3d34ae2d":"train_rle = pd.read_csv(ROOT_PATH + 'train-rle.csv')\ntrain_rle.columns\ntrain_rle.columns= ['ImageId', 'EncodedPixels']\ntrain_rle['Target']= [int('-' not in set(x)) for x in train_rle.EncodedPixels.values.tolist()]\nimg_names= train_rle[train_rle['Target']==1].ImageId.values.tolist()","05de189f":"x=[]\ny=[]\nwidth=[]\nheight=[]\n\ntrain_rle['x'] = 0\ntrain_rle['y'] = 0\ntrain_rle['width'] = 0\ntrain_rle['height'] = 0\n\nfrom tqdm import tqdm\n\nfor img_name in tqdm(img_names):\n    mask= train_rle[train_rle['ImageId']==img_name]['EncodedPixels'].values[0]\n    mask = rle2mask(mask, 1024, 1024).T\n    rmin, rmax, cmin, cmax = bounding_box(mask)\n    train_rle['x'][train_rle['ImageId']==img_name] = 2*400-cmin \n    train_rle['y'][train_rle['ImageId']==img_name] = 2*400-rmin\n    train_rle['width'][train_rle['ImageId']==img_name]= cmax-cmin\n    train_rle['height'][train_rle['ImageId']==img_name]= rmax-rmin\n\nmask_dist = train_rle[train_rle.Target==1][['x','y', 'width', 'height']]\n","a00ddc2a":"import numpy as np\nimport matplotlib.pyplot as plt\nplt.scatter(mask_dist.x.values, mask_dist.y.values)\nplt.show()","a1864985":"from matplotlib.patches import Rectangle\nmask_dist = train_rle[train_rle.Target==1][['x','y', 'width', 'height']]\nfig, ax1 = plt.subplots(1, 1, figsize = (10, 10))\nax1.set_xlim(0, 1024)\nax1.set_ylim(0, 1024)\nfor _, c_row in mask_dist.sample(1000).iterrows():\n    ax1.add_patch(Rectangle(xy=(c_row['x'], c_row['y']),\n                 width=c_row['width'],\n                 height=c_row['height'],\n                           alpha=5e-3))","072443fe":"X_STEPS, Y_STEPS = 1024, 1024\nxx, yy = np.meshgrid(np.linspace(0, 1024, X_STEPS),\n           np.linspace(0, 1024, Y_STEPS), \n           indexing='xy')\nprob_image = np.zeros_like(xx)\nfor _, c_row in mask_dist.sample(3286).iterrows():\n    c_mask = (xx>=2*400-c_row['x']) & (xx<=(2*400-c_row['x']+c_row['width']))\n    c_mask &= (yy>=2*400-c_row['y']) & (yy<=2*400-c_row['y']+c_row['height'])\n    prob_image += c_mask\nfig, ax1 = plt.subplots(1, 1, figsize = (10, 10))\nax1.imshow(prob_image, cmap='hot')","85667827":"show_image(list_of_all_dicom_files[100])","da4237e9":"show_image(list_of_all_dicom_files[123])","dd1d459c":"show_image(list_of_all_dicom_files[236])","cbe46f2f":"**That's all ! I hope this was helpful.**","ffa2ef58":"### Let's some example in the training set.","a11f949e":"#### Heat Probability map \n\nThe following map is also very interesting. We can see more clearly where Pneumothorax can occur more often according to the training dataset.","1f2dd067":"## ** Overview : **\n\n##### If you enjoy the content - please don't forget to upvote. This keeps guys like me to work on kernels :)\n\nIn addition to the other EDAs made by other participants, I want in this kernel to show where Pneumothorax occurs the most. \n\nThis may give a clearer idea about Pneumothorax and where does happens the most. \n\nI will refer to the bounding boxes by the bottom left point and will plot all the BB in the (x,y) space. You will see how this looks over the whole train dataset. ","ddc1f971":"# Showing Bounding boxes as segmentation","d57e2c75":"I guess it's clear where Pneumothorax happens the most in the samples we have in the training dataset.\n\nLet's plot some more interesting plots like the probability map to where Pneumothorax is more likely to happens. Let's see!","90e75ffd":"That's pretty interesting, right! This is very similar to a distribution of masks over a human lung. \nIt seems that most the Pneumothorax is happening on the upper side of the lung. Few cases have Pneumothorax in the lower part of the lung. \n\nDoesn't it seem logical? I guess yes, because the air, inside the lung, is light enough to go up instead of going down. But some specialists in the field can confirm this explanation.","250d7d95":"## Bounding boxes as segmentation","2fbdae26":"## Plot bounding boxes in (x,y) plan "}}