{"cell_type":{"76f52b3f":"code","ea0e35c5":"code","dd330577":"code","dc735bcb":"code","08d24b4a":"code","40ee302a":"code","c20b78c9":"code","da79bc72":"code","217d3a74":"code","4a282952":"code","194334a9":"code","57207830":"code","c4acfe56":"code","43a22a1b":"code","2a875f9e":"code","3f414faf":"code","17f03ab3":"code","f9f4bc72":"code","e6f21579":"code","54b05119":"code","a9ad9e3b":"code","8e86cc18":"code","5e3a7d0c":"code","116bb7ff":"code","141da8be":"code","93887e7c":"code","d34ee263":"code","16e04611":"code","14282be2":"code","f70a29f1":"code","ba788ff2":"code","d5553597":"code","0d786bcd":"code","31c8b633":"code","0bd1bfdb":"code","cef0d3b0":"code","b9d71da3":"code","27bb1cdf":"code","30f5d2f3":"code","eff0c4fd":"code","d4794725":"code","f954f7a1":"code","3500e2ca":"markdown","eaea3cdf":"markdown","c66cf3f8":"markdown","0aef0dd5":"markdown","0f953846":"markdown","877cc5c6":"markdown","a28da7f9":"markdown","80131e52":"markdown","f0ff3dfd":"markdown","1d8d0336":"markdown","6b5db59d":"markdown","a272fd49":"markdown","11c13711":"markdown","e6b59a9e":"markdown","28d7bf24":"markdown"},"source":{"76f52b3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea0e35c5":"import matplotlib.pyplot as plt","dd330577":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","dc735bcb":"data","08d24b4a":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","40ee302a":"football","c20b78c9":"edu = pd.read_csv('\/kaggle\/input\/experiment-2-12-10-2020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","da79bc72":"edu","217d3a74":"edu.tail()","4a282952":"edu.head(5)","194334a9":"edu.describe()","57207830":"edu['Value']","c4acfe56":"edu[10:14]","43a22a1b":"edu.iloc[90:100][['TIME','GEO', 'Value']]","2a875f9e":"edu[edu['Value'] > 6.5].tail()","3f414faf":"edu[edu[\"Value\"].isnull()].head()","17f03ab3":"edu.max(axis = 0)","f9f4bc72":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","e6f21579":"s = edu[\"Value\"]\/100\ns.head()","54b05119":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","a9ad9e3b":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","8e86cc18":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","5e3a7d0c":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.tail()","116bb7ff":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\n","141da8be":"edu.tail()","93887e7c":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","d34ee263":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","16e04611":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","14282be2":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","f70a29f1":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","ba788ff2":"edu.sort_values(by = 'Value', ascending = True,\n                inplace = True)\nedu.head()","d5553597":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","0d786bcd":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.tail()","31c8b633":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","0bd1bfdb":"group = edu[[\"TIME\", \"Value\"]].groupby('TIME').mean()\ngroup.head()","cef0d3b0":"filtered_data = edu[edu[\"TIME\"] > 1999]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","b9d71da3":"filtered_data = edu[edu[\"TIME\"] > 1999]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu","27bb1cdf":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","30f5d2f3":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending= False, method='first').head()","eff0c4fd":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","d4794725":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","f954f7a1":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","3500e2ca":"*Q1. Which is the size of the edu DataFrame (rows x columns)?*\n**Ans: It has 384 rows and 3 columns**\n","eaea3cdf":"**6.8  Rearranging data**","c66cf3f8":"6.6**#shorting data**","0aef0dd5":"1st calling aggrigation from pandas and\n2nd is applying in python function edu['value']","0f953846":"Q.4 Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nAns: The result shows the statistical information on all the numeric columns. The default value is Lenght 384.","877cc5c6":"ote that the collection elements are in genearl seperated by \":\". This can be observed in the data lab sectio in kaggle","a28da7f9":"**6.7  Grouping data**","80131e52":"projection","f0ff3dfd":"Q3. What happens if we give a number as argument to the method head()?\nAns: It prints the row upto (n-1).","1d8d0336":"Q5. What does this index return? What does the first index represent? And the second one?\nAns: If we want to select a subset of columns and rows using the labels as our references instead of the positions, we can use ilocindexing.  The 1st index represent the rows and 2nd index represent columns.","6b5db59d":"selection","a272fd49":"Q7. What do you observe regarding the parameter ascending=False?\nAns: we use the first method, in which ranks are assigned in the order they appear in the array, avoiding gaps between ranking.\n#not clear????","11c13711":"What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nAns: It filter value and select above value 6.5 considaring all the values in the dataset. If we indexed then It will run for that specified range.","e6b59a9e":"Q2. What does the method tail()return?\nAns: This returns the the last 5 rows of the dataset.","28d7bf24":"Ignor index does not specify any index where to append new row. By default it goes to last row."}}