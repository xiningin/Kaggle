{"cell_type":{"0e4f36d4":"code","b2f44b2e":"code","610b48ab":"code","c8eec0fb":"code","7380a376":"code","835c052a":"code","ea492b00":"code","7275a005":"code","b0836115":"code","dfada7e1":"code","4249efb8":"code","9b481161":"code","0cfff132":"code","0241dd29":"code","eefeaa3d":"code","ef4e1289":"code","0741c1b6":"code","07196f97":"code","81163b93":"code","5b0f4641":"code","35ecedfa":"code","896bd3e4":"code","85ac4162":"code","700c3f9f":"code","70930e7e":"code","c0cc1b3f":"code","7e107895":"code","e1dd62f1":"code","75a47b17":"code","e103d37a":"code","15b178be":"code","05974153":"code","bb3a7262":"code","2a004476":"code","791eab9e":"code","5d1d65ab":"code","fb392a12":"code","bd18bdcb":"code","352908b5":"code","72dd5022":"code","371640f6":"code","ff51ad54":"code","0a1408fb":"code","c8f6e1f6":"code","1a8e1800":"code","b855c9b7":"code","4ab7b0d1":"code","acb8029d":"markdown","e0811d36":"markdown","3371840d":"markdown","fe0a3cf0":"markdown","bbab9d04":"markdown","accf6434":"markdown","5deae7fa":"markdown","aa949051":"markdown","be00cbd0":"markdown","337d00cd":"markdown","83dc4a93":"markdown","8dc5065b":"markdown","67ac1a9e":"markdown","5736adf4":"markdown","50527fe6":"markdown","1728d27a":"markdown","cb5066f9":"markdown","47989cfb":"markdown","045fcc82":"markdown","54c61c51":"markdown","58dd5f06":"markdown","db724c44":"markdown","2286a684":"markdown","2b6f2354":"markdown","65e57d4e":"markdown","0aaad369":"markdown","9adf6b0d":"markdown","bfe67384":"markdown","ebced3e3":"markdown","9a95c1ce":"markdown","16b1667c":"markdown","c2d136ef":"markdown"},"source":{"0e4f36d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2f44b2e":"train_df =pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df =pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_PassangerId =test_df[\"PassengerId\"]","610b48ab":"train_df.columns","c8eec0fb":"train_df.head()","7380a376":"train_df.describe()","835c052a":"train_df.info()","ea492b00":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex:\"Sex\"\n    output: bar plot & value count\n    \n    \"\"\"\n    #get feature\n    var = train_df[variable]\n    #count number of feature\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n{}\".format(variable,varValue))\n    \n    ","7275a005":"category1 =[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor i in category1:\n    bar_plot(i)","b0836115":"category2 =[\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{} \\n\".format(train_df[i].value_counts()))","dfada7e1":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    var1 =train_df[variable]\n    plt.hist(var1, bins =40)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with histogram\".format(variable))\n    plt.show()\n    ","4249efb8":"numericVar =[\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numericVar:\n    plot_hist(i)","9b481161":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean()","0cfff132":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index = False).mean().sort_values(by =\"Survived\",ascending = False)\n\n","0241dd29":"#Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby(\"Sex\",as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","eefeaa3d":"#SibSp vs Survived\n\ntrain_df[[\"SibSp\",\"Survived\"]].groupby(\"SibSp\",as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","ef4e1289":"train_df[[\"Parch\",\"Survived\"]].groupby(\"Parch\",as_index = False).mean().sort_values(by =\"Survived\",ascending = False)","0741c1b6":"def detect_outliers(df,features):\n    outlier_indices =[]\n    \n    for i in features:\n        #first quartile\n        Q1=np.percentile(df[i],25)\n        #third quartile\n        Q3=np.percentile(df[i],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier Step\n        outlier_step = IQR * 1.5\n        #Outlier and their indices\n        outlier_list_column =df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step)].index\n        #store indices\n        outlier_indices.extend(outlier_list_column)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list( i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        \n        \n        ","07196f97":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","81163b93":"#drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis =0).reset_index(drop =True)","5b0f4641":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis =0).reset_index(drop = True)","35ecedfa":"train_df.head()","896bd3e4":"train_df.columns[train_df.isnull().any()]","85ac4162":"train_df.isnull().sum()","700c3f9f":"train_df[train_df[\"Embarked\"].isnull()]","70930e7e":"train_df.boxplot(column = \"Fare\",by =\"Embarked\")\nplt.show()","c0cc1b3f":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","7e107895":"train_df[train_df[\"Embarked\"].isnull()]","e1dd62f1":"train_df[train_df[\"Fare\"].isnull()]","75a47b17":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","e103d37a":"train_df[train_df[\"Fare\"].isnull()]","15b178be":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot = True, fmt = \".2f\")\nplt.show()","05974153":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\",data = train_df,kind = \"bar\", size = 6)\ng.set_ylabels = (\"Survived Probability\")\nplt.show()","bb3a7262":"g = sns.factorplot(x =\"Parch\", y =\"Survived\",kind = \"bar\",data = train_df,size =6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2a004476":"g = sns.factorplot(x =\"Pclass\", y = \"Survived\",data = train_df,kind = \"bar\",size =6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","791eab9e":"g = sns.FacetGrid(train_df,col = \"Survived\")\ng.map(sns.distplot,\"Age\",bins = 25)\nplt.show()","5d1d65ab":"g = sns.FacetGrid(train_df,col =\"Survived\", row = \"Pclass\",size=2)\ng.map(plt.hist, \"Age\",bins=25)\ng.add_legend()\nplt.show()","fb392a12":"g = sns.FacetGrid(train_df, row = \"Embarked\",size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\") \ng.add_legend()\nplt.show()","bd18bdcb":"g = sns.FacetGrid(train_df,row=\"Embarked\",col =\"Survived\",size = 2.3)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","352908b5":"train_df[train_df[\"Age\"].isnull()]","72dd5022":"sns.factorplot(x = \"Sex\",y =\"Age\",data = train_df,kind=\"box\")\nplt.show()","371640f6":"sns.factorplot(x = \"Sex\",y=\"Age\",hue=\"Pclass\",data = train_df,kind =\"box\")\nplt.show()\n","ff51ad54":"sns.factorplot(x = \"Parch\",y=\"Age\",data = train_df,kind =\"box\")\nsns.factorplot(x = \"SibSp\",y=\"Age\",data = train_df,kind =\"box\")\n\nplt.show()","0a1408fb":"train_df[\"Sex\"] = [1 if i ==\"male\" else 0 for i in train_df[\"Sex\"]]","c8f6e1f6":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot =True)\nplt.show()","1a8e1800":"index_nan_age =list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_prediction = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_median = train_df[\"Age\"].median()\n    if not np.isnan(age_prediction):\n        train_df[\"Age\"].iloc[i] = age_prediction\n    else:\n        train_df[\"Age\"].iloc[i] = age_median","b855c9b7":"train_df[train_df[\"Age\"].isnull()]","4ab7b0d1":"age_prediction","acb8029d":"* Sex is not informative for age prediction, age distribution seems to be same..","e0811d36":"<a id= \"6\"><\/a>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Age - Survived\n","3371840d":"# Introduction\n\nThe Titanic was a British steamship that sank in the early hours of April 15, 1912 after striking an iceberg, leading to the deaths of more than 1,500 passengers and crew.\n\n<font color=\"green\">\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)","fe0a3cf0":"<a id= \"18\"><\/a>\n## Embarked -- Sex -- Pclass -- Survived","bbab9d04":"<a id= \"14\"><\/a>\n## Parch -- Survived","accf6434":"* Age is not correlated with Sex but it is correlated with Parch,SibSp,Pclass..","5deae7fa":"* float64(2) : Fare and age\n* int64(5) : Pclass,Sibsp,parch,passengerId and survived\n* object(5): Cabin,embarked,ticket,name and sex","aa949051":"<a id= \"20\"><\/a>\n## Fill Missing: Age Feature","be00cbd0":"<a id= \"19\"><\/a>\n## Embarked -- Sex -- Fare -- Survived","337d00cd":"* SibSp and Parch can be used for new feature extraction with th(threshold) = 3\n* small families have more chance to survive.\n* There is a standart devivation in survival of passenger with parch = 3","83dc4a93":"<a id= \"17\"><\/a>\n## Pclass -- Survived","8dc5065b":"<a id= \"2\"><\/a>\n# Variable Description\n\n1. PassengerId:  unique id number to each passenger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name of the person\n5. Sex: gender of the passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parents\/children\n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passengers embarked(C= Cherbourg,Q =Queenstown,S =Southampton)\n","67ac1a9e":"<a id= \"13\"><\/a>\n## SibSp -- Survived","5736adf4":"<a id= \"12\"><\/a>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","50527fe6":"<a id= \"10\"><\/a>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","1728d27a":"Fare feature seems to have correlation with Survived feature(0.26)","cb5066f9":"<a id= \"7\"><\/a>\n# Outlier Detection","47989cfb":"<a id= \"15\"><\/a>\n## Pclass -- Survived","045fcc82":"* Having a lot of SibSp have less chance to survive.\n* If SibSp = 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories","54c61c51":"<a id= \"1\"><\/a>\n# Load and Check Data","58dd5f06":"<a id= \"9\"><\/a>\n## Find Missing Value","db724c44":"* Female passengers have much better Survival rate than males.\n* Males have better Survival rate in Pclass 3 in C.\n* embarked and sex will be used in training.","2286a684":"<a id= \"4\"><\/a>\n## Categorical Variable","2b6f2354":"<a id= \"8\"><\/a>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","65e57d4e":"* age <= 10 has a high survival rate\n* oldest passenger (80) survived,\n* large number of 20 y.o. did not survive\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","0aaad369":"<a id= \"3\"><\/a>\n# Univariate Variable Analysis\n* Categorical Variable: Survived,Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and PassengerId\n\n","9adf6b0d":"* Passengers who pay higher fare have better survival chance.","bfe67384":"* pclass is important feature for model training.","ebced3e3":"<a id= \"11\"><\/a>\n# Visualization","9a95c1ce":"<a id= \"5\"><\/a>\n## Numerical Variable","16b1667c":"<a id= \"16\"><\/a>\n## Age -- Survived","c2d136ef":"* 1st class passengers are older than 2nd, and 2nd class passengers are older than 3rd class passengers."}}