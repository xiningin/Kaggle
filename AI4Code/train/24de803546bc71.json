{"cell_type":{"f345dd20":"code","aa6644a5":"code","2fd59e3a":"code","d5ae458e":"code","a9ec8f00":"code","19cc021e":"code","6d589876":"code","3770a1b6":"code","e5b0d9ef":"code","0ef1265b":"code","9d7196f5":"code","6b57c162":"code","6a3a2e66":"code","f4f3b8d1":"code","440ce7c6":"code","0c03acaf":"code","86fbd870":"code","69187ace":"code","ae95a607":"code","f8045f57":"code","86f391ac":"code","3293bc5f":"code","9f756fd0":"code","2f65b17f":"code","087a5d11":"code","efe36767":"code","f1945743":"code","926f4325":"code","a105d5e7":"code","015fa677":"code","7dac9985":"code","c5e92f61":"code","9588e312":"code","66cbdd25":"code","b3086eaf":"code","3c851f8e":"code","5ee190be":"code","df781903":"code","5c9bb8f5":"code","0c73b1c1":"code","cf73981d":"code","eae2b794":"code","332fe09e":"code","ba8bb36b":"code","fd224abb":"code","60d294d3":"code","d5f5ba48":"code","8390cfd2":"code","3ba60494":"code","79d143ef":"code","5cfec714":"code","93346b81":"code","1c0a6588":"code","c3dbb3ed":"code","2d863283":"code","e7314ac5":"code","d47e1a31":"code","9a6226cc":"markdown","dcae84be":"markdown","7998be96":"markdown","a8765d67":"markdown","fb4cea57":"markdown","b75f3ee8":"markdown","710fe97a":"markdown","1aa0ea56":"markdown","92c77c8d":"markdown","56e19bba":"markdown","2ef2c181":"markdown","716871bb":"markdown","b83f3d77":"markdown","680b18e3":"markdown","86ac43c7":"markdown","3b77d9ef":"markdown","7e1533a6":"markdown","e334ef23":"markdown","82e5b831":"markdown","0af47983":"markdown","ae7f259a":"markdown","70f5228b":"markdown","d70e75f0":"markdown","26c2bb5e":"markdown","49fdd201":"markdown","efb69cb2":"markdown","0f4e165f":"markdown","74bb1c57":"markdown","06595d92":"markdown","cd4e6150":"markdown","4e877d51":"markdown","b1510833":"markdown","ef5d7339":"markdown","f2047245":"markdown","fbaff24e":"markdown","ef55424f":"markdown","52dcf12b":"markdown","5830e406":"markdown","70366b34":"markdown","2dc113f9":"markdown","356c7582":"markdown","597531ad":"markdown","5c25b8bd":"markdown","6d095a87":"markdown","cbfac458":"markdown","4d227682":"markdown","1c645b89":"markdown","e24d65bf":"markdown","99362ac7":"markdown","de499643":"markdown","35526260":"markdown","7917c731":"markdown","72d28a96":"markdown","d6f1f023":"markdown","3373bb3b":"markdown","cd5c9561":"markdown"},"source":{"f345dd20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa6644a5":"from bokeh.io import output_notebook\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.transform import cumsum\nfrom bokeh.palettes import Spectral6\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.layouts import gridplot\nfrom bokeh.io import curdoc\nfrom bokeh.models import HBar, Plot\n# curdoc().theme = 'dark_minimal'\ncurdoc().theme = 'caliber'\n\noutput_notebook()","2fd59e3a":"!pip install openpyxl","d5ae458e":"df = pd.read_excel('\/kaggle\/input\/child-malnutrition-unicef-dataset\/UNICEF_WHO_WB_Global_Expanded_Databases_Stunting_April_2021.xlsx', sheet_name = 'Trend')","a9ec8f00":"df.head(10)","19cc021e":"df.shape","6d589876":"df.columns = df.iloc[7]\ndf.drop(df.index[7], inplace = True)","3770a1b6":"df.drop([0, 1, 2, 3, 4, 5, 6], axis = 0, inplace = True)","e5b0d9ef":"df = df.dropna(axis = 1).reset_index(drop = True) ## Dropping columns containing null values","0ef1265b":"df.head()","9d7196f5":"df['WB_Latest'].unique()","6b57c162":"cnt_income = {}\nfor income in df['WB_Latest'].unique():\n    countries = []\n    countries.append(list(set(list(df[df['WB_Latest'] == income]['CountryName']))))\n    cnt_income[income] = countries","6a3a2e66":"print(\"Number of Countries having Low Income status is: \", len(cnt_income['Low Income'][0]))\nprint(\"Number of Countries having Upper Middle Income status is: \", len(cnt_income['Upper Middle Income'][0]))\nprint(\"Number of Countries having Lower Middle Income status is: \", len(cnt_income['Lower Middle Income'][0]))\nprint(\"Number of Countries having High Income status is: \", len(cnt_income['High Income'][0]))","f4f3b8d1":"list(df['WB_Latest'].unique())","440ce7c6":"from bokeh.palettes import Spectral6\n\nincome_status = list(df['WB_Latest'].unique())\nnumber_of_countries = [29, 50, 49, 28]\n\nsource = ColumnDataSource(data=dict(status = income_status, counts = number_of_countries, color = Spectral6))\n\np = figure(x_range = income_status, plot_width = 900, plot_height = 350, title = \"Number of Countries vs Income Level\",\n           toolbar_location = None, tools = \"hover\", tooltips = \"@status: @counts\", background_fill_color=\"#f4f0ec\")\n\np.vbar(x = 'status', top = 'counts', width = 0.9, color = 'color', legend_field = \"status\", source = source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_right\"\n\np.title.align = 'center'\np.title.text_font_size = '20pt'\np.title.text_font_style = 'bold'\np.title.text_font = 'Serif'\np.xaxis.axis_label_text_font_size = \"16pt\"\np.yaxis.axis_label_text_font_size = \"16pt\"\n    \nshow(p)","0c03acaf":"df['WHORegion'].unique()","86fbd870":"cnt_region = {}\nfor region in df['WHORegion'].unique():\n    countries = []\n    countries.append(list(set(list(df[df['WHORegion'] == region]['CountryName']))))\n    cnt_region[region] = countries","69187ace":"print(\"Number of Countries under EMRO region is: \", len(cnt_region['EMRO'][0]))\nprint(\"Number of Countries under EURO region is: \", len(cnt_region['EURO'][0]))\nprint(\"Number of Countries under AFRO region is: \", len(cnt_region['AFRO'][0]))\nprint(\"Number of Countries under AMRO region is: \", len(cnt_region['AMRO'][0]))\nprint(\"Number of Countries under WPRO region is: \", len(cnt_region['WPRO'][0]))\nprint(\"Number of Countries under SEARO region is: \", len(cnt_region['SEARO'][0]))","ae95a607":"df['WHORegion'].unique()","f8045f57":"regions = list(df['WHORegion'].unique())[0:6]\nnumber_of_countries = [21, 27, 46, 28, 22, 11]\n\nsource = ColumnDataSource(data=dict(regions = regions, counts = number_of_countries, color = Spectral6))\n\np = figure(x_range = regions, plot_width = 900, plot_height = 350, title = \"Number of Countries in each Region\",\n           toolbar_location = None, tools = \"hover\", tooltips = \"@regions: @counts\", background_fill_color=\"#f4f0ec\")\n\np.vbar(x = 'regions', top = 'counts', width = 0.9, color = 'color', legend_field = \"regions\", source = source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_right\"\n\np.title.align = 'center'\np.title.text_font_size = '20pt'\np.title.text_font_style = 'bold'\np.title.text_font = 'Serif'\np.xaxis.axis_label_text_font_size = \"16pt\"\np.yaxis.axis_label_text_font_size = \"16pt\"\n    \nshow(p)","86f391ac":"stuntNum = pd.read_excel('\/kaggle\/input\/child-malnutrition-unicef-dataset\/JME_Country_Estimates_April_2021.xlsx', sheet_name = 'Stunting Numb Affected(Model)')\nstuntNum.head()","3293bc5f":"stuntNum['2020'] = stuntNum['2020 1'] ## The column name should have been 2020 instead of 2020 1\nstuntNum.drop('2020 1', axis = 1, inplace = True)\n\nprint(\"Number of Countries included are:\", len(stuntNum['Country and areas'].unique()))","9f756fd0":"stuntNum.drop(['Note', 'Indicator', 'Measure'], axis = 1, inplace = True)","2f65b17f":"stuntNum = stuntNum[stuntNum['Estimate'] == 'Point Estimate'].drop('Estimate', axis = 1).reset_index()\nstuntNum.drop('index', axis = 1, inplace = True)","087a5d11":"def country_trend(df, country_name):\n    \"\"\"\n    A function that will plot the stunting trend for the years 2000-2020 for a given country name\n    \"\"\"\n    \n    vals = []\n    cols = df.columns[2:]\n    df_country = df[df['Country and areas'] == country_name]\n    for col in cols:\n        vals.append(float(df_country.iloc[0][col])) ## Count is in thousands\n    \n    source = ColumnDataSource(data = dict(cols = cols, counts = vals, color = ['#6baed6'] * 21))\n    p = figure(plot_height = 400, plot_width = 800, title = \"Stunting Trend for \" + country_name + \"(count in Thousands)\", \n               x_axis_label = 'years', y_axis_label = 'count', tools = \"hover\", tooltips = \"@cols: @counts\", background_fill_color=\"#FAEBEB\")\n    \n    # add a line renderer with legend and line thickness\n    p.line('cols', 'counts', line_width = 2, source = source, line_dash = \"dashed\")\n    p.title.align = 'center'\n    p.title.text_font_size = '20pt'\n    p.title.text_font_style = 'bold'\n    p.title.text_font = 'Serif'\n    p.xaxis.axis_label_text_font_size = \"16pt\"\n    p.yaxis.axis_label_text_font_size = \"16pt\"\n\n    # show the results\n    show(p)","efe36767":"country_trend(stuntNum, 'India')","f1945743":"country_trend(stuntNum, 'United States')","926f4325":"def year_trend(df, year):\n    \"\"\"\n    A function that will plot the figures for top 5 countries with highest number of stunting cases for a given year\n    \"\"\"\n    \n    vals = [float(i) for i in df[str(year)] if i != '-']\n    vals = sorted(vals, reverse=True)[0: 5]\n    df1 = df[['Country and areas', str(year)]]\n    countries = []\n    \n    for val in vals:\n        countries.append(list(df1[df1[str(year)] == str(val)]['Country and areas'])[0])\n    \n    source = ColumnDataSource(data = dict(Countries = countries, counts = vals, color = ['skyblue', 'salmon', 'turquoise', 'cyan', 'mediumaquamarine']))\n    \n    p = figure(y_range = countries, title = 'Year: ' + str(year), plot_width = 600, plot_height = 300,\n    min_border = 0, tools = \"hover\", tooltips = \"@Countries: @counts\", background_fill_color=\"#FAEBEB\")\n    p.hbar(y = 'Countries', right = \"counts\", left = 0, height = 0.5, fill_color = 'color', source = source)\n    p.title.align = 'center'\n    p.title.align = 'center'\n    p.title.text_font_size = '20pt'\n    p.title.text_font_style = 'bold'\n    p.title.text_font = 'Serif'\n    p.xaxis.axis_label_text_font_size = \"16pt\"\n    p.yaxis.axis_label_text_font_size = \"16pt\"\n    show(p)","a105d5e7":"year_trend(stuntNum, 2000)","015fa677":"year_trend(stuntNum, 2010)","7dac9985":"year_trend(stuntNum, 2020)","c5e92f61":"import folium","9588e312":"import json\nworld_geojson = json.load(open('\/kaggle\/input\/worldcountries1json\/world-countries.json'))\n\n## The json file is neccessary for the choropleth, as it contains coordinate information about each country.","66cbdd25":"def mapping(df, year, world_geojson):\n    \"\"\"\n    A function that enables you to view the cases distribution on a world map\n    \"\"\"\n    \n    example1 = df[['Country and areas', str(year)]]\n    example1[str(year)] = example1[str(year)].replace({'-' : 0}) # Replacing - with 0\n\n    example1 = example1.astype({str(year): float})\n    \n    m = folium.Map(tiles = \"cartodbpositron\")\n\n    folium.Choropleth(\n        geo_data = world_geojson,\n        data = example1,\n        columns = ['Country and areas', str(year)],\n        key_on = 'feature.properties.name',\n        fill_color=\"BuGn\",\n        fill_opacity = 0.7, \n        line_opacity = 0.2,\n    ).add_to(m)\n\n    m\n    \n    return m","b3086eaf":"mapping(stuntNum, 2010, world_geojson)","3c851f8e":"overweightNum = pd.read_excel('\/kaggle\/input\/child-malnutrition-unicef-dataset\/JME_Country_Estimates_April_2021.xlsx', sheet_name = 'Overweight Numb Affected(Model)')\noverweightNum.head()","5ee190be":"overweightNum['2020'] = overweightNum['2020 1'] ## The column name should have been 2020 instead of 2020 1\noverweightNum.drop('2020 1', axis = 1, inplace = True)","df781903":"print(\"Number of Countries included are:\", len(overweightNum['Country and areas'].unique()))","5c9bb8f5":"overweightNum.drop(['Note', 'Indicator', 'Measure'], axis = 1, inplace = True)","0c73b1c1":"overweightNum = overweightNum[overweightNum['Estimate'] == 'Point Estimate'].drop('Estimate', axis = 1).reset_index()","cf73981d":"overweightNum.drop('index', axis = 1, inplace = True)","eae2b794":"def country_trend(df, country_name):\n    \"\"\"\n    A function that will plot the overweight trend for the years 2000-2020 for a given country name\n    \"\"\"\n    \n    vals = []\n    cols = df.columns[2:]\n    df_country = df[df['Country and areas'] == country_name]\n    for col in cols:\n        vals.append(float(df_country.iloc[0][col])) ## Count is in thousands\n    \n    source = ColumnDataSource(data = dict(cols = cols, counts = vals, color = ['#6baed6'] * 21))\n    p = figure(plot_height = 400, plot_width = 800, title = \"Overweight Trend for \" + country_name + \"(count in Thousands)\", \n               x_axis_label = 'years', y_axis_label = 'count', tools = \"hover\", tooltips = \"@cols: @counts\", background_fill_color=\"#f4f0ec\")\n    \n    # add a line renderer with legend and line thickness\n    p.line('cols', 'counts', line_width = 2, source = source, line_dash = \"dashed\")\n    p.title.align = 'center'\n    p.title.text_font_size = '20pt'\n    p.title.text_font_style = 'bold'\n    p.title.text_font = 'Serif'\n    p.xaxis.axis_label_text_font_size = \"16pt\"\n    p.yaxis.axis_label_text_font_size = \"16pt\"\n\n    # show the results\n    show(p)","332fe09e":"country_trend(overweightNum, 'India')","ba8bb36b":"country_trend(overweightNum, 'United States')","fd224abb":"country_trend(overweightNum, 'Germany')","60d294d3":"country_trend(overweightNum, 'Sudan')","d5f5ba48":"def year_trend(df, year):\n    \"\"\"\n    A function that will plot the figures for top 5 countries with highest number of cases for a given year\n    \"\"\"\n    \n    vals = [float(i) for i in df[str(year)] if i != '-']\n    vals = sorted(vals, reverse=True)[0: 5]\n    df1 = df[['Country and areas', str(year)]]\n    countries = []\n    \n    for val in vals:\n        countries.append(list(df1[df1[str(year)] == str(val)]['Country and areas'])[0])\n    \n    source = ColumnDataSource(data = dict(Countries = countries, counts = vals, color = ['skyblue', 'salmon', 'turquoise', 'cyan', 'mediumaquamarine']))\n    \n    p = figure(y_range = countries, title = 'Year: ' + str(year), plot_width = 600, plot_height = 300,\n    min_border = 0, tools = \"hover\", tooltips = \"@Countries: @counts\", background_fill_color=\"#f4f0ec\")\n    p.hbar(y = 'Countries', right = \"counts\", left = 0, height = 0.5, fill_color = 'color', source = source)\n    p.title.align = 'center'\n    p.title.align = 'center'\n    p.title.text_font_size = '20pt'\n    p.title.text_font_style = 'bold'\n    p.title.text_font = 'Serif'\n    p.xaxis.axis_label_text_font_size = \"16pt\"\n    p.yaxis.axis_label_text_font_size = \"16pt\"\n    show(p)","8390cfd2":"year_trend(overweightNum, 2000)","3ba60494":"year_trend(overweightNum, 2010)","79d143ef":"year_trend(overweightNum, '2020')","5cfec714":"df = overweightNum.copy()\ndf.head()","93346b81":"from geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"Worldmap for countries population in 2016\")\nlatitude = []\nlong = []\nfor i in df[\"Country and areas\"]:\n    if i != None:\n        location = geolocator.geocode(i)\n        if location!=None:\n            latitude.append(location.latitude)#, location.longitude)\n            long.append(location.longitude)\n        else:\n            latitude.append(float(\"Nan\"))#, location.longitude)\n            long.append(float(\"Nan\"))\n    else:\n        latitude.append(float(\"Nan\"))#, location.longitude)\n        long.append(float(\"Nan\"))","1c0a6588":"df['Latitude'] = latitude\ndf['Longitude'] = long","c3dbb3ed":"from folium.plugins import MarkerCluster\ndef map_year(df, year):\n    \"\"\"\n    A function that plots the countries on the map for a particular year, showing the number of OverWeight cases\n    \"\"\"\n    \n    df1 = df[['Country and areas', str(year)]]\n    world_map= folium.Map(tiles = \"cartodbpositron\") # empty map\n    marker_cluster = MarkerCluster().add_to(world_map) #for each coordinate, create circlemarker of user percent\n\n    for i in range(len(df)):\n            lat = df.iloc[i]['Latitude']\n            long = df.iloc[i]['Longitude']\n            radius = 5\n            popup_text = \"\"\"Country : {}<br>\n                            Number of Overweight Cases: {}k<br>\n                        \"\"\"\n            popup_text = popup_text.format(df1.iloc[i]['Country and areas'],\n                                       df1.iloc[i][str(year)]\n                                       )\n            folium.CircleMarker(location = [lat, long], radius = radius, popup = popup_text, fill = True).add_to(marker_cluster)\n    folium.TileLayer('cartodbpositron').add_to(world_map)\n    world_map\n    return world_map","2d863283":"map_year(df, 2019)","e7314ac5":"def mapping(df, year, world_geojson):\n    \"\"\"\n    A function that enables you to view the cases distribution on a world map\n    \"\"\"\n    \n    example1 = df[['Country and areas', str(year)]]\n    example1[str(year)] = example1[str(year)].replace({'-' : 0}) # Replacing - with 0\n\n    example1 = example1.astype({str(year): float})\n    \n    m = folium.Map(tiles = \"cartodbpositron\")\n\n    folium.Choropleth(\n        geo_data = world_geojson,\n        data = example1,\n        columns = ['Country and areas', str(year)],\n        key_on = 'feature.properties.name',\n        fill_color=\"BuGn\",\n        fill_opacity = 0.7, \n        line_opacity = 0.2,\n    ).add_to(m)\n\n    m\n    \n    return m","d47e1a31":"mapping(overweightNum, 2010, world_geojson)","9a6226cc":"# A Sneak Peek into Malnutrition","dcae84be":"# Conclusion","7998be96":"**According to WHO, the number of stunting cases in a country greatly reflects its growth. This is clearly visible in the figures of USA and India. USA being a developed country has far far less number of stunting cases as compared to India which is still a developing country.**","a8765d67":"This dataset contains the data for the children affected by overweight in different countries. It contains the data from 2000 to 2020 and it shows three different types of estimates:\n\n* Point Estimate -> Point Estimation involves the use of sample data to calculate a single value (known as a point estimate since it identifies a point in some parameter space) which is to serve as a \"best guess\" or \"best estimate\" of an unknown population parameter.\n\n* Upper and Lower Uncertainity Bound -> the true value of the population parameter will fall within lower bound and upper bound interval.\n\nFor now we will be using the Point Estimate for visualizations","fb4cea57":"**There are 4 different income groups, let's the number of countries belonging to each group.**","b75f3ee8":"### 2000","710fe97a":"## Year Trend","1aa0ea56":"**The black region in the graph represents the case where the naming of the countries might be different in the json file and the actual dataset. For example: the json might contain 'United States of America' but in the dataset it is 'United States'.**","92c77c8d":"## Mapping the Cases","56e19bba":"### 2020","2ef2c181":"**In this section, we are going to have a look at distribution of countries at different levels, for example at an income level classified by World Bank, we also look at different regions managed by WHO etc.**\n\n**For this section we will be using the UNICEF_WHO_WB_Global_Expanded_Databases_Stunting_April_2021 database and the 'Trend' sheet. It contains all the information about each country, whether it's a low-income country, under which regio does it come under etc. But before we move ahead we need to clean the data a bit.**","716871bb":"It's sad to see that India had close to 4 Million overweight cases in 2000, but the good part is that this number is on the decline. There is stil a lot to improve for India in the upcoming years though, as 2.29 Million cases were reported in 2020.","b83f3d77":"Before moving ahead, let's filter the dataset a little bit to get the desired columns. First of all, we will be only needing the Points Estimates, once we get that we will just take out the 2000-2020 columns for each country.","680b18e3":"**You can move around the map and can press the blue dots shown in the map to view the country name and the number of overweight cases reported for that particular country**","86ac43c7":"**Being overweight or fat is having more body fat than is optimally healthy. Being overweight is especially common where food supplies are plentiful and lifestyles are sedentary. As of 2003, excess weight reached epidemic proportions globally, with more than 1 billion adults being either overweight or obese.**\n\n**In this section we are going to analyze the overweight cases across the world, by plotting figures comparing the number of cases across the given years, viewing distribution of the cases across the world on a map and much more**","3b77d9ef":"## Setting up Bokeh","7e1533a6":"### 2020","e334ef23":"### India","82e5b831":"### Sudan","0af47983":"# Importing the Libraries","ae7f259a":"# Overweight","70f5228b":"**China's cases significantly reduced but India still remained at the top. Indonesia, Pakistan and Nigeria also started to report high number of Stunting cases.**","d70e75f0":"Throughout the 2 decades, we can see that United States, India and China has always reported the highest cases of OverWeight. Egypt and Indonesia are also amongst the top. What do you think might be the reason?","26c2bb5e":"## WHO Region","49fdd201":"## Country Trend","efb69cb2":"**Let's checkout the different income groups as reported by the World Bank, with the help of 'WB_Latest' column.**","0f4e165f":"We will be using **Folium** for dealing with maps. Folium makes it easy to visualize data that\u2019s been manipulated in Python on an interactive leaflet map. It enables both the binding of data to a map for choropleth visualizations as well as passing rich vector\/raster\/HTML visualizations as markers on the map.","74bb1c57":"**From the above dataset, we can observe that the row with index 7 contains the actual column names, therefore, we will need to make that row as our columns**","06595d92":"### United States","cd4e6150":"**I have dropped the first 6 rows because it contains almost Null Values only, going ahead we will be dropping null values column wise but it might happen that due to the presence of Null values in first 6 rows only, the whole column is dropped.**","4e877d51":"## Income Groups","b1510833":"Germany do needs to take care and be aware of this rising Slope from 2010 onwards, the number of cases has been on rise since.","ef5d7339":"### Germany","f2047245":"**The situation is very very bad in India, there are 65 Million chilren who face stunting problem, one of the major cause is the high unemployement rate in India as well as the lack of support from the government to assist the growth of a child. Eventhough the curve indicates drop in the number of cases but 35 Million cases reported in 2020 is a very huge figure. There is still a long way to go**","fbaff24e":"**I have always wondered how many regions is WHO divided into and what are the regions called? Let's use Data Science to answer my question.**","ef55424f":"# Categorical Analysis","52dcf12b":"### 2010","5830e406":"# Stunting","70366b34":"**By now, you must have realised how bad the situation is throughout the globe. Children are dying and our future is at risk. Eventhough there are many organizations that are working their hearts out to improve the situation but there is still a long way to go. Governments of each country should put in efforts and people like us should also contribute in any way.**\n\n**Hope you liked the notebook, any suggestions would be highly appreciated.**\n\n**I will continue experimenting in future versions of the notebook.**\n\n**Please upvote if you liked it.**","2dc113f9":"**Woah! We can observe that India had 5 times as many cases than China in 2000**","356c7582":"## Year Trend","597531ad":"### 2010","5c25b8bd":"Before moving ahead, let's filter the dataset a little bit to get the desired columns. First of all, we will be only needing the Points Estimates, once we get that we will just take out the 2000-2020 columns for each country.","6d095a87":"### United States","cbfac458":"### 2000","4d227682":"**Malnutrition refers to deficiencies, excesses, or imbalances in a person\u2019s intake of energy and\/or nutrients. The term malnutrition addresses 3 broad groups of conditions:**\n\n* Undernutrition, which includes wasting (low weight-for-height), stunting (low height-for-age) and underweight (low weight-for-age);\n\n* Micronutrient-related malnutrition, which includes micronutrient deficiencies (a lack of important vitamins and minerals) or micronutrient excess;\n\n* overweight, obesity and diet-related noncommunicable diseases (such as heart disease, stroke, diabetes and some cancers).\n\n**Malnutrition prevalence remains alarming: stunting is declining too slowly while wasting still impacts the lives of far too many young children. Nearly half of all deaths in children under 5 are attributable to undernutrition; undernutrition puts children at greater risk of dying from common infections, increases the frequency and severity of such infections, and delays recovery.**\n\n**The interaction between undernutrition and infection can create a potentially lethal cycle of worsening illness and deteriorating nutritional status. Poor nutrition in the first 1,000 days of a child\u2019s life can also lead to stunted growth, which is associated with impaired cognitive ability and reduced school and work performance.**\n\n**In this notebook we take a sneak peek into Stunting and Overweight cases, have a look at the distribution of the cases across each country from 2000 to 2020, and we will also be using Folium to plot the data on a map and much more.**\n\n**Do upvote the notebook if you liked it!**","1c645b89":"**Stunting is the impaired growth and development that children experience from poor nutrition, repeated infection, and inadequate psychosocial stimulation. Children are defined as stunted if their height-for-age is more than two standard deviations below the WHO Child Growth Standards median.**\n\n**Stunting in early life -- particularly in the first 1000 days from conception until the age of two - impaired growth has adverse functional consequences on the child. Some of those consequences include poor cognition and educational performance, low adult wages, lost productivity and, when accompanied by excessive weight gain later in childhood, an increased risk of nutrition-related chronic diseases in adult life.**\n\n**In this section we are going to have a look at the stunting condition around the world by plotting different kinds of charts.**","e24d65bf":"So there are 6 broad regions namely:\n\n* EMRO -> WHO Regional Office for the Eastern Mediterranean\n\n* EURO -> The WHO Regional Office for Europe\n\n* AFRO -> The WHO Regional Office for Africa\n\n* AMRO -> World Health Organisation Regional Office for the Americas\n\n* WPRO -> World Health Organisation Regional Office for Western Pacific Region\n\n* SEARO -> World Health Organisation Regional Office for South-East Asia\n\nLet's have a look at the number of countries that fall into each region","99362ac7":"![img.png](attachment:999085f3-87e0-4664-9e3d-f8574ffc2cbe.png)","de499643":"**China is no where to be seen in the above chart, it means that it made significant efforts to reduce hunger and focussed more on the health of the children. Countries like India, Nigeria, Pakistan and Indonesian should definitely study the model followed by China.**","35526260":"## Distribution across the World","7917c731":"## Distribution across the World","72d28a96":"**Before we can map the countries using Folium, we need to get the latitudes and longitudes of each country, that's where the role of geopy comes in, geolocator method of geopy can help us to find the latitudes and the longitudes for each country.**","d6f1f023":"## Country Trend","3373bb3b":"### India","cd5c9561":"**The black region in the graph represents the case where the naming of the countries might be different in the json file and the actual dataset. For example: the json might contain 'United States of America' but in the dataset it is 'United States'.**"}}