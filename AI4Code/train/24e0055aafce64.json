{"cell_type":{"1d8724e3":"code","b0199244":"code","98eec431":"code","3491a872":"code","1d6b41e7":"code","1988aabd":"code","94b0ec84":"code","b547b042":"code","1947ca53":"code","12f98732":"code","17bbc4f9":"code","e536dc2e":"code","6b382f5c":"code","9a56526b":"code","ff104850":"code","1b43c308":"code","70d2177b":"code","f32b5b84":"code","ed2fa0fc":"code","710a55ad":"code","9d7e8c54":"code","4f9fc074":"code","21698e34":"code","708be57d":"code","56510a26":"code","4697c6b3":"code","229c757c":"code","5bddca9d":"code","708db8f4":"code","97932434":"code","3254b9fb":"code","17381106":"code","afe127fe":"code","9b4f8b6a":"code","dcecfa1b":"code","2adca2b9":"code","55c6f119":"code","17e69ee5":"code","a5b038b8":"code","ba4227d5":"code","937e9a0d":"markdown","21ba7540":"markdown","b09ca75d":"markdown","99b3a52d":"markdown","158cedbd":"markdown","e7f219f2":"markdown","95678b3e":"markdown","24ec477c":"markdown","4c54675e":"markdown"},"source":{"1d8724e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b0199244":"train = pd.read_csv('..\/input\/train.csv')\ndf = train.copy()\ntrain.head()","98eec431":"sample = pd.read_csv('..\/input\/sample_submission.csv')\nsample.head()","3491a872":"train.groupby('target').count()","1d6b41e7":"train.groupby('target').count() \/ train.shape[0] * 100","1988aabd":"list(train.loc[train.target == 1].question_text.head())","94b0ec84":"list(train.loc[train.target == 1].question_text.sample(10,random_state=504))","b547b042":"list(train.loc[train.target == 0].question_text.sample(15,random_state=405))","1947ca53":"from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom stop_words import get_stop_words\nimport re\n\nstops = get_stop_words('english')\ndef clean_list(x):\n    x = [i.strip() for i in x if i.strip() not in stops and i.strip() != '']\n    return x\n    \ntrain.question_text = train.question_text.apply(lambda x: x.lower().strip())\ntrain.question_text = train.question_text.apply(lambda x: re.sub(r'[?,\\.!\\\"\\']',' ', x))\ntrain.question_text = train.question_text.apply(lambda x: x.split(' '))\ntrain.question_text = train.question_text.apply(clean_list)","12f98732":"train.head()","17bbc4f9":"from nltk.stem import WordNetLemmatizer\n\nlemmatizer = WordNetLemmatizer()\ntrain.question_text = train.question_text.apply(lambda x: [lemmatizer.lemmatize(i) for i in x])\ntrain['preprocessed_text'] = train.question_text.apply(lambda x: ' '.join(x))\ntrain.question_text = df.question_text\ntrain.head()","e536dc2e":"import spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()","6b382f5c":"train_pos = train.loc[train.target == 1].sample(5000,random_state=5094)\ntrain_neg = train.loc[train.target == 0].sample(5000,random_state=5094)\ntest_pos = train.loc[(train.target == 1) & ~train.qid.isin(train_pos.qid)].sample(5000,random_state=5094)\ntest_neg = train.loc[(train.target == 0) & ~train.qid.isin(train_neg.qid)].sample(5000,random_state=5094)\ntrain_subset = pd.concat([train_pos,train_neg,test_pos,test_neg])\ntrain_subset['ner_data'] = train_subset.question_text.apply(lambda x: nlp(x).ents)","9a56526b":"def get_ne_counts(tuples):\n    nes = {}\n    for tup in tuples:\n        info = (tup.text, tup.label_)\n        if info[1] in nes:\n            nes[info[1]] += 1\n        else:\n            nes[info[1]] = 1\n    return nes\n\ntrain_subset['ne_types'] = train_subset.ner_data.apply(get_ne_counts)\nne_df = pd.DataFrame(list(train_subset['ne_types']),index=train_subset.index)\nne_df = ne_df.fillna(0)\ntrain_subset = pd.concat([train_subset,ne_df],axis=1,join_axes=[train_subset.index])\ntrain_subset.head()","ff104850":"cvec = CountVectorizer()\ncounts = cvec.fit_transform(train_subset.preprocessed_text)","1b43c308":"counts = pd.DataFrame(counts.todense(),index=train_subset.index)\ncounts.columns = cvec.get_feature_names()\ncounts = counts[[c for c in counts.columns if counts[c].sum() >= 3]]\ncounts.head()","70d2177b":"counts.to_csv('counts.csv',index=True,header=True)","f32b5b84":"feature_df = pd.concat([train_subset.iloc[:,6:],counts],axis=1)\nfeature_df['target'] = list(train_subset['target'])\nfeature_df.head()","ed2fa0fc":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(random_state=40938)\n\nX = feature_df[[c for c in feature_df.columns if c != 'target']]\ny = feature_df.target\nX_train = X.iloc[:10000,:]\nX_test = X.iloc[10000:,:]\ny_train = y.iloc[:10000]\ny_test = y.iloc[10000:]\n\nrfc.fit(X_train,y_train)\npredictions = rfc.predict(X_test)","710a55ad":"eval_df = pd.DataFrame({'actual': list(y_test),\n                       'predicted': predictions})\neval_df['incorrect'] = eval_df['actual'] - eval_df['predicted']\neval_df.incorrect = eval_df.incorrect.apply(abs)\n1 - eval_df.incorrect.sum() \/ eval_df.shape[0]","9d7e8c54":"from sklearn.model_selection import RandomizedSearchCV\nfrom pprint import pprint\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 100)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 100, num = 10)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)","4f9fc074":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rfc, n_iter=1,param_distributions = random_grid, \n                               cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)","21698e34":"rf_random.best_params_","708be57d":"def evaluate(model, test_features, test_labels):\n    predictions = model.predict(test_features)\n    errors = sum(abs(predictions - test_labels)) \/ len(test_labels)\n    accuracy = 100 - errors\n    print('Model Performance')\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    \n    return accuracy\nbase_model = RandomForestClassifier(n_estimators = 10, random_state = 42)\nbase_model.fit(X_train, y_train)\nbase_accuracy = evaluate(base_model, X_test, y_test)","56510a26":"best_random = rf_random.best_estimator_\nrandom_accuracy = evaluate(best_random, X_test, y_test)\nprint('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) \/ base_accuracy))","4697c6b3":"predictions = best_random.predict(X_test)\neval_df = pd.DataFrame({'actual': list(y_test),\n                       'predicted': predictions})\neval_df['incorrect'] = eval_df['actual'] - eval_df['predicted']\neval_df.incorrect = eval_df.incorrect.apply(abs)\n1 - eval_df.incorrect.sum() \/ eval_df.shape[0]","229c757c":"precision = eval_df.loc[(eval_df.actual == 1) & (eval_df.predicted == 1)].shape[0] \/ \\\neval_df.loc[(eval_df.predicted == 1)].shape[0]\nprecision","5bddca9d":"recall = eval_df.loc[(eval_df.actual == 1) & (eval_df.predicted == 1)].shape[0] \/ \\\neval_df.loc[(eval_df.actual == 1)].shape[0]\nrecall","708db8f4":"test_data = pd.read_csv('..\/input\/test.csv')","97932434":"test_data.head()","3254b9fb":"original = list(test_data['question_text'])\ntest_data.question_text = test_data.question_text.apply(lambda x: x.lower().strip())\ntest_data.question_text = test_data.question_text.apply(lambda x: re.sub(r'[?,\\.!\\\"\\']',' ', x))\ntest_data.question_text = test_data.question_text.apply(lambda x: x.split(' '))\ntest_data.question_text = test_data.question_text.apply(clean_list)","17381106":"test_data.question_text = test_data.question_text.apply(lambda x: [lemmatizer.lemmatize(i) for i in x])\ntest_data['preprocessed_text'] = test_data.question_text.apply(lambda x: ' '.join(x))\ntest_data.question_text = original\ntest_data.head()","afe127fe":"test_data['ner_data'] = test_data.question_text.apply(lambda x: nlp(x).ents)","9b4f8b6a":"test_data['ne_types'] = test_data.ner_data.apply(get_ne_counts)\nne_df = pd.DataFrame(list(test_data['ne_types']),index=test_data.index)\nne_df = ne_df.fillna(0)\ntest_data = pd.concat([test_data,ne_df],axis=1,join_axes=[test_data.index])\ntest_data.head()","dcecfa1b":"counts = cvec.transform(test_data.preprocessed_text)","2adca2b9":"import gc\n\npredictions = []\nfor i in range(5000,counts.shape[0]+4999,5000):\n    gc.collect()\n    subset = counts[i-5000:i].todense()\n    subset = pd.DataFrame(subset,index=test_data.index[i-5000:i])\n    subset.columns = cvec.get_feature_names()\n    subset = subset[[c for c in subset.columns if c in X_train.columns]]\n    feature_df = pd.concat([test_data.iloc[i-5000:i,6:],subset],axis=1)\n    for col in X_train.columns:\n        if col not in feature_df.columns:\n            feature_df[col] = 0\n    predictions += list(best_random.predict(feature_df))","55c6f119":"test_data = pd.read_csv('..\/input\/test.csv')\ntest_data['prediction'] = predictions","17e69ee5":"test_data.head()","a5b038b8":"test_data.groupby('prediction').count()","ba4227d5":"test_data = test_data[['qid','prediction']]\ntest_data.to_csv('submission.csv',index=None)","937e9a0d":"It looks to me like \"insincere\" is, from Quora's perspective, questions highly lacking in quality. Some of these look like something a kid would post to try to be funny, but others look like they could be sincere musings of the misinformed. For example, religious riots in India are a very complicated topic, and to assume that a question about any given religious sect being involved in one of them is a conspiracy theory question rather than a question about the complexities of Indian pluralism is not the best idea in my opinion. Also, in Buddhism there actually are questions around whether a female can attain Nirvana. Sexist? Yes. Question rooted in real people's real beliefs over the last few thousand years? Also yes. \"Sincerity\" for Quora's purposes is quite different from \"sincerity\" for, say, Reddit. This should be kept in mind in our feature selection process.","21ba7540":"# Text Feature Extraction","b09ca75d":"# Read In Data","99b3a52d":"# What makes a question \"insincere\"? Hypotheses...\n\n_In general, not always_\n\n* Simpler vocabulary\n    * capture variety of words?\n* Sweeping generalizations\n    * occurence of an ethnic group and a political group in one question, for example. Not sure how to capture this.\n* Poor grammar\n    * bigrams and\/or trigrams can capture this?\n* Profanity and inflammatory words\n    * collisions with urban dictionary or something like that?\n* Emotional words?\n    * no evidence for this yet, just a thought","158cedbd":"This is a very imbalanced dataset, with only 6% of the records labelled as insincere.","e7f219f2":"# Make Predictions","95678b3e":"# Understanding the Data","24ec477c":"# Train Model","4c54675e":"\"My desk turned into a Viking ship after listening to Amon Amarth. What should I do with it?\" is obviously an insincere question; I don't understand these labels at all. I think this data is poorly labelled."}}