{"cell_type":{"8ba90b93":"code","7e3a1aed":"code","baebab30":"code","db556026":"code","2d2cab0f":"code","2d5cf418":"code","489b0018":"code","5599a9d7":"code","de80e020":"code","b28b68c4":"code","761b5c7c":"code","55b7c115":"code","09366095":"code","9d2557ab":"code","1e1ba1dc":"code","2ccd155f":"code","f7778cd5":"code","762eacf5":"code","f0831ae4":"code","999a97db":"code","03bc4b37":"code","5d442162":"code","d6a32c3a":"code","0f4bedd3":"code","db59f923":"code","47df7a22":"code","17f08241":"code","63c9f154":"code","b6a125f3":"code","6bfd34a0":"code","7d73c7aa":"code","8d6532da":"code","4d19a9ee":"code","cbcf90e4":"code","b46dcca6":"code","d547ce41":"code","176d14e9":"code","ac685432":"code","3b8da36b":"code","35baaaab":"markdown","60a63ad0":"markdown","ede314a0":"markdown","ce0af3c7":"markdown","20aa5e3f":"markdown","2c8ea186":"markdown","d8d174a9":"markdown","92a5ecea":"markdown","ce1b8b6f":"markdown","941532b5":"markdown","aaa3a60c":"markdown","0cee7bcd":"markdown","57675add":"markdown","78228761":"markdown","cfc7cebf":"markdown","af0d509b":"markdown","3ca6ab85":"markdown","2f135a6d":"markdown","66632877":"markdown"},"source":{"8ba90b93":"#\u8fd9\u4e00\u90e8\u5206\u662f\u5bfc\u5165\u6570\u636e\u7684\u6b65\u9aa4\uff0c\u53ef\u4ee5\u5ffd\u7565\n# \u6b64\u5904\u5c06numpy\u548cpandas\u5305\u8fdb\u884c\u5bfc\u5165 \u5176\u4e2dnumpy\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5904\u7406\u6a21\u5757\uff0cpandas\u4e3a\u4e00\u4e2a\u6570\u636e\u6846\u5904\u7406\u6a21\u5757\n# \u6570\u636e\u6846\u6982\u5ff5\u6765\u81ea\u4e8e\u6570\u636e\u5206\u6790\u539f\u8bed\u8a00R,\u5176\u5f62\u5f0f\u548cExcel\u7684\u4e00\u5f20\u8868\u76f8\u4f3c\n# import 1  as 2  \u6b64\u65f61\u4e3a\u8981\u5bfc\u5165\u7684\u5305\uff0c2\u4e3a1\u7684\u522b\u540d\uff0cas\u5b9e\u9645\u4e0a\u662f\u7ed91\u4e00\u4e2a\u7b80\u5355\u7684\u522b\u540d\uff0c\u6613\u4e8e\u6211\u4eec\u5728\u540e\u9762\u8fdb\u884c\u8c03\u7528\u3002\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e3a1aed":"df=pd.read_csv(\"\/kaggle\/input\/nab\/realKnownCause\/realKnownCause\/ec2_request_latency_system_failure.csv\")","baebab30":"#\u67e5\u770bcsv\u6587\u4ef6\u5185\u5bb9\ndf.head(2)","db556026":"#\u67e5\u770b\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\ndf.describe()","2d2cab0f":"#\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233\u683c\u5f0f\n\ndf['timestamp']=pd.to_datetime(df['timestamp'])","2d5cf418":"#\u753b\u51fa\u7ebf\u5f62\u56fe\n\nimport plotly.express as px\n\npx.line(df,x='timestamp',y='value')","489b0018":"df['hour']=df['timestamp'].dt.hour\npx.box(df,x='hour',y='value')","5599a9d7":"px.histogram(df['value'])","de80e020":"#\u4ecesklearn\u4e2d\u5bfc\u5165\u76f8\u5e94\u7684\u7b97\u6cd5\n# \u5bfc\u5165OneClassSVM\nfrom sklearn.svm import OneClassSVM\n# \u5bfc\u5165IsolationForest\nfrom sklearn.ensemble import IsolationForest\n# \u5bfc\u5165LocalOutlierFactor\nfrom sklearn.neighbors import LocalOutlierFactor","b28b68c4":"#\u6b64\u90e8\u5206\u4e0d\u7528\u770b\nimport numpy as np\nfrom sklearn.metrics import auc\n\n#Source:https:\/\/github.com\/ngoix\/EMMV_benchmarks\/blob\/master\/em.py\n\ndef em(t, t_max, volume_support, s_unif, s_X, n_generated):\n    EM_t = np.zeros(t.shape[0])\n    n_samples = s_X.shape[0]\n    s_X_unique = np.unique(s_X)\n    EM_t[0] = 1.\n    for u in s_X_unique:\n        # if (s_unif >= u).sum() > n_generated \/ 1000:\n        EM_t = np.maximum(EM_t, 1. \/ n_samples * (s_X > u).sum() -\n                          t * (s_unif > u).sum() \/ n_generated\n                          * volume_support)\n    amax = np.argmax(EM_t <= t_max) + 1\n    if amax == 1:\n        print(\"failed to achieve t_max\")\n        amax = -1\n    AUC = auc(t[:amax], EM_t[:amax])\n    return AUC, EM_t, amax","761b5c7c":"#\u67e5\u770b\u6570\u636e\u6846\u6837\u5f0f\ndf.shape","55b7c115":"#\u6b64\u90e8\u5206\u4e0d\u7528\u770b\n# parameters of the algorithm:\nn_generated = 100000\nt_max = 0.9\n\nlim_inf = df['value'].values.min(axis=0)\nlim_sup = df['value'].values.max(axis=0)\nvolume_support = (lim_sup - lim_inf).prod()\nt = np.arange(0, 100 \/ volume_support, 0.01 \/ volume_support)\nunif = np.random.uniform(lim_inf, lim_sup,size=(n_generated, 1))","09366095":"#\u5b9e\u4f8b\u5316\u7b97\u6cd5\u7c7b\none_svm=OneClassSVM()\n# \u62df\u5408\u5e76\u9884\u6d4b\none_svm_result=one_svm.fit_predict(df['value'].values.reshape(-1,1))\n#\u5b9a\u4e49\u65b0\u6570\u636e\u6846\uff0c\u5b58\u50a8\u9884\u6d4b\u7ed3\u679c\none_svm_result_df=pd.DataFrame()\none_svm_result_df['timestamp']=df['timestamp']\none_svm_result_df['value'] = df['value']\n\n#\u628a-1\u7684\u6807\u7b7e\u4fee\u6539\u4e3a1\uff0c\u4f7f\u5f97\u540e\u9762\u7684\u753b\u56fe\u8fc7\u7a0b\u66f4\u52a0\u6807\u51c6\uff0c\u4e0d\u9700\u8981\u4fee\u6539\none_svm_result_df['anomaly']  = [1 if i==-1 else 0 for i in one_svm_result]\n\n#\u6b64\u90e8\u5206\u4e0d\u7528\u770b\ns_X_ocsvm = one_svm.decision_function(df['value'].values.reshape(-1,1)).reshape(1, -1)[0]\ns_unif_ocsvm = one_svm.decision_function(unif).reshape(1, -1)[0]\nauc_ocsvm, em_ocsvm, amax_ocsvm = em(t, t_max, volume_support,s_unif_ocsvm, s_X_ocsvm, n_generated)","9d2557ab":"#we will store the EM values for all the models in a list\n#\u6b64\u90e8\u5206\u4e0d\u7528\u770b\nem_values=[]\nmodel_name=[]\nem_values.append(em_ocsvm.mean())\nmodel_name.append(\"One Clas SVM\")","1e1ba1dc":"#\u7edf\u8ba1anomaly\u5217\u4e2d\u7684\u503c\none_svm_result_df['anomaly'].value_counts()","2ccd155f":"#\u5bfc\u5165plotly\u8fdb\u884c\u753b\u56fe\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=one_svm_result_df['timestamp'], y=one_svm_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=one_svm_result_df[one_svm_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using One Class SVM')\nfig.show(\"notebook\")","f7778cd5":"# \u5bf9\u6b64\u5904nu\u503c\u8fdb\u884c\u591a\u6b21\u5c1d\u8bd5,\u4e5f\u53ef\u5c1d\u8bd5\u5176\u4ed6\u53c2\u6570\u503c\uff0c\u627e\u5230\u770b\u8d77\u6765\u6700\u597d\u7684\u7ed3\u679c\u5373\u53ef\uff0c\u7b97\u6cd5\u5e76\u4e0d\u80fd\u5b8c\u5168\u597d\u7684\u62df\u5408\u6570\u636e\uff0c\u8fd9\u662f\u6b63\u5e38\u7684\u60c5\u51b5\none_svm=OneClassSVM(nu=0.03)\none_svm_result=one_svm.fit_predict(df['value'].values.reshape(-1,1))\none_svm_result_df=pd.DataFrame()\none_svm_result_df['timestamp']=df['timestamp']\none_svm_result_df['value'] = df['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\none_svm_result_df['anomaly']  = [1 if i==-1 else 0 for i in one_svm_result]\ns_X_ocsvm = one_svm.decision_function(df['value'].values.reshape(-1,1)).reshape(1, -1)[0]\ns_unif_ocsvm = one_svm.decision_function(unif).reshape(1, -1)[0]\nauc_ocsvm, em_ocsvm, amax_ocsvm = em(t, t_max, volume_support,s_unif_ocsvm, s_X_ocsvm, n_generated)\n\n#we will store the EM values for all the models in a list\n\nem_values=[]\nmodel_name=[]\nem_values.append(em_ocsvm.mean())\nmodel_name.append(\"One Clas SVM\")\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=one_svm_result_df['timestamp'], y=one_svm_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=one_svm_result_df[one_svm_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using One Class SVM')\nfig.show(\"notebook\")","762eacf5":"#\u4f8b\u5982\u6211\u4f7f\u7528\u7edf\u8ba1\u5b66\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u8ba4\u4e3a\u8d85\u51fa\u8303\u56f4\u7684\u5373\u4e3a\u5f02\u5e38\u503c\n\ndef detect_IQR(df,feature):\n    \u4e0b\u56db\u5206\u4f4d\u6570 = df[feature].quantile(q=0.25)\n    \u4e0a\u56db\u5206\u4f4d\u6570 = df[feature].quantile(q=0.75)\n    IQR = \u4e0a\u56db\u5206\u4f4d\u6570-\u4e0b\u56db\u5206\u4f4d\u6570\n    \u4e0b\u754c\u70b9= \u4e0b\u56db\u5206\u4f4d\u6570 - 3*IQR\n    \u4e0a\u754c\u70b9 = \u4e0a\u56db\u5206\u4f4d\u6570 + 3*IQR\n    \n    return \u4e0b\u754c\u70b9,\u4e0a\u754c\u70b9\n\u4e0b\u754c\u70b9,\u4e0a\u754c\u70b9 = detect_IQR(df,\"value\")\nprint(\u4e0b\u754c\u70b9,\u4e0a\u754c\u70b9)\nIQR_result_df=pd.DataFrame()\nIQR_result_df['timestamp']=df['timestamp']\nIQR_result_df['value'] = df['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\nIQR_result_df.loc[(IQR_result_df[\"value\"]<\u4e0b\u754c\u70b9) | (IQR_result_df[\"value\"]>\u4e0a\u754c\u70b9),\"anomaly\"] = 1\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=IQR_result_df['timestamp'], y=IQR_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=IQR_result_df[IQR_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using IQR')\nfig.show(\"notebook\")","f0831ae4":"#\u4e0b\u9762\u6211\u4eec\u4f7f\u7528\u7edf\u8ba1\u5b66\u8ba1\u7b97\u51fa\u7684\u5f02\u5e38\u503c\u8ba4\u4e3a\u662f\u771f\u5b9e\u7684\u5f02\u5e38\u503c\uff0c\u5bf9\u4e8eOneClassSVM\u8fdb\u884c\u53c2\u6570\u7684\u8c03\u6574\u3002\ndf_true = IQR_result_df\nprint(df_true.head())\n#\u5904\u7406\u7a7a\u503c\ndf_true.loc[df_true[\"anomaly\"].isnull(),\"anomaly\"] = 0\ndf_true[\"anomaly\"] = df_true[\"anomaly\"].astype(\"int\")\nprint(df_true[\"anomaly\"].unique())","999a97db":"from sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import f1_score,precision_score,recall_score\n\nX_trainval,X_test,y_trainval,y_test = train_test_split(df_true[\"value\"].values.reshape(-1,1),df_true[\"anomaly\"].values.reshape(-1,1),random_state=0)\nX_train ,X_val,y_train,y_val = train_test_split(X_trainval,y_trainval,random_state=1)\n# grid search start\nbest_score = 0\nfor nu in [0.001,0.0001,0.004,0.01,0.03,0.05,0.00001,0.000001]:\n    # \u5bf9\u4e8e\u6bcf\u79cd\u53c2\u6570\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u8fdb\u884c\u4e00\u6b21\u8bad\u7ec3\n    ocsvm = OneClassSVM(nu=nu)\n    # 5 \u6298\u4ea4\u53c9\u9a8c\u8bc1\n#     scores = cross_val_score(ocsvm,X_trainval,y_trainval,cv=5,scoring='recall_micro')\n#     score = scores.mean()\n#     print(nu)\n#     print(score)\n    trainX = X_train[y_train==0].reshape(-1,1)\n    ocsvm.fit(trainX)\n    yhat = ocsvm.predict(X_val)\n    # mark inliers 1, outliers -1\n    y_val[y_val == 1] = -1\n    y_val[y_val == 0] = 1\n    # calculate score\n    score = f1_score(y_val, yhat, pos_label=-1)\n    print(nu,score)\n#     score = precision_score(y_val, yhat, pos_label=-1)\n#     score = recall_score(y_val, yhat, pos_label=-1)\n    # \u627e\u5230\u8868\u73b0\u6700\u597d\u7684\u53c2\u6570\n    # \u627e\u5230\u8868\u73b0\u6700\u597d\u7684\u53c2\u6570\n    if score > best_score:\n        best_score = score\n        best_parameters= {'nu':nu}\n        print(best_parameters,best_score)","03bc4b37":"ocsvm = OneClassSVM(nu=0.000001)\n#\u9009\u53d6\u5168\u90e8\u4e3a\u6b63\u4f8b\u7684\u6570\u636e\uff0c\u7528\u8fd9\u90e8\u5206\u6570\u636e\u6765\u62df\u5408\u6a21\u578b\u3002\ntrainX = X_train[y_train==0].reshape(-1,1)\nocsvm.fit(trainX)\ny_true = ocsvm.predict(df_true[\"value\"].values.reshape(-1,1))\none_svm_result_df=pd.DataFrame()\none_svm_result_df['timestamp']=df_true['timestamp']\none_svm_result_df['value'] = df_true['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\none_svm_result_df['anomaly']  = [1 if i==-1 else 0 for i in y_true]\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=IQR_result_df['timestamp'], y=IQR_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=IQR_result_df[IQR_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using OneClassSVM')\nfig.show(\"notebook\")","5d442162":"one_svm_result","d6a32c3a":"iso=IsolationForest()\niso_result=iso.fit_predict(df['value'].values.reshape(-1,1))\niso_result_df=pd.DataFrame()\niso_result_df['timestamp']=df['timestamp']\niso_result_df['value'] = df['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\niso_result_df['anomaly']  = [1 if i==-1 else 0 for i in iso_result]\ns_X_iso = iso.decision_function(df['value'].values.reshape(-1,1)).reshape(1, -1)[0]\ns_unif_iso = iso.decision_function(unif).reshape(1, -1)[0]\nauc_iso, em_iso, amax_iso = em(t, t_max, volume_support,s_unif_iso, s_X_iso, n_generated)","0f4bedd3":"em_values.append(em_iso.mean())\nmodel_name.append(\"Isolation Forest\")","db59f923":"iso_result_df['anomaly'].value_counts()","47df7a22":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=iso_result_df['timestamp'], y=iso_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=iso_result_df[iso_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u68c0\u6d4bCPU\u4f7f\u7528\u7387\u5f02\u5e38')\nfig.show(\"notebook\")","17f08241":"iso=IsolationForest(contamination=0.008)\niso_result=iso.fit_predict(df['value'].values.reshape(-1,1))\niso_result_df=pd.DataFrame()\niso_result_df['timestamp']=df['timestamp']\niso_result_df['value'] = df['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\niso_result_df['anomaly']  = [1 if i==-1 else 0 for i in iso_result]\n\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=iso_result_df['timestamp'], y=iso_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=iso_result_df[iso_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u68c0\u6d4bCPU\u4f7f\u7528\u7387\u5f02\u5e38')\nfig.show(\"notebook\")","63c9f154":"lof=LocalOutlierFactor(novelty=True)\nlof.fit(df['value'].values.reshape(-1,1))\nlof_result=lof.predict(df['value'].values.reshape(-1,1))\nlof_result_df=pd.DataFrame()\nlof_result_df['timestamp']=df['timestamp']\nlof_result_df['value'] = df['value']\n\n#Inliers are labeled 1, while outliers are labeled -1.\nlof_result_df['anomaly']  = [1 if i==-1 else 0 for i in lof_result]\n\n#decision_function is not available when novelty=False. If we make novelty=True, then fit_predict\n#is not available\n\n\"\"\"\nThe decision_function method is also defined from the scoring function, \nin such a way that negative values are outliers and non-negative ones are inliers.\n\"\"\"\ns_X_lof = lof.decision_function(df['value'].values.reshape(-1,1))\ns_unif_lof = lof.decision_function(unif).reshape(1, -1)\nauc_lof, em_lof, amax_lof = em(t, t_max, volume_support,s_unif_lof, s_X_lof, n_generated)","b6a125f3":"em_values.append(em_lof.mean())\nmodel_name.append(\"LOF\")","6bfd34a0":"lof_result_df['anomaly'].value_counts()","7d73c7aa":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=lof_result_df['timestamp'], y=lof_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=lof_result_df[lof_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using LOF')\nfig.show(\"notebook\")","8d6532da":"from sklearn.mixture import GaussianMixture\ngm = GaussianMixture(random_state=0)\ngm.fit(df['value'].values.reshape(-1,1))\n\ndensities = gm.score_samples(df['value'].values.reshape(-1,1))\ndensity_threshold = np.percentile(densities, 1)","4d19a9ee":"gm_result= [-1 if i<density_threshold else 0 for i in densities]","cbcf90e4":"gm_result_df=pd.DataFrame()\ngm_result_df['timestamp']=df['timestamp']\ngm_result_df['value'] = df['value']\n\ngm_result_df['anomaly']  = [1 if i==-1 else 0 for i in gm_result]\ns_X_gm = gm.score_samples(df['value'].values.reshape(-1,1)).reshape(1, -1)[0]\ns_unif_gm = gm.score_samples(unif).reshape(1, -1)[0]\nauc_gm, em_gm, amax_gm = em(t, t_max, volume_support,s_unif_gm, s_X_gm, n_generated)","b46dcca6":"gm_result_df['anomaly'].value_counts()","d547ce41":"em_values.append(em_gm.mean())\nmodel_name.append(\"GMM\")","176d14e9":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=gm_result_df['timestamp'], y=gm_result_df['value'],\n                    mode='lines',\n                    name='lines'))\n\na=gm_result_df[gm_result_df['anomaly']==1]\n\nfig.add_trace(go.Scatter(x=a.timestamp, y=a.value,\n                    mode='markers',\n                    name='markers'))\n\nfig.update_layout(title='Anomaly detection using GMM')\nfig.show(\"notebook\")","ac685432":"final_result={}\n\nfinal_result={'Model Name':model_name,'EM Value':em_values}\nfinal_result_df=pd.DataFrame(final_result)","3b8da36b":"final_result_df","35baaaab":"\u53ef\u89c1\u5f02\u5e38\u503c\u8f83\u591a\uff0c\u5e76\u975e\u6211\u4eec\u6240\u671f\u671b\u7684\uff0c\u4e8e\u662f\u91cd\u65b0\u8c03\u6574nu\u503c\uff0c\u4fee\u6539\u53c2\u6570\u6765\u62df\u5408\u7ed3\u679c\u3002\u3001","60a63ad0":"\u603b\u4f53\u4e0a\u6765\u770b\u6211\u4eec\u8ba4\u4e3aocsvm\u7684\u6548\u679c\u5e76\u4e0d\u662f\u6700\u597d\n\n### Isolation Forest\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5b64\u7acb\u68ee\u6797\u6765\u8fdb\u884c\u5f02\u5e38\u68c0\u6d4b\n\n* The lower, the more abnormal.\n* Negative scores represent outliers, positive scores represent inliers.","ede314a0":"\u53ef\u4ee5\u770b\u5230\u5b64\u7acb\u68ee\u6797\u7b97\u6cd5\u6bd4\u8f83\u597d\u7684\u627e\u5230\u4e86\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u5f02\u5e38\u503c\n### Local Outlier Factor","ce0af3c7":"\u8bfb\u53d6csv\u6587\u4ef6\n\n\u6b64\u5904\u8c03\u7528pandas\u7684read_csv\u51fd\u6570\uff0c\u5176\u4e2d\u53ef\u4ee5\u6307\u5b9a\u662f\u5426\u8bfb\u53d6\u9996\u884c\u9996\u5217\uff0c\u662f\u5426\u89e3\u6790\u65f6\u95f4\uff0c\u662f\u5426\u6307\u5b9a\u7d22\u5f15\n\n\u6b64\u5904\u6211\u4eec\u53ea\u662f\u8bfb\u53d6csv\uff0c\u5e76\u672a\u6307\u5b9a\u5176\u4ed6\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684\u53c2\u6570\uff0c\u5177\u4f53\u7684\u53c2\u6570\u4f7f\u7528\u8bf7\u89c1[\u5b98\u7f51](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html)","20aa5e3f":"Higher EM value corresponds to a better model. In this case, Isolation Forest has performed the best followed by GMM. ","2c8ea186":"\u901a\u8fc7\u63cf\u8ff0\u6027\u7edf\u8ba1\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u603b\u5171\u67094032\u884c\u6570\u636e\uff0c\u5176\u4e2d\u5e73\u5747\u503c\u4e3a45\uff08\u4ee3\u8868\u5e73\u5747\u4f7f\u7528\u7387\u4e3a45%\uff09\uff0c\u6807\u51c6\u5dee\u4e3a2.28(\u4ee3\u8868\u65b9\u5dee\u8f83\u5c0f\uff0c\u53ef\u77e5\u6570\u636e\u5927\u591a\u96c6\u4e2d\u5206\u5e03\u5728\u5e73\u5747\u503c\u5de6\u53f3)\uff0c\u6700\u5c0f\u503c\u4e3a22\uff0c\u6700\u5927\u503c\u4e3a99\uff0c\u4e2d\u4f4d\u6570\u4e3a45.","d8d174a9":"25%\u7684\u503c\u5c0f\u4e8e43, 50%\u5c0f\u4e8e45 \uff0c 75%\u5c0f\u4e8e46. \u90a3\u4e48\u53ef\u4ee5\u5148\u8003\u8651\u4ece\u7edf\u8ba1\u5b66\u610f\u4e49\u4e0a\u8ba1\u7b97\u5f02\u5e38\u503c\u3002\u8ba1\u7b97IQR=Q3-Q1=46-43=3 ,\u6240\u4ee5\u6b63\u5e38\u8303\u56f4\u4e3a43-1.5\\*3\uff0c46+1.5\\*3\uff0c\u5219\u4e3a38.5-50.5\uff0c\u8d85\u51fa\u6b64\u8303\u56f4\u5219\u53ef\u8ba4\u4e3a\u662f\u5f02\u5e38\u503c\u3002","92a5ecea":"\u53ef\u4ee5\u770b\u5230nu\u503c\u8d8a\u5c0f\uff0cf1\u503c\u8d8a\u5927\uff0c\u8bf4\u660e\u6b64\u65f6\u6548\u679c\u6bd4\u8f83\u597d\u3002\n","ce1b8b6f":"\u5927\u91cf\u7684\u5f02\u5e38\u503c\u51fa\u73b0\u5728\u4e09\u70b9","941532b5":"\u901a\u8fc7\u67e5\u770b\u5185\u5bb9\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6570\u636e\u91cc\u9762\u6709\u4e24\u5217\u6570\u636e\uff0c\u5176\u4e2d\u4e00\u5217\u4e3a\u65f6\u95f4\u6233\uff0c\u4e00\u5217\u4e3a\u503c\u3002\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u73b0\u5728\u68c0\u6d4b\u7684\u53ea\u662f\u5176\u503c\u7684\u5f02\u5e38\uff0c\u8fd9\u91cc\u68c0\u6d4b\u7684\u5e76\u4e0d\u662f\u65f6\u95f4\u5e8f\u5217\u4e0a\u7684\u5f02\u5e38\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u6570\u636e\u5728\u65f6\u95f4\u5e8f\u5217\u4e0a\uff1a1\u3001\u65e0\u8d8b\u52bf\u6027  2\u3001\u65e0\u5468\u671f\u6027  3\u3001\u65e0\u5b63\u8282\u6027  \uff0c\u6240\u4ee5\u68c0\u6d4b\u7684\u53ea\u662f\u503c\u7684\u5f02\u5e38\uff0c\u800c\u975e\u4ece\u65f6\u95f4\u5e8f\u5217\u4e0a\u5bf9\u5f02\u5e38\u503c\u8fdb\u884c\u89c2\u6d4b","aaa3a60c":"\u753b\u51fa\u76f4\u65b9\u56fe\uff0c\u53ef\u4ee5\u770b\u51fa\u6570\u636e\u591a\u5206\u5e03\u572840-50\u4ee5\u5185","0cee7bcd":"\u6211\u4eec\u53ef\u4ee5\u4ece\u56fe\u4e2d\u53d1\u73b0\u4e09\u4e2a\u7279\u522b\u660e\u663e\u7684\u5f02\u5e38\u503c","57675add":"### GMM\n\nSource: [Link to Github](https:\/\/github.com\/rhasanbd\/Anomaly-Detection-LOF-IsolationForest-FactMCD-GMM\/blob\/master\/Anomaly%20Detection-LOF-IsolationForest-FastMCD-GMM.ipynb)\n\nTo determine whether a data point is an anomaly we need to compute the log-likelihood of the given data.\n\nWe use the \"score\" method of GMM to compute the per-sample average log-likelihood of the data.\n\nThen, compare the likelihood values with the density threshold.\n\nwe identify the outliers using the first percentile lowest density as the threshold. I.e., approximately 1% of the instances will be flagged as anomalies.","78228761":"\u6211\u4eec\u4f7f\u7528EM\u503c\u6765\u8bc4\u4f30\u5f02\u5e38\u68c0\u6d4b\u7684\u6027\u80fd","cfc7cebf":"\u53ef\u4ee5\u770b\u5230\u5229\u7528\u7edf\u8ba1\u5b66\u8fdb\u884c\u8ba1\u7b97\u5f97\u5230\u7684\u7ed3\u679c\u662f\u6bd4\u8f83\u597d\u7684\uff0c\u4e5f\u662f\u6bd4\u8f83\u7b26\u5408\u6211\u4eec\u7684\u671f\u671b\u7684\u3002","af0d509b":"#### One Class SVM","3ca6ab85":"\u8fd9\u4e2a\u6570\u636e\u662f\u4e00\u53f0\u7535\u8111\u7684CPU\u4f7f\u7528\u7387\u6570\u636e\uff0c\u53ef\u4ee5\u77e5\u9053\u6570\u636e\u8303\u56f4\u5e94\u8be5\u4e3a0-100","2f135a6d":"\u53ef\u89c1\u5171\u67094032\u884c\u6570\u636e\uff0c\u6bcf\u884c\u6570\u636e\u6709\u4e24\u5217\uff0c\u5373\u662f\u4e24\u4e2a\u7ef4\u5ea6","66632877":"\u53ef\u4ee5\u770b\u5230\u7528ocsvm\u6765\u8fdb\u884c\u9884\u6d4b\u65f6\u5f97\u5230\u7684\u6548\u679c\u662f\u4e0d\u592a\u597d\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5176\u4ed6\u7684\u7b97\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u800c\u4e0d\u8981\u53ea\u4f7f\u7528\u8fd9\u4e00\u79cd\u7b97\u6cd5"}}