{"cell_type":{"c230962d":"code","47331125":"code","848c9c9b":"code","63b23de2":"code","dd7eeddb":"code","d5d808b7":"code","353fc773":"code","13154359":"code","868c680b":"code","cd1a6dc5":"code","f68ace4c":"code","cb928936":"code","84a6459c":"code","01249339":"markdown"},"source":{"c230962d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47331125":"import matplotlib.pyplot as plt","848c9c9b":"dataset = pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndataset.head()","63b23de2":"#counting feature-columns\nlen(dataset.columns)-1","dd7eeddb":"#datapoints\nlen(dataset)","d5d808b7":"#detecting missing values\ntotal_missing = 0\nfor col in dataset.columns:\n    missing_values = sum(dataset[col].isnull())\n    print(col+\" has \"+str(missing_values)+\" missing values\")\n    total_missing = total_missing + missing_values\n    \nprint(\"Total missing: \"+str(total_missing))\n","353fc773":"#plotting distribution of DEATH_EVENT (y)\n\ndeath_true = len(dataset[dataset.DEATH_EVENT ==1])\ndeath_false =len(dataset)-death_true\n\nprint(\"Dead people: \"+str(death_true))\nprint(\"Living people: \"+str(death_false))\n      \nplt.pie([death_true,death_false],labels=[\"death\",\"alive\"],colors=['lightcoral', 'lightskyblue'],\n        autopct='%1.1f%%', shadow=True, startangle=100,explode = [0.1,0])\n      \nplt.show()","13154359":"dataset.head()","868c680b":"#Automated categorical feature detection\n#As there are just categoricals with either 0 or 1, I am counting the length of unique values per feature\ncategorical_features = []\nfor col in dataset.columns.drop(\"DEATH_EVENT\"):\n    if not (len(dataset[col].unique()) > 2):\n        categorical_features.append(col)\n\n        \nprint(\"Categorical features: \"+str(categorical_features))","cd1a6dc5":"#Automate distribution-plotting for all categorical features \n\n#soon...\n\nplt.pie([death_true,death_false],labels=[\"death\",\"alive\"],colors=['lightcoral', 'lightskyblue'],\n        autopct='%1.1f%%', shadow=True, startangle=100,explode = [0.1,0])","f68ace4c":"dataset.columns","cb928936":"dataset.columns.drop(\"DEATH_EVENT\")","84a6459c":"dataset.time.unique()","01249339":"# Exploratory Data Analysis (EDA)"}}