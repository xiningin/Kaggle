{"cell_type":{"0912a367":"code","67ee98eb":"code","5017ca59":"code","00cce7c4":"code","645705f1":"code","dd04c0ce":"code","d54f8e37":"code","6ba9a82d":"code","4e404271":"code","1071b49b":"code","5578fc61":"code","607cee7c":"code","74e87e71":"code","f7e121d2":"code","0ad1c9fd":"code","946b07d9":"code","e8ec03ca":"code","b67c8fdc":"code","b79204bf":"code","ab810ef1":"code","fa8309ad":"code","a32e628e":"code","97314187":"code","3fd7a5b3":"code","4df21a1e":"code","53877ec2":"code","5949683e":"code","4bf3db96":"code","e5edb44c":"code","198f38b7":"code","2f6848ff":"markdown","5a2be952":"markdown","a4e89fca":"markdown","ce8990ae":"markdown","efd086e6":"markdown","ebe65a93":"markdown","72db9ea1":"markdown","4a939c07":"markdown","5fd50736":"markdown","e3e0500e":"markdown","e5ddf096":"markdown","7efae4c8":"markdown","b539eb91":"markdown","3a89da5e":"markdown","764ceb13":"markdown","73d6fd7c":"markdown","5242ee5a":"markdown","3fb5c400":"markdown","49b6891e":"markdown","3fc48743":"markdown","f647272f":"markdown","2665b505":"markdown"},"source":{"0912a367":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67ee98eb":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score","5017ca59":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain = train.set_index('PassengerId')","00cce7c4":"train.head()","645705f1":"train.isnull().sum()","dd04c0ce":"sns.heatmap(train.isnull())","d54f8e37":"values = train['Survived'].apply(lambda val: \"Survived\" if val == 1 else \"Not Survived\")\nax = values.value_counts().sort_values().plot(kind=\"barh\", colormap='Paired')\ntotals= []\nfor i in ax.patches:\n    totals.append(i.get_width())\ntotal = sum(totals)\nfor i in ax.patches:\n     ax.text(i.get_width()+.3, i.get_y()+.20, \n     str(round((i.get_width()\/total)*100, 2))+'%', \n     fontsize=10, color='black')\nax.grid(axis=\"x\")\nplt.suptitle('Survival percentage', fontsize=10)\nplt.yticks\nplt.show()","6ba9a82d":"sex = train.groupby(\"Sex\")[\"Survived\"].count().index.tolist()\nsns.catplot(x=\"Sex\", hue=\"Survived\", data=train, kind='count', order=sex, palette=\"husl\")","4e404271":"sns.displot(x=\"Age\", data=train, kde=True)\ndescription = train['Age'].describe()\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","1071b49b":"sns.boxplot(x=\"Age\", data=train, color='cornflowerblue', )","5578fc61":"# training data\ntrain = train.drop(['Name', 'Ticket', 'Cabin'], axis=1)\n\n# test data\ntest = test.drop(['Name', 'Ticket', 'Cabin'], axis=1)","607cee7c":"# training Data\nmean = train['Age'].mean()\nstd = train['Age'].std()\ncut_off = std*3\nlower_bound, upper_bound = mean-cut_off, mean+cut_off\nnew_train = train[(train['Age'] < upper_bound) & (train['Age'] > lower_bound)]\n\n# test Data\nnew_test = test.copy()","74e87e71":"# training data\nnew_train = pd.get_dummies(new_train, columns = ['Sex', 'Embarked', 'Pclass'])\n\n# test data\nnew_test = pd.get_dummies(new_test, columns = ['Sex', 'Embarked', 'Pclass'])","f7e121d2":"new_train.head()","0ad1c9fd":"new_train.isnull().sum()","946b07d9":"new_test.isnull().sum()","e8ec03ca":"age_mean = new_test['Age'].mean()\nnew_test['Age'] = new_test['Age'].fillna(age_mean).apply(np.ceil)\nfare_mean = new_test['Fare'].mean()\nnew_test['Fare'] = new_test['Fare'].fillna(age_mean)","b67c8fdc":"new_test.isnull().sum()","b79204bf":"scaler = MinMaxScaler()\nnew_train.iloc[:,1:] = scaler.fit_transform(new_train.iloc[:,1:].to_numpy())\nnew_test.iloc[:,1:] = scaler.fit_transform(new_test.iloc[:,1:].to_numpy())","ab810ef1":"# training data\nnew_train.head()","fa8309ad":"new_test.head()","a32e628e":"plt.figure(figsize=(14,8))\nsns.heatmap(new_train.corr(), annot=True)","97314187":"X = new_train.drop(['Survived'], axis=1)\ny = new_train['Survived']","3fd7a5b3":"knn = KNeighborsClassifier()","4df21a1e":"param_grid = {\n    'n_neighbors': np.arange(1,100)\n}","53877ec2":"knn_cv  = GridSearchCV(knn, param_grid, cv=5)\nknn_cv.fit(X, y.values.ravel())","5949683e":"knn_cv.best_params_","4bf3db96":"knn_cv.best_score_","e5edb44c":"predictions = knn_cv.predict(new_test.iloc[:, 1:])","198f38b7":"submission = pd.DataFrame({\n    'PassengerId': np.asarray(new_test.PassengerId), \n    'Survived': predictions.astype(int)\n})\nsubmission.to_csv('my_submission.csv', index=False)","2f6848ff":"Since the Age and Fare we not scaled to the rest of the data we have to scale it.","5a2be952":"Using gridsearchcv we got our best 'n_neighbors' parameter","a4e89fca":"Clearly, more females survived and that makes sense totally as lives of women and children were to be saved first.","ce8990ae":"Removing outliers from the data using 'Age' column","efd086e6":"we have 86 rows with missing values in Age and 1 row with missing value in Fare of test data. We will impute this data with the mean","ebe65a93":"# Visualize","72db9ea1":"Most of the passengers were of the age in between 18-36 and one more thing to note is that there were significant amount of children of age below 5. Possibly, we should check for outliers in the dataset ","4a939c07":"We will drop the Name, Ticket and Cabin column. We will be removing the cabin column as it has a lot of missing values","5fd50736":"The model trained using n_neighbors = 83 gives us the mean cross validated score of 0.806","e3e0500e":"### Handling Missing data","e5ddf096":"### KNN:","7efae4c8":"# Feature Selection","b539eb91":"We do not have any missing values now","3a89da5e":"clearly, we have outlier points in the Age column above 65 years of age","764ceb13":"Heatmap shows us that **'Age'** and **'Cabin'** has most number of missing values","73d6fd7c":"Using GridSearchCV to choose the right 'n_neigbors' parameter for the model","5242ee5a":"# Training","3fb5c400":"# Submission","49b6891e":"We have encoded the string values of Embarked and Sex column to integer for the model and we also encoded Pclass so as to avoid any ordering.\n\nNow, we should handle the missing values from the dataset","3fc48743":"# Feature Engineering","f647272f":"![Alt Text](http:\/\/cdn.britannica.com\/79\/4679-050-BC127236\/Titanic.jpg)","2665b505":"We can see that upto 38.38% people survived and 61.62% could not."}}