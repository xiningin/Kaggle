{"cell_type":{"2ca2a780":"code","032bd59b":"code","6cca0070":"code","e72937b8":"code","cefcbadc":"code","c045a23c":"code","70ca85b3":"code","ccde8dee":"code","3d14667a":"code","8116a152":"code","e07acd06":"code","9778006e":"code","e353fe7b":"code","2182945e":"code","037f1679":"code","6401d053":"code","68dc84c6":"code","b8111aaf":"code","fd403ddd":"code","50f4d110":"code","166dbe39":"code","a25c77fa":"code","6e3179c4":"code","0d07b160":"code","ba662ced":"code","77546d8c":"code","5f5fb1af":"code","5f3ed087":"code","266f7e67":"code","53edd927":"code","3e59a494":"code","b2d13d21":"code","2eabf428":"code","a45e6c65":"code","d3f542a5":"code","6080d3bc":"code","376dd01d":"code","48dc2d5a":"code","cfadf877":"code","8991c27e":"code","b536a4aa":"code","ebaf80d0":"code","07cd2a10":"code","11f10551":"code","fe047abe":"code","b86845b7":"code","03217d1c":"code","ed42c769":"code","4bb8a6ad":"code","46bdf36e":"code","5d113c12":"code","0283db21":"code","16ac7278":"code","e35529ec":"markdown","1aee99e3":"markdown","7c694871":"markdown","8f23ce86":"markdown","c573d02b":"markdown","3b44a263":"markdown","64a5b4f3":"markdown","facad0c5":"markdown","e3b03aec":"markdown","5edd6bc8":"markdown","cb6b0833":"markdown","910d7fa4":"markdown","6949cd50":"markdown","c07067de":"markdown","326782ff":"markdown","eaf7f701":"markdown","94760156":"markdown","59690280":"markdown","9a64c6d1":"markdown","79b495f8":"markdown","ea5e60d0":"markdown","cb78565b":"markdown","0bd75ac6":"markdown","0af6785d":"markdown","919f2322":"markdown","e148e768":"markdown","6895e013":"markdown","10b4b8cf":"markdown","db9d3dd7":"markdown","ec51fe94":"markdown","09f1b1c3":"markdown","d75a0365":"markdown","fdc8d87c":"markdown","6e567678":"markdown","1a49bf55":"markdown","2e75bc3f":"markdown","6946f837":"markdown","046a507c":"markdown","6ecd4844":"markdown","32695fdc":"markdown","3b2ef736":"markdown","4c21cdb9":"markdown","5234847e":"markdown","5ec41d69":"markdown","e2ffca41":"markdown","5c532d93":"markdown","829b601c":"markdown","cdb361c3":"markdown","6eb378c1":"markdown"},"source":{"2ca2a780":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","032bd59b":"df = pd.read_csv(\"..\/input\/drug-classification\/drug200.csv\")","6cca0070":"df.head()","e72937b8":"df.describe()","cefcbadc":"df.isnull().sum()","c045a23c":"df.isna().sum()","70ca85b3":"df.info()","ccde8dee":"print(\"Max Age:\", df.Age.max())\nprint(\"Min Age:\", df.Age.min())","3d14667a":"# Age distribution\nplt.figure(figsize = (16,5))\nsns.countplot(df.Age)\nplt.show()","8116a152":"df.Sex.value_counts()","e07acd06":"# Sex Distribution\nplt.figure(figsize=(9,5))\nsns.countplot(x = df.Sex)\nplt.show()","9778006e":"df.BP.value_counts()","e353fe7b":"plt.figure(figsize = (9,5))\nsns.countplot(df.BP)\nplt.show()","2182945e":"df.Cholesterol.value_counts()","037f1679":"plt.figure(figsize = (9,5))\nsns.countplot(df.Cholesterol)\nplt.show()","6401d053":"print(\"Max Na_to_K:\",df.Na_to_K.max())\nprint(\"Min Na_to_K:\",df.Na_to_K.min())\nprint(\"Mean Na_to_K:\",df.Na_to_K.mean())","68dc84c6":"plt.figure(figsize = (9,5))\nsns.distplot(df.Na_to_K)\nplt.show()","b8111aaf":"df.Drug.value_counts()","fd403ddd":"plt.figure(figsize = (9,5))\nsns.countplot(df.Drug)\nplt.show()","50f4d110":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Age\",data = df)\nplt.legend(df.Drug.value_counts().index)\nplt.title(\"Age -- Drug\")\nplt.show()","166dbe39":"print(\"Minimum Age of DrugB\",df.Age[df.Drug == \"drugB\"].min())\nprint(\"Maximum Age of DrugA\",df.Age[df.Drug == \"drugA\"].max())","a25c77fa":"df_Sex_Drug = df.groupby([\"Drug\",\"Sex\"]).size().reset_index(name = \"Count\")\ndf_Sex_Drug","6e3179c4":"\nplt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Sex\",data = df_Sex_Drug)\nplt.title(\"Sex -- Drug\")\nplt.show()","0d07b160":"df_BP_Drug = df.groupby([\"Drug\",\"BP\"]).size().reset_index(name = \"Count\")\ndf_BP_Drug","ba662ced":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"BP\",data = df_BP_Drug)\nplt.title(\"BP -- Drug\")\nplt.show()","77546d8c":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Na_to_K\",data = df)\nplt.title(\"Na_to_K -- Drug\")\nplt.show()","5f5fb1af":"print(\"Minimum Na_to_K for DrugY:\",df.Na_to_K[df.Drug == \"DrugY\"].min())","5f3ed087":"df_CH_Drug = df.groupby([\"Drug\",\"Cholesterol\"]).size().reset_index(name = \"Count\")\ndf_CH_Drug","266f7e67":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Cholesterol\",data = df_CH_Drug)\nplt.title(\"Cholesterol -- Drug\")\nplt.show()","53edd927":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Na_to_K\",hue=\"BP\",data = df)\nplt.legend()\nplt.title(\"Na_to_K -- BP -- Drug\")\nplt.show()","3e59a494":"df['Na_to_K_Bigger_Than_15'] = [1 if i >=15.015 else 0 for i in df.Na_to_K]\ndf.head()","b2d13d21":"df_NaK15 = df.groupby([\"Drug\",\"Na_to_K_Bigger_Than_15\"]).size().reset_index(name = \"Count\")\ndf_NaK15","2eabf428":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Na_to_K_Bigger_Than_15\",data = df_NaK15)\nplt.title(\"Na_to_K_Bigger_Than_15 -- Drug\")\nplt.show()","a45e6c65":"from sklearn.preprocessing import LabelEncoder\n\ndef label_encoder(y):\n    le = LabelEncoder()\n    df[y] = le.fit_transform(df[y])","d3f542a5":"label_list = [\"Sex\",\"BP\",\"Cholesterol\",\"Na_to_K\",\"Na_to_K_Bigger_Than_15\",\"Drug\"]\n\nfor l in label_list:\n    label_encoder(l)","6080d3bc":"df.head()","376dd01d":"from sklearn.model_selection import train_test_split\n\nx = df.drop([\"Drug\"],axis=1)\ny = df.Drug\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42, shuffle = True)\n\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)\n\nprint(\"x_train shape:\",x_train.shape)\nprint(\"x_test shape:\",x_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape)","48dc2d5a":"# To store results of models\nresult_dict_train = {}\nresult_dict_test = {}","cfadf877":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\naccuracies = cross_val_score(knn, x_train, y_train, cv=5)\nknn.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",knn.score(x_test,y_test))","8991c27e":"result_dict_train[\"KNN Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"KNN Default Test Score\"] = knn.score(x_test,y_test)","b536a4aa":"grid = {'n_neighbors':np.arange(1,120),\n        'p':np.arange(1,3),\n        'weights':['uniform','distance']\n       }\n\nknn = KNeighborsClassifier(algorithm = \"auto\")\nknn_cv = GridSearchCV(knn,grid,cv=5)\nknn_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",knn_cv.best_params_)\nprint(\"Train Score:\",knn_cv.best_score_)\nprint(\"Test Score:\",knn_cv.score(x_test,y_test))","ebaf80d0":"result_dict_train[\"KNN GridSearch Train Score\"] = knn_cv.best_score_\nresult_dict_test[\"KNN GridSearch Test Score\"] = knn_cv.score(x_test,y_test)","07cd2a10":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(random_state = 42)\naccuracies = cross_val_score(rfc, x_train, y_train, cv=5)\nrfc.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",rfc.score(x_test,y_test))","11f10551":"result_dict_train[\"Random Forest Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"Random Forest Default Test Score\"] = rfc.score(x_test,y_test)","fe047abe":"grid = {'n_estimators':np.arange(100,1000,100),\n        'criterion':['gini','entropy']\n       }\n\nrf = RandomForestClassifier(random_state = 42)\nrf_cv = GridSearchCV(rf,grid,cv=5)\nrf_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",rf_cv.best_params_)\nprint(\"Train Score:\",rf_cv.best_score_)\nprint(\"Test Score:\",rf_cv.score(x_test,y_test))","b86845b7":"result_dict_train[\"Random Forest GridSearch Train Score\"] = rf_cv.best_score_\nresult_dict_test[\"Random Forest GridSearch Test Score\"] = rf_cv.score(x_test,y_test)","03217d1c":"from sklearn.svm import SVC\nsvc = SVC(random_state = 42)\naccuracies = cross_val_score(svc, x_train, y_train, cv=5)\nsvc.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",svc.score(x_test,y_test))","ed42c769":"result_dict_train[\"SVM Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"SVM Default Test Score\"] = svc.score(x_test,y_test)","4bb8a6ad":"grid = {\n    'C':[0.01,0.1,1,10],\n    'kernel' : [\"linear\",\"poly\",\"rbf\",\"sigmoid\"],\n    'degree' : [1,3,5,7],\n    'gamma' : [0.01,1]\n}\n\nsvm  = SVC ();\nsvm_cv = GridSearchCV(svm, grid, cv = 5)\nsvm_cv.fit(x_train,y_train)\nprint(\"Best Parameters:\",svm_cv.best_params_)\nprint(\"Train Score:\",svm_cv.best_score_)\nprint(\"Test Score:\",svm_cv.score(x_test,y_test))\n","46bdf36e":"result_dict_train[\"SVM GridSearch Train Score\"] = svm_cv.best_score_\nresult_dict_test[\"SVM GridSearch Test Score\"] = svm_cv.score(x_test,y_test)","5d113c12":"df_result_train = pd.DataFrame.from_dict(result_dict_train,orient = \"index\",columns=[\"Score\"])\ndf_result_train","0283db21":"df_result_test = pd.DataFrame.from_dict(result_dict_test,orient = \"index\",columns=[\"Score\"])\ndf_result_test","16ac7278":"fig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.barplot(x = df_result_train.index,y = df_result_train.Score,ax = ax[0])\nsns.barplot(x = df_result_test.index,y = df_result_test.Score,ax = ax[1])\nax[0].set_xticklabels(df_result_train.index,rotation = 75)\nax[1].set_xticklabels(df_result_test.index,rotation = 75)\nplt.show()","e35529ec":"<a id='17'><\/a>\n# Preparing Data and Feature Engineering","1aee99e3":"<a id='28'><\/a>\n### GridSearchCV","7c694871":"<a id='1'><\/a>\n# Read Data and PreCheck","8f23ce86":"* The ratio of gender seems balanced in the data\n* This is a categorical variable. It would be better if we apply label encoder to avoid any error during model implementation.","c573d02b":"<a id='15'><\/a>\n## Cholesterol -- Drug","3b44a263":"<a id='22'><\/a>\n# Model Implementation\n\nI will try three models and compare their results. For all models, I apply GridSearchCV method to find best score. Also, to be sure our models performance are random, I will use 5 Fold Cross Validation method.","64a5b4f3":"<a id='7'><\/a>\n### Cholesterol Variable","facad0c5":"<a id='6'><\/a>\n### BP Variable","e3b03aec":"Data was splitted as 80% train data and 20% test data.","5edd6bc8":"* If people have HIGH blood pressure and Na_to_K ratio is lower than 15 , they get drugA and drugB only.\n* If people have LOW blood pressure and Na_to_K ratio is lower than 15 , they get drugC only.","cb6b0833":"* drugA and drugB are got only by people who have HIGH blood pressure.\n* drugC is got by people who have LOW blood pressure.\n* drugX is got by people who have HIGH blood pressure.\n* BP is an important feature for classification.","910d7fa4":"<a id='12'><\/a>\n## Sex -- Drug","6949cd50":"# Introduction\n\n1. [Read Data and PreCheck](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        1. [Age Variable](#4)\n        1. [Sex Variable](#5)\n        1. [BP Variable](#6)\n        1. [Cholesterol Variable](#7)\n        1. [Na_to_K Variable](#8)\n        1. [Drug Variable](#9)\n1. [Basic Data Analysis and Visualization](#10)\n    * [Age -- Drug](#11)\n    * [Sex -- Drug](#12)\n    * [BP -- Drug](#13)\n    * [Na_to_K -- Drug](#14)\n    * [Cholesterol -- Drug](#15)\n    * [Na_to_K -- BP -- Drug](#16)\n1. [Preparing Data and Feature Engineering](#17)\n    * [Create New Features](#18)\n        * [Na_to_K_Bigger_Than_15](#19)\n    * [Label Encoding](#20)\n    * [Train Test Split](#21)\n1. [Model Implementation](#22)\n    1. [KNN Classifier](#23)\n        * [Default Parameters](#24)\n        * [GridSearchCV](#25)\n    2. [Random Forest Classifier](#26)\n        * [Default Parameters](#27)\n        * [GridSearchCV](#28)\n    3. [SVM Classifier](#29)\n        * [Default Parameters](#30)\n        * [GridSearchCV](#31)\n1. [Conclusion](#32)","c07067de":"* DrugB is taken only by older than 51 years old. \n* DrugA is taken only by younger than 50 years old. ","326782ff":"<a id='23'><\/a>\n## KNN Classifier\n\nTo find best score of KNN model, I will try different value of n_neighbors, p, and weights parameters. ","eaf7f701":"<a id='5'><\/a>\n### Sex Variable","94760156":"<a id='20'><\/a>\n## Label Encoding\n\nWe will convert from object to int64\n\n* Sex\n* BP\n* Cholesterol\n* Na_to_K\n* Na_to_K_Bigger_Than_15","59690280":"* Na_to_K_Bigger_Than_15 feature will be important feature to drugY classification.","9a64c6d1":"<a id='2'><\/a>\n# Variable Description\n\n* Age: Age of patient (Numerical)\n* Sex: Gender of patient (Categorical)\n* BP: Blood pressure of patient (Categorical)\n* Cholesterol: Cholesterol of patient (Categorical)\n* Na_to_K: Sodium to Potassium Ratio in Blood (Numerical)\n* Drug: Drug Type (Categorical)","79b495f8":"* Drug is target column and you can see that it is unbalanced dataset. Using K Fold cross-validation would be better for reliable results.","ea5e60d0":"<a id='18'><\/a>\n## Create New Features","cb78565b":"**Task Details**\nHere the given data set has a series of parameter of the patient like Sex, Drug Type etc.\n\n**Expected Submission**\nThe solution should contain a well-made machine learning model with high confidence in predicting the drug type (A, B,C,X,Y) that should be given to a particular patient based on their characteristics and which drug type will suit them best.","0bd75ac6":"* People who have Na_to_K ratio is bigger than 15, get DrugY.\n* We can create a new feature from here.","0af6785d":"<a id='32'><\/a>\n# Conclusion","919f2322":"<a id='9'><\/a>\n### Drug Variable","e148e768":"* Age range is between 15 and 74.\n* Mode = 47","6895e013":"<a id='14'><\/a>\n## Na_to_K -- Drug","10b4b8cf":"<a id='13'><\/a>\n## BP -- Drug","db9d3dd7":"<a id='24'><\/a>\n### Default Parameters","ec51fe94":"<a id='29'><\/a>\n# SVM Classifier\n\nTo find best score of SVM model, I will try different value of C, kernel, degree and gamma parameters. The easy way to do this is GridSearchCV method.","09f1b1c3":"* float64(1): Na_to_K  -> Numerical Continuous Value\n* int64(1): Age  -> Numerical Discrete Value\n* object(4): Sex, BP, Cholesterol, Drug  ->Categorical","d75a0365":"<a id='31'><\/a>\n### GridSearchCV","fdc8d87c":"* Male people get drugA, drugB and drugC more than male people.\n* Female people get DrugY more than female people.\n* drugX seems equal for male and female people.\n* According to this graph, Sex feature is not an important feature for classification.","6e567678":"<a id='8'><\/a>\n### Na_to_K Variable","1a49bf55":"<a id='16'><\/a>\n## Na_to_K -- BP -- Drug","2e75bc3f":"<a id='30'><\/a>\n### Default Parameters","6946f837":"<a id='10'><\/a>\n# Basic Data Analysis\n\n* Age -- Drug\n* Sex -- Drug\n* BP -- Drug\n* Cholesterol -- Drug","046a507c":"<a id='26'><\/a>\n# Random Forest\n\n\nTo find best score of Random Forest model, I will try different value of n_estimators and criterion parameters.","6ecd4844":"<a id='4'><\/a>\n### Age Variable","32695fdc":"* No missing value\n* 6 columns\n* 200 rows","3b2ef736":"* Random Forest classifier  and SVM classifier (after hyperparameter tuning) have a good scores.\n* KNN classifier has worst score in three clasifiers.","4c21cdb9":"* drugC is got by people who have HIGH cholesterol.\n* Cholesterol is an important feature to classify drugC","5234847e":"<a id='21'><\/a>\n## Train Test Split","5ec41d69":"<a id='25'><\/a>\n### GridSearchCV","e2ffca41":"<a id='11'><\/a>\n## Age -- Drug","5c532d93":"<a id='3'><\/a>\n## Univariate Variable Analysis","829b601c":"* Cholesterol is a balanced data. \n* It is categorical and label encoder will apply on it.","cdb361c3":"<a id='19'><\/a>\n### Na_to_K_Bigger_Than_15 \n\nIf Na_to_K is bigger than 15, it is always drugY.","6eb378c1":"<a id='27'><\/a>\n### Default Parameters"}}