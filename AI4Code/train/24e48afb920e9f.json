{"cell_type":{"a7c45b40":"code","9769e4b5":"code","ec316d9b":"code","2febcd19":"code","e2ec2901":"code","064ae802":"code","5220fa26":"code","e3e09261":"code","1adb9a79":"code","14fe5f80":"code","7ad8a44f":"code","d06de9ef":"code","5ea80f2b":"code","a757c516":"code","0741d1ac":"code","30db7ced":"code","fece9004":"code","9444eaad":"code","32a1af82":"code","bd82fe9d":"code","7612caa0":"code","942dc886":"code","88857216":"code","ff356839":"code","1bf9ba1c":"code","834a9c77":"code","7f03658a":"code","f8b2f885":"code","bc556d83":"code","caf0eb55":"code","3d8dadfb":"code","5a3aa65d":"code","137cd349":"markdown","5133bfb1":"markdown","778a9382":"markdown","ba361d31":"markdown","52d343e1":"markdown","c49b0551":"markdown","fb720473":"markdown","11c08d12":"markdown","5c44e455":"markdown","ea78d54c":"markdown","b8edb500":"markdown","13a9a783":"markdown","6788353a":"markdown","f5ae9cde":"markdown","4d055be7":"markdown","5ad2cee5":"markdown","8b16cd8e":"markdown","8c763cc9":"markdown"},"source":{"a7c45b40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9769e4b5":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\n","ec316d9b":"df.head()","2febcd19":"df.shape","e2ec2901":"df2 = df.groupby(['type', 'rating']).size().unstack().plot(kind='bar', stacked=True)\n","064ae802":"df.groupby(['director']).size().sort_values(ascending=False).head(25).plot(kind='bar')","5220fa26":"bins=[1900,1950, 1970, 1980, 1990,2000,2010,2015,2018,2020]\n\nplt.hist(df.release_year, bins=bins, edgecolor=\"k\")\nplt.xticks(bins)\nplt.xticks(rotation='vertical')\nplt.show()\n","e3e09261":"#Explore common terms by genre\ndef wc(genre,col):\n    text = df[df['listed_in'].str.contains(genre)][col]\n\n    stopwords = set(STOPWORDS)\n    wordcloud = WordCloud(\n                              background_color='white',\n                              stopwords=stopwords,\n                              max_words=200,\n                              max_font_size=40, \n                              random_state=42\n                             ).generate(str(text))\n\n    print(wordcloud)\n    fig = plt.figure(1)\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n    fig.savefig(\"word1.png\", dpi=900)","1adb9a79":"#Horror Movies WordCloud:\nwc('Horror','description')\n","14fe5f80":"#Sci-Fi Movies WordCloud:\nwc('Sci-Fi','description')","7ad8a44f":"#Action Movies WordCloud:\nwc('Action & Adventure','description')\n","d06de9ef":"#Drama Movies WordCloud:\nwc('Drama','description')","5ea80f2b":"#Thriller Movies WordCloud:\nwc('Thriller','description')","a757c516":"#replace NA as prerequisite for working with text\ndf.cast.fillna('-999', inplace=True)\n","0741d1ac":"#replace space in name with underscore so that we capture actors first and last names\nimport re\n# '_'.join(re.findall('^\\,|\\S+', df.cast[0]))\ni = 0\nwhile i < df.shape[0]:\n    s1 = re.sub(\", \",\"#\",df.cast[i])\n    s2 = re.sub(\" \",\"_\",s1)\n    df.cast[i] = re.sub(\"#\",\", \",s2)\n#     print(i)\n    i += 1\nelse:\n    print('done')","30db7ced":"#Comedy Movies - Actor WordCloud:\nwc('Comedy','cast')","fece9004":"#Sci-Fi Movies - Actor WordCloud:\nwc('Sci-Fi','cast')","9444eaad":"#Action Movies - Actor WordCloud:\nwc('Action & Adventure','cast')","32a1af82":"vectorizer = CountVectorizer()","bd82fe9d":"vectors = vectorizer.fit_transform(df.cast)","7612caa0":"# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(vectors, vectors)","942dc886":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","88857216":"df.rating.fillna('-999', inplace=True)\ndf.country.fillna('-999', inplace=True)\ndf.director.fillna('-999', inplace=True)","ff356839":"#join multiple columns into one\ndef create_soup(x):\n    return  ''.join(x['listed_in']+ ' ' + x['description']+ ' ' + x['cast']+ ' ' + x['title']+ ' ' + x['rating'] + ' ' + x['country']+ ' ' + x['director'])\n","1bf9ba1c":"df['soup'] = df.apply(create_soup, axis=1)","834a9c77":"count_matrix = vectorizer.fit_transform(df.soup)","7f03658a":"# Compute the cosine similarity matrix\ncosine_sim2 = linear_kernel(count_matrix, count_matrix)","f8b2f885":"# Reset index of your main DataFrame and construct reverse mapping as before\ndf = df.reset_index()\nindices = pd.Series(df.index, index=df['title'])","bc556d83":"# df[df['title'].str.contains('Terminator')]#[1000:1030]","caf0eb55":"# See what kind of recommendations are coming through for movies with sequels\nget_recommendations('Rocky', cosine_sim2)","3d8dadfb":"get_recommendations('Terminator Salvation', cosine_sim2)","5a3aa65d":"get_recommendations('The Lord of the Rings: The Return of the King', cosine_sim2)","137cd349":"### Purpose","5133bfb1":"Reasonable recommendations are being made for such a simple model. Improvements could include using tf-idf (weighted word counts based on scarcity within the group of documents) and more advanced text similarity processing techniques.","778a9382":"### Description","ba361d31":"Please don't forget to upvote if you found this useful! :) Thankyou","52d343e1":"### Top 25 Directors","c49b0551":"## Netflix Dataset Review","fb720473":"Ideas - explore data and attempt some of the below items:\n1. Top actors or directors by year\n2. Movie ratings \n3. Descriptions by genre\n4. What shows last most seasons? e.g. predictive model\n5. Recommender engine - similar movies\/shows based on cast, director, title and description","11c08d12":"### Release Year","5c44e455":"### Explore Data","ea78d54c":"No major surprises here or in the below","b8edb500":"Not surprisingly, most content is fairly recent.","13a9a783":"Based on this, Netflix's target audience is 14\/15 year old plus.","6788353a":"### Read Data","f5ae9cde":"Some well known directors here.","4d055be7":"Netflix, Inc. is an American over-the-top content platform and production company headquartered in Los Gatos, California. <br>Netflix was founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California.<br>\n* Stock price: NFLX (NASDAQ) USD 516.39 5 Mar 2021\n* Founded: 29 August 1997, Scotts Valley, California, United States\n* Employees: 9,400 (2020)","5ad2cee5":"#### Top Actors","8b16cd8e":"### Recommender Engine","8c763cc9":"### Ratings vs Type"}}