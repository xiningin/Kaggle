{"cell_type":{"40c09fa4":"code","95a5de6b":"code","2333183f":"code","47380ecd":"code","ff4e8b8f":"code","19cc77ce":"code","69c8bbf7":"code","6fecf089":"code","83331c00":"code","5c6533ef":"code","1fa2f7a9":"markdown"},"source":{"40c09fa4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","95a5de6b":"# Import packages\n\nimport pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models, utils","2333183f":"tf.__version__","47380ecd":"# Load the data\ntrain_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmit_df = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\n\n# Train data\ntrain_df.head()","ff4e8b8f":"X = train_df.iloc[:,1:].values.reshape(-1, 28, 28, 1)\/255.0\nY = train_df.label.values\nY = utils.to_categorical(Y)\nX_test = test_df.values.reshape(-1, 28, 28, 1)\/255.0","19cc77ce":"def split_data(seed):\n    X_train, X_valid, Y_train, Y_valid = train_test_split(X, Y,\n                                                          test_size=0.1,\n                                                          random_state=seed)\n    return X_train, X_valid, Y_train, Y_valid","69c8bbf7":"num_classes = 10\nshape = (28, 28, 1)\n\nmin_hidden_layers = 3\nmax_hidden_layers = 6\nmin_filters = 32\nmax_filters = 128\ndropout = 0.4\n\nnum_models = 15\nnum_epochs = 30","6fecf089":"random_CNNs = [0] * num_models\n\nfor i in range(num_models):\n    \n    # Build Model\n    Filters = list(range(min_filters, max_filters))\n    Layers = list(range(min_hidden_layers, max_hidden_layers))\n    Layer = random.choice(Layers)\n    Filter = random.choice(Filters)\n\n    random_CNNs[i] = models.Sequential()\n    random_CNNs[i].add(layers.Conv2D(Filter, (3, 3), padding='same', input_shape=shape))\n    random_CNNs[i].add(layers.Activation('relu'))\n    random_CNNs[i].add(layers.Conv2D(Filter, (3, 3)))\n    random_CNNs[i].add(layers.Activation('relu'))\n\n    for j in range(0, Layer):\n        Filter = random.choice(Layers)\n        random_CNNs[i].add(layers.Conv2D(Filter, (2, 2), padding='same'))\n        random_CNNs[i].add(layers.Activation('relu'))\n        random_CNNs[i].add(layers.Dropout(dropout))\n\n    random_CNNs[i].add(layers.Flatten())\n    random_CNNs[i].add(layers.Dense(128, activation='relu'))\n    random_CNNs[i].add(layers.Dense(num_classes, activation='softmax'))\n    \n    # Compile\n    random_CNNs[i].compile(optimizer='adam',\n                                 loss='binary_crossentropy',\n                                 metrics=['accuracy'])\n    \n    # Split Data\n    X_train, X_valid, Y_train, Y_valid = split_data(i+137)\n    \n    # Train Model\n    print('TRAINING MODEL %d:' % (i+1))\n    random_CNNs[i].fit(X_train, Y_train, epochs=num_epochs,\n                             validation_data=(X_valid, Y_valid))\n    \n    # Predict\n    pred = random_CNNs[i].predict(X_test)\n    pred = np.argmax(pred,axis = 1)\n    \n    model_name = 'model_' + str(i)\n    ensemble_df = submit_df.copy()\n    ensemble_df[model_name] = pred\n    ensemble_df.head()","83331c00":"# Final prediction\nfinal_pred = ensemble_df.iloc[:,2:].mode(axis=1).iloc[:,0]\nsubmit_df.Label = final_pred.astype(int)\nsubmit_df.head()","5c6533ef":"# Create a submission file\nsubmit_df.to_csv('submission.csv', index=False)","1fa2f7a9":"# Data Preprocessing"}}