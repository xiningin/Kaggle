{"cell_type":{"a24940a4":"code","a440259d":"code","70511015":"code","5a03c151":"code","5662b638":"code","d4529964":"code","4863b22e":"code","fb723790":"code","ad5e8bde":"code","9f6074f1":"code","fa2805a4":"code","ebde4b44":"code","efa8f62a":"code","465f5e42":"code","6db64622":"code","65f0049c":"code","267a8f80":"code","cef008db":"code","a1143531":"code","116d6a37":"code","e508b4f5":"code","dc9b2a83":"code","b426a955":"code","73ad1ed7":"code","fe078b86":"code","aa982017":"code","6c19ea40":"code","ba04736c":"code","ece8d1c3":"code","f1c883de":"code","762edb43":"markdown","87aeeb70":"markdown","313deb2a":"markdown","55e8d658":"markdown"},"source":{"a24940a4":"import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt","a440259d":"import mne\nfrom mne import io\nfrom mne.datasets import sample\nfrom mne.stats import bonferroni_correction, fdr_correction\n\nprint(__doc__)","70511015":"data_path = sample.data_path()","5a03c151":"raw_fname = data_path + '\/MEG\/sample\/sample_audvis_filt-0-40_raw.fif'\nevent_fname = data_path + '\/MEG\/sample\/sample_audvis_filt-0-40_raw-eve.fif'\nevent_id, tmin, tmax = 1, -0.2, 0.5","5662b638":"# Setup for reading the raw data\nraw = io.read_raw_fif(raw_fname)\nevents = mne.read_events(event_fname)[:30]\n\nchannel = 'MEG 1332' # include only this channel in analysis\ninclude = [channel]","d4529964":"picks = mne.pick_types(raw.info, meg=False, eog = True, include=include, exclude='bads')","4863b22e":"event_id = 1\nreject = dict(grad=4000e-13, eog=150e-6)","fb723790":"epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks, baseline=(None, 0), reject=reject)","ad5e8bde":"X = epochs.get_data() # as 3D matrix\nX = X[:, 0, :] # take only one channel to get a 2D array","9f6074f1":"stats.ttest_1samp?","fa2805a4":"T, pval = stats.ttest_1samp(X, 0)","ebde4b44":"X.shape","efa8f62a":"len(T)","465f5e42":"len(pval)","6db64622":"len(X)","65f0049c":"#Check to understand the calculation from here: https:\/\/www.socscistatistics.com\/tests\/studentttest\/default2.aspx\nprint(stats.ttest_ind(a=[[20, 25], [0.3, 0.4]], b=[[27, 28], [0.1, 0.2]]))","267a8f80":"print(stats.ttest_ind(a=[[20, 25], [0.3, 0.4]], b=[[27, 28], [0.1, 0.2]], axis=1))","cef008db":"alpha = 0.05","a1143531":"n_samples, n_tests = X.shape","116d6a37":"threshold_uncorrected = stats.t.ppf(1.0 - alpha, n_samples - 1)","e508b4f5":"threshold_uncorrected","dc9b2a83":"reject_bonferroni, pval_bonferroni = bonferroni_correction(pval, alpha=alpha)\nthreshold_bonferroni  = stats.t.ppf(1.0-alpha\/n_tests, n_samples - 1)","b426a955":"threshold_bonferroni","73ad1ed7":"reject_fdr, pval_fdr = fdr_correction(pval, alpha=alpha, method='indep')\nthreshold_fdr = np.min(np.abs(T)[reject_fdr])","fe078b86":"threshold_fdr","aa982017":"reject_fdr","6c19ea40":"times = 1e3*epochs.times\nplt.close('all')\nplt.plot(times, T, 'k', label='T-stat')\nxmin, xmax = plt.xlim()\nplt.hlines(threshold_uncorrected, xmin, xmax, linestyle='--', colors='k', label='p=0.05 (uncorrected)', linewidth = 2)\nplt.hlines(threshold_bonferroni, xmin, xmax, linestyle='--', colors='r', label='p=0.05 (Bonferroni)', linewidth = 2)\nplt.hlines(threshold_fdr, xmin, xmax, linestyle='--', colors='b', label='p=0.05 (FDR)', linewidth = 2)\nplt.plot(times, pval, 'o', label='Pval')\nplt.plot(times, pval_fdr, 'v', label='pval_fdr')\nplt.legend()\nplt.xlabel(\"Time (ms)\")\nplt.ylabel('T-stat')\nplt.show()","ba04736c":"pval_fdr < 0.05","ece8d1c3":"reject_fdr","f1c883de":"pval < 0.05","762edb43":"# Plot","87aeeb70":"Compute statistics","313deb2a":"Learned from: https:\/\/mne.tools\/stable\/auto_examples\/stats\/plot_fdr_stats_evoked.html\n\nOne tests if the evoked response significantly deviates from 0. Multiple comparison problem is addressed with False Discovery Rate (FDR) correction.\n\nReject here means rejecting the null hypothesis => True => if it not right, then it is a false positive (accepting the impact though the two are just simply coming from the same distribution)","55e8d658":"Read epochs for the channel of interest"}}