{"cell_type":{"b2839655":"code","51f94004":"code","bd4e50d3":"code","41c2fb8e":"code","a05432d3":"code","140787bd":"code","75edf4a1":"code","91d1e149":"code","4658c23a":"code","ce46fdd7":"code","06d0d06b":"code","d62e6c5d":"code","90b13b58":"code","ff4fc823":"code","bca046b5":"code","a6784785":"code","314a846c":"code","280280ae":"code","1062fa50":"code","766701a9":"code","681a45b9":"code","cfa8ad6f":"code","f037e98e":"code","accd814b":"code","1c297d1c":"code","f0426d38":"code","58305129":"code","8c1d629b":"code","eea91bcf":"code","ffd00383":"code","d986f14d":"code","d789feed":"code","eee9b6fe":"code","1df3f384":"code","c6c41bbe":"code","7ac0783b":"markdown","0ce854d1":"markdown","604023df":"markdown","16112878":"markdown","8fda12ea":"markdown","7150146f":"markdown"},"source":{"b2839655":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51f94004":"df=pd.read_csv(\"\/kaggle\/input\/data-police-shootings\/fatal-police-shootings-data.csv\")\n\ndf.head()","bd4e50d3":"df.info()","41c2fb8e":"missingp=df.isna().sum()*100\/df.shape[0]\nmissingp","a05432d3":"df.dropna(inplace=True)","140787bd":"df.shape","75edf4a1":"df['month'] = pd.to_datetime(df['date']).dt.month\ndf['year'] = pd.to_datetime(df['date']).dt.year\ndf[\"day\"]=pd.to_datetime(df['date']).dt.day","91d1e149":"df.info()","4658c23a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nplt.figure(num=None, figsize=(10, 6), dpi=120, facecolor='w', edgecolor='k')\ng = sns.FacetGrid(df, col=\"race\", margin_titles=True)\ng.map(plt.hist, \"gender\")\n\n# Add a title to the figure\ng.fig.suptitle(\"race and gender\")\n","ce46fdd7":"plt.hist(data=df,x=\"manner_of_death\")","06d0d06b":"g = sns.FacetGrid(df, col=\"gender\", margin_titles=True)\ng.map(plt.hist, \"manner_of_death\")","d62e6c5d":"q = df[df['armed']=='unarmed']['race']\nfig = px.histogram(q,x='race',color='race')\nfig.show()","90b13b58":"g = sns.FacetGrid(df, col='signs_of_mental_illness', margin_titles=True)\ng.map(plt.hist, \"manner_of_death\")","ff4fc823":"df.race.value_counts().plot(kind='bar')","bca046b5":"df.gender.value_counts().plot(kind=\"bar\")","a6784785":"unarmed=df[df['armed']=='unarmed']\nunarmed.race.value_counts().plot(kind=\"bar\")","314a846c":"df.body_camera.value_counts().plot(kind=\"bar\")","280280ae":"df.threat_level.value_counts().plot(kind=\"bar\")","1062fa50":"t=df[df[\"body_camera\"]==False]\nt.threat_level.value_counts().plot(kind=\"bar\")","766701a9":"df.columns\n","681a45b9":"df.threat_level.unique()","cfa8ad6f":"k=df[df[\"flee\"]==\"Not fleeing\"]\nl=k[k[\"armed\"]==\"unarmed\"]\no=l[l[\"threat_level\"]==\"undetermined\"]\nq=o[o[\"body_camera\"]==False]\nfig = px.histogram(q,x='race',color='race')\nfig.show()","f037e98e":"\nsns.set_style(\"whitegrid\", {'axes.grid' : False})\nplt.figure(num=None, figsize=(10, 6), dpi=120, facecolor='w', edgecolor='k')\nplt.hist(data=df,x=\"state\",bins=50)\n\nplt.tight_layout()\nplt.xticks(rotation=90)\nplt.show()","accd814b":"df.state.value_counts().plot(kind=\"bar\")\nplt.figure(num=None, figsize=(10, 6), dpi=120, facecolor='w', edgecolor='k')","1c297d1c":"import plotly.express as px\n \nshootout_by_states = df['state'].value_counts()[:10]\nshootout_by_states = pd.DataFrame(shootout_by_states)\nshootout_by_states=shootout_by_states.reset_index()#to arrange in descending order\nfig = px.pie(shootout_by_states, values='state', names='index', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","f0426d38":"shootout_by_states\n","58305129":"df.year.value_counts().plot(kind=\"bar\")","8c1d629b":"df[df.year==2020].date","eea91bcf":"df[df.year!=2020].year.value_counts()","ffd00383":"l=df[df.day<=15]\nj=l[l.month<=6]\nj.year.value_counts().plot(kind=\"bar\")","d986f14d":"g = sns.FacetGrid(df, col='year', margin_titles=True)\ng.map(plt.hist, \"race\")","d789feed":"g = sns.FacetGrid(df, col=\"month\", margin_titles=True)\ng.map(plt.hist, \"race\")\nplt.figure(figsize=(120,120))","eee9b6fe":"df.city.value_counts()[:5]","1df3f384":"d=df[[\"year\",\"city\"]]\nd[\"death\"]=1\nd=d.groupby([\"year\",\"city\"]).sum()\nd= d.reset_index()\nd=d.sort_values(by=['year','death'],ascending=False)\nd","c6c41bbe":"t=pd.DataFrame(columns=[\"year\",\"city\",\"death\"])\nfor i in range(2015,2021,1):\n  \n    t=t.append(d[d.year==i].iloc[0:1,:])\n\nt    ","7ac0783b":"from the above graph one can see when an individual is not fleeing, completely unarmed ,has an undetermined threat level and body cams go off , leaving no evidence Black race suffer the most.","0ce854d1":"A decrease can be observed","604023df":"credits:\ud83d\udc6e\ud83d\udd2b Police Shootouts \ud83d\udc6e\ud83d\udd2b by mrinal. learnt about plotly.express.","16112878":"death by shootout","8fda12ea":"Although this is not a fair comparison since we have data till 15-06-2020","7150146f":"armed,age,gender,race ,flee has nan values . Needs tending to."}}