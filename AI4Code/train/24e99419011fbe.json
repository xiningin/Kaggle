{"cell_type":{"988ee2c8":"code","b519569e":"code","0dc2dd47":"code","b3545fc3":"code","12f58284":"code","30d30931":"code","37dc96b0":"code","fa4d65f0":"code","2ac823ec":"code","74776dc7":"code","31068508":"code","d030964b":"code","e9429b5d":"code","3442f406":"code","9c2b2353":"code","1957c045":"code","3585b170":"code","096f3ced":"code","14aaa701":"code","875d6ae2":"code","1125d3b9":"code","85fbad7a":"code","2dc45dd5":"code","35021f0e":"code","6ee66bfd":"code","470b77a3":"code","68d37e2d":"code","02a80819":"code","3e7f7a95":"code","0dc84444":"code","fb031d88":"code","479c2451":"code","4104d014":"code","7798cf22":"code","557e7e10":"code","8d130dda":"code","bd24b650":"code","e05e9965":"code","c7996a90":"code","fff7b098":"code","22a20bb3":"code","dcca702e":"code","7beefa40":"code","ea1e598e":"code","408cc8a3":"code","915990f0":"code","552c3e92":"code","1b7c0591":"code","28a73761":"code","401a4b90":"code","324b66c4":"code","dc75bff3":"code","a2bc37e3":"code","1c2c24df":"code","48b657f2":"code","142a1eba":"code","51cb35e8":"markdown","0c7c9dc1":"markdown","d491fc66":"markdown","e5cbf1e4":"markdown","001b7657":"markdown","7a383f4f":"markdown","aea007cd":"markdown","0df73cfa":"markdown","c46344bc":"markdown","6926e6f1":"markdown","7700955c":"markdown","720e2f33":"markdown","460ea263":"markdown","c57fd3d7":"markdown","3751d26f":"markdown","a579e49f":"markdown","9262c5e9":"markdown","b48dd87d":"markdown","a0b153f8":"markdown","40276862":"markdown","e12d8d01":"markdown","b2238c0e":"markdown","fce80b5a":"markdown","22c6e80a":"markdown","3ee3e1dd":"markdown","6fc547f5":"markdown","fb1bc648":"markdown","1a91e81b":"markdown","7fe72d96":"markdown","40e63982":"markdown","9e8020a6":"markdown","aeee7bb7":"markdown","33dec63d":"markdown","822fdf53":"markdown"},"source":{"988ee2c8":"#Import all libraries\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly as pl\nfrom plotly.offline import plot\nimport re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","b519569e":"#Import the dataset\nd_20 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv',error_bad_lines=False)","0dc2dd47":"d_20.head()","b3545fc3":"d_20.shape","12f58284":"cols = list(d_20.columns)\n\nprint(cols)","30d30931":"u_c = ['dob','sofifa_id','player_url','long_name','body_type','real_face','loaned_from','nation_position','nation_jersey_number']","37dc96b0":"d_20 = d_20.drop(u_c,axis=1)\n\nd_20.head()","fa4d65f0":"d_20['BMI'] = d_20['weight_kg'] \/ ((d_20['height_cm'] \/ 100)**2)\n\nd_20.head()","2ac823ec":"d_20[['short_name','player_positions']]","74776dc7":"#Distributing the player positions in different columns\nnew_player_position = d_20['player_positions'].str.get_dummies(sep = ', ').add_prefix('Position_')\n\nnew_player_position.head()","31068508":"#Concatenate the new created columns with the dataset\nd_20 = pd.concat([d_20,new_player_position], axis = 1)\n\nd_20.head()","d030964b":"#Dropping the original position column to eliminate confusion\nd_20 = d_20.drop('player_positions', axis = 1)\nd_20.head()","e9429b5d":"positions = ['ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm','cdm','rdm','rwb','lb','lcb','cb','rcb','rb']","3442f406":"d_20[positions]","9c2b2353":"for i in positions :\n    d_20[i] = d_20[i].str.split('+', n = 1, expand = True)[0]\n    \nd_20.head()","1957c045":"#Filling the null values with 0 and converting the column into integer value\nd_20[positions] = d_20[positions].fillna(0)\n\nd_20[positions] = d_20[positions].astype(int)\n\nd_20[positions]","3585b170":"style = ['dribbling','defending','physic','passing','shooting','pace']","096f3ced":"#Filling the null values in the above columns with the median values\nfor i in style : \n    d_20[i] = d_20[i].fillna(d_20[i].median())","14aaa701":"d_20[style].isnull().sum()","875d6ae2":"d_20[style] = d_20[style].astype(int)","1125d3b9":"#Filling all the null values of the data set by \"0\"\n\nd_20 = d_20.fillna(0)\n\nd_20.isnull().sum()","85fbad7a":"a = d_20['age']\n\nfig = go.Figure()\nfig.add_trace(\n    go.Histogram(x=a,\n                marker=dict(color='rgba(114, 186, 59, 0.5)'))\n)\nfig.add_shape(\n        go.layout.Shape(type='line', xref='x', yref='paper',\n                        x0=a.mean(), y0=0, x1=a.mean(), y1=0.9, line={'dash': 'dash'}),\n)\nfig.show()\nprint(\"Skewness of age is\", d_20['age'].skew())\n","2dc45dd5":"d_20.loc[d_20['age'] == d_20['age'].min()]","35021f0e":"d_20.loc[d_20['age'] == d_20['age'].max()]","6ee66bfd":"#The age VS overall Rating comparison\navo = sns.lineplot(d_20['age'], d_20['overall'], palette = 'Wistia')\nplt.title('Age vs Overall', fontsize = 20)\n\nplt.show()","470b77a3":"b = d_20['BMI']\n\nfig = go.Figure()\nfig.add_trace(\n    go.Histogram(x=b,\n                marker=dict(color='rgba(114, 18, 59, 0.5)'),\n                )\n)\nfig.add_shape(\n        go.layout.Shape(type='line', xref='x', yref='paper',\n                        x0=b.mean(), y0=0, x1=b.mean(), y1=0.9, line={'dash': 'dash'}),\n)\nfig.show()\n\nprint(\"Skewness of BMI is\", d_20['BMI'].skew())","68d37e2d":"#Player with the highest BMI\nd_20.loc[d_20['BMI'] == d_20['BMI'].max()][['short_name', 'age', 'overall', 'BMI']]","02a80819":"#Player with the lowest BMI\nd_20.loc[d_20['BMI'] == d_20['BMI'].min()][['short_name', 'age', 'overall', 'BMI']]","3e7f7a95":"pie_chart1 = px.pie(d_20, names = 'preferred_foot', title = 'Preffered Foot to Shoot')\npie_chart1.show()\nprint(\"The average of overall scores of players who prefer Right foot is\", round(d_20.loc[d_20['preferred_foot'] == 'Right']['overall'].mean(), 2))\n\nprint(\"The average of overall scores of players who prefer Left foot is\", round(d_20.loc[d_20['preferred_foot'] == 'Left']['overall'].mean(), 2))","0dc84444":"pie_chart2 = px.pie(d_20, names = 'international_reputation', title = 'International Reputation')\npie_chart2.show()\nd_20['international_reputation'].value_counts()","fb031d88":"d_20.loc[d_20['international_reputation'] == 5]","479c2451":"d_20.loc[d_20['international_reputation'] == 1].head(10)","4104d014":"scatter_plot = go.Figure(\ndata = go.Scatter(\n    x = d_20 ['overall'],\n    y = d_20 ['value_eur'],\n    mode = 'markers',\n    marker = dict(\n    size = 10,\n    color = d_20['age'],\n    showscale = True\n    ),\n    text = d_20['short_name']\n)\n)\n\nscatter_plot.update_layout(title = 'Scatter Plot Year 2020',\n                   xaxis_title = 'Overall Rating',\n                   yaxis_title = 'Value in EUR')\nscatter_plot.show()\n\n","7798cf22":"d_20.loc[d_20['value_eur'] == d_20['value_eur']].head(5)[['short_name','value_eur', 'club','age', 'overall' ]]","557e7e10":"d_20.loc[d_20['value_eur'] == d_20['value_eur']].tail(5)[['short_name','value_eur', 'club','age', 'overall' ]]","8d130dda":"#3D Scatter Plot\nscatter5 = px.scatter_3d(d_20.head(50), x = 'overall', y = 'age', z = 'value_eur', color = 'short_name')\nscatter5.update_layout(title = 'Top 50 player Value comparison with age and overall rating')\nscatter5.show()","bd24b650":"\npie_chart2 = px.pie(d_20, names = 'work_rate', title = 'Work Rate')\npie_chart2.show()\nd_20['work_rate'].value_counts()","e05e9965":"d_20.loc[d_20['work_rate'] == 'High\/High'].head(10)[['short_name','work_rate','age','BMI','club','overall','value_eur']]","c7996a90":"#List of all the club names\nClub =np.unique(d_20['club'])\n\n#List of means of the overall ratings of the clubs\nClub_mean = d_20.groupby(d_20['club'])['overall'].mean()\n","fff7b098":"scatter_plot = go.Figure(\ndata = go.Scatter(\n    x = Club,\n    y = Club_mean,\n    mode = 'markers',\n    marker = dict(\n    size = 10,\n    color = d_20['value_eur']    \n    )\n)\n)\n\nscatter_plot.update_layout(title = 'Mean Overall Rating of all teams',\n                   xaxis_title = 'Clubs',\n                   yaxis_title = 'Overall Rating')\nscatter_plot.show()","22a20bb3":"#Club with player from most different nations\nd_20.groupby(['club'])['nationality'].nunique().sort_values(ascending = False).head()","dcca702e":"#Club with player from least different nations\nd_20.groupby(['club'])['nationality'].nunique().sort_values(ascending = True).head()","7beefa40":"attacking = ['RW','LW','ST','CF','LS','RS','LF','RF']\n\npiech1 = d_20.query('team_position in @attacking')\n\npiechart1 = px.pie(piech1, names = 'team_position', color_discrete_sequence= px.colors.sequential.Magenta_r,\n                  title = 'Pie Chart For Attacking Positions')\npiechart1.show()","ea1e598e":"midfielding = ['CAM','RCM','CDM','LDM','RM','LM','LCM','RDM','RAM','CM','LAM']\n\npiech2 = d_20.query('team_position in @midfielding')\n\npiechart2 = px.pie(piech2, names = 'team_position', color_discrete_sequence= px.colors.sequential.Mint_r,\n                  title = 'Pie Chart For Midfield Positions')\npiechart2.show()","408cc8a3":"defending = ['LCB','RCB','LB','RB','CB','RWB','LWB']\n\npiech3 = d_20.query('team_position in @defending')\n\npiechart3 = px.pie(piech3, names = 'team_position', color_discrete_sequence= px.colors.sequential.Teal_r,\n                  title = 'Pie Chart For Defensive Positions')\npiechart3.show()","915990f0":"def top_players (pos, value):\n    col = str('Position_')+str.upper(pos)\n    targ = d_20[(d_20[col]==1) & (d_20['value_eur'] <= value)][['short_name','age','overall','BMI','value_eur']].head(10)\n    return targ","552c3e92":"top_players('lw',50000000)","1b7c0591":"d_19 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_19.csv',error_bad_lines=False)\nd_18 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_18.csv',error_bad_lines=False)\nd_17 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_17.csv',error_bad_lines=False)\nd_16 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_16.csv',error_bad_lines=False)\nd_15 = pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_15.csv',error_bad_lines=False)","28a73761":"attributes = ['dribbling','defending','physic','passing','shooting','pace','overall']","401a4b90":"def playergrow(name):\n    nm20 = d_20[d_20.short_name.str.contains(name, regex = False)]\n    nm19 = d_19[d_19.short_name.str.contains(name, regex = False)]\n    nm18 = d_18[d_18.short_name.str.contains(name, regex = False)]\n    nm17 = d_17[d_17.short_name.str.contains(name, regex = False)]\n    nm16 = d_16[d_16.short_name.str.contains(name, regex = False)]\n    nm15 = d_15[d_15.short_name.str.contains(name, regex = False)]\n    \n    scat20 = go.Scatterpolar(\n        r = [nm20['dribbling'].values[0],  nm20['defending'].values[0],   nm20['physic'].values[0], \n             nm20['passing'].values[0],     nm20['shooting'].values[0],    nm20['pace'].values[0], \n             nm20['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2020'\n    )\n    scat19 = go.Scatterpolar(\n        r = [nm19['dribbling'].values[0],  nm19['defending'].values[0],   nm19['physic'].values[0], \n             nm19['passing'].values[0],     nm19['shooting'].values[0],    nm19['pace'].values[0], \n             nm19['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2019'\n    )\n    scat18 = go.Scatterpolar(\n        r = [nm18['dribbling'].values[0],  nm18['defending'].values[0],   nm18['physic'].values[0], \n             nm18['passing'].values[0],     nm18['shooting'].values[0],    nm18['pace'].values[0], \n             nm18['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2018'\n    )\n    scat17 = go.Scatterpolar(\n        r = [nm17['dribbling'].values[0],  nm17['defending'].values[0],   nm17['physic'].values[0], \n             nm17['passing'].values[0],     nm17['shooting'].values[0],    nm17['pace'].values[0], \n             nm17['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2017'\n    )\n    scat16 = go.Scatterpolar(\n        r = [nm16['dribbling'].values[0],  nm16['defending'].values[0],   nm16['physic'].values[0], \n             nm16['passing'].values[0],     nm16['shooting'].values[0],    nm16['pace'].values[0], \n             nm16['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2016'\n    )\n    scat15 = go.Scatterpolar(\n        r = [nm15['dribbling'].values[0],  nm15['defending'].values[0],   nm15['physic'].values[0], \n             nm15['passing'].values[0],     nm15['shooting'].values[0],    nm15['pace'].values[0], \n             nm15['overall'].values[0]\n            ]\n      ,\n        theta = attributes,\n        fill = 'toself',\n        name = '2015'\n    )\n    \n    plan = [scat20, scat19, scat18, scat17, scat16, scat15]\n    lay = go.Layout(\n        polar = dict(\n            radialaxis = dict(\n                visible = True,\n                range = [0,100]\n            )\n        )\n        ,\n        showlegend = True,\n        title = 'Comparison of {} during years in years 2015 to 2020'.format(name)\n    )\n    figure = go.Figure (data = plan, layout = lay)\n    figure.show()","324b66c4":"x = playergrow('Neymar')\ny = playergrow('L. Messi')\nz = playergrow('Cristiano Ronaldo')","dc75bff3":"pie5 = px.pie(d_20.head(50),names='club',title='Clubs of top 50 players')\npie5.show()","a2bc37e3":"def bar_diagram (field):\n    plt.figure(dpi=125)\n    sns.countplot(field,data=d_20.head(50))\n    plt.xlabel(field)\n    plt.ylabel('Count')\n    plt.title('Distribution of Top 50 players according to {}'.format(field))\n    plt.show()","1c2c24df":"bar_diagram('team_jersey_number')","48b657f2":"bar_diagram('age')","142a1eba":"scatter_plot2 = go.Figure(\ndata = go.Scatter(\n    x = d_20 ['BMI'],\n    y = d_20 ['pace'].head(50),\n    mode = 'markers',\n    marker = dict(\n    size = 10,\n    color = d_20['overall'],\n    showscale = True\n    ),\n    text = d_20['short_name']\n)\n)\n\nscatter_plot2.update_layout(title = 'BMI of top 50 players with best pace',\n                   xaxis_title = 'BMI',\n                   yaxis_title = 'Pace Rating')\nscatter_plot2.show()","51cb35e8":"#### This model will help the FIFA gamer in the Manager Mode when he\/she wants to buy a new player according to the position and the money that the person has.\n","0c7c9dc1":"## Comparative Analysis","d491fc66":"The age of the top 50 players is well distributed.","e5cbf1e4":"### Work Rate of Players","001b7657":"## Data Manipulation","7a383f4f":"#### The comparative study of the top 3 players of the game show that over the years they have improved in some or the other field and increased their own worth","aea007cd":"### Calculated BMI of Players","0df73cfa":"The overall ratings of the players is more skewed when they are young and even at an older age","c46344bc":"The ownership of most of the top 50 players is dominated by 3-4 teams, which are well-renowned and also have won many titles.","6926e6f1":"It is seen that the these 6 players with highest international reputation in the game are also the most reputed players in the world","7700955c":"## Data Analysis and Visualization","720e2f33":"### Value of the Players","460ea263":"# FIFA 20 Analysis","c57fd3d7":"##### It is seen that with decrease in player ratings the value also reduces\n\nThe top 5 highest valued players are also the top rated players and play for well-known clubs.\nThe lowest valued 5 players have a low overall rating and also are young.\n\nThe 3D scatter plot shows that the top 50 players are at the peak of their ages and have very high overall rating","3751d26f":"## Top 50 rated players Analysis\n\n","a579e49f":"### International Reputation\n","9262c5e9":"It is seen that the players are well distributed in the mid-fielding and defending positions and there are many players for each role.\nIn case of the attacking position, there are many Strikers as compared to other positions","b48dd87d":"## Positional Analysis","a0b153f8":"##### It can be seen that most of the players have a medium work rate \n\nIn the highest work rate, it seen that these players are recruited in the top clubs and have high value, high rating and are not young","40276862":"### Cleaning the columns of different position attributes","e12d8d01":"### Model to list players according to position and the amount ","b2238c0e":"### Checking the dataset","fce80b5a":"##### The BMI of most players lie between 22 and 24 with a mean around 23. The data is not skewed towards any side.","22c6e80a":"## Analysis of FIFA 20 Game Set\n\nFIFA is a video game series that has been released by EA Sports every year with adding new players and changing attributes of these players according to their performances in the real game. The game has data about players and teams from almost all the leagues and countries from the world. The game FIFA 20 was released in late September 2019 and has rated the attributes accordingly.\n\n### Breif Description of the data set\n\nData of every player available on the game FIFA 20\nPlayer positions, with the role in the club and in the national team\nPlayer attributes with statistics as Attacking, Skills, Defense, Mentality, GK Skills, etc.\nPlayer personal data like Nationality, Club, DateOfBirth, Wage, Salary, etc.","3ee3e1dd":"The players with a BMI around 22 to 24 have the best pace. Hence, we can say that the players in that range are in a good physical condition.","6fc547f5":"#### It can be seen that the top teams where the ratings are high also represent the clubs that are highest in terms of their value\n\nThe most diverse club is with players from 19 different countries while some clubs have players from only one country.","fb1bc648":"Even some the lowest internationally reputed players have overall ratings and potential high","1a91e81b":"### Club wise Analysis","7fe72d96":"The highest number of players in the top 50 have a jersey number 10","40e63982":"#### Analysis based on Age","9e8020a6":"### League Wise Analysis","aeee7bb7":"#### The age of maximum players lie between 20 to 27 years with a mean of around 25 years\n\nThe minimum age of the players in the game is 16 years whereas the maximum age is 42 years\n\n","33dec63d":"### Preffered Foot to Shoot","822fdf53":"##### Remove the unrequired data"}}