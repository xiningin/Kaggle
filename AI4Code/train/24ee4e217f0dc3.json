{"cell_type":{"71a0e1da":"code","0322896f":"code","66209e06":"code","f3411dd5":"code","0cc37444":"code","25839b55":"code","1e0c21b9":"code","2cc55d61":"code","6e8b8de1":"code","fe392c0b":"code","fa80112d":"code","44c22a09":"code","4e8c6645":"code","b1b2019c":"code","e79209ad":"code","de9b7f53":"code","d63b8355":"markdown","e9964c7b":"markdown","08159a1d":"markdown","9c175679":"markdown","cc20f347":"markdown","3e487af9":"markdown","1161a507":"markdown","a38d107c":"markdown","45f2a940":"markdown","3307fb94":"markdown","6361b9c4":"markdown","b994ac4f":"markdown","274ba9b2":"markdown","cb1acd3c":"markdown","42f542c6":"markdown","5a553fd4":"markdown"},"source":{"71a0e1da":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import tree\n%matplotlib inline","0322896f":"traindf = pd.read_csv(r'..\/input\/titanic\/train.csv')\nnull_values = traindf.isnull().sum()\nprint('Check for null Values :\\n', null_values)\nprint('Check basic statistics: \\n', traindf.describe(include='all'))\nprint('Check number of unique entries: \\n', traindf.nunique())\nprint('Check for Data Types: \\n', traindf.dtypes)","66209e06":"traindf = traindf.drop(['Cabin', 'Name', 'PassengerId', 'Ticket', 'SibSp', 'Parch', 'Age'], axis=1)\ntraindf = traindf.dropna(axis=0, subset=['Embarked'])\ntraindf.Sex = traindf.Sex.map({'male': 0, 'female': 1})\ntraindf.Embarked = traindf.Embarked.map({'S': 0, 'C': 1, 'Q': 2})\ntraindf","f3411dd5":"correlation_matrix = traindf.corr()\ncorrelation_matrix['Survived'].sort_values(ascending=False)","0cc37444":"featuresdf = traindf[list(traindf.columns[1:])]\ntargetdf = traindf['Survived']\nclf = tree.DecisionTreeClassifier()\nmodel = clf.fit(featuresdf, targetdf)\nplt.title('Decision Tree')\ntree.plot_tree(model, feature_names=list(traindf.columns[1:]), class_names=['Died', 'Survived'], filled=True, rounded=True,\n              proportion=True, rotate=True)","25839b55":"titanictestdf = pd.read_csv(r'..\/input\/titanic\/test.csv')\ntestdf = titanictestdf.drop(['Cabin', 'Name', 'PassengerId', 'Ticket','SibSp', 'Parch', 'Age'], axis=1)\ntestdf = testdf.dropna(axis=0, subset=['Embarked'])\ntestdf.Sex = testdf.Sex.map({'male': 0, 'female': 1})\ntestdf.Embarked = testdf.Embarked.map({'S': 0, 'C': 1, 'Q': 2})\ntestdf","1e0c21b9":"testdf.isnull().sum()","2cc55d61":"testdf.loc[testdf[testdf['Fare'].isnull()].index.to_list()]","6e8b8de1":"titanictestdf.loc[152]","fe392c0b":"sns.swarmplot(traindf.Pclass, traindf.Fare)\n","fa80112d":"traindf.groupby('Pclass')['Fare'].agg(np.mean)","44c22a09":"testdf.dropna().groupby('Pclass')['Fare'].agg(np.mean)","4e8c6645":"testdf.loc[152, 'Fare'] = np.mean([testdf.dropna().groupby('Pclass')['Fare'].agg(np.mean).loc[3],traindf.dropna().groupby('Pclass')['Fare'].agg(np.mean).loc[3]])\ntestdf.loc[152,'Fare'] ","b1b2019c":"model.predict(testdf)","e79209ad":"survival_prediction = titanictestdf.copy()\nsurvival_prediction['Survived'] = model.predict(testdf)\nsurvival_prediction = survival_prediction[['PassengerId', 'Survived']].set_index('PassengerId')\nsurvival_prediction","de9b7f53":"survival_prediction.to_csv('survival_prediction.csv')","d63b8355":"## Create a Decision Tree model","e9964c7b":"## Read and understand the training dataset","08159a1d":"## Create a correlation matrix to check dependencies","9c175679":"## Import necessary modules","cc20f347":"## Get the details for missing value","3e487af9":"## Check for missing values","1161a507":"## Assign the average of these two results of 3rd class ticket averages to the missing value","a38d107c":"## We will check if we can predict the missing value by using Pclass","45f2a940":"## Get the average of fares in each ticket class (in both training and testing datasets)","3307fb94":"## Predict the survival using created model","6361b9c4":"## Get the testing dataset and clean it","b994ac4f":"## Get all the information on index 152","274ba9b2":"## Data Cleaning\n- Dropping unnecessary columns\n- Dropping rows with missing values\n- Assigning integers to categorical variables","cb1acd3c":"***The model turns out to be 77.99% accurate***","42f542c6":"## Save the result","5a553fd4":"## Add the prediction in the Survived column against passenger Id in a new dataframe"}}