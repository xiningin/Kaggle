{"cell_type":{"18a245f6":"code","f4f83e46":"code","cd50fe3f":"code","32ff06fb":"code","a1b6355a":"code","f01f7cf2":"code","4f6a4a5d":"code","9e9d0ab8":"code","c8dd7418":"code","f715a7d9":"code","08e67160":"code","6c9b6797":"code","001e30e4":"code","1e5129bb":"code","488b8a9c":"code","64872954":"code","275760ab":"code","96d71b6d":"code","7032a6ec":"code","5e460c5c":"code","d18ebb0d":"code","c369e6e5":"code","29bf8a1b":"code","d82951af":"code","f63310fa":"code","b72d66b4":"code","bf064a63":"code","3cb06436":"code","c7a06077":"code","7593a55e":"code","fbd7c38c":"code","9434ae88":"code","b606f518":"code","84db2a85":"code","98cee0f3":"code","4c118b9d":"code","8f3b4f24":"code","cb9e4829":"code","d5853fd9":"code","86d10cd8":"code","a6429fe6":"code","09c6b995":"code","d411a6fa":"code","e3430211":"code","3c876f2c":"code","cd880345":"code","860838b3":"code","3d7640fe":"code","eb6f50be":"code","af80e2b0":"code","6a49a8fb":"markdown"},"source":{"18a245f6":"import os\n\nPATH = '..\/input\/kagglecamp2022'\nos.listdir(PATH)","f4f83e46":"import pandas as pd\n\ntrain = pd.read_csv(os.path.join(PATH, 'train.csv'))","cd50fe3f":"train.head()","32ff06fb":"train.describe()","a1b6355a":"train.info()","f01f7cf2":"import missingno as msno","4f6a4a5d":"msno.matrix(train)","9e9d0ab8":"train.head()","c8dd7418":"train[\"Elevation\"].hist()\n\n# train[\"Elevation\"].plot(kind=\"hist\")","f715a7d9":"from matplotlib import pyplot as plt\nimport seaborn as sns","08e67160":"data = train[\"Elevation\"]\n# plt.subplot\nplt.figure(figsize=(4,4))\nsns.distplot(data)\nplt.title(\"Elevation\")\nplt.show()","6c9b6797":"train.describe()","001e30e4":"from sklearn.preprocessing import MinMaxScaler, StandardScaler","1e5129bb":"scaler = MinMaxScaler()","488b8a9c":"data.values.reshape(-1, 1)","64872954":"# fit, fit_transform, transform\nscaled_data = scaler.fit_transform(data.values.reshape(-1, 1))","275760ab":"train[\"scaled_Elevation\"] = scaled_data","96d71b6d":"train[\"scaled_Elevation\"]","7032a6ec":"# plt.subplot\nplt.figure(figsize=(4,4))\nsns.distplot(train[\"scaled_Elevation\"])\nplt.title(\"Elevation\")\nplt.show()","5e460c5c":"train[\"scaled_Elevation\"].describe()","d18ebb0d":"scaler = StandardScaler()\nabc = scaler.fit_transform(data.values.reshape(-1, 1))","c369e6e5":"train[\"standard_elevation\"] = abc\ntrain[\"standard_elevation\"].describe()","29bf8a1b":"# plt.subplot\nplt.figure(figsize=(4,4))\nsns.distplot(train[\"standard_elevation\"])\nplt.title(\"Elevation\")\nplt.show()","d82951af":"# fit, fit _transform, transfrom","f63310fa":"penguins = sns.load_dataset(\"penguins\")","b72d66b4":"penguins","bf064a63":"sns.pairplot(penguins, hue=\"species\")\nplt.show()","3cb06436":"from sklearn.impute import SimpleImputer","c7a06077":"imputer = SimpleImputer(strategy='mean')\ndata = imputer.fit_transform(train)","7593a55e":"data = imputer.fit_transform(train)","fbd7c38c":"data = train[\"Horizontal_Distance_To_Hydrology\"]\ntrain.loc[data.isna()]","9434ae88":"train.Cover_Type.value_counts().plot(kind='bar')","b606f518":"data = train.loc[train[\"Vertical_Distance_To_Hydrology\"] <= 0, \"Horizontal_Distance_To_Hydrology\"]","84db2a85":"data.hist()","98cee0f3":"data = train.loc[train[\"Vertical_Distance_To_Hydrology\"] > 0, \"Horizontal_Distance_To_Hydrology\"]\ndata.hist()","4c118b9d":"train","8f3b4f24":"# \uc0ac\uacfc, \ubc30, \ubc14\ub098\ub098\n1, 0, 0\n0, 1, 0\n0, 0, 1","cb9e4829":"train.Soil_Type.value_counts().plot(kind='bar')","d5853fd9":"import pandas as pd\n\ntrain = pd.read_csv(os.path.join(PATH, 'train.csv'))\n\ntrain_columns = [\n 'Elevation',\n 'Aspect',\n 'Slope',\n 'Horizontal_Distance_To_Hydrology',\n 'Vertical_Distance_To_Hydrology',\n 'Horizontal_Distance_To_Roadways',\n 'Hillshade_9am',\n 'Hillshade_Noon',\n 'Hillshade_3pm',\n 'Horizontal_Distance_To_Fire_Points',\n 'Soil_Type',\n 'Wilderness_Area']\n\ndata = train[train_columns]\n\nimputer = SimpleImputer(strategy='mean')\ndata = imputer.fit_transform(data)\n\nscaler = StandardScaler()\ndata = scaler.fit_transform(data)\n\ntrain[train_columns] = data","86d10cd8":"train","a6429fe6":"X_data = data\nY_data = train[\"Cover_Type\"].values","09c6b995":"from sklearn.model_selection import train_test_split","d411a6fa":"X_train, X_valid, Y_train, Y_valid = train_test_split(X_data, Y_data, test_size=0.2, stratify=Y_data)","e3430211":"pd.Series(Y_train).describe()","3c876f2c":"pd.Series(Y_valid).describe()","cd880345":"X_valid.shape","860838b3":"Y_valid.shape","3d7640fe":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\n\nlr.fit(X_train, Y_train)\n\npred_valid = lr.predict(X_valid)\n\nfrom sklearn.metrics import accuracy_score, f1_score\n\naccuracy_score(pred_valid, Y_valid)\n\nf1_score(pred_valid, Y_valid, average='macro')","eb6f50be":"test = pd.read_csv(os.path.join(PATH, 'test.csv'))\n\ndata = test[train_columns]\n\n# imputer = SimpleImputer(strategy='mean')\ndata = imputer.transform(data)\n\n# scaler = StandardScaler()\ndata = scaler.transform(data)\n\ntest[train_columns] = data\n\ny_test = lr.predict(data)\n\nsubmission = pd.read_csv(os.path.join(PATH, 'sample_submission.csv'))\n\nsubmission[\"Cover_Type\"] = y_test","af80e2b0":"submission.to_csv('submission.csv', index=False)","6a49a8fb":"## Test\uc758 \uc815\uc758\n\uc55e\uc73c\ub85c \uc5b4\ub5bb\uac8c \ubc1c\uc0dd\ud560 \uc9c0 \ubaa8\ub974\ub294 \ub370\uc774\ud130"}}