{"cell_type":{"925b9862":"code","5954ea47":"code","271575e1":"code","a1dfe178":"code","a3ace329":"code","987f545d":"code","5624e563":"code","83e0083e":"code","b5b49c68":"code","5227afc5":"code","352e0f05":"code","27f22572":"code","f1e0f0e8":"code","68c4846e":"code","be27e412":"code","a18975d6":"code","a20400a7":"code","a19cb4cc":"code","53f3911b":"markdown","badf87b3":"markdown","f36170f7":"markdown","1ab85e00":"markdown","ae7df03c":"markdown","6bc0c831":"markdown","ca285167":"markdown","b6f13b49":"markdown","6af6d9e9":"markdown","2321ab89":"markdown","f85abb3a":"markdown","b097ca2e":"markdown"},"source":{"925b9862":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow.compat.v1 as tf\ntf.disable_v2_behavior() \nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5954ea47":"steam_raw = pd.read_csv(\"..\/input\/steam-video-games\/steam-200k.csv\",usecols=[0,1,2,3],names=['userid','game','behavior','hoursplayed'])\nsteam_raw.head()\nsteam_raw.isnull().values.any()\nsteam_raw['userid'] = steam_raw.userid.astype(str)\nsteam_raw.describe()","271575e1":"steam_raw.groupby(['game']).mean().sort_values(by=\"hoursplayed\",ascending=False).head()\nsteam_raw.groupby(['game']).sum().sort_values(by=\"hoursplayed\",ascending=False).head()","a1dfe178":"len(steam_raw['game'].unique())\nlen(steam_raw['userid'].unique())","a3ace329":"gb = steam_raw.groupby('game')['userid'].nunique().sort_values(ascending=False).head()\nax = gb.plot(kind='bar', title='Number of players for Most Popular Games', ylabel='No. of players',\n         xlabel='Game', figsize=(6, 5))\n\nax.bar_label(ax.containers[0])","987f545d":"steam_df = steam_raw.copy()\nsteam_df['like'] = [1 if x > 40 else 0 for x in steam_df['hoursplayed']]\nsteam_df['like'].value_counts()\nsteam_df.head()\n\nbg=steam_df.groupby('game')['like'].apply(lambda x: (x==1).sum()).sort_values(ascending=False)\nbg.head()\ngb.head()\n#Plot grouped bar-chart of common games\ngbbg = pd.merge(gb, bg, on='game')\ngbc = gbbg.plot.bar(logy=True)\n\n","5624e563":"x = steam_df.groupby(['userid', 'game'])['behavior'].size()\ns = x[x == 1]\nlen(s)\nlen(x)\n\nboolean_index = steam_df.groupby(['userid','game'])['behavior'].transform('size') < 2\nsteam_df.loc[boolean_index,'hoursplayed'] = 0\nsteam_df.loc[steam_df['hoursplayed']==0]\n\nsteam_df.loc[steam_df.hoursplayed==0,'behavior'] = 'play'\n\nsteam_df.loc[steam_df['hoursplayed'] ==0]\nsteam_df = steam_df[steam_df.behavior != 'purchase']","83e0083e":"# Create a new dataframe to store metrics\nd = {'like':'Sum Likes','hoursplayed':'Avg Hours Played'}\nmetrics_df = steam_df.groupby(['game'], as_index=False).agg({'like':'sum','hoursplayed':'mean'}).rename(columns=d)\nmetrics_df.loc[metrics_df['game'] == \"Dota 2\"] #Check Dota 2\n\n# Calculate mean of Hours Played average\nc = metrics_df['Avg Hours Played'].mean()\nprint(\"Average hours played across all games is \" + str(round(c,2)))\n\n# Calculate the minimum number of likes required, set to 95 percentile\nm = metrics_df['Sum Likes'].quantile(0.95)\nprint(\"Minimum number of likes for a game is \" + str(m))","b5b49c68":"metrics_df.shape\nmetrics_df = metrics_df.loc[metrics_df['Sum Likes'] >= m]\nmetrics_df.shape\nmetrics_df.head()","5227afc5":"def weighted_rating(df, m=m, C=c):\n    l = df['Sum Likes']\n    a = df['Avg Hours Played']\n    return (l\/(l+m) * a) + (m\/(l+m) * C)\n\nmetrics_df['score'] = metrics_df.apply(weighted_rating, axis=1)\nmetrics_df.head()","352e0f05":"metrics_df.sort_values(by=['score'],ascending=False).head(15)","27f22572":"steam_df\nlen(steam_df['game'].unique())\nlen(steam_df['userid'].unique())\nlen(steam_df)","f1e0f0e8":"games_df = pd.DataFrame(steam_df.game.unique(), columns=['game'])\ngames_df['index_col'] = games_df.index\ngames_df\n\nsteam_df = steam_df.merge(games_df, on='game')\nsteam_df.head()\n\nsteam_df['hoursplayed'].std()\nsteam_df['hoursplayed'].mean()","68c4846e":"usergroup = steam_df.groupby('userid')\nusergroup.head()\n\nnoOfUsers = 1000\n\ntrain_list = []\n\ni = 0\n# For each user in the group\nfor userID, cur in usergroup:\n    # Create a temp that stores every game's hours played\n    temp = [0]*len(games_df)\n    # For each game in list\n    for no, game in cur.iterrows():\n        temp[game['index_col']] = game['hoursplayed']\n        i+=1\n    train_list.append(temp)\n    \n    if noOfUsers == 0:\n        break\n    noOfUsers -= 1\n","be27e412":"# Setting the models Parameters\nhiddenUnits = 50\nvisibleUnits = len(steam_raw['game'].unique())\nvb = tf.placeholder(tf.float32, [visibleUnits])  \nhb = tf.placeholder(tf.float32, [hiddenUnits]) \nW = tf.placeholder(tf.float32, [visibleUnits, hiddenUnits]) \n\n# Phase 1: Input Processing\nv0 = tf.placeholder(\"float\", [None, visibleUnits])\n_h0 = tf.nn.sigmoid(tf.matmul(v0, W) + hb)  \nh0 = tf.nn.relu(tf.sign(_h0 - tf.random_uniform(tf.shape(_h0)))) \n\n# Phase 2: Reconstruction\n_v1 = tf.nn.sigmoid(tf.matmul(h0, tf.transpose(W)) + vb) \nv1 = tf.nn.relu(tf.sign(_v1 - tf.random_uniform(tf.shape(_v1))))\nh1 = tf.nn.sigmoid(tf.matmul(v1, W) + hb)\n\n# Learning rate\nalpha = 1\n\n# Create the gradients\nw_pos_grad = tf.matmul(tf.transpose(v0), h0)\nw_neg_grad = tf.matmul(tf.transpose(v1), h1)\n\n# Calculate the Contrastive Divergence to maximize\nCD = (w_pos_grad - w_neg_grad) \/ tf.to_float(tf.shape(v0)[0])\n\n# Create methods to update the weights and biases\nupdate_w = W + alpha * CD\nupdate_vb = vb + alpha * tf.reduce_mean(v0 - v1, 0)\nupdate_hb = hb + alpha * tf.reduce_mean(h0 - h1, 0)\n\n# Set the error function, here we use Mean Absolute Error Function\nerr = v0 - v1\nerr_sum = tf.reduce_mean(err*err)\n\nerr_sum","a18975d6":"cur_w = np.zeros([visibleUnits, hiddenUnits], np.float32)\n\ncur_vb = np.zeros([visibleUnits], np.float32)\n\ncur_hb = np.zeros([hiddenUnits], np.float32)\n\nprv_w = np.zeros([visibleUnits, hiddenUnits], np.float32)\n\nprv_vb = np.zeros([visibleUnits], np.float32)\n\nprv_hb = np.zeros([hiddenUnits], np.float32)\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\nepochs = 30\nbatchsize = 150\nerrors = []\nfor i in range(epochs):\n    for start, end in zip(range(0, len(train_list), batchsize), range(batchsize, len(train_list), batchsize)):\n        batch = train_list[start:end]\n        cur_w = sess.run(update_w, feed_dict={v0: batch, W: prv_w, vb: prv_vb, hb: prv_hb})\n        cur_vb = sess.run(update_vb, feed_dict={v0: batch, W: prv_w, vb: prv_vb, hb: prv_hb})\n        cur_hb = sess.run(update_hb, feed_dict={v0: batch, W: prv_w, vb: prv_vb, hb: prv_hb})\n        prv_w = cur_w\n        prv_vb = cur_vb\n        prv_hb = cur_hb\n    errors.append(sess.run(err_sum, feed_dict={v0: train_list, W: cur_w, vb: cur_vb, hb: cur_hb}))\n    print(errors[-1])\nplt.plot(errors)\nplt.ylabel('Error')\nplt.xlabel('Epoch')\nplt.show()","a20400a7":"inputUser = [train_list[150]]\nhh0 = tf.nn.sigmoid(tf.matmul(v0, W) + hb)\nvv1 = tf.nn.sigmoid(tf.matmul(hh0, tf.transpose(W)) + vb)\nfeed = sess.run(hh0, feed_dict={v0: inputUser, W: prv_w, hb: prv_hb})\nrec = sess.run(vv1, feed_dict={hh0: feed, W: prv_w, vb: prv_vb})\n\n# List the 10 most recommended games for our mock user\ninputuser_games = games_df\ninputuser_games[\"Recommendation Score\"] = rec[0]\ninputuser_games.sort_values([\"Recommendation Score\"], ascending=False).head(10)\n\nuserid = steam_df.iloc[150]['userid']\n\n#Find the games this input user has played\nmuser_df = steam_df.loc[(steam_df['userid'] == userid) & (steam_df['hoursplayed'] >0)]\nmuser_df","a19cb4cc":"df_all = inputuser_games.merge(muser_df, how='left', indicator=True)\nunplayed_games = df_all[df_all['_merge']=='left_only']\n\n# Any Top 5 recommended games for input user which he haven't played\nunplayed_games.loc[:,['game','Recommendation Score']].sort_values(['Recommendation Score'], ascending=False).head(5)","53f3911b":"**Here the cut-off for the minimum number of likes is 5, this mean that there should be at least 5 user that played the game for more than 40 hours. <br> \nIf a game has no more than 5 likes, we wouldn't recommend it to others.<br>\nNow, we can proceed to trim and filter out the dataframe that meet this minimum number of likes.**","badf87b3":"**There are 57904 games purchased that have not been played yet.<br>\nNext, we define the metrics to calculate a simple recommendation based on popularity and what other players like.**","f36170f7":"## Restricted Boltzman Machine\n**Develop RBM a stochastic ANN to generate construct recommendations.**","1ab85e00":"# Steam - Game Recommender\n![steam](https:\/\/logosdownload.com\/logo\/Steam-Icon-logo-512.png)","ae7df03c":"## Simple Recommender\n**Next, we will create the scoring system for each game.<br>\nDefine the score as Average Hours Played for the Game multiplied by Sum Likes Fraction Add Average Hours Across Games multilpied by minimum number of Likes Fraction**","6bc0c831":"**From the graph, Half-Life 2 Lost Coast had one of the highest unique players of 981 (purchased and played) but none of them played the game more than 40 hours.<br>\nNow, let's find those who purchased a game and didn't play it at all.<br>\nWe would want to reassign hoursplayed for these players to 0 instead of 1.<br>\nAnd change the behavior to play and finally drop rows that are purchase.<br>\n<br>\nThis would leave the dataframe to only containing play behaviors and if those that are purchased and not played, the hoursplayed will be 0.**","ca285167":"## Feature Engineering and Metrics\n**Supposedly if a user plays a game for more than 40 hours, then the user enjoys the game.<br>\nThus, we define a binary column \"like\" that indicates 1 if the user enjoys the game, and 0 if he\/she doesn't.**","b6f13b49":"## Data Loading and Exploration","6af6d9e9":"**Eastside Hockey Manager has the highest average hours played while Dota 2 has the most hours played.**","2321ab89":"**There is 5155 unique games and 12393 unique players in the dataset.**","f85abb3a":"**Using the Simple Recommender score, the top games are** \n1. Football Manager, \n2. CSGO, \n3. and Dota 2.<br>\n**This yields the most popular games\/games that are well-liked by others.**<br>","b097ca2e":"**The top 5 recommended games for this user is Men of War Assault Squad 2, APB Reloaded, Counter-Strike Source, Dungeon Defenders and Empire Total War.**"}}