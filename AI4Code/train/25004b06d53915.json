{"cell_type":{"01f950cb":"code","9e8588d3":"code","25b2c9f2":"code","8811bfff":"code","70704395":"code","92597f91":"code","e4e51577":"code","7cace32d":"code","4058b585":"code","4cbd03d3":"code","ee6e1422":"code","473e1614":"code","6363cdb5":"code","8d630bf0":"code","8b06ed37":"code","233d69e1":"code","3b3e7bc3":"code","06ac2046":"code","144e5610":"code","78d5f0ec":"code","d9193a23":"code","354c7f07":"code","42d44b95":"code","888b1fa6":"code","56276541":"code","f8ac0511":"code","eff73b7d":"code","34a07dd4":"code","6b94a211":"code","7ba9bbd9":"code","64e2e9e2":"code","305df258":"code","1979bdca":"code","94cdaca4":"code","3482a6e5":"code","6f6df5e4":"code","b2fde218":"code","64ac5786":"code","425de80e":"code","909bd863":"code","47c639cd":"code","1daf3ef7":"code","a999a191":"code","2f438371":"code","26285419":"code","d9befd5c":"code","dbd7f3e8":"code","621421af":"code","b6fa3414":"code","69a62548":"code","746ac912":"code","12fa176a":"code","dee82fdc":"code","79866de8":"code","d8697f83":"code","6facec57":"code","86536649":"code","4994abfe":"code","41c5592f":"code","000073e3":"markdown","e4d53cd4":"markdown","99146595":"markdown","0241fa67":"markdown","4cc30e65":"markdown","e9dc348e":"markdown","8115f2ba":"markdown","139eec4f":"markdown","bc1fd0a2":"markdown","fc46f75c":"markdown","78f50cff":"markdown","85012e0f":"markdown","2c84edc3":"markdown","1f0483d8":"markdown","a3d6b388":"markdown","9caf5449":"markdown","3b340115":"markdown"},"source":{"01f950cb":"import datetime           # for start and end periods\nimport time\nimport pandas as pd\nimport sklearn as sk\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport numpy as np\n%matplotlib inline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.svm import LinearSVR\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error","9e8588d3":"res_dict=dict()","25b2c9f2":"class Yhoodwn(object):\n    def __init__(self, interval=\"1d\"):\n        self.url = \"https:\/\/query1.finance.yahoo.com\/v7\/finance\/download\/{ticker}?period1={start_time}&period2={end_time}&interval={interval}&events=history\"\n        self.interval = interval\n    def __build_url(self, ticker, start_date, end_date):\n        return self.url.format(ticker=ticker, start_time=start_date, end_time=end_date, interval=self.interval)\n    def get_data(self, ticker, start_date, end_date):\n        # must pass datetime into this function\n        epoch_start = int(time.mktime(start_date.timetuple()))\n        epoch_end = int(time.mktime(end_date.timetuple()))\n        return pd.read_csv(self.__build_url(ticker, epoch_start, epoch_end))\n","8811bfff":"class Upd_Data(BaseEstimator, TransformerMixin):\n    def __init__ (self, add_Adj_Close=True,N=5,G=1):\n        self.add_Adj_Close=add_Adj_Close\n        self.N=N\n        self.G=G\n    def fit(self,X,y=None):\n        return self\n    def transform(self,X,y=None):\n        buf0=(X.High-X.Low)\/2+X.Low\n        buf1=np.convolve(buf0, np.ones((self.N,))\/self.N, mode='valid')\n        \n        MM=np.append(buf1,np.ones(len(buf0)-len(buf1))*buf1[len(buf1)-1])\n        \n        X['Gradient']=np.gradient(MM,1)*self.G\n        if(self.add_Adj_Close):\n            return np.array(X.drop(['Date'],axis=1))\n        else:\n            return np.array(X.drop(['Date','Adj Close','Volume'],axis=1))","70704395":"dh = Yhoodwn()\nnow = datetime.datetime(2020, 9, 14)    # get data up to \nthen = datetime.datetime(2000, 1, 1)        # get data from\ndf = dh.get_data(\"EXO.MI\", then, now)\n    \nprint(df)","92597f91":"df.info()","e4e51577":"df.head()","7cace32d":"num_p=Pipeline([('attr_add',Upd_Data(add_Adj_Close=True,N=2,G=1)),('imputer',SimpleImputer(strategy='median')),('std_scaler',StandardScaler())],)","4058b585":"df_tf=pd.DataFrame(num_p.fit_transform(df),columns=df.columns[1:7].append(pd.Index(['Gradient'])))","4cbd03d3":"df_tf.describe()","ee6e1422":"df_tf.plot()","473e1614":"df_tf['Date']=pd.to_datetime(df.Date)","6363cdb5":"df_tf.info()","8d630bf0":"X=np.array(df_tf.drop(['Date','Low'],axis=1))[:-1]\ny=np.array(df_tf.Low)[1:]","8b06ed37":"X_tr, X_val, y_tr, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","233d69e1":"lin_reg=LinearRegression()","3b3e7bc3":"scores=cross_val_score(lin_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_lin_reg=np.sqrt(-scores)\nprint(rmse_lin_reg)","06ac2046":"res_dict['Lin_Reg']=rmse_lin_reg","144e5610":"f_reg=RandomForestRegressor(n_estimators=40)","78d5f0ec":"scores=cross_val_score(f_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_for_reg=np.sqrt(-scores)\nprint(rmse_for_reg)","d9193a23":"res_dict['Rand_For_Reg']=rmse_for_reg","354c7f07":"param_grid=[{'n_estimators':[30,40,50],},]","42d44b95":"grid_search=GridSearchCV(f_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)","888b1fa6":"grid_search.fit(X_tr,y_tr)","56276541":"grid_search.best_estimator_","f8ac0511":"cvres=grid_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","eff73b7d":"ridge_reg=Ridge(alpha=1,solver='cholesky')","34a07dd4":"scores=cross_val_score(ridge_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_ridge_reg=np.sqrt(-scores)\nprint(rmse_ridge_reg)\nprint((rmse_lin_reg-rmse_ridge_reg).mean())","6b94a211":"res_dict['Ridge_Reg']=rmse_ridge_reg","7ba9bbd9":"lasso_reg=Lasso(alpha=0.1,fit_intercept=False, tol=0.00000000000001,\n          max_iter=100000000, positive=True)","64e2e9e2":"scores=cross_val_score(lasso_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_lasso_reg=np.sqrt(-scores)\nprint(rmse_lasso_reg)\nprint((rmse_lin_reg-rmse_lasso_reg).mean())","305df258":"res_dict['Lasso_Reg']=rmse_lasso_reg","1979bdca":"eln_reg=ElasticNet(alpha=0.1,l1_ratio=0.1)","94cdaca4":"scores=cross_val_score(eln_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_eln_reg=np.sqrt(-scores)\nprint(rmse_eln_reg)\nprint((rmse_lin_reg-rmse_eln_reg).mean())","3482a6e5":"param_grid=[{'alpha':[0.1,0.2,0.5,1],'l1_ratio':[0.1,0.2,0.5,1],'max_iter':[100000000],},]","6f6df5e4":"grid_search=GridSearchCV(eln_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)\ngrid_search.fit(X_tr,y_tr)\ngrid_search.best_estimator_","b2fde218":"cvres=grid_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","64ac5786":"res_dict['El_Net_Reg']=rmse_eln_reg","425de80e":"svm_reg=LinearSVR()","909bd863":"param_grid=[{'epsilon':[0.01,0.05,0.1],'max_iter':[100000000],},]","47c639cd":"grid_search=GridSearchCV(svm_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)\ngrid_search.fit(X_tr,y_tr)\ngrid_search.best_estimator_","1daf3ef7":"cvres=grid_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","a999a191":"svm_reg=LinearSVR(epsilon=0.05, max_iter=1000000000)","2f438371":"scores=cross_val_score(svm_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_svm_reg=np.sqrt(-scores)\nprint(rmse_svm_reg)\nprint((rmse_lin_reg-rmse_svm_reg).mean())","26285419":"res_dict['SVM_Reg']=rmse_svm_reg","d9befd5c":"ada_reg=AdaBoostRegressor(base_estimator=Ridge(alpha=1,solver='cholesky'),\n                  learning_rate=1, n_estimators=110)","dbd7f3e8":"param_grid=[{'n_estimators':[100,110,120],'learning_rate':[1],},]\ngrid_search=GridSearchCV(ada_reg,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)\ngrid_search.fit(X_tr,y_tr)\ngrid_search.best_estimator_","621421af":"cvres=grid_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","b6fa3414":"res_dict['ADA_SVR_Reg']=0.06570451127388993","69a62548":"ada_svr_reg=AdaBoostRegressor(base_estimator=LinearSVR(epsilon=0.01, max_iter=1000000000),learning_rate=1, n_estimators=100)","746ac912":"scores=cross_val_score(ada_svr_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_ada_svr_reg=np.sqrt(-scores)\nprint(rmse_ada_svr_reg)\nprint((rmse_lin_reg-rmse_ada_svr_reg).mean())\nres_dict['ADA_SVR_Reg']=rmse_ada_svr_reg","12fa176a":"ada_eln_reg=AdaBoostRegressor(base_estimator=ElasticNet(alpha=0.1,l1_ratio=0.1),learning_rate=1, n_estimators=120)","dee82fdc":"scores=cross_val_score(ada_eln_reg,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_ada_eln_reg=np.sqrt(-scores)\nprint(rmse_ada_eln_reg)\nprint((rmse_lin_reg-rmse_ada_eln_reg).mean())\nres_dict['ADA_ELN_Reg']=rmse_ada_eln_reg","79866de8":"gbrt=GradientBoostingRegressor()","d8697f83":"param_grid=[{'max_depth':[2],'n_estimators':[120,130],'learning_rate':[0.1,0.5],},]\ngrid_search=GridSearchCV(gbrt,param_grid,cv=5,scoring='neg_mean_squared_error',return_train_score=True)\ngrid_search.fit(X_tr,y_tr)\ngrid_search.best_estimator_","6facec57":"cvres=grid_search.cv_results_\nfor mean_score,params in zip(cvres['mean_test_score'],cvres['params']):\n    print(np.sqrt(-mean_score),params)","86536649":"gbrt=GradientBoostingRegressor(learning_rate= 0.1,max_depth=2, n_estimators=120)","4994abfe":"scores=cross_val_score(gbrt,X_tr,y_tr,scoring='neg_mean_squared_error',cv=10)\nrmse_gbrt_reg=np.sqrt(-scores)\nprint(rmse_gbrt_reg)\nprint((rmse_lin_reg-rmse_gbrt_reg).mean())\nres_dict['GBRT']=rmse_gbrt_reg","41c5592f":"for i in res_dict:\n    print(i+':')\n    print(res_dict[i].mean())","000073e3":"## Creation of training feature's Matrix","e4d53cd4":"# Ridge Regression","99146595":"### Grid Search","0241fa67":"## Random Forest Regression","4cc30e65":"## Regression Methods Evaluation","e9dc348e":"Please Submith any comment.\nThank you for your considerations and for any upvotes you give to this Dataset.","8115f2ba":"## Dataframe transformation","139eec4f":"# SVM Regression","bc1fd0a2":"### RMSE Evaluation","fc46f75c":"# Gradient Boosting Regressor","78f50cff":"# Conclusion","85012e0f":"# <center>Shares Value: short-term prediction <\/center>\n\n#### <center> 27 September 2020 <\/center> \n#####  <center> A.P. <\/center> \n\n#  <center> Introduction <\/center> \n<center> \nThis Dataset tries to find the best Regression Methods to predict the % Increment of a share value one day in advance. The Dataset needed to train the models are downloaded in Real Time from Yahoo Finance database and is composed by 7 columns:\nDate, Open, High, Low, Close (adjusted Value),Adj Close (adjusted Value).\nThe target is to predict the Low vlue of the shares for the next day.\nTo perform this prediction the idea is to add an attribute to the model (Gradient), which is the convolution with a window of 2 rows (2 day) obtained by the mean share value ((High+Low)\/2).\nMoreover the models have been trained by shifting the training attributes by one row, to obtain the future prediction by using actual data.\nAn evaluation of different regression Machine Learning algorithm has been done to find the best one (minimum rmse).\n<\/center> ","2c84edc3":"As you can see from Dictionary shown the Best methods found (minimum RMSE) are the Linear Regression and the Ridge Regression with a value of around 0.35.\nIt has therefore been chosed to use both of them and perform a mean of the output of their prediction, to recommend or not to buy a stock.","1f0483d8":"## Linear Regression","a3d6b388":"# ADA Boost Regressor","9caf5449":"# Lasso Regression","3b340115":"# ElasticNet Regression"}}