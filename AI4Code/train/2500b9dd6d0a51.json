{"cell_type":{"b2e30db6":"code","efe160e8":"code","074c5786":"code","839293b1":"code","847795e6":"code","028b0bfc":"code","cdf1bd54":"code","60c98bc0":"code","670a35d7":"code","89297488":"code","28f2767e":"code","649c1bb6":"code","98f8c424":"code","da8e5666":"code","7b9ccc97":"code","78566ac9":"code","740f62fd":"code","7387fdda":"code","a196cd6e":"code","9923cb20":"code","a576a3e3":"code","b317c5be":"code","23c465ea":"code","ee5bdcb6":"code","4a3f8fef":"code","bace744e":"code","bbdb6246":"code","71d39e1c":"code","e619dad1":"code","4d8d2676":"code","12ad0099":"code","cf4f2019":"code","a55a0417":"code","3940fee7":"code","c84d7175":"code","0752b8c0":"code","4fa0e16b":"code","1080adad":"code","402955cc":"code","791eddde":"code","4c3e9f67":"code","a60b79c9":"code","e50f413c":"code","88969736":"code","d63daebb":"code","3b35ff27":"code","bb2cd7ae":"code","204ee7c3":"code","2ae8c218":"code","54034082":"code","292d1156":"code","daf50600":"code","8fa7aeca":"code","c562cf6c":"code","e61baae2":"code","df3cf471":"code","bd26db30":"code","db38a33a":"code","03509f8d":"code","4bf39804":"code","51f11147":"code","00a20ecc":"code","40049185":"code","decad914":"code","1674ef74":"code","27091e27":"code","8a5d1452":"code","2ff53c10":"code","79e6fa1d":"code","4ff74a65":"code","aac9f00a":"code","1979a282":"code","bb9f8803":"code","9eba0cb3":"code","f82dcd3f":"code","28669e2f":"code","be0bbd02":"code","14567219":"code","e17581cf":"code","3086db30":"code","c3ec2f56":"code","91f6bfc5":"code","659f19e1":"code","3c6188f9":"code","684a8060":"code","fccc2e6a":"code","14c8e638":"code","02314ef2":"code","267f4075":"code","0f2d82e8":"code","0435d776":"code","d2388a78":"code","17313ef0":"code","a0935cd4":"code","fd2ea2e3":"code","4105a8b3":"code","aa987585":"code","4a39782d":"code","af15e3a5":"code","a0e6187a":"code","2cbbc18a":"code","89c259c1":"code","e4195cdf":"code","6c334b91":"code","ba63e030":"code","78cde6d0":"code","ac21f9ad":"code","5ac13ed6":"code","e65f7fc6":"code","8b0837b7":"code","30d82a30":"code","41972ae0":"code","ec3f9c95":"code","e1e7b637":"code","883288c4":"code","55c8226c":"code","6cbb8556":"code","5567626d":"code","3e332c7d":"code","06fbc1c4":"code","919ff444":"code","21169c83":"markdown","7564bbae":"markdown","c520b78a":"markdown","ff022cb8":"markdown","3edf502d":"markdown","384f38fd":"markdown","80f4225d":"markdown","b00a9ba6":"markdown","2218c86f":"markdown","d2e8c136":"markdown","f4f17cfb":"markdown","6883f66b":"markdown","1f5d5429":"markdown","15d9fbb5":"markdown","ddf10eed":"markdown","cb55d4ac":"markdown","5bc830bc":"markdown","8fcd3f9d":"markdown","82b75da7":"markdown","0c1668dc":"markdown","98689792":"markdown","5a039a60":"markdown","4c0e34e1":"markdown","07874f0e":"markdown","0d288acb":"markdown","d82ddcd4":"markdown","75caf682":"markdown","981bf626":"markdown","6ce78545":"markdown","58e3bac4":"markdown","68c23cde":"markdown","bf3a7058":"markdown","4e8eda5d":"markdown","f6a2dd58":"markdown","e0910b89":"markdown","fa16685a":"markdown","1cf656a0":"markdown","c7ee102b":"markdown","6081039f":"markdown","9344bbfc":"markdown","15a75227":"markdown","128d3583":"markdown","b3c2b456":"markdown","c7426134":"markdown","32dd2adf":"markdown","7d16ae1d":"markdown","4e3e02d2":"markdown","8022b5f2":"markdown","8ce56e43":"markdown","961c2c8e":"markdown","e5423da3":"markdown"},"source":{"b2e30db6":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score\nfrom xgboost import XGBRegressor","efe160e8":"train = pd.read_csv('..\/input\/big-mart-sales-prediction\/Train.csv') # read train data\ntrain.head()","074c5786":"test = pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv') # read test data\ntest.head()","839293b1":"train.shape # in train dataset we have 8523 rows and 12 columns","847795e6":"test.shape # in test dataset we have 5681 rows and 11 columns","028b0bfc":"train.info() ","cdf1bd54":"test.info()","60c98bc0":"train.nunique()","670a35d7":"test.nunique()","89297488":"train.columns[train.isna().any()]","28f2767e":"test.columns[test.isna().any()]","649c1bb6":"train.isnull().sum()","98f8c424":"test.isnull().sum()","da8e5666":"train.describe()","7b9ccc97":"test.describe()","78566ac9":"plt.figure(figsize=(18,10))\n\nplt.subplot(2,2,1)\nplt.title('Item_Weight in Train dataset')\nsns.boxplot(x='Item_Weight', data=train)\n\nplt.subplot(2,2,2)\nplt.title('Item_Weight in Test dataset')\nsns.boxplot(x='Item_Weight', data=test)\n\nplt.show()","740f62fd":"# Use the mean to replace the null values in Item_Weight feature\ntrain.Item_Weight = train.Item_Weight.fillna(train.Item_Weight.mean())\ntest.Item_Weight = test.Item_Weight.fillna(test.Item_Weight.mean())","7387fdda":"train.Outlet_Size.unique()","a196cd6e":"train.Outlet_Size.value_counts()","9923cb20":"test.Outlet_Size.value_counts()","a576a3e3":"train.Outlet_Size = train.Outlet_Size.fillna(train.Outlet_Size.mode()[0])\ntest.Outlet_Size = test.Outlet_Size.fillna(test.Outlet_Size.mode()[0])","b317c5be":"train.isnull().sum()","23c465ea":"test.isnull().sum()","ee5bdcb6":"train.nunique()","4a3f8fef":"train.Item_Fat_Content.unique()","bace744e":"train.Item_Fat_Content.value_counts()","bbdb6246":"train.Item_Fat_Content = train.Item_Fat_Content.replace(to_replace=['low fat', 'LF', 'reg'], value=['Low Fat', 'Low Fat', 'Regular'])","71d39e1c":"train.Item_Fat_Content.value_counts()","e619dad1":"test.Item_Fat_Content.unique()","4d8d2676":"test.Item_Fat_Content.value_counts()","12ad0099":"test.Item_Fat_Content = test.Item_Fat_Content.replace(to_replace=['low fat', 'LF', 'reg'], value=['Low Fat', 'Low Fat', 'Regular'])","cf4f2019":"test.Item_Fat_Content.value_counts()","a55a0417":"test.Item_Fat_Content.unique()","3940fee7":"test.Item_Fat_Content.value_counts()","c84d7175":"plt.figure(figsize=(18,12))\n\nplt.subplot(2,2,1)\nplt.title(\"Item_Fat_Content Count in the Training Data\")\nsns.countplot(x='Item_Fat_Content', data=train, palette='ocean')\n\nplt.subplot(2,2,2)\nlow_fat = train.Item_Fat_Content[train.Item_Fat_Content == 'Low Fat'].count()\nreg = train.Item_Fat_Content[train.Item_Fat_Content == 'Regular'].count()\nplt.title(\"Item Content Fat Distrbution in the Training Data\")\nplt.pie([low_fat, reg], labels=['Low Fat', 'Regular'], explode=[0.01,0.01], autopct=\"%.2f%%\", colors=['lightgreen', 'yellow'], shadow=True)\nplt.legend()\n\nplt.show()","0752b8c0":"plt.figure(figsize=(25,8))\nplt.title(\"Item Type count in the Training data\", {\"fontsize\" : 25})\norder = train.groupby('Item_Type').count().sort_values(by='Item_Outlet_Sales', ascending=False).index\nsns.countplot(x='Item_Type', data=train, order=order);","4fa0e16b":"train.Outlet_Size.value_counts()","1080adad":"plt.figure(figsize=(18,12))\n\nplt.subplot(2,2,1)\nplt.title(\"The size of the store in terms of ground area covered count\")\nsns.countplot(x='Outlet_Size', data=train, palette='spring')\n\nplt.subplot(2,2,2)\nmedium = train.Outlet_Size[train.Outlet_Size == 'Medium'].count()\nsmall = train.Outlet_Size[train.Outlet_Size == 'Small'].count()\nhigh = train.Outlet_Size[train.Outlet_Size == 'High'].count()\nplt.title(\"The size of the store in terms of ground area covered Distrbution\")\nplt.pie([medium, small, high], labels=['Medium', 'Small', 'High'], autopct=\"%.2f%%\", shadow=True, explode=[0.01,0.01,0.01])\nmy_circle = plt.Circle( (0,0), 0.4, color='white')\nplt.gcf().gca().add_artist(my_circle)\nplt.legend()\n\nplt.show()","402955cc":"train.Outlet_Location_Type.unique()","791eddde":"train.Outlet_Location_Type.value_counts()","4c3e9f67":"plt.figure(figsize=(18,12))\n\nplt.subplot(2,2,1)\nplt.title(\"The type of city in which the store is located\")\nsns.countplot(x='Outlet_Location_Type', data=train, palette='twilight')\n\nplt.subplot(2,2,2)\ntier_1 = train.Outlet_Location_Type[train.Outlet_Location_Type == 'Tier 1'].count()\ntier_2 = train.Outlet_Location_Type[train.Outlet_Location_Type == 'Tier 2'].count()\ntier_3 = train.Outlet_Location_Type[train.Outlet_Location_Type == 'Tier 3'].count()\nplt.title(\"The type of city in which the store is located Distrbution\")\nplt.pie([tier_1, tier_2, tier_3], labels=['tier_1', 'tier_2', 'tier_3'], autopct=\"%.2f%%\", shadow=True, explode=[0.05,0.05,0.05])\nmy_circle = plt.Circle( (0,0), 0.4, color='white')\nplt.gcf().gca().add_artist(my_circle)\nplt.legend()\n\nplt.show()","a60b79c9":"train.Outlet_Type.unique()","e50f413c":"train.Outlet_Type.value_counts()","88969736":"plt.figure(figsize=(18,12))\n\nplt.subplot(2,2,1)\nplt.title(\"Whether the outlet is just a grocery store or some sort of supermarket count\")\nsns.countplot(x='Outlet_Type', data=train, palette='autumn')\n\nplt.subplot(2,2,2)\nsup_1 = train.Outlet_Type[train.Outlet_Type == 'Supermarket Type1'].count()\ngoc = train.Outlet_Type[train.Outlet_Type == 'Grocery Store'].count()\nsup_3 = train.Outlet_Type[train.Outlet_Type == 'Supermarket Type3'].count()\nsup_2 = train.Outlet_Type[train.Outlet_Type == 'Supermarket Type2'].count()\nplt.title(\"Whether the outlet is just a grocery store or some sort of supermarket Distrbution\")\nplt.pie([sup_1, goc, sup_3, sup_2], labels=['Supermarket Type1', 'Grocery Store', 'Supermarket Type3', 'Supermarket Type2'], autopct=\"%.2f%%\", shadow=True, explode=[0.01,0.01,0.01, 0.01])\nmy_circle = plt.Circle( (0,0), 0.4, color='white')\nplt.gcf().gca().add_artist(my_circle)\nplt.legend(bbox_to_anchor=(1, 0))\n\nplt.show()","d63daebb":"train.Outlet_Establishment_Year.unique()","3b35ff27":"train['Age'] = 2021 - train.Outlet_Establishment_Year\ntest['Age'] = 2021 - test.Outlet_Establishment_Year","bb2cd7ae":"plt.figure(figsize=(12,6))\n\nsns.countplot(x='Age', data=train, palette='autumn');","204ee7c3":"train.nunique()","2ae8c218":"FEATURES = [col for col in train.columns if col not in ['Item_Outlet_Sales', 'Outlet_Identifier']]\ncat_features = [col for col in FEATURES if train[col].nunique() < 10]\ncont_features = [col for col in FEATURES if train[col].nunique() >= 10]","54034082":"cat_features","292d1156":"cont_features","daf50600":"ncols = 3\nnrows = int(len(cat_features) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(22, 10), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = cat_features[r*ncols+c]\n        sns.barplot(y=train['Item_Outlet_Sales'], x=train[col], ax=axes[r, c], palette='autumn', label='Train data')\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=12, fontweight='bold')\n        axes[r, c].tick_params(labelsize=10, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(6)\n        axes[r, c].yaxis.offsetText.set_fontsize(6)\nplt.show()\n","8fa7aeca":"plt.figure(figsize=(25,8))\n\norder=train.groupby('Item_Type').mean().sort_values(by='Item_Outlet_Sales', ascending=False).index\nsns.barplot(x='Item_Type',y='Item_Outlet_Sales',data=train,palette='spring', order=order);","c562cf6c":"train.nunique()","e61baae2":"FEATURES = [col for col in train.columns if col not in ['Item_Outlet_Sales', 'Outlet_Identifier', 'Item_Identifier']]\ncat_features = [col for col in FEATURES if train[col].nunique() < 25]\ncont_features = [col for col in FEATURES if train[col].nunique() >= 25]","df3cf471":"cont_features","bd26db30":"# distrbution of the continous features\nplt.figure(figsize=(10,20))\nplt.subplot(4,1,1)\nplt.title(\"Item_Weight Distrbution\")\nsns.kdeplot(x='Item_Weight', data=train)\n\nplt.subplot(4,1,2)\nplt.title(\"Item_Visibility Distrbution\")\nsns.kdeplot(x='Item_Visibility', data=train);\n\nplt.subplot(4,1,3)\nplt.title(\"Item_MRP Distrbution\")\nsns.kdeplot(x='Item_MRP', data=train);\n\nplt.subplot(4,1,4)\nplt.title(\"Item_Outlet_Sales\")\nsns.kdeplot(x='Item_Visibility', data=train);","db38a33a":"plt.figure(figsize=(18,15))\nplt.subplot(3,1,1)\nsns.lineplot(x='Item_Weight', y='Item_Outlet_Sales', data=train);\n\nplt.subplot(3,1,2)\nsns.lineplot(x='Item_Visibility', y='Item_Outlet_Sales', data=train);\n\nplt.subplot(3,1,3)\nsns.lineplot(x='Item_MRP', y='Item_Outlet_Sales', data=train);","03509f8d":"plt.figure(figsize=(25,5))\nsns.barplot('Item_Type','Item_Outlet_Sales',hue='Item_Fat_Content',data=train,palette='mako')\nplt.legend();","4bf39804":"plt.figure(figsize=(10,5))\nsns.barplot('Outlet_Location_Type','Item_Outlet_Sales',hue='Outlet_Type',data=train,palette='magma')\nplt.legend()\nplt.show()","51f11147":"train.nunique()","00a20ecc":"plt.figure(figsize=(10,5))\nsns.barplot('Item_Fat_Content','Item_Outlet_Sales',hue='Outlet_Size',data=train,palette='autumn')\nplt.legend()\nplt.show()","40049185":"plt.figure(figsize=(10,5))\nsns.barplot('Item_Fat_Content','Item_Outlet_Sales',hue='Outlet_Type',data=train,palette='summer')\nplt.legend()\nplt.show()","decad914":"train.nunique()","1674ef74":"train.dtypes","27091e27":"test.dtypes","8a5d1452":"train.columns[train.isna().any()]","2ff53c10":"#apply Label Encoder to convert Categorical ordered features to numeric\nencode = LabelEncoder()\nlist_transform = ['Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Outlet_Type']\n\nfor i in list_transform:\n    train[i] = encode.fit_transform(train[i])\n    \nfor i in list_transform:\n    test[i] = encode.fit_transform(test[i])","79e6fa1d":"train.dtypes","4ff74a65":"test.dtypes","aac9f00a":"#drop non needed features\ntrain = train.drop(['Item_Identifier','Outlet_Identifier','Outlet_Establishment_Year'],axis=1)\ntest= test.drop(['Item_Identifier','Outlet_Identifier','Outlet_Establishment_Year'],axis=1)","1979a282":"train.corr()","bb9f8803":"plt.figure(figsize=(20,10))\nsns.heatmap(train.corr(), annot=True);","9eba0cb3":"#apply one hot encoder to convert non-order categorical featuers\ndummies1 = pd.get_dummies(train.Item_Type)\ndummies2 = pd.get_dummies(test.Item_Type)","f82dcd3f":"train.head()","28669e2f":"test.head()","be0bbd02":"train = pd.concat([train, dummies1], axis=1)\ntest = pd.concat([test, dummies2], axis=1)","14567219":"train.head()","e17581cf":"test.head()","3086db30":"#drop the main feature and one dummy feature\ntrain.drop(['Item_Type', 'Starchy Foods'], axis=1, inplace=True)\ntest.drop(['Item_Type', 'Starchy Foods'], axis=1, inplace=True)","c3ec2f56":"cont_features","91f6bfc5":"train.head()","659f19e1":"test.head()","3c6188f9":"X = train[cont_features]\nX.head()","684a8060":"test2 = test[cont_features]\ntest2.head()","fccc2e6a":"scaler = StandardScaler()\nX = scaler.fit_transform(X)\ntest2 = scaler.fit_transform(test2)","14c8e638":"X = pd.DataFrame(X, columns=cont_features)\ntest2 = pd.DataFrame(test2, columns=cont_features)","02314ef2":"X.head()","267f4075":"test2.head()","0f2d82e8":"FEATURES = [col for col in train.columns if col not in ['Item_Outlet_Sales']]\nFEATURES","0435d776":"cat_features = [col for col in FEATURES if train[col].nunique() < 25]\ncat_features","d2388a78":"X = pd.concat([X, train[cat_features]], axis=1)\nX.head()","17313ef0":"y = train.Item_Outlet_Sales\ny.head()","a0935cd4":"test2 = pd.concat([test2, test[cat_features]], axis=1)\ntest2.head()","fd2ea2e3":"train.shape","4105a8b3":"X.shape","aa987585":"test2.shape","4a39782d":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state = 0)","af15e3a5":"def kfolds(model, model_name):\n    model = cross_val_score(model, X,y, cv=10)\n    model_score = np.average(model)\n    print(f\"{model_name} score on cross validation: {model_score * 100}%\")\n\ndef train(model, model_name):\n    model.fit(X_train, y_train)\n    model_train_score = model.score(X_train, y_train)\n    model_test_score = model.score(X_test, y_test)\n    print(f\"{model_name} model score on Training data: {model_train_score * 100}%\\n{model_name} model score on Testing data: {model_test_score * 100}%\")\n\ndef r2(model, model_name):\n    score = r2_score(y_test, model.predict(X_test))\n    print(f\"R2 Score for {model_name} is {score * 100}%\")","a0e6187a":"rf_model = RandomForestRegressor()\nkfolds(rf_model, \"Random Forest\")\ntrain(rf_model, \"Random Forest\")","2cbbc18a":"r2(rf_model, \"Random Forest\")","89c259c1":"gbr = GradientBoostingRegressor()\nkfolds(gbr, \"Gradient Boosting\")\ntrain(gbr, \"Gradient Boosting\")","e4195cdf":"r2(gbr, \"Gradient Boosting\")","6c334b91":"br = BaggingRegressor()\nkfolds(br, \"Bagging\")\ntrain(br, \"Bagging\")","ba63e030":"r2(br, \"Bagging\")","78cde6d0":"lr = LinearRegression()\nkfolds(lr, \"Linear Regression\")\ntrain(lr, \"Linear Regression\")","ac21f9ad":"r2(lr, \"Linear Regression\")","5ac13ed6":"svr = SVR(gamma='auto', kernel='poly', C=15)\nkfolds(svr, \"SVR\")\ntrain(svr, \"SVR\")","e65f7fc6":"r2(svr, \"SVM\")","8b0837b7":"dtr = DecisionTreeRegressor()\nkfolds(dtr, \"Decision Tree\")\ntrain(dtr, \"Decision Tree\")","30d82a30":"r2(dtr, \"Decision Tree\")","41972ae0":"xgboost = XGBRegressor()\nkfolds(xgboost, \"XGBoost\")\ntrain(xgboost, \"XGBoost\")","ec3f9c95":"gbr.fit(X,y)","e1e7b637":"gbr.score(X,y)","883288c4":"y_pred = gbr.predict(test2)","55c8226c":"sumbission = pd.read_csv('..\/input\/big-mart-sales-prediction\/Test.csv')","6cbb8556":"sumbission.head()","5567626d":"sumbission['Item_Sales_Outlet'] = y_pred","3e332c7d":"sumbission.head()","06fbc1c4":"sumbission.shape","919ff444":"#sumbission.to_csv(\"..\/input\/big-mart-sales-prediction\/sumbission.csv\")","21169c83":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","7564bbae":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","c520b78a":"<a id='1'><\/a>\n# Project Descriprion","ff022cb8":"<a id='7'><\/a>\n# Feature Scaling","3edf502d":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","384f38fd":"<a id='4'><\/a>\n# Data Cleaning","80f4225d":"- The Item Outles sales are high for both Low Fat and Regular Item types.\n- The Outlet Sales is maximum for Medium and High sized Outlets.\n- The Outlets we have is Medium and may be with High size Outlets can improve the Outlet Sales.\n- The Outlet Sales tend to be high for Tier3 and Tier 2 location types but we have only Tier3 locations maximum Outlets.\n- Supermarket Type3 sales tends to be high which in Grocery store is very low\n- It is quiet evident that Outlets established 36 years before is having good Sales margin.<br>\n- We also have a outlet which was established before 23 years has the lowest sales margin, so established years wouldn't improve the Sales unless the products are sold according to customer's interest.","b00a9ba6":"<a id='5'><\/a>\n# EDA","2218c86f":"**Fruits and Vegetables are largely sold as people tend to use them on daily purpose.**<br>\n**Snack Foods too have good sales.**","d2e8c136":"**Low Fat has the majority in the data 64.73% but Regular 35.27%**","f4f17cfb":"<a id='10.4'><\/a>\n## Linear Regression model","6883f66b":"Medium Size has the majoirty in the data 61.05%","1f5d5429":"Item_Visibility has a minimum value of zero. This makes no practical sense because when a product is being sold in a store, the visibility cannot be 0.\nItems MRP ranging from 200-250 dollars is having high Sales.\n","15d9fbb5":"Categorical Features:\n\nItem_Fat_Content<br>\nItem_Type<br>\nOutlet_Identifier<br>\nOutlet_Size<br>\nOutlet_Location_Type<br>\nOutlet_Type","ddf10eed":"<a id= '8'><\/a>\n# Assigning Feature and Target Variables","cb55d4ac":"same problem in the testing data","5bc830bc":"<a id='10.2'><\/a>\n## Gradient Boosting Regressor Model","8fcd3f9d":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","82b75da7":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","0c1668dc":"<a id='6.2'><\/a>\n***one hot encoder***","98689792":"from box plot Item Weight dosen't appear to have outliers in both datasets","5a039a60":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","4c0e34e1":"Continous Features:\n\n- Item_Weight\n- Item_Visibility\n- Item_MRP","07874f0e":"<a id='2'><\/a>\n# Import Necssaries Libraries","0d288acb":"The Tier-3 location type has all types of Outlet type and has high sales margin.\n","d82ddcd4":"The aim is to build a predictive model and find out the sales of each product at a particular store. Using this model, BigMart will try to understand the properties of products and stores which play a key role in increasing sales.","75caf682":"<a id='10.1'><\/a>\n## Random Forest Regressor Model","981bf626":"<a id='10.6'><\/a>\n## Decision Tree Regressor Model","6ce78545":"<a id='4.1'><\/a>\n***handling Null Values***","58e3bac4":"We see there are some irregularities in the column and it is needed to fix them!<br>\nfor example there is low fat one with upper case and other with lower case and another abbreviated (LF) <br>\nalso Regular and reg <br>\nso we have 2 types of item fat content Low fat and regular\n","68c23cde":"<a id='9'><\/a>\n# Spliting the data into Training and Testing data","bf3a7058":"<a id='10.3'><\/a>\n## Bagging Regressor Model","4e8eda5d":"<a id='10'><\/a>\n# Modeling","f6a2dd58":"# Table of Contents\n<a id=\"toc\"><\/a>\n- [1. Project Description](#1)\n- [2. Import Necssaries Libraries](#2)\n- [3. Exploaring the Data](#3)\n    - [3.1 Shape of the data](#3.1)\n- [4. Data Cleaning](#4)\n    - [4.1 Handling Missing Values](#4.1)\n- [5. EDA](#5)\n- [6. Data Preprocessing](#6)\n    - [6.1 Label Encoder](#6.1)\n    - [6.2 One Hot Encoder](#6.2)\n- [7. Feature Scaling](#7)\n- [8. Assign Feature and Target Variables](#8)\n- [9. Spliting the data into Training and Testing Data](#9)\n- [10. Modeling](#10)\n    - [10.1 Random Forest Regressor Model](#10.1)\n    - [10.2 Gradient Boosting Regressor Model](#10.2)\n    - [10.3 Bagging Regressor model](#10.3)\n    - [10.4 Linear Regression Model](#10.4)\n    - [10.5 SVR model](#10.5)\n    - [10.6 Decision Tree Regressor](#10.6)\n    - [10.7 XGBoost Regressor](#10.7)\n- [11. Sumbission File](#11)","e0910b89":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","fa16685a":"The Outlets are more of established and running from 35 years.\n","1cf656a0":"<a id='3'><\/a>\n# Exploaring the data","c7ee102b":"<a id='10.5'><\/a>\n## SVR Model","6081039f":"**Seafood Regular is highest in price**","9344bbfc":"<a id='10'><\/a>\n# Sumbission File","15a75227":"<a id=\"10.7\"><\/a>\n## XGBoost Regressor","128d3583":"**The products available were Fruits-Veggies and Snack Foods but the sales of Seafood and Starchy Foods seems higher and hence the sales can be improved with having stock of products that are most bought by customers**","b3c2b456":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","c7426134":"<a id='6'><\/a>\n# Date PreProcessing","32dd2adf":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>","7d16ae1d":"**The Outlets are more of Supermarket Type1.**\n","4e3e02d2":"**Gradient Boosting is the best**","8022b5f2":"here we can replace the null values with the mode because it is a categorical column","8ce56e43":"**The Outlets are maximum in number in Tier 3 Cities.**","961c2c8e":"<a id='6.1'><\/a>\n***Label Encoder***","e5423da3":"<a href=\"#toc\" role=\"button\" aria-pressed=\"true\" >\u2b06\ufe0fBack to Table of Contents \u2b06\ufe0f<\/a>"}}