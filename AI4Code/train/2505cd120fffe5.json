{"cell_type":{"29e6b6ea":"code","44791d80":"code","c6ac86d0":"code","abdf73e8":"code","c17fb244":"code","16e49cb4":"code","7a6599d9":"code","12a2fef6":"code","b4cc40c8":"code","67e928b4":"code","a38cfefa":"code","6bd6d5a9":"code","bb413907":"code","8e6a3d70":"code","ee838bde":"code","1e4c5c6d":"code","0021b560":"code","4d5171c6":"code","a851a7c7":"code","f42937d2":"code","1c9a6d8a":"code","4f991f5c":"code","24ff0e76":"code","5ab9cacb":"code","fb4e9d6d":"code","61b673a1":"code","cc797c28":"code","6bf159b0":"code","7383b6fc":"code","026d9c57":"code","54409531":"code","0be90820":"code","44d14b59":"code","5aa7565e":"code","178d9030":"code","8f165b6f":"code","397e313f":"code","454f4f30":"code","bf65bbe4":"code","2db22e78":"code","eea09763":"code","247c263d":"code","db2045ad":"code","e85a732b":"code","ca99beb0":"code","a415d0fe":"code","034c2e05":"code","4d6f8a67":"code","67aafc4d":"code","626f6bb9":"code","2cdd984e":"code","30bf7193":"code","78178737":"code","2ae1dedb":"code","237061d2":"code","b4b2386a":"code","f4b711e6":"code","349107a9":"code","d93d1d24":"code","fd62f8b4":"code","5bc6c60b":"code","490d5f99":"code","ffc8d6c8":"code","e4b8b882":"code","81bf5252":"code","ca5135a5":"code","278f39f4":"code","e5688a9a":"code","47549607":"code","32f5c554":"code","db6936be":"code","191fe5e6":"code","95c7bdaf":"code","a7534b6b":"code","618d0c8f":"code","bf723772":"code","66f44df9":"code","98c9e9c0":"code","277403fc":"code","60d58767":"code","a9120589":"code","05111a9d":"code","c9f60080":"code","2a4f975d":"code","a71b943e":"code","e306d0d4":"code","8aec9160":"markdown","ee0f790e":"markdown","4543a80a":"markdown","39dfecd6":"markdown","3c8fd8d9":"markdown","1cfd8245":"markdown","c2ef87a6":"markdown","754a78a1":"markdown","d7999c5e":"markdown","56fbcbad":"markdown","23379aef":"markdown","5a66841a":"markdown","5ef294a2":"markdown","af88c56e":"markdown","6b5ab24e":"markdown","6b458861":"markdown","cf1e1af5":"markdown"},"source":{"29e6b6ea":"print(\"Good afternoon, ya'll!\")","44791d80":"# assigning a value to a variable\ntoday = \"Today is a great day to learn\"\nprint(today)","c6ac86d0":"print(\"Use the print command\")\nprint(\"To print\")\nprint(\"Prints each and every line\")","abdf73e8":"\"Notebook cells automatically print the last line of code\"","c17fb244":"# run this cell and the number 5 will be printed\n5","16e49cb4":"\"Multiple lines\"\n\"do not print automatically\"\n\"only the last line\"","7a6599d9":"\"I'm writing Python with ya'll right now\"","12a2fef6":"print(\"That means\")\nprint(\"The print command is important.\")\nprint(\"When we want to print each line\")","b4cc40c8":"# Exercise: Print your name in this cell. Be sure to use quotation marks.\n","67e928b4":"# Exercise: Print your favorite number in this cell\n","a38cfefa":"# Exercise: Print the number 7 in this cell\n","6bd6d5a9":"# Exercise: Print out 3 + 4 in this cell\n# Make Python do the math rather than adding 3 + 4 in your head\n","bb413907":"# Exercise: Print out 3 * 5 in this cell, * means multiply\n","8e6a3d70":"# This is a comment. Run this cell. Do you see anything? Why or why not?","ee838bde":"# First, run this cell.\n# Then delete the hashtag at the beginning of the last line.\n# Last, run the cell again.\n# print(\"This is a 'commented out' print command\")","1e4c5c6d":"# In Python\n# Comments are a best-practice when it comes to communicating to your future self and to fellow developers\n# print(\"Once the # at the beginning of this line is removed, this string will print.\") # additional hashtags make additional comments","0021b560":"# Variables hold values that we use later in the program by name.\nmessage = \"Hello, Everybody!\"\nprint(message)","4d5171c6":"favorite_quote = \"If you can't solve a problem, then there is an easier problem you can solve:  find it.\"\nprint(favorite_quote)","a851a7c7":"# Variables are assigned to point to values.\nfavorite_food = \"lasagna\"\nprint(\"My favorite food is\", favorite_food)","f42937d2":"# Variables can also be re-assigned to point to different values.\nfavorite_food = \"pizza\" \nprint(\"I changed my mind. My favorite food is actually\", favorite_food)","1c9a6d8a":"# Exercise: Reassign the favorite_food variable to hold your own favorite food, then print the variable.\n","4f991f5c":"# Exercise: Create and assign the variable favorite_number to hold your own favorite number.\n","24ff0e76":"# Exercise: Reassign the favorite_food variable to hold the number 7. \n# What happens and why? Does this match your expectations?\n","5ab9cacb":"# The \"None\" data type represents the absence of a value. This is called \"null\" in some other programming languages\ntype(None)","fb4e9d6d":"type(True)","61b673a1":"type(False)","cc797c28":"# Numbers without a decimal are integers. Integers can be negative or positive.\ntype(-99)","6bf159b0":"type(2.3)","7383b6fc":".5 * .5","026d9c57":"type(\"Howdy!\")","54409531":"# True and False are the only two Boolean values.\nTrue\nFalse\n\nprint(True)\nprint(False)","0be90820":"# Exercise: Add 1 plus 2 plus 3 plus 4 plus 5 plus 6 plus 7 plus 8 plus 9 plus 10\n","44d14b59":"# Exercise: Subtract 23 from 55\n","5aa7565e":"# Exercise: Multiply 2.3 by 4.4. What's the data-type that this returns?\n","178d9030":"# Exercise: Multiply 3 by 5.\n","8f165b6f":"# Exercise: Print out the data-type of the result of multiplying 11 * 7\n","397e313f":"# Exercise: Divide 1 by 2. What happens? What data type is returned?\n","454f4f30":"# Exercise: Divide 5 by 0. What happens? Why do you think that is?\n","bf65bbe4":"# Exercise: Use the modulo operator to obtain the remainder of dividing 5 by 2\n","2db22e78":"# Exercise: Use the modulo operator to obtain the remainder of dividing 8 by 2\n","eea09763":"# Exercise: Use the modulo operator to obtain the remainder of dividing 9 by 3\n","247c263d":"# Exercise: Use the modulo operator to obtain the remainder of dividing 7 by 2\n","db2045ad":"# Exercise: Use the exponent operator to raise 2 to the 3rd power\n","e85a732b":"# Exercise: Use the exponent operator to raise 10 to the 10th power\n","ca99beb0":"# Exercise: Use the exponent operator to raise 100 to the 100th power\n","a415d0fe":"# Exercise: Use the exponent operator to raise 2 to the negative 1st power\n","034c2e05":"# Exercise: Use the exponent operator to raise 123 to the 0th power\n","4d6f8a67":"# Exercise: Use what you have learned to determine the average of the following variables\na = 5\nb = 7\nc = 9\nd = 17\ne = 11\n\n","67aafc4d":"# \"Not\" operator changes the boolean value. (Only booleans are True and False)\nis_raining = False\nnot is_raining","626f6bb9":"# Boolean values assigned to variables \nright_here_now = True\nlearning_python = True\non_the_moon = False","2cdd984e":"print(right_here_now and on_the_moon)","30bf7193":"# Read the line of code below and think about the result. \n\nprint(learning_python or on_the_moon)","78178737":"indenting = False\nif indenting:\n    print(\"We are indenting b\/c the indent means the indended stuff belongs to the if\")\nprint(\"This happens no matter what\")","2ae1dedb":"if right_here_now:\n    print(\"So glad you made it today!\")\n    print(\"Wherever you go, there you are.\")\nelse:\n    print(\"You are not right here now.\")\n    \nprint(\"Unindented means the if\/else is over, and we're back to our regularly scheduled programming.\")","237061d2":"# Before running this cell, think about and predict the outcome.\nif on_the_moon:\n    print(\"You are currently on a lunar base.\")\nelse:\n    print(\"You are not on the moon!\")","b4b2386a":"# Before running this cell, think about and predict the outcome.\nif right_here_now and learning_python:\n    print(\"We are right here now and learning python.\")","f4b711e6":"# Before running this cell, think about and predict the outcome.\nif right_here_now and learning_python and on_the_moon:\n    print(\"You must be magic since you're on the moon and here and learning Python all at the same time.\")","349107a9":"# Before running this cell, think about and predict the outcome.\nif right_here_now or on_the_moon:\n    print(\"How many True values does it take with an OR for the entirety to be True?\")","d93d1d24":"# Before running this cell, think about and predict the outcome.\n# Carefully consider the parentheses...\nif learning_python and (right_here_now or on_the_moon):\n    print(\"In addition to learning python, you are either right here now or on the moon\")","fd62f8b4":"# Exercise: Create a variable called is_raining and assign it True or False depending on if it's raining right now\n","5bc6c60b":"# Exercise: Create a variable named will_rain_later and assign a value of True or False if it may rain later today\n","490d5f99":"# Exercise: Create an \"if\" condition that checks if it's raining now or later. \n# If it is going to rain now or later, then print out \"I'll bring an umbrella\"\n","ffc8d6c8":"print(5 == 5)\nprint(-4 + 4 == 0)","e4b8b882":"5 < 10","81bf5252":"print(\"Hello\" == \"Goodbye\")\nprint(\"Hello\" != \"Goodbye\") # != means \"not equal to\" \n# = assignment\n# == comparison\n# != not the same","ca5135a5":"# Lists are created with square brackets. Each item on the list is separated by a comma. Lists can hold any data type\nbeatles = [\"John\", \"Paul\", \"George\"]\nprint(beatles)","278f39f4":"# type out the variable, add a period, then hit TAB\nprint(\"How many times John shows up is\", beatles.count(\"John\"))\nbeatles.reverse()\nbeatles","e5688a9a":"# Lists have built-in functions\nbeatles.append(\"Ringo\") # Don't forget Ringo\nprint(beatles)","47549607":"beatles","32f5c554":"# .append and .reverse are some of the built-in list functions\nbeatles.reverse()\nprint(beatles)","db6936be":"beatles.append(\"all of us\")\nbeatles","191fe5e6":"# We can also use lists to hold numbers\nodds = [1, 3, 5, 7, 9, 11, 13, 17, 19, 21]","95c7bdaf":"# for variable in list:\n# For each number in the list of odds, do something\n# thing we do each time through the loop IS the code indented within that loop\nfor number in odds:\n    print(number)\n    print(\"The loop is going\")\nprint(\"The Loop is complete.\")","a7534b6b":"for number in odds:\n    print(number + 10)","618d0c8f":"odds","bf723772":"# sum is a built in function\nnumbers = [2, 3, 5, 7]\nsum(numbers)","66f44df9":"# len is a built-in function short for length\nlen(numbers)","98c9e9c0":"sum(numbers) \/ len(numbers)","277403fc":"# The len function also works on strings\nprogramming_language = \"Python\"\nprint(\"The number of letters in Python is\", len(programming_language))","60d58767":"# how to define our own functions\n# def function_name(variable_name_for_the_input):\n#      output = guts of the function\n#      return output\ndef is_even(number):\n    remainder = number % 2 # the % operator returns the remainder of integer division of the number on the left by the number on the right\n    if remainder == 0: # even numbers have no remainder\n        return True\n    else:\n        return False\n\n# calling a function means to run it\nprint(is_even(2))\nprint(is_even(4))\nprint(is_even(2.3))\nprint(is_even(3))","a9120589":"# lots of built in functions work on sequences\nnames = [\"John\", \"Paul\", \"George\", \"Ringo\"]\n\nprint(\"The number of items on the list is\", len(names))\n","05111a9d":"numbers = [2, 3, 5, 7]\nprint(\"The highest number on the list is\", max(numbers))\nprint(\"The smallest number on the list is\", min(numbers))","c9f60080":"# def keyword to define, name_of_function, parentheses for parameters\ndef square(number):\n    return number * number # return is the output we hand back to the code that called the function (calling == execute == run)","2a4f975d":"square(3)","a71b943e":"square(4)","e306d0d4":"# How to average a list of numbers.\nnumbers = [2, 3, 5, 7]\ntotal = sum(numbers)\naverage = total \/ len(numbers)\n","8aec9160":"### 3. Variables point to values and give them a name\n- \"Assigning a variable\" means to bind value to a variable\n- Variables allow us to name values\n- Variables hold onto values for later.\n- Variables hold their assigned value(s) until \n- Applications use the same variable to hold different values for different users ","ee0f790e":"### 2. Comments are how we notate our code with descriptive text\n- Python comments are created by the hashtag symbol. \n- The hashtag \"comments out\" everything to the right of the hashtag.\n- Comments exist in the code but do not execute\n- Commenting your code is an industry best practice\n- A hashtag at the beginning of a line \"comments out","4543a80a":"# Intro to Programming in Python\n## This notebook is an interactive tool to share\/run code","39dfecd6":"# Part I - Basic Buiding Blocks\n0. Orientation - How to run code in this notebook\n1. Printing values\n2. Using comments\n3. Variables, assignment, and re-assignment\n4. Basic data types\n5. Mathematical operations in Python\n6. Logical operations in Python\n7. Comparison operators","3c8fd8d9":"### 5. Mathematical Operations in Python\n- Computers are not intelligent. They do 2nd grade math as fast as possible.\n- Programming languages need to have the ability to perform mathematical operations.\n- Mathematical operators in Python evaluate and provide\n- Order of operations in Python follows PEMDAS:\n    - Parentheses\n    - Exponents\n    - Multiplication\n    - Division\n    - Addition\n    - Subtraction","1cfd8245":" > \"Programming languages allow us to formalize instructions and express logical rules, business rules, mathematics, processes, and automation instructions in one single notation.\" - Ryan Orsinger","c2ef87a6":"### Lists are ordered lists of values.\n- Created with square brackets\n- Lists can hold any value(s)\n- Lists can hold lists. \n- Think of a list as a column of values in a spreadsheet (1 dimensional list)\n- Think of a list of lists as an the entire spreadsheet  (2 dimensional list)\n- We can have lists of lists of lists, and that's like having a workbook of spreadsheets (3 dimensions)\n- There are other types of sequences and collections in Python, but lists are a solid start!","754a78a1":"### 1. Printing with the `print()` function","d7999c5e":"### Python Comparison Operators compare two values and return a True or False\n- `==` compares two values to see if they are the same value.\n- `!=` asks if the values on each side of the operator are **not** the same.]\n- `<` and `<=` are less than and less than or equal to\n- `>` and `>=` are greater than and greater than or equal to, respectively.","56fbcbad":"## To get better at Python faster, see [101 Exercises](https:\/\/www.kaggle.com\/ryanorsinger\/101-exercises\/)","23379aef":"### 7. Comparison Operations in everyday life\n- Comparison operators compare two values and give us a True or False answer\n- Some comparisons in the real worl:\n    - Are these two things equal?\n    - Are these two things not equal?\n    - Is A greather than B?\n    - Is A greater than or equal to B?\n    - Is A less than B?\n    - Is A less than or equal to B?","5a66841a":"### 6. Logical Operations in Python\n- Most common logical operations are:\n    - And\n    - Or\n    - Not\n- For a reminder, see [Conjunction Junction from School House Rock](https:\/\/www.youtube.com\/watch?v=4AyjKgz9tKg)","5ef294a2":"### 0. Orientation\n- Jupyter Notebooks, which Kaggle calls \"Kernels\", are a way to share and interactively run code from your browser.\n- Notebooks are made of cells\n- Each cell contains either code or text. \n- Code cells run the code, text cells render the text\n- To run a cell, click on the cell and click the Play button or do \"shift + Enter\" on your keyboard.\n- Python runs in all kinds of environments. These instructions are specific to Kaggle Kernels\/Jupyter Notebooks.","af88c56e":"###  Operators operate on values and produce values\n#### Let's look at some math operators in Python\n- `+` adds two numbers together\n- `-` subtracts the second number from the first\n- `*` multiplies both numbers and returns the product\n- `\/` divides the first number by the second\n- `%` provides the remainder of dividing the first number by the second.  (called the modulo operator)\n- `**` is the exponentiation operator. 2 raised to the 3rd power is `2**3`","6b5ab24e":"# Part II -  Control Structures, Lists, and Functions\n- With programming and analysis, we work with lots of lists of numbers.\n- The primary data type in Python for holding lists of numbers is called a list. It's like an array in other programming languages.","6b458861":"### 4. Data Types \n\nEach piece of data has two fundamental characteristics:\n- The value of the data itself.\n- Every value has a data type which explains what kind of data the value is.\n- For example, the integer 2 has the value of 2 and the data type is integer.\n- The first data-types to learn:\n    - None\n    - Boolean\n    - Integer\n    - Float\n    - String\n    - List\n    - Function","cf1e1af5":"### Functions \nThere are 2 kinds of functions in Python: built-in and user defined functions.\n\nSome built in functions:\n- type, print, len, sum, abs, range, list, min, max, round, etc...\n- For a complete list of build in functions, see https:\/\/docs.python.org\/3\/library\/functions.html\n"}}