{"cell_type":{"857466e8":"code","4d297f3c":"code","18211c51":"code","d31180a1":"markdown"},"source":{"857466e8":"from google.cloud import bigquery\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nclient = bigquery.Client()\ndataset_ref = client.dataset(\"google_analytics_sample\", project=\"bigquery-public-data\")\ndataset = client.get_dataset(dataset_ref)","4d297f3c":"def ecommerce_report(date_start, date_end):\n    #visits per day    \n    query = '''\n            SELECT date, count(1) as visits\n            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n            WHERE _TABLE_SUFFIX BETWEEN <start> AND <end>\n            GROUP BY date\n            ORDER by date\n            '''\n    query = query.replace('<start>', \"'\"+date_start+\"'\").replace('<end>', \"'\"+date_end+\"'\")\n    query_job = client.query(query) \n    \n    visits_day = query_job.to_dataframe().reset_index()\n    \n    #visits by device and region\n    query = '''\n            WITH table_aux AS\n                (SELECT device.deviceCategory as device\n                ,geoNetwork.subcontinent as subcontinent\n                ,count(1) as visits\n                FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n                WHERE _TABLE_SUFFIX BETWEEN <start> AND <end>\n                GROUP BY subcontinent, device\n                ORDER by subcontinent, device)\n            SELECT CASE \n                    WHEN subcontinent = '(not set)' THEN 'others'\n                    ELSE subcontinent\n                    END as region\n                    ,device\n                    ,visits\n            FROM table_aux\n            '''\n    query = query.replace('<start>', \"'\"+date_start+\"'\").replace('<end>', \"'\"+date_end+\"'\")\n    query_job = client.query(query) \n    \n    visits_device_region = query_job.to_dataframe().reset_index()\n    \n    visits_device = visits_device_region.groupby(\n        by = 'device').agg(\n        visits = pd.NamedAgg(column = 'visits', aggfunc = 'sum')).sort_values(\n        by = 'visits', ascending = False).reset_index()\n    \n    visits_region = visits_device_region.groupby(\n        by = 'region').agg(\n        visits = pd.NamedAgg(column = 'visits', aggfunc = 'sum')).sort_values(\n        by = 'visits', ascending = False).reset_index()\n    \n    #average statistics by day (with missing values)\n    query = '''\n            WITH avg_daily_nulls AS\n            (SELECT date\n            ,CASE \n                WHEN totals.timeonsite  is not null THEN totals.timeonsite \n                ELSE 0 \n                END as timeonsite_\n            ,CASE \n                WHEN totals.pageviews  is not null THEN totals.pageviews \n                ELSE 0 \n                END as pageviews_\n            ,CASE \n                WHEN totals.transactions  is not null THEN 1 \n                ELSE 0 \n                END as transactions_\n            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n            WHERE _TABLE_SUFFIX BETWEEN <start> AND <end>)\n            SELECT date\n            ,ROUND(AVG(timeonsite_)\/60,2) as avg_minutes_on_site\n            ,ROUND(AVG(pageviews_),2) as avg_page_views\n            ,ROUND(AVG(transactions_)*100,2) as percent_transactions_visit\n            FROM avg_daily_nulls\n            GROUP BY date\n            ORDER by date\n            '''\n    query = query.replace('<start>', \"'\"+date_start+\"'\").replace('<end>', \"'\"+date_end+\"'\")\n    query_job = client.query(query) \n    \n    visits_day_avg_nulls = query_job.to_dataframe().reset_index() \n    \n    #average statistics by day (without missing values)\n    query = '''\n            SELECT date\n            ,ROUND(AVG(totals.totalTransactionRevenue)\/1000000,2) as avg_total_transaction_revenue\n            FROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n            WHERE _TABLE_SUFFIX BETWEEN <start> AND <end>\n            GROUP BY date\n            ORDER by date\n            '''\n    query = query.replace('<start>', \"'\"+date_start+\"'\").replace('<end>', \"'\"+date_end+\"'\")\n    safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**8) #100M\n    query_job = client.query(query, job_config=safe_config) \n    \n    visits_day_avg_nonulls = query_job.to_dataframe().reset_index() \n    \n    #total visits plot\n    fig1 = plt.figure(constrained_layout=True, figsize = (10,10))\n    \n    gs = fig1.add_gridspec(2, 5)\n    f1_ax1 = fig1.add_subplot(gs[0, :])\n    f1_ax2 = fig1.add_subplot(gs[1, :-2])\n    f1_ax3 = fig1.add_subplot(gs[1, -2:])\n    \n    #ax1\n    data = visits_day\n    sns.lineplot(data = data, ax = f1_ax1, x=\"date\", y=\"visits\", marker = 'o', color = 'darkorange')\n    f1_ax1.set_title('Daily Visits')\n    f1_ax1.set_xlabel('Date')\n    f1_ax1.set_ylabel('Total Visits')\n    f1_ax1.grid(True)\n    l = f1_ax1.lines[0]\n    x1 = l.get_xydata()[:,0]\n    y1 = l.get_xydata()[:,1]\n    f1_ax1.fill_between(x1,y1, color = 'darkorange', alpha=0.5)\n    fill_min = 0.9*min(data['visits'])\n    fill_max = 1.1*max(data['visits'])\n    f1_ax1.set_ylim(fill_min,fill_max)\n    f1_ax1.set_xticklabels(labels = data['date'], rotation=90)\n    \n    #ax2\n    data = visits_region\n    sns.barplot(data = data, ax = f1_ax2, x = 'region', y='visits', color = 'green')\n    f1_ax2.set_title('Total Visits by Region')\n    f1_ax2.set_xlabel('Region')\n    f1_ax2.set_ylabel('Total Visits')\n    f1_ax2.grid(True)\n    f1_ax2.set_xticklabels(labels = data['region'], rotation=90)\n    \n    #ax3\n    data = visits_device\n    sns.barplot(data = data, ax = f1_ax3, x = 'device', y='visits', color = 'darkred')\n    f1_ax3.set_title('Total Visits by Device')\n    f1_ax3.set_xlabel('Device')\n    f1_ax3.set_ylabel('Total Visits')\n    f1_ax3.grid(True)\n    \n    fig1.suptitle('Total Visits. ' + date_start + ' to ' + date_end, fontsize = 14, fontweight = 'bold')\n    plt.show()\n    \n    #visit activity plot\n    fig2 = plt.figure(constrained_layout=True, figsize = (10,10))\n    \n    gs = fig2.add_gridspec(2, 1)\n    f2_ax1 = fig2.add_subplot(gs[0, :])\n    f2_ax2 = fig2.add_subplot(gs[1, :])\n    \n    #ax1\n    data = visits_day_avg_nulls\n    sns.lineplot(data = data, ax = f2_ax1, x=\"date\", y=\"avg_minutes_on_site\", marker = 'o', color = 'darkorange')\n    f2_ax1.set_title('Average Time per Visit')\n    f2_ax1.set_xlabel('Date')\n    f2_ax1.set_ylabel('Minutes')\n    f2_ax1.grid(True)\n    l = f2_ax1.lines[0]\n    x1 = l.get_xydata()[:,0]\n    y1 = l.get_xydata()[:,1]\n    f2_ax1.fill_between(x1,y1, color = 'darkorange', alpha=0.5)\n    fill_min = 0.9*min(data['avg_minutes_on_site'])\n    fill_max = 1.1*max(data['avg_minutes_on_site'])\n    f2_ax1.set_ylim(fill_min, fill_max)\n    f2_ax1.set_xticklabels(labels = data['date'], rotation=90)\n    \n    #ax2\n    sns.lineplot(data = data, ax = f2_ax2, x=\"date\", y=\"avg_page_views\", marker = 'o', color = 'green')\n    f2_ax2.set_title('Average Pages Seen for Visit')\n    f2_ax2.set_xlabel('Date')\n    f2_ax2.set_ylabel('Pages')\n    f2_ax2.grid(True)\n    l = f2_ax2.lines[0]\n    x1 = l.get_xydata()[:,0]\n    y1 = l.get_xydata()[:,1]\n    f2_ax2.fill_between(x1,y1, color = 'green', alpha=0.2)\n    fill_min = 0.9*min(data['avg_page_views'])\n    fill_max = 1.1*max(data['avg_page_views'])\n    f2_ax2.set_ylim(fill_min, fill_max)\n    f2_ax2.set_xticklabels(labels = data['date'], rotation=90)\n    \n    fig2.suptitle('Visit Activity. '  + date_start + ' to ' + date_end, fontsize = 14, fontweight = 'bold')\n    plt.show()\n    \n    #transactions plot\n    fig3 = plt.figure(constrained_layout=True, figsize = (10,10))\n    \n    gs = fig3.add_gridspec(2, 1)\n    f3_ax1 = fig3.add_subplot(gs[0, :])\n    f3_ax2 = fig3.add_subplot(gs[1, :])\n    \n    #ax1\n    data = visits_day_avg_nulls\n    sns.lineplot(data = data, ax = f3_ax1, x=\"date\", y=\"percent_transactions_visit\", marker = 'o', color = 'darkorange')\n    f3_ax1.set_title('% of Visits Incurring in Transactions')\n    f3_ax1.set_xlabel('Date')\n    f3_ax1.set_ylabel('%')\n    f3_ax1.grid(True)\n    l = f3_ax1.lines[0]\n    x1 = l.get_xydata()[:,0]\n    y1 = l.get_xydata()[:,1]\n    f3_ax1.fill_between(x1,y1, color = 'darkorange', alpha=0.5)\n    fill_min = 0.9*min(data['percent_transactions_visit'])\n    fill_max = 1.1*max(data['percent_transactions_visit'])\n    f3_ax1.set_ylim(fill_min, fill_max)\n    f3_ax1.set_xticklabels(labels = data['date'], rotation=90)\n    \n    #ax2\n    data = visits_day_avg_nonulls\n    sns.lineplot(data = data, ax = f3_ax2, x=\"date\", y=\"avg_total_transaction_revenue\", marker = 'o', color = 'green')\n    f3_ax2.set_title('Mean Total Amount ($) per Visit Incurring in Transactions')\n    f3_ax2.set_xlabel('Date')\n    f3_ax2.set_ylabel('Amount')\n    f3_ax2.grid(True)\n    l = f3_ax2.lines[0]\n    x1 = l.get_xydata()[:,0]\n    y1 = l.get_xydata()[:,1]\n    f3_ax2.fill_between(x1,y1, color = 'green', alpha=0.2)\n    fill_min = 0.9*min(data['avg_total_transaction_revenue'])\n    fill_max = 1.1*max(data['avg_total_transaction_revenue'])\n    f3_ax2.set_ylim(fill_min, fill_max)\n    f3_ax2.set_xticklabels(labels = data['date'], rotation=90)\n    \n    fig3.suptitle('Transactions Activity. '  + date_start + ' to ' + date_end, fontsize = 14, fontweight = 'bold')\n    plt.show()","18211c51":"ecommerce_report('20170401', '20170430')","d31180a1":"This notebook generates an automatized report for an ecommerce site during a user selected time period. This is done through a function calling SQL queries to the [sample Google Analytics dataset](https:\/\/www.kaggle.com\/bigquery\/google-analytics-sample), via the integration of BigQuery in python. The visualizations use the pandas dataframes produced by BigQuery processed by matplotlib and seaborn. The dataset timeframe goes from 2016-08-01 to 2017-08-01."}}