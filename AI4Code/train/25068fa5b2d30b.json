{"cell_type":{"b46804cc":"code","cc9c4754":"code","0323698e":"code","2ca465a9":"code","960fb828":"code","9a12b20d":"code","2b6e2540":"code","863ebc4e":"code","16db04ad":"code","0ec82cc2":"code","8c0068f4":"code","937e861d":"code","a9b2851a":"markdown","87fe7d8b":"markdown"},"source":{"b46804cc":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","cc9c4754":"#importing dataset\nds = pd.read_csv('..\/input\/social-netwok-ads\/social network ads.csv')\nds.head()","0323698e":"x = ds.iloc[:, :-1].values\ny = ds.iloc[:, -1].values","2ca465a9":"print(x)\nprint(y)","960fb828":"#spliting datasets into train and test set\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)","9a12b20d":"#performing feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","2b6e2540":"#training the dataset\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(x_train, y_train)\n","863ebc4e":"#predicting a new result\nprint(classifier.predict(sc.transform([[30, 87000]])))","16db04ad":"#predicting Test Set Results\ny_pred = classifier.predict(x_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","0ec82cc2":"#Confusion Matrix(Shows how many correct and incorrect predictions are done)\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","8c0068f4":"#Visualising the training set results\nfrom matplotlib.colors import ListedColormap\nx_set, y_set = sc.inverse_transform(x_train), y_train\nx1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(x1, x2, classifier.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(x1.min(), x1.max())\nplt.ylim(x2.min(), x2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","937e861d":"#Visualising Test set results\nfrom matplotlib.colors import ListedColormap\nx_set, y_set = sc.inverse_transform(x_test), y_test\nx1, x2 = np.meshgrid(np.arange(start = x_set[:, 0].min() - 10, stop = x_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = x_set[:, 1].min() - 1000, stop = x_set[:, 1].max() + 1000, step = 0.25))\nplt.contourf(x1,x2, classifier.predict(sc.transform(np.array([x1.ravel(), x2.ravel()]).T)).reshape(x1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\nplt.xlim(x1.min(), x1.max())\nplt.ylim(x2.min(), x2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(x_set[y_set == j, 0], x_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","a9b2851a":"**Logistic Regression** on social networks ads","87fe7d8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session"}}