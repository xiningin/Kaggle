{"cell_type":{"48016812":"code","4cd6160d":"code","679a894c":"code","d14ef3a3":"code","a1623b99":"code","98acecb4":"code","43a0059a":"code","5e8c889c":"code","9fdaf637":"code","40a7695f":"code","ac29c6c2":"code","a3be4c1f":"code","ba5fce81":"code","31d47a7e":"code","68d5e88d":"code","44fae188":"code","88534104":"code","476967d6":"code","e2af70f2":"code","64201400":"code","7365f767":"code","4ca2e5d5":"code","5f09d2df":"code","27958151":"code","1fed90a3":"code","fe796333":"code","23be9cdf":"code","706cc580":"code","efbec44f":"code","3ea06760":"code","1790af85":"code","9fb596ba":"code","8376030f":"markdown","737e2054":"markdown","1d23a952":"markdown","0acd7fcd":"markdown","3ff3252c":"markdown","c2f30e86":"markdown","43d99753":"markdown","3803fc11":"markdown","5c811bfa":"markdown","8ba6c1c3":"markdown","bef8b0a9":"markdown","e35ec483":"markdown","a581a6c6":"markdown","af7f512c":"markdown","5cfa45bf":"markdown","2dd0fe63":"markdown","a8bb5f98":"markdown","710fd3bf":"markdown","140511bd":"markdown","dfc7b181":"markdown"},"source":{"48016812":"#data processing\nimport pandas as pd\nimport numpy as np\n\n#data visualization\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\n#modelling\nfrom sklearn.linear_model import LinearRegression\n\n#other\nimport math\npd.options.mode.chained_assignment = None  # default='warn'\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4cd6160d":"#deaths data\ndata_TOTAL = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_filtered_en.csv')\ndata_LT20 = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_LT20_en.csv')\ndata_Y20_39 = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_Y20-39_en.csv')\ndata_Y40_59 = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_Y40-59_en.csv')\ndata_Y60_79 = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_Y60-79_en.csv')\ndata_YGE80 = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_YGE80_en.csv')\ndata_UNK = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_r_mwk_20_UNK_en.csv')\n\n#concating all csv files into one \ndata = pd.concat([data_TOTAL, data_LT20, data_Y20_39, data_Y40_59, data_Y60_79, data_YGE80, data_UNK])\n\n#population data\ndata_population = pd.read_csv('..\/input\/excess-mortality-covid19\/estat_demo_pjangroup_filtered_en.csv')","679a894c":"data.head()","d14ef3a3":"data.drop(['DATAFLOW', 'LAST UPDATE', 'freq', 'sex', 'unit', 'OBS_FLAG'], axis=1, inplace=True)\n\ndata['Year'] = data['TIME_PERIOD'].str[:4].astype(int)\ndata['Week'] = data['TIME_PERIOD'].str[-2:].astype(int)","a1623b99":"data_population.head()","98acecb4":"data_population.drop(['DATAFLOW', 'LAST UPDATE', 'freq', 'sex', 'unit', 'OBS_FLAG'], axis=1, inplace=True)","43a0059a":"#population age categories in data_population\ndata_population['age'].unique()","5e8c889c":"#population age categories in data\ndata['age'].unique()","9fdaf637":"#fitting age categories of population data into age categories of mortality data\ndata_population = data_population.replace(\n    {'Y_LT5': 'Y_LT20', 'Y5-9': 'Y_LT20', 'Y10-14': 'Y_LT20', 'Y15-19': 'Y_LT20',\n    'Y20-24': 'Y20-39', 'Y25-29': 'Y20-39', 'Y30-34': 'Y20-39', 'Y35-39': 'Y20-39',\n    'Y40-44': 'Y40-59', 'Y45-49': 'Y40-59', 'Y50-54': 'Y40-59', 'Y55-59': 'Y40-59',\n    'Y60-64': 'Y60-79', 'Y65-69': 'Y60-79', 'Y70-74': 'Y60-79', 'Y75-79': 'Y60-79',\n    'Y80-84': 'Y_GE80',' Y_GE85': 'Y_GE80'})\n\n#deleteing data of Y_GE75 and Y_GE85 categories as they are already contained in other categories\ndata_population = data_population[data_population['age'].str.contains('Y_GE75|Y_GE85')==False]\n\n#summing OBS_VALUES of data with same geo age and TIME_PERIOD values\ndata_population = data_population.groupby(['geo', 'age', 'TIME_PERIOD'],as_index=False).agg({'OBS_VALUE': 'sum'})","40a7695f":"#reindexing\ndata = data.reset_index()\ndata.drop('index', axis=1, inplace=True)\ndata","ac29c6c2":"#selecting data and creating two new dataframes containg only data for Germany\ndata_population_Germany = data_population[data_population['geo']=='DE']\ndata_Germany = data[data['geo']=='DE']","a3be4c1f":"#pointplot time_period\/number of deaths\nplt.subplots(figsize=(16,10))\nsns.pointplot(x='TIME_PERIOD', y='OBS_VALUE', hue='age', data=data_population_Germany[data_population_Germany['age']!='TOTAL'])\nplt.xticks(rotation=\"45\")\nplt.show()","ba5fce81":"#predict population size\nfor age in ['TOTAL', 'UNK', 'Y_LT20', 'Y20-39', 'Y40-59', 'Y60-79', 'Y_GE80']:\n    \n    df = data_population_Germany[(data_population_Germany['age'] == age) & (data_population_Germany['TIME_PERIOD'] > 2015)]\n    x = df['TIME_PERIOD'].to_numpy()\n    \n    #reshaping array x to fit linear regression model\n    x = x.reshape((len(x),1))\n    y = df['OBS_VALUE']\n    \n    reg = LinearRegression().fit(x, y)\n    \n    #writing the predicted values in the data_population_Germany data frame\n    data_population_Germany = data_population_Germany.append({'geo': 'DE', 'age': age, 'TIME_PERIOD': 2021, 'OBS_VALUE':reg.predict([[2021]])[0]}, ignore_index=True)\n    data_population_Germany = data_population_Germany.append({'geo': 'DE', 'age': age, 'TIME_PERIOD': 2022, 'OBS_VALUE':reg.predict([[2022]])[0]}, ignore_index=True)\n    ","31d47a7e":"data_Germany[data_Germany['age'] == 'UNK'].describe()","68d5e88d":"#droping unknown age category\ndata_Germany = data_Germany[data_Germany['age'].str.contains('UNK')==False]","44fae188":"data_Germany['Population_in_age_class'] = 0\ndata_Germany['Mortality_rate_per_million'] = 0\n\nfor i in range(len(data_Germany)):\n    age = data_Germany['age'].iloc[i]\n    year = data_Germany['Year'].iloc[i]\n    week = data_Germany['Week'].iloc[i]\n    \n    #only year 2020 has 53rd week. We will use the data from the 52nd week instead.\n    if week==53:\n        week=52\n    \n    pop_begin = data_population_Germany[data_population_Germany['age'] == age][data_population_Germany[data_population_Germany['age'] == age]['TIME_PERIOD'] == year]['OBS_VALUE'].iloc[0]\n    pop_end = data_population_Germany[data_population_Germany['age'] == age][data_population_Germany[data_population_Germany['age'] == age]['TIME_PERIOD'] == (year+1)]['OBS_VALUE'].iloc[0]\n   \n    #linear estimate od population for each week\n    data_Germany['Population_in_age_class'].iloc[i] = (pop_begin * week + pop_end * (52-week)) \/ 52\n\n    data_Germany['Mortality_rate_per_million'].iloc[i] = data_Germany['OBS_VALUE'].iloc[i] \/ data_Germany['Population_in_age_class'].iloc[i] * 1000000","88534104":"plt.subplots(figsize=(16,10))\nsns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=data_Germany)\nplt.xticks(data_Germany['TIME_PERIOD'][::130]) \nplt.xticks(rotation=\"45\")\nplt.ylim(0, 2000)\nplt.show()","476967d6":"plt.subplots(figsize=(16,10))\nsns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', data=data_Germany[data_Germany['age']=='TOTAL'])\nplt.xticks(data_Germany['TIME_PERIOD'][::130]) \nplt.xticks(rotation=\"45\")\nplt.tight_layout()\nplt.show()","e2af70f2":"data_Germany = data_Germany[data_Germany['TIME_PERIOD'] > '2004-W52']","64201400":"#spliting the dataframe into two, one before 2020 and one after.\ndata_Germany_2020 = data_Germany[data_Germany['TIME_PERIOD'] > '2019-W52']\ndata_Germany_before_2020 = data_Germany[data_Germany['TIME_PERIOD'] < '2019-W52']","7365f767":"plt.subplots(figsize=(16,10))\nsns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=data_Germany_2020)\nplt.xticks(data_Germany_2020['TIME_PERIOD'][::6]) \nplt.xticks(rotation=\"45\")\nplt.ylim(0, 2000)\nplt.tight_layout()\nplt.show()","4ca2e5d5":"#initializing new columns\ndata_Germany_2020['Expected_OBS'] = 0\ndata_Germany_2020['Expected_mortality_rates'] = 0\ndata_Germany_2020['SMR'] = 0\ndata_Germany_2020['Cumulative_OBS'] = 0\ndata_Germany_2020['Cumulative_expected_OBS'] = 0\ndata_Germany_2020['Cumulative_SMR'] = 0\ndata_Germany_2020['Cumulative_SMR_95_CI'] = 0\n\n#filling the new columns row by row\nfor i in range(len(data_Germany_2020)):\n    age = data_Germany_2020['age'].iloc[i]\n    year = data_Germany_2020['Year'].iloc[i]\n    week = data_Germany_2020['Week'].iloc[i]\n    \n    #again dismissing the week 53\n    if week==53:\n        week = 52\n\n    df = data_Germany_before_2020[(data_Germany_before_2020['age']==age) & (data_Germany_before_2020['Week']==week)]\n \n\n    #predicting deaths for 2020 and 2021 using linear regression model\n    x = df['Year'].to_numpy()\n    x = x.reshape((len(x),1))\n    y = df['OBS_VALUE']\n    \n    reg = LinearRegression().fit(x, y)\n    \n    e_obs = reg.predict([[year]])[0]\n  \n\n    #calculating expected deaths, mortality rates, SMR, cumulative SMR and confidence interval for SMR\n    data_Germany_2020['Expected_OBS'].iloc[i] = e_obs\n    \n    data_Germany_2020['Expected_mortality_rates'].iloc[i] = e_obs \/ data_Germany_2020['Population_in_age_class'].iloc[i] * 1000000\n    \n    data_Germany_2020['SMR'].iloc[i] = data_Germany_2020['Mortality_rate_per_million'].iloc[i] \/ data_Germany_2020['Expected_mortality_rates'].iloc[i]\n    \n    if week>1 or year==2021:\n        data_Germany_2020['Cumulative_OBS'].iloc[i] = data_Germany_2020['Cumulative_OBS'].iloc[i-1] + data_Germany_2020['OBS_VALUE'].iloc[i]\n        data_Germany_2020['Cumulative_expected_OBS'].iloc[i] = data_Germany_2020['Cumulative_expected_OBS'].iloc[i-1] + data_Germany_2020['Expected_OBS'].iloc[i]\n    else:\n        data_Germany_2020['Cumulative_OBS'].iloc[i] = data_Germany_2020['OBS_VALUE'].iloc[i]\n        data_Germany_2020['Cumulative_expected_OBS'].iloc[i] = data_Germany_2020['Expected_OBS'].iloc[i]\n\n    data_Germany_2020['Cumulative_SMR'].iloc[i] = data_Germany_2020['Cumulative_OBS'].iloc[i]\/data_Germany_2020['Cumulative_expected_OBS'].iloc[i] \n        \n    data_Germany_2020['Cumulative_SMR_95_CI'].iloc[i] = math.sqrt(data_Germany_2020['Cumulative_OBS'].iloc[i]) \/ data_Germany_2020['Cumulative_expected_OBS'].iloc[i] * 1.96","5f09d2df":"plt.subplots(figsize=(16,10))\n\n#expected mortality rates plot\nax1 = sns.lineplot(x='TIME_PERIOD', y='Expected_mortality_rates', hue='age', data=data_Germany_2020, palette='rocket')\nplt.ylim(0, 2000)\nplt.legend(loc = 'upper left')\nplt.xticks(data_Germany_2020['TIME_PERIOD'][::5]) \nplt.xticks(rotation=\"45\")\n\n#create a twin Axes sharing the x-axis\nax2 = ax1.twinx()\n\n#actual mortality rates plot\nax2 = sns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=data_Germany_2020, palette='ocean')\nplt.legend(loc = 'upper right')\nplt.xticks(data_Germany_2020['TIME_PERIOD'][::5])\nplt.ylim(0, 2000)\n\nplt.show()","27958151":"plt.subplots(figsize=(16,10))\n\nsns.lineplot(x='TIME_PERIOD', y='SMR', hue='age', data=data_Germany_2020[data_Germany_2020['age']=='TOTAL'])\nplt.xticks(data_Germany_2020['TIME_PERIOD'][::5]) \nplt.xticks(rotation=\"45\")\nplt.axhline(y=1, color='r', ls='--', alpha = 0.5)\nplt.show()","1fed90a3":"plt.subplots(figsize=(16,10))\n\nsns.lineplot(x='TIME_PERIOD', y='Cumulative_SMR', hue='age', data=data_Germany_2020)\nplt.xticks(data_Germany_2020['TIME_PERIOD'][::20]) \nplt.xticks(rotation=\"45\")\nplt.ylim(0.8, 1.3)\nplt.axhline(y=1, color='r', ls='--', alpha = 0.5)\nplt.show()","fe796333":"df_2020 = data_Germany_2020[data_Germany_2020['Week']==53][['age', 'Cumulative_SMR', 'Cumulative_SMR_95_CI']]\ndf_2020.set_index('age')","23be9cdf":"df_2021 = data_Germany_2020[(data_Germany_2020['Week']==37) & (data_Germany_2020['Year']==2021)][['age', 'Cumulative_SMR', 'Cumulative_SMR_95_CI']]\ndf_2021.set_index('age')","706cc580":"data['geo'].unique()","efbec44f":"#initializing lists, later used to create results data frame\ncountries = []\ntotal_SMR_2020 = []\ntotal_SMR_2020_CI = []\ntotal_SMR_2021 = []\ntotal_SMR_2021_CI = []","3ea06760":"#repeat all the calculations for each coutry\n\n\"\"\"\neach year in tuple is obtain by observing the appropriate plots, like we did for Germany\n#tuples: -country \n#        -year, data from this year onwards will be used to predict population the particular country for 2021\n#        -year-week, data from this point onwards will be used to predict mortality rates for paricular country\n\"\"\"\n\nfor country in [('AL', 2017, '2014-W52'),('BE', 2017, '2011-W52'),('BG', 2017, '2010-W52'),('CH', 2018, '2010-W52'),\n                ('CZ', 2017, '2010-W52'),('DK', 2017, '2012-W52'),('DE', 2017, '2010-W52'),('EE', 2017, '2010-W52'),\n                ('EL', 2017, '2010-W52'),('FR', 2017, '2010-W52'),('FI', 2017, '2014-W52'),\n                ('HU', 2017, '2010-W52'),('IS', 2018, '2014-W52'),('IT', 2018, '2012-W52'),('LT', 2018, '2010-W52'),\n                ('LV', 2017, '2010-W52'),('ME', 2017, '2010-W52'),('NL', 2017, '2010-W52'),('NO', 2017, '2014-W52'),\n                ('PL', 2017, '2010-W52'),('PT', 2018, '2010-W52'),('RO', 2017, '2010-W52'),('RS', 2017, '2010-W52'),\n                ('SI', 2018, '2010-W52'),('SK', 2017, '2010-W52')]:  \n    \n    #---------------------------------------------------------------------------------------------------------------------------\n    #                                 repeating the same procedure that we did for Germany\n    #---------------------------------------------------------------------------------------------------------------------------\n    \n    #data population for the particular country\n    df_p = data_population[data_population['geo']==country[0]]\n\n\n\n    \n    #--------------------------------------------predicting population for 2021--------------------------------------------------------------------\n   \n    for age in ['TOTAL', 'UNK', 'Y_LT20', 'Y20-39', 'Y40-59', 'Y60-79', 'Y_GE80']:\n\n        df = df_p[(df_p['age'] == age) & (df_p['TIME_PERIOD'] > country[1])]\n        x = df['TIME_PERIOD'].to_numpy()\n        x = x.reshape((len(x),1))\n        y = df['OBS_VALUE']\n\n        reg = LinearRegression().fit(x, y)\n\n        df_p = df_p.append({'geo': 'DE', 'age': age, 'TIME_PERIOD': 2021, 'OBS_VALUE':reg.predict([[2021]])[0]}, ignore_index=True)\n        df_p = df_p.append({'geo': 'DE', 'age': age, 'TIME_PERIOD': 2022, 'OBS_VALUE':reg.predict([[2022]])[0]}, ignore_index=True)\n     #---------------------------------------------------------------------------------------------------------------------------\n\n    #dropping the uknown population category\n    df = data[data['geo']==country[0]]\n    df = df[df['age'].str.contains('UNK')==False]\n\n\n    #------------------------------------------population and moratily calculations--------------------------------------------------------\n    \n    #initilizing lists\n    df['Population_in_age_class'] = 0\n    df['Mortality_rate_per_million'] = 0\n    \n    \n    for i in range(len(df)):\n        age = df['age'].iloc[i]\n        year = df['Year'].iloc[i]\n        week = df['Week'].iloc[i]\n\n        if week==53:\n            week=52\n\n        pop_begin = df_p[df_p['age'] == age][df_p[df_p['age'] == age]['TIME_PERIOD'] == year]['OBS_VALUE'].iloc[0]\n        pop_end = df_p[df_p['age'] == age][df_p[df_p['age'] == age]['TIME_PERIOD'] == (year+1)]['OBS_VALUE'].iloc[0]\n\n        df['Population_in_age_class'].iloc[i] = (pop_begin * week + pop_end * (52-week)) \/ 52\n\n        df['Mortality_rate_per_million'].iloc[i] = df['OBS_VALUE'].iloc[i] \/ df['Population_in_age_class'].iloc[i] * 1000000\n        \n    #----------------------------------------------------------------------------------------------------------------------------\n    \n    #dropping data before the particular time period\n    df = df[df['TIME_PERIOD'] > country[2]]\n    \n    #spliting the dataframe into two, one before 2020 and one after\n    df_2020 = df[df['TIME_PERIOD'] > '2019-W52']\n    df_before_2020 = df[df['TIME_PERIOD'] < '2019-W52']\n          \n\n    #-----------------------------------------------------SMR calculations------------------------------------------------------\n   \n    df_2020['Expected_OBS'] = 0\n    df_2020['Expected_mortality_rates'] = 0\n    df_2020['SMR'] = 0\n    df_2020['Cumulative_OBS'] = 0\n    df_2020['Cumulative_expected_OBS'] = 0\n    df_2020['Cumulative_SMR'] = 0\n    df_2020['Cumulative_SMR_95_CI'] = 0\n\n    for i in range(len(df_2020)):\n        age = df_2020['age'].iloc[i]\n        year = df_2020['Year'].iloc[i]\n        week = df_2020['Week'].iloc[i]\n\n        if week==53:\n            week = 52\n\n        dataframe = df_before_2020[(df_before_2020['age']==age) & (df_before_2020['Week']==week)]\n\n        x = dataframe['Year'].to_numpy()\n        x = x.reshape((len(x),1))\n        y = dataframe['OBS_VALUE']\n\n        reg = LinearRegression().fit(x, y)\n\n        e_obs = reg.predict([[year]])[0]\n\n        df_2020['Expected_OBS'].iloc[i] = e_obs\n\n        df_2020['Expected_mortality_rates'].iloc[i] = e_obs \/ df_2020['Population_in_age_class'].iloc[i] * 1000000\n\n        df_2020['SMR'].iloc[i] = df_2020['Mortality_rate_per_million'].iloc[i] \/ df_2020['Expected_mortality_rates'].iloc[i]\n\n        if week>1 or year==2021:\n            df_2020['Cumulative_OBS'].iloc[i] = df_2020['Cumulative_OBS'].iloc[i-1] + df_2020['OBS_VALUE'].iloc[i]\n            df_2020['Cumulative_expected_OBS'].iloc[i] = df_2020['Cumulative_expected_OBS'].iloc[i-1] + df_2020['Expected_OBS'].iloc[i]\n        else:\n            df_2020['Cumulative_OBS'].iloc[i] = df_2020['OBS_VALUE'].iloc[i]\n            df_2020['Cumulative_expected_OBS'].iloc[i] = df_2020['Expected_OBS'].iloc[i]\n\n        df_2020['Cumulative_SMR'].iloc[i] = df_2020['Cumulative_OBS'].iloc[i]\/df_2020['Cumulative_expected_OBS'].iloc[i] \n\n        df_2020['Cumulative_SMR_95_CI'].iloc[i] = math.sqrt(df_2020['Cumulative_OBS'].iloc[i]) \/ df_2020['Cumulative_expected_OBS'].iloc[i] * 1.96\n\n        \n        \n    #-----------------------------------------------------------plots--------------------------------------------------------------------------\n\n    #figure size\n    fig = plt.figure(figsize=(20,30)) \n    \n    #figure title\n    fig.suptitle(country[0], fontsize=60)\n        \n    #ploting country population\n    plt.subplot(4,2,1)\n    sns.pointplot(x='TIME_PERIOD', y='OBS_VALUE', hue='age', data=df_p[df_p['age']!='TOTAL'])\n    plt.xticks(rotation=\"45\")\n    plt.legend(loc='upper right')\n    \n    \n    plt.subplot(4,2,2)\n    sns.lineplot(x='TIME_PERIOD', y='OBS_VALUE', hue='age', data=df)\n    plt.xticks(df['TIME_PERIOD'][::200]) \n    plt.xticks(rotation=\"45\")\n    plt.legend(loc='upper right')\n    \n    \n    plt.subplot(4,2,3)\n    sns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=df)\n    plt.xticks(df['TIME_PERIOD'][::150]) \n    plt.xticks(rotation=\"45\")\n    plt.legend(loc='upper right')\n    \n   \n    plt.subplot(4,2,4)\n    sns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=df[df['age']=='TOTAL'])\n    plt.xticks(df['TIME_PERIOD'][::150]) \n    plt.xticks(rotation=\"45\")\n    plt.legend(loc='upper right')\n\n    \n    plt.subplot(4,2,5)\n    sns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=df_2020)\n    plt.xticks(df_2020['TIME_PERIOD'][::40]) \n    plt.xticks(rotation=\"45\")\n    plt.legend(loc='upper right')\n    \n    \n    plt.subplot(4,2,6)\n    ax1 = sns.lineplot(x='TIME_PERIOD', y='Expected_mortality_rates', hue='age', data=df_2020, palette='rocket')\n    plt.legend(loc = 'upper left')\n    plt.xticks(df_2020['TIME_PERIOD'][::40]) \n    plt.xticks(rotation=\"45\")\n    plt.ylim(0, 3500)\n\n    ax2 = ax1.twinx()\n    \n    ax2 = sns.lineplot(x='TIME_PERIOD', y='Mortality_rate_per_million', hue='age', data=df_2020, palette='ocean')\n    plt.legend(loc = 'upper right')\n    plt.xticks(df_2020['TIME_PERIOD'][::40]) \n    plt.xticks(rotation=\"45\")\n    plt.ylim(0, 3500)\n\n\n    plt.subplot(4,2,7)\n    sns.lineplot(x='TIME_PERIOD', y='SMR', hue='age', data=df_2020[df_2020['age']=='TOTAL'])\n    plt.xticks(df_2020['TIME_PERIOD'][::40]) \n    plt.xticks(rotation=\"45\")\n    plt.axhline(y=1, color='r', ls='--', alpha = 0.5)\n    plt.legend(loc='upper right')\n\n    \n    plt.subplot(4,2,8)\n    sns.lineplot(x='TIME_PERIOD', y='Cumulative_SMR', hue='age', data=df_2020)\n    plt.xticks(df_2020['TIME_PERIOD'][::20]) \n    plt.xticks(rotation=\"45\")\n    plt.ylim(0.5, 1.6)\n    plt.axhline(y=1, color='r', ls='--', alpha = 0.5)\n    plt.legend(loc='upper right')\n    \n    \n    plt.tight_layout()\n    plt.show()\n\n    #------------------------------------------------------results-------------------------------------------------------------\n    \n    data_frame_2020 = df_2020[df_2020['Week']==53][['age', 'Cumulative_SMR', 'Cumulative_SMR_95_CI']]\n    data_frame_2020.set_index('age', inplace=True)\n    print(data_frame_2020)\n\n    last_week = df_2020.iloc[len(df_2020)-1]['Week']\n    data_frame_2021 = df_2020[(df_2020['Week']==last_week) & (df_2020['Year']==2021)][['age', 'Cumulative_SMR', 'Cumulative_SMR_95_CI']]\n    data_frame_2021.set_index('age', inplace=True)\n    print(data_frame_2021)\n    print('\\n\\n\\n\\n\\n\\n')\n    \n    #---------------------------------------------------appending the results--------------------------------------------------\n\n    countries.append(country[0])\n    total_SMR_2020.append(data_frame_2020.iloc[0,0])\n    total_SMR_2020_CI.append(data_frame_2020.iloc[0,1])\n    total_SMR_2021.append(data_frame_2021.iloc[0,0])\n    total_SMR_2021_CI.append(data_frame_2021.iloc[0,1])","1790af85":"#creating a data frame\ndata_frame = pd.DataFrame(list(zip(countries, total_SMR_2020, total_SMR_2020_CI, total_SMR_2021, total_SMR_2021_CI)), \n                 columns =['Country', 'SMR_2020', '2020_95_CI', 'SMR_2021', '2021_95_CI'])\n\n#reindexing\ndata_frame.set_index('Country', inplace=True)\n\n#painting columns: red if smr above 1.1\n#                  yellow if smr in (1.05, 1.1)\n#                  blue if bellow 1.05\ndata_frame.style.apply(lambda x: [\"background:#F1F9FE\" if v < 1.05 else \"background:#FEFEF1\" if v > 1.05 and v< 1.1 else \"background:#FEF1F1\" if v > 1.1  else \"\" for v in x], axis = 1,\n    subset=['SMR_2020','SMR_2021'])","9fb596ba":"fig = plt.figure(figsize=(14,5)) \nsns.barplot(x = data_frame.index, y='SMR_2021', data=data_frame, palette='Blues')\nplt.axhline(y=1, color='r', ls='--', alpha = 0.5)\nplt.show()","8376030f":"We will drop the columns that we don't need. We notice that we have more age categories than in mortality data. Thus, we need to merge some age categories in population data","737e2054":"#### Importing data","1d23a952":"The population data for 2021 is not available so we will predict it using linear regression. We need data for population size on 1st January 2021 and 2022 as well. We will use this data to estimate population size of each week using linear model. We notice that the population change isn't linear, however if we look at the time period from 2016 to 2020 the population size is changing linearly in all age groups. Therefore, we will use data from 2016 to 2020 to fit our linear regression model.","0acd7fcd":"#### Population data","3ff3252c":"We will drop the columns that don't contain usefull information for this study. Also, we will extract year and week features from TIME_PERIOD feature.","c2f30e86":"Mortality rate\/time period lineplot for each age group","43d99753":"#### Mortality data","3803fc11":"Below is a plot of mortality rate from 2020 onwads. We notice a big spike in December 2020 and January 2021. That was the biggest corona outbreak in Germany(https:\/\/www.worldometers.info\/coronavirus\/country\/germany\/). The second biggest corona outbreak was in April 2021, however it does not show on this graph. As expected, the GE80 age group is the most affected by the outbreak.","5c811bfa":"We notice a steep decrease of deaths from 2000 to 2005 after which it becomes more stable, thus we will drop the data before 2005.","8ba6c1c3":"We have unknown age category. Since we don't have any deaths in unknown category we can delete it.","bef8b0a9":"Mortality rate\/time period lineplot for total population","e35ec483":"## Introduction\nExcess mortality is a indicator of health consequences of COVID-19. We compared the overall mortality in 2020 and 2021 with the overall mortality in 2010 to 2019 in Europe. \nUsing death and population data from the EUROSTAT database, we estimated Standardized Mortality Ratios(SMR) and cumulative SMR with 95% confidence intervals(CI) for 2020 and 2021. Population data for 2021 was not available at the time, so we used linear regression to predict it.\n\nFirst, we will do the procedure in detail for Germany and then for the other european countries as well.","a581a6c6":"# Covid-19 Excess Mortality","af7f512c":"###  SMR and Cumulative SMR","5cfa45bf":"# Other European Countries","2dd0fe63":"## Data Processing","a8bb5f98":"# Germany","710fd3bf":"Now we will calculate mortality rates for each week and each age group. First, we calculate population in the particular age class and then mortality rate per million.","140511bd":"#### importing libraries","dfc7b181":"Finally, we have the SMR values with their confidence intervals for each age group."}}