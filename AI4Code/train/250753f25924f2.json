{"cell_type":{"26871c33":"code","e2583275":"code","2409f8a4":"code","1d2ab529":"code","915b0681":"code","4fb6405e":"code","992da2ee":"code","0e9fb6f7":"code","fe07c5f7":"code","6f18edd4":"code","9b58a448":"code","7f0d7b77":"code","d0970215":"code","b1170a5e":"code","6f799646":"code","3ab8fdb6":"code","bb095adb":"code","c7ada947":"code","ca08475f":"code","30dd1a79":"code","5494b663":"code","fe938ae6":"code","1655ba66":"code","2c914ba4":"code","ca5f1f01":"code","a29948d0":"code","58a5d5ce":"code","538f046e":"code","2fa3c363":"code","9dde2aad":"code","eaca8d84":"code","d251c4f0":"code","c4459af0":"code","0ba53469":"code","e5401a0c":"code","c50348d3":"code","91e168c8":"code","234012e9":"code","bdb5f226":"code","2dcc29ed":"code","9f42cf5b":"code","21bf4fc3":"code","b34dfb31":"code","3e2fcc07":"code","27e35730":"code","d8c0d989":"code","2281ccfc":"code","0fd51c68":"code","d141b3f6":"code","8df5321f":"code","c3460674":"code","aa624cda":"code","41c11d4e":"code","c1ff84d5":"code","d95b4d03":"code","59d7d2e6":"code","3e27d461":"code","57971a0e":"code","2405ffd3":"code","a6809d8a":"code","48d28f00":"code","7b50615d":"code","a8f9f8e9":"code","382e79ff":"code","0878ac3b":"code","b3d516e2":"code","4c6e8157":"code","43caf71c":"code","2305b74b":"code","0d9b712d":"code","aef48aa1":"code","3fcca674":"code","9ecdb679":"code","7bf6938b":"code","0a830f19":"code","361e670d":"code","388c040a":"code","319bb628":"code","01bcf2e0":"code","c191617b":"code","22ac1f80":"code","15d78ea2":"code","d4fe542b":"code","6cf3eb79":"code","d24d0653":"code","ecdb0348":"code","719c42fd":"code","8f7c2f4f":"code","3f5c3dc0":"code","491fca87":"markdown","cc44a948":"markdown","c8a7aca4":"markdown","06c456b8":"markdown","6938c0e8":"markdown","82722259":"markdown","c7b1ce3c":"markdown","cdc7c6ef":"markdown","5559437f":"markdown","4d51fb01":"markdown","77f30644":"markdown","a6682fe1":"markdown","d05d9e44":"markdown","534ea8d5":"markdown","048a63ba":"markdown","d32d5acd":"markdown","aaa0d4fc":"markdown","e97a25e6":"markdown","c1ba9d6c":"markdown","7a1f4502":"markdown","763c1a6b":"markdown","43c10797":"markdown","827795f8":"markdown","28d4a3ff":"markdown","ceb7c21a":"markdown","cf742d74":"markdown","81093365":"markdown","a84c27f0":"markdown","89d88355":"markdown","25ebf806":"markdown","d5e0ffa5":"markdown","8278b308":"markdown","14fa0bec":"markdown","99bd111c":"markdown","d536817d":"markdown","460c220a":"markdown","a47ee457":"markdown","a05597fd":"markdown","3f2e3cf4":"markdown","bba7e1bc":"markdown","0cfdf920":"markdown","46ac892d":"markdown","6b31f3b1":"markdown","9e8db44d":"markdown","3fbbb64e":"markdown","9d79ded1":"markdown","9f7a9197":"markdown","6e7cdd3b":"markdown","bfd72c18":"markdown","565627f6":"markdown","67f81029":"markdown","fecc0e18":"markdown","d05ba464":"markdown","d97aa4ee":"markdown","a4f67e07":"markdown","bf3950ac":"markdown","c9e07414":"markdown","cdba5142":"markdown","533cfa21":"markdown","75791639":"markdown","4316acea":"markdown","2bf53a32":"markdown","314aa2ee":"markdown"},"source":{"26871c33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e2583275":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2409f8a4":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_train['Source'] = 'Train'\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test['Source'] = 'Test'\ndf = pd.concat([df_train,df_test],0)\ndf.head()","1d2ab529":"print (df.shape)","915b0681":"df.info()","4fb6405e":"mr = (df.isna().sum()\/len(df))*100\nmr.sort_values(ascending=False)","992da2ee":"df['Cabin'].fillna('NotAvailable',inplace=True)","0e9fb6f7":"df[\"Cabin_Status\"] = df['Cabin'].apply(lambda x : 0 if x=='NotAvailable' else 1)","fe07c5f7":"df.head()","6f18edd4":"sns.barplot(df['Cabin_Status'] , df['Survived'])\nplt.show()","9b58a448":"sns.barplot(df['Embarked'], df['Survived'] , hue=df['Sex'])\nplt.show()","7f0d7b77":"df.drop(['Cabin','Ticket','Embarked'],1,inplace=True)","d0970215":"df.head()","b1170a5e":"df['Married']= np.NAN\ndf['Married'][df['Name'].str.contains('Mr.|Mrs.')] = 1\ndf['Married'][~(df['Name'].str.contains('Mr.|Mrs.'))] = 0\ndf['Married']=df['Married'].astype(int)","6f799646":"df.drop('Name',1,inplace=True)","3ab8fdb6":"sns.distplot(df['Age'].dropna())","bb095adb":"df['Age'].describe()","c7ada947":"sns.barplot(df['Married'], df['Age'], hue=df['Pclass'] )\nplt.show()","ca08475f":"def impute_age(cols):\n    married = cols[0]\n    pclass = cols[1]\n    if married==0 and pclass==1:\n        return 32\n    elif married==0 and pclass==2:\n        return 20\n    elif married==0 and pclass==3:\n        return 15\n    elif married==1 and pclass==1:\n        return 42\n    elif married==1 and pclass==2:\n        return 32\n    elif married==1 and pclass==3:\n        return 30","30dd1a79":"df['Age'][df['Age'].isna()] = df[['Married','Pclass']].apply(impute_age,axis=1)","5494b663":"df['Senior_Citizen'] = df['Age'].apply(lambda x : 1 if x>60 else 0)","fe938ae6":"sns.barplot(df['Senior_Citizen'] , df['Survived'])","1655ba66":"mr = (df.isna().sum()\/len(df))*100\nmr.sort_values(ascending=False)","2c914ba4":"df.head()","ca5f1f01":"df['Family_members'] = df['SibSp']  + df['Parch']","a29948d0":"df['Sex'] = df['Sex'].map({'male':1 , 'female':0})","58a5d5ce":"df.head()","538f046e":"df['Pclass'] = df['Pclass'].astype('object')","2fa3c363":"dummies = pd.get_dummies(df[['Pclass']],drop_first=True)\ndummies.head(2)","9dde2aad":"df.drop(['Pclass'],1,inplace=True)","eaca8d84":"df = pd.concat([df,dummies],1)","d251c4f0":"df.head()","c4459af0":"from sklearn.preprocessing import StandardScaler\n\nscale = StandardScaler()\ndf[['Age','Fare']] = scale.fit_transform(df[['Age','Fare']])","0ba53469":"df.head()","e5401a0c":"df_train = df[df['Source']=='Train']\ndf_test = df[df['Source']=='Test']","c50348d3":"df_train.drop(['PassengerId' , 'Source'],1,inplace=True)\ndf_test.drop('Source',1,inplace=True)","91e168c8":"df_train['Survived'] = df_train['Survived'].astype(int)","234012e9":"X = df_train.drop('Survived',1)\ny = df_train['Survived']","bdb5f226":"from sklearn.model_selection import train_test_split\n\nX_train , X_val , y_train , y_val = train_test_split(X,y,test_size=0.30,random_state=123)","2dcc29ed":"from sklearn.decomposition import PCA\nimport numpy as np","9f42cf5b":"pca = PCA()\npca = pca.fit(X_train)","21bf4fc3":"plt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.grid(True)\nplt.show()","b34dfb31":"pca_final = PCA(6)\nX_train_pca = pca_final.fit_transform(X_train)\nX_val_pca = pca_final.transform(X_val)","3e2fcc07":"from sklearn.linear_model import LogisticRegression","27e35730":"lr = LogisticRegression()\nlr = lr.fit(X_train , y_train)","d8c0d989":"y_pred_lr = lr.predict(X_val)","2281ccfc":"from sklearn.metrics import classification_report , confusion_matrix\n\nfrom sklearn.preprocessing import binarize","0fd51c68":"y_pred_prob_yes = lr.predict_proba(X_val)","d141b3f6":"y_pred_lr = binarize(y_pred_prob_yes , 5\/10)[:,1]","8df5321f":"confusion_matrix(y_val,y_pred_lr)","c3460674":"print(classification_report(y_val,y_pred_lr))","aa624cda":"from collections import Counter","41c11d4e":"Counter(y_train)","c1ff84d5":"from sklearn.neighbors import KNeighborsClassifier","d95b4d03":"knn = KNeighborsClassifier(3)\nknn.fit(X_train,y_train)\ny_pred_knn = knn.predict(X_val)\nconfusion_matrix(y_val,y_pred_knn)\n","59d7d2e6":"print(classification_report(y_val , y_pred_knn))","3e27d461":"from sklearn.ensemble import RandomForestClassifier","57971a0e":"rf = RandomForestClassifier()","2405ffd3":"from sklearn.model_selection import GridSearchCV","a6809d8a":"param_grid = {\n    \n    'n_estimators':[10,20,30],\n    'criterion': ['gini','entropy'],\n    'max_depth': [10,15,20,25],\n    'min_samples_split' : [5,10,15],\n    'min_samples_leaf': [2,5,7],\n    'random_state': [42,135,777],\n    'class_weight': ['balanced' ,'balanced_subsample']\n}","48d28f00":"rf_tuned = GridSearchCV(estimator=rf , param_grid=param_grid , n_jobs=-1)","7b50615d":"rf_tuned.fit(X_train , y_train)","a8f9f8e9":"rf_tuned.best_params_","382e79ff":"rff = RandomForestClassifier(**rf_tuned.best_params_)\nrff.fit(X_train , y_train)\ny_pred_rff = rff.predict(X_val)\nprint(classification_report(y_val,y_pred_rff))","0878ac3b":"confusion_matrix(y_val , y_pred_rff)","b3d516e2":"rf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred_rf = rf.predict(X_val)\nconfusion_matrix(y_val,y_pred_rf)","4c6e8157":"print(classification_report(y_val , y_pred_rf))","43caf71c":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import binarize","2305b74b":"ada_boost = GradientBoostingClassifier()\nada_boost.fit(X_train , y_train)","0d9b712d":"y_pred_ada = ada_boost.predict(X_val)\ny_pred_ada_prob = ada_boost.predict_proba(X_val)","aef48aa1":"from sklearn.preprocessing import binarize\nfor i in range(5,9):\n    cm2=0\n    y_pred_prob_yes=ada_boost.predict_proba(X_val)\n    y_pred2=binarize(y_pred_prob_yes,i\/10)[:,1]\n    cm2=confusion_matrix(y_val,y_pred2)\n    print ('With',i\/10,'threshold the Confusion Matrix is ','\\n',cm2,'\\n',\n            'with',cm2[0,0]+cm2[1,1],'correct predictions and',cm2[1,0],'Type II errors( False Negatives)','\\n\\n',\n          'Sensitivity: ',cm2[1,1]\/(float(cm2[1,1]+cm2[1,0])),'Specificity: ',cm2[0,0]\/(float(cm2[0,0]+cm2[0,1])),'\\n\\n\\n')\n    ","3fcca674":"y_pred_ada_prob = binarize(y_pred_ada_prob , 7\/10)[:,1]","9ecdb679":"confusion_matrix(y_val , y_pred_ada_prob)","7bf6938b":"print(classification_report(y_val,y_pred_ada_prob))","0a830f19":"df_test.head(2)","361e670d":"X_test = df_test.drop('Survived',1)","388c040a":"pass_id = X_test['PassengerId']\nX_test.drop('PassengerId',1,inplace=True)","319bb628":"X_train.shape","01bcf2e0":"X_test.shape","c191617b":"X_test['Fare'][X_test['Fare'].isna()] = 5","22ac1f80":"X_train.head(2)","15d78ea2":"X_test.head(2)","d4fe542b":"X_test[['Age','Fare']] = scale.transform(X_test[['Age','Fare']])","6cf3eb79":"y_pred_final = ada_boost.predict_log_proba(X_test)\ny_pred_final = binarize(y_pred_final , 7\/10)[:,1]","d24d0653":"y_pred_sub_df = pd.DataFrame(y_pred_final , columns=['Survived'])\ny_pred_sub_df['Survived'] = y_pred_sub_df['Survived'].astype(int)\ny_pred_sub_df.head(2)","ecdb0348":"pass_id_df = pd.DataFrame(pass_id , columns=['PassengerId'])\npass_id_df.head(2)","719c42fd":"submission_df = pd.concat([pass_id_df , y_pred_sub_df],1)\nsubmission_df.head()","8f7c2f4f":"submission_df.shape","3f5c3dc0":"submission_df.to_csv('Titanic_Submissions_GB.csv' , index=False)","491fca87":"The following code is for Kaggle submission","cc44a948":"<h4> Titanic Data - EDA and Model Building","c8a7aca4":"<h5> We can see that people without Cabin have a very low rate of Survival compared to people with Cabin","06c456b8":"---","6938c0e8":"---","82722259":"<h5> Missing Ratio ","c7b1ce3c":"<h5> Standardize","cdc7c6ef":"---","5559437f":"<h5>Senior Citizen or Not","4d51fb01":"<h5> Classification Accuracy for Logistic Regression : 0.82","77f30644":"----","a6682fe1":"<h5> Classification Accuracy for Tuned Random Forest : 0.83","d05d9e44":"We can combine Parch and Sibsp to get the number of Family Members the person has ","534ea8d5":"<h5> The Married status and Pclass are important in determining the age of the person ,\n    we will use this to fill  the missing values in the Age column","048a63ba":"![](http:\/\/)We can see that 6 features can explain almost 98% of the variation ","d32d5acd":"---","aaa0d4fc":"DESCRIPTIVE ABSTRACT:\n\nThe titanic data describes the survival status of individual passengers on the\nTitanic.\n\nThe titanic data does not contain information for the crew, but it does contain\nactual and estimated ages for almost 80% of the passengers.\n\nVARIABLE DESCRIPTIONS:\n\nPclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\nsurvival - Survival (0 = No; 1 = Yes)\nname - Name\nsex - Sex\nage - Age\nsibsp - Number of Siblings\/Spouses Aboard\nparch - Number of Parents\/Children Aboard\nticket - Ticket Number\nfare - Passenger Fare (British pound)\ncabin - Cabin\nembarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)","e97a25e6":"<h5>Age","c1ba9d6c":"----","7a1f4502":"<h5> Cabin ","763c1a6b":"---","43c10797":"---","827795f8":"<h5>Train and Validation Split","28d4a3ff":"Create a column 'Cabin_Status' : 0 where Cabin is NotAvailable and 1 otherwise","ceb7c21a":"---","cf742d74":"<h5>Classification Accuracy for KNN : 0.81","81093365":"Import Data","a84c27f0":"**********************","89d88355":"---","25ebf806":"---","d5e0ffa5":"---","8278b308":"Married status is 1 if name has 'Mr. or Mrs' and 0 otherwise","14fa0bec":"<h5>Married","99bd111c":"---","d536817d":"<h5>Random Forest","460c220a":"---","a47ee457":"<h5>Family Members","a05597fd":"---","3f2e3cf4":"<h5>Logistic Regression","bba7e1bc":"Number of rows and columns","0cfdf920":"<h5> KNN","46ac892d":"Dropping Name ","6b31f3b1":"Hyperparameter Tuning","9e8db44d":"Dropping Columns","3fbbb64e":"<h4>Gradient Boosting","9d79ded1":"<h5>Seperate Train and Test ","9f7a9197":"---","6e7cdd3b":"<h5> We can see Senior Citizens have lower survival rate then others ","bfd72c18":"---","565627f6":"If age is greater than 60 classify them as Senior Citizen","67f81029":"Encoding Sex & PClass column","fecc0e18":"---","d05ba464":"<h5> The column 'Embarked' is not influencing the Survival rate as Sex and Pclass explain the same thing|","d97aa4ee":"<h5> Updated Missing Ratio","a4f67e07":"---","bf3950ac":"---","c9e07414":"<h5>PCA","cdba5142":"---","533cfa21":"---","75791639":"<h5> Classification Accuracy for Gradient Boosting : 0.86","4316acea":"Import Libraries","2bf53a32":"Submission Predictions","314aa2ee":"<h5>Classification Accuracy for Random Forest : 0.82"}}