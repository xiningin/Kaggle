{"cell_type":{"fcbd25b0":"code","9aaa7344":"code","742f1da1":"code","c94ce846":"code","698501b8":"code","87957ac6":"code","ed99b423":"code","a95e1b82":"code","80cd55eb":"code","68adb511":"code","238bfa36":"code","8818e0f0":"code","92ab73ce":"code","fb8c7ec6":"code","7a383cfb":"markdown"},"source":{"fcbd25b0":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","9aaa7344":"train = pd.read_csv(\"..\/input\/google-quest-challenge\/train.csv\")\ntest = pd.read_csv(\"..\/input\/google-quest-challenge\/test.csv\")","742f1da1":"target_cols = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible', 'answer_relevance',\n       'answer_satisfaction', 'answer_type_instructions',\n       'answer_type_procedure', 'answer_type_reason_explanation',\n       'answer_well_written']","c94ce846":"train.head()","698501b8":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD","87957ac6":"tfidf = TfidfVectorizer(ngram_range=(1, 3))\ntsvd = TruncatedSVD(n_components = 50)\nquestion_title = tfidf.fit_transform(train[\"question_title\"].values)\nquestion_title_test = tfidf.transform(test[\"question_title\"].values)\nquestion_title = tsvd.fit_transform(question_title)\nquestion_title_test = tsvd.transform(question_title_test)\n\nquestion_body = tfidf.fit_transform(train[\"question_body\"].values)\nquestion_body_test = tfidf.transform(test[\"question_body\"].values)\nquestion_body = tsvd.fit_transform(question_body)\nquestion_body_test = tsvd.transform(question_body_test)\n\nanswer = tfidf.fit_transform(train[\"answer\"].values)\nanswer_test = tfidf.transform(test[\"answer\"].values)\nanswer = tsvd.fit_transform(answer)\nanswer_test = tsvd.transform(answer_test)","ed99b423":"train[\"len_user_name\"]= train.question_user_name.apply(lambda x : len(x.split()))\ntest[\"len_user_name\"]= test.question_user_name.apply(lambda x : len(x.split()))\n\n#train[\"len_user_name\"]= train.question_user_name.apply(lambda x : 1 if len(x)<5 else 0)\n#test[\"len_user_name\"]= test.question_user_name.apply(lambda x : 1 if len(x)<5 else 0)","a95e1b82":"#train[\"cat_host\"]= train[\"category\"]+train[\"host\"]+str(train[\"len_user_name\"])\n#test[\"cat_host\"]= test[\"category\"]+test[\"host\"]+str(test[\"len_user_name\"])\n\n\ncategory_means_map = train.groupby(\"len_user_name\")[target_cols].mean().T.to_dict()\ncategory_te = train[\"len_user_name\"].map(category_means_map).apply(pd.Series)\ncategory_te_test = test[\"len_user_name\"].map(category_means_map).apply(pd.Series)","80cd55eb":"train_features = np.concatenate([question_title, question_body, answer#, category_te.values\n                                ], axis = 1)\ntest_features = np.concatenate([question_title_test, question_body_test, answer_test#, category_te_test.values\n                               ], axis = 1)","68adb511":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom sklearn.model_selection import KFold\nfrom keras.callbacks.callbacks import EarlyStopping\nfrom scipy.stats import spearmanr\n\nnum_folds = 10\nfold_scores = []\nkf = KFold(n_splits = num_folds, shuffle = True, random_state = 42)\ntest_preds = np.zeros((len(test_features), len(target_cols)))\nfor train_index, val_index in kf.split(train_features):\n    train_X = train_features[train_index, :]\n    train_y = train[target_cols].iloc[train_index]\n    \n    val_X = train_features[val_index, :]\n    val_y = train[target_cols].iloc[val_index]\n    \n    model = Sequential([\n        Dense(128, input_shape=(train_features.shape[1],)),\n        Activation('relu'),\n        Dense(64),\n        Activation('relu'),\n        Dense(len(target_cols)),\n        Activation('sigmoid'),\n    ])\n    \n    es = EarlyStopping(monitor='val_loss', min_delta=0, patience=3, verbose=0, mode='auto', baseline=None, restore_best_weights=True)\n    model.compile(optimizer='adam',\n                  loss='binary_crossentropy')\n    \n    model.fit(train_X, train_y, epochs = 50, validation_data=(val_X, val_y), callbacks = [es])\n    preds = model.predict(val_X)\n    overall_score = 0\n    for col_index, col in enumerate(target_cols):\n        overall_score += spearmanr(preds[:, col_index], val_y[col].values).correlation\/len(target_cols)\n        print(col, spearmanr(preds[:, col_index], val_y[col].values).correlation)\n    fold_scores.append(overall_score)\n\n    test_preds += model.predict(test_features)\/num_folds\n    \nprint(fold_scores)","238bfa36":"sub = pd.read_csv(\"..\/input\/google-quest-challenge\/sample_submission.csv\")","8818e0f0":"sub.shape","92ab73ce":"for col_index, col in enumerate(target_cols):\n    sub[col] = test_preds[:, col_index]","fb8c7ec6":"sub.to_csv(\"submission.csv\", index = False)","7a383cfb":"# Original kernel created by Ryan Chesler (ryches)"}}