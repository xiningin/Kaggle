{"cell_type":{"b4fe4f00":"code","67022dd3":"code","dcb58329":"code","d2b8af30":"code","b383c3cb":"code","ca335a0d":"code","2360782f":"code","a1af6bdb":"code","9b236d71":"code","283ae529":"code","0d445d49":"markdown","009b2f31":"markdown","971f3032":"markdown","b0910e77":"markdown","4201ad90":"markdown","3336a824":"markdown","8e4a786e":"markdown","1c420ea9":"markdown","f2fa98b6":"markdown","59acf172":"markdown","54717bfb":"markdown","5e22b24f":"markdown","5a438d41":"markdown","0d282271":"markdown","dbd0918d":"markdown","9a6c642e":"markdown","e9219b7f":"markdown","2543e813":"markdown","7a3e72fb":"markdown","1f288e31":"markdown","60838584":"markdown","00181720":"markdown","41558f6e":"markdown","ff958922":"markdown","b1d6eab7":"markdown","09a1d4af":"markdown","746a143e":"markdown","881d9e2d":"markdown","1816a7f9":"markdown","625220c8":"markdown","6614d3c5":"markdown","c9492647":"markdown","85470aeb":"markdown"},"source":{"b4fe4f00":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6GoalHeaderImage.png\")","67022dd3":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6Eqn6_1.png\")","dcb58329":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6Eqn6_2.png\")\n","d2b8af30":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6Eqn6_3.png\")","b383c3cb":"#function to undertake Sharpe Ratio maximization subject to \n#basic constraints of the portfolio\n\n#dependencies\nimport numpy as np\nfrom scipy import optimize \n\ndef MaximizeSharpeRatioOptmzn(MeanReturns, CovarReturns, RiskFreeRate, PortfolioSize):\n    \n    # define maximization of Sharpe Ratio using principle of duality\n    def  f(x, MeanReturns, CovarReturns, RiskFreeRate, PortfolioSize):\n        funcDenomr = np.sqrt(np.matmul(np.matmul(x, CovarReturns), x.T) )\n        funcNumer = np.matmul(np.array(MeanReturns),x.T)-RiskFreeRate\n        func = -(funcNumer \/ funcDenomr)\n        return func\n\n    #define equality constraint representing fully invested portfolio\n    def constraintEq(x):\n        A=np.ones(x.shape)\n        b=1\n        constraintVal = np.matmul(A,x.T)-b \n        return constraintVal\n    \n    \n    #define bounds and other parameters\n    xinit=np.repeat(0.33, PortfolioSize)\n    cons = ({'type': 'eq', 'fun':constraintEq})\n    lb = 0\n    ub = 1\n    bnds = tuple([(lb,ub) for x in xinit])\n    \n    #invoke minimize solver\n    opt = optimize.minimize (f, x0 = xinit, args = (MeanReturns, CovarReturns,\\\n                             RiskFreeRate, PortfolioSize), method = 'SLSQP',  \\\n                             bounds = bnds, constraints = cons, tol = 10**-3)\n    \n    return opt\n    ","ca335a0d":"# function computes asset returns \ndef StockReturnsComputing(StockPrice, Rows, Columns):\n    \n    import numpy as np\n    \n    StockReturn = np.zeros([Rows-1, Columns])\n    for j in range(Columns):        # j: Assets\n        for i in range(Rows-1):     # i: Daily Prices\n            StockReturn[i,j]=((StockPrice[i+1, j]-StockPrice[i,j])\/StockPrice[i,j])* 100\n\n    return StockReturn","2360782f":"#obtain mean and variance-covariance matrix of returns for k-portfolio 1\n\n#Dependencies\nimport numpy as np\nimport pandas as pd\n\n\n\n#input k portfolio 1 dataset comprising 15 stocks\nStockFileName = '\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/DJIA_Apr112014_Apr112019_kpf1.csv'\nRows = 1259  #excluding header\nColumns = 15  #excluding date\n\n#read stock prices \ndf = pd.read_csv(StockFileName,  nrows= Rows)\n\n#extract asset labels\nassetLabels = df.columns[1:Columns+1].tolist()\nprint('Asset labels of k-portfolio 1: \\n', assetLabels)\n\n#read asset prices data\nStockData = df.iloc[0:, 1:]\n\n#compute asset returns\narStockPrices = np.asarray(StockData)\n[Rows, Cols]=arStockPrices.shape\narReturns = StockReturnsComputing(arStockPrices, Rows, Cols)\n\n#set precision for printing results\nnp.set_printoptions(precision=3, suppress = True)\n\n#compute mean returns and variance covariance matrix of returns\nmeanReturns = np.mean(arReturns, axis = 0)\ncovReturns = np.cov(arReturns, rowvar=False)\nprint('\\nMean Returns:\\n', meanReturns)\nprint('\\nVariance-Covariance Matrix of Returns:\\n', covReturns)\n","a1af6bdb":"from IPython.display import Image\nImage( \"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6Eqn6_4.png\")\n\n","9b236d71":"#obtain maximal Sharpe Ratio for k-portfolio 1 of Dow stocks\n\n#set portfolio size\nportfolioSize = Columns\n\n#set risk free asset rate of return\nRf=3  # April 2019 average risk  free rate of return in USA approx 3%\nannRiskFreeRate = Rf\/100\n\n#compute daily risk free rate in percentage\nr0 = (np.power((1 + annRiskFreeRate),  (1.0 \/ 360.0)) - 1.0) * 100 \nprint('\\nRisk free rate (daily %): ', end=\"\")\nprint (\"{0:.3f}\".format(r0)) \n\n#initialization\nxOptimal =[]\nminRiskPoint = []\nexpPortfolioReturnPoint =[]\nmaxSharpeRatio = 0\n\n#compute maximal Sharpe Ratio and optimal weights\nresult = MaximizeSharpeRatioOptmzn(meanReturns, covReturns, r0, portfolioSize)\nxOptimal.append(result.x)\n\n    \n#compute risk returns and max Sharpe Ratio of the optimal portfolio   \nxOptimalArray = np.array(xOptimal)\nRisk = np.matmul((np.matmul(xOptimalArray,covReturns)), np.transpose(xOptimalArray))\nexpReturn = np.matmul(np.array(meanReturns),xOptimalArray.T)\nannRisk =   np.sqrt(Risk*251) \nannRet = 251*np.array(expReturn) \nmaxSharpeRatio = (annRet-Rf)\/annRisk \n\n#set precision for printing results\nnp.set_printoptions(precision=3, suppress = True)\n\n\n#display results\nprint('Maximal Sharpe Ratio: ', maxSharpeRatio, '\\nAnnualized Risk (%):  ', \\\n      annRisk, '\\nAnnualized Expected Portfolio Return(%):  ', annRet)\nprint('\\nOptimal weights (%):\\n',  xOptimalArray.T*100 )","283ae529":"from IPython.display import Image\nImage(\"\/kaggle\/input\/sharpe-ratio-based-portfolio-optimization\/Lesson6ExitTailImage.png\")","0d445d49":"# Sharpe Ratio based Portfolio Optimization ","009b2f31":"<h5 align=\"right\">................................(6.4)<\/h5>","971f3032":"The Python code for the function **MaximizeSharpeRatioOptimization** which defines the objective function  and the basic constraints represented by (6.2),  is shown below: ","b0910e77":"<h5 align=\"right\">..............................(6.1)<\/h5>","4201ad90":"##  Lesson 6\n","3336a824":"## *Prologue*","8e4a786e":"## Next...","1c420ea9":"To solve the Sharpe Ratio maximization model represented by (6.2), we make use of the **minimize** library function from **scipy.optimize** package of Python. However, since the original objective function insists on maximization as opposed to minimization demanded by the **minimize** solver, the **principal of  duality** borrowed from Optimization Theory is employed to undertake the transformation. According to the principle,  \n","f2fa98b6":"* **Python for Portfolio Optimization: The Ascent!**\n\nFirst working lessons to ascend the hilly terrain of Portfolio Optimization in seven strides (Lessons), beginning with the fundamentals (Lesson 1) and climbing slope after slope (Lessons 2-6), to reach the first peak of constrained portfolio optimization models (Lesson 7), amongst a range of peaks waiting beyond!\n\n* **Lesson 1 Fundamentals of Risk and Return of a Portfolio**    \n\n* **Lesson 2 Some Glimpses of Financial Data Wrangling**   \n\n* **Lesson 3 Heuristic Portfolio Selection**  \n\n* **Lesson 4 Traditional Methods for Portfolio Construction**  \n\n* **Lesson 5 Mean-Variance Optimization of Portfolios**","59acf172":"The Sharpe Ratio optimization requires the computation of risk and return of the portfolio. The asset returns computing function **StockReturnsComputing**, is reproduced here for the reader's convenience. ","54717bfb":"The numerator of the objective function denotes the excess returns of the investment over that of a risk free asset $R_f$ and the denominator the risk of the investment. The objective is to maximize the Sharpe Ratio. The basic constraints indicate that the investor wishes to have a fully invested portfolio. ","5e22b24f":"<h3 align=\"left\">References<\/h3>   \n \n[SHA 66]  Sharpe, William F. Mutual Fund Performance,  *Journal of Business*, January 1966, pp. 119-138.   \n\n[PAI 18]   Vijayalakshmi Pai G. A., Metaheuristics for Portfolio Optimization- An Introduction using MATLAB, Wiley-ISTE, 2018. https:\/\/www.mathworks.com\/academia\/books\/metaheuristics-for-portfolio-optimization-pai.html    \n \n **GitHub Repository**    \n\nPythonFinance-PortfolioOptimization https:\/\/github.com\/PaiViji\n","5a438d41":"Despite the wide use of Sharpe Ratios to compute risk adjusted returns, it is not without its disadvantages. Thus, if the expected returns do not follow a normal distribution or if the portfolios possess non-linear risks, to list a few of the instances, Sharpe Ratios may not deliver  results. Therefore, alternative methodologies such as **Sortino Ratio** and **Treynor Ratio** have emerged as  contenders to Sharpe Ratios. ","0d282271":"## 6.4  Case Study","dbd0918d":"Higher the Sharpe Ratio, more is the excess returns over that of holding a risk free investment, relative to the increased volatility that the investment is exposed to. A Sharpe Ratio of 0, needless to say,  only denotes the investment to be risk-free or one that does not yield any excess return. In practice, while a Sharpe ratio of 1 marks the investment to be acceptable or good for investors, a value less than 1 grades the investment as  sub-optimal,  and values greater than 1 and moving towards 2 or 3, grades the investment as  highly superior. ","9a6c642e":"This blog  is an abridged adaptation of concepts discussed in Chapter 1 and Chapter 3 of [PAI 18] to Dow Jones dataset (DJIA index: April, 2014- April, 2019) and implemented in Python. Readers (read \"worker bees\"),  seeking more information may refer to the corresponding chapters in the  book.","e9219b7f":"The following Python code computes the maximal Sharpe Ratio for  $k$-portfolio 1.","2543e813":"## 6.1  Introduction","7a3e72fb":"The output shows that the maximal Sharpe Ratio attainable for $k$-portfolio 1 is 1.26 which is good,  going by practical standards. The annual expected portfolio return is 21.584% against an annualized risk of 14.749%. To achieve this, the optimal capital allocations on the assets of $k$-portfolio 1 are as follows:  \n\n['AAPL': 13. 694%] , ['BA': 17.744%], ['CSCO': 12.151%],  ['HD': 19.058%], ['JPM': 1.151%],  ['MCD': 13.654%], ['UNH': 22.547%].  \n  \nNo investments need  be made in the rest of the assets of $k$-portfolio 1 since the optimal weights arrived at for these assets are 0.  \nHowever, if the investor desires to invest in all the assets in the $k$-portfolio 1, with the weights distributed across all the assets in the portfolio, all that the investor needs to do is to  redefine the bounds constraint of (6.2) as, $0\\lt W_i\\lt 1$ and run the **scipy**  solver over the optimization model.","1f288e31":"### Companion Reading  ","60838584":"To keep the discussion simple for now, let us suppose that  the investor decides to enforce only **basic constraints** on the portfolio. (See Sec. 5.2 of **Lesson 5 Mean Variance Optimization of Portfolios** to know about basic constraints).  \n  \nThe mathematical model for the Sharpe Ratio based Portfolio Optimization is given by, ","00181720":"## 6.2 Maximizing Sharpe Ratio","41558f6e":"<h5 align=\"right\">..................................(6.2)<\/h5>","ff958922":"where $r_x$ is the average rate of return on the investment $x$, $R_f$,  the best available **risk free rate of return** and $\\sigma$ the standard deviation of $r_x$, which denotes the risk on the investment. ","b1d6eab7":"Let P be a portfolio comprising assets $A_1, A_2, ...A_N$, with $\\mu_1, \\mu_2, ...\\mu_N$ as the asset returns and $W_1, W_2, ...W_N$ as the weights. \n ","09a1d4af":"The annual average risk free rate of return in USA during April 2019 was 3%. The daily risk free rate is computed  as   \n","746a143e":"## 6.3 Solving the Sharpe Ratio Optimization Model","881d9e2d":"The portfolio return $r$ determined by a weighted summation of its individual asset returns is given by, $\\sum\\left({W_i.\\mu_i}\\right)$ and the risk is given by $\\sqrt{\\sum\\sum {W_i.W_j.\\sigma_{ij}} } $. (See **Lesson 1 Fundamentals of Risk and Return of a Portfolio** to know about risk and return of a portfolio).  ","1816a7f9":"**Lesson 7: Constrained Portfolio Optimization**  \n\n(Goal: How can an investor know how much to invest in a portfolio of the investor's choice, which besides the objectives of maximizing return and minimizing risk, is constrained by the investor's preference for certain asset classes or assets, or imposition of capital budgets over selective assets in the portfolio?)   \n\nKaggle Kernel: Constrained Portfolio Optimization","625220c8":"Having understood the significance of the Sharpe Ratio, let us suppose an investor wishes to make an investment in  assets in such a way that the Sharpe Ratio of the portfolio would be the best possible or the maximum, that can be ensured for the investment.  \n","6614d3c5":"<h5 align=\"right\">..............................(6.3)<\/h5>","c9492647":"**Sharpe Ratio**, developed by Nobel Laureate William F Sharpe [SHA 66], is a measure of calculating risk adjusted return. It serves to help investors know about the returns on their investments relative to the risks they hold. The Sharpe Ratio is defined as","85470aeb":" Let us suppose that an investor decides to invest in a $k$-portfolio ($k$-portfolio 1) comprising the  following  Dow stocks. ($k$ portfolio 1, is  detailed and listed in **Lesson 3 Heuristic Portfolio Selection**)  \n\n**\ud835\udc58-portfolio 1**:  \n\n{Coca-Cola (KO), United Health (UNH), Walt Disney (DIS), IBM (IBM), Cisco (CSCO), JPMorgan Chase (JPM), Goldman Sachs (GS), Walgreens Boots Alliance (WBA), Apple (AAPL), Home Depot (HD), American Express (AXP), McDonald's (MCD), Merck (MRK), Boeing (BA), Caterpillar (CAT)}       \n\nThe investor desires to explore the optimal portfolio set that would yield the maximal Sharpe Ratio.  The objective is to find out  the optimal weights that will ensure maximal Sharpe Ratio for the portfolio.\n\nThe following Python code reads the dataset concerned, computes the stock returns using the Python function **StockReturnsComputing** and obtains the mean returns and the variance-covariance matrix of returns. \n"}}