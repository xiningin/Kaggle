{"cell_type":{"e8abf565":"code","dca34cb9":"code","eba1f1a6":"code","09d44b6d":"code","59459927":"code","f5fc1c36":"code","28d16aa6":"code","e26e7c50":"code","55b51dca":"code","dc2b8009":"code","ef67a6ba":"code","e1c6c7e0":"code","b1f73f6e":"code","4e522a2a":"code","d5e8b1d1":"code","4dc54ee4":"code","c1ee9b0e":"code","c27c370e":"code","8edf904a":"code","7b45b25e":"code","1c914744":"code","05a19e58":"code","1f5ff4df":"code","d224cb7d":"code","74ce075c":"code","3179e754":"code","7523a315":"code","3906975f":"code","9f03d523":"code","d0ad7e45":"code","73c726bd":"code","6ad8984c":"code","e125306b":"code","05977f2b":"markdown","c1e5c315":"markdown","4b1571a0":"markdown","31785b3a":"markdown","42a1b461":"markdown","ca209dd0":"markdown","e235b8ed":"markdown","28cbd601":"markdown"},"source":{"e8abf565":"import random\nimport numpy as np \nnp.random.seed(1234)\nrandom.seed(1234)","dca34cb9":"# \u4f7f\u7528\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u95a2\u6570\uff09\u3092\u5b9a\u7fa9\n# \u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306e\u751f\u6210\u7528\nfrom numpy.random import *\n\n# \u30b0\u30e9\u30d5\u306e\u63cf\u753b\u7528\nimport matplotlib.pyplot as plt\n\n# SciPy \u5e73\u57470\u3001\u5206\u65631\u306b\u6b63\u898f\u5316\uff08\u6a19\u6e96\u5316\uff09\u95a2\u6570\nimport scipy.stats\n\n# \u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570\u3092import\nfrom scipy.special import expit\n\n# \u305d\u306e\u4ed6\nimport pandas as pd\n\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm","eba1f1a6":"def causal_inference(df,cas_v,tar_v,cov_v,method):\n    #tar_v\u306f2\u5024\u5909\u6570\u3092\u4eee\u5b9a\n    if method == 'reg':\n        causal_reg(df,cas_v,tar_v,cov_v)\n    elif method == 'tlearner':\n        tlearner(df,cas_v,tar_v,cov_v)\n    elif method == 'xlearner':\n        xlearner(df,cas_v,tar_v,cov_v)\n    elif method == 'slearner':\n        slearner(df,cas_v,tar_v,cov_v)\n    elif method == 'slearner_c':\n        s_learner_classifier(df,cas_v,tar_v,cov_v)\n    elif method == 'tlearner_c':\n        t_learner_classifier(df,cas_v,tar_v,cov_v)","09d44b6d":"def t_learner(df,cas_v,tar_v,cov_v):\n    print('----t_learner----')\n    df_0 = df[df[cas_v] == 0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\n    df_1 = df[df[cas_v] == 1] # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n    # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n    reg_0 = RandomForestRegressor(max_depth=3)\n    reg_0.fit(df_0[cov_v], df_0[tar_v])\n    # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n    reg_1 = RandomForestRegressor(max_depth=3)\n    reg_1.fit(df_1[cov_v], df_1[tar_v])\n    \n    # ATE\u3092\u6c42\u3081\u308b \u96c6\u56e3\u30ec\u30d9\u30eb\u306e\u56e0\u679c\u52b9\u679c\n    mu_0 = reg_0.predict(df[cov_v])\n    mu_1 = reg_1.predict(df[cov_v])\n    ATE = (mu_1-mu_0).mean()\n    print(\"ATE\uff1a\", ATE)\n    \n    # \u51e6\u7f6e\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATT\u3068\u3001\u5bfe\u7167\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATU\n    ATT = df_1[tar_v] - reg_0.predict(df_1[cov_v])\n    ATU = reg_1.predict(df_0[cov_v]) - df_0[tar_v]\n\n    print(\"ATT\uff1a\", ATT.mean())\n    print(\"ATU\uff1a\", ATU.mean())\n\ndef s_learner(df,cas_v,tar_v,cov_v):\n    print('----s_learner----')\n    reg = RandomForestRegressor(max_depth=4)\n    X = df.loc[:, cov_v+list(cas_v)]\n    reg.fit(X, df[tar_v])\n\n    # \u51e6\u7f6e\u304c0\u30681\u306e\u72b6\u614b\u3092\u4f5c\u6210\u3059\u308b\n    X_0 = X.copy()\n    X_0[cas_v] = 0.0\n\n    X_1 = X.copy()\n    X_1[cas_v] = 1.0\n\n    # ATE\u306e\u8a08\u7b97\n    ATE = (reg.predict(X_1)-reg.predict(X_0)).mean()\n    print(\"ATE\uff1a\", ATE)\n    \n    #Z=0\u306e\u30b5\u30f3\u30d7\u30eb\u306bZ=1\u3092\u4eee\u5b9a\u3057\u3066\u4e88\u6e2c\u5024Y\u3092\u51fa\u3057\u3001\u771f\u5024Y\u3068\u306e\u5dee\u5206\u3092\u3068\u308a\u3001\u5e73\u5747\u3092\u51fa\u3059\n    ATU = (reg.predict(X_1[X[cas_v]==0])- df[df[cas_v] == 0][tar_v]).mean()\n    print(\"ATU\uff1a\", ATU)\n    \n    \ndef x_learner(df,cas_v,tar_v,cov_v):\n    print('----x_learner----')\n    # \u96c6\u56e3\u30922\u3064\u306b\u5206\u3051\u308b\n    df_0 = df[df[cas_v] == 0.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\n    df_1 = df[df[cas_v] == 1.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n\n    # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n    M0 = RandomForestRegressor(max_depth=3)\n    M0.fit(df_0[cov_v], df_0[tar_v])\n\n    # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n    M1 = RandomForestRegressor(max_depth=3)\n    M1.fit(df_1[cov_v], df_1[tar_v])\n    \n    # \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\n    tau_0 = reg_1.predict(df_0[cov_v]) - df_0[tar_v] #ATT\n    tau_1 = df_1[tar_v] - reg_0.predict(df_1[cov_v])\n\n    # ATT\u3068ATU\u3092\u6c42\u3081\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\n    M2 = RandomForestRegressor(max_depth=3)\n    M2.fit(df_0[cov_v], tau_0)\n\n    M3 = RandomForestRegressor(max_depth=3)\n    M3.fit(df_1[cov_v], tau_1)\n    \n    # \u8aac\u660e\u5909\u6570\n    X = df[cov_v]\n    # \u88ab\u8aac\u660e\u5909\u6570\uff08\u76ee\u7684\u5909\u6570\uff09\n    Z = df[cas_v]\n    # \u56de\u5e30\u306e\u5b9f\u65bd\n    g_x = LogisticRegression().fit(X, Z)\n    g_x_val = g_x.predict_proba(X)\n\n    # \u305d\u308c\u305e\u308c\u306e\u30e2\u30c7\u30eb\u3067\u5168\u30c7\u30fc\u30bf\u306e\u52b9\u679c\u3092\u4e88\u6e2c\u3057\u3001\u50be\u5411\u30b9\u30b3\u30a2\u3067\u8abf\u6574\n    tau = g_x_val[:, 1]*M2.predict(df[cov_v]) + g_x_val[:, 0]*M3.predict(df[cov_v])\n    \n    #\u5171\u5909\u91cf\u306e\u500b\u4eba\u306e\u51e6\u7f6e\u52b9\u679c\u3092\u8fd4\u3059\n    return tau\n","59459927":"def s_learner_classifier(df,cas_v,tar_v,cov_v):\n    print('----s_learner_classifier----')\n    reg = RandomForestClassifier(max_depth=4)\n    X = df.loc[:, cov_v+list(cas_v)]\n    reg.fit(X, df[tar_v])\n\n    # \u51e6\u7f6e\u304c0\u30681\u306e\u72b6\u614b\u3092\u4f5c\u6210\u3059\u308b\n    X_0 = X.copy()\n    X_0[cas_v] = 0.0\n\n    X_1 = X.copy()\n    X_1[cas_v] = 1.0\n\n    # ATE\u306e\u8a08\u7b97\n    ATE = (reg.predict_proba(X_1)-reg.predict_proba(X_0)).mean()\n    print(\"ATE\uff1a\", ATE)\n    ATU = (reg.predict_proba(X_1[X[cas_v]==0])[:,1]- df[df[cas_v] == 0][tar_v]).mean()\n    print(\"ATU\uff1a\", ATU)\n    \ndef t_learner_classifier(df,cas_v,tar_v,cov_v):\n    print('----t_learner_classifier----')\n    df_0 = df[df[cas_v] == 0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\n    df_1 = df[df[cas_v] == 1] # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n    # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n    reg_0 = RandomForestClassifier(max_depth=3)\n    reg_0.fit(df_0[cov_v], df_0[tar_v])\n    # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n    reg_1 = RandomForestClassifier(max_depth=3)\n    reg_1.fit(df_1[cov_v], df_1[tar_v])\n    \n    # ATE\u3092\u6c42\u3081\u308b \u96c6\u56e3\u30ec\u30d9\u30eb\u306e\u56e0\u679c\u52b9\u679c\n    mu_0 = reg_0.predict_proba(df[cov_v])[:,1]\n    mu_1 = reg_1.predict_proba(df[cov_v])[:,1]\n    ATE = (mu_1-mu_0).mean()\n    print(\"ATE\uff1a\", ATE)\n    \n    # \u51e6\u7f6e\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATT\u3068\u3001\u5bfe\u7167\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATU\n    ATT = df_1[tar_v] - reg_0.predict_proba(df_1[cov_v])[:,1]\n    ATU = reg_1.predict_proba(df_0[cov_v])[:,1] - df_0[tar_v]\n\n    print(\"ATT\uff1a\", ATT.mean())\n    print(\"ATU\uff1a\", ATU.mean())\n    #return df_0,df_1,mu_0,mu_1","f5fc1c36":"df_0,df_1,mu_0,mu_1 = t_learner_classifier(df,'Z','bin_Y',['x'])","28d16aa6":"df[df['Z']==1].bin_Y.mean() - df[df['Z']==0].bin_Y.mean()","e26e7c50":"t_learner(df,'Z','Y',['x'])\n\ns_learner(df,'Z','Y',['x'])\ns_learner_classifier(df,'Z','bin_Y',['x'])\n","55b51dca":"# \u30c7\u30fc\u30bf\u6570\nnum_data = 500\n\n# \u90e8\u4e0b\u80b2\u6210\u3078\u306e\u71b1\u5fc3\u3055\nx = np.random.uniform(low=-1, high=1, size=num_data)  # -1\u304b\u30891\u306e\u4e00\u69d8\u4e71\u6570\n\n# \u4e0a\u53f8\u304c\u300c\u4e0a\u53f8\u5411\u3051\uff1a\u90e8\u4e0b\u3068\u306e\u30ad\u30e3\u30ea\u30a2\u9762\u8ac7\u306e\u30dd\u30a4\u30f3\u30c8\u7814\u4fee\u300d\u306b\u53c2\u52a0\u3057\u305f\u304b\u3069\u3046\u304b\ne_z = randn(num_data)  # \u30ce\u30a4\u30ba\u306e\u751f\u6210\nz_prob = expit(-1*-5.0*x+5*e_z)\nZ = np.array([])\n\n# \u4e0a\u53f8\u304c\u300c\u4e0a\u53f8\u5411\u3051\uff1a\u90e8\u4e0b\u3068\u306e\u30ad\u30e3\u30ea\u30a2\u9762\u8ac7\u306e\u30dd\u30a4\u30f3\u30c8\u7814\u4fee\u300d\u306b\u53c2\u52a0\u3057\u305f\u304b\u3069\u3046\u304b\nfor i in range(num_data):\n    Z_i = np.random.choice(2, size=1, p=[1-z_prob[i], z_prob[i]])[0]\n    Z = np.append(Z, Z_i)\n\n# \u4ecb\u5165\u52b9\u679c\u306e\u975e\u7dda\u5f62\u6027\uff1a\u90e8\u4e0b\u80b2\u6210\u306e\u71b1\u5fc3\u3055x\u306e\u5024\u306b\u5fdc\u3058\u3066\u6bb5\u968e\u7684\u306b\u5909\u5316\nt = np.zeros(num_data)\nfor i in range(num_data):\n    if x[i] < 0:\n        t[i] = 0.5\n    elif x[i] >= 0 and x[i] < 0.5:\n        t[i] = 0.7\n    elif x[i] >= 0.5:\n        t[i] = 1.0\n\ne_y = randn(num_data)\nY = 2.0 + t*Z + 0.3*x + 0.1*e_y \n\n\n\n# x:\u4e0a\u53f8\u306e\u90e8\u4e0b\u80b2\u6210\u306e\u71b1\u5fc3\u3055\u3001Z\uff1a\u4e0a\u53f8\u304c\u7814\u4fee\u3092\u53d7\u8b1b\u3001Y\uff1a\u90e8\u4e0b\u306e\u9762\u8ac7\u306e\u6e80\u8db3\u5ea6\u3001\n#t\uff1a\u4ecb\u5165\u52b9\u679c\u3001x\u306e\u5024\u306b\u5fdc\u3058\u3066\u6bb5\u968e\u7684\u306b\u5909\u5316\u3001\u71b1\u5fc3\u5ea6\u304c\u9ad8\u3044\u4eba\u307b\u3069\u3000\u53d7\u8b1b\u52b9\u679c\u304c\u9ad8\u3044\n#Y = 2.0 + t*Z + 0.3*x + 0.1*e_y \ndf = pd.DataFrame({'x': x,\n                   'Z': Z,\n                   't': t,\n                   'Y': Y,\n                   })\n\ndisplay(df.shape)\ndisplay(df.head())  # \u5148\u982d\u3092\u8868\u793a\n\nplt.scatter(x, Y)\n\ndef logistic(x, a, k, x0):\n    y = k \/ (1 + np.exp(-a * k * (x - x0)))\n    return y\n\ndf['prob_Y'] = df['Y'].apply(logistic,a=1,k=1,x0=df['Y'].mean())\ndf['bin_Y'] = np.where(df['prob_Y']>0.5,1,0)","dc2b8009":"# \u4ecb\u5165\u52b9\u679c\u3092\u56f3\u3067\u78ba\u8a8d\nplt.scatter(x, t, label=\"treatment-effect\")","ef67a6ba":"df","e1c6c7e0":"df","b1f73f6e":"def t_learner(df,cas_v,tar_v,cov_v):\n    df_0 = df[df[cas_v] == 0.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\n    df_1 = df[df[cas_v] == 1.0] # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n    \n    # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n    reg_0 = RandomForestRegressor(max_depth=3)\n    reg_0.fit(df_0[[\"x\"]], df_0[[\"bin_Y\"]])\n    # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n    reg_1 = RandomForestRegressor(max_depth=3)\n    reg_1.fit(df_1[[\"x\"]], df_1[[\"bin_Y\"]])\n    \n    # ATE\u3092\u6c42\u3081\u308b \u96c6\u56e3\u30ec\u30d9\u30eb\u306e\u56e0\u679c\u52b9\u679c\n    mu_0 = reg_0.predict(df[['x']])\n    mu_1 = reg_1.predict(df[[\"x\"]])\n    ATE = (mu_1-mu_0).mean()\n    print(\"ATE\uff1a\", ATE)\n    \n    # \u51e6\u7f6e\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATT\u3068\u3001\u5bfe\u7167\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATU\n    ATT = df_1[\"bin_Y\"] - reg_0.predict(df_1[[\"x\"]])\n    ATU = reg_1.predict(df_0[[\"x\"]]) - df_0[\"bin_Y\"]\n\n    print(\"ATT\uff1a\", ATT.mean())\n    print(\"ATU\uff1a\", ATU.mean())\n    ","4e522a2a":"# \u96c6\u56e3\u30922\u3064\u306b\u5206\u3051\u308b\ndf_0 = df[df['Z'] == 0.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\ndf_1 = df[df['Z'] == 1.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3","d5e8b1d1":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\n# \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n#reg_0 = RandomForestClassifier(max_depth=3)\nreg_0 = RandomForestRegressor(max_depth=3)\nreg_0.fit(df_0[[\"x\"]], df_0[[\"Y\"]])\n\n# \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n#reg_1 = RandomForestClassifier(max_depth=3)\nreg_1 = RandomForestRegressor(max_depth=3)\nreg_1.fit(df_1[[\"x\"]], df_1[[\"bin_Y\"]])\n","4dc54ee4":"# ATE\u3092\u6c42\u3081\u308b \u96c6\u56e3\u30ec\u30d9\u30eb\u306e\u56e0\u679c\u52b9\u679c\nmu_0 = reg_0.predict(df[['x']])\nmu_1 = reg_1.predict(df[[\"x\"]])\n\nATE = (mu_1-mu_0).mean()\nprint(\"ATE\uff1a\", ATE)","c1ee9b0e":"# \u51e6\u7f6e\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATT\u3068\u3001\u5bfe\u7167\u7fa4\u306b\u304a\u3051\u308b\u5e73\u5747\u51e6\u7f6e\u52b9\u679cATU\nATT = df_1[\"bin_Y\"] - reg_0.predict(df_1[[\"x\"]])\nATU = reg_1.predict(df_0[[\"x\"]]) - df_0[\"bin_Y\"]\n\nprint(\"ATT\uff1a\", ATT.mean())\nprint(\"ATU\uff1a\", ATU.mean())","c27c370e":"\n# \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\nt_estimated = reg_1.predict(\n    df[[\"x\"]]) - reg_0.predict(df[[\"x\"]])\nplt.scatter(df[[\"x\"]], t_estimated,\n            label=\"estimated_treatment-effect\")\n\n# \u6b63\u89e3\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\nx_index = np.arange(-1, 1, 0.01)\nt_ans = np.zeros(len(x_index))\nfor i in range(len(x_index)):\n    if x_index[i] < 0:\n        t_ans[i] = 0.5\n    elif x_index[i] >= 0 and x_index[i] < 0.5:\n        t_ans[i] = 0.7\n    elif x_index[i] >= 0.5:\n        t_ans[i] = 1.0\n\n\n# \u6b63\u89e3\u3092\u63cf\u753b\nplt.plot(x_index, t_ans, color='black', ls='--', label='Baseline')","8edf904a":"df[df['Z']==1].Y.mean() - df[df['Z']==0].Y.mean()","7b45b25e":"reg = RandomForestRegressor(max_depth=4)\nX = df.loc[:, [\"x\", \"Z\"]]\nreg.fit(X, df[[\"bin_Y\"]])\n\n# \u51e6\u7f6e\u304c0\u30681\u306e\u72b6\u614b\u3092\u4f5c\u6210\u3059\u308b\nX_0 = X.copy()\nX_0[\"Z\"] = 0.0\n\nX_1 = X.copy()\nX_1[\"Z\"] = 1.0\n\n# ATE\u306e\u8a08\u7b97\nATE = (reg.predict(X_1)-reg.predict(X_0)).mean()\nprint(\"ATE\uff1a\", ATE)\n\n##Z=0\u306e\u30b5\u30f3\u30d7\u30eb\u306bZ=1\u3092\u4eee\u5b9a\u3057\u3066\u4e88\u6e2c\u5024Y\u3092\u51fa\u3057\u3001\u771f\u5024Y\u3068\u306e\u5dee\u5206\u3092\u3068\u308a\u3001\u5e73\u5747\u3092\u51fa\u3059\nATU = (reg.predict(X_1[X['Z']==0])- df[df['Z'] == 0]['bin_Y']).mean()\nprint(\"ATU\uff1a\", ATU)\n\n# \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\nt_estimated = reg.predict(X_1)-reg.predict(X_0)\n    ","1c914744":"cov_v = ['x']\ncas_v = 'Z'\ntar_v = 'bin_Y'\n\nreg = RandomForestClassifier(max_depth=4)\nX = df.loc[:, cov_v+list(cas_v)]\nreg.fit(X, df[tar_v])\n\n# \u51e6\u7f6e\u304c0\u30681\u306e\u72b6\u614b\u3092\u4f5c\u6210\u3059\u308b\nX_0 = X.copy()\nX_0[cas_v] = 0.0\n\nX_1 = X.copy()\nX_1[cas_v] = 1.0\n\n# ATE\u306e\u8a08\u7b97\nATE = (reg.predict_proba(X_1)[:,1]-reg.predict_proba(X_0)[:,1]).mean()\nprint(\"ATE\uff1a\", ATE)\nATU = (reg.predict_proba(X_1[X[cas_v]==0])[:,1]- df[df[cas_v] == 0][tar_v]).mean()\nprint(\"ATU\uff1a\", ATU)","05a19e58":"X[X['Z']==0]","1f5ff4df":"def x_learner(df,cas_v,tar_v,cov_v):\n    # \u96c6\u56e3\u30922\u3064\u306b\u5206\u3051\u308b\n    df_0 = df[df[cas_v] == 0.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\n    df_1 = df[df[cas_v] == 1.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n\n    # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\n    M0 = RandomForestRegressor(max_depth=3)\n    M0.fit(df_0[cov_v], df_0[tar_v])\n\n    # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\n    M1 = RandomForestRegressor(max_depth=3)\n    M1.fit(df_1[cov_v], df_1[tar_v])\n    \n    # \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\n    tau_0 = reg_1.predict(df_0[cov_v]) - df_0[tar_v] #ATT\n    tau_1 = df_1[tar_v] - reg_0.predict(df_1[cov_v])\n\n    # ATT\u3068ATU\u3092\u6c42\u3081\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\n    M2 = RandomForestRegressor(max_depth=3)\n    M2.fit(df_0[cov_v], tau_0)\n\n    M3 = RandomForestRegressor(max_depth=3)\n    M3.fit(df_1[cov_v], tau_1)\n    \n    # \u8aac\u660e\u5909\u6570\n    X = df[cov_v]\n    # \u88ab\u8aac\u660e\u5909\u6570\uff08\u76ee\u7684\u5909\u6570\uff09\n    Z = df[cas_v]\n    # \u56de\u5e30\u306e\u5b9f\u65bd\n    g_x = LogisticRegression().fit(X, Z)\n    g_x_val = g_x.predict_proba(X)\n\n    # \u305d\u308c\u305e\u308c\u306e\u30e2\u30c7\u30eb\u3067\u5168\u30c7\u30fc\u30bf\u306e\u52b9\u679c\u3092\u4e88\u6e2c\u3057\u3001\u50be\u5411\u30b9\u30b3\u30a2\u3067\u8abf\u6574\n    tau = g_x_val[:, 1]*M2.predict(df[cov_v]) + g_x_val[:, 0]*M3.predict(df[cov_v])\n    \n    #\u5171\u5909\u91cf\u306e\u500b\u4eba\u306e\u51e6\u7f6e\u52b9\u679c\u3092\u8fd4\u3059\n    return tau","d224cb7d":"# T-Learner\u3067M0\u3068M1\u3092\u6c42\u3081\u308b\nfrom sklearn.ensemble import RandomForestRegressor\n\n# \u96c6\u56e3\u30922\u3064\u306b\u5206\u3051\u308b\ndf_0 = df[df.Z == 0.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u96c6\u56e3\ndf_1 = df[df.Z == 1.0]  # \u4ecb\u5165\u3092\u53d7\u3051\u305f\u96c6\u56e3\n\n# \u4ecb\u5165\u3092\u53d7\u3051\u3066\u3044\u306a\u3044\u30e2\u30c7\u30eb\nM0 = RandomForestRegressor(max_depth=3)\nM0.fit(df_0[[\"x\"]], df_0[[\"bin_Y\"]])\n\n# \u4ecb\u5165\u3092\u53d7\u3051\u305f\u30e2\u30c7\u30eb\nM1 = RandomForestRegressor(max_depth=3)\nM1.fit(df_1[[\"x\"]], df_1[[\"bin_Y\"]])","74ce075c":"# \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\ntau_0 = reg_1.predict(df_0[[\"x\"]]) - df_0[\"bin_Y\"] #ATT\ntau_1 = df_1[\"bin_Y\"] - reg_0.predict(df_1[[\"x\"]])\n\n# ATT\u3068ATU\u3092\u6c42\u3081\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\nM2 = RandomForestRegressor(max_depth=3)\nM2.fit(df_0[[\"x\"]], tau_0)\n\nM3 = RandomForestRegressor(max_depth=3)\nM3.fit(df_1[[\"x\"]], tau_1)","3179e754":"# \u50be\u5411\u30b9\u30b3\u30a2\u3092\u6c42\u3081\u307e\u3059\nfrom sklearn.linear_model import LogisticRegression\n\n# \u8aac\u660e\u5909\u6570\nX = df[[\"x\"]]\n\n# \u88ab\u8aac\u660e\u5909\u6570\uff08\u76ee\u7684\u5909\u6570\uff09\nZ = df[\"Z\"]\n\n# \u56de\u5e30\u306e\u5b9f\u65bd\ng_x = LogisticRegression().fit(X, Z)\ng_x_val = g_x.predict_proba(X)\n\n# \u305d\u308c\u305e\u308c\u306e\u30e2\u30c7\u30eb\u3067\u5168\u30c7\u30fc\u30bf\u306e\u52b9\u679c\u3092\u4e88\u6e2c\u3057\u3001\u50be\u5411\u30b9\u30b3\u30a2\u3067\u8abf\u6574\ntau = g_x_val[:, 1]*M2.predict(df[[\"x\"]]) + g_x_val[:, 0]*M3.predict(df[[\"x\"]])","7523a315":"# \u63a8\u5b9a\u3055\u308c\u305f\u6cbb\u7642\u52b9\u679c\u3092\u5404\u4eba\u3054\u3068\u306b\u6c42\u3081\u307e\u3059\nplt.scatter(df[[\"x\"]], tau, label=\"estimated_treatment-effect\")\n\n# \u6b63\u89e3\u3092\u63cf\u753b\nplt.plot(x_index, t_ans, color='black', ls='--', label='Baseline')","3906975f":"def causal_reg(cas_v,tar_v,cov_v):\n    ","9f03d523":"\n# \u8aac\u660e\u5909\u6570\nX = df[[\"x\", \"Z\"]]\n\n# \u88ab\u8aac\u660e\u5909\u6570\uff08\u76ee\u7684\u5909\u6570\uff09\ny = df[\"bin_Y\"]\n\n# \u56de\u5e30\u306e\u5b9f\u65bd\nreg = LogisticRegression().fit(X, y)\n\n# \u56de\u5e30\u3057\u305f\u7d50\u679c\u306e\u4fc2\u6570\u3092\u51fa\u529b\nprint(\"\u4fc2\u6570\uff1a\", reg.coef_)\n","d0ad7e45":"\nmodel = sm.Logit(y, sm.add_constant(X))\nresult = model.fit(disp=0)\nprint(result.summary())","73c726bd":"# \u8aac\u660e\u5909\u6570\nX = df[[\"x\"]]\n\n# \u88ab\u8aac\u660e\u5909\u6570\uff08\u76ee\u7684\u5909\u6570\uff09\nZ = df[\"bin_Y\"]\n\n# \u56de\u5e30\u306e\u5b9f\u65bd\nreg = LogisticRegression().fit(X,Z)\n\n# \u56de\u5e30\u3057\u305f\u7d50\u679c\u306e\u4fc2\u6570\u3092\u51fa\u529b\nprint(\"\u4fc2\u6570beta\uff1a\", reg.coef_)\nprint(\"\u4fc2\u6570alpha\uff1a\", reg.intercept_)\n","6ad8984c":"Z_pre = reg.predict_proba(X)\nprint(Z_pre[0:5])  # 5\u4eba\u307b\u3069\u306e\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\nprint(\"----\")\nprint(Z[0:5])  # 5\u4eba\u307b\u3069\u306e\u6b63\u89e3","e125306b":"ATE_i = Y\/Z_pre[:, 1]*Z - Y\/Z_pre[:, 0]*(1-Z)\nATE = 1\/len(Y)*ATE_i.sum()\nprint(\"\u63a8\u5b9a\u3057\u305fATE\", ATE)","05977f2b":"# X-learner\n\n- \u5143\u3005\u3001ATT,ATU\u3092\u6c42\u3081\u308b\u969b\u306b\u306f\u3001Y0,Y1\u304c\u5fc5\u8981\u3002\u3064\u307e\u308a\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306e\u76ee\u7684\u5909\u6570\u306e\u771f\u5024\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u306a\u3044\u3068\u30c0\u30e1\u3060\u3063\u305f\u3002  \n- \u305d\u3053\u3067\u3001\u6c42\u3081\u305fATT,ATU\u3092\u4f7f\u3063\u3066\u518d\u5ea6\u5b66\u7fd2\u3092\u884c\u3044\u3001Y0,Y1\u304c\u306a\u304f\u3068\u3082ATT,ATU\u3092\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u3002\uff08\u305d\u308c\u304c\u3001\u672c\u3067\u3044\u3046M_2,M_3\uff09\n- \u3055\u3089\u306b\u5358\u7d14\u306a\u5e73\u5747\u3067\u306f\u306a\u304f\u3001\u50be\u5411\u30b9\u30b3\u30a2\u306b\u3088\u308a\u91cd\u307f\u4ed8\u3051\u5e73\u5747\u3092\u3068\u308b\u3053\u3068\u3067\u3001\u63a8\u5b9a\u7cbe\u5ea6\u3092\u3042\u3052\u308b","c1e5c315":"# S-learner Classifier","4b1571a0":"# \u30c7\u30fc\u30bf\u306e\u4f5c\u6210","31785b3a":"# \u50be\u5411\u30b9\u30b3\u30a2","42a1b461":"# S-learner","ca209dd0":"# \u7dda\u5f62\u56de\u5e30","e235b8ed":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u5316","28cbd601":"# T-learner"}}