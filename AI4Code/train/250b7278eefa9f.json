{"cell_type":{"b2f2f015":"code","ea27a989":"code","f27e5820":"code","2ac6146e":"code","53e52261":"code","231de88d":"code","b8dae392":"code","cdfa70c3":"code","5dcc1d7a":"code","26d8904b":"code","2f1c29b3":"code","aff396fd":"code","c84c44ca":"code","e2d2b5a2":"code","fbe9c45e":"code","5030ecaf":"code","f18f17cc":"code","cad72552":"code","c48bf0e8":"code","f161def8":"code","0c8cc45c":"code","712c3587":"markdown","425e6641":"markdown","2cd4e1ea":"markdown","d2554f78":"markdown","65c4da79":"markdown","e573b00d":"markdown","299a77fa":"markdown","29744593":"markdown","b3a49207":"markdown","60d9d123":"markdown","df37b7b5":"markdown","f575514f":"markdown","a5659777":"markdown","e55c28a9":"markdown"},"source":{"b2f2f015":"import os\nimport time\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import RFECV\n# from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score","ea27a989":"# I\/O\nIN_FILEPATH = \"\/kaggle\/input\/titanic\/\"\n\nCOL_ID = \"PassengerId\"\n\nOUT_FILEPATH = \"\/kaggle\/output\/titanic\/\"\n\n# Data preprocessing\nTARGET = \"Survived\"\n\nTEST_SIZE = 0.25\n\nTRAIN_TEST_RND_STATE = 0\n\nORDINALITY_THRESHOLD = 10\n\nNUMERIC_IMPUTE_STRATEGY = \"mean\"\n\nCATEGORICAL_IMPUTE_STRATEGY = \"most_frequent\"\n\nHANDLE_UNKNOWN = \"ignore\"\n\n# Grid Search Options\nGRID_CV = 5\n\nGRID_N_JOBS = -1 # Using all cores.\n\n# Hyperparameters\nFEATURES = [\"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Pclass\", \"Embarked\"]\n\nPARAM_GRID = {\n    \"model__max_depth\": (4, 8),\n    \"model__random_state\": (0, 10, 20, 30, 40),\n    \"model__n_estimators\": (50, 100, 200, 400),\n    \"model__learning_rate\": np.logspace(-1, -3, 3, base=10, dtype=\"float64\")\n}\nMODEL = GradientBoostingClassifier","f27e5820":"def list_null_rows_from_col(col):\n    \"\"\"Return a list of the indexes of a row given the column name string to search through. \"\"\"\n    return list(np.where(train_df[TARGET].isna()))\n\ndef get_categorical_cols(df):\n    return [col for col in df.columns if df[col].dtype == \"object\" and df[col].nunique() < ORDINALITY_THRESHOLD] # Text data will be of \"object\" type.\n\ndef get_numerical_cols(df):\n    return [col for col in df.columns if df[col].dtype in ('int64', 'float64')]","2ac6146e":"pd.set_option(\"display.max_columns\", 1000)\npd.set_option(\"display.max_rows\", 1000)","53e52261":"with open(os.path.join(IN_FILEPATH, \"train.csv\")) as file:\n    train_df = pd.read_csv(file)\nwith open(os.path.join(IN_FILEPATH, \"test.csv\")) as file:\n    test_df = pd.read_csv(file)","231de88d":"train_df.describe()","b8dae392":"train_df.head(100)","cdfa70c3":"# PassengerId is a better index than the default.\ntrain_df.set_index(COL_ID, inplace=True)\ntest_df.set_index(COL_ID, inplace=True)\n# Any rows that have a null value for the target should be removed.\nnull_target_rows = list_null_rows_from_col(TARGET)\nif len(null_target_rows[0]) > 0: # The outer list has an inner tuple that needs to be checked.\n    dropped_targets_df = train_df.drop(null_target_rows)\nelse:\n    dropped_targets_df = train_df\n\ny = dropped_targets_df[TARGET]\nX = dropped_targets_df[FEATURES]\ntest_X = test_df[FEATURES]","5dcc1d7a":"train_X, valid_X, train_y, valid_y = train_test_split(X, y, random_state=TRAIN_TEST_RND_STATE, test_size=TEST_SIZE)","26d8904b":"# Filter out high ordinality categories.\ncategorical_cols = get_categorical_cols(X)\nnumerical_cols = get_numerical_cols(X)\nall_cols = categorical_cols + numerical_cols\n\ntrain_X = train_X[all_cols].copy()\nvalid_X = valid_X[all_cols].copy()\ntest_X = test_X[all_cols].copy()","2f1c29b3":"# Feature selection.\n# feature_selection_clf = RandomForestClassifier(n_estimators=30, random_state=0, class_weight=\"balanced\")\n# feature_selector = RFECV(estimator=feature_selection_clf, step=1, cv=5, scoring=\"roc_auc\")\n\n# Make transformers.\nnumeric_transformer = SimpleImputer(strategy=NUMERIC_IMPUTE_STRATEGY)\ncategorical_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=CATEGORICAL_IMPUTE_STRATEGY)),\n    (\"encoder\", OneHotEncoder(handle_unknown=HANDLE_UNKNOWN))\n])\n\n# Combine transformers.\npreprocessor = ColumnTransformer(transformers=[\n    (\"numerical\", numeric_transformer, numerical_cols),\n    (\"categorical\", categorical_transformer, categorical_cols)\n])","aff396fd":"model = MODEL()\n\ndata_pipe = Pipeline(steps=[\n#     (\"feat_selection\",feature_selector), \n    (\"preprocessor\", preprocessor),\n    (\"model\", model)\n])","c84c44ca":"clf = GridSearchCV(data_pipe, param_grid=PARAM_GRID, cv=GRID_CV, n_jobs=GRID_N_JOBS)","e2d2b5a2":"start_time = time.perf_counter()\nclf.fit(train_X, train_y)\nprint(time.perf_counter() - start_time, \"s\")","fbe9c45e":"predictions = clf.predict(valid_X)","5030ecaf":"print(\"MEA:\", mean_absolute_error(predictions, valid_y))\nprint(\"Accuracy:\", accuracy_score(predictions, valid_y)*100, \"%\")\nprint(clf.best_params_)","f18f17cc":"clf.fit(X, y)","cad72552":"output_predictions = clf.predict(test_X)","c48bf0e8":"output_df = pd.DataFrame({COL_ID: test_X.index, TARGET: output_predictions})\noutput_df","f161def8":"with open(os.path.join(\"submission_3.csv\"), \"w\") as file:\n    output_df.to_csv(file, index=False)","0c8cc45c":"clf.best_params_","712c3587":"### Evaluation","425e6641":"### Saving Predictions","2cd4e1ea":"### Helper Functions","d2554f78":"# Exploratory Data Analysis","65c4da79":"# Set Up\n### Dependencies","e573b00d":"### Model Choices\n\nFeatures: [\"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Pclass\", \"Embarked\"]\n\nEstimator: GradientBoostingClassifier (sklearn)\n\nHyperparameters:\n* max_depth: 4\n* n_estimators: 100\n* random_state: 40\n* learning_rate: 0.01","299a77fa":"# Training\n### Making Pipelines","29744593":"### Data File Access","b3a49207":"### Configurations","60d9d123":"# Data Preprocessing\n### Dataset Splitting","df37b7b5":"###### RandomForest\nAccuracy: 80.71748878923766%\n{'model__max_depth': 4, 'model__n_estimators': 50, 'model__random_state': 10}\n\n###### GradientBoost\nAccuracy: 83.85650224215246 %\n{'model__learning_rate': 0.01, 'model__max_depth': 4, 'model__n_estimators': 200, 'model__random_state': 0}","f575514f":"### Constants","a5659777":"### Hyperparameter Optimization","e55c28a9":"# Predicting"}}