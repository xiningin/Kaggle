{"cell_type":{"c4aab3db":"code","61635f0a":"code","3a9f5d2a":"code","a5a41018":"code","9275edc1":"code","127a8a55":"code","4c146b56":"code","49f11656":"code","e108a794":"code","0062909c":"code","7caba6cd":"code","d40bbcd3":"code","2a17fcaa":"code","edc41cdd":"code","99ae4cdd":"code","48915294":"code","6a117eec":"code","52bf8d3a":"code","2f5f0dbb":"code","8abb6f19":"code","288add09":"code","66b7551d":"code","a59962cf":"code","83ef5d13":"code","cb776fba":"code","ef86e213":"code","13548521":"code","4160a8e6":"code","3f35302e":"code","06333a02":"code","6ef8713e":"code","6ff952a4":"code","ad502485":"code","ceb77e74":"code","1aebb371":"code","1f8f7b67":"code","b48b9757":"code","05e0f6a6":"code","b143f7d9":"code","ef675479":"code","13d0ca04":"code","7935770b":"code","74dcb8c8":"code","5d2da7df":"code","5d7c8ff7":"code","23d63b2c":"code","fe332f80":"code","008e7d81":"code","54fcce9b":"code","cf4bd8df":"code","dc5db66a":"code","4d5e68cb":"markdown","232e0964":"markdown","242c93eb":"markdown","7752b8c1":"markdown","2f548c28":"markdown","88aa1776":"markdown","9f429f9a":"markdown","3b404ba4":"markdown","f956eaf3":"markdown","5f7b68ac":"markdown","dce8b8b5":"markdown","e9451139":"markdown","5a72592d":"markdown"},"source":{"c4aab3db":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n","61635f0a":"path  = '..\/input\/mobileclassification\/train.csv'\ndf = pd.read_csv(path)","3a9f5d2a":"df.head()","a5a41018":"df.tail()","9275edc1":"df.shape","127a8a55":"df.info()","4c146b56":"df.describe()","49f11656":"df.corr()","e108a794":"# Check missing data:\ndf.isna().sum()","0062909c":"df.var()","7caba6cd":"sns.pointplot(y='ram',x='price_range',data=df).set_title('Relationship between ram and price_range')","d40bbcd3":"sns.pointplot(x='price_range',y='battery_power',data=df).set_title('Relationship between battery and price_range')","2a17fcaa":"sns.boxplot(x='price_range',y='battery_power',data=df).set_title('Box plot between battery_power and price_range')","edc41cdd":"sns.pointplot(x='price_range',y='int_memory',data=df).set_title('Relationship between internal Memory and price_range')","99ae4cdd":"sns.boxplot(x='price_range',y='int_memory',data=df).set_title('Box plot between internal Memory and price_range')","48915294":"col = df.columns\ncol","6a117eec":"categorical_col = ['blue','dual_sim','four_g','three_g','touch_screen','price_range','wifi']","52bf8d3a":"for i in categorical_col:\n  sns.countplot(df[i])\n  plt.xlabel(i)\n  plt.show()","2f5f0dbb":" for i in df.drop(df[categorical_col],axis=1):\n        fig = plt.figure(figsize=(6,4))\n        plt.hist(df[i],bins=10)\n        plt.xlabel(i)\n        plt.show()\n        ","8abb6f19":"corr=df.corr()\nfig = plt.figure(figsize=(15,12))\nr = sns.heatmap(corr)\nr.set_title(\"Correlation \")","288add09":"# Show each observation with a scatterplot\nsns.stripplot(x=\"touch_screen\", y=\"ram\", hue=\"price_range\",data=df, dodge=True, jitter=True,alpha=.25, zorder=1)","66b7551d":"f, ax = plt.subplots(figsize=(10, 10))\nax=sns.swarmplot(x=\"four_g\", y=\"ram\", hue=\"price_range\",palette=\"Dark2\", data=df)\nax=sns.set(style=\"darkgrid\")","a59962cf":"g = sns.FacetGrid(df, col=\"dual_sim\", hue=\"price_range\", palette=\"Set1\",height=5\n                   )\ng = (g.map(sns.distplot, \"ram\").add_legend())","83ef5d13":"x=df.drop('price_range',axis=1)\ny=df['price_range']","cb776fba":"scale=StandardScaler()\nscaled=scale.fit_transform(x)","ef86e213":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif=pd.DataFrame()\nvif['vif']=[variance_inflation_factor(scaled,i) for i in range(scaled.shape[1])]\nvif['features']=x.columns\nvif","13548521":"#4G- supported mobiles in dataset\n\nlabels = [\"4G-supported\",'Not supported']\nvalues = df['four_g'].value_counts().values\nfig1, ax1 = plt.subplots()\ncolors = ['green', 'red']\nax1.pie(values, labels=labels, autopct='%1.1f%%',shadow=True,startangle=90,colors=colors)\n\n#3G- supported mobiles in dataset\n\nlabels = [\"3G-supported\",'Not supported']\nvalues = df['three_g'].value_counts().values\nfig2, ax1 = plt.subplots()\ncolors = ['green', 'red']\nax1.pie(values, labels=labels, autopct='%1.1f%%',shadow=True,startangle=90,colors=colors)\n\nplt.show()","4160a8e6":"plt.figure(figsize=(10,6))\ndf['fc'].hist(alpha=0.5,color='green',label='Front camera')\ndf['pc'].hist(alpha=0.5,color='orange',label='Primary camera')\nplt.legend()\nplt.xlabel('MegaPixels')","3f35302e":"# split train test data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=250,stratify=y)","06333a02":"#K-Neibhbours Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nknn=KNeighborsClassifier(n_neighbors=8)\n\nknn.fit(x_train,y_train)\n\ny_test_pred1 = knn.predict(x_test)\ny_train_pred1=knn.predict(x_train)\n\nknn_acc=accuracy_score(y_test_pred1,y_test)","6ef8713e":"print(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred1,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred1,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\" %confusion_matrix(y_test_pred1,y_test))\nprint(\"\\nClassification Report:\\n%s\" %classification_report(y_test_pred1,y_test))","6ff952a4":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\n\ny_test_pred2 = svc.predict(x_test)\ny_train_pred2=svc.predict(x_train)\n\nsvc_acc=accuracy_score(y_test_pred2,y_test)","ad502485":"print(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred2,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred2,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred2,y_test))\nprint(\"\\nClassification Report:\\n%s\"%classification_report(y_test_pred2,y_test))","ceb77e74":"from sklearn.tree import DecisionTreeClassifier\n\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\n\ny_test_pred3 = dtc.predict(x_test)\ny_train_pred3=dtc.predict(x_train)\n","1aebb371":"print(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred3,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred3,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred3,y_test))\nprint(\"\\nClassification Report:\\n%s\"%classification_report(y_test_pred3,y_test))","1f8f7b67":"grid_params = {'criterion' : ['gini', 'entropy'],'max_depth' : [3, 5, 7, 10],'min_samples_split' : range(2, 10, 1),'min_samples_leaf' : range(2, 10, 1)}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(x_train, y_train)","b48b9757":"grid_search.best_params_","05e0f6a6":"dtc = grid_search.best_estimator_\n","b143f7d9":"y_predi=dtc.predict(x_test)","ef675479":"dtc_train_acc = accuracy_score(y_train, dtc.predict(x_train))\ndtc_test_acc = accuracy_score(y_test, y_predi)\n\nprint(f\"Training Accuracy of SVC Model is {dtc_train_acc}\")\nprint(f\"Test Accuracy of SVC Model is {dtc_test_acc}\")","13d0ca04":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nada = AdaBoostClassifier(base_estimator = dtc)\n\nparameters = {\n    'n_estimators' : [50, 70, 90, 120, 180, 200],\n    'learning_rate' : [0.001, 0.01, 0.1, 1, 10],\n    'algorithm' : ['SAMME', 'SAMME.R']\n}\n\ngrid_search = GridSearchCV(ada, parameters, n_jobs = -1, cv = 5, verbose = 1)\ngrid_search.fit(x_train, y_train)","7935770b":"grid_search.best_params_","74dcb8c8":"grid_search.best_score_","5d2da7df":"ad = grid_search.best_estimator_\nad.fit(x_train,y_train)","5d7c8ff7":"y_pred = ad.predict(x_test)","23d63b2c":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbc = GradientBoostingClassifier()\ngbc.fit(x_train, y_train)\n\ny_test_pred6 = gbc.predict(x_test)\ny_train_pred6=gbc.predict(x_train)\n\ngbc_acc=accuracy_score(y_test_pred6,y_test)","fe332f80":"print(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred6,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred6,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred6,y_test))\nprint(\"\\nClassification Report:\\n%s\"%classification_report(y_test_pred6,y_test))\n","008e7d81":"from xgboost import XGBClassifier\n\nxgb = XGBClassifier(booster = 'gbtree', learning_rate = 0.1, max_depth = 5, n_estimators = 10,gamma=5)\nxgb.fit(x_train, y_train)\n\ny_test_pred7 = xgb.predict(x_test)\ny_train_pred7=xgb.predict(x_train)\n\nxgb_acc= accuracy_score(y_test_pred7,y_test)","54fcce9b":"print(\"Train Set Accuracy:\"+str(accuracy_score(y_train_pred7,y_train)*100))\nprint(\"Test Set Accuracy:\"+str(accuracy_score(y_test_pred7,y_test)*100))\nprint(\"\\nConfusion Matrix:\\n%s\"%confusion_matrix(y_test_pred7,y_test))\nprint(\"\\nClassification Report:\\n%s\"%classification_report(y_test_pred7,y_test))\n","cf4bd8df":"models = pd.DataFrame({\n    'Model': ['KNN', 'SVC',  'Decision Tree Classifier','Ada Boost Classifier','Gradient Boosting Classifier', 'XgBoost'],\n    'Score': [knn_acc, svc_acc, dtc_test_acc, ada_test_acc, gbc_acc, xgb_acc]})\n\nmodels.sort_values(by = 'Score', ascending = False)","dc5db66a":"colors = [\"red\", \"green\", \"orange\", \"brown\",\"skyblue\",\"violet\"]\nplt.figure(figsize=(15,5))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=models['Model'],y=models['Score'], palette=colors ).set_title(\"All model Scores comparison\")\nplt.show()","4d5e68cb":"#Data Analysis","232e0964":"#GradientBoostingClassifier","242c93eb":"#AdaBoostClassifier","7752b8c1":"#XGBClassifier","2f548c28":"#Support vector Machine(SVC)","88aa1776":"#Count Plot for all the categorical columns","9f429f9a":"# Hyper parameter tuning","3b404ba4":"#DecisionTreeClassifier","f956eaf3":"# Here **ram** is highly co-Related with **price_range**(0.917046),Approx **92%**","5f7b68ac":"#Model\tScore\n1\tSVC\t0.9700\n\n2\tKNN\t0.9525\n\n3\tGradient Boosting Classifier\t0.9400\n\n4\tAda Boost Classifier\t0.9275\n\n5\tXgBoost\t0.8850\n\n6\tDecision Tree Classifier\t0.8700\n\n\nHere,as per model scors SVC performing high score with 97%\n\nas per scores we can choose SVC as the best model for this data.\n","dce8b8b5":"#Here VIF is less than 5.So, There is no multicollinearity.","e9451139":"In the competitive mobile phone market companies want\nto understand sales data of mobile phones and factors which drive the prices.\n\nThe objective is to find out some relation between features of a mobile phone(eg:- RAM,\nInternal Memory, etc) and its selling price. In this problem, we do not have to predict the\nactual price but a price range indicating how high the price is.\n\n#Data Description -\nBattery_power - Total energy a battery can store in one time measured in mAh\n\nBlue - Has bluetooth or not\n\nClock_speed - speed at which microprocessor executes instructions\n\nDual_sim - Has dual sim support or not\n\nFc - Front Camera mega pixels\n\nFour_g - Has 4G or not\n\nInt_memory - Internal Memory in Gigabytes\n\nM_dep - Mobile Depth in cm\n\nMobile_wt - Weight of mobile phone\n\nN_cores - Number of cores of processor\n\nPc - Primary Camera mega pixels\n\nPx_height - Pixel Resolution Height\n\nPx_width - Pixel Resolution Width\n\nRam - Random Access Memory in Mega Bytes\n\nSc_h - Screen Height of mobile in cm\n\nSc_w - Screen Width of mobile in cm\n\nTalk_time - longest time that a single battery charge will last when you are\n\nThree_g - Has 3G or not\n\nTouch_screen - Has touch screen or not\n\nWifi - Has wifi or not\n\nPrice_range - This is the target variable with value of 0(low cost), 1(medium cost),\n2(high cost) and 3(very high cost).\n","5a72592d":"As we alredy know price is highly co-related with price_range,here we can see \"ram\" is directly propotional to \"price_range\""}}