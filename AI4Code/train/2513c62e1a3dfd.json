{"cell_type":{"67727eb7":"code","b3d2999a":"code","2ca68641":"code","8d494827":"code","41c3f7fb":"code","4208ee9e":"code","99bdcb3a":"code","6b3c303b":"code","f39614a3":"code","5db70d59":"code","8a7be15d":"code","8ce7825c":"code","5444d119":"code","ab6cc095":"code","85a5e6fd":"code","ba6803c1":"code","64cec424":"code","ee46965f":"code","1ed81089":"code","5ac29155":"code","0060c2a2":"code","48fa704e":"code","3765e302":"code","af81fd5f":"code","e1bea534":"code","26b2cdde":"code","a32199be":"code","925d4010":"code","8ad259a3":"code","241a7e76":"code","58319417":"code","20932171":"code","91e6fad3":"code","d2cff0d3":"code","ba7c4554":"code","ff5c3b64":"code","57e34d78":"code","1834e28e":"code","19a77d0f":"code","5079128f":"code","39cfabe0":"code","19774921":"code","2a7b2fbe":"code","ef9fbabe":"markdown","f8d56cf9":"markdown","69d66a2e":"markdown","62a6e064":"markdown"},"source":{"67727eb7":"%matplotlib inline\nimport seaborn as sns","b3d2999a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2ca68641":"data_train = pd.read_csv(\"train (1).csv\")\ndata_test = pd.read_csv(\"test (1).csv\")","8d494827":"data_train.head(10)","41c3f7fb":"data_test.head(10)","4208ee9e":"print(data_train.shape)\nprint(data_test.shape)","99bdcb3a":"data_test['SalePrice'] = 0","6b3c303b":"data = pd.concat([data_train , data_test] , axis = 0)","f39614a3":"data.shape","5db70d59":"data.columns","8a7be15d":"data.describe","8ce7825c":"data['SalePrice']","5444d119":"data.isnull().sum()","ab6cc095":"plt.figure(figsize = (10,6))\nsns.heatmap(data.isnull() , yticklabels = False , cbar = False , cmap = \"viridis\")","85a5e6fd":"data.info()","ba6803c1":"data['LotFrontage'] = data['LotFrontage'].fillna(data['LotFrontage'].mean())\ndata['BsmtFinSF1'] = data['BsmtFinSF1'].fillna(data['BsmtFinSF1'].mean())\ndata['BsmtFinSF2'] = data['BsmtFinSF2'].fillna(data['BsmtFinSF2'].mean())\ndata['BsmtUnfSF'] = data['BsmtUnfSF'].fillna(data['BsmtUnfSF'].mean())\ndata['TotalBsmtSF'] = data['TotalBsmtSF'].fillna(data['TotalBsmtSF'].mean())\ndata['GarageCars'] = data['GarageCars'].fillna(data['GarageCars'].mean())\ndata['GarageArea'] = data['GarageArea'].fillna(data['GarageArea'].mean())","64cec424":"data.drop(['Alley' , 'PoolQC' , 'Fence' , 'MiscFeature'], axis = 1 , inplace = True)\ndata.drop(['GarageYrBlt'], axis = 1 , inplace = True)","ee46965f":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])\ndata['MasVnrType'] = data['MasVnrType'].fillna(data['MasVnrType'].mode()[0])\ndata['BsmtQual'] = data['BsmtQual'].fillna(data['BsmtQual'].mode()[0])\ndata['BsmtCond'] = data['BsmtCond'].fillna(data['BsmtCond'].mode()[0])\ndata['BsmtExposure'] = data['BsmtExposure'].fillna(data['BsmtExposure'].mode()[0])\ndata['BsmtFinType1'] = data['BsmtFinType1'].fillna(data['BsmtFinType1'].mode()[0])\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna(data['BsmtFinType2'].mode()[0])\ndata['FireplaceQu'] = data['FireplaceQu'].fillna(data['FireplaceQu'].mode()[0])\ndata['GarageType'] = data['GarageType'].fillna(data['GarageType'].mode()[0])\ndata['GarageFinish'] = data['GarageFinish'].fillna(data['GarageFinish'].mode()[0])\ndata['GarageQual'] = data['GarageQual'].fillna(data['GarageQual'].mode()[0])\ndata['GarageCond'] = data['GarageCond'].fillna(data['GarageCond'].mode()[0])\ndata['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\ndata['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['Functional'] = data['Functional'].fillna(data['Functional'].mode()[0])\ndata['MasVnrArea'] = data['MasVnrArea'].fillna(data['MasVnrArea'].mode()[0])\ndata['BsmtFullBath'] = data['BsmtFullBath'].fillna(data['BsmtFullBath'].mode()[0])\ndata['BsmtHalfBath'] = data['BsmtHalfBath'].fillna(data['BsmtHalfBath'].mode()[0])\ndata['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])","1ed81089":"sol = data_test['Id']\ndata_test.shape","5ac29155":"data.info()","0060c2a2":"data.shape","48fa704e":"data.isnull().sum()","3765e302":"sns.heatmap(data.isnull() , yticklabels = False , cmap = 'viridis')","af81fd5f":"data.corr()","e1bea534":"columns=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood',\n         'Condition2','BldgType','Condition1','HouseStyle','SaleType','SaleCondition','ExterCond',\n         'ExterQual','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','Heating','HeatingQC','CentralAir',\n         'Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive']","26b2cdde":"len(columns)","a32199be":"def category(multcolumns):\n    data_final=data\n    i=0\n    for field in multcolumns:\n        \n        df1=pd.get_dummies(data[field],drop_first=True)\n        \n        data.drop([field],axis=1,inplace=True)\n        if i==0:\n            data_final=df1.copy()\n        else:\n            \n            data_final=pd.concat([data_final,df1],axis=1)\n        i=i+1\n       \n        \n    data_final=pd.concat([data,data_final],axis=1)\n        \n    return data_final","925d4010":"data = category(columns)","8ad259a3":"data.shape","241a7e76":"data = data.loc[:,~data.columns.duplicated()]","58319417":"data.shape","20932171":"data.head()","91e6fad3":"data_train = data.iloc[:1460,:]\ndata_test = data.iloc[1460:,:]","d2cff0d3":"data_test.drop(['SalePrice'] , axis = 1 , inplace = True)","ba7c4554":"y_train = data_train['SalePrice']\nx_train = data_train.drop(['SalePrice'] , axis = 1)","ff5c3b64":"x_train.shape","57e34d78":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nx_train = scalar.fit_transform(x_train)\ndata_test = scalar.transform(data_test)","1834e28e":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train,y_train)","19a77d0f":"y_tr = lr.predict(x_train)\nlr.coef_","5079128f":"lr.intercept_","39cfabe0":"y_pred = lr.predict(data_test)","19774921":"l1 = sol\nl2 = list(y_pred)\ndf = pd.DataFrame(list(zip(l1,l2)), columns = ['id' , 'SalePrice'])\n","2a7b2fbe":"df.to_csv('FinalResult.csv' , index = False)","ef9fbabe":"## Handling missing values","f8d56cf9":"## Importing Libraries","69d66a2e":"## Concatenating both the datasets","62a6e064":"## Handling Categorical Features"}}