{"cell_type":{"d74c8467":"code","b94a4b6b":"code","1443fd0b":"code","cd19e034":"code","0e1adade":"code","0d99fb5f":"code","65fff542":"code","a3d39afd":"code","5f2aeea6":"code","f835e448":"code","d752c17b":"code","0a23b687":"code","bd592317":"code","90f89acd":"code","29f9512d":"code","6e355d53":"code","fac7f022":"code","96babcee":"code","69c1e3ed":"code","22993344":"code","aecc7530":"markdown","de8407d5":"markdown","0a96732e":"markdown","e88ab81a":"markdown","1e400192":"markdown","aff1ddf6":"markdown","5fd4ae30":"markdown","445a8920":"markdown"},"source":{"d74c8467":"import os\nprint(os.listdir(\"..\/input\"))","b94a4b6b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\nimport gc\nimport time\nfrom pandas.core.common import SettingWithCopyWarning\nimport warnings\nimport lightgbm as lgb\nfrom sklearn.model_selection import GroupKFold\n\n# I don't like SettingWithCopyWarnings ...\nwarnings.simplefilter('error', SettingWithCopyWarning)\ngc.enable()\n%matplotlib inline","1443fd0b":"train = pd.read_csv('..\/input\/train.csv', \n                    dtype={'date': str, 'fullVisitorId': str, 'sessionId':str}, nrows=None)\ntest = pd.read_csv('..\/input\/test.csv', \n                   dtype={'date': str, 'fullVisitorId': str, 'sessionId':str}, nrows=None)\ntrain.shape, test.shape","cd19e034":"def get_folds(df=None, n_splits=5):\n    \"\"\"Returns dataframe indices corresponding to Visitors Group KFold\"\"\"\n    # Get sorted unique visitors\n    unique_vis = np.array(sorted(df['fullVisitorId'].unique()))\n\n    # Get folds\n    folds = GroupKFold(n_splits=n_splits)\n    fold_ids = []\n    ids = np.arange(df.shape[0])\n    for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n        fold_ids.append(\n            [\n                ids[df['fullVisitorId'].isin(unique_vis[trn_vis])],\n                ids[df['fullVisitorId'].isin(unique_vis[val_vis])]\n            ]\n        )\n\n    return fold_ids","0e1adade":"train['page_hit'] = train['totals.pageviews']\/(train['totals.hits']+1)\ntrain.loc[(train['page_hit'] > 0.35), 'is.page_hit'] = 1\ntrain.loc[(train['page_hit'] <= 0.35), 'is.page_hit'] = 0\ndel train['page_hit']\n\ntest['page_hit'] = test['totals.pageviews']\/(test['totals.hits']+1)\ntest.loc[(test['page_hit'] > 0.35), 'is.page_hit'] = 1\ntest.loc[(test['page_hit'] <= 0.35), 'is.page_hit'] = 0\ndel test['page_hit']","0d99fb5f":"for df in [train, test]:\n    df['vis_date'] = pd.to_datetime(df['visitStartTime'], unit='s')\n    df['sess_date_dow'] = df['vis_date'].dt.dayofweek\n    df['sess_date_hours'] = df['vis_date'].dt.hour\n    df['sess_date_dom'] = df['vis_date'].dt.day\n    df.sort_values(['fullVisitorId', 'vis_date'], ascending=True, inplace=True)\n    df['next_session_1'] = (\n        df['vis_date'] - df[['fullVisitorId', 'vis_date']].groupby('fullVisitorId')['vis_date'].shift(1)\n    ).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\n    \n    df['next_session_2'] = (\n        df['vis_date'] - df[['fullVisitorId', 'vis_date']].groupby('fullVisitorId')['vis_date'].shift(-1)\n    ).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\n    \n    df['max_visits'] = df['fullVisitorId'].map(\n         df[['fullVisitorId', 'visitNumber']].groupby('fullVisitorId')['visitNumber'].max()\n     )\n    \n    df['nb_pageviews'] = df['date'].map(\n        df[['date', 'totals.pageviews']].groupby('date')['totals.pageviews'].sum()\n    )\n    \n    df['ratio_pageviews'] = df['totals.pageviews'] \/ df['nb_pageviews']","65fff542":"excluded_features = [\n    'date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', \n    'visitId', 'visitStartTime'\n]\n\ncategorical_features = [\n    _f for _f in train.columns\n    if (_f not in excluded_features) & (train[_f].dtype == 'object')\n]","a3d39afd":"from sklearn.model_selection import KFold\n\ndef mean_k_fold_encoding(col, alpha):\n    target_name = 'totals.transactionRevenue'\n    target_mean_global = train[target_name].mean()\n    \n    nrows_cat = train.groupby(col)[target_name].count()\n    target_means_cats = train.groupby(col)[target_name].mean()\n    target_means_cats_adj = (target_means_cats*nrows_cat + \n                             target_mean_global*alpha)\/(nrows_cat+alpha)\n    # Mapping means to test data\n    encoded_col_test = test[col].map(target_means_cats_adj)\n    #\uc784\uc758\ub85c \ucd94\uac00 \ud55c \ubd80\ubd84\n    encoded_col_test.fillna(target_mean_global, inplace=True)\n    encoded_col_test.sort_index(inplace=True)\n\n    kfold = KFold(n_splits=5, shuffle=True, random_state=1989)\n    parts = []\n    for trn_inx, val_idx in kfold.split(train):\n        df_for_estimation, df_estimated = train.iloc[trn_inx], train.iloc[val_idx]\n        nrows_cat = df_for_estimation.groupby(col)[target_name].count()\n        target_means_cats = df_for_estimation.groupby(col)[target_name].mean()\n\n        target_means_cats_adj = (target_means_cats * nrows_cat + \n                                target_mean_global * alpha) \/ (nrows_cat + alpha)\n\n        encoded_col_train_part = df_estimated[col].map(target_means_cats_adj)\n        parts.append(encoded_col_train_part)\n        \n    encoded_col_train = pd.concat(parts, axis=0)\n    encoded_col_train.fillna(target_mean_global, inplace=True)\n    encoded_col_train.sort_index(inplace=True)\n    \n    return encoded_col_train, encoded_col_test","5f2aeea6":"train['totals.transactionRevenue'] = train['totals.transactionRevenue'].fillna(0)\n\nfor col in categorical_features:\n    temp_encoded_tr, temp_encoded_te = mean_k_fold_encoding(col, 5)\n    new_feat_name = 'mean_k_fold_{}'.format(col)\n    train[new_feat_name] = temp_encoded_tr.values\n    test[new_feat_name] = temp_encoded_te.values\ngc.collect()","f835e448":"def frequency_encoding(frame, col):\n    freq_encoding = frame.groupby([col]).size()\/frame.shape[0] \n    freq_encoding = freq_encoding.reset_index().rename(columns={0:'{}_Frequency'.format(col)})\n    return frame.merge(freq_encoding, on=col, how='left')\n\nlen_train = train.shape[0]\ndf_all = pd.concat([train, test])\n\nfor col in categorical_features:\n    df_all = frequency_encoding(df_all, col)","d752c17b":"del df_all['geoNetwork.subContinent_Frequency']\ndel df_all['geoNetwork.country_Frequency']\ndel df_all['geoNetwork.region_Frequency']; del df_all['geoNetwork.city_Frequency']\ndel df_all['device.deviceCategory_Frequency']; del df_all['geoNetwork.continent_Frequency']\ndel df_all['trafficSource.adContent_Frequency']; \n\ndf_all['sub_net_mm'] = df_all['mean_k_fold_geoNetwork.subContinent'] * df_all['mean_k_fold_geoNetwork.networkDomain']\ndf_all['region_city_metro_mmm'] = - (df_all['mean_k_fold_geoNetwork.region'] \/ df_all['mean_k_fold_geoNetwork.city'] * df_all['mean_k_fold_geoNetwork.metro'])\ndf_all['metro_source_mm'] = df_all['mean_k_fold_geoNetwork.metro'] * df_all['mean_k_fold_trafficSource.source']\ndf_all['channel_device_mm'] = df_all['mean_k_fold_channelGrouping'] * df_all['mean_k_fold_device.deviceCategory']\n\ndel df_all['mean_k_fold_geoNetwork.subContinent']; del df_all['mean_k_fold_geoNetwork.networkDomain'];\ndel df_all['mean_k_fold_geoNetwork.region']; del df_all['mean_k_fold_geoNetwork.city']; del df_all['mean_k_fold_geoNetwork.metro']\ndel df_all['mean_k_fold_trafficSource.source']; del df_all['mean_k_fold_channelGrouping']; del df_all['mean_k_fold_device.deviceCategory']","0a23b687":"# https:\/\/www.kaggle.com\/prashantkikani\/teach-lightgbm-to-sum-predictions-fe\ndef browser_mapping(x):\n    browsers = ['chrome','safari','firefox','internet explorer','edge','opera','coc coc','maxthon','iron']\n    if x in browsers:\n        return x.lower()\n    elif  ('android' in x) or ('samsung' in x) or ('mini' in x) or ('iphone' in x) or ('in-app' in x) or ('playstation' in x):\n        return 'mobile browser'\n    elif  ('mozilla' in x) or ('chrome' in x) or ('blackberry' in x) or ('nokia' in x) or ('browser' in x) or ('amazon' in x):\n        return 'mobile browser'\n    elif  ('lunascape' in x) or ('netscape' in x) or ('blackberry' in x) or ('konqueror' in x) or ('puffin' in x) or ('amazon' in x):\n        return 'mobile browser'\n    elif '(not set)' in x:\n        return x\n    else:\n        return 'others'\n    \n    \ndef adcontents_mapping(x):\n    if  ('google' in x):\n        return 'google'\n    elif  ('placement' in x) | ('placememnt' in x):\n        return 'placement'\n    elif '(not set)' in x or 'nan' in x:\n        return x\n    elif 'ad' in x:\n        return 'ad'\n    else:\n        return 'others'\n    \ndef source_mapping(x):\n    if  ('google' in x):\n        return 'google'\n    elif  ('youtube' in x):\n        return 'youtube'\n    elif '(not set)' in x or 'nan' in x:\n        return x\n    elif 'yahoo' in x:\n        return 'yahoo'\n    elif 'facebook' in x:\n        return 'facebook'\n    elif 'reddit' in x:\n        return 'reddit'\n    elif 'bing' in x:\n        return 'bing'\n    elif 'quora' in x:\n        return 'quora'\n    elif 'outlook' in x:\n        return 'outlook'\n    elif 'linkedin' in x:\n        return 'linkedin'\n    elif 'pinterest' in x:\n        return 'pinterest'\n    elif 'ask' in x:\n        return 'ask'\n    elif 'siliconvalley' in x:\n        return 'siliconvalley'\n    elif 'lunametrics' in x:\n        return 'lunametrics'\n    elif 'amazon' in x:\n        return 'amazon'\n    elif 'mysearch' in x:\n        return 'mysearch'\n    elif 'qiita' in x:\n        return 'qiita'\n    elif 'messenger' in x:\n        return 'messenger'\n    elif 'twitter' in x:\n        return 'twitter'\n    elif 't.co' in x:\n        return 't.co'\n    elif 'vk.com' in x:\n        return 'vk.com'\n    elif 'search' in x:\n        return 'search'\n    elif 'edu' in x:\n        return 'edu'\n    elif 'mail' in x:\n        return 'mail'\n    elif 'ad' in x:\n        return 'ad'\n    elif 'golang' in x:\n        return 'golang'\n    elif 'direct' in x:\n        return 'direct'\n    elif 'dealspotr' in x:\n        return 'dealspotr'\n    elif 'sashihara' in x:\n        return 'sashihara'\n    elif 'phandroid' in x:\n        return 'phandroid'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'mdn' in x:\n        return 'mdn'\n    elif 'duckduckgo' in x:\n        return 'duckduckgo'\n    elif 'seroundtable' in x:\n        return 'seroundtable'\n    elif 'metrics' in x:\n        return 'metrics'\n    elif 'sogou' in x:\n        return 'sogou'\n    elif 'businessinsider' in x:\n        return 'businessinsider'\n    elif 'github' in x:\n        return 'github'\n    elif 'gophergala' in x:\n        return 'gophergala'\n    elif 'yandex' in x:\n        return 'yandex'\n    elif 'msn' in x:\n        return 'msn'\n    elif 'dfa' in x:\n        return 'dfa'\n    elif '(not set)' in x:\n        return '(not set)'\n    elif 'feedly' in x:\n        return 'feedly'\n    elif 'arstechnica' in x:\n        return 'arstechnica'\n    elif 'squishable' in x:\n        return 'squishable'\n    elif 'flipboard' in x:\n        return 'flipboard'\n    elif 't-online.de' in x:\n        return 't-online.de'\n    elif 'sm.cn' in x:\n        return 'sm.cn'\n    elif 'wow' in x:\n        return 'wow'\n    elif 'baidu' in x:\n        return 'baidu'\n    elif 'partners' in x:\n        return 'partners'\n    else:\n        return 'others'\n\ndf_all['device.browser'] = df_all['device.browser'].map(lambda x:browser_mapping(str(x).lower())).astype('str')\ndf_all['trafficSource.adContent'] = df_all['trafficSource.adContent'].map(lambda x:adcontents_mapping(str(x).lower())).astype('str')\ndf_all['trafficSource.source'] = df_all['trafficSource.source'].map(lambda x:source_mapping(str(x).lower())).astype('str')\n\ndef process_device(data_df):\n    print(\"process device ...\")\n    data_df['source.country'] = data_df['trafficSource.source'] + '_' + data_df['geoNetwork.country']\n    data_df['campaign.medium'] = data_df['trafficSource.campaign'] + '_' + data_df['trafficSource.medium']\n    data_df['browser.category'] = data_df['device.browser'] + '_' + data_df['device.deviceCategory']\n    data_df['browser.os'] = data_df['device.browser'] + \"_\" + data_df['device.operatingSystem']\n    return data_df\n\ndf_all = process_device(df_all)\n\ndef custom(data):\n    print('custom..')\n    data['device_deviceCategory_channelGrouping'] = data['device.deviceCategory'] + \"_\" + data['channelGrouping']\n    data['channelGrouping_browser'] = data['device.browser'] + \"_\" + data['channelGrouping']\n    data['channelGrouping_OS'] = data['device.operatingSystem'] + \"_\" + data['channelGrouping']\n    data['contry_sess_date_hours'] = data['geoNetwork.country'] + \"_\" +data['sess_date_hours'].astype(str)\n    data['contry_sess_date_dom'] = data['geoNetwork.country'] + \"_\" +data['sess_date_dom'].astype(str)\n    \n    for i in ['geoNetwork.city', 'geoNetwork.continent', 'geoNetwork.country','geoNetwork.metro', 'geoNetwork.networkDomain', 'geoNetwork.region','geoNetwork.subContinent']:\n        for j in ['device.browser','device.deviceCategory', 'device.operatingSystem', 'trafficSource.source']:\n            data[i + \"_\" + j] = data[i] + \"_\" + data[j]\n    \n    data['content.source'] = data['trafficSource.adContent'] + \"_\" + data['source.country']\n    data['medium.source'] = data['trafficSource.medium'] + \"_\" + data['source.country']\n    return data\n\ndf_all = custom(df_all)","bd592317":"df_all = df_all.drop(categorical_features, axis=1, inplace=False)","90f89acd":"excluded_features = [\n    'date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', \n    'visitId', 'visitStartTime', 'vis_date', 'nb_sessions'\n]\n\ncat_cols = [\n    _f for _f in df_all.columns\n    if (_f not in excluded_features) & (df_all[_f].dtype == 'object')\n]","29f9512d":"for f in cat_cols:\n    df_all[f], indexer = pd.factorize(df_all[f])\n    \ndel cat_cols\ngc.collect();","6e355d53":"train = df_all[:len_train]\ntest = df_all[len_train:]\ndel df_all","fac7f022":"gc.collect()","96babcee":"y_reg = train['totals.transactionRevenue'].fillna(0)\ndel train['totals.transactionRevenue']\n\nif 'totals.transactionRevenue' in test.columns:\n    del test['totals.transactionRevenue']","69c1e3ed":"y_reg = pd.DataFrame(y_reg)","22993344":"train.to_csv(\"preprocessing_train.csv\",index=False)\ntest.to_csv(\"preprocessing_test.csv\",index=False)\ny_reg.to_csv(\"y_reg.csv\",index=False)","aecc7530":"### Define folding strategy","de8407d5":"### Feature engineering : page_hit","0a96732e":"### Label Encoding","e88ab81a":"### Feature Engineering : Session and time features","1e400192":"### Save the file","aff1ddf6":"### Feature Engineering #3","5fd4ae30":"### Frequency Encoding","445a8920":"### Mean encoding"}}