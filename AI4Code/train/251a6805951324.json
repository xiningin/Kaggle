{"cell_type":{"811e2b1f":"code","1cbe94e3":"code","2988a625":"code","2cd4b0ca":"code","1bda9561":"code","c03e3182":"code","29f16d40":"code","68b81229":"code","f3099903":"code","5156269a":"code","cb050edd":"code","6dd35735":"code","2d9881bd":"code","7971f73a":"code","19a7862f":"code","26ab25e1":"code","3b057447":"code","e2084f4e":"code","a87f7d48":"code","856a88d8":"code","7059c8c3":"code","9769292f":"code","74973bf5":"code","6877af38":"code","3b3905dc":"markdown","8adaa972":"markdown","d1325be7":"markdown","b58d9f30":"markdown","da70c094":"markdown","f7ead47f":"markdown","f6cd969a":"markdown","23569c77":"markdown","8569d56d":"markdown","7953ccf0":"markdown","a8f9d9ee":"markdown","55bc2b90":"markdown","605453d2":"markdown","12a8a8c6":"markdown","cd45e2b1":"markdown","beabba06":"markdown","a6450966":"markdown","5c5a7f9d":"markdown","989863ac":"markdown","b7467efe":"markdown","32d50a16":"markdown","22902a95":"markdown","c1dec30e":"markdown","dbc56273":"markdown","738fcfdc":"markdown","74c0e2dc":"markdown"},"source":{"811e2b1f":"import numpy as np\nimport pandas as pd\n\nfrom ast import literal_eval\nfrom collections import Counter\nimport re\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","1cbe94e3":"df = pd.read_csv('..\/input\/lyrics-dataset\/songs_dataset.csv')\ndf.head()","2988a625":"print(f'Dataset contains {df.shape[0]} songs')","2cd4b0ca":"df['Featuring'] = df['Featuring'].apply(literal_eval)\ndf['Genre'] = df['Genre'].apply(literal_eval)\ndf['Tags'] = df['Tags'].apply(literal_eval)\ndf['Producers'] = df['Producers'].apply(literal_eval)\ndf['Writers'] = df['Writers'].apply(literal_eval)\ndf['Date'] = pd.to_datetime(df['Date'])","1bda9561":"null_cols = df.isnull().sum()\nprint('Number of missing values:')\nprint(null_cols[null_cols != 0])\nprint('Number of missing values in pct:')\nprint((null_cols[null_cols != 0] \/ df.shape[0]).apply(lambda x: f'{x*100:.2f}%'))","c03e3182":"df = df[pd.isnull(df['Date']) | (df['Date'] >= '1950-01-01')].reset_index(drop=True)","29f16d40":"df[df['Date'] >= '2020-01-01'].head()","68b81229":"df = df[df['Date'] < '2020-01-01']","f3099903":"df['Year'] = df['Date'].apply(lambda x: x.year)\n# yes, you can put here any aggregation function you want, not only 'max', 'mean', etc\ninterval_aggregation = df.groupby(['Year'], as_index=False).agg({'Singer': pd.Series.nunique,\n                                                                 'Song': pd.Series.count,\n                                                                 'Album': pd.Series.nunique})\ninterval_aggregation.head()","5156269a":"# https:\/\/plot.ly\/python\/bar-charts\/\nfig = px.bar(interval_aggregation, x='Year', y='Song',\n             # columns values that can be observed while hover over bar\n             hover_data=['Singer', 'Album'],\n             # just an alias to column names to be shown on chart\n             labels={'Year': 'Year',\n                     'Song': 'Number of songs', \n                     'Singer': 'Number of singers',\n                     'Album': 'Number of albums'},\n             # color of the bar will depend on value of this column\n             color='Song',\n             # you can play with different colormaps: \n             # https:\/\/plot.ly\/python\/colorscales\/ \n             # https:\/\/plot.ly\/python\/plotly-express\/\n             color_continuous_scale='Cividis',\n             # you can specify a title, its adjustment will be shown further\n             title='Distribution of number of songs over years'   \n            )\nfig.show()","cb050edd":"# you can put here any N you want, in my case N=3. \n# works right out of the box.\nyears_in_interval = 3\n\nmin_year = df['Date'].min().year\nmax_year = df[\"Date\"].max().year\n\"\"\nstart = min_year - 1\nend = max_year + years_in_interval - ((max_year - min_year) % years_in_interval)\n\nyear_bins = pd.date_range(f'{start}-12-31', f'{end}-01-01', freq=f'{years_in_interval}Y')\nyear_bins_labels = [f'{year_bins[i-1].year+1}-{year_bins[i].year}' \n                    for i in range(1, len(year_bins))]","6dd35735":"df['Date_bin'] = pd.cut(df['Date'], \n                        bins=year_bins, \n                        labels=year_bins_labels)\ndf.head()","2d9881bd":"interval_aggregation = df.groupby(['Date_bin'], as_index=False).agg({'Singer': pd.Series.nunique, \n                                                                     'Song': pd.Series.count,\n                                                                     'Album': pd.Series.nunique})\n# we will be original and remember about \".tail()\"\ninterval_aggregation.tail()","7971f73a":"fig = px.bar(interval_aggregation, x='Date_bin', y='Song',\n             hover_data=['Singer', 'Album'],\n             labels={'Date_bin': 'Time interval',\n                     'Song': 'Number of songs',\n                     'Singer': 'Number of singers',\n                     'Album': 'Number of albums'},\n             color='Song',\n             color_continuous_scale='Magma'\n            )\n\nx_tick_vals = list(range(0, interval_aggregation['Song'].max() + 2000, 2000))\n\n# https:\/\/plot.ly\/python\/tick-formatting\/ - formatting ticks\n# https:\/\/plot.ly\/python\/axes\/ - setting axes\n# https:\/\/plot.ly\/python\/figure-labels\/ - setting font\nfig.update_layout(\n    title=dict(text='Distribution of number of songs over year bins', \n               font_size=30,\n               font_family='Ubuntu, monospace',\n               font_color='#C23C74'\n    ),\n    xaxis=dict(\n        showgrid=True,\n        ticks='outside', \n        ticklen=10,\n        tickcolor='#FA8965',\n        color='black'\n    ),\n    yaxis=dict(\n        showgrid=True,\n        tickvals=x_tick_vals,\n        ticktext=[' ']+[f'{x\/\/1000}k' for x in x_tick_vals][1:],\n        color='#390F68'\n    )\n)\n\nfig.show()","19a7862f":"genre_dict = Counter([tag for tags in df['Genre'].tolist() for tag in tags])\ngenre_dict.most_common()","26ab25e1":"genres = {'Hip-Hop\/Rap': None, 'Rock': None}\nn_singers = 10\n\nfor genre in genres:\n    # check if genre types are in tags\n    df[f'is_{genre}'] = df['Genre'].apply(lambda x: not bool(set(x).isdisjoint([genre]))) \n    \n    top_singers = (df[df[f'is_{genre}']]\n                   .groupby('Singer', as_index=False)\n                   ['Song'].count()\n                   .sort_values(by='Song', ascending=False)\n                   .iloc[:n_singers, 0])\n    singer_songs = (df[df['Singer'].isin(top_singers)]\n                    .groupby(['Singer', 'Year'], as_index=False)\n                    .agg({'Song': pd.Series.count,\n                          'Album': pd.Series.nunique}))\n    \n    singer_songs['Song'] = singer_songs.groupby(['Singer'])['Song'].cumsum()\n    singer_songs['Album'] = singer_songs.groupby(['Singer'])['Album'].cumsum()\n    genres[genre] = singer_songs","3b057447":"# black magic here, be careful!\nfigs = []\nfor genre in genres:\n    figs.append(px.scatter(genres[genre], x=\"Year\", y=\"Song\", \n                           color='Singer', \n                           size='Album', \n                           hover_name='Singer',\n                           labels={'Year': 'Year',\n                                   'Song': 'Number of songs',\n                                   'Album': 'Number of albums'}\n                          ))\n\n# it's a little bit of illegal to do subplots with  px\n# but we are not that simple: we can hardcode this!\n# https:\/\/github.com\/plotly\/plotly_express\/issues\/83\ntraces = [fig['data'] for fig in figs]\n\n# https:\/\/plot.ly\/python\/subplots\/\nfig = make_subplots(rows=len(genres), cols=1, \n                    vertical_spacing=0.05,\n                    shared_xaxes=True,\n                    subplot_titles=list(genres.keys()))\n\nfor i in range(len(genres)):\n    for trace in traces[i]:\n        fig.add_trace(trace, row=i+1, col=1)\n\nfig.update_layout(title=dict(text='Number of songs of singers over the years', \n                             font_size=30,\n                             font_family='Ubuntu'\n                            ),\n                  height=400*len(genres), \n                  showlegend=False,\n                  font_size=16,\n                  font_family='Ubuntu'\n                 )\n# annotations here are actually subplots titles \nfor i in fig['layout']['annotations']:\n    i['font'] = dict(size=20, family='Ubuntu')\n\n# to show not only markers, but also connecting them with lines\nfig.update_traces(mode='lines+markers')\nfig.show()","e2084f4e":"df_hip_hop = df[df['is_Hip-Hop\/Rap']].copy()\n# hip-hop before 90s differs a lot from its current state  \ndf_hip_hop = df_hip_hop[df_hip_hop['Year'] >= 1990]","a87f7d48":"# for better tokenization \ndef format_lyrics(lyrics):\n    lyrics = re.sub('[*.,!:?\\\"\\'\u00ab\u00bb]', '', lyrics)\n    lyrics = re.sub('[-\u2013\u2014\u2014 ]+', ' ', lyrics)\n    lyrics = lyrics.strip()\n    lyrics = lyrics.lower()\n    return lyrics","856a88d8":"df_hip_hop['Lyrics'] = df_hip_hop['Lyrics'].apply(format_lyrics)\nwords = df_hip_hop['Lyrics'].apply(lambda x: x.split())\n\ndf_hip_hop['number_of_words'] = words.apply(len)\ndf_hip_hop['unique_words_count'] = words.apply(lambda x: len(list(set(x))))\ndf_hip_hop['unique_words_proportion'] = df_hip_hop['unique_words_count'] \/ df_hip_hop['number_of_words']\ndf_hip_hop.head()","7059c8c3":"unique_words_df = df_hip_hop.groupby(['Year'], as_index=False).agg({'Song': pd.Series.count, \n                                                                    'number_of_words': 'mean',\n                                                                    'unique_words_count': 'mean',\n                                                                    'unique_words_proportion': 'mean'})\nunique_words_df.head()","9769292f":"# this way you can do second axis\n# https:\/\/plot.ly\/python\/multiple-axes\/\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# you shold add each plot to figure separately to left and right Y axis\nfig.add_trace(\n    go.Scatter(x=unique_words_df['Year'], \n               y=unique_words_df['number_of_words'], \n               mode='lines+markers',\n               text=unique_words_df[['Year', 'Song']],\n               name='All words',\n              ), \n    secondary_y=False\n)\nfig.add_trace(\n    go.Scatter(x=unique_words_df['Year'], \n               y=unique_words_df['unique_words_count'], \n               mode='lines+markers',\n               text=unique_words_df['Year'],\n               name='Unique words',\n              ), \n    secondary_y=False\n)\nfig.add_trace(\n    go.Scatter(x=unique_words_df['Year'], \n               y=unique_words_df['unique_words_proportion'], \n               mode='lines+markers',\n               text=unique_words_df['Year'],\n               name='Unique words proportion',\n               marker_color='green' # paint right Y axis with one color\n              ), \n    secondary_y=True\n)\n\nfig.update_layout(\n    title=dict(text='How Hip-Hop lyrics are changing over years', \n               font_size=30,\n               font_family='Ubuntu'\n              ),\n)\n\n# this way you can work with different axis (left and right)\nfig.update_yaxes(title_text='Mean <b>Number<\/b> of words', \n                 secondary_y=False)\nfig.update_yaxes(title_text='Mean <b>Proportion<\/b> of words', \n                 color='green',  # paint right Y axis with one color\n                 showgrid=False, # to remove additional ugly grid\n                 secondary_y=True)\n\nfig.show()","74973bf5":"singer = 'Eminem'\ntemp = df[df['Singer'] == singer]\nsinger_feats_count = Counter([tag for tags in temp['Featuring'].tolist() for tag in tags])\nsinger_feats_count = Counter({key: val for key, val in singer_feats_count.items() if val > 1})","6877af38":"fig = go.Figure(data=[go.Pie(labels=list(singer_feats_count.keys()), \n                             values=list(singer_feats_count.values()), \n                             hole=0.2\n                            )])\n\nfig.update_traces(hoverinfo='label+value',\n                  textinfo='value',\n                  textfont_size=20,\n                  marker=dict(line=dict(color='#000000', width=1))\n                 )\n\nfig.update(layout_title_text=f'{singer}\\'s feats',\n           layout_showlegend=False\n          )\n\nfig.show()\n","3b3905dc":"Okay, now it's time to look at data, especially genres and dates.  \nWe will leave songs released after 1950 (yes, there are songs until 1950):","8adaa972":"First of all, let's convert `Featuring`, `Genre`, `Tags`, `Producers` and `Writers` to list, because now they are represented as strings.  \nAnd convert `Date` to datetime.","d1325be7":"Interesting... Do we have songs from future?","b58d9f30":"# Summary","da70c094":"Let's just look at the, f.e., Eminem's feats (singer that was on feat more than 1 time) on pie chart","f7ead47f":"Let's compute number of songs, albums and singers over each `Date_bin`  \nAnd take a look at the aggregated data ","f6cd969a":"# A little bit of dates","23569c77":"**TOO MANY BARS...**  \nBut how can we handle it? I know that you are thinking about how can we can put `Date` to date intervals and look from that perspective.  \nFor example, we want intervals with length of 3 years over whole dataset.","8569d56d":"We can see how many songs, albums and singers in every year we have in the dataset:","7953ccf0":"# Rap: Old School VS New School","a8f9d9ee":"Let's drop these songs from the future so that the data is cleaner:","55bc2b90":"I want to find out if modern rap is really degrading. Are the lyrics worsening because if guys like **Lil Pump** (esskeetit), and if so, how much.","605453d2":"Now let's take a look at Top-10 singers with the largest number of songs in Rock and Hip-Hop  \n(or any other genres, again, works right out of the box)","12a8a8c6":"Obviously, not perfect, but that's better than nothing \u00af\\_(\u30c4)_\/\u00af","cd45e2b1":"Now let's see how the number of unique words in texts has changed over the years:","beabba06":"# And the last stage - a bit of feats analysis","a6450966":"# Looking at the data","5c5a7f9d":"# That's all Folks!","989863ac":"Looks pretty good... Let's move on! Right to the artists and genres!  \nTo start, we need to know most common genres in our dataset and here they are:","b7467efe":"Now let's look at missing values","32d50a16":"Well, result is not surprising. Dataset contains a lot of Rap, Rock and Pop","22902a95":"Now we can bin `Date` to year intervals","c1dec30e":"I hope this Kernel helps you!  \n**I also want to leave you with some ideas**:\n* Lyrics generation in different genres;\n* Lyrics classificaion;\n* Singers or genres clusterization;\n* Singers relation graph based on songs feats.\n\n**Upvote if you find this useful!  \nGood luck with further researches!**","dbc56273":"This is a tutorial, right? So let's play with fonts, ticks, colors and so on! Settings are inside","738fcfdc":"Here on the left Y axis we see mean number of words in songs. And on the right one we see proportion (e.g. all\/unique).  \n  \nWell, we clearly see (**with this data**) that hip-hop texts have become easier since 2010.  \nWhether it is bad or not is up to you.","74c0e2dc":"This is starter Kernel for the largest on Kaggle [music dataset](https:\/\/www.kaggle.com\/detkov\/lyrics-dataset). And here what we'll do:\n\n1. EDA for this dataset\n2. Plotly tutorial\n3. Basic ideas of usage and applicability of this dataset\n\n*Don't forget that there is a second part of the dataset with lyrics parts!*"}}