{"cell_type":{"f9f20441":"code","74774bbe":"code","97f49f30":"code","3990fc58":"code","ff73d210":"code","3be1ca63":"code","218c170b":"code","8269271d":"code","48b18af6":"code","bfaad62a":"code","270aa765":"code","febc6490":"code","39db7bd1":"code","9cd08668":"code","ddac1b89":"code","0153308f":"code","01db2267":"code","446f93b4":"code","6bbe43ce":"code","7ad9b483":"code","e6882ee6":"code","cc80bc12":"code","bf847fe7":"code","50ab3814":"code","12b2124b":"code","5fe2095a":"code","2f05712e":"code","c913154d":"markdown","8a580bfb":"markdown","50fcbbc4":"markdown","72d23679":"markdown","fbf1d7fa":"markdown","9443d73e":"markdown","3f51d0a0":"markdown","84a95fbd":"markdown","ec035c09":"markdown","5059bb6b":"markdown","3bee0e14":"markdown","2dc3695e":"markdown","53d64072":"markdown","3e755665":"markdown","a8f898b5":"markdown","ea138b9d":"markdown","5a09a40c":"markdown","312b8db6":"markdown"},"source":{"f9f20441":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","74774bbe":"!pip install https:\/\/github.com\/scikit-learn-contrib\/scikit-learn-extra\/archive\/master.zip","97f49f30":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nfrom sklearn_extra.cluster import KMedoids","3990fc58":"from sklearn import datasets\nmyiris = datasets.load_iris()\nx = myiris.data\ny = myiris.target","ff73d210":"y.shape","3be1ca63":"y","218c170b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler().fit(x)\nx_scaled = scaler.transform(x)\nkMedoids = KMedoids(n_clusters = 3, random_state = 0)\nkMedoids.fit(x_scaled)\ny_kmed = kMedoids.fit_predict(x_scaled)","8269271d":"y_kmed","48b18af6":"kMedoids.inertia_","bfaad62a":"from sklearn.metrics import silhouette_samples, silhouette_score\nkMedoids = KMedoids(n_clusters = 3, random_state = 0)\nkMedoids.fit(x_scaled)\ny_kmed = kMedoids.fit_predict(x_scaled)\nsilhouette_avg = silhouette_score(x_scaled, y_kmed)\nprint(silhouette_avg)","270aa765":"sample_silhouette_values = silhouette_samples(x_scaled, y_kmed)\nfor i in range(3):\n    ith_cluster_silhouette_values = sample_silhouette_values[y_kmed == i]\n    print(np.mean(ith_cluster_silhouette_values))","febc6490":"sw = []\n\nfor i in range(2, 11):\n    kMedoids = KMedoids(n_clusters = i, random_state = 0)\n    kMedoids.fit(x_scaled)\n    y_kmed = kMedoids.fit_predict(x_scaled)\n    silhouette_avg = silhouette_score(x_scaled, y_kmed)\n    sw.append(silhouette_avg)\n    ","39db7bd1":"plt.plot(range(2, 11), sw)\nplt.title('Silhoute Score')\nplt.xlabel('Number of clusters')\nplt.ylabel('SW')      #within cluster sum of squares\nplt.show()","9cd08668":"from sklearn import metrics\n\ndef purity_score(y_true, y_pred):\n    # compute contingency matrix (also called confusion matrix)\n    contingency_matrix = metrics.cluster.contingency_matrix(y_true, y_pred)\n    # return purity\n    return np.sum(np.amax(contingency_matrix, axis=0)) \/ np.sum(contingency_matrix) ","ddac1b89":"kmeans = KMeans(n_clusters = 3, init = 'random', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(x_scaled)\npurity_score(y,y_kmeans)","0153308f":"plt.scatter(x_scaled[y_kmeans == 0, 0], x_scaled[y_kmeans == 0, 1], s = 100, c = 'red', label = 'C1')\nplt.scatter(x_scaled[y_kmeans == 1, 0], x_scaled[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'C2')\nplt.scatter(x_scaled[y_kmeans == 2, 0], x_scaled[y_kmeans == 2, 1], s = 100, c = 'green', label = 'C3')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')\nplt.legend()","01db2267":"kmedoids = KMedoids(n_clusters=3, random_state=0).fit(x_scaled)\ny_kmed = kmedoids.fit_predict(x_scaled)\npurity_score(y,y_kmed)","446f93b4":"plt.scatter(x_scaled[y_kmed == 0, 0], x_scaled[y_kmed == 0, 1], s = 100, c = 'red', label = 'C1')\nplt.scatter(x_scaled[y_kmed == 1, 0], x_scaled[y_kmed == 1, 1], s = 100, c = 'blue', label = 'C2')\nplt.scatter(x_scaled[y_kmed == 2, 0], x_scaled[y_kmed == 2, 1], s = 100, c = 'green', label = 'C3')\nplt.scatter(kmedoids.cluster_centers_[:, 0], kmedoids.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')\nplt.legend()","6bbe43ce":"x","7ad9b483":"import numpy as np\nm=np.append(x,[[10,10,10,10],[15,15,15,15],[12,12,12,12]],axis=0)\nm.shape\ny=np.append(y,[2,2,2])\ny","e6882ee6":"m.shape","cc80bc12":"scaler = StandardScaler().fit(m)\nx_scaled = scaler.transform(m)","bf847fe7":"kmeans = KMeans(n_clusters = 3, init = 'random', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(x_scaled)\npurity_score(y,y_kmeans)","50ab3814":"kmedoids = KMedoids(n_clusters=3, random_state=0).fit(x_scaled)\ny_kmed = kmedoids.fit_predict(x_scaled)\npurity_score(y,y_kmed)","12b2124b":"plt.scatter(x_scaled[y_kmeans == 0, 0], x_scaled[y_kmeans == 0, 1], s = 100, c = 'red', label = 'C1')\nplt.scatter(x_scaled[y_kmeans  == 1, 0], x_scaled[y_kmeans  == 1, 1], s = 100, c = 'blue', label = 'C2')\nplt.scatter(x_scaled[y_kmeans  == 2, 0], x_scaled[y_kmeans== 2, 1], s = 100, c = 'green', label = 'C3')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 100, c = 'yellow', label = 'Centroids')\nplt.legend()","5fe2095a":"data = [['k-Means', 0.81], ['k-Means with Outliers', 0.67], ['k-Medoid', 0.84],['K Medoid with outliers', 0.86]] \ndf = pd.DataFrame(data, columns = ['Method', 'Purity']) ","2f05712e":"df.plot.bar(x='Method',y='Purity',title='Cluster Quality')","c913154d":"### Purity","8a580bfb":"### KMeans on Iris","50fcbbc4":"![image.png](attachment:image.png)","72d23679":"### Silhouette Width","fbf1d7fa":"### Scaling and Fitting KMedoids","9443d73e":"### Installing sklearn Extra","3f51d0a0":"# Question 4: How to compute Purity <a id=\"4\"><\/a>","84a95fbd":"* [<font size=4>Question 1:How to  fit kMedoids?<\/font>](#1)\n* [<font size=5>Question 2: How to calculate Silhouette score for a cluster?<\/font>](#2)   \n* [<font size=4>Question 3: How to use Silhouette score for finding optimal number of cluster?<\/font>](#3)   \n* [<font size=5>Question 4: How to calculate purity?<\/font>](#4)  \n* [<font size=6>Question 5: How extreme observations effect k-Medoids compared to K-Means<\/font>](#5)  ","ec035c09":"### Adding Extreme Values","5059bb6b":"![image.png](attachment:image.png)","3bee0e14":"# Question 3: How to use Silhouette Width to find number of cluster <a id=\"3\"><\/a>","2dc3695e":"# Question 2: How to use Silhouette to evaluate cluster <a id=\"2\"><\/a>","53d64072":"\n![image.png](attachment:image.png)","3e755665":"![image.png](attachment:image.png)","a8f898b5":"### loading Data","ea138b9d":"# Question 5: How extreme values effect k-Medoid compared to k-Means <a id=\"5\"><\/a>","5a09a40c":"# Question 1: How to fit kMedoids <a id=\"1\"><\/a>","312b8db6":"### Visualization"}}