{"cell_type":{"f1a964df":"code","a75701e4":"code","00e53ede":"code","e33c9f4a":"code","a4b2f44a":"code","0845f413":"code","a34970ae":"code","27d24bb8":"code","9b9c2fe6":"code","09ef6227":"code","6bc35dad":"code","e99ef3de":"code","dc570670":"code","c61d47d5":"code","4ec8202f":"code","10f9c8c4":"code","2036c25b":"code","7c0efb0c":"code","1266cc83":"code","d3a4539d":"code","a85fc253":"code","3a9b25d7":"code","d4974c38":"markdown","33c34627":"markdown","edf015e6":"markdown","adca094c":"markdown","b0ead8fa":"markdown","638b6d26":"markdown","d51bade1":"markdown","637d941c":"markdown","d60f64e2":"markdown","cdaa4059":"markdown","8c4754c9":"markdown","cd1d6789":"markdown","a3396c8b":"markdown","80778b26":"markdown","5f543c1e":"markdown","a9974331":"markdown","8e9df564":"markdown"},"source":{"f1a964df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# use Seaborn styles\nsns.set() \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nemergency = pd.read_csv(\"..\/input\/911.csv\")\nemergency.head()\n# Any results you write to the current directory are saved as output.","a75701e4":"total = emergency.isnull().sum().sort_values(ascending=False)\ntotal\n#Two columns have null values - zip and twp","00e53ede":"percent = (emergency.isnull().sum()\/emergency.isnull().count()).sort_values(ascending = False)\n#print(percent)\npd1 = pd.concat([total,percent],axis =1 ,keys=['Total','Percent'])\npd2 = pd1[pd1['Total']>0]\nprint(pd2)\n#zip has 0.12 percent of null values\n#twp has very small percent of null values","e33c9f4a":"#to reset the index\n#emergency.reset_index(inplace=True)\ntitle1 = emergency.pivot_table(values = 'e',index=['title'],aggfunc='count')\n\n#display the top 10 title\nprint(title1.sort_values('e',ascending=False).head(10))\n\n#groupby on the basis of title and then plot a pie chart\nemergency.groupby(['title'])['title'].size().sort_values(ascending=False).head(7).plot(kind='pie',autopct='%1.1f%%')\n\n#'Traffic: VEHICLE ACCIDENT' title has the highest 911 calls","a4b2f44a":"#Extract only the titles with 'Traffic' and display the top 5 titles\nprint(title1[title1.index.str.contains('^Traffic')].sort_values('e',ascending=False).head(5))","0845f413":"#Extracting the type from the titles and storing it in a new column\nemergency['type'] = emergency[\"title\"].apply(lambda x: x.split(':')[0])\nemergency.head()","a34970ae":"#emergency.reset_index(inplace=True)\ntitle2 = emergency.pivot_table(values = 'e',index=['type'],aggfunc='count').sort_values('e',ascending=False)\nprint(title2)\ntitle2.plot(kind='bar')\nplt.ylabel(\"count\")\n\n#EMS type has the highest count of 911 calls although the \n#'Traffic: VEHICLE ACCIDENT' title has the highest count of 911 calls","27d24bb8":"#pie-chart displaying the percent of different types\nemergency.groupby(['type'])['type'].size().sort_values(ascending=True).plot(kind='pie',autopct='%1.1f%%')","9b9c2fe6":"#emergency.reset_index(inplace=True)\ntitle3 = emergency.pivot_table(values = 'e',index=['type','title'],aggfunc='count')\ntitle4 = title3[title3.e>5000]\nprint(title4)\ntitle4.plot(kind='barh')\nplt.ylabel(\"count\")","09ef6227":"#To extract the timestamp\n\nemergency['timeStamp']=pd.to_datetime(emergency.timeStamp)\nemergency['year']=emergency['timeStamp'].dt.year\nemergency['month']=emergency['timeStamp'].dt.month\nemergency['quarter']=emergency['timeStamp'].dt.quarter\nemergency['hour']=emergency['timeStamp'].dt.hour\nemergency.head()","6bc35dad":"#To display the 911 calls for each month and display it for each type\nsns.countplot(emergency['month'],hue = emergency['type'],palette=\"Blues\")\n\n#At the start of the year and also at the end of the year, the 911 calls\n#are high (Jan,Feb,March and December)","e99ef3de":"#To display the 911 calls for each quarter and display it for each type\nsns.countplot(emergency['quarter'],hue = emergency['type'],palette=\"Blues\")\n\n#For quarter 1, the count of 911 calls for EMS type is highest\n# For type - 'Fire', the calls are equally spread out for all the quarters","dc570670":"#Histogram plot with the variation in calls during the hours of the day\nsns.kdeplot(emergency.hour,shade=True)\nplt.title(\"Histogram of hour\")\nplt.xlabel(\"Hour\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n#At around 4 PM, the number of calls have peaked and are lower during the\n#early hours of the day(3-5 AM)","c61d47d5":"#scatter plot\nplt.plot(emergency.lat, emergency.lng, 'o', color='blue');\nplt.title(\"Scatter Plot of Location of Calls\")\nplt.xlabel(\"Lattitude\")\nplt.ylabel(\"Longitutde\")\nplt.show()\n#seeing the scatter plot we can see that most of the emergencies \n#are from around lat = 40 and lon = -75 i.e. from a particular area\n#upon checking the data - town 'LOWER MERION' is around the clustered (lat,Lon)","4ec8202f":"#create a subset of only the EMS type\nems = emergency[emergency['type']=='EMS']\n#ems.reset_index(inplace=True)\nems_subset = ems[['timeStamp','title','e']]","10f9c8c4":"#merge the count of calls on the basis of week using resample.\n#This can be done as this is a time series data\n\npiv=pd.pivot_table(ems_subset, values='e', index=['timeStamp'], columns=['title'], aggfunc=np.sum)\npiv1=piv.resample('W', how=[np.sum]).reset_index()  #'W' represents the week\npiv1.head()","2036c25b":"#Plot for 'EMS: ASSAULT VICTIM' on the basis of the timestamp\n\nplt.xticks(rotation=90)\nplt.plot_date(piv1['timeStamp'], piv1['EMS: ASSAULT VICTIM'],'k')\nplt.title(\"Timestamp Analysis for 'EMS: ASSAULT VICTIM'\")\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Frequency\")\nplt.tight_layout()\nplt.show()\n\n#Seeing the plot we can observe that during october of 2016, the calls for\n#'EMS: ASSAULT VICTIM' were highest\n#Also seeing the trend, the calls for 'EMS: ASSAULT VICTIM' increased\n#as the year 2016 progressed. But it didn't follow the same trend in 2017\n#and fluctuated throughout the year 2017","7c0efb0c":"#comparison betwen 'EMS: ASSAULT VICTIM' and 'EMS: ALTERED MENTAL STATUS'\n\nplt.subplot()\nplt.xticks(rotation=90)\nplt.plot_date(piv1['timeStamp'], piv1['EMS: ASSAULT VICTIM'],'k')\n#plt.plot_date(piv1['timeStamp'], piv1['EMS: ASSAULT VICTIM'],'r.')\n\n\nplt.plot_date(piv1['timeStamp'], piv1['EMS: ALTERED MENTAL STATUS'],'y')\n#plt.plot_date(piv1['timeStamp'], piv1['EMS: ALTERED MENTAL STATUS'],'b.')\n#plt.set_title(\"EMS: ASSAULT VICTIM vs  EMS: ALTERED MENTAL STATUS\")\n\nplt.title(\"Comparison betwen 'EMS: ASSAULT VICTIM' and 'EMS: ALTERED MENTAL STATUS'\")\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Frequency\")\nplt.plot()\n\n#from the plot we can observe that 'EMS: ALTERED MENTAL STATUS' has higher\n#calls compared to the 'EMS: ASSAULT VICTIM'.\n#Seeing the trend of 'EMS: ALTERED MENTAL STATUS', we can observe that there\n#is no specific pattern to it.\n#Only during the end of 2016, 'EMS: ASSAULT VICTIM' peaks and crosses the\n#count of 'EMS: ALTERED MENTAL STATUS'","1266cc83":"#Top 10 towns with the 911 emergecny calls\ntown = emergency.pivot_table(values = 'e',index=['twp'],aggfunc='count')\nprint(town.sort_values('e',ascending=False).head(10))\nemergency.groupby(['twp'])['twp'].size().sort_values(ascending=False).head(7).plot(kind='pie',autopct='%1.1f%%')\n\n#Seeing the table and pie-chart,we can observe that 'LOWER MERION' made\n#the highest 911 calls","d3a4539d":"#As town 'LOWER MERION' has the highest 911 calls, we drill down to\n#that data and check the data\n\ntwp = emergency[emergency['twp']=='LOWER MERION']\n\n#countplot month wise for town = 'LOWER MERION'\nsns.countplot(twp['month'],hue = twp['type'],palette=\"Blues\")\n\n#Seeing the countplot for the town = 'LOWER MERION', we can observe the\n#same trend as was observed for the entire emergency data.","a85fc253":"plt.figure(1)\nsns.kdeplot(twp.hour,shade=True)\nplt.title(\"Histogram of hour for town ='LOWER MERION'\")\nplt.xlabel(\"Hour\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\nplt.figure(2)\ntwp_EMS = twp[twp['type']=='EMS']\nsns.kdeplot(twp_EMS.hour,shade=True)\nplt.title(\"Histogram of hour for town ='LOWER MERION'and type = 'EMS'\")\nplt.xlabel(\"Hour\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n#Here plot 1 is for town = 'LOWER MERION' and plot is for the drilled\n#down data of plot 1 with type as 'EMS'\n\n#Seeing both the plots we can observe that with further drill down of data\n#of 'LOWER MERION' town, there is a shift in the peak in the hour of the\n#day with highest 911 calls.\n#For town = 'LOWER MERION', at around 3 PM the 911 calls peaked\n#while only checking for EMS type calls, the peak shifts at around 12 PM","3a9b25d7":"twp_Traffic = twp[twp['type']=='Traffic']\nsns.kdeplot(twp_Traffic.hour,shade=True)\nplt.title(\"Histogram of hour for town ='LOWER MERION' and Type = 'Traffic'\")\nplt.xlabel(\"Hour\")\nplt.ylabel(\"Frequency\")\nplt.show()\n#on the other hand for type as Traffic, the peak shifts towards right\n#at around 4 PM\n\n#This explains that for different types of 911 calls, the peak hours vary","d4974c38":"**Q12 - Comparing the data with town = 'LOWER MERION' and the drilled down date of LOWER MERION town with type as 'EMS'**","33c34627":"**Q6 - Histogram plot showing the variations in the emergencies with the change in hour of the day**","edf015e6":"**Q8 - Plot the line graph showing the timestamp for the Assault Victims **","adca094c":"**Q10 - Top 10 towns with the 911 emergency calls**","b0ead8fa":"**Q2 - Top 10 titles on the basis of the count of 911 emergency calls in a table and displayed in a pie chart**","638b6d26":"**Q5 - Count plot the emergencies month-wise and quarter-wise for each of the types**","d51bade1":"**Q9 - Compare the Assault victim and the Altered Mental Status emergencies week wise**","637d941c":"**Q7 - Scatter plot of the longitute and lattitude of the emergencies**","d60f64e2":"**Q11 - Drill down for town = 'LOWER MERION' and observe the monthwise 911 calls**","cdaa4059":"**Extract only the EMS type dataset and store the timestamp and title in a subset**","8c4754c9":"**Q3  Bar plot and pie plot of the type of emergency\nBar plot - showing the count of the different types\nPie plot - Showing the perecentage of the different types****        ","cd1d6789":"**Do a pivot to display all the EMS types in columns and perform resampling in the time series data on week basis**","a3396c8b":"**Parsing the timestamp columns and creating new columns for year,month,quarter,hour and minute**","80778b26":"**Q1 - Calculate the percentage of missing values column wise**","5f543c1e":"**Seperate the type of the title and add it in a new column - 'type'**","a9974331":"**Q4 - Showing the top titles for each types using pivot table and displaying it in a bar chart**","8e9df564":"**Top 5 Traffic emergency titles**"}}