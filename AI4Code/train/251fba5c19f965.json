{"cell_type":{"5eb47e47":"code","0f8bb7d3":"code","053539fc":"code","d8a63016":"code","f70c4f45":"code","4fb8f0fb":"code","12146d02":"code","8467e82c":"code","d9796c9e":"code","18fbb130":"code","aabcd8f7":"code","166d12e1":"code","23b65c9c":"code","5d84ca56":"code","bf74f1ad":"code","7be7fcbc":"markdown","b383171b":"markdown"},"source":{"5eb47e47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f8bb7d3":"import matplotlib.pyplot as plt\nimport regex as re\nimport sqlite3\nfrom wordcloud import WordCloud","053539fc":"df=pd.read_csv(\"..\/input\/email-spam-dataset\/Email spam.csv\")","d8a63016":"df.head()","f70c4f45":"df.shape","4fb8f0fb":"df.info()","12146d02":"print('Spam count',len(df.loc[df['spam']==1]))\nprint('Not spam count',len(df.loc[df['spam']==0]))","8467e82c":"print(df.shape)\n\ndf=df.drop_duplicates()\n\nprint(df.shape)","d9796c9e":"df = df.reset_index(inplace = False)[['text','spam']]","18fbb130":"df.head()","aabcd8f7":"df['spam'].unique()","166d12e1":"clean_desc = []\nfor w in range(len(df.text)):\n    desc = df['text'][w].lower()\n    \n    #remove punctuation\n    desc = re.sub('[^a-zA-Z]', ' ', desc)\n    \n    #remove tags\n    desc=re.sub(\"&lt;\/?.*?&gt;\",\" &lt;&gt; \",desc)\n    \n    #remove digits and special chars\n    desc=re.sub(\"(\\\\d|\\\\W)+\",\" \",desc)\n    \n    clean_desc.append(desc)\n#assign the cleaned descriptions to the data frame\ndf['text'] = clean_desc\ndf = df.reset_index()        \ndf.head(3)","23b65c9c":"stop_words = ['is','you','your','and', 'the', 'to', 'from', 'or', 'I', 'for', 'do', 'get', 'not', 'here', 'in', 'im', 'have', 'on', 're', 'new', 'subject']","5d84ca56":"word_cloud=WordCloud(width=800,height=800,background_color='black',stopwords=stop_words,min_font_size=20).generate(str(df['text']))\n\nfig=plt.figure(figsize=(8,8),facecolor=None)\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.show()","bf74f1ad":"df1 =df.loc[df.spam==0]\ndf2 =df.loc[df.spam==1]\n\nword_cloud=WordCloud(width=800,height=800,background_color='black',stopwords=stop_words,min_font_size=20).generate(str(df1['text']))\n\nfig=plt.figure(figsize=(8,8),facecolor=None)\nplt.title('Non spam messages')\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.show()\n\nword_cloud=WordCloud(width=800,height=800,background_color='black',stopwords=stop_words,min_font_size=20).generate(str(df2['text']))\n\nfig=plt.figure(figsize=(8,8),facecolor=None)\nplt.title('Spam messages')\nplt.imshow(word_cloud)\nplt.axis('off')\nplt.show()","7be7fcbc":"**From the above two plots, we can see the keywords in the spam and non spam messages**","b383171b":"# Word cloud generation"}}