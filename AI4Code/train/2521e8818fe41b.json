{"cell_type":{"b6ac89ad":"code","655bf587":"code","7cc13663":"code","213e442e":"code","4ebb2f83":"code","c26ee04b":"code","1875f341":"code","63e79b55":"code","7f6441dd":"code","9450d93d":"code","16e02662":"code","8c0239e2":"code","b1185858":"code","0a5b4928":"code","43b8f857":"code","dfca923c":"code","4ee8b99e":"code","3908ddf8":"code","5414edbd":"code","4acaf0d9":"code","ee16eea9":"code","0a6b1f8d":"code","b90b24d3":"code","1b532eb3":"code","183f355e":"code","ddad2de7":"code","9fa7968f":"code","318d979a":"code","e61c03f1":"code","e0627033":"code","18df5d35":"code","632c685e":"code","60fba96b":"code","0ae76d52":"code","e098c177":"code","5aa385bf":"code","82f3ba65":"code","bdbaeb88":"code","6d5e8b75":"code","b4c62178":"code","8a8b9bea":"code","b9e2f093":"code","6a0ac5d4":"code","2a4e568e":"code","eef34d36":"code","024172ae":"code","a8add8d9":"code","afd119f9":"code","1588e673":"code","41dae938":"code","4b2eaa71":"code","f4b9d489":"code","0a2bcfe9":"code","3646b9f4":"code","1b666216":"code","05fc26ed":"code","089dcadc":"code","f85f64bc":"code","1440d695":"code","c3292168":"code","01f25005":"code","00bc187d":"code","92a4c50d":"code","c1f7765d":"code","504e45ed":"code","2652d6a3":"code","bec2b41b":"code","2c816051":"code","ae140ea0":"code","81c1783a":"code","7fbaf1a0":"code","a94a0ca0":"code","7a6637c0":"markdown","f62296e4":"markdown","b4cf84d6":"markdown","06181af7":"markdown","453d2264":"markdown","c06e6dfd":"markdown","96ed37af":"markdown","fe8a7714":"markdown","21884601":"markdown","a5673f08":"markdown","c33b27ee":"markdown","04159b5a":"markdown","7c82e980":"markdown","0e56957e":"markdown","a02fe132":"markdown","f847ff03":"markdown","af2a59bc":"markdown","fba569e5":"markdown","8e9172ec":"markdown","cb0bb68a":"markdown","7e384bd0":"markdown","e00ffd4b":"markdown","e4a10741":"markdown","8658a968":"markdown","dba96a06":"markdown","43c4a685":"markdown","85f84da0":"markdown"},"source":{"b6ac89ad":"# importing libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n#Visualization styling code\nsns.set_context('talk')","655bf587":"df = pd.read_csv('..\/input\/eda-attacks-on-political-leaders-in-pakistan\/Attacks on Political Leaders in Pakistan.csv', encoding = 'cp1252')","7cc13663":"df.head(10)","213e442e":"df.info()","4ebb2f83":"df.shape","c26ee04b":"#As column is already dropped so it will give error\ndf.drop(columns=['S#'], inplace = True)","1875f341":"df.head()","63e79b55":"# checking if there is any column who has null value and it's count\ndf.isnull().sum()","7f6441dd":"#Filling  3 Null value in \"Location Category\" with Missing and checking again\ndf['Location Category'].fillna('MISSING', inplace=True)\ndf.isnull().sum()","9450d93d":"#Capitalizing object type columns value\ndf = df.apply(lambda x: x.str.capitalize() if x.dtype == \"object\" else x)","16e02662":"df.describe()","8c0239e2":"# Though getting some of the column's statistical info wasn't required and doesn't makes any logic.\ndf.describe(include='all')","b1185858":"#Check if any dublicate value exists in dataset\ndf.duplicated().any()","0a5b4928":"df_violentAssasination = df[['Politician', 'Killed']]\nviolentAssasination = df_violentAssasination.apply(lambda x:x['Killed']>0 , axis=1)\ndf_violentAssasination = df_violentAssasination[violentAssasination].reset_index().sort_values('Killed', ascending = False)\ndf_violentAssasination","43b8f857":"\nplt.figure(figsize=(15,15))\n\n# bar plot with matplotlib\nplt.barh('Politician','Killed',data=df_violentAssasination)\nplt.xlabel(\"Killed\", size=15)\nplt.ylabel(\"Politician\", size=15)\nplt.title(\"Bar plot in Descending Order with Matplotlib\", size=18)","dfca923c":"df_violentAssasination.plot.bar(x='Politician', y='Killed',figsize=(20,10))\nplt.title('Politician')\nplt.yscale('log')\nplt.ylabel('Killed')","4ee8b99e":"df_SurvivedOrKilled = df[['Politician', 'Target Status']]\nSurvivedOrKilled = df_SurvivedOrKilled.apply(lambda x: x['Target Status'] == \"Killed\" , axis=1)\ndf_SurvivedOrKilled = df_SurvivedOrKilled[violentAssasination]\n\nprint( \"Total Politician Killed:\", df_SurvivedOrKilled.count())","3908ddf8":"df['Target Status'].value_counts()","5414edbd":"df_VoilNSui = df[['Politician', 'Target Status', 'Target Category', 'Killed', 'Injured']]\nVoilNSui = df_VoilNSui.apply(lambda x: x['Target Status'] == \"Killed\" and x['Killed'] > 1 and x['Injured']>1, axis=1)\ndf_VoilNSui = df_VoilNSui[VoilNSui].reset_index()\ndf_VoilNSui\n","4acaf0d9":"print(\"Number of Plotician Faced Voilence while getting killed:\", df_VoilNSui['Politician'].count())","ee16eea9":"df_VoilNSuiSurvived = df[['Politician', 'Target Status', 'Target Category', 'Killed', 'Injured']]\nVoilNSuiSurvived = df_VoilNSuiSurvived.apply(lambda x: x['Target Status'] == \"Escaped\" and x['Killed'] > 1 and x['Injured']>1, axis=1)\ndf_VoilNSuiSurvived = df_VoilNSuiSurvived[VoilNSuiSurvived].reset_index()\ndf_VoilNSuiSurvived","0a6b1f8d":"print(\"Number of Plotician Faced Voilence while Survived:\", df_VoilNSuiSurvived['Politician'].count())","b90b24d3":"df_Correla = df[['Politician', 'Target Status', 'Target Category']]\nCorrela = df_Correla.apply(lambda x: x['Target Status'] == \"Killed\" and x['Target Category'] == 'Suicide' , axis=1)\ndf_Correla = df_Correla[Correla].reset_index()\ndf_Correla","1b532eb3":"print(\"Number of Plotician Killed by Suicied Attack:\", df_Correla['Politician'].count())","183f355e":"df_CorrelaTK = df[['Politician', 'Target Status', 'Target Category']]\nCorrelaTK = df_CorrelaTK.apply(lambda x: x['Target Status'] == \"Killed\" and x['Target Category'] == 'Target' , axis=1)\ndf_CorrelaTK = df_CorrelaTK[CorrelaTK].reset_index()\ndf_CorrelaTK","ddad2de7":"print(\"Number of Plotician Killed by Target Killing:\", df_CorrelaTK['Politician'].count())","9fa7968f":"df.groupby('Target Status')['Space (Open\/Closed)'].value_counts()","318d979a":"df_OpenSpaceAssasination = df[['Politician', 'Target Status', 'Target Category', 'Space (Open\/Closed)']]\nOpenSpaceAssasination = df_OpenSpaceAssasination.apply(lambda x: x['Space (Open\/Closed)'] == 'Open' , axis=1)\ndf_OpenSpaceAssasination = df_OpenSpaceAssasination[OpenSpaceAssasination].reset_index()\ndf_OpenSpaceAssasination","e61c03f1":"print(\"Assasination and Violence in Open Space:\",df_OpenSpaceAssasination[\"Politician\"].count())","e0627033":"df_CloseSpaceAssasination = df[['Politician', 'Target Status', 'Target Category', 'Space (Open\/Closed)']]\nCloseSpaceAssasination = df_CloseSpaceAssasination.apply(lambda x:x['Space (Open\/Closed)'] == 'Closed' , axis=1)\ndf_CloseSpaceAssasination = df_CloseSpaceAssasination[CloseSpaceAssasination].reset_index()\ndf_CloseSpaceAssasination\n","18df5d35":"print(\"Assasination and Violence in Open Space:\",df_CloseSpaceAssasination[\"Politician\"].count())","632c685e":"print(\" Open Space Assination and Violance:\", df_OpenSpaceAssasination[\"Politician\"].count(),\"\\n\",\n      \"Close space Assination and Violance:\", df_CloseSpaceAssasination[\"Politician\"].count())","60fba96b":"df_CloseSpaceSuicide = df[['Politician', 'Target Status', 'Target Category', 'Space (Open\/Closed)']]\nCloseSpaceSuicide = df_CloseSpaceSuicide.apply(lambda x:x['Space (Open\/Closed)'] == 'Closed'\n                                                         and x['Target Category'] == 'Suicide' , axis=1)\ndf_CloseSpaceSuicide = df_CloseSpaceSuicide[CloseSpaceSuicide].reset_index()\ndf_CloseSpaceSuicide","0ae76d52":"print(\"Suicide Attack in Close Space:\",df_CloseSpaceSuicide[\"Politician\"].count())","e098c177":"df_OpenSpaceSuicide = df[['Politician', 'Target Status', 'Target Category', 'Space (Open\/Closed)']]\nOpenSpaceSuicide = df_OpenSpaceSuicide.apply(lambda x:x['Space (Open\/Closed)'] == 'Open'\n                                                         and x['Target Category'] == 'Suicide' , axis=1)\ndf_OpenSpaceSuicide = df_OpenSpaceSuicide[OpenSpaceSuicide].reset_index()\ndf_OpenSpaceSuicide","5aa385bf":"print(\"Suicide Attack in Open Space:\",df_OpenSpaceSuicide[\"Politician\"].count())","82f3ba65":"print(\" Close Space Suicide and Violance:\", df_CloseSpaceSuicide[\"Politician\"].count(),\"\\n\",\n      \"Open space Suicide and Violance:\", df_OpenSpaceSuicide[\"Politician\"].count())","bdbaeb88":"#pip install folium\n","6d5e8b75":"import folium\n\ncenter = [30.3753, 69.3451]\nmap_pk = folium.Map(location=[30.3753, 69.3451],height=500, zoom_start=5)\n\nfor index, row in df.iterrows():\n    folium.Marker([df.loc[index,'Latitude'], df.loc[index,'Longitude']],\n    icon=folium.Icon(color= 'red' if df.loc[index, 'Target Status'] == 'Killed' else 'green')).add_to(map_pk)\n\n\n#display map\nmap_pk","b4c62178":"print('Number of People Get Killed in',df.groupby('Target Category')['Killed'].sum())\n","8a8b9bea":"print('Number of People Get Injured in', df.groupby('Target Category')['Injured'].sum())","b9e2f093":"from matplotlib import pyplot as plt\nplt.rcParams[\"figure.figsize\"] = [10, 6]\n\n%config InlineBackend.figure_format = 'retina'\ndf.plot.hist(x='Killed', y='Injured')\nplt.title('Politician')\nplt.ylabel('Killed')\nplt.xlabel('Injured')","6a0ac5d4":"sns.distplot(df['Killed'], kde=True);","2a4e568e":"df_daytype = df[['Day', 'Killed', 'Injured']]\ndaytype = df_daytype.apply(lambda x: x['Killed'] >= 1 and x['Injured']>1 and x['Day'] == 'Sunday' or x['Day'] == 'Saturday',\n                           axis=1)\ndf_daytype = df_daytype[daytype].reset_index()\nrate = df_daytype['Killed'].sum() + df_daytype['Injured'].sum()\n\ndf_daytype1 = df[['Day', 'Killed', 'Injured']]\ndaytype1 = df_daytype1.apply(lambda x: x['Killed'] >= 1 and x['Injured']>1 and x['Day'] != 'Sunday' or x['Day'] != 'Saturday',\n                           axis=1)\ndf_daytype1 = df_daytype1[daytype1].reset_index()\nrate1 = df_daytype1['Killed'].sum() + df_daytype1['Injured'].sum()\n\nprint('Violence rate on weekend', rate)\nprint('Violence rate on weekday', rate1)\n\n\n# When week day is sunday and Saturday","eef34d36":"df_daytypeX = df[['Day Type', 'Killed', 'Injured']]\ndaytypeX = df_daytypeX.apply(lambda x: x['Killed'] >= 1 and x['Injured']>1 and x['Day Type'] == 'Working day',\n                             axis=1)\ndf_daytypeX = df_daytypeX[daytypeX]\nrateX = df_daytypeX['Killed'].sum() + df_daytypeX['Injured'].sum()\n\nprint('Violence rate on Working', rateX)\n\ndf_daytypeY = df[['Day Type', 'Killed', 'Injured']]\ndaytypeY = df_daytypeY.apply(lambda y: y['Killed'] >= 1 and y['Injured']>1 and y['Day Type'] == 'Holiday',\n                             axis=1)\ndf_daytypeY = df_daytypeY[daytypeY]\nrateY = df_daytypeY['Killed'].sum() + df_daytypeY['Injured'].sum()\n\nprint('Violence rate on  holiday', rateY, '\\n')\n\n####### Q.No 12 Answer ########\nprint('People Killed on Working day', df_daytypeX['Killed'].sum())\nprint('People Killed on holiday', df_daytypeY['Killed'].sum())\n#When Sunday is the only holiday","024172ae":"df2 = df.groupby('Day')['Target Category'].value_counts()\ndf2\n","a8add8d9":"print('Friday:', df2['Friday'].sum(), '  Saturday:', df2['Saturday'].sum(), '  Sunday:', df2['Sunday'].sum(),\n      '  Monday:', df2['Monday'].sum(), '  Tuesday:', df2['Tuesday'].sum(), '  Wednesday:', df2['Wednesday'].sum(),\n      '  Thursday:', df2['Thursday'].sum())\nprint('The Hypothesis is correct that on Friday most of the violence incidents happens')","afd119f9":"sns.countplot(x='Target Category',data=df)","1588e673":"sns.boxplot(data=df, x='Day', y='Killed')","41dae938":"sns.boxplot(data=df, x='Day', y='Injured')","4b2eaa71":"sns.violinplot(data=df, x='Day', y='Injured')","f4b9d489":"sns.violinplot(data=df, x='Day', y='Killed')","0a2bcfe9":"df.groupby('Location Category')['Target Category'].value_counts()","3646b9f4":"df.groupby('Province')['Target Category'].value_counts()","1b666216":"sns.countplot(x='Province', data = df)","05fc26ed":"df.groupby('Province')['Killed'].sum()","089dcadc":"dfX = df.groupby('City')['Target Category']\ndfX.count().sort_values(ascending = False)","f85f64bc":"sns.countplot(y='City', data = df)","1440d695":"df_Pol = df[['Politician','Party', 'Target Category', 'Target Status']]\nPol = df_Pol.apply(lambda x: x['Target Status'] == \"Killed\", axis=1)\ndf_Pol = df_Pol[Pol]\nprint('No. of Politician killed in following parties',\n      df_Pol.groupby('Party')['Politician'].count().sort_values(ascending = False))","c3292168":"df_PolSur = df[['Politician','Party', 'Target Category', 'Target Status']]\nPolSur = df_PolSur.apply(lambda x: x['Target Status'] == \"Escaped\", axis=1)\ndf_PolSur = df_PolSur[PolSur]\nprint('No. of Politician Survived in following parties',\n      df_PolSur.groupby('Party')['Politician'].count().sort_values(ascending = False))","01f25005":"df.groupby('Party')['Target Category'].count().sort_values(ascending= False)","00bc187d":"df.groupby(['Party'])['Injured','Killed'].sum()\n","92a4c50d":"df.groupby('Time')['Target Category'].value_counts().sort_values(ascending = False)\n","c1f7765d":"df_Esc = df[['Politician', 'Time', 'Target Status']]\nEsc = df_Esc.apply(lambda x: x['Target Status'] == \"Escaped\", axis=1)\ndf_Esc = df_Esc[Esc]\nprint('No. of Politician Survived in',\n      df_Esc.groupby('Time')['Politician'].count().sort_values(ascending = False))","504e45ed":"df_peopleKilled = df.groupby('Time')['Killed'].sum().sort_values(ascending = False)\nprint('No. of People Killed in', df_peopleKilled)","2652d6a3":"print('No. of People Survived in',\n      df.groupby('Time')['Injured'].sum().sort_values(ascending = False))","bec2b41b":"#Normalizing the date column into month and year\ndf['Month'] = pd.DatetimeIndex(df['Date']).month\ndf['Year'] = pd.DatetimeIndex(df['Date']).year\ndf['Day'] = pd.DatetimeIndex(df['Date']).day\ndf['Year']=df['Year'].replace(2051, 1951)\ndf['Year']=df['Year'].replace(2058, 1958)\ndf.shape\n","2c816051":"df.head(3)","ae140ea0":"corelation=df.corr()","81c1783a":"sns.heatmap(corelation,xticklabels=corelation.columns,yticklabels=corelation.columns\n               ,annot=True)","7fbaf1a0":"print('No. of Incident happend in',\n      df.groupby('Year')['Target Category'].count().sort_values())\nsns","a94a0ca0":"df_trend = df[['Year', 'Target Category']]\ntrend = df_trend.apply(lambda x: x['Target Category'] == \"Suicide\" or x['Target Category'] == \"Target\", axis=1)\ndf_trend = df_trend[trend]\ndf_trend[trend].sort_values(by= ['Year'], ascending = False)","7a6637c0":"Try to format the date column and try to extract day and month and year from the date. Checking either violence incidents are increasing, decreasing or remain the same over the period","f62296e4":"Checking out is there any pattern or correlation exist between target status (Survived or Dead) and target category (Suicide or Target). Do politicians been killed more via suicide attack or by target killing?","b4cf84d6":"Also, checking if possible is there any political party where more people got injured or died during the violence.","06181af7":"Q.15:\tCheck out which province has experienced most cases of violence and assassination?","453d2264":"checking if possible more people get injured in suicide attacks or within target killing.","c06e6dfd":"Similarly checking if possible more people been killed or injured during day time, night time or during the afternoon.","96ed37af":" checking if more people been killed in the suicide attacks or within target killing","fe8a7714":"Checking out the location category of violence and assassination? Either politician experience on the road, park in the residential area or within political campaigns.","21884601":"Check was more people\/politicians been able to survive in the open space or odds of been survive are higher in the closed space.\n","a5673f08":"Checking out top cities that experienced most cases of violence and assassination?","c33b27ee":"<h1><center>Exploratory Data Analysis <\/center><\/h1><br>\n<h2> <center>ATTACKS ON PLOTICAL LEADERS <\/center><\/h2>\n\nPakistan is the second most dangerous country in the world to be a politician or to run a political campaign or election. Let's have a statistical computation and detail visual of the relavent dataset to know the details about it. Discriptive EDA is performed to analyze the dataset, the undiscovered facts and figures and making sure if the statement about Pakistan is true or the data we have is baised. ","04159b5a":"Were politicians been able to survive during day time, night time or during the afternoon?","7c82e980":"checking out more people were killed within each province in violence incidents. It is an assumption KPK have experience most death by such incidents. Check if this is true?","0e56957e":"Checking out is there any day when violence incidents use to found higher as compared to other days. One hypothesis exists more violence incidence happened on Friday. Is this true?","a02fe132":"# Correlation Conclusion\nMore Politicain Killed in Target Killing and it comes out and effective method to Kill the politicains ","f847ff03":"Checking out day type of violence; either higher violence been made on weekdays or weekends?","af2a59bc":"checking out is there any specific time where the incidence of violence been experienced more than other time? More violence happens in the morning, evening or afternoon.","fba569e5":"Check out is there any association exist between target category (suicide vs target) and space (Open\/Closed) of the violence. Such as suicide incidents more likely to have in open space or close space. and there correlation","8e9172ec":"# Conclusion\nIn Open Space Suicide Attempts are more vital and likely to be happened then closed space","cb0bb68a":"From df.head(10) function we can see there is an irrelvent coloumn S# as excel-sheet already has a serialization and we don't need it beacuse if we can want to access the index or location of row or column we have loc() and iloc() functions.","7e384bd0":"Checking out which political leaders have experience most violence and assassination. Making a bar graph and sort chart in descending order so that leader been attached most be in the beginning? ","e00ffd4b":"Before loading and reading the data file let's do some spelling checks on excel-sheet.\n\n![image.png](attachment:image.png)\n![image.png](attachment:image.png)\n\nWe can perfrom some quick data visualization on excel-sheet which can us an insight of our data, and can show us the data visualization by using following excel-sheet funtionality, it can be used to pre-access the data and it's linear or non-linear behaviour. For the instance we will skip it and perform the data visualization by using python libraries.\n\n![image.png](attachment:image.png)","e4a10741":"Which political party experienced most incidents of the violence and assassination; also check politicians of which party been able to survive higher and politicians of which party were killed more?","8658a968":"Checking out how many politicians were survived or dead, Most survived or dead","dba96a06":"ploting histogram or distribution graph of the killed and injured individuals to know the shape of the distribution of these two variables. \nEither has skewed or symmetric distribution. ","43c4a685":"# Conclusion\nOpen space appears to be more dangerous more likely to have violance incident","85f84da0":"Check out how many politicians have faced violence via suicide or target status?"}}