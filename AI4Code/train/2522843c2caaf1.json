{"cell_type":{"4c82471c":"code","7164bd87":"code","a2214ca8":"code","15f0376b":"code","a611f793":"code","eb3ea7cf":"code","6b56c608":"code","0b1ba790":"code","00491f28":"code","0aeb766e":"code","3318a945":"code","6de75b25":"code","164e75d2":"code","e7bea2ce":"code","54d5fe58":"code","ddbbd8d3":"code","6693c725":"code","75279e44":"code","794a382a":"code","ac57ded3":"code","dfd3b45c":"code","ea96d160":"code","41225693":"code","10e7d454":"code","1eaf14d4":"code","e40b7e88":"code","798cd758":"code","5d0905d3":"markdown","b34ecf76":"markdown","73b50db1":"markdown","5ea17e7e":"markdown","80c90e33":"markdown"},"source":{"4c82471c":"# System\nimport sys\nimport os\nimport argparse\n\n# Time\nimport time\nimport datetime\n\n# Numerical Data\nimport random\nimport numpy as np \nimport pandas as pd\n\n# Tools\nimport shutil\nfrom glob import glob\nfrom tqdm import tqdm\nimport gc\n\n# NLP\nimport re\n\n# Preprocessing\nfrom sklearn import preprocessing\nfrom sklearn.utils import class_weight as cw\nfrom sklearn.utils import shuffle\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# Machine Learning Models\nfrom sklearn import svm\nfrom sklearn.svm import LinearSVC, SVC\n\n# Evaluation Metrics\nfrom sklearn import metrics \nfrom sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, confusion_matrix, classification_report, roc_auc_score\n\n\n# Deep Learning - Keras -  Preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Deep Learning - Keras - Model\nimport keras\nfrom keras import models\nfrom keras.models import Model\nfrom keras.models import load_model\nfrom keras.models import Sequential\n\n# Deep Learning - Keras - Layers\nfrom keras.layers import Convolution1D, concatenate, SpatialDropout1D, GlobalMaxPool1D, GlobalAvgPool1D, Embedding, \\\n    Conv2D, SeparableConv1D, Add, BatchNormalization, Activation, GlobalAveragePooling2D, LeakyReLU, Flatten\nfrom keras.layers import Dense, Input, Dropout, MaxPool2D, MaxPooling2D, Concatenate, GlobalMaxPooling2D, GlobalAveragePooling2D, \\\n    Lambda, Multiply, LSTM, Bidirectional, PReLU, MaxPooling1D\nfrom keras.layers.pooling import _GlobalPooling1D\n\nfrom keras.regularizers import l2\n\n# Deep Learning - Keras - Pretrained Models\nfrom keras.applications.xception import Xception\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.inception_resnet_v2 import InceptionResNetV2\nfrom keras.applications.densenet import DenseNet201\nfrom keras.applications.nasnet import NASNetMobile, NASNetLarge\n\nfrom keras.applications.nasnet import preprocess_input\n\n# Deep Learning - Keras - Model Parameters and Evaluation Metrics\nfrom keras import optimizers\nfrom keras.optimizers import Adam, SGD , RMSprop\nfrom keras.losses import mae, sparse_categorical_crossentropy, binary_crossentropy\n\n# Deep Learning - Keras - Visualisation\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard, ReduceLROnPlateau, LearningRateScheduler\n# from keras.wrappers.scikit_learn import KerasClassifier\nfrom keras import backend as K\n\n# Deep Learning - TensorFlow\nimport tensorflow as tf\n\n# Graph\/ Visualization\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom mlxtend.plotting import plot_confusion_matrix\n\n# Image\nimport cv2\nfrom PIL import Image\nfrom IPython.display import display\n\n# np.random.seed(42)\n\n%matplotlib inline\n\n# Input data\nprint(os.listdir(\"..\/input\/\"))","7164bd87":"train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/train.csv\")\nbuilding_metadata = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/building_metadata.csv\")\nweather_train = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_train.csv\")\n\nsample_submission = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/test.csv\")\nweather_test = pd.read_csv(\"..\/input\/ashrae-energy-prediction\/weather_test.csv\")","a2214ca8":"train.head()","15f0376b":"weather_train.head()","a611f793":"building_metadata.head()","eb3ea7cf":"train_building_metadata = pd.merge(train, building_metadata, on=\"building_id\")\ntrain_building_metadata.head()","6b56c608":"train_building_metadata_weather = pd.merge(train_building_metadata, weather_train, on=[\"site_id\", \"timestamp\"])\ntrain_building_metadata_weather.head()","0b1ba790":"cols = train_building_metadata_weather.columns.tolist()\ncols = [cols[4]] + [cols[0]] + [cols[2]] + [cols[1]] + cols[5:] + [cols[3]] \n\ntrain_building_metadata_weather = train_building_metadata_weather[cols]","00491f28":"train_building_metadata_weather.head()","0aeb766e":"col = \"meter\"\n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(x=col, data=train_building_metadata_weather)\n\nplt.title(re.sub(\"_\", \" \", col).title())","3318a945":"col = \"site_id\"\n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(x=col, data=train_building_metadata_weather)\n\nplt.title(re.sub(\"_\", \" \", col).title())","6de75b25":"col = \"primary_use\"\n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(x=col, data=train_building_metadata_weather)\n\nplt.title(re.sub(\"_\", \" \", col).title())\nplt.xticks(rotation=90)","164e75d2":"col = \"year_built\"\n\nfigure(num=None, figsize=(18, 25), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(y=col, data=train_building_metadata_weather)\nplt.title(re.sub(\"_\", \" \", col).title())","e7bea2ce":"col = \"floor_count\"\n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(x=col, data=train_building_metadata_weather)\nplt.title(re.sub(\"_\", \" \", col).title())\nplt.xticks(rotation=90)","54d5fe58":"col = \"air_temperature\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)\nplt.title(re.sub(\"_\", \" \", col).title())","ddbbd8d3":"figure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.countplot(x=\"cloud_coverage\", data=train_building_metadata_weather)\nplt.title(re.sub(\"_\", \" \", col).title())","6693c725":"col = \"dew_temperature\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)\nplt.title(re.sub(\"_\", \" \", col).title())","75279e44":"col = \"precip_depth_1_hr\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)\nplt.title(re.sub(\"_\", \" \", col).title())\n","794a382a":"col = \"sea_level_pressure\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)","ac57ded3":"col = \"wind_direction\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)\nplt.title(re.sub(\"_\", \" \", col).title())","dfd3b45c":"col = \"wind_speed\"\n\ndata = train_building_metadata_weather[col]\n\ndata = data[~np.isnan(data)] \n\nfigure(num=None, figsize=(18, 6), dpi=80, facecolor='w', edgecolor='k')\nsns.distplot(data)\nplt.title(re.sub(\"_\", \" \", col).title())","ea96d160":"train_building_metadata_weather.isnull().sum()","41225693":"feature_cols = ['meter', 'primary_use', 'square_feet', 'year_built', 'floor_count', 'air_temperature', 'cloud_coverage', \n'dew_temperature', 'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed']\n\ntarget_col = 'meter_reading'","10e7d454":"train_building_metadata_weather_non_null = train_building_metadata_weather.fillna(0)","1eaf14d4":"feature_values = train_building_metadata_weather_non_null[feature_cols]\ntarget = train_building_metadata_weather_non_null[target_col]","e40b7e88":"X = feature_values.values\nY = target.values","798cd758":"from sklearn.model_selection import KFold\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\n\nkf = KFold(n_splits=10)\nclf = linear_model.SGDRegressor(max_iter=1000, tol=1e-3)\n\nfor train_index, test_index in kf.split(X):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    print(mean_squared_error(y_true, y_pred))  \n","5d0905d3":"# 3. Merge Data","b34ecf76":"Rearrange columns","73b50db1":"# 2. Read Data","5ea17e7e":"# 1. Import Libraries","80c90e33":"# 4. Visualization"}}