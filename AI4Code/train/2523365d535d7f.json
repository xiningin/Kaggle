{"cell_type":{"2dcd8232":"code","b63db562":"code","3e308319":"code","e2a3423c":"code","567246e5":"code","fe0ccaa5":"code","b9d67a63":"code","0e2d31de":"code","fb2a6cec":"code","3174afdd":"code","e125e184":"code","c8155d27":"code","32afc304":"code","cb28cc0e":"markdown","fb54afc1":"markdown","a888052d":"markdown","58123503":"markdown"},"source":{"2dcd8232":"from pathlib import Path","b63db562":"# constants\nDATA_DIR = Path('\/kaggle\/input')\nRANDOM_STATE = 24\n\n# list all file paths in DATA_DIR and its subdirectories\nfor filepath in DATA_DIR.rglob('*'):\n     print(filepath)","3e308319":"!pip install tabular-automl==0.2.0a1","e2a3423c":"import copy\n\nfrom tabular_automl import TabularAutoML, TabularData","567246e5":"# utility functions\ndef get_file_paths(source_dir, file_patterns=None):\n    filepaths = []\n    if file_patterns is None:\n        # remove folders\n        paths = list(source_dir.rglob('*'))\n        for filepath in paths:\n            if filepath.is_file():\n                filepaths.append(filepath)\n    else:\n        # get files matching pattern\n        for pattern in file_patterns:\n            matches = list(source_dir.rglob(f\"*{pattern}*\"))\n            filepaths.extend(matches)\n    return sorted(filepaths)\n\n\ndef get_data(data_path, subsets=[\"train\", \"test\"], index_col=\"id\"):\n    test_file_path, train_file_path = get_file_paths(\n        data_path, file_patterns=[\"train\", \"test\"]\n    )\n    train_data = TabularData(train_file_path, index_col=index_col)\n    test_data = TabularData(test_file_path, index_col=index_col)\n    if test_data is None:\n        return train_data.data, None\n    return train_data.data, test_data.data\n\ndef create_pipeline(train_data, test_data, target_col=\"target\", task_type=\"regression\"):\n    pipeline = TabularAutoML(\n        train_data, test_data=test_data, target_col=target_col, task_type=task_type\n    )\n    return pipeline\n\ndef train_model(pipeline, config):\n    best_model = pipeline.get_best_model(config)\n    # tuned_model = pipeline.tune_model(estimator=best_model)\n    # final_model = pipeline.finalize_model(estimator=tuned_model)\n    model = best_model\n    return model\n\ndef get_predictions(model, test_data=None, predict_proba=False):\n    if task_type == \"classification\":\n        predictions = pipeline.predict_model(\n            estimator=model, data=test_data, raw_score=predict_proba\n        )\n    else:\n        predictions = pipeline.predict_model(estimator=model, data=test_data)\n    display(predictions.head())\n    return predictions\n\ndef create_submission(model, test_data, label_col=\"Label\", multiclass=False):\n    predictions = get_predictions(\n        model, test_data=test_data, predict_proba=multiclass\n    )\n    if multiclass:\n        label_cols = [col for col in predictions.columns if \"Score\" in col]\n        submission_cols = [col.replace(\"Score_\", \"\") for col in label_cols]\n        col_mapper = dict(zip(label_cols, submission_cols))\n        submission = predictions[label_cols].rename(columns=col_mapper).reset_index()\n    else:\n        submission = predictions[label_col].rename(target_col).reset_index()\n\n    display(submission.head())\n    submission.to_csv(f\"{month}_submission.csv\")    ","fe0ccaa5":"# general configuration\nconfig = {\n    \"sampling\": dict(sample_frac=round(1\/10, 2)),\n    \"setup\": dict(silent=True),\n}","b9d67a63":"# Jan 2021 TPS\nmonth = \"jan\"\nindex_col = \"id\"\ntarget_col = \"target\"\ntask_type = \"regression\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data)","0e2d31de":"# Feb 2021 TPS\nmonth = \"feb\"\nindex_col = \"id\"\ntarget_col = \"target\"\ntask_type = \"regression\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data)","fb2a6cec":"# March 2021 TPS\nmonth = \"mar\"\nindex_col = \"id\"\ntarget_col = \"target\"\ntask_type = \"classification\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data, label_col=\"Score\")","3174afdd":"# April 2021 TPS\napril_config = copy.deepcopy(config)\napril_config[\"sampling\"] = dict(sample_frac=round(1\/20, 2))\n\nmonth = \"apr\"\nindex_col = \"PassengerId\"\ntarget_col = \"Survived\"\ntask_type = \"classification\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\n# set a special config for April TPS\nmodel = train_model(pipeline, april_config)\ncreate_submission(model, test_data)","e125e184":"# May 2021 TPS\nmonth = \"may\"\nindex_col = \"id\"\ntarget_col = \"target\"\ntask_type = \"classification\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data, multiclass=True)","c8155d27":"# June 2021 TPS\nmonth = \"jun\"\nindex_col = \"id\"\ntarget_col = \"target\"\ntask_type = \"classification\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data, multiclass=True)","32afc304":"# Aug 2021 TPS\nmonth = \"aug\"\nindex_col = \"id\"\ntarget_col = \"loss\"\ntask_type = \"regression\"\n\ndata_path = get_file_paths(DATA_DIR, file_patterns=[month])[0]\ntrain_data, test_data = get_data(data_path, index_col=index_col)\npipeline = create_pipeline(\n    train_data, test_data, target_col=target_col, task_type=task_type\n)\nmodel = train_model(pipeline, config)\ncreate_submission(model, test_data)","cb28cc0e":"# Modelling","fb54afc1":"# ","a888052d":"# Viewing the data sources","58123503":"# Tabular AutoML"}}