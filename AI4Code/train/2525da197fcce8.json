{"cell_type":{"a6316060":"code","28395b4c":"code","389499d9":"code","773dc458":"code","3b2af8dc":"code","5ef4fee8":"code","992702e1":"code","f93a8d9b":"code","ff09e9ec":"code","3fd75d04":"code","f1201dd8":"code","164014f2":"code","1f4aed89":"code","17613bbd":"code","7a3eca22":"code","c1113690":"code","0387dcf8":"code","1d7656d6":"code","8ea33cc8":"code","a91d4baf":"code","1dbeff98":"code","17d92f44":"code","bd4ed36b":"code","1f0b5ce6":"code","60c4ca7e":"code","dda42259":"code","d1fc973a":"code","67a6c5ea":"code","4014d07f":"code","ea3807b0":"code","8d50467b":"code","47f522ef":"code","ffeed156":"code","a4bbf5f0":"code","e3a25cdd":"code","d4612390":"code","e272a083":"code","f1ceb486":"code","cc2aab50":"code","b87686ee":"code","287b40e4":"code","b4572787":"code","13bfcdae":"code","564ff59f":"code","62648ef3":"code","3aa339d4":"code","94bcb147":"code","e5808658":"code","daa534dd":"markdown","cbcdb5e9":"markdown","586e34e0":"markdown"},"source":{"a6316060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28395b4c":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.patches as mpatches\nfrom plotly.subplots import make_subplots\nfrom wordcloud import WordCloud\nimport seaborn as sns  \nsns.set(color_codes = True)\nsns.set(style=\"whitegrid\")\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors","389499d9":"df = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","773dc458":"df.head()","3b2af8dc":"df.info()","5ef4fee8":"(round(df.isnull().sum()\/len(df)*100,2)).apply(lambda x :str(x)+\" %\")","992702e1":"df.loc[df['iso_code'].isnull(),'country'].value_counts()","f93a8d9b":"df['iso_code'] = df['iso_code'].fillna('GBR')","ff09e9ec":"data = df","3fd75d04":"df = df.drop('daily_vaccinations_raw', axis=1)","f1201dd8":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\n\ndf['date'] = df['date'].dt.strftime('%m-%d-%Y')","164014f2":"df.head()","1f4aed89":"unique_dates = df['date'].unique()","17613bbd":"for iso_code in df['iso_code'].unique():\n    for inc_date in unique_dates:\n        if df.loc[df['iso_code'] == iso_code, 'date'].str.contains(inc_date).any():\n            continue\n        else:\n            df.loc[len(df)] = [None, iso_code, inc_date] + 11 * [None]","7a3eca22":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\n\ndf['date'] = df['date'].dt.strftime('%m-%d-%Y')","c1113690":"df.columns","0387dcf8":"tdf = df.copy()\n\n\nfor iso_code in tdf['iso_code'].unique():\n    tdf.loc[tdf['iso_code'] == iso_code, :] = tdf.loc[tdf['iso_code'] == iso_code, :].fillna(method='ffill').fillna(0)","1d7656d6":"fig = px.choropleth(\n    tdf,                            # Input Dataframe\n    locations=\"iso_code\",           # identify country code column\n    color=\"total_vaccinations\",                     # identify representing column\n    hover_name=\"country\",              # identify hover name\n    animation_frame=\"date\",\n    #category_orders={\"frame\": list(sorted(tdf['date'].unique()))},            # identify date column\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",        # select projection\n    range_color=[0,5000000],\n    title='Number of vaccinations by country',\n)             # select range of dataset     \nfig.show() ","8ea33cc8":"fig = px.choropleth(\n    tdf,                            # Input Dataframe\n    locations=\"iso_code\",           # identify country code column\n    color=\"daily_vaccinations\",                     # identify representing column\n    hover_name=\"country\",              # identify hover name\n    animation_frame=\"date\",\n    #category_orders={\"frame\": list(sorted(tdf['date'].unique()))},            # identify date column\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",        # select projection\n    range_color=[0,1000000],\n    title='Number of daily vaccinations',\n)             # select range of dataset     \nfig.show() ","a91d4baf":"data.columns","1dbeff98":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\n\ndf.fillna(value = 0, inplace = True)\ndf.total_vaccinations = df.total_vaccinations.astype(int)\ndf.people_vaccinated = df.people_vaccinated.astype(int)\ndf.people_fully_vaccinated = df.people_fully_vaccinated.astype(int)\n\ndf.daily_vaccinations_raw = df.daily_vaccinations_raw.astype(int)\ndf.daily_vaccinations = df.daily_vaccinations.astype(int)\ndf.total_vaccinations_per_hundred = df.total_vaccinations_per_hundred.astype(int)\n\ndf.people_fully_vaccinated_per_hundred = df.people_fully_vaccinated_per_hundred.astype(int)\ndf.daily_vaccinations_per_million = df.daily_vaccinations_per_million.astype(int)\ndf.people_vaccinated_per_hundred = df.people_vaccinated_per_hundred.astype(int)\n\ndate = df.date.str.split('-', expand =True)\ndate","17d92f44":"df['year'] = date[0]\ndf['month'] = date[1]\ndf['day'] = date[2]\n\ndf.year = pd.to_numeric(df.year)\ndf.month = pd.to_numeric(df.month)\ndf.day = pd.to_numeric(df.day)\n\ndf.date = pd.to_datetime(df.date)\n\ndf.head()","bd4ed36b":"#Some features : \nprint('Data point starts from ',df.date.min(),'\\n')\nprint('Data point ends at ',df.date.max(),'\\n')\nprint('Total no of countries in the data set ',len(df.country.unique()),'\\n')\nprint('Total no of unique vaccines in the data set ',len(df.vaccines.unique()),'\\n')","1f0b5ce6":"df.info()","60c4ca7e":"df.country.unique()","dda42259":"def size(m,n):\n    fig = plt.gcf();\n    fig.set_size_inches(m,n);","d1fc973a":"#Word Art of countries : \nwordCloud = WordCloud(\n    background_color='white',\n    max_font_size = 50).generate(' '.join(df.country))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(wordCloud)\nplt.show()","67a6c5ea":"country_wise_total_vaccinated = {}\n\nfor country in df.country.unique() : \n    vaccinated = 0\n\n    for i in range(len(df)) : \n        if df.country[i] == country : \n            vaccinated += df.daily_vaccinations[i]\n    \n    country_wise_total_vaccinated[country] = vaccinated \n#     made a seperate dict from the df \n    country_wise_total_vaccinated_df = pd.DataFrame.from_dict(country_wise_total_vaccinated,\n                                                         orient='index',\n                                                         columns = ['total_vaccinted_till_date'])\n#     converted dict to df \ncountry_wise_total_vaccinated_df.sort_values(by = 'total_vaccinted_till_date', ascending = False, inplace = True)\n\ncountry_wise_total_vaccinated_df\n","4014d07f":"fig = px.bar(country_wise_total_vaccinated_df, \n             y = 'total_vaccinted_till_date',\n             x = country_wise_total_vaccinated_df.index,\n             color = 'total_vaccinted_till_date',\n             color_discrete_sequence= px.colors.sequential.Viridis_r\n            )\n\nfig.update_layout(\n    title={\n            'text' : \"Vaccination till date in various countries\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Total vaccinated\",\n    legend_title=\"Total vaccinated\"\n)\n\nfig.show()","ea3807b0":"fig = px.line(df, x = 'date', y ='daily_vaccinations', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Daily vaccination trend\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Daily Vaccinations\"\n)\n\nfig.show()","8d50467b":"# helper function\ndef plot_till_date(value1, value2, title, color1, color2) : \n    \n    so_far_dict = {}\n    \n    for dates in df.date.unique() : \n        so_far_dict[dates], value1_count, value2_count = [], 0, 0\n    \n        for i in range(len(df)) : \n        \n            if df.date[i] == dates : \n                value1_count += df[value1][i]\n                value2_count += df[value2][i]\n#         if dates not in so_far_dict.keys() : \n        \n        so_far_dict[dates].append(value1_count) \n        so_far_dict[dates].append(value2_count)\n    \n    so_far_df = pd.DataFrame.from_dict(so_far_dict, orient = 'index', columns=[value1, value2])\n    so_far_df.reset_index(inplace = True)\n#     return so_far_df\n    \n    so_far_df.sort_values(by='index', inplace = True)\n    \n    plot = go.Figure(data=[go.Scatter( \n            x = so_far_df['index'], \n            y = so_far_df[value1], \n            stackgroup='one', \n            name = value1, \n            marker_color= color1), \n                               \n                           go.Scatter( \n            x = so_far_df['index'], \n            y = so_far_df[value2], \n            stackgroup='one',\n            name = value2, \n            marker_color= color2) \n        ]) \n    \n    plot.update_layout(\n    title={\n            'text' : title,\n            'y':0.95,\n            'x':0.5\n        },\n        xaxis_title=\"Date\"\n    )\n    \n    return plot.show()","47f522ef":"#People vaccinated vs people fully vaccinated in the world : \nplot_till_date('people_fully_vaccinated', 'people_vaccinated','People vaccinated vs Fully vaccinated till date', '#c4eb28', '#35eb28')","ffeed156":"#People vaccinated vs people fully vaccinated per hundred in the world : \nplot_till_date('people_fully_vaccinated_per_hundred', 'people_vaccinated_per_hundred', 'People vaccinated vs Fully vaccinated per hundred till date', '#0938e3','#7127cc')","a4bbf5f0":"# Function for Pie-Plot : \ndef plot_pie(value, title, color) : \n    \n    new_dict = {}\n    \n    for v in df[value].unique() : \n        value_count = 0\n        \n        for i in range(len(df)) : \n            if df[value][i] == v : \n                value_count += 1 \n        \n        new_dict[v] = value_count \n        \n#     print(new_dict)\n\n\n    new_df = pd.DataFrame.from_dict(new_dict, orient = 'index', columns = ['Total'])\n    \n    if color == 'plasma' : \n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title,\n                     color_discrete_sequence=px.colors.sequential.Plasma)\n    \n    elif color == 'rainbow' : \n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title,\n                     color_discrete_sequence=px.colors.sequential.Rainbow)\n    \n    else :\n        \n        fig = px.pie(new_df, values= 'Total',\n                     names = new_df.index,\n                     title = title)\n    \n    fig.update_layout(\n        title={\n            'y':0.95,\n            'x':0.5\n        },\n        legend_title = value\n    )\n        \n    return fig.show()","e3a25cdd":"#Most used vaccine : \ndf.vaccines.unique()","d4612390":"plot_pie('vaccines', 'Various vaccines and their uses', 'plasma')","e272a083":"# Most frequent Sources : \nplot_pie('source_name', 'Sources', 'rainbow')","f1ceb486":"#Word art of Vaccines\nwordCloud = WordCloud(\n    background_color='white',\n    max_font_size = 50).generate(' '.join(df.vaccines))\n\nplt.figure(figsize=(12,5))\nplt.axis('off')\nplt.imshow(wordCloud)\nplt.show()","cc2aab50":"# Daily vaccination trend per million : \nfig = px.line(df, x = 'date', y ='daily_vaccinations_per_million', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Daily vaccination trend per million\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Daily Vaccinations per million\"\n)\n\nfig.show()","b87686ee":"# Total vaccinated - India vs USA : \nindia_usa = [df[df.country == 'United States'], df[df.country == 'India']]\nresult = pd.concat(india_usa)\n\nfig = px.line(result, x = 'date', y ='total_vaccinations', color = 'country')\n\nfig.update_layout(\n    title={\n            'text' : \"Total vaccinated - India vs USA\",\n            'y':0.95,\n            'x':0.5\n        },\n    xaxis_title=\"Date\",\n    yaxis_title=\"Total Vaccinations\"\n)\n\nfig.show()","287b40e4":"# Function for Maps : \n# helper function\ndef plot_map(variable, title, color) : \n    \n    new_dict = {}\n    \n    for country in df.country.unique() : \n        \n        for i in range(len(df)) : \n            if df.country[i] == country : \n                new_dict[country] = df[variable][i]\n    \n    new_dict\n    \n    new_df = pd.DataFrame.from_dict(new_dict, orient='index', columns =[variable])\n    \n    if color == None : \n        \n        place_map = px.choropleth(new_df, locations =new_df.index,\n                                  locationmode = 'country names',\n                                  color=variable, \n                                  hover_name= new_df.index)\n    \n    else : \n        \n        place_map = px.choropleth(new_df, locations =new_df.index,\n                                  locationmode = 'country names',\n                                  color=variable, \n                                  hover_name= new_df.index,\n                                  color_continuous_scale= color)\n        \n    place_map.update_layout(\n        title_text = title,\n        title_x = 0.5,\n        geo=dict(showocean=True, oceancolor=\"#7af8ff\",\n                showland=True, landcolor=\"white\",\n                showframe = False))\n    \n    \n    return place_map.show()\n# Most vaccinated country : \nplot_map('total_vaccinations','Most vaccinated country', None)","b4572787":"# Vaccines Used in Different countries : \nplot_map('vaccines','Vaccines Used in Different countries', None)","13bfcdae":"# People fully vaccinated in Different countries : \nplot_map('people_fully_vaccinated','People fully vaccinated in Different countries', 'haline')","564ff59f":"# Function for Animation: \ndef plot_animation(value, title, color) : \n    \n    new_df = df[df.year == 2021]\n    \n    new_df.sort_values(by='day', inplace = True)\n    \n    if color == None : \n        \n        place_map = px.choropleth(new_df, locations =\"country\",\n                                    locationmode = \"country names\", \n                                    color=value,\n                                    hover_name=\"country\",\n                                    animation_frame=\"day\")\n    \n    else : \n        \n        place_map = px.choropleth(new_df, locations =\"country\",\n                                locationmode = \"country names\", \n                                color=value,\n                                hover_name=\"country\",\n                                animation_frame=\"day\",\n                                color_continuous_scale= color)\n\n    place_map.update_layout(\n        title_text = title,\n        title_x = 0.5,\n        geo=dict(showocean=True, oceancolor=\"#7af8ff\",\n                showland=True, landcolor=\"white\",\n                showframe = False))\n    \n    return place_map.show()","62648ef3":"# Animation of daily vaccinations through January 2021 in different countries: \nplot_animation('daily_vaccinations', 'Animation of daily vaccinations through January 2021 in different countries', None)","3aa339d4":"# Animation of daily vaccinations per million through January 2021 in different countries: \nplot_animation('daily_vaccinations_per_million', 'Animation of daily vaccinations per million through January 2021 in different countries', 'Plotly3')","94bcb147":"# Date vs People Vaccinated vs People Fully Vaccinated | 3D: \nfig = px.scatter_3d(df, x='date', y='people_vaccinated', z='people_fully_vaccinated',\n                    color='country',\n                    hover_data=['country'],\n                    size = 'people_fully_vaccinated',\n                    opacity=0.9, \n                    symbol = 'country')\n\n\nfig.update_layout(title='Date vs People Vaccinated vs People Fully Vaccinated | 3D')\n\nfig.update_layout(\n        title={\n            'y':0.95,\n            'x':0.5\n        }\n    )\n\nfig.show()","e5808658":"sns.heatmap(df.corr())\nplt.title('Corelation Heatmap')\nplt.yticks(rotation = 0);\nsize(10,7)","daa534dd":"### **Plot till date Function**","cbcdb5e9":"Columns to drop\nAs we can see, 'daily_vaccinations_raw' has a cleaned variable 'daily_vaccinations' with less missing values, so we can now drop 'daily_vaccinations_raw'","586e34e0":"From the plot, some interesting facts are easily noticeable:\n\n- The United States, despite all protests, has the highest number of vaccines.\n- China, from where the virus started spreading, is at second.\n- UK, where we have found a new variant strain of the virus, is right next.\n- India, who has been supplying vaccines to the world is herself at 6th position.\nFollowing that, we have Turkey, UAE, Germany and others.\nCountry wise daily vaccination :"}}