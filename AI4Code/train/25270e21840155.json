{"cell_type":{"fe872663":"code","6b00724a":"code","30a762fb":"code","0352f65c":"code","d2b42451":"code","a52cbb4c":"code","01887a10":"code","5947149f":"code","c9a03d21":"code","b069e6b8":"code","1128579d":"code","eee67585":"code","f1a5a410":"code","e60f95c8":"code","342cf80f":"code","e002d565":"code","90c3a5c7":"code","353758db":"code","a4b77992":"code","48c9397f":"code","3e741649":"code","8954116a":"code","5ddcc6f4":"code","76424252":"code","74104553":"markdown","30949a42":"markdown","abfc51e8":"markdown","5ac2546c":"markdown","9e963733":"markdown","5733df37":"markdown","0b4253fb":"markdown","cd02e27f":"markdown"},"source":{"fe872663":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.optimizers import Adam\nfrom keras import backend as K\nfrom keras.layers import Conv2D,MaxPooling2D,UpSampling2D,Input,BatchNormalization,LeakyReLU\nfrom keras.layers.merge import concatenate\nfrom keras.models import Model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import set_random_seed\nimport tensorflow as tf\n\nset_random_seed(123)\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\ntf.keras.backend.set_session(sess)\nset_random_seed(2)\nnp.random.seed(1)\n\nprint(os.listdir(\"..\/input\/dataset\/dataset_updated\/\"))","6b00724a":"ImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/painting\/\"","30a762fb":"img = cv2.imread(ImagePath+\"1179.jpg\")\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\nimg.shape","0352f65c":"HEIGHT=224\nWIDTH=224\nImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/painting\/\"\n\ndef ExtractInput(path):\n    X_img=[]\n    y_img=[]\n    for imageDir in os.listdir(ImagePath):\n        try:\n            img = cv2.imread(ImagePath + imageDir)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n    \n            img = img.astype(np.float32)\n            img_lab = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\n            #Convert the rgb values of the input image to the range of 0 to 1\n            #1.0\/255 indicates that we are using a 24-bit RGB color space.\n            #It means that we are using numbers between 0\u2013255 for each color channel\n            #img_lab = 1.0\/225*img_lab\n            # resize the lightness channel to network input size \n            img_lab_rs = cv2.resize(img_lab, (WIDTH, HEIGHT)) # resize image to network input size\n            img_l = img_lab_rs[:,:,0] # pull out L channel\n            #img_l -= 50 # subtract 50 for mean-centering\n            img_ab = img_lab_rs[:,:,1:]#Extracting the ab channel\n            img_ab = img_ab\/128\n            #The true color values range between -128 and 128. This is the default interval \n            #in the Lab color space. By dividing them by 128, they too fall within the -1 to 1 interval.\n            X_img.append(img_l)\n            y_img.append(img_ab)\n        except:\n            pass\n    X_img = np.array(X_img)\n    y_img = np.array(y_img)\n    \n    return X_img,y_img","d2b42451":"X_,y_ = ExtractInput(ImagePath) # Data-preprocessing","a52cbb4c":"#X_train,X_val,y_train,y_val = train_test_split(X_,y_, random_state=42)","01887a10":"K.clear_session()\ndef InstantiateModel(in_):\n    model_ = Conv2D(16,(3,3),padding='same',strides=1)(in_)\n    model_ = LeakyReLU()(model_)\n    #model_ = Conv2D(64,(3,3), activation='relu',strides=1)(model_)\n    model_ = Conv2D(32,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    model_ = MaxPooling2D(pool_size=(2,2),padding='same')(model_)\n    \n    model_ = Conv2D(64,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    model_ = MaxPooling2D(pool_size=(2,2),padding='same')(model_)\n    \n    model_ = Conv2D(128,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2D(256,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = UpSampling2D((2, 2))(model_)\n    model_ = Conv2D(128,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = UpSampling2D((2, 2))(model_)\n    model_ = Conv2D(64,(3,3), padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    #model_ = BatchNormalization()(model_)\n    \n    concat_ = concatenate([model_, in_]) \n    \n    model_ = Conv2D(64,(3,3), padding='same',strides=1)(concat_)\n    model_ = LeakyReLU()(model_)\n    model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2D(32,(3,3),padding='same',strides=1)(model_)\n    model_ = LeakyReLU()(model_)\n    #model_ = BatchNormalization()(model_)\n    \n    model_ = Conv2D(2,(3,3), activation='tanh',padding='same',strides=1)(model_)\n\n    return model_","5947149f":"Input_Sample = Input(shape=(HEIGHT, WIDTH,1))\nOutput_ = InstantiateModel(Input_Sample)\nModel_Colourization = Model(inputs=Input_Sample, outputs=Output_)","c9a03d21":"LEARNING_RATE = 0.001\nModel_Colourization.compile(optimizer=Adam(lr=LEARNING_RATE),\n                            loss='mean_squared_error')\nModel_Colourization.summary()","b069e6b8":"def GenerateInputs(X_,y_):\n    for i in range(len(X_)):\n        X_input = X_[i].reshape(1,224,224,1)\n        y_input = y_[i].reshape(1,224,224,2)\n        yield (X_input,y_input)\nModel_Colourization.fit_generator(GenerateInputs(X_,y_),epochs=53,verbose=1,steps_per_epoch=38,shuffle=True)#,validation_data=GenerateInputs(X_val, y_val))","1128579d":"TestImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/iconography\/\"","eee67585":"def ExtractTestInput(ImagePath):\n    img = cv2.imread(ImagePath)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    img_ = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n    img_ = cv2.cvtColor(img_, cv2.COLOR_RGB2Lab)\n    img_=img_.astype(np.float32)\n    img_lab_rs = cv2.resize(img_, (WIDTH, HEIGHT)) # resize image to network input size\n    img_l = img_lab_rs[:,:,0] # pull out L channel\n    #img_l -= 50\n    img_l_reshaped = img_l.reshape(1,224,224,1)\n    \n    return img_l_reshaped","f1a5a410":"ImagePath=TestImagePath+\"15.jpg\"\nimage_for_test = ExtractTestInput(ImagePath)\nPrediction = Model_Colourization.predict(image_for_test)\nPrediction = Prediction*128\nPrediction=Prediction.reshape(224,224,2)","e60f95c8":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath+\"15.jpg\")\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","342cf80f":"ImagePath=TestImagePath+\"314.jpg\"\nimage_for_test = ExtractTestInput(ImagePath)\nPrediction_1 = Model_Colourization.predict(image_for_test)\nPrediction_1 = Prediction_1*128\nPrediction_1=Prediction_1.reshape(224,224,2)","e002d565":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath+\"314.jpg\")\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction_1\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","90c3a5c7":"ImagePath=TestImagePath+\"698.jpg\"\nimage_for_test = ExtractTestInput(ImagePath)\nPrediction_2 = Model_Colourization.predict(image_for_test)\nPrediction_2 = Prediction_2*128\nPrediction_2=Prediction_2.reshape(224,224,2)","353758db":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath+\"698.jpg\")\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction_2\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","a4b77992":"TestImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/sculpture\/240.jpg\"\nimage_for_test = ExtractTestInput(TestImagePath)\nPrediction_3 = Model_Colourization.predict(image_for_test)\nPrediction_3 = Prediction_3*128\nPrediction_3=Prediction_3.reshape(224,224,2)","48c9397f":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath)\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction_3\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","3e741649":"TestImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/painting\/1601.jpg\"\nimage_for_test = ExtractTestInput(TestImagePath)\nPrediction_4 = Model_Colourization.predict(image_for_test)\nPrediction_4 = Prediction_4*128\nPrediction_4=Prediction_4.reshape(224,224,2)","8954116a":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath)\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction_4\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","5ddcc6f4":"TestImagePath=\"..\/input\/dataset\/dataset_updated\/training_set\/painting\/1577.jpg\"\nimage_for_test = ExtractTestInput(TestImagePath)\nPrediction_5 = Model_Colourization.predict(image_for_test)\nPrediction_5 = Prediction_5*128\nPrediction_5=Prediction_5.reshape(224,224,2)","76424252":"plt.figure(figsize=(30,20))\nplt.subplot(5,5,1)\nimg = cv2.imread(TestImagePath)\nimg_1 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img_1, cv2.COLOR_RGB2GRAY)\nimg = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\nimg = cv2.resize(img, (224, 224))\nplt.imshow(img)\n\nplt.subplot(5,5,1+1)\nimg_ = cv2.cvtColor(img, cv2.COLOR_RGB2Lab)\nimg_[:,:,1:] = Prediction_5\nimg_ = cv2.cvtColor(img_, cv2.COLOR_Lab2RGB)\nplt.title(\"Predicted Image\")\nplt.imshow(img_)\n\nplt.subplot(5,5,1+2)\nplt.title(\"Ground truth\")\nplt.imshow(img_1)","74104553":"### Most Basic Colorizing neural network model\n![Most Basic Colorizing neural network model](http:\/\/richzhang.github.io\/colorization\/resources\/images\/net_diagram.jpg)\n### Colorization using Interception-resnet layer in parallel\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAV4AAACQCAMAAAB3YPNYAAABvFBMVEX\/\/\/+ltMLc3Ny2traRq4b\/5ZkAAADP4vP\/55jbyJHby57T5vf\/6ZzBwcH4+PhsbGzQ0NC6ydadrLqKior19fWampqRnqthYWGrq6uAgICioqLoz4d3d3fl5eXF2OjbxYNvb297e3u\/zdtbW1uUlJRFRUVTU1M8PDzU1NTr6+ucprCLpIC8vLyNjY1KSkqxsbEzMzPgz4u216goKCji2a7x5rekwZcdHR03NzcRERFof17\/9MR\/lXYsLCy1vLLh8P\/\/omvBzL3Fu5Kxn2qQgVb\/eEf\/1NbzkHXNuHuHdmWflI6Hf3iwucFxaVqIlJ7ivJjG4bt\/ckz\/wsPMw6pxVDzhb1X\/AABeVE1tYk2vx6Xfoq\/MqK7pklREQDXJr4jTl3XYh2kqGxnjuLnvkpr\/snWBbFr94OJ3hHH4IR1maUW8p5RlcXw3KCD7yoWljnrFgYX5t5L2UVdZSzt\/YUHlW1GoqJnVHAlsil5PNSU7Ixg1KREuFwBdNiM9CwB0RiZvWkMeCwSQmoyjk2KDglZCOihufGmnzJfpd4GlTyf7fXzDWDrWOxhMXkSYjnOxo5dXUDRdWik1MwOmtqCxhW8vY7VtAAAYsElEQVR4nO2dj2PbxnXHT6AFe7UOBxmADjgDFhD8IGCDAFNmIZmKyg87iUSa6uT8oJONW7PWaaK43urVW9puS+I067otypb+w3sHkBQpkbIoUbLs8GubBAEQBD58fPfe3TsYoblORaH1tM\/geZbwf3O8pyfhu+\/meE9NQHeO99QkfHf3u++ip30Wz6uA7t27\/zvHezoCup\/O8Z6WLLDdT0FzvKchYRs8w6ffPvpKfdpn8jxK+A4cw92v13Fhbr2zl3X3Hrfeb3WvNA\/MZi4VPwK4d7d37WZrbr2zlhqn6+88+nb7W5O0mnPfO2NZu1xYfvSoTefWO2sJzeZuE\/6t492k3erOfe9MFXabLVCzuV5oJq1OR3jaJ\/RcKRTbzZzvbrNV7dLuHO8MFYp12m6C0QLfVrti23TuHGYnQRQrrcx4W234W3UVMiVeuTDXfsVyj263ISbc7wLhdrvTrlJlSt8bK8Jc+2R5SsYm7CZ1kbR2m7sMPEOn3am7ZLrIIVam+jJ+GMI9uvftolihTdZkOphvp9MVfToV3jndMerRFUTfaYhlc1fXdNZsQshbrVcDcQrnEJdO6QyfZfXpdj9KqC8mrJk2UwZRWbtbrjaKU+Cd0x2jPt3O\/XK344u0meoAGPI2sN5KpfxkvHrv+bh0+50akXouuzdOdlI9uqjd6VYoWK+TYr2p7wLedrdardSeiFdz8+fj0r29lX\/C7WsvGMc7wqkK\/09vQT4O5z5dwNupmTQRW7EOLVua4W3U67XiE\/BqPsmej033+pXsE25fvrhy\/XiHOE3hV9byBdmVjvHuQVMPLVlg20mjCXg1Xd9tNdudslitJYdHDiwJMrzHjRluX19Y4HiB7tbC+cOLX7mQ45UpnR7vHl2Ol5pmNwG\/W2ru8szCbnfFanA4Xpa4gY1OQHdlIcN7+1Wge\/7wAt0cr+za01vvEF0ExpqYpEt29SZP2nje1knEKqGHOQcWuG5gnpAu4M3pnju8nG6GVw5oUJwWLx5uSiAQSwjptApgub0\/7aJYpsoh1ssCSl3XgUb\/GOeO+nQXrNuvXuZ0x+GVDD1mo6v8YzjBYUVBzAqjq+yxNpTR5XjlhAaiOOXH4hGTa7Vol5BuK21mXTrceikkGcScjE4HuoSQY7f3PboLWm674623ZEFoJMFJSPA9cwqWKfFn9fijKDXgiZEFuOCQFgQEkSfwQ0qjh8zpAt44obTsV6bDO0oXdSBSaNMux9rr722bjXqFTsarE0qpU2L6pB2eoD7dlZ7tTsDLUmz5saHqmqxFVPKiGmIhYcZxPxahIuT\/DhZ8VYv1VHAs3aKRLvgyHfmZ9OheWMNivVoLaHUqvHgokOJGAXg77XYHWjSIejndVqvtV8quMwkvc23A6+E4nvbyMkkH6Y7HK4CNmchhYGkJinUbOZEhCDI+1qdmKvKrN4UwhmP4SPAo0iwihJE2vFOf7oVvKn6jLpI8QDqqUl+Q+xLEhma1mpu8h7eptyB2yLt7W37ZJ2QC3pQSwGsyXdHG73C4xtEdi1cRUKgSZMpGJBSRLpQRVYsqxsf7UjM1kORLthzKripTVcY+eCA\/wtZw5D6gu1YJqN+oeY45xSdgQ8YDyWJdEdq7DzZbrQdNsF\/IKSBsoGarUwvMYDxeAWvc73qeqR0nnxhLd2zTlhbiQpRGOkoZinQZCVoaCYp6AuuN9DiWkFTCCHtI0jGKtIIQKZYw1N4N6H4fJNCuBYnm+kf\/hH1+N4R\/99cfNJubgLe12yQZ3la747vUGBs5CIVCHDPH9lxTOYYTlHg2cYDu+QnM9ugyv9goBoTq1D36u8eEqeKjR80H93aaXzZ3u9VWy\/ZdE\/AG45s2zECpLKfMJdr0Ma861nbPD94B3a9kp1GulBNXwYp51KZtHF0kNvEmxys2WwmhLdoxnI7pN+g43xtrGvMgZMBYCYzpfD7XBNudKd7oBB1de37XlpNKowrmy1LtqN5oLF0kbsrf3ru3s\/tls90yuy2XguHaSSMYM5SpEE9xHENjhdQJSEKnPPtJtntivFItxn1PdYL5YnuewTHjRr1cqdQSFg\/iz\/DQcTV1PF0kttfX7\/15d7fdtA2nRpIkcG076I5xDiXR0UqG7SgaM0gV9pvy9K\/36G4tL4\/SPbH1EklC0GAhC6tChDAGFIUnv2uf9my3FBBWbTSqFT8wcMHuOYfDexA9Z\/x6sfOOvPlniBmapkn8TpAUqUmCrn3AOSiQyhkecYlhlJSgYpBpIhau5Ss9mpcvr8wYr24iG3mRDcFsqEmFgoFL01bBRAO6gROYZr1WKxfhN4xZ34oOP2A6Yb3Y3ZXXAS9tEuoGPk1ESu2g07L34dVE0S85hmI6Jiho2Mrs8G4JIQQxkRxyTXlULiKpkIFokVyOCkKCVIdF6dGPY61z+4xu9NMJ3wQAdb\/o+8XExqXykax30lbx\/ua6vLNrJiUaJG7CO9aJTbqt9ihe1qiIrmKUPMUwXNsNGkSZtmmbiHfl2qvXb6Po9uXLl\/nC9ErgXEuYyGnEdJlBQF+ymHzUN1sXXuGXOsD7y6JBHb9YLCZ+MTBxqbiHVzUR3s\/RGGwdK\/F+exev75Kk5SaJ69NOwyQm7bQ2R\/B6SVlsmOB1mVYyiUtrDUiMj3oBPU3Cy+lewertVzndK8fAqwq8PZMjJED2YSFZQEIkHLWJEy6s3eCX+tWe9cL1lf1y1U+ShDBjCC+wDCNWUmUBx0Kqp5buqZ6EZXQI3nqnvSvvQjaRFBNIVTqB4Zq0bY7gLSV2VSw6nqbpjJsvwA5mhTeju6Avc7qw\/jjWewIB3Qsc7\/drA+utglcoBpUKuIbALZFgFK+kWaljyYYle1JBQ4zpVogOw9ttPyg8omapUeHupgu2a5M22Rz6+j2RkqqYKDrTOV7TLlfrtWIy5ZWMx5vTXbndo3vGeDldjvf7tQHe78tl7hVqLIHYniqmLwlZFwIH6MkpcrAc6oaBY8PSS7JghMYT8HY3d3c7SkmsNmpBpUEosW0SDOFl1Yrr1kQ7S9mYXlJoo1ytNcpTXspYvPvpni3ejC7g\/X7twh7eoOrWoHlJTAqNveklyMo7wPgbwJKV7DHXXqw7EW+1C+a7Sz1HrAPGip9QoEuLe3j1pFL2g3Ld1FNWSpnmebRSqZars8B7gO6Z4g0zuhduAN09vOtUDBrlYpAopmG6tuGPRg7SsFPfW56It9LtPNxsUhaIolghftHl1kurg8hBJokPJt2olHDMNF3XPIXW6vVGY4qupExj8OZ0rw\/RPUu8fbo3+NMe3hKYWRJQ27FZiRJSPBiYFbJldbgXfiLebrfT2XxAWRnwcoxl4Es69cF7ZdsFV0TLRS3WAG+qKQr1q\/WqP23WdhDvysLyypWFK5DGLS\/3iZ8d3nBtLW\/Lsqc9vGlRrIKJQXxfghiCHIx7JcQQDpEaDQV\/k\/D+Dui27z0wFZHjdcxKEeja3b2BNJnYZWjsyq5WYBr4Xs3RXFoXK8WRuDeanI73fwYH8V6\/fBnWrVy8fPHi5bPH+\/rLOc+X9+GNSa1OiprneAYfVOz\/SIcAWiqywPyGQ+tJeD\/neDcftMhHgLesGJAIEkK9vR1kyJWpQSpE571lTGHwk6HlesMdwXtITiMgKUM8Ge\/FEbxSZi7SQCOv+i9GPuHjO3feQujOnTvq3qKUL0r85ZR4DbdCinJcYgrksU6\/C27oCnUMIbYk6EOrJl3\/u91Ou7W52Wp1AW9RsYsJdenwOI8FNBOH+kbKPA8cr6fZJsQRDePoeCM4tHAkvFcWrr3wwrXPVHT7hb6WP0Pq3qsVnG9aGRoUUv\/65z\/\/8Frpvffe+9s3\/u699372xhtDi++\/P3wu66+DvoKF8PVHE\/B+nxp2jdJQ1kzPdl117zIO00S8DzvtBw82W\/b9igihbdLt0mRkFC1kJg1s6muxZ5T4H8Uz3Ybom97wXod8uEZKdb7vEfBeWchStxWVJ8iZXr28dV3iTV\/+6vaKnLWDyyt7v8w7y6+C9JfG6kf\/9JuhU\/n+r0AfvCIh+YMP1tbH4\/0K0lI\/8WTZS5hN97qP5cML\/Sfh\/QLw7jxotbsV8aOABt0kGeGGsGIGCTRvTAfLdRSlpDlmUBET+yBeKWX56SjDfinsFXM+GW9Od2Xhit6nyyvQVpb36F7nncWc8sLgA+78mtNd\/8ux+sfvth\/tp7u2huQff7B2YwLeXxo2ZMOOLCu+R05cGvvuvYcc7wObfil+mZRpt7tviBITJYA0PElLQLZkKqZSIrQq+vQgXhW+bDkVYlVT5UIahbEw2HQUvFdWuGe4vrCwdW3gDLbytZmuAV2+6Rrvl+\/jvfP+hx9eu\/YPb7\/905d++vbbb7\/00s\/2Ft9+75+\/HsLbo3thjdO9MBGvTYvFxChAm1M6eeHxu\/egZdvZ2Wm37n\/5Uafe7u4vvpHdEncOlBmGpmuGAf7BJLVqccRB9xiqVI5VIZYZ0pmUatiaCu\/KxWsgALp8ra+F\/tpMKwtbF\/PnHG\/kSejvP+R4\/+a11361+KvXXnttcfEXvcVfwOInX29\/+gnsyPiIzvrLXFkGwR8n4qWkWPHdGHvGDMq6v7jX7uHt3O926gfootDUbOLYhqYpWuopwNYxaBECh5E9M4ZWIRZIrKW6EWmKxZgXTYf3cr5w5RpfyNYu99bmr8B4s134gbBjGEpdTAXuQS5uvLg6Ri9+sr399SfINBSxbqHXf8zF8WaPE\/G6NKk2Akfz0Az0BbfeB+\/stFp292FXPDhiJCs6mKyiGbYCWbFhEJc4jl+kpn0A71A2zqVZ+Hh4X7j4ZLzcei0drDfbdHVprD759NanEDlIWe\/vBLxf5Xhf2bNeM6jWXXcWtsvxdjO8zXbr4cP7Y0YgYhoDW4MpREkdw1NIQAwa+JSM+OhxkUMkjGw6iHfr+Hi3+l\/kr7OdN8YZ7+rqrVufbn\/cP50B3m9yyHlg9hXK8K7hHt4b8KsIyqJ78lYt0xd37wPenXcedcxOd9x4XFqTNc8wmVNjWrVWcmgR8g4\/cUeatigbT7UKkt7DGaVIl9C4pm1lgHcL56T6eLd6eLVrQ3hX2DDez3p4B3TRbzK8VxfHaenmp\/+5F8L08a5Z\/8Ef1QwvxMCZOxbUHO8NueDpri\/WTljtOsD78H773ubOOzudzsOxY8mFaiFVTEcHvNRODMelikmgcSX9vdXYIV4hX7IiWS7wERNVllFBSA\/iXQlf6AW5W1LISa0UruVUVwpZ9LWloxcGcRnEt8LFwasrW0Lvee\/i\/8R3Bt8LAmfLH\/cWX\/yv\/\/7T3oX08K5JEeBdU7OsjWcYgHdN6A0G3ZBR6mGSVGc1WemL7pede9w7bP5hfNFYWtFkhygFJ2BUcV2bZ3Um9Ws0wysoxMBSn2GIQot5CAhD4BuqzDiAF9KB5Rzvloo43pUwyvGuWALv2lnWkHRluS\/YPRy8WN5CVv48ZFrC8h\/\/+MeFjV+8+eZrqy+++eabq6t7iy++\/\/OhC8nxfiMhwPuNmiXFnC56+QbQzfECXVTQsOHObCrYF\/e\/7LbvPdjZ+XZCUVNaV2RGS2nJ0WyF+NRPeK9E0ot7+x02GUOsy0zgjAtIZjIL8+RiGO8K5Bg5XqDL8W6FyMrwfnbs+o+33noLoY\/feuvjg4sjlKxsIBpWSdkjej2ni15+hX80x8vpooKBvdlNtPvitx9V7kJisbM+YYdUNGRMPIjJPNOkxcDlHe7ED57ctO3bBHg53Rwvp4uikBfVSLz+JTz7W\/dEvbH6\/KMBb0YX0qjCDKcxPrz\/Uf0hRL7vTNohFWlBZhpEDhqlbpKQSoXaduKaI3gP6ZDsm+XylYxuhndl3BVYmgQeO2+LmBQj3C+1KQhCJOQd0CGDV+q4L1OSJS0S4pBN+BlEcHTMjw4PkFHu\/zqjGzldJB+5Zu8o+vy398WHd+9NpAt4ixrGzCOB4gZBkJBGxSGm6yrTVkgub+XmAng\/4xcnYYlFvGyECWoBPDWSLKEUedlFhhpig2m1kgEGjnD+jRRUAxljfyuwd6yDr55Ahx\/d4kcvSEgX4EsQVMTjcjmfdxn9Sy\/GONYszIl6+PlvxT883J28QyqWDV0ulGhiBEkAAW8xMYkNYfe0eAduWhDyK2C85hJDKqIXsMykrH+6wOQ8k7YYigZ2CObb8zESPKUp239sLp2\/X0cTKxpha8pkAfCqVohly1Php4BKMsqSS+l0bm7z8N1\/FX\/XPGSHVGxQI8ZGQEy\/GCTQslFeCUGNaWcGRXlLoyKrNxeHwRXH0EAKEi9Bh1e6UFCFzIjAScRI71kvJH+ChfXs3bEuYCSPdQ7YYmEhmtgKDI6O1VQH51BQFd3k3REMCMM59fHGx58bM0afA97WYTukYiUgGi65HqlW\/MQvB6ZNbeo6U+JlSM28tSaFus47w6U4YiGQUpmMLRWfddsmwScC11DmXiIC4P0uqpni\/f27\/3Z4LR7gTQJD9wI9qFfLvl\/1CbHBO5DpnIOQaoXsAnSkWhOKYZ+iWCT1zD6a6ff8+38\/1HYz5+AntlcKCmWxXi0mZT+wbZsk7nTWqxbifIaTJylyGs+ydZ6BBNlSek5bn1RLeiyJD56wQywC0KBUcgt8LNknZXC+YL5+cULB8NOTfOSqyLPTE2wXWgKx5kNrVnJZhtf0Kz6vNClWjlOJe4rCZfFpn8JxhCt+4FKnZNocb6K4DZ9S26yfYHrkqQgXz9sZHUmYewPbUGxaB7xuiTRcQol73n6IcenZvCMuThKXlBzDNiuAlxqAF5Lj80b3\/MUiRxR2E0o0Bay3URfrNs8tqM\/97gmm\/s9c+Dze7ehIwnymm6ZpNq+LrJMgKCZJbrvT1k+fnp5duoDXdU2NMYO4Yr2e+K5f7HmGaNry\/9PSM0wX8FLI0FJWIka1XqvV3MrA7+KxXStnLnzuIvAphCmBwEEvaEQpNpJipSbzuTh5T655cCbo2d9V+Zmmy+\/k5dqOHutEcYtBuX7YNKPDN52O5GeaLuANEtthhZg4NAnEkcqQMTprvPK0k0PPmWTi+7appdihJKjlmdH5wfuM2y7H26hRW9Gx5tN+zJAzLBRyR+sNjxCcLd5n3XZ501atAl6GdbfWjxlyhhSauEKEI6bKOBYsPDLsfiZ69ulC1latB8RkBd0eRGT9clOBqRbmAzka0jThSW555gqffboIJw2xSG0t1fZNklP1EBPM4lJJUuBvPFpuegYKp77dzDkULvJpQHZpuH6gN2ob8YFJKZ+2g9hoRdnp67mgi3CjUa8G1BnOF8aWm8oTN52KhOeCLgprtWrdT0aw5c6hgGTJyjyClCJBjUZK\/U9bwnnp8DihsB9Uq5XR\/t28hDdkEcOMVx1EFgtZqg82nb6eF7oo9t3KPro9hjKKdVxCQjb\/E2uysrfptPXc0EVxMRD3j01kDMPU4kW8KIz5\/E8ZWWcXOTw\/dAFv7cAY4VNOip8juiitHxxXs8bUmbL86SyG55\/VcbVxio84vh0+Txd9DqV7efFb+KNj641H56w46hyJicXseePSsbXxk\/M2wH\/qOnI9pqSIPHawenPMLo1MMbt0YPHSyMqlbNWPfjK5Sv451RQ3K7e47ck9aKvDU\/mWVvtLV1evLuXblxZXL\/W4Li5u8OdLb\/zw8E5buRXmeJe2ly5xdkuLS\/C40bfQS1cfPwaU8Ofx4yW+kHFd3LjJn\/dbr9y\/j+nOX4zVxrczusZnSAO8i9vbVzdu3rx1c3t74\/Hjqzcfr25vLy1e3b61COser2483liFhVuXlm5dvbm0cfXSHt5QyVRSRD\/vQ746Xhs7T\/dSn4bkgfU+vnlzdXF76erNjQ2wzpurGwD18dXH24u3YB2Y6\/YGX9i4Cd\/E4uo439ub4oKsCYHGzrn8f\/ROV33fC\/Z68+qt1dVbV7c3Fm9uAEewZXDCNxcfw7qNVfAXsHHxMTiPDfAUqz9Q3zut+pHD0qWlzMcuXX3MH7NX3L9mK7PHxXyPvn9+cuQgYYT5TLhnspB3VtpYGg1ml5bGB7kHtfSkuFfHEdN1dD5qr56S5PHN\/JH0BG86x3ua4vOMIyFE09\/Wf6655pprrrnmmmsuBIHUbO\/vMdeIKnk3MNeZTwz4AchHFhJSOSqkUllgSFc1ZslsbtAzUhEzZIZuGAWIIoIUlUpY1+d57YzkI6Q6\/GYLRg8vQXqI5tY7G6l8fJOQgsYCgcgao7IfSZXxt8qa65gaGKs08jTXXHPNNdfsJdE0zkOwYWc7d7yzkqkiVVUlVdCQavG7Z0ohYjKy+H0Oz9HNTJ5VOSkT1HIcyZ7g64rqIk1miizjNPZKU1RXzTVeYL0Rv+GCoCMHRdiVMUKaakvIxT+4WshTEAG4ElYES5MICpBvJRFmoYZVLZ7jPbHUOI5lwbJilMI\/IcZIZiiKUQGfyzsSzjXXXHPNNddcc80111xzzTXXkP4feqUbYjPyE2sAAAAASUVORK5CYII=)","30949a42":"There are also various other techniques you could follow to colorize black and white images with deep learning","abfc51e8":"## The objective\nThe objective of this notebook is to serve as an experimental purpose for how the most basic auto-encoder would perform against image colorization. This auto-encoder model is implemented with higher-level or complicated methodologies to solve image colorization with excellent results. But how will the most basic auto-encoder perform to solve this problem is demonstrated here.","5ac2546c":"## Image Colorization with deep convolutional Neural Network\n\nFirst of all this notebook would be very useful for the beginners to understand how black and white images could be colorized using Convolution Neural Network. <br>\n\nThe latest neural network technique involves the use of Resnet for feature extraction and combines or fusing it with a layer that comes after pooling\/downsampling of the input or encoded layer and then decoding it with convolution layers through upsampling to predict the colored image. Also, there are various types of GAN such as pix2pix GAN, Cycle gan which are much more advanced techniques for image colorization.<br>\n\nThe auto-encoder network which I have explained in this model also servers the purpose of a generator in the GAN network. There understanding this notebook would help you further in understanding complex networks and methodologies involved in image colorization.<br>","9e963733":"**CONCLUSION**\n* **The Model is able to identify the correct pattern or shades in which the color must be filled or we can say the model is able to separate out the portions which is needed to be colored  to get the colorized image but is not able to predict the accurate color for that shade or portion all the time with respect to the ground truth image.**\n* **I hope With the Help of feature extraction with ResNet this problem could be solved easily.**\n* **The Resuls also reflects the actual requirement for GAN and other image colorization techniques.**","5733df37":"## NOTE:-\n\n* Our Dataset consists of all coloured images and we have to use black and white image for training the model therefore we would be converting the colored image to grayScaled image and then turning it to RGB format to get the complete black and white image conversion.\n* I have also used Opencv to read the image but Opencv reads the image in BGR format, so we need to convert the image to RGB format first before turning it to greyscale.\n* You could also avoid using Opencv.\n* There are many lines of code which you would to be see in traditional colorizing technique but I have commented out those for better results in my case and also I have explained the reason with comments why that part of the code is used in traditional Colorizing technique.","0b4253fb":"What I have done here is very basic implementation of the colorizing model after going through a variety of research papers and website refrences. hope this would be very helpful....\n\nLink for references: [https:\/\/medium.freecodecamp.org\/colorize-b-w-photos-with-a-100-line-neural-network-53d9b4449f8d](https:\/\/medium.freecodecamp.org\/colorize-b-w-photos-with-a-100-line-neural-network-53d9b4449f8d)\n\n[https:\/\/www.learnopencv.com\/convolutional-neural-network-based-image-colorization-using-opencv\/](https:\/\/www.learnopencv.com\/convolutional-neural-network-based-image-colorization-using-opencv\/)","cd02e27f":"**There are two techniques to generate colored image from its gray scaled form:-**\n1. **Turn the RGB image into LAB image, then separate the L value and ab value from the image and then train the model to predict the ab value**.\n2. **Turn the RGB image into LUV image, then separate the L value and UV value from the image and then train the model to predict the UV value**.\n\nHere I have used Lab value to colorize the image, where  L stands for lightness, and a and b for the color spectra green\u2013red and blue\u2013yellow.**"}}