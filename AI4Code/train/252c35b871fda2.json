{"cell_type":{"e1c9a80c":"code","24a57ec9":"code","3dba9103":"code","0d909e2d":"code","ca8a2f88":"code","6ac92cdc":"code","ff5c3a28":"code","9630c164":"code","da744570":"code","5ba5d190":"code","a2caa605":"code","756eb053":"code","33b1a13b":"code","acd39aeb":"code","1fc04108":"code","3d8b1532":"code","de574f92":"code","e10495e5":"code","eca97a8d":"code","c93f4e6e":"code","f3429179":"code","e71a6031":"code","923dc902":"code","34d8498c":"code","a288631c":"markdown","2659ef63":"markdown","7f024b5f":"markdown","75057a4e":"markdown","9dc9d808":"markdown","77724c22":"markdown","25d6cc8b":"markdown","3ce3f85e":"markdown","cfed5381":"markdown","7e3c9cb1":"markdown","c1aa3bb5":"markdown","f5ad497e":"markdown","e3e5f02a":"markdown","be31cc8d":"markdown","a7501016":"markdown"},"source":{"e1c9a80c":"# importar pacotes necess\u00e1rios\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","24a57ec9":"from fbprophet import Prophet","3dba9103":"#prefixo_arquivos = ''\nprefixo_arquivos = '..\/input\/serpro-weather\/'","0d909e2d":"# carregar arquivo de dados de treino\ntrain_data = pd.read_csv(prefixo_arquivos + 'weather-train.csv', index_col='date', parse_dates=['date'])\ntrain_data.info()\ntrain_data.head()","ca8a2f88":"# carregar arquivo de dados de teste\ntest_data = pd.read_csv(prefixo_arquivos + 'weather-test.csv', index_col='date', parse_dates=['date'])\ntest_data.info()\ntest_data.head()","6ac92cdc":"# ajustar dados de treino para o formato do Prophet\ndata2 = train_data[['temperature']]\ndata2 = data2.reset_index()\ndata2.columns = ['ds', 'y']\ndata2.head()","ff5c3a28":"data2.tail()","9630c164":"# criar e treinar o modelo\nmodel = Prophet(daily_seasonality=False)\nmodel.fit(data2)","da744570":"# criar s\u00e9rie com dados futuros (2 anos)\nfuture = model.make_future_dataframe(periods=365*2)\nfuture.tail()","5ba5d190":"# realizar previs\u00e3o com dados futuros\nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","a2caa605":"# dividir os dados em 80% + 20%\ndivisao = int(data2.shape[0] * 4 \/ 5)\ndata2a = data2[:divisao]\ndata2b = data2[divisao:]\nprint(data2.shape, '=', data2a.shape, '+', data2b.shape)","756eb053":"data2a.info()\ndata2a.head()","33b1a13b":"# criar e treinar o modelo\nmodel = Prophet(daily_seasonality=False)\nmodel.fit(data2a)","acd39aeb":"# preparar dados futuros\nfuture = data2b.drop(['y'], axis=1)\nfuture.info()\nfuture.head()","1fc04108":"# realizar a previs\u00e3o\nforecast = model.predict(future)\nforecast[['ds', 'yhat']].tail()","3d8b1532":"# mesclar os dois dataframes novamente\ndata3 = data2b.merge(forecast)[['ds', 'y', 'yhat', 'yhat_lower', 'yhat_upper']]\ndata3['diff'] = abs(data3['y'] - data3['yhat'])\ndata3.info()\ndata3.head()","de574f92":"# plotar gr\u00e1fico comparando valores reais e previstos\nplt.figure(figsize=(16, 9))\n\ndata3['y'].plot(alpha=0.5, style='-')\ndata3['yhat'].plot(style=':')\ndata3['yhat_lower'].plot(style='--')\ndata3['yhat_upper'].plot(style='--')\n\nplt.legend(['real', 'previsto', 'pmenor', 'pmaior'], loc='upper left')","e10495e5":"def rmse(predictions, targets):\n    assert len(predictions) == len(targets)\n    return np.sqrt(np.mean((predictions - targets) ** 2))\n\ndef rmsle(predictions, targets):\n    assert len(predictions) == len(targets)\n    return np.sqrt(np.mean((np.log(1 + predictions) - np.log(1 + targets)) ** 2))","eca97a8d":"print('RMSE:', rmse(data3['yhat'], data3['y']))","c93f4e6e":"# criar dados futuros a partir dos dados de teste\nfuture_data = pd.DataFrame(test_data.index.values, columns=['ds'])\nfuture_data.info()\nfuture_data.head()","f3429179":"# realizar a previs\u00e3o\nforecast = model.predict(future_data)\nforecast[['ds', 'yhat']].tail()","e71a6031":"# construir dataframe com previs\u00e3o\npred_data = pd.DataFrame({\n    'date': forecast['ds'],\n    'temperature': forecast['yhat']\n})\npred_data.set_index('date', inplace=True)\npred_data.info()\npred_data.head()","923dc902":"# criar diret\u00f3rio de submiss\u00f5es\n!dd=\"submissions\/\"; if [ ! -d $dd ]; then mkdir $dd; fi","34d8498c":"# gravar arquivo CSV com os resultados\nnome_arquivo = 'weather-submission-prophet.csv'\n#nome_arquivo = 'submissions\/weather-submission-prophet.csv'\npred_data.to_csv(nome_arquivo)\nprint('Arquivo gravado com sucesso:', nome_arquivo)","a288631c":"# https:\/\/towardsdatascience.com\/basic-time-series-manipulation-with-pandas-4432afee64ea\ntest_dates = pd.date_range(start='2016-11-17', end='2017-11-29', freq='D')\ntest_dates","2659ef63":"## Previs\u00e3o de valores futuros com os dados de teste","7f024b5f":"## Modelagem preditiva","75057a4e":"# decompor tend\u00eancia e sazonalidades do modelo\nfig2 = model.plot_components(forecast)","9dc9d808":"# SERPRO - Weather\n\n_Previs\u00e3o de temperaturas m\u00e9dias com base em dados hist\u00f3ricos_\n\nhttps:\/\/www.kaggle.com\/c\/serpro-weather\/","77724c22":"## Carga dos dados","25d6cc8b":"## Gera\u00e7\u00e3o do arquivo de resultados","3ce3f85e":"### Teste do modelo","cfed5381":"## Transforma\u00e7\u00f5es nos dados","7e3c9cb1":"### Avaliar a precis\u00e3o do modelo","c1aa3bb5":"### Medi\u00e7\u00e3o do Erro M\u00e9dio Quadr\u00e1tico (RMSE)","f5ad497e":"## Refer\u00eancias\n\n### Prophet Quick Start Guide \n- https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html\n\n### GitHub - facebook\/prophet\n- https:\/\/github.com\/facebook\/prophet\n\n### Analysis of Stock Market Cycles with fbprophet package in Python\n- https:\/\/towardsdatascience.com\/analysis-of-stock-market-cycles-with-fbprophet-package-in-python-7c36db32ecd0","e3e5f02a":"# instalar pacotes especiais\n!conda install pystan -y\n!pip install fbprophet","be31cc8d":"# plotar dados reais e previs\u00e3o\nfig1 = model.plot(forecast)","a7501016":"## Importa\u00e7\u00e3o dos pacotes"}}