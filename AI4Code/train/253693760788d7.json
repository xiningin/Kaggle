{"cell_type":{"3586ba73":"code","d61a460c":"code","1d1057c1":"code","e8a7a7cb":"code","d87f446c":"code","93226824":"code","21e0143e":"code","e146ad06":"code","89dfdb81":"code","e80fcf77":"code","5364005e":"code","f9cc7722":"code","e6935582":"code","c6ca3f4d":"code","a735d7d6":"code","e40c60f8":"code","6d96d14a":"code","3b7503e2":"code","be600960":"markdown"},"source":{"3586ba73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d61a460c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.metrics import classification_report\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport warnings\nwarnings.filterwarnings('ignore')","1d1057c1":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","e8a7a7cb":"sub = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","d87f446c":"X_train = train.drop('label', axis = 1)\ny_train = train['label']","93226824":"X_train = np.array(X_train.values).reshape(-1, 28, 28, 1) \/ 255.0\nX_test = np.array(test.values).reshape(-1, 28, 28, 1) \/ 255.0\n\nX_val = X_train[:20000]\ny_val = y_train[:20000]","21e0143e":"#Padding the images\n\ndef padding(X_train, X_valid, X_test):\n    # Pad images with 0s\n    X_train = np.pad(X_train, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n    X_valid = np.pad(X_valid, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n    X_test = np.pad(X_test, ((0,0),(2,2),(2,2),(0,0)), 'constant')\n    return X_train, X_valid, X_test","e146ad06":"X_train, X_val, X_test = padding(X_train, X_val, X_test)","89dfdb81":"print(X_train.shape)\nprint(X_val.shape)\nprint(X_test.shape)","e80fcf77":"model = keras.models.Sequential([\n    keras.layers.Conv2D(filters = 6, kernel_size = (5, 5), activation = 'tanh', input_shape = (32, 32, 1)),\n    keras.layers.AvgPool2D(2, strides = 2),\n    keras.layers.Conv2D(filters = 16, kernel_size = (5, 5), activation = 'tanh'),\n    keras.layers.AvgPool2D(2, strides = 2),\n    keras.layers.Conv2D(filters = 120, kernel_size = (5, 5), activation = 'tanh'),\n    keras.layers.Flatten(),\n    keras.layers.Dense(84, activation = 'tanh'),\n    keras.layers.Dense(10, activation = 'softmax')\n    ])\n    \n#Training Process\n\nmodel.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n","5364005e":"#Data Augmentation \n\ndatagen = ImageDataGenerator(\n        rotation_range = 10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range = 0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range = 0.1,  # randomly shift images vertically (fraction of total height)\n        )\n\ndatagen.fit(X_train)","f9cc7722":"epochs = 50\n\nmodel.fit_generator(datagen.flow(X_train, y_train), epochs = 50, \n                    validation_data = (X_val, y_val))","e6935582":"val_predictions = model.predict(X_val).argmax(axis = 1)","c6ca3f4d":"model.evaluate(X_val, y_val)","a735d7d6":"print(classification_report(y_val, val_predictions))","e40c60f8":"final_predictions = model.predict(X_test).argmax(axis = 1)","6d96d14a":"sub['Label'] = final_predictions","3b7503e2":"sub.head()","be600960":"**Thank you**"}}