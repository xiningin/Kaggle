{"cell_type":{"1d705ff9":"code","9b96a225":"code","1f29018a":"code","ee9318fb":"code","420e27c5":"code","79db6d86":"code","18a1a56d":"code","7058a20f":"code","31441446":"code","cef25e24":"code","4ea826c2":"code","a6b017f5":"code","422ff31f":"code","009dfd35":"code","b5366d2d":"code","13aae259":"code","944765b8":"code","87206cde":"code","4c71be7e":"code","6a78fc59":"code","168c240d":"code","63311d05":"code","95411e5a":"code","74b81225":"code","229799bd":"code","b53ef612":"code","938b8b3f":"markdown","5a051eef":"markdown","d609f819":"markdown","4b42eaab":"markdown"},"source":{"1d705ff9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b96a225":"from random import sample","1f29018a":"x=[1,2,3,4,5,6,7,8,9,10]\nx1=sample(x, 5)\nx2=list(set(x)-set(x1))\nprint(x1)\nprint(x2)","ee9318fb":"from collections import defaultdict\n","420e27c5":"a=[1,2,'a', 3, 'r', 5]\n\na=[x for x in a if isinstance(x, str)]\na\n","79db6d86":"a=[1,2,'a', 3, 'r', 5.0]\n\na=[x for x in a if isinstance(x, float)]\na\n","18a1a56d":"a","7058a20f":"a=[1,2,'a', 3, 'r', 5.0]\n\ninte=[x for x in a if isinstance(x,int )]\nfloate=[x for x in a if isinstance(x,float)]\nstre=[x for x in a if isinstance(x,str)]\nprint(inte)\nprint(floate)\nprint(stre)","31441446":"df=pd.read_csv('..\/input\/exp-work\/exp - Sheet1.csv')\ndf","cef25e24":"df.info()","4ea826c2":"df","a6b017f5":"def date_disimilar(data, col):\n    cnt=0\n    for i in data[col]:\n        if i.isalnum()==True:\n            cnt+=1\n    per=(cnt\/len(data[col]))*100\n    return round(per, 2)\n             ","422ff31f":"date_disimilar(df, 'Date')","009dfd35":"# string dismillar\ndef string_disimilar(data, col):\n    cnt=0\n    for i in data[col]:\n        if i.isalpha()!=True:\n            cnt+=1\n    per=(cnt\/len(data[col]))*100\n    return per\n             ","b5366d2d":"string_disimilar(df, 'Name')","13aae259":"df","944765b8":"d={'C1':[False, True, 'a', np.nan], 'C2':[1,2,'eee', np.nan], 'C3':[1.2, 3.0, 'aed', np.nan],\n   'C4':[1,2,3,'a'], 'C5':[1,2,90,\"srt\"]}\n\ndf=pd.DataFrame(d)\ndf","87206cde":"# Float Mismatch\ndef float_mismatch(data, col):\n    c=0\n    c1=data[col].isna().sum()\n    for i in data[col]:\n        if i==float():\n            c+=1\n    z=len(data[col])-c-c1\n    return (z\/len(data[col]))*100","4c71be7e":"float_mismatch(df, 'C3')","6a78fc59":"# Boolean Mismatch\ndef bool_missmatch(data, col): \n    c=0\n    c1=data[col].isna().sum()\n\n    for i in data[col]:\n        if i==False or i==True:\n            c+=1\n    #print(c)\n    #print(len(data[col]))\n    z=len(data[col])-c\n    return (z\/len(data[col]))*100","168c240d":"bool_missmatch(df, 'C1')","63311d05":"# Date Disimilar\ndef date_disimilar(data, col):\n    cnt=0\n    for i in data[col]:\n        if i.isalnum()==True:\n            cnt+=1\n    per=(cnt\/len(data[col]))*100\n    return cnt\n# Float Mismatch\ndef float_mismatch(data, col):\n    c=0\n    c1=data[col].isna().sum()\n    for i in data[col]:\n        if i==float():\n            c+=1\n    z=len(data[col])-c-c1\n    return (z\/len(data[col]))*100\n# string dismillar\ndef string_disimilar(data, col):\n    cnt=0\n    for i in data[col]:\n        if i.isalpha()!=True:\n            cnt+=1\n    per=(cnt\/len(data[col]))*100\n    return cnt\n# Boolean Mismatch\ndef bool_missmatch(data, col): \n    c=0\n    c1=data[col].isna().sum()\n\n    for i in data[col]:\n        if i==False or i==True:\n            c+=1\n    print(c)\n    print(len(data[col]))\n    z=len(data[col])-c\n    return (z\/len(data[col]))*100      \n","95411e5a":"def mismatch(data):   \n    # Date Disimilar\n    def date_disimilar(data, col):\n        cnt=0\n        for i in data[col]:\n            if i.isalnum()==True:\n                cnt+=1\n        per=(cnt\/len(data[col]))*100\n        return cnt\n    # Float Mismatch\n    def float_mismatch(data, col):\n        c=0\n        c1=data[col].isna().sum()\n        for i in data[col]:\n            if i==float():\n                c+=1\n        z=len(data[col])-c-c1\n        return (z\/len(data[col]))*100\n    # string dismillar\n    def string_disimilar(data, col):\n        cnt=0\n        for i in data[col]:\n            if i.isalpha()!=True:\n                cnt+=1\n        per=(cnt\/len(data[col]))*100\n        return cnt\n    # Boolean Mismatch\n    def bool_missmatch(data, col): \n        c=0\n        c1=data[col].isna().sum()\n\n        for i in data[col]:\n            if i==False or i==True:\n                c+=1\n        print(c)\n        print(len(data[col]))\n        z=len(data[col])-c\n        return (z\/len(data[col]))*100      \n","74b81225":"df","229799bd":"mismatch(df)","b53ef612":"def dismilar_in_data(data):\n    ob_data=data.select_dtypes(include=['object'])\n    float_data=data.select_dtypes(include=['float64'])\n    int_data=data.select_dtypes(include=['int64'])\n    col1=int_data.columns\n    n1=len(col1)\n    c1=0\n    for j in range(n1-1):\n        for i in int_data:\n            if i!=int():\n                c1+=1\n    #print(c1)\n    col2=ob_data.columns\n    n2=len(col2)\n    c2=0\n    for j in range(n2-1):\n        for i in int_data[col2[j]]:\n            if i!=str():\n                c2+=1\n    #print(c2)\n    col3=float_data.columns\n    n3=len(col3)\n    c3=0\n    index=0\n    for j in range(n3-1):\n        for i in float_data[col3[j]]:\n            if i==float:\n                c3+=1\n\n    #print(c3)      \n    \n    return c1,c2,c3","938b8b3f":"# Date ","5a051eef":"# Float","d609f819":"# String ","4b42eaab":"# Boolean"}}