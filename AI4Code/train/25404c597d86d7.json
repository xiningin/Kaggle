{"cell_type":{"e26dc621":"code","c53c22f4":"code","a5ae88f5":"code","8b218863":"code","2ed2c2ec":"code","962682f7":"code","3125a4c4":"code","5036d965":"code","058c5490":"code","1914e40e":"code","1c376516":"code","c6f7bbeb":"code","ba292a01":"code","01202796":"code","c4eeda6a":"code","1ee4c0c0":"code","a1a5ebd0":"code","623c086a":"code","eb38f843":"markdown"},"source":{"e26dc621":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c53c22f4":"irisDf = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\nirisDf\n","a5ae88f5":"irisData = pd.DataFrame({'Sepal Length': irisDf['SepalLengthCm'], \n                         'Sepal Width': irisDf['SepalWidthCm'], \n                         'Class': irisDf['Species']})\nirisData","8b218863":"sepalLength = irisData['Sepal Length'].values\nsepalLength","2ed2c2ec":"sepalWidth = irisData['Sepal Width'].values\nsepalWidth","962682f7":"sepalClass = irisData['Class'].values\nsepalClass","3125a4c4":"def euclidean(array1,array2,b1,b2):\n    arrayjarak = []\n    for i in range(len(array1)):\n        jarak = np.sqrt(np.round(((array1[i]-b1)**2)+((array2[i]-b2)**2)))\n#         print(jarak, array1[i], b1, array2[i], b2, (array1[i]-b1)**2+((array2[i]-b2)**2), np.round(((array1[i]-b1)**2)+((array2[i]-b2)**2)))\n        arrayjarak.append(jarak)\n    return arrayjarak","5036d965":"def knearest(array1,array2,array3,b1,b2):\n    traindata = []\n    arrayjarak = euclidean(array1,array2,b1,b2)\n    traindata.append(array1)\n    traindata.append(array2)\n    traindata.append(array3)\n    traindata.append(arrayjarak)\n    return traindata","058c5490":"knearest(sepalLength,sepalWidth,sepalClass,7,4)","1914e40e":"traindata = knearest(sepalLength,sepalWidth,sepalClass,7,4)\ndf = pd.DataFrame({\"Sepal Length\":traindata[0], \n                   \"Sepal Width\":traindata[1],\n                   \"Class\":traindata[2],\n                   \"Jarak ke data uji (X1=7,X2=4)\":traindata[3]})\nresult = df.sort_values(by=['Jarak ke data uji (X1=7,X2=4)'])\nresult","1c376516":"result['Class'].head(3).values","c6f7bbeb":"from sklearn.neighbors import KNeighborsClassifier","ba292a01":"label=labelEncoder.fit_transform(sepalClass)\nlabel","01202796":"features=list(zip(sepalLength,sepalWidth))\nfeatures","c4eeda6a":"model = KNeighborsClassifier(n_neighbors=3)\n# model.fit(features, label)\nmodel.fit(features, label)","1ee4c0c0":"predicted= model.predict([[7,4]])\npredicted","a1a5ebd0":"def irisTargetClass (resArray):\n    result = ''\n    if (resArray[0] == 0):\n        result = \"Iris Setosa\"\n    elif (resArray[0] == 1):\n        result = \"Iris Versicolor\"\n    elif (resArray[0] == 2):\n        result = \"Iris Virginica\"\n    return result","623c086a":"irisTargetClass(predicted)","eb38f843":"## Label\n\n### 0 = *Iris setosa*\n### 1 = *Iris versicolor*\n### 2 = *Iris virginica*"}}