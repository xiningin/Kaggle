{"cell_type":{"d7e89fea":"code","9c684e11":"code","e6d5397f":"code","d4823cd8":"code","93f0cc75":"code","1b7f2a9b":"code","b325a88f":"code","75fe2f54":"code","1305c706":"code","3be9f9a4":"code","f0a68830":"code","8ca396e2":"code","09b6542a":"code","210cfc2a":"code","2cf43015":"code","48b2fb39":"code","eb7afd59":"code","8b03a2ea":"code","5dffe4c1":"code","1d941d7a":"code","07ec1710":"code","8489ebc1":"code","b3ccb587":"code","28edd9e9":"code","811386fa":"code","b8ce05d2":"code","5819ed6f":"code","9ae32167":"code","11f3a08d":"code","47fc51ea":"code","b00fcf8f":"code","f730c1a7":"code","a823f321":"code","53447eb3":"code","f036795e":"code","98cb558e":"code","47f74586":"markdown","ee1bad6c":"markdown","bb2218a3":"markdown","1c9cf255":"markdown","cc691a7a":"markdown","a4c9cbc8":"markdown"},"source":{"d7e89fea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c684e11":"os.listdir('\/kaggle\/input\/plant-pathology-2021-fgvc8\/')","e6d5397f":"import pandas as pd\nimport numpy as np\nimport os\nfrom glob import glob\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import datasets\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import DenseNet169, Xception, InceptionResNetV2, MobileNetV2, InceptionV3\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\n\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nplt.style.use('seaborn')\n%matplotlib inline","d4823cd8":"train_df = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nprint(\"Dataset Shape: \",train_df.shape)\ntrain_df.head()","93f0cc75":"train_df['labels'] = train_df['labels'].apply(lambda x: tuple(x.split(\" \")))\ntrain_df.head()","1b7f2a9b":"datapath = glob('\/kaggle\/input\/plant-pathology-2021-fgvc8\/train_images\/*')\nprint(\"Image Datasets Shape: \", len(datapath))","b325a88f":"f,ax = plt.subplots(1,1,figsize=(18,8))\nax = sns.countplot(train_df['labels'], order=train_df['labels'].value_counts().sort_values(ascending=False).index)\nax.set_xlim(0,8)\nax.set_title('Train Dataset per labels Count')\nplt.show()","75fe2f54":"train_df['labels'].value_counts()","1305c706":"unique_list = np.unique(train_df['labels'])\nprint(unique_list)\nprint(train_df['labels'].value_counts().count())","3be9f9a4":"def read_image(path):\n    path = os.path.join('..\/input\/plant-pathology-2021-fgvc8\/train_images',path[\"image\"])\n    gfile = tf.io.read_file(path)\n    image = tf.io.decode_image(gfile, dtype = tf.float32)\n                  \n    return image","f0a68830":"def get_label(path):\n    return path['labels']","8ca396e2":"def get_label_image(path):\n    label = get_label(path)\n    image = read_image(path)\n    return label, image","09b6542a":"index_list = np.random.randint(128, size=5)\nfor i in index_list:\n    path = train_df.iloc[i]\n    sample_label, sample_image = get_label_image(path)\n    plt.imshow(sample_image)\n    plt.title(sample_label)\n    plt.show()","210cfc2a":"INPUT_SIZE = (256,256,3)\nBATCH_SIZE = 32","2cf43015":"datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    width_shift_range = 0.07, \n    zoom_range= 0.1, \n    horizontal_flip = True,\n    validation_split=0.2\n)","48b2fb39":"train_generator = datagen.flow_from_dataframe(\n    train_df,\n    directory=\"..\/input\/plant-pathology-2021-fgvc8\/train_images\",\n    x_col='image',\n    y_col='labels',\n    target_size=INPUT_SIZE[:2],\n    subset='training'\n)\n\nval_generator = datagen.flow_from_dataframe(\n    train_df,\n    directory=\"..\/input\/plant-pathology-2021-fgvc8\/train_images\",\n    x_col='image',\n    y_col='labels',\n    target_size=INPUT_SIZE[:2],\n    subset='validation'\n)","eb7afd59":"train_generator.class_indices","8b03a2ea":"for x, y in train_generator:\n    break","5dffe4c1":"for i in range(5):\n    plt.title(y[i])\n    plt.imshow(x[i])\n    plt.show()","1d941d7a":"weights_path = \"..\/input\/keras-pretrained-models\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\"","07ec1710":"pre_model = InceptionV3(include_top=False, weights=weights_path, input_shape=INPUT_SIZE)","8489ebc1":"model = tf.keras.Sequential()\nmodel.add(pre_model)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(6, activation='softmax'))","b3ccb587":"model.summary()","28edd9e9":"# you can use this callback func\ncallback= ReduceLROnPlateau(monitor='val_loss',\n                       factor=.01, \n                       patience=3, \n                       min_lr=1e-5) ","811386fa":"model.compile(optimizer = tf.keras.optimizers.Adam(lr=0.00007),\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","b8ce05d2":"history = model.fit(\n    train_generator,\n    steps_per_epoch=len(train_generator)\/\/BATCH_SIZE,\n    epochs=10,\n    validation_data=val_generator,\n    validation_steps=len(val_generator)\/\/BATCH_SIZE\n)","5819ed6f":"f,ax = plt.subplots(2,1,figsize=(20,10))\nax[0].plot(history.history['loss'])\nax[0].plot(history.history['val_loss'])\nax[0].set_title('Model loss')\nax[0].set_ylabel('Loss')\nax[0].set_xlabel('Epoch')\nax[0].legend(['Train', 'Val'], loc='upper left')\n\nax[1].plot(history.history['accuracy'])\nax[1].plot(history.history['val_accuracy'])\nax[1].set_title('Model accuracy')\nax[1].set_ylabel('Accuracy')\nax[1].set_xlabel('Epoch')\nax[1].legend(['Train', 'Val'], loc='upper left')\n\nf.tight_layout()\nplt.show()","9ae32167":"submission = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nsubmission.head()","11f3a08d":"test_datagen = ImageDataGenerator(\n    rescale = 1.\/255\n)\n\ntest_generator =  datagen.flow_from_dataframe(\n    submission,\n    directory=\"..\/input\/plant-pathology-2021-fgvc8\/test_images\",\n    x_col='image',\n    y_col=None,\n    class_mode=None,\n    target_size=INPUT_SIZE[:2]\n)","47fc51ea":"train_generator.class_indices.items()","b00fcf8f":"def get_key(val):\n    for key, value in train_generator.class_indices.items():\n        if val == value:\n            return key","f730c1a7":"preds = model.predict(test_generator)\nprint(preds)","a823f321":"def get_preds_to_labels(preds):\n    pred_lists = []\n    for pred in preds:\n        pred_list = []\n        health = (pred>=0.4)\n        \n        # get healthy\n        if health.sum()==0:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        elif pred[2]>=0.5:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        # get eles label\n        else:\n            for j, sub in enumerate(pred):\n                if sub>=0.28:\n                    label = get_key(j)\n                    pred_list.append(label)\n                               \n        pred_lists.append(' '.join(pred_list))\n    return pred_lists","53447eb3":"preds_list = get_preds_to_labels(preds)","f036795e":"submission['labels'] = preds_list\nsubmission.head()","98cb558e":"submission.to_csv('submission.csv', index=False)","47f74586":"#### THX to Reading My Notebook\ud83c\udf08","ee1bad6c":"# Modeling\n* DenseNet 169","bb2218a3":"# Feature Engineering\n* Split Train \/ Validation Data\n* Image Data Generate","1c9cf255":"# EDA\n* Labels per Value Percent\n* Plot Sample Images","cc691a7a":"# Submission","a4c9cbc8":"#### Reference :\n* https:\/\/www.kaggle.com\/demetrypascal\/better-train-csv-format-keras-starter\n* https:\/\/www.kaggle.com\/rsamdev\/kaggle-starter-keras\n* https:\/\/www.kaggle.com\/arnabs007\/apple-leaf-diseases-with-inceptionresnetv2-keras\n* https:\/\/www.kaggle.com\/emorkrin\/baseline-keras-17-04\/data#GoogLeNet"}}