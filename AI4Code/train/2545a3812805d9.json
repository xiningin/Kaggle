{"cell_type":{"091446f0":"code","6d458223":"code","e4d949cc":"code","537d3699":"code","361d0813":"code","b7a6b67b":"code","8cc32889":"code","95bfc859":"code","2ca43e1b":"code","79bac054":"code","d9098bf9":"code","5b7f3ffe":"code","0374262f":"code","85067f63":"code","61b48966":"code","3eb82219":"code","71f3070b":"code","bf2d0838":"code","621c550c":"code","5216217c":"code","7637aacd":"code","a19fe53e":"code","10b66f66":"code","b7b72f96":"markdown","6a67c79a":"markdown"},"source":{"091446f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d458223":"import plotly.express as px","e4d949cc":"train = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain.head()","537d3699":"print(\"Total numper of Drug Samples :\",train.sig_id.nunique())","361d0813":"cp = train.groupby('cp_type')['sig_id'].count().reset_index(name = 'count')\nfig = px.pie(cp, values='count', names='cp_type', title='Cp_Type')\nfig.show()","b7a6b67b":"cp_time = train.groupby('cp_time')['sig_id'].count().reset_index(name = 'count')\nfig = px.pie(cp_time, values='count', names='cp_time', title='Cp_Time')\nfig.show()","8cc32889":"cp_dose = train.groupby('cp_dose')['sig_id'].count().reset_index(name = 'count')\nfig = px.pie(cp_dose, values='count', names='cp_dose', title='Cp_Dose')\nfig.show()","95bfc859":"cp = train.groupby(['cp_type','cp_time'])['sig_id'].count().reset_index(name = 'count')\nfig = px.bar(cp, x=\"cp_type\", y=\"count\", color=\"cp_time\")\nfig.show()","2ca43e1b":"cp = train.groupby(['cp_type','cp_dose'])['sig_id'].count().reset_index(name = 'count')\nfig = px.bar(cp, x=\"cp_type\", y=\"count\", color=\"cp_dose\")\nfig.show()","79bac054":"cp = train.groupby(['cp_dose','cp_time'])['sig_id'].count().reset_index(name = 'count')\nfig = px.bar(cp, x=\"cp_time\", y=\"count\", color=\"cp_dose\")\nfig.show()","d9098bf9":"train.head()","5b7f3ffe":"g_col = [col for col in train if col.startswith('g-')]\nprint(\"Gene Expression data count : \",+len(g_col))\n\nc_col = [col for col in train if col.startswith('c-')]\nprint(\"Cell Expression data count : \",+len(c_col))","0374262f":"fig = px.line(train[['sig_id','g-5']], x=\"sig_id\", y=\"g-5\", title='Gene vs Sigid:G-5')\nfig.show()","85067f63":"fig = px.line(train[['sig_id','g-500']], x=\"sig_id\", y=\"g-500\", title='Gene vs Sigid:g-500')\nfig.show()","61b48966":"fig = px.line(train[['sig_id','g-100']], x=\"sig_id\", y=\"g-100\", title='Gene vs Sigid:g-100')\nfig.show()","3eb82219":"fig = px.line(train[['sig_id','g-700']], x=\"sig_id\", y=\"g-700\", title='Gene vs Sigid:g-700')\nfig.show()","71f3070b":"one = train[train['sig_id']=='id_000779bfc']\none_ = one[g_col].T\nfig1 = px.line(one_, x=None, y=1, title='one sig_id')\nfig1.show()","bf2d0838":"tow = train[train['sig_id']=='id_001626bd3']\nfig = px.line(tow[g_col].T, x=None, y=4, title='one sig_id')\nfig.show()","621c550c":"fig = px.line(train[['sig_id','c-5']], x=\"sig_id\", y=\"c-5\", title='Gene vs Sigid:c-5')\nfig.show()","5216217c":"fig = px.line(train[['sig_id','c-50']], x=\"sig_id\", y=\"c-50\", title='Gene vs Sigid:C-50')\nfig.show()","7637aacd":"one = train[train['sig_id']=='id_000779bfc']\none_ = one[c_col].T\nfig1 = px.line(one_, x=None, y=1, title='one sig_id')\nfig1.show()","a19fe53e":"one = train[train['sig_id']=='id_0015fd391']\none_ = one[c_col].T\nfig1 = px.line(one_, x=None, y=3, title='one sig_id')\nfig1.show()","10b66f66":"target = pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ncols = target.columns.to_list()\ncols.remove('sig_id')\ndf = pd.DataFrame(columns = ['item','count'])\nit = []\ncnt = []\nfor item in cols:\n    it.append(item)\n    cnt.append(target[item].sum())\ndf['item'] = it\ndf['count'] = cnt\n#print(df)\n\nfig = px.bar(df, y='count', x='item', text='count')\nfig.update_traces(texttemplate='%{text:.2s}',textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","b7b72f96":"Above four charts are randomly picked gene data for each sig_id. few genes spread only positie range of values like -2 to 10, few spreads -5 to 5.","6a67c79a":"If you <font color = 'orange'>like<\/font> this kernel and want to <font color = 'orange'>fork<\/font> plz <font color = 'red'><b>UPVOTE.<\/b><\/font>\n\nIf you have suggestions to improve this kernel plz <font color = 'red'>COMMENT.<\/font>\n\n<font color = 'Orange'><b>************************ Notebook is under construction ************************<\/b><\/font>"}}