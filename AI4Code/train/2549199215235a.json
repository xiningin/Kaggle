{"cell_type":{"2d10cdd4":"code","cd6d762b":"code","03caf03a":"code","f9243eed":"code","ab3a378c":"code","286b15dd":"code","51113f27":"code","196cda80":"code","ddcdefa9":"code","9bc9acd4":"code","ab632595":"code","5a6d113f":"code","c6fae67a":"code","db6d1271":"code","e2d12d51":"code","ed124579":"code","9e0e4057":"code","c9e02a67":"code","1282e627":"code","e062a3d9":"code","af12726c":"code","7fda9b77":"code","f075d877":"code","33d87fd6":"code","df0722e8":"code","2033ad23":"code","a98acaad":"code","fdf2884b":"markdown"},"source":{"2d10cdd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cd6d762b":"train = pd.read_csv('\/kaggle\/input\/inf265-pucp-competencia-capstone\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/inf265-pucp-competencia-capstone\/test.csv')\nsaleData = pd.read_excel('\/kaggle\/input\/saledata\/SaleData.xlsx')","03caf03a":"train.head(10)","f9243eed":"# Concatenar\ndataToConcatenate = [train,test]\nconcatenado = pd.concat(dataToConcatenate, sort =True)\nconcatenado","ab3a378c":"print(train.shape)\nprint(test.shape)\nif train.shape[1] - test.shape[1]:\n    print(\"No tienen el mismo numero de columnas\")","286b15dd":"# Imprimimos la columna diferente\nset(train.columns).difference(set(test.columns))","51113f27":"# Encontrandos los nulos\ntoShow = concatenado[concatenado['Target'].isna()]\nprint(toShow.shape[0])\ntoShow","196cda80":"concatenado.columns","ddcdefa9":"concatenado = concatenado.rename(columns = lambda x: x.strip())","9bc9acd4":"concatenado.columns","ab632595":"concatenado = concatenado.rename(columns = lambda x: x.replace(' ', '_'))","5a6d113f":"concatenado.columns","c6fae67a":"# VAMOS A LEER UN POCO CON PANDAS","db6d1271":"#Funciones Herramientas\ndef pintarRaya():\n    print('--------------------------------------------------')\n\ndef contarMissing(data, column):\n    return data[column].isna().sum()\n    \ndef mostrarValueCounts(data, column):\n    valueCounts = data[column].value_counts()\n    valueCountsNormalize = data[column].value_counts(normalize = True)\n    pintarRaya()\n    print(valueCounts)\n    pintarRaya()\n    print(valueCountsNormalize)\n    pintarRaya()","e2d12d51":"mostrarValueCounts(data = concatenado, column = 'Target')","ed124579":"contarMissing(data = concatenado, column = 'Target')","9e0e4057":"sns.heatmap(concatenado.isna()) #DATA MUY LIMPIA","c9e02a67":"mostrarValueCounts(concatenado, 'Estado_Civil')\nmostrarValueCounts(concatenado, 'Edad')","1282e627":"# CONDICIONALES LECTUR\nconcatenado[(concatenado['Estado_Civil'] == 'casado') & (concatenado['Edad'] == 36)]","e062a3d9":"# EJERCICIO BUSCAR SI UNA PERSONA TIENE EL ESTADO CIVIL SOLTERO Y UNA EDAD ENTRE LOS 37 Y 40 A\u00d1OS","af12726c":"# MOSTRAR A LAS PERSONAS QUE TIENEN CELULAR, SEA SOLTERO Y A LA VEZ SEA MAYOR DE  O TENGA UNA DEUDA PERSONAL MENOR A 33950. \n# HALLAR CUANTAS PERSONAS SON","7fda9b77":"concatenado.iloc[:, 0:5]","f075d877":"# CREAR UNA FUNCION QUE ME MUESTRE SOLOS LOS CAMPOS ID EDAD CONTACTO DEUDA_PERSONAL Y TARGET EN UN DATAFRAME DURANTE LA LECTURA DEL TRAIN.CSV ","33d87fd6":"saleDataFrame = pd.pivot_table(saleData,index=[\"Manager\"],values=[\"Sale_amt\"],aggfunc=[np.mean,len])\nsaleDataFrame","df0722e8":"# HACER GROUP BY PARA HALLAR LA MEDIANA, STD, Y SUMA. CON RESPECTO AL MANAGER Y LAS UNIDADES VENDIDAS\n# INTENTAR HACER GROUP BY PARA MODA CON RESPECTO AL MANAGER Y LA REGION AS\u00cd COMO EL ITEM. SE PODRA O SE NECESITA HACER UNA FUNCION O UNA LIBRER\u00cdA ... ? ","2033ad23":"saleData","a98acaad":"saleDataFrame = pd.pivot_table(saleData,index=[\"Manager\"],values=[\"Item\"],aggfunc= lambda x: tuple(stats.mode(x)[0]))\nsaleDataFrame","fdf2884b":"GROUP BY"}}