{"cell_type":{"014c2883":"code","c16c2ffc":"code","34b96c25":"code","a1948c45":"code","8dc4b9ef":"code","910b1520":"code","555df203":"code","d5d6f987":"code","9ee00212":"code","9940cd72":"code","bcc02c32":"code","4850b84e":"code","227bf96f":"code","d9307fa1":"code","b049891c":"code","f7538cf1":"code","22e24b36":"code","b1ebc126":"code","c563552b":"code","51ef25dd":"code","2ea1378b":"code","39f9c772":"code","47c78b9d":"code","42a20c44":"code","a614411d":"code","b9f3e184":"code","751e1689":"code","5f1f4460":"code","f523789a":"code","e9f25058":"code","1aa477e9":"code","6f56f344":"code","7cec4b4b":"code","4665b005":"code","3992e79c":"code","f127d75c":"markdown","05b510b7":"markdown","04c3d852":"markdown","a030deea":"markdown","97a87d12":"markdown","e32e8894":"markdown","366d7029":"markdown","5916e1ba":"markdown","868c17f3":"markdown","01ec96a7":"markdown","20cc608a":"markdown","e89b59c7":"markdown","cbaa02e8":"markdown","babbd80a":"markdown","690c6f14":"markdown","b6eeebda":"markdown","451e086f":"markdown","dd40ff76":"markdown","aea6074c":"markdown","6e5d362b":"markdown","a6bca806":"markdown","7f84d6d6":"markdown","0e2a4075":"markdown","333524b0":"markdown","7ae4d143":"markdown","8d732834":"markdown","561328a6":"markdown","09ff14c0":"markdown","5af9c6c7":"markdown","eeecf7bd":"markdown","daaf856d":"markdown","40231b4a":"markdown","d8faf77a":"markdown","b7d4d2e6":"markdown","3a6dbb8f":"markdown","44232d8d":"markdown","c01e5726":"markdown","f01474e4":"markdown","554a9879":"markdown","17028573":"markdown","276842b3":"markdown","dd5c7f88":"markdown","98f1828b":"markdown","a67d2bad":"markdown"},"source":{"014c2883":"# Importing libraries necessary for the project\nimport numpy as np\nimport pandas  as pd\nimport matplotlib.pyplot as plt  \nfrom IPython.display import display\nimport random\nimport cv2\nfrom PIL import ImageFile     \nimport h5py\nimport itertools    \nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.models import Sequential,Input,Model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras import utils\nfrom keras.preprocessing import image \nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom keras.callbacks import ModelCheckpoint \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom tqdm import tqdm","c16c2ffc":"# to hide warenings (after finishing the project for neat output)\nimport warnings\nwarnings.filterwarnings('ignore')\nImageFile.LOAD_TRUNCATED_IMAGES = True \n%matplotlib inline \nnum_of_classes = 2","34b96c25":"# Loading human hand scanning original classifications for the objects in SDSS dataset. \nHuman_Hand_Scanning_Classification_File = '..\/input\/sdssy\/classes.csv'\nHuman_Hand_Scanning_Classification = pd.read_csv(Human_Hand_Scanning_Classification_File)\nprint('Human hand scanning classification for the objects in the dataset')\ndisplay(Human_Hand_Scanning_Classification)","a1948c45":"def Metrics(testClassess,predictedClasses):\n    X =np.copy(np.argmax(testClassess, axis=1))\n    Y = np.copy(predictedClasses)\n    Z=np.bitwise_xor(X,Y)\n    TrueValues=Y[np.where(Z==0)]\n    FalseValues=Y[np.where(Z==1)]\n    tvIndices, tvCounts = np.unique(TrueValues, return_counts=True)\n    fvIndices, fvCounts = np.unique(FalseValues, return_counts=True)\n    Tn=tvCounts[0]\n    Tp=tvCounts[1]\n    Fn=fvCounts[0]\n    Fp=fvCounts[1]  \n    A=(Tp+Tn)\/(Tp+Tn+Fp+Fn)\n    P=Tp\/(Tp+Fp)\n    R=Tp\/(Tp+Fn)\n    F1=(2*P*R)\/(P+R)\n    TPR=R\n    FPR=Fp\/(Fp+Tn)\n    return A,P,R,F1,TPR,FPR    ","8dc4b9ef":"def ConfusionMatrix(cm, classes,title='Confusion matrix',cmap=plt.cm.jet):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    \"\"\"\n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, '{:.2f}'.format(cm[i, j]), horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","910b1520":"def ModelPerformance(model,mHistory,testClassess,predictedClasses):\n    A,P,R,F1,TPR,FPR=Metrics(testClassess,predictedClasses)\n    print('Test accuracy: %.2f %%' % (A*100))\n    print('Test Precision: %.2f %%' % (P*100))\n    print('Test Recall or (TPR): %.2f %%' % (R*100))\n    print('Test F1-Score: %.2f %%' % (F1*100))\n    print('Test Fall-out (FPR): %.2f %%' % (FPR*100))    \n    accuracy = mHistory.history['acc']\n    val_accuracy = mHistory.history['val_acc']\n    loss = mHistory.history['loss']\n    val_loss = mHistory.history['val_loss']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'bo', label='Training accuracy')\n    plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.figure()\n    plt.plot(epochs, loss, 'bo', label='Training loss')\n    plt.plot(epochs, val_loss, 'b', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()\n    plt.show()\n    conf_mat =confusion_matrix(np.argmax(testClassess, axis=1),predictedClasses)\n    plt.figure()\n    ConfusionMatrix(conf_mat, classes=[\"Not Real\",\"Real\"])\n    plt.show()\n    \n    fpr, tpr, _ = roc_curve(np.argmax(testClassess, axis=1), predictedClasses)\n    auc_score = auc(fpr, tpr)\n    plt.title('ROC Curve')\n    plt.plot(fpr, tpr, label='AUC = {:.2f}'.format(auc_score))\n    # it's helpful to add a diagonal to indicate where chance \n    # scores lie (i.e. just flipping a coin)\n    plt.plot([0,1],[0,1],'r--')\n    plt.xlim([-0.1,1.1])\n    plt.ylim([-0.1,1.1])\n    plt.ylabel('True Positive Rate')\n    plt.xlabel('False Positive Rate')","555df203":"# Loading images,labels and original classes of the SDSS dataset\nwith h5py.File('sdss.hdf5', 'r') as SDSS:\n        images = np.array(SDSS['images'])\n        labels = np.array(SDSS['classes'])\nTotal_number_of_data_points=images.shape[0]\n# Loading human hand scanning original classifications for the objects in SDSS dataset. \nHuman_Hand_Scanning_Classification_File = '..\/input\/sdssyclasses.csv'\nHuman_Hand_Scanning_Classification = pd.read_csv(Human_Hand_Scanning_Classification_File)\nprint(\"Dataset contains %d images, manually labeled into  %d  original classifications by human scanneers at SDSS.\"% (Total_number_of_data_points,labels.max()-labels.min()+1))","d5d6f987":"def Class_Count_by_id(c):\n    unique, counts = np.unique(labels, return_counts=True)\n    return counts[c]\ndef ViewClassImages(c):\n    imgs = np.where(labels==c)\n    dx=random.randint(np.min(imgs),np.max(imgs))\n    plt.imshow(np.array(images[dx]))\ndef Visualize_Sample(c):\n    fig = plt.figure()\n    fig.subplots_adjust(hspace=0.4, wspace=0.4)\n    sample_size=20\n    dxs=np.where(labels==c)\n    for i in range(1, sample_size+1):\n        dx=random.randint(0,len(dxs[0]))\n        ax = fig.add_subplot(4, 5, i)\n        ax.imshow(np.array(images[dxs[0][dx]]))\n        ax.set_title(Human_Hand_Scanning_Classification.at[labels[dxs[0][dx]],'Original_Classes'])\n        ax.set_xticks([])\n        ax.set_yticks([])\n# Defining function to count the total number of data points of a certain class and class type in a specified dataset\ndef Class_Count(Data_set,Class_Type):\n        unique, counts = np.unique(Data_set, return_counts=True)\n        if Class_Type=='Original_Classes':\n            ticks=Human_Hand_Scanning_Classification[Class_Type]\n            return unique, counts,ticks\n        elif Class_Type=='Visual_Classes':\n            uniqueV=[0,1,2]\n            ticksV=['Artefact','Dipole\/saturated','Real'] \n            countsV=[]\n            countsV.append(counts[0])\n            countsV.append(sum(counts[1:2]))\n            countsV.append(sum(counts[3:9]))\n            return uniqueV, countsV,ticksV\n        elif Class_Type=='Binary_Classes': \n            uniqueB=[0,1]\n            ticksB=['Not-Real','Real']          \n            countsB=[]\n            countsB.append(sum(counts[0:2]))\n            countsB.append(sum(counts[3:9]))\n            return uniqueB, countsB,ticksB  \ndef visualize_Classes_Count(Data_set,Class_Type):\n    xValues, yValues,tValues = Class_Count(Data_set,Class_Type)\n    plt.barh(xValues,yValues)\n    plt.yticks(xValues, tValues)\n    plt.title(Class_Type.replace(\"_\", \" \"))        ","9ee00212":"visualize_Classes_Count(labels,'Original_Classes')","9940cd72":"visualize_Classes_Count(labels,'Visual_Classes')","bcc02c32":"visualize_Classes_Count(labels,'Binary_Classes')","4850b84e":"a, b = np.unique(labels, return_counts=True)\nprint('There are {:10.2f} % of the Original dataset are manually classified as real objects.'.format(sum(b[3:9]*100\/len(images))))","227bf96f":"def Visualize_Sample(classifications_type='Binary_Classes'):\n    fig = plt.figure()\n    fig.subplots_adjust(hspace=0.4, wspace=0.4)\n    sample_size=20\n    for i in range(1, sample_size+1):\n        dx=random.randint(0,Total_number_of_data_points-1)\n        ax = fig.add_subplot(4, 5, i)\n        ax.imshow(np.array(images[dx]))\n        ax.set_title(Human_Hand_Scanning_Classification.at[labels[dx],classifications_type])\n        ax.set_xticks([])\n        ax.set_yticks([])","d9307fa1":"# Sample of original classes\nVisualize_Sample('Original_Classes')","b049891c":"# Sample of original classes\nVisualize_Sample('Visual_Classes')","f7538cf1":"# Sample of Binary_Classes\nVisualize_Sample()","22e24b36":"# converting the original classes to binary classes (0-Not-Real,1-Real)\nLabels=np.copy(labels)\nLabels[np.where(Labels<=2)]=0  # The first three labels (Artefact, Dipole, Satuarted Star) are considered Not-Real objects\nLabels[np.where(Labels>2)]=1   # The remaining are classified as Real objects\nuniqueL, countsL = np.unique(labels, return_counts=True)\nprint('There are {:10.2f} % of the Original dataset are considered as real objects.'.format(sum(countsL[3:9]*100\/len(images))))\n# converting labels to categorical 10 classes using One hot encoding technique\nLabels = utils.to_categorical(Labels, 2)\nLDF=pd.DataFrame(Labels)\ndisplay(LDF.head(20))","b1ebc126":"tmp_idx, test_idx = train_test_split(np.arange(Labels.shape[0]), test_size=0.25)\ntmp_images, tmp_labels, test_images, test_labels = images[tmp_idx], Labels[tmp_idx], images[test_idx], Labels[test_idx]","c563552b":"train_idx, valid_idx = train_test_split(np.arange(tmp_labels.shape[0]), test_size=0.30)\ntrain_images, train_labels, valid_images, valid_labels = tmp_images[train_idx], tmp_labels[train_idx], tmp_images[valid_idx], tmp_labels[valid_idx]","51ef25dd":"# Dataset statistics\nprint(' Dataset statistics ')\nprint('---------------------')\nprint('There are %d total Original Classes (categories), 3 Visual classes and 2 binary classes.' % len(Human_Hand_Scanning_Classification))\nprint('........................................................................................')\nprint(' Splitting data (Test, Train, and Validation)')\nprint('---------------------')\n\nprint('The original dataset contains %d images.' % len(images))\nprint('The Test dataset contains {} images i.e {:10.2f} % from th original datset'.format(test_images.shape[0],test_images.shape[0]*100\/images.shape[0]))\nprint('The Training dataset contains {} images i.e {:10.2f} %  from th original datset'.format(train_images.shape[0],train_images.shape[0]*100\/images.shape[0]))\nprint('The Validation dataset contains {} images i.e {:10.2f} %  from th original datset'.format(valid_images.shape[0],valid_images.shape[0]*100\/images.shape[0]))","2ea1378b":"def img_to_tensor(img):\n    # convert PIL.Image.Image type to 3D tensor with shape (224, 224, 3)\n    x = image.img_to_array(img)\n    # convert 3D tensor to 4D tensor with shape (1, 224, 224, 3) and return 4D tensor\n    return np.expand_dims(x, axis=0)\n\ndef images_to_tensor(imgs):\n    list_of_tensors = [img_to_tensor(img) for img in tqdm(imgs)]\n    return np.vstack(list_of_tensors)","39f9c772":"# preparing images for Keras\ntrain_tensors = images_to_tensor(train_images).astype('float32')\/255\nvalid_tensors = images_to_tensor(valid_images).astype('float32')\/255\ntest_tensors = images_to_tensor(test_images).astype('float32')\/255","47c78b9d":"print('------------------ Tesnors dimensions ------------------------\\n' )\nprint (\"Train Tensors Size : \")\nprint (np.shape(train_tensors))\nprint (\"Valid Tensors Size : \")\nprint (np.shape(valid_tensors))\nprint (\"Test Tensors Size : \")\nprint (np.shape(test_tensors))\nprint ('--------------------------------')\nprint (\"Train Labels Size : \")\nprint (np.shape(train_labels))\nprint (\"Validation Labels Size : \")\nprint (np.shape(valid_labels))\nprint (\"Test Labels Size : \")\nprint (np.shape(test_labels))","42a20c44":"batch_size = 64\nepochs_count = 50\n\nintial_model = Sequential()\nintial_model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',input_shape=(train_tensors.shape[1:]),padding='same'))\nintial_model.add(MaxPooling2D((2, 2),padding='same'))\nintial_model.add(Conv2D(64, (3, 3), activation='relu',padding='same'))\nintial_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nintial_model.add(Conv2D(128, (3, 3), activation='relu',padding='same'))      \nintial_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\nintial_model.add(Flatten())\nintial_model.add(Dense(128, activation='relu'))          \nintial_model.add(Dense(num_of_classes, activation='softmax'))\nintial_model.summary()","a614411d":"intial_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])","b9f3e184":"# number of epochs used to train the model.\n\nepochs = epochs_count\n\ncheckpointer1 = ModelCheckpoint(filepath='saved_models\/weights1.best.cnn.sdss.hdf5',verbose=1, save_best_only=True)\n\nhistory1 =intial_model.fit(train_tensors, train_labels,validation_data=(valid_tensors, valid_labels),epochs=epochs, batch_size=batch_size, callbacks=[checkpointer1], verbose=1)","751e1689":"intial_model.load_weights('saved_models\/weights1.best.cnn.sdss.hdf5')","5f1f4460":"# get index of predicted Astronomical Objects for each image in test set\npredictions1 = [np.argmax(intial_model.predict(np.expand_dims(tensor, axis=0))) for tensor in test_tensors]","f523789a":"ModelPerformance(intial_model,history1,test_labels,predictions1)","e9f25058":"batch_size = 128\nepochs_count = 200\n\ntuned_model = Sequential()\ntuned_model.add(Conv2D(32, kernel_size=(3, 3),activation='relu',padding='same',input_shape=(train_tensors.shape[1:])))\ntuned_model.add(LeakyReLU(alpha=0.1))\ntuned_model.add(MaxPooling2D((2, 2),padding='same'))\ntuned_model.add(Dropout(0.25))\ntuned_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))\ntuned_model.add(LeakyReLU(alpha=0.1))\ntuned_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\ntuned_model.add(Dropout(0.25))\ntuned_model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))\ntuned_model.add(LeakyReLU(alpha=0.1))                  \ntuned_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\ntuned_model.add(Dropout(0.4))\ntuned_model.add(Flatten())\ntuned_model.add(Dense(128, activation='linear'))\ntuned_model.add(LeakyReLU(alpha=0.1))           \ntuned_model.add(Dropout(0.3))\ntuned_model.add(Dense(num_of_classes, activation='softmax'))\ntuned_model.summary()","1aa477e9":"tuned_model.compile(optimizer=keras.optimizers.Adam(), loss='binary_crossentropy', metrics=['accuracy'])","6f56f344":"# number of epochs used to train the model.\n\nepochs = epochs_count\n\n\ncheckpointer2 = ModelCheckpoint(filepath='saved_models\/weights2.best.cnn.sdss.hdf5',verbose=1, save_best_only=True)\n\nhistory2 =tuned_model.fit(train_tensors, train_labels,validation_data=(valid_tensors, valid_labels),epochs=epochs, batch_size=batch_size, callbacks=[checkpointer2], verbose=1)","7cec4b4b":"tuned_model.load_weights('saved_models\/weights2.best.cnn.sdss.hdf5')","4665b005":"# get index of predicted Astronomical Objects for each image in test set\npredictions2 = [np.argmax(tuned_model.predict(np.expand_dims(tensor, axis=0))) for tensor in test_tensors]","3992e79c":"ModelPerformance(tuned_model,history2,test_labels,predictions2)","f127d75c":"[Back To Table of Contents](#y)","05b510b7":"## <font color='gray'>Train the model <\/font> ","04c3d852":"<a id='y42'><\/a><h2><font color=brown>4.2 Justification<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nIn our solution as in the benchmark model, we considered the Accuracy and Recall to be the most important performance metrics since the two main classes in our data (Real objects and Non-real objects) are of similar sizes, Accuracy serves as a good general measure of performance, while Recall was chosen because we are more concerned with missing true objects (false negatives) than we are with contaminating our set of predicted objects with false positives since these are easy to human to exclude. These results suggest that it does in fact have a positive role to play in future astronomical surveys. Deep learning methods prove to be perfect player in this field, if not better, than human scanners; but unlike astronomers they can classify thousands of transients in a second. Unlike conventional machine learning algorithms convolutional neural networks require no complex and case-specific features to be crafted. With only data-augmentation during training, convolutional neural networks discover their own abstract features for classification. Deep models can provide continuous-valued scores for classification certainty that may be tuned, unlike human scanners, for best recall and precision. In addition, they are capable of handling such large data throughputs as may be generated by the Large Synoptic Survey Telescope through heavy utilization of GPUs. Deep models, in particular Convolutional Neural Networks, are indispensable for future astronomical sky surveys such as the LSST.\n<\/div>\n\n\n[Back To Table of Contents](#y)","a030deea":"<a id='y22'><\/a><h2><font color=brown>2.2 Exploratory visualization<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\n     \n<\/div>","97a87d12":"# Astronomical Images Classification\n## Using Deep Learning Convolutional Neural Networks\n## By Yosry Negm","e32e8894":"## <font color='gray'>Intial Model Evaluation <\/font>","366d7029":"## <font color='gray'>Preparing data<\/font>","5916e1ba":"## <font color='gray'>Compiling the model <\/font>","868c17f3":"<div style=\"text-align: justify\">\nThe benchmark model we are comparing with is examining a variety of machine learning algorithms for transient classification was simplified to perform the primary process of binary classification for the objects in the astronomical imaging data into Real and Non-Real objects. From the bench mark results we note that the best classifier was used is Random Forest (RF) with Accuracy and Recall at 91%. As well as it uses Neural Network called SkyNet that gives Accuracy of 88% and Recall of 89 %. But our final result using Deep Learning Convolutional Network (CNN) gives a good acceptable accuracy of 92.36 % and Recall 96.51 %, I have tried to get optimal solution for the problem and showing that using machine learning algorithms especially deep learning could exceed human manual scanning process and I think I have reached this goal with some degree.\n<\/div>\n\n\n\n[Back To Table of Contents](#y)","01ec96a7":"[Back To Table of Contents](#y)","20cc608a":"## <font color='gray'>Original Classes<\/font>","e89b59c7":"<a id='y11'><\/a><h2><font color=brown>1.1 Project overview<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nRecently, a massive astronomical dataset is being collected to find answers for a variety of unanswered questions about our universe by virtue of modern sky survey instruments. Unfortunately, it is impossible to work on these massive datasets manually to get effective results so, astronomers are seeking approaches to automate the human error borne processes of manual scanning in order to discover astronomical knowledge and information from these large raw datasets i.e. to classify stars, quasars, galaxies and Supernovae (SNe). The problem here, this is done by hand and it is a very time consuming job as well as it is subject to human bias which differs from person to person. In addition, the manual scanning is infeasible for a huge amount of images. From this point of view, I've selected this concrete astronomical classification problem to investigate applying convolutional Neural Networks (CNNs) algorithm to automate this process and then I compared my results to a reference publication as a benchmark model by using the same well-known public dataset of the Sloan Digital Sky Survey (SDSS).\n<\/div>\n\n<img src=\"sn_gallery.200567.x2.oname.jpg\">\n\n\n\n[Sloan Digital Sky Survey (SDSS)]\n\n[Sloan Digital Sky Survey (SDSS)]: https:\/\/classic.sdss.org\/supernova\/aboutsupernova.html \n[Back To Table of Contents](#y)","cbaa02e8":"[Back To Table of Contents](#y)","babbd80a":"<a id='y32'><\/a><h2><font color=brown>3.2 Implementation<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\n   \n<\/div>\n","690c6f14":"<a id='y23'><\/a><h2><font color=brown>2.3 Algorithms and techniques<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nTo solve the proposed problem, I have built the learning model using the deep learning algorithm which was inspired by the biological visual cortex in human brain named deep feed-forward convolutional neural network (CNN or ConvNet). I have implemented it in Python programming language with Keras inside Jupiter Notebook (IPython) depending on using Numpy, Pandas, and Scikit-Learn packages. The reason behind choosing this algorithm is that it reduces the number of parameters and extracts highly robust non-linear features. As well as, it learns hierarchical representations of the data using local receptive fields, sparse connectivity, sharing weights, pooling, and deep architecture. We constructed this network by adding many layers, some for feature representations known as feature maps. After building, compiling, training and evaluating our model we have tuned its hyper-parameters, then re-train and re-evaluate it again then compared our final results to the bench mark model\n<\/div>\n\n[Back To Table of Contents](#y)","b6eeebda":"<a id='y33'><\/a><h2><font color=brown>3.3 Refinement<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nAfter training and evaluating our initial and by observing the training accuracy and loss, I could say that the model did a good job since after 50 epochs the training accuracy is 93.13 % and the training loss is quite low. However, it looks like the model is Overfitting, gives an intuition that the network has memorized the training data very well but is not guaranteed to work on unseen data, and that is why there is a difference in the training and validation accuracy. So I have tried some optimization techniques such as trying to add more hidden layers of Convolution Filters, changing the size of window of MaxPool layer to get enhanced Feature Extraction, performing data augmentation, Regularization by putting dropout layers to avoid overfitting and other techniques until the model generalizes better and provides the desired output that works well for the astronomical images binary classification into real objects and Non-Real Objects task. Also I have changed the optimization algorithm by using Adam optimizer and increasing both number of epochs to 200 and batch size to 128.\n<\/div>\n\n\n[Back To Table of Contents](#y)","451e086f":"<a id='y'><\/a><h1><font color=blue>Contents<\/font><\/h1><br\/>   \n1. [Definition](#y1)  \n    * 1.1. [Project overview](#y11)\n    * 1.2. [Problem statement](#y12)\n    * 1.3. [Metrics](#y13)\n2. [Analysis](#y2)\n    * 2.1. [Data exploration](#y21)\n    * 2.2. [Exploratory visualization](#y22)\n    * 2.3. [Algorithms and techniques](#y23)\n    * 2.4. [Benchmark](#y24)\n3. [Methodology](#y3)\n    * 3.1. [Data processing](#y31)\n    * 3.2. [Implementation](#y32)\n    * 3.3. [Refinement](#y33)\n4. [Results](#y4)\n    * 4.1. [Model evaluation and validation](#41)\n    * 4.2. [Justification](#42)\n5. [Conclusion](#y5)\n6. [Future Work](#y6)","dd40ff76":"## <font color='gray'>Visual Classes<\/font>","aea6074c":"## <font color='gray'>Spliting Dataset into Training,Test, and Validation sets<\/font>","6e5d362b":"<a id='y13'><\/a><h2><font color=brown>1.3 Metrics<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nFor evaluating the results of my work and comparing it to the selected benchmark model I will use the same four metrics of performance measure that used there. The four measures that are used in this comparison are commonly applied to classification problems and they are Accuracy (A), Precision (P), Recall (R), and F1-Score. They are defined in terms of true\/false positives\/negatives (tp, tn, fp, fn). where positive classes are those corresponding to real objects, Accuracy will be a reasonable initial measure since the classes in our dataset are all of similar sizes while Precision reflects the fraction of reported real objects that are so. We could define Recall as the fraction of true objects that are found by the classifier, but F1-Score is expressed in terms of Precision and Recall, it could be considered as a measure that punishes false negatives and false positives equally but weighted by their inverse fractional contribution to the full set to account for large class number hierarchies.\n<\/div>\n\n[Classification Performance metrics]\n\n[Classification Performance metrics]: https:\/\/developers.google.com\/machine-learning\/crash-course\/classification\/true-false-positive-negative\n","a6bca806":"<div style=\"text-align: justify\">\nRegarding future work using, my solution model working now on binary classification but I think as improvement, it should be upgraded to perform multi-classification of different categories in the imaging data to be more practical and useful tool for classification of supernovae and other objects in astronomical imaging data. As well as inject my future model with truly massive data sets considering the training to be done on GPUs. Also preprocessing algorithms may be developed for handling Signal-to-noise ratio and preparing difference images and centering candidate transients. In addition, I may include a time-series of images of the region in question, including time durations between scans images as features.\n<\/div>\n\n\n[Back To Table of Contents](#y)","7f84d6d6":"## <font color='gray'>Load the Model with the Best Validation Loss <\/font>","0e2a4075":"## <font color='gray'>Loading data<\/font>","333524b0":"<a id='y2'><\/a><h1><font color=blue>2 Analysis<\/font><\/h1><br\/>   ","7ae4d143":"<a id='y41'><\/a><h2><font color=brown>4.1 Model evaluation and validation<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nI have used the training set to tune the model parameters where the model learns from training data. But, in order to produce an independent measure of the model's performance a test set was used. the final test and evaluation results are:\n<\/div>\n\n- Accuracy =92.36 %\n- Recall=96.51 %\n- Precession=94.93 %\n- F1-score= 95.71 %\n\n\t\t\t\n\t\t\t\n\n\n[Back To Table of Contents](#y)","8d732834":"[Back To Table of Contents](#y)","561328a6":"<a id='y3'><\/a><h1><font color=blue>3 Methodology<\/font><\/h1><br\/>   ","09ff14c0":"<a id='y4'><\/a><h1><font color=blue>4 Results<\/font><\/h1><br\/>   ","5af9c6c7":"<div style=\"text-align: justify\"> \nTo compare with our benchmark model, we will start by hold 25% of the data points for testing purpose (Test set) and the remaining will be use in training our model (Training set). Later, and for optimization purpose we will perform cross-validation by using 30% of the starting training set as validation and the remaining 70% for re-training our model in ordr eliminate biasing during opimization and tuning our model to get real and fair results compared to the algorithms used in our reference benchmark.    \n<\/div>","eeecf7bd":"<a id='y21'><\/a><h2><font color=brown>2.1 Data exploration<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\n   As shown in the <a href='#T1'>above table<\/a>, The description of different classifications for each of the 10 original classes used by the <b>human hand scanning <\/b>for objects in the data set could clearfied as follows:-\n    \n- **Artefact**: Residuals caused by problems in the image (e.g. diffraction spikes), this is considered (<b><font color=red>Not-Real<\/color><\/b>)\n- **Dipole**: Residuals with roughly equal amounts of positive and negative flux, caused by errors in image registration,this is considered (<b><font color=red>Not-Real<\/color><\/b>)\n- **Saturated star**: Residuals of stars that saturate the CCD, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **Moving**: Anything showing signs of motion between cutouts in different passbands, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **Variable**: Objects showing a record of long-term variability, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **Transient**: Objects with no observation history, no apparent host galaxy in the search image and no motion, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **SN Other**: Objects that are thought to have a good chance of being SNe, but that do not fit nicely into any of the above classes, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **SN Bronze**: Point-like residuals at the centre of their host galaxies, most of the objects in this class later turn out to be either quasars (QSOs), active galactic nuclei (AGN) or, foreground variable stars, and not SNe, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **SN Silver**: Point-like residuals having no apparent host galaxy, SNe much more luminous than their host galaxies usually fall into this class, this is considered (<b><font color=green>Real<\/color><\/b>)\n- **SN Gold** Possible SNe identified as point-like residuals that are not at the exact centre of their host galaxies, this is considered (<b><font color=green>Real<\/color><\/b>).\n<\/div>","daaf856d":"## <font color='gray'>Some Custom Settings<\/font>","40231b4a":"<a id='y12'><\/a><h2><font color=brown>1.2 Problem statement<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\nThe problem we are trying to solve here is to <b>replace the human hand scanning and classification of artefacts and objects SDSS imaging data<\/b> which is classified into ten classes (dipoles, artefacts, saturated stars, transients, variables, moving objects, SN Gold, SN Silver, SN Bronze, SN Other) but for simplification purpose it is also reduced to be four visual classes (Real, Artefacts, Saturated, Dipole) by <b>autmating<\/b> this prcoss via applying <b>deep learning algorithm<\/b>. For the purpose of the comparison to our benchmark model I have chosen the astronomers' first step which is looking for interesting objects in a<b> binary classification <\/b>problem of determining what is <b><font color=red>real<\/font><\/b> and <b><font color=red>what is not<\/font><\/b> in the underlying dataset. \n<\/div>\n\n[Back To Table of Contents](#y)","d8faf77a":"## <font color='gray'>Tuned Model Evaluation <\/font>","b7d4d2e6":"## <font color='gray'>Binary Classes<\/font>","3a6dbb8f":"## <font color='gray'>Load the Model with the Best Validation Loss <\/font>","44232d8d":"<a id='y1'><\/a><h1><font color=blue>1 Definition<\/font><\/h1><br\/>   ","c01e5726":"[Back To Table of Contents](#y)","f01474e4":"<a id='y24'><\/a><h2><font color=brown>2.4 Benchmark<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\n    Most of the similar works to this project had been focused on SN Factory  prior work (Roman, Aragon & Ding in 2006 and Bailey 2007) utilizing classical supervised learning algorithms to accomplish the task of automatic classification. As a benchmark model for my work, I will suggest the publication titled \" Machine learning classification of SDSS transient survey images \"  . This research works on the same dataset, but used different learning algorithms such as Random forest, k-nearest neighbors, Na\u00efve Bayes, and Support vector machine (SVM). Then it compares their performance using the same measure metrics I will use, in other words I will rework this research but using deep learning convolutional networks and then compare my work to the prior work. But on contrast they depend on Principal Component Analysis Algorithm (PCA) to extract features like attributes as shape, position, Full-Width Half Maximum (FWHM), and distance to the nearest object in the difference image  as well as SDSS Camera filters (g, r, i, z, u) , In our solution there is no need to process feature extraction by using PCA but our CNN will learn them.\n<\/div>\n\n[Benchmark Paper]\n\n[Benchmark Paper]: https:\/\/academic.oup.com\/mnras\/article\/454\/2\/2026\/1051683\n\n[Back To Table of Contents](#y)","554a9879":"<a id='y6'><\/a><h1><font color=blue>6 Future Work<\/font><\/h1><br\/>   ","17028573":"<a id='y5'><\/a><h1><font color=blue>5 Conclusion<\/font><\/h1><br\/>   ","276842b3":"## <font color='gray'>Model Architecture <\/font>\n\nOur solution started with initial model of <b><font color='green'>CNN Network<\/font><\/b> constructed of <b>three convolutional layers<\/b> as follows:<br>\n* The first layer contains 32 filters of size 3 x 3,\n* The second layer contains 64 filters of size 3 x 3, and\n* The third layer contains 128 filters of size 3 x 3.<br>\nIn addition, there are <b>three max-pooling layers<\/b> each of size 2 x 2.\n","dd5c7f88":"<a id='T1'><\/a>","98f1828b":"## <font color='gray'>Importing Project Libraries<\/font>","a67d2bad":"<a id='y31'><\/a><h2><font color=brown>3.1 Data processing<\/font><\/h2><br\/>   \n<div style=\"text-align: justify\">\n    \n<\/div>"}}