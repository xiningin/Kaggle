{"cell_type":{"595c03ce":"code","3b6f8738":"code","308a05d7":"code","4939d951":"code","66e7e456":"code","c80e1f6b":"code","b487fef6":"code","a512af46":"code","c87a0d3d":"code","ff7aac17":"code","7fa6e193":"code","7a2383b6":"code","c55ef448":"code","8ab5f332":"code","6ecd23a0":"code","f217c81d":"code","f9d57094":"code","64f9bb15":"code","245eecde":"code","a337eda3":"code","7dd7fbb9":"code","f6cc3197":"code","d6acf829":"code","e94358ce":"code","badbb639":"code","42a44ba2":"code","9dfa6d17":"code","1035905a":"code","ee2c1a9e":"code","11479ac3":"code","f3bca342":"code","6db06fc0":"code","ce335d82":"code","f2ff699c":"code","bf4646de":"code","c525b3d4":"code","47097d30":"code","db931f5a":"code","e5bc2ae0":"code","3870080f":"code","3f97d8eb":"code","9f259897":"code","3be2ac9e":"code","7c4098bd":"markdown","94a282cb":"markdown","ee1dfe78":"markdown","c315ffe2":"markdown","12a50bc7":"markdown","0d6124f0":"markdown","75f100d2":"markdown","1dd36f40":"markdown","157abf02":"markdown","2433bfa1":"markdown","4b765c6c":"markdown","46a376d0":"markdown","3f631f58":"markdown","58d6d755":"markdown","94407465":"markdown","89fed7e7":"markdown","980d21ce":"markdown","e143e91e":"markdown","b0f34451":"markdown","55685e32":"markdown","7ca8fb03":"markdown","89552bc7":"markdown","bacf4f77":"markdown"},"source":{"595c03ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b6f8738":"grants_df=pd.read_csv('\/kaggle\/input\/schoolimprovement2010grants.csv')","308a05d7":"#Plotting of data using pandas\ngrants_df['Award_Amount'].plot.hist()\nplt.show()","4939d951":"# Plotting the same above mentioned data using seaborn distplot()\n# Display a Seaborn distplot\nsns.distplot(grants_df['Award_Amount'])\nplt.show()","66e7e456":"# Create a distplot by diabling KDE and bins=20\nsns.distplot(grants_df['Award_Amount'],\n             kde=False,\n             bins=20)\n\n# Display the plot\nplt.show()","c80e1f6b":"# Create a distplot by enabling KDE and bins=20\nsns.distplot(grants_df['Award_Amount'],\n             kde=True,rug=True,\n             bins=20)\n\n# Display the plot\nplt.show()","b487fef6":"#Rugplot and KDE shading\n# Create a distplot of the Award Amount\nsns.distplot(grants_df['Award_Amount'],\n             hist=False,\n             rug=True,\n             kde_kws={'shade':True})\n\n# Plot the results\nplt.show()","a512af46":"insurance_df=pd.read_csv('\/kaggle\/input\/insurance_premiums.csv')","c87a0d3d":"#Plotting using regplot()\n# Create a regression plot of premiums vs. insurance_losses\nsns.regplot(x=\"insurance_losses\",y=\"premiums\",data=insurance_df)\n\n\n\n# Display the plot\nplt.show()","ff7aac17":"#Plotting using lmplot()\n# Create a regression plot of premiums vs. insurance_losses\nsns.lmplot(x=\"insurance_losses\",y=\"premiums\",data=insurance_df)\n\n\n\n# Display the plot\nplt.show()","7fa6e193":"# Create a regression plot using hue\nsns.lmplot(data=insurance_df,\n           x=\"insurance_losses\",\n           y=\"premiums\",\n           hue=\"Region\",ci=False)\n\n# Show the results\nplt.show()","7a2383b6":"# Create a regression plot with multiple rows\nsns.lmplot(data=insurance_df,\n           x=\"insurance_losses\",\n           y=\"premiums\",\n           row=\"Region\")\n\n# Show the plot\nplt.show()","c55ef448":"urban_dev_df=pd.read_csv('\/kaggle\/input\/FY18_4050_FMRs.csv')","8ab5f332":"# Plot the pandas histogram\nurban_dev_df['fmr_2'].plot.hist()\nplt.show()\nplt.clf()\n\n# Set the default seaborn style\nsns.set()\n\n# Plot the pandas histogram again\nurban_dev_df['fmr_2'].plot.hist()\nplt.show()\n","6ecd23a0":"#Create 2 seaborn plot one using dark style and one using whitegrid style\nsns.set_style(\"dark\")\nsns.distplot(urban_dev_df['fmr_2'])\nplt.show()\nplt.clf()\n\n# for whitegrid style\nsns.set_style(\"whitegrid\")\nsns.distplot(urban_dev_df['fmr_2'])\nplt.show()\nplt.clf()","f217c81d":"#Plot without despine\n# Set the style to white\nsns.set_style('white')\n\n# Create a regression plot\nsns.lmplot(data=urban_dev_df,\n           x='pop2010',\n           y='fmr_2')\n\n# Show the plot and clear the figure\nplt.show()\nplt.clf()\n","f9d57094":"#With despine\n# Set the style to white\nsns.set_style('white')\n\n# Create a regression plot\nsns.lmplot(data=urban_dev_df,\n           x='pop2010',\n           y='fmr_2')\n# Remove the spines\nsns.despine(top=True,right=True)\n\n# Show the plot and clear the figure\nplt.show()\nplt.clf()","64f9bb15":"\n# Set style, enable color code, and create a magenta distplot\nsns.set(color_codes=True)# Enable seaborn to use color scheme of matplotlib\nsns.distplot(urban_dev_df['fmr_3'], color='m')\n\n# Show the plot\nplt.show()","245eecde":"# Loop through differences between bright and colorblind palettes\nfor p in ['bright', 'colorblind']:\n    sns.set_palette(p)\n    sns.distplot(urban_dev_df['fmr_3'])\n    plt.show()\n    \n    # Clear the plots    \n    plt.clf()","a337eda3":"#Create and display a Purples sequential palette containing 8 colors.\nsns.palplot(sns.color_palette(\"Purples\",8))\nplt.show()\nplt.clf()\n\n#Create and display a palette with 10 colors using the husl system.\nsns.palplot(sns.color_palette(\"husl\",10))\nplt.show()\nplt.clf()\n\n# Create and display a diverging palette with 6 colors coolwarm.\nsns.palplot(sns.color_palette(\"coolwarm\",6))\nplt.show()","7dd7fbb9":"# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Plot the distribution of data\nsns.distplot(urban_dev_df ['fmr_3'], ax=ax)\n\n# Create a more descriptive x axis label\nax.set(xlabel=\"3 Bedroom Fair Market Rent\")\n\n# Show the plot\nplt.show()","f6cc3197":"#The matplotlib API supports many common customizations such as labeling axes, adding titles, and setting limits. \n# Create a figure and axes\nfig, ax = plt.subplots()\n\n# Plot the distribution of 1 bedroom rents\nsns.distplot(urban_dev_df['fmr_1'], ax=ax)\n\n# Modify the properties of the plot\nax.set(xlabel=\"1 Bedroom Fair Market Rent\",\n       xlim=(100,1500),\n       title=\"US Rent\")\n\n# Display the plot\nplt.show()","d6acf829":"#Plot the fmr_1 column distribution.\n#Add a vertical line using axvline for the median and mean of the values which are already defined.\n# Create a figure and axes. Then plot the data\nfig, ax = plt.subplots()\nsns.distplot(urban_dev_df['fmr_1'], ax=ax)\n\n# Customize the labels and limits\nax.set(xlabel=\"1 Bedroom Fair Market Rent\", xlim=(100,1500), title=\"US Rent\")\n\n# Add vertical lines for the median and mean\nax.axvline(x=urban_dev_df['fmr_1'].median(), color='m', label='Median', linestyle='--', linewidth=2)\nax.axvline(x=urban_dev_df['fmr_1'].mean(), color='b', label='Mean', linestyle='-', linewidth=2)\n\n# Show the legend and plot the data\nax.legend()\nplt.show()","e94358ce":"plt.figure(figsize=(50,50))\n# Create a plot with 1 row and 2 columns that share the y axis label\nfig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharey=True)\n\n# Plot the distribution of 1 bedroom apartments on ax0\nsns.distplot(urban_dev_df['fmr_1'], ax=ax0)\nax0.set(xlabel=\"1 Bedroom Fair Market Rent\", xlim=(100,1500))\nax0.axvline(x=urban_dev_df['fmr_1'].median(), color='m', label='Median', linestyle='--', linewidth=2)\nax0.axvline(x=urban_dev_df['fmr_1'].mean(), color='b', label='Mean', linestyle='-', linewidth=2)\n\n# Plot the distribution of 2 bedroom apartments on ax1\nsns.distplot(urban_dev_df['fmr_2'], ax=ax1)\nax1.set(xlabel=\"2 Bedroom Fair Market Rent\", xlim=(100,1500))\nax1.axvline(x=urban_dev_df['fmr_2'].median(), color='m', label='Median', linestyle='--', linewidth=2)\nax1.axvline(x=urban_dev_df['fmr_2'].mean(), color='b', label='Mean', linestyle='-', linewidth=2)","badbb639":"# Create the stripplot\nsns.stripplot(data=grants_df,\n         x='Award_Amount',\n         y='Model Selected',\n         jitter=True)\n\nplt.show()\n\n#Swarmplot()\n# Create and display a swarmplot with hue set to the Region\nsns.swarmplot(data=grants_df,\n         x='Award_Amount',\n         y='Model Selected',\n         hue='Region')\n\nplt.show()","42a44ba2":"# Create a boxplot\nsns.boxplot(data=grants_df,\n         x='Award_Amount',\n         y='Model Selected')\n\nplt.show()\nplt.clf()\n\n# Create a violinplot with the husl palette\nsns.violinplot(data=grants_df,\n         x='Award_Amount',\n         y='Model Selected',\n         palette='husl')\n\nplt.show()\nplt.clf()\n\n# Create a lvplot with the Paired palette and the Region column as the hue\nsns.boxenplot(data=grants_df,\n         x='Award_Amount',\n         y='Model Selected',\n         palette='Paired',\n         hue='Region')\n\nplt.show()\nplt.clf()","9dfa6d17":"# Show a countplot with the number of models used with each region a different color\nsns.countplot(data=grants_df,\n         y=\"Model Selected\",\n         hue=\"Region\")\n\nplt.show()\nplt.clf()\n\n# Create a pointplot and include the capsize in order to show bars on the confidence interval\nsns.pointplot(data=grants_df,\n         y='Award_Amount',\n         x='Model Selected',\n         capsize=.1)\n\nplt.show()\nplt.clf()\n\n# Create a barplot with each Region shown as a different color\nsns.barplot(data=grants_df,\n         y='Award_Amount',\n         x='Model Selected',\n         hue='Region')\n\nplt.show()\nplt.clf()","1035905a":"UsEducation_df=pd.read_csv('\/kaggle\/input\/college_datav3.csv')","ee2c1a9e":"# Display a regression plot for Tuition\nsns.regplot(data=UsEducation_df,\n         y='Tuition',\n         x=\"SAT_AVG_ALL\",\n         marker='^',\n         color='g')\n\nplt.show()\nplt.clf()","11479ac3":"# Display a regression plot for Tuition\nsns.regplot(data=UsEducation_df,\n         y='Tuition',\n         x=\"SAT_AVG_ALL\",\n         marker='^',\n         color='g',x_bins=5,order=2)\n\nplt.show()\nplt.clf()","f3bca342":"# Display the residual plot\nsns.residplot(data=UsEducation_df,\n          y='Tuition',\n          x=\"SAT_AVG_ALL\",\n          color='g')\n\nplt.show()\nplt.clf()","6db06fc0":"# Plot a regression plot of Tuition and the Percentage of Pell Grants\nsns.regplot(data=UsEducation_df,\n            y='Tuition',\n            x=\"PCTPELL\")\n\nplt.show()\nplt.clf()","ce335d82":"# Plot a regression plot of Tuition and the Percentage of Pell Grants\nsns.regplot(data=UsEducation_df,\n            y='Tuition',\n            x=\"PCTPELL\",\n           x_bins=5)# Used to break %age into categoriesol\n\nplt.show()\nplt.clf()","f2ff699c":"#Create a final regression plot that includes a 2nd order polynomial regression line.\n# The final plot should include a line using a 2nd order polynomial\nsns.regplot(data=UsEducation_df,\n            y='Tuition',\n            x=\"PCTPELL\",\n            x_bins=5,\n            order=2)\n\nplt.show()\nplt.clf()","bf4646de":"daily_Show_df=pd.read_csv('\/kaggle\/input\/daily_show_guests_cleaned.csv')","c525b3d4":"# Create a crosstab table of the data\npd_crosstab = pd.crosstab(daily_Show_df[\"Group\"], daily_Show_df[\"YEAR\"])\nprint(pd_crosstab)\n\n# Plot a heatmap of the table\nsns.heatmap(pd_crosstab)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\n\nplt.show()","47097d30":"# Customizing heatmaps\n# Create the crosstab DataFrame\npd_crosstab = pd.crosstab(daily_Show_df[\"Group\"], daily_Show_df[\"YEAR\"])\n\n# Plot a heatmap of the table with no color bar and using the BuGn palette\nsns.heatmap(pd_crosstab, cbar=False, cmap=\"BuGn\", linewidths=0.3)\n\n# Rotate tick marks for visibility\nplt.yticks(rotation=0)\nplt.xticks(rotation=90)\n\n#Show the plot\nplt.show()\nplt.clf()","db931f5a":"collge_df=pd.read_csv('\/kaggle\/input\/college_datav3.csv')","e5bc2ae0":"# Create FacetGrid with Degree_Type and specify the order of the rows using row_order\ng2 = sns.FacetGrid(collge_df, \n             row=\"Degree_Type\",\n             row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])\n\n# Map a pointplot of SAT_AVG_ALL onto the grid\ng2.map(sns.pointplot, 'SAT_AVG_ALL',order=None)\n\n# Show the plot\nplt.show()\nplt.clf()","3870080f":"# Create a factor plot that contains boxplots of Tuition values\nsns.catplot(data=collge_df,\n         x='Tuition',\n         kind='box',\n         row='Degree_Type')\n\nplt.show()\nplt.clf()","3f97d8eb":"# Create a facetted pointplot of Average SAT_AVG_ALL scores facetted by Degree Type \nsns.catplot(data=collge_df,\n        x='SAT_AVG_ALL',\n        kind='point',\n        row='Degree_Type',\n        row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])\n\nplt.show()\nplt.clf()","9f259897":"degree_ord=['Graduate', 'Bachelors', 'Associates', 'Certificate']\n# Re-create the plot above as an lmplot\nsns.lmplot(data=collge_df,\n        x='UG',\n        y='PCTPELL',\n        col=\"Degree_Type\",\n        col_order=degree_ord)\n\nplt.show()\nplt.clf()","3be2ac9e":"# Create an lmplot that has a column for Ownership, a row for Degree_Type and hue based on the WOMENONLY column\nsns.lmplot(data=collge_df,\n        x='SAT_AVG_ALL',\n        y='Tuition',\n        row='Degree_Type',\n        row_order=['Graduate', 'Bachelors'],\n        hue='WOMENONLY',\n        )\n\nplt.show()\nplt.clf()","7c4098bd":"## Category 1 plot type used to show each observation\n![image.png](attachment:image.png)\n### Swarmplot doesnt scale well to large dataset","94a282cb":"## relation between tution and pctpell is inversely proportional","ee1dfe78":"# Regression Plots","c315ffe2":"# Basic Introduction to seaborn before moving to intermediate level\n![image.png](attachment:image.png)","12a50bc7":"# Categorical Plot types\n## What is categorical data?\n![image.png](attachment:image.png)","0d6124f0":"## Cutomizing seaborn using Matplotlib","75f100d2":"### In general, visualizations should minimize extraneous markings so that the data speaks for itself. Seaborn allows you to remove the lines on the top, bottom, left and right axis, which are often called spines.","1dd36f40":"## Defining custom color palette\n![image.png](attachment:image.png)","157abf02":"![image.png](attachment:image.png)","2433bfa1":"# Colors in Seaborn\n#### Seaborn offers several options for modifying the colors of your visualizations. The simplest approach is to explicitly state the color of the plot. A quick way to change colors is to use the standard matplotlib color codes.","4b765c6c":"## Default color palettes in seaborn\n![image.png](attachment:image.png)","46a376d0":"### The above plot is difficult to read so we should seperate the above plot into subplots on the basis of Region column as shown below","3f631f58":"### Seaborn includes several default palettes that can be easily applied to your plots. In this example, we will look at the impact of two different palettes on the same distplot","58d6d755":"## lmplot() is combination of both regplot and Facetgrid  It is intended as a convenient interface to fit regression models across conditional subsets of a dataset.\n## lmplot() gives a better resolution than regplot()","94407465":"## Category 3 used for statistical estimates\n![image.png](attachment:image.png)","89fed7e7":"### Below code will show the difference without and with using seaborn","980d21ce":"## HeatMap\n### A heatmap is a common matrix plot that can be used to graphically summarize the relationship between two variables. \n### For this exercise, we will start by looking at guests of the Daily Show from 1999 - 2015 and see how the occupations of the guests have changed over time.\n\n### The data includes the date of each guest appearance as well as their occupation. For the first exercise, we need to get the data into the right format for Seaborn's heatmap ###  ### function to correctly plot the data. All of the data has already been read into the df variable","e143e91e":"## Category 2 plot types used for abstract representation\n![image.png](attachment:image.png)\n### violinplot can provide alternative view of distribution data\n### lvplot(line value plot) (now renamed as boxenplot) its a hybrid between box plot and violin plot works best on large distributed data","b0f34451":"### Using the default color blind palette is a good option for making sure your visualizations are easy to read for individuals with degrees of color blindness.","55685e32":"# FacetGrid\n![image.png](attachment:image.png)","7ca8fb03":"# Matrix Plots","89552bc7":"![image.png](attachment:image.png)\n## Function is now renamed to catplot() in latest versions","bacf4f77":"![image.png](attachment:image.png)"}}