{"cell_type":{"b7467859":"code","d83945c8":"code","e7f9f213":"code","55682004":"code","45133403":"code","befa3aa6":"code","4cc3ea7d":"code","186f872f":"code","c8664281":"code","d80723ac":"code","91e49b5a":"code","48a7214f":"code","6373101f":"code","ce6e3642":"code","0a0a5dc4":"code","4fd5abe9":"code","e218e94b":"code","a6ef87b7":"code","021be0e8":"code","10d4607c":"code","be545e1b":"code","fede94de":"code","82101d75":"code","8fd1ef95":"code","2f23b614":"code","cdc3fccc":"code","9d34a8df":"code","a00098a5":"code","3103d149":"code","bfc4cf83":"code","ab66fc9f":"code","04465763":"code","3ce5009f":"code","f28d1c04":"code","d976b08f":"code","92eec6aa":"code","4757f765":"code","f17faf95":"code","32c6caf2":"code","85c25bb6":"code","e68f5ec9":"code","46e752f0":"code","2c02828c":"code","880cec5e":"code","14929051":"code","b6990f82":"code","374a4d6a":"code","c1b1d373":"code","b8cad772":"code","84ad3919":"code","980effd1":"code","b22197be":"code","50471621":"code","1493c690":"code","6ec51ce6":"code","a658fd22":"code","66d314f3":"code","25e4bca8":"code","f1c82e59":"code","db88e887":"code","81aa13f8":"code","c874cc23":"code","27a55c13":"code","35017fb1":"code","f50e2b17":"code","904dda6d":"code","838ef813":"code","0bf4deb6":"code","12c8a3fa":"code","11d37fc7":"code","6bcfcd2d":"code","13010a07":"code","b8718132":"code","4f3d3c82":"code","a09022f9":"code","8e313c22":"code","b910489d":"code","6fa4e484":"code","d8141cc0":"code","f9db4498":"code","e1ba0d61":"code","83b0f9e0":"code","1ec71b4a":"code","7f2eeede":"markdown","4b4a6626":"markdown","0aa3e256":"markdown","e156f6e5":"markdown","5d2fe4a8":"markdown","28d8a99d":"markdown","73e045fe":"markdown","f657ddcf":"markdown","0501fe05":"markdown","2f973914":"markdown"},"source":{"b7467859":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d83945c8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#For HTML Rendering\n#from IPython.core.display import display, HTML\n\n#folium for Map\nimport folium\nfrom folium import plugins\n# word cloud\nfrom wordcloud import WordCloud\n\n%matplotlib inline\nsns.set_context(\"notebook\", font_scale=1, rc={\"lines.linewidth\": 1})","e7f9f213":"#reading dataset\ndata=pd.read_csv(\"..\/input\/sacred-games\/Attacks on Political Leaders in Pakistan.csv\", encoding= 'unicode_escape')\ndf=data.copy()","55682004":"#printing top 2 rows\ndf.head(2)","45133403":"df.info()","befa3aa6":"#feature engineering\ndf['Date'] =pd.to_datetime(df['Date'])\ndf['Day'] = df['Date'].dt.day\ndf['Month'] = df['Date'].dt.month\ndf['Quarter'] = df['Date'].dt.quarter\ndf['Week'] = df['Date'].dt.week\ndf['Year'] = df['Date'].dt.year\ndf['Day of week'] = df['Date'].dt.dayofweek\ndays = {0:'Mon',1:'Tues',2:'Weds',3:'Thurs',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of week'] = df['Day of week'].apply(lambda x: days[x])","4cc3ea7d":"df.head(2)","186f872f":"#Check missing values\ndf.isna().sum()","c8664281":"cols_to_delete = df.columns[df.isnull().sum()\/len(df) > .90]\ndf.drop(cols_to_delete, axis = 1, inplace = True)","d80723ac":"# selecting rows based on condition\nrslt_df = df[df['Location Category'].isna()]\nrslt_df[['Location','Location Category']]","91e49b5a":"df.loc[df['Location'] == \"Kohsar Market, near his home\u00a0in Sector F6,\u00a0Islamabad\", 'Location Category'] = \"Market\"\ndf.loc[df['Location'] == \"village in Kulachi, which is located 45 kilometers from Dera Ismail Khan\", 'Location Category'] = \"Park\/Ground\"\ndf.loc[df['Location'] == \"Political office in Attock\u0092s Shadi Khan area\", 'Location Category'] = \"Office Building\"","48a7214f":"# selecting rows based on condition\nrslt_df = df[df['Location Category'].isna()]\nrslt_df[['Location','Location Category']]","6373101f":"Target_counts = df['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Target Status',fontweight='bold')\nax1.set_xlabel('Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Target Status',fontweight='bold');\nfig.tight_layout()","ce6e3642":"Target_counts = df['Target Category'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Target Category',fontweight='bold')\nax1.set_xlabel('Target Category')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Target Category',fontweight='bold');\nfig.tight_layout()","0a0a5dc4":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))\ndf.groupby('Target Category')['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Target Category and Target Status',fontweight='bold')\nax1.set_xlabel('Target Category and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby('Target Status')['Target Category'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Target Category and Target Status',fontweight='bold');\nfig.tight_layout()","4fd5abe9":"Target_counts = df['Location Category'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticklabels(Target_counts.index,rotation=90)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Location Category',fontweight='bold')\nax1.set_xlabel('Location Category')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Location Category',fontweight='bold');\nfig.tight_layout()","e218e94b":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\ndf.groupby('Space (Open\/Closed)')['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Space (Open\/Closed) and Target Status',fontweight='bold')\nax1.set_xlabel('Space (Open\/Closed) and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby('Target Status')['Space (Open\/Closed)'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Space (Open\/Closed) and Target Status',fontweight='bold');\nfig.tight_layout()","a6ef87b7":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\ndf.groupby('Space (Open\/Closed)')['Target Category'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Space (Open\/Closed) and Target Status',fontweight='bold')\nax1.set_xlabel('Space (Open\/Closed) and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby('Target Category')['Space (Open\/Closed)'].value_counts().plot.pie(ax=ax2,autopct='%.0f',rotatelabels =False, startangle=180,counterclock=False)\nax2.set_title('Percentage of attacks with Space (Open\/Closed) and Target Category',fontweight='bold');\nfig.tight_layout()","021be0e8":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))\ndf.groupby(['Target Category','Space (Open\/Closed)'])['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Space (Open\/Closed) and Target Status',fontweight='bold')\nax1.set_xlabel('Space (Open\/Closed) and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby(['Target Category','Space (Open\/Closed)'])['Target Status'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Space (Open\/Closed) and Target Category',fontweight='bold');\nfig.tight_layout()","10d4607c":"Target_counts = df['Time'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Time',fontweight='bold')\nax1.set_xlabel('Time')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Time',fontweight='bold');\nfig.tight_layout()","be545e1b":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\ndf.groupby('Time')['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Time and Target Status',fontweight='bold')\nax1.set_xlabel('Time and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby('Target Status')['Time'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Time and Target Status',fontweight='bold');\nfig.tight_layout()","fede94de":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))\ndf.groupby(['Target Category','Time'])['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Time, Target Status and Target Category',fontweight='bold')\nax1.set_xlabel('Time and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby(['Target Category','Time'])['Target Status'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Time, Target Status and Target Category',fontweight='bold');\nfig.tight_layout()","82101d75":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17, 8))\ndf.groupby(['Target Category','Time','Space (Open\/Closed)'])['Target Status'].value_counts().unstack().plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Time, Target Status, Space and Target Category',fontweight='bold')\nax1.set_xlabel('Time and Target Status')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\ndf.groupby(['Target Category','Time','Space (Open\/Closed)'])['Target Status'].value_counts().plot.pie(ax=ax2,autopct='%.0f')\nax2.set_title('Percentage of attacks with Time, Target Status, Space and Target Category',fontweight='bold');\nfig.tight_layout()","8fd1ef95":"df['Province'] = df['Province'].replace({'FATA':'FATA\/KPK',\n                                         'KPK':'FATA\/KPK',\n                                         'Fata':'FATA\/KPK',\n                                         'Punjab':'Punjab\/Capital',\n                                         'Capital':'Punjab\/Capital'})\ndf['Province'].value_counts()","2f23b614":"Target_counts = df['Province'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Province',fontweight='bold')\nax1.set_xlabel('Province')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Province',fontweight='bold');\nfig.tight_layout()","cdc3fccc":"Target = df.groupby('Province')['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('Province')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Province and Target Status',fontweight='bold')\nax1.set_xlabel('Province')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target, labels=Target.index, autopct='%.0f', textprops={'fontsize': 14}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Province and Target Status',fontweight='bold');\nfig.tight_layout()","9d34a8df":"Target_counts = df.groupby('Province')['Target Category'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n# First the bar plot\ndf.groupby('Province')['Target Category'].value_counts().unstack().sort_index().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Province and Target Category',fontsize=20, fontweight='bold')\nax1.set_xlabel('Province',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Province and Target Category',fontsize=20,fontweight='bold');\nfig.tight_layout()","a00098a5":"Target_counts = df.groupby(['Province', 'Target Category'])['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 13))\n# First the bar plot\ndf.groupby(['Province', 'Target Category'])['Target Status'].value_counts().sort_index().unstack().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Province, Target Category and Target Status',fontsize=20, fontweight='bold')\nax1.set_xlabel('Province',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va,fontsize=20)          # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Province, Target Category and Target Status',fontsize=20, fontweight='bold');\nfig.tight_layout()","3103d149":"df['City'] = df['City'].replace({'ATTOCK':'Attock'})\ndf['City'].value_counts()","bfc4cf83":"Target_counts = df['City'].value_counts().sort_values(ascending=False)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_xticklabels(Target_counts.index,rotation=90)\nax1.set_title('Number of Attacks by City',fontweight='bold')\nax1.set_xlabel('City')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with City',fontweight='bold');\nfig.tight_layout()","ab66fc9f":"Target = df.groupby('City')['Target Status'].value_counts().sort_index()\nfig, (ax1) = plt.subplots(1, 1, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('City')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by City and Target Status',fontweight='bold')\nax1.set_xlabel('City')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)","04465763":"# selecting rows based on condition\nrslt_df = df[df['Year']>2020]\nrslt_df ","3ce5009f":"df.loc[df['Date'] == \"2051-10-16\", 'Date1'] = \"1951-10-16\"\ndf.loc[df['Date'] == \"2058-05-09\", 'Date1'] = \"1958-05-09\"\ndf.loc[df['Date1'].isna(), 'Date1'] = df['Date']\ndf['Date1'] =pd.to_datetime(df['Date1'])\ndf['Date']=df['Date1'].copy()\ndf.drop('Date1', axis=1, inplace=True)\ndf['Year']= df['Date'].dt.year\ndf.head(3)","f28d1c04":"# selecting rows based on condition\nrslt_df = df[df['Year']>2020]\nrslt_df ","d976b08f":"import matplotlib.dates as mdates\n%matplotlib inline\nYear=df['Year'].value_counts().reset_index(name='Attacks')\nYear.rename(columns={'index':'Year'},inplace=True)\nYear.set_index('Year', inplace=True)","92eec6aa":"plt.figure(figsize=(10, 5))\nsns.lineplot(data=Year, x='Year',y='Attacks')\nplt.title('Year Wise Trend',fontweight='bold')\nplt.xlabel('Year')\nplt.ylabel('Number of Attacks')\nplt.axvline(x=2018, color='red', linestyle='--', label='Election 2018')\nplt.axvline(x=2013, color='green', linestyle='--', label='Election 2013')\nplt.axvline(x=2008, color='black', linestyle='--', label='Election 2008')\nplt.axvline(x=2004, color='Orange', linestyle='--', label='Election 2004')\nplt.legend()\nplt.show()","4757f765":"import matplotlib.dates as mdates\n%matplotlib inline\nYear=df.groupby('Target Status')['Year'].value_counts().reset_index(name='Attacks')\nYear.rename(columns={'index':'Year'},inplace=True)\nYear.set_index('Year', inplace=True)\nYear.head()","f17faf95":"plt.figure(figsize=(10, 5))\nsns.lineplot(data=Year, x='Year',y='Attacks', hue='Target Status')\nplt.title('Year Wise Trend by Target Status',fontweight='bold')\nplt.xlabel('Year')\nplt.ylabel('Number of Attacks')\nxposition = [2004, 2008, 2013, 2018]\nfor xc in xposition:\n    plt.axvline(x=xc, color='k', linestyle='--')\nplt.legend()\nplt.show()","32c6caf2":"import matplotlib.dates as mdates\n%matplotlib inline\nYear=df.groupby('Target Category')['Year'].value_counts().reset_index(name='Attacks')\nYear.rename(columns={'index':'Year'},inplace=True)\nYear.set_index('Year', inplace=True)\nYear.head()\n\nplt.figure(figsize=(10, 5))\nsns.lineplot(data=Year, x='Year',y='Attacks', hue='Target Category')\nplt.title('Year Wise Trend by Target Category',fontweight='bold')\nplt.xlabel('Year')\nplt.ylabel('Number of Attacks')\nxposition = [2004, 2008, 2013, 2018]\nfor xc in xposition:\n    plt.axvline(x=xc, color='k', linestyle='--')\nplt.legend()\nplt.show()","85c25bb6":"Year=df['Year'].value_counts().reset_index(name='Attacks')\nYear.rename(columns={'index':'Year'},inplace=True)\nplt.figure(figsize=(12, 5))\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10), sharex=True)\n\n# mean_pct_change will be used to show the mean percentage change below\nYear['pct_change'] = Year['Attacks'].pct_change()\nmean_pct_change = Year['pct_change'].mean()\n\nsns.lineplot(data=Year, x='Year',y='Attacks',ax=ax1)\nax1.set_ylabel('Number of Attacks')\n\nsns.lineplot(data=Year, x='Year',y='pct_change',ax=ax2)\nax2.set_xlabel('Years')\nax2.set_ylabel('Percentage change')\n\n# hlines can be used to draw a line on an axes object\nax2.hlines(mean_pct_change, Year['Year'].min(), Year['Year'].max())\n# annotate can be used to add text\nax2.annotate('Mean % change', xy=(Year['Year'].min(), mean_pct_change - .0003))\n\nfig.suptitle('Number of Attacks with percent change',fontweight='bold')\n\n# Calculate the coordinates of the point we want to annotate\nmin_pct_change_y = Year['pct_change'].min()\nmin_pct_change_x = Year[Year['pct_change'] == min_pct_change_y]['Year'].iloc[0]\n\nmin_pct_change_x, min_pct_change_y\n\n# Annotate can also be used to create arrows\nax2.annotate('What happened here?',\n             xy=(min_pct_change_x, min_pct_change_y),\n             xytext=(min_pct_change_x - 8, min_pct_change_y * 1.2), # Travel away from the annotated point\n             arrowprops={'facecolor': 'black'})\n\nfig.tight_layout();","e68f5ec9":"Year=df['Year'].value_counts().reset_index(name='Attacks')\nYear.rename(columns={'index':'Year'},inplace=True)\nplt.figure(figsize=(12, 5))\n# Matplotlib sorts the X axis values and there seems to be no way to \"switch it off\".\nplt.bar(Year['Year'].astype(str), Year['Attacks']);\nplt.plot(Year['Year'].astype(str), np.cumsum(Year['Attacks']), 'o-r', alpha=0.5)\nplt.axhline(0.80 * (Year['Attacks'].sum()), color='red', alpha=0.5, linestyle=':')\nplt.title('Attacks by Years (Pareto Chart)',fontweight='bold')\nplt.xlabel('Years')\nplt.xticks(rotation=90)\nplt.ylabel('Count')\nplt.grid(axis='y', alpha=0.5, linestyle='dotted'); ","46e752f0":"Target_counts = df['Month'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Month',fontweight='bold')\nax1.set_xlabel('Month')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Month',fontweight='bold');\nfig.tight_layout()","2c02828c":"Target = df.groupby('Month')['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('Month')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Month and Target Status',fontweight='bold')\nax1.set_xlabel('Month')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target, labels=Target.index, autopct='%.0f', textprops={'fontsize': 14}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Month and Target Status',fontweight='bold');\nfig.tight_layout()","880cec5e":"Target_counts = df.groupby(['Month', 'Target Category'])['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 13))\n# First the bar plot\ndf.groupby(['Month', 'Target Category'])['Target Status'].value_counts().sort_index().unstack().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Month, Target Category and Target Status',fontsize=20, fontweight='bold')\nax1.set_xlabel('Month',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va,fontsize=20)          # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Month, Target Category and Target Status',fontsize=20, fontweight='bold');\nfig.tight_layout()","14929051":"Target_counts = df['Quarter'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Quarter',fontweight='bold')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Quarter',fontweight='bold');\nfig.tight_layout()","b6990f82":"Target = df.groupby('Quarter')['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('Quarter')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Quarter and Target Status',fontweight='bold')\nax1.set_xlabel('Quarter')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target, labels=Target.index, autopct='%.0f', textprops={'fontsize': 14}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Quarter and Target Status',fontweight='bold');\nfig.tight_layout()","374a4d6a":"Target_counts = df.groupby(['Quarter', 'Target Category'])['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 13))\n# First the bar plot\ndf.groupby(['Quarter', 'Target Category'])['Target Status'].value_counts().sort_index().unstack().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Quarter, Target Category and Target Status',fontsize=20, fontweight='bold')\nax1.set_xlabel('Quarter',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va,fontsize=20)          # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Quarter, Target Category and Target Status',fontsize=20, fontweight='bold');\nfig.tight_layout()","c1b1d373":"Target_counts = df['Week'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticklabels(Target_counts.index,rotation=90)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Week',fontweight='bold')\nax1.set_xlabel('Week')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Week',fontweight='bold');\nfig.tight_layout()","b8cad772":"Target_counts = df['Day Type'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Day Type',fontweight='bold')\nax1.set_xlabel('Day Type')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day Type',fontweight='bold');\nfig.tight_layout()","84ad3919":"Target = df.groupby('Day Type')['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('Day Type')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Day Type and Target Status',fontweight='bold')\nax1.set_xlabel('Day Type')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target, labels=Target.index, autopct='%.0f', textprops={'fontsize': 14}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day Type and Target Status',fontweight='bold');\nfig.tight_layout()","980effd1":"Target_counts = df.groupby('Day Type')['Target Category'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n# First the bar plot\ndf.groupby('Day Type')['Target Category'].value_counts().unstack().sort_index().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Day Type and Target Category',fontsize=20, fontweight='bold')\nax1.set_xlabel('Day Type',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day Type and Target Category',fontsize=20,fontweight='bold');\nfig.tight_layout()","b22197be":"Target_counts = df.groupby(['Day Type', 'Target Category'])['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 13))\n# First the bar plot\ndf.groupby(['Day Type', 'Target Category'])['Target Status'].value_counts().sort_index().unstack().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Day Type, Target Category and Target Status',fontsize=20, fontweight='bold')\nax1.set_xlabel('Day Type',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va,fontsize=20)          # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day Type, Target Category and Target Status',fontsize=20, fontweight='bold');\nfig.tight_layout()","50471621":"Target_counts = df['Day of week'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Day of week',fontweight='bold')\nax1.set_xlabel('Day of week')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f') # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day of week',fontweight='bold');\nfig.tight_layout()","1493c690":"Target = df.groupby('Day of week')['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7.5))\n# First the bar plot\nTarget_counts = df.groupby('Day of week')['Target Status'].value_counts().unstack().sort_index()\nTarget_counts.plot.bar(ax=ax1)\nax1.set_title('Number of Attacks by Day of week and Target Status',fontweight='bold')\nax1.set_xlabel('Day of week')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target, labels=Target.index, autopct='%.0f', textprops={'fontsize': 14}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day of week and Target Status',fontweight='bold');\nfig.tight_layout()","6ec51ce6":"Target_counts = df.groupby('Day of week')['Target Category'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n# First the bar plot\ndf.groupby('Day of week')['Target Category'].value_counts().unstack().sort_index().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Day of week and Target Category',fontsize=20, fontweight='bold')\nax1.set_xlabel('Day of week',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day of week and Target Category',fontsize=20,fontweight='bold');\nfig.tight_layout()","a658fd22":"Target_counts = df.groupby(['Day of week', 'Target Category'])['Target Status'].value_counts().sort_index()\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(25, 13))\n# First the bar plot\ndf.groupby(['Day of week', 'Target Category'])['Target Status'].value_counts().sort_index().unstack().plot.bar(ax=ax1,fontsize=20)\nax1.set_title('Number of Attacks by Day of week, Target Category and Target Status',fontsize=20, fontweight='bold')\nax1.set_xlabel('Day of week',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va,fontsize=20)          # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)\n# Pie chart on the right\nax2.pie(Target_counts, labels=Target_counts.index, autopct='%.0f', textprops={'fontsize': 20}) # Try replacing %f with %f%%, then %.f%%, then %.1f%%\nax2.set_title('Percentage of attacks with Day of week, Target Category and Target Status',fontsize=20, fontweight='bold');\nfig.tight_layout()","66d314f3":"Target_counts = df['Party'].value_counts().sort_values(ascending=False)\nfig, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticklabels(Target_counts.index,rotation=90,fontsize=20)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Party', fontweight='bold',fontsize=20)\nax1.set_xlabel('Party',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)","25e4bca8":"Target_counts = df.groupby(['Party'])['Target Status'].value_counts().sort_values(ascending=False).unstack()\nfig, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\n# First the bar plot\nTarget_counts.plot.bar(ax=ax1)\nax1.set_xticklabels(Target_counts.index,rotation=90)\nax1.set_title('Number of Attacks by Party')\nax1.set_xlabel('Party')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)","f1c82e59":"Target_counts = df['Politician'].value_counts().sort_values(ascending=False)\nfig, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\n# First the bar plot\nax1.bar(Target_counts.index, Target_counts)\nax1.set_xticklabels(Target_counts.index,rotation=90,fontsize=20)\nax1.set_xticks(Target_counts.index) # see what happens without this\nax1.set_title('Number of Attacks by Politician', fontweight='bold',fontsize=20)\nax1.set_xlabel('Politician',fontsize=20)\nax1.set_ylabel('Number of Attacks',fontsize=20)\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)","db88e887":"Target_counts = df.groupby(['Politician'])['Target Status'].value_counts().sort_index().unstack()\nfig, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\n# First the bar plot\nTarget_counts.plot.bar(ax=ax1)\nax1.set_xticklabels(Target_counts.index,rotation=90)\nax1.set_title('Number of Attacks by Politician')\nax1.set_xlabel('Politician')\nax1.set_ylabel('Number of Attacks')\nax1.grid(axis='y', alpha=0.5, ls=':');\n\ndef add_value_labels(ax1, spacing=5):\n    # For each bar: Place a label\n    for rect in ax1.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n        # If value of bar is negative: Place label below bar\n        if y_value < 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.0f}\".format(y_value)\n\n        # Create annotation\n        ax1.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax1)","81aa13f8":"df['Effected']=df['Killed']+df['Injured']+1","c874cc23":"import matplotlib.pyplot as plt\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# plot\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))\nsns.histplot(df['Effected'], kde=True, ax=ax1)\nsns.histplot(df['Killed'], kde=True, ax=ax2)\nsns.histplot(df['Injured'], kde=True, ax=ax3)\nfig.suptitle('Histogram of Effected Individuals, Injured and Killed',fontweight='bold', fontsize=16)\nplt.tight_layout()","27a55c13":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(10, 10))\n\nax1.hist(df['Killed'], bins=10)\nax1.set_ylabel('Killed')\n\nax2.scatter(df['Injured'], df['Killed'])\n\nax3.scatter(df['Killed'], df['Injured'])\nax3.set_xlabel('Killed')\nax3.set_ylabel('Injured')\n\nax4.hist(df['Injured'], bins=10)\nax4.set_xlabel('Injured')\n\nfig.suptitle('Injured and Killed Correlogram',fontweight='bold', fontsize=16)\nfig.tight_layout(rect=[0, 0, 1, 0.95]);","35017fb1":"f, axes = plt.subplots(2,2, figsize = (14,10), constrained_layout=True)\nsns.boxplot(x='Day Type', y='Killed', hue='Target Category',data=df, ax=axes[0,0])\nsns.boxplot(x='Day Type', y='Injured', hue='Target Category', data=df, ax=axes[0,1])\nsns.boxplot(x='Day Type', y='Killed', hue='Space (Open\/Closed)',data=df, ax=axes[1,0])\nsns.boxplot(x='Day Type', y='Injured', hue='Space (Open\/Closed)', data=df, ax=axes[1,1])\nfig.suptitle('Identification of Outliers by Day Type',fontweight='bold', fontsize=16)\nfig.tight_layout();","f50e2b17":"f, axes = plt.subplots(2,2, figsize = (14,10), constrained_layout=True)\nsns.boxplot(x='Province', y='Killed', hue='Target Category',data=df, ax=axes[0,0])\nsns.boxplot(x='Province', y='Injured', hue='Target Category', data=df, ax=axes[0,1])\nsns.boxplot(x='Province', y='Killed', hue='Space (Open\/Closed)',data=df, ax=axes[1,0])\nsns.boxplot(x='Province', y='Injured', hue='Space (Open\/Closed)', data=df, ax=axes[1,1])\nfig.suptitle('Identification of Outliers by Province',fontweight='bold', fontsize=16)\nfig.tight_layout();","904dda6d":"f, axes = plt.subplots(2,2, figsize = (14,10), constrained_layout=True)\nsns.boxplot(x='Target Status', y='Killed', hue='Target Category',data=df, ax=axes[0,0])\nsns.boxplot(x='Target Status', y='Injured', hue='Target Category', data=df, ax=axes[0,1])\nsns.boxplot(x='Target Status', y='Killed', hue='Space (Open\/Closed)',data=df, ax=axes[1,0])\nsns.boxplot(x='Target Status', y='Injured', hue='Space (Open\/Closed)', data=df, ax=axes[1,1])\nfig.suptitle('Identification of Outliers by Target Status',fontweight='bold', fontsize=16)\nfig.tight_layout();","838ef813":"f, axes = plt.subplots(2,2, figsize = (14,10), constrained_layout=True)\nsns.boxplot(x='Day of week', y='Killed', hue='Target Category',data=df, ax=axes[0,0])\nsns.boxplot(x='Day of week', y='Injured', hue='Target Category', data=df, ax=axes[0,1])\nsns.boxplot(x='Day of week', y='Killed', hue='Space (Open\/Closed)',data=df, ax=axes[1,0])\nsns.boxplot(x='Day of week', y='Injured', hue='Space (Open\/Closed)', data=df, ax=axes[1,1])\nfig.suptitle('Identification of Outliers by Day of week',fontweight='bold', fontsize=16)\nfig.tight_layout();","0bf4deb6":"f, axes = plt.subplots(2,2, figsize = (14,10), constrained_layout=True)\nsns.boxplot(x='Month', y='Killed', hue='Target Category',data=df, ax=axes[0,0])\nsns.boxplot(x='Month', y='Injured', hue='Target Category', data=df, ax=axes[0,1])\nsns.boxplot(x='Month', y='Killed', hue='Space (Open\/Closed)',data=df, ax=axes[1,0])\nsns.boxplot(x='Month', y='Injured', hue='Space (Open\/Closed)', data=df, ax=axes[1,1])\nfig.suptitle('Identification of Outliers by Month',fontweight='bold', fontsize=16)\nfig.tight_layout();","12c8a3fa":"sns.relplot(data=df, x='Killed', y='Injured', hue='Target Status');","11d37fc7":"sns.relplot(data=df, x='Killed', y='Injured', hue='Target Category');","6bcfcd2d":"sns.displot(data=df, x='Killed', hue='Target Category', kind='kde');","13010a07":"sns.jointplot(data=df, x='Killed', y='Injured', hue='Target Category');","b8718132":"sns.jointplot(data=df, x='Killed', y='Injured');","4f3d3c82":"sns.jointplot(data=df, x='Killed', y='Injured', hue='Target Status');","a09022f9":"sns.jointplot(data=df, x='Killed', y='Injured', hue='Target Status', kind='kde');","8e313c22":"sns.pairplot(data=df, hue='Target Status');","b910489d":"sns.pairplot(data=df, hue='Target Status', kind='reg');","6fa4e484":"df.rename(columns={'Longititude':'Longitude'},inplace=True)","d8141cc0":"df['Date1']=df.Date.apply(lambda x: x.strftime('%Y%m%d')).astype(int)\ndf.head()","f9db4498":"month_lookup = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May',\n            6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}\n\ndf['Month'] = df['Month'].apply(lambda x: month_lookup[x])","e1ba0d61":"df['marker_popup'] = ''\nfor index, row in df.iterrows():\n    df.loc[index, 'marker_popup'] = df.loc[index,'City'].strip() + '(' + str(df.loc[index,'Date']) + '  |  <b>Killed<\/b>: ' + str(df.loc[index,'Killed']) + '  |  Injured: ' + str(df.loc[index,'Injured'])  + ')'","83b0f9e0":"pk_map = folium.Map(location=[30.3753, 69.3451],\n                   zoom_start=5)\n# mark each station as a point\nfor index, row in df.iterrows():\n    folium.Marker([df.loc[index,'Latitude'], df.loc[index,'Longitude']],\n                  icon=folium.Icon(color= 'red' if df.loc[index, 'Target Status'] == 'Killed' else 'green'),\n                  popup=df.loc[index,'marker_popup']).add_to(pk_map)\npk_map","1ec71b4a":"Heat_map_data = df[['Latitude','Longitude']]\nnp.array(Heat_map_data).tolist() \nfrom folium.plugins import HeatMap\n\nm = folium.Map(location=[30.3753, 69.3451], tiles='stamentoner', zoom_start=5)\n\nHeatMap(np.array(Heat_map_data).tolist()).add_to(m)\nm","7f2eeede":"Amoung 51 political leaders who were been attached in the history of pakistan 61% political leaders were killed during attack.","4b4a6626":"Amoung 51 political leaders 21 leaders (41%) were killed by target killing, 10 (20%) political leaders were killed by suicide attacks. 3 (6%) political leaders were escaped in target killing, 17 (33%) political leaders were escaped in suicide attack.","0aa3e256":"53% of the political leaders were targeted through suicide attack and 47% of the political leaders were attacked by target killing.","e156f6e5":"Majority 21 (41%) of the political leaders were attacked in open space and killed during Violence and Assassination followed by 29% of the political leaders remained safe\/escaped during voilance activity.","5d2fe4a8":"Majority 13 politicians were killed in **KPK\/FATA** which shows politican killing rate was highest in KPK province followed by punjab","28d8a99d":"In the majority 27% of the incidents of voilence target was killed in open space and target was escaped in open space in suicide bombing.","73e045fe":"Majority 31% of voilance incidents in KPK were suicide attacks on politicians.","f657ddcf":"37% of the voilence incidents were suicide attacks and attack was in open space. 33% of voilance incidents were target killing in open space. ","0501fe05":"Amoung 51 incidents of voilance 24 (47%) incidents were faced in **\"KPK\/FATA\"** followed by **punjab** 25%.","2f973914":"Majority 14 (27%) political leaders were attacked on the their residence, 11 (22%) political leaders were attacked on roads"}}