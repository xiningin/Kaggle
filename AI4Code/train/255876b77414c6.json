{"cell_type":{"58687ed0":"code","fcc72823":"code","9f57d1f3":"code","1c96342d":"code","6986f0cb":"code","95097f8e":"code","c63e364f":"code","5c3ed7e5":"code","708713c0":"code","ee9e73d3":"code","be204894":"code","0d2e1d08":"code","fa866758":"code","4cce8ee8":"code","252b959f":"code","50f9dbdb":"code","ce4c8257":"code","e5b25cfb":"code","7b314f22":"code","014f6b52":"code","61eb11d7":"code","f7446d7d":"code","db553b71":"code","815e4afa":"code","d29b1c7e":"code","7aa3b867":"code","f592ae9d":"code","28a2cf14":"code","c9c38dae":"code","3a12f17e":"code","eae12297":"code","b9a97db5":"code","44bb96c8":"code","9faa772b":"code","cef4cbee":"code","15879d9f":"code","ba982331":"code","42e0c924":"code","22504aad":"code","d8b0ea96":"code","8b6d4d0b":"code","3493c362":"code","418b4d73":"code","886360c4":"code","33ba9033":"code","3cf28e7f":"markdown","11d8d2cf":"markdown","1729b43c":"markdown","2bea44e0":"markdown","088e3090":"markdown","0bb5ff49":"markdown","e1c3673a":"markdown","3e18c0d6":"markdown"},"source":{"58687ed0":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style()\n%matplotlib inline","fcc72823":"# Importing MNIST dataset\ndf_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","9f57d1f3":"y_train = df_train['label']\ny_train","1c96342d":"x_train = df_train.drop('label', axis=1)\nx_train = x_train.values\nx_train","6986f0cb":"x_train.shape","95097f8e":"# Reshaping array to visualize the images\nplt.imshow(x_train[0].reshape(28,28), cmap='Greys')\nplt.show()","c63e364f":"x_train = x_train.reshape(42000,28,28)","5c3ed7e5":"x_train.shape","708713c0":"from sklearn.model_selection import train_test_split\nx_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size=0.1, random_state=19)","ee9e73d3":"x_train.shape","be204894":"x_valid.shape","0d2e1d08":"from tensorflow.keras.utils import to_categorical\ny_cat_valid = to_categorical(y_valid, num_classes=10)\ny_cat_train = to_categorical(y_train, num_classes=10)","fa866758":"# Sampling first image visually\nfirst_image = x_train[0]\nplt.imshow(first_image, cmap='Greys')\nplt.show()","4cce8ee8":"print('Actual image:')\nprint(y_train[0])","252b959f":"first_image.max()","50f9dbdb":"first_image.min()","ce4c8257":"# Scaling values on train and test data\nx_train_scaled = x_train\/255\nx_valid_scaled = x_valid\/255","e5b25cfb":"# Rechecking image after scaling\nplt.imshow(x_train_scaled[0], cmap='Greys')\nplt.show()","7b314f22":"# Reshaping final training and testing data to prep for training\n# (batch_size, width, height, color_channels)\nx_train_final = x_train_scaled.reshape(37800,28,28,1)\nx_valid_final = x_valid_scaled.reshape(4200,28,28,1)","014f6b52":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout","61eb11d7":"# Building CNN Model\n\n# Instantiate model\nmodel = Sequential()\n\n# Convolution layer 1\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), strides=(1,1), input_shape=(28,28,1), padding='Same', activation='relu'))\n# Convolution layer 2\nmodel.add(Conv2D(filters=32, kernel_size=(5,5), strides=(1,1), input_shape=(28,28,1), padding='Same', activation='relu'))\n# Pooling layer (selected half of kernel_size)\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# Convolution layer 3\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), input_shape=(28,28,1), padding='Same', activation='relu'))\n# Convolution layer 4\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), input_shape=(28,28,1), padding='Same', activation='relu'))\n# Pooling layer (selected half of kernel_size)\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n# Flattening image\nmodel.add(Flatten())\n# Dense layer\nmodel.add(Dense(256, activation='relu'))\n\n# Output layer\nmodel.add(Dense(10, activation='softmax'))\n\n# Compiling model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","f7446d7d":"from tensorflow.keras.callbacks import EarlyStopping","db553b71":"early_stop = EarlyStopping(monitor='val_loss', patience=2)","815e4afa":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","d29b1c7e":"image_gen = ImageDataGenerator(rotation_range=10,\n                              width_shift_range=0.1,\n                              height_shift_range=0.1,\n                              shear_range=0.1,\n                              zoom_range=0.1,\n                              fill_mode='nearest')","7aa3b867":"train_image_gen = image_gen.fit(x_train_final)","f592ae9d":"train_image_gen","28a2cf14":"model.fit_generator(image_gen.flow(x_train_final, y_cat_train), epochs=10, validation_data=(x_valid_final, y_cat_valid), callbacks=[early_stop])","c9c38dae":"metrics = pd.DataFrame(model.history.history)\nmetrics","3a12f17e":"metrics[['loss', 'val_loss']].plot()\nplt.show()","eae12297":"metrics[['accuracy', 'val_accuracy']].plot()\nplt.show()","b9a97db5":"model.evaluate(x_valid_final, y_cat_valid, verbose=0)","44bb96c8":"y_pred = model.predict_classes(x_valid_final)\ny_pred","9faa772b":"# Model evaluation\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint('Classification Report:')\nprint(classification_report(y_valid, y_pred))\nprint('\\n')\nprint('Confusion Matrix:')\nprint(confusion_matrix(y_valid, y_pred))","cef4cbee":"np.random.seed(19)\nrandom_selection = np.random.randint(0, 4201, size=1)\nrandom_sample = x_valid_final[random_selection]\nplt.imshow(random_sample.reshape(28,28), cmap='Greys')\nplt.show()","15879d9f":"print('Prediction:')\nprint(model.predict_classes(random_sample.reshape(1,28,28,1))[0])","ba982331":"np.random.seed(20)\nrandom_selection_2 = np.random.randint(0, 4201, size=1)\nrandom_sample_2 = x_valid_final[random_selection_2]\nplt.imshow(random_sample_2.reshape(28,28), cmap='Greys')\nplt.show()","42e0c924":"print('Prediction:')\nprint(model.predict_classes(random_sample_2.reshape(1,28,28,1))[0])","22504aad":"np.random.seed(22)\nrandom_selection_3 = np.random.randint(0, 4201, size=1)\nrandom_sample_3 = x_valid_final[random_selection_3]\nplt.imshow(random_sample_3.reshape(28,28), cmap='Greys')\nplt.show()","d8b0ea96":"print('Prediction:')\nprint(model.predict_classes(random_sample_3.reshape(1,28,28,1))[0])","8b6d4d0b":"# Reshaping test data\nx_test = df_test.values\nx_test = x_test.reshape(28000,28,28)\nx_test.shape","3493c362":"# Scaling test data\nx_test_scaled = x_test\/255","418b4d73":"# Generating preditions\ntest_predictions = model.predict_classes(x_test_scaled.reshape(28000,28,28,1))","886360c4":"test_predictions","33ba9033":"# Save test predictions to file\noutput = pd.DataFrame({'ImageId': df_test.index + 1,\n                       'Label': test_predictions})\noutput.to_csv('submission.csv', index=False)","3cf28e7f":"# Generating Predictions from Test Data","11d8d2cf":"# Data Augmentation","1729b43c":"# Building the CNN Model\n- This models consists of only one convolution layer followed by a pooling layer to speed up computation while still retaining the meaningful information of the data.\n- The image was flattened and then fed into a dense layer followed by the output layer.\n- A softmax activation function was used for the output layer as this is a multi-class classification problem.","2bea44e0":"**Note:** The targets in y_train and y_test are simply numerical values. We need to perform one-hot encoding for our model as this is a multi-class classification problem.","088e3090":"Our model performs quite well based on the above evaluation, resulting in an overall accuracy of 99%.","0bb5ff49":"# Model Evaluation\n- The loss of the training and validation sets were plotted to ensure we are not overfitting our model\n- Accuracy of the training and validation data were also plotted\n- Overall accuracy was obtained from a classification report and confusion matrix","e1c3673a":"**Note:** We can simply divide the training and test data by the maximum value of 255 to scale the data.","3e18c0d6":"# Sample Predictions\n- Random samples from the testing set were selected and our model was used to predict each sample target.\n- The actual image is displayed followed by the prediction."}}