{"cell_type":{"0131e80b":"code","5fe34ec9":"code","4426598f":"code","a398a767":"code","d4e5b4a7":"code","2d444fee":"code","f21976db":"code","fc0deaf2":"code","a8c75047":"code","769af942":"code","225459b0":"code","3c588afe":"code","90d8ea09":"code","cac09d0a":"code","e24917ed":"code","8f276b29":"code","28a29d62":"code","ba863872":"code","e3acc0e6":"code","3163e26d":"code","be84c42e":"code","39fdd78b":"code","e878d248":"code","d83ca1a9":"code","8e442d21":"code","32fec103":"code","ec46b005":"code","36216be3":"code","74c74028":"code","600e70d6":"code","1bf35493":"code","6693e6a1":"code","d95d6ce2":"code","9c054ea1":"code","d341e9fb":"code","ab8acd69":"code","98e86bde":"markdown","2fc072d1":"markdown","3de94730":"markdown","d78ad12e":"markdown","d2ea3c04":"markdown","17e64a5b":"markdown","8fe4d1a3":"markdown"},"source":{"0131e80b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5fe34ec9":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ndf_train.head()","4426598f":"df_train.describe()","a398a767":"import holidays\n\ncontry_holidays = {\n    'Finland': holidays.Finland(),\n    'Norway': holidays.Norway(),\n    'Sweden': holidays.SWE()\n}","d4e5b4a7":"df_train.info();","2d444fee":"df_train['date'] = pd.to_datetime(df_train['date'])\ndf_train.info()","f21976db":"df_train.shape","fc0deaf2":"df_train['country'].value_counts()","a8c75047":"winter = (1,2,3)\nspring = (4,5,6)\nsummer = (7,8,9)\nautum  = (10,11,12)\n\nseason_dict = {}\n\nfor month in range(1,13):\n    if month < 4:\n        season_dict[month] = 'winter'\n        continue\n    if month >= 4 and month < 7:\n        season_dict[month] = 'spring'\n        continue\n    if month >= 7 and month < 10:\n        season_dict[month] = 'summer'\n        continue\n    season_dict[month] = 'autum'","769af942":"season_dict","225459b0":"#contry_holidays\ndef set_new_features(df):\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['day'] = df['date'].dt.day\n    df['weekday'] = df['date'].dt.weekday\n    df['holiday'] = df.apply(lambda x: x['date'] in contry_holidays[x['country']], axis=1)\n    df['weekdend'] =  df['weekday'].apply(lambda x: x in (4,5,6))\n    df['season'] = df.apply(lambda x: season_dict[x['month']], axis=1)\n    df = df.drop('date', axis=1)\n    \n    return df;\n","3c588afe":"df_train = set_new_features(df_train)\ndf_train","90d8ea09":"df_train.head()","cac09d0a":"import matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns","e24917ed":"plt.hist(x=df_train['num_sold']);","8f276b29":"px.box(df_train['num_sold'])","28a29d62":"df_train.head()","ba863872":"tree_graf = px.treemap(df_train, path=['product'])\ntree_graf.show()","e3acc0e6":"df_train = df_train.drop('row_id', axis=1)","3163e26d":"y = df_train.pop('num_sold').values","be84c42e":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(df_train, y, train_size=0.25, random_state=0)","39fdd78b":"X_train.shape","e878d248":"from sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_transformer, make_column_selector\nimport numpy as np\n\npreprocessor = make_column_transformer(\n        (StandardScaler(), make_column_selector(dtype_include=np.number)),\n        (OneHotEncoder(sparse=False, handle_unknown='ignore'), make_column_selector(dtype_include=object)),\n        remainder='passthrough'\n)","d83ca1a9":"X_train_p = preprocessor.fit_transform(X_train)\nX_valid_p = preprocessor.transform(X_valid)\ny_train_l = np.log(y_train)\ny_valid_l = np.log(y_valid)","8e442d21":"df_p = pd.DataFrame(X_train_p)\ndf_p['x'] = y_train\ncorr = df_p.corr()\ncorr.style.background_gradient(cmap='coolwarm')","32fec103":"# from sklearn.linear_model import LinearRegression\n\n# reg = LinearRegression().fit(X_train_p, y_train_l)\n# y_prediction = reg.predict(X_valid_p)\n# y_prediction","ec46b005":"input_shape = [X_train_p.shape[1]]\n\nfrom tensorflow.keras import callbacks\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\n\nearly_stopping = callbacks.EarlyStopping(\n    min_delta=0.00001,\n    patience=20,\n    restore_best_weights=True,\n)\n\nmodel = keras.Sequential([\n    layers.Dense(2024, activation='relu', input_shape=input_shape),\n    layers.GaussianDropout(0.8),\n    layers.BatchNormalization(),\n    layers.Dense(1024, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(1),\n])\nmodel.compile(\n    optimizer='adam',\n    loss='MSLE',\n)\nhistory = model.fit(\n    X_train_p, y_train_l,\n    validation_data=(X_valid_p, y_valid_l),\n    batch_size=45,\n    epochs=500,\n    callbacks=[early_stopping],\n    verbose=0\n)\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nprint(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));\n","36216be3":"y_prediction = model.predict(X_valid_p)","74c74028":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n\nrmse = mean_squared_error(np.exp(y_valid_l), np.exp(y_prediction) , squared=True)\nmse = mean_absolute_error(np.exp(y_valid_l), np.exp(y_prediction))\nprint(f'RMSE: {rmse}')\nprint(f'MAE: {mse}')","600e70d6":"df_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv', parse_dates=['date'])\ndf_test","1bf35493":"df_test = set_new_features(df_test)\ndf_test","6693e6a1":"rows_test = df_test.pop('row_id')\ndf_test","d95d6ce2":"df_test_p = preprocessor.transform(df_test)","9c054ea1":"df_test_p","d341e9fb":"pred = model.predict(df_test_p)\npred","ab8acd69":"result_df = pd.DataFrame({'row_id': rows_test, 'num_sold': np.exp(pred).flatten()})\nresult_df['num_sold'] = result_df['num_sold'].round()\nresult_df.to_csv('submission.csv', index=False)\nresult_df","98e86bde":"I think i gonna try with all data, or apply IQR range to cut off the outliers","2fc072d1":"we've got some good correlations here.","3de94730":"![seasons](https:\/\/hi-static.z-dn.net\/files\/dfa\/329fad119d9efa1f4cd463536e471f8d.jpg)","d78ad12e":":thinking: all Europeans country\n\n# I think it's a good idea know more about EU seasons\n*I'm from Brazil, it's totaly different here*","d2ea3c04":"> In Brazil, Janueary its summer time","17e64a5b":"This dataset is cleary balanced","8fe4d1a3":"My first think was 'I buy a hat on sunny seasons and a mug on cold season'."}}