{"cell_type":{"dd273e56":"code","66a3aee1":"code","f01b83df":"code","a20cb93e":"code","c49f9b89":"code","e4134808":"code","36592c18":"code","3517e2f7":"code","138d7609":"code","cbb2be96":"code","5b0b2d80":"code","0c607672":"code","050996a7":"code","205c0003":"code","9df760b8":"code","ab0f56fd":"code","3e823cfa":"code","4b8dcb02":"code","216019a2":"code","e0a9dbe6":"code","944ecb7c":"code","6b31e4da":"code","52029935":"code","caeb74ed":"code","cde47e04":"code","44871901":"code","d7bde149":"code","3af2fd0e":"code","177c06ab":"code","d0e77ee0":"code","17a3f39c":"code","79f69746":"code","101b8d58":"code","14f2c179":"code","d4b2f526":"code","c2e7ca86":"code","a8f91a07":"code","fa76041b":"code","47b87f70":"code","e9c6b3d3":"code","dadcacee":"code","63b787a1":"code","fe0ba83d":"code","b9432a52":"code","78e2151c":"code","fd60c443":"code","85b48def":"code","573f94ab":"code","eb94c27c":"code","b56d653e":"code","93932b10":"code","db1ce373":"code","7d999547":"code","724c0f86":"code","1673bebb":"code","6dfd80ff":"code","76c9d2aa":"code","80993933":"code","9a12571f":"code","77b014ad":"code","531bc5d1":"code","f541b22c":"code","adc30a0d":"code","be28ea80":"code","4770c001":"code","609914cb":"code","abb194aa":"code","649e048b":"code","b6b9c6bb":"code","c63a67d3":"code","f1c4c4bc":"code","92dcf982":"code","523ef9ee":"code","fc1af599":"code","a148be46":"code","0f09f128":"code","0de9c66a":"code","8408353c":"code","46ffebc3":"code","649d4cd5":"code","50d7adee":"markdown","0c676210":"markdown","2e4f0816":"markdown","6a81cefb":"markdown","6627426d":"markdown","bf38557e":"markdown","d2fbe558":"markdown","8c3ab7a0":"markdown","423029e8":"markdown","356eaca9":"markdown","fbdaceb3":"markdown","02d21e2e":"markdown","6c3c87e9":"markdown","a456a009":"markdown","7fd961ed":"markdown","9e67ac89":"markdown","fed2b22d":"markdown","029bff36":"markdown","93fa2d04":"markdown","72c08add":"markdown","3295e47e":"markdown","bf605190":"markdown","cce22752":"markdown","4d4f0b1d":"markdown","780cce9b":"markdown","193cc55a":"markdown","780c285b":"markdown","7bfff08c":"markdown"},"source":{"dd273e56":"import os, time, gc, datetime\nfrom datetime import datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\npd.set_option('max_rows', 9999)\npd.set_option('max_columns', 9999)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nstart = time.time()","66a3aee1":"# Memory Reducing\n# https:\/\/www.kaggle.com\/mjbahmani\/reducing-memory-size-for-ieee\n\ndef reduce_mem_usage(df):\n    NAlist = [] # Keeps track of columns that have missing values filled in. \n    for col in df.select_dtypes(exclude=['object', 'category']).columns:\n        if df[col].dtype != object:  # Exclude strings                       \n            # make variables for Int, max and min\n            IsInt = False\n            mx = df[col].max()\n            mn = df[col].min()\n            # Integer does not support NA, therefore, NA needs to be filled\n            if not np.isfinite(df[col]).all(): \n                NAlist.append(col)\n                df[col].fillna(99999,inplace=True)  # Null Data is Filled \"99999\"\n                   \n            # test if column can be converted to an integer\n            asint = df[col].fillna(0).astype(np.int64)\n            result = (df[col] - asint)\n            result = result.sum()\n            if result > -0.01 and result < 0.01:\n                IsInt = True            \n            # Make Integer\/unsigned Integer datatypes\n            if IsInt:\n                if mn >= 0:\n                    if mx < 255:\n                        df[col] = df[col].astype(np.uint8)\n                    elif mx < 65535:\n                        df[col] = df[col].astype(np.uint16)\n                    elif mx < 4294967295:\n                        df[col] = df[col].astype(np.uint32)\n                    else:\n                        df[col] = df[col].astype(np.uint64)\n                else:\n                    if mn > np.iinfo(np.int8).min and mx < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif mn > np.iinfo(np.int16).min and mx < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif mn > np.iinfo(np.int32).min and mx < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif mn > np.iinfo(np.int64).min and mx < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)    \n            # Make float datatypes 32 bit\n            else:\n                df[col] = df[col].astype(np.float32)\n            \n    return df","f01b83df":"# Data Loading\ndef load_data(frac=1.0):\n    dtypes = {}\n\n    cols = ['addr1', 'addr2', 'card1', 'card2', 'card3', 'card4', 'card5', 'card6', 'ProductCD',\n            'id_12', 'id_13', 'id_14', 'id_15', 'id_16', 'id_17', 'id_18', 'id_19', 'id_20',\n            'id_21', 'id_22', 'id_23', 'id_24', 'id_25', 'id_26', 'id_27', 'id_28', 'id_29', 'id_30',\n            'id_31', 'id_32', 'id_33', 'id_34', 'id_35', 'id_36', 'id_37', 'id_38',\n            'M1', 'M2', 'M3', 'M4', 'M5', 'M6', 'M7', 'M8', 'M9',\n            'DeviceType', 'DeviceInfo', 'P_emaildomain', 'R_emaildomain'\n            ]\n\n    dtypes.update({k: 'object' for k in cols})\n    \n    train_tr = pd.read_csv('..\/input\/train_transaction.csv', dtype=dtypes)\n    train_id = pd.read_csv('..\/input\/train_identity.csv', dtype=dtypes)\n    test_tr = pd.read_csv('..\/input\/test_transaction.csv', dtype=dtypes)\n    test_id = pd.read_csv('..\/input\/test_identity.csv', dtype=dtypes)\n    \n    train = pd.merge(train_tr, train_id, on='TransactionID', how='left')\n    test = pd.merge(test_tr, test_id, on='TransactionID', how='left')\n    del train_tr, train_id, test_tr, test_id\n    gc.collect()\n    \n    train = train.sample(frac=frac).reset_index(drop=True)\n    \n    return train, test","a20cb93e":"_train, _test = load_data()","c49f9b89":"_train.head()","e4134808":"_test.head()","36592c18":"print('Train shape: {}  Test shape: {}'.format(_train.shape, _test.shape))","3517e2f7":"null_df_train = pd.DataFrame(_train.isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(20, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:50])\nplt.xticks(rotation=30)\nplt.show()\n\nnull_df_test = pd.DataFrame(_test.isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_test['NULL'] = null_df_test['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(20, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_test[:50])\nplt.xticks(rotation=30)\nplt.show()\n\n# Histogram of NA Ratio per Features\nfig, axes = plt.subplots(ncols=2, nrows=1, figsize=(16, 6), facecolor='w')\nsns.distplot(null_df_train['NULL'], bins=20, kde=True, ax=axes[0])\nsns.distplot(null_df_test['NULL'], bins=20, kde=True, ax=axes[1])\naxes[0].set_title('NA Hist per features - Train Data')\naxes[1].set_title('NA Hist per features - Test Data')\nplt.show()","138d7609":"# # Delete Features which has >75% NA\n# del_cols = null_df_train[null_df_train['NULL'] > 0.75]['index'].tolist()\n# del_cols.extend(null_df_test[null_df_test['NULL'] > 0.75]['index'].tolist())\n# del_cols = list(set(del_cols))\n\n# # print(pd.Series(del_cols))\n\n# _train.drop(del_cols, axis=1, inplace=True)\n# _test.drop(del_cols, axis=1, inplace=True)","cbb2be96":"del null_df_train, null_df_test\ngc.collect()","5b0b2d80":"fig = plt.figure(figsize=(16, 4), facecolor='w')\n\n_ = plt.hist(_train['TransactionDT'], bins=100), plt.hist(_test['TransactionDT'], bins=100)\nplt.legend(['train','test'])\nplt.show()","0c607672":"def prep_date(df):\n    \n    START_DATE = '2017-11-01'\n    \n    # Convert Date (TransactionDT(sec) is a difference from \"2017\/11\/01\")\n    df['date'] = df['TransactionDT'].apply(lambda x: dt.strptime(START_DATE, '%Y-%m-%d') + datetime.timedelta(seconds=x))\n    df['date_str'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d'))\n    \n    # Year, Month, Days, Weekdays, Hour, Minitue\n    df['year'] = df['date'].apply(lambda x: x.year)\n    df['month'] = df['date'].apply(lambda x: x.month)\n    df['day'] = df['date'].apply(lambda x: x.day)\n    df['weekday'] = df['date'].apply(lambda x: x.weekday())\n    df['hour'] = df['date'].apply(lambda x: x.hour)\n    \n    # Set Dtypes\n    df['year'] = df['year'].astype('category')\n    df['month'] = df['month'].astype('category')\n    df['day'] = df['day'].astype('category')\n    df['weekday'] = df['weekday'].astype('category')\n    df['hour'] = df['hour'].astype('category')\n    \n    # Diff Now Time\n    def diff_date(x):\n        s = datetime.datetime(year=2019, month=8, day=25) - x\n        return s.days\n    df['Diff_from_Now'] = df['date'].apply(diff_date)\n    \n    return df\n\n\n_train = prep_date(_train)\n_test = prep_date(_test)","050996a7":"fig = plt.figure(figsize=(16, 4), facecolor='w')\n\n_ = plt.hist(_train['date'], bins=100), plt.hist(_test['date'], bins=100)\nplt.legend(['train','test'])\nplt.show()","205c0003":"# Count isFraud = 0, 1 each year&month\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 4), facecolor='w')\n\ntrain_0 = _train[_train['isFraud'] == 0].reset_index(drop=True)\ntrain_1 = _train[_train['isFraud'] == 1].reset_index(drop=True)\n\na = train_0.groupby(['year', 'month'])['isFraud'].count().reset_index()\nb = train_1.groupby(['year', 'month'])['isFraud'].count().reset_index()\na = pd.merge(a, b, on=['year', 'month'])\nx = ['201711', '201712', '201801', '201802', '201803', '201804', '201805']\naxes[0].bar(x, a['isFraud_x'])\naxes[0].set_title('isFraud = 0')\naxes[1].bar(x, a['isFraud_y'])\naxes[1].set_title('isFraud = 1')\nplt.show()\n\n# Count isFraud = 0, 1 each weekday\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 4), facecolor='w')\n\na = train_0.groupby('weekday')['isFraud'].count().reset_index()\nb = train_1.groupby('weekday')['isFraud'].count().reset_index()\na = pd.merge(a, b, on=['weekday'])\nx = ['Mon', 'Tue', 'Web', 'Thu', 'Fri', 'Sat', 'Sun']\naxes[0].bar(x, a['isFraud_x'])\naxes[0].set_title('isFraud = 0')\naxes[1].bar(x, a['isFraud_y'])\naxes[1].set_title('isFraud = 1')\nplt.show()","9df760b8":"del train_0, train_1, a, b\ngc.collect()","ab0f56fd":"fig = plt.figure(figsize=(14, 4), facecolor='w')\nsns.countplot(x='ProductCD', data=_train, order=['W', 'C', 'R', 'H', 'S'])\nplt.show()","3e823cfa":"fig = plt.figure(figsize=(14, 4), facecolor='w')\nsns.countplot(x='ProductCD', data=_test, order=['W', 'C', 'R', 'H', 'S'])\nplt.show()","4b8dcb02":"# Imbalance Data\nfig = plt.figure(figsize=(12, 4), facecolor='w')\nsns.countplot(_train['isFraud'])\nplt.show()","216019a2":"def plot_hist_matrix(train, num_cols=None, ncols=10, height=2):\n    \n    # Distribution target = 0 or 1\n    if num_cols is None:\n        num_cols = [c for c in train.select_dtypes(exclude=['object']).columns if c not in ['TransactionID', 'isFraud', 'TransactionDT', 'date', \n                                                                                            'year', 'month', 'day', 'weekday', 'hour', 'Diff_from_Now']]\n\n    _train_0 = train[train['isFraud'] == 0].reset_index(drop=False)\n    _train_1 = train[train['isFraud'] == 1].reset_index(drop=False)\n    \n    nrows = int(np.ceil(len(num_cols) \/ ncols))\n\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(24, height * nrows), facecolor='w')\n\n    for feature, ax in zip(num_cols, axes.ravel()):\n        # Set Second Axis\n        ax_2 = ax.twinx()\n        sns.kdeplot(_train_0[feature], color='b', alpha=0.4, shade=True, ax=ax, legend=False)\n        sns.kdeplot(_train_1[feature], color='r', alpha=0.4, shade=True, ax=ax_2, legend=False)\n        ax.set_title(feature)\n        ax.tick_params(labelbottom=False, labelleft=False, labelright=False, labeltop=False)\n        ax_2.tick_params(labelbottom=False, labelleft=False, labelright=False, labeltop=False)\n    plt.tight_layout()\n    plt.show()","e0a9dbe6":"plot_hist_matrix(_train)","944ecb7c":"c_cols = ['C{}'.format(i) for i in range(1, 15, 1)]\nplot_hist_matrix(_train, num_cols=c_cols, ncols=4, height=3)","6b31e4da":"def plot_hist(train, colname):\n    _train_0 = train[train['isFraud'] == 0].reset_index(drop=False)\n    _train_1 = train[train['isFraud'] == 1].reset_index(drop=False)\n    \n    fig = plt.figure(figsize=(12, 4), facecolor='w')\n    ax = sns.kdeplot(_train_0[colname], color='b', alpha=0.4, shade=True)\n    ax_2 = ax.twinx()\n    sns.kdeplot(_train_1[colname], color='r', alpha=0.4, shade=True, ax=ax_2)\n    ax.set_title(colname)\n    plt.show()","52029935":"plot_hist(_train, 'C12')","caeb74ed":"def plot_hist_log(train, colname):\n    _train_0 = train[train['isFraud'] == 0].reset_index(drop=False)\n    _train_1 = train[train['isFraud'] == 1].reset_index(drop=False)  # isFraud=1: 20663\n    \n    fig = plt.figure(figsize=(12, 4), facecolor='w')\n    ax = sns.kdeplot(np.log(_train_0[colname]), color='b', alpha=0.4, shade=True)\n    ax_2 = ax.twinx()\n    sns.kdeplot(np.log(_train_1[colname]), color='r', alpha=0.4, shade=True, ax=ax_2)\n    ax.set_title(colname)\n    plt.show()","cde47e04":"plot_hist_log(_train, 'C12')\nplt.show()","44871901":"corr_table = _train[c_cols].corr()\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.heatmap(corr_table, vmin=0, vmax=1, center=0.5, square=True, cmap='Blues')\nplt.show()","d7bde149":"# PCA\n_c_cols = c_cols + ['isFraud']\n\ntemp_df = _train.copy()\ntemp_df = temp_df[_c_cols]\ntemp_df = temp_df.fillna(99999)\n\npca = PCA(n_components=2)\na = pca.fit_transform(temp_df)\n\ntemp_df_2 = pd.DataFrame(a, columns=['PCA_1', 'PCA_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\ntemp_df = temp_df.sample(frac=0.05)\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='PCA_1', y='PCA_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","3af2fd0e":"# t-SNE\ntemp_df = _train.copy()\ntemp_df = temp_df[_c_cols]\ntemp_df = temp_df.fillna(99999)\n\ntemp_df = temp_df.sample(frac=0.1)\n\ntsne = TSNE(n_components=2, random_state=0)\na = tsne.fit_transform(temp_df[c_cols])\n\ntemp_df_2 = pd.DataFrame(a, columns=['TSNE_1', 'TSNE_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='TSNE_1', y='TSNE_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","177c06ab":"def TimeSeriesPlot(col):\n    fig = plt.figure(figsize=(12, 4), facecolor='w')\n    \n    # Cx values per transaction\n    temp = _train.groupby('date_str')[col].sum() \/ _train.groupby('date_str')['TransactionID'].count()\n    temp_2 = _test.groupby('date_str')[col].sum() \/ _test.groupby('date_str')['TransactionID'].count()\n \n    _ = plt.plot(temp), plt.plot(temp_2)\n    plt.xticks(np.arange(1, len(temp) + len(temp_2)+1, 30), rotation=30)\n    plt.show()","d0e77ee0":"TimeSeriesPlot('C3')","17a3f39c":"temp = _train.groupby('date_str')['C3'].sum() \/ _train.groupby('date_str')['TransactionID'].count()\ntemp.sort_values(ascending=False)[:5]","79f69746":"temp = _test.groupby('date_str')['C3'].sum() \/ _test.groupby('date_str')['TransactionID'].count()\ntemp.sort_values(ascending=False)[:5]","101b8d58":"# Distrubition Card Info (card4, card6)\nfig, axes = plt.subplots(1, 2, figsize=(12, 3), facecolor='w')\na = pd.DataFrame(_train['card4'].value_counts()).reset_index()\nsns.barplot(x='card4', y='index', data=a, ax=axes[0])\na = pd.DataFrame(_train['card6'].value_counts()).reset_index()\nsns.barplot(x='card6', y='index', data=a, ax=axes[1])\nplt.tight_layout()\nplt.show()","14f2c179":"# Groupby card4, card6\nfor card in ['card4', 'card6']:\n    for c in c_cols:\n        temp_0 = _train[_train['isFraud'] == 0].groupby(card)[c].mean().reset_index()\n        temp_1 = _train[_train['isFraud'] == 1].groupby(card)[c].mean().reset_index()\n        temp = pd.merge(temp_0, temp_1, how='outer', on=card)\n        temp = temp.fillna(0)\n\n        fig, axes = plt.subplots(1, 2, figsize=(12, 3), facecolor='w')\n        sns.barplot(x=f'{c}_x', y=card, data=temp, ax=axes[0])\n        sns.barplot(x=f'{c}_y', y=card, data=temp, ax=axes[1])\n        axes[0].set_title(f'{card}_{c} - isFraud=0')\n        axes[1].set_title(f'{card}_{c} - isFraud=1')\n        plt.tight_layout()\n        plt.show()","d4b2f526":"del corr_table, temp, temp_df, temp_df_2\ngc.collect()","c2e7ca86":"fig = plt.figure(figsize=(12, 4), facecolor='w')\n\ntemp = _train.groupby('date_str')['TransactionAmt'].sum()\ntemp_2 = _test.groupby('date_str')['TransactionAmt'].sum()\n\n_ = plt.plot(temp), plt.plot(temp_2)\nplt.xticks(np.arange(1, len(temp) + len(temp_2)+1, 30), rotation=30)\nplt.show()","a8f91a07":"# Display Top5 values (Train)\ntemp.sort_values(ascending=False)[:5]","fa76041b":"# Display Top5 values (Test)\ntemp_2.sort_values(ascending=False)[:5]","47b87f70":"fig = plt.figure(figsize=(18, 6), facecolor='w')\nsns.boxplot(x='isFraud', y='TransactionAmt', data=_train)\nplt.show()","e9c6b3d3":"# Outliner\n# Drop TransactionAmt > 30000 \n_train = _train.query('TransactionAmt < 30000')","dadcacee":"# All Values is not Minus\nlen(_train[_train['TransactionAmt'] <= 0])","63b787a1":"fig = plt.figure(figsize=(18, 6), facecolor='w')\nsns.distplot(_train['TransactionAmt'])\nplt.show()","fe0ba83d":"fig = plt.figure(figsize=(18, 6), facecolor='w')\nsns.distplot(np.log(_train['TransactionAmt']))\nplt.show()","b9432a52":"# Transaction Log Value\n_train['log_TranAmt'] = np.log(_train['TransactionAmt'])\n_test['log_TranAmt'] = np.log(_test['TransactionAmt'])","78e2151c":"del temp, temp_2\ngc.collect()","fd60c443":"d_cols = ['D{}'.format(i) for i in range(1, 16, 1)]\n\nplot_hist_matrix(_train, num_cols=d_cols, ncols=4, height=3)","85b48def":"col_list = d_cols + ['isFraud']\n_train[col_list].head(10)","573f94ab":"# Null Rate\nnull_df_train = pd.DataFrame(_train[d_cols].isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(24, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:100], order=d_cols)\nplt.xticks(rotation=30)\nplt.show()","eb94c27c":"_train[d_cols].describe()\n# D4, D6, D11, D12, D14, D15 have Minus Values\n# D9 values are between 0 and 0.95","b56d653e":"_test[d_cols].describe()\n# Test Data has no minus values","93932b10":"plot_hist(_train, 'D6')","db1ce373":"plot_hist(_train, 'D11')","7d999547":"plot_hist(_train, 'D14')","724c0f86":"corr_table = _train[d_cols].corr()\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.heatmap(corr_table, vmin=0, vmax=1, center=0.5, square=True, cmap='Blues')\nplt.show()\n# D9 is independence\n# D1,D2 are high correlation","1673bebb":"# PCA\n_d_cols = d_cols + ['isFraud']\n\ntemp_df = _train.copy()\ntemp_df = temp_df[_d_cols]\ntemp_df = temp_df.fillna(99999)\n\npca = PCA(n_components=2)\na = pca.fit_transform(temp_df[d_cols])\n\ntemp_df_2 = pd.DataFrame(a, columns=['PCA_1', 'PCA_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='PCA_1', y='PCA_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","6dfd80ff":"# t-SNE\n\ntemp_df = _train.copy()\ntemp_df = temp_df[_d_cols]\ntemp_df = temp_df.fillna(99999)\n\ntemp_df = temp_df.sample(frac=0.1)\n\ntsne = TSNE(n_components=2, random_state=0)\na = tsne.fit_transform(temp_df[d_cols])\n\ntemp_df_2 = pd.DataFrame(a, columns=['TSNE_1', 'TSNE_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='TSNE_1', y='TSNE_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","76c9d2aa":"col_list = d_cols + ['isFraud']\n\ndiff_dcols_df = _train[col_list]\n_d_cols = d_cols.copy()\n_d_cols.remove('D9')\n\nfor d_1 in _d_cols:\n    for d_2 in _d_cols:\n        if d_1 == d_2:\n            continue\n            \n        diff_dcols_df[f'{d_1}-{d_2}'] = diff_dcols_df[d_1] - diff_dcols_df[d_2]\n        ","80993933":"diff_dcols_df.head()","9a12571f":"# PCA\n# only use diff values\n_d_cols = diff_dcols_df.columns[16:].tolist()\n\npca = PCA(n_components=2)\na = pca.fit_transform(diff_dcols_df[_d_cols].fillna(99999))\n\ntemp_df_2 = pd.DataFrame(a, columns=['PCA_1', 'PCA_2'])\ntemp_df_2['isFraud'] = diff_dcols_df['isFraud']\n\ntemp_df_2 = temp_df_2.sample(frac=0.05)\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='PCA_1', y='PCA_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","77b014ad":"# t-SNE\n# only use diff values\n_d_cols = diff_dcols_df.columns[16:].tolist()\n_temp_df = diff_dcols_df.sample(frac=0.1)\n\ntsne = TSNE(n_components=2)\na = tsne.fit_transform(_temp_df[_d_cols].fillna(99999))\n\ntemp_df_2 = pd.DataFrame(a, columns=['TSNE_1', 'TSNE_2'])\ntemp_df_2['isFraud'] = _temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='TSNE_1', y='TSNE_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","531bc5d1":"y = diff_dcols_df['isFraud']\nX = diff_dcols_df.drop('isFraud', axis=1)\n\nX.fillna(-9999, inplace=True)\n\nrf = RandomForestClassifier()\nrf.fit(X, y)\n\nimportance_df = pd.DataFrame({\n    'importance': rf.feature_importances_,\n    'feature': X.columns\n})\n\nfig = plt.figure(figsize=(14, 40), facecolor='w')\nsns.barplot(x='importance', y='feature', data=importance_df.sort_values(by='importance', ascending=False))\nplt.show()\n\n# D1, D8 are High Performance","f541b22c":"del d_cols, _d_cols, col_list, diff_dcols_df, temp_df, temp_df_2, _temp_df, rf, importance_df\ngc.collect()","adc30a0d":"m_cols = ['M{}'.format(i) for i in range(1, 10, 1)]\n_train[m_cols].head()","be28ea80":"# Null Rate\nnull_df_train = pd.DataFrame(_train[m_cols].isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(24, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:100], order=m_cols)\nplt.xticks(rotation=30)\nplt.show()","4770c001":"fig, axes = plt.subplots(ncols=3, nrows=3, figsize=(16, 8), facecolor='w')\n\nfor c, ax in zip(m_cols, axes.ravel()):\n    sns.countplot(x=c, ax=ax, data=_train[_train['isFraud'] == 0])\n    ax.set_title(c)\nplt.tight_layout()\nplt.show()","609914cb":"fig, axes = plt.subplots(ncols=3, nrows=3, figsize=(16, 8), facecolor='w')\n\nfor c, ax in zip(m_cols, axes.ravel()):\n    sns.countplot(x=c, ax=ax, data=_train[_train['isFraud'] == 1])\n    ax.set_title(c)\nplt.tight_layout()\nplt.show()","abb194aa":"del m_cols, null_df_train\ngc.collect()","649e048b":"v_cols = ['V{}'.format(i) for i in range(1, 340, 1)]\n\n_train[v_cols].head()","b6b9c6bb":"# Null Rate\nnull_df_train = pd.DataFrame(_train[v_cols].isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(24, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:100], order=v_cols)\nplt.xticks(rotation=30)\nplt.show()","c63a67d3":"corr_table = _train[v_cols].corr()\n\nfig = plt.figure(figsize=(24, 18), facecolor='w')\nsns.heatmap(corr_table, vmin=0, vmax=1, center=0.5, square=True, cmap='Blues')\nplt.show()","f1c4c4bc":"# PCA\n_v_cols = v_cols + ['isFraud']\n\ntemp_df = _train.copy()\ntemp_df = temp_df[_v_cols]\ntemp_df = temp_df.fillna(99999)\n\npca = PCA(n_components=2)\na = pca.fit_transform(temp_df[v_cols])\n\ntemp_df_2 = pd.DataFrame(a, columns=['PCA_1', 'PCA_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='PCA_1', y='PCA_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","92dcf982":"del v_cols, _v_cols, null_df_train, corr_table, temp_df, temp_df_2\ngc.collect()","523ef9ee":"id_cols_1 = ['id_01', 'id_02', 'id_03', 'id_04', 'id_05', 'id_06', 'id_07', 'id_08', 'id_09', 'id_10', 'id_11']\n\nplot_hist_matrix(_train, num_cols=id_cols_1, ncols=4, height=3)","fc1af599":"_train[id_cols_1].describe()","a148be46":"_test[id_cols_1].describe()","0f09f128":"# Null Rate\nnull_df_train = pd.DataFrame(_train[id_cols_1].isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(24, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:100], order=id_cols_1)\nplt.xticks(rotation=30)\nplt.show()","0de9c66a":"# PCA\n_id_cols_1 = id_cols_1 + ['isFraud']\n\ntemp_df = _train.copy()\ntemp_df = temp_df[_id_cols_1]\ntemp_df = temp_df.fillna(99999)\n\npca = PCA(n_components=2)\na = pca.fit_transform(temp_df[id_cols_1])\n\ntemp_df_2 = pd.DataFrame(a, columns=['PCA_1', 'PCA_2'])\ntemp_df_2['isFraud'] = temp_df['isFraud']\n\nfig = plt.figure(figsize=(12, 6), facecolor='w')\nsns.scatterplot(x='PCA_1', y='PCA_2', hue='isFraud', data=temp_df_2, alpha=0.4)\nplt.legend()\nplt.show()","8408353c":"del id_cols_1, temp_df, temp_df_2, null_df_train\ngc.collect()","46ffebc3":"id_cols_2 = ['id_{}'.format(i) for i in range(12, 39, 1)]\n\nncols = 5\nheight = 3\nnrows = int(np.ceil(len(id_cols_2) \/ ncols))\n\ntrain_0 = _train[_train['isFraud'] == 0]\ntrain_1 = _train[_train['isFraud'] == 1]\n\nfig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(24, height * nrows), facecolor='w')\nfor feature, ax in zip(id_cols_2, axes.ravel()):\n    sns.countplot(x=feature, hue='isFraud', ax=ax, data=pd.concat([train_0.sample(20000), train_1.sample(20000)], axis=0))\n    ax.set_title(feature)\n    \nplt.tight_layout()\nplt.show()","649d4cd5":"# Null Rate\nnull_df_train = pd.DataFrame(_train[id_cols_2].isnull().sum(), columns=['NULL']).sort_values(by='NULL', ascending=False).reset_index()\nnull_df_train['NULL'] = null_df_train['NULL'] \/ len(_train)\nfig = plt.figure(figsize=(24, 4), facecolor='w')\nsns.barplot(x='index', y='NULL', data=null_df_train[:100], order=id_cols_2)\nplt.xticks(rotation=30)\nplt.show()","50d7adee":"Correlation","0c676210":"Correlation","2e4f0816":"---\n### Numeral Features","6a81cefb":"Dimension Reduction","6627426d":"---\n### NA","bf38557e":"This Kernel uses \"2017\/11\/01\" as START DATE from above Kernel","d2fbe558":"There is Strange Chenge around 2018\/10\/20","8c3ab7a0":"---\n### id_12 - id_38","423029e8":"---\n### Vxxx\nVxxx: Vesta engineered rich features, including ranking, counting, and other entity relations.","356eaca9":"#### Dimenstion Reduction","fbdaceb3":"V9: Add \"Cx\"\n\nV13: Add \"Dx\"\n\nV15: Add \"Vxxx\", \"id_x\"","02d21e2e":"Feature Importance","6c3c87e9":"---\n### ProductCD","a456a009":"#### TimeSeries","7fd961ed":"---\n### Dx\nD1-D15: timedelta, such as days between previous transaction, etc.","9e67ac89":"---\n## Data Loading","fed2b22d":"---\n### TransactionAmt","029bff36":"Dimension Reduction","93fa2d04":"---\n### Transaction DT","72c08add":"---\n### Mx\nM1-M9: match, such as names on card and address, etc.","3295e47e":"#### Correlation","bf605190":"Reference\n\nhttps:\/\/www.kaggle.com\/kyakovlev\/ieee-gb-2-make-amount-useful-again\n\nhttps:\/\/www.kaggle.com\/terrypham\/transactiondt-timeframe-deduction","cce22752":"---\n### id1 - id11","4d4f0b1d":"Reference\n\nhttps:\/\/www.kaggle.com\/terrypham\/transactiondt-timeframe-deduction","780cce9b":"Dimension Reduction","193cc55a":"---\n### Cx\nC1-C14: counting, such as how many addresses are found to be associated with the payment card, etc. The actual meaning is masked.\n\nBlue is \"isFraud=0\"  Red is \"isFraud=1\"\n","780c285b":"Diff Each Dx Values","7bfff08c":"## EDA - IEEE CIS Fraud Detection"}}