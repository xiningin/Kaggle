{"cell_type":{"4ccae7a2":"code","5552bed1":"code","7b0f3868":"code","da0786dd":"code","039df96b":"code","03bea6ee":"code","fde2f81c":"code","56c490d4":"code","c39e212e":"code","b19806e3":"code","bd76cfc2":"code","c98ff3dd":"code","dd045c8e":"code","c0d552fe":"code","f823cb0d":"code","d3b094e0":"code","ff254dcf":"code","3aa18ebf":"code","ab4b86b2":"code","0dde944d":"code","074b36a9":"code","52b205f6":"code","7fc56c42":"code","840813d9":"code","5e57868c":"code","87dad736":"code","508e3b33":"code","bcd960a3":"code","5ab40119":"code","51fb8643":"code","e225e5c9":"code","81e60c72":"code","1f454bab":"code","6022e42e":"code","ce283cb2":"code","06846c06":"code","c3ff82b2":"code","f560985b":"code","1fcc54d8":"code","ac41a6f1":"code","b3735474":"code","cccf3477":"code","506558b8":"code","99ad8b44":"code","73bce4d2":"code","98ba4bc4":"code","77e9b35e":"code","8b01eb83":"code","ad61c91a":"code","5129daff":"code","6cda6182":"code","2b927b18":"code","d6ef29fa":"code","42151822":"code","2cc33b03":"code","6447e63e":"code","99ed238f":"code","d56e99ac":"code","9fd5afd9":"code","cd8b536e":"code","9f3c8c6a":"code","7d97be71":"code","121d34da":"code","5900190f":"code","6092c4c7":"code","55c43235":"code","83db4799":"code","12c9df10":"code","9f7c52c0":"code","dbf3057d":"code","7c48c7d1":"code","c546bdd7":"code","e3333147":"code","5a7fb9bd":"code","703e2e5c":"code","7c452d43":"code","29545152":"code","09885314":"code","1e91a405":"code","e956b3e8":"markdown","d72cd250":"markdown","e747292c":"markdown","0e558612":"markdown","eb165d3f":"markdown","66442d4c":"markdown","2c03b9c2":"markdown","510794cc":"markdown","c3cd0e6e":"markdown","f4ee72f0":"markdown"},"source":{"4ccae7a2":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","5552bed1":"train_original=df.copy()\ntest_original=df1.copy()","7b0f3868":"df.head(10)","da0786dd":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","039df96b":"df.shape","03bea6ee":"df1.shape","fde2f81c":"#GET SOME STATISTICS","56c490d4":"df.describe()","c39e212e":"df.info()","b19806e3":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","bd76cfc2":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","c98ff3dd":"df1.info()","dd045c8e":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","c0d552fe":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","f823cb0d":"#GENDER\n\nsns.countplot(df['Gender'])","d3b094e0":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","ff254dcf":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","3aa18ebf":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","ab4b86b2":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","0dde944d":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","074b36a9":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","52b205f6":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","7fc56c42":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","840813d9":"#MARRIED\n\nsns.countplot(df.Married)","5e57868c":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","87dad736":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","508e3b33":"#EDUCATION\n\nsns.countplot(df.Education)","bcd960a3":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","5ab40119":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","51fb8643":"df.boxplot(column='ApplicantIncome')","e225e5c9":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","81e60c72":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","1f454bab":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","6022e42e":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","ce283cb2":"df.apply(lambda x: sum(x.isnull()),axis=0)","06846c06":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","c3ff82b2":"df[\"Self_Employed\"].value_counts()","f560985b":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","1fcc54d8":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","ac41a6f1":"df.head()","b3735474":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","cccf3477":"df.head()","506558b8":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","99ad8b44":"df1.head()","73bce4d2":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","98ba4bc4":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","77e9b35e":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","8b01eb83":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","ad61c91a":"df.isnull().sum()","5129daff":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","6cda6182":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","2b927b18":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","d6ef29fa":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","42151822":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","2cc33b03":"\n\ndf1.isnull().sum()","6447e63e":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","99ed238f":"sns.displot(df[\"Total_Income\"])","d56e99ac":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","9fd5afd9":"sns.displot(df1[\"Total_Income_log\"])","cd8b536e":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","9f3c8c6a":"sns.displot(df[\"EMI\"])","7d97be71":"sns.displot(df[\"EMI\"])","121d34da":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","5900190f":"sns.displot(df[\"Balance Income\"])","6092c4c7":"sns.displot(df[\"Balance Income\"])","55c43235":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","83db4799":"#LOOK AT THE DATA TYPES\n\ndf.dtypes","12c9df10":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","9f7c52c0":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","dbf3057d":"#LOOK AT THE DATA TYPES\ndf1.dtypes","7c48c7d1":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS\n#SAVE THE TARGET VARIABLE IN SEPARATE\n\nx=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","c546bdd7":"x=pd.get_dummies(x)\ndf=pd.get_dummies(df)","e3333147":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","5a7fb9bd":"#USE GRADIENT BOOSTING CLASSIFIER\n\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbk=GradientBoostingClassifier()\ngbk.fit(x_train,y_train)\npred_gbc=gbk.predict(x_test)\nacc_gbc=accuracy_score(y_test,pred_gbc)*100\nacc_gbc\n\n","703e2e5c":"pred_test=gbk.predict(df1)","7c452d43":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","29545152":"loancsv","09885314":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","1e91a405":"loancsv","e956b3e8":"# READING THE DATA","d72cd250":"#  GRADIENT BOOSTING CLASSIFIER","e747292c":"# DROPPING THE VARIABLES","0e558612":"# REPLACING THE CATEGORICAL VALUES","eb165d3f":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","66442d4c":"# FEATURE ENGINEERING","2c03b9c2":"# IMPORTING PACKAGES","510794cc":"# EXPLORING AND PREPARING THE DATA","c3cd0e6e":"# FILLING MISSING VALUES IN TEST DATA","f4ee72f0":"# FILLING MISSING VALUES\n"}}