{"cell_type":{"d76f50fa":"code","61f5c348":"code","900f9985":"code","099d94bc":"code","bde99f2a":"code","9a0829f5":"code","ef7bd036":"code","4a2bf787":"code","5d4a750a":"code","deeea5dc":"code","f74d3eda":"code","4e339fb9":"code","0985c25c":"code","77b794ed":"code","824d1592":"code","19b07aa8":"markdown","e1264d0a":"markdown","4b36bf3f":"markdown","bb3951f0":"markdown","229acdea":"markdown","7a7a0a70":"markdown","92ecf5c9":"markdown","39396ee2":"markdown","550bca34":"markdown","72e848ad":"markdown","d02a3553":"markdown","7225fcee":"markdown","7f9ccc75":"markdown","3c15ffdf":"markdown"},"source":{"d76f50fa":"#importing all important packages\nimport numpy as np #linear algebra\nimport pandas as pd #data processing\nimport matplotlib.pyplot as plt #data visualisation\nimport seaborn as sns #data visualisation\n%matplotlib inline","61f5c348":"data = pd.read_csv('..\/input\/ramen-ratings\/ramen-ratings.csv')\ndata.head(50)","900f9985":"data.tail(50)\n","099d94bc":"data.isna().sum()","bde99f2a":"data = data.dropna(subset=['Style'])\nprint(data[\"Style\"].isna().sum())","9a0829f5":"for s in data['Stars']:\n    try:\n        s = float(s)\n    except:\n        print(s)","ef7bd036":"data = data[data['Stars'] != 'Unrated']\nprint(data[data['Stars'] == 'Unrated']['Stars'].sum()) #make sure if there are no 'Unrated'","4a2bf787":"data['Style'].unique()","5d4a750a":"data['Style'].value_counts()","deeea5dc":"data['Country'].value_counts()","f74d3eda":"#\u0e23\u0e32\u0e40\u0e21\u0e47\u0e07\u0e21\u0e35\u0e01\u0e35\u0e48\u0e22\u0e35\u0e48\u0e2b\u0e49\u0e2d\u0e43\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\nprint(len(data['Brand'].unique()))","4e339fb9":"brands = list(data['Brand'].unique())\ncounter = [0.0]*355\n\nbrands_cnt = dict(zip(brands, counter)) #\u0e19\u0e31\u0e1a\u0e04\u0e30\u0e41\u0e19\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e41\u0e25\u0e30\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e04\u0e48\u0e32\n\nfor brand in brands:\n    brands_data = data[data['Brand'] == brand]\n    for star in brands_data['Stars']:\n        brands_cnt[brand] += float(star) #\u0e19\u0e31\u0e1a\u0e04\u0e30\u0e41\u0e19\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\n    brands_cnt[brand] \/= len(brands_data) #\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22","0985c25c":"top50ratings = [] #\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e0a\u0e37\u0e48\u0e2d\u0e41\u0e1a\u0e23\u0e19\u0e14\u0e4c\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e2d\u0e31\u0e19\u0e14\u0e31\u0e1a\u0e42\u0e14\u0e22\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\nfor key, values in brands_cnt.items():\n    top50ratings.append([key,values])\n\n# 50 \u0e2d\u0e31\u0e19\u0e14\u0e31\u0e1a\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e41\u0e1a\u0e23\u0e19\u0e14\u0e4c\u0e23\u0e32\u0e40\u0e21\u0e47\u0e07\ntop50ratings = sorted(top50ratings, key = lambda x : x[1], reverse = True) #\u0e40\u0e23\u0e35\u0e22\u0e07\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e08\u0e32\u0e01\u0e21\u0e32\u0e01\u0e44\u0e1b\u0e2b\u0e32\u0e19\u0e49\u0e2d\u0e22\ntop50ratings\nfor i in range(50):\n    print('#{:<3}{:25} {}'.format(i+1, top50ratings[i][0], round(top50ratings[i][1],2)))","77b794ed":"sns.set(style = 'darkgrid')\nf, ax = plt.subplots(1,1,figsize = (15,5))\nsns.countplot(x = 'Country', data = data)\nplt.xticks(rotation=90)\n\nplt.show()","824d1592":"labels = 'Pack', 'Bowl', 'Cup' , 'Tray', 'Box' #We can't include 'Bar' and 'Can' because they only appear once in our data.\nsize = [1531, 481, 450, 108, 6]\n\nf, ax = plt.subplots(1,1, figsize= (10,10))\n\nax.pie(size, labels = labels, autopct = '%1.2f%%', startangle = 180)\nax.axis('equal')\nax.set_title(\"Style\", size = 20)\n\nplt.show()","19b07aa8":"\u0e41\u0e01\u0e49\u0e44\u0e02\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e02\u0e2d\u0e07\u0e14\u0e32\u0e27","e1264d0a":"**3.Wrangle, prepare, cleanse the data**\n\n","4b36bf3f":"\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e02\u0e2d\u0e07\u0e14\u0e32\u0e27\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48","bb3951f0":"\u0e40\u0e0a\u0e47\u0e04\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e02\u0e32\u0e14\u0e2b\u0e32\u0e22\u0e44\u0e1b\u0e02\u0e2d\u0e07\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c","229acdea":"**4. Analyze, identify patterns, and explore the data**","7a7a0a70":"\u0e41\u0e2a\u0e14\u0e0750\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e23\u0e01\n","92ecf5c9":"\u0e41\u0e01\u0e49\u0e44\u0e02\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e08\u0e30\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e19\u0e33\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e44\u0e14\u0e49","39396ee2":"\u0e41\u0e2a\u0e14\u0e07\u0e43\u0e2b\u0e49\u0e40\u0e2b\u0e47\u0e19\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28","550bca34":"**5.Model, predict and solve the problem**","72e848ad":"\u0e41\u0e2a\u0e14\u0e0750\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22","d02a3553":"**1. Question or problem definition**\n     \n     \n\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e19\u0e35\u0e49\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e47\u0e04\u0e40\u0e23\u0e15\u0e15\u0e34\u0e49\u0e07\u0e02\u0e2d\u0e07\u0e41\u0e1a\u0e23\u0e19\u0e14\u0e4c\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e23\u0e32\u0e40\u0e21\u0e07 \u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28 \u0e41\u0e25\u0e30\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e02\u0e2d\u0e07\u0e20\u0e32\u0e0a\u0e19\u0e30\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e1a\u0e23\u0e23\u0e08\u0e38 \u0e41\u0e2a\u0e14\u0e07\u0e08\u0e33\u0e19\u0e27\u0e19\u0e14\u0e32\u0e27\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1a\u0e48\u0e07\u0e1a\u0e2d\u0e01\u0e16\u0e36\u0e07\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e\u0e02\u0e2d\u0e07\u0e23\u0e32\u0e40\u0e21\u0e47\u0e07\u0e23\u0e30\u0e14\u0e31\u0e1a1\u0e16\u0e36\u0e075\u0e14\u0e32\u0e27 \u0e23\u0e27\u0e21\u0e44\u0e1b\u0e16\u0e36\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e02\u0e2d\u0e07top 50\n     \n     \n \n\n    \n\n","7225fcee":"**2. Acquire training and testing data**","7f9ccc75":"\u0e14\u0e39\u0e2a\u0e44\u0e15\u0e25\u0e4c\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e43\u0e19\u0e04\u0e2d\u0e25\u0e31\u0e21\u0e19\u0e4c","3c15ffdf":"\u0e19\u0e31\u0e1a\u0e2a\u0e44\u0e15\u0e25\u0e4c\u0e23\u0e32\u0e40\u0e21\u0e47\u0e07\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19"}}