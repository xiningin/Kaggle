{"cell_type":{"a535eebf":"code","cec1d96c":"code","938d851a":"code","12c3b495":"code","650380f0":"code","8f13d8ab":"code","2532b7a7":"code","2aa19c5f":"code","d3dadeb2":"code","b33f6a75":"markdown"},"source":{"a535eebf":"#importing basic libraries\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing.image import load_img, img_to_array\nimport matplotlib.pyplot as plt\nimport os","cec1d96c":"##setting base path to data\nbase_path='..\/input\/american-sign-language-thresholded\/signs\/'\nprint(os.listdir(base_path))","938d851a":"##plotting data\nimg1=load_img(base_path+'0\/110.jpg')\nimg2=load_img(base_path+'1\/110.jpg')\nplt.figure(1, figsize=(20,20))\np=1\nfor i in range(0,7):\n    for j in range(0,4):\n        ind=j+i*4\n        if(ind <26):\n            im=load_img(base_path+str(ind)+\"\/700.jpg\")\n            plt.subplot(7,4,ind+1)\n            plt.imshow(im)\nplt.show()","12c3b495":"##creating data generators\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(validation_split=0.1,\n                             rescale=1.\/255,\n                            rotation_range=5,\n                            width_shift_range=.05,\n                            height_shift_range=.05,\n                            fill_mode='nearest')\nbatch_size=256\npic_size=256\ntrain_generator = datagen.flow_from_directory(\n    base_path, \n    subset='training',\n    target_size=(pic_size,pic_size),\n    color_mode=\"grayscale\",\n    batch_size=batch_size,\n    class_mode='categorical',\n    shuffle=True\n)\n\nval_generator = datagen.flow_from_directory(\n    base_path,\n    subset='validation',\n    target_size=(pic_size,pic_size),\n    color_mode=\"grayscale\",\n    batch_size=batch_size,\n    class_mode='categorical',\n    shuffle=True\n)","650380f0":"#creating cnn model\nfrom keras.layers import Dense, Input, Dropout, GlobalAveragePooling2D, Flatten, Conv2D, BatchNormalization, Activation, MaxPooling2D\nfrom keras.models import Model, Sequential\nfrom keras.optimizers import Adam\n\n# number of possible label values\nnb_classes = 26\n\n# Initialising the CNN\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (2,2), input_shape=(256,256, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (4,4), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(4, 4), strides=(4, 4), padding='same'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(256, (5,5), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5), strides=(5, 5), padding='same'))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(nb_classes, activation='softmax'))\n\nopt = Adam(lr= 0.00156 )\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","8f13d8ab":"##training and saving weights\nepochs = 3\nfrom keras.callbacks import ModelCheckpoint\n\ncheckpoint = ModelCheckpoint(\"model_weights.h5\", monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')\ncallbacks_list = [checkpoint]\n\nhistory = model.fit_generator(generator=train_generator,\n                                steps_per_epoch=train_generator.n\/\/train_generator.batch_size,\n                                epochs=epochs,\n                                validation_data = val_generator,\n                                validation_steps = val_generator.n\/\/val_generator.batch_size,\n                                callbacks=callbacks_list\n                                )","2532b7a7":"##plotting train and val acc and losses\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(20,10))\nplt.subplot(1, 2, 1)\nplt.suptitle('Optimizer : Adam', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend(loc='upper right')\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.show()","2aa19c5f":"## saving model.json\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)","d3dadeb2":"##getting classNames\nclass_names = val_generator.class_indices.keys()\nprint(class_names)\nclasses=['0', '1', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '2', '20', '21', '22', '23', '24', '25', '3', '4', '5', '6', '7', '8', '9']","b33f6a75":"## "}}