{"cell_type":{"e5d53b86":"code","6fa7f35d":"code","f84ab4d1":"code","bd736595":"code","68e99bdf":"code","be6ae573":"code","e0b0b76a":"code","78f29087":"code","6f39bb4e":"code","251795b6":"code","d705093f":"code","d25ce433":"code","798fbad8":"code","ed8707c8":"code","c2fd9ef0":"code","9e45e621":"code","67236abe":"code","feea59a2":"code","94ac1d5e":"code","1bce6438":"code","dd55e34d":"code","2e590ca5":"code","51f3cca9":"code","09135431":"code","c3b1d2ef":"code","bdaec636":"code","4c4129bc":"code","0ccdcb58":"code","0893ca89":"code","4f4b9b2f":"code","d0639ae6":"code","97fd5152":"code","6b40b15f":"code","addfcf2a":"code","9b4a5d30":"code","be7a71ae":"code","7e4cd667":"code","c7a45c85":"code","00fd6a37":"code","f1fdc76b":"code","295fb2af":"code","d66d20e4":"code","fd7a4053":"code","1ea67306":"code","a9891173":"code","a753bbc1":"code","782be834":"code","47b7951c":"code","e8adbc93":"code","6e6a289a":"code","4230e49c":"code","dfe7b0b5":"code","cfc21260":"code","adef4793":"code","3da8960d":"code","d51a345b":"code","de8fad67":"code","d80b5762":"code","448d92f4":"code","b8bd47dc":"code","8e169f47":"code","85eb36c6":"code","d263e168":"code","9538e5b5":"code","df882f1d":"code","f9cd20ba":"code","e4d17b58":"code","a058180d":"code","68f19e3f":"code","7e3c367f":"code","95904890":"code","a8be34a5":"code","6abaf33e":"code","9f0ca662":"code","64d20179":"code","78294866":"code","b22a2260":"code","bf33285f":"code","c99267c9":"markdown","95c894eb":"markdown","e0cf048f":"markdown","aa117eef":"markdown","43e0d06c":"markdown","34207997":"markdown","faa020a4":"markdown","5d93df51":"markdown","ef212496":"markdown","62c4e31c":"markdown","6ea41845":"markdown","3986dc2f":"markdown","0893f00e":"markdown","0d4e50b3":"markdown","a4768c61":"markdown","784c8395":"markdown","4dd81698":"markdown","d57f33c9":"markdown","9711552a":"markdown","0a00d523":"markdown","202f1d75":"markdown","4cf4681b":"markdown","371ddff7":"markdown","260aa2a0":"markdown","371fa8bb":"markdown","68f3857c":"markdown","4d96e609":"markdown","8837b95b":"markdown","6bc51375":"markdown","3a48dee8":"markdown","f56c14c3":"markdown","57c85449":"markdown","0681460f":"markdown","80658b90":"markdown","53a6b71d":"markdown","96dd10dd":"markdown","16dc4d1e":"markdown","1ec87cd5":"markdown","dc616855":"markdown","47de8bdf":"markdown","0f69017b":"markdown","6e82eff2":"markdown","c7117841":"markdown","9f437694":"markdown","e6daa408":"markdown","d0b90146":"markdown","d4c069fe":"markdown","0e43849e":"markdown","c9237ebd":"markdown","3ee01961":"markdown","b698af03":"markdown","ce0ddd0d":"markdown","66cb621d":"markdown","bb1d1238":"markdown","22069163":"markdown","9adeeb8f":"markdown","eadb93e2":"markdown","1ea82f62":"markdown","37f47d7d":"markdown","1e7f090c":"markdown","9193c482":"markdown","69a1bebc":"markdown","671095c3":"markdown","ec44251a":"markdown"},"source":{"e5d53b86":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Ignorar warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport keras\nfrom keras.layers import Dense, Dropout      # Crear capas\nfrom keras.models import Input, Model\n\n# Cargar la data\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf = df_train.append(df_test , ignore_index = True)\n\n# Inspecciones\ndf_train.shape, df_test.shape, df_train.columns.values","6fa7f35d":"df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean()","f84ab4d1":"df['Pclass'].isnull().sum(axis=0)","bd736595":"df.Name.head(10)","68e99bdf":"df['Title'] = df.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())\n\n# Comparando la cantidad de personas por cada titulo\ndf['Title'].value_counts()","be6ae573":"df['Title'] = df['Title'].replace('Mlle', 'Miss')\ndf['Title'] = df['Title'].replace(['Mme','Lady','Ms'], 'Mrs')\ndf.Title.loc[ (df.Title !=  'Master') & (df.Title !=  'Mr') & (df.Title !=  'Miss') \n             & (df.Title !=  'Mrs')] = 'Others'\n\n# Comparando Title y Survived\ndf[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","e0b0b76a":"# Viendo la cantidad de personas que hay en cada Titulo\ndf['Title'].value_counts()","78f29087":"df = pd.concat([df, pd.get_dummies(df['Title'])], axis=1).drop(labels=['Name'], axis=1)","6f39bb4e":"df.Sex.isnull().sum(axis=0)","251795b6":"df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","d705093f":"df.Sex = df.Sex.map({'male':0, 'female':1})","d25ce433":"df.Age.isnull().sum(axis=0)","798fbad8":"df.SibSp.isnull().sum(axis=0), df.Parch.isnull().sum(axis=0)","ed8707c8":"# Para crear una Family se coloca la columna con los datos de los hermanos\/esposos y padres\/hijos de la persona\ndf['Family'] = df['SibSp'] + df['Parch'] + 1\n\n# Comparamos Family y Survived \ndf[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()","c2fd9ef0":"df['Family'].value_counts()","9e45e621":"df.Family = df.Family.map(lambda x: 0 if x > 4 else x)\ndf[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()","67236abe":"df['Family'].value_counts()","feea59a2":"df.Ticket.isnull().sum(axis=0)","94ac1d5e":"df.Ticket.head(20)","1bce6438":"df.Ticket = df.Ticket.map(lambda x: x[0])\n\n# Comparando Ticket y Survived\ndf[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","dd55e34d":"df['Ticket'].value_counts()","2e590ca5":"df[['Ticket', 'Fare']].groupby(['Ticket'], as_index=False).mean()","51f3cca9":"df[['Ticket', 'Pclass']].groupby(['Ticket'], as_index=False).mean()","09135431":"df.Fare.isnull().sum(axis=0)","c3b1d2ef":"df.Ticket[df.Fare.isnull()]","bdaec636":"df.Pclass[df.Fare.isnull()]","4c4129bc":"df.Cabin[df.Fare.isnull()]","0ccdcb58":"df.Embarked[df.Fare.isnull()]","0893ca89":"sns.boxplot('Pclass','Fare',data=df)\nplt.ylim(0, 300) # ignorando la data cuya tarifa > 500\nplt.show()","4f4b9b2f":"df[['Pclass', 'Fare']].groupby(['Pclass']).mean()","d0639ae6":"df[['Pclass', 'Fare']].groupby(['Pclass']).std() \/ df[['Pclass', 'Fare']].groupby(['Pclass']).mean()","97fd5152":"sns.boxplot('Ticket','Fare',data=df)\nplt.ylim(0, 300) # ignorar la data con la tarifa mayor a 500\nplt.show()","6b40b15f":"df[['Ticket', 'Fare']].groupby(['Ticket']).mean()","addfcf2a":"df[['Ticket', 'Fare']].groupby(['Ticket']).std() \/  df[['Ticket', 'Fare']].groupby(['Ticket']).mean()","9b4a5d30":"sns.boxplot('Embarked','Fare',data=df)\nplt.ylim(0, 300) # ignoramos la data cuya tarifa sea mayor que 500\nplt.show()","be7a71ae":"df[['Embarked', 'Fare']].groupby(['Embarked']).mean()","7e4cd667":"df[['Embarked', 'Fare']].groupby(['Embarked']).std() \/  df[['Embarked', 'Fare']].groupby(['Embarked']).mean()","c7a45c85":"guess_Fare = df.Fare.loc[ (df.Ticket == '3') & (df.Pclass == 3) & (df.Embarked == 'S')].median()\ndf.Fare.fillna(guess_Fare , inplace=True)\n\n# Vemos los valores de la media de la Tarifa para las personas que murieron y sobrevivieron\ndf[['Fare', 'Survived']].groupby(['Survived'],as_index=False).mean()","00fd6a37":"grid = sns.FacetGrid(df, hue='Survived', height=4, aspect=1.5)\ngrid.map(plt.hist, 'Fare', alpha=.5, bins=range(0,210,10))\ngrid.add_legend()\nplt.show()","f1fdc76b":"df[['Fare', 'Survived']].groupby(['Fare'],as_index=False).mean().plot.scatter('Fare','Survived')\nplt.show()","295fb2af":"df['Fare-bin'] = pd.qcut(df.Fare,5,labels=[1,2,3,4,5]).astype(int)\n\n# Comparamos Fare-bin y Survived\ndf[['Fare-bin', 'Survived']].groupby(['Fare-bin'], as_index=False).mean()","d66d20e4":"df.Cabin.isnull().sum(axis=0)","fd7a4053":"df = df.drop(labels=['Cabin'], axis=1)","1ea67306":"df.Embarked.isnull().sum(axis=0)","a9891173":"df.describe(include=['O'])","a753bbc1":"df.Embarked.fillna('S' , inplace=True )","782be834":"df[['Embarked', 'Survived','Pclass','Fare', 'Age', 'Sex']].groupby(['Embarked'], as_index=False).mean()","47b7951c":"df = df.drop(labels='Embarked', axis=1)","e8adbc93":"grid = sns.FacetGrid(df, col='Title', height=3, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","6e6a289a":"df[['Title', 'Age']].groupby(['Title']).mean()","4230e49c":"df[['Title', 'Age']].groupby(['Title']).std()","dfe7b0b5":"grid = sns.FacetGrid(df, col='Fare-bin', height=3, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","cfc21260":"df[['Fare-bin', 'Age']].groupby(['Fare-bin']).mean()","adef4793":"df[['Fare-bin', 'Age']].groupby(['Fare-bin']).std()","3da8960d":"grid = sns.FacetGrid(df, col='SibSp', col_wrap=4, height=3.0, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","d51a345b":"df[['SibSp', 'Age']].groupby(['SibSp']).mean()","de8fad67":"df[['SibSp', 'Age']].groupby(['SibSp']).std()","d80b5762":"grid = sns.FacetGrid(df, col='Parch', col_wrap=4, height=3.0, aspect=0.8, sharey=False)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=range(0,105,5))\nplt.show()","448d92f4":"df[['Parch', 'Age']].groupby(['Parch']).mean()","b8bd47dc":"df[['Parch', 'Age']].groupby(['Parch']).std()","8e169f47":"df_sub = df[['Age','Master','Miss','Mr','Mrs','Others','Fare-bin','SibSp']]\n\nX_train  = df_sub.dropna().drop('Age', axis=1)\ny_train  = df['Age'].dropna()\nX_test = df_sub.loc[np.isnan(df.Age)].drop('Age', axis=1)\n\nregressor = RandomForestRegressor(n_estimators = 300)\nregressor.fit(X_train, y_train)\ny_pred = np.round(regressor.predict(X_test),1)\ndf.Age.loc[df.Age.isnull()] = y_pred\n\ndf.Age.isnull().sum(axis=0) # ya no mas null","85eb36c6":"bins = [ 0, 4, 12, 18, 30, 50, 65, 100] # Esto es algo arbitrario\nage_index = (1,2,3,4,5,6,7) #('baby','child','teenager','young','mid-age','over-50','senior')\ndf['Age-bin'] = pd.cut(df.Age, bins, labels=age_index).astype(int)\n\ndf[['Age-bin', 'Survived']].groupby(['Age-bin'],as_index=False).mean()","d263e168":"df[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","9538e5b5":"df['Ticket'].value_counts()","df882f1d":"df['Ticket'] = df['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')\n\n# Comparamos nuevamente\ndf[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","f9cd20ba":"df = pd.get_dummies(df,columns=['Ticket'])","e4d17b58":"df = df.drop(labels=['SibSp','Parch','Age','Fare','Title'], axis=1)\ny_train = df[0:891]['Survived'].values\nX_train = df[0:891].drop(['Survived','PassengerId'], axis=1).values\nX_test  = df[891:].drop(['Survived','PassengerId'], axis=1).values","a058180d":"precisiones_globales=[]\nepochs = 200\ndef graf_model(train_history):\n    f = plt.figure(figsize=(15,10))\n    ax = f.add_subplot(121)\n    ax2 = f.add_subplot(122)\n    # summarize history for accuracy\n    ax.plot(train_history.history['binary_accuracy'])\n    ax.plot(train_history.history['val_binary_accuracy'])\n    ax.set_title('model accuracy')\n    ax.set_ylabel('accuracy')\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'test'], loc='upper left')\n    # summarize history for loss\n    ax2.plot(train_history.history['loss'])\n    ax2.plot(train_history.history['val_loss'])\n    ax2.set_title('model loss')\n    ax2.set_ylabel('loss')\n    ax2.set_xlabel('epoch')\n    ax2.legend(['train', 'test'], loc='upper left')\n    plt.show()\ndef precision(model, registrar=False):\n    y_pred = model.predict(X_train)\n    train_auc = roc_auc_score(y_train, y_pred)\n    y_pred = model.predict(val_dfX)\n    val_auc = roc_auc_score(val_dfY, y_pred)\n    print('Train AUC: ', train_auc)\n    print('Vali AUC: ', val_auc)\n    if registrar:\n        precisiones_globales.append([train_auc,val_auc])","68f19e3f":"# Normalizamos los inputs\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","7e3c367f":"print(\"Entrenamiento: \",X_train.shape)\nprint(\"Test : \",X_test.shape)","95904890":"X_train,val_dfX,y_train, val_dfY = train_test_split(X_train,y_train , test_size=0.20, stratify=y_train)\nprint(\"Entrenamiento: \",X_train.shape)\nprint(\"Validacion : \",val_dfX.shape)","a8be34a5":"def func_model():   \n    inp = Input(shape=(17,))\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(inp)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(x)\n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='glorot_normal')(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n    return model\nmodel = func_model()\nprint(model.summary())","6abaf33e":"train_history = model.fit(X_train, y_train, batch_size = 32, epochs = epochs, validation_data=(val_dfX, val_dfY))","9f0ca662":"graf_model(train_history)\nprecision(model, True)","64d20179":"def func_model_reg():   \n    inp = Input(shape=(17,))\n    x=Dropout(0.1)(inp)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(inp)\n    x=Dropout(0.3)(x)\n    x=Dense(8, activation=\"relu\", kernel_initializer='glorot_normal')(x)\n    x=Dropout(0.3)(x)\n    x=Dense(1, activation=\"sigmoid\", kernel_initializer='glorot_normal')(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['binary_accuracy'])\n    return model","78294866":"modelR = func_model_reg()\nprint(modelR.summary())\nfinalTrain = modelR.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(val_dfX, val_dfY), verbose=0)","b22a2260":"graf_model(finalTrain)\nprecision(modelR)","bf33285f":"y_pred = model.predict(X_test)\ny_final = (y_pred > 0.5).astype(int).reshape(X_test.shape[0])\n\noutput = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived': y_final})\noutput.to_csv('prediction.csv', index=False)","c99267c9":"Vemos la relacion entre la Tarifa y Survided usando un scatter plot","95c894eb":"Como S es la mas comun llenamos los null con este valor","e0cf048f":"Combinamos todos los datos con Familia de 4 o mas integrantes en una sola categoria (Familia 0), ya que las personas en familias grandes tienen una tasa de supervivencia aun mas baja que las que estan solas","aa117eef":"Comparamos Embarque con Tarifa","43e0d06c":"Visualizamos la distribucion de la Tarifa por cada Embarque","34207997":"Comparamos Title y Age","faa020a4":"Vemos la cantidad de personas en cada Family","5d93df51":"Los de la primera clase fueron los que mas se salvaron","ef212496":"Usando boxplot para visualizar la distribucion de la tarifa en cada Pclass","62c4e31c":"Comparamos Embarked y Survived agregando tambien algunas otras caracteristicas","6ea41845":"Dividimos la desviacion estandar por el mean","3986dc2f":"Visualizamos la distribucion de la tarifa de las personas que sobrevivieron y de las que murieron","0893f00e":"Comparando Pclass y Survived","0d4e50b3":"# Prediccion de los datos","a4768c61":"Comparamos Sex y Survived","784c8395":"Verificamos si algun embarque es null","4dd81698":"Entrenando la Red Neuronal","d57f33c9":"Comparamos Pclass y Fare","9711552a":"Vemos la media de Age por cada Parch","0a00d523":"Como hay tantos valores nulos, no tomamos en cuenta esta columna ya que si sacamos un promedio con los pocos datos que hay puede afectar el resultado","202f1d75":"Vemos que los Mr son los que mas murieron y las Mrs las que mas se salvaron","4cf4681b":"Dividimos la desviacion estandar por la media. Una relacion mas baja significa una distribucion mas apretada en la tarifa en cada clase","371ddff7":"Verificamos si alguna cabina es null","260aa2a0":"Visualizamos en otra grafica la distribucion de la tarifa por cada ticket","371fa8bb":"Dividimos la Tarifa en 5 intervalos con la misma cantidad de personas ","68f3857c":"Imprimimos los primeros 10 nombres","4d96e609":"Verificamos si hay null en la columna Edad","8837b95b":"Comparamos SibSP y Age","6bc51375":"Regularizacion del Modelo","3a48dee8":"Comparamos Fare-bin y Age","f56c14c3":"# Diccionario de los datos","57c85449":"El titulo Mister es el mas popular, seguido de Miss, Mrs, y Master","0681460f":"Sobrevivieron mas mujeres que hombres","80658b90":"Para poder ver cual es ese null lo podemos identificar por el ticket,la cabina, el puerto de embarque o la clase","53a6b71d":"Vemos la media de Age por cada SibSp","96dd10dd":"Vemos la media de Age por cada Fare-bin","16dc4d1e":"# Graficas","1ec87cd5":"One hot encoding","dc616855":"Imprimimos la cantidad de personas que hay por titulo","47de8bdf":"Vemos la desviacion estandar de A\u00f1os por cada Fare-bin","0f69017b":"Inicializando la Red Neuronal","6e82eff2":"Vemos la media de Age por cada Title","c7117841":"Las personas con tickets que comienzan por 9 fueron los que mas tienen probabilidad de sobrevivir","9f437694":"Vemos si hay null en la columna Ticket","e6daa408":"Verificamos si hay null en la columna Tarifa","d0b90146":"Verificamos si hay informacion nula","d4c069fe":"Hacemos One Hot Encoding con las columnas","0e43849e":"Verificamos si hay null en la columna de Sexo","c9237ebd":"S es la mas comun","3ee01961":"Dividimos la desviacion estandar por la media","b698af03":"Calculamos la desviacion estandar de Age por cada Parch","ce0ddd0d":"# Estudio de datos","66cb621d":"Creamos una nueva caracteristica 'Family' que consiste en unir hermanos o esposos y padres o hijos -> SibSp y Parch","bb1d1238":"* **Survival** Sobreviviente 0 = No, 1 = Si\n* **Pclass** Clase del ticket 1 = 1ra, 2 = 2da, 3 = 3ra\n* **Sex** Sexo\n* **Age** Edad \n* **SibSp** # de hermanos \/ parejas abordo del Titanic \n* **Parch** # of padres \/ hijos abordo del Titanic. Como algunos ni\u00f1os viajaron con su ni\u00f1era se le asigno el Parch = 0\n* **Ticket** numero del ticket \n* **Fare** Tarifa del pasajero\n* **Cabin** Numero de cabina \n* **Embarked** Puerto de Embarque C = Cherbourg, Q = Queenstown, S = Southampton","22069163":"Vemos la desviacion estandar de A\u00f1os con cada Titulo","9adeeb8f":"Vemos la desviacion estandar de A\u00f1o por cada SibSp","eadb93e2":"# Importando las librerias","1ea82f62":"Como vimos antes comparamos Ticket con Tarifa","37f47d7d":"Mapeamos los generos. Hombre -> 0, Mujer -> 1","1e7f090c":"Notamos que en lugar de utilizar Title, deberiamos usar su correspondiente dummy variables","9193c482":"Verificamos si un SibSp es null","69a1bebc":"# Creacion del modelo","671095c3":"Comparamos Parch y Age","ec44251a":"Vemos la cantidad de personas por cada tipo de Ticket"}}