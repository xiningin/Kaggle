{"cell_type":{"1d65089d":"code","f299ef6f":"code","d1dffcdd":"code","108d728a":"code","5bfed912":"code","09fec55e":"code","072724d2":"code","c5fb40f8":"code","fc081b24":"code","02dd8931":"code","08e8399a":"code","73d581b3":"code","4b160eee":"code","3f2ab484":"code","25db4538":"code","92f031ac":"code","1a90422e":"code","09bbb9c1":"code","2fa49c4d":"markdown","ab0d25cb":"markdown","21e165d8":"markdown","40039924":"markdown","67b4a394":"markdown","4eed242f":"markdown","5eaed658":"markdown","a63e2659":"markdown","29c28198":"markdown","3ded7b02":"markdown","d201dfb4":"markdown","cfd0a77d":"markdown","7fa0e3a8":"markdown","fd09edb3":"markdown","6ac4d39a":"markdown","bb74a4de":"markdown","78645b4a":"markdown","36250998":"markdown","6b4b1224":"markdown","4461b56e":"markdown","4910746d":"markdown","2bc1943e":"markdown","e0a488b0":"markdown","4f7e1407":"markdown","c2e4492f":"markdown","5f1d8c71":"markdown","01aa6e71":"markdown","ac68fa99":"markdown","71df2bb5":"markdown","87203344":"markdown","ce02a27e":"markdown","68b8c480":"markdown","69610493":"markdown","51b8b7a8":"markdown","be63b260":"markdown","b6682a1a":"markdown","d8b964da":"markdown"},"source":{"1d65089d":"from IPython.display import display, HTML\nimport pandas as pd\nimport numpy as np\nimport math\n\n# Using plotly + cufflinks in offline mode\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ncf.set_config_file(offline=True)","f299ef6f":"df = pd.read_csv('..\/input\/restaurants.txt')\ndf = df.groupby(by=\"Country\").count()[\"Name\"]\ndf = df.sort_values(ascending=False)\n\ndf.iplot(kind='bar')","d1dffcdd":"df1 = pd.read_csv('..\/input\/pokemon.csv')\ndf1 = df1.drop('#', axis=1)","108d728a":"df2 = pd.read_csv('..\/input\/fifa18.csv')\ndf2 = df2.drop(['Photo', 'Flag', 'Club Logo'], axis=1)","5bfed912":"df = df1.drop(['Name','Type 2','Legendary','Generation'],axis=1)\ndf = df.groupby('Type 1').mean()\ndf['Type 1'] = df.index\n\ndf.iplot(kind='barh', y='Attack', x='Type 1', colorscale='rdylbu', title='Attack Strength')","09fec55e":"df = df1.drop(['Total', 'Attack', 'Defense', 'Speed', 'HP', 'Type 2', 'Generation', 'Legendary'], axis=1)\ndf = df.groupby('Type 1').mean()\n\ndf.iplot(kind='bar', title='Special Attack and Defense Scores')","072724d2":"df = df1[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']]\ndf.iplot(kind='box')","c5fb40f8":"df2['Age'].iplot(kind='hist', opacity=0.75, color='rgb(12, 128, 128)', title='Age Distribtution', yTitle='Count', xTitle='Age', bargap = 0.20)","fc081b24":"df2['Overall'].iplot(kind='hist', opacity=0.75, color='#007959', title='Overall Rating Distribution', yTitle='Count', xTitle='Overall Rating', bargap = 0.20)","02dd8931":"df_spain = pd.DataFrame(df2.loc[df2['Nationality'] == 'Spain']['Overall']).reset_index(drop=True)\ndf_spain = df_spain.rename(columns={'Overall': 'Spain'})\ndf_brazil = pd.DataFrame(df2.loc[df2['Nationality'] == 'Brazil']['Overall']).reset_index(drop=True)\ndf_brazil = df_brazil.rename(columns={'Overall': 'Brazil'})\ndf_england = pd.DataFrame(df2.loc[df2['Nationality'] == 'England']['Overall']).reset_index(drop=True)\ndf_england = df_england.rename(columns={'Overall': 'England'})\nframes = [df_spain, df_brazil, df_england]\ndf = pd.concat(frames, sort=False)\n\ncolors = ['rgba(171, 50, 96, 0.6)', '#051e3e', 'rgba(80, 26, 80, 0.8)']\n\ndf.iplot(\n    kind='hist',\n    barmode='overlay',\n    xTitle='Rating',\n    yTitle='Count',\n    title='Distribution of Overall Rating by Country',\n    opacity=0.75,\n    color=colors,\n    theme='white')\n","08e8399a":"df_russia = pd.DataFrame(df2.loc[df2['Nationality'] == 'Russia']['Finishing']).reset_index(drop=True)\ndf_russia = df_russia.rename(columns={'Finishing': 'Russia'})\ndf_france = pd.DataFrame(df2.loc[df2['Nationality'] == 'France']['Finishing']).reset_index(drop=True)\ndf_france = df_france.rename(columns={'Finishing': 'France'})\ndf_argentina = pd.DataFrame(df2.loc[df2['Nationality'] == 'Argentina']['Finishing']).reset_index(drop=True)\ndf_argentina = df_argentina.rename(columns={'Finishing': 'Argentina'})\ndf_germany = pd.DataFrame(df2.loc[df2['Nationality'] == 'Germany']['Finishing']).reset_index(drop=True)\ndf_germany = df_germany.rename(columns={'Finishing': 'Germany'})\n\nframes = [df_russia, df_france, df_argentina, df_germany]\ndf = pd.concat(frames, sort=False)\n\ndf.iplot(kind='box',\n        yTitle='Rating',\n        title='Descriptive Stats of Finishing Ability by Country')\n","73d581b3":"df = df2.nlargest(100, 'Finishing')\ndf['Wage'] = df['Wage'] \/ 10000\n\ndf[['Composure', 'Finishing', 'Name', 'Wage']].iplot(\n    y='Finishing', mode='markers', x='Composure', colorscale='rdylbu',\n    xTitle='Composure', yTitle='Finishing',\n    text='Name', title='Player Finshing vs Composure', size=df['Wage'])","4b160eee":"df = df2\ndf = df.nlargest(100, 'Overall')\ndf['Rank'] = ''\ndf['Rank'] = np.arange(1, len(df_) + 1)\n\ncolors = ['rgba(16, 112, 2, 0.8)', 'rgba(80, 26, 80, 0.8)']\n\ndf[['Rank', 'Wage', 'Value', 'Name']].iplot(\n    y='Wage', mode='lines+markers', secondary_y = 'Value',\n    secondary_y_title='Value', xTitle='Rank', yTitle='Wage',\n    text='Name', title='Wage and Rating by Rank', color=colors, theme='white')","3f2ab484":"df = df2.nlargest(500, 'Value')\ndf = df.rename(columns={'Overall': 'Actual Rating'})\ncolors=['#007959', '#FFA505']\n\ndf[['Value', 'Actual Rating', 'Potential', 'Name']].iplot(\n    kind='scatter',\n    mode='markers',\n    x='Value',\n    y='Actual Rating',\n    secondary_y = 'Potential',\n    color=colors,\n    text='Name',\n    name=names,\n    xTitle='Market Valuation',\n    yTitle='Ratings',\n    title='Actual vs Potential Rating by Player Value')","25db4538":"df = df2[['Age', 'Value', 'Wage', 'Potential','Acceleration','Shot Power', 'Sprint Speed', 'Finishing', 'Stamina', 'Strength', 'Vision', 'Ball Control']]\n\ndf.corr().iplot(kind='heatmap',colorscale='ylgn')","92f031ac":"df = df2.nlargest(100, 'Overall')\ndf = pd.DataFrame(df.groupby('Club').size())\ndf.columns = ['Count']\ndf['Club'] = df.index\n\n\ndf.iplot(kind='pie', labels='Club', values='Count', title='Number of Players by Club', hoverinfo=\"label+percent+name\", hole=0.3, theme='white')","1a90422e":"df = df2.groupby(\"Nationality\").size().reset_index(name=\"Count\")\n\ndf.iplot(\n    kind='choropleth', locations='Nationality',  z ='Count',\n    text = 'Nationality', locationmode = 'country names', theme='white',\n    colorscale='oranges', title = \"Nationalities of FIFA 18 Players\",\n    projection = dict(\n            type = 'natural earth'\n        ))","09bbb9c1":"df = df2.nlargest(50, 'Potential')\ndf.iplot(x='Composure', y='Positioning', z='Finishing', kind='scatter3d', xTitle='Composure', yTitle='Positioning',\n         zTitle='Finishing', theme='pearl', text= 'Name',\n         categories='Club', title='Intersection between Composure, Positioning and Finishing Ability')","2fa49c4d":"I have imported download_plotlyjs, init_notebook_mode, plot and iplot from plotly.offline and the .go_offline() method to allow us to generate interactive visualizations in Kyso's jupyterlab environment offline.","ab0d25cb":"***","21e165d8":"We have a simple list of the countries with the world's best restaurants. The magazine Restaraunt released its [Worlds best restaraunts 2018 list](https:\/\/www.theworlds50best.com\/list\/1-50-winners) at the end of the year. The list is obviously super subjective, but an interesting exercise all the same.\n\nSo let's read in the dataset and plot it using plotly's cufflinks, a library for easy interactive Pandas charting with Plotly. Cufflinks binds the power of plotly with the flexibility of pandas for easy plotting. ","40039924":"Run `cf.colors.scales()` to see the available colorscales for cufflinks.","67b4a394":"Pretty easy, right? This plot allows us to click on the elements in the legend to hide and display context which is pretty neat. Move the cursor to the top right of the plot to observe the various features of the plot. We can also use the zoom feature of specific areas of the plot.\n\nWe simply use the `.iplot()` method and specify the kind of chart we want to generate with the dataset.","4eed242f":"Ok, time for our FIFA data! The histogram is a go-to plot for graphing a distribution. \n\nWhat's the distribution of all the players' age in the game?","5eaed658":"### A Demonstration - The Advantage of Cufflinks","a63e2659":"Ok, let's break the data down a little to compare player stats across countries:","29c28198":"Ok, so we've generated a simple bar chart - now let's read in other datasets and have a test some other cufflinks-generated plots. For this tutorial, we have 2 different datasets:\n\nFirst up, it's pokemon data from Kaggle's [Pokemon with Stats](https:\/\/www.kaggle.com\/abcsds\/pokemon#Pokemon.csv), read in as df1.\n\nSecond, FIFA 18 data from Kaggle's [FIFA 18 Updated Dataset](https:\/\/www.kaggle.com\/piyushgandhi811\/fifa-18-updated-dataset) as df2.","3ded7b02":"### 3D Plots","d201dfb4":"Spanish and Brazilean players clearly dominate the upper quartile, but to be fair, FIFA 18 includes more lower league players in England in comparison to other countries. Disclaimer: I happen to be Irish & so took particular delight in this graph, while also acknowledging Ireland's dismal performance at international level, if and when we even qualify!\ud83d\ude00\n\nLet's step it up a notch & segment the dataset by top finishers, so that we can look at the attributes of the game's forwards and strikers. First, let's generate a box-plot for descriptive stats on the games' finishers by country.","cfd0a77d":"Let's run a few more bar-chart examples to visualize the strength differences between different Pokemon types.","7fa0e3a8":"##### <font color=grey>How to make great-looking, fully-interactive plots with a single line of Python<\/font>","fd09edb3":"### Scatterplots ","6ac4d39a":"All European clubs - continental poachers!","bb74a4de":"And by their overall player rating:","78645b4a":"Unsurprisingly, those two big red bubbles in the upper right-hand corner represent Ronaldo and Messi.\n\nNow, does a player's market value and wage justify his ranking in FIFA 18's ratings? Let's find out!","36250998":"## Data Visualization: An Intro to Plotly's Cufflinks","6b4b1224":"Data visualization is an art as well as a science. I always keep exploring how to make my visualizations more interesting and informative. One of the jobs of a data scientist is to tell a story with the data at their disposal, and you really want to make the data jump out at the reader, to make your visualizations as understandable as possible. \n\nAnother one of our main tasks is data manipulation. Today the main tool I use for that is Pandas (Python). What if I tell you that you can build some beautiful and interactive charts for the web right from your Pandas dataframes? Well, you can! We can use Plotly for that. Fortunately, this is a great time for Python plotting, and after exploring the options, a clear winner\u200a\u2014\u200ain terms of ease-of-use, documentation, and functionality\u200a\u2014\u200ais the [plotly Python library](https:\/\/plot.ly\/python\/). In this article, we\u2019ll dive right into plotly, learning how to make better plots in less time\u200a\u2014\u200aoften with one line of code.\n\nIf you are unfamiliar with plotly itself, I drew up a brief beginner's guide a while back, available [here](https:\/\/kyso.io\/KyleOS\/plotly-intro). Some of the plots I generated in that post are re-created here - so it'll be interesting for you to see how cufflinks simplifies plotly's (already surprisingly simple)syntax when working with pandas.","4461b56e":"### Geographic Plotting - Choropleth","4910746d":"To visualize the correlations between numerical values, in this case the various stats of FIFA 18 players, we calculate the correlations and then make a heatmap:","2bc1943e":"Let's find out what percentage of the game's top 100 players are playing for which clubs:","e0a488b0":"I hope you liked this short intro to cufflinks. It is a pretty awesome tool for quick-fire EDA on any dataframe. I reckon it is the best plotting library if you're working with python, not only for it's ease of use for you, but also in terms of bringing data to life for the reader.\n\n\nFor more information, check out plotly's [documentation](https:\/\/plot.ly\/ipython-notebooks\/cufflinks\/).","4f7e1407":"And finally, a cool 3D-plot of the intersection between player composure, positioning and finishing ability:","c2e4492f":"### Bar Charts","5f1d8c71":"The scatterplot is found at the heart of most analyses - it allows us to see the evolution of a variable over time or the relationship between two (or more) variables.\n\n\nLet's look at the top 100 finishers in the game. Creating a bubble chart, where our y-values represent the players' finishing score, x-values their Composure and the players' wages are represented by the marker size.","01aa6e71":"## More Advanced Plots","ac68fa99":"Now we\u2019ll get into a few plots that you probably won\u2019t use all that often, but which can be quite impressive.","71df2bb5":"### Plotly - Brief Overview","87203344":"Argentina just about steals the show when it comes to prowess in front of goal.","ce02a27e":"Ok, now let's get a distribution of the players' actual and potential overall rating as a function of their market value.","68b8c480":"### Pie Chart","69610493":"### Distributions - Histograms and Boxplots","51b8b7a8":"The plotly python package is an open-source library built on plotly.js which in turn is built on d3.js. We\u2019ll be using a wrapper on plotly called cufflinks, which is designed to work with Pandas dataframes. All the work in this article was done in a Jupyter Notebook with plotly + cufflinks running in offline mode. Actually, the article you're reading right now is a rendered notebook. First things first, let's import the libraries we'll be needing for this post:","be63b260":"With plotly you can all plot geographical data. Now, while not as effective as geo-spatial plotting with [folium](https:\/\/github.com\/python-visualization\/folium) a leaflet.js wrapper for python that generates html interactive maps, pandas & cufflinks works just fine for our purposes. Let's get a sense of the distribution of pro players by their nationality:","b6682a1a":"The benefits of interactivity are that we can explore and subset the data as we like. There\u2019s a lot of information in a boxplot, and without the ability to see the numbers, we\u2019ll miss most of it! Generating a box plot to demonstrate the shape of the distribution of each stat:","d8b964da":"### Heatmap"}}