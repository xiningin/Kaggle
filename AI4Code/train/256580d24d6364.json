{"cell_type":{"8c1a44f9":"code","598a2d5b":"code","d6ae8d57":"code","3b08582a":"code","696af20e":"code","7fa4f67b":"code","aef4b8c3":"code","89ec0bfd":"markdown","0a1c9dce":"markdown","80b58787":"markdown","6ab98ff2":"markdown","146eef17":"markdown","f34ea565":"markdown"},"source":{"8c1a44f9":"# I need the parameter = Beta\n# also Want to Know Ro:Reproductive number","598a2d5b":"import scipy.integrate as spi\nimport numpy as np\nimport pylab as pl\n\nbeta =  0.1934 # S ->I \uac10\uc5fc\uc728 = beta \ub97c \uad6c\ud558\uc9c0 \ubabb\ud574\uc11c \ub17c\ubb38\uc5d0 \ub098\uc628 beta \uac12 \ucc38\uc870 ( 2020.02.10 \uc911\uad6d\ub17c\ubb38\ubc1c\ud45c)\n#\uc6b0\ub9ac\ub098\ub77c\ub3c4 \uc911\uad6d\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c 2\ucc28 \uc9c0\uc5ed\uac10\uc5fc\uc774 \uc2dc\uc791\ub418\uace0 \uc804\uc5fc\ub825\uc774 2\/18 \ub2f9\uc2dc \ub9e4\uc6b0 \ub192\uc558\ub358\uac83\uc73c\ub85c \ubcf4\uc5ec \ub17c\ubb38\uc758 beta \ub3c4\uc785.\n\ngamma =  1\/14 # I ->R \ud68c\ubcf5\uc728 = \ud3c9\uade0 \ud68c\ubcf5\uae30\uac04\uc758 \uc5ed\uc218\nt_inc = 1.0 \nt_end = 150.0\n\n# 2\/18 31\ubc88\ud655\uc9c4\uc790 \ub098\uc628\ub0a0 \uae30\uc900\uc73c\ub85c \ucd08\uae30 SIR \ubaa8\ub378 \ub9cc\ub4e6.\nS0  = 9772 ; I0  = 31;R0 = 2\n\nN = S0 + I0 + R0 \nS0  = 9772 \/N  # susceptible hosts\nI0  = 31 \/N    # infectious hosts\nR0 = 2 \/N      # recovered hosts\n\nInput = (S0, I0, 0.0)\n\nInput","d6ae8d57":"def simple_SIR(INT, t):\n  '''The main set of equation'''\n  Y=np.zeros((3))\n  X = INT      #  S0,   I0 \n  Y[0] = -beta * X[0] * X[1]\n  Y[1] = beta*X[0]*X[1]  - gamma * X[1]\n  Y[2] = gamma * X[1]\n  return Y # for spicy.odeint\n\nt_start =0.0 ; \nt_range = np.arange(t_start, t_end + t_inc, t_inc)\nSIR= spi.odeint(simple_SIR, Input, t_range)\n\npl.figure(figsize=(15,8))\npl.plot(SIR[:, 0], '-g', label='Susceptibles')\npl.plot(SIR[:, 2], '-k', label='Recovereds')\npl.plot(SIR[:, 1], '-r', label='Infectious')\npl.legend(loc=0)\npl.title('Prediction of Simple nCOV-19 SIR model')\npl.xlabel('Time(day)')\npl.ylabel('individuals')\npl.show()","3b08582a":"beta = 0.1934 # S ->I \uac10\uc5fc\uc728\ngamma= 1\/14 # I ->R \ud68c\ubcf5\uc728 = \ud68c\ubcf5\uae30\uac04\uc758 \uc5ed\uc218\n\nnu = mu = 1\/(70*365) # \uc790\uc5f0\uc0ac\ub9dd\uc728 \ubc18\uc601\n\nt_inc =1.0 ; t_end =150.0\n'''\n# Initial conditions\npop= 51780579 # \ucd1d\uc778\uad6c\uc218\ntest = 136707\ntest_ing = 28414\nnegative_tested = 102965 ; NT =negative_tested\nprint('positive_tested',test_ing + NT) # I0\uc81c\uc678\ub41c \uc804\uccb4 test \ubc1b\uc740 \uc218\n\nI0 = 5328 \/test  # 3\/3 \uae30\uc900 :\ud655\uc9c4\uc790\nS0 = ( test -I0 )\/test # 3\/3 \uae30\uc900 :\uc591\uc131\ud310\uc815+\uc74c\uc131\ud310\uc815+\uac80\uc0ac\uc911\uc778 \uc0ac\ub78c\uc218( \ucd1d\uac80\uc0ac\uc790 ) - \ud655\uc9c4\uc790'''\n\n# 2\/18 31\ubc88\ud655\uc9c4\uc790 \ub098\uc628\ub0a0 \uae30\uc900\uc73c\ub85c \ucd08\uae30 SIR \ubaa8\ub378 \ub9cc\ub4e6.\nS0  = 9772 ; I0  = 31;R0 = 2\n\nN = S0 + I0 + R0 \nS0  = 9772 \/N  # susceptible hosts\nI0  = 31 \/N    # infectious hosts\nR0 = 2 \/N      # recovered hosts\nInput = (S0, I0, 0.0)\n\nInput","696af20e":"def simple_SIR(INT, t):\n  '''The main set of equation'''\n  Y=np.zeros((3))\n  X = INT      #  S0,   I0 \n  Y[0] = -beta * X[0] * X[1] - mu * X[0]\n  Y[1] = beta*X[0]*X[1]  - gamma * X[1] - mu * X[1]\n  Y[2] = gamma * X[1] - mu * X[2]                   # \uc790\uc5f0\uc0ac\ub9dd\uc790 \uc81c\uc678 (\uc704\uc640 \uc2dd\uc774 \uc870\uae08 \ubcc0\ud615\ub428)\n  return Y # for spicy.odeint\n\nt_start =0.0 ; \nt_range = np.arange(t_start, t_end + t_inc, t_inc)\nSIR= spi.odeint(simple_SIR, Input, t_range)\n\npl.figure(figsize=(15,8))\npl.plot(SIR[:, 0], '-g', label='Susceptibles')\npl.plot(SIR[:, 2], '-k', label='Recovereds')\npl.plot(SIR[:, 1], '-r', label='Infectious')\npl.legend(loc=0)\npl.title('Prediction of Simple nCOV-19 SIR model')\npl.xlabel('Time(day)')\npl.ylabel('individuals')\npl.show()","7fa4f67b":"import scipy.integrate\nimport numpy\nimport matplotlib.pyplot as plt\n\n# Initial conditions\n# \uc778\uad6c\uc218 51780579\nS0 = 9772 # :\uc591\uc131\ud310\uc815+\uac80\uc0ac\uc911+\uc74c\uc131\ud310\uc815\nE0 = 818  # :\uac80\uc0ac\uc911\nI0 = 31   #  :\ud655\uc9c4\uc790\nR0 = 2    #  :\uc644\uce58\uc790 + \uc0ac\ub9dd\uc790(0)\n\n\n# Time vector\nt = numpy.linspace(0,100,100)\n\nN = S0 + I0 + R0 # \ubaa8\uc9d1\ub2e8\n\nS0_ = S0\/N\nE0 =  E0\/N\nI0 = I0\/N\nR0 = R0\/N\n\nprint(S0_)# \uc591\uc131\ud310\uc815 \ud655\uc9c4\uc790 + \uc74c\uc131\ud310\uc815 \uaca9\ub9ac\ud574\uc9c0\uc790\uc218 \ube44\uc728 proporion\n\n'''\nRo = 0.5 # 1\uc778\ub2f9 \uc804\ud30c\uc728 1\uc6d420\uc77c \ubcf4\uace0\ub41c \ud55c\uad6d\ucf54\ub85c\ub098\ubc14\uc774\ub7ec\uc2a4 \uc5ed\ud559\uc870\uc0ac \ub17c\ubb38\uc5d0 \ub098\uc628 \uc218\uce58)\nprint('\ub17c\ubb38\uc5d0 \ubcf4\uace0\ub41c Ro \ud3c9\uade0',Ro)\nTo = 336 # 14*24 \ud68c\ubcf5\uae30\uac04 2\uc8fc  *  24\uc2dc\uac04\nbeta = (Ro\/To) + (Ro\/(To*S0))   # Ro \uc774\uc6a9\ud574\uc11c beta \uad6c\ud558\ub294 \ub17c\ubb38\uc218\uc2dd\nprint('\\n\ub17c\ubb38 \uc218\uc2dd\uc73c\ub85c \uad6c\ud55c \uac10\uc5fc\uc728 beta =',beta) \n\ub17c\ubb38 \uc218\uc2dd\uc73c\ub85c \uad6c\ud55c \uac10\uc5fc\uc728 beta = 0.0014882475196382277\n1\uc6d4 \ucd08\uae30\uc5d0 \uc804\uc5fc\ubcd1\uc608\uce21\ubaa8\ub378\uacfc \ud604\uc7ac \ud604\ud669\uc774 \ub9ce\uc774 \ub2ec\ub77c\uc838\uc11c \uc0ac\uc6a9\ud560\uc218 \uc5c6\uc74c. \uadf8\ub2f9\uc2dc Ro, beta  \ubaa8\ub450 \uc791\uc740\uac12.\n'''\nbeta = 0.1934 # \uc911\uad6d\ub17c\ubb38\uc5d0 \ub098\uc628 beta \uac12\nramda = 1\/14\nsigma = 0.25\n\n\nInput = (S0_, E0 , I0)\n\ndef SEIR(INT, t):\n  '''The main set of equation'''\n  Y=np.zeros((3))\n  X = INT      #  S0,   I0 \n  Y[0] = mu -beta * X[0] * X[2] - mu *X[0]\n  Y[1] = beta*X[0]*X[2]  - sigma * X[1] - mu * X[1]\n  Y[2] = sigma * X[1] - gamma * X[2] - mu * X[2] #(\uc790\uc5f0\uc0ac\ub9dd\uc790 \uc81c\uc678)\n  return Y # for spicy.odeint\n  \n  \nt_start =0.0 ; t_end = 150 ; t_inc = 1.0\nt_range = np.arange(t_start, t_end + t_inc, t_inc)\nSEIR= spi.odeint(SEIR, Input, t_range)\n\nRec =1. - (SEIR[:,0]+ SEIR[:,1]+ SEIR[:,2])\n\n\npl.figure(figsize=(15,10))\npl.subplot(311)\npl.plot(SEIR[:,0], '-g', label='Susceptibles');pl.legend(loc=0)\npl.title('Prediction of nCOV-19 SEIR model')\npl.xlabel('Time(days)') # \uad6d\ub0b4 \uc804\uc5fc\ubcd1\uc758 \ucd94\uc138\uac00 \ud558\ub8e8\ud558\ub8e8 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0.. \uc77c\uc8fc\uc77c\ub2e8\uc704\ubcf4\ub2e4\ub294 1\uc77c\ub2e8\uc704\ub85c \ubcf4\ub294\uac8c \ub9de\ub294\ub4ef..\npl.ylabel('Susceptibles')\n\npl.subplot(312)\npl.plot(SEIR[:,1], '-b', label='Exposed')\npl.plot(SEIR[:,2], '-r', label='Infectious');pl.legend(loc=0)\npl.xlabel('Time(days)')\npl.ylabel('Infectious')\n\npl.subplot(313)\npl.plot(Rec, '-k', label='Recovereds')\npl.xlabel('Time(days)')\npl.legend(loc=0)\npl.ylabel('Recovereds')\npl.show()\n\n","aef4b8c3":"\n# 2\/18 \uae30\uc900 \ud655\uc9c4\uc790\uc218\ub85c \uadf8\ub838\ub358 SIR \ubaa8\ub378\uacfc \ubaa8\uc2b5\uc774 \uc720\uc0ac. \uadf8\ub2f9\uc2dc 20\uc77c \uc9c0\ub09c \uc2dc\uc810\uc73c\ub85c \ubcf4\uc5ec\uc9d0.\n#  3\/3 \uae30\uc900 \ud55c\uad6d\ub0b4 \uc804\uc5fc\ubcd1 \uc804\ud30c\ub418\uc11c \ud655\uc9c4\uc790\uac00 5\ucc9c\uba85\uc744 \ub118\uc74c\n\n\n# Initial conditions\n# pop= 51780579 # \ucd1d\uc778\uad6c\uc218\ntest = 136707\ntest_ing = 28414\nnegative_tested = 102965 ; NT =negative_tested\nprint('positive_tested',test_ing + NT) # I0\uc81c\uc678\ub41c \uc804\uccb4 test \ubc1b\uc740 \uc218\n\n\nS0 = test \nE0 = test_ing\nI0 = 5328\nR0 = 41\n\n\n# Time vector\nt = numpy.linspace(0,100,100)\n\nN = S0 + I0 + R0 # \ubaa8\uc9d1\ub2e8\n\nS0_ = S0\/N\nI0 = I0\/N\nR0 = R0\/N\n\nbeta= 0.1934\n\nramda = 1\/14\ngamma = 0.25\n\nprint('\uc911\uad6d\ub17c\ubb38 beta ', beta)  \n\n\n\n# ODEs \uc804\uc5fc\ubcd1\uc608\uce21\ubaa8\ub378\uc5d0\uc11c \uac00\uc7a5 \uc804\ud1b5\uc801\uc778 SIR \ubaa8\ub378\uc744 \uc815\uc758\ud568\ndef SIR_model(y, t, beta, ramma):\n    S, I, R = y\n    \n    dS_dt = -beta*S*I\n    dI_dt = beta*S*I - ramma*I\n    dR_dt = ramma*I\n    \n    return([dS_dt,dI_dt,dR_dt])\n# Result\nsolution = scipy.integrate.odeint(SIR_model, [S0_,I0,R0], t, args=(beta, ramda))\nsolution = numpy.array(solution)\n\n# plot result\nplt.figure(figsize=(10,6))\nplt.plot(t, solution[:, 0], label=\"S(t)\")\nplt.plot(t, solution[:, 1], label=\"I(t)\")\nplt.plot(t, solution[:, 2], label=\"R(t)\")\nplt.grid()\nplt.legend()\nplt.xlabel(\"Time\")\nplt.ylabel(\"Proportion\")\nplt.title(\"SIR model\")\nplt.box(False)\nplt.show()","89ec0bfd":"I need help for SIR model & SEIR model.\nI am a student who have studied about Python since 2020.01\nI am not uset to use Scipy but if I want to solve Parameter for SIR, SEIR model, I have to use Annealing method from Scipy. if u interested in epidemic disease, please Help me using my code. \n\n2\uc8fc\ub3d9\uc548 \uc911\uad6d\uc5d0\uc11c \ub098\uc628 \ub17c\ubb38\uc744 \ucc38\uace0\ud558\uba74\uc11c SEIR \ubaa8\ub378\uc744 \uacf5\ubd80\ud558\uc600\uc2b5\ub2c8\ub2e4. \ucf54\ub85c\ub098\ubc14\uc774\ub7ec\uc2a4\uc5d0 \uc758\ud574 \ubd84\uc11d\uad00\ub828 \uad50\uc721\uc744 \ubc1b\uace0 \uc788\uc5c8\ub294\ub370 \uae30\uac04\ubbf8\uc815 \uad50\uc721\uc774 \ubbf8\ub904\uc9c0\uace0(\uacf5\uacf5\uae30\uad00-\uc815\ubd80\uc9c0\uce68\uc5ec\ud30c) \uc774\ucc38\uc5d0 \ucf54\ub85c\ub098\ubc14\uc774\ub7ec\uc2a4 \uad00\ub828 \uc804\uc5fc\ubcd1 \uc5ed\ud559\ubaa8\ub378\uc5d0 \uc758\uac70\ud574\uc11c \uc608\uce21\ubaa8\ub378 SIR, SEIR \ubaa8\ub378\uc744 \uacf5\ubd80\ud558\uace0 \uc788\ub294\ub370, \ub9ce\uc740 \ub17c\ubb38\uc744 \uc77d\uc5c8\uc9c0\ub9cc, \uc81c \uc218\uc900\uc5d0\ub294 \ubc84\uac70\uc6cc\uc11c, \uc774 \ucf54\ub4dc\ub97c \ubcf4\uc2dc\ub294 \ubd84\ub4e4\uaed8 \uad00\uc2ec\uc774 \uc788\uc73c\uc2dc\ub2e4\uba74 \ub3c4\uc6c0\uc744 \ubc1b\uace0 \uc2f6\ub124\uc694.\n\nbeta \ud30c\ub77c\ubbf8\ud130\ub97c \uc815\ud655\ud558\uac8c \uad6c\ud574\uc57c\ub9cc SEIR \ubaa8\ub378\uc774 \uc644\uc131\ub420\uac83\uac19\uc2b5\ub2c8\ub2e4.\n2\/18 31\ubc88 \ud655\uc9c4\uc790\uc5d0 \uc758\ud55c \uc9c0\uc5ed\uac10\uc5fc \ub2f9\uc2dc\uc758 \ubaa8\ub378\uc744 \uadf8\ub824\uc11c \ud604\uc7ac 3\uc8fc\uc815\ub3c4 \uc9c0\ub09c \uc2dc\uc810\uc5d0\uc11c \uc2e4\uc81c\ube44\uc728\uacfc \ube44\uad50\ud574\ubcf4\uace0 \uc2f6\uc2b5\ub2c8\ub2e4.\n\n\ub17c\ubb38\ucd9c\ucc98 :http:\/\/livecorona.co.kr\/\nlancet \ub17c\ubb38 'Nowcasting and forecasting the potential domestic and international spread of the 2019-nCoV outbreak originating in Wuhan, China: a modelling study'  SEIR \ubaa8\ub378 \uc5f0\uad6c\ub17c\ubb38. 2020.1.25 \ubc1c\ud45c","0a1c9dce":"# SEIR model with 4 age classes and yearly aging\n\nKey to this model are two basic assumptions:\n\n1) Only individuals in the adult class give birth, and only individuals in the adult class die.\n2) Births and deaths are continuous, but aging only happens once per year.\n\nThe continuous time dynamics are given by:![\ub300\uccb4 \ud14d\uc2a4\ud2b8](http:\/\/homepages.warwick.ac.uk\/~masfz\/ModelingInfectiousDiseases\/Chapter3\/Program_3.4\/Equations.gif)\n\nwith the annual aging being given by:![\ub300\uccb4 \ud14d\uc2a4\ud2b8](http:\/\/homepages.warwick.ac.uk\/~masfz\/ModelingInfectiousDiseases\/Chapter3\/Program_3.4\/Extra_Equations.gif)\n\n    Parameters\n    \u03b2\tis the matrix of transmission rates and incorporates the encounter rate between susceptible and infectious individuals together with the probability of transmission.\n    \u03c3\tis the rate at which individuals move from the exposed to the infectious classes. Its reciprocal (1\/\u03c3) is the average latent (exposed) period.\n    \u03b3\tis called the removal or recovery rate, though often we are more interested in its reciprocal (1\/\u03b3) which determines the average infectious period.\n    \u03bc\tis the death rate in each age group; it is assumed that only adults die.\n    \u03bd\tis the birth rate into the childhood class; it is assumed only adults give birth.\n    S(0)\tis the vector of initial proportions of the population that are both susceptible and in a particular age group.\n    E(0)\tis the vector of initial proportions of the population that are both exposed and in a particular age group.\n    I(0)\tis the vector of initial proportions of the population that are both infectious and in a particular age group.All rates are specified in days.\n\nRequirements.\nAll parameters must be positive, S(0) + E(0) + I(0) \u2264 n  for each age group.","80b58787":"# 2. \ucd9c\uc0dd\ub960\uacfc \uc0ac\ub9dd\ub960\uc744 \ubc18\uc601\ud55c  SIR \ubaa8\ub378\n\n# SIR model with births and deaths\n![\ub300\uccb4 \ud14d\uc2a4\ud2b8](http:\/\/homepages.warwick.ac.uk\/~masfz\/ModelingInfectiousDiseases\/Chapter2\/Program_2.2\/Equations.gif)\n\nParameters\n\n    \u03bc\tis the per capita death rate, and the population level birth rate.\n    \u03b2\tis the transmission rate and incorporates the encounter rate between susceptible and infectious individuals together with the probability of transmission.\n    \u03b3\tis called the removal or recovery rate, though often we are more interested in its reciprocal (1\/\u03b3) which determines the average infectious period.\n    S(0)\tis the initial proportion of the population that are susceptible.\n    I(0)\tis the initial proportion of the population that are infectious.All rates are specified in days.\n\nRequirements.\nAll parameters must be positive, and S(0)+I(0) \u2264 1","6ab98ff2":"# 1. \uac04\ub2e8\ud55c SIR \uc804\uc5fc\ubcd1 \ubaa8\ub378\n# **simple SIR model epidemic without births or deaths**\n\n\n![\ub300\uccb4 \ud14d\uc2a4\ud2b8](http:\/\/homepages.warwick.ac.uk\/~masfz\/ModelingInfectiousDiseases\/Chapter2\/Program_2.1\/Equations.gif)\n\n    \u03b2:\tis the transmission rate and incorporates the encounter rate between susceptible and infectious individuals together with the probability of transmission.\n    \u03b3:\tis called the **removal or recovery rate, though often we are more interested in its reciprocal (1\/\u03b3) which determines the average infectious period.\n    S(0):\tis the **initial proportion of the population that are susceptible.\n    I(0):\tis the **initial proportion of the population that are infectious.\nAll rates are specified in days.\n\n**Requirements.**\nAll parameters must be positive, and S(0)+I(0) \u2264 1","146eef17":"# beta \uac12\uc744 \uac00\uc815\ud574\uc11c \uc911\uad6d\uc5d0\uc11c \uc5f0\uad6c\ub41c \ub17c\ubb38\uc5d0 \ub098\uc628 \uc218\uce58\ub97c \ub123\uc744\uac83\uc774\ub77c \uc2e0\ub8b0\ub418\ub294 \uc218\uce58\uac00 \uc544\ub2d9\ub2c8\ub2e4. \ud0c0 \ub17c\ubb38\uc5d0 \uc758\ud558\uba74 Scipy annealing \uae30\ubc95\uc744 \ud1b5\ud574\uc11c \uad6c\ud574\uc9c0\ub294\ub370, \uc544\uc9c1 \uc81c\uc218\uc900\uc5d0\ub294 \ucf54\ub529\uc774 \uc5b4\ub835\ub124\uc694. \ub3c4\uc6c0\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\nhttps:\/\/www.r-bloggers.com\/sir-model-with-desolve-ggplot2\/\nR\ub85c\ub3c4 \ud480\uc5b4\ubcf4\ub824\uace0 \ud588\uc73c\ub098 \uc798 \uc548\ub418\uc11c, R \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc798\ud558\uc2dc\ub294 \ubd84\uc740 \uc704 \uc0ac\uc774\ud2b8\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694.","f34ea565":"\n ![\ub300\uccb4 \ud14d\uc2a4\ud2b8](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/d74226f805afb1847763d4588774981120389b85)\n\n  ![\ub300\uccb4 \ud14d\uc2a4\ud2b8](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/29dbe54a80c1f7ad16fc4553aef04d72b95dcc90)\n\n  ![\ub300\uccb4 \ud14d\uc2a4\ud2b8](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/64dd5e5d9472d7b194878f13019440e144f305cf)"}}