{"cell_type":{"425532ec":"code","3e8016b8":"code","7f555085":"code","f45967d2":"code","e1fe0e22":"code","f65cf244":"code","4ada4610":"code","0cadf6bf":"code","29ebd1d6":"code","0e769e63":"code","ca1084ac":"code","9881d8b3":"code","a9971e87":"code","fe977bc9":"code","9f68ffbe":"code","ee886846":"code","9f56df29":"code","385155eb":"code","63315dfc":"code","aa48af54":"code","ef42db96":"code","8e9ec21d":"code","6b518684":"code","19448283":"code","d252e750":"code","7ecf7dc3":"code","ee8a1cce":"code","3b06814b":"code","ffb08e1f":"code","e276c92e":"code","d5bdc262":"code","e731c594":"code","b74e7ddc":"code","fe46e0ed":"code","2f46d955":"code","f85c61ac":"code","5366d85e":"code","a0859fbd":"code","3feab4e6":"code","24deb805":"code","20aa50e9":"code","9f352f6c":"code","fa6ee44d":"code","fcb29e85":"code","437199e7":"code","f2010dbc":"code","99b5a09b":"code","7df8cad5":"code","aa138332":"code","59f2df1c":"code","58dc9b30":"code","0db6e8a5":"code","81c03d04":"code","0dbae576":"code","6e90f765":"code","25c1a716":"code","9a0566e7":"code","96dbf021":"code","89cc03f3":"code","20229c30":"code","2624f587":"code","88166145":"code","665c9317":"code","bfbd05d5":"code","954b4f35":"code","a5b1ada8":"code","94a226dd":"code","fd56b986":"code","2af2607f":"code","ad2aadf2":"code","3459266d":"code","1139e409":"code","0d2b6953":"code","cc393a6a":"code","259553c3":"code","99c5e588":"code","977e53c7":"markdown","8e27c817":"markdown","5e7a05f8":"markdown","7cf6c2ab":"markdown","edf83576":"markdown","33aa0ea5":"markdown","6662fc6b":"markdown","16987a02":"markdown","4f2cb8d1":"markdown","855cffba":"markdown","fde545b2":"markdown","c07a5ba2":"markdown","e83bcc76":"markdown","b1d97850":"markdown","a9fefa3c":"markdown","b56cf9b8":"markdown","9f51ac79":"markdown","b3cf9971":"markdown"},"source":{"425532ec":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3e8016b8":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","7f555085":"df_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f45967d2":"df_s = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","e1fe0e22":"df_train.head()","f65cf244":"df_test.head()","4ada4610":"df_s.head()","0cadf6bf":"df_train.shape","29ebd1d6":"df_train.nunique()","0e769e63":"null_values = df_train.isnull().sum()\nnull_values","ca1084ac":"n_v = null_values[null_values>0]\nn_v = n_v\/df_train.shape[0]*100\nn_v","9881d8b3":"n_v20 = (n_v[n_v>20])\nn_v20","a9971e87":"df_train.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1, inplace=True)\ndf_test.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1, inplace=True)","fe977bc9":"df_train.head()","9f68ffbe":"sns.distplot(df_train['SalePrice'])","ee886846":"plt.figure(figsize = (12, 6))\nplt.subplot(121)\nplot1 = plt.scatter(range(df_train.shape[0]), np.sort(df_train.SalePrice.values))\nplot1 = plt.title(\"SalePrice Curve Distribuition\", fontsize=15)\nplot1 = plt.xlabel(\"\")\nplot1 = plt.ylabel(\"SalePrice\", fontsize=12)\n\nplt.subplots_adjust(wspace = 0.3, hspace = 0.5,top = 0.9)\nplt.show()","9f56df29":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))","385155eb":"df_train.corr()\nplt.figure(figsize=(5,20))\nsns.heatmap(df_train[['SalePrice']].sort_values(by=['SalePrice'],ascending=False).head(60),vmin=-1, annot=True)","63315dfc":"sns.set(font_scale=1)\ncorrelation_train=df_train.corr()\nplt.figure(figsize=(30,20))\nsns.heatmap(correlation_train,annot=True,fmt='.1f')","aa48af54":"df_train.corr()","ef42db96":"df_train.drop(['Id', 'MSZoning', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n             'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle','RoofStyle','RoofMatl',\n             'Exterior1st', 'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n             'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','Heating', 'HeatingQC','CentralAir', \n             'Electrical', 'KitchenQual', 'Functional', 'GarageType','GarageFinish','GarageQual', 'GarageCond',\n             'PavedDrive','SaleType','SaleCondition'], axis=1, inplace=True)","8e9ec21d":"df_train.head()","6b518684":"df_train.columns","19448283":"null_values_train = df_train.isnull().sum()\nnull_values_train","d252e750":"df_train[\"LotFrontage\"] = df_train['LotFrontage'].transform(lambda x: x.fillna(x.mean()))","7ecf7dc3":"df_train[\"MasVnrArea\"] = df_train['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))","ee8a1cce":"df_train[\"GarageYrBlt\"] = df_train['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))","3b06814b":"df_train.isnull().sum()","ffb08e1f":"Id = df_test['Id']","e276c92e":"df_test.drop(['Id', 'MSZoning', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n             'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle','RoofStyle','RoofMatl',\n             'Exterior1st', 'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n             'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','Heating', 'HeatingQC','CentralAir', \n             'Electrical', 'KitchenQual', 'Functional', 'GarageType','GarageFinish','GarageQual', 'GarageCond',\n             'PavedDrive','SaleType','SaleCondition'], axis=1, inplace=True)","d5bdc262":"df_test.head()","e731c594":"df_test.columns","b74e7ddc":"df_test.isnull().sum()","fe46e0ed":"df_test[\"LotFrontage\"] = df_test['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"MasVnrArea\"] = df_test['MasVnrArea'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"GarageYrBlt\"] = df_test['GarageYrBlt'].transform(lambda x: x.fillna(x.median()))\ndf_test[\"BsmtFinSF1\"] = df_test['BsmtFinSF1'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"BsmtFinSF2\"] = df_test['BsmtFinSF2'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"BsmtUnfSF\"] = df_test['BsmtUnfSF'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"TotalBsmtSF\"] = df_test['TotalBsmtSF'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"BsmtFullBath\"] = df_test['BsmtFullBath'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"BsmtHalfBath\"] = df_test['BsmtHalfBath'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"GarageCars\"] = df_test['GarageCars'].transform(lambda x: x.fillna(x.mean()))\ndf_test[\"GarageArea\"] = df_test['GarageArea'].transform(lambda x: x.fillna(x.mean()))","2f46d955":"df_test.isnull().sum()","f85c61ac":"from sklearn.model_selection import cross_val_score, train_test_split \nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error as MSE","5366d85e":"X = df_train.drop([\"SalePrice\"],axis=1).values\ny = df_train[\"SalePrice\"].values","a0859fbd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=116214)","3feab4e6":"lr = LinearRegression()\nlr.fit(X_train,y_train)","24deb805":"print(f\"Train score : {lr.score(X_train,y_train)}\")\nprint(f\"Validation score : {lr.score(X_test,y_test)}\")","20aa50e9":"Prediction_LR = lr.predict(df_test)","9f352f6c":"submission_LR = pd.DataFrame()\nsubmission_LR['Id'] = Id\nsubmission_LR['SalePrice'] = Prediction_LR\nsubmission_LR.to_csv('submission_LR.csv', index=False)\nsubmission_LR.head(5)","fa6ee44d":"SVM = SVR()\nSVM.fit(X_train,y_train)","fcb29e85":"print(f\"Train score : {SVM.score(X_train,y_train)}\")\nprint(f\"Validation score : {SVM.score(X_test,y_test)}\")","437199e7":"Prediction_SVM = SVM.predict(df_test)","f2010dbc":"submission_SVM = pd.DataFrame()\nsubmission_SVM['Id'] = Id\nsubmission_SVM['SalePrice'] = Prediction_SVM\nsubmission_SVM.to_csv('submission_SVM.csv', index=False)\nsubmission_SVM.head(5)","99b5a09b":"DT = DecisionTreeRegressor()\nDT.fit(X_train,y_train)","7df8cad5":"print(f\"Train score : {DT.score(X_train,y_train)}\")\nprint(f\"Validation score : {DT.score(X_test,y_test)}\")","aa138332":"Prediction_DT = DT.predict(df_test)","59f2df1c":"submission_DT = pd.DataFrame()\nsubmission_DT['Id'] = Id\nsubmission_DT['SalePrice'] = Prediction_DT\nsubmission_DT.to_csv('submission_DT.csv', index=False)\nsubmission_DT.head(5)","58dc9b30":"KNN = KNeighborsRegressor()\nKNN.fit(X_train,y_train)","0db6e8a5":"print(f\"Train score : {KNN.score(X_train,y_train)}\")\nprint(f\"Validation score : {KNN.score(X_test,y_test)}\")","81c03d04":"Prediction_KNN = KNN.predict(df_test)","0dbae576":"submission_KNN = pd.DataFrame()\nsubmission_KNN['Id'] = Id\nsubmission_KNN['SalePrice'] = Prediction_KNN\nsubmission_KNN.to_csv('submission_KNN.csv', index=False)\nsubmission_KNN.head(5)","6e90f765":"RF = RandomForestRegressor()\nRF.fit(X_train,y_train)","25c1a716":"print(f\"Train score : {RF.score(X_train,y_train)}\")\nprint(f\"Validation score : {RF.score(X_test,y_test)}\")","9a0566e7":"Prediction_RF = RF.predict(df_test)","96dbf021":"submission_RF = pd.DataFrame()\nsubmission_RF['Id'] = Id\nsubmission_RF['SalePrice'] = Prediction_RF\nsubmission_RF.to_csv('submission_RF.csv', index=False)\nsubmission_RF.head(5)","89cc03f3":"param_grid = {'bootstrap': [True, False],\n               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n               'max_features': ['auto', 'sqrt'],\n               'min_samples_leaf': [1, 2, 4],\n               'min_samples_split': [2, 5, 10],\n               'n_estimators': [130, 180, 230]}","20229c30":"RF_random = RandomizedSearchCV(estimator = RF, param_distributions = param_grid, n_iter = 100, cv = 10, verbose=2, random_state=42, n_jobs = -1)","2624f587":"RF_random.fit(X_train,y_train)","88166145":"print(f\"Train score : {RF_random.score(X_train,y_train)}\")\nprint(f\"Validation score : {RF_random.score(X_test,y_test)}\")","665c9317":"Prediction_RF1 = RF_random.predict(df_test)","bfbd05d5":"submission_RF1 = pd.DataFrame()\nsubmission_RF1['Id'] = Id\nsubmission_RF1['SalePrice'] = Prediction_RF1\nsubmission_RF1.to_csv('submission_RF1.csv', index=False)\nsubmission_RF1.head(5)","954b4f35":"param_grid_2 = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8]\n}","a5b1ada8":"RF_grid = GridSearchCV(estimator = RF, param_grid = param_grid_2, cv = 10)","94a226dd":"RF_grid.fit(X_train,y_train)","fd56b986":"print(f\"Train score : {RF_grid.score(X_train,y_train)}\")\nprint(f\"Validation score : {RF_grid.score(X_test,y_test)}\")","2af2607f":"Prediction_RF2 = RF_grid.predict(df_test)","ad2aadf2":"submission_RF2 = pd.DataFrame()\nsubmission_RF2['Id'] = Id\nsubmission_RF2['SalePrice'] = Prediction_RF2\nsubmission_RF2.to_csv('submission_RF2.csv', index=False)\nsubmission_RF2.head(5)","3459266d":"from catboost import Pool, CatBoostClassifier","1139e409":"CBR = CatBoostClassifier(iterations=100)","0d2b6953":"CBR.fit(X_train, y_train)","cc393a6a":"print('Accuracy of classifier on training set: {:.2f}'.format(CBR.score(X_train, y_train) * 100))\nprint('Accuracy of classifier on test set: {:.2f}'.format(CBR.score(X_test, y_test) * 100))","259553c3":"prediction_CBR = CBR.predict(df_test)","99c5e588":"submission_CBR = pd.DataFrame()\nsubmission_CBR['Id'] = Id\nsubmission_CBR['SalePrice'] = prediction_CBR\nsubmission_CBR.to_csv('submission_CBR.csv', index=False)\nsubmission_CBR.head(5)","977e53c7":"### EDA","8e27c817":"### Reading the data","5e7a05f8":"### Model Building","7cf6c2ab":"###### Droping the columns which is having more than 20% of null values in the data","edf83576":"##### Checking Null Values","33aa0ea5":"#### Visualization","6662fc6b":"## Problem Statement","16987a02":"Droping the Categorical variables","4f2cb8d1":"#### DT","855cffba":"#### SVM","fde545b2":"#### KNN","c07a5ba2":"#### Linear Regression","e83bcc76":"Predicting the house prices using the features in the data given","b1d97850":"#### Data description:\n\n- MSSubClass: Identifies the type of dwelling involved in the sale.\n- MSZoning: Identifies the general zoning classification of the sale.\n- LotFrontage: Linear feet of street connected to property.\n- LotArea: Lot size in square feet.\n- Street: Type of road access to property.\n- Alley: Type of alley access to property.\n- LotShape: General shape of property.\n- LandContour: Flatness of the property.\n- Utilities: Type of utilities available.\n- LotConfig: Lot configuration.\n- LandSlope: Slope of property.\n- Neighborhood: Physical locations within Ames city limits.\n- Condition1: Proximity to various conditions.\n- Condition2: Proximity to various conditions (if more than one is present).\n- BldgType: Type of dwelling.\n- HouseStyle: Style of dwelling.\n- OverallQual: Rates the overall material and finish of the house.\n- OverallCond: Rates the overall condition of the house.\n- YearBuilt: Original construction date.\n- YearRemodAdd: Remodel date (same as construction date if no remodeling or additions).\n- RoofStyle: Type of roof.\n- RoofMatl: Roof material.\n- Exterior1st: Exterior covering on house.\n- Exterior2nd: Exterior covering on house (if more than one material).\n- MasVnrType: Masonry veneer type (None - None).\n- MasVnrArea: Masonry veneer area in square feet.\n- ExterQual: Evaluates the quality of the material on the exterior\/\n- ExterCond: Evaluates the present condition of the material on the exterior.\n- Foundation: Type of foundation.\n- BsmtQual: Evaluates the height of the basement (NA - No Basement).\n- BsmtCond: Evaluates the general condition of the basement (NA - No Basement).\n- BsmtExposure: Refers to walkout or garden level walls (NA - No Basement).\n- BsmtFinType1: Rating of basement finished area (NA - No Basement).\n- BsmtFinSF1: Type 1 finished square feet.\n- BsmtFinType2: Rating of basement finished area (if multiple types) (NA - No Basement).\n- BsmtFinSF2: Type 2 finished square feet.\n- BsmtUnfSF: Unfinished square feet of basement area.\n- TotalBsmtSF: Total square feet of basement area.\n- Heating: Type of heating.\n- HeatingQC: Heating quality and condition.\n- CentralAir: Central air conditioning.\n- Electrical: Electrical system.\n- 1stFlrSF: First Floor square feet.\n- 2ndFlrSF: Second floor square feet.\n- LowQualFinSF: Low quality finished square feet (all floors).\n- GrLivArea: Above grade (ground) living area square feet.\n- BsmtFullBath: Basement full bathrooms.\n- BsmtHalfBath: Basement half bathrooms.\n- FullBath: Full bathrooms above grade.\n- HalfBath: Half baths above grade.\n- Bedroom: Bedrooms above grade (does NOT include basement bedrooms).\n- Kitchen: Kitchens above grade.\n- KitchenQual: Kitchen quality.\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms).\n- Functional: Home functionality (Assume typical unless deductions are warranted).\n- Fireplaces: Number of fireplaces.\n- FireplaceQu: Fireplace quality (NA - No Fireplace).\n- GarageType: Garage location (NA - No Garage).\n- GarageYrBlt: Year garage was built.\n- GarageFinish: Interior finish of the garage (NA - No Garage).\n- GarageCars: Size of garage in car capacity.\n- GarageArea: Size of garage in square feet.\n- GarageQual: Garage quality (NA - No Garage).\n- GarageCond: Garage condition (NA - No Garage).\n- PavedDrive: Paved driveway.\n- WoodDeckSF: Wood deck area in square feet.\n- OpenPorchSF: Open porch area in square feet.\n- EnclosedPorch: Enclosed porch area in square feet.\n- 3SsnPorch: Three season porch area in square feet.\n- ScreenPorch: Screen porch area in square feet.\n- PoolArea: Pool area in square feet.\n- PoolQC: Pool quality (NA - No Pool).\n- Fence: Fence quality (NA - No Fence).\n- MiscFeature: Miscellaneous feature not covered in other categories (NA - None).\n- MiscVal: Value of miscellaneous feature.\n- MoSold: Month Sold (MM).\n- YrSold: Year Sold (YYYY).\n- SaleType: Type of sale.\n- SaleCondition: Condition of sale.","a9fefa3c":"### Importing libraries","b56cf9b8":"#### Checking Correlation","9f51ac79":"#### Imputation","b3cf9971":"#### Random Forest"}}