{"cell_type":{"14f0e362":"code","27a18293":"code","fcff89ac":"code","52fa6213":"code","671d2ee1":"code","c620c4d6":"code","ca9c8471":"code","4b9ac57b":"code","6701f8ec":"code","d5d26189":"code","895dc3ad":"code","d888bbe1":"code","eeb29939":"code","b35cce36":"code","b1b73bb1":"code","0f8a80ad":"code","40a21321":"code","716b8f89":"code","7d959470":"code","9a48bff6":"code","11e43817":"code","3dddcb64":"code","dcc414ef":"code","3c38a2f9":"code","653a94d8":"code","4c0cb4cc":"code","9746d85d":"code","ab7c7bb7":"code","8e7d0e34":"code","da615a70":"code","6b9945e2":"code","aa7c34bc":"code","40aeab8d":"code","f64a9ba4":"code","652ff234":"code","aa1cf7ef":"code","e823a468":"code","be18be27":"code","9f4cd50e":"code","0096dc46":"code","ea9ce7a2":"markdown","6564b872":"markdown","855b90e2":"markdown","d059e3e9":"markdown","adcfad50":"markdown","a9f0f706":"markdown","82d7ec8f":"markdown","f4335d63":"markdown","a6e1cf99":"markdown","1ce079a5":"markdown","ff6a90ae":"markdown","37472dcc":"markdown","523be5e2":"markdown","74bf4415":"markdown","3e2a6947":"markdown","735f347f":"markdown","631d0469":"markdown","ce48affb":"markdown","75ec2950":"markdown","1f3f9dd2":"markdown","a02332ac":"markdown","0fbd9615":"markdown","52ecad6f":"markdown","e2a871fc":"markdown","9689252c":"markdown","846d484d":"markdown","dd587e89":"markdown","b79547a6":"markdown","b7960a11":"markdown","3217b8ed":"markdown","01dfad79":"markdown","4c419faa":"markdown","305f35e8":"markdown","459fa9b7":"markdown","774f3250":"markdown","e9af7698":"markdown","f31b334b":"markdown","8bd0215e":"markdown"},"source":{"14f0e362":"# Install Plotly Express\n!pip install plotly.express","27a18293":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport os\nimport re\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(\"Path:\", os.path.join(dirname, filename))\n","fcff89ac":"datafr = pd.read_csv(\"..\/input\/data.csv\", error_bad_lines=False)","52fa6213":"display(datafr.head(10))","671d2ee1":"# Dimension of the datatset\nprint(\"Dimension of the dataset is: \",datafr.shape)","c620c4d6":"# Check the missing values in the column\nmissing_data = datafr.isnull().sum().sort_values(ascending=False)\nmissing_data = missing_data.reset_index(drop=False)\nmissing_data = missing_data.rename(columns={\"index\": \"Columns\", 0: \"Value\"})\nmissing_data['Proportion'] = (missing_data['Value']\/len(datafr))*100","ca9c8471":"sample = missing_data[missing_data['Proportion']>10]\nfig = px.pie(sample, names='Columns', values='Proportion',\n             color_discrete_sequence=px.colors.sequential.Plasma_r,\n             title='Proportion of missing values greater than 10%')\nfig.update_traces(textposition='inside', textinfo='label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","4b9ac57b":"missing_gk = datafr[datafr['Position']=='GK'].isnull().sum().sort_values(ascending=False)\n# Check the missing values in the column\nmissing_gk = missing_gk.reset_index(drop=False)\nmissing_gk = missing_gk.rename(columns={\"index\": \"Columns\", 0: \"Value\"})\nmissing_gk['Proportion'] = (missing_gk['Value']\/len(datafr))*100","6701f8ec":"sample = missing_gk[missing_gk['Proportion']>10]\nfig = px.pie(sample, names='Columns', values='Proportion',\n             color_discrete_sequence=px.colors.sequential.Magma_r,\n             title='Proportion of missing values greater than 10% for Position GK')\nfig.update_traces(textposition='inside', textinfo='label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","d5d26189":"# Drop Unnecessary columns\ndatafr = datafr.drop(['Unnamed: 0', 'ID', 'Photo', 'Flag', 'Club Logo', 'Body Type', 'Real Face', 'Loaned From', 'Joined'], axis=1)\ndatafr = datafr.fillna(0)","895dc3ad":"# Convert Weight from String(lbs) to Float(kg)\nls = []\nfor i in range(len(datafr)):\n    ls.append(re.sub('lbs', '', str(datafr['Weight'][i])))\ndatafr['Weight'] = [float(number) \/ 2.205 for number in ls]\n\n# Convert Height from String(feet) to Float(cm)\nls = []\nfor i in range(len(datafr)):\n    ls.append(re.sub('(\\')', '.', str(datafr['Height'][i])))\ndatafr['Height'] = [float(number) * 30 for number in ls]","d888bbe1":"datafr['bmi'] = datafr['Weight'] \/ (datafr['Height']\/100)**2","eeb29939":"ls = []\nls_value = []\nfor i in range(len(datafr)):\n    ls.append(re.sub('\u20ac', '', str(datafr['Value'][i])))\nfor i in ls:\n    if re.search(\"K\", i):\n        x = re.sub(\"K\",\"\",i)\n        ls_value.append(float(x)*1000)\n    elif re.search(\"M\", i):\n        y = re.sub(\"M\",\"\",i)\n        ls_value.append(float(y)*1000000)\n    else:\n        ls_value.append(0)\ndatafr['Value'] = ls_value","b35cce36":"fig = go.Figure()\nsample = datafr.sort_values(by='Overall')\nfig = go.Figure(data=go.Scatter(\n    x = sample['Overall'],\n    y = sample['Age'],\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=sample['International Reputation'], #set color equal to a variable\n        colorscale='Plasma', # one of plotly colorscales\n        showscale=True\n    ),\n    text= sample['Name'],\n))\n\nfig.update_layout(title='Styled Scatter Plot (colored by International Reputation) year 2019 - Overall vs Age',\n                  xaxis_title='Overall',\n                  yaxis_title='Age',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","b1b73bb1":"fig = go.Figure()\nsample = datafr.sort_values(by='Value')\nfig = go.Figure(data=go.Scatter(\n    x = sample['Jersey Number'],\n    y = sample['Value'],\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=sample['Age'], #set color equal to a variable\n        colorscale='Plasma', # one of plotly colorscales\n        showscale=True\n    ),\n    text= sample['Name'],\n))\n\nfig.update_layout(title='Styled Scatter Plot (colored by Age) year 2019 - Jersey Number vs Value',\n                  xaxis_title='Jersey Number',\n                  yaxis_title='Value',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","0f8a80ad":"fig = go.Figure()\nsample = datafr.sort_values(by='Overall')\nfig = go.Figure(data=go.Scatter(\n    x = sample['Overall'],\n    y = sample['Value'],\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=sample['Age'], #set color equal to a variable\n        colorscale='Plasma', # one of plotly colorscales\n        showscale=True\n    ),\n    text= sample['Name'],\n))\n\nfig.update_layout(title='Styled Scatter Plot (colored by Age) year 2019 - Overall vs Value',\n                  xaxis_title='Overall',\n                  yaxis_title='Value',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","40a21321":"fig = px.pie(datafr, names='Nationality',\n             color_discrete_sequence=px.colors.sequential.Plasma_r,\n             title='Proportion of Players based on Nationality')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","716b8f89":"datafr['Nationality'].value_counts()[:10]","7d959470":"smart_buy = datafr[(datafr['Contract Valid Until']=='2019') & (datafr['Overall']>=75)]\nyoung_buy = smart_buy[smart_buy['Potential']>smart_buy['Overall']]\nexperience_buy = smart_buy[smart_buy['Age']>30]","9a48bff6":"fig = go.Figure()\nsample = young_buy.sort_values(by='Overall')\nfig = go.Figure(data=go.Scatter(\n    x = sample['Age'],\n    y = sample['Potential'],\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=sample['Value'], #set color equal to a variable\n        colorscale='Plasma', # one of plotly colorscales\n        showscale=True\n    ),\n    text= sample['Name'],\n))\n\nfig.update_layout(title='Styled Scatter Plot (colored by Age) year 2019 - Age vs Potential',\n                  xaxis_title='Age',\n                  yaxis_title='Potential',\n                  paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","11e43817":"youth_special = datafr[(datafr['Overall']>75) & (datafr['Potential'] - datafr['Overall']>=10)].sort_values(by='Overall',ascending=False)\ncols = ['Name','Club','Age','Overall','Potential','Position','Value']\nyouth_special[cols]","3dddcb64":"sns.set(style=\"darkgrid\")\nfig, axs = plt.subplots(nrows=2, figsize=(16, 20))\nsns.countplot(youth_special['Position'], palette=\"PuRd\", ax=axs[0])\naxs[0].set_title('Number of young prospects per position', fontsize=16)\nsns.distplot(youth_special['Overall'],color=\"Red\", ax=axs[1])\naxs[1].set_title('Distribution of young prospects by Overall', fontsize=16)","dcc414ef":"youth_special['Position'].unique()","3c38a2f9":"fig = px.pie(youth_special, names='Position',\n             color_discrete_sequence=px.colors.sequential.Plasma_r,\n             title='Proportion of Young Players based on Position')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(paper_bgcolor='rgba(0,0,0,0)',\n                  plot_bgcolor='rgba(0,0,0,0)',\n                  font=dict(family='Cambria, monospace', size=12, color='#000000'))\nfig.show()","653a94d8":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA","4c0cb4cc":"datafr = datafr.drop(['Contract Valid Until','Release Clause','LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF',  'RW','LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM','CDM', 'RDM', 'RWB', 'LB', 'LCB','CB', 'RCB', 'RB'],axis=1)","9746d85d":"datafr.columns","ab7c7bb7":"datafr.iloc[:, 16:]","8e7d0e34":"attributes = datafr.iloc[:, 16:]\nattributes['Skill Moves'] = datafr['Skill Moves']\nattributes['Age'] = datafr['Age']\nworkrate = datafr['Work Rate'].str.get_dummies(sep='\/ ')\nattributes = pd.concat([attributes, workrate], axis=1)\ndf = attributes\nattributes = attributes.dropna()\ndf['Name'] = datafr['Name']\ndf['Position'] = datafr['Position']\ndf = df.dropna()\nprint(attributes.columns)","da615a70":"attributes.head()","6b9945e2":"plt.figure(figsize=(9,9))\n\n# Compute the correlation matrix\ncorr = attributes.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=\"RdBu\", vmax=.3, center=0,\n            square=True, linewidths=.7, cbar_kws={\"shrink\": .7})","aa7c34bc":"scaled = StandardScaler()\nX = scaled.fit_transform(attributes)","40aeab8d":"recommendations = NearestNeighbors(n_neighbors=5,algorithm='kd_tree')\nrecommendations.fit(X)","f64a9ba4":"player_index = recommendations.kneighbors(X)[1]","652ff234":"player_index","aa1cf7ef":"def get_index(x):\n    return df[df['Name']==x].index.tolist()[0]\n\ndef recommend_similar(player):\n    print(\"These are 4 players similar to {} : \".format(player))\n    index=  get_index(player)\n    for i in player_index[index][1:]:\n        print(\"Name: {0}\\nPosition: {1}\\n\".format(df.iloc[i]['Name'],df.iloc[i]['Position']))","e823a468":"recommend_similar('E. Hazard')","be18be27":"recommend_similar(player='M. Salah')","9f4cd50e":"recommend_similar('M. Neuer')","0096dc46":"recommend_similar('J. Gomez')","ea9ce7a2":"## 2. Visualization","6564b872":"1: Height, Weight and BMI","855b90e2":"### Display the structure of the dataset","d059e3e9":"### Get Similar Players index","adcfad50":"### E. Youth prospects with high potential growth","a9f0f706":"### A. Relationship b\/w Overall and Age","82d7ec8f":"**From the above scatter plot, we get to know that there are few players that a club manager could pursue since their contract is running only till 2019 so either club managers could  negotiate less or directly negotiate with player in January transfer window. We might target those players represented by Purples dots in top left quadrant as their current Overall Rating and future Potential rating is high.**","f4335d63":"### F. Ratio of youth prospects by Position","a6e1cf99":"Players with Jersey Number between 1-40 are highly valuable compared to player wearing jersey number over 40","1ce079a5":"#### Create a dataset for young prospects","ff6a90ae":"In this kernel I've designed to illustrate what insights could be driven using FIFA 19 Game dataset. The kernel is divided into following sections:\n* Analysis\n* Feature Engineering\n* Recommendation\n","37472dcc":"**This relationship is not clear, as player's jersey number is associated more with size of club and their importance of role or position. Thus we won't be using Jersey Number as our feature.**","523be5e2":"### Missing values for each attribute","74bf4415":"### Define a recommend function to display results","3e2a6947":"### Selecting columns to find similarity among players","735f347f":"**In our given dataset, more than 50% of players come from popular countries like England, Germany, Spain, Argentina and France. This could be explained by the popularity and sizes of domestic leagues within these nations.**","631d0469":"### Correlation Matrix based on attribute set","ce48affb":"**Test 3 : Manuel Neuer**","75ec2950":"**Test 4: Joe Gomez (Young Prospect)**","1f3f9dd2":"### D. Ratio of players by Nationality","a02332ac":"### Create recommendations using NearestNeighbors ML","0fbd9615":"**Test 2 : Mohamed Salah**","52ecad6f":"### Standardize the dataset","e2a871fc":"2: Value","9689252c":"### C: Relationship b\/w Overall & Value","846d484d":"**Test 1 : Eden Hazard**","dd587e89":"Drop Unnecessary columns that have large missing values or won't be used in analysis","b79547a6":"### Displaying our attribute set","b7960a11":"### Import Libraries","3217b8ed":"# Analysis, Visualization and Recommendation","01dfad79":"### Data Preprocessing & Feautre Engineering","4c419faa":"### B. Relationship b\/w Player Value & Jersey Number","305f35e8":"## 1. Ingestion","459fa9b7":"![](https:\/\/media.contentapi.ea.com\/content\/www-easports\/en_US\/fifa\/ultimate-team\/news\/2017\/fut-online-match-modes\/_jcr_content\/imageShare.img.jpg)","774f3250":"**Compute BMI**","e9af7698":"**From the above correlation chart, we can see a lot of Goalkeepers attributes have a negative correlation with the attributes possessed by a Forward, Midfielder and Defender.**","f31b334b":"### Identifying the shape of the dataset","8bd0215e":"## 3. Predictions"}}