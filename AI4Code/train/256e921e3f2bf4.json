{"cell_type":{"3d543264":"code","b5ef0b11":"code","4f04cffc":"code","4e2635a2":"code","9ce12e87":"code","98759e78":"code","9d25a964":"code","3a571db4":"code","502820f6":"code","2110ea00":"code","189a351d":"code","114b83ff":"code","74ccdd10":"code","824041b4":"code","42941939":"code","ffb1211e":"code","7a7540fa":"code","95ca283c":"code","672b51f8":"code","903fb611":"code","c529a757":"code","427c8772":"code","7bff2ba6":"code","a46524f7":"code","596a288c":"code","fef35390":"markdown","c587acf3":"markdown","268c1a10":"markdown","a7643c96":"markdown","23c2ae66":"markdown","79bfb1f0":"markdown"},"source":{"3d543264":"# import lib\nimport pandas as pd \nfrom pandas import Series,DataFrame\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# sns.set_style('whitegrid')\n%matplotlib inline\nfrom  sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error,accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport xgboost\nsns.set()","b5ef0b11":"# read_file\ntrain=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\n\ntrain.head()","4f04cffc":"# \u9664\u53bb\u975e\u5fc5\u8981\u7684\u6570\u636e\ntrain=train.drop(['PassengerId','Name','Ticket'],axis=1)\ntest=test.drop(['Name','Ticket'],axis=1)","4e2635a2":"# \u68c0\u67e5\u662f\u5426\u6709\u7f3a\u5931\u7684\u6570\u636e\ntrain.info()","9ce12e87":"test.info()","98759e78":"# embark \u767b\u8239\u5730\u70b9\n# \u627e\u51fa\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\ntrain.Embarked.value_counts().idxmax()\n","9d25a964":"# \u8865\u9f50\u7f3a\u5931\u6570\u636e\ntrain.Embarked=train.Embarked.fillna('S')","3a571db4":"# Categorical plots\nsns.catplot('Embarked','Survived',data=train,height=4,aspect=3,kind=\"point\")\n\nfig,(axis1,axis2,axis3)=plt.subplots(1,3,figsize=(15,5))\nsns.countplot(x='Embarked',data=train,ax=axis1)\n# \u4e0b\u9762\u7684\u8868\u73b0\u4e86\n#  \u52a0\u5165hue\u8868\u660e\u6211\u60f3\u6839\u636eEmbarked\u6765\u5206\u522b\u7edf\u8ba1\u5b58\u6d3b\u7387\nsns.countplot(x='Survived',hue='Embarked',data=train,order=[0,1],ax=axis2)\n# \u6839\u636eembarked\u5c5e\u6027\u6765\u8ba1\u7b97\u5b58\u6d3b\u7387\u7684\u5747\u503c\nembark_perc=train[[\"Embarked\",\"Survived\"]].groupby(['Embarked'],as_index=False).mean()\nsns.barplot(x='Embarked', y='Survived', data=embark_perc,order=['S','C','Q'],ax=axis3)","502820f6":"embark_dummies_titanic  = pd.get_dummies(train['Embarked'])\nembark_dummies_titanic.drop(['S'],axis=1,inplace=True)\n\nembark_dummies_test=pd.get_dummies(test.Embarked)\nembark_dummies_test.drop(['S'],axis=1,inplace=True)\n\ntrain=train.join(embark_dummies_titanic)\ntest=test.join(embark_dummies_test)\n\ntrain.drop(['Embarked'],axis=1,inplace=True)\ntest.drop(['Embarked'],axis=1,inplace=True)\n","2110ea00":"# Fare\n# \u6d4b\u8bd5\u96c6\u4e0a\u8d39\u7528\u6709\u7f3a\u7701,\u7528\u4e2d\u4f4d\u6570\u8865\u5168\ntest[\"Fare\"].fillna(test.Fare.median(),inplace=True)\n\n# get fare for survived && didn't survive passebgers\nfare_not_survived=train[\"Fare\"][train[\"Survived\"]==0]\nfare_survived=train[\"Fare\"][train[\"Survived\"]==1]\n# \u5206\u522b\u6c42\u51fa\u4e0d\u5b58\u6d3b\u7684\u4eba\u7684fare\u5747\u503c\uff0c\u548c\u5b58\u6d3b\u4eba\u7684\u5747\u503c\navgerage_fare=pd.DataFrame([fare_not_survived.mean(),fare_survived.mean()])\n# \nstd_fare=pd.DataFrame([fare_not_survived.std(),fare_survived.std()])\n\n","189a351d":"# \u753b\u51fafare\u7684\u5206\u5e03\u56fe\nsns.distplot(train[\"Fare\"],kde=False,color='blue')","114b83ff":"# \u8c03\u7528pandas\u7684\u753b\u56fe\u5e93\navgerage_fare.index.names = std_fare.index.names = [\"Survived\"]\n# \u8fd9\u4e2a\u7ed8\u56fe\u64cd\u4f5c\u3002\u3002\u3002\navgerage_fare.plot(yerr=std_fare,kind='bar',legend=False)\nprint(avgerage_fare)\nprint(std_fare)","74ccdd10":"fig1,(axis1,axis2)=plt.subplots(1,2,figsize=(15,4))\naxis1.set_title('Original Age values-Titanic')\naxis2.set_title('New Age with random values-Titanic')\n\n# get average,std,and number of NAN values in train\naverage_age_titanic=train[\"Age\"].mean()\nstd_age_titanic=train[\"Age\"].std()\ncount_nan_age_titanic = train[\"Age\"].isnull().sum()\n# get average,std,and number of NAN values in test_data\naverage_age_test=test[\"Age\"].mean()\nstd_age_test=test[\"Age\"].std()\ncount_nan_age_test=test[\"Age\"].isnull().sum()\n# \u7ed8\u5236\u51faoriginal Age values \u5206\u5e03\nsns.distplot(train['Age'].dropna().astype(int),kde=False,bins=70,color='blue',ax=axis1)\n# fill nan values in Age colunm with random\nrandnum1=np.random.randint(average_age_titanic-std_age_titanic,\n                           average_age_titanic+std_age_titanic,\n                           size=count_nan_age_titanic\n                          )\nrandnum2=np.random.randint(average_age_test-std_age_test,\n                           average_age_test+std_age_test,\n                           size=count_nan_age_test,\n)\n\ntrain.Age[np.isnan(train.Age)]=randnum1\ntest.Age[np.isnan(test.Age)]=randnum2\n\n# plot new distribution\nsns.distplot(train.Age,bins=70,kde=False,color='blue',ax=axis2)","824041b4":"# .... continue with plot Age column\n\n# peaks for survived\/not survived passengers by their age\nfacet=sns.FacetGrid(train,hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0,train.Age.max()))\nfacet.add_legend()","42941939":"train.Age=train.Age.astype(int)\ntest.Age=test.Age.astype(int)\nfig,axis1=plt.subplots(1,1,figsize=(20,4))\n# \u5355\u72ec\u63d0\u53d6\u51faAge\u548cSurvived\u5176\u4e2dgroupby\u8868\u793a\u81ea\u53d8\u91cf\n# mean \u76f8\u5f53\u4e8e\u8ba1\u7b97\u51fa\u4e86\u5b58\u6d3b\u7387\u7684\u671f\u671b\naverage_age=train[[\"Age\",\"Survived\"]].groupby([\"Age\"],as_index=False).mean()\nsns.barplot(x='Age', y='Survived', data=average_age)\nprint(average_age)","ffb1211e":"# Cabin\n# Cabin\u5c5e\u6027\u7f3a\u5931\u503c\u975e\u5e38\u591a\ntrain.drop(\"Cabin\",axis=1,inplace=True)\ntest.drop(\"Cabin\",axis=1,inplace=True)","7a7540fa":"# Family \n# Instead of having two columns Parch & Sibsp\n# \u6211\u4eec\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u5c5e\u6027\u6765\u8868\u793a\u4e58\u5ba2\u662f\u5426\u6709\u5bb6\u5c5e\n# \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5047\u8bbe if having  any family member will increase chances of Survival\n# \u90a3\u4e48\u6211\u4eec\u8981\u5982\u4f55\u9a8c\u8bc1\u6211\u4eec\u7684\u5047\u8bbe\u5462\n\n# \u60f3\u6cd5\u6709Parch\u7684\u5e94\u8be5\u548c\u6709Sibsp\u7684\u5b58\u6d3b\u7387\u5206\u5e03\u8fd1\u4f3c\nfig,(axis1,axis2)=plt.subplots(1,2,figsize=(10,4))\nSibsp_Survived=train[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean()\nsns.barplot(x=\"SibSp\",y=\"Survived\",data=Sibsp_Survived,ax=axis1)\nParch_Survived=train[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean()\nsns.barplot(x=\"Parch\",y=\"Survived\",data=Parch_Survived,ax=axis2)","95ca283c":"train[\"Family\"]=train[\"Parch\"]+train[\"SibSp\"]\ntrain[\"Family\"].loc[train[\"Family\"]>0]=1\ntrain[\"Family\"].loc[train[\"Family\"]==0]=0\n\ntest[\"Family\"]=test.Parch+test.SibSp\ntest[\"Family\"].loc[test[\"Family\"]>0]=1\ntest[\"Family\"].loc[test[\"Family\"]==0]=0\n\n# drop\ntrain=train.drop([\"SibSp\",\"Parch\"],axis=1)\ntest=test.drop([\"SibSp\",\"Parch\"],axis=1)\n\n#plot\nfig,(axis1,axis2)=plt.subplots(1,2,sharex=True,figsize=(10,5))\n# \u4eba\u7fa4\u4e2d\u6709\u591a\u5c11\u662f\u5e26\u5bb6\u4eba\u7684\nsns.countplot(x='Family',data=train,order=[1,0],ax=axis1)\nfamily_prec=train[[\"Family\",'Survived']].groupby(['Family'],as_index=False).mean()\nsns.barplot(x='Family',y='Survived',data=family_prec,order=[1,0],ax=axis2)\naxis1.set_xticklabels([\"with Family\",\"Alone\"],rotation=0)","672b51f8":"# Sex \n# As we see,children(age<16)\u6709\u53ef\u80fd\u6709\u66f4\u9ad8\u7684\u6982\u7387\u5b58\u6d3b\n# \u6240\u4ee5\u6211\u4eec\u5c06\u4e58\u5ba2\u4eec\u5206\u4e3a\u7537\uff0c\u5973\uff0c\u5c0f\u5b69\ndef get_person(passenger):\n    age,sex=passenger\n    return 'child' if age<16 else sex\ntrain['Person']=train[['Age','Sex']].apply(get_person,axis=1)\ntest['Person']=test[['Age','Sex']].apply(get_person,axis=1)\n\ntrain.drop(['Sex'],axis=1,inplace=True)\ntest.drop(['Sex'],axis=1,inplace=True)\n\n#\u5c06train.Person\u91cd\u65b0\u7f16\u7801\nperson_titanic=pd.get_dummies(train[\"Person\"])\nperson_titanic.columns=['Child','Female','Male']\nperson_titanic.drop(['Male'], axis=1, inplace=True)\n\nperson_test=pd.get_dummies(test[\"Person\"])\nperson_test.columns=['Child','Female','Male']\nperson_test.drop(['Male'],axis=1,inplace=True)\n\ntrain=train.join(person_titanic)\ntest=test.join(person_test)\n\nfig,(axis1,axis2)=plt.subplots(1,2,figsize=(10,5))\nsns.countplot(x='Person',data=train,ax=axis1)\n\nperson_prec=train[[\"Person\",\"Survived\"]].groupby(['Person'],as_index=False).mean()\nsns.barplot(x='Person',y='Survived',data=person_prec,ax=axis2,order=[\n    'male','female','child'\n])\n\ntrain.drop(['Person'],axis=1,inplace=True)\ntest.drop(['Person'],axis=1,inplace=True)\n","903fb611":"sns.catplot('Pclass','Survived',order=[1,2,3],data=train,height=5,kind='point')\n# drop class3 \u6d88\u9664\u865a\u62df\u53d8\u91cf\u9677\u9631\nPclass_titanic=pd.get_dummies(train['Pclass'])\nPclass_titanic.columns=['Class1','Class2','Class3']\nPclass_titanic.drop(['Class3'],axis=1,inplace=True)\n\nPclass_test=pd.get_dummies(test['Pclass'])\nPclass_test.columns=['Class1','Class2','Class3']\nPclass_test.drop(['Class3'],axis=1,inplace=True)\n\ntrain.drop(['Pclass'],axis=1,inplace=True)\ntest.drop(['Pclass'],axis=1,inplace=True)\n\n\ntrain=train.join(Pclass_titanic)\ntest=test.join(Pclass_test)","c529a757":"y=train.Survived\nX=train.drop([\"Survived\"],axis=1)\n# training set and validation set\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,train_size=0.8,random_state=0)\nfor n in [50,100,150,200,250,300,350]:\n    rf_model=RandomForestClassifier(n_estimators=n,random_state=0)\n    rf_model.fit(train_X,train_y)\n    rf_pred=rf_model.predict(val_X)\n    rf_val_acc=accuracy_score(rf_pred,val_y)\n    print('n={},loss={}'.format(n,rf_val_acc))","427c8772":"#\u9009\u62e9n=200\n# X_test=test.drop(\"PassengerId\",axis=1).copy()\n# model=RandomForestClassifier(n_estimators=200,random_state=0)\n# model.fit(X,y)\n# Y_pred=model.predict(X_test)","7bff2ba6":"from xgboost import XGBClassifier\nfor i in [50,100,150,200,250,300]:\n    gb_model=XGBClassifier(max_depth=4,n_estimators=i)\n    gb_model.fit(train_X,train_y)\n    gb_pred=gb_model.predict(val_X)\n    print(i,'=>',accuracy_score(gb_pred,val_y))","a46524f7":"X_test=test.drop(\"PassengerId\",axis=1).copy()\nmodel=XGBClassifier(max_depth=4,n_estimators=150)\nmodel.fit(X,y)\nY_pred=model.predict(X_test)","596a288c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","fef35390":"\u8bad\u7ec3\u96c6\u4e2d\u6211\u4eec\u53d1\u73b0Age\u548cCabin\u4e24\u4e2a\u7279\u5f81\u7684\u6709\u7f3a\u5931\u6570\u636e","c587acf3":"### \u4e0b\u9762\u5bf9\u7279\u5f81\u8fdb\u884c\u5206\u6790","268c1a10":"\u6d4b\u8bd5\u96c6\u4e2d\u6211\u4eec\u53d1\u73b0Age\u548cCabin\u548cFare\u6709\u7f3a\u5931","a7643c96":"\u7bb1\u7ebf\u56fe\uff08Boxplot\uff09\u4e5f\u79f0\u7bb1\u987b\u56fe\uff08Box-whisker Plot\uff09\uff0c\u662f\u5229\u7528\u6570\u636e\u4e2d\u7684\u4e94\u4e2a\u7edf\u8ba1\u91cf\uff1a\u6700\u5c0f\u503c\u3001\u7b2c\u4e00\u56db\u5206\u4f4d\u6570\u3001\u4e2d\u4f4d\u6570\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u6570\u4e0e\u6700\u5927\u503c\u6765\u63cf\u8ff0\u6570\u636e\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7c97\u7565\u5730\u770b\u51fa\u6570\u636e\u662f\u5426\u5177\u6709\u6709\u5bf9\u79f0\u6027\uff0c\u5206\u5e03\u7684\u5206\u6563\u7a0b\u5ea6\u7b49\u4fe1\u606f\uff0c\u7279\u522b\u53ef\u4ee5\u7528\u4e8e\u5bf9\u51e0\u4e2a\u6837\u672c\u7684\u6bd4\u8f83","23c2ae66":"### read data","79bfb1f0":"### dummy variable(one-hot encoding)"}}