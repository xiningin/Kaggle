{"cell_type":{"0b53ceda":"code","b7407030":"code","9b13335d":"code","90a0f48f":"code","4500a6fe":"code","bf9cb9e5":"code","05dd744d":"code","9dd3f4b2":"code","e5d0b30c":"code","0464dceb":"code","526c4607":"code","a4a62c1c":"code","f33fc842":"code","59cde370":"code","a38a7116":"code","b56bee2d":"code","81765e18":"code","b8c9f05a":"code","44f40b80":"code","22691e0c":"code","db1b38c4":"code","3f9a6db8":"code","f13a753c":"code","1732863a":"code","52aaa645":"code","1206b23c":"code","86129406":"code","43fb8566":"code","adced2e6":"code","cd89e86c":"code","726c941e":"code","3af7e48a":"markdown","4d754ab7":"markdown","6d1ab350":"markdown","27c08faf":"markdown","f8aec540":"markdown","c0b23190":"markdown"},"source":{"0b53ceda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.metrics import r2_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7407030":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","9b13335d":"train.head()","90a0f48f":"train.info()","4500a6fe":"train.describe()","bf9cb9e5":"# Object olan verilerinde istatistiksel \u00f6zetini alal\u0131m\n# Let's take the statistical summary of \"Object\" data\n\ntrain.describe(include=['O'])","05dd744d":"train.Utilities.value_counts()","9dd3f4b2":"sns.distplot(train.SalePrice)","e5d0b30c":"train.plot(kind = 'scatter',x=\"Id\", y=\"SalePrice\", color = 'r',label = 'Price',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')","0464dceb":"df_inlier = train[train['SalePrice'] < 400000]\ndf_inlier.shape","526c4607":"train2 = df_inlier.drop(labels = [\"Id\", \"SalePrice\"], axis = 1)\ntrain_sale = df_inlier.loc[:, \"SalePrice\"]","a4a62c1c":"test_id = test.Id\ntest = test.drop(labels = [\"Id\"], axis = 1)","f33fc842":"# np.concatenate([a, b])\n\ndf = pd.concat([train2, test])","59cde370":"df.shape","a38a7116":"df.isnull().sum().sort_values(ascending=False).head(15)","b56bee2d":"df.dropna(axis=1, how=\"any\", thresh=2480, inplace = True)\ndf.shape","81765e18":"df.drop(labels = [\"2ndFlrSF\", \"MiscVal\", \"WoodDeckSF\", \"OpenPorchSF\",\"EnclosedPorch\",\"3SsnPorch\",\n                  \"PoolArea\",\"MasVnrArea\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"LowQualFinSF\",\n                  \"ScreenPorch\"], axis = 1, inplace = True)","b8c9f05a":"df.shape","44f40b80":"df.info()","22691e0c":"missingValue = SimpleImputer(missing_values = np.nan, strategy = 'most_frequent')\nmissingValue = missingValue.fit(df.iloc[:, 0:61])\ndf.iloc[:, 0:61] = missingValue.transform(df.iloc[:, 0:61])","db1b38c4":"missingValue = SimpleImputer(missing_values = 0, strategy = 'mean')\nmissingValue = missingValue.fit(df.iloc[:,31:33])\ndf.iloc[:, 31:33] = missingValue.transform(df.iloc[:, 31:33])","3f9a6db8":"missingValue = SimpleImputer(missing_values = 0, strategy = 'mean')\nmissingValue = missingValue.fit(df.iloc[:,53:54])\ndf.iloc[:, 53:54] = missingValue.transform(df.iloc[:, 53:54])","f13a753c":"df.isna().sum().sum()","1732863a":"df.loc[:,[\"MSSubClass\",\"OverallQual\",\"OverallCond\",\"YearBuilt\",\"YearRemodAdd\",\"BsmtFullBath\",\n             \"BsmtHalfBath\", \"FullBath\", \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"TotRmsAbvGrd\",\n             \"Fireplaces\", \"GarageCars\", \"GarageYrBlt\", \"MoSold\",\n             \"YrSold\"]] = df.loc[:,[\"MSSubClass\", \"OverallQual\", \"OverallCond\", \"YearBuilt\",\n                                       \"YearRemodAdd\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\",\n                                       \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"TotRmsAbvGrd\",\n                                       \"Fireplaces\", \"GarageCars\", \"GarageYrBlt\", \"MoSold\",\n                                       \"YrSold\"]].astype(\"object\")","52aaa645":"df_obj = df.describe(include=[\"O\"])\ndf_obj = df_obj.columns\ndf = pd.get_dummies(df, columns = df_obj, drop_first = True)\n\ndf.shape","1206b23c":"x_train = df[:1432].values\nx_test = df[1432:].values\ny_train = train_sale.values","86129406":"linear = LinearRegression()\nlinear.fit(x_train, y_train)","43fb8566":"y_pred_train = linear.predict(x_train)","adced2e6":"print(\"Root mean square error train = \" + str(np.sqrt(mean_squared_error(y_train, y_pred_train))))\nprint(\"R2 score = \" + str(r2_score(y_train, y_pred_train)))","cd89e86c":"y_test = linear.predict(x_test)","726c941e":"submission = pd.DataFrame({\"Id\": test_id})\nsubmission[\"SalePrice\"] = y_test\nsubmission.to_csv(\"submission.csv\", index=False)","3af7e48a":"Now let's convert integer values that should be Object...","4d754ab7":"# **Missing Value**","6d1ab350":"We detected variables with the majority of Object values being Nan, but we still haven't looked at variables with a majority of 0 in int or float colons.","27c08faf":"# **Regression**","f8aec540":"## **Model Strength (Determination Coefficient $R^2$ and RMSE)**","c0b23190":"# **Encode Process**"}}