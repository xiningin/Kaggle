{"cell_type":{"545de808":"code","39d39020":"code","1dec04cc":"code","5d04bc25":"code","afeaeb83":"code","4190386b":"code","b5b410bc":"code","de5376ba":"code","0942de5f":"code","d3fbb0e9":"code","ba5fff32":"code","e3761b41":"code","212290c4":"code","20eb018d":"code","cbaf3544":"code","85c0e570":"code","c4e8465e":"code","b4dcb80c":"code","155084d5":"code","c77d1c96":"code","874c38ea":"code","d08a2185":"code","d828a841":"code","9dabd7d4":"code","6cfe3e55":"code","86107fa5":"code","eb285398":"code","7af6359e":"code","1dac04f4":"code","5cd9e0eb":"code","d1400088":"code","1e7571d6":"code","1c8bb3c3":"code","09e1bad2":"code","fe99d4cc":"code","07b198af":"code","4c24885e":"code","55491e9e":"code","554b5026":"code","0783a440":"code","88992d13":"code","79b0ef4f":"code","49c11203":"code","a787684e":"code","4d2804ad":"code","58913bd0":"code","aacaea22":"code","06381c0d":"code","49bdaa01":"code","204c5786":"code","101d9398":"code","bfd45e9e":"code","84403fc2":"code","efc960b0":"code","5f2b64a7":"code","67c7e8df":"code","45d8370b":"code","14b8e339":"code","e324f147":"code","b98eb994":"code","23429e04":"code","7fc22366":"code","ec5c89ab":"code","c90c1f7b":"code","b39231ab":"code","10b25166":"code","83c180c0":"code","46a89fe4":"code","a87df86c":"code","06b30f0c":"code","6c8a3de9":"code","ac441c8d":"code","86527445":"code","1524a2cd":"code","0f8fedb7":"code","a36c8571":"code","a33426c6":"code","6b019700":"code","2382942a":"code","79e4b9f7":"code","0e6ddbbd":"code","c20fccaf":"code","b3b95bb3":"code","ab2aff7c":"code","4a83bf22":"code","b35b9b89":"code","cc84ae72":"code","8fa278c2":"code","eaa94598":"code","760c8fb7":"code","128052ac":"code","2e0c58e0":"code","6b15a3cf":"code","62e52a94":"code","5ac3f4d8":"code","d1952a53":"code","210be8ba":"code","14ba237f":"code","ff7de714":"code","17f58208":"code","6aebbd10":"code","2ca6244a":"code","f37fe6d0":"code","44b57d38":"code","8bb41d5f":"code","319bf30a":"markdown","84d55ee3":"markdown","d094c213":"markdown","b4162f51":"markdown","6d50a467":"markdown","673e60ea":"markdown","d813dcf6":"markdown","35feeb3f":"markdown","4aadaf04":"markdown","d5adf3f0":"markdown","7f79e14b":"markdown","e93c1e3a":"markdown","908b673b":"markdown"},"source":{"545de808":"import warnings\nwarnings.filterwarnings('ignore')","39d39020":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","1dec04cc":"ds = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter=',')","5d04bc25":"ds.head(3)","afeaeb83":"ds.drop(['id'], axis=1, inplace=True)","4190386b":"ds.stroke[ds.gender == 'Other']","b5b410bc":"ds.drop([3116], inplace=True)","de5376ba":"ds.columns","0942de5f":"columns_numeric = ['age', 'avg_glucose_level', 'bmi']\ncolumns_categorical = ['gender', 'hypertension', 'heart_disease', 'ever_married', \n                       'work_type', 'Residence_type', 'smoking_status']\ncolumns_dummis = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\ncolumns_target = ['stroke']","d3fbb0e9":"def replace_nan(data, to_replace, replacement_data):\n    \n    data_def = data.copy(deep=True)\n    \n    index_zero = list(data_def[to_replace][data_def[replacement_data] == 0].index)\n    index_one = list(data_def[to_replace][data_def[replacement_data] == 1].index)\n    \n    for i in range(2):\n        minimum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.25)\n        maximum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.75)\n        \n        minimum -= (maximum - minimum) * 0.5\n        maximum += (maximum - minimum) * 0.5\n    \n        count = data_def[to_replace][data_def[replacement_data] == i].isnull().sum()\n        \n        data_for_nan = np.random.choice(range(int(minimum), int(maximum)), count)\n    \n        if i == 0:\n            index_null = data_def[to_replace][index_zero][data_def[to_replace].isnull()].index\n        else:\n            index_null = data_def[to_replace][index_one][data_def[to_replace].isnull()].index\n        \n        data_def[to_replace][index_null] = data_for_nan\n        \n    return data_def","ba5fff32":"ds = replace_nan(ds, 'bmi', 'stroke')","e3761b41":"ds.info()","212290c4":"ds = pd.get_dummies(ds, columns=columns_dummis, prefix_sep='_', drop_first=True)","20eb018d":"ds.head(3)","cbaf3544":"from sklearn.model_selection import train_test_split","85c0e570":"ds_train, ds_test = train_test_split(ds, test_size=0.3, random_state=42, stratify=ds.stroke)","c4e8465e":"ds_train.stroke.value_counts(normalize=True), ds_test.stroke.value_counts(normalize=True)","b4dcb80c":"ds_train.shape[0] + ds_test.shape[0], ds.shape","155084d5":"add_rows = int(ds_train.stroke.value_counts()[0] * .8 - ds_train.stroke.value_counts()[1])\nadd_rows","c77d1c96":"int(add_rows \/ ds_train.stroke.value_counts()[1]), ds_train.stroke.value_counts()","874c38ea":"index_train_one = ds_train.stroke[ds_train.stroke == 1].index\nds_train_one = ds_train.loc[index_train_one]","d08a2185":"for i in range(14):\n    ds_train = ds_train.append(ds_train_one)\n    #y_train = pd.concat([y_train, y_train[y_train == 1]])","d828a841":"ds_train.stroke.value_counts(normalize=True)","9dabd7d4":"from sklearn.utils import shuffle","6cfe3e55":"ds_train = shuffle(ds_train)","86107fa5":"from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve","eb285398":"def print_metrics(actual, predict):\n    print('Accuracy: {:.3f}'.format(accuracy_score(actual, predict)))\n    print('Precision: {:.3f}'.format(precision_score(actual, predict)))\n    print('Recall: {:.3f}'.format(recall_score(actual, predict)))\n    print('F1 score: {:.3f}'.format(f1_score(actual, predict)))","7af6359e":"def plot_roc_auc(actual, predict):\n    \n    fpr, tpr, threshold = roc_curve(actual, predict)\n    plt.plot(fpr, tpr, color='b')\n    #plt.plot()\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.plot([0.0, 1.0], [0.0, 1.0], color='r')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC AUC = {:.3f}'.format(roc_auc_score(actual, predict)))","1dac04f4":"from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler","5cd9e0eb":"scaler = StandardScaler()","d1400088":"ds_train[columns_numeric] =  scaler.fit_transform(ds_train[columns_numeric])","1e7571d6":"ds_train","1c8bb3c3":"ds_test[columns_numeric] = scaler.transform(ds_test[columns_numeric])","09e1bad2":"from sklearn.svm import SVC","fe99d4cc":"np.random.seed(33)\nmodel_svc = SVC(probability=True, random_state=33)","07b198af":"%%time\nmodel_svc.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","4c24885e":"y_pred = model_svc.predict(ds_test.drop(['stroke'], axis=1))","55491e9e":"y_pred_prob = model_svc.predict_proba(ds_test.drop(['stroke'], axis=1))","554b5026":"print_metrics(ds_test.stroke, y_pred)","0783a440":"from sklearn.metrics import confusion_matrix","88992d13":"sns.heatmap(confusion_matrix(ds_test.stroke, y_pred), cmap='Blues', annot=True, fmt='');","79b0ef4f":"plot_roc_auc(ds_test.stroke, y_pred_prob[:, 1])","49c11203":"%%time\nbest_f1 = []\nbest_recall = []\nbest_roc_auc = []\nbest_precision = [] \nx = []\nx_keys = []\nn = 0\n\nfor cr in ['rbf']:\n    for c in [0.8, 0.85, 0.9, 0.95, 1.0]:\n        for g in [0.004, 0.0045, 0.005, 0.0055, 0.006]:\n            model = SVC(kernel=cr, C=c, gamma=g, probability=True, random_state=33)\n                \n            model.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\n            y_pred = model.predict(ds_test.drop(['stroke'], axis=1))\n                \n            f1 = f1_score(ds_test.stroke, y_pred)\n            best_f1.append(f1)\n                \n            recall = recall_score(ds_test.stroke, y_pred)\n            best_recall.append(recall)\n                \n            precision = precision_score(ds_test.stroke, y_pred)\n            best_precision.append(precision)\n                \n            y_pred_prob = model.predict_proba(ds_test.drop(['stroke'], axis=1))\n            roc_auc = roc_auc_score(ds_test.stroke, y_pred_prob[:, 1])\n            best_roc_auc.append(roc_auc)\n                \n            x_keys.append(str(cr) +' '+ str(c) +' '+ str(g))\n            x.append(n)\n            n += 1","a787684e":"scores = {'f1': best_f1, 'recall': best_recall, 'precision': best_precision, 'roc_auc': best_roc_auc, \n          'key': x_keys}","4d2804ad":"df_scores = pd.DataFrame(scores, index=x)","58913bd0":"df_scores.sort_values(by=['f1', 'recall', 'precision'], ascending=False)","aacaea22":"np.random.seed(33)","06381c0d":"model_svc = SVC(kernel='rbf', C=0.95, gamma=0.0045, probability=True, random_state=33)","49bdaa01":"model_svc.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","204c5786":"y_pred = model_svc.predict(ds_test.drop(['stroke'], axis=1))","101d9398":"print_metrics(ds_test.stroke, y_pred)","bfd45e9e":"y_ped_prob = model_svc.predict_proba(ds_test.drop(['stroke'], axis=1))","84403fc2":"sns.heatmap(confusion_matrix(ds_test.stroke, y_pred), \n            cmap='Blues', annot=True, fmt='');","efc960b0":"plot_roc_auc(ds_test.stroke, y_pred_prob[:, 1])","5f2b64a7":"%%time\nf1_sc = []\nthreshold = []\nrec_sc = []\nprec_sc = []\n\nfor i in np.linspace(0.5, 0.75, 1000):\n    recall_sc = recall_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    precision_sc = precision_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f_one = f1_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f1_sc.append(f_one)\n    threshold.append(i)\n    rec_sc.append(recall_sc)\n    prec_sc.append(precision_sc)","67c7e8df":"plt.figure(figsize=(15, 8))\nplt.plot(np.linspace(0.5, 0.75, 1000), rec_sc, color='b', label='recall')\nplt.plot(np.linspace(0.50, 0.75, 1000), prec_sc, color='r', label='precision')\nplt.plot(np.linspace(0.50, 0.75, 1000), f1_sc, color='green', label='f1')\nplt.legend(loc='upper right')\nplt.show()","45d8370b":"df_threshold = pd.DataFrame({'threshold': threshold, 'f1': f1_sc, 'recall': rec_sc, 'precision': prec_sc}, \n                           index=range(len(threshold)))","14b8e339":"plt.figure(figsize=(8, 8))\nsns.heatmap(df_threshold.sort_values(by=['f1'], ascending=False)[:40], annot=True, fmt='.4f');","e324f147":"threshold[703]","b98eb994":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred_prob[:, 1] > 0.6759259259259259)","23429e04":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","7fc22366":"print_metrics(ds_test.stroke, y_pred_prob[:, 1] > 0.6759259259259259)","ec5c89ab":"ds = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter=',')","c90c1f7b":"ds.head(3)","b39231ab":"ds.drop(['id'], axis=1, inplace=True)","10b25166":"ds.stroke[ds.gender == 'Other']","83c180c0":"ds.drop([3116], inplace=True)","46a89fe4":"def replace_nan(data, to_replace, replacement_data):\n    \n    data_def = data.copy(deep=True)\n    \n    index_zero = list(data_def[to_replace][data_def[replacement_data] == 0].index)\n    index_one = list(data_def[to_replace][data_def[replacement_data] == 1].index)\n    \n    for i in range(2):\n        minimum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.25)\n        maximum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.75)\n        \n        minimum -= (maximum - minimum) * 0.5\n        maximum += (maximum - minimum) * 0.5\n    \n        count = data_def[to_replace][data_def[replacement_data] == i].isnull().sum()\n        \n        data_for_nan = np.random.choice(range(int(minimum), int(maximum)), count)\n    \n        if i == 0:\n            index_null = data_def[to_replace][index_zero][data_def[to_replace].isnull()].index\n        else:\n            index_null = data_def[to_replace][index_one][data_def[to_replace].isnull()].index\n        \n        data_def[to_replace][index_null] = data_for_nan\n        \n    return data_def","a87df86c":"ds = replace_nan(ds, 'bmi', 'stroke')","06b30f0c":"ds = pd.get_dummies(ds, columns=columns_dummis, prefix_sep='_', drop_first=True)","6c8a3de9":"ds.head(3)","ac441c8d":"from sklearn.model_selection import train_test_split","86527445":"ds_train, ds_test = train_test_split(ds, test_size=0.3, random_state=42, stratify=ds.stroke)","1524a2cd":"ds_train.stroke.value_counts(normalize=True), ds_test.stroke.value_counts(normalize=True)","0f8fedb7":"ds_train.shape[0] + ds_test.shape[0], ds.shape","a36c8571":"add_rows = int(ds_train.stroke.value_counts()[0] * .8 - ds_train.stroke.value_counts()[1])\nadd_rows","a33426c6":"int(add_rows \/ ds_train.stroke.value_counts()[1]), ds_train.stroke.value_counts()","6b019700":"index_train_one = ds_train.stroke[ds_train.stroke == 1].index\nds_train_one = ds_train.loc[index_train_one]","2382942a":"for i in range(14):\n    ds_train = ds_train.append(ds_train_one)\n    #y_train = pd.concat([y_train, y_train[y_train == 1]])","79e4b9f7":"ds_train.stroke.value_counts(normalize=True)","0e6ddbbd":"from sklearn.utils import shuffle","c20fccaf":"ds_train = shuffle(ds_train)","b3b95bb3":"scaler_MM = MinMaxScaler()","ab2aff7c":"ds_train[columns_numeric] =  scaler_MM.fit_transform(ds_train[columns_numeric])","4a83bf22":"ds_train.head(3)","b35b9b89":"ds_test[columns_numeric] = scaler_MM.transform(ds_test[columns_numeric])","cc84ae72":"%%time\nbest_f1 = []\nbest_recall = []\nbest_roc_auc = []\nbest_precision = [] \nx = []\nx_keys = []\nn = 0\n\nfor cr in ['rbf']:\n    for c in [0.20, 0.25, 0.30, 0.35, 0.4]:\n        for g in [0.0001, 0.005, 0.01, 0.05, 0.1]:\n            model = SVC(kernel=cr, C=c, gamma=g, probability=True, random_state=33)\n                \n            model.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\n            y_pred = model.predict(ds_test.drop(['stroke'], axis=1))\n                \n            f1 = f1_score(ds_test.stroke, y_pred)\n            best_f1.append(f1)\n                \n            recall = recall_score(ds_test.stroke, y_pred)\n            best_recall.append(recall)\n                \n            precision = precision_score(ds_test.stroke, y_pred)\n            best_precision.append(precision)\n                \n            y_pred_prob = model.predict_proba(ds_test.drop(['stroke'], axis=1))\n            roc_auc = roc_auc_score(ds_test.stroke, y_pred_prob[:, 1])\n            best_roc_auc.append(roc_auc)\n                \n            x_keys.append(str(cr) +' '+ str(c) +' '+ str(g))\n            x.append(n)\n            n += 1","8fa278c2":"scores = {'f1': best_f1, 'recall': best_recall, 'precision': best_precision, 'roc_auc': best_roc_auc, 'key': x_keys}\n\ndf_scores = pd.DataFrame(scores, index=x)","eaa94598":"df_scores.sort_values(by=['f1', 'recall'], ascending=False)[:20]","760c8fb7":"plt.figure(figsize=(8, 10))\nsns.heatmap(df_scores.loc[:, ['f1', 'recall', 'precision', 'roc_auc']].sort_values(by='f1', ascending=False)[:30], \n           annot=True, fmt='.5f');","128052ac":"model_svc = SVC(kernel='rbf', C=0.4, gamma=0.01, probability=True, random_state=33)","2e0c58e0":"model_svc.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","6b15a3cf":"y_pred = model_svc.predict(ds_test.drop(['stroke'], axis=1))","62e52a94":"print_metrics(ds_test.stroke, y_pred)","5ac3f4d8":"y_ped_prob = model_svc.predict_proba(ds_test.drop(['stroke'], axis=1))","d1952a53":"sns.heatmap(confusion_matrix(ds_test.stroke, y_pred), \n            cmap='Blues', annot=True, fmt='');","210be8ba":"plot_roc_auc(ds_test.stroke, y_pred_prob[:, 1])","14ba237f":"f1_sc = []\nthreshold = []\nrec_sc = []\nprec_sc = []\n\nfor i in np.linspace(0.50, 0.80, 1000):\n    recall_sc = recall_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    precision_sc = precision_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f_one = f1_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f1_sc.append(f_one)\n    threshold.append(i)\n    rec_sc.append(recall_sc)\n    prec_sc.append(precision_sc)","ff7de714":"plt.figure(figsize=(15, 8))\nplt.plot(np.linspace(0.50, 0.80, 1000), rec_sc, color='b', label='recall')\nplt.plot(np.linspace(0.50, 0.80, 1000), prec_sc, color='r', label='precision')\nplt.plot(np.linspace(0.50, 0.80, 1000), f1_sc, color='green', label='f1')\nplt.legend(loc='upper right')\nplt.show()","17f58208":"df_threshold = pd.DataFrame({'threshold': threshold, 'f1': f1_sc, 'recall': rec_sc, 'precision': prec_sc}, \n                           index=range(len(threshold)))","6aebbd10":"plt.figure(figsize=(8, 10))\nsns.heatmap(df_threshold.sort_values(by=['f1'], ascending=False)[:50], annot=True, fmt='.4f');","2ca6244a":"threshold[504]","f37fe6d0":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred_prob[:, 1] > 0.6513513513513514)","44b57d38":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","8bb41d5f":"print_metrics(ds_test.stroke, y_pred_prob[:, 1] > 0.6513513513513514)","319bf30a":"### --------------- metrics ------------------------","84d55ee3":"### --------------- SVC --------------------------","d094c213":"#### selection of threshold","b4162f51":"### ------------ SVC ----------------------","6d50a467":"- Scaler -> StandardScaler      \n- SVC      \n    - kernel='rbf'       \n    - C=0.95         \n    - gamma=0.0045       \n\n- threshold - 0.6759259259259259      \n","673e60ea":"### --------------- Scaler ---------------------","d813dcf6":"### ------ Best params --------------","35feeb3f":"results:      \n- Accuracy: 0.871\n- Precision: 0.214\n- Recall: 0.613\n- F1 score: 0.317   ","4aadaf04":"#### selection of threshold","d5adf3f0":"### --------------- Scaler MM---------------------","7f79e14b":"#### selection of parameters","e93c1e3a":"#### selection of params","908b673b":"#### load ds for Scaler Min Max"}}