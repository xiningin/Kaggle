{"cell_type":{"84b7de60":"code","56a8efe7":"code","847ac1b9":"code","6afff0fb":"code","07bc8519":"code","8dca5abf":"code","15e7c7bd":"code","da2b9e3b":"code","368d948d":"code","73a2d1fc":"code","376cf020":"code","66eaaeb2":"code","2d9bdceb":"code","2c266361":"code","a7732acb":"code","639cc7cf":"code","493f74b9":"code","7cdde09b":"code","7bb1eb80":"code","b791c10b":"markdown","fc50b783":"markdown"},"source":{"84b7de60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(action='ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\nfrom random import choices\ncolor_ls = '1234567890'*10\ndef color():\n    return '#'+''.join(choices(color_ls , k=6))","56a8efe7":"# loading the Dataset\ndf = pd.read_csv('..\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv')\nprint('csv file loaded')","847ac1b9":"# viewing the full data set\ndf\n","6afff0fb":"# viewing  information of dataset\ndf.info()","07bc8519":"# Checking for Null values\ndf.isna().sum()","8dca5abf":"# Describing our Data\ndf.describe()","15e7c7bd":"# How Many States data we have\ndf['State\/UTs'].unique().size","da2b9e3b":"# Difining numerical and categorical features lists\ncat_col = ['State\/UTs']\nnum_col = ['Total Cases', 'Active', 'Discharged', 'Deaths', 'Active Ratio', 'Discharge Ratio', 'Death Ratio']","368d948d":"avg_active_cases = df.Active.mean()\navg_deaths = df.Deaths.mean()\navg_discharged = df.Discharged.mean()\navg_total_cases = df['Total Cases'].mean()\nprint(f'Average Total Cases Over All states : {avg_total_cases:>20.2f}')\nprint(f'Average Patient Discharged Over All states : {avg_discharged:>13.2f}')\nprint(f'Average Deaths Over All states : {avg_deaths:>24.2f}' )\nprint(f'Average Active Cases Over All states : {avg_active_cases:>17.2f}')","73a2d1fc":"ls = [avg_total_cases ,avg_active_cases, avg_discharged , avg_deaths  ]\nplt.figure(dpi=140 , figsize=(8,4))\nplt.title('Plot to Show Average  Total , Active , Discharged and Deaths\\n' , fontdict={'c':'k' , 'size':10 } ,loc='left')\nbars = plt.bar(df.columns[1:-3] , ls )\nfor bar in bars:\n    bar.set_color(color())\n    plt.text(bar.get_x()+bar.get_width()\/4 , bar.get_height()+10000 , s = f'{bar.get_height():.2f}' )\nplt.show()","376cf020":"# plot to see distribution of all frautures across all states\nfor f in num_col:\n    df1 = df.sort_values(by=[f],axis=0 , ignore_index=True)\n    plt.figure(dpi=100 , figsize=(20 ,9) ,facecolor='black')\n    plt.title(f'{f} Across All States' , color='salmon' ,size=20)\n    sns.pointplot(df['State\/UTs'] , df1[f] , color='salmon')\n    plt.xticks(rotation=90 , color='salmon')\n    plt.yticks(color='salmon')\n    plt.grid(ls=':' ,color='black' ,lw=.5)\n    plt.xlabel('State\/UTs' ,fontdict={'size':16 , 'weight':'heavy','color':'salmon'})\n    plt.ylabel(f ,fontdict={'size':16 , 'weight':'heavy','color':'salmon'})\n    plt.show()\n    print('\\n\\n\\n\\n\\n')","66eaaeb2":"# Function to Plot Average numerical features pre State\n\ndef plot_avg(x_val , y_val):\n    plt.figure(dpi=100 , figsize=(10 ,5))\n    bars = plt.bar(x_val , y_val ,)\n    for bar in bars:\n        bar.set_color(color())\n    plt.xlabel('States',fontdict={'size':14 , 'c':'red'})\n    plt.xticks(rotation=90)\n    plt.ylabel(num_features , fontdict={'size':14,'c':'red'})\n    plt.title(f'Average {num_features} Per State',fontdict={'c':'#1E4A17','size':'20'})\n    plt.show()   ","2d9bdceb":"# Creating Plots via Loops \nfor num_features in num_col:\n    grp_obj = df.groupby('State\/UTs').agg({num_features : 'mean'})\n    plot_avg(grp_obj.index , grp_obj[num_features])\n    print('\\n\\n\\n\\n')\n    \n    \n","2c266361":"# Corelation between Total Cases and Deaths\ncorr = np.corrcoef(df['Total Cases'],df['Deaths'])[0 ,1]\ncorr","a7732acb":"plt.figure(dpi=200 , figsize=(10,5))\nplt.title('Correlation Plot B\/W Total Cases and Deaths')\nsns.scatterplot(x=df['Total Cases'] ,y=df['Deaths'],data=df ,label=f'Corr : { corr :.2f}' , hue='Deaths', size='Deaths'  ,)\nplt.show()","639cc7cf":"# Corelation between Total Cases and Discharged\nnp.corrcoef(df['Total Cases'],df['Discharged'])[0 ,1]","493f74b9":"# Since the corelation is 99.99% Hence we can say that \n# no. Discharged  totally depends on Total Cases\n\nplt.figure(dpi=100 , figsize=(10,5))\nplt.title('Correlation Plot B\/W Total Cases and Discharged')\nsns.scatterplot(x=df['Total Cases'] ,y=df['Discharged'] ,color='salmon')\nplt.show()","7cdde09b":"# Corelation between Total Cases and Active\nnp.corrcoef(df['Total Cases'],df['Active'])[0 ,1]","7bb1eb80":"plt.figure(dpi=100 , figsize=(10,5))\nplt.title('Correlation Plot B\/W Total Cases and Active Cases')\nsns.scatterplot(x=df['Total Cases'] ,y=df['Active'] ,color='Green' )\nplt.show()","b791c10b":"**Average `Total` , `Active` , `Discharged` and `Deaths`**","fc50b783":"### correlation plots"}}