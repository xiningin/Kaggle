{"cell_type":{"6fa7ede5":"code","e8c9c959":"code","c8f054cf":"code","fd7350a3":"code","ef10037d":"code","4a667f73":"code","81b6a40c":"code","d24fb37b":"code","3f63d7d9":"code","c5757ef5":"code","401f9368":"code","d06ef7fc":"code","f5ff894a":"code","f8ea27c3":"code","69192c31":"code","3fb6e332":"code","50d5c745":"code","5bf4325d":"code","36d7b8dc":"code","85ea3b54":"code","8d2e395e":"code","46965612":"code","a5ac68ad":"code","36f896e3":"code","452647b1":"code","494ba1b1":"markdown","9cb7670f":"markdown"},"source":{"6fa7ede5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8c9c959":"import matplotlib.pyplot as plt \nimport seaborn as sns \nimport random","c8f054cf":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')","fd7350a3":"df.head(3)","ef10037d":"df.shape","4a667f73":"df.dtypes","81b6a40c":"fig, ax = plt.subplots(2,2,figsize=(15,20))\n\nsns.countplot(x='sex',data=df, ax=ax[0,0])#, color=\"orangered\");\nax[0,0].set_title(\"Gender Count\");\n\nsns.countplot(x='children',data=df, ax=ax[0,1]) #color=\"lightseagreen\";\nax[0,1].set_title(\"Children Number Count\");\n\nsns.countplot(x='smoker',data=df, ax=ax[1,0]) #color=\"orangered\");\nax[1,0].set_title(\"Smoker Number Count\");\n\nsns.countplot(x='region',data=df, ax=ax[1,1])# color=\"lightseagreen\");\nax[1,1].set_title(\"Region Number Count\");","d24fb37b":"df_age = df.groupby('age').size().reset_index(name='counts')\nn = df_age['age'].unique().__len__()+1\nall_colors = list(plt.cm.colors.cnames.keys())\nrandom.seed(100)\nc = random.choices(all_colors, k=n)\n\nplt.figure(figsize=(18,15), dpi= 80)\nplt.bar(df_age['age'], df_age['counts'], color=c, width=.5)\n\nplt.gca().set_xticklabels(df_age['age'], rotation=60, horizontalalignment= 'right')\nplt.title(\"Number of Age\", fontsize=22)\nplt.ylabel('# Age')\nplt.ylim(0, 80)\nplt.show()","3f63d7d9":"fig, ax = plt.subplots(2,2,figsize=(15,20))\n\nsns.barplot(x=\"sex\", y=\"charges\", data=df, ax=ax[0,0])\nax[0,0].set_title(\"Gender medical charge\");\n\nsns.barplot(x=\"children\", y=\"charges\", data=df, ax=ax[0,1])\nax[0,1].set_title(\"Children Number And Medical Charge\");\n\nsns.barplot(x=\"smoker\", y=\"charges\", data=df, ax=ax[1,0])\nax[1,0].set_title(\"Smoker And Non-Smoker Medical Charge\");\n\nsns.barplot(x=\"region\", y=\"charges\", data=df, ax=ax[1,1])\nax[1,1].set_title(\"Region And Medical Charge\");","c5757ef5":"fig, ax = plt.subplots(2,1,figsize=(15,20))\n\nsns.distplot(df.charges, ax=ax[0])\nax[0].set_title(\"Charge Distribution\");\n\nsns.distplot(np.log(df.charges),ax=ax[1])\nax[1].set_title(\"Charge Log Distribution\");","401f9368":"fig, ax = plt.subplots(figsize=(16,10), dpi= 80)    \nsns.stripplot(df.age, df.charges, jitter=0.25, size=8, ax=ax, linewidth=.5)\n\nplt.title('Age Medical Charge distribution', fontsize=22)\nplt.show()","d06ef7fc":"fig, ax = plt.subplots(2,2,figsize=(15,20))\n\nsns.barplot(x=\"sex\", y=\"bmi\", data=df, ax=ax[0,0])\nax[0,0].set_title(\"Gender Bmi\");\n\nsns.barplot(x=\"children\", y=\"bmi\", data=df, ax=ax[0,1])\nax[0,1].set_title(\"Children Number And Bmi\");\n\nsns.barplot(x=\"smoker\", y=\"bmi\", data=df, ax=ax[1,0])\nax[1,0].set_title(\"Smoker And Bmi\");\n\nsns.barplot(x=\"region\", y=\"bmi\", data=df, ax=ax[1,1])\nax[1,1].set_title(\"Region And Bmi\");","f5ff894a":"sns.distplot(df.bmi)\nplt.title(\"Bmi Distribution\");","f8ea27c3":"fig, ax = plt.subplots(figsize=(16,10), dpi= 80)    \nsns.stripplot(df.age, df.bmi, jitter=0.25, size=8, ax=ax, linewidth=.5)\n\nplt.title('Age Medical Bmi', fontsize=22)\nplt.show()","69192c31":"fig, ax = plt.subplots(3,1,figsize=(15,20))\n\nsns.countplot(x=\"sex\", hue=\"smoker\", data=df,ax=ax[0])\nax[0].set_title(\"Gender And Smoker\");\n\n\nsns.countplot(x=\"children\", hue=\"smoker\", data=df,ax=ax[1])\nax[1].set_title(\"Children Number And Smoker\");\n\nsns.countplot(x=\"region\", hue=\"smoker\", data=df,ax=ax[2])\nax[1].set_title(\"Region And Smoker\");","3fb6e332":"fig, ax = plt.subplots(2,1,figsize=(15,20))\n\nsns.countplot(x=\"sex\", hue=\"region\", data=df,ax=ax[0])\nax[0].set_title(\"Gender And region\");\n\nsns.countplot(x=\"children\", hue=\"region\", data=df,ax=ax[1])\nax[1].set_title(\"Children Number And region\");\n","50d5c745":"plt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)\n\nplt.title('Correlogram of df', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","5bf4325d":"value = df.loc[:,['bmi', 'charges']]","36d7b8dc":"train_ml=value.iloc[:int(value.shape[0]*0.95)]\nvalid_ml=value.iloc[int(value.shape[0]*0.95):]","85ea3b54":"from sklearn.metrics import mean_squared_error,r2_score\nfrom catboost import CatBoostRegressor\nX = np.array(train_ml[\"bmi\"]).reshape(-1,1)\ny = np.array(train_ml[\"charges\"]).reshape(-1,1)","8d2e395e":"cb_model = CatBoostRegressor(iterations=500,\n                             learning_rate=0.05,\n                             depth=10,\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)\ncb_model.fit(X, y)\nr2_score(cb_model.predict(X), y)","46965612":"plt.figure(figsize=(11,6))\nprediction_cat=cb_model.predict(np.array(train_ml[\"bmi\"]).reshape(-1,1))\nplt.plot(train_ml[\"charges\"],label=\"Actual charges\")\nplt.plot(train_ml.index,prediction_cat, linestyle='solid',label=\"Predicted charges using Catboost\",color='black')\nplt.xlabel('bmi')\nplt.ylabel('charges')\nplt.title(\"charges Linear Regression Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","a5ac68ad":"from sklearn import preprocessing\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, GridSearchCV","36f896e3":"X = np.array(train_ml[\"bmi\"]).reshape(-1,1)\ny = np.array(train_ml[\"charges\"]).reshape(-1,1)\nkfold = KFold(n_splits=5, random_state = 2020, shuffle = True)\n\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nmodel_lgb.fit(X,y)\nprediction_valid_bgm=model_lgb.predict(np.array(valid_ml[\"bmi\"]).reshape(-1,1))\nprint(\"Validation LightBGM prediction:\",prediction_valid_bgm)","452647b1":"plt.figure(figsize=(11,6))\nprediction_bgm=model_lgb.predict(np.array(train_ml[\"bmi\"]).reshape(-1,1))\nplt.plot(train_ml[\"charges\"],label=\"Actual Charges\")\nplt.plot(train_ml.index,prediction_bgm, linestyle='--',label=\"Predicted Charges using LightBGM\",color='black')\nplt.xlabel('bmi')\nplt.ylabel('charges')\nplt.title(\"Charges Linear Regression Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","494ba1b1":"# LightBGM ","9cb7670f":"# Two Medeling results are similar"}}