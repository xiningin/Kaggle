{"cell_type":{"2bb27fc7":"code","b5d31e3a":"code","aa256f05":"code","ad720b77":"code","0a02d3b1":"code","b9b4a8ce":"code","21becb0e":"code","0270158f":"code","68985ce7":"code","9bd180e8":"code","e3275ca7":"code","f5ce7779":"code","2c491ef9":"code","c2e640c8":"code","deb3c9b2":"code","4113d4e0":"code","f3f18a6d":"code","21ed723f":"code","f5184e00":"code","380c2b27":"code","f0ea839f":"code","05c371ab":"code","23df0fdb":"code","1aa5e494":"markdown"},"source":{"2bb27fc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5d31e3a":"df = pd.read_csv(\"..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf.head()","aa256f05":"df.shape","ad720b77":"df.isnull().any() #\u0e40\u0e0a\u0e47\u0e04 missing data","0a02d3b1":"df.isnull().sum(axis=0)","b9b4a8ce":"df_clean = df","21becb0e":"df_clean = df_clean.drop(['PaperlessBilling', 'Contract', 'tenure','Dependents', 'SeniorCitizen'],axis = 1)\ndf_clean.isnull().sum(axis=0)","0270158f":"df_clean = df_clean.drop(['Partner'],axis = 1)\ndf_clean.isnull().sum(axis=0)","68985ce7":"df_clean.dtypes","9bd180e8":"#\u0e41\u0e1b\u0e25\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e25\u0e02\ndf_clean['customerID'] = pd.factorize(df_clean['customerID'])[0]\ndf_clean['gender'] = pd.factorize(df_clean['gender'])[0]\ndf_clean['PhoneService'] = pd.factorize(df_clean['PhoneService'])[0]\n\ndf_clean['MultipleLines'] = pd.factorize(df_clean['MultipleLines'])[0]\ndf_clean['InternetService'] = pd.factorize(df_clean['InternetService'])[0]\ndf_clean['OnlineSecurity'] = pd.factorize(df_clean['OnlineSecurity'])[0]\n\ndf_clean['OnlineBackup'] = pd.factorize(df_clean['OnlineBackup'])[0]\ndf_clean['DeviceProtection'] = pd.factorize(df_clean['DeviceProtection'])[0]\ndf_clean['TechSupport'] = pd.factorize(df_clean['TechSupport'])[0]\n\ndf_clean['StreamingTV'] = pd.factorize(df_clean['StreamingTV'])[0]\ndf_clean['StreamingMovies'] = pd.factorize(df_clean['StreamingMovies'])[0]\ndf_clean['PaymentMethod'] = pd.factorize(df_clean['PaymentMethod'])[0]\n\ndf_clean['MonthlyCharges'] = pd.factorize(df_clean['MonthlyCharges'])[0]\ndf_clean['TotalCharges'] = pd.factorize(df_clean['TotalCharges'])[0]\ndf_clean['Churn'] = pd.factorize(df_clean['Churn'])[0]\n\ndf_clean\n","e3275ca7":"df_clean.dtypes","f5ce7779":"X = df_clean.drop('Churn', axis = 1)\ny = df_clean['Churn']","2c491ef9":"y","c2e640c8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","deb3c9b2":"X_train.shape","4113d4e0":"X_test.shape","f3f18a6d":"y_train.shape","21ed723f":"y_test.shape","f5184e00":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=0)","380c2b27":"from imblearn.over_sampling import SMOTE\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nsm = SMOTE(random_state=1)\nX_res, y_res = sm.fit_resample(X_train, y_train)\n\nparams = {'C' : [1, 2, 4, 8, 16]}\n\nfrom sklearn.pipeline import Pipeline\nclf = Pipeline([\n  ('scaler', MinMaxScaler(feature_range=(0, 1))),\n  ('feature_selection', SelectKBest(f_classif, k=5)),\n  ('classification', GridSearchCV(LogisticRegression(random_state=0, solver='liblinear'),params, cv=5))\n])\nclf.fit(X_res, y_res)","f0ea839f":"acc = best_clf.best_score_\nprint(\"10CV accuracy: \"+str(acc))","05c371ab":"best_clf.best_params_","23df0fdb":"yp = best_clf.predict(X_test)\nacc = sum(yp == y_test)\/len(y_test)\nprint(\"Test Training accuracy: \"+str(acc))","1aa5e494":"#### Q1. Create Model to predict the Telco customer churn (Churn = Label).\n<b><font color=red>The difference of Train and Test accuracy must be lower than 10% to get full score.<\/font><\/b>"}}