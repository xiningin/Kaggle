{"cell_type":{"c3478ccd":"code","5a132aec":"code","c2f043fb":"code","aeea0be1":"code","d013211e":"code","2eedace9":"code","6aeaeafd":"code","70b4a495":"code","58ff108b":"code","f46f21b4":"code","72f483b9":"code","bd1ebaf1":"code","aea15adc":"code","4e7ba596":"code","7031b9c6":"code","2357e42c":"code","da624cf9":"code","9568045b":"code","4694eca8":"code","ad9b877c":"code","3b50089a":"code","a615d226":"code","d126b909":"code","54df5e13":"code","7317a373":"code","3f4651fa":"markdown","e3946d14":"markdown","a347617d":"markdown","780b6231":"markdown","2eddb4ff":"markdown","be5044e1":"markdown","74ad0f77":"markdown"},"source":{"c3478ccd":"#Wranlging\nimport pandas as pd\nimport numpy as np\n\n#Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Classification\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score","5a132aec":"rank = pd.read_csv('..\/input\/timesData.csv')","c2f043fb":"rank.info()","aeea0be1":"rank.describe()","d013211e":"list(rank.columns.values)","2eedace9":"#Distinct Years\nrank.year.unique()","6aeaeafd":"#Count of Institution by country in 2016\nins_count = rank[rank['year'] == 2016].groupby('country').size().sort_values(ascending = False)\nplt.figure(figsize = (15,15))\nax = sns.barplot(x = ins_count.values, y = ins_count.index)\nax.set(xlabel = 'Country', ylabel = 'Number of Institution')\nfor i in ax.patches:\n    ax.text(i.get_width()+1.0, i.get_y()+0.7,i.get_width().astype(int))\nplt.show()","70b4a495":"#Number of top 100 institution by country in 2016\ntop_count = rank[rank['year'] == 2016].head(100).groupby('country').size().sort_values(ascending = False)\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = top_count.values, y = top_count.index)\nax.set(xlabel = 'Country', ylabel = 'Number of top 100 Institution')\nfor i in ax.patches:\n    ax.text(i.get_width()+0.2, i.get_y()+0.6,i.get_width().astype(int))\nplt.show()","58ff108b":"#Percentage of top 100 institution by country in 2016\nper_count = top_count\/ins_count\nper_count.dropna(inplace = True)\nper_count.sort_values(ascending = False, inplace = True)\nplt.figure(figsize = (15,10))\nax = sns.barplot(x = per_count.values, y = per_count.index)\nax.set(xlabel = 'Country', ylabel = 'Percentage of top 100 Institution')\nfor i in ax.patches:\n    ax.text(i.get_width(), i.get_y()+0.5,str(round(i.get_width()*100,1))+'%')\nplt.show()","f46f21b4":"#Define a new dataframe\nuniversity_name = list(rank.university_name.unique())\nnon_decreasing = pd.DataFrame(data=university_name,columns=['university_name'])\nnon_decreasing.head()","72f483b9":"#filtering \ndef non_decreasing_rank(university_name):\n    world_rank = list(rank[rank.university_name == university_name]['world_rank'])\n    count = rank.groupby('university_name').size()[university_name]\n    for i in range(1,count): #1,2,3\n        if world_rank[i-1] < world_rank[i]:\n            return False\n    return True\n\n#Moment of truth\nnon_decreasing[non_decreasing['university_name'].apply(non_decreasing_rank) == True]","bd1ebaf1":"#We are using 2015 figures\nrank2015_raw = rank[rank.year == 2015]\nrank2015_raw.drop(['country','year'],axis = 1, inplace = True)\nrank2015_raw.head()","aea15adc":"rank2015_raw.isnull().sum()","4e7ba596":"#I'm using forward fill because data is in order. I would assume university close to others in rank have similar values.\nrank2015_raw.fillna(method='ffill',inplace = True)","7031b9c6":"rank2015_raw.isnull().sum()","2357e42c":"rank2015_raw.isin(['-']).sum()","da624cf9":"#Dropping rows with '-'\nrank2015_raw = rank2015_raw[(~rank2015_raw['total_score'].isin(['-']))&(~rank2015_raw['income'].isin(['-']))]\nrank2015_raw.isin(['-']).sum()","9568045b":"#Need to convert string to numeric\ncol = list(rank2015_raw.columns.values)\n\nfor i in range(2,8):\n    rank2015_raw[col[i]] = pd.to_numeric(rank2015_raw[col[i]])","4694eca8":"rank2015_raw.shape","ad9b877c":"factor = col[2:7]\nfor i in range(len(factor)):\n    z = rank2015_raw[factor[i]]\n    plt.figure(i)\n    sns.regplot(x=z, y='total_score', data = rank2015_raw)","3b50089a":"cor = pd.DataFrame()\nfor i in range(len(factor)):\n    cor[factor[i]] = rank2015_raw[factor[i]]\ncor['total_score'] = rank2015_raw.total_score\ncor.corr() ","a615d226":"score = rank2015_raw.total_score\ntrain = rank2015_raw[factor] \nlab_enc = preprocessing.LabelEncoder()\nscore_encoded = lab_enc.fit_transform(score)","d126b909":"x_train, y_train, x_test, y_test = train_test_split(train,score_encoded,train_size = 0.9, random_state = 0)","54df5e13":"#Decision Tree\ntree = DecisionTreeClassifier()\ntree.fit(x_train,x_test)\ny_pred = tree.predict(y_train)\ny1 = lab_enc.inverse_transform(y_test)\ny2 = lab_enc.inverse_transform(y_pred)","7317a373":"print(np.corrcoef(y1,y2))\nsns.regplot(y1,y2)","3f4651fa":"## Question 3: Predict University Rankings based on different factors","e3946d14":"## Question 2 : Which factors are more determining at rankings","a347617d":"# List of Questions we would like to answer\nQuestion 1: Identify Universities whose rank has been non-decreasing. <br>\nQuestion 2: Which factors are more determining at rankings <br>\nQuestion 3: Predict University Rankings based on different factors <br>","780b6231":"We can start analysing.","2eddb4ff":"## Question 1: Identify Universities whose rank has been non-decreasing.","be5044e1":"### But first, let's see some basic stats. ","74ad0f77":"#### Firstly, we need to clean the data."}}