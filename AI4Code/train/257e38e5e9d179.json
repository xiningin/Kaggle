{"cell_type":{"bea3adc1":"code","45020d84":"code","09888d0a":"code","c4f5e7da":"code","bbedaa03":"code","01a67872":"code","d6e8f34e":"code","f61b39e0":"code","990b8209":"code","e1d9fb59":"code","c586a3f3":"code","b6b99b58":"code","74477d36":"code","21f73f09":"code","6496ff8b":"code","0bd46737":"code","3cfaaa2b":"code","4e44cf09":"code","271f9608":"markdown","c9a5652c":"markdown"},"source":{"bea3adc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# import dataset \ncancer = pd.read_csv(\"..\/input\/data.csv\")\n\n# Any results you write to the current directory are saved as output.","45020d84":"# General\nsns.set()\n# getting the shape\ncancer.info()\n\ncancer.describe()\ncancer.shape\ncancer.dtypes","09888d0a":"cancer.head(2)","c4f5e7da":"cancer.drop(['Unnamed: 32',\"id\"], axis=1)\ncancer.head(2)","bbedaa03":"cancer.isnull().sum()","01a67872":"sns.countplot(x=\"diagnosis\", data=cancer, palette=\"bwr\")\nplt.title('Distibution of Benign and Malignant')\nplt.show()","d6e8f34e":"corr = cancer.corr()\ncorr.head()","f61b39e0":"\nplt.figure(figsize=(20,20))\nsns.heatmap(corr)\n#corelation matrix\nplt.figure(figsize=(20,20))\nsns.heatmap(cbar=False,annot=True,data=cancer.corr()*100,cmap='coolwarm')\nplt.title('% Corelation Matrix')\nplt.show()","990b8209":"list_mean=['diagnosis','radius_mean','texture_mean','perimeter_mean','area_mean',\n      'smoothness_mean','compactness_mean','concavity_mean',\n      'concave points_mean','symmetry_mean','fractal_dimension_mean']\ncancer_mean=cancer[list_mean]\ncancer_mean.head()\n#correlation map\nf,ax = plt.subplots(figsize=(9, 8))\nsns.heatmap(cancer_mean.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","e1d9fb59":"list_SE=['diagnosis','radius_se','texture_se','perimeter_se','area_se',\n      'smoothness_se','compactness_se','concavity_se',\n      'concave points_se','symmetry_se','fractal_dimension_se']\ncancer_SE=cancer[list_SE]\ncancer_SE.head()\n#correlation map\nf,ax = plt.subplots(figsize=(9, 8))\nsns.heatmap(cancer_SE.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","c586a3f3":"list_worst=['diagnosis','radius_worst','texture_worst','perimeter_worst','area_worst',\n      'smoothness_worst','compactness_worst','concavity_worst',\n      'concave points_worst','symmetry_worst','fractal_dimension_worst']\ncancer_worst=cancer[list_worst]\ncancer_worst.head()\n#correlation map\nf,ax = plt.subplots(figsize=(9, 8))\nsns.heatmap(cancer_worst.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","b6b99b58":"\nfrom sklearn import datasets\nfrom sklearn import metrics\nfrom sklearn.naive_bayes import GaussianNB\n","74477d36":"model = GaussianNB()\ncancer_SE_y = cancer_SE.loc[:, [\"diagnosis\"]] ### Selective columns based slicing\ncancer_SE_y.head(2)\n","21f73f09":"cancer_SE_x = cancer_SE.iloc[:,2:11]\ncancer_SE_x.head(2)","6496ff8b":"#splitting the dataset into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(cancer_SE_x, cancer_SE_y, test_size = 0.25, random_state = 16)\n\nprint(\"Shape of x_train :\", x_train.shape)\nprint(\"Shape of y_train :\", y_train.shape)\nprint(\"Shape of x_test :\", x_test.shape)\nprint(\"Shape of y_test :\", y_test.shape)\n","0bd46737":"print(\"Description of x_train\",x_train.describe())","3cfaaa2b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n# creating a model\nmodel = RandomForestClassifier(n_estimators = 400, max_depth = 10)\n\n# feeding the training set into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# Calculating the accuracies\nprint(\"Training accuracy :\", model.score(x_train, y_train))\nprint(\"Testing accuarcy :\", model.score(x_test, y_test))\n\n# classification report\ncr = classification_report(y_test, y_pred)\nprint(cr)\n\n","4e44cf09":"# confusion matrix \ncm = confusion_matrix(y_test, y_pred)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, cmap = 'winter')\nplt.title('Confusion Matrix', fontsize = 20)\nplt.show()","271f9608":"Re-select columns with \"mean\" values","c9a5652c":"Chekcing missing values"}}