{"cell_type":{"a7eab314":"code","511cc828":"code","47bca483":"code","f795386f":"code","3d8cf2e0":"code","1425919e":"code","e8992209":"code","a6183ebd":"code","6f1a10c3":"code","75c000f2":"code","a5c54c34":"code","13d3f242":"code","0e6378fb":"code","7085a53e":"code","e0b28e26":"code","0aa72a0c":"code","9bfe1068":"code","a5efbaec":"code","f63d1efd":"code","8035bc42":"code","0462ee60":"code","62d4a119":"code","477c13b9":"code","ce6c8ab9":"code","2df30013":"code","06cb4840":"code","a73a2df0":"code","26a70d32":"markdown","18336ff0":"markdown","6d8fb5c5":"markdown","a6b5fadb":"markdown","ab0e108a":"markdown","fd6c9aa5":"markdown","72ea8701":"markdown","a2329d57":"markdown","bdfaf388":"markdown","ab5defb8":"markdown","d30235e5":"markdown","aad46ae8":"markdown","31ee38af":"markdown","b45738fa":"markdown","ed912ca8":"markdown","d66fd343":"markdown"},"source":{"a7eab314":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge, BayesianRidge\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_log_error","511cc828":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test_X = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","47bca483":"features = [\"LotFrontage\", \"LotArea\", \"MasVnrArea\", \"GarageArea\", \"PoolArea\", \"SalePrice\"]\nfeatures_X = [\"LotFrontage\", \"LotArea\", \"MasVnrArea\", \"GarageArea\", \"PoolArea\"]\n\nids = df_test_X[\"Id\"]\ndf_train = df_train[features].fillna(df_train.median())\ndf_test_X = df_test_X[features_X].fillna(df_test_X.median())","f795386f":"df_X = df_train[features_X]\ndf_Y = df_train[[\"SalePrice\"]]\n\nX = df_X.values\ny = df_Y.values\n\nX_test = df_test_X.values","3d8cf2e0":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=100)","1425919e":"scaler_X = StandardScaler()\nscaler_X.fit(X_train)\n\nscaler_Y = StandardScaler()\nscaler_Y.fit(y_train.reshape(-1, 1))","e8992209":"X_train_scaled = scaler_X.transform(X_train)\nX_val_scaled = scaler_X.transform(X_val)\ny_train_scaled = scaler_Y.transform(y_train.reshape(-1, 1)).reshape(-1)\ny_val_scaled = scaler_Y.transform(y_val.reshape(-1, 1)).reshape(-1)\n\nX_test_scaled = scaler_X.transform(X_test)","a6183ebd":"slr = LinearRegression()\nslr.fit(X_train_scaled, y_train_scaled)\n\ny_train_predict = scaler_Y.inverse_transform(slr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(slr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\")","6f1a10c3":"# Submission code\nslr_submit = LinearRegression()\nslr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(slr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_slr.csv\", index=False)","75c000f2":"params = {'alpha':[0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 120, 150, 1000]}\n\nlasso_r = GridSearchCV(Lasso(), params, cv=5)\nlasso_r.fit(X_train_scaled, y_train_scaled)\nprint(lasso_r.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(lasso_r.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(lasso_r.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","a5c54c34":"# Submission code\nlasso_r_submit = Lasso(alpha = lasso_r.best_params_[\"alpha\"])\nlasso_r_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(lasso_r_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_lasso_r.csv\", index=False)","13d3f242":"params = {'alpha':[0.01, 0.1, 1, 10, 40, 50, 80, 100, 120, 150, 1000]}\n\nridge_r = GridSearchCV(Ridge(), params, cv=5)\nridge_r.fit(X_train_scaled, y_train_scaled)\nprint(ridge_r.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(ridge_r.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(ridge_r.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","0e6378fb":"# Submission code\nridge_r_submit = Ridge(alpha = ridge_r.best_params_[\"alpha\"])\nridge_r_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(ridge_r_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_ridge_r.csv\", index=False)","7085a53e":"params = {'kernel':[\"linear\", \"poly\", \"rbf\", \"sigmoid\"], \"C\":[0.0001, 0.001, 0.01, 0.1, 0.2, 0.4, 0.6, 0.8, 1]}\n\nsvr = GridSearchCV(SVR(), params, cv=5)\nsvr.fit(X_train_scaled, y_train_scaled)\nprint(svr.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(svr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(svr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","e0b28e26":"# Submission code\nsvr_submit = SVR(kernel = svr.best_params_[\"kernel\"], C = svr.best_params_[\"C\"])\nsvr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(svr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_svr.csv\", index=False)","0aa72a0c":"bayesian_r_r = BayesianRidge()\nbayesian_r_r.fit(X_train_scaled, y_train_scaled)\n\ny_train_predict = scaler_Y.inverse_transform(bayesian_r_r.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict)}\")\n\ny_val_predict = scaler_Y.inverse_transform(bayesian_r_r.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict)}\")","9bfe1068":"# Submission code\nbayesian_r_r_submit = BayesianRidge()\nbayesian_r_r_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(bayesian_r_r_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_bayesian_r_r.csv\", index=False)","a5efbaec":"params = {'n_neighbors':np.arange(1, 50)}\n\nknn = GridSearchCV(KNeighborsRegressor(), params, cv=5)\nknn.fit(X_train_scaled, y_train_scaled)\nprint(knn.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(knn.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(knn.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","f63d1efd":"# Submission code\nknn_submit = KNeighborsRegressor(n_neighbors = knn.best_params_[\"n_neighbors\"])\nknn_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(knn_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_knn.csv\", index=False)","8035bc42":"params = {'max_depth':[None, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 50]}\n\ndtr = GridSearchCV(DecisionTreeRegressor(), params, cv=5)\ndtr.fit(X_train_scaled, y_train_scaled)\nprint(dtr.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(dtr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(dtr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","0462ee60":"# Submission code\ndtr_submit = DecisionTreeRegressor(max_depth = dtr.best_params_[\"max_depth\"])\ndtr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(dtr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_dtr.csv\", index=False)","62d4a119":"params = {'n_estimators':[1, 10, 50, 100, 150, 200], \"max_depth\":[None, 5, 10, 20, 50], \"bootstrap\":[True, False]}\n\nrfr = GridSearchCV(RandomForestRegressor(), params, cv=5)\nrfr.fit(X_train_scaled, y_train_scaled)\nprint(rfr.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(rfr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(rfr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","477c13b9":"# Submission code\nrfr_submit = RandomForestRegressor(n_estimators = rfr.best_params_[\"n_estimators\"],\n                                   max_depth = rfr.best_params_[\"max_depth\"],\n                                   bootstrap = rfr.best_params_[\"bootstrap\"])\nrfr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(rfr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_rfr.csv\", index=False)","ce6c8ab9":"params = {'booster':[\"gbtree\", \"gblinear\", \"dart\"],\n          \"reg_alpha\":[0, 0.2, 0.4, 0.6, 0.8, 1],\n          \"reg_lambda\":[0, 0.2, 0.4, 0.6, 0.8, 1]}\n\nxgbr = GridSearchCV(XGBRegressor(), params, cv=5)\nxgbr.fit(X_train_scaled, y_train_scaled)\nprint(xgbr.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(xgbr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(xgbr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","2df30013":"# Submission code\nxgbr_submit = XGBRegressor(booster = xgbr.best_params_[\"booster\"], reg_alpha = xgbr.best_params_[\"reg_alpha\"], reg_lambda = xgbr.best_params_[\"reg_lambda\"])\nxgbr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(xgbr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_xgbr.csv\", index=False)","06cb4840":"params = {'n_estimators':[5, 10, 50, 100],\n          \"loss\":[\"linear\", \"square\"],\n          \"base_estimator\":[None, RandomForestRegressor(n_estimators = rfr.best_params_[\"n_estimators\"],\n                                                        max_depth = rfr.best_params_[\"max_depth\"],\n                                                        bootstrap = rfr.best_params_[\"bootstrap\"])]}\n\nabr = GridSearchCV(AdaBoostRegressor(), params, cv=5)\nabr.fit(X_train_scaled, y_train_scaled)\nprint(abr.best_params_)\n\ny_train_predict = scaler_Y.inverse_transform(abr.predict(X_train_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Training set: \\t\\t MAE = {mean_squared_log_error(y_train, y_train_predict):.4f}\")\n\ny_val_predict = scaler_Y.inverse_transform(abr.predict(X_val_scaled).reshape(-1, 1)).reshape(-1).astype(int)\nprint(f\"Validation set: \\t MAE = {mean_squared_log_error(y_val, y_val_predict):.4f}\\n\")","a73a2df0":"# Submission code\nabr_submit = AdaBoostRegressor(n_estimators = abr.best_params_[\"n_estimators\"],\n                               loss = abr.best_params_[\"loss\"],\n                               base_estimator = abr.best_params_[\"base_estimator\"])\nabr_submit.fit(np.concatenate([X_train_scaled, X_val_scaled], axis = 0), np.concatenate([y_train_scaled, y_val_scaled], axis = 0))\n\ny_test_predict = scaler_Y.inverse_transform(abr_submit.predict(X_test_scaled).reshape(-1, 1)).reshape(-1).astype(int)\ndf_test_y = pd.DataFrame(ids, columns = [\"Id\"])\ndf_test_y[\"SalePrice\"] = y_test_predict\ndf_test_y.to_csv(\"submission_abr.csv\", index=False)","26a70d32":"## Random Forest Regressor","18336ff0":"# Preprocessing","6d8fb5c5":"## Decision Tree Regressor","a6b5fadb":"# Regression Models","ab0e108a":"## XGBoost Regressor","fd6c9aa5":"['House Prices - Advanced Regression Techniques'](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/) dataset from Kaggle is used.","72ea8701":"## Lasso Regression","a2329d57":"## Simple (OLS) Linear Regression","bdfaf388":"## Ridge Regression","ab5defb8":"# Load the data","d30235e5":"## AdaBoost Regressor","aad46ae8":"## Support Vector Regression","31ee38af":"## Bayesian Ridge Regression","b45738fa":"## Get features\nSince this is for learning about models, we will be using only few features\/inputs for the model","ed912ca8":"## K-Nearest Neighbours Regressor","d66fd343":"## Get inputs and outputs"}}