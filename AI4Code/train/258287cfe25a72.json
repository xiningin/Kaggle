{"cell_type":{"179de139":"code","5453052e":"code","c8701f37":"code","4358fbdc":"code","07a5fb12":"code","6d3997e6":"code","4d916295":"code","1ca27253":"code","8f83f8e6":"code","4f4b0648":"code","e3f48973":"code","9e9b651d":"code","1798dfe9":"code","df731ee6":"code","5903fe2f":"code","e0f0e052":"code","1e44caff":"code","442c9a11":"code","f6f381c6":"code","1357a5a9":"code","a940e7e8":"code","878f8b80":"code","0190f0f0":"code","967d044e":"code","c678952d":"code","68617b50":"code","2553f161":"code","3898b20a":"code","81a476c7":"code","d48cbb35":"code","13183350":"code","0bc69cd2":"code","e2333a15":"code","0112b326":"code","8bb41154":"code","6f3156d1":"code","ee12f3dc":"code","0d63b2a4":"code","5f4bd5c1":"code","db532808":"code","4d85100e":"code","0a86e6fc":"code","cee27332":"code","c0c77db7":"code","d7efcf52":"code","a3467b90":"code","55e43b6f":"code","0c74acbb":"code","74ead638":"code","cf4f3404":"code","9557a0cd":"markdown","427989a5":"markdown"},"source":{"179de139":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","5453052e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","c8701f37":"covid=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ncovid.head()","4358fbdc":"#Extracting India's data \ncovid_india=covid[covid['Country\/Region']==\"India\"]\n\n#Extracting other countries for comparison of worst affected countries\ncovid_spain=covid[covid['Country\/Region']==\"Spain\"]\ncovid_us=covid[covid['Country\/Region']==\"US\"]\ncovid_italy=covid[covid['Country\/Region']==\"Italy\"]\ncovid_iran=covid[covid['Country\/Region']==\"Iran\"]\ncovid_france=covid[covid['Country\/Region']==\"France\"]\ncovid_uk=covid[covid['Country\/Region']==\"UK\"]\n\n#Extracting data of neighbouring countries\ncovid_pak=covid[covid['Country\/Region']==\"Pakistan\"]\ncovid_china=covid[covid['Country\/Region']==\"Mainland China\"]\ncovid_afg=covid[covid['Country\/Region']==\"Afghanistan\"]\ncovid_nepal=covid[covid['Country\/Region']==\"Nepal\"]\ncovid_bhutan=covid[covid['Country\/Region']==\"Bhutan\"]\ncovid_lanka=covid[covid[\"Country\/Region\"]==\"Sri Lanka\"]\ncovid_ban=covid[covid[\"Country\/Region\"]==\"Bangladesh\"]","07a5fb12":"#Converting the date into Datetime format\ncovid_india[\"ObservationDate\"]=pd.to_datetime(covid_india[\"ObservationDate\"])\ncovid_spain[\"ObservationDate\"]=pd.to_datetime(covid_spain[\"ObservationDate\"])\ncovid_us[\"ObservationDate\"]=pd.to_datetime(covid_us[\"ObservationDate\"])\ncovid_italy[\"ObservationDate\"]=pd.to_datetime(covid_italy[\"ObservationDate\"])\ncovid_iran[\"ObservationDate\"]=pd.to_datetime(covid_iran[\"ObservationDate\"])\ncovid_france[\"ObservationDate\"]=pd.to_datetime(covid_france[\"ObservationDate\"])\ncovid_uk[\"ObservationDate\"]=pd.to_datetime(covid_uk[\"ObservationDate\"])\n\ncovid_pak[\"ObservationDate\"]=pd.to_datetime(covid_pak[\"ObservationDate\"])\ncovid_china[\"ObservationDate\"]=pd.to_datetime(covid_china[\"ObservationDate\"])\ncovid_afg[\"ObservationDate\"]=pd.to_datetime(covid_afg[\"ObservationDate\"])\ncovid_nepal[\"ObservationDate\"]=pd.to_datetime(covid_nepal[\"ObservationDate\"])\ncovid_bhutan[\"ObservationDate\"]=pd.to_datetime(covid_bhutan[\"ObservationDate\"])\ncovid_lanka[\"ObservationDate\"]=pd.to_datetime(covid_lanka[\"ObservationDate\"])\ncovid_ban[\"ObservationDate\"]=pd.to_datetime(covid_ban[\"ObservationDate\"])","6d3997e6":"#Grouping the data based on the Date \nindia_datewise=covid_india.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nspain_datewise=covid_spain.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nus_datewise=covid_us.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nitaly_datewise=covid_italy.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\niran_datewise=covid_iran.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nfrance_datewise=covid_france.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nuk_datewise=covid_uk.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n\npak_datewise=covid_pak.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nchina_datewise=covid_china.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nafg_datewise=covid_afg.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nnepal_datewise=covid_nepal.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nbhutan_datewise=covid_bhutan.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nlanka_datewise=covid_lanka.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nban_datewise=covid_ban.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","4d916295":"#Adding week column to perfom weekly analysis further ahead\nindia_datewise[\"WeekofYear\"]=india_datewise.index.weekofyear\nspain_datewise[\"WeekofYear\"]=spain_datewise.index.weekofyear\nus_datewise[\"WeekofYear\"]=us_datewise.index.weekofyear\nitaly_datewise[\"WeekofYear\"]=italy_datewise.index.weekofyear\niran_datewise[\"WeekofYear\"]=iran_datewise.index.weekofyear\nfrance_datewise[\"WeekofYear\"]=france_datewise.index.weekofyear\nuk_datewise[\"WeekofYear\"]=uk_datewise.index.weekofyear\n\npak_datewise[\"WeekofYear\"]=pak_datewise.index.weekofyear\nchina_datewise[\"WeekofYear\"]=china_datewise.index.weekofyear\nafg_datewise[\"WeekofYear\"]=afg_datewise.index.weekofyear\nnepal_datewise[\"WeekofYear\"]=nepal_datewise.index.weekofyear\nbhutan_datewise[\"WeekofYear\"]=bhutan_datewise.index.weekofyear\nlanka_datewise[\"WeekofYear\"]=lanka_datewise.index.weekofyear\nban_datewise[\"WeekofYear\"]=ban_datewise.index.weekofyear","1ca27253":"india_datewise[\"Days Since\"]=(india_datewise.index-india_datewise.index[0])\nindia_datewise[\"Days Since\"]=india_datewise[\"Days Since\"].dt.days","8f83f8e6":"grouped_country=covid.groupby([\"Country\/Region\",\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})","4f4b0648":"grouped_country[\"Active Cases\"]=grouped_country[\"Confirmed\"]-grouped_country[\"Recovered\"]-grouped_country[\"Deaths\"]\ngrouped_country[\"log_confirmed\"]=np.log(grouped_country[\"Confirmed\"])\ngrouped_country[\"log_active\"]=np.log(grouped_country[\"Active Cases\"])","e3f48973":"print(\"Number of Confirmed Cases\",india_datewise[\"Confirmed\"].iloc[-1])\nprint(\"Number of Recovered Cases\",india_datewise[\"Recovered\"].iloc[-1])\nprint(\"Number of Death Cases\",india_datewise[\"Deaths\"].iloc[-1])\nprint(\"Number of Active Cases\",india_datewise[\"Confirmed\"].iloc[-1]-india_datewise[\"Recovered\"].iloc[-1]-india_datewise[\"Deaths\"].iloc[-1])\nprint(\"Number of Closed Cases\",india_datewise[\"Recovered\"].iloc[-1]+india_datewise[\"Deaths\"].iloc[-1])\nprint(\"Approximate Number of Confirmed Cases per day\",round(india_datewise[\"Confirmed\"].iloc[-1]\/india_datewise.shape[0]))\nprint(\"Approximate Number of Recovered Cases per day\",round(india_datewise[\"Recovered\"].iloc[-1]\/india_datewise.shape[0]))\nprint(\"Approximate Number of Death Cases per day\",round(india_datewise[\"Deaths\"].iloc[-1]\/india_datewise.shape[0]))\nprint(\"Number of New Cofirmed Cases in last 24 hours are\",india_datewise[\"Confirmed\"].iloc[-1]-india_datewise[\"Confirmed\"].iloc[-2])\nprint(\"Number of New Recoverd Cases in last 24 hours are\",india_datewise[\"Recovered\"].iloc[-1]-india_datewise[\"Recovered\"].iloc[-2])\nprint(\"Number of New Death Cases in last 24 hours are\",india_datewise[\"Deaths\"].iloc[-1]-india_datewise[\"Deaths\"].iloc[-2])","9e9b651d":"plt.figure(figsize=(15,5))\nsns.barplot(x=india_datewise.index.date,y=india_datewise[\"Confirmed\"]-india_datewise[\"Recovered\"]-india_datewise[\"Deaths\"])\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Cases\")\nplt.xlabel(\"Date\")\nplt.title(\"Distribution of Number of Active Cases in India over Date\")","1798dfe9":"plt.figure(figsize=(15,5))\nsns.barplot(x=india_datewise.index.date,y=india_datewise[\"Recovered\"]+india_datewise[\"Deaths\"])\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Cases\")\nplt.xlabel(\"Date\")\nplt.title(\"Distribution of Number of Closed Cases in India over Date\")","df731ee6":"plt.figure(figsize=(10,5))\nplt.plot(india_datewise[\"Confirmed\"],label=\"Confirmed Cases\",marker='o')\nplt.plot(india_datewise[\"Recovered\"],label=\"Recovered Cases\",marker='*')\nplt.plot(india_datewise[\"Deaths\"],label=\"Death Cases\",marker=\"^\")\nplt.xticks(rotation=90)\nplt.ylabel(\"Number of Cases\")\nplt.xlabel(\"Date\")\nplt.title(\"Growth of different types of cases in India\")\nplt.legend()","5903fe2f":"fig, (ax1,ax2) = plt.subplots(1, 2,figsize=(15,5))\nax1.plot((india_datewise[\"Recovered\"]\/india_datewise[\"Confirmed\"])*100,label=\"Recovery Rate\",linewidth=3)\nax1.axhline(((india_datewise[\"Recovered\"]\/india_datewise[\"Confirmed\"])*100).mean(),linestyle='--',color='black',label=\"Mean Recovery Rate\")\nax1.set_xlabel(\"Date\")\nax1.set_ylabel(\"Recovery Rate\")\nax1.set_title(\"Recovery Rate of India over Date\")\nax1.legend()\nax2.plot((india_datewise[\"Deaths\"]\/india_datewise[\"Confirmed\"])*100,label=\"Mortality Rate\",linewidth=3)\nax2.axhline(((india_datewise[\"Deaths\"]\/india_datewise[\"Confirmed\"])*100).mean(),linestyle='--',color='black',label=\"Mean Mortality Rate\")\nax2.set_xlabel(\"Date\")\nax2.set_ylabel(\"Mortality Rate\")\nax2.set_title(\"Mortality Rate of India over Date\")\nax2.legend()","e0f0e052":"plt.figure(figsize=(14,6))\nplt.plot(india_datewise[\"Confirmed\"]\/india_datewise[\"Confirmed\"].shift(),linewidth=3,label=\"Growth Factor of Confirmed Cases\")\nplt.plot(india_datewise[\"Recovered\"]\/india_datewise[\"Recovered\"].shift(),linewidth=3,label=\"Growth Factor of Recovered Cases\")\nplt.plot(india_datewise[\"Deaths\"]\/india_datewise[\"Deaths\"].shift(),linewidth=3,label=\"Growth Factor of Death Cases\")\nplt.axhline(1,linestyle='--',color='black',label=\"Baseline\")\nplt.legend()\nplt.title(\"Datewise Growth Factor of different types of Cases in India\")\nplt.xticks(rotation=90)","1e44caff":"plt.figure(figsize=(12,6))\nplt.plot(india_datewise[\"Confirmed\"].diff().fillna(0),linewidth=3,label=\"Confirmed Cases\")\nplt.plot(india_datewise[\"Recovered\"].diff().fillna(0),linewidth=3,label=\"Recovered Cases\")\nplt.plot(india_datewise[\"Deaths\"].diff().fillna(0),linewidth=3,label=\"Death Cases\")\nplt.ylabel(\"Increase in Number of Cases\")\nplt.xlabel(\"Date\")\nplt.title(\"Daily increase in different types of cases in India\")\nplt.xticks(rotation=90)\nplt.legend()","442c9a11":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\nstatewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"India\" # in order to have a single root node\nfig = px.treemap(statewise_cases, path=['Country','State'], values='Confirmed',\n                  color='Confirmed', hover_data=['State'],\n                  color_continuous_scale='Rainbow')\nfig.show()","f6f381c6":"import IPython\nIPython.display.HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","1357a5a9":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\nstatewise_cases = pd.DataFrame(covid_India_cases.groupby(['State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nlast=statewise_cases\npos=pd.read_csv('..\/input\/utm-of-india\/UTM ZONES of INDIA.csv')\nind_grp=last.merge(pos , left_on='State', right_on='State \/ Union Territory')","a940e7e8":"import folium\nmap = folium.Map(location=[20.5937, 78.9629], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, lon,state,Confirmed,Recovered,Deaths in zip(ind_grp['Latitude'], ind_grp['Longitude'],ind_grp['State'],ind_grp['Confirmed'],ind_grp['Recovered'],ind_grp['Deaths']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='YlOrRd',\n                      popup =(\n                    'State: ' + str(state) + '<br>'\n                    'Confirmed: ' + str(Confirmed) + '<br>'\n                      'Recovered: ' + str(Recovered) + '<br>'\n                      'Deaths: ' + str(Deaths) + '<br>'),\n\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(map)\nmap","878f8b80":"from folium.plugins import HeatMap\nm = folium.Map(location = [20.5937, 78.9629], zoom_start = 4,tiles='cartodbpositron',columns = ['State\/UnionTerritory','Confirmed'],)\n\nheat_data = [[row['Latitude'],row['Longitude']] for index, row in ind_grp.iterrows()]\nHeatMap(heat_data,radius=16.5, blur = 5.5).add_to(m)\n\nm","0190f0f0":"ind_map=pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\n#ind_map.head()\npos=pd.read_csv('..\/input\/utm-of-india\/UTM ZONES of INDIA.csv')\nind_map1=ind_map.merge(pos , left_on='State\/UnionTerritory', right_on='State \/ Union Territory')\n#ind_map1.head()","967d044e":"#ind_map = ind_grp\nind_map1  = ind_map1.groupby(['Date', 'State\/UnionTerritory','Latitude','Longitude'])['Confirmed'].sum()\n\n\nind_map1 = ind_map1.reset_index()\nind_map1.head()\nind_map1['size'] = ind_map1['Confirmed']*90000000\nind_map1\nfig = px.scatter_mapbox(ind_map1, lat=\"Latitude\", lon=\"Longitude\",\n                     color=\"Confirmed\", size='size',hover_data=['State\/UnionTerritory'],\n                     color_continuous_scale='burgyl', animation_frame=\"Date\", \n                     title='Spread total cases over time in India')\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=3, mapbox_center = {\"lat\":20.5937,\"lon\":78.9629})\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","c678952d":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport squarify\nimport plotly_express as px\n\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline","68617b50":"age_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\n#ICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n","2553f161":"india_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'])\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])","3898b20a":"cumulative_df = india_covid_19.groupby([\"State\/UnionTerritory\", \"Date\"])[\"Confirmed\", \"Deaths\", \"Cured\"].sum().reset_index()\ncumulative_df[\"Date\"] = pd.to_datetime(cumulative_df[\"Date\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"Date\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"Date\"]>=start_date]\ncumulative_df[\"Date\"] = cumulative_df[\"Date\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"Date\", animation_group=\"State\/UnionTerritory\",\n           size=\"Confirmed\", color=\"State\/UnionTerritory\", hover_name=\"State\/UnionTerritory\",\n           log_x=False, size_max=55, range_x=[0,15000], range_y=[-20,800])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & death cases over time in India states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()","81a476c7":"labels = ['Missing', 'Male', 'Female']\nsizes = []\nsizes.append(individual_details['gender'].isnull().sum())\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0, 0.1, 0)\ncolors = ['#ffcc99','#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.title('Percentage of Gender',fontsize = 20)\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.tight_layout()\n\n","d48cbb35":"labels = ['Male', 'Female']\nsizes = []\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0.1, 0)\ncolors = ['#66b3ff','#ff9999']\n\nplt.figure(figsize= (10,8))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.title('Percentage of Gender (Ignoring the Missing Values)',fontsize = 20)\nplt.axis('equal')\nplt.tight_layout()\n\n","13183350":"df = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ndata = df.copy()\ndata['Date'] = data['Date'].apply(pd.to_datetime)\ndata.drop(['Sno', 'Time'],axis=1,inplace=True)\n\n# collect present data\nfrom datetime import date\ndata_apr = data[data['Date'] > pd.Timestamp(date(2020,4,12))]\n\n# prepaing data state wise\nstate_cases = data_apr.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']- state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)","0bc69cd2":"state_details = pd.pivot_table(df, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\nstate_details['Recovery Rate'] = round(state_details['Cured'] \/ state_details['Confirmed'],2)\nstate_details['Deaths']['Madhya Pradesh#']=119\n\nstate_details['Deaths']=state_details['Deaths'].astype(np.float32)\n#state_details=state_details.reset_index()\nstate_details['Active']=state_details['Confirmed']-state_details['Cured']-state_details['Deaths']\n\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\n#state_details.style.background_gradient(cmap='PuBuGn')\nstate_details.style.bar(subset=['Confirmed'], color='#FDD017')\\\n                    .bar(subset=['Cured'], color='lime')\\\n                    .bar(subset=['Deaths'], color='red')\\\n                    .bar(subset=['Active'], color='#0000FF')\\\n                    .bar(subset=['Recovery Rate'], color='#B1FB17')\\\n                    .bar(subset=['Death Rate'], color='#C0C0C0')","e2333a15":"state_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nstate_testing","0112b326":"labs = pd.read_csv(\"..\/input\/covid19-in-india\/ICMRTestingLabs.csv\")\nfig = px.treemap(labs, path=['state','city'],\n                  color='city', hover_data=['lab','address'],\n                  color_continuous_scale='reds')\nfig.show()","8bb41154":"testing=state_testing.groupby('State').sum().reset_index()\ntesting=testing.sort_values(['TotalSamples'], ascending=True)\nfig = px.bar(testing, \n             x=\"TotalSamples\",\n             y=\"State\", \n             orientation='h',\n             height=800,\n             title='Testing statewise insight')\nfig.show()","6f3156d1":"import plotly.express as px\nvalues = list(ICMR_labs['state'].value_counts())\nnames = list(ICMR_labs['state'].value_counts().index)\ndf = pd.DataFrame(list(zip(values, names)), \n               columns =['values', 'names'])\n\nfig = px.bar(df, \n             x=\"values\", \n             y=\"names\", \n             orientation='h',\n             height=1000,\n             title='ICMR Testing Centers in each State')\nfig.show()\n","ee12f3dc":"plt.figure(figsize=(20,60))\nplt.subplot(4,1,1)\nhospital_beds=hospital_beds.sort_values('NumUrbanHospitals_NHP18', ascending= False)\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumUrbanHospitals_NHP18',color=sns.color_palette('RdBu')[0])\nplt.title('Urban Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumUrbanHospitals_NHP18']\n    plt.text(count+10,i,count,ha='center',va='center')\n\nplt.subplot(4,1,2)\nhospital_beds=hospital_beds.sort_values('NumRuralHospitals_NHP18', ascending= False)\nsns.barplot(data=hospital_beds,y='State\/UT',x='NumRuralHospitals_NHP18',color=sns.color_palette('RdBu')[1])\nplt.title('Rural Hospitals per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospital_beds.shape[0]):\n    count = hospital_beds.iloc[i]['NumRuralHospitals_NHP18']\n    plt.text(count+100,i,count,ha='center',va='center')\n\nplt.subplot(4,1,3)\nhospitalBeds=hospital_beds.sort_values('NumUrbanBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumUrbanBeds_NHP18',color=sns.color_palette('RdBu')[5])\nplt.title('Urban Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumUrbanBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.subplot(4,1,4)\nhospitalBeds=hospitalBeds.sort_values('NumRuralBeds_NHP18', ascending= False)\nsns.barplot(data=hospitalBeds,y='State\/UT',x='NumRuralBeds_NHP18',color=sns.color_palette('RdBu')[3])\nplt.title('Rural Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nfor i in range(hospitalBeds.shape[0]):\n    count = hospitalBeds.iloc[i]['NumRuralBeds_NHP18']\n    plt.text(count+1500,i,count,ha='center',va='center')\n\nplt.show()\nplt.tight_layout()\n","0d63b2a4":"covid_India_cases = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\ncovid_India_cases=covid_India_cases.dropna()\ncovid_India_cases.rename(columns={'State\/UnionTerritory': 'State', 'Cured': 'Recovered', 'Confirmed': 'Confirmed'}, inplace=True)\n\ncovid_India_cases = covid_India_cases.fillna('unknow')\ntop_country = covid_India_cases.loc[covid_India_cases['Date'] == covid_India_cases['Date'].iloc[-1]]\ntop_country = top_country.groupby(['State'])['Confirmed'].sum().reset_index()\ntop_country = top_country.sort_values('Confirmed', ascending=False)\ntop_country = top_country[:30]\ntop_country_codes = top_country['State']\ntop_country_codes = list(top_country_codes)\n\n#countries = virus_data.loc[virus_data['Country'] in top_country_codes]\ncountries = covid_India_cases[covid_India_cases['State'].isin(top_country_codes)]\ncountries_day = countries.groupby(['Date','State'])['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nexponential_line_x = []\nexponential_line_y = []\nfor i in range(16):\n    exponential_line_x.append(i)\n    exponential_line_y.append(i)\n    \n################################    Maharashtra    #################\nMaharashtra = countries_day.loc[countries_day['State']=='Maharashtra']\nMaharashtra=Maharashtra.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Maharashtra = []\nnew_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[0] - list(Maharashtra['Deaths'])[0] \n                           - list(Maharashtra['Recovered'])[0] )\n\nfor i in range(1,len(Maharashtra)):\n\n    new_confirmed_cases_Maharashtra.append( list(Maharashtra['Confirmed'])[i] - \n                                     list(Maharashtra['Deaths'])[i] - \n                                     list(Maharashtra['Recovered'])[i])\n    \n#######################   Gujarat   ############\nGujarat = countries_day.loc[countries_day['State']=='Gujarat']\nGujarat=Gujarat.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Gujarat = []\nnew_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[0] - list(Gujarat['Deaths'])[0] \n                           - list(Gujarat['Recovered'])[0] )\n\nfor i in range(1,len(Gujarat)):\n    \n    new_confirmed_cases_Gujarat.append( list(Gujarat['Confirmed'])[i] - \n                                  list(Gujarat['Deaths'])[i] - \n                                  list(Gujarat['Recovered'])[i])\n    \n###########################    Delhi   ##################3\nDelhi = countries_day.loc[countries_day['State']=='Delhi']\nDelhi=Delhi.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Delhi = []\nnew_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[0] - list(Delhi['Deaths'])[0] \n                           - list(Delhi['Recovered'])[0] )\n\nfor i in range(1,len(Delhi)):\n    \n    new_confirmed_cases_Delhi.append( list(Delhi['Confirmed'])[i] - \n                                     list(Delhi['Deaths'])[i] - \n                                    list(Delhi['Recovered'])[i])\n    \n#############################    Madhya Pradesh    ################3\nMadhya_Pradesh = countries_day.loc[countries_day['State']=='Madhya Pradesh']\nMadhya_Pradesh=Madhya_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Madhya_Pradesh = []\nnew_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[0] - list(Madhya_Pradesh['Deaths'])[0] \n                           - list(Madhya_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Madhya_Pradesh)):\n    \n    new_confirmed_cases_Madhya_Pradesh.append( list(Madhya_Pradesh['Confirmed'])[i] - \n                                     list(Madhya_Pradesh['Deaths'])[i] - \n                                    list(Madhya_Pradesh['Recovered'])[i])\n    \n################################   Rajasthan  ##########\nRajasthan = countries_day.loc[countries_day['State']=='Rajasthan']\nRajasthan=Rajasthan.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Rajasthan = []\nnew_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[0] - list(Rajasthan['Deaths'])[0] \n                           - list(Rajasthan['Recovered'])[0] )\n\nfor i in range(1,len(Rajasthan)):\n    \n    new_confirmed_cases_Rajasthan.append( list(Rajasthan['Confirmed'])[i] - \n                                     list(Rajasthan['Deaths'])[i] - \n                                    list(Rajasthan['Recovered'])[i])\n    \n#################################    Uttar Pradesh   ##############\nUttar_Pradesh = countries_day.loc[countries_day['State']=='Uttar Pradesh']\nUttar_Pradesh=Uttar_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Uttar_Pradesh = []\nnew_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[0] - list(Uttar_Pradesh['Deaths'])[0] \n                           - list(Uttar_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Uttar_Pradesh)):\n    \n    new_confirmed_cases_Uttar_Pradesh.append( list(Uttar_Pradesh['Confirmed'])[i] - \n                                     list(Uttar_Pradesh['Deaths'])[i] - \n                                    list(Uttar_Pradesh['Recovered'])[i])\n    \n#####################################  Tamil Nadu  ############\nTamil_Nadu = countries_day.loc[countries_day['State']=='Tamil Nadu']\nTamil_Nadu=Tamil_Nadu.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Tamil_Nadu = []\nnew_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[0] - list(Tamil_Nadu['Deaths'])[0] \n                           - list(Tamil_Nadu['Recovered'])[0] )\n\nfor i in range(1,len(Tamil_Nadu)):\n    \n    new_confirmed_cases_Tamil_Nadu.append( list(Tamil_Nadu['Confirmed'])[i] - \n                                     list(Tamil_Nadu['Deaths'])[i] - \n                                    list(Tamil_Nadu['Recovered'])[i])\n######################################## Andhra Pradesh ##############\nAndhra_Pradesh = countries_day.loc[countries_day['State']=='Andhra Pradesh']\nAndhra_Pradesh=Andhra_Pradesh.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_Andhra_Pradesh = []\nnew_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[0] - list(Andhra_Pradesh['Deaths'])[0] \n                           - list(Andhra_Pradesh['Recovered'])[0] )\n\nfor i in range(1,len(Andhra_Pradesh)):\n    \n    new_confirmed_cases_Andhra_Pradesh.append( list(Andhra_Pradesh['Confirmed'])[i] - \n                                     list(Andhra_Pradesh['Deaths'])[i] - \n                                    list(Andhra_Pradesh['Recovered'])[i])\n\n########################################Telengana#####################\n\n#Telengana = countries_day.loc[countries_day['State']=='Telengana']\n#Telengana=Telengana.sort_values('Confirmed',ascending=True)\n\n#new_confirmed_cases_Telengana = []\n#new_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[0] - list(Telengana['Deaths'])[0] \n#                           - list(Telengana['Recovered'])[0] )\n\n#for i in range(1,len(Telengana)):\n    \n#    new_confirmed_cases_Telengana.append( list(Telengana['Confirmed'])[i] - \n#                                     list(Telengana['Deaths'])[i] - \n#                                    list(Telengana['Recovered'])[i])\n\n\n##########################################  West Bengal #####################33\nWest_Bengal = countries_day.loc[countries_day['State']=='West Bengal']\nWest_Bengal=West_Bengal.sort_values('Confirmed',ascending=True)\n\nnew_confirmed_cases_West_Bengal = []\nnew_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[0] - list(West_Bengal['Deaths'])[0] \n                           - list(West_Bengal['Recovered'])[0] )\n\nfor i in range(1,len(West_Bengal)):\n    \n    new_confirmed_cases_West_Bengal.append( list(West_Bengal['Confirmed'])[i] - \n                                     list(West_Bengal['Deaths'])[i] - \n                                    list(West_Bengal['Recovered'])[i])\n############################################ \np1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Gujarat['Confirmed'])), np.log(new_confirmed_cases_Gujarat), color='#3EC358', \n        legend_label='Gujarat', line_width=1)\np1.circle(np.log(list(Gujarat['Confirmed'])[-1]), np.log(new_confirmed_cases_Gujarat[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Delhi['Confirmed'])), np.log(new_confirmed_cases_Delhi), color='#C3893E', \n       legend_label='Delhi', line_width=1)\np1.circle(np.log(list(Delhi['Confirmed'])[-1]), np.log(new_confirmed_cases_Delhi[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(Madhya_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Madhya_Pradesh), color='#3E4CC3', \n        legend_label='Madhya Pradesh', line_width=1)\np1.circle(np.log(list(Madhya_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Madhya_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Rajasthan['Confirmed'])), np.log(new_confirmed_cases_Rajasthan), color='#F54138', \n        legend_label='Rajasthan', line_width=1)\np1.circle(np.log(list(Rajasthan['Confirmed'])[-1]), np.log(new_confirmed_cases_Rajasthan[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Uttar_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Uttar_Pradesh), color='#23BCDB', \n        legend_label='Uttar Pradesh', line_width=1)\np1.circle(np.log(list(Uttar_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Uttar_Pradesh[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Tamil_Nadu['Confirmed'])), np.log(new_confirmed_cases_Tamil_Nadu), color='#010A0C', \n        legend_label='Tamil Nadu', line_width=1)\np1.circle(np.log(list(Tamil_Nadu['Confirmed'])[-1]), np.log(new_confirmed_cases_Tamil_Nadu[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(Andhra_Pradesh['Confirmed'])), np.log(new_confirmed_cases_Andhra_Pradesh), color='#bf40bf', \n        legend_label='Andhra Pradesh', line_width=1)\np1.circle(np.log(list(Andhra_Pradesh['Confirmed'])[-1]), np.log(new_confirmed_cases_Andhra_Pradesh[-1]), fill_color=\"white\", size=5)\n\n#p1.line(np.log(list(Telengana['Confirmed'])), np.log(new_confirmed_cases_Telengana), color='lime', \n#        legend_label='Telengana', line_width=1)\n#p1.circle(np.log(list(Telengana['Confirmed'])[-1]), np.log(new_confirmed_cases_Telengana[-1]), fill_color=\"white\", size=5)\n\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='#0000ff', \n        legend_label='West Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","5f4bd5c1":"p1 = figure(plot_width=800, plot_height=550, title=\"Trajectory of Covid-19\")\np1.grid.grid_line_alpha=0.3\np1.ygrid.band_fill_color = \"olive\"\np1.ygrid.band_fill_alpha = 0.1\np1.xaxis.axis_label = 'Total number of detected cases (Log scale)'\np1.yaxis.axis_label = 'New confirmed cases (Log scale)'\n\np1.line(exponential_line_x, exponential_line_y, line_dash=\"4 4\", line_width=0.5)\n\np1.line(np.log(list(Maharashtra['Confirmed'])), np.log(new_confirmed_cases_Maharashtra), color='#DBAE23', \n        legend_label='Maharashtra', line_width=1)\np1.circle(np.log(list(Maharashtra['Confirmed'])[-1]), np.log(new_confirmed_cases_Maharashtra[-1]), fill_color=\"white\", size=5)\n\np1.line(np.log(list(West_Bengal['Confirmed'])), np.log(new_confirmed_cases_West_Bengal), color='Blue', \n        legend_label='West_Bengal', line_width=1)\np1.circle(np.log(list(West_Bengal['Confirmed'])[-1]), np.log(new_confirmed_cases_West_Bengal[-1]), fill_color=\"white\", size=5)\n\n\n\np1.legend.location = \"bottom_right\"\n\noutput_file(\"coronavirus.html\", title=\"coronavirus.py\")\n\nshow(p1)","db532808":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n","4d85100e":"from sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport statsmodels.api as sm\nfrom datetime import timedelta","0a86e6fc":"train_ml=india_datewise.iloc[:int(india_datewise.shape[0]*0.95)]\nvalid_ml=india_datewise.iloc[int(india_datewise.shape[0]*0.95):]\nmodel_scores=[]\n","cee27332":"poly = PolynomialFeatures(degree = 8) ","c0c77db7":"train_poly=poly.fit_transform(np.array(train_ml[\"Days Since\"]).reshape(-1,1))\nvalid_poly=poly.fit_transform(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))\ny=train_ml[\"Confirmed\"]","d7efcf52":"linreg=LinearRegression(normalize=True)\nlinreg.fit(train_poly,y)","a3467b90":"prediction_poly=linreg.predict(valid_poly)\nrmse_poly=np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_poly))\nmodel_scores.append(rmse_poly)\nprint(\"Root Mean Squared Error for Polynomial Regression: \",rmse_poly)          ","55e43b6f":"comp_data=poly.fit_transform(np.array(india_datewise[\"Days Since\"]).reshape(-1,1))\nplt.figure(figsize=(11,6))\npredictions_poly=linreg.predict(comp_data)\nplt.plot(india_datewise[\"Confirmed\"],label=\"Train Confirmed Cases\",linewidth=3)\nplt.plot(india_datewise.index,predictions_poly, linestyle='--',label=\"Best Fit for Polynomial Regression\",color='black')\nplt.xlabel('Time')\nplt.ylabel('Confirmed Cases')\nplt.title(\"Confirmed Cases Polynomial Regression Prediction\")\nplt.xticks(rotation=90)\nplt.legend()","0c74acbb":"new_date=[]\nnew_prediction_poly=[]\nfor i in range(1,18):\n    new_date.append(india_datewise.index[-1]+timedelta(days=i))\n    new_date_poly=poly.fit_transform(np.array(india_datewise[\"Days Since\"].max()+i).reshape(-1,1))\n    new_prediction_poly.append(linreg.predict(new_date_poly)[0])","74ead638":"model_predictions=pd.DataFrame(zip(new_date,new_prediction_poly),columns=[\"Date\",\"Polynomial Regression Prediction\"])\nmodel_predictions","cf4f3404":"train_ml=india_datewise.iloc[:int(india_datewise.shape[0]*0.95)]\nvalid_ml=india_datewise.iloc[int(india_datewise.shape[0]*0.95):]","9557a0cd":"#  **The Story of COVID-19 in India**","427989a5":"# ******Forecasting"}}