{"cell_type":{"b823b59c":"code","9b5dab20":"code","091b157e":"code","e0084ea9":"code","82d65fde":"code","21fb9c7a":"code","f69a4902":"code","3711e4f5":"code","397123ac":"code","076cbd55":"code","6269a536":"code","ceb42bc5":"code","7703f35b":"code","77c0079b":"code","baa486d7":"code","6f07be0d":"code","5bb461e5":"code","0016c83d":"code","8e892d65":"code","1249965f":"code","43f20750":"code","f33a91d9":"code","32f112e2":"code","8655d222":"code","5d9f32fb":"code","fc3fbefa":"code","4723ca7c":"code","0df49338":"code","c664cd74":"code","66434378":"code","f300bbce":"code","befc9123":"code","21184813":"code","44efde01":"code","734e1d17":"code","1faf2c9b":"code","6cb95f9d":"code","e70a6ce3":"code","fb43d854":"code","753d9694":"code","28371f59":"code","57a21bb1":"code","9a7c41e9":"code","011d4043":"code","94949f0d":"code","20c2bce8":"code","ee7a1b79":"code","0a5173c4":"code","079d7e63":"code","081f1738":"code","2af47f93":"code","2abf3ff8":"code","d8be606d":"code","df2457c5":"code","316e4430":"code","d7069a4c":"code","dce028c1":"code","d43526a2":"code","4e9fc898":"code","732bef46":"code","6d982a3c":"code","13387d6d":"code","bd3d256b":"code","359b8cb4":"code","ffb90b12":"code","8d03d4b6":"code","710e2ecd":"code","4f06e571":"code","b6acff25":"code","b37131fa":"code","3d2dd265":"code","39911fb8":"code","0d7a2860":"code","45ec3927":"code","8930e97d":"code","14a6ff23":"code","772ebfd7":"code","2f536948":"code","6df4cf21":"code","c2f22d8b":"code","c85d1ee0":"code","22310bf6":"code","6a67365a":"code","afa9dcd3":"code","8bb11d87":"code","cd3810bd":"code","07e64c30":"code","ee086087":"code","659ce570":"code","cbb7b8ef":"code","264249c1":"code","92db1354":"code","83131fd2":"code","2f268255":"code","37c0069a":"code","db6b9552":"code","9185e283":"code","f56d983e":"code","495a011e":"code","0c821fed":"code","a0b9d64e":"code","6873583e":"code","13610e5f":"code","3d28c07a":"code","b27551d9":"code","75e39772":"code","a7e6586f":"code","17d9bf49":"code","44bb7840":"code","c7b22112":"code","c9b426b9":"code","436e814d":"code","b334fe36":"code","018ec1dc":"code","d10294e6":"code","e7cfd9bb":"code","207be316":"code","d869b14a":"code","ce6eadcc":"code","ceb634e3":"code","69598825":"code","5a2d1085":"code","5c54479c":"code","5aa3c87e":"code","ea73ef27":"code","25b6e261":"code","20c32b20":"code","988b8322":"code","7db85400":"code","aea2cb02":"code","c6a3850a":"code","7572ecf1":"code","07751a10":"code","4a990b80":"code","837f8a12":"code","866c4c39":"code","e017eae3":"code","9eaf93d7":"code","5497f3ac":"code","089d1cdc":"code","0652b414":"code","946b9bf2":"code","df1dce44":"code","1f88addf":"code","367214e1":"code","d495b2a4":"code","1ec6f698":"code","aa14c8ce":"code","a29e98f6":"markdown","e9afdd7d":"markdown","7ff6b7b8":"markdown","37f6b9e1":"markdown","b77d382c":"markdown","8c60a6c9":"markdown","227fc1bf":"markdown","97c2204d":"markdown","43758110":"markdown","0ce8b4bb":"markdown","f3a0e204":"markdown","16efe35f":"markdown","36589d6b":"markdown","a25461fd":"markdown","d9d22851":"markdown","1cbf50ef":"markdown","415e8ba3":"markdown","3fe43532":"markdown","54f60c2a":"markdown","896deb3e":"markdown","3c8dd5f0":"markdown","95d8784b":"markdown","5f2f5a51":"markdown","2c2c70d0":"markdown","7a7c79d6":"markdown","ac2cc4c6":"markdown","cc432785":"markdown","8d18dc87":"markdown","5d6adbc0":"markdown","d7979e85":"markdown","adc47f04":"markdown","22517a16":"markdown","a3d8be7c":"markdown","a06229be":"markdown","dc6ef9d3":"markdown","cb879eb1":"markdown","37152851":"markdown","a9bdbc45":"markdown","715a3fda":"markdown","0277669b":"markdown","05cfe49d":"markdown","636dc9f2":"markdown","318d64a7":"markdown","6390cdd7":"markdown","e4f42e01":"markdown","2f840227":"markdown","be6e01f2":"markdown","596bdf97":"markdown","e89c25f7":"markdown","87207ed7":"markdown"},"source":{"b823b59c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd# data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9b5dab20":"data=pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")","091b157e":"data","e0084ea9":"data.info()","82d65fde":"data.describe()","21fb9c7a":"data.columns","f69a4902":"data.corr()\n#orant\u0131 tablosu verir.","3711e4f5":"f,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidths=.5,fmt=\".1f\",ax=ax)\nplt.show()","397123ac":"data.head(10)","076cbd55":"#line plot\ndata.Speed.plot(kind=\"line\",color=\"g\",label=\"Speed\",linewidth=1,alpha=0.5,grid=True,linestyle=\":\")\ndata.Defense.plot(color=\"r\",label=\"Defense\",linewidth=1,alpha=0.5,grid=True,linestyle=\"-.\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"x axis\",color=\"white\")\nplt.ylabel(\"y axis\",color=\"white\")\nplt.title(\"Line plot\",color=\"white\")\nplt.show()","6269a536":"#scatter plot\ndata.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\",alpha=.5,color=\"r\",grid=True,figsize=(10,10))\nplt.xlabel(\"Attack\",color=\"w\")\nplt.ylabel(\"Defense\",color=\"w\")\nplt.title(\"Attack Defense Scatter Plot\",color=\"w\")\n","ceb42bc5":"plt.scatter(data.Attack,data.Defense,alpha=.5,color=\"r\")\nplt.grid(True)\nplt.show()","7703f35b":"#histogram\n# bins = number of bar in figure\ndata.Speed.plot(kind=\"hist\",bins=50, figsize=(12,12))\nplt.show()","77c0079b":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()\n","baa486d7":"#dictioanry\ndictionary={\"spain\":\"madrid\",\"usa\":\"vegas\"}\ndictionary.keys()","6f07be0d":"print(dictionary.keys())","5bb461e5":"dictionary.keys()","0016c83d":"\nprint(dictionary.keys())","8e892d65":"dictionary[\"spain\"]=\"barcelona\"\nprint(dictionary)","1249965f":"dictionary[\"france\"]=\"paris\"\ndictionary","43f20750":"del dictionary[\"spain\"]\ndictionary","f33a91d9":"print(\"france\"in dictionary)","32f112e2":"dictionary.clear()\ndictionary","8655d222":"data=pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")","5d9f32fb":"series=data[\"Defense\"]  # data['Defense'] = series\nprint(type(series))\ndata_frame=data[[\"Defense\"]] # data[['Defense']] = data frame\nprint(type(data_frame))","fc3fbefa":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","4723ca7c":"# 1 - Filtering Pandas data frame\nx=data[\"Defense\"]>200\ndata[x]","0df49338":"# 2 - Filtering pandas with logical_and\ndata[np.logical_and(data[\"Defense\"]>200,data[\"Attack\"]>100)]","c664cd74":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data[\"Defense\"]>200)&(data[\"Attack\"]>100)]","66434378":"# Stay in loop if condition( i is not equal 5) is true\ni=0\nwhile i!=5:\n    print(\"i is:\",i)\n    i+=1\nprint(i,' is equal to 5')","f300bbce":"# Stay in loop if condition( i is not equal 5) is true\nlist1=[3,8,12,40,-5]\nfor i in list1:\n    print('i is: ',i)\nprint('')","befc9123":"# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index,value in enumerate(list1):\n    print(index,\":\",value)\nprint('')\n#for'dan sonra ilk yaz\u0131lan index,daha sonra yaz\u0131lan value i\u00e7indir. ","21184813":"# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n#for'dan sonra ilk yaz\u0131lan key,daha sonra yaz\u0131lan value i\u00e7indir. ","44efde01":"# For pandas we can achieve index and value\nfor index,value in data[[\"Attack\"]][0:1].iterrows():\n    print(index,\" : \",value)","734e1d17":"#USER DEFINED FUNCTION\n# example of what we learn above\ndef tuple_ex():\n    \"\"\"return defined t tuple\"\"\"\n    t=(1,2,3)\n    return t\na,b,c=tuple_ex()\nprint(\"a:\",a,\"\\nb:\",b,\"\\nc:\",c)","1faf2c9b":"#SCOPE\nx=2 #global x\ndef f():\n    x=5  #local x\n    return x\nprint(x) #global de\u011feri d\u00f6nd\u00fcr\u00fcr.\nprint(f()) #tan\u0131mlanan fonksiyondaki local x'i d\u00f6nd\u00fcr\u00fcr.","6cb95f9d":"#e\u011fer local scope olmazsa;\nx=2\ndef f():\n    y=x*2  # there is no local scope x\n    return y\nprint(f())   # it uses global scope x","e70a6ce3":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","fb43d854":"#nested function\n#i\u00e7 i\u00e7e fonksiyon\ndef square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"add two local variable\"\"\"\n        x=2\n        y=3\n        z=x+y\n        return z\n    return add()**2\nprint(square())","753d9694":"# default arguments\n#\u00f6nceden tan\u0131mlad\u0131\u011f\u0131m\u0131z fonksiyonlar\ndef f(a,b=1,c=2):\n    y=a+b+c\n    return y\n# e\u011fer fonksiyonu d\u00f6nd\u00fcr\u00fcrken i\u00e7ine sadece 1 de\u011fer\n# yazarsam onun a oldu\u011funu anlar,zaten b ve c tanml\u0131\n# ama e\u011fer  de\u011fer girersem a,b ve c i\u00e7in o de\u011ferleri al\u0131r.\n# s\u0131rayla al\u0131r,mesela a ve b i\u00e7in de\u011fer girip de c i\u00e7in \n# girmezsem c i\u00e7in default de\u011feri al\u0131r,b ve a i\u00e7in \n# tan\u0131mlanan de\u011feri al\u0131r.","28371f59":"f(5)","57a21bb1":"f(5,6)","9a7c41e9":"f(5,6,7)","011d4043":"f(5,c=7)","94949f0d":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nf(\"\")\nf(1,2,3,4)","20c2bce8":"def f(*args):\n    a=0\n    for i in args:\n     a+=i\n    return a\nf(1,2)","ee7a1b79":"f(1,2,3,4,5,6,7,8,9)","0a5173c4":"# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\"print key and value of dictionary\"\"\"\n    for key,value in kwargs.items():\n# If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(\"key:\",key,\"value:\",value)\nf(country = 'spain', capital = 'madrid', population = 123456)","079d7e63":"#LAMBDA FUNCTION\nsquare=lambda x: x**2\nprint(square(3))","081f1738":"total=lambda a,b,c:a+b+c\nprint(total(3,-6,1))","2af47f93":"#ANONYMOUS FUNCT\u0130ON\nnumber_list=[1,2,3]\ny=map(lambda x:x**2,number_list)\nprint(list(y))","2abf3ff8":"name=\"marcelo\"\nit=iter(name)\nprint(next(it)) # print next iteration","d8be606d":"print(*it) # print remaining iteration","df2457c5":"#zip(): zip lists\n#iki listeyi zip etmek(birle\u015ftirmek)\nlist1=[1,2,3,4]\nlist2=[5,6,7,8]\nz=zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","316e4430":"#zip \u015feklindeki bir listeyi unzip ediyoruz. ==> zip(* ... )ile\nun_zip=zip(*z_list)\nunlist1,unlist2=list(un_zip) #burada list yada tuple diyebiliriz.\nprint(unlist1)               #ikisinde de tuple yapar.\nprint(unlist2)\nprint(type(unlist2))","d7069a4c":"#unzip yap\u0131nca bunlar\u0131 tuple yapt\u0131, istersek liste yapabiliriz.\nprint(list(unlist1))\nprint(type(list(unlist1)))","dce028c1":"#list comprehension\nnum1=[1,2,3]\nnum2=[i+1 for i in num1]\nprint(num2)","d43526a2":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2=[i**2 if i==10 else i-5 if i<7 else i+5 for i in num1]\nnum2","4e9fc898":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\ndata=pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\nthreshold = sum(data.Speed)\/len(data.Speed)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","732bef46":"#value_counts\nprint(data[\"Type 1\"].value_counts(dropna=False)) # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","6d982a3c":"data.describe()","13387d6d":"data","bd3d256b":"data.boxplot(column=\"Attack\",by=\"Legendary\",figsize=(10,10))","359b8cb4":"#TIDY DATA\n# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","ffb90b12":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted=pd.melt(frame=data_new,id_vars=\"Name\",value_vars=[\"Attack\",\"Defense\"])\nmelted","8d03d4b6":"#PIVOTING DATA\n#Reverse of melting.","710e2ecd":"#CONCATENATING DATA\ndata1 = data.head()\ndata2= data.tail()\nconcat_data_row=pd.concat([data1,data2],axis=0,ignore_index=True)\nconcat_data_row","4f06e571":"# ignore_index=True demezsek;\ndata1 = data.head()\ndata2= data.tail()\nconcat_data_row=pd.concat([data1,data2],axis=0)\nconcat_data_row","b6acff25":"data[\"Type 1\"]=data[\"Type 1\"].astype(\"category\")\ndata[\"Speed\"]=data[\"Speed\"].astype(\"float\")","b37131fa":"data.dtypes","3d2dd265":"#MISSING DATA and TESTING WITH ASSERT\ndata.info()\n#type2 de 386 tane NaN varm\u0131\u015f.","39911fb8":"data[\"Type 2\"].value_counts(dropna =False)\n#dropna false diyerek nan lar\u0131 da yazd\u0131rmas\u0131n\u0131 s\u00f6yledik.","0d7a2860":"# Lets drop nan values\ndata1=data.copy()\ndata1[\"Type 2\"].dropna(inplace = True)\n#inplace=True diyerek \u00e7\u0131kard\u0131\u011f\u0131n bu de\u011ferleri\n#data1 i\u00e7ine kaydet demektir. G\u00fcncel hali\n#data1 i\u00e7ine kaydetmi\u015f olduk.\n#PEK\u0130 \u00c7ALI\u015eTI MI?","45ec3927":"# Assert statement:\nassert 1==1 # return nothing because it is true","8930e97d":"# assert 1==2 # return error because it is false\n#e\u011fer bunu d\u00f6nd\u00fcr\u00fcrsek hata verir \u00e7\u00fcnk\u00fc yanl\u0131\u015f.","14a6ff23":"assert  data1['Type 2'].notnull().all() # returns nothing because we drop nan values\n#mesela bunu data i\u00e7in yapsak hata verirdi \u00e7\u00fcnk\u00fc nan lar duruyor.","772ebfd7":"data1[\"Type 2\"].fillna(\"empty\",inplace=True)\n#bo\u015f yerleri \"empty\" yaz\u0131s\u0131 ile doldurduk","2f536948":"assert data1['Type 2'].notnull().all()  # returns nothing because we do not have nan values","6df4cf21":"assert data1.columns[1]==\"Name\"\n#1. column Name mi diye kontrol ediyoruz. bir \u015fey d\u00f6nd\u00fcrm\u00fcyor,demek ki do\u011fru.","c2f22d8b":"assert data.Speed.dtypes == np.float","c85d1ee0":"# data frames from dictionary\ncountry=[\"Turkey\",\"France\",\"USA\"]\npopulation=[\"80\",\"70\",\"300\"]\ncapital=[\"Ankara\",\"Paris\",\"Washington DC\"]\nlist_label=[\"country\",\"population\",\"capital\"]\nlist_col=[country,population,capital]\nzipped=list(zip(list_label,list_col))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","22310bf6":"data_dict","6a67365a":"# Add new columns\ndf[\"EU\"]=[\"False\",\"True\",\"False\"]\ndf","afa9dcd3":"# Broadcasting\ndf[\"income\"] = 0 #Broadcasting entire column\ndf","8bb11d87":"#VISUAL EXPLORATORY DATA ANALYSIS\n# Plotting all data \ndata2=data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata2.plot()\n# it is confusing","cd3810bd":"#subpolts\ndata2.plot(subplots=True)\nplt.show()","07e64c30":"# scatter plot  \ndata2.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\")\nplt.show()","ee086087":"# hist plot \ndata2.plot(kind=\"hist\")\n#ba\u015fka hibir \u015fey girmezsek;","659ce570":"# hist plot  \ndata2.plot(kind=\"hist\",y = \"Defense\",bins = 50,range=(0,250),normed = True)","cbb7b8ef":"# hist plot  \ndata2.plot(kind=\"hist\",y = \"Defense\",bins = 50,range=(0,250))\n#normed=True yazmazsak;","264249c1":"# hist plot  \ndata2.plot(kind=\"hist\",y = \"Defense\",bins = 50)\n#range vermzesek;","92db1354":"# hist plot  \ndata2.plot(kind=\"hist\",y = \"Defense\",bins = 50,range=(0,1000))\n#farkl\u0131 bir range daha verelim;","83131fd2":"# histogram subplot with non cumulative and cumulative\nfig,axes=plt.subplots(nrows=2,ncols=1)\ndata2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=axes[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative=True) #cumulative\nplt.savefig('graph.png')\nplt","2f268255":"# histogram subplot with non cumulative and cumulative\nfig,axes=plt.subplots(nrows=4,ncols=1)\ndata2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=axes[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative=True) #cumulative\nplt.savefig('graph.png')\nplt","37c0069a":"data2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=axes[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative=True) #cumulative\nplt.savefig('graph.png')\nplt\n#ilk sat\u0131r\u0131 yazmazsak","db6b9552":"fig,at=plt.subplots(nrows=2,ncols=1)\ndata2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=at[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = at[1],cumulative=True) #cumulative\nplt.savefig('graph.png')\nplt\n#burada axes yazanlar\u0131n hepsine ax ta yazazbiliriz, at da. ne yazd\u0131\u011f\u0131m\u0131 z\u00f6nemli de\u011fil. bir \u015fey de\u011fi\u015fmez.","9185e283":"fig,at=plt.subplots(nrows=2,ncols=1)\ndata2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=at[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = at[1],cumulative=True) #cumulative\nplt\n# plt.savefig('graph.png') yazmasak da olur.","f56d983e":"fig,axes=plt.subplots(nrows=2,ncols=1)\n#data2.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),normed=True,ax=axes[0]) #non-cumulative\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative=True) #cumulative\nplt.savefig('graph.png')\nplt","495a011e":"time_list=[\"1997-03-11\",\"1997-10-22\"]\nprint(type(time_list))\nprint(type(time_list[1]))\n#biz string olu\u015fturmu\u015f olduk ama \n#biz datatime object istiyoruz.","0c821fed":"datatime_object=pd.to_datetime(time_list)\nprint(type(datatime_object))","a0b9d64e":"# close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#yukardaki 3 sat\u0131r\u0131n ne oldu\u011fu \u00f6nemli de\u011fil, hata vermemesi i\u00e7in yazd\u0131k.\n# In order to practice lets take head of pokemon data and add it a time list\ndata3=data.head()\ndata_list=[\"1991-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatatime_object=pd.to_datetime(data_list)\ndata3[\"date\"]=datatime_object\ndata3","6873583e":"data3=data3.set_index(\"date\")\ndata3\n#index s\u00fctunumuz date'lerden olu\u015fuyor.","13610e5f":"# Now we can select according to our date index\nprint(data3.loc[\"1993-03-16\"])","3d28c07a":"print(data3.loc[\"1992-03-10\":\"1993-03-16\"])","b27551d9":"data3.resample(\"A\").mean()\n#y\u0131llar\u0131 mean'e g\u00f6re resample ediyoruz.","75e39772":"data3.resample(\"M\").mean()\n#\u015fimdi de aylar\u0131 mean'e g\u00f6re resample ediyoruz.","a7e6586f":"#data3.resample(\"M\").first().interpolate(\"linear\")\n#s\u00fcrekli hata veriyor,sorunu \u00e7\u00f6zemedim.","17d9bf49":"data3.resample(\"M\").mean().interpolate(\"linear\")","44bb7840":"#1st\n# read data\ndata=pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\ndata.head()","c7b22112":"#2nd\n#index changing\ndata=data.set_index(\"#\")\ndata.head()","c9b426b9":"#3rd\n# indexing using square brackets\ndata[\"Sp. Atk\"][1]","436e814d":"data.HP[1]","b334fe36":"data[\"HP\"][1]","018ec1dc":"data.loc[1,[\"HP\"]]","d10294e6":"#4th\n# Selecting only some columns\ndata[[\"HP\",\"Attack\"]]\n","e7cfd9bb":"#1st\n# Difference between selecting columns: series and dataframes\nprint(type(data[\"HP\"]))   # series\nprint(type(data[[\"HP\"]])) # data frames","207be316":"#2nd\n# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"]","d869b14a":"data.loc[1:10,[\"HP\",\"Defense\"]]","ce6eadcc":"#3rd\n# Reverse slicing \ndata.loc[10:1:-1,\"HP\":\"Defense\"]","ceb634e3":"#4th\n# From something to end\ndata.loc[1:10,\"Speed\":]\n#Speed'den son column'a kadar tamam\u0131n\u0131 ald\u0131k.","69598825":"#1st\n# Creating boolean series\nboolean=data.HP>200\ndata[boolean]","5a2d1085":"boolean=data.HP>200\nprint(boolean)","5c54479c":"boolean=data.HP>200\nboolean","5aa3c87e":"#2nd\n# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","ea73ef27":"#3rd\n# Filtering column based others\ndata.HP[data.Speed<15]","25b6e261":"#1st\n# def ile func tan\u0131mlayarak;\n# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","20c32b20":"#2nd\n# apply lambda ile\n# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2 )","988b8322":"#3rd\n# Defining column using other columns\ndata[\"Total_Power\"]=data.Attack + data.Defense\ndata.head()","7db85400":"data.Total_Power.head()","aea2cb02":"#1)Index'in ismini \u00f6\u011frenme:\nprint(data.index.name)","c6a3850a":"#2)\u0130ndex'in ismini de\u011fi\u015ftirme\ndata.index.name=\"index_name\"\ndata.head()","7572ecf1":"#3)\n# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data4 then change index \ndata4 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata4.index=range(100,1700,2)\ndata4.head()","07751a10":"data=pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\ndata.head()","4a990b80":"#2 index column'\u0131 olu\u015fturma\n# Setting index : type 1 is outer type 2 is inner index\ndata1=data.set_index([\"Type 1\",\"Type 2\"])\ndata1.head(20)","837f8a12":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","866c4c39":"# pivoting\ndf.pivot(index=\"treatment\",columns = \"gender\",values=\"response\")","e017eae3":"df1=df.set_index([\"treatment\",\"gender\"])\ndf1","9eaf93d7":"# lets unstack it\ndf1.unstack(level=0)\n#2 index column \u0131 var. biz 0. index column \u0131n\u0131 siliyoruz.","5497f3ac":"df1.unstack(level=1)\n#\u015fimdi de 1. index column \u0131n\u0131 siliyoruz.","089d1cdc":"#,ndex column'lar\u0131n\u0131n yerini de\u011fi\u015ftirelim.\n# change inner and outer level index position\ndf2=df1.swaplevel(0,1)\ndf2","0652b414":"df","946b9bf2":"#df.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")\npd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])\n# biz bir \u015fey girmedi\u011fimiz s\u00fcrece variable ve value columnlar\u0131 otomatik olarak gelir.","df1dce44":"# We will use df\ndf","1f88addf":"df.groupby(\"treatment\").mean()  # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","367214e1":"# we can only choose one of the feature\ndf.groupby(\"treatment\").age.max()","d495b2a4":"df.groupby(\"treatment\").max()","1ec6f698":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min()","aa14c8ce":"df.groupby(\"treatment\").min()","a29e98f6":"* List,pandas ve dictionary lerde for while looplar #index\/key ve #value bulmak i\u00e7in kullan\u0131l\u0131r.\n* listelerde index bulmak i\u00e7in *enumerate*;\n* dictionary lerde key ve value bulmak i\u00e7in *dictionary.items()*;\n* pandas ta index ve value bulmak i\u00e7in *data[[\"...\"][0:1].iterrows()* kullan\u0131l\u0131r.","e9afdd7d":"# VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","7ff6b7b8":"# FILTERING DATA FRAMES","37f6b9e1":"> ****Yani,lambda function ile 1 argument alabilirken,map ile list \u015feklinde birden fazla argument alabilir.****","b77d382c":"**UYARI!!! \nBURADAK\u0130 \u00d6RNEKLER BANA DE\u011e\u0130L, https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners KERNEL\u0130N\u0130N SAHB\u0130 DATAI'A A\u0130TT\u0130R. BEN \u00dcZER\u0130NE NOTLAR,KARI\u015eIK KISIMLARI A\u00c7IKLAYICI \u0130FADELER,HATIRLATICI KODLAR VE BAZI KISIMLARDA AYRICA KODLAR ALDIM.**","8c60a6c9":"* Bunun \u00e7al\u0131\u015f\u0131p \u00e7al\u0131\u015fmad\u0131\u011f\u0131n\u0131 assert metodu ile kontrol edebiliriz.\n* e\u011fer assert bir \u015fey d\u00f6nd\u00fcrmezse bu do\u011fru oldu\u011funu g\u00f6sterir.\n* yanl\u0131\u015f ise hata verir.","227fc1bf":"### melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")","97c2204d":"# WHILE and FOR LOOPS","43758110":"**LINE PLOT**","0ce8b4bb":"* pandas library'de oldu\u011fu i\u00e7in pd.concat al\u0131yoruz. \n* axis=0 diyerek rowlar\u0131 alt alta birle\u015ftirdik.\n* ignore_index=True diyerek solda yeni bir index column'\u0131 olu\u015fturuyoruz.\n* e\u011fer bunu demezsek indexleri eski indexleri al\u0131r. mesela 9 de\u011fil de 799 al\u0131r.\n","f3a0e204":"# STACKING and UNSTACKING DATAFRAME\n","16efe35f":"Broadcasting ile column akleme ayn\u0131 \u015feydir, ikisinde de column eklenir ancak normal column eklerken herbir rowdaki data i\u00e7in ayr\u0131 bir data eklenir. broadcasting te ise t\u00fcm column'a ayn\u0131 de\u011fer eklenir.","36589d6b":"# SLICING DATA FRAME","a25461fd":"* [i + 1 for i in num1 ]: list of comprehension\n* i +1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","d9d22851":"> Attack'lar\u0131 legendary olup olmamas\u0131na g\u00f6re boxplot ettirdik. legendary'nin true ve false olmas\u0131na g\u00f6re boxplot'lar \u00e7izdi.\n\n* a\u015fa\u011f\u0131daki \u00e7izgiler *min*\n* yukar\u0131daki \u00e7izgiler *max*\n* ortadaki kutu i\u00e7indeki \u00e7izgi *median*\n* kutunun \u00fcst k\u0131sm\u0131 *Q3*\n* kutunun alt k\u0131sm\u0131 *Q1*\n* bunlar\u0131n d\u0131\u015f\u0131ndaki yuvarlaklar *outlier*'lar","1cbf50ef":"# INDEX OBJECTS AND LABELED DATA","415e8ba3":"# REV\u0130EW of PANDAS\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","3fe43532":"Burada, Speed'in <15 olu\u011fu row'lar\u0131 ald\u0131k.ama bu filtrelemeden sonra speed in de\u011fil hp nin bu filtredeki de\u011ferlerini yazd\u0131rd\u0131k.","54f60c2a":"# MANIPULATING DATA FRAMES WITH PANDAS","896deb3e":"### INDEXING DATA FRAMES","3c8dd5f0":"* data['Defense'] = series  (tek boyutlu matris,yani vector)\n* data[['Defense']] = data frame\n* \"Farklar\u0131na dikkat et!!!\"","95d8784b":"> index i 0 dan de\u011fil de 100 den ba\u015flatt\u0131k ve 2\u015fer 2\u015fer artmas\u0131n\u0131 s\u00f6yledik. toplam 800 verimiz oldu\u011fu ve 2\u015fer artaca\u011f\u0131 i\u00e7in 100+800.2=1700'\u00fc de son olarak ald\u0131k.","5f2f5a51":"# TRANSFORMING DATA","2c2c70d0":"1993 3. ay\u0131nda 2 veri var.bunlar\u0131n mean'ini al\u0131yor,kalanlarda tek veri olanlar\u0131 aynen al\u0131yor.\nDe\u011fer olmayan aylarda NaN yaz\u0131yor.","7a7c79d6":"* We can make one of the column as index. I actually did it at the beginning of manipulating data frames with pandas section\n* It was like this\n* data= data.set_index(\"#\")\n* also you can use \n* data.index = data[\"#\"]","ac2cc4c6":"2.sat\u0131rda seaborn library'sini kulln\u0131caz(sns). heatmap yaparak \u015fekilli tablo elde ederiz. i\u00e7inde data.corr() diyerek yukar\u0131daki orant\u0131 tablosunu ekleriz. annot=True diyerek tablodaki karelerin i\u00e7indeki say\u0131lar\u0131 elde ederiz. linewidths=.5 demek kareler aras\u0131ndaki \u00e7izginin kal\u0131nl\u0131\u011f\u0131 0.5 olsun demektir. fmt=\".1f\" demek de virg\u00fclden sonra  basamak yazd\u0131rs\u0131n demektir. 1. sat\u0131rda ise, subplots i\u00e7inde figsize=(18,18) diyerek tablonun boyutunun 18x18 boyutunda olmas\u0131n\u0131 s\u00f6yl\u00fcyoruz. e\u011fer mesela 13x13 deseydik daha k\u00fc\u00e7\u00fck bir tablo verirdi. e\u011fer bu sat\u0131r\u0131 hi\u00e7 demeseydik \u00e7ok k\u00fc\u00e7\u00fck bir tablo verirdi. \ne\u011fer bu 2 sat\u0131rdan sonra plt.show() demezsek < ... > i\u00e7inde bir yaz\u0131 verir. plt.show() diyince bu yaz\u0131 kaybolur.\nf)figure,ax=axes(eksenler)","cc432785":"> First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.\n> foksiyona bak\u0131l\u0131rken \u00f6nce *local scope'a*, sonra *global scope'a* bak\u0131l\u0131r. e\u011fer ikisi de yoksa en son *built in scope'a* bak\u0131l\u0131r.","8d18dc87":"# INDEXING PANDAS TIME SERIES","5d6adbc0":"# DIAGNOSE DATA for CLEANING\nWe need to diagnose and clean data before exploring.\nUnclean data:\n\nColumn name inconsistency like upper-lower case letter or space between words\nmissing data\ndifferent language\n\nWe will use head, tail, columns, shape and info methods to diagnose data","d7979e85":"* With assert statement we can check a lot of thing. \n* For example; assert data.columns[1] == 'Name'\n* assert data.Speed.dtypes == np.int","adc47f04":"date'i ayr\u0131 bir column olarak olu\u015fturduk. \u015fimdi de bu column'\u0131 index s\u00fctunu yapal\u0131m: ","22517a16":"# MELTING DATA FRAMES","a3d8be7c":"* M diyerek ay'a,A diyerek y\u0131la g\u00f6re resample yapabiliriz.\n* resample=yeniden \u00f6rneklendirmek","a06229be":"* Index is name\n* I want to make that columns are variable\n* Finally values in columns are value","dc6ef9d3":"1. clear() metodu ==> dictionary'nin i\u00e7ini bo\u015falt\u0131r.\n2. del metodu dictionary'yi tamamen siler.","cb879eb1":"# EXPLORATORY DATA ANALYSIS\nvalue_counts(): Frequency counts\noutliers: the value that is considerably higher or lower from rest of the data\n\nLets say value at 75% is Q3 and value at 25% is Q1.\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR\nWe will use describe() method. Describe method includes:\ncount: number of entries\nmean: average of entries\nstd: standart deviation\nmin: minimum entry\n25%: first quantile\n50%: median or second quantile\n75%: third quantile\nmax: maximum entry\n\nWhat is quantile?\n\n1,4,5,6,8,9,11,12,13,14,15,16,17\nThe median is the number that is in middle of the sequence. In this case it would be 11.\n\nThe lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\nThe upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.","37152851":"* For example: compare attack of pokemons that are legendary  or not\n* Black line at top is max\n* Blue line at top is 75%\n* Red line is median (50%)\n* Blue line at bottom is 25%\n* Black line at bottom is min\n* There are no outliers","a9bdbc45":"* Before continue with pandas, we need to learn logic, control flow and filtering.\n* Comparison operator: ==, <, >, <=\n* Boolean operators: and, or ,not\n* Filtering pandas","715a3fda":"1991'de tek veri oldu\u011fu i\u00e7in ayn\u0131 ama di\u011fer y\u0131llarda mean'ini al\u0131p yaz\u0131yor.","0277669b":"# CATEGORICALS AND GROUPBY","05cfe49d":"* Keys have to be immutable(de\u011fi\u015ftirilemez.) objects like string, boolean, float, integer or tubles.\n* List is not immutable.\n* Keys are unique.\n* Values are mutable(de\u011fi\u015ftirilebilir).","636dc9f2":"e\u011fer bir figure \u00e7izdirdikten sonra onu silmek istersek plt.clf() yazar\u0131z.","318d64a7":"# HIERARCHICAL INDEXING","6390cdd7":"# RESAMPLING PANDAS TIME SERIES\n","e4f42e01":"bunu eski \u00f6\u011frendi\u011fimiz line plot y\u00f6ntemi ile de \u00e7izebiliriz. farkl\u0131 y\u00f6ntemleri \u00f6\u011frenmek i\u00e7in bu da g\u00fczel. data adl\u0131 dataframe'imizin speed column'\u0131n\u0131 ald\u0131k ve plot ettiricez. \u00f6nce i\u00e7ine t\u00fcr\u00fcn\u00fc giriyoruz.(kine,scatter,histogram vs...) sonra rengi giriyoruz. Renk i\u00e7in, rengin k\u0131saltmas\u0131 girilebilir. line'lar\u0131n kal\u0131nl\u0131klar\u0131n\u0131 linewidth ile gireriz. grid ,le karelere b\u00f6leriz. ikisine de grid girmeliyiz, birine girmez isek hi\u00e7 grid olu\u015fturmaz.en son linestyle(ls) ile \u00e7izginin t\u00fcr\u00fcn\u00fc se\u00e7eriz. \u00e7izgi t\u00fcrleri 4 t\u00fcrd\u00fcr: \":\", \"-.\", \"-\", \"--\"  \nDefense i\u00e7in de bunlar\u0131 girdik ancak t\u00fcr\u00fcm\u00fcz\u00fc ilkinde line olarak girdi\u011fimiz i\u00e7in \u015fimdi tekrar girmeye gerek yok, girilebilir de girilmeyebilir de. \nDaha sonra plt.legend() dedik ve i\u00e7ine labellerimizi grafi\u011fin neresine yazmas\u0131n\u0131 istedi\u011fimizi girdik(upper right,lower left,center, center right...)\nxlabel ve ylabel ile eksenlere yazmas\u0131n\u0131 istediklerimizi yazd\u0131k,ba\u015fl\u0131\u011f\u0131 girdik ve show ettik.","2f840227":"# Python Data Science Tool Box\nUSER DEFINED FUNCTION AND SCOPE","be6e01f2":"plt.show() demedi\u011fimiz i\u00e7in \u00fcstte bir yaz\u0131 \u00e7\u0131kt\u0131.\nBu grafi\u011fi \u00f6nceden \u00f6\u011frendi\u011fimiz \u015fu \u015fekilde de \u00e7izdirebiliriz. Sonu\u00e7 ayn\u0131s\u0131 olur.","596bdf97":"# PIVOTING DATA FRAMES","e89c25f7":"correlation map\ne\u011fer 2 feature aras\u0131nda correlation 1 yada 1'e yak\u0131n ise bunlar birbiri ile do\u011fru orant\u0131l\u0131d\u0131r(positive correlation). e\u011fer 0 \u00e7\u0131karsa orant\u0131 yoktur,alakas\u0131zd\u0131r. e\u011fer -1 yada -1'e yak\u0131n \u00e7\u0131karsa ters orant\u0131l\u0131d\u0131r.\n\n","87207ed7":"> CSV: comma - separated values"}}