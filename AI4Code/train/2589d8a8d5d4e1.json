{"cell_type":{"7819c6c8":"code","22338efc":"code","a8e1698f":"code","a0043df6":"code","f676513c":"code","9602fc6e":"code","e33ea8f7":"code","93c1fe35":"code","70108ba2":"code","1546af38":"code","0fbd2638":"code","86eef8db":"code","971b4e19":"code","b65d48c4":"code","6f8d5877":"code","6717ce39":"code","065af5bb":"code","630f8363":"code","f3d0ce81":"code","e3826bf8":"code","1cef92c6":"code","9047763b":"code","27e4cba5":"code","f18c0ea8":"code","e22998a8":"code","c65a3677":"code","cc77298a":"code","f77a16d7":"code","10508d31":"code","6710e900":"code","83b07824":"code","56e6a5fe":"code","06a7cd61":"code","55af5074":"code","61348e17":"code","a923e9c7":"code","1e4048b3":"code","e06b36f3":"code","43d10d40":"code","8def6775":"code","66b55f16":"code","ebcea354":"code","4db7d2b8":"code","c6a271f1":"code","f8af99ab":"code","77f9eaee":"code","25e4fad7":"code","f7a5756d":"code","be164d90":"code","9d915843":"code","9bcfa6c9":"markdown","bfa09575":"markdown","c2b3ba19":"markdown","f0cdb1bd":"markdown","63173f2b":"markdown","74fd3373":"markdown","44363de9":"markdown","c1e2e018":"markdown","dd628c46":"markdown","e90213bb":"markdown","5261fdb5":"markdown","c30a6520":"markdown","4b864ad9":"markdown","9240ba03":"markdown","19318c9c":"markdown","96bf40b0":"markdown","ffa33516":"markdown","8e44c778":"markdown","f649b51b":"markdown"},"source":{"7819c6c8":"import os\nimport torch\nimport torchvision\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor\nfrom torchvision.utils import make_grid\nfrom torch.utils.data.dataloader import DataLoader\nfrom torch.utils.data import random_split\n%matplotlib inline","22338efc":"project_name = '003facialexpressorecogfeedforwardapproach'","a8e1698f":"data_dir = '..\/input\/facial-expression-recog-image-ver-of-fercdataset\/Dataset'\nclasses = os.listdir(data_dir + '\/train')","a0043df6":"for i in classes:\n    var_files = os.listdir(data_dir + '\/train\/' + i)\n    print(i,': ',len(var_files))","f676513c":"for i in classes:\n    var_files = os.listdir(data_dir + '\/test\/' + i)\n    print(i,': ',len(var_files))","9602fc6e":"dataset = ImageFolder(\n    data_dir + '\/train', \n    transform = ToTensor()\n                     )","e33ea8f7":"dataset","93c1fe35":"img, label = dataset[0]\nprint(img.shape, label)\nimg","70108ba2":"print(dataset.classes)","1546af38":"def show_example(img, label):\n    print('Label: ', dataset.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))","0fbd2638":"show_example(*dataset[9050])","86eef8db":"val_size = int(0.1*32298) # 10% of the dataset as validatoin set\ntrain_size = len(dataset) - val_size\ntrain_ds, val_ds = random_split(dataset,[train_size, val_size])\ntest_ds = ImageFolder(data_dir + '\/test', transform = ToTensor())","971b4e19":"print(train_ds)\nprint(val_ds)\nprint(test_ds)","b65d48c4":"batch_size = 64","6f8d5877":"train_loader = DataLoader(\n                          train_ds, \n                          batch_size, \n                          shuffle=True, \n                          num_workers=4, \n                          pin_memory=True\n                         )\n\nval_loader = DataLoader(\n                        val_ds, \n                        batch_size*2, \n                        num_workers=4, \n                        pin_memory=True\n                       )","6717ce39":"for images, _ in train_loader:\n    print('images.shape:', images.shape)\n    plt.figure(figsize=(16,8))\n    plt.axis('off')\n    plt.imshow(make_grid(images, nrow=16).permute((1, 2, 0)))\n    break","065af5bb":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","630f8363":"class Facial_Recog_Model(nn.Module):\n    \"\"\"Feedfoward neural network with 1 hidden layer\"\"\"\n    def __init__(self, in_size, out_size):\n        super().__init__()\n        # hidden layer\n        self.linear1 = nn.Linear(in_size, 1024)\n        # hidden layer 2\n        self.linear2 = nn.Linear(1024, 512)\n        # hidden layer 3\n        self.linear3 = nn.Linear(512,256)\n        # hidden Layer 4\n        self.linear4 = nn.Linear(256, 128)\n        # hidden Layer 5\n        self.linear5 = nn.Linear(128, 64)\n        # output layer\n        self.linear6 = nn.Linear(64, out_size)\n        \n    def forward(self, xb):\n        # Flatten the image tensors\n        out = xb.view(xb.size(0), -1)\n\n        # Get intermediate outputs using hidden layer\n        out = self.linear1(out)\n        # Apply activation function\n        out = F.relu(out)\n\n        # Get intermediate outputs using hidden layer 2\n        out = self.linear2(out)\n        # Apply activation function\n        out = F.relu(out)\n\n        # Get intermediate outputs using hidde layer 3\n        out = self.linear3(out)\n        # Apply activation function\n        out = F.relu(out)\n\n        # Get intermediate outputs using hidde layer 4\n        out = self.linear4(out)\n        # Apply activation function\n        out = F.relu(out)\n        \n        # Get intermediate outputs using hidde layer 5\n        out = self.linear5(out)\n        # Apply activation function\n        out = F.relu(out)\n\n        # Get predictions using output layer\n        out = self.linear6(out)\n        return out\n    \n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss, 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))","f3d0ce81":"input_size = 48*48*3\nnum_classes = 7","e3826bf8":"model = Facial_Recog_Model(input_size, out_size = num_classes)","1cef92c6":"for images, labels in train_loader:\n    outputs = model(images)\n    loss = F.cross_entropy(outputs, labels)\n    print('Loss:', loss.item())\n    break\n\nprint('outputs.shape : ', outputs.shape)\nprint('Sample outputs :\\n', outputs[:2].data)","9047763b":"torch.cuda.is_available()","27e4cba5":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')","f18c0ea8":"device = get_default_device()\ndevice","e22998a8":"def to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","c65a3677":"for images, labels in train_loader:\n    print(images.shape)\n    images = to_device(images, device)\n    print(images.device)\n    break","cc77298a":"class DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n\n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","f77a16d7":"train_loader = DeviceDataLoader(\n                                train_loader, \n                                device\n                               )\nval_loader = DeviceDataLoader(\n                              val_loader, \n                              device\n                             )","10508d31":"for xb, yb in val_loader:\n    print('xb.device:', xb.device)\n    print('yb:', yb)\n    break","6710e900":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","83b07824":"# Model (on GPU)\nmodel = Facial_Recog_Model(input_size, out_size = num_classes)\nto_device(model, device)","56e6a5fe":"for t in model.parameters():\n    print(t.shape)","06a7cd61":"history = [evaluate(model, val_loader)]\nhistory","55af5074":"history += fit(10, 0.05, model, train_loader, val_loader)","61348e17":"history += fit(15, 0.03, model, train_loader, val_loader)","a923e9c7":"history += fit(20, 0.01, model, train_loader, val_loader)","1e4048b3":"history += fit(20, 0.001, model, train_loader, val_loader)","e06b36f3":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');\n    \ndef plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x', color='red')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","43d10d40":"plot_losses(history)","8def6775":"plot_accuracies(history)","66b55f16":"evaluate(model, val_loader)","ebcea354":"Stop here","4db7d2b8":"val_loss = history[-1]['val_loss']\nval_acc = history[-1]['val_acc']\nnum_epochs = [10, 15, 20, 20]\nlr = [0.05, 0.03, 0.01, 0.001]\narch = \"7 layers (1024, 512, 256, 128, 64, 7)\"","c6a271f1":"!pip install jovian --upgrade -q","f8af99ab":"import jovian","77f9eaee":"#jovian.commit(project=project_name, environment = None)","25e4fad7":"jovian.log_dataset(dataset_url='https:\/\/www.kaggle.com\/manishshah120\/facial-expression-recog-image-ver-of-fercdataset', val_size=val_size, train_size = train_size)","f7a5756d":"jovian.log_hyperparams({\n    'num_epochs': num_epochs,\n    'batch_size': batch_size,\n    'lr': lr,\n    'arch': arch\n})","be164d90":"jovian.log_metrics(val_loss=val_loss, val_acc=val_acc)","9d915843":"jovian.commit(project = project_name, environment=None)","9bcfa6c9":"## Defining the training function","bfa09575":"## Imports","c2b3ba19":"## Data Loader","f0cdb1bd":"## Commiting to Jovian","63173f2b":"## Dataset","74fd3373":"## Using a GPU","44363de9":"### Final Evaluation","c1e2e018":"- **User**: [@manishshah120](https:\/\/www.kaggle.com\/manishshah120)\n- **LinkedIn**: https:\/\/www.linkedin.com\/in\/manishshah120\/\n- **GitHub**: https:\/\/github.com\/ManishShah120\n- **Twitter**: https:\/\/twitter.com\/ManishShah120\n\n> This Notebook was created while working on project for a course \"**Deep Learning with PyTorch: Zero to GANs**\" from \"*jovian.ml*\" in collaboratoin with \"*freecodecamp.org*\"","dd628c46":"## Training the Model","e90213bb":"## Plotting functions","5261fdb5":"## Hyper params ad other details","c30a6520":"# Facial Expressoin Recognition with Feed Forward Neural Network","4b864ad9":"No. of training images of each class in test set:-","9240ba03":"So to improve upon Logistic regression we will implement Neural netwrok.\n\nAnd this is where neural network comes into play after this our model becomes a neural network with `no. of layer` hidden layer.","19318c9c":"Creating the `dataset` variable","96bf40b0":"No. of training images of each class in training set:-","ffa33516":"Moving all our data and model to a choosen devise","8e44c778":"Lets have a look to the tensors and the labels","f649b51b":"## Model"}}