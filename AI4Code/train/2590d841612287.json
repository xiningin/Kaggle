{"cell_type":{"dc61fe41":"code","28fe1922":"code","1b0adddb":"code","f03fe6f0":"code","90791788":"code","96ab7af5":"code","6e70a809":"code","82f6c98e":"code","179e10d7":"code","fcef1fc7":"code","e40f31df":"code","87d9d48b":"code","1db40003":"code","24c2316f":"code","50c5d80b":"code","e4f79647":"code","b4c08414":"code","819b7fcd":"code","36260a52":"code","8c8715a4":"code","e7eac926":"code","0b4f55c8":"code","807fd7b0":"code","c9838800":"code","1474f45a":"code","1c5c195e":"code","6cd199c4":"code","d645b0e7":"code","6b85d2f1":"code","4cb822e6":"code","b10aa6ba":"code","d8f1a33d":"code","3ea5b4fd":"code","cf7a4434":"code","053cf79d":"markdown","c09ae69f":"markdown","685d8688":"markdown","256e34f3":"markdown","703af8a3":"markdown","5eb56b53":"markdown","e266ef94":"markdown","a704b6a8":"markdown"},"source":{"dc61fe41":"# Importing the standard libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport os\nimport random\nimport shutil","28fe1922":"os.system('cp -r ..\/input\/pokemonclassification\/PokemonData .')\n\n# Setting the path for pokemon data\npath = 'PokemonData'\nclasses = os.listdir(path)\n\n# Creating the train folder\nos.system(\"mkdir PokemonData\/Poke_train\")\n\n# Move all the folders from root folder to train folder, ignore the error\nos.system(\"mv PokemonData\/* PokemonData\/Poke_train\/\")\n\n# Creating the test folder\nos.system(\"mkdir PokemonData\/Poke_test\")\n\n# Copying all the data from train to test to get the same folder structure\nos.system(\"cp -r PokemonData\/Poke_train\/* PokemonData\/Poke_test\/\")\n\n# Deleting all the files in the sub-directories  of the test folder\nos.system(\"find PokemonData\/Poke_test\/ -name '*.*' -type f -delete\")\n\n# Setting the path for the train and test folder\n\ntrain_path = 'PokemonData\/Poke_train'\ntest_path = 'PokemonData\/Poke_test'\n#os.listdir(train_path)","1b0adddb":"# Copying 15 random images from train folders to test folders\n\ndef prep_test_data(pokemon,train_path,test_path):\n    pop = os.listdir(train_path+'\/'+pokemon)\n    test_data = random.sample(pop,15)\n    #print(test_data)\n    \n    for f in test_data:\n        shutil.copy(train_path+'\/'+pokemon+'\/'+f,test_path+'\/'+pokemon+'\/')\n","f03fe6f0":"# Performing the task for each folder in train folder\nfor poke in os.listdir(train_path):\n    prep_test_data(poke,train_path,test_path)\n","90791788":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","96ab7af5":"# Creating an image genertaor to apply random transformation on the images\nimage_gen = ImageDataGenerator(rotation_range=20,\n                               rescale = 1.\/255,\n                               width_shift_range=0.1,\n                               height_shift_range=0.1,\n                               shear_range=0.1,\n                               zoom_range=0.1,\n                               horizontal_flip=True,\n                               fill_mode='nearest')","6e70a809":"img_path = 'PokemonData\/Poke_train\/Zapdos\/580e6e89333e494db94f2c251bd374ce.jpg'","82f6c98e":"imread(img_path).shape","179e10d7":"plt.imshow(imread(img_path))","fcef1fc7":"plt.imshow(image_gen.random_transform(imread(img_path)))","e40f31df":"image_gen.flow_from_directory(train_path)","87d9d48b":"image_gen.flow_from_directory(test_path)","1db40003":"# Importing standard libraries for creating and training model\n\nfrom tensorflow.keras.models import Sequential,load_model\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping","24c2316f":"# Setting the inupt image size\nimage_shape = (256,256,3)","50c5d80b":"# Creating a CNN model with 5 layers 64,128,128,128 and 256 filters each with 3x3 kernel size and pooling layers with size 2\n# Adding 3 dense layers with 1024,512 neurons with final layer with 150 outputs.\n# Batch Normalization and Dropout layers\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',input_shape=image_shape,activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),padding='same',input_shape=image_shape,activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),padding='same',input_shape=image_shape,activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),padding='same',input_shape=image_shape,activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=256,kernel_size=(3,3),padding='same',input_shape=image_shape,activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024,activation='relu'))\n\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Dense(512,activation='relu'))\n\nmodel.add(Dense(150,activation='softmax'))\n\n\nmodel.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])","e4f79647":"model.summary()","b4c08414":"batch_size = 16","819b7fcd":"train_image_gen = image_gen.flow_from_directory(train_path,\n                                                target_size=image_shape[:2],\n                                                color_mode='rgb',\n                                                batch_size=batch_size,\n                                                class_mode='categorical')","36260a52":"test_image_gen = image_gen.flow_from_directory(test_path,\n                                                target_size=image_shape[:2],\n                                                color_mode='rgb',\n                                                batch_size=batch_size,\n                                                class_mode='categorical')","8c8715a4":"# Defining a callback for early stopping to utilize computing resources effeciently\nearly_stopping = EarlyStopping(monitor='val_loss',patience=3)","e7eac926":"# Training the model\nresults = model.fit(train_image_gen,epochs=80,validation_data=test_image_gen,callbacks=[early_stopping])","0b4f55c8":"#loss_history = pd.read_csv(\"loss_history.csv\")","807fd7b0":"#model = load_model(\"my_cnn_model.h5\")","c9838800":"#Recording the loss history\nloss_history = pd.DataFrame(model.history.history)","1474f45a":"loss_history.to_csv('loss_history.csv')","1c5c195e":"# Saving the trained model\nmodel.save('my_cnn_model.h5')","6cd199c4":"model.evaluate(test_image_gen)","d645b0e7":"loss_history.head()","6b85d2f1":"# plotting the loss\nloss_history[['loss','val_loss']].plot()","4cb822e6":"# plotting the accuracy\nloss_history[['accuracy','val_accuracy']].plot()","b10aa6ba":"# Importing standard libraries for image and web url\nfrom tensorflow.keras.preprocessing import image\nfrom PIL import Image\nimport urllib.request","d8f1a33d":"def predict_pokemon(img_url):\n\n  # Fetching Image URL \n  url = img_url\n  test_image_path = urllib.request.urlopen(url)\n  \n  # Using Image lib to resize image\n  img = Image.open(test_image_path)\n  img = img.resize((256,256))\n  \n  plt.imshow(img)\n  plt.show()\n  \n  # Dropping the transperency channel if it exists\n  \n  img = np.array(img)\n  if img.shape[2] != 3:\n      img = img[:,:,:3]\n  \n  # Converting to array, normalizing and expanding the dims\n  \n  img = img\/255\n  my_img_array = np.expand_dims(img,axis=0)\n\n  # Fething the prediction\n  pred_class = np.argmax(model.predict(my_img_array),axis=-1)\n  poke_class = {value:key for key,value in train_image_gen.class_indices.items()}\n  print(poke_class[pred_class[0]])","3ea5b4fd":"img = 'http:\/\/www.pngmart.com\/files\/12\/Pokemon-Charizard-PNG-Image.png'\nimg2 = 'https:\/\/www.pngkey.com\/png\/full\/149-1492440_pokemon-jigglypuff-png-jigglypuff-pokemon.png'\nimg3 = 'https:\/\/smallimg.pngkey.com\/png\/small\/62-623293_pokemon-conquest-pokemon-art.png'\nimg4 = 'https:\/\/smallimg.pngkey.com\/png\/small\/1-16272_pokemon-logo-png-transparent-pokemon-vector.png'\nimg5 = 'https:\/\/www.pngkey.com\/png\/full\/62-622689_fire-pokemon-png-moltres-pokemon.png'\nimg6 = 'https:\/\/www.pngkey.com\/png\/full\/66-668441_jpg-library-library-redo-ultimate-mewtwo-by-pokemon.png'","cf7a4434":"pokemon = [img,img2,img3,img4,img5,img6]\n\nfor i in pokemon:\n  predict_pokemon(i)","053cf79d":"<h2> Evaluating the model <\/h2>","c09ae69f":"## Fetching the Data","685d8688":"<h2> Splitting data <h2>","256e34f3":"<h2> Image pre-processing <h2>","703af8a3":"<h3> In the following cells we seperate the pokemon data into train and test datasets <h3>","5eb56b53":"<h1> Pokemon Image Classifier <\/h1>\n<h3> In the this project we will use CNNs to train a model that can identify pokemon  images<h3>\n","e266ef94":"<h2> Creating and training model <\/h2>","a704b6a8":"<h2> Testing the model on new image <\/h2>"}}