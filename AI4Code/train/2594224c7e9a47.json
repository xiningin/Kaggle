{"cell_type":{"5b832262":"code","2a9b0ad0":"code","f1402920":"code","ae6ee1f1":"code","bf310a87":"code","20f8f5d2":"code","2cd2bf95":"code","bb511729":"code","b2c3d4ac":"code","003ce909":"code","9e089adb":"code","5bc7eb46":"code","9436bb06":"code","f4381cd4":"code","6a7310f9":"code","c876c535":"code","e944015d":"code","61df5a94":"code","b10f9760":"code","eba8e274":"code","d082368f":"code","7bb642f0":"code","8e59dc8e":"markdown","f5f9bb8e":"markdown","857033fe":"markdown","85f7e85b":"markdown","2e3cc434":"markdown","c80aa9b4":"markdown","174c194c":"markdown","68175db5":"markdown","5a8ee7d1":"markdown"},"source":{"5b832262":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a9b0ad0":"import cv2           \nimport numpy as np\nimport os\nimport zipfile\nimport tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras","f1402920":"path = \"\/kaggle\/input\/neural-networks-homer-and-bart-classification\/homer_bart_1\"\ntrain_dir = os.path.join(path)\nos.listdir(train_dir)","ae6ee1f1":"width, height = 128, 128  ","bf310a87":"classes = []\nimages = []\nfor i in os.listdir(train_dir):\n    if i.startswith(\"b\"):\n        classes.append(1)\n    else:\n        classes.append(0)\n    \n        \n    image = cv2.imread(os.path.join(path,i))\n    image = cv2.resize(image, (width, height))\n    images.append(image)","20f8f5d2":"images_array = np.array(images)\nclasses_array = np.array(classes)","2cd2bf95":"class_names = [\"Homer\",\"Bart\"]","bb511729":"plt.figure(figsize=(10,10))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(images_array[i])\n    plt.title(class_names[classes[i]])\n    plt.axis(False)","b2c3d4ac":"images_array = images_array\/255","003ce909":"images_array[0]","9e089adb":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val = train_test_split(images_array,classes_array,test_size=0.2,random_state=42)","5bc7eb46":"X_train.shape","9436bb06":"X_val.shape","f4381cd4":"data_augmentation = keras.Sequential([keras.layers.experimental.preprocessing.RandomRotation(0.2),\n                                     keras.layers.experimental.preprocessing.RandomZoom(0.1),\n                                     keras.layers.experimental.preprocessing.RandomFlip(\"horizontal\")])","6a7310f9":"plt.figure(figsize=(10,10))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    data_augmented = data_augmentation(X_train[0])\n    plt.imshow(data_augmented)\n    plt.axis(False)","c876c535":"model = keras.Sequential([data_augmentation,\n                          keras.layers.Conv2D(200,input_shape=(128, 128, 3),activation=\"relu\",kernel_size=3,strides=2,padding=\"same\"),\n                          keras.layers.MaxPooling2D(2),\n                          keras.layers.Conv2D(400,activation=\"relu\",kernel_size=3,strides=2,padding=\"same\"),\n                          keras.layers.MaxPooling2D(),\n                          keras.layers.Conv2D(800,activation=\"relu\",kernel_size=3,strides=2,padding=\"same\"),\n                          keras.layers.MaxPooling2D(),\n\n                          \n                          \n                          \n                          keras.layers.Flatten(),\n                          keras.layers.Dense(1000,activation=\"relu\"),\n                          keras.layers.Dense(1,activation=\"sigmoid\")\n    \n    \n])","e944015d":"model.compile(loss=\"binary_crossentropy\",metrics=[\"accuracy\"],optimizer=keras.optimizers.Adam(learning_rate=0.01))\nearly_stop = keras.callbacks.EarlyStopping(patience=10)","61df5a94":"history = model.fit(X_train,y_train,validation_data=(X_val,y_val),epochs=200,callbacks=early_stop)","b10f9760":"history_df = pd.DataFrame(history.history)\nplt.plot(history_df.accuracy,label=\"Accuracy\")\nplt.plot(history_df.val_accuracy,label=\"Validation Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","eba8e274":"history_df = pd.DataFrame(history.history)\nplt.plot(history_df.loss,label=\"Loss\")\nplt.plot(history_df.val_loss,label=\"Validation Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.grid()","d082368f":"prediction = model.predict(X_val)\nprediction_label = []\nfor i in prediction:\n    i = int(i)\n    if i >= 0.5:\n        prediction_label.append(i)\n    else:\n        prediction_label.append(i)\n        ","7bb642f0":"plt.figure(figsize=(10,10))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_val[i])\n    plt.title(f\"Predicted {class_names[prediction_label[i]]},Actual {class_names[y_val[i]]}\")\n    plt.axis(False)","8e59dc8e":"# **Visualing Images**","f5f9bb8e":"# **Creating Train and Validation sets**","857033fe":"# **Loading Data**","85f7e85b":"# **Creating Model**","2e3cc434":"# **Making Predictions**","c80aa9b4":"# **Creating Images and Labels**","174c194c":"# **Scaling**\n\nScaling all values between 0 and 1.\n","68175db5":"# **Visualizing Model's Performance**","5a8ee7d1":"# **Data Augmentation**"}}