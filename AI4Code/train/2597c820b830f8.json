{"cell_type":{"5e1aeed4":"code","69f7f751":"code","233a1d68":"code","086bd7a7":"code","62ce32dc":"code","4b823b8f":"code","d71e1634":"code","753878f4":"code","d4591848":"code","4f3d14fd":"code","7e76e0fd":"code","dd94c26a":"code","60947459":"code","ab14b17a":"code","98cf0b7b":"code","cb98bc96":"code","e644fca3":"code","b50cb1d2":"code","c2549a43":"code","cf9ca04c":"code","7b960920":"code","887ef471":"code","4e9db42a":"code","0a38db5c":"code","baea30a1":"code","d921fb8b":"code","059a7c9d":"code","58d6809e":"code","fa6bd637":"code","e6ffe545":"code","f98615a3":"code","e133ea1a":"code","0d710017":"code","452bb512":"code","11d49fae":"code","c60c8a30":"code","d73784b5":"code","1d742063":"code","d1f5834b":"code","c9c8671d":"code","97544dba":"code","92bd09bd":"code","87f0baad":"code","d4e4342f":"code","2bdb4feb":"code","25ef0f2a":"code","270f0dd4":"code","28161f79":"code","f7d237c4":"code","0f0b6b2f":"code","95946bfb":"code","3dc34c4b":"code","154bae89":"code","335c482e":"code","e57c95d5":"code","6fcd5b82":"code","7153b395":"code","33f4acde":"markdown","43f2ef39":"markdown","fd6990ef":"markdown","4ee36131":"markdown","f7b717de":"markdown","20c97a1d":"markdown","5bdac530":"markdown","5b364756":"markdown","9797e466":"markdown","6af01c0f":"markdown","6ef14c3d":"markdown","2011a7fe":"markdown","c81a835e":"markdown","4f23febc":"markdown","b538a3cd":"markdown","496219bb":"markdown","96af2c18":"markdown","76e365b0":"markdown","00a8e447":"markdown","8f37ef64":"markdown","0d7df2f5":"markdown","b925d752":"markdown","751e6ba4":"markdown","a48ab74b":"markdown","649ee1e2":"markdown","04e57c72":"markdown","faf65462":"markdown","c32aa25b":"markdown","61b1d575":"markdown"},"source":{"5e1aeed4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69f7f751":"#importing library\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nimport datetime\nimport missingno as msno\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder,OrdinalEncoder,StandardScaler,MinMaxScaler,PowerTransformer,FunctionTransformer\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import AdaBoostRegressor,GradientBoostingRegressor,RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom xgboost import XGBRegressor\nfrom mlxtend.feature_selection import ExhaustiveFeatureSelector,SequentialFeatureSelector\nfrom sklearn.feature_selection import mutual_info_regression,SelectKBest\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\nimport plotly \nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom plotly import tools\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n%matplotlib inline \n","233a1d68":"#Load the dataset and check the data head.\ndf=pd.read_csv(\"..\/input\/fifa19\/data.csv\")\ndf.head().T","086bd7a7":"df.columns","62ce32dc":"#check the rows and columns number.\nprint(f\"number of rows:--> {df.shape[0]} and number of columns:--> {df.shape[1]}\")","4b823b8f":"#chack the data information\ndf.info()","d71e1634":"#check for missing values \ndef checking_m(df):\n    null_v = df.isnull().sum().sort_values(ascending=False)\n    null_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    null_v = pd.concat([null_v, null_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return null_v\n\nchecking_m(df)","753878f4":"msno.matrix(df,color=(0.100, 0.100, 0.100))","d4591848":"miss_height = df[df['Height'].isnull()].index.tolist()\nmiss_weight = df[df['Weight'].isnull()].index.tolist()\n\n#check if the dataset contain the completly empty rows \nif miss_height == miss_weight:\n    print('Yes,empty rows exist\ud83d\ude10\ud83d\ude10')\nelse:\n    print('Not found \ud83d\ude03\ud83d\ude03')","4f3d14fd":"#lets remove them \ndf.drop(df.index[miss_height],inplace=True)","7e76e0fd":"#check for dublicated rows\nprint(\"Numbers of duplicated rows :\",df.duplicated().sum())","dd94c26a":"#check data description\ndf.describe().T.style.bar(subset=['mean'], color='#205ff2').background_gradient(subset=['std'], cmap='mako').background_gradient(subset=['50%'], cmap='coolwarm')","60947459":"df.drop(['Unnamed: 0',\"ID\",'Photo','Flag','Club Logo','Real Face','Jersey Number','Loaned From','Release Clause'],\n          axis=1,inplace=True)","ab14b17a":"#cleaning the value and wage col\ndef m_and_k(Value):\n    if isinstance(Value,str):\n        out = Value.replace('\u20ac', '')\n        if 'M' in out:\n            out = float(out.replace('M', ''))*1000000\n        elif 'K' in Value:\n            out = float(out.replace('K', ''))*1000\n        return float(out)\n    \ndf[\"Value\"]=df[\"Value\"].apply(lambda x:m_and_k(x))\ndf[\"Wage\"]=df[\"Wage\"].apply(lambda x:m_and_k(x))","98cf0b7b":"df[[\"Value\",\"Wage\"]].head(10).T","cb98bc96":"df.head()","e644fca3":"#clean and preprocess the Joined columns\ndf[\"Joined\"]=pd.to_datetime(df[\"Joined\"])\ndf[\"Joined\"]=pd.DatetimeIndex(df[\"Joined\"]).year\ndf[\"Joined\"]=df[\"Joined\"].replace(np.nan,0)\ndf[\"Joined\"]=df[\"Joined\"].astype(str)","b50cb1d2":"df[\"Joined\"].head()","c2549a43":"#clean and preprocess the Contract Valid Until columns\ndf[\"Contract Valid Until\"]=pd.to_datetime(df[\"Contract Valid Until\"])\ndf[\"Contract Valid Until\"]=pd.DatetimeIndex(df[\"Contract Valid Until\"]).year\ndf[\"Contract Valid Until\"]=df[\"Contract Valid Until\"].replace(np.nan,0)\ndf[\"Contract Valid Until\"]=df[\"Contract Valid Until\"].astype(str)","cf9ca04c":"#clean and process the height columns \ndef clean_height(val):\n    test=[]\n    value=[]\n    if isinstance(val,str):\n        test=val.split(\"'\")\n        i=test[0]\n        j=test[1]\n        value=(int(i*12)+int(j))\/12\n    return(value)   \ndf[\"Height\"]=df[\"Height\"].apply(clean_height) \n","7b960920":"#clean and process the Weight columns \ndef clean_weight(val):\n    if isinstance(val,str):\n        return(val.replace(\"lbs\",\"\"))   \ndf[\"Weight\"]=df[\"Weight\"].apply(clean_weight) \ndf[\"Weight\"]=df[\"Weight\"].astype(float)\ndf.head()","887ef471":"#top 30 contries with highset numbers of players \ny = df.Nationality.value_counts().head(30).index\nx = df.Nationality.value_counts().head(30).values\n\n# Athletes barplot with Discipline\nplt.rcParams['figure.dpi'] = 600\n\nfig = plt.figure(figsize=(2,3), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=1.5, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#ff355d']*1200)\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n    \nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.barplot(data=df,x=x,y=y,zorder=2) \nax0_sns.set_xlabel('No of Players',fontsize=4, weight='bold')\nax0_sns.set_ylabel('Countries',fontsize=4, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=3, width=0.5, length=1.5)\n\n\nfor p in ax0_sns.patches:\n            value = f'{p.get_width():.0f}'\n            x = p.get_x() + p.get_width() + 20\n            y = p.get_y() + p.get_height() \/ 2 \n            ax0.text(x, y, value, ha='left', va='center', fontsize=3, \n                    bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()\n\n","4e9db42a":"#analysis the club columns\nprint(\"Here total numbers of club are:\",df[\"Club\"].nunique())","0a38db5c":"#top 20 club with highest numbers of players \ny = df.Club.value_counts().head(20).index\nx = df.Club.value_counts().head(20).values\nplt.rcParams['figure.dpi'] = 600\n\nfig = plt.figure(figsize=(2,2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=1.5, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#00FFFF'])\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\n    \nax0.set_facecolor(background_color)\n\n\nax0_sns = sns.barplot(data=df,x=x,y=y,zorder=2) \nax0_sns.set_xlabel('No of Players',fontsize=3, weight='bold')\nax0_sns.set_ylabel('Club',fontsize=3, weight='bold')\n\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n\n\nax0_sns.tick_params(labelsize=2.5, width=0.5, length=1.5)\n\n\nfor p in ax0_sns.patches:\n            value = f'{p.get_width():.0f}'\n            x = p.get_x() + p.get_width() +2\n            y = p.get_y() + p.get_height() \/ 2 \n            ax0.text(x, y, value, ha='left', va='center', fontsize=2, \n                    bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()\n\n","baea30a1":"#analysis the max and minimum potential and  overall performanced players \nprint('Maximum Potential player :---> '+str(df.loc[df['Potential'].idxmax()][0]))\nprint('Maximum Overall Perforamnced player:---> '+str(df.loc[df['Overall'].idxmax()][0]))\nprint()\nprint('Minimum Potential player:---> '+str(df.loc[df['Potential'].idxmin()][0]))\nprint('Minimum Overall Perforamnced player:---> '+str(df.loc[df['Overall'].idxmin()][0]))","d921fb8b":"#top 10 maximum potential and overall performenced players \ntop_potential=df.sort_values(by=\"Potential\",ascending=False).head(10)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=top_potential.Name,\n    x=top_potential.Potential,\n   orientation='h',\n    name='potential',\n    marker=dict(\n        color='rgba(300, 200, 100, 50)',\n        line=dict(color='rgba(246, 78, 139, 1.0)')\n    )\n    ))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Top 10 potential players',template = template,barmode='stack', autosize=False,width=650,\n                height=400,margin=dict( l=100,r=100, b=30,t=100, pad=4\n                          )\n)\n\nfig.show()\n\n       ","059a7c9d":"top_overall=df.sort_values(by=\"Overall\",ascending=False).head(10)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=top_overall.Name,\n    x=top_overall.Overall,\n   orientation='h',\n    name='potential',\n    marker=dict(\n        color='rgba(100, 200, 100, 50)',\n        line=dict(color='rgba(246, 78, 139, 1.0)')\n    )\n    ))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Top 10 Overall performanced players',template = template,barmode='stack', autosize=False,width=650,\n                height=400,margin=dict( l=100,r=100, b=30,t=100, pad=4\n                          )\n)\n\nfig.show()\n\n       ","58d6809e":"#Best in others aspect \nbest_players=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\nprint(\"Best in others aspect :\")\nprint(\"\\n<----------------------------------------------------------------->\\n\")\nfor i in best_players:\n    print('Best {0}:{1} '.format(i,df.loc[df[i].idxmax()][0]))\nprint(\"\\n<----------------------------------------------------------------->\\n\")    ","fa6bd637":"#Most valuable and highest earners players\nprint('Most valued player : '+str(df.loc[df['Value'].idxmax()][0]))\nprint('Highest earner : '+str(df.loc[df['Wage'].idxmax()][0]))","e6ffe545":"#Top 10 most valued players and highest earners players\ntop_values=df.sort_values(by=\"Value\",ascending=False).head(10)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=top_values.Name,\n    x=top_values.Value,\n   orientation='h',\n    name='potential',\n    marker=dict(\n        color='rgba(30, 200, 100, 100)',\n        line=dict(color='rgba(246, 78, 139, 1.0)')\n    )\n    ))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Top 10 valuable players',template = template,barmode='stack', autosize=False,width=650,\n                height=400,margin=dict( l=100,r=100, b=30,t=100, pad=4\n                          )\n)\n\nfig.show()\n\n       ","f98615a3":"#Top 10 most valued players and highest earners players\ntop_earners=df.sort_values(by=\"Wage\",ascending=False).head(10)\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=top_earners.Name,\n    x=top_earners.Wage,\n   orientation='h',\n    name='potential',\n    marker=dict(\n        color='rgba(70, 20, 100, 10)',\n        line=dict(color='rgba(246, 78, 139, 1.0)')\n    )\n    ))\n\ntemplate = dict(layout=go.Layout(title_font=dict(family=\"Rockwell\", size=30)))\n\nfig.update_layout(\n                title = 'Top 10 Earners player',template = template,barmode='stack', autosize=False,width=650,\n                height=400,margin=dict( l=100,r=100, b=30,t=100, pad=4\n                          )\n)\n\nfig.show()\n\n       ","e133ea1a":"#age columns analysis\nplt.figure(figsize=(10,5))\nsns.countplot(df[\"Age\"])\nplt.title(\"Players age distribution\",fontsize=20)\nplt.xlabel(\"Players age\",fontsize=20)\nplt.ylabel(\"Count\",fontsize=20)\nplt.show()","0d710017":"#analysis age vs potential ,overall performance,Dribling,stamina,strength,Balance col\ndata=['Overall', 'Potential']\ncolors=[\"#00FFFF\",\"#FFA500\",\"#ADD8E6\",\"#ED00D9\",\"#ED1400\"]\nfor col in data:\n    fig = px.scatter(data_frame = df,\n             x = \"Age\",\n             y=col,color_discrete_sequence=colors,color_continuous_scale=colors\n            ,template='plotly_dark', width=500,height=350)\n\n    fig.show()\n   ","452bb512":"sns.lmplot(x = 'BallControl', y = 'Dribbling', data = df,col = 'Preferred Foot',scatter_kws = {'alpha':0.5,'color':'green'},\n           line_kws={'color':'blue'})","11d49fae":"fig = px.pie(df, names = \"Preferred Foot\",\n             title = \"<b>Counts in Preferred Foot<\/b>\",\n             hole = 0.4, template = \"plotly_dark\",\n            width=600,\n            height=400)\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 2)))\n\n\nfig.show()","c60c8a30":"fig = px.pie(df, names = \"Work Rate\",\n             title = \"<b>Counts in Work Rate<\/b>\",\n             hole = 0.4, template = \"plotly_dark\",\n            width=600,\n            height=500)\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 2)))\n\n\nfig.show()","d73784b5":"#analysis overall performance and age with respect to preferred foot\n#plt.rcParams['figure.figsize'] = (20, 7)\nplt.figure(figsize=(20,12))\nsns.boxenplot(df[\"Age\"],df[\"Overall\"],hue=df[\"Preferred Foot\"])\nplt.title(\"Players age vs overall performance wrt preferred foot\",fontsize=40)\nplt.xticks(fontsize=20)\nplt.yticks(fontsize=20)\nplt.xlabel(\"Players age\",fontsize=20)\nplt.ylabel(\"Overall\",fontsize=20)\nplt.show()","1d742063":"cols = ['Age','Overall','Potential','Acceleration','SprintSpeed',\"Agility\",\"Stamina\",'Strength','Preferred Foot']\ndf_small = df[cols]\ndf_small.head()","d1f5834b":"#analysis these col wrt preferred foot\nsns.pairplot(df_small,hue=\"Preferred Foot\")","c9c8671d":"#dropping the unnecceary columns \ndf=df.drop(df.columns[20:46],axis=1)\ncol=[\"Name\",\"Club\",\"Contract Valid Until\"]\ndf=df.drop(col,axis=1)\ndf.shape","97544dba":"#impute the missing values\n#we have only 1 missing values column = (Position coluumns)\ndf[\"Position\"].fillna(\"Unknown\",inplace=True)","92bd09bd":"#get a count of nationalities in the dataset,make of list on those with over 250 players .\nnationalities_count=df[\"Nationality\"].value_counts()\nnat_list=nationalities_count[nationalities_count>250].index.tolist()\n\ndef majorNation(data):\n    if (data[\"Nationality\"] in nat_list):\n        return 1\n    else:\n        return 0\ndf[\"major_nation\"]=df.apply(majorNation,axis=1)\n\n#encode preferred foot col into numerical.\ndf=pd.get_dummies(df,columns=[\"Preferred Foot\"], drop_first=True)\n\n#Create a simplified position varaible to account for all player positions.\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'DF'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n    \ndf['Simple_Position'] = df.apply(simple_position,axis = 1)\n\n#encode simple position col into numerical.\ndf=pd.get_dummies(df,columns=[\"Simple_Position\"], drop_first=True)","87f0baad":"#Split the Work Rate Column in two\ntempwork = df[\"Work Rate\"].str.split(\"\/ \",expand=True) \n\n#Create new columns for first and secoend work rate\ndf[\"WorkRate1\"]= tempwork[0]   \ndf[\"WorkRate2\"]= tempwork[1]\n#encode workrate1 and workRate2 columns into numerical.\ndf=pd.get_dummies(df,columns=[\"WorkRate1\"], drop_first=True)\ndf=pd.get_dummies(df,columns=[\"WorkRate2\"], drop_first=True)\n\ndf=df.drop([\"Nationality\",'Body Type','Position',\"Work Rate\"],axis=1)","d4e4342f":"df.head()","2bdb4feb":"#get the features and terget columns \ny=df.Value\nX=df.drop([\"Value\"],axis=1)","25ef0f2a":"#train test split  \nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\nprint(\"X_train shape: \",x_train.shape)\nprint(\"X_test shape: \",x_test.shape)\nprint()\nprint(\"Y_train shape: \",y_train.shape)\nprint(\"Y_test shape: \",y_test.shape)\n","270f0dd4":"# Using standard scaler\nsc=StandardScaler()\nx_train_scaled=sc.fit_transform(x_train)\nx_test_scaled=sc.transform(x_test)\n\nx_train = pd.DataFrame(x_train_scaled, columns = x_train.columns[:])\nx_test = pd.DataFrame(x_test_scaled, columns = x_test.columns[:])\nx_train.head()","28161f79":"#Mutual information Gain\nmutual=SelectKBest(mutual_info_regression,k=15).fit(x_train,y_train)\nmutual","f7d237c4":"#convert into dataframe and check the top 15 features\nfetures=pd.DataFrame({\"features\":list(x_train.columns),\"Score\":mutual.scores_})\nnew=fetures.sort_values(\"Score\",ascending=False)\nnew.head(15)\n","0f0b6b2f":"#get the top features using the mutual information gain.\nxtrain=mutual.transform(x_train)\nxtest=mutual.transform(x_test)\nxtrain[0:3]","95946bfb":"#this function used to evalute the models with features and terget.\ndef models_score(models, x_train, x_test, y_train, y_test):    \n    scores = {}\n    for name, model in models.items():\n        model.fit(x_train, y_train)\n        y_pred=model.predict(x_test) \n        scores[name] =r2_score(y_test,y_pred)\n        #printing the model name and accuracy !!!!!\n        print(\"Model name: \",model)\n        print(\"R2 score :--->>\",r2_score(y_test,y_pred))\n        print(\"MSE\",mean_squared_error(y_test,y_pred))\n        print(\"MAE\",mean_absolute_error(y_test,y_pred))\n        print(\"\\n<<<<------------------------------------------------------------->>>>\\n\")\n           \n   \n    model_scores = pd.DataFrame(scores, index=['Score']).transpose()\n    model_scores = model_scores.sort_values('Score',ascending=False)\n    return model_scores","3dc34c4b":"#initialize the models \nmodels = {\"GradiantBoost\":GradientBoostingRegressor(random_state=42),\n         \"RandomForest\":RandomForestRegressor(random_state=42),\n         \"XGBboost\":XGBRegressor()}","154bae89":"#Calling the function\nmodel_scores = models_score(models, x_train, x_test, y_train, y_test)","335c482e":"#printing the model score\nmodel_scores","e57c95d5":"model_scores = model_scores.reset_index().rename({\"index\":\"Algorithms\"}, axis = 1)\n\nmodel_scores.style.bar()","6fcd5b82":"#pie plot \nlabel = model_scores['Algorithms']\nvalue = model_scores['Score']\n\nfig = go.Figure(data=[go.Pie(labels = label, values = value, rotation = 90)])\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 1.5)))\n\nfig.update_layout(title_x=0.5,\n                  title_font=dict(size=20),\n                  uniformtext_minsize=15)\n\nfig.show()","7153b395":"fig = px.bar(data_frame = model_scores,\n             x=\"Algorithms\",\n             y=\"Score\",\n             color=\"Algorithms\", title = \"<b>Models Score<\/b>\", template = 'plotly_dark')\n\nfig.update_layout(bargap=0.2)\n\nfig.show()","33f4acde":"<b>Analysis:\n    As the age is increases ,overall performance,potential is decreases.","43f2ef39":"<b>No duplicted rows found , great \ud83d\ude01","fd6990ef":"<a id=\"6\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\">\ud83d\udd25 Feature Engineering<\/p>","4ee36131":"<a id=\"3.1\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83e\udd3c\u200d\u2640\ufe0fDuplicated rows <\/p>","f7b717de":"<b>Most of the players age lies between 19 to 29","20c97a1d":"<a id=\"7.2\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\"> \ud83d\udc31\u200d\ud83c\udfcdTrain test split<\/p>","5bdac530":"<a id=\"2\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83d\udcdd Data Cleaning+Processing<\/p>","5b364756":"<a id=\"10\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83d\udcca Visualize Model Score<\/p>","9797e466":"<a id=\"1\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n    \n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\">\ud83c\udfb0 Importing Libraries<\/p>","6af01c0f":"<a id=\"4\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83d\udcc8 Statistical information of Dataframe <\/p>","6ef14c3d":"<a id=\"2\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83d\udcdd Meta information \n    about Dataframe<\/p>","2011a7fe":"<b>European contries players are most here\n    ","c81a835e":"<a id=\"\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\"> \ud83d\udea2Data Story<\/p>","4f23febc":"<a id=\"7.3\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\"> \ud83c\udfafScaling the features<\/p>","b538a3cd":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n          text-align: center; font-size:250%;border-radius:20px 80px;\">FIFA 19 Complete Players dataset<\/p>","496219bb":"<a id=\"9\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83e\uddee Models Score<\/p>","96af2c18":"<a id=\"6\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\">\ud83d\udd25 EDA & Visualization<\/p>","76e365b0":"<b>\ud83d\ude4b\u200d\u2642\ufe0f\ud83d\ude4b\u200d\u2640\ufe0f Hi all !!! we are going to work with Fifa 19 players dataset,If you like this notebook then plz consider a upvote for me and if don't plz drop your advise or comment so that i improve my skill \ud83d\ude0e\ud83d\ude0e","00a8e447":"<b>Most of the players are right in preferred foot","8f37ef64":"<a id=\"2\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\">\ud83c\udfb0 Load the dataset<\/p>","0d7df2f5":"<a id=\"3\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83d\uded2Missing values <\/p>","b925d752":"<a id=\"8\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\"> \ud83e\udd16 Create & Train Model<\/p>","751e6ba4":"<b><u>This dataset includes lastest edition FIFA 2019 players attributes like:-<\/u>\n    \nAge, Nationality, Overall, Potential, Club, Value, Wage, Preferred Foot, International Reputation, Weak Foot, Skill Moves, Work Rate, Position, Jersey Number, Joined, Loaned From, Contract Valid Until, Height, Weight, LS, ST, RS, LW, LF, CF, RF, RW, LAM, CAM, RAM, LM, LCM, CM, RCM, RM, LWB, LDM, CDM, RDM, RWB, LB, LCB, CB, RCB, RB, Crossing, Finishing, Heading, Accuracy, ShortPassing, Volleys, Dribbling, Curve, FKAccuracy, LongPassing, BallControl, Acceleration, SprintSpeed, Agility, Reactions, Balance, ShotPower, Jumping, Stamina, Strength, LongShots, Aggression, Interceptions, Positioning, Vision, Penalties, Composure, Marking, StandingTackle, SlidingTackle, GKDiving, GKHandling, GKKicking, GKPositioning, GKReflexes, and Release Clause.\n    \n \n    \n    \n\n    \n    \n    \n    \n    \nReference : https:\/\/www.kaggle.com\/karangadiya\/fifa19    ","a48ab74b":"<a id=\"\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:220%;border-radius:20px 80px;\">\ud83c\udf08Thank you \ud83c\udf83 Happy kaggling\ud83d\udc45<\/p>","649ee1e2":"<b>Analysis:Most of the players are right in preferred foot ","04e57c72":"<b>we got some of the rows are almost empty or contain some data\/values ,let's find their index and remove them .to find them we use the height and weight columns because these two columns are contain no missing values except those rows \ud83d\ude0e\n    ","faf65462":"<b>Too much missing values \ud83d\ude2b\ud83d\ude2b,we will fix it later !\n   ","c32aa25b":"<a id=\"6\"><\/a>\n<div class=\"list-group\" id=\"1\" role=\"tablist\">\n<p style=\"padding: 20px; background-color:#7FDBFF;color: Black;font-weight: bold;\n              text-align: center; font-size:250%;border-radius:20px 80px;\">\ud83d\udd25 Feature Selection<\/p>","61b1d575":"![1_jgWmDxmnDmX2UBB7RzmI6A.jpeg](attachment:1_jgWmDxmnDmX2UBB7RzmI6A.jpeg)"}}