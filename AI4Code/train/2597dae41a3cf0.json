{"cell_type":{"01d4c9c6":"code","841f7597":"code","77bc5640":"code","333859a2":"code","278c9f42":"code","13600a4d":"code","4009b10b":"code","84b8ec84":"code","5118749d":"code","8a3d95dd":"code","31c2f919":"code","b689422b":"code","03cb026d":"code","79150ecb":"code","505f8a21":"code","c0315668":"code","955fe728":"code","0c23aeeb":"markdown"},"source":{"01d4c9c6":"import numpy as np\nimport pandas as pd \n\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\n!pip install colorspacious\nfrom colorspacious import cspace_converter","841f7597":"cmaps = {}\n\ngradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\n\n\ndef plot_color_gradients(category, cmap_list):\n    # Create figure and adjust figure height to number of colormaps\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 \/ figh, bottom=0.15 \/ figh,\n                        left=0.2, right=0.99)\n    axs[0].set_title(f'{category} colormaps', fontsize=14)\n\n    for ax, name in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))\n        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,\n                transform=ax.transAxes)\n\n    # Turn off *all* ticks & spines, not just the ones with colormaps.\n    for ax in axs:\n        ax.set_axis_off()\n\n    # Save colormap list for later.\n    cmaps[category] = cmap_list\n    \ndef get_x(x): \n    return x.values.reshape(28, 28)","77bc5640":"TRAIN_PATH = \"..\/input\/digit-recognizer\/train.csv\"\nTEST_PATH = \"..\/input\/digit-recognizer\/test.csv\"\n\nTARGET = \"label\"","333859a2":"train = pd.read_csv(TRAIN_PATH)","278c9f42":"train = train.drop([TARGET],axis=1)\ntrain","13600a4d":"plot_color_gradients('Miscellaneous',\n                     ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',\n                      'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',\n                      'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',\n                      'turbo', 'nipy_spectral', 'gist_ncar'])\n\nplt.show()","4009b10b":"plot_color_gradients('Qualitative',\n                     ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',\n                      'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',\n                      'tab20c'])","84b8ec84":"plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])","5118749d":"plot_color_gradients('Diverging',\n                     ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',\n                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])","8a3d95dd":"plot_color_gradients('Sequential (2)',\n                     ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',\n                      'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',\n                      'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])","31c2f919":"plot_color_gradients('Sequential',\n                     ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',\n                      'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',\n                      'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])","b689422b":"mpl.rcParams.update({'font.size': 12})\n\n# Number of colormap per subplot for particular cmap categories\n_DSUBS = {'Perceptually Uniform Sequential': 5, 'Sequential': 6,\n          'Sequential (2)': 6, 'Diverging': 6, 'Cyclic': 3,\n          'Qualitative': 4, 'Miscellaneous': 6}\n\n# Spacing between the colormaps of a subplot\n_DC = {'Perceptually Uniform Sequential': 1.4, 'Sequential': 0.7,\n       'Sequential (2)': 1.4, 'Diverging': 1.4, 'Cyclic': 1.4,\n       'Qualitative': 1.4, 'Miscellaneous': 1.4}\n\n# Indices to step through colormap\nx = np.linspace(0.0, 1.0, 100)\n\n# Do plot\nfor cmap_category, cmap_list in cmaps.items():\n\n    # Do subplots so that colormaps have enough space.\n    # Default is 6 colormaps per subplot.\n    dsub = _DSUBS.get(cmap_category, 6)\n    nsubplots = int(np.ceil(len(cmap_list) \/ dsub))\n\n    # squeeze=False to handle similarly the case of a single subplot\n    fig, axs = plt.subplots(nrows=nsubplots, squeeze=False,\n                            figsize=(7, 2.6*nsubplots))\n\n    for i, ax in enumerate(axs.flat):\n\n        locs = []  # locations for text labels\n\n        for j, cmap in enumerate(cmap_list[i*dsub:(i+1)*dsub]):\n\n            # Get RGB values for colormap and convert the colormap in\n            # CAM02-UCS colorspace.  lab[0, :, 0] is the lightness.\n            rgb = cm.get_cmap(cmap)(x)[np.newaxis, :, :3]\n            lab = cspace_converter(\"sRGB1\", \"CAM02-UCS\")(rgb)\n\n            # Plot colormap L values.  Do separately for each category\n            # so each plot can be pretty.  To make scatter markers change\n            # color along plot:\n            # https:\/\/stackoverflow.com\/q\/8202605\/\n\n            if cmap_category == 'Sequential':\n                # These colormaps all start at high lightness but we want them\n                # reversed to look nice in the plot, so reverse the order.\n                y_ = lab[0, ::-1, 0]\n                c_ = x[::-1]\n            else:\n                y_ = lab[0, :, 0]\n                c_ = x\n\n            dc = _DC.get(cmap_category, 1.4)  # cmaps horizontal spacing\n            ax.scatter(x + j*dc, y_, c=c_, cmap=cmap, s=300, linewidths=0.0)\n\n            # Store locations for colormap labels\n            if cmap_category in ('Perceptually Uniform Sequential',\n                                 'Sequential'):\n                locs.append(x[-1] + j*dc)\n            elif cmap_category in ('Diverging', 'Qualitative', 'Cyclic',\n                                   'Miscellaneous', 'Sequential (2)'):\n                locs.append(x[int(x.size\/2.)] + j*dc)\n\n        # Set up the axis limits:\n        #   * the 1st subplot is used as a reference for the x-axis limits\n        #   * lightness values goes from 0 to 100 (y-axis limits)\n        ax.set_xlim(axs[0, 0].get_xlim())\n        ax.set_ylim(0.0, 100.0)\n\n        # Set up labels for colormaps\n        ax.xaxis.set_ticks_position('top')\n        ticker = mpl.ticker.FixedLocator(locs)\n        ax.xaxis.set_major_locator(ticker)\n        formatter = mpl.ticker.FixedFormatter(cmap_list[i*dsub:(i+1)*dsub])\n        ax.xaxis.set_major_formatter(formatter)\n        ax.xaxis.set_tick_params(rotation=50)\n        ax.set_ylabel('Lightness $L^*$', fontsize=12)\n\n    ax.set_xlabel(cmap_category + ' colormaps', fontsize=14)\n\n    fig.tight_layout(h_pad=0.0, pad=1.5)\n    plt.show()","03cb026d":"mpl.rcParams.update({'font.size': 14})\n\n# Indices to step through colormap.\nx = np.linspace(0.0, 1.0, 100)\n\ngradient = np.linspace(0, 1, 256)\ngradient = np.vstack((gradient, gradient))\n\n\ndef plot_color_gradients(cmap_category, cmap_list):\n    fig, axs = plt.subplots(nrows=len(cmap_list), ncols=2)\n    fig.subplots_adjust(top=0.95, bottom=0.01, left=0.2, right=0.99,\n                        wspace=0.05)\n    fig.suptitle(cmap_category + ' colormaps', fontsize=14, y=1.0, x=0.6)\n\n    for ax, name in zip(axs, cmap_list):\n\n        # Get RGB values for colormap.\n        rgb = cm.get_cmap(plt.get_cmap(name))(x)[np.newaxis, :, :3]\n\n        # Get colormap in CAM02-UCS colorspace. We want the lightness.\n        lab = cspace_converter(\"sRGB1\", \"CAM02-UCS\")(rgb)\n        L = lab[0, :, 0]\n        L = np.float32(np.vstack((L, L, L)))\n\n        ax[0].imshow(gradient, aspect='auto', cmap=plt.get_cmap(name))\n        ax[1].imshow(L, aspect='auto', cmap='binary_r', vmin=0., vmax=100.)\n        pos = list(ax[0].get_position().bounds)\n        x_text = pos[0] - 0.01\n        y_text = pos[1] + pos[3]\/2.\n        fig.text(x_text, y_text, name, va='center', ha='right', fontsize=10)\n\n    # Turn off *all* ticks & spines, not just the ones with colormaps.\n    for ax in axs.flat:\n        ax.set_axis_off()\n\n    plt.show()\n\n\nfor cmap_category, cmap_list in cmaps.items():\n\n    plot_color_gradients(cmap_category, cmap_list)","79150ecb":"plt.imshow(get_x(train.loc[11]), cmap = 'gray')","505f8a21":"plt.imshow(get_x(train.loc[6]), cmap = 'Greys')","c0315668":"plt.imshow(get_x(train.loc[7]), cmap = 'gnuplot')","955fe728":"train = train\/255\nplt.imshow(get_x(train.loc[1]), cmap = 'Accent');","0c23aeeb":"refrence : https:\/\/matplotlib.org\/stable\/tutorials\/colors\/colormaps.html"}}