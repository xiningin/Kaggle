{"cell_type":{"7bd66a37":"code","cd74936b":"code","e776d8ca":"code","927e49da":"code","ad70fd4b":"code","7a0c94c2":"code","c1f7b95f":"code","5a78428c":"code","5072ad16":"code","c5854771":"code","6dad2712":"code","f744464d":"code","383c565c":"code","47b37634":"code","5e4581de":"code","02c1524c":"code","6426e040":"code","4ac0e367":"code","541d8946":"code","9814d51b":"code","a6f4e765":"code","9cf81b6c":"code","4441f6ac":"code","dd9393ed":"code","de5dd4ca":"code","c404a348":"code","4a54c15a":"code","af369ded":"code","bb997054":"code","c082db42":"code","aa970e51":"code","e46fbfbe":"code","6eec5faf":"code","585d96e0":"code","e04c8488":"markdown","9a97c808":"markdown","673ffc6a":"markdown","9880a551":"markdown","fa80a017":"markdown","c9d44922":"markdown","0ecd5350":"markdown"},"source":{"7bd66a37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd74936b":"data = pd.read_csv(\"..\/input\/test-file\/tested.csv\")\n","e776d8ca":"data.head()","927e49da":"data.info()","ad70fd4b":"sns.countplot(data=data,x=data[\"Survived\"] )","7a0c94c2":"sns.jointplot(data=data, x=data[\"Fare\"], y=data[\"Age\"], hue=\"Survived\")","c1f7b95f":"sns.histplot(data, x=data[\"Age\"], hue=\"Survived\")","5a78428c":"sns.catplot(x=\"Pclass\", col=\"Survived\", data=data, kind=\"count\", hue=\"Sex\")","5072ad16":"sns.displot(data[\"Fare\"], kde=True)","c5854771":"sns.countplot(x=\"Survived\", data = data, hue=\"Pclass\")","6dad2712":"sns.heatmap(data.isnull())","f744464d":"data[\"Age\"].median()\ndata[\"Age\"].fillna((28), inplace=True)\n","383c565c":"data[\"Fare\"].median()\n","47b37634":"data[\"Fare\"].fillna((14.4542), inplace=True)","5e4581de":"data[\"Fare\"]","02c1524c":"print(data[\"Age\"].median())","6426e040":"data.head()","4ac0e367":"data.drop([\"SibSp\", \"Cabin\", \"Ticket\"], axis=1, inplace=True)","541d8946":"data.head()","9814d51b":"data.drop([\"PassengerId\", \"Name\", \"Embarked\"], axis=1, inplace=True)","a6f4e765":"Male = pd.get_dummies(data[\"Sex\"], drop_first=True)","9cf81b6c":"data = pd.concat([data, Male], axis = 1)","4441f6ac":"data.drop([\"Sex\"], axis=1, inplace=True)","dd9393ed":"data.head()","de5dd4ca":"X = data.drop([\"Survived\"], axis=1)\ny = data[\"Survived\"]\n","c404a348":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","4a54c15a":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)","af369ded":"print(X_test[\"Fare\"].median)\n","bb997054":"X_test[\"Fare\"].fillna((321), inplace=True)","c082db42":"X_test.info()","aa970e51":"predictions = logmodel.predict(X_test)","e46fbfbe":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nprint(classification_report(y_test, predictions))","6eec5faf":"print(confusion_matrix(y_test, predictions))","585d96e0":"print(accuracy_score(y_test, predictions))","e04c8488":"Training and testing data.","9a97c808":"Perform some data visualization.","673ffc6a":"Fill any missing data. Imputation. Use --> from sklearn.impute import SimpleImputer imp = SimpleImputer(missing_values=np.nan, strategy='mean')","9880a551":"Read the file to get information.","fa80a017":"Load the database","c9d44922":"Evaluate the model.","0ecd5350":"Create dummy variables."}}