{"cell_type":{"1d7d0b8c":"code","154626be":"code","db06ae55":"code","b95d5b6d":"code","46a2d32d":"code","7e9df383":"code","94bcfbfc":"code","74e22fe2":"code","1057680f":"code","e1496cb4":"code","8c235f06":"code","c1ebc0b6":"code","5c0eea47":"code","dae2f038":"code","1a9a4b9b":"code","bd15435a":"code","40b94e97":"code","e60ced0f":"code","f00eb6dd":"code","957c7fd0":"code","25bd31ba":"code","6534346f":"code","4a3ba00a":"code","38266afe":"code","af218aa8":"code","a39f7567":"code","6d40d16c":"code","f3a63986":"code","243e5523":"code","81a477ab":"code","5112a6b0":"code","1f5922ef":"code","5cf104c2":"code","10027ada":"code","01067a5b":"code","b2ab8672":"code","858fb89f":"code","064f9961":"code","d2fef9c3":"markdown","030c1416":"markdown"},"source":{"1d7d0b8c":"import pandas as pd\nimport seaborn as sns\nimport statsmodels.formula.api as smf\nimport numpy as np\nimport statsmodels.api as sm\n%matplotlib inline\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt   \nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm","154626be":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","db06ae55":"df.head()","b95d5b6d":"df.isnull().sum().sum()","46a2d32d":"test.isnull().sum().sum()","7e9df383":"df.describe()","94bcfbfc":"df.info()","74e22fe2":"df.columns","1057680f":"df.dtypes","e1496cb4":"df","8c235f06":"!pip install pydotplus","c1ebc0b6":"X = df.drop(columns='label')\ny = df['label']\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier()\n\ndt.fit(X,y)\n\nfrom IPython.display import Image\nfrom sklearn.tree import export_graphviz\nimport pydotplus\n\n\n\nfeatures = X.columns\ndot_data = export_graphviz(dt,out_file=None,feature_names=features)\ngraph = pydotplus.graph_from_dot_data(dot_data)\nImage(graph.create_png())","5c0eea47":"dt = DecisionTreeClassifier(max_depth=3,min_samples_leaf=11)\ndt.fit(X,y)\nfeatures = X.columns\ndot_data = export_graphviz(dt,out_file=None,feature_names=features)\ngraph = pydotplus.graph_from_dot_data(dot_data)\nImage(graph.create_png())","dae2f038":"test1 = test\ny_pred = dt.predict(test1)\ny_prob = dt.predict_proba(test1)\ny_pred_train = dt.predict(X)\ny_prob_train = dt.predict_proba(X)","1a9a4b9b":"from sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score","bd15435a":"print('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)","40b94e97":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(n_estimators=10,random_state=1)\n\n","e60ced0f":"rfc.fit(X,y)","f00eb6dd":"test1 = test\ny_pred = rfc.predict(test1)\ny_prob = rfc.predict_proba(test1)\ny_pred_train = rfc.predict(X)\ny_prob_train = rfc.predict_proba(X)","957c7fd0":"from sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score","25bd31ba":"print('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)","6534346f":"samp = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","4a3ba00a":"samp.head()","38266afe":"test.shape","af218aa8":"data = pd.DataFrame(y_pred,index=samp['ImageId']).rename(columns={0:'Label'})\ndata = data.reset_index().rename(columns={'index':'ImageId'})\ndata = data.set_index('ImageId')\ndata.head()","a39f7567":"data.shape","6d40d16c":"data.to_csv('submission2.csv')","f3a63986":"from scipy.stats import randint as sp_randint\nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nrfc= RandomForestClassifier(random_state=1)\n\nparams = {'n_estimators':sp_randint(5,25),'criterion':['gini','entropy'],\n    'max_depth':sp_randint(2,10),\n    'min_samples_split':sp_randint(2,20),\n    'min_samples_leaf':sp_randint(1,20),'max_features':sp_randint(2,10)}\n\nrand_search_rfc = RandomizedSearchCV(rfc,param_distributions=params,cv=3,random_state=1)\n\nrand_search_rfc.fit(X,y)\n\nprint(rand_search_rfc.best_params_)","243e5523":"from sklearn.model_selection import train_test_split\n\nrfc = RandomForestClassifier(**rand_search_rfc.best_params_)\n\nrfc.fit(X,y)\n\ntest1 = test\ny_pred = rfc.predict(test1)\ny_prob = rfc.predict_proba(test1)\ny_pred_train = rfc.predict(X)\ny_prob_train = rfc.predict_proba(X)\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score\n\nprint('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)","81a477ab":"data = pd.DataFrame(y_pred,index=samp['ImageId']).rename(columns={0:'Label'})\ndata = data.reset_index().rename(columns={'index':'ImageId'})\ndata = data.set_index('ImageId')\ndata.head()\n\ndata.to_csv('submission3.csv')","5112a6b0":"##LGBM:","1f5922ef":"import lightgbm as lgb\nlgbc = lgb.LGBMClassifier()\n\nlgbc.fit(X,y)\n\ntest1 = test\ny_pred = lgbc.predict(test1)\ny_prob = lgbc.predict_proba(test1)\ny_pred_train = lgbc.predict(X)\ny_prob_train = lgbc.predict_proba(X)\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score\n\nprint('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)\n\ncols = X.columns\nlgbc.feature_importances_\n\nfi = pd.DataFrame(index=cols,data=lgbc.feature_importances_,columns=['Importance'])\nfi\n\n#Feature importance is available for bagging and boosting both\n\nfi['Importance'].sort_values(ascending=False).plot.bar()","5cf104c2":"data = pd.DataFrame(y_pred,index=samp['ImageId']).rename(columns={0:'Label'})\ndata = data.reset_index().rename(columns={'index':'ImageId'})\ndata = data.set_index('ImageId')\ndata.head()\n\ndata.to_csv('submission7.csv')","10027ada":"#hyperparameter tuning of LGBM\n\nfrom scipy.stats import randint as sp_randint\nfrom sklearn.model_selection import RandomizedSearchCV\n\nlgbc= lgb.LGBMClassifier(random_state=1)\n\nparams = {'n_estimators':sp_randint(5,250),\n    'max_depth':sp_randint(2,20),\n    'min_child_samples':sp_randint(1,20),'num_leaves':sp_randint(5,50)}\n\nrand_search_lgbc = RandomizedSearchCV(lgbc,param_distributions=params,cv=3,random_state=1)\n\nrand_search_lgbc.fit(X,y)\n\nprint(rand_search_lgbc.best_params_)\n\n\n\nlgbc= lgb.LGBMClassifier(**rand_search_lgbc.best_params_,random_state=1)\n\nlgbc.fit(X,y)\n\ntest1 = test\ny_pred = lgbc.predict(test1)\ny_prob = lgbc.predict_proba(test1)\ny_pred_train = lgbc.predict(X)\ny_prob_train = lgbc.predict_proba(X)\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score\n\nprint('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)\n\ncols = X.columns\nlgbc.feature_importances_\n\nfi = pd.DataFrame(index=cols,data=lgbc.feature_importances_,columns=['Importance'])\nfi\n\n#Feature importance is available for bagging and boosting both\n\nfi['Importance'].sort_values(ascending=False).plot.bar()","01067a5b":"data = pd.DataFrame(y_pred,index=samp['ImageId']).rename(columns={0:'Label'})\ndata = data.reset_index().rename(columns={'index':'ImageId'})\ndata = data.set_index('ImageId')\ndata.head()\ndata.to_csv('submission8.csv')","b2ab8672":"##Support Vector Machines","858fb89f":"# Stacking algorithms\n\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\ndt = DecisionTreeClassifier()\nlgbc= lgb.LGBMClassifier(**rand_search_lgbc.best_params_)\nrfc = RandomForestClassifier(**rand_search_rfc.best_params_)\n\n\nclf = VotingClassifier(estimators=[('dt',dt),('lgbc',lgbc),('rfc',rfc),('lr',lr)],voting='soft')\nclf.fit(X,y)\n\n\ntest1 = test\ny_pred = clf.predict(test1)\ny_prob = clf.predict_proba(test1)\ny_pred_train = clf.predict(X)\ny_prob_train = clf.predict_proba(X)\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score,roc_curve,f1_score\n\nprint('Accuracy of Decision Tree on Train',accuracy_score(y_pred_train,y))\nprint('F1 score on train',f1_score(y,y_pred_train,average='weighted')*100)","064f9961":"data = pd.DataFrame(y_pred,index=samp['ImageId']).rename(columns={0:'Label'})\ndata = data.reset_index().rename(columns={'index':'ImageId'})\ndata = data.set_index('ImageId')\ndata.head()\ndata.to_csv('submission11.csv')","d2fef9c3":"# Hyper parameter tuning of Random Forest","030c1416":"# ##Random Forest Classifier"}}