{"cell_type":{"45ea47ba":"code","e199ca2d":"code","3388ea9c":"code","1f46b7ab":"code","adfa1974":"code","5c35bb28":"code","8c643daf":"code","3ae52060":"code","59906e8b":"code","ff27aa1f":"code","a34fe851":"code","e4e42d20":"code","5fec6bdd":"code","c43f11e9":"code","dd76b619":"code","fb4b52c4":"code","516fd2f5":"code","95ac357b":"code","1e417b8c":"code","f7c6da91":"code","a3077938":"code","682b713d":"code","d9814ae2":"code","e6125474":"code","c5d2f642":"code","90fd7c56":"code","00f66bb7":"code","79f512b1":"code","f1431c1c":"code","340477f4":"code","8a9da5b6":"code","74b7a8f7":"code","bc635ca5":"code","f2309aee":"code","310df454":"code","488002bd":"code","c15bcf44":"code","b12acc3a":"code","3e7b8a82":"code","54a826c8":"code","70bb5676":"code","c6ba78e3":"code","33f0d22c":"code","2e499ddd":"code","c3e8723e":"code","d0429469":"code","4fd0e061":"code","06156305":"code","1216f887":"code","9424a2f9":"code","05080d90":"code","f10fc38a":"code","e66b673d":"code","69ec920e":"code","7f7ad980":"code","3c880370":"code","33582e63":"code","31f6dfd4":"code","ffcff6a1":"code","01695eeb":"code","41b035e8":"code","af3fa111":"code","139603a7":"code","70eb6a73":"code","ac3ca844":"code","83698b56":"code","59cb9691":"code","ad474735":"code","191811b6":"code","477cc759":"code","7896aae6":"code","539b2e8f":"code","cf71379c":"code","c94a5853":"code","4337d14a":"code","66afaf0e":"code","9b00e630":"code","07f70d2a":"code","b9882725":"code","2d5a68ba":"code","ef948c74":"code","3f435454":"code","2032a1fa":"code","747bd02a":"code","f37af0f0":"code","0d9a6021":"code","8f43eda6":"code","ce0490d8":"code","3f404af8":"code","1c177edc":"code","4d1723bb":"code","86a11ab5":"code","30812f34":"code","b3fc6f22":"code","0c0e23c2":"code","221724f3":"code","53b85602":"code","48134813":"code","4e30c845":"code","8887825d":"code","8cae38b6":"code","1abd238d":"code","29170041":"code","5b0b39f1":"code","01f57c04":"code","18a75077":"code","08b725b9":"code","10216d98":"code","5c4d8216":"code","c13a35b3":"code","f6193044":"code","965c1ff1":"code","330b74f5":"code","0087767e":"code","97946f23":"code","ebbd48e7":"code","a9e7c8d3":"code","ccd1fed1":"code","8492c810":"code","a3a4f0fb":"code","479aab30":"code","37f0afff":"code","d23011c6":"code","d1d12466":"code","f6b4acab":"code","1541af46":"code","209a780a":"code","bc05d1f6":"code","d8adb8f1":"code","06548347":"code","4cef4933":"code","71fc40c2":"code","cce1a27d":"code","867c4a4e":"code","66d9d6cd":"code","53eeed9c":"code","dc021868":"code","6f11dd23":"code","f12d6232":"code","f6a245da":"code","416b362d":"code","e445c553":"code","83c7be72":"code","e73442b8":"code","9cd2ff05":"code","1a68bc04":"code","e2e16d22":"code","eae17f4e":"code","f4c194a7":"code","887737b4":"code","58902e69":"code","f8dcd9b7":"code","8183a972":"code","fc78f2a0":"code","a3afc404":"code","932f64f3":"code","da34fef2":"code","ea48b1de":"code","73dd5d59":"code","9dcd4d50":"code","5f648baf":"code","78f92e58":"code","91f035b3":"code","d394c3b3":"code","97ac129d":"code","6e0c04b1":"code","b79f78d8":"code","ae8ddc33":"code","b0476740":"code","7e1ef3f1":"code","40f32604":"code","25739c25":"code","f5861e96":"code","300a5681":"code","4b0d08a2":"code","86114c68":"code","cfedbc96":"code","8ed7b4d7":"code","c427c7f1":"code","eb795a30":"code","adec53d0":"code","6c7ae336":"code","03c14cf9":"code","af9d8948":"code","8cffc1a0":"code","6ffade78":"code","09dba5f0":"code","863dd3d9":"code","3d5db597":"code","638d509e":"code","383b9e9b":"markdown","337f97d8":"markdown","87f6d137":"markdown","7683881b":"markdown","00d260ee":"markdown","2b8cf4ee":"markdown","e6a6c2ea":"markdown","9c916e27":"markdown","2c8656cb":"markdown","5f0a2bfa":"markdown","a74061f0":"markdown","de8d087c":"markdown","81921996":"markdown","b54288bb":"markdown","413eca4d":"markdown","bb37761b":"markdown","f430bbdb":"markdown","4ec2ae22":"markdown","0d03074a":"markdown","c0ad89ee":"markdown"},"source":{"45ea47ba":"!pip install impyute\n!pip install ppscore","e199ca2d":"import pandas as pd\nimport numpy as np\n\nimport re\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport scipy.stats as sts\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom sklearn.impute import KNNImputer\n\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom pprint import pprint\n\n# Import label encoder \nfrom sklearn import preprocessing \nfrom sklearn.metrics import precision_recall_fscore_support as score\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfrom sklearn.feature_selection import VarianceThreshold\n\nfrom impyute.imputation.cs import mice\n# !pip install impyute\n\nfrom sklearn.decomposition import PCA","3388ea9c":"bond_ratings = pd.read_csv('bond_ratings.csv')\nfund_allocations = pd.read_csv('fund_allocations.csv')\nfund_config = pd.read_csv('fund_config.csv')\nfund_ratios = pd.read_csv('fund_ratios.csv')\nfund_specs = pd.read_csv('fund_specs.csv')\nother_specs = pd.read_csv('other_specs.csv')\nreturn_3year = pd.read_csv('return_3year.csv')\nreturn_5year = pd.read_csv('return_5year.csv')\nreturn_10year = pd.read_csv('return_10year.csv')","1f46b7ab":"fund_ratios['ps_ratio'] = fund_ratios.ps_ratio.str.replace(',','')\nfund_ratios['mmc'] = fund_ratios.mmc.str.replace(',','')\nfund_ratios['pc_ratio'] = fund_ratios.pc_ratio.str.replace(',','')\nfund_ratios['pe_ratio'] = fund_ratios.pe_ratio.str.replace(',','')\n\nfund_ratios['ps_ratio'] = fund_ratios.ps_ratio.astype('float')\nfund_ratios['pc_ratio'] = fund_ratios.pc_ratio.astype('float')\nfund_ratios['pe_ratio'] = fund_ratios.pe_ratio.astype('float')\nfund_ratios['mmc'] = fund_ratios.mmc.astype('float')","adfa1974":"other_specs['ps_ratio'] = other_specs.ps_ratio.str.replace(',','')\nother_specs['mmc'] = other_specs.mmc.str.replace(',','')\nother_specs['pc_ratio'] = other_specs.pc_ratio.str.replace(',','')\nother_specs['pe_ratio'] = other_specs.pe_ratio.str.replace(',','')\n\nother_specs['ps_ratio'] = other_specs.ps_ratio.astype('float')\nother_specs['pc_ratio'] = other_specs.pc_ratio.astype('float')\nother_specs['pe_ratio'] = other_specs.pe_ratio.astype('float')\nother_specs['mmc'] = other_specs.mmc.astype('float')","5c35bb28":"other_specs.drop(columns=['pc_ratio','pb_ratio','pe_ratio','mmc','ps_ratio'],inplace=True)","8c643daf":"return_3year['3yrs_treynor_ratio_fund'] = return_3year['3yrs_treynor_ratio_fund'].str.replace(',','')\n\nreturn_3year['3yrs_treynor_ratio_fund'] = return_3year['3yrs_treynor_ratio_fund'].astype('float')","3ae52060":"return_5year['5yrs_treynor_ratio_fund'] = return_5year['5yrs_treynor_ratio_fund'].str.replace(',','')\n\nreturn_5year['5yrs_treynor_ratio_fund'] = return_5year['5yrs_treynor_ratio_fund'].astype('float')","59906e8b":"return_10year['10yrs_treynor_ratio_fund'] = return_10year['10yrs_treynor_ratio_fund'].str.replace(',','')\n\nreturn_10year['10yrs_treynor_ratio_fund'] = return_10year['10yrs_treynor_ratio_fund'].astype('float')","ff27aa1f":"def correlation(dataset, threshold):\n    col_corr = set() # Set of all the names of deleted columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if (abs(corr_matrix.iloc[i, j]) >= threshold) and (corr_matrix.columns[j] not in col_corr):\n                colname = corr_matrix.columns[i] # getting the name of column\n                col_corr.add(colname)\n                if colname in dataset.columns:\n#                     del dataset[colname] # deleting the column from the dataset\n\n    print(col_corr)","a34fe851":"correlation(bond_ratings,0.8)","e4e42d20":"#Coulmn -> fund_allocations\ncorrelation(fund_allocations,0.8)","5fec6bdd":"#Coulmn -> fund_ratios\ncorrelation(fund_ratios,0.8)","c43f11e9":"#Coulmn -> fund_specs\ncorrelation(fund_specs,0.8)","dd76b619":"\n#Coulmn -> other_specs\ncorrelation(other_specs,0.8)","fb4b52c4":"#Coulmn -> return_3year\ncorrelation(return_3year,0.8)","516fd2f5":"#Coulmn -> return_5year\ncorrelation(return_5year,0.8)","95ac357b":"#Coulmn -> return_10year\ncorrelation(return_10year,0.8)","1e417b8c":"# [fund_config,fund_ratios]\nfund_con_rat = fund_config.merge(fund_ratios,on='fund_id')","f7c6da91":"# [fund_config , fund_ratios , fund_specs]\n# fund_con_rat.columns.intersection(fund_specs.columns)\nfund_con_rat_specs = fund_con_rat.merge(fund_specs,on='tag')","a3077938":"# [fund_config , fund_ratios , fund_specs , other_specs]\n# fund_specs.columns.intersection(other_specs.columns)\nfund_con_rat_specs_otherspecs = fund_con_rat_specs.merge(other_specs,on='tag')","682b713d":"# [fund_config , fund_ratios , fund_specs , other_specs , return_3year]\n# other_specs.columns.intersection(return_3year.columns)\nfund_con_rat_specs_otherspecs_3 = fund_con_rat_specs_otherspecs.merge(return_3year,on='tag')","d9814ae2":"# [fund_config , fund_ratios , fund_specs , other_specs , return_3year , return_5year]\n# return_3year.columns.intersection(return_5year.columns)\nfund_con_rat_specs_otherspecs_3_5 = fund_con_rat_specs_otherspecs_3.merge(return_5year,on='tag')","e6125474":"# [fund_config , fund_ratios , fund_specs , other_specs , return_3year , return_5year , return_10year]\n# return_5year.columns.intersection(return_10year.columns)\nfund_con_rat_specs_otherspecs_3_5_10 = fund_con_rat_specs_otherspecs_3_5.merge(return_10year,on='fund_id')","c5d2f642":"# [fund_config , fund_ratios , fund_specs , other_specs , return_3year , return_5year , return_10year , bond_ratings]\n# fund_con_rat_specs_otherspecs_3_5_10.columns.intersection(bond_ratings.columns)\nfund_con_rat_specs_otherspecs_3_5_10_BRate = fund_con_rat_specs_otherspecs_3_5_10.merge(bond_ratings,on='tag')","90fd7c56":"# [fund_config , fund_ratios , fund_specs , other_specs , return_3year , return_5year , return_10year , bond_ratings , fund_allocations]\nfund_con_rat_specs_otherspecs_3_5_10_BRate_alloc = fund_con_rat_specs_otherspecs_3_5_10_BRate.merge(fund_allocations,left_on='tag',right_on='id')","00f66bb7":"# fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.to_csv('colmerge_colab.csv',index=False)","79f512b1":"final = fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.copy()","f1431c1c":"final.shape","340477f4":"# sel = VarianceThreshold()\n# sel.fit_transform(final)","8a9da5b6":"final.currency.unique()","74b7a8f7":"final.drop(columns=['currency'],inplace=True)","bc635ca5":"final.us_govt_bond_rating.unique()","f2309aee":"final.drop(columns=['us_govt_bond_rating'],inplace=True)","310df454":"#df -> final\ncorrelation(final,0.80)","488002bd":"# final = pd.concat([final,fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.greatstone_rating_y],axis=1)","c15bcf44":"# final['inception_date'] = pd.to_datetime(final['inception_date'])\n# final.head()\n# final.info()\n# final = final.convert_dtypes()\nfinal.shape","b12acc3a":"final.select_dtypes(include='object').head()","3e7b8a82":"# Since fund_id unique, it has all 25k labels\nfinal.drop(columns=['fund_id'],inplace=True)","54a826c8":"final['inception_date'] = pd.to_datetime(final['inception_date'])\n# final['inception_year'] = 2020 - final['inception_date'].dt.year\nfinal['inception_year'] = final['inception_date'].dt.year\nfinal['inception_month'] = final['inception_date'].dt.month\nfinal['inception_day'] = final['inception_date'].dt.day","70bb5676":"final.drop(columns='inception_date',inplace=True)","c6ba78e3":"# final.select_dtypes(include='string')\ncateg_col = list(final.select_dtypes(include='object').columns)\nfinal[categ_col].isna().sum()","33f0d22c":"final[categ_col] = final[categ_col].fillna(value = 'MISSING')","2e499ddd":"final[categ_col].isna().sum()","c3e8723e":"final.fund_size.unique()","d0429469":"# final['fund_size'] = final['fund_size'].map({'Small':0,'Medium':1,'Large':2})\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nfinal['fund_size'] = labelencoder.fit_transform(final['fund_size'])\nfinal.fund_size[25:35]","4fd0e061":"#missing is replaced with 1\nfinal.fund_size.unique()","06156305":"print(final.investment_class.unique())\nfinal.investment_class[27:31]","1216f887":"final['investment_class'] = labelencoder.fit_transform(final['investment_class'])\nprint(final.investment_class.unique())\n#missing is replaced with 2\nfinal.investment_class[27:31]","9424a2f9":"#replace 1 in fund_size and 2 in investment_class with NA\nfinal.loc[final.fund_size == 1,'fund_size'] = np.nan\nfinal.loc[final.investment_class == 2,'investment_class'] = np.nan","05080d90":"final[['fund_size','investment_class']].info()\n# final.fund_size.astype('float')","f10fc38a":"imputed = mice(final[['fund_size','investment_class']].values)","e66b673d":"final[['fund_size','investment_class']] = imputed","69ec920e":"final[['fund_size','investment_class']][:5]\n# final.investment_class[27:31]","7f7ad980":"final.select_dtypes(include='object').head()","3c880370":"final.select_dtypes(exclude=['int','float']).describe(include='O').T","33582e63":"final = pd.get_dummies(final, columns=[\"parent_company\"], prefix=[\"PC\"],drop_first=True)","31f6dfd4":"final.shape","ffcff6a1":"pca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(final.loc[:,\"PC_13D Activist Fund\":'PC_Ziegler'])\ndf_parent = pd.DataFrame(data = principalComponents\n             , columns = ['parent1', 'parent2'])","01695eeb":"# pca.explained_variance_ratio_\nparent_col = list(final.loc[:,\"PC_13D Activist Fund\":'PC_Ziegler'].columns)\nfinal.drop(columns=parent_col,inplace=True)\nfinal = pd.concat([final, df_parent], axis = 1)","41b035e8":"final.shape","af3fa111":"#  global classes\n# classes = []\ndef Classes(series):\n  # fin = a = b = 0\n  if \"Class\" in series:\n    # fin = a = b = 0\n    # print('True')\n    dd = re.search(r'([A-Z0-9-]{0,8})\\s*(Class)\\s*([A-Z0-9-]{0,8})',series)\n    # fin = a = b = 0\n    if dd.groups()[0] == '' and dd.groups()[2] != '':\n      fin = dd.groups()[1]+ \"_\" + dd.groups()[2]\n      # classes.append(fin)\n    elif dd.groups()[0] != '' and dd.groups()[2] == '':\n      fin = dd.groups()[1] +\"_\"+ dd.groups()[0]\n      # classes.append(fin)\n    elif dd.groups()[0] != '' and dd.groups()[2] != '':\n      fin = dd.groups()[1] +\"_\"+ dd.groups()[0] + '_' + dd.groups()[2]\n      # classes.append(fin)\n    else:\n      fin = 'No_Class'\n      # classes.append(fin) \n  else:\n    dd = re.search(r'([A-Z0-9-]{0,8})$',series)\n    if len(dd.group()) !=0 :\n      fin = 'Class' + '_' + dd.group()\n      # classes.append(fin)\n    else:\n      fin = 'No_Class'\n      # classes.append(fin)\n  return fin\n","139603a7":"final['fund_name_class'] = final['fund_name'].apply(Classes)\n","70eb6a73":"def ClassCheck(x):\n  if x != 'No_Class':\n    alpha = x.split('_')[1][0]\n    return 'Class_'+alpha\n  else:\n    return x","ac3ca844":"final['fund_name_class'] = final['fund_name_class'].str.replace('-','').str.replace('__','_').apply(ClassCheck)","83698b56":"final.shape","59cb9691":"final.fund_name_class.unique()","ad474735":"index= final.fund_name_class[final['fund_name_class'].str.replace('-','').str.replace('__','_').apply(lambda x:x.split('_')[1]).apply(lambda x:x.isnumeric())].index","191811b6":"final.fund_name_class.loc[index] = 'No_Class'","477cc759":"final.fund_name_class.unique()","7896aae6":"# https:\/\/www.thebalance.com\/mutual-fund-shares-class-types-2466743\nfinal['fund_name_class'] = labelencoder.fit_transform(final['fund_name_class'])","539b2e8f":"# final['fund_name_class'].unique()\nfinal.loc[final.fund_name_class == 24,'fund_name_class'] = np.nan","cf71379c":"final['fund_name_class'].unique()","c94a5853":"final.head(3)","4337d14a":"import ppscore as pps\n# pps.score(final,['category'], \"greatstone_rating_x\")\ncol = list(final.select_dtypes(exclude=['int','float']).columns) + ['greatstone_rating_x']\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# pps.matrix(final.select_dtypes(exclude=['int','float']))\nplt.figure(figsize=(12,8))\ndf_matrix = pps.matrix(final[col])\nsns.heatmap(df_matrix, vmin=0, vmax=1, cmap=\"Blues\", linewidths=0.5, annot=True,fmt='0.2f')","66afaf0e":"final.drop(columns='fund_name',inplace=True)","9b00e630":"final.head()","07f70d2a":"final.isnull().sum()","b9882725":"# values = mice(final.values)","2d5a68ba":"# col =  list(final.columns)\n# final = pd.DataFrame(imputed,columns=col)","ef948c74":"# final['category'] = labelencoder.fit_transform(final['category'])\n# final['parent_company'] = labelencoder.fit_transform(final['parent_company'])\n# final['fund_id'] = labelencoder.fit_transform(final['fund_id'])\n# final['fund_name'] = labelencoder.fit_transform(final['fund_name'])","3f435454":"# Generating new olumn from category\n#All blends\nind_blend = final.category[final.category.str.contains('Blend')].index\nfinal.loc[ind_blend,'new_category'] = 'blend'\n\nind_Growth = final.category[final.category.str.contains('Growth')].index\nfinal.loc[ind_Growth,'new_category'] = 'growth'\n\nind_Value = final.category[final.category.str.contains('Value')].index\nfinal.loc[ind_Value,'new_category'] = 'value'\n\n#Target-Date\nind_tarDate = final.category[final.category.str.contains('Target-Date')].index\nfinal.loc[ind_tarDate,'new_category'] = 'target-date'\n\n#bond\nind_bond = final.category[final.category.str.contains('Bond')].index\nfinal.loc[ind_bond,'new_category'] = 'bond'\n\nind_Allocation= final.category[final.category.str.contains('Allocation')].index\nfinal.loc[ind_Allocation,'new_category'] = 'allocation'\n\n# fund_conf.category[fund_conf.category.str.contains('Stock')].value_counts()\nind_Stock = final.category[final.category.str.contains('Stock')].index\nfinal.loc[ind_Stock,'new_category'] = 'stock'\n\n# fund_conf.category[fund_conf.category.str.contains('Muni')].value_counts()\nind_Muni = final.category[final.category.str.contains('Muni')].index\nfinal.loc[ind_Muni,'new_category'] = 'muni'\n\n# fund_conf.category[fund_conf.category.str.contains('Trading')]\nind_Trading = final.category[final.category.str.contains('Trading')].index\nfinal.loc[ind_Trading,'new_category'] = 'trading'\n\n# fund_conf.category[fund_conf.category.str.contains('Allocation')]\nind_AJapan_Stk = final.category[final.category == 'Pacific\/Asia ex-Japan Stk'].index\nfinal.loc[ind_AJapan_Stk,'new_category'] = 'stock'\n\nind_realestate = final.category[final.category.str.contains('Real Estate')].index\nfinal.loc[ind_realestate,'new_category'] = 'realestate'\n\nind_Equity = final.category[final.category.str.contains('Equity')].index\nfinal.loc[ind_Equity,'new_category'] = 'equity'\n\nothers = final.loc[final.new_category.isna()]['category'].index\nfinal.loc[others,'new_category'] = 'others'","2032a1fa":"final.drop(columns='category',inplace=True)","747bd02a":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nfinal['new_category'] = labelencoder.fit_transform(final['new_category'])","f37af0f0":"(final.isnull().sum() * 100 \/ len(final)).sort_values(ascending=False)[:5]\n","0d9a6021":"final.loc[:,['maturity_bond','duration_bond']][:10]","8f43eda6":"final.drop(columns=['maturity_bond','duration_bond'],inplace=True)","ce0490d8":"# imputer = KNNImputer(n_neighbors=3)\n\n# df_filled = imputer.fit_transform(final[categ_col])","3f404af8":"# final = pd.get_dummies(final,columns=['investment_class'],drop_first=True)","1c177edc":"final.shape","4d1723bb":"final.select_dtypes(exclude=['int','float']).describe(include='O').T","86a11ab5":"col = list(final.select_dtypes(exclude=['int','float']).columns) + ['greatstone_rating_x']\ncol","30812f34":"# !pip install ppscore","b3fc6f22":"# import ppscore as pps\n# # pps.score(final,['category'], \"greatstone_rating_x\")\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n# import seaborn as sns\n# import matplotlib.pyplot as plt\n# plt.figure(figsize=(12,8))\n# df_matrix = pps.matrix(final[col])\n# sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=\"Blues\", linewidths=0.5, annot=True,fmt='0.2f')","0c0e23c2":"final.drop(columns=['fund_id','fund_name'],inplace=True)\n# final.drop(columns=['fund_id','fund_name','investment_class_Growth','investment_class_Value'],inplace=True)","221724f3":"col = list(final.select_dtypes(exclude=['int','float']).columns) + ['greatstone_rating_x']\ncol","53b85602":"# plt.figure(figsize=(12,8))\n# df_matrix = pps.matrix(final[col])\n# sns.heatmap(df_matrix, vmin=0, vmax=1, cmap=\"Blues\", linewidths=0.5, annot=True,fmt='0.2f')","48134813":"final.drop(columns=['category','parent_company'],inplace=True)","4e30c845":"# final = pd.get_dummies(final,columns=['category','parent_company'],drop_first=True)","8887825d":"final.head()","8cae38b6":"# final.to_csv('Hack_colab.csv',index=False)","1abd238d":"target = final.loc[:,'greatstone_rating_x'].copy()","29170041":"test_y = target[target.isna()]\ny = target[target.notna()]","5b0b39f1":"# target.isna().sum()\n# target[target.isna()]","01f57c04":"df_ind = final.loc[:,final.columns != 'greatstone_rating_x'].copy()\n# df_ind = final.copy()","18a75077":"# sorted(df_ind.columns.to_list())","08b725b9":"# df_ind.drop(columns='parent_company',inplace=True)","10216d98":"df_ind.head()","5c4d8216":"# df_ind['inception_date'] = pd.to_datetime(df_ind['inception_date'])\n# df_ind['inception_year'] = 2020 - df_ind['inception_date'].dt.year\n# # df_ind['inception_year'] = df_ind['inception_date'].dt.year\n# # df_ind['inception_month'] = df_ind['inception_date'].dt.month\n# # df_ind['inception_day'] = df_ind['inception_date'].dt.day","c13a35b3":"# df_ind.drop(columns=['parent_company','fund_name'],inplace=True)","f6193044":"# df_ind[np.abs(sts.zscore(df_ind['yield'])) > 3]['yield'] \n# df_ind[np.abs(sts.zscore(df_ind['yield'])) < 3]['yield'].mean()","965c1ff1":"for i in range(len(df_ind.columns)):\n    # print(df_ind.columns[i])\n    # print('*'*30)\n    # print(len(df_ind.loc[np.abs(sts.zscore(df_ind[df_ind.columns[i]],nan_policy='omit')) > 3,df_ind.columns[i]]))\n    #fill outliers with NAN\n    index = df_ind.loc[np.abs(sts.zscore(df_ind[df_ind.columns[i]],nan_policy='omit')) > 3,df_ind.columns[i]].index\n    df_ind[df_ind.columns[i]][index] = df_ind[df_ind.columns[i]].median() \n    #take median of each column\n#     median = X.loc[(sts.zscore(X[X.columns[i]])) < 3,X.columns[i]].median()\n    #fill NAN values with median\n#     X[X.columns[i]].fillna(median,inplace=True)\n#     print(len(X.loc[np.abs(sts.zscore(X[X.columns[i]],nan_policy='omit')) > 3,X.columns[i]]))\n#     print(f'After filling median : {len(X.loc[(sts.zscore(X[X.columns[i]],nan_policy='omit')) > 3,X.columns[i]])}\\n')","330b74f5":"df_ind.mmc.max()","0087767e":"# for i in range(len(df_ind_mean.columns)):\n#     index = df_ind_mean.loc[np.abs(sts.zscore(df_ind_mean[df_ind_mean.columns[i]],nan_policy='omit')) > 3,df_ind_mean.columns[i]].index\n#     df_ind_mean[df_ind_mean.columns[i]][index] = df_ind_mean[df_ind_mean.columns[i]].median() ","97946f23":"# # 'category','parent_company'\n# df_ind.columns.to_list()","ebbd48e7":"# from sklearn.decomposition import PCA\n# pca = PCA(n_components=2)\n# principalComponents = pca.fit_transform(df_ind.loc[:,\"parent_company_13D Activist Fund\":'parent_company_Ziegler'])\n# df_parent = pd.DataFrame(data = principalComponents\n#              , columns = ['parent1', 'parent2'])","a9e7c8d3":"# parent_col = list(df_ind.loc[:,\"parent_company_13D Activist Fund\":'parent_company_Ziegler'].columns)\n# df_ind.drop(columns=parent_col,inplace=True)\n# df_ind = pd.concat([df_ind, df_parent], axis = 1)","ccd1fed1":"# pca = PCA(n_components=2)\n# principalComponents = pca.fit_transform(df_ind.loc[:,'category_Allocation - 30% to 50% Equity':'category_World Small\/Mid Stock'])\n# df_category = pd.DataFrame(data = principalComponents\n#              , columns = ['category1', 'category2'])","8492c810":"# category_col = list(df_ind.loc[:,'category_Allocation - 30% to 50% Equity':'category_World Small\/Mid Stock'].columns)\n# df_ind.drop(columns=category_col,inplace=True)\n# df_ind = pd.concat([df_ind, df_parent], axis = 1)","a3a4f0fb":"# df_ind.isna().sum()","479aab30":"# df_ind.head()","37f0afff":"# dfind_copy = df_ind.copy()\n# correlation(fund_allocations,0.9)","d23011c6":"# dfind_copy.columns\n","d1d12466":"imputer = IterativeImputer(RandomForestRegressor(n_estimators=7))\nna_iterative = imputer.fit_transform(df_ind)\ncol =  list(df_ind.columns)\ndf_ind_iter = pd.DataFrame(na_iterative,columns=col)","f6b4acab":"df_ind_iter.isna().sum()","1541af46":"df_ind_iter.to_csv('Imputer.csv',index=False)\n# df_ind_iter = pd.read_csv('Imputer_1x_outlier.csv')","209a780a":"\n# final = pd.concat([final,fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.greatstone_rating_y],axis=1)","bc05d1f6":"df_ind_iter.isna().sum()","d8adb8f1":"def heatmap(dataset):\n    plt.figure(figsize=(45,40))\n    plt.rcParams.update({'font.size': 10})\n    matrix = np.triu(dataset.corr())\n    sns.heatmap(dataset.corr(),annot=True,cmap = 'coolwarm',mask=matrix)","06548347":"heatmap(df_ind_iter.iloc[:,:])","4cef4933":"df_ind_iter['3Y10Y_10YCS']","71fc40c2":"pca = PCA(n_components=1)\ndf_ind_iter['FR_3M_Re'] = pca.fit_transform(df_ind_iter[['fund_return_3months','return_ytd']])\ndf_ind_iter['2011_R_F_C'] = pca.fit_transform(df_ind_iter[['2011_return_fund','2011_return_category']])\ndf_ind_iter['2018_R_F_C'] = pca.fit_transform(df_ind_iter[['2018_return_fund','2018_return_category']])\ndf_ind_iter['3Y_FS_CS'] = pca.fit_transform(df_ind_iter[['3years_fund_std','3years_category_std']])\ndf_ind_iter['2013_CR_RF'] = pca.fit_transform(df_ind_iter[['2013_category_return','2013_return_fund']])\ndf_ind_iter['2017_CR_RF'] = pca.fit_transform(df_ind_iter[['2017_return_fund','2017_category_return']])\ndf_ind_iter['3Y_CRS_FRS'] = pca.fit_transform(df_ind_iter[['3years_category_r_squared','3years_fund_r_squared']])\ndf_ind_iter['2010_R_F_C'] = pca.fit_transform(df_ind_iter[['2010_return_fund','2010_return_category']])\ndf_ind_iter['5YBF_FB3Y'] = pca.fit_transform(df_ind_iter[['5_years_beta_fund','fund_beta_3years']])\ndf_ind_iter['5YR_F_MAF'] = pca.fit_transform(df_ind_iter[['5_years_return_fund','5_years_return_mean_annual_fund']])\ndf_ind_iter['IY_YU_YD'] = pca.fit_transform(df_ind_iter[['inception_year','years_up','years_down']])\ndf_ind_iter['10YFRS_5YFRS_3YCF'] = pca.fit_transform(df_ind_iter[['10years_fund_r_squared','5years_fund_r_squared','3Y_CRS_FRS']])\ndf_ind_iter['3YFC_10YFS'] = pca.fit_transform(df_ind_iter[['3Y_FS_CS','10years_fund_std']])\ndf_ind_iter['BPOP_SPOP'] = pca.fit_transform(df_ind_iter[['bond_percentage_of_porfolio','stock_percent_of_portfolio']])\ndf_ind_iter['10YRC_YRC'] = pca.fit_transform(df_ind_iter[['10_years_return_category','ytd_return_category']])\ndf_ind_iter['5YBC_CB3Y'] = pca.fit_transform(df_ind_iter[['5_years_beta_category','category_beta_3years']])\ndf_ind_iter['5YAC_3YAC'] = pca.fit_transform(df_ind_iter[['5_years_alpha_category','3_years_alpha_category']])\ndf_ind_iter['10YY_3YRC'] = pca.fit_transform(df_ind_iter[['10YRC_YRC','3_years_return_category']])\ndf_ind_iter['3Y10Y_10YCS'] = pca.fit_transform(df_ind_iter[['3YFC_10YFS','10years_category_std']])\ndf_ind_iter['5Y3Y_10YAC'] = pca.fit_transform(df_ind_iter[['5YAC_3YAC','10_years_alpha_category']])\n# df_ind_iter['10Y3Y_F3R'] = pca.fit_transform(df_ind_iter[['10YY_3YRC','FR_3M_Re']])\n# df_ind_iter['10YF_BPSP'] = pca.fit_transform(df_ind_iter[['10Y3Y_F3R','BPOP_SPOP']])\ndf_ind_iter['5YF_10YBF'] = pca.fit_transform(df_ind_iter[['5YBF_FB3Y','10_years_beta_fund']])\ndf_ind_iter['10Y5Y3Y_10YCRS'] = pca.fit_transform(df_ind_iter[['10YFRS_5YFRS_3YCF','10years_category_r_squared']])\ndf_ind_iter['5YC_10YBC'] = pca.fit_transform(df_ind_iter[['5YBC_CB3Y','10_years_beta_category']])\n# df_ind_iter['10YB_3Y10Y'] = pca.fit_transform(df_ind_iter[['10YF_BPSP','3Y10Y_10YCS']])\n# df_ind_iter['10Y3Y_2013CR'] = pca.fit_transform(df_ind_iter[['10YB_3Y10Y','2013_CR_RF']])","cce1a27d":"# df_ind_iter.drop(columns=['fund_return_3months','return_ytd'],inplace=True)\n# df_ind_iter.drop(columns=['2011_return_fund','2011_return_category'],inplace=True)\n# df_ind_iter.drop(columns=['2018_return_fund','2018_return_category'],inplace=True)\n# df_ind_iter.drop(columns=['3years_fund_std','3years_category_std'],inplace=True)\n# df_ind_iter.drop(columns=['2013_category_return','2013_return_fund'],inplace=True)\n# df_ind_iter.drop(columns=['2017_return_fund','2017_category_return'],inplace=True)\n# df_ind_iter.drop(columns=['3years_category_r_squared','3years_fund_r_squared'],inplace=True)\n# df_ind_iter.drop(columns=['2010_return_fund','2010_return_category'],inplace=True)\n# df_ind_iter.drop(columns=['5_years_beta_fund','fund_beta_3years'],inplace=True)\n# df_ind_iter.drop(columns=['5_years_return_fund','5_years_return_mean_annual_fund'],inplace=True)\n# df_ind_iter.drop(columns=['inception_year','years_up','years_down'],inplace=True)\n# df_ind_iter.drop(columns=['10years_fund_r_squared','5years_fund_r_squared','3Y_CRS_FRS'],inplace=True)\n# df_ind_iter.drop(columns=['3Y_FS_CS','10years_fund_std'],inplace=True)\n# df_ind_iter.drop(columns=['bond_percentage_of_porfolio','stock_percent_of_portfolio'],inplace=True)\n# df_ind_iter.drop(columns=['10_years_return_category','ytd_return_category'],inplace=True)\n# df_ind_iter.drop(columns=['5_years_beta_category','category_beta_3years'],inplace=True)\n# df_ind_iter.drop(columns=['5_years_alpha_category','3_years_alpha_category'],inplace=True)\n# df_ind_iter.drop(columns=['10YRC_YRC','3_years_return_category'],inplace=True)\n# df_ind_iter.drop(columns=['3YFC_10YFS','10years_category_std'],inplace=True)\n# df_ind_iter.drop(columns=['5YAC_3YAC','10_years_alpha_category'],inplace=True)\n# df_ind_iter.drop(columns=['10YY_3YRC','FR_3M_Re'],inplace=True)\n# df_ind_iter.drop(columns=['10Y3Y_F3R','BPOP_SPOP'],inplace=True)\n# df_ind_iter.drop(columns=['5YBF_FB3Y','10_years_beta_fund'],inplace=True)\n# df_ind_iter.drop(columns=['10YFRS_5YFRS_3YCF','10years_category_r_squared'],inplace=True)\n# df_ind_iter.drop(columns=['5YBC_CB3Y','10_years_beta_category'],inplace=True)\n# df_ind_iter.drop(columns=['10YF_BPSP','3Y10Y_10YCS'],inplace=True)\n# df_ind_iter.drop(columns=['10YB_3Y10Y','2013_CR_RF'],inplace=True)","867c4a4e":"df_ind_iter","66d9d6cd":"# df_ind_iter.to_csv('Imputer_corr.csv',index=False)\ndf_ind_iter = pd.read_csv('Imputer_corr.csv')","53eeed9c":"df_ind_iter.shape","dc021868":"# df_ind_iter.columns.to_list()\n# df_ind_iter['greatstone_rating_y'] = fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc['greatstone_rating_y']","6f11dd23":"# df_ind_iter = pd.concat([df_ind_iter,fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.greatstone_rating_y],axis=1)","f12d6232":"df_ind_iter.drop(columns=['parent1','parent2'],inplace=True)","f6a245da":"df_ind_iter.isna().sum()","416b362d":"# df_ind_mean = df_ind_iter.fillna(df_ind_iter.mean())\n\n# df_ind_mean = df_ind.fillna(df_ind.mean())\n\n# df_ind_mean = df_ind.fillna(df_ind.median())\n# df_ind_mean = df_ind.fillna(0)\n# df_ind_mean.isna().sum()\ndf_ind_mean = df_ind_iter","e445c553":"df_ind_mean.head()","83c7be72":"imputer = KNNImputer(n_neighbors=5)\n\ndf_filled = imputer.fit_transform(df_ind)","e73442b8":"col =  list(df_ind.columns)","9cd2ff05":"df_ind_mean = pd.DataFrame(df_filled,columns=col)\n# .isna().sum()","1a68bc04":"df_ind_mean.isnull().sum()","e2e16d22":"# # # target\n# # target = mice(target.values)\n# # # df_ind_iter\n# imputer = IterativeImputer(RandomForestRegressor(n_estimators=10))\n# na_iterative = imputer.fit_transform(target)\n# df_ind_iter['target'] = na_iterative","eae17f4e":"# For mean\nX = df_ind_mean.iloc[y.index]\ntest_X = df_ind_mean.iloc[test_y.index]","f4c194a7":"X.isna().sum()","887737b4":"# # KNN\n# X = df_ind_mean.iloc[y.index]\n# test_X = df_ind_mean.iloc[test_y.index]","58902e69":"# scaler = MinMaxScaler()\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\nX = scaler.fit_transform(X)\ntest_X = scaler.transform(test_X)","f8dcd9b7":"from sklearn.model_selection import train_test_split\n# test_size = 0.1,random_state=13\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=13,test_size = 0.01)","8183a972":"X_train.shape,y_train.shape\n# y.isna().sum()","fc78f2a0":"# X_train.shape,y_train.shape","a3afc404":"#n_estimators = 1300, random_state = 14,max_leaf_nodes=1500 = 8764\nrf = RandomForestClassifier(n_estimators = 990, random_state = 14)\nrf.fit(X_train, y_train)","932f64f3":"rf.score(X_train, y_train)","da34fef2":"rf.score(X_test,y_test)","ea48b1de":"y_pred = rf.predict(X_test)\n# report = classification_report(y_test, y_pred)\n# print(report)\nprecision,recall,fscore,support=score(y_test, y_pred,average='macro')\nprint('Precision : {}'.format(precision))","73dd5d59":"out = rf.predict(test_X)\nout","9dcd4d50":"gb_clf2 = GradientBoostingClassifier(n_estimators=1500, random_state=13)\ngb_clf2.fit(X_train, y_train)","5f648baf":"gb_clf2.score(X_train, y_train)","78f92e58":"gb_clf2.score(X_test,y_test)","91f035b3":"out = gb_clf2.predict(test_X)\nout","d394c3b3":"# colmerge_colab = pd.read_csv('colmerge_colab.csv')","97ac129d":"#80\ninput_ = fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.loc[fund_con_rat_specs_otherspecs_3_5_10_BRate_alloc.greatstone_rating_x.isna()]['fund_id']\nfinal_out = pd.DataFrame({'fund_id':input_,'greatstone_rating':out})\nfinal_out.reset_index(drop=True,inplace=True)\nfinal_out.to_csv('Final_result.csv',index=False)\n","6e0c04b1":"# input_.shape","b79f78d8":"# pd.set_option('display.max_columns', None)","ae8ddc33":"X_train.shape","b0476740":"clf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\npd.Series(clf.feature_importances_, index=df_ind_mean.columns).plot.bar(color='steelblue', figsize=(12, 6))","7e1ef3f1":"imp = pd.Series(clf.feature_importances_, index=df_ind_mean.columns)\ncol_drop = list(imp[imp < 0.01].index)","40f32604":"# len(list(df_ind_iter.columns))\nlen(col_drop)","25739c25":"df_ind_mean.drop(columns=col_drop,inplace=True)","f5861e96":"len(list(df_ind_mean.columns))","300a5681":"# df_ind_mean.isnull().sum()","4b0d08a2":"# for i in range(len(list(df_ind.columns))):\n#     df_ind[df_ind.columns[i]] = sts.zscore(df_ind[df_ind.columns[i]])","86114c68":"df_ind.head()","cfedbc96":"# for i in range(len(list(df_ind.columns))):\n#     sns.boxplot(df_ind[df_ind.columns[i]])\n#     plt.show()","8ed7b4d7":"# for i in range(len(list(df_ind.columns))):\n#     df_ind[df_ind.columns[i]] = np.log(df_ind[df_ind.columns[i]])","c427c7f1":"# for i in range(len(list(df_ind.columns))):\n#     sns.boxplot(df_ind[df_ind.columns[i]])\n#     plt.show()","eb795a30":"# from scipy import stats\n# import numpy as np\n# z = np.abs(stats.zscore(df_ind))\n# print(z)","adec53d0":"# index = X.loc[(sts.zscore(X['bb_rating'],nan_policy='omit')) > 3,'bb_rating'].index\n# X.bb_rating[index] = X.bb_rating.median()\n# # X.loc[(sts.zscore(X['bb_rating'],nan_policy='omit')) > 3,'bb_rating']\n# # median =  X.loc[(sts.zscore(X['bb_rating'],nan_policy='omit')) <= 3,'bb_rating'].median()\n# # # # X['bb_rating'] = X['bb_rating'].fillna(median)\n# # median","6c7ae336":"# abs_z_scores = np.abs(z_scores)\n# filtered_entries = (abs_z_scores < 3).all(axis=1)\n# new_df = df[filtered_entries]","03c14cf9":"# (z < 3).all(axis=1)","af9d8948":"# df_ind.loc[sts.zscore(df_ind['bb_rating']) > 3,'bb_rating']","8cffc1a0":"# df = pd.DataFrame({'A':[1,5,1,4,np.nan],'B':[2,8,2,9,np.nan]})\n# df","6ffade78":"# for i in range(len(X.columns)):\n# #     print(X.columns[i])\n#     print(len(X.loc[np.abs(sts.zscore(X[X.columns[i]],nan_policy='omit')) > 3,X.columns[i]]))\n    \n#     index = X.loc[np.abs(sts.zscore(X[X.columns[i]],nan_policy='omit')) > 3,X.columns[i]].index\n#     df_ind.drop(labels=index,inplace=True,errors='ignore')\n#     print(len(X.loc[np.abs(sts.zscore(X[X.columns[i]],nan_policy='omit')) > 3,X.columns[i]]))","09dba5f0":"# index = X.loc[np.abs(sts.zscore(X['bb_rating'],nan_policy='omit')) > 3,'bb_rating'].index","863dd3d9":"# df_ind.drop(labels=index,inplace=True)","3d5db597":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)","638d509e":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(X_train, y_train)","383b9e9b":"## **Correlation**","337f97d8":"## GBoosting","87f6d137":"## **IterativeImputer**","7683881b":"## OutPut File","00d260ee":"### **Checking Variance in each varaible**","2b8cf4ee":"## Filling outliers with median","e6a6c2ea":"## **Replacing NAN with Mean**","9c916e27":"### **Replace NA with KNN**","2c8656cb":"### Dropping Category and parent_company coz they have too many labels","5f0a2bfa":"## **PCA**","a74061f0":"## **Random Hyperparameter Grid**","de8d087c":"***Creating new class from fund_name***","81921996":"### **Correlation**","b54288bb":"## **Merging**","413eca4d":"## Dealing Outliers","bb37761b":"## Separating Target and Independent","f430bbdb":"## Dealing Categorical","4ec2ae22":"## Feature Selection","0d03074a":"## Outlier Detection2","c0ad89ee":"## **X & Y**"}}