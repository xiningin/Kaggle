{"cell_type":{"e80cfd30":"code","7155b6c1":"code","ff3816df":"code","3195efc9":"code","bddddf7e":"code","b65ef45e":"code","b985c33a":"code","f76ef5bc":"code","121afbe7":"code","5e9bf74f":"code","8ff9799a":"code","4bd02093":"code","e015f8f4":"code","093c600a":"code","b019596d":"code","4251c6d8":"code","719dba07":"code","a1eb0a63":"code","58fd23e5":"code","b5372ebc":"code","c70a48b2":"code","b0fe90b4":"code","5dfd2bb3":"code","a72e758e":"code","9d6237a5":"code","ad7ad545":"code","68ab78e1":"code","03147270":"code","a89a72d5":"code","d4f50803":"code","11668153":"code","1dd6d9fc":"code","8f68762c":"code","5f9ce753":"code","b0a5764a":"code","33ebc0b3":"code","5532cb3c":"code","27e18adb":"code","ad860c56":"code","bb36b45a":"markdown","23f39f11":"markdown","d3896baf":"markdown","37ed7ca9":"markdown","a5d7ba99":"markdown","ac2e7b9b":"markdown","b8d3da0b":"markdown","165c09ba":"markdown","642621cb":"markdown","f15925ff":"markdown","e932ed07":"markdown","38fac100":"markdown","3a2dd6d9":"markdown","087535a7":"markdown","922ce487":"markdown","a4688977":"markdown","fb70f2a6":"markdown","e740be40":"markdown","4335be4b":"markdown","0801f412":"markdown","52c3c35a":"markdown","86ee4333":"markdown","ba9e51c9":"markdown","5de9f0fc":"markdown","0259a01e":"markdown","40460c81":"markdown","a9b61269":"markdown","8789b190":"markdown"},"source":{"e80cfd30":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7155b6c1":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ff3816df":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\")","3195efc9":"train","bddddf7e":"test","b65ef45e":"submission","b985c33a":"sns.distplot(train['num_sold'])","f76ef5bc":"for x in ['num_sold']:\n    q75,q25 = np.percentile(train.loc[:,x],[75,25])\n    intr_qr = q75-q25\n \n    max = q75+(1.5*intr_qr)\n    min = q25-(1.5*intr_qr)\n \n    train.loc[train[x] < min,x] = np.nan\n    train.loc[train[x] > max,x] = np.nan\n","121afbe7":"train['num_sold'].isnull().sum()\n","5e9bf74f":"\ntrain = train.dropna(axis = 0)\ntrain\n","8ff9799a":"target = train['num_sold']\n\nsns.distplot(train['num_sold'])","4bd02093":"combi = train.drop(['num_sold'], axis=1).append(test)\ncombi","e015f8f4":"combi = combi.drop(['row_id'], axis=1)\ncombi","093c600a":"combi.isnull().sum()","b019596d":"combi['date'] = pd.to_datetime(combi['date'], errors='coerce')\ncombi","4251c6d8":"from datetime import datetime\n\ncombi[\"day_of_week\"] = combi['date'].dt.dayofweek\ncombi[\"is_weekend\"] = combi['day_of_week'] > 4\n\ncombi","719dba07":"combi['is_weekend'] = combi['is_weekend']* 1\ncombi","a1eb0a63":"sns.displot(combi['day_of_week'])","58fd23e5":"sns.displot(combi['is_weekend'])","b5372ebc":"combi['year'] = combi['date'].dt.year\ncombi['month'] = combi['date'].dt.month\ncombi['day'] = combi['date'].dt.day\n\ncombi","c70a48b2":"if combi['month'] is 12 and combi['day'] is 25:\n    combi['xmas1'] = True\nelse:\n    combi['xmas1'] = False\n\ncombi['xmas1'] = combi['xmas1'] * 1\n\ncombi","b0fe90b4":"if combi['month'] is 12 and combi['day'] is 26:\n    combi['xmas2'] = True\nelse:\n    combi['xmas2'] = False\n\ncombi['xmas2'] = combi['xmas2'] * 1\n\ncombi","5dfd2bb3":"if combi['month'] is 1 and combi['day'] is 1:\n    combi['new_year'] = True\nelse:\n    combi['new_year'] = False\n\ncombi['new_year'] = combi['new_year'] * 1\n\ncombi","a72e758e":"if combi['year'] is 2015 and combi['month'] is 4 and combi['day'] is 5:\n    combi['easter'] = True\nelif combi['year'] is 2016 and combi['month'] is 3 and combi['day'] is 27:\n    combi['easter'] = True\nelif combi['year'] is 2017 and combi['month'] is 4 and combi['day'] is 16:\n    combi['easter'] = True\nelif combi['year'] is 2018 and combi['month'] is 4 and combi['day'] is 1:\n    combi['easter'] = True\nelif combi['year'] is 2019 and combi['month'] is 4 and combi['day'] is 21:\n    combi['easter'] = True\nelse:\n    combi['easter'] = False\n\ncombi['easter'] = combi['easter'] * 1\n\ncombi","9d6237a5":"from sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder\n\nenc = OrdinalEncoder()\n\nfor col in combi:\n    if combi[col].dtype==\"object\":\n        combi[col] = enc.fit_transform(combi[col].values.reshape(-1,1))\ncombi\n","ad7ad545":"import datetime \n\ncombi['date_num'] = combi['date'].dt.strftime('%d%m%Y')\ncombi['date_num'] = combi['date_num'].astype(int)\ncombi","68ab78e1":"combi.drop(['date'], axis=1, inplace=True)\ncombi.drop(['year'], axis=1, inplace=True)\ncombi","03147270":"combi.isnull().sum()","a89a72d5":"#combi = (combi - combi.min()) \/ (combi.max() - combi.min())\n#combi","d4f50803":"#combi = (combi - np.average(combi)) \/ (np.std(combi))\n#combi","11668153":"y = target\nX = combi[: len(train)]\nX_test = combi[len(train) :]","1dd6d9fc":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)\nX_train.shape, X_val.shape, y_train.shape,y_val.shape, X_test.shape","8f68762c":"from sklearn.experimental import enable_hist_gradient_boosting \nfrom sklearn.ensemble import HistGradientBoostingRegressor\n\nmodel = HistGradientBoostingRegressor().fit(X_train, y_train)\nprint(model.score(X_train, y_train))","5f9ce753":"y_pred = model.predict(X_val)\nprint(model.score(X_val, y_val))","b0a5764a":"from sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_val, y_pred, squared=False)\nrmse","33ebc0b3":"df=pd.DataFrame({'Actual': y_val, 'Predicted':y_pred})\ndf","5532cb3c":"fig, ax = plt.subplots()\nax.scatter(y_val, y_pred, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","27e18adb":"preds = model.predict(X_test)\npreds = preds.astype(int)\npreds[preds < 0] = 0\npreds","ad860c56":"submission.num_sold = preds\nsubmission.to_csv('submission.csv', index=False)\nsubmission = pd.read_csv(\"submission.csv\")\nsubmission","bb36b45a":"Analyse target","23f39f11":"Split","d3896baf":"Check for christmas 2","37ed7ca9":"Standardise combi","a5d7ba99":"Predict on test set and submit","ac2e7b9b":"Check for null values","b8d3da0b":"Normalise ","165c09ba":"Check if date is weekend","642621cb":"Drop date and year","f15925ff":"Import","e932ed07":"Check for Easter","38fac100":"Check for new year","3a2dd6d9":"Check for Christmas 1","087535a7":"Problem statement:-\n\nThere are two (fictitious) independent store chains selling Kaggle merchandise that want to become the official outlet for all things Kaggle. We've decided to see if the Kaggle community could help us figure out which of the store chains would have the best sales going forward. So, we've collected some data and are asking you to build forecasting models to help us decide.\n\nHelp us figure out whether KaggleMart or KaggleRama should become the official Kaggle outlet!","922ce487":"Read","a4688977":"Get month and day from date","fb70f2a6":"Combine train and test","e740be40":"Datestamp date","4335be4b":"Remove outliers","0801f412":"drop id","52c3c35a":"Convert date to number","86ee4333":"Define X and y","ba9e51c9":"Predict on validation set","5de9f0fc":"Define model","0259a01e":"Check for null values","40460c81":"Ordinal encode","a9b61269":"Load","8789b190":"Convert boolean to integar"}}