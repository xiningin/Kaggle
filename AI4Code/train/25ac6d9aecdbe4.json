{"cell_type":{"531ff55e":"code","59dd2a1a":"code","7a55b2e0":"code","8137a80b":"code","c523ee37":"code","cfea2fe3":"code","e53cf149":"code","e3e8f7e1":"code","82773bf9":"code","6b8908ee":"code","3c5548c1":"code","01829148":"code","08a220ee":"code","43d4ade4":"code","bd33af78":"code","c7c0caa3":"code","d123ee5b":"code","2d2d7c12":"code","5b86042e":"code","5722cdfa":"code","4bfc0f17":"markdown"},"source":{"531ff55e":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","59dd2a1a":"#load dataset\ndf = pd.read_csv('..\/input\/breast-cancer-data\/data.csv')\ndf.head()","7a55b2e0":"df.info()","8137a80b":"df.isna().sum()","c523ee37":"df= df.dropna(axis=1)","cfea2fe3":"df.info()","e53cf149":"#count of malignant and benignant\ndf['diagnosis'].value_counts()","e3e8f7e1":"sns.countplot(df['diagnosis'], label = \"count\")","82773bf9":"df.dtypes","6b8908ee":"#encoding categorical data\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf.iloc[:, 1]= le.fit_transform(df.iloc[:,1].values)","3c5548c1":"print(df.iloc[:, 1])","01829148":"df.head()","08a220ee":"df.corr()","43d4ade4":"#heatmap\nplt.figure(figsize= (20,20))\nsns.heatmap(df.corr(), annot = True, fmt= '.0%')","bd33af78":"# train test split\nfrom sklearn.model_selection import train_test_split\nX = df.drop(['diagnosis'], axis=1)\nY = df.diagnosis.values\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)","c7c0caa3":"#support vector classifier\nfrom sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(X_train, y_train)\nprint(\"SVC accuracy : {:.2f}%\".format(svm.score(X_test, y_test)*100))","d123ee5b":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)\nprint(\"Naive Bayes accuracy : {:.2f}%\".format(nb.score(X_test, y_test)*100))","2d2d7c12":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators= 1000, random_state = 1)\nrf.fit(X_train, y_train)\nprint(\"Random Forest accuracy : {:.2f}%\".format(rf.score(X_test, y_test)*100))","5b86042e":"import xgboost\nxg = xgboost.XGBClassifier()\nxg.fit(X_train, y_train)\nprint(\"XG boost accuracy : {:.2f}%\".format(xg.score(X_test, y_test)*100))","5722cdfa":"#SVC accuracy : 58.77%\n#Naive Bayes accuracy : 59.65%\n#Random Forest accuracy : 95.61%\n#XG boost accuracy : 97.37%\n","4bfc0f17":"## Breast Cancer Detection "}}