{"cell_type":{"e62760fc":"code","76cfb0e6":"code","572da94d":"code","d0c8c0e7":"code","29addc39":"code","de9a06fe":"code","8eb26fd1":"code","c253e262":"code","a1a561f3":"code","6ad7951c":"code","9c928d62":"code","d56462dc":"code","51373558":"code","6ca2876a":"code","3b593003":"code","2f81f4e8":"code","2796bec1":"code","dc965f05":"code","0f81e6b9":"code","3cbe6233":"code","306a9dd9":"code","a89bd657":"code","9cf5e7d6":"code","ceaf48c1":"code","2a35f44f":"code","eb5e459c":"code","3aa582ce":"code","4f15cdc2":"code","cc16af47":"code","f8f0857e":"code","0a0ac06a":"code","55dec128":"code","f061c6ca":"code","53beaacd":"code","bcab8347":"code","29e7a40b":"code","0a308250":"code","fcb97620":"code","2069aad1":"code","2574064a":"code","c194eebc":"code","c33d1107":"code","0851e3a3":"code","e65b6f4c":"code","0d1ae65d":"code","03518d20":"code","981c9f49":"code","3d155013":"code","e51bdb3d":"code","828c0465":"code","23ac6bf5":"code","a4bda6bc":"code","95601fbe":"code","030ee752":"code","c9da8179":"code","56136c76":"code","e2161fe5":"code","70b4135e":"code","5826ca9a":"code","4a268f61":"code","62bd080a":"code","fe87eb3d":"code","f7271cec":"markdown","abdd6e32":"markdown","f3ddbd67":"markdown"},"source":{"e62760fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nsb.set_palette('dark')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76cfb0e6":"data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\npid = test.Id","572da94d":"data.head()","d0c8c0e7":"print(\"Missing value count in Training data\")\nmissing_data = data.isnull()\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print(\"\")","29addc39":"print(\"Missing value count in Test data\")\nmissing_data1 = test.isnull()\nfor column in missing_data1.columns.values.tolist():\n    print(column)\n    print(missing_data1[column].value_counts())\n    print(\"\")","de9a06fe":"data['LotFrontage'] = data['LotFrontage'].replace(np.nan, data['LotFrontage'].mean())\ntest['LotFrontage'] = test['LotFrontage'].replace(np.nan, test['LotFrontage'].mean())\n\n\ndata['Alley'] = data['Alley'].replace(np.nan,'Grvl')\ntest['Alley'] = test['Alley'].replace(np.nan,'Grvl')\n\ndata['MasVnrArea'] = data['MasVnrArea'].replace(np.nan,data['MasVnrArea'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].replace(np.nan,test['MasVnrArea'].mean())\n\n\n\ndata['BsmtQual'] =  data['BsmtQual'].replace(np.nan,'TA')\ntest['BsmtQual'] =  test['BsmtQual'].replace(np.nan,'TA')\n\ndata['BsmtCond'] =  data['BsmtCond'].replace(np.nan,'TA')\ntest['BsmtCond'] =  data['BsmtCond'].replace(np.nan,'TA')\n\ndata['BsmtExposure'] = data['BsmtExposure'].replace(np.nan,'No')\ntest['BsmtExposure'] = test['BsmtExposure'].replace(np.nan,'No')\n\ndata['BsmtFinType1'] = data['BsmtFinType1'].replace(np.nan,'Unf')\ntest['BsmtFinType1'] = test['BsmtFinType1'].replace(np.nan,'Unf')\n\ndata['BsmtFinType2'] = data['BsmtFinType2'].replace(np.nan,'Unf')\ntest['BsmtFinType2'] = test['BsmtFinType2'].replace(np.nan,'Unf')\n\ndata['Electrical'] = data['Electrical'].replace(np.nan,'SBrkr')\n\ndata['GarageType'] = data['GarageType'].replace(np.nan,'Attchd')\ntest['GarageType'] = test['GarageType'].replace(np.nan,'Attchd')\n\ndata['GarageFinish'] = data['GarageFinish'].replace(np.nan,'Unf')\ntest['GarageFinish'] = test['GarageFinish'].replace(np.nan,'Unf')\n\ndata['GarageQual'] = data['GarageQual'].replace(np.nan,'TA')\ntest['GarageQual'] = test['GarageQual'].replace(np.nan,'TA')\n\n\ndata['GarageCond'] = data['GarageCond'].replace(np.nan,'TA')\ntest['GarageCond'] = test['GarageCond'].replace(np.nan,'TA')\n\ndata['PoolQC'] = data['PoolQC'].replace(np.nan,'Gd')\ntest['PoolQC'] = test['PoolQC'].replace(np.nan,'Gd')\n\ndata['Fence'] = data['Fence'].replace(np.nan,'MnPrv')\ntest['Fence'] = test['Fence'].replace(np.nan,'MnPrv')\n\ndata['MiscFeature'] = data['MiscFeature'].replace(np.nan,'Shed')\ntest['MiscFeature'] = test['MiscFeature'].replace(np.nan,'Shed')\n\n\n\n\ntest['MSZoning'] = test['MSZoning'].fillna('RL')\n\ntest['Utilities'] =  test['Utilities'].fillna('ALLPub')\n\ntest['Exterior1st'] =  test['Exterior1st'].fillna('VinylSd')\n\ntest['Exterior2nd'] =  test['Exterior2nd'].fillna('VinylSd')\n\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].median()) \n\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].fillna(test['BsmtFinSF2'].median()) \n\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].median())\n\ntest ['BsmtFullBath'] = test ['BsmtFullBath'].fillna('0')\n\ntest ['HalfBath'] = test ['HalfBath'].fillna('0')\n\ntest ['KitchenQual'] = test ['KitchenQual'].fillna('TA')\n\ntest ['Functional'] = test ['Functional'].fillna('TA')\n\ntest ['GarageCars'] = test ['GarageCars'].fillna(2.0)\n\ntest ['GarageArea'] = test ['GarageArea'].fillna(test ['GarageArea'].median())\n\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].value_counts().idxmax())\n\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].fillna(test['BsmtHalfBath'].value_counts().idxmax())\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].fillna(test['BsmtUnfSF'].mean())","8eb26fd1":"data.isnull().sum()","c253e262":"test.isnull().any().sum()","a1a561f3":"data.shape","6ad7951c":"test.shape","9c928d62":"data.drop(['FireplaceQu','GarageYrBlt','MoSold','YrSold','MasVnrType','Fence', 'MiscFeature','MSSubClass','BsmtFinSF2', 'BsmtUnfSF','Exterior2nd','Condition2','LotShape','BsmtFullBath'],1,inplace=True)\ntest.drop(['FireplaceQu','GarageYrBlt','MoSold','YrSold','MasVnrType','Fence', 'MiscFeature','MSSubClass','BsmtFinSF2', 'BsmtUnfSF','Exterior2nd','Condition2','LotShape','BsmtFullBath'],1,inplace=True)\ndata.drop(['Id'],1,inplace=True)\ntest.drop(['Id'],1,inplace=True)","d56462dc":"data.isnull().any().sum()","51373558":"test.isnull().any().sum()","6ca2876a":"data.shape","3b593003":"test.shape","2f81f4e8":"test.dtypes","2796bec1":"from sklearn.preprocessing import StandardScaler,LabelEncoder\nsc = StandardScaler()\nle = LabelEncoder()\n\n","dc965f05":"y = data['SalePrice']\ndata.drop('SalePrice',1,inplace=True)","0f81e6b9":"for i in data.select_dtypes(['int64']):\n    data[i] = data[i]\/data[i].max()\nfor i in test.select_dtypes(['int64']):\n    test[i] = test[i]\/test[i].max()\n\nfor i in data.select_dtypes(['float']):\n    data[i] = data[i]\/data[i].max()\nfor i in test.select_dtypes(['float']):\n    test[i] = test[i]\/test[i].max()\n","3cbe6233":"for i in data.select_dtypes(['object']):\n    print(i)","306a9dd9":"lb1 = LabelEncoder()\nlb2 = LabelEncoder()\nlb3 = LabelEncoder()\nlb4 = LabelEncoder()\nlb5 = LabelEncoder()\nlb6 = LabelEncoder()\nlb7 = LabelEncoder()\nlb8 = LabelEncoder()\nlb9 = LabelEncoder()\nlb10 = LabelEncoder()\nlb11 = LabelEncoder()\nlb12 = LabelEncoder()\nlb13 = LabelEncoder()\nlb14 = LabelEncoder()\nlb15 = LabelEncoder()\nlb16 = LabelEncoder()\nlb17 = LabelEncoder()\nlb18 = LabelEncoder()\nlb19 = LabelEncoder()\nlb20 = LabelEncoder()\nlb21 = LabelEncoder()\nlb22 = LabelEncoder()\nlb23 = LabelEncoder()\nlb24 = LabelEncoder()\nlb25 = LabelEncoder()\nlb26 = LabelEncoder()\nlb27 = LabelEncoder()\nlb28 = LabelEncoder()\nlb29 = LabelEncoder()\nlb30 = LabelEncoder()\nlb31 = LabelEncoder()\nlb32 = LabelEncoder()\nlb33 = LabelEncoder()\nlb34 = LabelEncoder()\nlb35 = LabelEncoder()\nlb36 = LabelEncoder()\n\n\ndata['MSZoning'] = lb1.fit_transform(data['MSZoning'])\ndata['Street'] = lb2.fit_transform(data['Street'])\ndata['Alley'] = lb3.fit_transform(data['Alley'])\ndata['LandContour'] = lb4.fit_transform(data['LandContour'])\ndata['Utilities'] = lb5.fit_transform(data['Utilities'])\ndata['LotConfig'] = lb6.fit_transform(data['LotConfig'])\ndata['LandSlope'] = lb7.fit_transform(data['LandSlope'])\ndata['Neighborhood'] = lb8.fit_transform(data['Neighborhood'])\ndata['Condition1'] = lb9.fit_transform(data['Condition1'])\ndata['BldgType'] = lb10.fit_transform(data['BldgType'])\ndata['HouseStyle'] = lb11.fit_transform(data['HouseStyle'])\ndata['RoofStyle'] = lb12.fit_transform(data['RoofStyle'])\ndata['RoofMatl'] = lb13.fit_transform(data['RoofMatl'])\ndata['Exterior1st'] = lb14.fit_transform(data['Exterior1st'])\ndata['ExterQual'] = lb15.fit_transform(data['ExterQual'])\ndata['ExterCond'] = lb16.fit_transform(data['ExterCond'])\ndata['Foundation'] = lb17.fit_transform(data['Foundation'])\ndata['BsmtQual'] = lb18.fit_transform(data['BsmtQual'])\ndata['BsmtCond'] = lb19.fit_transform(data['BsmtCond'])\ndata['BsmtExposure'] = lb20.fit_transform(data['BsmtExposure'])\ndata['BsmtFinType1'] = lb21.fit_transform(data['BsmtFinType1'])\ndata['BsmtFinType2'] = lb22.fit_transform(data['BsmtFinType1'])\ndata['Heating'] = lb23.fit_transform(data['Heating'])\ndata['HeatingQC'] = lb24.fit_transform(data['HeatingQC'])\ndata['CentralAir'] = lb25.fit_transform(data['CentralAir'])\ndata['Electrical'] = lb26.fit_transform(data['Electrical'])\ndata['KitchenQual'] = lb27.fit_transform(data['KitchenQual'])\ndata['Functional'] = lb28.fit_transform(data['Functional'])\ndata['GarageType'] = lb29.fit_transform(data['GarageType'])\ndata['GarageFinish'] = lb30.fit_transform(data['GarageFinish'])\ndata['GarageQual'] = lb31.fit_transform(data['GarageQual'])\ndata['GarageCond'] = lb32.fit_transform(data['GarageCond'])\ndata['PavedDrive'] = lb33.fit_transform(data['PavedDrive'])\ndata['PoolQC'] = lb34.fit_transform(data['PoolQC'])\ndata['SaleType'] = lb35.fit_transform(data['SaleType'])\ndata['SaleCondition'] = lb36.fit_transform(data['SaleCondition'])\n\n\n\n","a89bd657":"data","9cf5e7d6":"lb1 = LabelEncoder()\nlb2 = LabelEncoder()\nlb3 = LabelEncoder()\nlb4 = LabelEncoder()\nlb5 = LabelEncoder()\nlb6 = LabelEncoder()\nlb7 = LabelEncoder()\nlb8 = LabelEncoder()\nlb9 = LabelEncoder()\nlb10 = LabelEncoder()\nlb11 = LabelEncoder()\nlb12 = LabelEncoder()\nlb13 = LabelEncoder()\nlb14 = LabelEncoder()\nlb15 = LabelEncoder()\nlb16 = LabelEncoder()\nlb17 = LabelEncoder()\nlb18 = LabelEncoder()\nlb19 = LabelEncoder()\nlb20 = LabelEncoder()\nlb21 = LabelEncoder()\nlb22 = LabelEncoder()\nlb23 = LabelEncoder()\nlb24 = LabelEncoder()\nlb25 = LabelEncoder()\nlb26 = LabelEncoder()\nlb27 = LabelEncoder()\nlb28 = LabelEncoder()\nlb29 = LabelEncoder()\nlb30 = LabelEncoder()\nlb31 = LabelEncoder()\nlb32 = LabelEncoder()\nlb33 = LabelEncoder()\nlb34 = LabelEncoder()\nlb35 = LabelEncoder()\nlb36 = LabelEncoder()\n\n\ntest['MSZoning'] = lb1.fit_transform(test['MSZoning'])\ntest['Street'] = lb2.fit_transform(test['Street'])\ntest['Alley'] = lb3.fit_transform(test['Alley'])\ntest['LandContour'] = lb4.fit_transform(test['LandContour'])\ntest['Utilities'] = lb5.fit_transform(test['Utilities'])\ntest['LotConfig'] = lb6.fit_transform(test['LotConfig'])\ntest['LandSlope'] = lb7.fit_transform(test['LandSlope'])\ntest['Neighborhood'] = lb8.fit_transform(test['Neighborhood'])\ntest['Condition1'] = lb9.fit_transform(test['Condition1'])\ntest['BldgType'] = lb10.fit_transform(test['BldgType'])\ntest['HouseStyle'] = lb11.fit_transform(test['HouseStyle'])\ntest['RoofStyle'] = lb12.fit_transform(test['RoofStyle'])\ntest['RoofMatl'] = lb13.fit_transform(test['RoofMatl'])\ntest['Exterior1st'] = lb14.fit_transform(test['Exterior1st'])\ntest['ExterQual'] = lb15.fit_transform(test['ExterQual'])\ntest['ExterCond'] = lb16.fit_transform(test['ExterCond'])\ntest['Foundation'] = lb17.fit_transform(test['Foundation'])\ntest['BsmtQual'] = lb18.fit_transform(test['BsmtQual'])\ntest['BsmtCond'] = lb19.fit_transform(test['BsmtCond'])\ntest['BsmtExposure'] = lb20.fit_transform(test['BsmtExposure'])\ntest['BsmtFinType1'] = lb21.fit_transform(test['BsmtFinType1'])\ntest['BsmtFinType2'] = lb22.fit_transform(test['BsmtFinType1'])\ntest['Heating'] = lb23.fit_transform(test['Heating'])\ntest['HeatingQC'] = lb24.fit_transform(test['HeatingQC'])\ntest['CentralAir'] = lb25.fit_transform(test['CentralAir'])\ntest['Electrical'] = lb26.fit_transform(test['Electrical'])\ntest['KitchenQual'] = lb27.fit_transform(test['KitchenQual'])\ntest['Functional'] = lb28.fit_transform(test['Functional'])\ntest['GarageType'] = lb29.fit_transform(test['GarageType'])\ntest['GarageFinish'] = lb30.fit_transform(test['GarageFinish'])\ntest['GarageQual'] = lb31.fit_transform(test['GarageQual'])\ntest['GarageCond'] = lb32.fit_transform(test['GarageCond'])\ntest['PavedDrive'] = lb33.fit_transform(test['PavedDrive'])\ntest['PoolQC'] = lb34.fit_transform(test['PoolQC'])\ntest['SaleType'] = lb35.fit_transform(test['SaleType'])\ntest['SaleCondition'] = lb36.fit_transform(test['SaleCondition'])\n\n\n\n","ceaf48c1":"print(data.shape)\nprint(test.shape)\n    ","2a35f44f":"data.info()","eb5e459c":"data.describe()","3aa582ce":"data.shape","4f15cdc2":"test.shape","cc16af47":"data","f8f0857e":"X = data","0a0ac06a":"X","55dec128":"y.shape","f061c6ca":"from tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Dropout\nfrom keras.utils import to_categorical\n","53beaacd":"n_cols = X.shape[1]\nn_cols","bcab8347":"test.shape","29e7a40b":"X.columns","0a308250":"test.columns","fcb97620":"X.shape","2069aad1":"y.shape","2574064a":"y.shape","c194eebc":"mult_fact = y.mean()","c33d1107":"multiplication_factor = y.max()","0851e3a3":"y = y\/y.mean()","e65b6f4c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.24,random_state = 42)","0d1ae65d":"model = Sequential()\nmodel.add(Dense(130,activation = 'relu',input_shape = (n_cols,)))\nmodel.add(Dense(195,activation = 'relu'))\nmodel.add(Dense(270,activation = 'relu'))\nmodel.add(Dense(512,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\nmodel.compile(optimizer = 'adam',loss = 'mean_squared_error')","03518d20":"history1 = model.fit(x_train,y_train,epochs = 50,batch_size=2,validation_data = (x_test,y_test))","981c9f49":"loss = model.evaluate(x_test,y_test)","3d155013":"model1 = Sequential()\nmodel1.add(Dense(32,activation = 'relu',input_shape = (n_cols,)))\nmodel1.add(Dense(64,activation = 'relu'))\nmodel1.add(Dense(128,activation = 'relu'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(128,activation = 'relu'))\nmodel1.add(Dense(64,activation = 'relu'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(32,activation = 'relu'))\nmodel1.add(Dense(16,activation = 'relu'))\nmodel1.add(Dropout(0.25))\nmodel1.add(Dense(8,activation = 'relu'))\nmodel1.add(Dense(1))\nmodel1.compile(optimizer = 'adam',loss = 'mean_squared_error')","e51bdb3d":"history2 = model1.fit(x_train,y_train,epochs = 50,batch_size=2,validation_data = (x_test,y_test))","828c0465":"loss = model1.evaluate(x_test,y_test)","23ac6bf5":"plt.plot(history1.history['loss'])\nplt.plot(history1.history['val_loss'])","a4bda6bc":"prediction = model.predict(test)","95601fbe":"prediction2 = model1.predict(test)","030ee752":"prediction1 = prediction*mult_fact\nprediction2 = prediction2*mult_fact\n","c9da8179":"prediction = (prediction1+prediction2)\/2","56136c76":"prediction","e2161fe5":"prediction = np.asarray(prediction)","70b4135e":"prediction","5826ca9a":"prediction.shape","4a268f61":"pred1 = []\nfor i in prediction:\n    pred1.append(i[0])","62bd080a":"output = pd.DataFrame({'Id':pid,'SalePrice': pred1})\noutput.to_csv('my_submission.csv', index=False)","fe87eb3d":"output","f7271cec":"As the number of Columns are too many it is hard to visualize a Co-relation heatmap","abdd6e32":"# Data Analysis","f3ddbd67":"### Data Cleaning And PreProcessing"}}