{"cell_type":{"b73c0fe3":"code","c25e9fe6":"code","3fe60155":"code","71dae180":"code","ff86c5f1":"code","cf1a2111":"code","ba20f56d":"code","d5a5f58e":"code","2ccba30c":"code","1e4af7b1":"code","eaa3fabf":"markdown","92cf8c4b":"markdown","931b6616":"markdown","7b1aab09":"markdown","30e91acd":"markdown","4aae16dc":"markdown","1d57d746":"markdown","2ad289a7":"markdown","94b55107":"markdown","5e1bb87a":"markdown"},"source":{"b73c0fe3":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","c25e9fe6":"train_pd = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_pd = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntrain = np.array(train_pd)\ntest = np.array(test_pd)\ntrain_images = train[:, 1:].reshape((-1, 28, 28, 1)) \/ 255.0\ntrain_labels = train[:, 0].astype(np.uint8)\ntest_images = test.reshape((-1, 28, 28, 1)) \/ 255.0","3fe60155":"class RELUWithMaxValue(tf.keras.layers.Layer):\n    def __init__(self, max_value):\n        super(RELUWithMaxValue, self).__init__()\n        self.max_value = max_value\n    def call(self, inputs):\n        return tf.keras.backend.relu(inputs, max_value=self.max_value)","71dae180":"def accuracy(y_true, y_pred):\n    return tf.reduce_mean(tf.cast(tf.round(y_pred) == y_true, dtype=tf.float32))","ff86c5f1":"def get_cnn_model():\n    model = Sequential([\n        Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n        MaxPooling2D(2, 2),\n        BatchNormalization(),\n        Conv2D(32, (3, 3), activation='relu', padding='same'),\n        MaxPooling2D(2, 2),\n        BatchNormalization(),\n        Conv2D(64, (3, 3), activation='relu', padding='same'),\n        MaxPooling2D(2, 2),\n        BatchNormalization(),\n        Flatten(),\n        Dense(32, activation='relu', kernel_regularizer=tf.keras.regularizers.l2()),\n        Dense(1),\n        RELUWithMaxValue(9.0)\n    ])\n    model.compile(\n        optimizer='adam',\n        loss='mean_squared_error',\n        metrics=[accuracy]\n    )\n    return model","cf1a2111":"cnn_model = get_cnn_model()\ncheckpoint_filepath = \"best_checkpoint\"\nmodel_checkpoint = tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_filepath,\n    save_weights_only=True,\n    save_best_only=True,\n    monitor=\"val_accuracy\",\n    mode=\"max\"\n)\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience=10)\ntrain_images, val_images, train_labels, val_labels = train_test_split(train_images, train_labels)\nhistory = cnn_model.fit(train_images, train_labels, epochs=100, validation_data=(val_images, val_labels), callbacks=[model_checkpoint, early_stopping], verbose=1)\npd.DataFrame(history.history).plot()\nplt.show()\ncnn_model = get_cnn_model()\ncnn_model.load_weights(checkpoint_filepath)","ba20f56d":"test_labels = np.array(np.round(cnn_model.predict(test_images)), dtype=int).reshape(-1)\nprint(test_labels.shape)","d5a5f58e":"pd.DataFrame(test_labels).hist()","2ccba30c":"print(test_labels[:100])","1e4af7b1":"image_ids = np.arange(1, test_labels.shape[0]+1)\nresult = np.concatenate((image_ids.reshape(-1, 1), test_labels.reshape(-1, 1)), axis=1)\ndf = pd.DataFrame(result, columns=[\"ImageId\", \"Label\"], dtype='int')\ndf.to_csv(\"submission.csv\", index=False)","eaa3fabf":"Define a special version of accuracy metric that can calculate accuracy corretly.","92cf8c4b":"## Model Development","931b6616":"## Conclusion","7b1aab09":"# MNIST Regression\nWe often solve the MNIST problem by using different kinds of classification techniques. Of cause MNIST classifcation can achieve a better result, how about solving MNIST problem using Regression? I will try it in this notebook.\n## Importing Packages","30e91acd":"Here is first 100 item of test_labels.","4aae16dc":"Define a special RELU Layer with max value.","1d57d746":"## Loading the data","2ad289a7":"Currently MNIST Regression can achieve 92% test accuracy which is not bad, there must be more ways to improve it. Any suggesion? I am glad to hear from you.","94b55107":"## Submission\nAlthough I solve this problem using Regression techniques, calculating test scores still requires converting results to integers.","5e1bb87a":"### CNN Model"}}