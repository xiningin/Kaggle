{"cell_type":{"aa0e167a":"code","57819161":"code","5b9a0539":"code","b032ff2b":"code","17cbb428":"code","ee7eb685":"code","cd982713":"code","20c2965d":"code","985de4c9":"code","79ba4a9a":"code","c509f1c3":"code","4c9cffce":"code","b64ea05d":"code","2c9be90c":"code","144185d2":"code","211a3edc":"code","da92bd6b":"code","3b487648":"code","8702fed4":"code","4d272ed9":"code","5b816289":"code","ee6eb137":"code","c52bc2df":"markdown","2dc81c82":"markdown","464cfe93":"markdown","8dbd08ad":"markdown","958fa76d":"markdown"},"source":{"aa0e167a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57819161":"df= pd.read_excel('..\/input\/book-price-machinehack\/Data_Train.xlsx')\ndf_test= pd.read_excel('..\/input\/book-price-machinehack\/Data_Test.xlsx')\ndf= df.merge(df_test)                     \ndf.head()","5b9a0539":"df.shape","b032ff2b":"df.describe()","17cbb428":"df.info()","ee7eb685":"df['Reviews'] = df.Reviews.apply(lambda r: float(r.split()[0]))\ndf['Ratings']= df.Ratings.str.extract('(\\d+)')\ndf[\"Ratings\"] = df.Ratings.astype(float)","cd982713":"df.head()","20c2965d":"# Get list of categorical variables\ns = (df.dtypes == 'object')\nobject_cols = list(s[s].index)\n\nprint(\"Categorical variables:\")\nprint(object_cols)","985de4c9":"# Get number of unique entries in each column with categorical data\nobject_nunique = list(map(lambda col: df[col].nunique(), object_cols))\nd = dict(zip(object_cols, object_nunique))\n\n# Print number of unique entries by column, in ascending order\nsorted(d.items(), key=lambda x: x[1])","79ba4a9a":"df_1= pd.get_dummies(df, columns= ['Genre', 'BookCategory'])\ndf_1.head()","c509f1c3":"df_2= df_1.drop(['Title', 'Author','Synopsis','Edition'],1, inplace= False)\ndf_2.head()","4c9cffce":"df_2.describe()","b64ea05d":"!pip install pycaret","2c9be90c":"from pycaret.regression import *\nPTA= setup(df_2, \n           target= \"Price\")","144185d2":"compare_models()","211a3edc":"SVM= create_model('svm')","da92bd6b":"tuned_lr = tune_model(SVM)","3b487648":"# plot a model \nplot_model(SVM)","8702fed4":"# predictions on hold-out set\nSVM_pred_holdout = predict_model(SVM)\n","4d272ed9":"# evaluate a model \nevaluate_model(SVM)","5b816289":"# finalize model\nlr_final = finalize_model(SVM)","ee6eb137":"# save a model\nsave_model(SVM,'SVM_model_21092020')","c52bc2df":"Identification des variables cat\u00e9goriques, ainsiu que leur importance dans le datasat:","2dc81c82":"On pr\u00e9suppose que les variables reviews et ratings seront importantes pour les futures pr\u00e9dictions, on va donc les transformer en variables num\u00e9riques","464cfe93":"Exploration des donn\u00e9es","8dbd08ad":"D\u00e9ploiement d'un mod\u00e8le avec Pycaret","958fa76d":"Encodage one-hot"}}