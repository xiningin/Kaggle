{"cell_type":{"161268e0":"code","84a9442f":"code","625d4ef5":"code","db94ea92":"code","24538104":"code","52a5e8ad":"code","d06d3d94":"code","07c320e1":"code","1d3550d5":"code","c6d5fd9c":"code","9de421a7":"code","80c4b241":"code","1343564a":"code","65c2ae27":"code","b681d181":"code","77ab3c87":"code","e2956cd0":"code","b4374a58":"code","5a4830fe":"code","9ce5ef59":"code","25a3a219":"code","0ca3ba07":"code","e9c31084":"code","ddf8a250":"code","33e9071d":"code","65529a34":"code","a4c56a16":"code","080b2713":"code","06b5f2db":"code","94d730ef":"code","922f7df3":"code","c2c9c0d4":"code","e17d5bce":"code","b1123ad6":"code","4231f952":"code","07e77257":"code","97c1a8b2":"code","0abaf847":"code","4324ec35":"code","da83f9e0":"code","148be7d8":"code","75f761b2":"code","bce60023":"code","1b0ef80b":"code","c8b6152b":"code","92aacf8e":"code","fe4d719c":"code","29ccaa9b":"code","45d92c44":"code","9b009980":"code","c30a42aa":"code","d2a465af":"code","0c561c03":"code","55dee854":"code","954a70fa":"code","5ddbbcf9":"code","1b3977e9":"code","da416aac":"code","1399143f":"code","0a651a5b":"code","03f05f48":"code","98bc8895":"code","0f4d784f":"code","0d3985ec":"code","d4bb2245":"code","c94d2554":"code","43fdca7f":"markdown","b04c74b6":"markdown","b70504b6":"markdown","dadd35d0":"markdown","dccdc571":"markdown","c98db1bd":"markdown","789fff57":"markdown","8d01a871":"markdown","14ce497d":"markdown","8fc2e378":"markdown","5c02522b":"markdown","6f264a6c":"markdown","a3ff2ea8":"markdown","618969b5":"markdown","5c33bae2":"markdown","463167bd":"markdown","c49b155c":"markdown","7ffc2dc8":"markdown","6dcc125f":"markdown","59bc04b4":"markdown","94518c87":"markdown","872000f8":"markdown","44799025":"markdown","e816b703":"markdown","b20e7c53":"markdown","6b724475":"markdown","8fd084ce":"markdown","04d6f54a":"markdown","17c66083":"markdown","059c7efa":"markdown","dcb934b9":"markdown","d15aeb52":"markdown","2742b071":"markdown","2cb595f8":"markdown","a60fef2c":"markdown","61ba544c":"markdown","d360a6a0":"markdown","7c9406ac":"markdown","65b3f9d3":"markdown","0c9da1bd":"markdown","d4b99dc6":"markdown","18cbf789":"markdown","9eadea2c":"markdown","64f651fa":"markdown"},"source":{"161268e0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","84a9442f":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest2 = pd.read_csv(\"..\/input\/titanic\/test.csv\")","625d4ef5":"train.info()","db94ea92":"train.head()","24538104":"train.describe()","52a5e8ad":"train.describe(include='O')","d06d3d94":"train.isnull().sum()[train.isnull().sum() > 0]","07c320e1":"test.info()","1d3550d5":"test.head()","c6d5fd9c":"test.describe()","9de421a7":"test.describe(include='O')","80c4b241":"test.isnull().sum()[test.isnull().sum()>0]","1343564a":"train['Pclass'].value_counts(sort=False)","65c2ae27":"pclass_survived = train.groupby('Pclass').Survived.value_counts(sort=False)\npclass_survived","b681d181":"pclass_survived.unstack(level=0).plot(kind='bar')","77ab3c87":"train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e2956cd0":"sns.barplot(x='Pclass', y='Survived', data=train)","b4374a58":"train.Sex.value_counts()","5a4830fe":"sex_survival = train.groupby('Sex').Survived.value_counts(sort=False)\nsex_survival","9ce5ef59":"sex_survival.unstack(level=0).plot(kind='bar', subplots=False)","25a3a219":"train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","0ca3ba07":"sns.barplot(x='Sex', y='Survived', data=train)","e9c31084":"train.Embarked.value_counts(sort=False)","ddf8a250":"Embarked_survival = train.groupby('Embarked').Survived.value_counts(sort=False)\nEmbarked_survival","33e9071d":"Embarked_survival.unstack(level=0).plot(kind='bar', subplots=False)","65529a34":"train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","a4c56a16":"sns.barplot(x='Embarked', y='Survived', data=train)","080b2713":"sns.displot(data=train, x='Age', col='Survived', kde=True)","06b5f2db":"train[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","94d730ef":"train[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","922f7df3":"plt.figure(figsize=(15,8))\nsns.heatmap(train.drop('PassengerId', axis=1).corr(), square=True, annot=True)","c2c9c0d4":"train['Embarked'] = train['Embarked'].fillna('S')","e17d5bce":"test['Fare'] = test['Fare'].fillna(train['Fare'].median())","b1123ad6":"train_test_data = [train, test]","4231f952":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].apply(lambda x: x.split('.')[0].split(',')[1].strip())\ntrain.head()","07e77257":"newtitles={\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"}","97c1a8b2":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(newtitles)\ntrain.head()","0abaf847":"train['Title'].value_counts()","4324ec35":"train.groupby(['Title', 'Sex']).Age.mean()","da83f9e0":"def newage (cols):\n    title=cols[0]\n    Sex=cols[1]\n    Age=cols[2]\n    if pd.isnull(Age):\n        if title=='Master' and Sex==\"male\":\n            return 4.57\n        elif title=='Miss' and Sex=='female':\n            return 21.8\n        elif title=='Mr' and Sex=='male': \n            return 32.37\n        elif title=='Mrs' and Sex=='female':\n            return 35.72\n        elif title=='Officer' and Sex=='female':\n            return 49\n        elif title=='Officer' and Sex=='male':\n            return 46.56\n        elif title=='Royalty' and Sex=='female':\n            return 40.50\n        else:\n            return 42.33\n    else:\n        return Age ","148be7d8":"train.Age=train[['Title','Sex','Age']].apply(newage, axis=1)\ntest.Age=test[['Title','Sex','Age']].apply(newage, axis=1)","75f761b2":"for dataset in train_test_data:\n    dataset['Deck'] = dataset['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\ntrain.head()","bce60023":"train.isnull().sum()[train.isnull().sum() > 0]","1b0ef80b":"test.isnull().sum()[test.isnull().sum()>0]","c8b6152b":"for dataset in train_test_data:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","92aacf8e":"train.head()","fe4d719c":"train['AgeBand'] = pd.cut(train['Age'], 5)\ntrain[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean()","29ccaa9b":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4\ntrain.head()","45d92c44":"train['FareBand'] = pd.qcut(train['Fare'], 4)\ntrain[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean()","9b009980":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","c30a42aa":"train.head()","d2a465af":"train = train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'AgeBand', 'FareBand'], axis=1)","0c561c03":"train.head()\n","55dee854":"test = test.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1)\ntest.head()","954a70fa":"titanic=pd.concat([train, test], sort=False)","5ddbbcf9":"titanic=pd.get_dummies(titanic)","1b3977e9":"len_train = train.shape[0]","da416aac":"train=titanic[:len_train]\ntest=titanic[len_train:]","1399143f":"train.Survived=train.Survived.astype('int')\ntrain.Survived.dtype","0a651a5b":"xtrain=train.drop(\"Survived\",axis=1)\nytrain=train['Survived']\nxtest=test.drop(\"Survived\", axis=1)","03f05f48":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n#from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV \n#from sklearn.model_selection import RandomizedSearchCV \nfrom xgboost import XGBClassifier","98bc8895":"rf = RandomForestClassifier(random_state = 1)\nparam_grid =  {'n_estimators': [450,500,550],\n               'criterion':['gini','entropy'],\n                                  'bootstrap': [True],\n                                  'max_depth': [15, 20],\n                                  'max_features': ['auto', 10],\n                                  'min_samples_leaf': [2,3]}\n                                  \nclf_rf = GridSearchCV(rf, param_grid = param_grid, cv = 4, verbose = True, n_jobs = -1)\nbest_clf_rf = clf_rf.fit(xtrain,ytrain)\nprint(clf_rf.best_score_)\nprint(clf_rf.best_params_)","0f4d784f":"best_rf = best_clf_rf.best_estimator_.fit(xtrain, ytrain)\nfeat_importances = pd.Series(best_rf.feature_importances_, index=xtrain.columns)\nfeat_importances.nlargest(10).plot(kind='barh')","0d3985ec":"rf_pred = best_rf.predict(xtest)\nrf_submission = pd.DataFrame({'PassengerId': test2.PassengerId, 'Survived': rf_pred})\nrf_submission.to_csv('rf_submission.csv', index=False)\nrf_submission.head()","d4bb2245":"\"\"\"\nxgb = XGBClassifier(random_state = 1)\n\nparam_grid = {\n    'n_estimators': [450,500,550],\n    'colsample_bytree': [0.75,0.8,0.85],\n    'max_depth': [None],\n    'reg_alpha': [1],\n    'reg_lambda': [2, 5, 10],\n    'subsample': [0.55, 0.6, .65],\n    'learning_rate':[0.5],\n    'gamma':[.5,1,2],\n    'min_child_weight':[0.01],\n    'sampling_method': ['uniform']\n}\n\nclf_xgb = GridSearchCV(xgb, param_grid = param_grid, cv = 5, verbose = True, n_jobs = -1)\nbest_clf_xgb = clf_xgb.fit(xtrain, ytrain)\nprint(clf_xgb.best_score_)\nprint(clf_xgb.best_params_)\n\"\"\"","c94d2554":"\"\"\"\nxgb_pred = best_clf_xgb.best_estimator_.predict(xtest)\nxgb_submission = pd.DataFrame({'PassengerId': test2.PassengerId, 'Survived': xgb_pred})\nxgb_submission.to_csv('xgb_submission.csv', index=False)\n\"\"\"","43fdca7f":"# References\n\ngoldens: https:\/\/www.kaggle.com\/goldens\/titanic-on-the-top-with-a-simple-model\n\nblurredmachine: https:\/\/www.kaggle.com\/blurredmachine\/titanic-survival-a-complete-guide-for-beginners\n\nkenjee: https:\/\/www.kaggle.com\/kenjee\/titanic-project-example\n","b04c74b6":"The ratio of women's survival rate as compared to men is overwhelming, more than 74% of women survived while only 18% men survived. This will surely help in our predictive model.","b70504b6":"**SibSp**","dadd35d0":"We achieve competion accuracy of:\n\nRandomforest: 0.78229\n\nXGBoost: 0.76315\n\nI will try more thing's in the future, Any suggestion or correction is appreciated.\n","dccdc571":"we use the median of Fare instead of mean because Fare column is skewed.","c98db1bd":"**Model**","789fff57":"Passenger's who boarded from Cherbourg have a better survival rate as compared to Southhamptom and Queenstown. More than 55% survived who Embarked from Cherbourg.","8d01a871":"We have dealt with missing value's, we dont need to worry about Cabin column as we will drop it.","14ce497d":"# Feature engineering","8fc2e378":"In this notebook we are going through the titanic dataset, we will explore the features, use different visualizations to better understand our data, clean the data, perform some feature engineering and finally build a predictive model.\n\nOur aim is to achieve a good prediction of people's Survival on the titanic ship, while following the general steps one would follow in such a project.","5c02522b":"We fill the Missing Embarked values with 'S' as it is the mode of the feature.","6f264a6c":"We use RandomForest and XGBoost as our model, we submit both the models\n\nI use very few parameter's here, i took parameter's at face value from ken jee's notebook.","a3ff2ea8":"**Pclass**\nWe can see that majority of people traveling from Pclass 3.","618969b5":"**Correlations**","5c33bae2":"**Steps:**\n* Imports\n* Data Exploration\n* Data cleaning\n* Feature Engineering\n* Data Preprocessing\n* Model Building and tuning\n* Final model and prediction","463167bd":"Age, Fare and Cabin are missing values in test data.","c49b155c":"**Sex**","7ffc2dc8":"# Bivariate Analysis \nWe will be performing some Analysis such that we will see how the affect 'Survived' feature.","6dcc125f":"# Data Exploration","59bc04b4":"We can see that 3 columns are missing values, namely Age, Cabin and Embarked in training dataset.\n\nWe notice that Cabin is missing a huge amount of data, We either have to drop the Column or come up with a unorthodox solution","94518c87":"The higher class people have better chance at survival, survival rate declines as we decrease the class status.","872000f8":"with the help of the graph we can clearly see that people in first class survived in huge numbers as compared to other classes.","44799025":"1)Parch and SibSp features are highly correlated with a score of 0.41.\n\n2)Pclass and Fare are negatively correlated which is understandable because as the Fare goes up the Pclass goes down(3...2...1).\n\n3)Pclass and Age has a strong negative correlation because we notice that people with higher age prefer lower Pclass.","e816b703":"**Age**","b20e7c53":"using the describe() method we can see the count, mean, standard deviation and various quantiles of our data.","6b724475":"I didnt Run the XGBoostClassifier because it was taking too long.","8fd084ce":"**Information about the columns**\n'''\n\n1)**PassengeId**: It is a unique id given to every passenger.\n\n2)**Survived**: It indicates whether the passenger survived or not. The value 1 indicates he\/she survived, 0 idicates they were not able to survive.\n\n3)**Pclass**: It contains information about which class the passenger was traveling by.\n\n4)**Name**: Ihis field contains name of the passenger.\n\n5)**Sex**: Contains Gender information of the passenger.\n\n6)**Age**: Contains a numerical value which is the age of the passenger.\n\n7)**SibSp**: Contains information regarding the number of siblings\/spouse the passenger had on the ship.\n\n8)**Parch**: Contains information regarding the number of Parents\/children's the passenger had on the ship.\n\n9)**Ticket**: Has the passenges Ticket number.\n\n10)**Cabin**: Indicates which Cabin was assigned to the passenger.\n\n11)**Embarked**: Indicates where the passenger boarded the ship.\n'''","04d6f54a":"****","17c66083":"We drop the feature's we dont need in training and test data.","059c7efa":"We notice that Survived column is missing in the test data,We have to predict this column.","dcb934b9":"# Missing Values","d15aeb52":"**Embarked**","2742b071":"Female's survived in huge numbers, out of 314 female's only 81 were not able to make it.\n\nOnly 109 men survived out of 577 on-board.","2cb595f8":"Mapping these title's to combine the similar one's.","a60fef2c":"Children's with age less than 10 years had a good chance of surviving.","61ba544c":"We have successfully import the basic libraries and read the dataset.","d360a6a0":"We create bin's of \"Age\" and \"Fare\" to reduce the complexity of our data.","7c9406ac":"**Parch**","65b3f9d3":"As SibSp and Parch do not provide good information towards the Survival rate, we will extract another feature by combining them later.","0c9da1bd":"# Data Preprocessing","d4b99dc6":"Creating a new feature using \"SibSp' and 'Parch'.\nwe add these feature's and create \"FamilySize\", This feature better explains the survival rate.","18cbf789":"Cabin feature give's important information so we cannot drop it even though a lot of data is missing.\nWe take the first word of the cabin's and We put 'M' for the missing value's. We see that people in cabin A,B and C have a very high survival rate and some cabin's have low survival rate. This is valuable information.","9eadea2c":"Some of the option we had in filling missing value's of \"Age\" column are as follows:\n\n1) Use mean and standard deviation of the \"Age\" column to fill missing value's\n\n2) Use the feature's having good correlation with \"Age\" to calculate the respective missing value's.\n\nWe use the second method because first method will introduce noise in our dataset and we dont want that.","64f651fa":"We Extract the title from each person's name, this will help us in knowing whether the person was a Royalty or a Doctor or someone else who is important. This will also give us a good estimate about the age of a person for eg, Someone with a title of 'Master' will obviously be young."}}