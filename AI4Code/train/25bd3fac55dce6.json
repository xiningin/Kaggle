{"cell_type":{"156c235d":"code","f99ad5d5":"code","f22c0735":"code","f5ad2c68":"code","80cbecc5":"code","344fb496":"code","eff3f10f":"code","f0e575c2":"code","e01cb20c":"code","af4a0d7c":"code","70c88c40":"code","010e50bb":"code","70707d2a":"code","b9be2e18":"code","92427b7e":"code","99953514":"code","caa8780a":"code","05f63173":"code","4de72fb2":"markdown","3c360af3":"markdown","55dbfd91":"markdown","8fb58e48":"markdown","f7edd6f4":"markdown","b5888fe6":"markdown","3bdc1622":"markdown","0fc0dfcb":"markdown","2d3d103a":"markdown","5fff0690":"markdown","468e9359":"markdown","6802ef18":"markdown","9e8d86b3":"markdown","a31c0579":"markdown","f1d73913":"markdown"},"source":{"156c235d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\n\nimport pandas as pd\n# pandas defaults\npd.options.display.max_columns = 500\npd.options.display.max_rows = 500\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f99ad5d5":"df = pd.read_csv(\"..\/input\/IMDB-Movie-Data.csv\")","f22c0735":"# top 5 rows\ndf.head()","f5ad2c68":"#renaming some cols\ndf.rename(columns = {'Revenue (Millions)':'Rev_M','Runtime (Minutes)':'Runtime_min'},inplace=True)","80cbecc5":"df['AvgRating'] = (df['Rating'] + df['Metascore']\/10)\/2","344fb496":"def custom_rating(genre,rating):\n    if 'Thriller' in genre:\n        return min(10,rating+1)\n    elif 'Comedy' in genre:\n        return max(0,rating-1)\n    else:\n        return rating\n        \ndf['CustomRating'] = df.apply(lambda x: custom_rating(x['Genre'],x['Rating']),axis=1)","eff3f10f":"# Single condition: dataframe with all movies rated greater than 8\ndf_gt_8 = df[df['Rating']>8]\n\ndf_gt_8.head()","f0e575c2":"# Multiple conditions: AND - dataframe with all movies rated greater than 8 and having more than 100000 votes\n\nAnd_df = df[(df['Rating']>8) & (df['Votes']>100000)]\n\nAnd_df.head()","e01cb20c":"# Multiple conditions: OR - dataframe with all movies rated greater than 8 or having a metascore more than 90\n\nOr_df = df[(df['Rating']>8) | (df['Metascore']>80)]\nOr_df.head()\n","af4a0d7c":"# Multiple conditions: NOT - dataframe with all emovies rated greater than 8 or having a metascore more than 90 have to be excluded\n\nNot_df = df[~((df['Rating']>8) | (df['Metascore']>80))]\nNot_df.head()","70c88c40":"# Single condition: dataframe with all movies rated greater than 8\ndf_gt_8 = df[df['Rating']>8]\n\n# Multiple conditions: AND - dataframe with all movies rated greater than 8 and having more than 100000 votes\nAnd_df = df[(df['Rating']>8) & (df['Votes']>100000)]\n\n# Multiple conditions: OR - dataframe with all movies rated greater than 8 or having a metascore more than 90\nOr_df = df[(df['Rating']>8) | (df['Metascore']>80)]\n\n# Multiple conditions: NOT - dataframe with all emovies rated greater than 8 or having a metascore more than 90 have to be excluded\nNot_df = df[~((df['Rating']>8) | (df['Metascore']>80))]","010e50bb":"new_df = df[len(df['Title'].split(\" \"))>=4]\n","70707d2a":"#create a new column\ndf['num_words_title'] = df.apply(lambda x : len(x['Title'].split(\" \")),axis=1)\n#simple filter on new column\nnew_df = df[df['num_words_title']>=4]\nnew_df.head()","b9be2e18":"if length of title >=4 and distinct genres >=2:\n    if Rating>Metascore\/10:\n        if year>2013:\n    else:\n        if year<2012","92427b7e":"new_df = df[df.apply(lambda x : len(x['Title'].split(\" \"))>=4,axis=1)]\nnew_df.head()","99953514":"year_revenue_dict = df.groupby(['Year']).agg({'Rev_M':np.mean}).to_dict()['Rev_M']\ndef bool_provider(revenue, year):\n    return revenue<year_revenue_dict[year]\n    \nnew_df = df[df.apply(lambda x : bool_provider(x['Rev_M'],x['Year']),axis=1)]\n\nnew_df.head()","caa8780a":"from tqdm import tqdm, tqdm_notebook\ntqdm_notebook().pandas()\n\nnew_df['rating_custom'] = df.progress_apply(lambda x: custom_rating(x['Genre'],x['Rating']),axis=1)\n","05f63173":"new_df.head()","4de72fb2":"# Conclusion\n\napply and lambda functionality lets you take care of a lot of complex things while manipulating data.\u00a0\n\nI feel that I don't have to worry about a lot of stuff while using Pandas since I can use apply well.\u00a0\n\nIn this post, I tried to explain how it works. And there might be other ways to do whatever I have done above.\u00a0\n\nBut I like to stick with apply\/lambda in place of map\/applymap because I find it more readable and well suited to my workflow.\n","3c360af3":"And that is a perfectly fine way as long as you don't have to create a lot of columns. But, I prefer this:","55dbfd91":"Pretty simple stuff.\u00a0\n\nBut sometimes we may need to do complex filtering operations.\n\nAnd sometimes we need to do some operations which we won't be able to do using just the above format.\n\nFor instance: Let us say we want to filter those rows where the number of words in the movie title is greater than or equal to than 4.\nHow would you do it?\u00a0\n\nTrying the below will give you an error. Apparently, you cannot do anything as simple as split with a series.","8fb58e48":"One way is to first create a column which contains no of words in the title using apply and then filter on that column.","f7edd6f4":"The general structure is:\n- You define a function that will take the column values you want to play with to come up with your logic. Here the only two columns we end up using are genre and rating.\n- You use an apply function with lambda along the row with axis=1. The general syntax is:\n\n```df.apply(lambda x: func(x['col1'],x['col2']),axis=1)```","b5888fe6":"# Filtering a dataframe\n\nPandas make filtering and subsetting dataframes pretty easy. You can filter and subset dataframes using normal operators and &,|,~ operators.","3bdc1622":"# And lastly there is progress_apply\n\nprogress_apply is a single function that comes with tqdm package.\u00a0\n\nAnd this has saved me a lot of time.\n\nSometimes when you have got a lot of rows in your data, or you end up writing a pretty complex apply function, you will see that apply might take a lot of time.\n\nI have seen apply taking hours when working with Spacy. In such cases, you might like to see the progress bar with apply.\u00a0\n\nYou can use tqdm for that.\n\nAfter the initial imports at the top of your notebook, just replace apply with progress_apply and everything remains the same.","0fc0dfcb":"But sometimes we may need to build complex logic around the creation of new columns.\nTo give you a convoluted example, let's say that we want to build a custom movie score based on a variety of factors.\n\nSay, If the movie is of the thriller genre, I want to add 1 to the IMDB rating subject to the condition that IMDB rating remains less than or equal to 10. And If a movie is a comedy I want to subtract 1 from the rating.\n\nHow do we do that?\nWhenever I get a hold of such complex problems, I use apply\/lambda. Let me first show you how I will do this.","2d3d103a":"# Change Column\u00a0Types\n\nI even use apply to change the column types since I don't want to remember the syntax for changing column type and also since it lets me do much more complex things.\u00a0\nThe normal syntax to change column type is astype in Pandas. So if I had a column named price in my data in an str format. I could do this:\n\n```df['Price'] = newDf['Price'].astype('int')```\n\nBut sometimes it won't work as expected.\u00a0\nYou might get the error: ValueError: invalid literal for long() with base 10: '13,000'. That is you cannot cast a string with \",\" to an int. To do that we first have to get rid of the comma.\u00a0\nAfter facing this problem time and again, I have stopped using astype altogether now and just use apply to change column types.\n\n```df['Price'] = df.apply(lambda x: int(x['Price'].replace(',', '')),axis=1)```","5fff0690":"What I did here is that my apply function returns a boolean which can be used to filter.\n\nNow once you understand that you just have to create a column of booleans to filter, you can use any function\/logic in your apply statement to get however complex a logic you want to build.\n\nLet us see another example. I will try to do something a little complex to just show the structure.\n\nWe want to find movies for which the revenue is less than the average revenue for that particular year?","468e9359":"You can create a new column in many ways.\nIf you want a column that is a sum or difference of columns, you can pretty much use simple basic arithmetic. Here I get the average rating based on IMDB and Normalized Metascore.","6802ef18":"We have a function here which we can use to write any logic. \nThat provides a lot of power for advanced filtering as long as we can play with simple variables.","9e8d86b3":"# Creating a\u00a0Column","a31c0579":"# 1. Reading the Data","f1d73913":"You should be able to create pretty much any logic using apply\/lambda since you just have to worry about the custom function."}}