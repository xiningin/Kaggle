{"cell_type":{"82ff0500":"code","6a3107b3":"code","f5010094":"code","ce68bc07":"code","46ce5498":"code","752f27cc":"code","9d8e7c98":"code","bf5b2552":"code","b4d980b3":"code","8d33c679":"code","319e2451":"code","a2a28e7c":"code","44d1e79d":"code","14676869":"code","0accf426":"markdown","f4d861b2":"markdown","89653878":"markdown","8972893f":"markdown","ab805c31":"markdown","b1c2a8a2":"markdown","9b3dbf1f":"markdown","bd91a2c9":"markdown","f4e27773":"markdown","0991f5a2":"markdown","c43cb1e3":"markdown","d8b3531a":"markdown","3d3b6331":"markdown"},"source":{"82ff0500":"TEST_PART = 0.25","6a3107b3":"import numpy as np\nimport pandas as pd\n\nimport lib_accii_53\nimport lib_prepare\nimport lib_ga\n\nfrom sklearn.linear_model import Ridge\n\nfrom scipy.special import softmax","f5010094":"close = lib_accii_53.get_Close()\ndClose = close.pct_change()\ndClose","ce68bc07":"data = lib_prepare.PrepData(\n    X = dClose.values,\n    Y = dClose.values,\n    window = 5,\n    train_len = 500,\n    val_len = 10,\n    test_part = 0.25\n)\n\ndata.learn_len,data.test_len","46ce5498":"def getQualityMethod(train_len,val_len,window,alphaPow = 0):\n\n    # \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\n    data = lib_prepare.PrepData(\n        X = dClose.values,\n        Y = dClose.values,\n        window = window,\n        train_len = train_len,\n        val_len = val_len,\n        test_part = TEST_PART\n    )\n    \n    X_train, Y_train, X_val, Y_val = data.get_rand_learn_vib()\n    \n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n    \n    model = Ridge(alpha = 10**alphaPow,normalize=True)\n    \n    # \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n    \n    model.fit(X_train.reshape(X_train.shape[0],-1),Y_train)\n    \n    # \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \n    \n    Y_pred = model.predict(X_val.reshape(X_val.shape[0],-1))\n    Y_rec = softmax(Y_pred,axis=1)\n    \n    # \u0440\u0430\u0441\u0447\u0435\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n    \n    kach = np.sum(Y_rec * Y_val)\/window\n    \n    return kach\n\ngetQualityMethod(\n    train_len = 500,\n    val_len = 10,\n    window = 5,\n    alphaPow = 0\n)","752f27cc":"modelGA = lib_ga.ListGenetic( \n    pop_size = 200,\n    train_len = range(300,900),\n    val_len = range(7,50),\n    window = range(2,10),\n    alphaPow = np.linspace(-3,3,100),\n    quality_method=getQualityMethod\n)","9d8e7c98":"modelGA.fit(500000,echo_time=60)","bf5b2552":"modelGA.plot_hist_new(('quality','train_len','val_len','window','alphaPow'))","b4d980b3":"best_par = modelGA.getBestParams()\nbest_par","8d33c679":"dataBest = lib_prepare.PrepData(\n    X = dClose.values,\n    Y = dClose.values,\n    test_part = TEST_PART,\n    **best_par\n)\n\nY_all = []\nY_rec_all = []\nfor X_train, Y_train, X_val, Y_val in dataBest.progon():\n    \n    if X_train is None:\n        # \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c\n        Y_rec = np.ones(Y_val.shape) \/ Y_val.shape[1]\n    else:\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n        model = Ridge(alpha = 10**best_par['alphaPow'],normalize=True)\n\n        # \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\n        model.fit(X_train.reshape(X_train.shape[0],-1),Y_train)\n\n        # \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \n        Y_pred = model.predict(X_val.reshape(X_val.shape[0],-1))\n        Y_rec = softmax(Y_pred,axis=1)\n    \n    Y_all.append(Y_val)\n    Y_rec_all.append(Y_rec)\n\nY_all = np.concatenate(Y_all,axis=0)\nY_rec = np.concatenate(Y_rec_all,axis=0)","319e2451":"res_ravn_portf = np.sum(Y_all * np.ones(Y_all.shape)\/Y_all.shape[1],axis=1)\nres_rec_portf = np.sum(Y_all * Y_rec,axis=1)\n\nall_len = len(res_ravn_portf)\ntest_len = int(all_len*TEST_PART)","a2a28e7c":"print('ravn_mean',np.mean(res_ravn_portf[:-test_len]))\nprint('rec_mean',np.mean(res_rec_portf[:-test_len]))","44d1e79d":"print('ravn_mean',np.mean(res_ravn_portf[-test_len:]))\nprint('rec_mean',np.mean(res_rec_portf[-test_len:]))","14676869":"X_train, Y_train, X_calc = dataBest.get_last_learn_vib()\n# \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nmodel = Ridge(alpha = 10**best_par['alphaPow'],normalize=True)\n\n# \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nmodel.fit(X_train.reshape(X_train.shape[0],-1),Y_train)\n\n# \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u0437\u0430\u0432\u0442\u0440\u0430 \nY_pred = model.predict(X_calc.reshape(X_calc.shape[0],-1))\nY_rec = softmax(Y_pred,axis=1)\n\nres = pd.DataFrame({'\u041f\u0440\u043e\u0433\u043d\u043e\u0437':Y_pred.reshape(-1),'\u0414\u043e\u043b\u044f':Y_rec.reshape(-1)},index=dClose.columns)\nprint(res)\nres['\u0414\u043e\u043b\u044f'].plot.bar(figsize=(15,5),grid=True)","0accf426":"# \u0413\u0435\u043d\u0435\u0442\u0438\u043a\u0430","f4d861b2":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a","89653878":"## \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u043a\u0438","8972893f":"## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u043a\u0438","ab805c31":"## \u043f\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439","b1c2a8a2":"# \u041f\u0440\u043e\u0433\u043e\u043d \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445","9b3dbf1f":"## \u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u0433\u0435\u043d\u0435\u0442\u0438\u043a\u0435","bd91a2c9":"## \u0426\u0438\u043a\u043b\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0433\u0435\u043d\u0435\u0442\u0438\u043a\u0438","f4e27773":"# \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u0437\u0430\u0432\u0442\u0440\u0430","0991f5a2":"## \u0420\u0430\u0441\u0447\u0435\u0442","c43cb1e3":"## \u043f\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439","d8b3531a":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","3d3b6331":"## \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438"}}