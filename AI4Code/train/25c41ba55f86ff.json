{"cell_type":{"2911b7d3":"code","89054664":"code","39287a6a":"code","b3af0d8e":"code","2324f586":"code","b76912f8":"code","cd879d83":"code","48be95e9":"code","d20d4e6c":"code","4b52a84c":"code","9b25a22a":"code","a8e69ff6":"code","25779a08":"code","10e8a5ae":"code","e0cd26bc":"code","d95017e1":"code","aa916e67":"code","933d40ef":"code","08df92a4":"code","bc611101":"code","a1eb60f2":"code","8eb9f85c":"code","2d2d5e8e":"code","7322202a":"code","1ccf6a9d":"code","009bcd78":"code","375cc27d":"code","c41e3304":"code","4f7c29a3":"code","3c42622c":"code","944492c1":"code","818e5a60":"code","41d1902a":"code","03940f20":"code","8b4828c6":"code","1c40d6b3":"code","f2a374a5":"code","6b0ebbd8":"code","3556f192":"code","c7d756a3":"code","484b8540":"code","478fd5cc":"code","d832e9be":"code","e7b817f9":"code","b0a77c17":"code","9dcf6305":"code","1b7adfd9":"code","5316c7e3":"code","ef378008":"code","6aa0db89":"code","f9580600":"code","33765417":"code","ae33c559":"code","6352e423":"code","5396f7c3":"code","1595eca3":"code","52839c4c":"code","412e084f":"code","ca202c7f":"code","957ee708":"code","92982c9b":"code","ee211d0f":"code","6435d161":"code","7a5ec378":"code","2101157f":"code","e22f4656":"code","413f6884":"code","a40280a6":"code","d980485c":"code","f04583d9":"code","157270c3":"code","94a0082d":"code","42125c3e":"code","5a4f528c":"code","19395a50":"code","37ed08d0":"code","4e54d860":"code","52393a68":"code","36f08786":"code","86670d94":"code","13c30351":"code","f01a6435":"code","29c7d6a9":"code","74b374b5":"code","7272e3e5":"code","aee4926c":"code","1ef624ab":"code","bb76f03b":"code","1aaccb50":"code","42151287":"code","d76a3fd0":"code","bcf758a4":"code","703d2648":"code","9ddde1a1":"code","704017ff":"code","c63e12d2":"code","6ddca64e":"markdown","bc237326":"markdown","d09455ac":"markdown","3369497a":"markdown","884b5b4c":"markdown","a8e222b4":"markdown","a9185d9d":"markdown","7e8e86e9":"markdown","f30f590f":"markdown","1beb6464":"markdown","72ab7b18":"markdown","be4d215b":"markdown","d70dab44":"markdown","7ab49bda":"markdown","4bc73c3e":"markdown","48688c5a":"markdown","dde214d8":"markdown","88373f2c":"markdown","0754f453":"markdown","967aee1f":"markdown","6811b094":"markdown","a375c55d":"markdown","1b131a48":"markdown","c7c9f004":"markdown","05477488":"markdown","382ff53e":"markdown","051bffca":"markdown","8fb17ed0":"markdown","18be9eaf":"markdown","7227e4ca":"markdown","a0d111e8":"markdown","3cd286c4":"markdown","bf487654":"markdown","f4fc101e":"markdown","d4640c47":"markdown","d79e3b87":"markdown","2a1a97f8":"markdown"},"source":{"2911b7d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","89054664":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')","39287a6a":"data.info()","b3af0d8e":"data.corr()","2324f586":"f, ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\nplt.show()","b76912f8":"data.head(10) # \u0130lk 10 pokemonu g\u00f6r\u00fcyoruz. Genel yap\u0131ya bak\u0131yoruz.","cd879d83":"data.columns # Datadaki s\u00fctun bilgileri","48be95e9":"# Line Plot yapma\n# color = renk, label = label, linewidth = \u00e7izginin kal\u0131nl\u0131\u011f\u0131, \n# alpha = opakl\u0131k, grid = kafesli g\u00f6r\u00fcnt\u00fc, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g', label = 'Speed', linewidth = 1, alpha = 0.5, grid = True, linestyle = ':')\ndata.Defense.plot(color = 'r', label = 'Defense', linewidth = 1, alpha = 0.5, grid = True, linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","d20d4e6c":"# Scatter  Plot Yapma\n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense', alpha=0.5, color = 'red')\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.title('Attack Defense Scatter Plot')\nplt.show()","4b52a84c":"# Histogram\n# bins = figuredeki bar say\u0131s\u0131\ndata.Speed.plot(kind = 'hist', bins = 50, figsize = (6, 6))\nplt.show()","9b25a22a":"# clf() = Bu metod, plot edilen grafi\u011fi siler.\ndata.Speed.plot(kind = 'hist', bins = 50)\nplt.clf()","a8e69ff6":"# s\u00f6zl\u00fck yap ve 'key' ve 'value' de\u011ferlerine bak\ndictionary = {'spain' : 'madrid', 'usa' : 'Washington'}\nprint(dictionary.keys())\nprint(dictionary.values())","25779a08":"dictionary['spain'] = 'barcelona'\nprint(dictionary)\ndictionary['france'] = 'paris'\nprint(dictionary)\ndel dictionary['spain']\nprint(dictionary)\nprint('france' in dictionary)\ndictionary.clear()\nprint(dictionary)","10e8a5ae":"# del dictionary - dictionary'i memory'den tamamen siler\nprint(dictionary)","e0cd26bc":"# data = pd.read_csv('')","d95017e1":"series = data['Defense'] # data['Defense'] = series Data'daki Defense s\u00fctununu seri olarak al\nprint(type(series))\ndata_frame = data[['Defense']] # data[['Defense']] = data frameData'n\u0131n liste i\u00e7inde 'Defense' s\u00fctununu al.\nprint(type(data_frame))","aa916e67":"#1 - Pandas Data Frame'ini Filtreleme\nx = data['Defense']>200 # Defans\u0131 200'den b\u00fcy\u00fck olanlar\u0131 x'e e\u015fitledik.\ndata[x]","933d40ef":"#2 - Numpy ile Pandas Data Frame'ini Filtreleme, 'logical_and' logical_or' ile\ndata[np.logical_and(data['Defense']>200, data['Attack']>100)] #200 ve 100'den b\u00fcy\u00fck olanlar","08df92a4":"data[np.logical_or(data['Defense']>200, data['Attack']>179)] #200 veya 179'dan b\u00fcy\u00fck olanlar","bc611101":"# ayn\u0131 \u015feyi farkl\u0131 \u015fekilde yapal\u0131m\ndata[(data['Defense']>200) & (data['Attack']>100)]","a1eb60f2":"# while i\u00e7indeki condition '==' do\u011fru ya da '!=' yanl\u0131\u015f olduk\u00e7a loopta kal.\ni = 0\nwhile i != 5:\n    print('i is:', i)\n    i += 1\nprint(i, 'is equal to 5')","8eb9f85c":"lis = [1, 2, 3, 4, 5]\nfor i in lis:\n    print('i is:', i)\nprint('')\n\nfor index, value in enumerate(lis):\n    print(index,\" : \", value)\nprint('')\n\ndictionary = {'spain' : 'madrid', 'france' : 'paris'}\nfor key, value in dictionary.items():\n    print(key, \" : \", value)\nprint('')\n\nfor index, value in data[['Attack']][0:2].iterrows():\n    print(index, \" : \", value)","2d2d5e8e":"def tuble_ex():\n    \"\"\"return defined t tuble\"\"\"\n    t = (1, 2, 3)\n    return t\na,b,c = tuble_ex()\nprint(a, b, c)\nx,y,_ = tuble_ex()\nprint(x,y)","7322202a":"x = 2\ndef f():\n    x=3\n    return x\nprint(x)\nprint(f())\nprint(x)","1ccf6a9d":"# Global variable can be used in function if it's not defined in function.\nx = 5\ndef f():\n    y = 2*x\n    return y\nprint(f())","009bcd78":"import builtins\ndir(builtins)","375cc27d":"def square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        \"\"\"add two local variables\"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","c41e3304":"#default arguments\ndef f(a, b=1, c=2):\n    y = a + b + c\n    return y\nprint(f(5))\n# or\nprint(f(5, 4, 3))","4f7c29a3":"# flexible arguments\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint('')\nf(1,5,3)","3c42622c":"# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\"print key and value of dict\"\"\"\n    for key,value in kwargs.items():\n        print(key, \":\", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","944492c1":"#lambda function\nsquare = lambda x: x**2  # x is the argument\nprint(square(4))\n\ntot = lambda x,y,z: x+y+z # x,y,z are the arguments\nprint(tot(1,2,3))","818e5a60":"num_list = [1,2,3]\ny = map(lambda x:x**2, num_list)\nprint(list(y))","41d1902a":"# iteration example\n\nname = 'ronaldo' # string can be made an iterable object.\nit = iter(name) # make string an iterable object.\nprint(next(it)) # print next iteration\nprint(*it)      # print remaining iteration","03940f20":"# zip example zip(list)\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nnum_label = [\"num\", \"numin\"]\nlistcol = [list1, list2]\nz = zip(num_label, listcol)\nprint(z) # z is an obejct.\n\nz_list = list(z) # z_list is a list.\nprint(z_list)\n\nz_dict = dict(z_list)\nprint(z_dict)\n\ndfz = pd.DataFrame(z_dict)\ndfz","8b4828c6":"# unzip example zip(*list)\n\nun_zip = zip(*z_list) # un_zip is an object.\nun_list1, un_list2 = list(un_zip) # un_listx is a tuple.\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list2)))","1c40d6b3":"num1 = [1,2,3] # num1 is an iterable object\nnum2 = [i+1 for i in num1] # list comprehension,\n                           #iterate over an iterable with for loop\nprint(num2)","f2a374a5":"# conditionals on iterable\nnum1 = [5, 10, 15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i + 5 for i in num1]\nprint(num2)","6b0ebbd8":"# List comprehension example with Pandas.\n# We set a threshold which is the average speed.\n\n# Let's classify the pokemons according to their speeds.\n\nthreshold = sum(data.Speed)\/len(data.Speed)\n# data[\"speed_level\"] diye bir feature a\u00e7\u0131yoruz ve i\u00e7ine koyuyoruz.\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10, [\"speed_level\", \"Speed\"]]","3556f192":"data.columns","c7d756a3":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head() # shows first 5 rows as default\n#data.tail() # shows last 5 rows as default","484b8540":"data.columns","478fd5cc":"data.shape","d832e9be":"data.info()","e7b817f9":"print(data['Type 1'].value_counts(dropna=False))","b0a77c17":"data.describe() # ignore null entries \n# gives idead about the features\n#  count: number of entries\n#  mean: average of entries\n#  std: standart deviation\n#  min: minimum entry\n#  25%: first quantile\n#  50%: median or second quantile\n#  75%: third quantile\n#  max: maximum entry","9dcf6305":"data.boxplot(column='Attack', by = 'Legendary')\nplt.show()","1b7adfd9":"data_new = data.head() # first 5 rows are taken\ndata_new","5316c7e3":"# melting\n# id_vars is the base column.\n# value_vars are the variable columns.\n\nmelted = pd.melt(frame=data_new, id_vars = 'Name', value_vars = ['Attack', 'Defense'])\nmelted","ef378008":"melted.pivot(index='Name', columns = 'variable', values='value')","6aa0db89":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1, data2], axis=0, ignore_index=True)\nconc_data_row","f9580600":"data3 = data['Attack'].head()\ndata4 = data['Defense'].head()\nconc_data_col = pd.concat([data3, data4], axis=1)\nconc_data_col","33765417":"data.dtypes","ae33c559":"data['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')","6352e423":"data.dtypes","5396f7c3":"data.info()","1595eca3":"# Check Type 2\ndata[\"Type 2\"].value_counts(dropna=False)\n# There are 386 missing values vor 'Type 2' column\n# dropna=False count nan values.","52839c4c":"# We are going to drop nan (missing) values\ndata1 = data\ndata1[\"Type 2\"].dropna(inplace = True)","412e084f":"assert 1==1","ca202c7f":"assert data['Type 2'].notnull().all()\n# Checks 'Type 2' is notnull() for all().\n# Since we dropped nan values, it returns nothing so the statement is true.","957ee708":"data[\"Type 2\"].fillna('empty', inplace = True)\n# We added 'empty' inplace of missing values so there is no nan value.","92982c9b":"assert data[\"Type 2\"].notnull().all()\n# Checks if there are nan values. Returns nothing because there are no nan values.","ee211d0f":"assert data.columns[1] == 'Name' # returns nothing so is true","6435d161":"assert data.Speed.dtypes == np.float64 # returns nothing so is true","7a5ec378":"country = [\"Spain\", \"France\"]\npopulation = [\"11\", \"12\"]\nlist_label = [\"country\", \"population\"]\nlist_col = [country, population]\nzipped = list(zip(list_label, list_col))\ndata_dict = dict(zipped)\ndfz = pd.DataFrame(data_dict)\ndfz","2101157f":"# We can add new columns to that dataframe\ndfz[\"capital\"] = [\"madrid\", \"paris\"]\ndfz","e22f4656":"# We can broadcast a value to all rows in a column\ndfz[\"income\"] = 0\ndfz","413f6884":"data1 = data.loc[:, [\"Attack\", \"Defense\", \"Speed\"]]\ndata1.plot()","a40280a6":"# make subplots\ndata1.plot(subplots = True)\nplt.show()","d980485c":"# make scatter plots\ndata1.plot(kind = 'scatter', x = \"Attack\", y = 'Defense')\nplt.show()","f04583d9":"# make histogram plot\ndata1.plot(kind='hist', y='Defense', bins=50, range=(0,250), density = True) \n# density: normalizes y-axis\nplt.show()","157270c3":"fig, axes = plt.subplots(nrows=2, ncols=1)\ndata1.plot(kind='hist', y='Defense', bins=50, range=(0,250), density = True, ax=axes[0])\ndata1.plot(kind='hist', y='Defense', bins=50, range=(0,250), density = True, ax=axes[1], cumulative=True)\nplt.savefig('graph.png')\nplt.show()","94a0082d":"data.describe()","42125c3e":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # time_list is a string.We want it to be a datetime object\ndatetime_obj = pd.to_datetime(time_list)\nprint(type(datetime_obj))","5a4f528c":"data2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_obj = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_obj\ndata2 = data2.set_index(\"date\")\ndata2","19395a50":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","37ed08d0":"data2.resample(\"A\").mean()\n# We take the mean(average) of years.","4e54d860":"data2.resample(\"M\").mean()\n# We take the mean of every month in every year.\n# There are NaN values since there are no values for those months.","52393a68":"data2.resample(\"M\").max().interpolate(\"linear\")\n# used .max() instead of .first()\n# .first() causes an error \"Invalid fill method\" for interpolate().","36f08786":"data2.resample(\"M\").mean().interpolate(\"linear\")","86670d94":"data = pd.read_csv('..\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","13c30351":"data = data.set_index(\"#\")\ndata.head()\n# We made \"#\" column index.","f01a6435":"data[\"HP\"][1]","29c7d6a9":"data.HP[1]","74b374b5":"data.loc[1, [\"HP\"]]","7272e3e5":"data[[\"HP\", \"Attack\"]]","aee4926c":"print(type(data[\"HP\"])) # 1 square bracket : series\nprint(type(data[[\"HP\"]])) # 2 square bracket : dataframe","1ef624ab":"data.loc[1:10, \"HP\":\"Defense\"]\n# from row 1 to 10, get columns from \"HP to \"Defense\"","bb76f03b":"data.loc[10:1:-1, \"HP\":\"Defense\"]\n# from row 10 to 1, get columns from \"HP\" to \"Defense\"","1aaccb50":"data.loc[1:10, \"Speed\":]\n# from row 1 to 10, get columns from \"Speed\" to the end.","42151287":"boolean = data.HP > 200 # True when HP>200\ndata[boolean]","d76a3fd0":"first_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","bcf758a4":"data[data.Speed<15]\n# get columns where Speed<15","703d2648":"data.HP[data.Speed<15]\n# from the rows where the Speed<15, get \"HP\" column.","9ddde1a1":"# define a function called div()\n# apply it to \"HP\" column\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","704017ff":"# same thing with lambda function\ndata.HP.apply(lambda n: n\/2)","c63e12d2":"data[\"total_power\"] = data[\"Attack\"] + data[\"Defense\"]\ndata.head()","6ddca64e":"### B. SLICING DATAFRAME","bc237326":"As shown in the plot, there are outliers. ","d09455ac":"# 1. INTRO TO PYTHON\n\n### A. Matplotlib","3369497a":"### C. NESTED FUNCTION\n* Function inside function","884b5b4c":"### B. SCOPE\n* Global variables can be used everywhere.\n* Function variables can only be used in functions.","a8e222b4":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","a9185d9d":"### B. EXPLORATARY DATA ANALYSIS (EDA)\nvalue_counts(): counts the frequency of the condition\noutliers : the value that is extremely higher or lower than the rest of the data\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile Q1\n* 50%: median or second quantile Q2\n* 75%: third quantile Q3\n* max: maximum entry\n* Q1 - Q3 = IQR\n* Q1 - 1.5 * IQR = outlier\n* Q3 + 1.5 * IQR = outlier","7e8e86e9":"### D. STATISTICAL EXPLORATORY DATA ANALYSIS","f30f590f":"### C. VISUAL EXPLORATORY ANALYSIS\n* Plot\n* Subplot\n* Histogram\n* 1. bins\n* 2. range\n* 3. normed\n* 4. cumulative","1beb6464":"### G. ITERATORS\n* Iterable is an object that can return an iterator back.\n* list, strings and dictionaries are iterable.\n* Iterables are generally objects that we can call a loop on them.","72ab7b18":"### B. Dictionaries","be4d215b":"### B. BUILDING DATAFRAMES FROM SCRATCH\n* We can build dataframes ourselves instead of CSV files.\n* 1. We make two 1 column arrays which is called a series.\n* 2. We label the columns of those. So we make another series on which we are going to put our labels.\n* 3. * We put our columns (which are series) together as list_col = [series1, series2] \n* 3. * We zip the label series and the new list together to make another list. (zip is an object.)\n* 3. * list(zip(list_label, list_col))\n* 4. We convert that list into a dictionary.\n* 5. Finally we convert dict to a dataframe.\n","d70dab44":"# 5. MANIPULATING DATAFRAME WITH PANDAS\n### A. INDEXING DATAFRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","7ab49bda":"### F. RESAMPLING PANDAS TIME SERIES\n* Resampling is a method performed over different time intervals. \"M\" = month, \"A\" = year\n* Downsampling : decrease the datetime freq. from daily to weekly or monthly\n* Upsampling   : increase the datetime freq. from monthly to weekly or daily\n* Interpolate  : put values in a time interval with interpolation.","4bc73c3e":"We need to clean the data before we start exploring.\n\nExamples of unclean data\n* Columns names might have upper-lower case letter or space betwwen words.\n* missing data on rows.\n* different language\n* column names might have \".\" which can cause problems","48688c5a":"### G. DATA TYPES","dde214d8":"### D. DEFAULT AND FLEXIBLE VARIABLES\n* Default argument example:\n<br> def (a, b=1):\n        b=1 is default argument if it's not given\n\n* Flexible argument example:\n<br> def(*args):\n        *args can be one or more\n<br>def f(**kwargs):\n        **kwargs is a dictionary","88373f2c":"* single column arrays are called \"series\".\n* Nan : Not a Number\n* dataframe.to_numpy : Return a Numpy representation of the DataFrame.","0754f453":"### C. Pandas\n\nCSV: comma-seperated values dosyalar\u0131n\u0131 almak i\u00e7in\nPandas 2 \u00e7e\u015fit datatype'tan olu\u015fur.\n\n    -Seriler = data[]\n    -Dataframe = data[[]]","967aee1f":"### H. MISSING DATA AND TESTING WITH ASSERT\nThere are couple of thing we can do:\n* leave as it is\n* drop the row with dropna()\n* fill the missing values with fillna()\n* fill the missing values with test statistics with mean\n* Assert statement: check that you can turn on or turn off when you are done with testing the program.","6811b094":"### F. CONCATENATING DATA\n* We can concatenate 2 dataframes into 1.","a375c55d":"### E. LAMBDA FUNCTION\nFaster way of writing function","1b131a48":"### E. INDEXING PANDAS TIME SERIES\n* datetime is an object.\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","c7c9f004":"### C. FILTERING DATAFRAMES","05477488":"* [i+1 for i in num1]: list of comprehension\n* i+1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","382ff53e":"### INDEX OBJECTS AND LABELED DATA","051bffca":"\n### E. While and For Loop","8fb17ed0":"### A. USER DEFINED FUNCTION","18be9eaf":"### TRANSFORMING DATA","7227e4ca":"# 4. PANDAS FOUNDATION\n### A. REVIEW OF PANDAS","a0d111e8":"there are 800-414=386 null objects in 'Type 2' column","3cd286c4":"### F. ANONYMOUS FUNCTION\nIt is like the Lambda function but it can take more than one argument.\n\n* map(func, list): applies that specific function to all items in the list\n                    and returns a list back.","bf487654":"### D. TIDY DATA\nWe tidy the data with melt() func.","f4fc101e":"### H. LIST  COMPREHENSION\n","d4640c47":"### C. VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots : visualize basic statistics like outliers, min\/max or quantiles","d79e3b87":"# 2. PYTHON DATA SCIENCE TOOLBOX","2a1a97f8":"### E. PIVOTING DATA\nReverse of melting"}}