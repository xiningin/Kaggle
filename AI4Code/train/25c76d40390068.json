{"cell_type":{"89e8ae4a":"code","5a6de612":"code","1b3bae56":"code","6654d1f3":"code","63a2a777":"code","eeace258":"code","97369130":"code","178db2cf":"code","0af42c45":"code","e7e676f2":"code","eab67dfe":"code","2bed8cef":"code","bfcd4e5b":"code","bdf23ad6":"code","1db10aed":"code","e2f10c86":"code","d1956a2b":"code","6def9a23":"code","64441586":"code","81679cae":"code","75d3b41a":"code","8b4b374b":"code","873d8a02":"code","101269b9":"code","17b0b60b":"code","5bcc176c":"code","3913a868":"code","1e504358":"code","33aee0ba":"code","ca602328":"code","63c54078":"code","1ceb1de6":"code","7dca1f76":"code","9578e6d5":"code","fe8d5870":"code","f3100518":"code","3c65d75a":"code","0a6439a1":"code","2e966bde":"code","222aeb9a":"code","e567eb88":"code","83c664e6":"code","cdc56230":"code","6ab18b11":"code","8ed0573a":"code","575301c0":"code","1b2096ab":"code","f2c7052c":"code","0a0bdad4":"code","fd77a090":"code","b3f2ba1c":"code","f31174a8":"code","0e9cb638":"code","0ab624ab":"code","cc4a5de1":"code","c08a8868":"code","5931e950":"code","c5f4055b":"code","0f1a8371":"code","36eb74d9":"code","7470982a":"code","c9761196":"code","4a30f290":"code","acb5beb0":"code","30d10a40":"code","3a95bab4":"code","64038596":"code","3338845b":"code","48a65e11":"code","8280fa80":"code","6c681b48":"code","bc4a461c":"code","10d34b8b":"code","c36e8c91":"code","f7a607c2":"code","4044df98":"code","f3c75611":"code","2bc1f448":"code","415a05e4":"code","b960910c":"code","c67028ab":"code","5126d4c6":"code","23b3d25c":"code","c1c8f013":"code","48ad6e67":"code","4549a3be":"markdown","701b56aa":"markdown","2dadeac4":"markdown","52cc1b8b":"markdown","63310657":"markdown","6049d5b1":"markdown","fe02c41e":"markdown","732915fc":"markdown","0ac0038b":"markdown","86fda60c":"markdown","a5e76704":"markdown","6e2c51c6":"markdown","5fe7a85f":"markdown","c751b50c":"markdown","fc0197b9":"markdown","d92767ce":"markdown","cf3659d7":"markdown","e995a1d4":"markdown","8d8aefbb":"markdown","dd183bfc":"markdown","23944edd":"markdown","76188b34":"markdown","67ee1fef":"markdown","087a7747":"markdown","fbe95a57":"markdown","99a96a86":"markdown","9985530b":"markdown","1e026d7a":"markdown","1ed37038":"markdown","e0ed2fd7":"markdown","a7269ecb":"markdown","9e5b6960":"markdown","e7ad640e":"markdown","184bcdec":"markdown","2848cd71":"markdown","2cef5c20":"markdown","dc09971f":"markdown","4699dfe2":"markdown","2f01437a":"markdown","d7ac68c6":"markdown","1515af2f":"markdown"},"source":{"89e8ae4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a6de612":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.decomposition import PCA","1b3bae56":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_squared_log_error, classification_report\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","6654d1f3":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","63a2a777":"train_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","eeace258":"train_df.set_index(\"Id\",inplace=True)\ntest_df.set_index(\"Id\",inplace=True)\ntrain_df[\"data\"] = \"Train\"\ntest_df[\"data\"] = \"Test\"","97369130":"y = train_df[\"SalePrice\"]","178db2cf":"train_df.drop(\"SalePrice\", axis = 1, inplace = True)\nhouse_data = train_df.append(test_df)","0af42c45":"house_data.head()","e7e676f2":"house_data.info()","eab67dfe":"house_data.describe().T","2bed8cef":"house_data.isna().sum().sum()","bfcd4e5b":"house_data.isna().sum()[house_data.isna().sum() > 0].sort_values(ascending = True)","bdf23ad6":"house_data[house_data[\"TotalBsmtSF\"].isna()]","1db10aed":"house_data.loc[2121,[\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinSF1\",\"BsmtFinType2\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"]] = 0","e2f10c86":"house_data[\"SaleType\"].fillna(house_data[\"SaleType\"].mode()[0], inplace = True)","d1956a2b":"house_data[house_data[\"GarageArea\"].isna()]","6def9a23":"house_data.loc[2577,[\"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"GarageCars\", \"GarageArea\", \"GarageQual\", \"GarageCond\"]] = [\"Detchd\",1962,\"Unf\",2.0,400,\"TA\",\"TA\"]","64441586":"house_data[house_data[\"KitchenQual\"].isna()]","81679cae":"house_data[\"KitchenQual\"].fillna(house_data[\"KitchenQual\"].mode()[0], inplace = True)","75d3b41a":"house_data[house_data[\"Exterior1st\"].isna()]","8b4b374b":"house_data[\"Exterior1st\"].fillna(house_data[\"Exterior1st\"].mode()[0], inplace = True)\nhouse_data[\"Exterior2nd\"].fillna(house_data[\"Exterior2nd\"].mode()[0], inplace = True)","873d8a02":"house_data[house_data[\"Electrical\"].isna()]","101269b9":"house_data[\"Electrical\"].fillna(house_data[\"Electrical\"].mode()[0], inplace = True)","17b0b60b":"house_data.loc[house_data[\"TotalBsmtSF\"]<1,[\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"]] = 0\nhouse_data.loc[house_data[\"TotalBsmtSF\"]<1,[\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",]] = 0\nhouse_data.loc[house_data[\"TotalBsmtSF\"]<1,[\"BsmtFullBath\",\"BsmtHalfBath\"]] = 0","5bcc176c":"house_data[\"BsmtFinType2\"].fillna(house_data[\"BsmtFinType2\"].mode()[0], inplace = True)","3913a868":"house_data[\"BsmtQual\"].fillna(house_data[\"BsmtQual\"].mode()[0], inplace = True)","1e504358":"house_data[\"BsmtExposure\"].fillna(house_data[\"BsmtExposure\"].mode()[0], inplace = True)","33aee0ba":"house_data[\"BsmtCond\"].fillna(house_data[\"BsmtCond\"].mode()[0], inplace = True)","ca602328":"house_data[\"Utilities\"].fillna(house_data[\"Utilities\"].mode()[0], inplace = True)","63c54078":"house_data[\"Functional\"].fillna(house_data[\"Functional\"].mode()[0], inplace = True)","1ceb1de6":"# house_data[\"MSZoning\"].fillna(house_data[\"MSZoning\"].mode()[0], inplace = True)\nhouse_data['MSZoning'] = house_data.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))","7dca1f76":"# There is one row with valid value for MasVnrArea and MasVnrType to be null\n# here we will fill the null value with mode of MasVnrType with valid MasVnrArea\nhouse_data.loc[house_data[\"MasVnrType\"].isna() & house_data[\"MasVnrArea\"]!=0, ['MasVnrType']]  = 'BrkFace'","9578e6d5":"house_data.loc[house_data[\"MasVnrType\"].isna(),[\"MasVnrType\"]] = 'None'","fe8d5870":"house_data.loc[house_data[\"MasVnrArea\"].isna(),[\"MasVnrArea\"]] = 0","f3100518":"house_data.loc[house_data[\"GarageType\"].isna(),[\"GarageType\"]] = \"NA\"\nhouse_data.loc[house_data[\"GarageFinish\"].isna(),[\"GarageFinish\"]] = \"NA\"\nhouse_data.loc[house_data[\"GarageQual\"].isna(),[\"GarageQual\"]] = \"NA\"\nhouse_data.loc[house_data[\"GarageCond\"].isna(),[\"GarageCond\"]] = \"NA\"","3c65d75a":"house_data[\"GarageAge\"] = 2021 - house_data[\"GarageYrBlt\"]\nhouse_data.drop(\"GarageYrBlt\", axis = 1, inplace = True)\nhouse_data[\"GarageAge\"].fillna(0,inplace = True)","0a6439a1":"house_data[house_data[\"LotFrontage\"].isna()]","2e966bde":"house_data.loc[house_data[\"Fireplaces\"] == 0 ,[\"FireplaceQu\"]] = \"NA\"\nhouse_data.loc[house_data[\"PoolArea\"] == 0 ,[\"PoolQC\"]] = \"NA\"","222aeb9a":"house_data.loc[house_data[\"Fence\"].isna(),[\"Fence\"]] = \"NA\"\nhouse_data.loc[house_data[\"Alley\"].isna(),[\"Alley\"]] = \"NA\"","e567eb88":"house_data[\"PoolQC\"].fillna(house_data[\"PoolQC\"].mode()[0],inplace=True)","83c664e6":"house_data.loc[house_data[\"MiscFeature\"].isna(),[\"MiscFeature\"]] = \"NA\"\nhouse_data.loc[house_data[\"LotFrontage\"].isna(),[\"LotFrontage\"]] = 0","cdc56230":"house_data[\"PoolQC\"].fillna(house_data[\"PoolQC\"].mode()[0],inplace=True)","6ab18b11":"house_data['TotalSF']=house_data['TotalBsmtSF'] + house_data['1stFlrSF'] + house_data['2ndFlrSF']\n\nhouse_data['Total_sqr_footage'] = (house_data['BsmtFinSF1'] + house_data['BsmtFinSF2'] +\n                                 house_data['1stFlrSF'] + house_data['2ndFlrSF'])\n\nhouse_data['Total_Bathrooms'] = (house_data['FullBath'] + (0.5 * house_data['HalfBath']) +\n                               house_data['BsmtFullBath'] + (0.5 * house_data['BsmtHalfBath']))\n\nhouse_data['Total_porch_sf'] = (house_data['OpenPorchSF'] + house_data['3SsnPorch'] +\n                              house_data['EnclosedPorch'] + house_data['ScreenPorch'] +\n                              house_data['WoodDeckSF'])\n","8ed0573a":"house_data['haspool'] = house_data['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nhouse_data['has2ndfloor'] = house_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nhouse_data['hasgarage'] = house_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nhouse_data['hasbsmt'] = house_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nhouse_data['hasfireplace'] = house_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","575301c0":"house_data = house_data.drop(set(['Fireplaces', 'TotalBsmtSF', 'GarageArea', 'PoolArea', 'Utilities', 'Street', 'PoolQC', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF','BsmtFinSF1', 'BsmtFinSF2',\n                            '1stFlrSF', '2ndFlrSF','OpenPorchSF', '3SsnPorch', 'EnclosedPorch', 'ScreenPorch', 'WoodDeckSF', 'FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath']), axis=1)","1b2096ab":"overfit = []\ntrain_df_temp = house_data[house_data[\"data\"] == \"Train\"]\nfor i in train_df_temp.columns:\n    counts = train_df_temp[i].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(train_df_temp) * 100 > 90:\n        overfit.append(i)\ndel train_df_temp\noverfit","f2c7052c":"# house_data = house_data.drop(['Condition2', 'RoofMatl', 'Heating', 'LowQualFinSF', 'KitchenAbvGr', 'MiscFeature', 'MiscVal', 'haspool', 'hasbsmt'], axis=1)\nhouse_data = house_data.drop(['Alley', 'LandSlope', 'Condition2', 'RoofMatl', 'Heating', 'CentralAir', 'Electrical', 'LowQualFinSF', 'KitchenAbvGr', 'Functional', 'GarageCond', 'PavedDrive',\n 'MiscFeature', 'MiscVal', 'haspool', 'hasgarage', 'hasbsmt'], axis=1)","0a0bdad4":"house_data","fd77a090":"house_data[\"LotShape\"].replace({\"Reg\":3,\"IR1\":2,\"IR2\":1,\"IR3\":0}, inplace = True)\nhouse_data[\"LandContour\"].replace({\"Lvl\":3,\"Bnk\":2,\"HLS\":1,\"Low\":0}, inplace = True)\nhouse_data[\"LotConfig\"].replace({\"FR3\":4,\"FR2\":3,\"CulDSac\":2,\"Corner\":1,\"Inside\":0}, inplace = True)\nhouse_data[\"BldgType\"].replace({\"1Fam\":0,\"2FmCon\":1,\"2fmCon\":1,\"Duplex\":2,\"TwnhsE\":3,\"Twnhs\":4}, inplace = True)\nhouse_data[\"HouseStyle\"].replace({\"1Story\":0,\"1.5Fin\":1,\"1.5Unf\":2,\"2Story\":3,\"2.5Fin\":4,\"2.5Unf\":5,\"SFoyer\":6,\"SLvl\":7}, inplace = True)\nhouse_data[\"ExterQual\"].replace({\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"ExterCond\"].replace({\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"BsmtQual\"].replace({\"NA\":0,\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"BsmtCond\"].replace({\"NA\":0,\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"BsmtExposure\"].replace({\"Gd\":3,\"Av\":2,\"Mn\":1,\"No\":0,\"NA\":0}, inplace = True)\nhouse_data[\"BsmtFinType1\"].replace({\"Unf\":1,\"LwQ\":2,\"Rec\":3,\"BLQ\":4,\"ALQ\":5,\"GLQ\":6,\"NA\":0}, inplace = True)\nhouse_data[\"BsmtFinType2\"].replace({\"Unf\":1,\"LwQ\":2,\"Rec\":3,\"BLQ\":4,\"ALQ\":5,\"GLQ\":6,\"NA\":0}, inplace = True)\nhouse_data[\"HeatingQC\"].replace({\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"KitchenQual\"].replace({\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"FireplaceQu\"].replace({\"Po\":1,\"Fa\":2,\"TA\":3,\"Gd\":4,\"Ex\":5,\"NA\":0}, inplace = True)\nhouse_data[\"GarageFinish\"].replace({\"Fin\":3,\"RFn\":2,\"Unf\":1,\"NA\":0}, inplace = True)\nhouse_data[\"GarageQual\"].replace({\"NA\":0,\"Po\":0,\"Fa\":1,\"TA\":2,\"Gd\":3,\"Ex\":4}, inplace = True)\nhouse_data[\"Fence\"].replace({\"NA\":0,\"MnWw\":1,\"GdWo\":2,\"MnPrv\":3,\"GdPrv\":4}, inplace = True)","b3f2ba1c":"# house_data[[\"MSZoning\",\"Neighborhood\",\"Condition1\",\"RoofStyle\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"Foundation\",\"Electrical\",\"GarageType\",\"SaleType\",\"SaleCondition\"]].astype(\"category\")\nhouse_data[[\"MSZoning\",\"Neighborhood\",\"Condition1\",\"RoofStyle\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"Foundation\",\"GarageType\",\"SaleType\",\"SaleCondition\"]].astype(\"category\")","f31174a8":"LE = LabelEncoder()\nhouse_data[\"MSZoning\"] = LE.fit_transform(house_data[\"MSZoning\"])\nhouse_data[\"Neighborhood\"] = LE.fit_transform(house_data[\"Neighborhood\"])\nhouse_data[\"Condition1\"] = LE.fit_transform(house_data[\"Condition1\"])\nhouse_data[\"RoofStyle\"] = LE.fit_transform(house_data[\"RoofStyle\"])\nhouse_data[\"Exterior1st\"] = LE.fit_transform(house_data[\"Exterior1st\"])\nhouse_data[\"Exterior2nd\"] = LE.fit_transform(house_data[\"Exterior2nd\"])\nhouse_data[\"MasVnrType\"] = LE.fit_transform(house_data[\"MasVnrType\"])\nhouse_data[\"Foundation\"] = LE.fit_transform(house_data[\"Foundation\"])\n# house_data[\"Electrical\"] = LE.fit_transform(house_data[\"Electrical\"])\nhouse_data[\"GarageType\"] = LE.fit_transform(house_data[\"GarageType\"])\nhouse_data[\"SaleType\"] = LE.fit_transform(house_data[\"SaleType\"])\nhouse_data[\"SaleCondition\"] = LE.fit_transform(house_data[\"SaleCondition\"])","0e9cb638":"house_data.info()","0ab624ab":"# plt.figure(figsize=(100,75))\n# df=house_data.corr()\n# sns.heatmap(df,annot=True)","cc4a5de1":"X = house_data[house_data[\"data\"] == \"Train\"]\ntest_df = house_data[house_data[\"data\"] == \"Test\"]\nX.drop(\"data\",axis=1,inplace=True)\ntest_df.drop(\"data\",axis=1,inplace=True)","c08a8868":"train_df = house_data[house_data[\"data\"] == \"Train\"]\ntrain_df[\"Price\"] = y\ntrain_df.drop(\"data\",axis=1, inplace=True)","5931e950":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","c5f4055b":"Lin_Reg = LinearRegression()\nLin_Reg.fit(X_train, y_train)\ny_pred = Lin_Reg.predict(X_test)\ny_train_pred = Lin_Reg.predict(X_train)","0f1a8371":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\n# print(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\n# print(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_pred,y_test)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","36eb74d9":"# Ridge_Reg = Ridge()\n# hyperparameters = {\"alpha\" : np.concatenate((np.arange(0,1,0.01),(np.arange(1,25))))}\n# Ridge_GS = GridSearchCV(Ridge_Reg,hyperparameters)\n# Ridge_GS.fit(X_train, y_train)\n# y_pred = Ridge_GS.predict(X_test)\n# y_train_pred = Ridge_GS.predict(X_train)\n# Ridge_GS.best_params_\n# # {'alpha': 24.0}","7470982a":"Ridge_Reg = Ridge(alpha=24)\nRidge_Reg.fit(X_train, y_train)\ny_pred = Ridge_Reg.predict(X_test)\ny_train_pred = Ridge_Reg.predict(X_train)","c9761196":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\n# print(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\n# print(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","4a30f290":"# Lasso_Reg = Lasso()\n# hyperparameters = {\"alpha\" : np.concatenate((np.arange(0,1,0.01),(np.arange(1,25))))}\n# Lasso_GS = GridSearchCV(Lasso_Reg,hyperparameters)\n# Lasso_GS.fit(X_train, y_train)\n# y_pred = Lasso_GS.predict(X_test)\n# y_train_pred = Lasso_GS.predict(X_train)\n# Ridge_GS.best_params_\n# # {'alpha': 24.0}","acb5beb0":"Lasso_Reg = Lasso(alpha = 24.0)\nLasso_Reg.fit(X_train, y_train)\ny_pred = Lasso_Reg.predict(X_test)\ny_train_pred = Lasso_Reg.predict(X_train)","30d10a40":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\n# print(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\n# print(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","3a95bab4":"std_scaler = StandardScaler()\nX_scaled = pd.DataFrame (data = std_scaler.fit_transform(X), columns = X.columns)\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)","64038596":"# KNN_Reg = KNeighborsRegressor()\n# hyperparameters = {\"n_neighbors\":np.arange(2,20)}\n# KNN_GS = GridSearchCV(KNN_Reg,hyperparameters)\n# KNN_GS.fit(X_train, y_train)\n# y_pred = KNN_GS.predict(X_test)\n# y_train_pred = KNN_GS.predict(X_train)\n# KNN_GS.best_params_\n# # {'n_neighbors': 7}","3338845b":"KNN_Reg = KNeighborsRegressor(n_neighbors = 7)\nKNN_Reg.fit(X_train, y_train)\ny_pred = KNN_Reg.predict(X_test)\ny_train_pred = KNN_Reg.predict(X_train)\n\nsns.scatterplot(x=y_train,y=y_train_pred)","48a65e11":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\nprint(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\nprint(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","8280fa80":"# DT_reg = DecisionTreeRegressor()\n# hyperparameters = {\"max_depth\":np.arange(2,12), \"min_samples_split\":np.arange(2,20), \"min_samples_leaf\":np.arange(1,20)}\n# DT_GS = GridSearchCV(DT_reg,hyperparameters)\n# DT_GS.fit(X_train, y_train)\n# y_pred = DT_GS.predict(X_test)\n# y_train_pred = DT_GS.predict(X_train)\n# DT_GS.best_params_\n# # {'max_depth': 10, 'min_samples_leaf': 5, 'min_samples_split': 19}","6c681b48":"DT_reg = DecisionTreeRegressor(max_depth= 10, min_samples_leaf= 5, min_samples_split= 19)\nDT_reg.fit(X_train, y_train)\ny_pred = DT_reg.predict(X_test)\ny_train_pred = DT_reg.predict(X_train)","bc4a461c":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\nprint(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\nprint(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","10d34b8b":"# bad_cols = ['TotRmsAbvGrd', 'SaleCondition', 'HouseAgeAftRemd', 'Fence', 'LotFrontage', 'ExterCond', 'GarageType', 'CentralAir', 'Total_porch_sf', 'BsmtCond', 'GarageFinish', 'BsmtUnfSF',\n#             'Exterior1st', 'MSSubClass', 'GarageQual', 'MasVnrArea', 'GarageAge', 'FireplaceQu', 'Exterior2nd',]# 'hasfireplace', 'HouseStyle', 'MoSold', 'BsmtFinType2', 'Alley', 'SaleType',\n#             #'BsmtExposure', 'LandContour', 'LotShape', 'GrLivArea', 'YrSold', 'ExterQual', 'Foundation', 'has2ndfloor', 'hasgarage']\n\n# X_train, X_test, y_train, y_test = train_test_split(X.drop(bad_cols,axis=1), y, test_size=0.3, random_state=42)\n","c36e8c91":"bad_cols = ['SaleCondition', 'MasVnrArea', 'Fence', 'YrSold', 'BsmtExposure', 'LotFrontage', 'MasVnrType', 'FireplaceQu', 'Exterior1st', 'ExterCond', 'Condition1', 'GarageAge',\n            'BsmtUnfSF', 'GarageFinish', 'Foundation', 'MSZoning', 'LotArea', 'LotShape', 'hasfireplace', 'has2ndfloor', 'ExterQual', 'HouseStyle', 'Exterior2nd', 'TotRmsAbvGrd',\n            'YearRemodAdd', 'BsmtFinType2', 'MoSold', 'BsmtCond', 'RoofStyle', 'LandContour', 'Total_Bathrooms', 'Total_porch_sf', 'LotConfig']\n\nX_train, X_test, y_train, y_test = train_test_split(X.drop(bad_cols,axis=1), y, test_size=0.3, random_state=42)\n","f7a607c2":"RF_Reg = RandomForestRegressor(random_state=42)\nRF_Reg.fit(X_train, y_train)\ny_pred = RF_Reg.predict(X_test)\ny_train_pred = RF_Reg.predict(X_train)\nr2t = r2_score(y_pred,y_test)\nn,p = X_train.shape\nAdj_r2t = 1-(1-r2t)*(n-1)\/(n-p-1)\nprint(r2t,Adj_r2t)","4044df98":"df = pd.DataFrame({\"Col\":X.drop(bad_cols,axis=1).columns,\"Imp\":RF_Reg.feature_importances_})\ndf.sort_values(by='Imp') ","f3c75611":"# Training\nprint(\"Training r2_score is : \",r2_score(y_train_pred,y_train))\nprint(\"Training mean squared error is : \",mean_squared_error(y_train_pred,y_train))\nprint(\"Training mean squared log error is : \",mean_squared_log_error(y_train_pred,y_train))\nprint(\"Training root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n#Test\nprint(\"Testing r2_score is : \",r2_score(y_pred,y_test))\nprint(\"Testing mean squared error is : \",mean_squared_error(y_pred,y_test))\nprint(\"Testing mean squared log error is : \",mean_squared_log_error(y_pred,y_test))\nprint(\"Testing root mean squared error is : \",np.sqrt(mean_squared_error(y_train_pred,y_train)))\n\nsns.scatterplot(x=y_train,y=y_train_pred)","2bc1f448":"# scalar = StandardScaler()\n# X_Scaled = pd.DataFrame(scalar.fit_transform(X), columns = X.columns)\n# training_r2 = []\n# testing_r2 = []\n# mse_test = []\n# for i in range(2,79):\n#     pca = PCA(n_components=i)\n#     X_pca = pd.DataFrame(pca.fit_transform(X_Scaled))\n#     X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, random_state=42)\n#     RF_Reg = RandomForestRegressor()\n#     RF_Reg.fit(X_train, y_train)\n#     y_pred = RF_Reg.predict(X_test)\n#     y_train_pred = RF_Reg.predict(X_train)\n#     training_r2.append(r2_score(y_train_pred,y_train))\n#     r2t = r2_score(y_pred,y_test)\n#     testing_r2.append(r2t)\n#     mse_test.append(mean_squared_error(y_pred,y_test))\n#     print(i,r2t)","415a05e4":"# bad_cols = ['SaleCondition', 'MasVnrArea', 'Fence', 'YrSold', 'BsmtExposure', 'LotFrontage', 'MasVnrType', 'FireplaceQu', 'Exterior1st', 'ExterCond', 'Condition1', 'GarageAge',\n#             'BsmtUnfSF', 'GarageFinish', 'Foundation', 'MSZoning', 'LotArea', 'LotShape', 'hasfireplace', 'has2ndfloor', 'ExterQual', 'HouseStyle', 'Exterior2nd', 'TotRmsAbvGrd',\n#             'YearRemodAdd', 'BsmtFinType2', 'MoSold', 'BsmtCond', 'RoofStyle', 'LandContour', 'Total_Bathrooms', 'Total_porch_sf', 'LotConfig']\n# x = X.drop(bad_cols,axis=1)\n# adj_r2t = 0.8659475449080013\n# for iters in range(10):\n#     testing_ar2 = []\n#     for i in x.columns:\n#         X_train, X_test, y_train, y_test = train_test_split(x.drop(i,axis=1), y, test_size=0.3, random_state=42)\n#         RF_Reg = RandomForestRegressor(random_state=42)\n#         RF_Reg.fit(X_train, y_train)\n#         y_pred = RF_Reg.predict(X_test)\n#         y_train_pred = RF_Reg.predict(X_train)\n#         r2te = r2_score(y_pred,y_test)\n#         n,p = X_train.shape\n#         Adj_r2te = 1-(1-r2te)*(n-1)\/(n-p-1)\n#         testing_ar2.append(Adj_r2te)\n#     df = pd.DataFrame({\"Col\" : x.columns,\"Test_AdjR2\":testing_ar2})\n#     df = df.sort_values(by=['Test_AdjR2'],ascending=False)\n#     bad_cols.append(df.iloc[0,0])\n#     print(\"Wrost column is at iter\",iters+1,\"is\",df.iloc[0,0])\n#     if adj_r2t < df.iloc[0,1]:\n#         col_to_del = df.iloc[0,0]\n#         print(\"Column Deleted :\",col_to_del, \". AR2 after deleting:\", df.iloc[0,1])\n#         adj_r2t = df.iloc[0,1]\n#         x.drop(col_to_del,axis=1,inplace=True)\n#     elif adj_r2t - df.iloc[0,1] < 0.005:\n#         col_to_del = df.iloc[0,0]\n#         print(\"Column Deleted :\",col_to_del, \". AR2 after deleting:\", df.iloc[0,1])\n#         print(\"Accuracy lost is:\",adj_r2t - df.iloc[0,1])\n#         adj_r2t = df.iloc[0,1]\n#         x.drop(col_to_del,axis=1,inplace=True)\n# print(bad_cols)","b960910c":"# ['SaleCondition', 'MasVnrArea', 'Fence', 'YrSold', 'BsmtExposure', 'LotFrontage', 'MasVnrType', 'FireplaceQu', 'Exterior1st', 'ExterCond', 'Condition1', 'GarageAge',\n# 'BsmtUnfSF', 'GarageFinish', 'Foundation', 'MSZoning', 'LotArea', 'LotShape', 'hasfireplace', 'has2ndfloor', 'ExterQual', 'HouseStyle', 'Exterior2nd', 'TotRmsAbvGrd',\n# 'YearRemodAdd', 'BsmtFinType2', 'MoSold', 'BsmtCond', 'RoofStyle', 'LandContour', 'Total_Bathrooms', 'Total_porch_sf', 'LotConfig', 'GarageType', 'SaleType', 'BsmtFinType1',\n# 'BsmtQual', 'GarageQual', 'BedroomAbvGr', 'BldgType', 'KitchenQual']","c67028ab":"# df.sort_values(by = \"Test_AdjR2\")","5126d4c6":"# from catboost import CatBoostRegressor\n# from xgboost import XGBRegressor\n\n# model = CatBoostRegressor(verbose=False)\n\n# model.fit(X_train,y_train)\n# model.score(X_train,y_train)","23b3d25c":"# y_pred = model.predict(X_test)\n# pred = model.predict(test_df)\n# pred","c1c8f013":"sub_df = pd.DataFrame()\ntest_df.drop(bad_cols,axis=1,inplace=True)\nsub_df[\"Id\"] = test_df.index\nsub_df[\"SalePrice\"] = RF_Reg.predict(test_df)\nsub_df.to_csv('submission.csv', index=False)","48ad6e67":"# psort_valuesnstall pycaret\n# from pycaret.regression import *\n# s = setup(train_df, target = 'Price')\n# best_model = compare_models(sort='R2')","4549a3be":"# 4. KNN Regressor","701b56aa":"### 5. Exterior1st & Exterior2nd Column","2dadeac4":"##### Total missing values are: 13965","52cc1b8b":"##### There is only one missing value in \"Electrical\" column. \n##### there is a Electricity as pe Utility Column hence house must have electrical connections.\n##### We will fill the data with mode of the column","63310657":"# Feature Generation","6049d5b1":"### 9. Functional Column","fe02c41e":"# 5. Decision Tree Regressor","732915fc":"## Final DataFrame","0ac0038b":"# 2. Rigde Regression Model Building","86fda60c":"### 3. GarageArea Column","a5e76704":"# Submission","6e2c51c6":"### 2. SaleType Column","5fe7a85f":"##### There is only one values missing in basement area\n##### Also check below, All the values of this house related to basement are empty.\n##### Hence it is reasonable to assume that there is not basement to this house.\n##### We can set all basement related features to zero","c751b50c":"##### any house with TotalBsmtSF or Total square feet of basement area zero, doesnt have any basement at all\n##### we should mark other columns related to basement with appropriate value as well","fc0197b9":"### 1. TotalBsmtSF  Column\n##### TotalBsmtSF: Total square feet of basement area","d92767ce":"### 4. KitchenQual Column","cf3659d7":"# pycaret (Rough Work)","e995a1d4":"# Data Gathering","8d8aefbb":"# EDA","dd183bfc":"### 13. LotFrontage column","23944edd":"### 12. Garage Related Columns","76188b34":"### 11. MasVnrArea & MasVnrType Column\n##### MasVnrType: Masonry veneer type\n##### MasVnrArea: Masonry veneer area in square feet","67ee1fef":"##### Functional: Home functionality (Assume typical unless deductions are warranted)\n##### we will just assume missing data to be typ","087a7747":"### 8. Utilities Column","fbe95a57":"# 6. Random Forest","99a96a86":"# 3. Lasso Regression","9985530b":"# Dimensionality reduction using PCA","1e026d7a":"### 6. Electrical Column","1ed37038":"## EDA - Missing Values","e0ed2fd7":"## EDA - Encoding","a7269ecb":"# Splitting data to train and test datasets","9e5b6960":"##### Lets combine Train and test datasets for EDA and then we will split them later before training model","e7ad640e":"# Dimensionality reduction using Backward Feature Elimination.","184bcdec":"# 7. Catboost","2848cd71":"### 14. Other column","2cef5c20":"##### at one row BsmtFinType2 is missing but there is a BsmtFinSF2 available.\n##### we can fill the missing value with mode of the column","dc09971f":"# 1. Linear Regression Model Building","4699dfe2":"##### There is only one values missing in Garage area\n##### Also check above, All the values of this house related to Garage are empty apart from GarageType.","2f01437a":"### 10. MSZoning Column\n##### MSZoning: Identifies the general zoning classification of the sale.","d7ac68c6":"##### There is a kitchen but the quality is not marked. we can replace numm with mode of that column.","1515af2f":"### 7. Basement related Columns"}}