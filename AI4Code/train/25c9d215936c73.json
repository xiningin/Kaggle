{"cell_type":{"8ba8848d":"code","67f91fbd":"code","14f9bb85":"code","f9995f51":"code","05bf9d1d":"code","73b7d02d":"code","cf4bc2b0":"code","4c8fa4f7":"code","94c57785":"code","85d20c0b":"code","a65c21c7":"code","23c371a5":"code","e44d8c92":"code","a35d574d":"code","29d1adc4":"code","f38e21c7":"code","6df8d33e":"code","e7a44749":"code","15b90457":"code","9ec300c8":"code","704dd311":"code","cae410dc":"code","bf1bc11e":"code","97128a87":"code","8a1f3860":"code","9a73ba9a":"code","20ae3e56":"code","9acd0781":"code","a2e451a9":"code","5e7d2498":"code","46afe2ff":"code","1b0191d2":"code","2db2b7c8":"code","1fb53f8f":"code","c1dbdde5":"markdown","36654c90":"markdown","f5ea2733":"markdown","c53e392d":"markdown","2eefa068":"markdown","21c2ccec":"markdown","d43f3526":"markdown","8c7a903a":"markdown","00ff63ff":"markdown","09352cc5":"markdown"},"source":{"8ba8848d":"#imports\n%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport geopy as gp\nfrom geopy.distance import great_circle\nimport matplotlib.pyplot as plt\nfrom pandas import Series, DataFrame\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nfrom scipy import stats, integrate\nimport seaborn as sns","67f91fbd":"train_df = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows = 1000000)","14f9bb85":"train_df.info()","f9995f51":"train_df.head()","05bf9d1d":"train_df.describe()","73b7d02d":"def clean_passenger(data):\n    data = data.drop(data[data[\"passenger_count\"] > 10].index , axis = 0)\n    return data","cf4bc2b0":"def clean_location(data):\n    data = data.drop( data[(data['pickup_latitude'].isnull()) | (data['pickup_longitude'].isnull()) ].index , axis = 0)\n    data = data.drop( data[(data['pickup_latitude'] == 0) | (data['pickup_longitude'] == 0) ].index , axis = 0)\n    data = data.drop( data[(data['dropoff_latitude'].isnull()) | (data['dropoff_longitude'].isnull()) ].index , axis = 0)\n    data = data.drop( data[(data['dropoff_latitude'] == 0) | (data['dropoff_latitude'] == 0) ].index , axis = 0)\n    data = data.drop( (data[ (data['pickup_latitude'] < -90)  | (data['pickup_latitude'] > 90) ]).index , axis = 0  )\n    data = data.drop( (data[ (data['dropoff_latitude'] < -90)  | (data['dropoff_latitude'] > 90) ]).index , axis = 0  ) \n    data = data.drop( data[(data['dropoff_latitude'] == data['pickup_latitude']) & (data['dropoff_longitude'] == data['pickup_longitude']) ].index , axis = 0)\n    return data","4c8fa4f7":"def calc_distance(row):\n    coords_1 = (row['pickup_latitude'], row['pickup_longitude'])\n    coords_2 = (row['dropoff_latitude'], row['dropoff_longitude'])\n    return great_circle(coords_1, coords_2).miles","94c57785":"def calc_tariff_per_mile(data):\n    data['distance'] = data.apply(calc_distance , axis=1)\n    data['tariff_per_mile'] = (data['fare_amount'] - 2.5) \/ data['distance']\n    return data","85d20c0b":"def parse_date(data):\n    data['pickup_datetime']  = pd.to_datetime(data['pickup_datetime'])\n    data['year'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).year)\n    data['month'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).month)\n    data['week_day'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).weekday)\n    data['hour'] = data['pickup_datetime'].apply(lambda t : pd.to_datetime(t).hour)\n    return data\n    ","a65c21c7":"# bounding_box definition ( west_long , east_long , south_lat , north_lat )\nNYC_bounding_box = (-74.26 , -73.71 ,  40.43 , 40.95)\nJFK_bounding_box = (-73.86 , -73.75 ,  40.61 , 40.66)\nLGA_bounding_box = (-73.91 , -73.82 ,  40.75 , 40.79)\nEWR_bounding_box = (-74.19 , -74.15 , 40.67 , 40.70)","23c371a5":"def check_boundary_box(boundary_box , longtitude , latitude ):\n     if ( (boundary_box[0] < longtitude) & (longtitude < boundary_box[1]) & \n          (boundary_box[2] < latitude) & (latitude < boundary_box[3]) ):      \n        return True\n     else:\n        return False ","e44d8c92":"def get_trip_type(trip_row):\n    if (check_boundary_box(JFK_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) |\n        check_boundary_box(LGA_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) |\n        check_boundary_box(EWR_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] )) :\n        \n        return 'airport'\n    \n    elif (check_boundary_box(JFK_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] ) |\n          check_boundary_box(LGA_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] ) |\n          check_boundary_box(EWR_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] )) :\n            \n        return 'airport'\n    \n    elif (check_boundary_box(NYC_bounding_box ,  trip_row['pickup_longitude'] , trip_row['pickup_latitude'] ) &\n          check_boundary_box(NYC_bounding_box ,  trip_row['dropoff_longitude'] , trip_row['dropoff_latitude'] )):\n        \n         return 'nyc'\n    else:\n         return 'out'\n      \n","a35d574d":"def classify_nyc_trip(data):\n    data['trip_type'] = data.apply(get_trip_type , axis=1)\n    return data","29d1adc4":"train_df = train_df.drop(train_df[train_df['fare_amount'] < 2.5 ].index,axis = 0)\ntrain_df.shape","f38e21c7":"train_df = clean_passenger(train_df)\ntrain_df.shape","6df8d33e":"train_df = clean_location(train_df)\ntrain_df.shape","e7a44749":"train_df = calc_tariff_per_mile(train_df)\ntrain_df.shape","15b90457":"train_df = parse_date(train_df)\ntrain_df.shape","9ec300c8":"train_df = classify_nyc_trip(train_df)\ntrain_df.shape","704dd311":"train_df.info()","cae410dc":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Fare Amount Distribution')\nsns.distplot(train_df['fare_amount'] , ax = ax[0] )\nsns.distplot(np.log(train_df['fare_amount']) , ax = ax[1])","bf1bc11e":"train_df.groupby('passenger_count')['fare_amount'].agg(['mean', 'std', 'count'])","97128a87":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given Passenger Count ')\nsns.catplot(x=\"passenger_count\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] )\nfor pc , grouped in train_df.groupby('passenger_count'):\n    sns.kdeplot( (grouped['fare_amount']) , label = f'{pc} passengers' , ax = ax[1])\n\n","8a1f3860":"train_df.groupby('year')['fare_amount'].agg(['mean', 'std', 'count'])","9a73ba9a":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given Year ')\nsns.catplot(x=\"year\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] );\nfor year , grouped in train_df.groupby('year'):\n    sns.kdeplot( np.log(grouped['fare_amount']) , label = f'{year} year' , ax = ax[1]);","20ae3e56":"train_df.groupby('month')['fare_amount'].agg(['mean', 'std', 'count'])","9acd0781":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given month ')\nsns.catplot(x=\"month\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] );\nfor month , grouped in train_df.groupby('month'):\n    sns.kdeplot( np.log(grouped['fare_amount']) , label = f'{month} month' , ax = ax[1]);","a2e451a9":"train_df.groupby(['week_day'])['fare_amount'].agg(['mean', 'std', 'count'])","5e7d2498":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given Week Day ')\nsns.catplot(x=\"week_day\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] );\nfor wd , grouped in train_df.groupby('week_day'):\n    sns.kdeplot( np.log(grouped['fare_amount']) , label = f'{wd} Week Day' , ax = ax[1]);","46afe2ff":"train_df.groupby(['hour'])['fare_amount'].agg(['mean', 'std', 'count'])","1b0191d2":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given Hour')\nsns.catplot(x=\"hour\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] );\nfor h , grouped in train_df.groupby('hour'):\n    sns.kdeplot( np.log(grouped['fare_amount']) , label = f'{h} hour' , ax = ax[1]);","2db2b7c8":"train_df.groupby(['trip_type'])['fare_amount'].agg(['mean', 'std', 'count'])","1fb53f8f":"fig, ax = plt.subplots(1,2 , figsize=(18,5))\nfig.suptitle('Conditional Fare Amount Distribution given Trip Type')\nsns.catplot(x=\"trip_type\", y=\"fare_amount\" , kind=\"bar\" , data=train_df , ax = ax[0] );\nfor tt , grouped in train_df.groupby('trip_type'):\n    sns.kdeplot( np.log(grouped['fare_amount']) , label = f'{tt} Trip Type' , ax = ax[1]);","c1dbdde5":"As we can deduce there is a strong relation between trip type (airport or within NYC) and fare amount","36654c90":"Now we will discuss pickup time (trip time) analysis via study conditional distribution for fare amount given year , month , week day and hour","f5ea2733":"We will try to study fare amount distribution  ","c53e392d":"classify trip to 3 category \n1. To or From airport\n2. In Newyork city\n3. Out Newyork city","2eefa068":"calculate distance and tarrif per mile","21c2ccec":"We can assume now there is a linear relation between fare amount and year of the trip","d43f3526":"based on https:\/\/www1.nyc.gov\/site\/tlc\/passengers\/taxi-fare.page\nwe can assume fare amount depneds on the following variables \ndistance , trip hour , weekday , destination city , to or from airport ","8c7a903a":"Discuss relation between fare amount and passenger count via fare amount distribution given passenger count","00ff63ff":"We can assume there is a relation between fare amount and passenger count since if there is no passenger such as a trip for transporting goods it will be less than mean of fare amount","09352cc5":"generate 4 features from pickup date (year,month,weekday and hour)"}}