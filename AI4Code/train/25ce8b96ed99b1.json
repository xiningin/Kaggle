{"cell_type":{"9744d9ed":"code","c4beb12e":"code","83ce2ec9":"code","3e5fbd6a":"code","7bb1c973":"code","e262676e":"code","56ad5b72":"code","c45ae6a0":"code","119b1428":"code","9af55963":"code","a4b50dec":"code","16d05ac7":"code","acdb173e":"code","048dff24":"code","99a112fd":"code","8c52cba4":"code","68c9aabb":"code","108013f9":"code","0747b69a":"code","0d8a850b":"code","98ffbbc9":"code","ecb68d5d":"code","32dd2d88":"code","88a2b8af":"code","5cc7232c":"code","eb1f1271":"code","433e1391":"code","954cdd6c":"code","21d04693":"code","4946bc34":"code","20ac5c0a":"code","620d8c49":"code","0b3b4d12":"code","bf2c578e":"code","b35edc59":"code","626622cc":"code","5b909a28":"code","676dad9c":"code","c6be269f":"code","e16b3e72":"code","08867e7c":"code","696ed51b":"code","22e3cd3b":"code","1d0dc7cc":"code","b21fd881":"code","a16a0e7a":"code","4f0363ba":"code","07ecec89":"code","6d53ecba":"code","a1cc72ee":"code","bbb994a6":"code","589e8aee":"code","313935bb":"code","00642ff4":"code","ae96e6e5":"code","168c838a":"code","0b73476a":"code","bbfebc4e":"code","e2080229":"code","1155dda9":"code","f9598ecc":"code","8be804fd":"code","41746d00":"code","50d36acb":"code","994259cd":"code","8c3bb954":"code","c1d266d5":"code","6e6e74ed":"code","e73785cc":"code","18cf8c72":"code","5317220c":"code","c9e7391e":"code","39ac3d74":"code","6027b823":"code","a612a3eb":"code","95936df4":"code","fa4ff090":"code","960307b1":"code","14fcfb52":"code","b733ec44":"code","7162c956":"code","00eba5cd":"code","d82db84d":"code","ec26ef5b":"code","f38f3443":"code","d4293f57":"code","ceaeed7d":"code","d785f141":"code","c90ab42f":"code","bf0f48f2":"code","cd1ed4e4":"code","2dab28f6":"code","eed3349e":"code","9aeaeae0":"code","95c98cb8":"code","add1ef74":"code","805f27d3":"code","3d4ac7ee":"code","07907c6d":"code","04738933":"code","cbaa48ca":"code","a4af37fc":"code","58d0d274":"code","e0821963":"code","3cf29fe4":"code","0cbff64c":"code","2003b37a":"code","f77d36c6":"code","898d7350":"code","38651ca0":"code","c5e0d459":"code","3caf8610":"code","e6b7837b":"code","e3b1dcac":"code","a3354ff0":"code","37e7a431":"code","20da54e2":"code","20d091ad":"code","e1b15911":"code","f724b832":"code","79bcfbb3":"code","ad0b59a4":"code","0d8cc52a":"code","ac642d45":"code","c0c7a4e2":"code","00b9721c":"code","cff80c7d":"code","6d8f0146":"code","b6e4e3ae":"code","132e4a33":"code","6e419978":"code","aa07b8c4":"code","d2024318":"code","d4be97a8":"code","551d3d86":"code","d5674476":"code","f2f30741":"code","7fb81d58":"code","37edfbc2":"code","ea8feb1d":"code","85607611":"code","143e815d":"code","db913a8a":"code","40e1f8e2":"code","92b3235f":"code","c4cf7b8a":"code","53723915":"code","05a8fbd5":"code","1518f1e1":"code","96c2d3a2":"code","b7347a60":"code","03a16071":"code","a159f4d9":"code","03b069b2":"code","c8400944":"code","599110f4":"code","1d188678":"code","415a8194":"code","7e7e87b7":"code","33b8e849":"code","acad1248":"code","9b0bae05":"code","414b99e4":"code","3c54cf64":"code","023ebc7a":"code","9206ede7":"code","3430bc12":"code","94bdc203":"code","e351a70e":"code","dfc63ede":"code","afcbd549":"code","e4787e2f":"code","6a7f0f7a":"code","073d92ee":"code","e91b9a10":"code","de550e60":"code","5d4d7264":"code","3800f244":"code","fe5a12bc":"code","33579398":"code","14212219":"code","1923bcb3":"code","0d3cd644":"code","e1b1c579":"code","d856f511":"code","a48e2dbb":"code","602ab7a5":"code","99b8ef0e":"code","184d322c":"code","84186ff1":"code","713dc49a":"code","9b8f203b":"code","164bcc4d":"code","9e0b84c7":"code","29ca1828":"code","95b7593e":"code","36d18344":"code","1594d2ac":"code","d5db6048":"code","4f3cdc2f":"code","5284829a":"code","ec0aa956":"code","4fe5292b":"code","ca940687":"code","7725a091":"code","111b4f2c":"code","616b61d8":"code","5bc11cd7":"code","3548e7e4":"code","92650827":"code","7502f1c2":"code","065ddb91":"code","f954f657":"code","55759d47":"code","3430fef4":"code","6be34f41":"code","d8c59157":"code","9ab2371a":"code","2eaf7fd6":"code","2165c488":"code","a7428f2d":"code","ed45c78f":"code","db224241":"markdown","8fa507fa":"markdown","fd353ac6":"markdown","add39053":"markdown","c15727f2":"markdown","d28698dd":"markdown","8bd4436e":"markdown","e8131ea5":"markdown","e2e49813":"markdown","2e2a920d":"markdown","ea0c212f":"markdown","193a0a04":"markdown","c939ec61":"markdown","ca731236":"markdown","071bc359":"markdown","54e6435e":"markdown","172e6d8e":"markdown","4f24b04a":"markdown","a3ef90e6":"markdown","10efb7d9":"markdown","d5c59f4c":"markdown","42ebfd2f":"markdown","04beceab":"markdown","e54ec0ec":"markdown","1443f57d":"markdown","0e55dec7":"markdown","526eb37a":"markdown","f1b59d1f":"markdown","d9374bda":"markdown","25599d64":"markdown","06f7f967":"markdown","e759d0d9":"markdown","3c566ce3":"markdown","85b360dc":"markdown","284f571d":"markdown","b0da0e31":"markdown","909ed386":"markdown","1e84682b":"markdown","19da7c51":"markdown","6096aff2":"markdown","1d923d88":"markdown","b77aa9ce":"markdown","4b8461ad":"markdown","f3454b09":"markdown","e1667a72":"markdown","8b548f90":"markdown","676c19fd":"markdown","30534987":"markdown","68bc893b":"markdown","0be7d43c":"markdown","c864bc56":"markdown","b51d487c":"markdown","ceed78fc":"markdown","f494680c":"markdown","7614c741":"markdown","09e2099e":"markdown","145ac4f9":"markdown","c40b6327":"markdown","644b1e61":"markdown","bd24863b":"markdown","c87e0a79":"markdown","caa67ecd":"markdown","09ef1d6a":"markdown","2fbe20ce":"markdown","bbea42c6":"markdown","576651e2":"markdown","8d363647":"markdown","8e218b50":"markdown","eaef8050":"markdown","e630bc21":"markdown","0bf07baf":"markdown","9ddb1697":"markdown","7d1b1e53":"markdown","74339499":"markdown","ce3b6b53":"markdown"},"source":{"9744d9ed":"# Libraries\n\nimport numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sas\nimport xgboost as xgb\n%matplotlib inline\nplt.style.use('ggplot')\nfrom wordcloud import WordCloud\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nstop = set(stopwords.words('english'))\nimport os\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport socket\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport time\nimport warnings\nwarnings.filterwarnings(\"ignore\")#\u5ffd\u7565\u6389\u666e\u901a\u7684warning\nprint(os.listdir(\"..\/input\"))","c4beb12e":"train=pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv',index_col=0)\ntest=pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv',index_col=0)","83ce2ec9":"# trainAdditionalFeatures = pd.read_csv('..\/input\/feature-2\/TrainAdditionalFeatures.csv')[['imdb_id','popularity2','rating']]\n# testAdditionalFeatures = pd.read_csv('..\/input\/feature-2\/TestAdditionalFeatures.csv')[['imdb_id','popularity2','rating']]\n\n# train = pd.merge(train, trainAdditionalFeatures, how='left', on=['imdb_id'])\n# test = pd.merge(test, testAdditionalFeatures, how='left', on=['imdb_id'])\n# train['id']=train.index+1\n# test['id']=test.index+1","3e5fbd6a":"# release_dates = pd.read_csv('..\/input\/feature-3\/release_dates_per_country.csv')\n# release_dates['id'] = range(1,7399)\n# release_dates.drop(['original_title','title'],axis = 1,inplace = True)\n# release_dates.index = release_dates['id']\n# train = pd.merge(train, release_dates, how='left', on=['id'])\n# test = pd.merge(test, release_dates, how='left', on=['id'])","7bb1c973":"train.head()","e262676e":"test['revenue']=-99","56ad5b72":"test.head()","c45ae6a0":"train[['belongs_to_collection']].info()","119b1428":"train[['belongs_to_collection','title']].head()","9af55963":"train=train.drop('belongs_to_collection',axis=1)\ntest=test.drop('belongs_to_collection',axis=1)","a4b50dec":"train.loc[train.index == 16,'revenue'] = 192864         \ntrain.loc[train.index == 90,'budget'] = 30000000                  \ntrain.loc[train.index== 118,'budget'] = 60000000       \ntrain.loc[train.index== 149,'budget'] = 18000000       \ntrain.loc[train.index== 313,'revenue'] = 12000000       \ntrain.loc[train.index == 451,'revenue'] = 12000000      \ntrain.loc[train.index == 464,'budget'] = 20000000       \ntrain.loc[train.index == 470,'budget'] = 13000000       \ntrain.loc[train.index== 513,'budget'] = 930000         \ntrain.loc[train.index == 797,'budget'] = 8000000        \ntrain.loc[train.index == 819,'budget'] = 90000000       \ntrain.loc[train.index == 850,'budget'] = 90000000       \ntrain.loc[train.index == 1007,'budget'] = 2              \ntrain.loc[train.index== 1112,'budget'] = 7500000       \ntrain.loc[train.index == 1131,'budget'] = 4300000        \ntrain.loc[train.index == 1359,'budget'] = 10000000       \ntrain.loc[train.index == 1542,'budget'] = 1             \ntrain.loc[train.index == 1570,'budget'] = 15800000       \ntrain.loc[train.index== 1571,'budget'] = 4000000        \ntrain.loc[train.index == 1714,'budget'] = 46000000       \ntrain.loc[train.index == 1721,'budget'] = 17500000       \ntrain.loc[train.index== 1865,'revenue'] = 25000000      \ntrain.loc[train.index == 1885,'budget'] = 12             \ntrain.loc[train.index == 2091,'budget'] = 10             \ntrain.loc[train.index == 2268,'budget'] = 17500000       \ntrain.loc[train.index == 2491,'budget'] = 6              \ntrain.loc[train.index == 2602,'budget'] = 31000000       \ntrain.loc[train.index == 2612,'budget'] = 15000000       \ntrain.loc[train.index == 2696,'budget'] = 10000000      \ntrain.loc[train.index == 2801,'budget'] = 10000000       \ntrain.loc[train.index == 335,'budget'] = 2 \ntrain.loc[train.index == 348,'budget'] = 12\ntrain.loc[train.index == 470,'budget'] = 13000000 \ntrain.loc[train.index == 513,'budget'] = 1100000\ntrain.loc[train.index == 640,'budget'] = 6 \ntrain.loc[train.index == 696,'budget'] = 1\ntrain.loc[train.index == 797,'budget'] = 8000000 \ntrain.loc[train.index == 850,'budget'] = 1500000\ntrain.loc[train.index == 1199,'budget'] = 5 \ntrain.loc[train.index == 1282,'budget'] = 9              \ntrain.loc[train.index== 1347,'budget'] = 1\ntrain.loc[train.index== 1755,'budget'] = 2\ntrain.loc[train.index == 1801,'budget'] = 5\ntrain.loc[train.index == 1918,'budget'] = 592 \ntrain.loc[train.index == 2033,'budget'] = 4\ntrain.loc[train.index == 2118,'budget'] = 344 \ntrain.loc[train.index == 2252,'budget'] = 130\ntrain.loc[train.index == 2256,'budget'] = 1 \ntrain.loc[train.index == 2696,'budget'] = 10000000","16d05ac7":"test.loc[test.index== 3033,'budget'] = 250 \ntest.loc[test.index== 3051,'budget'] = 50\ntest.loc[test.index == 3084,'budget'] = 337\ntest.loc[test.index == 3224,'budget'] = 4  \ntest.loc[test.index == 3594,'budget'] = 25  \ntest.loc[test.index == 3619,'budget'] = 500  \ntest.loc[test.index == 3831,'budget'] = 3  \ntest.loc[test.index== 3935,'budget'] = 500  \ntest.loc[test.index == 4049,'budget'] = 995946 \ntest.loc[test.index== 4424,'budget'] = 3  \ntest.loc[test.index == 4460,'budget'] = 8  \ntest.loc[test.index == 4555,'budget'] = 1200000 \ntest.loc[test.index== 4624,'budget'] = 30 \ntest.loc[test.index== 4645,'budget'] = 500 \ntest.loc[test.index == 4709,'budget'] = 450 \ntest.loc[test.index == 4839,'budget'] = 7\ntest.loc[test.index== 3125,'budget'] = 25 \ntest.loc[test.index== 3142,'budget'] = 1\ntest.loc[test.index == 3201,'budget'] = 450\ntest.loc[test.index == 3222,'budget'] = 6\ntest.loc[test.index== 3545,'budget'] = 38\ntest.loc[test.index == 3670,'budget'] = 18\ntest.loc[test.index == 3792,'budget'] = 19\ntest.loc[test.index == 3881,'budget'] = 7\ntest.loc[test.index == 3969,'budget'] = 400\ntest.loc[test.index == 4196,'budget'] = 6\ntest.loc[test.index == 4221,'budget'] = 11\ntest.loc[test.index == 4222,'budget'] = 500\ntest.loc[test.index== 4285,'budget'] = 11\ntest.loc[test.index == 4319,'budget'] = 1\ntest.loc[test.index == 4639,'budget'] = 10\ntest.loc[test.index == 4719,'budget'] = 45\ntest.loc[test.index == 4822,'budget'] = 22\ntest.loc[test.index == 4829,'budget'] = 20\ntest.loc[test.index== 4969,'budget'] = 20\ntest.loc[test.index== 5021,'budget'] = 40 \ntest.loc[test.index== 5035,'budget'] = 1 \ntest.loc[test.index== 5063,'budget'] = 14 \ntest.loc[test.index == 5119,'budget'] = 2 \ntest.loc[test.index== 5214,'budget'] = 30 \ntest.loc[test.index== 5221,'budget'] = 50 \ntest.loc[test.index== 4903,'budget'] = 15\ntest.loc[test.index == 4983,'budget'] = 3\ntest.loc[test.index == 5102,'budget'] = 28\ntest.loc[test.index== 5217,'budget'] = 75\ntest.loc[test.index == 5224,'budget'] = 3 \ntest.loc[test.index== 5469,'budget'] = 20 \ntest.loc[test.index == 5840,'budget'] = 1 \ntest.loc[test.index == 5960,'budget'] = 30\ntest.loc[test.index == 6506,'budget'] = 11 \ntest.loc[test.index== 6553,'budget'] = 280\ntest.loc[test.index == 6561,'budget'] = 7\ntest.loc[test.index== 6582,'budget'] = 218\ntest.loc[test.index == 6638,'budget'] = 5\ntest.loc[test.index== 6749,'budget'] = 8 \ntest.loc[test.index==6759,'budget'] = 50 \ntest.loc[test.index == 6856,'budget'] = 10\ntest.loc[test.index== 6858,'budget'] =  100\ntest.loc[test.index == 6876,'budget'] =  250\ntest.loc[test.index == 6972,'budget'] = 1\ntest.loc[test.index== 7079,'budget'] = 8000000\ntest.loc[test.index == 7150,'budget'] = 118\ntest.loc[test.index == 6506,'budget'] = 118\ntest.loc[test.index == 7225,'budget'] = 6\ntest.loc[test.index == 7231,'budget'] = 85\ntest.loc[test.index == 5222,'budget'] = 5\ntest.loc[test.index == 5322,'budget'] = 90\ntest.loc[test.index == 5350,'budget'] = 70\ntest.loc[test.index == 5378,'budget'] = 10\ntest.loc[test.index== 5545,'budget'] = 80\ntest.loc[test.index == 5810,'budget'] = 8\ntest.loc[test.index== 5926,'budget'] = 300\ntest.loc[test.index== 5927,'budget'] = 4\ntest.loc[test.index== 5986,'budget'] = 1\ntest.loc[test.index == 6053,'budget'] = 20\ntest.loc[test.index== 6104,'budget'] = 1\ntest.loc[test.index == 6130,'budget'] = 30\ntest.loc[test.index == 6301,'budget'] = 150\ntest.loc[test.index == 6276,'budget'] = 100\ntest.loc[test.index == 6473,'budget'] = 100\ntest.loc[test.index== 6842,'budget'] = 30","acdb173e":"new_data=pd.concat([train,test],axis=0)\nnew_data.head()","048dff24":"new_data.shape","99a112fd":"new_data.isnull().sum()","8c52cba4":"new_data[new_data['release_date'].isnull()]","68c9aabb":"new_data['release_date']=new_data['release_date'].fillna('3\/20\/01')","108013f9":"# new_data['release_year']=pd.to_datetime(new_data['release_date']).dt.year\nnew_data['release_month']=pd.to_datetime(new_data['release_date']).dt.month\nnew_data['release_day']=pd.to_datetime(new_data['release_date']).dt.day","0747b69a":"new_data['release_year'].loc[new_data['release_year']>=2018]-=100","0d8a850b":"new_data[['release_date','release_year','release_month','release_day']].head()","98ffbbc9":"new_data=new_data.drop('release_date',axis=1)","ecb68d5d":"new_data['homepage_fact']=new_data['homepage'].apply(lambda x: 0 if x is np.nan  else 1)","32dd2d88":"a=new_data.loc[train.index].loc[train.index].groupby('homepage_fact').revenue.mean()\nplt.bar(a.index,a.values)","88a2b8af":"new_data['homepage_end']=new_data[new_data['homepage'].notna()]['homepage'].str.findall(r'\\.([a-z]+)(?:\\\/|$)').apply(lambda x:x[0])\nnew_data['homepage_end'].head()","5cc7232c":"new_data['homepage_end']=new_data['homepage_end'].fillna('unknow')","eb1f1271":"# new_data=new_data.drop('id',axis=1)","433e1391":"new_data['homepage_end']=new_data.update(new_data.loc[train.index].groupby('homepage_end').revenue.median().sort_values(ascending=False))\nplt.figure(figsize=(20,10))\nsas.barplot(a.index,a)","954cdd6c":"page=pd.get_dummies(new_data['homepage_end'])\npage.head()","21d04693":"new_data=new_data.drop('homepage',axis=1)","4946bc34":"new_data['poster_path'].describe()","20ac5c0a":"new_data=new_data.drop('poster_path',axis=1)","620d8c49":"new_data['len_overview']=new_data['overview'].fillna('NAN').apply(lambda x:len(x))","0b3b4d12":"new_data.plot(x=\"len_overview\",y=\"revenue\", kind=\"scatter\",figsize=(12,8))","bf2c578e":"len_rew_sort=new_data['len_overview'].sort_values(ascending=True)\nlen_rew_sort.head()","b35edc59":"length=len(new_data['len_overview'])\nm=0.1\nn=0.1\narr_len_ove=[]\nfor i in range(1,11):\n    arr_len_ove.append(round(length*m))\n    m+=n\narr_len_ove","626622cc":"exam=len_rew_sort.iloc[1480:2959].value_counts()\nsas.barplot(exam.index,exam.values)","5b909a28":"qu_arr=[]\nfor i in range(10):\n    if i==0:\n            x=len_rew_sort.iloc[:arr_len_ove[0]].mean()\n    else:\n        x=len_rew_sort.iloc[arr_len_ove[i-1]:arr_len_ove[i]].mean()\n    qu_arr.append(round(x))","676dad9c":"for i in range(10):\n    qu=qu_arr[i]\n    if i==0:\n        new_data['len_overview'].loc[(new_data['len_overview']<len_rew_sort.iloc[arr_len_ove[i]-1])]=qu\n    else:\n        new_data['len_overview'].loc[(new_data['len_overview']<len_rew_sort.iloc[arr_len_ove[i]-1])&(new_data['len_overview'] >qu_arr[i-1])]=qu\n    print(i,qu)","c6be269f":"np.sort(new_data['len_overview'].unique())","e16b3e72":"len_ove_agg=new_data.groupby('len_overview').revenue.aggregate(['min','max','std'])","08867e7c":"len_ove_agg.plot()","696ed51b":"new_data.head()","22e3cd3b":"sas.relplot('budget','revenue',data=train)","1d0dc7cc":"new_data['geres_name']=new_data['genres'].str.findall(r'\\'name\\'\\s?:\\s?\\'(\\w+)\\'')\nnew_data['geres_name'].head()","b21fd881":"new_data=new_data.drop('genres',axis=1)","a16a0e7a":"country=new_data['production_countries'].str.findall(r'[A-Z]{2,5}')\n","4f0363ba":"new_data['production_countries']=country\n","07ecec89":"new_data['original_and_new']=new_data['original_title']==new_data['title']","6d53ecba":"new_data=new_data.drop('original_title',axis=1)\n# new_data=new_data.drop('title',axis=1)\nnew_data.head()","a1cc72ee":"new_data=pd.concat([new_data,page],axis=1)","bbb994a6":"new_data['production_companies']=new_data['production_companies'].str.findall(r'\\'name\\'?:\\s?\\'([A-Za-z]+)')\nnew_data.fillna('Unknow')\nprint('\u63a5\u4e0b\u6765\u5c31\u662f\u5730\u56fe\u53ef\u89c6\u5316\u4e86')","589e8aee":"new_data['imdb_id'].describe()","313935bb":"new_data=new_data.drop('imdb_id',axis=1)","00642ff4":"new_data['spoken_languages']=new_data['spoken_languages'].str.findall(r'\\'([a-z]{2})\\'')","ae96e6e5":"new_data['production_companies']=new_data['production_companies'].fillna('unknow')","168c838a":"new_data['spoken_languages']=new_data['spoken_languages'].fillna('unknow')","0b73476a":"new_data['Keywords']=new_data['Keywords'].str.findall(r'\\'?:\\s?\\'([a-z]+\\s?[a-z]+)\\'').fillna('unkonw')","bbfebc4e":"new_data['Keywords'][1]","e2080229":"m=list(new_data['cast'].str.findall(r'\\'name\\'?:\\s?\\'(\\S+\\s?\\S+)\\'').fillna('unknow'))","1155dda9":"plt.figure(figsize = (16, 12))\nlist_of_keywords=list(new_data['Keywords'].loc[new_data['Keywords']!='unkonw'])\ntext = ' '.join(['_'.join(i.split(' ')) for j in list_of_keywords for i in j])\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='Top keywords'\nplt.axis(\"off\")\nplt.show()","f9598ecc":"d = Counter([i for j in list_of_keywords for i in j]).most_common(30)\nd","8be804fd":"for i in d:\n    m=i[0]\n    new_data['Keywords_'+m]=new_data['Keywords'].apply(lambda x:1 if m in x else 0)","41746d00":"new_data=new_data.drop('Keywords',axis=1)","50d36acb":"new_data['cast']=new_data['cast'].fillna('unknow')","994259cd":"m=list(new_data['cast'].str.replace(r'\\s+\\'order\\':\\s?\\d+\\S?\\s\\'profile_path\\'?:\\s?\\'','').str.findall('\\'name\\'?:\\s?\\'(\\D+)\\'\\S?\\s?\\'?(\\\/\\w+.jpg)\\'?\\}'))\nd = Counter([i for j in m for i in j]).most_common(16)\nd","8c3bb954":"fig = plt.figure(figsize=(20, 12))\nfor i,p in enumerate([j[0] for j in d]):\n    p=str(p).split(',')\n    m=p[0][2:]\n    m=m[:len(m)-1]\n    p=p[1]\n    p=p[2:len(p)-2]\n    print(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p)\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    im = Image.open(urlopen(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p))         \n    plt.imshow(im)\n    ax.set_title(m)\n    ","c1d266d5":"for i in d:\n    m=i[0][0]\n    new_data['cast_name_'+m]=new_data['cast'].apply(lambda x:1 if m in x else 0)","6e6e74ed":"new_data['cast'][1]","e73785cc":"list_cast_gender=list(new_data['cast'].str.findall(r'\\'gender\\'\\s?:\\s?(\\d+)\\s?'))\nCounter([i for j in list_cast_gender for i in j]).most_common()","18cf8c72":"new_data['cast_gender_0']=new_data['cast'].str.findall(r'\\'gender\\'\\s?:\\s?(\\d+)\\s?').apply(lambda x: x.count('0'))\nnew_data['cast_gender_1']=new_data['cast'].str.findall(r'\\'gender\\'\\s?:\\s?(\\d+)\\s?').apply(lambda x: x.count('1'))\nnew_data['cast_gender_2']=new_data['cast'].str.findall(r'\\'gender\\'\\s?:\\s?(\\d+)\\s?').apply(lambda x: x.count('2'))","5317220c":"list_cast_char=list(new_data['cast'].str.findall(r'\\'character\\'\\s?:\\s?\\'(\\S+)\\'\\S?\\s?'))\ntop_cast_char=Counter([i for j in list_cast_char for i in j]).most_common(20)","c9e7391e":"for g in top_cast_char:\n    m=g[0]\n    new_data['cast_char_'+m]=new_data['cast'].apply(lambda x:1 if m in x else 0)","39ac3d74":"new_data=new_data.drop('cast',axis=1)","6027b823":"new_data['status']=new_data['status'].fillna('Unknow')","a612a3eb":"new_data['overview']=new_data['overview'].fillna('')","95936df4":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['original_title'].values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='Top words in titles'\nplt.axis(\"off\")\nplt.show()","fa4ff090":"plt.figure(figsize = (12, 12))\ntext = ' '.join(train['overview'].fillna('').values)\nwordcloud = WordCloud(max_font_size=None, background_color='white', width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='Top words in overview'\nplt.axis(\"off\")\nplt.show()","960307b1":"from sklearn.linear_model import  LinearRegression\nimport eli5\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n","14fcfb52":"log_re=np.log1p(train['revenue'])\nv1=TfidfVectorizer( sublinear_tf=True,analyzer='word',\n            token_pattern=r'\\w{1,}',\n            ngram_range=(1, 2),\n            min_df=5)\noverview_text = v1.fit_transform(train['overview'].fillna(''))\nlinre=LinearRegression()\nlinre.fit(overview_text,log_re)\n","b733ec44":"eli5.show_weights(linre, vec=v1, top=20, feature_filter=lambda x: x !='<BIAS>')","7162c956":"print('Target value:',log_re[1000])\neli5.show_prediction(linre, doc=train['overview'].values[1000], vec=v1)\n","00eba5cd":"plt.figure(figsize = (12, 12))\ntext_ta=' '.join(new_data['tagline'].fillna('').values)\nwordcloud=WordCloud(max_font_size=None,background_color='white',width=1200,height=1000).generate(text_ta)\nplt.imshow(wordcloud)\nplt.title='Top words in tagline'\nplt.axis(\"off\")\nplt.show()","d82db84d":"\n# new_data['crew']=new_data['crew'].str.replace(',','').str.replace('}','').str.replace(r'\\S+credit_id\\S+:\\s?\\s?\\S?\\'(\\S+)\\S+\\'','').str.findall(r'\\'job\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\S\\s?\\S?\\'name\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\'\\s?\\S?\\'profile_path\\S?\\':\\s+\\'?(\\S+)\\S?\\s?\\s?\\S?department\\S?\\'?:\\s?\\S?(\\S+)\\s?\\S?\\'?') ","ec26ef5b":"new_data['crew_0']=new_data['crew'].fillna('').str.replace(',','').str.replace('}','').str.findall('\\'gender\\S?\\'\\s?:\\s?\\S?(\\d+)\\s?\\S?').apply(lambda x:x.count('0'))\nnew_data['crew_1']=new_data['crew'].fillna('').str.replace(',','').str.replace('}','').str.findall('\\'gender\\S?\\'\\s?:\\s?\\S?(\\d+)\\s?\\S?').apply(lambda x:x.count('1'))\nnew_data['crew_2']=new_data['crew'].fillna('').str.replace(',','').str.replace('}','').str.findall('\\'gender\\S?\\'\\s?:\\s?\\S?(\\d+)\\s?\\S?').apply(lambda x:x.count('2'))","f38f3443":"list_crew_depart=list(new_data['crew'].fillna('').str.replace(',','').str.replace('}','').str.findall('\\'department\\'\\s?\\S?:\\s+\\S?(\\S+)\\S?\\s?\\S?'))\nd=Counter([i for j in list_crew_depart for i in j]).most_common(15)","d4293f57":"list_crew_job=list(new_data['crew'].fillna('').str.replace(',','').str.replace('}','').str.findall('\\'job\\S?\\'\\s?:\\s?\\'(\\D+)\\S\\s?\\S?\\'name'))\ndd=Counter([i for j in list_crew_job for i in j]).most_common(15)","ceaeed7d":"for i in d:\n    new_data['crew_depart_is_'+i[0]]=new_data['crew'].fillna('').apply(lambda x:1 if i[0] in x else 0)\nfor i in dd:\n    new_data['crew_job_is_'+i[0]]=new_data['crew'].fillna('').apply(lambda x:1 if i[0] in x else 0)","d785f141":"new_data['crew']=new_data['crew'].str.replace(',','').str.replace('}','').str.replace(r'\\'gender\\'\\s?\\S?:\\s?\\S?\\s+\\'id\\'\\s?:\\s?\\d+','').str.findall(r'\\'department\\'\\s?\\S?:\\s+\\S?(\\S+)\\S?\\s?\\S?\\s+\\'job\\S?\\'\\s?:\\s?\\'(\\D+)\\S\\s?\\S?\\'name\\S?\\'\\s?:\\s?\\'(\\D+)\\'\\s?\\S?\\'profile_path\\S?\\':\\s+\\'?(\\S+)\\S?\\s?\\s?\\S?') ","c90ab42f":"new_data['len_crew']=new_data['crew'].fillna('1').apply(lambda x:len(x))","bf0f48f2":"new_data['crew'][1][:5]","cd1ed4e4":"train['crew'][1]","2dab28f6":"# new_data['crew'].str.replace(',','').str.replace('}','').str.replace(r'\\S+credit_id\\S+:\\s?\\s?\\S?\\'(\\S+)\\S+\\'','').str.findall(r'\\'job\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\S\\s?\\S?\\'name\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\'\\s?\\S?\\'profile_path\\S?\\':\\s+\\S?(\\S+)\\S?\\s?\\s?\\S?department\\S?\\'?:\\s?\\S?(\\S+)\\s?\\S?')[1] ","eed3349e":"# train['crew'].str.replace(',','').str.replace('}','').str.replace(r'\\S+credit_id\\S+:\\s?\\s?\\S?\\'(\\S+)\\S+\\'','').str.findall(r'\\'job\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\S\\s?\\S?\\'name\\S?\\'\\s?:\\s?\\'(\\S+\\s?\\S+)\\'\\s?\\S?\\'profile_path\\S?\\':\\s+\\'?(\\S+)\\S?\\s?\\s?\\S?department\\S?\\'?:\\s?\\S?(\\S+)\\s?\\S?')[1] ","9aeaeae0":"# new_data=new_data.drop('crew',axis=1)","95c98cb8":"new_train=new_data.loc[np.array(train.index)]","add1ef74":"new_train['production_countries']=new_train['production_countries'].fillna('')","805f27d3":"new_train['production_countries']=new_train['production_countries'].apply(lambda x:'_'.join(x))","3d4ac7ee":"count=new_train['production_countries'].value_counts()\ncount=count[count>5]","07907c6d":"plt.figure(figsize=(20,10))\nplt.bar(count.index,count.values)\nplt.show()","04738933":"bud=new_train.groupby('production_countries').budget.mean()","cbaa48ca":"bud=bud.sort_values(ascending=False)[:10]","a4af37fc":"plt.figure(figsize=(20,12))\nplt.bar(bud.index,bud.values)\nplt.show()","58d0d274":"rev=new_train.groupby('production_countries').revenue.mean()","e0821963":"rev=rev.sort_values(ascending=False)[:10]","3cf29fe4":"plt.figure(figsize=(20,12))\nplt.bar(rev.index,rev.values)\nplt.show()","0cbff64c":"new_train['release_month'].unique()","2003b37a":"new_train['production_countries'].loc[new_train['production_countries']=='ET']='Ethiopia'\nalong_co=new_train[new_train['production_countries'].apply(lambda x:1 if len(x)==2 else 0)==1]\nalong_co.head()","f77d36c6":"count_rev=along_co[['production_countries','revenue']]","898d7350":"dd=count_rev['production_countries'].unique()\nmn=pd.DataFrame(dd,columns=['address'])\nmn.head()","38651ca0":"import geopandas as ge\n# boros = ge.read_file(ge.datasets.get_path(\"nybb\"))\n# m1=ge.tools.geocode(count_rev['production_countries'].unique(), provider='nominatim', user_agent=\"my-application\")","c5e0d459":"# mn=m1.copy()\n# mn","3caf8610":"world = ge.read_file(ge.datasets.get_path('naturalearth_lowres'))","e6b7837b":"from mpl_toolkits.axes_grid1 import make_axes_locatable\n","e3b1dcac":"dd=count_rev['production_countries'].value_counts()\nmn['values']=dd.values\nmn.head()","a3354ff0":"mn['address'][36]","37e7a431":"mn['address'][0]='United States'\nmn['address'][2]='Korea'\nmn['address'][1]='India'\nmn['address'][3]='Serbia'\nmn['address'][4]='United Kingdom'\nmn['address'][5]='France'\nmn['address'][6]='New Zealand'\nmn['address'][7]='Italy'\nmn['address'][8]='Belgium'\nmn['address'][9]='Czech Rep.'\nmn['address'][11]='Russia'\nmn['address'][12]='Spain'\nmn['address'][13]='Turkey'\nmn['address'][14]='China'\nmn['address'][15]='Canada'\nmn['address'][16]='Australia'\nmn['address'][17]='Iran'\nmn['address'][18]='Japan'\nmn['address'][19]='Sweden'\nmn['address'][20]='Philippines'\nmn['address'][21]='Brazil'\nmn['address'][22]='Netherlands'\nmn['address'][23]='Ireland'\nmn['address'][24]='Mexico'\nmn['address'][25]='Germany'\nmn['address'][26]='South Africa'\nmn['address'][27]='Finland'\nmn['address'][28]='Pakistan'\nmn['address'][29]='Norway'\nmn['address'][30]='Bulgaria'\nmn['address'][31]='Ukraine'\nmn['address'][32]='Denmark'\nmn['address'][33]='Romania'\nmn['address'][35]='Hungary'\nmn['address'][36]='Chile'\nmn['address'][37]='Indonesia'\nmn['address'][38]='Poland'\n","20da54e2":"mn=mn.drop(10)\nmn=mn.drop(34)","20d091ad":"mn['geometry']='unknow'","e1b15911":"for i in range(39):\n    if i==10 or i==34:\n        continue;\n    d=world[world['name']==mn['address'][i]]['geometry'].values[0]\n    mn['geometry'][i]=d","f724b832":"fig, ax = plt.subplots()\nmn=ge.GeoDataFrame(mn)\nax.set_aspect('equal')\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.1)\nworld.plot(ax=ax, color='white', edgecolor='black')\nmn.plot(column='values',ax=ax, legend=True,cmap=plt.get_cmap('rainbow'))\n","79bcfbb3":"TS = train.loc[:,[\"original_title\",\"release_date\",\"budget\",\"runtime\",\"revenue\"]]\nTS.dropna()\n\nTS.release_date = pd.to_datetime(TS.release_date)\nTS.loc[:,\"Year\"] = TS[\"release_date\"].dt.year\nTS.loc[:,\"Month\"] = TS[\"release_date\"].dt.month\nTS = TS[TS.Year<2018]","ad0b59a4":"titles = TS.groupby(\"Year\")[\"original_title\"].count()\ntitles.plot(figsize=(15,8))\nplt.xlabel=\"Year of release\"\nplt.ylabel=\"Number of titles released\"\nplt.xticks(np.arange(1970,2025,5))\nplt.show()","0d8cc52a":"rev=TS.groupby('Year')['revenue'].aggregate(['min','mean','max','std'])\nrev.plot(figsize=(20,10))\nplt.xlabel=\"Year of release\"\nplt.ylabel=\"Revenue\"\nplt.xticks(np.arange(1970,2025,5))\nplt.show()","ac642d45":"bud=TS.groupby('Year')['budget'].aggregate(['min','max','mean','std'])\nbud.plot(figsize=(20,10))\nplt.xlabel=\"Year of release\"\nplt.ylabel=\"Budget\"\nplt.xticks(np.arange(1970,2025,5))\nplt.show()","c0c7a4e2":"TS[TS['budget']==0].head()","00b9721c":"runtimes = TS.groupby(\"Year\")[\"runtime\"].aggregate([\"min\",\"mean\",\"max\"])\nruntimes.plot(figsize=(15,8))\nplt.xlabel=\"Year of release\"\nplt.ylabel=\"Runtime\"\nplt.xticks(np.arange(1970,2025,5))\nplt.show()","cff80c7d":"r_zeros = TS[TS.runtime==0]\nr_zeros.head()","6d8f0146":"train.plot(x=\"runtime\",y=\"budget\", kind=\"scatter\",figsize=(12,8))\nplt.show()","b6e4e3ae":"train.plot(x=\"runtime\",y=\"revenue\", kind=\"scatter\",figsize=(12,8))\nplt.show()","132e4a33":"train.plot(x=\"popularity\",y=\"budget\", kind=\"scatter\",figsize=(12,8))\nplt.show()","6e419978":"pop = train[train.popularity<50]\npop=pop[pop['budget']!=0]\npop.plot(x=\"budget\",y=\"popularity\", kind=\"scatter\",figsize=(12,8))\nplt.show()","aa07b8c4":"top3 = train.sort_values(by='popularity',ascending=False)[:10]\nid3=top3[['title','poster_path','revenue']]","d2024318":"fig = plt.figure(figsize=(20, 12))\ncont=0\nfor i in id3.index:\n    p=id3.loc[i]\n    ax = fig.add_subplot(4, 4, cont+1, xticks=[], yticks=[])\n    print(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p['poster_path'])\n    im = Image.open(urlopen(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p['poster_path']))\n    plt.imshow(im)\n    ax.set_title(p['title'])\n    cont+=1","d4be97a8":"old_title=new_data['title'].value_counts()","551d3d86":"a=old_title[old_title.values==3].index\nb=old_title[old_title==2].index","d5674476":"new_data['fan_pai_2']=new_data['title'].apply(lambda x:1 if x in a else 0)\nnew_data['pan_pai_3']=new_data['title'].apply(lambda x:1 if x in b else 0)","f2f30741":"new_data.loc[new_data['title'].fillna('un').str.contains('Planet of the Apes')]","7fb81d58":"top10 = train.sort_values(by='revenue',ascending=False)[:10]\nid10=top10[['title','poster_path','revenue']]","37edfbc2":"fig = plt.figure(figsize=(20, 12))\ncont=0\nfor i in id10.index:\n    p=id10.loc[i]\n    ax = fig.add_subplot(4, 4, cont+1, xticks=[], yticks=[])\n    print(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p['poster_path'])\n    im = Image.open(urlopen(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p['poster_path']))\n    plt.imshow(im)\n    ax.set_title(p['title'])\n    cont+=1","ea8feb1d":"title_count=train['title'].value_counts()\nlen(title_count[title_count.values!=1])","85607611":"train[train['title'].str.contains('Furious')]['title']\n","143e815d":"test[test['title'].fillna('Unknow').str.contains('Furious')]['title']","db913a8a":"list_crew=list(new_data['crew'].fillna('Unknow'))\nd = Counter([j for i in list_crew for j in i]).most_common(17)","40e1f8e2":"d.remove(d[7])","92b3235f":"for i in d :\n    new_data['crew_contains_'+i[0][2]]=new_data['crew'].fillna('').apply(lambda x:1 if i[0][2] in x else 0)\n","c4cf7b8a":"fig = plt.figure(figsize=(20, 16))\nfor i in range(16):\n    ax = fig.add_subplot(4, 4, i+1, xticks=[], yticks=[])\n    p=d[i][0][3]\n    p=p[:len(p)-1]\n    print(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p)\n    if p!='Non':\n        im = Image.open(urlopen(\"https:\/\/image.tmdb.org\/t\/p\/w600_and_h900_bestv2%s\"%p))\n    else:\n        im = Image.new('RGB', (5, 5))\n    plt.imshow(im)\n    ax.set_title(' \\n Name: %s\\n Job:%s'%(d[i][0][2],d[i][0][1]))","53723915":"ts=new_train.groupby('release_month').revenue.median()","05a8fbd5":"plt.figure(figsize=(10,5))\nsas.pointplot(ts.index,ts.values,ylabel='revenue')","1518f1e1":"mon_is=[1,6,7,9,10,12]\nfor i in mon_is:\n    new_data['mon_is_'+str(i)]=new_data['release_month'].apply(lambda x:1 if x==i else 0)","96c2d3a2":"plt.figure(figsize=(16,6))\nplt.plot(ts.rolling(window=2,center=False).mean(),label='Rolling Mean');\n# plt.plot(ts.rolling(window=2,center=False).std(),label='Rolling sd');\nplt.plot(ts.rolling(window=3,center=False).mean(),label='Rolling Mean3')\nplt.plot(ts.rolling(window=6,center=False).mean(),label='Rolling Mean6')\nplt.legend();","b7347a60":"plt.plot(ts.diff(2))\nplt.show()","03a16071":"tt=TS.groupby('Year').revenue.median()","a159f4d9":"plt.figure(figsize=(15,8))\nplt.plot(tt.index,tt.values)\nplt.xlabel='year'\nplt.ylabel='revenue'\nplt.title='revenue_of_year'\nplt.show()","03b069b2":"tt1=tt.diff(1)\nplt.figure(figsize=(15,8))\nplt.plot(tt1.index,tt1.values)\nplt.xlabel='year'\nplt.ylabel='revenue'\nplt.title='revenue_of_year'\nplt.show()","c8400944":"new_data['spoken_languages_count']=new_data['spoken_languages'].apply(lambda x:len(x))","599110f4":"new_data.loc[train.index].groupby('spoken_languages_count').revenue.median()","1d188678":"status_du=pd.get_dummies(new_data['status'])","415a8194":"new_data=pd.concat([new_data,status_du],axis=1)\n","7e7e87b7":"new_data=new_data.drop(['status'],axis=1)\nnew_data.head()","33b8e849":"new_data=new_data.drop(['original_language'],axis=1)","acad1248":"sum(new_data['geres_name'].isna())","9b0bae05":"new_data['geres_name']=new_data['geres_name'].fillna('Unknow')","414b99e4":"new_data['geres_name_count']=new_data['geres_name'].apply(lambda x:len(x))","3c54cf64":"ge_name_count_rev=new_data.loc[train.index].groupby(['geres_name_count']).revenue.median().sort_values()","023ebc7a":"sas.barplot(ge_name_count_rev.index,ge_name_count_rev.values)","9206ede7":"new_data=new_data.drop('homepage_end',axis=1)","3430bc12":"new_data['original_and_new']=new_data['original_and_new'].apply(lambda x: 1 if x else 0)","94bdc203":"plt.figure(figsize = (16, 12))\nlist_of_keywords=list(new_data['geres_name'])\ntext = ' '.join(['_'.join(i.split(' ')) for j in list_of_keywords for i in j])\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='Top geres_name'\nplt.axis(\"off\")\nplt.show()","e351a70e":"list_geres_name=['Comedy','Thriller','Action','Drama','Romance']","dfc63ede":"for i in list_geres_name:\n    new_data['geres_name'+'_'+i]=new_data['geres_name'].apply(lambda x: 1 if i in x else 0 )","afcbd549":"new_data=new_data.drop('geres_name',axis=1)","e4787e2f":"new_data['production_countries']=new_data['production_countries'].fillna('QQ')","6a7f0f7a":"plt.figure(figsize = (16, 12))\nlist_of_keywords=list(new_data['production_countries'])\ntext = ' '.join(['_'.join(i.split(' ')) for j in list_of_keywords for i in j])\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='production_countries'\nplt.axis(\"off\")\nplt.show()","073d92ee":"new_data['production_countries'].loc[new_data['production_countries']=='Unknow']['production_countries']='QQ'","e91b9a10":"list_pro_coun=list(new_data['production_countries'])\nd = Counter([j for i in list_pro_coun for j in i]).most_common(5)\nd","de550e60":"for i in d:\n     new_data['production_cou_name'+'_'+i[0]]=new_data['production_countries'].apply(lambda x: 1 if i[0] in x else 0 )","5d4d7264":"new_data['pro_country_count']=new_data['production_companies'].apply(lambda x:len(x))","3800f244":"pro_count_rev=new_data.loc[train.index].groupby('pro_country_count').revenue.median()","fe5a12bc":"sas.barplot(pro_count_rev.index,pro_count_rev.values)","33579398":"new_data=new_data.drop('production_countries',axis=1)","14212219":"new_data['production_companies'].loc[new_data['production_companies']=='unknow']='u'","1923bcb3":"plt.figure(figsize = (16, 12))\nlist_of_pro_com=list(new_data['production_companies'])\ntext = ' '.join(['_'.join(i.split(' ')) for j in list_of_pro_com for i in j])\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='production_countries'\nplt.axis(\"off\")\nplt.show()","0d3cd644":"d = Counter([j for i in list_of_pro_com for j in i]).most_common(11)\nd","e1b1c579":"d.remove(('u',414))\n","d856f511":"dd=[]\nfor i in d:\n    dd.append(i[0])","a48e2dbb":"fig = plt.figure(figsize=(20, 16))\n\nfor i in range(len(d)):\n    m=d[i][0]\n    new_data['is_'+m]=new_data['production_companies'].apply(lambda x:1 if m in x else 0)\n    com=new_data[new_data['is_'+m]==1]\n    val=com.groupby('release_year').budget.median()\n    cou=com.release_year.value_counts()\n    plt.plot(val.index,val.values)\n    plt.legend(dd)  ","602ab7a5":"plt.figure(figsize = (16, 12))\nlist_of_spk_lag=list(new_data['spoken_languages'].loc[new_data['spoken_languages']!='unknow'])\ntext = ' '.join(['_'.join(i.split(' ')) for j in list_of_spk_lag for i in j])\nwordcloud = WordCloud(max_font_size=None, background_color='black', collocations=False,\n                      width=1200, height=1000).generate(text)\nplt.imshow(wordcloud)\nplt.title='spk_lag'\nplt.axis(\"off\")\nplt.show()","99b8ef0e":"d = Counter([j for i in list_of_spk_lag for j in i]).most_common(5)\nd","184d322c":"dd=[]\nfor i in d:\n    dd.append(i[0])","84186ff1":"fig = plt.figure(figsize=(20, 16))\n\nfor i in range(len(d)):\n    m=d[i][0]\n    new_data['is_'+m]=new_data['spoken_languages'].apply(lambda x:1 if m in x else 0)\n    com=new_data[new_data['is_'+m]==1]\n    val=com.groupby('release_year').budget.median()\n    cou=com.release_year.value_counts()\n    plt.plot(val.index,val.values)\n    plt.legend(dd)  \n    plt.title='psk_release_median'","713dc49a":"new_data=new_data.drop('spoken_languages',axis=1)","9b8f203b":"new_data.head()","164bcc4d":"new_data['runtime'].loc[new_data['runtime']==0]=1\nnew_data['time_budget']=new_data['budget'].fillna(0)\/new_data['runtime'].fillna(1)","9e0b84c7":"new_data=new_data.drop('production_companies',axis=1)","29ca1828":"new_data=new_data.drop('crew',axis=1)","95b7593e":"new_data.head()","36d18344":"new_data.shape\nlist1=['Avengers','Furious','Beauty and the Beast','ransformers','Rises','Pirates of the Caribbean','Finding Dory','Zootopia','Alice in Wonderland']","1594d2ac":"for i in list1:\n    new_data['title_is'+i]=new_data['title'].fillna('').apply(lambda x: 1 if i in x else 0)","d5db6048":"for col in ['tagline', 'overview','title']:\n    new_data['len_' + col] =new_data[col].fillna('').apply(lambda x: len(x))\n    new_data['words_' + col] = new_data[col].fillna('').apply(lambda x: len(x.split(' ')))\n    new_data=new_data.drop(col,axis=1)","4f3cdc2f":"new_data.head()","5284829a":"# new_data['budget'].loc[new_data['budget']==0]=1\n# new_data['popularity'].loc[new_data['popularity']==0]=1\n# new_data['budget'] = np.log1p(new_data['budget'])\n# new_data['popularity'] = np.log1p(new_data['popularity'])\nnew_data['budget_popularity']=new_data['budget']*1.0\/new_data['popularity']\nnew_data['budget_popularity2']=new_data['budget']*1.0\/new_data['popularity2']","ec0aa956":"a=new_data.groupby(['release_year']).release_month.value_counts()\nb=new_data.groupby(['release_year','release_month']).release_day.value_counts()\nnew_data[(new_data['release_year']==2017)&(new_data['release_day']==30)]\n","4fe5292b":"new_data['_releaseYear_popularity_ratio'] = new_data['release_year'] \/ new_data['popularity']\nnew_data['_releaseYear_popularity_ratio21'] = new_data['release_year'] \/ new_data['popularity2']\nnew_data['_releaseYear_popularity_ratio2'] = new_data['popularity'] \/ new_data['release_year']\nnew_data['_releaseYear_popularity_ratio22'] = new_data['popularity2'] \/ new_data['release_year']\n    \nnew_data['runtime_to_mean_year'] = new_data['runtime'] \/ new_data.groupby(\"release_year\")[\"runtime\"].transform('mean')\nnew_data['popularity_to_mean_year'] = new_data['popularity'] \/ new_data.groupby(\"release_year\")[\"popularity\"].transform('mean')\nnew_data['popularity_to_mean_year'] = new_data['popularity'] \/ new_data.groupby(\"release_year\")[\"popularity2\"].transform('mean')\nnew_data['budget_to_mean_year'] = new_data['budget'] \/ new_data.groupby(\"release_year\")[\"budget\"].transform('mean')\n\n","ca940687":"# new_data['year_day_count']=0\n# new_data['year_month_count']=0\n# for i in range(len(a)):\n#     new_data['year_month_count'][(new_data['release_year']==a.index[i][0])&(new_data['release_month']==a.index[i][1])]=a.values[i]","7725a091":"# for i in range(len(b)):\n#     new_data['year_day_count'][(new_data['release_year']==b.index[i][0])&(new_data['release_month']==b.index[i][1])&(new_data['release_day']==b.index[i][2])]=b.values[i]","111b4f2c":"new_train=new_data.loc[train.index]\nnew_test=new_data.loc[test.index]","616b61d8":"new_test.head()","5bc11cd7":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nx=new_train.drop('revenue',axis=1)\ny=new_train['revenue']\nx=x.fillna(0)\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Create Decision Tree with max_depth = 6\ndecision_tree = DecisionTreeRegressor(max_depth = 6)\ndecision_tree.fit(x, y)\n\n\n# clf2 = RandomForestClassifier(n_estimators=10, max_depth=None,min_samples_split=2, random_state=0)\n# scores2 = cross_val_score(clf2,x, y)","3548e7e4":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import  mean_squared_error\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\nimport xgboost\nmodel_XG = xgboost.XGBRegressor() \nmodel_XG.fit(x_train,y_train)\ny_predict_rf = model_XG.predict(x_test)\nprint(mean_squared_error(y_test, y_predict_rf))\n","92650827":"X_test=new_test.drop('revenue',axis=1)\nX_test=X_test.fillna(0)","7502f1c2":"ypred=model_XG.predict(X_test)","065ddb91":"dtrain = xgb.DMatrix(x, y)\ndtest = xgb.DMatrix(X_test)","f954f657":"xgb_params = {\n    'eta': 0.08,\n    'max_depth': 15,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=1000, early_stopping_rounds=400, verbose_eval=50, show_stdv=False)\ncv_output[['train-rmse-mean', 'test-rmse-mean']].plot()","55759d47":"num_boost_rounds = len(cv_output)\nmodel = xgb.train(dict(xgb_params, silent=0), dtrain, num_boost_round= num_boost_rounds)\nfig, ax = plt.subplots(1, 1, figsize=(8, 13))\nxgb.plot_importance(model, max_num_features=50, height=0.5, ax=ax)","3430fef4":"y_predict1 = abs(model.predict(dtest))","6be34f41":"train=x\ny_train=np.log1p(y)\ntest=X_test\ny=y_train","d8c59157":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, train.values,y_train.values, scoring=\"neg_mean_squared_error\", cv=kf))\n    return(rmse)\n\ndef eval_model(model, name):\n    start_time = time.time()\n    score = rmsle_cv(model)\n    print(\"{} score: {:.4f} ({:.4f}),     execution time: {:.1f}\".format(name, score.mean(), score.std(), time.time()-start_time))","9ab2371a":"mod_lasso = make_pipeline(RobustScaler(), Lasso(alpha=0.005, random_state=1))\neval_model(mod_lasso, \"lasso\")\nmod_enet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\neval_model(mod_enet, \"enet\")\nmod_cat = CatBoostRegressor(iterations=10000, learning_rate=0.01,\n                            depth=10, eval_metric='RMSE',\n                            colsample_bylevel=0.7, random_seed = 17, silent=True,\n                            bagging_temperature = 0.2, early_stopping_rounds=200)\neval_model(mod_cat, \"cat\")\nmod_gboost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=10, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state=5)\neval_model(mod_gboost, \"gboost\")\nmod_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=10, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state=7, nthread=-1)\neval_model(mod_xgb, \"xgb\")\nmod_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=255,\n                              learning_rate=0.05, n_estimators=650,\n                              max_bin=58, bagging_fraction=0.80,max_depth=8, \n                              bagging_freq=5, feature_fraction=0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf=7, min_sum_hessian_in_leaf=11)\neval_model(mod_lgb, \"lgb\")","2eaf7fd6":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)\n    \nmod_stacked = StackingAveragedModels(base_models = (mod_cat, mod_xgb, mod_gboost, mod_lgb), meta_model = mod_lasso)\neval_model(mod_stacked, \"stacked\")","2165c488":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef predict(model):\n    model.fit(train.values,y_train.values)\n    train_pred = model.predict(train.values)\n    pred = np.expm1(model.predict(test.values))\n    print(rmsle(y_train, train_pred))\n    return (pred)","a7428f2d":"prediction = predict(mod_lasso)\nprediction = predict(mod_enet)\nprediction = predict(mod_xgb)\nprediction = predict(mod_gboost)\nprediction = predict(mod_lgb)\nprediction = predict(mod_stacked)\nprediction","ed45c78f":"# y_pre=(abs(ypred+y_predict))\/2\nnew_test['id']=new_test.index\nnew_test['revenue']=prediction\nnew_test[['id','revenue']].to_csv('submission_Dragon2.csv', index=False)\nnew_test[['id','revenue']].head()","db224241":"\u9884\u7b97\u548c\u6d41\u884c\u7a0b\u5ea6\u6ca1\u4ec0\u4e48\u5173\u7cfb,\u589e\u52a0\u6210\u672c\u4e5f\u53ef\u80fd\u65e0\u6cd5\u83b7\u5f97\u8db3\u591f\u7684\u540d\u6c14","8fa507fa":"\u7ed8\u5236\u8457\u540d\u6f14\u5458","fd353ac6":"\u6839\u636e\u6743\u91cd\u6392\u5e8f","add39053":"\u5f71\u7247\u5143\u7d20\u8d8a\u591a,\u7968\u623f\u8d8a\u9ad8,\u5f53\u7136\u8c8c\u4f3c6\u79cd\u5143\u7d20\u53ef\u80fd\u6709\u70b9\u8ba9\u4eba\u610f\u5916,\u6bd5\u7adf\u6211\u7edf\u8ba1\u7684\u662f\u4e2d\u4f4d\u6570,\u8981\u6392\u9664\u7968\u623f\u7684\u5f02\u5e38\u503c\u7684\u5f71\u54cd","c15727f2":"\u7535\u5f71\u6bcf\u5e74\u7684\u4ea7\u91cf\u90fd\u5728\u589e\u52a0","d28698dd":"\u6570\u636e\u6ca1\u6709\u51fa\u73b0\u504f\u5c3e\u5206\u5e03\u7684\u60c5\u51b5,\u6240\u4ee5\u6211\u91c7\u53d6\u5747\u503c\u7528\u6765\u8861\u91cf\u8fd9\u6bb5\u533a\u95f4\u7684\u4e00\u4e2a\u6574\u4f53\u5206\u5e03","8bd4436e":"\u7535\u5f71\u7968\u623f\u6392\u884c\u699c","e8131ea5":"\u73b0\u5728 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 Comedy Thriller  Action  Drama Romance","e2e49813":"\u901a\u8fc7\u57df\u540d\u540e\u7f00\u805a\u5408\u7968\u623f,\u89c2\u5bdf\u5230\u56fd\u9645\u57df\u540d\u540e\u7f00\u7684\u7f51\u7ad9\u5e26\u6765\u7684\u7968\u623f\u6536\u76ca\u5e73\u5747\u503c\u66f4\u5927,\u751a\u81f3\u770b\u8d77\u6765\u8d85\u8fc7\u4e86\u5176\u4ed6\u57df\u540d\u7684\u7d2f\u52a0\u548c","2e2a920d":"\u73b0\u5728,\u6211\u4eec\u628a\u6392\u540d\u524d\u4e94\u7684\u505a\u4e00\u4e2a\u7279\u5f81,\u6709\u5229\u4e8e\u7b97\u6cd5\u9884\u6d4b\u7684\u66f4\u7cbe\u51c6","ea0c212f":"\u5224\u65ad\u8457\u540d\u6f14\u5458\u662f\u5426\u5728\u91cc\u9762,\u56e0\u4e3a\u8457\u540d\u6f14\u5458\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u7968\u623f","193a0a04":"\u5f53\u7136,\u4e5f\u53ef\u4ee5\u9009\u62e9\u753b\u5b50\u56fe\u7684\u65b9\u6cd5,\u4f46\u662f\u5728\u8fd9\u91cc\u4e0d\u8fd9\u4e48\u9ebb\u70e6\u4e86","c939ec61":"\u5236\u4f5c\u7535\u5f71\u6570\u91cf\u6392\u540d\u524d10\u7684\u516c\u53f8,","ca731236":"\u7531\u4e8e\u8be5\u9879\u76ee\u7684\u9884\u6d4b\u503c\u975e\u5e38\u5927,\u53ef\u80fd\u9700\u8981\u6a21\u578b\u5806\u53e0,\u6240\u4ee5\u8fd9\u91cc\u53ea\u662f\u62ff\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u8dd1\u4e00\u4e0b,\u6bcf\u5929\u5199\u8fd9\u4e2a\u7684\u65f6\u95f4\u6709\u9650","071bc359":"\u6570\u636e\u91cc\u5c45\u7136\u5b58\u5728\u774016\u4e2a\u56fd\u5bb6\u5408\u4f5c\u7684\u7535\u5f71,\u4f46\u662f\u597d\u50cf\u572810\u548c12\u4e2a\u56fd\u5bb6\u7684\u5236\u4f5c\u7684\u65f6\u5019\u7968\u623f\u6536\u76ca\u6700\u9ad8\u3002\u5f53\u7136\u6211\u4eec\u4e5f\u9700\u8981\u5bf9\u4ed6\u505a\u4e00\u4e2aone-hot\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u79bb\u6563\u5316\u3002\u6211\u89c9\u7684one-hot\u66f4\u4fdd\u9669\u4e00\u4e9b","54e6435e":"\u641c\u96c6\u56fd\u5bb6\u5730\u56fe\u4e2d\u5fc3\u5750\u6807,\u53ef\u4ee5\u7528\u6765\u505a\u7b80\u6613\u7684\u51e0\u4f55\u53ef\u89c6\u5316,\u540e\u9762\u6240\u505a\u7684\u53ef\u89c6\u5316\u662f\u7528\u677f\u5757\u53ef\u89c6\u5316\u7684","172e6d8e":"\u540e\u9762\u6211\u4f1a\u628a\u5269\u4e0b\u7684\u51e0\u4e2a\u7279\u5f81\u5206\u6790\u5b8c\u5e76\u4e14\u6784\u9020\u5408\u9002\u7684\u7279\u5f81\u3002","4f24b04a":"\u7968\u623f\u548c\u9884\u7b97\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6b63\u76f8\u5173","a3ef90e6":"\u7531\u4e8e\u57df\u540d\u4e0d\u5177\u5907\u53ef\u6392\u5e8f\u6027,\u6240\u4ee5\u9700\u8981\u7528one-hot\u7f16\u7801,\u907f\u514d\u6570\u5b57\u7279\u5f81\u7684\u5927\u5c0f\u5f71\u54cd\u6a21\u578b\u6548\u679c","10efb7d9":"\u4ece\u5206\u6790\u4e0a\u6765\u770b,\u7968\u623f\u7684\u65b9\u5dee\u548c\u6700\u5c0f\u503c\u53d7\u5b57\u6570\u5f71\u54cd\u4e0d\u5927,\u4f46\u662f\u6700\u5927\u503c,\u5b57\u7b26\u957f\u5ea6\u4e3a95-500\u524d\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5e73\u7a33\u5e8f\u5217\u3002\u5e76\u4e14500\u4ee5\u540e\u5448\u73b0\u51fa\u660e\u663e\u7684\u4e0b\u964d\u8d8b\u52bf\u3002\u6240\u4ee5\u7535\u5f71\u7b80\u4ecb\u7684\u5b57\u7b26\u957f\u5ea6\u5e94\u8be5\u63a7\u5236\u5728450\u4ee5\u5185","d5c59f4c":"\u4e2a\u4eba\u901a\u8fc7\u7c7b\u6bd4\u6cd5,\u901a\u8fc7\u8f66\u724c\u4e0e\u4eba\u4e4b\u95f4\u7684\u5173\u7cfb,\u57df\u540d\u53ef\u80fd\u9690\u85cf\u7740\u516c\u53f8\u7684\u5f3a\u5f31\u5173\u7cfb,\u6240\u4ee5\u9700\u8981\u7f51\u9875\u8fdb\u884c\u57df\u540d\u62bd\u53d6","42ebfd2f":"\u5f88\u660e\u663e,\u8fd9\u4e2a\u4e5f\u5c5e\u4e8e\u7f3a\u5931\u503c","04beceab":"\u5c06\u8fd148\u5c0f\u65f6\u7684\u52b3\u52a8\u6210\u679c,\u8fd8\u6709\u5f88\u591a\u5206\u6790\u6ca1\u505a\u5b8c\u3002","e54ec0ec":"\u597d\u50cf\u7968\u623f\u4e0e\u67d0\u51e0\u4e2a\u6708\u76f8\u5173\u6027\u592a\u5f3a,\u65e0\u6cd5\u901a\u8fc7\u5dee\u5206\u7684\u65b9\u6cd5\u628a\u4ed6\u53d8\u6210\u5e73\u7a33\u5e8f\u5217","1443f57d":"\u8ba9\u6211\u4eec\u8bd5\u8bd5\u5dee\u5206\u6cd5","0e55dec7":"\u5206\u6790\u5236\u9020\u56fd\u5bb6\u4e0e\u7968\u623f\u4e4b\u95f4\u7684\u8054\u7cfb","526eb37a":"\u63d0\u53d6\u7535\u5f71\u8bed\u8a00\u4fe1\u606f","f1b59d1f":"\u901a\u8fc7geopandas\u7684\u5730\u56fe\u6620\u5c04\u65b9\u6cd5\u53ef\u89c6\u5316\u56fd\u5bb6\u4e0e\u5f71\u7247\u6570\u91cf\u7684\u5173\u7cfb","d9374bda":"\u8fd9\u91cc\u670923\u4e2a\u7f3a\u5931\u503c,\u6211\u89c9\u5f97\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2\u6765\u586b\u5145,\u4f46\u662f\u6682\u65f6\u8fd8\u662f\u5148\u7528'unknow\u6765\u4ee3\u66ff","25599d64":"\u5f88\u660e\u663e,\u901a\u8fc7\u4e92\u8054\u7f51\u67e5\u8be2,\u8fd9\u4e2a\u9884\u7b97\u4e3a0\u7684\u662f\u7f3a\u5931\u503c","06f7f967":"\u9ad8\u7968\u623f\u7535\u5f71\u5f88\u5927\u6982\u7387\u4e3a\u7cfb\u5217\u7535\u5f71,\u6bd4\u5982\u901f\u5ea6\u4e0e\u6fc0\u60c5,\u5e76\u4e14\u5b83\u7684\u7cfb\u5217\u7535\u5f71\u5457\u5206\u5272\u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e2d","e759d0d9":"\u4ee5\u4e0b\u6570\u636e\u8c03\u6574\u6765\u81ea\u5185\u6838,\u76ee\u7684\u662f\u4e3a\u4e86\u4fee\u6539\u4e0d\u6b63\u786e\u7684\u4fe1\u606f","3c566ce3":"\u63a5\u4e0b\u6765,\u8ba9\u6211\u4eec\u505a\u4e00\u4e9b\u6709\u8da3\u7684\u53ef\u89c6\u5316","85b360dc":"\u5408\u5e76\u6570\u636e\u96c6\u8fdb\u884c\u6570\u636e\u6e05\u6d17\u548c\u5173\u952e\u4fe1\u606f\u63d0\u53d6.\u5185\u6838\u4e0a\u591a\u4e3a\u5faa\u73af,\u6211\u4f7f\u7528\u7684\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u3002","284f571d":"\u7535\u5f71\u7684\u7b80\u4ecb\u957f\u5ea6\u4e5f\u53ef\u80fd\u5f71\u54cd\u7535\u5f71\u7968\u623f,\u8fc7\u77ed\u53ef\u80fd\u65e0\u6cd5\u63d0\u8d77\u7528\u6237\u5174\u8da3,\u8fc7\u957f\u53ef\u80fd\u4f1a\u8ba9\u7528\u6237\u6ca1\u6709\u8010\u5fc3","b0da0e31":"\u6295\u5165\u4e0e\u4ea7\u51fa\u5e76\u4e0d\u6210\u6b63\u6bd4\uff0ccz_us_AE\u8fd9\u4e09\u4e2a\u56fd\u5bb6\u7684\u6536\u76ca\u8fdc\u9ad8\u4e8e\u5176\u4ed6\u7684\u56fd\u5bb6\u6216\u8005\u5408\u4f5c\u56fd\u5bb6","909ed386":"\u7535\u5f71\u5236\u4f5c\u4eba\u5458\u6570\u91cf\u4e5f\u53ef\u4ee5\u5f53\u4f5c\u7535\u97f3\u7968\u623f\u9884\u6d4b\u7684\u7279\u5f81","1e84682b":"\u7535\u5f71\u9884\u7b97\u6bcf\u5e74\u7684\u6700\u5927\u503c\u4e5f\u5728\u4e0d\u65ad\u6500\u5347,\u8bf4\u660e\u4ece95\u5e74\u5f00\u59cb,\u5168\u4e16\u754c\u7684\u7535\u5f71\u884c\u4e1a\u5728\u4e0d\u65ad\u98de\u901f\u53d1\u5c55","19da7c51":"\u8fd9\u4e2a\u7279\u5f81\u6ca1\u5565\u7528,\u56e0\u4e3a\u5176\u4ed6\u7279\u5f81\u4e5f\u5b58\u5728\u8fd9\u4e2a\u7279\u5f81","6096aff2":"\u770b\u8d77\u6765\u8bcd\u4e91\u5f88\u80fd\u4f53\u73b0\u6587\u672c\u7279\u5f81\u5728\u603b\u7684\u96c6\u5408\u91cc\u7684\u6570\u91cf\u6bd4\u91cd","1d923d88":"\u6570\u636e\u6316\u6398\u51fa\u6765\u7684\u6d41\u884c\u7535\u5f71\u6392\u884c\u699c","b77aa9ce":"geopandas\u65e0\u6cd5\u540c\u65f6\u7ed8\u5236\u70b9\u548c\u533a\u57df,\u5730\u7406\u7279\u5f81\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4","4b8461ad":"\u901a\u8fc7\u89c2\u5bdf,\u8fd9\u4e2a\u5e94\u8be5\u662f\u4e2a\u5e72\u6270\u7279\u5f81,\u770b\u8d77\u6765\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u5b83","f3454b09":"\u8ba1\u7b97\u4f4d\u7f6e","e1667a72":"\u6211\u662fQQ756745172\u3002\u8fd9\u662f\u7684\u6211\u7b2c\u4e00\u4e2a\u5185\u6838,\u6211\u4e00\u76f4\u4fe1\u5949\u4e00\u53e5\u8bdd:\u5929\u884c\u5065,\u541b\u5b50\u81ea\u5f3a\u4e0d\u606f","8b548f90":" \u6bcf\u5e74\u7535\u5f71\u7684\u4ea7\u51fa\u6700\u5927\u503c\u5728\u4e0d\u65ad\u589e\u957f,\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u8d8b\u52bf\u6027,","676c19fd":"\u8fd9\u6837\u5b50\u662f\u4e0d\u662f\u4ec0\u4e48\u90fd\u770b\u4e0d\u51fa\u6765\uff1f\u7531\u4e8e\u7535\u5f71\u7b80\u4ecb\u957f\u5ea6\u6ca1\u6709\u7edf\u4e00\u6807\u51c6,\u6240\u4ee5\u6211\u9700\u8981\u5206\u4f4d\u6570\u6765\u79bb\u6563\u5316\u6570\u636e,\u4f7f\u6570\u636e\u66f4\u5177\u6709\u8868\u793a\u6027","30534987":"\u7f8e\u56fd\u5728\u7535\u5f71\u5236\u4f5c\u4e0a\u4ea7\u91cf\u5f88\u5927","68bc893b":"\u4e3a\u4e86\u7f8e\u89c2,\u53ea\u663e\u793a\u524d\u4e94\u4e2a,\u539f\u59cb\u6570\u636e\u5982\u4e0b\u9762\u6240\u793a","0be7d43c":"31\u90e8\u7535\u5f71\u662f\u7ecf\u8fc7\u7ffb\u62cd\u7684","c864bc56":"\u8ba9\u6211\u4eec\u9664\u53bb\u90a3\u4e9b\u7279\u522b\u77e5\u540d\u7684\u7535\u5f71\u5e72\u6270,","b51d487c":"\u5728\u7535\u5f71\u65b9\u9762\u53ea\u8981\u662f\u6709\u7f8e\u56fd\u53c2\u4e0e\u7684\u60c5\u51b5\u4e0b,\u7535\u5f71\u7684\u6295\u8d44\u9884\u7b97\u603b\u662f\u5dee\u4e0d\u591a\u7684,\u5e76\u4e14\u8fdc\u9ad8\u4e8e\u5176\u4ed6\u56fd\u5bb6\n","ceed78fc":"\u8bcd\u4e91","f494680c":"\u7535\u5f71\u7684\u4e0a\u534a\u5e74\u548c\u4e0b\u534a\u5e74\u7968\u623f\u5dee\u4e0d\u591a,\u4f46\u662f\u4e0b\u534a\u5e74\u7684\u6ce2\u52a8\u6027\u66f4\u660e\u663e,\u6240\u4ee5\u628a\u7535\u5f71\u5b89\u6392\u5728\u4e0a\u534a\u5e74\u4e0a\u6620\u6548\u679c\u6bd4\u4e0b\u534a\u5e74\u66f4\u4f73","7614c741":"\u7535\u5f71\u7684\u65f6\u95f4\u548c\u9884\u7b97\u6ca1\u6709\u76f8\u5173\u6027","09e2099e":"\u6211\u4e0d\u5e94\u8be5\u628aNone\u4e00\u8d77\u62ff\u8fdb\u6765\u8ba1\u7b97\u7684","145ac4f9":"\u7531\u4e8e\u7535\u5f71\u6570\u636e\u5e93\u662f\u4e8c\u5b57\u6bcd\u7f29\u5199,\u4f46\u662fgeopandas\u53ea\u6709\u4e09\u5b57\u6bcd\u7f29\u5199\uff0c\u6240\u4ee5\u6211\u5fc5\u987b\u901a\u8fc7\u67e5\u8be2\u6765\u4fee\u6b63,\u4f46\u662f\u6709\u4e8c\u5b57\u6bcd\u548c\u4e09\u5b57\u6bcd\u7f29\u5199\u7684\u6570\u636e\u96c6\u5c31\u597d\u529e\u4e86","c40b6327":"\u6709\u7f51\u9875\u7684\u6bd4\u6ca1\u7f51\u9875\u7684\u7535\u5f71\u5e73\u5747\u7968\u623f\u8981\u9ad8\u51fa\u4e00\u500d\u4e0d\u6b62,\u8bf4\u660e\u6709\u4e00\u4e2a\u7f51\u9875\u5bf9\u7535\u5f71\u7684\u7968\u623f\u6709\u5f88\u5927\u5f71\u54cd","644b1e61":"\u6b64\u6bb5\u4ee3\u7801\u662f\u4e3a\u4e86\u63d0\u53d6\u6bcf\u4e00\u4e2a\u7535\u5f71\u53c2\u4e0e\u5236\u4f5c\u7684\u4eba\u5458\u59d3\u540d,\u6d77\u62a5,\u5de5\u4f5c\u548c\u90e8\u95e8,\u4e0b\u9762\u5c06\u4f1a\u5c55\u793a\u5904\u7406\u548c\u6ca1\u5904\u7406\u7684\u60c5\u51b5","bd24863b":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u677f\u5757\u4fe1\u606f\u4e86","c87e0a79":"Now let's deal with the release column.","caa67ecd":"In my opinion, the cost of making movies should be divided into millions and billions. ","09ef1d6a":"\u6cd5\u56fd\u7535\u5f71\u4ee5\u524d\u597d\u50cf\u6709\u8fc7\u9ec4\u91d1\u671f,\u82f1\u6587\u7535\u5f71\u9884\u7b97\u53d8\u5316\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7684\u770b\u8d77\u6765\u6bd4\u8f83\u5e73\u7a33","2fbe20ce":"\u7edf\u8ba1\u7537\u5973\u5360\u6bd4","bbea42c6":"\u7535\u5f71\u7684\u6d77\u62a5,\u5728\u9884\u6d4b\u4e0a\u80af\u5b9a\u662f\u7528\u4e0d\u5230\u4e86,\u4e0d\u8fc7\u7528\u6765\u505a\u53ef\u89c6\u5316\u633a\u597d\u7684,\u540e\u9762\u6211\u5c06\u4f1a\u7528\u539f\u59cb\u6570\u636e\u8fdb\u884c\u64cd\u4f5c,\u6240\u4ee5\u5728\u65b0\u6570\u636e\u8fd9\u91cc\u6211\u6253\u7b97\u5220\u9664\u5b83","576651e2":"\u5148\u8bd5\u8bd5\u5341\u5206\u4f4d\u628a","8d363647":"\u6211\u53ea\u662f\u5206\u4eab\u6211\u7684\u5de5\u4f5c\u5386\u7a0b,\u6709\u5565\u4e0d\u5bf9\u7684\u6216\u8005\u5efa\u8bae\u6b22\u8fce\u7559\u8a00\u3002","8e218b50":"\u597d\u50cf\u5de8\u5934\u516c\u53f8\u633a\u591a\u7684","eaef8050":"\u4e0a\u6620\u65f6\u95f4\u6709\u7a7a\u503c,\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u67e5\u51fa\u6765,\u586b\u4e0a ","e630bc21":"> > \u5e8f\u5217\u770b\u8d77\u6765\u5df2\u7ecf\u5e73\u7a33\u4e86","0bf07baf":"\u628a\u5b57\u7b26\u65f6\u95f4\u5206\u5272\u4e3a\u53ef\u4f7f\u7528\u7684\u6570\u5b57\u5316\u65f6\u95f4","9ddb1697":"\u6211\u4f7f\u7528\u4e2d\u4f4d\u6570\u6392\u9664\u4e86\u6781\u503c\u7684\u5e72\u6270,\u901a\u8fc7\u6570\u636e\u5206\u6790\u6691\u5047\u548c\u5bd2\u5047\u660e\u663e\u662f\u7535\u5f71\u7968\u623f\u7684\u9ec4\u91d1\u6863\u671f,\u5728\u79cb\u5b63\u5f00\u5b66\u65f6\u95f4,\u7535\u5f71\u7968\u623f\u6700\u4f4e","7d1b1e53":"\u53ef\u80fd\u662f\u6bd4\u8d5b\u65b9\u9632\u6b62\u8fc7\u62df\u5408,\u628a\u4e00\u90e8\u5206\u6570\u636e\u96c6\u7684\u9884\u7b97\u53d8\u6210\u4e860,\u6211\u4e0d\u77e5\u9053\u586b\u5145\u4e86\u540e\u7ed3\u679c\u662f\u5426\u4f1a\u4f7f\u7b97\u6cd5\u8868\u73b0\u7684\u66f4\u597d,\u6240\u4ee5,\u6211\u5e76\u4e0d\u6253\u7b97\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef","74339499":"\u5904\u7406\u5b8c\u7ffb\u62cd\u7684\u7535\u5f71\u4ee5\u540e\u6211\u4eec\u5904\u7406\u9ad8\u7968\u623f\u7535\u5f71\u662f\u5426\u5b58\u5728\u7eed\u96c6,\u9ad8\u7968\u623f\u5728\u6574\u4e2a\u7968\u623f\u9884\u6d4b\u4e2d\u5bf9\u65b9\u5dee\u5f71\u54cd\u6700\u5927","ce3b6b53":"\u7535\u5f71\u64ad\u653e\u65f6\u957f\u572880-150\u5206\u949f\u7684\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u66f4\u7a33\u5b9a\u66f4\u597d\u7684\u7968\u623f"}}