{"cell_type":{"3b4a8ee1":"code","51a88c50":"code","2576b88e":"code","2190dd70":"code","31b2af6a":"code","a6a20c1e":"code","153e5af8":"markdown","9202008b":"markdown","34b70468":"markdown","501f5f56":"markdown"},"source":{"3b4a8ee1":"import torch\nimport torch.optim as optim\nimport numpy as np\nimport pandas as pd\n\n# train \ub370\uc774\ud130\ub97c \ubc1b\uc544\uc624\uae30\nxy_train = pd.read_csv('..\/input\/2020-ai-term-project-18011817\/train_seoul_grandpark.csv', header=None, skiprows=1)\nxy_train","51a88c50":"# \ub370\uc774\ud130 \ud504\ub85c\uc138\uc2f1 (\ub0a0\uc9dc, \ubbf8\uc138\uba3c\uc9c0 \ub18d\ub3c4, \uc0c1\ub300\uc2b5\ub3c4\uc758 \uac12\uc774 \ud06c\ubbc0\ub85c \uc791\uac8c \uc2a4\ucf00\uc77c\ub9c1)\nxy_train.iloc[:,0] = xy_train.iloc[:, 0]  % 10000 \/ 100\nxy_train.iloc[:,1] = xy_train.iloc[:, 1]  \/ 10\nxy_train.iloc[:, 6] = xy_train.iloc[:, 6]  \/ 10\nxy_train","2576b88e":"# \ub370\uc774\ud130 \ud30c\uc2f1\nx_data = xy_train.iloc[:,:-1]\ny_data = xy_train.iloc[:,-1]\n\n# numpy \ud615\uc73c\ub85c \ubcc0\ud658\nx_train = np.array(x_data)\ny_train = np.array(y_data)\n\n# tensor \ud615\uc73c\ub85c \ubcc0\ud658\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train).unsqueeze(1)","2190dd70":"# W, b\uac12\uc5d0 \ub300\ud55c \ud559\uc2b5\nW = torch.zeros((7, 1), requires_grad=True)\nb = torch.zeros(1, requires_grad=True)\n\noptimizer = optim.SGD([W, b], lr = 1e-5, momentum=0.9)\n\nepochs = 50000\n\nfor epoch in range(epochs + 1):\n    \n  hypothesis = x_train.matmul(W) + b\n\n  cost = torch.mean((y_train - hypothesis)**2)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 5000 == 0:\n    print(\"{} {:.2f}\".format(epoch, cost.item()))","31b2af6a":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubc1b\uc544\uc624\uae30\nxy_test = pd.read_csv('..\/input\/2020-ai-term-project-18011817\/test_seoul_grandpark.csv', header=None, skiprows=1)\n\n# \ub370\uc774\ud130 \ud504\ub85c\uc138\uc2f1 (train \ub370\uc774\ud130\uc640 \ub3d9\uc77c\ud558\uac8c \uc804\ucc98\ub9ac)\nxy_test.iloc[:, 0] = xy_test.iloc[:, 0]  % 10000 \/ 100\nxy_test.iloc[:, 1] = xy_test.iloc[:, 1]  \/ 10\nxy_test.iloc[:, 6] = xy_test.iloc[:, 6]  \/ 10\n\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c tensor\ud615\uc73c\ub85c \ubcc0\ud658\nx_test = torch.FloatTensor(np.array(xy_test))\n\nprediction = x_test.matmul(W) + b","a6a20c1e":"# \uc81c\ucd9c \ud615\uc2dd \ub370\uc774\ud130 \ubc1b\uc544\uc624\uae30\nsubmit = pd.read_csv('..\/input\/2020-ai-term-project-18011817\/submit_sample.csv')\n\nfor i in range(len(prediction)):\n  submit[\"Expected\"][i] = prediction[i].item()\n\nsubmit.to_csv('baseline.csv', mode='w', header=True, index = False)","153e5af8":"# \ubaa8\ub378 \ud559\uc2b5","9202008b":"# \ub370\uc774\ud130 \uc608\uce21","34b70468":"# \ub370\uc774\ud130 \ub85c\ub354","501f5f56":"# kaggle \uc81c\ucd9c"}}