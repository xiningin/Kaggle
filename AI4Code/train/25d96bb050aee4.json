{"cell_type":{"eca75665":"code","bfd8d389":"code","6a4891b3":"code","80bf9c3c":"code","1a35d8df":"code","15eda73d":"code","634f6aa1":"code","d8287bb4":"code","464c718b":"code","dcdbf336":"code","0b1ba915":"code","f13628e7":"code","8e2f0b7b":"code","dde0d2bf":"code","cc0835a6":"code","4f627cfd":"code","f0b12467":"code","81934153":"code","1b991683":"code","907473d0":"code","6a37dd26":"code","9062c024":"code","fe7a275e":"markdown","179a9af3":"markdown","f5a625e8":"markdown","a4eec208":"markdown","bcff4d1e":"markdown","b3c91289":"markdown","3a5618fe":"markdown","ce2cc8d2":"markdown","f7b183a6":"markdown","10958923":"markdown"},"source":{"eca75665":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom IPython.display import FileLink\n\npd.set_option('float_format', '{:.4f}'.format)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bfd8d389":"train_df = pd.read_csv('..\/input\/iiit-nr-hackathon\/Student_train.csv', index_col = 'Unnamed: 0')\ntest_df = pd.read_csv('..\/input\/iiit-nr-hackathon\/Student_test.csv', index_col = 'Unnamed: 0')","6a4891b3":"train = train_df.select_dtypes(['int64', 'float64'])\ntest = test_df.select_dtypes(['int64', 'float64'])\n#train_df = train_df.reset_index()\n#test_df = test_df.reset_index()","80bf9c3c":"train_df.head()","1a35d8df":"corr_matrix = train_df.corr()\nfig, ax = plt.subplots(figsize=(15, 12))\nsns.heatmap(corr_matrix, vmax=0.8, square=True)\nplt.show()","15eda73d":"# Visualizing the unique value count in each feature\ncat_count = train.apply(lambda x: x.value_counts().shape[0]).sort_values()\ngo.Figure(data=go.Bar(x=cat_count.index, y=cat_count))","634f6aa1":"# Categorical columns in numerical columns\ncats_in_nums = cat_count.loc[cat_count < 50].index\n\n# Converting the type of filtered numerical columns to categorical\ntrain.loc[:, cats_in_nums] = (train.loc[:, cats_in_nums]).astype('object')\ncats_in_nums = list(cats_in_nums)\ncats_in_nums.remove('G3')\ntest.loc[:, cats_in_nums] = (test.loc[:, cats_in_nums]).astype('object')\n\ntrain.info()","d8287bb4":"# Extracting the SalePrice from training data\ntrain['G3'] = train['G3'].astype(int)\ny_train = train['G3']\ntrain = train.drop(['G3'], axis=1)","464c718b":"train.info()","dcdbf336":"test.info()","0b1ba915":"num_columns = train.select_dtypes(['object']).columns\ntrain_num = train.loc[:, num_columns]\nnum_columns = test.select_dtypes(['object']).columns\ntest_num = test.loc[:, num_columns]","f13628e7":"cat_columns = train.select_dtypes(['object']).columns\ncat_imputer = SimpleImputer(strategy = 'most_frequent')\ntrain_cat = cat_imputer.fit_transform(train.loc[:, cat_columns].values)\ntest_cat = cat_imputer.transform(test.loc[:, cat_columns].values)","8e2f0b7b":"one_hot_encoder = OneHotEncoder()\ncombined_cat_data = np.vstack([train_cat, test_cat])\ncombined_cat = one_hot_encoder.fit_transform(combined_cat_data).todense()\n\ntrain_cat = combined_cat[:train.shape[0]]\ntest_cat = combined_cat[train.shape[0]:]","dde0d2bf":"X_train = np.hstack((train_num, train_cat))\nX_test = np.hstack((test_num, test_cat))","cc0835a6":"models = [SVR(kernel='linear'),\n          RandomForestRegressor(n_estimators=200, random_state=1)]\nerrors = []\nfor model in models:\n    model_name = model.__class__.__name__\n    error = np.sqrt(abs(cross_val_score(model, X_train, y_train, cv=5, scoring='neg_mean_squared_error'))).mean()\n    errors.append([model_name, error])\n    \nresult_df = pd.DataFrame(errors, columns=['Model name', 'Average error'])","4f627cfd":"result_df","f0b12467":"# Gamma\ngamma = ['auto', 'scale']\n# C\nC = [0.1, 0.5, 1, 50, 100, 1000]\n# epsilon\nepsilon = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10]\n\n# Creating the random grid\nrandom_grid = {'gamma': gamma,\n               'C': C,\n               'epsilon': epsilon\n              }\n\n# Creating an instance of `SVR`\nestimator = SVR(kernel='linear', gamma='auto')\n# Performing random search of parameters\nrf_random = RandomizedSearchCV(estimator, random_grid,\n                               n_iter=100, cv=5, verbose=2,\n                               random_state=7, n_jobs=-1)\n# Commenting out the below lines as the tuning takes long time to complete\n# rf_random.fit(X_train, y_train)","81934153":"# Get the CV results\n# rf_random.cv_results_","1b991683":"# Get the best hyperparameters\n# rf_random.best_params_","907473d0":"estimator = SVR(C=0.1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale',\n                kernel='linear', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\nerror = np.sqrt(abs(cross_val_score(estimator, X_train, y_train, cv=5, scoring='neg_mean_squared_error'))).mean()\nprint(f'Model: {estimator.__class__.__name__}, Average error: {error}')\n\nestimator.fit(X_train, y_train)\npredictions = estimator.predict(X_test)","6a37dd26":"submission_df = pd.DataFrame({'Id': test_df.index, 'G3': predictions.flatten()})\nsubmission_df.to_csv('submission.csv', index=False)\nFileLink('submission.csv')","9062c024":"submission_df.head()","fe7a275e":"## Exploratory Data Analysis","179a9af3":"**Performing cross-validation of different models on 5 folds of training data**","f5a625e8":"**Creating output CSV file in the required format**","a4eec208":"**Choosing the regression model ('SVR') with lowest RMSE and performing hyperparameter tuning using RandomizedSearchCV**","bcff4d1e":"**Based on the hyperparameter tuning using the RandomizedSearchCV the following are the parameters of the best estmator**\n\n(C=0.1, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='scale', kernel='linear', max_iter=-1, shrinking=True, tol=0.001, verbose=False)","b3c91289":"**One-hot encoding the categorical columns**","3a5618fe":"**Cross-validating the model with the best hyperparameters on the train data and using it to predict the test data**","ce2cc8d2":"**Combining the processed numerical and categorical features**","f7b183a6":"## Modelling","10958923":"**Checking for features with missing values**"}}