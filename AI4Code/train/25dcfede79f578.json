{"cell_type":{"7e36e7da":"code","9b323c41":"code","69409966":"code","961bbc2e":"code","00c015d3":"code","02f0de72":"code","b3f58e6d":"code","50dc1a3f":"code","6b3e03ad":"code","5156245e":"code","b2364a6b":"code","41fe805f":"code","082b5250":"markdown","f00f0aef":"markdown","7e556528":"markdown","fd275c04":"markdown"},"source":{"7e36e7da":"# ..\/input\/santaner\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\n\ndf = pd.read_csv('..\/input\/santaner\/train.csv', encoding='latin-1')\n\nprint('data shape:', df.shape)\n# print(df.head())\ndf.info()\n\n# TARGET : 0 (\ub9cc\uc871), 1(\ubd88\ub9cc\uc871)\nprint(df['TARGET'].value_counts())\nunsatisfied_cnt = df[df['TARGET'] == 1].TARGET.count()\ntotal_cnt = df.TARGET.count()\nprint('Unsatisfied customer ratio {0:.2f}'.format(unsatisfied_cnt \/ total_cnt))","9b323c41":"df.describe()","69409966":"# var3 \uceec\ub7fc\uc758 \uacbd\uc6b0 min \uac12\uc774 -999999.000000 \uc774\ub2e4. NaN \uc774\ub098 \ud2b9\uc815 \uc608\uc678 \uac12\uc744 -999999 \ub85c \ud588\uc744 \uac00\ub2a5\uc131\uc774 \ud07c\n# var3 \uc758 -99999 \uac12\uc744 \uac00\uc7a5 \ub9ce\uc740 \uac12\uc778 2 \ub85c \ubcc0\uacbd\ndf['var3'].replace(-999999, 2, inplace=True)\n\n# ID \ud53c\ucc98\ub294 \ub2e8\uc21c \uc2dd\ubcc4\uc790\uc774\ubbc0\ub85c drop()\ndf.drop('ID', axis=1, inplace=True)","961bbc2e":"# \ud53c\ucc98 \uc138\ud2b8\uc640 \ub808\uc774\ube14 \uc138\ud2b8 \ubd84\ub9ac. \ub808\uc774\ube14 \uceec\ub7fc\uc740 DF\uc758 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \uc704\uce58\ud574 -1\ub85c \ubd84\ub9ac\nx_features = df.iloc[:, :-1]\ny_labels = df.iloc[:, -1]\nprint('\ud53c\ucc98 \ub370\uc774\ud130 shape:{0}'.format(x_features.shape))","00c015d3":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x_features, y_labels, test_size=0.2, random_state=0)\ntrain_cnt = y_train.count()\ntest_cnt = y_test.count()\n\nprint('\ud559\uc2b5 \uc138\ud2b8 shape:{0}, \ud14c\uc2a4\ud2b8 \uc138\ud2b8 shape:{1}'.format(x_train.shape, x_test.shape))\n\nprint('\ud559\uc2b5 \uc138\ud2b8 \ub808\uc774\ube14 \uac12 \ubd84\ud3ec \ube44\uc728')\nprint(y_train.value_counts() \/ train_cnt)\nprint('\\n \ud14c\uc2a4\ud2b8 \uc138\ud2b8 \ub808\uc774\ube14 \uac12 \ubd84\ud3ec \ube44\uc728')\nprint(y_test.value_counts() \/ test_cnt)","02f0de72":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ud3c9\uac00 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \uc0ac\uc6a9\ud558\uba74 \uacfc\uc801\ud569 \uac00\ub2a5\uc131\uc744 \uc99d\uac00\uc2dc\ud0a4\uba70 \uc62c\ubc14\ub978 \ubc29\ubc95\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc5f0\uc2b5\uc744 \uc704\ud574 \uadf8\ub807\uac8c \uc9c4\ud589\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nimport time\n# n_estimator \ub294 500, random_state = 156\nxgb = XGBClassifier(n_estimators=500, random_state=156)\n\n\nstart = time.time()\n# \uc131\ub2a5 \ud3c9\uac00 \uc9c0\ud45c\ub97c auc\ub85c, \uc870\uae30 \uc911\ub2e8 \ud30c\ub77c\ubbf8\ud130\ub294 100\uc73c\ub85c \uc124\uc815.\nxgb.fit(x_train, y_train, early_stopping_rounds=100, eval_metric='auc', eval_set=[(x_train, y_train), (x_test, y_test)])\nxgb_roc_auc = roc_auc_score(y_test, xgb.predict_proba(x_test)[:, 1], average='macro')\n\nprint('ROC AUC:{0:.4f}'.format(xgb_roc_auc))\nend = time.time()\nprint('\uc18c\uc694 \uc2dc\uac04(s):{0:.4f} sec'.format(end - start))","b3f58e6d":"from sklearn.model_selection import GridSearchCV\nimport time\n\nstart = time.time()\n# \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud14c\uc2a4\ud2b8\uc758 \uc218\ud589 \uc18d\ub3c4\ub97c \ud5a5\uc0c1 \uc2dc\ud0a4\uae30 \uc704\ud574 n_estimators = 100 \uc73c\ub85c \uac10\uc18c\nxgb = XGBClassifier(n_estimators=100)\n\nparams = {'max_depth':[5,7], 'min_child_weight':[1,3], 'colsample_bytree':[0.5, 0.75]}\n\n# cv = 3 \uc73c\ub85c \uc9c0\uc815 (3\ud68c \ubc18\ubcf5)\ngscv = GridSearchCV(xgb, param_grid=params, cv=3)\ngscv.fit(x_train, y_train, early_stopping_rounds=30, eval_metric='auc', eval_set=[(x_train, y_train), (x_test, y_test)])\n\nprint('GridSearchCV \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130:', gscv.best_params_)\n\nxgb_roc_score = roc_auc_score(y_test, gscv.predict_proba(x_test)[:, 1], average='macro')\nend = time.time()\nprint('ROC AUC:{0:.4f}'.format(xgb_roc_score))\nprint('\uc18c\uc694\uc2dc\uac04 : {0:.4f} sec'.format(end - start))","50dc1a3f":"# n_estimators \ub294 1000 \uc73c\ub85c \uc99d\uac00\uc2dc\ud0a4\uace0, learning_rate = 0.02 \ub85c \uac10\uc18c, reg_alpha=0.03\uc73c\ub85c \ucd94\uac00\ud568\nstart = time.time()\nxgb = XGBClassifier(n_estimators=1000, random_state=156, learning_rate=0.02, max_depth=7,\n                   min_child_weight=1, colsample_bytree=0.75, reg_alpha=0.03)\n\n# \uc131\ub2a5 \ud3c9\uac00 \uc9c0\ud45c\ub97c auc\ub85c, \uc870\uae30 \uc911\ub2e8 \ud30c\ub77c\ubbf8\ud130 \uac12\uc740 200 \uc73c\ub85c \uc124\uc815\ud558\uace0 \ud559\uc2b5 \uc218\ud589\nxgb.fit(x_train, y_train, early_stopping_rounds=200, eval_metric='auc', eval_set=[(x_train, y_train), (x_test, y_test)])\n\nxgb_roc_score = roc_auc_score(y_test, xgb.predict_proba(x_test)[:, 1], average='macro')\nend = time.time()\nprint('ROC AUC:{0:.4f}'.format(xgb_roc_score))\nprint('\uc18c\uc694\uc2dc\uac04 :{0:.4f} sec'.format(end - start))","6b3e03ad":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 8))\nplot_importance(xgb, ax=ax, max_num_features=20, height=0.4)","5156245e":"from lightgbm import LGBMClassifier\n\nlgbm = LGBMClassifier(n_estimators=500)\n\nevals = [(x_test, y_test)]\nstart = time.time()\nlgbm.fit(x_train, y_train, early_stopping_rounds=100, eval_metric='auc', eval_set=evals, verbose=True)\n\nlgbm_roc_score = roc_auc_score(y_test, lgbm.predict_proba(x_test)[:, 1], average='macro')\nend = time.time()\nprint('ROC AUC:{0:.4f} '.format(lgbm_roc_score))\nprint('\uc18c\uc694\uc2dc\uac04 : {0:.4f} sec'.format(end - start))","b2364a6b":"from sklearn.model_selection import GridSearchCV\n\n# \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud14c\uc2a4\ud2b8\uc758 \uc218\ud589 \uc18d\ub3c4\ub97c \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574 n_estimators = 200 \uc73c\ub85c \uac10\uc18c\nlgbm = LGBMClassifier(n_estimators=200)\n\nparams = {'num_levels': [32, 64],\n         'max_depth':[128, 160],\n         'min_child_samples':[60, 100],\n         'subsample':[0.8, 1]}\n\n# cv = 3 \uc73c\ub85c \uc9c0\uc815\nstart = time.time()\ngscv = GridSearchCV(lgbm, param_grid=params, cv=3)\ngscv.fit(x_train, y_train, early_stopping_rounds=30, eval_metric='auc',\n        eval_set=[(x_train, y_train), (x_test, y_test)])\n\nprint('GridSearchCV \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130:', gscv.best_params_)\nlgbm_roc_score = roc_auc_score(y_test, gscv.predict_proba(x_test)[:, 1], average='macro')\nend = time.time()\nprint('ROC AUC:{0:.4f}'.format(lgbm_roc_score))\nprint('\uc18c\uc694\uc2dc\uac04 : {0:.4f} sec'.format(end - start))\n\n# \uc704 \ucf54\ub4dc \uc2e4\ud589 \uacb0\uacfc\n# GridSearchCV \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130: {'max_depth': 128, 'min_child_samples': 60, 'num_levels': 32, 'subsample': 0.8}\n# ROC AUC:0.8406\n# \uc18c\uc694\uc2dc\uac04 : 111.1701 sec","41fe805f":"# \uc704 GridSearchCV \uc5d0\uc11c \ub098\uc628 Best Param \uc744 \uc801\uc6a9\ud574 \ub2e4\uc2dc \uc2e4\ud589\nlgbm = LGBMClassifier(n_estimators=1000, num_leaves=32, subsample=0.8, min_child_samples=60, max_depth=128)\n\nstart = time.time()\nevals = [(x_test, y_test)]\nlgbm.fit(x_train, y_train, early_stopping_rounds=100, eval_metric='auc', eval_set=evals, verbose=True)\n\nlgbm_roc_score = roc_auc_score(y_test, lgbm.predict_proba(x_test)[:, 1], average='macro')\nend = time.time()\nprint('ROC AUC:{0:.4f}'.format(lgbm_roc_score))\nprint('\uc18c\uc694\uc2dc\uac04 : {0:.4f} sec'.format(end - start))\n\n# \uc704 \uc218\ud589 \uacb0\uacfc\n# ROC AUC:0.8418\n# \uc18c\uc694\uc2dc\uac04 : 2.7946 sec","082b5250":"#### XGBoost","f00f0aef":"#### EDA","7e556528":"## kaggle Santander Customer Satisfaction\n### \uce90\uae00 \uc0b0\ub2e8\ud14c\ub974 \uace0\uac1d \ub9cc\uc871 \uc608\uce21 (feat. \ud30c\uc774\uc36c \uba38\uc2e0 \ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc)\n#### \ub370\uc774\ud130 \ud655\uc778 \ubc0f \ubd84\uc11d","fd275c04":"#### LightGBM"}}