{"cell_type":{"2acd4319":"code","78d68b48":"code","7b8b5d1e":"code","d11977b5":"code","4ca3f6ff":"code","bee4cb9c":"code","a3a2c758":"code","64313ce1":"markdown"},"source":{"2acd4319":"!pip install addict","78d68b48":"import torch\nfrom torch import nn\nfrom torch.optim import AdamW\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nfrom torch.utils.data import Dataset, DataLoader\nimport albumentations as A\nfrom albumentations.pytorch import ToTensor\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom addict import Dict\nfrom PIL import Image\nimport os","7b8b5d1e":"train_config = Dict({\n    \"path\": \"..\/input\/100-bird-species\/train\",\n    \"shape\": (224, 224),\n    \"batch_size\": 16,\n    \"num_workers\": 4,\n    \"augmentations\": A.Compose([\n        A.HorizontalFlip(p=0.5),\n        ToTensor(),\n    ])\n})\n\n\nvalidation_config = Dict({\n    \"path\": \"..\/input\/100-bird-species\/valid\",\n    \"shape\": (224, 224),\n    \"batch_size\": 32,\n    \"num_workers\": 4,\n    \"augmentations\": None,\n})","d11977b5":"class BirdsDataset(Dataset):\n    def __init__(self, path, augmentations=None, shape=(224, 224)):\n        self.__augmentations = augmentations\n        self.__shape = shape\n        self.__images_labels = []\n        self.labels = []\n        \n        if os.path.exists(path):\n            self.__path = path\n            self.__labels = os.listdir(self.__path)\n            for label in self.__labels:\n                label_path = os.path.join(self.__path, label)\n                if os.path.isdir(label_path):\n                    images = os.listdir(label_path)\n                    \n                    for image in images:\n                        if image.endswith(\"png\") or image.endswith(\"jpg\"):\n                            image_path = os.path.join(label_path, image)\n                            \n                            info = (image_path, label)\n                            self.__images_labels.append(info)\n                    \n                    self.labels.append(label)\n                \n                else:\n                    pass\n\n        else:\n            raise Exception(f\"Path '{path}' for DataFrame doesn't exist!\")\n    \n        \n    def __getitem__(self, index):\n        image_path, label = self.__images_labels[index]\n        \n        image = self.__load_image(image_path)\n        \n        if self.__augmentations is not None:\n            image = self.__augmentations(image=image.permute(1, 2, 0).numpy())[\"image\"]\n        \n        label = self.labels.index(label)\n        return Dict({\n            \"image\": image,\n            \"label\": label,\n        })\n            \n            \n    def __len__(self):\n        return len(self.__images_labels)\n    \n    \n    def __load_image(self, path, channels=\"RGB\"):\n        width, height = self.__shape\n        \n        loader = A.Compose([\n            A.Resize(width, height),\n            ToTensor()\n        ])\n        \n        image_array = np.array(Image.open(path).convert(channels))\n        return loader(image=image_array)[\"image\"]","4ca3f6ff":"train_dataset = BirdsDataset(path=train_config.path,\n                             augmentations=train_config.augmentations,\n                             shape=train_config.shape)\n\n\nvalidation_dataset = BirdsDataset(path=validation_config.path,\n                                  augmentations=validation_config.augmentations,\n                                  shape=validation_config.shape)\n\nprint(f\"Train Size: {len(train_dataset)}\")\nprint(f\"Validation Size: {len(validation_dataset)}\")\nprint(f\"Num Classes: {len(train_dataset.labels)}\")","bee4cb9c":"def collate_fn(batch):\n    images, labels = [], []\n    for item in batch:\n        image = item[\"image\"].tolist()\n        images.append(image)\n        \n        label = item[\"label\"]\n        labels.append(label)\n    \n    return Dict({\n        \"images\": torch.tensor(images),\n        \"labels\": torch.tensor(labels)\n    })","a3a2c758":"train_loader = DataLoader(train_dataset,\n                          shuffle=True,\n                          num_workers=train_config.num_workers,\n                          pin_memory=True,\n                          batch_size=train_config.batch_size,\n                          collate_fn=collate_fn)\n\n\nvalidation_loader = DataLoader(validation_dataset,\n                          shuffle=True,\n                          num_workers=validation_config.num_workers,\n                          pin_memory=True,\n                          batch_size=validation_config.batch_size,\n                          collate_fn=collate_fn)","64313ce1":"# To be continued..."}}