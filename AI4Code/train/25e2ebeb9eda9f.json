{"cell_type":{"f3b57b8c":"code","8829dca1":"code","e3797aaa":"code","343e2dc7":"code","a1e11863":"code","2144df0f":"code","14d5c029":"code","9a4abf2a":"code","addc2d28":"code","cf34ac2c":"code","8c43fa82":"code","6c6054fe":"code","17d7024f":"code","e5c754b8":"code","7e909994":"code","7a32bf7b":"code","7600a010":"code","310b195e":"code","b82403fb":"code","9f2b6058":"code","b05dab24":"code","e870f10d":"code","bc5c9ed3":"code","15880947":"code","38496a21":"code","4a53653c":"code","d4492d5c":"code","3933842d":"code","49aba854":"code","66bce670":"code","466de8e4":"code","be7eba9a":"code","a29d659c":"code","2115305d":"code","37ead973":"code","c1cf429d":"code","cb131c1a":"code","a0d76938":"code","ff55cc52":"code","ba5be58d":"code","c3819cae":"code","608629aa":"code","236aa3a7":"code","88f3bc15":"code","421b6c1e":"code","c871da7c":"code","e0a2055e":"code","c22fcc8c":"code","40976b56":"markdown","b9b3b3e7":"markdown","d4a68651":"markdown","242ef608":"markdown","8064f350":"markdown","3a6c8334":"markdown","b67848ec":"markdown","4d89682c":"markdown","357f6ec0":"markdown"},"source":{"f3b57b8c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8829dca1":"# Reading csv files with two variables named 'train','test','submission'\ntrain=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\ntest=pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")\nsubmission=pd.read_csv(\"..\/input\/home-data-for-ml-course\/sample_submission.csv\")","e3797aaa":"# importing different libraries for usage in our notebook\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","343e2dc7":"# Reading csv file's first 5 rows to understand train data given\ntrain.head()","a1e11863":"# Reading csv file's first 5 rows to understand test data given\ntest.head()","2144df0f":"# Using info() method as it prints information about the dataframe and the number of cells in each column (non-null values)\ntrain.info()","14d5c029":"# The corr() function used here is used to compute pairwise correlation of columns,excluding NA\/null values\n# Using figure() method to set (height,width) of our plot\n# Creating heatmap to see correlation of Saleprice with other features\ntrain_corr = train.corr()\nplt.figure(figsize=(22,22))\nsns.heatmap(train_corr, vmin=-1, vmax=1, cmap=\"viridis\", annot=True, linewidth=0.1)","9a4abf2a":"# Fetching Out Some Main Features With Good Correlation with Saleprice.\n# Creating a new variable named 'main' to store Main Features.\nmain=['LotArea','OverallQual','YearBuilt','YearRemodAdd','1stFlrSF','GrLivArea','FullBath','TotRmsAbvGrd']","addc2d28":"# Checking out main with values stored in it\nmain","cf34ac2c":"# Assigning new variable named 'train_target' to Saleprice\n# Assigning new varibales to different features named 'feature1,feature2,......,feature8'\ntrain_target=train['SalePrice']\nfeature1=train['LotArea']\nfeature2=train['OverallQual']\nfeature3=train['YearBuilt']\nfeature4=train['YearRemodAdd']\nfeature5=train['1stFlrSF']\nfeature6=train['GrLivArea']\nfeature7=train['FullBath']\nfeature8=train['TotRmsAbvGrd']","8c43fa82":"# Checking out counts of 'LotArea' feature using value_counts() method as it returns object containing counts of unique values\ntrain['LotArea'].value_counts()","6c6054fe":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['LotArea'].value_counts().head(10).plot.bar(color=\"seagreen\",xlabel=\"LotArea\",ylabel=\"Count\",title=\"Value Counts Graph For LotArea\")","17d7024f":"# Checking out counts of 'OverallQual' feature using value_counts() method\ntrain['OverallQual'].value_counts()","e5c754b8":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['OverallQual'].value_counts().head(10).plot.bar(color=\"seagreen\",xlabel=\"OverallQual\",ylabel=\"Count\",title=\"Value Counts Graph For OverallQual\")","7e909994":"# Checking out counts of 'YearBuilt' feature using value_counts() method\ntrain['YearBuilt'].value_counts()","7a32bf7b":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['YearBuilt'].value_counts().head(10).plot.bar(color='seagreen',xlabel=\"YearBuilt\",ylabel=\"Count\",title=\"Value Counts Graph For YearBuilt\")","7600a010":"# Checking out counts of 'YearRemodAdd' feature using value_counts() method\ntrain['YearRemodAdd'].value_counts()","310b195e":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['YearRemodAdd'].value_counts().head(10).plot.bar(color='seagreen',xlabel=\"YearRemodAdd\",ylabel=\"Count\",title=\"Value Counts Graph For YearRemodAdd\")","b82403fb":"# Checking out counts of '1stFlrSF' feature using value_counts() method\ntrain['1stFlrSF'].value_counts()","9f2b6058":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['1stFlrSF'].value_counts().head(10).plot.bar(color='seagreen',xlabel=\"1stFlrSF\",ylabel=\"Count\",title=\"Value Counts Graph For 1stFlrSF\")","b05dab24":"# Checking out counts of 'GrLivArea' feature using value_counts() method\ntrain['GrLivArea'].value_counts()","e870f10d":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['GrLivArea'].value_counts().head(10).plot.bar(color='seagreen',xlabel=\"GrLivArea\",ylabel=\"Count\",title=\"Value Counts Graph For GrLivArea\")","bc5c9ed3":"# Checking out counts of 'FullBath' feature using value_counts() method\ntrain['FullBath'].value_counts()","15880947":"# Plotting a bargraph of values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['FullBath'].value_counts().plot.bar(color='seagreen',xlabel=\"FullBath\",ylabel=\"Count\",title=\"Value Counts Graph For FullBath\")","38496a21":"# Checking out counts of 'TotRmsAbvGrd' feature using value_counts() method\ntrain['TotRmsAbvGrd'].value_counts()","4a53653c":"# Plotting a bargraph of first 10 values we got from above output of value_counts\nplt.figure(figsize=(7,5))\ntrain['TotRmsAbvGrd'].value_counts().head(10).plot.bar(color='seagreen',xlabel=\"TotRmsAbvGrd\",ylabel=\"Count\",title=\"Value Counts Graph For TotRmsAbvGrd\")","d4492d5c":"# Here feature1='LotArea'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature1,color='seagreen').set(title='Scatterplot for Saleprice and LotArea')","3933842d":"# Here feature2='OverallQual'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature2,color='seagreen').set(title='Scatterplot for Saleprice and OverallQual')","49aba854":"# Here feature3='YearBuilt'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature3,color='seagreen').set(title='Scatterplot for Saleprice and YearBuilt')","66bce670":"# Here feature4='YearRemodAdd'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature4,color='seagreen').set(title='Scatterplot for Saleprice and YearRemodAdd')","466de8e4":"# Here feature5='1stFlrSF'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature5,color='seagreen').set(title='Scatterplot for Saleprice and 1stFlrSF')","be7eba9a":"# Here feature6='GrLivArea'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature6,color='seagreen').set(title='Scatterplot for Saleprice and GrLivArea')","a29d659c":"# Here feature7='FullBath'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature7,color='seagreen').set(title='Scatterplot for Saleprice and FullBath')","2115305d":"# Here feature8='TotRmsAbvGrd'\nplt.figure(figsize=(7,5))\nsns.set_style(\"darkgrid\")\nsns.scatterplot(train_target,feature8,color='seagreen').set(title='Scatterplot for Saleprice and TotRmsAbvGrd')","37ead973":"# Boxplot is used here as it a measure of how well distributed the data in a data set is.\nplt.figure(figsize=(7,5))\nsns.boxplot(x=\"OverallQual\", y=\"SalePrice\", data=train).set(title='Boxplot for Saleprice and OverallQual')","c1cf429d":"# Regression plot is used here as this method is used to plot data and a linear regression model fit.\nplt.figure(figsize=(7,5))\nsns.regplot(x=\"GrLivArea\", y=\"SalePrice\",color='seagreen', data=train)","cb131c1a":"train_new= train[main].copy()\ntest_new = test[main].copy()","a0d76938":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid= train_test_split(train_new,train_target, train_size=0.8, test_size=0.2,\n                                                      random_state=0)","ff55cc52":"X_train.head()","ba5be58d":"X_valid.head()","c3819cae":"y_train.head()","608629aa":"y_valid.head()","236aa3a7":"# Using Linear Regression Model\nfrom sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nregr.fit(X_train, y_train)\npred=regr.predict(X_valid)\nprint(regr.score(X_valid, y_valid))","88f3bc15":"# Using Random Forest Regression Model \nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 150, random_state = 0)\nregressor.fit(X_train, y_train)  \npred=regressor.predict(X_valid)\nprint(regressor.score(X_valid, y_valid))","421b6c1e":"# Using Decision Tree Regressor Model\nfrom sklearn.tree import DecisionTreeRegressor\nregressorTree = DecisionTreeRegressor(random_state = 0)\nregressorTree.fit(X_train, y_train)  \npred=regressorTree.predict(X_valid)\nprint(regressorTree.score(X_valid, y_valid))","c871da7c":"from sklearn.metrics import mean_absolute_error\ndef score_model(model, X_t=X_train, X_v=X_valid, y_t=y_train, y_v=y_valid):\n    model.fit(X_t, y_t)\n    preds = model.predict(X_v)\n    return mean_absolute_error(y_v, preds)","e0a2055e":"# Submission Column\nregressor.fit(train_new,train_target)\npreds_test = regressor.predict(test_new)\n\nmy_submission = pd.DataFrame({'Id':test.Id, 'SalePrice': preds_test})\nmy_submission.to_csv('submission.csv', index=False)\n","c22fcc8c":"print(my_submission)","40976b56":"Having a closer look on the **Second most correlated feature (GrLivArea)** we observe that as the (above ground) living area of the house increases the price increases.","b9b3b3e7":"# MODEL BUILDING","d4a68651":"# Plotting Bar Graphs Using value_counts()","242ef608":"# Scatter Plot To Find Correlation","8064f350":"# Reading CSV Files and Importing Libraries","3a6c8334":"# Submission","b67848ec":"# Creating Heatmap To See Correlation Of Different Features With Each Other","4d89682c":"Having a closer look on the **most correlated feature (OverallQual)** we observe that as the overall quality of the house increases when the price increases.","357f6ec0":"# "}}