{"cell_type":{"dd4336b2":"code","0cb68e2b":"code","63e36c81":"code","38bd1b98":"code","b364b80d":"code","baf72942":"code","d4648bde":"code","7b40254b":"code","58adf1cd":"code","422df3b4":"code","08750b47":"code","28d6dd24":"code","1817b80e":"code","ffb5baca":"code","664fad22":"markdown","2132f109":"markdown","818f058d":"markdown","19a3e27b":"markdown","f0d6a3fa":"markdown","17a7e628":"markdown"},"source":{"dd4336b2":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n","0cb68e2b":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","63e36c81":"import tokenization","38bd1b98":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","b364b80d":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","baf72942":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","d4648bde":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","7b40254b":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","58adf1cd":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","422df3b4":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","08750b47":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=5,\n    batch_size=16\n)\n\nmodel.save('model.h5')","28d6dd24":"test_pred = model.predict(test_input)","1817b80e":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","ffb5baca":"submission.head()","664fad22":"##  Loading tokenizer from the bert layer:","2132f109":"##  Encoding the text into tokens, masks, and segment flags:<br>","818f058d":"## Model: Build, Train, Predict, Submit:","19a3e27b":"##  Loading BERT from the Tensorflow Hub:","f0d6a3fa":"##  Loading data:","17a7e628":"\n### Getting tokenizer"}}