{"cell_type":{"3ed25f24":"code","0c9940db":"code","e9be185a":"code","00637f0e":"code","03831051":"code","8938bcc5":"code","f892a927":"code","3393577a":"code","3f2ad538":"code","ee02e959":"code","8ad71f85":"code","7cfd37ed":"code","c13987ff":"code","8e8f95c5":"code","4664100e":"code","06702379":"code","a1c1460b":"markdown","f9c8ae03":"markdown","892ce1e8":"markdown","dd69fc92":"markdown","67c3bc17":"markdown","e43130f8":"markdown","0abe7a72":"markdown","7e8571d5":"markdown","308c19e9":"markdown","4cfdde0c":"markdown","1ed7d1b8":"markdown","fcb6ca98":"markdown","f617b7e2":"markdown","a4bd3258":"markdown","a4574031":"markdown","0f02360a":"markdown","62cf0628":"markdown","4c039550":"markdown","34e7bec4":"markdown","93a1be3f":"markdown","c597fce1":"markdown","661ee2a2":"markdown","0455e075":"markdown"},"source":{"3ed25f24":"import warnings\nwarnings.filterwarnings('ignore')","0c9940db":"!ls ..\/input\/","e9be185a":"import pandas as pd\nht_dt = pd.read_csv(\"..\/input\/heart.csv\", header = 'infer')","00637f0e":"print(\"The heart dataset has {0} rows and {1} columns\".format(ht_dt.shape[0], ht_dt.shape[1]))","03831051":"ht_dt.head()  ","8938bcc5":"feature_names = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n                 'exang', 'oldpeak', 'slope', 'ca', 'thal']\n\ntarget_name = 'target'\n\nX = ht_dt[feature_names]\ny = ht_dt[target_name]\n\nprint(\"Features of the dataset are {0}\".format(X.columns.values))","f892a927":"from yellowbrick.features import Rank1D\n# Instantiate the 1D visualizer with the Sharpiro ranking algorithm\nvisualizer = Rank1D(features=feature_names, algorithm='shapiro')\n\n# Fit the data to the visualizer\nvisualizer.fit(X, y)  \n\n# Transform the data\nvisualizer.transform(X) \n\n# visualise\nvisualizer.poof()                   ","3393577a":"from yellowbrick.features import Rank2D\n# covariance\nvisualizer = Rank2D(features=feature_names, algorithm='covariance') \nvisualizer.fit(X, y)                \nvisualizer.transform(X)             \nvisualizer.poof()","3f2ad538":"#pearson\nvisualizer = Rank2D(features=feature_names, algorithm='pearson')\nvisualizer.fit(X, y)                \nvisualizer.transform(X)             \nvisualizer.poof()","ee02e959":"#Feature set\nfeat_1 = ['age', 'trestbps', 'chol', 'thalach']    \nfeat_2 = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'oldpeak', 'slope', 'ca', 'thal']\n\nfrom yellowbrick.features import RadViz\n# Specify the features of interest and the classes of the target \nfeatures = feat_1\nclasses = [0, 1]\n\n# Instantiate the visualizer\nvisualizer = RadViz(classes=classes, features=features,size = (800,300))\nvisualizer.fit(X, y)      \nvisualizer.transform(X)  \nvisualizer.poof()","8ad71f85":"# Specify the features of interest and the classes of the target \nfeatures = feat_2\nclasses = [0, 1]\n\n# Instantiate the visualizer\nvisualizer = RadViz(classes=classes, features=features,size = (800,300))\nvisualizer.fit(X, y)      \nvisualizer.transform(X)  \nvisualizer.poof()","7cfd37ed":"from yellowbrick.features import ParallelCoordinates\nclasses = [0, 1]\n# Instantiate the visualizer for feat_1\nvisualizer = visualizer = ParallelCoordinates(\n    classes=classes, features=feature_names,\n    normalize='standard', size = (1200,500))\n\nvisualizer.fit(X, y)     \nvisualizer.transform(X)   \nvisualizer.poof()","c13987ff":"# Classifier Evaluation Imports\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n#Yellowbrick\nfrom yellowbrick.classifier import ClassificationReport,ConfusionMatrix\n\n#Training & Test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","8e8f95c5":"# Instantiate the classification model and visualizer \nbayes = GaussianNB()\nvisualizer = ClassificationReport(bayes, classes=classes)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)  \ng = visualizer.poof()","4664100e":"bayes = LogisticRegression()\nvisualizer = ClassificationReport(bayes, classes=classes)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)  \ng = visualizer.poof()","06702379":"logReg = LogisticRegression()\nvisualizer = ConfusionMatrix(logReg)\nvisualizer.fit(X_train, y_train)  \nvisualizer.score(X_test, y_test)\ng = visualizer.poof()","a1c1460b":"**Specifying the feature and target column**","f9c8ae03":"**RadViz**  \nRadViz is a multivariate data visualization algorithm that plots each feature dimension uniformly around the circumference of a circle and then plots data points on the interior of the circle. This allows many dimensions to easily fit on a circle, greatly expanding the dimensionality of the visualization.  ","892ce1e8":"**Classification report using Gaussian NB**","dd69fc92":"![](https:\/\/www.incimages.com\/uploaded_files\/image\/970x450\/getty_584203352_200013282000928014_380350.jpg)","67c3bc17":"**Confusion Matrix**  \nThe ConfusionMatrix visualizer displays the accuracy score of the model, i.e. it shows how each of the predicted classes compares to their actual classes. Let\u2019s check out the confusion matrix for the Logistic Regression Model.","e43130f8":"**Global Options**","0abe7a72":"**About Yellowbrick**  \nThe Yellowbrick library is a diagnostic visualization platform for machine learning that allows data scientists to steer the model selection process and assist in diagnosing problems throughout the machine learning workflow. In short, it tries to find a model described by a triple composed of features, an algorithm, and hyperparameters that best fit the data.  \n\nYellowbrick is an open source, Python project that extends the scikit-learn API with visual analysis and diagnostic tools. The Yellowbrick API also wraps matplotlib to create interactive data explorations.  \n\nIt extends the scikit-learn API with a new core object: the Visualizer. Visualizers allow visual models to be fit and transformed as part of the scikit-learn pipeline process, providing visuals throughout the transformation of high-dimensional data.\n\n**Advantages**  \nYellowbrick isn\u2019t a replacement for other data visualization libraries but helps to achieve the following:  \n* Model Visualization  \n* Data visualization for machine learning  \n* Visual Diagnostics  \n* Visual Steering  \n\nFor additional information on Yellowbrick visit the below link:  \n[Yellowbrick](https:\/\/www.scikit-yb.org\/en\/latest\/)","7e8571d5":"**Viewing the shape of the dataset**","308c19e9":"**Classification Report**  \nThe classification report visualizer displays the precision, recall, and F1 scores for the model.  \n\n* precision = true positives \/ (true positives + false positives)\n* recall = true positives \/ (false negatives + true positives)\n* F1 score = 2 * ((precision * recall) \/ (precision + recall))  \n\nLet's try to visualize the classification report for 2 model's and decide which is better.","4cfdde0c":"**Note:**  \nKindly upvote the kernel if you find it useful. Suggestions are always welome. Let me know your thoughts in the comment if any.\n\n**Reference:**  \n[Analyzing Machine Learning Models with Yellowbrick by \nParul Pandey](https:\/\/heartbeat.fritz.ai\/analyzing-machine-learning-models-with-yellowbrick-37795733f3ee)","1ed7d1b8":"**Parallel Coordinates**  \nThis technique is useful when we need to detect clusters of instances that have similar classes, and to note features that have high variance or different distributions. Points that tend to cluster will appear closer together.","fcb6ca98":"**Context**  \nThis database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to this date. The \"goal\" field refers to the presence of heart disease in the patient. It is integer valued from 0 (no presence) to 4.  \n\n**Attribute Information:**  \n* Age\n* Sex\n* Chest pain type (4 values)\n* Resting blood pressure\n* Serum cholestoral in mg\/dl\n* Fasting blood sugar > 120 mg\/dl\n* Resting electrocardiographic results (values 0,1,2)\n* Maximum heart rate achieved\n* Exercise induced angina\n* Oldpeak = ST depression induced by exercise relative to rest\n* The slope of the peak exercise ST segment\n* Number of major vessels (0-3) colored by flourosopy\n* Thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\nThe names and social security numbers of the patients were recently removed from the database, replaced with dummy values. One file has been \"processed\", that one containing the Cleveland database. All four unprocessed files also exist in this directory.  \n\n**Acknowledgements - Creators:**  \n* Hungarian Institute of Cardiology. Budapest: Andras Janosi, M.D.  \n* University Hospital, Zurich, Switzerland: William Steinbrunn, M.D.  \n* University Hospital, Basel, Switzerland: Matthias Pfisterer, M.D.  \n* V.A. Medical Center, Long Beach and Cleveland Clinic Foundation: Robert Detrano, M.D., Ph.D.  \n* Donor: David W. Aha (aha '@' ics.uci.edu) (714) 856-8779  \n\n**Inspiration**  \nExperiments with the Cleveland database have concentrated on simply attempting to distinguish presence (values 1,2,3,4) from absence (value 0).","f617b7e2":"Visual classification reports are used to compare classification models to select models that are **\u201credder\u201d**, e.g. have stronger classification metrics or that are more balanced.","a4bd3258":"**Classification report using Logistic Regression**","a4574031":"**Sample of the dataset**","0f02360a":"**Listing the files**","62cf0628":"**Rank Features**  \nRank Features rank single and pairs of features to detect covariance. Ranking can be 1D or 2D depending on the number of features utilized for ranking. \n\n**Rank 1D**  \nRank 1D utilizes a ranking algorithm that takes into account only a single feature at a time. By default, the Shapiro-Wilk algorithm is used to assess the normality of the distribution of instances with respect to the feature.","4c039550":"**Feature Analysis in Yellowbrick**  \nThe Yellowbrick feature analysis visualizers focus on aggregation, optimization, and other techniques to give overviews of the data.  \n\nFeature analysis visualizers implementation includes\n* Rank Features\n* Manifold visualization\n* Radviz Visualizer\n* Feature Importance\n* Parallel coordinates\n* Recursive feature elimination\n* PCA Projection\n* Joint Plots\n\n ","34e7bec4":"**Reading the Dataset**","93a1be3f":"**Will try the Evaluating Regressors on a seperate kernel**  \n\n**Stay connected**  \n\n**Happy Learning**","c597fce1":"**Model Evaluation Visualizers**  \nModel evaluation signifies how well the values predicted by the model match the actual labeled ones. Yellowbrick has visualizers for classification, regression, and clustering algorithms.  \n\n**Evaluating Classifiers**  \nClassification models try to assign the dependent variables one or more categories. The sklearn.metrics module implements a function to measure classification performance.  \n\n![Classifiers Metrics](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*U35S7hZqKSZ8DZlxcTl1Bg.png)  \n\nYellowbrick implements has 7 classifier evaluation metrics.\n* ROCAUC\n* Class Prediction Error\n* Discrimination Error\n* Class Balance\n* Confusion Matrix\n* Classification Report\n* Precision - Recall Curves","661ee2a2":"**Rank 2D**  \nRank 2D, on the other hand, performs pairwise feature analysis as a heatmap. The default ranking algorithm is covariance, but we can also use the Pearson score.","0455e075":"Parallel coordinates is a visualization technique used to plot individual data elements across many dimensions. Each of the dimensions corresponds to a vertical axis, and each data element is displayed as a series of connected points along the dimensions\/axes.  \n\nThe groups of similar instances are called \u2018braids\u2019, and when there are distinct braids of different classes, it suggests there\u2019s enough separability that a classification algorithm might be able to discern between each class.  "}}