{"cell_type":{"ad3e0823":"code","c2378b2a":"code","1371816f":"code","5c884e5f":"code","3b75915a":"code","cc77ebec":"code","0de5fcd0":"code","9e6a1de2":"code","e185648d":"code","247111c3":"code","3a60e226":"code","2c9f9368":"markdown","6d47645d":"markdown"},"source":{"ad3e0823":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import img_to_array,load_img\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom tensorflow.keras.preprocessing import image \nfrom sklearn.model_selection import train_test_split","c2378b2a":"train_genrator = ImageDataGenerator(rescale=1\/255, \n                                   horizontal_flip=True,\n                                   zoom_range=0.2,\n                                    shear_range=0.2)\ntrain_data = train_genrator.flow_from_directory(\"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/train\",\n                                               class_mode=\"binary\",\n                                               batch_size=32,\n                                               target_size =(64,64),\n                                               color_mode = \"grayscale\")\n\ntest_genrator = ImageDataGenerator(rescale=1\/255)\ntest_data = train_genrator.flow_from_directory(\"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\",\n                                               class_mode=\"binary\",\n                                               batch_size=32,\n                                               target_size =(64,64),\n                                               color_mode = \"grayscale\")","1371816f":"#Building the model \n#2 conv layers with kernel size of 3x3 followed bya maxpool with stride of 2 then 2 conv layers again \n#followed by maxpool of stride of 2 with pool size of 2x2 followd by 2 dense layers with activation \n# of relu and then a dense layer with 1 neuron with activation as sigmoid\n\nLayers = [keras.layers.Conv2D(filters=16,kernel_size=(3,3),padding=\"same\",input_shape=(64,64,1)),\n         #Input is grayscale thus only one channel in input shape\n          keras.layers.Activation(\"relu\"),\n          keras.layers.Conv2D(filters=16,kernel_size=(3,3),padding=\"same\"),\n          keras.layers.Activation(\"relu\"),\n          keras.layers.MaxPooling2D(pool_size=(2,2),strides=2),\n          keras.layers.Conv2D(filters=16,kernel_size=(3,3),padding=\"same\"),\n          keras.layers.Activation(\"relu\"),\n          keras.layers.Conv2D(filters=16,kernel_size=(3,3),padding=\"same\"),\n          keras.layers.Activation(\"relu\"),\n          keras.layers.MaxPooling2D(pool_size=(2,2),strides=2),\n          keras.layers.Flatten(),\n          keras.layers.Dense(128),\n          keras.layers.Activation(\"relu\"),\n          keras.layers.Dense(128),\n          keras.layers.Activation(\"relu\"),\n          keras.layers.Dense(1,activation=\"sigmoid\")]\n\n\n            ","5c884e5f":"# Adding layers to our sequential model\nmodel = keras.models.Sequential(layers=Layers)","3b75915a":"model.summary()","cc77ebec":"model.compile(optimizer=\"sgd\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","0de5fcd0":"history = model.fit_generator(train_data,validation_data=test_data,epochs=20,verbose=2)","9e6a1de2":"model.save(\"my_submission_model.h5\")","e185648d":"def predictions(image_address):\n    test_image = image.load_img(str(image_address),target_size=(64,64),color_mode= \"grayscale\")\n    test_image = image.img_to_array(test_image)\n    test_image = test_image\/255\n    test_image = np.expand_dims(test_image,axis=0)\n    result = model.predict(test_image)\n    if result[0]<=0.5:\n        print(\"Defective\")\n    else:\n        print(\"Not Defective ; ie:OK\")","247111c3":"\n## Address from not defective \naddress = \"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\/ok_front\/cast_ok_0_1026.jpeg\"\npredictions(image_address=address)","3a60e226":"## Address from defective \n\naddress = \"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/test\/def_front\/cast_def_0_1189.jpeg\"\npredictions(address)","2c9f9368":"Prediction is correct","6d47645d":"Predictions is correct"}}