{"cell_type":{"0a5d1b9a":"code","28b7ceef":"code","6938e716":"code","855022b2":"code","ad410fbc":"code","bad69681":"code","bb04e887":"code","35e290cd":"code","404982b6":"code","5c9e08ab":"code","589463c8":"code","ea97ae56":"code","8535f08e":"code","74432131":"code","cd7c51a1":"code","a63e1f53":"code","71e00e6e":"code","a23918fd":"code","a167e3c9":"markdown","99923b9b":"markdown","9c35700c":"markdown","4d588654":"markdown","7b83a3a2":"markdown","c660b4ea":"markdown","86fb9d69":"markdown","370dbba5":"markdown","fba90574":"markdown","23a9e8a9":"markdown","aefd7570":"markdown"},"source":{"0a5d1b9a":"import numpy as np \nimport pandas as pd\nimport os\nfrom sklearn.metrics import r2_score\nimport glob","28b7ceef":"sub = pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/sample_submission.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/test.csv\")","6938e716":"train.head()","855022b2":"# CHECKING UNIQUE STOCK_IDS \ntrain[\"stock_id\"].unique().sum()","ad410fbc":"# LOADING PARQUET\nimport glob\nlist_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\nlist_order_trade_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/*')","bad69681":"book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')","bb04e887":"len(list_order_book_file_train)","35e290cd":"len(list_order_trade_file_train)","404982b6":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() ","5c9e08ab":"a = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                       book_example['bid_size1']+ book_example['ask_size1'])\n\nb = (book_example['bid_price2'] * book_example['ask_size2'] +\n                                book_example['ask_price2'] * book_example['bid_size2']) \/ (\n                                       book_example['bid_size2']+ book_example['ask_size2'])\n\nbook_example['wap'] = (a + b) \/ 2","589463c8":"book_example.loc[:,'log_return'] = log_return(book_example['wap'])\nbook_example = book_example[~book_example['log_return'].isnull()]","ea97ae56":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\nprint(f'Realized volatility for stock_id 0 on time_id 5 is {realized_vol}')","8535f08e":"list_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","74432131":"def realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book_data = pd.read_parquet(file_path)\n    a = (df_book_data['bid_price1'] * df_book_data['ask_size1'] +\n                                df_book_data['ask_price1'] * df_book_data['bid_size1']) \/ (\n                                       df_book_data['bid_size1']+ df_book_data['ask_size1'])\n\n    b = (df_book_data['bid_price2'] * df_book_data['ask_size2'] +\n                                df_book_data['ask_price2'] * df_book_data['bid_size2']) \/ (\n                                       df_book_data['bid_size2']+ df_book_data['ask_size2'])\n    df_book_data['wap'] = (a+b)\/2\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book_data.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]","cd7c51a1":"def past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in list_file:\n        df_past_realized = pd.concat([df_past_realized,\n                                     realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized\ndf_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_train,\n                                                           prediction_column_name='pred')","a63e1f53":"train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_joined = train.merge(df_past_realized_train[['row_id','pred']], on = ['row_id'], how = 'left')","71e00e6e":"from sklearn.metrics import r2_score\ndef rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\nR2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","a23918fd":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = df_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","a167e3c9":"# WORK IN PROGRESS......","99923b9b":"# Checking format of dataset","9c35700c":"Creating Submission File.","4d588654":"# IF YOU FIND THIS HELPFUL PLEASE UPVOTE .","7b83a3a2":"Calculating Volatility per time_id","c660b4ea":"Reference Notebook:\nhttps:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data","86fb9d69":"Volatility per stock_id.","370dbba5":"Here for calculating volatility (which is our target) we will be using Weighted Average Price (WAP) using bidsize, asksize, bidprize and askprize.\nSo the formula we will be using is as follows:\n\n* a = (BidPrice1\u2217AskSize1+AskPrice1\u2217BidSize1) \/ (BidSize1+AskSize1)\n* b = (BidPrice2\u2217AskSize2+AskPrice2\u2217BidSize2) \/ (BidSize2+AskSize2)\n* WAP = (a + b) \/ 2","fba90574":"As we know submission file is in row_id and stock_id format. And we can represent row_id by concating stock_id value and time_id value with \"-\". ","23a9e8a9":"Calculating RMSE Score","aefd7570":"For Comparing the stock price of yesterday and today, We are applying log after taking difference. \n"}}