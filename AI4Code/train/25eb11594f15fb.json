{"cell_type":{"5f2536d7":"code","3772bba1":"code","6e43b860":"code","c04bdee8":"code","617ad6ea":"code","bd35aca3":"code","7bdedae5":"code","c934f9b1":"code","a338cabe":"code","e4243baa":"code","400c1060":"code","30b99632":"code","6437cce0":"code","52f9af97":"code","6dc56dd6":"code","3b544331":"code","40936c29":"code","3d3e5ee5":"code","483e691c":"code","36858971":"code","b4c394bd":"code","8befdf5e":"code","667e2b4b":"code","ba258b57":"code","e4616de6":"code","87352c31":"code","32015b27":"code","a325b3d7":"code","07f17c73":"code","2d6491e1":"code","a0d32c6d":"code","298ef2d5":"code","07a8dc99":"markdown","c45ee847":"markdown","79605fc3":"markdown","538e12e6":"markdown","013a008f":"markdown","ed8c816e":"markdown","8c25138e":"markdown","dbb45111":"markdown","1ea62d4f":"markdown"},"source":{"5f2536d7":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3772bba1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6e43b860":"df_train=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_sub=pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\n\nprint(df_train.shape)\nprint(df_test.shape)\nprint(df_sub.shape)","c04bdee8":"df_train.head()","617ad6ea":"print(f\"Unique Countries: {len(df_train.Country_Region.unique())}\")","bd35aca3":"train_dates=list(df_train.Date.unique())\nlatest_date=df_train.Date.max()\nprint(f\"Period : {len(df_train.Date.unique())} days\")\nprint(f\"From : {df_train.Date.min()} To : {df_train.Date.max()}\")","7bdedae5":"print(f\"Unique Regions: {df_train.shape[0]\/len(df_train.Date.unique())}\")","c934f9b1":"df_train.Country_Region.value_counts()","a338cabe":"df_train[\"UniqueRegion\"]=df_train.Country_Region\ndf_train.UniqueRegion[df_train.Province_State.isna()==False]=df_train.Province_State+\" , \"+df_train.Country_Region\n\nregion_list=df_train.UniqueRegion.unique()\nprint(f\"Total unique regions are : {len(region_list)}\")\ndf_train[df_train.Province_State.isna()==False]","e4243baa":"df_train.drop(labels=[\"Id\",\"Province_State\",\"Country_Region\"], axis=1, inplace=True)\ndf_train","400c1060":"df_train[\"Delta\"]=1.0\ndf_train[\"NewCases\"]=0.0\nfinal_train=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"NewCases\",\"UniqueRegion\", \"Delta\"])\n\nfor region in region_list:\n    df_temp=df_train[df_train.UniqueRegion==region].reset_index()\n    size_train=df_temp.shape[0]\n    \n    df_temp.NewCases[0]=df_temp.ConfirmedCases[1]\n    for i in range(1,df_temp.shape[0]):\n        df_temp.NewCases[i]=df_temp.ConfirmedCases[i]-df_temp.ConfirmedCases[i-1]\n        if(df_temp.ConfirmedCases[i-1]>0):\n            df_temp.Delta[i]=df_temp.ConfirmedCases[i]\/df_temp.ConfirmedCases[i-1]\n            \n    df_temp=df_temp[[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"NewCases\",\"Delta\"]]\n    final_train=pd.concat([final_train,df_temp], ignore_index=True)\nfinal_train.shape","30b99632":"latest_train=final_train[final_train.Date==latest_date]\nlatest_train.head()","6437cce0":"score_list=[]\nfor region in region_list:\n    df_temp=final_train[final_train.UniqueRegion==region]\n    X=np.array(df_temp.ConfirmedCases).reshape(-1,1)\n    Y=df_temp.Fatalities\n    model=LinearRegression()\n    model.fit(X,Y)\n    score_list.append(model.score(X,Y))\nscore_df=pd.DataFrame({\"Region\":region_list,\"Score\":score_list})\nprint(f\"Average R2 score between Fatality and Confirmed Cases is :{score_df.Score.mean()}\")\n\nplt.figure(figsize=(10,6))    \nplt.title(\"Distribution of R2 score between Confirmed Cases and Fatality\")\nsns.distplot(score_df.Score)\nplt.show()","52f9af97":"less_than_50=score_df[score_df.Score<0.5].Region.unique()\nprint(f\"Number of countries where r2 score<0.50 : {len(less_than_50)}\")\nlatest_train[latest_train.UniqueRegion.isin(less_than_50)]","6dc56dd6":"\n%%time\nreg_score_list=[]\nperiod=[]\nreg=[]\nfor n in range(3,10):\n    for region in region_list:\n        df_temp=final_train[final_train.UniqueRegion==region]\n        df_temp=df_temp.tail(n).reset_index()\n        date=np.arange(1,n+1)\n        model=LinearRegression()\n        X=date.reshape(-1,1)\n        Y=df_temp.Delta\n        model.fit(X,Y)\n        reg.append(region)\n        reg_score_list.append(model.score(X,Y))\n        period.append(n)\nscore_df=pd.DataFrame({\"Region\":reg,\"Score\":reg_score_list, \"Period\":period})","3b544331":"\nn_list=[]\nfor reg in region_list:\n    temp_score_df=score_df[score_df.Region==reg]\n    if temp_score_df.Score.max()==1:\n        n_list.append(3)\n    else:\n        n_list.append(temp_score_df.Period[temp_score_df.Score==temp_score_df.Score.max()].median())\nbest_n_df=pd.DataFrame({\"Region\":region_list,\"N\":n_list})\nsns.countplot(best_n_df.N)\n","40936c29":"df_test.head()","3d3e5ee5":"print(f\"Unique Countries: {len(df_test.Country_Region.unique())}\")\ntest_dates=list(df_test.Date.unique())\nsize_test=len(df_test.Date.unique())\nprint(f\"Period : {len(df_test.Date.unique())} days\")\nprint(f\"From : {df_test.Date.min()} To : {df_test.Date.max()}\")\nprint(f\"Unique Regions: {df_test.shape[0]\/len(df_test.Date.unique())}\")","483e691c":"df_test[\"UniqueRegion\"]=df_test.Country_Region\ndf_test.UniqueRegion[df_test.Province_State.isna()==False]=df_test.Province_State+\" , \"+df_test.Country_Region","36858971":"df_test.drop(labels=[\"ForecastId\",\"Province_State\",\"Country_Region\"], axis=1, inplace=True)\ndf_test[\"ConfirmedCases\"]=0\ndf_test[\"Fatalities\"]=0\ndf_test[\"NewCases\"]=0\ndf_test[\"Delta\"]=0","b4c394bd":"final_test=df_test[[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"NewCases\",\"Delta\"]]\napp_test=final_test[final_test.Date>latest_date]\napp_test.shape","8befdf5e":"\ndf_pred=pd.DataFrame(columns=[\"ConfirmedCases\",\"Fatalities\"])\ndf_traintest=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"NewCases\",\"Delta\"])\n\nfor region in region_list:\n    df_temp=final_train[final_train.UniqueRegion==region].reset_index()\n    \n    #number of days for delta trend\n    n=int(best_n_df[best_n_df.Region==region].N.sum()) \n    #Delta for the period\n    delta_list=np.array(df_temp.tail(n).Delta).reshape(-1,1)\n    #Morality rate as on last availabe date\n    death_rate=df_temp.tail(1).Fatalities.sum()\/df_temp.tail(1).ConfirmedCases.sum()\n    \n    scaler=MinMaxScaler()\n    X=np.arange(1,n+1).reshape(-1,1)\n    Y=scaler.fit_transform(delta_list) \n    model=LinearRegression()\n    model.fit(X,Y)\n    \n    df_test_app=app_test[app_test.UniqueRegion==region]\n    df_temp=pd.concat([df_temp,df_test_app])\n    df_temp=df_temp.reset_index()\n    \n    for i in range (size_train, df_temp.shape[0]):\n        n=n+1        \n        df_temp.Delta[i]=max(1,scaler.inverse_transform(model.predict(np.array([n]).reshape(-1,1))))\n        df_temp.ConfirmedCases[i]=round(df_temp.ConfirmedCases[i-1]*df_temp.Delta[i],0)\n        df_temp.Fatalities[i]=round(death_rate*df_temp.ConfirmedCases[i],0)\n        df_temp.NewCases[i]=df_temp.ConfirmedCases[i]-df_temp.ConfirmedCases[i-1]\n        \n    df_traintest=pd.concat([df_traintest,df_temp],ignore_index=True)\n    \n    df_temp=df_temp.iloc[-size_test:,:]\n    df_temp=df_temp[[\"ConfirmedCases\",\"Fatalities\"]]\n    df_pred=pd.concat([df_pred,df_temp], ignore_index=True)\n","667e2b4b":"def prediction_plotter(r_name):\n    pred_df=df_traintest[df_traintest.UniqueRegion==r_name]\n    train_df=final_train[final_train.UniqueRegion==r_name]\n    plt.figure(figsize=(10,6))\n    sns.lineplot('Date','ConfirmedCases',data=pred_df, color='r', label=\"Predicted Cases\")\n    sns.lineplot('Date','ConfirmedCases',data=train_df, color='g', label=\"Actual Cases\")\n    plt.show()","ba258b57":"prediction_plotter(\"Germany\")","e4616de6":"prediction_plotter(\"Pakistan\")","87352c31":"\ndf_pred=pd.DataFrame(columns=[\"ConfirmedCases\",\"Fatalities\"])\ndf_traintest=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"NewCases\",\"Delta\"])\n\nfor region in region_list:\n    df_temp=final_train[final_train.UniqueRegion==region].reset_index()\n    \n    #number of days for delta trend\n    n=10 \n    #Delta for the period\n    NewCasesList=df_temp.tail(n).NewCases \n    #Morality rate as on last availabe date\n    death_rate=df_temp.tail(1).Fatalities.sum()\/df_temp.tail(1).ConfirmedCases.sum()\n    \n    X=np.arange(1,n+1).reshape(-1,1)\n    Y=NewCasesList\n    model=LinearRegression()\n    model.fit(X,Y)\n    \n    df_test_app=app_test[app_test.UniqueRegion==region]\n    df_temp=pd.concat([df_temp,df_test_app])\n    df_temp=df_temp.reset_index()\n    \n    for i in range (size_train, df_temp.shape[0]):\n        n=n+1        \n        df_temp.NewCases[i]=round(max(0,model.predict(np.array([n]).reshape(-1,1))[0]),0)\n        df_temp.ConfirmedCases[i]=df_temp.ConfirmedCases[i-1]+df_temp.NewCases[i]\n        df_temp.Fatalities[i]=round(death_rate*df_temp.ConfirmedCases[i],0)\n        df_temp.Delta[i]=df_temp.ConfirmedCases[i]\/df_temp.ConfirmedCases[i-1]\n        \n    df_traintest=pd.concat([df_traintest,df_temp],ignore_index=True)\n    \n    df_temp=df_temp.iloc[-size_test:,:]\n    df_temp=df_temp[[\"ConfirmedCases\",\"Fatalities\"]]\n    df_pred=pd.concat([df_pred,df_temp], ignore_index=True)\ndf_pred.shape\n","32015b27":"prediction_plotter(\"New York , US\")","a325b3d7":"prediction_plotter(\"Korea, South\")","07f17c73":"#\"\"\"\ndf_pred=pd.DataFrame(columns=[\"ConfirmedCases\",\"Fatalities\"])\ndf_traintest=pd.DataFrame(columns=[\"Date\",\"ConfirmedCases\",\"Fatalities\",\"UniqueRegion\",\"NewCases\",\"Delta\"])\n\nfor region in region_list:\n    df_temp=final_train[final_train.UniqueRegion==region].reset_index()\n    \n    #number of days for delta trend\n    n=7\n    #Delta for the period\n    ConfirmedCasesList=df_temp.tail(n).ConfirmedCases \n    #Morality rate as on last availabe date\n    death_rate=df_temp.tail(1).Fatalities.sum()\/df_temp.tail(1).ConfirmedCases.sum()\n    polynom=PolynomialFeatures(degree=2)\n    X=polynom.fit_transform(np.arange(1,n+1).reshape(-1,1))\n    Y=ConfirmedCasesList\n    model=LinearRegression()\n    model.fit(X,Y)\n    \n    df_test_app=app_test[app_test.UniqueRegion==region]\n    df_temp=pd.concat([df_temp,df_test_app])\n    df_temp=df_temp.reset_index()\n    \n    for i in range (size_train, df_temp.shape[0]):\n        n=n+1        \n        pred=round(model.predict(polynom.fit_transform(np.array(n).reshape(-1,1)))[0],0)\n        df_temp.ConfirmedCases[i]=max(df_temp.ConfirmedCases[i-1],pred)\n        df_temp.NewCases[i]=df_temp.ConfirmedCases[i]+df_temp.ConfirmedCases[i-1]\n        df_temp.Fatalities[i]=round(death_rate*df_temp.ConfirmedCases[i],0)\n        df_temp.Delta[i]=df_temp.ConfirmedCases[i]\/df_temp.ConfirmedCases[i-1]\n        \n    df_traintest=pd.concat([df_traintest,df_temp],ignore_index=True)\n    \n    df_temp=df_temp.iloc[-size_test:,:]\n    df_temp=df_temp[[\"ConfirmedCases\",\"Fatalities\"]]\n    df_pred=pd.concat([df_pred,df_temp], ignore_index=True)\ndf_pred.shape\n#\"\"\"","2d6491e1":"prediction_plotter(\"India\")","a0d32c6d":"prediction_plotter(\"New York , US\")","298ef2d5":"df_sub.ConfirmedCases=df_pred.ConfirmedCases\ndf_sub.Fatalities=df_pred.Fatalities\n#df_sub.to_csv(\"submission.csv\",index=None)","07a8dc99":"### Define a function to plot how confirmed cases, fatalities and Delta changes with time","c45ee847":"We will add one more column, Delta (Growth Factor) which is the ratio of confirmed cases on one day to that of the previous day.","79605fc3":"### Finding Best N for regions","538e12e6":"* Observation Linear Regression can be used to predict Delta for the test data however the model would be underfitting.\n* Polynomial Regression or LSTM would do a much better job in prediction","013a008f":"Observation:\n* Generally average R2 score is better when N=3\n* For some regions, R2 score is better when N is higer","ed8c816e":"## Prediction Where new Cases follows Linear Regression","8c25138e":"### EDA Train Data","dbb45111":"## Predicting using Linear Regression of Delta","1ea62d4f":"## Prediction when confirmed cases is in polinomial regression"}}