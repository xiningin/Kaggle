{"cell_type":{"06ad1d65":"code","44467cb9":"code","62dc7da8":"code","b642105c":"code","271021d2":"code","83eda5b1":"code","201728ad":"code","501ae89f":"code","c6656bde":"code","372a98ce":"code","68ff2ade":"code","bd120a0b":"code","5cfba2cc":"code","a80e76fa":"code","433183fd":"code","fa19b1d5":"code","239b078e":"code","73214ef7":"code","ba3d30c0":"code","88b85701":"code","53f577b2":"markdown"},"source":{"06ad1d65":"#Created by Raymond Wang for learning purpose\n#This notebook only reflects the learning process of this Kaggle challenge\n#Reference: A Journey through Titanic (OMAR ELGABRY)\n\n#standard import\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n%matplotlib inline","44467cb9":"#machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB","62dc7da8":"# get titanic & test csv files as a DataFrame\ntitanic_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df    = pd.read_csv(\"..\/input\/test.csv\")\n\n# preview the data\ntitanic_df.head()","b642105c":"titanic_df.info()\nprint(\"----------------------------\")\ntest_df.info()","271021d2":"#drop unnecessary data\ntitanic_df=titanic_df.drop(['Name','PassengerId','Ticket'],axis=1)\ntest_df=test_df.drop(['Name','Ticket'],axis=1)\ntitanic_df.head()","83eda5b1":"#data engineering:embarked\n\n#to check null value in 'embarked', and there is none\n#fill NaN with S, since mostly frequent\ntitanic_df['Embarked']=titanic_df['Embarked'].fillna('S')\nprint(titanic_df['Embarked'].isnull().sum())\nprint(test_df['Embarked'].isnull().sum())\n\n#plot\nsns.factorplot('Embarked','Survived',data=titanic_df)\n\nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(15,5))\n#count people for each embarkment\nsns.factorplot('Embarked',hue='Survived',data=titanic_df,kind='count',order=['S','C','Q'],ax=axis1)\n#count survived in each embarkement\nsns.factorplot('Survived',hue=\"Embarked\",data=titanic_df,kind='count',order=[1,0],ax=axis2)\n#till this point, it is really hard to examine if the embarkment contributes to survived\n#same result different methods:\n#sns.countplot(x='Embarked', data=titanic_df, ax=axis1)\n#sns.countplot(x='Survived', hue=\"Embarked\", data=titanic_df, order=[1,0], ax=axis2)\n\n#group by embarkment and calculate mean for each\nembark_perc = titanic_df[[\"Embarked\", \"Survived\"]].groupby(['Embarked'],as_index=False).mean()\nsns.barplot(x='Embarked', y='Survived', data=embark_perc,order=['S','C','Q'],ax=axis3)\n\n#transfrom Embarked into individual features\n\nembark_dummies_titanic  = pd.get_dummies(titanic_df['Embarked'])\nembark_dummies_titanic.drop(['S'], axis=1, inplace=True)\nembark_dummies_test  = pd.get_dummies(test_df['Embarked'])\nembark_dummies_test.drop(['S'], axis=1, inplace=True)\ntitanic_df = titanic_df.join(embark_dummies_titanic)\ntest_df    = test_df.join(embark_dummies_test)\n\ntitanic_df.drop(['Embarked'], axis=1,inplace=True)\ntest_df.drop(['Embarked'], axis=1,inplace=True)\ntitanic_df.head()","201728ad":"#data engineering: fare\n\ntest_df['Fare']=test_df['Fare'].fillna(48.39540760233918)\nprint(titanic_df['Fare'].isnull().sum())\nprint(test_df['Fare'].isnull().sum())\n\n# get fare for survived & didn't survive passengers \nfare_not_survived = titanic_df[\"Fare\"][titanic_df[\"Survived\"] == 0]\nfare_survived     = titanic_df[\"Fare\"][titanic_df[\"Survived\"] == 1]\n#calculate statistics\naverage_fare = pd.DataFrame([fare_not_survived.mean(), fare_survived.mean()])\nstd_fare      = pd.DataFrame([fare_not_survived.std(), fare_survived.std()])\nprint(average_fare.head())\nprint(std_fare.head())\n#till this point, we can see survived has high fare\n\n#plot\ntitanic_df['Fare'].plot(kind='hist',bins=100,xlim=(0,70))","501ae89f":"#Data engineering: Age\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,4))\naxis1.set_title('Original Age values - Titanic')\naxis2.set_title('New Age values - Titanic')\n# get average, std, and number of NaN values in titanic_df\naverage_age_titanic   = titanic_df[\"Age\"].mean()\nstd_age_titanic       = titanic_df[\"Age\"].std()\ncount_nan_age_titanic = titanic_df[\"Age\"].isnull().sum()\nprint(average_age_titanic,std_age_titanic,count_nan_age_titanic)\n# get average, std, and number of NaN values in test_df\naverage_age_test   = test_df[\"Age\"].mean()\nstd_age_test       = test_df[\"Age\"].std()\ncount_nan_age_test = test_df[\"Age\"].isnull().sum()\nprint(average_age_test,std_age_test,count_nan_age_titanic)\n# generate random numbers between (mean - std) & (mean + std)\nrand_1 = np.random.randint(average_age_titanic - std_age_titanic, average_age_titanic + std_age_titanic,size = count_nan_age_titanic)\nrand_2 = np.random.randint(average_age_test - std_age_test, average_age_test + std_age_test,size = count_nan_age_test)\n\n# plot original Age values\n# NOTE: drop all null values, and convert to int\ntitanic_df['Age'].dropna().hist(bins=70, ax=axis1)\ntest_df['Age'].dropna().hist(bins=70, ax=axis1)\n\n#fill na with random numbers\ntitanic_df[\"Age\"][np.isnan(titanic_df[\"Age\"])] = rand_1\ntest_df[\"Age\"][np.isnan(test_df[\"Age\"])] = rand_2\n\n# plot new Age Values\ntitanic_df['Age'].hist(bins=70, ax=axis2)\ntest_df['Age'].hist(bins=70, ax=axis2)\n\n# convert from float to int\ntitanic_df['Age'] = titanic_df['Age'].astype(int)\ntest_df['Age']    = test_df['Age'].astype(int)\n        \n# peaks for survived\/not survived passengers by their age\nfacet = sns.FacetGrid(titanic_df, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, titanic_df['Age'].max()))\nfacet.add_legend()\n# average survived passengers by age\nfig, axis1 = plt.subplots(1,1,figsize=(18,4))\naverage_age = titanic_df[[\"Age\", \"Survived\"]].groupby(['Age'],as_index=False).mean()\nsns.barplot(x='Age', y='Survived', data=average_age)\n\n#till this point, we find that children has a high probability of survive and middle age (20~50) has low one","c6656bde":"#Data engineering: Cabin\n\nprint(test_df[\"Cabin\"].isnull().sum())\nprint(test_df[\"Cabin\"].isnull().sum())\n#drop this feature since to many null value\ntitanic_df.drop(\"Cabin\",axis=1,inplace=True)\ntest_df.drop(\"Cabin\",axis=1,inplace=True)","372a98ce":"#Data engineering: Pclass\n\n#print(test_df[\"Pclass\"].isnull().sum())\n#print(test_df[\"Pclass\"].isnull().sum())\n\n#plot\nsns.factorplot('Pclass','Survived',order=[1,2,3], data=titanic_df,size=5)\n#till this point, it is suggested that 3rd class has very low survival rate\n# create dummy variables for Pclass column\npclass_dummies_titanic  = pd.get_dummies(titanic_df['Pclass'])\npclass_dummies_titanic.columns = ['Class_1','Class_2','Class_3']\npclass_dummies_titanic.drop(['Class_3'], axis=1, inplace=True)\n\npclass_dummies_test  = pd.get_dummies(test_df['Pclass'])\npclass_dummies_test.columns = ['Class_1','Class_2','Class_3']\npclass_dummies_test.drop(['Class_3'], axis=1, inplace=True)\n\ntitanic_df.drop(['Pclass'],axis=1,inplace=True)\ntest_df.drop(['Pclass'],axis=1,inplace=True)\n\ntitanic_df = titanic_df.join(pclass_dummies_titanic)\ntest_df    = test_df.join(pclass_dummies_test)","68ff2ade":"# Family\n\n# Instead of having two columns Parch & SibSp, \n# we can have only one column represent if the passenger had any family member aboard or not,\n# Meaning, if having any family member(whether parent, brother, ...etc) will increase chances of Survival or not.\ntitanic_df['Family'] =  titanic_df[\"Parch\"] + titanic_df[\"SibSp\"]\ntitanic_df['Family'].loc[titanic_df['Family'] > 0] = 1\ntitanic_df['Family'].loc[titanic_df['Family'] == 0] = 0\n\ntest_df['Family'] =  test_df[\"Parch\"] + test_df[\"SibSp\"]\ntest_df['Family'].loc[test_df['Family'] > 0] = 1\ntest_df['Family'].loc[test_df['Family'] == 0] = 0\n\n# drop Parch & SibSp\ntitanic_df = titanic_df.drop(['SibSp','Parch'], axis=1)\ntest_df    = test_df.drop(['SibSp','Parch'], axis=1)\n\n# plot\nfig, (axis1,axis2) = plt.subplots(1,2,sharex=True,figsize=(10,5))\n\n# sns.factorplot('Family',data=titanic_df,kind='count',ax=axis1)\nsns.countplot(x='Family', data=titanic_df, order=[1,0], ax=axis1)\n\n# average of survived for those who had\/didn't have any family member\nfamily_perc = titanic_df[[\"Family\", \"Survived\"]].groupby(['Family'],as_index=False).mean()\nsns.barplot(x='Family', y='Survived', data=family_perc, order=[1,0], ax=axis2)\n\naxis1.set_xticklabels([\"With Family\",\"Alone\"], rotation=0)","bd120a0b":"# Sex\n\n# As we see, children(age < ~16) on aboard seem to have a high chances for Survival.\n# So, we can classify passengers as males, females, and child\ndef get_person(passenger):\n    age,sex = passenger\n    #if age<16: return 'child'\n    #elif age>60: return 'senior'\n    #else: return sex\n    return 'child' if age < 16 else sex\n    \ntitanic_df['Person'] = titanic_df[['Age','Sex']].apply(get_person,axis=1)\ntest_df['Person']    = test_df[['Age','Sex']].apply(get_person,axis=1)\n\n# No need to use Sex column since we created Person column\ntitanic_df.drop(['Sex'],axis=1,inplace=True)\ntest_df.drop(['Sex'],axis=1,inplace=True)\n\n# create dummy variables for Person column, & drop Male as it has the lowest average of survived passengers\nperson_dummies_titanic  = pd.get_dummies(titanic_df['Person'])\nperson_dummies_titanic.columns = ['Child','Female','Male']\nperson_dummies_titanic.drop(['Male'], axis=1, inplace=True)\n#person_dummies_titanic.drop(['Senior'], axis=1, inplace=True)\n\nperson_dummies_test  = pd.get_dummies(test_df['Person'])\nperson_dummies_test.columns = ['Child','Female','Male']\nperson_dummies_test.drop(['Male'], axis=1, inplace=True)\n#person_dummies_test.drop(['Senior'], axis=1, inplace=True)\n\ntitanic_df = titanic_df.join(person_dummies_titanic)\ntest_df    = test_df.join(person_dummies_test)\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(13,5))\n\n# sns.factorplot('Person',data=titanic_df,kind='count',ax=axis1)\nsns.countplot(x='Person', data=titanic_df, ax=axis1)\n\n# average of survived for each Person(male, female, or child)\nperson_perc = titanic_df[[\"Person\", \"Survived\"]].groupby(['Person'],as_index=False).mean()\nsns.barplot(x='Person', y='Survived', data=person_perc, ax=axis2, order=['male','female','child'])\ntitanic_df.drop(['Person'],axis=1,inplace=True)\ntest_df.drop(['Person'],axis=1,inplace=True)","5cfba2cc":"# define training and testing sets\n\nX_train = titanic_df.drop(\"Survived\",axis=1)\nY_train = titanic_df[\"Survived\"]\nX_test  = test_df.drop(\"PassengerId\",axis=1).copy()","a80e76fa":"# Logistic Regression\n\nlogreg = LogisticRegression()\n\nlogreg.fit(X_train, Y_train)\n\nY_pred = logreg.predict(X_test)\n\nlogreg.score(X_train, Y_train)","433183fd":"# Support Vector Machines\n\nsvc = SVC()\n\nsvc.fit(X_train, Y_train)\n\nY_pred = svc.predict(X_test)\n\nsvc.score(X_train, Y_train)","fa19b1d5":"# Random Forests\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\n\nrandom_forest.fit(X_train, Y_train)\n\nY_pred = random_forest.predict(X_test)\n\nrandom_forest.score(X_train, Y_train)","239b078e":"knn = KNeighborsClassifier(n_neighbors = 3)\n\nknn.fit(X_train, Y_train)\n\nY_pred = knn.predict(X_test)\n\nknn.score(X_train, Y_train)","73214ef7":"# Gaussian Naive Bayes\n\ngaussian = GaussianNB()\n\ngaussian.fit(X_train, Y_train)\n\nY_pred = gaussian.predict(X_test)\n\ngaussian.score(X_train, Y_train)","ba3d30c0":"# get Correlation Coefficient for each feature using Logistic Regression\ncoeff_df = pd.DataFrame(titanic_df.columns.delete(0))\ncoeff_df.columns = ['Features']\ncoeff_df[\"Coefficient Estimate\"] = pd.Series(logreg.coef_[0])\n\n# preview\ncoeff_df","88b85701":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('titanic.csv', index=False)","53f577b2":"**If you are as new as me Series  **   \nHouse Pricing Model: https:\/\/www.kaggle.com\/yw6916\/if-you-are-as-new-as-me-why-don-t-you-start-here2   \nHouse Pricing Advanced: https:\/\/www.kaggle.com\/yw6916\/house-pricing-advance-if-you-are-as-new-as-me-3\n"}}