{"cell_type":{"9e29c0b6":"code","417ebd40":"code","550fb4a0":"code","cfb00049":"code","cbe6fc84":"code","23987419":"code","f8a27140":"code","d2cbe0e8":"code","6c6b70e6":"code","9bacbb70":"code","b9a743dd":"code","1b8b89ec":"code","c9230c0f":"code","c9833721":"code","3acfedef":"code","c7fa42c9":"code","3151bae5":"code","fb2492fa":"code","4469cf8f":"markdown","dad3e6ae":"markdown","c8cb52ab":"markdown","736491c6":"markdown","e9834625":"markdown","758b697d":"markdown","8b49670a":"markdown","23dc7110":"markdown","222a0774":"markdown","abe88fe3":"markdown","0d1ba2fc":"markdown","31f87b4b":"markdown","d8f99d3d":"markdown","e1224249":"markdown","b0098f7d":"markdown","90a152ab":"markdown"},"source":{"9e29c0b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nfrom tensorflow import keras\nimport cv2\nfrom keras.models import load_model\nimport math\nimport numpy as np\n\nimport h5py\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python.framework import ops\nfrom keras.models import Sequential # to create a cnn model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D,BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import RMSprop,Adam,SGD,Adagrad,Adadelta,Adamax,Nadam\nfrom keras.applications import xception\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","417ebd40":"x_l = np.load('\/kaggle\/input\/sign-language-digits-dataset\/X.npy')    #loading X \nY_l = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Y.npy')   #loading y","550fb4a0":"img_size = 64\nplt.subplot(1,2,1)\nplt.imshow(x_l[700].reshape(img_size,img_size))\nplt.axis('off')\nplt.subplot(1,2,2)\nplt.imshow(x_l[1900].reshape(img_size,img_size))\nplt.axis('off')\n","cfb00049":"X=x_l\nY=Y_l\nX = X.reshape(-1,64,64,1)\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)","cbe6fc84":"test_size = 0.25\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=42)","23987419":"print(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_test.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_test.shape)","f8a27140":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),padding='same',activation= 'relu',input_shape=(64,64,1)))          #adding convolution\nmodel.add(BatchNormalization())                     #normalising the batch\nmodel.add(MaxPool2D(pool_size=(2,2)))                            #max pooling \nmodel.add(Dropout(0.2))                                    #dropping ou t20%\nmodel.add(Conv2D(64,(3,3),padding='same',activation= 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(64,(3,3),padding='same',activation= 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(64,(3,3),padding='same',activation= 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\nmodel.add(Flatten())                  #flatten the outpt by above layers\nmodel.add(Dense(256,activation= 'relu'))                 #dense layer 1\nmodel.add(Dense(128,activation= 'relu'))\nmodel.add(Dense(64,activation= 'relu'))\n\nmodel.add(Dense(10,activation= 'softmax'))                 #outputting from dense layer on 10 selections\n","d2cbe0e8":"model.summary()","6c6b70e6":"from keras.optimizers import RMSprop,Adam,SGD,Adagrad,Adadelta,Adamax,Nadam\n\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.99)\n# Compile the model\nmodel.compile(optimizer = optimizer , loss = 'categorical_crossentropy', metrics=[\"accuracy\"])\n# fitting\n","9bacbb70":"from tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model.png', show_shapes=True, show_layer_names=True)\nfrom IPython.display import Image\nImage(\"model.png\")","b9a743dd":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_accuracy')>0.994):\n            print(\"\\nReached 99.0% accuracy so cancelling training!\")\n            self.model.stop_training = True","1b8b89ec":"callbacks = myCallback()\n\nhistory = model.fit(X_train,Y_train,epochs=225,validation_data=(X_test,Y_test),callbacks = [callbacks])","c9230c0f":"scores = model.evaluate(X_test, Y_test, verbose=0)\nprint(\"{}: {:.2f}%\".format(\"accuracy\", scores[1]*100))","c9833721":"model.save('Sign Language Digits Dataset')","3acfedef":"fname = \"..\/input\/testingstuff\/images (1).jpg\"\nimg = cv2.imread(fname,0)\n\nimg = cv2.resize(img,(64,64))\n\n\nplt.figure(figsize=(10,6))\nplt.imshow(img)","c7fa42c9":"\nimg = np.reshape(img,[1,64,64,1])","3151bae5":"\nmodel = load_model('Sign Language Digits Dataset')\n\nmodel.compile(loss='binary_crossentropy',\n\n              optimizer='rmsprop',\n\n              metrics=['accuracy'])\n\n\nclasses = model.predict_classes(img)\n","fb2492fa":"print (classes)\n","4469cf8f":"Making the model","dad3e6ae":"Resizing the image so that can be fit in 64,64","c8cb52ab":"Lets load the data","736491c6":"using the callback and fitting it on data and run the model","e9834625":"Loading the image for testing a single pics","758b697d":"Splitting the train and test data with 25% ratio\n","8b49670a":"Display the image loaded ","23dc7110":"load the model saved earlier and run the model to find the number","222a0774":"Callback function to stop upon reaching the %99.4 accuracy ","abe88fe3":"Evaluate the model from test set ","0d1ba2fc":"The image of the model","31f87b4b":"Reshape the image","d8f99d3d":"Compiling with Adam","e1224249":"SAve the model for individual image testing","b0098f7d":"The ouput of the image ","90a152ab":"Summary of the model"}}