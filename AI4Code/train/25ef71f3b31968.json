{"cell_type":{"71284d83":"code","8649e7b9":"code","ae1a152f":"code","2c03b67b":"code","51627883":"code","b547e6cc":"code","a523123c":"code","1712368f":"code","0105ecd4":"code","34355c1c":"code","4105cd5c":"code","9cf0e9f3":"code","196d0461":"code","52f8d612":"code","623bf670":"code","2681d227":"code","b7905ab7":"code","1fc53e72":"code","3649aa08":"code","cfea24bd":"code","c9ce7ee5":"code","d13e3077":"code","2cddcba7":"code","80098fb7":"code","d87d97f7":"code","112257c3":"code","e346e4bf":"code","17772c0a":"code","4d82bf57":"code","dfbcfced":"code","883ba889":"code","78d6419e":"code","bd8b9532":"code","583bcfa9":"code","2cf44d32":"code","30e58ce7":"code","9811b4ba":"code","2efad613":"code","86c13a71":"code","483110f7":"code","f87676b0":"code","94a1ec7f":"code","88c7c41b":"code","74889593":"code","a5de93b3":"code","bb54ee28":"code","82684d8a":"code","b7d585f3":"code","fa56df2b":"code","56501640":"code","9310faf6":"code","cef70f14":"code","55c2ad4f":"code","3b6774ae":"code","bcec19ad":"code","4e1bb209":"code","fdddbee2":"code","5dcfadcb":"code","f662a08e":"code","fcfec1cb":"code","ee78887a":"code","dc71a961":"code","18fec53d":"code","a43d765d":"code","2707c671":"code","2321040b":"code","2fa9d099":"code","b3b18f06":"code","ce1ff529":"code","becf2acf":"code","b568c801":"code","256e69f8":"code","dc314019":"code","15e70657":"code","eec07a3e":"code","b1001aaf":"code","8f8e742e":"code","82eb9f76":"code","beda7537":"code","568e7cc3":"code","7813deae":"code","7282c951":"code","c9fc56af":"code","f2d13085":"code","5c7de310":"code","8bf90b6b":"code","17a5dde7":"code","ae3f974c":"markdown","7e3e54b2":"markdown","692fa7b4":"markdown","fb2be5de":"markdown","a5de2099":"markdown","c64bf0c1":"markdown","36766719":"markdown","1eaefb8f":"markdown","ae01decc":"markdown","60afae28":"markdown","7d498e96":"markdown","43a42dca":"markdown","5d7b80b7":"markdown","c2e4625f":"markdown","90e91968":"markdown","a6bc26fe":"markdown","d3f52420":"markdown","0e936faf":"markdown","8d182971":"markdown","e9fd1b9e":"markdown","e3db6310":"markdown","989894d0":"markdown","4e2b2077":"markdown","6b20725d":"markdown","b128f9f4":"markdown","dcb43053":"markdown","392e1f14":"markdown","857f22e1":"markdown","47610d53":"markdown","bb548c8a":"markdown","09f9c71e":"markdown","d208843d":"markdown","01be903e":"markdown","69eb6dd4":"markdown","f30fc71c":"markdown","ffb7d9ce":"markdown","08147448":"markdown","4e40fa59":"markdown","4b6acad1":"markdown","c4e878bd":"markdown","76a82d5a":"markdown","5fe97cd3":"markdown","66a91c18":"markdown","6836dc32":"markdown","6e14b048":"markdown","d64e3e8e":"markdown","7f59a19a":"markdown","8eb63f4f":"markdown","438a150b":"markdown","eeba2a09":"markdown","9ea02c75":"markdown","c367e8d7":"markdown","3384e385":"markdown","c185d7f7":"markdown","626c6b7d":"markdown"},"source":{"71284d83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom collections import Counter\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8649e7b9":"data=pd.read_csv(\"\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv\")","ae1a152f":"data.head()","2c03b67b":"data.columns","51627883":"id_list=[\"Wins\",\"WardsPlaced\",\"WardsDestroyed\",\"FirstBlood\",\"Kills\",\"Deaths\",\"Assists\",\"EliteMonsters\",\"Dragons\",\"Heralds\",\"TowersDestroyed\",\"TotalGold\",\"AvgLevel\",\"TotalExperience\",\"TotalMinionsKilled\",\"TotalJungleMinionsKilled\",\"GoldDiff\",\"ExperienceDiff\",\"CSPerMin\",\"GoldPerMin\"]\nblue_data=[]\nblue_data=pd.DataFrame(blue_data)\nfor i in id_list:\n    blue_data[i]=data[\"blue\"+i]","b547e6cc":"blue_data.head()","a523123c":"id_list=id_list[1:]","1712368f":"print(id_list)","0105ecd4":"red_data=[]\nred_data=pd.DataFrame(red_data)\nwins=[0 if each == 1 else 1 for each in blue_data[\"Wins\"]]\nred_data[\"Wins\"]=wins\nfor i in id_list:\n    red_data[i]=data[\"red\"+i]","34355c1c":"red_data.head()","4105cd5c":"corr_list=[\"Wins\",\"WardsPlaced\",\"WardsDestroyed\",\"TotalGold\",\"TotalExperience\",\"TotalMinionsKilled\",\"GoldDiff\",\"ExperienceDiff\",\"CSPerMin\",\"GoldPerMin\",\"Kills\",\"AvgLevel\",\"Deaths\",\"FirstBlood\",\"EliteMonsters\",\"Dragons\",\"Heralds\",\"Assists\",\"TowersDestroyed\"]\n\nf,ax=plt.subplots(figsize=(12,12))\nsns.heatmap(blue_data[corr_list].corr(),annot=True,linewidths=.5,fmt=\".1f\",ax=ax)\nplt.show()","9cf0e9f3":"g = sns.factorplot(x=\"Kills\",y=\"Wins\", data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","196d0461":"g = sns.factorplot(x=\"AvgLevel\",y=\"Wins\", data=blue_data, kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","52f8d612":"g = sns.factorplot(x=\"Deaths\",y=\"Wins\", data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","623bf670":"g = sns.factorplot(x=\"FirstBlood\",y=\"Wins\", data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","2681d227":"g = sns.factorplot(x=\"EliteMonsters\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","b7905ab7":"g = sns.factorplot(x=\"Dragons\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","1fc53e72":"g = sns.factorplot(x=\"Heralds\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","3649aa08":"g = sns.factorplot(x=\"Assists\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","cfea24bd":"g = sns.factorplot(x=\"TowersDestroyed\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","c9ce7ee5":"blue_data[\"RoundedCSPerMin\"]=np.round(blue_data[\"CSPerMin\"])","d13e3077":"g = sns.factorplot(x=\"RoundedCSPerMin\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","2cddcba7":"print(\"max:\",np.max(blue_data.WardsPlaced),\"min:\",np.min(blue_data.WardsPlaced))","80098fb7":"i=0\nwhile i<5:\n    data1=blue_data[blue_data.WardsPlaced<=(i+1)*50]\n    data2=data1[data1.WardsPlaced>i*50]\n    g=sns.factorplot(x=\"WardsPlaced\",y=\"Wins\",data=data2,kind=\"bar\",height=12)\n    g.set_ylabels(\"Win Probability\")\n    plt.show()\n    i=i+1\n\n","d87d97f7":"print(\"max:\",np.max(blue_data.WardsDestroyed),\"min:\",np.min(blue_data.WardsDestroyed))","112257c3":"g=sns.factorplot(x=\"WardsDestroyed\",y=\"Wins\",data=blue_data,kind=\"bar\",height=12)\ng.set_ylabels(\"Win Probability\")\nplt.show()","e346e4bf":"print(np.mean(blue_data.TotalGold))\n","17772c0a":"liste=[1 if each>=16503 else 0 for each in blue_data.TotalGold]\nblue_data[\"totalgold\"]=liste\ng=sns.factorplot(x=\"totalgold\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","4d82bf57":"print(\"mean:\",np.mean(blue_data.TotalExperience),\"max:\",np.max(blue_data.TotalExperience),\"min:\",np.min(blue_data.TotalExperience))\n","dfbcfced":"liste=[1 if each>=20000 else 0 for each in blue_data.TotalExperience]\nblue_data[\"totalexp\"]=liste\ng=sns.factorplot(x=\"totalexp\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","883ba889":"print(\"mean:\",np.mean(blue_data.GoldPerMin),\"max:\",np.max(blue_data.GoldPerMin),\"min:\",np.min(blue_data.GoldPerMin))","78d6419e":"liste=[1 if each>=2000 else 0 for each in blue_data.GoldPerMin]\nblue_data[\"goldpermin\"]=liste\ng=sns.factorplot(x=\"goldpermin\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","bd8b9532":"print(\"mean:\",np.mean(blue_data.ExperienceDiff),\"max:\",np.max(blue_data.ExperienceDiff),\"min:\",np.min(blue_data.ExperienceDiff))","583bcfa9":"liste=[1 if each>=0 else 0 for each in blue_data.ExperienceDiff]\nblue_data[\"expdiff\"]=liste\ng=sns.factorplot(x=\"expdiff\",y=\"Wins\",data=blue_data,kind=\"bar\",height=7)\ng.set_ylabels(\"Win Probability\")\nplt.show()","2cf44d32":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        #3rd quartile\n        Q3= np.percentile(df[c],75)\n        # IQR\n        IQR= Q3-Q1\n        # Outlier step\n        outlier_step=IQR*1.5\n        #detect outliers and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) |( df[c]>Q3+outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","30e58ce7":"blue_data.loc[detect_outliers(blue_data,[\"Kills\",\"AvgLevel\",\"Deaths\",\"FirstBlood\",\"EliteMonsters\",\"Dragons\",\"Heralds\",\"Assists\",\"TowersDestroyed\",\"RoundedCSPerMin\",\"totalgold\",\"totalexp\",\"goldpermin\",\"expdiff\"])]","9811b4ba":"blue_data=blue_data.drop(detect_outliers(blue_data,[\"Kills\",\"AvgLevel\",\"Deaths\",\"FirstBlood\",\"EliteMonsters\",\"Dragons\",\"Heralds\",\"Assists\",\"TowersDestroyed\",\"RoundedCSPerMin\",\"totalgold\",\"totalexp\",\"goldpermin\",\"expdiff\"]),axis=0).reset_index(drop = True)","2efad613":"blue_data.Kills=[2 if i>=12 else 1 if i>=6 and i<12 else 0 for i in blue_data.Kills]","86c13a71":"blue_data.Kills.unique()","483110f7":"sns.countplot(x=\"Kills\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","f87676b0":"blue_data=pd.get_dummies(blue_data,columns=[\"Kills\"])\nblue_data.head()","94a1ec7f":"blue_data.AvgLevel=[1 if i>=7.2 else 0 for i in blue_data.AvgLevel]","88c7c41b":"blue_data.AvgLevel.unique()","74889593":"sns.countplot(x=\"AvgLevel\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","a5de93b3":"blue_data=pd.get_dummies(blue_data,columns=[\"AvgLevel\"])\nblue_data.head()","bb54ee28":"blue_data.Deaths=[1 if i<5 else 0 for i in blue_data.Deaths]","82684d8a":"blue_data.Deaths.unique()","b7d585f3":"sns.countplot(x=\"Deaths\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","fa56df2b":"blue_data=pd.get_dummies(blue_data,columns=[\"Deaths\"])\nblue_data.head()","56501640":"sns.countplot(x=\"FirstBlood\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","9310faf6":"blue_data=pd.get_dummies(blue_data,columns=[\"FirstBlood\"])\nblue_data.head()","cef70f14":"sns.countplot(x=\"EliteMonsters\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","55c2ad4f":"blue_data=pd.get_dummies(blue_data,columns=[\"EliteMonsters\"])\nblue_data.head()","3b6774ae":"sns.countplot(x=\"Dragons\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","bcec19ad":"blue_data=pd.get_dummies(blue_data,columns=[\"Dragons\"])\nblue_data.head()","4e1bb209":"sns.countplot(x=\"Heralds\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","fdddbee2":"blue_data=pd.get_dummies(blue_data,columns=[\"Heralds\"])\nblue_data.head()","5dcfadcb":"blue_data.Assists=[1 if i>=6 and i<15 else 2 if i>=15 else 0 for i in blue_data.Assists]","f662a08e":"blue_data.Assists.unique()","fcfec1cb":"sns.countplot(x=\"Assists\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","ee78887a":"blue_data=pd.get_dummies(blue_data,columns=[\"Assists\"])\nblue_data.head()","dc71a961":"sns.countplot(x=\"TowersDestroyed\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","18fec53d":"blue_data=pd.get_dummies(blue_data,columns=[\"TowersDestroyed\"])\nblue_data.head()","a43d765d":"blue_data.RoundedCSPerMin=[1 if i>=24 else 0 for i in blue_data.RoundedCSPerMin]","2707c671":"blue_data.RoundedCSPerMin.unique()","2321040b":"sns.countplot(x=\"RoundedCSPerMin\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","2fa9d099":"blue_data=pd.get_dummies(blue_data,columns=[\"RoundedCSPerMin\"])\nblue_data.head()","b3b18f06":"sns.countplot(x=\"totalgold\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","ce1ff529":"blue_data=pd.get_dummies(blue_data,columns=[\"totalgold\"])\nblue_data.head()","becf2acf":"sns.countplot(x=\"totalexp\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","b568c801":"blue_data=pd.get_dummies(blue_data,columns=[\"totalexp\"])\nblue_data.head()","256e69f8":"sns.countplot(x=\"goldpermin\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","dc314019":"blue_data=pd.get_dummies(blue_data,columns=[\"goldpermin\"])\nblue_data.head()","15e70657":"sns.countplot(x=\"expdiff\",data=blue_data)\nplt.xticks(rotation=60)\nplt.show()","eec07a3e":"blue_data=pd.get_dummies(blue_data,columns=[\"expdiff\"])\nblue_data.head()","b1001aaf":"blue_data.columns","8f8e742e":"blue_data=blue_data.drop([\"TotalGold\",\"TotalExperience\",\"TotalMinionsKilled\",\"TotalJungleMinionsKilled\",\"GoldDiff\",\"ExperienceDiff\",\"CSPerMin\",\"GoldPerMin\"],axis=1)\nblue_data.head()","82eb9f76":"blue_data.columns","beda7537":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","568e7cc3":"length=6000\ntest=blue_data[length:]\ntest.drop([\"Wins\"],axis=1,inplace=True)","7813deae":"test.head()","7282c951":"train=blue_data[:length]\nX_train=train.drop([\"Wins\"],axis=1)\nY_train=train.Wins\n\nx_train,x_test,y_train,y_test=train_test_split(X_train,Y_train,test_size=0.3,random_state=42)\nprint(\"x_train:\",len(x_train))\nprint(\"x_test:\",len(x_test))\nprint(\"y_train:\",len(y_train))\nprint(\"y_test:\",len(y_test))\nprint(\"test:\",len(test))","c9fc56af":"logreg=LogisticRegression()\nlogreg.fit(x_train,y_train)\nacc_log_train=round(logreg.score(x_train,y_train)*100,2)\nacc_log_test=round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Accuracy: %{}\".format(acc_log_train))\nprint(\"Test Accuracy: %{}\".format(acc_log_test))","f2d13085":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","5c7de310":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","8bf90b6b":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVC\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\n\ng= sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Acc.\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","17a5dde7":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                    (\"rf\",best_estimators[2]),\n                                    (\"lr\",best_estimators[3])],\n                                    voting=\"soft\",n_jobs=-1)\nvotingC=votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","ae3f974c":"<a id=\"11\"><\/a><br>\n## Wins -- AvgLevel","7e3e54b2":"<a id=\"40\"><\/a><br>\n# Outlier Detection","692fa7b4":"<a id=\"25\"><\/a><br>\n## Wins -- ExperienceDiff","fb2be5de":"* According to graph we can say that a player with 4 or less has more chance to win a ranked game.","a5de2099":"* From this graph we can say that for a player who had 12 or more kills has really high chance to win.\n* The player with between 6 and 12 kills player has nearly same cahnce to win and lose.\n* The others are most probably lost their games.","c64bf0c1":"<a id=\"8\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","36766719":"This markdown is for WardsPlaced and WardsDestroyed part:\n* After I looked their graphs I also decided that win rates are randomly scatterd into the data. Because of that I decided to drop this par tin [Drop Other Elements](#4) part.","1eaefb8f":"<a id=\"10\"><\/a><br>\n## Wins -- Kills","ae01decc":"<a id=\"39\"><\/a><br>\n## Wins -- ExperienceDiff","60afae28":"<a id=\"24\"><\/a><br>\n## Wins -- GoldPerMin","7d498e96":"After this part I have the same problem with wards part and I classified them according to their average values.","43a42dca":"Actually if we looked at the heatmap we can see that there is no correlation between Wins and Wardsplaced. But as I said in the introduction part I think that wards are one of the most important part of a LoL game. Because of that I wanted to examine. For examining I looked at it in 5 parts.","5d7b80b7":"* In this kinda situations there is just 2 probability. If we look at the graph we can see that if the player have taken the first blood player has more chance to win.","c2e4625f":"<a id=\"20\"><\/a><br>\n## Wins -- WardsPlaced","90e91968":"* From this graph we can say that if the average level is higher than 7.2 they have more cahnce to others.","a6bc26fe":"* As we expected from the past graph killing more dragons makes you closer to being a winner.","d3f52420":"<a id=\"37\"><\/a><br>\n## Wins -- TotalExperience","0e936faf":"* According to the graph we can say that if you kill more elite monsters you have higher chance to win.","8d182971":"# Introduction\n\n   Firstly I want to say that I am playing LoL for 5 years and the first time I see this data I said to myself that I should analys this data. In this data I just tried to predict win chance of the blue team according to their inputs.I've shocked beacuse of the thruth that there is no any correlation between win and number of wards you placed or destroyed. I talked about it in Wins -- WardsDestroyed part under Visualization part. Finally, I am actually happy to work on two things that I'm loving to do. \n\n1. [Entering and Seperating Data](#1)\n1. [Visualization](#2)\n     * [Wins -- Kills](#10)\n     * [Wins -- AvgLevel](#11)\n     * [Wins -- Deaths](#12)\n     * [Wins -- FirstBlood](#13)\n     * [Wins -- EliteMonsters](#14)\n     * [Wins -- Dragons](#15)\n     * [Wins -- Heralds](#16)\n     * [Wins -- Assists](#17)\n     * [Wins -- TowersDestroyed](#18)\n     * [Wins -- RoundedCSPerMin](#19)\n     * [Wins -- WardsPlaced](#20)\n     * [Wins -- WardsDestroyed](#21)\n     * [Wins -- TotalGold](#22)\n     * [Wins -- TotalExperience](#23)\n     * [Wins -- GoldPerMin](#24)\n     * [Wins -- ExperienceDiff](#25)\n1. [Outlier Detection](#40)\n1. [Feature Engineering](#3)\n     * [Wins -- Kills](#26)\n     * [Wins -- AvgLevel](#27)\n     * [Wins -- Deaths](#28)\n     * [Wins -- FirstBlood](#29)\n     * [Wins -- EliteMonsters](#30)\n     * [Wins -- Dragons](#31)\n     * [Wins -- Heralds](#32)\n     * [Wins -- Assists](#33)\n     * [Wins -- TowersDestroyed](#34)\n     * [Wins -- RoundedCSPerMin](#35)\n     * [Wins -- TotalGold](#36)\n     * [Wins -- TotalExperience](#37)\n     * [Wins -- GoldPerMin](#38)\n     * [Wins -- ExperienceDiff](#39)\n1. [Drop Other Elements](#4)\n1. [Modelling](#5)\n     * [Train Test Split](#6)\n     * [Simple Logistic Regression](#7)\n     * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#8)\n     * [Ensemble Modelling](#9)","e9fd1b9e":"* If the player's assists are greater or equal to 15 has more chance to other situations.\n* If the player's assists are between 7 and 15 has nearly same chance to win or lose.\n* The last probability has more chance to lose than win.","e3db6310":"<a id=\"35\"><\/a><br>\n## Wins -- RoundedCSPerMin","989894d0":"<a id=\"32\"><\/a><br>\n## Wins -- Heralds","4e2b2077":"<a id=\"23\"><\/a><br>\n## Wins -- TotalExperience","6b20725d":"<a id=\"16\"><\/a><br>\n## Wins -- Heralds","b128f9f4":"<a id=\"9\"><\/a><br>\n## Ensemble Modelling","dcb43053":"<a id=\"14\"><\/a><br>\n## Wins -- EliteMonsters","392e1f14":"<a id=\"6\"><\/a><br>\n## Train Test Split","857f22e1":"<a id=\"4\"><\/a><br>\n# Drop Other Elements","47610d53":"<a id=\"33\"><\/a><br>\n## Wins -- Assists","bb548c8a":"<a id=\"19\"><\/a><br>\n## Wins -- RoundedCSPerMin","09f9c71e":"<a id=\"12\"><\/a><br>\n## Wins -- Deaths","d208843d":"* According to the graph we can say that if your creep score is 25 or higher you have really more cahce to others.","01be903e":"* The explanaton that I did in Wins -- Dragons part is also applies for this part. ","69eb6dd4":"In this part I wanted to say that I firstly looked at graphs of TotalMinionsKilled and TotalJungleMinionsKilled and after that I saw classifiaction is really hard because of the variation of the numbers. Then I decided to look CSPerMin. \"CS\" is shorthand for \"Creep Score\", and is the number of creeps (neutral jungle creeps or the enemy's creeps) that you have scored the last hit on and obtained gold from. After look at te CSPerMin I saw same problem with others but after that I thought that I can round it and then use it.\n\nCS information from: https:\/\/gaming.stackexchange.com\/questions\/58190\/what-does-cs-mean-and-how-do-you-increase-it-the-best-you-can","f30fc71c":"* From the graph we can say that the more you destroy tower the more you ave chance to win.","ffb7d9ce":"<a id=\"15\"><\/a><br>\n## Wins -- Dragons","08147448":"<a id=\"31\"><\/a><br>\n## Wins -- Dragons","4e40fa59":"<a id=\"27\"><\/a><br>\n## Wins -- AvgLevel","4b6acad1":"<a id=\"29\"><\/a><br>\n## Wins -- FirstBlood","c4e878bd":"<a id=\"34\"><\/a><br>\n## Wins -- TowersDestroyed","76a82d5a":"<a id=\"21\"><\/a><br>\n## Wins -- WardsDestroyed","5fe97cd3":"<a id=\"36\"><\/a><br>\n## Wins -- TotalGold","66a91c18":"<a id=\"1\"><\/a><br>\n# Entering and Seperating Data","6836dc32":"<a id=\"13\"><\/a><br>\n## Wins -- FirstBlood","6e14b048":"<a id=\"2\"><\/a><br>\n# Visualization","d64e3e8e":"<a id=\"22\"><\/a><br>\n## Wins -- TotalGold","7f59a19a":"<a id=\"5\"><\/a><br>\n# Modelling","8eb63f4f":"<a id=\"3\"><\/a><br>\n# Feature Engineering","438a150b":"<a id=\"7\"><\/a><br>\n## Simple Logistic Regression","eeba2a09":"<a id=\"38\"><\/a><br>\n## Wins -- GoldPerMin","9ea02c75":"<a id=\"17\"><\/a><br>\n## Wins -- Assists","c367e8d7":"<a id=\"18\"><\/a><br>\n## Wins -- TowersDestroyed","3384e385":"<a id=\"26\"><\/a><br>\n## Wins -- Kills","c185d7f7":"<a id=\"28\"><\/a><br>\n## Wins -- Deaths","626c6b7d":"<a id=\"30\"><\/a><br>\n## Wins -- EliteMonsters"}}