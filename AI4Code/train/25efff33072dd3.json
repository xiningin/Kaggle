{"cell_type":{"2851d662":"code","9b452de8":"code","7634be73":"code","287b0d2c":"code","c0730954":"code","4215c9f6":"code","2b3997e6":"code","5136de89":"code","73cf7de2":"code","85bae02d":"code","0d899d29":"code","57c0545b":"code","85e95a0f":"code","f7c23206":"code","be2f58c1":"code","9954e2e7":"markdown","94f6a9b3":"markdown","541e394b":"markdown","6415036f":"markdown","c29bdf61":"markdown","38762845":"markdown","c5fb2c7e":"markdown","777d1f7c":"markdown","764cb9a3":"markdown","5bcd5992":"markdown","d17f14ba":"markdown","bc66bac6":"markdown","f35bd6fc":"markdown","9fca462e":"markdown","567b63e3":"markdown","173a7d35":"markdown","535fb349":"markdown","493cd34b":"markdown","71f2cdfe":"markdown","d87b7879":"markdown"},"source":{"2851d662":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n%matplotlib inline","9b452de8":"from sklearn.metrics import roc_auc_score, roc_curve, auc","7634be73":"def ensembling(main, support, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6, coeff7, coeff8): \n    \n    suba  = main.copy()\n    subav = suba.values\n    \n    subb  = support.copy()\n    subbv = subb.values    \n              \n    ense  = main.copy()\n    ensev = ense.values\n \n    for i in range (len(main)):       \n        idst = subav[i, 0]\n        pera = subav[i, 1]       \n        perb = subbv[i, 1] \n        \n        if ((idst[0]=='0') or (idst[0]=='1')):        \n            per = (pera * coeff1) + (perb * (1.0 - coeff1))\n\n        if ((idst[0]=='2') or (idst[0]=='3')):        \n            per = (pera * coeff2) + (perb * (1.0 - coeff2))\n            \n        if ((idst[0]=='4') or (idst[0]=='5')):        \n            per = (pera * coeff3) + (perb * (1.0 - coeff3))\n\n        if ((idst[0]=='6') or (idst[0]=='7')):        \n            per = (pera * coeff4) + (perb * (1.0 - coeff4))   \n                      \n        if ((idst[0]=='8') or (idst[0]=='9')):        \n            per = (pera * coeff5) + (perb * (1.0 - coeff5))\n\n        if ((idst[0]=='a') or (idst[0]=='b')):        \n            per = (pera * coeff6) + (perb * (1.0 - coeff6))\n            \n        if ((idst[0]=='c') or (idst[0]=='d')):        \n            per = (pera * coeff7) + (perb * (1.0 - coeff7))\n\n        if ((idst[0]=='e') or (idst[0]=='f')):        \n            per = (pera * coeff8) + (perb * (1.0 - coeff8))                             \n           \n        ensev[i, 1] = per\n        \n    ense.iloc[:, 1] = ensev[:, 1]\n\n    ###############################    \n    X  = suba.iloc[:, 1]\n    Y1 = subb.iloc[:, 1]\n    Y2 = ense.iloc[:, 1]\n    \n    plt.style.use('seaborn-whitegrid') \n    plt.figure(figsize=(9, 9), facecolor='lightgray')\n    plt.title(f'\\nE N S E M B L I N G\\n')   \n      \n    plt.scatter(X, Y1, s=1.5, label='Support')    \n    plt.scatter(X, Y2, s=1.5, label='Generated')\n    plt.scatter(X, X , s=0.1, label='Main(X=Y)')\n    \n    plt.legend(fontsize=12, loc=2)\n    #plt.savefig('Ensembling_1.png')\n    plt.show()     \n    ###############################   \n    ense.iloc[:, 1] = ense.iloc[:, 1].astype(float)\n    hist_data = [subb.iloc[:, 1], ense.iloc[:, 1], suba.iloc[:, 1]] \n    group_labels = ['Support', 'Ensembling', 'Main']\n    \n    fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False)\n    fig.show()   \n    ###############################   \n    \n    return ense     \n","287b0d2c":"def drawing(ense, comp):    \n    comp.iloc[:, 1] = comp.iloc[:, 1].astype(float)\n    hist_data = [ense.iloc[:, 1], comp.iloc[:, 1]] \n    group_labels = [ 'Ensembling', 'Comparative Method']\n    \n    fig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False)\n    fig.show()   ","c0730954":"path0 = '..\/input\/g2net-834\/submission.csv'\n\nsub834a = pd.read_csv(path0).sort_values('id')","4215c9f6":"path1 = '..\/input\/g2net-855a\/submission.csv'\n\nsub855a = pd.read_csv(path1).sort_values('id')","2b3997e6":"path2 = '..\/input\/g2net-860\/submission.csv'\n\nsub860a = pd.read_csv(path2).sort_values('id')","5136de89":"path3 = '..\/input\/g2net-861\/submission.csv'\n\nsub861a = pd.read_csv(path3).sort_values('id')","73cf7de2":"path4 = '..\/input\/g2net-864\/model_submission.csv'\n\nsub864a = pd.read_csv(path4).sort_values('id')","85bae02d":"path5 = '..\/input\/g2net-866\/submission.csv'\n\nsub866a = pd.read_csv(path5).sort_values('id')","0d899d29":"path6 = '..\/input\/g2net-869\/submission.csv'\n\nsub869a = pd.read_csv(path6).sort_values('id')","57c0545b":"path = [path0, path1, path2, path3, path4, path5, path6]","85e95a0f":"hist_data = [sub834a.target, sub855a.target, sub860a.target, sub861a.target, sub864a.target, sub866a.target, sub869a.target]  \n\ngroup_labels = ['0.834a', '0.855a', '0.860a', '0.861a', '0.864a', '0.866a', '0.869a']\n    \nfig = ff.create_distplot(hist_data, group_labels, bin_size=.2, show_hist=False, show_rug=False) \n\nfig.show()","f7c23206":"sub1 = ensembling(sub855a, sub834a, 0.42, 0.42, 0.42, 1.00, 1.00, 0.42, 0.42, 0.42)\n\nsub2 = ensembling(sub860a,    sub1, 0.60, 0.60, 0.60, 0.65, 0.65, 0.60, 0.60, 0.60)\n\nsub3 = ensembling(sub861a,    sub2, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45)\n\nsub4 = ensembling(sub864a,    sub3, 0.45, 0.45, 0.40, 0.55, 0.30, 0.45, 0.45, 0.45)\n\nsub5 = ensembling(sub866a,    sub4, 0.50, 0.50, 0.50, 0.50, 0.55, 0.50, 0.50, 0.50)\n\nsub6 = ensembling(sub869a,    sub5, 0.25, 0.25, 0.25, 0.25, 0.35, 0.25, 0.25, 0.25)","be2f58c1":"sub1.to_csv(\"submission1.csv\",index=False)\nsub2.to_csv(\"submission2.csv\",index=False)\nsub3.to_csv(\"submission3.csv\",index=False)\nsub4.to_csv(\"submission4.csv\",index=False)\nsub5.to_csv(\"submission5.csv\",index=False)\n\nsub6.to_csv(\"submission_final.csv\",index=False)\n!ls","9954e2e7":"<div class=\"alert alert-success\">  \n<\/div>","94f6a9b3":"<div>\n    <h1 align=\"center\">Smart Ensembling<\/h1>    \n    <h1 align=\"center\">G2Net Gravitational Wave Detection<\/h1> \n    <h4 align=\"center\">By: Somayyeh Gholami & Mehran Kazeminia<\/h4>\n<\/div>","541e394b":"Thanks to: @hidehisaarai1213 https:\/\/www.kaggle.com\/hidehisaarai1213\/g2net-tf-on-the-fly-cqt-tpu-inference","6415036f":"Thanks to: @miklgr500 https:\/\/www.kaggle.com\/miklgr500\/g2net-efficientnetb1-tpu-evaluate\/output","c29bdf61":"Thanks to: @ihelon https:\/\/www.kaggle.com\/ihelon\/g2net-eda-and-modeling\/output?select=model_submission.csv","38762845":"<div class=\"alert alert-success\">  \n<\/div>","c5fb2c7e":"Thanks to: @mrigendraagrawal https:\/\/www.kaggle.com\/mrigendraagrawal\/tf-g2net-eda-and-starter","777d1f7c":"## Import","764cb9a3":"## Data Set","5bcd5992":"Thanks to: @yasufuminakama https:\/\/www.kaggle.com\/yasufuminakama\/g2net-efficientnet-b7-baseline-inference","d17f14ba":"## Submission","bc66bac6":"Thanks to: @wabinab https:\/\/www.kaggle.com\/wabinab\/submission-baseline","f35bd6fc":"<div class=\"alert alert-success\">  \n<\/div>","9fca462e":"<div class=\"alert alert-success\">  \n<\/div>","567b63e3":"<div class=\"alert alert-success\">  \n<\/div>","173a7d35":"Thanks to: @miklgr500 https:\/\/www.kaggle.com\/miklgr500\/cqt-g2net-efficientnetb1-tpu-inference\/output?select=submission.csv\n\nThanks to: @xuxu1234 https:\/\/www.kaggle.com\/xuxu1234\/lb-0-866-g2net-efficientnetb7-tpu-inference","535fb349":"## Functions","493cd34b":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","71f2cdfe":"<div class=\"alert alert-success\">  \n<\/div>","d87b7879":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">Ensembling<\/h1>\n<\/div>"}}