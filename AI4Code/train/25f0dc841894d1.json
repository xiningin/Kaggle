{"cell_type":{"28856b9c":"code","006e23f1":"code","1acea6be":"code","5165a01f":"code","b96cd826":"code","7c8774db":"code","30c84051":"code","b8e95b74":"code","c0beba48":"code","767472b8":"code","691c0f26":"code","dcf2a86a":"code","2ff789a6":"code","f0bb6b0c":"code","5f5c028a":"code","41ac55e4":"code","863ff1dc":"code","2c56c292":"code","9069d433":"code","38dec955":"code","763de05b":"code","5db28337":"markdown","30e8500e":"markdown","c2109a2b":"markdown","752c2a92":"markdown","d2c06b2d":"markdown","1f28260b":"markdown","9be2e67a":"markdown","3e57d697":"markdown"},"source":{"28856b9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","006e23f1":"#Create an array of first 100 number\nimport numpy as np\na=np.arange(1,101)\nprint(a)","1acea6be":"#Create an array of first 50 even numbers\nimport numpy as np\na=np.arange(2,51,2)\nprint(a)","5165a01f":"#Create an array of first 50 odd numbers\nimport numpy as np\na=np.arange(1,51,2)\nprint(a)","b96cd826":"#Create an array of first 50 numbers and reshape them in 10 rows and 5 columns\nimport numpy as np\na=np.arange(1,51)\nprint(a)\nb=a.reshape(10,5)\nprint(b)","7c8774db":"import numpy as np\narray_3d=np.arange(1,37)\narray_3d=array_3d.reshape(3,3,4)\nprint(array_3d)\nprint('Array shape',array_3d.shape)\nprint('Array Dimension',array_3d.ndim)\nprint('Minimum value along the Axis 0', array_3d.min(axis=0))\nprint('Minimum value along the axis 1', array_3d.min(axis=1))\nprint('Minimum value along the axis 2', array_3d.min(axis=2))\nprint('----------------------------------------------------')\nprint('Maximum value along the Axis 0', array_3d.max(axis=0))\nprint('Maximum value along the axis 1', array_3d.max(axis=1))\nprint('Maximum value along the axis 2', array_3d.max(axis=2))","30c84051":"Matrix Inverse, Matrix Determinant, Linear equation sums","b8e95b74":"import numpy as np\nm_list=[[4,3],[-5,9]]\nA=np.array(m_list)\nprint('Matrix A:')\nprint(A)\n\nn_list=[[20],[26]]\nB=np.array(n_list)\nprint('Matrix B:')\nprint(B)\n\nX=np.linalg.inv(A).dot(B)\nprint('x and y are:')\nprint(X)","c0beba48":"import numpy as np\nA= np.array([[4,3,2],[-2,2,3],[3,-5,2]])\nprint('Matrix A:')\nprint(A)\nB=np.array([25,-10,-4])\nprint('Matrix B:')\nprint(B)\nX=np.linalg.inv(A).dot(B)\nprint('Values of x,y and z are:')\nprint(X)","767472b8":"%%time\nimport numpy as np\n\na = np.array([[67, 19, 21], [39, 13, 14], [81,24,26]])\nprint('Determinant:')\nd = np.linalg.det(a)\n\nprint(d)","691c0f26":"%%time\nimport numpy as np \na=np.array([[1,2,3,4],[5,6,7,8],[11,12,13,14],[15,16,17,18]])\nprint('Determinant:')\nd=np.linalg.det(a)\nprint(d)","dcf2a86a":"import pandas as pd","2ff789a6":"df=pd.read_csv('..\/input\/titanic\/train_and_test2.csv')\ndf.head()","f0bb6b0c":"df.head(10)","5f5c028a":"df.tail()","41ac55e4":"df.info()","863ff1dc":"df.describe()","2c56c292":"df.columns","9069d433":"df.to_excel('titanic.xlsx')\ndf1=pd.read_excel('titanic.xlsx')\ndf1.head()","38dec955":"df.to_excel('titanic_with_no_index.xlsx',index=False)\ndf2=pd.read_excel('titanic_with_no_index.xlsx')\ndf2.head()","763de05b":"#Indexing problem\n##First way is to put index=False\n#Second way is to below to put index_col=[0]\n\ndf3=pd.read_excel('titanic.xlsx',index_col=[0])\ndf3.head()","5db28337":"2) Determinant sum","30e8500e":"Importing Titanic Dataset and applying pandas operations","c2109a2b":"1) Linear Equation Sums","752c2a92":"Assignment No.1","d2c06b2d":"4x + 3y + 2z = 25; \n-2x + 2y + 3z = -10; \n3x -5y + 2z = -4","1f28260b":"4x  + 3y = 20;\n-5x + 9y = 26","9be2e67a":"Assignment No.3","3e57d697":"Assignment No. 2\n"}}