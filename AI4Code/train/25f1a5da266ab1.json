{"cell_type":{"91797321":"code","c52c4835":"code","96e3478d":"code","d0679beb":"code","98df6566":"code","c0d1693c":"code","3e36d099":"code","03dac995":"code","e3c04bb1":"code","d3aab046":"code","2f376ff1":"code","cab73b49":"code","3dadc278":"markdown","e5e72599":"markdown","712f1f1d":"markdown","ce9fe478":"markdown","fc44b37a":"markdown","b1f11dc7":"markdown","82878eb8":"markdown","949d1529":"markdown","85a9903d":"markdown"},"source":{"91797321":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nprint(os.listdir(\"..\/input\"))\nnp.random.seed(42)","c52c4835":"train_targets_inside = np.load(\"..\/input\/eyn-original\/train_targets_inside.npy\")\ndf_train = pd.read_pickle(\"..\/input\/eyn-pre-unravel-df\/df_train.pickle\")\ndf_test = pd.read_pickle(\"..\/input\/eyn-pre-unravel-df\/df_test.pickle\")\nprint(df_train.shape, df_test.shape)\ndf_train","96e3478d":"df_train_values = df_train.values\ndf_test_values = df_test.values\ndf_train_columns = df_train.columns\ndf_test_columns = df_test.columns","d0679beb":"# standardised 4-fold train-test split for clustering purposes\nfrom sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=4, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])),\n                                      train_targets_inside.astype(int)):\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\n    \nnp.save(\"trn_index_list\",trn_index_list)\nnp.save(\"val_index_list\",val_index_list)","98df6566":"from sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])),\n                                      train_targets_inside.astype(int)):\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\n    \nnp.save(\"trn_index_list_10f\",trn_index_list)\nnp.save(\"val_index_list_10f\",val_index_list)","c0d1693c":"from sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=15, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])),\n                                      train_targets_inside.astype(int)):\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\n    \nnp.save(\"trn_index_list_15f\",trn_index_list)\nnp.save(\"val_index_list_15f\",val_index_list)","3e36d099":"train_last_is_stationary = np.argwhere(df_train_values[::21,df_train_columns.get_loc(\"dur\")] == 0)[:,0]\ntrain_last_not_stationary = np.argwhere(df_train_values[::21,df_train_columns.get_loc(\"dur\")] != 0)[:,0]\ntest_last_is_stationary = np.argwhere(df_test_values[::21,df_test_columns.get_loc(\"dur\")] == 0)[:,0]\ntest_last_not_stationary = np.argwhere(df_test_values[::21,df_test_columns.get_loc(\"dur\")] != 0)[:,0]\nprint(train_last_is_stationary.shape, train_last_not_stationary.shape)\nprint(test_last_is_stationary.shape, test_last_not_stationary.shape)\n\ntrain_last_seen_is_inside = np.argwhere(df_train_values[::21,df_train_columns.get_loc(\"entry_in\")] == 1)[:,0]\ntrain_last_seen_not_inside = np.argwhere(df_train_values[::21,df_train_columns.get_loc(\"entry_in\")] == 0)[:,0]\ntest_last_seen_is_inside = np.argwhere(df_test_values[::21,df_test_columns.get_loc(\"entry_in\")] == 1)[:,0]\ntest_last_seen_not_inside = np.argwhere(df_test_values[::21,df_test_columns.get_loc(\"entry_in\")] == 0)[:,0]\nprint(train_last_seen_is_inside.shape, train_last_seen_not_inside.shape)\nprint(test_last_seen_is_inside.shape, test_last_seen_not_inside.shape)\n\nnp.save(\"train_last_is_stationary\", train_last_is_stationary)\nnp.save(\"train_last_not_stationary\", train_last_not_stationary)\nnp.save(\"test_last_is_stationary\", test_last_is_stationary)\nnp.save(\"test_last_not_stationary\", test_last_not_stationary)\nnp.save(\"train_last_seen_is_inside\", train_last_seen_is_inside)\nnp.save(\"train_last_seen_not_inside\", train_last_seen_not_inside)\nnp.save(\"test_last_seen_is_inside\", test_last_seen_is_inside)\nnp.save(\"test_last_seen_not_inside\", test_last_seen_not_inside)\n\nlast_nonstat_indexes = train_last_not_stationary","03dac995":"from sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])), train_targets_inside.astype(int)):\n    trn_index = np.intersect1d(trn_index, last_nonstat_indexes)\n    val_index = np.intersect1d(val_index, last_nonstat_indexes)\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\nprint(trn_index.shape, val_index.shape)\nprint(trn_index, val_index)\n\nnp.save(\"trn_index_list_10f_nostat\",trn_index_list)\nnp.save(\"val_index_list_10f_nostat\",val_index_list)","e3c04bb1":"from sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=15, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])), train_targets_inside.astype(int)):\n    trn_index = np.intersect1d(trn_index, last_nonstat_indexes)\n    val_index = np.intersect1d(val_index, last_nonstat_indexes)\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\nprint(trn_index.shape, val_index.shape)\nprint(trn_index, val_index)\n\nnp.save(\"trn_index_list_15f_nostat\",trn_index_list)\nnp.save(\"val_index_list_15f_nostat\",val_index_list)","d3aab046":"np.random.shuffle(last_nonstat_indexes)\n\ntrn_val_index, ems_index = np.split(last_nonstat_indexes, [int(.9*len(last_nonstat_indexes))])\ntrn_val_index = np.sort(trn_val_index)\nems_index = np.sort(ems_index)\nprint(ems_index.shape, trn_val_index.shape)","2f376ff1":"from sklearn.model_selection import StratifiedKFold, KFold\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\ntrn_index_list = []\nval_index_list = []\nfor trn_index, val_index in skf.split(np.arange(len(df_train_values[::21])), train_targets_inside.astype(int)):\n    trn_index = np.intersect1d(np.intersect1d(trn_index, last_nonstat_indexes), trn_val_index)\n    val_index = np.intersect1d(np.intersect1d(val_index, last_nonstat_indexes), trn_val_index)\n    trn_index_list.append(trn_index)\n    val_index_list.append(val_index)\nprint(trn_index.shape, val_index.shape, ems_index.shape)\nprint(trn_index, val_index)\n    \nnp.save(\"trn_index_list_e10_10f_nostat\",trn_index_list)\nnp.save(\"val_index_list_e10_10f_nostat\",val_index_list)\nnp.save(\"ems_index_e10_nostat\",ems_index)","cab73b49":"!ls","3dadc278":"### 10 folds","e5e72599":"### 10 folds unreserved stationary-excluded\nwithout reserve for ensembling","712f1f1d":"## Inside and stationary indexes","ce9fe478":"## Now with reserve for emsemble\n\n","fc44b37a":"### original 4 folds","b1f11dc7":"### 15 folds unreserved ","82878eb8":"## Other number of folds\n\nNow we exclude points that end up to be stationary","949d1529":"### 15 folds","85a9903d":"### 10 folds reserved"}}