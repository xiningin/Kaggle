{"cell_type":{"c22c813b":"code","d26d9a57":"code","518aad4f":"code","c4ea3eea":"code","53d91db2":"code","4d1e9113":"code","c4beced3":"code","04e0d621":"code","cbe02263":"code","77559099":"code","bf96f679":"code","984f783c":"code","a3754118":"code","4e3457e2":"code","093f1378":"code","64fa7bf1":"code","36d7497c":"code","dcf028c0":"code","c0c2340e":"code","a4d818ce":"code","f96a577e":"code","7aa64830":"code","bfcf4d59":"code","a66e972b":"code","e29703cb":"code","8a019068":"code","494d2b9e":"code","5d84d1e4":"code","e561c412":"code","81d2cc62":"code","e3a07a88":"code","70b4ccd1":"code","be07eed7":"code","9e1321d4":"code","c0d3ac9e":"code","0b22150d":"code","2e20f674":"code","6d388920":"code","a1f87a62":"code","a15f2672":"code","bfda6838":"code","1f0fbf9c":"code","6a458097":"code","13691e80":"code","44c0561b":"code","01816727":"code","eb7ac7b4":"code","52f54f13":"code","9f3a31a0":"code","1e25b610":"code","9944af65":"code","4b8b2b20":"code","c73ed53a":"code","90508dac":"code","ab71501f":"code","482dfc85":"code","021a4dc7":"code","f937c4d9":"code","23bd1d67":"code","cded8b05":"code","1c206aad":"code","5038b4f3":"code","e2f8b993":"code","938784c9":"code","e8da2f87":"code","1aaa4436":"code","cfd422b8":"code","2e96f8a4":"code","761cbaf1":"code","bd0ee176":"code","08b06d24":"code","623b5ce0":"code","e6645333":"code","a774feca":"code","ddf45258":"code","8d063f46":"code","20f8f10d":"code","bcd39848":"code","81e48fd9":"code","668f33f5":"code","1eec7d25":"code","8a1a1c22":"code","6834cafe":"markdown","3ac7e5be":"markdown","523da7e1":"markdown","1a99bd7d":"markdown","88879961":"markdown","d7d377a4":"markdown","c23c1204":"markdown","4ce2bcc9":"markdown","4b8ae8a0":"markdown","cbde2017":"markdown","25bc405e":"markdown","6e1ed716":"markdown","f7e7ea0e":"markdown","8f90bfd8":"markdown","06890129":"markdown","e7953e02":"markdown","61d44eed":"markdown","5c128bd0":"markdown","6ce0f13f":"markdown","83bf69e8":"markdown","70f8e89e":"markdown","97be5618":"markdown","b74e7d7d":"markdown","d37147d2":"markdown","6864cf44":"markdown","7f68f1f1":"markdown","4a3f39bf":"markdown","8190a2f9":"markdown","8e5a205a":"markdown","2276693e":"markdown","b320ad2b":"markdown","d37e49e7":"markdown","895c5abd":"markdown","eb2297bf":"markdown","d65366b8":"markdown","fa24580a":"markdown","66292f86":"markdown","c94bb1f2":"markdown","fb6c642a":"markdown","d0d45d98":"markdown","ca61cbfc":"markdown","a80d386c":"markdown","7e80a620":"markdown","1bf3f334":"markdown","5d5da823":"markdown","ae1f1269":"markdown","91c1f6cc":"markdown","e0ee1d10":"markdown","3aef6c7e":"markdown","8b9f6c85":"markdown","ab74b5ae":"markdown","1c566971":"markdown","4ada7e68":"markdown","0b993b62":"markdown","edc36b03":"markdown","95c95377":"markdown","4aa166e2":"markdown","26da1d84":"markdown","7cdc4f69":"markdown","5f432177":"markdown","d2636fed":"markdown","0a5be898":"markdown","0aae976f":"markdown","d9c504d4":"markdown","d5c26743":"markdown","01b682ca":"markdown","6653bdef":"markdown","ac059d87":"markdown","8d9150be":"markdown","7e2b313c":"markdown","10d483a4":"markdown","d992dd57":"markdown","76d8e282":"markdown","f6df66ad":"markdown","e2a85441":"markdown","1e3077d8":"markdown","2f91153c":"markdown","8c11f013":"markdown","226361fb":"markdown","f8a22eea":"markdown","604ffa35":"markdown","93559c6e":"markdown","77229c21":"markdown","8f8772c2":"markdown","5b5f774b":"markdown","3c485761":"markdown","2b76cbc6":"markdown","fd055e40":"markdown","17f90bac":"markdown","06f36bd5":"markdown","dc66dae6":"markdown","a1b5fe82":"markdown","a8c0eedb":"markdown","1afa655b":"markdown","6b5e424f":"markdown","d0593a2e":"markdown","e13805a9":"markdown","4993b395":"markdown"},"source":{"c22c813b":"import warnings\nwarnings.filterwarnings('ignore')","d26d9a57":"import pandas as pd","518aad4f":"data = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndata.head()","c4ea3eea":"data.info()","53d91db2":"data.nunique()","4d1e9113":"import re\nimport spacy","c4beced3":"def remove_at_hash(sent):\n    \"\"\" Returns a string with @-symbols and hashtags removed. \"\"\"\n    return re.sub(r'@|#', r'', sent.lower())\n\ndef remove_sites(sent):\n    \"\"\" Returns a string with any websites starting with 'http.' removed. \"\"\"\n    return re.sub(r'http.*', r'', sent.lower())\n\ndef remove_punct(sent):\n    \"\"\" Returns a string with only English unicode word characters ([a-zA-Z0-9_]). \"\"\"\n    return ' '.join(re.findall(r'\\w+', sent.lower()))","04e0d621":"data['text_simple'] = data['text'].apply(lambda x: remove_punct(remove_sites(remove_at_hash(x))))\ndata.head()","cbe02263":"nlp = spacy.load('en', disable=['ner', 'parser'])\n\ndef spacy_cleaning(doc):\n    \"\"\" Returns a string that has been lemmatized and rid of stop words via SpaCy. \"\"\"\n    doc = nlp(doc.lower())\n    text = [token.lemma_ for token in doc if not token.is_stop]\n    return ' '.join(text)","77559099":"data['text_spacy'] = data['text'].apply(lambda x: spacy_cleaning(x))\ndata.head()","bf96f679":"from gensim.models.phrases import Phrases, Phraser","984f783c":"text = [re.split('\\s+', tweet) for tweet in data['text']]","a3754118":"bigram_phrases = Phrases(text, min_count=30)\nbigram = Phraser(bigram_phrases)\nbigram_text = bigram[text]","4e3457e2":"trigram_phrases = Phrases(bigram_text, min_count=30)\ntrigram = Phraser(trigram_phrases)\ntrigram_text = trigram[bigram_text]","093f1378":"data['text_trigram'] = [' '.join(tweet) for tweet in trigram_text]\ndata.head()","64fa7bf1":"text_simple = [re.split('\\s+', tweet) for tweet in data['text_simple']]\n\nbigram_phrases = Phrases(text_simple, min_count=30)\nbigram = Phraser(bigram_phrases)\nbigram_text_simple = bigram[text_simple]\n\ntrigram_phrases = Phrases(bigram_text_simple, min_count=30)\ntrigram = Phraser(trigram_phrases)\ntrigram_text_simple = trigram[bigram_text_simple]\n\ndata['text_trigram_simple'] = [' '.join(tweet) for tweet in trigram_text_simple]","36d7497c":"text_spacy = [re.split('\\s+', tweet) for tweet in data['text_spacy']]\n\nbigram_phrases = Phrases(text_spacy, min_count=30)\nbigram = Phraser(bigram_phrases)\nbigram_text_spacy = bigram[text_spacy]\n\ntrigram_phrases = Phrases(bigram_text_spacy, min_count=30)\ntrigram = Phraser(trigram_phrases)\ntrigram_text_spacy = trigram[bigram_text_spacy]\n\ndata['text_trigram_spacy'] = [' '.join(tweet) for tweet in trigram_text_spacy]","dcf028c0":"data.head()","c0c2340e":"from sklearn.model_selection import train_test_split","a4d818ce":"train, valid = train_test_split(data, random_state=24)\n\ntrain = train.reset_index()\nvalid = valid.reset_index()\n\ntrain.shape, valid.shape, data.shape","f96a577e":"disasters = train[train['target'] == 1].reset_index()\nnot_disasters = train[train['target'] == 0].reset_index()\n\ndisasters.nunique(), not_disasters.nunique()","7aa64830":"from collections import defaultdict\nfrom gensim.corpora import Dictionary\nfrom gensim.models import TfidfModel\nfrom gensim.similarities import MatrixSimilarity\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, f1_score","bfcf4d59":"disaster_tweets = disasters['text'].tolist()\nnot_disaster_tweets = not_disasters['text'].tolist()\n\ndisaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in disaster_tweets\n]\nnot_disaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in not_disaster_tweets\n]","a66e972b":"disaster_tweets_word_frequency = defaultdict(int)\nfor tweet in disaster_tweets_split:\n    for word in tweet:\n        disaster_tweets_word_frequency[word] += 1\n        \nnot_disaster_tweets_word_frequency = defaultdict(int)\nfor tweet in not_disaster_tweets_split:\n    for word in tweet:\n        not_disaster_tweets_word_frequency[word] += 1\n\ndisaster_tweets_split = [\n    [word for word in tweet if disaster_tweets_word_frequency[word] > 1]\n    for tweet in disaster_tweets_split\n]\n\nnot_disaster_tweets_split = [\n    [word for word in tweet if not_disaster_tweets_word_frequency[word] > 1]\n    for tweet in not_disaster_tweets_split\n]","e29703cb":"disaster_tweets_dct = Dictionary(disaster_tweets_split)\nnot_disaster_tweets_dct = Dictionary(not_disaster_tweets_split)\n\ndisaster_tweets_corpus = [disaster_tweets_dct.doc2bow(tweet) for tweet in disaster_tweets_split]\nnot_disaster_tweets_corpus = [not_disaster_tweets_dct.doc2bow(tweet) for tweet in not_disaster_tweets_split]","8a019068":"disaster_tweets_tfidf = TfidfModel(disaster_tweets_corpus)\nnot_disaster_tweets_tfidf = TfidfModel(not_disaster_tweets_corpus)","494d2b9e":"disaster_tweets_tfidf_vectors = disaster_tweets_tfidf[disaster_tweets_corpus]\nnot_disaster_tweets_tfidf_vectors = not_disaster_tweets_tfidf[not_disaster_tweets_corpus]","5d84d1e4":"disaster_tweets_similarity = MatrixSimilarity(disaster_tweets_tfidf_vectors)\nnot_disaster_tweets_similarity = MatrixSimilarity(not_disaster_tweets_tfidf_vectors)","e561c412":"valid_tweets = valid['text'].tolist()\n\nvalid_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in valid_tweets\n]\n\nvalid_tweets_word_frequency = defaultdict(int)\nfor tweet in valid_tweets_split:\n    for word in tweet:\n        valid_tweets_word_frequency[word] += 1\n    \nvalid_tweets_split = [\n    [word for word in tweet if valid_tweets_word_frequency[word] > 1]\n    for tweet in valid_tweets_split\n]","81d2cc62":"valid['prediction'] = np.zeros(len(valid)).astype('int')","e3a07a88":"for row in range(len(valid)):\n    tweet = valid_tweets_split[row]\n    \n    tweet_bow_with_disasters_dct = disaster_tweets_dct.doc2bow(tweet)\n    tweet_bow_with_not_disasters_dct = not_disaster_tweets_dct.doc2bow(tweet)\n    \n    tweet_tfidf_vector_with_disasters_tfidf = disaster_tweets_tfidf[tweet_bow_with_disasters_dct]\n    tweet_tfidf_vector_with_not_disasters_tfidf = not_disaster_tweets_tfidf[tweet_bow_with_not_disasters_dct]\n    \n    disaster_similarity_vector = disaster_tweets_similarity[tweet_tfidf_vector_with_disasters_tfidf]\n    not_disaster_similarity_vector = not_disaster_tweets_similarity[tweet_tfidf_vector_with_not_disasters_tfidf]\n    \n    disaster_tally = np.where(disaster_similarity_vector > 0.1)[0].size # np.where() returns a tuple, so we have to index into [0] to get what we want\n    not_disaster_tally = np.where(not_disaster_similarity_vector > 0.1)[0].size\n    \n    if disaster_tally > not_disaster_tally:\n        valid.loc[row, 'prediction'] = 1","70b4ccd1":"valid.head()","be07eed7":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","9e1321d4":"valid = valid.drop(columns=['prediction'])\nvalid.head()","c0d3ac9e":"disaster_tweets = disasters['text_simple'].tolist()\nnot_disaster_tweets = not_disasters['text_simple'].tolist()\n\ndisaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in disaster_tweets\n]\nnot_disaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in not_disaster_tweets\n]\n\ndisaster_tweets_word_frequency = defaultdict(int)\nfor tweet in disaster_tweets_split:\n    for word in tweet:\n        disaster_tweets_word_frequency[word] += 1\n        \nnot_disaster_tweets_word_frequency = defaultdict(int)\nfor tweet in not_disaster_tweets_split:\n    for word in tweet:\n        not_disaster_tweets_word_frequency[word] += 1\n\ndisaster_tweets_split = [\n    [word for word in tweet if disaster_tweets_word_frequency[word] > 1]\n    for tweet in disaster_tweets_split\n]\n\nnot_disaster_tweets_split = [\n    [word for word in tweet if not_disaster_tweets_word_frequency[word] > 1]\n    for tweet in not_disaster_tweets_split\n]\n\ndisaster_tweets_dct = Dictionary(disaster_tweets_split)\nnot_disaster_tweets_dct = Dictionary(not_disaster_tweets_split)\n\ndisaster_tweets_corpus = [disaster_tweets_dct.doc2bow(tweet) for tweet in disaster_tweets_split]\nnot_disaster_tweets_corpus = [not_disaster_tweets_dct.doc2bow(tweet) for tweet in not_disaster_tweets_split]\n\ndisaster_tweets_tfidf = TfidfModel(disaster_tweets_corpus)\nnot_disaster_tweets_tfidf = TfidfModel(not_disaster_tweets_corpus)\n\ndisaster_tweets_tfidf_vectors = disaster_tweets_tfidf[disaster_tweets_corpus]\nnot_disaster_tweets_tfidf_vectors = not_disaster_tweets_tfidf[not_disaster_tweets_corpus]\n\ndisaster_tweets_similarity = MatrixSimilarity(disaster_tweets_tfidf_vectors)\nnot_disaster_tweets_similarity = MatrixSimilarity(not_disaster_tweets_tfidf_vectors)\n\nvalid_tweets = valid['text_simple'].tolist()\n\nvalid_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in valid_tweets\n]\n\nvalid_tweets_word_frequency = defaultdict(int)\nfor tweet in valid_tweets_split:\n    for word in tweet:\n        valid_tweets_word_frequency[word] += 1\n    \nvalid_tweets_split = [\n    [word for word in tweet if valid_tweets_word_frequency[word] > 1]\n    for tweet in valid_tweets_split\n]\n\nvalid['prediction'] = np.zeros(len(valid)).astype('int')\n\nfor row in range(len(valid)):\n    tweet = valid_tweets_split[row]\n    \n    tweet_bow_with_disasters_dct = disaster_tweets_dct.doc2bow(tweet)\n    tweet_bow_with_not_disasters_dct = not_disaster_tweets_dct.doc2bow(tweet)\n    \n    tweet_tfidf_vector_with_disasters_tfidf = disaster_tweets_tfidf[tweet_bow_with_disasters_dct]\n    tweet_tfidf_vector_with_not_disasters_tfidf = not_disaster_tweets_tfidf[tweet_bow_with_not_disasters_dct]\n    \n    disaster_similarity_vector = disaster_tweets_similarity[tweet_tfidf_vector_with_disasters_tfidf]\n    not_disaster_similarity_vector = not_disaster_tweets_similarity[tweet_tfidf_vector_with_not_disasters_tfidf]\n    \n    disaster_tally = np.where(disaster_similarity_vector > 0.1)[0].size # np.where() returns a tuple, so we have to index into [0] to get what we want\n    not_disaster_tally = np.where(not_disaster_similarity_vector > 0.1)[0].size\n    \n    if disaster_tally > not_disaster_tally:\n        valid.loc[row, 'prediction'] = 1","0b22150d":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","2e20f674":"valid = valid.drop(columns=['prediction'])","6d388920":"disaster_tweets = disasters['text_spacy'].tolist()\nnot_disaster_tweets = not_disasters['text_spacy'].tolist()\n\ndisaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in disaster_tweets\n]\nnot_disaster_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in not_disaster_tweets\n]\n\ndisaster_tweets_word_frequency = defaultdict(int)\nfor tweet in disaster_tweets_split:\n    for word in tweet:\n        disaster_tweets_word_frequency[word] += 1\n        \nnot_disaster_tweets_word_frequency = defaultdict(int)\nfor tweet in not_disaster_tweets_split:\n    for word in tweet:\n        not_disaster_tweets_word_frequency[word] += 1\n\ndisaster_tweets_split = [\n    [word for word in tweet if disaster_tweets_word_frequency[word] > 1]\n    for tweet in disaster_tweets_split\n]\n\nnot_disaster_tweets_split = [\n    [word for word in tweet if not_disaster_tweets_word_frequency[word] > 1]\n    for tweet in not_disaster_tweets_split\n]\n\ndisaster_tweets_dct = Dictionary(disaster_tweets_split)\nnot_disaster_tweets_dct = Dictionary(not_disaster_tweets_split)\n\ndisaster_tweets_corpus = [disaster_tweets_dct.doc2bow(tweet) for tweet in disaster_tweets_split]\nnot_disaster_tweets_corpus = [not_disaster_tweets_dct.doc2bow(tweet) for tweet in not_disaster_tweets_split]\n\ndisaster_tweets_tfidf = TfidfModel(disaster_tweets_corpus)\nnot_disaster_tweets_tfidf = TfidfModel(not_disaster_tweets_corpus)\n\ndisaster_tweets_tfidf_vectors = disaster_tweets_tfidf[disaster_tweets_corpus]\nnot_disaster_tweets_tfidf_vectors = not_disaster_tweets_tfidf[not_disaster_tweets_corpus]\n\ndisaster_tweets_similarity = MatrixSimilarity(disaster_tweets_tfidf_vectors)\nnot_disaster_tweets_similarity = MatrixSimilarity(not_disaster_tweets_tfidf_vectors)\n\nvalid_tweets = valid['text_spacy'].tolist()\n\nvalid_tweets_split = [\n    [word for word in tweet.split()]\n    for tweet in valid_tweets\n]\n\nvalid_tweets_word_frequency = defaultdict(int)\nfor tweet in valid_tweets_split:\n    for word in tweet:\n        valid_tweets_word_frequency[word] += 1\n    \nvalid_tweets_split = [\n    [word for word in tweet if valid_tweets_word_frequency[word] > 1]\n    for tweet in valid_tweets_split\n]\n\nvalid['prediction'] = np.zeros(len(valid)).astype('int')\n\nfor row in range(len(valid)):\n    tweet = valid_tweets_split[row]\n    \n    tweet_bow_with_disasters_dct = disaster_tweets_dct.doc2bow(tweet)\n    tweet_bow_with_not_disasters_dct = not_disaster_tweets_dct.doc2bow(tweet)\n    \n    tweet_tfidf_vector_with_disasters_tfidf = disaster_tweets_tfidf[tweet_bow_with_disasters_dct]\n    tweet_tfidf_vector_with_not_disasters_tfidf = not_disaster_tweets_tfidf[tweet_bow_with_not_disasters_dct]\n    \n    disaster_similarity_vector = disaster_tweets_similarity[tweet_tfidf_vector_with_disasters_tfidf]\n    not_disaster_similarity_vector = not_disaster_tweets_similarity[tweet_tfidf_vector_with_not_disasters_tfidf]\n    \n    disaster_tally = np.where(disaster_similarity_vector > 0.1)[0].size # np.where() returns a tuple, so we have to index into [0] to get what we want\n    not_disaster_tally = np.where(not_disaster_similarity_vector > 0.1)[0].size\n    \n    if disaster_tally > not_disaster_tally:\n        valid.loc[row, 'prediction'] = 1","a1f87a62":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","a15f2672":"from gensim.models import Word2Vec\nfrom gensim.models.phrases import Phrases, Phraser\nimport time","bfda6838":"def replace_unknowns(search_texts, min_count):\n    \"\"\"\n    Replaces words that occur less than a certain number of times\n    in a string or list of strings with 'UNK'.\n    \n    Parameters\n    ----------\n    search_texts : list\n        A list of input strings to iterate over.\n    min_count : int\n        An integer specify the minimum count a word should occur in\n        the search_texts to not be replaced with 'UNK'.\n    \n    Returns\n    -------\n    list\n        List of search_texts with words that occur less than the min_count\n        amount of times replaced with 'UNK'.\n    \n    \"\"\"\n    \n    # Get all tweets lowered and tokenized.\n    # This makes sense because we'd never want to\n    # treat an 'a' different from an 'A'.\n    # (Capitalization is just an orthographical convention)\n    texts = [\n        [word for word in re.split('\\s+', text.lower())]\n        for text in search_texts\n    ]\n\n    # create a dictionary that stores the count of each\n    # word in our uncleaned tweets. We can insert new words\n    # into the dict or add to their count if their already in it.\n    vocab_counts = defaultdict(int)\n\n    # Create a list that we can append words that occur more than\n    # the desired threshold number of times to.\n    vocab = []\n\n    for text in texts:\n        for word in text:\n            vocab_counts[word] += 1\n\n    # Now go through the vocab_counts and get rid of\n    # words that occur less than five times.\n    for word in vocab_counts.keys():\n        if vocab_counts[word] > min_count:\n            vocab.append(word)\n\n    # Now initialize a new column in data that will hold\n    # the tweets with 'UNK' replacing words that occur\n    # across the entire vocabulary less than five times.\n    # This creates congruency later on in the model.\n    # data['text_count_5'] = np.empty(len(data), dtype=str) # ***** DO THIS OUTSIDE FUNC IN WORD2VEC SECTION\n\n    # Now, go through each tweet and replace the words that\n    # occur less than 5 times throughout the entire corpus\n    # with 'UNK'. Then, we insert the new tweet into a new\n    # column in the original dataframe.\n\n    out = []\n    # this process takes about a minute\n    for i, text in enumerate(texts):\n        text_replaced = []\n        for word in text:\n            if word in vocab:\n                text_replaced.append(word)\n            else:\n                text_replaced.append('UNK')\n        text_replaced = ' '.join(text_replaced)\n        out.append(text_replaced)\n        \n    return out","1f0fbf9c":"data['text_count_5'] = replace_unknowns(data['text_trigram'], 5)\ndata['text_simple_5'] = replace_unknowns(data['text_trigram_simple'], 5)\ndata['text_spacy_5'] = replace_unknowns(data['text_trigram_spacy'], 5)\ndata.head()","6a458097":"valid['text_count_5'] = replace_unknowns(valid['text_trigram'], 5)\nvalid['text_simple_5'] = replace_unknowns(valid['text_trigram_simple'], 5)\nvalid['text_spacy_5'] = replace_unknowns(valid['text_trigram_spacy'], 5)\n\ndisasters['text_count_5'] = replace_unknowns(disasters['text_trigram'], 5)\ndisasters['text_simple_5'] = replace_unknowns(disasters['text_trigram_simple'], 5)\ndisasters['text_spacy_5'] = replace_unknowns(disasters['text_trigram_spacy'], 5)\n\nnot_disasters['text_count_5'] = replace_unknowns(not_disasters['text_trigram'], 5)\nnot_disasters['text_simple_5'] = replace_unknowns(not_disasters['text_trigram_simple'], 5)\nnot_disasters['text_spacy_5'] = replace_unknowns(not_disasters['text_trigram_spacy'], 5)","13691e80":"valid = valid.drop(columns=['prediction'])","44c0561b":"model = Word2Vec(min_count=5, sample=1e-3, workers=4, seed=24)","01816727":"tweets = [\n    [wd for wd in tweet.split(' ')]\n    for tweet in data['text_count_5']\n]\n\nmodel.build_vocab(tweets)","eb7ac7b4":"model.train(tweets, total_examples=model.corpus_count, epochs=30)","52f54f13":"model.wv.init_sims(replace=True)","9f3a31a0":"valid['prediction'] = np.zeros(len(valid)).astype('int')","1e25b610":"start_time = time.time()\n\nfor valid_row in range(len(valid)):\n    valid_tweet = valid.loc[valid_row, 'text_count_5']\n    tokenized_valid_tweet = re.split('\\s+', valid_tweet) # split on all whitespace characters\n    \n    disaster_count = 0\n    not_disaster_count = 0\n    \n    # we can just reuse \"disasters\" and\n    # \"not_disasters\" from earlier!\n    for disaster_row in range(len(disasters)):\n        disaster_tweet = disasters.loc[disaster_row, 'text_count_5']\n        tokenized_disaster_tweet = re.split('\\s+', disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_disaster_tweet) > 0.7:\n            disaster_count += 1\n        \n    for not_disaster_row in range(len(not_disasters)):\n        not_disaster_tweet = not_disasters.loc[not_disaster_row, 'text_count_5']\n        tokenized_not_disaster_tweet = re.split('\\s+', not_disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_not_disaster_tweet) > 0.7:\n            not_disaster_count += 1\n            \n    if disaster_count > not_disaster_count:\n        valid.loc[valid_row, 'prediction'] = 1\n        \nend_time = time.time()\nprint(f'Runtime: {(end_time - start_time) \/ 60.0} mins')","9944af65":"valid.head()","4b8b2b20":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","c73ed53a":"valid = valid.drop(columns=['prediction'])","90508dac":"start_time = time.time()\n\nmodel = Word2Vec(min_count=5, sample=1e-3, workers=4, seed=24)\n\ntweets = [\n    [wd for wd in tweet.split(' ')]\n    for tweet in data['text_simple_5']\n]\n\nmodel.build_vocab(tweets)\n\nmodel.train(tweets, total_examples=model.corpus_count, epochs=30)\n\nmodel.wv.init_sims(replace=True)\n\nvalid['prediction'] = np.zeros(len(valid)).astype('int')\n\nfor valid_row in range(len(valid)):\n    valid_tweet = valid.loc[valid_row, 'text_simple_5']\n    tokenized_valid_tweet = re.split('\\s+', valid_tweet) # split on all whitespace characters\n    \n    disaster_count = 0\n    not_disaster_count = 0\n    \n    # we can just reuse \"disasters\" and\n    # \"not_disasters\" from earlier!\n    for disaster_row in range(len(disasters)):\n        disaster_tweet = disasters.loc[disaster_row, 'text_simple_5']\n        tokenized_disaster_tweet = re.split('\\s+', disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_disaster_tweet) > 0.7:\n            disaster_count += 1\n        \n    for not_disaster_row in range(len(not_disasters)):\n        not_disaster_tweet = not_disasters.loc[not_disaster_row, 'text_simple_5']\n        tokenized_not_disaster_tweet = re.split('\\s+', not_disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_not_disaster_tweet) > 0.7:\n            not_disaster_count += 1\n            \n    if disaster_count > not_disaster_count:\n        valid.loc[valid_row, 'prediction'] = 1\n        \nend_time = time.time()\nprint(f'Runtime: {(end_time - start_time) \/ 60.0} mins')","ab71501f":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","482dfc85":"valid = valid.drop(columns=['prediction'])","021a4dc7":"start_time = time.time()\n\nmodel = Word2Vec(min_count=5, sample=1e-3, workers=4, seed=24)\n\ntweets = [\n    [wd for wd in tweet.split(' ')]\n    for tweet in data['text_spacy_5']\n]\n\nmodel.build_vocab(tweets)\n\nmodel.train(tweets, total_examples=model.corpus_count, epochs=30)\n\nmodel.wv.init_sims(replace=True)\n\nvalid['prediction'] = np.zeros(len(valid)).astype('int')\n\nfor valid_row in range(len(valid)):\n    valid_tweet = valid.loc[valid_row, 'text_spacy_5']\n    tokenized_valid_tweet = re.split('\\s+', valid_tweet) # split on all whitespace characters\n    \n    disaster_count = 0\n    not_disaster_count = 0\n    \n    # we can just reuse \"disasters\" and\n    # \"not_disasters\" from earlier!\n    for disaster_row in range(len(disasters)):\n        disaster_tweet = disasters.loc[disaster_row, 'text_spacy_5']\n        tokenized_disaster_tweet = re.split('\\s+', disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_disaster_tweet) > 0.7:\n            disaster_count += 1\n        \n    for not_disaster_row in range(len(not_disasters)):\n        not_disaster_tweet = not_disasters.loc[not_disaster_row, 'text_spacy_5']\n        tokenized_not_disaster_tweet = re.split('\\s+', not_disaster_tweet)\n        if model.wv.n_similarity(tokenized_valid_tweet, tokenized_not_disaster_tweet) > 0.7:\n            not_disaster_count += 1\n            \n    if disaster_count > not_disaster_count:\n        valid.loc[valid_row, 'prediction'] = 1\n        \nend_time = time.time()\nprint(f'Runtime: {(end_time - start_time) \/ 60.0} mins')","f937c4d9":"accuracy = accuracy_score(valid['target'], valid['prediction'])\nF1 = f1_score(valid['target'], valid['prediction'])\naccuracy, F1","23bd1d67":"from fastai.text.all import *","cded8b05":"dls_lm = DataBlock(\n    blocks=(TextBlock.from_df('text', is_lm=True)),\n    get_items=ColReader('text'),\n    splitter=RandomSplitter(0.1)\n).dataloaders(data, bs=128, seq_len=80)","1c206aad":"dls_lm.show_batch(max_n=2)","5038b4f3":"learn = language_model_learner(\n    dls_lm, AWD_LSTM, drop_mult=0.3,\n    metrics=[accuracy, Perplexity()])","e2f8b993":"learn.fit_one_cycle(1, 2e-2)","938784c9":"learn.fit_one_cycle(10,2e-3)","e8da2f87":"dls_clas = DataBlock(\n    blocks=(TextBlock.from_df('text', vocab=dls_lm.vocab, seq_len=80), CategoryBlock),\n    get_x=ColReader('text'),\n    get_y=ColReader('target'),\n    splitter=RandomSplitter()\n).dataloaders(data, bs=128, seq_len=80)","1aaa4436":"dls_clas.show_batch(max_n=3)","cfd422b8":"learn = text_classifier_learner(\n    dls_clas, AWD_LSTM, drop_mult=0.5,\n    metrics=[accuracy, F1Score()])","2e96f8a4":"learn.fit_one_cycle(1, 2e-2)","761cbaf1":"learn.freeze_to(-2)\nlearn.fit_one_cycle(1, slice(1e-2\/(2.6**4),1e-2))","bd0ee176":"learn.freeze_to(-3)\nlearn.fit_one_cycle(1, slice(5e-3\/(2.6**4),5e-3))","08b06d24":"learn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-3\/(2.6**4),1e-3))","623b5ce0":"test_data = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\npreds = [learn.predict(tweet) for tweet in test_data['text']]\npredictions = [pred for (pred, _, _) in preds]\ntest_data['target'] = predictions\nsubmission = test_data[['id, target']]\nsubmission.to_csv('..\/output\/kaggle\/working\/submission_notebook.csv')","e6645333":"dls_lm = DataBlock(\n    blocks=(TextBlock.from_df('text_simple', is_lm=True)),\n    get_items=ColReader('text_simple'),\n    splitter=RandomSplitter(0.1)\n).dataloaders(data, bs=128, seq_len=80)\n\nlearn = language_model_learner(dls_lm, AWD_LSTM, drop_mult=0.3, metrics=[accuracy, Perplexity()])\nlearn.fit_one_cycle(1, 2e-2)\nlearn.fit_one_cycle(10,2e-3)\n\ndls_clas = DataBlock(\n    blocks=(TextBlock.from_df('text_simple', vocab=dls_lm.vocab, seq_len=80), CategoryBlock),\n    get_x=ColReader('text'),\n    get_y=ColReader('target'),\n    splitter=RandomSplitter()\n).dataloaders(data, bs=128, seq_len=80)","a774feca":"learn = text_classifier_learner(dls_clas, AWD_LSTM, drop_mult=0.5, metrics=[accuracy, F1Score()])\nlearn.fit_one_cycle(1, 2e-2)","ddf45258":"learn.freeze_to(-2)\nlearn.fit_one_cycle(1, slice(1e-2\/(2.6**4),1e-2))","8d063f46":"learn.freeze_to(-3)\nlearn.fit_one_cycle(1, slice(5e-3\/(2.6**4),5e-3))","20f8f10d":"learn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-3\/(2.6**4),1e-3))","bcd39848":"dls_lm = DataBlock(\n    blocks=(TextBlock.from_df('text_spacy', is_lm=True)),\n    get_items=ColReader('text_spacy'),\n    splitter=RandomSplitter(0.1)\n).dataloaders(data, bs=128, seq_len=80)\n\nlearn = language_model_learner(dls_lm, AWD_LSTM, drop_mult=0.3, metrics=[accuracy, Perplexity()])\nlearn.fit_one_cycle(1, 2e-2)\nlearn.fit_one_cycle(10,2e-3)\n\ndls_clas = DataBlock(\n    blocks=(TextBlock.from_df('text_spacy', vocab=dls_lm.vocab, seq_len=80), CategoryBlock),\n    get_x=ColReader('text'),\n    get_y=ColReader('target'),\n    splitter=RandomSplitter()\n).dataloaders(data, bs=128, seq_len=80)","81e48fd9":"learn = text_classifier_learner(dls_clas, AWD_LSTM, drop_mult=0.5, metrics=[accuracy, F1Score()])\nlearn.fit_one_cycle(1, 2e-2)","668f33f5":"learn.freeze_to(-2)\nlearn.fit_one_cycle(1, slice(1e-2\/(2.6**4),1e-2))","1eec7d25":"learn.freeze_to(-3)\nlearn.fit_one_cycle(1, slice(5e-3\/(2.6**4),5e-3))","8a1a1c22":"learn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-3\/(2.6**4),1e-3))","6834cafe":"Fastai uses PyTorch under the hood, which requires our data to be formatted in [a specific way](https:\/\/pytorch.org\/docs\/stable\/data.html). In order to do this most efficiently, we can use fastai's `DataBlock` object and `.dataloaders()` method. With `DataBlock`, we can:\n1. Directly pull our columns from the dataframe that we'd like to train *and* test on.\n2. Split the data however we'd like.\n3. [And more!](https:\/\/docs.fast.ai\/data.block#DataBlock)\n\nLet's start by creating a `DataBlock` that we'll pass to `language_model_learner` to create a new language model tailored to our data.","3ac7e5be":"## TF-IDF with \"Simple\" Tweets","523da7e1":"### Word2Vec Preprocessing","1a99bd7d":"Now we can train the model over 30 epochs (cycles).","88879961":"Things are looking good! One last preprocessing step is in order, and that is dividing our newly-created `train` data by their target labels, thereby giving us two new DataFrames representing disaster tweets and non-disaster tweets.\n\nWhen we call `.nunique()` on both `disasters` and `not_disasters`, we can see that the unique number of `target`s in each DataFrame is 1, indicating we split the data properly.","d7d377a4":"TF-IDF is an incredible, straightforward way to analyze document similarity. It involves no fancy machine learning, just the term frequency across documents! For this reason, we will begin with trying to use TF-IDF to determine if a tweet is about a disaster or not.\n\nFrom [tfidf.com](http:\/\/www.tfidf.com\/):\n> Tf-idf stands for *term frequency-inverse document frequency*, and the tf-idf weight is a weight often used in information retrieval and text mining. This weight is a statistical measure used to evaluate how important a word is to a document in a collection or corpus. The importance increases proportionally to the number of times a word appears in the document but is offset by the frequency of the word in the corpus.\n\nYou can learn more about the mathematical foundations of TF-IDF [here](https:\/\/rare-technologies.com\/pivoted-document-length-normalisation\/).\n\nWe'll start by analyzing the unprocessed tweets.","c23c1204":"In order to repeat the same process for transfer learning on the preprocessed tweets, we'll need to create a whole new language model for each set. This is done almost exactly in the same way as above. The two differences are:\n1. The column that your selecting from will change from `text` to `text_simple` or `text_spacy`.\n2. The `get_x` parameter when creating the `DataBlock` for the `text_classifier_learner`, `dls_clas`, must *remain* `text`, no matter the name of the column in the DataFrame that you are using as the independent variable. [[1]](https:\/\/forums.fast.ai\/t\/issue-with-textblock-from-df-dataloaders-only-accepting-one-column-name\/77467)\n\nKnowing this, let's fit our language model!","4ce2bcc9":"## TF-IDF with Unprocessed Tweets","4b8ae8a0":"## Word2Vec with \"Simple\" Tweets","cbde2017":"The second method for text classification that we'll use is **word vectors**.\n\nWord vectors were first introduced by Mikolov et al.[[1]](https:\/\/arxiv.org\/pdf\/1301.3781.pdf)[[2]](https:\/\/arxiv.org\/pdf\/1310.4546.pdf) and provide highly accurate results in word similarity tasks at relatively low computational cost. You can think of a word vector as a 1-dimensional matrix of numbers of some arbitrary length computed by neural networks. Word similarity is then determined by the [cosine distance](https:\/\/en.wikipedia.org\/wiki\/Cosine_similarity) between two vectors.\n\nWord vectors, interestingly, can encode linguistic regularities and patterns. Therefore, many of these patterns can be represented as linear translations. For example `vector(king) - vector(man) + vector(woman)` is going to very close to `vector(queen)`. This is surprising!\n\nLet's see how word vectors do at predicting disaster tweets.","25bc405e":"Rather than create our own neural network from scratch that competes with something like Word2Vec, we can use transfer learning to quickly adapt our language data by using a model that's already been trained on a lot more data than just what we have.\n\nFrom [Jason Brownlee](https:\/\/machinelearningmastery.com\/transfer-learning-for-deep-learning\/):\n> Transfer learning is a machine learning method where a model developed for a task is reused as the starting point for a model on a second task.\n\nIn order to perform transfer learning, we'll be using [fastai](https:\/\/docs.fast.ai\/). Fastai is great because it really simplifies the training procedure, thereby making it super easy to perform an array of deep learning tasks.\n\nWe'll need two classes from fastai to conduct transfer learning with text: `language_model_learner` and `text_classifier_learner`. The former will allow us to shape the pretrained model with our own data to make a new language model, while the latter will allow us to create a classifier model for the tweets we have (the same task we've been doing above).\n\nLet's start, per usual, with the unprocessed tweets.","6e1ed716":"As mentioned above, I will incorporate different methods of preprocessing to our data to see if such changes have a positive or negative effect on our evaluation metrics. The three differently processed data I'll be using are:\n\n1. Unprocessed - the data as it is given to us.\n2. \"Simply\" cleaned - the data without any hashtags, @-symbols, website links, or punctuation.\n3. SpaCy cleaned - the data lemmatized and without any stop words according to SpaCy's pretrained English language model (which we'll get to in a moment).\n\nThe unprocessed data is already done for us in the `text` column of our DataFrame.\n\nMoving on to the second preprocessing method, \"simply\" cleaned data. By \"simply\" I mean cleaned explicitly by me using [regular expressions](https:\/\/docs.python.org\/3\/library\/re.html) with prior assumptions about the data. For the data we're using here, we have a bunch of tweets. Thererfore, it makes sense to me to remove things like hashtags, @-symbols, and websites, since those don't intuitively seem like they contribute to a tweets disaster level (though this isn't necessarily true, just an assumption!).\n\nTo achieve this \"simple\" cleaning of the data, we can use the following three functions I've created:","f7e7ea0e":"In order to calculate the similarity between two tweets (namely, a tweet in the validation set with a tweet in the training set) without having to do all the math out ourselves, we'll use [gensim](https:\/\/radimrehurek.com\/gensim\/), a free Python library that provides a lot of great NLP functionality.\n\nGensim requires a list of *texts* in a list of *documents*. For us, that's a list of *words in a tweet* in a list of *tweets*. So let's make that now.\n\n> Note: We're using the unprocessed tweets in the `text` column of our data this time around. We'll be using the other two preprocessed tweets in a bit!","8f90bfd8":"With SpaCy lemmatization and removal of stop words, we've actually gotten the worst results of the three datasets, with an accuracy of `64.02%` and an F1 score of `0.49`.\n\nSo it seems of the three preprocessing techniques used in a TF-IDF model, in this case, \"simple\" cleaning worked the best with an accuracy of `66.60` and an F1 score of `0.57`.\n\nLet's now move forward with Word2Vec.","06890129":"## Transfer Learning with \"Simple\" Tweets","e7953e02":"### Cleaning","61d44eed":"# Transfer Learning with fastai","5c128bd0":"Now we can create a new column in our `data` DataFrame that represents the \"simply\" cleaned tweets. I'll call this column `text_simple`.","6ce0f13f":"Now we normalize vectors in the vocaulary for consistency.\n> Important: You wouldn't do this if you were going to train further down the line. See [this notebook](https:\/\/github.com\/RaRe-Technologies\/gensim\/blob\/develop\/docs\/notebooks\/online_w2v_tutorial.ipynb) for more information about expanding your model's vocabulary.","83bf69e8":"Moving now to the last preprocessing method: SpaCy. [SpaCy](https:\/\/spacy.io\/) is a great, open-source software library for NLP. It includes varying, pretrained language models of a number of different sizes for a number of different langauges, allowing you to quickly perform routine NLP tasks. Here, we're going to use SpaCy to [lemmatize](https:\/\/nlp.stanford.edu\/IR-book\/html\/htmledition\/stemming-and-lemmatization-1.html) each tweet in the data and remove any [stop words](https:\/\/en.wikipedia.org\/wiki\/Stop_word).\n\nBelow, we need to first load in SpaCy's (full) English model (note that, for speed, I disable some features that we won't need here). Then, create a function that will give us a string lemmatized by SpaCy.","70f8e89e":"# Data Analysis, Augmentation, and Splitting","97be5618":"Fit TF-IDF models for our two sets of tweets.","b74e7d7d":"Fit our text classifier:","d37147d2":"To find out a bit more information about the data, we can use the `.info()` and `.nunique()` methods on our DataFrame:","6864cf44":"## Transfer Learning with SpaCy Tweets","7f68f1f1":"Apply the models to our corpora to get vectors for each tweet.","4a3f39bf":"First, let's take a look at the training data we're given:","8190a2f9":"The process this time around will, in fact, be exactly the same as last time! The only change we need to make is that we are indexing into the `text_simple` column in the `disaster_tweets` and `not_disaster_tweets` DataFrames.\n\nSince the procedure is the same, let's skip to the metrics! (You can still expand the code below if you need a closer look.)","8e5a205a":"Below, we'll use `min_count=5` as one of our [hyperparameters](https:\/\/en.wikipedia.org\/wiki\/Hyperparameter_(machine_learning)) in our Word2Vec model, so let's replace all of the words in all three of our preprocessed tweet columns (`text_trigram`, `text_trigram_simple`, and `text_trigram_spacy`) in each DataFrame with `'UNK'`.\n\n> Important: We're using the tweets with the n-grams that we built in the Data Augmentation section for our Word2Vec model. If you skipped it, go back now!\n\n> Note: Normally this would happen during the initial preprocessing stage, allowing us to only need to call `replace_unknowns()` on our initial `data` DataFrame. Because we're calling `replace_unknowns()` after we've already split our data into training and validation sets, we need to call the function on all of the DataFrames we've already created.","2276693e":"The accuracy above represents the models ability to predict the next word in a sequence from our disaster tweets data. `44.16%`! That's pretty dang good for something that took about the same time as our Word2Vec models.\n\nBut we're not after text prediction, we're after text classification. Let's turn to that now.\n\nFirst, let's create a `DataBlock` that we'll pass to `text_classifier_learner`. Notice that now we're passing two blocks to the `blocks` parameter: `TextBlock` and `CategoryBlock`. We specify these with the `get_x` and `get_y` parameters. It is also important to note the new `TextBlock` parameter `vocab`. Without this, the language model fitting we did above will mean nothing!","b320ad2b":"# Word2Vec","d37e49e7":"## Word2Vec with SpaCy Tweets","895c5abd":"Same process as before, let's clear the old predictions from `valid` and skip to the metrics!","eb2297bf":"## Transfer Learning with Unprocessed Tweets","d65366b8":"Now that we've gone through each model: TF-IDF, Word2Vec, and transfer learning, it's time to compare the results:\n\nModel | Dataset | Accuracy | F1 Score\n---------- | ----------- | ------------- | -----------\n**TF-IDF** | Unprocessed | 64.08% | 0.530\n'' | \"Simple\" | 66.60% | 0.570\n'' | SpaCy | 64.02% | 0.489\n**Word2Vec** | Unprocessed | 63.39% | 0.278\n'' | \"Simple\" | 67.28% | 0.433\n'' | SpaCy | 64.44% | 0.324\n**Transfer Learning** | **Unprocessed** | **79.30%** | **0.738**\n'' | \"Simple\" | 75.58% | 0.731\n'' | SpaCy | 79.00% | 0.724","fa24580a":"Accuracy: `78.58%`. F1 score: `0.731`.\n\nNearly the same as, but not quite better than the unprocessed tweets. This is the opposite of what happened with TF-IDF and Word2Vec.\n\nLet's see how the SpaCy tweets perform:","66292f86":"All that's left to do is fit our language model!\n\nYou'll note that fastai also provides super clear, customizable output for each training cycle.","c94bb1f2":"An [n-gram](https:\/\/en.wikipedia.org\/wiki\/N-gram#:~:text=In%20the%20fields%20of%20computational,a%20text%20or%20speech%20corpus.) is a contiguous sequence of *n* items from a given sample of text or speech. This turns out to be quite useful in NLP. Consider the phrase \"New York Times\". When all three words are together, the phrase is understood to mean the widely spread news source based in New York of the same moniker. However, if we split the words up (while maintaining original order), we get: \"New York\", \"York Times\", \"New\", \"York\", and \"Times\". These separate words and phrases can occur in many contexts other than those in which the full phrase \"New York Times\" is found, skewing the phrase's true meaning in the data. N-gram models allow us to concatenate these commonly occurring multi-word phrases in our data, allowing their true meaning to shine through.\n\nThankfully, we can use the `Phraser` and `Phrases` classes provided by [gensim](https:\/\/radimrehurek.com\/gensim\/) in order to easily find n-grams in our data.\n\nLet's start by getting trigrams found in the unprocessed data.\n\nFirst, we extract the tweets and split them by whitespace characters.","fb6c642a":"We'll be using gensim's Word2Vec module, which processes text using a `min_count` parameter. This parameter only includes words in the input that occur more than the set `min_count` number of times. This will cause problems later on when trying to classify the tweets in the validation set because some of the words will have occurred less than the `min_count` parameter, throwing an \"out-of-vocabulary\" (OOV) error.\n\nIn order to remedy this, we have two options:\n1. Train the Word2Vec model and then remove the words from the validation tweets that are not in the trained vocabulary.\n2. Preemptively change the words in our corpus that occur less than the expected `min_count` number of times with some sort of \"unknown\" character.\n\nBoth of these methods alter the original tweet that we'll be classifying, but the latter option seems to adhere closer to the original meaning of the tweet. If we drop words, we could make an entirely new sentence with an enitrely new grammatical structure and meaning. Whereas if we replace the words that occur less than `min_count` amount of times with an unknown character, the original grammatical structure of each sentence is held in tact, creating a closer tie to the tweet's original meaning.\n\nTo do this efficiently, I've created a function `replace_unknowns()` that replaces the words in a text which occur less than a specified `min_count` number of times with `'UNK'`. We can use this to alter the preprocessed columns that we made earlier and store them in our original `data` DataFrame.","d0d45d98":"Create variable which we can index into using another vector to compute similarity.","ca61cbfc":"Build the vocab for our model.\n\nThe `.build_vocab()` method expects an iterable of a list of strings as its input, so first we split our tweets to adhere to that. Notice that we're looping through all of the tweets in our original `data` DataFrame rather than the `train` DataFrame we created. This is because we need the vocabulary of *all* tweets (in both the training and validation data) in order to properly compare tweets in the training data to tweets in the validation data. If we just built our model on the training data, many of the words in the validation tweets would throw OOV errors!","a80d386c":"`66.60%` accuracy; we've gotten better! Notice that our F1 score has gone up also, from `0.53` to `0.57`.\n\nFor the last of the TF-IDF similarities, let's see how things go if we use the tweets that were preprocessed with SpaCy:","7e80a620":"And the winner is, unsurprisingly, transfer learning! What is surprising, however, is that of the three datasets that we used for transfer learning, the unprocessed dataset yielded the best results. This provides strong support for transfer learning, as it is able to extract nuances in natural language as opposed to augemented, unnatural language.\n\nIf you're interesed in getting more involved with transfer learning, I strongly recommend Jeremy Howard and Rachel Thomas' course [Deep Learning for Coders](https:\/\/youtu.be\/_QUEXsHfsA0). At the time of writing, this is an excellent resource for getting a really good, modern grasp of deep learning, provided you've got some basic Python programming experience. And it's all free!\n\nWith that, I'll leave the reader to experiment further with text classification and langauge modeling.\n\nQuestions I'm now asking myself:\n* What other preprocessing methods or data augmentations techniques could we have used?\n* What's a transformer?\n* How does BERT work?\n* Where else can we apply text classification to somehow learn something meaningful?","1bf3f334":"`64.08%` accuracy! That's not too shabby for just looking at word frequencies...\n\nBut what happens if we calculate tweet similarities using TF-IDF again, but this time using the preprocessed data that we prepared in the last section?\n\nLet's start by seeing how our scores improve with the \"simply\" cleaned tweets.","5d5da823":"Now it's time to create our text classifier model, again using transfer learning from the `AWD_LSTM` model provided by fastai. This time we want to see the accuracy and F1 score when testing on the validation set.","ae1f1269":"Note that there is only one block in the `DataBlock` we just created: a `TextBlock`. All we need to create a language model is the text (we don't care about the categories yet), so we only need one block in the `DataBlock`. We also need to specify the parameter `is_lm=True` when creating the `TextBlock`, to specify that this is our language model.\n\nNow we can use `.show_batch()` to take a look at our newly formatted data:","91c1f6cc":"Gradually unfreeze the model:","e0ee1d10":"Next, we create a Dictionary object with gensim, which is a mapping between words and their integer ids. With this Dictionary object we can create a \"corpus\" for disaster tweets and non-disaster tweets by converting each document (i.e., tweet) in each set to a Bag of Words format (that is, a list of `(token_id, token_count)` tuples).","3aef6c7e":"First and foremost, let's get rid of the `valid['prediction']` column that we made using TF-IDF.","8b9f6c85":"And that's. It.\n\nCrazy, right?! One last step that we need to take care of to inch our models accuracy up further is [gradual unfreezing](https:\/\/stats.stackexchange.com\/questions\/393168\/what-does-it-mean-to-freeze-or-unfreeze-a-model). Unfreezing a few layers at a time seems to make a meaningful difference in NLP, so we'll do that here (in computer vision, the model will often be unfrozen all at once).","ab74b5ae":"Quite an improvement! Our accuracy and F1 score went up to `67.28%` and `0.43`, respectively.\n\nNow let's see how the SpaCy tweets perform in our Word2Vec model.","1c566971":"# TF-IDF","4ada7e68":"## Word2Vec with Unprocessed Tweets","0b993b62":"Before we go any further, we'll need to get rid of the predictions we just made in `valid`.","edc36b03":"## Data Augmentation","95c95377":"Text Classification is the assignment of a particular label to a text with respect to its content. In modern Natural Language Processing (NLP), there are many different algorithms and techniques used to gain significant accuracy in text classification tasks.\n\nIn this notebook, we will cover three of the most popular methods for text classification: TF-IDF, Word2Vec, and transfer learning. For each of the three methods, we will also show their effectiveness based on the amount of preprocessing that is done to the text beforehand, leaving us with a total of nine measurements at the end.\n\nWe will see that transfer learning is by far the superior method for the task in terms of ease of use and accuracy.\n\nThe data that we will be using comes from [Kaggle's \"Real or Not? NLP with Disaster Tweets\"](https:\/\/www.kaggle.com\/c\/nlp-getting-started) competition, where the user is tasked with predicting which tweets are about real disasters, and which ones are not.\n\nIn the competition, leaderboard position is based on the model's F1 score. Therefore, for clarity, we will provide both the accuracy and F1 score for each output below.\n\nTo begin, let's start with some data analysis and augmentation:","4aa166e2":"Similar to how we predicted whether a tweet was a disaster or not with TF-IDF, we have to compare each tweet in the validation data with each tweet in both the `disasters` DataFrame and the `not_disasters` DataFrame.\n\nSo, this time, for each tweet, we:\n1. Split the validation tweet on all whitespace characters.\n2. Calculate the similarity between the validation tweet and each disaster and non-disaster tweet (also split on whitespace characters).\n3. If the similarity between the two tweets is greater than 0.7, add to that tweet set's tally.\n4. If the disaster tally is gerater than the non-disaster tally, we change the value of the prediction column for the validation tweet to 1 (otherwise, it remains 0, indicating a non-disastrous guess).\n\nThis is exemplified below:\n\n> Note: This model takes a little bit of time to train. It took almost 16 minutes on my machine.","26da1d84":"Then, we find bigrams throughout our data. Here we use a parameter of `min_count=30` for our `Phrases` class. This ensures that only bigrams that occur more than 30 times in the data are found. Many combinations of words occur side by side only a few times, and don't contribute much additional knowledge to our model, so this is important.","7cdc4f69":"Let's do the same thing with our tweets preprocessed with SpaCy.\n\nFirst, the language model:","5f432177":"## TF-IDF with SpaCy Tweets","d2636fed":"# A Comparison of TF-IDF, Word2Vec, and Transfer Learning for Text Classification","0a5be898":"## Light Analysis","0aae976f":"In order to make predictions using the model we just created, we have to compare each tweet in the validation data with each tweet in both the `disasters` DataFrame and the `not_disasters` DataFrame.\n\nTherefore, for each tweet, we:\n1. Turn it into a BoW according to each set of tweets' Dictionary object.\n2. Get a vector for it using each set's TF-IDF model.\n3. Compare it's vector with each set's full set of tweets using the MatrixSimilarity object we created earleir.\n4. Tally up the total number of disaster and non-disaster tweets whose cosine similarity is greater than 0.1.\n5. If the disaster tally is greater than the non-disaster tally, we change the value of the prediction column for this tweet in the `valid` DataFrame to 1 (otherwise, it stays 0, indicating a non-disastrous guess).\n\nThis is exemplefied below:","d9c504d4":"Now we can compare each tweet in the validation set to each set of tweets (disaster and non-disaster) in the training set. Whichever set contains a greater number of \"similar enough\" tweets (to be determined by a threshold) determines how the validation tweet will be labeled.\n\nFirst, configure the validation tweets in the same way that we did for the training tweets:","d5c26743":"SpaCy, this time, comes in the middle of our three tests with an accuracy of `64.44%` and F1 score of `0.32`.\n\nAmong the three datasets trained with a Word2Vec model, the \"simple\" tweets seem to have it again with an accuracy of `67.28%` and an F1 score of `0.43`.\n\nLastly, let's turn to transfer learning.","01b682ca":"Interesting! It looks like some of the tweets (110 of them, to be precise) are the same.","6653bdef":"Then, fit the text classifier:","ac059d87":"Now let's take another look at the `valid` DataFrame to see if we've got some predictions...","8d9150be":"We can now instantiate our `language_model_learner` using the `DataBlock` we just created and `AWD_LSTM`, which is a pretrained model provided by fastai. You can learn more about `AWD_LSTM` [here](https:\/\/arxiv.org\/pdf\/1708.02182.pdf).","7e2b313c":"Look at that! Seems we've made some predictions! But how well did we do?\n\nLet's take a look at both the accuracy and F1 score:","10d483a4":"In order to properly test our data, we'll need to split it into training and validation sets. To do this, we simply pass our `data` DataFrame to sklearn's `train_test_split`. We reset the index of each newly-created DataFrame to avoid complications with indexing later on. Then, check the shapes to make everything adds up.","d992dd57":"If all went well, we should be able to see our predictions in the `valid` DataFrame...","76d8e282":"Initialize our Word2Vec model.\n> Note: I'm splitting up the training of the model into three steps. See [this notebook](https:\/\/www.kaggle.com\/pierremegret\/gensim-word2vec-tutorial\/comments) for more details on why (and Word2Vec in general).","f6df66ad":"Now we can make our predictions.\n\nJust as when we were doing TF-IDF, we need to initialize a `prediction` column in the `valid` DataFrame to store our predictions.","e2a85441":"After fully unfreezing and fitting our model, our accuracy is... `79.30%`! Over 11% better than our best Word2Vec! Impressive. Our F1 score of `0.738` also blows away our best Word2Vec F1 score of `0.433`. Impressive, indeed.\n\nBut how will transfer learning perform will the preprocessed tweets? Let's find out!","1e3077d8":"Et voil\u00e0!\n\nAccuracy: `79.00%`. F1 score: `0.724`.\n\nSo between the three datasets used in transfer learning, the unprocessed dataset seemed to perform the best! Unexpected, indeed.","2f91153c":"Now we can fit:","8c11f013":"That's it! Now we can pop this list back into our `data` DataFrame to be used later.","226361fb":"## Splitting","f8a22eea":"Next, we can use the bigrams we just made to search for trigrams in the exact same way.\n\n> Note: This is repeatable! Keep going to find n-grams of size 5 if you wanted!","604ffa35":"Fantastic! We've found all of the trigrams and bigrams in each of our three datasets that occur more than 30 times. This data will prove to be very useful when we reach Word2Vec.","93559c6e":"Now gradually unfreeze:","77229c21":"### n-grams","8f8772c2":"# Conclusion","5b5f774b":"Great work! Now let's do the same for the `text_simple` and `text_spacy` columns.","3c485761":"`63.39%` accuracy! That's about the same as the TF-IDF model. The F1 score on the other hand... yikes! `0.28`. Horrible!\n\n> Note: There's a bit of randomness involved when making predictions with Word2Vec and transfer learning (coming up). For this reason, if you run this notebook, your metrics may be a little different than what is shown here.\n\nCan we improve that with either of the preprocessed tweets?","2b76cbc6":"Awesome! We're all set and we can begin to train our models.\n\nLet's start with TF-IDF.","fd055e40":"Now that we've got the three separately preprocessed sets of tweets in neat columns in our dataset, it's time to split our data into training and validation data and begin our testing!","17f90bac":"Great, now our data is set up and ready to be used with a Word2Vec model!","06f36bd5":"Once again, we clear out the predictions we've just made from `valid`.","dc66dae6":"> Important: I'll only be applying what we learn in the n-gram section to the Word2Vec model. If you'd like to skip this section, and come back when you get to Word2Vec, feel free to do so.","a1b5fe82":"Thinking about a TF-IDF model, words that only occur once throughout the entire corpus will not provide any noteworthy advantage to the model. Therefore, in the next step, we remove words that only occur once from `disaster_tweets_split` and `not_disaster_tweets` split.","a8c0eedb":"Same process as before, let's clear the old predictions from `valid` and skip to the metrics!","1afa655b":"Just like with TF-IDF (seeing a trend here?), the process this time around will be exactly the same as before. The only change we need to make is that we are indexing into the `text_simple_5` column in the `disaster_tweets` and `not_disaster_tweets` DataFrames.\n\nSince the procedures are the same, let's skip to the metrics! (You can still expand the code below if you need a closer look.)","6b5e424f":"We now have all the information we need to make our predictions! We can store our predictions in the `valid` DataFrame. This will make for easier access when comparing target to prediction.\n\nTo do that, we need to initialize a new column in the DataFrame, let's call it `prediction`:","d0593a2e":"Check to see that our data is how we want it.","e13805a9":"Seems to have worked!\n\nNow let's find out the accuracy and F1 score of our Word2Vec model using the unprocessed tweet data.","4993b395":"Using our new function, we can again create a new column in our `data` DataFrame with the SpaCy-cleaned tweets. I'll call this column `text_spacy`."}}