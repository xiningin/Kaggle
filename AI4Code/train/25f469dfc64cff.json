{"cell_type":{"c6f95f97":"code","4b1bfc50":"code","0e7f8823":"code","800b67e9":"code","3adfe4f8":"code","75f5628d":"code","cfc27dd1":"code","b40c3be0":"code","3f2c5743":"code","6961ef60":"code","d938f177":"code","93d77658":"code","e83232a1":"code","388688fa":"code","7a0b203f":"code","ba5c730c":"code","ddc182d8":"code","53eb4c2d":"code","874dff42":"code","0c765830":"markdown","5f5d808c":"markdown","e2c02668":"markdown","86c92179":"markdown","5bff1975":"markdown","63e926dc":"markdown","296b3543":"markdown","c50ca2b9":"markdown","b3690577":"markdown"},"source":{"c6f95f97":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly.offline import iplot\ncf.go_offline('True')\n\n\n%matplotlib inline","4b1bfc50":"dataset = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\n\ndataset.info()","0e7f8823":"pd.set_option('display.max_columns',31)\ndataset.head(10)","800b67e9":"dataset.describe()","3adfe4f8":"X = dataset.drop('Class', axis=1)\ny = dataset['Class']","75f5628d":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nscaler = StandardScaler()\npca = PCA()\n\nX_scaled = scaler.fit_transform(X)\n\npca.fit(X_scaled)\n","cfc27dd1":"display(pca.explained_variance_ratio_.cumsum())\n\nn_features = range(pca.n_components_)\nplt.bar(n_features, pca.explained_variance_)\n#plt.xticks(features)","b40c3be0":"var = pca.explained_variance_ratio_\nplt.plot(var)","3f2c5743":"#correlation heatmap of dataset\ndef correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(32, 24))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)\n\ncorrelation_heatmap(dataset)","6961ef60":"sns.countplot(data=dataset, x='Class')","d938f177":"from imblearn.over_sampling import SMOTE\n\nX_bal, y_bal = SMOTE().fit_sample(X_scaled, y)","93d77658":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_bal, y_bal, test_size=0.3, random_state=123, stratify=y_bal)","e83232a1":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\n\nlr.fit(X_train, y_train)\n\ny_pred = lr.predict(X_test)","388688fa":"from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score\n\nprint(\"ROC AUC score\")\nprint(roc_auc_score(y_test, y_pred))\n\nprint(\"\\nTraining Accuracy\")\nprint(lr.score(X_train, y_train))\n\nprint(\"\\nTesting Accuracy\")\nprint(lr.score(X_test, y_test))\n\nprint(confusion_matrix(y_test, y_pred))\n\nprint(classification_report(y_test, y_pred))","7a0b203f":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","ba5c730c":"cnf_matrix = confusion_matrix(y_test, y_pred)\nclass_names = ['GENUINE','FRAUD']\nnp.set_printoptions(precision=2)\n\n\nplt.figure(figsize=(8,6))\nplot_confusion_matrix(cnf_matrix, classes=class_names, normalize=True, \n                      title='Normalized confusion matrix')","ddc182d8":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\n\nrf.fit(X_train, y_train)\n\ny_pred_rf = rf.predict(X_test)","53eb4c2d":"print(\"ROC_AUC score\")\nprint(roc_auc_score(y_test, y_pred_rf))\n\nprint(\"\\nTraining Score\")\nprint(rf.score(X_train, y_train))\n\nprint(\"\\nTesting Score\")\nprint(rf.score(X_test, y_test))\n\nprint(confusion_matrix(y_test, y_pred_rf))\n\nprint(classification_report(y_test, y_pred_rf))","874dff42":"cnf_matrix = confusion_matrix(y_test, y_pred_rf)\nclass_names = ['GENUINE','FRAUD']\nnp.set_printoptions(precision=2)\n\n\nplt.figure(figsize=(8,6))\nplot_confusion_matrix(cnf_matrix, classes=class_names, normalize=True, \n                      title='Normalized confusion matrix')","0c765830":"### Scaling and Dimensionality reduction","5f5d808c":"### Random Forrest","e2c02668":"### Distribution of target data","86c92179":"### Features and Target","5bff1975":"### Log Reg model","63e926dc":"### Evaluate","296b3543":"### Split data","c50ca2b9":"### Over Sampling","b3690577":"### Dataset Information"}}