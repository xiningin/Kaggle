{"cell_type":{"45689bf7":"code","440aa065":"code","62489c18":"code","a537a728":"code","1471ceb0":"code","8a0896f6":"code","926bff58":"code","17234686":"code","125cea89":"code","6c2d7f4f":"code","b7d49a2e":"code","1dce1a9e":"code","b1de2e9c":"code","324c6d60":"code","e30a865f":"code","6404b55b":"code","9c958a12":"code","e8c8e1bc":"code","368d7a4d":"code","c8789eff":"code","f0057077":"code","a9670797":"code","45e57874":"code","1bb551c7":"code","efe33096":"code","7823d1e7":"code","b2fa3755":"code","9ac1f710":"code","902daa1e":"code","3f5cae14":"code","e7720c85":"code","1deaa9e6":"code","bc6b964d":"code","cfeb291d":"code","a073c0c2":"code","a71db77e":"code","c86642d8":"code","e31364a6":"code","07099e7d":"code","4db5193d":"code","2d2d691d":"code","e6fbf48a":"code","e828c799":"code","7fa2b87a":"code","4a4adcae":"code","a1cc2df8":"code","6b2b86bb":"code","ce5ae01c":"code","3a2f945d":"code","77c1f299":"code","70fd9290":"code","33bb0489":"code","e61a1073":"code","79754c69":"code","9cc8c5bd":"code","ac9d9d0e":"code","cf925534":"code","cd5fdb5e":"markdown","a482619f":"markdown","4f837e6a":"markdown"},"source":{"45689bf7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport math\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xml.etree.ElementTree as ET\nimport datetime as dt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\n# # Input data files are available in the read-only \"..\/input\/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","440aa065":"holiday_xml = open('..\/input\/car-crashes-severity-prediction\/holidays.xml', 'r').read()  # Read file\nroot = ET.XML(holiday_xml)  # Parse XML\n\nxml_data = []\nfor i, child in enumerate(root):\n    xml_data.append([subchild.text for subchild in child])\n\ndate = [x[0] for x in xml_data]\nholiday = [x[1] for x in xml_data]\n\nholiday_dic = {'timestamp_holi':date, 'holiday':holiday}\n\nholiday_df = pd.DataFrame(holiday_dic)\nholiday_df.head()","62489c18":"df_weather=pd.read_csv('..\/input\/car-crashes-severity-prediction\/weather-sfcsv.csv')\ndf_weather.head()","a537a728":"df_train = pd.read_csv(\"..\/input\/car-crashes-severity-prediction\/train.csv\", index_col=\"ID\")\ndf_train.head()","1471ceb0":"df_test = pd.read_csv(\"..\/input\/car-crashes-severity-prediction\/test.csv\", index_col=\"ID\")\ndf_test.head()","8a0896f6":"df_weather['Datetime']  =(df_weather['Year'].astype(str) + '-' +\n                                  df_weather['Month'].astype(str) + '-' +\n                                  df_weather['Day'].astype(str))\n            \ndf_weather['Datetime'] = pd.to_datetime(df_weather['Datetime'])\ndf_weather.info()","926bff58":"df_train['timestamp'] = pd.to_datetime(df_train['timestamp'])\ndf_train = df_train.assign(Datetime=df_train.timestamp.dt.round('H'))\n\ndf_test['timestamp'] = pd.to_datetime(df_test['timestamp'])\ndf_test = df_test.assign(Datetime=df_test.timestamp.dt.round('H'))","17234686":"df_weather.drop(['Year','Day', \"Selected\",\"Precipitation(in)\",\"Wind_Chill(F)\"],axis = 1,inplace=True)\ndf_weather.head()","125cea89":"df_weather.isnull().sum()","6c2d7f4f":"df_weather.Weather_Condition.fillna(\"Partly Cloudy\", inplace=True)","b7d49a2e":"df_weather[\"Temperature(F)\"].fillna(61,inplace=True)","1dce1a9e":"df_weather[\"Humidity(%)\"].fillna(83,inplace=True)","b1de2e9c":"df_weather[\"Visibility(mi)\"].fillna(10,inplace=True)","324c6d60":"WeatherConditionTransformer = LabelEncoder().fit(df_weather.loc[:,'Weather_Condition'])\ndf_weather['Weather_Condition'] = WeatherConditionTransformer.transform(df_weather.loc[:,'Weather_Condition'])","e30a865f":"mean_months = df_weather.groupby(['Month']).mean().iloc[:,4]\nmean_months = pd.DataFrame(mean_months)\nmean_months","6404b55b":"std_months = df_weather.groupby(['Month']).std().iloc[:,4]\nstd_months = pd.DataFrame(std_months)\nstd_months","9c958a12":"wind_speed_means = {}\nfor ind, row in mean_months.iterrows():\n    wind_speed_means[ind] = row['Wind_Speed(mph)']\n    \nwind_speed_means","e8c8e1bc":"wind_speed_std = {}\nfor ind, row in std_months.iterrows():\n    wind_speed_std[ind] = row['Wind_Speed(mph)']\n    \nwind_speed_std","368d7a4d":"wind_speed = []\nfor ind, row in df_weather.iterrows():\n    if math. isnan(row['Wind_Speed(mph)']):\n        wind_speed.append(np.random.normal(wind_speed_means[row['Month']], wind_speed_std[row['Month']]))\n    else:\n        wind_speed.append(row['Wind_Speed(mph)'])\n        \nwind_speed_df = pd.DataFrame({'wind_speed':wind_speed})\ndf_weather['Wind_Speed(mph)'] = wind_speed_df\n# df_weather['Wind_Speed(mph)'].fillna(df_weather['Wind_Speed(mph)'].mean(), inplace=True)","c8789eff":"df_weather.isnull().sum()","f0057077":"df_weather.drop_duplicates(subset=[\"Datetime\", \"Hour\"], inplace=True)\ndf_weather.shape","a9670797":"df_train['Datetime'] = pd.to_datetime(df_train['timestamp']).dt.date\ndf_train['Datetime'] = pd.to_datetime(df_train['Datetime'])\n\nholiday_df['Datetime'] = pd.to_datetime(holiday_df['timestamp_holi'])","45e57874":"df_test['Datetime'] = pd.to_datetime(df_test['timestamp']).dt.date\ndf_test['Datetime'] = pd.to_datetime(df_test['Datetime'])","1bb551c7":"df_test.head()","efe33096":"df_test['Hour'] = pd.to_datetime(df_test['timestamp']).dt.hour\ndf_test['Year'] = pd.to_datetime(df_test['timestamp']).dt.year\ndf_test.head()\n","7823d1e7":"df_test.shape","b2fa3755":"df_train['Hour'] = pd.to_datetime(df_train['timestamp']).dt.hour\ndf_train['Year'] = pd.to_datetime(df_train['timestamp']).dt.year\ndf_train.head()","9ac1f710":"# df_test.isnull().sum()","902daa1e":"df_train = df_train.merge(df_weather, how='left', left_on=['Datetime',\"Hour\"], right_on=['Datetime', \"Hour\"])\ndf_test = df_test.merge(df_weather, how='left', left_on=['Datetime',\"Hour\"], right_on=['Datetime', \"Hour\"])\ndf_test.head()","3f5cae14":"df_train.shape","e7720c85":"df_train.drop([\"timestamp\"], axis=1, inplace=True)\ndf_test.drop([\"timestamp\"], axis=1, inplace=True)\ndf_train.head()","1deaa9e6":"holiday_df.drop(\"timestamp_holi\", axis=1, inplace=True)\nholiday_df.head()","bc6b964d":"# df_train = df_train.merge(holiday_df, on='timestamp_holi', how='left')\ndf_train = df_train.merge(holiday_df, how='left', left_on='Datetime', right_on=\"Datetime\")\ndf_train.holiday = df_train.holiday.notnull().astype('int')\ndf_train.head()","cfeb291d":"df_train.shape","a073c0c2":"df_train.isnull().sum()","a71db77e":"df_test = df_test.merge(holiday_df, how='left', left_on='Datetime', right_on=\"Datetime\")\ndf_test.holiday = df_test.holiday.notnull().astype('int')\ndf_test.head()","c86642d8":"df_train.drop([\"Datetime\"], axis=1, inplace=True)\ndf_test.drop([\"Datetime\"], axis=1, inplace=True)","e31364a6":"scaler = StandardScaler()\nprint(scaler.fit(df_train[[\"Distance(mi)\", \"Lat\", \"Lng\"]]))\ndf_train[[\"Distance(mi)\", \"Lat\", \"Lng\"]] = scaler.transform(df_train[[\"Distance(mi)\", \"Lat\", \"Lng\"]])","07099e7d":"scaler = StandardScaler()\nprint(scaler.fit(df_test[[\"Distance(mi)\", \"Lat\", \"Lng\"]]))\ndf_test[[\"Distance(mi)\", \"Lat\", \"Lng\"]] = scaler.transform(df_test[[\"Distance(mi)\", \"Lat\", \"Lng\"]])","4db5193d":"df_train.head()","2d2d691d":"# df_train.drop([\"Wind_Chill(F)\",\"Precipitation(in)\", \"Selected\",\"Datetime\"], axis=1, inplace=True)\ndf_train.head()","e6fbf48a":"# df_test.drop([\"Wind_Chill(F)\",\"Precipitation(in)\", \"Selected\",\"timestamp_holi\",\"Datetime\",\"timestamp\"], axis=1, inplace=True)\ndf_test.head()","e828c799":"# columns = [\"Bump\", \"Crossing\", \"Give_Way\", \"Junction\", \"Amenity\", \"No_Exit\", \"Railway\", \"Roundabout\", \"Stop\", \"Side\", \"Weather_Condition\"]\n# for col in columns:\n#     values = df_train[col].unique()\n#     if len(values) > 1:\n#         df_train[col] = df_train[col].astype('category')\n#         df_test[col] = df_test[col].astype('category')\n#         df_train[col] = df_train[col].cat.codes\n#         df_test[col] = df_test[col].cat.codes\n#     else:\n#         df_train.drop(col, axis=1, inplace=True)\n#         df_test.drop(col, axis=1, inplace=True)","7fa2b87a":"df_train[\"day_night\"] = df_train.Hour\ndf_test[\"day_night\"] = df_test.Hour\n\ndf_train.day_night.replace([*range(12)],0, inplace=True)\ndf_test.day_night.replace([*range(12)],0, inplace=True)\ndf_train.day_night.replace([*range(12,24)],1, inplace=True)\ndf_test.day_night.replace([*range(12,24)],1, inplace=True)","4a4adcae":"rush_hour = [*range(6,11)]+[*range(15,20)]\nfree_hour = set([*range(1,24)]).difference(set([*range(6,11)]+[*range(15,20)]))\ndf_train[\"rush_hour\"] = df_train.Hour\ndf_test[\"rush_hour\"] = df_test.Hour\ndf_train.rush_hour.replace(rush_hour,0, inplace=True)\ndf_test.rush_hour.replace(rush_hour,0, inplace=True)\ndf_train.rush_hour.replace(free_hour,1, inplace=True)\ndf_test.rush_hour.replace(free_hour,1, inplace=True)","a1cc2df8":"df_train.day_night.unique()\n# [*range(6,11)]+[*range(15,20)]\n# set([*range(24)]).difference(set([*range(6,11)]+[*range(15,20)]))","6b2b86bb":"df_train.Hour.unique()","ce5ae01c":"df_train.drop([\"Bump\",\"Roundabout\"], axis=1, inplace=True)\ndf_test.drop([\"Bump\",\"Roundabout\"], axis=1, inplace=True)","3a2f945d":"data = df_train\ncolormap=plt.cm.RdBu\nfigure = plt.figure(figsize=(20,20))\nsns.heatmap(data.corr(),linewidths=0.1,vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True)\nplt.title(\"Correlations\",size=15)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Features\")\nplt.show()","77c1f299":"df_train.info()","70fd9290":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df_train, test_size=0.2, random_state=42)\nX_train, X_val = train_df.drop(\"Severity\", axis=1), val_df.drop(\"Severity\", axis=1)\ny_df, y_val = train_df.Severity, val_df.Severity\n\ncolumns = [\"Lat\",\"Lng\",\"Weather_Condition\", \"Stop\",\"Crossing\", \"Junction\",\"day_night\", \"rush_hour\"]\nX_df = X_train[columns]\nX_val = X_val[columns]\nX_test = df_test[columns]\n\nMMS = MinMaxScaler(feature_range=(0.5, 1))\n\nMMS.fit(X_df)\nMMS.fit(X_test)\nMMS.fit(X_val)\nMMS.transform(X_df)\nMMS.transform(X_val)\nMMS.transform(X_test)","33bb0489":"x= [\"Stop\",\"Crossing\", \"Junction\"]\ndf_train[\"holiday\"].value_counts()","e61a1073":"\nmodels = {\"model\":[], \"acc\":[]}\n\n\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)\nclassifier = classifier.fit(X_df, y_df)\nmodels['model'].append(classifier)\nmodels['acc'].append(classifier.score(X_val, y_val))\nprint(\"The accuracy of the classifier on the validation set is \", models.get('acc',[])[-1])\nprint(\"Train score = \",classifier.score(X_df, y_df))\nprint(len(X_val))","79754c69":"classifier = models[\"model\"][models[\"acc\"].index(max(models[\"acc\"]))]\nY_pred = classifier.predict(X_test)\nmodels[\"acc\"][models[\"acc\"].index(max(models[\"acc\"]))]\nmodels[\"acc\"][models[\"acc\"].index(max(models[\"acc\"]))]","9cc8c5bd":"submission = pd.read_csv(\"..\/input\/car-crashes-severity-prediction\/sample_submission.csv\", index_col=\"ID\")\n\n\nY_test = submission.Severity\n\n\nclassifier.score(df_test[columns], Y_test)","ac9d9d0e":"output_csv = {\"ID\":[*range(6407,6407+len(Y_pred))], \"Severity\":Y_pred}\nY_pre = pd.DataFrame(output_csv)\nY_pre.set_index(\"ID\", drop=True, append=False, inplace=True)\nY_pre.to_csv(\"\/kaggle\/working\/submission.csv\")","cf925534":"Y_pre.hist()","cd5fdb5e":"## EDA","a482619f":"## Merge train with holiday","4f837e6a":"## Merge train with weather"}}