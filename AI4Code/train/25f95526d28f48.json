{"cell_type":{"e16580f7":"code","15c61ec9":"code","1438b9ba":"code","b6ade451":"code","0bb4b13c":"code","b7920b56":"code","cec7a4c5":"code","9229409d":"code","52b216a8":"code","f7d2aa21":"code","8c3c3883":"code","75f135cf":"code","ecff0fc1":"code","b870d74a":"code","e65cddb5":"code","cb527cbf":"code","83ea5eff":"code","0eea5e49":"code","a07030ea":"code","877415d6":"code","9f621be4":"code","2e26f609":"code","0b1dd942":"code","27c55f6b":"code","762c7ac0":"code","c4788d31":"code","a5d50c85":"markdown"},"source":{"e16580f7":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","15c61ec9":"train = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")","1438b9ba":"train.head()","b6ade451":"train.columns.to_list()","0bb4b13c":"train.info()","b7920b56":"train['Survived'].value_counts()","cec7a4c5":"from sklearn.preprocessing import LabelEncoder\ndf=train\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c]=df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntrain=df","9229409d":"df=test\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        df[c]=df[c].fillna('N')\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ntest=df","52b216a8":"target = train['Survived']\ndata = train.drop(['Survived','PassengerId','Name','Ticket'],axis=1)","f7d2aa21":"columns=data.columns.to_list()\nprint(columns)","8c3c3883":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse','binary']),  \n        'max_depth': trial.suggest_int('max_depth', -1, 10),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-2, 1.0),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": trial.suggest_int('bagging_freq', 1, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","75f135cf":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=32)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","ecff0fc1":"study.trials_dataframe()","b870d74a":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","e65cddb5":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","cb527cbf":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","83ea5eff":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective','learning_rate'])","0eea5e49":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","a07030ea":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","877415d6":"Best_trial=study.best_trial.params\nprint(Best_trial)","9f621be4":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")\nprint(sample.shape)","2e26f609":"test[columns]","0b1dd942":"preds = np.zeros((sample.shape[0]))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","27c55f6b":"print(preds.shape)\nprint(preds[0])","762c7ac0":"subm = sample\nsubm['Survived'] = preds.astype(int)\nsubm.to_csv('submission.csv',index=False)\nsubm","c4788d31":"subm['Survived'].value_counts()","a5d50c85":"# LightGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}