{"cell_type":{"1a0e6e64":"code","36bcac84":"code","bf33d4f1":"code","d3366eeb":"code","e4bd1a22":"code","72a42bce":"code","86196daf":"code","647e1075":"code","714c70bb":"code","ce9216ae":"code","d59aafa4":"code","b4c2f26c":"code","e4dfce65":"code","35ba3c56":"code","2ea14469":"code","5ecd9a78":"code","cf409a5e":"code","97c12c66":"code","dbcc15c0":"code","8ce032eb":"code","f88933c0":"code","876fabd6":"code","fa290960":"code","3fde6aab":"markdown","0fabb6c0":"markdown","651cf4f3":"markdown","c51d0316":"markdown","cbd958a5":"markdown"},"source":{"1a0e6e64":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36bcac84":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","bf33d4f1":"print(df_train.columns.values)","d3366eeb":"df_train.head()","e4bd1a22":"#null values are not allowed in ML and should be replaced\n#we will change null values: Age, Cabin, Embarked\nprint(\"train data info\")\nprint(df_train.info())","72a42bce":"#Remove unused columns\ndf_train = train_df.drop(['PassengerId', 'Name', 'Ticket'], axis=1)\ndf_test = test_df.drop(['PassengerId', 'Name', 'Ticket'], axis=1)","86196daf":"#Update the value of the Age column to the average value of the Age\ndf_train['Age'].fillna(df_train['Age'].mean(), inplace=True)\ndf_train['Cabin'].fillna('N' , inplace=True) #NULL to N\ndf_train['Embarked'].fillna('N' , inplace=True) #NULL to N\n\ndf_test['Age'].fillna(df_train['Age'].mean(), inplace=True)\ndf_test['Cabin'].fillna('N' , inplace=True) #NULL to N\ndf_test['Embarked'].fillna('N' , inplace=True) #NULL to N\ndf_test['Fare'].fillna(df_train['Fare'].mean() , inplace=True) #NULL to N\n\n#.sum(): sum of each column, .sum().sum(): sum of all columns\nprint(\"number of all NULL values: \", df_train.isnull().sum().sum())","647e1075":"#now these features left\nprint('Sex :\\n',df_train['Sex'].value_counts())\nprint('\\nCabin :\\n',df_train['Cabin'].value_counts())\nprint('\\nEmbarked :\\n',df_train['Embarked'].value_counts())","714c70bb":"#Extract front char only\ndf_train['Cabin'] = df_train['Cabin'].str[:1]\ndf_test['Cabin'] = df_test['Cabin'].str[:1]\n\nprint(df_train['Cabin'].head(3))\ndf_train['Cabin'].value_counts()","ce9216ae":"#Explore data\ndf_train.groupby(['Sex', 'Survived'])['Survived'].count()","d59aafa4":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.barplot(x='Sex', y = 'Survived', data=df_train)","b4c2f26c":"sns.barplot(x='Pclass', y='Survived', hue='Sex', data=df_train)","e4dfce65":"def get_category(age):\n    cat = ''\n    if age <= -1:\n        cat = 'Unknown'\n    elif age <= 5:\n        cat = 'Baby'\n    elif age <= 12:\n        cat = 'Child'\n    elif age <= 18:\n        cat = 'Teenager'\n    elif age <= 25:\n        cat = 'Student'\n    elif age <= 35:\n        cat = 'Young Adult'\n    elif age <= 60:\n        cat = 'Adult'\n    else:\n        cat = 'Elderly'\n    \n    return cat\n\ndf_train['Age_cat'] = df_train['Age'].apply(lambda x: get_category(x))\nsns.barplot(x='Age_cat', y='Survived', hue='Sex', data=df_train, \n            order=['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Elderly'])\ndf_train = df_train.drop('Age_cat', axis=1)","35ba3c56":"from sklearn.preprocessing import LabelEncoder\n\nfor feature in ['Cabin', 'Sex', 'Embarked']:\n    le = LabelEncoder()\n    le = le.fit(df_train[feature])\n    df_train[feature] = le.transform(df_train[feature])\n\nfor feature in ['Cabin', 'Sex', 'Embarked']:\n    le = LabelEncoder()\n    le = le.fit(df_test[feature])\n    df_test[feature] = le.transform(df_test[feature])","2ea14469":"X_train = df_train.drop('Survived', axis=1)\ny_train = df_train['Survived']\nX_test = df_test\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)","5ecd9a78":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nparams = {\n    'max_depth': [2, 3, 5, 10],\n    'min_samples_split': [2, 3, 5],\n    'min_samples_leaf': [1, 5, 8]\n}","cf409a5e":"#Decision Tree Classifier\ndt_clf = DecisionTreeClassifier()\n\ngrid_dclf = GridSearchCV(dt_clf, param_grid=params, scoring='accuracy', cv=5)\n\ngrid_dclf.fit(X_train , y_train)","97c12c66":"print('GridSearchCV best params:', grid_dclf.best_params_)\nprint('GridSearchCV best score:', grid_dclf.best_score_)","dbcc15c0":"#Predict test data(X_test) with the best model\nbest_dclf = grid_dclf.best_estimator_\ndt_pred = best_dclf.predict(X_test)","8ce032eb":"#from sklearn.ensemble import RandomForestClassifier\n#from sklearn.metrics import accuracy_score\n\n#rf_clf = RandomForestClassifier(random_state=11)\n##go RandomForestClassifier\n#rf_clf.fit(X_train , y_train)\n#rf_pred = rf_clf.predict(X_test)\n#print('RandomForestClassifier accuracy:{0:.4f}'.format(accuracy_score(y_test, rf_pred)))","f88933c0":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission","876fabd6":"submission.loc[:, 'Survived'] = dt_pred #Replace the Survived column with our preds\nsubmission","fa290960":"submission.to_csv('submission.csv', index=False) #for submit need .csv formet\nprint(\"completed!\")","3fde6aab":"# #create model and hyperparameter tuning","0fabb6c0":"# #submission","651cf4f3":"# #prediction","c51d0316":"# #Explore data","cbd958a5":"# #Data engineering"}}