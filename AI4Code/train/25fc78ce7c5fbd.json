{"cell_type":{"9f6bd6f8":"code","6dd76e4b":"code","146f9138":"code","8ff1c7dc":"code","3684a608":"code","c03c2e59":"code","f6d4178e":"code","3c7d274b":"code","dd5b8224":"code","70ad5544":"code","cfac6caa":"code","80ea7f34":"code","25414927":"code","8c5f1ea6":"code","365d0047":"code","ea21c5ff":"code","07a06889":"code","a4b9a8ee":"code","6e52f1a7":"code","8e5adb5d":"code","41f3fdca":"code","6144aea7":"code","3e1afc7e":"code","9f73667d":"code","2c6903e4":"code","8cc77c71":"code","956243d2":"code","2860e10b":"code","6564c277":"code","a3362b3c":"code","d600e184":"code","627e4868":"code","d4fe5e02":"code","67bcc368":"code","ea0a26b7":"code","85c9c865":"code","e27574f5":"code","c7187805":"code","41a14b97":"code","2d6e25d5":"code","a3342eb2":"code","9c3dbd61":"code","e39b8bd2":"code","28fe82b3":"code","ac51ea28":"code","c70f0382":"code","f6ae06fb":"code","74651af4":"markdown","d9229c39":"markdown","a8f24de7":"markdown","9d43dc55":"markdown","40c21b09":"markdown","40994c58":"markdown","5c90769c":"markdown","1efa57e5":"markdown","24260bdd":"markdown"},"source":{"9f6bd6f8":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","6dd76e4b":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","146f9138":"test_df.info()","8ff1c7dc":"print(train_df.columns.values)\ntrain_df.head()","3684a608":"train_df.info()\nprint(\"\\n\"*3)\ntest_df.info()","c03c2e59":"train_df.describe()","f6d4178e":"train_df.describe(include = ['O'])","3c7d274b":"train_df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by = 'Survived', ascending=False)","dd5b8224":"train_df[['Sex','Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by = 'Survived', ascending = False)","70ad5544":"train_df[['SibSp','Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by='Survived', ascending = False)","cfac6caa":"train_df[['Parch','Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by = 'Survived',ascending = False)","80ea7f34":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins = 20)","25414927":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=1, bins=20)\ngrid.add_legend()","8c5f1ea6":"grid = sns.FacetGrid(train_df, row='Embarked', height = 2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","365d0047":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', height=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=1, ci=None)\ngrid.add_legend()","ea21c5ff":"train_df = train_df.drop(['Ticket','Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket','Cabin'], axis=1)","07a06889":"train_df['Title'] = train_df.Name.str.extract('([A-Za-z]+)\\.', expand = False)\ntest_df['Title'] = test_df.Name.str.extract('([A-Za-z]+)\\.', expand = False)","a4b9a8ee":"pd.crosstab(train_df['Title'], train_df['Sex'])","6e52f1a7":"combine = [train_df, test_df]\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady','Countess', 'Capt', 'Col', 'Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Mlle','Ms'],'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index = False).mean()","8e5adb5d":"title_mapping = {'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Master': 4, 'Rare': 5}\n\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain_df.head()","41f3fdca":"train_df = train_df.drop(['Name','PassengerId'], axis = 1)\ntest_df = test_df.drop('Name', axis = 1)\ncombine = [train_df, test_df]","6144aea7":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map({'female' : 1, 'male': 0}).astype(int)","3e1afc7e":"guess_ages = np.zeros((2,3))\nguess_ages","9f73667d":"for dataset in combine:\n    for i in range(0,2):\n        for j in range(0,3):\n            guess_df = dataset[(dataset['Sex'] == i) & (dataset['Pclass'] == j+1)]['Age'].dropna()\n            age_guess = guess_df.median()\n            guess_ages[i,j] = int(age_guess\/0.5 + 0.5)*0.5\n    \n    for i in range(0,2):\n        for j in range(0,3):\n            dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),'Age'] = guess_ages[i,j]\n    \n    \n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain_df.head()","2c6903e4":"freq_port = train_df.Embarked.dropna().mode()[0]\n\nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    dataset['Embarked'] = dataset['Embarked'].map({'S' : 0, 'C': 1, 'Q': 2}).astype(int)","8cc77c71":"max_age = max(train_df.Age.max(),test_df.Age.max())\nmax_fare = max(train_df.Fare.max(), test_df.Fare.max())","956243d2":"for dataset in combine:\n    dataset['Age'] = dataset['Age']\/max_age\n    dataset['Fare'] = dataset['Fare']\/max_fare","2860e10b":"for dataset in combine:\n    dataset.loc[(dataset.Fare.isnull()),'Fare'] = dataset['Fare'].mode()[0]","6564c277":"train_df.info()","a3362b3c":"test_df.info()","d600e184":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","627e4868":"X_train = train_df.drop('Survived', axis = 1)\nY_train = train_df['Survived']\nX_test = test_df.drop('PassengerId',axis=1)","d4fe5e02":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train,Y_train) * 100, 2)\nacc_log","67bcc368":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train)*100,2)\nacc_svc","ea0a26b7":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","85c9c865":"gaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train,Y_train)*100, 2)\nacc_gaussian","e27574f5":"perceptron = Perceptron()\nperceptron.fit(X_train, Y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\nacc_perceptron","c7187805":"linear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","41a14b97":"sgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","2d6e25d5":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","a3342eb2":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","9c3dbd61":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_gaussian, acc_perceptron, \n              acc_sgd, acc_linear_svc, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","e39b8bd2":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission['PassengerId'] = submission['PassengerId'].astype('int32')\nsubmission['Survived'] = submission['Survived'].astype('int32')\nsubmission","28fe82b3":"submission.to_csv('submission1.csv',index = False)","ac51ea28":"models = [logreg, svc, knn, gaussian, perceptron, linear_svc, sgd, decision_tree, random_forest]\nY_ensemble = np.zeros(Y_pred.shape)\nfor model in models:\n    temp = model.predict(X_test)\n    Y_ensemble = Y_ensemble + temp\nY_ensemble = (Y_ensemble > 2.5).astype(int)","c70f0382":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": Y_ensemble\n    })\nsubmission['PassengerId'] = submission['PassengerId'].astype('int32')\nsubmission['Survived'] = submission['Survived'].astype('int32')\nsubmission","f6ae06fb":"submission.to_csv('submission3.csv',index = False)","74651af4":"## Support Vector Machines","d9229c39":"## Logistic Regression","a8f24de7":"## Perceptron","9d43dc55":"## Decision Tree Classifier","40c21b09":"## KNN","40994c58":"## Random Forest Classifier","5c90769c":"## Stochastic Gradient Descent Classifier","1efa57e5":"## Gaussian Naive Bayes","24260bdd":"## Linear SVC"}}