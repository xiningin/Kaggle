{"cell_type":{"b3abda09":"code","5cff7fb4":"code","db02f9ba":"code","f041ccbe":"code","9df01881":"code","8509c675":"code","4b04d882":"code","fa6020f0":"code","44aa93be":"code","9cb08bde":"code","15c51165":"code","4f8bcc62":"code","3f569902":"code","9f6f0051":"code","684e0915":"code","8f3f4857":"code","88e0955c":"code","04ffc48f":"code","ab91f941":"code","0c016956":"code","dda16f03":"code","9f10f9b2":"code","ca1b727f":"code","8898e12c":"code","22b5e8b0":"code","c7afd28b":"code","ff60a21a":"code","b73167c4":"code","1d3532e7":"code","42209dc0":"code","7b3a8796":"code","d7028d97":"code","1788761a":"code","436f979e":"code","71da4f70":"code","aacb4595":"code","31acb69d":"code","8e02761d":"code","381c7ee8":"code","3e0801c2":"code","816da46d":"code","5cbd4351":"code","b1d42b71":"code","26f630cf":"code","d56eb77e":"code","81991854":"code","cb3f8f57":"code","123518ef":"code","53b0cb3b":"code","e53dcc1b":"code","0501f7fe":"code","9a425077":"code","8238c980":"code","60f65c00":"code","57a1bac9":"code","dfe9cff3":"code","2da53b4f":"code","e733c59b":"code","54c41304":"code","a04a841f":"code","e459ad58":"code","ad03bee5":"code","90dc760f":"code","48a53b17":"code","d0b69249":"code","3de66d05":"code","87e4fdd2":"code","4e1cce7b":"code","e5aea7a6":"code","fd292cf0":"code","eaa612ce":"code","6b2de571":"code","24ecaafa":"code","49f2c758":"code","875d3443":"code","6d5123ea":"code","f9be0f45":"code","4ea3f87c":"code","221701e3":"code","7586d853":"code","39baab1a":"code","db3b4250":"markdown","51f614a3":"markdown","994525b8":"markdown","8aa3c643":"markdown","de9b6bbd":"markdown","18037c84":"markdown","03c28639":"markdown","a5e65a90":"markdown","3b2f50fe":"markdown","3efa5a9a":"markdown","4a929060":"markdown","8d8f0277":"markdown","4de57c44":"markdown","b38d986f":"markdown","ab5c35cf":"markdown","32764d0a":"markdown","dc0a3b01":"markdown","107a8eb8":"markdown","0cc0ddcc":"markdown","05343473":"markdown","a318d4c1":"markdown","a3643f7f":"markdown","d4a655c1":"markdown","b6135fcf":"markdown","efdd704f":"markdown","cc4a5c4e":"markdown","4430e8bd":"markdown","a421a482":"markdown","38a8e3f0":"markdown","45489775":"markdown","8d4d4e01":"markdown","2dc5e7ee":"markdown","9aedefb0":"markdown","e4fd6b20":"markdown","499b541f":"markdown","1d595cd9":"markdown","cd682cdf":"markdown","52e3b759":"markdown","f335547f":"markdown","b85cbd1f":"markdown","7fca2a56":"markdown","6016aafd":"markdown","53d797d9":"markdown","5243f8cc":"markdown"},"source":{"b3abda09":"import numpy as np\nimport scipy.stats as stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas_profiling\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LassoCV, LinearRegression, RidgeCV, LogisticRegressionCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFECV\nfrom sklearn.svm import LinearSVC\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\nimport sys\n\nfrom yellowbrick.regressor import ResidualsPlot\nfrom yellowbrick.features import RadViz\n\nsys.setrecursionlimit(10000)\n\nsns.set_style('whitegrid')\n\n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline","5cff7fb4":"# Load the data\nhouse = pd.read_csv('..\/input\/housing.csv', keep_default_na=True)\nhouse.head()","db02f9ba":"EDA_profile_reporter = house.profile_report()","f041ccbe":"EDA_profile_reporter.to_file(output_file='EDA_profile_report.html')","9df01881":"house['LotFrontage'].fillna(value=0, inplace=True)\nhouse['LotFrontage'].unique()","8509c675":"dict(house.isnull().sum())","4b04d882":"house.drop(house[house['MSZoning'] == 'C (all)'].index, inplace=True, axis=0)","fa6020f0":"fixed = house[['MSZoning','LotFrontage', 'LotArea','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','YearBuilt','YearRemodAdd','Foundation','BsmtQual','BsmtExposure','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd','Fireplaces','GarageType','GarageYrBlt','GarageCars','GarageArea','MiscFeature']]\nrenovatable = house.drop(fixed,axis=1)\ny = house['SalePrice'].values","44aa93be":"MSSubClass_dict = { 20:'1-STORY 1946 & NEWER ALL STYLES',\n                    30:'1-STORY 1945 & OLDER',\n                    40:'1-STORY W\/FINISHED ATTIC ALL AGES',\n                    45:'1-1\/2 STORY - UNFINISHED ALL AGES',\n                    50:'1-1\/2 STORY FINISHED ALL AGES',\n                    60:'2-STORY 1946 & NEWER',\n                    70:'2-STORY 1945 & OLDER',\n                    75:'2-1\/2 STORY ALL AGES',\n                    80:'SPLIT OR MULTI-LEVEL',\n                    85:'SPLIT FOYER',\n                    90:'DUPLEX - ALL STYLES AND AGES',\n                   120:'1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n                   150:'1-1\/2 STORY PUD - ALL AGES',\n                   160:'2-STORY PUD - 1946 & NEWER',\n                   180:'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n                   190:'2 FAMILY CONVERSION - ALL STYLES AND AGES'}","9cb08bde":"renovatable.drop(['Id','MoSold','YrSold','SaleType','SaleCondition'],axis=1)","15c51165":"fixed.select_dtypes(include=['object']).columns","4f8bcc62":"dummies = pd.get_dummies(fixed.select_dtypes(include=['object']), dummy_na=True)","3f569902":"long_fixed = pd.concat([fixed,dummies], axis=1, sort=True)\nlong_fixed","9f6f0051":"long_fixed.drop(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'Foundation', 'BsmtQual', 'BsmtExposure',\n       'GarageType', 'MiscFeature'], axis=1, inplace=True)","684e0915":"dict(long_fixed.isnull().sum())","8f3f4857":"long_fixed.drop('GarageYrBlt', inplace=True, axis=1)","88e0955c":"house.shape","04ffc48f":"long_fixed.shape","ab91f941":"sns.distplot(house['SalePrice'] , norm_hist=True, )\nplt.title('Sale Price Distribution')","0c016956":"house[\"SalePrice\"]=np.log1p(house[\"SalePrice\"])\nsns.distplot(house['SalePrice'] , norm_hist=True)\nplt.title('Sale Price Distribution')","dda16f03":"train_index = house[house['YrSold'] < 2010].index\ntest_index = house[house['YrSold'] >= 2010].index\n\nX_train = long_fixed.loc[train_index, :]\nX_test = long_fixed.loc[test_index, :]\ny_train = house.loc[train_index, 'SalePrice'].values\ny_test = house.loc[test_index, 'SalePrice'].values","9f10f9b2":"ss = StandardScaler()\nXs_train = ss.fit_transform(X_train)\nXs_test = ss.transform(X_test)","ca1b727f":"Xs_train.shape","8898e12c":"lr = LinearRegression(n_jobs=-1)\n\nlr.fit(Xs_train, y_train)\nprint('All of the fixed property fixtures explain', (lr.score(Xs_test, y_test))*100,'% of variance in the `Sale Price` for homes sold pre-2010.')","22b5e8b0":"plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', alpha=0.6)\nplt.scatter(y_test, lr.predict(Xs_test), alpha = .7)\nplt.xlabel('Actual Sale Price')\nplt.ylabel('Predicted Sale Price')\nplt.title('Actual vs. Predicted Home Values')","c7afd28b":"lcv = LassoCV(cv=Xs_train.shape[0]-1, n_jobs=-1)\n\nlcv.fit(Xs_train,y_train)\nprint('The LASSO REGRESSION model predicts', (lcv.score(Xs_test,y_test))*100,'% of the variance in `Sale Prices` on properties sold pre-2010.')","ff60a21a":"plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', alpha=0.6)\nplt.scatter(y_test, lcv.predict(Xs_test), alpha = .7)\nplt.xlabel('Actual Sale Price')\nplt.ylabel('Predicted Sale Price')\nplt.title('Actual vs. Predicted Home Values With Lassoed Features')","b73167c4":"fixed_coef = pd.DataFrame({'Fixed Features': long_fixed.columns, 'Co-efficients': lcv.coef_, \"Absolute Co-efficients\":np.abs(lcv.coef_)})","1d3532e7":"fixed_coef[fixed_coef['Absolute Co-efficients']!=0].shape","42209dc0":"sorted_fixed_coef = fixed_coef[fixed_coef['Absolute Co-efficients']!=0].sort_values('Absolute Co-efficients', ascending=False)\nsorted_fixed_coef","7b3a8796":"sorted_fixed_coef.sort_values('Co-efficients').plot(x='Fixed Features',\n                                                   y=['Co-efficients'],\n                                                   kind='barh', \n                                                   figsize=(15,25))","d7028d97":"a = pd.DataFrame(house.groupby('Neighborhood')['SalePrice'].median().sort_values(ascending = True))\na.plot(figsize = (10,12),\n       kind='barh',)\nplt.xlabel('Sale Price (USD)')\nplt.title('Median Price of Home by Neighborhood')","1788761a":"sorted_fixed_coef['Fixed Features'].values","436f979e":"lassoed_fixed_train = X_train[['GrLivArea', 'BsmtQual_Ex', 'Neighborhood_NridgHt', 'GarageCars',\n       'Neighborhood_NoRidge', 'YearRemodAdd', 'YearBuilt', 'TotalBsmtSF',\n       'Neighborhood_StoneBr', 'BldgType_1Fam', 'Fireplaces',\n       'BsmtExposure_Gd', 'Neighborhood_Somerst', 'Condition2_PosN',\n       'Neighborhood_Crawfor', 'BsmtExposure_No', 'KitchenAbvGr',\n       'Neighborhood_Edwards', 'FullBath', 'BsmtFullBath', 'BsmtFinSF1',\n       'LotArea', 'LotShape_IR3', 'Neighborhood_Veenker', 'MSZoning_RM',\n       'Neighborhood_Mitchel', 'LandContour_Bnk', 'Condition1_Norm',\n       'Condition2_PosA', 'Condition1_Feedr', 'LotShape_IR2',\n       'Foundation_PConc', 'LotConfig_FR2', 'LotConfig_CulDSac',\n       'GarageType_2Types', 'GarageType_CarPort', 'BldgType_Twnhs',\n       'Condition1_RRAe']]","71da4f70":"lassoed_fixed_test = X_test[['GrLivArea', 'BsmtQual_Ex', 'Neighborhood_NridgHt', 'GarageCars',\n       'Neighborhood_NoRidge', 'YearRemodAdd', 'YearBuilt', 'TotalBsmtSF',\n       'Neighborhood_StoneBr', 'BldgType_1Fam', 'Fireplaces',\n       'BsmtExposure_Gd', 'Neighborhood_Somerst', 'Condition2_PosN',\n       'Neighborhood_Crawfor', 'BsmtExposure_No', 'KitchenAbvGr',\n       'Neighborhood_Edwards', 'FullBath', 'BsmtFullBath', 'BsmtFinSF1',\n       'LotArea', 'LotShape_IR3', 'Neighborhood_Veenker', 'MSZoning_RM',\n       'Neighborhood_Mitchel', 'LandContour_Bnk', 'Condition1_Norm',\n       'Condition2_PosA', 'Condition1_Feedr', 'LotShape_IR2',\n       'Foundation_PConc', 'LotConfig_FR2', 'LotConfig_CulDSac',\n       'GarageType_2Types', 'GarageType_CarPort', 'BldgType_Twnhs',\n       'Condition1_RRAe']]","aacb4595":"lcv_fixed_lassoed = LassoCV(cv=lassoed_fixed_train.shape[0]-1, n_jobs=-1)\n\nlcv_fixed_lassoed.fit(lassoed_fixed_train, y_train)\nprint((lcv_fixed_lassoed.score(lassoed_fixed_test,y_test))*100,'% of the variance can be explained by the remaining fixed features extracted by the Lasso Regession Model.')","31acb69d":"plt.figure(figsize=(9, 6))\nax = sns.regplot(x=lcv_fixed_lassoed.predict(lassoed_fixed_test), y=y_test)\nax.set_xlabel('True y value')\nax.set_ylabel('Predicted y value')\nax.set_title('Variance')","8e02761d":"residuals = y_test - lcv_fixed_lassoed.predict(lassoed_fixed_test)\n\nplt.figure(figsize=(13, 6))\nax = sns.distplot(residuals)\nax.set_xlabel('Residuals')\nax.set_title('Distribution of Residuals');","381c7ee8":"fixed.head()","3e0801c2":"renovatable = house.drop(fixed,axis=1)\n# house[\"SalePrice\"]=np.log1p(house[\"SalePrice\"])\ny = house['SalePrice']","816da46d":"renovatable.columns","5cbd4351":"renovatable.drop(['Id', 'MSSubClass', 'SaleType', 'SaleCondition', 'MasVnrArea', 'SalePrice'], axis=1, inplace=True)","b1d42b71":"reno_dummies = pd.get_dummies(renovatable.select_dtypes(include=['object']), dummy_na=True, drop_first=True)","26f630cf":"long_reno = pd.concat([renovatable,reno_dummies], axis=1, sort=True)","d56eb77e":"long_reno.drop(['RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'ExterQual', 'ExterCond', 'BsmtCond', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'PoolQC', 'Fence'], axis=1, inplace=True)","81991854":"train_index = house[house['YrSold'] < 2010].index\ntest_index = house[house['YrSold'] >= 2010].index\n\nX_reno_train = long_reno.loc[train_index, :]\nX_reno_test = long_reno.loc[test_index, :]\ny_reno_train = house.loc[train_index, 'SalePrice'].values\ny_reno_test = house.loc[test_index, 'SalePrice'].values","cb3f8f57":"ss = StandardScaler()\nXs_reno_train = ss.fit_transform(X_reno_train)\nXs_reno_test = ss.transform(X_reno_test)","123518ef":"lr_reno = LinearRegression(n_jobs=-1)\n\nlr_reno.fit(X_reno_train, y_reno_train)\nlr_reno.score(X_reno_test, y_reno_test)","53b0cb3b":"plt.plot([min(y_reno_test), max(y_reno_test)], [min(y_reno_test), max(y_reno_test)], color='red', alpha=0.6)\nplt.scatter(y_reno_test, lr_reno.predict(Xs_reno_test), alpha = .7)\nplt.xlabel('Actual Sale Price')\nplt.ylabel('Predicted Sale Price')\nplt.title('Actual vs. Predicted Home Values - Renovatable Features')","e53dcc1b":"lcv_reno = LassoCV(cv=Xs_reno_train.shape[0]-1, n_jobs=-1)\n\nlcv_reno.fit(Xs_reno_train,y_reno_train)\nprint((lcv_reno.score(Xs_reno_test,y_reno_test))*100,'% of the variance in the `Sale Price` for properties sold pre-2010, can be explained by the Lasso Features.')","0501f7fe":"long_reno.columns","9a425077":"reno_coef = pd.DataFrame({'Features':long_reno.columns, 'Co-efficients': lcv_reno.coef_, \"Absolute Co-efficients\":np.abs(lcv_reno.coef_)})\nreno_coef[reno_coef['Absolute Co-efficients']!=0].sort_values('Absolute Co-efficients', ascending=False).head(15)","8238c980":"house['KitchenQual'].value_counts()","60f65c00":"house['ExterQual'].value_counts()","57a1bac9":"house['PoolQC'].value_counts()","dfe9cff3":"top5_fixed_coefficients = long_fixed[['GrLivArea', 'YearRemodAdd', 'GarageCars', 'YearBuilt',\n       'Neighborhood_NridgHt', 'Fireplaces', 'BsmtQual_Ex',\n       'Neighborhood_Crawfor', 'BsmtFullBath', 'Neighborhood_StoneBr']]","2da53b4f":"fixed_coefficients = long_fixed[['GrLivArea', 'YearRemodAdd', 'GarageCars', 'YearBuilt',\n       'Neighborhood_NridgHt', 'Fireplaces', 'BsmtQual_Ex',\n       'Neighborhood_Crawfor', 'BsmtFullBath', 'Neighborhood_StoneBr',\n       'Neighborhood_Edwards', 'MSZoning_RM', 'Neighborhood_Somerst',\n       'FullBath', 'Condition2_PosN', 'KitchenAbvGr', 'Neighborhood_NoRidge',\n       'TotalBsmtSF', 'LotArea', 'BsmtExposure_Gd', 'TotRmsAbvGrd',\n       'BldgType_1Fam', 'LotShape_IR3', 'GarageType_Attchd',\n       'BsmtExposure_nan', 'BldgType_Twnhs', 'Neighborhood_MeadowV',\n       'BsmtExposure_No', 'GarageType_nan', 'Condition1_Feedr',\n       'Condition2_PosA', 'HouseStyle_2Story', 'Foundation_PConc',\n       'LandSlope_Sev', 'Neighborhood_Veenker', 'Neighborhood_Mitchel',\n       'GarageType_CarPort', 'LandContour_Bnk', 'HalfBath', 'BsmtQual_Gd',\n       'Neighborhood_Gilbert', 'Condition1_Artery', 'Condition1_RRAe',\n       'BsmtQual_Fa', 'GarageType_2Types', 'LotConfig_CulDSac', 'BsmtFinSF1',\n       'BldgType_TwnhsE', 'LotShape_IR2', 'Neighborhood_Sawyer',\n       'LotConfig_FR2', 'BsmtHalfBath', 'Neighborhood_OldTown',\n       'Foundation_Slab', 'BldgType_2fmCon', 'LotFrontage', 'Alley_Pave',\n       'BsmtQual_nan', 'LandContour_HLS', 'Condition2_Norm',\n       'Foundation_BrkTil', 'GarageArea', 'MiscFeature_TenC',\n       'HouseStyle_1.5Unf', 'LowQualFinSF', 'BsmtExposure_Av',\n       'Neighborhood_BrkSide', 'Neighborhood_Timber', 'Condition1_Norm',\n       'Condition1_PosN', 'GarageType_BuiltIn']]","e733c59b":"kitch_dummies = pd.get_dummies(house['KitchenQual'], prefix='KitchenQual')","54c41304":"kitch_dummies","a04a841f":"combo = kitch_dummies.merge(fixed_coefficients, how='right', left_index=True, right_index=True)","e459ad58":"combo5 = kitch_dummies.merge(top5_fixed_coefficients, how='right', left_index=True, right_index=True)","ad03bee5":"combo_full = combo.merge(house[['YrSold', 'SalePrice']], how='left', left_index=True, right_index=True)","90dc760f":"combo_full5 = combo.merge(house[['YrSold', 'SalePrice']], how='left', left_index=True, right_index=True)","48a53b17":"test = combo_full[combo_full['YrSold'] < 2010]\ntrain = combo_full[combo_full['YrSold'] >= 2010]\n\nX_combo_train = train.iloc[:, train.columns != 'SalePrice'] \ny_combo_train = train['SalePrice']\nX_combo_test = test.iloc[:, train.columns != 'SalePrice']\ny_combo_test = test['SalePrice']","d0b69249":"test5 = combo_full5[combo_full5['YrSold'] < 2010]\ntrain5 = combo_full5[combo_full5['YrSold'] >= 2010]\n\nX_combo_train5 = train5.iloc[:, train5.columns != 'SalePrice'] \ny_combo_train5 = train5['SalePrice']\nX_combo_test5 = test5.iloc[:, train5.columns != 'SalePrice']\ny_combo_test5 = test5['SalePrice']","3de66d05":"lr_combo5 = LinearRegression()\nlr_combo5.fit(X_combo_train5, y_combo_train5)\n\nprint (lr_combo5.score(X_combo_test5, y_combo_test5))\n\na = pd.DataFrame(zip(X_combo_train5.columns, lr_combo5.coef_), columns = ['variance', 'beta'])\na['abs_beta'] = abs(a['beta'])\n\nprint (a[a['variance'] == 'KitchenQual_Ex'])\nprint (a[a['variance'] == 'KitchenQual_Gd'])\nprint (a[a['variance'] == 'KitchenQual_Ta'])\nprint (a[a['variance'] == 'KitchenQual_Fa'])","87e4fdd2":"lr_combo = LinearRegression()\nlr_combo.fit(X_combo_train, y_combo_train)\n\nprint (lr_combo.score(X_combo_test, y_combo_test))\n\na = pd.DataFrame(zip(X_combo_train.columns, lr_combo.coef_), columns = ['variance', 'beta'])\na['abs_beta'] = abs(a['beta'])\n\nprint (a[a['variance'] == 'KitchenQual_Ex'])\nprint (a[a['variance'] == 'KitchenQual_Gd'])\nprint (a[a['variance'] == 'KitchenQual_Ta'])\nprint (a[a['variance'] == 'KitchenQual_Fa'])","4e1cce7b":"plt.plot([min(y_combo_test), max(y_combo_test)], [min(y_combo_test), max(y_combo_test)], c = 'r', alpha = .6)\nplt.scatter(lr_combo.predict(X_combo_test), y_combo_test, alpha = .7)\nplt.xlabel('actual price sold')\nplt.ylabel('predicted price sold')\nplt.title('Actual vs. Predicted Home Price with Kitchen Quality')","e5aea7a6":"abnormal_house_df = house","fd292cf0":"abnormal_house_df.SaleCondition.value_counts(normalize=True)","eaa612ce":"abnormal_house_df['abnormal_flagging'] = abnormal_house_df['SaleCondition'].apply(lambda x: 1 if x == 'Abnorml' else 0)\ntarget_ab = abnormal_house_df['abnormal_flagging']","6b2de571":"abnormal_house_df.drop(columns=['SaleCondition'], axis=1, inplace=True)","24ecaafa":"abnormal_house_df.abnormal_flagging.value_counts(normalize=True)","49f2c758":"abnormal_house_df.set_index('Id', inplace=True)","875d3443":"X_train, X_test, y_train, y_test = train_test_split(abnormal_house_df, target_ab)","6d5123ea":"# OverSampling\nover = RandomOverSampler(sampling_strategy=0.3)\nhouse_ab, y_ab = over.fit_resample(X_train, y_train)\n# UnderSampling\nunder = RandomUnderSampler(sampling_strategy=0.2)\nhouse_ab, y_ab = under.fit_resample(X_train, y_train)","f9be0f45":"house_ab.shape","4ea3f87c":"y_ab.shape","221701e3":"feature_ab = FeatureSelector(data=house_ab, labels=y_ab)","7586d853":"feature_ab.identify_zero_importance(task='classification',\n                                   eval_metric='auc')","39baab1a":"feature_ab.plot_feature_importances(plot_n=25)","db3b4250":"#### Extracting all the fixed feature names from the fixed features DataFrame. ","51f614a3":"Checking target is normally distributed.","994525b8":"#### Extracting and sorting the fixed features with absolute coefficients greater than 0.","8aa3c643":"#### Normalising target with `log1p`, as this maintains smaller values.","de9b6bbd":"#### Producing dummy columns for string data types, and keeping 'NA' values as these are part of the data. ","18037c84":"#### Identifying string data type columns, that will later have get_dummies applied to them. ","03c28639":"## Estimating the value of homes from fixed characteristics.\n\n---\n\n- Develop an algorithm to reliably estimate the value of residential houses based on *fixed* characteristics.\n- Identify characteristics of houses that the company can cost-effectively change\/renovate with their construction team.\n- Evaluate the mean dollar value of different renovations.\n\nWe can use that to buy houses that are likely to sell for more than the cost of the purchase plus renovations.\n\nWe have a dataset of housing sales data with a huge amount of features identifying different aspects of the house. The full description of the data features can be found in a separate file:\n\n    housing.csv\n    data_description.txt\n    \nWe need to build a reliable estimator for the price of the house given characteristics of the house that cannot be renovated. Some examples include:\n- The neighborhood\n- Square feet\n- Bedrooms, bathrooms\n- Basement and garage space\n\nSome examples of things that **ARE renovate-able:**\n- Roof and exterior features\n- \"Quality\" metrics, such as kitchen quality\n- \"Condition\" metrics, such as condition of garage\n- Heating and electrical components\n---\n### Data Cleaning & EDA","a5e65a90":"### Conclusions\n\nThe r-squared score decreased from 0.886 to 0.707 when including the kitchen quality data with the impactful fixed features.\n\nThe absolute coefficients of the Kitchen Quality dummy variable show us how much the expected Sale Price would increase by improving the Kitchen level. \n\nPrice Differences:\n\n- Excellent: $41,878.66     \n\n- Good: $18,357.42\n\n- Typical \/ Average: $0.00\n\n- Fair: -$3,472.21","3b2f50fe":"#### Plotting the Lassoed values","3efa5a9a":"Need to upscale the `Abnormal Flagging` column to remove skewness.","4a929060":"`Abnorml` Sales are only 6.62% of the total sales. Using Logisitic Regression to identify the features that create an Abnormal Sale we will are required to 'over' and 'under' sample. \n\nFirst we need to binarise the `SaleCondition` with `Abnorml` as 1 and the remaining categories as 0.","8d8f0277":"#### As before we split the houses into year sold prior to and on or after 2010. ","4de57c44":"#### LassoCV with cv being statistical standard","b38d986f":"#### Standardising training and testing data as it includes binary dummies and regular data such as dates. ","ab5c35cf":"#### Removing non-residential properties ","32764d0a":"A simple linear regression on the reonvatable features, explains 75.170% of the variance in the `Sale Price` for properties sold pre-2010.","dc0a3b01":"# Regression and Classification with the Ames Housing Data\n\n---\n\nThis project uses the [Ames housing data recently made available on kaggle](https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques).","107a8eb8":"## Determining any value of *non-fixed* property characteristics unexplained by the *fixed* ones.\n\n---\n\nNow that we have a model that estimates the price of a house based on its static characteristics, we can;\n\n1. Estimate the impacts of the non-fixed characteristics in dollars. \n2. The effects will be on the variance in price remaining from the first model.\n\nThe residuals from the first model (training and testing) represent the variance in price unexplained by the fixed characteristics.\n\n---","0cc0ddcc":"#### Creating baseline model score with Linear Regression","05343473":"#### To avoid duplicate data, dropping the original columns that the dummies were generated from. ","a318d4c1":"#### Looking for Nulls","a3643f7f":"#### Combining dummies with the original fixed predictor variables. ","d4a655c1":"#### Plotting the variance between the predicted and actual `SalePrice`, as the residual values are the non-fixed\/renovatable features of the properties. ","b6135fcf":"Checking shape of traget and predictor data before applying modelling techniques. ","efdd704f":"## Looking at what property characteristics predict an \"abnormal\" sale?\n\n---\n\nThe `SaleCondition` feature indicates the circumstances of the house sale. From the data file, we can see that the possibilities are:\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)\n\n---\n\n- Need to determine which features predict the `Abnorml` category in the `SaleCondition` feature.","cc4a5c4e":"Kitchen quality is very important. Whereas, the exterior quality is very skewed and pool quality has too little data.","4430e8bd":"#### Putting the fixed lassoed features\/co-efficients into a sorted DataFrame, and removing the ones with 0 as a co-efficient value as these have no impact on the final sale price. ","a421a482":"#### Checking that dummy_na=True worked during get_dummies processing. ","38a8e3f0":"****Combine fixed model with Kitchen Features****","45489775":"#### Creating index for houses sold before and during\/after 2010, then training data on pre-2010 and testing or post-2010. ","8d4d4e01":"### Renovatable Feature Modelling Using Manually Selected Features","2dc5e7ee":"****Feature Selection Using LassoCV****","9aedefb0":"#### Renaming MSSubClass, then realised that the data of this feature is included in other categories. ","e4fd6b20":"Normalizing the `SaleCondition` category so we can see the rough frequency of the different categories as a percentage.","499b541f":"Dropping GarageYrBlt as this is unlikely to have much of an impact on the property value. ","1d595cd9":"#### Dropping features related to sale type from the renovatable class.","cd682cdf":"Residuals have a normal distribution. ","52e3b759":"#### Creating dummies of categorical features. ","f335547f":"#### Fitting the lassoed fixed features, and scoring the regression. ","b85cbd1f":"#### Setting the `X_Train` `X-Test` indicies. ","7fca2a56":"#### Assigning fixed predictor variables for pricing, and target value of 'Sale Price'.","6016aafd":"### Saving EDA Profile Report to .html file for easier viewing","53d797d9":"#### Top five fixed features are 'Ground Living Area', 'Year Remodelled', 'Garage Car Count', 'Year Built', 'Neighbourhood Location - Northridge Heights'.\n\nLooking at the difference in `Sale Price` value between the different suburbs.","5243f8cc":"Train, Test split the data before over\/under sampling to avoid duplication of the same data in each set. "}}