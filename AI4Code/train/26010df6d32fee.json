{"cell_type":{"964b458a":"code","e48c45bb":"code","eddde72d":"code","cf5d9235":"code","119de574":"code","139a2506":"code","e809bc4c":"code","1c30951f":"code","d6e97198":"code","2937d162":"code","79c916de":"code","93ff3a97":"code","3cee3000":"code","2f275937":"code","e6a41161":"code","928f2c67":"code","d40a0907":"code","2a537fac":"code","6a35a67a":"code","54ac59ab":"code","51bd6a50":"code","26e5585c":"code","8a0d80ac":"code","0691774d":"code","6baeae4d":"code","b6bb7e54":"code","f20e1d65":"code","0635cd3f":"code","d0726ba5":"code","c04dbe6c":"code","44bc537b":"code","6b21a144":"code","034f7230":"code","0f737f74":"code","50abc4b5":"code","4407bf08":"code","e61088ef":"code","840d3e2d":"code","d27f78e4":"code","abbd425d":"code","aa1fbf42":"code","23fcd860":"code","e3cc8a24":"code","4bb7d1c6":"code","97ae72c7":"code","5c16481c":"code","5c43deb3":"code","519fece5":"code","ce901af6":"code","191e1c1b":"code","0378f100":"code","39c5d9ab":"code","b872df67":"code","2c798192":"code","2eb89504":"code","2fc44b82":"code","70c1baef":"code","d794a330":"code","00c91d22":"code","01c839ce":"code","f5bec63c":"code","586ca109":"code","013c3df2":"code","faa72ba3":"code","a7421232":"code","9556add7":"code","f3f3b6c0":"code","1e16e485":"code","296cea22":"code","69394354":"code","52e19f5b":"code","7fab8c7c":"code","4fc64482":"code","4c5483fd":"code","150b4106":"code","cdf49e91":"code","b109f9cd":"code","4dfe6dfa":"code","f20daf2a":"code","3bc4df8e":"code","dee723c8":"code","24b1833f":"code","a22dbf84":"code","0c92e3ab":"code","7d95a238":"code","38101767":"code","4befdeb8":"code","9b0c28f3":"code","382a3edb":"code","e5ab81a8":"code","0ddca8e6":"code","a1d56faa":"code","9d4faea4":"code","ed8e8a07":"code","68915275":"code","45953728":"code","a2643535":"code","2437a86d":"code","f8a67283":"markdown","48d30be5":"markdown","0a57a26f":"markdown","58c1794a":"markdown","e32c48ae":"markdown","8b2f4ecf":"markdown","ce3bca5c":"markdown","88fd3cc4":"markdown","db60247a":"markdown","086780c1":"markdown","d3e8a8ae":"markdown","83ba06d8":"markdown","0510ad5e":"markdown","73117e75":"markdown","f27279fd":"markdown","6f2d8b37":"markdown","baaebc41":"markdown","6a5609dc":"markdown","907a9145":"markdown","da5679e4":"markdown","cf68c51c":"markdown","7aac0fc0":"markdown","d9fa8309":"markdown","5a81bcb1":"markdown","caa6e541":"markdown","f0cd7050":"markdown","f707f6f2":"markdown","dabd4ded":"markdown","a8999116":"markdown","a1680f70":"markdown","b8a21443":"markdown","6ca9c2dd":"markdown","8a6b5f40":"markdown","24a5bf49":"markdown","42ecc2a2":"markdown","6ad2964e":"markdown","30a0bf1c":"markdown","713d0c0c":"markdown","1188a6ef":"markdown","11e3ced0":"markdown","f63c8041":"markdown","bcc89c63":"markdown","bbfb3a5d":"markdown","7897f0dc":"markdown","dede6388":"markdown","752b4236":"markdown","dc649752":"markdown","88e69b8c":"markdown","d3c4795a":"markdown","60e14eb6":"markdown","8d094341":"markdown","d4ecc7fe":"markdown","a7a07223":"markdown","5921a0dd":"markdown","5b58879e":"markdown","9c690f51":"markdown","f90d7afc":"markdown","f525fe21":"markdown","92bee026":"markdown","efe7d0ae":"markdown","8432d204":"markdown","166d684d":"markdown","06e4c86a":"markdown","12c0a24e":"markdown","e8974ba2":"markdown","b40bd15e":"markdown"},"source":{"964b458a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt # standard python visualization library\n%matplotlib inline\n\nimport matplotlib.patches as mpatches # needed for waffle Charts\n\n# import library\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e48c45bb":"data = pd.read_csv(\"..\/input\/new-zealand-citizenships-19492019\/granted-citizenship-1949-2019.csv\")\ndata.head() # view the first 5 rows","eddde72d":"data.tail() # view the last 5 rows","cf5d9235":"data = pd.read_csv(\"..\/input\/new-zealand-citizenships-19492019\/granted-citizenship-1949-2019.csv\",\n                   skipfooter=1) # i skipped last one row\ndata.tail() # view the first 5 rows","119de574":"data.info()","139a2506":"data[\"%\"] = data[\"%\"].str[:4]\ndata.head()","e809bc4c":"data[\"%\"] = data[\"%\"].astype(float)\ndata.rename(columns={\"%\":\"percentage_distribution\"}, inplace=True)","1c30951f":"data.columns.values # they all are object which I'd like so","d6e97198":"data.index.values","2937d162":"data.shape # size of data frame(rows,columns)","79c916de":"years = list(map(str,range(1949, 2020))) # there are years from 1949 to 2019, I want to get it as a list\n# since range() function returns integer, i should use it with map() function to make them string\ndata.loc[0,years].sum() # sums the 0 indexed row values","93ff3a97":"data.isnull().sum().sum() # we have this many NaN values in dataframe","3cee3000":"data.fillna(0, inplace=True) # filled with zero\ndata.head()","2f275937":"data.isnull().sum().sum() # there is no NaN value anymore","e6a41161":"# quick review of each column\ndata.describe() ","928f2c67":"data.Total # filter on Total column","d40a0907":"data[[\"Country of Birth\",\"Total\",\"2019\"]] # filter on multiple columns","2a537fac":"data.set_index(\"Country of Birth\",inplace=True) # changing the index of dataframe\ndata.head(2)","6a35a67a":"data.index.name = None\ndata.head(2)","54ac59ab":"data[years].head(2)","51bd6a50":"data[years] = data[years].astype(int)\ndata[years].head(2)","26e5585c":"data.loc[\"Russia\",\"2019\"]","8a0d80ac":"years00_15 = list(map(str,range(2000,2016)))\ndata.loc[\"Russia\",years00_15]","0691774d":"condition1 = data[\"2015\"]>500 # returns False or True\ndata[condition1] # show me countries of people that got new zealand citizenship more than 500 in 2015","6baeae4d":"condition2 = data[\"2010\"]>1000\ndata[condition1 & condition2]","b6bb7e54":"india = data.loc[\"India\",years] \nindia.plot() # as default, it plots like this\nplt.show()","f20e1d65":"mpl.style.use([\"ggplot\"]) # mpl is matplotlib library\nindia.plot() \nplt.show()","0635cd3f":"# we can see how many types we can plot\nplt.style.available # you can play around with them","d0726ba5":"india.index.values # they are object,i want to change them to str","c04dbe6c":"india.index = india.index.map(int)\nindia.plot(kind=\"line\") # its line by default\n\nplt.title(\"New Zealand Citizenship for Indian people\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of citizenship\")\nplt.show()","44bc537b":"india.index = india.index.map(int)\nindia.plot(kind=\"line\") \n\nplt.title(\"New Zealand Citizenship for Indian people\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of citizenship\")\nplt.text(1985,2200, \"1990 Year\") # x axis, y axis\nplt.show()","6b21a144":"years80_10 = list(map(str,range(1980,2011)))\ndata_IE = data.loc[[\"India\",\"England\"],years80_10]\ndata_IE","034f7230":"data_IE = data_IE.transpose()\ndata_IE.head()","0f737f74":"data_IE.index = data_IE.index.map(int) # changing str to int\ndata_IE.plot(kind=\"line\")\nplt.title(\"Citizenship from India, and England\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number of citizenship\")\nplt.show()","50abc4b5":"# sort the data\ndata.sort_values(by=\"Total\", ascending=False, axis=0, inplace=True)\n\n# get the top 4 countries\ndata_top4 = data.head(4)\ndata_top4\n# if i want only Total column, data.head(4).loc[:,\"Total\"]","4407bf08":"# transpose the dataframe by years\ndata_top4 = data_top4[years].transpose()\ndata_top4","e61088ef":"# plot the dataframe\ndata_top4.index = data_top4.index.map(int) # change them to int from str\ndata_top4.plot(kind=\"line\",figsize=(12,6))\n\nplt.title(\"top 4 countries that got New Zealand citizenship\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number or Citizenship\")\nplt.show()","840d3e2d":"data_top4.head()","d27f78e4":"data_top4.plot(kind=\"area\",\n               stacked = False,\n               figsize=(17,8))\nplt.title(\"top 4 countries that got New Zealand citizenship\")\nplt.xlabel(\"Years\")\nplt.ylabel(\"Number or Citizenship\")\nplt.show()","abbd425d":"ax = data_top4.plot(kind=\"area\",stacked = False, figsize=(17,8))\nax.set_title(\"top 4 countries that got New Zealand citizenship\")\nax.set_xlabel(\"Years\")\nax.set_ylabel(\"Number or Citizenship\")\nplt.show()","aa1fbf42":"data[\"2019\"].head()","23fcd860":"count, bin_edges = np.histogram(data[\"2019\"]) # returns 2 values\nprint(count) # frequency\nprint(bin_edges) # bin ranges, default=10 bins","e3cc8a24":"data[\"2019\"].plot(kind=\"hist\",figsize=(7,4))\nplt.title(\"histogram of 324 countries that got new zealand citizenship in 2019\")\nplt.xlabel(\"Number of Citizenships\")\nplt.ylabel(\"Number of Countries\")\nplt.show()","4bb7d1c6":"count, bin_edges = np.histogram(data[\"2019\"])\ndata[\"2019\"].plot(kind=\"hist\",figsize=(10,4), xticks=bin_edges)\nplt.title(\"histogram of 324 countries that got new zealand citizenship in 2019\")\nplt.xlabel(\"Number of Citizenships\")\nplt.ylabel(\"Number of Countries\")\nplt.show()","97ae72c7":"data.loc[[\"Sweden\",\"Russia\",\"Turkey\"]]","5c16481c":"# transpose the dataframe\ndata_srt = data.loc[[\"Sweden\",\"Russia\",\"Turkey\"], years].transpose()\ndata_srt.head()","5c43deb3":"data_srt.plot(kind=\"hist\",figsize=(7,4))\nplt.title(\"Citizenship from Sweden, Russia, Turkey\")\nplt.xlabel(\"Number of Citizenship\")\nplt.ylabel(\"Years\") # from 1949 to 2019 -> 70 years\nplt.show()","519fece5":"count,bin_edges = np.histogram(data_srt,15)\n\n# unstacked histogram\ndata_srt.plot(kind=\"hist\",\n              figsize=(15,5),\n              bins=bin_edges,\n              alpha=0.5,\n              xticks=bin_edges,\n              color=['coral', 'darkslateblue', 'mediumseagreen'])\n\nplt.title(\"Citizenship from Sweden, Russia, Turkey\")\nplt.xlabel(\"Number of Citizenship\")\nplt.ylabel(\"Years\")\nplt.show()","ce901af6":"count, bin_edges = np.histogram(data_srt, 15)\nxmin = bin_edges[0]    \nxmax = bin_edges[-1]  \n\n# stacked Histogram\ndata_srt.plot(kind='hist',\n          figsize=(14, 6), \n          bins=15,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen'],\n          stacked=True, # it adds up\n          xlim=(xmin, xmax)\n         )\n\nplt.title(\"Citizenship from Sweden, Russia, Turkey\")\nplt.xlabel(\"Number of Citizenship\")\nplt.ylabel(\"Years\")\nplt.show()","191e1c1b":"# getting the data\nyears77_19 = list(map(str, range(1977,2020)))\ndata_england = data.loc[\"England\",years77_19]\ndata_england.head()","0378f100":"# plotting the data\ndata_england.plot(kind=\"bar\",figsize=(12,6))\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Citizenships\")\nplt.title(\"New Zealand Citizenship of people from England from 1977 to 2019\")\nplt.show()\n","39c5d9ab":"# sort dataframe on \"Total\" column\ndata.sort_values(by=\"Total\", ascending=True, inplace=True)\n# get top 10 countries\ndata_top10 = data[\"Total\"].tail(10)\n\n# plot the data\ndata_top10.plot(kind=\"barh\", figsize=(10,10), color=\"steelblue\")\nplt.xlabel(\"Number of Citizenships\")\nplt.title(\"Top 10 Countries that got New Zealand Citizenship between 1977-2019\")\n\n# annotate value labels to each country\nfor index, value in enumerate(data_top10):\n    label = format(int(value),\",\") # format int with commas\n    \n    # place text at the end of the bar(subtracting 14000 from x, and 0.1 from y to make it fit within the bar)\n    plt.annotate(label, xy=(value - 14000, index - 0.10), color='white')\n    \nplt.show()","b872df67":"# last time, we sorted our data in ascending order, lets change it in descending\ndata.sort_values(by=\"Total\", ascending=False, inplace=True)\ndata.head()","2c798192":"data.head()[\"Total\"].plot(kind=\"pie\",\n                   figsize=(5,6),\n                   autopct='%1.1f%%',# add in percentages\n                   startangle=90,     # start angle 90\u00b0 (England)\n                   shadow=True,       # add shadow      \n                  )\nplt.title('top 5 countries')\nplt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","2eb89504":"colors_list = [\"aliceblue\",\"burlywood\",\"lemonchiffon\",\"skyblue\",\"slategrey\"]\nexplode_list = [0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset, lets explode the lowest 2 countries\ndata.head()[\"Total\"].plot(kind=\"pie\",\n                   figsize=(5,6),\n                   autopct='%1.1f%%',    # add in percentages\n                   startangle=90,        # start angle 90\u00b0 (England)\n                   shadow=True,          # add shadow      \n                   labels=None,          # turn off labels on pie chart\n                   pctdistance =1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                   colors=colors_list,   # add custom colors\n                   explode=explode_list  # 'explode' lowest 2 countries\n                   )\n# scale the title up by 10% to match pctdistance\nplt.title(\"top 5 countries\", y=1.1) # you can change \"y\" value\n\nplt.axis('equal')\n\n# add legend\nplt.legend(labels=data.head().index, loc='upper left') \nplt.show()","2fc44b82":"years05_19 = list(map(str,range(2005,2020)))\ndata.loc[[\"Turkey\"],years05_19]","70c1baef":"data_turkey = data.loc[[\"Turkey\"],years05_19].transpose()\ndata_turkey.head()","d794a330":"data_turkey.plot(kind=\"box\", figsize=(5,5))\n\nplt.title(\"people from Turkey that got New Zealand citizenship between 2005-2019\")\nplt.ylabel(\"Number of Citizenships\")\nplt.show()","00c91d22":"data_turkey.describe()","01c839ce":"data_TI = data.loc[[\"Turkey\",\"Italy\"],years05_19].transpose()\ndata_TI.head()","f5bec63c":"data_TI.describe()","586ca109":"data_TI.plot(kind='box', figsize=(8, 6))\nplt.title('Box plots of New Zealand Citizenships from Turkey and Italy(2005 - 2019)')\nplt.xlabel('Number of Citizenships')\nplt.show()","013c3df2":"data_TI.plot(kind='box', figsize=(8, 6), color=\"red\", vert=False)\nplt.title('Box plots of New Zealand Citizenships from Turkey and Italy(2005 - 2019)')\nplt.xlabel('Number of Citizenships')\nplt.show()","faa72ba3":"fig = plt.figure() # create figure\nax0 = fig.add_subplot(1,2,1) # add 1 row, 2 columns, and this is the first plot\nax1 = fig.add_subplot(1,2,2) # this is the second plot\n\n# subplot1-> box plot\ndata_TI.plot(kind='box', figsize=(17, 6), color=\"red\", vert=False,ax=ax0) # add to subplot1\nax0.set_title('Box plots of New Zealand Citizenships from Turkey and Italy(2005 - 2019)')\nax0.set_xlabel('Number of Citizenships')\nax0.set_ylabel(\"Country\")\n\n# subplot2 -> line plot\ndata_TI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of New Zealand Citizenships from Turkey and Italy(2005 - 2019)')\nax1.set_ylabel('Number of Citizenships')\nax1.set_xlabel('Year')\n\nplt.show()","a7421232":"data_top10 = data.sort_values(by=\"Total\",ascending=False,axis=0).head(10) # get the top 10 countries by Total\n\n# create list of years\nyears_90s = list(map(str,range(1990,2000)))\nyears_00s = list(map(str,range(2000,2010)))\nyears_10s = list(map(str,range(2010,2020)))\n\n# get the value for each decades as series\ndata_90s = data_top10.loc[:,years_90s].sum(axis=1)\ndata_00s = data_top10.loc[:,years_00s].sum(axis=1)\ndata_10s = data_top10.loc[:,years_10s].sum(axis=1)\n\n# merge series to dataframe\nnew_data = pd.DataFrame({\"1990s\":data_90s, \"2000s\":data_00s, \"2010s\":data_10s})\n\nnew_data.head()","9556add7":"new_data.describe()","f3f3b6c0":"# Plot the box plots\nnew_data.plot(kind='box', figsize=(10, 6))\nplt.title('Citizenships from top 10 countries for decades 90s, 2000s and 2010s')\nplt.show()","1e16e485":"# let's check how many entries fall above the outlier threshold \nnew_data[new_data['1990s'] > 29476.25] # England is the outlier in 1990s ","296cea22":"data[years].head()","69394354":"data[years].sum(axis=0).head()","52e19f5b":"pd.DataFrame(data[years].sum(axis=0).head())","7fab8c7c":"# we can use the sum() method to get the total population per year\ndata_total = pd.DataFrame(data[years].sum(axis=0))\n\n# change the years to type int (it will be useful for regression later on)\ndata_total.index = map(int, data_total.index)\n\n# reset the index to put in back in as a column in the data_total dataframe\ndata_total.reset_index(inplace = True)\n\n# rename columns\ndata_total.columns = ['year', 'total'] \n\ndata_total.head()","4fc64482":"data_total.plot(kind=\"scatter\", x=\"year\", y=\"total\", figsize=(10,6),color=\"blueviolet\")\n\nplt.title('Total New Zealand Citizenships from other countries for 1949 - 2019')\nplt.xlabel('Year')\nplt.ylabel('Number of Citizenships')\n\nplt.show()","4c5483fd":"x = data_total['year']      # year on x-axis\ny = data_total['total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\n\nfit","150b4106":"data_total.plot(kind=\"scatter\",x=\"year\",y=\"total\",figsize=(10,6),color=\"blueviolet\")\n\nplt.title('Total New Zealand Citizenships from other countries for 1949 - 2019')\nplt.xlabel('Year')\nplt.ylabel('Number of Citizenships')\n\n# plot line of best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # x is the Years, and y = a x + b\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 10000)) # y equation label\n\nplt.show()\n\n# print out the line of best fit\n'Number of Citizenships = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) ","cdf49e91":"# lets transpose our data to get country list as column\ndata_t = data[years].transpose()\n\n# cast the Years (the index) to type int\ndata_t.index = map(int,data_t.index)\n\n# label the index. This will automatically be the column name when we reset the index\ndata_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndata_t.reset_index(inplace=True)\n\ndata_t.head()","b109f9cd":"# normalize Italy data\nnorm_italy = (data_t['Italy'] - data_t['Italy'].min()) \/ (data_t['Italy'].max() - data_t['Italy'].min())\n\n# normalize Spain data\nnorm_spain = (data_t['Spain'] - data_t['Spain'].min()) \/ (data_t['Spain'].max() - data_t['Spain'].min())","4dfe6dfa":"# Italy\nax0 = data_t.plot(kind='scatter',\n                    x='Year',\n                    y='Italy',\n                    figsize=(14, 8),\n                    alpha=0.5,                  # transparency\n                    color='green',\n                    s=norm_italy * 1000,  # pass in weights \n                    xlim=(1949, 2019) # x axis\n                   )\n\n# Argentina\nax1 = data_t.plot(kind='scatter',\n                    x='Year',\n                    y='Spain',\n                    alpha=0.5,\n                    color=\"blue\",\n                    s=norm_spain * 1000,\n                    ax = ax0\n                   )\n\nax0.set_ylabel('Number of Citizenships')\nax0.set_title('Citizenship of people from Italy and Spain from 1949 - 2019')\nax0.legend(['Italy', 'Spain'], loc='upper left', fontsize='x-large')\nplt.show()","f20daf2a":"# lets get data for three countries\ndata_fgs = data.loc[[\"France\",\"Germany\",\"Singapore\"],:]\ndata_fgs","3bc4df8e":"# compute the proportion of each category with respect to the total\ntotal_values = sum(data_fgs['Total'])\ncategory_proportions = [(value \/ total_values) for value in data_fgs['Total']]\n\n# print out proportions\nfor i, proportion in enumerate(category_proportions):\n    print (data_fgs.index.values[i] + ': ' + str(proportion))","dee723c8":"# defining the overall size of the waffle chart\nwidth = 40 # width of chart\nheight = 10 # height of chart\ntotal_num_tiles = width * height # total number of tiles","24b1833f":"# compute the number of tiles for each category\ntiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n# print out number of tiles per category\nfor i, tiles in enumerate(tiles_per_category):\n    print (data_fgs.index.values[i] + ': ' + str(tiles))","a22dbf84":"# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width))\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index\nwaffle_chart","0c92e3ab":"# lets find if we did right\nunique, counts = np.unique(waffle_chart, return_counts=True)\ndict(zip(unique, counts)) \n# result is true, so France:81, Germany:186, Singapore:133","7d95a238":"# Map the waffle chart matrix into a visual\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\nplt.show()","38101767":"# Lets pretify this\n\n# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\n\n\n# compute cumulative sum of individual categories to match color schemes between chart and legend\nvalues_cumsum = np.cumsum(data_fgs['Total'])\ntotal_values = values_cumsum[len(values_cumsum) - 1]\n\n# create legend\nlegend_handles = []\nfor i, category in enumerate(data_fgs.index.values):\n    label_str = category + ' (' + str(data_fgs['Total'][i]) + ')'\n    color_val = colormap(float(values_cumsum[i])\/total_values)\n    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n# add legend to chart\nplt.legend(handles=legend_handles,\n           loc='lower center', \n           ncol=len(data_fgs.index.values),\n           bbox_to_anchor=(0., -0.2, 0.95, .1)\n          )\nplt.show()","4befdeb8":"# import package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport urllib.request\nresponse = urllib.request.urlopen(\"https:\/\/www.w3.org\/TR\/PNG\/iso_8859-1.txt\")\ntext_file = response.read().decode('utf-8')","9b0c28f3":"# use the stopwords that we imported from word_cloud\nstopwords = set(STOPWORDS)\n\n# instantiate a word cloud object\ntext_wc = WordCloud(\n    background_color='white',\n    max_words=2500, # used the first 250 letters in text file\n    stopwords=stopwords\n)\n\n# generate the word cloud\ntext_wc.generate(text_file)","382a3edb":"fig = plt.figure()\nfig.set_figwidth(8)    # set width\nfig.set_figheight(10)  # set height\n\n# display the word cloud\nplt.imshow(text_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","e5ab81a8":"stopwords.add('letter') # add the words said to stopwords\n\n# re-generate the word cloud\ntext_wc.generate(text_file)\n\n# display the cloud\nfig = plt.figure()\nfig.set_figwidth(8) # set width\nfig.set_figheight(10) # set height\n\nplt.imshow(text_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","0ddca8e6":"data.head()","a1d56faa":"total_citizenship = data[\"Total\"].sum()\ntotal_citizenship","9d4faea4":"max_words = 70\nword_string = ''\nfor country in data.index.values:\n    # check if country's name is a single-word \n    if len(country.split(' ')) == 1:\n        repeat_num_times = int(data.loc[country, 'Total']\/float(total_citizenship)*max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)\n                                     \n# display the generated text\nword_string","ed8e8a07":"# create the word cloud\nwordcloud = WordCloud(background_color='white').generate(word_string)\n\n# display the cloud\nfig = plt.figure()\nfig.set_figwidth(10)\nfig.set_figheight(12)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","68915275":"data_total.head()","45953728":"ax = sns.regplot(x='year', y='total', data=data_total)","a2643535":"# changing the color and adding marker\nax = sns.regplot(x='year', y='total', data=data_total,color=\"green\",marker=\"+\")","2437a86d":"plt.figure(figsize=(12, 7))\nax = sns.regplot(x='year', y='total', data=data_total,color=\"green\",marker=\"+\", scatter_kws={'s': 150})\nsns.set(font_scale=1.5)\nsns.set_style('ticks') # change background to white background\n\nax.set(xlabel='Year', ylabel='Total Citizenships') # add x- and y-labels\nax.set_title('New Total Citizenship of New Zealand from 1949 - 2019') # add title\nplt.show()","f8a67283":"Lets have multiple conditions","48d30be5":"##### Question: Create a boxplot to visualize the distribution of number of people from the top 10 countries that got New Zealand citizenship, grouped by the decades 1990s, 2000s, 2010s.","0a57a26f":"<a id=\"13\"><\/a> <br>\n#### Word Clouds\nThe more a specific word appears in a source of textual data, the bigger and bolder it appears in the word cloud.","58c1794a":"##### Scenario: View the number of citizenships from Russia\n* For year 2019\n* For years 2000 to 2015","e32c48ae":"I'd like to hear your opinion about this kernel, thanks.","8b2f4ecf":"<a id=\"14\"><\/a> <br>\n#### Regression Plots","ce3bca5c":"data_IE is a dataframe with the country as the index and years as the columns, we must first transpose the dataframe to swap the row and columns.","88fd3cc4":"<a id=\"2\"><\/a> <br>\n### Pandas Intermediate","db60247a":"Lets get data for Italy and Spain","086780c1":"##### Question: Compare the number of citizenship from India and England from 1980 to 2010","d3e8a8ae":"When analyzing a dataset, its always good idea to get basic information about dataframe.","83ba06d8":"We can write on plots","0510ad5e":"<a id=\"12\"><\/a> <br>\n#### Waffle Charts","73117e75":"there are between 0-468 people that got citizenship from each 312 countries\n\nbetween 468-936 people that got citizenship from each 5 countries, so on","f27279fd":"##### Question: Year 1977 was the time when the term of \"alien\" removed. The major people were from England in New Zealand. So I want to compare number of people from England that got New Zealand citizenship after 1977.","6f2d8b37":"Using countries with single-word names, let's duplicate each country's name based on how much they contribute to the total citizenship.","baaebc41":"Lets change the values of float to integer. It just shows number of people, so we don't need decimal point.","6a5609dc":"<a id=\"3\"><\/a> <br>\n### Plotting in Pandas\n\n##### Line Plot","907a9145":"The size of the bubble corresponds to the magnitude of number of citizenships for that year. The larger the bubble, the more citizenships in that year.","da5679e4":"Plot the data\n\n* We will pass in the weights using the s parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore we will:\n    * multiply weights by 2000 to scale it up on the graph, and,","cf68c51c":"##### Question: What's the citizenship distribution for Sweden, Russia, Turkey","7aac0fc0":"<a id=\"6\"><\/a> <br>\n#### Histogram\nA histogram is a way of representing the frequency distribution of numeric dataset. \n##### Question: What's the frequency distribution of the number of new citizenships from various countries in 2019","d9fa8309":"Lets improve this plot","5a81bcb1":"The unstacked plot has a default transparency (alpha value) at 0.5 You can change it","caa6e541":"Lets make some improvements. We can add colors, remove text labels on the pie chart and add it as seperate legend. Push out the percentages out of pie chart, and explode the parts which we would like to.","f0cd7050":"<a id=\"1\"><\/a> <br>\n### Pandas Basics","f707f6f2":"<a id=\"7\"><\/a> <br>\n#### Bar Charts\nBar graphs usually represent numerical and categorical variables grouped in intervals. To create a bar plot, we can pass one of two arguments via kind parameter in plot():\n* kind=bar creates a vertical bar plot\n* kind=barh creates a horizontal bar plot","dabd4ded":"Let's try to plot a linear line of best fit, and use it to predict the number of immigrants in 2010\n\nGet the equation of line of best fit. We will use Numpy's polyfit() method:\n\n* x: x-coordinates of the data.\n* y: y-coordinates of the data.\n* deg: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.","a8999116":"To filter a dataframe based on a condition, we just pass the condition as boolean vector","a1680f70":"In order to be an outlier, the data value must be:\n\n* larger than Q3 by at least 1.5 times the interquartile range (IQR), or\n* smaller than Q1 by at least 1.5 times the IQR.\nLet's look at decade 1990s as an example:\n\nQ1 (25%) = 4932.5\nQ3 (75%) = 14750\nIQR = Q3 - Q1 = 9817.5 \n\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 14750 + (1.5 * 9817.5) ----> Outlier > 29476.25","b8a21443":"Now we can change this column values to float, and change the column name, \"%\" doesn't make sense to me","6ca9c2dd":"We can say -> there are 305.1-352 people for Russia that got new zealand citizenship for 0-5 years, so on","8a6b5f40":"**Select Column**\n\nThere are two ways to filter on a column.\n\n* This works if column doesn't have spaces or special characters.\n\ndf.column_name --> returns Series\n* This can filter on multiple columns.\n\ndf[\"column\"] --> returns Series\n\ndf[[\"column1\",\"column2\"]] --> returns DataFrame","24a5bf49":"The x-axis labels don't match with the bin size. Lets fix it","42ecc2a2":"##### Question: Create a horizontal bar plot showing the total number of people that got New Zealand citizenship from the top 10 countries between 1977 and 2019","6ad2964e":"<a id=\"11\"><\/a> <br>\n#### Bubble Plots\nA bubble plot is a variation of the scatter plot that displays three dimensions of data (x, y, z). The datapoints are replaced with bubbles, and the size of the bubble is determined by the third variable 'z', also known as the weight","30a0bf1c":"I don't want to see index name here, so let's delete it.","713d0c0c":"If we don't want the plots to overlap each other, we can stack them using the stacked parameter. Also adjust the min and max x-axis labels to remove the extra gap on the edges of the plot.","1188a6ef":"##### Two types of plotting\nThere are two ways to plot with matplotlib using the scripting and artist layer.\n* Scripting Layer - using matplotlib.pyplot as plt\nwe have been using this method so far.\n\nan example:\n\ndata_top4.plot(kind=\"area\",stacked = False, figsize=(17,8))\n\nplt.title(\"top 4 countries that got New Zealand citizenship\")\n\nplt.xlabel(\"Years\")\n\nplt.ylabel(\"Number or Citizenship\")\n\nplt.show()\n* Artist Layer - using axes instance from matplotlib\nYou can use axes instance of your plot, and store it in a variable. You can add more elements by using the syntax of \"set_\"\n\nLets do an example","11e3ced0":"Create the normalized weights.\n\nThere are several methods of normalizations in statistics. I will use feature scaling to bring all values into the range [0,1].","f63c8041":"1. [Pandas Basics](#1)\n1. [Pandas Intermediate](#2)\n1. [Plotting in Pandas](#3)\n1. [Visualization Tools](#4)\n     * [Area Plot](#5)\n     * [Histogram](#6)\n     * [Bar Charts](#7)\n     * [Pie Charts](#8)\n     * [Box Plots](#9)\n     * [Scatter Plots and how to plot a Liner Line](#10)\n     * [Bubble Plots](#11)\n     * [Waffle Charts](#12)\n     * [Word Clouds](#13)\n     * [Regression Plots](#14)","bcc89c63":"##### Question: Compare the top 4 countries that got new zealand citizenship from","bbfb3a5d":"Do the same as horizontal box plot.","7897f0dc":"#### Subplots\nTo visualize multiple plots together, we can create a figure and divide it into subplots, each containing a plot.\n\nTypical syntax is :\n\nfig = plt.figure() # create figure\n\nax = fig.add_subplot(nrows, ncols, plot_number)\n\nWhere; nrows and ncols are used to split the figure into (nrows * ncols) sub axes.","dede6388":"<a id=\"8\"><\/a> <br>\n#### Pie Charts","752b4236":"<a id=\"5\"><\/a> <br>\n#### Area Plot(Stacked Line Plot)\nArea plots are stacked by default, and to produce a stacked area plot, each column must be either all positive or all negative values (any NaN values will defaulted to 0). To produce an unstacked plot, pass stacked=False","dc649752":"Btw there are NaN values in the data. But what will we put there? Let's sum a row values to see if its equal to Total value. If so, then we will just change all NaN values with zero.","88e69b8c":"Let's generate sample text data from our immigration dataset, say text data of 70 words.","d3c4795a":"In the first 2500 words in the text file, the most common words are  Small, Letter, Capital, Sign, Grave, and so on.\n\nFor example I don't want to see \"Letter\" word. So I need to add this as stopword then","60e14eb6":"##### Select Row\nThere are 2 ways.\n* df.loc[label]  --> filters by labels of the index and column\n* df.iloc[index] --> filters by positions of the index and column","8d094341":"<a id=\"10\"><\/a> <br>\n#### Scatter Plots and how to plot a Liner Line\nScatter plots look similar to line plots in that they both map independent and dependent variables on a 2D graph. While the datapoints are connected together by a line in a line plot, they are not connected in a scatter plot.","d4ecc7fe":"#### Some Information About New Zealand's Past Citizenship, and This Data\nThis data shows information of having New Zealand citizenship about people from all around the world between 1949 and 2019.\n\nFrom 1840 until 1 January 1949 most people in New Zealand were British subjects\/citizens. Non-British were \u2018aliens\u2019. From 1 January 1949 when New Zealand citizenship was officially established, an \u2018alien\u2019 was defined as someone who was not a New Zealand citizen, and not British, British protected, or Irish. People with British nationality who were not New Zealand citizens were not aliens.\n\nIn 1977 a review of citizenship and residency removed the term alien from official use. Increasingly the focus has been on citizenship, or residency, or various other more temporary arrangements.\n\n##### Explanation of the columns\n* **Country of Birth** -> where she\/he was born\n* **Total**            -> total amount of people that got New Zealand citizenship from that country\n* **%**                -> shows the percentage of people of each country\n","a7a07223":"I tried this with a few rows more, and the result was the same with Total Column. So what I will do is just to change NaN values with zero.","5921a0dd":"##### Question: Use box plot for people from Turkey that got New Zealand citizenship between 2005-2019","5b58879e":"##### Question: Compare the distribution of the number of citizenship from Turkey, and Italy between 2005-2019","9c690f51":"There is TOTAL in Country of Birth column, it's not a country. I don't want to see this.","f90d7afc":"<a id=\"4\"><\/a> <br>\n### VISUALIZATION TOOLS","f525fe21":"Since we are plotting a linear regression y= a*x + b, our output has 2 elements [4.66030885e+02, -9.11785107e+05] with the the slope in position 0 and intercept in position 1","92bee026":"As expected, the matrix consists of three categories and the total number of each category's matches the total number of tiles allocated to each category.","efe7d0ae":"We can make bigger size of figure, increase the size of markers, and tickmark labels, and change the background","8432d204":"##### Question: Use pie plot to show people that got New Zealand citizenship from the top 5 countries\nWe will pass in kind = 'pie' keyword, along with the following additional parameters:\n* autopct - is a string or function used to label the wedges with their numeric value.\n* startangle - rotates the start of the pie chart by angle degrees counterclockwise from the x axis.\n* shadow - draws a shadow beneath the pie to give a 3D feel.","166d684d":"Since \"%\" column is an object, I should change it to float. Cause it should be numeric value. But in the column there is \"%\" letter at the end, i should delete it in order to change it to float.","06e4c86a":"<a id=\"9\"><\/a> <br>\n#### Box Plots\nA box plot is a way of statistically representing the distribution of the data through five main dimensions:\n\n* Minimum: Smallest number in the dataset.\n* First quartile: Middle number between the minimum and the median.\n* Second quartile (Median): Middle number of the sorted dataset.\n* Third quartile: Middle number between median and maximum.\n* Maximum: Highest number in the dataset.","12c0a24e":"Using the equation of line of best fit, we can estimate the number of immigrants in 2010:\n\nNumber of Citizenships = 466 * Year + -911785\n\nNumber of Citizenships = 466 * 1990 + -911785\n\nNumber of Citizenships = 15555\n\nWhen compared to the actuals from Citizenship (data_total[data_total[\"year\"]==2010]) its 13067, its not bad. But as you can see from the plot, its good estimation in 1960, but not good in 2010. ","e8974ba2":"We can make observations based on the plot. There are two outliers. Median is almost 35.","b40bd15e":"The default index of the dataset is a numeric range from 0 to 324. It's difficult to query by a specific country. It's better to see Country column as index."}}