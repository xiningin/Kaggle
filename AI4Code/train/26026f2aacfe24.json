{"cell_type":{"040fa642":"code","8070c89d":"code","b91a5677":"code","1bdc187f":"code","f28d958d":"code","d2e607fc":"code","2c608313":"code","5206b2f0":"code","13a83b31":"code","b097b212":"code","42f42b07":"code","2de010bc":"code","c201daaf":"code","b0861323":"code","c25cbb97":"code","63ecc491":"code","20201a5e":"code","27fa5879":"code","2378afaa":"code","f5b4a2f8":"code","422d3959":"code","1574d654":"code","a37cff63":"code","afeaecbd":"code","2e5c6655":"code","17689d36":"code","9a4616f9":"code","4827dceb":"code","7e69703d":"code","e28312f0":"code","87170dff":"code","5cd584cd":"code","f34b2220":"code","9a060429":"code","8443f765":"code","1addea9b":"code","0f3a6e5d":"code","15472c7c":"code","9a3c79b0":"code","484aadc4":"code","0593b9bd":"code","d12dfc36":"code","48bb5f54":"code","5114b6dc":"code","49426db8":"code","fe1a703d":"code","178a75bd":"code","982ad050":"code","06f778d8":"code","bd44d41b":"code","abdb74a8":"code","6dcb0e7f":"code","3b7013c3":"code","31c8846f":"code","3e97307d":"code","a4e3cd66":"code","93ce9ec6":"code","12085ae3":"code","120f9240":"code","85c9817b":"code","5560bce3":"code","6d539a2c":"code","2ebcad57":"code","406ed3aa":"code","fee6eda5":"code","e4291673":"code","8d046ac1":"code","6de496ff":"code","c528e761":"code","d508a000":"code","b700f9cc":"code","ee9b8d4a":"code","842e6c2e":"code","0187e4c8":"code","badc1b08":"code","e00df0e4":"code","9b4a58f2":"code","b0c0baa3":"code","eb7493a7":"code","1f1dc236":"code","35af8e95":"code","844395f6":"code","10033594":"code","217fbc13":"code","3d589504":"code","c2f65d5e":"code","4106a881":"code","d4b5355f":"code","bdea2e7a":"code","f87af371":"code","5682cfc0":"code","162524d4":"code","e1d0f594":"code","ae27b3fe":"code","ff47312e":"code","424b30c5":"code","3e2a865d":"code","82470a65":"code","be72df52":"code","ea990873":"code","b05b336b":"code","51f92b76":"code","77ffb8f3":"code","6548f0ff":"code","86e886c3":"markdown","c3bd7d6f":"markdown","5c72b862":"markdown","85a32d23":"markdown","f8ec636f":"markdown","d3d1f735":"markdown","954e194d":"markdown","f808379f":"markdown","2c5b9706":"markdown","ac31cfd4":"markdown","53d11c86":"markdown","0e2854dd":"markdown","8c8fde3c":"markdown","ef6e2218":"markdown","6db2cb83":"markdown"},"source":{"040fa642":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8070c89d":"\ntrain = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\npd.set_option('display.max_columns',train.shape[1])\ntrain.head()","b91a5677":"df4 = train.pivot_table(index = \"Outcome\" , values=['Pregnancies', \"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",'BMI','DiabetesPedigreeFunction'],aggfunc = np.mean)\ndf4","1bdc187f":"train.shape","f28d958d":"train.describe()","d2e607fc":"train.isnull().sum()","2c608313":"train.info()","5206b2f0":"print(train['Outcome'].value_counts())\nprint('\\n')\n\nplt.figure(figsize=(8,6))\nplt.pie(train['Outcome'].value_counts(),labels=['NOT DIABETIC','DIABETIC'],autopct='%0.1f%%',explode=[0.05,0])\nplt.show()\n","13a83b31":"plt.figure(figsize=(10,8))\nsns.countplot(y='Pregnancies',data=train,orient='h',color='skyblue',linewidth=2.5,edgecolor='black',order=train.Pregnancies.value_counts().index)\nplt.ylabel(\"Pregnancies\", fontweight = \"bold\", fontsize = 20)\nplt.xlabel(\"Counts\", fontweight = \"bold\",fontsize = 20)\nplt.title(\"Countplot\",fontweight = \"bold\",fontsize = 15)","b097b212":"train.corr()['Outcome']","42f42b07":"plt.figure(figsize=(15,8))\nsns.heatmap(train.corr(),annot=True,cmap='BrBG')","2de010bc":"sns.distplot(train['Glucose'])","c201daaf":"#train = train[train[\"Glucose\"]>50]\ntrain.shape","b0861323":"train['Glucose'] = train['Glucose'].replace(0,train['Glucose'].median())","c25cbb97":"sns.distplot(train['Glucose'])","63ecc491":"sns.distplot(np.log(train['Glucose']))","20201a5e":"train[\"Glucose\"]=np.log(train.Glucose)","27fa5879":"train.BloodPressure.nunique()","2378afaa":"sns.distplot(train['BloodPressure'])","f5b4a2f8":"sns.distplot(train[train.BloodPressure!=0]['BloodPressure'])","422d3959":"train['BloodPressure'].median()","1574d654":"train['BloodPressure'] = train['BloodPressure'].replace(0,train['BloodPressure'].median())","a37cff63":"sns.distplot(train['BloodPressure'])","afeaecbd":"sns.distplot(train[train.SkinThickness!=0]['SkinThickness'])","2e5c6655":"train['SkinThickness'].value_counts()","17689d36":"sns.distplot(train['SkinThickness'])","9a4616f9":"train['SkinThickness'] = train['SkinThickness'].replace([0,99,7,8],32)\n#sns.distplot(train['SkinThickness'])","4827dceb":"sns.distplot(train['SkinThickness'])","7e69703d":"#train=train.drop('SkinThickness',axis=1)","e28312f0":"train.corr()['Outcome']","87170dff":"plt.figure(figsize=(15,8))\nsns.heatmap(train.corr(),annot=True)","5cd584cd":"sns.distplot((train.Insulin))","f34b2220":"#train['Insulin']=train['Insulin'].replace(0,np.nan)\ntrain[\"Insulin\"].quantile(0.99)","9a060429":"train[train.Insulin!=0].shape","8443f765":"train[train.Insulin!=0]['Insulin'].mean()","1addea9b":"train['Insulin'] = train['Insulin'].replace(0,152.85)","0f3a6e5d":"#train = train[train.Insulin < train['Insulin'].quantile(0.99)]","15472c7c":"sns.distplot((train[\"Insulin\"]))","9a3c79b0":"#sns.distplot(np.log(train[\"Insulin\"]))","484aadc4":"train['Insulin'].isnull().sum()","0593b9bd":"train.corr()['Insulin']","d12dfc36":"#j","48bb5f54":"train.groupby(by ='Glucose')['Insulin'].median()","5114b6dc":"#gg = train.groupby(by ='Glucose')['Insulin'].median()","49426db8":"'''\ndef fill(Glucose,Insulin):\n    if pd.isnull(Insulin):\n        return Insulin == gg[Glucose]\n    else:\n        return Insulin\n'''\n    \n\n","fe1a703d":"#train['Insulin'] =train.apply(lambda x: fill(x['Glucose'], x['Insulin']),axis=1)","178a75bd":"#train['Insulin'].isnull().sum()","982ad050":"#train = train.drop('Insulin',axis=1)","06f778d8":"train.Insulin = train['Insulin'].replace(0,)","bd44d41b":"train.head()","abdb74a8":"train.BMI.value_counts()","6dcb0e7f":"sns.distplot((train.BMI))","3b7013c3":"train['BMI'] = train['BMI'].replace(0,train.BMI.mean())","31c8846f":"sns.distplot((train.BMI))","3e97307d":"sns.distplot(np.log(train.BMI))","a4e3cd66":"#train.BMI = np.log(train.BMI)","93ce9ec6":"train.DiabetesPedigreeFunction.value_counts()    ","12085ae3":"sns.distplot((train.DiabetesPedigreeFunction))","120f9240":"train[train.DiabetesPedigreeFunction>1].shape","85c9817b":"#train = train[train.DiabetesPedigreeFunction<1]","5560bce3":"sns.distplot((train.DiabetesPedigreeFunction))","6d539a2c":"sns.distplot(np.log(train.DiabetesPedigreeFunction))","2ebcad57":"train['DiabetesPedigreeFunction'] = np.log(train.DiabetesPedigreeFunction)","406ed3aa":"sns.distplot((train.Age))","fee6eda5":"train.hist(figsize=(20,20))\nplt.show()","e4291673":"train.head()","8d046ac1":"train.shape","6de496ff":"x = train.drop('Outcome',axis=1)\ny = train.Outcome","c528e761":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler().fit(x)\nx = scaler.transform(x)","d508a000":"#sns.pairplot(train ,hue='Outcome')","b700f9cc":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","ee9b8d4a":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier().fit(x_train,y_train)\npredictions = dtree.predict(x_test)","842e6c2e":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_dtr = round(accuracy_score(y_test,predictions),2)*100","0187e4c8":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(100).fit(x_train,y_train)\npredictions = rfc.predict(x_test)\n","badc1b08":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_ran = round(accuracy_score(y_test,predictions),2)*100","e00df0e4":"from sklearn.svm import SVC\nsvc= SVC().fit(x_train,y_train)\npredictions = svc.predict(x_test)","9b4a58f2":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_svm = round(accuracy_score(y_test,predictions),2)*100","b0c0baa3":"import xgboost\nclassifier= xgboost.XGBClassifier()\nclassifier.fit(x_train,y_train)\npredictions = classifier.predict(x_test)","eb7493a7":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_xgb = round(accuracy_score(y_test,predictions),2)*100","1f1dc236":"'''from sklearn.model_selection import RandomizedSearchCV,GridSearchCV\n\nn_estimators = [50,100,250,500,750,1000,1500]\nmax_depth = [2,3,5,10,15]\nbooster = ['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\nmin_child_weight =[0.5,1,2,3,4,5]\nlearning_rate = [0.05,0.1,0.15,0.20]\n\nhyperparameter_grid={\n    'n_estimators':n_estimators,\n    'max_depth':max_depth,\n    'booster':booster,\n    'min_child_weight':min_child_weight,\n    'learning_rate':learning_rate    \n}'''","35af8e95":"'''xgrf = RandomizedSearchCV(estimator=classifier,param_distributions=hyperparameter_grid,n_iter=50,cv=3,\n                          random_state=42,verbose=2)\n                          \nxgrf.fit(x_train,y_train)'''","844395f6":"#xgrf = GridSearchCV(estimator=classifier,param_grid=hyperparameter_grid,cv=3,verbose=2)\n                       \n                          \n#xgrf.fit(x_train,y_train)","10033594":"'''xgrf2 = xgrf.best_estimator_\npredictions = xgrf2.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))'''","217fbc13":"'''\nXGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.2, max_delta_step=0, max_depth=2,\n              min_child_weight=5, missing=nan, monotone_constraints='()',\n              n_estimators=50, n_jobs=8, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)\n              '''","3d589504":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression()\nlog.fit(x_train,y_train)\npredictions = log.predict(x_test)","c2f65d5e":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_log = round(accuracy_score(y_test,predictions),2)*100","4106a881":"model = LogisticRegression()\nsolvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l2']\nc_values = [100, 10, 1.0, 0.1, 0.01]\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV","d4b5355f":"grid = dict(solver=solvers,penalty=penalty,C=c_values)\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_search.fit(x_train, y_train)\n\n","bdea2e7a":"grid_search.best_estimator_","f87af371":"best_grid = grid_search.best_estimator_","5682cfc0":"predictions = best_grid.predict(x_test)","162524d4":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))","e1d0f594":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(29)\nknn.fit(x_train,y_train)\npredictions = knn.predict(x_test)","ae27b3fe":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n \")\nprint(classification_report(y_test,predictions))\n","ff47312e":"model_KNN = KNeighborsClassifier()\n\nn_neighbors = range(1,30)\nweights = ['uniform', 'distance']\nmetric = ['euclidean', 'manhattan', 'minkowski']\n# define grid search\ngrid = dict(n_neighbors=n_neighbors,weights=weights,metric=metric)\n","424b30c5":"cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\ngrid_search = GridSearchCV(estimator=model_KNN, param_grid=grid, n_jobs=-1, cv=cv, scoring='accuracy',error_score=0)\ngrid_search.fit(x_train, y_train)\n\n","3e2a865d":"best_grid = grid_search.best_estimator_\npredictions = best_grid.predict(x_test)","82470a65":"from sklearn.metrics import classification_report,confusion_matrix\nprint(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))\nacc_knn=round(accuracy_score(y_test,predictions),4)*100","be72df52":"matrix = pd.DataFrame({\n    'MODELS' : ['Decision tree' ,'Random Forest','SVM','Xgboost','Logistic Regression','KNN'],\n    'ACCURACY' : [acc_dtr,acc_ran,acc_svm,acc_xgb,acc_log,acc_knn]\n})","ea990873":"matrix_new=matrix.sort_values(by='ACCURACY',ascending=False)\nmatrix_new","b05b336b":"plt.figure(figsize=(14,8))\nsns.barplot(y=matrix_new['ACCURACY'],x= matrix_new['MODELS'])","51f92b76":"plt.figure(figsize=(10,6))\nsns.pointplot(y=matrix_new['ACCURACY'],x= matrix_new['MODELS'],linestyles='--',markers='o', markerfacecolor='black')\nplt.show()\n","77ffb8f3":"train.head()","6548f0ff":"sns.scatterplot(train['SkinThickness'],train[\"BMI\"],hue=train['Outcome'])\n","86e886c3":"# Xgboost","c3bd7d6f":"# KNN","5c72b862":"# 2.Random Forest","85a32d23":"# decision Tree","f8ec636f":"# SkinThickness","d3d1f735":"### Log transformation can work","954e194d":"# Age","f808379f":"# Glucose","2c5b9706":"# Logistic regression","ac31cfd4":"# Insulin","53d11c86":"# BMI","0e2854dd":"# results","8c8fde3c":"# BloodPressure","ef6e2218":"# DiabetesPedigreefunc","6db2cb83":"# SVM"}}