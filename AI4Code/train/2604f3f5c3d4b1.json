{"cell_type":{"d9689d37":"code","47155d72":"code","63c8c76c":"code","36f620b0":"code","b7783e7c":"code","137c6450":"code","9f538d62":"code","bd572080":"code","a993890d":"code","94a43e4c":"code","fdba75b8":"code","5fa565bc":"code","af3f8d3c":"code","da56600e":"code","9b04afe3":"code","e3f71786":"code","c630aa61":"code","134a1342":"code","cad1d402":"code","de815ad6":"code","e8a767b3":"code","686c398e":"code","7e4f9ff9":"code","5b963962":"code","06340e1d":"code","4c0712b0":"code","efa1a929":"code","33071ab7":"code","8923601c":"code","d861d2a7":"code","4674154c":"markdown","82a15a50":"markdown","11badf43":"markdown","4b823701":"markdown","443f7aa0":"markdown","b40da914":"markdown","c2446ca5":"markdown","7fe41482":"markdown","9fbdf45a":"markdown","c877f43d":"markdown","6096212d":"markdown","d4ebaaaa":"markdown"},"source":{"d9689d37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47155d72":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.ensemble import ExtraTreesRegressor\nimport matplotlib.pyplot as plt","63c8c76c":"data =pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ndata.shape","36f620b0":"data.head()","b7783e7c":"data.isnull().sum()","137c6450":"data.describe()","9f538d62":"data.columns","bd572080":"print(data.Fuel_Type.value_counts(),\"\\n\")\nprint(data.Seller_Type.value_counts(),\"\\n\")\nprint(data.Transmission.value_counts())","a993890d":"sns.barplot(data['Fuel_Type'],data['Selling_Price'],data=data,palette='summer')\n","94a43e4c":"sns.barplot(data['Seller_Type'],data['Selling_Price'],data=data,palette='twilight')","fdba75b8":"sns.barplot(data['Transmission'],data['Selling_Price'],data=data,palette='spring')","5fa565bc":"data=data.iloc[:,1:]\ndata.head()","af3f8d3c":"data['This Year'] = 2020\ndata['no_year']=data['This Year']- data['Year']\ndata.drop(['Year'],axis=1,inplace=True)\ndata.drop(['This Year'],axis=1,inplace=True)","da56600e":"data.head()","9b04afe3":"plt.figure(figsize=(10,5))\nsns.barplot('no_year','Selling_Price',data=data)","e3f71786":"sns.heatmap(data.corr(),annot=True,cmap='summer')","c630aa61":"data=pd.get_dummies(data,drop_first=True)","134a1342":"data.head()","cad1d402":"sns.pairplot(data,diag_kind=\"kde\", diag_kws=dict(shade=True, bw=.05, vertical=False))\nplt.show()","de815ad6":"X=data.iloc[:,1:]\ny=data.iloc[:,0]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(\"x train: \",X_train.shape)\nprint(\"x test: \",X_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","e8a767b3":"model = ExtraTreesRegressor()\nmodel.fit(X,y)\nprint(model.feature_importances_)","686c398e":"feat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.plot(kind='barh')\nplt.show()","7e4f9ff9":"#Randomized Search CV\n\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\nmin_samples_split = [2, 5, 10, 15, 100]\nmin_samples_leaf = [1, 2, 5, 10]\n\nr_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(r_grid)","5b963962":"regressor=RandomForestRegressor()\n\nrf_random = RandomizedSearchCV(estimator = regressor, param_distributions = r_grid,scoring='neg_mean_squared_error', \n                               n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)\n\nrf_random.fit(X_train,y_train)","06340e1d":"predictions=rf_random.predict(X_test)","4c0712b0":"print('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","efa1a929":"fig = plt.figure()\nsns.distplot((y_test - predictions), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)               \nplt.xlabel('Errors', fontsize = 18)  ","33071ab7":"fig = plt.figure()\nplt.scatter(y_test,predictions)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16) ","8923601c":"df = pd.DataFrame({'Actual':y_test,\"Predicted\":predictions})\ndf.head()","d861d2a7":"from sklearn.metrics import r2_score\nR2 = r2_score(y_test,predictions)\nR2","4674154c":"# Read the csv file","82a15a50":"# Exploring the Data\n","11badf43":"# Model Optimization","4b823701":"# Splitting to train and test sets","443f7aa0":"Performing One Hot Encoding on Categorical Variables","b40da914":"Checking for null values","c2446ca5":"Obtaining the important features","7fe41482":"# Importing Libraries","9fbdf45a":"# Random Forest Model","c877f43d":"Removing Car name as it does not play a necessary role in Prediction.","6096212d":"# Results","d4ebaaaa":"Finding the age of the cars since they were sold as car depreciation based on this feature as well."}}