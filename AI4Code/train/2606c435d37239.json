{"cell_type":{"e78d6e9b":"code","98acd8d7":"code","7eb19ab4":"code","87ace5c1":"code","c0e8d9d7":"code","d6cfe29f":"code","fb583a41":"code","b7cb761e":"code","84f96a8c":"code","ad2cb476":"code","8ff2c4ee":"code","3fefb7ba":"code","ca9b5d0c":"code","bda44028":"code","d07cbb1e":"code","e8d4d5a9":"code","4114ee59":"code","29a0dcad":"code","9de4962b":"code","a860480c":"code","74491120":"code","e63bba1b":"code","aed979fe":"code","2ff445e3":"code","973cf37e":"code","4ba5d174":"code","aa8c65d0":"code","afe39f92":"markdown","e22c18c9":"markdown","e8b6e04a":"markdown","4914c2cf":"markdown","a7f6abbe":"markdown","83c53b20":"markdown","1e613f26":"markdown","837bd3fe":"markdown","e1b9e050":"markdown","29c2b846":"markdown","667d4050":"markdown","8444f43f":"markdown","99d39907":"markdown","c8a2b126":"markdown","8c6028c2":"markdown","9fff95f5":"markdown","fae1d04b":"markdown","2083b4eb":"markdown","27b72e07":"markdown","24c5b1fe":"markdown","cbfb4e1b":"markdown","1f65ee82":"markdown","e6ee2485":"markdown","34371641":"markdown","019a9fa9":"markdown","ad83e0a0":"markdown","44b5bcdd":"markdown","3398efc2":"markdown","047dc276":"markdown","4706ac83":"markdown","534625db":"markdown","0e0f2422":"markdown","a3182631":"markdown","cdabc530":"markdown","97d6d01b":"markdown","66a4b8e6":"markdown","f58978c7":"markdown","7bca0ed7":"markdown","3a67eb0e":"markdown","3dbabedb":"markdown","50a5f0a0":"markdown","c8a83489":"markdown","301d4b22":"markdown","2fe10bd2":"markdown","c4d92a3a":"markdown","017b539f":"markdown","b63921bf":"markdown","36cf46fc":"markdown","c1159215":"markdown","66e6a911":"markdown","78beca80":"markdown","39a554fb":"markdown","7246db6c":"markdown","e044dd13":"markdown","0c3730d4":"markdown"},"source":{"e78d6e9b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pandas_profiling\n\nimport plotly\n# plotly standard imports\nimport plotly.graph_objs as go\nimport plotly.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks as cf\n\n# Options for pandas\n#pd.options.display.max_columns = 30\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom plotly.offline import iplot, init_notebook_mode, plot\ncf.go_offline()\n\ninit_notebook_mode(connected=True)\n\n# Set global theme\ncf.set_config_file(world_readable=True, theme='pearl')\n\nimport warnings  \nwarnings.filterwarnings('ignore')\nnp.seterr(divide='ignore', invalid='ignore')","98acd8d7":"df = pd.read_csv('..\/input\/us-consumer-finance-complaints\/consumer_complaints.csv',low_memory=False)\ndf_copy = df.copy() # Save a copy for later","7eb19ab4":"df.head(10)","87ace5c1":"df.sample(5,random_state=89)","c0e8d9d7":"df.tail()","d6cfe29f":"df.columns = df.columns.str.upper()\ndf.head(2)","fb583a41":"df.isnull().mean().round(4)*100","b7cb761e":"# code chunk that I saw in Gabriel Preda kernel\n# Reference write kernel here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\ndef missing_values(data):\n    total = data.isnull().sum().sort_values(ascending = False) # getting the sum of null values and ordering\n    percent = (data.isnull().sum() \/ data.isnull().count() * 100 ).sort_values(ascending = False) #getting the percent and order of null\n    df = pd.concat([total, percent], axis=1, keys=['Total', 'Percent']) # Concatenating the total and percent\n    print(\"Total columns at least one Values: \")\n    print (df[~(df['Total'] == 0)]) # Returning values of nulls different of 0\n    \n    #print(\"\\n Total of Sales % of Total: \", round((df[df['totals.transactionRevenue'] != np.nan]['totals.transactionRevenue'].count() \/ len(df_train['totals.transactionRevenue']) * 100),4))\n    \n    return \nmissing_values(df)","84f96a8c":"# Function that takes the data type of a single column and converts it into easier to understand language\ndef get_var_category(series):\n    unique_count = series.nunique(dropna=False)\n    total_count = len(series)\n    if pd.api.types.is_numeric_dtype(series):\n        return 'Numerical'\n    elif pd.api.types.is_datetime64_dtype(series):\n        return 'Date'\n    elif unique_count==total_count:\n        return 'Text (Unique)'\n    else:\n        return 'Categorical'\n\ndef print_categories(df):\n    for column_name in df.columns:\n        print(column_name, \": \", get_var_category(df[column_name]))\nprint_categories(df)","ad2cb476":"df.memory_usage(deep=True).sum()\n#df.info(memory_usage=True)","8ff2c4ee":"df['ISSUE'] = df.ISSUE.astype('category')\ndf['DATE_RECEIVED'] = df.DATE_RECEIVED.astype('category')\ndf['PRODUCT'] = df.PRODUCT.astype('category')\ndf['SUB_ISSUE'] = df.SUB_ISSUE.astype('category')\ndf['CONSUMER_COMPLAINT_NARRATIVE'] = df.CONSUMER_COMPLAINT_NARRATIVE.astype('category')\ndf['COMPANY_PUBLIC_RESPONSE'] = df.COMPANY_PUBLIC_RESPONSE.astype('category')\ndf['COMPANY'] = df.COMPANY.astype('category')\ndf['CONSUMER_CONSENT_PROVIDED'] = df.CONSUMER_CONSENT_PROVIDED.astype('category')\ndf['COMPANY_RESPONSE_TO_CONSUMER'] = df.COMPANY_RESPONSE_TO_CONSUMER.astype('category')\ndf['SUBMITTED_VIA'] = df.SUBMITTED_VIA.astype('category')","3fefb7ba":"df.memory_usage(deep=True).sum()\n#df.info(memory_usage=True)","ca9b5d0c":"#Witness the magic\npandas_profiling.ProfileReport(df)","bda44028":"#df.set_index(['ISSUE','PRODUCT','SUB_ISSUE','COMPANY','SUBMITTED_VIA'],inplace=True)\ndf[['ISSUE','DATE_RECEIVED','PRODUCT','SUB_ISSUE','CONSUMER_COMPLAINT_NARRATIVE',\n    'COMPANY','COMPANY_PUBLIC_RESPONSE','CONSUMER_CONSENT_PROVIDED','COMPANY_RESPONSE_TO_CONSUMER','SUBMITTED_VIA']].describe().transpose()","d07cbb1e":"import seaborn as sns; sns.set(style='white')\ndf['ISSUE'].str.strip(\"'\").value_counts()[0:10].iplot(kind='bar',title='Top 10 issues',fontsize=14,color='#7070FF')","e8d4d5a9":"df['SUB_ISSUE'].str.strip(\"'\").value_counts()[0:10].iplot(kind='bar',\n                                                          title='Top 10 Sub Issues',fontsize=14,color='#9370DB')","4114ee59":"from wordcloud import WordCloud, STOPWORDS\n\n%matplotlib inline\ntext = df['PRODUCT'].values\nwordcloud = WordCloud(\n    width = 3000,\n    height = 2000,\n    background_color = '#F0F0F0',\n    stopwords = STOPWORDS).generate(str(text))\n\nfig = plt.figure(\n    figsize = (14, 10),\n    facecolor = '#F0F0F0',\n    edgecolor = '#F0F0F0')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.tight_layout(pad=0)","29a0dcad":"comp_dist = df['COMPANY'].str.strip(\"'\").value_counts()[0:10]\nfig = {\n  \"data\": [\n    {\n      \"values\": comp_dist.values,\n      \"labels\": comp_dist.index\n      ,\n      \"domain\": {\"column\": 0},\n      \"name\": \"Bank Complaints\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    ],\n  \"layout\": {\n        \"title\":\"Top 10 Banks receiving most complaints\",\n        \"grid\": {\"rows\": 1, \"columns\": 1},\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"BANKS\",\n                \"x\": 0.5,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\niplot(fig)","9de4962b":"pd.crosstab(df['TIMELY_RESPONSE'],df['SUBMITTED_VIA']).sort_index().iplot(kind='bar',barmode='stack')","a860480c":"states = df['STATE'].value_counts()\n\nscl = [\n    [0.0, 'rgb(242,240,247)'],\n    [0.2, 'rgb(218,218,235)'],\n    [0.4, 'rgb(188,189,220)'],\n    [0.6, 'rgb(158,154,200)'],\n    [0.8, 'rgb(117,107,177)'],\n    [1.0, 'rgb(84,39,143)']\n]\n\ndata = [go.Choropleth(\n    colorscale = scl,\n    autocolorscale = False,\n    locations = states.index,\n    z = states.values,\n    locationmode = 'USA-states',\n    text = states.index,\n    marker = go.choropleth.Marker(\n        line = go.choropleth.marker.Line(\n            color = 'rgb(255,255,255)',\n            width = 2\n        )),\n    colorbar = go.choropleth.ColorBar(\n        title = \"Complaints\")\n)]\n\nlayout = go.Layout(\n    title = go.layout.Title(\n        text = 'Complaints by State<br>(Hover for breakdown)'\n    ),\n    geo = go.layout.Geo(\n        scope = 'usa',\n        projection = go.layout.geo.Projection(type = 'albers usa'),\n        showlakes = True,\n        lakecolor = 'rgb(100,149,237)'),\n)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","74491120":"# library of datetime\nfrom datetime import datetime","e63bba1b":"df[\"DATE\"] = pd.to_datetime(df[\"DATE_RECEIVED\"]) # seting the column as pandas datetime\ndf[\"YEAR\"] = df['DATE'].dt.year # extracting year\ndf[\"MONTH\"] = df[\"DATE\"].dt.month # extracting month\ndf[\"WEEKDAY_NAME\"] = df[\"DATE\"].dt.weekday_name # extracting name of the weekday\ndf[\"YEAR_MONTH\"] = df.YEAR.astype(str).str.cat(df.MONTH.astype(str), sep='-')","aed979fe":"df[\"YEAR_MONTH\"].value_counts().iplot(kind='bar',color='#800000',title='Number of Complaints per Month')","2ff445e3":"df[\"WEEKDAY_NAME\"].value_counts().iplot(kind='barh',title='Number of Complaints per Weekday',color='cornflowerblue')","973cf37e":"prod_dist = df.groupby(['COMPANY_RESPONSE_TO_CONSUMER']).size()\ntrace = go.Pie(labels=prod_dist.index, values=prod_dist,title='Company Response to the Customer')\niplot([trace])","4ba5d174":"test = pd.crosstab(df['TIMELY_RESPONSE'],df['CONSUMER_DISPUTED?'])#.apply(lambda x: x\/x.sum() * 100).astype(int)\ncm = sns.light_palette(\"blue\", as_cmap=True)\n\ntest.style.background_gradient(cmap=cm)","aa8c65d0":"pd.crosstab(df['TIMELY_RESPONSE'],df['CONSUMER_DISPUTED?']).iplot(kind='bar',title='Timely Response vs Consumer Disputed')","afe39f92":"We find that...","e22c18c9":"Have a quick look at the data:","e8b6e04a":"We find that the **Bank of America** received the most complaints, followed by **Wells Fargo & Company**, with **JPMorgan Chase & Co.** coming in third.","4914c2cf":"### Which state received the largest number of complaints?","a7f6abbe":"The objective of this analysis is:\n* to study consumer complaints as pertaining to the financial products of various companies.\n* identify the most prevalent issues\n* the top companies receiving most of the complaints\n* the American state receiving the largest number of complaints\n* the period (month and weekday) in which most complaints were received\n* the most common response received from companies\n* relationship between whether consumers disputed and timely response\n\nLet's do this.","83c53b20":"We find that, there has been a **steady increase in the number of complaints** since January 2012, with **most complaints** being **received around the middle of the week**.","1e613f26":"### Missing values","837bd3fe":"As we expected, it's pretty significant...with the **ISSUE** attribute taking up the most space. To reduce the memory being used up, we store the strings in the dataframe as integers :)","e1b9e050":"## Summary Statistics","29c2b846":"### Which 10 companies are receiving the most complaints?","667d4050":"We further find that, most complaints were **Closed with explanation**. With about **7%** being closed with **monetary relief**.","8444f43f":"Notice, the overall reduction in the amount of memory being used up (~ halfed) :). I note however, that you should ideally use **astype('category')** on obejct columns that only have a few different values and not a ton of different values (case here).","99d39907":"<h1><center> US Consumer Finance Complaints <\/center><\/h1>","c8a2b126":"It is found that, complaints submitted via **Web** got a faster response.","8c6028c2":"# Single Variable Explorations","9fff95f5":"Most customers complained about their **Account Status** being incorrect, being incorrectly assigned **debt**, and **incorrect information**.","fae1d04b":"![](https:\/\/blog.blogness.net\/wp-content\/uploads\/2015\/08\/mob.jpg)","2083b4eb":"In this section, we examine one variable at a time, find out what each variable means, look at distribution of values and provide appropriate summary statistics.","27b72e07":"A **better understanding of the major issues** among customers allows the company to **tackle those issues** and **increase retention and loyalty** among the customers by providing easy and efficient services and\/or products.","24c5b1fe":"A thorough analysis of the complaints being received by a company, places that company at a better position when it comes to monitoring and\/or characterizing the overall opinion of customers towards their products or services. Furthermore, such an analysis brings potential inefficiencies to light, which only the customers are aware of.","cbfb4e1b":"## Business Problem","1f65ee82":"# Introduction","e6ee2485":"Each week the American **Consumer Financial Protection Bureau (CFPB)** sends thousands of consumers\u2019 complaints about financial products and services to companies for response. Those complaints are published here [CFPB](https:\/\/www.consumerfinance.gov\/complaint\/) after the company responds or after 15 days. By adding their voice, consumers help improve the financial marketplace get their voices heard.","34371641":"## Objective","019a9fa9":"## Business Benefit","ad83e0a0":"### What are the top 10 issues and sub issues?","44b5bcdd":"In this section, we shall gain some intuition into the data by looking at the distributions of key features.\n\nSince we have seen earlier that our data mostly contains categorical features, this implies that this analysis will mostly involve looking at frequencies of the various text.","3398efc2":"To make sure that all the records are imported, we have a look at 5 random observations:","047dc276":"# Imports and Cleaning Data","4706ac83":"### What is the most common response received from companies?","534625db":"* **Date received**: The date the CFPB received the complaint. For example, \u201c05\/25\/2013.\u201d\n* **Product**: The type of product the consumer identified in the complaint. For example, \u201cChecking or savings account\u201d or \u201cStudent loan.\u201d\n* **Sub-product**: The type of sub-product the consumer identified in the complaint. For example, \u201cChecking account\u201d or \u201cPrivate student loan.\u201d\n* **Issue**: The issue the consumer identified in the complaint. For example, \u201cManaging an account\u201d or \u201cStruggling to repay your loan.\u201d\n* **Sub-issue**: The sub-issue the consumer identified in the complaint. For example, \u201cDeposits and withdrawals\u201d or \u201cProblem lowering your monthly payments.\u201d\n* **Consumer complaint narrative**: Consumer complaint narrative is the consumer-submitted description of \u201cwhat happened\u201d from the complaint. Consumers must opt-in to share their narrative. We will not publish the narrative unless the consumer consents, and consumers can opt-out at any time. The CFPB takes reasonable steps to scrub personal information from each complaint that could be used to identify the consumer.\n* **Company public response**: The company\u2019s optional, public-facing response to a consumer\u2019s complaint. Companies can choose to select a response from a pre-set list of options that will be posted on the public database. For example, \u201cCompany believes complaint is the result of an isolated error.\u201d\n* **Company**: The complaint is about this company. For example, \u201cABC Bank.\u201d\n* **State**: The state of the mailing address provided by the consumer.\n* **ZIP Code**: The mailing ZIP code provided by the consumer. \n* **Consumer consent provided?**: Identifies whether the consumer opted in to publish their complaint narrative. We do not publish the narrative unless the consumer consents, and consumers can opt-out at any time.\n* **Submitted via**: How the complaint was submitted to the CFPB. For example, \u201cWeb\u201d or \u201cPhone.\u201d\n* **Date sent to company**: The date the CFPB sent the complaint to the company.\n* **Company response to consumer**: This is how the company responded. For example, \u201cClosed with explanation.\u201d\n* **Timely response?**: Whether the company gave a timely response. For example, \u201cYes\u201d or \u201cNo.\u201d\n* **Consumer disputed?**: Whether the consumer disputed the company\u2019s response.\n* **Complaint ID**: The unique identification number for a complaint.\n\nCredit: [CFPB](https:\/\/www.consumerfinance.gov\/complaint\/data-use\/#reports)","0e0f2422":"Since, I am pedantic, the small letter column headings don't quite work with me and thus I make them upper case...haha (completely unnecessary step this):","a3182631":"Fields Include:","cdabc530":"## Distributions","97d6d01b":"We find that, most complaints received by the **CFPB** are on **Loan modification, collection, and foreclosure**, followed by complaints on **Incorrect information on credit report**.","66a4b8e6":"We find that, **most of the features are categorical**.","f58978c7":"Most complaints were on **mortgage**, **Credit**, and **Debt**","7bca0ed7":"Object (ussually meaning a string is being stored) columns in a pandas dataframe can take up quite a lot of space. To see how much space the current object columns are taking up, we use:","3a67eb0e":"## Consumers that disputed the company response and those that did not?","3dbabedb":"The latter makes the process of getting a quick and dirty understanding of your data much faster :)","50a5f0a0":"![](https:\/\/technofaq.org\/wp-content\/uploads\/2018\/02\/customer_loyalty.gif)","c8a83489":"# Context","301d4b22":"# Conclusion","2fe10bd2":"Construction ahead....as I am still learning about text mining. In the next update, I shall dig into the **CONSUMER_COMPLAINT_NARRATIVE** field, which I have not touched yet due to the large amount of text in the field, so stay tuned!\n\nAgain, I would like to drive the point home that most businesses want you as a data scientist to show them the money and not the data. Thus, the money in this case, would be improving business efficiency across all the products and services, thus driving down costs arising from handling user complaints and providing great services to the customers accross all products and thus increasing customer loyalty and retention.\n\nPretty sure, there are loads more business benefits in such an analysis...do let me know if you think of any :)","c4d92a3a":"### In which month did most complaints occur and on which day of the week are most complaints received?","017b539f":"So we see there are about five fields with a high number of missing values. Noting that the majority of fields are populated.\n\nNext we ask, **what the data types of the various features are:**","b63921bf":"It is found that, most consumers that received a timely response did not dispute the companies response.","36cf46fc":"### Which products give rise to the highest number of complaints?","c1159215":"In this section, we extract the date features from the **DATE_RECEIVED** field. To achieve this, we import the datetime library:","66e6a911":"### What was the most common medium via which complaints were submitted?","78beca80":"A really cool package I recently came accross is the **pandas_profiling**, which profiles tabular data in a pandas dataframe. This literally means it gives us all the stuff we've done above to understand the structure of our data and much more in one line of code. For a discussion on it see [Towards Data Science](https:\/\/towardsdatascience.com\/speed-up-your-exploratory-data-analysis-with-pandas-profiling-88b33dc53625).","39a554fb":"## Performance issues","7246db6c":"## Import Libraries","e044dd13":"It is shown, that the **state of California (CA)**, received the **highest number of complaints**. Would be really interesting to find out the reason for this...","0c3730d4":"Finally we look at the last 5 observations"}}