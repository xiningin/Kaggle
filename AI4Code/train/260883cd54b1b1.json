{"cell_type":{"587f29cc":"code","7a887535":"code","82ee2fca":"code","62854093":"code","ff48ac89":"code","3a89422f":"code","1d150917":"code","78bbeeee":"code","0704a6a5":"code","59d8adfd":"code","8e302b51":"code","c6b234ae":"code","c731f7d2":"markdown","e9502d41":"markdown","50c6f18e":"markdown","c2c551a5":"markdown"},"source":{"587f29cc":"import numpy as np \nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7a887535":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","82ee2fca":"# Cleaning the data - making all the words lower case\ndef cleanData(x):\n    return str.lower(x.replace(' ', ''))","62854093":"# Creating a \"soup\" or a \"bag of words\" for all rows.\ndef create_soup(x):\n    return x['title'] + ' ' + x['director'] + ' ' + x['cast'] + ' ' + x['listed_in'] + ' ' + x['description']\n","ff48ac89":"def getRecommendations(movie_title):\n    try:\n        movie_title = movie_title.replace(' ', '').lower()\n        ind = indices[movie_title]\n        # Get the pairwsie similarity scores of all movies with that movie\n        simScore = list(enumerate(cosine_sim[ind]))\n\n        # Sort the movies based on the similarity scores\n        simScore = sorted(simScore, key=lambda x: x[1], reverse=True)\n\n        # Get the scores of the 10 most similar movies\n        simScore = simScore[1:11]\n\n        # Get the movie indices\n        index = [s[0] for s in simScore]\n        return netflixData['title'].iloc[index]\n    except:\n        print('Movie not found')","3a89422f":"netflixData = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\n# Filling null values with empty string.\nfilledna = netflixData.fillna('')\nnetflixData.head()","1d150917":"# Identifying features on which the model is to be filtered.\nfeatures = ['title', 'director', 'cast', 'listed_in', 'description']\nfilledna = filledna[features]\nfor feature in features:\n    filledna[feature] = filledna[feature].apply(cleanData)\nfilledna['soup'] = filledna.apply(create_soup, axis=1)","78bbeeee":"# Creating a count vectorizer\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filledna['soup'])","0704a6a5":"# Compute the cosine similarity matrix\ncosine_sim = cosine_similarity(count_matrix, count_matrix)\nfilledna = filledna.reset_index()\nindices = pd.Series(filledna.index, index=filledna['title'])","59d8adfd":"title = \"Naruto\"\ngetRecommendations(title)","8e302b51":"title = \"Resident Evil: Afterlife\"\ngetRecommendations(title)","c6b234ae":"title = \"Stranger Things\"\ngetRecommendations(title)","c731f7d2":"# Example Predictions ","e9502d41":"**Importing the dataset**","50c6f18e":"# CONTENT BASED FILTERING","c2c551a5":"# Recommendations function"}}