{"cell_type":{"de74ea2b":"code","4a4164a3":"code","e545bbde":"code","d7697f51":"code","89f27ef3":"code","e336e959":"code","7a2f4b25":"code","64729c37":"code","af06343a":"code","39ebd33f":"code","9b861803":"code","5bed6c0a":"code","3ff0719d":"markdown","b870acac":"markdown","d2ee4930":"markdown","967314dd":"markdown","6ff847e7":"markdown","b8bb1cd8":"markdown","ebea6578":"markdown","b627fc4b":"markdown","903996e8":"markdown"},"source":{"de74ea2b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4a4164a3":"data = pd.read_csv('\/kaggle\/input\/twitter-user-gender-classification\/gender-classifier-DFE-791531.csv',encoding = 'latin1')","e545bbde":"data = pd.concat([data.gender, data.description], axis=1)","d7697f51":"data.dropna(axis = 0,inplace = True)","89f27ef3":"data.gender = [1 if gender == \"female\" else 0 for gender in data.gender]\nimport nltk\nimport re\ndescription_list = [] # we created a list so we after these steps, we will append into this list\nfor description in data.description:\n    # Sub, change non-letter into space\n    description = re.sub(\"[^a-zA-Z]\", \" \", description)\n    # All letters must be lowercase. Because e is not equall to E\n    description = description.lower()\n    description = nltk.word_tokenize(description)\n    # We have to turn the sentence into a word list\n    lemma = nltk.WordNetLemmatizer()\n    description = [lemma.lemmatize(word) for word in description]\n    # We found the roots of each words with lemma\n    description = \" \".join(description)\n    # After all these steps,we joined the words together.\n    description_list.append(description)","e336e959":"from sklearn.feature_extraction.text import CountVectorizer\n\nmax_features = 5000\n\n# Removes unnecessary words like the,an,of,etc.\ncount_vectorizer = CountVectorizer(max_features = max_features,stop_words = \"english\")\n\nsparce_matrix = count_vectorizer.fit_transform(description_list).toarray()\n\n#print(\"Top Used {} Words: {}\".format(max_features,count_vectorizer.get_feature_names()))","7a2f4b25":"y = data.iloc[:,0].values\nx = sparce_matrix","64729c37":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state = 42)","af06343a":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)","39ebd33f":"y_pred = rf.predict(X_test)\nprint(\"Accuracy: \", accuracy_score(y_test, y_pred)*100)","9b861803":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(max_iter = 2000)\nlr.fit(X_train,y_train)","5bed6c0a":"y_pred = lr.predict(X_test)\nprint(\"Accuracy: \", accuracy_score(y_test, y_pred)*100)","3ff0719d":"# Train Test Split","b870acac":"# Drop NaN Values","d2ee4930":"# Evaluating Model Performance","967314dd":"# Random Forest","6ff847e7":"# Evaluating Model Performance","b8bb1cd8":"# Read Data","ebea6578":"# Slicing","b627fc4b":"# Logistic Regression","903996e8":"# NLP"}}