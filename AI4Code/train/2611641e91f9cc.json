{"cell_type":{"dc410d60":"code","9df8626d":"code","da13f821":"code","bae3c69f":"code","d1330df8":"code","c1f4a1fb":"code","7cb0705b":"code","8a8703e0":"code","ab64ff8c":"code","3b8a3cd6":"code","ca5535ff":"code","da096e1a":"code","bef49f10":"code","a57659e9":"code","59b72de9":"code","bf16bc40":"code","99b7bdb2":"code","2b11876b":"code","7502fb60":"code","5cb4353a":"code","69f6fc32":"code","f660efde":"code","ba7dd8a3":"code","ad0a6a79":"code","9ea74339":"code","4749eee1":"code","8440d3f5":"code","132eac28":"code","bb55fbe3":"code","1c6e8190":"code","945d4923":"code","821929d2":"code","0414663a":"code","4f6f571d":"code","ad804266":"code","4f8e7363":"code","11041661":"code","1c0c5b56":"code","f50dfe13":"code","5bb2c8e3":"code","839e7c20":"code","64544312":"code","8ad8be76":"code","5a5adecd":"code","d2d0cd38":"code","55772efa":"code","fb21603e":"code","81e8be84":"code","64eee98a":"code","bd2405f7":"code","ea6dcb4d":"code","03b45674":"code","073e777d":"code","895a84f6":"code","ad661870":"code","a82bc084":"code","a6f85255":"code","794c3e23":"markdown","983b2ec2":"markdown","512f7562":"markdown","cabf1bb3":"markdown","2b0acbcd":"markdown","33e8ff05":"markdown","7ba7f888":"markdown","752132fa":"markdown","aeb9a157":"markdown","73858868":"markdown","56403622":"markdown","fdd36300":"markdown","a7315796":"markdown","602c7e54":"markdown","416ccbe7":"markdown","31d2dc06":"markdown","9b181006":"markdown","c125f1dd":"markdown","f73ef458":"markdown","24680168":"markdown","593190ec":"markdown","0e4fb60f":"markdown","7e6254c7":"markdown","976ccb43":"markdown","c2a07954":"markdown"},"source":{"dc410d60":"!pip install dataprep","9df8626d":"!pip install plotly","da13f821":"# manipulation data\nimport pandas as pd\nimport numpy as np\n\n#visualiation data\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport matplotlib\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\n\n#default theme\nsns.set(context='notebook', style='darkgrid', palette='Spectral', font='sans-serif', font_scale=1, rc=None)\nmatplotlib.rcParams['figure.figsize'] =[8,8]\nmatplotlib.rcParams.update({'font.size': 15})\nmatplotlib.rcParams['font.family'] = 'sans-serif'\n\n# dataprep library\nfrom dataprep.eda import *\nfrom dataprep.datasets import load_dataset\nfrom dataprep.eda import create_report","bae3c69f":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV, KFold\nfrom sklearn import ensemble\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import metrics","d1330df8":"df=pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\nsub=pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv')","c1f4a1fb":"df","7cb0705b":"df.info()","8a8703e0":"df.shape","ab64ff8c":"df.dtypes.value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('data type');","3b8a3cd6":"df.describe(include='all')","ca5535ff":"missing = df.isnull().sum()\nmissing_pourcent = df.isnull().sum()\/df.shape[0]*100\n\ndic = {\n    'mising':missing,\n    'missing_pourcent %':missing_pourcent\n}\nframe=pd.DataFrame(dic)\nframe","da096e1a":"missing = test.isnull().sum()\nmissing_pourcent = test.isnull().sum()\/df.shape[0]*100\n\ndic = {\n    'mising':missing,\n    'missing_pourcent %':missing_pourcent\n}\nframe=pd.DataFrame(dic)\nframe","bef49f10":"sub","a57659e9":"df.hist(figsize=(15,15),edgecolor='black');","59b72de9":"plot(df.TargetValue)","bf16bc40":"fig = px.pie(df, values='TargetValue', names='Target')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","99b7bdb2":"fig = px.pie(df, values='TargetValue', names='Country_Region')\nfig.update_traces(textposition='inside')\nfig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')\nfig.show()","2b11876b":"plot(df.County)","7502fb60":"plt.figure(figsize=(30,9))\ncounty_plot=df.County.value_counts().head(100)\nsns.barplot(county_plot.index,county_plot)\nplt.xticks(rotation=90)\nplt.title('County count');\n","5cb4353a":"plot(df.Province_State)","69f6fc32":"plt.figure(figsize=(30,9))\nProvince_State_plot=df.Province_State.value_counts().head(100)\nsns.barplot(Province_State_plot.index,Province_State_plot)\nplt.xticks(rotation=90)\nplt.title('Province State count');","f660efde":"plot(df.Country_Region)","ba7dd8a3":"plt.figure(figsize=(30,9))\nCountry_Region_plot=df.Country_Region.value_counts().head(30)\nsns.barplot(Country_Region_plot.index,Country_Region_plot)\nplt.xticks(rotation=90)\nplt.title('Country Region count');","ad0a6a79":"confirmed=df[df['Target']=='ConfirmedCases']\nfig = px.treemap(confirmed, path=['Country_Region'], values='TargetValue',width=900, height=600)\nfig.update_traces(textposition='middle center', textfont_size=15)\nfig.update_layout(\n    title={\n        'text': 'Total Share of Worldwide COVID19 Confirmed Cases',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","9ea74339":"dead=df[df['Target']=='Fatalities']\nfig = px.treemap(dead, path=['Country_Region'], values='TargetValue',width=900,height=600)\nfig.update_traces(textposition='middle center', textfont_size=15)\nfig.update_layout(\n    title={\n        'text': 'Total Share of Worldwide COVID19 Fatalities',\n        'y':0.92,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","4749eee1":"fig = px.treemap(df, path=['Country_Region'], values='TargetValue',\n                  color='Population', hover_data=['Country_Region'],\n                  color_continuous_scale='matter', title='Current share of Worldwide COVID19 Confirmed Cases')\nfig.show()","8440d3f5":"df.Population.value_counts()","132eac28":"df.columns","bb55fbe3":"df.Target.value_counts()","1c6e8190":"df.Target.value_counts().plot.pie(explode=[0.1,0.1],autopct='%1.1f%%',shadow=True)","945d4923":"last_date = df.Date.max()\ndf_countries = df[df['Date']==last_date]\ndf_countries = df_countries.groupby('Country_Region', as_index=False)['TargetValue'].sum()\ndf_countries = df_countries.nlargest(10,'TargetValue')\ndf_trend = df.groupby(['Date','Country_Region'], as_index=False)['TargetValue'].sum()\ndf_trend = df_trend.merge(df_countries, on='Country_Region')\ndf_trend.rename(columns={'Country_Region':'Country', 'TargetValue_x':'Cases'}, inplace=True)","821929d2":"px.line(df_trend, x='Date', y='Cases', color='Country', title='COVID19 Total Cases growth for top 10 worst affected countries')","0414663a":"df = df.drop(['County','Province_State','Country_Region','Target'],axis=1)\ntest = test.drop(['County','Province_State','Country_Region','Target'],axis=1)\ndf","4f6f571d":"df.isnull().sum()","ad804266":"def create_features(df):\n    df['day'] = df['Date'].dt.day\n    df['month'] = df['Date'].dt.month\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['quarter'] = df['Date'].dt.quarter\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    return df","4f8e7363":"def train_dev_split(df, days):\n    #Last days data as dev set\n    date = df['Date'].max() - dt.timedelta(days=days)\n    return df[df['Date'] <= date], df[df['Date'] > date]","11041661":"test_date_min = test['Date'].min()\ntest_date_max = test['Date'].max()","1c0c5b56":"def avoid_data_leakage(df, date=test_date_min):\n    return df[df['Date']<date]","f50dfe13":"def to_integer(dt_time):\n    return 10000*dt_time.year + 100*dt_time.month + dt_time.day\ndf['Date']=pd.to_datetime(df['Date'])\ntest['Date']=pd.to_datetime(test['Date'])","5bb2c8e3":"test['Date']=test['Date'].dt.strftime(\"%Y%m%d\")\ndf['Date']=df['Date'].dt.strftime(\"%Y%m%d\").astype(int)","839e7c20":"\npredictors = df.drop(['TargetValue', 'Id'], axis=1)\ntarget = df[\"TargetValue\"]\nX_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size = 0.22, random_state = 0)","64544312":"model = RandomForestRegressor(n_jobs=-1)\nestimators = 100\nmodel.set_params(n_estimators=estimators)\n\nscores = []\n\npipeline = Pipeline([('scaler2' , StandardScaler()),\n                        ('RandomForestRegressor: ', model)])\npipeline.fit(X_train , y_train)\nprediction = pipeline.predict(X_test)\n\npipeline.fit(X_train, y_train)\nscores.append(pipeline.score(X_test, y_test))","8ad8be76":"plt.figure(figsize=(8,6))\nplt.plot(y_test,y_test,color='deeppink')\nplt.scatter(y_test,prediction,color='dodgerblue')\nplt.xlabel('Actual Target Value',fontsize=15)\nplt.ylabel('Predicted Target Value',fontsize=15)\nplt.title('Random Forest Regressor (R2 Score= 0.95)',fontsize=14)\nplt.show()","5a5adecd":"X_test","d2d0cd38":"# drop the ForecastId fro test data\ntest.drop(['ForecastId'],axis=1,inplace=True)\ntest.index.name = 'Id'\ntest","55772efa":"y_pred2 = pipeline.predict(X_test)\ny_pred2","fb21603e":"predictions = pipeline.predict(test)\n\npred_list = [int(x) for x in predictions]\n\noutput = pd.DataFrame({'Id': test.index, 'TargetValue': pred_list})\nprint(output)","81e8be84":"output","64eee98a":"import xgboost as xgb","bd2405f7":"xgbr= xgb.XGBRegressor(n_estimators=800, learning_rate=0.01, gamma=0, subsample=.7,\n                       colsample_bytree=.7, max_depth=10,\n                       min_child_weight=0, \n                       objective='reg:squarederror', nthread=-1, scale_pos_weight=1,\n                       seed=27, reg_alpha=0.00006, n_jobs=-1)","ea6dcb4d":"xgbr.fit(X_train,y_train)","03b45674":"prediction_xgbr=xgbr.predict(X_test)","073e777d":"print('RMSE_XGBoost Regression=', np.sqrt(metrics.mean_squared_error(y_test,prediction_xgbr)))\nprint('R2 Score_XGBoost Regression=',metrics.r2_score(y_test,prediction_xgbr))","895a84f6":"plt.figure(figsize=(8,6))\nplt.scatter(x=y_test, y=prediction_xgbr, color='dodgerblue')\nplt.plot(y_test,y_test, color='deeppink')\nplt.xlabel('Actual Target Value',fontsize=15)\nplt.ylabel('Predicted Target Value',fontsize=15)\nplt.title('XGBoost Regressor (R2 Score= 0.89)',fontsize=14)\nplt.show()","ad661870":"a=output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()\na.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05'].clip(0,10000)\na['q0.5']=a['q0.5'].clip(0,10000)\na['q0.95']=a['q0.95'].clip(0,10000)\na['Id'] =a['Id']+ 1\na","a82bc084":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.head()","a6f85255":"sub.to_csv(\"submission.csv\",index=False)","794c3e23":"## A. County","983b2ec2":"## load data","512f7562":"1. first we gonna create features\n2. then we gonna train_dev_split","cabf1bb3":"# split data ","2b0acbcd":"# RandomForestRegressor","33e8ff05":"# 2. data analysis","7ba7f888":"# 3. finding missing values","752132fa":"## Introduction\nKaggle is launching a COVID-19 forecasting challenge to help answer a subset of the National Academies of Sciences, Engineering, and Medicine\u2019s (NASEM) and the World Health Organization (WHO) questions on COVID-19. In this challenge, we will be predicting the daily number of confirmed COVID19 cases in various locations across the world, as well as the number of resulting fatalities, for future dates. In this notebook, we will use COVID19 Global Forecasting (Week 5) dataset including the train, test and submission csv files. First, we will perform data analysis to identify the factors that impact the transmission rate of COVID-19. Afterwards, we will analyze the the effect of COVID-19 in India. Afterwards, we will use XGBoost and Random Forest regressor as ensemble learning models as well as to predict the daily number of confirmed COVID19 cases as well as the number of resulting fatalities in various locations across the world.\n\n## Modeling Goal\nI decided early on to not approach this as I usually build forecasting models. Reason is we are modeling a physical phenomenon where people get infected, then infect others for some time, then either recover or die. I therefore studied compartmental models used in epidemiology, SIR and the like. These models rely on two time series: cases and recoveries\/deaths. If we have accurate values for both then we can fit these models and get reasonably accurate predictions.\n\nIssue is we don't have these series.\n\nFor cases we have a proxy, confirmed cases. This is a proxy in many ways:\n\n* It depends on the testing policy of each geography. Some test a lot, and confirmed cases are close to all cases.\n* A large fraction of sick people are asymptomatic, hence are easily missed by testing.\n* Testing does not happen when people get infected or contagious, it often happens with a delay.For all these reasons the confirmed case nubers we get is a distorted view of actual cases.\n\nFor fatalities the numbers aren't accurate either;\n\n* In some geos we only get deaths test at hospital, in other geos it includes fatalities from nursing homes.\n* We don't have recoveries data.The latter can be fixed by grabbing recovery data from other online source. This has been done by some top competitors, I wish I had done it.\n\nDespite all these caveat, I assumed that we still have some form of SIR model at play with the two series we have at hand: fatalities depend on cases detected some while ago. That led to my first model.\n\n![](https:\/\/cdn.futura-sciences.com\/buildsv6\/images\/wide1920\/2\/a\/3\/2a354825f1_50171817_variant-covid19-coronavirus-epidemie.jpg)","aeb9a157":"1. our data had (969640 Rows, 9 Columns)\n2. like we see :\n    * more then 55% our data is **object** type \n    * 33% is integer \n    * 11% float","73858868":"### C. submission","56403622":"We would drop some features Who have many Null values and not that much important.","fdd36300":"what we can see from the describtion :\n* most of Country_Region case are in US with 895440 \n* most of Province_State case are in Texas with 71400 \n* most of County cases are in Washington with 8680 \n* the most case are at the date of 2020-05-20 with 6926 \n* the moste Target are  Fatalities with 484820 ","a7315796":"## TargetValue","602c7e54":"### B. test data","416ccbe7":"# 1. import library and package","31d2dc06":"# 4. Data Preprocessing","9b181006":"# Submission","c125f1dd":"## C. Country_Region","f73ef458":"### A.train data","24680168":"we gonna cheech if we had i Null values","593190ec":"# XGBoost Regressor","0e4fb60f":"## Date","7e6254c7":"## D. Target","976ccb43":"## B. Province_State","c2a07954":"# Data Visualization"}}