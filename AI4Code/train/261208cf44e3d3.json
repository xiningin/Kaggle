{"cell_type":{"3a637921":"code","98f0f7c5":"code","f7d9bd4e":"code","41f69b12":"code","08364502":"code","9ee7240c":"code","cce98f8f":"code","5c07a8d9":"code","3e1537f8":"code","46d2973f":"code","d5539e62":"code","9c341d16":"code","e1e8d8a0":"code","7821146f":"code","c86a5f56":"code","3f3b4c19":"code","c5854633":"code","036956e1":"code","25599ec5":"code","0c584dcf":"code","2e0bf176":"code","d968a33b":"code","09f0b9cd":"code","1cd956c7":"code","a4d06c7c":"code","a56beb88":"code","a55a8229":"code","9d98224e":"code","cd0d5588":"code","b37ec866":"code","7e8c124f":"code","46b7774a":"code","ae9a22f1":"code","2e81d4b4":"code","252df627":"code","ae73da26":"code","02f0daaf":"code","f197458f":"code","136281f2":"code","35ae5c27":"code","a7ecab7a":"code","51e444dd":"code","0f48f6d2":"markdown","05d51354":"markdown","41557cd5":"markdown","18e3a4a7":"markdown","996685c4":"markdown","d2d88fae":"markdown","1116e7b3":"markdown","4439d2de":"markdown","46d13eba":"markdown","6697342d":"markdown","005fbd2b":"markdown","c4d1b7cb":"markdown","eee8fac4":"markdown","28442b4f":"markdown","19d9e823":"markdown","6712dcce":"markdown","e485cf04":"markdown","c8d2693e":"markdown","9371e87f":"markdown","c708fb73":"markdown","094f5a0b":"markdown","f39df745":"markdown","f46c5437":"markdown","33829f5a":"markdown","2c49f550":"markdown"},"source":{"3a637921":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt # plotting\nfrom math import * # sqrt() etc\n# with %matplotlib inline you turn on the immediate display.\n# %matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","98f0f7c5":"data_dictionary_loc = '..\/input\/CAB_data_dictionary.xlsx'\ndata_dic = pd.read_excel(data_dictionary_loc, dtype = object)\ndata_dic['File Content Description'] #well, how to import the correct column width? can be viewed using other programs\ndata_dic","f7d9bd4e":"data_u_pradesh = pd.read_csv('..\/input\/CAB_09_UP.csv', low_memory = False) \n#needed to specify low_memory because columns (14, 43 had mixed types)\ndata_u_pradesh.head()","41f69b12":"data = data_u_pradesh[(data_u_pradesh['age_code']=='Y')&(data_u_pradesh['age']>=18)]\nlen(data)","08364502":"data = data.replace([-1, '-1'], np.nan)","9ee7240c":"cols_under5 = ['illness_type', 'illness_duration', 'treatment_type']\ncols_under3 = ['first_breast_feeding', 'is_cur_breast_feeding', 'day_or_month_for_breast_feeding_', 'day_or_month_for_breast_feeding', 'water_month', 'ani_milk_month', 'semisolid_month_or_day', 'solid_month', 'vegetables_month_or_day']","cce98f8f":"data = data.drop(cols_under5, axis = 1)\ndata = data.drop(cols_under3, axis = 1)","5c07a8d9":"data = data.drop(['state_code', 'psu_id', 'ahs_house_unit', 'house_hold_no', 'record_code_iodine_reason', 'sl_no', 'usual_residance', 'usual_residance_reason', 'identification_code', 'v54'], axis = 1)","3e1537f8":"data = data.drop('rural_urban', axis = 1)","46d2973f":"display(np.unique(data['age_code']))\ndata = data.drop('age_code', axis = 1)","d5539e62":"plt.hist(data.age.dropna(), bins = 50)\nplt.title('Age')\nplt.show","9c341d16":"pd.value_counts(data['record_code_iodine'])","e1e8d8a0":"data = data.drop(['weight_measured', 'length_height_measured', 'length_height_code'], axis = 1)","7821146f":"data = data.rename(index=str, columns={\"weight_in_kg\": \"weight\", \"length_height_cm\": \"height\"})","c86a5f56":"plt.boxplot(data['weight'].dropna())\nplt.title('Weight with outliers')\nplt.show","3f3b4c19":"plt.boxplot(data['height'].dropna())\nplt.title('Height with outliers')\nplt.show","c5854633":"# exclude any measurements where difference from median is larger than 3 standard deviations\ndef remove_outliers(data, feature):\n    stdev = sqrt(np.var(data[feature].dropna()))\n    median = np.median(data[feature].dropna())\n    print(\"number of discarded measurements\")\n    display(len(data[[feature]].where(abs(data[feature] - median)>(3*stdev)).dropna()))\n# keep original values if difference from mean is less than 3 standard deviations. NA otherwise\n    return data[[feature]].where(abs(data[feature] - median)<(3*stdev), other = np.nan)","036956e1":"data['height'] = remove_outliers(data, 'height')","25599ec5":"print('number of discarded measurements')\ndisplay(len(data[data['weight']<20]))\ndata['weight'] = data['weight'].where(data['weight']>20, other=np.nan)","0c584dcf":"plt.boxplot(data['weight'].dropna())\nplt.title('Weight without outliers')\nplt.show","2e0bf176":"plt.boxplot(data['height'].dropna())\nplt.title('Height without outliers')\nplt.show","d968a33b":"data['bmi'] = data['weight']\/(data['height']\/100)**2","09f0b9cd":"plt.hist(data['weight'].dropna(), bins = 50)\nplt.title('Weight without outliers')\nplt.show()","1cd956c7":"plt.hist(data['height'].dropna(), bins = 50)\nplt.title('Height without outliers')\nplt.show()","a4d06c7c":"plt.hist(data['bmi'].dropna(), bins = 50)\nplt.title('BMI')\nplt.show()","a56beb88":"# distribution of measurement differences\n#plt.hist((data['bp_systolic'] - data['bp_systolic_2_reading']).dropna(), bins = 50)\n#plt.hist((data['pulse_rate'] - data['pulse_rate_2_reading']).dropna(), bins = 50)\n#plt.hist((data['bp_diastolic'] - data['bp_diastolic_2reading']).dropna(), bins = 50)","a55a8229":"# for features where two measurements were taken, exclude any where difference between measurements is larger than 3 standard deviations\ndef remove_outliers_difference(data, col1, col2):\n    stdev = sqrt((data[col1] - data[col2]).var())\n# how many measurements were excluded\n    print('number of discarded measurements')\n    display(len(data[[col1, col2]].where(abs(data[col1] - data[col2])>(3*stdev)).dropna()))\n# keep original values if difference of two measurements is less than 3 standard deviations. NA otherwise\n    return data[[col1, col2]].where(abs(data[col1] - data[col2])<(3*stdev), other = np.nan)","9d98224e":"data[['bp_systolic', 'bp_systolic_2_reading']] = remove_outliers_difference(data, 'bp_systolic', 'bp_systolic_2_reading')\ndata[['bp_diastolic', 'bp_diastolic_2reading']] = remove_outliers_difference(data, 'bp_diastolic', 'bp_diastolic_2reading')\ndata[['pulse_rate', 'pulse_rate_2_reading']] = remove_outliers_difference(data, 'pulse_rate', 'pulse_rate_2_reading')","cd0d5588":"# aggregate two reading by finding mean\ndef aggregate_readings(data, col1, col2):\n    data[col1] = data.apply(lambda row: sum([row[col1], row[col2]])\/2, axis = 1)\n    data = data.drop(col2, axis = 1)\n    return data","b37ec866":"data = aggregate_readings(data, 'bp_systolic', 'bp_systolic_2_reading')\ndata = aggregate_readings(data, 'bp_diastolic', 'bp_diastolic_2reading')\ndata = aggregate_readings(data, 'pulse_rate', 'pulse_rate_2_reading')","7e8c124f":"# retain original values where resting blood pressure lower than beating. NA otherwise \ndata[['bp_diastolic', 'bp_systolic']] = data[['bp_diastolic', 'bp_systolic']].where(data.bp_diastolic < data.bp_systolic, other = np.nan)","46b7774a":"data = data.drop(['haemoglobin_test', 'haemoglobin'], axis = 1)","ae9a22f1":"plt.hist(data.haemoglobin_level[~np.isnan(data.haemoglobin_level)], bins=50)\nplt.title('Blood haemoglobin')\nplt.show","2e81d4b4":"data = data.drop(['diabetes_test', 'fasting_blood_glucose'], axis = 1)","252df627":"plt.hist(data.fasting_blood_glucose_mg_dl[~np.isnan(data.fasting_blood_glucose_mg_dl)], bins=50)\nplt.title('Blood sugar')\nplt.show","ae73da26":"plt.boxplot(data.fasting_blood_glucose_mg_dl[~np.isnan(data.fasting_blood_glucose_mg_dl)])\nplt.title('Blood sugar')\nplt.show","02f0daaf":"data['fasting_blood_glucose_mg_dl'] = remove_outliers(data,'fasting_blood_glucose_mg_dl')","f197458f":"cols_women = ['marital_status', 'gauna_perfor_not_perfor', 'duration_pregnanacy']","136281f2":"data['marital_status'] = data['marital_status'].where(~(data['marital_status']==8.0), other = np.nan)","35ae5c27":"# input errors have to be dealt with\nplt.boxplot(data['duration_pregnanacy'].dropna())\nplt.show","a7ecab7a":"corr=data.corr()[['haemoglobin_level', 'pulse_rate', 'bp_diastolic', 'bp_systolic', 'fasting_blood_glucose_mg_dl']]\ncorr.where(abs(corr)>0.1)","51e444dd":"data_correlated = data.drop(['district_code', 'stratum', 'test_salt_iodine', 'record_code_iodine', 'date_of_birth', 'month_of_birth', 'duration_pregnanacy'], axis = 1)\ncorr = data_correlated.corr()[['haemoglobin_level', 'pulse_rate', 'bp_diastolic', 'bp_systolic', 'fasting_blood_glucose_mg_dl']]\ncorr.where(abs(corr)>0.1)","0f48f6d2":"Original data had -1 for missing values","05d51354":"## Pulse, blood pressure(heart disease)\nFrom data dictionary:\n- 'bp_systolic'\n- 'bp_systolic_2_reading'\n- 'bp_diastolic'\n- 'bp_diastolic_2reading'\n- 'pulse_rate',\n- 'pulse_rate_2_reading'","41557cd5":"Dropping feature age_code(values: Y, M, D for years, months, days), since age always recorded in years for adults","18e3a4a7":"A lot of individuals with 130, 140, 150cm height","996685c4":"From data dictionary:\n- 'rural_urban' - Rural-1; Urban-2\n- 'stratum' - 1 or 2 when 'rural_urban'=1, 0 when 'rural_urban'=2\n\ndropping feature 'rural_urban', since 'stratum' contains the same information\n\nI guess 'stratum' feature values:\n- 0 - urban\n- 1 - rural  \n- 2 - very rural?\n\nnot specified in dictionary","d2d88fae":"Dropping columns only applicable to under 5 year olds","1116e7b3":"Removing features where there's no correlation","4439d2de":"Now that outliers have been removed, aggregate remaining data by finding mean between two readings","46d13eba":"Subset of adults has 299 570 individuals","6697342d":"Body mass index: weight(kg)\/(height(m) * height(m))","005fbd2b":"## Age related\nFrom data dictionary:\n- 'age_code' - unit of recording age\n- 'age'\n- 'date_of_birth' - DD\n- 'month_of_birth' - MM\n- 'year_of_birth' - YYYY","c4d1b7cb":"## Features only applicable to women\nFrom data dictionary:\n- 'marital_status' - Never married=1,Married but Gauna not performed=2, Married and Gauna perfomed=3, Remarried=4,Widow=5, Divorced=6, Separated=7, Not stated=8\n- 'gauna_perfor_not_perfor' - Pregnant-1; Lactating-2; Non-pregnant or Non-lactating-3\n- 'duration_pregnanacy' - Duration of pregnancy\/lactation (in months)","eee8fac4":"Removing weight outliers. NA for anything under 20kg","28442b4f":"# Cleaning data","19d9e823":"## Height\/weight\nFrom data dictionary:\n- 'weight_measured' - Measured-1;  Member - not present-2, Refused-3, Other-4\n- 'weight_in_kg' - outcome\n- 'length_height_measured' - Measured-1;  Member not present-2, Refused-3, Other-4\n- 'length_height_code' - L- Length, H-Height\n- 'length_height_cm' - outcome\n\nDropping, unnecessary columns, NA in weight\/length column if measurement was not conducted","6712dcce":"# Gather Data","e485cf04":"placing NA where marital status 'not stated' ","c8d2693e":"Dropping unnecessary features\n - 'state_code'\n - 'PSU_ID' - This is a seven digit number to uniquely identify each record.\n - 'ahs_house_unit' - House Number\n - 'house_hold_no' - Household Number\n - 'record_code_iodine_reason' - Why was iodine testing refused\n - 'sl_no' - Each record of the Household has a serial no. \n - 'usual_residence' - Whether the member usually lives here\n - 'usual_residence_reason' - Reason for member not being usual resident\n - 'identification_code' - Each member of a PSU is assigned a unique number\n - 'v54' ?","9371e87f":"## Haemoglobin(anemia)\nFrom data dictionary:\n- 'haemoglobin_test' - Consent for Haemoglobin test (Yes-1; No-2)\n- 'haemoglobin'- Status of Haemoglobin Test (Measured-1; Member not present-2; Refused-3, Other-4)\n- 'haemoglobin_level' - Outcome of Haemoglobin Level (Hb) Test (in percentage gms)  ","c708fb73":"## Summary\nFrom 53 initial features to 21\n\nTODO:\n- A lot of individuals with 130, 140, 150cm height value??","094f5a0b":"Data cleaning steps for height\/weight related data: \n- Discarded any height measurements where difference from median was further than 3 standard deviations. Looking at distribution of height\/weight as normally distributed.\n- Discarded any weight measurements under 20kg\n- Calculated BMI\n\nDiscarded ~800 values for height, ~460 values for weight. Out of ~200 000","f39df745":"## Blood sugar(diabetes)\nFrom data dictionary:\n- 'diabetes_test' - consent for testing\n- 'fasting_blood_glucose' - Measured-1; Member not present-2; Refused-3; Other-4\n- 'fasting_blood_glucose_mg_dl' - outcome of test","f46c5437":"Systolic - beating, diastolic - resting blood pressure. Likely input\/measurement error where systolic < diastolic","33829f5a":"Data cleaning steps for heart disease related data: \n- Discarded any where difference between two measurements was further from mean than 3 standard deviations. Looking at distribution of measurement differences as normally distributed.\n- Aggregated two measurements by finding mean\n- Discarded any where diastolic pressure was higher than systolic\n\nLost less than 5% of values for each feature","2c49f550":"## Iodine\nFrom data dictionary:\n- 'test_salt_iodine' - Salt used by the Household has been tested for Iodine content[Recorded as Parts Per Million(PPM)]\n- 'record_code_iodine' - No iodine \u2013 1; Less than 15 PPM \u2013 2; More than or equal to 15 PPM \u2013 3; No salt in Household \u2013 4; Salt not tested  \u2013 5"}}