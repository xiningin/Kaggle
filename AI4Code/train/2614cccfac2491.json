{"cell_type":{"367a92d1":"code","6d5a23cc":"code","ec4b9e73":"code","53f3abb0":"code","748acb4c":"code","6a71266a":"code","1322fc4d":"code","a5e72581":"code","6045af13":"code","9e112c85":"code","7144a497":"code","226c66a8":"code","469a0a35":"code","67bf6259":"code","3d77b3c2":"code","fa4c08f9":"code","a161c312":"code","b015e423":"code","f75983d0":"code","d9187c48":"markdown","8fde7436":"markdown","1efc28b5":"markdown","b0470899":"markdown","79b73e97":"markdown","4d1f3fa7":"markdown","6d55a106":"markdown","88bf7886":"markdown"},"source":{"367a92d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Visualization\nimport seaborn as sns #Visualization\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\npd.set_option('display.max_columns', 500)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6d5a23cc":"df = pd.read_csv('..\/input\/SolarEnergy\/SolarPrediction.csv')\ndf.head()","ec4b9e73":"df.shape","53f3abb0":"df.info()","748acb4c":"df.describe()","6a71266a":"plt.figure(figsize=(12,4))\nsns.heatmap(df.isnull(),cbar=False,cmap='viridis',yticklabels=False)\nplt.title('Missing value in the dataset');","1322fc4d":"#Correlation Plot\n\ncorr = df.corr()\nsns.heatmap(corr)","a5e72581":"df.columns","6045af13":"df1=df[['UNIXTime', 'Data', 'Time', 'Radiation', 'Temperature', 'Pressure',\n       'Humidity', 'WindDirection(Degrees)', 'Speed', 'TimeSunRise',\n       'TimeSunSet']]\nh = df1.hist(bins=25,figsize=(16,16),xlabelsize='10',ylabelsize='10',xrot=-15)\nsns.despine(left=True, bottom=True)\n[x.title.set_size(12) for x in h.ravel()];\n[x.yaxis.tick_left() for x in h.ravel()];","9e112c85":"from sklearn.model_selection import train_test_split\nX = df[['Temperature', 'Pressure','Humidity', 'WindDirection(Degrees)', 'Speed']] #Independent variable \ny = df['Radiation'] #dependent variable ","7144a497":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","226c66a8":"from sklearn.linear_model import LinearRegression \n\nlm = LinearRegression() \nlm.fit(X_train,y_train) ","469a0a35":"print(lm.intercept_)","67bf6259":"predictions = lm.predict(X_test)","3d77b3c2":"\n# R_square \nsse = np.sum((predictions - y_test)**2)\nsst = np.sum((y_test - y_test.mean())**2)\nR_square = 1 - (sse\/sst)\nprint('R square obtain for normal equation method is :',R_square)","fa4c08f9":"plt.scatter(y_test,predictions)","a161c312":"sns.distplot((y_test-predictions)); ","b015e423":"f = plt.figure(figsize=(14,5))\nax = f.add_subplot(121)\nsns.scatterplot(y_test,predictions,ax=ax,color='r')\nax.set_title('Check for Linearity:\\n Actual Vs Predicted value')\n\n# Check for Residual normality & mean\nax = f.add_subplot(122)\nsns.distplot((y_test - predictions),ax=ax,color='b')\nax.axvline((y_test - predictions).mean(),color='k',linestyle='--')\nax.set_title('Check for Residual normality & mean: \\n Residual eror');","f75983d0":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions)) \nprint('MSE:', metrics.mean_squared_error(y_test, predictions)) \nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions))) ","d9187c48":"## Visualizing and Examining Data","8fde7436":"Checking correlation among variables","1efc28b5":"Checking for missing values","b0470899":"Split The data Split the data into 3 which are:\n\n* Training Set : this set will be used for training the model\n* Validation Set : to check overfitting of the model\n* Testing Set : To see how well our model does in the end","79b73e97":"There is no missing value data","4d1f3fa7":"## Model Building","6d55a106":"There is positive correlation between Radiation and Temperature ","88bf7886":"## Train Test Split "}}