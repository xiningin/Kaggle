{"cell_type":{"f7e2df54":"code","94d6c0ad":"code","447fddac":"code","13c12e2e":"code","5497fe68":"code","ac343e54":"code","c20fe3f2":"code","83186e7f":"code","7da3aa19":"code","bc89e97a":"code","ac8c2ac3":"code","074592cf":"code","eec694e6":"code","c399ec7b":"code","8729140c":"code","270c44ef":"code","272e2017":"code","7b1d87fc":"code","030bf624":"code","2d74d028":"code","dfb33c76":"code","c1b3292b":"code","8a20d959":"code","0d65f8a5":"code","5a33a222":"code","f5f6d762":"code","45d5e487":"code","14522d48":"code","cbc03e80":"code","cc6bcd6b":"code","adb7f9d3":"code","33d5a68a":"code","b2e3cb8e":"code","c41ba104":"code","dd8e0437":"code","14870a57":"code","add3a40a":"code","98ef84d1":"code","384d4627":"markdown","e2fbc770":"markdown","5a35ef68":"markdown","a024e355":"markdown","eff7bf83":"markdown","668a8715":"markdown","3a8bb964":"markdown","ecd04bf9":"markdown","2e794761":"markdown"},"source":{"f7e2df54":"!pip install lofo-importance","94d6c0ad":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom lofo import LOFOImportance, plot_importance\nfrom scipy import stats\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","447fddac":"data = pd.read_csv(\"\/kaggle\/input\/plant-trait-dataset\/combined_data.csv\", chunksize = 15000000, low_memory=False)\nfor i,d in enumerate(data):\n    #print(i)\n    df = d\n    break\ndata_names = df['DataName'].unique()","13c12e2e":"imp_cols =['DatasetID','AccSpeciesID', 'AccSpeciesName', 'TraitID','TraitName', 'DataID', \n       'DataName', 'OriglName', 'OrigValueStr','OrigUnitStr']","5497fe68":"N_fix_cap = df[df['DataName'] == 'Nitrogen-fixation capacity']\nN_fix_cap = N_fix_cap[imp_cols]\n\nunique_vals = N_fix_cap['OrigValueStr'].unique()\nN_fix_cap = N_fix_cap[N_fix_cap['OrigValueStr'].notna()]\nN_fix_cap.head()","ac343e54":"# Cleaning the data\nvals_to_replace = {'NO-N-fixer':True, 'N-FIXER':True, 'not N2 fixing':False, 'N2 fixing?':True, '0':False, '1':True, '2':True,\n                   'High':True, 'Low':False, 'N2 fixing':True, 'no':False, 'n':False, 'y':True, 'no, not an N fixer':False,\n                   'yes, an N fixer':True, 'Medium':True, 'No':False, 'Yes':True, 'yes':True, True:True, False:False, 'N':False, 'Y':True}\nN_fix_cap['OrigValueStr'] = N_fix_cap['OrigValueStr'].map(vals_to_replace)\nN_fix_cap['OrigUnitStr'] = 'boolean'","c20fe3f2":"N_values = pd.concat([N_fix_cap['AccSpeciesName'],pd.get_dummies(N_fix_cap['OrigValueStr'])], axis = 1)\nN_grouped = N_values.groupby('AccSpeciesName').sum().reset_index(drop=False)\nN_grouped.columns = ['AccSpeciesName','False','True']\n\nN_grouped['%True'] = N_grouped['True']*100\/(N_grouped['True']+N_grouped['False'])\nN_grouped['%False'] = 100 - N_grouped['%True'] \nN_grouped.head()","83186e7f":"N_fixed_species = N_grouped[N_grouped['True'] > N_grouped['False']]['AccSpeciesName'].values\nN_not_fixed_species = N_grouped[N_grouped['True'] < N_grouped['False']]['AccSpeciesName'].values\nunknown_N_fixed_species = N_grouped[N_grouped['True'] == N_grouped['False']]['AccSpeciesName'].values\n\nprint(\"Plants that have nitrogen(N) fixation:  \",N_fixed_species)\nprint()\nprint(\"Plants don't have nitrogen(N) fixation:  \",N_not_fixed_species)","7da3aa19":"# Plants growth form\nplant_growth = df[df['DataName'] == 'Plant growth form']\nplant_growth = plant_growth[imp_cols]\n\nplant_growth['OrigValueStr'] = plant_growth['OrigValueStr'].apply(lambda x: str(x).lower())\n\ntree = ['t','tree (evergreen)','tre','Drink','tree | tree','trees','tree (woody >4m)','smtree']\ntree_shurb = ['tree shrub intermediate','tree \/ shrub','deciduous shrub or tree','tree, shrub','shrub|tree','tree\/large shrub','shrub \/ tree','shrub, tree','shrub or tree','shrub|shrub|tree','tree|shrub|shrub','subshrub, shrub, tree']\nshrub = ['low to high shrub','s','subshrub, shrub','large shrub','subshrub (woody <1m)','sub-shrub (chamaephyte)','sub-shrub','shrub (woody 1-4m)','sh']\ngrass = ['grasslike','c4 grass','c3 grass','grass (poaceae only)','grass (tussock)','annual grass']\nplant_growth['OrigValueStr'] = plant_growth['OrigValueStr'].replace(\"f\",'forb').replace('forb (herbaceous, with or without woody base)','forb').replace('shrub, graminoid','shrub\/graminoid').replace(dict.fromkeys(tree, 'tree')).replace(dict.fromkeys(tree_shurb, 'shrub\/tree')).replace('erect dwarf shrub','dwarf shrub').replace(dict.fromkeys(shrub, 'shrub')).replace(dict.fromkeys(grass, 'grass'))","bc89e97a":"# Grouping the species by most frequent Plant growth form\nplant_growth_grouped = plant_growth.groupby('AccSpeciesName')['OrigValueStr'].agg(lambda x:x.value_counts().index[0]).reset_index(drop=False)\nplant_growth_grouped.columns = ['AccSpeciesName','Plant growth form']\nplant_growth_grouped.head()","ac8c2ac3":"n_species = 10\nbar_data = pd.DataFrame(plant_growth_grouped['Plant growth form'].value_counts()).reset_index(drop=False)\nbar_data.columns = ['Plant growth Form','Number of Species']\nsns.barplot( x= bar_data['Plant growth Form'][:n_species],y = bar_data['Number of Species'][:n_species]).set_title('Species with different growth forms')\nplt.xticks(rotation=90)\nplt.tight_layout()","074592cf":"nitrogen_content = df[df['TraitName'] == 'Leaf nitrogen (N) content per leaf dry mass']\nnitrogen_content = nitrogen_content[imp_cols]\nnitrogen_content = nitrogen_content[nitrogen_content['OrigValueStr'].notna()] # dropping nan values","eec694e6":"# Cleaning the data\nmg_g = ['mg g-1','mg \/ g','mg_g-1','mg N g-1','mg\/g dry mass','g\/kg','g kg-1','g mg-1']\npercent = ['%','% mass\/mass','mg\/mg *100']\nnitrogen_content['OrigUnitStr']  = nitrogen_content['OrigUnitStr'].replace(dict.fromkeys(mg_g, 'mg\/g')).replace('g N g-1 DW', 'g\/g').replace(dict.fromkeys(percent, 'percent'))","c399ec7b":"# Convert OrigValueStr values string to float type\narr = []\nfor i in nitrogen_content['OrigValueStr']:\n    try: \n        float(i)\n    except:\n        if i not in arr:\n            arr.append(i)\n            \nnitrogen_content['OrigValueStr'] = nitrogen_content['OrigValueStr'].replace('20-30','25').replace('10-20','15').replace('5-10','7.5').replace('>30','30').replace('<5','5')\nnitrogen_content['OrigValueStr'] = nitrogen_content['OrigValueStr'].astype(float)","8729140c":"# Converting values with different units to mg\/g\n\nn_percent = nitrogen_content[nitrogen_content['OrigUnitStr'] == 'percent']\nn_percent['OrigValueStr'] = n_percent['OrigValueStr']*10\nnitrogen_content[nitrogen_content['OrigUnitStr'] == 'percent'] = n_percent\nnitrogen_content['OrigUnitStr'] = nitrogen_content['OrigUnitStr'].replace('percent','mg\/g')\n\nn_g_g = nitrogen_content[nitrogen_content['OrigUnitStr'] ==  'g\/g']\nn_g_g['OrigValueStr'] = n_g_g['OrigValueStr']*1000\nnitrogen_content[nitrogen_content['OrigUnitStr'] == 'g\/g'] = n_g_g\nnitrogen_content['OrigUnitStr'] = nitrogen_content['OrigUnitStr'].replace( 'g\/g','mg\/g')\n\n# mmol\/g contains <0.01%, for now, we drop mmol\/g\nnitrogen_content = nitrogen_content[nitrogen_content['OrigUnitStr'] == 'mg\/g']","270c44ef":"# Distribution of Nitrogen Content in different_species\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Species\nspecies_list = list(dict(nitrogen_content['AccSpeciesName'].value_counts()).keys())\n\noff_set = 1  \nshape = (2,4)\nfig, axes =plt.subplots(shape[0],shape[1], figsize=(20,6), sharex=True)\naxes = axes.flatten()\nobject_bol = df.dtypes == 'object'\nnum_species = shape[0]*shape[1]\nfor ax, species_name in zip(axes, species_list[num_species*off_set: num_species*(1+off_set)]):\n    #sns.countplot(y=catplot, data=df, ax=ax, order=np.unique(df.values))\n    species_data = nitrogen_content[nitrogen_content['AccSpeciesName'] == species_name]['OrigValueStr'].values\n    sns.distplot(species_data, ax=ax).set_title(species_name)\n\nplt.tight_layout()  \nplt.show()\n","272e2017":"nitrogen_content_grouped = nitrogen_content.groupby(['AccSpeciesName'], as_index=False).agg({'OrigValueStr':['mean','std']})\nnitrogen_content_grouped.columns = ['AccSpeciesName','nitrogen_content_mean','nitrogen_content_std']\nnitrogen_content_grouped.head()","7b1d87fc":"%matplotlib inline\nimportance_df = nitrogen_content_grouped.copy()\nimportance_df.columns= ['feature','importance_mean','importance_std']\nplot_importance(importance_df[:20], figsize=(12, 8))","030bf624":"fig,ax = plt.subplots(figsize=(12,4))\nsns.distplot(nitrogen_content_grouped['nitrogen_content_mean'], bins = 300).set_title(\"Distribution of Avg. Nitrogen Content in different species\")\nax.set(xlim=(0, 100))","2d74d028":"phosy_rate = df[df['TraitName'] == 'Leaf photosynthesis rate per leaf area']\nphosy_rate = phosy_rate[imp_cols]\nphosy_rate = phosy_rate[phosy_rate['OrigValueStr'].notna()] # dropping nan values","dfb33c76":"mmms = ['micro mol m-2 s-1','micromol m-2 s-1','micro mol\/m2\/s','micromol\/m2\/s','micro mol CO2 m-2 s-1','micro mol C m-2 s-1','micromol. m-2. s-1', ' micro mol m-2 s-1','micromoles\/m2\/s','micromolco2 m-2 s-1','micromol CO2 m-2 s-1','micromol CO2 m-1s-1','umol CO2 \/ m2 \/ sec','umol CO2\/m^2 s','umolCO2\/m2-s','umol\/m2\/s','umol CO2 m-2 s-1','umol CO2\/m2\/s','mol(CO2) m-2 s-1 ']\ngmd = ['g m-2 day-1','g\/m2\/day','g\/m2\/d']\ngcmd = ['g\/cm2\/d','g\/cm2\/day']\n\nphosy_rate.OrigUnitStr = phosy_rate.OrigUnitStr.replace(dict.fromkeys(mmms, 'mmol\/m2\/s')).replace(dict.fromkeys(gmd, 'g\/m2\/day')).replace(dict.fromkeys(gcmd, 'g\/cm2\/day')).replace(np.nan, 'mmol\/m2\/s')\n\nprint(phosy_rate.OrigUnitStr.value_counts())\nphosy_rate = phosy_rate[phosy_rate['OrigUnitStr']=='mmol\/m2\/s']\n\nphosy_rate['OrigValueStr'] = phosy_rate['OrigValueStr'].astype('float')\nphosy_rate.head()","c1b3292b":"# Distribution of Leaf photosynthesis rate per leaf area in different_species\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Species\nspecies_list = list(dict(phosy_rate['AccSpeciesName'].value_counts()).keys())\n\noff_set = 1  \nshape = (2,4)\nfig, axes =plt.subplots(shape[0],shape[1], figsize=(20,6), sharex=True)\naxes = axes.flatten()\nobject_bol = df.dtypes == 'object'\nnum_species = shape[0]*shape[1]\n\nfor ax, species_name in zip(axes, species_list[num_species*off_set: num_species*(1+off_set)]):\n    #sns.countplot(y=catplot, data=df, ax=ax, order=np.unique(df.values))\n    species_data = phosy_rate[phosy_rate['AccSpeciesName'] == species_name]['OrigValueStr'].values\n    sns.distplot(species_data, ax=ax).set_title(species_name)\n\nplt.tight_layout()  \nplt.show()","8a20d959":"phosy_rate_grouped = phosy_rate.groupby(['AccSpeciesName'], as_index=False).agg({'OrigValueStr':['mean','std']})\nphosy_rate_grouped.columns = ['AccSpeciesName','phosy_rate_mean','phosy_rate_std']\nphosy_rate_grouped.head()","0d65f8a5":"fig,ax = plt.subplots(figsize=(12,4))\nsns.distplot(phosy_rate_grouped[phosy_rate_grouped['phosy_rate_mean']<100].phosy_rate_mean, bins = 100).set_title(\"Distribution of Leaf Photosynthesis rate in all species\")\nax.set(xlim=(0, 100))","5a33a222":"photosyn_pathway = df[df['TraitName']=='Leaf photosynthesis pathway'][imp_cols]","f5f6d762":"c3 = ['C3?','C3.','3','c3']\nc4 = ['C4','C4?','c4']\nnan = ['http:\/\/tropical.theferns.info\/viewtropical.php?id=Vochysia+haenkeana','unknown','no','yes','C3\/C4\/CAM','C3\/C4','C3\/CAM','C4\/CAM']\nphotosyn_pathway['OrigValueStr'] = photosyn_pathway['OrigValueStr'].replace(dict.fromkeys(c3, 'C3')).replace('CAM?','CAM').replace(dict.fromkeys(c4, 'C4')).replace(dict.fromkeys(nan, np.nan))\nphotosyn_pathway = photosyn_pathway[photosyn_pathway['OrigValueStr'].notna()]\n\nphotosyn_pathway_grouped = photosyn_pathway.groupby('AccSpeciesName')['OrigValueStr'].agg(lambda x:x.value_counts().index[0]).reset_index(drop=False)","45d5e487":"bar_data = pd.DataFrame(photosyn_pathway_grouped.OrigValueStr.value_counts()).reset_index(drop=False)\nbar_data.columns = ['type','No of species']\nsns.barplot(x = bar_data['type'], y= bar_data['No of species']).set_title('Species with different Leaf photosynthesis pathway')","14522d48":"carbon_content = df[df['TraitName'] == 'Leaf carbon (C) content per leaf dry mass'][imp_cols]\ncarbon_content = carbon_content[carbon_content['OrigValueStr'].notna()]\ncarbon_content = carbon_content[carbon_content['OrigValueStr']!='na']\ncarbon_content.OrigValueStr = carbon_content.OrigValueStr.astype('float')","cbc03e80":"mg_g = ['mg\/g','g\/kg','mg g-1','mg\/g dry mass','g mg-1']\ng_g = ['g\/g','g C g-1 DW']\npercent = ['%','percent','mg\/mg *100']\ncarbon_content['OrigUnitStr'] = carbon_content['OrigUnitStr'].replace(dict.fromkeys(mg_g, 'mg\/g')).replace(dict.fromkeys(g_g, 'g\/g')).replace(dict.fromkeys(percent, 'percent'))","cc6bcd6b":"g_g_carbon = carbon_content[carbon_content.OrigUnitStr=='g\/g'].OrigValueStr\ng_g_carbon *= 100\ncarbon_content.OrigValueStr[carbon_content.OrigUnitStr=='g\/g'] = g_g_carbon\nmg_g_carbon = carbon_content[carbon_content.OrigUnitStr=='mg\/g'].OrigValueStr \nmg_g_carbon \/= 10\ncarbon_content.OrigValueStr[carbon_content.OrigUnitStr=='mg\/g'] = mg_g_carbon\ncarbon_content['OrigUnitStr'] = carbon_content['OrigUnitStr'].replace(['mg\/g','g\/g'],['percent','percent'])\ncarbon_content = carbon_content[carbon_content['OrigUnitStr']=='percent']","adb7f9d3":"# Distribution of carbon content in different_species\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Species\nspecies_list = list(dict(carbon_content['AccSpeciesName'].value_counts()).keys())\n\noff_set = 1  \nshape = (2,4)\nfig, axes =plt.subplots(shape[0],shape[1], figsize=(20,6), sharex=True)\naxes = axes.flatten()\nobject_bol = df.dtypes == 'object'\nnum_species = shape[0]*shape[1]\n\nfor ax, species_name in zip(axes, species_list[num_species*off_set: num_species*(1+off_set)]):\n    #sns.countplot(y=catplot, data=df, ax=ax, order=np.unique(df.values))\n    species_data = carbon_content[carbon_content['AccSpeciesName'] == species_name]['OrigValueStr'].values\n    sns.distplot(species_data, ax=ax).set_title(species_name)\n\nplt.tight_layout()  \nplt.show()\n\n","33d5a68a":"carbon_content_grouped = carbon_content.groupby(['AccSpeciesName'], as_index=False).agg({'OrigValueStr':['mean','std']})\ncarbon_content_grouped.columns = ['AccSpeciesName','carbon_content_mean','carbon_content_std']\nfig,ax = plt.subplots(figsize=(12,4))\nsns.distplot(carbon_content_grouped[carbon_content_grouped['carbon_content_mean']<100].carbon_content_mean, bins = 100).set_title(\"Distribution of carbon content in all species\")\n#ax.set(xlim=(0, 100))","b2e3cb8e":"%matplotlib inline\nimportance_df = carbon_content_grouped.copy()\nimportance_df.columns= ['feature','importance_mean','importance_std']\nplot_importance(importance_df[:20], figsize=(12, 8))","c41ba104":"phosphorus_content = df[df['TraitName'] == 'Leaf phosphorus (P) content per leaf dry mass'][imp_cols]\nphosphorus_content = phosphorus_content.replace(['1-2','2-3','<1','>3','nd'],['1.5','2.5','1','3',np.nan])\nphosphorus_content = phosphorus_content[phosphorus_content['OrigValueStr'].notna()]\nphosphorus_content.OrigValueStr = phosphorus_content.OrigValueStr.astype('float')","dd8e0437":"percent = ['%','% ','% mass\/mass','percent']\ng_g = ['g P g-1 DW','g\/g']\nmg_g = ['mg\/g','mg g-1','g\/kg','mg_g-1']\nmg_kg = ['mg kg-1','mg\/kg']\n\nphosphorus_content.OrigUnitStr = phosphorus_content.OrigUnitStr.replace(dict.fromkeys(percent, 'percent')).replace(dict.fromkeys(g_g, 'g\/g')).replace(dict.fromkeys(mg_g, 'mg\/g')).replace(dict.fromkeys(mg_kg, 'mg\/kg'))\n\n# converting values with mg\/10g, mmol\/kg and ppm units to mg\/g\n\nmg_10g = phosphorus_content[phosphorus_content.OrigUnitStr=='mg\/10g'].OrigValueStr\nmg_10g \/= 10\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='mg\/10g'] = mg_10g\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='mg\/10g'] = 'mg\/g'\n\nphosphorus_content[phosphorus_content.OrigUnitStr=='ppm'].OrigValueStr\nppm = phosphorus_content[phosphorus_content.OrigUnitStr=='ppm'].OrigValueStr\nppm \/= 1000\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='ppm'] = ppm\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='ppm'] = 'mg\/g'\n\nphosphorus_content[phosphorus_content.OrigUnitStr=='mmol\/kg'].OrigValueStr\nmmol_kg = phosphorus_content[phosphorus_content.OrigUnitStr=='mmol\/kg'].OrigValueStr\nmmol_kg *= 0.031\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='mmol\/kg'] = mmol_kg\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='mmol\/kg'] = 'mg\/g'\n\n\nphosphorus_content[phosphorus_content.OrigUnitStr=='percent'].OrigValueStr\npercent = phosphorus_content[phosphorus_content.OrigUnitStr=='percent'].OrigValueStr\npercent *= 10\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='percent'] = percent\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='percent'] = 'mg\/g'\n\nphosphorus_content[phosphorus_content.OrigUnitStr=='g\/g'].OrigValueStr\ng_g = phosphorus_content[phosphorus_content.OrigUnitStr=='g\/g'].OrigValueStr\ng_g *= 1000\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='g\/g'] = g_g\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='g\/g'] = 'mg\/g'\n\nphosphorus_content[phosphorus_content.OrigUnitStr=='mg\/kg'].OrigValueStr\nmg_kg = phosphorus_content[phosphorus_content.OrigUnitStr=='mg\/kg'].OrigValueStr\nmg_kg \/= 1000\nphosphorus_content.OrigValueStr[phosphorus_content.OrigUnitStr=='mg\/kg'] = mg_kg\nphosphorus_content.OrigUnitStr[phosphorus_content.OrigUnitStr=='mg\/kg'] = 'mg\/g'","14870a57":"# Distribution of phosphorus content in different_species\n\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Species\nspecies_list = list(dict(phosphorus_content['AccSpeciesName'].value_counts()).keys())\n\noff_set = 1  \nshape = (2,4)\nfig, axes =plt.subplots(shape[0],shape[1], figsize=(20,6), sharex=False)\naxes = axes.flatten()\nobject_bol = df.dtypes == 'object'\nnum_species = shape[0]*shape[1]\n\nfor ax, species_name in zip(axes, species_list[num_species*off_set: num_species*(1+off_set)]):\n    #sns.countplot(y=catplot, data=df, ax=ax, order=np.unique(df.values))\n    species_data = phosphorus_content[phosphorus_content['AccSpeciesName'] == species_name]['OrigValueStr'].values\n    sns.distplot(species_data, ax=ax).set_title(species_name)\n\nplt.tight_layout()  \nplt.show()","add3a40a":"phosphorus_content_grouped = phosphorus_content.groupby(['AccSpeciesName'], as_index=False).agg({'OrigValueStr':['mean','std']})\nphosphorus_content_grouped.columns = ['AccSpeciesName','phosphorus_content_mean','phosphorus_content_std']","98ef84d1":"phosphorus_content_grouped.head()","384d4627":"## 5. Leaf photosynthesis pathway <a class=\"anchor\" id=\"5\"><\/a>","e2fbc770":"## 3. Leaf nitrogen (N) content per leaf dry mass  <a class=\"anchor\" id=\"3\"><\/a>","5a35ef68":"## 7. Leaf phosphorus (P) content per leaf dry mass <a class=\"anchor\" id=\"7\"><\/a>","a024e355":"## 1. Plant nitrogen fixation capacity <a class=\"anchor\" id=\"1\"><\/a>","eff7bf83":"## 4. Leaf photosynthesis rate per leaf area <a class=\"anchor\" id=\"4\"><\/a>","668a8715":"* C3 photosynthesis produces a three-carbon compound via the Calvin cycle \n* C4 photosynthesis makes an intermediate four-carbon compound that splits into a three-carbon compound for the Calvin cycle. \n* Plants that use CAM photosynthesis gather sunlight during the day and fix carbon dioxide molecules at night.","3a8bb964":"## 2. Plant growth form <a class=\"anchor\" id=\"2\"><\/a>","ecd04bf9":"  ## Table of Contents\n  \n  [ 1. Plant nitrogen fixation capacity](#1)\n  \n  [ 2. Plant growth form](#2)\n  \n  [ 3. Leaf nitrogen (N) content per leaf dry mass](#3)\n  \n  [ 4. Leaf photosynthesis rate per leaf area](#4)\n  \n  [ 5. Leaf photosynthesis pathway](#5)\n  \n  [ 6. Leaf carbon (C) content per leaf dry mass](#6)\n  \n  [ 7. Leaf phosphorus (P) content per leaf dry mass](#7)","2e794761":"## 6. Leaf carbon (C) content per leaf dry mass  <a class=\"anchor\" id=\"6\"><\/a>"}}