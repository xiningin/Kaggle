{"cell_type":{"7daaf7d2":"code","0b1a6a01":"code","bf38c3ef":"code","a9946195":"code","5c7aa91c":"code","4bc6568f":"code","58640550":"code","39446b65":"code","b015c7b1":"code","2444f82f":"code","448360b4":"code","bb927c7e":"code","bcae2e5c":"code","a1f6f4b6":"code","1a1cce11":"code","8ddae5ee":"code","be5d639a":"code","be152dc9":"code","f1a16948":"code","cb2b7f3a":"code","d63a7553":"code","007ec3a5":"code","bdf98f80":"code","60622cc0":"code","cb51bfff":"code","2f1eed6a":"code","a1ffaad7":"code","8992a7af":"code","56cdc5a6":"code","a88de8e3":"code","54566b54":"code","4d75ca4c":"code","54a67e35":"code","bc000489":"code","81f7dc9d":"code","364b78d8":"code","fab0f9f7":"code","cafcc9ec":"code","69bb012f":"code","591e852e":"code","16da3853":"code","df6c27ab":"code","dbca9c75":"code","02464070":"code","86f7cfba":"code","2e218787":"code","895a776e":"code","e3a34de2":"code","05fd4fa6":"code","ce95f670":"code","301f3688":"code","d7bb64ee":"code","cf029480":"code","06a7fddf":"code","7f66d0f6":"code","8636c985":"markdown","6e62b27c":"markdown","b912072d":"markdown","73994726":"markdown","2a9f3827":"markdown","bf2b7c02":"markdown","b17f6d5d":"markdown","e76c1092":"markdown","3c281910":"markdown","33b65d54":"markdown","4eedefa7":"markdown","4c2bcbfd":"markdown","8d2b3945":"markdown","e81bb78e":"markdown","3ed7c868":"markdown","12ccb60c":"markdown","6b539415":"markdown","4cd9ae3a":"markdown","e884cde7":"markdown","b91270a5":"markdown","edb7cae6":"markdown","5437a5f5":"markdown","1e0c5c2a":"markdown","e7ba6309":"markdown","bf7a1655":"markdown","9c4af753":"markdown","b4d762de":"markdown","7fb59c04":"markdown","cb1880a5":"markdown","fd15ae9b":"markdown","4056785a":"markdown","da4c853c":"markdown","34d80c53":"markdown","2c159bef":"markdown","ea099f06":"markdown","99b181d1":"markdown","062b7a76":"markdown","cb12caa9":"markdown","236d82e8":"markdown"},"source":{"7daaf7d2":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0b1a6a01":"import sqlite3 #import sqlite 3 module","bf38c3ef":"file = \"movies.db\" #database file\nconnection = sqlite3.connect(file)\nc = connection.cursor() #establish the connection the database","a9946195":"c.execute(\"drop table if exists movies\") #drop the old table if exists\nc.execute(\"\"\"\n            create table movies (\n            number int,\n            ID int primary key,\n            Title varchar(255),\n            Year int,\n            Age char(3),\n            IMDb float,\n            Rotten_Tomatoes decimal(3,0),\n            Netflix int,\n            Hulu int,\n            Prime_Video int,\n            Disney int,\n            Type int,\n            Directors varchar(255),\n            Genres varchar(255),\n            Country varchar(255),\n            Language varchar(255),\n            Runtime int\n            )\"\"\") #create table and define structure of table\nconnection.commit()","5c7aa91c":"import csv #import csv module to use csv-related functions","4bc6568f":"delete_sql = \"delete from movies\" #delete old records from the table\nc.execute(delete_sql)\n\nf = open(\"\/kaggle\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\", encoding=\"utf8\")\ninsert_sql = \"insert into movies (Number, ID, Title, Year, Age,IMDb, Rotten_Tomatoes, Netflix, Hulu, Prime_Video, Disney, Type, Directors, Genres,Country,Language,Runtime) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" #insert record into tables\nfor row in csv.reader(f): \n    c.execute(insert_sql, row)\nconnection.commit()","58640550":"update_sql = \"update movies set Title= Lower(Title)\" #update value for processing\nc.execute(update_sql)\nconnection.commit()","39446b65":"update_sql_netflix1 = \"update movies set Netflix= 'Yes' where Netflix = 1\" #update value\nupdate_sql_netflix2 = \"update movies set Netflix= 'No' where Netflix = 0\"\nc.execute(update_sql_netflix1)\nc.execute(update_sql_netflix2)\nconnection.commit()","b015c7b1":"update_sql_hulu1 = \"update movies set Hulu = 'Yes' where Hulu = 1\" #update value\nupdate_sql_hulu2 = \"update movies set Hulu = 'No' where Hulu = 0\"\nc.execute(update_sql_hulu1)\nc.execute(update_sql_hulu2)\nconnection.commit()","2444f82f":"update_sql_primevideo1 = \"update movies set prime_video = 'Yes' where prime_video = 1\" #update value\nupdate_sql_primevideo2 = \"update movies set prime_video = 'No' where prime_video = 0\"\nc.execute(update_sql_primevideo1)\nc.execute(update_sql_primevideo2)\nconnection.commit()","448360b4":"update_sql_disney1 = \"update movies set disney = 'Yes' where disney = 1\" #update value\nupdate_sql_disney2 = \"update movies set disney = 'No' where disney = 0\"\nc.execute(update_sql_disney1)\nc.execute(update_sql_disney2)\nconnection.commit()","bb927c7e":"show_10_sql = \"select * from movies limit 10\" #show the first 10 movies\nc.execute(show_10_sql)\nrows = c.fetchall()\nfor row in rows: \n    print(row)\nconnection.commit()","bcae2e5c":"movies_name = str(input(\"Please enter the movies name: \")) #Get input movie name\ncustom_sql = \"select Title, Netflix, Hulu, Prime_Video, Disney from movies where Title = lower('{0}')\".format(movies_name) \n#select movies with the input title\nc.execute(custom_sql)\nrows = c.fetchall()\nif not rows: #If there is no result\n    if movies_name == '': \n        print(\"Please enter a name to find\") #Ask to input a movie name if it is blank\n    else:\n        print(\"Sorry, we don't have the movie name {} in the system\".format(movies_name.capitalize())) \n        print(\"Here are some related results, try searching for these movies:\")\n        #Suggest 5 movies close to the movie name\n        select_alternate = \"select Title from movies where Title Like '%{}%' limit 5\".format(movies_name)\n        c.execute(select_alternate)\n        records = c.fetchall()\n        if not records:\n            print(\"Sorry, we can't find any movies similar to the name to input. Please input another movie name\")\n        else:\n            for record in records:\n                print(\"- {}\".format(record[0].title()))\nfor row in rows: #If the movie exists, show the information of that movie\n    print(\"The movie name is {}\".format(row[0].title()))\n    print(\"Available on Netflix: {}\".format(row[1]))\n    print(\"Available on Hulu: {}\".format(row[2]))\n    print(\"Available on Prime Video: {}\".format(row[3]))\n    print(\"Available on Disney: {}\".format(row[4]))\nconnection.commit()","a1f6f4b6":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.stats import linregress\nimport statsmodels.formula.api as smf ","1a1cce11":"data = pd.read_csv(\"..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\", index_col=0)\ndata.head(10)\n# data[['Title','Year']]\n# data.loc[[2],[\"Title\",\"Year\",\"Netflix\"]]\n# plt.hist(data[['year']], bins = 3)\n# plt.show()","8ddae5ee":"data.describe() #Describe the data","be5d639a":"data.pivot_table(values = \"IMDb\", index = \"Genres\", aggfunc= [np.mean, np.median]) #create pivot table with arregate function to calculate mean and median","be152dc9":"data.groupby([\"Genres\", \"Runtime\"])[[\"IMDb\"]].mean()","f1a16948":"data[data[\"Year\"]== 2020] #We still have a lot movies come out during the pandemic","cb2b7f3a":"ok = data.groupby(\"Genres\")[\"Title\"].nunique().sort_values(ascending=False).head(10)\nok.index","d63a7553":"#create the pivot table and use nunique aggregate function\ndf = data.pivot_table(values = \"Title\", index = \"Year\", columns = \"Genres\", aggfunc= pd.Series.nunique, fill_value = 0).sort_values(\"Year\", ascending= True)\ndf","007ec3a5":"dff = df[ok.index] #only show result of top 10 genres\ndff","bdf98f80":"ab = dff.cumsum()\nab","60622cc0":"def nice_axes(ax):\n    ax.set_facecolor('.8') #set the face color of the axes\n    ax.tick_params(labelsize=8, length=0) #Change the appearance of ticks\n    ax.grid(True, axis='x', color='white') #Configure the grid lines\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]\n","cb51bfff":"def prepare_data(df, steps=5):\n    abc = ab.loc[1900:2020].reset_index() #reset the index to add transitioning value\n    abc.index = abc.index*5 #Add 5 transitioning values between each year\n    last_idx = abc.index[-1] + 1\n    df_expanded = abc.reindex(range(last_idx))\n    df_expanded['Year'] = df_expanded['Year'].fillna(method='ffill').astype(int)\n    df_expanded = df_expanded.set_index('Year') #Set Year column back to the index\n    df_expanded = df_expanded.interpolate() #Interpolate data value value for more smoothly transitioning\n    df_rank_expanded = df_expanded.rank(axis=1, method='first') #Rank the value to keep its color\n    df_rank_expanded = df_rank_expanded.interpolate() #Interpolate rank value for more smoothly transitioning\n    return df_expanded, df_rank_expanded\n\ndf_expanded, df_rank_expanded = prepare_data(df)\nlabels = df_expanded.columns\ndf_expanded.head()","2f1eed6a":"from matplotlib.animation import FuncAnimation\n\ndef init():\n    ax.clear()\n    nice_axes(ax)\n    ax.set_ylim(.2, 6.8) #Set the y-axis view limits\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    y = df_rank_expanded.iloc[i] #The genres\n    width = df_expanded.iloc[i] #Number of movies value\n    ax.barh(y=y, width=width, color=colors, tick_label=labels) #Draw bar graph\n    date_str = df_expanded.index[i] #Take the date in index column\n    ax.set_title(f'Number of Movies by Genres - {date_str}')\n    \nfig = plt.Figure(figsize=(4, 2.5), dpi=144) #create figure\nax = fig.add_subplot()\ncolors = plt.cm.Dark2(range(6))\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=200, repeat=False) #Configure the video","a1ffaad7":"from IPython.display import HTML\nhtml = anim.to_html5_video()\nHTML(html)","8992a7af":"anim.save('moviesbygenres.mp4') #Save the bar race video to local","56cdc5a6":"df = data.groupby('Year')[['Title']].nunique() #Find number of unique movies every year\ndf","a88de8e3":"plt.plot(df.index, df[['Title']], color=\"blue\") #Draw graph\nplt.xlabel(\"Year\") #Label x-axis\nplt.ylabel(\"Number of movies\") #Label y-axis\nplt.title(\"Number of Movies over Years\") #Label the Title\nplt.show() #Show the graph","54566b54":"df = data[[\"Netflix\",\"Hulu\", \"Prime Video\", \"Disney+\"]].sum() #Calculate total movies of each platform\ndf","4d75ca4c":"name = [\"Netflix\", \"Hulu\", \"Prime Video\", \"Disney+\"]\nplt.bar(name, df, align=\"center\", color=\"blue\") #Draw bar graph\nplt.xlabel(\"Streaming Platforms\") #Label X-axis\nplt.ylabel(\"Number of Movies\") #label y-axis\nplt.title(\"Number of Movies on Different Streaming Platforms\") #Label the tile\nplt.show() #Show the graph","54a67e35":"#Find top 5 countries has the most movies\nmovies_by_country = data.groupby('Country')['Title'].count().reset_index().sort_values('Title',ascending = False).head(5).rename(columns = {'Title':'MovieCount'})\nmovies_by_country","bc000489":"explodeTuple = (0.1, 0.2, 0.3, 0.4, 0.5) #Making the wedge to explode out for easier to see\nplt.pie(movies_by_country[\"MovieCount\"], explode= explodeTuple, labels = movies_by_country[\"Country\"], autopct='%5.0f%%',\n        shadow=True, startangle=90) #Draw Pie chart\nplt.axis('equal') #Ensure the pie chart is circle\nplt.show() #Show the graph","81f7dc9d":"runtime = data[\"Runtime\"] + np.random.normal(0, 2, size = len(data)) #Define value and add random normal\nIMDb = data[\"IMDb\"] + np.random.normal(0,2, size = len(data)) #Define value and add random normal\nplt.plot(IMDb, runtime, 'o', markersize = 0.2, alpha = 0.3) #Plot the Scatter graph with customized markersize and opacity\nplt.xlabel(\"IMDb\") #Label X-axis\nplt.ylabel(\"Runtime (minutes)\") #Label Y-axis\nplt.axis([0, 10, 0, 200]) #Specify the range in the X-axis and Y-axis\nplt.show() #Show the graph","364b78d8":"#Draw the box plot to show relationship between IMDb score and Runtime with IMDb score > 8\nsns.boxplot(x = data[data[\"IMDb\"]>8][\"IMDb\"], y= data[data[\"IMDb\"]>8][\"Runtime\"], data= data, whis = 10)\nplt.show() #Show the plot","fab0f9f7":"lg = pd.DataFrame(data.groupby(\"Year\")[\"Title\"].nunique()) #Number of movies by years\nlg.plot() #Plot the line chart\nplt.show() #Show the plot","cafcc9ec":"Yearre = lg.index\nTitlere = lg[\"Title\"] \ntotalre = linregress(Yearre, Titlere) #Find Linear Regression Indicators\ntotalre","69bb012f":"lg[\"Year2\"] = lg.index\nlg.plot(\"Year2\", \"Title\", kind= \"scatter\", alpha = 0.5) \nplt.show()","591e852e":"fx= np.array([lg[\"Year2\"].min(), lg[\"Year2\"].max()]) #Create an array contains the first and the last year in the dataset\nfy = totalre.intercept + totalre.slope * fx #The Regression Line\nlg.plot(\"Year2\", \"Title\", kind= \"scatter\") #Plot the Scatter graph\nplt.plot(fx, fy,'-') #Plot the Regression Line\nplt.axis([1900, 2020, 0, 1400]) #Specify the range of axis-es\nplt.legend([totalre.slope]) \nplt.show()","16da3853":"abcd= pd.DataFrame(data.groupby(\"Runtime\")[\"IMDb\"].mean()) #Find the mean IMDb score by Runtime\nabcd = abcd[abcd.index < 500] #Specify the Runtime range since only a few movies has runtime > 500\nplt.plot(abcd, 'o', alpha = 0.5) #Plot the Scatter\nplt.xlabel('Runtime (Minutes)')\nplt.ylabel('IMDb')\nplt.show() #Show the plot","df6c27ab":"abcd[\"Runtime\"] = abcd.index #Add a column\nabcd[\"Runtime2\"] = abcd[\"Runtime\"] ** 2 #Add a quadractic term\nabcd[\"IMDb2\"] = abcd[\"IMDb\"] ** 2 #Add a quadractic term\nabcd.describe() #Describe the data","dbca9c75":"results = smf.ols('IMDb ~ Runtime + Runtime2', data= abcd).fit() #Run the multiple regression model\npred = results.predict(abcd) #Use the dataframe as the parameter to generate prediction\nplt.plot(abcd['Runtime'], pred) #Plot the prediction generated by the model\nplt.plot(abcd[\"Runtime\"], abcd[\"IMDb\"], 'o', alpha = 0.5) #Plot the Scatter\nplt.legend([\"predicted\", \"real\"]) #Label the legends\nplt.xlabel(\"Runtime\") #Label the x-axis\nplt.ylabel(\"IMDb Score\") #Label the y-axis\nplt.title(\"IMDb Score by Runtime\") #Title the plot\nplt.show() #Show the plot","02464070":"opss = pd.DataFrame(data.groupby(\"Year\")[\"Title\"].nunique()) #Group the movies by year\nopss.plot()\nplt.show()","86f7cfba":"from statsmodels.tsa.statespace.sarimax import SARIMAX\nopss.index = pd.to_datetime(opss.index, format = '%Y') #Format the datetime object","2e218787":"opss = opss.drop(opss.index[[0,1,2,3]]) #Drop the first few years because of interval inconsistency\nopss = opss.drop(opss.index[-1]) #Drop the year of 2020 because it is not completed and it can cause error in data\nopss","895a776e":"model = SARIMAX(opss, order = (1,0,0), trend = 'c') #Run the ARMA(1,0) model and constant model","e3a34de2":"results = model.fit() #Fit the model\nprint(results.summary()) #Print the Summary","05fd4fa6":"forecast = results.get_prediction(start = -25) #Make predictions for the last 25 values","ce95f670":"mean_forecast = forecast.predicted_mean  #Calculate the forecast mean\nmean_forecast","301f3688":"confidence_intervals = forecast.conf_int() #Calculate the Confidence Interval (Include lower and upper limit)\nconfidence_intervals ","d7bb64ee":"plt.plot(opss.index, opss, label ='observed') #Plot the real data\nplt.plot(mean_forecast.index, mean_forecast, color = 'r', label='predicted') #Plot the predicted data\nplt.fill_between(confidence_intervals.index,confidence_intervals['lower Title'], confidence_intervals['upper Title'], color='pink', label='interval') #Fill between the confidence intervals\nplt.xlabel('Year') #Label the x-axis\nplt.ylabel('Number of movies') #Label the y-axis\nplt.legend() #Annotate the legends\nplt.show() #Show the graph","cf029480":"forecast = results.get_forecast(steps = 16) #Forecast the next 16 years\nmean_forecast = forecast.predicted_mean #Calculate the forecast mean\nmean_forecast","06a7fddf":"confidence_interval = forecast.conf_int() #Calculate the confidence interval (include the upper and lower limits)\nconfidence_interval","7f66d0f6":"plt.plot(opss.index, opss, label ='observed') #Plot the observed data the past years\nplt.plot(mean_forecast.index, mean_forecast, color = 'r', label='predicted') #Plot the predicted data for the next 16 years\nplt.fill_between(confidence_interval.index,confidence_interval['lower Title'], confidence_interval['upper Title'], color='pink', label = 'interval') #Fill between the confidence interval\nplt.xlabel('Year') #Label the X-axis\nplt.ylabel('Number of movies') #Label the Y-axis\nplt.legend() #Show the legends\nplt.show() #Show the graph","8636c985":"d. Number of Movies throughout the years graph:","6e62b27c":"<h4>C. Multiple Regression:<\/h4>","b912072d":"Find the average and median IMDb score of each genres","73994726":"<b>Function to define the style of the graph to make it look nicer<\/b>","2a9f3827":"<b> Function to process and prepare the rank data:<\/b><br \/>\n<ul>\n    <li>Rank the genres base on its data in top 10<\/li>\n    <li>It helps the value keep its color in the bar graph when the order is changed<\/li>\n    <li>Interpolate the data so it creates the transition between the increase in data<\/li>\n    <li>It makes the bar race more smoothly<\/li>\n        <li>Rank the genres base on its data in top 10<\/li>\n    <li>It helps the value keep its color in the bar graph when the order is changed<\/li>","bf2b7c02":"Show the result of top 10 genres through years","b17f6d5d":"<h3>2. Packages in use:<\/h3>","e76c1092":"Count number of unique movies in each year by genres","3c281910":"b. Process, Update values for searching:","33b65d54":"<h4>B. Linear Regression:<\/h4>","4eedefa7":"Find top 10 genres that has the most movies","4c2bcbfd":"<h4>A. Visualizing Relationship: <\/h4>","8d2b3945":"<h3>4. Data analysis and Report<\/h3>","e81bb78e":"<h4>b. Out-sample prediction:<\/h4>","3ed7c868":"a. Import sqlite3 modules and import data from CSV","12ccb60c":"<h1>Explore Movie Data<\/h1>","6b539415":"Show some latest movies in the year of 2020","4cd9ae3a":"<h3>1. Instruction for Using the Notebook:<\/h3>","e884cde7":"<ul>\n    <li>sqlite3: To implement SQLite database, and functions<\/li>\n    <li>csv: To use CSV-related function<\/li>\n    <li>matplotlib.pyplot: For data visualization<\/li>\n    <li>pandas: To use for data manipulation and analysis<\/li>\n    <li>numpy: To work with arrays<\/li>\n    <li>Seaborn: For data visualization<\/li>\n    <li>Linregress(scipy.stats): To run Linear Regression<\/li>\n    <li>statsmodels.formula.api: To use classes and functions for the estimation of, test statistical models<\/li>\n    <li>FuncAnimation(matplotlib.animation): To use function to draw a clear frame<\/li>\n    <li>HTML(IPython.display): To display media to the screen<\/li>\n    <li>SARIMAX(statsmodels.tsa.statespace.sarimax): To use and run ARMA model<\/li>\n<\/ul>","b91270a5":"<h4>Data Source: <a href=\"https:\/\/www.kaggle.com\/ruchi798\/movies-on-netflix-prime-video-hulu-and-disney\">Here<\/a><\/h4><\/br>\n<h5>The Notebook has 4 main parts:<\/h5>\n<ul>\n    <li><b>Process Implemention:<\/b>\n        <ul>\n            <li>Import the dataset and search for movies<\/li>\n            <li>Show movie details<\/li>\n            <li>To use it:\n                <ol>\n                    <li>Make sure to have CSV file in the same folder(you can change the path by changing at f variable)<\/li>\n                    <li>Run through all the cells to import modules<\/li>\n                    <li>Input the movie name you want to search (It will show the movie details if exists)<\/li>\n                    <li>If the movie does not exist in datasets, it will suggest some movies that has similar name<\/li>\n                <\/ol>\n            <\/li>\n        <\/ul>\n    <\/li>\n    <li><b>Data Analytics:<\/b>\n        <ul>\n            <li>Describe the data and analyze through data frame and draw graphs<\/li>\n            <li>To use it:\n                <ol>\n                    <li>Make sure to have CSV file in the same folder(you can change the path by changing data variable)<\/li>\n                    <li>Run through all the cells to see the description and view the graphs<\/li>\n                <\/ol>\n            <\/li>\n        <\/ul>\n    <\/li>\n    <li><b>Visualization and Regressions:<\/b>\n        <ul>\n            <li>Visualization the relationship between data<\/li>\n            <li>Run the Linear Regression model and show on graphs<\/li>\n            <li>Run the Multiple Regression model to predict data and show on graphs<\/li>\n            <li>To use it:\n                <ol>\n                    <li>Make sure to have CSV file in the same folder(you can change the path by changing data variable)<\/li>\n                    <li>Run through all the cells to import the packages to run models and view the graphs<\/li>\n                <\/ol>\n            <\/li>\n        <\/ul>\n    <\/li>\n    <li><b>Prediction<\/b>\n        <ul>\n            <li>Implement ARMA model using SARIMAX package functionalities<\/li>\n            <li>Perform in-sample prediction to compare the real data with predicted data for the last 25 years<\/li>\n            <li>Perform out-sample prediction to forecast the data for the next 16 years<\/li>\n            <li>To use it:\n                <ol>\n                    <li>Make sure to have CSV file in the same folder(you can change the path by changing data variable)<\/li>\n                    <li>Run through all the cells to import the packages to run models and view the graphs<\/li>\n                <\/ol>\n            <\/li>\n        <\/ul>\n    <\/li>\n<\/ul>\n","edb7cae6":"b. Explore the data:","5437a5f5":"Display the bar race","1e0c5c2a":"- Use box plot for the same relationship","e7ba6309":"a. Import packages and show dataframe","bf7a1655":"- Relationship between IMDb and Runtime using Scatter plot\n- Since there may be a lot of overlapped value at one point, adding random normal helps reduce jittering","9c4af753":"<b>Import package and Create Animation<\/b>","b4d762de":"Find cumulative total number of movies through the years","7fb59c04":"<b>- Box Plot is a lot easier to see the range, median and the distribution of the results","cb1880a5":"<h3>3. Process Implementation<\/h3>","fd15ae9b":"<h3>7. Wrap Up:<\/h3>\n<ul>\n    <li>There are a lot of movies are being produces every year and the rate is increasing throughout the years<\/li>\n    <li>There are lot of genres and combination of genres but Drama is still one of the most favorite types of movie<\/li>\n    <li>Prime video is the streaming platform that has the most movies<\/li>\n    <li>Hollywood, or USA is the symbol of movies industry, country that has been producing most movies<\/li>\n<\/ul>\nWe explored some interesting trends around movies, genres, countries, and platforms","4056785a":"c. Show results:","da4c853c":"c. Make the bar race:","34d80c53":"<h4>a. In-sample Prediction:<\/h4>","2c159bef":"Find the average score of movies in each genre by runtime","ea099f06":"<h3>5. Visualization and Regressions: <\/h3>","99b181d1":"What we know from above data:\n- There are 16744 movies in the record.\n- Average IBDb rating score is 5.902\n- The record have the movies from 1902 to 2020\n- The longest movies is 1256 minutes long\n- Hulu is platform that has the least movies","062b7a76":"<h3>6. Prediction: <\/h3>","cb12caa9":"e. Compare movies on different streamming platform:","236d82e8":"f. Top 5 countries has the most movies"}}