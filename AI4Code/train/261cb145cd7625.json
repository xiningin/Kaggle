{"cell_type":{"37991d95":"code","554c2676":"code","ff847ab7":"code","f47b4f66":"code","1a8fdb40":"code","aead5b0f":"code","5cc85aa6":"markdown","ada6dbc0":"markdown","ee8518a1":"markdown","ff111009":"markdown","1b3ad968":"markdown"},"source":{"37991d95":"# General Packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Packages for Plotting\nimport plotly.graph_objects as go\nimport plotly.offline as offline\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.graph_objs import Scatter, Figure, Layout\noffline.init_notebook_mode()\nimport IPython.display\nfrom IPython.display import HTML, Image\ninit_notebook_mode(connected=True)","554c2676":"# Load the data\ndf = pd.read_csv(\"\/kaggle\/input\/movinga-best-cities-for-families-2019\/Movinga_best_cities.csv\")\n\n# Inspect the data\nprint(df.info())","ff847ab7":"# Convert required columns to float and select only columns that we will be plotting\ncols=[i for i in df.columns if i not in [\"City\",\"Country\",\"Lat\",\"Long\"]]\nfor col in cols:\n    df[col]=pd.to_numeric(df[col])","f47b4f66":"# Initialise lists for storing plot data\ndata = []\nlist_updatemenus = []\n\n# For every indicator, set visibility and labelling properties\nfor n, indicator in enumerate(cols):\n    visible = [False] * len(cols)\n    visible[n] = True\n    temp_dict = dict(label = str(indicator),\n                 method = 'update',\n                 args = [{'visible': visible},\n                         {'title': 'Best Cities for Families 2019<br>Source: <a href=https:\/\/www.movinga.de\/en\/cities-of-opportunity-for-families>Movinga<\/a><br>Indicator :' + indicator},\n                        ])\n    list_updatemenus.append(temp_dict)","1a8fdb40":"# Create the individual plots for every indicator\nfor indicator in cols:\n    trace = (go.Scattergeo(\n    name = str(indicator),\n    lon = df['Long'],\n    lat = df['Lat'],\n    text = df['City'] + ' , ' + df['Country'] + ' , ' + indicator + ' : ' + df[indicator].astype(str),\n    mode = 'markers',\n    hoverinfo = 'text',\n    marker = dict(\n        size = 20,\n        opacity = 0.8,\n        reversescale = True,\n        autocolorscale = False,\n        symbol = 'circle',\n        line = dict(\n            width=1,\n            color='rgba(102, 102, 102)'\n        ),\n        colorscale = 'Bluered',\n            cmin = 0,\n            color = df[indicator],\n            cmax = df[indicator].max(),\n            colorbar_title = indicator\n    )))\n    data.append(trace)","aead5b0f":"# Select initial plot on render\ndata[13]['visible'] = True\n\n# Specify layout properties of the figure such as dropdown button location and title\nlayout = dict(updatemenus=list([\n            dict(buttons= list_updatemenus, direction=\"down\",\n            #pad={\"r\": 0, \"t\": 0},\n            showactive=False,\n            x=0.9,\n            xanchor=\"left\",\n            y=1.15,\n            yanchor=\"top\")\n            ]),\n            title='Best Cities for Families 2019<br>Source: <a href=https:\/\/www.movinga.de\/en\/cities-of-opportunity-for-families>Movinga<\/a><br>Indicator : Total', title_x=0.5, showlegend = False)\nfig = dict(data=data, layout=layout)\n\n# Plot\noffline.iplot(fig, filename='movinga')","5cc85aa6":"Movinga Exploratory Data Analysis\n=====================================\n**Author**: `Anjukan Kathirgamanathan <https:\/\/github.com\/anjukan>`\n**Date**: 04\/02\/2020\n\n\nThis tutorial shows how to visualise the Movinga data in an interactive plotly plot with a dropdown menu.\n\n**Packages**","ada6dbc0":"**Load Data**","ee8518a1":"**Set up Plot**","ff111009":"**Format Data**","1b3ad968":"It's as easy as that to create an interactive plotly plot. I think it's a good use of an interactive plot compared to a static plot as it allows you to focus on the criteria that matters to you without being lost in all the columns. I'm pretty happy with how the plot came out although notice that there seem to be several legends overlapping each other on the first default plot rendered. I haven't been able to fix this yet so if you find a way, please let me know! I also created a dash version of this same plot using the plotly dash functionality. It's hosted on heroku [here](https:\/\/movinga-cities-dash-app.herokuapp.com\/). I shall share the code for that later. Anyway, let me know what you think or if you have any suggestions!"}}