{"cell_type":{"466523ca":"code","86e84443":"code","5d4c7b8f":"code","2896c109":"code","4c0b7405":"code","e8b38e26":"code","a369b18a":"code","5d229aa3":"code","df6f2cb3":"code","298c41a3":"code","29c97956":"code","17cef954":"code","249a8e42":"code","550aaab8":"code","6dc54d4d":"code","29507018":"code","d85d5960":"code","85e80672":"code","2c0aa397":"code","b22ba324":"code","52f1f9c8":"code","49a8112c":"code","b2cbbef8":"code","f8767b5e":"code","42a29c35":"markdown","a49ca919":"markdown","1f769079":"markdown","f852900e":"markdown","8b5e3f07":"markdown","bdd86ce6":"markdown","ed88aefd":"markdown","6b8653dc":"markdown","b462e24a":"markdown","182d4cbb":"markdown","92ae9c70":"markdown","346b7811":"markdown","74699f69":"markdown","f2318cac":"markdown","748385f0":"markdown","b1ef1489":"markdown","a077047f":"markdown","af5ebd02":"markdown","cdc28707":"markdown","07058ae4":"markdown","e7135151":"markdown","d7abd885":"markdown","3485e9f0":"markdown","53c58e1b":"markdown"},"source":{"466523ca":"import numpy as np\nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nprint(f'matplotlib ver : {mpl.__version__}')","86e84443":"from cycler import cycler\n\nmpl.rcParams['figure.dpi'] = 120\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False\n# mpl.rcParams['font.family'] = 'serif'\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nlight_palette = np.array(raw_light_palette)\/255\n\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',light_palette)\n\nsurvived_palette = ['#dddddd', mpl.colors.to_hex(light_palette[2])]\nsex_palette = [light_palette[0], light_palette[3]]\n","5d4c7b8f":"from datetime import datetime\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show()","2896c109":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","4c0b7405":"train.head()","e8b38e26":"train.describe(include='all')","a369b18a":"fig = plt.figure(figsize=(15, 11))\n\ngs = fig.add_gridspec(3, 4)\n\n\n\nax_sex_survived = fig.add_subplot(gs[:2,:2])\nsns.countplot(x='Sex',hue='Survived', data=train, ax=ax_sex_survived, \n              palette=survived_palette)\n\nax_survived_sex = fig.add_subplot(gs[:2,2:4], sharey=ax_sex_survived)\nsns.countplot(x='Survived',hue='Sex', data=train, ax=ax_survived_sex,\n              palette=sex_palette\n             )\n\n# ax_survived_sex.set_yticks([])\nax_survived_sex.set_ylabel('')\n\nax_pie_male = fig.add_subplot(gs[2, 0])\nax_pie_female = fig.add_subplot(gs[2, 1])\nax_pie_notsurvived = fig.add_subplot(gs[2, 2])\nax_pie_survived = fig.add_subplot(gs[2, 3])\n\n# Sex\nmale = train[train['Sex']=='male']['Survived'].value_counts().sort_index()\nax_pie_male.pie(male, labels=male.index, autopct='%1.1f%%',explode = (0, 0.1), startangle=90,\n               colors=survived_palette\n               )\n\nfemale = train[train['Sex']=='female']['Survived'].value_counts().sort_index()\nax_pie_female.pie(female, labels=female.index, autopct='%1.1f%%',explode = (0, 0.1), startangle=90,\n                colors=survived_palette\n                 )\n\n# Survived\nnotsurvived = train[train['Survived']==0]['Sex'].value_counts()[['male', 'female']]\nax_pie_notsurvived.pie(notsurvived, labels=notsurvived.index, autopct='%1.1f%%',startangle=90,\n                      colors=sex_palette, textprops={'color':\"w\"}\n                      )\n\nsurvived = train[train['Survived']==1]['Sex'].value_counts()[['male', 'female']]\nax_pie_survived.pie(survived, labels=survived.index, autopct='%1.1f%%', startangle=90,\n                    colors=sex_palette, textprops={'color':\"w\"}\n                   )\n\nfig.suptitle('[Sex & Survived] Conditional Distribution', fontweight='bold', fontsize=20)\nfig.text(s='''Gender and survival are the most important features of the existing Titanic problem.\\nLook at each conditional probability and think of the minimum score''', \n         x=0.5, y= 0.94, ha='center', va='top')\n\nplt.show()","5d229aa3":"def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ntrain['Age band'] = train['Age'].apply(age_band)\ntitanic_age = train[['Age band', 'Survived']].groupby('Age band')['Survived'].value_counts().sort_index().unstack().fillna(0)\ntitanic_age['Survival rate'] = titanic_age[1] \/ (titanic_age[0] + titanic_age[1]) * 100\nage_band = train['Age band'].value_counts().sort_index()\n","df6f2cb3":"from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable\n\nfig = plt.figure(figsize=(15, 10))\ngs = fig.add_gridspec(3, 4)\nax = fig.add_subplot(gs[:-1,:])\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[2] = light_palette[3]\ncolor_map[8] = light_palette[2]\n\n\nbars = ax.bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\nax.spines[[\"top\",\"right\",\"left\"]].set_visible(False)\nax.bar_label(bars, fmt='%.2f%%')\n\n\n# mean line + annotation\nmean = train['Survived'].mean() *100\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=('20 ~ 30', mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n\nax.set_yticks(np.arange(0, 81, 20))\nax.grid(axis='y', linestyle='-', alpha=0.4)\nax.set_ylim(0, 85)\n\n\nax_bottom = fig.add_subplot(gs[-1,:])\nbars = ax_bottom.bar(age_band.index, age_band, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\nax_bottom.spines[[\"top\",\"right\",\"left\"]].set_visible(False)\nax_bottom.bar_label(bars, fmt='%d', label_type='center', color='white')\nax_bottom.grid(axis='y', linestyle='-', alpha=0.4)\n\n# Title & Subtitle    \nfig.text(0.1, 1, 'Age Band & Survival Rate', fontsize=15, fontweight='bold', fontfamily='serif', ha='left')\nfig.text(0.1, 0.96, 'Unlike before, the survival rate of infants and toddlers is very low.', fontsize=12, fontweight='light', fontfamily='serif', ha='left')\n\nplt.show()","298c41a3":"sibsp = train.groupby('SibSp')['Survived'].mean().sort_index()*100\nparch = train.groupby('Parch')['Survived'].mean().sort_index()*100\n\nfig, axes = plt.subplots(2, 2, figsize=(17, 12))\n\n# Ratio 1\naxes[0][0].bar(height=100, x=sibsp.index, color='#dedede')\nhbar1 = axes[0][0].bar(height=sibsp, x=sibsp.index, color=light_palette[2])\naxes[0][0].bar_label(hbar1, fmt='%.01f%%', padding=2)\n\n# Bar1\nsibsp_cnt = train['SibSp'].value_counts().sort_index()\nbar1 = axes[1][0].bar(height=sibsp_cnt, x=sibsp_cnt.index)\naxes[1][0].bar_label(bar1, fmt='%d', padding=2)\n\n# Ratio 2\naxes[0][1].bar(height=100, x=parch.index, color='#dedede')\nhbar2 = axes[0][1].bar(height=parch, x=parch.index, color=light_palette[2])\naxes[0][1].bar_label(hbar2, fmt='%.01f%%', padding=2)\n\n# Bar2\nparch_cnt = train['Parch'].value_counts().sort_index()\nbar2 = axes[1][1].bar(height=parch_cnt, x=parch_cnt.index)\naxes[1][1].bar_label(bar2, fmt='%d', padding=2)\n\nfor ax in axes.flatten():\n    ax.set_yticks([])\n    ax.set_xticks(range(0, max(parch.index)+1))\n    ax.spines[['bottom', 'left']].set_visible(False)\n\naxes[0][0].axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\naxes[0][1].axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\n\nfor idx, ax in enumerate(axes[0]):\n    ax.annotate(f\"mean : {mean :.4}%\", \n            xy=(6.5+idx, mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a', fontsize=10,\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\naxes[0][0].set_title('Siblings\/Spouses Survived Ratio', fontsize=14, fontweight='bold')\naxes[0][1].set_title('Parent\/Children Survived Ratio', fontsize=14, fontweight='bold')\n\n\n\nplt.show()","29c97956":"train['Family'] = train['SibSp'] + train['Parch']\nfamily_ratio = train.groupby('Family')['Survived'].mean() * 100","17cef954":"\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\n\ncolor_map = ['#d4dddd' for _ in range(len(family_ratio))]\ncolor_map[np.argmax(family_ratio)] = light_palette[2]\n\n\nbars = ax.bar(family_ratio.index, family_ratio, \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\nax.spines[[\"top\",\"right\",\"left\"]].set_visible(False)\nax.bar_label(bars, fmt='%.2f%%')\n\n# mean line + annotation\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=(15, mean + 2),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n# Title & Subtitle    \nfig.text(0.06, 1, '# of Family & Survived', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.06, 0.96, 'The more family members there are, the lower the survival rate tends to be.', fontsize=12, fontweight='light', fontfamily='serif')\n\nax.set_yticks([])\nax.set_xticks(np.arange(0, max(family_ratio.index)+1))\nax.grid(axis='y', linestyle='-', alpha=0.4)\nax.set_ylim(0, 65)\n\nfig.tight_layout()\nplt.show()","249a8e42":"fig = plt.figure(figsize=(12, 8))\n\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = light_palette[-3:]\n\nfor idx, cls, c in zip(range(3), sorted(train['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=train[train['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.20, \n                lw=1.4, edgecolor='lightgray',color=c, alpha=1) \n    \n    axes[idx].set_ylim(0, 0.035)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n\n\n    axes[idx].spines[[\"top\",\"right\",\"left\",\"bottom\"]].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n\nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\nplt.show()    ","550aaab8":"fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\n\nfor idx, cls, c in zip(range(3), sorted(train['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=train[train['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.20, \n                lw=1.4, edgecolor='lightgray', hue='Survived', \n                palette=survived_palette, alpha=0.7\n               ) \n    \n    axes[idx].set_ylim(0, 0.025)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    axes[idx].spines[[\"top\",\"right\",\"left\",\"bottom\"]].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 1 : axes[idx].get_legend().remove()\n        \nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\n\nplt.show()   ","6dc54d4d":"fig, axes = plt.subplots(1, 2, figsize=(10, 5))\nfor idx, feature in enumerate(['Pclass', 'Embarked']):\n    sns.heatmap(train.groupby(['Sex', feature])['Survived'].aggregate('mean').unstack()*100, ax=axes[idx],\n                square=True, annot=True, fmt='.2f', center=mean, linewidth=2,\n                cbar_kws={\"orientation\": \"horizontal\"}, cmap=sns.diverging_palette(240, 10, as_cmap=True)\n               ) \n\naxes[0].set_title('Sex & Pclass Survived Ratio', loc='left', fontweight='bold')    \naxes[1].set_title('Sex & Embarked Survived Ratio', loc='left', fontweight='bold')    \nplt.show()","29507018":"fig, axes = plt.subplots(2, 1, figsize=(12 , 9), sharex=True)\n\nfor idx, feature in enumerate(['Pclass', 'Embarked']):\n    sns.heatmap(train.groupby([feature, 'Age band'])['Survived'].aggregate('mean').unstack()*100, ax=axes[idx],\n                square=True, annot=True, fmt='.2f', center=mean, linewidth=2,\n                cbar=False, cmap=sns.diverging_palette(240, 10, as_cmap=True)\n               ) \n\naxes[0].set_title('Pclass & Age Band Survived Ratio', loc='left', fontweight='bold')    \naxes[1].set_title('Embarked & Age Band Survived Ratio', loc='left', fontweight='bold')       \nplt.show()","d85d5960":"fig, ax = plt.subplots(1, 3, figsize=(17 , 5))\n\nfeature_lst = ['Pclass', 'Age', 'SibSp','Parch','Fare', 'Family']\n\ncorr = train[feature_lst].corr()\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n\nfor idx, method in enumerate(['pearson', 'kendall', 'spearman']):\n    sns.heatmap(train[feature_lst].corr(method=method), ax=ax[idx],\n            square=True, annot=True, fmt='.2f', center=0, linewidth=2,\n            cbar=False, cmap=sns.diverging_palette(240, 10, as_cmap=True),\n            mask=mask\n           ) \n    ax[idx].set_title(f'{method.capitalize()} Correlation', loc='left', fontweight='bold')     \n\nplt.show()","85e80672":"def converter(x):\n    c, n = '', ''\n    x = str(x).replace('.', '').replace('\/','').replace(' ', '')\n    for i in x:\n        if i.isnumeric():\n            n += i\n        else :\n            c += i \n    if n != '':\n        return c, int(n)\n    return c, np.nan\n\ntrain['Ticket_type'] = train['Ticket'].apply(lambda x: converter(x)[0])\ntrain['Ticket_number'] = train['Ticket'].apply(lambda x: converter(x)[1])","2c0aa397":"# viz from myself : https:\/\/www.kaggle.com\/subinium\/showusthedata-eda-visualization-utils\nfig = plt.figure(figsize=(15, 7))\n\ngs = fig.add_gridspec(5, 6)\n\nax1 = fig.add_subplot(gs[0,:])\ndataset_label = train['Ticket_type'].value_counts()[1:]\nax1.bar(dataset_label.index, dataset_label,\n       color=[light_palette[0]]*10 + ['#d4dddd']*(len(dataset_label) - 21)\n       )\nax1.set_xticks([])\n\n\nax2 = fig.add_subplot(gs[1:,:])\ndataset_label = train['Ticket_type'].value_counts()[1:11]\nax2.bar(dataset_label.index, dataset_label)\nax2.set_xticks(range(len(dataset_label.index)))\nax2.set_xticklabels(dataset_label.index, rotation = 90)\n\n\nfig.text(0.125,0.9,'Ticket Type Distribution', fontsize=20, fontweight='bold', fontfamily='serif')\nplt.show()","b22ba324":"nan_data = (train.isna().sum().sort_values(ascending=False) \/ len(train) * 100)[:6]\nfig, ax = plt.subplots(1,1,figsize=(7, 5))\n\nax.bar(nan_data.index, 100, color='#dadada', width=0.6)\n\nbar = ax.bar(nan_data.index,nan_data, color=light_palette[1], width=0.6)\nax.bar_label(bar, fmt='%.01f %%')\nax.spines.left.set_visible(False)\nax.set_yticks([])\nax.set_title('Null Data Ratio', fontweight='bold')\n\nplt.show()","52f1f9c8":"pd.pivot_table(train, values='Fare', index=['Family'],\n               columns=['Survived'], aggfunc=[np.mean, np.std]).style.bar(subset=['mean'], color='#205ff2').background_gradient(subset=['std'], cmap='Reds')","49a8112c":"pd.pivot_table(train, values='Fare', index=['Family'],\n               columns=['Pclass'], aggfunc=[np.mean, np.std]).style.bar(subset=['mean'], color='#205ff2').background_gradient(subset=['std'], cmap='Reds')","b2cbbef8":"fig = plt.figure(figsize=(21, 12))\ngs = fig.add_gridspec(5,3)\nax = fig.add_subplot(gs[:2,:])\n\nsns.lineplot(\n    data=train,\n    x=\"Family\", y=\"Fare\", hue=\"Survived\", style='Survived', ax=ax, hue_order=[1, 0]\n)\n\nax.set_xticks(range(18))\nax.set_title('Family Size & Fare (Survived)', fontsize=13, fontweight='bold', loc='left')\n\nfor pclass in [1, 2, 3]:\n    ax = fig.add_subplot(gs[2,pclass-1])\n    sns.lineplot(\n        data=train[train['Pclass']==pclass],\n        x=\"Family\", y=\"Fare\", hue=\"Survived\", style='Survived', hue_order=[1, 0], ax=ax\n    )\n    ax.set_xticks(range(18))\n    ax.set_title(f'Pclass={pclass}', fontweight='bold', loc='left', color=light_palette[-4+pclass])\n\n    \nax = fig.add_subplot(gs[3:,:])\n\nsns.lineplot(\n    data=train,\n    x=\"Family\", y=\"Fare\", hue=\"Pclass\", palette=[mpl.colors.to_hex(i) for i in light_palette[-3:]], \n    hue_order=[1,2,3], ax=ax\n)\n\nax.set_xticks(range(18))\nax.set_title('Family Size & Fare (Pclass)', fontsize=13, fontweight='bold', loc='left')\n    \nfig.tight_layout()    \nplt.show()","f8767b5e":"fig = plt.figure(figsize=(17, 10))\ngs = fig.add_gridspec(2,3)\nax = fig.add_subplot(gs[:,:2])\nsns.scatterplot(x='Age', y='Fare', hue='Survived', size=10, palette=survived_palette, data=train, ax=ax)\nax.set_title(f'Age & Fare', loc='left', fontweight='bold')\n\nfor survived in [0, 1]:\n    ax = fig.add_subplot(gs[survived,2])\n    sns.histplot(x='Age', y='Fare', color=survived_palette[survived], data=train[train['Survived']==survived], ax=ax)\n    ax.set_title(f'Survived={survived}', loc='left', fontweight='bold')\n    \nplt.show()","42a29c35":"Let's fill in the data a bit with the ratio of null data","a49ca919":"## Pclass & Survived \n\nRidgplot has visual distortion, but is good for lightly comparing the shapes of different distributions.\n","1f769079":"Separated by Pclass, it is as follows.","f852900e":"Most Visulization **reference** : https:\/\/www.kaggle.com\/subinium\/awesome-visualization-with-titanic-dataset\n\n## About Titanic\n\n> wikipedia : https:\/\/en.wikipedia.org\/wiki\/Titanic\n\n```\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean on 15 April \n\n1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers \n\nand crew aboard, more than 1,500 died, making the sinking at the time one of the deadliest of a single ship[a] and the \n\ndeadliest peacetime sinking of a superliner or cruise ship to date. With much public attention in the aftermath the disaster \n\nhas since been the material of many artistic works and a founding material of the disaster film genre.\n```\n\n\n","8b5e3f07":"### Please be sure to leave a reference when using code or taking ideas in my visualizations.","bdd86ce6":"## Null Data Visualization & Thinking","ed88aefd":"It tends to decrease according to the number of family members, and there seems to be a certain price difference depending on whether or not they survive.","6b8653dc":"## Age Distribution Check\n\nIn the past, <b style='color:green'>green<\/b> has been a good way to indicate safety and <b style='color:red'>red<\/b> to indicate danger.\n\nThe lowest survival rate is red, and the best is green.","b462e24a":"### Feature Engineering : Family\n\nIn the past, in Titanic feature engineering, it was common to combine `SibSp` and `Parch` to create `Family` features. \n\nLet's take a look.","182d4cbb":"## Dataset Correlation","92ae9c70":"## SibSp & Parch\n\nSurvival rates by `SibSp`, `Parch` feature are as follows:","346b7811":"## Ticket EDA","74699f69":"## [TPS-Apr] Highlighting the Data \u2728\u2728\u2728\n\n> Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https:\/\/media.nationalgeographic.org\/assets\/photos\/000\/273\/27302_c0-41-990-701_r1050x700.jpg?d4ccf3044d9da0d0118103be3a76bd1319370847)\n\nThis time, let's take a look at how we can emphasize more in the visualization.\n\nI focused on the train dataset to do visualization and EDA.\n\nIt would be nice to refer to other notebooks for the difference between train and test.\n\n> Based on this EDA, automl inference notebook is [here](https:\/\/www.kaggle.com\/subinium\/how-to-use-pycaret-with-feature-engineering).","f2318cac":"## Matplotlib Color & Default Setting\n\n- reference : https:\/\/www.kaggle.com\/subinium\/dark-mode-visualization-apple-version","748385f0":"We can look at the different density of Fare depending on whether it survives or not.","b1ef1489":"### Fare Data Distribution","a077047f":"The data features themselves are like titanic and the total number has increased a lot.","af5ebd02":"Let's compare it according to whether it survives.","cdc28707":"### Null Data Scale Check","07058ae4":"## Import Dataset","e7135151":"### Age Data Distribution","d7abd885":"## Features & Survived Heatmap\n\nLet's see the probability of survival on 2 or more combined features.","3485e9f0":"`Ticket` has alphabet part(type) + numeric part(number)","53c58e1b":"## Sex & Survived \n\n- Survival is visualized with more focus on the survivors using `gray` and `green`."}}