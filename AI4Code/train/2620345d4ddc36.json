{"cell_type":{"0aea8749":"code","fc10b941":"code","28f451a4":"code","d39fc4e3":"code","83322623":"code","99efece0":"code","263f49f6":"code","b5730b78":"code","53375085":"code","b38bc961":"code","42d97044":"code","ccd057ee":"code","98dea646":"code","c39eb775":"code","d12f0020":"code","ad14c91c":"code","22b76daa":"code","2e8333bc":"code","d2c97ba3":"code","26d85525":"code","67b4acc7":"code","0abc9fa7":"code","c5eb3362":"code","0fca8902":"code","db7cff4e":"code","71e1d3ae":"code","1a59e7bf":"code","33d9c980":"code","c543c665":"code","53a27c9c":"code","79009ef8":"code","8facfc57":"code","74058e8f":"code","d3d1f757":"code","1dd813b4":"code","e857fcba":"code","57eebe0d":"code","f54a3460":"code","7b906bd9":"code","bc610ec2":"code","ed741c1c":"code","3cd641f8":"code","0bbb4926":"code","ffbda3bc":"code","33646524":"code","00f1978c":"code","b4c26efd":"code","d653bd2b":"code","1f6bbfed":"code","e7bf908e":"code","9e0008a6":"code","eae9ff4d":"code","00029610":"code","adf0e452":"code","5e947771":"code","1b7f5a02":"code","efcf17c9":"code","867c206c":"code","d3c2b900":"code","d224e672":"code","f54742ea":"code","802eb974":"code","246de2b8":"code","68eb3329":"code","c672b3f3":"code","5cc4cc60":"code","381cd112":"code","1cae6f3a":"code","69234b86":"code","1a019e10":"code","00606fb9":"code","f108a6c6":"code","82025025":"code","5cb4fd3c":"code","e75c0166":"code","d6d31e7a":"code","5617505a":"code","884521d0":"code","e2d5a9cb":"code","20a1d363":"code","c1182c7e":"code","56d56721":"code","7cf8843a":"code","270cd14e":"code","8e7348b3":"code","73366535":"code","a23dd42b":"code","86dc3a46":"code","7654a693":"code","c5f37db3":"code","b9b7b066":"code","d203ba13":"code","0e377c4f":"code","5305af9f":"code","341ed4a9":"code","daa28f9a":"code","02cd38eb":"code","f490aace":"code","4fc65151":"code","bca0911e":"code","3ec79e8e":"code","39917eed":"code","720fb793":"code","693e25fd":"code","0a2f4414":"code","6650325e":"code","d1fb45f5":"code","69b40fc6":"code","e3e89c4b":"code","97d5b48c":"code","cbb85208":"code","2622792d":"code","e3f24418":"code","690e6736":"code","78e81848":"code","3018cd5f":"code","9d9b37bc":"code","1e675d8c":"code","4bbc6232":"code","88c823f7":"code","673e2196":"code","be09465e":"code","5073c011":"code","e1c0b4ae":"code","df4d20ad":"code","864ac24a":"code","eb1bd025":"code","86f61ca6":"code","7e22bd8a":"code","218e8f4d":"code","30acc0bd":"code","f24ba7e5":"code","6b07c131":"code","d888202a":"code","65b1aaeb":"code","1f2896b7":"code","3c8db3b4":"markdown","d5112c76":"markdown","d02e004d":"markdown","4297a316":"markdown","b802a8fb":"markdown","52da35f7":"markdown","4e7c188e":"markdown","f91ab407":"markdown","9daa2ed5":"markdown","e75780a4":"markdown","650625e4":"markdown","1623166a":"markdown","4a36ab6c":"markdown","6d88e4d8":"markdown","da74403e":"markdown","6112ba83":"markdown","f9a433d1":"markdown","5325c797":"markdown","5b5d948c":"markdown","8c44f420":"markdown","6f10f1c2":"markdown","21e5b686":"markdown","c4537797":"markdown","f66a7feb":"markdown","8b67b357":"markdown","bbf168ac":"markdown","977a2801":"markdown","30e9d7a2":"markdown","749d1540":"markdown","d32ebe46":"markdown","a20435e5":"markdown","4b23938f":"markdown","a8300962":"markdown","a21a5efa":"markdown","13e53313":"markdown","6d38d43e":"markdown","1c810397":"markdown","298e711a":"markdown","1b17a3de":"markdown","b32b7226":"markdown","cca59917":"markdown","0ef0e879":"markdown","244797b0":"markdown","c00464e7":"markdown","c06401fa":"markdown","c3c12d28":"markdown","19b5507d":"markdown","fe8170fd":"markdown","199813ae":"markdown","9a934673":"markdown","e06aea84":"markdown","bf56f077":"markdown","ab11ee2b":"markdown","5d943eaa":"markdown","38a8589e":"markdown"},"source":{"0aea8749":"import numpy as np\nimport pandas as pd","fc10b941":"labels = ['a','b','c']\nmy_list = [10,20,30]\narr = np.array([10,20,30])\nd = {'a':10,'b':20,'c':30}","28f451a4":"pd.Series(data=my_list)","d39fc4e3":"pd.Series(data=my_list,index=labels)","83322623":"pd.Series(my_list,labels)","99efece0":"pd.Series(arr)","263f49f6":"pd.Series(arr,labels)","b5730b78":"pd.Series(d)","53375085":"pd.Series(data=labels)","b38bc961":"# Even functions (although unlikely that you will use this)\npd.Series([sum,print,len])","42d97044":"ser1 = pd.Series([1,2,3,4],index = ['USA', 'Germany','USSR', 'Japan'])                                   ","ccd057ee":"ser1","98dea646":"ser2 = pd.Series([1,2,5,4],index = ['USA', 'Germany','Italy', 'Japan'])                                   ","c39eb775":"ser2","d12f0020":"ser1['USA']","ad14c91c":"ser1 + ser2","22b76daa":"from numpy.random import randn","2e8333bc":"df = pd.DataFrame(randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split())","d2c97ba3":"df","26d85525":"df['W']","67b4acc7":"# Pass a list of column names\ndf[['W','Z']]","0abc9fa7":"type(df['W'])","c5eb3362":"df['new'] = df['W'] + df['Y']","0fca8902":"df","db7cff4e":"df.drop('new',axis=1)","71e1d3ae":"# Not inplace unless specified!\ndf","1a59e7bf":"df.drop('new',axis=1,inplace=True)","33d9c980":"df","c543c665":"df.drop('E',axis=0)","53a27c9c":"df.loc['A']","79009ef8":"df.iloc[2]","8facfc57":"df.loc['B','Y']","74058e8f":"df.loc[['A','B'],['W','Y']]","d3d1f757":"df","1dd813b4":"df>0","e857fcba":"df[df>0]","57eebe0d":"df[df['W']>0]","f54a3460":"df[df['W']>0]['Y']","7b906bd9":"df[df['W']>0][['Y','X']]","bc610ec2":"df[(df['W']>0) & (df['Y'] > 1)]","ed741c1c":"df","3cd641f8":"# Reset to default 0,1...n index\ndf.reset_index()","0bbb4926":"newind = 'CA NY WY OR CO'.split()","ffbda3bc":"df['States'] = newind","33646524":"df","00f1978c":"df.set_index('States')","b4c26efd":"df","d653bd2b":"df.set_index('States',inplace=True)","1f6bbfed":"df","e7bf908e":"# Index Levels\noutside = ['G1','G1','G1','G2','G2','G2']\ninside = [1,2,3,1,2,3]\nhier_index = list(zip(outside,inside))\nhier_index = pd.MultiIndex.from_tuples(hier_index)","9e0008a6":"hier_index","eae9ff4d":"df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=['A','B'])\ndf","00029610":"df.loc['G1']","adf0e452":"df.loc['G1'].loc[1]","5e947771":"df.index.names\n","1b7f5a02":"df.index.names = ['Group','Num']","efcf17c9":"df","867c206c":"df.xs('G1')","d3c2b900":"df.xs(['G1',1])","d224e672":"df.xs(1,level='Num')","f54742ea":"df = pd.DataFrame({'A':[1,2,np.nan],\n                  'B':[5,np.nan,np.nan],\n                  'C':[1,2,3]})","802eb974":"df","246de2b8":"df.dropna()","68eb3329":"df.dropna(axis=1)","c672b3f3":"df.dropna(thresh=2)","5cc4cc60":"df.fillna(value='FILL VALUE')","381cd112":"df['A'].fillna(value=df['A'].mean())","1cae6f3a":"\n# Create dataframe\ndata = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],\n       'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'],\n       'Sales':[200,120,340,124,243,350]}","69234b86":"df = pd.DataFrame(data)","1a019e10":"df","00606fb9":"df.groupby('Company')","f108a6c6":"by_comp = df.groupby(\"Company\")","82025025":"by_comp.mean()","5cb4fd3c":"df.groupby('Company').mean()","e75c0166":"by_comp.std()","d6d31e7a":"by_comp.min()","5617505a":"by_comp.max()","884521d0":"by_comp.count()","e2d5a9cb":"by_comp.describe()","20a1d363":"by_comp.describe().transpose()","c1182c7e":"by_comp.describe().transpose()['GOOG']","56d56721":"df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3'],\n                        'C': ['C0', 'C1', 'C2', 'C3'],\n                        'D': ['D0', 'D1', 'D2', 'D3']},\n                        index=[0, 1, 2, 3])","7cf8843a":"df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                        'B': ['B4', 'B5', 'B6', 'B7'],\n                        'C': ['C4', 'C5', 'C6', 'C7'],\n                        'D': ['D4', 'D5', 'D6', 'D7']},\n                         index=[4, 5, 6, 7]) ","270cd14e":"df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                        'B': ['B8', 'B9', 'B10', 'B11'],\n                        'C': ['C8', 'C9', 'C10', 'C11'],\n                        'D': ['D8', 'D9', 'D10', 'D11']},\n                        index=[8, 9, 10, 11])","8e7348b3":"df1","73366535":"df2","a23dd42b":"df3","86dc3a46":"pd.concat([df1,df2,df3])","7654a693":"pd.concat([df1,df2,df3],axis=1)","c5f37db3":"left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                     'A': ['A0', 'A1', 'A2', 'A3'],\n                     'B': ['B0', 'B1', 'B2', 'B3']})\n   \nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                          'C': ['C0', 'C1', 'C2', 'C3'],\n                          'D': ['D0', 'D1', 'D2', 'D3']})  ","b9b7b066":"left","d203ba13":"right","0e377c4f":"pd.merge(left,right,how='inner',on='key')","5305af9f":"left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],\n                     'key2': ['K0', 'K1', 'K0', 'K1'],\n                        'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3']})\n    \nright = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],\n                               'key2': ['K0', 'K0', 'K0', 'K0'],\n                                  'C': ['C0', 'C1', 'C2', 'C3'],\n                                  'D': ['D0', 'D1', 'D2', 'D3']})","341ed4a9":"pd.merge(left, right, on=['key1', 'key2'])","daa28f9a":"pd.merge(left, right, how='outer', on=['key1', 'key2'])","02cd38eb":"pd.merge(left, right, how='right', on=['key1', 'key2'])","f490aace":"pd.merge(left, right, how='left', on=['key1', 'key2'])","4fc65151":"left = pd.DataFrame({'A': ['A0', 'A1', 'A2'],\n                     'B': ['B0', 'B1', 'B2']},\n                      index=['K0', 'K1', 'K2']) \n\nright = pd.DataFrame({'C': ['C0', 'C2', 'C3'],\n                    'D': ['D0', 'D2', 'D3']},\n                      index=['K0', 'K2', 'K3'])","bca0911e":"left.join(right)","3ec79e8e":"left.join(right, how='outer')","39917eed":"import pandas as pd\ndf = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})\ndf.head()","720fb793":"df['col2'].unique()","693e25fd":"df['col2'].nunique()","0a2f4414":"df['col2'].value_counts()","6650325e":"#Select from DataFrame using criteria from multiple columns\nnewdf = df[(df['col1']>2) & (df['col2']==444)]","d1fb45f5":"newdf","69b40fc6":"def times2(x):\n    return x*2","e3e89c4b":"df['col1'].apply(times2)","97d5b48c":"df['col3'].apply(len)","cbb85208":"df['col1'].sum()","2622792d":"del df['col1']","e3f24418":"df","690e6736":"df.columns","78e81848":"df.index","3018cd5f":"df","9d9b37bc":"df.sort_values(by='col2') #inplace=False by default","1e675d8c":"df.isnull()","4bbc6232":"# Drop rows with NaN Values\ndf.dropna()","88c823f7":"import numpy as np","673e2196":"df = pd.DataFrame({'col1':[1,2,3,np.nan],\n                   'col2':[np.nan,555,666,444],\n                   'col3':['abc','def','ghi','xyz']})\ndf.head()","be09465e":"df.fillna('FILL')","5073c011":"data = {'A':['foo','foo','foo','bar','bar','bar'],\n     'B':['one','one','two','two','one','one'],\n       'C':['x','y','x','y','x','y'],\n       'D':[1,3,2,5,4,1]}\n\ndf = pd.DataFrame(data)","e1c0b4ae":"df","df4d20ad":"df.pivot_table(values='D',index=['A', 'B'],columns=['C'])","864ac24a":"import numpy as np\nimport pandas as pd","eb1bd025":"#df = pd.read_csv('the name of you .csv file')\n#df","86f61ca6":"df.to_csv('example',index=False)","7e22bd8a":"#pd.read_excel('Excel_Sample.xlsx',sheetname='Sheet1')","218e8f4d":"df.to_excel('Excel_Sample.xlsx',sheet_name='Sheet1')","30acc0bd":"# df = pd.read_html('http:\/\/www.fdic.gov\/bank\/individual\/failed\/banklist.html')","f24ba7e5":"from sqlalchemy import create_engine","6b07c131":"engine = create_engine('sqlite:\/\/\/:memory:')","d888202a":"df.to_sql('data', engine)","65b1aaeb":"sql_df = pd.read_sql('data',con=engine)","1f2896b7":"sql_df","3c8db3b4":"# SQL (Optional)\n\n* Note: If you are completely unfamiliar with SQL you can check out my other course: \"Complete SQL Bootcamp\" to learn SQL.","d5112c76":"** Get column and index names: **","d02e004d":"The first main data type we will learn about for pandas is the Series data type. Let's import Pandas and explore the Series object.\n\nA Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn't need to hold numeric data, it can hold any arbitrary Python Object.\n\nLet's explore this concept through some examples:","4297a316":"## Using an Index\n\nThe key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary).\n\nLet's see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2:","b802a8fb":"### Info on Unique Values","52da35f7":"More examples of aggregate methods:","4e7c188e":"Can also drop rows this way:","f91ab407":"Or select based off of position instead of label ","9daa2ed5":"** Sorting and Ordering a DataFrame:**","e75780a4":"You can save this object as a new variable:","650625e4":"** NumPy Arrays **","1623166a":"Operations are then also done based off of index:","4a36ab6c":"# Series","6d88e4d8":"** Selecting subset of rows and columns **","da74403e":"### Example DataFrames","6112ba83":"** Filling in NaN values with something else: **","f9a433d1":"## Excel\nPandas can read and write excel files, keep in mind, this only imports data. Not formulas or images, having images or macros may cause this read_excel method to crash. \n\n### Excel Input","5325c797":"** Dictionary**","5b5d948c":"### Conditional Selection\n\nAn important feature of pandas is conditional selection using bracket notation, very similar to numpy:","8c44f420":"**Creating a new column:**","6f10f1c2":"### Excel Output","21e5b686":"# Introduction to Pandas\n\nIn this kernel we will learn how to use pandas for data analysis. You can think of pandas as an extremely powerful version of Excel, with a lot more features. In this section of the course, you should go through the notebooks in this order:\n\n* Introduction to Pandas\n* Series\n* DataFrames\n* Missing Data\n* GroupBy\n* Merging,Joining,and Concatenating\n* Operations\n* Data Input and Output","c4537797":"# Groupby\n\nThe groupby method allows you to group rows of data together and call aggregate functions","f66a7feb":"For two conditions you can use | and & with parenthesis:","8b67b357":"# Missing Data\n\nLet's show a few convenient methods to deal with Missing Data in pandas:","bbf168ac":"**DataFrame Columns are just Series**","977a2801":"## CSV\n\n### CSV Input","30e9d7a2":"And then call aggregate methods off the object:","749d1540":"### Selecting Data","d32ebe46":"# Operations\n\nThere are lots of operations with pandas that will be really useful to you, but don't fall into any distinct category. Let's show them here in this lecture:","a20435e5":"** Removing Columns**","4b23938f":"# DataFrames\n\nDataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let's use pandas to explore this topic!","a8300962":"Now let's show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe:","a21a5efa":"Or to show a more complicated example:","13e53313":"## Joining\nJoining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame.","6d38d43e":"## More Index Details\n\nLet's discuss some more features of indexing, including resetting the index or setting it something else. We'll also talk about index hierarchy!","1c810397":"## Concatenation\n\nConcatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use **pd.concat** and pass in a list of DataFrames to concatenate together:","298e711a":"** Using Lists**","1b17a3de":"** Find Null Values or Check for Null Values**","b32b7226":"## Creating a Series\nYou can convert a list,numpy array, or dictionary to a Series:[](http:\/\/)","cca59917":"### Data in a Series\n\nA pandas Series can hold a variety of object types:","0ef0e879":"** Now you can use the .groupby() method to group rows together based off of a column name. For instance let's group based off of Company. This will create a DataFrameGroupBy object:**","244797b0":"### HTML Input\n\nPandas read_html function will read tables off of a webpage and return a list of DataFrame objects:","c00464e7":"# Data Input and Output\n\nThis is the reference code for getting input and output, pandas can read a variety of file types using its pd.read_ methods. Let's take a look at the most common data types:","c06401fa":"## Merging\n\nThe **merge** function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example:","c3c12d28":"### CSV Output","19b5507d":"### Applying Functions","fe8170fd":"## Multi-Index and Index Hierarchy\n\nLet us go over how to work with Multi-Index, first we'll create a quick example of what a Multi-Indexed DataFrame would look like:","199813ae":"** Selecting Rows**","9a934673":"## HTML\n\nYou may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal\/command prompt run:\n\n    conda install lxml\n    conda install html5lib\n    conda install BeautifulSoup4\n\nThen restart Jupyter Notebook.\n(or use pip install if you aren't using the Anaconda Distribution)\n\nPandas can read table tabs off of html. For example:","e06aea84":"## Selection and Indexing\n\nLet's learn the various methods to grab data from a DataFrame","bf56f077":"# Merging, Joining, and Concatenating\n\nThere are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples.","ab11ee2b":"** Permanently Removing a Column**","5d943eaa":"## Example DataFrames","38a8589e":"The pandas.io.sql module provides a collection of query wrappers to both facilitate data retrieval and to reduce dependency on DB-specific API. Database abstraction is provided by SQLAlchemy if installed. In addition you will need a driver library for your database. Examples of such drivers are psycopg2 for PostgreSQL or pymysql for MySQL. For SQLite this is included in Python\u2019s standard library by default. You can find an overview of supported drivers for each SQL dialect in the SQLAlchemy docs.\n\n\nIf SQLAlchemy is not installed, a fallback is only provided for sqlite (and for mysql for backwards compatibility, but this is deprecated and will be removed in a future version). This mode requires a Python database adapter which respect the Python DB-API.\n\nSee also some cookbook examples for some advanced strategies.\n\nThe key functions are:\n\n* read_sql_table(table_name, con[, schema, ...])\t\n    * Read SQL database table into a DataFrame.\n* read_sql_query(sql, con[, index_col, ...])\t\n    * Read SQL query into a DataFrame.\n* read_sql(sql, con[, index_col, ...])\t\n    * Read SQL query or database table into a DataFrame.\n* DataFrame.to_sql(name, con[, flavor, ...])\t\n    * Write records stored in a DataFrame to a SQL database."}}