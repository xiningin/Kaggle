{"cell_type":{"73e60b6f":"code","f1019544":"code","bb6a69db":"code","7da3e5f1":"code","a6ebc3e4":"code","fca30600":"code","765c9e53":"code","cffbee8b":"code","45ee064b":"code","8b9a8ec2":"code","aaebcee5":"code","41833ab3":"code","c1aafa1f":"code","eb8c2615":"code","47f93a9c":"code","82830998":"code","35adafc3":"code","06dec250":"code","5d740c3c":"code","b18237fe":"markdown","613526af":"markdown","1fc5514d":"markdown","b3aaa85c":"markdown","7e6d81a5":"markdown","0cfd0eee":"markdown","1969fd66":"markdown","e8bf419f":"markdown","1c03ffac":"markdown","063e2d23":"markdown","802eaf1c":"markdown"},"source":{"73e60b6f":"import numpy as np \nimport pandas as pd\nimport matplotlib as mpl \nimport matplotlib.pyplot as plt\nimport seaborn as sns","f1019544":"student = pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')","bb6a69db":"# Subinium's Code\n\nraw_light_palette = [\n    (0, 122, 255), # Blue\n    (255, 149, 0), # Orange\n    (52, 199, 89), # Green\n    (255, 59, 48), # Red\n    (175, 82, 222),# Purple\n    (255, 45, 85), # Pink\n    (88, 86, 214), # Indigo\n    (90, 200, 250),# Teal\n    (255, 204, 0)  # Yellow\n]\n\nraw_dark_palette = [\n    (10, 132, 255), # Blue\n    (255, 159, 10), # Orange\n    (48, 209, 88),  # Green\n    (255, 69, 58),  # Red\n    (191, 90, 242), # Purple\n    (94, 92, 230),  # Indigo\n    (255, 55, 95),  # Pink\n    (100, 210, 255),# Teal\n    (255, 214, 10)  # Yellow\n]\n\nraw_gray_light_palette = [\n    (142, 142, 147),# Gray\n    (174, 174, 178),# Gray (2)\n    (199, 199, 204),# Gray (3)\n    (209, 209, 214),# Gray (4)\n    (229, 229, 234),# Gray (5)\n    (242, 242, 247),# Gray (6)\n]\n\nraw_gray_dark_palette = [\n    (142, 142, 147),# Gray\n    (99, 99, 102),  # Gray (2)\n    (72, 72, 74),   # Gray (3)\n    (58, 58, 60),   # Gray (4)\n    (44, 44, 46),   # Gray (5)\n    (28, 28, 39),   # Gray (6)\n]\n\n\nlight_palette = np.array(raw_light_palette)\/255\ndark_palette = np.array(raw_dark_palette)\/255\ngray_light_palette = np.array(raw_gray_light_palette)\/255\ngray_dark_palette = np.array(raw_gray_dark_palette)\/255\n\nprint('Light mode palette')\nsns.palplot(light_palette)\nsns.palplot(gray_light_palette)\n\nprint('Dark mode palette')\nsns.palplot(dark_palette)\nsns.palplot(gray_dark_palette)\n","7da3e5f1":"from cycler import cycler\n\nmpl.rcParams['axes.prop_cycle'] = cycler('color',dark_palette)\nmpl.rcParams['figure.facecolor']  = gray_dark_palette[-2]\nmpl.rcParams['figure.edgecolor']  = gray_dark_palette[-2]\nmpl.rcParams['axes.facecolor'] =  gray_dark_palette[-2]\n\nwhite_color = gray_light_palette[-2]\nmpl.rcParams['text.color'] = white_color\nmpl.rcParams['axes.labelcolor'] = white_color\nmpl.rcParams['axes.edgecolor'] = white_color\nmpl.rcParams['xtick.color'] = white_color\nmpl.rcParams['ytick.color'] = white_color\n\nmpl.rcParams['figure.dpi'] = 150\n\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False","a6ebc3e4":"def score_distribution(f1, f2):\n    fig = plt.figure(figsize=(12, 10),dpi=150)\n\n    gs = fig.add_gridspec(5, 6)\n\n    ax = fig.add_subplot(gs[:,:5])\n    ax.set_aspect(1)\n\n    for group in sorted(student['race\/ethnicity'].unique()):\n        student_sub = student[student['race\/ethnicity']==group]\n        ax.scatter(student_sub[f'{f1} score'], student_sub[f'{f2} score'], \n                   s=20, alpha=0.6, \n                   linewidth=0.5, \n                   label=group\n                  )\n\n    sub_axes = [None] * 5\n    for idx, group in enumerate(sorted(student['race\/ethnicity'].unique())):\n        sub_axes[idx] = fig.add_subplot(gs[idx,5], aspect=1)\n        sub_axes[idx].scatter(student[student['race\/ethnicity']!=group][f'{f1} score'], student[student['race\/ethnicity']!=group][f'{f2} score'], \n                              s=5, alpha=0.2, \n                              color= white_color,\n                              linewidth=0.7, \n                              label=group,\n                              zorder=5\n                  )\n        sub_axes[idx].scatter(student[student['race\/ethnicity']==group][f'{f1} score'], student[student['race\/ethnicity']==group][f'{f2} score'], \n                              s=5, alpha=0.6, \n                              color= dark_palette[idx],\n                              linewidth=0.5, \n                              label=group,\n                              zorder=10\n                  )\n        cnt = (student['race\/ethnicity']==group).sum()\n        sub_axes[idx].set_title(f'{group} ({cnt})', loc='left', fontsize=9)\n        sub_axes[idx].set_xticks([])\n        sub_axes[idx].set_yticks([])\n\n    for axes in [ax] + sub_axes:\n        axes.set_xlim(-3, 103)\n        axes.set_ylim(-3, 103)\n\n    ax.set_title(f'{f1.capitalize()} & {f2.capitalize()} Score Distribution', loc='left', fontsize=15, fontweight='bold')    \n    ax.set_xlabel(f'{f1.capitalize()} Score', fontweight='medium')\n    ax.set_ylabel(f'{f2.capitalize()} Score', fontweight='medium')\n    ax.legend(title='Race\/Ethnicity', fontsize=10)\n\n    plt.show()","fca30600":"score_distribution('math', 'reading')","765c9e53":"score_distribution('math', 'writing')","cffbee8b":"score_distribution('reading', 'writing')","45ee064b":"def score_distribution_kde(subject):\n    fig = plt.figure(figsize=(10, 7))\n    gs = fig.add_gridspec(6, 5)\n    ax = fig.add_subplot(gs[:5,:])\n\n    sns.kdeplot(x=subject, hue='race\/ethnicity', data=student,\n                hue_order=sorted(student['race\/ethnicity'].unique()),\n                bw_adjust=0.4,\n                fill=True,ax=ax)\n    \n\n    sub_axes = [None] * 5\n    for idx, group in enumerate(sorted(student['race\/ethnicity'].unique())):\n        sub_axes[idx] = fig.add_subplot(gs[5,idx])\n        sns.kdeplot(x=subject, data=student,\n                    alpha=0.2, \n                  color= white_color,\n                  linewidth=0.7, \n                  label=group, fill=True, bw_adjust=0.4,\n                  zorder=5, ax=sub_axes[idx]\n                  )\n\n        sns.kdeplot(x=subject, data=student[student['race\/ethnicity']==group],\n                    alpha=0.6, \n                      color= dark_palette[idx],\n                      linewidth=0.5, \n                      label=group, fill=True,bw_adjust=0.4,\n                      zorder=10, ax=sub_axes[idx]\n                  )\n        cnt = (student['race\/ethnicity']==group).sum()\n        sub_axes[idx].set_xticks([])\n        sub_axes[idx].set_yticks([])\n        sub_axes[idx].set_xlabel('')\n        sub_axes[idx].set_ylabel('')\n\n    ax.set_title(subject.capitalize(), loc='left', fontweight='bold', fontsize=13)\n\n    fig.tight_layout()\n    plt.show()","8b9a8ec2":"score_distribution_kde('math score')","aaebcee5":"score_distribution_kde('reading score')","41833ab3":"score_distribution_kde('writing score')","c1aafa1f":"iris = pd.read_csv('..\/input\/iris\/Iris.csv')","eb8c2615":"sns.pairplot(iris, hue='Species', corner=True)","47f93a9c":"boxprops = {\n    'boxprops':{'edgecolor':white_color},\n    'medianprops':{'color':white_color},\n    'whiskerprops':{'color':white_color},\n    'capprops':{'color':white_color}\n}\n\nsns.catplot(data=student, x='race\/ethnicity', y='math score',  \n            order=sorted(student['race\/ethnicity'].unique()),\n            row='test preparation course', \n            col='lunch', kind='box', **boxprops)","82830998":"from umap import UMAP\n\nmnist = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nlabel = mnist['label']\nmnist.drop(['label'], inplace=True, axis=1)\n\numap = UMAP(random_state=0)\nmnist_umap = umap.fit_transform(mnist, label)","35adafc3":"fig = plt.figure(figsize=(12, 12))\ngs = fig.add_gridspec(6, 5)\nax = fig.add_subplot(gs[1:-1,1:-1])\n\nsub_axes = [None] * 10\nfor idx in range(10): \n    sub_axes[idx] = fig.add_subplot(gs[0-idx\/\/5,idx%5])\n\nfor idx in range(10):\n    ax.scatter(x=mnist_umap[:,0][label==idx], y=mnist_umap[:,1][label==idx],\n              s=10, alpha=0.1\n              )\n\n    for j in range(10):\n        sub_axes[j].scatter(x=mnist_umap[:,0][label==idx], y=mnist_umap[:,1][label==idx],\n                              s=10, alpha = 0.4 if idx==j else 0.008, color = (dark_palette[j%9]) if idx==j else white_color,\n                            zorder=(idx==j)\n                           )\n        \n    \n    inset_ax = sub_axes[idx].inset_axes([0.81, 0.79, 0.2, 0.2])\n    inset_ax.axis('off')\n    \n    \n    num_idx = label.tolist().index(idx)\n    inset_ax.imshow(mnist.iloc[num_idx].values.reshape(28, 28), cmap='gray')\n    \n    sub_axes[idx].set_xticks([])\n    sub_axes[idx].set_yticks([])\n    sub_axes[idx].set_xlabel('')\n    sub_axes[idx].set_ylabel('')\n    sub_axes[idx].spines['right'].set_visible(True)\n    sub_axes[idx].spines['top'].set_visible(True)\n\nfig.text(0.99, 0.81, '[MNIST] Dimenstion Reduction (UMAP)', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')   \nfig.text(0.99, 0.79, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n    \nax.set_xticks([])\nax.set_yticks([])\nax.set_xlabel('')\nax.set_ylabel('')\nax.spines['left'].set_visible(False)\nax.spines['bottom'].set_visible(False)\n\nfig.tight_layout()\nplt.show()","06dec250":"import plotly.graph_objects as go\n\nx, y, z = student['math score'], student['reading score'], student['writing score']\ngtc = dict(zip(sorted(student['race\/ethnicity'].unique()), raw_dark_palette[:5]))\ncolor = student['race\/ethnicity'].map(gtc)\n\n\nfig = go.Figure(data=[go.Scatter3d(\n    x=x,\n    y=y,\n    z=z,\n    mode='markers',\n    marker=dict(\n        size=5,\n        color=color,\n        opacity=0.8\n    )\n)], layout=go.Layout(\n    plot_bgcolor='rgba(255,0,0,1)',\n    paper_bgcolor=f'rgb{raw_gray_dark_palette[-2]}',\n    font=dict(color='white'))\n)\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\nfig.update_layout(scene = dict(\n                    xaxis_title='MATH',\n                    yaxis_title='READING',\n                    zaxis_title='WRITING',\n    \n                    xaxis = dict(\n                         gridcolor=\"white\",\n                         showbackground=False,\n                         zerolinecolor=\"white\",\n                        range=[0, 100]\n                    ),\n                    yaxis = dict(\n                        gridcolor=\"white\",\n                         showbackground=False,\n                        zerolinecolor=\"white\",\n                        range=[0, 100]\n                    ),\n                    zaxis = dict(\n                        gridcolor=\"white\",\n                         showbackground=False,\n                        zerolinecolor=\"white\",\n                        range=[0, 100]                    \n                    )),\n                    margin=dict(\n                    r=10, l=10,\n                    b=10, t=10)\n                  )\n\ncamera = dict(\n    eye=dict(x=1.4, y=1.4, z=1.4)\n)\n\n\nfig.update_layout(scene_camera=camera)\n\nfig.show()","5d740c3c":"f'rgb({(gray_dark_palette[-2]*255).astype(int)})'","b18237fe":"## Darkmode Pairplot ","613526af":"## Darkmode Dimension Reduction + Scatter Plot","1fc5514d":"```\nColor Management\n\n- Apply color profiles to your images.\n- Use wide color to enhance the visual experience on compatible displays. \n- Provide color space-specific image and color variations when the experience calls for it\n- Preview your app\u2019s colors on actual sRGB and wide color displays.\n```\n","b3aaa85c":"## ETC - Darkmode 3D Plotly","7e6d81a5":"### Matplotlib Default Setting\n\nIt's annoying to override the color every time, so I'll change the default settings.\n\n- [Customizing Matplotlib with style sheets and rcParams](https:\/\/matplotlib.org\/stable\/tutorials\/introductory\/customizing.html)","0cfd0eee":"## Apple Human Interface Guidelines\n\n> https:\/\/developer.apple.com\/design\/human-interface-guidelines\/ios\/visual-design\/color\n\n- Use color judiciously for communication.\n- Use complementary colors throughout your app.\n- In general, choose a limited color palette that coordinates with your app logo. \n- Consider choosing a tint color to indicate interactivity throughout your app.\n- Provide two versions of your tint color to make sure it looks good in both light and dark modes.\n- Avoid using the same color for interactive and noninteractive elements. \n- Consider how artwork and translucency affect nearby colors. \n- Test your app\u2019s color scheme under a variety of lighting conditions.\n- Consider how the True Tone display affects color. \n- Consider how your use of color might be perceived in other countries and cultures.\n- Avoid using colors that make it hard for people to perceive content in your app.\n\n### RGB Color List to Color Palette\n\n> first 5 colors are matching as tab10(matplotlib default colormap)","1969fd66":"## Darkmode Scatter Plot","e8bf419f":"## Dark Mode Visualization (Apple Version)\n\n> Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https:\/\/developer.apple.com\/news\/images\/og\/darkmode-og.jpg)\n\nDark mode is already universally used on mobile and web.\nThis is because it visually reduces fatigue and gives a luxurious feel different from the light mode.\n\nHowever, dark mode is not necessarily completely black. A few different colors are added, so color pallete's harmony is important. Let's implement this harmony through Apple's colors.\n\nLet me show you that `matplotlib` is a really powerful tool.\n\nInstead, please note that it may not be suitable for publication.\n\n#### Personal Opinion\n\nWith a little more modification, it seems that you can make it a custom theme of matplotlib or use matplotlib to implement visualization used in ios. It would be fun to attach it to interactive libraries such as plotly.\n\n\n#### Color Reference \n\n- [Apple | Human Interface Guidelines | Dark Mode](https:\/\/developer.apple.com\/design\/human-interface-guidelines\/ios\/visual-design\/dark-mode\/)","1c03ffac":"## My Related Work\n\n- [\n\ud83d\udc40 Subin's Visualization Notebooks List](https:\/\/www.kaggle.com\/subinium\/subin-s-visualization-notebooks-list)\n\n\n\n## Please be sure to leave a reference when using code or taking ideas in my visualizations.","063e2d23":"## Darkmode KDE Plot\n","802eaf1c":"## Darkmode FacetGrid (catplot)"}}