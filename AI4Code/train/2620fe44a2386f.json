{"cell_type":{"7e3b9dda":"code","e9da8eb0":"code","d9cb0777":"code","331dbce2":"code","defe595c":"code","21497282":"code","0eac9669":"code","c11f399e":"code","83f59473":"code","29aaadda":"code","3a1c801a":"code","605aeee3":"code","d1275a42":"code","04b975a4":"code","22fa8883":"code","8c54fbc5":"code","79701b65":"code","3cbe347b":"code","e43129a3":"code","ae03139d":"code","272c6745":"code","854e4939":"code","5f5bc643":"code","5501b080":"code","0286e8bb":"code","434b524b":"code","f820b027":"code","941b82b6":"code","acc524f6":"code","dd2e3807":"code","5abe2f98":"markdown","8e289d52":"markdown","6718691e":"markdown","370da8a6":"markdown","56394400":"markdown","5e1e9cab":"markdown","5406dfc9":"markdown","f1cfb655":"markdown","24ca0d9c":"markdown","c824906f":"markdown","5cfde6a3":"markdown","4df85c23":"markdown","8c2cbd93":"markdown","7ea4e282":"markdown","872a5b96":"markdown","af2da530":"markdown","0e18a959":"markdown","a85c2272":"markdown","e8896ab3":"markdown","c9a1bacf":"markdown","7107a84b":"markdown","60d822d3":"markdown","abfe6b4f":"markdown","5fc28f0e":"markdown","db0c8bfa":"markdown","1bf913a6":"markdown","6217a1fd":"markdown","47a44cfa":"markdown","81f86e88":"markdown","79ac2940":"markdown","bf980c78":"markdown","c49f6616":"markdown","a9e7cdee":"markdown","89b7a86b":"markdown","f5cf7b7a":"markdown"},"source":{"7e3b9dda":"# data analysis and wrangling\nimport pandas as pd\nfrom pandas_datareader import data\nimport numpy as np\nimport random as rnd\nimport datetime\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')\n%matplotlib inline\n\n# plotly\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport cufflinks as cf\ncf.go_offline()","e9da8eb0":"# set the start date and end date.\nstart = datetime.datetime(2006,1,1)\nend = datetime.datetime(2020,1,1)\n\n# set each bank to be a separate dataframe\nBAC = data.DataReader(\"BAC\", 'yahoo', start, end)\nC = data.DataReader(\"C\", 'yahoo', start, end)\nGS = data.DataReader(\"GS\", 'yahoo', start, end)\nJPM = data.DataReader(\"JPM\", 'yahoo', start, end)\nMS = data.DataReader(\"MS\", 'yahoo', start, end)\nWFC = data.DataReader(\"WFC\", 'yahoo', start, end)\n\n# in case you cannot access the data from yahoo finance\n# BAC = pd.read_csv('..\/input\/banks-historical-stock-price\/BAC.csv')\n# C = pd.read_csv('..\/input\/banks-historical-stock-price\/C.csv')\n# GS = pd.read_csv('..\/input\/banks-historical-stock-price\/GS.csv')\n# JPM = pd.read_csv('..\/input\/banks-historical-stock-price\/JPM.csv')\n# MS = pd.read_csv('..\/input\/banks-historical-stock-price\/MS.csv')\n# WFC = pd.read_csv('..\/input\/banks-historical-stock-price\/WFC.csv')","d9cb0777":"# preview one dataframe\nBAC.head()","331dbce2":"tickers = ['BAC', 'C', 'GS', 'JPM', 'MS', 'WFC']","defe595c":"bank_stocks = pd.concat([BAC, C, GS, JPM, MS, WFC], axis=1, keys=tickers)\n# bank_stocks","21497282":"bank_stocks.columns.names = ['Bank Ticker','Stock Info']\nbank_stocks.head()","0eac9669":"bank_stocks.xs('Close', axis=1, level='Stock Info').max()","c11f399e":"C['Close'].idxmax()","83f59473":"# empty dataframe\nreturns = pd.DataFrame()","29aaadda":"for tick in tickers:\n    returns[tick + ' Return'] = bank_stocks[tick]['Close'].pct_change()\n\nreturns.head(3)","3a1c801a":"sns.pairplot(returns[1:])","605aeee3":"# Biggest single day losses\nreturns.idxmin()","d1275a42":"# Standard Deviation \nreturns.std().plot(kind='bar', color='Green')\nplt.ylabel('Standard Deviation')\nplt.title('Banks Standard Deviation', fontsize=15)\nsns.despine()","04b975a4":"# 2015 Standard Deviation\nreturns.loc['2015-01-01':'2015-12-31'].std().plot(kind='bar', color='Green')\nplt.ylabel('Standard Deviation')\nplt.title('2015 Banks Standard Deviation', fontsize=15)\nsns.despine()","22fa8883":"plt.figure(figsize=(10,8))\nax = sns.distplot(returns.loc['2015-01-01':'2015-12-31']['MS Return'], color='green', bins=50)\nax.set_title('2015 Morgan Stanley Returns')\nax.set_xlabel('Returns')\nax.set_ylabel('Numbers of Returns')","8c54fbc5":"plt.figure(figsize=(10,8))\nax = sns.distplot(returns.loc['2008-01-01':'2008-12-31']['C Return'], color='red', bins=50)\nax.set_title('2008 CitiGroup Returns')\nax.set_xlabel('Returns')\nax.set_ylabel('Numbers of Returns')","79701b65":"plt.figure(figsize=(7,6))\nplt.title('Pearson Correlation Matrix',fontsize=15)\nsns.heatmap(bank_stocks.xs(key='Close', axis=1, level='Stock Info').corr(), annot=True, cmap='GnBu',\n            linewidths=0.25, linecolor='w', cbar_kws={\"shrink\": .7})","3cbe347b":"sns.clustermap(bank_stocks.xs(key='Close', axis=1, level='Stock Info').corr(), annot=True, cmap='coolwarm')","e43129a3":"# Option N\u00b01\nfor tick in tickers:\n    bank_stocks[tick]['Close'].plot(label=tick, figsize=(12,6))\nplt.legend()","ae03139d":"# Option N\u00b02\nbank_stocks.xs('Close', axis=1, level='Stock Info').plot(figsize=(12,6))","272c6745":"# Option N\u00b03\nbank_stocks.xs('Close', axis=1, level='Stock Info').iplot(xTitle='Date', yTitle='Close Price', title='Cufflinks - Close Price for Each Bank')","854e4939":"fig = make_subplots(rows=3, cols=2)\n\ntrace0 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['BAC Return'], nbinsx=50, name=\"BAC\")\ntrace1 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['C Return'], nbinsx=50, name=\"C\")\ntrace2 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['GS Return'], nbinsx=50, name=\"GS\")\ntrace3 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['JPM Return'], nbinsx=50, name=\"JPM\")\ntrace4 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['MS Return'], nbinsx=50, name=\"MS\")\ntrace5 = go.Histogram(x=returns.loc['2018-01-01':'2019-12-31']['WFC Return'], nbinsx=50, name=\"WFC\")\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 2)\nfig.append_trace(trace4, 3, 1)\nfig.append_trace(trace5, 3, 2)\n\nfig.update_layout(title_text='Banks Returns (2018 - 2019)')\n\nfig.show()","5f5bc643":"plt.figure(figsize=(12,6))\nBAC['Close'].loc['2008-01-01':'2008-12-31'].rolling(window=30).mean().plot(color='blue', label='30 Day Moving Average')\nBAC['Close'].loc['2008-01-01':'2008-12-31'].plot(color='green', label='BAC Close Price')\nplt.ylabel('Close Price')\nplt.xlabel('')\nplt.title('Bank Of America Moving Average')\nplt.legend()\n","5501b080":"BAC['Close'].loc['2008-01-01':'2008-12-31'].iplot(fill=True,colors=['green'])","0286e8bb":"MS.loc['2015-01-01':'2016-01-01']['Close'].ta_plot(study='sma', periods=[13,21,55])","434b524b":"# Bank of America Candlestick Chart\nfig = go.Figure(data=[go.Candlestick(x=BAC.index,\n                open=BAC['Open'],\n                high=BAC['High'],\n                low=BAC['Low'], \n                close=BAC['Close'])\n                ])\n\nfig.update_layout(\n    title='Bank of Amercia Stock Price',\n    yaxis_title='BAC Stock',\n    shapes = [dict(\n        x0='2009-01-20', x1='2009-01-20', y0=0, y1=1, xref='x', yref='paper', line_width=2),\n             dict(\n        x0='2007-12-01', x1='2007-12-01', y0=0, y1=1, xref='x', yref='paper', line_width=2)],\n    annotations=[dict(\n        x='2009-01-20', y=0.95, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='President Obama Took Office'), \n                 dict(\n        x='2007-12-01', y=0.1, xref='x', yref='paper',\n        showarrow=False, xanchor='right', text='Subprime Mortgage Crisis')]\n)\n\nfig.show()","f820b027":"# Bank of America Candlestick Chart\nBAC[['Open', 'High', 'Close', 'Low']].loc['2015-01-01':'2016-01-01'].iplot(kind='candle', \n                                                                           title='Bank of Amercia Stock Price', \n                                                                           yaxis_title='BAC Stock')","941b82b6":"BAC.loc['2015-01-01':'2016-01-01']['Close'].ta_plot(study='boll',periods=14, title='Bollinger Bands')","acc524f6":"fig = px.area(bank_stocks.xs(key='Close', axis=1, level='Stock Info'), facet_col=\"Bank Ticker\", facet_col_wrap=2)\nfig.show()","dd2e3807":"# Citigroup OHLC Chart\nfig = go.Figure(data=go.Ohlc(x=C.index,\n                    open=C['Open'],\n                    high=C['High'],\n                    low=C['Low'],\n                    close=C['Close']))\n\nfig.update_layout(\n    title='Citigroup Stock Price',\n    yaxis_title='C Stock',\n    shapes = [dict(\n        x0='2009-01-20', x1='2009-01-20', y0=0, y1=1, xref='x', yref='paper', line_width=2),\n             dict(\n        x0='2007-12-01', x1='2007-12-01', y0=0, y1=1, xref='x', yref='paper', line_width=2)],\n    annotations=[dict(\n        x='2009-01-20', y=0.95, xref='x', yref='paper',\n        showarrow=False, xanchor='left', text='President Obama Took Office'), \n                 dict(\n        x='2007-12-01', y=0.1, xref='x', yref='paper',\n        showarrow=False, xanchor='right', text='Subprime Mortgage Crisis')]\n)\n\nfig.show()","5abe2f98":"<a id=\"ch4\"><\/a>\n# 4. Exploratory Data Analysis\n---\n[Exploratory data analysis](https:\/\/en.wikipedia.org\/wiki\/Exploratory_data_analysis) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. In this case we are going to visualize and analyze the historical data of these banks and try to find relevant information.\n\nDuring the notebook we will answer the questions and explain the concepts used.\n\nI encourage you to check out the documentation on [Multi-Level Indexing](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/advanced.html) and [Using .xs](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.xs.html), since we will be using it a lot.","8e289d52":"<a id=\"ch1\"><\/a>\n# 1. Introduction\n---\nIn this notebook we will focus on exploratory data analysis of banks stock prices. We will use pandas to directly read data from **Yahoo Finance.** The main objective is to show step-by-step how to **analyze and visualize** different features from the dataset to have a better understanding of the bank industry and how it behaves.\n\nWe will focus on bank stocks and see how they progressed throughout the [financial crisis](https:\/\/en.wikipedia.org\/wiki\/Financial_crisis_of_2007%E2%80%9308) all the way to early 2020.\n\nIf you have a question or feedback, do not hesitate to write and if you like this kernel,<b><font color='green'> please upvote! <\/font><\/b>\n\nThe following questions will be answered throughout the Notebook:\n* ***What is the max Close price for each bank's stock throughout the time period?***\n* ***On what date did Citigroup stock reach its highest price?***\n* ***Why does the first row have NaN values?***\n* ***Is there a stock that stands out?***\n* ***Did anything significant happen on 2009-01-20?***\n* ***Which stock would you classify as the riskiest over the entire time period?***\n* ***Which would you classify as the riskiest for the year 2015?***\n* ***What is the rolling 30 day average against the Close Price for Bank Of America's stock for the year 2008?***\n\n<img src=\"https:\/\/images.pexels.com\/photos\/730547\/pexels-photo-730547.jpeg?cs=srgb&dl=pexels-david-mcbee-730547.jpg&fm=jpg\" title=\"source: www.pexels.com\" width=\"700\" height=\"700\"\/>\n<br>","6718691e":"We can use pandas `pct_change()` method on the Close column to create a column representing this return value. Then we can create a for loop that goes and for each Bank Stock Ticker creates this returns column and set's it as a column in the returns DataFrame.\n\n***Why does the first row have NaN values?***\n\n* Our first value has NaN because you can not get a percent return on the very first day because there is nothing in the past to compare it to.","370da8a6":"Let's create a line plot showing Close price for each bank for the entire index of time. We are going to show different ways of plotting the same information.\n* Now we can clearly see the crash of Citigroup in 2008.\n* Goldman Sachs also had a crash in 2008 but bounce back quite quickly after the recession.","56394400":"<a id=\"ch57\"><\/a>\n## 5.7 OHLC Charts\nDocumentation: [OHLC Charts in Python](https:\/\/plotly.com\/python\/ohlc-charts\/)\n\nThe OHLC chart (for open, high, low and close) is a style of financial chart describing open, high, low and close values for a given x coordinate (most likely time). The tip of the lines represent the low and high values and the horizontal segments represent the open and close values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.\n\nYou can find more information [here.](https:\/\/www.investopedia.com\/terms\/o\/ohlcchart.asp) \n\n<img src=\"http:\/\/www.saturn.network\/blog\/content\/images\/2019\/01\/ohcl.png\" width=\"300\" height=\"300\"\/>","5e1e9cab":"Set the column name levels:","5406dfc9":"### Returns DataFrame\nNow we are going to create a new empty DataFrame called returns. This dataframe will contain the returns for each bank's stock. \n\nReturns are typically defined by:\n\n$$r_t = \\frac{p_t - p_{t-1}}{p_{t-1}} = \\frac{p_t}{p_{t-1}} - 1$$","f1cfb655":"***What is the max Close price for each bank's stock throughout the time period?***\n* The bank with the highest stock price is Citigroup.","24ca0d9c":"<a id=\"ch52\"><\/a>\n## 5.2 Moving Averages\n---\nThe [moving average (MA)](https:\/\/en.wikipedia.org\/wiki\/Moving_average) is a simple technical analysis tool that smooths out price data by creating a constantly updated average price. The average is taken over a specific period of time, like 10 days, 20 minutes, 30 weeks or any time period the trader chooses. The most common applications of moving averages are to identify trend direction and to determine support and resistance levels.\n\nLet's analyze the moving averages for these stocks in the year 2008. \n\n***What is the rolling 30 day average against the Close Price for Bank Of America's stock for the year 2008?***","c824906f":"Now we can use the same correlation of above to plot a [clustermap.](https:\/\/seaborn.pydata.org\/generated\/seaborn.clustermap.html) ","5cfde6a3":"<a id=\"ch6\"><\/a>\n# 6. References\n* [An Introduction to Statistical Learning with Applications in R](http:\/\/faculty.marshall.usc.edu\/gareth-james\/ISL\/) - This book provides an introduction to statistical learning methods.\n* [Python for Data Science and Machine Learning Bootcamp](https:\/\/www.udemy.com\/course\/python-for-data-science-and-machine-learning-bootcamp\/) - Use Python for Data Science and Machine Learning.\n* [Financial Terms Dictionary](https:\/\/www.investopedia.com\/financial-term-dictionary-4769738) - Comprehensive financial terms dictionary with over 13,000 finance and investment definitions.","4df85c23":"<hr\/>\n\n# EDA of Stock Prices - Financial Crisis\n**[by Tomas Mantero](https:\/\/www.kaggle.com\/tomasmantero)**\n<hr\/>\n\n### Table of Contents\n* **1. [Introduction](#ch1)**\n* **2. [Get the Data](#ch2)**\n* **3. [Data](#ch3)**\n* **4. [Exploratory Data Analysis](#ch4)**\n    * 4.1 [Standard Deviation](#ch41)\n    * 4.2 [Pearson Correlation Matrix](#ch42)\n* **5. [Financial Charts - Plotly](#ch5)**\n    * 5.1 [Returns Histogram](#ch51)\n    * 5.2 [Moving Averages](#ch52)\n    * 5.3 [Simple Moving Averages](#ch53)\n    * 5.4 [Candlestick Charts](#ch54)\n    * 5.5 [Bollinger Bands](#ch55)\n    * 5.6 [Bank Facet plot](#ch56)\n    * 5.7 [OHLC Charts](#ch57)\n* **6. [References](#ch6)**","8c2cbd93":"**Create a distplot using seaborn of the 2008 returns for CitiGroup**\n* Notice that the standard deviation is actually more stretched out. \n* If you look a normal year like 2015, a normal deviation is 0.06 and for CitiGroup in 2008 was 0.6. That is actually 10 times more deviation. ","7ea4e282":"<a id=\"ch42\"><\/a>\n## 4.2 Pearson correlation matrix\nWe use the [Pearson correlation coefficient](https:\/\/en.wikipedia.org\/wiki\/Pearson_correlation_coefficient#:~:text=In%20statistics%2C%20the%20Pearson%20correlation,between%20%2B1%20and%20%E2%88%921.) to examine the strength and direction of the linear relationship between two continuous variables.\n\nThe correlation coefficient can range in value from \u22121 to +1. The larger the absolute value of the coefficient, the stronger the relationship between the variables. For the Pearson correlation, an absolute value of 1 indicates a perfect linear relationship. A correlation close to 0 indicates no linear relationship between the variables. \n\nThe sign of the coefficient indicates the direction of the relationship. If both variables tend to increase or decrease together, the coefficient is positive, and the line that represents the correlation slopes upward. If one variable tends to increase as the other decreases, the coefficient is negative, and the line that represents the correlation slopes downward.\n\nLet's create a heatmap of the correlation between the stocks Close Price.","872a5b96":"Let's create a list of the ticker symbols (as strings) in alphabetical order.","af2da530":"<a id=\"ch3\"><\/a>\n# 3. Data\n<hr\/>\n\n* Stock data from Jan 1st 2006 to Jan 1st 2020.\n* Six banks. \n* 6 columns and 3523 rows.\n* Source: Yahoo Finance. \n\nWe will get stock information for the following banks:\n* [Bank of America (BAC)](https:\/\/en.wikipedia.org\/wiki\/Bank_of_America)\n* [CitiGroup (C)](https:\/\/en.wikipedia.org\/wiki\/Citigroup)\n* [Goldman Sachs (GS)](https:\/\/en.wikipedia.org\/wiki\/Goldman_Sachs)\n* [JPMorgan Chase (JPM)](https:\/\/en.wikipedia.org\/wiki\/JPMorgan_Chase)\n* [Morgan Stanley (MS)](https:\/\/en.wikipedia.org\/wiki\/Morgan_Stanley)\n* [Wells Fargo (WFC)](https:\/\/en.wikipedia.org\/wiki\/Wells_Fargo)\n\n***Feature Columns***\n    \n* **High:** Is the highest price at which a stock traded during the course of the trading day. \n* **Low:** Is the lowest price at which a stock traded during the course of the trading day.\n* **Open:** Is the price at which a stock started trading when the opening bell rang.\n* **Close:** Is the last price at which a stock trades during a regular trading session.\n* **Volume:** Is the number of shares that changed hands during a given day. \n* **Adj Close:** The adjusted closing price amends a stock's closing price to reflect that stock's value after accounting for any corporate actions. Factors in corporate actions, such as stock splits, dividends, and rights offerings.\n\n<img src=\"https:\/\/analyzingalpha.com\/assets\/images\/posts\/2020-04-17-bar-chart-ohlc.png\" alt=\"Bar Chart OHLC\" width=\"300\" height=\"300\"\/>","0e18a959":"[Plotly](https:\/\/plotly.com\/) provides online graphing, analytics, and statistics tools for individuals and collaboration, as well as scientific graphing libraries for Python, R, MATLAB, Perl, Julia, Arduino, and REST.","a85c2272":"<a id=\"ch55\"><\/a>\n## 5.5 Bollinger Band\nA [Bollinger Band](https:\/\/www.fidelity.com\/learning-center\/trading-investing\/technical-analysis\/technical-indicator-guide\/bollinger-bands#:~:text=Bollinger%20Bands%20are%20envelopes%20plotted,Period%20and%20Standard%20Deviations%2C%20StdDev.) is a technical analysis tool defined by a set of trendlines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of a security's price, but which can be adjusted to user preferences.\n* When the bands tighten during a period of low volatility, it raises the likelihood of a sharp price move in either direction.\n* When the bands separate by an unusual large amount, volatility increases and any existing trend may be ending.\n* Prices have a tendency to bounce within the bands' envelope, touching one band then moving to the other band. You can use these swings to help identify potential profit targets.\n\nUse `.ta_plot(study='boll')` to create a Bollinger Band Plot for Bank of America for the year 2015.","e8896ab3":"<a id=\"ch56\"><\/a>\n## 5.6 Bank Facet plot\nDocumentation: [Time Series and Date Axes in Python](https:\/\/plotly.com\/python\/time-series\/)\n\nFacet plots, also known as trellis plots or small multiples, are figures made up of multiple subplots which have the same set of axes, where each subplot shows a subset of the data. \n\nIn this faceted area plot we can see all the banks separately.","c9a1bacf":"<a id=\"ch51\"><\/a>\n## 5.1 Returns Histograms\n\nDocumentation:[Histograms in Python](https:\/\/plotly.com\/python\/histograms\/)\n\nWe can also use plotly to show histograms. In this case we are showing the returns of each bank from 2018 to 2020.","7107a84b":"***Which would you classify as the riskiest for the year 2015?***\n* They all have a similar risk profile with Wells Fargo being the lowest risk by not that much.","60d822d3":"Let's create a [pairplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html) using seaborn of the returns dataframe. \n\n***Is there a stock that stands out?***","abfe6b4f":"Using this returns DataFrame, we will figure out on what dates each bank stock had the best and worst single day returns. Notice that 4 of the banks share the same day for the worst drop.\n\n***Did anything significant happen on 2009-01-20?***\n* It can be seen that of the 6 banks, 4 had their worst performance on the same day.\n* President Obama took office on Jan. 20, 2009. [(More information here)](https:\/\/www.investopedia.com\/ask\/answers\/101314\/where-was-dow-jones-when-obama-took-office.asp)\n* The [subprime mortgage crisis](https:\/\/en.wikipedia.org\/wiki\/Subprime_mortgage_crisis) also had a mayor part in the decline of prices.\n* Markets had little confidence in the economy and the future was uncertain.\n* The banking sector in general declining by 30%.\n* Bank of America Corporation (BAC) dropped 29%, and Citigroup Inc. (C) sank 20%.\n* The S&P 500 and the Nasdaq took similar hits on inauguration day, dropping 5.3% and 5.8%, respectively.","5fc28f0e":"<a id=\"ch2\"><\/a>\n# 2. Get the Data\n---\nWe will use pandas to directly read data from [Yahoo Finance](https:\/\/finance.yahoo.com\/). First we need to install [pandas-datareader](https:\/\/pandas-datareader.readthedocs.io\/en\/latest\/) for this to work. Pandas datareader allows you to read stock information directly form the internet. [GitHub pandas-datareader](https:\/\/github.com\/pydata\/pandas-datareader)\n\nJust open your Command Prompt (CMD) and write `pip install pandas-datareader`.\n\nIn case you cannot access the data from yahoo finance I created a dataset with the same information. There you can find the same banks with the historical stock prices. \n\nYou can access the dataset [here.](https:\/\/www.kaggle.com\/tomasmantero\/banks-historical-stock-price)","db0c8bfa":"**Create a distplot using seaborn of the 2015 returns for Morgan Stanley.**\n* We can see that the distribution is pretty stable.","1bf913a6":"Use `.iplot(kind='candle)` to create a candle plot of Bank of America's stock from Jan 1st 2015 to Jan 1st 2016.","6217a1fd":"<a id=\"ch54\"><\/a>\n## 5.4 Candlestick Charts\n---\nDocumentation: [Candlestick Charts in Python](https:\/\/plotly.com\/python\/candlestick-charts\/)\n\nThe candlestick chart is a style of financial chart describing open, high, low and close for a given x coordinate (most likely time). The boxes represent the spread between the open and close values and the lines represent the spread between the low and high values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.\n\nYou can learn more about Candlestick Charts [here.](https:\/\/www.investopedia.com\/trading\/candlestick-charting-what-is-it\/#:~:text=in%20candlestick%20charts.-,Candlestick%20Components,close%20of%20that%20day's%20trading.)\n\nLet's plot Bank of America stock price in Candlestick format. ","47a44cfa":"<a id=\"ch5\"><\/a>\n# 5. Financial Charts - Plotly\n---\nPlotly provides online graphing, analytics, and statistics tools for individuals and collaboration, as well as scientific graphing libraries for Python, R, MATLAB, Perl, Julia, Arduino, and REST.\n\nYou can find more information of Cufflinks [here.](https:\/\/github.com\/santosjorge\/cufflinks)","81f86e88":"### Imports","79ac2940":"## Feedback\n* **Your feedback is much appreciated**\n* **<b><font color='green'>Please UPVOTE if you LIKE this notebook<\/font><\/b>**\n* **Comment if you have any doubts or you found any errors in the notebook**","bf980c78":"<a id=\"ch53\"><\/a>\n## 5.3 Simple Moving Averages\nA [simple moving average (SMA)](https:\/\/www.investopedia.com\/terms\/s\/sma.asp) calculates the average of a selected range of prices, usually closing prices, by the number of periods in that range. Is a technical indicator that can aid in determining if an asset price will continue or if it will reverse a bull or bear trend.\n\nUse `.ta_plot(study='sma')` to create a Simple Moving Averages plot of Morgan Stanley for the year 2015.","c49f6616":"Use `pd.concat` to concatenate the bank dataframes together to a single data frame called bank_stocks. Set the keys argument equal to the tickers list.","a9e7cdee":"We want to analyze the behavior of the stock price of these banks. We will get stock data from Jan 1st 2006 to Jan 1st 2020 for each of these banks. Then, set each bank to be a separate dataframe, with the variable name for that bank being its ticker symbol. This will involve a few steps:\n1. Use datetime to set start and end datetime objects.\n2. Figure out how to use datareader to grab info on the stock.\n\n**Documentation: [Remote Data Access](https:\/\/pandas-datareader.readthedocs.io\/en\/latest\/remote_data.html)**","89b7a86b":"***On what date did Citigroup stock reach its highest price?***","f5cf7b7a":"<a id=\"ch41\"><\/a>\n## 4.1 Standard Deviation\nLet's take a look at the standard deviation of the returns.\n\n**[Standard Deviation](https:\/\/en.wikipedia.org\/wiki\/Standard_deviation):** Is a measure of the amount of variation or dispersion of a set of values. A low standard deviation indicates that the values tend to be close to the mean of the set, while a high standard deviation indicates that the values are spread out over a wider range.\n\nStandard deviation is the statistical measure of market volatility, measuring how widely prices are dispersed from the average price. If prices trade in a narrow trading range, the standard deviation will return a low value that indicates low volatility. Conversely, if prices swing wildly up and down, then standard deviation returns a high value that indicates high volatility.\n\n**Basically, standard deviation rises as prices become more volatile. As price action calms, standard deviation heads lower.**\n\n***Which stock would you classify as the riskiest over the entire time period?***\n* Looks like the two most riskiest stocks are Citigroup and Morgan Stanley."}}