{"cell_type":{"81804bf0":"code","5159bb5c":"code","47873540":"code","395e3743":"code","d629b82d":"code","445af5c7":"code","fb01837e":"code","19b1061b":"code","948c1d56":"code","b96e396d":"code","3ea5077f":"code","b09589e8":"code","25c10d30":"code","a92accdc":"code","ad70b20a":"code","a3ca2075":"code","2bbe67ee":"code","b4b585c9":"code","1e9d2395":"markdown"},"source":{"81804bf0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob\nfrom skimage.io import imread\nimport keras.backend as k\nimport tensorflow as tf\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer","5159bb5c":"df = pd.DataFrame({'path': glob(os.path.join('..\/input\/train', '*.tif'))})\ndf['id'] = df.path.map(lambda x: x.split('\/')[3].split(\".\")[0])\nlabels = pd.read_csv('..\/input\/train_labels.csv')\ndf = df.merge(labels, on=\"id\")\ndf.head()","47873540":"df0 = df[df.label == 0].sample(500, random_state=42)\ndf1 = df[df.label == 1].sample(500, random_state=42)\ndf = pd.concat([df0, df1], ignore_index=True).reset_index()\ndf = df[[\"path\", \"id\", \"label\"]]\ndf.shape","395e3743":"df['image'] = df['path'].map(imread)\ndf.head()","d629b82d":"image = (df['image'][500], df['label'][500])\n_ = plt.imshow(image[0])\n_ = plt.title(image[1])","445af5c7":"input_images = np.stack(list(df.image), axis=0)\ninput_images.shape","fb01837e":"Y = LabelBinarizer().fit_transform(df.label)\nX = input_images","19b1061b":"train_X, test_X, train_Y, test_Y = train_test_split(X, Y, test_size=0.2, random_state=42)","948c1d56":"from keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model","b96e396d":"def model(input_shape):\n    # Defining the input placeholder\n    X_input = Input(input_shape)\n    \n    # Padding the borders\n    X = ZeroPadding2D((3, 3))(X_input)\n    \n    # Applying the first block\n    X = Conv2D(32, (7, 7), strides= (1, 1), name='conv0')(X)\n    X = BatchNormalization(axis=3, name='bn0')(X)\n    X = Activation('relu')(X)\n    \n    # MaxPool\n    X = MaxPooling2D((2, 2), name='max_pool1')(X)\n    \n    # Applying the second block\n    X = Conv2D(64, (7, 7), strides= (1, 1), name='conv1')(X)\n    X = BatchNormalization(axis=3, name='bn1')(X)\n    X = Activation('relu')(X)\n    \n    # MaxPool\n    X = MaxPooling2D((2, 2), name='max_pool2')(X)\n      \n    # Applying the third block\n    X = Conv2D(128, (7, 7), strides= (1, 1), name='conv2')(X)\n    X = BatchNormalization(axis=3, name='bn2')(X)\n    X = Activation('relu')(X)\n    \n    # MaxPool\n    X = MaxPooling2D((2, 2), name='max_pool3')(X)  \n    \n    \n    # Flatten and FullyConnected Layer\n    X = Flatten()(X)\n    X = Dense(1, activation='sigmoid', name='fc')(X)\n    \n    model = Model(inputs=X_input, outputs=X, name='Model')\n    \n    return model","3ea5077f":"model_final = model(train_X.shape[1:])","b09589e8":"model_final.compile('adam', 'binary_crossentropy', metrics=['accuracy'])","25c10d30":"model_final.fit(train_X, train_Y, epochs=10, batch_size=50)","a92accdc":"evals = model_final.evaluate(test_X, test_Y, batch_size=32, verbose=1)\n\nprint('Test accuracy: '+str(evals[1]*100)+'%')","ad70b20a":"test_data = pd.DataFrame({'path': glob(os.path.join('..\/input\/test', '*.tif'))})\ntest_data['id'] = test_data.path.map(lambda x: x.split('\/')[3].split(\".\")[0])\ntest_data['image'] = test_data['path'].map(imread)","a3ca2075":"test_images = np.stack(test_data.image, axis=0)\ntest_images.shape","2bbe67ee":"predicted_labels = [model_final.predict(np.expand_dims(tensor, axis=0))[0][0] for tensor in test_images]\npredictions = np.array(predicted_labels)\ntest_data['label'] = predictions\nsubmission = test_data[[\"id\", \"label\"]]\nsubmission.head()","b4b585c9":"submission.to_csv(\"submission.csv\", index = False, header = True)","1e9d2395":"# Histopathologic Cancer Detection"}}