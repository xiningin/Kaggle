{"cell_type":{"c16c8293":"code","d3fa9dd0":"code","80e5b282":"code","d25bd27a":"code","417b8b74":"code","c4d9cc47":"code","412e965d":"code","d59acfb2":"code","b20c724b":"code","d4602d2b":"code","6ac2aa02":"code","2619c73d":"code","f9558d85":"code","89d7e955":"code","fab7bf1c":"code","7f442411":"code","bd6a4972":"code","a5263355":"code","41a5dc93":"code","cd520b56":"code","637761d1":"code","5ecea992":"markdown","7d540fae":"markdown","236e48f9":"markdown"},"source":{"c16c8293":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d3fa9dd0":"import tensorflow as tf\nimport matplotlib.pyplot as plt ","80e5b282":"X_train = np.load('\/kaggle\/input\/street-view-house-numbers-svhn-dataset-numpy\/X_train.npy')\nX_valid = np.load('\/kaggle\/input\/street-view-house-numbers-svhn-dataset-numpy\/X_test.npy')\ny_train = np.load('\/kaggle\/input\/street-view-house-numbers-svhn-dataset-numpy\/y_train.npy')\ny_valid = np.load('\/kaggle\/input\/street-view-house-numbers-svhn-dataset-numpy\/y_test.npy')","d25bd27a":"print(X_train.shape)\nprint(X_valid.shape)","417b8b74":"import matplotlib.pyplot as plt\n\nfigure = plt.figure(figsize=(13, 5))\ncolumns = 5\nrows = 2\n\naxis = []\nfor i in range(10):\n    random_picture = np.random.randint(X_train.shape[3], size=1)[0]\n    image = X_train[:, :, :, random_picture]\n    \n    axis.append(figure.add_subplot(rows, columns, i+1))\n    axis[-1].set_title(str(y_train[random_picture][0]))\n    \n    plt.tick_params(length=0)\n    plt.axis('off')\n    plt.imshow(image)","c4d9cc47":"X_train_reduce = X_train.mean(axis=2, keepdims=True)\nX_valid_reduce = X_valid.mean(axis=2, keepdims=True)","412e965d":"X_train_reduce.shape","d59acfb2":"figure = plt.figure(figsize=(13, 5))\ncolumns = 5\nrows = 2\naxis = []\n\nfor i in range(10):\n    random_picture = np.random.randint(X_train_reduce.shape[3], size=1)[0]\n    image = X_train_reduce[:, :, :, random_picture]\n    \n    axis.append(figure.add_subplot(rows, columns,i+1))\n    axis[-1].set_title(str(y_train[random_picture][0]))\n    \n    plt.tick_params(length=0)\n    plt.axis('off')\n    plt.imshow(image)","b20c724b":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.callbacks import ModelCheckpoint","d4602d2b":"def create_model(input_shape):\n    model = Sequential([\n        Dense(64, activation='relu', input_shape=input_shape, name='dense1'),  \n        Flatten(),\n        Dense(128, activation=\"relu\"),\n        Flatten(),\n        Dense(128, activation='relu') ,\n        Flatten(),\n        Dense(64, activation='relu'),\n        Flatten(),\n        Dense(10, activation='softmax')\n    ])\n    \n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    return model\n\nmodel = create_model(X_train_reduce[:, :, :, 0].shape)","6ac2aa02":"model.summary()","2619c73d":"np.moveaxis(X_train_reduce, -1, 0).shape","f9558d85":"callback = tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=8,)\n\nhistory = model.fit(np.moveaxis(X_train_reduce, -1, 0), y_train, epochs=15, \n          validation_data=(np.moveaxis(X_valid_reduce, -1, 0), y_valid), callbacks=[callback])","89d7e955":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout\n\ndef build_CNN(input_shape, rate=0.4):\n    model = Sequential([\n        Conv2D(32, (3, 3), input_shape=input_shape, activation='relu'),\n        Dropout(rate),\n        Conv2D(32, (3, 3), activation='relu'),\n        Dropout(rate),\n        Conv2D(32, (3, 3), activation='relu'),\n        MaxPooling2D(pool_size=(8, 8)),\n        Conv2D(32, (3, 3), activation='relu'),\n        Flatten(),\n        Dropout(rate),\n        Dense(64, activation='relu'), \n        Dense(10, activation='softmax'),\n    ])\n    \n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    return model\n    ","fab7bf1c":"model_CNN = build_CNN(X_train_reduce[:, :, :, 0].shape, 0.3)","7f442411":"model_CNN.summary()","bd6a4972":"X_valid_reduce.shape","a5263355":"callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', \n                                                    patience = 8)\n\nhistory = model_CNN.fit(np.moveaxis(X_train_reduce, -1, 0), y_train, epochs=15, \n          validation_data=(np.moveaxis(X_valid_reduce, -1, 0), y_valid),callbacks=[callback])","41a5dc93":"history_CNN = history","cd520b56":"plt.plot(history_CNN.history['accuracy'], label=\"Accuracy\")\nplt.plot(history_CNN.history['val_accuracy'], label='Val_accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])","637761d1":"test_loss, test_acc = model_CNN.evaluate(np.moveaxis(X_valid_reduce, -1, 0), y_valid)","5ecea992":"# Building CNN model ","7d540fae":"# Building model","236e48f9":"# Visualization"}}