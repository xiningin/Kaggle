{"cell_type":{"d8ea1cb1":"code","53a7ef99":"code","9ac443de":"code","c61f4000":"code","dcfe282f":"code","9f9bf771":"code","59571ff0":"code","1bc14931":"code","8db75605":"code","dea2e7b2":"code","ce8345d4":"code","d4f02c29":"code","255d1a70":"code","fc002ebe":"code","2a5895e9":"code","20e3f3ec":"code","ba3b42cb":"code","ce4d6394":"markdown","25b4e2a1":"markdown","21d7eccc":"markdown","c6710f16":"markdown","f8af676c":"markdown","9c97b42a":"markdown","cd694a52":"markdown","bb9e6ada":"markdown"},"source":{"d8ea1cb1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import backend as K\nimport pickle\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport os","53a7ef99":"BATCH_SIZE = 64\nIMG_SIZE = 96\nRANDOM_SEED = 1982","9ac443de":"dataset = '\/kaggle\/input\/histopathologic-cancer-detection\/'\ntrain_path = dataset+'train\/'\ntest_path = dataset+'test\/'","c61f4000":"data = pd.read_csv(dataset+'train_labels.csv', dtype=str)\nprint('Training Set Size:', data.shape)\ndata['path'] = data.id + '.tif'\ndata.head()","dcfe282f":"train, valid = train_test_split(data, test_size=0.2, random_state=RANDOM_SEED, stratify=data.label)\n\nprint(train.shape)\nprint(valid.shape)","9f9bf771":"train_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","59571ff0":"train_loader = train_datagen.flow_from_dataframe(\n    dataframe = train,\n    directory = train_path,\n    x_col = 'path',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = RANDOM_SEED,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (IMG_SIZE,IMG_SIZE)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid,\n    directory = train_path,\n    x_col = 'path',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = RANDOM_SEED,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (IMG_SIZE,IMG_SIZE)\n)","1bc14931":"TR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint(TR_STEPS)\nprint(VA_STEPS)","8db75605":"np.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)\n\ncnn = tf.keras.models.load_model('..\/input\/cancerdetection-tl-v02\/cancer_model_v01.h5')","dea2e7b2":"base_model = tf.keras.applications.VGG16(input_shape=(96,96,3),\n                                         include_top=False,\n                                         weights='imagenet')","ce8345d4":"base_model.trainable = True\nfor layer in base_model.layers[:-8]:\n    layer.trainable = False","d4f02c29":"opt = tf.keras.optimizers.Adam(0.0001)\ncnn.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy', tf.keras.metrics.AUC()])\ncnn.summary()","255d1a70":"TR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint(TR_STEPS)\nprint(VA_STEPS)","fc002ebe":"%%time \n\n# Complete one or more training runs. \n# Display training curves after each run. \n\nh2 = cnn.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 20,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1,\n    use_multiprocessing=True, \n    workers=8\n)","2a5895e9":"pickle_file = open(\"..\/input\/cancerdetection-tl-v02\/cancer_history_v00.pkl\", \"rb\")\nhistory = pickle.load(pickle_file)\npickle_file.close()","20e3f3ec":"for k in h2.history.keys():\n    history[k] += h2.history[k]\n    \nepoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","ba3b42cb":"cnn.save('LK_HCD_CNN_TLV3_Model.h5')\npickle.dump(history, open(f'LP_HCD_CNN_Model_V3_History.pkl', 'wb'))","ce4d6394":"# Parameters","25b4e2a1":"# Histopathologic Cancer Detection","21d7eccc":"# CNN Model using VGG16","c6710f16":"# Import packages","f8af676c":"# Dataset","9c97b42a":"# Save Model","cd694a52":"# Train Split","bb9e6ada":"# Data Generators\nIn this section, we will split the labeled observations into training and validation sets. We will then create data loaders to feed the images into our neural network during training."}}