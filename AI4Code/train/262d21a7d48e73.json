{"cell_type":{"669cad61":"code","73ff8b76":"code","25dcc3be":"code","6260ee1d":"code","d067ce33":"code","099f7c02":"code","59c5879c":"code","bbb2250e":"code","f4c6e19f":"code","757b5d82":"code","a4f38009":"code","8a9aaeb6":"code","f8c038da":"code","0805ad01":"code","73e6e683":"code","9dfd54a6":"markdown","c14cf292":"markdown","9032d9be":"markdown","6846ce5b":"markdown","c73d2a03":"markdown","1638032e":"markdown","308f3bdc":"markdown","057c28ca":"markdown"},"source":{"669cad61":"# importing basic libraries and dataset\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pandas_profiling\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain_data= pd.read_csv('..\/input\/titanic\/train.csv')\n\ntest_data= pd.read_csv('..\/input\/titanic\/test.csv')\n\ntest_data['Survived']= np.nan\nfull_data= pd.concat([train_data,test_data])","73ff8b76":"full_data.profile_report()","25dcc3be":"train = train_data.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\ntest = test_data.drop(['PassengerId','Name','Ticket','Cabin','Survived'],axis=1)","6260ee1d":"train.info()","d067ce33":"test.info()","099f7c02":"numerical_transformer = SimpleImputer(strategy='median')\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\nnumerical_cols= ['Pclass','Age', 'SibSp', 'Parch', 'Fare']\ncategorical_cols= ['Sex','Embarked']\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","59c5879c":"X_train, X_test, y_train, y_test = train_test_split(train.drop(['Survived'], axis = 1), \n                                                    train['Survived'], test_size = 0.2, \n                                                    random_state = 2)","bbb2250e":"model = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_test)\nprint(classification_report(y_test,preds))\nprint(confusion_matrix(y_test,preds))","f4c6e19f":"test['Survived'] = clf.predict(test)\ntest['PassengerId'] = test_data['PassengerId']\ntest[['PassengerId', 'Survived']].to_csv('pipeline_submission.csv', index = False)","757b5d82":"sns.countplot(x='Survived',data=train_data,hue='Sex');","a4f38009":"sns.countplot(x='Survived',data=train_data,hue='Pclass');","8a9aaeb6":"sns.distplot(train['Age'],kde=False,color='darkred',bins=30);","f8c038da":"sns.countplot(x='SibSp',data=train);","0805ad01":"sns.countplot(x='Parch',data=train);","73e6e683":"train['Fare'].hist(color='green',bins=40,figsize=(12,6))\nplt.xlabel('Fare');","9dfd54a6":"# 2.Exploratory data analysis","c14cf292":"Somehow, those who survived had more ratio of females and vice versa.  ;)","9032d9be":"# 1. Using pipeline\n\nIn computing, a pipeline, also known as a data pipeline, is a set of data processing elements connected in series, where the output of one element is the input of the next one. The elements of a pipeline are often executed in parallel or in time-sliced fashion.\n\nSklearn pipeline sequentially apply a list of transformers and a final estimator. Intermediate steps of the pipeline must be \u2018transforms\u2019, that is, they must implement fit and transform methods. The final estimator only needs to implement fit. For more details see [documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.pipeline.Pipeline.html).","6846ce5b":"Kindly,provide feedback and help me to grow.\nUpvote if you like my analysis.","c73d2a03":"Mostly people on board were without their siblings or spouse.","1638032e":"Mostly people on board were aged between 20-40.","308f3bdc":"Let's remove unnecessary columns like PassengerId and Name. Column cabin has too many missing values so its better to remove it.","057c28ca":"Fare seems to be mostly below 100."}}