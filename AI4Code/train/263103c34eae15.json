{"cell_type":{"b1cdaae6":"code","0c884c65":"code","86b09e29":"code","d0c28fba":"code","8bcb6f03":"code","0b4890d9":"code","93b9bc79":"code","31f7f43c":"code","1150ba54":"code","5247fbb8":"code","5a6f3279":"code","cf20dcbc":"code","589d25be":"code","770d5f69":"code","1742be1e":"code","1abbd580":"code","be93a27b":"code","b0196f82":"code","9da41ad1":"code","fb46ad5b":"code","819f7cf8":"code","6e0a36ce":"code","ad73c9fb":"code","b41fb2de":"code","66574548":"code","bfd84f8d":"code","f7d3221f":"code","cee5e117":"code","52a8b767":"code","7647a54f":"code","76be3aee":"code","5768d00d":"code","790db32a":"markdown","13b399ee":"markdown","6607b0a4":"markdown","70ec12da":"markdown","b918933d":"markdown","cb7c7014":"markdown","67316a04":"markdown","afe43724":"markdown","05240a6b":"markdown","3ab167d2":"markdown","15731246":"markdown","bb567c95":"markdown","1f152d65":"markdown","49477d2d":"markdown","e3513636":"markdown","9031fbb2":"markdown","1d018fd9":"markdown","776d4b42":"markdown","ee523ffd":"markdown","de279f9a":"markdown","c7d630ad":"markdown","615e5e21":"markdown","3abe71eb":"markdown","1dc93d0e":"markdown","6c60e583":"markdown","78f164ac":"markdown","ad958c7b":"markdown","4c22cbfe":"markdown","e7a4c03a":"markdown","6499cc80":"markdown","e2645fdd":"markdown","56bd4891":"markdown"},"source":{"b1cdaae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c884c65":"# Importing Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport tensorflow\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow import keras\nfrom keras import callbacks\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, LSTM, Dropout, GRU, Bidirectional\nfrom tensorflow.keras.optimizers import SGD\nimport math\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","86b09e29":"#Loading Data\ndata = pd.read_csv(\"..\/input\/traffic-prediction-dataset\/traffic.csv\")\ndata.head()","d0c28fba":"data[\"DateTime\"]= pd.to_datetime(data[\"DateTime\"])\ndata = data.drop([\"ID\"], axis=1) #dropping IDs\ndata.info()","8bcb6f03":"#df to be used for EDA\ndf=data.copy() \n#Let's plot the Timeseries\ncolors = [ \"#FFD4DB\",\"#BBE7FE\",\"#D3B5E5\",\"#dfe2b6\"]\nplt.figure(figsize=(20,4),facecolor=\"#627D78\")\nTime_series=sns.lineplot(x=df['DateTime'],y=\"Vehicles\",data=df, hue=\"Junction\", palette=colors)\nTime_series.set_title(\"Traffic On Junctions Over Years\")\nTime_series.set_ylabel(\"Number of Vehicles\")\nTime_series.set_xlabel(\"Date\")","0b4890d9":"#Exploring more features \ndf[\"Year\"]= df['DateTime'].dt.year\ndf[\"Month\"]= df['DateTime'].dt.month\ndf[\"Date_no\"]= df['DateTime'].dt.day\ndf[\"Hour\"]= df['DateTime'].dt.hour\ndf[\"Day\"]= df.DateTime.dt.strftime(\"%A\")\ndf.head()","93b9bc79":"#Let's plot the Timeseries\nnew_features = [ \"Year\",\"Month\", \"Date_no\", \"Hour\", \"Day\"]\n\nfor i in new_features:\n    plt.figure(figsize=(10,2),facecolor=\"#627D78\")\n    ax=sns.lineplot(x=df[i],y=\"Vehicles\",data=df, hue=\"Junction\", palette=colors )\n    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","31f7f43c":"plt.figure(figsize=(12,5),facecolor=\"#627D78\")\ncount = sns.countplot(data=df, x =df[\"Year\"], hue=\"Junction\", palette=colors)\ncount.set_title(\"Count Of Traffic On Junctions Over Years\")\ncount.set_ylabel(\"Number of Vehicles\")\ncount.set_xlabel(\"Date\")","1150ba54":"corrmat = df.corr()\nplt.subplots(figsize=(10,10),facecolor=\"#627D78\")\nsns.heatmap(corrmat,cmap= \"Pastel2\",annot=True,square=True, )","5247fbb8":"sns.pairplot(data=df, hue= \"Junction\",palette=colors)","5a6f3279":"#Pivoting data fron junction \ndf_J = data.pivot(columns=\"Junction\", index=\"DateTime\")\ndf_J.describe()","cf20dcbc":"#Creating new sets\ndf_1 = df_J[[('Vehicles', 1)]]\ndf_2 = df_J[[('Vehicles', 2)]]\ndf_3 = df_J[[('Vehicles', 3)]]\ndf_4 = df_J[[('Vehicles', 4)]]\ndf_4 = df_4.dropna() #Junction 4 has limited data only for a few months\n\n#Dropping level one in dfs's index as it is a multi index data frame\nlist_dfs = [df_1, df_2, df_3, df_4]\nfor i in list_dfs:\n    i.columns= i.columns.droplevel(level=1)   \n\n#Function to plot comparitive plots of dataframes\ndef Sub_Plots4(df_1, df_2,df_3,df_4,title):\n    fig, axes = plt.subplots(4, 1, figsize=(15, 8),facecolor=\"#627D78\", sharey=True)\n    fig.suptitle(title)\n    #J1\n    pl_1=sns.lineplot(ax=axes[0],data=df_1,color=colors[0])\n    #pl_1=plt.ylabel()\n    axes[0].set(ylabel =\"Junction 1\")\n    #J2\n    pl_2=sns.lineplot(ax=axes[1],data=df_2,color=colors[1])\n    axes[1].set(ylabel =\"Junction 2\")\n    #J3\n    pl_3=sns.lineplot(ax=axes[2],data=df_3,color=colors[2])\n    axes[2].set(ylabel =\"Junction 3\")\n    #J4\n    pl_4=sns.lineplot(ax=axes[3],data=df_4,color=colors[3])\n    axes[3].set(ylabel =\"Junction 4\")\n    \n    \n#Plotting the dataframe to check for stationarity\nSub_Plots4(df_1.Vehicles, df_2.Vehicles,df_3.Vehicles,df_4.Vehicles,\"Dataframes Before Transformation\")","589d25be":"# Normalize Function\ndef Normalize(df,col):\n    average = df[col].mean()\n    stdev = df[col].std()\n    df_normalized = (df[col] - average) \/ stdev\n    df_normalized = df_normalized.to_frame()\n    return df_normalized, average, stdev\n\n# Differencing Function\ndef Difference(df,col, interval):\n    diff = []\n    for i in range(interval, len(df)):\n        value = df[col][i] - df[col][i - interval]\n        diff.append(value)\n    return diff","770d5f69":"#Normalizing and Differencing to make the series stationary \ndf_N1, av_J1, std_J1 = Normalize(df_1, \"Vehicles\")\nDiff_1 = Difference(df_N1, col=\"Vehicles\", interval=(24*7)) #taking a week's diffrence\ndf_N1 = df_N1[24*7:]\ndf_N1.columns = [\"Norm\"]\ndf_N1[\"Diff\"]= Diff_1\n\ndf_N2, av_J2, std_J2 = Normalize(df_2, \"Vehicles\")\nDiff_2 = Difference(df_N2, col=\"Vehicles\", interval=(24)) #taking a day's diffrence\ndf_N2 = df_N2[24:]\ndf_N2.columns = [\"Norm\"]\ndf_N2[\"Diff\"]= Diff_2\n\ndf_N3, av_J3, std_J3 = Normalize(df_3, \"Vehicles\")\nDiff_3 = Difference(df_N3, col=\"Vehicles\", interval=1) #taking an hour's diffrence\ndf_N3 = df_N3[1:]\ndf_N3.columns = [\"Norm\"]\ndf_N3[\"Diff\"]= Diff_3\n\ndf_N4, av_J4, std_J4 = Normalize(df_4, \"Vehicles\")\nDiff_4 = Difference(df_N4, col=\"Vehicles\", interval=1) #taking an hour's diffrence\ndf_N4 = df_N4[1:]\ndf_N4.columns = [\"Norm\"]\ndf_N4[\"Diff\"]= Diff_4","1742be1e":"Sub_Plots4(df_N1.Diff, df_N2.Diff,df_N3.Diff,df_N4.Diff,\"Dataframes After Transformation\")","1abbd580":"#Stationary Check for the time series Augmented Dickey Fuller test\ndef Stationary_check(df):\n    check = adfuller(df.dropna())\n    print(f\"ADF Statistic: {check[0]}\")\n    print(f\"p-value: {check[1]}\")\n    print(\"Critical Values:\")\n    for key, value in check[4].items():\n        print('\\t%s: %.3f' % (key, value))\n    if check[0] > check[4][\"1%\"]:\n        print(\"Time Series is Non-Stationary\")\n    else:\n        print(\"Time Series is Stationary\") \n  \n\n#Checking if the series is stationary\n\nList_df_ND = [ df_N1[\"Diff\"], df_N2[\"Diff\"], df_N3[\"Diff\"], df_N4[\"Diff\"]] \nprint(\"Checking the transformed series for stationarity:\")\nfor i in List_df_ND:\n    print(\"\\n\")\n    Stationary_check(i)","be93a27b":"#Differencing created some NA values as we took a weeks data into consideration while difrencing\ndf_J1 = df_N1[\"Diff\"].dropna()\ndf_J1 = df_J1.to_frame()\n\ndf_J2 = df_N2[\"Diff\"].dropna()\ndf_J2 = df_J2.to_frame()\n\ndf_J3 = df_N3[\"Diff\"].dropna()\ndf_J3 = df_J3.to_frame()\n\ndf_J4 = df_N4[\"Diff\"].dropna()\ndf_J4 = df_J4.to_frame()\n\n#Splitting the dataset\ndef Split_data(df):\n    training_size = int(len(df)*0.90)\n    data_len = len(df)\n    train, test = df[0:training_size],df[training_size:data_len] \n    train, test = train.values.reshape(-1, 1), test.values.reshape(-1, 1)\n    return train, test\n#Splitting the training and test datasets \nJ1_train, J1_test = Split_data(df_J1)\nJ2_train, J2_test = Split_data(df_J2)\nJ3_train, J3_test = Split_data(df_J3)\nJ4_train, J4_test = Split_data(df_J4)\n\n#Target and Feature\ndef TnF(df):\n    end_len = len(df)\n    X = []\n    y = []\n    steps = 32\n    for i in range(steps, end_len):\n        X.append(df[i - steps:i, 0])\n        y.append(df[i, 0])\n    X, y = np.array(X), np.array(y)\n    return X ,y\n\n#fixing the shape of X_test and X_train\ndef FeatureFixShape(train, test):\n    train = np.reshape(train, (train.shape[0], train.shape[1], 1))\n    test = np.reshape(test, (test.shape[0],test.shape[1],1))\n    return train, test\n\n#Assigning features and target \nX_trainJ1, y_trainJ1 = TnF(J1_train)\nX_testJ1, y_testJ1 = TnF(J1_test)\nX_trainJ1, X_testJ1 = FeatureFixShape(X_trainJ1, X_testJ1)\n\nX_trainJ2, y_trainJ2 = TnF(J2_train)\nX_testJ2, y_testJ2 = TnF(J2_test)\nX_trainJ2, X_testJ2 = FeatureFixShape(X_trainJ2, X_testJ2)\n\nX_trainJ3, y_trainJ3 = TnF(J3_train)\nX_testJ3, y_testJ3 = TnF(J3_test)\nX_trainJ3, X_testJ3 = FeatureFixShape(X_trainJ3, X_testJ3)\n\nX_trainJ4, y_trainJ4 = TnF(J4_train)\nX_testJ4, y_testJ4 = TnF(J4_test)\nX_trainJ4, X_testJ4 = FeatureFixShape(X_trainJ4, X_testJ4)","b0196f82":"#Model for the prediction\ndef GRU_model(X_Train, y_Train, X_Test):\n    early_stopping = callbacks.EarlyStopping(min_delta=0.001,patience=10, restore_best_weights=True) \n    #callback delta 0.01 may interrupt the learning, could eliminate this step, but meh!\n    \n    #The GRU model \n    model = Sequential()\n    model.add(GRU(units=150, return_sequences=True, input_shape=(X_Train.shape[1],1), activation='tanh'))\n    model.add(Dropout(0.2))\n    model.add(GRU(units=150, return_sequences=True, input_shape=(X_Train.shape[1],1), activation='tanh'))\n    model.add(Dropout(0.2))\n    model.add(GRU(units=50, return_sequences=True, input_shape=(X_Train.shape[1],1), activation='tanh'))\n    model.add(Dropout(0.2))\n    model.add(GRU(units=50, return_sequences=True, input_shape=(X_Train.shape[1],1), activation='tanh'))\n    model.add(Dropout(0.2))\n    #model.add(GRU(units=50, return_sequences=True,  input_shape=(X_Train.shape[1],1),activation='tanh'))\n    #model.add(Dropout(0.2))\n    model.add(GRU(units=50, input_shape=(X_Train.shape[1],1), activation='tanh'))\n    model.add(Dropout(0.2))\n    model.add(Dense(units=1))\n    #Compiling the model\n    model.compile(optimizer=SGD(decay=1e-7, momentum=0.9),loss='mean_squared_error')\n    model.fit(X_Train,y_Train, epochs=50, batch_size=150,callbacks=[early_stopping])\n    pred_GRU= model.predict(X_Test)\n    return pred_GRU\n\n#To calculate the root mean squred error in predictions\ndef RMSE_Value(test,predicted):\n    rmse = math.sqrt(mean_squared_error(test, predicted))\n    print(\"The root mean squared error is {}.\".format(rmse))\n    return rmse\n\n#To plot the comparitive plot of targets and predictions\ndef PredictionsPlot(test,predicted,m):\n    plt.figure(figsize=(12,5),facecolor=\"#627D78\")\n    plt.plot(test, color=colors[m],label=\"True Value\",alpha=0.5 )\n    plt.plot(predicted, color=\"#627D78\",label=\"Predicted Values\")\n    plt.title(\"GRU Traffic Prediction Vs True values\")\n    plt.xlabel(\"DateTime\")\n    plt.ylabel(\"Number of Vehicles\")\n    plt.legend()\n    plt.show()","9da41ad1":"#Predictions For First Junction\nPredJ1 = GRU_model(X_trainJ1,y_trainJ1,X_testJ1)","fb46ad5b":"#Results for J1 \nRMSE_J1=RMSE_Value(y_testJ1,PredJ1)\nPredictionsPlot(y_testJ1,PredJ1,0)","819f7cf8":"#Predictions For Second Junction\nPredJ2 = GRU_model(X_trainJ2,y_trainJ2,X_testJ2)","6e0a36ce":"#Results for J2\nRMSE_J2=RMSE_Value(y_testJ2,PredJ2)\nPredictionsPlot(y_testJ2,PredJ2,1)","ad73c9fb":"#Predictions For Third Junction\nPredJ3 = GRU_model(X_trainJ3,y_trainJ3,X_testJ3) ","b41fb2de":"#Results for J3\nRMSE_J3=RMSE_Value(y_testJ3,PredJ3)\nPredictionsPlot(y_testJ3,PredJ3,2)","66574548":"#Predictions For Forth Junction\nPredJ4 = GRU_model(X_trainJ4,y_trainJ4,X_testJ4)","bfd84f8d":"#Results for J4\nRMSE_J4=RMSE_Value(y_testJ4,PredJ4)\nPredictionsPlot(y_testJ4,PredJ4,3)","f7d3221f":"#Initialise data of lists for error values of four junctions.\nJunctions = [\"Junction1\", \"Junction2\", \"Junction3\", \"Junction4\"]\nRMSE = [RMSE_J1, RMSE_J2, RMSE_J3, RMSE_J4]\nlist_of_tuples = list(zip(Junctions, RMSE))\n# Creates pandas DataFrame.\nResults = pd.DataFrame(list_of_tuples, columns=[\"Junction\", \"RMSE\"])\nResults.style.background_gradient(cmap=\"Pastel1\")   \n","cee5e117":"# Functions to inverse transforms and Plot comparitive plots\n# invert differenced forecast\ndef inverse_difference(last_ob, value):\n    inversed = value + last_ob\n    return inversed\n#Plotting the comparison\ndef Sub_Plots2(df_1, df_2,title,m):\n    fig, axes = plt.subplots(1, 2, figsize=(18,4), sharey=True,facecolor=\"#627D78\")\n    fig.suptitle(title)\n    \n    pl_1=sns.lineplot(ax=axes[0],data=df_1,color=colors[m])\n    axes[0].set(ylabel =\"Prediction\")\n    \n    pl_2=sns.lineplot(ax=axes[1],data=df_2[\"Vehicles\"],color=\"#627D78\")\n    axes[1].set(ylabel =\"Orignal\")","52a8b767":"# invert the differenced forecast for Junction 1 \nrecover1 = df_N1.Norm[-1412:-1].to_frame()\nrecover1[\"Pred\"]= PredJ1\nTransform_reverssed_J1 = inverse_difference(recover1.Norm, recover1.Pred).to_frame()\nTransform_reverssed_J1.columns = [\"Pred_Normed\"]\n#Invert the normalizeation J1\nFinal_J1_Pred = (Transform_reverssed_J1.values* std_J1) + av_J1\nTransform_reverssed_J1[\"Pred_Final\"] =Final_J1_Pred\n#Plotting the Predictions with orignals \nSub_Plots2(Transform_reverssed_J1[\"Pred_Final\"], df_1[-1412:-1],\"Pridictions And Orignals For Junction 1\", 0)","7647a54f":"#Invert the differenced J2\nrecover2 = df_N2.Norm[-1426:-1].to_frame() #len as per the diff\nrecover2[\"Pred\"]= PredJ2\nTransform_reverssed_J2 = inverse_difference(recover2.Norm, recover2.Pred).to_frame()\nTransform_reverssed_J2.columns = [\"Pred_Normed\"]\nFinal_J2_Pred = (Transform_reverssed_J2.values* std_J2) + av_J2\nTransform_reverssed_J2[\"Pred_Final\"] =Final_J2_Pred\n#Plotting the Predictions with orignals \nSub_Plots2(Transform_reverssed_J2[\"Pred_Final\"], df_2[-1426:-1],\"Pridictions And Orignals For Junction 2\", 1)","76be3aee":"#Invert the differenced J3\nrecover3 = df_N3.Norm[-1429:-1].to_frame() #len as per the diff\nrecover3[\"Pred\"]= PredJ3\nTransform_reverssed_J3 = inverse_difference(recover3.Norm, recover3.Pred).to_frame()\nTransform_reverssed_J3.columns = [\"Pred_Normed\"]\n#Invert the normalizeation J3\nFinal_J3_Pred = (Transform_reverssed_J3.values* std_J3) + av_J3\nTransform_reverssed_J3[\"Pred_Final\"] =Final_J3_Pred\nSub_Plots2(Transform_reverssed_J3[\"Pred_Final\"], df_3[-1429:-1],\"Pridictions And Orignals For Junction 3\", 2)","5768d00d":"#Invert the differenced J4\nrecover4 = df_N4.Norm[-404:-1].to_frame()  #len as per the testset\nrecover4[\"Pred\"]= PredJ4\nTransform_reverssed_J4 = inverse_difference(recover4.Norm, recover4.Pred).to_frame()\nTransform_reverssed_J4.columns = [\"Pred_Normed\"]\n#Invert the normalizeation J4\nFinal_J4_Pred = (Transform_reverssed_J4.values* std_J4) + av_J4\nTransform_reverssed_J4[\"Pred_Final\"] =Final_J4_Pred\nSub_Plots2(Transform_reverssed_J4[\"Pred_Final\"], df_4[-404:-1],\"Pridictions And Orignals For Junction 4\", 3)","790db32a":"**Summary**\n\n*In this project, I trained a GRU Neural network to predicted the traffic on four junctions. \nI used a normalisation and differencing transform to achieve a stationary timeseries. As the Junctions varry in trends and seasonality, I took diffrent approach for each junction to make it stationary. I applyied the root mean squred error as the evaluation metric for the model. In addition to that I plotted the Predictions alongside the original test values.\nTake aways from the data analysis:*\n\n*The Number of vehicles in Junction one is rising more rapidly compaired to junction two and three. The sparsity of data in juction four bars me from making any conclusion on the same.*\n\n*The Junction one's traffic has a stronger weekly seasonality as well as hourly seasonality. Where as other junctions are significantly linear.*\n\n**<span style=\"color:#627D78;\"> If you liked this Notebook, please do upvote.<\/span>**\n\n**<span style=\"color:#627D78;\"> Best Wishes!<\/span>**\n\n<a id=\"8\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">End<\/p>","13b399ee":"The plots above seem linear. To ensure they are Stationary I will be performing an Augmented Dickey-Fuller test. ","6607b0a4":"<a id=\"3.1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Feature Engineering<\/p>\n\nAt this step, I am creating a few new features out of DateTime. \nNamely:\n* Year\n* Month \n* Date in the given month\n* Days of week \n* Hour","70ec12da":"A time series is stationary if it does not have a trend or seasonality. However, in the EDA, we saw a weekly seasonality and an upwards trend over the years. In the above plot, it is again established that Junctions one and two have an upward trend. If we limit the span we will be able to further see the weekly seasonality. I will be spairing that step at this point and moving on with the respective transforms on datasets.\n\n**Steps for Transforming:**\n* Normalizing \n* Differencing ","b918933d":" <a id=\"1\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Importing Libraries<\/p>","cb7c7014":"**Noticeable information in the above plot:**\n\n* It can be seen here that the first junction is visibly having an upward trend.\n* The data for the fourth junction is sparse starting only after 2017\n* Seasonality is not evident from the above plot, So we must explore datetime composition to figure out more about it. ","67316a04":"<a id=\"4\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Data Transformation And Preprocessing<\/p>\n\n**In this step I will be following the subsequent order:**\n\n* Creating different frames for each Junction and plotting them\n* Transforming the series and plotting them\n* Performing the Augmented Dickey-Fuller test to check the seasonality of transformed series\n* Creating test and train sets\n","afe43724":"**The results of the model** ","05240a6b":"**Now that the data is stationary,  preprocessing the data for the neural net by:**\n\n* Splitting the test train sets\n* Assigning X as features and y as target \n* Reshaping data for neural net","3ab167d2":"The highest correlation is certainly with the preexisting feature. \n\nI will conclude my EDA with a pair plot. It's an interesting overall representation of any data. ","15731246":"**From the above plot following things can be concluded:**\n\n\n* Yearly, there has been an upward trend for all junctions except for the fourth junction. As we already established above that the fourth junction has limited data and that don't span over a year.  \n\n* We can see that there is an influx in the first and second junctions around June. I presume this may be due to summer break and activities around the same. \n\n* Monthly, throughout all the dates there is a good consistency in data. \n\n* For a day, we can see that are peaks during morning and evening times and a decline during night hours. This is as per expectation. \n\n* For weekly patterns, Sundays enjoy smoother traffic as there are lesser vehicles on roads. Whereas Monday to Friday the traffic is steady. \n","bb567c95":"**Plots of Transformed Dataframe**","1f152d65":"In accordance with the above observations, Differencing to eliminate the seasonality should be performed as follows:\n* For Junction one, I will be taking a difference of weekly values. \n* For junction two, The difference of consecutive days is a better choice\n* For Junctions three and four, the difference of the hourly values will serve the purpose. ","49477d2d":"**The inverse transform on the third junction**","e3513636":"The count plot shows that there is an increase in the number of vehicles between 2015 and 2016. However, it is inconclusive to say the same about 2017 as we have limited data for 2017 ie till the 7th month. ","9031fbb2":"<a id=\"6\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Fitting The Model<\/p>\n\nNow, I will be fitting the transformed training sets of four junctions to the model created and compare them to the transformed test sets. ","1d018fd9":"**About the data**\n\nThis dataset is a collection of numbers of vehicles at four junctions at an hourly frequency. \nThe CSV file provides four features:\n\n* DateTime\n* Junctions\n* Vehicles\n* ID\n\nThe sensors on each of these junctions were collecting data at different times, hence the traffic data from different time periods. Some of the junctions have provided limited or sparse data.","776d4b42":"**the inverse transform on the first junction**","ee523ffd":"**Fitting the third junction and plotting the predictions and testset**","de279f9a":"**Fitting the second junction and plotting the predictions and testset**","c7d630ad":"<a id=\"5\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Model Building<\/p>\n\nFor this project, I have settled to use Gated Recurrent Unit (GRU). In this section, I am creating a function for the neural net to call on and fit the data frames for all four junctions. ","615e5e21":"\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Traffic Prediction<\/p>\n\n![Papercraft Voting Board Brainstorm Presentation.gif](attachment:1e7d0696-c04f-4bb4-94ae-b145bc90baf3.gif)\n\n\nTraffic is one of those annoying problems that affect many of us living in urban settings. One of the causes of traffic is the increase in urban populations. While the infrastructure is old and can only accommodate a limited population there is an influx of residents in search of livelihood and opportunities.\n\nTraffic congestions lead to an increased in the combustion of fuel. It further increases the carbon emissions causing air pollution. It also costs time and money. INRIX's, a transportation analytics and connected car services,  2020 report found that on average, Americans lost 99 hours a year due to congestion, costing them nearly 88 billion dollars in 2019, an average of 1,377 dollars per year. From 2017 to 2019 the average time lost by American drivers has increased by two hours as economic and urban growth continues.  [link](https:\/\/inrix.com\/press-releases\/2019-traffic-scorecard-us\/)\n\nIn this project, I will be exploring the dataset of four junctions and built a model to predict traffic on the same. This could potentially help in solving the traffic congestion problem by providing a better understanding of traffic patterns that will further help in building an infrastructure to eliminate the problem. \n\n\n\n\n   <a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Table Of Contents<\/p>\n    \n* [1. IMPORTING LIBRARIES](#1)\n    \n* [2. LOADING DATA](#2)\n    \n* [3. DATA EXPLORATION](#3) \n    \n    * [3.1 FEATURE ENGINEERING](#3.1)\n    * [3.2 EXPLORATORY DATA ANALYSIS](#3.2)\n\n    \n* [4. DATA TRANSFORMATION AND PREPROCESSING](#4) \n    \n* [5. MODEL BUILDING](#5)\n    \n* [6. FITTING THE MODEL](#6) \n     \n* [7. INVERSING THE TRANSFORMATION OF DATA](#7)\n    \n* [8. END](#8)\n","3abe71eb":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Loading Data<\/p>","1dc93d0e":"**The Root Mean Square Error is quite a subjective marker for evaluating the performance. \nThus, in this project, I am including the outcome plots as well.**","6c60e583":"**The inverse transform on the fourth junction**","78f164ac":"<a id=\"7\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Inversing The Transformation Of Data<\/p>\n\nIn this section, I will be inversing transforms that I applied to the datasets to remove the seasonality and trends. \nPerforming this step will make the predictions get back on the accurate scale. \n\nResource to the inversion process [Link](https:\/\/machinelearningmastery.com\/remove-trends-seasonality-difference-transform-python\/)","ad958c7b":"**Conclusions that I have come to draw after this EDA**\n\n* The span of data from all four junctions is not the same. Data provided for the fourth junction is limited to only 2017.\n* The yearly trend for Junctions one, two and three have diffrent slopes. \n* Junction number one has a more strong weekly seasonality in comparison to the other junctions. \n\nFor the above-postulated reasons, I think that junctions must be transformed as per their individual needs. \n\n","4c22cbfe":"<a id=\"3.2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Exploratory Data Analysis<\/p>\n\nPlotting the newly created features","e7a4c03a":"**Fitting the fourth junction and plotting the predictions and testset**","6499cc80":"**the inverse transform on the second junction**","e2645fdd":"<a id=\"3\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">Data Exploration<\/p>\n* Pharsing dates\n* Ploting timeseris\n* Feature engineering for EDA","56bd4891":"**Fitting the first junction and plotting the predictions and testset**"}}