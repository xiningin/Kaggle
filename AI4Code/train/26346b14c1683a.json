{"cell_type":{"1f43f842":"code","39dde231":"code","17e0b6f8":"code","c7ac1218":"code","ab135f8d":"code","ac1c9d67":"code","1ec45c90":"code","eec2fc17":"code","9a57f4d6":"code","8d1b7154":"code","a6350ac4":"code","d1596bd3":"code","2728262e":"code","cc053c5b":"code","90be53ef":"code","735dad63":"code","635b6f3b":"code","458e57c3":"code","6ec88253":"code","d9832f97":"code","fd15b06f":"code","a533db82":"code","27ddf8b5":"code","68ca2889":"code","135b5554":"code","aac30226":"code","3b2f6ca0":"code","85512d25":"code","da34445c":"code","e659cdae":"code","7cfa1f97":"code","6338b263":"code","3ebb7d5b":"code","b1c590f1":"code","a921cf5e":"code","6b4792bb":"code","3f605ffa":"code","2cf7c9ea":"code","fcad0a13":"code","1b56010d":"code","1b31d8fc":"code","b393a938":"code","cefb877c":"code","61821eef":"code","c126399b":"code","45284e74":"code","ea17d966":"code","22596e01":"code","e6b25520":"code","d0f08e6a":"code","acf84724":"code","52537f02":"code","c80dce6a":"code","f26f568e":"code","04d6dce9":"code","88d27dcc":"code","ddc1c107":"markdown","6825e06a":"markdown","dc0ea7ec":"markdown","98ad365d":"markdown","2e037a73":"markdown","ae973983":"markdown","1f644ea1":"markdown","69a38db4":"markdown","a9814530":"markdown","a6f82b74":"markdown","a37d9265":"markdown"},"source":{"1f43f842":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39dde231":"import matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import confusion_matrix\n#import the required Libraries\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split","17e0b6f8":"#Read the data into a pandas dataframe\nhealth_df=pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nhealth_df.head()","c7ac1218":"health_df.dtypes","ab135f8d":"#Let's drop the id column since we don't need it.\nhealth_df.drop('id',axis=1,inplace=True)\nhealth_df.head()","ac1c9d67":"health_df.shape","1ec45c90":"health_df.isnull().sum()","eec2fc17":"health_df[health_df.isna().any(axis=1)]","9a57f4d6":"health_df['bmi'].median()","8d1b7154":"#Let's replace null values with mode values(values appearing the most) in the BMI column.\nhealth_df['bmi'].fillna(health_df['bmi'].mode()[0], inplace=True)\nhealth_df.isna().sum()","a6350ac4":"health_df['smoking_status'].unique()","d1596bd3":"health_df.groupby([\"smoking_status\"])[\"smoking_status\"].count()","2728262e":"\nhealth_df['smoking_status']=health_df['smoking_status'].replace(['Unknown'],'never smoked')\nhealth_df.groupby([\"smoking_status\"])[\"smoking_status\"].count()","cc053c5b":"d = {'Male': 0, 'Female': 1,'Other':2}\nhealth_df['gender'] = health_df['gender'].map(d).fillna(health_df['gender'])\nhealth_df.head()","90be53ef":"health_df['ever_married']=health_df['ever_married'].replace({'No': 0, 'Yes': 1})\nhealth_df.head()","735dad63":"health_df['work_type'].unique()","635b6f3b":"health_df=pd.concat([health_df,pd.get_dummies(health_df['work_type'], prefix='work_type')],axis=1)\nhealth_df.drop(['work_type'],axis=1, inplace=True)","458e57c3":"health_df['Residence_type'].unique()","6ec88253":"health_df=pd.concat([health_df,pd.get_dummies(health_df['Residence_type'], prefix='Residence_type')],axis=1)\nhealth_df.drop(['Residence_type'],axis=1, inplace=True)","d9832f97":"health_df.head()","fd15b06f":"health_df=pd.concat([health_df,pd.get_dummies(health_df['smoking_status'], prefix='smoking_status')],axis=1)\nhealth_df.drop(['smoking_status'],axis=1, inplace=True)","a533db82":"health_df.head()","27ddf8b5":"health_df['gender'].unique()","68ca2889":"plt.hist(health_df['age'])","135b5554":"plt.hist(health_df['gender'])","aac30226":"sns.histplot(health_df['stroke'])","3b2f6ca0":"sns.histplot(data=health_df, x=\"age\", hue=\"gender\")","85512d25":"sns.pairplot(data=health_df, hue=\"stroke\")","da34445c":"plt.figure(figsize=(12,8)) \nsns.heatmap(health_df.corr(), annot=True, cmap='gist_heat', linewidths = 2)\nplt.show()","e659cdae":"health_df['stroke']=health_df['stroke'].astype('float')","7cfa1f97":"X=health_df.loc[:, health_df.columns != 'stroke']\nY=health_df.loc[:, health_df.columns == 'stroke']\nprint(X.shape,Y.shape)","6338b263":"#Train Test split\n\nxtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.3)","3ebb7d5b":"\nmodel = LogisticRegression(solver='liblinear', random_state=0)\nmodel.fit(xtrain,ytrain)\n","b1c590f1":"\ncf_matrix=confusion_matrix(ytest,model.predict(xtest))\nsns.heatmap(cf_matrix, annot=True)","a921cf5e":"rndfrst = RandomForestClassifier(max_depth=100, random_state=0)\nrndfrst.fit(xtrain, ytrain)","6b4792bb":"cf_matrix=confusion_matrix(ytest,rndfrst.predict(xtest))\nsns.heatmap(cf_matrix, annot=True)","3f605ffa":"model.score(xtest,ytest)","2cf7c9ea":"rndfrst.score(xtest,ytest)","fcad0a13":"probs = model.predict_proba(xtest)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(ytest, preds)\nroc_auc = metrics.auc(fpr, tpr)","1b56010d":"plt.title('Logistic Regression ROC')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","1b31d8fc":"probs = rndfrst.predict_proba(xtest)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(ytest, preds)\nroc_auc = metrics.auc(fpr, tpr)","b393a938":"plt.title('Random Forest ROC')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","cefb877c":"\nprint(classification_report(ytest, model.predict(xtest)))\nprint(classification_report(ytest, rndfrst.predict(xtest)))\n","61821eef":"#Importing SMOTE\nfrom imblearn.over_sampling import SMOTE","c126399b":"#Oversampling the data\nsmote = SMOTE(random_state = 101)\nX, y = smote.fit_resample(X, Y)","45284e74":"sns.histplot(y)","ea17d966":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","22596e01":"smot_model=LogisticRegression(solver='liblinear', random_state=0)\nsmot_model.fit(x_train,y_train)","e6b25520":"smot_model.score(x_test,y_test)","d0f08e6a":"smot_rndfrst=RandomForestClassifier(max_depth=100, random_state=0)\nsmot_rndfrst.fit(x_train, y_train)","acf84724":"smot_rndfrst.score(x_test,y_test)","52537f02":"smot_model_cf=confusion_matrix(y_test,smot_model.predict(x_test))\nsns.heatmap(cf_matrix, annot=True)","c80dce6a":"smot_rndfrst_cf=confusion_matrix(y_test,smot_rndfrst.predict(x_test))\nsns.heatmap(cf_matrix, annot=True)","f26f568e":"\nprint(classification_report(y_test, smot_model.predict(x_test)))\nprint(classification_report(y_test, smot_rndfrst.predict(x_test)))\n","04d6dce9":"probs = smot_model.predict_proba(x_test)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplt.title('Logistic Regression ROC')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","88d27dcc":"probs = smot_rndfrst.predict_proba(x_test)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, preds)\nroc_auc = metrics.auc(fpr, tpr)\nplt.title('Random Forest ROC')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","ddc1c107":"# **Building the Model**","6825e06a":"# **Data Preparation**","dc0ea7ec":"## Data Visualization","98ad365d":"We have 1544 samples with a smoking_status of Unkown. We will impute this field by replacing the unknown values with the most repeated one which is 'never smoked'.","2e037a73":"---","ae973983":"---","1f644ea1":"we will create a pandas dataframe from the csv file that contains health care stroke data.","69a38db4":"Let's explore the dataframe by looking at different statistical informations.","a9814530":"## Exploring the data ","a6f82b74":"## Loading the Data","a37d9265":"**Column Descriptions**\n* **id**: unique identifier\n* **gender**: \"Male\", \"Female\" or \"Other\"\n* **age**: age of the patient\n* **hypertension**: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n* **heart_disease**: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n* **ever_married**: \"No\" or \"Yes\"\n* **work_type**: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n* **Residence_type**: \"Rural\" or \"Urban\"\n* **avg_glucose_level**: average glucose level in blood\n* **bmi**: body mass index\n* **smoking_status**: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n* **stroke**: 1 if the patient had a stroke or 0 if not  \n**Note*: \"Unknown\" in smoking_status means that the information is unavailable for this patient*"}}