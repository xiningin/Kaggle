{"cell_type":{"eacec500":"code","97079ade":"code","ddfe112e":"code","a29bd676":"code","4f76e6cf":"code","7ce9a255":"code","567ac209":"code","e54b4136":"code","618f603b":"code","badff8d9":"code","21f6ca07":"code","bd2a1435":"code","8118a401":"code","47b6c7bb":"code","77370d6b":"code","a87bb82f":"code","bf131625":"code","ac3710c1":"code","4f35a035":"code","410846f7":"code","54908404":"code","a011d1c6":"code","35b06b22":"code","980c55de":"code","b6a7f7a5":"code","bfc30e64":"code","750cc2e8":"code","4fe58759":"code","4b488d19":"code","29e57718":"code","6ef8e127":"code","2c48c50d":"code","014c79e0":"markdown","7702101b":"markdown","a8867e78":"markdown","c602a1ab":"markdown","82f7e01a":"markdown","e797fdc6":"markdown","a4dd3fd2":"markdown","e43b214b":"markdown","4bb41033":"markdown","1b47ff46":"markdown","dd782629":"markdown","509cf8d3":"markdown","85699634":"markdown"},"source":{"eacec500":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfrom sklearn.metrics import roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import train_test_split","97079ade":"df=pd.read_csv('..\/input\/water-potability\/water_potability.csv')","ddfe112e":"df.head(10)\n","a29bd676":"print(df.shape)","4f76e6cf":"df.isnull()","7ce9a255":"df.dropna( axis=1, inplace=True)\ndf.head(10)","567ac209":"df.info()","e54b4136":"df.describe()","618f603b":"df['Hardness']","badff8d9":"import missingno as msno\nmsno.matrix(df)","21f6ca07":"sns.pairplot(data=df)","bd2a1435":"fig, ax = plt.subplots(1,2)\nsns.distplot(df, ax=ax[0])\nax[0].set_title(\"Original Data\")\nsns.distplot(df, ax=ax[1])\nax[1].set_title(\"Scaled data\")","8118a401":"df.plot.line(title='df Dataset')","47b6c7bb":"df['Hardness'].plot.hist()","77370d6b":"df['Solids'].plot.hist()","a87bb82f":"df['Chloramines'].plot.hist()","bf131625":"df['Conductivity'].plot.hist()","ac3710c1":"plt.figure(figsize=(7,4)) \nsns.heatmap(df.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()","4f35a035":"sns.distplot(df['Hardness'], color = 'r', label = 'Solids')","410846f7":"import matplotlib as mpl\n%matplotlib inline\n\ndf.hist(figsize=(18,10))\nplt.show()","54908404":"plt.hist(df[\"Solids\"], bins = 30)","a011d1c6":"plt.hist(df[\"Hardness\"], bins = 30)","35b06b22":"sns.scatterplot(x='Hardness', y='Solids', data=df)","980c55de":"sns.lineplot(data=df)","b6a7f7a5":"a = 4  # number of rows\nb = 4  # number of columns\nc = 1  # initialize plot counter\nfig = plt.figure(figsize=(35,32))\nfor i in df:\n    if df[i].dtype=='float64':\n        plt.subplot(a, b, c)\n        sns.distplot(df[i])\n        c = c+1\n    else:\n        continue\nplt.tight_layout()\nplt.show() ","bfc30e64":"df.head(0)","750cc2e8":"#Soure: https:\/\/www.kaggle.com\/momincks\/rain-tomorrow-in-aus-by-xgboostclassifier : Do check him out.\n\ndf_dateplot = df.iloc[-950:,:]\nplt.figure(figsize=[20,5])\nplt.plot(df['Hardness'],df['Solids'],color='blue',linewidth=1, label= 'Outcome')\nplt.plot(df['Hardness'],df['Solids'],color='red',linewidth=1, label= 'Outcome')\nplt.fill_between(df['Potability'],df['Potability'],['Potability'], facecolor = '#EBF78F')\nplt.title('Hardness and Solids')\nplt.legend(loc='lower left', frameon=False)\nplt.show()","4fe58759":"# abnormal = 1 and normal = 0\ndf ['Hardness'] = [1 if i == 'Solids' else 0 for i in df.loc[:,'Hardness']]\nx,y = df.loc[:,(df.columns != 'Solids') & (df.columns != 'Age')], df.loc[:,'Potability']","4b488d19":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\ngrid = {'n_neighbors': np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, grid, cv=3) # GridSearchCV\nknn_cv.fit(x,y)# Fit\n\n# Print hyperparameter\nprint(\"Tuned hyperparameter k: {}\".format(knn_cv.best_params_)) \nprint(\"Best score: {}\".format(knn_cv.best_score_))","29e57718":"from sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nsteps = [('scalar', StandardScaler()),\n         ('SVM', SVC())]\npipeline = Pipeline(steps)\nparameters = {'SVM__C':[1, 10, 100],\n              'SVM__gamma':[0.1, 0.01]}\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state = 1)\ncv = GridSearchCV(pipeline,param_grid=parameters,cv=3)\ncv.fit(x_train,y_train)\n\ny_pred = cv.predict(x_test)\n\nprint(\"Accuracy: {}\".format(cv.score(x_test, y_test)))\nprint(\"Tuned Model Parameters: {}\".format(cv.best_params_))","6ef8e127":"from sklearn.linear_model import LinearRegression\nX_train = np.array(df.iloc[:, :-1].values)\ny_train = np.array(df.iloc[:, 1].values)\nX_test = np.array(df.iloc[:, :-1].values)\ny_test = np.array(df.iloc[:, 1].values)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\n\nplt.plot(X_train, model.predict(X_train), color='green')\nplt.show()\nprint(accuracy)","2c48c50d":"from sklearn.cluster import KMeans\nK_clusters = range(1,8)\nkmeans = [KMeans(n_clusters=i) for i in K_clusters]\nY_axis = df[['Hardness']]\nX_axis = df[['Solids']]\nscore = [kmeans[i].fit(Y_axis).score(Y_axis) for i in range(len(kmeans))]\nplt.plot(K_clusters, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.show()","014c79e0":"# \u0639\u0631\u0636 \u0628\u0639\u0636 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a ","7702101b":"**\u062a\u062a\u0645\u062b\u0644 \u0627\u0644\u062e\u0637\u0648\u0629 \u0627\u0644\u0623\u0648\u0644\u0649 \u0641\u064a \u0627\u0644\u062a\u0639\u0631\u0641 \u0639\u0644\u0649 \u0628\u064a\u0627\u0646\u0627\u062a\u0643 \u0641\u064a \u0627\u0643\u062a\u0634\u0627\u0641 \u0627\u0644\u0627\u062e\u062a\u0644\u0627\u0641\n\u0628\u064a\u0646\u0645\u0627 \u064a\u0645\u0643\u0646\u0643 \u0648\u0636\u0639 \u0623\u064a \u0634\u064a\u0621 \u0641\u064a \u0642\u0627\u0626\u0645\u0629 \u060c \u062a\u062d\u062a\u0648\u064a \u0623\u0639\u0645\u062f\u0629 DataFrame \u0639\u0644\u0649 \u0642\u064a\u0645 \u0645\u0646 \u0646\u0648\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0639\u064a\u0646. \u0639\u0646\u062f \u0645\u0642\u0627\u0631\u0646\u0629 \u0647\u064a\u0627\u0643\u0644 \u0628\u064a\u0627\u0646\u0627\u062a Pandas \u0648 Python \u060c \u0633\u062a\u0631\u0649 \u0623\u0646 \u0647\u0630\u0627 \u0627\u0644\u0633\u0644\u0648\u0643 \u064a\u062c\u0639\u0644 Pandas \u0623\u0633\u0631\u0639 \u0628\u0643\u062b\u064a\u0631!**","a8867e78":"![fvhfkjv](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTzQ_FBbaBC4xtHoxt0NEdPGBp_2SZSpPGYmw&usqp=CAU)","c602a1ab":"# \u0645\u0646\u062d\u0646\u0649 ROC \u0645\u0639 \u0627\u0644\u0627\u0646\u062d\u062f\u0627\u0631 \u0627\u0644\u0644\u0648\u062c\u0633\u062a\u064a\n","82f7e01a":"# \u0642\u0631\u0627\u0621\u0647 \u0627\u0644\u0645\u0644\u0641\u0627\u062a ","e797fdc6":"**\u0625\u0638\u0647\u0627\u0631 \u0625\u062d\u0635\u0627\u0626\u064a\u0627\u062a \u0627\u0644\u0623\u0633\u0627\u0633\u064a\u0627\u062a\n\u0627\u0644\u0622\u0646 \u0628\u0639\u062f \u0623\u0646 \u062a\u0639\u0631\u0641\u062a \u0639\u0644\u0649 \u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0645\u062c\u0645\u0648\u0639\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u060c \u062d\u0627\u0646 \u0627\u0644\u0648\u0642\u062a \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0646\u0638\u0631\u0629 \u0639\u0627\u0645\u0629 \u0639\u0644\u0649 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u062a\u064a \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u064a\u0647\u0627 \u0643\u0644 \u0639\u0645\u0648\u062f. \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0642\u064a\u0627\u0645 \u0628\u0630\u0644\u0643 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 .describe ():**","a4dd3fd2":"# \u0627\u0644\u0627\u0646 \u0646\u0642\u0648\u0645 \u0628\u062a\u0646\u0638\u064a\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0641\u0642\u0648\u062f\u0647\n","e43b214b":"# \u0627\u0633\u062a\u062f\u0639\u0627\u0621 \u0628\u0639\u0636 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0647 ","4bb41033":"# \u062a\u0635\u0648\u064a\u0631 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a ","1b47ff46":"# HYPERPARAMETER TUNING","dd782629":"**\u0627\u0644\u0627\u0646 \u0627\u0635\u0628\u062d\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0646\u0638\u064a\u0641\u0647**","509cf8d3":"# SVM, pre-process and pipeline","85699634":"# \u062a\u0641\u0642\u062f \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0644\u0646\u0631\u0649 \u0627\u0630\u0627 \u0643\u0627\u0646 \u064a\u0648\u062c\u062f \u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0641\u0642\u0648\u062f\u0647 \u0627\u0648 \u0644\u0627"}}