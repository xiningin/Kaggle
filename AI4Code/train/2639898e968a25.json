{"cell_type":{"5b87feb4":"code","6b4335e0":"code","e5cd7e54":"code","bce7f50b":"code","457f9ba7":"code","712c40fa":"code","f071cf46":"code","97055ef8":"code","bb2a4a26":"code","487511e3":"code","f56c9fc7":"code","1eac5d8c":"code","58f9cbb8":"markdown","6e39c5e1":"markdown","337e90cd":"markdown","32a07bc6":"markdown","0b19363d":"markdown","74e2efb1":"markdown"},"source":{"5b87feb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b4335e0":"%matplotlib inline\n\nimport os\n\nimport shutil\n# copy() method in Python is used to copy the content of source file to destination file or directory. \n# It also preserves the file's permission mode but other metadata of the file like the file's creation \n# and modification times is not preserved\n# https:\/\/www.geeksforgeeks.org\/python-shutil-copy-method\/#:~:text=copy()%20method%20in%20Python,modification%20times%20is%20not%20preserved.\n\n# What does Shutil move do?\n# This module helps in automating the process of copying and removal of files and directories. \n# shutil. move() method Recursively moves a file or directory (source) to another location (destination) and \n# returns the destination. If the destination directory already exists then src is moved inside that directory.\n# https:\/\/www.geeksforgeeks.org\/python-shutil-move-method\/\n\n\nimport random\nimport torch\n\nimport torchvision\n# Torchvision is a library for Computer Vision that goes hand in hand with PyTorch. \n# It has utilities for efficient Image and Video transformations, some commonly used pre-trained models, \n# and some datasets ( torchvision does not come bundled with PyTorch , you will have to install it separately. )\n# https:\/\/medium.com\/swlh\/understanding-torchvision-functionalities-for-pytorch-391273299dc9#:~:text=Torchvision%20is%20a%20library%20for,have%20to%20install%20it%20separately.%20)\n\n\nimport numpy as np\n\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n\ntorch.manual_seed(0)\n\nprint('Using PyTorch version', torch.__version__)","e5cd7e54":"class_names = ['normal', 'viral', 'covid']\nroot_dir = '..\/input\/covid19-radiography-database'\nsource_dirs = ['NORMAL', 'Viral Pneumonia', 'COVID-19']\n\nif os.path.isdir(os.path.join(root_dir, source_dirs[1])):\n    os.mkdir(os.path.join(root_dir, 'test'))\n\n    for i, d in enumerate(source_dirs):\n        os.rename(os.path.join(root_dir, d), os.path.join(root_dir, class_names[i]))\n\n    for c in class_names:\n        os.mkdir(os.path.join(root_dir, 'test', c))\n\n    for c in class_names:\n        images = [x for x in os.listdir(os.path.join(root_dir, c)) if x.lower().endswith('png')]\n        selected_images = random.sample(images, 30)\n        for image in selected_images:\n            source_path = os.path.join(root_dir, c, image)\n            target_path = os.path.join(root_dir, 'test', c, image)\n            shutil.move(source_path, target_path)","bce7f50b":"print(root_dir)\nprint(source_dirs[1])","457f9ba7":"os.path.join(root_dir, 'test')","712c40fa":"source_dirs[1]","f071cf46":"enumerate(source_dirs)","97055ef8":"os.path.isdir(os.path.join(root_dir, source_dirs[1]))","bb2a4a26":"# torch. utils. data. Sampler classes are used to specify the sequence of indices\/keys used in data loading.\n# https:\/\/pytorch.org\/docs\/stable\/data.html#:~:text=map%2Dstyle%20datasets.-,torch.,keys%20used%20in%20data%20loading.\n# https:\/\/stanford.edu\/~shervine\/blog\/pytorch-how-to-generate-data-parallel\n\nclass ChestXRayDataset(torch.utils.data.Dataset):\n    def __init__(self, image_dirs, transform):\n        def get_images(class_name):\n            images = [x for x in os.listdir(image_dirs[class_name]) if x[-3:].lower().endswith('png')]\n            print(f'Found {len(images)} {class_name} examples')\n            return images\n        \n        self.images = {}\n        self.class_names = ['normal', 'viral', 'covid']\n        \n        for class_name in self.class_names:\n            self.images[class_name] = get_images(class_name)\n            \n        self.image_dirs = image_dirs\n        self.transform = transform\n        \n    \n    def __len__(self):\n        return sum([len(self.images[class_name]) for class_name in self.class_names])\n    \n    \n    def __getitem__(self, index):\n        class_name = random.choice(self.class_names)\n        index = index % len(self.images[class_name])\n        image_name = self.images[class_name][index]\n        image_path = os.path.join(self.image_dirs[class_name], image_name)\n        image = Image.open(image_path).convert('RGB')\n        return self.transform(image), self.class_names.index(class_name)","487511e3":"train_transform = torchvision.transforms.Compose([\n    torchvision.transforms.Resize(size=(224, 224)),\n    torchvision.transforms.RandomHorizontalFlip(),\n    torchvision.transforms.ToTensor(),\n    torchvision.transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\ntest_transform = torchvision.transforms.Compose([\n    torchvision.transforms.Resize(size=(224, 224)),\n    torchvision.transforms.ToTensor(),\n    torchvision.transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])","f56c9fc7":"train_dirs = {\n    'normal': '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Normal',\n    'viral': '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/Viral Pneumonia',\n    'covid': '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID'\n}\n\ntrain_dataset = ChestXRayDataset(train_dirs, train_transform)","1eac5d8c":"test_dirs = {\n    'normal': '..\/input\/covid19-radiography-database\/COVID-19_Radiography_Dataset\/COVID\/test\/normal',\n    'viral': 'COVID-19 Radiography Database\/test\/viral',\n    'covid': 'COVID-19 Radiography Database\/test\/covid'\n}\n\ntest_dataset = ChestXRayDataset(test_dirs, test_transform)","58f9cbb8":"# **Prepare DataLoader**","6e39c5e1":"# **Preparing Training and Test Sets**","337e90cd":"# **Image Transformations**","32a07bc6":"# **Detecting COVID-19 with Chest X Ray using PyTorch**\n\nImage classification of Chest X Rays in one of three classes: Normal, Viral Pneumonia, COVID-19\n\nNotebook created for the guided project [Detecting COVID-19 with Chest X Ray using PyTorch](https:\/\/www.coursera.org\/projects\/covid-19-detection-x-ray) on Coursera\n\nDataset from [COVID-19 Radiography Dataset](https:\/\/www.kaggle.com\/tawsifurrahman\/covid19-radiography-database) on Kaggle","0b19363d":"# **Importing Libraries**","74e2efb1":"# **Creating Custom Dataset**"}}