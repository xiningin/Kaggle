{"cell_type":{"7fcf2ba2":"code","b1df7576":"code","c297f6fd":"code","6929c763":"code","ec1241e0":"code","d6f9f37e":"code","aa512db5":"code","154253aa":"code","c4cd80cb":"code","9817b70f":"code","15848515":"code","16bebd41":"code","88444413":"code","b0d924d3":"code","50bf9608":"code","be7fedc2":"code","334731e1":"code","b11b196d":"code","027e1a30":"code","20302b67":"code","5b393a0d":"code","af5373bc":"code","d3121396":"code","382c1405":"code","cd1f25c7":"code","f2860e9d":"code","657d2dbf":"code","25445386":"code","43a0a9d5":"code","aa719cb1":"code","34778008":"markdown","3993fba4":"markdown","965c245e":"markdown","ac543e5f":"markdown","aa57d708":"markdown","94df382b":"markdown","91899224":"markdown","e4889c47":"markdown"},"source":{"7fcf2ba2":"import torch\nimport torch.nn as nn\n\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","b1df7576":"sns.get_dataset_names()","c297f6fd":"data = sns.load_dataset(\"flights\")\ndata.head()","6929c763":"data.shape","ec1241e0":"fig_size = plt.rcParams[\"figure.figsize\"]\nfig_size[0] = 15\nfig_size[1] = 5\nplt.rcParams[\"figure.figsize\"] = fig_size","d6f9f37e":"plt.title('Month vs Passenger')\nplt.ylabel('Total Passengers')\nplt.xlabel('Months')\nplt.grid(True)\nplt.autoscale(axis='x',tight=True)\nplt.plot(data['passengers'])","aa512db5":"data.columns","154253aa":"all_data = data['passengers'].values.astype(float)","c4cd80cb":"all_data","9817b70f":"test_data_size = 12\n\ntrain_data = all_data[:-test_data_size]\ntest_data = all_data[-test_data_size:]","15848515":"print(len(train_data))\nprint(len(test_data))","16bebd41":"print(test_data)","88444413":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(-1, 1))\ntrain_data_normalized = scaler.fit_transform(train_data .reshape(-1, 1))","b0d924d3":"print(train_data_normalized[:5])\nprint(train_data_normalized[-5:])","50bf9608":"train_data_normalized = torch.FloatTensor(train_data_normalized).view(-1)","be7fedc2":"train_window = 12","334731e1":"def create_inout_sequences(input_data, tw):\n    inout_seq = []\n    L = len(input_data)\n    for i in range(L-tw):\n        train_seq = input_data[i:i+tw]\n        train_label = input_data[i+tw:i+tw+1]\n        inout_seq.append((train_seq ,train_label))\n    return inout_seq","b11b196d":"train_inout_seq = create_inout_sequences(train_data_normalized, train_window)","027e1a30":"train_inout_seq[:5]","20302b67":"class LSTM(nn.Module):\n    def __init__(self, input_size=1, hidden_layer_size=100, output_size=1):\n        super().__init__()\n        self.hidden_layer_size = hidden_layer_size\n\n        self.lstm = nn.LSTM(input_size, hidden_layer_size)\n\n        self.linear = nn.Linear(hidden_layer_size, output_size)\n\n        self.hidden_cell = (torch.zeros(1,1,self.hidden_layer_size),\n                            torch.zeros(1,1,self.hidden_layer_size))\n\n    def forward(self, input_seq):\n        lstm_out, self.hidden_cell = self.lstm(input_seq.view(len(input_seq) ,1, -1), self.hidden_cell)\n        predictions = self.linear(lstm_out.view(len(input_seq), -1))\n        return predictions[-1]","5b393a0d":"model = LSTM()\nloss_function = nn.MSELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)","af5373bc":"model","d3121396":"epochs = 150\n\nfor i in range(epochs):\n    for seq, labels in train_inout_seq:\n        optimizer.zero_grad()\n        model.hidden_cell = (torch.zeros(1, 1, model.hidden_layer_size),\n                        torch.zeros(1, 1, model.hidden_layer_size))\n\n        y_pred = model(seq)\n\n        single_loss = loss_function(y_pred, labels)\n        single_loss.backward()\n        optimizer.step()\n\n    if i%25 == 1:\n        print(f'epoch: {i:3} loss: {single_loss.item():10.8f}')\n\nprint(f'epoch: {i:3} loss: {single_loss.item():10.10f}')","382c1405":"fut_pred = 12\n\ntest_inputs = train_data_normalized[-train_window:].tolist()\nprint(test_inputs)","cd1f25c7":"model.eval()\n\nfor i in range(fut_pred):\n    seq = torch.FloatTensor(test_inputs[-train_window:])\n    with torch.no_grad():\n        model.hidden = (torch.zeros(1, 1, model.hidden_layer_size),\n                        torch.zeros(1, 1, model.hidden_layer_size))\n        test_inputs.append(model(seq).item())","f2860e9d":"test_inputs[fut_pred:]","657d2dbf":"actual_predictions = scaler.inverse_transform(np.array(test_inputs[train_window:] ).reshape(-1, 1))\nprint(actual_predictions)","25445386":"x = np.arange(132, 144, 1)\nprint(x)","43a0a9d5":"plt.title('Month vs Passenger')\nplt.ylabel('Total Passengers')\nplt.grid(True)\nplt.autoscale(axis='x', tight=True)\nplt.plot(data['passengers'])\nplt.plot(x,actual_predictions)\nplt.show()","aa719cb1":"plt.title('Month vs Passenger')\nplt.ylabel('Total Passengers')\nplt.grid(True)\nplt.autoscale(axis='x', tight=True)\n\nplt.plot(data['passengers'][-train_window:])\nplt.plot(x,actual_predictions)\nplt.show()","34778008":"Importing library","3993fba4":"Analyzing dataset","965c245e":"Making predictions","ac543e5f":"Getting datast from Seaborn library","aa57d708":"# Time Series Prediction using LSTM RNN in PyTorch","94df382b":"Preprocessing the dataset","91899224":"Training LSTM model","e4889c47":"Defining LSTM Model"}}