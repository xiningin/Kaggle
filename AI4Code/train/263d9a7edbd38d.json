{"cell_type":{"aa82df0c":"code","a0b670ad":"code","087a4f12":"code","499fb327":"code","53d1f0c5":"code","24014ceb":"code","eb9ed7b1":"code","b410ebe4":"code","9496bed0":"code","b793fecf":"code","c723b77c":"code","e23991e7":"code","71ab0451":"code","ad5b2628":"code","b199db34":"code","1b14250f":"code","a4ab2d21":"code","bc025fb2":"code","cdead812":"code","4e38d119":"code","db0e13cd":"code","1eb8025b":"code","20a02e16":"code","1fd36aa4":"code","d5ba1e4a":"code","972cd732":"code","565d9708":"code","6e6f540e":"code","7c754195":"code","923f9b80":"code","3ead46bb":"code","25dce0dc":"code","04771344":"code","bd0fc93e":"code","d0f3925e":"code","afb2e8a3":"code","ec16435d":"code","35748dc4":"code","0a055a8a":"markdown","970c9e5c":"markdown","544c1161":"markdown","53e4b177":"markdown","2b58cc87":"markdown","b494f5df":"markdown","bd5e8781":"markdown","ef0726b9":"markdown","6ac0975a":"markdown","f7d94c5f":"markdown","8532ce7a":"markdown","37e2047a":"markdown","97639fb7":"markdown","9ced1dfe":"markdown","6e93d5b0":"markdown","fafc3014":"markdown","028a293b":"markdown","2794238f":"markdown","235b19cc":"markdown","5529bab5":"markdown","1b94ff0d":"markdown","706de1f8":"markdown","4d4d3d66":"markdown","c4b864c6":"markdown","3bd0408e":"markdown","515305ad":"markdown","47fa420a":"markdown","da5953db":"markdown","c300f5a2":"markdown"},"source":{"aa82df0c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a0b670ad":"df = pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\n\nprint(df.shape)\ndf.head()","087a4f12":"df.isnull().sum()","499fb327":"num_features = [feature for feature in df.columns if df[feature].dtype != 'O']\ndf[num_features].head()","53d1f0c5":"discrete_features = [feature for feature in num_features if len(df[feature].unique()) < 25]\nprint(discrete_features)","24014ceb":"for feature in discrete_features:\n    data = df.copy()\n    \n    #Fraction of total cars for each cylinder type\n    print(data.groupby(feature)['CO2 Emissions(g\/km)'].count() \/ len(data))\n    \n    #Counts of each cylinder type\n    print(data[feature].value_counts()) \n    \n    data[feature].value_counts().plot.bar()\n    plt.show()","eb9ed7b1":"for feature in discrete_features:\n    data = df.copy()\n    \n    #Contribution of each cylinder type to CO2 Emission\n    print(data.groupby(feature)['CO2 Emissions(g\/km)'].sum() \/ data['CO2 Emissions(g\/km)'].sum())\n    data.groupby(feature)['CO2 Emissions(g\/km)'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Emission')\n    plt.show()","b410ebe4":"continuous_features = [feature for feature in num_features if feature not in discrete_features]\nprint(continuous_features)","9496bed0":"for feature in continuous_features:\n    data = df.copy()\n    \n    data[feature].hist(bins = 25)\n    plt.xlabel(feature)\n    plt.ylabel('count')\n    plt.show()","b793fecf":"## Log transformation and relationship with target variable\n\nfor feature in continuous_features:\n    if feature != 'CO2 Emissions(g\/km)':\n        data = df.copy()\n        \n        data[feature] = np.log(data[feature])\n        \n        plt.scatter(data[feature], np.log(data['CO2 Emissions(g\/km)']))\n        plt.xlabel(feature)\n        plt.ylabel('emission')\n        plt.show()","c723b77c":"for feature in continuous_features:\n    data = df.copy()\n    \n    data[feature] = np.log(data[feature])\n    data.boxplot(column = feature)\n    plt.ylabel('values')\n    plt.show()","e23991e7":"cat_features = [feature for feature in df.columns if feature not in num_features]\ndf[cat_features].head()","71ab0451":"for feature in cat_features:\n    print('{}: {} categories'.format(feature, len(df[feature].unique())))","ad5b2628":"cat_features.remove('Model')","b199db34":"## relationship with target variable\n\nfor feature in cat_features:\n    data = df.copy()\n    \n    data.groupby(feature)['CO2 Emissions(g\/km)'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('emission')\n    plt.show()","1b14250f":"dataset = df.copy()\ndataset.head()","a4ab2d21":"for feature in continuous_features:\n    dataset[feature] = np.log(dataset[feature])","bc025fb2":"for feature in cat_features:\n    ordinal_labels = dataset.groupby(feature)['CO2 Emissions(g\/km)'].max().sort_values().index\n    ordinal_dict = {k:i for i, k in enumerate(ordinal_labels, 0)}\n    dataset[feature] = data[feature].map(ordinal_dict)","cdead812":"dataset.drop(['Model'], axis = 1, inplace = True)\ndataset.head()","4e38d119":"dataset.to_csv('processed_data.csv', index = False)","db0e13cd":"df = pd.read_csv('processed_data.csv')\ndf.head()","1eb8025b":"X = df.drop('CO2 Emissions(g\/km)', axis = 1)\ny = df.iloc[:, -1]","20a02e16":"cor = X.corr()\nsns.heatmap(cor, annot = True, cmap = plt.cm.CMRmap_r)\nplt.show()","1fd36aa4":"X = X.drop(['Cylinders', 'Fuel Consumption Hwy (L\/100 km)', 'Fuel Consumption Comb (L\/100 km)'], axis = 1)","d5ba1e4a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","972cd732":"scaler = MinMaxScaler()\nscaler.fit(X_train)","565d9708":"X_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","6e6f540e":"linear_regressor = LinearRegression()\nlinear_regressor.fit(X_train_scaled, y_train)","7c754195":"linear_regressor.score(X_test_scaled, y_test)","923f9b80":"scores = cross_val_score(linear_regressor, X_train_scaled, y_train, cv=5)\nprint(np.mean(scores))","3ead46bb":"ridge_regressor = Ridge(alpha = 1)\nridge_regressor.fit(X_train_scaled, y_train)","25dce0dc":"ridge_regressor.score(X_test_scaled, y_test)","04771344":"lasso_regr = Lasso(alpha = 0.005)\nlasso_regr.fit(X_train_scaled, y_train)","bd0fc93e":"lasso_regr.score(X_test_scaled, y_test)","d0f3925e":"lasso_regr.coef_","afb2e8a3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","ec16435d":"regressor = RandomForestRegressor()\n\nregressor.fit(X_train, y_train)","35748dc4":"regressor.score(X_test, y_test)","0a055a8a":"## Random Forest Regression","970c9e5c":"## Numerical Features","544c1161":"# Feature Selection","53e4b177":"### Continuous Features","2b58cc87":"## Missing Values","b494f5df":"Since each categorical feature has a strong relationship with Emission we should use ordinal encoding\n\nWe will not convert 'Model' as we are dropping the feature later","bd5e8781":"## Linear Regression","ef0726b9":"### Cross Validation","6ac0975a":"## Feature Scaling","f7d94c5f":"## Handling rare Categorical Features","8532ce7a":"### Discrete features","37e2047a":"# Feature Engineering","97639fb7":"##### Observation:\n1. Majority of the cars have 4 cylinders(43%), followed by 6 cylinders(33%) and 8 cylinders(18%)\n2. These cars account for 94.7% of total CO2 Emissions\n3. Emission increases as number of cylinders increase","9ced1dfe":"# Data Analysis","6e93d5b0":"We cannot classify 'Make' or 'Transmission' as there are more categories in it and they have a relationship with Emission. There are not enough rare variables in the other categories that the need to declare them explicitly should arise","fafc3014":"## Ridge Regression","028a293b":"We can drop 'model' feature as 'make' will provide an overview on the specifications ","2794238f":"## Categorical Features","235b19cc":"### Continuous Outliers","5529bab5":"## Transformation of Continuous Values","1b94ff0d":"## Dropping with correlation","706de1f8":"## Lasso Regression","4d4d3d66":"#### Distribution","c4b864c6":"Features are slightly right skewed. Log transformation could be applied","3bd0408e":"# Models","515305ad":"##### Observation:\n1. Emission increases with increase in engine size\n2. Emission increases with increase in Fuel Consumption (City, Hwy, Comb (L\/100km))\n3. Emission decreases with increase in Fuel Consumption Comb (mpg)","47fa420a":"We can drop columns with correlation > 0.85","da5953db":"### Converting Categorical features to Numerical features","c300f5a2":"##### Observations:\n1. Bugatti has the highest emission\n2. Vans (Cargo and Passenger) have the highest emission\n3. AM5 engines have relatively lowest emission\n4. E > Z > D > X > N fuel type emission rate"}}