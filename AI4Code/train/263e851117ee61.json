{"cell_type":{"e5d75bff":"code","69e3a0d9":"code","2c262775":"code","d4bd2d71":"code","78b3e754":"code","098ce0ad":"code","41a091c7":"code","440ae7c2":"code","47ff4f95":"code","8a6d637e":"code","160d6900":"code","0c7d8673":"code","d45c5b95":"code","8f51291e":"code","a8b5efd4":"code","f97a9fd5":"code","5fb808cf":"code","823fa387":"code","b327a51c":"code","88c20b14":"code","199c6ca6":"code","511b83ad":"code","d90fde7e":"code","906cfe8d":"code","18cd616c":"code","1e8e748f":"code","2d262036":"code","f2cb4213":"code","882a0d42":"code","7533b3ab":"code","acc5bb4d":"code","768dc310":"code","cfe24e13":"code","6f902ea1":"code","a8a17a9f":"code","b1450d35":"code","438b9851":"code","769b718c":"code","3520ba0f":"markdown","372d9f0b":"markdown","fc0e2317":"markdown","9d13de34":"markdown"},"source":{"e5d75bff":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport lightgbm as lgbm\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression, LinearRegression","69e3a0d9":"train_data = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\ntest_data = pd.read_csv('..\/input\/mobile-price-classification\/test.csv')\n\ntrain_data.head()","2c262775":"train_data.describe()","d4bd2d71":"numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ncategorical_columns = []\nfeatures = train_data.columns.values.tolist()\nfor col in features:\n    if train_data[col].dtype in numerics: continue\n    categorical_columns.append(col)\nindexer = {}\nfor col in categorical_columns:\n    if train_data[col].dtype in numerics: continue\n    _, indexer[col] = pd.factorize(train_data[col])\n    \nfor col in categorical_columns:\n    if train_data[col].dtype in numerics: continue\n    train_data[col] = indexer[col].get_indexer(train_data[col])","78b3e754":"corr = train_data.corr()\ncorr","098ce0ad":"fig = plt.figure(figsize=(15,12))\nsns.heatmap(corr)","41a091c7":"corr.sort_values(by=[\"price_range\"],ascending=False).iloc[0].sort_values(ascending=False)","440ae7c2":"plt.hist(train_data['battery_power'])\nplt.show()","47ff4f95":"plt.figure(figsize=(8,8))\nsns.FacetGrid(train_data, hue=\"price_range\", size=8).map(sns.kdeplot, \"battery_power\").add_legend()\nplt.ioff() \nplt.show()","8a6d637e":"plt.hist(train_data['ram'])\nplt.show()","160d6900":"plt.figure(figsize=(8,8))\nsns.FacetGrid(train_data, hue=\"price_range\", size=8).map(sns.kdeplot, \"ram\").add_legend()\nplt.ioff() \nplt.show()","0c7d8673":"sns.countplot(train_data['dual_sim'])\nplt.show()","d45c5b95":"plt.figure(figsize=(8,8))\nsns.FacetGrid(train_data, hue=\"price_range\", size=8).map(sns.kdeplot, \"dual_sim\").add_legend()\nplt.ioff() \nplt.show()","8f51291e":"plt.figure(figsize=(8,8))\nsns.FacetGrid(train_data, hue=\"price_range\", size=8).map(sns.kdeplot, \"four_g\").add_legend()\nplt.ioff() \nplt.show()","a8b5efd4":"plt.figure(figsize=(10,6))\ntrain_data['fc'].hist(alpha=0.5,color='blue',label='Front camera')\ntrain_data['pc'].hist(alpha=0.5,color='red',label='Primary camera')\nplt.legend()\nplt.xlabel('MegaPixels')","f97a9fd5":"y = train_data['price_range']\n\ndel train_data['price_range']\n\nX = train_data","5fb808cf":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","823fa387":"train_set = lgbm.Dataset(X_train, y_train, silent=False)\nvalid_set = lgbm.Dataset(X_valid, y_valid, silent=False)\n\nparams = {\n        'boosting_type':'gbdt',\n        'objective': 'regression',\n        'num_leaves': 31,\n        'learning_rate': 0.05,\n        'max_depth': -1,\n        'subsample': 0.8,\n        'bagging_fraction' : 1,\n        'max_bin' : 5000 ,\n        'bagging_freq': 20,\n        'colsample_bytree': 0.6,\n        'metric': 'rmse',\n        'min_split_gain': 0.5,\n        'min_child_weight': 1,\n        'min_child_samples': 10,\n        'scale_pos_weight':1,\n        'zero_as_missing': True,\n        'seed':0,        \n    }\n\nmodelL = lgbm.train(params, train_set = train_set, num_boost_round=1000,\n                   early_stopping_rounds=50,verbose_eval=10, valid_sets=valid_set)","b327a51c":"fig =  plt.figure(figsize = (15,15))\naxes = fig.add_subplot(111)\nlgbm.plot_importance(modelL,ax = axes,height = 0.5)\nplt.show();plt.close()","88c20b14":"feature_score = pd.DataFrame(X.columns, columns = ['feature']) \nfeature_score['score_lgb'] = modelL.feature_importance()","199c6ca6":"# Standardization for regression models\ntrain = pd.DataFrame(\n    preprocessing.MinMaxScaler().fit_transform(train_data),\n    columns=train_data.columns,\n    index=train_data.index\n)","511b83ad":"logreg = LogisticRegression()\nlogreg.fit(train, y)\ncoeff_logreg = pd.DataFrame(train.columns.delete(0))\ncoeff_logreg.columns = ['feature']\ncoeff_logreg[\"score_logreg\"] = pd.Series(logreg.coef_[0])\ncoeff_logreg.sort_values(by='score_logreg', ascending=False)","d90fde7e":"coeff_logreg[\"score_logreg\"] = coeff_logreg[\"score_logreg\"].abs()\nfeature_score = pd.merge(feature_score, coeff_logreg, on='feature')","906cfe8d":"linreg = LinearRegression()\nlinreg.fit(train, y)\ncoeff_linreg = pd.DataFrame(train.columns.delete(0))\ncoeff_linreg.columns = ['feature']\ncoeff_linreg[\"score_linreg\"] = pd.Series(linreg.coef_)\ncoeff_linreg.sort_values(by='score_linreg', ascending=False)","18cd616c":"coeff_linreg[\"score_linreg\"] = coeff_linreg[\"score_linreg\"].abs()","1e8e748f":"feature_score = pd.merge(feature_score, coeff_linreg, on='feature')\nfeature_score = feature_score.fillna(0)\nfeature_score = feature_score.set_index('feature')\nfeature_score","2d262036":"feature_score['mean'] = feature_score.mean(axis=1)","f2cb4213":"feature_score['total'] = 0.7*feature_score['score_lgb'] + 0.15*feature_score['score_logreg'] + 0.15*feature_score['score_linreg']","882a0d42":"feature_score.sort_values('total', ascending=False)","7533b3ab":"feature_score.sort_values('mean', ascending=False).plot(kind='bar', figsize=(20, 10))","acc5bb4d":"feature_score.sort_values('total', ascending=False).plot(kind='bar', figsize=(20, 10))","768dc310":"feature_columns = ['ram', 'px_height', 'px_width', 'mobile_wt', 'pc', 'sc_w']\nX = X[feature_columns];\n\nX.head()","cfe24e13":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=0)","6f902ea1":"dtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\naccur = dtree.score(X_valid,y_valid) * 100\naccur","a8a17a9f":"rfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)\naccur = rfc.score(X_valid, y_valid) * 100\naccur","b1450d35":"gbc = GradientBoostingClassifier()\ngbc.fit(X_train,y_train)\naccur = gbc.score(X_valid,y_valid) * 100\naccur","438b9851":"X_new = test_data[feature_columns]\n\nprediction = GradientBoostingClassifier()\nprediction.fit(X, y)\npredicted_price=prediction.predict(X_new)","769b718c":"predicted_price","3520ba0f":"## Imports","372d9f0b":"## Prediction","fc0e2317":"Thanks to: \n\nFE - https:\/\/www.kaggle.com\/vbmokin\/feature-importance-xgb-lgbm-logreg-linreg\n\nModel tunung - https:\/\/www.kaggle.com\/vbmokin\/titanic-0-83253-comparison-20-popular-models#FE,-tuning-and-comparison-of-the-20-popular-models\n\n\n* Table of Contents\n* Import libraries\n* Download dataset\n* Preparing to analysis\n* FE\n* Model tuning\n* KNeighborsClassifier\n* RandomForestClassifier\n* GradientBoostingClassifier\n* Prediction","9d13de34":"## Data"}}