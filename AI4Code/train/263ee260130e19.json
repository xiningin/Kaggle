{"cell_type":{"6de34940":"code","8bf7358c":"code","695115d0":"code","63c6bc21":"code","4f2f736a":"code","9d71fa21":"code","a332fd31":"code","cfa67ec2":"code","ca3648c0":"code","c208ca6d":"code","16f63293":"code","73d851a4":"code","d8b37761":"code","8b644732":"code","edd19013":"code","3b7c2863":"code","d2ddc02b":"code","5a9cfd50":"code","81b64304":"code","cceb76a8":"code","9b438c81":"code","f5263c21":"code","a504ddc9":"code","3ad4c7fe":"code","c2598b1b":"code","5667d5d8":"code","3297ee00":"code","97dc67c2":"code","8d18055e":"code","3207c719":"code","7ff214fe":"markdown","eae42527":"markdown","c1b99096":"markdown","b274c345":"markdown","05a1a4e3":"markdown","cc703819":"markdown","f5458fe5":"markdown","9f17bb47":"markdown","1d18dbc7":"markdown","6c5bc88d":"markdown","51f00b32":"markdown","1236d579":"markdown","7a18a0d5":"markdown","9a60bffc":"markdown","8065e4ca":"markdown","7f1d3496":"markdown","fd4612eb":"markdown","5cbd0e83":"markdown","5fae8953":"markdown","141e9542":"markdown","82ff84ea":"markdown","45b078da":"markdown","2a7c971d":"markdown","e053f4f2":"markdown","f82a700a":"markdown","98a0410a":"markdown","b4953bc8":"markdown","35906a79":"markdown","63138de1":"markdown","3617f0e6":"markdown","fb254a55":"markdown","2cf19655":"markdown","6246b1e5":"markdown","d1f9bc37":"markdown"},"source":{"6de34940":"# --- CSS STYLE ---\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/competiongoal\/archive\/alerts.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","8bf7358c":"\n\"\"\"\n!pip install pandarallel \n\nimport gc\n\nimport numpy as np\nimport pandas a\nfrom pathlib import Path\n\nfrom pandarallel import pandarallel\npandarallel.initialize()\n\nBASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\ntrain = pd.read_csv(BASE_DIR \/ 'train.csv')\n\nnull = np.nan\ntrue = True\nfalse = False\n\nfor col in train.columns\n    if col == 'date': continue\n\n    _index = train[col].notnull()\n    train.loc[_index, col] = train.loc[_index, col].parallel_apply(lambda x: eval(x))\n\n    outputs = []\n    for index, date, record in train.loc[_index, ['date', col]].itertuples():\n        _df = pd.DataFrame(record)\n        _df['index'] = index\n        _df['date'] = date\n        outputs.append(_df)\n\n    outputs = pd.concat(outputs).reset_index(drop=True)\n\n    outputs.to_csv(f'{col}_train.csv', index=False)\n    outputs.to_pickle(f'{col}_train.pkl')\n\n    del outputs\n    del train[col]\n    gc.collect()\n\"\"\"","695115d0":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom functools import reduce\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport mlb\nimport matplotlib.pyplot as plt\nimport seaborn as sns","63c6bc21":"BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\nTRAIN_DIR = Path('..\/input\/mlbdata') #..\/input\/mlb-pdef-train-dataset')","4f2f736a":"players = pd.read_csv(BASE_DIR \/ 'players.csv')\n\nrosters = pd.read_pickle(TRAIN_DIR \/ 'rosters_train.pkl')\ntargets = pd.read_pickle(TRAIN_DIR \/ 'nextDayPlayerEngagement_train.pkl')\nscores = pd.read_pickle(TRAIN_DIR \/ 'playerBoxScores_train.pkl')\nscores = scores.groupby(['playerId', 'date']).sum().reset_index()\n#scores = pd.read_csv(TRAIN_DIR\/ 'playerBoxScores_train.csv')","9d71fa21":"targets_cols = ['playerId', 'target1', 'target2', 'target3', 'target4', 'date']\nplayers_cols = ['playerId', 'primaryPositionName']\nrosters_cols = ['playerId', 'teamId', 'status', 'date']\nscores_cols = ['playerId', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n       'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'lossesPitching', 'flyOutsPitching', 'airOutsPitching', ###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves','holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances', 'date']\n\nfeature_cols = ['label_playerId', 'label_primaryPositionName', 'label_teamId',\n       'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n       'pickoffs','gamesPlayedPitching', 'gamesStartedPitching', \n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'lossesPitching', 'flyOutsPitching', 'airOutsPitching',###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen',  'wildPitches', 'pickoffsPitching','balks',#@\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances','target1_mean',\n 'target1_median',\n 'target1_std',\n 'target1_min',\n 'target1_max',\n 'target1_prob',\n 'target2_mean',\n 'target2_median',\n 'target2_std',\n 'target2_min',\n 'target2_max',\n 'target2_prob',\n 'target3_mean',\n 'target3_median',\n 'target3_std',\n 'target3_min',\n 'target3_max',\n 'target3_prob',\n 'target4_mean',\n 'target4_median',\n 'target4_std',\n 'target4_min',\n 'target4_max',\n 'target4_prob']\n\nfeature_cols2 = ['label_playerId', 'label_primaryPositionName', 'label_teamId',\n       'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n        'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n        'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'lossesPitching', 'flyOutsPitching', 'airOutsPitching',###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'wildPitches', 'pickoffsPitching','balks', #@\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances','target1_mean',\n 'target1_median',\n 'target1_std',\n 'target1_min',\n 'target1_max',\n 'target1_prob',\n 'target2_mean',\n 'target2_median',\n 'target2_std',\n 'target2_min',\n 'target2_max',\n 'target2_prob',\n 'target3_mean',\n 'target3_median',\n 'target3_std',\n 'target3_min',\n 'target3_max',\n 'target3_prob',\n 'target4_mean',\n 'target4_median',\n 'target4_std',\n 'target4_min',\n 'target4_max',\n 'target4_prob',\n    'target1']","a332fd31":"player_target_stats = pd.read_csv(\"..\/input\/mlbdata\/player_target_stats.csv\")\n#player_target_stats = player_target_stats.drop(['Unnamed: 0'],axis=1)\ndata_names=player_target_stats.columns.values.tolist()\n#data_names","cfa67ec2":"# creat dataset\ntrain = targets[targets_cols].merge(players[players_cols], on=['playerId'], how='left')\ntrain = train.merge(rosters[rosters_cols], on=['playerId', 'date'], how='left')\ntrain = train.merge(scores[scores_cols], on=['playerId', 'date'], how='left')\ntrain = train.merge(player_target_stats, how='inner', left_on=[\"playerId\"],right_on=[\"playerId\"])\n\n\n# label encoding\nplayer2num = {c: i for i, c in enumerate(train['playerId'].unique())}\nposition2num = {c: i for i, c in enumerate(train['primaryPositionName'].unique())}\nteamid2num = {c: i for i, c in enumerate(train['teamId'].unique())}\nstatus2num = {c: i for i, c in enumerate(train['status'].unique())}\ntrain['label_playerId'] = train['playerId'].map(player2num)\ntrain['label_primaryPositionName'] = train['primaryPositionName'].map(position2num)\ntrain['label_teamId'] = train['teamId'].map(teamid2num)\ntrain['label_status'] = train['status'].map(status2num)","ca3648c0":"#train['add1'] =train['target1_mean'].shift(1) - train['target1_mean'].shift(-1)\n#train['add1'] =train['target1_mean'].rolling(5, min_periods=1).mean()\n#train['add1'] = train['homeRuns'] * train['hits']\n#feature_cols.append('add1')","c208ca6d":"train_X = train[feature_cols]\ntrain_y = train[['target1', 'target2', 'target3', 'target4']]\n\n_index = (train['date'] < 20210426) \nx_train1 = train_X.loc[_index].reset_index(drop=True)\ny_train1 = train_y.loc[_index].reset_index(drop=True)\nx_valid1 = train_X.loc[~_index].reset_index(drop=True)\ny_valid1 = train_y.loc[~_index].reset_index(drop=True)","16f63293":"train_X = train[feature_cols2]\ntrain_y = train[['target1', 'target2', 'target3', 'target4']]\n\n_index = (train['date'] < 20210426) \nx_train2 = train_X.loc[_index].reset_index(drop=True)\ny_train2 = train_y.loc[_index].reset_index(drop=True)\nx_valid2 = train_X.loc[~_index].reset_index(drop=True)\ny_valid2 = train_y.loc[~_index].reset_index(drop=True)","73d851a4":"def fit_lgbm(x_train, y_train, x_valid, y_valid, params: dict=None, verbose=100):\n    oof_pred = np.zeros(len(y_valid), dtype=np.float32)\n    model = lgbm.LGBMRegressor(**params)\n    model.fit(x_train, y_train, \n        eval_set=[(x_valid, y_valid)],  \n        early_stopping_rounds=verbose, \n        verbose=verbose)\n    oof_pred = model.predict(x_valid)\n    score = mean_absolute_error(oof_pred, y_valid)\n    print('mae:', score)\n    return oof_pred, model, score\n\n","d8b37761":"params1 = {'objective':'mae','reg_alpha': 0.14947461820098767, 'random_state':77,'reg_lambda': 0.08, 'n_estimators': 3633, 'learning_rate': 0.1, 'num_leaves': 660, 'feature_fraction': 0.9101240539122566, 'bagging_fraction': 0.9884451442950513, 'bagging_freq': 8, 'min_child_samples': 51}","8b644732":"oof1, model1, score1 = fit_lgbm(\n    x_train1, y_train1['target1'],\n    x_valid1, y_valid1['target1'],\n    params1\n )\nscore1","edd19013":"params2 = {\n 'objective':'mae',\n 'reg_alpha': 0.1,\n 'reg_lambda': 0.1, \n 'n_estimators': 1000,#80\n 'learning_rate': 0.05,\n 'random_state': 77,#42\n \"num_leaves\": 155\n}","3b7c2863":"oof2, model2, score2 = fit_lgbm(\n    x_train2, y_train2['target2'],\n    x_valid2, y_valid2['target2'],\n    params2\n)\nscore2","d2ddc02b":"params3 = {\n 'objective':'mae',\n 'reg_alpha': 0.1,\n 'reg_lambda': 0.09, \n 'n_estimators': 10000,\n 'learning_rate': 0.05,\n 'random_state': 77,#42\n \"num_leaves\": 800\n}\n","5a9cfd50":"oof3, model3, score3 = fit_lgbm(\n    x_train2, y_train2['target3'],\n    x_valid2, y_valid2['target3'],\n   params3\n)\nscore3","81b64304":"params4 = {'objective':'mae','reg_alpha': 0.016468100279441976, 'random_state':77,'reg_lambda': 0.09128335764019105, 'n_estimators': 9868, 'learning_rate': 0.10528150510326864, 'num_leaves': 1250, 'feature_fraction': 0.4, 'bagging_fraction': 0.3, 'bagging_freq': 19, 'min_child_samples': 71}","cceb76a8":"oof4, model4, score4 = fit_lgbm(\n    x_train2, y_train2['target4'],\n    x_valid2, y_valid2['target4'],\n    params4\n)\nscore4","9b438c81":"score =(score1+score2+score3+score4) \/ 4\nprint(f'score: {score}')","f5263c21":"score =(score2+score3+score4) \/ 3\nprint(f'score: {score}')","a504ddc9":"import sys\nprint(\"{}{:>25}{}{:>10}{}\".format('|','Variable Name','|','memory','|'))\nfor var_name in dir():\n    if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > 10000:\n        print(\"{}{:>25}{}{:>10}{}\".format('|',var_name,'|',sys.getsizeof(eval(var_name)),'|'))","3ad4c7fe":"players_cols = ['playerId', 'primaryPositionName']\nrosters_cols = ['playerId', 'teamId', 'status']\nscores_cols = ['playerId', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n       'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n       'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n       'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n       'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n       'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n       'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n       'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n       'lossesPitching', 'flyOutsPitching', 'airOutsPitching',###\n       'groundOutsPitching', 'runsPitching', 'doublesPitching',\n       'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n       'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n       'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n       'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n       'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n       'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n       'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n       'inheritedRunnersScored', 'catchersInterferencePitching',\n       'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n       'assists', 'putOuts', 'errors', 'chances']\n\nnull = np.nan\ntrue = True\nfalse = False","c2598b1b":"del train\ndel train_X\ndel train_y\ndel x_train1","5667d5d8":"#\u30e1\u30e2\u30ea\u4f7f\u7528\u72b6\u6cc1\nimport sys\nprint(\"{}{:>25}{}{:>10}{}\".format('|','Variable Name','|','memory','|'))\nfor var_name in dir():\n    if not var_name.startswith(\"_\") and sys.getsizeof(eval(var_name)) > 10000:\n        print(\"{}{:>25}{}{:>10}{}\".format('|',var_name,'|',sys.getsizeof(eval(var_name)),'|'))","3297ee00":"import pandas as pd\nimport numpy as np\nfrom datetime import timedelta\nfrom tqdm import tqdm\nimport gc\nfrom functools import reduce\nfrom sklearn.model_selection import StratifiedKFold\n\nROOT_DIR = \"..\/input\/mlb-player-digital-engagement-forecasting\"\n\n#=======================#\ndef flatten(df, col):\n    du = (df.pivot(index=\"playerId\", columns=\"EvalDate\", \n               values=col).add_prefix(f\"{col}_\").\n      rename_axis(None, axis=1).reset_index())\n    return du\n#============================#\ndef reducer(left, right):\n    return left.merge(right, on=\"playerId\")\n#========================\n\nTGTCOLS = [\"target1\",\"target2\",\"target3\",\"target4\"]\ndef train_lag(df, lag=1):\n    dp = df[[\"playerId\",\"EvalDate\"]+TGTCOLS].copy()\n    dp[\"EvalDate\"]  =dp[\"EvalDate\"] + timedelta(days=lag) \n    df = df.merge(dp, on=[\"playerId\", \"EvalDate\"], suffixes=[\"\",f\"_{lag}\"], how=\"left\")\n    return df\n#=================================\ndef test_lag(sub):\n    sub[\"playerId\"] = sub[\"date_playerId\"].apply(lambda s: int(  s.split(\"_\")[1]  ) )\n    assert sub.date.nunique() == 1\n    dte = sub[\"date\"].unique()[0]\n    \n    eval_dt = pd.to_datetime(dte, format=\"%Y%m%d\")\n    dtes = [eval_dt + timedelta(days=-k) for k in LAGS]\n    mp_dtes = {eval_dt + timedelta(days=-k):k for k in LAGS}\n    \n    sl = LAST.loc[LAST.EvalDate.between(dtes[-1], dtes[0]), [\"EvalDate\",\"playerId\"]+TGTCOLS].copy()\n    sl[\"EvalDate\"] = sl[\"EvalDate\"].map(mp_dtes)\n    du = [flatten(sl, col) for col in TGTCOLS]\n    du = reduce(reducer, du)\n    return du, eval_dt\n    #\n#===============\n\ntr = pd.read_csv(\"..\/input\/mlbdata\/target.csv\")\n#tr = tr.drop(['Unnamed: 0'],axis=1)\nprint(tr.shape)\ngc.collect()\n\ntr[\"EvalDate\"] = pd.to_datetime(tr[\"EvalDate\"])\ntr[\"EvalDate\"] = tr[\"EvalDate\"] + timedelta(days=-1)\ntr[\"EvalYear\"] = tr[\"EvalDate\"].dt.year\n\nMED_DF = tr.groupby([\"playerId\",\"EvalYear\"])[TGTCOLS].median().reset_index()\nMEDCOLS = [\"tgt1_med\",\"tgt2_med\", \"tgt3_med\", \"tgt4_med\"]\nMED_DF.columns = [\"playerId\",\"EvalYear\"] + MEDCOLS\n\nLAGS = list(range(1,21))\nFECOLS = [f\"{col}_{lag}\" for lag in reversed(LAGS) for col in TGTCOLS]\n\nfor lag in tqdm(LAGS):\n    tr = train_lag(tr, lag=lag)\n    gc.collect()\n#===========\ntr = tr.sort_values(by=[\"playerId\", \"EvalDate\"])\nprint(tr.shape)\ntr = tr.dropna()\nprint(tr.shape)\ntr = tr.merge(MED_DF, on=[\"playerId\",\"EvalYear\"])\ngc.collect()\n\nX = tr[FECOLS+MEDCOLS].values\ny = tr[TGTCOLS].values\ncl = tr[\"playerId\"].values\n\nNFOLDS = 8\nskf = StratifiedKFold(n_splits=NFOLDS)\nfolds = skf.split(X, cl)\nfolds = list(folds)\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\n\ntf.random.set_seed(777)\n\ndef make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    x = L.Dense(50, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(50, activation=\"relu\", name=\"d2\")(x)\n    preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model\n\nnet = make_model(X.shape[1])\nprint(net.summary())\n\noof = np.zeros(y.shape)\nnets = []\nfor idx in range(NFOLDS):\n    print(\"FOLD:\", idx)\n    tr_idx, val_idx = folds[idx]\n    ckpt = ModelCheckpoint(f\"w{idx}.h5\", monitor='val_loss', verbose=1, save_best_only=True,mode='min')\n    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=3, min_lr=0.0005)\n    es = EarlyStopping(monitor='val_loss', patience=6)\n    reg = make_model(X.shape[1])\n    reg.fit(X[tr_idx], y[tr_idx], epochs=12, batch_size=35_000, validation_data=(X[val_idx], y[val_idx]),\n            verbose=1, callbacks=[ckpt, reduce_lr, es])\n    reg.load_weights(f\"w{idx}.h5\")\n    oof[val_idx] = reg.predict(X[val_idx], batch_size=50_000, verbose=1)\n    nets.append(reg)\n    gc.collect()\n    #\n#\n\nmae = mean_absolute_error(y, oof)\nmse = mean_squared_error(y, oof, squared=False)\nprint(\"mae:\", mae)\nprint(\"mse:\", mse)\n\n# Historical information to use in prediction time\nbound_dt = pd.to_datetime(\"2021-01-01\")\nLAST = tr.loc[tr.EvalDate>bound_dt].copy()\n\nLAST_MED_DF = MED_DF.loc[MED_DF.EvalYear==2021].copy()\nLAST_MED_DF.drop(\"EvalYear\", axis=1, inplace=True)\ndel tr\n\n#\"\"\"\nimport mlb\nFE = []; SUB = [];","97dc67c2":"import copy\n\nenv = mlb.make_env() # initialize the environment\niter_test = env.iter_test() # iterator which loops over each date in test set\n\nfor (test_df, sample_prediction_df) in iter_test: # make predictions here\n    \n    sub = copy.deepcopy(sample_prediction_df.reset_index())\n    sample_prediction_df = copy.deepcopy(sample_prediction_df.reset_index(drop=True))\n    \n    # LGBM summit\n    # creat dataset\n    sample_prediction_df['playerId'] = sample_prediction_df['date_playerId']\\\n                                        .map(lambda x: int(x.split('_')[1]))\n    # Dealing with missing values\n    if test_df['rosters'].iloc[0] == test_df['rosters'].iloc[0]:\n        test_rosters = pd.DataFrame(eval(test_df['rosters'].iloc[0]))\n    else:\n        test_rosters = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in rosters.columns:\n            if col == 'playerId': continue\n            test_rosters[col] = np.nan\n            \n    if test_df['playerBoxScores'].iloc[0] == test_df['playerBoxScores'].iloc[0]:\n        test_scores = pd.DataFrame(eval(test_df['playerBoxScores'].iloc[0]))\n    else:\n        test_scores = pd.DataFrame({'playerId': sample_prediction_df['playerId']})\n        for col in scores.columns:\n            if col == 'playerId': continue\n            test_scores[col] = np.nan\n            \n    test_scores = test_scores.groupby('playerId').sum().reset_index()\n    test = sample_prediction_df[['playerId']].copy()\n    test = test.merge(players[players_cols], on='playerId', how='left')\n    test = test.merge(test_rosters[rosters_cols], on='playerId', how='left')\n    test = test.merge(test_scores[scores_cols], on='playerId', how='left')\n    test = test.merge(player_target_stats, how='inner', left_on=[\"playerId\"],right_on=[\"playerId\"])\n    \n\n    test['label_playerId'] = test['playerId'].map(player2num)\n    test['label_primaryPositionName'] = test['primaryPositionName'].map(position2num)\n    test['label_teamId'] = test['teamId'].map(teamid2num)\n    test['label_status'] = test['status'].map(status2num)\n    \n    test_X = test[feature_cols]\n    \n    # predict \u30a2\u30f3\u30bb\u30f3\u30d6\u30eb\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n    #x = 0.9\n    #y = 0.1\n    pred1 = model1.predict(test_X)\n    #pred11 = model11.predict(test_X)\n    #pred1 = pred1*x + pred11*y\n    test['target1'] = np.clip(pred1,0,100)\n    \n    test_X = test[feature_cols2]\n\n    pred2 = model2.predict(test_X)\n    pred3 = model3.predict(test_X)\n    pred4 = model4.predict(test_X)\n    #pred12 = model12.predict(test_X)\n    #pred13 = model13.predict(test_X)\n    #pred14 = model14.predict(test_X)\n    \n    #pred2 = pred2*x + pred12*y\n    #pred3 = pred3*x + pred13*y\n    #pred4 = pred4*x + pred14*y\n    \n    # merge submission\n    sample_prediction_df['target1'] = np.clip(pred1, 0, 100)\n    sample_prediction_df['target2'] = np.clip(pred2, 0, 100)\n    sample_prediction_df['target3'] = np.clip(pred3, 0, 100)\n    sample_prediction_df['target4'] = np.clip(pred4, 0, 100)\n    sample_prediction_df = sample_prediction_df.fillna(0.)\n    del sample_prediction_df['playerId']\n    # TF summit\n    # Features computation at Evaluation Date\n    sub_fe, eval_dt = test_lag(sub)\n    sub_fe = sub_fe.merge(LAST_MED_DF, on=\"playerId\", how=\"left\")\n    sub_fe = sub_fe.fillna(0.)\n    \n    _preds = 0.\n    for reg in nets:\n        _preds += reg.predict(sub_fe[FECOLS + MEDCOLS]) \/ NFOLDS\n    sub_fe[TGTCOLS] = np.clip(_preds, 0, 100)\n    sub.drop([\"date\"]+TGTCOLS, axis=1, inplace=True)\n    sub = sub.merge(sub_fe[[\"playerId\"]+TGTCOLS], on=\"playerId\", how=\"left\")\n    sub.drop(\"playerId\", axis=1, inplace=True)\n    sub = sub.fillna(0.)\n    \n    # Blending\n    blend = pd.concat(\n        [sub[['date_playerId']],\n        #(0.36*sub.drop('date_playerId', axis=1) + 0.64*sample_prediction_df.drop('date_playerId', axis=1))], @\n        (0.361*sub.drop('date_playerId', axis=1) + 0.639*sample_prediction_df.drop('date_playerId', axis=1))], \n        axis=1\n    )\n    env.predict(blend)\n    \n    # Update Available information\n    sub_fe[\"EvalDate\"] = eval_dt\n    #sub_fe.drop(MEDCOLS, axis=1, inplace=True)\n    LAST = LAST.append(sub_fe)\n    LAST = LAST.drop_duplicates(subset=[\"EvalDate\",\"playerId\"], keep=\"last\")","8d18055e":"blend","3207c719":"sample_prediction_df","7ff214fe":"<pre>params = { 'objective':'mae', 'reg_alpha': 0.1, 'reg_lambda': 0.1,  'n_estimators': 10000, 'learning_rate': 0.1, 'random_state': 77,#42 \"num_leaves\": 100} 0.4678867373414343\nnum_leaves:800 0.4620618661241774\nlearning_rate 0.05 0.4615044085912404\nreg_alpha': 0.1 #\nreg_lambda': 0.09 0.4615044085912404","eae42527":"model12 = XGBRegressor(**xgb_params)\nmodel12.fit(x_train2, y_train2['target2'], eval_set = [(x_valid2, y_valid2['target2'])], early_stopping_rounds = 50)\n\ny_pred = model12.predict(x_valid2)\n\nscore12 = mean_absolute_error(y_valid2['target2'], y_pred)\nscore12","c1b99096":"### \u8ffd\u52a0\u8aac\u660e\u95a2\u6570","b274c345":"model13 = XGBRegressor(**xgb_params)\nmodel13.fit(x_train2, y_train2['target3'], eval_set = [(x_valid2, y_valid2['target3'])], early_stopping_rounds = 50)\n\ny_pred = model13.predict(x_valid2)\n\nscore13 = mean_absolute_error(y_valid2['target3'], y_pred)\nscore13","05a1a4e3":"0.8326967548738722","cc703819":"<pre>params4 = {'objective':'mae','reg_alpha': 0.016468100279441976, 'random_state':77,'reg_lambda': 0.09128335764019105, 'n_estimators': 9868, 'learning_rate': 0.10528150510326864, 'num_leaves': 157, 'feature_fraction': 0.5419185713426886, 'bagging_fraction': 0.2637405128936662, 'bagging_freq': 19, 'min_child_samples': 71} 0.9897448589181667\n'num_leaves': 1250 0.9278848020973461\n]reg_alpha': 0.016468100279441976 #\nreg_lambda': 0.09128335764019105 #\nfeature_fraction': 0.4 0.9269202636946671\nbagging_fraction': 0.3 #\nbagging_freq': 19 #\nmin_child_samples': 71#\nlearning_rate': 0.10528150510326864 #","f5458fe5":"score: 0.8488102113050756","9f17bb47":"![image.png](attachment:9ac866bb-13ac-4bf9-a839-f2b9139f82d6.png)","1d18dbc7":"## Training","6c5bc88d":"## XGBRegressor","51f00b32":"0.46137044709334585","1236d579":"![image.png](attachment:ba8790f2-2fa8-471d-85fb-478e501ca0e0.png)","7a18a0d5":"### \u3053\u308c\u304c\u63d0\u51fa\u7269","9a60bffc":"### \u65e5\u4ed8\u3044\u3058\u308b\u3068\u30b9\u30b3\u30a2\u304b\u308f\u308a\u307e\u3059\u3088\u3002","8065e4ca":"> \ud83d\udccc\u30d7\u30ec\u30fc\u30e4\u30fc\u304c\u30b5\u30e8\u30ca\u30e9\u30db\u30fc\u30e0\u30e9\u30f3\u3092\u6253\u3064\u3002\u6295\u624b\u306f\u30ce\u30fc\u30d2\u30c3\u30c8\u30ce\u30fc\u30e9\u30f3\u3092\u6295\u3052\u307e\u3059\u3002\u30c1\u30fc\u30e0\u306f\u30dd\u30b9\u30c8\u30b7\u30fc\u30ba\u30f3\u306b\u5165\u308b\u3068\u771f\u3063\u8d64\u306b\u306a\u308a\u307e\u3059\u3002\u79c1\u305f\u3061\u306f\u91ce\u7403\u30d5\u30a1\u30f3\u306e\u95a2\u5fc3\u3092\u9ad8\u3081\u308b\u3044\u304f\u3064\u304b\u306e\u89e6\u5a92\u3092\u77e5\u3063\u3066\u3044\u307e\u3059\u3002\u73fe\u5728\u3001\u30e1\u30b8\u30e3\u30fc\u30ea\u30fc\u30b0\u30d9\u30fc\u30b9\u30dc\u30fc\u30eb\uff08MLB\uff09\u3068Google Cloud\u306f\u3001Kaggle\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u652f\u63f4\u306b\u3088\u308a\u3001\u30b5\u30dd\u30fc\u30bf\u30fc\u306e\u95a2\u4e0e\u3092\u523a\u6fc0\u3057\u3001\u30d7\u30ec\u30fc\u30e4\u30fc\u3068\u30d5\u30a1\u30f3\u306e\u9593\u306b\u6df1\u3044\u95a2\u4fc2\u3092\u7bc9\u304f\u4ed6\u306e\u591a\u304f\u306e\u8981\u56e0\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3092\u671b\u3093\u3067\u3044\u307e\u3059\u3002\n> \n> \u3053\u306e\u30b9\u30dd\u30fc\u30c4\u306b\u306f\u3001\u6570\u5b57\u4e3b\u5c0e\u306e\u9577\u3044\u6b74\u53f2\u304c\u3042\u308a\u307e\u3059\u3002\u5c11\u306a\u304f\u3068\u30824\u6708\u304b\u308910\u6708\u307e\u3067\u306e\u307b\u307c\u6bce\u65e5\u3001\u91ce\u7403\u30d5\u30a1\u30f3\u306f\u9078\u624b\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u898b\u3066\u3001\u8aad\u3093\u3067\u3001\u691c\u7d22\u3057\u3066\u3044\u307e\u3059\u3002\u3069\u306e\u500b\u4eba\u3092\u63a2\u3059\u304b\u306f\u3001\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3001\u30c1\u30fc\u30e0\u306e\u9806\u4f4d\u3001\u4eba\u6c17\u306a\u3069\u3001\u73fe\u5728\u4e0d\u660e\u306a\u8981\u56e0\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u304a\u304b\u3052\u3067\u3088\u308a\u3088\u304f\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n> \n> \u5c11\u306a\u304f\u3068\u30821990\u5e74\u4ee3\u521d\u982d\u4ee5\u6765\u3001MLB\u306f\u30c7\u30fc\u30bf\u306e\u4f7f\u7528\u306b\u304a\u3044\u3066\u30b9\u30dd\u30fc\u30c4\u754c\u3092\u30ea\u30fc\u30c9\u3057\u3001\u30c7\u30fc\u30bf\u3068\u4eba\u9593\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u3068\u304d\u306b\u4f55\u304c\u53ef\u80fd\u304b\u3092\u30d5\u30a1\u30f3\u3001\u30d7\u30ec\u30fc\u30e4\u30fc\u3001\u30b3\u30fc\u30c1\u3001\u30e1\u30c7\u30a3\u30a2\u306b\u793a\u3057\u3066\u304d\u307e\u3057\u305f\u3002 MLB\u306f\u3001\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30ea\u30fc\u30c0\u30fc\u30b7\u30c3\u30d7\u3092\u7d99\u7d9a\u3057\u3001\u30d5\u30a1\u30f3\u3092\u5f15\u304d\u4ed8\u3051\u3001\u65b0\u3057\u3044\u30d5\u30a1\u30f3\u306b\u30a2\u30e1\u30ea\u30ab\u306e\u304a\u6c17\u306b\u5165\u308a\u306e\u5a2f\u697d\u3092\u4f53\u9a13\u3059\u308b\u9769\u65b0\u7684\u306a\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n> \n> \n> \n> MLB\u306fGoogleCloud\u3068\u63d0\u643a\u3057\u3066\u3001\u30c7\u30fc\u30bf\u3092\u901a\u3058\u3066\u30d5\u30a1\u30f3\u306e\u4f53\u9a13\u3092\u5909\u9769\u3057\u307e\u3057\u305f\u3002 Google Cloud\u306f\u3001Vertex AI\u306e\u7acb\u3061\u4e0a\u3052\u3092\u795d\u3046\u3053\u306eKaggle\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8a87\u3089\u3057\u3052\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001ML\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u7d71\u5408\u3059\u308bGoogleCloud\u306e\u65b0\u3057\u3044\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002\n> \n> \u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3067\u306f\u3001\u30d5\u30a1\u30f3\u304cMLB\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30c7\u30b8\u30bf\u30eb\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u5c06\u6765\u306e\u65e5\u4ed8\u7bc4\u56f2\u3067\u6bce\u65e5\u3069\u306e\u3088\u3046\u306b\u5229\u7528\u3059\u308b\u304b\u3092\u4e88\u6e2c\u3057\u307e\u3059\u3002\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c7\u30fc\u30bf\u3001\u30bd\u30fc\u30b7\u30e3\u30eb\u30e1\u30c7\u30a3\u30a2\u30c7\u30fc\u30bf\u3001\u5e02\u5834\u898f\u6a21\u306a\u3069\u306e\u30c1\u30fc\u30e0\u8981\u56e0\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u6210\u529f\u3057\u305f\u30e2\u30c7\u30eb\u306f\u3001\u3069\u306e\u30b7\u30b0\u30ca\u30eb\u304c\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u3068\u6700\u3082\u5f37\u304f\u76f8\u95a2\u3057\u3001\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u304b\u306b\u3064\u3044\u3066\u306e\u65b0\u3057\u3044\u6d1e\u5bdf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n> \n> MLB\u30aa\u30fc\u30eb\u30b9\u30bf\u30fc\u30e9\u30a6\u30f3\u30c9\u3092\u30b7\u30fc\u30ba\u30f3\u3092\u901a\u3057\u3066\u4e88\u6e2c\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3001\u307e\u305f\u306f\u30c1\u30fc\u30e0\u306e25\u4eba\u306e\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u305d\u308c\u305e\u308c\u304c\u811a\u5149\u3092\u6d74\u3073\u3066\u3044\u308b\u3068\u304d\u3092\u60f3\u50cf\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3089\u306e\u6d1e\u5bdf\u306f\u3001\u30a2\u30e1\u30ea\u30ab\u306e\u5a2f\u697d\u306e\u30d5\u30a1\u30f3\u30c0\u30e0\u3092\u6df1\u304f\u6398\u308a\u4e0b\u3052\u308b\u3068\u304d\u306b\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u7a2e\u306e\u6700\u521d\u306e\u65b9\u6cd5\u306e\u4e00\u90e8\u3068\u3057\u3066\u3001\u30d7\u30ec\u30fc\u30e4\u30fc\u30ec\u30d9\u30eb\u3067\u306e\u30c7\u30b8\u30bf\u30eb\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u3092\u3053\u306e\u304d\u3081\u7d30\u304b\u3044\u65e5\u5e38\u7684\u306a\u65b9\u6cd5\u3067\u7406\u89e3\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u540c\u6642\u306b\u3001Google Cloud\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3001Vertex AI\u3001MLOps\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001MLB\u304c\u30a4\u30ce\u30d9\u30fc\u30b7\u30e7\u30f3\u3092\u3088\u308a\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u306b\u652f\u63f4\u3057\u307e\u3059\u3002 MLB\u30d5\u30a1\u30f3\u3068\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u306e\u672a\u6765\u3092\u5f62\u4f5c\u308b\u4e0a\u3067\u5f79\u5272\u3092\u679c\u305f\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","7f1d3496":"0.9282364499246017","fd4612eb":"model14 = XGBRegressor(**xgb_params)\nmodel14.fit(x_train2, y_train2['target4'], eval_set = [(x_valid2, y_valid2['target4'])], early_stopping_rounds = 50)\n\ny_pred = model14.predict(x_valid2)\n\nscore14 = mean_absolute_error(y_valid2['target4'], y_pred)\nscore14","5cbd0e83":"> \ud83d\udccc\u3042\u306a\u305f\u306f\u30012021\u5e74\u30b7\u30fc\u30ba\u30f3\u306b\u6d3b\u8e8d\u3059\u308bMLB\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u30014\u3064\u306e\u7570\u306a\u308b\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u306e\u6e2c\u5b9a\u5024\uff08target1-target4\uff09\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u306b\u306f\u3001\u6642\u9593\u306e\u7d4c\u904e\u3068\u3068\u3082\u306b\u5909\u5316\u3057\u306a\u3044\u4e00\u9023\u306e\u9759\u7684\u30d5\u30a1\u30a4\u30eb\uff08players.csv\u3001teams.csv\u3001seasons.csv\u3001awards.csv\uff09\u3068\u3001\u65e5\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u305f\u65e5\u6b21\u30c7\u30fc\u30bf\uff08train.csv\uff09\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u7279\u5b9a\u306e\u65e5\u4ed8\u3092\u4e88\u6e2c\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u65e5\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u3092\u4e88\u6e2c\u3057\u307e\u3059\uff08\u3064\u307e\u308a\u3001\u65e5\u4ed8d\u306e\u5834\u5408\u3001\u65e5d + 1\u306e\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u3092\u4e88\u6e2c\u3057\u307e\u3059\uff09\u3002\n> \n> \u3053\u308c\u306f\u3001\u6642\u7cfb\u5217\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u4f9d\u5b58\u3057\u3066\u30e2\u30c7\u30eb\u304c\u6642\u9593\u7684\u306b\u524d\u5411\u304d\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u30b3\u30fc\u30c9\u7af6\u4e89\u3067\u3059\u3002\u6642\u7cfb\u5217\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u3001\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u3092\u81ea\u52d5\u7684\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u9664\u3044\u3066\u3001train.csv\u3068\u540c\u3058\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u5230\u7740\u3057\u307e\u3059\u3002\u63d0\u51fa\u3059\u308b\u306b\u306f\u3001\u8a55\u4fa1\u30da\u30fc\u30b8\u306e\u6307\u793a\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u9001\u4fe1\u3059\u308b\u3068\u3001\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u518d\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n> \n> \u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30d5\u30a7\u30fc\u30ba\u3067\u306f\u3001\u3053\u306e\u76ee\u306b\u898b\u3048\u306a\u3044\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306f\u30012021\u5e745\u6708\u306e\u6708\u306e\u30c7\u30fc\u30bf\u3068\u4eca\u5e74\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30bb\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\n> \u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\u3067\u306f\u3001\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306f\u7d041\u304b\u6708\u306e\u5c06\u6765\u306e\u30b7\u30fc\u30ba\u30f3\u7bc4\u56f2\u306b\u306a\u308a\u307e\u3059\u3002\n> \u30b3\u30fc\u30c9\u306f\u5805\u7262\u3067\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3088\u3063\u3066\u8981\u6c42\u3055\u308c\u305fdate_playerId\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u30c1\u30fc\u30e0\u304c\u9078\u629e\u3057\u305f\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\uff08\u30c1\u30fc\u30e0\u3054\u3068\u306b\u6700\u59272\u3064\u3001\u6700\u7d42\u63d0\u51fa\u671f\u9650\u307e\u3067\u306b\u9078\u629e\uff09\u306f\u3001\u8a55\u4fa1\u30d5\u30a7\u30fc\u30ba\u4e2d\u306b\u518d\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n> \n> \u8a73\u7d30\u306b\u98db\u3073\u8fbc\u3080\u524d\u306b\u3001\u30c7\u30fc\u30bf\u306b\u95a2\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u9ad8\u30ec\u30d9\u30eb\u306e\u8cc7\u683c\uff1a\n> \n> \u4e00\u90e8\u306e\u81ea\u660e\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306f\u8aac\u660e\u304c\u3042\u308a\u307e\u305b\u3093\uff08\u4f8b\uff1a\u5b63\u7bc0\uff09\n> \u30d0\u30a4\u30ca\u30ea\u5217\u306b\u306f\u3001\u30bc\u30ed\u3060\u3051\u3067\u306a\u304fNULL\u5024\u3082\u542b\u307e\u308c\u307e\u3059\u3002\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u4f55\u304b\u3092\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u304c\u3001\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30bc\u30ed\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30d7\u30ec\u30fc\u30e4\u30fc\u304c\u4f55\u304b\u3092\u3059\u308b\u6a5f\u4f1a\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30cc\u30eb\u304c\u767a\u751f\u3057\u307e\u3059\uff08\u305f\u3068\u3048\u3070\u3001\u7279\u5b9a\u306e\u65e5\u306b\u30d4\u30c3\u30c1\u30f3\u30b0\u3057\u306a\u3044\u30d7\u30ec\u30fc\u30e4\u30fc\u306f\u5b8c\u5c01\u3092\u30d4\u30c3\u30c1\u30f3\u30b0\u3067\u304d\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u30cc\u30eb\u5024\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\uff09\n> \u307b\u3068\u3093\u3069\u306e\u30b2\u30fc\u30e0\u72b6\u614b\u95a2\u9023\u30d5\u30a3\u30fc\u30eb\u30c9\uff08\u30dc\u30fc\u30eb\u3001\u30b9\u30c8\u30e9\u30a4\u30af\u3001\u30a2\u30a6\u30c8\u306a\u3069\uff09\u306f\u3001\u554f\u984c\u306e\u30a4\u30d9\u30f3\u30c8\u5f8c\u306e\u30b2\u30fc\u30e0\u72b6\u614b\u3092\u8868\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u30db\u30fc\u30e0\u30b9\u30b3\u30a2\u3068\u30a2\u30a6\u30a7\u30a4\u30b9\u30b3\u30a2\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u524d\u306e\u30b9\u30b3\u30a2\u3092\u8868\u3057\u307e\u3059\u3002","5fae8953":"### \u304a\u8a6b\u3073\u3002\u30b9\u30b3\u30a21.33333\u306b\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5c11\u3057\u3044\u3058\u3089\u306a\u3044\u3068\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n### \u904e\u53bb\u306e\u79c1\u306e\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3059\u308c\u3070\u89e3\u3051\u308b\u306f\u305a\u3067\u3059\u3002","141e9542":"<pre>params2 = { 'objective':'mae', 'reg_alpha': 0.1, 'reg_lambda': 0.1,  'n_estimators': 160,#80 'learning_rate': 0.05,#0.1 'random_state': 77,#42 \"num_leaves\": 22 1.180154592803244\nn_estimators': 1000 1.1645554527856938\nnum_leaves:155 :1.1568237368972796\nreg_alpha': 0.1 #\nreg_lambda': 0.1 ","82ff84ea":"1.5158150124891132","45b078da":"# \u6b8b\u308b\u552f\u4e00\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u30dd\u30a4\u30f3\u30c8\u3000@","2a7c971d":"<pre>\nscore: 0.781819183401393","e053f4f2":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split, KFold\nxgb_params = {\n    'booster':'gbtree',\n    'n_estimators':200,\n    'max_depth':40, #6\n    'eta':0.01,\n    'gamma':2.8,\n    'objective':'reg:squarederror',\n    'verbosity':1,\n    'subsample':0.85,\n    'colsample_bytree':0.45,\n    'lambda':5,\n    'scale_pos_weight':1,\n    'objective':'reg:squarederror',\n    'eval_metric':'rmse'\n}","f82a700a":"<div class=\"alert simple-alert\"><font color=\"black\">\n\u26be <b>Competition Goal<\/b>:\u3042\u306a\u305f\u306f\u30012021\u5e74\u30b7\u30fc\u30ba\u30f3\u306b\u6d3b\u8e8d\u3059\u308bMLB\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u3064\u3044\u3066\u30014\u3064\u306e\u7570\u306a\u308b\u30a8\u30f3\u30b2\u30fc\u30b8\u30e1\u30f3\u30c8\u306e\u6e2c\u5b9a\u5024\uff08target1-target4\uff09\u3092\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n<\/div>","98a0410a":"model11 = XGBRegressor(**xgb_params)\nmodel11.fit(x_train1, y_train1['target1'], eval_set = [(x_valid1, y_valid1['target1'])], early_stopping_rounds = 50)\n\ny_pred = model11.predict(x_valid1)\n\nscore11 = mean_absolute_error(y_valid1['target1'], y_pred)\nscore11","b4953bc8":"1.2992890471976417","35906a79":"1.1568237368972796","63138de1":"<pre>params1 = {'objective':'mae','reg_alpha': 0.14947461820098767, 'random_state':77,'reg_lambda': 0.10185644384043743, 'n_estimators': 3633, 'learning_rate': 0.08046301304430488, 'num_leaves': 674, 'feature_fraction': 0.9101240539122566, 'bagging_fraction': 0.9884451442950513, 'bagging_freq': 8, 'min_child_samples': 51} \n0.5770630841609712\n\nnum_leaves': 660  0.578658\nlearning_rate': 0.1 0.578658\nreg_alpha': 0.14947461820098767 #\nreg_lambda': 0.085  0.578275\nfeature_fraction: 0.9101240539122566 #\nbagging_fraction': 0.9884451442950513 #\nbagging_freq': 8 #\nmin_child_samples': 51 #\n","3617f0e6":"train_X = train[feature_cols]\ntrain_y = train[['target1', 'target2', 'target3', 'target4']]\n\n_index = (train['date'] < 20210426)#0426 \nx_train1 = train_X.loc[_index].reset_index(drop=True)\ny_train1 = train_y.loc[_index].reset_index(drop=True)\nx_valid1 = train_X.loc[~_index].reset_index(drop=True)\ny_valid1 = train_y.loc[~_index].reset_index(drop=True)","fb254a55":"mae: 0.5765479264820539\n0.5765479264820539","2cf19655":"thanks https:\/\/www.kaggle.com\/mlconsult\/1-35-lightgbm-ann credit to @KenMiller","6246b1e5":"1.0764579770208662","d1f9bc37":"## Inference"}}