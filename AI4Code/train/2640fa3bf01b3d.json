{"cell_type":{"a712aa87":"code","520af5dc":"code","02062c36":"code","037343a1":"code","0752b09a":"code","ad1e551a":"code","813f0aad":"code","34e3098d":"code","9503879f":"code","12997c6f":"code","9ec1cacf":"markdown"},"source":{"a712aa87":"import json\nimport re # Regular expressions\nimport os # To walk through the data files provided\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","520af5dc":"# Code provided to flatten Python arrays into the format required for\n# submission.\n\n# Convert the array format to the submission format\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","02062c36":"# We only need to look at the problems in the test directory.\ntestDirectory = \"\/kaggle\/input\/abstraction-and-reasoning-challenge\/test\/\"","037343a1":"# Function to read a task file and return the parsed data\ndef readTaskFile(filename):\n    #print(\"Reading file: \"+filename)\n    \n    # Open the file\n    f = open(filename, \"r\")\n    \n    # Parse the JSON\n    data = json.loads(f.read())\n    \n    # Add in an 'id' that's extracted from the filename\n    data[\"id\"] = re.sub(\"(.*\/)|(\\.json)\", \"\", filename)\n    \n    # Close the file\n    f.close()\n    \n    # Return the parsed data\n    return data","0752b09a":"# Quick test to see that our readTaskFile function is working.\n# Note the addition of the 'id' field.\nfilename = testDirectory+\"3b4c2228.json\"\nreadTaskFile(filename)","ad1e551a":"# One way to \"cheat\" would be to just copy each question, the \"noop\" solution.\n\n# Function to extract the test questions and return them as our answer\ndef getNoopAnswer(filename):\n    data = readTaskFile(filename)\n    #print(data)\n    testSection = data[\"test\"]\n    ident = data[\"id\"]\n    \n    numTests = len(testSection)\n    answer = {}\n    for i in range(numTests):\n        answer[ident+\"_\"+str(i)] = flattener(testSection[i][\"input\"])\n        \n    return answer","813f0aad":"# Quick test with the first file \"19bb5feb.json\"\n# \"3b4c2228.json\" has two tests\nfilename = testDirectory+\"3b4c2228.json\"\ngetNoopAnswer(filename)","34e3098d":"# A function to loop through the questions in the given directory\n# applying a function 'f' to each question.\ndef getAnswers(directory, f):\n    answers = {}\n    for _, _, filenames in os.walk(directory):\n        for filename in filenames:\n            answers.update(f(directory+filename))\n\n    return answers","9503879f":"# Execute our 'noop' function on the test directory\nanswers = getAnswers(testDirectory, getNoopAnswer)\n\n# Write out the answers into our submission file        \nf = open(\"submission.csv\", \"w\")\nf.write(\"output_id,output\\n\")\nkeys = answers.keys()\nfor key in keys:\n    value = answers[key]\n    f.write(key + \",\" + value + \"\\n\")\nf.close()","12997c6f":"# Let's make sure we did indeed save that file\nf2 = open(\"submission.csv\", \"r\")\nprint(f2.read())\nf2.close()","9ec1cacf":"# Getting Started with the Abstraction and Reasoning Challenge\n\nThe following code might be useful to those getting started with the ARC.  The code creates a \"noop\" submission, in that the answers produced are just copies of the test question."}}