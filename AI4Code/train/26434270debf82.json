{"cell_type":{"0e248c4a":"code","e0059ca0":"code","5ab36dda":"code","0299b9cc":"code","c98edfe2":"code","42922aa2":"code","bb99605c":"code","830395e7":"code","16691e2b":"code","93ff444f":"code","cfe21466":"code","171d5656":"code","0a68fcd5":"code","2d310782":"code","54e6bb38":"code","1eb1f63c":"code","cead533a":"code","db00af0b":"code","0c3ab02d":"code","c59bf460":"code","a5f5c717":"code","948f13fa":"code","1596f5c8":"code","065120f4":"code","11102a00":"code","d3f9afed":"code","f66d3a53":"code","1c8cb237":"code","ef84dc2d":"code","6cdaf169":"code","145d6ed5":"code","a5897a57":"code","82d4e06a":"code","c3a2fb3c":"code","49d10fb4":"code","3740f400":"code","ece36e1a":"code","a38e5bb9":"code","395c069b":"code","e5a9741d":"code","6e26c8c7":"code","d4d9bb35":"code","237f67da":"code","e98f50bd":"code","5c3c9ca8":"code","b8267d28":"code","47ebc0b8":"code","5d4dd772":"code","046d8291":"code","7a0b47e0":"code","2561c4bd":"code","b30c08ed":"code","6aec7a5f":"code","458ac153":"code","808d5fb7":"code","6b15fc04":"code","9147f3e5":"code","d6b18a3f":"markdown","8151a296":"markdown","1e615461":"markdown","0acefdf6":"markdown","ea7d278f":"markdown","9565811b":"markdown","b1befc83":"markdown","c9c2bc07":"markdown","7c760162":"markdown","a7563ef4":"markdown"},"source":{"0e248c4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \nfrom subprocess import check_output             # utf-8 e uygun olup olmadigini arastirmak icin bunu aratiyoruz\nprint(check_output([\"ls\",\"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","e0059ca0":"data = pd.read_csv('..\/input\/titanic-cleaned-data\/train_clean.csv')\ndata.info()\n                ","5ab36dda":"data.head()","0299b9cc":"data.Age.value_counts()","c98edfe2":"data.PassengerId.unique()","42922aa2":"PassengerId_list = list(data['PassengerId'].head(30).unique())\n# print(PassengerId_list)\n\nAge_ratio = []\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Age_rate = sum(x.Age)\/len(x)\n    Age_ratio.append(Age_rate)\ndata2 = pd.DataFrame({'PassengerId_list': PassengerId_list,'Age_ratio':Age_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data2['Age_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data2.reindex(new_index)\n","bb99605c":"\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['PassengerId_list'], y=sorted_data['Age_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('PassengerId')\nplt.ylabel('Ages')\nplt.title('Age Given PassengerId_list')","830395e7":"data.head()","16691e2b":"data.Name.value_counts()","93ff444f":"separate = data.Name[data.Name != 'TK TK'].str.split() \na,b,c = zip(*separate)\n# print(separate)\nname_list = a+b+c \nprint(name_list)","cfe21466":"name_count = Counter(name_list)\nprint(name_count)\nmost_common_names = name_count.most_common(15)  \nx,y = zip(*most_common_names)\nx,y = list(x),list(y)","171d5656":"# PLOT unu cizelim\n\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of Titanic people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of Titanic people')\nprint(most_common_names)","0a68fcd5":"# PassengerId_list = list(data['PassengerId'].head(30).unique())\n# print(PassengerId_list)\n\nFare_ratio = []\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Fare_rate = sum(x.Fare)\/len(x)\n    Fare_ratio.append(Fare_rate)\ndata3 = pd.DataFrame({'PassengerId_list': PassengerId_list,'Fare_ratio':Fare_ratio})\n\n\n# Duzenlenen datayi yeniden index lememiz gerekiyor ki duzenli gorunsun!!! Bunun icin:\n\nnew_index = (data3['Fare_ratio'].sort_values(ascending=False)).index.values\nsorted_data2 = data3.reindex(new_index)","2d310782":"# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data2['PassengerId_list'], y=sorted_data2['Fare_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('PassengerId')\nplt.ylabel('Fare')\nplt.title('Fare Given PassengerId_list')","54e6bb38":"data.head()","1eb1f63c":"PassengerId_list = list(data['PassengerId'].unique())\nAge = []\nFare = []\nPclass = []\nFamily_Size = []\n\nfor i in PassengerId_list:\n    x = data[data['PassengerId']==i]\n    Age.append(sum(x.Age)\/len(x))\n    Fare.append(sum(x.Fare) \/ len(x))\n    Pclass.append(sum(x.Pclass) \/ len(x))\n    Family_Size.append(sum(x.Family_Size) \/ len(x))\n   ","cead533a":"# visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=Age,y=PassengerId_list,color='green',alpha = 0.5,label='Age' )\nsns.barplot(x=Fare,y=PassengerId_list,color='blue',alpha = 0.7,label='Fare')\nsns.barplot(x=Pclass,y=PassengerId_list,color='cyan',alpha = 0.6,label='Passenger class')\nsns.barplot(x=Family_Size,y=PassengerId_list,color='red',alpha = 0.6,label='Family_Size')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel='Percentage of Passengers', ylabel='Passengers',title = \"Percentage of Passengers According to Fare,Class \")","db00af0b":"sorted_data['Age_ratio'] = sorted_data['Age_ratio']\/max( sorted_data['Age_ratio'])\nsorted_data2['Fare_ratio'] = sorted_data2['Fare_ratio']\/max( sorted_data2['Fare_ratio'])\ndata4 = pd.concat([sorted_data,sorted_data2['Fare_ratio']],axis=1)\ndata4.sort_values('Age_ratio',inplace=True)","0c3ab02d":"# visualize\nf,ax1 = plt.subplots(figsize =(20,10))\nsns.pointplot(x='PassengerId_list',y='Fare_ratio',data=data4,color='lime',alpha=0.8)\nsns.pointplot(x='PassengerId_list',y='Age_ratio',data=data4,color='red',alpha=0.8)\nplt.text(25,1,'PassengerId_list',color='red',fontsize = 17,style = 'italic')   # burdaki degerler yazilarin konumlari istedigimiz gibi degistirebiliriz\nplt.text(25,0.95,'Fare_ratio',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('States',fontsize = 15,color='blue')\nplt.ylabel('Values',fontsize = 15,color='blue')\nplt.title('Age_ratio  VS  Fare_ratio',fontsize = 20,color='blue')\nplt.grid()","c59bf460":"g = sns.jointplot(data4.Fare_ratio, data4.Age_ratio, kind=\"kde\", size=7)\nplt.savefig('graph.png')                          # bu bize sekilleri kaydetmemizi saglar\nplt.show()","a5f5c717":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\n\ng = sns.jointplot(\"Fare_ratio\", \"Age_ratio\", data=data4,size=5, ratio=3, color=\"r\")","948f13fa":"data.head()","1596f5c8":"data.Pclass.dropna(inplace = True)\nlabels = data.Pclass.value_counts().index\ncolors = ['grey','blue','red','yellow','green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = data.Pclass.value_counts().values","065120f4":"# visual\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode=None, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Titanic People According to Class',color = 'blue',fontsize = 15)","11102a00":"data4.head()","d3f9afed":"sns.lmplot(x=\"Fare_ratio\", y=\"Age_ratio\", data=data4)\nplt.show()","f66d3a53":"sns.kdeplot(data4.Fare_ratio, data4.Age_ratio, shade=True, cut=3)      # burada 'cut' sekil arasi genisligi verir\nplt.show()","1c8cb237":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","ef84dc2d":"data4.corr()","6cdaf169":"f,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data4.corr(), annot=True, linewidths=.5, fmt='.1f', ax=ax)\nplt.show()                   \n#annot kutu icindeki rakamlari gosterip gostermemeyi soyluyor\n#fmt . dan sonra degerleri verir","145d6ed5":"data.Sex.unique()","a5897a57":"data.head()","82d4e06a":"# Plot the orbital period with horizontal boxes\n\nsns.boxplot(x=\"old_situation\", y=\"Fare\", hue=\"Sex\", data=data, palette=\"PRGn\")\nplt.show()","c3a2fb3c":"sns.swarmplot(x=\"old_situation\", y=\"Fare\",hue=\"Sex\", data=data)\nplt.show()","49d10fb4":"# pair plot\nsns.pairplot(data4)\nplt.show()","3740f400":"sns.countplot(data.Age.head())\n#sns.countplot(kill.manner_of_death)                 # istersek bunuda ayri ayri cizdirebiliriz\nplt.title(\"Fare according to Age\",color = 'blue',fontsize=15)","ece36e1a":"# ilk siralari gostermek istiyoruz\ndata.head(10)","a38e5bb9":"# data columns lara bakalim\ndata.columns","395c069b":"data.Age.plot(kind= 'line', color= 'b', label= 'Age', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-')\ndata.Fare.plot(color= 'r', label= 'Fare', linewidth= 2, alpha= 0.5, grid= True, linestyle= '-.')\nplt.legend(loc= 'upper right')          #legend= puts label into plot\nplt.xlabel('x axis')                    #label= name of label\nplt.ylabel('y axis')                    #label= name of label\nplt.title('Line Plot')                  #title= title of plot\nplt.show()","e5a9741d":"data.plot(kind = 'scatter', x = 'Age', y= 'Fare', alpha = 0.5, color = 'red')\nplt.xlabel('Age')\nplt.ylabel('Fare')\nplt.title('Age & Fare Scatter Plot')\nplt.show()","6e26c8c7":"data.Age.plot(kind = 'hist',bins = 70, figsize = (12,12))\nplt.show()","d4d9bb35":"data.Age.plot(kind = 'hist',bins = 50)\nplt.clf()  ","237f67da":"data = pd.read_csv('..\/input\/titanic-cleaned-data\/test_clean.csv')\nseries = data['Age']                           \nprint(type(series))     \ndata_frame = data[['Fare']]  \nprint(type(data_frame))","e98f50bd":"x = data['Age'] < 20                      # Defans de\u011feri 200'den b\u00fcy\u00fck olan verileri x de\u011fi\u015fkenine at\u0131yoruz.\nprint(x)                                       # bu sekilde true false olanlarin hepsini gosterir\ndata[x]                                        # sinirlama yapilan hangi pokemonlar ve ozelliklerini verir","5c3c9ca8":"data[np.logical_and(data['Age'] < 20, data['Fare'] > 100.000 )] \n\n# logical and fonksiyonu iki ko\u015fulunda sa\u011flanmas\u0131 istenildi\u011fi ko\u015fullarda kullan\u0131l\u0131r.\n# burada defense de\u011feri 200'den b\u00fcy\u00fck olsun ayn\u0131 zamanda attack de\u011feride 100'den b\u00fcy\u00fck olsun diyoruz.","b8267d28":"# logical and fonksiyonuna alternatif olarak a\u015fa\u011f\u0131daki yap\u0131 kullan\u0131labilir.\n\ndata[(data['Age'] < 20) & (data['Fare'] > 100.000 )]","47ebc0b8":"threshold = sum(data.Age)\/len(data.Age)\ndata[\"old_situation\"] = [\"old\" if i > threshold else \"young\" for i in data.Age]\ndata.loc[:10,[\"old_situation\",\"Age\"]]","5d4dd772":"data.info()","046d8291":"data.describe()","7a0b47e0":"# data.dropna(inplace = True)  \n# data.describe()\n\n# Burada bos yer olmadigi icin boslara gore describe si ici bos cikar","2561c4bd":"# For example: compare Family_Size with fare are high or not\n# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Fare',by = 'Family_Size')","b30c08ed":"data_new = data.head()    # I only take 5 rows into new data\ndata_new","6aec7a5f":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'Name', value_vars= ['Sex','Title'])\nmelted","458ac153":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Name', columns = 'variable',values='value')","808d5fb7":"# Firstly lets create 2 data frame\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) # axis = 0 : adds dataframes in row\nconc_data_row","6b15fc04":"data3 = data['Name'].head()\ndata1 = data['Sex'].head()\ndata2= data['Title'].head()\nconc_data_col = pd.concat([data3,data1,data2],axis =1) # axis = 0 : adds dataframes in row\nconc_data_col","9147f3e5":"data.dtypes","d6b18a3f":"# Pair Plot","8151a296":"pandas'da 3 adet veritipi var. \n1) series \n2) Data_Frame\nseries vekt\u00f6r \u015feklinde uzan\u0131r. tek boyutlu yap\u0131lard\u0131r.","1e615461":"# Count Plot","0acefdf6":"# Kde Plot cizimi","ea7d278f":"# Swarm Plot","9565811b":"# Lm Plot cizim","b1befc83":" # Pie Chart (Pasta dilimi)","c9c2bc07":"# Violin Plot cizimi","7c760162":"# Box Plot cizimi","a7563ef4":"# Heatmap"}}