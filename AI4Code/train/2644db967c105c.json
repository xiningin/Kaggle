{"cell_type":{"87c80d3c":"code","b5e9bd97":"code","6b270a21":"code","a83c0350":"code","498c2d92":"code","8319bce8":"code","3b4921dd":"code","44ee11b9":"code","8ff46f5c":"code","0e751b04":"code","d3c86844":"code","8fc34338":"code","5500f68f":"code","887b6dc9":"code","534c9e03":"code","50d63ca1":"code","72c15c50":"code","833228d6":"code","ebf2c7cc":"code","7728ae1f":"code","90e6041f":"code","8b55c008":"code","862ef7c2":"code","cef4f4e5":"code","c1f4d3b6":"code","c137293d":"code","2cb2c095":"code","bc240a9d":"code","7c03fa44":"code","01c0be0b":"code","88d5e463":"code","32ffadf8":"code","22cb8978":"code","93062a43":"code","6dc7009c":"code","669fc100":"code","54116cb5":"code","0c6d1db9":"code","76f97477":"code","f1a5825c":"code","f1c19c91":"code","a7f3a293":"code","68cac5c1":"code","508bb479":"code","a8624974":"code","8c0a1594":"code","72b6099d":"code","29e3d2cd":"code","98087061":"code","d5838e13":"code","f9c1427a":"code","33a35ad6":"code","8e989b6d":"code","4ceb9d09":"code","7297f416":"code","5f9b9388":"code","b5460949":"code","34383286":"code","fc80e730":"code","6a92ae3b":"code","e0b71302":"code","1f5e56df":"code","1b1a0404":"code","dfc44770":"code","2b72c902":"code","37be85dc":"code","ac173f72":"code","8f0c2197":"code","d39ac95d":"code","7d2901f7":"code","152ad2ac":"code","340793cc":"code","b8171674":"code","13cb777f":"code","6aa2efdf":"code","4eeed83d":"code","5a18cf58":"code","f798e25a":"code","ba53549f":"code","924c475b":"code","c82a5e3f":"code","829c8de2":"code","240bf89f":"markdown","55dd8e2d":"markdown","a8be2cbb":"markdown","3b3a040b":"markdown","6bd2c1ad":"markdown","d3728202":"markdown","557a6173":"markdown","50003850":"markdown","c2026232":"markdown","4791cb8e":"markdown","e1cd84ae":"markdown","eaa17404":"markdown","8506bbb2":"markdown","3d375d94":"markdown"},"source":{"87c80d3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5e9bd97":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","6b270a21":"# making PassengerId an index column \ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\",index_col=\"PassengerId\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\",index_col=\"PassengerId\")","a83c0350":"train.head()","498c2d92":"train.info()","8319bce8":"# name, ticket columns might not effect the model so removing it\ntrain = train.drop(columns=[\"Name\",\"Ticket\"])\ntest = test.drop(columns=[\"Name\",\"Ticket\"])","3b4921dd":"# converting sex, embarked into numerical values\nembarked_map = {\"S\":0,\"C\":1,\"Q\":2}\nsex_map = {\"male\":0,\"female\":1}\ntrain[\"Sex\"] = train.Sex.apply(lambda x: sex_map.get(x))\ntrain[\"Embarked\"] = train.Embarked.apply(lambda x: embarked_map.get(x))\ntest[\"Sex\"] = test.Sex.apply(lambda x: sex_map.get(x))\ntest[\"Embarked\"] = test.Embarked.apply(lambda x: embarked_map.get(x))","44ee11b9":"print(\"percentage of null values in training data\")\nround(train.isna().sum()\/len(train.index),2)","8ff46f5c":"round(test.isna().sum()\/len(test.index),2)","0e751b04":"# we will create a new boolean column is_cabin_present \n# if cabin number is present is_cabin_present is true else false\ntrain[\"is_cabin_present\"] = train.Cabin.isna()\ntest[\"is_cabin_present\"] = test.Cabin.isna()\n\n# we will remove Cabin column from analysis because it has 80% null values\ntrain = train.drop(columns=\"Cabin\")\ntest = test.drop(columns=\"Cabin\")\ntrain.isna().sum()","d3c86844":"# we will impute the values for age, embarked\n\nmedian_imputer = SimpleImputer(strategy=\"median\")\nmode_imputer = SimpleImputer(strategy=\"most_frequent\")\n\ntrain[[\"Embarked\"]] = mode_imputer.fit_transform(train[['Embarked']])\ntrain[[\"Age\",\"Fare\"]] = median_imputer.fit_transform(train[['Age',\"Fare\"]])\n\ntest[[\"Embarked\"]] = mode_imputer.transform(test[['Embarked']])\ntest[[\"Age\",\"Fare\"]] = median_imputer.transform(test[['Age',\"Fare\"]])\n\ntrain.isna().sum()","8fc34338":"test.isna().sum()","5500f68f":"# Target Variable : Survived\ntrain.Survived.value_counts()","887b6dc9":"sns.countplot(train.Survived)","534c9e03":"train.columns","50d63ca1":"# Pclass\ntrain.Pclass.value_counts()","72c15c50":"sns.countplot(train.Pclass)","833228d6":"sns.countplot(train.Pclass,hue=train.Survived)","ebf2c7cc":"# Sex\ntrain.Sex.value_counts()","7728ae1f":"sns.countplot(train.Sex)","90e6041f":"sns.countplot(train.Sex, hue=train.Survived)","8b55c008":"# SibSp\ntrain.SibSp.value_counts()","862ef7c2":"sns.countplot(train.SibSp)","cef4f4e5":"sns.countplot(train.SibSp,hue=train.Survived)","c1f4d3b6":"# Parch\ntrain.Parch.value_counts()","c137293d":"sns.countplot(train.Parch)","2cb2c095":"sns.countplot(train.Parch, hue=train.Survived)","bc240a9d":"train.Fare.value_counts()","7c03fa44":"sns.countplot(train.Fare)","01c0be0b":"sns.boxplot(train.Fare)","88d5e463":"train[train.Fare > 300]","32ffadf8":"# train fare greater 300 is an outlier so removing it\ntrain = train[train.Fare < 300]","22cb8978":"train.Fare.describe()","93062a43":"train['Fare_bin'] = pd.cut(train['Fare'], [0,30,60,90,120,150,180,210,240,270,300], labels=['0-30','30-60','60-90','90-120','120-150','150-180','180-210','210-240','240-270','270-300'])\ntest['Fare_bin'] = pd.cut(test['Fare'], [0,30,60,90,120,150,180,210,240,270,300], labels=['0-30','30-60','60-90','90-120','120-150','150-180','180-210','210-240','240-270','270-300'])","6dc7009c":"sns.countplot(train['Fare_bin'])","669fc100":"sns.countplot(train.Fare_bin, hue=train.Survived)","54116cb5":"sns.countplot(train.Fare_bin, hue=train.Survived)","0c6d1db9":"# dropping fare\ntrain = train.drop(columns=\"Fare\")\ntest = test.drop(columns=\"Fare\")","76f97477":"sns.countplot(train.Embarked)","f1a5825c":"sns.countplot(train.Embarked, hue=train.Survived)","f1c19c91":"train.corr()[['Survived']].sort_values(by='Survived')","a7f3a293":"sns.heatmap(train.corr())","68cac5c1":"sns.pairplot(train)","508bb479":"train.columns","a8624974":"train[\"Fare_bin\"] = train.Fare_bin.cat.codes\ntest[\"Fare_bin\"] = test.Fare_bin.cat.codes","8c0a1594":"Y = train[\"Survived\"]\nX = train.drop(columns=\"Survived\")\nX.head()","72b6099d":"assert len(X.columns) == len(test.columns)","29e3d2cd":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\ntest = scaler.transform(test)","98087061":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","d5838e13":"from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()","f9c1427a":"clf.fit(x_train, y_train)","33a35ad6":"y_train_pred = clf.predict(x_train)","8e989b6d":"from sklearn.metrics import r2_score, confusion_matrix, accuracy_score\n\ntrain_accuracy = accuracy_score(y_train, y_train_pred)\ntrain_accuracy","4ceb9d09":"y_test_pred = clf.predict(x_test)\ntest_accuracy = accuracy_score(y_test, y_test_pred)\ntest_accuracy","7297f416":"confusion_matrix(y_train, y_train_pred)","5f9b9388":"confusion_matrix(y_test, y_test_pred)","b5460949":"results = clf.predict(test)","34383286":"test_index = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[\"PassengerId\"]\nresults = pd.DataFrame(results, index=test_index, columns=[\"Survived\"])","fc80e730":"results.to_csv(\"submission_logistic.csv\")","6a92ae3b":"y_train.value_counts()\/len(y_train)","e0b71302":"from sklearn.linear_model import LogisticRegression\n\nclass_weights = {0:62,1:38}\n\nclf = LogisticRegression(class_weight=class_weights)\n\nparams = {\n    \"penalty\":(\"l1\",\"l2\"),\n    \"C\":[1,2,3,5]\n}","1f5e56df":"from sklearn.model_selection import GridSearchCV\n\ncv = GridSearchCV(clf, param_grid=params, scoring=\"accuracy\", cv=5)\n\ncv.fit(X,Y)","1b1a0404":"pd.DataFrame(cv.cv_results_)","dfc44770":"from sklearn.tree import DecisionTreeClassifier\n\ntclf = DecisionTreeClassifier(class_weight=class_weights)\n\ntclf.fit(x_train,y_train)","2b72c902":"train_accuracy = accuracy_score(y_train, y_train_pred)\ntrain_accuracy","37be85dc":"y_test_pred = tclf.predict(x_test)\ntest_accuracy = accuracy_score(y_test, y_test_pred)\ntest_accuracy","ac173f72":"from sklearn.tree import DecisionTreeClassifier\n\ntclf = DecisionTreeClassifier(class_weight=class_weights)\n\nparams = {\n    \"criterion\":(\"gini\",\"entropy\"),\n    \"max_depth\":[4,5,6,7,8,9,10],\n    \"min_samples_split\":[2,4,6,8,10],\n    \"min_samples_leaf\":[1,2,3,4,5],\n    \"max_features\":[1,2,3]\n}","8f0c2197":"from sklearn.model_selection import RandomizedSearchCV\n\nrcv = RandomizedSearchCV(tclf, param_distributions=params, scoring=\"accuracy\", cv=5, n_iter=25)\n\nrcv.fit(X,Y)","d39ac95d":"pd.DataFrame(rcv.cv_results_)","7d2901f7":"rcv.best_score_","152ad2ac":"rcv.best_params_","340793cc":"btclf = rcv.best_estimator_","b8171674":"results = btclf.predict(test)\ntest_index = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[\"PassengerId\"]\nresults = pd.DataFrame(results, index=test_index, columns=[\"Survived\"])\nresults.to_csv(\"submission_trees.csv\")","13cb777f":"from sklearn.ensemble import RandomForestClassifier\n\nrclf = RandomForestClassifier(oob_score=True,class_weight=class_weights)\n\nrclf.fit(x_train,y_train)","6aa2efdf":"y_train_pred = rclf.predict(x_train)\ntrain_accuracy = accuracy_score(y_train, y_train_pred)\ntrain_accuracy","4eeed83d":"y_test_pred = rclf.predict(x_test)\ntest_accuracy = accuracy_score(y_test, y_test_pred)\ntest_accuracy","5a18cf58":"from sklearn.ensemble import RandomForestClassifier\n\nrclf = RandomForestClassifier(class_weight=class_weights)\n\nparams = {\n    \"criterion\":(\"gini\",\"entropy\"),\n    \"max_depth\":[4,5,6,7,8,9,10],\n    \"min_samples_split\":[2,4,6,8,10],\n    \"min_samples_leaf\":[1,2,3,4,5],\n    \"max_features\":[1,2,3],\n    \"max_samples\":[.2,.4],\n    \"n_estimators\":[20,40,60,80,100]\n}","f798e25a":"from sklearn.model_selection import RandomizedSearchCV\n\nrcv = RandomizedSearchCV(rclf, param_distributions=params, scoring=\"accuracy\", cv=5, n_iter=50)\n\nrcv.fit(X,Y)","ba53549f":"brclf = rcv.best_estimator_","924c475b":"rcv.best_score_","c82a5e3f":"results = brclf.predict(test)\ntest_index = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[\"PassengerId\"]\nresults = pd.DataFrame(results, index=test_index, columns=[\"Survived\"])\nresults.to_csv(\"submission_random_forests.csv\")","829c8de2":"rcv.best_params_","240bf89f":"Survival percentage of females is higher than the male counterparts","55dd8e2d":"### Decision Trees","a8be2cbb":"getting submission score of 76.315 which is a percent higher than the previous submission scores of decision tree classifier and logistic regression models","3b3a040b":"Here we use random search CV because we will have a lot of parameters","6bd2c1ad":"### EDA","d3728202":"survival percentage is higher if a person have one or two  siblings","557a6173":"A lot of people survived are in the 1st and 2nd class compared to third class","50003850":"### Random Forests","c2026232":"as ticket fare increases survival percentage increases","4791cb8e":"label encoding has been done previously, no need to create dummy variables\n### Model Building","e1cd84ae":"### Data Preparation","eaa17404":"#### Univariate, Bivariate analysis","8506bbb2":"Survival percentage is higher if a person has one or two parents travelling with them","3d375d94":"Even using the grid search for 2 different parameters the model we are getting has accuracy similar to the baseline logistic regression model"}}