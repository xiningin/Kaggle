{"cell_type":{"a90bfeee":"code","eb44cfcc":"code","084cbccf":"code","9514313d":"code","912a1f9d":"code","403f18c4":"code","1145d7b1":"code","e68598e1":"code","97aad087":"code","247fc34a":"code","bb2a5700":"code","07498183":"code","5cecf06b":"code","4fe33ff4":"code","891872ec":"markdown"},"source":{"a90bfeee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb44cfcc":"# Importing the Required Library\nimport pandas as  pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dropout,Dense,Activation,Conv2D,MaxPooling2D,Flatten\nfrom kerastuner.tuners import RandomSearch","084cbccf":"# Reading the Data\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.columns","9514313d":"# taking the independent feature and the dependent feature in xtrain and ytrain of the traning data\nxtrain = train.drop(columns = 'label')\nytrain = train['label']","912a1f9d":"# The shape of train and test dataset\nprint('test : ',test.shape,'xtrain : ',xtrain.shape)","403f18c4":"# Scaling the Data\nxtrain = xtrain\/255.0\ntest = test\/255.0\n# Reshaping the Data\nxtrain = xtrain.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","1145d7b1":"# Converting the Categorical data  \nytrain = to_categorical(ytrain,num_classes=10)\n","e68598e1":"xtrain_t,xtest_t,ytrain_t,ytest_t = train_test_split(xtrain,ytrain,test_size= 0.1,random_state = 42)\n","97aad087":"# Building the Model\nypred = None\ndef model_builder():\n    model = Sequential([\n          Conv2D(28,kernel_size = 3,padding='same',input_shape =(28,28,1),activation ='relu'),\n          MaxPooling2D(pool_size = (2,2)),\n          Conv2D(28,kernel_size=(2,2),padding='valid',activation='relu'),\n          MaxPooling2D(pool_size =(2,2)),\n          Conv2D(28,kernel_size=(2,2),padding='valid',activation='relu'),\n          Dropout(0.2),\n          Flatten(),\n          Dense(512,activation='relu'),\n          Dropout(0.5),\n          Dense(256,activation='relu'),\n          Dense(ytrain_t.shape[1],activation = 'softmax')\n  ])\n    model.compile(loss = 'categorical_crossentropy',optimizer='adam',metrics = ['accuracy'])\n    model.fit(xtrain_t,ytrain_t,epochs = 20,validation_data = (xtest_t,ytest_t),batch_size = 64)\n    ypred = model.predict(test)\n    return ypred,model\n  # return model","247fc34a":"# Running\npred,model = model_builder()","bb2a5700":"model.summary()","07498183":"# checking the predictions\npredictions = np.argmax(pred, axis=1)\npredictions","5cecf06b":"\nImageId = np.arange(1,28001)\noutput = pd.DataFrame({'ImageId':ImageId, 'Label':predictions})\noutput.to_csv('output.csv', index=False)\nprint(output)","4fe33ff4":"submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsubmission.head()","891872ec":"# This is My First time Posting my Notebook it still can be prefected but i'm still in the Learning Stage so please ignore some mistakes!!\n\n## But i still was able to achieve the accuracy of 99.05%\n ****"}}