{"cell_type":{"921b35f3":"code","13e5ed3b":"code","d74b3e6a":"code","097719e8":"code","cec5c2d1":"code","39a3c84d":"code","47092b86":"code","89884aad":"code","03b4aef3":"code","2d2e63d0":"code","57455aa9":"code","092c1005":"code","05ebc835":"code","05d24289":"code","4d737e4b":"code","75fcc1f0":"code","f8baa117":"code","dedeb49f":"code","286d1ef1":"code","48ebdfa4":"code","1302d104":"code","704b0fdd":"markdown","29d79346":"markdown","11cffc17":"markdown","9a188ea0":"markdown","20355bb9":"markdown","2f6e5d17":"markdown","ecd70cf6":"markdown","d06608ba":"markdown","15f9807d":"markdown","ee6ce676":"markdown","1356e2c0":"markdown","98a5526b":"markdown","ef86157e":"markdown"},"source":{"921b35f3":"import pandas as pd\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib.dates import date2num, num2date\nfrom matplotlib import dates as mdates\nfrom matplotlib import ticker\nfrom matplotlib.colors import ListedColormap\nfrom matplotlib.patches import Patch\n\nfrom scipy import stats as sps\nfrom scipy.interpolate import interp1d\n\nfrom IPython.display import clear_output\n\n%config InlineBackend.figure_format = 'retina'","13e5ed3b":"# Load the patient CSV\npatients = pd.read_csv(\n    'https:\/\/data.ontario.ca\/dataset\/f4112442-bdc8-45d2-be3c-12efae72fb27\/resource\/455fd63b-603d-4608-8216-7d8647f43350\/download\/conposcovidloc.csv',\n    parse_dates=[\n        'Accurate_Episode_Date',\n        'Case_Reported_Date',\n        'Test_Reported_Date',\n        'Specimen_Date',\n    ],\n)","d74b3e6a":"prov_cases = patients.groupby('Accurate_Episode_Date')['Row_ID'].count()\nprov_cases.name = 'New_Cases'\nprov_cases.sort_index(inplace=True)\n#prov_cases = prov_cases.reindex(pd.date_range(prov_cases.index[0], prov_cases.index[-1]), fill_value=0)\nprov_cases","097719e8":"region_cases = patients.groupby(['Reporting_PHU', 'Accurate_Episode_Date'])['Row_ID'].count()\nregion_cases.name = 'New_Cases'\nregion_cases.sort_index(inplace=True)\nregion_cases","cec5c2d1":"all_data_patients = patients[['Accurate_Episode_Date', 'Case_Reported_Date']].dropna().sort_values(by='Case_Reported_Date')\n\nall_data_patients_int = all_data_patients.copy()\nfor c in ['Accurate_Episode_Date', 'Case_Reported_Date']:\n    all_data_patients_int[c] = (all_data_patients_int[c] - pd.to_datetime('2020-01-01')).dt.days\n\nax = all_data_patients_int.plot.scatter(\n    title='Onset vs. Confirmed Dates - COVID19',\n    x='Case_Reported_Date',\n    y='Accurate_Episode_Date',\n    alpha=.1,\n    lw=0,\n    s=10,\n    figsize=(6,6))\n\n#formatter = mdates.DateFormatter('%m\/%d')\n#locator = mdates.WeekdayLocator(interval=2)\n\n#for axis in [ax.xaxis, ax.yaxis]:\n#    axis.set_major_formatter(formatter)\n#    axis.set_major_locator(locator)","39a3c84d":"# Calculate the delta in days between onset and confirmation\ndelay = (all_data_patients['Case_Reported_Date'] - all_data_patients['Accurate_Episode_Date']).dt.days\n\n# Convert samples to an empirical distribution\np_delay = delay.value_counts().sort_index()\nnew_range = np.arange(0, p_delay.index.max()+1)\np_delay = p_delay.reindex(new_range, fill_value=0)\np_delay \/= p_delay.sum()\n\n# Show our work\nfig, axes = plt.subplots(ncols=2, figsize=(12,6))\np_delay.plot(title='P(Delay)', ax=axes[0])\np_delay.cumsum().plot(title='P(Delay <= x)', ax=axes[1])\nfor ax in axes:\n    ax.set_xlabel('days')","47092b86":"def adjust_onset_for_right_censorship(onset, p_delay):\n    cumulative_p_delay = p_delay.cumsum()\n    \n    max_date = onset.index[-1]\n    adjusted = onset.copy()\n    for d, ons in onset.iteritems():\n        delay = (max_date-d).days\n        if delay <= cumulative_p_delay.index[-1]:\n            adjusted.loc[d] = ons \/ cumulative_p_delay[delay]\n        else:\n            adjusted.loc[d] = ons  # 0% observed delays\n\n    return adjusted, cumulative_p_delay\n","89884aad":"def smooth_cases(cases):\n    new_cases = cases\n\n    smoothed = new_cases.rolling(7,\n        win_type='gaussian',\n        min_periods=1,\n        center=True).mean(std=2).round()\n        #center=False).mean(std=2).round()\n    \n    zeros = smoothed.index[smoothed.eq(0)]\n    if len(zeros) == 0:\n        idx_start = 0\n    else:\n        last_zero = zeros.max()\n        idx_start = smoothed.index.get_loc(last_zero) + 1\n    smoothed = smoothed.iloc[idx_start:]\n    original = new_cases.loc[smoothed.index]\n    \n    return smoothed\n\ncases = prov_cases.rename(\"Ontario cases\")\noriginal = cases\n\nadjusted, cum_p_delay = adjust_onset_for_right_censorship(cases, p_delay)\nsmoothed = smooth_cases(adjusted)\n\noriginal.plot(title=\"Ontario New Cases per Day\",\n               c='k',\n               linestyle=':',\n               alpha=.5,\n               label='Actual',\n               legend=True,\n             figsize=(600\/72, 400\/72))\n\nax = adjusted.plot(label='Adjusted for Right-Censorship',\n                   legend=True)\nax = smoothed.plot(label='Smoothed and Adjusted for Right-Censorship',\n                   legend=True)\nax.get_figure().set_facecolor('w')","03b4aef3":"# We create an array for every possible value of Rt\nR_T_MAX = 12\nr_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1)\n\n# Gamma is 1\/serial interval\n# https:\/\/wwwnc.cdc.gov\/eid\/article\/26\/6\/20-0357_article\nGAMMA = 1\/4\n\ndef get_posteriors(sr, window=7, min_periods=1):\n    lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1))\n\n    # Note: if you want to have a Uniform prior you can use the following line instead.\n    # I chose the gamma distribution because of our prior knowledge of the likely value\n    # of R_t.\n    \n    # prior0 = np.full(len(r_t_range), np.log(1\/len(r_t_range)))\n    prior0 = np.log(sps.gamma(a=3).pdf(r_t_range) + 1e-14)\n\n    likelihoods = pd.DataFrame(\n        # Short-hand way of concatenating the prior and likelihoods\n        data = np.c_[prior0, sps.poisson.logpmf(sr[1:].values, lam)],\n        index = r_t_range,\n        columns = sr.index)\n\n    # Perform a rolling sum of log likelihoods. This is the equivalent\n    # of multiplying the original distributions. Exponentiate to move\n    # out of log.\n    posteriors = likelihoods.rolling(window,\n                                     axis=1,\n                                     min_periods=min_periods).sum()\n    posteriors = np.exp(posteriors)\n\n    # Normalize to 1.0\n    posteriors = posteriors.div(posteriors.sum(axis=0), axis=1)\n    \n    return posteriors\n\nposteriors = get_posteriors(smoothed)","2d2e63d0":"ax = posteriors.plot(title='Ontario - Daily Posterior for $R_t$',\n           legend=False, \n           lw=1,\n           c='k',\n           alpha=.3,\n           xlim=(0.4,4))\n\nax.set_xlabel('$R_t$');","57455aa9":"def highest_density_interval(pmf, p=.95):\n    \n    # If we pass a DataFrame, just call this recursively on the columns\n    if(isinstance(pmf, pd.DataFrame)):\n        return pd.DataFrame([highest_density_interval(pmf[col]) for col in pmf],\n                            index=pmf.columns)\n    \n    cumsum = np.cumsum(pmf.values)\n    best = None\n    for i, value in enumerate(cumsum):\n        for j, high_value in enumerate(cumsum[i+1:]):\n            if (high_value-value > p) and (not best or j<best[1]-best[0]):\n                best = (i, i+j+1)\n                break\n            \n    low = pmf.index[best[0]]\n    high = pmf.index[best[1]]\n    return pd.Series([low, high], index=['Low', 'High'])","092c1005":"# Note that this takes a while to execute - it's not the most efficient algorithm\nhdis = highest_density_interval(posteriors)\n\nmost_likely = posteriors.idxmax().rename('ML')\n\n# Look into why you shift -1\nresult = pd.concat([most_likely, hdis], axis=1)\n\nresult.tail()","05ebc835":"def plot_rt(result, ax, state_name):\n    \n    ax.set_title(f\"{state_name}\")\n    \n    # Colors\n    ABOVE = [1,0,0]\n    MIDDLE = [1,1,1]\n    BELOW = [0,0,0]\n    cmap = ListedColormap(np.r_[\n        np.linspace(BELOW,MIDDLE,25),\n        np.linspace(MIDDLE,ABOVE,25)\n    ])\n    color_mapped = lambda y: np.clip(y, .5, 1.5)-.5\n    \n    index = result['ML'].index.get_level_values('Accurate_Episode_Date')\n    values = result['ML'].values\n    \n    # Plot dots and line\n    ax.plot(index, values, c='k', zorder=1, alpha=.25)\n    ax.scatter(index,\n               values,\n               s=40,\n               lw=.5,\n               c=cmap(color_mapped(values)),\n               edgecolors='k', zorder=2)\n    \n    # Aesthetically, extrapolate credible interval by 1 day either side\n    lowfn = interp1d(date2num(index),\n                     result['Low'].values,\n                     bounds_error=False,\n                     fill_value='extrapolate')\n    \n    highfn = interp1d(date2num(index),\n                      result['High'].values,\n                      bounds_error=False,\n                      fill_value='extrapolate')\n    \n    extended = pd.date_range(start=pd.Timestamp('2020-03-01'),\n                             end=index[-1]+pd.Timedelta(days=1))\n    \n    ax.fill_between(extended,\n                    lowfn(date2num(extended)),\n                    highfn(date2num(extended)),\n                    color='k',\n                    alpha=.1,\n                    lw=0,\n                    zorder=3)\n\n    ax.axhline(1.0, c='k', lw=1, label='$R_t=1.0$', alpha=.25);\n    \n    # Formatting\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    ax.xaxis.set_minor_locator(mdates.DayLocator())\n    \n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.1f}\"))\n    ax.yaxis.tick_right()\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.margins(0)\n    ax.grid(which='major', axis='y', c='k', alpha=.1, zorder=-2)\n    ax.margins(0)\n    ax.set_ylim(0.0,3.5)\n    ax.set_xlim(pd.Timestamp('2020-03-01'), result.index.get_level_values('Accurate_Episode_Date')[-1]+pd.Timedelta(days=1))\n    fig.set_facecolor('w')\n\n    \nfig, ax = plt.subplots(figsize=(600\/72,400\/72))\n\nplot_rt(result, ax, 'Ontario')\nax.set_title(f'Real-time $R_t$ for Ontario')\nax.set_ylim(.5,3.5)\nax.xaxis.set_major_locator(mdates.WeekdayLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))","05d24289":"target_regions = []\nfor reg, cases in region_cases.groupby(level=0):\n    if cases.max() >= 30:\n        target_regions.append(reg)\ntarget_regions","4d737e4b":"results = {}\n\nprovinces_to_process = region_cases.loc[target_regions]\n\nfor prov_name, grp in provinces_to_process.groupby(level=0):\n    clear_output(wait=True)   \n    print(f'Processing {prov_name}')\n    cases = grp.droplevel(0)\n    adjusted, cum_p_delay = adjust_onset_for_right_censorship(cases, p_delay)\n    smoothed = smooth_cases(adjusted)\n    print('\\tGetting Posteriors')\n    try:\n        posteriors = get_posteriors(smoothed)\n    except:\n        display(cases)\n    print('\\tGetting HDIs')\n    hdis = highest_density_interval(posteriors)\n    print('\\tGetting most likely values')\n    most_likely = posteriors.idxmax().rename('ML')\n    result = pd.concat([most_likely, hdis], axis=1)\n    results[prov_name] = result #.droplevel(0)\n    \nclear_output(wait=True)\nprint('Done.')","75fcc1f0":"ncols = 4\nnrows = int(np.ceil(len(results) \/ ncols))\n\n# fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3))\nfig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3))\n\nfor i, (prov_name, result) in enumerate(results.items()):\n    plot_rt(result, axes.flat[i], prov_name)\n\nfig.tight_layout()\nfig.set_facecolor('w')","f8baa117":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dedeb49f":"npi_df = pd.read_csv('\/kaggle\/input\/covid19-challenges\/npi_canada.csv', parse_dates=['start_date', 'end_date'])\nnpi_df","286d1ef1":"npi_df.columns","48ebdfa4":"npi_df['intervention_category'].unique()","1302d104":"npi_df[(npi_df['intervention_category']=='Declaration of emergency (or similar)')\\\n      &((npi_df['subregion']=='All')|(npi_df['subregion'].isnull()))]","704b0fdd":"# Look at NPIs","29d79346":"### Adjust for Right-Censoring\n\nSince we distributed observed cases into the past to recreate the onset curve, we now have a right-censored time series. We can correct for that by asking what % of people have a delay less than or equal to the time between the day in question and the current day.\n\nFor example, 5 days ago, there might have been 100 cases onset. Over the course of the next 5 days some portion of those cases will be reported. This portion is equal to the cumulative distribution function of our delay distribution. If we know that portion is say, 60%, then our current count of onset on that day represents 60% of the total. This implies that the total is 166% higher. We apply this correction to get an idea of what actual onset cases are likely, thus removing the right censoring.","11cffc17":"### Plotting in the Time Domain with Credible Intervals\n\nSince our results include uncertainty, we'd like to be able to view the most likely value of $R_t$ along with its highest-density interval.","9a188ea0":"Taking a look at the province, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that.\n\nAlso, case reporting is very erratic based on testing backlogs, etc. To get the best view of the 'true' data we can, I've applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you'd imagine the real world process is not nearly as stochastic as the actual reporting.\n\nNB: Alf has modified Kevin's work here to use an uncentred, right-ended rolling filter.  Kevin used the same but centred, and Alf was concerned about information from the \"future\" leaking backward in the time series analysis, making it look unrealistically well-fit compared to a system making online predictions.","20355bb9":"# Estimation of $R_t$ from Case Counts\n\nThis notebook attempts to calculate the effective reproduction number $R_t$ from case count data within Canada. It borrows *heavily* (by which I mean \"steals vast tranches of code\") from Kevin Systrom's [excellent notebook](https:\/\/github.com\/k-sys\/covid-19\/blob\/master\/Realtime%20R0.ipynb) and [blog post](http:\/\/systrom.com\/blog\/the-metric-we-need-to-manage-covid-19\/) on this topic.  THANK YOU KEVIN for open sourcing this!\n\n*Update*: I've stolen Kevin's adjustment for right-censoring from here: https:\/\/github.com\/k-sys\/covid-19\/blob\/master\/Realtime%20Rt%20mcmc.ipynb\n\nData sources used in this work:\n* Berry I, Soucy J-PR, Tuite A, Fisman D. Open access epidemiologic data and an interactive dashboard to monitor the COVID-19 outbreak in Canada. CMAJ. 2020 Apr 14;192(15):E420. doi: https:\/\/doi.org\/10.1503\/cmaj.75262 (updated on Kaggle via the HowsMyFlattening team) [[GitHub]](https:\/\/github.com\/ishaberry\/Covid19Canada)\n* Government of Ontario Confirmed positive cases of COVID19 in Ontario, https:\/\/data.ontario.ca\/en\/dataset\/confirmed-positive-cases-of-covid-19-in-ontario \n* [Interventions Data](https:\/\/howsmyflattening.ca\/#\/data) from HowsMyFlattening Team\n","2f6e5d17":"# Data Import: Cases in Ontario\n\nMassage into a time series.","ecd70cf6":"## Update: Right Censoring Correction\n\nOntario reports both Accurate_Episode_Date (the estimate date on which onset of symptoms occurred) and Case_Reported_Date, when the case was logged.  In all but 3 of 39,000+ cases, Accurate_Episode_Date is available.  We therefore use that date in $R_t$ calculation.\n\nWe also model the delay between accurate episode date and report date, and use that to adjust the cases fed into the $R_t$ estimator that have likely not been seen due to right-censorship.","d06608ba":"# Repeat for Every Interesting Region\n\nDefining \"interesting\" using the ft.com criterion of one day with 30 or more cases.","15f9807d":"Just like the example before, we create lambda based on the previous day's counts from all values of $R_t$. Unlike the previous example, I now evaluate the __log__ of the Poisson. Why? It makes windowing easier.\n\nSince $\\log{ab}=\\log{a}+\\log{b}$, we can do a rolling sum over the last $m$ periods and then exponentiate to get the rolling product of the original values. This does not change any of the numbers \u2013 it's just a convenience.","ee6ce676":"### The Result\n\nBelow you can see every day (row) of the posterior distribution plotted simultaneously. The posteriors start without much confidence (wide) and become progressively more confident (narrower) about the true value of $R_t$","1356e2c0":"# Estimating COVID-19's $R_t$ in Real-Time\nKevin Systrom - April 12\n\nIn any epidemic, $R_t$ is the measure known as the effective reproduction number. It's the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions.\n\nAs a pandemic evolves, increasing restrictions (or potential releasing of restrictions) change $R_t$. Knowing the current $R_t$ is essential. When $R>1$, the pandemic will spread through the entire population. If $R_t<1$, the pandemic will grow to some fixed number less than the population. The lower $R_t$, the more manageable the situation. The value of $R_t$ helps us (1) understand how effective our measures have been controlling an outbreak and (2) gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. [Well-respected epidemiologists argue](https:\/\/www.nytimes.com\/2020\/04\/06\/opinion\/coronavirus-end-social-distancing.html) that tracking $R_t$ is the only way to manage through this crisis.\n\nYet, today, to my knowledge there is no real-time tracking of $R_t$ in United States. In fact, the only real-time measure I've seen has been for [Hong Kong](https:\/\/covid19.sph.hku.hk\/dashboard). More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and\/or city) level granularity of $R_t$.\n\nWhat follows is a solution to this problem at the US State level. It's a modified version of a solution created by [Bettencourt & Ribeiro 2008](https:\/\/journals.plos.org\/plosone\/article?id=10.1371\/journal.pone.0002185) to estimate real-time $R_t$ using a Bayesian approach. While I have stayed true to most of their process, my solution differs in an important way that I will call out clearly.\n\nIf you have questions, comments, or improvments feel free to get in touch: [hello@systrom.com](mailto:hello@systrom.com). And if it's not entirely clear, I'm not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so calibrate accordingly. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere \u2013 internationally or to counties in the United States.\n\n## Bettencourt & Ribeiro's Approach\n\nEvery day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday's value) and every previous value of $R_{t-m}$ for that matter.\n\nWith these insights, the authors use [Bayes' rule](https:\/\/en.wikipedia.org\/wiki\/Bayes%27_theorem) to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day.\n\nThis is Bayes' Theorem as we'll use it:\n\n$$ P(R_t|k)=\\frac{P(R_t)\\cdot\\mathcal{L}(R_t|k)}{P(k)} $$\n\nThis says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to:\n\n- The __prior__ beliefs of the value of $P(R_t)$ without the data ...\n- times the __likelihood__ of $R_t$ given that we've seen $k$ new cases ...\n- divided by the probability of seeing this many cases in general.\n\nImportantly, $P(k)$ is a constant, so the numerator is proportional to the posterior. Since all probability distributions sum to 1.0, we can ignore $P(k)$ and normalize our posterior to sum to 1.0:\n\n$$ P(R_t|k) \\propto P(R_t) \\cdot \\mathcal{L}(R_t|k) $$\n\nThis is for a single day. To make it iterative: every day that passes, we use yesterday's conclusion (ie. posterior) $P(R_{t-1}|k_{t-1})$ to be today's prior $P(R_t)$ so on day two:\n\n$$ P(R_2|k) \\propto P(R_0)\\cdot\\mathcal{L}(R_2|k_2)\\cdot\\mathcal{L}(R_1|k_1) $$\n\nAnd more generally:\n\n$$ P(R_t|k_t) \\propto P(R_0) \\cdot {\\displaystyle \\prod^{T}_{t=0}}\\mathcal{L}(R_t|k_t) $$\n\nWith a uniform prior $P(R_0)$, this reduces to:\n\n$$ P(R_t|k_t) \\propto {\\displaystyle \\prod^{T}_{t=0}}\\mathcal{L}\\left(R_t|k_t\\right) $$\n\n### My (Kevin's) Proposed Modification\n\nThis works fine, but it suffers from an issue: the posterior on any given day is equally influenced by the distant past as much as the recent day. For epidemics that have $R_t>1$ for a long time and then become under control ($R_t<1$), the posterior gets stuck. It cannot forget about the many days where $R_t>1$ so eventually $P(R_t|k)$ asymptotically approaches 1 when we know it's well under 1. The authors note this in the paper as a footnote. Unfortunately this won't work for us. __The most critical thing to know is when we've dipped below the 1.0 threshold!__\n\nSo, I propose to only incorporate the last $m$ days of the likelihood function. By doing this, the algorithm's prior is built based on the recent past which is a much more useful prior than the entire history of the epidemic. So this simple, but important change leads to the following:\n\n$$ P(R_t|k_t) \\propto {\\displaystyle \\prod^{T}_{t=T-m}}\\mathcal{L}\\left(R_t|k_t\\right) $$\n\nWhile this takes the last $m$ priors into account equally, you can decide to apply a windowing function (such as an exponential) to favor recent priors over more distant.\n\n### Choosing a Likelihood Function $\\mathcal{L}\\left(R_t|k_t\\right)$\n\nA likelihood function function says how likely a value of $R_t$ is given an observed number of new cases $k$.\n\nAny time you need to model 'arrivals' over some time period of time, statisticians like to use the [Poisson Distribution](https:\/\/en.wikipedia.org\/wiki\/Poisson_distribution). Given an average arrival rate of $\\lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution:\n\n$$P(k|\\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}$$\n\n### Connecting $\\lambda$ and $R_t$\n\n__The key insight to making this work is to realize there's a connection between $R_t$ and $\\lambda$__. [The derivation](https:\/\/journals.plos.org\/plosone\/article?id=10.1371\/journal.pone.0002185) is beyond the scope of this notebook, but here it is:\n\n$$ \\lambda = k_{t-1}e^{\\gamma(R_t-1)}$$\n\nwhere $\\gamma$ is the reciprocal of the serial interval ([about 4 days for COVID19](https:\/\/wwwnc.cdc.gov\/eid\/article\/26\/6\/20-0357_article)). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$.\n\n$$ \\lambda = k_{t-1}e^{\\gamma(R_t-1)}$$\n\n$$\\mathcal{L}\\left(R_t|k\\right) = \\frac{\\lambda^k e^{-\\lambda}}{k!}$$\n\n### Evaluating the Likelihood Function\n\nTo contiue our example, let's imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days?","98a5526b":"# Kaggle Boilerplate Below\n\nUseful if you need filenames.  Otherwise ignore.","ef86157e":"Relationship between Onset date and Reporting date"}}