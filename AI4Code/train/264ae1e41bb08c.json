{"cell_type":{"4f9801be":"code","0a5b661f":"code","4932960f":"code","8663cac0":"code","6638d62a":"code","bcb79f9c":"code","0f5fde3c":"code","8c8a1ea1":"code","6c93f054":"code","2fa79481":"code","3a3d5bf1":"code","1d497f47":"code","b2202425":"code","062b620d":"code","987eccc9":"code","f4447dfb":"code","77c0259f":"code","b31bc331":"code","4c93e60d":"code","1902e49a":"code","874c3c43":"code","58c2e0e0":"code","c5974320":"code","b6738d8b":"code","8fb33226":"code","09fae852":"code","4696d1bd":"code","6430d077":"code","544c36dd":"code","6f499d86":"code","32b9ddbc":"code","3f19729d":"code","444824c5":"code","40fdf10b":"code","fac64a61":"code","848ebb7f":"code","09a71536":"code","37a872a3":"code","3994a316":"code","95c50479":"code","7e0ae973":"code","66ddb162":"code","646d709a":"code","1bffc47e":"code","f7f98578":"code","2ff38d12":"code","7b11ba49":"code","1e00ec45":"code","61a735dc":"code","3690c5cb":"code","5ef6b922":"code","52c7a87e":"code","2de4c79b":"code","5df9b2d6":"code","e6918808":"code","7701a1a0":"code","3bfde553":"code","3dd1543b":"code","51667ec5":"code","068b8033":"code","46e61aee":"code","3423633f":"code","deb56a77":"code","13c173e6":"code","7d7e2c92":"code","1071061a":"code","3799757a":"code","3f1b6b72":"code","f56bc8a7":"code","5ed5210b":"code","33dc066e":"code","db8ed0a1":"code","0a608eae":"code","4b794eeb":"code","863e8de6":"code","83870484":"code","9cc9ffee":"code","86c9b1c3":"code","6fac7a54":"code","16244732":"code","003891e8":"code","042680c4":"code","e3d3860d":"code","4853aaa9":"code","661d7755":"code","2fd54333":"code","d544b6e5":"code","3caa7680":"code","6a3804f1":"code","2fd5aeb3":"code","66c5483b":"code","bd6fddcb":"code","d811f37a":"code","d238b5a2":"code","43d8cc57":"code","cf68c242":"code","975efd87":"code","195978c3":"code","a546790a":"code","344f87e0":"code","2f2c938f":"code","6c0307ae":"code","81e66956":"code","bd23d36f":"code","cba9aec0":"code","e4c36195":"code","12017165":"code","19d3becc":"code","990bf2f9":"code","ecc81381":"code","db9312fd":"code","70008847":"code","f41ef87b":"code","42ed8e9f":"code","9c4b4c9c":"code","8238d615":"code","279fa7d7":"code","117cd5fd":"code","f5badb0a":"code","ae75c3cc":"code","1c37ab68":"code","fed91baa":"code","6e9f4ddf":"code","3fd575c3":"code","8061f9bb":"code","2c99d142":"code","bb20636a":"code","54d1f068":"code","2ebe939a":"code","45f2f9c4":"code","439137a0":"code","d10f5e6c":"code","b2d7ac41":"code","813d9eb0":"code","a320fa52":"code","4ee2a8d8":"code","1cee75a2":"code","a368dc53":"code","2b5cae03":"code","d4f7ff2e":"code","40559b0a":"code","19905b11":"code","90341c7e":"code","99f6a731":"code","f4786e9e":"code","08017a49":"code","e4b67e7f":"code","a23e497c":"code","33591c81":"code","3070b5cd":"code","74952071":"code","e6e67476":"code","9ba61ac5":"code","9efd3247":"code","d58f27f2":"code","1090c356":"code","91b49cf0":"code","4ce78580":"code","d68e47e8":"code","6585dc37":"code","861af3b7":"code","d1aa94e4":"code","8aff9ae1":"code","3ce7714c":"code","87daa53c":"code","de5aa9dc":"code","c4a65385":"code","1a2057d0":"code","cf67ca53":"code","fbfdb2cf":"markdown","16c3ac4f":"markdown","9011cc59":"markdown"},"source":{"4f9801be":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","0a5b661f":"import os\nprint(os.listdir(\"..\/input\"))","4932960f":"data=pd.read_excel('..\/input\/UnivData1.xlsx',na_values=[\"\",\" \",\"N\/A\",\"NA\"])","8663cac0":"data","6638d62a":"data.isnull().sum()","bcb79f9c":"data=data.dropna(how='all')","0f5fde3c":"data","8c8a1ea1":"data.columns","6c93f054":"data1=data.drop(['STDNT_MINOR','STDNT_TEST_ENTRANCE1','STDNT_TEST_ENTRANCE2','CORE_COURSE_NAME_5_F',\n       'CORE_COURSE_GRADE_5_F', 'CORE_COURSE_NAME_6_F',\n       'CORE_COURSE_GRADE_6_F','CORE_COURSE_NAME_5_S',\n       'CORE_COURSE_GRADE_5_S','CORE_COURSE_NAME_6_S',\n       'CORE_COURSE_GRADE_6_S','HIGH_SCHL_NAME', 'FATHER_HI_EDU_CD','MOTHER_HI_EDU_CD'], axis=1)     ","2fa79481":"data2=data1.drop(['CORE_COURSE_NAME_3_F',\n       'CORE_COURSE_GRADE_3_F','CORE_COURSE_NAME_3_S',\n       'CORE_COURSE_GRADE_3_S','CORE_COURSE_NAME_4_F',\n       'CORE_COURSE_GRADE_4_F','CORE_COURSE_NAME_4_S',\n       'CORE_COURSE_GRADE_4_S'], axis=1) ","3a3d5bf1":"data2.shape","1d497f47":"data2['STDNT_AGE'].value_counts()","b2202425":"data2['STDNT_TEST_ENTRANCE_COMB'].describe()","062b620d":"data2.STDNT_TEST_ENTRANCE_COMB.plot('hist')","987eccc9":"data2.boxplot(column='STDNT_TEST_ENTRANCE_COMB')","f4447dfb":"data2['STDNT_TEST_ENTRANCE_COMB'].describe()","77c0259f":"data2['STDNT_TEST_ENTRANCE_COMB'].mode()","b31bc331":"data2['STDNT_TEST_ENTRANCE_COMB']=data2['STDNT_TEST_ENTRANCE_COMB'].fillna(950.0)","4c93e60d":"data2['STDNT_TEST_ENTRANCE_COMB'].describe()","1902e49a":"data2['FIRST_TERM'].value_counts()","874c3c43":"data2['FIRST_TERM']=data2['FIRST_TERM'].replace({200508:2005,200608:2006,200708:2007,200808:2008,200908:2009,201008:2010})","58c2e0e0":"data2['FIRST_TERM'].value_counts()","c5974320":"data2['SECOND_TERM'].value_counts()","b6738d8b":"data2['SECOND_TERM']=data2['SECOND_TERM'].replace({200602:2006,200702:2007,200802:2008,200902:2009,201002:2010,201102:2011})","8fb33226":"data2=pd.get_dummies(data2, columns=['HOUSING_STS'])","09fae852":"data2.head(3)","4696d1bd":"data2['DISTANCE_FROM_HOME'].value_counts(dropna=False)","6430d077":"data2['DISTANCE_FROM_HOME']=data2['DISTANCE_FROM_HOME'].fillna(data2['DISTANCE_FROM_HOME'].mean())","544c36dd":"data2['DISTANCE_FROM_HOME'].describe()","6f499d86":"data2['HIGH_SCHL_GPA'].isnull().sum()","32b9ddbc":"data2['HIGH_SCHL_GPA'].describe()","3f19729d":"data2.boxplot(column='HIGH_SCHL_GPA')","444824c5":"data2['HIGH_SCHL_GPA'].mode()","40fdf10b":"data2['HIGH_SCHL_GPA']=data2['HIGH_SCHL_GPA'].fillna(data2['HIGH_SCHL_GPA'].mean())","fac64a61":"data2['FATHER_HI_EDU_DESC'].value_counts(dropna=False)","848ebb7f":"data2['FIRST_TERM_PERF']=data2['FIRST_TERM_EARNED_HRS']\/data2['FIRST_TERM_ATTEMPT_HRS']","09a71536":"data2['SECOND_TERM_PERF']=data2['SECOND_TERM_EARNED_HRS']\/data2['SECOND_TERM_ATTEMPT_HRS']","37a872a3":"data2['SECOND_TERM_PERF'].describe()","3994a316":"data2['SECOND_TERM_PERF'].plot('hist')","95c50479":"data2['SECOND_TERM_PERF']=data2['SECOND_TERM_PERF'].fillna(1.0)","7e0ae973":"data2['SECOND_TERM_PERF'].describe()","66ddb162":"data2['SECOND_TERM_PERF']=data2['SECOND_TERM_PERF'].values[data2['SECOND_TERM_PERF'].values >1.0]=1.0","646d709a":"data2['UNMET_NEED'].head()","1bffc47e":"data2['UNMET_NEED']=pd.to_numeric(data2['UNMET_NEED'],errors='coerce')","f7f98578":"data2['UNMET_NEED']=data2['UNMET_NEED'].fillna(0)","2ff38d12":"data2['UNMET_NEED'].value_counts()","7b11ba49":"data2['UNMET_NEED']=np.where(data2.UNMET_NEED < 0, 0,data2.UNMET_NEED)","1e00ec45":"data2['GROSS_FIN_NEED'].head()","61a735dc":"data2['GROSS_FIN_NEED']=pd.to_numeric(data2['GROSS_FIN_NEED'],errors='coerce')","3690c5cb":"data2['GROSS_FIN_NEED']=data2['GROSS_FIN_NEED'].fillna(0)","5ef6b922":"data2['CORE_COURSE_NAME_1_F'].value_counts(dropna=False)","52c7a87e":"data2['CORE_COURSE_NAME_1_F'].dtypes","2de4c79b":"data2['CORE_COURSE_NAME_1_F']=data2['CORE_COURSE_NAME_1_F'].str.slice(0,4)","5df9b2d6":"data2['CORE_COURSE_NAME_1_F'].head()","e6918808":"data2['CORE_COURSE_NAME_2_F']=data2['CORE_COURSE_NAME_2_F'].str.slice(0,4)","7701a1a0":"data2['CORE_COURSE_NAME_1_S']=data2['CORE_COURSE_NAME_1_S'].str.slice(0,4)","3bfde553":"data2['CORE_COURSE_NAME_2_S']=data2['CORE_COURSE_NAME_2_S'].str.slice(0,4)","3dd1543b":"data2=pd.get_dummies(data2, columns=['CORE_COURSE_NAME_1_F','CORE_COURSE_NAME_2_F','CORE_COURSE_NAME_1_S','CORE_COURSE_NAME_2_S'])","51667ec5":"data2.shape","068b8033":"data2['FATHER_HI_EDU_DESC'].value_counts(dropna=False)","46e61aee":"data2['MOTHER_HI_EDU_DESC'].value_counts(dropna=False)","3423633f":"data2['DISTANCE_FROM_HOME'].value_counts(dropna=False)","deb56a77":"data2['DISTANCE_FROM_HOME'].describe()","13c173e6":"data2['DISTANCE_FROM_HOME'].mode()","7d7e2c92":"data2['DISTANCE_FROM_HOME']=data2['DISTANCE_FROM_HOME'].fillna(data2['DISTANCE_FROM_HOME'].mean())","1071061a":"data2.isnull().sum()","3799757a":"data2['CORE_COURSE_GRADE_2_F']=data2['CORE_COURSE_GRADE_2_F'].fillna(value=\"NG\")","3f1b6b72":"data2[['CORE_COURSE_GRADE_1_S','CORE_COURSE_GRADE_2_S']]=data2[['CORE_COURSE_GRADE_1_S','CORE_COURSE_GRADE_2_S']].fillna(value=\"NG\")","f56bc8a7":"data2.isnull().sum()","5ed5210b":"data2['RETURNED_2ND_YR'].head()","33dc066e":"def d(x):\n    if x==0.0:\n        return 1.0\n    else:\n        return 0.0","db8ed0a1":"data2['STDNT_ATT']=data2['RETURNED_2ND_YR'].map(d)","0a608eae":"data2['STDNT_ATT'].value_counts()","4b794eeb":"Y=data2['STDNT_ATT']\nX=data2.drop(['STDNT_ATT','RETURNED_2ND_YR','FIRST_TERM_ATTEMPT_HRS','FIRST_TERM_EARNED_HRS','SECOND_TERM_ATTEMPT_HRS','SECOND_TERM_EARNED_HRS','COST_OF_ATTEND','EST_FAM_CONTRIBUTION'],axis=1)","863e8de6":"X.count()","83870484":"X=pd.get_dummies(X)","9cc9ffee":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.30,random_state=200,stratify=Y)","86c9b1c3":"from xgboost import XGBClassifier","6fac7a54":"xgb = XGBClassifier(seed=200)","16244732":"xgb.fit(X_train,Y_train)","003891e8":"Y_pred = xgb.predict(X_test)","042680c4":"from sklearn.metrics import f1_score,accuracy_score,confusion_matrix,classification_report","e3d3860d":"print(f1_score(Y_test,Y_pred))\nprint(accuracy_score(Y_test,Y_pred))\nprint(confusion_matrix(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))","4853aaa9":"class_weight=int(Y_train.value_counts()[0]\/Y_train.value_counts()[1])","661d7755":"class_weight","2fd54333":"xgb = XGBClassifier(learning_rate=0.1,max_depth=3,scale_pos_weight=3,seed=200)","d544b6e5":"xgb.fit(X_train,Y_train)","3caa7680":"Y_pred = xgb.predict(X_test)","6a3804f1":"print(f1_score(Y_test,Y_pred))\nprint(accuracy_score(Y_test,Y_pred))\nprint(confusion_matrix(Y_test,Y_pred))\nprint(classification_report(Y_test,Y_pred))","2fd5aeb3":"from xgboost import plot_importance\nfrom matplotlib import pyplot","66c5483b":"print(xgb.feature_importances_)","bd6fddcb":"plot_importance(xgb)\npyplot.show()","d811f37a":"imp_feat=pd.Series(xgb.feature_importances_,index=X.columns.tolist())\nimp_feat.sort_values(ascending=False)","d238b5a2":"from sklearn.ensemble import RandomForestClassifier\nrfclf = RandomForestClassifier(n_estimators=300,class_weight = {0:1,1:class_weight})","43d8cc57":"rfclf.fit(X_train,Y_train)","cf68c242":"Y_pred = rfclf.predict(X_test)","975efd87":"print(f1_score(Y_test,Y_pred))","195978c3":"param_grid = { \n    'criterion' : ['gini', 'entropy'],\n    'n_estimators': [150,160,170,180],\n    'max_features': ['auto', 'log2'],\n    'max_depth' : [3, 5, 7]    \n}","a546790a":"from sklearn.model_selection import GridSearchCV\n\nrandomForest_CV = GridSearchCV(estimator = rfclf, param_grid = param_grid, cv = 5)\nrandomForest_CV.fit(X_train, Y_train)","344f87e0":"randomForest_CV.best_params_","2f2c938f":"rf_clf = RandomForestClassifier(random_state = 2, criterion = 'entropy', max_depth = 3, max_features = 'auto', n_estimators = 150)\n\nrf_clf.fit(X_train, Y_train)","6c0307ae":"predictions = rf_clf.predict(X_test)","81e66956":"from sklearn.metrics import accuracy_score\n\naccuracy_score(Y_test, predictions) * 100","bd23d36f":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(max_iter=10000, C=50)\nlogreg.fit(X_train, Y_train)","cba9aec0":"print(\"R-Squared for Train set: {:.3f}\".format(logreg.score(X_train, Y_train)))\nprint(\"R-Squared for test set: {:.3f}\" .format(logreg.score(X_test, Y_test)))\n","e4c36195":"from sklearn.tree import DecisionTreeClassifier\n\ndtclf = DecisionTreeClassifier(max_depth = 3).fit(X_train, Y_train)\n\nprint('Accuracy of Decision Tree classifier on training set: {:.2f}'\n     .format(dtclf.score(X_train, Y_train)))\nprint('Accuracy of Decision Tree classifier on test set: {:.2f}'\n     .format(dtclf.score(X_test, Y_test)))","12017165":"from sklearn.svm import LinearSVC\n\nsvmclf = LinearSVC(C=50)\nsvmclf.fit(X_train, Y_train)\n\nprint('Accuracy of Linear SVC classifier on training set: {:.2f}'\n     .format(svmclf.score(X_train, Y_train)))\nprint('Accuracy of Linear SVC classifier on test set: {:.2f}'\n     .format(svmclf.score(X_test, Y_test)))","19d3becc":"from sklearn.ensemble import GradientBoostingRegressor\n\nGB_clf = GradientBoostingRegressor()\nGB_clf.fit(X_train, Y_train)\n\npredicted = GB_clf.predict(X_test)","990bf2f9":"GB_clf.score(X_test, Y_test)","ecc81381":"import xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV","db9312fd":"cv_params = {'max_depth': [3,5,7], 'min_child_weight': [1,3,5]}\nind_params = {'learning_rate': 0.1, 'n_estimators': 1000, 'seed':0, 'subsample': 0.8, 'colsample_bytree': 0.8, \n             'objective': 'binary:logistic'}\noptimized_GBM = GridSearchCV(xgb.XGBClassifier(**ind_params), \n                            cv_params, \n                             scoring = 'accuracy', cv = 5, n_jobs = -1)","70008847":"optimized_GBM.fit(X_train, Y_train)","f41ef87b":"optimized_GBM.cv_results_","42ed8e9f":"cv_params = {'learning_rate': [0.1, 0.01], 'subsample': [0.7,0.8,0.9]}\nind_params = {'n_estimators': 1000, 'seed':0, 'colsample_bytree': 0.8, \n             'objective': 'binary:logistic', 'max_depth': 5, 'min_child_weight': 1}\n\n\noptimized_GBM = GridSearchCV(xgb.XGBClassifier(**ind_params), \n                            cv_params, \n                             scoring = 'accuracy', cv = 5, n_jobs = -1)","9c4b4c9c":"xgdmat = xgb.DMatrix(X_train, Y_train)","8238d615":"our_params = {'eta': 0.01, 'seed':0, 'subsample': 0.9, 'colsample_bytree': 0.8, \n             'objective': 'binary:logistic', 'max_depth':5, 'min_child_weight':1}","279fa7d7":"cv_xgb = xgb.cv(params = our_params, dtrain = xgdmat, num_boost_round = 3000, nfold = 5,\n                metrics = ['error'], # Make sure you enter metrics inside a list or you may encounter issues!\n                early_stopping_rounds = 100)","117cd5fd":"cv_xgb.tail(5)","f5badb0a":"our_params = {'eta': 0.01, 'seed':0, 'subsample': 0.9, 'colsample_bytree': 0.8, \n             'objective': 'binary:logistic', 'max_depth':5, 'min_child_weight':1} \n\nfinal_gb = xgb.train(our_params, xgdmat, num_boost_round = 44)","ae75c3cc":"testdmat = xgb.DMatrix(X_test)","1c37ab68":"from sklearn.metrics import accuracy_score\ny_pred = final_gb.predict(testdmat) # Predict using our testdmat\ny_pred","fed91baa":"y_pred[y_pred > 0.5] = 1\ny_pred[y_pred <= 0.5] = 0\ny_pred","6e9f4ddf":"accuracy_score(y_pred, Y_test), 1-accuracy_score(y_pred, Y_test)","3fd575c3":"optimized_GBM.cv_results_","8061f9bb":"import xgboost as xgb\n\nxgbr = xgb.XGBRegressor(learning_rate=0.01,max_depth=5,objective='binary:logistic',subsample=0.9,colsample_bytree=0.8, n_jobs=-1)\nxgbr.fit(X_train, Y_train)","2c99d142":"score = xgbr.score(X_train, Y_train)   \nprint(\"Training score: \", score) ","bb20636a":"from sklearn.model_selection import cross_val_score, KFold\nscores = cross_val_score(xgbr, X_train, Y_train, cv=5)\nprint(\"Mean cross-validation score: %.2f\" % scores.mean())","54d1f068":"kfold = KFold(n_splits=10, shuffle=True)\nkf_cv_scores = cross_val_score(xgbr, X_train, Y_train, cv=kfold )\nprint(\"K-fold CV average score: %.2f\" % kf_cv_scores.mean())","2ebe939a":"from sklearn.metrics import mean_squared_error\nypred = xgbr.predict(X_test)\nmse = mean_squared_error(Y_test, ypred)\nprint(\"MSE: %.2f\" % mse)\nprint(\"RMSE: %.2f\" % (mse*(1\/2.0)))","45f2f9c4":"import xgboost as xgb\nfrom sklearn import metrics\n\ndef auc(m, train, test): \n    return (metrics.roc_auc_score(Y_train,m.predict_proba(train)[:,1]),\n                            metrics.roc_auc_score(Y_test,m.predict_proba(test)[:,1]))\n\n# Parameter Tuning\nmodel = xgb.XGBClassifier()\nparam_dist = {\"max_depth\": [1,3,5],\n              \"min_child_weight\" : [1,3,6],\n              \"n_estimators\": [200],\n              \"learning_rate\": [0.05, 0.1,0.16],}\ngrid_search = GridSearchCV(model, param_grid=param_dist, cv = 5, \n                                   verbose=10, n_jobs=-1)\ngrid_search.fit(X_train, Y_train)\n\ngrid_search.best_estimator_\n\nmodel = xgb.XGBClassifier(max_depth=5, min_child_weight=1,  n_estimators=200,\\\n                          n_jobs=-1 , verbose=1,learning_rate=0.16)\nmodel.fit(X_train,Y_train)\n\nauc(model, X_train, X_test)","439137a0":"from sklearn.ensemble import RandomForestClassifier","d10f5e6c":"clf=RandomForestClassifier(n_estimators=100,oob_score=True,n_jobs=-1,random_state=200)","b2d7ac41":"clf.fit(X_train,Y_train)","813d9eb0":"clf.oob_score_","a320fa52":"for w in range(50,325,25):\n    clf=RandomForestClassifier(n_estimators=w,oob_score=True,n_jobs=-1,random_state=200)\n    clf.fit(X_train,Y_train)\n    oob=clf.oob_score_\n    print('For n_estimators = '+str(w))\n    print('OOB score is '+str(oob))\n#     print('************************')","4ee2a8d8":"for w in range(165,175,1):\n    clf=RandomForestClassifier(n_estimators=w,oob_score=True,n_jobs=-1,random_state=200)\n    clf.fit(X_train,Y_train)\n    oob=clf.oob_score_\n    print('For n_estimators = '+str(w))\n    print('OOB score is '+str(oob))\n    print('************************')","1cee75a2":"clf=RandomForestClassifier(n_estimators=173,oob_score=True,n_jobs=-1,random_state=200)","a368dc53":"clf.fit(X_train,Y_train)","2b5cae03":"predictions = clf.predict(X_test)","d4f7ff2e":"clf.oob_score_","40559b0a":"predictions = clf.predict(X_test)","19905b11":"from sklearn.metrics import accuracy_score\n\naccuracy_score(Y_test, predictions) * 100","90341c7e":"clf.feature_importances_","99f6a731":"imp_feat=pd.Series(clf.feature_importances_,index=X.columns.tolist())\nimp_feat.sort_values(ascending=False)","f4786e9e":"X_train.rename(columns={'MOTHER_HI_EDU_DESC_High School':'MOTHER_High_School'},inplace=True)\nX_test.rename(columns={'MOTHER_HI_EDU_DESC_High School':'MOTHER_High_School'},inplace=True)\nX_train.rename(columns={'FATHER_HI_EDU_DESC_High School':'FATHER_High_School'},inplace=True)\nX_test.rename(columns={'FATHER_HI_EDU_DESC_High School':'FATHER_High_School'},inplace=True)\nX_train.rename(columns={'MOTHER_HI_EDU_DESC_College\/Beyond':'MOTHER_College'},inplace=True)\nX_test.rename(columns={'MOTHER_HI_EDU_DESC_College\/Beyond':'MOTHER_College'},inplace=True)\nX_train.rename(columns={'FATHER_HI_EDU_DESC_College\/Beyond':'FATHER_College'},inplace=True)\nX_test.rename(columns={'FATHER_HI_EDU_DESC_College\/Beyond':'FATHER_College'},inplace=True)\nX_train.rename(columns={'STDNT_BACKGROUND_BGD 1':'STDNT_BGD1'},inplace=True)\nX_test.rename(columns={'STDNT_BACKGROUND_BGD 1':'STDNT_BGD1'},inplace=True)\nX_train.rename(columns={'HOUSING_STS_On Campus':'On_Campus'},inplace=True)\nX_test.rename(columns={'HOUSING_STS_On Campus':'On_Campus'},inplace=True)\nX_train.rename(columns={'HOUSING_STS_Off Campus':'Off_Campus'},inplace=True)\nX_test.rename(columns={'HOUSING_STS_Off Campus':'Off_Campus'},inplace=True)","08017a49":"import statsmodels.formula.api as smf\nimport statsmodels.api as sm","e4b67e7f":"model1=smf.glm(\"Y_train~+UNMET_NEED+HIGH_SCHL_GPA+STDNT_TEST_ENTRANCE_COMB+DISTANCE_FROM_HOME+FIRST_TERM_PERF+STDNT_AGE+C(CORE_COURSE_GRADE_1_S_B)+C(CORE_COURSE_GRADE_2_S_B)+C(CORE_COURSE_GRADE_1_S_C)+C(CORE_COURSE_GRADE_1_S_F)+C(MOTHER_College)+C(FATHER_College)+C(CORE_COURSE_GRADE_1_F_F)+C(CORE_COURSE_GRADE_2_F_F)+C(On_Campus)+C(CORE_COURSE_GRADE_1_F_C)+C(CORE_COURSE_GRADE_3_F_B)+C(CORE_COURSE_GRADE_2_S_C)+C(STDNT_GENDER_F)+C(STDNT_GENDER_M)+C(MOTHER_High_School)+C(FATHER_High_School)\",data=X_train,family=sm.families.Binomial()).fit()","a23e497c":"print(model1.summary())","33591c81":"model6=smf.glm(\"Y_train~UNMET_NEED+On_Campus+C(CORE_COURSE_GRADE_1_S_NG)+C(CORE_COURSE_GRADE_1_F_F)+C(CORE_COURSE_GRADE_2_F_F)+HIGH_SCHL_GPA+C(STDNT_GENDER_F)\",data=X_train,family=sm.families.Binomial()).fit()","3070b5cd":"print(model6.summary())","74952071":"## Let's check confusion matrix and AUC\nimport sklearn.metrics as metrics","e6e67476":"#actual vs predicted in the test data\ny_true=Y_test\ny_pred=model6.predict(X_test)","9ba61ac5":"predictions = clf.predict(X_test)","9efd3247":"y_pred.head()","d58f27f2":"y_true=Y_test\ny_pred=model6.predict(X_test).map(lambda x:1 if x>0.5 else 0)\nmetrics.confusion_matrix(y_true,y_pred)","1090c356":"## ROC curve\ny_score=model6.predict(X_test)\nfpr,tpr,thresholds=metrics.roc_curve(y_true,y_score)\nx,y=np.arange(0,1.1,0.1),np.arange(0,1.1,0.1)","91b49cf0":"plt.plot(fpr,tpr,\"-\")\nplt.plot(x,y,'b--')","4ce78580":"## AUC\nmetrics.roc_auc_score(y_true,y_score)","d68e47e8":"X_test['prob']=model6.predict(X_test)","6585dc37":"X_test['prob'].head()","861af3b7":"X_test['prob_deciles']=pd.qcut(X_test['prob'],q=10)","d1aa94e4":"X_test.head()","8aff9ae1":"STDNT_ATTRN=Y_test\nX_test=pd.concat([X_test,STDNT_ATTRN], axis=1)\nX_test","3ce7714c":"gains=X_test.groupby(\"prob_deciles\",as_index=False)['STDNT_ATT'].agg(['sum','count']).reset_index().sort_values(\"prob_deciles\",\n                 ascending=False)","87daa53c":"gains.columns=[\"Deciles\",\"TotalEvents\",\"NumberObs\"]","de5aa9dc":"gains[\"PercEvents\"]=gains['TotalEvents']\/gains['TotalEvents'].sum()","c4a65385":"gains[\"CumulativeEvents\"]=gains.PercEvents.cumsum()","1a2057d0":"gains","cf67ca53":"STDNT_ATTRIBUTES_TO_REVIEW=X_test.sort_values(\"prob\",ascending=False)[['STUDENT IDENTIFIER','prob','STDNT_GENDER_F','STDNT_GENDER_M','HIGH_SCHL_GPA','On_Campus','CORE_COURSE_GRADE_1_F_F','CORE_COURSE_GRADE_2_F_F','UNMET_NEED']].head(60)\nSTDNT_ATTRIBUTES_TO_REVIEW","fbfdb2cf":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.","16c3ac4f":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","9011cc59":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)"}}