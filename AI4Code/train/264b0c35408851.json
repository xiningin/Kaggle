{"cell_type":{"a1545c1f":"code","de55b0ab":"code","1160830b":"code","ed6a87aa":"code","2bdaf78e":"code","48f9233d":"code","f9f50660":"code","fc474aad":"code","a01d0bc5":"code","07a9c53e":"code","0491e77f":"code","17e1f18f":"code","bbb2e475":"code","8ba09c70":"code","f15fd38c":"code","d902c250":"markdown"},"source":{"a1545c1f":"import os\n\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf","de55b0ab":"def auto_select_accelerator():\n    \"\"\"\n    Reference: \n        * https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n        * https:\/\/www.kaggle.com\/xhlulu\/ranzcr-efficientnet-tpu-training\n    \"\"\"\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas\")\n    \n    return strategy\n\n\ndef build_decoder(with_labels=True, target_size=(256, 256), ext='jpg'):\n    def decode(path):\n        file_bytes = tf.io.read_file(path)\n        if ext == 'png':\n            img = tf.image.decode_png(file_bytes, channels=3)\n        elif ext in ['jpg', 'jpeg']:\n            img = tf.image.decode_jpeg(file_bytes, channels=3)\n        else:\n            raise ValueError(\"Image extension not supported\")\n\n        img = tf.cast(img, tf.float32) \/ 255.0\n        img = tf.image.resize(img, target_size)\n\n        return img\n    \n    def decode_with_labels(path, label):\n        return decode(path), label\n    \n    return decode_with_labels if with_labels else decode\n\n\ndef build_augmenter(with_labels=True):\n    def augment(img):\n        img = tf.image.random_flip_left_right(img)\n        img = tf.image.random_flip_up_down(img)\n        return img\n    \n    def augment_with_labels(img, label):\n        return augment(img), label\n    \n    return augment_with_labels if with_labels else augment\n\n\ndef build_dataset(paths, labels=None, bsize=32, cache=True,\n                  decode_fn=None, augment_fn=None,\n                  augment=True, repeat=True, shuffle=1024, \n                  cache_dir=\"\"):\n    if cache_dir != \"\" and cache is True:\n        os.makedirs(cache_dir, exist_ok=True)\n    \n    if decode_fn is None:\n        decode_fn = build_decoder(labels is not None)\n    \n    if augment_fn is None:\n        augment_fn = build_augmenter(labels is not None)\n    \n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = paths if labels is None else (paths, labels)\n    \n    dset = tf.data.Dataset.from_tensor_slices(slices)\n    dset = dset.map(decode_fn, num_parallel_calls=AUTO)\n    dset = dset.cache(cache_dir) if cache else dset\n    dset = dset.map(augment_fn, num_parallel_calls=AUTO) if augment else dset\n    dset = dset.repeat() if repeat else dset\n    dset = dset.shuffle(shuffle) if shuffle else dset\n    dset = dset.batch(bsize).prefetch(AUTO)\n    \n    return dset","1160830b":"# COMPETITION_NAME = \"ranzcr-clip-catheter-line-classification\"\n# strategy = auto_select_accelerator()\n# BATCH_SIZE = strategy.num_replicas_in_sync * 16\n# GCS_DS_PATH = KaggleDatasets().get_gcs_path(COMPETITION_NAME)","ed6a87aa":"# load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\n# df = pd.read_csv(load_dir + 'train.csv')\n\n# # paths = load_dir + \"train\/\" + df['StudyInstanceUID'] + '.jpg'\n# paths = GCS_DS_PATH + \"\/train\/\" + df['StudyInstanceUID'] + '.jpg'\n\n# sub_df = pd.read_csv(load_dir + 'sample_submission.csv')\n\n# # test_paths = load_dir + \"test\/\" + sub_df['StudyInstanceUID'] + '.jpg'\n# test_paths = GCS_DS_PATH + \"\/test\/\" + sub_df['StudyInstanceUID'] + '.jpg'\n\n# # Get the multi-labels\n# label_cols = sub_df.columns[1:]\n# labels = df[label_cols].values\n\n# n_labels = labels.shape[1]","2bdaf78e":"# (train_paths, valid_paths, train_labels, valid_labels) = train_test_split(paths, labels, test_size=0.1, random_state=42)","48f9233d":"# # Build the tensorflow datasets\n# IMSIZES = (224, 240, 260, 300, 380, 456, 528, 600)\n# im_size = IMSIZES[7]\n\n# decoder = build_decoder(with_labels=True, target_size=(im_size, im_size))\n# test_decoder = build_decoder(with_labels=False, target_size=(im_size, im_size))\n\n# train_dataset = build_dataset(\n#     train_paths, train_labels, bsize=BATCH_SIZE, decode_fn=decoder\n# )\n\n# valid_dataset = build_dataset(\n#     valid_paths, valid_labels, bsize=BATCH_SIZE, decode_fn=decoder,\n#     repeat=False, shuffle=False, augment=False\n# )\n\n# test_dataset = build_dataset(\n#     test_paths, cache=False, bsize=BATCH_SIZE, decode_fn=test_decoder,\n#     repeat=False, shuffle=False, augment=False\n# )","f9f50660":"# from tensorflow.keras.optimizers import RMSprop, Adam, SGD\n# from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n# from keras.models import Sequential\n# from tensorflow.keras.layers import GlobalAveragePooling2D, Flatten, Dense, Dropout, BatchNormalization\n\n# with strategy.scope():\n#     base = tf.keras.applications.EfficientNetB7(weights='imagenet',\n#                                             include_top=False, \n#                                             input_shape=(im_size, im_size, 3),\n#                                             drop_connect_rate=0.5)\n\n#     model = Sequential()\n\n#     model.add(base)\n\n#     model.add(GlobalAveragePooling2D())\n#     model.add(Dense(n_labels, activation = 'sigmoid'))\n\n#     model.compile(loss='binary_crossentropy', optimizer='adam', \n#                   metrics= [tf.keras.metrics.AUC(multi_label=True)])\n#     model.summary()","fc474aad":"# from tensorflow.keras.optimizers import RMSprop, Adam, SGD\n# from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\n# checkpoint = ModelCheckpoint(\"bestmodel_tpu.h5\",\n#                                 save_best_only=True,\n#                                 monitor='val_auc',\n#                                 mode='max',\n#                                 verbose=1)\n\n# reduce_lr = ReduceLROnPlateau(monitor='val_auc',\n#                               factor=0.2,\n#                               patience=3,\n#                               min_lr=1e-6,\n#                               mode='max',\n#                               verbose=1)","a01d0bc5":"# steps_per_epoch = train_paths.shape[0] \/\/ BATCH_SIZE\n# EPOCHS = 10","07a9c53e":"# history = model.fit(\n#             train_dataset, \n#             epochs=10,\n#             verbose=1,\n#             callbacks=[checkpoint, reduce_lr],\n#             steps_per_epoch=steps_per_epoch,\n#             validation_data=valid_dataset)\n\n# model.save('model_tpu.h5')","0491e77f":"# COMPETITION_NAME = \"ranzcr-clip-catheter-line-classification\"\n# strategy = auto_select_accelerator()\n# BATCH_SIZE = strategy.num_replicas_in_sync * 16","17e1f18f":"# IMSIZE = (224, 240, 260, 300, 380, 456, 528, 600)\n\n# load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\n# sub_df = pd.read_csv(load_dir + 'sample_submission.csv')\n# test_paths = load_dir + \"test\/\" + sub_df['StudyInstanceUID'] + '.jpg'\n\n# # Get the multi-labels\n# label_cols = sub_df.columns[1:]\n\n# test_decoder = build_decoder(with_labels=False, target_size=(IMSIZE[7], IMSIZE[7]))\n# dtest = build_dataset(\n#     test_paths, bsize=BATCH_SIZE, repeat=False, \n#     shuffle=False, augment=False, cache=False,\n#     decode_fn=test_decoder\n# )","bbb2e475":"# with strategy.scope():\n#     model = tf.keras.models.load_model('..\/input\/modeltpu2\/bestmodel_tpu (2).h5')","8ba09c70":"# sub_df[label_cols] = model_p.predict(dtest, verbose=1)\n# sub_df.to_csv('submission.csv', index=False)\n\n# sub_df","f15fd38c":"import cv2\n\nmodel = tf.keras.models.load_model('..\/input\/modeltpu2\/bestmodel_tpu (2).h5')\n\nsub = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv')\ntest_dir = '..\/input\/ranzcr-clip-catheter-line-classification\/test\/'\n\nBS = 16\nIMG_SIZE = 600\nSIZE = (IMG_SIZE,IMG_SIZE)\n\nclasses = ['ETT - Abnormal',\n         'ETT - Borderline',\n         'ETT - Normal',\n         'NGT - Abnormal',\n         'NGT - Borderline',\n         'NGT - Incompletely Imaged',\n         'NGT - Normal',\n         'CVC - Abnormal',\n         'CVC - Borderline',\n         'CVC - Normal',\n         'Swan Ganz Catheter Present']\n\nresults = []\n\nfor img_name in sub['StudyInstanceUID']:\n    img = cv2.imread(test_dir + img_name + '.jpg')\n    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n    img = np.array(img)\n    img = img \/ 255.0\n    img = img.reshape(1, IMG_SIZE, IMG_SIZE, 3)\n    prediction = model.predict(img)\n    prediction = prediction[0]\n    results.append(prediction)\n    \npred_df = pd.DataFrame(columns=classes,data=results, index=sub.index)\npred_df = pd.concat([sub['StudyInstanceUID'],pred_df],axis=1)\npred_df.to_csv('submission.csv',index=False)","d902c250":"TRAIN"}}