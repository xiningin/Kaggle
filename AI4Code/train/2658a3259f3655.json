{"cell_type":{"28bcb8e4":"code","dc94d231":"code","e8156c09":"code","8461e994":"code","49c1c655":"code","a14c6c3e":"code","8642f5f6":"code","5bffcaae":"code","30d5fb86":"code","90288102":"code","5b4cc0cc":"code","cd92e772":"code","931d425e":"code","bf5d79af":"code","f0a04863":"code","94547eff":"code","ad26ecfd":"code","fbaa6909":"code","85e56474":"code","0fb2a0ac":"markdown","f222a93e":"markdown","00b513fa":"markdown","d29e7391":"markdown","f94a3aea":"markdown","c57c123a":"markdown","a27ab21a":"markdown","40c03e8b":"markdown","a7d63f84":"markdown","d769c2fd":"markdown","f89c21a3":"markdown","ae6e2e59":"markdown","3584523b":"markdown","4326a046":"markdown"},"source":{"28bcb8e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc94d231":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\nimport plotly.graph_objs as go\nimport plotly as py\npy.offline.init_notebook_mode(connected = True)\nfrom yellowbrick.cluster import KElbowVisualizer, SilhouetteVisualizer\nfrom sklearn.metrics import silhouette_score","e8156c09":"df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\nprint(df.shape)\ndf.head()","8461e994":"df.info()","49c1c655":"g = sns.PairGrid(df[['Gender', 'Age', 'Annual Income (k$)','Spending Score (1-100)']], hue=\"Gender\", height=3, aspect = 1.7, palette= 'Set1') \ng.map_upper(sns.scatterplot) \ng.map_lower(sns.regplot)\ng.map_diag(sns.kdeplot) \n\nfor ax in g.axes.flat: \n    plt.setp(ax.get_xticklabels(), rotation=45) \ng.add_legend() \ng.set(alpha=0.5);","a14c6c3e":"g= sns.FacetGrid(df, col=\"Gender\", height=5) \ng.map(sns.regplot, \"Age\", \"Annual Income (k$)\");","8642f5f6":"g= sns.FacetGrid(df, col=\"Gender\", height=5) \ng.map(sns.regplot, \"Age\", \"Spending Score (1-100)\");","5bffcaae":"data = df.drop(columns=(['CustomerID', 'Gender']))","30d5fb86":"data.head()","90288102":"plt.figure(figsize=(8,6))\n\nsns.scatterplot(data=data, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\");","5b4cc0cc":"# We would plot each group by different no.cluster\ndef plot_(max_cluster, df):\n    \n    plt.figure(figsize=(15,15))\n    for i in range(1,max_cluster+1):\n        # Fit data\n        k = KMeans(n_clusters=i, init = 'random', random_state=0)\n        k.fit(df)\n        k.predict(df)\n        \n        # Create new column\n        df['label'] = k.labels_+1\n#         df['center'] = k.cluster_centers_\n\n        # Visualize scatter plot\n        plt.subplot(3,3, i)\n        plt.scatter(x = k.cluster_centers_[: , 1] , y =  k.cluster_centers_[: , 2] , s = 300 , c = 'orange' , alpha = 0.5)\n\n        sns.scatterplot(data=df, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", hue=\"label\", palette= 'Set1')\n        \nplot_(9,data)","cd92e772":"# Using number of cluster  to 10 to loop and visualize elbow plot\n\ninertia = []\nfor i in range(2,11):\n    \n    # intialise kmeans\n    k = KMeans(n_clusters=i, max_iter=100, random_state=0)\n    k.fit(data)\n    \n    inertia.append(k.inertia_)\n    \n    cluster_labels = k.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(data, cluster_labels)\n    print(\"For n_clusters={}, the silhouette score is {:.4f}\".format(i, silhouette_avg))\n\n# Visualize elbow plot and choose the no. of cluster that make a conner or line in this case we choose 5 group.\nplt.figure(figsize=(12,6))\nsns.lineplot(x=[i for i in range(2,11)], y=inertia)\nplt.scatter(5,inertia[3], s = 50, c = 'red', marker='D')\nplt.title('The Elbow Method')\nplt.xlabel('No. of Clusters')\nplt.ylabel('Inertia');\nplt.show()","931d425e":"n_clusters = 5\n\nk = KMeans(n_clusters, init = 'random', random_state=0)\n\nvisualizer = SilhouetteVisualizer(k, colors='yellowbrick',)\nvisualizer.fit(data)  \nvisualizer.show()\nprint(\"For n_clusters={}, the silhouette score is {:.4f}\".format(n_clusters, visualizer.silhouette_score_))","bf5d79af":"label = k.fit_predict(data)\n\n#Assign label to df\ndf['label'] = label+1\ndf.head(10)","f0a04863":"plt.figure(figsize=(8,6))\nsns.color_palette(\"pastel\")\nsns.scatterplot(data=data, x=\"Age\", y=\"Spending Score (1-100)\", hue ='label', palette= 'Set1');","94547eff":"sns.pairplot(df, hue=\"label\", palette= 'Set1');","ad26ecfd":"sns.scatterplot(x=\"Age\", y=\"Spending Score (1-100)\", hue=\"label\", data=data, palette= 'Set1');","fbaa6909":"k = KMeans(n_clusters=5, init = 'random', random_state=0)\nk.fit_predict(data)\n\ndata['label'] = k.labels_\n# data['center'] = k.cluster_centers_","85e56474":"trace1 = go.Scatter3d(\n    x= data['Age'],\n    y= data['Spending Score (1-100)'],\n    z= data['Annual Income (k$)'],\n    mode='markers',\n    marker=dict(\n        color = data['label'], \n        size= 5,\n        line=dict(color= data['label'],width= 12),\n        opacity=0.7\n     )\n)\n\ndata_ = [trace1]\n\nlayout = go.Layout(\n    title= 'K Mean Clustering',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n        )\n)\nfig = go.Figure(data=data_, layout=layout)\n# iplot(fig)\npy.offline.iplot(fig)","0fb2a0ac":"K-Means Clustering is \"Unsupervised Learning\" which is one of the simple and popular algorithm in Machine Learning. (Unsupervised algorithms using only input vectors without output\/label feature.)\n\nK-Means algorithms is using group similar data points together.\n1. First randomly select centroids following K (number of cluster which we had specificed).\n2. Discover underlying patterns by calculations to optimize the positions of the centroids use assing points to its nearest cluster.\n3. The position of centroids will be updated by the mean squared distance between centroids and data points.\n4. Repeated above steps until the \n\nCluster refers to a collection of data points aggregated together because of certain similarities. \n\nEvery data point is allocated to each of the clusters through reducing the in-cluster sum of squares.\n\nK-means Overview\nBefore diving into the dataset, let us briefly discuss how k-means works:\nThe process begins with k centroids initialised at random.\nThese centroids are used to assign points to its nearest cluster.\nThe mean of all points within the cluster is then used to update the position of the centroids.\nThe above steps are repeated until the values of the centroids stabilise.","f222a93e":"# Explore Data","00b513fa":"* **We can see pattern of Spending Score (1-100) and Annual Income (k$)**","d29e7391":"**Displayed data on a two-dimensional space Annual Income and Spending Score.**","f94a3aea":"**According to the figure chart above \"Gender\" is not relate to the pattern we would not using \"Gender\" in clustering.** \n\n**So far we are going to drop columns 'CustomerID' and 'Gender'**","c57c123a":"We consider to choose 5 groups and define each group to\n1. Low Annual Income Low Spending Score\n2. Low Annual Income High Spending Score\n3. Middle Annual Income Middle Spending Score\n3. High Annual Income Low Spending Score\n4. High Annual Income High Spending Score\n\nactually number of K(cluster group) depend on each project or strategy we focus on such as marketing campaign, business objective or policy.","a27ab21a":"* **Dataset has 200 rows and 5 columns which are CustomerID, Gender, Age, Annual Income (k$) and Spending Score (1-100)**\n* **Dataset has no missing value**","40c03e8b":"**According figure the optimal number of cluster should be around 5 - 6 groups.** \n\n**For more information we will use Elbow methods to determine this optimal value of k.**\n\n\n**Now we use Scikit-Learn KMeans and Elbow methods to determine this optimal value of k.**","a7d63f84":"**In this case we choose K = 5**\n\nWe use Silhouette Score to decide the number of clusters which is compute the mean Silhouette Coefficient of all samples. The best value is 1 and the worst value is -1. Values near 0 indicate overlapping clusters. Negative values generally indicate that a sample has been assigned to the wrong cluster, as a different cluster is more similar.\n\nThe number of cluster would represented by the size of graph, If there are too many or too few clusters the size will display narrower than others.","d769c2fd":"**Male has slightly lower annual income than female.**","f89c21a3":"**Both of male and female are lower spending score when higher age.**","ae6e2e59":"**First we will visualize the overall of data to find pattern between features**","3584523b":"# Load Dataset","4326a046":"# Introduction"}}