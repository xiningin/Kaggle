{"cell_type":{"2685b1ce":"code","b3696f27":"code","b0c3e6f3":"code","e251bf2d":"code","6f0d527d":"code","5721d6a5":"code","2c1dfff2":"code","3a1d6013":"code","2ab0b915":"code","68b86e73":"code","f970b716":"code","caa66b60":"code","add008f8":"code","d035975a":"code","9de8c479":"code","1abfb8c3":"code","5fe4fb45":"markdown","725648ff":"markdown","b70adaa2":"markdown","333687a5":"markdown","a9f01578":"markdown","11ff62ba":"markdown"},"source":{"2685b1ce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b3696f27":"import cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","b0c3e6f3":"#loading the test image\nimage = cv2.imread(\"\/kaggle\/input\/facedetect\/family.png\")","e251bf2d":"#converting to grayscale\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)","6f0d527d":"#initiliaze the face recognizer (dafault face haar cascade)\nface_cascade = cv2.CascadeClassifier('\/kaggle\/input\/facedetect\/haarcascade_frontalface_default.xml')","5721d6a5":"#detect all faces in the image\nfaces = face_cascade.detectMultiScale(image_gray,\n                                      scaleFactor=1.3,\n                                      minNeighbors=3,\n                                      minSize=(10, 10))","2c1dfff2":"#print no of faces detected\nprint(len(faces))","3a1d6013":"image_list = []\nfor x,y, width,height in faces:\n    cv2.rectangle(image, (x,y),(x+width,y+height), color=(255,0,0), thickness=2)\n    roi_color = image[y:y+height,x:x+width]\n    cv2.imwrite(str(width)+str(height)+'_face.jpg',roi_color)\n    image_list.append(str(width)+str(height)+'_face.jpg')","2ab0b915":"#save the image with rectangles\ncv2.imwrite('box.jpg',image)","68b86e73":"#from pylab import rcParams\n#rcParams['figure.figsize'] = 5, 5","f970b716":"original_image = mpimg.imread('\/kaggle\/input\/facedetect\/family.png')\nplt.imshow(original_image)","caa66b60":"box_image = mpimg.imread('box.jpg')\nplt.imshow(box_image)","add008f8":"print(image_list)","d035975a":"extract_image1 = mpimg.imread('133133_face.jpg')\nplt.imshow(extract_image1)","9de8c479":"extract_image2 = mpimg.imread('139139_face.jpg')\nplt.imshow(extract_image2)","1abfb8c3":"extract_image3 = mpimg.imread('176176_face.jpg')\nplt.imshow(extract_image3)","5fe4fb45":"Before we detect faces in the image, we will first need to convert the image to grayscale, \nthat is because the function we gonna use to detect faces expects a grayscale image","725648ff":"Rectangle_image","b70adaa2":"**VISIT MENTION URL FOR DETAILED EXPLANATION**\nhttps:\/\/www.thepythoncode.com\/article\/detect-faces-opencv-python\nhttps:\/\/becominghuman.ai\/face-detection-using-opencv-with-haar-cascade-classifiers-941dbb25177","333687a5":"Extracted Face","a9f01578":"Original Image","11ff62ba":"detectMultiScale() function takes an image as parameter and detects objects of different sizes as a list of rectangles, let's draw these rectangles in the image:"}}