{"cell_type":{"7932e942":"code","08f2a275":"code","de0c84dd":"code","ffa57023":"code","3e17ca0e":"code","d44aef02":"code","27a5ff1f":"code","1e691701":"code","4698ba2c":"code","b1f20b23":"code","7148368a":"code","74a00b0c":"code","479f0369":"code","d014a375":"code","97ebabca":"code","f821240a":"code","4d845eb3":"code","cfc51427":"code","6b685502":"code","49409fae":"code","af3ac449":"code","daad6651":"code","1eb58cee":"code","60852a23":"code","eb1800a8":"code","78e7a8dc":"code","8c4302a9":"code","0a4452de":"code","ccdc2dc0":"code","989b74fe":"code","2f29c19c":"code","88636186":"code","4b9afb6f":"code","5e153e65":"code","1b4f55bf":"code","8957438e":"code","5e932197":"code","9fdf9e1f":"code","e4846824":"code","bb40e61f":"markdown","9d968c4d":"markdown","7434ec29":"markdown","ea5e44fb":"markdown","6b83dd21":"markdown","dd49ab14":"markdown","b88d1a74":"markdown","eb49a872":"markdown","e4036dfa":"markdown","c4a7f7b7":"markdown","efd29987":"markdown","3e370ac9":"markdown","03a80216":"markdown","9ce4c87c":"markdown","aabd3c5b":"markdown","590d98d5":"markdown","da9162d6":"markdown","8e0a7d37":"markdown","5406b7a6":"markdown","05a7e721":"markdown","f9f3e883":"markdown","03a8ab38":"markdown","840b13f8":"markdown","866067dd":"markdown","84204254":"markdown","c5ab4753":"markdown","7e209448":"markdown","60f6e895":"markdown","d8872a9d":"markdown","a5d2f501":"markdown","bd243862":"markdown","c1b78663":"markdown","5fd44b77":"markdown","36241035":"markdown","814f5792":"markdown"},"source":{"7932e942":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08f2a275":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nimport os\nimport random\nfrom shutil import copyfile","de0c84dd":"train_dir = '\/kaggle\/input\/train\/'\ntest_dir = '\/kaggle\/input\/test\/'\ntrain_csv = pd.read_csv(r'\/kaggle\/input\/train.csv')\ntest_csv = pd.read_csv(r'\/kaggle\/input\/test.csv')","ffa57023":"train_csv.head()","3e17ca0e":"os.mkdir(r'\/kaggle\/working\/identify-dance-form')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/manipuri')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/manipuri')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/manipuri')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/bharatanatyam')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/bharatanatyam')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/bharatanatyam')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/odissi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/odissi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/odissi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/kathakali')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/kathakali')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/kathakali')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/kathak')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/kathak')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/kathak')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/sattriya')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/sattriya')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/sattriya')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/kuchipudi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/kuchipudi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/kuchipudi')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/training\/mohiniyattam')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/testing\/mohiniyattam')\nos.mkdir(r'\/kaggle\/working\/identify-dance-form\/source\/mohiniyattam')\nos.mkdir('\/kaggle\/working\/identify-dance-form\/tests')\nos.mkdir('\/kaggle\/working\/identify-dance-form\/tests\/unknown')","d44aef02":"files = []\nfor  r, d, f in os.walk(train_dir):\n    for file in f:\n        if '.jpg' in file:\n            files.append(file)","27a5ff1f":"import matplotlib.image as mpimg\nplt.imshow(mpimg.imread(os.path.join(train_dir,files[0])))","1e691701":"for x in files:\n    if (train_csv[train_csv['Image'] == x]['target'] == 'odissi').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/odissi\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'manipuri').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/manipuri\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'bharatanatyam').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/bharatanatyam\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'kathakali').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/kathakali\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'kathak').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/kathak\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'sattriya').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/sattriya\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'kuchipudi').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/kuchipudi\/',x)\n        copyfile(train_temp, final_train)\n    elif (train_csv[train_csv['Image'] == x]['target'] == 'mohiniyattam').bool():\n        train_temp = os.path.join(train_dir,x)\n        final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/source\/mohiniyattam\/',x)\n        copyfile(train_temp, final_train)","4698ba2c":"def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n    shuffle=random.sample(os.listdir(SOURCE),len(os.listdir(SOURCE)))\n    train_data_length=int(len(os.listdir(SOURCE))*SPLIT_SIZE)\n    test_data_length=int(len(os.listdir(SOURCE))-train_data_length)\n    train_data=shuffle[0:train_data_length]\n    test_data=shuffle[-test_data_length:]\n    for x in train_data:\n        train_temp=os.path.join(SOURCE,x)\n        final_train=os.path.join(TRAINING,x)\n        copyfile(train_temp,final_train)\n    for x in test_data:\n        test_temp=os.path.join(SOURCE,x)\n        final_test=os.path.join(TESTING,x)\n        copyfile(test_temp,final_test)","b1f20b23":"bhatanatyam_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/bharatanatyam\/'\nbhatanatyam_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/bharatanatyam\/'\nbhatanatyam_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/bharatanatyam\/'\n\nkathak_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/kathak\/'\nkathak_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/kathak\/'\nkathak_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/kathak\/'\n\nkathakali_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/kathakali\/'\nkathakali_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/kathakali\/'\nkathakali_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/kathakali\/'\n\nkuchipudi_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/kuchipudi\/'\nkuchipudi_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/kuchipudi\/'\nkuchipudi_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/kuchipudi\/'\n\nmanipuri_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/manipuri\/'\nmanipuri_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/manipuri\/'\nmanipuri_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/manipuri\/'\n\nmohiniyattam_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/mohiniyattam\/'\nmohiniyattam_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/mohiniyattam\/'\nmohiniyattam_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/mohiniyattam\/'\n\nodissi_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/odissi\/'\nodissi_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/odissi\/'\nodissi_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/odissi\/'\n\nsattriya_source_dir = '\/kaggle\/working\/identify-dance-form\/source\/sattriya\/'\nsattriya_training_dir = '\/kaggle\/working\/identify-dance-form\/training\/sattriya\/'\nsattriya_testing_dir = '\/kaggle\/working\/identify-dance-form\/testing\/sattriya\/'","7148368a":"split_size = 0.85\nsplit_data(bhatanatyam_source_dir, bhatanatyam_training_dir, bhatanatyam_testing_dir, split_size)\nsplit_data(sattriya_source_dir, sattriya_training_dir, sattriya_testing_dir, split_size)\nsplit_data(odissi_source_dir, odissi_training_dir, odissi_testing_dir, split_size)\nsplit_data(mohiniyattam_source_dir, mohiniyattam_training_dir, mohiniyattam_testing_dir, split_size)\nsplit_data(manipuri_source_dir, manipuri_training_dir, manipuri_testing_dir, split_size)\nsplit_data(kuchipudi_source_dir, kuchipudi_training_dir, kuchipudi_testing_dir, split_size)\nsplit_data(kathakali_source_dir, kathakali_training_dir, kathakali_testing_dir, split_size)\nsplit_data(kathak_source_dir, kathak_training_dir, kathak_testing_dir, split_size)","74a00b0c":"from tensorflow.keras.applications.vgg16 import VGG16","479f0369":"pre_trained_model = VGG16(include_top = False,\n                            input_shape = (156,156,3),\n                            weights = 'imagenet')","d014a375":"pre_trained_model.summary()","97ebabca":"pre_trained_model.trainable = True\n\nprint(len(pre_trained_model.layers))","f821240a":"fine_tune_at = 17","4d845eb3":"for layer in pre_trained_model.layers[:fine_tune_at]:\n    layer.trainable = False","cfc51427":"last_output = pre_trained_model.output","6b685502":"x = tf.keras.layers.Flatten()(last_output)\nx = tf.keras.layers.Dense(1024, activation = 'relu')(x)\nx = tf.keras.layers.Dropout(0.5)(x)\nx = tf.keras.layers.Dense(8, activation = 'softmax')(x)","49409fae":"model = tf.keras.Model(pre_trained_model.input, x)","af3ac449":"model.summary()","daad6651":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nTRAINING_DIR = \"\/kaggle\/working\/identify-dance-form\/training\"\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range=20,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.1,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\n\n\ntrain_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n                                                   target_size=(156,156),\n                                                   color_mode = 'rgb',\n                                                   batch_size=32,\n                                                   class_mode='categorical')\n\nVALIDATION_DIR = \"\/kaggle\/working\/identify-dance-form\/testing\"\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\n\nvalidation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n                                                   target_size=(156,156),\n                                                   color_mode = 'rgb',\n                                                   batch_size=32,\n                                                   class_mode='categorical')","1eb58cee":"model.compile(tf.keras.optimizers.RMSprop(lr = 0.001), loss='categorical_crossentropy', metrics=['acc'])","60852a23":"learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","eb1800a8":"history = model.fit_generator(train_generator,\n                              epochs=40,\n                              verbose=1,\n                              validation_data=validation_generator,\n                             callbacks = [learning_rate_reduction])","78e7a8dc":"plt.figure(figsize=(15,7))\nax1 = plt.subplot(1,2,1)\nax1.plot(history.history['loss'], color='b', label='Training Loss') \nax1.plot(history.history['val_loss'], color='r', label = 'Validation Loss',axes=ax1)\nlegend = ax1.legend(loc='best', shadow=True)\nax2 = plt.subplot(1,2,2)\nax2.plot(history.history['acc'], color='b', label='Training Accuracy') \nax2.plot(history.history['val_acc'], color='r', label = 'Validation Accuracy')\nlegend = ax2.legend(loc='best', shadow=True)","8c4302a9":"fil = []\nfor  r, d, f in os.walk(test_dir):\n    for file in f:\n        if '.jpg' in file:\n            fil.append(file)","0a4452de":"plt.imshow(mpimg.imread(os.path.join(test_dir,fil[0])))","ccdc2dc0":"for x in fil:\n    train_temp = os.path.join(test_dir,x)\n    final_train = os.path.join('\/kaggle\/working\/identify-dance-form\/tests\/unknown',x)\n    copyfile(train_temp, final_train)","989b74fe":"tests_dir = '\/kaggle\/working\/identify-dance-form\/tests'\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_generator = test_datagen.flow_from_directory(tests_dir,\n                                                  target_size = (156,156),\n                                                  color_mode = 'rgb',\n                                                  batch_size=32,\n                                                  class_mode=None,\n                                                  shuffle=False,\n                                                  seed=42)","2f29c19c":"img_list = []\nfor x in test_generator.filenames:\n    x = x.split('\/')[1]\n    img_list.append(x)","88636186":"predictions = model.predict_generator(test_generator)","4b9afb6f":"predicted_clases = np.argmax(predictions,axis=-1)","5e153e65":"train_generator.class_indices","1b4f55bf":"data = {'Image': img_list, 'target': predicted_clases}","8957438e":"df = pd.DataFrame(data)\ndf.head()","5e932197":"df['target']= df['target'].map({0: 'bharatanatyam',\n                                1: 'kathak',\n                                2: 'kathakali',\n                                3: 'kuchipudi',\n                                4: 'manipuri',\n                                5: 'mohiniyattam',\n                                6: 'odissi',\n                                7: 'sattriya'})","9fdf9e1f":"df.head()","e4846824":"df.to_csv(r'submission_dance.csv', index = False)","bb40e61f":"Mapping back the class indices with the class label name","9d968c4d":"One of the images from train directory","7434ec29":"Converting the probabalities we got from softmax layers into the integer labels","ea5e44fb":"One of the images from train directory","6b83dd21":"Fitting the Model","dd49ab14":"### Fine Tuning the VGG16 Model","b88d1a74":"Build an image tagging Deep Learning model that can help the company classify these images into eight categories of Indian classical dance.","eb49a872":"Importing VGG16 Model for Pre-training","e4036dfa":"# If You like it DO UPVOTE","c4a7f7b7":"Initializing ImageDataGenerator and applying **Image Augmentation**","efd29987":"Class Indices assigned to the sub classes by the train_generator","3e370ac9":"Making the required directories for flow_from_directory command\n\nMaking source directory with 8 sub categories named as the 8 dance forms given in the train.csv file to keep all the images present in the train directory provided for the competition\n\nSimilarly, Making training directory with 8 sub categories named as the 8 dance forms given in the train.csv file to keep the images used for training after the splitting of train and validation images\n\nSimilarly, Making testing directory with 8 sub categories named as the 8 dance forms given in the train.csv file to keep the images used for validation after the splitting of train and validation images\n\nMaking tests directory with sub directory unknown to contain test directory images for predict_generator","03a80216":"Reading the jpg files from the test directory and saving their names in the list named files","9ce4c87c":"Initializing the Model","aabd3c5b":"# Problem Statement","590d98d5":"Creating a DataFrame with the image name and the predicted image label","da9162d6":"Defining the function for splitting the Source Diretory images into training and testing(validation) directories ","8e0a7d37":"Copying images from the train directory to the tests directory - to prepare it for predict_generator function","5406b7a6":"Initializing the Callback","05a7e721":"Splitting the Source Diretory images into training and testing(validation) sub directories ","f9f3e883":"## Preparing Data for training","03a8ab38":"Reading the train and test directory containing images and csv files containing images names and labels","840b13f8":"Initializing VGG16 Model","866067dd":"Reading the jpg files from the train directory and saving their names in the list named files","84204254":"Exporting csv file for submission","c5ab4753":"Copying images from the train directory to the Source directory's sub folders based on the labels of the images provided in train.csv file","7e209448":"Saving train images names in img_list","60f6e895":"## Importing Required Libraries[](http:\/\/)","d8872a9d":"Making some of the layers non-trainable of the VGG16 Model","a5d2f501":"Graphical Comparison of Training and validation - accuracy and loss","bd243862":"Making prediction on test images using predict_trainer","c1b78663":"## Predicting the test images labels and preparing submission file","5fd44b77":"Setting the layers of pre trained model to be trainable","36241035":"## Model Formation","814f5792":"Adding some layers to implement VGG16 Model to fit well on our Dataset"}}