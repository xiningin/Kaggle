{"cell_type":{"cf82865c":"code","7c30c9bd":"code","2dfa67b2":"code","eea89b11":"code","917c0dc3":"code","07cde20b":"code","414fe0d0":"code","a93e7e99":"code","f8a07e0f":"code","621e84f7":"code","57031220":"code","28d789b9":"code","e9adbd10":"code","50141836":"code","97fdefb6":"markdown","d477c528":"markdown","dc7950d8":"markdown","8519f062":"markdown","30dd63cb":"markdown","de1004b9":"markdown","02dd4e65":"markdown","59441a2a":"markdown","4b42aed2":"markdown","21c0eebe":"markdown","ea70a451":"markdown","325c386c":"markdown","6d371eac":"markdown","1dee5894":"markdown","0dec6ce0":"markdown","21792e2d":"markdown","05839152":"markdown","a16591ee":"markdown","d3301fba":"markdown"},"source":{"cf82865c":"#import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt #data viz\nimport seaborn as sns #data viz\nfrom sklearn.compose import ColumnTransformer #data preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler #data preprocessing\nfrom sklearn.impute import KNNImputer #handle missing values\nfrom sklearn.model_selection import train_test_split #train\/test dataset\nfrom tensorflow.keras import layers, models #neural network architecture\nfrom tensorflow.keras.metrics import BinaryAccuracy #model evaluation\nfrom tensorflow.keras.callbacks import EarlyStopping #regularization\nfrom tensorflow import keras #keras\nimport tensorflow as tf #tensorflow\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score #evaluate model","7c30c9bd":"#Read In Dataset\npd.set_option('display.max_columns', None)\nheart_data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\nheart_data.head()","2dfa67b2":"#displays stats about the data\nheart_data.describe()","eea89b11":"#display percent of dataset with heart disease\nperc_dis = heart_data['HeartDisease'].sum() \/ len(heart_data)\nprint('Percent of patients in dataset with heart disease:', round(perc_dis, 4))","917c0dc3":"#Creates lists of the columns based on the data type\/how data should be visualized\n#catagorical variables\ncat_vars = ['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope', 'FastingBS']\n#numeric variables\nnum_vars = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']\n#label\nlabel = 'HeartDisease'","07cde20b":"#Creates functions for plotting variables \n\n#function for plotting catagoric variables as a bar chart\ndef display_barchart(data, var, label):\n    #calculates the count of patients in each catagory vs heart disease\n    grp = data.groupby([var, label])[var].count().unstack().reset_index()\n\n    labels = list(grp.iloc[:, 0].values)\n    no_dis = list(grp.iloc[:, 1].values) #no heart disease patients\n    yes_dis = list(grp.iloc[:, 2].values) #heart disease patients\n\n    x = np.arange(len(labels))  # the label locations\n    width = 0.35  # the width of the bars\n    \n    fig, ax = plt.subplots()\n    rects1 = ax.bar(x - width\/2, no_dis, width, label='Healthy')\n    rects2 = ax.bar(x + width\/2, yes_dis, width, label='Heart Disease')\n\n    # Add some text for labels, title and custom x-axis tick labels, etc.\n    ax.set_ylabel('Number of Patients')\n    ax.set_xlabel(var)\n    ax.set_title('Heart Disease by ' + var)\n    ax.set_xticks(x) # values\n    ax.set_xticklabels(labels) # labels\n    ax.legend()\n\n    fig.tight_layout()\n    plt.show()\n    \n    \n\n#function for plotting numeric variables as a kde chart\ndef display_kdechart(data, var, label):\n    plt.figure(figsize=(10, 6))\n    sns.kdeplot(var, hue='HeartDisease', data=heart_data)\n    plt.title('Heart Disease by ' + var + ' Distribution')\n    plt.show()","414fe0d0":"#plots catagoric valriables\nfor var in cat_vars:\n    display_barchart(heart_data, var, label)","a93e7e99":"#plots numeric valriables\nfor var in num_vars:\n    display_kdechart(heart_data, var, label)","f8a07e0f":"#Missing Values (0)\n#Takes care of the '0' values for RestingBP\nbp_ix = heart_data[heart_data.RestingBP == 0].index[0]\nbp_avg = heart_data.RestingBP.mean()\nheart_data.loc[bp_ix, 'RestingBP'] =  bp_avg\n#drops Cholesterol column\nheart_data.drop('Cholesterol', axis=1, inplace=True)\n\n#Encodes catagoric variables\/Scales numeric variable\ncat_cols = [1, 2, 5, 7, 9] #column index for catagoric variables\nnum_cols = [0, 3, 6, 8] #column index for numeric variables\n#transforms each column based on its datatype -- columns not included are passed through\nct = ColumnTransformer([\n    ('catagoric', OneHotEncoder(), cat_cols),\n    ('numeric', StandardScaler(), num_cols)\n    ], remainder='passthrough')\ndata_clean = ct.fit_transform(heart_data.values)\n#displays a sample of the processed data\nprint('Cleaned Data:')\nprint(data_clean[0])","621e84f7":"#Splits the data into train, test, validate\nX, y = data_clean.T[:-1].T.astype('float32'), data_clean.T[-1].astype('float32')\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.22, random_state=8)\nX_val, X_test, y_val, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=8)\n\n#displays the amount of samples in each dataset\nprint('Samples in Train Set:', len(X_train))\nprint('Samples in Validation Set:', len(X_val))\nprint('Samples in Test Set:', len(X_test))","57031220":"#builds the architecture for a neural network\n#sets the learning rate\nlr = 0.001\n\n#creates a dense network with 1 skip step\ninputs = keras.Input(shape=(19,))\na = layers.Dense(24, activation='relu')(inputs)\nx = layers.Dropout(0.4)(a)\nx = layers.Dense(24, activation='relu')(x)\nx = layers.Dropout(0.4)(x)\nx = layers.concatenate([a, x])\nx = layers.Dense(24, activation='relu')(x)\nx = layers.Dropout(0.4)(x)\noutput = layers.Dense(1, activation='sigmoid')(x)\n\nnn = keras.Model(inputs, output, name=\"heartdisease_predictor\")\nnn.summary()","28d789b9":"#compiles the model with Adam optimizer\nnn.compile(optimizer=tf.optimizers.Adam(learning_rate=lr),\n            loss='binary_crossentropy', metrics=[BinaryAccuracy()])\nearly_stopper = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n\n#Trains the neural network\nnn.fit(X_train, y_train, epochs=1000, callbacks=[early_stopper], validation_data=(X_val, y_val))","e9adbd10":"#Display the metrics of the neural network on the test set\ntest_preds = nn.predict(X_test)\ntest_preds = [round(float(i), 0) for i in test_preds]\ntest_acc = accuracy_score(y_test, test_preds)\ntest_rec = recall_score(y_test, test_preds)\ntest_pre = precision_score(y_test, test_preds)\nprint('Test Set Metrics')\nprint('Ensemble Model Accuracy:', test_acc)\nprint('Ensemble Model Recall:', test_rec)\nprint('Ensemble Model Precision:', test_pre)","50141836":"test_preds = nn.predict(X_test)\ntest_preds = [1.0 if i > 0.09  else 0.0 for i in test_preds]\ntest_acc = accuracy_score(y_test, test_preds)\ntest_rec = recall_score(y_test, test_preds)\ntest_pre = precision_score(y_test, test_preds)\nprint('Test Set Metrics')\nprint('Ensemble Model Accuracy:', test_acc)\nprint('Ensemble Model Recall:', test_rec)\nprint('Ensemble Model Precision:', test_pre)","97fdefb6":"<a id=\"4\"><\/a>\n<h2>Visualizing the Data<\/h2>","d477c528":"<h5>With this new threshold, all at risk patients were identified. This decreased the accuracy to around 74% and will lead to around 30% of patients being falsley identified as at risk. These are acceptable numbers for the this problem.<\/h5>","dc7950d8":"<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAALcAAAJPCAYAAAA+MEXCAAAAAXNSR0IArs4c6QAABi10RVh0bXhmaWxlACUzQ214ZmlsZSUyMGhvc3QlM0QlMjJhcHAuZGlhZ3JhbXMubmV0JTIyJTIwbW9kaWZpZWQlM0QlMjIyMDIxLTEyLTA0VDExJTNBMzMlM0E1Ni4yNDRaJTIyJTIwYWdlbnQlM0QlMjI1LjAlMjAoV2luZG93cyUyME5UJTIwMTAuMCUzQiUyMFdpbjY0JTNCJTIweDY0KSUyMEFwcGxlV2ViS2l0JTJGNTM3LjM2JTIwKEtIVE1MJTJDJTIwbGlrZSUyMEdlY2tvKSUyMENocm9tZSUyRjk2LjAuNDY2NC40NSUyMFNhZmFyaSUyRjUzNy4zNiUyMiUyMGV0YWclM0QlMjJtNVd0Tk1qRE5rZDNwb3Q4UjQzeSUyMiUyMHZlcnNpb24lM0QlMjIxNS45LjElMjIlMjB0eXBlJTNEJTIyZGV2aWNlJTIyJTNFJTNDZGlhZ3JhbSUyMGlkJTNEJTIyQzVSQnM0M29EYS1LZHpaZU50dXklMjIlMjBuYW1lJTNEJTIyUGFnZS0xJTIyJTNFN1ZqYlV0c3dFUDJhUExialM1dzRqMDBDbEphMmRHZ0pmUlMyc05Vb2xpdkx4T2JyV2NXU0wzRWdjYmlrdyUyRkRDYUU5MjE5TFpzMnZrbmoxWlpDY2N4ZUUzNW1QYXN3dyUyRjY5blRubVVOWFF2JTJCU2lBdmdQN0FMWUNBRTclMkJBekFxNElIZFlnWVpDVSUyQkxqcE9Fb0dLT0N4RTNRWTFHRVBkSEFFT2RzMlhTN1liVDUxQmdGdUFWY2VJaTIwUm54UlZpZ3JqV3M4TSUyQllCS0YlMkJzamtZRmI4c2tIWldKMGxDNUxObERiS1BldmFFTXlhSzFTS2JZQ3E1MDd6TVR2TVpQWnNQVHI3OFRQNmgzJTJCT3Z2NzVmZmlpU0hYY0pLWSUyRkFjU1NlTjdVcTdpMmlxZUpMblZYa21rRE8wc2pITW9uUnM4ZWhXRkJZbXJEOGk0WElWY0ZSS2hoQWpJdVFCU3hDOUl5eFdQbmRzRWdvTjFQYU9QSSUyRnljS0NmVTJaTnklMkJnWTBLcGVnWll5dDhGS3hHY3pjdmF5UVJsSWFRelJkZVlqcEUzRDFZYm5UREtPUHdVc1FqTFZENklRWjJsMnR4UmhZNTM1RmJWUU9hcjZVb3hmWUxaQWd1ZWd3UEhGQWx5MnhRZlVob09Tcjh5OUp3UmVLNWxxSFlyeFpack9Sck5GQWxMdVlkVlZMM2EyeElOMXhJSnhBTXNXb2xnVVR0UEJhM0V0RmxZNDJVMk80JTJCdlk0S3V3cXZzenU5ZmptWktpM1ZoblVaeEtwS1d2Q0FYakFKWmlXVklCTDZJa1NkJTJGV2NJd2FzcE5KY1JjNEd5dHRYZXBYYnRVT3N1Z3laU3R6R1UxTFV4TlpsaWJGSzd4Y0hFYmJIYWx6bXhSTjhVUk1HUVpaeWpIJTJGSkVHTmY4ZkZrdTliYU54OEZJMDdqRGFhcFBJb3loSmlOY2txem42Tms2QSUyRlltckVlTnM0RVZqVHgwbzV1aWowNmhNS2ZET0k2V2RhdlM2UThWJTJCQzUxUmtuYXd6dWklMkZkOFpHT2R2T3MzVkdmJTJGMjklMkZVQm5BTWtvcjduRjBpSHB0R25YMkhOdnUwZllvMFlFTElwOVAydHpPMiUyQmh1Y3U2SDZ5NWglMkIlMkZOdlZuMTYlMkY4QTc5JTJGY3p2b2I5TVdhMnpHNnRxcmVXNGNJOHhXYTIyMnA4a2NxNEQ3UTBpYmM3V0s1REhHRzRLNEclMkJvc3hKJTJGQjR6Q3YwWEVQVzlzNiUyRklSblcxOG5YbkFUT3dlOFJvJTJCMlR3RXY1YlRsQ3U0MEZuQkZ4cFNOaCUyRlVmaUlLM0NtbVkxdDJtdWpRak9WUVpKb3hZbHpTcHNaZW00SjQwZ09QQ3EweDloU24lMkJYV3JYeHRsZlVvVWFhZnRHWEwlMkJWOUI1cXpmdUY5b1hIVzJyRDFwRUVEWnZXdHJYQ3ZQbGphUiUyRmMlM0QlM0MlMkZkaWFncmFtJTNFJTNDJTJGbXhmaWxlJTNF98QsFgAAIABJREFUeF7tnQ14FNXZ9\/+s+SImkLDhIyTGEOQJ+rbSF9BWAbGK8lTQPE+jYIVQFJUGKISIVuVDBPwoakhoKIIiyEcVbXyfKKJYtEbAT6DF+ggUDQETYkiWRBM3IQmb97qXmbgsu9mZ2ZnZmdn7XJdXMDnnPve5z2\/+e8\/ZmXO6gQtHwKIR6GbRcfGwOAJguBkCy0aA4bbs1PLAGG5mwLIRsCLcCQAGAkgHkJaYmDgoKioqzeVy9XW5XIltbW3xbW1t3c+cORPV3t4e4XK5LhBn12aznYmIiGi\/4IILWiMjI5sjIyMbbTZbPYCa9vb24\/X19UcAHAdQAeBrAA2WJcMCAzM73D8BMKxfv37XAPhZU1PTQAI3NTXVOXDgwI6BAwdGZmRkxPXr1w99+vSB3W5HQkIC4uPjERsbi+joaERERKBbt27o6OhAe3s7Tp8+DafTicbGRjQ0NMDhcODkyZOoqanpKC8vdx45cuR0eXm5rbKyMpYugLi4uHIA\/\/j2228\/ALAPwBcW4MISQzAb3CPtdvuvoqKibjh16tRPe\/fufXrYsGGuESNG9Lj88ssvuOyyy3DRRRfpNjHffPMNvvzyS3z++edn9uzZ8\/2+fftstbW10b169fpXe3v7ztra2u0AduvmEHd0TgSMDnff2NjYrF69et1RW1v78\/T0dOeNN94YccMNN\/S4+uqr3UpstEJK\/+GHH+Jvf\/vb9++88057RUVFbO\/evT85derUS06n838oxTGaz1b1x4hw2xMSEiZ37959an19\/WU33HBD44QJE+xjx45F7969TTcPtbW12LFjB7Zu3erYuXNnfGJi4pfNzc3rGxoatgBwmG5AJnLYSHCPS0tLu6+qquqacePG1d91111JWVlZJgqlNFdLS0vxwgsv1L355puJKSkpHxw\/fvwZAG9Ka8215EQg1HDH9e\/f\/76WlpbfpaSkRM6cObNnTk5OBN3sWb3QTevmzZvPFBcXN1RVVbXFxMSsOXHixNMAmqw+dr3GFyq4kwcMGLCksrJyyi233PLdfffd1\/uqq67Sa8yG6+ejjz7CM888U\/v666\/3TE1N3XT06NGFAKoN56jJHNIbbnt6evry48ePT7333nsbHnzwwV4XX3yxyUKmnbvHjh3Dk08+eWrt2rUJaWlpL1ZUVNzPebnyeOsGd0ZGxh8rKyvzpkyZ0rhkyRJ7cnKycq8t3rK6uhqPPPJI3YsvvtgjNTW1sLy8\/A8WH7Imw9Mc7qioqF\/Hx8f\/6Re\/+EXkM8880zszM1OTgVjR6OHDh3HffffVfvzxx21Op3N2c3NziRXHqdWYtIQ7acCAAZs7OjquLC4uThw3bpxWY7C83e3bt2PmzJn13bp1++To0aM5AOosP2gVBqgJ3Ha7ffLp06f\/fM8997QVFBT0UsFPNgGQitevXbs2IjIyMre+vp7Wybl0EQHV4b7kkku2nD59+qaNGzcmXHvttRx8lSPw\/vvvY8qUKQ3R0dHbv\/rqq0kqm7eUOTXhTktJSXnzyiuv7PPyyy\/3iYqKslSgjDSY1tZW3H777Sc\/\/fTTk1VVVZTv0ZOKXLwioBbco3r06PH6vHnzsHDhQnrklIsOEVi6dGnD008\/je+\/\/\/4WALt06NJUXQQNd8+ePSc2NTVteemll7rddtttNlON3gLOvvrqq2d+85vfoEePHpPr6+tftsCQVBtCUHCnpaVNr6urK9y+fXvM6NGjVXOKDcmLQFlZGW666aaWxMTEOVVVVWvltbZubcVw9+3bd1pzc\/PKnTt3xl5xxRXWjZBJRvbZZ59hzJgxzgsvvHBOdXX18yZxW1M3FcFtt9t\/\/cMPP\/ylrKws+sorr9TUQTYuPQKffvopRo8efTomJuaOhoaG16S3tGZNJXAPi4iI+Oitt96KHDNmjDWjYuJR7dy5E7\/61a\/a2tvb6Uk0eu0tbItcuHvY7fZDy5cvT7jrrru6h23UDD7wF154oeWBBx6odzgcgwF8b3B3NXNPFtzp6el\/v+WWWy4vKiribx01mxJ1DM+ePdvx+uuv\/+vYsWO\/VMei+axIhnvAgAELExMTf79v3z7zvetlvnlRxeNhw4bVNjQ0FJeXly9RxaDJjEiFe5DNZjv0r3\/9y0ZvmHMxRwTozfyf\/vSnLpfLRekJ7bkSVkUS3GlpaR9MmzZtyKJFi3qEVXQsMNilS5d+9\/zzz39+\/Phx2tslrIoUuMenp6dvPHr0aGJYRcZCg83IyKg\/evToFADbLDSsgEMJCHe\/fv0OFRYWDpo4cSJ\/tR4wnMas8Oqrr3bMnj37399++y2lJ2FTAsF98+DBgzccPHiQV0dMjsSll1566tChQ1MBvGHyoUh2v0u4U1NTP33ssceGTpkypXOzSMmWuaKhIrBx48Yz8+fP319ZWRk2Xyl3BXdmz5499zc0NFh\/ExFDYaidMwkJCc7vvvtuKIDD2vViHMt+4e7fv\/9T48aNu2vt2rWckhhnvoLyZPr06fXbt29fV1lZSVtGWL74hbt3795f\/\/Wvf8245pqwW0Gy7KR\/8MEHuPXWW8tra2tp\/3LLF39wp1x44YVfNTU1xVg+AmE2wLi4uJYffvjhEgBVVh+6P7gnXH\/99at37tzJKYnFCBgzZozj3XffnQHgFYsN7bzh+IS7X79+q2fMmHHnwoULo80QANq8ZvHixSguLlZ9z27ab3vWrFlu+1bYUGjJkiUtq1atWn\/y5EkC3NLFJ9x9+\/bds3bt2qtvuYXeOzV+Ybilz9Hrr7+Oe++998OampoR0luZs6ZPuBMTE7\/54IMPUn\/yEzpyxvjFE+66ujq3yvbs2RNr1qxxO797926MGDECe\/bswaZNm+hlWjz11FOgDe23bNniPh9n7ty5yMnJcdcT1frBBx\/E6tWr3XaGDBlCG8iD7I8cOdJtV2xvxBMe\/M3aF198gWuuuaayvr5ev\/NVQoSQT7hjYmKaKisrLzTLpHnDPXHiRNx\/\/\/2YNGkSli5diqqqKqxYsQL79+93g7l58+bOv1HcaUsKX3DTRZKUlNSZlnj+m1IUujCoUD9mKXThpqam\/tDS0hJnFp+V+ukTbjqy7vTp0zY66csMxRvu2bNnY+XKle4cWVRrEW6CnaCkC1dsR3t\/0O+9lTsQ3GaIjbePdGJbdHQ0PQZr+W+dfcFNv3PR0XVmKb7SEvHm0htuSksI9O7du8uGmy4W6os+GQ4cOIDp06d32jJLrMhPOpqQfpjJZyW+WlK5PVdOulJu+hsp9rp1685RbgJYVH\/vVMQzyPQJUF5eTrtsKYl9SNqEu3LD7Dl3V3BTzi3eYBLYnjl3SkqKG1SClm446QbSE26q62mbc+6QXJ+SO7Xsaom\/tIR+T+Xll18+J63wTDcKCgpAe4AQyGlpae6bzY8\/\/tgN+969ezF58mS3DTOmJWG\/WtKvX78P16xZc5VZ1rmlXsqeKQrl3OFYhHXuj2pqaq62+vh9KnefPn1W\/f73v79nwYIFkVYKAMMNurdo\/dOf\/vR8bW3tTCvNra+x+H225Lrrrvvzu+++a7zzp60+IxqP7\/rrr3e899574ftsCQB+KlBjyEJlnp8KBOicdX6eO1QEatQvP88tBLZfv35\/vOWWW+5ds2YNn5SgEWx6m50+fXrDtm3bnjtx4sQDevcdiv74HcpQRD1EffI7lB6BT0lJ+fSJJ564gp654GLuCGzcuLHj4Ycf3ltVVcVvvwtTSfuWrD948CCvmpibbVx66aWOQ4cO3cn7lnhMZL9+\/Q4WFRUNnjBhgsmnN3zdf+WVVzBnzpzDvOOUFwMXXHDBzRdddNGLvFegeS+OAQMG1H\/zzTdTz5w587p5RyHfc0mPPdIur3fffffPFi5cGC+\/C24RyggsXbr0++eff\/4A7\/LqfxZ4f+5QEqqwb96fW2LgLrroovm9e\/fO27dvX5LEJlwtxBEYNmxYncPhKDp27NiyELsSku4lpSWiZ+np6e\/ffPPNP1m5ciWvnoRkuqR3Onv27Lo33njji4qKCj4TR2LYxNPMEu+66y7ejUpi0PSutn79+tb777\/fwaeZyY88n0MpP2a6teBzKH8Mtay0RGwWGxv7Xy6X62U+QVg3ZiV1JJ4gbLPZbnc6nf8jqZGFKymCm+KRnJx89w8\/\/FDEZ78bgw7x7PcePXrkVVZWPmcMr0LrhWK4BcDv\/e6774q2b98eM3r06NCOJIx7Lysrw0033dTSs2fP2dXV1Qy2wEJQcJONpKSk2+vr6ze\/9NJLHbfddps5dvGx0IXwyiuvtN1xxx22pKSkKTU1NX+x0NCCHkrQcAsejOrRo8fr999\/f7cFCxb0DNorNiApAo899th3y5cv7\/j+++9px9JdkhqFUSW14KaQpaWkpLx5xRVX9Nm6dWufqKioMAqjvkNtbW2lXa9qPvvss9qqqqpxAI7r64E5elMTbveIMzIyNre1tY3buHFjwrXXXmuOKJjIy\/fffx9TpkxpiI6OfvOrr746u4EKF58RUB1u6qVPnz45Tqdz1d133926YsUK\/jZTJfjy8\/NPPffcc5HR0dEzHQ7HJpXMWtaMJnAL0UpKT0+nCfj5qlWrEm+66SbLBlHrgb355pu0jXI9gE8qKirotag6rfu0gn0t4XbHJy4u7tbo6Oiiq666KuLpp5\/uY4WjN\/SaeNriLT8\/\/+Qnn3zS3t7envfdd9+9qlffVuhHc7jFIKWnpz954sSJuVOnTm1cvHixPTk52Qrx02QM1dXVtE+hY8OGDfH9+\/dfUVFR8aAmHVncqG5wC3G0Z2RkPFVRUfHbe+65p+Ghhx7qdfHFF1s8xNKHd+zYMTz55JOOtWvXJqanp79YXl5Oh6E6pFvgmp4R0Btuse\/kiy+++NETJ078Nisr6\/v8\/Pykq666Kmxn5qOPPkJBQUFdaWlpj\/79+288duzYIgDVYRsQlQYeKrhF9+NSU1PnOZ3O6f3794+cNWtWj5ycnEg6gMnqxel00uFTbcXFxd+fOHGiLTY2dm1lZeVTAJqsPna9xhdquD3HOS41NfW+6urqa8aPH19\/5513JmVlZekVB936KS0txfr16x3btm1LSE5OLqusrCwA8KZuDoRRR0aCWwy7vVevXjnR0dG\/ra+vv2zMmDGNEydOtNOxeL179zbd1NTW1mLHjh20cX3dzp07e\/Tq1evLlpaWDadOndrM+bS202lEuD1H3DcyMvLmPn36TKqrq\/vFgAEDmm+88caIMWPGxF999dWqnxasRqjpKLwPP\/wQO3fubHznnXfajx492j0pKenjkydP\/qWtrY22VqhRox+2ETgCRofbewQje\/fufVNERMQNp06d+klSUtLp4cOHn7n66qvjhwwZEnnZZZfhoov0Ozv0m2++Ab1h\/s9\/\/rP9o48++n7fvn0X1NbWRvfq1esLl8u1s6amhtKN3YGngWtoEQGzwe0dAzrieFjfvn1HdXR0\/F+n0zmwra2te2pqqnPgwIEdl1xySdSAAQMu7NevHz0S4Fb6hIQExMfHu08Njo6OBp21SUfX0dGEdNLX6dOnQTd7jY2NaGhocJ8mfPLkSXz77bc4evToD1999VXr119\/3a2ysjI2MjKyOS4u7uuOjo5\/1NTU0FN5+wB8ocVEsU35ETA73L5GTFsuDwSQHhERkd6zZ89LIiIi0lwuVx+Xy5XY1tYWTxfAmTNnotrb2yM8Dxulw2UjIiLaL7jgglYCNzIysjEiIoK+9q45c+ZM5alTp\/7tcrmOAagA8DWABvkh5xZ6RcCKcCuJHZ0oy7FQEjkDt+EJPTs5DLeBIVXqGsPNcCtlx\/DtGG6G2\/CQKnWQ4Wa4lbJj+HYMN8NteEiVOshwM9xK2TF8O4ab4TY8pEodZLgZbqXsGL4dw81wGx5SpQ4y3Ay3UnYM347hZrgND6lSBxluhlspO4Zvx3Az3IaHVKmDDDfDrZQdw7djuBluw0Oq1EGGm+FWyo7h2zHcDLfhIVXqIMPNcCtlx\/DtGG6G2\/CQKnWQ4Wa4lbJj+HYMN8NteEiVOshwM9xK2TF8O4ab4TY8pEodZLgZbqXsGL4dw81wGx5SpQ4y3Ay3UnYM347hZrgND6lSBxluhlspO4Zvx3Az3IaHVKmDDDfDrZQdw7djuBluw0Oq1EGGm+FWyo7h2zHcDLfhIVXqIMPNcCtlx\/DtGG6G2\/CQKnWQ4Wa4lbJj+HYMN8NteEiVOshwM9xK2TF8O4ab4TY8pEodZLgZbqXsGL4dw81wGx5SpQ4y3Ay3UnYM347hZrgND6lSBxluhlspO4Zvx3Az3IaHVKmDDDfDrZQdw7djuBluw0Oq1MFwhftir4BVAEj3+t0xpUHldsaIQDjCfReAIgAOjymIA9Dk8f92AHMAvGCMaWIvlEQgHOGOB1AF4OcADvoI2qUAPgGQAqBRSVC5jTEiEI5wU+QfAZAK4B4f07BWgP9RY0wRe6E0AuEKN6l3JYBfeKk3qfbHAvis2kqpMki7cIXbn3qzahsETDXcCGe4vdWbVVsNogxkI5zh9lbv54RUhXNtAwEajCvhDreo3ncA+Avn2sGgZLy24Q63qN6\/AfASAFZt4zGq2COGGyD1LgYwi9e1FXNkyIZy4M602Ww5iYmJ2Y2Njemtra0xhhwRO4WoqKiW+Pj4ivr6+hKXy7UJwOFwDIskuOPi4p5tb2+\/Mzc3t1tWVlbkkCFDkJCQEI7xMsWYGxoacODAAZSWlratXr26IyIiYn1TU9PvTOG8ik4Ggru\/3W5\/d\/z48WmFhYWxDLSKkdfJFIGel5fn3LZt23GHw3E9gBM6dR3ybrqE2263H8zLyxu8YMGCkDvKDgQXgWXLlqGwsPCQw+Gg9fywKH7hplQkOzs7Z8OGDbFhEYkwGOTUqVOdJSUlm8IlRfEHd2ZMTMzn1dXVUZyKWId6SlGSk5NbW1paLg+Hm0yfcNtstmVz5sx5oKCgINI6U8sjoQjk5+e3FRUVLXe5XJbPNX3CTbl2SUnJ4NGjRzMRFotAWVkZsrOzwyL39gl3VFRUc01NTQynJBYjGwClJn379m1pbW3tbr3RnTsifzl3R0dHh9XHHrbj69bNPe2BloFNHx+G2\/RTKH8ADDcrt3xqTNKC4Wa4TYKqfDcZboZbPjUmacFwM9wmQVW+mww3wy2fGpO0YLgZbpOgKt9Nhpvhlk+NSVow3Ay3SVCV7ybDzXDLp8YkLRhuhtskqMp3k+FmuOVTY5IWDDfDbRJU5bvJcDPc8qkxSQuGm+E2Cary3WS4dYDb4XBg0qRJ2LFjxzkztHv3bowYMUL+rKnUQvRr4cKFIfVDpeGcZ4bh1hFuT4gOHz6MiRMnYtWqVSEDi+HW6rLS125IX1bwB9GWLVuwa9curFixAt27d8eePXswcuRId2SmT5\/u\/j2VuXPnIiUlBYsWLXL\/\/5IlS0AXCpWlS5f6\/L148dCOTGPHjgX1ZbfT+U4\/lkBwU5vJkye7G9DuW1u3bkVdXR02bdrU6TP1s27dOjz66Nm9NcnXNWvWuP8tfjJRndmzZ7t\/R2rqyxctcGDlDpFy02TSpC9evBjFxcVuaAiAlStXIi0trRPoefPmuf9NhWDfv38\/Zs6ceR5o9PdHHnkE06ZNQ1JSkjsNEj8p6AKoqqrqBFIEqSu46UKjdiKI9G8qM2bMwKxZs9x+Z2Zmuv9OhfoT61C\/1F70k\/4eik8phtsgcL\/99tvnqTgp5OOPP46HH34Yo0aNcgNEQIpweauoCK03mJ4Xkad6B1JuTzUliMvLy90XDEF83XXXYejQoX4vqObmZvdFmZOT477YxAuXLgi9CsMdQrg9ISS4xRRAnHxKJ+gjn2AiSOjm0xNuUTnFdps3b3ZfAJ7pjWhLTCs84eoKbhFOMcXwTIfI\/nvvvYcJEyZ0piROp9PnTTP5NHz48M5PKO\/USEvQBbgpz9ujZT+htm34nPu1117rVEbPYHkqoC+4xbqe9eh3nnmxv+B3Bbf3\/YCnclO7+fPnu9OSPn36nPeJ4q3O\/j45tIZCgPsoAFqSqta6v1DZNxzc3qsl4k0X5dwEh5gni2mJL+Xeu3dv5wVBcPvLuQlMgt37Rk4q3KIq08XleSNbUlLizv1FmD1zbs\/xUVoi3luEQLnpLM5RAG4IFXxa92sIuAOtc3umE+IKR2xsbGfu6q3c4o2nmDqIaYl4s0o3cbRa4isloTpdrb8PHjy4M80gX3Jzc\/HWW2+ds7Lj\/engncqI\/oRYuWnuNwrHgs\/QGrRQ2A8p3KEYsNZ9kkpnZGS4LwCjFo8bSpr\/DwFsBVBoVH+V+sVwK42cVztRnenX4vq8SqZVN+O1WjJYAJxOdHtb9c5CaJDhDmHwQ9W1j6XALADPCseFHwuVX2r3y3CrHVET2POzzv0QgDEA6GgRSxSG2xLTKG8QXXyJs5nupwHMkWfRmLUZbmPOi6ZedQF3NIBPAawEsE5TJ3QwznDrEGSjdRHg6\/crBMDp516j+S7HH4ZbTrQsUlfCsyV3A5gJgABvN+uwGW6zzlwQfkuAm6yvAkCnRE8LoquQNmW4Qxr+0HQuEW5y7mMALwJYHRpPg+uV4Q4ufqZsLQPunwHYB+DnZsy\/GW5T4hmc0zLgpo7uAXCvkH8H17HOrRlunQNuhO5kwk0u07KgE8DvjeC\/VB8YbqmRslA9BXDT+vc\/6NVUAC+ZJRQMt1lmSkU\/FcBNvf8SQAkAysOPq+iOZqYYbs1Ca1zDCuGmAdHWAsMB0INWhi8Mt+GnSH0Hg4CbnHkHAO2i9Iz6nqlrkeFWN56msBYk3PT89+cArhKWCQ07Zj773bBTo41jKp39nguAXm6gdzANW3zCbbfbD5aUlAwePXq0YR1nx5RFoKysDNnZ2YccDselyix0tnoVwP8CWBykHc2a+4TbZrMtmzNnzgMFBQWRmvXMhkMSgfz8\/LaioqLlLpdrQZAOpAL4AsA4o+5\/4i\/nzoyJifm8uro6KiEhIcgYcHOjRIBSkuTk5NaWlpbLadc6Ffy6S\/j28hcq2FLdhD+4ERcX92x2dnbOhg0bYlXvlQ2GJAJTp051lpSUbGpqavqdig7Qm\/MHjZie+IWbBk+5d15e3uAFC4L9BFMxlGxKUQSWLVuGwsJCNXJt7\/4vEnJvev+S3uIxTOkSbgD97Xb7u+PHj08rLCyM5RTFMPMm2RFKRfLy8pzbtm077nA46OXfE5IbS684HcBvAFwrvYn2NQPB7faAUpT29vY7c3Nzu2VlZUXSTk0MuvaTo7QHApp21CotLW1bvXp1R0RExHqVUxFfrm0D8HcjfbkjCW5hJJk2my0nMTExu7GxMb21tZXe0uBiwAhERUW1xMfHV9TX15e4XK5NKt08BhrpZcKXO\/Qlz1eBKuvxdzlw6+FPKPoQ12kNu14biqAo7PNhAEMB3KqwvarNGG6AdjulODDc6qBFb8zTcychfzSW4f4RaoZbHbhvBECH\/\/wHgDZ1TCqzwnCzcisjp+tWzwE4BeAPWhiXapPhZrilsiKnXl8AR4Slwf1yGqpZl+HmtERNnjxt0X6D9MXOzVp1EMguw81wB2IkmL9\/QtuVA3g5GCNK2zLcnJYoZUdKu18JcNPat+6F4Wa4tYaOlgT\/BeBxrTvyts9wc1qiNXOk2v8EkKHRcy1+\/We4GW6t4Sb7fwQQT6eI69GZ2AfDzWmJHrwR2BXCmZe6LQ0y3Ay3HnBTH\/kArtbzuROGm9MSveCmfujVNtrUfqcenTLcDLcenIl93AmATp+lL3c0Lww3w605ZF4dfCYsC\/4\/rTtmuDnn1poxb\/u3AZgr5N+a9s1ws3JrCpgf47sAFAtnzmvWP8PNcGsGVxeG\/wsAvbVzpZadM9wMt5Z8dWX7AwB\/1vKhKoab4Q4V3P8tvMyg2W5VDDfDHSq4qd8PATwN4DUtnGC4ebVEC66k2rwdAG3oQ0eSqF4YblZu1aGSafAAgPuFExtkNu26OsPNcKsKlAJjdMYlbYOs+jk7DDfDrYBH1Zt8A4CWB+m0YtUKw805t2owBWGI1rwHCKcVB2Hm3KYMN8OtGkxBGOoFoAbAxWq+rcNwM9xBMKlq01UATgJ4VC2rDDfDrRZLwdoZAuBNAHTWjiqF4Wa4VQFJJSPbhQ00advloAvDzXAHDZGKBmjrY3qJ+Do1bDLcDLcaHKlp46jwnmXQy4IMN8OtJphq2KL90u0AZgdrjOFmuINlSO32tN79DwHwM8EYZ7gZ7mD40aptqfCk4IvBdMBwM9zB8KNV2wkA7gZApzQoLgw3w60YHo0b1gK4KpiT0RhuhltjRhWbXyl8Y7lMqQWGm+FWyo7W7UYAeBbAT5V2xHAz3ErZ0aPdlwBolyo6oUF2YbgZbtnQ6NhgCYDuwps6srtluBlu2dDo2IAepqKXhwcq6ZPhZriVcKNnGzqVYRaA3XI7ZbgZbrnM6F2fTna+UElqwnAz3HrDKre\/ocJjsJlyGzLcDLdcZkJRnzatpz1O6JkTyYXhZrglwxLCigXCWfKyvtBhuBnuEDIruesbcHYLDvpiR3JhuBluybCEuOJ3ACjv\/laqH+EKdwqAKiFI9HA8xYGUgYrn36TGketpH4FXAbwOQPL7leEIN52JSGchVgpb6NL55FTeEg4Dpbev6Q69Ufv54h5kRIA2zKSj\/n4rtU04wk2xeUJYNz0NoE4IVhKAaABPAXhIagC5nm4RoG8py+Rs\/RCucJN60\/PCBLNnIdh7s2rrBqzcjg4BmAiAdoYNWMIVblG96VTbKCFKrQBoyYlVOyA2IatAj8DSk4L0rHfAEs5we6s3q3ZAXEJe4Q4Av5Z6xHY4w+2p3vRvVu2QsxvQgYsA7AXQN2BNYQlMSj2r1iH19ryh5BUS48\/0vwHQYVH\/G8jVcFduis9zQpDuCRQs\/rshIkDbPdAhrc8H8kYO3Jk2my0nMTExu7GxMb21tTUmkHH+e2giEBUV1RIfH19RX19f4nK56EsPevBGmyyrAAAd20lEQVTIKiUXwDBh64cuxyQJ7ri4uGfb29vvzM3N7ZaVlRU5ZMgQJCQkWCVYlhtHQ0MDDhw4gNLS0rbVq1d3RERErG9qavqdRQZKYL8AgN7SCQru\/na7\/d3x48enFRYWxjLQgcJpvL8T6Hl5ec5t27Yddzgc16t5ckEIR9sCgL50a+rKhy6V2263H8zLyxu8YMGCEI6Du1YjAsuWLUNhYeEhh8NxqRr2QmyDDmd9EAAdse23+IWbUpHs7OycDRs2xIZ4INy9ShGYOnWqs6SkZJMFUhQ6YoRWTYqUwJ0ZExPzeXV1dRSnIiqRZQAzlKIkJye3trS0XG7ym0w6u5LOjL9LNtw2m23ZnDlzHigoKIg0wJywCypGID8\/v62oqGi5y+Uyc65JYP8JwBWy4aZcu6SkZPDo0aNVDCubMkIEysrKkJ2dbfbcO0548I027JGXc0dFRTXX1NTEcEpiBBzV9YFSk759+7a0trZ2CYa6vWpi7WsA\/wngiD\/r\/m4oOzo6OjTxiI2GPgLdurmnXdJ3HKH31q8HdKwfPSX4BsNt4FnS2zWLwE0Pup0A8DTDrTdBBu7PInDT1\/A\/A0Cvn\/ksnJYYGEKtXLMI3HSkyAMAxjDcWpFiQrsWgfsSADu62gGWlduEcAbrskXgjgBAb09dwModLBEWam8RuGlGvhG2e6Cf5xVWbgtBK3UoFoL7IwD0kjf9ZLilAmDlehaCuwTAXwDQT4bbytBKHZuF4C4GQHuZ0E+GWyoAVq5nIbgXCvvO0E+G28rQSh2bheCmV+foixyfr9DxDaVUIixUz0Jw3waAzomnn6zcFmJU8VAsBDe9E0rb3\/n8lpKVWzEi5m1oIbjpTfg1AIazcpuXR1U9txDcgwDQo6\/\/YTi4HQ4HJk2ahB076BGBH8vu3bsxYoSs409UnXzRr4ULF4bUD1UH5WHMQnAnA9gHoL9h4faE6PDhw5g4cSJWrVoVMrAYbq0uK9Xt9gRwDIDPHaJCmnP7g2jLli3YtWsXVqxYge7du2PPnj0YOXKkOzLTp093\/57K3LlzkZKSgkWLFrn\/f8mSJaALhcrSpUt9\/l68eGhHprFjx4L6stvt50Q9ENzUZvLkye42tPvW1q1bUVdXh02bNnX6TP2sW7cOjz76aKeva9ZQegiIn0xUZ\/bs2e7fkZr68kV1HIS+LPAmDoWG9lanzUu9DxE4G1M\/wdPlNTN\/ENGkL168GMXFxW5oCICVK1ciLS2tE+h58+a5\/02FYN+\/fz9mzpx5Hmj090ceeQTTpk1DUlKSOw0SPynoAqiqquoEUoxFV3DThUbtRBDp31RmzJiBWbNmuf3OzMx0\/50K9SfWoX6pvegn\/T0Un1IWSksohC7hycDz3os0PNxvv\/32eSpOCvn444\/j4YcfxqhRo9wAEZAiXN4qKkLrDabnReSp3oGU21MQCOLy8nL3BUMQX3fddRg6dKjfC6q5udl9Uebk5LgvNvHCpQtCr2IxuOmxV9qKmk7GOKcYEm5PCAluMQUQPad0gj7yCSaChG4+PeEWlVNst3nzZvcF4JneiLbEtMITrq7gFuEUUwyyI6ZDZP+9997DhAkTOlMSp9Pp86aZfBo+fHjnJ5R3aqQl6BaD2wmA8spmU8DtmXO\/9tprncro6bynAvqCW6zrWY9+55kX+wOoK7i97wc8lZvazZ8\/352W9OnT57xPFG919vfJoSXY7lzUGm+\/i2H6QTikiyA3tnJ7r5aIN12UcxMcYp4spiW+lHvv3r2dFwTB7S\/nJjAJdu8bOalwi6pMF5fnjWxJSYk79xdh9sy5PcdHaYl4b8HKrfiSNjbcgda5PdMJcYUjNja2M3f1Vm7xxlNMHcS0hMLnuVriKyWhOl2tvw8ePLgzzSBfcnNz8dZbb52zsuP96eCdyoj+sHIrBtqzIW1nTEuClHsbR7lVGZrBjJBKZ2RkuC8AoxaLpSXtwlLgGYZbI+JEdSbz4vq8Rl0FbdZCcNPLwaTY9LLweSWkqyVBzxIbUBQBC8F9IYCTAOgnw62IBos1shDcdHTIQWG1hOG2GKeKhmMhuNMBvA+AfjLcimiwWCMLwf1TAPScA50UwXBbjFNFw7EQ3PQ03RMARjHcilCwXiMLwX0zADofh36yclsPVfkjshDcUwFcC4B+MtzyUbBeCwvBPQ9APwD0k+G2HqryR2QhuJcDqANAPxlu+ShYr4WF4N4IYCcA+slwWw9V+SOyENwE9pMC4Ay3fBSs18JCcNMmmP8tfEvJcFsPVfkjshDc9Cx3XwBNnJbI58CSLSwCN0H9LwB9\/E0SPxVoSXy7HpRF4Kbz34sA\/JzhDkOI\/U66Nd6hpLdBxgG4QxbcfPa7da8EC539vhiADcDZHZmkLgXa7faDJSUlg0ePHm3dWQ7TkZWVlSE7O\/uQw+G41OQhoLNwtgPYLAtum822bM6cOQ8UFBREmjwA7L5XBPLz89uKioqWu1yuBSYPzn7hoam9suAGkBkTE\/N5dXV1VEKCzz0GTR6X8HSfUpLk5OTWlpYWev75sMmjQG+99wJw3n4l4rj8rZYgLi7u2ezs7JwNGzbEmjwI7L4QgalTpzpLSko2NTU1+TxDxkSBopSq1N++3AHhpgqUe+fl5Q1esMDsn2AmmjaNXF22bBkKCwutkGtThOgcnIkAsrsKl1\/lFhr1t9vt744fPz6tsLAwllMUjcjT0CylInl5ec5t27YddzgcdIbMCQ2708v0Y8KWDkuCgdvdllKU9vb2O3Nzc7tlZWVF0k5NDLpe8yi\/HwKa9h8vLS1tW716dUdERMR6C6QinoGgVZLVAN4IGm7BQKbNZstJTEzMbmxsTG9tbY2RH3ZuoUcEoqKiWuLj4yvq6+tLXC7XJgvcPHqHrQbAUABVasGtx7yEoo9HhE346UsBLsaPwCUA3gVwcSBXA+Xcgdpb4e8Mt7lmkb5up8dcfR6s6jkUhhsguKmcPbyGi9EjsFI45OmZQI4y3GfhpjhwWhKIFmP8\/TMAcwB8GMgdhpvhDsSIkf5O+3B\/C6C7FKcYboZbCidGqTNeUO0bpDjEcHPOLYUTo9ShLRy+B7BMikMMNyu3FE6MUofy7XwAu6Q4xHAz3FI4MUIdemfy38L5N5L8YbgZbkmgGKASrW\/fCuDXUn1huDnnlspKqOttAPCJ8EyJJF8YblZuSaAYoBI9zUj7cH8t1ReGm+GWykoo640AUAzg\/8pxguFmuOXwEqq69Pw2lflyHGC4OeeWw0uo6h4AkCvlK3dPBxnuH58p4WdLQoVu1\/3+HwBv+juxrKumDDfDbUykf\/SKUhHaD5AelpJVGG6GWxYwIahM30o+AODvcvtmuBluuczoWf8nQkoS8K0bX04x3Ay3nrDK7Yvug+IB3Ce3IdVnuBluJdzo1eZ\/AdwN4CMlHTLcDLcSbvRoQ6cD\/9nf0ddSHGC4GW4pnISiziph64bHlXbOcDPcStnRsh1xeUrYm+So0o4YboZbKTtatpsM4HYA9FqZ4sJwM9yK4dGw4Q4ALwDYGkwfDDfDHQw\/WrSlr9v\/BqB\/sMYZboY7WIbUbv8UgDYADwdrmOHmR16DZUjN9sRjHYCrhPclg7LNcP\/4zMIvg4okN1YjAvcA+JWc9yS76pThZuVWA0q1bNA7krShPD3iGnRhuBnuoCFSyQDtIkWb7sh6lYyVu+vo8y6vKtEZpJkSYZXk2SDtdDZn5WblVoulYOz8FMBOALTxjmqF4Wa4VYMpCEN0vg3t3qrqHukMN8MdBJOqNE0FQM+PJAvLgKoYJSMMN7\/9rhpMCg39EUAUgLkK2\/ttxnCzcqvNlBx7dLw1nUh2maDectoGrMtwM9wBIdGwAuXY9GY77UmiemG4z+Z7VAaoHl022FUEegiqPVyrczIZboY7VJcgqXY\/ANO1coDhZri1Yqsru5RrfyN8G0kbymtSGG6GWxOwAhh9AgClJTO17JzhZri15MuXbVrXPgYgQ\/ipWf8MN8OtGVx+DNM+2z8A+IPWHTPcDLfWjHnap+3R9gg7ttZr3THDzXBrzZin\/ZcA0F7bT+rRKcPNcOvBGfVxPYA1AC7Rq0OGm+HWi7X3AdCJZPSfLoXhZrj1AO1OAL8FcK0enYl9hCvcKcJXvxQH76\/fPf+m51xYta8LhOP1CHDZG8gHE5RwhJv2e94PoFJYjhJ3NZoIgB6\/pHXYoQAagwkst+2MwDJhg5279I5JOMJNMaZvyO4HcBqATXiu\/QyAaAC0KcxDek+ERfujR1lJSAYJX7frOsxwhZvUu1aA2TPgBHtvVm3VGHwNwMfCW+2qGZVqKFzhFtU7X3gLhP6\/FUABq7ZUdALWo11a5wGgR1pDUsIZbm\/1ZtVWD8EI4RltejDqbfXMyrMUznCL6k3HwFGhDWE415bHj7\/adN+SAIC2RwtZCXe4Sb0bhBvKnpxrq8Lh1QBeBzBY7bfZ5XoX7nBTvE4IQQt6P2i5wbdo\/V3Ct5DrQj0+OXBn2my2nMTExOzGxsb01tbWmFA7z\/37jkBUVFRLfHx8RX19fYnL5dqk1TuKPnqnx1hJubOMMDeS4I6Li3u2vb39ztzc3G5ZWVmRQ4YMQUICpVRcjBiBhoYGHDhwAKWlpW2rV6\/uiIiIWN\/U1PQ7jX2lx1n\/CYBORjiscV+SzAeCu7\/dbn93\/PjxaYWFhbEMtKSYGqoSgZ6Xl+fctm3bcYfDQU\/miWmY2n7SOTZvAShU27BSe13CbbfbD+bl5Q1esGCBUvvcziARWLZsGQoLCw85HI5LNXCJvi+4EcB\/amBbsUm\/cFMqkp2dnbNhw4ZYxda5oaEiMHXqVGdJSckmlVMU2qGVXkCgn3SctWGKP7gzY2JiPq+uro7iVMQwcxW0I5SiJCcnt7a0tFyuYl5MWw+\/AaAoaAdVNuATbpvNtmzOnDkPFBQURKrcH5sLcQTy8\/PbioqKlrtcLjVyzfkArjTK6oh3aH3CTbl2SUnJ4NGjR4d4Krh7tSNQVlaG7OxsNXLvEcIN5BAtNrFUY9w+4Y6KimquqamJ4ZREjRAbywalJn379m1pbW3tHqRn9CjrSj1fG5Prr7+cu6Ojo0OuLa5vkgh06+ae9kDLwF2NhvLrOADTjDxkhtvIs6ORb0HCTW8s0SaWdOpYs0YuqmKW4VYljOYyEgTcFwtv1kwA8K7RR81wG32GNPAvCLi3CztGPaaBW6qbZLhVD6nxDSqEe7GQihjioSgpUWa4pUTJYnUUwH0zADr8lF4ZqzZLOBhus8yUin7KhJv2cdkrvFWzTUU3NDfFcGseYuN1IBNuyrM\/ArDUeCPp2iOG22wzpoK\/MuCm3Vhp48pbVehWdxMMt+4hD32HEuGehLPHGNKzI\/SeqekKw226KQveYQlw0xc0tJnOGAD0TqQpC8NtymkLzukAcNO7sZRj0+oI7adt2sJwm3bqlDvuATdt+kn\/kUqLhU4\/qAGQp7wHY7RkuI0xD7p64QH3hwLcaYID9MwI5di\/0tUhjTpjuDUKrJHNesBNB50mCu8\/DhRuIGlrhpNG9l+qbwy31EhZqJ4Ad7LwkgHl2HSkB516QC8gkJpbooQUbofDgUmTJmHHDtoV4Meye\/dujBhBcQ5NEf1auHBhSP3QavQC3LR2\/YJwki\/tTV4OYK0AtyUANwTcnhAdPnwYEydOxKpVq0IGVpjAvcrH8dRtAAj0VwFM0eri0suu4eCmgW\/ZsgW7du3CihUr0L17d+zZswcjR450x2T69Onu31OZO3cuUlJSsGjRIvf\/L1myBHShUFm6dKnP34sXD+3INHbsWHdfdrv9nHgHgpvaTJ482d2Gdt\/aunUr6urqsGnTpk6fqZ9169bh0UfpHu2sr2vWnF1ZEz+ZqM7s2bPdvyM19eWLFiAIyv0lADr5QCzfAXAKu92KKyZadK+bTUPCTZO+ePFiFBcXu6EhAFauXIm0tLROoOfNm+f+NxWCff\/+\/Zg5c+Z5oNHfH3nkEUybNg1JSUnuNEj8pKALoKqqqhNIMepdwU0XGrUTQaR\/U5kxYwZmzZrl9jszM9P9dyrUn1iH+qX2op\/091B8Sglw03uENP9NAL4A8AyAv+pGng4dGR7ut99++zwVJ4V8\/PHH8fDDD2PUqFFugAhIES5vFRXj6A2m50Xkqd6BlNtzXgji8vJy9wVDEF933XUYOnSo3wuqubnZfVHm5OS4LzbxwqULQq8iwE0qTU\/50WkSn+jVt579GBJuTwgJbjEFEAND6QR95BNMBAndfHrCLSqn2G7z5s3uC8AzvRFtiWmFJ1xdwS3CKaYYZEdMh8j+e++9hwkTJnSmJE6n0+dNM\/k0fPjwzk8o79RISwgEuOlRVq32DdTSfcm2DQm3Z8792muvdSqj56g8FdAX3GJdz3r0O8+82F+UuoLb+37AU7mp3fz5891pSZ8+fc77RPFWZ3+fHJJnT2FFCc+WKLRsrGaGg9t7tUS86aKcm+AQ82QxLfGl3Hv37u28IAhufzk3gUmwe9\/ISYVbVGW6uDxvZEtKSty5vwizZ87tOT5KS8R7ixAodzBbOxiLYj\/eGALuQOvcnumEuMIRGxvbmbt6K7d44ymmDmJaQjHwXC3xlZJQna7W3wcPHtyZZpAvubm5eOutt85Z2fH+dPBOZUR\/WLm1vUZCCre2QwuNdVLpjIwM9wVg1MJpCe84JYtNUZ2pkbg+L8uAjpUZboZbR9z07YrhZrj1JU7H3hhuhltH3PTtiuFmuPUlTsfeGG6GW0fc9O2K4Wa49SVOx94YboZbR9z07YrhZrj1JU7H3hhuhltH3PTtiuFmuPUlTsfeGG6GW0fc9O2K4Wa49SVOx94YboZbR9z07YrhZrj1JU7H3hhuhltH3PTtiuFmuPUlTsfewhpuPvtdR9J07krFs9919lx+dz5fM7Pb7QdLSkoGjx49Wr5FbmHoCJSVlSE7O\/uQw+G41NCOquCcT7htNtuyOXPmPFBQUBCpQh9swkARyM\/PbysqKlrucrkWGMgtTVzx94JwZkxMzOfV1dVRCQkJmnTMRvWPAKUkycnJrS0tLZfTRgD6e6Bvj373roiLi3s2Ozs7Z8OGDbH6usS9aRWBqVOnOktKSjY1NTX9Tqs+jGS3y41ZKPfOy8sbvGCB5T\/BjDQnmviybNkyFBYWhkWuLQYw0K5D\/e12+7vjx49PKywsjOUURRPuNDVKqUheXp5z27Ztxx0Ox\/VW3x\/QM5iB4HbXpRSlvb39ztzc3G5ZWVmRtFMTg64pk0EZJ6Bp\/\/HS0tK21atXd0RERKwPl1RENtxCg0ybzZaTmJiY3djYmN7a2kpnqXAxYASioqJa4uPjK+rr60tcLtemcLh59DUNkpTbgPOnpkt0BDTFYbGaRtlW6CPAcJ8935zhDj2LqnvAcJ+Fm8rZw2u4WCYCDDcrt2Vg9h4Iw81wM9yWjQDDbdmpZeXmnJvhtmwEWLktO7Ws3Aw3w23ZCDDclp1aVm7OuRluy0aAlduyU8vKzXAz3JaNAMNt2all5eacm+G2bAR+fNSVH3m12CSzcjPcFkP6x+Ew3Aw3w23ZCDDclp1aVm6Gm+G2bAQYbstOLSs3w81wWzYCDLdlp5aVm+FmuC0bAYbbslPLys1wM9yWjQDDbdmpZeVmuBluy0aAH3m17NSycgN\/F2b3l5ad5TAdGMPNym1Z9BluhpvhtmwE+E0cy04tKzcrN8Nt2Qgw3JadWlZuhpvhtmwEOOe27NSycrNyM9yWjQDDbdmpZeUGjgqzO8CysxymA2O4GW7Los9wM9wMt2UjwHBbdmpZuRluhtuyEWC4LTu1rNwMN8Nt2Qgw3JadWlZuhpvhtmwEGG7LTi0rN8PNcFssAikAqoQxeX\/97vk3iw07vIYTjsodD2A\/gEoAfwCwVZjyiQD+CCAVwFAAjeGFgvVGG45w0yw+AeB+AKcB2ABQHM4AiAbwFICHrDfV4TeicIWb1LtWgNlz1gn23qza1rgQwhVuUb3zAUQJU9kKoIBV2xpg0yjCGW5v9WbVtg7X7pGEM9yiej8gzOlyVm1r0R3ucJN6NwgXeU\/OtRlua0UAOCEMqL\/VBhbu49FDuVMGDRq0+8iRI+nhHmyl4x80aFDFkSNHRnp88aTUVFi10xzu2NjYP91zzz33FhYWiqsSYRVgNQabl5fX+txzz611Op2\/V8NeuNjQGm76KruysrISKSn0Ty5KIlBVVYXUVPri1P3tqfjYgBJTYdVGU7hZtdVjidVbfiy1hJtVW\/58+G3B6i0\/mJrBzaotfzICtWD1DhShc\/+uFdys2vLmQVJtVm9JYeqspAncrNryJkFObVZv6dHSAm5Wbenxl12T1Vt6yFSHm1VbevCV1mT1lhY5teFm1ZYW96BqsXpLC5+qcLNqSwu6GrVYvQNHUU24WbUDx1u1GqzegUOpGtys2oGDrXYNVu+uI6oW3KzaapMrwR6rtw5ws2pLIFGjKqze\/gOrhnKzamsErhSzrN4aws2qLQVBbeuwevuOb7DKzaqtLbeSrLN6awA3q7Yk9nSpxOp9fpiDUW5WbV2wldYJq7eKcLNqS4NOz1qs3udGW6lys2rrSa3Evli9VYCbVVsibSGoxur9Y9CVKDerdgigldolq3cQcLNqS8UsdPVYvc\/GXq5ys2qHjlnJPbN6K4CbVVsyXyGvyOotT7lZtUOOrHQHWL1lwM2qLR0so9QMd\/WWmnOzahuFWBl+hLt6S4KbVVsGUQarGs7qLQVuVm2DASvHnXBW74Bws2rLQcmYdcNVvQPBzaptTF5leRWu6t0l3GZR7cOHD2PixIk4cOCAe9KXLFmChQsXBgTA4XBg1qxZWLx4MTIzMwPW91WB+qb2xcXFsNvtimzo0Sgc1bsruE2h2nv27MHMmTOxdevWTkCXLl0KUqsVK1age\/fuftkJJ7jDUb39wm0G1W5ubsbcuXORk5ODESNGdELs+fuhQ4eeU0cE+sEHH8Tq1auxZs0aDBkyBC+++KL7\/6n+n\/\/8Z\/enwObNmzFp0iR4qzNdUJs2bXJ\/OkybNg07duzA2LFjsWXLFlZvPT6GJPbhD25TqHZXKQGpN5V58+b5hJtSiaSkpM60JC0tzV2voqLCDWldXR1mz56NlStXuu14ph4i3PTJcPz4cVOkJTSGcFNvn3CbQbVpsrqCmwAtLy+XDfeoUaPcak2FLpCMjAwMHz7cEnDTmMIp9\/YFd\/9LLrnkw5dffvniYcOGSfwACE01LeD2THGsCPe+fftw++23H\/vqq6+uxo8HzIZmAjXu1dTKrSTnpgtCTDd8pSWicou26f+9lZs+FXbt2uW+YTVTWsLKffZqMkXOTY4GWi2hOpRL0zmYdANIYD711FPu1RVfcFN9EVrPnJuWGletWuW+4SR7nvXMsBTIObfHx4RZ8m4x9+5qndtzHbygoACffvqpO4cWbyI\/\/vjjztUSuggWLVrkjsTu3bs7V2Hoopg8ebJ7ZWXGjBnYv3+\/+yJwOp2dOTqvlmicZ8g0b\/p1bpnj9VvdX4qjlv1Q2wm3lRKKtyW+oVQDHKvDHU6rJCIP\/GyJGleGwW2Eo2oHVG6qYKbc2+CMhcy9cFRtSXCbaeUkZPQYuONwVW2pcLN6GxjeQK6Fq2pLhpvVOxBCxvx7OKu2HLhZvY3Jb5dehbNqy4Kb1dtcdIe7asuFm9XbRHyHu2rLhpvV2xx0s2qfnadAX+KcN5u87m18wFm1FcLN6m1suFm1f5wf2crN31oaG25W7SDhZvU2JuCs2ufOiyLlZvU2Jtys2irBzeptLMBZtc+fD8XKzeptLLhZtVWGm9XbGICzavueh6CUm9XbGHCzamsEN6t3aAFn1fYf\/6CVm9U7tHCzamsMN6t3aABn1e467qooN6t3aOBm1dYJblZvfQFn1Q4cb9WUm9U7cLDVrMGqHTiaqsLN6h044GrUYNWWFkW14ea3daTFPaharNrSwqc63Kze0gKvtBartvTIaQE3q7f0+MuuyaotPWSawM3qLX0C5NRk1ZYTLQXvUEo1z+9aSo2U9Hqs2tJjRTW1Um6ybZrTGeSFLDS1WbXlx11LuDn3lj8ffluwassPpqZws3rLnxBfLVi1lcVRa7hZvZXNyzmtWLWVBVFzuEm9Bw0atPvIkSPpylzkVoMGDao4cuTISDoEmKMhPQJ6wC3dG67JEVAxAgy3isFkU8aKAMNtrPlgb1SMAMOtYjDZlLEiwHAbaz7YGxUj8P8B8AcZ1mfNn58AAAAASUVORK5CYII=\" style=\"cursor:pointer;max-width:100%;\" onclick=\"(function(img){if(img.wnd!=null&&!img.wnd.closed){img.wnd.focus();}else{var r=function(evt){if(evt.data=='ready'&&evt.source==img.wnd){img.wnd.postMessage(decodeURIComponent(img.getAttribute('src')),'*');window.removeEventListener('message',r);}};window.addEventListener('message',r);img.wnd=window.open('https:\/\/viewer.diagrams.net\/?client=1&page=0&edit=_blank');}})(this);\"\/>","8519f062":"<h1>Heart Failure Prediction with Neural Networks<\/h1>\n\n<h2>Table of Contents<\/h2>\n\n* [Problem Statement](#1)\n    \n* [Project Objectives](#2)\n    \n* [Importing Libraries and Read In Dataset](#3)\n\n* [Visualizing the Data](#4)\n    \n* [Data Preprocessing](#5) \n\n* [Creating the Neural Network](#6)\n\n* [Conclusions](#7)","30dd63cb":"<h5>The dataset is balanced with 55%-45% split<\/h5>","de1004b9":"<h5>Findings for each catagoric variable:<\/h5>\n\n<ul>\n    <li><strong>Sex<\/strong> - males have quite a higher chance of getting heart disease than females.<\/li>\n    <li><strong>ChestPainType<\/strong> - patients with ASY chest pain have a far higher chance of having heart disease than other types of chest pain. This is followed by TA chest pain (50% chance), NAP (under 50%) and ATA (low risk).<\/li>\n    <li><strong>RestingECG<\/strong> - ST patients have a slight higher chance than others.<\/li>\n    <li><strong>ExerciseAngina<\/strong> - patients with 'yes' have a far higher chance of heart disease.<\/li>\n    <li><strong>ST_Slope<\/strong> - Flat and Down patients have far higher chance of heart disease than patients with Up.<\/li>\n    <li><strong>FastingBS<\/strong> - patients with a high fasting blood sugar (> 120 mg\/dl) have a far higher chance of heart disease.<\/li>\n<\/ul>","02dd4e65":"<h5>This architecture contains 3 dense layers and a skip connection in order to not loose any of the more simple connectionswhile building more complex connections.<\/h5>","59441a2a":"<a id=\"7\"><\/a>\n<h2>Conclusions<\/h2>\n\n<ul>\n    <li><strong>There are many factors that can indicate a patient has a heart disease.<\/strong> In fact, almost all featires included in the dataset provided strong indicators of a patients risk for heart disease. These factors should be commonly monitored in patients, especially those patients who are elderly and male.<\/li>\n    <li><strong>The final model correctly detects 100% of the patients who have heart disease.<\/strong> However, lowering the threshold to this level also lowered the accuracy to 74% and precision to 68%. 30% of the patients identified as at risk will not have heart disease, but this is an acceptable amount of false positives for this problem. This will be a great tool for medical professionals in identifying at risk patients.<\/li>\n<\/ul>","4b42aed2":"<h5>The current model accuracy is 87% on the test data and has a recall of around 93%. This recall is good but will allow some at risk patients to slip through the cracks. I will decrease the threshold and reevaluate.<\/h5>","21c0eebe":"<a id=\"3\"><\/a>\n<h2>Importing Libraries and Read in Dataset<\/h2>","ea70a451":"<h5>To note for late: RestingBP and Cholesterol both have minimum values of 0.0, this is impossible for a living person. This is most likely a place holder for missing values and will be treated as such later.<\/h5>","325c386c":"<a id=\"5\"><\/a>\n<h2>Data Preprocessing<\/h2>\n\n<h5>Now that we better understand the data, the data can be processed to feed to the neural network. This will involve taking care of the 0 values for Cholesterol and RestingBP. Because Cholesterol was not a significant indicator of whether a patient has heart disease, it will be dropped. The 0 value for RestingBP will be filled with the average. After this, the catagoric variables need to be encoded and numeric variables scaled. Finally, the data set will be split into train, validation and test datasets.<\/h5>","6d371eac":"<a id=\"6\"><\/a>\n<h2>Creating the Neural Network<\/h2>","1dee5894":"<h3>About Each Attribute<\/h3>\n\n<ul>\n<li>Age: age of the patient [years]<\/li>\n<li>Sex: sex of the patient [M: Male, F: Female]<\/li>\n<li>ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]<\/li>\n<li>RestingBP: resting blood pressure [mm Hg]<\/li>\n<li>Cholesterol: serum cholesterol [mm\/dl]<\/li>\n<li>FastingBS: fasting blood sugar [1: if FastingBS &gt; 120 mg\/dl, 0: otherwise]<\/li>\n<li>RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of &gt; 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]<\/li>\n<li>MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]<\/li>\n<li>ExerciseAngina: exercise-induced angina [Y: Yes, N: No]<\/li>\n<li>Oldpeak: oldpeak = ST [Numeric value measured in depression]<\/li>\n<li>ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]<\/li>\n<li>HeartDisease: output class [1: heart disease, 0: Normal]<\/li>\n<\/ul>\n\n<p>Source - <a href=\"https:\/\/www.kaggle.com\/fedesoriano\/heart-failure-prediction\">Kaggle - Heart Failure Prediction Dataset<\/a><\/p>","0dec6ce0":"<a id=\"2\"><\/a>\n<h2>Project Objectives<\/h2>\n\n<ul>\n    <li>Determine what makes a person at risk for heart disease<\/li>\n    <li>Create a machine learning model to perform early detection of cardiovascular dieseases for patients<\/li> \n<\/ul>\n","21792e2d":"<h5>Findings for each numeric variable:<\/h5>\n\n<ul>\n    <li><strong>Age<\/strong> - older patients have a higher risk of heart disease.<\/li>\n    <li><strong>RestingBP<\/strong> - patients with a higher resting blood preasure have a slightly higher risk of heart disease<\/li>\n    <li><strong>Cholesterol<\/strong> - based on the data it is difficult to determine if cholesteralis an indicator for heart disease. It is worth noting that for the 0 values (filler values), a vast majority of patients had heart disease.<\/li>\n    <li><strong>MaxHR<\/strong> - patients with a lower maximum heart rate have a higher chance of heart disease.<\/li>\n    <li><strong>OldPeak<\/strong> - patients with higher values are at risk for heart disease.<\/li>\n<\/ul>","05839152":"<a id=\"1\"><\/a>\n<h2>Problem Statement<\/h2>\n<p>\n    Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age. Heart failure is a common event caused by CVDs and this dataset contains 11 features that can be used to predict a possible heart disease.\n\nPeople with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n<\/p>\n<p>Source - <a href=\"https:\/\/www.kaggle.com\/fedesoriano\/heart-failure-prediction\">Kaggle - Heart Failure Prediction Dataset<\/a><\/p>","a16591ee":"<h3>Diagram of Neural Network Architecture<\/h3>","d3301fba":"<h5>The best validation accuracy score is around 87%. This is not bad, next the model will be evaluated on the test set.<\/h5>"}}