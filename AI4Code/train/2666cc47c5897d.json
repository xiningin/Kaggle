{"cell_type":{"dfa19cb4":"code","cfbe1221":"code","6e110c15":"code","ce7f6be4":"code","7d90c055":"code","f78d17f7":"code","e58d32f3":"code","8b4c7fb3":"code","91200aac":"code","d0aaf563":"code","cb6b9c4b":"code","33cc639b":"code","5193b007":"code","eba91ea5":"code","abad6838":"code","417e09fc":"code","d6af27b0":"code","c5adc527":"code","1a03db58":"code","9cf8e073":"markdown","24efd883":"markdown","45410970":"markdown"},"source":{"dfa19cb4":"# importing the libraries\n\nimport numpy as np \nimport pandas as pd \n\nfrom tensorflow import keras\nfrom keras.layers import Conv2D,MaxPool2D,Dense,Dropout,Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import confusion_matrix","cfbe1221":"data = pd.read_csv(\"..\/input\/hmnist_64_64_L.csv\")      # reading the data","6e110c15":"data.head()            # first few rows to get idea","ce7f6be4":"# splitting the labels and features\n\nY = data[\"label\"]\ndata.drop([\"label\"],axis=1, inplace=True)\nX = data","7d90c055":"# creating the countplot\n\nplt.figure(figsize=(15,7))\ng = sns.countplot(Y, palette=\"winter_r\")\nplt.suptitle(\"Amount of each classes\")\nplt.show()","f78d17f7":"# it is very well balanced\nY.value_counts()         # each are 625 per column (perfect dataset?)","e58d32f3":"X = X \/ 255.0     # scaling by hand since we know the max value","8b4c7fb3":"img = X.iloc[75].as_matrix()\nimg = img.reshape(64,64)\nplt.imshow(img)\nplt.suptitle(\"An example of image on the dataset\")\nplt.show()","91200aac":"# Reshaping\nX = X.values.reshape(-1,64,64,1)       # shaping for the Keras\nY = Y.values","d0aaf563":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding for better results\nY = to_categorical(Y)","cb6b9c4b":"# Splitting train and test\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(X, Y, test_size = 0.2, random_state=42)","33cc639b":"print(\"x_train.shape: \",x_train.shape)\nprint(\"x_val.shape: \",x_val.shape)\nprint(\"y_train.shape: \",y_train.shape)\nprint(\"y_val.shape: \",y_val.shape)","5193b007":"model = Sequential()\n\nmodel.add(Conv2D(filters = 128, kernel_size = (5,5),padding = 'same',activation ='relu', input_shape = (64,64,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation = \"relu\"))          \nmodel.add(Dense(64,activation = \"relu\"))\nmodel.add(Dense(32,activation = \"relu\"))\n\nmodel.add(Dense(9, activation = \"softmax\"))","eba91ea5":"model.summary()","abad6838":"model.compile(optimizer = \"Adam\" , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","417e09fc":"datagen = ImageDataGenerator(\n        rotation_range=0.5, \n        zoom_range = 0.5, \n        width_shift_range=0.5,  \n        height_shift_range=0.5, \n        horizontal_flip=True, \n        vertical_flip=True)\n\ndatagen.fit(x_train)","d6af27b0":"model.fit_generator(datagen.flow(x_train,y_train, batch_size=200),\n                              epochs = 20, validation_data = (x_val,y_val), steps_per_epoch=500)","c5adc527":"# Predict the values from the validation dataset\nY_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(18, 16))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"summer_r\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","1a03db58":"# I am beginner, please comment your advices for the kernel. thanks for reading :)","9cf8e073":"# Introduction\n\n## I am going to apply CNN on the 64x64 Grayscaled data and check the results","24efd883":"# Conculusion\n\n## I am quite happy by the result, we can see it's reached almost 90% accuracy which is acceptable for me.","45410970":"## ** CNN **"}}