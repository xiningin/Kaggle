{"cell_type":{"8dcea03c":"code","c21f5200":"code","0c4ba284":"code","34fdac71":"code","e7ce2dbd":"code","01718a26":"code","6969feeb":"code","6886bdfd":"code","b4a36e15":"code","69538024":"code","bdb89ecf":"code","74e09181":"code","88116c3c":"code","d3b1c712":"code","b294cf02":"code","66ce0e96":"code","99a0a2e0":"code","c41e1809":"code","8c4e00b3":"code","f7ce8740":"code","74bbe27f":"code","65fb39b7":"code","620e59b9":"code","11d92568":"code","adfc15fa":"code","70cd1d51":"code","dc2915ab":"markdown","51cad211":"markdown","0f597532":"markdown","5381f632":"markdown","fef3b4bb":"markdown","64f90c2c":"markdown","54416e53":"markdown","a06e202a":"markdown","75167b34":"markdown","633af423":"markdown","52b22de6":"markdown","dfc17507":"markdown","8d62805b":"markdown","e8c16a06":"markdown","27fe4e48":"markdown","7f3c3357":"markdown","a3d42e33":"markdown","a6a3b7a2":"markdown"},"source":{"8dcea03c":"#Data Wrangling\nimport numpy as np\nimport pandas as pd\n\n#Data Visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nsns.set()\n\n#Model selection\nfrom sklearn.preprocessing   import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model    import LinearRegression\nfrom sklearn.neighbors       import KNeighborsRegressor\nfrom sklearn.tree            import DecisionTreeRegressor\nfrom sklearn.ensemble        import RandomForestRegressor\nfrom sklearn.ensemble        import GradientBoostingRegressor\n\n#Model evaluation\nfrom sklearn.metrics         import mean_squared_error","c21f5200":"path = '..\/input\/pizza-price-prediction\/pizza_v1.csv'\ndf = pd.read_csv(path)\ndf.head()","0c4ba284":"df.info()","34fdac71":"# clean the col price_rupiah\ndf['price_rupiah'] = df['price_rupiah'].apply(lambda x:x.replace('Rp', '').replace(',',''))","e7ce2dbd":"df.head()","01718a26":"# convert the type to float\ndf[\"price_rupiah\"] = df[\"price_rupiah\"].astype(float)","6969feeb":"df.info()","6886bdfd":"# Create a function that print the Value Counts for the columns that the type is object\ndef value_counts(data):\n    for i in data.columns:\n        if df[i].dtypes == 'object':\n            print(data[i].value_counts())\n            print()\n            print('The Number of Unique Values are : {}'.format(df[i].nunique()))\n            print()\n            print('-----------------------------------------------------------')\n            print()","b4a36e15":"value_counts(df)","69538024":"plt.figure(figsize = (10,6))\nsns.swarmplot(x = 'size', y = 'price_rupiah', data = df)\nplt.show()","bdb89ecf":"sauce_cheese_map = {'no' : 0,\n                     'yes': 1}\nsize_map = {\n    'small'   : 0,\n    'medium'  : 1,\n    'large'   : 2,\n    'XL'      : 3,\n    'reguler' : 4,\n    'jumbo'   : 5 \n}","74e09181":"df['extra_sauce'] = df['extra_sauce'].map(sauce_cheese_map)\ndf['extra_sauce'] = df['extra_sauce'].astype(float)\n\ndf['extra_cheese'] = df['extra_cheese'].map(sauce_cheese_map)\ndf['extra_cheese'] = df['extra_cheese'].astype(float)\n\ndf['size'] = df['size'].map(size_map)\ndf['size'] = df['size'].astype(float)","88116c3c":"# Make a label Encoder for the rest of columns\nlabencoder = LabelEncoder()\n\ndef label_encoder(data):\n    for i in data.columns:\n        if data[i].dtype == 'object':\n            labencoder.fit(list(data[i].values))\n            data[i] = labencoder.transform(data[i].values)\n            \n            # Change the data type to float\n            for i in data.columns:\n                if data[i].dtype == 'int':\n                    data[i] = data[i].astype(float)","d3b1c712":"label_encoder(df)","b294cf02":"df.info()","66ce0e96":"df.head()","99a0a2e0":"# Make a correlation data to knowing Value Strength and Direction of Linear Relationship\ncorrelation = df.corr()\n\n# Constructing a heatmap to understand the correlation\nplt.figure(figsize=(15, 8))\nsns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8}, cmap='YlGnBu')\nplt.show()","c41e1809":"X = df.drop(['price_rupiah'], axis = 1)\ny = df['price_rupiah']","8c4e00b3":"X.head()","f7ce8740":"X_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                   test_size = 0.2,\n                                                    random_state = 123,\n                                                    shuffle=True)","74bbe27f":"# Create a function to Run the model\ndef run_model(model,X_train, X_test, y_train, y_test):\n    \n    # Fit Model\n    model.fit(X_train,y_train)\n    \n    # Get Metrics\n    y_pred = model.predict(X_test)\n    \n    train_accuracy = model.score(X_train,y_train)\n    test_accuracy = model.score(X_test,y_test)\n    rmse = np.sqrt(mean_squared_error(y_test,y_pred))\n    \n    print(f'Training accuracy   is : {train_accuracy}')\n    print()\n    print(f'Test accuracy       is : {test_accuracy}')\n    print()\n    print(f'RMSE                is : {rmse}')","65fb39b7":"lr = LinearRegression()\nrun_model(lr, X_train, X_test, y_train, y_test)","620e59b9":"k_values = [1,5,10]\n\nfor n in k_values:\n    model = KNeighborsRegressor(n_neighbors=n)\n    run_model(model, X_train, X_test, y_train, y_test)\n    print()\n    print('The Number of neighbors is : {}'.format(n))\n    print()\n    print('--------------------------------')\n    print()","11d92568":"model = DecisionTreeRegressor()\nrun_model(model, X_train, X_test, y_train, y_test)","adfc15fa":"trees = [10,50,100,200, 500]\nfor n in trees:\n    model = RandomForestRegressor(n_estimators=n)\n    run_model(model, X_train, X_test, y_train, y_test)\n    print()\n    print('The Number of estimators is : {}'.format(n))\n    print()\n    print('--------------------------------')\n    print()","70cd1d51":"model = GradientBoostingRegressor()\nrun_model(model, X_train, X_test, y_train, y_test)","dc2915ab":"**2. KNN Regressor**","51cad211":"> The accuracy of the **training** is **100%** and The accuracy of the **Test** is **81.3%**\n\n> There is **overfitting** in this model","0f597532":"**5. Gradient Boosting**","5381f632":"> The best model that the accuracy is **90.6%**","fef3b4bb":"<p style=\"background-color:SlateBlue; color:white;padding:15px\" id='pipline'> Building a pipline function <\/p>","64f90c2c":"> when The Number of neighbors is : **5** , that is the best accuracy of the model \n\n> The accuracy is **85%**","54416e53":"* <a href=\"#Package\"> Package imports <\/a>\n* <a href=\"#quality\"> Quick quality check <\/a>\n* <a href=\"#pipline \"> Building a pipline function <\/a>\n* <a href=\"#Comparing\"> Comparing the performance of each model <\/a>","a06e202a":"> The accuracy is very **bad** that the accuracy is **74.8%** \n","75167b34":"**3. Decision Tree Regressor**","633af423":"> ","52b22de6":"> The correlation between **Price** and **diameter** is **( 0.8 )** \n\n> The correlation between **Price** and **size**     is **( 0.8 )**\n\n> The correlation between **Price** and **company**  is **( -0.3 )** ","dfc17507":"<p style=\"background-color:SlateBlue; color:white;padding:15px\" id='Comparing'> Comparing the performance of each model <\/p>","8d62805b":"<p style=\"background-color:SlateBlue; color:white;padding:15px\" id='quality'> Quick quality check <\/p>","e8c16a06":"> when The Number of estimators is : **200** , that is the best accuracy of the model \n\n> The accuracy is **88.7%**","27fe4e48":"<p style=\"background-color:SlateBlue; color:white;padding:15px\" id=\"Package\"> Package imports <\/p>","7f3c3357":"**4. Random Forest Regressor**","a3d42e33":"<h1 style=\"background-color:SlateBlue; color:white;padding:15px\"> Outline <\/h1>","a6a3b7a2":"**1. Linear Regression**"}}