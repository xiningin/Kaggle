{"cell_type":{"aa5233a5":"code","b77068b1":"code","c4569b6e":"code","f916e40c":"code","a29b8a35":"code","1d68276b":"code","18ab53ef":"code","d65ae96c":"code","aece988a":"code","3ba6037e":"code","aa13250b":"code","a728a904":"code","938f4c05":"code","90ca9525":"code","bda6a739":"code","9a15f8a2":"code","07d4b6fe":"code","362c1ece":"code","4f6ec3d5":"code","aaf6beb2":"code","557832f7":"code","64a5816f":"code","ab2ae3cd":"code","a6677d40":"code","04f940f8":"code","f34c9a5c":"code","38f2ddb3":"markdown","5d531dc1":"markdown"},"source":{"aa5233a5":"#libraries import\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport numpy as np\nimport plotly.graph_objects as go\n%matplotlib inline","b77068b1":"#check of data\nNY = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\n\nNY.head()","c4569b6e":"NY.info()\nprint('\\nnumber of rows: '+ str(len(NY)))","f916e40c":"#deleting columns: id(not importannt), host_name (deleting due to matter of privacy and missing values, moreover we can use host_id instead of host_name)\n\nNY = NY.drop(['id', 'host_name'], axis = 1)\n\nNY.info()","a29b8a35":"#checking null values\nNY.isnull().sum()\n#x = NY.isnull().sum().sort_values(ascending = False)[:5]\n#y = NY.isnull().sum().sort_values(ascending = False)[:5].index\n#plt.figure(figsize=(5,3))\n#sns.barplot(x,y, palette = \"GnBu_d\")","1d68276b":"#let notice that if the number_of_reviews is 0 then there last review and reviews_per_month values is null\nNY1 = NY[NY.isna().any(axis = 1)]\nNY1.head()","18ab53ef":"NY['reviews_per_month'].mean()","d65ae96c":"NY['reviews_per_month'].fillna('0', inplace = True)\nNY.drop(['last_review'], axis = 1, inplace = True)\nNY['name'].fillna('Unknown', inplace = True)","aece988a":"NY.isnull().sum()","3ba6037e":"# We will skip the first column NAME as I will try to apply some NLP methods on this column later.\n# So lets begin with the second column and so on.\n\ntop_hosts = NY['host_id'].value_counts()[:15]\ntop_hosts","aa13250b":"#hosts with just one listing\none = NY.loc[NY['calculated_host_listings_count']== 1].iloc[:, 11]\none.sum()","a728a904":"max_l = NY['calculated_host_listings_count'].max()\nmax_l","938f4c05":"NY['neighbourhood_group'].unique()","90ca9525":"NY.groupby('neighbourhood_group').agg('count').reset_index()","bda6a739":"NY.neighbourhood.unique()","9a15f8a2":"types = NY['room_type'].unique()\n#NY['room_type'].loc[NY['room_type']== 'Private room'].count()\nroom_shares= []\nfor type in types:\n    type_count = int(NY['room_type'].loc[NY['room_type']== type].count())\n    share = (type_count\/len(NY))*100\n    room_shares.append(share)\nprint(room_shares)","07d4b6fe":"#labels = ['Private room', 'Entire home\/apt', 'Shared room']\nlabels2 = NY['room_type'].unique()\nshares = room_shares\nexplode = (0.1, 0, 0) \ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']\ntexts = plt.pie(shares, explode = explode, colors=colors, labels = labels2, shadow=True, autopct='%1.1f%%', startangle=90)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","362c1ece":"NY['neighbourhood_group'].value_counts().nlargest(40).plot(kind='bar', figsize = (10,5))\nplt.title('neighbourhood')\nplt.ylabel('No of bookings per neighbourhood')\nplt.xlabel('neighbourhoods')","4f6ec3d5":"NY.corr()","aaf6beb2":"plt.figure(figsize = (15,10))\nC = NY.corr()\nsns.heatmap(C, cmap = 'BrBG',annot = True)","557832f7":"fig, ax = plt.subplots(figsize=(10,6))\nax.scatter(NY['price'], NY['number_of_reviews'])\nax.set_xlabel('price')\nax.set_ylabel('number_of_reviews')\nplt.show()","64a5816f":"top_hosts = NY['host_id'].value_counts()[0:10].index[0:10]\nprint(top_hosts)","ab2ae3cd":"top = NY[NY['host_id'].isin(list(top_hosts))]\nprint(top)","a6677d40":"price_neighberhood = NY[NY['price'] < 500]\nsns.violinplot(data=price_neighberhood, x = 'neighbourhood_group', y = 'price')","04f940f8":"sub_brooklyn = NY.loc[NY['neighbourhood_group'] == 'Brooklyn' ]\nsub_manhattan = NY.loc[NY['neighbourhood_group'] == 'Manhattan']\nsub_queens = NY.loc[NY['neighbourhood_group'] == 'Queens']\nsub_staten_island = NY.loc[NY['neighbourhood_group'] == 'Staten Island']\nsub_bronx = NY.loc[NY['neighbourhood_group'] == 'Bronx']","f34c9a5c":"price_distribution = go.Figure(data=[go.Histogram(x = sub_brooklyn['price'], name = 'Brooklyn')])\n\nprice_distribution.add_trace(go.Histogram(x = sub_manhattan['price'], name = 'Manhatton'))\nprice_distribution.add_trace(go.Histogram(x = sub_queens['price'], name = 'Queens'))\nprice_distribution.add_trace(go.Histogram(x = sub_staten_island['price'], name = 'Staten Island'))\nprice_distribution.add_trace(go.Histogram(x = sub_bronx['price'], name = 'Bronx'))\n\nprice_distribution.update_layout(title_text='Price distribution per neighbourhood', xaxis_title_text = 'Price', yaxis_title_text = 'Count', barmode = 'overlay')\nprice_distribution.update_traces(opacity = 0.5)\nprice_distribution.show()","38f2ddb3":"Loading dataset","5d531dc1":"Simple analysis consisting of data cleaning and visualization. I'd like to add some NLP and regression analysis."}}