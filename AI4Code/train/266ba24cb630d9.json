{"cell_type":{"142c40ec":"code","3e419537":"code","12707707":"code","668fb826":"code","e59e9f13":"code","dfff9648":"code","877a11e7":"code","6fd9ce3c":"code","43d854c4":"code","3252a7c5":"code","87c7ebeb":"code","88985ca2":"code","4598fb09":"code","7b45ac62":"code","b7c85e2c":"code","fc279ddb":"code","8bd996c1":"code","45b6467c":"code","20ee20e8":"code","a5437a5c":"code","3b90d192":"markdown","327c0bc5":"markdown","6100e859":"markdown","f124ed7e":"markdown","0c547fba":"markdown","ba2b972d":"markdown","6df305e7":"markdown","0d315896":"markdown","16f79c91":"markdown"},"source":{"142c40ec":"import numpy as np\nimport pandas as pd\nimport cv2\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport hashlib\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom tqdm.notebook import tqdm\nfrom PIL import Image\n\n\"\"\"\n\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv\n\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv\n\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv\n\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/Test_956.jpg\n\"\"\"\n\nDIR_INPUT = '\/kaggle\/input\/plant-pathology-2020-fgvc7'","3e419537":"train_df = pd.read_csv(DIR_INPUT + '\/train.csv')\ntrain_df.shape","12707707":"train_df.head()","668fb826":"test_df = pd.read_csv(DIR_INPUT + '\/test.csv')\ntest_df.shape","e59e9f13":"test_df.head()","dfff9648":"def calculate_hash(im):\n    md5 = hashlib.md5()\n    md5.update(np.array(im).tostring())\n    \n    return md5.hexdigest()\n    \ndef get_image_meta(image_id, image_src, dataset='train'):\n    im = Image.open(image_src)\n    extrema = im.getextrema()\n\n    meta = {\n        'image_id': image_id,\n        'dataset': dataset,\n        'hash': calculate_hash(im),\n        'r_min': extrema[0][0],\n        'r_max': extrema[0][1],\n        'g_min': extrema[1][0],\n        'g_max': extrema[1][1],\n        'b_min': extrema[2][0],\n        'b_max': extrema[2][1],\n        'height': im.size[0],\n        'width': im.size[1],\n        'format': im.format,\n        'mode': im.mode\n    }\n    return meta","877a11e7":"data = []\n\nfor i, image_id in enumerate(tqdm(train_df['image_id'].values, total=train_df.shape[0])):\n    data.append(get_image_meta(image_id, DIR_INPUT + '\/images\/{}.jpg'.format(image_id)))","6fd9ce3c":"for i, image_id in enumerate(tqdm(test_df['image_id'].values, total=test_df.shape[0])):\n    data.append(get_image_meta(image_id, DIR_INPUT + '\/images\/{}.jpg'.format(image_id), 'test'))","43d854c4":"meta_df = pd.DataFrame(data)\nmeta_df.head()","3252a7c5":"meta_df.groupby(by='dataset')[['width', 'height']].aggregate(['min', 'max'])","87c7ebeb":"duplicates = meta_df.groupby(by='hash')[['image_id']].count().reset_index()\nduplicates = duplicates[duplicates['image_id'] > 1]\nduplicates.reset_index(drop=True, inplace=True)\n\nduplicates = duplicates.merge(meta_df[['image_id', 'hash']], on='hash')\n\nduplicates.head(20)","88985ca2":"fig, ax = plt.subplots(5, 2, figsize=(8, 16))\nax = ax.flatten()\n\nfor i in range(0, min(duplicates.shape[0], 10), 2):\n    image_i = cv2.imread(DIR_INPUT + '\/images\/{}.jpg'.format(duplicates.iloc[i, 2]), cv2.IMREAD_COLOR)\n    image_i = cv2.cvtColor(image_i, cv2.COLOR_BGR2RGB)\n    ax[i].set_axis_off()\n    ax[i].imshow(image_i)\n    ax[i].set_title(duplicates.iloc[i, 2])\n    \n    image_i_1 = cv2.imread(DIR_INPUT + '\/images\/{}.jpg'.format(duplicates.iloc[i + 1, 2]), cv2.IMREAD_COLOR)\n    image_i_1 = cv2.cvtColor(image_i_1, cv2.COLOR_BGR2RGB)\n    ax[i + 1].set_axis_off()\n    ax[i + 1].imshow(image_i_1)\n    ax[i + 1].set_title(duplicates.iloc[i + 1, 2])","4598fb09":"def show_images(image_ids):\n    \n    col = 5\n    row = min(len(image_ids) \/\/ col, 5)\n    \n    fig, ax = plt.subplots(row, col, figsize=(16, 8))\n    ax = ax.flatten()\n\n    for i, image_id in enumerate(image_ids):\n        image = cv2.imread(DIR_INPUT + '\/images\/{}.jpg'.format(image_id))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        ax[i].set_axis_off()\n        ax[i].imshow(image)\n        ax[i].set_title(image_id)\n","7b45ac62":"fig = go.Figure(data=[\n    go.Pie(labels=train_df.columns[1:],\n           values=train_df.iloc[:, 1:].sum().values)\n])\nfig.show()","b7c85e2c":"show_images(train_df.sample(n=15)['image_id'].values)","fc279ddb":"show_images(test_df.sample(n=15)['image_id'].values)","8bd996c1":"show_images(train_df[train_df['healthy'] == 1].sample(n=15)['image_id'].values)","45b6467c":"show_images(train_df[train_df['rust'] == 1].sample(n=15)['image_id'].values)","20ee20e8":"show_images(train_df[train_df['scab'] == 1].sample(n=15)['image_id'].values)","a5437a5c":"show_images(train_df[train_df['multiple_diseases'] == 1].sample(n=15)['image_id'].values)","3b90d192":"## Multiple diseases","327c0bc5":"## Duplications\nWe have a few duplications:\n\n- **train** `Train_379` and `Train_1173`\n- **test** `Test_683` and `Test_1691`\n- **test** `Test_570` and `Test_1212`\n- **mixed** `Train_1703` and `Test_1407`\n- **mixed** `Train_1505` and `Test_829`","6100e859":"## Infected with apple rust","f124ed7e":"# Target distribution","0c547fba":"## Random images","ba2b972d":"## Image orientations\n\nIt looks like we have both portrait and landscape modes in the train and the test set as well. The image size is always 2048x1368px (or 1365x2048).","6df305e7":"# Image metadata","0d315896":"## Have apple scab","16f79c91":"## Healthy images"}}