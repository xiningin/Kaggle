{"cell_type":{"4482979a":"code","8556b4a3":"code","067cecbb":"code","59116b6e":"code","a11b67f8":"code","307f63d4":"code","78187137":"code","07ac215f":"code","3c96f0ad":"code","2ee89d72":"code","98230179":"code","2a816e3f":"code","2e1faf38":"code","1b1055a1":"code","65c2c563":"code","c3487c84":"code","5d9cfc19":"code","306a3484":"code","48909c5a":"code","d6bb94cc":"code","e02c6981":"code","a597683f":"code","ecad85f2":"code","a22f7d5d":"code","d1883e1d":"code","2334f084":"code","cb5efcb7":"code","16b4e449":"code","c2b569ce":"code","812a0010":"code","28d9ab9e":"code","97d7fb12":"code","df77e3c7":"code","293f1b29":"code","f7a828c0":"code","d50c92ba":"code","b58e86ed":"code","ac6ddde5":"code","5e66c476":"code","3eec2581":"code","c1074627":"code","359da000":"code","d4bc354c":"code","5207c8dc":"code","7fb113a1":"code","14f8fae8":"code","dbbc4921":"code","a2c62e7f":"code","e3e77354":"code","f6d344b6":"code","7ef67d6f":"code","4c23f924":"code","57d06f5c":"code","9760fa25":"code","c54eac91":"code","c431f22a":"code","4d48a422":"code","426e5912":"code","3330db4e":"code","44296513":"code","2e023ba4":"code","e9fba92d":"code","d050eb52":"code","8f56bd0b":"code","f82d2c2e":"code","d86287ed":"code","aef59939":"code","fd66870c":"code","036d1d9c":"code","e273e4ec":"code","de14a42c":"code","4365d2e4":"code","1d1d330d":"code","68efefc1":"code","ecf223ea":"code","92ec2e19":"code","44e46d8d":"code","a14e3c63":"code","03360401":"code","1932e9c3":"code","b451168a":"code","1c624725":"code","5a96e824":"code","ad0a59e9":"code","266f170f":"code","454764d4":"code","2deebdb5":"code","5a39d633":"code","fb220a8e":"markdown","889dedda":"markdown","cc402b67":"markdown","6d23bb8f":"markdown","3d808426":"markdown","b67adba8":"markdown","c6a83faa":"markdown","d948b990":"markdown","ffbc0a7c":"markdown","68245c14":"markdown","01afebe2":"markdown","9c49b5c1":"markdown","33e6e327":"markdown","e34682d8":"markdown","a4706731":"markdown","307251a5":"markdown","2944a11c":"markdown","2f5f5e7c":"markdown","c279d03d":"markdown","3d0748f9":"markdown","73576da0":"markdown","3333b55b":"markdown","57042a52":"markdown","be35dea0":"markdown","5198c5a5":"markdown","862f1b0f":"markdown","b570cc06":"markdown","d0067034":"markdown","4054c42f":"markdown"},"source":{"4482979a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8556b4a3":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\nwarnings.filterwarnings('ignore')","067cecbb":"df = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')","59116b6e":"df.shape","a11b67f8":"df.head()","307f63d4":"df.info()","78187137":"df.describe()","07ac215f":"df.describe(include='object')","3c96f0ad":"sns.countplot(x = \"deposit\", data = df, label = \"Count\")\nplt.show()","2ee89d72":"# Change to binary\ndf['deposit'] = df['deposit'].astype('category')\ndf['deposit'] = df['deposit'].cat.codes","98230179":"# Check the binary number : 0 : no, 1 : yes\nsns.countplot(x = \"deposit\", data = df, label = \"Count\")\nplt.show()","2a816e3f":"# Check the existence of null number\nprint(df.isnull().sum())","2e1faf38":"plt.figure(figsize=(15, 5))\nsns.countplot(x = \"job\", data = df, label = \"Count\")\nplt.show()","1b1055a1":"# Factrial plot\n\nsns.factorplot(x = \"job\", y = \"deposit\", data = df, kind = \"bar\", size = 12)\nplt.show()","65c2c563":"def fac_job(row):\n  if row['job'] == \"housemaid\":\n    val = \"service\"\n  elif row['job'] == \"technician\":\n    val = \"self-employed\" \n  else :\n    val = row['job']\n  return val","c3487c84":"df['job.rev'] = df.apply(fac_job, axis=1)","5d9cfc19":"sns.countplot(x = \"marital\", data=df, hue = \"deposit\")\nplt.show()","306a3484":"sns.factorplot(x = \"marital\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","48909c5a":"plt.figure(figsize=(15, 5))\nsns.countplot(x = \"education\", data = df, hue = \"deposit\")\nplt.show()","d6bb94cc":"sns.factorplot(x = \"education\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","e02c6981":"sns.countplot(x =\"default\", data = df, hue = \"deposit\")\nplt.show()","a597683f":"sns.factorplot(x = \"default\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","ecad85f2":"sns.countplot(x = \"housing\", data = df, hue = \"deposit\")\nplt.show()","a22f7d5d":"sns.factorplot(x = \"housing\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","d1883e1d":"sns.countplot(x = \"loan\", data = df,label = \"Count\")\nplt.show()","2334f084":"sns.factorplot(x = \"loan\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","cb5efcb7":"sns.countplot(x = \"contact\", data = df, hue = \"deposit\")\nplt.show()","16b4e449":"sns.factorplot(x = \"contact\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","c2b569ce":"sns.countplot(x = \"month\", data = df, hue= \"deposit\")","812a0010":"sns.factorplot(x = \"month\", y = \"deposit\", data = df, kind = \"bar\", size = 10)\nplt.show()","28d9ab9e":"sns.countplot(x = \"poutcome\", data = df, hue= \"deposit\")\nplt.show()","97d7fb12":"sns.factorplot(x = \"poutcome\", y = \"deposit\", data = df, kind = \"bar\", size = 6)\nplt.show()","df77e3c7":"plt.figure(figsize=(15,5))\nsns.heatmap(df.corr(), annot=True, fmt = \".2f\", cmap = \"coolwarm\")","293f1b29":"plt.figure(figsize=(15,5))\nsns.pairplot(df.corr())","f7a828c0":"# Example to see the relation between \"depoist\" and \"duration\" by Box-plot\nsns.boxplot(x = \"deposit\", y = \"duration\", data = df)\nplt.show()","d50c92ba":"# Example to see the relation between \"depoist\" and \"duration\" by Violin-plot\nsns.violinplot(x = \"deposit\", y = \"duration\", data = df)\nplt.show()","b58e86ed":"from sklearn.preprocessing import StandardScaler\n\nfeatures = ['pdays', 'previous']\n\nx_pca = df.loc[:, features].values\nx_pca = StandardScaler().fit_transform(x_pca)\n","ac6ddde5":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\n\nprincipalComponents = pca.fit_transform(x_pca)\nprincipalDF = pd.DataFrame(data = principalComponents, columns=['PC1', 'PC2'])","5e66c476":"pca.components_","3eec2581":"pca.explained_variance_ratio_","c1074627":"# Concatenation of dataframes\ndf_all = pd.concat([principalDF, df], axis=1)","359da000":"plt.figure(figsize=(15,5))\nsns.heatmap(df_all.corr(), annot=True, fmt = \".2f\", cmap = \"coolwarm\")","d4bc354c":"df_all.info()","5207c8dc":"#### Without PCs\n\nvariables_selected = [\n    'age',\n    'job',\n    'marital',\n    'education',\n    'default',\n    'balance',\n    'housing',\n    'loan',\n    'contact',\n    'day',\n    'month',\n    'duration',\n    'campaign',\n    'pdays',\n    'previous',\n    'poutcome',\n    'deposit', # target variable\n]","7fb113a1":"df_final = df_all[variables_selected]","14f8fae8":"df_final.head()","dbbc4921":"# One-hot (creating dummies for categorical variables)\ndf_final = pd.get_dummies(df_final, columns=['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome'])","a2c62e7f":"df_final.head()","e3e77354":"y = df_final.deposit\nX = df_final.drop('deposit', axis=1)","f6d344b6":"y.shape, X.shape","7ef67d6f":"# Normalization of data\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nscaler = MinMaxScaler()\nX_norm = scaler.fit_transform(X)","4c23f924":"df_X_norm = pd.DataFrame(X_norm)","57d06f5c":"df_X_norm.head()","9760fa25":"# Classifiers\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\n\n# Metrics\nfrom sklearn.model_selection import  GridSearchCV\nfrom sklearn import model_selection\nfrom sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score","c54eac91":"seed = 123\nk = 10\n\nkfolds = model_selection.KFold(n_splits=k, shuffle = True, random_state=seed)\n#kfolds = model_selection.StratifiedKFold(n_splits=k, random_state=seed)\n# In this case the proportion of responce \"yes\" and \"no\" is balanced well. If not, it is recommended to use \"StratifiedKFold()\"","c431f22a":"### KNN\n\nKNN = KNeighborsClassifier()\n\nparams = {\n    'n_neighbors' : list(range(2,40)),\n    'weights' : ['distance'],\n    'algorithm' : ['kd_tree']\n}\n\ngrid_knn = GridSearchCV(KNN, param_grid=params, cv = kfolds)\ngrid_knn.fit(X_norm, y)","4d48a422":"print(grid_knn.best_score_)\nprint(grid_knn.best_params_)","426e5912":"#### Decision Tree\n\nDT = DecisionTreeClassifier()\n\nparams = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : list(range(2, 15)),\n}\n\ngrid_dt = GridSearchCV(DT, param_grid=params, cv=kfolds)\ngrid_dt.fit(X_norm, y)","3330db4e":"print(grid_dt.best_score_)\nprint(grid_dt.best_params_)","44296513":"### Logistic regression\n\nLR = LogisticRegression()\n\nparams = {\n    'penalty' : ['l1', 'l2'],\n    'C' : np.logspace(-4, 4, 100),\n    'solver' : ['liblinear']\n}\n\ngrid_lr = GridSearchCV(LR, param_grid=params, cv = kfolds)\ngrid_lr.fit(X_norm, y)","2e023ba4":"print(grid_lr.best_score_)\nprint(grid_lr.best_params_)","e9fba92d":"### Random Forest\n\nRF = RandomForestClassifier()\n\nparams = {\n    \"n_estimators\": np.array([50, 100, 200, 300]), \n    \"max_depth\": [3, 6, 9, 12, 15, 18, 21],\n}\n\ngrid_rf = GridSearchCV(RF, param_grid=params, cv = kfolds)\ngrid_rf.fit(X_norm, y)","d050eb52":"print(grid_rf.best_score_)\nprint(grid_rf.best_params_)","8f56bd0b":"### XG Boost\n\nxgb = XGBClassifier(verbosity = 0) # verbosity = 0 : to hide warnings\n\nparams = {\n    'max_depth': [6, 9, 11, 13, 16, 19, 22], \n    'n_estimators': [100],\n    'learning_rate': [0.01, 0.05, 0.1]\n}\n\ngrid_xgb = GridSearchCV(xgb, param_grid=params, cv = kfolds)\ngrid_xgb.fit(X_norm, y)\n","f82d2c2e":"print(grid_xgb.best_score_)\nprint(grid_xgb.best_params_)","d86287ed":"### SVM\n\nsvm = SVC()\n\nparams = {\n    \"C\": [0.001, 0.01, 0.1, 1.],\n    \"kernel\": [\"linear\", \"poly\", \"rbf\"],\n    \"gamma\": [\"scale\", \"auto\"], \n}\n\ngrid_svm = GridSearchCV(svm, param_grid=params, cv = kfolds)\ngrid_svm.fit(X_norm, y)\n","aef59939":"print(grid_svm.best_score_)\nprint(grid_svm.best_params_)","fd66870c":"#### With PC1 and \"job.rev\"\n\nvariables_selected = [\n    'age',\n    'job.rev', # categories reduced\n    'marital',\n    'education',\n    'default',\n    'balance',\n    'housing',\n    'loan',\n    'contact',\n    'day',\n    'month',\n    'duration',\n    'campaign',\n    #'pdays', # excluded\n    #'previous', # excluded\n    'PC1', # included\n    'poutcome',\n    'deposit', # target variable\n]","036d1d9c":"df_final = df_all[variables_selected]","e273e4ec":"df_final.head()","de14a42c":"# One-hot (creating dummies for categorical variables)\ndf_final = pd.get_dummies(df_final, columns=['job.rev', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome'])","4365d2e4":"df_final.head()","1d1d330d":"y = df_final.deposit\nX = df_final.drop('deposit', axis=1)","68efefc1":"# Normalization of data\n\nscaler = MinMaxScaler()\nX_norm = scaler.fit_transform(X)","ecf223ea":"df_X_norm = pd.DataFrame(X_norm)","92ec2e19":"df_X_norm.head()","44e46d8d":"### KNN\n\nKNN = KNeighborsClassifier()\n\nparams = {\n    'n_neighbors' : list(range(2,40)),\n    'weights' : ['distance'],\n    'algorithm' : ['kd_tree']\n}\n\ngrid_knn = GridSearchCV(KNN, param_grid=params, cv = kfolds)\ngrid_knn.fit(X_norm, y)","a14e3c63":"print(grid_knn.best_score_)\nprint(grid_knn.best_params_)","03360401":"#### Decision Tree\n\nDT = DecisionTreeClassifier()\n\nparams = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : list(range(2, 15)),\n}\n\ngrid_dt = GridSearchCV(DT, param_grid=params, cv=kfolds)\ngrid_dt.fit(X_norm, y)","1932e9c3":"print(grid_dt.best_score_)\nprint(grid_dt.best_params_)","b451168a":"### Logistic regression\n\nLR = LogisticRegression()\n\nparams = {\n    'penalty' : ['l1', 'l2'],\n    'C' : np.logspace(-4, 4, 100),\n    'solver' : ['liblinear']\n}\n\ngrid_lr = GridSearchCV(LR, param_grid=params, cv = kfolds)\ngrid_lr.fit(X_norm, y)","1c624725":"print(grid_lr.best_score_)\nprint(grid_lr.best_params_)","5a96e824":"### Random Forest\n\nRF = RandomForestClassifier()\n\nparams = {\n    \"n_estimators\": np.array([50, 100, 200, 300]), \n    \"max_depth\": [3, 6, 9, 12, 15, 18, 21],\n}\n\ngrid_rf = GridSearchCV(RF, param_grid=params, cv = kfolds)\ngrid_rf.fit(X_norm, y)","ad0a59e9":"print(grid_rf.best_score_)\nprint(grid_rf.best_params_)","266f170f":"### XG Boost\n\nxgb = XGBClassifier(verbosity = 0) # verbosity = 0 : to hide warnings\n\nparams = {\n    'max_depth': [6, 9, 11, 13, 16, 19, 22], \n    'n_estimators': [100],\n    'learning_rate': [0.01, 0.05, 0.1]\n}\n\ngrid_xgb = GridSearchCV(xgb, param_grid=params, cv = kfolds)\ngrid_xgb.fit(X_norm, y)\n","454764d4":"print(grid_xgb.best_score_)\nprint(grid_xgb.best_params_)","2deebdb5":"### SVM\n\nsvm = SVC()\n\nparams = {\n    \"C\": [0.001, 0.01, 0.1, 1.],\n    \"kernel\": [\"linear\", \"poly\", \"rbf\"], \n    \"gamma\": [\"scale\", \"auto\"],\n}\n\ngrid_svm = GridSearchCV(svm, param_grid=params, cv = kfolds)\ngrid_svm.fit(X_norm, y)\n","5a39d633":"print(grid_svm.best_score_)\nprint(grid_svm.best_params_)","fb220a8e":"\"default\"","889dedda":"\"month\"","cc402b67":"# Feature Analysis","6d23bb8f":"\"marital\"","3d808426":"# Modeling 1 (without Principal Component)","b67adba8":"### [Categorical variables]","c6a83faa":"# Modeling with Principal Component \"PC1\"","d948b990":"Obs:\n* Similarly, \"yes\" and \"no\" have different factors. Then I analyze that \"default\" could improve to fit models.","ffbc0a7c":"Obs:\n* Similarly, \"yes\" and \"no\" have different factors. Then I analyze that \"default\" could improve to fit models.","68245c14":"\"housing\"","01afebe2":"# Data processing","9c49b5c1":"Obs: As we can see, PC1 (the first principal component) has better correlation with \"deposit\" than \"pdays\" and \"previous\". \"pdays\" and \"previous\" could be replaced with PC1 to test if the performance of algorithm will be better or not. Furthermore, PC1 represent 75.4% of these variables, then, it seems that PCA could extract main effect to deposit efficiently.","33e6e327":"\"poutcome\"","e34682d8":"Obs :\n* We can recognize in the heatmap that there is a considebly high correlation between \"deposit\" and \"duration\", then \"duration\" should be importatn variable. However they are not correlated really linearly seeing the pairplot. \n* \"campaign\", \"pdays\" and \"previous\" correlate with deposit even though it is not high.\n* The correlation between \"pdays\" and \"previous\" is able to be observed, then we should be careful when we choose the variables to modeling as they could conflict some times and reduce the performance.\n* There are no normal distribution. The algorithm that accepts non-normality should work better.","a4706731":"# Dataframe check","307251a5":"Obs:\n* Some categories have same factorial level. It indicates that there are possibilities to integrate categories.\n* For exemple, \"blue-collar\" and \"entrepreneur\", \"service\" and \"housemaid\", \"technician\" and \"self-employed\".\n* However, we should consider the meanings of categories.\n* Maybe we can integrate \"service\" and \"housemaid\" as \"housemaid\" is possibly one of service.\n* Some \"technician\" could be \"self-employed\", then, we can think abount this integration.\n* On the ohter hand, it is difficult to consider that \"blue-collar\" and \"entrepreneur\" are similar categories. In my opinion, it is not good to integrate them.\n* If you want to integrate the categories and make the new variable, the following is the processing.","2944a11c":"# Dataframe setting","2f5f5e7c":"Obs:\n* Obseving the figures, the categories are reasonable and could react separately to the target \"deposit\".","c279d03d":"\"job\"","3d0748f9":"Obs:\n* Obseving the figures, \"yes\" and \"no\" have different factors. Then I analyze that \"default\" could improve to fit models.","73576da0":"\"education\"","3333b55b":"Obs:\n* If you want, we could integrate \"primary\" and \"secondary\" as they have similar factorial level. But I think the categories are reasonable.\n* We could make the class by number such as 1: primary, 2: secondary, 3: tertiary, however, it is difficult how to classify the \"unknown\". Then it might be treated as the categories separately.","57042a52":"As we could see that there is the significant correlation between \"pdays\" and \"previous\". As the number of variable is not large, there is doubt about the necessity of PCA. However, I would like to apply PCA for these two variable as a option to solve the problem of modeling with variables correlated each other.","be35dea0":"# PCA (Principal Components Analysis)","5198c5a5":"Obs:\n* There are different factorial levels. Then I would like to respect the original categories.","862f1b0f":"* Firstly, I select every variables to fit models but without the principal components (PC1 and PC2).\n* It is ideal to select specific variables before fitting models, however, if the number of variables is not huge, sometimes it is better to see how algorithms fit model with every variables and how much is performance. Some algorithms make the feature selection by regulations as well.","b570cc06":"Obs:\n* \"cellular\" and \"telephone\" have similar factorial level and \"unknown\"'s level is very different from theirs. Then one possibility is to integrate them and make a category such as \"telecomunication\" for example. It makes the variable \"contact\" be binary.\n* However, I respect the original categories for now.","d0067034":"# Target variable \"deposit\"","4054c42f":"### [Numerical variables]"}}