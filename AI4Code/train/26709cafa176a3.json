{"cell_type":{"43450cd5":"code","5837904f":"code","555136cc":"code","ea5d7aba":"code","334ddc82":"code","d22c5ff0":"code","5ad0b9f3":"code","f690a6d5":"code","3b10c3e3":"code","24c1a7db":"code","68b2892e":"code","dd65ab85":"code","411fd3fe":"code","998785c9":"code","797d0e34":"code","f3a4c5c0":"code","eecfb575":"code","3c57376f":"code","b1a58884":"code","1d0130b6":"code","a553a10d":"code","614fe34d":"code","24bb1bff":"code","5ba79fd9":"code","2c2a20e2":"code","d8865703":"code","e39b804c":"code","cbcdb3cd":"code","16d4aee8":"code","d6b93484":"code","ff52d40b":"markdown","32584ed2":"markdown","0607e35d":"markdown","828dcf4b":"markdown","210d617a":"markdown","e2e82482":"markdown","71d96f0c":"markdown","9ece519c":"markdown","11016b2e":"markdown"},"source":{"43450cd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.cluster import KMeans\nfrom datetime import datetime\nfrom pandasql import sqldf\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5837904f":"data_path = '\/kaggle\/input\/dwdm-petrol-prices\/Petrol Prices.csv'\nprices = pd.read_csv(data_path)\nprices.head(15\n         )\n\n","555136cc":"prices.head(7)","ea5d7aba":"prices.tail(4)","334ddc82":"p=prices['Date'].value_counts()\np\n","d22c5ff0":"prices =pd.DataFrame(prices)\n\n","5ad0b9f3":"#this will be used to find missing date \np = prices['Date'].isin(['ug 18 2016'])\nprices[p]","f690a6d5":"#this will be used to correct the date error\nprices.at[143,'Date'] = 'Aug 18 2016'\nprices.iloc[143]","3b10c3e3":"\nprices['month'] = pd.DatetimeIndex(prices['Date']).month_name()\nprices","24c1a7db":"\nc_month=prices.groupby('month').size().reset_index(name='Number of Records')\nc_month","68b2892e":"prices['Year'] = pd.DatetimeIndex(prices['Date']).year\nprices","dd65ab85":"prices['day'] = pd.DatetimeIndex(prices['Date']).day\nprices['timestamp'] = pd.DatetimeIndex(prices['Date']).time\n","411fd3fe":"prices","998785c9":"prices2=prices[['Date','Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery']]\nprices2['datetime']= pd.to_datetime(prices['Date'])\nprices2","797d0e34":"a = \"\"\"Select * from prices2 where datetime between '2018-10-01' and '2019-12-30' order by datetime asc;\"\"\"\npricesoutcome = sqldf(a, globals())\npricesoutcome","f3a4c5c0":"pricesoutcome.plot(kind=\"line\",x='Date', title=\"Graph representing Gas Prices over 8 month \", figsize=(12,8))\n","eecfb575":"HFO = pd.DataFrame(pricesoutcome['HFO'])\nHFO.pct_change(periods=4)","3c57376f":"HFO.pct_change(periods=4).plot()\n","b1a58884":"pkm = prices[['day','month','Year','timestamp','HFO','Butane']]\npkm","1d0130b6":"pkm.plot(kind = 'line',x = 'HFO', y='Butane')","a553a10d":"#this is to find the  missing values\nprint( pkm.isnull().sum())","614fe34d":"#this is to try and replace the missing values\npkm.fillna(-1, inplace=True)\npkm","24bb1bff":"pv = pkm[['HFO','Butane']]\npv = pv.iloc[:,:].values\npv","5ba79fd9":"\nK_Means = KMeans(n_clusters=5, init=\"k-means++\", n_init=10, max_iter=250) \npkm[\"cluster\"] = K_Means.fit_predict( pv )\n","2c2a20e2":"pkm.tail(25)","d8865703":"pkm['cluster'].value_counts()","e39b804c":"pkm['cluster'].describe()","cbcdb3cd":"baby = pd.DataFrame(pkm['cluster'].value_counts())\n\nsns.pairplot( pkm, hue=\"cluster\")","16d4aee8":"prices.describe()","d6b93484":"#showing the average price per year of each gas type before the clustering of data \n#prices.groupby(Year). Mean()\n\naverage=prices.groupby('Year').mean()\naverage","ff52d40b":"Display of the first 7 records","32584ed2":"Extract the \u201cInteresting columns\u201d from the data set\n","0607e35d":"Display of the last 4 records","828dcf4b":"Include the columns created in Task 6 with your original dataset","210d617a":"Count how many records exist for each month in the data set","e2e82482":"Choose one interesting column and calculate the \u201cpercentage change\u201d for every 4 time periods\nDisplay these values\n","71d96f0c":"Plot these values using a suitable graph","9ece519c":"**What is the average price per year of each gas type (\u201cinteresting column\u201d) before you clustered the data?\n\naverage=prices.groupby('Year').mean()\naverage\n\n**What can you say about each cluster?\n\nCluster 0 had highest gas prices, cluster 3 had the second highest, cluster 2 had the third highest while cluster 4 had the lowest gas prices\n**Can you justify your process (i.e. related to Task 12)?\n\nWhen using K-means clustering, its a type of unsupervised learning which is used in cases where there is unlabeled data. The goal of this algorithm is to find groups in the data.\n\n**Name ONE (1) time series forecasting method and explain how it works (be sure to include a citation)\n\nA time series is a series of data points indexed or listed or graphed in time order. Its a sequence taken at successive equally spaced points in time. One type of method is the autoregression. This method models the next step in the sequence as a linear function of the observations at prior time steps.The notation for the model involves specifying the order of the model p as a parameter to the AR function. The method is suitable for one variable quanity time series without trend and seasonal components.\n","11016b2e":"Create a dataset where you select two(2) of the interesting columns and the columns created in Task 6\n"}}