{"cell_type":{"44ef4f3d":"code","3f7b6707":"code","3ca443ae":"code","ddccc285":"code","9b831e70":"code","bbb1cafc":"code","e07da597":"code","e8eaeacf":"code","e4d6c236":"code","9c2808ec":"code","89dc10a6":"code","77beaff8":"code","5aa81807":"code","1034eb9e":"code","977760c2":"code","0d561eb9":"code","d1d1d84e":"markdown","abd634ce":"markdown","58f8cc3a":"markdown","fd7b06c8":"markdown","1baafa59":"markdown","e7fdc6b6":"markdown","96377afd":"markdown","beb2ecf9":"markdown","af52be06":"markdown","acdde19c":"markdown","762cc6ae":"markdown","3144dde7":"markdown","47656c7d":"markdown","a357c039":"markdown","0a828092":"markdown","867594e6":"markdown","a47cfd47":"markdown","5897823e":"markdown","6b045bc8":"markdown","6c63f8bf":"markdown","9deef0db":"markdown"},"source":{"44ef4f3d":"\n# impoprting libraries\nimport copy                                        # require to create real copy \/ clone\nimport numpy                 as np                 # adding support for large, multi-dimensional arrays and matrices \nimport pandas                as pd                 # data manipulation and analysis library for python\nimport matplotlib.pyplot     as plt                # integrate MATLAB within Python and provides MATLAB like plotting\nimport seaborn               as sns                # data visualization library based on matplotlib\nfrom   sklearn.preprocessing import LabelEncoder   # encode target labels with value between 0 and n_classes-1\nfrom   scipy                 import stats          # for scientific computing and technical computing\nfrom   statsmodels.stats     import proportion     # contains probability distributions as well as statistical functions\n\n# for better background in seaborn graphs\nsns.set(color_codes=True)\n\n# add graphs into jupiter notebook\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3f7b6707":"\n# insurance csv data set is in working directory and loaded into dataframe named as insData\nprint()\ndataFile = \"insurance.csv\"       # assigning provided file name in a vaiable called 'datafile'\ninsData = pd.read_csv(\"..\/input\/insurance\/\"+dataFile)  # reading the given csv file using Pandas read_csv() function\nprint(\"~\"*60)\nprint(\"\\033[1mAnswer 2 :\\033[0m Loaded {0} file into \\033[1m\\\"insData\\\"\\033[0m DataFrame!\".format(dataFile))\nprint(\"~\"*60)\n#printing top 5 rows from insData dataframe\nprint()\nprint(\"~\"*65)\nprint(\"Diplaying \\033[1mTop 5 \\033[0mrows from DataFrame \\033[1m\\\"insData\\\"\\033[0m\")\nprint(\"~\"*65)\nprint(\"\\033[1m\",insData.head()) # head.() function return top 5 rows from the dataframe\nprint(\"\\033[0m~\"*65)\nprint()\nprint(\"~\"*65)\nprint(\"Diplaying \\033[1mBottom 5 \\033[0mrows from DataFrame \\033[1m\\\"insData\\\"\\033[0m\")\nprint(\"~\"*65)\nprint(\"\\033[1m\",insData.tail()) # tail.() function return bottom 5 rows from the dataframe\nprint(\"\\033[0m~\"*65)","3ca443ae":"\nprint()\nprint(\"~\"*70)\nprint(\"\\033[1mAnswer 3.a.\\033[0m The Shape of Insurance data loaded in \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*70)\nprint(\"*\"*30)\n# getting shape of the data using shape\nprint(\"\\033[1m\",pd.DataFrame({'No_of_Rows':[insData.shape[0]],'No_of_Columns':[insData.shape[1]]}))\nprint(\"\\033[0m*\"*30)","ddccc285":"\n'''\nChecking the Number of Missing Values in each column\n'''\n# declaring variables \nintData = 0\nobjData = 0\nfloatData = 0\nothData = 0\nprint()\nprint(\"~\"*50)\nprint(\"\\033[1mAnswer 3.b. Checkinig Data Type of Each Attributes :\\033[0m\")\nprint(\"~\"*50)\nprint()\nprint(\"*\"*30)\nprint(\"\\033[1mAttributes          DataType\\033[0m\")\nprint(\"*\"*30)\n# getting data type of all columns\nfor features in insData.columns:     # looping each coulmns from the dataset\n    dt = insData[features].dtypes    # getting the data type of column into dt variable\n    if(dt == \"object\"):              # checking the datatype if it is object or not\n        objData = objData + 1        # if object then counting into objData variable \n    elif(dt == \"int64\"):             # checking the datatype if it is integer or not\n        intData = intData + 1        # if integer then counting into intData variable\n    elif(dt == \"float64\"):           # checking the datatype if it is float or not\n        floatData = floatData + 1    # if float then counting into floatData variable\n    else:                            # other than normal datatypes i.e object , integer and float\n        othData = othData + 1        # if data type other than object, integer and float then counting into othData variable\n    print(\"{0}{1}\".format(features.ljust(20,' '),dt))\nprint(\"*\"*30)\nprint()\nprint(\"~\"*100)\nprint(\"\\033[1mNote:\\033[0m There are \\033[1m{0} Integer Type, {1} Float Type, {2} Object Type and {3} Other Types\\033[0m Columns in the Dataset.\"\n      .format(intData,floatData,objData,othData)\n     )\nprint(\"~\"*100)","9b831e70":"\n# Checking the Number of Missing Values in each column\ntotCnt = 0\nprint()\nprint(\"~\"*70)\nprint(\"\\033[1mAnswer 3.c.\\033[0m Missing Value for each Attribute in \\033[1m\\\"insData\\\"\\033[0m DataFrame  :\")\nprint(\"~\"*70)\nprint()\nprint(\"*\"*32)\nprint(\"\\033[1mColumnName    MissingValueCount\\033[0m\")\nprint(\"*\"*32)\nfor features in insData.columns:             # looping each coulmns from the dataset\n    cnt = insData[features].isnull().sum()   # sum of null values for the columns and assigned to 'cnt' variable \n    totCnt = totCnt + cnt                    # summing up all counted null values from each iteration and assigned to 'totCnt' variable\n    print(\"{0}{1}\".format(features.ljust(20,' '),cnt))\nprint(\"*\"*32)\nprint()\nprint(\"~\"*70)\nif(totCnt > 0):\n    print(\"\\033[1mNote:\\033[0m There are Total \\033[1m{0} no of missing values\\033[0m in the \\033[1m\\\"insData\\\"\\033[0m Dataset.\"\n          .format(totCnt)\n         )\nelse:\n    print(\"\\033[1m*** \\033[0m There are \\033[1m NO missing values\\033[0m in the \\033[1m\\\"insData\\\"\\033[0m Dataset.\")\nprint(\"~\"*70)","bbb1cafc":"\nprint()\nprint(\"*\"*55)\nprint(\"\\033[1mThe below mentioned rows are duplicate in the dataset :\\033[0m\")\nprint(\"*\"*55)\nprint(\"\\033[1m\")\nprint(insData[insData.duplicated()])   # printing duplicate row if any in the insData dataset\nprint(\"\\033[0m\")\nprint(\"*\"*60)","e07da597":"\nprint()\nprint(\"~\"*90)\nprint(\"\\033[1mAnswer 3.d. 5 number \/ point summary\\033[0m of numerical attributes of the \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*90)\nprint()\nfor features in (insData.select_dtypes(include=np.number).columns.tolist()):  # looping through all numeric datatype columns\n    print(\"*\"*40)\n    print(\"\\033[1m5 number \/ point summary of {0} feature :\\033[0m\".format(features))\n    print(\"*\"*40)\n    print(\"\\033[1m5_Number    Values\\033[0m\")\n    print(\"*\"*20)\n    # printing 5 number summary of numerical columns of insData dataset\n    print(insData[features].describe()[['min','25%','50%','75%','max']])\n    print(\"*\"*40)\n    print()","e8eaeacf":"print()\nprint(\"~\"*90)\nprint(\"\\033[1mAnswer 3.e.\\033[0m Distribution of 'bmi', 'age' and 'charges' columns of the \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*90)\nprint()\nrow = 3\ncol = 1\nplc = 1\nplcHolder = str(row) + str(col) + str(plc)      # subplot placeholder with three rows and one column\nfor features in ('bmi', 'age','charges'):       # looping with bmi, age and charges features\n    plt.figure(figsize=(10,15))                 # setting figure size with width = 10 and height = 15\n    plt.subplot(plcHolder)                      # plotting in the placeholder\n    print(\"*\"*30)\n    print(\"\\033[1mDistributon of {0} column :\\033[0m\".format(features))\n    print(\"*\"*30)\n    ax = sns.distplot(insData[features])        # seaborn distplot to examine distribution of the feature\n    plt.show()                                  # plotting in the notebook\n    plcHolder = str(int(plcHolder) + 1)         # increasing placeholder to next row\n    # printing mean, meadian and kurtosis of the feature\n    print(\"\\033[1mFeature {0} : Mean = {1}, Median = {2} and Kurtosis = {3}\\033[0m\".\n          format(features,round(insData[features].mean(),3),round(insData[features].median(),3),\n                 round(insData[features].kurtosis(),3))\n         )\n    print()\n    print(\"*\"*80)\n    print()","e4d6c236":"remarks = \"\"\nprint()\nprint(\"~\"*95)\nprint(\"\\033[1mAnswer 3.f.\\033[0m Measuring Skewness of \\033[1m'bmi', 'age' and 'charges'\\033[0m columns from \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*95)\nprint()\nprint(\"*\"*55)\nprint(\"\\033[1mColumnName   SkewnessValues       SkewnessRoundValue\\033[0m\")\nprint(\"*\"*55)\nfor features in ('bmi','age','charges'):           # looping with bmi, age and charges features\n    if(round(insData[features].skew()) == 0):      # comparing if round value of skewness is zero\n        remarks = \"\\033[1mBased on round value of skewness, {0} Column is Normally Distributed.\\033[0m\".format(features)\n    elif(round(insData[features].skew()) > 0):     # comparing if round value of skewness is greater than zero\n        remarks = \"\\033[1mBased on round value of skewness, {0} Column is Right-Skewed.\\033[0m\".format(features)\n    else:                                          # if the above two condition are false i.e round value of skewness is less than zero\n        remarks = \"\\033[1mBased on round value of skewness, {0} Column is Left-Skewed.\\033[0m\".format(features)\n    # printing features with skewness value , round value of skewwness and remarks from the above conditions\n    print(\"\\033[1m{0}\\033[0m{1}{2}<= {3}\"\n          .format(features.ljust(13,' '),str(insData[features].skew()).ljust(25,' '),\n                  str(round(insData[features].skew())).ljust(10,' '),remarks)\n         )\n    print(\"*\"*55)\n    print()","9c2808ec":"print()\nprint(\"~\"*110)\nprint(\"\\033[1mAnswer 3.g.\\033[0m Checking the presence of outliers in \\033[1m'bmi', 'age' and 'charges' columns\\033[0m of the \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*110)\nprint()\nrow = 3\ncol = 1\nplc = 1\nplcHolder = str(row) + str(col) + str(plc)     # subplot placeholder with three rows and one column\nfor features in ( 'bmi','age','charges'):      # looping with bmi, age and charges features\n    Q1 = insData[features].quantile(0.25)      # evaluating lower \/ first quartile\n    Q3 = insData[features].quantile(0.75)      # evaluating upper \/ third quartile\n    IQR = Q3 - Q1                              # evaluating Inter Quartile Range i.e IQR\n    '''\n    finding outliers which are mild outliers (Lower quartile - 1.5 times IQR) or\n    extreme outliers (Upper quartile + 1.5 times IQR)\n    '''\n    outliers = insData[((insData[features] < (Q1 - 1.5 * IQR)) |(insData[features] > (Q3 + 1.5 * IQR)))][features]\n    plt.figure(figsize=(10,15))                # setting figure size with width = 10 and height = 15\n    plt.subplot(plcHolder)                     # plotting in the placeholder\n    print(\"*\"*30)\n    print(\"\\033[1mBoxplot of {0} column :\\033[0m\".format(features))\n    print(\"*\"*30)\n    ax = sns.boxplot(insData[features])        # seaborn boxplot to examine outliers of the feature\n    plt.show()                                 # plotting in the notebook\n    plcHolder = str(int(plcHolder) + 1)        # increasing placeholder to next row\n    # printing mean, median and IQR for the feature\n    print(\"\\033[1mFeature {0} : Mean = {1}, Median = {2} and Inter-Quartile-Range (IQR) = {3}\\033[0m\"\n          .format(features,round(np.mean(insData[features]),3),round(np.median(insData[features]),3),round(IQR,3))\n         )\n    print()\n    if(outliers.shape[0] == 0):                # comparing if number of outlier is zero\n        print(\"There are \\033[1mno outliers\\033[0m in \\033[1m{0}\\033[0m feature.\".format(features))\n    else:                                      # if the above condition is false i.e number of outlier is not zero\n        # printing No of outliers, percentage of the data points are outliers and the values of the outliers\n        print(\"There are \\033[1m{0} outliers\\033[0m ({1} % of the data points) in \\033[1m{2}\\033[0m feature and the values are \\033[1m{3}\\033[0m\"\n        .format(outliers.shape[0],round(((outliers.shape[0]\/insData.bmi.shape[0])*100),3),features,outliers.tolist()))\n    print(\"*\"*125)\n    print()","89dc10a6":"print()\nprint(\"~\"*105)\nprint(\"\\033[1mAnswer 3.h.\\033[0m Distribution of 'sex', 'children', 'smoker' and 'region' columns of the \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*105)\nprint()\nrow = 4\ncol = 1\nplc = 1\nplcHolder = str(row) + str(col) + str(plc)                     # subplot placeholder with three rows and one column\nfor features in ('sex','children','smoker','region'):          # looping with sex, children, smoker and region features\n    print(\"*\"*30)\n    print(\"\\033[1mDistributon of {0} column :\\033[0m\".format(features))\n    print(\"*\"*30)\n    ax = sns.catplot(x=features, kind=\"count\", data=insData)   # seaborn count catplot to examine distribution of the feature\n    y = []                                                     # creating a null or empty array\n    for val in range(insData[features].nunique()):             # looping for number of unique values in the feature\n        # appending count of each unique values from feature to array y\n        y.append(insData.groupby(insData[features],sort=False)[features].count()[val])\n    for i, v in enumerate(y):                                  # looping count of each unique value in the feature\n        # including count of each unique values in the plot \n        plt.annotate(str(v), xy=(i,float(v)), xytext=(i-0.1, v+5), color='black', fontweight='bold')\n    plt.show()                                                 # plotting in the notebook\n    plcHolder = str(int(plcHolder) + 1)                        # increasing placeholder to next row\n    #print(\"\\033[1mFeature {0} : Mean = {1} and Median = {2}\\033[0m\".format(features,round(np.mean(insData[features]),3),round(np.median(insData[features]),3)))\n    print()\n    print(\"*\"*80)\n    print()","77beaff8":"print()\nprint(\"~\"*90)\nprint(\"\\033[1mAnswer 3.i.\\033[0m Pair plot of all columns including categorical columns of \\033[1m\\\"insData\\\"\\033[0m DataFrame :\")\nprint(\"~\"*90)\nprint()\ninsDataEncoded = copy.deepcopy(insData)         # copying entire insData dataframe into new insDataEncoded dataframe\n# using Label Encoder to encode target labels of the insDataEncoded dataframe with value between 0 and n_classes-1\ninsDataEncoded.loc[:,insData.select_dtypes(include=\"object\").columns.tolist()] = insDataEncoded.loc[:,insData.select_dtypes(include=\"object\").columns.tolist()].apply(LabelEncoder().fit_transform)\nprint(\"*\"*110)\nprint(\"\"\"\\033[1mNote :\\033[0m As \\033[1mpairplot plots only numerical columns\\033[0m, we have to \\033[1mcovert categorical columns\\033[0m to numerical columns.\nIn this case we are using \\033[1mLabel Encoding\\033[0m to encode the following categorical columns :\n\\033[1m{0}\\033[0m.\"\"\".format(insData.select_dtypes(include=\"object\").columns.tolist()))\nprint(\"*\"*110)\nprint()\nax = sns.pairplot(insDataEncoded)               # seaborn pairplot to examine relationship between the features\nplt.show()    ","5aa81807":"print()\nprint(\"~\"*90)\nprint(\"\\033[1mAnswer 4.a.\\033[0m Do charges of people who smoke differ significantly from the people who don't?\")\nprint(\"~\"*90)\nprint()\nprint(\"Let's check relationship of charges for smoker and non-smoker:\")\nprint()\ntotCharges = insData.groupby(insData.smoker).sum()['charges'].tolist()   # Total charges group by smoker category \ntotCnt = insData.smoker.value_counts().tolist()                          # Total count for different smoker category \n# creating a pandas dataframe and populating the Total Charges, Total Count and Average Charges for smoker category\nprint(\"\\033[1m{0}\\033[0m\".format(pd.DataFrame({'Smoker':[round(totCharges[0],2),round(totCnt[0]),round(totCharges[0]\/totCnt[0],2)],\n                                        'Non_Smoker':[round(totCharges[1],2),round(totCnt[1]),round(totCharges[1]\/totCnt[1],2)]},\n                            index=['Total Charges','Total Count','Average Charges']))) \nprint()\nprint(\"*\"*40)\nprint()\nprint(\"plotting \\033[1mscatter plot\\033[0m to visualize Charges for smoker and non-smoker :\")\nprint(\"-\"*70)\nprint()\nplt.figure(figsize=(10,5))                                        # setting figure size with width = 10 and height = 5\n# seaborn scatterplot to examine relationship between charges and smoker\nsns.scatterplot(insData.age,insData.charges,hue=insData.smoker,palette=['blue','red'])\nplt.show()                                                        # plotting in the notebook\nprint()\nprint(\"*\"*50)\nprint(\"\\033[1mStating Null Hypothesis and Alternate Hypothesis.\\033[0m\")\nprint(\"*\"*50)\nprint()\nHo = \"Charges of Smoker and Non-Smoker are Same.\"                 # stating null hypothesis and assigning to Ho variable\nHa = \"Charges of Smoker and Non-Smoker are not Same.\"             # stating alternate hypothesis and assigning to Ha variable\nprint(\"\\033[1mHo :\\033[0m {0} \\033[1m(Null Hypothesis)\\033[0m\".format(Ho))\nprint(\"\\033[1mHa :\\033[0m {0} \\033[1m(Alternate Hypothesis)\\033[0m\".format(Ha))\nx = np.array(insData[insData.smoker == \"yes\"].charges)            # charges for smoker-yes assigned to x variable\ny = np.array(insData[insData.smoker == \"no\"].charges)             # charges for smoker-no assigned to y variable\ntStatistic, pValue = stats.ttest_ind(x, y, axis=0)                # two-side test for two sample using ttest_ind\nprint()\nalpha = (0.1,0.05,0.01)                                           # assigning alpha for different level of confidence\nconfidence = (90,95,99)                                           # assigning level of confidence\nj = 0                                                             \nfor i in (alpha):                                                 # looping with differnt values of alpha\n    print(\"At \\033[1m{0}% confidence Level\\033[0m : Alpha = \\033[1m{1} :\\033[0m\\n\".format(confidence[j],i))\n    if(pValue > i):                                               # comparing if p-value greater than alpha  \n        print(\"The \\033[1mp-Value is {0} and > {1}\\033[0m, so we \\033[1mfail to reject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ho)\n             )\n    else:                                                         # if above condition fails i.e if p-value less than equals then alpha\n        print(\"The \\033[1mp-Value is {0} and <= {1}\\033[0m, so we \\033[1mreject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ha)\n             )\n    j = j + 1\n    print()","1034eb9e":"print()\nprint(\"~\"*72)\nprint(\"\\033[1mAnswer 4.b.\\033[0m Does bmi of males differ significantly from that of females?\")\nprint(\"~\"*72)\nprint()\nprint(\"Let's check relationship of bmi for male and female:\")\nprint()\ntotBmi = insData.groupby(insData.sex).sum()['bmi'].tolist()   # Total bmi group by sex category \ntotCnt = insData.sex.value_counts().tolist()                  # Total count for different sex category \n# creating a pandas dataframe and populating the Total bmi, Total Count and Average bmi for sex category\nprint(\"\\033[1m{0}\\033[0m\".format(pd.DataFrame({'Male':[round(totBmi[0],2),round(totCnt[0]),round(totBmi[0]\/totCnt[0],2)],\n                                        'Female':[round(totBmi[1],2),round(totCnt[1]),round(totBmi[1]\/totCnt[1],2)]},\n                            index=['Total BMI','Total Count','Average BMI']))) \nprint()\nprint(\"*\"*40)\nprint()\nprint(\"plotting \\033[1mscatter plot\\033[0m to visualize bmi for male and female :\")\nprint(\"-\"*60)\nprint()\nplt.figure(figsize=(10,5))                                     # setting figure size with width = 10 and height = 5\n# seaborn scatterplot to examine relationship between bmi and sex\nsns.scatterplot(insData.age,insData.bmi,hue=insData.sex,palette=['blue','red']) \nplt.show()                                                     # plotting in the notebook\nprint()\nprint(\"*\"*50)\nprint(\"\\033[1mStating Null Hypothesis and Alternate Hypothesis.\\033[0m\")\nprint(\"*\"*50)\nprint()\nHo = \"bmi of males did not differ from that of females.\"       # stating null hypothesis and assigning to Ho variable\nHa = \"bmi of males differ significantly from that of females.\" # stating alternate hypothesis and assigning to Ha variable\nprint(\"\\033[1mHo :\\033[0m {0} \\033[1m(Null Hypothesis)\\033[0m\".format(Ho))\nprint(\"\\033[1mHa :\\033[0m {0} \\033[1m(Alternate Hypothesis)\\033[0m\".format(Ha))\nx = np.array(insData[insData.sex == \"male\"].bmi)               # bmi for sex-male assigned to x variable\ny = np.array(insData[insData.sex == \"female\"].bmi)             # bmi for sex-female assigned to y variable\ntStatistic, pValue = stats.ttest_ind(x, y, axis=0)             # two-side test for two sample using ttest_ind\nprint()\nalpha = (0.1,0.05,0.01)                                        # assigning alpha for different level of confidence\nconfidence = (90,95,99)                                        # assigning level of confidence\nj = 0                                                             \nfor i in (alpha):                                              # looping with differnt values of alpha\n    print(\"At \\033[1m{0}% confidence Level\\033[0m : Alpha = \\033[1m{1} :\\033[0m\\n\".format(confidence[j],i))\n    if(pValue > i):                                            # comparing if p-value greater than alpha  \n        print(\"The \\033[1mp-Value is {0} and > {1}\\033[0m, so we \\033[1mfail to reject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ho)\n             )\n    else:                                                      # if above condition fails i.e if p-value less than equals then alpha\n        print(\"The \\033[1mp-Value is {0} and <= {1}\\033[0m, so we \\033[1mreject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ha)\n             )\n    j = j + 1\n    print()","977760c2":"print()\nprint(\"~\"*82)\nprint(\"\\033[1mAnswer 4.c.\\033[0m Is the proportion of smokers significantly different in different genders?\")\nprint(\"~\"*82)\nprint()\nprint(\"Let's check relationship of smoker and sex:\")\nprint()\npivot = pd.crosstab(insData.sex,insData.smoker)                    # pivoting sex with smoker\nprint(pivot)\nprint()\nprint(\"*\"*40)\nprint()\nprint(\"plotting \\033[1mcount plot\\033[0m to visualize smoker for male and female :\")\nprint(\"-\"*60)\nprint()\nplt.figure(figsize=(10,5))                                         # setting figure size with width = 10 and height = 5\nsns.countplot(insData.smoker,hue=insData.sex)                      # seaborn countplot to examine count of smoker in different sex\nplt.show()                                                         # plotting in the notebook\nprint()\nprint(\"*\"*50)\nprint(\"\\033[1mStating Null Hypothesis and Alternate Hypothesis.\\033[0m\")\nprint(\"*\"*50)\nprint()\nHo = \"proportion of smokers has no difference in different genders.\"       # stating null hypothesis and assigning to Ho variable\nHa = \"proportion of smokers significantly different in different genders.\" # stating alternate hypothesis and assigning to Ha variable\nprint(\"\\033[1mHo :\\033[0m {0} \\033[1m(Null Hypothesis)\\033[0m\".format(Ho))\nprint(\"\\033[1mHa :\\033[0m {0} \\033[1m(Alternate Hypothesis)\\033[0m\".format(Ha))\nfemaleSmokers = insData[(insData.sex == 'female') & (insData.smoker == 'yes')].smoker.count()  # number of female smokers\nmaleSmokers = insData[(insData.sex == 'male') & (insData.smoker == 'yes')].smoker.count()      # number of male smokers    \ntotFemale = insData[insData.sex == 'female'].sex.count()          # number of females in the data\ntotMales = insData[insData.sex == 'male'].sex.count()             #number of males in the data \n# \nstat, pValue = proportion.proportions_ztest([femaleSmokers, maleSmokers] , [totFemale, totMales])\nprint()\nalpha = (0.1,0.05,0.01)                                           # assigning alpha for different level of confidence\nconfidence = (90,95,99)                                           # assigning level of confidence\nj = 0                                                             \nfor i in (alpha):                                                 # looping with differnt values of alpha\n    print(\"At \\033[1m{0}% confidence Level\\033[0m : Alpha = \\033[1m{1} :\\033[0m\\n\".format(confidence[j],i))\n    if(pValue > i):                                               # comparing if p-value greater than alpha  \n        print(\"The \\033[1mp-Value is {0} and > {1}\\033[0m, so we \\033[1mfail to reject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ho)\n             )\n    else:                                                         # if above condition fails i.e if p-value less than equals then alpha\n        print(\"The \\033[1mp-Value is {0} and <= {1}\\033[0m, so we \\033[1mreject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ha)\n             )\n    j = j + 1\n    print()","0d561eb9":"# filtering data for sex-female and assigning to femaleInsData vaiable\nfemaleInsData = insData[insData['sex'] == \"female\"]\nprint()\nprint(\"~\"*105)\nprint(\"\\033[1mAnswer 4.d.\\033[0m Is the distribution of bmi across women with no (zero) children, one childand two children, the same?\")\nprint(\"~\"*105)\nprint()\nprint(\"Let's check relationship of bmi across Women with No of children :\")\nprint()\ntotBmi = femaleInsData.groupby(femaleInsData.children).sum()['bmi'].tolist() # Total bmi group by No of children\ntotCnt = femaleInsData.children.value_counts().tolist()                      # Total count group by No of children\n# creating a pandas dataframe and populating the Total bmi, Total Count and Average bmi for No of Children\nprint(\"\\033[1m{0}\\033[0m\".format(pd.DataFrame({'Zero Children':[round(totBmi[0],2),round(totCnt[0]),round(totBmi[0]\/totCnt[0],2)],\n                                        'One Children':[round(totBmi[1],2),round(totCnt[1]),round(totBmi[1]\/totCnt[1],2)],\n                                        'Two Children':[round(totBmi[2],2),round(totCnt[2]),round(totBmi[2]\/totCnt[2],2)],\n                                        'Three Children':[round(totBmi[3],2),round(totCnt[3]),round(totBmi[3]\/totCnt[3],2)],\n                                        'Four Children':[round(totBmi[4],2),round(totCnt[4]),round(totBmi[4]\/totCnt[4],2)],\n                                        'Five Children':[round(totBmi[5],2),round(totCnt[5]),round(totBmi[5]\/totCnt[5],2)],\n                                              },\n                            index=['Total BMI','Total Count','Average BMI']).T)) \nprint()\nprint(\"*\"*50)\nprint()\nprint(\"plotting \\033[1mbar plot\\033[0m to visualize bmi across women for No of Children :\")\nprint(\"-\"*60)\nprint()\nplt.figure(figsize=(10,5))                               # setting figure size with width = 10 and height = 5\nsns.barplot(femaleInsData.children, femaleInsData.bmi)   # seaborn barplot to examine mean of bmi for No of Children\nplt.show()                                               # plotting in the notebook\nprint()\nprint(\"*\"*50)\nprint(\"\\033[1mStating Null Hypothesis and Alternate Hypothesis.\\033[0m\")\nprint(\"*\"*50)\nprint()\n# stating null hypothesis and assigning to Ho variable\nHo = \"distribution of bmi across women with no (zero) children, one children and two children, the same.\"\n# stating alternate hypothesis and assigning to Ha variable\nHa = \"distribution of bmi across women with no (zero) children, one children and two children, not the same.\"\nprint(\"\\033[1mHo :\\033[0m {0} \\033[1m(Null Hypothesis)\\033[0m\".format(Ho))\nprint(\"\\033[1mHa :\\033[0m {0} \\033[1m(Alternate Hypothesis)\\033[0m\".format(Ha))\nzeroChildren = femaleInsData[femaleInsData['children']==0]['bmi']  # bmi of sex-female for No-Children\noneChildren = femaleInsData[femaleInsData['children']==1]['bmi']   # bmi of sex-female for One-Children\ntwoChildren = femaleInsData[femaleInsData['children']==2]['bmi']   # bmi of sex-female for Two-Children\n# Oneway ANNOVA test for above three groups i.e No-Children, One-Children and Two Children\nfStatistic, pValue = stats.f_oneway( zeroChildren, oneChildren, twoChildren)\nprint()\nalpha = (0.1,0.05,0.01)                                           # assigning alpha for different level of confidence\nconfidence = (90,95,99)                                           # assigning level of confidence\nj = 0                                                             \nfor i in (alpha):                                                 # looping with differnt values of alpha\n    print(\"At \\033[1m{0}% confidence Level\\033[0m : Alpha = \\033[1m{1} :\\033[0m\\n\".format(confidence[j],i))\n    if(pValue > i):                                               # comparing if p-value greater than alpha  \n        print(\"The \\033[1mp-Value is {0} and > {1}\\033[0m, so we \\033[1mfail to reject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ho)\n             )\n    else:                                                         # if above condition fails i.e if p-value less than equals then alpha\n        print(\"The \\033[1mp-Value is {0} and <= {1}\\033[0m, so we \\033[1mreject\\033[0m the Null Hypothesis and conclude that \\033[1m{2}\\033[0m\"\n              .format(pValue,i,Ha)\n             )\n    j = j + 1\n    print()","d1d1d84e":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">f. Measure of skewness of \u2018bmi\u2019, \u2018age\u2019 and \u2018charges\u2019 columns (2 marks)<\/span>","abd634ce":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">b. Data type of each attribute (2 marks)<\/span>","58f8cc3a":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">e. Distribution of \u2018bmi\u2019, \u2018age\u2019 and \u2018charges\u2019 columns. (4 marks)<\/span>","fd7b06c8":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">h. Distribution of categorical columns (include children) (4 marks)<\/span>","1baafa59":"<span style=\"color:blue;font-size:15px\"><b>a. sex column :<\/b><\/span> Data is almost equally distributed between female (662) and male (676)<br>\n<span style=\"color:blue;font-size:15px\"><b>b. children column :<\/b><\/span> With increase in No of children, data count decreases.Count of no (zero) children having most portion of the data (574) and 5 children having least portion of the data (18).<br>\n<span style=\"color:blue;font-size:15px\"><b>c. smoker column :<\/b><\/span> No of smoker (274) is comparatively lesser than non-smoker(1064).<br>\n<span style=\"color:blue;font-size:15px\"><b>d. region column :<\/b><\/span> Data is almost equally distributed between northeast (324), southeast (364), southwest (325) and northwest (325).","e7fdc6b6":"### Note : The insurance dataset is having a duplicate row in it.","96377afd":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">d. 5 point summary of numerical attributes (3 marks)<\/span>","beb2ecf9":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">d. Is the distribution of bmi across women with no (zero) children, one children and two children, the same? (7 marks)<\/span>","af52be06":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">b. Does bmi of males differ significantly from that of females? (7marks)<\/span>","acdde19c":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">c. Checking the presence of missing values (3 marks)<\/span>","762cc6ae":"<span style=\"color:blue\"><b> a. 'bmi' feature :<\/b><\/span> It is observed from the Histogram plot of 'bmi' feature that the data-points of bmi are normly distribued and formed bell shaped curve. But looking at the mean and median of the 'bmi' feature <b>(Mean = 30.663 and Median = 30.4) <\/b> we can say the data points are slightly right skewed or positively skewed.  Hence we can conclude, this feature is almost perfectly distributed with mean and median values close to each other.\n\n<span style=\"color:blue\"><b> b. 'age' feature :<\/b><\/span>  It is observed from the Histogram plot of 'age' feature that data-points of age are distributed quite uniformly. Looking at the mean and median of the 'age' feature <b>(Mean = 39.207 and Median = 39.0) <\/b> we can say the data points are slightly right skewed or positively skewed with mean and median values close to each other.\n\n<span style=\"color:blue\"><b> c. 'charges' feature :<\/b><\/span>  It is observed from the Histogram plot of 'charges' feature that data-points of charges are highly right \/ positively skewed. Same can be inferred by looking at the mean and median of the 'charges' feature <b>(Mean = 13270.422 and Median = 9382.033)<\/b> Mean is far greater than Median. Hence we can conclude that the 'charges' feature is highly right \/ positively skewed.","3144dde7":"* **There's an interesting pattern between 'age' and 'charges. Could be because for the same ailment, older people are charged more than the younger ones**\n* **The only obvious correlation of 'charges' is with 'smoker' - Looks like smokers claimed more money than non-smokers**","47656c7d":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">c. Is the proportion of smokers significantly different in different genders? (7 marks)<\/span>","a357c039":"## <span style=\"color:blue\">3. Perform basic EDA which should include the following and print out yourinsights at every step. (28 marks)<\/span>\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">a. Shape of the data (2 marks)<\/span>","0a828092":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">g. Checking the presence of outliers in \u2018bmi\u2019, \u2018age\u2019 and \u2018charges' columns (4 marks)<\/span>","867594e6":"<span style=\"color:blue\"><b> a. 'bmi' feature :<\/b><\/span> Skewness of this feature is very minimal at 0.284 (approx), slightly right \/ positive skewed.\n\n<span style=\"color:blue\"><b> b. 'age' feature :<\/b><\/span> Skewness of this feature is very very minimal at 0.056 (approx), slightly right \/ positive skewed.\n\n<span style=\"color:blue\"><b> c. 'charges' feature :<\/b><\/span> Skewness of this feature is very high at 1.516 (approx), highly right \/ positive skewed.","a47cfd47":"### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">i. Pair plot that includes all the columns of the data frame (4 marks)<\/span>","5897823e":"## <span style=\"color:blue\">2. Read the data as a data frame (2 marks)<\/span>","6b045bc8":"# <span style=\"color:blue\">Tasks<\/span>\n\n## <span style=\"color:blue\">1. Import the necessary libraries (2 marks)<\/span>","6c63f8bf":"## <span style=\"color:blue\">4. Answer the following questions with statistical evidence (28 marks)<\/span>\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">a. Do charges of people who smoke differ significantly from the people who don't? (7 marks)<\/span>","9deef0db":"## <span style=\"color:blue\"><u>Basic Understanding the data<\/u><\/span>\n\n<span style=\"font-size:18px\">As the data file (insurance.csv) is too small in size (55 KB), it's better to have a glance at the data with Excel for better understanding.<\/span>\n\n### <span style=\"color:blue\"><u>My Findings after going through the data in Excel :<\/u><\/span>\n\n1. Data set is having <b>1338 rows and 7 columns<\/b> ( columns as given in the Attribute Information).\n\n2. There are 3 Categorical Columns namely <b>sex, smoker, region<\/b> and 4 Numerical Columns <b>age, bmi, children, charges<\/b>.\n\n3. age column having discrete numerical values. For age column <b>minimum value is 18 and maximum value is 64<\/b>, age column having <b>range of (age maximum - age minimum) = (64-18) = 46(64-18) = 46 and mean (average) of 39.20702541 <\/b>.\n\n4. For sex column only two values are there, namely <b>male and female<\/b>. It can be <b>binary coded<\/b> where we can assign female as 0 and male as 1.\n\n5. bmi column having continous numerical values. For bmi column <b>minimum value is 15.96 and maximum value is 53.13<\/b> , bmi column having <b>range of (bmi maximum - bmi minimum) = (53.13 - 15.96) = 37.17 and mean of 30.66339686 <\/b>.\n\n6. children column is also having discrete numerical values. Column <b>contains only 0, 1, 2, 3, 4, 5 values<\/b>, having minimum value of 0 and maximum value of 5.\n\n7. For smoker column only two values are there, namely <b>yes and no<\/b>. It can also be <b>binary coded<\/b> like sex column where we can assign no as 0 and yes as 1.\n\n8. For region column four values are there, namely <b>northeast, southeast, southwest, northwest<\/b>. We can use Label Encoder to code the values.\n\n9. charges column having continous numerical values. For charges column <b>minimum value is 1121.8739 and maximum value is 63770.42801<\/b> , charges column having <b>range of (charges maximum - charges minimum) = (63770.42801 - 1121.8739) = 62648.55411 and mean of 13270.42227 <\/b>.\n\n10. <b>There is no missing value in the dataset,<\/b> but have a <b>Duplicate row<\/b> in it."}}