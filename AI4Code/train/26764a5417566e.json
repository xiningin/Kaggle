{"cell_type":{"b8ce49e5":"code","93a93bad":"code","7ac34617":"code","ab842a31":"code","ca4f099e":"code","bd7f753b":"code","bb810ed8":"code","a1cd7332":"markdown","fea626ad":"markdown","ec82ea7e":"markdown","3749fc64":"markdown","9f324580":"markdown","7ebb471e":"markdown","f9073a83":"markdown","50ecad81":"markdown","46ca1196":"markdown","88c1de0d":"markdown"},"source":{"b8ce49e5":"import sys\nfrom Bio import SeqIO\nfrom Bio import pairwise2\nfrom Bio.pairwise2 import format_alignment\nfrom Bio import Phylo\nimport numpy as numpy\nimport matplotlib\nimport pylab\nimport matplotlib.pyplot as plt\n","93a93bad":"Homo_sapiens = 'MTELETAMGMIIDVFSRYSGSEGSTQTLTKGELKVLMEKELPGFLQSGKDKDAVDKLLKDLDANGDAQVDFSEFIVFVAAITSACHKYFEKAGLK'\nGibbon = 'MTELETAMGMIIDVFSRYSGSEGSTQTLTKGELKVLMEKELPGFLQTGKDKDAVDKLLKDLDANGDAEVDFSEFIVFVAAITSACHKYFEKAELK'","7ac34617":"seq1 = Homo_sapiens\nseq2 = Gibbon\n\nclass Scores(object):\n    gap = -10\n    match = 5\n    mismatch = -1\n\n    def __init__(self, s1, s2):      \n        if len(s1) >= len(s2):\n            self.t = s1\n            self.s = s2\n        else:\n            self.t = s2\n            self.s = s1\n        self.a = None\n        self.alignments = None   \n\n    def matrix(self):\n        m = len(self.s) + 1  \n        n = len(self.t) + 1  \n\n        self.a = [\n            [0 for j in range(n)] for i in range(m)\n        ]\n\n        for i in range(1, m):\n            for j in range(1, n):\n                value = self.match if self.s[i - 1] == self.t[j - 1] else self.mismatch\n                self.a[i][j] = max(\n                    self.a[i - 1][j] + self.gap,\n                    self.a[i - 1][j - 1] + value,\n                    self.a[i][j - 1] + self.gap,\n                    0\n                )\n\n    def alignment(self, i, j, s, t):\n\n        if self.a[i][j] == 0:\n            self.alignments.append(\n                [t[::-1], s[::-1]]\n            )\n            return\n        if i > 0 and self.a[i][j] == self.a[i - 1][j] + self.gap:\n            self.alignment(\n                i=i - 1,\n                j=j,\n                s=s + self.s[i - 1],\n                t=t + '_'\n            )\n        if i > 0 and j > 0 and self.a[i][j] == self.a[i - 1][j - 1] + (self.match if self.s[i - 1] == self.t[j - 1] else self.mismatch):\n            self.alignment(\n                i=i - 1,\n                j=j - 1,\n                s=s + self.s[i - 1],\n                t=t + self.t[j - 1]\n            )\n        if j > 0 and self.a[i][j] == self.a[i][j - 1] + self.gap:\n            self.alignment(\n                i=i,\n                j=j - 1,\n                s=s + '_',\n                t=t + self.t[j - 1]\n            )\n\n    def print_alignments(self):    \n        self.alignments = []\n\n        bigger_positions = []\n        bigger = -sys.maxsize\n        for i in range(len(self.a)):\n            for j in range(len(self.a[i])):\n                if self.a[i][j] > bigger:\n                    bigger = self.a[i][j]\n                    bigger_positions = [[i, j]]\n                elif self.a[i][j] == bigger:\n                    bigger_positions.append([i, j])\n\n        for [i, j] in bigger_positions:\n            self.alignment(\n                i=i,\n                j=j,\n                s='',\n                t=''\n            )\n        print('Score: ', bigger, '\\n')\n        for [t, s] in self.alignments:\n            print('Align1: ', t)\n            print('Align2: ', s, '\\n')\n\nif __name__ == '__main__':\n    Scores = Scores(seq1,seq2)\n\n    print('\\nLocal alignment')\n    Scores.matrix()\n    Scores.print_alignments()","ab842a31":"alignments = pairwise2.align.localms(seq1,seq2,5,-1,-10,0)\n\nfor a in alignments: \n    print(format_alignment(*a))\n","ca4f099e":"tree = Phylo.read('..\/input\/treedata\/tree.xml', 'newick')\ntree.root.color = 'c'\ntree.ladderize()\nmatplotlib.rc('font',size=10)\nPhylo.draw(tree, branch_labels = lambda c: c.branch_length)\n","bd7f753b":"plt.figure(figsize=(12,7))\nsizes = [len(r) for r in SeqIO.parse('..\/input\/drosophila-melanogaster-genome\/mrna-genbank.fa', \"fasta\")]\npylab.hist(sizes, bins=20, color = \"pink\")\npylab.title(\"%i sequences\\nLengths %i to %i\" \\\n% (len(sizes),min(sizes),max(sizes)))\npylab.xlabel(\"Sequence length (bp)\")\npylab.ylabel(\"Count\")\npylab.show()","bb810ed8":"from collections import Counter\n\nNOISE_LEVEL = 0.2\nADD_REVERSE_C = True\n\nk = 15\n\nwith open('..\/input\/forkmer\/hw3_dataset.fasta', 'r') as file:\n    fasta = file.read()\n\nfasta = fasta.split('\\n')\nfasta = fasta[1::2]\n\nkmers = [s[i:i + k] for s in fasta for i in range(len(s) - k + 1)]\n\nif ADD_REVERSE_C:\n    reverse_c_trans = str.maketrans('acgt', 'catg')\n    kmers += [kmer.translate(reverse_c_trans) for kmer in kmers]\n\nkmers_occurence = Counter(Counter(kmers).values())\n\nplt.figure(figsize=(15,5))\nplt.bar(list(kmers_occurence.keys()),kmers_occurence.values(), color='c')\nplt.yscale('log')\nplt.xlabel('\u0421overage')\nplt.ylabel('Density')\nplt.grid()\nplt.show()\n\nkmers_freq_len = len(kmers_occurence)\nkmers_freq_noise_level = int(NOISE_LEVEL * kmers_freq_len)\nkmers_occurence = sorted(kmers_occurence.items())[kmers_freq_noise_level:]\n\ncoverage, _ = max(kmers_occurence, key=lambda x: x[1])\nprint('Coverage:', coverage)\n\ngenom_len = sum(k*v for k, v in kmers_occurence) \/\/ coverage\nprint('The length of the genome:', genom_len)","a1cd7332":"Isn't that wonderful? We can compare ourselves to any living creature on the planet!\nOf course more clearly will look at the phylogenetic tree. I built this tree last year during a training project. The code is huge and boring, so I don't include it here. If someone is interested to see, I will be happy to share.\nIt is very convenient that we can build a tree by opening a file with weights for it. Weights are calculated using a distance matrix and algorithms:WPGMA or UPGMA.\nMy weights for the tree were stored in a file xml.\n","fea626ad":"**Explore some of the files in the dataset**\n\nI have not figured out what to do with the data on the genes stored in CSV format. But I will definitely do it! In the meantime, we can analyze some information stored in the fasta format.\n\"mrna-genbank.fa\" - a single fasta file with a large number of mRNA sequences from GenBank associated with D.melanogaster.\nLet's look at this file.","ec82ea7e":"A large file that contains sequences of different lengths. It is with such sequences that scientists work when they collect the genome. \n**Genome Assembly**  is the process of combining a large number of short DNA fragments (reads) into one or more long sequences (contigs and scaffolds) in order to restore the DNA sequences of chromosomes from which these fragments originated during sequencing.\nThere are two approaches for genome Assembly \u2014 based on overlap overlay-layout-consensus (used for long fragments) and based on de Bruijn graphs (used for short fragments).\n\n**De Bruijn graph**. \nIn graph theory, an n-dimensional De Bruijn graph of m symbols is a directed graph representing overlaps between sequences of symbols. It has mn vertices, consisting of all possible length-n sequences of the given symbols; the same symbol may appear multiple times in a sequence.","3749fc64":"We live in a time of great discoveries in the field of medicine.  Many discoveries have been made thanks to the ability to analyze our blood, skin and even genes! That's impressive! All information about our body can be written in the form of a sequence of letters! I think it impresses any person in love with data. Data inside us!\nWe often hear the saying \"Lucky with genetics\".  But today, experts who are engaged in the analysis of our genes can say for sure, lucky or not!\nI am not an expert in bioinformatics, but I am very interested in this area. In this kernel, I want to show some interesting things that we can learn about our genes. I do not guarantee absolute correctness and will be glad to comments and suggestions.\n![![image.png](attachment:image.png)](https:\/\/teacherofya.files.wordpress.com\/2017\/11\/img_4401.gif?w=640)\n\n***Alignment of biological sequences***\n\nIn the process of evolution, all biological macromolecules undergo multiple mutation events in the course of molecular evolution. This results in the loss or acquisition of extended chunks of sequence or individual point mutations. \nIf two proteins or two nucleotide sequences have a great similarity, they are homologues, and usually have a common precursor, similar function and similar structures. \n**Magical!**  We can find out how different we are from a butterfly or a giraffe :D\nWe can do sequence alignment with a wonderful module - Biopython. And we can independently by algorithms, which are discussed in many articles. \n\n**Local alignment. Smith-Waterman Algorithm**\n\nSmith-Waterman algorithm is designed to obtain local alignment of sequences, that is, to identify similar areas of two nucleotide or protein sequences. The Smith-Waterman algorithm compares segments of all possible lengths and optimizes the measure of similarity across all segments and all alignments of those segments.\n![![image.png](attachment:image.png)](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/92\/Smith-Waterman-Algorithm-Example-En.gif)\n","9f324580":"**K - mer counting**\n\nConsider an example of counting K-mers. Unfortunately, you will not be able to do it with the file available in the dataset. Since we have many sequences of different lengths.  I uploaded another file.","7ebb471e":"Now let's use a faster way. Biopython :)","f9073a83":"![![image.png](attachment:image.png)](http:\/\/skrinshoter.ru\/i\/141018\/m7Wpw13U.png)\n","50ecad81":"In sequence assembly, k-mers are typically used during the construction of De Bruijn graphs. In order to create a De Bruijn Graph, the strings stored in each edge with length  L, must overlap another string in another edge by  L-1 in order to create a vertex. Reads generated from next-generation sequencing will typically have different read lengths being generated. For example, reads by Illumina\u2019s sequencing technology capture reads of 100-mers. However, the problem with the sequencing is that only small fractions out of all the possible 100-mers that are present in the genome are actually generated. This is due to read errors, but more importantly, just simple coverage holes that occur during sequencing. The problem is that these small fractions of the possible k-mers violate the key assumption of de Bruijn graphs that all the k-mer reads must overlap its adjoining k-mer in the genome by  k-1 (which can\u2019t occur when all the possible k-mers aren\u2019t present). The solution to this problem is to break these k-mer sized reads into smaller k-mers, such that the resulting smaller k-mers will represent all the possible k-mers of that smaller size that are present in the genome. Furthermore, splitting the k-mers into smaller sizes also helps alleviate the problem of different initial read lengths. An example of the solution of splitting the reads into smaller k-mers is shown in figure 1. In this example the 5 reads do not account for all the possible 7-mers of the genome, and as such, a de Bruijn graph cannot be created. But when they are split into 4-mers, the resultant subsequences are enough to reconstruct the genome using a de Bruijn graph.","46ca1196":"Let's compare the DNA chain of a human and a gibbon. Let's see how similar they are. You can download these and other protein sequences here: https:\/\/omabrowser.org\/oma\/vps\/HUMAN22168\/fasta\/","88c1de0d":"This is not even 1% of bioinformatics capabilities to analyze our genes. Magical! \n\n**Work in progress. Any comments are welcome. Thank you all for your attention!**"}}