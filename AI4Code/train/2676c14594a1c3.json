{"cell_type":{"41bce9dc":"code","d72132fb":"code","5a4b4d95":"code","9385ed16":"code","ce9289c1":"code","8250de7d":"code","7b961607":"code","a2e76976":"code","0efae497":"code","f4fd8561":"code","8d4ce6d4":"code","89732980":"code","e7295dde":"markdown","3c32c957":"markdown","8f1cc157":"markdown","c9dcbc38":"markdown"},"source":{"41bce9dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d72132fb":"import warnings\nwarnings.filterwarnings('ignore')\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data = train_data.drop([\"Cabin\",\"Ticket\",\"Name\",\"PassengerId\"],axis=1).dropna()\ntest_data =pd.read_csv('\/kaggle\/input\/titanic\/test.csv').drop([\"Cabin\",\"Ticket\",\"Name\"],axis=1)\ntrain_data.head()","5a4b4d95":"collist = train_data.columns.tolist()\ncollist.remove('Survived')\ntrain_X = train_data[collist]\ntrain_Y = train_data['Survived']\ntotal_data = pd.concat([train_X, test_data], axis=0)","9385ed16":"from sklearn.feature_selection import RFE\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\ncv = KFold(n_splits=10)\nenc = preprocessing.LabelEncoder()\ncat_cols = ['Sex',\"Embarked\"]\nfor col in cat_cols:\n    train_X[col] = train_X[col].astype('str')\n    test_data[col] = test_data[col].astype('str')\n    total_data[col] = total_data[col].astype('str')\n    total_data[col] = enc.fit_transform(total_data[col])\n    train_X[col] = enc.transform(train_X[col])\n    test_data[col] = enc.transform(test_data[col])\ntrain_X.head()","ce9289c1":"train_X = train_X.reset_index()\ntrain_X = train_X.drop(\"index\",axis=1)\ntrain_X","8250de7d":"train_Y = train_Y.reset_index()\ntrain_Y = train_Y.drop(\"index\",axis=1)\ntrain_Y","7b961607":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators = 100, max_depth=8, random_state=0)","a2e76976":"rfe = RFE(clf, 4)\nrfe = rfe.fit(train_X, train_Y)\nprint(rfe.support_)\nprint(rfe.ranking_)","0efae497":"collist = train_X.columns.tolist()\nnew_collist = []\nfor i in range(7):\n    if (rfe.ranking_[i]==1):\n        new_collist.append(collist[i])\nprint (new_collist)\ntrain_X_rfe = train_X[new_collist]\ntesting_data = test_data[new_collist]","f4fd8561":"final_classifier = clf.fit(train_X_rfe,train_Y)\ntesting_data = testing_data.fillna(train_X_rfe.mean())\npredictions = final_classifier.predict(testing_data)\npredictions","8d4ce6d4":"test_data[\"Survived\"] = predictions\nfinal_data = test_data[[\"PassengerId\",\"Survived\"]]\nfinal_data.head()","89732980":"export_csv = final_data.to_csv (r'submission.csv', index = None, header=True)","e7295dde":"# Data Pre-processing","3c32c957":"# Model Training and Prediction","8f1cc157":"# Feature Selection","c9dcbc38":"# Loading Training and Test Set"}}