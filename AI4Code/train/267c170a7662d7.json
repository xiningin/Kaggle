{"cell_type":{"9d5ca667":"code","b0ff576b":"code","92bf22e4":"code","b69c43ea":"code","576e2528":"code","f7ae69e5":"code","19dc5dab":"code","3743b0f7":"code","058e30cf":"code","e7651149":"code","aae8aa0e":"code","1c5fdcea":"code","65a3812c":"code","dadbb40d":"code","8e2cb7e4":"code","4fb5bb22":"code","921473aa":"code","d547e335":"code","f7ceff73":"code","c1984664":"code","4d06fdc4":"code","fd7b9cb0":"code","4fef70e1":"code","adb22c82":"code","e2c71b95":"code","bf883112":"code","35a921f5":"code","7fba1cc8":"code","77d61484":"code","ea80d340":"code","77009958":"code","333d4fe1":"markdown","834bb747":"markdown","07854201":"markdown","35c01b0d":"markdown","f45a7d4b":"markdown","41eff7e7":"markdown","85989a32":"markdown","af052dbe":"markdown","91b2ef89":"markdown","8b05c25f":"markdown"},"source":{"9d5ca667":"### Keras and Tensorflow >2.0","b0ff576b":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas_datareader.data import DataReader\nfrom datetime import datetime","92bf22e4":"tech_list = ['AAPL']\nend=datetime.now()\nstart=datetime(end.year-12,end.month,end.day)\nfor stock in tech_list:\n    globals()[stock]=DataReader(stock,'yahoo',start,end)","b69c43ea":"company_list=[AAPL]\ncompany_name=['APPLE']\nfor company,com_name in zip(company_list,company_name):\n    company['company_name']=com_name\ndf=pd.concat(company_list,axis=0)\ndf.tail(10)","576e2528":"plt.figure(figsize=(16,6))\ncompany['Close'].plot()\nplt.ylabel('Close')\nplt.xlabel('Date')\nplt.title(f\"Closing Price of {tech_list[0]}\")\nplt.tight_layout()","f7ae69e5":"df1=df.reset_index()['Close']","19dc5dab":"df1","3743b0f7":"# Applied MinMaxScaler as LSTM is sensitive to the scale of data\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","058e30cf":"##splitting dataset into train and test split\ntraining_size=int(len(df1)*0.95)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","e7651149":"training_size,test_size","aae8aa0e":"test_size","1c5fdcea":"train_data","65a3812c":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","dadbb40d":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 50\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)","8e2cb7e4":"print(X_train.shape), print(y_train.shape)","4fb5bb22":"print(X_test.shape), print(ytest.shape)","921473aa":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","d547e335":"### Create the Stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","f7ceff73":"model=Sequential()\nmodel.add(LSTM(128,return_sequences=True,input_shape=(X_train.shape[1],1)))\nmodel.add(LSTM(64,return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\n","c1984664":"model.summary()","4d06fdc4":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)","fd7b9cb0":"### Lets Do the prediction and check performance metrics\ntrain_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","4fef70e1":"##Transformback to original form\ntrain_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","adb22c82":"### Calculate RMSE performance metrics\nimport math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","e2c71b95":"### Test Data RMSE\nmath.sqrt(mean_squared_error(ytest,test_predict))","bf883112":"train_predict","35a921f5":"### Plotting \n\n# shift train predictions for plotting\n\nlook_back=50\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n\n# shift test predictions for plotting\n\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Days', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.legend(['Actual_Data','Prediction_train','Prediction_Val'], loc='lower right')\nplt.show()","7fba1cc8":"lst_output=[]\nn_steps=50\nndays=30\n\nval_len=len(test_data)\nx_input=test_data[val_len-n_steps:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\ni=0\nwhile(i<ndays):\n    \n    if(len(temp_input)>n_steps):\n        #print(temp_input)\n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        #print(x_input)\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        #print(temp_input)\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","77d61484":"len(lst_output) # 30 days prediction ","ea80d340":"len(df1) # counter till today","77009958":"# Plot the data\nprediction=df1.tolist() # prediction till today\nprediction.extend(lst_output)  # append the prediction for next 30 days\nprediction=scaler.inverse_transform(prediction).tolist()\n\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Days', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\n\nplt.plot(prediction)\nplt.legend(['Predictions'], loc='lower right')\nplt.show()","333d4fe1":"### Stock Price Prediction And Forecasting Using Stacked LSTM","834bb747":"### Creating Dataset (X , Y)","07854201":"### Visualizing train and validation predictions","35c01b0d":"### Import Libraries","f45a7d4b":"### Model Training","41eff7e7":"### Splitting Dataset","85989a32":"####  Historical veiw of the closing price","af052dbe":"### Model Architecture ","91b2ef89":"### Load input data from Yahoo Finance API","8b05c25f":"### Prediction for next  30 days"}}