{"cell_type":{"ccec3a51":"code","9fe7eb21":"code","f1dc9337":"code","51594ae4":"code","825c19cf":"code","b0fce851":"code","4b7a18f8":"code","74120701":"code","caab88ff":"code","60c4c057":"code","a3cc788c":"code","e98114a6":"code","73ccd5d7":"code","2c6352ee":"code","df5626b9":"code","385f9026":"code","d6be6f1e":"code","c616e155":"code","45cfe21b":"code","784afd47":"code","cee05767":"code","4b679e55":"code","f75e1eed":"code","fd288632":"code","6535627f":"code","ed151f15":"code","a6409e6a":"code","cb83d476":"code","2ac7f2fe":"code","f6a3b551":"code","0ffa8629":"code","135c181c":"code","479d17f5":"code","e8c8c4bc":"code","c861ce19":"code","dd528f19":"code","caaa41a4":"markdown","dfddb843":"markdown","9c742876":"markdown","204347d3":"markdown","c6d8889c":"markdown","6612c2fd":"markdown"},"source":{"ccec3a51":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fe7eb21":"#importing libraries\n\nimport pandas as pd\nfrom pandas import datetime\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","f1dc9337":"#load the data \n\ndf=pd.read_csv(\"\/kaggle\/input\/perrin-freres-monthly-champagne-sales\/Perrin Freres monthly champagne sales millions.csv\")","51594ae4":"df.head()","825c19cf":"df.isnull().sum()\n","b0fce851":"df.shape","4b7a18f8":"df.dropna(inplace=True)","74120701":"df.rename(columns={'Perrin Freres monthly champagne sales millions ?64-?72':'Champagne sales'},inplace=True)\n# df.columns=['champagne sales']","caab88ff":"df.info()","60c4c057":"df.head()","a3cc788c":"#convert month into datetime format\n\ndf.Month=pd.to_datetime(df.Month)","e98114a6":"df.head()","73ccd5d7":"#set timesatmps as index\n\ndf.set_index(\"Month\",inplace=True)","2c6352ee":"# df.plot()\nplt.figure(figsize=(10,4))\nplt.plot(df[\"Champagne sales\"])\nplt.title('Champagne sales over Time', fontsize=20)\nplt.ylabel('Champagne sales', fontsize=16)\nfor year in range(1964,1973):\n    plt.axvline(pd.to_datetime(str(year)+'-01-01'), color='k', linestyle='--', alpha=0.4)\n    ","df5626b9":"rolling_mean=df.rolling(window=12).mean()\nrolling_std_dev=df.rolling(window=12).std()\n\nprint(rolling_mean)\nprint(\"------------------------------\")\nprint(rolling_std_dev)","385f9026":"# visualsing data in terms of rolling statistical measures\n\nplt.plot(df,label=\"original data\")\nplt.plot(rolling_mean,label=\"rolling mean\",color=\"orange\")\nplt.plot(rolling_std_dev,label=\"rolling std.dev\",color=\"black\")\nplt.title(\"Non stationary data visuals\",fontsize=20)\nplt.xlabel(\"Time\")\nplt.legend()\n# plt.grid(True)\nplt.show()","d6be6f1e":"# Ho : Data is not Stationary ----------null hypothesies\n# H1 : Data is Stationary -------------alternate hypothesies\nfrom statsmodels.tsa.stattools import adfuller\n\ndef adf_test(sales):\n    results=adfuller(sales,  autolag=\"AIC\")\n    labels=[\"ADF statistics\",\"P- value\",\"No.of lags\",\"No. of observations\"]\n    for key,value in zip(results,labels):\n        print(f\"[{value}]:{key}\")\n    if results[1]<=0.05:\n        print(\"Null hypothesies rejected, it comes out to be a stationary sdata\")\n    else:\n        print(\"Alternate hypothesies rejected,it comes out to be a non stationary data\") ","c616e155":"adf_test(df[\"Champagne sales\"])","45cfe21b":"# As per the test results,\n# it's quite clear that data we are provided with isn't at all statioanry.\n# Now,we pass data through further processing to finally get transformed data(stationary).\n# attempt in various ways(seasonal differencing ,by taking log to reduce the value scale. )\n#can be made to transform non stationary data to stationary format","784afd47":"# seasonal differencing\n\ndf['seasonal differencing']=df[\"Champagne sales\"]-df[\"Champagne sales\"].shift(12)","cee05767":"df.head(15)","4b679e55":"# visualsing the newly transformed (stationary data)\n\nplt.figure(figsize=(7,4))\nplt.plot(df[\"seasonal differencing\"])\nplt.title(\"Seasonal Differencing Over time\",fontsize=20)\nplt.ylabel(\"Seasonal Differencing\",fontsize=15)\nplt.grid(True)\n# plt.plot(df[\"seasonal differencing\"])","f75e1eed":"df.plot(title=\"Comparing both the transformed and the original data\")","fd288632":"# after differncing check for stationarity again\n\nadf_test(df[\"seasonal differencing\"].dropna())","6535627f":"# data has been converted into stationary form as it is evident form adf test results\n# hence we are good to go with model building and derieving related parameters","ed151f15":"df.dropna(inplace=True)","a6409e6a":"# plot autocorrelation and partialautocorrelation plots to get useful parameters to fit in the model\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nacf=plot_acf(df[\"seasonal differencing\"],lags=45)\npacf=plot_pacf(df[\"seasonal differencing\"],lags=45)\n","cb83d476":"# ARIMA   :   Non-seasonal Autoregressive Integrated Moving Averages  -->(p,d,q)\n# SARIMA  :   Seasonal ARIMA\n# SARIMAX :   Seasonal ARIMA with exogenous variables","2ac7f2fe":"pip install pmdarima","f6a3b551":"# pmdarima framework automatically hepls you find out the best suited parameters for your model\nfrom pmdarima import auto_arima\n\nmodel=auto_arima(df[\"Champagne sales\"],trace=True,suppress_warnings=True)\nmodel.summary()","0ffa8629":"# define train and test set\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\ntrain=df.iloc[:-24]\ntest=df.iloc[-24:]\nprint(train.shape,test.shape)","135c181c":"# train the model\n\nmodel_=SARIMAX(train[\"Champagne sales\"],order=(2,0,2),seasonal_order =(2, 0, 2, 12))\nmodel_=model_.fit(disp=False)\nmodel_.summary()","479d17f5":"# make predictions on test data\n\nstart=len(train)\nend= len(train)+len(test)-1\n\npredictions = model_.predict(start,end,\n                             typ = 'levels').rename(\"Predictions\")","e8c8c4bc":"# plot the predictions\n\npredictions.plot(legend=True)\ntest[\"Champagne sales\"].plot(legend=True)","c861ce19":"# Forecast for the next 3 years\n\nmodel_=SARIMAX(df[\"Champagne sales\"],order=(2,0,2),seasonal_order =(2, 0, 2, 12))\nmodel_=model_.fit(disp=False)\n\nforecast = model_.predict(start = len(df), \n                          end = (len(df)-1) + 3 * 12, \n                          typ = 'levels').rename('Forecast')","dd528f19":"df[\"Champagne sales\"].plot(legend=True)\nforecast.plot(legend=True)   ","caaa41a4":"## Rolling Statistics Test:\n     hepls to visulaise data better whether data is stationary or non stationary via measures like:\n    -rollling mean\n    -rolling standard deviation ","dfddb843":"## A Time Series is defined as a series of data points indexed in time order. The time order can be daily, monthly, or even yearly. ","9c742876":"![images.jpg](attachment:8d44761b-19d1-4fbc-ad7c-8e5a134c6dd2.jpg)","204347d3":"## ARIMA(p,d,q)\n## pacf plot : order of \"AR model\" i.e \"p\"\n## acf plot : order of \"MV Model\" i.e \"q\"\n## integration : order of differencing i.e \"d\"\n\n","c6d8889c":"## TIME SERIES","6612c2fd":"# Augumented Dickey Fuller Test:\n## used to check stationarity of data in a more meaningful,statistical and significant format."}}