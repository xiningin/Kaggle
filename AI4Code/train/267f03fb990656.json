{"cell_type":{"14ff1546":"code","9fcb211a":"code","66d25323":"code","fff4e3a2":"code","2fd141d1":"code","79ed6d10":"code","a71a9bce":"code","1f800d1f":"code","14caff6f":"code","fb0a38f7":"code","123a1fe1":"code","8c9aa2cb":"code","bd5a9f0c":"code","15bdfe37":"code","b7c2f63c":"code","d840b9f9":"code","f4e4849c":"code","25472df4":"markdown","f6bdeb43":"markdown","06f81c1a":"markdown","50680a91":"markdown","d6ab7e0c":"markdown","8a94fc2d":"markdown","e12a3490":"markdown","8751d574":"markdown"},"source":{"14ff1546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9fcb211a":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","66d25323":"train.shape # Rows -891, Columns - 12","fff4e3a2":"\ntrain.columns","2fd141d1":"for i in train.columns:\n    print(i)","79ed6d10":"# To check which are all the columns having numerical values\nnum=train.median().index","a71a9bce":"num","1f800d1f":"# to check which are all the columns having categorical values (except numerical colums)\ncat=[i for i in train.columns if i not in num]","14caff6f":"cat","fb0a38f7":"# length of \"categorical\" & \"numerical\" should match with lenght of dataset columns\nlen(cat),len(num),len(train.columns)","123a1fe1":"# To check null values columns preset or not in the given dataset if yes what is the count of each columns\ntrain.isna().sum()","8c9aa2cb":"# to check percentage of the null values present in the each columns inthe dataset\nnullvalues=(train.isna().sum()\/train.shape[0])*100","bd5a9f0c":"nullvalues","15bdfe37":"# Based on client input you can drop the null values(if client says consider the null values if greate than 50%)\n# Below are the command to drop the null values based on client input\n# train.fillna(20,inplace=True) - beginer can use this code to treat Null value\ndrop_columns=nullvalues[nullvalues>int(input())].index\nretain_columns=nullvalues[nullvalues<=int(input())].index","b7c2f63c":"# lengh of drop columns and length of retain columns should match\nlen(drop_columns),len(retain_columns)","d840b9f9":"# Replace the null values in numerical columns with \"median\"\n# Replace the null values in categorical cloumns with \"average counts\"\nfor i in cat:\n    train[i].fillna(train[i].value_counts().index[0],inplace=True)\nfor i in num:\n    train[i].fillna(train[i].median(),inplace=True)","f4e4849c":"# Finally to check if any null values present or not \n# Null values treatment done and you can see all the columns having zero null values \ntrain.isna().sum()","25472df4":"#### To print columns in the data set if column count is more numbers which we can not see in the \"train.columns\" code","f6bdeb43":" ## 1.Read Train dataset CSV\n","06f81c1a":"#### 2. Overview and clearing the data \n##### Datasets in the real world are often messy, However, this dataset is almost clean. Lets analyze and see what we have here.","50680a91":" ## A Glimpse of the Datasets","d6ab7e0c":"#### To check columns present in the data set","8a94fc2d":"#### To treat the null value in the given dataset, columns variable has to be seperated with Numerical and Categorical","e12a3490":"#### Check number of Rows and Columns in train dataset","8751d574":"### Check which are all the columns having numerical values"}}