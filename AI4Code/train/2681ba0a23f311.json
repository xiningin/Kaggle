{"cell_type":{"27ea3b02":"code","b8d5c615":"code","bfe50752":"code","23242855":"code","e7b9e383":"code","fdeb0374":"code","04ecf799":"markdown","95ba230b":"markdown"},"source":{"27ea3b02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8d5c615":"from sklearn import preprocessing\nfrom sklearn.naive_bayes import GaussianNB\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nimport numpy as np \nimport matplotlib.pyplot as plt","bfe50752":"data_train = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_test.csv')\n\ndata_train.head()\n#data_test.head()","23242855":"le = preprocessing.LabelEncoder() \n\ndata_train_df  = pd.DataFrame(data_train)\ndata_train_df_encoded = data_train_df.apply(le.fit_transform)\n\nprint(data_train_df_encoded.head())\n\ndata_test_df = pd.DataFrame(data_test)\ndata_test_df_encoded = data_test_df.apply(le.fit_transform)","e7b9e383":"x_train = data_train_df_encoded.drop(['play'],axis=1)\ny_train = data_train_df_encoded['play']\n\nx_test = data_test_df_encoded.drop(['play'],axis=1)\ny_test = data_test_df_encoded['play']","fdeb0374":"model = GaussianNB()\nnbtrain = model.fit(x_train, y_train)\n\ny_pred = nbtrain.predict(x_test)\nprint('Accuracy',metrics.accuracy_score(y_test, y_pred))","04ecf799":"Read all data both training and testing dataset","95ba230b":"Import all necesary libraries ####\nscikit-learn = sklearn\n"}}