{"cell_type":{"aca862bf":"code","ca7f248c":"code","eb462050":"code","44d99aa2":"code","92c3ecb1":"code","139ef4b6":"code","ff81f993":"code","9915885a":"code","e006b202":"code","efca0a66":"code","b3e74e9c":"code","d4d39f67":"code","674678d7":"markdown","7525299d":"markdown","adfbad00":"markdown"},"source":{"aca862bf":"import pandas as pd\nimport numpy as np\nfrom PIL import Image\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport math","ca7f248c":"BOXES_PATH = '..\/input\/rotating-bounding-boxes-for-ship-localization\/train_ship_segmentations_boxes.csv'\nIMG_PATH = '..\/input\/airbus-ship-detection\/train\/'","eb462050":"box_df = pd.read_csv(BOXES_PATH)\nbox_df.head()","44d99aa2":"#convert RLE mask into 2d pixel array\ndef encode_mask(mask, shape=(768,768)):\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    s = mask.split()\n    for i in range(len(s)\/\/2):\n        start = int(s[2*i]) - 1\n        length = int(s[2*i+1])\n        img[start:start+length] = 1\n    return img.reshape(shape).T\n\n#get bounding box for a mask\ndef get_bbox(img):\n    rows = np.any(img, axis=1)\n    cols = np.any(img, axis=0)\n    rmin, rmax = np.where(rows)[0][[0, -1]]\n    cmin, cmax = np.where(cols)[0][[0, -1]]\n    return rmin, rmax, cmin, cmax\n\n#add padding to the bounding box\ndef get_bbox_p(img, padding=5):\n    x1,x2,y1,y2 = get_bbox(img)\n    lx,ly = img.shape\n    x1 = max(x1-padding,0)\n    x2 = min(x2+padding+1, lx-1)\n    y1 = max(y1-padding,0)\n    y2 = min(y2+padding+1, ly-1)\n    return x1,x2,y1,y2\n\n#convert parameters of the box for plotting\ndef convert_box(box):\n    rot1 = math.cos(box[4])\n    rot2 = math.sin(box[4])\n    bx1 = box[0] - 0.5*(box[2]*rot1 - box[3]*rot2)\n    bx2 = box[1] - 0.5*(box[2]*rot2 + box[3]*rot1)\n    return (bx1,bx2,box[2],box[3],box[4]*180.0\/math.pi)\n\ndef get_rec(box,width=1):\n    b = convert_box(box)\n    return patches.Rectangle((b[0],b[1]),b[2],b[3],b[4],linewidth=width,edgecolor='g',facecolor='none')","92c3ecb1":"#plot image, mask, zoomed image, and zoomed mask with rotating bounding boxes\ndef show_box(idx):\n    row = box_df.iloc[idx]\n    name, encoding, x, y, lx, ly, rot = row.ImageId, row.EncodedPixels, \\\n        row.x, row.y, row.lx, row.ly, row.angle\n    if(type(encoding) == float): return #empty image\n\n    mask = encode_mask(encoding)\n    box = (x,y,lx,ly,rot)\n    image = np.asarray(Image.open(os.path.join(IMG_PATH,name)))\n    \n    fig,ax = plt.subplots(2, 2, figsize=(16, 16))\n    ax[0,0].imshow(image)\n    ax[0,1].imshow(mask)\n    ax[0,0].add_patch(get_rec(box))\n    ax[0,1].add_patch(get_rec(box))\n    \n    y1,y2,x1,x2 = get_bbox_p(mask,10)\n    box_c = (x-x1,y-y1,lx,ly,rot)\n    ax[1,0].imshow(image[y1:y2,x1:x2,:])\n    ax[1,1].imshow(mask[y1:y2,x1:x2])\n    ax[1,0].add_patch(get_rec(box_c,3))\n    ax[1,1].add_patch(get_rec(box_c,3))\n    \n    for item in ax.flatten():\n        item.axis('off')\n    plt.show()","139ef4b6":"show_box(20)","ff81f993":"show_box(19)","9915885a":"show_box(11)","e006b202":"show_box(10)","efca0a66":"show_box(31)","b3e74e9c":"show_box(1)","d4d39f67":"show_box(39)","674678d7":"Below I provide several examples of rotating bounding boxes.","7525299d":"### Overview\nIn this kernel I want to demonstrate the content of \"train_ship_segmentations_boxes.csv\" dataset that I created. It is an extended version of \"train_ship_segmentations.csv\" file from Airbus Ship Detection Challenge in which in addition to pixel masks I included the information about rotating bounding boxes.","adfbad00":"The meaning of columes is the following. \"ImageId\" is name of an image from train dataset (https:\/\/www.kaggle.com\/c\/airbus-ship-detection\/data); \"EncodedPixelsPixel\" is Run-Length Encoding of the mask; \"x\" and \"y\" are X and Y coordinate of box center; \"lx\" and \"ly\" are length of the box along X and Y; and \"angle\" is the rotation angle of the box in radians."}}