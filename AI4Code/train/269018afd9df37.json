{"cell_type":{"1d10db24":"code","1a8d1bbf":"code","b8799fd5":"code","035b9256":"code","969d3511":"code","2e555ee4":"code","66c4cfa6":"code","e574dab8":"code","e59385e6":"code","3f4d3b98":"code","06d9245f":"code","3410d5b3":"code","d3ccde1a":"code","a84bd1bd":"code","ab5ac630":"code","90c56aa4":"code","031c809c":"code","d7f1f9d0":"code","873b01dc":"code","1e63d048":"code","871ff0f9":"code","f2cd4161":"code","ca83d4ff":"code","0feedd53":"code","70b1e4c0":"code","074df95c":"code","07689fea":"code","296268cb":"code","06cd1fca":"code","27b1d84c":"code","8812dae8":"code","bd76b1ae":"code","0a4d8814":"code","cbaf66d0":"code","ed114d7a":"code","1f91ceb9":"code","3bdfb693":"code","db0ee022":"code","b71a75f4":"code","c5aaab4a":"code","0a4b5741":"code","6d7af4e6":"code","24988172":"code","1657d2bc":"code","ac43e7f5":"code","505c3323":"code","f15f3581":"code","4f35e6a4":"code","b3731cd3":"code","816a2d9b":"code","b30ac693":"code","84be1ee0":"code","9d721aa9":"code","641b9c60":"code","ec35c00c":"code","16507d51":"code","65195d12":"code","c4ea72e3":"code","5f6ad1fc":"code","80deac79":"code","3c8e1841":"code","d9ed6e90":"code","d28c3e63":"code","0fe40bf4":"code","c2774c3c":"code","d54ce60d":"code","f05ffc2f":"code","dde453f4":"code","5307e66f":"code","31bdee80":"code","ead1a4cd":"code","9649e09c":"markdown","e51415fd":"markdown","7e8fa660":"markdown","a73bfbd8":"markdown","391a5447":"markdown","eb271bf1":"markdown","788b452f":"markdown","b4bb3571":"markdown","77fbc989":"markdown","53f77402":"markdown","e9beaa1b":"markdown","18f90403":"markdown","e0d96111":"markdown","6a8ab32d":"markdown","bbeeb8bb":"markdown","e7e94a2a":"markdown","71afd82a":"markdown","a77a59ae":"markdown","5bf759ca":"markdown","9985ebb4":"markdown","60a78079":"markdown","7587acd9":"markdown","85aae785":"markdown","58ee9400":"markdown","4efc200a":"markdown","c5d335cb":"markdown","978492f4":"markdown","fcedfefa":"markdown"},"source":{"1d10db24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n","1a8d1bbf":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures, MinMaxScaler, StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Evaluation\nfrom sklearn.metrics import accuracy_score, classification_report","b8799fd5":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test  = pd.read_csv('..\/input\/test.csv')\ndf_sub   = pd.read_csv('..\/input\/gender_submission.csv')","035b9256":"df_train.head()","969d3511":"df_all = [df_train, df_test] #New list with both Train and Test data as it's elements\n#train -> df_all[0]\n#test  -> df_all[1] ","2e555ee4":"df_all[0][:5]","66c4cfa6":"df_all[1][:5] #or .head()","e574dab8":"print(df_train.columns.values)  # or use tolist() to convert ir into a list from Index Array","e59385e6":"def Nan_data(df):\n    key = df.isnull().sum().index.values\n    value = df.isnull().sum().values\n    return dict(zip(key,value))","3f4d3b98":"Nan_dict_train = Nan_data(df_train)\nNan_dict_test  = Nan_data(df_test)","06d9245f":"print('Training data Nan summary: \\n {} \\n'.format(Nan_dict_train))\nprint('Test data Nan summary: \\n {}'.format(Nan_dict_test))","3410d5b3":"#print(tuple(zip(df_train.dtypes.index,df_train.dtypes.values)))\ndf_train.dtypes","d3ccde1a":"Survived = df_train[df_train.Survived == 1].Survived.count()\nprint('No. of people survived in the Train dataset: {}'.format(Survived))","a84bd1bd":"Died = df_train[df_train.Survived == 0].Survived.count()\nprint('No. of people died in the Train dataset: {}'.format(Died))","ab5ac630":"total = Survived+Died\nsurvival_rate = Survived\/total\nprint('Survived: {} \\nSurvival_rate: {:.2f}%'.format(Survived, survival_rate*100))","90c56aa4":"df_train.describe(percentiles=[0.25,0.50,0.61,0.62,0.75])","031c809c":"print(tuple(zip(df_train.dtypes.index,df_train.dtypes.values)))","d7f1f9d0":"Cat_col = ([x[0] for x in tuple(zip(df_train.dtypes.index,df_train.dtypes.values)) \n           if x[1] == np.dtype('O') and x[0] not in ['Name','Cabin','Ticket']])\n#df_train.Sex.dtype = dtype('O')\nCat_col","873b01dc":"#df_train[Cat_col].describe() \ndf_train.describe(include=['O']) ","1e63d048":"df_train.corr()","871ff0f9":"def Feat_en(df):\n    df['Family_Size'] = df.Parch + df.SibSp + 1\n    df['SoloTravel'] = (df['Family_Size'] <= 1)\n    df.loc[df['SoloTravel']==False,'SoloTravel'] = 0\n    df.loc[df['SoloTravel']==True,'SoloTravel'] = 1\n    # df[df['Family_Size'] <= 1, 'SoloTravel'] = 1\n    # df[df['Family_Size'] > 1, 'SoloTravel'] = 0\n    return df","f2cd4161":"for df in df_all:\n    df['Sex'] = df['Sex'].map({'female': 1, 'male': 0}).astype(int)","ca83d4ff":"# fillinf the Nan values for Embarked and Fare columns in Train and Test dataset respectively.\ndf_train['Embarked'].fillna(df_train['Embarked'].dropna().mode()[0], inplace=True)\ndf_test['Fare'].fillna(df_train['Fare'].dropna().mean(), inplace=True)","0feedd53":"for df in df_all:\n    df['Embarked'] = df['Embarked'].map({'C': 0, 'S': 1, 'Q': 2}).astype(int)","70b1e4c0":"df_all[0].head()","074df95c":"guess_ages = np.zeros((2,3))\n\nfor df in df_all:\n    for i in range(0, 2):\n        for j in range(1, 4):\n            df_age = df[(df['Sex'] == i) & (df['Pclass'] == j)]['Age'].dropna()\n            age_guess = df_age.median()\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j-1] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(1, 4):\n            df.loc[(df.Age.isnull() & (df.Sex==i) & (df.Pclass==j)), 'Age'] = guess_ages[i,j-1]\n\n    df['Age'] = df['Age'].astype(int)","07689fea":"df_test.isnull().sum()","296268cb":"df_train.isnull().sum()","06cd1fca":"# Take copy of original train\/test dataframe before aplpying Feat_engineering\ndf_train_0 = df_train.copy() \ndf_test_0 = df_test.copy()\n#Apply Feat_en\ntrain_df = Feat_en(df_train)\ntest_df = Feat_en(df_test)","27b1d84c":"#check if there are nay nan\/Null values in the dataframe\nprint(train_df.isnull().sum())\nprint(test_df.isnull().sum())","8812dae8":"train_df.head()","bd76b1ae":"def drop_col(df_todrop):\n    drop_col = ['PassengerId', 'SibSp', 'Parch', 'Family_Size', 'Name', 'Cabin','Ticket']\n    rem_col = [col for col in drop_col if col in df_todrop.columns.tolist()]\n    return df_todrop.drop(columns=rem_col)","0a4d8814":"train_df = drop_col(train_df)\ntest_df = drop_col(test_df)","cbaf66d0":"train_df.head(3)","ed114d7a":"test_df.head(3)","1f91ceb9":"train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","3bdfb693":"train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)","db0ee022":"train_df[['SoloTravel','Survived']].groupby(['SoloTravel'],as_index=False).mean().sort_values(by='Survived',ascending=False)","b71a75f4":"train_df[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False)","c5aaab4a":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(plt.hist, 'Pclass', bins=15)","0a4b5741":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(plt.hist, 'Age', bins=15)","6d7af4e6":"train_df[(train_df['Age'] >= 20) & (train_df['Age'] <= 40)].count()[0]","24988172":"print('Percentage of passengers in 20-40 age group: {:.2f}%'.format((579\/891)*100))","1657d2bc":"#Count of people who Died in 20-40 Age group\ntrain_df[(train_df['Age'] >= 20) & (train_df['Age'] <= 40) & (train_df['Survived'] == 0)].count()[0]","ac43e7f5":"#Count of people who Survived in 20-40 Age group\ntrain_df[(train_df['Age'] >= 20) & (train_df['Age'] <= 40) & (train_df['Survived'] == 1)].count()[0]","505c3323":"print('Percentage of passengers in 20-40 age group who survived: {:.2f}%'.format((208\/579)*100))","f15f3581":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(plt.hist, 'SoloTravel', bins=15)","4f35e6a4":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(plt.hist, 'Fare', bins=15)","b3731cd3":"g=sns.FacetGrid(train_df,col='Survived')\ng.map(plt.hist, 'Embarked', bins=15)","816a2d9b":"sns.catplot(x='Pclass',y='Survived',kind='bar',hue='Sex', data=train_df) \n# hue distributes the plot as per provided col. Here, Sex","b30ac693":"sns.catplot(x='Survived',y='Fare',kind='bar',hue='Sex',data=train_df)","84be1ee0":"sns.catplot(x='Pclass',hue='Sex',kind='count',data=train_df)","9d721aa9":"train_df.head()","641b9c60":"def get_OHE(df_toOHE):\n    cat_cols = ['Pclass','Sex','Embarked','SoloTravel']\n    df_dummies = pd.DataFrame()\n    for col in cat_cols:\n        df_dummies = pd.concat([df_dummies,pd.get_dummies(df_toOHE[col], prefix=col)],axis=1)\n    return df_dummies\n    \ntrain_dummies = get_OHE(train_df)\ntest_dummies = get_OHE(test_df)","ec35c00c":"train_dummies.head(2)","16507d51":"def Merge_OHE(df_toMOHE, df_OHE):\n    drop_col = ['Pclass','Sex','Embarked','SoloTravel']\n    return df_toMOHE.merge(df_OHE, left_index=True, right_index=True).drop(columns=drop_col)","65195d12":"df_train_1 = Merge_OHE(train_df, train_dummies)\ndf_test_1 = Merge_OHE(test_df, test_dummies)","c4ea72e3":"df_train_1.iloc[:,1:].head()","5f6ad1fc":"X = df_train_1.iloc[:,1:]\ny = df_train_1.iloc[:,0]\n\nscaler = MinMaxScaler()  \n#MinMAxScaling doesn't work on Categorical features as they are alreary scaled between 0 & 1.\n#X[['Age','Fare']] = scaler.fit_transform(X[['Age','Fare']])\n#X_df = pd.DataFrame(scaler.fit_transform(X), columns=df_train_1.columns[1:])\n#df_test_1[['Age','Fare']] = scaler.transform(df_test_1[['Age','Fare']])\n#X_test_df = pd.DataFrame(scaler.transform(df_test_1), columns=df_test_1.columns)\n\nX = scaler.fit_transform(X)\nX_sub = scaler.transform(df_test_1)","80deac79":"X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 56, test_size = 0.25)","3c8e1841":"model_0 = DecisionTreeClassifier(random_state=56)\nmodel_0.fit(X_train,y_train)\nprint('Train Set Accuracy: {:.2f}%'.format(model_0.score(X_train,y_train)*100))\nprint('Test Set Accuracy: {:.2f}%'.format(model_0.score(X_test,y_test)*100))","d9ed6e90":"model_1 = RandomForestClassifier(n_estimators=220, random_state=56)\nmodel_1.fit(X_train,y_train)\nprint('Train Set Accuracy: {:.2f}%'.format(model_1.score(X_train,y_train)*100))\nprint('Test Set Accuracy: {:.2f}%'.format(model_1.score(X_test,y_test)*100))","d28c3e63":"model_2 = LogisticRegression(random_state=56)\nmodel_2.fit(X_train,y_train)\nprint('Train Set Accuracy: {:.2f}%'.format(model_2.score(X_train,y_train)*100))\nprint('Test Set Accuracy: {:.2f}%'.format(model_2.score(X_test,y_test)*100))","0fe40bf4":"model_3 = SVC(kernel = 'linear',gamma='auto',random_state=56)\nmodel_3.fit(X_train,y_train)\nprint('Train Set Accuracy: {:.2f}%'.format(model_3.score(X_train,y_train)*100))\nprint('Test Set Accuracy: {:.2f}%'.format(model_3.score(X_test,y_test)*100))","c2774c3c":"model_4 = SVC(kernel = 'rbf', gamma='auto')\nmodel_4.fit(X_train,y_train)\nprint('Train Set Accuracy: {:.2f}%'.format(model_4.score(X_train,y_train)*100))\nprint('Test Set Accuracy: {:.2f}%'.format(model_4.score(X_test,y_test)*100))","d54ce60d":"for k in range(4,15):\n    model_5 = KNeighborsClassifier(n_neighbors=k)\n    model_5.fit(X_train,y_train)\n    print('k={} Train Set Accuracy: {:.2f}%'.format(k,model_5.score(X_train,y_train)*100))\n    print('k={} Test Set Accuracy: {:.2f}%\\n'.format(k,model_5.score(X_test,y_test)*100))","f05ffc2f":"k=12\nmodel_5 = KNeighborsClassifier(n_neighbors=k)\nmodel_5.fit(X_train,y_train)\nprint('k={} Train Set Accuracy: {:.2f}%'.format(k,model_5.score(X_train,y_train)*100))\nprint('k={} Test Set Accuracy: {:.2f}%'.format(k,model_5.score(X_test,y_test)*100))","dde453f4":"Y_pred = model_3.predict(X_sub)","5307e66f":"df_sub.Survived = Y_pred\ndf_sub.head()","31bdee80":"df_sub.to_csv('Sub_1.csv',index=False)","ead1a4cd":"print(os.listdir(\"..\/working\"))","9649e09c":"**Visualisation:**","e51415fd":"> We can observe that huge number of 3rd class passengers didn't survive as compared to 1st & 2nd class passengers.","7e8fa660":"**1. Histogram of Count of Pclass W.r.t. Survival**","a73bfbd8":"> Passengers Embarking from 1 (S) died in most numbers w.r.t. other 2 embarking locations (S, Q).","391a5447":"**3. Survival rate w.r.t. Traveller type(Solo vs Family):**","eb271bf1":"**5. Histogram of Count of people Emarking from various locations w.r.t. Survival**","788b452f":"**Now we have the final training and test data prepared with all features in numerical forms.**","b4bb3571":"> **Analysis of Correlation between various features and Survival**","77fbc989":"> There are 579 passengers out of 891, who are between 20-40Yrs of age. ","53f77402":"Used the following Kernel as Reference:\nhttps:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions","e9beaa1b":"**4. Histogram of Ticket Fare w.r.t. Survival**","18f90403":"> Female Survival rate(74.2%) is way higher than the male Survival rate(18.89%).\nSo females had a better chance of surviving the accident. So, this model will have this behaviour shown to the test set as well.","e0d96111":"> Approx 63% of 1st Class Passengers Survived the accident.\n> Not so good numbers for 2nd Class Passengers and even worse Survival rate for 3rd Class Passengers.\n> This shows a bit of bias in the Survival vs Pclass. This will lead to a model which favours Survival of 1st Class Passengers as compared to 2nd and 3rd Class Passengers.","6a8ab32d":"Summary of Categorical Features:","bbeeb8bb":"**4. Survival rate w.r.t. Embarked location:**","e7e94a2a":"Passengers embarking from 0, i.e., C had a better survival rate than the other two embarking locations.","71afd82a":"k=12 gives the best accuracy of 82.51%","a77a59ae":"> Passengers who bought low cost tickets, didn't survive in big numbers. whereas, Passengers who bought a bit costly tickets had a better survival rate. All Passengers with $500 ticket survived.","5bf759ca":"**2. Histogram of Count of people of various ages w.r.t. Survival**","9985ebb4":"**Survival rate w.r.t Pclass and Gender**","60a78079":"> Females survival rate is more than twice to thrice that of male survival rate.","7587acd9":"Change in the value of Survived from 61% to 62% percentile gives an idea about the percentage of people survived is between 38%-39% of the total number of passengers.","85aae785":"> People travelling solo died in more number as compared to people with Family","58ee9400":"**1. Survival rate w.r.t. the Passenger's Class:**","4efc200a":"**3. Histogram of Count of people travelling Solo Vs Family w.r.t. Survival**","c5d335cb":"> We see that passengers between 20-40 are the ones who were in huge numbers who died and survived. This could be simply because the number of passengers between 20-40 years of agegroup was the most.","978492f4":"**2. Survival rate w.r.t. Passenger's Gender:**","fcedfefa":"> SoloTravellers(1) had a less survival rate as compared to the Family travellers(0)."}}