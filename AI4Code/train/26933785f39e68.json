{"cell_type":{"38036039":"code","8dfed919":"code","73af5538":"code","e36dbf39":"code","8cec0c26":"code","2ca3e7f6":"code","84e18640":"code","fca43d5a":"code","186b2769":"code","fc479595":"code","8ddf61b2":"code","922480eb":"code","4878ace7":"code","7a654c07":"code","785df3a7":"code","c6a1908e":"code","b306d002":"code","d6323f21":"code","199fa40d":"code","748a52ab":"code","171f19f4":"code","b2358b46":"code","030544f8":"code","a50deb1b":"code","9fb49f85":"code","9e5a1a5c":"code","3772126e":"code","df98cb4d":"code","22ca076e":"code","ef4201b3":"markdown","ca229db3":"markdown","acbedf58":"markdown","936d1d84":"markdown","c5bcea57":"markdown","70d9af9a":"markdown","8a01aa4c":"markdown"},"source":{"38036039":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8dfed919":"Happiness_2015 = pd.read_csv('..\/input\/world-happiness\/2015.csv')\nHappiness_2017 = pd.read_csv('..\/input\/world-happiness\/2017.csv')\nHappiness_2016 = pd.read_csv('..\/input\/world-happiness\/2016.csv')\nHappiness_2018 = pd.read_csv('..\/input\/world-happiness\/2018.csv')\nHappiness_2019 = pd.read_csv('..\/input\/world-happiness\/2019.csv')","73af5538":"Happiness_2015.head()","e36dbf39":"Happiness_2016.head()","8cec0c26":"Happiness_2017.head()","2ca3e7f6":"Happiness_2018.head()","84e18640":"Happiness_2019.head()","fca43d5a":"## Renaming Columns to matching conventions starting with 2019 \nHappiness_2019 = Happiness_2019.drop(columns = {'Social support'})\nHappiness_2019 = Happiness_2019.rename(columns = {'Country or region' : 'Country', 'Freedom to make life choices' : 'Freedom', 'Healthy life expectancy':'Health', 'GDP per capita' : 'GDP', 'Perceptions of corruption': 'Corruption'})\nHappiness_2019['Year'] = '2019'\n","186b2769":"Happiness_2019.head()","fc479595":"Happiness_2018 = Happiness_2018.drop(columns = {'Social support'})\nHappiness_2018 = Happiness_2018.rename(columns = {'Country or region' : 'Country', 'Freedom to make life choices' : 'Freedom', 'Healthy life expectancy':'Health', 'GDP per capita' : 'GDP', 'Perceptions of corruption': 'Corruption'})\nHappiness_2018['Year'] = '2018'","8ddf61b2":"Happiness_2018.head()","922480eb":"Happiness_2017.head()","4878ace7":"Happiness_2017 = Happiness_2017.drop(columns = {'Whisker.high', 'Whisker.low', 'Dystopia.Residual', 'Family'})\nHappiness_2017 = Happiness_2017.rename(columns = {'Happiness.Rank': 'Overall rank', 'Happiness.Score' : 'Score', 'Country or region' : 'Country', 'Freedom to make life choices' : 'Freedom', 'Health..Life.Expectancy.':'Health', 'Economy..GDP.per.Capita.' : 'GDP', 'Trust..Government.Corruption.': 'Corruption'})\nHappiness_2017['Year'] = '2017'","7a654c07":"Happiness_2016 = Happiness_2016.drop(columns = {'Region','Upper Confidence Interval', 'Lower Confidence Interval','Dystopia Residual','Family'})\nHappiness_2016 = Happiness_2016.rename(columns = {'Happiness Rank' : 'Overall rank', 'Happiness Score' : 'Score','Economy (GDP per Capita)' : 'GDP', 'Health (Life Expectancy)' : 'Health' ,'Trust (Government Corruption)': 'Corruption' })\nHappiness_2016['Year'] = '2016'","785df3a7":"Happiness_2016.tail()","c6a1908e":"Happiness_2015 = Happiness_2015.drop(columns={'Standard Error', 'Region', 'Dystopia Residual','Family'})\nHappiness_2015 = Happiness_2015.rename(columns ={'Happiness Rank' : 'Overall rank', 'Happiness Score' : 'Score','Economy (GDP per Capita)' : 'GDP', 'Health (Life Expectancy)': 'Health', 'Trust (Government Corruption)' : 'Corruption'})\nHappiness_2015['Year'] = '2015'","b306d002":"import seaborn as sns\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline","d6323f21":"##use this to compare the happiness distribution of the world each year\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nplt.title(\"Happiness Distribution\")\nplt.ylabel(\"Percentage of Countries\")\nplt.xlabel(\"Happiness Score\")\n\nsns.kdeplot(data = Happiness_2015['Score'], shade = True, color = 'red', label = '2015')\n#sns.kdeplot(data = Happiness_2016['Score'], shade = True, color = 'orange', label = '2016')\n#sns.kdeplot(data = Happiness_2017['Score'], shade = True, color = 'green', label = '2017')\n#sns.kdeplot(data = Happiness_2018['Score'], shade = True, color = 'blue', label = '2018')\nsns.kdeplot(data = Happiness_2019['Score'], shade = True, color = 'black', label = '2019')\nplt.legend()","199fa40d":"##use this to compare the corruption speculation distribution of the world each year\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nplt.title(\"Corruption Belief Distribution\")\nplt.ylabel('Distribution [%]', fontsize=16)\nplt.xlabel(\"Corruption Score\")\n\n#sns.kdeplot(data = Happiness_2015['Corruption'], shade = True, color = 'red', label = '2015')\nsns.kdeplot(data = Happiness_2016['Corruption'], shade = True, color = 'orange', label = '2016')\n#sns.kdeplot(data = Happiness_2017['Corruption'], shade = True, color = 'green', label = '2017')\n#sns.kdeplot(data = Happiness_2018['Corruption'], shade = True, color = 'blue', label = '2018')\n#sns.kdeplot(data = Happiness_2019['Corruption'], shade = True, color = 'black', label = '2019')\nplt.legend()","748a52ab":"## Combining all the data into one DataFrame\nHappiness_Overall = Happiness_2015.append(Happiness_2016)\nHappiness_Overall = Happiness_Overall.append(Happiness_2017)\nHappiness_Overall = Happiness_Overall.append(Happiness_2018)\nHappiness_Overall = Happiness_Overall.append(Happiness_2019)","171f19f4":"Happiness_Overall.tail()","b2358b46":"plt.title(\"Happiness Score Distribution\", fontsize = 25)\nsns.swarmplot(x=Happiness_Overall['Year'], y=Happiness_Overall['Score'])\nplt.ylabel('Happiness Score', fontsize=20)\nplt.xlabel(\"Year\", fontsize = 20)","030544f8":"plt.title(\"GDP Distribution\", fontsize = 25)\nsns.swarmplot(x=Happiness_Overall['Year'], y=Happiness_Overall['GDP'])\nplt.ylabel('GDP', fontsize=20)\nplt.xlabel(\"Year\", fontsize = 20)","a50deb1b":"plt.title(\"Corruption Distribution\", fontsize = 25)\nsns.swarmplot(x=Happiness_Overall['Year'], y=Happiness_Overall['Corruption'])\nplt.ylabel('Corruption View', fontsize=20)\nplt.xlabel(\"Year\", fontsize = 20)","9fb49f85":"print(Happiness_Overall.corr())\nplt.title(\"Variable Correlations\", fontsize = 25)\nsns.heatmap(Happiness_Overall.corr(), cmap=\"coolwarm\", annot = True)","9e5a1a5c":"from sklearn import datasets, linear_model","3772126e":"#building a simple linear model \nwealthy_model = linear_model.LinearRegression()\nwealthy_model.fit(Happiness_Overall[['Score']],Happiness_Overall[['GDP']])\nprint (\"Intercept value \" , wealthy_model.intercept_)\nprint (\"coefficient\" , wealthy_model.coef_)\n\nplt.scatter(Happiness_Overall[['Score']],Happiness_Overall[['GDP']],color='blue')\nplt.plot(Happiness_Overall[['Score']],wealthy_model.predict(Happiness_Overall[['Score']]),color='red',linewidth=4)\n#plt.xticks(())\n#plt.yticks(())\n\nprint(\"Formula for Happiness = \" ,  wealthy_model.coef_ , \"GDP +\", wealthy_model.intercept_)\nplt.show()","df98cb4d":"#building a simple linear model \ncorruption_model = linear_model.LinearRegression()\ncorruption_model.fit(Happiness_Overall[['Score']],Happiness_Overall[['Freedom']])\nprint (\"Intercept value \" , wealthy_model.intercept_)\nprint (\"coefficient\" , wealthy_model.coef_)\n\nplt.scatter(Happiness_Overall[['Score']],Happiness_Overall[['Freedom']],color='red')\nplt.plot(Happiness_Overall[['Score']],corruption_model.predict(Happiness_Overall[['Score']]),color='blue',linewidth=4)\n#plt.xticks(())\n#plt.yticks(())\n\nprint(\"Formula for Happiness = \" ,  wealthy_model.coef_ , \"GDP +\", wealthy_model.intercept_)\nplt.show()","22ca076e":"#building a simple linear model \ngenerosity_model = linear_model.LinearRegression()\ngenerosity_model.fit(Happiness_Overall[['GDP']],Happiness_Overall[['Generosity']])\nprint (\"Intercept value \" , generosity_model.intercept_)\nprint (\"coefficient\" , generosity_model.coef_)\n\nplt.scatter(Happiness_Overall[['GDP']],Happiness_Overall[['Generosity']],color='red')\nplt.plot(Happiness_Overall[['GDP']],generosity_model.predict(Happiness_Overall[['GDP']]),color='blue',linewidth=4)\n#plt.xticks(())\n#plt.yticks(())\n\nprint(\"Formula for Happiness = \" ,  generosity_model.coef_ , \"GDP +\", generosity_model.intercept_)\nplt.show()","ef4201b3":"It looks like there is a strong coorelation between GDP and happiness lets take a look at this ","ca229db3":"# **Does Money = Happiness?**","acbedf58":"# **Does Freedom mean a life?**","936d1d84":"# **Data Cleaning**","c5bcea57":"# **Putting everything into one Data Frame**","70d9af9a":"# **Learning the Distribution of the Data **","8a01aa4c":"# **Ploting average happiness**"}}