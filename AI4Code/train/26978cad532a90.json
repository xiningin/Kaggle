{"cell_type":{"180da8f3":"code","5e544607":"code","ea0ae47f":"code","1fea6544":"code","72c763a4":"code","9ce02825":"code","8a2cafe9":"code","738be095":"code","84c2dd59":"code","ef328a7e":"code","d391c299":"code","764bd0a8":"code","b87706da":"code","8f563e84":"code","4492ef44":"code","1c26060a":"code","ea26e335":"code","9848a9d4":"code","48233d10":"code","d2519a4d":"code","1d4bf0e4":"code","df459e72":"code","58ddb15f":"code","dd0d0bb3":"code","1c54546e":"code","ed4b478f":"code","4fd03dd4":"code","4a987a3e":"code","44fa0bf3":"code","3575081c":"code","abaa6f87":"code","47a641a6":"code","3e4185ad":"code","0519636d":"code","9cedfb54":"code","cc0d4619":"code","eab25af7":"code","10a650d7":"code","9847df31":"code","50050951":"code","3452c978":"code","e7825b80":"code","f0b0f9aa":"code","458007eb":"code","c3554c09":"code","0c30cb71":"code","ed8700c5":"code","26804fff":"code","0904ac2d":"code","a14cd82a":"code","e5cea546":"code","25ffb5f8":"code","13975452":"code","067b7871":"markdown","f0359e56":"markdown","a54fc47a":"markdown","a305b3e2":"markdown","45b57700":"markdown","9ab51529":"markdown","5f7fa1ed":"markdown","6fe17dc0":"markdown","186ef97d":"markdown","8a60721a":"markdown","c4dbfac3":"markdown","0d6e0157":"markdown","b956e839":"markdown","3218def5":"markdown","741882da":"markdown","1b45fbb7":"markdown","e1a87382":"markdown","b43c4226":"markdown"},"source":{"180da8f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5e544607":"CovidD = pd.read_csv('\/kaggle\/input\/covid19-tracking-germany\/covid_de.csv')\nDemoD = pd.read_csv('\/kaggle\/input\/covid19-tracking-germany\/demographics_de.csv')","ea0ae47f":"CovidD.head(10)\n#DemoD\n","1fea6544":"CovidD['date']= pd.to_datetime(CovidD['date'])#convert the object-dtype of the 'Date'-column to datetime-format","72c763a4":"list_of_states=CovidD['state'].unique()\nlist_of_states","9ce02825":"def seperate_by_state(the_state):                   #function to select the different states\n  return CovidD[CovidD['state']==the_state]","8a2cafe9":"#*************************************Choose NRW*********************************************************************\nNRWCovidDF=seperate_by_state('Nordrhein-Westfalen')\n\nCovidDataframeNRW=pd.DataFrame()\n\nCovidDataframeNRW=NRWCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfNRW = pd.DataFrame(CovidDataframeNRW)\ndfNRW=pd.DataFrame(dfNRW,columns=['state','date','cases','deaths'])\ndfNRW['CumSum_death']=dfNRW['deaths'].cumsum()\ndfNRW['CumSum_cases']=dfNRW['cases'].cumsum()\ndfNRW=pd.DataFrame(dfNRW,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])\n","738be095":"#*************************************Choose Bayern*********************************************************************\nBayernCovidDF=seperate_by_state('Bayern')\n\nCovidDataframeBayern=pd.DataFrame()\n\nCovidDataframeBayern=BayernCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfBayern = pd.DataFrame(CovidDataframeBayern)\ndfBayern=pd.DataFrame(dfBayern,columns=['state','date','cases','deaths'])\ndfBayern['CumSum_death']=dfBayern['deaths'].cumsum()\ndfBayern['CumSum_cases']=dfBayern['cases'].cumsum()\ndfBayern=pd.DataFrame(dfBayern,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","84c2dd59":"#*************************************Choose Baden-W\u00fcrttemberg*********************************************************************\nBWCovidDF=seperate_by_state('Baden-Wuerttemberg')\n\nCovidDataframeBW=pd.DataFrame()\n\nCovidDataframeBW=BWCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfBW = pd.DataFrame(CovidDataframeBW)\ndfBW=pd.DataFrame(dfBW,columns=['state','date','cases','deaths'])\ndfBW['CumSum_death']=dfBW['deaths'].cumsum()\ndfBW['CumSum_cases']=dfBW['cases'].cumsum()\ndfBW=pd.DataFrame(dfBW,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])\n","ef328a7e":"#*************************************Choose Berlin*********************************************************************\nBBCovidDF=seperate_by_state('Berlin')\n\nCovidDataframeBB=pd.DataFrame()\n\nCovidDataframeBB=BBCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfBB = pd.DataFrame(CovidDataframeBB)\ndfBB=pd.DataFrame(dfBB,columns=['state','date','cases','deaths'])\ndfBB['CumSum_death']=dfBB['deaths'].cumsum()\ndfBB['CumSum_cases']=dfBB['cases'].cumsum()\ndfBB=pd.DataFrame(dfBB,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","d391c299":"#*************************************Choose Brandenburg*********************************************************************\nBrCovidDF=seperate_by_state('Brandenburg')\n\nCovidDataframeBr=pd.DataFrame()\n\nCovidDataframeBr=BrCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfBr = pd.DataFrame(CovidDataframeBr)\ndfBr=pd.DataFrame(dfBr,columns=['state','date','cases','deaths'])\ndfBr['CumSum_death']=dfBr['deaths'].cumsum()\ndfBr['CumSum_cases']=dfBr['cases'].cumsum()\ndfBr=pd.DataFrame(dfBr,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","764bd0a8":"#*************************************Choose Hamburg********************************************************************\nHHCovidDF=seperate_by_state('Hamburg')\n\nCovidDataframeHH=pd.DataFrame()\n\nCovidDataframeHH=HHCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfHH = pd.DataFrame(CovidDataframeHH)\ndfHH=pd.DataFrame(dfHH,columns=['state','date','cases','deaths'])\ndfHH['CumSum_death']=dfHH['deaths'].cumsum()\ndfHH['CumSum_cases']=dfHH['cases'].cumsum()\ndfHH=pd.DataFrame(dfHH,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","b87706da":"#*************************************Choose Bremen*********************************************************************\nBCovidDF=seperate_by_state('Bremen')\n\nCovidDataframeB=pd.DataFrame()\n\nCovidDataframeB=BCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfB = pd.DataFrame(CovidDataframeB)\ndfB=pd.DataFrame(dfB,columns=['state','date','cases','deaths'])\ndfB['CumSum_death']=dfB['deaths'].cumsum()\ndfB['CumSum_cases']=dfB['cases'].cumsum()\ndfB=pd.DataFrame(dfB,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","8f563e84":"#*************************************Choose Hessen*********************************************************************\nHCovidDF=seperate_by_state('Hessen')\n\nCovidDataframeH=pd.DataFrame()\n\nCovidDataframeH=HCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfH = pd.DataFrame(CovidDataframeH)\ndfH=pd.DataFrame(dfH,columns=['state','date','cases','deaths'])\ndfH['CumSum_death']=dfH['deaths'].cumsum()\ndfH['CumSum_cases']=dfH['cases'].cumsum()\ndfH=pd.DataFrame(dfH,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","4492ef44":"#*************************************Choose Mecklenburg-Vorpommern*********************************************************************\nMVCovidDF=seperate_by_state('Mecklenburg-Vorpommern')\n\nCovidDataframeMV=pd.DataFrame()\n\nCovidDataframeMV=MVCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfMV = pd.DataFrame(CovidDataframeMV)\ndfMV=pd.DataFrame(dfMV,columns=['state','date','cases','deaths'])\ndfMV['CumSum_death']=dfMV['deaths'].cumsum()\ndfMV['CumSum_cases']=dfMV['cases'].cumsum()\ndfMV=pd.DataFrame(dfMV,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","1c26060a":"#*************************************Choose Niedersachsen*********************************************************************\nNCovidDF=seperate_by_state('Niedersachsen')\n\nCovidDataframeN=pd.DataFrame()\n\nCovidDataframeN=NCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfN = pd.DataFrame(CovidDataframeN)\ndfN=pd.DataFrame(dfN,columns=['state','date','cases','deaths'])\ndfN['CumSum_death']=dfN['deaths'].cumsum()\ndfN['CumSum_cases']=dfN['cases'].cumsum()\ndfN=pd.DataFrame(dfN,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","ea26e335":"#*************************************Choose Rheinland-Pfalz*****************************************************************\nRPCovidDF=seperate_by_state('Rheinland-Pfalz')\n\nCovidDataframeRP=pd.DataFrame()\n\nCovidDataframeRP=RPCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfRP = pd.DataFrame(CovidDataframeRP)\ndfRP=pd.DataFrame(dfRP,columns=['state','date','cases','deaths'])\ndfRP['CumSum_death']=dfRP['deaths'].cumsum()\ndfRP['CumSum_cases']=dfRP['cases'].cumsum()\ndfRP=pd.DataFrame(dfRP,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","9848a9d4":"#*************************************Choose Saarland*****************************************************************\nSLCovidDF=seperate_by_state('Saarland')\n\nCovidDataframeSL=pd.DataFrame()\n\nCovidDataframeSL=SLCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfSL = pd.DataFrame(CovidDataframeSL)\ndfSL=pd.DataFrame(dfSL,columns=['state','date','cases','deaths'])\ndfSL['CumSum_death']=dfSL['deaths'].cumsum()\ndfSL['CumSum_cases']=dfSL['cases'].cumsum()\ndfSL=pd.DataFrame(dfSL,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","48233d10":"#*************************************Choose Sachsen*****************************************************************\nSaCovidDF=seperate_by_state('Sachsen')\n\nCovidDataframeSa=pd.DataFrame()\n\nCovidDataframeSa=SaCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfSa = pd.DataFrame(CovidDataframeSa)\ndfSa=pd.DataFrame(dfSa,columns=['state','date','cases','deaths'])\ndfSa['CumSum_death']=dfSa['deaths'].cumsum()\ndfSa['CumSum_cases']=dfSa['cases'].cumsum()\ndfSa=pd.DataFrame(dfSa,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","d2519a4d":"#*************************************Choose Sachsen-Anhalt*****************************************************************\nSaACovidDF=seperate_by_state('Sachsen-Anhalt')\n\nCovidDataframeSaA=pd.DataFrame()\n\nCovidDataframeSaA=SaACovidDF.groupby(['state','date']).sum().reset_index()\n\ndfSaA = pd.DataFrame(CovidDataframeSaA)\ndfSaA=pd.DataFrame(dfSaA,columns=['state','date','cases','deaths'])\ndfSaA['CumSum_death']=dfSaA['deaths'].cumsum()\ndfSaA['CumSum_cases']=dfSaA['cases'].cumsum()\ndfSaA=pd.DataFrame(dfSaA,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","1d4bf0e4":"#*************************************Choose Schleswig-Holstein*****************************************************************\nSHCovidDF=seperate_by_state('Schleswig-Holstein')\n\nCovidDataframeSH=pd.DataFrame()\n\nCovidDataframeSH=SHCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfSH = pd.DataFrame(CovidDataframeSH)\ndfSH=pd.DataFrame(dfSH,columns=['state','date','cases','deaths'])\ndfSH['CumSum_death']=dfSH['deaths'].cumsum()\ndfSH['CumSum_cases']=dfSH['cases'].cumsum()\ndfSH=pd.DataFrame(dfSH,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","df459e72":"#*************************************Choose Thueringen*****************************************************************\nTHCovidDF=seperate_by_state('Thueringen')\n\nCovidDataframeTH=pd.DataFrame()\n\nCovidDataframeTH=THCovidDF.groupby(['state','date']).sum().reset_index()\n\ndfTH = pd.DataFrame(CovidDataframeTH)\ndfTH=pd.DataFrame(dfTH,columns=['state','date','cases','deaths'])\ndfTH['CumSum_death']=dfTH['deaths'].cumsum()\ndfTH['CumSum_cases']=dfTH['cases'].cumsum()\ndfTH=pd.DataFrame(dfTH,columns = ['state', 'date', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])","58ddb15f":"# #******************************************Bundesl\u00e4nder PLOT**************************************************\n\nimport matplotlib.dates as mdates\nimport matplotlib.axis\ndate_minNRW=dfNRW.date.min()      #Minimum of the data for the timeseries x-axis\ndate_maxNRW=dfNRW.date.max()\n\nimport matplotlib \nmatplotlib.rc('xtick', labelsize=15) \nmatplotlib.rc('ytick', labelsize=15) \nmatplotlib.rc('legend', fontsize=15) \nmatplotlib.rc('axes', titlesize=25)\nmatplotlib.rc('axes', labelsize=15)\nfig=plt.figure(figsize=[10,5])\nax=fig.add_subplot(1,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Kum. best. F\u00e4lle, log. Darst.')\nax.set_title('Kumulierte best\u00e4tigte F\u00e4lle in Nordrhein-Westfalen, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.bar(dfNRW.date[6:],dfNRW.CumSum_cases[6:],color='blue')\n\nfig=plt.figure(figsize=[10,5])\nax=fig.add_subplot(1,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte best\u00e4tigte Todesf\u00e4lle in NRW, log.')\nax.set_title('Kumulierte Todesf\u00e4lle in Nordrhein-Westfalen')\n#print(dfNRW.date.iloc[-4])\nax.axvline(x=dfNRW.date.iloc[-5],color='red',linewidth=5)        #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                    #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.bar(dfNRW.date,dfNRW.CumSum_death,color='blue')\n\ndate_minD=CovidD.date.min()      #Minimum of the data for the timeseries x-axis\ndate_maxD=CovidD.date.max()\n\nfig=plt.figure(figsize=[10,5])\nax=fig.add_subplot(1,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minD,date_maxD)\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte, best\u00e4tigte Todesf\u00e4lle, log. Darstellung')\nax.set_title('Kumulierte best\u00e4tigte Todesf\u00e4lle in den Bundesl\u00e4ndern')\nax.set_yscale('log')\n\n#NRWcumSumCasesDF=dfNRW['CumSum_cases']\n#ax.scatter(dfNRW.date,dfNRW.CumSum_cases,color='blue')\nax.plot(dfNRW.date,dfNRW.CumSum_death,label='NRW',color='green')\nax.plot(dfBayern.date,dfBayern.CumSum_death,label='Bayern')\nax.plot(dfBW.date,dfBW.CumSum_death,label='Baden-Wuerttemberg')\nax.plot(dfBB.date,dfBB.CumSum_death,label='Berlin')\nax.plot(dfBr.date,dfBr.CumSum_death,label='Brandenburg')\nax.plot(dfB.date,dfB.CumSum_death,label='Bremen')\nax.plot(dfHH.date,dfHH.CumSum_death,label='Hamburg')\nax.plot(dfH.date,dfH.CumSum_death,label='Hessen')\nax.plot(dfMV.date,dfMV.CumSum_death,label='Mecklenburg-Vorpommern')\nax.plot(dfN.date,dfN.CumSum_death,label='Niedersachsen')\nax.plot(dfRP.date,dfRP.CumSum_death,label='Rheinland-Pfalz')\nax.plot(dfSL.date,dfSL.CumSum_death,label='Saarland')\nax.plot(dfSa.date,dfSa.CumSum_death,label='Sachsen')\nax.plot(dfSaA.date,dfSaA.CumSum_death,label='Sachsen-Anhalt')\nax.plot(dfSH.date,dfSH.CumSum_death,label='Schleswig-Holstein')\nax.plot(dfTH.date,dfTH.CumSum_death,label='Th\u00fcringen')\n\n#print(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-5],color='red',linewidth=5)        #the data of the RKI is not complete within the last four days, cases will be added in the next days\n                                                    #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\nax.legend()\n\nfig=plt.figure(figsize=[10,5])\nax=fig.add_subplot(1,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minD,date_maxD)\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte, best\u00e4tigte F\u00e4lle, log. Darstellung')\nax.set_title('Kumulierte bestitigte F\u00e4lle in den Bundesl\u00e4ndern')\nax.set_yscale('log')\n\n#NRWcumSumCasesDF=dfNRW['CumSum_cases']\n#ax.scatter(dfNRW.date,dfNRW.CumSum_cases,color='blue')\nax.plot(dfNRW.date,dfNRW.CumSum_cases,label='NRW',color='green')\nax.plot(dfBayern.date,dfBayern.CumSum_cases,label='Bayern')\nax.plot(dfBW.date,dfBW.CumSum_cases,label='Baden-Wuerttemberg')\nax.plot(dfBB.date,dfBB.CumSum_cases,label='Berlin')\nax.plot(dfBr.date,dfBr.CumSum_cases,label='Brandenburg')\nax.plot(dfB.date,dfB.CumSum_cases,label='Bremen')\nax.plot(dfHH.date,dfHH.CumSum_cases,label='Hamburg')\nax.plot(dfH.date,dfH.CumSum_cases,label='Hessen')\nax.plot(dfMV.date,dfMV.CumSum_cases,label='Mecklenburg-Vorpommern')\nax.plot(dfN.date,dfN.CumSum_cases,label='Niedersachsen')\nax.plot(dfRP.date,dfRP.CumSum_cases,label='Rheinland-Pfalz')\nax.plot(dfSL.date,dfSL.CumSum_cases,label='Saarland')\nax.plot(dfSa.date,dfSa.CumSum_cases,label='Sachsen')\nax.plot(dfSaA.date,dfSaA.CumSum_cases,label='Sachsen-Anhalt')\nax.plot(dfSH.date,dfSH.CumSum_cases,label='Schleswig-Holstein')\nax.plot(dfTH.date,dfTH.CumSum_cases,label='Th\u00fcringen')\n\n#print(dfNRW.date.iloc[-1])\n#ax.axvline(x=dfNRW.date.iloc[-1],color='red',linewidth=5)        #the data of the RKI is not complete within the last four days, cases will be added in the next days\n                                                    #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\nax.legend()\n#********************************************************************************************************\n#print(dfNRW.CumSum_death\/dfNRW.CumSum_cases)\n\nfig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minD,date_maxD)\nax.set_xlabel('Datum')\nax.set_ylabel('Best\u00e4tigte Todesf\u00e4lle je best\u00e4tigtem Fall')\nax.set_title('Best\u00e4tigte Todesf\u00e4lle je best\u00e4tigtem Fall in ausgew. Bundesl\u00e4ndern (Case Fatality Rate)')\n#ax.set_yscale('log')\n\n#NRWcumSumCasesDF=dfNRW['CumSum_cases']\n#ax.scatter(dfNRW.date,dfNRW.CumSum_cases,color='blue')\nax.plot(dfNRW.date,dfNRW.CumSum_death\/dfNRW.CumSum_cases,label='NRW',color='green',linewidth=5)\nax.plot(dfBayern.date,dfBayern.CumSum_death\/dfBayern.CumSum_cases,label='Bayern')\nax.plot(dfBW.date,dfBW.CumSum_death\/dfBW.CumSum_cases,label='Baden-Wuerttemberg')\n#ax.plot(dfBB.date,dfBB.CumSum_death\/dfBB.CumSum_cases,label='Berlin')\nax.plot(dfBr.date,dfBr.CumSum_death\/dfBr.CumSum_cases,label='Brandenburg')\nax.plot(dfB.date,dfB.CumSum_death\/dfB.CumSum_cases,label='Bremen')\nax.plot(dfHH.date,dfHH.CumSum_death\/dfHH.CumSum_cases,label='Hamburg')\nax.plot(dfH.date,dfH.CumSum_death\/dfH.CumSum_cases,label='Hessen')\n#ax.plot(dfMV.date,dfMV.CumSum_death\/dfMV.CumSum_cases,label='Mecklenburg-Vorpommern')\nax.plot(dfN.date,dfN.CumSum_death\/dfN.CumSum_cases,label='Niedersachsen')\n#ax.plot(dfRP.date,dfRP.CumSum_death\/dfRP.CumSum_cases,label='Rheinland-Pfalz')\n#ax.plot(dfSL.date,dfSL.CumSum_death\/dfSL.CumSum_cases,label='Saarland')\n#ax.plot(dfSa.date,dfSa.CumSum_death\/dfSa.CumSum_cases,label='Sachsen')\n#ax.plot(dfSaA.date,dfSaA.CumSum_death\/dfSaA.CumSum_cases,label='Sachsen-Anhalt')\n#ax.plot(dfSH.date,dfSH.CumSum_death\/dfSH.CumSum_cases,label='Schleswig-Holstein')\n#ax.plot(dfTH.date,dfTH.CumSum_death\/dfTH.CumSum_cases,label='Th\u00fcringen')\n\nprint(dfNRW.date.iloc[-5])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)        #the data of the RKI is not complete within the last four days, cases will be added in the next days\n                                                    #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\nax.legend()","dd0d0bb3":"Covid_NRW=CovidD[CovidD['state']=='Nordrhein-Westfalen'] #choose data of NRW\nDemoNRW=DemoD[DemoD['state']=='Nordrhein-Westfalen'] #choose data of NRW","1c54546e":"#print(Covid_NRW) # show data\n#print(DemoNRW)","ed4b478f":"#CovidKr=Covid_NRW[Covid_NRW['county']=='SK Krefeld']\n#CovidKr.head(60)\n\n","4fd03dd4":"    LandkreiseGruppiert = Covid_NRW.groupby(['county']).sum()\n    #LandkreiseGrDate=Covid_NRW.groupby(['county','date']).sum()","4a987a3e":"LandkreiseGruppiert\n#LandkreiseGrDate.cumsum()","44fa0bf3":"import matplotlib.pyplot as plt\n","3575081c":"CasesLandkreise=LandkreiseGruppiert['cases']","abaa6f87":"CasesLandkreise","47a641a6":"DeathsLandkreise=LandkreiseGruppiert['deaths']","3e4185ad":"fig=plt.figure(figsize=[20,10])\nax=fig.add_subplot(4,1,1)\nax.set_xlabel('Landkreis')\nax.set_ylabel('F\u00e4lle')\nax.set_title('F\u00e4lle in den Landkreisen in Nordrhein-Westfalen')\nCasesLandkreise.plot(kind='bar',color='blue')\nax=fig.add_subplot(4,1,4)\nax.set_xlabel('Landkreis')\nax.set_ylabel('Todesf\u00e4lle')\nax.set_title('Todesf\u00e4lle in den Landkreisen in Nordrhein-Westfalen')\nDeathsLandkreise.plot(kind='bar',color='red')","0519636d":"BundeslaenderGruppiert = CovidD.groupby(['state']).sum()\nBundeslaenderGruppiert","9cedfb54":"DemoDg=DemoD.groupby(['state']).sum()\n#print(BundeslaenderGruppiert['cases'])\n\n\n#print(DemoDg)\n#print(BundeslaenderGruppiert['cases']\/DemoDg['population'])\n#print(BundeslaenderGruppiert['deaths']\/DemoDg['population'])\nprint(BundeslaenderGruppiert['deaths']\/BundeslaenderGruppiert['cases'])\ncaseFR=BundeslaenderGruppiert['deaths']\/BundeslaenderGruppiert['cases']\ncaseFR.sort_values(ascending=False)     #sort states with declining Case Fatality Rate","cc0d4619":"Bundesl\u00e4nderGruppiert = CovidD.groupby(['state','date']).sum() #summiere f\u00fcr Bundesl\u00e4nder und Datum auf\n\n\n\n\n#Bundesl\u00e4nderGruppiert['deathskumuliert']=Bundesl\u00e4nderGruppiert['cases'].cumsum() #kumulierte Todesf\u00e4lle hier f\u00fcr ganz NRW muss aber je Bundesland\nBundesl\u00e4nderGruppiert","eab25af7":"listofstates=CovidD[\"state\"].unique() #Dubletten raus Liste von Bundesl\u00e4ndern\n#listofstates\n\ndef seperate_by_state(the_state):\n  return CovidD[CovidD['state']==the_state]\n#liste=[]\n#liste\nfor s in listofstates: \n      #  print(s)\n        a_state=seperate_by_state(s)\n        #print(a_state)\n        a_state['deathskumuliert']=a_state['deaths'].cumsum()\n       \n       # print(a_state)\n       # a_state.groupby('date')\n        #print(a_state)","10a650d7":"Bundesl\u00e4nderDR=Bundesl\u00e4nderGruppiert.deaths    #Bundesl\u00e4nder Todesraten \n#Bundesl\u00e4nderDR","9847df31":"#fig=plt.figure(figsize=[20,10])\n#ax=fig.add_subplot(4,1,1)\n#ax.set_xlabel('Bundesl\u00e4nder')\n#ax.set_ylabel('Todesf\u00e4lle')\n#ax.set_title('Todesf\u00e4lle in den Bundesl\u00e4ndern')\n#Bundesl\u00e4nderDR.plot(kind='bar',color='blue')","50050951":"CovidDRNRW=Bundesl\u00e4nderDR['Nordrhein-Westfalen']   #Data of NRW\n#CovidDRNRW","3452c978":"dfNRW","e7825b80":"\n\nCovidDfNRWAgeGr=NRWCovidDF.groupby(['state','date','age_group']).sum().reset_index() # Gruppiere nach Bundesland, Datum und Altersklassen\n\n#dfNRWAG = pd.DataFrame(CovidDfNRWAgeGr)\n#dfNRWAG=pd.DataFrame(dfNRW,columns=['state','date','age_group', 'cases','deaths'])\n#dfNRWAG['CumSum_death']=CovidDfNRWAgeGr['deaths'].cumsum()\n#dfNRWAG['CumSum_cases']=dfNRWAG['cases'].cumsum()\n#dfNRWAG=pd.DataFrame(dfNRW,columns = ['state', 'date', 'age_group', 'cases', 'deaths','CumSum_death', 'CumSum_cases'])\n","f0b0f9aa":"CovidDAgeGr=CovidD.groupby(['date','age_group']).sum().reset_index() # Gruppiere nach Bundesland, Datum und Altersklassen\nCovidDAgeGr","458007eb":"CovidDfNRWAgeGr   # Read in the age groups\nCovNRW80plus=pd.DataFrame()\nCovNRW05_14=pd.DataFrame()\nCovNRW00_04=pd.DataFrame()\nCovNRW15_34=pd.DataFrame()\nCovNRW35_59=pd.DataFrame()\nCovNRW60_79=pd.DataFrame()\nCovNRW80plus=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='80-99'] #age group 80-99 years\nCovNRW05_14=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='05-14'] #age group 5-14 years\nCovNRW00_04=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='00-04'] #age group 0-4 years\nCovNRW15_34=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='15-34']  #age group 15-34 years\nCovNRW35_59=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='35-59']   #age group 25-59 years\nCovNRW60_79=CovidDfNRWAgeGr[CovidDfNRWAgeGr['age_group']=='60-79']   #age group 60-79 years\n\n   # DemoNRW=DemoD[DemoD['state']=='Nordrhein-Westfalen']\n#dfNRWAG","c3554c09":" # Read in the age groups for Germany\nCovD80plus=pd.DataFrame()\nCovD05_14=pd.DataFrame()\nCovD00_04=pd.DataFrame()\nCovD15_34=pd.DataFrame()\nCovD35_59=pd.DataFrame()\nCovD60_79=pd.DataFrame()\nCovD80plus=CovidDAgeGr[CovidDAgeGr['age_group']=='80-99'] #age group 80-99 years\nCovD05_14=CovidDAgeGr[CovidDAgeGr['age_group']=='05-14'] #age group 5-14 years\nCovD00_04=CovidDAgeGr[CovidDAgeGr['age_group']=='00-04'] #age group 0-4 years\nCovD15_34=CovidDAgeGr[CovidDAgeGr['age_group']=='15-34']  #age group 15-34 years\nCovD35_59=CovidDAgeGr[CovidDAgeGr['age_group']=='35-59']   #age group 25-59 years\nCovD60_79=CovidDAgeGr[CovidDAgeGr['age_group']=='60-79']   #age group 60-79 years","0c30cb71":"#print(CovNRW80plus)\nCovNRW80plus['CumSum_death']=CovNRW80plus['deaths'].cumsum()\n#print(CovNRW80plus)\n#CovNRW00_04['CumSum_death']=CovNRW00_04['deaths'].cumsum()\n#CovNRW05_14['CumSum_death']=CovNRW05_14['deaths'].cumsum()\n\n#CovNRW15_34['CumSum_death']=CovNRW15_34['deaths'].cumsum()\n#print(CovNRW15_34)\nCovNRW35_59['CumSum_death']=CovNRW35_59['deaths'].cumsum()\nCovNRW60_79['CumSum_death']=CovNRW60_79['deaths'].cumsum()\n\nCovNRW80plus['CumSum_cases']=CovNRW80plus['cases'].cumsum()\n#print(CovNRW80plus)\n#CovNRW00_04['CumSum_death']=CovNRW00_04['deaths'].cumsum()\n#CovNRW05_14['CumSum_cases']=CovNRW05_14['cases'].cumsum()\n\n#CovNRW15_34['CumSum_cases']=CovNRW15_34['cases'].cumsum()\n#print(CovNRW15_34)\nCovNRW35_59['CumSum_cases']=CovNRW35_59['cases'].cumsum()\nCovNRW60_79['CumSum_cases']=CovNRW60_79['cases'].cumsum()\n","ed8700c5":"CovD80plus['CumSum_death']=CovD80plus['deaths'].cumsum()\n#print(CovNRW80plus)\n#CovNRW00_04['CumSum_death']=CovNRW00_04['deaths'].cumsum()\n#CovNRW05_14['CumSum_death']=CovNRW05_14['deaths'].cumsum()\n\n#CovNRW15_34['CumSum_death']=CovNRW15_34['deaths'].cumsum()\n#print(CovNRW15_34)\nCovD35_59['CumSum_death']=CovD35_59['deaths'].cumsum()\nCovD60_79['CumSum_death']=CovD60_79['deaths'].cumsum()\n\nCovD80plus['CumSum_cases']=CovD80plus['cases'].cumsum()\n#print(CovNRW80plus)\n#CovNRW00_04['CumSum_death']=CovNRW00_04['deaths'].cumsum()\n#CovNRW05_14['CumSum_cases']=CovNRW05_14['cases'].cumsum()\n\n#CovNRW15_34['CumSum_cases']=CovNRW15_34['cases'].cumsum()\n#print(CovNRW15_34)\nCovD35_59['CumSum_cases']=CovD35_59['cases'].cumsum()\nCovD60_79['CumSum_cases']=CovD60_79['cases'].cumsum()\n","26804fff":"matplotlib.rc('xtick', labelsize=15) \nmatplotlib.rc('ytick', labelsize=15) \nmatplotlib.rc('legend', fontsize=15) \nmatplotlib.rc('axes', titlesize=25)\nmatplotlib.rc('axes', labelsize=15)\nfig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte best\u00e4tigte Todesf\u00e4lle in NRW, log. Darstellung')\nax.set_title('Kumulierte best\u00e4tigte Todesf\u00e4lle in Nordrhein-Westfalen, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovNRW80plus.date[1:],CovNRW80plus.CumSum_death[1:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovNRW35_59.date[1:],CovNRW35_59.CumSum_death[1:],label='35-59 Jahre',linewidth='5')\nax.plot(CovNRW60_79.date[1:],CovNRW60_79.CumSum_death[1:],label='60-79 Jahre',linewidth='5')\nax.legend()\n\n\n\nmatplotlib.rc('xtick', labelsize=15) \nmatplotlib.rc('ytick', labelsize=15) \nmatplotlib.rc('legend', fontsize=15) \nmatplotlib.rc('axes', titlesize=25)\nmatplotlib.rc('axes', labelsize=15)\nfig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte best\u00e4tigte F\u00e4lle in NRW, log. Darstellung')\nax.set_title('Kumulierte best\u00e4tigte F\u00e4lle in Nordrhein-Westfalen, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovNRW80plus.date[0:],CovNRW80plus.CumSum_cases[0:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovNRW35_59.date[0:],CovNRW35_59.CumSum_cases[0:],label='35-59 Jahre',linewidth='5')\nax.plot(CovNRW60_79.date[0:],CovNRW60_79.CumSum_cases[0:],label='60-79 Jahre',linewidth='5')\nax.legend()\n\nfig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte best\u00e4tigte F\u00e4lle in Deutschland, log. Darstellung')\nax.set_title('Kumulierte best\u00e4tigte F\u00e4lle in Deutschland, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovD80plus.date[0:],CovD80plus.CumSum_cases[0:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovD35_59.date[0:],CovD35_59.CumSum_cases[0:],label='35-59 Jahre',linewidth='5')\nax.plot(CovD60_79.date[0:],CovD60_79.CumSum_cases[0:],label='60-79 Jahre',linewidth='5')\nax.legend()\n\nfig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Kumulierte best\u00e4tigte Todesf\u00e4lle in Deutschland, log. Darstellung')\nax.set_title('Kumulierte best\u00e4tigte Todesf\u00e4lle in Deutschland, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovD80plus.date[1:],CovD80plus.CumSum_death[1:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovD35_59.date[1:],CovD35_59.CumSum_death[1:],label='35-59 Jahre',linewidth='5')\nax.plot(CovD60_79.date[1:],CovD60_79.CumSum_death[1:],label='60-79 Jahre',linewidth='5')\nax.legend()","0904ac2d":"fig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Best\u00e4tigte Todesf\u00e4lle in Deutschland, log. Darstellung')\nax.set_title('Best\u00e4tigte Todesf\u00e4lle in Deutschland, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovD80plus.date[1:],CovD80plus.deaths[1:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovD35_59.date[1:],CovD35_59.deaths[1:],label='35-59 Jahre',linewidth='5')\nax.plot(CovD60_79.date[1:],CovD60_79.deaths[1:],label='60-79 Jahre',linewidth='5')\nax.legend()","a14cd82a":"fig=plt.figure(figsize=[20,20])\nax=fig.add_subplot(2,1,1)\nplt.xticks(rotation=80)\nplt.xlim(date_minNRW,date_maxNRW)\n\n\nax.set_xlabel('Datum')\nax.set_ylabel('Best\u00e4tigte Todesf\u00e4lle in NRW, log. Darstellung')\nax.set_title('Best\u00e4tigte Todesf\u00e4lle in NRW, logarithmische Darstellung')\nprint(dfNRW.date.iloc[-3])\nax.axvline(x=dfNRW.date.iloc[-4],color='red',linewidth=5)       #the data of the RKI is not complete within the last four days, cases will be added in the next days\nax.set_yscale('log')                                                   #therefore I draw a line at which the interpretation ist not possible because of too less repprted cases\n\nax.plot(CovNRW80plus.date[1:],CovNRW80plus.deaths[1:],label='80-99 Jahre',linewidth='5')\n#ax.plot(CovNRW00_04.date[1:],CovNRW00_04.CumSum_death[4:],label='0-4')\n#ax.plot(CovNRW05_14.date[6:],CovNRW05_14.CumSum_death[6:],label='5-14')\n#ax.plot(CovNRW15_34.date[1:],CovNRW15_34.CumSum_death[1:],label='15-34')\nax.plot(CovNRW35_59.date[1:],CovNRW35_59.deaths[1:],label='35-59 Jahre',linewidth='5')\nax.plot(CovNRW60_79.date[1:],CovNRW60_79.deaths[1:],label='60-79 Jahre',linewidth='5')\nax.legend()","e5cea546":"dfD = pd.DataFrame(CovidD)\ndfD=pd.DataFrame(dfD,columns=['county','date','cases','deaths'])\nLandKreiseGruppiertNew = dfD.groupby(['county']).sum() \n\ndfD['CumSum_death']=dfD['deaths'].cumsum()\ndfD['CumSum_cases']=dfD['cases'].cumsum()\nprint(LandKreiseGruppiertNew)\n#dfD.CumSum_death.iloc[-1]\n#dfD","25ffb5f8":"caseFRCounties=pd.DataFrame()\ncaseFRCounties=LandKreiseGruppiertNew['deaths']\/LandKreiseGruppiertNew['cases']\ncaseFRSort=pd.DataFrame(caseFRCounties)\ncaseFRSort=caseFRCounties.sort_values(ascending=False)     #sort states with declining Case Fatality Rate\ncaseFRSort.dtype\n","13975452":"LandKreiseGruppiertNew['cases']\ndef greater(list_1,num):\n list_2=[]\n indexlist2=[]\n j=0\n for i in list_1:\n  j=j+1 \n  if(i>num):\n    list_2.append(i)\n    indexlist2.append(j)\n   # print(list_2)\n return (list_2, indexlist2)\n\n\n#[liste1,liste2]=greater(LandKreiseGruppiertNew['cases'],400)\n#liste2\n#print(LandkreiseGruppiertNew)\n#LandKreiseGruppiertNew[liste2,:]\nLandKreiseGruppiertFilter=LandKreiseGruppiertNew[LandKreiseGruppiertNew['cases'] > 1000] #  Anwenden eines Filters auf Landkreise mit mehr als 400 F\u00e4llen\nLandKreiseGruppiertFilter=LandKreiseGruppiertFilter[LandKreiseGruppiertFilter['deaths'] > 10] #Filter auf Todesf\u00e4lle gr\u00f6\u00dfer 20\n#print(LandKreiseGruppiertFilter)\nLandKreiseGruppiertFilter['CFR']=LandKreiseGruppiertFilter['deaths']\/LandKreiseGruppiertFilter['cases']\n#print(LandKreiseGruppiertFilter)\nLGCFRSort=LandKreiseGruppiertFilter.sort_values(by='CFR',ascending=False)\n\n#LGFCFRSort=LandKreiseGruppiertFilter['CFR'].sort_values(ascending=False)\nLGCFRSort.head(50)\n#caseFRSort.dtype","067b7871":"Print the list of 16 states:","f0359e56":"Group the data set by state and date:","a54fc47a":"Calculate the Agegroup cases and deaths for Germany","a305b3e2":"**Calculate the Agegroup Cases and Deaths in Northrine-Westphalia:**","45b57700":"**Kumulierte Summe an best\u00e4tigten F\u00e4llen und Todesf\u00e4llen in Nordrhein-Westfalen:**","9ab51529":"Print the Case Fatality Rate (Deutsch: Letalit\u00e4t, Anteil Verstorbene zu Erkrankten) for all counties (Deutsch Landkreise) that have more than 1000 Cases and at least 10 deaths:","5f7fa1ed":"**Print the case fatality rate of all states:","6fe17dc0":"In Germany, there are 16 different states. In each state there are slightly different actions and decrees in context to Covid-19. Some decrees are equal for all states in Germany. In Northrine-Westfalia there is one area, in which a number of cases appeared in February due to a couple that attended a carnival party in Heinsberg when it was already infected without knowing it. Until the 26th of march, the number of positive tested covid-19 cases in Northrine-Westfalia was highest compared to other states. This might also be due to the fact that it is the state with most citizens.\n\nWith this python code, I would like to analyze, how the number of deaths and cases differ in timeseries in the different states until now. \n\nIt can be seen that meanwhile in Northrhine-Westfalia, there are much less deaths than in the state of Bayern or Baden-W\u00fcrttemberg. But in Northrine-Westfalia just slightly less positive tested cases appear compared to the state of Bayern and even more positive tested cases than in Baden-W\u00fcrttemberg (up to 2.4.2020). One possible reason is that there has been more testing in Northrine-Westfalia. Another explenation might be that the infectes persons in Bayern and Baden-W\u00fcrttemberg are older because of a lot of infections within elderly care organizations.","186ef97d":"Some Datatype format adaption for the dates:","8a60721a":"**A function to choose the states out of the data set:**","c4dbfac3":"Read in data for Northrine-Westfalia","0d6e0157":"#  Observing Covid-19 data for the state of Northrine-Westfalia in comparison to the other states in Germany","b956e839":"Read in the RKI-data covid-19 data for the states and counties of Germany.","3218def5":"Read in the data for all 16 states:","741882da":"Print Overview of cases and deaths in states","1b45fbb7":"**Group as counties**","e1a87382":"A function to select each of the 16 states within the data set:","b43c4226":"**Plot the cases and deaths for Northrine-Westfalia and all states in Germany:**"}}