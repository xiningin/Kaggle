{"cell_type":{"ff12a052":"code","f55b2bc0":"code","be8a844c":"code","83c53ee9":"code","39a3f62d":"code","3a5ca3a4":"code","e785835a":"code","eae7e9de":"code","e139dcbe":"code","76a9365d":"code","3dde9e36":"code","e7c48502":"code","ebce4495":"code","fe6f6006":"code","c49e3304":"code","bb7870ae":"code","0ed72e61":"code","acd2cb0c":"code","74b4619a":"code","b7b0039c":"code","7bd92575":"code","cd689951":"markdown","dd4921b4":"markdown","9eb3f294":"markdown","1c89b42e":"markdown"},"source":{"ff12a052":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow\nimport skimage.io\nimport glob\nimport tqdm\nimport os\n\nfrom glob import glob\nfrom tqdm import tqdm\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Flatten, Dense, InputLayer\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n\n\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\n\n%matplotlib inline","f55b2bc0":"cancerous      = os.listdir('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes')\nnon_cancerous  = os.listdir('..\/input\/brain-mri-images-for-brain-tumor-detection\/no') ","be8a844c":"len(cancerous), len(non_cancerous)","83c53ee9":"# Viewing Dataset - Cancerous \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(cancerous))\n    img  = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/' + cancerous[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","39a3f62d":"# Viewing Dataset - Non-Cancerous \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(non_cancerous))\n    img  = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/' + non_cancerous[rand])\n    img  = resize(img, (224,224))\n    ax[i].imshow(img)\n    ax[i].axis('off')","3a5ca3a4":"# Converting images into proper shape and storing tehm as asn array.\n\nImage = []\nLabel = []\n\nfor i in tqdm(range(0, len(cancerous))):\n    img = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/' + cancerous[i])\n    img = resize(img, (224, 224, 3))\n    Image.append(img)\n    Label.append(1)\n    \nfor i in tqdm(range(0, len(non_cancerous))):\n    img = imread('..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/' + non_cancerous[i])\n    img = resize(img, (224, 224, 3))\n    Image.append(img)\n    Label.append(0)\n    \nImage = np.array(Image)\nLabel = np.array(Label) ","e785835a":"# Shuffle the data as results are appened.\n\nImage, Label = shuffle(Image, Label, random_state = 42)","eae7e9de":"# Viewing Image - After Shuffle \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(0, 5)):\n    rand = np.random.randint(len(Image))\n    ax[i].imshow(Image[rand])\n    ax[i].axis('off')\n    a = Label[rand]\n    if a == 1:\n        ax[i].set_title('Cancerous')\n    else:\n        ax[i].set_title('Non_Cancerous')","e139dcbe":"X = Image \ny = Label\n\n# Preprocess Data\nX = preprocess_input(X)\n\n# Converting target label to categorical since we are including 2 neuron at output layer. \ny = to_categorical(y)","76a9365d":"# Splitting Data - Training & Validation\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42)","3dde9e36":"train_datagen = ImageDataGenerator(rotation_range=30,\n                                   width_shift_range=0.2,\n                                   height_shift_range = 0.2,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True,\n                                   vertical_flip = True,\n                                   fill_mode = 'nearest')\n\ntrain_datagen.fit(X_train)","e7c48502":"# Creating model with pre trained imagenet weights\n\nvgg16 = VGG16(include_top=False, weights='imagenet', input_shape=(224,224,3))","ebce4495":"vgg16.summary()","fe6f6006":"# We dont want to train all layers so, we do following step because we are using same weights given in VGG16\n\nfor layers in vgg16.layers:\n    layers.trainable = False","c49e3304":"# Introducing Flatten Layer\n\nx = Flatten()(vgg16.output)","bb7870ae":"# Introducing FCC & Output Layer\n\nfcc_layer   = Dense(units = 1024, activation = 'relu')(x)\nfinal_layer = Dense(units = 2, activation = 'softmax')(fcc_layer)","0ed72e61":"# Creating Final Model\n\nmodel = Model(inputs = vgg16.input, outputs = final_layer)","acd2cb0c":"# Checking Model Summary\n\nmodel.summary()","74b4619a":"# Model Compile \n\nmodel.compile(optimizer = tensorflow.keras.optimizers.Adam(1e-6), \n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","b7b0039c":"# Defining Callbacks\n\nfilepath = '.\/best_weights.h5'\n\nearlystopping   = EarlyStopping(monitor = 'val_accuracy', \n                                mode='max', \n                                patience = 10, \n                                verbose = 1)\n\nmodelcheckpoint = ModelCheckpoint(filepath, \n                                  monitor = 'val_accuracy', \n                                  mode = 'max', \n                                  verbose = 1, \n                                  save_best_only=True)\n\ncallback_list = [earlystopping, modelcheckpoint]","7bd92575":"# Fitting Model\n\nmodel_history = model.fit(train_datagen.flow(X_train, y_train, batch_size=32),  \n                          validation_data = (X_test, y_test),\n                          epochs = 500,\n                          verbose = 1,\n                          callbacks = callback_list)","cd689951":"**IMPORTING \/ VIEW \/ PREPROCESS DATASET**","dd4921b4":"**IMPORT LIBRARIES**","9eb3f294":"**MODEL BUILDING**","1c89b42e":"**DATA AUGMENTATION**"}}