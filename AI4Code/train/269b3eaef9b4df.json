{"cell_type":{"d98882ba":"code","c871f2ca":"code","30360b00":"code","be2b3361":"code","4712b824":"code","ddf2287b":"code","0b8ebfea":"code","3566d8b7":"code","0ae6db8d":"code","fef9cfcb":"code","7c9f90dd":"code","60bb5e44":"code","9014490d":"code","bdfeee01":"code","af68f5f7":"code","baf66d80":"code","178b634f":"code","def6e231":"code","9180a497":"code","200ecc23":"code","302f85df":"code","8b6e17c3":"code","3b59ef1d":"code","745b3b44":"code","db98f4c9":"markdown"},"source":{"d98882ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c871f2ca":"from fastai.vision import *\nfrom pathlib import Path\nimport cv2","30360b00":"import os\nprint(os.listdir(\"..\/input\/recursion-cellular-image-classification\/\"))","be2b3361":"path = Path('..\/input\/recursion-cellular-image-classification\/')","4712b824":"train = pd.read_csv(f'{path}\/train.csv')\ntrain.head()","ddf2287b":"pixel_stats = pd.read_csv(f'{path}\/pixel_stats.csv')\npixel_stats.head()","0b8ebfea":"plt.style.use('ggplot')\nplt.figure(figsize=(15,5))\ntrain.experiment.value_counts().plot.barh()","3566d8b7":"plt.figure(figsize=(15,5))\ntrain.sirna.value_counts()\ntrain.sirna.value_counts().plot.bar()","0ae6db8d":"len(train.sirna.unique())","fef9cfcb":"train.isnull().sum().sort_index()","7c9f90dd":"smpl=1\ntrain['path'] = train['experiment']+'\/Plate'+train['plate'].astype(str)+'\/'+train['well'].astype(str)+'_s'+str(smpl)+'_w'","60bb5e44":"train.head()","9014490d":"\nimg = cv2.imread(f\"{path}\/train\/HUVEC-06\/Plate1\/B02_s1_w1.png\")\nplt.imshow(img)","bdfeee01":"gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\nplt.imshow(gray_img)","af68f5f7":"plt.figure(figsize=(10,5))\n[[plt.subplot(1,6,i+1),plt.imshow(cv2.imread(f\"{path}\/train\/{train.path[0]}{str(i+1)}.png\")), plt.grid(False), plt.yticks([]),  plt.xticks([])] for i in range(6)];\n","baf66d80":"plt.figure(figsize=(10,5))\n[[plt.subplot(1,6,i+1),plt.imshow(cv2.cvtColor(cv2.imread(f\"{path}\/train\/{train.path[0]}{str(i+1)}.png\"),cv2.COLOR_RGB2GRAY)), plt.grid(False), plt.yticks([]),  plt.xticks([])] for i in range(6)];\n","178b634f":"source https:\/\/www.kaggle.com\/tanlikesmath\/rcic-fastai-starter\ndef opening_file(fn):\n    return Image(pil2tensor(np.dstack([cv2.cvtColor(cv2.imread(f\"{fn}{str(i+1)}.png\"),cv2.COLOR_RGB2GRAY) for i in range(6)]), np.float32).div_(255))","def6e231":"class MultiChannelImageList(ImageList):\n     def open(self, fn):\n        return opening_file(fn)","9180a497":"image_list_df = train.copy()\n\nimage_list_df.drop(['id_code', 'experiment', 'plate', 'well'], axis=1, inplace = True)\n\nimage_list_df.head()","200ecc23":"dat = MultiChannelImageList.from_df(df=image_list_df, path=r'train\/',cols='path')","302f85df":"#copied from source https:\/\/www.kaggle.com\/tanlikesmath\/rcic-fastai-starter\ndef image2np(image:Tensor)->np.ndarray:\n    \"Convert from torch style `image` to numpy\/matplotlib style.\"\n    res = image.cpu().permute(1,2,0).numpy()\n    if res.shape[2]==1:\n        return res[...,0]  \n    elif res.shape[2]>3:\n        return res[...,:3]\n    else:\n        return res\n\nvision.image.image2np = image2np","8b6e17c3":"data = (MultiChannelImageList.from_df(df=image_list_df,path=f'{path}\/train\/', cols = 'path')\n        .split_by_rand_pct(0.1)\n        .label_from_df(cols ='sirna')\n        .transform(get_transforms(),size=128)\n        .databunch(bs=8,num_workers=0)\n        .normalize(imagenet_stats)\n       )","3b59ef1d":"arch = models.resnet34","745b3b44":"data","db98f4c9":"source https:\/\/www.kaggle.com\/tanlikesmath\/rcic-fastai-starter"}}