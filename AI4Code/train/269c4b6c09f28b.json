{"cell_type":{"d2878e7f":"code","8ecaa5c9":"code","1bab845a":"code","102e50ed":"code","add77fc4":"code","2948350f":"code","d5ab3d37":"code","b8d5109d":"code","5a9a2b42":"code","d368000a":"code","8e8771c2":"code","c9d8431a":"code","3f0463b2":"code","837fa28d":"code","b23a60c7":"code","f8145ad6":"code","e2314795":"code","33823f43":"code","9aa0f686":"code","a3a5c09a":"code","8713c95f":"code","2880b5a7":"code","8c0a3902":"code","527a0b87":"code","a929085d":"code","53a39a10":"code","2a7f6168":"code","8349eab9":"code","759cb37f":"code","7d89da71":"code","b7fa7bfb":"code","d4adda82":"code","a267ed2e":"code","496ded19":"code","f4035e2a":"code","64dc0de5":"code","99876414":"code","fa10b3b4":"code","fc709b4c":"code","c45c3718":"code","8923268c":"code","d479e14b":"code","cc6f5e67":"code","a7e8b884":"code","140f2df4":"code","594be465":"code","a1e16667":"code","4d8c3fa0":"code","6e328f00":"code","9fc1852d":"code","e22c367a":"code","28865689":"code","f754808f":"code","0f2ead77":"code","3f804458":"code","60faee87":"code","f6f85539":"code","53205cd8":"code","cd1e3f94":"code","180814b9":"code","bbac1b88":"code","5ebdec99":"code","f723fcef":"code","cdf9f699":"code","61ea51d6":"code","4e78d969":"code","b6645ccf":"code","20e1798d":"code","ad56408b":"code","0d054668":"code","b172f05c":"code","1d06bdc1":"code","674e82b7":"code","b284b36f":"code","1139461e":"code","561e4849":"code","08996fcd":"code","04696394":"code","1e86b6a5":"code","bbe2c85c":"code","4a759ffc":"code","d7fb93e4":"code","4958f6e4":"code","689b176f":"code","996d5348":"code","e16319af":"code","8c3d5620":"code","86dfc44c":"code","06e65f2f":"code","8113934d":"code","c4c3b921":"code","8b676aa3":"code","9f17a950":"code","8d94faef":"code","bc9b123b":"code","931b826d":"code","60fd6ba2":"code","6098b105":"code","4f306d10":"code","2678f25d":"code","1da777c6":"code","d3004dec":"code","e11d4354":"code","3635e561":"code","225df103":"code","b954813c":"code","27956b3b":"code","a5ddb6cf":"code","e5da1234":"markdown","9935dcc1":"markdown","3009a2fa":"markdown","923bc13a":"markdown","a1ebbb0c":"markdown","89dd1ed4":"markdown","0e95e53e":"markdown","98bbc486":"markdown","5d054f63":"markdown","50345b80":"markdown","2551d249":"markdown","75333a64":"markdown","2e60920e":"markdown","4c3d5978":"markdown","9022d806":"markdown","93656e61":"markdown","ae63b187":"markdown","d8bffc06":"markdown","56e86c1a":"markdown","3eaf280d":"markdown","7a907b32":"markdown","e559e5e8":"markdown","b3b6e6ff":"markdown","e120d20a":"markdown","c5df6256":"markdown","756ae54c":"markdown","a0bef9d3":"markdown","9d9511f2":"markdown","6f59d338":"markdown"},"source":{"d2878e7f":"import numpy as np\n%matplotlib inline\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import  LabelEncoder\nfrom plotly.offline import init_notebook_mode,iplot","8ecaa5c9":"df = pd.read_csv('..\/input\/brasilian-houses-to-rent\/houses_to_rent_v2.csv')\ndf","1bab845a":"df.isna().sum(axis=0)","102e50ed":"sns.heatmap(df.isnull());","add77fc4":"df = df.rename(columns = {'parking spaces' : 'parking', 'hoa (R$)' : 'hoa', 'rent amount (R$)' : 'rent_amount', 'property tax (R$)' : 'property_tax', 'fire insurance (R$)' : 'fire_insurance', 'total (R$)' : 'total' })","2948350f":"temp = df.describe()\ntemp.style.background_gradient(cmap='Oranges')","d5ab3d37":"g1 = [go.Box(y=df.rooms,name=\"rooms\",marker=dict(color=\"rgba(51,0,0,0.9)\"),hoverinfo=\"name+y\")]\ng2 = [go.Box(y=df.bathroom,name=\"bathroom\",marker=dict(color=\"rgba(0,102,102,0.9)\"),hoverinfo=\"name+y\")]\ng3 = [go.Box(y=df.parking,name=\"parking\",marker=dict(color=\"rgba(9,80,58,12.2)\"),hoverinfo=\"name+y\")]\nlayout2 = go.Layout(title=\"Houses\",yaxis=dict(range=[0,13])) \nfig2 = go.Figure(data=g1+g2+g3,layout=layout2)\niplot(fig2)","b8d5109d":"class color:\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'\nprint(color.DARKCYAN + '\\033[1m' + '\\033[4m' + 'Maximum lease amount: R$', df['total'].max(), '' +  color.END)\nprint(color.BLUE + '\\033[1m' + '\\033[4m' + 'Minimum lease amount:: R$', df['total'].min(), '' +  color.END)\nprint(color.DARKCYAN + '\\033[1m' + '\\033[4m' + 'Average lease value: R$', df['total'].mean(), '' +  color.END)\nprint('')\nprint(color.BLUE + '\\033[1m' + '\\033[4m' + 'Minimum lease amount:: R$', df['area'].min(), '' +  color.END)\nprint(color.BLUE + '\\033[1m' + '\\033[4m' + 'Maximum lease amount: R$', df['area'].max(), '' +  color.END)\nprint(color.BLUE + '\\033[1m' + '\\033[4m' + 'Average lease value: R$', df['area'].mean(), '' +  color.END)","5a9a2b42":"df.loc[df['total'] > 10000]","d368000a":"df = df.drop(df[df['total'] > 6000].index)\ndf","8e8771c2":"grafico = px.box(df, y='total')\ngrafico.show()","c9d8431a":"df.loc[df['area'] > 1000]","3f0463b2":"df = df.drop(df[df['area'] > 300].index)\ngrafico = px.box(df, y='area')\ngrafico.show()","837fa28d":"correlations = df.corr()\nf, ax = plt.subplots(figsize = (15,15))\nsns.heatmap(correlations, annot=True)\ncorrelations.round(2);","b23a60c7":"fig2 = px.histogram(df,x='city',color='city',template='plotly_dark')\nfig2.show()","f8145ad6":"fig2 = px.histogram(df,x='rooms',color='rooms',template='plotly_dark')\nfig2.show()","e2314795":"fig2 = px.histogram(df,x='bathroom',color='bathroom',template='plotly_dark')\nfig2.show()","33823f43":"fig2 = px.histogram(df,x='parking',color='parking',template='plotly_dark')\nfig2.show()","9aa0f686":"fig2 = px.histogram(df,x='floor',color='floor',template='plotly_dark')\nfig2.show()","a3a5c09a":"fig2 = px.histogram(df,x='animal',color='animal',template='plotly_dark')\nfig2.show()","8713c95f":"fig2 = px.histogram(df,x='furniture',color='furniture',template='plotly_dark')\nfig2.show()","2880b5a7":"X_houses = df.iloc[:,1:2].values\nX_houses","8c0a3902":"y_houses = df.iloc[:,12].values\ny_houses","527a0b87":"from sklearn.model_selection import train_test_split\nX_houses_train, X_houses_test, y_houses_train, y_houses_test = train_test_split(X_houses, y_houses, test_size = 0.3, random_state = 0)","a929085d":"X_houses_train.shape, y_houses_train.shape","53a39a10":"X_houses_test.shape, y_houses_test.shape","2a7f6168":"from sklearn.linear_model import LinearRegression\nregression_simple_houses = LinearRegression()\nregression_simple_houses.fit(X_houses_train, y_houses_train)","8349eab9":"regression_simple_houses.intercept_\n","759cb37f":"regression_simple_houses.coef_","7d89da71":"regression_simple_houses.score(X_houses_train, y_houses_train)","b7fa7bfb":"regression_simple_houses.score(X_houses_test, y_houses_test)","d4adda82":"forecasts = regression_simple_houses.predict(X_houses_train)\nforecasts","a267ed2e":"graphic = px.scatter(x = X_houses_train.ravel(), y = forecasts)\ngraphic.show()","496ded19":"grafico1 = px.scatter(x = X_houses_train.ravel(), y = y_houses_train)\ngrafico2 = px.line(x = X_houses_train.ravel(), y = forecasts)\ngrafico2.data[0].line.color = 'red'\ngrafico3 = go.Figure(data=grafico1.data + grafico2.data)\ngrafico3","f4035e2a":"forecasts_test = regression_simple_houses.predict(X_houses_test)\nforecasts_test","64dc0de5":"y_houses_test","99876414":"abs(y_houses_test - forecasts_test).mean()","fa10b3b4":"from sklearn.metrics import mean_absolute_error, mean_squared_error","fc709b4c":"mean_absolute_error(y_houses_test, forecasts_test)","c45c3718":"mean_squared_error(y_houses_test, forecasts_test)","8923268c":"np.sqrt(mean_squared_error(y_houses_test, forecasts_test))","d479e14b":"grafico1 = px.scatter(x = X_houses_test.ravel(), y = y_houses_test)\ngrafico2 = px.line(x = X_houses_test.ravel(), y = forecasts_test)\ngrafico2.data[0].line.color = 'red'\ngrafico3 = go.Figure(data=grafico1.data + grafico2.data)\ngrafico3.show()","cc6f5e67":"df","a7e8b884":"from sklearn.preprocessing import  LabelEncoder","140f2df4":"mk = LabelEncoder()\ndf['city'] = mk.fit_transform(df['city'])\ndf['animal'] = mk.fit_transform(df['animal'])\ndf['furniture'] = mk.fit_transform(df['furniture'])\ndf['floor'] = mk.fit_transform(df['floor'])\ndf1 = df\ndf1","594be465":"df1.info()","a1e16667":"X_houses = df.iloc[:,0:12].values\nX_houses","4d8c3fa0":"y_houses = df.iloc[:, 12].values\ny_houses","6e328f00":"from sklearn.model_selection import train_test_split\nX_houses_train, X_houses_test, y_houses_train, y_houses_test = train_test_split(X_houses, y_houses, test_size = 0.3, random_state = 0)","9fc1852d":"X_houses_train.shape, X_houses_test.shape","e22c367a":"regression_multiple_houses = LinearRegression()\nregression_multiple_houses.fit(X_houses_train, y_houses_train)","28865689":"regression_multiple_houses.intercept_","f754808f":"regression_multiple_houses.coef_","0f2ead77":"len(regression_multiple_houses.coef_)","3f804458":"regression_multiple_houses.score(X_houses_train, y_houses_train)","60faee87":"regression_multiple_houses.score( X_houses_test, y_houses_test)","f6f85539":"forecasts = regression_multiple_houses.predict( X_houses_test)\nforecasts","53205cd8":"y_houses_test","cd1e3f94":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_houses_test, forecasts)","180814b9":"X_houses_train.shape, X_houses_test.shape","bbac1b88":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree = 2)\nX_houses_train_poly = poly.fit_transform(X_houses_train)\nX_houses_test_poly = poly.transform(X_houses_test)","5ebdec99":"X_houses_train_poly.shape, X_houses_test_poly.shape","f723fcef":"regression_houses_poly = LinearRegression()\nregression_houses_poly.fit(X_houses_train_poly, y_houses_train)","cdf9f699":"regression_houses_poly.score(X_houses_train_poly, y_houses_train)","61ea51d6":"regression_houses_poly.score(X_houses_test_poly, y_houses_test)","4e78d969":"forecasts = regression_houses_poly.predict(X_houses_test_poly)\nforecasts","b6645ccf":"y_houses_test","20e1798d":"mean_absolute_error(y_houses_test, forecasts)","ad56408b":"X_houses_train.shape, X_houses_test.shape","0d054668":"from sklearn.tree import DecisionTreeRegressor","b172f05c":"regression_tree_houses = DecisionTreeRegressor()\nregression_tree_houses.fit(X_houses_train, y_houses_train)","1d06bdc1":"regression_tree_houses.score(X_houses_train, y_houses_train)","674e82b7":"regression_tree_houses.score(X_houses_test, y_houses_test)","b284b36f":"forecasts = regression_tree_houses.predict(X_houses_test)\nforecasts","1139461e":"y_houses_test","561e4849":"mean_absolute_error(y_houses_test, forecasts)","08996fcd":"from sklearn.ensemble import RandomForestRegressor","04696394":"regression_random_forest_houses = RandomForestRegressor(n_estimators=100)\nregression_random_forest_houses.fit(X_houses_train, y_houses_train)","1e86b6a5":"regression_random_forest_houses.score(X_houses_train, y_houses_train)","bbe2c85c":"regression_random_forest_houses.score(X_houses_test, y_houses_test)","4a759ffc":"forecasts = regression_random_forest_houses.predict(X_houses_test)\nforecasts","d7fb93e4":"y_houses_test","4958f6e4":"mean_absolute_error(y_houses_test, forecasts)","689b176f":"from sklearn.svm import SVR","996d5348":"from sklearn.preprocessing import StandardScaler\nscaler_x_houses = StandardScaler()\nX_houses_train_scaled = scaler_x_houses.fit_transform(X_houses_train)\nscaler_y_houses = StandardScaler()\ny_houses_train_scaled = scaler_y_houses.fit_transform(y_houses_train.reshape(-1,1))","e16319af":"X_houses_train_scaled","8c3d5620":"X_houses_train_scaled.shape, y_houses_train.shape","86dfc44c":"X_houses_test_scaled = scaler_x_houses.transform(X_houses_test)\ny_houses_test_scaled = scaler_y_houses.transform(y_houses_test.reshape(-1,1))","06e65f2f":"X_houses_test_scaled.shape, y_houses_test_scaled.shape","8113934d":"regression_svr_houses = SVR(kernel='rbf')\nregression_svr_houses.fit(X_houses_train_scaled, y_houses_train_scaled.ravel())","c4c3b921":"regression_svr_houses.score(X_houses_train_scaled, y_houses_train_scaled)","8b676aa3":"regression_svr_houses.score(X_houses_test_scaled, y_houses_test_scaled)","9f17a950":"forecasts = regression_svr_houses.predict(X_houses_test_scaled)\nforecasts","8d94faef":"y_houses_test_scaled","bc9b123b":"y_houses_test_inverse = scaler_y_houses.inverse_transform(y_houses_test_scaled)\nforecasts_inverse = scaler_y_houses.inverse_transform(forecasts)","931b826d":"y_houses_test_inverse","60fd6ba2":"forecasts_inverse","6098b105":"mean_absolute_error(y_houses_test_inverse, forecasts_inverse)","4f306d10":"from sklearn.neural_network import MLPRegressor\nregression_rna_houses = MLPRegressor(max_iter=1000, hidden_layer_sizes=(7,7))\nregression_rna_houses.fit(X_houses_train_scaled, y_houses_train_scaled.ravel())","2678f25d":"regression_rna_houses.score(X_houses_train_scaled, y_houses_train_scaled)","1da777c6":"regression_rna_houses.score(X_houses_test_scaled, y_houses_test_scaled)","d3004dec":"forecasts = regression_rna_houses.predict(X_houses_test_scaled)\nforecasts","e11d4354":"y_casas_teste_inverse = scaler_y_houses.inverse_transform(y_houses_test_scaled)\nforecasts_inverse = scaler_y_houses.inverse_transform(forecasts)","3635e561":"forecasts_inverse","225df103":"mean_absolute_error(y_houses_test_inverse, forecasts_inverse)","b954813c":"import folium\nfrom folium.plugins import HeatMap, MarkerCluster\nfrom folium.plugins import FastMarkerCluster\nimport folium.plugins as plugins","27956b3b":"df = pd.read_csv('..\/input\/cidades-saopaulo\/df_cities_tratada.csv')\ndf = df.dropna(axis = 0)","a5ddb6cf":"lats = list(df['seller_latitude'])\nlongs = list(df['seller_longitude'])\nlocations = list(zip(lats, longs))                                         \nmap_2 = folium.Map(location=[-25, -45], zoom_start=6.0)\nFastMarkerCluster(data=locations).add_to(map_2)\nmap_2","e5da1234":"Here we can compare the results above and below, the error is very small in the predictions.","9935dcc1":"**The error margin is a little smaller than the previous algorithm.**","3009a2fa":"# **Conclusion**\n\n* **Linear Regression Simple: mean_absolute_error = 961.55;**\n\n* **Multiple Linear Regression: mean_absolute_error = 0.46;**\n\n* **Polynomial Regression: mean_absolute_error = 0.67;**\n\n* **Regression Decision Trees: mean_absolute_error = 61.25;**\n\n* **Random Forest Regression: mean_absolute_error = 34.87;**\n\n* **SVM Regression: mean_absolute_error = 70.99;**\n\n* **Artificial Neural Networks: mean_absolute_error = 58.45;**","923bc13a":"**Our objective will be, through the property's footage, to make a forecast of the property's total cost.**","a1ebbb0c":"Analyzing the performance through the score is very bad, we will hardly use this algorithm to make house predictions, as we are looking for values closer to 1.","89dd1ed4":"**In blue is the real answer and red is the predictions that the algorithm made.**","0e95e53e":"Very good results too, we can observe that there was a small retreat in relation to the training of the previous algorithm.","98bbc486":"# **Linear Regression Simple**","5d054f63":"# **Dados de casas para alugar (2020) \/ Houses to rent data (2020)**\n\n**Descri\u00e7\u00e3o \/ Description**\n\nEste dataset possui 10962 casas para alugar com 13 classes diferentes.\/This dataset contains 10962 houses to rent with 13 diferent features.\n\n**FAQ**\n\n**Outliers **\nPodem conter alguns valores no dataset que s\u00e3o considerados outlier para analise. Tendo em vista que foi utilizado um WebCrawler apenas para pegar os dados, os mesmos est\u00e3o sujeitos a problemas como erros no cadastros.\n\nCould be some values in dataset that can be consider outlier to analysis. Bearing in mind that a Web Crawler only to get the data, it\u00b4s possible find some errors like registration error\n\n**Mudan\u00e7as de dados entre as vers\u00f5es de dataset\/ Changes in data between versions of dataset **\nVisto que WebCrawler foi rodado em dias diferentes para cada vers\u00e3o do dataset, podem haver diferen\u00e7as como adi\u00e7\u00e3o ou exclus\u00e3o de casas (alem das cidades adicionadas).\n\nSince the o WebCrawler was runned in differents days to each version of dataset, there may be differences like adding or deleting houses (in addition to the cities added)\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------\nEu n\u00e3o tenho propriedade de nenhum desses dados, todos eles foram retirados de informa\u00e7\u00f5es dispon\u00edveis gratuitamente na internet e compilados apenas para facilitar o acesso.\nI do not own any of these data, they were all taken from information available for free on the internet and compiled just for easy access.\n\nhttps:\/\/www.kaggle.com\/rubenssjr\/brasilian-houses-to-rent","50345b80":"**In this chart we can visualize the predictions for each one of the training database records, the line is straight, because the formula is the straight equation.**","2551d249":"# **Random Forest Regression**","75333a64":"# **Exploring the Data**","2e60920e":"**In this algorithm the error is reduced by half.**","4c3d5978":"# **Map**","9022d806":"# **Polynomial Regression**","93656e61":"# **Multiple Linear Regression**","ae63b187":"**As in the multiple regression we had an excellent result too.**","d8bffc06":"**The Neural Network didn't do so well close to the second and third algorithms that we tested, its margin of error was bigger.**","56e86c1a":"# **SVM Regression**","3eaf280d":"**The results of this algorithm are much better than those of linear regression, certainly if we had to choose between the two algorithms it would be this one for real estate price forecasts, which has a precision of more than 99% in this case study.**","7a907b32":"**In this algorithm our error range was more than 100% of the previous one.**","e559e5e8":"As mentioned before, this algorithm was not interesting for analyzing the values, the large difference in the rent for more and less.","b3b6e6ff":"**We can observe the same behavior we had for the training database.**","e120d20a":"# **Artificial Neural Networks**","c5df6256":"The following database is the same as in this case study, but I performed a treatment outside of Kaggle, as Kaggle after 20 minutes it disconnects the machine, so due to the complexity and delay in carrying out the treatment to carry out the locations of the properties I had to do the treatment on my computer.","756ae54c":"# **If you find this notebook useful, support with an upvote** \ud83d\udc4d","a0bef9d3":"**We can conclude that the Multiple Linear Regression had the best result, had a smaller error in relation to the others, it would be the most suitable to be applied to analyze the forecasts of property values in this database.**","9d9511f2":"**Observation:**\n\n* When saving and compiling the code in Kaggle the error margins undergo small changes, but it doesn't disqualify the algorithm from best to worst.","6f59d338":"# **Regression Decision Trees**"}}