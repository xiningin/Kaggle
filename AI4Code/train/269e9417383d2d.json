{"cell_type":{"c679c86d":"code","d4a15259":"code","21c26bf2":"code","1c569198":"code","0993252d":"code","168dcaa5":"code","272cd2d8":"code","f5d64d57":"code","e4958587":"code","4e97d460":"code","597135a5":"code","98a32b46":"code","97fe461d":"code","634b61c8":"code","e45a8ba7":"code","efe8b1e9":"code","10adc84b":"code","109d82a9":"code","0b74561a":"code","d8598b89":"code","766dc13f":"code","2d3d0fcb":"code","e8db03fd":"code","6eee549f":"code","43f7a99b":"code","947bf05c":"code","9c1a8edb":"code","d0a1fa73":"code","930e9eba":"code","181d2687":"code","3e8d00c3":"code","557bf854":"code","52c67f48":"code","fcaeb028":"code","80fbad6d":"code","4522f1b8":"code","386f9124":"code","265a3b32":"code","ca5f079c":"code","ad6da0eb":"code","bd02f8f3":"code","9dee0cd9":"code","82b950b0":"code","eec60770":"code","802f5690":"code","1ec53dca":"code","42da13a2":"code","5c4d7e39":"code","8a998010":"code","5af40061":"code","ee9ca7cc":"code","1899d58c":"code","c66966ae":"code","d395e0a2":"code","a36996f5":"code","03caa440":"code","5bc3fdd9":"code","f09c216d":"code","7aeed03d":"code","6be12e46":"code","7bf94d87":"code","d2b0299a":"code","bdaafbab":"code","cb37663d":"code","6eef33b9":"code","669d8af3":"code","aa3637f1":"code","86d908fd":"code","c47c93d5":"code","06a009d3":"code","1cacf0c9":"code","891260ba":"code","91207be5":"code","06f7fde4":"code","d066cd3c":"code","af5b52a5":"code","281cfb78":"code","f1f5a969":"code","bf1f822e":"code","982f823d":"code","4715ebca":"code","d5589a40":"code","fe1b09b5":"code","87efbd93":"code","3e412430":"code","2d24269e":"code","fffc4280":"code","24707013":"code","848d3472":"code","bfb9364c":"code","8ad5c980":"code","1219230c":"code","b161fe61":"code","35f9c9aa":"markdown","d399f1c9":"markdown","cbf2ea58":"markdown","c15fe3ac":"markdown","8a5a8a09":"markdown","be727b8d":"markdown","7505e52b":"markdown","268bf291":"markdown","4204645a":"markdown","1004596f":"markdown","ad36ef81":"markdown","5e867176":"markdown","c9cd583f":"markdown","015442dc":"markdown","d2f7dfd9":"markdown","1ca33ab2":"markdown","fff34b9a":"markdown","e3e4f1a7":"markdown","ce574c3d":"markdown","d3dad96e":"markdown","ebbfe780":"markdown","8b0784b2":"markdown","184c3ba4":"markdown","221db635":"markdown","dde60637":"markdown","7417c815":"markdown","c1896f28":"markdown","8ddb2e4a":"markdown","5fb25f96":"markdown","43033854":"markdown","fb958c7d":"markdown","ad39e1ca":"markdown","f71afaa2":"markdown","29c3db86":"markdown","9fe8c498":"markdown","88416e52":"markdown","3fd98c90":"markdown","16446bc9":"markdown","42e1a341":"markdown","8ffc7df1":"markdown","8c3c5ae9":"markdown","7b747ee2":"markdown","7676b4ee":"markdown","b2c7111c":"markdown","0ed106c2":"markdown","4e9413b7":"markdown","3e8720e7":"markdown","acacf969":"markdown","63e40e54":"markdown","17ffa147":"markdown","0b95e74e":"markdown","a09f0b20":"markdown","1f9bec5e":"markdown","3161a54b":"markdown","e7c6674e":"markdown","6225b1fb":"markdown","1a0917b7":"markdown","0ba4b7f1":"markdown","12f97b7d":"markdown","0a450e01":"markdown","f1a976dc":"markdown","9a3d8187":"markdown","15eb6e9f":"markdown","2e2161bc":"markdown","a4b347b5":"markdown","3dc82019":"markdown","928baafe":"markdown","4a82a8c6":"markdown","20354d6d":"markdown","d5c11ebf":"markdown","5c8fb433":"markdown","756c51a2":"markdown","d3a6cedc":"markdown","c9501d07":"markdown","d3a2bd1d":"markdown","6877756a":"markdown","b6ba70d8":"markdown","f8aeb53a":"markdown","7727173b":"markdown","52d79a81":"markdown","2525609c":"markdown","559930db":"markdown","85fbf7fb":"markdown","f397a723":"markdown","754c437e":"markdown","a9ab7ae5":"markdown"},"source":{"c679c86d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (13,5)\n#sns.set_theme(style=\"whitegrid\", palette=\"colorblind\")\n\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n\n# \u0414\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u044f\u0447\u0435\u0439\u043a\u0430\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\nfrom ast import literal_eval\n\nimport re\n\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# MinMax \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \nfrom sklearn.preprocessing import MinMaxScaler","d4a15259":"# Let's fix the version of the packages so that the experiments are reproducible:\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","21c26bf2":"# Some PANDAS settings. \n\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u043a\u0430\u0437\u0430\npd.options.display.max_colwidth = 74\n# \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\npd.set_option('display.max_columns', None)\n\nplt.rcParams['figure.figsize'] = (13,5)","1c569198":"#DATA_DIR = 'sf-dst-restaurant-rating\/'   # for local\n\nDATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'   # for kaggle\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\n# To process traits correctly, combine train and test into one dataset\n# \u0412\u0410\u0416\u041d\u041e! \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # signing train \/ \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # signing test \/ \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\n# We don't have a Rating in the test, we have to predict it, so we just fill it with zeros for now\n# \u0412 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ndf_test['Rating'] = 0 \n\ndata = pd.DataFrame() # recreating \/ \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # combining \/ \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","0993252d":"df_train.sample(3)","168dcaa5":"# Recreating the data variable so that there is a working and a clean dataset\n# \u041f\u0435\u0440\u0435\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e data (\u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0443\u044e), \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u0438 \u0447\u0438\u0441\u0442\u043e\u0432\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndata_init = pd.DataFrame()  # \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\ndata_init = data.copy()\ndata = pd.DataFrame()\n\n# Re-filling it with the working base columns\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0435\u0435 \u0437\u0430\u043d\u043e\u0432\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u043c\u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438\n\n# Taking the feature-sign\n# \u0411\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a-\u043f\u0440\u0438\u0437\u043d\u0430\u043a \ndata['sample'] = data_init['sample']\n\n# \u0426\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0431\u0435\u0440\u0435\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c\ndata['Rating'] = data_init['Rating']\n\n\n# Take the target rating variable as is\n# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0446\u0435\u043d \u043d\u0430 \u0446\u0438\u0444\u0440\u044b \ndata['Price_Range_num'] = data_init['Price Range'].replace(to_replace={'$':1, '$$ - $$$':2, '$$$$':3})\n# \u041f\u0443\u0441\u0442\u043e\u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u043e\u0439 (\u044d\u0442\u043e \u043c\u043e\u0434\u0430 \u043f\u043e \u0432\u0441\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430\u043c)\ndata['Price_Range_num'] = data['Price_Range_num'].fillna(2)\n\n\n# As now we take the ranks as they are\n# \u041f\u043e\u043a\u0430 \u0431\u0435\u0440\u0435\u043c \u0440\u0430\u043d\u0433\u0438 \u043a\u0430\u043a \u0435\u0441\u0442\u044c\ndata['Ranking'] = data_init['Ranking']\n\n# -------------\n# number of reviews, median\n# \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\nmedian_rew = data_init['Number of Reviews'].median()\nprint(median_rew)\n\n# Voids of the number of reviews we just fill with one or median, but first we save the information about the void in a new attribute\n# \u041f\u0443\u0441\u0442\u043e\u0442\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439 \u0438\u043b\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439, \u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u043d\u0444. \u043e \u043f\u0443\u0441\u0442\u043e\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0432 \u043d\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435\ndata['Number_of_Reviews_isNAN'] = pd.isna(data_init['Number of Reviews']).astype('uint8')\ndata['Number of Reviews'] = data_init['Number of Reviews'].fillna(1)\n\n\n# deviation of number of reviews from the median\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u043e\u0431\u0437\u043e\u0440\u043e\u0432 \u043e\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0433\u043e\n#data['Reviews_Discrepancy'] = data_init['Number of Reviews'].apply(lambda x: x\/median_rew)\n\n# logarithmization\n#data_init['Number of Reviews'] = data_init['Number of Reviews'].fillna(median_rew)\n#data['number_of_reviews_log'] = np.log(data_init['Number of Reviews'] + 1)\n\n\n# Duplicated reviews: if different restaurants -- bad sign (but it doesn't improve MAE)\n\n# \u0412\u0441\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0437\u044b\u0432\u044b (\u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 \u0431\u0435\u0437 Reviews_dubls_id)\n#data['Reviews_dubls'] = data_init.Reviews.duplicated()\n\n# \u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432: \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b -- \u043f\u043b\u043e\u0445\u043e\u0439 \u0437\u043d\u0430\u043a (\u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 MAE)\n#data['Reviews_dubls_id'] = data_init.duplicated(subset=['Restaurant_id', 'Reviews'])\n# -------------\n\n# Correcting the error of duplicating a city in the source\n# \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0435\ndata_init.City = data_init.City.replace(to_replace={'Oporto': 'Porto'})\n\n# Joining cities spreading (to dummies) them\n# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430, \u0440\u0430\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044f \u0438\u0445 (to dummies)\ndata['City'] = data_init['City']\ndata = pd.get_dummies(data, columns=['City'], dummy_na=True)\n\n\n# Transforming site IDs to numeric\n# \u041f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\ndata['ID_TA'] = data_init['ID_TA'].apply(lambda x: int(x[1:]))\n\n\n# Voids (checking)\n# \u041f\u0443\u0441\u0442\u043e\u0442\u044b (\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430)\ndata.isna().sum()\n","272cd2d8":"# `Normalizing the features` by the number of restaurants in the city\n# `\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432` \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \n\n\n# `Normalizing the restaurant rank` relative to the maximum rank in the city\n# `\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430` \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u043d\u0433\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\ndata['Ranking_norm'] = data_init['Ranking'] \/ data_init['City'].map(data_init.groupby(['City'])['Ranking'].max())\n\n# Counting the `number of restaurants` in the city\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c `\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432` \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\ndata_init['rest_in_city'] = data_init.groupby('City')['Restaurant_id'].transform('count')\ndata['rest_in_city'] = data_init['rest_in_city']\n\n# Mutually `normalizing the ranks and number of restaurants` in the cities\n# \u0412\u0437\u0430\u0438\u043c\u043d\u043e `\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0440\u0430\u043d\u0433\u0438 \u0438 \u043a\u043e\u043b-\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432` \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \ndata['norm_rest_rank'] = data_init['rest_in_city']\/data_init['Ranking']\ndata['norm_rank_rest'] = data_init['Ranking']\/data_init['rest_in_city']\n\n\n# Normalizing the number of reviews relative to the maximum of those in the city\n# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\nreviews_in_city = data_init.groupby(['City'])['Number of Reviews'].max().sort_values(ascending=False).to_dict()\ndata_init['reviews_in_city'] = data_init['City'].replace(to_replace=reviews_in_city)\n\ndata['norm_rank_reviews'] = data_init['Ranking'] \/ data_init['reviews_in_city']\n# data['norm_reviews_rank'] = data_init['reviews_in_city'] \/ data_init['Ranking'] # worse MAE","f5d64d57":"# Creating a feature with the `number of restaurants in the network`.\n# (Assume economic sustainability and opportunities for development and efficiency)\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 `\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438` \n# (\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0438 \u044d\u0444\u0444\u0435\u043a\u0438\u0432\u043d\u043e\u0441\u0442\u0438)\n\n# \u0421\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a {'Restaurant_id':count}\nid_count = data_init.Restaurant_id.value_counts().to_dict()\ndata['Rest_id_count'] = data_init.Restaurant_id.replace(to_replace=id_count)\n\n\n# Create a feature to show that the `price was not specified`\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u0447\u0442\u043e `\u0446\u0435\u043d\u0430 \u0431\u044b\u043b\u0430 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430`\ndata['Price_Range_nan'] = pd.isna(data_init['Price Range']).astype('uint8')\n\n\n# Trying to create `polynomial features` and choose the best\n# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c `\u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438` \u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0435\u0435\npf = PolynomialFeatures(2)\npoly_features = pf.fit_transform(data_init[['rest_in_city', 'Ranking','Number of Reviews']].fillna(1))\npoly_frame = pd.DataFrame(poly_features, columns=['c1','c2','c3','c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10'])\ndata = pd.concat([data, poly_frame['c9']], axis=1)","e4958587":"# Creating countries\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u044b\ncity_state = {\n    'London': 'United Kingdom',\n    'Paris': 'France',\n    'Madrid': 'Spain',\n    'Barcelona': 'Spain',\n    'Berlin': 'Germany',\n    'Milan': 'Italy',\n    'Rome': 'Italy',\n    'Prague': 'Czech',\n    'Lisbon': 'Portugal',\n    'Vienna': 'Austria',\n    'Amsterdam': 'Netherlands',\n    'Brussels': 'Belgium',\n    'Hamburg': 'Germany',\n    'Munich': 'Germany',\n    'Lyon': 'France',\n    'Stockholm': 'Sweden',\n    'Budapest': 'Hungary',\n    'Warsaw': 'Poland',\n    'Dublin': 'Ireland' ,\n    'Copenhagen': 'Denmark',\n    'Athens': 'Greece',\n    'Edinburgh': 'Schotland',\n    'Zurich': 'Switzerland',\n    'Porto': 'Portugal',\n    'Oporto': 'Portugal',\n    'Geneva': 'Switzerland',\n    'Krakow': 'Poland',\n    'Oslo': 'Norway',\n    'Helsinki': 'Finland',\n    'Bratislava': 'Slovakia',\n    'Luxembourg': 'Luxembourg',\n    'Ljubljana': 'Slovenija'\n}\n\n# Replacing cities with countries\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u044b\ndata_init['state'] = data_init['City'].map(city_state)","4e97d460":"# Network representation (number of Restaurant_id):  \n# -- FEATURE IS NOT REQUIRED, number of Restaurant_id, cities and states are EQUAL!\n\n# \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0442\u0438 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443 Restaurant_id):  \n# -- \u041f\u0420\u0418\u0417\u041d\u0410\u041a \u041d\u0415 \u0422\u0420\u0415\u0411\u0423\u0415\u0422\u0421\u042f, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e Restaurant_id, \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432 \u0421\u041e\u0412\u041f\u0410\u0414\u0410\u042e\u0422!\n\n\n# Transferring (for convenience) the previously created feature\n# \u041f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c (\u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430) \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u043d\u0435\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata_init['Rest_id_count'] = data['Rest_id_count']\n\n#  \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \/ cities\nid_city_count = data_init.groupby(['Restaurant_id'])['City'].count().to_dict()\ndata_init['id_city_count'] = data_init.Restaurant_id.replace(to_replace=id_city_count)\n\n\n#  \u0441\u0442\u0440\u0430\u043d \/ countries\nid_state_count = data_init.groupby(['Restaurant_id'])['state'].count().to_dict()\ndata_init['id_state_count'] = data_init.Restaurant_id.replace(to_replace=id_state_count)\n\n\n# \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0441\u0442\u0440\u0430\u043d\u0435 \u0438 \u043c\u0438\u0440\u0435!\n# # Almost all sample restaurants have 1 restaurant each in the city, country, and world!\ndata_init[['Rest_id_count', 'id_city_count', 'id_state_count']].duplicated().value_counts()","597135a5":"# Creating GDP per capita (2018 year) dictionary (thanks to World Databank)\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0412\u0412\u041f \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430 2018 (\u043e\u0442 World Databank)\ngdp_pc_2018 = {\n    'United Kingdom': 45973.5735,\n    'France': 45342.39574,\n    'Spain': 39715.43906,\n    'Germany': 53074.54012,\n    'Italy': 41830.42633,\n    'Czech': 39743.59709,\n    'Portugal': 33415.4379,\n    'Austria': 55454.68929,\n    'Netherlands': 56328.94114,\n    'Belgium': 51407.99834,\n    'Sweden': 53208.88436,\n    'Hungary': 31102.50275,\n    'Poland': 31336.6035,\n    'Ireland': 83203.39468,\n    'Denmark': 55671.16527,\n    'Greece': 55671.16527,\n    'Schotland': 45973.5735,\n    'Switzerland': 68060.94105,\n    'Portugal': 33415.4379,\n    'Norway': 65510.58527,\n    'Finland': 48416.93603,\n    'Slovakia': 19364.62,\n    'Luxembourg': 113337.4205,\n    'Slovenija': 26104.103\n}","98a32b46":"# Replacing countries with GDP\n# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0412\u0412\u041f\ndata_init['GDP'] = data_init['state'].map(gdp_pc_2018)\n#data['GDP'] = data_init['GDP']\n#data['GDP']#.value_counts()  #data_init","97fe461d":"# Filling the emptiness in the kitchens\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u043e\u0442\u0443 \u043d\u0430 \u043a\u0443\u0445\u043d\u044f\u0445\ndata_init['Cuisine Style'] = data_init['Cuisine Style'].fillna(\"['Unknown']\")  # \"['Unknown']\"\n\n# Converting string in the column into a list\n# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\ndata_init['Cuisine Style'] = data_init['Cuisine Style'].apply(\n    lambda x: eval(x))  # transforming to a list\n\n# Number of restaurant's Cuisines \n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndata['Cuisine_num'] = data_init['Cuisine Style'].apply(lambda x: len(x))\n\n# Creating columns for each kitchen\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0443\u0445\u043d\u0438\nCuisines_dum = pd.get_dummies(data_init['Cuisine Style'].explode()).reset_index().groupby('index').sum()\n\n# Joining to data\n# \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a data\ndata = pd.concat([data, Cuisines_dum], axis = 1)","634b61c8":"# Creating a feature showing how popular (in the city) cuisines each restaurant uses.\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u043a\u0443\u0445\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d.\n\n# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 (City_Cuisines_norm) \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445.\n# (\u043e\u043d\u0430 \u0441\u0430\u043c\u0430 \u043f\u043e \u0441\u0435\u0431\u0435 \u0434\u043e\u0432\u043e\u043b\u043d\u043e \u0438\u043d\u0442\u0440\u0435\u0441\u043d\u0430)\n\n\n# \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u043c (explode) \u043a\u0443\u0445\u043d\u0438 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438,\n# \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0438\u0445 \u043a \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c (\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 DF)\n# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0433\u043e\u0440\u043e\u0434\u0430\u0445\nCuisines_expl = pd.get_dummies(data_init['Cuisine Style'].explode())\nCity_Cuisines_dum = pd.concat([data_init['City'], Cuisines_expl], axis = 1).groupby(\"City\").sum()\nCity_Cuisines_dum.style.background_gradient(cmap=\"Blues\", axis=1)\n\n\n# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443, \u043f\u0435\u0440\u0435\u0432\u0435\u0440\u043d\u0443\u0432 (\u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f)\nCity_Cuisines_scaler = MinMaxScaler()\nCity_Cuisines_norm = pd.DataFrame(data=City_Cuisines_scaler.fit_transform(City_Cuisines_dum.T),\n                               index=City_Cuisines_dum.columns,\n                               columns=City_Cuisines_dum.index)\n# City_Cuisines_norm.style.background_gradient(cmap=\"Blues\", axis=1)\n\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c (exploded) \u043a\u0443\u0445\u043d\u0438\nCityCuisines_expl = data_init.explode('Cuisine Style')[['City', 'Cuisine Style']]\n\n# \u0418 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b City_Cuisines_norm.\nCityCuisines_rank = pd.DataFrame()\nfor city in data_init.City.unique():\n    CityCuisines_rank = CityCuisines_rank.append(CityCuisines_expl[CityCuisines_expl.City == city].replace(to_replace=City_Cuisines_norm[city].to_dict()))\n\n\n# \u0412 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u0441\u043a\u043e\u043c\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u044f \u0435\u0433\u043e \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043a\u043e\u0445\u043e\u043d\u044c \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\ndata['CityCuisines_rank'] = CityCuisines_rank['Cuisine Style'].reset_index().groupby('index').sum()\ndata['CityCuisines_rank'] = data['CityCuisines_rank'] \/ data['Cuisine_num']\ndata['CityCuisines_rank'][:2]","e45a8ba7":"# create a template for search\nlrx = re.compile('\\[\\[.*\\]\\]')\nnan = None\n\n\ndef review_extraction(row):\n    '''Function is called for extracting data from column \n    reviews and splitting it out into a separate columns\n    INPUT: Whole dataset\n    OUTPUT: Dataset with additional columns'''\n\n    cell = row['Reviews']    # TYPE here your COLUMN\n    aux_list = [[], []]  # create an auxilliary list for saving temp.data\n    if type(cell) == str and lrx.fullmatch(cell):  # compare with searech template\n        aux_list = eval(cell)  # transform into a list\n\n    row['first_review'] = aux_list[0][1] if len(aux_list[0]) > 1 else nan\n    row['last_review'] = aux_list[0][0] if len(aux_list[0]) > 0 else nan\n\n    row['first_date'] = pd.to_datetime(\n        aux_list[1][1] if len(aux_list[1]) > 1 else nan)\n    row['last_date'] = pd.to_datetime(aux_list[1][0] if len(\n        aux_list[1]) > 0 else nan, format='%m\/%d\/%Y', errors='coerce')\n\n    row['first_date'] = pd.to_datetime(row['first_date'])\n    row['last_date'] = pd.to_datetime(row['last_date'])\n\n    return row\n\n\n# apply the function to dataset and see the result\ndata_init = data_init.apply(review_extraction, axis=1)\ndata_init.sample(3)","efe8b1e9":"# Counting the difference in days between reviews (correcting the negative difference), filling in the blanks with mode\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 (\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044f \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443), \u043f\u0443\u0441\u0442\u043e\u0442\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u043e\u0434\u043e\u0439\ndata['rev_date_diff'] = abs(data_init['last_date'] - data_init['first_date']).apply(lambda x: x.days).fillna(1)\n#sns.boxplot(data['rev_date_diff'].values)","10adc84b":"# \u0423\u0445\u0443\u0434\u0448\u0430\u0435\u0442 MAE (\u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e)\n# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442 \u0434\u0430\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n#data['rev_date_last'] = (data_init['last_date'].max() - data_init['last_date']).apply(lambda x: x.days).fillna(2)\n#sns.boxplot(data['rev_date_diff'].values)\n\n# \u0423\u0445\u0443\u0434\u0448\u0430\u0435\u0442 MAE\n#data['Review_1_exists'] = data_init['first_date'].notnull()\n#data['Review_2_exists'] = data_init['last_date'].notnull()","109d82a9":"# \u0438\u0449\u0435\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u0441\u044b\ndef outliers_iqr(ys):\n    quartile_1, quartile_3 = np.percentile(ys, [25, 75])\n    iqr = quartile_3 - quartile_1\n    lower_bound = quartile_1 - (iqr * 1.5)\n    upper_bound = quartile_3 + (iqr * 1.5)\n    return np.where((ys > upper_bound) | (ys < lower_bound))[0]\n\no = pd.DataFrame()\n","0b74561a":"# Ranking  -- \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442 MAE\n# o = outliers_iqr(data_init['Ranking'].dropna())\n# data['Ranking'][o] = data_init['Ranking'].mode()[0]\n","d8598b89":"# Number of Reviews   -- \u043d\u0435 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 MAE\n# according to the boxplot it seems that values higher than 5000 are real outliers\n# will replace higher values by 5000\n# data['Number of Reviews'] = data['Number of Reviews'].apply(lambda x: np.random.randint(300, 500) if x > 500 else x)","766dc13f":"# Let's leave only those cuisines that are more `than 30% popular in top-10 cities`\n# \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u043a\u0443\u0445\u043d\u0438, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0445 `\u0432\u044b\u0448\u0435 30% \u0432 top-10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432`\nCity_Cuisines_top = pd.DataFrame()\nfor city in City_Cuisines_norm.sum().sort_values(ascending=False)[:10].index:\n    City_Cuisines_top[city] = City_Cuisines_norm[City_Cuisines_norm[city] > 0.3][city]\n\nCity_Cuisines_top.index.to_list()","2d3d0fcb":"Cuisines_to_drop = [city for city in City_Cuisines_norm.index.to_list() if city not in City_Cuisines_top.index.to_list()]","e8db03fd":"df_preproc = data #.drop(columns=Cuisines_to_drop)\ndf_preproc.sample(3)","6eee549f":"#df_preproc.info()\n","43f7a99b":"#df_preproc.describe()\n","947bf05c":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)\n# X_test, y_test -- \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n\n# MinMax \u043e\u0431\u0449\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f (\u043e\u0431\u044b\u0447\u043d\u043e \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442)\ntrain_scaler = MinMaxScaler()\n#X = train_scaler.fit_transform(X)\n\n\n\n# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42\n\n\n# X_test, y_test -- \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape\n\n# ((10000, 35), (40000, 35), (40000, 34), (32000, 34), (8000, 34))","9c1a8edb":"# Importing The Crystall Ball\n# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n\n\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","d0a1fa73":"# We can observe that the ratings always increment by range of 0.5\n# So there's a function that makes it most precise the real values\n# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u044b\u043c\u0438, \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0432 \u0438\u0445 \u0434\u043e \u043a\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u0448\u0430\u0433\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 0.5\ndef round_rating_pred(rating_pred):\n    if rating_pred <= 0.5:\n        return 0.0\n    if rating_pred <= 1.5:\n        return 1.0\n    if rating_pred <= 1.75:\n        return 1.5\n    if rating_pred <= 2.25:\n        return 2.0\n    if rating_pred <= 2.75:\n        return 2.5\n    if rating_pred <= 3.25:\n        return 3.0\n    if rating_pred <= 3.75:\n        return 3.5\n    if rating_pred <= 4.25:\n        return 4.0\n    if rating_pred <= 4.75:\n        return 4.5\n    return 5.0\n\n\n#for i in range(len(y_pred)):\n#    y_pred[i] = round_rating_pred(y_pred[i])\n    \ny_pred = np.array([round_rating_pred(x) for x in y_pred])\n","930e9eba":"# The moment of truth\n# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","181d2687":"# Let's see the most important features\n# \u0412 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(20).plot(kind='barh')","3e8d00c3":"# Beneficial Features for MAE\n# \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nfeatures_eff = pd.Series({'norm_rank': 0.0022,\n    'Rest_id_count': 0.0001,\n    'rest_in_city': 0.0011,\n    'Price_Range_nan': 0.0009,\n    'Cousines': 0.0051,\n    'Polynomial': 0.0021,\n    'Cuisine_num': 0.0005,\n    'CityCuisines_rank': 0.0003,\n    'norm_rank_reviews': 0.0009,\n    'round y_pred': 0.0279,\n    'ID_TA': 0.0096,\n    'rev_date_diff': 0.0025,\n    'GDP': 0.0022,                         \n    'rev_date_last': -0.0002,\n    'train_scaler': 0.0003}).T.sort_values()\n\nplt.rcParams['figure.figsize'] = (13,5)\nfeatures_eff.plot(kind='barh', title='Beneficial Features for MAE \/ \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438')","557bf854":"# Checking the order of the lines\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0440\u043e\u043a (\u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 EDA)\ndisplay(df_test.head(5), test_data.head(5))","52c67f48":"df_train.Rating.value_counts()","fcaeb028":"sns.boxplot(df_train.Rating.values)","80fbad6d":"df_train.sample(3)","4522f1b8":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\ndf_train.iloc[4]","386f9124":"# \u041e\u0442\u0437\u044b\u0432 \u043e \u043d\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\ndf_train.Reviews[4]","265a3b32":"# \u0410\u0434\u0440\u0435\u0441 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435\n# https:\/\/www.tripadvisor.ru\/Restaurant_Review-g274924-d1112354-Reviews-Massimo_Ristorante-Bratislava_Bratislava_Region.html\n# \u042d\u0442\u043e Augustiner Sch\u00fctzengarten \u0438\u0437 \u041c\u044e\u043d\u0445\u0435\u043d\u0430\n\nprint('https:\/\/www.tripadvisor.ru' + df_train.URL_TA[4])","ca5f079c":"# \u0421\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e \u0435\u0435 \u043e\u0442\u0447\u0435\u0442\u0443)\nfeat_importances.nlargest(20).plot(kind='barh')","ad6da0eb":"# \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435)\nfeatures_eff.plot(kind='barh', title='Beneficial Features for MAE \/ \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438')","bd02f8f3":"data_init.groupby(['City'])['Rating'].mean().sort_values(ascending=False)[:10].plot(kind='barh')","9dee0cd9":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndata_init['GDP'][data_init['Rating'] == 5].hist(bins=100)","82b950b0":"data_init['GDP'][data_init['Rating'] == 3].hist(bins=100)","eec60770":"# \u041a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0412\u0412\u041f \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?\nsns.jointplot(data=data_init, x=\"Rating\", y=\"GDP\", kind=\"reg\")","802f5690":"# \u042d\u0442\u043e \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u0440\u0430\u043d\u0433\u0443\nfor x in (data_init['City'].value_counts())[0:10].index:\n    data_init['Ranking'][data_init['City'] == x].hist(bins=100)\nplt.show()","1ec53dca":"# \u0422\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0440\u0430\u043d\u0433\u0443 \nfor x in (data_init['City'].value_counts())[0:10].index:\n    data['Ranking_norm'][data_init['City'] == x].hist(bins=100)\nplt.show()","42da13a2":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndf_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","5c4d7e39":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 3 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndf_train['Ranking'][df_train['Rating'] == 3].hist(bins=100)","8a998010":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043a\u0430\u043a\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u043d\u0430\u0441 \u0438\u043c\u0435\u0435\u0442\u0441\u044f (top-50):\ndata_init['Number of Reviews'].value_counts()[:50].plot(kind='bar')","5af40061":"# \u041a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?\nsns.jointplot(data=df_train, x=\"Rating\", y=\"Number of Reviews\", kind=\"reg\")","ee9ca7cc":"data.rev_date_diff.value_counts()[:5].plot(kind='bar')","1899d58c":"print('Total duplicates: ', data_init.Reviews.duplicated().sum())\nprint('Intra-network duplicates: ', data_init.duplicated(subset=['Restaurant_id', 'Reviews']).sum())","c66966ae":"# Top-10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u0441\u0430\u043c\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439\n# City_Cuisines_top.fillna(0).style.background_gradient(cmap=\"YlOrBr\", axis=1) # -- \u0447\u0443\u0442\u044c \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443...\nsns.heatmap(City_Cuisines_top, annot = True, cmap='YlOrBr')","d395e0a2":"data['CityCuisines_rank'].hist(bins=50)","a36996f5":"features_eff.sort_values(ascending=False)[:5].plot(kind='barh')","03caa440":"# Number of restaurants in the networks\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u044f\u0445\n# data_init.Restaurant_id.hist(bins=100) # long time...","5bc3fdd9":"# We find a large number of doubles! How many are there!?\n# \u041c\u044b \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0435\u0439! \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0438\u0445!?\ndata_init[['Rest_id_count', 'id_city_count', 'id_state_count']].sample(10)","f09c216d":"# \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0441\u0442\u0440\u0430\u043d\u0435 \u0438 \u043c\u0438\u0440\u0435! \u0412\u043e\u0442 \u0442\u0430\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430!\n# Almost all sample restaurants have 1 restaurant each in the city, country, and world! Such a selection!\ndata_init[['Rest_id_count', 'id_city_count', 'id_state_count']].duplicated().value_counts()","7aeed03d":"df_train.Rating.value_counts()","6be12e46":"sns.boxplot(df_train.Rating.values)","7bf94d87":"df_train.sample(3)","d2b0299a":"# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\ndf_train.iloc[4]","bdaafbab":"# \u041e\u0442\u0437\u044b\u0432 \u043e \u043d\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\ndf_train.Reviews[4]","cb37663d":"# \u0410\u0434\u0440\u0435\u0441 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435\n# https:\/\/www.tripadvisor.ru\/Restaurant_Review-g274924-d1112354-Reviews-Massimo_Ristorante-Bratislava_Bratislava_Region.html\n# \u042d\u0442\u043e Augustiner Sch\u00fctzengarten \u0438\u0437 \u041c\u044e\u043d\u0445\u0435\u043d\u0430\n\nprint('https:\/\/www.tripadvisor.ru' + df_train.URL_TA[4])","6eef33b9":"# \u0421\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e \u0435\u0435 \u043e\u0442\u0447\u0435\u0442\u0443)\nfeat_importances.nlargest(20).plot(kind='barh')","669d8af3":"# \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435)\nfeatures_eff.plot(kind='barh', title='Beneficial Features for MAE \/ \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438')","aa3637f1":"data_init.groupby(['City'])['Rating'].mean().sort_values(ascending=False)[:10].plot(kind='barh')","86d908fd":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndata_init['GDP'][data_init['Rating'] == 5].hist(bins=100)","c47c93d5":"data_init['GDP'][data_init['Rating'] == 3].hist(bins=100)","06a009d3":"# \u041a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0412\u0412\u041f \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?\nsns.jointplot(data=data_init, x=\"Rating\", y=\"GDP\", kind=\"reg\")","1cacf0c9":"# \u042d\u0442\u043e \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u0440\u0430\u043d\u0433\u0443\nfor x in (data_init['City'].value_counts())[0:10].index:\n    data_init['Ranking'][data_init['City'] == x].hist(bins=100)\nplt.show()","891260ba":"# \u0422\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u043c\u0443 \u0440\u0430\u043d\u0433\u0443 \nfor x in (data_init['City'].value_counts())[0:10].index:\n    data['Ranking_norm'][data_init['City'] == x].hist(bins=100)\nplt.show()","91207be5":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndf_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","06f7fde4":"# \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 3 (\u043f\u043e \u043e\u0441\u0438 X -- \u0420\u0430\u043d\u0433, \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e)\ndf_train['Ranking'][df_train['Rating'] == 3].hist(bins=100)","d066cd3c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043a\u0430\u043a\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u043d\u0430\u0441 \u0438\u043c\u0435\u0435\u0442\u0441\u044f (top-50):\ndata_init['Number of Reviews'].value_counts()[:50].plot(kind='bar')","af5b52a5":"# \u041a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?\nsns.jointplot(data=df_train, x=\"Rating\", y=\"Number of Reviews\") #, kind=\"reg\"","281cfb78":"data.rev_date_diff.value_counts()[:5].plot(kind='bar')","f1f5a969":"print('\u0412\u0441\u0435\u0433\u043e \u0434\u0443\u0431\u043b\u0435\u0439: ', data_init.Reviews.duplicated().sum())\nprint('\u0414\u0443\u0431\u043b\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0442\u0438: ', data_init.duplicated(subset=['Restaurant_id', 'Reviews']).sum())","bf1f822e":"# Top-10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u0441\u0430\u043c\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439\n# City_Cuisines_top.fillna(0).style.background_gradient(cmap=\"YlOrBr\", axis=1) # -- \u0447\u0443\u0442\u044c \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443...\nsns.heatmap(City_Cuisines_top, annot = True, cmap='YlOrBr')","982f823d":"data['CityCuisines_rank'].hist(bins=50)","4715ebca":"features_eff.sort_values(ascending=False)[:5].plot(kind='barh')","d5589a40":"# Number of restaurants in the networks\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u044f\u0445\n# data_init.Restaurant_id.hist(bins=100) # \u0434\u043e\u043b\u0433\u043e","fe1b09b5":"# We find a large number of doubles! How many are there!?\n# \u041c\u044b \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0435\u0439! \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0438\u0445!?\ndata_init[['Rest_id_count', 'id_city_count', 'id_state_count']].sample(10)","87efbd93":"# \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0441\u0442\u0440\u0430\u043d\u0435 \u0438 \u043c\u0438\u0440\u0435! \u0412\u043e\u0442 \u0442\u0430\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430!\n# Almost all sample restaurants have 1 restaurant each in the city, country, and world! Such a selection!\ndata_init[['Rest_id_count', 'id_city_count', 'id_state_count']].duplicated().value_counts()","3e412430":"City_Cuisines_norm.style.background_gradient(cmap=\"YlOrBr\", axis=1)","2d24269e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0440\u043e\u043a (\u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 EDA)\ntest_data.head(10)","fffc4280":"test_data = test_data.drop(['Rating'], axis=1)","24707013":"sample_submission","848d3472":"predict_submission = model.predict(test_data)","bfb9364c":"predict_submission","8ad5c980":"# Round\n#for i in range(len(predict_submission)):\n#    predict_submission[i] = round_rating_pred(predict_submission[i])\n\npredict_submission = np.array([round_rating_pred(x) for x in predict_submission])\n","1219230c":"predict_submission","b161fe61":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","35f9c9aa":"#### \u0412\u043e\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 c \u0441\u0430\u043c\u044b\u043c \u043b\u0443\u0447\u0448\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (top-10):\n> \u043c\u043e\u0436\u043d\u043e \u0435\u0445\u0430\u0442\u044c!","d399f1c9":"#### \u0414\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\n> \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 -- \u043f\u043b\u043e\u0445\u043e\u0439 \u0437\u043d\u0430\u043a!\n\n- \u0412\u0441\u0435\u0433\u043e \u0434\u0443\u0431\u043b\u0435\u0439:  6484\n- \u0414\u0443\u0431\u043b\u0435\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0435\u0442\u0438:  1630\n- \u0410 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0442\u043e, **\u0432\u043e\u0440\u0443\u044e\u0442 \u043e\u0442\u0437\u044b\u0432\u044b**?\n- \u0418 \u0432\u0435\u0434\u044c \u044d\u0442\u043e **20% \u0432\u044b\u0431\u043e\u0440\u043a\u0438**!\n\n**\u0410 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e!**\n","cbf2ea58":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.3.2\"><\/a> \n### City: Welfare (GDP per capita) \n#### \u0411\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0412\u0412\u041f \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f)","c15fe3ac":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.4\"><\/a>\n## Reviews: \u041f\u0430\u0440\u043e\u0447\u043a\u0430 \u041e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\n#### \u041a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b: \u0447\u0442\u043e \u043d\u0430\u043c \u043c\u043e\u0433\u0443\u0442 \u0434\u0430\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435?\n> \u0410 \u043a\u043e\u0435-\u0447\u0442\u043e \u0441\u043c\u043e\u0433\u043b\u0438!\n\n- \u0423\u0434\u0430\u043b\u043e\u0441\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c **\u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u0430\u043c\u0438** \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n- \u0418 \u044d\u0442\u043e \u043d\u0430\u043c \u0434\u0430\u043b\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438!\n\n> \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e **\u043e\u0442\u0432\u0435\u0442\u043d\u0430\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439**, \u043a\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0441\u0438\u043b\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u044f, \u0432\u0430\u0436\u0435\u043d \u0434\u043b\u044f Trip Advisor. \n\n> \u0418 \u0432 \u044d\u0442\u043e\u043c \u043e\u043d\u0438 \u043f\u0440\u0430\u0432\u044b: \u0443\u043c\u0435\u043d\u0438\u0435 \u0443\u0434\u0438\u0432\u0438\u0442\u044c -- \u0432\u0430\u0436\u043d\u0430\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u043d\u0442\u043d\u043e\u0439 \u0431\u043e\u0440\u044c\u0431\u044b, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 \u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0430, \u0442\u0430\u043a \u0438 \u043e\u0442\u0440\u0430\u0441\u043b\u0438 \u0432\u0446\u0435\u043b\u043e\u043c.\n\n**\u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 (\u043f\u0440\u044f\u043c\u043e \u0440\u0430\u0437\u0434\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0435\u0435) \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u0432 1 (\u043f\u0440\u043e\u043f\u0438\u0441\u044c\u044e: \"\u043e\u0434\u0438\u043d\") \u0434\u0435\u043d\u044c!**\n> \u0418 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443 \u044d\u0442\u043e \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f!","8a5a8a09":"### Let's see a random restaurant\n- Review for it in full\n- Website address\n> This is the Augustiner Sch\u00fctzengarten from Munich","be727b8d":"----------------------","7505e52b":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec2\"><\/a>\n## Final Cut\n#### \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043d\u0430\u0440\u0435\u0437\u043a\u0430","268bf291":"#### Let's look at the distribution of Rank relative to Rating\n- On average, restaurants with a rating of 5 have a higher rank than\n- Restaurants with a rating of 3, which also indicates the power of this attribute","4204645a":"<a id=\"sec1\"><\/a>\n# Features that work\n### \u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442","1004596f":"#### \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","ad36ef81":"<img src=\"https:\/\/4.bp.blogspot.com\/_15hf9pFgwks\/S0Tx2j4jl3I\/AAAAAAAAAWo\/0YQwpN51z5E\/s320\/Fig+2-1+Fortune+teller.jpg\" width=\"400px\">","5e867176":"<a id=\"sec5.2.7.2\"><\/a>\n#### \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0431\u044b\u043b\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0435\u0442\u0438 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0432:\n * \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n * \u0432 \u0441\u0442\u0440\u0430\u043d\u0435 \n * \u0438 \u0432 \u043c\u0438\u0440\u0435\n \n(\u0432\u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f [\u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#sec1.3.1))\n\n#### \u041d\u041e:\n> \u041c\u044b \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0432\u0430\u0435\u043c **\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0443\u0431\u043b\u0435\u0439**! \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0438\u0445!?\n","c9cd583f":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.6\"><\/a>\n## ID_TA: \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 Trip Advisor\n#### \u0422\u0430\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432 \u0441\u0432\u043e\u0435\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n> **\u041e\u043d \u043f\u0440\u043e\u0441\u0442\u043e -- \u0432\u043b\u0438\u044f\u0435\u0442...**\n","015442dc":"#### \u041a\u0430\u043a \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432?\n- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 4 \u0438 4,5!\n- \u042d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e **\u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442 10000** \u0448\u0442\u0443\u043a!\n- *\u0422\u0440\u0443\u0434\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u043e\u0442\u0442\u0437\u044b\u0432\u044b \u043d\u0435 \u043d\u0430\u043a\u0440\u0443\u0447\u0435\u043d\u044b...*\n- **\u0418, \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \"\u043d\u0435 \u0434\u0443\u043c\u0430\u0435\u0442\" \u043e\u0431 \u044d\u0442\u043e\u043c!**\n> \u0412\u0435\u0434\u044c **\u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c** \u0442\u0430\u043a\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 (\u043a\u0430\u043a \"\u0432\u044b\u0431\u0440\u043e\u0441\u044b\") \u043d\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b, **\u043d\u0435 \u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**...","d2f7dfd9":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"#sec1.1\"><\/a>\n## Making it machine-readable (basicly) and filling in the blanks\n#### \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0432\u0438\u0434 (\u0431\u0430\u0437\u043e\u0432\u043e) \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u043e\u0442\u044b","1ca33ab2":"-----------------","fff34b9a":"**Number of restaurants in the networks**\n\n![sec4.2.7 number of restaurants in the networks.png](attachment:4153740c-ff7e-4cfc-8e7b-7e13925d95ed.png)","e3e4f1a7":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.4\"><\/a>\n## Reviews: A couple of them for the Restaurant\n#### It would seem: what can we get from just two reviews?\n> But we did!\n\n- We were able to distinguish **the difference between the dates** of these reviews\n- And that gave us a **significant increase** in the quality of the model's work!\n\n> This means that **response from the visitors**, as a measure of the strength of the impression made, is important to Trip Advisor. \n\n> They're right: being able to surprise is an important part of competitiveness and, therefore, the development of both the business and the industry.\n\n**However, the overwhelming (downright crushing) majority of the reviews are written 1 (\"one\") day apart!**\n> **And the rating likes it!**","ce574c3d":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.3\"><\/a>\n## Number of reviews on the restaurant\n","d3dad96e":"# We go straight to the point!\n## \u0418 \u0441\u0440\u0430\u0437\u0443 \u043a \u0434\u0435\u043b\u0443!","ebbfe780":"#### What features do we have initially:\n* City \n* Cuisine Style\n* Ranking: The restaurant's rank in relation to other restaurants in the city\n* Price Range: Restaurant prices in 3 categories\n* Number of Reviews\n* Reviews: Last 2 reviews and dates of reviews\n* URL_TA: The restaurant's page on 'www.tripadvisor.com'. \n* ID_TA: TripAdvisor restaurant ID\n* Rating: Rating of the restaurant","8b0784b2":"<a id=\"sec5.1\"><\/a>\n## \u041d\u0435\u0443\u043b\u043e\u0432\u0438\u043c\u044b\u0439 \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u0435\u0433\u043e \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435\n\u0418\u0442\u0430\u043a, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b -- \n> \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c, **\u0447\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433** \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0435 'www.tripadvisor.com' \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u041c\u041e **\u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c** \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\n\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448\u0443 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435, **\u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f**:\n - \u043e\u0431\u0449\u0438\u0439 \u0440\u0430\u0437\u043c\u0430\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 1 \u0434\u043e 5 \u0441 \u0448\u0430\u0433\u043e\u043c 0,5\n - \u0441\u0435\u0440\u0435\u0434\u0438\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u044b \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 4\n - \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0430 \u043e\u0442 3,5 \u0434\u043e 4,5\n - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u043e\u0436\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u043f\u0440\u043e\u0441\u0442\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u043e\u0442 2 \u0434\u043e 5\n - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a 1,5 \u0438 1\n \n**\u0412\u043e\u0431\u0449\u0435\u043c, \u043a\u0430\u043a \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u0448\u043a\u043e\u043b\u0435 \u0443 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430!**","184c3ba4":"<a id=\"sec0\"><\/a>\n## [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n0. [Before we start \/ \u041d\u0430 \u0441\u0442\u0430\u0440\u0442!](#sec0.1)\n    * [0.1  Importing dependencies and doing setups \/ \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0438\u044f](#sec0.1)\n    * [0.2  DATA loading \/ \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u0441\u044f \u043f\u043e \u043f\u043e\u043b\u043d\u043e\u0439!](#sec0.2)\n\n\n1. [Features that work \/ \u041f\u0443\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442](#sec1)\n    * [1.1  Making it machine-readable (basicly) \/ \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0432\u0438\u0434 (\u0431\u0430\u0437\u043e\u0432\u043e)](#sec1)\n    * [1.2  Normalizing some features \/ \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043a\u043e\u0435-\u0447\u0442\u043e](#sec1.2)\n    * [1.3  Creating some features \/ \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0435-\u0447\u0442\u043e](#sec1.3)\n        * [1.3.1  Rest_id_count: extra research \/ \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f](#sec1.3.1)\n        * [1.3.2  City: Welfare \/ \u0411\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435](#sec1.3.2)\n    * [1.4  Working with Cuisine Styles \/ \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c c \u041a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u043c\u0438 \u0421\u0442\u0438\u043b\u044f\u043c\u0438](#sec1.4)\n    * [1.5  Working with Reviews \/ \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c c \u041e\u0442\u0437\u044b\u0432\u0430\u043c\u0438](#sec1.5)\n    * [1.6  Searching for Outliners \/ \u0418\u0449\u0435\u043c \u0412\u044b\u0431\u0440\u043e\u0441\u044b](#sec1.6)\n\n    * [1.7  Preparing the junk to drop \/ \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0431\u0430\u043b\u0430\u0441\u0442](#sec1.7)\n\n\n2. [Final Cut \/ \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043d\u0430\u0440\u0435\u0437\u043a\u0430](#sec2)\n\n\n3. [MODELING and testing \/ \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430](#sec3)\n    * **[3.1  The most effective features \/ \u0421\u0430\u043c\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438](#sec3.1)**\n\n\n4. [Little bit of ANALYTICS \/ (\u0440\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 -- \u043d\u0438\u0436\u0435)](#sec4)   \n    * [4.1  The Elusive Rating and it's entourage](#sec4.1)     \n    * [4.2  What are the Rating's friends](#sec4.2)          \n        * [4.2.1  City](#sec4.2.1)\n        * [4.2.2  Ranking: Restaurant rank in the city](#sec4.2.2)\n        * [4.2.3  Number of Reviews](#sec4.2.3)\n        * [4.2.4  Reviews: A couple of reviews for the restaurant](#sec4.2.4)\n        * [4.2.5  Cuisine Style](#sec4.2.5)\n        * [4.2.6  ID_TA: Trip Advisor restaurant ID](#sec4.2.6)\n        * [4.2.7  Restaurant_id \u2014 Restaurant \/ restaurant chain identification number](#sec4.2.7)\n        * [4.2.10  Popularity of culinary styles in each city](#sec4.2.10)\n\n   \n    \n5. [\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 \/ (English version of anaytics is upper)](#sec5) \n\n    * [5.1  \u041d\u0435\u0443\u043b\u043e\u0432\u0438\u043c\u044b\u0439 \u0420\u0435\u0439\u0442\u0438\u043d\u0433](#sec5.1)\n    \n    * [5.2  \u0421 \u0447\u0435\u043c \u0434\u0440\u0443\u0436\u0438\u0442 \u0420\u0435\u0439\u0442\u0438\u043d\u0433](#sec5.2)          \n        * [5.2.1  City: \u0413\u043e\u0440\u043e\u0434](#sec5.2.1)\n        * [5.2.2  Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435](#sec5.2.2)\n        * [5.2.3  Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435](#sec5.2.3)\n        * [5.2.4  Reviews: \u041f\u0430\u0440\u043e\u0447\u043a\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435](#sec5.2.4)\n        * [5.2.5  Cuisine Style: \u041a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0438 (\u043a\u0443\u0445\u043d\u0438)](#sec5.2.5)\n        * [5.2.6  ID_TA: \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 Trip Advisor](#sec5.2.6)\n        * [5.2.7  Restaurant_id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432](#sec5.2.7)\n        * [5.2.10  \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435](#sec5.2.10)\n\n\n6. [Submission](#sec6)\n","221db635":"<a id=\"sec4.1\"><\/a>\n## The Elusive Rating and it's entourage\nSo, the main goal of this work is -- \n> to investigate **what affects the rating** of restaurants on 'www.tripadvisor.com' and train the ML model to **predict or verify** the rating of other restaurants.\n\nLet's look at our target variable with the rating in the training sample, **how its values are distributed**:\n - general range of values from 1 to 5 in increments of 0.5\n - the middle values are concentrated around 4\n - most of the values are concentrated from 3.5 to 4.5\n - values, which also cannot be ignored, range from 2 to 5\n - some drop down values are at 1.5 and 1\n \n> **It's just like a regular school with a regular student!**","dde60637":"#### And here is the distribution of the Ranks trait reduced to a common scale (normalized to 1):\n> This variant of the feature turned out to be **the most influential** in this model (in it's opinion), nevertheless, the raw Ranks feature is also left \"for the greater importance\" of both. It's worse without it.","7417c815":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.7\"><\/a>\n## Preparing the junk to drop\n#### \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0431\u0430\u043b\u0430\u0441\u0442","c1896f28":"#### How do the number of reviews correlate with restaurant ratings?\n- We see the highest number of reviews for restaurants with a rating of 4 and 4.5!\n- That number **reaches 10,000**!\n- **It's hard to believe the reviews aren't inflated...**\n- **And the rating doesn't seem to \"think\" about it!**\n> In fact, **attempting to correct** such numbers (as \"outliers\") for reasonable numbers, **doesn't have a positive effect on the performance of the model**...","8ddb2e4a":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0420\u0430\u043d\u0433\u043e\u0432\n\u042d\u0442\u043e -- \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e \u0440\u0430\u043d\u0433\u0443, \u0433\u0434\u0435:\n- \u043f\u043e \u043e\u0441\u0438 X - \u0440\u0430\u043d\u0433\u0438 \u0440\u0430\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n- \u043f\u043e \u043e\u0441\u0438 Y - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0431\u043b\u0438\u0437\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0430\u043d\u0433\u0430","5fb25f96":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.5\"><\/a>\n## Working with Reviews\n#### \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c c \u041e\u0442\u0437\u044b\u0432\u0430\u043c\u0438","43033854":"--------------------","fb958c7d":"#### Here are the cities with the best average restaurant ratings (top-10):\n> can go!","ad39e1ca":"<a id=\"sec4.2.6\"><\/a>\n### I created a table with data on the popularity of culinary styles in each city\n>*it is very fascinating!\n\n[The full version of this table is below, at the end of the analytics section](#sec4.2.10)    <--- it's a link, if you mind\n\n\n#### In the meantime -- here are the Top 10 cities with the greatest variety of popular cuisines\n- The darker the color, the more popular is the cuisine in the city.\n- The more to the left, the greater is the variety of popular styles and their concentration.\n\n- It's not hard to see that European and vegetarian cuisines take the lead.\n> And yes, this is Europe.","f71afaa2":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec3\"><\/a>\n## Modeling and testing\n#### \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 ","29c3db86":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.3.1\"><\/a> \n### Rest_id_count: extra research \/ \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\nsee analytics on [these features](#sec4.2.7.2)\n#### on Restaurant network in city, country, world\n\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 [\u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#sec5.2.7.2)","9fe8c498":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.5\"><\/a>\n## Cuisine Style: \u041a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0438 (\u043a\u0443\u0445\u043d\u0438)\n> **\u041e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430**","88416e52":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.1\"><\/a>\n## City: \u0413\u043e\u0440\u043e\u0434\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a \"\u0413\u043e\u0440\u043e\u0434\" \u0438\u043c\u0435\u0435\u0442 **\u0441\u0438\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435** \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u0438. \u0411\u0435\u0437 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0437\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u0430\u0434\u0430\u0435\u0442 **\u0434\u043e 50%**!\n\n\u0413\u043e\u0440\u043e\u0434\u0430 -- \u044d\u0442\u043e  *\u0441\u0440\u0435\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d*. \u0418 \u0432\u0441\u0435, \u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u0440\u0435\u043d \u0435\u0433\u043e \u0443\u0441\u043f\u0435\u0445 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438.\n\n> \u041f\u043e\u044d\u0442\u043e\u043c\u0443 **\u043e\u0431\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432** \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 **\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043a \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u043c**.","3fd98c90":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.2\"><\/a>\n## Ranking: Restaurant rank in the city\namong other restaurants (of this city)\n> less number - better rank","16446bc9":"<a id=\"sec0.1\"><\/a>\n### Import dependencies\n##### \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0438\u044f","42e1a341":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec3.1\"><\/a>\n### The most effective features\n##### \u0421\u0430\u043c\u044b\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","8ffc7df1":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.2\"><\/a>\n## Normalizing the features by the number of restaurants in the city\n#### \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435","8c3c5ae9":"**A little observation:**\n> It turned out to be a **strong middle man** and, looking ahead, it uses the **most trending culinary styles** (cuisines) in his city. And not the worst for the restaurant business.","7b747ee2":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.7\"><\/a>\n## Restaurant_id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n#### \u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c, \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e:\n> \u0427\u0435\u043c **\u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0435\u0442\u044c**, \u0447\u0435\u043c \u0448\u0438\u0440\u0435 \u043e\u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0435 \u0438 \u043c\u0438\u0440\u0443, **\u0442\u0435\u043c \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0435\u0439** \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441 \u0438 \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u043c\u0435\u0435\u0442 \u0441\u0435\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u043e\u0433\u043e **\u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433**.\n","7676b4ee":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.2\"><\/a>\n## Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n\u0441\u0440\u0435\u0434\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 (\u044d\u0442\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430)\n> \u043c\u0435\u043d\u044c\u0448\u0435 \u0446\u0438\u0444\u0440\u0430 -- \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u043d\u0433","b2c7111c":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec6\"><\/a>\n# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","0ed106c2":"<a id=\"sec4.2.7.2\"><\/a>\n#### It was interesting to find out (in detail) how many restaurants has a net in:\n * each city\n * in the country \n * and in the world\n \n(here is the code for [created attributes](#sec1.3.1))\n\n#### BUT:\n> We find **a lot of duplicates**! How many of them are there!?\n","4e9413b7":"#### A new feature was made based on this one, with **the number of restaurants in the chain**.\n> But the created one **did not affect the model much**.","3e8720e7":"**The purpose of this training project** is to process data from [Trip Advisor](https:\/\/www.tripadvisor.com\/) to:\n> * predict, based on the parameters and ratings of trusted restaurants, what rating a different restaurant might have with the parameters you have.\n> * get some interesting information about the restaurant business and cuisine styles on a global scale.","acacf969":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.5\"><\/a>\n## Cuisine Style\n> **One of the most important components of the rating**","63e40e54":"<a id=\"sec4.2.6\"><\/a>\n### \u0421\u043e\u0437\u0434\u0430\u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \n> **\u043e\u043d\u0430 \u043e\u0447\u0435\u043d\u044c \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u0430!**.\n\n[\u041f\u043e\u043b\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u044d\u0442\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0438\u0436\u0435, \u0432 \u043a\u043e\u043d\u0446\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u043e\u0439](#sec4.2.10)    <--- \u044d\u0442\u043e \u0441\u0441\u044b\u043b\u043a\u0430, \u0435\u0441\u043b\u0438 \u0447\u0442\u043e\n\n\n#### \u0410 \u043f\u043e\u043a\u0430 -- Top-10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u0441\u0430\u043c\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c\n- \u0427\u0435\u043c \u0442\u0435\u043c\u043d\u0435\u0435 \u0446\u0432\u0435\u0442, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u0443\u0445\u043d\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n- \u0427\u0435\u043c \u043b\u0435\u0432\u0435\u0435, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0430\u0437\u043d\u043d\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439, \u0438\u0445 \u043a\u043e\u043d\u0446\u0435\u043d\u0442\u0440\u0430\u0446\u0438\u044f\n\n- \u041d\u0435 \u0442\u0440\u0443\u0434\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043b\u0438\u0434\u0435\u0440\u0441\u0442\u0432\u043e \u0443 \u0435\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u043e\u0439 \u0438 \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0441\u043a\u043e\u0439 \u043a\u0443\u0445\u043e\u043d\u044c.\n> \u0418 \u0434\u0430, \u044d\u0442\u043e -- \u0415\u0432\u0440\u043e\u043f\u0430","17ffa147":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0420\u0430\u043d\u0433\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0420\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n- \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0430\u043d\u0433, \u0447\u0435\u043c\n- \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 3, \u0447\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0441\u0438\u043b\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","0b95e74e":"#### Let's look at the distribution of the raw rank feature\nThis is the top 10 cities by rank, where:\n- X-axis is the ranks of the restaurants in the city\n- The Y axis is the number of restaurants with close rank values","a09f0b20":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.7\"><\/a>\n## Restaurant_id - restaurant net's identification number\n#### Must be a useful attribute, because:\n> The **larger is the net**, the broader it spreads across the country and the world, **the more sustainable** is the business, and more opportunities should it have to **influence the rating** positively.\n","1f9bec5e":"![EDA \u0432 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u041b\u0435\u0441\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432_small.jpg](attachment:98f0f0df-c8c5-4241-9fa4-36857cca5e97.jpg)","3161a54b":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.10\"><\/a>\n<a id=\"sec5.2.10\"><\/a>\n# Popularity of culinary styles in each city\n### \u041e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n> **\u041e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430**\n\nback to [analytics on Cuisines](#sec4.2.6)     \/     \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a [\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0435 \u043f\u043e \u041a\u0443\u0445\u043d\u044f\u043c](#sec5.2.6)","e7c6674e":"#### Almost all the restaurants in the selection have 1 restaurant each in the one city, one country, and (one) world! That's such a selection!\n> Interesting features did not take place! Columns are not included in the model...","6225b1fb":"#### Also, each restaurant has got a score for the trendiness of its cuisines (in the city)\n**What do we see?**\n- A significant portion of the restaurants stick to **the main cuisine in town, and only that**!\n- A sizable portion combines various secondary cuisines (middle of the range)\n- And a **small portion of the restaurants don't hit the trends** of the city (right side of the chart) ... ","1a0917b7":"**(Dedicated to survivors \/ \u043f\u043e\u0441\u0432\u044f\u0449\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u043c)**\n\n![EDA among the sharks.jpg](attachment:53f88a58-1bb8-4944-a61c-71249eea14ea.jpg)","0ba4b7f1":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.6\"><\/a>\n## ID_TA: Restaurant ID on Trip Advisor\n#### Mysterious feature with its power \n> *It's just -- affecting ...**\n","12f97b7d":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.4\"><\/a>\n## Working with Cuisine Styles\n#### \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c c \u041a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u043c\u0438 \u0421\u0442\u0438\u043b\u044f\u043c\u0438","0a450e01":"**\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0435:**\n> \u041e\u043d \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f **\u043a\u0440\u0435\u043f\u043a\u0438\u043c \u0441\u0435\u0440\u0435\u0434\u043d\u044f\u0447\u043a\u043e\u043c** \u0438, \u0437\u0430\u0431\u0435\u0433\u0430\u044f \u0432\u043f\u0435\u0440\u0435\u0434, \u043e\u0442\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 **\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435  \u0442\u0440\u0435\u043d\u0434\u043e\u0432\u044b\u0435 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0441\u0442\u0438\u043b\u0438** (\u043a\u0443\u0445\u043d\u0438) \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435. \u0418 \u043d\u0435 \u0441\u0430\u043c\u043e\u043c \u043f\u043b\u043e\u0445\u043e\u043c \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0430.","f1a976dc":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec0.2\"><\/a>\n### DATA loading\n##### \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u0441\u044f \u043f\u043e \u043f\u043e\u043b\u043d\u043e\u0439!","9a3d8187":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2\"><\/a>\n## \u0421 \u0447\u0435\u043c \u0434\u0440\u0443\u0436\u0438\u0442 \u0420\u0435\u0439\u0442\u0438\u043d\u0433\n**\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435** (\u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435), **\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0435** \u043d\u0430 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\n- \u0421\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e \u0435\u0435 \u043e\u0442\u0447\u0435\u0442\u0443)\n- \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0434\u043b\u044f MAE \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435)","15eb6e9f":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5\"><\/a>\n# \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438\n### [(English version of anaytics is in the previous section)](#sec4)","2e2161bc":"#### \u0422\u0430\u043a\u0436\u0435 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0431\u044b\u043b \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u0431\u0430\u043b \u043f\u043e \u0442\u0440\u0435\u043d\u0434\u043e\u0432\u043e\u0441\u0442\u0438 \u0435\u0433\u043e \u043a\u0443\u0445\u043e\u043d\u044c (\u0432 \u0433\u043e\u0440\u043e\u0434\u0435)\n**\u0427\u0442\u043e \u043c\u044b \u0432\u0438\u0434\u0438\u043c?**\n- \u0417\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f **\u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0435**!\n- \u0417\u0430\u043c\u0435\u0442\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0442\u043e\u0440\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 (\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430)\n- \u0418 **\u043d\u0435\u043c\u0430\u043b\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0442\u0440\u0435\u043d\u0434\u044b** \u0433\u043e\u0440\u043e\u0434\u0430 (\u043f\u0440\u0430\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0430). ","a4b347b5":"-----------------------------------","3dc82019":"#### Let's see how many restaurants we have with how many reviews (top-50):\n- and we see that people aren't really in a hurry to leave reviews (what a surprise!):\n - the maximum number of restaurants has 2 reviews each!\n - As the number of reviews is increasing, number of restaurants with them -- is decreasing","928baafe":"# Restaurant rating prediction (at Trip Advisor)\n### \u0438\u043b\u0438 EDA \u0432 \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u043c \u041b\u0435\u0441\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n##### or ED'ing in the Random Forest of Restaurants","4a82a8c6":"#### \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0431\u044b\u043b \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d \u043d\u043e\u0432\u044b\u0439, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c **\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438**.\n> \u041d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b**.","20354d6d":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2\"><\/a>\n## What are the Rating's friends\n**Variables** (including those created in this job) that **most affect** the guessing of the rating\n- The most important attributes for the model (according to its report)\n- Useful attributes for MAE (empirically identified)","d5c11ebf":"#### \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 1 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443 \u0432 1 \u0433\u043e\u0440\u043e\u0434\u0435, \u0432 1 \u0441\u0442\u0440\u0430\u043d\u0435 \u0438 \u0432 (1) \u043c\u0438\u0440\u0435! \u0412\u043e\u0442 \u0442\u0430\u043a\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430!\n> \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u0438\u0441\u044c! \u041a\u043e\u043b\u043e\u043d\u043a\u0438 \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432 \u043c\u043e\u0434\u0435\u043b\u044c...","5c8fb433":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043a\u0430\u043a\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443\u043d\u0430\u0441 \u0438\u043c\u0435\u0435\u0442\u0441\u044f (top-50):\n- \u0438 \u0443\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043b\u044e\u0434\u0438 \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u0442\u043e\u0440\u043e\u043f\u044f\u0442\u0441\u044f \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b (\u044d\u043a\u0438\u0439 \u0441\u044e\u0440\u043f\u0440\u0438\u0437!):\n - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e 2 \u043e\u0442\u0437\u044b\u0432\u0430!\n - \u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441\u043d\u0438\u0436\u0430\u0435\u0442\u0441\u044f \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0438\u043c\u0438","756c51a2":"#### Welfare (GDP per capita) \n- Simple logic, it would seem: \n - The more free money a person has, the more he can port for nice services\n - the greater is the attendance and number of restaurants\n - the greater the competition between them\n - and the higher the quality of those services and, therefore, the higher the rating.\n\n##### What does the Rating think about this?\n- We see the greatest concentration of GDP values around 40 - 50 thousand.\n- For all rating values \n- (see Rating 5 and 3, correlation Rating <--> GDP)\n\n##### How did the trait with GDP affect the performance of the model? \n> Notably, but inconsistently: \n> - with basic processing -- positively \n> - with maximal processing -- negatively","d3a6cedc":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\n- \u041e\u0442\u0437\u044b\u0432 \u043e \u043d\u0435\u043c \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\n- \u0410\u0434\u0440\u0435\u0441 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435\n> \u042d\u0442\u043e -- Augustiner Sch\u00fctzengarten \u0438\u0437 \u041c\u044e\u043d\u0445\u0435\u043d\u0430","c9501d07":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u044f\u0445**\n\n![sec4.2.7 number of restaurants in the networks.png](attachment:52123b1b-bb9e-4803-b1bb-f545ef450074.png)","d3a2bd1d":"### And here is the context of the variables,\namong which our rating happens to be and which should help us determine it:","6877756a":"#### Duplicated reviews:\n> if they are restaurants of different nets - it's a bad sign!\n\n- Total duplicates:  6484\n- Intra-network duplicates: 1630\n- Are the rest of them **stealed reviews**?\n- And that's **20% of the selection**!\n\n**And the Rating doesn't care!**\n","b6ba70d8":"back to [analytics on Cuisines](#sec4.2.6)     \/     \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a [\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0435 \u043f\u043e \u041a\u0443\u0445\u043d\u044f\u043c](#sec4.2.6)","f8aeb53a":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.3\"><\/a>\n## Creating some features\n#### \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0435-\u0447\u0442\u043e","7727173b":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec5.2.3\"><\/a>\n## Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\n","52d79a81":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4\"><\/a>\n# Little bit of analytics\n### [\u0440\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438 -- \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 (\u0441\u0441\u044b\u043b\u043a\u0430)](#sec5)","2525609c":"**\u0426\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0443\u0447\u0435\u0431\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430** -- \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e *\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445* \u0441 \u0441\u0430\u0439\u0442\u0430 [Trip Advisor](https:\/\/www.tripadvisor.com\/), \u0447\u0442\u043e\u0431\u044b:\n> * \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0434\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u043a\u0438\u0439 \u0438\u043d\u043e\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441 \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0443 \u0432\u0430\u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n> * \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043d\u043e\u043c \u0431\u0438\u0437\u043d\u0435\u0441\u0435 \u0438 \u043a\u0443\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0438\u043b\u044f\u0445 \u0432 \u043c\u0438\u0440\u043e\u0432\u043e\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0435","559930db":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec1.6\"><\/a>\n## Searching for Outliners\n#### \u0418\u0449\u0435\u043c \u0412\u044b\u0431\u0440\u043e\u0441\u044b","85fbf7fb":"#### \u0411\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 (\u0412\u0412\u041f \u043d\u0430 \u0434\u0443\u0448\u0443 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f)\n- \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430, \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b: \n - \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0440\u0442\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u044f\u0442\u043d\u044b\u0435 \u0443\u0441\u043b\u0443\u0433\u0438\n - \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\n - \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438\n - \u0438 \u0432\u044b\u0448\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0438\u0445 \u0443\u0441\u043b\u0443\u0433, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 -- \u0440\u0435\u0439\u0442\u0438\u043d\u0433\n\n##### \u0427\u0442\u043e \u0434\u0443\u043c\u0430\u0435\u0442 \u043e\u0431 \u044d\u0442\u043e\u043c \u0441\u0430\u043c \u0420\u0435\u0439\u0442\u0438\u043d\u0433?\n- \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043a\u043e\u043d\u0446\u0435\u043d\u0442\u0440\u0430\u0446\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0412\u0412\u041f \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 40 - 50 \u0442\u044b\u0441.\n- \u043f\u0440\u0438 \u043b\u044e\u0431\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \n- (\u0441\u043c. \u043d\u0438\u0436\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 5 \u0438 3, \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0420\u0435\u0439\u0442\u0438\u043d\u0433 <--> \u0412\u0412\u041f)\n\n##### \u041a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0412\u0412\u041f \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u0438? \n> \u0417\u0430\u043c\u0435\u0442\u043d\u043e, \u043d\u043e \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u0440\u0435\u0447\u0438\u0432\u043e: \n> - \u043f\u0440\u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 -- \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \n> - \u043f\u0440\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 -- \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e","f397a723":"#### \u0410 \u0432\u043e\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0443 (\u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043a 1) \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0420\u0430\u043d\u0433\u043e\u0432:\n> \u042d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f **\u0441\u0430\u043c\u044b\u043c \u0432\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u043c** \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043f\u043e \u0435\u0435 \u043c\u043d\u0435\u043d\u0438\u044e), \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0420\u0430\u043d\u0433\u043e\u0432 \u0442\u043e\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \"\u0434\u043b\u044f \u043f\u0443\u0449\u0435\u0439 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438\" \u043e\u0431\u043e\u0438\u0445. \u0411\u0435\u0437 \u043d\u0435\u0433\u043e -- \u0445\u0443\u0436\u0435.","754c437e":"GO TO [INDEX \/ \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435](#sec0)\n<a id=\"sec4.2.1\"><\/a>\n## City\nThe \"City\" feature has the **strongest effect** on model performance. Without it, the prediction accuracy drops **to 50%**!\n\nCities are the *environment in which a restaurant operates. And everything by which its success and rating can be measured, is determined by local conditions.\n\n> Therefore, **general feature values** in this job are **normalized to urban** ones.","a9ab7ae5":"### \u0410 \u0432\u043e\u0442 -- \u0442\u043e\u0442 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445,\n\u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0448 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0447\u044c \u0435\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c:"}}