{"cell_type":{"22c66db9":"code","364bb375":"code","d266554b":"code","7def08ef":"code","64ec8e2b":"code","8117290c":"code","4ceed7f6":"code","6a723e9e":"code","0712e9d8":"code","c5b03a47":"code","1864e4d7":"code","0c19f160":"code","f318a70c":"code","af4b291f":"code","542549f0":"code","3c0482a3":"code","c7bbb75f":"code","77bbd34a":"code","85440e91":"code","e30ee831":"code","6cecded7":"code","f32246f4":"code","5edb76d5":"code","602ebe02":"code","141bc119":"code","764addc9":"code","ae18b941":"code","e74c288f":"code","9a31fc87":"code","bc602594":"code","aa779b03":"code","479c3f9e":"code","b6b688db":"code","5553e8fb":"code","1d2a70a2":"code","050e1504":"code","65a7b8fd":"code","cf4750ba":"code","f73a673f":"code","a733f369":"code","2b5ec7ce":"code","f191ee0e":"code","650999a5":"code","f0f6a235":"code","27c7d393":"code","4a295cdf":"code","0a8ac8aa":"code","2a1d19dd":"code","36e84eb3":"code","d0e78ba2":"code","862de8dc":"code","dc7ada6d":"code","018fd637":"code","4677ed9e":"code","ba05a774":"code","97264d20":"code","6ca6d130":"code","3472c5c1":"code","b7d4f16e":"code","ae28525e":"code","970c09b9":"code","665fca97":"code","2ffc18b2":"code","a07a546c":"code","afac8b65":"code","b5781f75":"code","25a6d139":"code","e5240962":"code","11bcfd3e":"code","f53b9be6":"code","5bded1ee":"code","6d478b64":"code","9f693c25":"code","ffa455ed":"code","1b76a701":"code","fe8ceb27":"code","e6fb1b72":"code","52af00c2":"code","30fe1f28":"code","b1113e9d":"code","f22fb878":"code","8ce51476":"code","38654212":"code","6dff3890":"code","8200642f":"code","9b680ccb":"code","f08140df":"code","206a2f8d":"code","0ea38734":"code","e92e66ee":"code","f99e4342":"code","31c929e9":"code","d408c26a":"code","eb04defc":"code","fffd490a":"code","a6afadf0":"code","62a0973e":"code","2adad421":"code","9c1c427e":"code","a8f392f9":"code","d048df6e":"code","415462f9":"code","a47043e4":"code","8c4fac06":"code","dff69d63":"code","6043d6b4":"code","1226f31d":"code","42621a3a":"code","55107eee":"code","9c9d0916":"code","fa75520d":"code","88baacd8":"code","bad5f68a":"code","f095e42b":"code","91cbe416":"code","a6b70a61":"code","ef15ca0f":"code","cf88bb18":"code","88f403a2":"code","cea659c5":"code","a02cc793":"code","793bd31e":"code","7a30fa5c":"code","ba49eaaf":"code","da1a6ccc":"code","165a9116":"code","20adb364":"code","6e9ba95c":"code","fb8698b7":"code","9010d105":"code","b36540a9":"code","00d2141c":"code","b234b90a":"code","cfb983e5":"code","b117c1de":"code","52a0af1a":"code","29eb0eee":"code","5acd853e":"code","f111264f":"markdown","73c374da":"markdown","1aab7430":"markdown","8b2cc24b":"markdown","c1f194da":"markdown","b7758ba3":"markdown","51a08af7":"markdown","6ef620e4":"markdown","608e8917":"markdown","08c27ed3":"markdown","ba3fc415":"markdown","4779a0da":"markdown","549ecefc":"markdown","40df6600":"markdown","a01cbd96":"markdown","d79160d8":"markdown","948a5128":"markdown","a76d20b2":"markdown"},"source":{"22c66db9":"from warnings import filterwarnings\nfilterwarnings('ignore')","364bb375":" !pip install tweepy","d266554b":"import tweepy, codecs\n\n\n\nconsumer_key = '5ecrgpF8KDhSZlvM8o0xSASVh'\nconsumer_secret = '5MdKdPRMpgGylXBZUlHXPwnxsgwjczusIeYw1JMTUUGQ0Dcdpi'\naccess_token = '330297491-56WABQRvTJnWTLG7bMnJT27Jlt9T5TYwUPiTR7hh'\naccess_token_secret = 'aCmW6YbiBjIycroI5zmoXGgpsnN46P5rXbCfx69KmRBMt'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token,access_token_secret)\napi = tweepy.API(auth)","7def08ef":"# we can tweet with this code\n# api.update_status('hello from python')","64ec8e2b":"# we can see our friends on twitter with this code\n#api.friends()","8117290c":"fk = api.me()","4ceed7f6":"# you can follow me :)\nfk.screen_name","6a723e9e":"fk.followers_count","0712e9d8":"#fk.friends","c5b03a47":"for friend in fk.friends(count=10):\n    print(friend.screen_name)","1864e4d7":"dir(fk)","0c19f160":"# she is my sister\nuser = api.get_user(id = 'bsrakrsn')","f318a70c":"user.screen_name","af4b291f":"user.followers_count","542549f0":"user.profile_image_url","3c0482a3":"public_tweets = api.home_timeline(count=10)","c7bbb75f":"for tweet in public_tweets:\n    print(tweet.text)","77bbd34a":"name = 'AndrewYNg'\ntweet_count = 10\n\nuser_timeline = api.user_timeline(id = name, count=tweet_count)\n\nfor i in user_timeline:\n    print(i.text)","85440e91":"retweets = api.retweets_of_me(count=10)\nfor retweet in retweets:\n    print(retweet.text)","e30ee831":"retweets","6cecded7":"results = api.search(q = '#datascience',\n                    lang = 'tr',\n                    result_type = 'recent',\n                    count = 1000000 )","f32246f4":"import pandas as pd","5edb76d5":"def tweets_df(results):\n    id_list = [tweet.id for tweet in results]\n    data_set = pd.DataFrame(id_list,columns=['id'])\n    \n    \n    data_set['text'] = [tweet.text for tweet in results]\n    data_set['created_at'] = [tweet.created_at for tweet in results]\n    data_set['retweet_count'] = [tweet.retweet_count for tweet in results]\n    data_set['name'] = [tweet.author.name for tweet in results]\n    data_set['user_screen_name'] = [tweet.author.screen_name for tweet in results]\n    data_set['user_followers_count'] = [tweet.author.followers_count for tweet in results]\n    data_set['user_location'] = [tweet.author.location for tweet in results]\n    data_set['Hashtags'] = [tweet.entities.get('hashtags') for tweet in results]\n    \n    return data_set","602ebe02":"data = tweets_df(results)","141bc119":"data.head()","764addc9":"AndrewNg = api.get_user('AndrewYNg')","ae18b941":"AndrewNg.name","e74c288f":"AndrewNg.id","9a31fc87":"AndrewNg.url","bc602594":"AndrewNg.verified","aa779b03":"AndrewNg.screen_name","479c3f9e":"AndrewNg.statuses_count","b6b688db":"AndrewNg.favourites_count","5553e8fb":"AndrewNg.friends_count","1d2a70a2":"tweets = api.user_timeline(id = 'AndrewYNg')","050e1504":"\"\"\"for i in tweets:\n    print(i.text)\"\"\"","65a7b8fd":"def timeline_df(tweets):\n    id_list = [tweet.id for tweet in tweets]\n    data_set = pd.DataFrame(id_list,columns=['id'])\n    \n    \n    data_set['text'] = [tweet.text for tweet in tweets]\n    data_set['created_at'] = [tweet.created_at for tweet in tweets]\n    data_set['retweet_count'] = [tweet.retweet_count for tweet in tweets]\n    data_set['favorite_count'] = [tweet.favorite_count for tweet in tweets]\n    data_set['source'] = [tweet.source for tweet in tweets]\n\n    \n    return data_set","cf4750ba":"timeline_df(tweets)","f73a673f":"def timeline_df(tweets):\n    df = pd.DataFrame()\n    \n    df['id'] = list(map(lambda tweet:tweet.id, tweets))\n    df['created_at'] = list(map(lambda tweet:tweet.created_at, tweets))\n    df['text'] = list(map(lambda tweet:tweet.text, tweets)) \n    df['favorite_count'] = list(map(lambda tweet:tweet.favorite_count, tweets))\n    df['retweeted_count'] = list(map(lambda tweet:tweet.retweet_count, tweets))\n    df['source'] = list(map(lambda tweet:tweet.source, tweets))\n    return df","a733f369":"tweets = api.user_timeline(id = 'AndrewYNg',count=10000)","2b5ec7ce":"df = timeline_df(tweets)","f191ee0e":"df.info()","650999a5":"df.sort_values('retweeted_count', ascending= False)","f0f6a235":"df.sort_values('favorite_count', ascending= False)[['text', 'favorite_count']].iloc[0:3]","27c7d393":"df.sort_values('favorite_count', ascending= False)['text'].iloc[0]","4a295cdf":"df.head()","0a8ac8aa":"%config InlineBacend.figure_format = 'retina'\nimport seaborn as sns\nimport matplotlib.pyplot as plt","2a1d19dd":"sns.distplot(df.favorite_count, kde=False ,color='blue')\nplt.xlim(-100,15000)","36e84eb3":"plt.figure(figsize=(10,6))\nsns.distplot(df.retweeted_count, color='red')\nplt.xlim(-100,5000)","d0e78ba2":"df['favorite_count'].mean()","862de8dc":"df['favorite_count'].std()","dc7ada6d":"df.head()","018fd637":"df['tweet_hour'] = df['created_at'].apply(lambda x: x.strftime('%H'))","4677ed9e":"df.head()","ba05a774":"df['tweet_hour'] = pd.to_numeric(df['tweet_hour'])","97264d20":"df.info()","6ca6d130":"plt.figure(figsize=(10,6))\nsns.distplot(df['tweet_hour'], kde=True, color='blue')","3472c5c1":"df['days'] = df['created_at'].dt.weekday_name","b7d4f16e":"df.head()","ae28525e":"gun_freq = df.groupby('days').count()['id']","970c09b9":"gun_freq.plot.bar(x='days', y='id')","665fca97":"source_freq = df.groupby('source').count()['id']","2ffc18b2":"source_freq.plot.bar(x='source', y='id')","a07a546c":"df.groupby('source').count()['id']","afac8b65":"df.groupby(['source', 'tweet_hour','days'])[['tweet_hour']].count()","b5781f75":"user = api.get_user(id = 'AndrewYNg', count= 10000)","25a6d139":"friends = user.friends()\nfollowers = user.followers()","e5240962":"def followers_df(follower):\n    idler = [i.id for i in follower]\n    df = pd.DataFrame(idler, columns=['id'])\n    \n    \n    df['created_at'] = [i.created_at for i in follower]\n    df['screen_name'] = [i.screen_name for i in follower]\n    df['location'] = [i.location for i in follower]\n    df['followers_count'] = [i.followers_count for i in follower]\n    df['statuses_count'] = [i.statuses_count for i in follower]\n    df['friends_count'] = [i.friends_count for i in follower]\n    df['favourites_count'] = [i.favourites_count for i in follower]\n    \n    return df","11bcfd3e":"df = followers_df(followers)","f53b9be6":"df.head()","5bded1ee":"df.info()","6d478b64":"df.index = df['screen_name']","9f693c25":"s_data = df[['followers_count', 'statuses_count']]","ffa455ed":"s_data","1b76a701":"s_data['followers_count'] = s_data['followers_count'] +0.01","fe8ceb27":"s_data['statuses_count'] = s_data['statuses_count'] +0.01","e6fb1b72":"s_data","52af00c2":"s_data = s_data.apply(lambda x:(x-min(x)) \/ (max(x)- min(x))) #doing standardization","30fe1f28":"s_data['followers_count'] = s_data['followers_count'] +0.01\ns_data['statuses_count'] = s_data['statuses_count'] +0.01","b1113e9d":"s_data.head()","f22fb878":"score = s_data['followers_count'] * s_data['statuses_count']","8ce51476":"score","38654212":"score.sort_values(ascending = False)","6dff3890":"score[score>score.median() + score.std()\/2].sort_values(ascending=False)","8200642f":"score.median()","9b680ccb":"s_data['score'] =score","f08140df":"import numpy as np","206a2f8d":"s_data['segment'] = np.where(s_data['score'] >=score.median() + score.std()\/len(score) , 'A', 'B')","0ea38734":"s_data","e92e66ee":"a = api.user_timeline(id= 'AndrewYNg',count=5)","f99e4342":"for i in a:\n    print(i.text)","31c929e9":"def country_codes():\n    places = api.trends_available()\n    all_woeids = {place['name'].lower(): place['woeid'] for place in places}\n    return all_woeids","d408c26a":"# country_codes()","eb04defc":"def country_woeid(country_name):\n    country_name = country_name.lower()\n    trends = api.trends_available()\n    all_woeids = country_codes()\n    return all_woeids[country_name]","fffd490a":"country_woeid('turkey')","a6afadf0":"trends = api.trends_place(id= 23424969 )","62a0973e":"import json\n#print(json.dumps(trends, indent=1))","2adad421":"turkey = api.trends_place(id= 23424969 )\ntrends = turkey[0]['trends']","9c1c427e":"tweets = api.search(q= '#datascience', lang='en',\n                     result_type='recent', counts = 1000)","a8f392f9":"def hashtag_df(results):\n    id_list = [tweet.id for tweet in results]\n    data_set = pd.DataFrame(id_list,columns=['id'])\n    \n    \n    data_set['text'] = [tweet.text for tweet in results]\n    data_set['created_at'] = [tweet.created_at for tweet in results]\n    data_set['retweeted'] = [tweet.retweeted for tweet in results]\n    data_set['retweet_count'] = [tweet.retweet_count for tweet in results]\n    data_set['name'] = [tweet.author.name for tweet in results]\n    data_set['user_screen_name'] = [tweet.author.screen_name for tweet in results]\n    data_set['user_followers_count'] = [tweet.author.followers_count for tweet in results]\n    data_set['user_location'] = [tweet.author.location for tweet in results]\n    data_set['Hashtags'] = [tweet.entities.get('hashtags') for tweet in results]\n    \n    return data_set","d048df6e":"df = hashtag_df(tweets)","415462f9":"df.shape","a47043e4":"df","8c4fac06":"df['tweet_hour'] = df['created_at'].apply(lambda x: x.strftime('%H'))","dff69d63":"df['tweet_hour'] = pd.to_numeric(df['tweet_hour'])","6043d6b4":"plt.figure(figsize=(10,6))\nsns.distplot(df['tweet_hour'], kde=True, color='blue')","1226f31d":"df['days'] = df['created_at'].dt.weekday_name","42621a3a":"gun_freq = df.groupby('days').count()['id']","55107eee":"gun_freq.plot.bar(x='days', y='id')","9c9d0916":"\ndf['text'] = df['text'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\n\ndf['text'] = df['text'].str.replace('[^\\w\\s]', '')\n\ndf['text'] = df['text'].str.replace('[\\d]','')\n\n\nimport nltk\nfrom nltk.corpus import stopwords\nsw = stopwords.words('english')\ndf['text'] = df['text'].apply(lambda x: \" \".join(x for x in x.split() if x not in sw))\n\n#lemmi\nfrom textblob import Word\ndf['text'] = df['text'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()] ))\n\ndf['text'] = df['text'].str.replace('rt', '')","fa75520d":"df.text","88baacd8":"freq_df = df['text'].apply(lambda x:pd.value_counts(x.split(\" \"))).sum(axis = 0).reset_index()","bad5f68a":"freq_df.columns = ['words', 'freqs']","f095e42b":"freq_df.sort_values('freqs',ascending=False)","91cbe416":"freq_df.shape","a6b70a61":"a = freq_df[freq_df.freqs > freq_df.freqs.mean() + \n       freq_df.freqs.std()] # this code for the being more meaningful","ef15ca0f":"a.plot.bar(x= 'words', y= 'freqs')","cf88bb18":"import numpy as np\nimport pandas as pd\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud , STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt","88f403a2":"text = \" \".join(i for i in df.text)","cea659c5":"text","a02cc793":"wc = WordCloud(background_color='white').generate(text)\nplt.figure(figsize=(10,6))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.tight_layout(pad = 0)\nplt.show()","793bd31e":"df","7a30fa5c":"from textblob import TextBlob","ba49eaaf":"def sentiment_score(df):\n    text = df['text']\n    \n    for i in range(0, len(text)):\n        textB = TextBlob(text[i])\n        sentiment_score = textB.sentiment.polarity\n        df.set_value(i, 'sentiment_score', sentiment_score)\n        \n        \n        if sentiment_score < 0.00:\n            sentiment_class = 'Negative'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n            \n        elif sentiment_score > 0.00:\n            sentiment_class ='Positive'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n        else:\n            sentiment_class = 'Notr'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n    return df\n\n","da1a6ccc":"sentiment_score(df)","165a9116":"df.groupby('sentiment_class').count()['id']","20adb364":"sentiment_freq = df.groupby('sentiment_class').count()['id']","6e9ba95c":"sentiment_freq.plot.bar(x= 'sentiment_class', y='id')","fb8698b7":"tweets = api.search(q = '#apple', lang='en', count=5000)","9010d105":"def hashtag_df(results):\n    id_list = [tweet.id for tweet in results]\n    data_set = pd.DataFrame(id_list,columns=['id'])\n    \n    \n    data_set['text'] = [tweet.text for tweet in results]\n    data_set['created_at'] = [tweet.created_at for tweet in results]\n    data_set['retweeted'] = [tweet.retweeted for tweet in results]\n    data_set['retweet_count'] = [tweet.retweet_count for tweet in results]\n    data_set['name'] = [tweet.author.name for tweet in results]\n    data_set['user_screen_name'] = [tweet.author.screen_name for tweet in results]\n    data_set['user_followers_count'] = [tweet.author.followers_count for tweet in results]\n    data_set['user_location'] = [tweet.author.location for tweet in results]\n    data_set['Hashtags'] = [tweet.entities.get('hashtags') for tweet in results]\n    \n    return data_set","b36540a9":"df = hashtag_df(tweets)","00d2141c":"df.shape","b234b90a":"\ndf['text'] = df['text'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\n\ndf['text'] = df['text'].str.replace('[^\\w\\s]', '')\n\ndf['text'] = df['text'].str.replace('[\\d]','')\n\n\nimport nltk\nfrom nltk.corpus import stopwords\nsw = stopwords.words('english')\ndf['text'] = df['text'].apply(lambda x: \" \".join(x for x in x.split() if x not in sw))\n\n#lemmi\nfrom textblob import Word\ndf['text'] = df['text'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()] ))\n\ndf['text'] = df['text'].str.replace('rt', '')","cfb983e5":"def sentiment_score(df):\n    text = df['text']\n    \n    for i in range(0, len(text)):\n        textB = TextBlob(text[i])\n        sentiment_score = textB.sentiment.polarity\n        df.set_value(i, 'sentiment_score', sentiment_score)\n        \n        \n        if sentiment_score < 0.00:\n            sentiment_class = 'Negative'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n            \n        elif sentiment_score > 0.00:\n            sentiment_class ='Positive'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n        else:\n            sentiment_class = 'Notr'\n            df.set_value(i, 'sentiment_class', sentiment_class)\n    return df","b117c1de":"df = sentiment_score(df)","52a0af1a":"sentiment_freq = df.groupby('sentiment_class').count()['id']","29eb0eee":"sentiment_freq","5acd853e":"sentiment_freq.plot.bar(x = 'sentiment_class', y= 'id')","f111264f":"## hastag","73c374da":"## user time line ","1aab7430":"## retweets","8b2cc24b":" # API Connection","c1f194da":"# Twitter Sentiment","b7758ba3":"# Profile Analysis","51a08af7":"## Source of Tweets","6ef620e4":"## convert to dataframe ","608e8917":"### If you like it please vote ","08c27ed3":"## Word Cloud","ba3fc415":"## Pull Data from Hashtag","4779a0da":"# Pull data from Twitter ","549ecefc":"## home timeline","40df6600":"# Twitter Text Mining","a01cbd96":"## Distribution of Tweet-Hour  ","d79160d8":"# Distribution of Retweet & Favorite Counts","948a5128":"## Followers Segmentation","a76d20b2":"## Followers and Friends Analysis"}}