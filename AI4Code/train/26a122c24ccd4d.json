{"cell_type":{"8447cc03":"code","68731f49":"code","6e9a79e6":"code","1551b97b":"code","0dfb5a92":"code","c43220da":"code","3c829d1a":"code","cc1d8a2b":"code","c0cce367":"code","b1048f69":"code","63179658":"code","349ef448":"code","71a77d81":"code","6ac0e597":"code","8082352c":"code","600506f2":"code","07ebf744":"code","f29c304a":"code","d7aa6e7d":"markdown","074ccae2":"markdown","fa4e228a":"markdown","b35817f5":"markdown"},"source":{"8447cc03":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","68731f49":"base_dir = '\/kaggle\/input\/health-insurance-cross-sell-prediction\/'","6e9a79e6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import IsolationForest","1551b97b":"base_dir + 'train.csv'","0dfb5a92":"df = pd.read_csv(base_dir + 'train.csv', index_col='id')\ndf_test = pd.read_csv(base_dir + 'test.csv', index_col='id')\nsubmission = pd.read_csv(base_dir + 'sample_submission.csv')","c43220da":"def to_categorical(frame, train=True): \n    frame['Gender'] = pd.Categorical(frame['Gender'])\n    frame['Driving_License'] = pd.Categorical(frame['Driving_License'])\n    frame['Previously_Insured'] = pd.Categorical(frame['Previously_Insured'])\n    frame['Vehicle_Damage'] = pd.Categorical(frame['Vehicle_Damage'])\n    frame['Vehicle_Age'] = pd.Categorical(frame['Vehicle_Age'])\n    frame['Region_Code'] = pd.Categorical(frame['Region_Code'])\n    if train:\n        frame['Response'] = pd.Categorical(frame['Response'])\n    \n    return frame\n","3c829d1a":"# df['Gender'] = pd.Categorical(df['Gender'])\n# df['Driving_License'] = pd.Categorical(df['Driving_License'])\n# df['Previously_Insured'] = pd.Categorical(df['Previously_Insured'])\n# df['Vehicle_Damage'] = pd.Categorical(df['Vehicle_Damage'])\n# df['Response'] = pd.Categorical(df['Response'])\n# df['Vehicle_Age'] = pd.Categorical(df['Vehicle_Age'])\n# df['Region_Code'] = pd.Categorical(df['Region_Code'])\n\ndf_train = to_categorical(df)\n\ndf_train = pd.concat([df[['Age', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage', 'Response']],\n           pd.get_dummies(df[['Gender', 'Driving_License', \n                   'Previously_Insured', 'Vehicle_Damage', \n                   'Vehicle_Age']])], axis=1)\n\n","cc1d8a2b":"df_train","c0cce367":"iso = IsolationForest(warm_start=True, n_jobs=-1)\niso.fit_predict(df_train.drop('Response', axis=1))\niso_pred = iso.predict(df_train.drop('Response', axis=1))\n#plt.scatter(df_train['Annual_Premium'], df_train['Policy_Sales_Channel'], c=iso_pred)","b1048f69":"iso_pred = np.where(iso_pred==1, 0, iso_pred)\niso_pred = np.where(iso_pred==-1, 1, iso_pred)\niso_pred = np.array(iso_pred, dtype=bool)\nprint(np.unique(iso_pred, return_counts=True))","63179658":"df_train_reduced = df_train.loc[iso_pred]\nX_train_r, X_test_r, y_train_r, y_test_r = train_test_split(df_train_reduced.drop('Response', axis=1), \n                                                            df_train_reduced['Response'])","349ef448":"# lgb_params = {\n#     'num_leaves' : [10, 50, 100],\n#     'n_estimators' : [100, 300, 350],\n#     'reg_lambda' : [.01, .5], \n#     'reg_alpha' : [0.01, .5], \n#     'subsample' : [.25, .5],\n#     'learning_rate' : np.linspace(0.1, .7, 5), \n#     'importance_type' : ['split'], \n#     'colsample_bytree' : [.2, .5, .9, 1]\n# }","71a77d81":"lgb_params = {'colsample_bytree': 0.5,\n              'importance_type': 'split',\n              'learning_rate': 0.1,\n              'n_estimators': 100,\n              'num_leaves': 10,\n              'reg_alpha': 0.01,\n              'reg_lambda': 0.5,\n              'subsample': 0.25, \n              'objective' : 'binary'\n         }\nlgb = LGBMClassifier(**lgb_params)\nlgb.fit(X_train_r, y_train_r)","6ac0e597":"fpr, tpr, _ = roc_curve(y_test_r, lgb.predict_proba(X_test_r)[:, 1])\nplt.plot(fpr, tpr)\nprint(roc_auc_score(y_test_r, lgb.predict_proba(X_test_r)[:, 1]))","8082352c":"df_test = to_categorical(df_test, train=False)\ndf_test = pd.concat([df_test[['Age', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']],\n                      pd.get_dummies(df_test[['Gender', 'Driving_License', 'Previously_Insured', 'Vehicle_Damage', 'Vehicle_Age']])], axis=1)","600506f2":"df_test.head()","07ebf744":"y_pred = lgb.predict_proba(df_test)[:, 1]\nsubmission['Response'] = y_pred\nsubmission.head()","f29c304a":"submission.to_csv('submission.csv')","d7aa6e7d":"Params for lgb was found in a GridSearch procedure with space presented below. Probably more detailed search can increase metric.  ","074ccae2":"Let's find outliers in the data and filter them with Isolation Forest algorithm. ","fa4e228a":"Convert columns in test set such as in train set","b35817f5":"Replace outlier markers and make bool array"}}