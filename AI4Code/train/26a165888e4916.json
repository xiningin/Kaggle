{"cell_type":{"f24e6a13":"code","ab8f3c47":"code","04566955":"code","11f27c5d":"code","d1b1359d":"code","da8407e1":"code","97e37f93":"code","6b6a0d97":"code","d57c1b95":"code","844987a6":"code","4ead27e7":"code","4d8a0572":"code","d47e99f0":"code","697f09c9":"code","734744e1":"code","4fb7fe96":"code","9b32547e":"code","96513b50":"code","42dafa3f":"code","16fc8893":"code","d44b23cc":"code","8af3760e":"code","9ed6b54a":"code","9a01e40a":"code","a6fa6faf":"code","30c11587":"code","2d2ed4b9":"code","b94b426e":"code","4e90aa88":"code","d64c290f":"code","281e6362":"code","ab526578":"code","7d94b33d":"code","52200961":"code","a427b184":"code","d059a9a1":"code","9df7a72c":"code","d0ac9938":"code","1146ff92":"code","f8fdaf7e":"code","67aca3da":"code","ddaa9e0f":"code","8e625c8f":"code","c6dbb638":"markdown","fa213d5f":"markdown","494e5513":"markdown","5e155f83":"markdown","e4c0d758":"markdown","fabae750":"markdown","137fdb06":"markdown"},"source":{"f24e6a13":"# Python\n### pip install pystan\n### conda install -c conda-forge fbprophet\nimport pandas as pd\nimport fbprophet\nimport matplotlib.pyplot as plt\n%matplotlib inline","ab8f3c47":"df=pd.read_csv('..\/input\/monthly-milk-production\/monthly-milk-production-pounds.csv')\ndf.head()","04566955":"df.info()","11f27c5d":"df.isnull().sum()","d1b1359d":"df.tail()","da8407e1":"df.drop(168,axis=0,inplace=True)","97e37f93":"df.head()","6b6a0d97":"df.tail()","d57c1b95":"df.columns=['ds','y']","844987a6":"df.plot()","4ead27e7":"\npd.set_option('display.max_rows',None)","4d8a0572":"df.head()","d47e99f0":"df['ds']=pd.to_datetime(df['ds'])","697f09c9":"df.head()","734744e1":"df['y'].plot()","4fb7fe96":"## Shiffting to make stationary\n#df['y']=df['y']-df['y'].shift(1)","9b32547e":"df.head()","96513b50":"plt.figure(figsize=(10,5))\ndf['y'].plot()","42dafa3f":"from fbprophet import Prophet","16fc8893":"dir(Prophet)","d44b23cc":"## Initialize the model\nmodel=Prophet()\nmodel.fit(df)","8af3760e":"model","9ed6b54a":"model.seasonalities","9a01e40a":"model.component_modes","a6fa6faf":"## Create future date 365 days\nfuture_dates=model.make_future_dataframe(periods=365)","30c11587":"\npd.set_option('display.max_rows',None)","2d2ed4b9":"future_dates","b94b426e":"## predicted\nprediction=model.predict(future_dates)","4e90aa88":"prediction.head()","d64c290f":"prediction[['ds','yhat','yhat_lower','yhat_upper']].tail()","281e6362":"prediction[['ds','yhat','yhat_lower','yhat_upper']].head()","ab526578":"## Plot the predicted projection\nmodel.plot(prediction)","7d94b33d":"## Visulize the each components[Trends,Weekly]\nmodel.plot_components(prediction)","52200961":"3*365","a427b184":"from fbprophet.diagnostics import cross_validation\ndf_cv=cross_validation(model,horizon='365 days',period='180 days',initial='1095 days')","d059a9a1":"df.head()","9df7a72c":"df_cv","d0ac9938":"df_cv.shape","1146ff92":"from fbprophet.diagnostics import performance_metrics\ndf_performance=performance_metrics(df_cv)","f8fdaf7e":"df_performance","67aca3da":"## Metrics value is 'rmse'\nfrom fbprophet.plot import plot_cross_validation_metric\nfig=plot_cross_validation_metric(df_cv,metric='rmse')","ddaa9e0f":"## Metrics value is 'mse'\nfrom fbprophet.plot import plot_cross_validation_metric\nfig=plot_cross_validation_metric(df_cv,metric='mse')","8e625c8f":"## Metrics value is 'mape'\nfrom fbprophet.plot import plot_cross_validation_metric\nfig=plot_cross_validation_metric(df_cv,metric='mape')","c6dbb638":"\n#### Obtaining the Performance Metrics\nWe use the performance_metrics utility to compute the Mean Squared Error(MSE), Root Mean Squared Error(RMSE),Mean Absolute Error(MAE), Mean Absolute Percentage Error(MAPE) and the coverage of the the yhat_lower and yhat_upper estimates.","fa213d5f":"### Docstring:\nCross-Validation for time series.\n\nComputes forecasts from historical cutoff points, which user can input.\nIf not provided, begins from (end - horizon) and works backwards, making\ncutoffs with a spacing of period until initial is reached.\n\nWhen period is equal to the time interval of the data, this is the\ntechnique described in https:\/\/robjhyndman.com\/hyndsight\/tscv\/ .\n\nParameters\n----------\n1. model: Prophet class object. Fitted Prophet model.\n2. horizon: string with pd.Timedelta compatible style, e.g., '5 days',\n    '3 hours', '10 seconds'.\n3. period: string with pd.Timedelta compatible style. Simulated forecast will\n    be done at every this period. If not provided, 0.5 * horizon is used.\n4. initial: string with pd.Timedelta compatible style. The first training\n    period will include at least this much data. If not provided,\n    3 * horizon is used.\n5. cutoffs: list of pd.Timestamp specifying cutoffs to be used during\n    cross validtation. If not provided, they are generated as described\n    above.","494e5513":"#### Forecasting Timeseries Data Using Facebook Fbprophet","5e155f83":"##### Suppose i have from data\n1. 1964-1968\n2. 1964-1965---Train\n3. 1965-1966---Test\n4. 1966-1968---Validation","e4c0d758":"\n#### Cross Validation\nNext let\u2019s measure the forecast error using the historical data. We\u2019ll do this by comparing the predicted values with the actual values. In order to perform this operation we select cut of points in the history of the data and fit the model with data upto that cut off point. Afterwards we compare the actual values to the predicted values. The cross_validation method allows us to do this in Prophet. This method take the following parameters as explained below:\n\n1. horizon the forecast horizon\n2. initial the size of the initial training period\n3. period the spacing between cutoff dates","fabae750":"#### Plotting the Forecasts\nProphet has an inbuilt feature that enables us to plot the forecasts we just generated. This is achieved using model.plot() and passing in our forecasts as the argument. The blue line in the graph represents the predicted values while the black dots represents the data in our dataset and the light blue line is basically says Trends.","137fdb06":" Steps Required With FbProphet\n\n1. Introduction And Installation\n2. Data Preprocessing With Time Seires\n3. Model Fitting\n4. Obtaining The Forecasts\n5. Plotting The Forecasts\n6. Cross Validation\n7. Computing Performance Metrics\n8. Visualize the Performance MEtrics\n9. Conclusions"}}