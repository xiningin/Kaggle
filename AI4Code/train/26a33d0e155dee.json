{"cell_type":{"340eefd8":"code","343a0abe":"code","c0791bf9":"code","ad74faa2":"code","a531e116":"code","3fbd28ef":"code","2da1226c":"code","de18ec77":"code","17dfe0e8":"code","b91191cb":"code","b85ef6ab":"code","be5ffb7c":"code","e2401428":"code","e8139585":"code","ff520a81":"code","3ae0a88d":"code","f00fce7a":"markdown","09c082f6":"markdown","d73f6199":"markdown","142f5e17":"markdown","f99101a6":"markdown","297098e8":"markdown","15c38cc5":"markdown","82f5e9a2":"markdown"},"source":{"340eefd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n%config Completer.use_jedi = False","343a0abe":"import os\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n# Target : 'SalePrice' vertically \nX= X_full.drop(\"SalePrice\",axis=1)\ny=X_full[\"SalePrice\"]\ncols = X.columns","c0791bf9":"# What types of features are in the data\n# Find Important categorical data : \ncats=[cat for cat in cols if X[cat].dtype==\"object\" and X[cat].nunique()<10]\nnums=[num for num in cols if X[num].dtype in ['int64', 'float64']]\n# Find Important categorical data : \n# Concate all\ncols= cats+nums","ad74faa2":"# Split Data set \nfrom sklearn.model_selection import train_test_split as split\nX_train_full, X_valid_full, y_train, y_valid = split(X, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=1)\nX_train = X_train_full[cols].copy()\nX_valid = X_valid_full[cols].copy()\nX_test = X_test_full[cols].copy()\nX_full_end=X_full[cols].copy","a531e116":"# Imputer\nfrom sklearn.impute import SimpleImputer as SImp\n# Numerical\nNImp = SImp(strategy=\"mean\")\nCImp = SImp(strategy=\"most_frequent\")\n# One hot encoding \nfrom sklearn.preprocessing import OneHotEncoder","3fbd28ef":"# Build the prepocessing pipeline:\nfrom sklearn.pipeline import Pipeline\n\n# Categorical pipeline:\nCPipline=Pipeline(steps=[\n    (\"impute\",CImp),\n    (\"Encoding\",OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Preprocessih\nfrom sklearn.compose import ColumnTransformer\nPreprocessing=ColumnTransformer(transformers=[\n    (\"Num\",NImp,nums),\n    (\"Cat\",CPipline,cats)\n])","2da1226c":"from xgboost import XGBRegressor as xgb\nmodel=xgb(n_estimators=2000,learning_rate=0.05)\n# Others : Eealy stop ","de18ec77":"pipline=Pipeline(steps=[\n    (\"Pre\",Preprocessing),\n    (\"model\",model)\n])","17dfe0e8":"pipline.fit(X_train,y_train)","b91191cb":"Vprediction=pipline.predict(X_valid)","b85ef6ab":"from sklearn.metrics import mean_absolute_error as mae\nmae(Vprediction,y_valid)","be5ffb7c":"# Train the whole \npipline.fit(X[cols],y)","e2401428":"Aprediction=pipline.predict(X[cols])","e8139585":"mae(Aprediction,y)","ff520a81":"Tprediction=pipline.predict(X_test)","3ae0a88d":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': Tprediction})\noutput.to_csv('submission.csv', index=False)","f00fce7a":"# Prepocessing :\n\nTransfer the data \n\n- Missing values : imputer\n- Categorical values : One-Hot-Encoding","09c082f6":"# Fitting ","d73f6199":"# Submit","142f5e17":"# Compose the Whole Pipeline","f99101a6":"# Evaluation","297098e8":"# Model \nXGBoost\n","15c38cc5":"# Train the whole \n","82f5e9a2":"# Setup :\nTo Turn on Kaggle Auto Complet use  : ***%config Completer.use_jedi = False***\n\n**Tasks :**\n- Import data \n- Columns classification\n- Split data"}}